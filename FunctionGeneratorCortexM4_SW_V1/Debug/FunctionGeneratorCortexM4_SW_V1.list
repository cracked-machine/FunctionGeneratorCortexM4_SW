
FunctionGeneratorCortexM4_SW_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012644  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001458  08012828  08012828  00022828  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013c80  08013c80  00031e78  2**0
                  CONTENTS
  4 .ARM          00000000  08013c80  08013c80  00031e78  2**0
                  CONTENTS
  5 .preinit_array 00000000  08013c80  08013c80  00031e78  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013c80  08013c80  00023c80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013c84  08013c84  00023c84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001e78  20000000  08013c88  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a9c  20001e78  08015b00  00031e78  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002914  08015b00  00032914  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00031e78  2**0
                  CONTENTS, READONLY
 12 .debug_info   000446f0  00000000  00000000  00031ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000076fb  00000000  00000000  00076598  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000021d8  00000000  00000000  0007dc98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001d90  00000000  00000000  0007fe70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00035307  00000000  00000000  00081c00  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002edee  00000000  00000000  000b6f07  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0012646d  00000000  00000000  000e5cf5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0020c162  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000094c4  00000000  00000000  0020c1e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20001e78 	.word	0x20001e78
 80001fc:	00000000 	.word	0x00000000
 8000200:	0801280c 	.word	0x0801280c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20001e7c 	.word	0x20001e7c
 800021c:	0801280c 	.word	0x0801280c

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800040e:	f1a4 0401 	sub.w	r4, r4, #1
 8000412:	d1e9      	bne.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <BiasMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void BiasMenu_DrawMenu(eBiasMenu_Status pMenu)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d000      	beq.n	8000cea <BiasMenu_DrawMenu+0x12>
		case ENABLE_BIAS_MENU:
			BiasMenu_DrawMainMenu();
			break;

		default:
			break;
 8000ce8:	e002      	b.n	8000cf0 <BiasMenu_DrawMenu+0x18>
			BiasMenu_DrawMainMenu();
 8000cea:	f000 f805 	bl	8000cf8 <BiasMenu_DrawMainMenu>
			break;
 8000cee:	bf00      	nop

	}
}
 8000cf0:	bf00      	nop
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <BiasMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void BiasMenu_DrawMainMenu()
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->BIAS", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8000cfe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d02:	9301      	str	r3, [sp, #4]
 8000d04:	2302      	movs	r3, #2
 8000d06:	9300      	str	r3, [sp, #0]
 8000d08:	2300      	movs	r3, #0
 8000d0a:	220a      	movs	r2, #10
 8000d0c:	210a      	movs	r1, #10
 8000d0e:	4804      	ldr	r0, [pc, #16]	; (8000d20 <BiasMenu_DrawMainMenu+0x28>)
 8000d10:	f00c ff70 	bl	800dbf4 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8000d14:	f000 f8f0 	bl	8000ef8 <DM_DisplayFormattedOutput>

}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	08012828 	.word	0x08012828

08000d24 <DM_Init>:
 *	@param None
 *	@retval None
 *
 */
void DM_Init()
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
	  ILI9341_Init();
 8000d28:	f00c ffa5 	bl	800dc76 <ILI9341_Init>
	  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8000d2c:	2003      	movs	r0, #3
 8000d2e:	f00d fbfb 	bl	800e528 <ILI9341_Set_Rotation>
	  ILI9341_Fill_Screen(WHITE);
 8000d32:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000d36:	f00d f9dd 	bl	800e0f4 <ILI9341_Fill_Screen>

}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
	...

08000d40 <DM_PostInit>:
 *	@param None
 *	@retval None
 *
 */
void DM_PostInit()
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af02      	add	r7, sp, #8

	  ILI9341_Draw_Text("Initialising", 10, 10, NORMAL_TEXT_FGCOLOUR, 1, NORMAL_TEXT_BGCOLOUR);
 8000d46:	2300      	movs	r3, #0
 8000d48:	9301      	str	r3, [sp, #4]
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	9300      	str	r3, [sp, #0]
 8000d4e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8000d52:	220a      	movs	r2, #10
 8000d54:	210a      	movs	r1, #10
 8000d56:	4807      	ldr	r0, [pc, #28]	; (8000d74 <DM_PostInit+0x34>)
 8000d58:	f00c ff4c 	bl	800dbf4 <ILI9341_Draw_Text>
	  HAL_Delay(500);
 8000d5c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d60:	f007 fd66 	bl	8008830 <HAL_Delay>

	  DM_RefreshScreen();
 8000d64:	f000 fb66 	bl	8001434 <DM_RefreshScreen>
#ifdef SWV_DEBUG_ENABLED
	  printf("Init Completed\n");
 8000d68:	4803      	ldr	r0, [pc, #12]	; (8000d78 <DM_PostInit+0x38>)
 8000d6a:	f00e fadf 	bl	800f32c <puts>
#endif


}
 8000d6e:	bf00      	nop
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	08012834 	.word	0x08012834
 8000d78:	08012844 	.word	0x08012844

08000d7c <DM_UpdateDisplay>:
 *	@param None
 *	@retval None
 *
 */
void DM_UpdateDisplay()
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af02      	add	r7, sp, #8
	/*
	 * 	Top level menu
	 */
	if(ToplevelMenu_getStatus())
 8000d82:	f003 fcc3 	bl	800470c <ToplevelMenu_getStatus>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d018      	beq.n	8000dbe <DM_UpdateDisplay+0x42>
	{

		#ifdef SWV_DEBUG_ENABLED
			  printf("FuncMenu_DrawMenu\n");
 8000d8c:	4854      	ldr	r0, [pc, #336]	; (8000ee0 <DM_UpdateDisplay+0x164>)
 8000d8e:	f00e facd 	bl	800f32c <puts>
		#endif

		switch(ToplevelMenu_getStatus())
 8000d92:	f003 fcbb 	bl	800470c <ToplevelMenu_getStatus>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b02      	cmp	r3, #2
 8000d9a:	d008      	beq.n	8000dae <DM_UpdateDisplay+0x32>
 8000d9c:	2b03      	cmp	r3, #3
 8000d9e:	d00a      	beq.n	8000db6 <DM_UpdateDisplay+0x3a>
 8000da0:	2b01      	cmp	r3, #1
 8000da2:	d000      	beq.n	8000da6 <DM_UpdateDisplay+0x2a>

				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_INPUT_MENU);
				break;

			default:
				break;
 8000da4:	e089      	b.n	8000eba <DM_UpdateDisplay+0x13e>
				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_MAIN_MENU);
 8000da6:	2001      	movs	r0, #1
 8000da8:	f002 fbc6 	bl	8003538 <ToplevelMenu_DrawMenu>
				break;
 8000dac:	e085      	b.n	8000eba <DM_UpdateDisplay+0x13e>
				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_OUTPUT_MENU);
 8000dae:	2002      	movs	r0, #2
 8000db0:	f002 fbc2 	bl	8003538 <ToplevelMenu_DrawMenu>
				break;
 8000db4:	e081      	b.n	8000eba <DM_UpdateDisplay+0x13e>
				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_INPUT_MENU);
 8000db6:	2003      	movs	r0, #3
 8000db8:	f002 fbbe 	bl	8003538 <ToplevelMenu_DrawMenu>
				break;
 8000dbc:	e07d      	b.n	8000eba <DM_UpdateDisplay+0x13e>
	}

	/*
	 * 	Function menus
	 */
	else if(FuncMenu_getStatus())		//  != DISABLE_FUNC_MENU
 8000dbe:	f003 faa5 	bl	800430c <FuncMenu_getStatus>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d018      	beq.n	8000dfa <DM_UpdateDisplay+0x7e>
	{

		#ifdef SWV_DEBUG_ENABLED
			  printf("FuncMenu_DrawMenu\n");
 8000dc8:	4845      	ldr	r0, [pc, #276]	; (8000ee0 <DM_UpdateDisplay+0x164>)
 8000dca:	f00e faaf 	bl	800f32c <puts>
		#endif

		switch(FuncMenu_getStatus())
 8000dce:	f003 fa9d 	bl	800430c <FuncMenu_getStatus>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b02      	cmp	r3, #2
 8000dd6:	d008      	beq.n	8000dea <DM_UpdateDisplay+0x6e>
 8000dd8:	2b03      	cmp	r3, #3
 8000dda:	d00a      	beq.n	8000df2 <DM_UpdateDisplay+0x76>
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	d000      	beq.n	8000de2 <DM_UpdateDisplay+0x66>
				FuncMenu_DrawMenu(ENABLE_FUNC_SYNC_MENU);

				break;

			default:
				break;
 8000de0:	e06b      	b.n	8000eba <DM_UpdateDisplay+0x13e>
				FuncMenu_DrawMenu(ENABLE_FUNC_MAIN_MENU);
 8000de2:	2001      	movs	r0, #1
 8000de4:	f002 f8d4 	bl	8002f90 <FuncMenu_DrawMenu>
				break;
 8000de8:	e067      	b.n	8000eba <DM_UpdateDisplay+0x13e>
				FuncMenu_DrawMenu(ENABLE_FUNC_SIGNAL_MENU);
 8000dea:	2002      	movs	r0, #2
 8000dec:	f002 f8d0 	bl	8002f90 <FuncMenu_DrawMenu>
				break;
 8000df0:	e063      	b.n	8000eba <DM_UpdateDisplay+0x13e>
				FuncMenu_DrawMenu(ENABLE_FUNC_SYNC_MENU);
 8000df2:	2003      	movs	r0, #3
 8000df4:	f002 f8cc 	bl	8002f90 <FuncMenu_DrawMenu>
				break;
 8000df8:	e05f      	b.n	8000eba <DM_UpdateDisplay+0x13e>

	}
	/*
	 * 	Gain menus
	 */
	else if(GainMenu_getStatus())		//  != DISABLE_GAIN_MENU
 8000dfa:	f003 fb89 	bl	8004510 <GainMenu_getStatus>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d018      	beq.n	8000e36 <DM_UpdateDisplay+0xba>
	{

		#ifdef SWV_DEBUG_ENABLED
			  printf("GainMenu_DrawMenu\n");
 8000e04:	4837      	ldr	r0, [pc, #220]	; (8000ee4 <DM_UpdateDisplay+0x168>)
 8000e06:	f00e fa91 	bl	800f32c <puts>
		#endif

		switch(GainMenu_getStatus())
 8000e0a:	f003 fb81 	bl	8004510 <GainMenu_getStatus>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b02      	cmp	r3, #2
 8000e12:	d008      	beq.n	8000e26 <DM_UpdateDisplay+0xaa>
 8000e14:	2b03      	cmp	r3, #3
 8000e16:	d00a      	beq.n	8000e2e <DM_UpdateDisplay+0xb2>
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d000      	beq.n	8000e1e <DM_UpdateDisplay+0xa2>
				GainMenu_DrawMenu(ENABLE_GAIN_SYNC_MENU);

				break;

			default:
				break;
 8000e1c:	e04d      	b.n	8000eba <DM_UpdateDisplay+0x13e>
				GainMenu_DrawMenu(ENABLE_GAIN_MAIN_MENU);
 8000e1e:	2001      	movs	r0, #1
 8000e20:	f002 fafc 	bl	800341c <GainMenu_DrawMenu>
				break;
 8000e24:	e049      	b.n	8000eba <DM_UpdateDisplay+0x13e>
				GainMenu_DrawMenu(ENABLE_GAIN_SIGNAL_MENU);
 8000e26:	2002      	movs	r0, #2
 8000e28:	f002 faf8 	bl	800341c <GainMenu_DrawMenu>
				break;
 8000e2c:	e045      	b.n	8000eba <DM_UpdateDisplay+0x13e>
				GainMenu_DrawMenu(ENABLE_GAIN_SYNC_MENU);
 8000e2e:	2003      	movs	r0, #3
 8000e30:	f002 faf4 	bl	800341c <GainMenu_DrawMenu>
				break;
 8000e34:	e041      	b.n	8000eba <DM_UpdateDisplay+0x13e>
	}

	/*
	 * 	 Frequency menus
	 */
	else if(FreqMenu_getStatus())		//  != DISABLE_FREQ_MENU
 8000e36:	f003 fa5d 	bl	80042f4 <FreqMenu_getStatus>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d023      	beq.n	8000e88 <DM_UpdateDisplay+0x10c>
	{

		#ifdef SWV_DEBUG_ENABLED
			  printf("FreqMenu_DrawMenu\n");
 8000e40:	4829      	ldr	r0, [pc, #164]	; (8000ee8 <DM_UpdateDisplay+0x16c>)
 8000e42:	f00e fa73 	bl	800f32c <puts>
		#endif

		//ILI9341_Draw_Text("FREQUENCY MENU", 	30, 10, WHITE, 3, BLACK);

		switch(FreqMenu_getStatus())
 8000e46:	f003 fa55 	bl	80042f4 <FreqMenu_getStatus>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	3b01      	subs	r3, #1
 8000e4e:	2b03      	cmp	r3, #3
 8000e50:	d832      	bhi.n	8000eb8 <DM_UpdateDisplay+0x13c>
 8000e52:	a201      	add	r2, pc, #4	; (adr r2, 8000e58 <DM_UpdateDisplay+0xdc>)
 8000e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e58:	08000e69 	.word	0x08000e69
 8000e5c:	08000e71 	.word	0x08000e71
 8000e60:	08000e79 	.word	0x08000e79
 8000e64:	08000e81 	.word	0x08000e81
		{
			case ENABLE_FREQ_MAIN_MENU:

				FreqMenu_DrawMenu(ENABLE_FREQ_MAIN_MENU);
 8000e68:	2001      	movs	r0, #1
 8000e6a:	f000 fb3b 	bl	80014e4 <FreqMenu_DrawMenu>

				break;
 8000e6e:	e024      	b.n	8000eba <DM_UpdateDisplay+0x13e>

			case ENABLE_FREQ_PRESET_MENU:

				FreqMenu_DrawMenu(ENABLE_FREQ_PRESET_MENU);
 8000e70:	2002      	movs	r0, #2
 8000e72:	f000 fb37 	bl	80014e4 <FreqMenu_DrawMenu>
				break;
 8000e76:	e020      	b.n	8000eba <DM_UpdateDisplay+0x13e>

			case ENABLE_FREQ_ADJUST_MENU:


				FreqMenu_DrawMenu(ENABLE_FREQ_ADJUST_MENU);
 8000e78:	2003      	movs	r0, #3
 8000e7a:	f000 fb33 	bl	80014e4 <FreqMenu_DrawMenu>

				break;
 8000e7e:	e01c      	b.n	8000eba <DM_UpdateDisplay+0x13e>

			case ENABLE_FREQ_SWEEP_MENU:

				FreqMenu_DrawMenu(ENABLE_FREQ_SWEEP_MENU);
 8000e80:	2004      	movs	r0, #4
 8000e82:	f000 fb2f 	bl	80014e4 <FreqMenu_DrawMenu>
				break;
 8000e86:	e018      	b.n	8000eba <DM_UpdateDisplay+0x13e>
	}

	/*
	 * 	Bias menu
	 */
	else if(BiasMenu_getStatus())		//  != DISABLE_BIAS_MENU
 8000e88:	f002 fc10 	bl	80036ac <BiasMenu_getStatus>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d006      	beq.n	8000ea0 <DM_UpdateDisplay+0x124>
	{

		#ifdef SWV_DEBUG_ENABLED
			  printf("BiasMenu_DrawMenu\n");
 8000e92:	4816      	ldr	r0, [pc, #88]	; (8000eec <DM_UpdateDisplay+0x170>)
 8000e94:	f00e fa4a 	bl	800f32c <puts>
		#endif

		BiasMenu_DrawMenu(ENABLE_BIAS_MENU);
 8000e98:	2001      	movs	r0, #1
 8000e9a:	f7ff ff1d 	bl	8000cd8 <BiasMenu_DrawMenu>
 8000e9e:	e00c      	b.n	8000eba <DM_UpdateDisplay+0x13e>
	/*
	 * 		Error
	 */
	else
	{
		ILI9341_Draw_Text("DisplayManager: no menu status set!", 10, 50, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 8000ea0:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8000ea4:	9301      	str	r3, [sp, #4]
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	9300      	str	r3, [sp, #0]
 8000eaa:	2300      	movs	r3, #0
 8000eac:	2232      	movs	r2, #50	; 0x32
 8000eae:	210a      	movs	r1, #10
 8000eb0:	480f      	ldr	r0, [pc, #60]	; (8000ef0 <DM_UpdateDisplay+0x174>)
 8000eb2:	f00c fe9f 	bl	800dbf4 <ILI9341_Draw_Text>
 8000eb6:	e000      	b.n	8000eba <DM_UpdateDisplay+0x13e>
				break;
 8000eb8:	bf00      	nop
		char encoder_value[50] = "";
		snprintf(encoder_value, sizeof(encoder_value), "SWEEP_TIMER->ARR: %5lu - ENCODER: %5lu", SWEEP_TIMER->ARR, ENCODER_TIMER->CNT);
		ILI9341_Draw_Text(encoder_value, 10, 190, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
	#endif //ENCODER_DEBUG

	if(*ErrorDebugMsg)
 8000eba:	4b0e      	ldr	r3, [pc, #56]	; (8000ef4 <DM_UpdateDisplay+0x178>)
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d00a      	beq.n	8000ed8 <DM_UpdateDisplay+0x15c>
		ILI9341_Draw_Text(ErrorDebugMsg, 10, 190, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 8000ec2:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8000ec6:	9301      	str	r3, [sp, #4]
 8000ec8:	2301      	movs	r3, #1
 8000eca:	9300      	str	r3, [sp, #0]
 8000ecc:	2300      	movs	r3, #0
 8000ece:	22be      	movs	r2, #190	; 0xbe
 8000ed0:	210a      	movs	r1, #10
 8000ed2:	4808      	ldr	r0, [pc, #32]	; (8000ef4 <DM_UpdateDisplay+0x178>)
 8000ed4:	f00c fe8e 	bl	800dbf4 <ILI9341_Draw_Text>

}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	08012854 	.word	0x08012854
 8000ee4:	08012868 	.word	0x08012868
 8000ee8:	0801287c 	.word	0x0801287c
 8000eec:	08012890 	.word	0x08012890
 8000ef0:	080128a4 	.word	0x080128a4
 8000ef4:	20001e94 	.word	0x20001e94

08000ef8 <DM_DisplayFormattedOutput>:
 *	@param None
 *	@retval None
 *
 */
void DM_DisplayFormattedOutput()
{
 8000ef8:	b590      	push	{r4, r7, lr}
 8000efa:	b09f      	sub	sp, #124	; 0x7c
 8000efc:	af04      	add	r7, sp, #16
	uint8_t text_size = 2;
 8000efe:	2302      	movs	r3, #2
 8000f00:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

	char out_hertz[15] = "";
 8000f04:	2300      	movs	r3, #0
 8000f06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f08:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	605a      	str	r2, [r3, #4]
 8000f12:	f8c3 2007 	str.w	r2, [r3, #7]
	uint8_t out_hertz_x = 140;
 8000f16:	238c      	movs	r3, #140	; 0x8c
 8000f18:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
	uint8_t out_hertz_y = 40;
 8000f1c:	2328      	movs	r3, #40	; 0x28
 8000f1e:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61

	char out_vpp[18] = "";
 8000f22:	2300      	movs	r3, #0
 8000f24:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
 8000f2e:	605a      	str	r2, [r3, #4]
 8000f30:	609a      	str	r2, [r3, #8]
 8000f32:	819a      	strh	r2, [r3, #12]
	uint8_t out_vpp_x = 175;
 8000f34:	23af      	movs	r3, #175	; 0xaf
 8000f36:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	uint8_t out_vpp_y = 70;
 8000f3a:	2346      	movs	r3, #70	; 0x46
 8000f3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

	char out_decibels[20] = "";
 8000f40:	2300      	movs	r3, #0
 8000f42:	617b      	str	r3, [r7, #20]
 8000f44:	f107 0318 	add.w	r3, r7, #24
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]
	uint8_t out_decibels_x = 138;
 8000f52:	238a      	movs	r3, #138	; 0x8a
 8000f54:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t out_decibels_y = 100;
 8000f58:	2364      	movs	r3, #100	; 0x64
 8000f5a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d


	float volts_per_thou = 0.00075;
 8000f5e:	4bc3      	ldr	r3, [pc, #780]	; (800126c <DM_DisplayFormattedOutput+0x374>)
 8000f60:	65bb      	str	r3, [r7, #88]	; 0x58
	char out_dcvolts[12] = "";
 8000f62:	2300      	movs	r3, #0
 8000f64:	60bb      	str	r3, [r7, #8]
 8000f66:	f107 030c 	add.w	r3, r7, #12
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	605a      	str	r2, [r3, #4]
	uint8_t out_dcvolts_x = 161;
 8000f70:	23a1      	movs	r3, #161	; 0xa1
 8000f72:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t out_dcvolts_y = 130;
 8000f76:	2382      	movs	r3, #130	; 0x82
 8000f78:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56

	ILI9341_Draw_Text(" FREQ   ....", 3, out_hertz_y , NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8000f7c:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8000f80:	b299      	uxth	r1, r3
 8000f82:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000f86:	b29b      	uxth	r3, r3
 8000f88:	2200      	movs	r2, #0
 8000f8a:	9201      	str	r2, [sp, #4]
 8000f8c:	9300      	str	r3, [sp, #0]
 8000f8e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8000f92:	460a      	mov	r2, r1
 8000f94:	2103      	movs	r1, #3
 8000f96:	48b6      	ldr	r0, [pc, #728]	; (8001270 <DM_DisplayFormattedOutput+0x378>)
 8000f98:	f00c fe2c 	bl	800dbf4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(" VPP    ....", 3, out_vpp_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8000f9c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000fa0:	b299      	uxth	r1, r3
 8000fa2:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000fa6:	b29b      	uxth	r3, r3
 8000fa8:	2200      	movs	r2, #0
 8000faa:	9201      	str	r2, [sp, #4]
 8000fac:	9300      	str	r3, [sp, #0]
 8000fae:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8000fb2:	460a      	mov	r2, r1
 8000fb4:	2103      	movs	r1, #3
 8000fb6:	48af      	ldr	r0, [pc, #700]	; (8001274 <DM_DisplayFormattedOutput+0x37c>)
 8000fb8:	f00c fe1c 	bl	800dbf4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(" GAIN   ....", 3, out_decibels_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8000fbc:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8000fc0:	b299      	uxth	r1, r3
 8000fc2:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000fc6:	b29b      	uxth	r3, r3
 8000fc8:	2200      	movs	r2, #0
 8000fca:	9201      	str	r2, [sp, #4]
 8000fcc:	9300      	str	r3, [sp, #0]
 8000fce:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8000fd2:	460a      	mov	r2, r1
 8000fd4:	2103      	movs	r1, #3
 8000fd6:	48a8      	ldr	r0, [pc, #672]	; (8001278 <DM_DisplayFormattedOutput+0x380>)
 8000fd8:	f00c fe0c 	bl	800dbf4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(" OFFSET ....", 3, out_dcvolts_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8000fdc:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8000fe0:	b299      	uxth	r1, r3
 8000fe2:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000fe6:	b29b      	uxth	r3, r3
 8000fe8:	2200      	movs	r2, #0
 8000fea:	9201      	str	r2, [sp, #4]
 8000fec:	9300      	str	r3, [sp, #0]
 8000fee:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8000ff2:	460a      	mov	r2, r1
 8000ff4:	2103      	movs	r1, #3
 8000ff6:	48a1      	ldr	r0, [pc, #644]	; (800127c <DM_DisplayFormattedOutput+0x384>)
 8000ff8:	f00c fdfc 	bl	800dbf4 <ILI9341_Draw_Text>

	// display output in hertz
	snprintf(out_hertz, sizeof(out_hertz), " %4.2f   Hz ", SM_GetOutputInHertz());
 8000ffc:	f004 fbbc 	bl	8005778 <SM_GetOutputInHertz>
 8001000:	ee10 3a10 	vmov	r3, s0
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff fac7 	bl	8000598 <__aeabi_f2d>
 800100a:	4603      	mov	r3, r0
 800100c:	460c      	mov	r4, r1
 800100e:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8001012:	e9cd 3400 	strd	r3, r4, [sp]
 8001016:	4a9a      	ldr	r2, [pc, #616]	; (8001280 <DM_DisplayFormattedOutput+0x388>)
 8001018:	210f      	movs	r1, #15
 800101a:	f00e f98f 	bl	800f33c <sniprintf>
	ILI9341_Draw_Text(out_hertz, out_hertz_x, out_hertz_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 800101e:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 8001022:	b299      	uxth	r1, r3
 8001024:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8001028:	b29c      	uxth	r4, r3
 800102a:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800102e:	b29b      	uxth	r3, r3
 8001030:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8001034:	2200      	movs	r2, #0
 8001036:	9201      	str	r2, [sp, #4]
 8001038:	9300      	str	r3, [sp, #0]
 800103a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800103e:	4622      	mov	r2, r4
 8001040:	f00c fdd8 	bl	800dbf4 <ILI9341_Draw_Text>

	// display output in volts peak-to-peak and decibels
	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile;
 8001044:	2000      	movs	r0, #0
 8001046:	f004 fb65 	bl	8005714 <SM_GetOutputChannel>
 800104a:	4603      	mov	r3, r0
 800104c:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8001050:	653b      	str	r3, [r7, #80]	; 0x50

	if(pTmpVppPreset)
 8001052:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001054:	2b00      	cmp	r3, #0
 8001056:	d01d      	beq.n	8001094 <DM_DisplayFormattedOutput+0x19c>
	{
		snprintf(out_vpp, sizeof(out_vpp), " %2.2f   V ", pTmpVppPreset->amp_value);
 8001058:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff fa9b 	bl	8000598 <__aeabi_f2d>
 8001062:	4603      	mov	r3, r0
 8001064:	460c      	mov	r4, r1
 8001066:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800106a:	e9cd 3400 	strd	r3, r4, [sp]
 800106e:	4a85      	ldr	r2, [pc, #532]	; (8001284 <DM_DisplayFormattedOutput+0x38c>)
 8001070:	2112      	movs	r1, #18
 8001072:	f00e f963 	bl	800f33c <sniprintf>
		snprintf(out_decibels, sizeof(out_decibels), " %+7.2f ", pTmpVppPreset->gain_decibels);
 8001076:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001078:	68db      	ldr	r3, [r3, #12]
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff fa8c 	bl	8000598 <__aeabi_f2d>
 8001080:	4603      	mov	r3, r0
 8001082:	460c      	mov	r4, r1
 8001084:	f107 0014 	add.w	r0, r7, #20
 8001088:	e9cd 3400 	strd	r3, r4, [sp]
 800108c:	4a7e      	ldr	r2, [pc, #504]	; (8001288 <DM_DisplayFormattedOutput+0x390>)
 800108e:	2114      	movs	r1, #20
 8001090:	f00e f954 	bl	800f33c <sniprintf>
	}
	ILI9341_Draw_Text(out_vpp, out_vpp_x, out_vpp_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001094:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8001098:	b299      	uxth	r1, r3
 800109a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800109e:	b29c      	uxth	r4, r3
 80010a0:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80010a4:	b29b      	uxth	r3, r3
 80010a6:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80010aa:	2200      	movs	r2, #0
 80010ac:	9201      	str	r2, [sp, #4]
 80010ae:	9300      	str	r3, [sp, #0]
 80010b0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80010b4:	4622      	mov	r2, r4
 80010b6:	f00c fd9d 	bl	800dbf4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(out_decibels, out_decibels_x, out_decibels_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 80010ba:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80010be:	b299      	uxth	r1, r3
 80010c0:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80010c4:	b29c      	uxth	r4, r3
 80010c6:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80010ca:	b29b      	uxth	r3, r3
 80010cc:	f107 0014 	add.w	r0, r7, #20
 80010d0:	2200      	movs	r2, #0
 80010d2:	9201      	str	r2, [sp, #4]
 80010d4:	9300      	str	r3, [sp, #0]
 80010d6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80010da:	4622      	mov	r2, r4
 80010dc:	f00c fd8a 	bl	800dbf4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("dBmV", out_decibels_x + 128, out_decibels_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 80010e0:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	3380      	adds	r3, #128	; 0x80
 80010e8:	b299      	uxth	r1, r3
 80010ea:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80010ee:	b298      	uxth	r0, r3
 80010f0:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	2200      	movs	r2, #0
 80010f8:	9201      	str	r2, [sp, #4]
 80010fa:	9300      	str	r3, [sp, #0]
 80010fc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001100:	4602      	mov	r2, r0
 8001102:	4862      	ldr	r0, [pc, #392]	; (800128c <DM_DisplayFormattedOutput+0x394>)
 8001104:	f00c fd76 	bl	800dbf4 <ILI9341_Draw_Text>


	// display output bias in +/- Volts
	float dc_volts;
	(BO_GetOutputBias() == 0) ? (dc_volts = 0) : (dc_volts = volts_per_thou * (float)BO_GetOutputBias());
 8001108:	f003 fd30 	bl	8004b6c <BO_GetOutputBias>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d103      	bne.n	800111a <DM_DisplayFormattedOutput+0x222>
 8001112:	f04f 0300 	mov.w	r3, #0
 8001116:	667b      	str	r3, [r7, #100]	; 0x64
 8001118:	e00b      	b.n	8001132 <DM_DisplayFormattedOutput+0x23a>
 800111a:	f003 fd27 	bl	8004b6c <BO_GetOutputBias>
 800111e:	ee07 0a90 	vmov	s15, r0
 8001122:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001126:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800112a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800112e:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64

	snprintf(out_dcvolts, sizeof(out_dcvolts), "%05.2f   v ", dc_volts);
 8001132:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001134:	f7ff fa30 	bl	8000598 <__aeabi_f2d>
 8001138:	4603      	mov	r3, r0
 800113a:	460c      	mov	r4, r1
 800113c:	f107 0008 	add.w	r0, r7, #8
 8001140:	e9cd 3400 	strd	r3, r4, [sp]
 8001144:	4a52      	ldr	r2, [pc, #328]	; (8001290 <DM_DisplayFormattedOutput+0x398>)
 8001146:	210c      	movs	r1, #12
 8001148:	f00e f8f8 	bl	800f33c <sniprintf>
	if(BO_GetBiasPolarity())
 800114c:	f003 fcae 	bl	8004aac <BO_GetBiasPolarity>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d022      	beq.n	800119c <DM_DisplayFormattedOutput+0x2a4>
	{
		char symbol[3] = "+\0";
 8001156:	4a4f      	ldr	r2, [pc, #316]	; (8001294 <DM_DisplayFormattedOutput+0x39c>)
 8001158:	1d3b      	adds	r3, r7, #4
 800115a:	6812      	ldr	r2, [r2, #0]
 800115c:	4611      	mov	r1, r2
 800115e:	8019      	strh	r1, [r3, #0]
 8001160:	3302      	adds	r3, #2
 8001162:	0c12      	lsrs	r2, r2, #16
 8001164:	701a      	strb	r2, [r3, #0]
		ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001166:	f107 0208 	add.w	r2, r7, #8
 800116a:	1d3b      	adds	r3, r7, #4
 800116c:	4611      	mov	r1, r2
 800116e:	4618      	mov	r0, r3
 8001170:	f00e f918 	bl	800f3a4 <strcat>
 8001174:	4604      	mov	r4, r0
 8001176:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800117a:	b299      	uxth	r1, r3
 800117c:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001180:	b298      	uxth	r0, r3
 8001182:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001186:	b29b      	uxth	r3, r3
 8001188:	2200      	movs	r2, #0
 800118a:	9201      	str	r2, [sp, #4]
 800118c:	9300      	str	r3, [sp, #0]
 800118e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001192:	4602      	mov	r2, r0
 8001194:	4620      	mov	r0, r4
 8001196:	f00c fd2d 	bl	800dbf4 <ILI9341_Draw_Text>
 800119a:	e021      	b.n	80011e0 <DM_DisplayFormattedOutput+0x2e8>
	}
	else
	{
		char symbol[3] = "-\0";
 800119c:	4a3e      	ldr	r2, [pc, #248]	; (8001298 <DM_DisplayFormattedOutput+0x3a0>)
 800119e:	463b      	mov	r3, r7
 80011a0:	6812      	ldr	r2, [r2, #0]
 80011a2:	4611      	mov	r1, r2
 80011a4:	8019      	strh	r1, [r3, #0]
 80011a6:	3302      	adds	r3, #2
 80011a8:	0c12      	lsrs	r2, r2, #16
 80011aa:	701a      	strb	r2, [r3, #0]
		ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 80011ac:	f107 0208 	add.w	r2, r7, #8
 80011b0:	463b      	mov	r3, r7
 80011b2:	4611      	mov	r1, r2
 80011b4:	4618      	mov	r0, r3
 80011b6:	f00e f8f5 	bl	800f3a4 <strcat>
 80011ba:	4604      	mov	r4, r0
 80011bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80011c0:	b299      	uxth	r1, r3
 80011c2:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80011c6:	b298      	uxth	r0, r3
 80011c8:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	2200      	movs	r2, #0
 80011d0:	9201      	str	r2, [sp, #4]
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80011d8:	4602      	mov	r2, r0
 80011da:	4620      	mov	r0, r4
 80011dc:	f00c fd0a 	bl	800dbf4 <ILI9341_Draw_Text>
	}

	ILI9341_Draw_Text(" OUT:", 3, 170, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 80011e0:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80011e4:	b29b      	uxth	r3, r3
 80011e6:	2200      	movs	r2, #0
 80011e8:	9201      	str	r2, [sp, #4]
 80011ea:	9300      	str	r3, [sp, #0]
 80011ec:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80011f0:	22aa      	movs	r2, #170	; 0xaa
 80011f2:	2103      	movs	r1, #3
 80011f4:	4829      	ldr	r0, [pc, #164]	; (800129c <DM_DisplayFormattedOutput+0x3a4>)
 80011f6:	f00c fcfd 	bl	800dbf4 <ILI9341_Draw_Text>
	eOutput_mode signal_output_func = SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile->func;
 80011fa:	2000      	movs	r0, #0
 80011fc:	f004 fa8a 	bl	8005714 <SM_GetOutputChannel>
 8001200:	4603      	mov	r3, r0
 8001202:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	switch(signal_output_func)
 800120c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001210:	2b05      	cmp	r3, #5
 8001212:	f200 8081 	bhi.w	8001318 <DM_DisplayFormattedOutput+0x420>
 8001216:	a201      	add	r2, pc, #4	; (adr r2, 800121c <DM_DisplayFormattedOutput+0x324>)
 8001218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800121c:	08001235 	.word	0x08001235
 8001220:	08001251 	.word	0x08001251
 8001224:	080012a9 	.word	0x080012a9
 8001228:	080012c5 	.word	0x080012c5
 800122c:	080012e1 	.word	0x080012e1
 8001230:	080012fd 	.word	0x080012fd
	{
		case SINE_FUNC_MODE:

			ILI9341_Draw_Wave(80, 140, 3, BLUE, 100, sineicon_data_table_1300, SINEICON_DATA_SIZE);
 8001234:	233c      	movs	r3, #60	; 0x3c
 8001236:	9302      	str	r3, [sp, #8]
 8001238:	4b19      	ldr	r3, [pc, #100]	; (80012a0 <DM_DisplayFormattedOutput+0x3a8>)
 800123a:	9301      	str	r3, [sp, #4]
 800123c:	2364      	movs	r3, #100	; 0x64
 800123e:	9300      	str	r3, [sp, #0]
 8001240:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001244:	2203      	movs	r2, #3
 8001246:	218c      	movs	r1, #140	; 0x8c
 8001248:	2050      	movs	r0, #80	; 0x50
 800124a:	f00c fb2f 	bl	800d8ac <ILI9341_Draw_Wave>
			break;
 800124e:	e063      	b.n	8001318 <DM_DisplayFormattedOutput+0x420>
		case SQUARE_FUNC_MODE:
			ILI9341_Draw_Wave(80, 160, 3, BLUE, 200, squareicon_data_table_3600, SQUAREICON_DATA_SIZE);
 8001250:	233c      	movs	r3, #60	; 0x3c
 8001252:	9302      	str	r3, [sp, #8]
 8001254:	4b13      	ldr	r3, [pc, #76]	; (80012a4 <DM_DisplayFormattedOutput+0x3ac>)
 8001256:	9301      	str	r3, [sp, #4]
 8001258:	23c8      	movs	r3, #200	; 0xc8
 800125a:	9300      	str	r3, [sp, #0]
 800125c:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001260:	2203      	movs	r2, #3
 8001262:	21a0      	movs	r1, #160	; 0xa0
 8001264:	2050      	movs	r0, #80	; 0x50
 8001266:	f00c fb21 	bl	800d8ac <ILI9341_Draw_Wave>
			break;
 800126a:	e055      	b.n	8001318 <DM_DisplayFormattedOutput+0x420>
 800126c:	3a449ba6 	.word	0x3a449ba6
 8001270:	080128c8 	.word	0x080128c8
 8001274:	080128d8 	.word	0x080128d8
 8001278:	080128e8 	.word	0x080128e8
 800127c:	080128f8 	.word	0x080128f8
 8001280:	08012908 	.word	0x08012908
 8001284:	08012918 	.word	0x08012918
 8001288:	08012924 	.word	0x08012924
 800128c:	08012930 	.word	0x08012930
 8001290:	08012938 	.word	0x08012938
 8001294:	08012954 	.word	0x08012954
 8001298:	08012958 	.word	0x08012958
 800129c:	08012944 	.word	0x08012944
 80012a0:	20000e94 	.word	0x20000e94
 80012a4:	20000f84 	.word	0x20000f84
		case SAW_FUNC_MODE:
			ILI9341_Draw_Wave(80, 160, 3, BLUE, 200, sawicon_data_table_3600, SAWICON_DATA_SIZE);
 80012a8:	233c      	movs	r3, #60	; 0x3c
 80012aa:	9302      	str	r3, [sp, #8]
 80012ac:	4b5b      	ldr	r3, [pc, #364]	; (800141c <DM_DisplayFormattedOutput+0x524>)
 80012ae:	9301      	str	r3, [sp, #4]
 80012b0:	23c8      	movs	r3, #200	; 0xc8
 80012b2:	9300      	str	r3, [sp, #0]
 80012b4:	f240 23fd 	movw	r3, #765	; 0x2fd
 80012b8:	2203      	movs	r2, #3
 80012ba:	21a0      	movs	r1, #160	; 0xa0
 80012bc:	2050      	movs	r0, #80	; 0x50
 80012be:	f00c faf5 	bl	800d8ac <ILI9341_Draw_Wave>
			break;
 80012c2:	e029      	b.n	8001318 <DM_DisplayFormattedOutput+0x420>
		case REV_SAW_FUNC_MODE:
			ILI9341_Draw_Wave(80, 160, 3, BLUE, 200, sawicon_rev_data_table_3600, SAWICON_REV_DATA_SIZE);
 80012c4:	233c      	movs	r3, #60	; 0x3c
 80012c6:	9302      	str	r3, [sp, #8]
 80012c8:	4b55      	ldr	r3, [pc, #340]	; (8001420 <DM_DisplayFormattedOutput+0x528>)
 80012ca:	9301      	str	r3, [sp, #4]
 80012cc:	23c8      	movs	r3, #200	; 0xc8
 80012ce:	9300      	str	r3, [sp, #0]
 80012d0:	f240 23fd 	movw	r3, #765	; 0x2fd
 80012d4:	2203      	movs	r2, #3
 80012d6:	21a0      	movs	r1, #160	; 0xa0
 80012d8:	2050      	movs	r0, #80	; 0x50
 80012da:	f00c fae7 	bl	800d8ac <ILI9341_Draw_Wave>
			break;
 80012de:	e01b      	b.n	8001318 <DM_DisplayFormattedOutput+0x420>
		case TRIANGLE_FUNC_MODE:
			ILI9341_Draw_Wave(80, 160, 3, BLUE, 200, triangleicon_data_table_3600, TRIANGLEICON_DATA_SIZE);
 80012e0:	233c      	movs	r3, #60	; 0x3c
 80012e2:	9302      	str	r3, [sp, #8]
 80012e4:	4b4f      	ldr	r3, [pc, #316]	; (8001424 <DM_DisplayFormattedOutput+0x52c>)
 80012e6:	9301      	str	r3, [sp, #4]
 80012e8:	23c8      	movs	r3, #200	; 0xc8
 80012ea:	9300      	str	r3, [sp, #0]
 80012ec:	f240 23fd 	movw	r3, #765	; 0x2fd
 80012f0:	2203      	movs	r2, #3
 80012f2:	21a0      	movs	r1, #160	; 0xa0
 80012f4:	2050      	movs	r0, #80	; 0x50
 80012f6:	f00c fad9 	bl	800d8ac <ILI9341_Draw_Wave>
			break;
 80012fa:	e00d      	b.n	8001318 <DM_DisplayFormattedOutput+0x420>
		case IMPULSE_FUNC_MODE:
			ILI9341_Draw_Wave(80, 160, 3, BLUE, 200, triangleicon_data_table_3600, TRIANGLEICON_DATA_SIZE);
 80012fc:	233c      	movs	r3, #60	; 0x3c
 80012fe:	9302      	str	r3, [sp, #8]
 8001300:	4b48      	ldr	r3, [pc, #288]	; (8001424 <DM_DisplayFormattedOutput+0x52c>)
 8001302:	9301      	str	r3, [sp, #4]
 8001304:	23c8      	movs	r3, #200	; 0xc8
 8001306:	9300      	str	r3, [sp, #0]
 8001308:	f240 23fd 	movw	r3, #765	; 0x2fd
 800130c:	2203      	movs	r2, #3
 800130e:	21a0      	movs	r1, #160	; 0xa0
 8001310:	2050      	movs	r0, #80	; 0x50
 8001312:	f00c facb 	bl	800d8ac <ILI9341_Draw_Wave>
			break;
 8001316:	bf00      	nop
	}

	ILI9341_Draw_Text("AUX:", 180, 170, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001318:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800131c:	b29b      	uxth	r3, r3
 800131e:	2200      	movs	r2, #0
 8001320:	9201      	str	r2, [sp, #4]
 8001322:	9300      	str	r3, [sp, #0]
 8001324:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001328:	22aa      	movs	r2, #170	; 0xaa
 800132a:	21b4      	movs	r1, #180	; 0xb4
 800132c:	483e      	ldr	r0, [pc, #248]	; (8001428 <DM_DisplayFormattedOutput+0x530>)
 800132e:	f00c fc61 	bl	800dbf4 <ILI9341_Draw_Text>
	eOutput_mode sync_output_func = SM_GetOutputChannel(SYNC_CHANNEL)->func_profile->func;
 8001332:	2001      	movs	r0, #1
 8001334:	f004 f9ee 	bl	8005714 <SM_GetOutputChannel>
 8001338:	4603      	mov	r3, r0
 800133a:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	switch(sync_output_func)
 8001344:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001348:	2b05      	cmp	r3, #5
 800134a:	d863      	bhi.n	8001414 <DM_DisplayFormattedOutput+0x51c>
 800134c:	a201      	add	r2, pc, #4	; (adr r2, 8001354 <DM_DisplayFormattedOutput+0x45c>)
 800134e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001352:	bf00      	nop
 8001354:	0800136d 	.word	0x0800136d
 8001358:	08001389 	.word	0x08001389
 800135c:	080013a5 	.word	0x080013a5
 8001360:	080013c1 	.word	0x080013c1
 8001364:	080013dd 	.word	0x080013dd
 8001368:	080013f9 	.word	0x080013f9
	{
		case SINE_FUNC_MODE:

			ILI9341_Draw_Wave(245, 140, 3, RED, 100, sineicon_data_table_1300, SINEICON_DATA_SIZE);
 800136c:	233c      	movs	r3, #60	; 0x3c
 800136e:	9302      	str	r3, [sp, #8]
 8001370:	4b2e      	ldr	r3, [pc, #184]	; (800142c <DM_DisplayFormattedOutput+0x534>)
 8001372:	9301      	str	r3, [sp, #4]
 8001374:	2364      	movs	r3, #100	; 0x64
 8001376:	9300      	str	r3, [sp, #0]
 8001378:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800137c:	2203      	movs	r2, #3
 800137e:	218c      	movs	r1, #140	; 0x8c
 8001380:	20f5      	movs	r0, #245	; 0xf5
 8001382:	f00c fa93 	bl	800d8ac <ILI9341_Draw_Wave>
			break;
 8001386:	e045      	b.n	8001414 <DM_DisplayFormattedOutput+0x51c>
		case SQUARE_FUNC_MODE:
			ILI9341_Draw_Wave(245, 160, 3, RED, 200, squareicon_data_table_3600, SQUAREICON_DATA_SIZE);
 8001388:	233c      	movs	r3, #60	; 0x3c
 800138a:	9302      	str	r3, [sp, #8]
 800138c:	4b28      	ldr	r3, [pc, #160]	; (8001430 <DM_DisplayFormattedOutput+0x538>)
 800138e:	9301      	str	r3, [sp, #4]
 8001390:	23c8      	movs	r3, #200	; 0xc8
 8001392:	9300      	str	r3, [sp, #0]
 8001394:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8001398:	2203      	movs	r2, #3
 800139a:	21a0      	movs	r1, #160	; 0xa0
 800139c:	20f5      	movs	r0, #245	; 0xf5
 800139e:	f00c fa85 	bl	800d8ac <ILI9341_Draw_Wave>
			break;
 80013a2:	e037      	b.n	8001414 <DM_DisplayFormattedOutput+0x51c>
		case SAW_FUNC_MODE:
			ILI9341_Draw_Wave(245, 160, 3, RED, 200, sawicon_data_table_3600, SAWICON_DATA_SIZE);
 80013a4:	233c      	movs	r3, #60	; 0x3c
 80013a6:	9302      	str	r3, [sp, #8]
 80013a8:	4b1c      	ldr	r3, [pc, #112]	; (800141c <DM_DisplayFormattedOutput+0x524>)
 80013aa:	9301      	str	r3, [sp, #4]
 80013ac:	23c8      	movs	r3, #200	; 0xc8
 80013ae:	9300      	str	r3, [sp, #0]
 80013b0:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80013b4:	2203      	movs	r2, #3
 80013b6:	21a0      	movs	r1, #160	; 0xa0
 80013b8:	20f5      	movs	r0, #245	; 0xf5
 80013ba:	f00c fa77 	bl	800d8ac <ILI9341_Draw_Wave>
			break;
 80013be:	e029      	b.n	8001414 <DM_DisplayFormattedOutput+0x51c>
		case REV_SAW_FUNC_MODE:
			ILI9341_Draw_Wave(245, 160, 3, RED, 200, sawicon_rev_data_table_3600, SAWICON_REV_DATA_SIZE);
 80013c0:	233c      	movs	r3, #60	; 0x3c
 80013c2:	9302      	str	r3, [sp, #8]
 80013c4:	4b16      	ldr	r3, [pc, #88]	; (8001420 <DM_DisplayFormattedOutput+0x528>)
 80013c6:	9301      	str	r3, [sp, #4]
 80013c8:	23c8      	movs	r3, #200	; 0xc8
 80013ca:	9300      	str	r3, [sp, #0]
 80013cc:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80013d0:	2203      	movs	r2, #3
 80013d2:	21a0      	movs	r1, #160	; 0xa0
 80013d4:	20f5      	movs	r0, #245	; 0xf5
 80013d6:	f00c fa69 	bl	800d8ac <ILI9341_Draw_Wave>
			break;
 80013da:	e01b      	b.n	8001414 <DM_DisplayFormattedOutput+0x51c>
		case TRIANGLE_FUNC_MODE:
			ILI9341_Draw_Wave(245, 160, 3, RED, 200, triangleicon_data_table_3600, TRIANGLEICON_DATA_SIZE);
 80013dc:	233c      	movs	r3, #60	; 0x3c
 80013de:	9302      	str	r3, [sp, #8]
 80013e0:	4b10      	ldr	r3, [pc, #64]	; (8001424 <DM_DisplayFormattedOutput+0x52c>)
 80013e2:	9301      	str	r3, [sp, #4]
 80013e4:	23c8      	movs	r3, #200	; 0xc8
 80013e6:	9300      	str	r3, [sp, #0]
 80013e8:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80013ec:	2203      	movs	r2, #3
 80013ee:	21a0      	movs	r1, #160	; 0xa0
 80013f0:	20f5      	movs	r0, #245	; 0xf5
 80013f2:	f00c fa5b 	bl	800d8ac <ILI9341_Draw_Wave>
			break;
 80013f6:	e00d      	b.n	8001414 <DM_DisplayFormattedOutput+0x51c>
		case IMPULSE_FUNC_MODE:
			ILI9341_Draw_Wave(245, 160, 3, RED, 200, triangleicon_data_table_3600, TRIANGLEICON_DATA_SIZE);
 80013f8:	233c      	movs	r3, #60	; 0x3c
 80013fa:	9302      	str	r3, [sp, #8]
 80013fc:	4b09      	ldr	r3, [pc, #36]	; (8001424 <DM_DisplayFormattedOutput+0x52c>)
 80013fe:	9301      	str	r3, [sp, #4]
 8001400:	23c8      	movs	r3, #200	; 0xc8
 8001402:	9300      	str	r3, [sp, #0]
 8001404:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8001408:	2203      	movs	r2, #3
 800140a:	21a0      	movs	r1, #160	; 0xa0
 800140c:	20f5      	movs	r0, #245	; 0xf5
 800140e:	f00c fa4d 	bl	800d8ac <ILI9341_Draw_Wave>
			break;
 8001412:	bf00      	nop
	}



}
 8001414:	bf00      	nop
 8001416:	376c      	adds	r7, #108	; 0x6c
 8001418:	46bd      	mov	sp, r7
 800141a:	bd90      	pop	{r4, r7, pc}
 800141c:	20000cb4 	.word	0x20000cb4
 8001420:	20000da4 	.word	0x20000da4
 8001424:	20001074 	.word	0x20001074
 8001428:	0801294c 	.word	0x0801294c
 800142c:	20000e94 	.word	0x20000e94
 8001430:	20000f84 	.word	0x20000f84

08001434 <DM_RefreshScreen>:
 *	@param None
 *	@retval None
 *
 */
void DM_RefreshScreen()
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af04      	add	r7, sp, #16



	// pause display interrupts
	HAL_TIM_Base_Stop_IT(&htim15);
 800143a:	4820      	ldr	r0, [pc, #128]	; (80014bc <DM_RefreshScreen+0x88>)
 800143c:	f00b f85c 	bl	800c4f8 <HAL_TIM_Base_Stop_IT>


	ILI9341_Fill_Screen(SCREEN_BGCOLOUR);
 8001440:	2000      	movs	r0, #0
 8001442:	f00c fe57 	bl	800e0f4 <ILI9341_Fill_Screen>
	GUI_DrawPolygon(Points, 3, RED);
	GUI_FillPolygon(Points2, 3, BLUE);
	GUI_DrawEllipse(250, 110, 20, 30, GREEN);
	GUI_FillEllipse(250, 110, 20, 30, WHITE);
*/
	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	0,
 8001446:	2300      	movs	r3, #0
 8001448:	9302      	str	r3, [sp, #8]
 800144a:	2302      	movs	r3, #2
 800144c:	9301      	str	r3, [sp, #4]
 800144e:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001452:	9300      	str	r3, [sp, #0]
 8001454:	2328      	movs	r3, #40	; 0x28
 8001456:	2250      	movs	r2, #80	; 0x50
 8001458:	21c8      	movs	r1, #200	; 0xc8
 800145a:	2000      	movs	r0, #0
 800145c:	f00c fa67 	bl	800d92e <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													BTN1_FILL_COLOUR,
													BTN1_BORDER_WEIGHT,
													BTN1_BORDER_COLOUR);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	BTN_WIDTH,
 8001460:	2300      	movs	r3, #0
 8001462:	9302      	str	r3, [sp, #8]
 8001464:	2302      	movs	r3, #2
 8001466:	9301      	str	r3, [sp, #4]
 8001468:	f241 43a2 	movw	r3, #5282	; 0x14a2
 800146c:	9300      	str	r3, [sp, #0]
 800146e:	2328      	movs	r3, #40	; 0x28
 8001470:	2250      	movs	r2, #80	; 0x50
 8001472:	21c8      	movs	r1, #200	; 0xc8
 8001474:	2050      	movs	r0, #80	; 0x50
 8001476:	f00c fa5a 	bl	800d92e <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													BTN2_FILL_COLOUR,
													BTN2_BORDER_WEIGHT,
													BTN2_BORDER_COLOUR);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	BTN_WIDTH*2,
 800147a:	2300      	movs	r3, #0
 800147c:	9302      	str	r3, [sp, #8]
 800147e:	2302      	movs	r3, #2
 8001480:	9301      	str	r3, [sp, #4]
 8001482:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001486:	9300      	str	r3, [sp, #0]
 8001488:	2328      	movs	r3, #40	; 0x28
 800148a:	2250      	movs	r2, #80	; 0x50
 800148c:	21c8      	movs	r1, #200	; 0xc8
 800148e:	20a0      	movs	r0, #160	; 0xa0
 8001490:	f00c fa4d 	bl	800d92e <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													BTN3_FILL_COLOUR,
													BTN3_BORDER_WEIGHT,
													BTN3_BORDER_COLOUR);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	BTN_WIDTH*3,
 8001494:	2300      	movs	r3, #0
 8001496:	9302      	str	r3, [sp, #8]
 8001498:	2302      	movs	r3, #2
 800149a:	9301      	str	r3, [sp, #4]
 800149c:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80014a0:	9300      	str	r3, [sp, #0]
 80014a2:	2328      	movs	r3, #40	; 0x28
 80014a4:	2250      	movs	r2, #80	; 0x50
 80014a6:	21c8      	movs	r1, #200	; 0xc8
 80014a8:	20f0      	movs	r0, #240	; 0xf0
 80014aa:	f00c fa40 	bl	800d92e <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN4_FILL_COLOUR,
													BTN4_BORDER_WEIGHT,
													BTN4_BORDER_COLOUR);

	// resume diaplay interrupts
	HAL_TIM_Base_Start_IT(&htim15);
 80014ae:	4803      	ldr	r0, [pc, #12]	; (80014bc <DM_RefreshScreen+0x88>)
 80014b0:	f00a ffec 	bl	800c48c <HAL_TIM_Base_Start_IT>


}
 80014b4:	bf00      	nop
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	20002744 	.word	0x20002744

080014c0 <DM_SetErrorDebugMsg>:
	ILI9341_Draw_Text("- SINE", 	10, 30, WHITE, 2, BLACK);
	*/
}

void DM_SetErrorDebugMsg(char* msg)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
	snprintf(ErrorDebugMsg, sizeof(ErrorDebugMsg), "%s", msg);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	4a04      	ldr	r2, [pc, #16]	; (80014dc <DM_SetErrorDebugMsg+0x1c>)
 80014cc:	212d      	movs	r1, #45	; 0x2d
 80014ce:	4804      	ldr	r0, [pc, #16]	; (80014e0 <DM_SetErrorDebugMsg+0x20>)
 80014d0:	f00d ff34 	bl	800f33c <sniprintf>
}
 80014d4:	bf00      	nop
 80014d6:	3708      	adds	r7, #8
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	080129d8 	.word	0x080129d8
 80014e0:	20001e94 	.word	0x20001e94

080014e4 <FreqMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawMenu(eFreqMenu_Status pMenu)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	4603      	mov	r3, r0
 80014ec:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 80014ee:	79fb      	ldrb	r3, [r7, #7]
 80014f0:	3b01      	subs	r3, #1
 80014f2:	2b03      	cmp	r3, #3
 80014f4:	d816      	bhi.n	8001524 <FreqMenu_DrawMenu+0x40>
 80014f6:	a201      	add	r2, pc, #4	; (adr r2, 80014fc <FreqMenu_DrawMenu+0x18>)
 80014f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014fc:	0800150d 	.word	0x0800150d
 8001500:	08001513 	.word	0x08001513
 8001504:	08001519 	.word	0x08001519
 8001508:	0800151f 	.word	0x0800151f
	{
		case ENABLE_FREQ_MAIN_MENU:
			FreqMenu_DrawMainMenu();
 800150c:	f000 f810 	bl	8001530 <FreqMenu_DrawMainMenu>
			break;
 8001510:	e009      	b.n	8001526 <FreqMenu_DrawMenu+0x42>
		case ENABLE_FREQ_PRESET_MENU:
			FreqMenu_DrawPresetMenu();
 8001512:	f000 f849 	bl	80015a8 <FreqMenu_DrawPresetMenu>
			break;
 8001516:	e006      	b.n	8001526 <FreqMenu_DrawMenu+0x42>
		case ENABLE_FREQ_ADJUST_MENU:
			FreqMenu_DrawAdjustMenu();
 8001518:	f001 faf4 	bl	8002b04 <FreqMenu_DrawAdjustMenu>
			break;
 800151c:	e003      	b.n	8001526 <FreqMenu_DrawMenu+0x42>
		case ENABLE_FREQ_SWEEP_MENU:
			FreqMenu_DrawSweepMenu();
 800151e:	f001 fb07 	bl	8002b30 <FreqMenu_DrawSweepMenu>
			break;
 8001522:	e000      	b.n	8001526 <FreqMenu_DrawMenu+0x42>

		default:
			break;
 8001524:	bf00      	nop

	}
}
 8001526:	bf00      	nop
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop

08001530 <FreqMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawMainMenu()
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af02      	add	r7, sp, #8
	// main
	ILI9341_Draw_Text("OUT->FREQ", 	5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8001536:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800153a:	9301      	str	r3, [sp, #4]
 800153c:	2302      	movs	r3, #2
 800153e:	9300      	str	r3, [sp, #0]
 8001540:	2300      	movs	r3, #0
 8001542:	220a      	movs	r2, #10
 8001544:	2105      	movs	r1, #5
 8001546:	4814      	ldr	r0, [pc, #80]	; (8001598 <FreqMenu_DrawMainMenu+0x68>)
 8001548:	f00c fb54 	bl	800dbf4 <ILI9341_Draw_Text>
//	ILI9341_Draw_Text("Select an option below", 	30, 165, BLACK, 2, WHITE);

	DM_DisplayFormattedOutput();
 800154c:	f7ff fcd4 	bl	8000ef8 <DM_DisplayFormattedOutput>

	// buttons
	ILI9341_Draw_Text("PRESET", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8001550:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001554:	9301      	str	r3, [sp, #4]
 8001556:	2302      	movs	r3, #2
 8001558:	9300      	str	r3, [sp, #0]
 800155a:	2300      	movs	r3, #0
 800155c:	22d2      	movs	r2, #210	; 0xd2
 800155e:	2105      	movs	r1, #5
 8001560:	480e      	ldr	r0, [pc, #56]	; (800159c <FreqMenu_DrawMainMenu+0x6c>)
 8001562:	f00c fb47 	bl	800dbf4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("ADJUST", 87,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8001566:	f241 43a2 	movw	r3, #5282	; 0x14a2
 800156a:	9301      	str	r3, [sp, #4]
 800156c:	2302      	movs	r3, #2
 800156e:	9300      	str	r3, [sp, #0]
 8001570:	2300      	movs	r3, #0
 8001572:	22d2      	movs	r2, #210	; 0xd2
 8001574:	2157      	movs	r1, #87	; 0x57
 8001576:	480a      	ldr	r0, [pc, #40]	; (80015a0 <FreqMenu_DrawMainMenu+0x70>)
 8001578:	f00c fb3c 	bl	800dbf4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SWEEP",  174, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 800157c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001580:	9301      	str	r3, [sp, #4]
 8001582:	2302      	movs	r3, #2
 8001584:	9300      	str	r3, [sp, #0]
 8001586:	2300      	movs	r3, #0
 8001588:	22d2      	movs	r2, #210	; 0xd2
 800158a:	21ae      	movs	r1, #174	; 0xae
 800158c:	4805      	ldr	r0, [pc, #20]	; (80015a4 <FreqMenu_DrawMainMenu+0x74>)
 800158e:	f00c fb31 	bl	800dbf4 <ILI9341_Draw_Text>
	//ILI9341_Draw_Text("    ", 260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
}
 8001592:	bf00      	nop
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	080129dc 	.word	0x080129dc
 800159c:	080129e8 	.word	0x080129e8
 80015a0:	080129f0 	.word	0x080129f0
 80015a4:	080129f8 	.word	0x080129f8

080015a8 <FreqMenu_DrawPresetMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawPresetMenu()
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b086      	sub	sp, #24
 80015ac:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("OUT->FREQ->PRESET", 	5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 80015ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015b2:	9301      	str	r3, [sp, #4]
 80015b4:	2302      	movs	r3, #2
 80015b6:	9300      	str	r3, [sp, #0]
 80015b8:	2300      	movs	r3, #0
 80015ba:	220a      	movs	r2, #10
 80015bc:	2105      	movs	r1, #5
 80015be:	4886      	ldr	r0, [pc, #536]	; (80017d8 <FreqMenu_DrawPresetMenu+0x230>)
 80015c0:	f00c fb18 	bl	800dbf4 <ILI9341_Draw_Text>
	uint8_t menu_pos_y1 = 40;
 80015c4:	2328      	movs	r3, #40	; 0x28
 80015c6:	73fb      	strb	r3, [r7, #15]
	uint8_t menu_pos_y2 = 60;
 80015c8:	233c      	movs	r3, #60	; 0x3c
 80015ca:	73bb      	strb	r3, [r7, #14]
	uint8_t menu_pos_y3 = 80;
 80015cc:	2350      	movs	r3, #80	; 0x50
 80015ce:	737b      	strb	r3, [r7, #13]
	uint8_t menu_pos_y4 = 100;
 80015d0:	2364      	movs	r3, #100	; 0x64
 80015d2:	733b      	strb	r3, [r7, #12]
	uint8_t menu_pos_y5 = 120;
 80015d4:	2378      	movs	r3, #120	; 0x78
 80015d6:	72fb      	strb	r3, [r7, #11]
	uint8_t menu_pos_y6 = 140;
 80015d8:	238c      	movs	r3, #140	; 0x8c
 80015da:	72bb      	strb	r3, [r7, #10]
	uint8_t menu_pos_y7 = 160;
 80015dc:	23a0      	movs	r3, #160	; 0xa0
 80015de:	727b      	strb	r3, [r7, #9]
	FreqProfile_t *pFreqPresetTmp =  FreqO_GetFPresetObject();
 80015e0:	f003 fc7a 	bl	8004ed8 <FreqO_GetFPresetObject>
 80015e4:	6078      	str	r0, [r7, #4]
	if(pFreqPresetTmp)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	f001 825d 	beq.w	8002aa8 <FreqMenu_DrawPresetMenu+0x1500>
	{
		switch(pFreqPresetTmp->hertz)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f240 22ee 	movw	r2, #750	; 0x2ee
 80015f6:	4293      	cmp	r3, r2
 80015f8:	f000 849a 	beq.w	8001f30 <FreqMenu_DrawPresetMenu+0x988>
 80015fc:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001600:	4293      	cmp	r3, r2
 8001602:	d817      	bhi.n	8001634 <FreqMenu_DrawPresetMenu+0x8c>
 8001604:	2b32      	cmp	r3, #50	; 0x32
 8001606:	f000 81b3 	beq.w	8001970 <FreqMenu_DrawPresetMenu+0x3c8>
 800160a:	2b32      	cmp	r3, #50	; 0x32
 800160c:	d806      	bhi.n	800161c <FreqMenu_DrawPresetMenu+0x74>
 800160e:	2b01      	cmp	r3, #1
 8001610:	d038      	beq.n	8001684 <FreqMenu_DrawPresetMenu+0xdc>
 8001612:	2b0a      	cmp	r3, #10
 8001614:	f000 8102 	beq.w	800181c <FreqMenu_DrawPresetMenu+0x274>
	else
	{
		ILI9341_Draw_Text("FreqMenus::FreqMenu_DrawFreqPresetMenu() Error", 		5, 180, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
	}

}
 8001618:	f001 ba52 	b.w	8002ac0 <FreqMenu_DrawPresetMenu+0x1518>
		switch(pFreqPresetTmp->hertz)
 800161c:	2bfa      	cmp	r3, #250	; 0xfa
 800161e:	f000 8317 	beq.w	8001c50 <FreqMenu_DrawPresetMenu+0x6a8>
 8001622:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001626:	f000 83d9 	beq.w	8001ddc <FreqMenu_DrawPresetMenu+0x834>
 800162a:	2b64      	cmp	r3, #100	; 0x64
 800162c:	f000 8266 	beq.w	8001afc <FreqMenu_DrawPresetMenu+0x554>
}
 8001630:	f001 ba46 	b.w	8002ac0 <FreqMenu_DrawPresetMenu+0x1518>
		switch(pFreqPresetTmp->hertz)
 8001634:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8001638:	4293      	cmp	r3, r2
 800163a:	f000 8758 	beq.w	80024ee <FreqMenu_DrawPresetMenu+0xf46>
 800163e:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8001642:	4293      	cmp	r3, r2
 8001644:	d80f      	bhi.n	8001666 <FreqMenu_DrawPresetMenu+0xbe>
 8001646:	f241 3288 	movw	r2, #5000	; 0x1388
 800164a:	4293      	cmp	r3, r2
 800164c:	f000 85e0 	beq.w	8002210 <FreqMenu_DrawPresetMenu+0xc68>
 8001650:	f242 7210 	movw	r2, #10000	; 0x2710
 8001654:	4293      	cmp	r3, r2
 8001656:	f000 86a1 	beq.w	800239c <FreqMenu_DrawPresetMenu+0xdf4>
 800165a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800165e:	f000 852d 	beq.w	80020bc <FreqMenu_DrawPresetMenu+0xb14>
}
 8001662:	f001 ba2d 	b.w	8002ac0 <FreqMenu_DrawPresetMenu+0x1518>
		switch(pFreqPresetTmp->hertz)
 8001666:	4a5d      	ldr	r2, [pc, #372]	; (80017dc <FreqMenu_DrawPresetMenu+0x234>)
 8001668:	4293      	cmp	r3, r2
 800166a:	f001 80ae 	beq.w	80027ca <FreqMenu_DrawPresetMenu+0x1222>
 800166e:	4a5c      	ldr	r2, [pc, #368]	; (80017e0 <FreqMenu_DrawPresetMenu+0x238>)
 8001670:	4293      	cmp	r3, r2
 8001672:	f001 816f 	beq.w	8002954 <FreqMenu_DrawPresetMenu+0x13ac>
 8001676:	f24c 3250 	movw	r2, #50000	; 0xc350
 800167a:	4293      	cmp	r3, r2
 800167c:	f000 87fc 	beq.w	8002678 <FreqMenu_DrawPresetMenu+0x10d0>
}
 8001680:	f001 ba1e 	b.w	8002ac0 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001684:	7bfb      	ldrb	r3, [r7, #15]
 8001686:	b29a      	uxth	r2, r3
 8001688:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 800168c:	9301      	str	r3, [sp, #4]
 800168e:	2302      	movs	r3, #2
 8001690:	9300      	str	r3, [sp, #0]
 8001692:	2300      	movs	r3, #0
 8001694:	2105      	movs	r1, #5
 8001696:	4853      	ldr	r0, [pc, #332]	; (80017e4 <FreqMenu_DrawPresetMenu+0x23c>)
 8001698:	f00c faac 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800169c:	7bbb      	ldrb	r3, [r7, #14]
 800169e:	b29a      	uxth	r2, r3
 80016a0:	2300      	movs	r3, #0
 80016a2:	9301      	str	r3, [sp, #4]
 80016a4:	2302      	movs	r3, #2
 80016a6:	9300      	str	r3, [sp, #0]
 80016a8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80016ac:	2105      	movs	r1, #5
 80016ae:	484e      	ldr	r0, [pc, #312]	; (80017e8 <FreqMenu_DrawPresetMenu+0x240>)
 80016b0:	f00c faa0 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80016b4:	7b7b      	ldrb	r3, [r7, #13]
 80016b6:	b29a      	uxth	r2, r3
 80016b8:	2300      	movs	r3, #0
 80016ba:	9301      	str	r3, [sp, #4]
 80016bc:	2302      	movs	r3, #2
 80016be:	9300      	str	r3, [sp, #0]
 80016c0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80016c4:	2105      	movs	r1, #5
 80016c6:	4849      	ldr	r0, [pc, #292]	; (80017ec <FreqMenu_DrawPresetMenu+0x244>)
 80016c8:	f00c fa94 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80016cc:	7b3b      	ldrb	r3, [r7, #12]
 80016ce:	b29a      	uxth	r2, r3
 80016d0:	2300      	movs	r3, #0
 80016d2:	9301      	str	r3, [sp, #4]
 80016d4:	2302      	movs	r3, #2
 80016d6:	9300      	str	r3, [sp, #0]
 80016d8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80016dc:	2105      	movs	r1, #5
 80016de:	4844      	ldr	r0, [pc, #272]	; (80017f0 <FreqMenu_DrawPresetMenu+0x248>)
 80016e0:	f00c fa88 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80016e4:	7afb      	ldrb	r3, [r7, #11]
 80016e6:	b29a      	uxth	r2, r3
 80016e8:	2300      	movs	r3, #0
 80016ea:	9301      	str	r3, [sp, #4]
 80016ec:	2302      	movs	r3, #2
 80016ee:	9300      	str	r3, [sp, #0]
 80016f0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80016f4:	2105      	movs	r1, #5
 80016f6:	483f      	ldr	r0, [pc, #252]	; (80017f4 <FreqMenu_DrawPresetMenu+0x24c>)
 80016f8:	f00c fa7c 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80016fc:	7abb      	ldrb	r3, [r7, #10]
 80016fe:	b29a      	uxth	r2, r3
 8001700:	2300      	movs	r3, #0
 8001702:	9301      	str	r3, [sp, #4]
 8001704:	2302      	movs	r3, #2
 8001706:	9300      	str	r3, [sp, #0]
 8001708:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800170c:	2105      	movs	r1, #5
 800170e:	483a      	ldr	r0, [pc, #232]	; (80017f8 <FreqMenu_DrawPresetMenu+0x250>)
 8001710:	f00c fa70 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001714:	7a7b      	ldrb	r3, [r7, #9]
 8001716:	b29a      	uxth	r2, r3
 8001718:	2300      	movs	r3, #0
 800171a:	9301      	str	r3, [sp, #4]
 800171c:	2302      	movs	r3, #2
 800171e:	9300      	str	r3, [sp, #0]
 8001720:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001724:	2105      	movs	r1, #5
 8001726:	4835      	ldr	r0, [pc, #212]	; (80017fc <FreqMenu_DrawPresetMenu+0x254>)
 8001728:	f00c fa64 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800172c:	7bfb      	ldrb	r3, [r7, #15]
 800172e:	b29a      	uxth	r2, r3
 8001730:	2300      	movs	r3, #0
 8001732:	9301      	str	r3, [sp, #4]
 8001734:	2302      	movs	r3, #2
 8001736:	9300      	str	r3, [sp, #0]
 8001738:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800173c:	2178      	movs	r1, #120	; 0x78
 800173e:	4830      	ldr	r0, [pc, #192]	; (8001800 <FreqMenu_DrawPresetMenu+0x258>)
 8001740:	f00c fa58 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001744:	7bbb      	ldrb	r3, [r7, #14]
 8001746:	b29a      	uxth	r2, r3
 8001748:	2300      	movs	r3, #0
 800174a:	9301      	str	r3, [sp, #4]
 800174c:	2302      	movs	r3, #2
 800174e:	9300      	str	r3, [sp, #0]
 8001750:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001754:	2178      	movs	r1, #120	; 0x78
 8001756:	482b      	ldr	r0, [pc, #172]	; (8001804 <FreqMenu_DrawPresetMenu+0x25c>)
 8001758:	f00c fa4c 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800175c:	7b7b      	ldrb	r3, [r7, #13]
 800175e:	b29a      	uxth	r2, r3
 8001760:	2300      	movs	r3, #0
 8001762:	9301      	str	r3, [sp, #4]
 8001764:	2302      	movs	r3, #2
 8001766:	9300      	str	r3, [sp, #0]
 8001768:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800176c:	2178      	movs	r1, #120	; 0x78
 800176e:	4826      	ldr	r0, [pc, #152]	; (8001808 <FreqMenu_DrawPresetMenu+0x260>)
 8001770:	f00c fa40 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001774:	7b3b      	ldrb	r3, [r7, #12]
 8001776:	b29a      	uxth	r2, r3
 8001778:	2300      	movs	r3, #0
 800177a:	9301      	str	r3, [sp, #4]
 800177c:	2302      	movs	r3, #2
 800177e:	9300      	str	r3, [sp, #0]
 8001780:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001784:	2178      	movs	r1, #120	; 0x78
 8001786:	4821      	ldr	r0, [pc, #132]	; (800180c <FreqMenu_DrawPresetMenu+0x264>)
 8001788:	f00c fa34 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800178c:	7afb      	ldrb	r3, [r7, #11]
 800178e:	b29a      	uxth	r2, r3
 8001790:	2300      	movs	r3, #0
 8001792:	9301      	str	r3, [sp, #4]
 8001794:	2302      	movs	r3, #2
 8001796:	9300      	str	r3, [sp, #0]
 8001798:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800179c:	2178      	movs	r1, #120	; 0x78
 800179e:	481c      	ldr	r0, [pc, #112]	; (8001810 <FreqMenu_DrawPresetMenu+0x268>)
 80017a0:	f00c fa28 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80017a4:	7abb      	ldrb	r3, [r7, #10]
 80017a6:	b29a      	uxth	r2, r3
 80017a8:	2300      	movs	r3, #0
 80017aa:	9301      	str	r3, [sp, #4]
 80017ac:	2302      	movs	r3, #2
 80017ae:	9300      	str	r3, [sp, #0]
 80017b0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80017b4:	2178      	movs	r1, #120	; 0x78
 80017b6:	4817      	ldr	r0, [pc, #92]	; (8001814 <FreqMenu_DrawPresetMenu+0x26c>)
 80017b8:	f00c fa1c 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80017bc:	7a7b      	ldrb	r3, [r7, #9]
 80017be:	b29a      	uxth	r2, r3
 80017c0:	2300      	movs	r3, #0
 80017c2:	9301      	str	r3, [sp, #4]
 80017c4:	2302      	movs	r3, #2
 80017c6:	9300      	str	r3, [sp, #0]
 80017c8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80017cc:	2178      	movs	r1, #120	; 0x78
 80017ce:	4812      	ldr	r0, [pc, #72]	; (8001818 <FreqMenu_DrawPresetMenu+0x270>)
 80017d0:	f00c fa10 	bl	800dbf4 <ILI9341_Draw_Text>
				break;
 80017d4:	f001 b974 	b.w	8002ac0 <FreqMenu_DrawPresetMenu+0x1518>
 80017d8:	08012a00 	.word	0x08012a00
 80017dc:	000124f8 	.word	0x000124f8
 80017e0:	000186a0 	.word	0x000186a0
 80017e4:	08012a14 	.word	0x08012a14
 80017e8:	08012a1c 	.word	0x08012a1c
 80017ec:	08012a24 	.word	0x08012a24
 80017f0:	08012a2c 	.word	0x08012a2c
 80017f4:	08012a34 	.word	0x08012a34
 80017f8:	08012a3c 	.word	0x08012a3c
 80017fc:	08012a44 	.word	0x08012a44
 8001800:	08012a4c 	.word	0x08012a4c
 8001804:	08012a54 	.word	0x08012a54
 8001808:	08012a5c 	.word	0x08012a5c
 800180c:	08012a64 	.word	0x08012a64
 8001810:	08012a6c 	.word	0x08012a6c
 8001814:	08012a74 	.word	0x08012a74
 8001818:	08012a7c 	.word	0x08012a7c
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800181c:	7bfb      	ldrb	r3, [r7, #15]
 800181e:	b29a      	uxth	r2, r3
 8001820:	2300      	movs	r3, #0
 8001822:	9301      	str	r3, [sp, #4]
 8001824:	2302      	movs	r3, #2
 8001826:	9300      	str	r3, [sp, #0]
 8001828:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800182c:	2105      	movs	r1, #5
 800182e:	48a5      	ldr	r0, [pc, #660]	; (8001ac4 <FreqMenu_DrawPresetMenu+0x51c>)
 8001830:	f00c f9e0 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001834:	7bbb      	ldrb	r3, [r7, #14]
 8001836:	b29a      	uxth	r2, r3
 8001838:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 800183c:	9301      	str	r3, [sp, #4]
 800183e:	2302      	movs	r3, #2
 8001840:	9300      	str	r3, [sp, #0]
 8001842:	2300      	movs	r3, #0
 8001844:	2105      	movs	r1, #5
 8001846:	48a0      	ldr	r0, [pc, #640]	; (8001ac8 <FreqMenu_DrawPresetMenu+0x520>)
 8001848:	f00c f9d4 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800184c:	7b7b      	ldrb	r3, [r7, #13]
 800184e:	b29a      	uxth	r2, r3
 8001850:	2300      	movs	r3, #0
 8001852:	9301      	str	r3, [sp, #4]
 8001854:	2302      	movs	r3, #2
 8001856:	9300      	str	r3, [sp, #0]
 8001858:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800185c:	2105      	movs	r1, #5
 800185e:	489b      	ldr	r0, [pc, #620]	; (8001acc <FreqMenu_DrawPresetMenu+0x524>)
 8001860:	f00c f9c8 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001864:	7b3b      	ldrb	r3, [r7, #12]
 8001866:	b29a      	uxth	r2, r3
 8001868:	2300      	movs	r3, #0
 800186a:	9301      	str	r3, [sp, #4]
 800186c:	2302      	movs	r3, #2
 800186e:	9300      	str	r3, [sp, #0]
 8001870:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001874:	2105      	movs	r1, #5
 8001876:	4896      	ldr	r0, [pc, #600]	; (8001ad0 <FreqMenu_DrawPresetMenu+0x528>)
 8001878:	f00c f9bc 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800187c:	7afb      	ldrb	r3, [r7, #11]
 800187e:	b29a      	uxth	r2, r3
 8001880:	2300      	movs	r3, #0
 8001882:	9301      	str	r3, [sp, #4]
 8001884:	2302      	movs	r3, #2
 8001886:	9300      	str	r3, [sp, #0]
 8001888:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800188c:	2105      	movs	r1, #5
 800188e:	4891      	ldr	r0, [pc, #580]	; (8001ad4 <FreqMenu_DrawPresetMenu+0x52c>)
 8001890:	f00c f9b0 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001894:	7abb      	ldrb	r3, [r7, #10]
 8001896:	b29a      	uxth	r2, r3
 8001898:	2300      	movs	r3, #0
 800189a:	9301      	str	r3, [sp, #4]
 800189c:	2302      	movs	r3, #2
 800189e:	9300      	str	r3, [sp, #0]
 80018a0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80018a4:	2105      	movs	r1, #5
 80018a6:	488c      	ldr	r0, [pc, #560]	; (8001ad8 <FreqMenu_DrawPresetMenu+0x530>)
 80018a8:	f00c f9a4 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80018ac:	7a7b      	ldrb	r3, [r7, #9]
 80018ae:	b29a      	uxth	r2, r3
 80018b0:	2300      	movs	r3, #0
 80018b2:	9301      	str	r3, [sp, #4]
 80018b4:	2302      	movs	r3, #2
 80018b6:	9300      	str	r3, [sp, #0]
 80018b8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80018bc:	2105      	movs	r1, #5
 80018be:	4887      	ldr	r0, [pc, #540]	; (8001adc <FreqMenu_DrawPresetMenu+0x534>)
 80018c0:	f00c f998 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80018c4:	7bfb      	ldrb	r3, [r7, #15]
 80018c6:	b29a      	uxth	r2, r3
 80018c8:	2300      	movs	r3, #0
 80018ca:	9301      	str	r3, [sp, #4]
 80018cc:	2302      	movs	r3, #2
 80018ce:	9300      	str	r3, [sp, #0]
 80018d0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80018d4:	2178      	movs	r1, #120	; 0x78
 80018d6:	4882      	ldr	r0, [pc, #520]	; (8001ae0 <FreqMenu_DrawPresetMenu+0x538>)
 80018d8:	f00c f98c 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80018dc:	7bbb      	ldrb	r3, [r7, #14]
 80018de:	b29a      	uxth	r2, r3
 80018e0:	2300      	movs	r3, #0
 80018e2:	9301      	str	r3, [sp, #4]
 80018e4:	2302      	movs	r3, #2
 80018e6:	9300      	str	r3, [sp, #0]
 80018e8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80018ec:	2178      	movs	r1, #120	; 0x78
 80018ee:	487d      	ldr	r0, [pc, #500]	; (8001ae4 <FreqMenu_DrawPresetMenu+0x53c>)
 80018f0:	f00c f980 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80018f4:	7b7b      	ldrb	r3, [r7, #13]
 80018f6:	b29a      	uxth	r2, r3
 80018f8:	2300      	movs	r3, #0
 80018fa:	9301      	str	r3, [sp, #4]
 80018fc:	2302      	movs	r3, #2
 80018fe:	9300      	str	r3, [sp, #0]
 8001900:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001904:	2178      	movs	r1, #120	; 0x78
 8001906:	4878      	ldr	r0, [pc, #480]	; (8001ae8 <FreqMenu_DrawPresetMenu+0x540>)
 8001908:	f00c f974 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800190c:	7b3b      	ldrb	r3, [r7, #12]
 800190e:	b29a      	uxth	r2, r3
 8001910:	2300      	movs	r3, #0
 8001912:	9301      	str	r3, [sp, #4]
 8001914:	2302      	movs	r3, #2
 8001916:	9300      	str	r3, [sp, #0]
 8001918:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800191c:	2178      	movs	r1, #120	; 0x78
 800191e:	4873      	ldr	r0, [pc, #460]	; (8001aec <FreqMenu_DrawPresetMenu+0x544>)
 8001920:	f00c f968 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001924:	7afb      	ldrb	r3, [r7, #11]
 8001926:	b29a      	uxth	r2, r3
 8001928:	2300      	movs	r3, #0
 800192a:	9301      	str	r3, [sp, #4]
 800192c:	2302      	movs	r3, #2
 800192e:	9300      	str	r3, [sp, #0]
 8001930:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001934:	2178      	movs	r1, #120	; 0x78
 8001936:	486e      	ldr	r0, [pc, #440]	; (8001af0 <FreqMenu_DrawPresetMenu+0x548>)
 8001938:	f00c f95c 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800193c:	7abb      	ldrb	r3, [r7, #10]
 800193e:	b29a      	uxth	r2, r3
 8001940:	2300      	movs	r3, #0
 8001942:	9301      	str	r3, [sp, #4]
 8001944:	2302      	movs	r3, #2
 8001946:	9300      	str	r3, [sp, #0]
 8001948:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800194c:	2178      	movs	r1, #120	; 0x78
 800194e:	4869      	ldr	r0, [pc, #420]	; (8001af4 <FreqMenu_DrawPresetMenu+0x54c>)
 8001950:	f00c f950 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001954:	7a7b      	ldrb	r3, [r7, #9]
 8001956:	b29a      	uxth	r2, r3
 8001958:	2300      	movs	r3, #0
 800195a:	9301      	str	r3, [sp, #4]
 800195c:	2302      	movs	r3, #2
 800195e:	9300      	str	r3, [sp, #0]
 8001960:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001964:	2178      	movs	r1, #120	; 0x78
 8001966:	4864      	ldr	r0, [pc, #400]	; (8001af8 <FreqMenu_DrawPresetMenu+0x550>)
 8001968:	f00c f944 	bl	800dbf4 <ILI9341_Draw_Text>
				break;
 800196c:	f001 b8a8 	b.w	8002ac0 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001970:	7bfb      	ldrb	r3, [r7, #15]
 8001972:	b29a      	uxth	r2, r3
 8001974:	2300      	movs	r3, #0
 8001976:	9301      	str	r3, [sp, #4]
 8001978:	2302      	movs	r3, #2
 800197a:	9300      	str	r3, [sp, #0]
 800197c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001980:	2105      	movs	r1, #5
 8001982:	4850      	ldr	r0, [pc, #320]	; (8001ac4 <FreqMenu_DrawPresetMenu+0x51c>)
 8001984:	f00c f936 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001988:	7bbb      	ldrb	r3, [r7, #14]
 800198a:	b29a      	uxth	r2, r3
 800198c:	2300      	movs	r3, #0
 800198e:	9301      	str	r3, [sp, #4]
 8001990:	2302      	movs	r3, #2
 8001992:	9300      	str	r3, [sp, #0]
 8001994:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001998:	2105      	movs	r1, #5
 800199a:	484b      	ldr	r0, [pc, #300]	; (8001ac8 <FreqMenu_DrawPresetMenu+0x520>)
 800199c:	f00c f92a 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80019a0:	7b7b      	ldrb	r3, [r7, #13]
 80019a2:	b29a      	uxth	r2, r3
 80019a4:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80019a8:	9301      	str	r3, [sp, #4]
 80019aa:	2302      	movs	r3, #2
 80019ac:	9300      	str	r3, [sp, #0]
 80019ae:	2300      	movs	r3, #0
 80019b0:	2105      	movs	r1, #5
 80019b2:	4846      	ldr	r0, [pc, #280]	; (8001acc <FreqMenu_DrawPresetMenu+0x524>)
 80019b4:	f00c f91e 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80019b8:	7b3b      	ldrb	r3, [r7, #12]
 80019ba:	b29a      	uxth	r2, r3
 80019bc:	2300      	movs	r3, #0
 80019be:	9301      	str	r3, [sp, #4]
 80019c0:	2302      	movs	r3, #2
 80019c2:	9300      	str	r3, [sp, #0]
 80019c4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80019c8:	2105      	movs	r1, #5
 80019ca:	4841      	ldr	r0, [pc, #260]	; (8001ad0 <FreqMenu_DrawPresetMenu+0x528>)
 80019cc:	f00c f912 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80019d0:	7afb      	ldrb	r3, [r7, #11]
 80019d2:	b29a      	uxth	r2, r3
 80019d4:	2300      	movs	r3, #0
 80019d6:	9301      	str	r3, [sp, #4]
 80019d8:	2302      	movs	r3, #2
 80019da:	9300      	str	r3, [sp, #0]
 80019dc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80019e0:	2105      	movs	r1, #5
 80019e2:	483c      	ldr	r0, [pc, #240]	; (8001ad4 <FreqMenu_DrawPresetMenu+0x52c>)
 80019e4:	f00c f906 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80019e8:	7abb      	ldrb	r3, [r7, #10]
 80019ea:	b29a      	uxth	r2, r3
 80019ec:	2300      	movs	r3, #0
 80019ee:	9301      	str	r3, [sp, #4]
 80019f0:	2302      	movs	r3, #2
 80019f2:	9300      	str	r3, [sp, #0]
 80019f4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80019f8:	2105      	movs	r1, #5
 80019fa:	4837      	ldr	r0, [pc, #220]	; (8001ad8 <FreqMenu_DrawPresetMenu+0x530>)
 80019fc:	f00c f8fa 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a00:	7a7b      	ldrb	r3, [r7, #9]
 8001a02:	b29a      	uxth	r2, r3
 8001a04:	2300      	movs	r3, #0
 8001a06:	9301      	str	r3, [sp, #4]
 8001a08:	2302      	movs	r3, #2
 8001a0a:	9300      	str	r3, [sp, #0]
 8001a0c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a10:	2105      	movs	r1, #5
 8001a12:	4832      	ldr	r0, [pc, #200]	; (8001adc <FreqMenu_DrawPresetMenu+0x534>)
 8001a14:	f00c f8ee 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a18:	7bfb      	ldrb	r3, [r7, #15]
 8001a1a:	b29a      	uxth	r2, r3
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	9301      	str	r3, [sp, #4]
 8001a20:	2302      	movs	r3, #2
 8001a22:	9300      	str	r3, [sp, #0]
 8001a24:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a28:	2178      	movs	r1, #120	; 0x78
 8001a2a:	482d      	ldr	r0, [pc, #180]	; (8001ae0 <FreqMenu_DrawPresetMenu+0x538>)
 8001a2c:	f00c f8e2 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a30:	7bbb      	ldrb	r3, [r7, #14]
 8001a32:	b29a      	uxth	r2, r3
 8001a34:	2300      	movs	r3, #0
 8001a36:	9301      	str	r3, [sp, #4]
 8001a38:	2302      	movs	r3, #2
 8001a3a:	9300      	str	r3, [sp, #0]
 8001a3c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a40:	2178      	movs	r1, #120	; 0x78
 8001a42:	4828      	ldr	r0, [pc, #160]	; (8001ae4 <FreqMenu_DrawPresetMenu+0x53c>)
 8001a44:	f00c f8d6 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a48:	7b7b      	ldrb	r3, [r7, #13]
 8001a4a:	b29a      	uxth	r2, r3
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	9301      	str	r3, [sp, #4]
 8001a50:	2302      	movs	r3, #2
 8001a52:	9300      	str	r3, [sp, #0]
 8001a54:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a58:	2178      	movs	r1, #120	; 0x78
 8001a5a:	4823      	ldr	r0, [pc, #140]	; (8001ae8 <FreqMenu_DrawPresetMenu+0x540>)
 8001a5c:	f00c f8ca 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a60:	7b3b      	ldrb	r3, [r7, #12]
 8001a62:	b29a      	uxth	r2, r3
 8001a64:	2300      	movs	r3, #0
 8001a66:	9301      	str	r3, [sp, #4]
 8001a68:	2302      	movs	r3, #2
 8001a6a:	9300      	str	r3, [sp, #0]
 8001a6c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a70:	2178      	movs	r1, #120	; 0x78
 8001a72:	481e      	ldr	r0, [pc, #120]	; (8001aec <FreqMenu_DrawPresetMenu+0x544>)
 8001a74:	f00c f8be 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a78:	7afb      	ldrb	r3, [r7, #11]
 8001a7a:	b29a      	uxth	r2, r3
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	9301      	str	r3, [sp, #4]
 8001a80:	2302      	movs	r3, #2
 8001a82:	9300      	str	r3, [sp, #0]
 8001a84:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a88:	2178      	movs	r1, #120	; 0x78
 8001a8a:	4819      	ldr	r0, [pc, #100]	; (8001af0 <FreqMenu_DrawPresetMenu+0x548>)
 8001a8c:	f00c f8b2 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a90:	7abb      	ldrb	r3, [r7, #10]
 8001a92:	b29a      	uxth	r2, r3
 8001a94:	2300      	movs	r3, #0
 8001a96:	9301      	str	r3, [sp, #4]
 8001a98:	2302      	movs	r3, #2
 8001a9a:	9300      	str	r3, [sp, #0]
 8001a9c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001aa0:	2178      	movs	r1, #120	; 0x78
 8001aa2:	4814      	ldr	r0, [pc, #80]	; (8001af4 <FreqMenu_DrawPresetMenu+0x54c>)
 8001aa4:	f00c f8a6 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001aa8:	7a7b      	ldrb	r3, [r7, #9]
 8001aaa:	b29a      	uxth	r2, r3
 8001aac:	2300      	movs	r3, #0
 8001aae:	9301      	str	r3, [sp, #4]
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	9300      	str	r3, [sp, #0]
 8001ab4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ab8:	2178      	movs	r1, #120	; 0x78
 8001aba:	480f      	ldr	r0, [pc, #60]	; (8001af8 <FreqMenu_DrawPresetMenu+0x550>)
 8001abc:	f00c f89a 	bl	800dbf4 <ILI9341_Draw_Text>
				break;
 8001ac0:	f000 bffe 	b.w	8002ac0 <FreqMenu_DrawPresetMenu+0x1518>
 8001ac4:	08012a14 	.word	0x08012a14
 8001ac8:	08012a1c 	.word	0x08012a1c
 8001acc:	08012a24 	.word	0x08012a24
 8001ad0:	08012a2c 	.word	0x08012a2c
 8001ad4:	08012a34 	.word	0x08012a34
 8001ad8:	08012a3c 	.word	0x08012a3c
 8001adc:	08012a44 	.word	0x08012a44
 8001ae0:	08012a4c 	.word	0x08012a4c
 8001ae4:	08012a54 	.word	0x08012a54
 8001ae8:	08012a5c 	.word	0x08012a5c
 8001aec:	08012a64 	.word	0x08012a64
 8001af0:	08012a6c 	.word	0x08012a6c
 8001af4:	08012a74 	.word	0x08012a74
 8001af8:	08012a7c 	.word	0x08012a7c
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001afc:	7bfb      	ldrb	r3, [r7, #15]
 8001afe:	b29a      	uxth	r2, r3
 8001b00:	2300      	movs	r3, #0
 8001b02:	9301      	str	r3, [sp, #4]
 8001b04:	2302      	movs	r3, #2
 8001b06:	9300      	str	r3, [sp, #0]
 8001b08:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b0c:	2105      	movs	r1, #5
 8001b0e:	48a5      	ldr	r0, [pc, #660]	; (8001da4 <FreqMenu_DrawPresetMenu+0x7fc>)
 8001b10:	f00c f870 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b14:	7bbb      	ldrb	r3, [r7, #14]
 8001b16:	b29a      	uxth	r2, r3
 8001b18:	2300      	movs	r3, #0
 8001b1a:	9301      	str	r3, [sp, #4]
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	9300      	str	r3, [sp, #0]
 8001b20:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b24:	2105      	movs	r1, #5
 8001b26:	48a0      	ldr	r0, [pc, #640]	; (8001da8 <FreqMenu_DrawPresetMenu+0x800>)
 8001b28:	f00c f864 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b2c:	7b7b      	ldrb	r3, [r7, #13]
 8001b2e:	b29a      	uxth	r2, r3
 8001b30:	2300      	movs	r3, #0
 8001b32:	9301      	str	r3, [sp, #4]
 8001b34:	2302      	movs	r3, #2
 8001b36:	9300      	str	r3, [sp, #0]
 8001b38:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b3c:	2105      	movs	r1, #5
 8001b3e:	489b      	ldr	r0, [pc, #620]	; (8001dac <FreqMenu_DrawPresetMenu+0x804>)
 8001b40:	f00c f858 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001b44:	7b3b      	ldrb	r3, [r7, #12]
 8001b46:	b29a      	uxth	r2, r3
 8001b48:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001b4c:	9301      	str	r3, [sp, #4]
 8001b4e:	2302      	movs	r3, #2
 8001b50:	9300      	str	r3, [sp, #0]
 8001b52:	2300      	movs	r3, #0
 8001b54:	2105      	movs	r1, #5
 8001b56:	4896      	ldr	r0, [pc, #600]	; (8001db0 <FreqMenu_DrawPresetMenu+0x808>)
 8001b58:	f00c f84c 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b5c:	7afb      	ldrb	r3, [r7, #11]
 8001b5e:	b29a      	uxth	r2, r3
 8001b60:	2300      	movs	r3, #0
 8001b62:	9301      	str	r3, [sp, #4]
 8001b64:	2302      	movs	r3, #2
 8001b66:	9300      	str	r3, [sp, #0]
 8001b68:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b6c:	2105      	movs	r1, #5
 8001b6e:	4891      	ldr	r0, [pc, #580]	; (8001db4 <FreqMenu_DrawPresetMenu+0x80c>)
 8001b70:	f00c f840 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b74:	7abb      	ldrb	r3, [r7, #10]
 8001b76:	b29a      	uxth	r2, r3
 8001b78:	2300      	movs	r3, #0
 8001b7a:	9301      	str	r3, [sp, #4]
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	9300      	str	r3, [sp, #0]
 8001b80:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b84:	2105      	movs	r1, #5
 8001b86:	488c      	ldr	r0, [pc, #560]	; (8001db8 <FreqMenu_DrawPresetMenu+0x810>)
 8001b88:	f00c f834 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b8c:	7a7b      	ldrb	r3, [r7, #9]
 8001b8e:	b29a      	uxth	r2, r3
 8001b90:	2300      	movs	r3, #0
 8001b92:	9301      	str	r3, [sp, #4]
 8001b94:	2302      	movs	r3, #2
 8001b96:	9300      	str	r3, [sp, #0]
 8001b98:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b9c:	2105      	movs	r1, #5
 8001b9e:	4887      	ldr	r0, [pc, #540]	; (8001dbc <FreqMenu_DrawPresetMenu+0x814>)
 8001ba0:	f00c f828 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ba4:	7bfb      	ldrb	r3, [r7, #15]
 8001ba6:	b29a      	uxth	r2, r3
 8001ba8:	2300      	movs	r3, #0
 8001baa:	9301      	str	r3, [sp, #4]
 8001bac:	2302      	movs	r3, #2
 8001bae:	9300      	str	r3, [sp, #0]
 8001bb0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001bb4:	2178      	movs	r1, #120	; 0x78
 8001bb6:	4882      	ldr	r0, [pc, #520]	; (8001dc0 <FreqMenu_DrawPresetMenu+0x818>)
 8001bb8:	f00c f81c 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001bbc:	7bbb      	ldrb	r3, [r7, #14]
 8001bbe:	b29a      	uxth	r2, r3
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	9301      	str	r3, [sp, #4]
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	9300      	str	r3, [sp, #0]
 8001bc8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001bcc:	2178      	movs	r1, #120	; 0x78
 8001bce:	487d      	ldr	r0, [pc, #500]	; (8001dc4 <FreqMenu_DrawPresetMenu+0x81c>)
 8001bd0:	f00c f810 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001bd4:	7b7b      	ldrb	r3, [r7, #13]
 8001bd6:	b29a      	uxth	r2, r3
 8001bd8:	2300      	movs	r3, #0
 8001bda:	9301      	str	r3, [sp, #4]
 8001bdc:	2302      	movs	r3, #2
 8001bde:	9300      	str	r3, [sp, #0]
 8001be0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001be4:	2178      	movs	r1, #120	; 0x78
 8001be6:	4878      	ldr	r0, [pc, #480]	; (8001dc8 <FreqMenu_DrawPresetMenu+0x820>)
 8001be8:	f00c f804 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001bec:	7b3b      	ldrb	r3, [r7, #12]
 8001bee:	b29a      	uxth	r2, r3
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	9301      	str	r3, [sp, #4]
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	9300      	str	r3, [sp, #0]
 8001bf8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001bfc:	2178      	movs	r1, #120	; 0x78
 8001bfe:	4873      	ldr	r0, [pc, #460]	; (8001dcc <FreqMenu_DrawPresetMenu+0x824>)
 8001c00:	f00b fff8 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c04:	7afb      	ldrb	r3, [r7, #11]
 8001c06:	b29a      	uxth	r2, r3
 8001c08:	2300      	movs	r3, #0
 8001c0a:	9301      	str	r3, [sp, #4]
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	9300      	str	r3, [sp, #0]
 8001c10:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c14:	2178      	movs	r1, #120	; 0x78
 8001c16:	486e      	ldr	r0, [pc, #440]	; (8001dd0 <FreqMenu_DrawPresetMenu+0x828>)
 8001c18:	f00b ffec 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c1c:	7abb      	ldrb	r3, [r7, #10]
 8001c1e:	b29a      	uxth	r2, r3
 8001c20:	2300      	movs	r3, #0
 8001c22:	9301      	str	r3, [sp, #4]
 8001c24:	2302      	movs	r3, #2
 8001c26:	9300      	str	r3, [sp, #0]
 8001c28:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c2c:	2178      	movs	r1, #120	; 0x78
 8001c2e:	4869      	ldr	r0, [pc, #420]	; (8001dd4 <FreqMenu_DrawPresetMenu+0x82c>)
 8001c30:	f00b ffe0 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c34:	7a7b      	ldrb	r3, [r7, #9]
 8001c36:	b29a      	uxth	r2, r3
 8001c38:	2300      	movs	r3, #0
 8001c3a:	9301      	str	r3, [sp, #4]
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	9300      	str	r3, [sp, #0]
 8001c40:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c44:	2178      	movs	r1, #120	; 0x78
 8001c46:	4864      	ldr	r0, [pc, #400]	; (8001dd8 <FreqMenu_DrawPresetMenu+0x830>)
 8001c48:	f00b ffd4 	bl	800dbf4 <ILI9341_Draw_Text>
				break;
 8001c4c:	f000 bf38 	b.w	8002ac0 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c50:	7bfb      	ldrb	r3, [r7, #15]
 8001c52:	b29a      	uxth	r2, r3
 8001c54:	2300      	movs	r3, #0
 8001c56:	9301      	str	r3, [sp, #4]
 8001c58:	2302      	movs	r3, #2
 8001c5a:	9300      	str	r3, [sp, #0]
 8001c5c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c60:	2105      	movs	r1, #5
 8001c62:	4850      	ldr	r0, [pc, #320]	; (8001da4 <FreqMenu_DrawPresetMenu+0x7fc>)
 8001c64:	f00b ffc6 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c68:	7bbb      	ldrb	r3, [r7, #14]
 8001c6a:	b29a      	uxth	r2, r3
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	9301      	str	r3, [sp, #4]
 8001c70:	2302      	movs	r3, #2
 8001c72:	9300      	str	r3, [sp, #0]
 8001c74:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c78:	2105      	movs	r1, #5
 8001c7a:	484b      	ldr	r0, [pc, #300]	; (8001da8 <FreqMenu_DrawPresetMenu+0x800>)
 8001c7c:	f00b ffba 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c80:	7b7b      	ldrb	r3, [r7, #13]
 8001c82:	b29a      	uxth	r2, r3
 8001c84:	2300      	movs	r3, #0
 8001c86:	9301      	str	r3, [sp, #4]
 8001c88:	2302      	movs	r3, #2
 8001c8a:	9300      	str	r3, [sp, #0]
 8001c8c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c90:	2105      	movs	r1, #5
 8001c92:	4846      	ldr	r0, [pc, #280]	; (8001dac <FreqMenu_DrawPresetMenu+0x804>)
 8001c94:	f00b ffae 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c98:	7b3b      	ldrb	r3, [r7, #12]
 8001c9a:	b29a      	uxth	r2, r3
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	9301      	str	r3, [sp, #4]
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	9300      	str	r3, [sp, #0]
 8001ca4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ca8:	2105      	movs	r1, #5
 8001caa:	4841      	ldr	r0, [pc, #260]	; (8001db0 <FreqMenu_DrawPresetMenu+0x808>)
 8001cac:	f00b ffa2 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001cb0:	7afb      	ldrb	r3, [r7, #11]
 8001cb2:	b29a      	uxth	r2, r3
 8001cb4:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001cb8:	9301      	str	r3, [sp, #4]
 8001cba:	2302      	movs	r3, #2
 8001cbc:	9300      	str	r3, [sp, #0]
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	2105      	movs	r1, #5
 8001cc2:	483c      	ldr	r0, [pc, #240]	; (8001db4 <FreqMenu_DrawPresetMenu+0x80c>)
 8001cc4:	f00b ff96 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001cc8:	7abb      	ldrb	r3, [r7, #10]
 8001cca:	b29a      	uxth	r2, r3
 8001ccc:	2300      	movs	r3, #0
 8001cce:	9301      	str	r3, [sp, #4]
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	9300      	str	r3, [sp, #0]
 8001cd4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001cd8:	2105      	movs	r1, #5
 8001cda:	4837      	ldr	r0, [pc, #220]	; (8001db8 <FreqMenu_DrawPresetMenu+0x810>)
 8001cdc:	f00b ff8a 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ce0:	7a7b      	ldrb	r3, [r7, #9]
 8001ce2:	b29a      	uxth	r2, r3
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	9301      	str	r3, [sp, #4]
 8001ce8:	2302      	movs	r3, #2
 8001cea:	9300      	str	r3, [sp, #0]
 8001cec:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001cf0:	2105      	movs	r1, #5
 8001cf2:	4832      	ldr	r0, [pc, #200]	; (8001dbc <FreqMenu_DrawPresetMenu+0x814>)
 8001cf4:	f00b ff7e 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001cf8:	7bfb      	ldrb	r3, [r7, #15]
 8001cfa:	b29a      	uxth	r2, r3
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	9301      	str	r3, [sp, #4]
 8001d00:	2302      	movs	r3, #2
 8001d02:	9300      	str	r3, [sp, #0]
 8001d04:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d08:	2178      	movs	r1, #120	; 0x78
 8001d0a:	482d      	ldr	r0, [pc, #180]	; (8001dc0 <FreqMenu_DrawPresetMenu+0x818>)
 8001d0c:	f00b ff72 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d10:	7bbb      	ldrb	r3, [r7, #14]
 8001d12:	b29a      	uxth	r2, r3
 8001d14:	2300      	movs	r3, #0
 8001d16:	9301      	str	r3, [sp, #4]
 8001d18:	2302      	movs	r3, #2
 8001d1a:	9300      	str	r3, [sp, #0]
 8001d1c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d20:	2178      	movs	r1, #120	; 0x78
 8001d22:	4828      	ldr	r0, [pc, #160]	; (8001dc4 <FreqMenu_DrawPresetMenu+0x81c>)
 8001d24:	f00b ff66 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d28:	7b7b      	ldrb	r3, [r7, #13]
 8001d2a:	b29a      	uxth	r2, r3
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	9301      	str	r3, [sp, #4]
 8001d30:	2302      	movs	r3, #2
 8001d32:	9300      	str	r3, [sp, #0]
 8001d34:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d38:	2178      	movs	r1, #120	; 0x78
 8001d3a:	4823      	ldr	r0, [pc, #140]	; (8001dc8 <FreqMenu_DrawPresetMenu+0x820>)
 8001d3c:	f00b ff5a 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d40:	7b3b      	ldrb	r3, [r7, #12]
 8001d42:	b29a      	uxth	r2, r3
 8001d44:	2300      	movs	r3, #0
 8001d46:	9301      	str	r3, [sp, #4]
 8001d48:	2302      	movs	r3, #2
 8001d4a:	9300      	str	r3, [sp, #0]
 8001d4c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d50:	2178      	movs	r1, #120	; 0x78
 8001d52:	481e      	ldr	r0, [pc, #120]	; (8001dcc <FreqMenu_DrawPresetMenu+0x824>)
 8001d54:	f00b ff4e 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d58:	7afb      	ldrb	r3, [r7, #11]
 8001d5a:	b29a      	uxth	r2, r3
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	9301      	str	r3, [sp, #4]
 8001d60:	2302      	movs	r3, #2
 8001d62:	9300      	str	r3, [sp, #0]
 8001d64:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d68:	2178      	movs	r1, #120	; 0x78
 8001d6a:	4819      	ldr	r0, [pc, #100]	; (8001dd0 <FreqMenu_DrawPresetMenu+0x828>)
 8001d6c:	f00b ff42 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d70:	7abb      	ldrb	r3, [r7, #10]
 8001d72:	b29a      	uxth	r2, r3
 8001d74:	2300      	movs	r3, #0
 8001d76:	9301      	str	r3, [sp, #4]
 8001d78:	2302      	movs	r3, #2
 8001d7a:	9300      	str	r3, [sp, #0]
 8001d7c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d80:	2178      	movs	r1, #120	; 0x78
 8001d82:	4814      	ldr	r0, [pc, #80]	; (8001dd4 <FreqMenu_DrawPresetMenu+0x82c>)
 8001d84:	f00b ff36 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d88:	7a7b      	ldrb	r3, [r7, #9]
 8001d8a:	b29a      	uxth	r2, r3
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	9301      	str	r3, [sp, #4]
 8001d90:	2302      	movs	r3, #2
 8001d92:	9300      	str	r3, [sp, #0]
 8001d94:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d98:	2178      	movs	r1, #120	; 0x78
 8001d9a:	480f      	ldr	r0, [pc, #60]	; (8001dd8 <FreqMenu_DrawPresetMenu+0x830>)
 8001d9c:	f00b ff2a 	bl	800dbf4 <ILI9341_Draw_Text>
				break;
 8001da0:	f000 be8e 	b.w	8002ac0 <FreqMenu_DrawPresetMenu+0x1518>
 8001da4:	08012a14 	.word	0x08012a14
 8001da8:	08012a1c 	.word	0x08012a1c
 8001dac:	08012a24 	.word	0x08012a24
 8001db0:	08012a2c 	.word	0x08012a2c
 8001db4:	08012a34 	.word	0x08012a34
 8001db8:	08012a3c 	.word	0x08012a3c
 8001dbc:	08012a44 	.word	0x08012a44
 8001dc0:	08012a4c 	.word	0x08012a4c
 8001dc4:	08012a54 	.word	0x08012a54
 8001dc8:	08012a5c 	.word	0x08012a5c
 8001dcc:	08012a64 	.word	0x08012a64
 8001dd0:	08012a6c 	.word	0x08012a6c
 8001dd4:	08012a74 	.word	0x08012a74
 8001dd8:	08012a7c 	.word	0x08012a7c
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ddc:	7bfb      	ldrb	r3, [r7, #15]
 8001dde:	b29a      	uxth	r2, r3
 8001de0:	2300      	movs	r3, #0
 8001de2:	9301      	str	r3, [sp, #4]
 8001de4:	2302      	movs	r3, #2
 8001de6:	9300      	str	r3, [sp, #0]
 8001de8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001dec:	2105      	movs	r1, #5
 8001dee:	48a5      	ldr	r0, [pc, #660]	; (8002084 <FreqMenu_DrawPresetMenu+0xadc>)
 8001df0:	f00b ff00 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001df4:	7bbb      	ldrb	r3, [r7, #14]
 8001df6:	b29a      	uxth	r2, r3
 8001df8:	2300      	movs	r3, #0
 8001dfa:	9301      	str	r3, [sp, #4]
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	9300      	str	r3, [sp, #0]
 8001e00:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e04:	2105      	movs	r1, #5
 8001e06:	48a0      	ldr	r0, [pc, #640]	; (8002088 <FreqMenu_DrawPresetMenu+0xae0>)
 8001e08:	f00b fef4 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e0c:	7b7b      	ldrb	r3, [r7, #13]
 8001e0e:	b29a      	uxth	r2, r3
 8001e10:	2300      	movs	r3, #0
 8001e12:	9301      	str	r3, [sp, #4]
 8001e14:	2302      	movs	r3, #2
 8001e16:	9300      	str	r3, [sp, #0]
 8001e18:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e1c:	2105      	movs	r1, #5
 8001e1e:	489b      	ldr	r0, [pc, #620]	; (800208c <FreqMenu_DrawPresetMenu+0xae4>)
 8001e20:	f00b fee8 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e24:	7b3b      	ldrb	r3, [r7, #12]
 8001e26:	b29a      	uxth	r2, r3
 8001e28:	2300      	movs	r3, #0
 8001e2a:	9301      	str	r3, [sp, #4]
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	9300      	str	r3, [sp, #0]
 8001e30:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e34:	2105      	movs	r1, #5
 8001e36:	4896      	ldr	r0, [pc, #600]	; (8002090 <FreqMenu_DrawPresetMenu+0xae8>)
 8001e38:	f00b fedc 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e3c:	7afb      	ldrb	r3, [r7, #11]
 8001e3e:	b29a      	uxth	r2, r3
 8001e40:	2300      	movs	r3, #0
 8001e42:	9301      	str	r3, [sp, #4]
 8001e44:	2302      	movs	r3, #2
 8001e46:	9300      	str	r3, [sp, #0]
 8001e48:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e4c:	2105      	movs	r1, #5
 8001e4e:	4891      	ldr	r0, [pc, #580]	; (8002094 <FreqMenu_DrawPresetMenu+0xaec>)
 8001e50:	f00b fed0 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001e54:	7abb      	ldrb	r3, [r7, #10]
 8001e56:	b29a      	uxth	r2, r3
 8001e58:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001e5c:	9301      	str	r3, [sp, #4]
 8001e5e:	2302      	movs	r3, #2
 8001e60:	9300      	str	r3, [sp, #0]
 8001e62:	2300      	movs	r3, #0
 8001e64:	2105      	movs	r1, #5
 8001e66:	488c      	ldr	r0, [pc, #560]	; (8002098 <FreqMenu_DrawPresetMenu+0xaf0>)
 8001e68:	f00b fec4 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e6c:	7a7b      	ldrb	r3, [r7, #9]
 8001e6e:	b29a      	uxth	r2, r3
 8001e70:	2300      	movs	r3, #0
 8001e72:	9301      	str	r3, [sp, #4]
 8001e74:	2302      	movs	r3, #2
 8001e76:	9300      	str	r3, [sp, #0]
 8001e78:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e7c:	2105      	movs	r1, #5
 8001e7e:	4887      	ldr	r0, [pc, #540]	; (800209c <FreqMenu_DrawPresetMenu+0xaf4>)
 8001e80:	f00b feb8 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e84:	7bfb      	ldrb	r3, [r7, #15]
 8001e86:	b29a      	uxth	r2, r3
 8001e88:	2300      	movs	r3, #0
 8001e8a:	9301      	str	r3, [sp, #4]
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	9300      	str	r3, [sp, #0]
 8001e90:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e94:	2178      	movs	r1, #120	; 0x78
 8001e96:	4882      	ldr	r0, [pc, #520]	; (80020a0 <FreqMenu_DrawPresetMenu+0xaf8>)
 8001e98:	f00b feac 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e9c:	7bbb      	ldrb	r3, [r7, #14]
 8001e9e:	b29a      	uxth	r2, r3
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	9301      	str	r3, [sp, #4]
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	9300      	str	r3, [sp, #0]
 8001ea8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001eac:	2178      	movs	r1, #120	; 0x78
 8001eae:	487d      	ldr	r0, [pc, #500]	; (80020a4 <FreqMenu_DrawPresetMenu+0xafc>)
 8001eb0:	f00b fea0 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001eb4:	7b7b      	ldrb	r3, [r7, #13]
 8001eb6:	b29a      	uxth	r2, r3
 8001eb8:	2300      	movs	r3, #0
 8001eba:	9301      	str	r3, [sp, #4]
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	9300      	str	r3, [sp, #0]
 8001ec0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ec4:	2178      	movs	r1, #120	; 0x78
 8001ec6:	4878      	ldr	r0, [pc, #480]	; (80020a8 <FreqMenu_DrawPresetMenu+0xb00>)
 8001ec8:	f00b fe94 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ecc:	7b3b      	ldrb	r3, [r7, #12]
 8001ece:	b29a      	uxth	r2, r3
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	9301      	str	r3, [sp, #4]
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	9300      	str	r3, [sp, #0]
 8001ed8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001edc:	2178      	movs	r1, #120	; 0x78
 8001ede:	4873      	ldr	r0, [pc, #460]	; (80020ac <FreqMenu_DrawPresetMenu+0xb04>)
 8001ee0:	f00b fe88 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ee4:	7afb      	ldrb	r3, [r7, #11]
 8001ee6:	b29a      	uxth	r2, r3
 8001ee8:	2300      	movs	r3, #0
 8001eea:	9301      	str	r3, [sp, #4]
 8001eec:	2302      	movs	r3, #2
 8001eee:	9300      	str	r3, [sp, #0]
 8001ef0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ef4:	2178      	movs	r1, #120	; 0x78
 8001ef6:	486e      	ldr	r0, [pc, #440]	; (80020b0 <FreqMenu_DrawPresetMenu+0xb08>)
 8001ef8:	f00b fe7c 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001efc:	7abb      	ldrb	r3, [r7, #10]
 8001efe:	b29a      	uxth	r2, r3
 8001f00:	2300      	movs	r3, #0
 8001f02:	9301      	str	r3, [sp, #4]
 8001f04:	2302      	movs	r3, #2
 8001f06:	9300      	str	r3, [sp, #0]
 8001f08:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f0c:	2178      	movs	r1, #120	; 0x78
 8001f0e:	4869      	ldr	r0, [pc, #420]	; (80020b4 <FreqMenu_DrawPresetMenu+0xb0c>)
 8001f10:	f00b fe70 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f14:	7a7b      	ldrb	r3, [r7, #9]
 8001f16:	b29a      	uxth	r2, r3
 8001f18:	2300      	movs	r3, #0
 8001f1a:	9301      	str	r3, [sp, #4]
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	9300      	str	r3, [sp, #0]
 8001f20:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f24:	2178      	movs	r1, #120	; 0x78
 8001f26:	4864      	ldr	r0, [pc, #400]	; (80020b8 <FreqMenu_DrawPresetMenu+0xb10>)
 8001f28:	f00b fe64 	bl	800dbf4 <ILI9341_Draw_Text>
				break;
 8001f2c:	f000 bdc8 	b.w	8002ac0 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f30:	7bfb      	ldrb	r3, [r7, #15]
 8001f32:	b29a      	uxth	r2, r3
 8001f34:	2300      	movs	r3, #0
 8001f36:	9301      	str	r3, [sp, #4]
 8001f38:	2302      	movs	r3, #2
 8001f3a:	9300      	str	r3, [sp, #0]
 8001f3c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f40:	2105      	movs	r1, #5
 8001f42:	4850      	ldr	r0, [pc, #320]	; (8002084 <FreqMenu_DrawPresetMenu+0xadc>)
 8001f44:	f00b fe56 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f48:	7bbb      	ldrb	r3, [r7, #14]
 8001f4a:	b29a      	uxth	r2, r3
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	9301      	str	r3, [sp, #4]
 8001f50:	2302      	movs	r3, #2
 8001f52:	9300      	str	r3, [sp, #0]
 8001f54:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f58:	2105      	movs	r1, #5
 8001f5a:	484b      	ldr	r0, [pc, #300]	; (8002088 <FreqMenu_DrawPresetMenu+0xae0>)
 8001f5c:	f00b fe4a 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f60:	7b7b      	ldrb	r3, [r7, #13]
 8001f62:	b29a      	uxth	r2, r3
 8001f64:	2300      	movs	r3, #0
 8001f66:	9301      	str	r3, [sp, #4]
 8001f68:	2302      	movs	r3, #2
 8001f6a:	9300      	str	r3, [sp, #0]
 8001f6c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f70:	2105      	movs	r1, #5
 8001f72:	4846      	ldr	r0, [pc, #280]	; (800208c <FreqMenu_DrawPresetMenu+0xae4>)
 8001f74:	f00b fe3e 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f78:	7b3b      	ldrb	r3, [r7, #12]
 8001f7a:	b29a      	uxth	r2, r3
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	9301      	str	r3, [sp, #4]
 8001f80:	2302      	movs	r3, #2
 8001f82:	9300      	str	r3, [sp, #0]
 8001f84:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f88:	2105      	movs	r1, #5
 8001f8a:	4841      	ldr	r0, [pc, #260]	; (8002090 <FreqMenu_DrawPresetMenu+0xae8>)
 8001f8c:	f00b fe32 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f90:	7afb      	ldrb	r3, [r7, #11]
 8001f92:	b29a      	uxth	r2, r3
 8001f94:	2300      	movs	r3, #0
 8001f96:	9301      	str	r3, [sp, #4]
 8001f98:	2302      	movs	r3, #2
 8001f9a:	9300      	str	r3, [sp, #0]
 8001f9c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001fa0:	2105      	movs	r1, #5
 8001fa2:	483c      	ldr	r0, [pc, #240]	; (8002094 <FreqMenu_DrawPresetMenu+0xaec>)
 8001fa4:	f00b fe26 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001fa8:	7abb      	ldrb	r3, [r7, #10]
 8001faa:	b29a      	uxth	r2, r3
 8001fac:	2300      	movs	r3, #0
 8001fae:	9301      	str	r3, [sp, #4]
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	9300      	str	r3, [sp, #0]
 8001fb4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001fb8:	2105      	movs	r1, #5
 8001fba:	4837      	ldr	r0, [pc, #220]	; (8002098 <FreqMenu_DrawPresetMenu+0xaf0>)
 8001fbc:	f00b fe1a 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001fc0:	7a7b      	ldrb	r3, [r7, #9]
 8001fc2:	b29a      	uxth	r2, r3
 8001fc4:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001fc8:	9301      	str	r3, [sp, #4]
 8001fca:	2302      	movs	r3, #2
 8001fcc:	9300      	str	r3, [sp, #0]
 8001fce:	2300      	movs	r3, #0
 8001fd0:	2105      	movs	r1, #5
 8001fd2:	4832      	ldr	r0, [pc, #200]	; (800209c <FreqMenu_DrawPresetMenu+0xaf4>)
 8001fd4:	f00b fe0e 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001fd8:	7bfb      	ldrb	r3, [r7, #15]
 8001fda:	b29a      	uxth	r2, r3
 8001fdc:	2300      	movs	r3, #0
 8001fde:	9301      	str	r3, [sp, #4]
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	9300      	str	r3, [sp, #0]
 8001fe4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001fe8:	2178      	movs	r1, #120	; 0x78
 8001fea:	482d      	ldr	r0, [pc, #180]	; (80020a0 <FreqMenu_DrawPresetMenu+0xaf8>)
 8001fec:	f00b fe02 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ff0:	7bbb      	ldrb	r3, [r7, #14]
 8001ff2:	b29a      	uxth	r2, r3
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	9301      	str	r3, [sp, #4]
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	9300      	str	r3, [sp, #0]
 8001ffc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002000:	2178      	movs	r1, #120	; 0x78
 8002002:	4828      	ldr	r0, [pc, #160]	; (80020a4 <FreqMenu_DrawPresetMenu+0xafc>)
 8002004:	f00b fdf6 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002008:	7b7b      	ldrb	r3, [r7, #13]
 800200a:	b29a      	uxth	r2, r3
 800200c:	2300      	movs	r3, #0
 800200e:	9301      	str	r3, [sp, #4]
 8002010:	2302      	movs	r3, #2
 8002012:	9300      	str	r3, [sp, #0]
 8002014:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002018:	2178      	movs	r1, #120	; 0x78
 800201a:	4823      	ldr	r0, [pc, #140]	; (80020a8 <FreqMenu_DrawPresetMenu+0xb00>)
 800201c:	f00b fdea 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002020:	7b3b      	ldrb	r3, [r7, #12]
 8002022:	b29a      	uxth	r2, r3
 8002024:	2300      	movs	r3, #0
 8002026:	9301      	str	r3, [sp, #4]
 8002028:	2302      	movs	r3, #2
 800202a:	9300      	str	r3, [sp, #0]
 800202c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002030:	2178      	movs	r1, #120	; 0x78
 8002032:	481e      	ldr	r0, [pc, #120]	; (80020ac <FreqMenu_DrawPresetMenu+0xb04>)
 8002034:	f00b fdde 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002038:	7afb      	ldrb	r3, [r7, #11]
 800203a:	b29a      	uxth	r2, r3
 800203c:	2300      	movs	r3, #0
 800203e:	9301      	str	r3, [sp, #4]
 8002040:	2302      	movs	r3, #2
 8002042:	9300      	str	r3, [sp, #0]
 8002044:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002048:	2178      	movs	r1, #120	; 0x78
 800204a:	4819      	ldr	r0, [pc, #100]	; (80020b0 <FreqMenu_DrawPresetMenu+0xb08>)
 800204c:	f00b fdd2 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002050:	7abb      	ldrb	r3, [r7, #10]
 8002052:	b29a      	uxth	r2, r3
 8002054:	2300      	movs	r3, #0
 8002056:	9301      	str	r3, [sp, #4]
 8002058:	2302      	movs	r3, #2
 800205a:	9300      	str	r3, [sp, #0]
 800205c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002060:	2178      	movs	r1, #120	; 0x78
 8002062:	4814      	ldr	r0, [pc, #80]	; (80020b4 <FreqMenu_DrawPresetMenu+0xb0c>)
 8002064:	f00b fdc6 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002068:	7a7b      	ldrb	r3, [r7, #9]
 800206a:	b29a      	uxth	r2, r3
 800206c:	2300      	movs	r3, #0
 800206e:	9301      	str	r3, [sp, #4]
 8002070:	2302      	movs	r3, #2
 8002072:	9300      	str	r3, [sp, #0]
 8002074:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002078:	2178      	movs	r1, #120	; 0x78
 800207a:	480f      	ldr	r0, [pc, #60]	; (80020b8 <FreqMenu_DrawPresetMenu+0xb10>)
 800207c:	f00b fdba 	bl	800dbf4 <ILI9341_Draw_Text>
				break;
 8002080:	f000 bd1e 	b.w	8002ac0 <FreqMenu_DrawPresetMenu+0x1518>
 8002084:	08012a14 	.word	0x08012a14
 8002088:	08012a1c 	.word	0x08012a1c
 800208c:	08012a24 	.word	0x08012a24
 8002090:	08012a2c 	.word	0x08012a2c
 8002094:	08012a34 	.word	0x08012a34
 8002098:	08012a3c 	.word	0x08012a3c
 800209c:	08012a44 	.word	0x08012a44
 80020a0:	08012a4c 	.word	0x08012a4c
 80020a4:	08012a54 	.word	0x08012a54
 80020a8:	08012a5c 	.word	0x08012a5c
 80020ac:	08012a64 	.word	0x08012a64
 80020b0:	08012a6c 	.word	0x08012a6c
 80020b4:	08012a74 	.word	0x08012a74
 80020b8:	08012a7c 	.word	0x08012a7c
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80020bc:	7bfb      	ldrb	r3, [r7, #15]
 80020be:	b29a      	uxth	r2, r3
 80020c0:	2300      	movs	r3, #0
 80020c2:	9301      	str	r3, [sp, #4]
 80020c4:	2302      	movs	r3, #2
 80020c6:	9300      	str	r3, [sp, #0]
 80020c8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80020cc:	2105      	movs	r1, #5
 80020ce:	48a5      	ldr	r0, [pc, #660]	; (8002364 <FreqMenu_DrawPresetMenu+0xdbc>)
 80020d0:	f00b fd90 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80020d4:	7bbb      	ldrb	r3, [r7, #14]
 80020d6:	b29a      	uxth	r2, r3
 80020d8:	2300      	movs	r3, #0
 80020da:	9301      	str	r3, [sp, #4]
 80020dc:	2302      	movs	r3, #2
 80020de:	9300      	str	r3, [sp, #0]
 80020e0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80020e4:	2105      	movs	r1, #5
 80020e6:	48a0      	ldr	r0, [pc, #640]	; (8002368 <FreqMenu_DrawPresetMenu+0xdc0>)
 80020e8:	f00b fd84 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80020ec:	7b7b      	ldrb	r3, [r7, #13]
 80020ee:	b29a      	uxth	r2, r3
 80020f0:	2300      	movs	r3, #0
 80020f2:	9301      	str	r3, [sp, #4]
 80020f4:	2302      	movs	r3, #2
 80020f6:	9300      	str	r3, [sp, #0]
 80020f8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80020fc:	2105      	movs	r1, #5
 80020fe:	489b      	ldr	r0, [pc, #620]	; (800236c <FreqMenu_DrawPresetMenu+0xdc4>)
 8002100:	f00b fd78 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002104:	7b3b      	ldrb	r3, [r7, #12]
 8002106:	b29a      	uxth	r2, r3
 8002108:	2300      	movs	r3, #0
 800210a:	9301      	str	r3, [sp, #4]
 800210c:	2302      	movs	r3, #2
 800210e:	9300      	str	r3, [sp, #0]
 8002110:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002114:	2105      	movs	r1, #5
 8002116:	4896      	ldr	r0, [pc, #600]	; (8002370 <FreqMenu_DrawPresetMenu+0xdc8>)
 8002118:	f00b fd6c 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800211c:	7afb      	ldrb	r3, [r7, #11]
 800211e:	b29a      	uxth	r2, r3
 8002120:	2300      	movs	r3, #0
 8002122:	9301      	str	r3, [sp, #4]
 8002124:	2302      	movs	r3, #2
 8002126:	9300      	str	r3, [sp, #0]
 8002128:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800212c:	2105      	movs	r1, #5
 800212e:	4891      	ldr	r0, [pc, #580]	; (8002374 <FreqMenu_DrawPresetMenu+0xdcc>)
 8002130:	f00b fd60 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002134:	7abb      	ldrb	r3, [r7, #10]
 8002136:	b29a      	uxth	r2, r3
 8002138:	2300      	movs	r3, #0
 800213a:	9301      	str	r3, [sp, #4]
 800213c:	2302      	movs	r3, #2
 800213e:	9300      	str	r3, [sp, #0]
 8002140:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002144:	2105      	movs	r1, #5
 8002146:	488c      	ldr	r0, [pc, #560]	; (8002378 <FreqMenu_DrawPresetMenu+0xdd0>)
 8002148:	f00b fd54 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800214c:	7a7b      	ldrb	r3, [r7, #9]
 800214e:	b29a      	uxth	r2, r3
 8002150:	2300      	movs	r3, #0
 8002152:	9301      	str	r3, [sp, #4]
 8002154:	2302      	movs	r3, #2
 8002156:	9300      	str	r3, [sp, #0]
 8002158:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800215c:	2105      	movs	r1, #5
 800215e:	4887      	ldr	r0, [pc, #540]	; (800237c <FreqMenu_DrawPresetMenu+0xdd4>)
 8002160:	f00b fd48 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002164:	7bfb      	ldrb	r3, [r7, #15]
 8002166:	b29a      	uxth	r2, r3
 8002168:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 800216c:	9301      	str	r3, [sp, #4]
 800216e:	2302      	movs	r3, #2
 8002170:	9300      	str	r3, [sp, #0]
 8002172:	2300      	movs	r3, #0
 8002174:	2178      	movs	r1, #120	; 0x78
 8002176:	4882      	ldr	r0, [pc, #520]	; (8002380 <FreqMenu_DrawPresetMenu+0xdd8>)
 8002178:	f00b fd3c 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800217c:	7bbb      	ldrb	r3, [r7, #14]
 800217e:	b29a      	uxth	r2, r3
 8002180:	2300      	movs	r3, #0
 8002182:	9301      	str	r3, [sp, #4]
 8002184:	2302      	movs	r3, #2
 8002186:	9300      	str	r3, [sp, #0]
 8002188:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800218c:	2178      	movs	r1, #120	; 0x78
 800218e:	487d      	ldr	r0, [pc, #500]	; (8002384 <FreqMenu_DrawPresetMenu+0xddc>)
 8002190:	f00b fd30 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002194:	7b7b      	ldrb	r3, [r7, #13]
 8002196:	b29a      	uxth	r2, r3
 8002198:	2300      	movs	r3, #0
 800219a:	9301      	str	r3, [sp, #4]
 800219c:	2302      	movs	r3, #2
 800219e:	9300      	str	r3, [sp, #0]
 80021a0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80021a4:	2178      	movs	r1, #120	; 0x78
 80021a6:	4878      	ldr	r0, [pc, #480]	; (8002388 <FreqMenu_DrawPresetMenu+0xde0>)
 80021a8:	f00b fd24 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80021ac:	7b3b      	ldrb	r3, [r7, #12]
 80021ae:	b29a      	uxth	r2, r3
 80021b0:	2300      	movs	r3, #0
 80021b2:	9301      	str	r3, [sp, #4]
 80021b4:	2302      	movs	r3, #2
 80021b6:	9300      	str	r3, [sp, #0]
 80021b8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80021bc:	2178      	movs	r1, #120	; 0x78
 80021be:	4873      	ldr	r0, [pc, #460]	; (800238c <FreqMenu_DrawPresetMenu+0xde4>)
 80021c0:	f00b fd18 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80021c4:	7afb      	ldrb	r3, [r7, #11]
 80021c6:	b29a      	uxth	r2, r3
 80021c8:	2300      	movs	r3, #0
 80021ca:	9301      	str	r3, [sp, #4]
 80021cc:	2302      	movs	r3, #2
 80021ce:	9300      	str	r3, [sp, #0]
 80021d0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80021d4:	2178      	movs	r1, #120	; 0x78
 80021d6:	486e      	ldr	r0, [pc, #440]	; (8002390 <FreqMenu_DrawPresetMenu+0xde8>)
 80021d8:	f00b fd0c 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80021dc:	7abb      	ldrb	r3, [r7, #10]
 80021de:	b29a      	uxth	r2, r3
 80021e0:	2300      	movs	r3, #0
 80021e2:	9301      	str	r3, [sp, #4]
 80021e4:	2302      	movs	r3, #2
 80021e6:	9300      	str	r3, [sp, #0]
 80021e8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80021ec:	2178      	movs	r1, #120	; 0x78
 80021ee:	4869      	ldr	r0, [pc, #420]	; (8002394 <FreqMenu_DrawPresetMenu+0xdec>)
 80021f0:	f00b fd00 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80021f4:	7a7b      	ldrb	r3, [r7, #9]
 80021f6:	b29a      	uxth	r2, r3
 80021f8:	2300      	movs	r3, #0
 80021fa:	9301      	str	r3, [sp, #4]
 80021fc:	2302      	movs	r3, #2
 80021fe:	9300      	str	r3, [sp, #0]
 8002200:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002204:	2178      	movs	r1, #120	; 0x78
 8002206:	4864      	ldr	r0, [pc, #400]	; (8002398 <FreqMenu_DrawPresetMenu+0xdf0>)
 8002208:	f00b fcf4 	bl	800dbf4 <ILI9341_Draw_Text>
				break;
 800220c:	f000 bc58 	b.w	8002ac0 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002210:	7bfb      	ldrb	r3, [r7, #15]
 8002212:	b29a      	uxth	r2, r3
 8002214:	2300      	movs	r3, #0
 8002216:	9301      	str	r3, [sp, #4]
 8002218:	2302      	movs	r3, #2
 800221a:	9300      	str	r3, [sp, #0]
 800221c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002220:	2105      	movs	r1, #5
 8002222:	4850      	ldr	r0, [pc, #320]	; (8002364 <FreqMenu_DrawPresetMenu+0xdbc>)
 8002224:	f00b fce6 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002228:	7bbb      	ldrb	r3, [r7, #14]
 800222a:	b29a      	uxth	r2, r3
 800222c:	2300      	movs	r3, #0
 800222e:	9301      	str	r3, [sp, #4]
 8002230:	2302      	movs	r3, #2
 8002232:	9300      	str	r3, [sp, #0]
 8002234:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002238:	2105      	movs	r1, #5
 800223a:	484b      	ldr	r0, [pc, #300]	; (8002368 <FreqMenu_DrawPresetMenu+0xdc0>)
 800223c:	f00b fcda 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002240:	7b7b      	ldrb	r3, [r7, #13]
 8002242:	b29a      	uxth	r2, r3
 8002244:	2300      	movs	r3, #0
 8002246:	9301      	str	r3, [sp, #4]
 8002248:	2302      	movs	r3, #2
 800224a:	9300      	str	r3, [sp, #0]
 800224c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002250:	2105      	movs	r1, #5
 8002252:	4846      	ldr	r0, [pc, #280]	; (800236c <FreqMenu_DrawPresetMenu+0xdc4>)
 8002254:	f00b fcce 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002258:	7b3b      	ldrb	r3, [r7, #12]
 800225a:	b29a      	uxth	r2, r3
 800225c:	2300      	movs	r3, #0
 800225e:	9301      	str	r3, [sp, #4]
 8002260:	2302      	movs	r3, #2
 8002262:	9300      	str	r3, [sp, #0]
 8002264:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002268:	2105      	movs	r1, #5
 800226a:	4841      	ldr	r0, [pc, #260]	; (8002370 <FreqMenu_DrawPresetMenu+0xdc8>)
 800226c:	f00b fcc2 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002270:	7afb      	ldrb	r3, [r7, #11]
 8002272:	b29a      	uxth	r2, r3
 8002274:	2300      	movs	r3, #0
 8002276:	9301      	str	r3, [sp, #4]
 8002278:	2302      	movs	r3, #2
 800227a:	9300      	str	r3, [sp, #0]
 800227c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002280:	2105      	movs	r1, #5
 8002282:	483c      	ldr	r0, [pc, #240]	; (8002374 <FreqMenu_DrawPresetMenu+0xdcc>)
 8002284:	f00b fcb6 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002288:	7abb      	ldrb	r3, [r7, #10]
 800228a:	b29a      	uxth	r2, r3
 800228c:	2300      	movs	r3, #0
 800228e:	9301      	str	r3, [sp, #4]
 8002290:	2302      	movs	r3, #2
 8002292:	9300      	str	r3, [sp, #0]
 8002294:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002298:	2105      	movs	r1, #5
 800229a:	4837      	ldr	r0, [pc, #220]	; (8002378 <FreqMenu_DrawPresetMenu+0xdd0>)
 800229c:	f00b fcaa 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80022a0:	7a7b      	ldrb	r3, [r7, #9]
 80022a2:	b29a      	uxth	r2, r3
 80022a4:	2300      	movs	r3, #0
 80022a6:	9301      	str	r3, [sp, #4]
 80022a8:	2302      	movs	r3, #2
 80022aa:	9300      	str	r3, [sp, #0]
 80022ac:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022b0:	2105      	movs	r1, #5
 80022b2:	4832      	ldr	r0, [pc, #200]	; (800237c <FreqMenu_DrawPresetMenu+0xdd4>)
 80022b4:	f00b fc9e 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80022b8:	7bfb      	ldrb	r3, [r7, #15]
 80022ba:	b29a      	uxth	r2, r3
 80022bc:	2300      	movs	r3, #0
 80022be:	9301      	str	r3, [sp, #4]
 80022c0:	2302      	movs	r3, #2
 80022c2:	9300      	str	r3, [sp, #0]
 80022c4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022c8:	2178      	movs	r1, #120	; 0x78
 80022ca:	482d      	ldr	r0, [pc, #180]	; (8002380 <FreqMenu_DrawPresetMenu+0xdd8>)
 80022cc:	f00b fc92 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80022d0:	7bbb      	ldrb	r3, [r7, #14]
 80022d2:	b29a      	uxth	r2, r3
 80022d4:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80022d8:	9301      	str	r3, [sp, #4]
 80022da:	2302      	movs	r3, #2
 80022dc:	9300      	str	r3, [sp, #0]
 80022de:	2300      	movs	r3, #0
 80022e0:	2178      	movs	r1, #120	; 0x78
 80022e2:	4828      	ldr	r0, [pc, #160]	; (8002384 <FreqMenu_DrawPresetMenu+0xddc>)
 80022e4:	f00b fc86 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80022e8:	7b7b      	ldrb	r3, [r7, #13]
 80022ea:	b29a      	uxth	r2, r3
 80022ec:	2300      	movs	r3, #0
 80022ee:	9301      	str	r3, [sp, #4]
 80022f0:	2302      	movs	r3, #2
 80022f2:	9300      	str	r3, [sp, #0]
 80022f4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022f8:	2178      	movs	r1, #120	; 0x78
 80022fa:	4823      	ldr	r0, [pc, #140]	; (8002388 <FreqMenu_DrawPresetMenu+0xde0>)
 80022fc:	f00b fc7a 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002300:	7b3b      	ldrb	r3, [r7, #12]
 8002302:	b29a      	uxth	r2, r3
 8002304:	2300      	movs	r3, #0
 8002306:	9301      	str	r3, [sp, #4]
 8002308:	2302      	movs	r3, #2
 800230a:	9300      	str	r3, [sp, #0]
 800230c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002310:	2178      	movs	r1, #120	; 0x78
 8002312:	481e      	ldr	r0, [pc, #120]	; (800238c <FreqMenu_DrawPresetMenu+0xde4>)
 8002314:	f00b fc6e 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002318:	7afb      	ldrb	r3, [r7, #11]
 800231a:	b29a      	uxth	r2, r3
 800231c:	2300      	movs	r3, #0
 800231e:	9301      	str	r3, [sp, #4]
 8002320:	2302      	movs	r3, #2
 8002322:	9300      	str	r3, [sp, #0]
 8002324:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002328:	2178      	movs	r1, #120	; 0x78
 800232a:	4819      	ldr	r0, [pc, #100]	; (8002390 <FreqMenu_DrawPresetMenu+0xde8>)
 800232c:	f00b fc62 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002330:	7abb      	ldrb	r3, [r7, #10]
 8002332:	b29a      	uxth	r2, r3
 8002334:	2300      	movs	r3, #0
 8002336:	9301      	str	r3, [sp, #4]
 8002338:	2302      	movs	r3, #2
 800233a:	9300      	str	r3, [sp, #0]
 800233c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002340:	2178      	movs	r1, #120	; 0x78
 8002342:	4814      	ldr	r0, [pc, #80]	; (8002394 <FreqMenu_DrawPresetMenu+0xdec>)
 8002344:	f00b fc56 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002348:	7a7b      	ldrb	r3, [r7, #9]
 800234a:	b29a      	uxth	r2, r3
 800234c:	2300      	movs	r3, #0
 800234e:	9301      	str	r3, [sp, #4]
 8002350:	2302      	movs	r3, #2
 8002352:	9300      	str	r3, [sp, #0]
 8002354:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002358:	2178      	movs	r1, #120	; 0x78
 800235a:	480f      	ldr	r0, [pc, #60]	; (8002398 <FreqMenu_DrawPresetMenu+0xdf0>)
 800235c:	f00b fc4a 	bl	800dbf4 <ILI9341_Draw_Text>
				break;
 8002360:	e3ae      	b.n	8002ac0 <FreqMenu_DrawPresetMenu+0x1518>
 8002362:	bf00      	nop
 8002364:	08012a14 	.word	0x08012a14
 8002368:	08012a1c 	.word	0x08012a1c
 800236c:	08012a24 	.word	0x08012a24
 8002370:	08012a2c 	.word	0x08012a2c
 8002374:	08012a34 	.word	0x08012a34
 8002378:	08012a3c 	.word	0x08012a3c
 800237c:	08012a44 	.word	0x08012a44
 8002380:	08012a4c 	.word	0x08012a4c
 8002384:	08012a54 	.word	0x08012a54
 8002388:	08012a5c 	.word	0x08012a5c
 800238c:	08012a64 	.word	0x08012a64
 8002390:	08012a6c 	.word	0x08012a6c
 8002394:	08012a74 	.word	0x08012a74
 8002398:	08012a7c 	.word	0x08012a7c
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800239c:	7bfb      	ldrb	r3, [r7, #15]
 800239e:	b29a      	uxth	r2, r3
 80023a0:	2300      	movs	r3, #0
 80023a2:	9301      	str	r3, [sp, #4]
 80023a4:	2302      	movs	r3, #2
 80023a6:	9300      	str	r3, [sp, #0]
 80023a8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80023ac:	2105      	movs	r1, #5
 80023ae:	48a4      	ldr	r0, [pc, #656]	; (8002640 <FreqMenu_DrawPresetMenu+0x1098>)
 80023b0:	f00b fc20 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80023b4:	7bbb      	ldrb	r3, [r7, #14]
 80023b6:	b29a      	uxth	r2, r3
 80023b8:	2300      	movs	r3, #0
 80023ba:	9301      	str	r3, [sp, #4]
 80023bc:	2302      	movs	r3, #2
 80023be:	9300      	str	r3, [sp, #0]
 80023c0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80023c4:	2105      	movs	r1, #5
 80023c6:	489f      	ldr	r0, [pc, #636]	; (8002644 <FreqMenu_DrawPresetMenu+0x109c>)
 80023c8:	f00b fc14 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80023cc:	7b7b      	ldrb	r3, [r7, #13]
 80023ce:	b29a      	uxth	r2, r3
 80023d0:	2300      	movs	r3, #0
 80023d2:	9301      	str	r3, [sp, #4]
 80023d4:	2302      	movs	r3, #2
 80023d6:	9300      	str	r3, [sp, #0]
 80023d8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80023dc:	2105      	movs	r1, #5
 80023de:	489a      	ldr	r0, [pc, #616]	; (8002648 <FreqMenu_DrawPresetMenu+0x10a0>)
 80023e0:	f00b fc08 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80023e4:	7b3b      	ldrb	r3, [r7, #12]
 80023e6:	b29a      	uxth	r2, r3
 80023e8:	2300      	movs	r3, #0
 80023ea:	9301      	str	r3, [sp, #4]
 80023ec:	2302      	movs	r3, #2
 80023ee:	9300      	str	r3, [sp, #0]
 80023f0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80023f4:	2105      	movs	r1, #5
 80023f6:	4895      	ldr	r0, [pc, #596]	; (800264c <FreqMenu_DrawPresetMenu+0x10a4>)
 80023f8:	f00b fbfc 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80023fc:	7afb      	ldrb	r3, [r7, #11]
 80023fe:	b29a      	uxth	r2, r3
 8002400:	2300      	movs	r3, #0
 8002402:	9301      	str	r3, [sp, #4]
 8002404:	2302      	movs	r3, #2
 8002406:	9300      	str	r3, [sp, #0]
 8002408:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800240c:	2105      	movs	r1, #5
 800240e:	4890      	ldr	r0, [pc, #576]	; (8002650 <FreqMenu_DrawPresetMenu+0x10a8>)
 8002410:	f00b fbf0 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002414:	7abb      	ldrb	r3, [r7, #10]
 8002416:	b29a      	uxth	r2, r3
 8002418:	2300      	movs	r3, #0
 800241a:	9301      	str	r3, [sp, #4]
 800241c:	2302      	movs	r3, #2
 800241e:	9300      	str	r3, [sp, #0]
 8002420:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002424:	2105      	movs	r1, #5
 8002426:	488b      	ldr	r0, [pc, #556]	; (8002654 <FreqMenu_DrawPresetMenu+0x10ac>)
 8002428:	f00b fbe4 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800242c:	7a7b      	ldrb	r3, [r7, #9]
 800242e:	b29a      	uxth	r2, r3
 8002430:	2300      	movs	r3, #0
 8002432:	9301      	str	r3, [sp, #4]
 8002434:	2302      	movs	r3, #2
 8002436:	9300      	str	r3, [sp, #0]
 8002438:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800243c:	2105      	movs	r1, #5
 800243e:	4886      	ldr	r0, [pc, #536]	; (8002658 <FreqMenu_DrawPresetMenu+0x10b0>)
 8002440:	f00b fbd8 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002444:	7bfb      	ldrb	r3, [r7, #15]
 8002446:	b29a      	uxth	r2, r3
 8002448:	2300      	movs	r3, #0
 800244a:	9301      	str	r3, [sp, #4]
 800244c:	2302      	movs	r3, #2
 800244e:	9300      	str	r3, [sp, #0]
 8002450:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002454:	2178      	movs	r1, #120	; 0x78
 8002456:	4881      	ldr	r0, [pc, #516]	; (800265c <FreqMenu_DrawPresetMenu+0x10b4>)
 8002458:	f00b fbcc 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800245c:	7bbb      	ldrb	r3, [r7, #14]
 800245e:	b29a      	uxth	r2, r3
 8002460:	2300      	movs	r3, #0
 8002462:	9301      	str	r3, [sp, #4]
 8002464:	2302      	movs	r3, #2
 8002466:	9300      	str	r3, [sp, #0]
 8002468:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800246c:	2178      	movs	r1, #120	; 0x78
 800246e:	487c      	ldr	r0, [pc, #496]	; (8002660 <FreqMenu_DrawPresetMenu+0x10b8>)
 8002470:	f00b fbc0 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002474:	7b7b      	ldrb	r3, [r7, #13]
 8002476:	b29a      	uxth	r2, r3
 8002478:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 800247c:	9301      	str	r3, [sp, #4]
 800247e:	2302      	movs	r3, #2
 8002480:	9300      	str	r3, [sp, #0]
 8002482:	2300      	movs	r3, #0
 8002484:	2178      	movs	r1, #120	; 0x78
 8002486:	4877      	ldr	r0, [pc, #476]	; (8002664 <FreqMenu_DrawPresetMenu+0x10bc>)
 8002488:	f00b fbb4 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800248c:	7b3b      	ldrb	r3, [r7, #12]
 800248e:	b29a      	uxth	r2, r3
 8002490:	2300      	movs	r3, #0
 8002492:	9301      	str	r3, [sp, #4]
 8002494:	2302      	movs	r3, #2
 8002496:	9300      	str	r3, [sp, #0]
 8002498:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800249c:	2178      	movs	r1, #120	; 0x78
 800249e:	4872      	ldr	r0, [pc, #456]	; (8002668 <FreqMenu_DrawPresetMenu+0x10c0>)
 80024a0:	f00b fba8 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80024a4:	7afb      	ldrb	r3, [r7, #11]
 80024a6:	b29a      	uxth	r2, r3
 80024a8:	2300      	movs	r3, #0
 80024aa:	9301      	str	r3, [sp, #4]
 80024ac:	2302      	movs	r3, #2
 80024ae:	9300      	str	r3, [sp, #0]
 80024b0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80024b4:	2178      	movs	r1, #120	; 0x78
 80024b6:	486d      	ldr	r0, [pc, #436]	; (800266c <FreqMenu_DrawPresetMenu+0x10c4>)
 80024b8:	f00b fb9c 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80024bc:	7abb      	ldrb	r3, [r7, #10]
 80024be:	b29a      	uxth	r2, r3
 80024c0:	2300      	movs	r3, #0
 80024c2:	9301      	str	r3, [sp, #4]
 80024c4:	2302      	movs	r3, #2
 80024c6:	9300      	str	r3, [sp, #0]
 80024c8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80024cc:	2178      	movs	r1, #120	; 0x78
 80024ce:	4868      	ldr	r0, [pc, #416]	; (8002670 <FreqMenu_DrawPresetMenu+0x10c8>)
 80024d0:	f00b fb90 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80024d4:	7a7b      	ldrb	r3, [r7, #9]
 80024d6:	b29a      	uxth	r2, r3
 80024d8:	2300      	movs	r3, #0
 80024da:	9301      	str	r3, [sp, #4]
 80024dc:	2302      	movs	r3, #2
 80024de:	9300      	str	r3, [sp, #0]
 80024e0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80024e4:	2178      	movs	r1, #120	; 0x78
 80024e6:	4863      	ldr	r0, [pc, #396]	; (8002674 <FreqMenu_DrawPresetMenu+0x10cc>)
 80024e8:	f00b fb84 	bl	800dbf4 <ILI9341_Draw_Text>
				break;
 80024ec:	e2e8      	b.n	8002ac0 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80024ee:	7bfb      	ldrb	r3, [r7, #15]
 80024f0:	b29a      	uxth	r2, r3
 80024f2:	2300      	movs	r3, #0
 80024f4:	9301      	str	r3, [sp, #4]
 80024f6:	2302      	movs	r3, #2
 80024f8:	9300      	str	r3, [sp, #0]
 80024fa:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80024fe:	2105      	movs	r1, #5
 8002500:	484f      	ldr	r0, [pc, #316]	; (8002640 <FreqMenu_DrawPresetMenu+0x1098>)
 8002502:	f00b fb77 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002506:	7bbb      	ldrb	r3, [r7, #14]
 8002508:	b29a      	uxth	r2, r3
 800250a:	2300      	movs	r3, #0
 800250c:	9301      	str	r3, [sp, #4]
 800250e:	2302      	movs	r3, #2
 8002510:	9300      	str	r3, [sp, #0]
 8002512:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002516:	2105      	movs	r1, #5
 8002518:	484a      	ldr	r0, [pc, #296]	; (8002644 <FreqMenu_DrawPresetMenu+0x109c>)
 800251a:	f00b fb6b 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800251e:	7b7b      	ldrb	r3, [r7, #13]
 8002520:	b29a      	uxth	r2, r3
 8002522:	2300      	movs	r3, #0
 8002524:	9301      	str	r3, [sp, #4]
 8002526:	2302      	movs	r3, #2
 8002528:	9300      	str	r3, [sp, #0]
 800252a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800252e:	2105      	movs	r1, #5
 8002530:	4845      	ldr	r0, [pc, #276]	; (8002648 <FreqMenu_DrawPresetMenu+0x10a0>)
 8002532:	f00b fb5f 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002536:	7b3b      	ldrb	r3, [r7, #12]
 8002538:	b29a      	uxth	r2, r3
 800253a:	2300      	movs	r3, #0
 800253c:	9301      	str	r3, [sp, #4]
 800253e:	2302      	movs	r3, #2
 8002540:	9300      	str	r3, [sp, #0]
 8002542:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002546:	2105      	movs	r1, #5
 8002548:	4840      	ldr	r0, [pc, #256]	; (800264c <FreqMenu_DrawPresetMenu+0x10a4>)
 800254a:	f00b fb53 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800254e:	7afb      	ldrb	r3, [r7, #11]
 8002550:	b29a      	uxth	r2, r3
 8002552:	2300      	movs	r3, #0
 8002554:	9301      	str	r3, [sp, #4]
 8002556:	2302      	movs	r3, #2
 8002558:	9300      	str	r3, [sp, #0]
 800255a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800255e:	2105      	movs	r1, #5
 8002560:	483b      	ldr	r0, [pc, #236]	; (8002650 <FreqMenu_DrawPresetMenu+0x10a8>)
 8002562:	f00b fb47 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002566:	7abb      	ldrb	r3, [r7, #10]
 8002568:	b29a      	uxth	r2, r3
 800256a:	2300      	movs	r3, #0
 800256c:	9301      	str	r3, [sp, #4]
 800256e:	2302      	movs	r3, #2
 8002570:	9300      	str	r3, [sp, #0]
 8002572:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002576:	2105      	movs	r1, #5
 8002578:	4836      	ldr	r0, [pc, #216]	; (8002654 <FreqMenu_DrawPresetMenu+0x10ac>)
 800257a:	f00b fb3b 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800257e:	7a7b      	ldrb	r3, [r7, #9]
 8002580:	b29a      	uxth	r2, r3
 8002582:	2300      	movs	r3, #0
 8002584:	9301      	str	r3, [sp, #4]
 8002586:	2302      	movs	r3, #2
 8002588:	9300      	str	r3, [sp, #0]
 800258a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800258e:	2105      	movs	r1, #5
 8002590:	4831      	ldr	r0, [pc, #196]	; (8002658 <FreqMenu_DrawPresetMenu+0x10b0>)
 8002592:	f00b fb2f 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002596:	7bfb      	ldrb	r3, [r7, #15]
 8002598:	b29a      	uxth	r2, r3
 800259a:	2300      	movs	r3, #0
 800259c:	9301      	str	r3, [sp, #4]
 800259e:	2302      	movs	r3, #2
 80025a0:	9300      	str	r3, [sp, #0]
 80025a2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025a6:	2178      	movs	r1, #120	; 0x78
 80025a8:	482c      	ldr	r0, [pc, #176]	; (800265c <FreqMenu_DrawPresetMenu+0x10b4>)
 80025aa:	f00b fb23 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025ae:	7bbb      	ldrb	r3, [r7, #14]
 80025b0:	b29a      	uxth	r2, r3
 80025b2:	2300      	movs	r3, #0
 80025b4:	9301      	str	r3, [sp, #4]
 80025b6:	2302      	movs	r3, #2
 80025b8:	9300      	str	r3, [sp, #0]
 80025ba:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025be:	2178      	movs	r1, #120	; 0x78
 80025c0:	4827      	ldr	r0, [pc, #156]	; (8002660 <FreqMenu_DrawPresetMenu+0x10b8>)
 80025c2:	f00b fb17 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025c6:	7b7b      	ldrb	r3, [r7, #13]
 80025c8:	b29a      	uxth	r2, r3
 80025ca:	2300      	movs	r3, #0
 80025cc:	9301      	str	r3, [sp, #4]
 80025ce:	2302      	movs	r3, #2
 80025d0:	9300      	str	r3, [sp, #0]
 80025d2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025d6:	2178      	movs	r1, #120	; 0x78
 80025d8:	4822      	ldr	r0, [pc, #136]	; (8002664 <FreqMenu_DrawPresetMenu+0x10bc>)
 80025da:	f00b fb0b 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80025de:	7b3b      	ldrb	r3, [r7, #12]
 80025e0:	b29a      	uxth	r2, r3
 80025e2:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80025e6:	9301      	str	r3, [sp, #4]
 80025e8:	2302      	movs	r3, #2
 80025ea:	9300      	str	r3, [sp, #0]
 80025ec:	2300      	movs	r3, #0
 80025ee:	2178      	movs	r1, #120	; 0x78
 80025f0:	481d      	ldr	r0, [pc, #116]	; (8002668 <FreqMenu_DrawPresetMenu+0x10c0>)
 80025f2:	f00b faff 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025f6:	7afb      	ldrb	r3, [r7, #11]
 80025f8:	b29a      	uxth	r2, r3
 80025fa:	2300      	movs	r3, #0
 80025fc:	9301      	str	r3, [sp, #4]
 80025fe:	2302      	movs	r3, #2
 8002600:	9300      	str	r3, [sp, #0]
 8002602:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002606:	2178      	movs	r1, #120	; 0x78
 8002608:	4818      	ldr	r0, [pc, #96]	; (800266c <FreqMenu_DrawPresetMenu+0x10c4>)
 800260a:	f00b faf3 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800260e:	7abb      	ldrb	r3, [r7, #10]
 8002610:	b29a      	uxth	r2, r3
 8002612:	2300      	movs	r3, #0
 8002614:	9301      	str	r3, [sp, #4]
 8002616:	2302      	movs	r3, #2
 8002618:	9300      	str	r3, [sp, #0]
 800261a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800261e:	2178      	movs	r1, #120	; 0x78
 8002620:	4813      	ldr	r0, [pc, #76]	; (8002670 <FreqMenu_DrawPresetMenu+0x10c8>)
 8002622:	f00b fae7 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002626:	7a7b      	ldrb	r3, [r7, #9]
 8002628:	b29a      	uxth	r2, r3
 800262a:	2300      	movs	r3, #0
 800262c:	9301      	str	r3, [sp, #4]
 800262e:	2302      	movs	r3, #2
 8002630:	9300      	str	r3, [sp, #0]
 8002632:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002636:	2178      	movs	r1, #120	; 0x78
 8002638:	480e      	ldr	r0, [pc, #56]	; (8002674 <FreqMenu_DrawPresetMenu+0x10cc>)
 800263a:	f00b fadb 	bl	800dbf4 <ILI9341_Draw_Text>
				break;
 800263e:	e23f      	b.n	8002ac0 <FreqMenu_DrawPresetMenu+0x1518>
 8002640:	08012a14 	.word	0x08012a14
 8002644:	08012a1c 	.word	0x08012a1c
 8002648:	08012a24 	.word	0x08012a24
 800264c:	08012a2c 	.word	0x08012a2c
 8002650:	08012a34 	.word	0x08012a34
 8002654:	08012a3c 	.word	0x08012a3c
 8002658:	08012a44 	.word	0x08012a44
 800265c:	08012a4c 	.word	0x08012a4c
 8002660:	08012a54 	.word	0x08012a54
 8002664:	08012a5c 	.word	0x08012a5c
 8002668:	08012a64 	.word	0x08012a64
 800266c:	08012a6c 	.word	0x08012a6c
 8002670:	08012a74 	.word	0x08012a74
 8002674:	08012a7c 	.word	0x08012a7c
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002678:	7bfb      	ldrb	r3, [r7, #15]
 800267a:	b29a      	uxth	r2, r3
 800267c:	2300      	movs	r3, #0
 800267e:	9301      	str	r3, [sp, #4]
 8002680:	2302      	movs	r3, #2
 8002682:	9300      	str	r3, [sp, #0]
 8002684:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002688:	2105      	movs	r1, #5
 800268a:	48a4      	ldr	r0, [pc, #656]	; (800291c <FreqMenu_DrawPresetMenu+0x1374>)
 800268c:	f00b fab2 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002690:	7bbb      	ldrb	r3, [r7, #14]
 8002692:	b29a      	uxth	r2, r3
 8002694:	2300      	movs	r3, #0
 8002696:	9301      	str	r3, [sp, #4]
 8002698:	2302      	movs	r3, #2
 800269a:	9300      	str	r3, [sp, #0]
 800269c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80026a0:	2105      	movs	r1, #5
 80026a2:	489f      	ldr	r0, [pc, #636]	; (8002920 <FreqMenu_DrawPresetMenu+0x1378>)
 80026a4:	f00b faa6 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80026a8:	7b7b      	ldrb	r3, [r7, #13]
 80026aa:	b29a      	uxth	r2, r3
 80026ac:	2300      	movs	r3, #0
 80026ae:	9301      	str	r3, [sp, #4]
 80026b0:	2302      	movs	r3, #2
 80026b2:	9300      	str	r3, [sp, #0]
 80026b4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80026b8:	2105      	movs	r1, #5
 80026ba:	489a      	ldr	r0, [pc, #616]	; (8002924 <FreqMenu_DrawPresetMenu+0x137c>)
 80026bc:	f00b fa9a 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80026c0:	7b3b      	ldrb	r3, [r7, #12]
 80026c2:	b29a      	uxth	r2, r3
 80026c4:	2300      	movs	r3, #0
 80026c6:	9301      	str	r3, [sp, #4]
 80026c8:	2302      	movs	r3, #2
 80026ca:	9300      	str	r3, [sp, #0]
 80026cc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80026d0:	2105      	movs	r1, #5
 80026d2:	4895      	ldr	r0, [pc, #596]	; (8002928 <FreqMenu_DrawPresetMenu+0x1380>)
 80026d4:	f00b fa8e 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80026d8:	7afb      	ldrb	r3, [r7, #11]
 80026da:	b29a      	uxth	r2, r3
 80026dc:	2300      	movs	r3, #0
 80026de:	9301      	str	r3, [sp, #4]
 80026e0:	2302      	movs	r3, #2
 80026e2:	9300      	str	r3, [sp, #0]
 80026e4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80026e8:	2105      	movs	r1, #5
 80026ea:	4890      	ldr	r0, [pc, #576]	; (800292c <FreqMenu_DrawPresetMenu+0x1384>)
 80026ec:	f00b fa82 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80026f0:	7abb      	ldrb	r3, [r7, #10]
 80026f2:	b29a      	uxth	r2, r3
 80026f4:	2300      	movs	r3, #0
 80026f6:	9301      	str	r3, [sp, #4]
 80026f8:	2302      	movs	r3, #2
 80026fa:	9300      	str	r3, [sp, #0]
 80026fc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002700:	2105      	movs	r1, #5
 8002702:	488b      	ldr	r0, [pc, #556]	; (8002930 <FreqMenu_DrawPresetMenu+0x1388>)
 8002704:	f00b fa76 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002708:	7a7b      	ldrb	r3, [r7, #9]
 800270a:	b29a      	uxth	r2, r3
 800270c:	2300      	movs	r3, #0
 800270e:	9301      	str	r3, [sp, #4]
 8002710:	2302      	movs	r3, #2
 8002712:	9300      	str	r3, [sp, #0]
 8002714:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002718:	2105      	movs	r1, #5
 800271a:	4886      	ldr	r0, [pc, #536]	; (8002934 <FreqMenu_DrawPresetMenu+0x138c>)
 800271c:	f00b fa6a 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002720:	7bfb      	ldrb	r3, [r7, #15]
 8002722:	b29a      	uxth	r2, r3
 8002724:	2300      	movs	r3, #0
 8002726:	9301      	str	r3, [sp, #4]
 8002728:	2302      	movs	r3, #2
 800272a:	9300      	str	r3, [sp, #0]
 800272c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002730:	2178      	movs	r1, #120	; 0x78
 8002732:	4881      	ldr	r0, [pc, #516]	; (8002938 <FreqMenu_DrawPresetMenu+0x1390>)
 8002734:	f00b fa5e 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002738:	7bbb      	ldrb	r3, [r7, #14]
 800273a:	b29a      	uxth	r2, r3
 800273c:	2300      	movs	r3, #0
 800273e:	9301      	str	r3, [sp, #4]
 8002740:	2302      	movs	r3, #2
 8002742:	9300      	str	r3, [sp, #0]
 8002744:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002748:	2178      	movs	r1, #120	; 0x78
 800274a:	487c      	ldr	r0, [pc, #496]	; (800293c <FreqMenu_DrawPresetMenu+0x1394>)
 800274c:	f00b fa52 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002750:	7b7b      	ldrb	r3, [r7, #13]
 8002752:	b29a      	uxth	r2, r3
 8002754:	2300      	movs	r3, #0
 8002756:	9301      	str	r3, [sp, #4]
 8002758:	2302      	movs	r3, #2
 800275a:	9300      	str	r3, [sp, #0]
 800275c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002760:	2178      	movs	r1, #120	; 0x78
 8002762:	4877      	ldr	r0, [pc, #476]	; (8002940 <FreqMenu_DrawPresetMenu+0x1398>)
 8002764:	f00b fa46 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002768:	7b3b      	ldrb	r3, [r7, #12]
 800276a:	b29a      	uxth	r2, r3
 800276c:	2300      	movs	r3, #0
 800276e:	9301      	str	r3, [sp, #4]
 8002770:	2302      	movs	r3, #2
 8002772:	9300      	str	r3, [sp, #0]
 8002774:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002778:	2178      	movs	r1, #120	; 0x78
 800277a:	4872      	ldr	r0, [pc, #456]	; (8002944 <FreqMenu_DrawPresetMenu+0x139c>)
 800277c:	f00b fa3a 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002780:	7afb      	ldrb	r3, [r7, #11]
 8002782:	b29a      	uxth	r2, r3
 8002784:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002788:	9301      	str	r3, [sp, #4]
 800278a:	2302      	movs	r3, #2
 800278c:	9300      	str	r3, [sp, #0]
 800278e:	2300      	movs	r3, #0
 8002790:	2178      	movs	r1, #120	; 0x78
 8002792:	486d      	ldr	r0, [pc, #436]	; (8002948 <FreqMenu_DrawPresetMenu+0x13a0>)
 8002794:	f00b fa2e 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002798:	7abb      	ldrb	r3, [r7, #10]
 800279a:	b29a      	uxth	r2, r3
 800279c:	2300      	movs	r3, #0
 800279e:	9301      	str	r3, [sp, #4]
 80027a0:	2302      	movs	r3, #2
 80027a2:	9300      	str	r3, [sp, #0]
 80027a4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80027a8:	2178      	movs	r1, #120	; 0x78
 80027aa:	4868      	ldr	r0, [pc, #416]	; (800294c <FreqMenu_DrawPresetMenu+0x13a4>)
 80027ac:	f00b fa22 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80027b0:	7a7b      	ldrb	r3, [r7, #9]
 80027b2:	b29a      	uxth	r2, r3
 80027b4:	2300      	movs	r3, #0
 80027b6:	9301      	str	r3, [sp, #4]
 80027b8:	2302      	movs	r3, #2
 80027ba:	9300      	str	r3, [sp, #0]
 80027bc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80027c0:	2178      	movs	r1, #120	; 0x78
 80027c2:	4863      	ldr	r0, [pc, #396]	; (8002950 <FreqMenu_DrawPresetMenu+0x13a8>)
 80027c4:	f00b fa16 	bl	800dbf4 <ILI9341_Draw_Text>
			break;
 80027c8:	e17a      	b.n	8002ac0 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80027ca:	7bfb      	ldrb	r3, [r7, #15]
 80027cc:	b29a      	uxth	r2, r3
 80027ce:	2300      	movs	r3, #0
 80027d0:	9301      	str	r3, [sp, #4]
 80027d2:	2302      	movs	r3, #2
 80027d4:	9300      	str	r3, [sp, #0]
 80027d6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80027da:	2105      	movs	r1, #5
 80027dc:	484f      	ldr	r0, [pc, #316]	; (800291c <FreqMenu_DrawPresetMenu+0x1374>)
 80027de:	f00b fa09 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80027e2:	7bbb      	ldrb	r3, [r7, #14]
 80027e4:	b29a      	uxth	r2, r3
 80027e6:	2300      	movs	r3, #0
 80027e8:	9301      	str	r3, [sp, #4]
 80027ea:	2302      	movs	r3, #2
 80027ec:	9300      	str	r3, [sp, #0]
 80027ee:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80027f2:	2105      	movs	r1, #5
 80027f4:	484a      	ldr	r0, [pc, #296]	; (8002920 <FreqMenu_DrawPresetMenu+0x1378>)
 80027f6:	f00b f9fd 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80027fa:	7b7b      	ldrb	r3, [r7, #13]
 80027fc:	b29a      	uxth	r2, r3
 80027fe:	2300      	movs	r3, #0
 8002800:	9301      	str	r3, [sp, #4]
 8002802:	2302      	movs	r3, #2
 8002804:	9300      	str	r3, [sp, #0]
 8002806:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800280a:	2105      	movs	r1, #5
 800280c:	4845      	ldr	r0, [pc, #276]	; (8002924 <FreqMenu_DrawPresetMenu+0x137c>)
 800280e:	f00b f9f1 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002812:	7b3b      	ldrb	r3, [r7, #12]
 8002814:	b29a      	uxth	r2, r3
 8002816:	2300      	movs	r3, #0
 8002818:	9301      	str	r3, [sp, #4]
 800281a:	2302      	movs	r3, #2
 800281c:	9300      	str	r3, [sp, #0]
 800281e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002822:	2105      	movs	r1, #5
 8002824:	4840      	ldr	r0, [pc, #256]	; (8002928 <FreqMenu_DrawPresetMenu+0x1380>)
 8002826:	f00b f9e5 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800282a:	7afb      	ldrb	r3, [r7, #11]
 800282c:	b29a      	uxth	r2, r3
 800282e:	2300      	movs	r3, #0
 8002830:	9301      	str	r3, [sp, #4]
 8002832:	2302      	movs	r3, #2
 8002834:	9300      	str	r3, [sp, #0]
 8002836:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800283a:	2105      	movs	r1, #5
 800283c:	483b      	ldr	r0, [pc, #236]	; (800292c <FreqMenu_DrawPresetMenu+0x1384>)
 800283e:	f00b f9d9 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002842:	7abb      	ldrb	r3, [r7, #10]
 8002844:	b29a      	uxth	r2, r3
 8002846:	2300      	movs	r3, #0
 8002848:	9301      	str	r3, [sp, #4]
 800284a:	2302      	movs	r3, #2
 800284c:	9300      	str	r3, [sp, #0]
 800284e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002852:	2105      	movs	r1, #5
 8002854:	4836      	ldr	r0, [pc, #216]	; (8002930 <FreqMenu_DrawPresetMenu+0x1388>)
 8002856:	f00b f9cd 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800285a:	7a7b      	ldrb	r3, [r7, #9]
 800285c:	b29a      	uxth	r2, r3
 800285e:	2300      	movs	r3, #0
 8002860:	9301      	str	r3, [sp, #4]
 8002862:	2302      	movs	r3, #2
 8002864:	9300      	str	r3, [sp, #0]
 8002866:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800286a:	2105      	movs	r1, #5
 800286c:	4831      	ldr	r0, [pc, #196]	; (8002934 <FreqMenu_DrawPresetMenu+0x138c>)
 800286e:	f00b f9c1 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002872:	7bfb      	ldrb	r3, [r7, #15]
 8002874:	b29a      	uxth	r2, r3
 8002876:	2300      	movs	r3, #0
 8002878:	9301      	str	r3, [sp, #4]
 800287a:	2302      	movs	r3, #2
 800287c:	9300      	str	r3, [sp, #0]
 800287e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002882:	2178      	movs	r1, #120	; 0x78
 8002884:	482c      	ldr	r0, [pc, #176]	; (8002938 <FreqMenu_DrawPresetMenu+0x1390>)
 8002886:	f00b f9b5 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800288a:	7bbb      	ldrb	r3, [r7, #14]
 800288c:	b29a      	uxth	r2, r3
 800288e:	2300      	movs	r3, #0
 8002890:	9301      	str	r3, [sp, #4]
 8002892:	2302      	movs	r3, #2
 8002894:	9300      	str	r3, [sp, #0]
 8002896:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800289a:	2178      	movs	r1, #120	; 0x78
 800289c:	4827      	ldr	r0, [pc, #156]	; (800293c <FreqMenu_DrawPresetMenu+0x1394>)
 800289e:	f00b f9a9 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80028a2:	7b7b      	ldrb	r3, [r7, #13]
 80028a4:	b29a      	uxth	r2, r3
 80028a6:	2300      	movs	r3, #0
 80028a8:	9301      	str	r3, [sp, #4]
 80028aa:	2302      	movs	r3, #2
 80028ac:	9300      	str	r3, [sp, #0]
 80028ae:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80028b2:	2178      	movs	r1, #120	; 0x78
 80028b4:	4822      	ldr	r0, [pc, #136]	; (8002940 <FreqMenu_DrawPresetMenu+0x1398>)
 80028b6:	f00b f99d 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80028ba:	7b3b      	ldrb	r3, [r7, #12]
 80028bc:	b29a      	uxth	r2, r3
 80028be:	2300      	movs	r3, #0
 80028c0:	9301      	str	r3, [sp, #4]
 80028c2:	2302      	movs	r3, #2
 80028c4:	9300      	str	r3, [sp, #0]
 80028c6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80028ca:	2178      	movs	r1, #120	; 0x78
 80028cc:	481d      	ldr	r0, [pc, #116]	; (8002944 <FreqMenu_DrawPresetMenu+0x139c>)
 80028ce:	f00b f991 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80028d2:	7afb      	ldrb	r3, [r7, #11]
 80028d4:	b29a      	uxth	r2, r3
 80028d6:	2300      	movs	r3, #0
 80028d8:	9301      	str	r3, [sp, #4]
 80028da:	2302      	movs	r3, #2
 80028dc:	9300      	str	r3, [sp, #0]
 80028de:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80028e2:	2178      	movs	r1, #120	; 0x78
 80028e4:	4818      	ldr	r0, [pc, #96]	; (8002948 <FreqMenu_DrawPresetMenu+0x13a0>)
 80028e6:	f00b f985 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80028ea:	7abb      	ldrb	r3, [r7, #10]
 80028ec:	b29a      	uxth	r2, r3
 80028ee:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80028f2:	9301      	str	r3, [sp, #4]
 80028f4:	2302      	movs	r3, #2
 80028f6:	9300      	str	r3, [sp, #0]
 80028f8:	2300      	movs	r3, #0
 80028fa:	2178      	movs	r1, #120	; 0x78
 80028fc:	4813      	ldr	r0, [pc, #76]	; (800294c <FreqMenu_DrawPresetMenu+0x13a4>)
 80028fe:	f00b f979 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002902:	7a7b      	ldrb	r3, [r7, #9]
 8002904:	b29a      	uxth	r2, r3
 8002906:	2300      	movs	r3, #0
 8002908:	9301      	str	r3, [sp, #4]
 800290a:	2302      	movs	r3, #2
 800290c:	9300      	str	r3, [sp, #0]
 800290e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002912:	2178      	movs	r1, #120	; 0x78
 8002914:	480e      	ldr	r0, [pc, #56]	; (8002950 <FreqMenu_DrawPresetMenu+0x13a8>)
 8002916:	f00b f96d 	bl	800dbf4 <ILI9341_Draw_Text>
			break;
 800291a:	e0d1      	b.n	8002ac0 <FreqMenu_DrawPresetMenu+0x1518>
 800291c:	08012a14 	.word	0x08012a14
 8002920:	08012a1c 	.word	0x08012a1c
 8002924:	08012a24 	.word	0x08012a24
 8002928:	08012a2c 	.word	0x08012a2c
 800292c:	08012a34 	.word	0x08012a34
 8002930:	08012a3c 	.word	0x08012a3c
 8002934:	08012a44 	.word	0x08012a44
 8002938:	08012a4c 	.word	0x08012a4c
 800293c:	08012a54 	.word	0x08012a54
 8002940:	08012a5c 	.word	0x08012a5c
 8002944:	08012a64 	.word	0x08012a64
 8002948:	08012a6c 	.word	0x08012a6c
 800294c:	08012a74 	.word	0x08012a74
 8002950:	08012a7c 	.word	0x08012a7c
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002954:	7bfb      	ldrb	r3, [r7, #15]
 8002956:	b29a      	uxth	r2, r3
 8002958:	2300      	movs	r3, #0
 800295a:	9301      	str	r3, [sp, #4]
 800295c:	2302      	movs	r3, #2
 800295e:	9300      	str	r3, [sp, #0]
 8002960:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002964:	2105      	movs	r1, #5
 8002966:	4858      	ldr	r0, [pc, #352]	; (8002ac8 <FreqMenu_DrawPresetMenu+0x1520>)
 8002968:	f00b f944 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800296c:	7bbb      	ldrb	r3, [r7, #14]
 800296e:	b29a      	uxth	r2, r3
 8002970:	2300      	movs	r3, #0
 8002972:	9301      	str	r3, [sp, #4]
 8002974:	2302      	movs	r3, #2
 8002976:	9300      	str	r3, [sp, #0]
 8002978:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800297c:	2105      	movs	r1, #5
 800297e:	4853      	ldr	r0, [pc, #332]	; (8002acc <FreqMenu_DrawPresetMenu+0x1524>)
 8002980:	f00b f938 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002984:	7b7b      	ldrb	r3, [r7, #13]
 8002986:	b29a      	uxth	r2, r3
 8002988:	2300      	movs	r3, #0
 800298a:	9301      	str	r3, [sp, #4]
 800298c:	2302      	movs	r3, #2
 800298e:	9300      	str	r3, [sp, #0]
 8002990:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002994:	2105      	movs	r1, #5
 8002996:	484e      	ldr	r0, [pc, #312]	; (8002ad0 <FreqMenu_DrawPresetMenu+0x1528>)
 8002998:	f00b f92c 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800299c:	7b3b      	ldrb	r3, [r7, #12]
 800299e:	b29a      	uxth	r2, r3
 80029a0:	2300      	movs	r3, #0
 80029a2:	9301      	str	r3, [sp, #4]
 80029a4:	2302      	movs	r3, #2
 80029a6:	9300      	str	r3, [sp, #0]
 80029a8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80029ac:	2105      	movs	r1, #5
 80029ae:	4849      	ldr	r0, [pc, #292]	; (8002ad4 <FreqMenu_DrawPresetMenu+0x152c>)
 80029b0:	f00b f920 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80029b4:	7afb      	ldrb	r3, [r7, #11]
 80029b6:	b29a      	uxth	r2, r3
 80029b8:	2300      	movs	r3, #0
 80029ba:	9301      	str	r3, [sp, #4]
 80029bc:	2302      	movs	r3, #2
 80029be:	9300      	str	r3, [sp, #0]
 80029c0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80029c4:	2105      	movs	r1, #5
 80029c6:	4844      	ldr	r0, [pc, #272]	; (8002ad8 <FreqMenu_DrawPresetMenu+0x1530>)
 80029c8:	f00b f914 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80029cc:	7abb      	ldrb	r3, [r7, #10]
 80029ce:	b29a      	uxth	r2, r3
 80029d0:	2300      	movs	r3, #0
 80029d2:	9301      	str	r3, [sp, #4]
 80029d4:	2302      	movs	r3, #2
 80029d6:	9300      	str	r3, [sp, #0]
 80029d8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80029dc:	2105      	movs	r1, #5
 80029de:	483f      	ldr	r0, [pc, #252]	; (8002adc <FreqMenu_DrawPresetMenu+0x1534>)
 80029e0:	f00b f908 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80029e4:	7a7b      	ldrb	r3, [r7, #9]
 80029e6:	b29a      	uxth	r2, r3
 80029e8:	2300      	movs	r3, #0
 80029ea:	9301      	str	r3, [sp, #4]
 80029ec:	2302      	movs	r3, #2
 80029ee:	9300      	str	r3, [sp, #0]
 80029f0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80029f4:	2105      	movs	r1, #5
 80029f6:	483a      	ldr	r0, [pc, #232]	; (8002ae0 <FreqMenu_DrawPresetMenu+0x1538>)
 80029f8:	f00b f8fc 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80029fc:	7bfb      	ldrb	r3, [r7, #15]
 80029fe:	b29a      	uxth	r2, r3
 8002a00:	2300      	movs	r3, #0
 8002a02:	9301      	str	r3, [sp, #4]
 8002a04:	2302      	movs	r3, #2
 8002a06:	9300      	str	r3, [sp, #0]
 8002a08:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a0c:	2178      	movs	r1, #120	; 0x78
 8002a0e:	4835      	ldr	r0, [pc, #212]	; (8002ae4 <FreqMenu_DrawPresetMenu+0x153c>)
 8002a10:	f00b f8f0 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a14:	7bbb      	ldrb	r3, [r7, #14]
 8002a16:	b29a      	uxth	r2, r3
 8002a18:	2300      	movs	r3, #0
 8002a1a:	9301      	str	r3, [sp, #4]
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	9300      	str	r3, [sp, #0]
 8002a20:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a24:	2178      	movs	r1, #120	; 0x78
 8002a26:	4830      	ldr	r0, [pc, #192]	; (8002ae8 <FreqMenu_DrawPresetMenu+0x1540>)
 8002a28:	f00b f8e4 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a2c:	7b7b      	ldrb	r3, [r7, #13]
 8002a2e:	b29a      	uxth	r2, r3
 8002a30:	2300      	movs	r3, #0
 8002a32:	9301      	str	r3, [sp, #4]
 8002a34:	2302      	movs	r3, #2
 8002a36:	9300      	str	r3, [sp, #0]
 8002a38:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a3c:	2178      	movs	r1, #120	; 0x78
 8002a3e:	482b      	ldr	r0, [pc, #172]	; (8002aec <FreqMenu_DrawPresetMenu+0x1544>)
 8002a40:	f00b f8d8 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a44:	7b3b      	ldrb	r3, [r7, #12]
 8002a46:	b29a      	uxth	r2, r3
 8002a48:	2300      	movs	r3, #0
 8002a4a:	9301      	str	r3, [sp, #4]
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	9300      	str	r3, [sp, #0]
 8002a50:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a54:	2178      	movs	r1, #120	; 0x78
 8002a56:	4826      	ldr	r0, [pc, #152]	; (8002af0 <FreqMenu_DrawPresetMenu+0x1548>)
 8002a58:	f00b f8cc 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a5c:	7afb      	ldrb	r3, [r7, #11]
 8002a5e:	b29a      	uxth	r2, r3
 8002a60:	2300      	movs	r3, #0
 8002a62:	9301      	str	r3, [sp, #4]
 8002a64:	2302      	movs	r3, #2
 8002a66:	9300      	str	r3, [sp, #0]
 8002a68:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a6c:	2178      	movs	r1, #120	; 0x78
 8002a6e:	4821      	ldr	r0, [pc, #132]	; (8002af4 <FreqMenu_DrawPresetMenu+0x154c>)
 8002a70:	f00b f8c0 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a74:	7abb      	ldrb	r3, [r7, #10]
 8002a76:	b29a      	uxth	r2, r3
 8002a78:	2300      	movs	r3, #0
 8002a7a:	9301      	str	r3, [sp, #4]
 8002a7c:	2302      	movs	r3, #2
 8002a7e:	9300      	str	r3, [sp, #0]
 8002a80:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a84:	2178      	movs	r1, #120	; 0x78
 8002a86:	481c      	ldr	r0, [pc, #112]	; (8002af8 <FreqMenu_DrawPresetMenu+0x1550>)
 8002a88:	f00b f8b4 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002a8c:	7a7b      	ldrb	r3, [r7, #9]
 8002a8e:	b29a      	uxth	r2, r3
 8002a90:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002a94:	9301      	str	r3, [sp, #4]
 8002a96:	2302      	movs	r3, #2
 8002a98:	9300      	str	r3, [sp, #0]
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	2178      	movs	r1, #120	; 0x78
 8002a9e:	4817      	ldr	r0, [pc, #92]	; (8002afc <FreqMenu_DrawPresetMenu+0x1554>)
 8002aa0:	f00b f8a8 	bl	800dbf4 <ILI9341_Draw_Text>
			break;
 8002aa4:	bf00      	nop
 8002aa6:	e00b      	b.n	8002ac0 <FreqMenu_DrawPresetMenu+0x1518>
		ILI9341_Draw_Text("FreqMenus::FreqMenu_DrawFreqPresetMenu() Error", 		5, 180, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 8002aa8:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8002aac:	9301      	str	r3, [sp, #4]
 8002aae:	2301      	movs	r3, #1
 8002ab0:	9300      	str	r3, [sp, #0]
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	22b4      	movs	r2, #180	; 0xb4
 8002ab6:	2105      	movs	r1, #5
 8002ab8:	4811      	ldr	r0, [pc, #68]	; (8002b00 <FreqMenu_DrawPresetMenu+0x1558>)
 8002aba:	f00b f89b 	bl	800dbf4 <ILI9341_Draw_Text>
}
 8002abe:	e7ff      	b.n	8002ac0 <FreqMenu_DrawPresetMenu+0x1518>
 8002ac0:	bf00      	nop
 8002ac2:	3710      	adds	r7, #16
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	08012a14 	.word	0x08012a14
 8002acc:	08012a1c 	.word	0x08012a1c
 8002ad0:	08012a24 	.word	0x08012a24
 8002ad4:	08012a2c 	.word	0x08012a2c
 8002ad8:	08012a34 	.word	0x08012a34
 8002adc:	08012a3c 	.word	0x08012a3c
 8002ae0:	08012a44 	.word	0x08012a44
 8002ae4:	08012a4c 	.word	0x08012a4c
 8002ae8:	08012a54 	.word	0x08012a54
 8002aec:	08012a5c 	.word	0x08012a5c
 8002af0:	08012a64 	.word	0x08012a64
 8002af4:	08012a6c 	.word	0x08012a6c
 8002af8:	08012a74 	.word	0x08012a74
 8002afc:	08012a7c 	.word	0x08012a7c
 8002b00:	08012a88 	.word	0x08012a88

08002b04 <FreqMenu_DrawAdjustMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawAdjustMenu()
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FREQ->ADJUST", 5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8002b0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b0e:	9301      	str	r3, [sp, #4]
 8002b10:	2302      	movs	r3, #2
 8002b12:	9300      	str	r3, [sp, #0]
 8002b14:	2300      	movs	r3, #0
 8002b16:	220a      	movs	r2, #10
 8002b18:	2105      	movs	r1, #5
 8002b1a:	4804      	ldr	r0, [pc, #16]	; (8002b2c <FreqMenu_DrawAdjustMenu+0x28>)
 8002b1c:	f00b f86a 	bl	800dbf4 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8002b20:	f7fe f9ea 	bl	8000ef8 <DM_DisplayFormattedOutput>
	//snprintf(freq, sizeof(freq), "%u", (uint8_t)FreqO_GetOutputFreq());
	if(DM_AddDigitPadding((uint16_t)FreqO_GetOutputFreq(), freq, sizeof(freq)) == 0)
		ILI9341_Draw_Text(freq, 250, 150, WHITE, 1, BLACK);
*/

}
 8002b24:	bf00      	nop
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	08012ab8 	.word	0x08012ab8

08002b30 <FreqMenu_DrawSweepMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawSweepMenu()
{
 8002b30:	b5b0      	push	{r4, r5, r7, lr}
 8002b32:	b0a0      	sub	sp, #128	; 0x80
 8002b34:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FREQ->SWEEP", 	5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8002b36:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b3a:	9301      	str	r3, [sp, #4]
 8002b3c:	2302      	movs	r3, #2
 8002b3e:	9300      	str	r3, [sp, #0]
 8002b40:	2300      	movs	r3, #0
 8002b42:	220a      	movs	r2, #10
 8002b44:	2105      	movs	r1, #5
 8002b46:	48a1      	ldr	r0, [pc, #644]	; (8002dcc <FreqMenu_DrawSweepMenu+0x29c>)
 8002b48:	f00b f854 	bl	800dbf4 <ILI9341_Draw_Text>


	// draw enabled status


	char enabled_text[20] = "";
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	667b      	str	r3, [r7, #100]	; 0x64
 8002b50:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002b54:	2200      	movs	r2, #0
 8002b56:	601a      	str	r2, [r3, #0]
 8002b58:	605a      	str	r2, [r3, #4]
 8002b5a:	609a      	str	r2, [r3, #8]
 8002b5c:	60da      	str	r2, [r3, #12]
	if((SWEEP_TIMER->CR1 & TIM_CR1_CEN) == TIM_CR1_CEN)
 8002b5e:	4b9c      	ldr	r3, [pc, #624]	; (8002dd0 <FreqMenu_DrawSweepMenu+0x2a0>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0301 	and.w	r3, r3, #1
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d109      	bne.n	8002b7e <FreqMenu_DrawSweepMenu+0x4e>
	{
		snprintf(enabled_text, sizeof(enabled_text), "STATUS:  RUNNING");
 8002b6a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002b6e:	4a99      	ldr	r2, [pc, #612]	; (8002dd4 <FreqMenu_DrawSweepMenu+0x2a4>)
 8002b70:	461c      	mov	r4, r3
 8002b72:	4615      	mov	r5, r2
 8002b74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b78:	682b      	ldr	r3, [r5, #0]
 8002b7a:	7023      	strb	r3, [r4, #0]
 8002b7c:	e008      	b.n	8002b90 <FreqMenu_DrawSweepMenu+0x60>
	}
	else
	{
		snprintf(enabled_text, sizeof(enabled_text), "STATUS:  STOPPED");
 8002b7e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002b82:	4a95      	ldr	r2, [pc, #596]	; (8002dd8 <FreqMenu_DrawSweepMenu+0x2a8>)
 8002b84:	461c      	mov	r4, r3
 8002b86:	4615      	mov	r5, r2
 8002b88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b8c:	682b      	ldr	r3, [r5, #0]
 8002b8e:	7023      	strb	r3, [r4, #0]
	}

	ILI9341_Draw_Text(enabled_text, 5, 40, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002b90:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8002b94:	2300      	movs	r3, #0
 8002b96:	9301      	str	r3, [sp, #4]
 8002b98:	2302      	movs	r3, #2
 8002b9a:	9300      	str	r3, [sp, #0]
 8002b9c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002ba0:	2228      	movs	r2, #40	; 0x28
 8002ba2:	2105      	movs	r1, #5
 8002ba4:	f00b f826 	bl	800dbf4 <ILI9341_Draw_Text>

	// draw output freq status
	char out_hertz[25] = "";
 8002ba8:	2300      	movs	r3, #0
 8002baa:	64bb      	str	r3, [r7, #72]	; 0x48
 8002bac:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	601a      	str	r2, [r3, #0]
 8002bb4:	605a      	str	r2, [r3, #4]
 8002bb6:	609a      	str	r2, [r3, #8]
 8002bb8:	60da      	str	r2, [r3, #12]
 8002bba:	611a      	str	r2, [r3, #16]
 8002bbc:	751a      	strb	r2, [r3, #20]
	snprintf(out_hertz, sizeof(out_hertz), "OUTPUT: %7.2f Hz", SM_GetOutputInHertz());
 8002bbe:	f002 fddb 	bl	8005778 <SM_GetOutputInHertz>
 8002bc2:	ee10 3a10 	vmov	r3, s0
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f7fd fce6 	bl	8000598 <__aeabi_f2d>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	460c      	mov	r4, r1
 8002bd0:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8002bd4:	e9cd 3400 	strd	r3, r4, [sp]
 8002bd8:	4a80      	ldr	r2, [pc, #512]	; (8002ddc <FreqMenu_DrawSweepMenu+0x2ac>)
 8002bda:	2119      	movs	r1, #25
 8002bdc:	f00c fbae 	bl	800f33c <sniprintf>
	ILI9341_Draw_Text(out_hertz, 5, 60, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002be0:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8002be4:	2300      	movs	r3, #0
 8002be6:	9301      	str	r3, [sp, #4]
 8002be8:	2302      	movs	r3, #2
 8002bea:	9300      	str	r3, [sp, #0]
 8002bec:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002bf0:	223c      	movs	r2, #60	; 0x3c
 8002bf2:	2105      	movs	r1, #5
 8002bf4:	f00a fffe 	bl	800dbf4 <ILI9341_Draw_Text>
		//snprintf(dir_text, sizeof(dir_text), "DIRECTION:  N/A");
	}
	else
	{
*/
		ILI9341_Draw_Text("SWEEP MODE:", 5, 100, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	9301      	str	r3, [sp, #4]
 8002bfc:	2302      	movs	r3, #2
 8002bfe:	9300      	str	r3, [sp, #0]
 8002c00:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002c04:	2264      	movs	r2, #100	; 0x64
 8002c06:	2105      	movs	r1, #5
 8002c08:	4875      	ldr	r0, [pc, #468]	; (8002de0 <FreqMenu_DrawSweepMenu+0x2b0>)
 8002c0a:	f00a fff3 	bl	800dbf4 <ILI9341_Draw_Text>

		// get direction
		if((SWEEP_TIMER->CR1 & TIM_CR1_DIR) == TIM_CR1_DIR)
 8002c0e:	4b70      	ldr	r3, [pc, #448]	; (8002dd0 <FreqMenu_DrawSweepMenu+0x2a0>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0310 	and.w	r3, r3, #16
 8002c16:	2b10      	cmp	r3, #16
 8002c18:	d117      	bne.n	8002c4a <FreqMenu_DrawSweepMenu+0x11a>
		{
			ILI9341_Draw_Text("UP", 235, 100, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	9301      	str	r3, [sp, #4]
 8002c1e:	2302      	movs	r3, #2
 8002c20:	9300      	str	r3, [sp, #0]
 8002c22:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002c26:	2264      	movs	r2, #100	; 0x64
 8002c28:	21eb      	movs	r1, #235	; 0xeb
 8002c2a:	486e      	ldr	r0, [pc, #440]	; (8002de4 <FreqMenu_DrawSweepMenu+0x2b4>)
 8002c2c:	f00a ffe2 	bl	800dbf4 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("DOWN", 265, 100, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002c30:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002c34:	9301      	str	r3, [sp, #4]
 8002c36:	2302      	movs	r3, #2
 8002c38:	9300      	str	r3, [sp, #0]
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	2264      	movs	r2, #100	; 0x64
 8002c3e:	f240 1109 	movw	r1, #265	; 0x109
 8002c42:	4869      	ldr	r0, [pc, #420]	; (8002de8 <FreqMenu_DrawSweepMenu+0x2b8>)
 8002c44:	f00a ffd6 	bl	800dbf4 <ILI9341_Draw_Text>
 8002c48:	e016      	b.n	8002c78 <FreqMenu_DrawSweepMenu+0x148>
		}
		else
		{
			ILI9341_Draw_Text("DOWN", 265, 100, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	9301      	str	r3, [sp, #4]
 8002c4e:	2302      	movs	r3, #2
 8002c50:	9300      	str	r3, [sp, #0]
 8002c52:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002c56:	2264      	movs	r2, #100	; 0x64
 8002c58:	f240 1109 	movw	r1, #265	; 0x109
 8002c5c:	4862      	ldr	r0, [pc, #392]	; (8002de8 <FreqMenu_DrawSweepMenu+0x2b8>)
 8002c5e:	f00a ffc9 	bl	800dbf4 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("UP", 235, 100, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002c62:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002c66:	9301      	str	r3, [sp, #4]
 8002c68:	2302      	movs	r3, #2
 8002c6a:	9300      	str	r3, [sp, #0]
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	2264      	movs	r2, #100	; 0x64
 8002c70:	21eb      	movs	r1, #235	; 0xeb
 8002c72:	485c      	ldr	r0, [pc, #368]	; (8002de4 <FreqMenu_DrawSweepMenu+0x2b4>)
 8002c74:	f00a ffbe 	bl	800dbf4 <ILI9341_Draw_Text>




	// draw rate status
	if(theCurrentEncoderSweepFunction == ENCODER_SWEEP_SPEED_FUNCTION)
 8002c78:	4b5c      	ldr	r3, [pc, #368]	; (8002dec <FreqMenu_DrawSweepMenu+0x2bc>)
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d10b      	bne.n	8002c98 <FreqMenu_DrawSweepMenu+0x168>
	{
		ILI9341_Draw_Text("SWEEP SPEED:", 5, 120, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002c80:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002c84:	9301      	str	r3, [sp, #4]
 8002c86:	2302      	movs	r3, #2
 8002c88:	9300      	str	r3, [sp, #0]
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	2278      	movs	r2, #120	; 0x78
 8002c8e:	2105      	movs	r1, #5
 8002c90:	4857      	ldr	r0, [pc, #348]	; (8002df0 <FreqMenu_DrawSweepMenu+0x2c0>)
 8002c92:	f00a ffaf 	bl	800dbf4 <ILI9341_Draw_Text>
 8002c96:	e00a      	b.n	8002cae <FreqMenu_DrawSweepMenu+0x17e>
	}
	else
	{
		ILI9341_Draw_Text("SWEEP SPEED:", 5, 120, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002c98:	2300      	movs	r3, #0
 8002c9a:	9301      	str	r3, [sp, #4]
 8002c9c:	2302      	movs	r3, #2
 8002c9e:	9300      	str	r3, [sp, #0]
 8002ca0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002ca4:	2278      	movs	r2, #120	; 0x78
 8002ca6:	2105      	movs	r1, #5
 8002ca8:	4851      	ldr	r0, [pc, #324]	; (8002df0 <FreqMenu_DrawSweepMenu+0x2c0>)
 8002caa:	f00a ffa3 	bl	800dbf4 <ILI9341_Draw_Text>
	}
	char arr_text[25] = "";
 8002cae:	2300      	movs	r3, #0
 8002cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cb2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	601a      	str	r2, [r3, #0]
 8002cba:	605a      	str	r2, [r3, #4]
 8002cbc:	609a      	str	r2, [r3, #8]
 8002cbe:	60da      	str	r2, [r3, #12]
 8002cc0:	611a      	str	r2, [r3, #16]
 8002cc2:	751a      	strb	r2, [r3, #20]
	snprintf(arr_text, sizeof(arr_text), "%8.3f Hz", calculated_sweep_in_hertz);
 8002cc4:	4b4b      	ldr	r3, [pc, #300]	; (8002df4 <FreqMenu_DrawSweepMenu+0x2c4>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7fd fc65 	bl	8000598 <__aeabi_f2d>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	460c      	mov	r4, r1
 8002cd2:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8002cd6:	e9cd 3400 	strd	r3, r4, [sp]
 8002cda:	4a47      	ldr	r2, [pc, #284]	; (8002df8 <FreqMenu_DrawSweepMenu+0x2c8>)
 8002cdc:	2119      	movs	r1, #25
 8002cde:	f00c fb2d 	bl	800f33c <sniprintf>
	ILI9341_Draw_Text(arr_text, 182, 120, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002ce2:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	9301      	str	r3, [sp, #4]
 8002cea:	2302      	movs	r3, #2
 8002cec:	9300      	str	r3, [sp, #0]
 8002cee:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002cf2:	2278      	movs	r2, #120	; 0x78
 8002cf4:	21b6      	movs	r1, #182	; 0xb6
 8002cf6:	f00a ff7d 	bl	800dbf4 <ILI9341_Draw_Text>


	// draw upper sweep bounds
	if( (theCurrentEncoderSweepFunction == ENCODER_SWEEP_LIMIT_FUNCTION) && (active_sweep_mode == SWEEP_MODE_UP) )
 8002cfa:	4b3c      	ldr	r3, [pc, #240]	; (8002dec <FreqMenu_DrawSweepMenu+0x2bc>)
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d10f      	bne.n	8002d22 <FreqMenu_DrawSweepMenu+0x1f2>
 8002d02:	4b3e      	ldr	r3, [pc, #248]	; (8002dfc <FreqMenu_DrawSweepMenu+0x2cc>)
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d10b      	bne.n	8002d22 <FreqMenu_DrawSweepMenu+0x1f2>
	{
		ILI9341_Draw_Text("SWEEP UPPER:", 5, 140, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);	// highlighted
 8002d0a:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002d0e:	9301      	str	r3, [sp, #4]
 8002d10:	2302      	movs	r3, #2
 8002d12:	9300      	str	r3, [sp, #0]
 8002d14:	2300      	movs	r3, #0
 8002d16:	228c      	movs	r2, #140	; 0x8c
 8002d18:	2105      	movs	r1, #5
 8002d1a:	4839      	ldr	r0, [pc, #228]	; (8002e00 <FreqMenu_DrawSweepMenu+0x2d0>)
 8002d1c:	f00a ff6a 	bl	800dbf4 <ILI9341_Draw_Text>
 8002d20:	e00a      	b.n	8002d38 <FreqMenu_DrawSweepMenu+0x208>
		//ILI9341_Draw_Arrow(ARROW_UP, 280, 120, 10, BLACK);
	}
	else
	{
		ILI9341_Draw_Text("SWEEP UPPER:", 5, 140, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002d22:	2300      	movs	r3, #0
 8002d24:	9301      	str	r3, [sp, #4]
 8002d26:	2302      	movs	r3, #2
 8002d28:	9300      	str	r3, [sp, #0]
 8002d2a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002d2e:	228c      	movs	r2, #140	; 0x8c
 8002d30:	2105      	movs	r1, #5
 8002d32:	4833      	ldr	r0, [pc, #204]	; (8002e00 <FreqMenu_DrawSweepMenu+0x2d0>)
 8002d34:	f00a ff5e 	bl	800dbf4 <ILI9341_Draw_Text>
	}
	char sweep_lower_text[20] = "";
 8002d38:	2300      	movs	r3, #0
 8002d3a:	61bb      	str	r3, [r7, #24]
 8002d3c:	f107 031c 	add.w	r3, r7, #28
 8002d40:	2200      	movs	r2, #0
 8002d42:	601a      	str	r2, [r3, #0]
 8002d44:	605a      	str	r2, [r3, #4]
 8002d46:	609a      	str	r2, [r3, #8]
 8002d48:	60da      	str	r2, [r3, #12]
	snprintf(sweep_lower_text, sizeof(sweep_lower_text), "%9.2f  Hz", SM_ConvertPeriodToHertz(sweep_lower_bounds_shortest_output_arr, OUTPUT_TIMER->PSC) /SM_FSAMP);
 8002d4a:	4b2e      	ldr	r3, [pc, #184]	; (8002e04 <FreqMenu_DrawSweepMenu+0x2d4>)
 8002d4c:	edd3 7a00 	vldr	s15, [r3]
 8002d50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d54:	4b2c      	ldr	r3, [pc, #176]	; (8002e08 <FreqMenu_DrawSweepMenu+0x2d8>)
 8002d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	ee17 0a90 	vmov	r0, s15
 8002d60:	f002 fd4e 	bl	8005800 <SM_ConvertPeriodToHertz>
 8002d64:	eeb0 7a40 	vmov.f32	s14, s0
 8002d68:	eddf 7a28 	vldr	s15, [pc, #160]	; 8002e0c <FreqMenu_DrawSweepMenu+0x2dc>
 8002d6c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002d70:	ee16 0a90 	vmov	r0, s13
 8002d74:	f7fd fc10 	bl	8000598 <__aeabi_f2d>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	460c      	mov	r4, r1
 8002d7c:	f107 0018 	add.w	r0, r7, #24
 8002d80:	e9cd 3400 	strd	r3, r4, [sp]
 8002d84:	4a22      	ldr	r2, [pc, #136]	; (8002e10 <FreqMenu_DrawSweepMenu+0x2e0>)
 8002d86:	2114      	movs	r1, #20
 8002d88:	f00c fad8 	bl	800f33c <sniprintf>
	ILI9341_Draw_Text(sweep_lower_text, 158, 140, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002d8c:	f107 0018 	add.w	r0, r7, #24
 8002d90:	2300      	movs	r3, #0
 8002d92:	9301      	str	r3, [sp, #4]
 8002d94:	2302      	movs	r3, #2
 8002d96:	9300      	str	r3, [sp, #0]
 8002d98:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002d9c:	228c      	movs	r2, #140	; 0x8c
 8002d9e:	219e      	movs	r1, #158	; 0x9e
 8002da0:	f00a ff28 	bl	800dbf4 <ILI9341_Draw_Text>


	// draw lower sweep bounds
	if( (theCurrentEncoderSweepFunction == ENCODER_SWEEP_LIMIT_FUNCTION) && (active_sweep_mode == SWEEP_MODE_DOWN) )
 8002da4:	4b11      	ldr	r3, [pc, #68]	; (8002dec <FreqMenu_DrawSweepMenu+0x2bc>)
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d135      	bne.n	8002e18 <FreqMenu_DrawSweepMenu+0x2e8>
 8002dac:	4b13      	ldr	r3, [pc, #76]	; (8002dfc <FreqMenu_DrawSweepMenu+0x2cc>)
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d131      	bne.n	8002e18 <FreqMenu_DrawSweepMenu+0x2e8>
	{
		ILI9341_Draw_Text("SWEEP LOWER:", 5, 160, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR); 	// highlighted
 8002db4:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002db8:	9301      	str	r3, [sp, #4]
 8002dba:	2302      	movs	r3, #2
 8002dbc:	9300      	str	r3, [sp, #0]
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	22a0      	movs	r2, #160	; 0xa0
 8002dc2:	2105      	movs	r1, #5
 8002dc4:	4813      	ldr	r0, [pc, #76]	; (8002e14 <FreqMenu_DrawSweepMenu+0x2e4>)
 8002dc6:	f00a ff15 	bl	800dbf4 <ILI9341_Draw_Text>
 8002dca:	e030      	b.n	8002e2e <FreqMenu_DrawSweepMenu+0x2fe>
 8002dcc:	08012acc 	.word	0x08012acc
 8002dd0:	40000c00 	.word	0x40000c00
 8002dd4:	08012ae0 	.word	0x08012ae0
 8002dd8:	08012af4 	.word	0x08012af4
 8002ddc:	08012b08 	.word	0x08012b08
 8002de0:	08012b1c 	.word	0x08012b1c
 8002de4:	08012b28 	.word	0x08012b28
 8002de8:	08012b2c 	.word	0x08012b2c
 8002dec:	20001ec5 	.word	0x20001ec5
 8002df0:	08012b34 	.word	0x08012b34
 8002df4:	20001ee0 	.word	0x20001ee0
 8002df8:	08012b44 	.word	0x08012b44
 8002dfc:	20001ec4 	.word	0x20001ec4
 8002e00:	08012b50 	.word	0x08012b50
 8002e04:	20000000 	.word	0x20000000
 8002e08:	40013400 	.word	0x40013400
 8002e0c:	42f00000 	.word	0x42f00000
 8002e10:	08012b60 	.word	0x08012b60
 8002e14:	08012b6c 	.word	0x08012b6c
		//ILI9341_Draw_Arrow(ARROW_DOWN, 280, 130, 10, BLACK);
	}
	else
	{
		ILI9341_Draw_Text("SWEEP LOWER:", 5, 160, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002e18:	2300      	movs	r3, #0
 8002e1a:	9301      	str	r3, [sp, #4]
 8002e1c:	2302      	movs	r3, #2
 8002e1e:	9300      	str	r3, [sp, #0]
 8002e20:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002e24:	22a0      	movs	r2, #160	; 0xa0
 8002e26:	2105      	movs	r1, #5
 8002e28:	484d      	ldr	r0, [pc, #308]	; (8002f60 <FreqMenu_DrawSweepMenu+0x430>)
 8002e2a:	f00a fee3 	bl	800dbf4 <ILI9341_Draw_Text>
	}
	char sweep_upper_text[20] = "";
 8002e2e:	2300      	movs	r3, #0
 8002e30:	607b      	str	r3, [r7, #4]
 8002e32:	f107 0308 	add.w	r3, r7, #8
 8002e36:	2200      	movs	r2, #0
 8002e38:	601a      	str	r2, [r3, #0]
 8002e3a:	605a      	str	r2, [r3, #4]
 8002e3c:	609a      	str	r2, [r3, #8]
 8002e3e:	60da      	str	r2, [r3, #12]
	snprintf(sweep_upper_text, sizeof(sweep_upper_text), "%8.2f  Hz", SM_ConvertPeriodToHertz(sweep_upper_bounds_longest_output_arr, OUTPUT_TIMER->PSC) /SM_FSAMP );
 8002e40:	4b48      	ldr	r3, [pc, #288]	; (8002f64 <FreqMenu_DrawSweepMenu+0x434>)
 8002e42:	edd3 7a00 	vldr	s15, [r3]
 8002e46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e4a:	4b47      	ldr	r3, [pc, #284]	; (8002f68 <FreqMenu_DrawSweepMenu+0x438>)
 8002e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	4619      	mov	r1, r3
 8002e52:	ee17 0a90 	vmov	r0, s15
 8002e56:	f002 fcd3 	bl	8005800 <SM_ConvertPeriodToHertz>
 8002e5a:	eeb0 7a40 	vmov.f32	s14, s0
 8002e5e:	eddf 7a43 	vldr	s15, [pc, #268]	; 8002f6c <FreqMenu_DrawSweepMenu+0x43c>
 8002e62:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002e66:	ee16 0a90 	vmov	r0, s13
 8002e6a:	f7fd fb95 	bl	8000598 <__aeabi_f2d>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	460c      	mov	r4, r1
 8002e72:	1d38      	adds	r0, r7, #4
 8002e74:	e9cd 3400 	strd	r3, r4, [sp]
 8002e78:	4a3d      	ldr	r2, [pc, #244]	; (8002f70 <FreqMenu_DrawSweepMenu+0x440>)
 8002e7a:	2114      	movs	r1, #20
 8002e7c:	f00c fa5e 	bl	800f33c <sniprintf>
	ILI9341_Draw_Text(sweep_upper_text, 170, 160, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002e80:	1d38      	adds	r0, r7, #4
 8002e82:	2300      	movs	r3, #0
 8002e84:	9301      	str	r3, [sp, #4]
 8002e86:	2302      	movs	r3, #2
 8002e88:	9300      	str	r3, [sp, #0]
 8002e8a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002e8e:	22a0      	movs	r2, #160	; 0xa0
 8002e90:	21aa      	movs	r1, #170	; 0xaa
 8002e92:	f00a feaf 	bl	800dbf4 <ILI9341_Draw_Text>


	// draw bottom menu button text
	if((SWEEP_TIMER->CR1 & TIM_CR1_CEN) == TIM_CR1_CEN)
 8002e96:	4b37      	ldr	r3, [pc, #220]	; (8002f74 <FreqMenu_DrawSweepMenu+0x444>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0301 	and.w	r3, r3, #1
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d10b      	bne.n	8002eba <FreqMenu_DrawSweepMenu+0x38a>
		ILI9341_Draw_Text("PAUSE ", 6, 213, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8002ea2:	f240 23fd 	movw	r3, #765	; 0x2fd
 8002ea6:	9301      	str	r3, [sp, #4]
 8002ea8:	2302      	movs	r3, #2
 8002eaa:	9300      	str	r3, [sp, #0]
 8002eac:	2300      	movs	r3, #0
 8002eae:	22d5      	movs	r2, #213	; 0xd5
 8002eb0:	2106      	movs	r1, #6
 8002eb2:	4831      	ldr	r0, [pc, #196]	; (8002f78 <FreqMenu_DrawSweepMenu+0x448>)
 8002eb4:	f00a fe9e 	bl	800dbf4 <ILI9341_Draw_Text>
 8002eb8:	e00a      	b.n	8002ed0 <FreqMenu_DrawSweepMenu+0x3a0>
	else
		ILI9341_Draw_Text("RESUME", 5, 213, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8002eba:	f240 23fd 	movw	r3, #765	; 0x2fd
 8002ebe:	9301      	str	r3, [sp, #4]
 8002ec0:	2302      	movs	r3, #2
 8002ec2:	9300      	str	r3, [sp, #0]
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	22d5      	movs	r2, #213	; 0xd5
 8002ec8:	2105      	movs	r1, #5
 8002eca:	482c      	ldr	r0, [pc, #176]	; (8002f7c <FreqMenu_DrawSweepMenu+0x44c>)
 8002ecc:	f00a fe92 	bl	800dbf4 <ILI9341_Draw_Text>

	ILI9341_Draw_Text("SET", 	105,	204, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8002ed0:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8002ed4:	9301      	str	r3, [sp, #4]
 8002ed6:	2302      	movs	r3, #2
 8002ed8:	9300      	str	r3, [sp, #0]
 8002eda:	2300      	movs	r3, #0
 8002edc:	22cc      	movs	r2, #204	; 0xcc
 8002ede:	2169      	movs	r1, #105	; 0x69
 8002ee0:	4827      	ldr	r0, [pc, #156]	; (8002f80 <FreqMenu_DrawSweepMenu+0x450>)
 8002ee2:	f00a fe87 	bl	800dbf4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("MODE",	98, 	222, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8002ee6:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8002eea:	9301      	str	r3, [sp, #4]
 8002eec:	2302      	movs	r3, #2
 8002eee:	9300      	str	r3, [sp, #0]
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	22de      	movs	r2, #222	; 0xde
 8002ef4:	2162      	movs	r1, #98	; 0x62
 8002ef6:	4823      	ldr	r0, [pc, #140]	; (8002f84 <FreqMenu_DrawSweepMenu+0x454>)
 8002ef8:	f00a fe7c 	bl	800dbf4 <ILI9341_Draw_Text>

	ILI9341_Draw_Text("SET", 	183,	204, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8002efc:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002f00:	9301      	str	r3, [sp, #4]
 8002f02:	2302      	movs	r3, #2
 8002f04:	9300      	str	r3, [sp, #0]
 8002f06:	2300      	movs	r3, #0
 8002f08:	22cc      	movs	r2, #204	; 0xcc
 8002f0a:	21b7      	movs	r1, #183	; 0xb7
 8002f0c:	481c      	ldr	r0, [pc, #112]	; (8002f80 <FreqMenu_DrawSweepMenu+0x450>)
 8002f0e:	f00a fe71 	bl	800dbf4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SPEED",	173, 	222, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8002f12:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002f16:	9301      	str	r3, [sp, #4]
 8002f18:	2302      	movs	r3, #2
 8002f1a:	9300      	str	r3, [sp, #0]
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	22de      	movs	r2, #222	; 0xde
 8002f20:	21ad      	movs	r1, #173	; 0xad
 8002f22:	4819      	ldr	r0, [pc, #100]	; (8002f88 <FreqMenu_DrawSweepMenu+0x458>)
 8002f24:	f00a fe66 	bl	800dbf4 <ILI9341_Draw_Text>

	ILI9341_Draw_Text("SET", 	263, 	204, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8002f28:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8002f2c:	9301      	str	r3, [sp, #4]
 8002f2e:	2302      	movs	r3, #2
 8002f30:	9300      	str	r3, [sp, #0]
 8002f32:	2300      	movs	r3, #0
 8002f34:	22cc      	movs	r2, #204	; 0xcc
 8002f36:	f240 1107 	movw	r1, #263	; 0x107
 8002f3a:	4811      	ldr	r0, [pc, #68]	; (8002f80 <FreqMenu_DrawSweepMenu+0x450>)
 8002f3c:	f00a fe5a 	bl	800dbf4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("LIMIT", 	252, 	222, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8002f40:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8002f44:	9301      	str	r3, [sp, #4]
 8002f46:	2302      	movs	r3, #2
 8002f48:	9300      	str	r3, [sp, #0]
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	22de      	movs	r2, #222	; 0xde
 8002f4e:	21fc      	movs	r1, #252	; 0xfc
 8002f50:	480e      	ldr	r0, [pc, #56]	; (8002f8c <FreqMenu_DrawSweepMenu+0x45c>)
 8002f52:	f00a fe4f 	bl	800dbf4 <ILI9341_Draw_Text>
}
 8002f56:	bf00      	nop
 8002f58:	3778      	adds	r7, #120	; 0x78
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bdb0      	pop	{r4, r5, r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	08012b6c 	.word	0x08012b6c
 8002f64:	20000004 	.word	0x20000004
 8002f68:	40013400 	.word	0x40013400
 8002f6c:	42f00000 	.word	0x42f00000
 8002f70:	08012b7c 	.word	0x08012b7c
 8002f74:	40000c00 	.word	0x40000c00
 8002f78:	08012b88 	.word	0x08012b88
 8002f7c:	08012b90 	.word	0x08012b90
 8002f80:	08012b98 	.word	0x08012b98
 8002f84:	08012b9c 	.word	0x08012b9c
 8002f88:	08012ba4 	.word	0x08012ba4
 8002f8c:	08012bac 	.word	0x08012bac

08002f90 <FuncMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawMenu(eFuncMenu_Status pMenu)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	4603      	mov	r3, r0
 8002f98:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8002f9a:	79fb      	ldrb	r3, [r7, #7]
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d007      	beq.n	8002fb0 <FuncMenu_DrawMenu+0x20>
 8002fa0:	2b03      	cmp	r3, #3
 8002fa2:	d009      	beq.n	8002fb8 <FuncMenu_DrawMenu+0x28>
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d000      	beq.n	8002faa <FuncMenu_DrawMenu+0x1a>
		case ENABLE_FUNC_SYNC_MENU:
			FuncMenu_DrawOutputMenu(SYNC_CHANNEL);
			break;

		default:
			break;
 8002fa8:	e00a      	b.n	8002fc0 <FuncMenu_DrawMenu+0x30>
			FuncMenu_DrawMainMenu();
 8002faa:	f000 f80d 	bl	8002fc8 <FuncMenu_DrawMainMenu>
			break;
 8002fae:	e007      	b.n	8002fc0 <FuncMenu_DrawMenu+0x30>
			FuncMenu_DrawOutputMenu(SIGNAL_CHANNEL);
 8002fb0:	2000      	movs	r0, #0
 8002fb2:	f000 f851 	bl	8003058 <FuncMenu_DrawOutputMenu>
			break;
 8002fb6:	e003      	b.n	8002fc0 <FuncMenu_DrawMenu+0x30>
			FuncMenu_DrawOutputMenu(SYNC_CHANNEL);
 8002fb8:	2001      	movs	r0, #1
 8002fba:	f000 f84d 	bl	8003058 <FuncMenu_DrawOutputMenu>
			break;
 8002fbe:	bf00      	nop

	}
}
 8002fc0:	bf00      	nop
 8002fc2:	3708      	adds	r7, #8
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}

08002fc8 <FuncMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawMainMenu()
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FUNC", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8002fce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002fd2:	9301      	str	r3, [sp, #4]
 8002fd4:	2302      	movs	r3, #2
 8002fd6:	9300      	str	r3, [sp, #0]
 8002fd8:	2300      	movs	r3, #0
 8002fda:	220a      	movs	r2, #10
 8002fdc:	210a      	movs	r1, #10
 8002fde:	481a      	ldr	r0, [pc, #104]	; (8003048 <FuncMenu_DrawMainMenu+0x80>)
 8002fe0:	f00a fe08 	bl	800dbf4 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8002fe4:	f7fd ff88 	bl	8000ef8 <DM_DisplayFormattedOutput>

 	// coloured menu btn labels
	ILI9341_Draw_Text("SIGNAL", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8002fe8:	f240 23fd 	movw	r3, #765	; 0x2fd
 8002fec:	9301      	str	r3, [sp, #4]
 8002fee:	2302      	movs	r3, #2
 8002ff0:	9300      	str	r3, [sp, #0]
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	22d2      	movs	r2, #210	; 0xd2
 8002ff6:	2105      	movs	r1, #5
 8002ff8:	4814      	ldr	r0, [pc, #80]	; (800304c <FuncMenu_DrawMainMenu+0x84>)
 8002ffa:	f00a fdfb 	bl	800dbf4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SYNC", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8002ffe:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003002:	9301      	str	r3, [sp, #4]
 8003004:	2302      	movs	r3, #2
 8003006:	9300      	str	r3, [sp, #0]
 8003008:	2300      	movs	r3, #0
 800300a:	22d2      	movs	r2, #210	; 0xd2
 800300c:	2161      	movs	r1, #97	; 0x61
 800300e:	4810      	ldr	r0, [pc, #64]	; (8003050 <FuncMenu_DrawMainMenu+0x88>)
 8003010:	f00a fdf0 	bl	800dbf4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003014:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003018:	9301      	str	r3, [sp, #4]
 800301a:	2302      	movs	r3, #2
 800301c:	9300      	str	r3, [sp, #0]
 800301e:	2300      	movs	r3, #0
 8003020:	22d2      	movs	r2, #210	; 0xd2
 8003022:	21af      	movs	r1, #175	; 0xaf
 8003024:	480b      	ldr	r0, [pc, #44]	; (8003054 <FuncMenu_DrawMainMenu+0x8c>)
 8003026:	f00a fde5 	bl	800dbf4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 800302a:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800302e:	9301      	str	r3, [sp, #4]
 8003030:	2302      	movs	r3, #2
 8003032:	9300      	str	r3, [sp, #0]
 8003034:	2300      	movs	r3, #0
 8003036:	22d2      	movs	r2, #210	; 0xd2
 8003038:	f44f 7182 	mov.w	r1, #260	; 0x104
 800303c:	4805      	ldr	r0, [pc, #20]	; (8003054 <FuncMenu_DrawMainMenu+0x8c>)
 800303e:	f00a fdd9 	bl	800dbf4 <ILI9341_Draw_Text>
}
 8003042:	bf00      	nop
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}
 8003048:	08012bb4 	.word	0x08012bb4
 800304c:	08012bc0 	.word	0x08012bc0
 8003050:	08012bc8 	.word	0x08012bc8
 8003054:	08012bd0 	.word	0x08012bd0

08003058 <FuncMenu_DrawOutputMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawOutputMenu(eOutputChannel_t pOutChan)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b086      	sub	sp, #24
 800305c:	af02      	add	r7, sp, #8
 800305e:	4603      	mov	r3, r0
 8003060:	71fb      	strb	r3, [r7, #7]
	if(SYNC_CHANNEL)
		ILI9341_Draw_Text("OUT->FUNC->SYNC", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003062:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003066:	9301      	str	r3, [sp, #4]
 8003068:	2302      	movs	r3, #2
 800306a:	9300      	str	r3, [sp, #0]
 800306c:	2300      	movs	r3, #0
 800306e:	220a      	movs	r2, #10
 8003070:	210a      	movs	r1, #10
 8003072:	48b9      	ldr	r0, [pc, #740]	; (8003358 <FuncMenu_DrawOutputMenu+0x300>)
 8003074:	f00a fdbe 	bl	800dbf4 <ILI9341_Draw_Text>
	else
		ILI9341_Draw_Text("OUT->FUNC->SIG", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);

	//FunctionProfile_t *func_profileTmp = FuncO_GetSignalFPresetObject();
	FunctionProfile_t *func_profileTmp = SM_GetOutputChannel(pOutChan)->func_profile;
 8003078:	79fb      	ldrb	r3, [r7, #7]
 800307a:	4618      	mov	r0, r3
 800307c:	f002 fb4a 	bl	8005714 <SM_GetOutputChannel>
 8003080:	4603      	mov	r3, r0
 8003082:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8003086:	60fb      	str	r3, [r7, #12]
	if(func_profileTmp)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2b00      	cmp	r3, #0
 800308c:	f000 81b5 	beq.w	80033fa <FuncMenu_DrawOutputMenu+0x3a2>
	{
		switch(func_profileTmp->func)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	2b05      	cmp	r3, #5
 8003096:	f200 81b0 	bhi.w	80033fa <FuncMenu_DrawOutputMenu+0x3a2>
 800309a:	a201      	add	r2, pc, #4	; (adr r2, 80030a0 <FuncMenu_DrawOutputMenu+0x48>)
 800309c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030a0:	080030b9 	.word	0x080030b9
 80030a4:	0800313f 	.word	0x0800313f
 80030a8:	080031c5 	.word	0x080031c5
 80030ac:	0800324b 	.word	0x0800324b
 80030b0:	080032d1 	.word	0x080032d1
 80030b4:	08003375 	.word	0x08003375
		{
			case SINE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80030b8:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80030bc:	9301      	str	r3, [sp, #4]
 80030be:	2302      	movs	r3, #2
 80030c0:	9300      	str	r3, [sp, #0]
 80030c2:	2300      	movs	r3, #0
 80030c4:	2232      	movs	r2, #50	; 0x32
 80030c6:	210a      	movs	r1, #10
 80030c8:	48a4      	ldr	r0, [pc, #656]	; (800335c <FuncMenu_DrawOutputMenu+0x304>)
 80030ca:	f00a fd93 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80030ce:	2300      	movs	r3, #0
 80030d0:	9301      	str	r3, [sp, #4]
 80030d2:	2302      	movs	r3, #2
 80030d4:	9300      	str	r3, [sp, #0]
 80030d6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80030da:	2246      	movs	r2, #70	; 0x46
 80030dc:	210a      	movs	r1, #10
 80030de:	48a0      	ldr	r0, [pc, #640]	; (8003360 <FuncMenu_DrawOutputMenu+0x308>)
 80030e0:	f00a fd88 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80030e4:	2300      	movs	r3, #0
 80030e6:	9301      	str	r3, [sp, #4]
 80030e8:	2302      	movs	r3, #2
 80030ea:	9300      	str	r3, [sp, #0]
 80030ec:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80030f0:	225a      	movs	r2, #90	; 0x5a
 80030f2:	210a      	movs	r1, #10
 80030f4:	489b      	ldr	r0, [pc, #620]	; (8003364 <FuncMenu_DrawOutputMenu+0x30c>)
 80030f6:	f00a fd7d 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80030fa:	2300      	movs	r3, #0
 80030fc:	9301      	str	r3, [sp, #4]
 80030fe:	2302      	movs	r3, #2
 8003100:	9300      	str	r3, [sp, #0]
 8003102:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003106:	226e      	movs	r2, #110	; 0x6e
 8003108:	210a      	movs	r1, #10
 800310a:	4897      	ldr	r0, [pc, #604]	; (8003368 <FuncMenu_DrawOutputMenu+0x310>)
 800310c:	f00a fd72 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003110:	2300      	movs	r3, #0
 8003112:	9301      	str	r3, [sp, #4]
 8003114:	2302      	movs	r3, #2
 8003116:	9300      	str	r3, [sp, #0]
 8003118:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800311c:	2282      	movs	r2, #130	; 0x82
 800311e:	210a      	movs	r1, #10
 8003120:	4892      	ldr	r0, [pc, #584]	; (800336c <FuncMenu_DrawOutputMenu+0x314>)
 8003122:	f00a fd67 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003126:	2300      	movs	r3, #0
 8003128:	9301      	str	r3, [sp, #4]
 800312a:	2302      	movs	r3, #2
 800312c:	9300      	str	r3, [sp, #0]
 800312e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003132:	2296      	movs	r2, #150	; 0x96
 8003134:	210a      	movs	r1, #10
 8003136:	488e      	ldr	r0, [pc, #568]	; (8003370 <FuncMenu_DrawOutputMenu+0x318>)
 8003138:	f00a fd5c 	bl	800dbf4 <ILI9341_Draw_Text>
				break;
 800313c:	e15d      	b.n	80033fa <FuncMenu_DrawOutputMenu+0x3a2>
			case SQUARE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800313e:	2300      	movs	r3, #0
 8003140:	9301      	str	r3, [sp, #4]
 8003142:	2302      	movs	r3, #2
 8003144:	9300      	str	r3, [sp, #0]
 8003146:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800314a:	2232      	movs	r2, #50	; 0x32
 800314c:	210a      	movs	r1, #10
 800314e:	4883      	ldr	r0, [pc, #524]	; (800335c <FuncMenu_DrawOutputMenu+0x304>)
 8003150:	f00a fd50 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003154:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003158:	9301      	str	r3, [sp, #4]
 800315a:	2302      	movs	r3, #2
 800315c:	9300      	str	r3, [sp, #0]
 800315e:	2300      	movs	r3, #0
 8003160:	2246      	movs	r2, #70	; 0x46
 8003162:	210a      	movs	r1, #10
 8003164:	487e      	ldr	r0, [pc, #504]	; (8003360 <FuncMenu_DrawOutputMenu+0x308>)
 8003166:	f00a fd45 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800316a:	2300      	movs	r3, #0
 800316c:	9301      	str	r3, [sp, #4]
 800316e:	2302      	movs	r3, #2
 8003170:	9300      	str	r3, [sp, #0]
 8003172:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003176:	225a      	movs	r2, #90	; 0x5a
 8003178:	210a      	movs	r1, #10
 800317a:	487a      	ldr	r0, [pc, #488]	; (8003364 <FuncMenu_DrawOutputMenu+0x30c>)
 800317c:	f00a fd3a 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003180:	2300      	movs	r3, #0
 8003182:	9301      	str	r3, [sp, #4]
 8003184:	2302      	movs	r3, #2
 8003186:	9300      	str	r3, [sp, #0]
 8003188:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800318c:	226e      	movs	r2, #110	; 0x6e
 800318e:	210a      	movs	r1, #10
 8003190:	4875      	ldr	r0, [pc, #468]	; (8003368 <FuncMenu_DrawOutputMenu+0x310>)
 8003192:	f00a fd2f 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003196:	2300      	movs	r3, #0
 8003198:	9301      	str	r3, [sp, #4]
 800319a:	2302      	movs	r3, #2
 800319c:	9300      	str	r3, [sp, #0]
 800319e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80031a2:	2282      	movs	r2, #130	; 0x82
 80031a4:	210a      	movs	r1, #10
 80031a6:	4871      	ldr	r0, [pc, #452]	; (800336c <FuncMenu_DrawOutputMenu+0x314>)
 80031a8:	f00a fd24 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80031ac:	2300      	movs	r3, #0
 80031ae:	9301      	str	r3, [sp, #4]
 80031b0:	2302      	movs	r3, #2
 80031b2:	9300      	str	r3, [sp, #0]
 80031b4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80031b8:	2296      	movs	r2, #150	; 0x96
 80031ba:	210a      	movs	r1, #10
 80031bc:	486c      	ldr	r0, [pc, #432]	; (8003370 <FuncMenu_DrawOutputMenu+0x318>)
 80031be:	f00a fd19 	bl	800dbf4 <ILI9341_Draw_Text>
				break;
 80031c2:	e11a      	b.n	80033fa <FuncMenu_DrawOutputMenu+0x3a2>
			case SAW_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80031c4:	2300      	movs	r3, #0
 80031c6:	9301      	str	r3, [sp, #4]
 80031c8:	2302      	movs	r3, #2
 80031ca:	9300      	str	r3, [sp, #0]
 80031cc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80031d0:	2232      	movs	r2, #50	; 0x32
 80031d2:	210a      	movs	r1, #10
 80031d4:	4861      	ldr	r0, [pc, #388]	; (800335c <FuncMenu_DrawOutputMenu+0x304>)
 80031d6:	f00a fd0d 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80031da:	2300      	movs	r3, #0
 80031dc:	9301      	str	r3, [sp, #4]
 80031de:	2302      	movs	r3, #2
 80031e0:	9300      	str	r3, [sp, #0]
 80031e2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80031e6:	2246      	movs	r2, #70	; 0x46
 80031e8:	210a      	movs	r1, #10
 80031ea:	485d      	ldr	r0, [pc, #372]	; (8003360 <FuncMenu_DrawOutputMenu+0x308>)
 80031ec:	f00a fd02 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80031f0:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80031f4:	9301      	str	r3, [sp, #4]
 80031f6:	2302      	movs	r3, #2
 80031f8:	9300      	str	r3, [sp, #0]
 80031fa:	2300      	movs	r3, #0
 80031fc:	225a      	movs	r2, #90	; 0x5a
 80031fe:	210a      	movs	r1, #10
 8003200:	4858      	ldr	r0, [pc, #352]	; (8003364 <FuncMenu_DrawOutputMenu+0x30c>)
 8003202:	f00a fcf7 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003206:	2300      	movs	r3, #0
 8003208:	9301      	str	r3, [sp, #4]
 800320a:	2302      	movs	r3, #2
 800320c:	9300      	str	r3, [sp, #0]
 800320e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003212:	226e      	movs	r2, #110	; 0x6e
 8003214:	210a      	movs	r1, #10
 8003216:	4854      	ldr	r0, [pc, #336]	; (8003368 <FuncMenu_DrawOutputMenu+0x310>)
 8003218:	f00a fcec 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800321c:	2300      	movs	r3, #0
 800321e:	9301      	str	r3, [sp, #4]
 8003220:	2302      	movs	r3, #2
 8003222:	9300      	str	r3, [sp, #0]
 8003224:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003228:	2282      	movs	r2, #130	; 0x82
 800322a:	210a      	movs	r1, #10
 800322c:	484f      	ldr	r0, [pc, #316]	; (800336c <FuncMenu_DrawOutputMenu+0x314>)
 800322e:	f00a fce1 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003232:	2300      	movs	r3, #0
 8003234:	9301      	str	r3, [sp, #4]
 8003236:	2302      	movs	r3, #2
 8003238:	9300      	str	r3, [sp, #0]
 800323a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800323e:	2296      	movs	r2, #150	; 0x96
 8003240:	210a      	movs	r1, #10
 8003242:	484b      	ldr	r0, [pc, #300]	; (8003370 <FuncMenu_DrawOutputMenu+0x318>)
 8003244:	f00a fcd6 	bl	800dbf4 <ILI9341_Draw_Text>
				break;
 8003248:	e0d7      	b.n	80033fa <FuncMenu_DrawOutputMenu+0x3a2>
			case REV_SAW_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800324a:	2300      	movs	r3, #0
 800324c:	9301      	str	r3, [sp, #4]
 800324e:	2302      	movs	r3, #2
 8003250:	9300      	str	r3, [sp, #0]
 8003252:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003256:	2232      	movs	r2, #50	; 0x32
 8003258:	210a      	movs	r1, #10
 800325a:	4840      	ldr	r0, [pc, #256]	; (800335c <FuncMenu_DrawOutputMenu+0x304>)
 800325c:	f00a fcca 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003260:	2300      	movs	r3, #0
 8003262:	9301      	str	r3, [sp, #4]
 8003264:	2302      	movs	r3, #2
 8003266:	9300      	str	r3, [sp, #0]
 8003268:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800326c:	2246      	movs	r2, #70	; 0x46
 800326e:	210a      	movs	r1, #10
 8003270:	483b      	ldr	r0, [pc, #236]	; (8003360 <FuncMenu_DrawOutputMenu+0x308>)
 8003272:	f00a fcbf 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003276:	2300      	movs	r3, #0
 8003278:	9301      	str	r3, [sp, #4]
 800327a:	2302      	movs	r3, #2
 800327c:	9300      	str	r3, [sp, #0]
 800327e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003282:	225a      	movs	r2, #90	; 0x5a
 8003284:	210a      	movs	r1, #10
 8003286:	4837      	ldr	r0, [pc, #220]	; (8003364 <FuncMenu_DrawOutputMenu+0x30c>)
 8003288:	f00a fcb4 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 800328c:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003290:	9301      	str	r3, [sp, #4]
 8003292:	2302      	movs	r3, #2
 8003294:	9300      	str	r3, [sp, #0]
 8003296:	2300      	movs	r3, #0
 8003298:	226e      	movs	r2, #110	; 0x6e
 800329a:	210a      	movs	r1, #10
 800329c:	4832      	ldr	r0, [pc, #200]	; (8003368 <FuncMenu_DrawOutputMenu+0x310>)
 800329e:	f00a fca9 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80032a2:	2300      	movs	r3, #0
 80032a4:	9301      	str	r3, [sp, #4]
 80032a6:	2302      	movs	r3, #2
 80032a8:	9300      	str	r3, [sp, #0]
 80032aa:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80032ae:	2282      	movs	r2, #130	; 0x82
 80032b0:	210a      	movs	r1, #10
 80032b2:	482e      	ldr	r0, [pc, #184]	; (800336c <FuncMenu_DrawOutputMenu+0x314>)
 80032b4:	f00a fc9e 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80032b8:	2300      	movs	r3, #0
 80032ba:	9301      	str	r3, [sp, #4]
 80032bc:	2302      	movs	r3, #2
 80032be:	9300      	str	r3, [sp, #0]
 80032c0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80032c4:	2296      	movs	r2, #150	; 0x96
 80032c6:	210a      	movs	r1, #10
 80032c8:	4829      	ldr	r0, [pc, #164]	; (8003370 <FuncMenu_DrawOutputMenu+0x318>)
 80032ca:	f00a fc93 	bl	800dbf4 <ILI9341_Draw_Text>
				break;
 80032ce:	e094      	b.n	80033fa <FuncMenu_DrawOutputMenu+0x3a2>
			case TRIANGLE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80032d0:	2300      	movs	r3, #0
 80032d2:	9301      	str	r3, [sp, #4]
 80032d4:	2302      	movs	r3, #2
 80032d6:	9300      	str	r3, [sp, #0]
 80032d8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80032dc:	2232      	movs	r2, #50	; 0x32
 80032de:	210a      	movs	r1, #10
 80032e0:	481e      	ldr	r0, [pc, #120]	; (800335c <FuncMenu_DrawOutputMenu+0x304>)
 80032e2:	f00a fc87 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80032e6:	2300      	movs	r3, #0
 80032e8:	9301      	str	r3, [sp, #4]
 80032ea:	2302      	movs	r3, #2
 80032ec:	9300      	str	r3, [sp, #0]
 80032ee:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80032f2:	2246      	movs	r2, #70	; 0x46
 80032f4:	210a      	movs	r1, #10
 80032f6:	481a      	ldr	r0, [pc, #104]	; (8003360 <FuncMenu_DrawOutputMenu+0x308>)
 80032f8:	f00a fc7c 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80032fc:	2300      	movs	r3, #0
 80032fe:	9301      	str	r3, [sp, #4]
 8003300:	2302      	movs	r3, #2
 8003302:	9300      	str	r3, [sp, #0]
 8003304:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003308:	225a      	movs	r2, #90	; 0x5a
 800330a:	210a      	movs	r1, #10
 800330c:	4815      	ldr	r0, [pc, #84]	; (8003364 <FuncMenu_DrawOutputMenu+0x30c>)
 800330e:	f00a fc71 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003312:	2300      	movs	r3, #0
 8003314:	9301      	str	r3, [sp, #4]
 8003316:	2302      	movs	r3, #2
 8003318:	9300      	str	r3, [sp, #0]
 800331a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800331e:	226e      	movs	r2, #110	; 0x6e
 8003320:	210a      	movs	r1, #10
 8003322:	4811      	ldr	r0, [pc, #68]	; (8003368 <FuncMenu_DrawOutputMenu+0x310>)
 8003324:	f00a fc66 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003328:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 800332c:	9301      	str	r3, [sp, #4]
 800332e:	2302      	movs	r3, #2
 8003330:	9300      	str	r3, [sp, #0]
 8003332:	2300      	movs	r3, #0
 8003334:	2282      	movs	r2, #130	; 0x82
 8003336:	210a      	movs	r1, #10
 8003338:	480c      	ldr	r0, [pc, #48]	; (800336c <FuncMenu_DrawOutputMenu+0x314>)
 800333a:	f00a fc5b 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800333e:	2300      	movs	r3, #0
 8003340:	9301      	str	r3, [sp, #4]
 8003342:	2302      	movs	r3, #2
 8003344:	9300      	str	r3, [sp, #0]
 8003346:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800334a:	2296      	movs	r2, #150	; 0x96
 800334c:	210a      	movs	r1, #10
 800334e:	4808      	ldr	r0, [pc, #32]	; (8003370 <FuncMenu_DrawOutputMenu+0x318>)
 8003350:	f00a fc50 	bl	800dbf4 <ILI9341_Draw_Text>
				break;
 8003354:	e051      	b.n	80033fa <FuncMenu_DrawOutputMenu+0x3a2>
 8003356:	bf00      	nop
 8003358:	08012bd8 	.word	0x08012bd8
 800335c:	08012be8 	.word	0x08012be8
 8003360:	08012bf0 	.word	0x08012bf0
 8003364:	08012bfc 	.word	0x08012bfc
 8003368:	08012c04 	.word	0x08012c04
 800336c:	08012c10 	.word	0x08012c10
 8003370:	08012c1c 	.word	0x08012c1c
			case IMPULSE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003374:	2300      	movs	r3, #0
 8003376:	9301      	str	r3, [sp, #4]
 8003378:	2302      	movs	r3, #2
 800337a:	9300      	str	r3, [sp, #0]
 800337c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003380:	2232      	movs	r2, #50	; 0x32
 8003382:	210a      	movs	r1, #10
 8003384:	481f      	ldr	r0, [pc, #124]	; (8003404 <FuncMenu_DrawOutputMenu+0x3ac>)
 8003386:	f00a fc35 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800338a:	2300      	movs	r3, #0
 800338c:	9301      	str	r3, [sp, #4]
 800338e:	2302      	movs	r3, #2
 8003390:	9300      	str	r3, [sp, #0]
 8003392:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003396:	2246      	movs	r2, #70	; 0x46
 8003398:	210a      	movs	r1, #10
 800339a:	481b      	ldr	r0, [pc, #108]	; (8003408 <FuncMenu_DrawOutputMenu+0x3b0>)
 800339c:	f00a fc2a 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80033a0:	2300      	movs	r3, #0
 80033a2:	9301      	str	r3, [sp, #4]
 80033a4:	2302      	movs	r3, #2
 80033a6:	9300      	str	r3, [sp, #0]
 80033a8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80033ac:	225a      	movs	r2, #90	; 0x5a
 80033ae:	210a      	movs	r1, #10
 80033b0:	4816      	ldr	r0, [pc, #88]	; (800340c <FuncMenu_DrawOutputMenu+0x3b4>)
 80033b2:	f00a fc1f 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80033b6:	2300      	movs	r3, #0
 80033b8:	9301      	str	r3, [sp, #4]
 80033ba:	2302      	movs	r3, #2
 80033bc:	9300      	str	r3, [sp, #0]
 80033be:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80033c2:	226e      	movs	r2, #110	; 0x6e
 80033c4:	210a      	movs	r1, #10
 80033c6:	4812      	ldr	r0, [pc, #72]	; (8003410 <FuncMenu_DrawOutputMenu+0x3b8>)
 80033c8:	f00a fc14 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80033cc:	2300      	movs	r3, #0
 80033ce:	9301      	str	r3, [sp, #4]
 80033d0:	2302      	movs	r3, #2
 80033d2:	9300      	str	r3, [sp, #0]
 80033d4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80033d8:	2282      	movs	r2, #130	; 0x82
 80033da:	210a      	movs	r1, #10
 80033dc:	480d      	ldr	r0, [pc, #52]	; (8003414 <FuncMenu_DrawOutputMenu+0x3bc>)
 80033de:	f00a fc09 	bl	800dbf4 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80033e2:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80033e6:	9301      	str	r3, [sp, #4]
 80033e8:	2302      	movs	r3, #2
 80033ea:	9300      	str	r3, [sp, #0]
 80033ec:	2300      	movs	r3, #0
 80033ee:	2296      	movs	r2, #150	; 0x96
 80033f0:	210a      	movs	r1, #10
 80033f2:	4809      	ldr	r0, [pc, #36]	; (8003418 <FuncMenu_DrawOutputMenu+0x3c0>)
 80033f4:	f00a fbfe 	bl	800dbf4 <ILI9341_Draw_Text>
				break;
 80033f8:	bf00      	nop
		}
		*/
	}


}
 80033fa:	bf00      	nop
 80033fc:	3710      	adds	r7, #16
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	08012be8 	.word	0x08012be8
 8003408:	08012bf0 	.word	0x08012bf0
 800340c:	08012bfc 	.word	0x08012bfc
 8003410:	08012c04 	.word	0x08012c04
 8003414:	08012c10 	.word	0x08012c10
 8003418:	08012c1c 	.word	0x08012c1c

0800341c <GainMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawMenu(eGainMenu_Status pMenu)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b082      	sub	sp, #8
 8003420:	af00      	add	r7, sp, #0
 8003422:	4603      	mov	r3, r0
 8003424:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8003426:	79fb      	ldrb	r3, [r7, #7]
 8003428:	2b02      	cmp	r3, #2
 800342a:	d007      	beq.n	800343c <GainMenu_DrawMenu+0x20>
 800342c:	2b03      	cmp	r3, #3
 800342e:	d008      	beq.n	8003442 <GainMenu_DrawMenu+0x26>
 8003430:	2b01      	cmp	r3, #1
 8003432:	d000      	beq.n	8003436 <GainMenu_DrawMenu+0x1a>
		case ENABLE_GAIN_SYNC_MENU:
			GainMenu_DrawSyncMenu();
			break;

		default:
			break;
 8003434:	e008      	b.n	8003448 <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawMainMenu();
 8003436:	f000 f80b 	bl	8003450 <GainMenu_DrawMainMenu>
			break;
 800343a:	e005      	b.n	8003448 <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawSignalMenu();
 800343c:	f000 f850 	bl	80034e0 <GainMenu_DrawSignalMenu>
			break;
 8003440:	e002      	b.n	8003448 <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawSyncMenu();
 8003442:	f000 f863 	bl	800350c <GainMenu_DrawSyncMenu>
			break;
 8003446:	bf00      	nop

	}
}
 8003448:	bf00      	nop
 800344a:	3708      	adds	r7, #8
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}

08003450 <GainMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawMainMenu()
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b082      	sub	sp, #8
 8003454:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("OUT->GAIN", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003456:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800345a:	9301      	str	r3, [sp, #4]
 800345c:	2302      	movs	r3, #2
 800345e:	9300      	str	r3, [sp, #0]
 8003460:	2300      	movs	r3, #0
 8003462:	220a      	movs	r2, #10
 8003464:	210a      	movs	r1, #10
 8003466:	481a      	ldr	r0, [pc, #104]	; (80034d0 <GainMenu_DrawMainMenu+0x80>)
 8003468:	f00a fbc4 	bl	800dbf4 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 800346c:	f7fd fd44 	bl	8000ef8 <DM_DisplayFormattedOutput>

	// coloured menu btn labels
	ILI9341_Draw_Text("SIGNAL", 5, 	 210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003470:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003474:	9301      	str	r3, [sp, #4]
 8003476:	2302      	movs	r3, #2
 8003478:	9300      	str	r3, [sp, #0]
 800347a:	2300      	movs	r3, #0
 800347c:	22d2      	movs	r2, #210	; 0xd2
 800347e:	2105      	movs	r1, #5
 8003480:	4814      	ldr	r0, [pc, #80]	; (80034d4 <GainMenu_DrawMainMenu+0x84>)
 8003482:	f00a fbb7 	bl	800dbf4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SYNC",	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003486:	f241 43a2 	movw	r3, #5282	; 0x14a2
 800348a:	9301      	str	r3, [sp, #4]
 800348c:	2302      	movs	r3, #2
 800348e:	9300      	str	r3, [sp, #0]
 8003490:	2300      	movs	r3, #0
 8003492:	22d2      	movs	r2, #210	; 0xd2
 8003494:	2161      	movs	r1, #97	; 0x61
 8003496:	4810      	ldr	r0, [pc, #64]	; (80034d8 <GainMenu_DrawMainMenu+0x88>)
 8003498:	f00a fbac 	bl	800dbf4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 800349c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80034a0:	9301      	str	r3, [sp, #4]
 80034a2:	2302      	movs	r3, #2
 80034a4:	9300      	str	r3, [sp, #0]
 80034a6:	2300      	movs	r3, #0
 80034a8:	22d2      	movs	r2, #210	; 0xd2
 80034aa:	21af      	movs	r1, #175	; 0xaf
 80034ac:	480b      	ldr	r0, [pc, #44]	; (80034dc <GainMenu_DrawMainMenu+0x8c>)
 80034ae:	f00a fba1 	bl	800dbf4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 80034b2:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80034b6:	9301      	str	r3, [sp, #4]
 80034b8:	2302      	movs	r3, #2
 80034ba:	9300      	str	r3, [sp, #0]
 80034bc:	2300      	movs	r3, #0
 80034be:	22d2      	movs	r2, #210	; 0xd2
 80034c0:	f44f 7182 	mov.w	r1, #260	; 0x104
 80034c4:	4805      	ldr	r0, [pc, #20]	; (80034dc <GainMenu_DrawMainMenu+0x8c>)
 80034c6:	f00a fb95 	bl	800dbf4 <ILI9341_Draw_Text>
}
 80034ca:	bf00      	nop
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	08012c24 	.word	0x08012c24
 80034d4:	08012c30 	.word	0x08012c30
 80034d8:	08012c38 	.word	0x08012c38
 80034dc:	08012c40 	.word	0x08012c40

080034e0 <GainMenu_DrawSignalMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawSignalMenu()
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b082      	sub	sp, #8
 80034e4:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->GAIN->SIG", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 80034e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80034ea:	9301      	str	r3, [sp, #4]
 80034ec:	2302      	movs	r3, #2
 80034ee:	9300      	str	r3, [sp, #0]
 80034f0:	2300      	movs	r3, #0
 80034f2:	220a      	movs	r2, #10
 80034f4:	210a      	movs	r1, #10
 80034f6:	4804      	ldr	r0, [pc, #16]	; (8003508 <GainMenu_DrawSignalMenu+0x28>)
 80034f8:	f00a fb7c 	bl	800dbf4 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 80034fc:	f7fd fcfc 	bl	8000ef8 <DM_DisplayFormattedOutput>
}
 8003500:	bf00      	nop
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	08012c48 	.word	0x08012c48

0800350c <GainMenu_DrawSyncMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawSyncMenu()
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->GAIN->SYNC", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003512:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003516:	9301      	str	r3, [sp, #4]
 8003518:	2302      	movs	r3, #2
 800351a:	9300      	str	r3, [sp, #0]
 800351c:	2300      	movs	r3, #0
 800351e:	220a      	movs	r2, #10
 8003520:	210a      	movs	r1, #10
 8003522:	4804      	ldr	r0, [pc, #16]	; (8003534 <GainMenu_DrawSyncMenu+0x28>)
 8003524:	f00a fb66 	bl	800dbf4 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003528:	f7fd fce6 	bl	8000ef8 <DM_DisplayFormattedOutput>
}
 800352c:	bf00      	nop
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	08012c58 	.word	0x08012c58

08003538 <ToplevelMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawMenu(eToplevelMenu_Status pMenu)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
 800353e:	4603      	mov	r3, r0
 8003540:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8003542:	79fb      	ldrb	r3, [r7, #7]
 8003544:	2b02      	cmp	r3, #2
 8003546:	d007      	beq.n	8003558 <ToplevelMenu_DrawMenu+0x20>
 8003548:	2b03      	cmp	r3, #3
 800354a:	d008      	beq.n	800355e <ToplevelMenu_DrawMenu+0x26>
 800354c:	2b01      	cmp	r3, #1
 800354e:	d000      	beq.n	8003552 <ToplevelMenu_DrawMenu+0x1a>
		case ENABLE_TOPLEVEL_INPUT_MENU:
			ToplevelMenu_DrawInputMenu();
			break;

		default:
			break;
 8003550:	e008      	b.n	8003564 <ToplevelMenu_DrawMenu+0x2c>
			ToplevelMenu_DrawMainMenu();
 8003552:	f000 f80b 	bl	800356c <ToplevelMenu_DrawMainMenu>
			break;
 8003556:	e005      	b.n	8003564 <ToplevelMenu_DrawMenu+0x2c>
			ToplevelMenu_DrawOutputMenu();
 8003558:	f000 f848 	bl	80035ec <ToplevelMenu_DrawOutputMenu>
			break;
 800355c:	e002      	b.n	8003564 <ToplevelMenu_DrawMenu+0x2c>
			ToplevelMenu_DrawInputMenu();
 800355e:	f000 f88f 	bl	8003680 <ToplevelMenu_DrawInputMenu>
			break;
 8003562:	bf00      	nop

	}
}
 8003564:	bf00      	nop
 8003566:	3708      	adds	r7, #8
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}

0800356c <ToplevelMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawMainMenu()
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af02      	add	r7, sp, #8
	// Top Level screen
	#ifdef SWV_DEBUG_ENABLED
		  printf("Drawing Main screen\n");
 8003572:	481a      	ldr	r0, [pc, #104]	; (80035dc <ToplevelMenu_DrawMainMenu+0x70>)
 8003574:	f00b feda 	bl	800f32c <puts>
	#endif

	// Main screen
	//ILI9341_Draw_Text("SIGNAL GENERATOR", 	10, 10, WHITE, 2, BLACK);

	DM_DisplayFormattedOutput();
 8003578:	f7fd fcbe 	bl	8000ef8 <DM_DisplayFormattedOutput>

	ILI9341_Draw_Text("OUTPUT", 6, 210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 800357c:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003580:	9301      	str	r3, [sp, #4]
 8003582:	2302      	movs	r3, #2
 8003584:	9300      	str	r3, [sp, #0]
 8003586:	2300      	movs	r3, #0
 8003588:	22d2      	movs	r2, #210	; 0xd2
 800358a:	2106      	movs	r1, #6
 800358c:	4814      	ldr	r0, [pc, #80]	; (80035e0 <ToplevelMenu_DrawMainMenu+0x74>)
 800358e:	f00a fb31 	bl	800dbf4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("INPUT", 93, 210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003592:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003596:	9301      	str	r3, [sp, #4]
 8003598:	2302      	movs	r3, #2
 800359a:	9300      	str	r3, [sp, #0]
 800359c:	2300      	movs	r3, #0
 800359e:	22d2      	movs	r2, #210	; 0xd2
 80035a0:	215d      	movs	r1, #93	; 0x5d
 80035a2:	4810      	ldr	r0, [pc, #64]	; (80035e4 <ToplevelMenu_DrawMainMenu+0x78>)
 80035a4:	f00a fb26 	bl	800dbf4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80035a8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80035ac:	9301      	str	r3, [sp, #4]
 80035ae:	2302      	movs	r3, #2
 80035b0:	9300      	str	r3, [sp, #0]
 80035b2:	2300      	movs	r3, #0
 80035b4:	22d2      	movs	r2, #210	; 0xd2
 80035b6:	21af      	movs	r1, #175	; 0xaf
 80035b8:	480b      	ldr	r0, [pc, #44]	; (80035e8 <ToplevelMenu_DrawMainMenu+0x7c>)
 80035ba:	f00a fb1b 	bl	800dbf4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 80035be:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80035c2:	9301      	str	r3, [sp, #4]
 80035c4:	2302      	movs	r3, #2
 80035c6:	9300      	str	r3, [sp, #0]
 80035c8:	2300      	movs	r3, #0
 80035ca:	22d2      	movs	r2, #210	; 0xd2
 80035cc:	f44f 7182 	mov.w	r1, #260	; 0x104
 80035d0:	4805      	ldr	r0, [pc, #20]	; (80035e8 <ToplevelMenu_DrawMainMenu+0x7c>)
 80035d2:	f00a fb0f 	bl	800dbf4 <ILI9341_Draw_Text>


}
 80035d6:	bf00      	nop
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	08012c68 	.word	0x08012c68
 80035e0:	08012c7c 	.word	0x08012c7c
 80035e4:	08012c84 	.word	0x08012c84
 80035e8:	08012c8c 	.word	0x08012c8c

080035ec <ToplevelMenu_DrawOutputMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawOutputMenu()
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 80035f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80035f6:	9301      	str	r3, [sp, #4]
 80035f8:	2302      	movs	r3, #2
 80035fa:	9300      	str	r3, [sp, #0]
 80035fc:	2300      	movs	r3, #0
 80035fe:	220a      	movs	r2, #10
 8003600:	210a      	movs	r1, #10
 8003602:	481a      	ldr	r0, [pc, #104]	; (800366c <ToplevelMenu_DrawOutputMenu+0x80>)
 8003604:	f00a faf6 	bl	800dbf4 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003608:	f7fd fc76 	bl	8000ef8 <DM_DisplayFormattedOutput>

	ILI9341_Draw_Text("FUNC", 13,  210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 800360c:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003610:	9301      	str	r3, [sp, #4]
 8003612:	2302      	movs	r3, #2
 8003614:	9300      	str	r3, [sp, #0]
 8003616:	2300      	movs	r3, #0
 8003618:	22d2      	movs	r2, #210	; 0xd2
 800361a:	210d      	movs	r1, #13
 800361c:	4814      	ldr	r0, [pc, #80]	; (8003670 <ToplevelMenu_DrawOutputMenu+0x84>)
 800361e:	f00a fae9 	bl	800dbf4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("FREQ", 99,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003622:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003626:	9301      	str	r3, [sp, #4]
 8003628:	2302      	movs	r3, #2
 800362a:	9300      	str	r3, [sp, #0]
 800362c:	2300      	movs	r3, #0
 800362e:	22d2      	movs	r2, #210	; 0xd2
 8003630:	2163      	movs	r1, #99	; 0x63
 8003632:	4810      	ldr	r0, [pc, #64]	; (8003674 <ToplevelMenu_DrawOutputMenu+0x88>)
 8003634:	f00a fade 	bl	800dbf4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("GAIN", 176, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003638:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800363c:	9301      	str	r3, [sp, #4]
 800363e:	2302      	movs	r3, #2
 8003640:	9300      	str	r3, [sp, #0]
 8003642:	2300      	movs	r3, #0
 8003644:	22d2      	movs	r2, #210	; 0xd2
 8003646:	21b0      	movs	r1, #176	; 0xb0
 8003648:	480b      	ldr	r0, [pc, #44]	; (8003678 <ToplevelMenu_DrawOutputMenu+0x8c>)
 800364a:	f00a fad3 	bl	800dbf4 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("OFFSET", 245, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 800364e:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003652:	9301      	str	r3, [sp, #4]
 8003654:	2302      	movs	r3, #2
 8003656:	9300      	str	r3, [sp, #0]
 8003658:	2300      	movs	r3, #0
 800365a:	22d2      	movs	r2, #210	; 0xd2
 800365c:	21f5      	movs	r1, #245	; 0xf5
 800365e:	4807      	ldr	r0, [pc, #28]	; (800367c <ToplevelMenu_DrawOutputMenu+0x90>)
 8003660:	f00a fac8 	bl	800dbf4 <ILI9341_Draw_Text>
}
 8003664:	bf00      	nop
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	08012c94 	.word	0x08012c94
 8003670:	08012c9c 	.word	0x08012c9c
 8003674:	08012ca4 	.word	0x08012ca4
 8003678:	08012cac 	.word	0x08012cac
 800367c:	08012cb4 	.word	0x08012cb4

08003680 <ToplevelMenu_DrawInputMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawInputMenu()
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("IN->", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003686:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800368a:	9301      	str	r3, [sp, #4]
 800368c:	2302      	movs	r3, #2
 800368e:	9300      	str	r3, [sp, #0]
 8003690:	2300      	movs	r3, #0
 8003692:	220a      	movs	r2, #10
 8003694:	210a      	movs	r1, #10
 8003696:	4804      	ldr	r0, [pc, #16]	; (80036a8 <ToplevelMenu_DrawInputMenu+0x28>)
 8003698:	f00a faac 	bl	800dbf4 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 800369c:	f7fd fc2c 	bl	8000ef8 <DM_DisplayFormattedOutput>
}
 80036a0:	bf00      	nop
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	08012cbc 	.word	0x08012cbc

080036ac <BiasMenu_getStatus>:
#include <stdio.h>

eBiasMenu_Status eNextBiasMenuStatus =	DISABLE_BIAS_MENU;

eBiasMenu_Status BiasMenu_getStatus()
{
 80036ac:	b480      	push	{r7}
 80036ae:	af00      	add	r7, sp, #0
	return eNextBiasMenuStatus;
 80036b0:	4b03      	ldr	r3, [pc, #12]	; (80036c0 <BiasMenu_getStatus+0x14>)
 80036b2:	781b      	ldrb	r3, [r3, #0]
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr
 80036be:	bf00      	nop
 80036c0:	20001ec1 	.word	0x20001ec1

080036c4 <BiasMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuEntryHandler()
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("BiasMenuEntryHandler Event captured\n");
 80036c8:	480b      	ldr	r0, [pc, #44]	; (80036f8 <BiasMenuEntryHandler+0x34>)
 80036ca:	f00b fe2f 	bl	800f32c <puts>
#endif

	DM_RefreshScreen();
 80036ce:	f7fd feb1 	bl	8001434 <DM_RefreshScreen>

	eNextBiasMenuStatus = ENABLE_BIAS_MENU;
 80036d2:	4b0a      	ldr	r3, [pc, #40]	; (80036fc <BiasMenuEntryHandler+0x38>)
 80036d4:	2201      	movs	r2, #1
 80036d6:	701a      	strb	r2, [r3, #0]

	ENCODER_TIMER->ARR = BIAS_MAX;
 80036d8:	4b09      	ldr	r3, [pc, #36]	; (8003700 <BiasMenuEntryHandler+0x3c>)
 80036da:	f44f 7248 	mov.w	r2, #800	; 0x320
 80036de:	62da      	str	r2, [r3, #44]	; 0x2c
	ENCODER_TIMER->CNT = BO_GetDcBiasEncoderValue();
 80036e0:	f001 f9f0 	bl	8004ac4 <BO_GetDcBiasEncoderValue>
 80036e4:	4603      	mov	r3, r0
 80036e6:	461a      	mov	r2, r3
 80036e8:	4b05      	ldr	r3, [pc, #20]	; (8003700 <BiasMenuEntryHandler+0x3c>)
 80036ea:	625a      	str	r2, [r3, #36]	; 0x24

	eNewEvent = evIdle;
 80036ec:	4b05      	ldr	r3, [pc, #20]	; (8003704 <BiasMenuEntryHandler+0x40>)
 80036ee:	2200      	movs	r2, #0
 80036f0:	701a      	strb	r2, [r3, #0]
	return Bias_Menu_State;
 80036f2:	230e      	movs	r3, #14
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	08012cc4 	.word	0x08012cc4
 80036fc:	20001ec1 	.word	0x20001ec1
 8003700:	40012c00 	.word	0x40012c00
 8003704:	20001ec3 	.word	0x20001ec3

08003708 <BiasMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuInputHandler()
{
 8003708:	b580      	push	{r7, lr}
 800370a:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("BiasMenuInputHandler Event captured\n");
 800370c:	4807      	ldr	r0, [pc, #28]	; (800372c <BiasMenuInputHandler+0x24>)
 800370e:	f00b fe0d 	bl	800f32c <puts>
#endif

	BO_ModifyOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 8003712:	2001      	movs	r0, #1
 8003714:	f002 f814 	bl	8005740 <SM_GetEncoderValue>
 8003718:	4603      	mov	r3, r0
 800371a:	4618      	mov	r0, r3
 800371c:	f001 f9de 	bl	8004adc <BO_ModifyOutput>

	eNewEvent = evIdle;
 8003720:	4b03      	ldr	r3, [pc, #12]	; (8003730 <BiasMenuInputHandler+0x28>)
 8003722:	2200      	movs	r2, #0
 8003724:	701a      	strb	r2, [r3, #0]
	return Bias_Menu_State;
 8003726:	230e      	movs	r3, #14
}
 8003728:	4618      	mov	r0, r3
 800372a:	bd80      	pop	{r7, pc}
 800372c:	08012ce8 	.word	0x08012ce8
 8003730:	20001ec3 	.word	0x20001ec3

08003734 <BiasMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuExitHandler()
{
 8003734:	b580      	push	{r7, lr}
 8003736:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("BiasMenuExitHandler Event captured\n");
 8003738:	4808      	ldr	r0, [pc, #32]	; (800375c <BiasMenuExitHandler+0x28>)
 800373a:	f00b fdf7 	bl	800f32c <puts>
#endif


	// disable the menu
	eNextBiasMenuStatus = DISABLE_BIAS_MENU;
 800373e:	4b08      	ldr	r3, [pc, #32]	; (8003760 <BiasMenuExitHandler+0x2c>)
 8003740:	2200      	movs	r2, #0
 8003742:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

	//ENCODER_TIMER->ARR = 1024;

	DM_RefreshScreen();
 8003744:	f7fd fe76 	bl	8001434 <DM_RefreshScreen>

#ifdef SWV_DEBUG_ENABLED
	  printf("returning to Idle State\n");
 8003748:	4806      	ldr	r0, [pc, #24]	; (8003764 <BiasMenuExitHandler+0x30>)
 800374a:	f00b fdef 	bl	800f32c <puts>
#endif

	eNewEvent = evIdle;
 800374e:	4b06      	ldr	r3, [pc, #24]	; (8003768 <BiasMenuExitHandler+0x34>)
 8003750:	2200      	movs	r2, #0
 8003752:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 8003754:	2301      	movs	r3, #1
}
 8003756:	4618      	mov	r0, r3
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	08012d0c 	.word	0x08012d0c
 8003760:	20001ec1 	.word	0x20001ec1
 8003764:	08012d30 	.word	0x08012d30
 8003768:	20001ec3 	.word	0x20001ec3

0800376c <EM_ProcessEvent>:
 *	@param None
 *	@retval None
 *
 */
void EM_ProcessEvent()
{
 800376c:	b580      	push	{r7, lr}
 800376e:	af00      	add	r7, sp, #0

	switch(eNextState)
 8003770:	4bb8      	ldr	r3, [pc, #736]	; (8003a54 <EM_ProcessEvent+0x2e8>)
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	2b0e      	cmp	r3, #14
 8003776:	f200 8216 	bhi.w	8003ba6 <EM_ProcessEvent+0x43a>
 800377a:	a201      	add	r2, pc, #4	; (adr r2, 8003780 <EM_ProcessEvent+0x14>)
 800377c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003780:	080037bd 	.word	0x080037bd
 8003784:	080037ef 	.word	0x080037ef
 8003788:	08003875 	.word	0x08003875
 800378c:	08003893 	.word	0x08003893
 8003790:	080038df 	.word	0x080038df
 8003794:	08003911 	.word	0x08003911
 8003798:	08003943 	.word	0x08003943
 800379c:	0800398f 	.word	0x0800398f
 80037a0:	080039c1 	.word	0x080039c1
 80037a4:	08003ba7 	.word	0x08003ba7
 80037a8:	080039f3 	.word	0x080039f3
 80037ac:	08003a85 	.word	0x08003a85
 80037b0:	08003ab7 	.word	0x08003ab7
 80037b4:	08003ae7 	.word	0x08003ae7
 80037b8:	08003b71 	.word	0x08003b71
// MAIN MENU
		case Idle_State:


			#ifdef SWV_DEBUG_ENABLED
			  printf("Idle_State\n");
 80037bc:	48a6      	ldr	r0, [pc, #664]	; (8003a58 <EM_ProcessEvent+0x2ec>)
 80037be:	f00b fdb5 	bl	800f32c <puts>
			#endif

			if(eNewEvent == evBlueBtn)
 80037c2:	4ba6      	ldr	r3, [pc, #664]	; (8003a5c <EM_ProcessEvent+0x2f0>)
 80037c4:	781b      	ldrb	r3, [r3, #0]
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d105      	bne.n	80037d6 <EM_ProcessEvent+0x6a>
			{
				eNextState = ToplevelOutputMenuEntryHandler();
 80037ca:	f000 ffbb 	bl	8004744 <ToplevelOutputMenuEntryHandler>
 80037ce:	4603      	mov	r3, r0
 80037d0:	461a      	mov	r2, r3
 80037d2:	4ba0      	ldr	r3, [pc, #640]	; (8003a54 <EM_ProcessEvent+0x2e8>)
 80037d4:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 80037d6:	4ba1      	ldr	r3, [pc, #644]	; (8003a5c <EM_ProcessEvent+0x2f0>)
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	2b02      	cmp	r3, #2
 80037dc:	f040 81e5 	bne.w	8003baa <EM_ProcessEvent+0x43e>
			{
				eNextState = ToplevelInputMenuEntryHandler();
 80037e0:	f000 ffdc 	bl	800479c <ToplevelInputMenuEntryHandler>
 80037e4:	4603      	mov	r3, r0
 80037e6:	461a      	mov	r2, r3
 80037e8:	4b9a      	ldr	r3, [pc, #616]	; (8003a54 <EM_ProcessEvent+0x2e8>)
 80037ea:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evRedBtn)
			{
				// no menu action
			}
			break;
 80037ec:	e1dd      	b.n	8003baa <EM_ProcessEvent+0x43e>

		case Toplevel_Output_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
			  printf("Toplevel_Output_Menu_State\n");
 80037ee:	489c      	ldr	r0, [pc, #624]	; (8003a60 <EM_ProcessEvent+0x2f4>)
 80037f0:	f00b fd9c 	bl	800f32c <puts>
			#endif

			if(eNewEvent == evEncoderPush)
 80037f4:	4b99      	ldr	r3, [pc, #612]	; (8003a5c <EM_ProcessEvent+0x2f0>)
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	2b06      	cmp	r3, #6
 80037fa:	d105      	bne.n	8003808 <EM_ProcessEvent+0x9c>
			{
				eNextState = ToplevelOutputMenuExitHandler();
 80037fc:	f000 ffb8 	bl	8004770 <ToplevelOutputMenuExitHandler>
 8003800:	4603      	mov	r3, r0
 8003802:	461a      	mov	r2, r3
 8003804:	4b93      	ldr	r3, [pc, #588]	; (8003a54 <EM_ProcessEvent+0x2e8>)
 8003806:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evBlueBtn)
 8003808:	4b94      	ldr	r3, [pc, #592]	; (8003a5c <EM_ProcessEvent+0x2f0>)
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	2b01      	cmp	r3, #1
 800380e:	d108      	bne.n	8003822 <EM_ProcessEvent+0xb6>
			{
				ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 8003810:	2000      	movs	r0, #0
 8003812:	f000 ff87 	bl	8004724 <ToplevelMenu_setStatus>
				eNextState = FuncMainMenuEntryHandler();
 8003816:	f000 fd85 	bl	8004324 <FuncMainMenuEntryHandler>
 800381a:	4603      	mov	r3, r0
 800381c:	461a      	mov	r2, r3
 800381e:	4b8d      	ldr	r3, [pc, #564]	; (8003a54 <EM_ProcessEvent+0x2e8>)
 8003820:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8003822:	4b8e      	ldr	r3, [pc, #568]	; (8003a5c <EM_ProcessEvent+0x2f0>)
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	2b02      	cmp	r3, #2
 8003828:	d108      	bne.n	800383c <EM_ProcessEvent+0xd0>
			{
				ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 800382a:	2000      	movs	r0, #0
 800382c:	f000 ff7a 	bl	8004724 <ToplevelMenu_setStatus>
				eNextState = FreqMainMenuEntryHandler();
 8003830:	f000 fb5c 	bl	8003eec <FreqMainMenuEntryHandler>
 8003834:	4603      	mov	r3, r0
 8003836:	461a      	mov	r2, r3
 8003838:	4b86      	ldr	r3, [pc, #536]	; (8003a54 <EM_ProcessEvent+0x2e8>)
 800383a:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evYellowBtn)
 800383c:	4b87      	ldr	r3, [pc, #540]	; (8003a5c <EM_ProcessEvent+0x2f0>)
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	2b03      	cmp	r3, #3
 8003842:	d108      	bne.n	8003856 <EM_ProcessEvent+0xea>
			{
				ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 8003844:	2000      	movs	r0, #0
 8003846:	f000 ff6d 	bl	8004724 <ToplevelMenu_setStatus>
				eNextState = GainMainMenuEntryHandler();
 800384a:	f000 fe6d 	bl	8004528 <GainMainMenuEntryHandler>
 800384e:	4603      	mov	r3, r0
 8003850:	461a      	mov	r2, r3
 8003852:	4b80      	ldr	r3, [pc, #512]	; (8003a54 <EM_ProcessEvent+0x2e8>)
 8003854:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evRedBtn)
 8003856:	4b81      	ldr	r3, [pc, #516]	; (8003a5c <EM_ProcessEvent+0x2f0>)
 8003858:	781b      	ldrb	r3, [r3, #0]
 800385a:	2b04      	cmp	r3, #4
 800385c:	f040 81a7 	bne.w	8003bae <EM_ProcessEvent+0x442>
			{
				ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 8003860:	2000      	movs	r0, #0
 8003862:	f000 ff5f 	bl	8004724 <ToplevelMenu_setStatus>
				eNextState = BiasMenuEntryHandler();
 8003866:	f7ff ff2d 	bl	80036c4 <BiasMenuEntryHandler>
 800386a:	4603      	mov	r3, r0
 800386c:	461a      	mov	r2, r3
 800386e:	4b79      	ldr	r3, [pc, #484]	; (8003a54 <EM_ProcessEvent+0x2e8>)
 8003870:	701a      	strb	r2, [r3, #0]
			}
			break;
 8003872:	e19c      	b.n	8003bae <EM_ProcessEvent+0x442>

		case Toplevel_Input_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
			  printf("Toplevel_Input_Menu_State\n");
 8003874:	487b      	ldr	r0, [pc, #492]	; (8003a64 <EM_ProcessEvent+0x2f8>)
 8003876:	f00b fd59 	bl	800f32c <puts>
			#endif

			if(eNewEvent == evEncoderPush)
 800387a:	4b78      	ldr	r3, [pc, #480]	; (8003a5c <EM_ProcessEvent+0x2f0>)
 800387c:	781b      	ldrb	r3, [r3, #0]
 800387e:	2b06      	cmp	r3, #6
 8003880:	f040 8197 	bne.w	8003bb2 <EM_ProcessEvent+0x446>
			{
				eNextState = ToplevelInputMenuExitHandler();
 8003884:	f000 ffa0 	bl	80047c8 <ToplevelInputMenuExitHandler>
 8003888:	4603      	mov	r3, r0
 800388a:	461a      	mov	r2, r3
 800388c:	4b71      	ldr	r3, [pc, #452]	; (8003a54 <EM_ProcessEvent+0x2e8>)
 800388e:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evRedBtn)
			{
				// no menu action
			}
			break;
 8003890:	e18f      	b.n	8003bb2 <EM_ProcessEvent+0x446>
// FUNC MENUS

		case Func_Main_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Func_Main_Menu_State\n");
 8003892:	4875      	ldr	r0, [pc, #468]	; (8003a68 <EM_ProcessEvent+0x2fc>)
 8003894:	f00b fd4a 	bl	800f32c <puts>

			if(eNewEvent == evEncoderSet)
			{
				// No menu action
			}
			if(eNewEvent == evEncoderPush)
 8003898:	4b70      	ldr	r3, [pc, #448]	; (8003a5c <EM_ProcessEvent+0x2f0>)
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	2b06      	cmp	r3, #6
 800389e:	d108      	bne.n	80038b2 <EM_ProcessEvent+0x146>
			{
				eNextState = FuncMainMenuExitHandler();
 80038a0:	f000 fd56 	bl	8004350 <FuncMainMenuExitHandler>
 80038a4:	4603      	mov	r3, r0
 80038a6:	461a      	mov	r2, r3
 80038a8:	4b6a      	ldr	r3, [pc, #424]	; (8003a54 <EM_ProcessEvent+0x2e8>)
 80038aa:	701a      	strb	r2, [r3, #0]
				ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 80038ac:	2002      	movs	r0, #2
 80038ae:	f000 ff39 	bl	8004724 <ToplevelMenu_setStatus>
			}
			if(eNewEvent == evBlueBtn)
 80038b2:	4b6a      	ldr	r3, [pc, #424]	; (8003a5c <EM_ProcessEvent+0x2f0>)
 80038b4:	781b      	ldrb	r3, [r3, #0]
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d105      	bne.n	80038c6 <EM_ProcessEvent+0x15a>
			{
				eNextState = FuncSignalMenuEntryHandler();
 80038ba:	f000 fd65 	bl	8004388 <FuncSignalMenuEntryHandler>
 80038be:	4603      	mov	r3, r0
 80038c0:	461a      	mov	r2, r3
 80038c2:	4b64      	ldr	r3, [pc, #400]	; (8003a54 <EM_ProcessEvent+0x2e8>)
 80038c4:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 80038c6:	4b65      	ldr	r3, [pc, #404]	; (8003a5c <EM_ProcessEvent+0x2f0>)
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	f040 8173 	bne.w	8003bb6 <EM_ProcessEvent+0x44a>
			{
				eNextState = FuncSyncMenuEntryHandler();
 80038d0:	f000 fdbc 	bl	800444c <FuncSyncMenuEntryHandler>
 80038d4:	4603      	mov	r3, r0
 80038d6:	461a      	mov	r2, r3
 80038d8:	4b5e      	ldr	r3, [pc, #376]	; (8003a54 <EM_ProcessEvent+0x2e8>)
 80038da:	701a      	strb	r2, [r3, #0]
			}

			break;
 80038dc:	e16b      	b.n	8003bb6 <EM_ProcessEvent+0x44a>

		case Func_Signal_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Func_Signal_Menu_State\n");
 80038de:	4863      	ldr	r0, [pc, #396]	; (8003a6c <EM_ProcessEvent+0x300>)
 80038e0:	f00b fd24 	bl	800f32c <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 80038e4:	4b5d      	ldr	r3, [pc, #372]	; (8003a5c <EM_ProcessEvent+0x2f0>)
 80038e6:	781b      	ldrb	r3, [r3, #0]
 80038e8:	2b05      	cmp	r3, #5
 80038ea:	d105      	bne.n	80038f8 <EM_ProcessEvent+0x18c>
			{
				eNextState = FuncSignalMenuInputHandler();
 80038ec:	f000 fd82 	bl	80043f4 <FuncSignalMenuInputHandler>
 80038f0:	4603      	mov	r3, r0
 80038f2:	461a      	mov	r2, r3
 80038f4:	4b57      	ldr	r3, [pc, #348]	; (8003a54 <EM_ProcessEvent+0x2e8>)
 80038f6:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 80038f8:	4b58      	ldr	r3, [pc, #352]	; (8003a5c <EM_ProcessEvent+0x2f0>)
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	2b06      	cmp	r3, #6
 80038fe:	f040 815c 	bne.w	8003bba <EM_ProcessEvent+0x44e>
			{
				eNextState = FuncSignalMenuExitHandler();
 8003902:	f000 fd8d 	bl	8004420 <FuncSignalMenuExitHandler>
 8003906:	4603      	mov	r3, r0
 8003908:	461a      	mov	r2, r3
 800390a:	4b52      	ldr	r3, [pc, #328]	; (8003a54 <EM_ProcessEvent+0x2e8>)
 800390c:	701a      	strb	r2, [r3, #0]

			}

			break;
 800390e:	e154      	b.n	8003bba <EM_ProcessEvent+0x44e>

		case Func_Sync_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Func_Sync_Menu_State\n");
 8003910:	4857      	ldr	r0, [pc, #348]	; (8003a70 <EM_ProcessEvent+0x304>)
 8003912:	f00b fd0b 	bl	800f32c <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 8003916:	4b51      	ldr	r3, [pc, #324]	; (8003a5c <EM_ProcessEvent+0x2f0>)
 8003918:	781b      	ldrb	r3, [r3, #0]
 800391a:	2b05      	cmp	r3, #5
 800391c:	d105      	bne.n	800392a <EM_ProcessEvent+0x1be>
			{
				eNextState = FuncSyncMenuInputHandler();
 800391e:	f000 fdcb 	bl	80044b8 <FuncSyncMenuInputHandler>
 8003922:	4603      	mov	r3, r0
 8003924:	461a      	mov	r2, r3
 8003926:	4b4b      	ldr	r3, [pc, #300]	; (8003a54 <EM_ProcessEvent+0x2e8>)
 8003928:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 800392a:	4b4c      	ldr	r3, [pc, #304]	; (8003a5c <EM_ProcessEvent+0x2f0>)
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	2b06      	cmp	r3, #6
 8003930:	f040 8145 	bne.w	8003bbe <EM_ProcessEvent+0x452>
			{
				eNextState = FuncSyncMenuExitHandler();
 8003934:	f000 fdd6 	bl	80044e4 <FuncSyncMenuExitHandler>
 8003938:	4603      	mov	r3, r0
 800393a:	461a      	mov	r2, r3
 800393c:	4b45      	ldr	r3, [pc, #276]	; (8003a54 <EM_ProcessEvent+0x2e8>)
 800393e:	701a      	strb	r2, [r3, #0]
			}

			break;
 8003940:	e13d      	b.n	8003bbe <EM_ProcessEvent+0x452>
// GAIN MENUS

		case Gain_Main_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Gain_Main_Menu_State\n");
 8003942:	484c      	ldr	r0, [pc, #304]	; (8003a74 <EM_ProcessEvent+0x308>)
 8003944:	f00b fcf2 	bl	800f32c <puts>
			#endif
			if(eNewEvent == evEncoderSet)
			{
				// No menu action
			}
			if(eNewEvent == evEncoderPush)
 8003948:	4b44      	ldr	r3, [pc, #272]	; (8003a5c <EM_ProcessEvent+0x2f0>)
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	2b06      	cmp	r3, #6
 800394e:	d108      	bne.n	8003962 <EM_ProcessEvent+0x1f6>
			{
				eNextState = GainMainMenuExitHandler();
 8003950:	f000 fe00 	bl	8004554 <GainMainMenuExitHandler>
 8003954:	4603      	mov	r3, r0
 8003956:	461a      	mov	r2, r3
 8003958:	4b3e      	ldr	r3, [pc, #248]	; (8003a54 <EM_ProcessEvent+0x2e8>)
 800395a:	701a      	strb	r2, [r3, #0]
				ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 800395c:	2002      	movs	r0, #2
 800395e:	f000 fee1 	bl	8004724 <ToplevelMenu_setStatus>
			}
			if(eNewEvent == evBlueBtn)
 8003962:	4b3e      	ldr	r3, [pc, #248]	; (8003a5c <EM_ProcessEvent+0x2f0>)
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	2b01      	cmp	r3, #1
 8003968:	d105      	bne.n	8003976 <EM_ProcessEvent+0x20a>
			{
				eNextState = GainSignalMenuEntryHandler();
 800396a:	f000 fe0f 	bl	800458c <GainSignalMenuEntryHandler>
 800396e:	4603      	mov	r3, r0
 8003970:	461a      	mov	r2, r3
 8003972:	4b38      	ldr	r3, [pc, #224]	; (8003a54 <EM_ProcessEvent+0x2e8>)
 8003974:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8003976:	4b39      	ldr	r3, [pc, #228]	; (8003a5c <EM_ProcessEvent+0x2f0>)
 8003978:	781b      	ldrb	r3, [r3, #0]
 800397a:	2b02      	cmp	r3, #2
 800397c:	f040 8121 	bne.w	8003bc2 <EM_ProcessEvent+0x456>
			{
				eNextState = GainSyncMenuEntryHandler();
 8003980:	f000 fe64 	bl	800464c <GainSyncMenuEntryHandler>
 8003984:	4603      	mov	r3, r0
 8003986:	461a      	mov	r2, r3
 8003988:	4b32      	ldr	r3, [pc, #200]	; (8003a54 <EM_ProcessEvent+0x2e8>)
 800398a:	701a      	strb	r2, [r3, #0]
			}

			break;
 800398c:	e119      	b.n	8003bc2 <EM_ProcessEvent+0x456>

		case Gain_Signal_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Gain_Signal_Menu_State\n");
 800398e:	483a      	ldr	r0, [pc, #232]	; (8003a78 <EM_ProcessEvent+0x30c>)
 8003990:	f00b fccc 	bl	800f32c <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 8003994:	4b31      	ldr	r3, [pc, #196]	; (8003a5c <EM_ProcessEvent+0x2f0>)
 8003996:	781b      	ldrb	r3, [r3, #0]
 8003998:	2b05      	cmp	r3, #5
 800399a:	d105      	bne.n	80039a8 <EM_ProcessEvent+0x23c>
			{
				eNextState = GainSignalMenuInputHandler();
 800399c:	f000 fe2a 	bl	80045f4 <GainSignalMenuInputHandler>
 80039a0:	4603      	mov	r3, r0
 80039a2:	461a      	mov	r2, r3
 80039a4:	4b2b      	ldr	r3, [pc, #172]	; (8003a54 <EM_ProcessEvent+0x2e8>)
 80039a6:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 80039a8:	4b2c      	ldr	r3, [pc, #176]	; (8003a5c <EM_ProcessEvent+0x2f0>)
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	2b06      	cmp	r3, #6
 80039ae:	f040 810a 	bne.w	8003bc6 <EM_ProcessEvent+0x45a>
			{
				eNextState = GainSignalMenuExitHandler();
 80039b2:	f000 fe35 	bl	8004620 <GainSignalMenuExitHandler>
 80039b6:	4603      	mov	r3, r0
 80039b8:	461a      	mov	r2, r3
 80039ba:	4b26      	ldr	r3, [pc, #152]	; (8003a54 <EM_ProcessEvent+0x2e8>)
 80039bc:	701a      	strb	r2, [r3, #0]
			}

			break;
 80039be:	e102      	b.n	8003bc6 <EM_ProcessEvent+0x45a>

		case Gain_Sync_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Gain_Sync_Menu_State\n");
 80039c0:	482e      	ldr	r0, [pc, #184]	; (8003a7c <EM_ProcessEvent+0x310>)
 80039c2:	f00b fcb3 	bl	800f32c <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 80039c6:	4b25      	ldr	r3, [pc, #148]	; (8003a5c <EM_ProcessEvent+0x2f0>)
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	2b05      	cmp	r3, #5
 80039cc:	d105      	bne.n	80039da <EM_ProcessEvent+0x26e>
			{
				eNextState = GainSyncMenuInputHandler();
 80039ce:	f000 fe71 	bl	80046b4 <GainSyncMenuInputHandler>
 80039d2:	4603      	mov	r3, r0
 80039d4:	461a      	mov	r2, r3
 80039d6:	4b1f      	ldr	r3, [pc, #124]	; (8003a54 <EM_ProcessEvent+0x2e8>)
 80039d8:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 80039da:	4b20      	ldr	r3, [pc, #128]	; (8003a5c <EM_ProcessEvent+0x2f0>)
 80039dc:	781b      	ldrb	r3, [r3, #0]
 80039de:	2b06      	cmp	r3, #6
 80039e0:	f040 80f3 	bne.w	8003bca <EM_ProcessEvent+0x45e>
			{
				eNextState = GainSyncMenuExitHandler();
 80039e4:	f000 fe7c 	bl	80046e0 <GainSyncMenuExitHandler>
 80039e8:	4603      	mov	r3, r0
 80039ea:	461a      	mov	r2, r3
 80039ec:	4b19      	ldr	r3, [pc, #100]	; (8003a54 <EM_ProcessEvent+0x2e8>)
 80039ee:	701a      	strb	r2, [r3, #0]
			}

			break;
 80039f0:	e0eb      	b.n	8003bca <EM_ProcessEvent+0x45e>
// FREQ MENUS

		case Freq_Main_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Freq_Main_Menu_State\n");
 80039f2:	4823      	ldr	r0, [pc, #140]	; (8003a80 <EM_ProcessEvent+0x314>)
 80039f4:	f00b fc9a 	bl	800f32c <puts>
			#endif

			if(eNewEvent == evEncoderPush)
 80039f8:	4b18      	ldr	r3, [pc, #96]	; (8003a5c <EM_ProcessEvent+0x2f0>)
 80039fa:	781b      	ldrb	r3, [r3, #0]
 80039fc:	2b06      	cmp	r3, #6
 80039fe:	d108      	bne.n	8003a12 <EM_ProcessEvent+0x2a6>
			{
				eNextState = FreqMainMenuExitHandler();
 8003a00:	f000 fa8a 	bl	8003f18 <FreqMainMenuExitHandler>
 8003a04:	4603      	mov	r3, r0
 8003a06:	461a      	mov	r2, r3
 8003a08:	4b12      	ldr	r3, [pc, #72]	; (8003a54 <EM_ProcessEvent+0x2e8>)
 8003a0a:	701a      	strb	r2, [r3, #0]
				ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 8003a0c:	2002      	movs	r0, #2
 8003a0e:	f000 fe89 	bl	8004724 <ToplevelMenu_setStatus>
			}
			if(eNewEvent == evBlueBtn)
 8003a12:	4b12      	ldr	r3, [pc, #72]	; (8003a5c <EM_ProcessEvent+0x2f0>)
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d105      	bne.n	8003a26 <EM_ProcessEvent+0x2ba>
			{
				eNextState = FreqPresetMenuEntryHandler();
 8003a1a:	f000 fa9f 	bl	8003f5c <FreqPresetMenuEntryHandler>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	461a      	mov	r2, r3
 8003a22:	4b0c      	ldr	r3, [pc, #48]	; (8003a54 <EM_ProcessEvent+0x2e8>)
 8003a24:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8003a26:	4b0d      	ldr	r3, [pc, #52]	; (8003a5c <EM_ProcessEvent+0x2f0>)
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d105      	bne.n	8003a3a <EM_ProcessEvent+0x2ce>
			{
				eNextState = FreqAdjustMenuEntryHandler();
 8003a2e:	f000 faf3 	bl	8004018 <FreqAdjustMenuEntryHandler>
 8003a32:	4603      	mov	r3, r0
 8003a34:	461a      	mov	r2, r3
 8003a36:	4b07      	ldr	r3, [pc, #28]	; (8003a54 <EM_ProcessEvent+0x2e8>)
 8003a38:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evYellowBtn)
 8003a3a:	4b08      	ldr	r3, [pc, #32]	; (8003a5c <EM_ProcessEvent+0x2f0>)
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	2b03      	cmp	r3, #3
 8003a40:	f040 80c5 	bne.w	8003bce <EM_ProcessEvent+0x462>
			{
				eNextState = FreqSweepMenuEntryHandler();
 8003a44:	f000 f8ea 	bl	8003c1c <FreqSweepMenuEntryHandler>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	4b01      	ldr	r3, [pc, #4]	; (8003a54 <EM_ProcessEvent+0x2e8>)
 8003a4e:	701a      	strb	r2, [r3, #0]
			}

			break;
 8003a50:	e0bd      	b.n	8003bce <EM_ProcessEvent+0x462>
 8003a52:	bf00      	nop
 8003a54:	20001ec2 	.word	0x20001ec2
 8003a58:	08012d48 	.word	0x08012d48
 8003a5c:	20001ec3 	.word	0x20001ec3
 8003a60:	08012d54 	.word	0x08012d54
 8003a64:	08012d70 	.word	0x08012d70
 8003a68:	08012d8c 	.word	0x08012d8c
 8003a6c:	08012da4 	.word	0x08012da4
 8003a70:	08012dbc 	.word	0x08012dbc
 8003a74:	08012dd4 	.word	0x08012dd4
 8003a78:	08012dec 	.word	0x08012dec
 8003a7c:	08012e04 	.word	0x08012e04
 8003a80:	08012e1c 	.word	0x08012e1c

		case Freq_Preset_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Freq_Preset_Menu_State\n");
 8003a84:	4857      	ldr	r0, [pc, #348]	; (8003be4 <EM_ProcessEvent+0x478>)
 8003a86:	f00b fc51 	bl	800f32c <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 8003a8a:	4b57      	ldr	r3, [pc, #348]	; (8003be8 <EM_ProcessEvent+0x47c>)
 8003a8c:	781b      	ldrb	r3, [r3, #0]
 8003a8e:	2b05      	cmp	r3, #5
 8003a90:	d105      	bne.n	8003a9e <EM_ProcessEvent+0x332>
			{
				eNextState = FreqPresetMenuInputHandler();
 8003a92:	f000 fa95 	bl	8003fc0 <FreqPresetMenuInputHandler>
 8003a96:	4603      	mov	r3, r0
 8003a98:	461a      	mov	r2, r3
 8003a9a:	4b54      	ldr	r3, [pc, #336]	; (8003bec <EM_ProcessEvent+0x480>)
 8003a9c:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8003a9e:	4b52      	ldr	r3, [pc, #328]	; (8003be8 <EM_ProcessEvent+0x47c>)
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	2b06      	cmp	r3, #6
 8003aa4:	f040 8095 	bne.w	8003bd2 <EM_ProcessEvent+0x466>
			{
				eNextState = FreqPresetMenuExitHandler();
 8003aa8:	f000 faa0 	bl	8003fec <FreqPresetMenuExitHandler>
 8003aac:	4603      	mov	r3, r0
 8003aae:	461a      	mov	r2, r3
 8003ab0:	4b4e      	ldr	r3, [pc, #312]	; (8003bec <EM_ProcessEvent+0x480>)
 8003ab2:	701a      	strb	r2, [r3, #0]
			}
			break;
 8003ab4:	e08d      	b.n	8003bd2 <EM_ProcessEvent+0x466>

		case Freq_Adjust_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Freq_Adjust_Menu_State\n");
 8003ab6:	484e      	ldr	r0, [pc, #312]	; (8003bf0 <EM_ProcessEvent+0x484>)
 8003ab8:	f00b fc38 	bl	800f32c <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 8003abc:	4b4a      	ldr	r3, [pc, #296]	; (8003be8 <EM_ProcessEvent+0x47c>)
 8003abe:	781b      	ldrb	r3, [r3, #0]
 8003ac0:	2b05      	cmp	r3, #5
 8003ac2:	d105      	bne.n	8003ad0 <EM_ProcessEvent+0x364>
			{
				eNextState = FreqAdjustMenuInputHandler();
 8003ac4:	f000 faca 	bl	800405c <FreqAdjustMenuInputHandler>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	461a      	mov	r2, r3
 8003acc:	4b47      	ldr	r3, [pc, #284]	; (8003bec <EM_ProcessEvent+0x480>)
 8003ace:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8003ad0:	4b45      	ldr	r3, [pc, #276]	; (8003be8 <EM_ProcessEvent+0x47c>)
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	2b06      	cmp	r3, #6
 8003ad6:	d17e      	bne.n	8003bd6 <EM_ProcessEvent+0x46a>
			{
				eNextState = FreqAdjustMenuExitHandler();
 8003ad8:	f000 fad2 	bl	8004080 <FreqAdjustMenuExitHandler>
 8003adc:	4603      	mov	r3, r0
 8003ade:	461a      	mov	r2, r3
 8003ae0:	4b42      	ldr	r3, [pc, #264]	; (8003bec <EM_ProcessEvent+0x480>)
 8003ae2:	701a      	strb	r2, [r3, #0]
			}
			break;
 8003ae4:	e077      	b.n	8003bd6 <EM_ProcessEvent+0x46a>

		case Freq_Sweep_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Freq_Sweep_Menu_State\n");
 8003ae6:	4843      	ldr	r0, [pc, #268]	; (8003bf4 <EM_ProcessEvent+0x488>)
 8003ae8:	f00b fc20 	bl	800f32c <puts>
			#endif

			if(eNewEvent == evBlueBtn)
 8003aec:	4b3e      	ldr	r3, [pc, #248]	; (8003be8 <EM_ProcessEvent+0x47c>)
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d106      	bne.n	8003b02 <EM_ProcessEvent+0x396>
			{
				// enable
				eNextState = FreqSweepMenuInputHandler(evSweepEnableBtn);
 8003af4:	2007      	movs	r0, #7
 8003af6:	f000 f8ed 	bl	8003cd4 <FreqSweepMenuInputHandler>
 8003afa:	4603      	mov	r3, r0
 8003afc:	461a      	mov	r2, r3
 8003afe:	4b3b      	ldr	r3, [pc, #236]	; (8003bec <EM_ProcessEvent+0x480>)
 8003b00:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8003b02:	4b39      	ldr	r3, [pc, #228]	; (8003be8 <EM_ProcessEvent+0x47c>)
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d106      	bne.n	8003b18 <EM_ProcessEvent+0x3ac>
			{
				// direction
				eNextState = FreqSweepMenuInputHandler(evSweepModeBtn);
 8003b0a:	2008      	movs	r0, #8
 8003b0c:	f000 f8e2 	bl	8003cd4 <FreqSweepMenuInputHandler>
 8003b10:	4603      	mov	r3, r0
 8003b12:	461a      	mov	r2, r3
 8003b14:	4b35      	ldr	r3, [pc, #212]	; (8003bec <EM_ProcessEvent+0x480>)
 8003b16:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evYellowBtn)
 8003b18:	4b33      	ldr	r3, [pc, #204]	; (8003be8 <EM_ProcessEvent+0x47c>)
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	2b03      	cmp	r3, #3
 8003b1e:	d106      	bne.n	8003b2e <EM_ProcessEvent+0x3c2>
			{
				// set sweep speed
				eNextState = FreqSweepMenuInputHandler(evSweepSpeedBtn);
 8003b20:	2009      	movs	r0, #9
 8003b22:	f000 f8d7 	bl	8003cd4 <FreqSweepMenuInputHandler>
 8003b26:	4603      	mov	r3, r0
 8003b28:	461a      	mov	r2, r3
 8003b2a:	4b30      	ldr	r3, [pc, #192]	; (8003bec <EM_ProcessEvent+0x480>)
 8003b2c:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evRedBtn)
 8003b2e:	4b2e      	ldr	r3, [pc, #184]	; (8003be8 <EM_ProcessEvent+0x47c>)
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	2b04      	cmp	r3, #4
 8003b34:	d106      	bne.n	8003b44 <EM_ProcessEvent+0x3d8>
			{
				// set lower/upper sweep limit
				eNextState = FreqSweepMenuInputHandler(evSweepLimitBtn);
 8003b36:	200a      	movs	r0, #10
 8003b38:	f000 f8cc 	bl	8003cd4 <FreqSweepMenuInputHandler>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	461a      	mov	r2, r3
 8003b40:	4b2a      	ldr	r3, [pc, #168]	; (8003bec <EM_ProcessEvent+0x480>)
 8003b42:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderSet)
 8003b44:	4b28      	ldr	r3, [pc, #160]	; (8003be8 <EM_ProcessEvent+0x47c>)
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	2b05      	cmp	r3, #5
 8003b4a:	d106      	bne.n	8003b5a <EM_ProcessEvent+0x3ee>
			{
				eNextState = FreqSweepMenuInputHandler(evEncoderSweep);
 8003b4c:	200b      	movs	r0, #11
 8003b4e:	f000 f8c1 	bl	8003cd4 <FreqSweepMenuInputHandler>
 8003b52:	4603      	mov	r3, r0
 8003b54:	461a      	mov	r2, r3
 8003b56:	4b25      	ldr	r3, [pc, #148]	; (8003bec <EM_ProcessEvent+0x480>)
 8003b58:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8003b5a:	4b23      	ldr	r3, [pc, #140]	; (8003be8 <EM_ProcessEvent+0x47c>)
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	2b06      	cmp	r3, #6
 8003b60:	d13b      	bne.n	8003bda <EM_ProcessEvent+0x46e>
			{
				eNextState = FreqSweepMenuExitHandler();
 8003b62:	f000 f99f 	bl	8003ea4 <FreqSweepMenuExitHandler>
 8003b66:	4603      	mov	r3, r0
 8003b68:	461a      	mov	r2, r3
 8003b6a:	4b20      	ldr	r3, [pc, #128]	; (8003bec <EM_ProcessEvent+0x480>)
 8003b6c:	701a      	strb	r2, [r3, #0]
			}

			break;
 8003b6e:	e034      	b.n	8003bda <EM_ProcessEvent+0x46e>
// BIAS MENUS

		case Bias_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Bias_Menu_State\n");
 8003b70:	4821      	ldr	r0, [pc, #132]	; (8003bf8 <EM_ProcessEvent+0x48c>)
 8003b72:	f00b fbdb 	bl	800f32c <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 8003b76:	4b1c      	ldr	r3, [pc, #112]	; (8003be8 <EM_ProcessEvent+0x47c>)
 8003b78:	781b      	ldrb	r3, [r3, #0]
 8003b7a:	2b05      	cmp	r3, #5
 8003b7c:	d105      	bne.n	8003b8a <EM_ProcessEvent+0x41e>
			{
				eNextState = BiasMenuInputHandler();
 8003b7e:	f7ff fdc3 	bl	8003708 <BiasMenuInputHandler>
 8003b82:	4603      	mov	r3, r0
 8003b84:	461a      	mov	r2, r3
 8003b86:	4b19      	ldr	r3, [pc, #100]	; (8003bec <EM_ProcessEvent+0x480>)
 8003b88:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8003b8a:	4b17      	ldr	r3, [pc, #92]	; (8003be8 <EM_ProcessEvent+0x47c>)
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	2b06      	cmp	r3, #6
 8003b90:	d125      	bne.n	8003bde <EM_ProcessEvent+0x472>
			{
				eNextState = BiasMenuExitHandler();
 8003b92:	f7ff fdcf 	bl	8003734 <BiasMenuExitHandler>
 8003b96:	4603      	mov	r3, r0
 8003b98:	461a      	mov	r2, r3
 8003b9a:	4b14      	ldr	r3, [pc, #80]	; (8003bec <EM_ProcessEvent+0x480>)
 8003b9c:	701a      	strb	r2, [r3, #0]
				ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 8003b9e:	2002      	movs	r0, #2
 8003ba0:	f000 fdc0 	bl	8004724 <ToplevelMenu_setStatus>
			}

			break;
 8003ba4:	e01b      	b.n	8003bde <EM_ProcessEvent+0x472>

		default:
			break;
 8003ba6:	bf00      	nop
 8003ba8:	e01a      	b.n	8003be0 <EM_ProcessEvent+0x474>
			break;
 8003baa:	bf00      	nop
 8003bac:	e018      	b.n	8003be0 <EM_ProcessEvent+0x474>
			break;
 8003bae:	bf00      	nop
 8003bb0:	e016      	b.n	8003be0 <EM_ProcessEvent+0x474>
			break;
 8003bb2:	bf00      	nop
 8003bb4:	e014      	b.n	8003be0 <EM_ProcessEvent+0x474>
			break;
 8003bb6:	bf00      	nop
 8003bb8:	e012      	b.n	8003be0 <EM_ProcessEvent+0x474>
			break;
 8003bba:	bf00      	nop
 8003bbc:	e010      	b.n	8003be0 <EM_ProcessEvent+0x474>
			break;
 8003bbe:	bf00      	nop
 8003bc0:	e00e      	b.n	8003be0 <EM_ProcessEvent+0x474>
			break;
 8003bc2:	bf00      	nop
 8003bc4:	e00c      	b.n	8003be0 <EM_ProcessEvent+0x474>
			break;
 8003bc6:	bf00      	nop
 8003bc8:	e00a      	b.n	8003be0 <EM_ProcessEvent+0x474>
			break;
 8003bca:	bf00      	nop
 8003bcc:	e008      	b.n	8003be0 <EM_ProcessEvent+0x474>
			break;
 8003bce:	bf00      	nop
 8003bd0:	e006      	b.n	8003be0 <EM_ProcessEvent+0x474>
			break;
 8003bd2:	bf00      	nop
 8003bd4:	e004      	b.n	8003be0 <EM_ProcessEvent+0x474>
			break;
 8003bd6:	bf00      	nop
 8003bd8:	e002      	b.n	8003be0 <EM_ProcessEvent+0x474>
			break;
 8003bda:	bf00      	nop
 8003bdc:	e000      	b.n	8003be0 <EM_ProcessEvent+0x474>
			break;
 8003bde:	bf00      	nop
	}

}
 8003be0:	bf00      	nop
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	08012e34 	.word	0x08012e34
 8003be8:	20001ec3 	.word	0x20001ec3
 8003bec:	20001ec2 	.word	0x20001ec2
 8003bf0:	08012e4c 	.word	0x08012e4c
 8003bf4:	08012e64 	.word	0x08012e64
 8003bf8:	08012e7c 	.word	0x08012e7c

08003bfc <EM_SetNewEvent>:
 *	@param None
 *	@retval None
 *
 */
void EM_SetNewEvent(eSystemEvent pEvent)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	4603      	mov	r3, r0
 8003c04:	71fb      	strb	r3, [r7, #7]
	eNewEvent = pEvent;
 8003c06:	4a04      	ldr	r2, [pc, #16]	; (8003c18 <EM_SetNewEvent+0x1c>)
 8003c08:	79fb      	ldrb	r3, [r7, #7]
 8003c0a:	7013      	strb	r3, [r2, #0]
}
 8003c0c:	bf00      	nop
 8003c0e:	370c      	adds	r7, #12
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr
 8003c18:	20001ec3 	.word	0x20001ec3

08003c1c <FreqSweepMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqSweepMenuEntryHandler()
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqSweepMenuEntryHandler captured\n");
 8003c20:	4825      	ldr	r0, [pc, #148]	; (8003cb8 <FreqSweepMenuEntryHandler+0x9c>)
 8003c22:	f00b fb83 	bl	800f32c <puts>
	#endif

	DM_RefreshScreen();
 8003c26:	f7fd fc05 	bl	8001434 <DM_RefreshScreen>

	if( sweep_upper_bounds_longest_output_arr != OUTPUT_TIMER->ARR)
 8003c2a:	4b24      	ldr	r3, [pc, #144]	; (8003cbc <FreqSweepMenuEntryHandler+0xa0>)
 8003c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2e:	ee07 3a90 	vmov	s15, r3
 8003c32:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003c36:	4b22      	ldr	r3, [pc, #136]	; (8003cc0 <FreqSweepMenuEntryHandler+0xa4>)
 8003c38:	edd3 7a00 	vldr	s15, [r3]
 8003c3c:	eeb4 7a67 	vcmp.f32	s14, s15
 8003c40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c44:	d008      	beq.n	8003c58 <FreqSweepMenuEntryHandler+0x3c>
		sweep_upper_bounds_longest_output_arr  = OUTPUT_TIMER->ARR;
 8003c46:	4b1d      	ldr	r3, [pc, #116]	; (8003cbc <FreqSweepMenuEntryHandler+0xa0>)
 8003c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c4a:	ee07 3a90 	vmov	s15, r3
 8003c4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c52:	4b1b      	ldr	r3, [pc, #108]	; (8003cc0 <FreqSweepMenuEntryHandler+0xa4>)
 8003c54:	edc3 7a00 	vstr	s15, [r3]

	if( sweep_upper_bounds_longest_output_arr == MIN_OUTPUT_ARR)
 8003c58:	4b19      	ldr	r3, [pc, #100]	; (8003cc0 <FreqSweepMenuEntryHandler+0xa4>)
 8003c5a:	edd3 7a00 	vldr	s15, [r3]
 8003c5e:	eeb2 7a0a 	vmov.f32	s14, #42	; 0x41500000  13.0
 8003c62:	eef4 7a47 	vcmp.f32	s15, s14
 8003c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c6a:	d101      	bne.n	8003c70 <FreqSweepMenuEntryHandler+0x54>
	{
		_setSweepModeDown();
 8003c6c:	f000 fa1e 	bl	80040ac <_setSweepModeDown>
	}

	_setEncoderControlMode(ENCODER_SWEEP_SPEED_FUNCTION);
 8003c70:	2000      	movs	r0, #0
 8003c72:	f000 fa75 	bl	8004160 <_setEncoderControlMode>
	_setSweepTimerAutoReloadForEncoderControl(ENCODER_SWEEP_SPEED_FUNCTION);
 8003c76:	2000      	movs	r0, #0
 8003c78:	f000 fad2 	bl	8004220 <_setSweepTimerAutoReloadForEncoderControl>
	calculated_sweep_in_hertz = _getCalculatedSweepFrequencyInHertz();
 8003c7c:	f000 fb0c 	bl	8004298 <_getCalculatedSweepFrequencyInHertz>
 8003c80:	eef0 7a40 	vmov.f32	s15, s0
 8003c84:	4b0f      	ldr	r3, [pc, #60]	; (8003cc4 <FreqSweepMenuEntryHandler+0xa8>)
 8003c86:	edc3 7a00 	vstr	s15, [r3]

	// reset sweep start value
	SWEEP_TIMER->CNT = 0;
 8003c8a:	4b0f      	ldr	r3, [pc, #60]	; (8003cc8 <FreqSweepMenuEntryHandler+0xac>)
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	625a      	str	r2, [r3, #36]	; 0x24

	// set default mode to sweep speed control
	FreqSweepMenuInputHandler(evSweepSpeedBtn);
 8003c90:	2009      	movs	r0, #9
 8003c92:	f000 f81f 	bl	8003cd4 <FreqSweepMenuInputHandler>

	// sweep start speed
	SWEEP_TIMER->ARR = MIN_SWEEP_ARR;
 8003c96:	4b0c      	ldr	r3, [pc, #48]	; (8003cc8 <FreqSweepMenuEntryHandler+0xac>)
 8003c98:	f244 12a0 	movw	r2, #16800	; 0x41a0
 8003c9c:	62da      	str	r2, [r3, #44]	; 0x2c
	SWEEP_TIMER->PSC = 0;
 8003c9e:	4b0a      	ldr	r3, [pc, #40]	; (8003cc8 <FreqSweepMenuEntryHandler+0xac>)
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	629a      	str	r2, [r3, #40]	; 0x28



	// get ready to load menu
	eNextFreqMenuStatus = ENABLE_FREQ_SWEEP_MENU;
 8003ca4:	4b09      	ldr	r3, [pc, #36]	; (8003ccc <FreqSweepMenuEntryHandler+0xb0>)
 8003ca6:	2204      	movs	r2, #4
 8003ca8:	701a      	strb	r2, [r3, #0]


	// stay in this state
	eNewEvent = evIdle;
 8003caa:	4b09      	ldr	r3, [pc, #36]	; (8003cd0 <FreqSweepMenuEntryHandler+0xb4>)
 8003cac:	2200      	movs	r2, #0
 8003cae:	701a      	strb	r2, [r3, #0]
	return Freq_Sweep_Menu_State;
 8003cb0:	230d      	movs	r3, #13
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	08012e8c 	.word	0x08012e8c
 8003cbc:	40013400 	.word	0x40013400
 8003cc0:	20000004 	.word	0x20000004
 8003cc4:	20001ee0 	.word	0x20001ee0
 8003cc8:	40000c00 	.word	0x40000c00
 8003ccc:	20001ec6 	.word	0x20001ec6
 8003cd0:	20001ec3 	.word	0x20001ec3

08003cd4 <FreqSweepMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqSweepMenuInputHandler(eSystemEvent pEvent)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	4603      	mov	r3, r0
 8003cdc:	71fb      	strb	r3, [r7, #7]
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqAdjustMenuInputHandler Event captured\n");
 8003cde:	4865      	ldr	r0, [pc, #404]	; (8003e74 <FreqSweepMenuInputHandler+0x1a0>)
 8003ce0:	f00b fb24 	bl	800f32c <puts>
	#endif



	switch(pEvent)
 8003ce4:	79fb      	ldrb	r3, [r7, #7]
 8003ce6:	3b07      	subs	r3, #7
 8003ce8:	2b04      	cmp	r3, #4
 8003cea:	f200 80ba 	bhi.w	8003e62 <FreqSweepMenuInputHandler+0x18e>
 8003cee:	a201      	add	r2, pc, #4	; (adr r2, 8003cf4 <FreqSweepMenuInputHandler+0x20>)
 8003cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cf4:	08003d09 	.word	0x08003d09
 8003cf8:	08003d29 	.word	0x08003d29
 8003cfc:	08003e53 	.word	0x08003e53
 8003d00:	08003e5b 	.word	0x08003e5b
 8003d04:	08003d69 	.word	0x08003d69
	{
		case evSweepEnableBtn:

			#ifdef SWV_DEBUG_ENABLED
				printf("evSweepEnable captured\n");
 8003d08:	485b      	ldr	r0, [pc, #364]	; (8003e78 <FreqSweepMenuInputHandler+0x1a4>)
 8003d0a:	f00b fb0f 	bl	800f32c <puts>
			#endif

			// toggle enable/disable
			SWEEP_TIMER->DIER 	^= TIM_DIER_UIE;
 8003d0e:	4b5b      	ldr	r3, [pc, #364]	; (8003e7c <FreqSweepMenuInputHandler+0x1a8>)
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	4a5a      	ldr	r2, [pc, #360]	; (8003e7c <FreqSweepMenuInputHandler+0x1a8>)
 8003d14:	f083 0301 	eor.w	r3, r3, #1
 8003d18:	60d3      	str	r3, [r2, #12]
			SWEEP_TIMER->CR1	^= TIM_CR1_CEN;
 8003d1a:	4b58      	ldr	r3, [pc, #352]	; (8003e7c <FreqSweepMenuInputHandler+0x1a8>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a57      	ldr	r2, [pc, #348]	; (8003e7c <FreqSweepMenuInputHandler+0x1a8>)
 8003d20:	f083 0301 	eor.w	r3, r3, #1
 8003d24:	6013      	str	r3, [r2, #0]
			break;
 8003d26:	e09d      	b.n	8003e64 <FreqSweepMenuInputHandler+0x190>

		case evSweepModeBtn:

			#ifdef SWV_DEBUG_ENABLED
				printf("evSweepMode captured\n");
 8003d28:	4855      	ldr	r0, [pc, #340]	; (8003e80 <FreqSweepMenuInputHandler+0x1ac>)
 8003d2a:	f00b faff 	bl	800f32c <puts>
			#endif

			// flip between 0:Upcounter and 1:Downcounter
			active_sweep_mode ^= 1U;
 8003d2e:	4b55      	ldr	r3, [pc, #340]	; (8003e84 <FreqSweepMenuInputHandler+0x1b0>)
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	f083 0301 	eor.w	r3, r3, #1
 8003d36:	b2da      	uxtb	r2, r3
 8003d38:	4b52      	ldr	r3, [pc, #328]	; (8003e84 <FreqSweepMenuInputHandler+0x1b0>)
 8003d3a:	701a      	strb	r2, [r3, #0]

			switch(active_sweep_mode)
 8003d3c:	4b51      	ldr	r3, [pc, #324]	; (8003e84 <FreqSweepMenuInputHandler+0x1b0>)
 8003d3e:	781b      	ldrb	r3, [r3, #0]
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d004      	beq.n	8003d4e <FreqSweepMenuInputHandler+0x7a>
 8003d44:	2b02      	cmp	r3, #2
 8003d46:	d008      	beq.n	8003d5a <FreqSweepMenuInputHandler+0x86>
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d003      	beq.n	8003d54 <FreqSweepMenuInputHandler+0x80>
 8003d4c:	e006      	b.n	8003d5c <FreqSweepMenuInputHandler+0x88>
			{
				case SWEEP_MODE_DOWN:
					_setSweepModeDown();
 8003d4e:	f000 f9ad 	bl	80040ac <_setSweepModeDown>
					break;
 8003d52:	e003      	b.n	8003d5c <FreqSweepMenuInputHandler+0x88>

				case SWEEP_MODE_UP:
					_setSweepModeUp();
 8003d54:	f000 f9da 	bl	800410c <_setSweepModeUp>
					break;
 8003d58:	e000      	b.n	8003d5c <FreqSweepMenuInputHandler+0x88>

				case SWEEP_MODE_BIDIR:	// not used
					//SWEEP_TIMER->CR1 |= (TIM_CR1_CMS_0);
					break;
 8003d5a:	bf00      	nop
			}
			// switch(active_sweep_mode)
			// TODO
			_setEncoderControlMode(theCurrentEncoderSweepFunction);
 8003d5c:	4b4a      	ldr	r3, [pc, #296]	; (8003e88 <FreqSweepMenuInputHandler+0x1b4>)
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	4618      	mov	r0, r3
 8003d62:	f000 f9fd 	bl	8004160 <_setEncoderControlMode>

			break;
 8003d66:	e07d      	b.n	8003e64 <FreqSweepMenuInputHandler+0x190>

		// rotary encoder is turned
		case evEncoderSweep:

			#ifdef SWV_DEBUG_ENABLED
				printf("evEncoderSweep captured\n");
 8003d68:	4848      	ldr	r0, [pc, #288]	; (8003e8c <FreqSweepMenuInputHandler+0x1b8>)
 8003d6a:	f00b fadf 	bl	800f32c <puts>
			#endif

			switch(theCurrentEncoderSweepFunction)
 8003d6e:	4b46      	ldr	r3, [pc, #280]	; (8003e88 <FreqSweepMenuInputHandler+0x1b4>)
 8003d70:	781b      	ldrb	r3, [r3, #0]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d002      	beq.n	8003d7c <FreqSweepMenuInputHandler+0xa8>
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d00b      	beq.n	8003d92 <FreqSweepMenuInputHandler+0xbe>
					break;

			}
			// switch(theCurrentEncoderSweepFunction)

			break;
 8003d7a:	e073      	b.n	8003e64 <FreqSweepMenuInputHandler+0x190>
					_setSweepTimerAutoReloadForEncoderControl(ENCODER_SWEEP_SPEED_FUNCTION);
 8003d7c:	2000      	movs	r0, #0
 8003d7e:	f000 fa4f 	bl	8004220 <_setSweepTimerAutoReloadForEncoderControl>
					calculated_sweep_in_hertz = _getCalculatedSweepFrequencyInHertz();
 8003d82:	f000 fa89 	bl	8004298 <_getCalculatedSweepFrequencyInHertz>
 8003d86:	eef0 7a40 	vmov.f32	s15, s0
 8003d8a:	4b41      	ldr	r3, [pc, #260]	; (8003e90 <FreqSweepMenuInputHandler+0x1bc>)
 8003d8c:	edc3 7a00 	vstr	s15, [r3]
					break;
 8003d90:	e05e      	b.n	8003e50 <FreqSweepMenuInputHandler+0x17c>
					switch(active_sweep_mode)
 8003d92:	4b3c      	ldr	r3, [pc, #240]	; (8003e84 <FreqSweepMenuInputHandler+0x1b0>)
 8003d94:	781b      	ldrb	r3, [r3, #0]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d002      	beq.n	8003da0 <FreqSweepMenuInputHandler+0xcc>
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d02a      	beq.n	8003df4 <FreqSweepMenuInputHandler+0x120>
							break;
 8003d9e:	e056      	b.n	8003e4e <FreqSweepMenuInputHandler+0x17a>
							if(ENCODER_TIMER->CNT < MIN_OUTPUT_ARR)
 8003da0:	4b3c      	ldr	r3, [pc, #240]	; (8003e94 <FreqSweepMenuInputHandler+0x1c0>)
 8003da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da4:	2b0c      	cmp	r3, #12
 8003da6:	d803      	bhi.n	8003db0 <FreqSweepMenuInputHandler+0xdc>
								ENCODER_TIMER->CNT = MIN_OUTPUT_ARR;
 8003da8:	4b3a      	ldr	r3, [pc, #232]	; (8003e94 <FreqSweepMenuInputHandler+0x1c0>)
 8003daa:	220d      	movs	r2, #13
 8003dac:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 8003dae:	e04e      	b.n	8003e4e <FreqSweepMenuInputHandler+0x17a>
							else if (ENCODER_TIMER->CNT > sweep_upper_bounds_longest_output_arr)
 8003db0:	4b38      	ldr	r3, [pc, #224]	; (8003e94 <FreqSweepMenuInputHandler+0x1c0>)
 8003db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db4:	ee07 3a90 	vmov	s15, r3
 8003db8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003dbc:	4b36      	ldr	r3, [pc, #216]	; (8003e98 <FreqSweepMenuInputHandler+0x1c4>)
 8003dbe:	edd3 7a00 	vldr	s15, [r3]
 8003dc2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dca:	dd09      	ble.n	8003de0 <FreqSweepMenuInputHandler+0x10c>
								ENCODER_TIMER->CNT = sweep_upper_bounds_longest_output_arr;
 8003dcc:	4b32      	ldr	r3, [pc, #200]	; (8003e98 <FreqSweepMenuInputHandler+0x1c4>)
 8003dce:	edd3 7a00 	vldr	s15, [r3]
 8003dd2:	4b30      	ldr	r3, [pc, #192]	; (8003e94 <FreqSweepMenuInputHandler+0x1c0>)
 8003dd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003dd8:	ee17 2a90 	vmov	r2, s15
 8003ddc:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 8003dde:	e036      	b.n	8003e4e <FreqSweepMenuInputHandler+0x17a>
								sweep_lower_bounds_shortest_output_arr = ENCODER_TIMER->CNT;
 8003de0:	4b2c      	ldr	r3, [pc, #176]	; (8003e94 <FreqSweepMenuInputHandler+0x1c0>)
 8003de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de4:	ee07 3a90 	vmov	s15, r3
 8003de8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dec:	4b2b      	ldr	r3, [pc, #172]	; (8003e9c <FreqSweepMenuInputHandler+0x1c8>)
 8003dee:	edc3 7a00 	vstr	s15, [r3]
							break;
 8003df2:	e02c      	b.n	8003e4e <FreqSweepMenuInputHandler+0x17a>
							if(ENCODER_TIMER->CNT >= MAX_OUTPUT_ARR)
 8003df4:	4b27      	ldr	r3, [pc, #156]	; (8003e94 <FreqSweepMenuInputHandler+0x1c0>)
 8003df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d904      	bls.n	8003e0a <FreqSweepMenuInputHandler+0x136>
								ENCODER_TIMER->CNT = MAX_OUTPUT_ARR;
 8003e00:	4b24      	ldr	r3, [pc, #144]	; (8003e94 <FreqSweepMenuInputHandler+0x1c0>)
 8003e02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e06:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 8003e08:	e020      	b.n	8003e4c <FreqSweepMenuInputHandler+0x178>
							else if (ENCODER_TIMER->CNT < sweep_lower_bounds_shortest_output_arr)
 8003e0a:	4b22      	ldr	r3, [pc, #136]	; (8003e94 <FreqSweepMenuInputHandler+0x1c0>)
 8003e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0e:	ee07 3a90 	vmov	s15, r3
 8003e12:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003e16:	4b21      	ldr	r3, [pc, #132]	; (8003e9c <FreqSweepMenuInputHandler+0x1c8>)
 8003e18:	edd3 7a00 	vldr	s15, [r3]
 8003e1c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e24:	d509      	bpl.n	8003e3a <FreqSweepMenuInputHandler+0x166>
								ENCODER_TIMER->CNT = sweep_lower_bounds_shortest_output_arr;
 8003e26:	4b1d      	ldr	r3, [pc, #116]	; (8003e9c <FreqSweepMenuInputHandler+0x1c8>)
 8003e28:	edd3 7a00 	vldr	s15, [r3]
 8003e2c:	4b19      	ldr	r3, [pc, #100]	; (8003e94 <FreqSweepMenuInputHandler+0x1c0>)
 8003e2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e32:	ee17 2a90 	vmov	r2, s15
 8003e36:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 8003e38:	e008      	b.n	8003e4c <FreqSweepMenuInputHandler+0x178>
								sweep_upper_bounds_longest_output_arr = ENCODER_TIMER->CNT;
 8003e3a:	4b16      	ldr	r3, [pc, #88]	; (8003e94 <FreqSweepMenuInputHandler+0x1c0>)
 8003e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3e:	ee07 3a90 	vmov	s15, r3
 8003e42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e46:	4b14      	ldr	r3, [pc, #80]	; (8003e98 <FreqSweepMenuInputHandler+0x1c4>)
 8003e48:	edc3 7a00 	vstr	s15, [r3]
							break;
 8003e4c:	bf00      	nop
					break;
 8003e4e:	bf00      	nop
			break;
 8003e50:	e008      	b.n	8003e64 <FreqSweepMenuInputHandler+0x190>

		// set sweep speed button
		case evSweepSpeedBtn:
			_setEncoderControlMode(ENCODER_SWEEP_SPEED_FUNCTION);
 8003e52:	2000      	movs	r0, #0
 8003e54:	f000 f984 	bl	8004160 <_setEncoderControlMode>

			break;
 8003e58:	e004      	b.n	8003e64 <FreqSweepMenuInputHandler+0x190>

		// set sweep limit button
		case evSweepLimitBtn:
			_setEncoderControlMode(ENCODER_SWEEP_LIMIT_FUNCTION);
 8003e5a:	2001      	movs	r0, #1
 8003e5c:	f000 f980 	bl	8004160 <_setEncoderControlMode>
					break;
			}
			*/
			// switch(active_sweep_mode)

			break;
 8003e60:	e000      	b.n	8003e64 <FreqSweepMenuInputHandler+0x190>

		default:
			break;
 8003e62:	bf00      	nop
	}
	// switch(pEvent)


	// stay in this state
	eNewEvent = evIdle;
 8003e64:	4b0e      	ldr	r3, [pc, #56]	; (8003ea0 <FreqSweepMenuInputHandler+0x1cc>)
 8003e66:	2200      	movs	r2, #0
 8003e68:	701a      	strb	r2, [r3, #0]
	return Freq_Sweep_Menu_State;
 8003e6a:	230d      	movs	r3, #13
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3708      	adds	r7, #8
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	08012eb0 	.word	0x08012eb0
 8003e78:	08012edc 	.word	0x08012edc
 8003e7c:	40000c00 	.word	0x40000c00
 8003e80:	08012ef4 	.word	0x08012ef4
 8003e84:	20001ec4 	.word	0x20001ec4
 8003e88:	20001ec5 	.word	0x20001ec5
 8003e8c:	08012f0c 	.word	0x08012f0c
 8003e90:	20001ee0 	.word	0x20001ee0
 8003e94:	40012c00 	.word	0x40012c00
 8003e98:	20000004 	.word	0x20000004
 8003e9c:	20000000 	.word	0x20000000
 8003ea0:	20001ec3 	.word	0x20001ec3

08003ea4 <FreqSweepMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqSweepMenuExitHandler()
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqSweepMenuExitHandler Event captured\n");
 8003ea8:	480c      	ldr	r0, [pc, #48]	; (8003edc <FreqSweepMenuExitHandler+0x38>)
 8003eaa:	f00b fa3f 	bl	800f32c <puts>
	#endif

	DM_RefreshScreen();
 8003eae:	f7fd fac1 	bl	8001434 <DM_RefreshScreen>

	// disable sweep timer and interrupts
	SWEEP_TIMER->DIER 	&= ~(TIM_DIER_UIE);
 8003eb2:	4b0b      	ldr	r3, [pc, #44]	; (8003ee0 <FreqSweepMenuExitHandler+0x3c>)
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	4a0a      	ldr	r2, [pc, #40]	; (8003ee0 <FreqSweepMenuExitHandler+0x3c>)
 8003eb8:	f023 0301 	bic.w	r3, r3, #1
 8003ebc:	60d3      	str	r3, [r2, #12]
	SWEEP_TIMER->CR1 	&= ~(TIM_CR1_CEN);
 8003ebe:	4b08      	ldr	r3, [pc, #32]	; (8003ee0 <FreqSweepMenuExitHandler+0x3c>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a07      	ldr	r2, [pc, #28]	; (8003ee0 <FreqSweepMenuExitHandler+0x3c>)
 8003ec4:	f023 0301 	bic.w	r3, r3, #1
 8003ec8:	6013      	str	r3, [r2, #0]



	// disable the menu
	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 8003eca:	4b06      	ldr	r3, [pc, #24]	; (8003ee4 <FreqSweepMenuExitHandler+0x40>)
 8003ecc:	2201      	movs	r2, #1
 8003ece:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 8003ed0:	4b05      	ldr	r3, [pc, #20]	; (8003ee8 <FreqSweepMenuExitHandler+0x44>)
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8003ed6:	230a      	movs	r3, #10
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	08012f24 	.word	0x08012f24
 8003ee0:	40000c00 	.word	0x40000c00
 8003ee4:	20001ec6 	.word	0x20001ec6
 8003ee8:	20001ec3 	.word	0x20001ec3

08003eec <FreqMainMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqMainMenuEntryHandler()
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqMainMenuEntryHandler Event captured\n");
 8003ef0:	4806      	ldr	r0, [pc, #24]	; (8003f0c <FreqMainMenuEntryHandler+0x20>)
 8003ef2:	f00b fa1b 	bl	800f32c <puts>
	#endif

	DM_RefreshScreen();
 8003ef6:	f7fd fa9d 	bl	8001434 <DM_RefreshScreen>

	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 8003efa:	4b05      	ldr	r3, [pc, #20]	; (8003f10 <FreqMainMenuEntryHandler+0x24>)
 8003efc:	2201      	movs	r2, #1
 8003efe:	701a      	strb	r2, [r3, #0]

	// stay in this state
	eNewEvent = evIdle;
 8003f00:	4b04      	ldr	r3, [pc, #16]	; (8003f14 <FreqMainMenuEntryHandler+0x28>)
 8003f02:	2200      	movs	r2, #0
 8003f04:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8003f06:	230a      	movs	r3, #10
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	08012f4c 	.word	0x08012f4c
 8003f10:	20001ec6 	.word	0x20001ec6
 8003f14:	20001ec3 	.word	0x20001ec3

08003f18 <FreqMainMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqMainMenuExitHandler()
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqMainMenuExitHandler Event captured\n");
 8003f1c:	480a      	ldr	r0, [pc, #40]	; (8003f48 <FreqMainMenuExitHandler+0x30>)
 8003f1e:	f00b fa05 	bl	800f32c <puts>
	#endif


	// disable the menu
	eNextFreqMenuStatus = DISABLE_FREQ_MENU;
 8003f22:	4b0a      	ldr	r3, [pc, #40]	; (8003f4c <FreqMainMenuExitHandler+0x34>)
 8003f24:	2200      	movs	r2, #0
 8003f26:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

	ENCODER_TIMER->ARR = 1024;
 8003f28:	4b09      	ldr	r3, [pc, #36]	; (8003f50 <FreqMainMenuExitHandler+0x38>)
 8003f2a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f2e:	62da      	str	r2, [r3, #44]	; 0x2c

	DM_RefreshScreen();
 8003f30:	f7fd fa80 	bl	8001434 <DM_RefreshScreen>

	#ifdef SWV_DEBUG_ENABLED
		  printf("returning to Idle State\n");
 8003f34:	4807      	ldr	r0, [pc, #28]	; (8003f54 <FreqMainMenuExitHandler+0x3c>)
 8003f36:	f00b f9f9 	bl	800f32c <puts>
	#endif

	eNewEvent = evIdle;
 8003f3a:	4b07      	ldr	r3, [pc, #28]	; (8003f58 <FreqMainMenuExitHandler+0x40>)
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 8003f40:	2301      	movs	r3, #1
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	08012f9c 	.word	0x08012f9c
 8003f4c:	20001ec6 	.word	0x20001ec6
 8003f50:	40012c00 	.word	0x40012c00
 8003f54:	08012fc4 	.word	0x08012fc4
 8003f58:	20001ec3 	.word	0x20001ec3

08003f5c <FreqPresetMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuEntryHandler()
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b082      	sub	sp, #8
 8003f60:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqPresetMenuEntryHandler Event captured\n");
 8003f62:	4812      	ldr	r0, [pc, #72]	; (8003fac <FreqPresetMenuEntryHandler+0x50>)
 8003f64:	f00b f9e2 	bl	800f32c <puts>
	#endif

	DM_RefreshScreen();
 8003f68:	f7fd fa64 	bl	8001434 <DM_RefreshScreen>

	eNextFreqMenuStatus = ENABLE_FREQ_PRESET_MENU;
 8003f6c:	4b10      	ldr	r3, [pc, #64]	; (8003fb0 <FreqPresetMenuEntryHandler+0x54>)
 8003f6e:	2202      	movs	r2, #2
 8003f70:	701a      	strb	r2, [r3, #0]

	FreqProfile_t *pFreqPresetTmp =  FreqO_GetFPresetObject();
 8003f72:	f000 ffb1 	bl	8004ed8 <FreqO_GetFPresetObject>
 8003f76:	6078      	str	r0, [r7, #4]
	if(pFreqPresetTmp)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d00a      	beq.n	8003f94 <FreqPresetMenuEntryHandler+0x38>
	{
		ENCODER_TIMER->CNT = pFreqPresetTmp->epos;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	791a      	ldrb	r2, [r3, #4]
 8003f82:	4b0c      	ldr	r3, [pc, #48]	; (8003fb4 <FreqPresetMenuEntryHandler+0x58>)
 8003f84:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = FreqO_GetFreqPresetEncoderRange();
 8003f86:	f000 ffd9 	bl	8004f3c <FreqO_GetFreqPresetEncoderRange>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	4b09      	ldr	r3, [pc, #36]	; (8003fb4 <FreqPresetMenuEntryHandler+0x58>)
 8003f90:	62da      	str	r2, [r3, #44]	; 0x2c
 8003f92:	e002      	b.n	8003f9a <FreqPresetMenuEntryHandler+0x3e>
	}
	else
	{
		DM_SetErrorDebugMsg("_FreqPresetMenuEntryHandler: pFreqPresetTmp null pointer");
 8003f94:	4808      	ldr	r0, [pc, #32]	; (8003fb8 <FreqPresetMenuEntryHandler+0x5c>)
 8003f96:	f7fd fa93 	bl	80014c0 <DM_SetErrorDebugMsg>
	}


	// stay in this state
	eNewEvent = evIdle;
 8003f9a:	4b08      	ldr	r3, [pc, #32]	; (8003fbc <FreqPresetMenuEntryHandler+0x60>)
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	701a      	strb	r2, [r3, #0]
	return Freq_Preset_Menu_State;
 8003fa0:	230b      	movs	r3, #11
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3708      	adds	r7, #8
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	08012fdc 	.word	0x08012fdc
 8003fb0:	20001ec6 	.word	0x20001ec6
 8003fb4:	40012c00 	.word	0x40012c00
 8003fb8:	08013008 	.word	0x08013008
 8003fbc:	20001ec3 	.word	0x20001ec3

08003fc0 <FreqPresetMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuInputHandler()
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqPresetMenuInputHandler Event captured\n");
 8003fc4:	4807      	ldr	r0, [pc, #28]	; (8003fe4 <FreqPresetMenuInputHandler+0x24>)
 8003fc6:	f00b f9b1 	bl	800f32c <puts>
	#endif

	FreqO_ModifyOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 8003fca:	2001      	movs	r0, #1
 8003fcc:	f001 fbb8 	bl	8005740 <SM_GetEncoderValue>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f000 fe8e 	bl	8004cf4 <FreqO_ModifyOutput>

	// stay in this state
	eNewEvent = evIdle;
 8003fd8:	4b03      	ldr	r3, [pc, #12]	; (8003fe8 <FreqPresetMenuInputHandler+0x28>)
 8003fda:	2200      	movs	r2, #0
 8003fdc:	701a      	strb	r2, [r3, #0]
	return Freq_Preset_Menu_State;
 8003fde:	230b      	movs	r3, #11
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	08013044 	.word	0x08013044
 8003fe8:	20001ec3 	.word	0x20001ec3

08003fec <FreqPresetMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuExitHandler()
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqPresetMenuExitHandler Event captured\n");
 8003ff0:	4806      	ldr	r0, [pc, #24]	; (800400c <FreqPresetMenuExitHandler+0x20>)
 8003ff2:	f00b f99b 	bl	800f32c <puts>
	#endif

	DM_RefreshScreen();
 8003ff6:	f7fd fa1d 	bl	8001434 <DM_RefreshScreen>

	// disable the menu
	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 8003ffa:	4b05      	ldr	r3, [pc, #20]	; (8004010 <FreqPresetMenuExitHandler+0x24>)
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 8004000:	4b04      	ldr	r3, [pc, #16]	; (8004014 <FreqPresetMenuExitHandler+0x28>)
 8004002:	2200      	movs	r2, #0
 8004004:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8004006:	230a      	movs	r3, #10
}
 8004008:	4618      	mov	r0, r3
 800400a:	bd80      	pop	{r7, pc}
 800400c:	08013070 	.word	0x08013070
 8004010:	20001ec6 	.word	0x20001ec6
 8004014:	20001ec3 	.word	0x20001ec3

08004018 <FreqAdjustMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuEntryHandler()
{
 8004018:	b580      	push	{r7, lr}
 800401a:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqAdjustMenuEntryHandler Event captured\n");
 800401c:	480a      	ldr	r0, [pc, #40]	; (8004048 <FreqAdjustMenuEntryHandler+0x30>)
 800401e:	f00b f985 	bl	800f32c <puts>
	#endif

	DM_RefreshScreen();
 8004022:	f7fd fa07 	bl	8001434 <DM_RefreshScreen>

	eNextFreqMenuStatus = ENABLE_FREQ_ADJUST_MENU;
 8004026:	4b09      	ldr	r3, [pc, #36]	; (800404c <FreqAdjustMenuEntryHandler+0x34>)
 8004028:	2203      	movs	r2, #3
 800402a:	701a      	strb	r2, [r3, #0]

	// set the rotary encoder limits to 0-? for this menu
	ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
 800402c:	4b08      	ldr	r3, [pc, #32]	; (8004050 <FreqAdjustMenuEntryHandler+0x38>)
 800402e:	4a09      	ldr	r2, [pc, #36]	; (8004054 <FreqAdjustMenuEntryHandler+0x3c>)
 8004030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004032:	6253      	str	r3, [r2, #36]	; 0x24
	ENCODER_TIMER->ARR = 65535;
 8004034:	4b07      	ldr	r3, [pc, #28]	; (8004054 <FreqAdjustMenuEntryHandler+0x3c>)
 8004036:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800403a:	62da      	str	r2, [r3, #44]	; 0x2c

	// stay in this state
	eNewEvent = evIdle;
 800403c:	4b06      	ldr	r3, [pc, #24]	; (8004058 <FreqAdjustMenuEntryHandler+0x40>)
 800403e:	2200      	movs	r2, #0
 8004040:	701a      	strb	r2, [r3, #0]
	return Freq_Adjust_Menu_State;
 8004042:	230c      	movs	r3, #12
}
 8004044:	4618      	mov	r0, r3
 8004046:	bd80      	pop	{r7, pc}
 8004048:	0801309c 	.word	0x0801309c
 800404c:	20001ec6 	.word	0x20001ec6
 8004050:	40013400 	.word	0x40013400
 8004054:	40012c00 	.word	0x40012c00
 8004058:	20001ec3 	.word	0x20001ec3

0800405c <FreqAdjustMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuInputHandler()
{
 800405c:	b580      	push	{r7, lr}
 800405e:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqAdjustMenuInputHandler Event captured\n");
 8004060:	4805      	ldr	r0, [pc, #20]	; (8004078 <FreqAdjustMenuInputHandler+0x1c>)
 8004062:	f00b f963 	bl	800f32c <puts>
	#endif

	FreqO_AdjustFreq();
 8004066:	f000 fe37 	bl	8004cd8 <FreqO_AdjustFreq>

	// stay in this state
	eNewEvent = evIdle;
 800406a:	4b04      	ldr	r3, [pc, #16]	; (800407c <FreqAdjustMenuInputHandler+0x20>)
 800406c:	2200      	movs	r2, #0
 800406e:	701a      	strb	r2, [r3, #0]
	return Freq_Adjust_Menu_State;
 8004070:	230c      	movs	r3, #12
}
 8004072:	4618      	mov	r0, r3
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop
 8004078:	08012eb0 	.word	0x08012eb0
 800407c:	20001ec3 	.word	0x20001ec3

08004080 <FreqAdjustMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuExitHandler()
{
 8004080:	b580      	push	{r7, lr}
 8004082:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqAdjustMenuExitHandler Event captured\n");
 8004084:	4806      	ldr	r0, [pc, #24]	; (80040a0 <FreqAdjustMenuExitHandler+0x20>)
 8004086:	f00b f951 	bl	800f32c <puts>
	#endif

	DM_RefreshScreen();
 800408a:	f7fd f9d3 	bl	8001434 <DM_RefreshScreen>

	// disable the menu
	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 800408e:	4b05      	ldr	r3, [pc, #20]	; (80040a4 <FreqAdjustMenuExitHandler+0x24>)
 8004090:	2201      	movs	r2, #1
 8004092:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 8004094:	4b04      	ldr	r3, [pc, #16]	; (80040a8 <FreqAdjustMenuExitHandler+0x28>)
 8004096:	2200      	movs	r2, #0
 8004098:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 800409a:	230a      	movs	r3, #10
}
 800409c:	4618      	mov	r0, r3
 800409e:	bd80      	pop	{r7, pc}
 80040a0:	080130c8 	.word	0x080130c8
 80040a4:	20001ec6 	.word	0x20001ec6
 80040a8:	20001ec3 	.word	0x20001ec3

080040ac <_setSweepModeDown>:
 *	@param None
 *	@retval None
 *
 */
void _setSweepModeDown()
{
 80040ac:	b480      	push	{r7}
 80040ae:	af00      	add	r7, sp, #0
	// "Center-aligned" mode sets direction register to readonly,
	// so disable "Center-aligned" mode first
	SWEEP_TIMER->CR1 &= ~((TIM_CR1_CMS_0) | (TIM_CR1_CMS_1));
 80040b0:	4b10      	ldr	r3, [pc, #64]	; (80040f4 <_setSweepModeDown+0x48>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a0f      	ldr	r2, [pc, #60]	; (80040f4 <_setSweepModeDown+0x48>)
 80040b6:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80040ba:	6013      	str	r3, [r2, #0]

	// 0: Counter used as upcounter
	SWEEP_TIMER->CR1 |= (TIM_CR1_DIR);
 80040bc:	4b0d      	ldr	r3, [pc, #52]	; (80040f4 <_setSweepModeDown+0x48>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a0c      	ldr	r2, [pc, #48]	; (80040f4 <_setSweepModeDown+0x48>)
 80040c2:	f043 0310 	orr.w	r3, r3, #16
 80040c6:	6013      	str	r3, [r2, #0]

	sweep_lower_bounds_shortest_output_arr  = OUTPUT_TIMER->ARR;
 80040c8:	4b0b      	ldr	r3, [pc, #44]	; (80040f8 <_setSweepModeDown+0x4c>)
 80040ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040cc:	ee07 3a90 	vmov	s15, r3
 80040d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040d4:	4b09      	ldr	r3, [pc, #36]	; (80040fc <_setSweepModeDown+0x50>)
 80040d6:	edc3 7a00 	vstr	s15, [r3]
	sweep_upper_bounds_longest_output_arr  = MAX_OUTPUT_ARR;
 80040da:	4b09      	ldr	r3, [pc, #36]	; (8004100 <_setSweepModeDown+0x54>)
 80040dc:	4a09      	ldr	r2, [pc, #36]	; (8004104 <_setSweepModeDown+0x58>)
 80040de:	601a      	str	r2, [r3, #0]
	ENCODER_TIMER->CNT = MAX_OUTPUT_ARR;
 80040e0:	4b09      	ldr	r3, [pc, #36]	; (8004108 <_setSweepModeDown+0x5c>)
 80040e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80040e6:	625a      	str	r2, [r3, #36]	; 0x24

}
 80040e8:	bf00      	nop
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr
 80040f2:	bf00      	nop
 80040f4:	40000c00 	.word	0x40000c00
 80040f8:	40013400 	.word	0x40013400
 80040fc:	20000000 	.word	0x20000000
 8004100:	20000004 	.word	0x20000004
 8004104:	477fff00 	.word	0x477fff00
 8004108:	40012c00 	.word	0x40012c00

0800410c <_setSweepModeUp>:
 *	@param None
 *	@retval None
 *
 */
void _setSweepModeUp()
{
 800410c:	b480      	push	{r7}
 800410e:	af00      	add	r7, sp, #0

	// "Center-aligned" mode sets direction register to readonly,
	// so disable "Center-aligned" mode first
	SWEEP_TIMER->CR1 &= ~((TIM_CR1_CMS_0) | (TIM_CR1_CMS_1));
 8004110:	4b0e      	ldr	r3, [pc, #56]	; (800414c <_setSweepModeUp+0x40>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a0d      	ldr	r2, [pc, #52]	; (800414c <_setSweepModeUp+0x40>)
 8004116:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800411a:	6013      	str	r3, [r2, #0]

	// 1: Counter used as downcounter
	SWEEP_TIMER->CR1 &= ~(TIM_CR1_DIR);
 800411c:	4b0b      	ldr	r3, [pc, #44]	; (800414c <_setSweepModeUp+0x40>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a0a      	ldr	r2, [pc, #40]	; (800414c <_setSweepModeUp+0x40>)
 8004122:	f023 0310 	bic.w	r3, r3, #16
 8004126:	6013      	str	r3, [r2, #0]

	sweep_upper_bounds_longest_output_arr  = OUTPUT_TIMER->ARR;
 8004128:	4b09      	ldr	r3, [pc, #36]	; (8004150 <_setSweepModeUp+0x44>)
 800412a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800412c:	ee07 3a90 	vmov	s15, r3
 8004130:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004134:	4b07      	ldr	r3, [pc, #28]	; (8004154 <_setSweepModeUp+0x48>)
 8004136:	edc3 7a00 	vstr	s15, [r3]
	sweep_lower_bounds_shortest_output_arr  = MIN_OUTPUT_ARR;
 800413a:	4b07      	ldr	r3, [pc, #28]	; (8004158 <_setSweepModeUp+0x4c>)
 800413c:	4a07      	ldr	r2, [pc, #28]	; (800415c <_setSweepModeUp+0x50>)
 800413e:	601a      	str	r2, [r3, #0]


}
 8004140:	bf00      	nop
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop
 800414c:	40000c00 	.word	0x40000c00
 8004150:	40013400 	.word	0x40013400
 8004154:	20000004 	.word	0x20000004
 8004158:	20000000 	.word	0x20000000
 800415c:	41500000 	.word	0x41500000

08004160 <_setEncoderControlMode>:

void _setEncoderControlMode(eEncoderSweepFunctions pFunction)
{
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	4603      	mov	r3, r0
 8004168:	71fb      	strb	r3, [r7, #7]
	if(pFunction)
 800416a:	79fb      	ldrb	r3, [r7, #7]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d038      	beq.n	80041e2 <_setEncoderControlMode+0x82>
	{
		//	ENCODER_SWEEP_LIMIT_FUNCTION
		theCurrentEncoderSweepFunction = pFunction;
 8004170:	4a24      	ldr	r2, [pc, #144]	; (8004204 <_setEncoderControlMode+0xa4>)
 8004172:	79fb      	ldrb	r3, [r7, #7]
 8004174:	7013      	strb	r3, [r2, #0]
		ENCODER_TIMER->CNT = MIN_OUTPUT_ARR;
 8004176:	4b24      	ldr	r3, [pc, #144]	; (8004208 <_setEncoderControlMode+0xa8>)
 8004178:	220d      	movs	r2, #13
 800417a:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = MAX_OUTPUT_ARR;
 800417c:	4b22      	ldr	r3, [pc, #136]	; (8004208 <_setEncoderControlMode+0xa8>)
 800417e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004182:	62da      	str	r2, [r3, #44]	; 0x2c

		switch(active_sweep_mode)
 8004184:	4b21      	ldr	r3, [pc, #132]	; (800420c <_setEncoderControlMode+0xac>)
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d002      	beq.n	8004192 <_setEncoderControlMode+0x32>
 800418c:	2b01      	cmp	r3, #1
 800418e:	d014      	beq.n	80041ba <_setEncoderControlMode+0x5a>
					// if encoder position is below the lower bounds set it above it
					if(ENCODER_TIMER->CNT < sweep_lower_bounds_shortest_output_arr)
						ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
				break;
			default:
				break;
 8004190:	e031      	b.n	80041f6 <_setEncoderControlMode+0x96>
					if(ENCODER_TIMER->CNT > sweep_upper_bounds_longest_output_arr)
 8004192:	4b1d      	ldr	r3, [pc, #116]	; (8004208 <_setEncoderControlMode+0xa8>)
 8004194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004196:	ee07 3a90 	vmov	s15, r3
 800419a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800419e:	4b1c      	ldr	r3, [pc, #112]	; (8004210 <_setEncoderControlMode+0xb0>)
 80041a0:	edd3 7a00 	vldr	s15, [r3]
 80041a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80041a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041ac:	dc00      	bgt.n	80041b0 <_setEncoderControlMode+0x50>
				break;
 80041ae:	e022      	b.n	80041f6 <_setEncoderControlMode+0x96>
						 ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
 80041b0:	4b18      	ldr	r3, [pc, #96]	; (8004214 <_setEncoderControlMode+0xb4>)
 80041b2:	4a15      	ldr	r2, [pc, #84]	; (8004208 <_setEncoderControlMode+0xa8>)
 80041b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b6:	6253      	str	r3, [r2, #36]	; 0x24
				break;
 80041b8:	e01d      	b.n	80041f6 <_setEncoderControlMode+0x96>
					if(ENCODER_TIMER->CNT < sweep_lower_bounds_shortest_output_arr)
 80041ba:	4b13      	ldr	r3, [pc, #76]	; (8004208 <_setEncoderControlMode+0xa8>)
 80041bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041be:	ee07 3a90 	vmov	s15, r3
 80041c2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80041c6:	4b14      	ldr	r3, [pc, #80]	; (8004218 <_setEncoderControlMode+0xb8>)
 80041c8:	edd3 7a00 	vldr	s15, [r3]
 80041cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80041d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041d4:	d400      	bmi.n	80041d8 <_setEncoderControlMode+0x78>
				break;
 80041d6:	e00e      	b.n	80041f6 <_setEncoderControlMode+0x96>
						ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
 80041d8:	4b0e      	ldr	r3, [pc, #56]	; (8004214 <_setEncoderControlMode+0xb4>)
 80041da:	4a0b      	ldr	r2, [pc, #44]	; (8004208 <_setEncoderControlMode+0xa8>)
 80041dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041de:	6253      	str	r3, [r2, #36]	; 0x24
				break;
 80041e0:	e009      	b.n	80041f6 <_setEncoderControlMode+0x96>
		// switch(active_sweep_mode)
	}
	else
	{
		// ENCODER_SWEEP_SPEED_FUNCTION
		theCurrentEncoderSweepFunction = pFunction;
 80041e2:	4a08      	ldr	r2, [pc, #32]	; (8004204 <_setEncoderControlMode+0xa4>)
 80041e4:	79fb      	ldrb	r3, [r7, #7]
 80041e6:	7013      	strb	r3, [r2, #0]
		// encoder start value
		ENCODER_TIMER->CNT = 1;
 80041e8:	4b07      	ldr	r3, [pc, #28]	; (8004208 <_setEncoderControlMode+0xa8>)
 80041ea:	2201      	movs	r2, #1
 80041ec:	625a      	str	r2, [r3, #36]	; 0x24
		// encoder limit for default (set speed)
		ENCODER_TIMER->ARR = 1600;
 80041ee:	4b06      	ldr	r3, [pc, #24]	; (8004208 <_setEncoderControlMode+0xa8>)
 80041f0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80041f4:	62da      	str	r2, [r3, #44]	; 0x2c
	}



}
 80041f6:	bf00      	nop
 80041f8:	370c      	adds	r7, #12
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr
 8004202:	bf00      	nop
 8004204:	20001ec5 	.word	0x20001ec5
 8004208:	40012c00 	.word	0x40012c00
 800420c:	20001ec4 	.word	0x20001ec4
 8004210:	20000004 	.word	0x20000004
 8004214:	40013400 	.word	0x40013400
 8004218:	20000000 	.word	0x20000000
 800421c:	00000000 	.word	0x00000000

08004220 <_setSweepTimerAutoReloadForEncoderControl>:


void _setSweepTimerAutoReloadForEncoderControl(eEncoderSweepFunctions pFunction)
{
 8004220:	b590      	push	{r4, r7, lr}
 8004222:	b085      	sub	sp, #20
 8004224:	af00      	add	r7, sp, #0
 8004226:	4603      	mov	r3, r0
 8004228:	71fb      	strb	r3, [r7, #7]
	uint32_t next_sweep_tim_arr;

	if(pFunction)
 800422a:	79fb      	ldrb	r3, [r7, #7]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d122      	bne.n	8004276 <_setSweepTimerAutoReloadForEncoderControl+0x56>

	}
	else
	{
		// get logarithmic curve to speed up turns at low end
		next_sweep_tim_arr = MIN_SWEEP_ARR + (pow(ENCODER_TIMER->CNT, 3));
 8004230:	4b17      	ldr	r3, [pc, #92]	; (8004290 <_setSweepTimerAutoReloadForEncoderControl+0x70>)
 8004232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004234:	4618      	mov	r0, r3
 8004236:	f7fc f98d 	bl	8000554 <__aeabi_ui2d>
 800423a:	4603      	mov	r3, r0
 800423c:	460c      	mov	r4, r1
 800423e:	ed9f 1b10 	vldr	d1, [pc, #64]	; 8004280 <_setSweepTimerAutoReloadForEncoderControl+0x60>
 8004242:	ec44 3b10 	vmov	d0, r3, r4
 8004246:	f00d f84b 	bl	80112e0 <pow>
 800424a:	ec51 0b10 	vmov	r0, r1, d0
 800424e:	a30e      	add	r3, pc, #56	; (adr r3, 8004288 <_setSweepTimerAutoReloadForEncoderControl+0x68>)
 8004250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004254:	f7fc f842 	bl	80002dc <__adddf3>
 8004258:	4603      	mov	r3, r0
 800425a:	460c      	mov	r4, r1
 800425c:	4618      	mov	r0, r3
 800425e:	4621      	mov	r1, r4
 8004260:	f7fc fcca 	bl	8000bf8 <__aeabi_d2uiz>
 8004264:	4603      	mov	r3, r0
 8004266:	60fb      	str	r3, [r7, #12]

		if(next_sweep_tim_arr < 0xFFFFFFFF)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800426e:	d002      	beq.n	8004276 <_setSweepTimerAutoReloadForEncoderControl+0x56>
		{
			SWEEP_TIMER->ARR = next_sweep_tim_arr;
 8004270:	4a08      	ldr	r2, [pc, #32]	; (8004294 <_setSweepTimerAutoReloadForEncoderControl+0x74>)
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	62d3      	str	r3, [r2, #44]	; 0x2c

		}
	}
}
 8004276:	bf00      	nop
 8004278:	3714      	adds	r7, #20
 800427a:	46bd      	mov	sp, r7
 800427c:	bd90      	pop	{r4, r7, pc}
 800427e:	bf00      	nop
 8004280:	00000000 	.word	0x00000000
 8004284:	40080000 	.word	0x40080000
 8004288:	00000000 	.word	0x00000000
 800428c:	40d06800 	.word	0x40d06800
 8004290:	40012c00 	.word	0x40012c00
 8004294:	40000c00 	.word	0x40000c00

08004298 <_getCalculatedSweepFrequencyInHertz>:

float _getCalculatedSweepFrequencyInHertz()
{
 8004298:	b480      	push	{r7}
 800429a:	af00      	add	r7, sp, #0
	if(SWEEP_TIMER->PSC == 0)
 800429c:	4b13      	ldr	r3, [pc, #76]	; (80042ec <_getCalculatedSweepFrequencyInHertz+0x54>)
 800429e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d10a      	bne.n	80042ba <_getCalculatedSweepFrequencyInHertz+0x22>
	{
		return (float)SM_MCLK / ((float)1 * (float)SWEEP_TIMER->ARR);
 80042a4:	4b11      	ldr	r3, [pc, #68]	; (80042ec <_getCalculatedSweepFrequencyInHertz+0x54>)
 80042a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a8:	ee07 3a90 	vmov	s15, r3
 80042ac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80042b0:	eddf 6a0f 	vldr	s13, [pc, #60]	; 80042f0 <_getCalculatedSweepFrequencyInHertz+0x58>
 80042b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80042b8:	e011      	b.n	80042de <_getCalculatedSweepFrequencyInHertz+0x46>
	}
	else
	{
		return (float)SM_MCLK / ((float)SWEEP_TIMER->PSC * (float)SWEEP_TIMER->ARR);
 80042ba:	4b0c      	ldr	r3, [pc, #48]	; (80042ec <_getCalculatedSweepFrequencyInHertz+0x54>)
 80042bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042be:	ee07 3a90 	vmov	s15, r3
 80042c2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80042c6:	4b09      	ldr	r3, [pc, #36]	; (80042ec <_getCalculatedSweepFrequencyInHertz+0x54>)
 80042c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ca:	ee07 3a90 	vmov	s15, r3
 80042ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80042d6:	eddf 6a06 	vldr	s13, [pc, #24]	; 80042f0 <_getCalculatedSweepFrequencyInHertz+0x58>
 80042da:	eec6 7a87 	vdiv.f32	s15, s13, s14
	}

}
 80042de:	eeb0 0a67 	vmov.f32	s0, s15
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr
 80042ea:	bf00      	nop
 80042ec:	40000c00 	.word	0x40000c00
 80042f0:	4d2037a0 	.word	0x4d2037a0

080042f4 <FreqMenu_getStatus>:
 *	@param None
 *	@retval None
 *
 */
eFreqMenu_Status FreqMenu_getStatus()
{
 80042f4:	b480      	push	{r7}
 80042f6:	af00      	add	r7, sp, #0
	return eNextFreqMenuStatus;
 80042f8:	4b03      	ldr	r3, [pc, #12]	; (8004308 <FreqMenu_getStatus+0x14>)
 80042fa:	781b      	ldrb	r3, [r3, #0]
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr
 8004306:	bf00      	nop
 8004308:	20001ec6 	.word	0x20001ec6

0800430c <FuncMenu_getStatus>:
#include <stdio.h>

eFuncMenu_Status eNextFuncMenuStatus = 	DISABLE_FUNC_MENU;

eFuncMenu_Status FuncMenu_getStatus()
{
 800430c:	b480      	push	{r7}
 800430e:	af00      	add	r7, sp, #0
	return eNextFuncMenuStatus;
 8004310:	4b03      	ldr	r3, [pc, #12]	; (8004320 <FuncMenu_getStatus+0x14>)
 8004312:	781b      	ldrb	r3, [r3, #0]
}
 8004314:	4618      	mov	r0, r3
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr
 800431e:	bf00      	nop
 8004320:	20001ec7 	.word	0x20001ec7

08004324 <FuncMainMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncMainMenuEntryHandler(void)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("FuncMainMenuEntryHandler Event captured\n");
 8004328:	4806      	ldr	r0, [pc, #24]	; (8004344 <FuncMainMenuEntryHandler+0x20>)
 800432a:	f00a ffff 	bl	800f32c <puts>
#endif

	DM_RefreshScreen();
 800432e:	f7fd f881 	bl	8001434 <DM_RefreshScreen>


	eNextFuncMenuStatus = 	ENABLE_FUNC_MAIN_MENU;
 8004332:	4b05      	ldr	r3, [pc, #20]	; (8004348 <FuncMainMenuEntryHandler+0x24>)
 8004334:	2201      	movs	r2, #1
 8004336:	701a      	strb	r2, [r3, #0]
	else
	{
		DM_SetErrorDebugMsg("_FuncMenuEntryHandler: func_profileTmp null pointer");
	}
*/
	eNewEvent = evIdle;
 8004338:	4b04      	ldr	r3, [pc, #16]	; (800434c <FuncMainMenuEntryHandler+0x28>)
 800433a:	2200      	movs	r2, #0
 800433c:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 800433e:	2303      	movs	r3, #3
}
 8004340:	4618      	mov	r0, r3
 8004342:	bd80      	pop	{r7, pc}
 8004344:	080130f4 	.word	0x080130f4
 8004348:	20001ec7 	.word	0x20001ec7
 800434c:	20001ec3 	.word	0x20001ec3

08004350 <FuncMainMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncMainMenuExitHandler()
{
 8004350:	b580      	push	{r7, lr}
 8004352:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("FuncMainMenuExitHandler Event captured\n");
 8004354:	4808      	ldr	r0, [pc, #32]	; (8004378 <FuncMainMenuExitHandler+0x28>)
 8004356:	f00a ffe9 	bl	800f32c <puts>
#endif

	// disable the menu

	eNextFuncMenuStatus = 	DISABLE_FUNC_MENU;
 800435a:	4b08      	ldr	r3, [pc, #32]	; (800437c <FuncMainMenuExitHandler+0x2c>)
 800435c:	2200      	movs	r2, #0
 800435e:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

//	ENCODER_TIMER->ARR = 1024;

	DM_RefreshScreen();
 8004360:	f7fd f868 	bl	8001434 <DM_RefreshScreen>

#ifdef SWV_DEBUG_ENABLED
	  printf("returning to Idle State\n");
 8004364:	4806      	ldr	r0, [pc, #24]	; (8004380 <FuncMainMenuExitHandler+0x30>)
 8004366:	f00a ffe1 	bl	800f32c <puts>
#endif

	eNewEvent = evIdle;
 800436a:	4b06      	ldr	r3, [pc, #24]	; (8004384 <FuncMainMenuExitHandler+0x34>)
 800436c:	2200      	movs	r2, #0
 800436e:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 8004370:	2301      	movs	r3, #1
}
 8004372:	4618      	mov	r0, r3
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	08013144 	.word	0x08013144
 800437c:	20001ec7 	.word	0x20001ec7
 8004380:	0801316c 	.word	0x0801316c
 8004384:	20001ec3 	.word	0x20001ec3

08004388 <FuncSignalMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuEntryHandler(void)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b082      	sub	sp, #8
 800438c:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("FuncSignalMenuEntryHandler Event captured\n");
 800438e:	4814      	ldr	r0, [pc, #80]	; (80043e0 <FuncSignalMenuEntryHandler+0x58>)
 8004390:	f00a ffcc 	bl	800f32c <puts>
#endif

	DM_RefreshScreen();
 8004394:	f7fd f84e 	bl	8001434 <DM_RefreshScreen>

	eNextFuncMenuStatus = 	ENABLE_FUNC_SIGNAL_MENU;
 8004398:	4b12      	ldr	r3, [pc, #72]	; (80043e4 <FuncSignalMenuEntryHandler+0x5c>)
 800439a:	2202      	movs	r2, #2
 800439c:	701a      	strb	r2, [r3, #0]

	//FunctionProfile_t *func_profileTmp =  FuncO_GetSignalFPresetObject();
	FunctionProfile_t *func_profileTmp = SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile;
 800439e:	2000      	movs	r0, #0
 80043a0:	f001 f9b8 	bl	8005714 <SM_GetOutputChannel>
 80043a4:	4603      	mov	r3, r0
 80043a6:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 80043aa:	607b      	str	r3, [r7, #4]
	if(func_profileTmp)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d00a      	beq.n	80043c8 <FuncSignalMenuEntryHandler+0x40>
	{
		ENCODER_TIMER->CNT = func_profileTmp->epos;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	785a      	ldrb	r2, [r3, #1]
 80043b6:	4b0c      	ldr	r3, [pc, #48]	; (80043e8 <FuncSignalMenuEntryHandler+0x60>)
 80043b8:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = FuncO_GetFuncPresetEncoderRange();
 80043ba:	f000 ff3d 	bl	8005238 <FuncO_GetFuncPresetEncoderRange>
 80043be:	4603      	mov	r3, r0
 80043c0:	461a      	mov	r2, r3
 80043c2:	4b09      	ldr	r3, [pc, #36]	; (80043e8 <FuncSignalMenuEntryHandler+0x60>)
 80043c4:	62da      	str	r2, [r3, #44]	; 0x2c
 80043c6:	e002      	b.n	80043ce <FuncSignalMenuEntryHandler+0x46>
	}
	else
	{
		DM_SetErrorDebugMsg("_FuncMenuEntryHandler: func_profileTmp null pointer");
 80043c8:	4808      	ldr	r0, [pc, #32]	; (80043ec <FuncSignalMenuEntryHandler+0x64>)
 80043ca:	f7fd f879 	bl	80014c0 <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 80043ce:	4b08      	ldr	r3, [pc, #32]	; (80043f0 <FuncSignalMenuEntryHandler+0x68>)
 80043d0:	2200      	movs	r2, #0
 80043d2:	701a      	strb	r2, [r3, #0]
	return Func_Signal_Menu_State;
 80043d4:	2304      	movs	r3, #4
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3708      	adds	r7, #8
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	08013184 	.word	0x08013184
 80043e4:	20001ec7 	.word	0x20001ec7
 80043e8:	40012c00 	.word	0x40012c00
 80043ec:	080131b0 	.word	0x080131b0
 80043f0:	20001ec3 	.word	0x20001ec3

080043f4 <FuncSignalMenuInputHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuInputHandler(void)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("FuncSignalMenuInputHandler Event captured\n");
 80043f8:	4807      	ldr	r0, [pc, #28]	; (8004418 <FuncSignalMenuInputHandler+0x24>)
 80043fa:	f00a ff97 	bl	800f32c <puts>
#endif


	FuncO_ModifySignalOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 80043fe:	2001      	movs	r0, #1
 8004400:	f001 f99e 	bl	8005740 <SM_GetEncoderValue>
 8004404:	4603      	mov	r3, r0
 8004406:	4618      	mov	r0, r3
 8004408:	f000 fdac 	bl	8004f64 <FuncO_ModifySignalOutput>
	eNewEvent = evBlueBtn;
 800440c:	4b03      	ldr	r3, [pc, #12]	; (800441c <FuncSignalMenuInputHandler+0x28>)
 800440e:	2201      	movs	r2, #1
 8004410:	701a      	strb	r2, [r3, #0]
	return Func_Signal_Menu_State;
 8004412:	2304      	movs	r3, #4
}
 8004414:	4618      	mov	r0, r3
 8004416:	bd80      	pop	{r7, pc}
 8004418:	080131e4 	.word	0x080131e4
 800441c:	20001ec3 	.word	0x20001ec3

08004420 <FuncSignalMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuExitHandler()
{
 8004420:	b580      	push	{r7, lr}
 8004422:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("FuncSignalMenuExitHandler Event captured\n");
 8004424:	4806      	ldr	r0, [pc, #24]	; (8004440 <FuncSignalMenuExitHandler+0x20>)
 8004426:	f00a ff81 	bl	800f32c <puts>
#endif

	// disable the menu

	eNextFuncMenuStatus = 	ENABLE_FUNC_MAIN_MENU;
 800442a:	4b06      	ldr	r3, [pc, #24]	; (8004444 <FuncSignalMenuExitHandler+0x24>)
 800442c:	2201      	movs	r2, #1
 800442e:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

//	ENCODER_TIMER->ARR = 1024;

	DM_RefreshScreen();
 8004430:	f7fd f800 	bl	8001434 <DM_RefreshScreen>

	eNewEvent = evIdle;
 8004434:	4b04      	ldr	r3, [pc, #16]	; (8004448 <FuncSignalMenuExitHandler+0x28>)
 8004436:	2200      	movs	r2, #0
 8004438:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 800443a:	2303      	movs	r3, #3
}
 800443c:	4618      	mov	r0, r3
 800443e:	bd80      	pop	{r7, pc}
 8004440:	08013210 	.word	0x08013210
 8004444:	20001ec7 	.word	0x20001ec7
 8004448:	20001ec3 	.word	0x20001ec3

0800444c <FuncSyncMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSyncMenuEntryHandler(void)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b082      	sub	sp, #8
 8004450:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("FuncSyncMenuEntryHandler Event captured\n");
 8004452:	4814      	ldr	r0, [pc, #80]	; (80044a4 <FuncSyncMenuEntryHandler+0x58>)
 8004454:	f00a ff6a 	bl	800f32c <puts>
#endif

	DM_RefreshScreen();
 8004458:	f7fc ffec 	bl	8001434 <DM_RefreshScreen>

	eNextFuncMenuStatus = 	ENABLE_FUNC_SYNC_MENU;
 800445c:	4b12      	ldr	r3, [pc, #72]	; (80044a8 <FuncSyncMenuEntryHandler+0x5c>)
 800445e:	2203      	movs	r2, #3
 8004460:	701a      	strb	r2, [r3, #0]

	//FunctionProfile_t *func_profileTmp =  FuncO_GetSyncFPresetObject();
	FunctionProfile_t *func_profileTmp = SM_GetOutputChannel(SYNC_CHANNEL)->func_profile;
 8004462:	2001      	movs	r0, #1
 8004464:	f001 f956 	bl	8005714 <SM_GetOutputChannel>
 8004468:	4603      	mov	r3, r0
 800446a:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 800446e:	607b      	str	r3, [r7, #4]
	if(func_profileTmp)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d00a      	beq.n	800448c <FuncSyncMenuEntryHandler+0x40>
	{
		ENCODER_TIMER->CNT = func_profileTmp->epos;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	785a      	ldrb	r2, [r3, #1]
 800447a:	4b0c      	ldr	r3, [pc, #48]	; (80044ac <FuncSyncMenuEntryHandler+0x60>)
 800447c:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = FuncO_GetFuncPresetEncoderRange();
 800447e:	f000 fedb 	bl	8005238 <FuncO_GetFuncPresetEncoderRange>
 8004482:	4603      	mov	r3, r0
 8004484:	461a      	mov	r2, r3
 8004486:	4b09      	ldr	r3, [pc, #36]	; (80044ac <FuncSyncMenuEntryHandler+0x60>)
 8004488:	62da      	str	r2, [r3, #44]	; 0x2c
 800448a:	e002      	b.n	8004492 <FuncSyncMenuEntryHandler+0x46>
	}
	else
	{
		DM_SetErrorDebugMsg("_FuncMenuEntryHandler: func_profileTmp null pointer");
 800448c:	4808      	ldr	r0, [pc, #32]	; (80044b0 <FuncSyncMenuEntryHandler+0x64>)
 800448e:	f7fd f817 	bl	80014c0 <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 8004492:	4b08      	ldr	r3, [pc, #32]	; (80044b4 <FuncSyncMenuEntryHandler+0x68>)
 8004494:	2200      	movs	r2, #0
 8004496:	701a      	strb	r2, [r3, #0]
	return Func_Sync_Menu_State;
 8004498:	2305      	movs	r3, #5
}
 800449a:	4618      	mov	r0, r3
 800449c:	3708      	adds	r7, #8
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	0801323c 	.word	0x0801323c
 80044a8:	20001ec7 	.word	0x20001ec7
 80044ac:	40012c00 	.word	0x40012c00
 80044b0:	080131b0 	.word	0x080131b0
 80044b4:	20001ec3 	.word	0x20001ec3

080044b8 <FuncSyncMenuInputHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSyncMenuInputHandler(void)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("FuncSyncMenuInputHandler Event captured\n");
 80044bc:	4807      	ldr	r0, [pc, #28]	; (80044dc <FuncSyncMenuInputHandler+0x24>)
 80044be:	f00a ff35 	bl	800f32c <puts>
#endif


	FuncO_ModifySyncOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 80044c2:	2001      	movs	r0, #1
 80044c4:	f001 f93c 	bl	8005740 <SM_GetEncoderValue>
 80044c8:	4603      	mov	r3, r0
 80044ca:	4618      	mov	r0, r3
 80044cc:	f000 fda2 	bl	8005014 <FuncO_ModifySyncOutput>
	eNewEvent = evBlueBtn;
 80044d0:	4b03      	ldr	r3, [pc, #12]	; (80044e0 <FuncSyncMenuInputHandler+0x28>)
 80044d2:	2201      	movs	r2, #1
 80044d4:	701a      	strb	r2, [r3, #0]
	return Func_Sync_Menu_State;
 80044d6:	2305      	movs	r3, #5
}
 80044d8:	4618      	mov	r0, r3
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	08013264 	.word	0x08013264
 80044e0:	20001ec3 	.word	0x20001ec3

080044e4 <FuncSyncMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSyncMenuExitHandler()
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("FuncSyncMenuExitHandler Event captured\n");
 80044e8:	4806      	ldr	r0, [pc, #24]	; (8004504 <FuncSyncMenuExitHandler+0x20>)
 80044ea:	f00a ff1f 	bl	800f32c <puts>
#endif

	// disable the menu

	eNextFuncMenuStatus = 	ENABLE_FUNC_MAIN_MENU;
 80044ee:	4b06      	ldr	r3, [pc, #24]	; (8004508 <FuncSyncMenuExitHandler+0x24>)
 80044f0:	2201      	movs	r2, #1
 80044f2:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

	//ENCODER_TIMER->ARR = 1024;

	DM_RefreshScreen();
 80044f4:	f7fc ff9e 	bl	8001434 <DM_RefreshScreen>

	eNewEvent = evIdle;
 80044f8:	4b04      	ldr	r3, [pc, #16]	; (800450c <FuncSyncMenuExitHandler+0x28>)
 80044fa:	2200      	movs	r2, #0
 80044fc:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 80044fe:	2303      	movs	r3, #3
}
 8004500:	4618      	mov	r0, r3
 8004502:	bd80      	pop	{r7, pc}
 8004504:	0801328c 	.word	0x0801328c
 8004508:	20001ec7 	.word	0x20001ec7
 800450c:	20001ec3 	.word	0x20001ec3

08004510 <GainMenu_getStatus>:
#include <stdio.h>

eGainMenu_Status eNextGainMenuStatus = 	DISABLE_GAIN_MENU;

eGainMenu_Status GainMenu_getStatus()
{
 8004510:	b480      	push	{r7}
 8004512:	af00      	add	r7, sp, #0
	return eNextGainMenuStatus;
 8004514:	4b03      	ldr	r3, [pc, #12]	; (8004524 <GainMenu_getStatus+0x14>)
 8004516:	781b      	ldrb	r3, [r3, #0]
}
 8004518:	4618      	mov	r0, r3
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr
 8004522:	bf00      	nop
 8004524:	20001ec8 	.word	0x20001ec8

08004528 <GainMainMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainMainMenuEntryHandler()
{
 8004528:	b580      	push	{r7, lr}
 800452a:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("GainMainMenuEntryHandler Event captured\n");
 800452c:	4806      	ldr	r0, [pc, #24]	; (8004548 <GainMainMenuEntryHandler+0x20>)
 800452e:	f00a fefd 	bl	800f32c <puts>
#endif

	DM_RefreshScreen();
 8004532:	f7fc ff7f 	bl	8001434 <DM_RefreshScreen>

	eNextGainMenuStatus = ENABLE_GAIN_MAIN_MENU;
 8004536:	4b05      	ldr	r3, [pc, #20]	; (800454c <GainMainMenuEntryHandler+0x24>)
 8004538:	2201      	movs	r2, #1
 800453a:	701a      	strb	r2, [r3, #0]

	eNewEvent = evIdle;
 800453c:	4b04      	ldr	r3, [pc, #16]	; (8004550 <GainMainMenuEntryHandler+0x28>)
 800453e:	2200      	movs	r2, #0
 8004540:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 8004542:	2306      	movs	r3, #6
}
 8004544:	4618      	mov	r0, r3
 8004546:	bd80      	pop	{r7, pc}
 8004548:	080132b4 	.word	0x080132b4
 800454c:	20001ec8 	.word	0x20001ec8
 8004550:	20001ec3 	.word	0x20001ec3

08004554 <GainMainMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainMainMenuExitHandler()
{
 8004554:	b580      	push	{r7, lr}
 8004556:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("GainMainMenuExitHandler Event captured\n");
 8004558:	4808      	ldr	r0, [pc, #32]	; (800457c <GainMainMenuExitHandler+0x28>)
 800455a:	f00a fee7 	bl	800f32c <puts>
#endif

	eNextGainMenuStatus = DISABLE_GAIN_MENU;
 800455e:	4b08      	ldr	r3, [pc, #32]	; (8004580 <GainMainMenuExitHandler+0x2c>)
 8004560:	2200      	movs	r2, #0
 8004562:	701a      	strb	r2, [r3, #0]

	DM_RefreshScreen();
 8004564:	f7fc ff66 	bl	8001434 <DM_RefreshScreen>

#ifdef SWV_DEBUG_ENABLED
	  printf("returning to Idle State\n");
 8004568:	4806      	ldr	r0, [pc, #24]	; (8004584 <GainMainMenuExitHandler+0x30>)
 800456a:	f00a fedf 	bl	800f32c <puts>
#endif

	eNewEvent = evIdle;
 800456e:	4b06      	ldr	r3, [pc, #24]	; (8004588 <GainMainMenuExitHandler+0x34>)
 8004570:	2200      	movs	r2, #0
 8004572:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 8004574:	2301      	movs	r3, #1
}
 8004576:	4618      	mov	r0, r3
 8004578:	bd80      	pop	{r7, pc}
 800457a:	bf00      	nop
 800457c:	08013304 	.word	0x08013304
 8004580:	20001ec8 	.word	0x20001ec8
 8004584:	0801332c 	.word	0x0801332c
 8004588:	20001ec3 	.word	0x20001ec3

0800458c <GainSignalMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuEntryHandler()
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b082      	sub	sp, #8
 8004590:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("GainSignalMenuEntryHandler Event captured\n");
 8004592:	4813      	ldr	r0, [pc, #76]	; (80045e0 <GainSignalMenuEntryHandler+0x54>)
 8004594:	f00a feca 	bl	800f32c <puts>
#endif

	DM_RefreshScreen();
 8004598:	f7fc ff4c 	bl	8001434 <DM_RefreshScreen>

	eNextGainMenuStatus = ENABLE_GAIN_SIGNAL_MENU;
 800459c:	4b11      	ldr	r3, [pc, #68]	; (80045e4 <GainSignalMenuEntryHandler+0x58>)
 800459e:	2202      	movs	r2, #2
 80045a0:	701a      	strb	r2, [r3, #0]

	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile;
 80045a2:	2000      	movs	r0, #0
 80045a4:	f001 f8b6 	bl	8005714 <SM_GetOutputChannel>
 80045a8:	4603      	mov	r3, r0
 80045aa:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 80045ae:	607b      	str	r3, [r7, #4]

	if(pTmpVppPreset)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d008      	beq.n	80045c8 <GainSignalMenuEntryHandler+0x3c>
	{
		ENCODER_TIMER->CNT = pTmpVppPreset->epos;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	8b1a      	ldrh	r2, [r3, #24]
 80045ba:	4b0b      	ldr	r3, [pc, #44]	; (80045e8 <GainSignalMenuEntryHandler+0x5c>)
 80045bc:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = MAX_VPP_ENCODER_RANGE;
 80045be:	4b0a      	ldr	r3, [pc, #40]	; (80045e8 <GainSignalMenuEntryHandler+0x5c>)
 80045c0:	f44f 72c7 	mov.w	r2, #398	; 0x18e
 80045c4:	62da      	str	r2, [r3, #44]	; 0x2c
 80045c6:	e002      	b.n	80045ce <GainSignalMenuEntryHandler+0x42>
	}
	else
	{
		DM_SetErrorDebugMsg("GainMainMenuEntryHandler: pVppPresetTmp null pointer");
 80045c8:	4808      	ldr	r0, [pc, #32]	; (80045ec <GainSignalMenuEntryHandler+0x60>)
 80045ca:	f7fc ff79 	bl	80014c0 <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 80045ce:	4b08      	ldr	r3, [pc, #32]	; (80045f0 <GainSignalMenuEntryHandler+0x64>)
 80045d0:	2200      	movs	r2, #0
 80045d2:	701a      	strb	r2, [r3, #0]
	return Gain_Signal_Menu_State;
 80045d4:	2307      	movs	r3, #7
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3708      	adds	r7, #8
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop
 80045e0:	08013344 	.word	0x08013344
 80045e4:	20001ec8 	.word	0x20001ec8
 80045e8:	40012c00 	.word	0x40012c00
 80045ec:	08013370 	.word	0x08013370
 80045f0:	20001ec3 	.word	0x20001ec3

080045f4 <GainSignalMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuInputHandler()
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("GainSignalMenuInputHandler Event captured\n");
 80045f8:	4807      	ldr	r0, [pc, #28]	; (8004618 <GainSignalMenuInputHandler+0x24>)
 80045fa:	f00a fe97 	bl	800f32c <puts>
#endif

	//GO_ModifyOutput(SMGetEncoderValue(ENCODER_REVERSE));
	VPP_ModifySignalOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 80045fe:	2001      	movs	r0, #1
 8004600:	f001 f89e 	bl	8005740 <SM_GetEncoderValue>
 8004604:	4603      	mov	r3, r0
 8004606:	4618      	mov	r0, r3
 8004608:	f001 fa78 	bl	8005afc <VPP_ModifySignalOutput>

	eNewEvent = evYellowBtn;
 800460c:	4b03      	ldr	r3, [pc, #12]	; (800461c <GainSignalMenuInputHandler+0x28>)
 800460e:	2203      	movs	r2, #3
 8004610:	701a      	strb	r2, [r3, #0]
	return Gain_Signal_Menu_State;
 8004612:	2307      	movs	r3, #7
}
 8004614:	4618      	mov	r0, r3
 8004616:	bd80      	pop	{r7, pc}
 8004618:	080133a8 	.word	0x080133a8
 800461c:	20001ec3 	.word	0x20001ec3

08004620 <GainSignalMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuExitHandler()
{
 8004620:	b580      	push	{r7, lr}
 8004622:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("GainSignalMenuExitHandler Event captured\n");
 8004624:	4806      	ldr	r0, [pc, #24]	; (8004640 <GainSignalMenuExitHandler+0x20>)
 8004626:	f00a fe81 	bl	800f32c <puts>
#endif

	eNextGainMenuStatus = ENABLE_GAIN_MAIN_MENU;
 800462a:	4b06      	ldr	r3, [pc, #24]	; (8004644 <GainSignalMenuExitHandler+0x24>)
 800462c:	2201      	movs	r2, #1
 800462e:	701a      	strb	r2, [r3, #0]

	DM_RefreshScreen();
 8004630:	f7fc ff00 	bl	8001434 <DM_RefreshScreen>

	eNewEvent = evIdle;
 8004634:	4b04      	ldr	r3, [pc, #16]	; (8004648 <GainSignalMenuExitHandler+0x28>)
 8004636:	2200      	movs	r2, #0
 8004638:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 800463a:	2306      	movs	r3, #6
}
 800463c:	4618      	mov	r0, r3
 800463e:	bd80      	pop	{r7, pc}
 8004640:	080133d4 	.word	0x080133d4
 8004644:	20001ec8 	.word	0x20001ec8
 8004648:	20001ec3 	.word	0x20001ec3

0800464c <GainSyncMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSyncMenuEntryHandler()
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b082      	sub	sp, #8
 8004650:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("GainSyncMenuEntryHandler Event captured\n");
 8004652:	4813      	ldr	r0, [pc, #76]	; (80046a0 <GainSyncMenuEntryHandler+0x54>)
 8004654:	f00a fe6a 	bl	800f32c <puts>
#endif

	DM_RefreshScreen();
 8004658:	f7fc feec 	bl	8001434 <DM_RefreshScreen>

	eNextGainMenuStatus = ENABLE_GAIN_SYNC_MENU;
 800465c:	4b11      	ldr	r3, [pc, #68]	; (80046a4 <GainSyncMenuEntryHandler+0x58>)
 800465e:	2203      	movs	r2, #3
 8004660:	701a      	strb	r2, [r3, #0]

	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(SYNC_CHANNEL)->amp_profile;
 8004662:	2001      	movs	r0, #1
 8004664:	f001 f856 	bl	8005714 <SM_GetOutputChannel>
 8004668:	4603      	mov	r3, r0
 800466a:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 800466e:	607b      	str	r3, [r7, #4]

	if(pTmpVppPreset)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d008      	beq.n	8004688 <GainSyncMenuEntryHandler+0x3c>
	{
		ENCODER_TIMER->CNT = pTmpVppPreset->epos;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	8b1a      	ldrh	r2, [r3, #24]
 800467a:	4b0b      	ldr	r3, [pc, #44]	; (80046a8 <GainSyncMenuEntryHandler+0x5c>)
 800467c:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = MAX_VPP_ENCODER_RANGE;
 800467e:	4b0a      	ldr	r3, [pc, #40]	; (80046a8 <GainSyncMenuEntryHandler+0x5c>)
 8004680:	f44f 72c7 	mov.w	r2, #398	; 0x18e
 8004684:	62da      	str	r2, [r3, #44]	; 0x2c
 8004686:	e002      	b.n	800468e <GainSyncMenuEntryHandler+0x42>
	}
	else
	{
		DM_SetErrorDebugMsg("GainMainMenuEntryHandler: pVppPresetTmp null pointer");
 8004688:	4808      	ldr	r0, [pc, #32]	; (80046ac <GainSyncMenuEntryHandler+0x60>)
 800468a:	f7fc ff19 	bl	80014c0 <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 800468e:	4b08      	ldr	r3, [pc, #32]	; (80046b0 <GainSyncMenuEntryHandler+0x64>)
 8004690:	2200      	movs	r2, #0
 8004692:	701a      	strb	r2, [r3, #0]
	return Gain_Sync_Menu_State;
 8004694:	2308      	movs	r3, #8
}
 8004696:	4618      	mov	r0, r3
 8004698:	3708      	adds	r7, #8
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop
 80046a0:	08013400 	.word	0x08013400
 80046a4:	20001ec8 	.word	0x20001ec8
 80046a8:	40012c00 	.word	0x40012c00
 80046ac:	08013370 	.word	0x08013370
 80046b0:	20001ec3 	.word	0x20001ec3

080046b4 <GainSyncMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSyncMenuInputHandler()
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("GainSyncMenuInputHandler Event captured\n");
 80046b8:	4807      	ldr	r0, [pc, #28]	; (80046d8 <GainSyncMenuInputHandler+0x24>)
 80046ba:	f00a fe37 	bl	800f32c <puts>
#endif

	//GO_ModifyOutput(SMGetEncoderValue(ENCODER_REVERSE));
	VPP_ModifySyncOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 80046be:	2001      	movs	r0, #1
 80046c0:	f001 f83e 	bl	8005740 <SM_GetEncoderValue>
 80046c4:	4603      	mov	r3, r0
 80046c6:	4618      	mov	r0, r3
 80046c8:	f001 fec2 	bl	8006450 <VPP_ModifySyncOutput>

	eNewEvent = evYellowBtn;
 80046cc:	4b03      	ldr	r3, [pc, #12]	; (80046dc <GainSyncMenuInputHandler+0x28>)
 80046ce:	2203      	movs	r2, #3
 80046d0:	701a      	strb	r2, [r3, #0]
	return Gain_Sync_Menu_State;
 80046d2:	2308      	movs	r3, #8
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	bd80      	pop	{r7, pc}
 80046d8:	08013428 	.word	0x08013428
 80046dc:	20001ec3 	.word	0x20001ec3

080046e0 <GainSyncMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSyncMenuExitHandler()
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("GainSyncMenuExitHandler Event captured\n");
 80046e4:	4806      	ldr	r0, [pc, #24]	; (8004700 <GainSyncMenuExitHandler+0x20>)
 80046e6:	f00a fe21 	bl	800f32c <puts>
#endif

	eNextGainMenuStatus = ENABLE_GAIN_MAIN_MENU;
 80046ea:	4b06      	ldr	r3, [pc, #24]	; (8004704 <GainSyncMenuExitHandler+0x24>)
 80046ec:	2201      	movs	r2, #1
 80046ee:	701a      	strb	r2, [r3, #0]

	DM_RefreshScreen();
 80046f0:	f7fc fea0 	bl	8001434 <DM_RefreshScreen>

	eNewEvent = evIdle;
 80046f4:	4b04      	ldr	r3, [pc, #16]	; (8004708 <GainSyncMenuExitHandler+0x28>)
 80046f6:	2200      	movs	r2, #0
 80046f8:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 80046fa:	2306      	movs	r3, #6
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	bd80      	pop	{r7, pc}
 8004700:	08013450 	.word	0x08013450
 8004704:	20001ec8 	.word	0x20001ec8
 8004708:	20001ec3 	.word	0x20001ec3

0800470c <ToplevelMenu_getStatus>:
eToplevelMenu_Status eNextToplevelMenuStatus = 	ENABLE_TOPLEVEL_MAIN_MENU;



eToplevelMenu_Status ToplevelMenu_getStatus()
{
 800470c:	b480      	push	{r7}
 800470e:	af00      	add	r7, sp, #0
	return eNextToplevelMenuStatus;
 8004710:	4b03      	ldr	r3, [pc, #12]	; (8004720 <ToplevelMenu_getStatus+0x14>)
 8004712:	781b      	ldrb	r3, [r3, #0]
}
 8004714:	4618      	mov	r0, r3
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr
 800471e:	bf00      	nop
 8004720:	20000008 	.word	0x20000008

08004724 <ToplevelMenu_setStatus>:

void ToplevelMenu_setStatus(eToplevelMenu_Status pStatus)
{
 8004724:	b480      	push	{r7}
 8004726:	b083      	sub	sp, #12
 8004728:	af00      	add	r7, sp, #0
 800472a:	4603      	mov	r3, r0
 800472c:	71fb      	strb	r3, [r7, #7]
	eNextToplevelMenuStatus = pStatus;
 800472e:	4a04      	ldr	r2, [pc, #16]	; (8004740 <ToplevelMenu_setStatus+0x1c>)
 8004730:	79fb      	ldrb	r3, [r7, #7]
 8004732:	7013      	strb	r3, [r2, #0]
}
 8004734:	bf00      	nop
 8004736:	370c      	adds	r7, #12
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr
 8004740:	20000008 	.word	0x20000008

08004744 <ToplevelOutputMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelOutputMenuEntryHandler()
{
 8004744:	b580      	push	{r7, lr}
 8004746:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("ToplevelOutputMenuEntryHandler Event captured\n");
 8004748:	4806      	ldr	r0, [pc, #24]	; (8004764 <ToplevelOutputMenuEntryHandler+0x20>)
 800474a:	f00a fdef 	bl	800f32c <puts>
	#endif

	DM_RefreshScreen();
 800474e:	f7fc fe71 	bl	8001434 <DM_RefreshScreen>

	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_OUTPUT_MENU;
 8004752:	4b05      	ldr	r3, [pc, #20]	; (8004768 <ToplevelOutputMenuEntryHandler+0x24>)
 8004754:	2202      	movs	r2, #2
 8004756:	701a      	strb	r2, [r3, #0]




	// stay in this state
	eNewEvent = evIdle;
 8004758:	4b04      	ldr	r3, [pc, #16]	; (800476c <ToplevelOutputMenuEntryHandler+0x28>)
 800475a:	2200      	movs	r2, #0
 800475c:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 800475e:	2301      	movs	r3, #1
}
 8004760:	4618      	mov	r0, r3
 8004762:	bd80      	pop	{r7, pc}
 8004764:	08013514 	.word	0x08013514
 8004768:	20000008 	.word	0x20000008
 800476c:	20001ec3 	.word	0x20001ec3

08004770 <ToplevelOutputMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelOutputMenuExitHandler()
{
 8004770:	b580      	push	{r7, lr}
 8004772:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("ToplevelOutputMenuExitHandler Event captured\n");
 8004774:	4806      	ldr	r0, [pc, #24]	; (8004790 <ToplevelOutputMenuExitHandler+0x20>)
 8004776:	f00a fdd9 	bl	800f32c <puts>
	#endif

	DM_RefreshScreen();
 800477a:	f7fc fe5b 	bl	8001434 <DM_RefreshScreen>

	// disable the menu
	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_MAIN_MENU;
 800477e:	4b05      	ldr	r3, [pc, #20]	; (8004794 <ToplevelOutputMenuExitHandler+0x24>)
 8004780:	2201      	movs	r2, #1
 8004782:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 8004784:	4b04      	ldr	r3, [pc, #16]	; (8004798 <ToplevelOutputMenuExitHandler+0x28>)
 8004786:	2200      	movs	r2, #0
 8004788:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 800478a:	2300      	movs	r3, #0
}
 800478c:	4618      	mov	r0, r3
 800478e:	bd80      	pop	{r7, pc}
 8004790:	08013574 	.word	0x08013574
 8004794:	20000008 	.word	0x20000008
 8004798:	20001ec3 	.word	0x20001ec3

0800479c <ToplevelInputMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelInputMenuEntryHandler()
{
 800479c:	b580      	push	{r7, lr}
 800479e:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("ToplevelInputMenuEntryHandler Event captured\n");
 80047a0:	4806      	ldr	r0, [pc, #24]	; (80047bc <ToplevelInputMenuEntryHandler+0x20>)
 80047a2:	f00a fdc3 	bl	800f32c <puts>
	#endif

	DM_RefreshScreen();
 80047a6:	f7fc fe45 	bl	8001434 <DM_RefreshScreen>

	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_INPUT_MENU;
 80047aa:	4b05      	ldr	r3, [pc, #20]	; (80047c0 <ToplevelInputMenuEntryHandler+0x24>)
 80047ac:	2203      	movs	r2, #3
 80047ae:	701a      	strb	r2, [r3, #0]




	// stay in this state
	eNewEvent = evIdle;
 80047b0:	4b04      	ldr	r3, [pc, #16]	; (80047c4 <ToplevelInputMenuEntryHandler+0x28>)
 80047b2:	2200      	movs	r2, #0
 80047b4:	701a      	strb	r2, [r3, #0]
	return Toplevel_Input_Menu_State;
 80047b6:	2302      	movs	r3, #2
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	bd80      	pop	{r7, pc}
 80047bc:	080135a4 	.word	0x080135a4
 80047c0:	20000008 	.word	0x20000008
 80047c4:	20001ec3 	.word	0x20001ec3

080047c8 <ToplevelInputMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelInputMenuExitHandler()
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("ToplevelInputMenuExitHandler Event captured\n");
 80047cc:	4806      	ldr	r0, [pc, #24]	; (80047e8 <ToplevelInputMenuExitHandler+0x20>)
 80047ce:	f00a fdad 	bl	800f32c <puts>
	#endif

	DM_RefreshScreen();
 80047d2:	f7fc fe2f 	bl	8001434 <DM_RefreshScreen>

	// disable the menu
	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_MAIN_MENU;
 80047d6:	4b05      	ldr	r3, [pc, #20]	; (80047ec <ToplevelInputMenuExitHandler+0x24>)
 80047d8:	2201      	movs	r2, #1
 80047da:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 80047dc:	4b04      	ldr	r3, [pc, #16]	; (80047f0 <ToplevelInputMenuExitHandler+0x28>)
 80047de:	2200      	movs	r2, #0
 80047e0:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 80047e2:	2300      	movs	r3, #0
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	bd80      	pop	{r7, pc}
 80047e8:	08013604 	.word	0x08013604
 80047ec:	20000008 	.word	0x20000008
 80047f0:	20001ec3 	.word	0x20001ec3

080047f4 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b083      	sub	sp, #12
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 80047fc:	4b07      	ldr	r3, [pc, #28]	; (800481c <LL_EXTI_IsActiveFlag_0_31+0x28>)
 80047fe:	695a      	ldr	r2, [r3, #20]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	4013      	ands	r3, r2
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	429a      	cmp	r2, r3
 8004808:	d101      	bne.n	800480e <LL_EXTI_IsActiveFlag_0_31+0x1a>
 800480a:	2301      	movs	r3, #1
 800480c:	e000      	b.n	8004810 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 800480e:	2300      	movs	r3, #0
}
 8004810:	4618      	mov	r0, r3
 8004812:	370c      	adds	r7, #12
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr
 800481c:	40010400 	.word	0x40010400

08004820 <IM_Init>:
uint16_t btn4_last_interrupt_time = 0;
uint16_t encbtn_last_interrupt_time = 0;


void IM_Init()
{
 8004820:	b480      	push	{r7}
 8004822:	af00      	add	r7, sp, #0
	  // debounce timer
	  DEBOUNCE_TIMER->CR1 |= TIM_CR1_CEN;
 8004824:	4b05      	ldr	r3, [pc, #20]	; (800483c <IM_Init+0x1c>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a04      	ldr	r2, [pc, #16]	; (800483c <IM_Init+0x1c>)
 800482a:	f043 0301 	orr.w	r3, r3, #1
 800482e:	6013      	str	r3, [r2, #0]
}
 8004830:	bf00      	nop
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop
 800483c:	40014400 	.word	0x40014400

08004840 <IM_SWEEP_UPDATE_TIM_IRQHandler>:
 *	@param None
 *	@retval None
 *
 */
void IM_SWEEP_UPDATE_TIM_IRQHandler()
{
 8004840:	b480      	push	{r7}
 8004842:	af00      	add	r7, sp, #0
	// upcounter (decreasing freq)
	if((SWEEP_TIMER->CR1 & TIM_CR1_DIR) == TIM_CR1_DIR)
 8004844:	4b26      	ldr	r3, [pc, #152]	; (80048e0 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa0>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 0310 	and.w	r3, r3, #16
 800484c:	2b10      	cmp	r3, #16
 800484e:	d11c      	bne.n	800488a <IM_SWEEP_UPDATE_TIM_IRQHandler+0x4a>
	{
		// if we reach lower freq limit for sweep, reset to highest freq limit
		if(OUTPUT_TIMER->ARR >= sweep_upper_bounds_longest_output_arr)
 8004850:	4b24      	ldr	r3, [pc, #144]	; (80048e4 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8004852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004854:	ee07 3a90 	vmov	s15, r3
 8004858:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800485c:	4b22      	ldr	r3, [pc, #136]	; (80048e8 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa8>)
 800485e:	edd3 7a00 	vldr	s15, [r3]
 8004862:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800486a:	db09      	blt.n	8004880 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x40>
		{
			OUTPUT_TIMER->ARR = sweep_lower_bounds_shortest_output_arr;
 800486c:	4b1f      	ldr	r3, [pc, #124]	; (80048ec <IM_SWEEP_UPDATE_TIM_IRQHandler+0xac>)
 800486e:	edd3 7a00 	vldr	s15, [r3]
 8004872:	4b1c      	ldr	r3, [pc, #112]	; (80048e4 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8004874:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004878:	ee17 2a90 	vmov	r2, s15
 800487c:	62da      	str	r2, [r3, #44]	; 0x2c
			}
		}
	}

	//SWEEP_TIMER->ARR--;
}
 800487e:	e029      	b.n	80048d4 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x94>
			OUTPUT_TIMER->ARR++;
 8004880:	4b18      	ldr	r3, [pc, #96]	; (80048e4 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8004882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004884:	3201      	adds	r2, #1
 8004886:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004888:	e024      	b.n	80048d4 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x94>
		if(OUTPUT_TIMER->ARR == 0x1U)
 800488a:	4b16      	ldr	r3, [pc, #88]	; (80048e4 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 800488c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800488e:	2b01      	cmp	r3, #1
 8004890:	d104      	bne.n	800489c <IM_SWEEP_UPDATE_TIM_IRQHandler+0x5c>
			OUTPUT_TIMER->ARR = MAX_OUTPUT_ARR;
 8004892:	4b14      	ldr	r3, [pc, #80]	; (80048e4 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8004894:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004898:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800489a:	e01b      	b.n	80048d4 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x94>
			if(OUTPUT_TIMER->ARR <= sweep_lower_bounds_shortest_output_arr)
 800489c:	4b11      	ldr	r3, [pc, #68]	; (80048e4 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 800489e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a0:	ee07 3a90 	vmov	s15, r3
 80048a4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80048a8:	4b10      	ldr	r3, [pc, #64]	; (80048ec <IM_SWEEP_UPDATE_TIM_IRQHandler+0xac>)
 80048aa:	edd3 7a00 	vldr	s15, [r3]
 80048ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80048b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048b6:	d809      	bhi.n	80048cc <IM_SWEEP_UPDATE_TIM_IRQHandler+0x8c>
				OUTPUT_TIMER->ARR = sweep_upper_bounds_longest_output_arr;
 80048b8:	4b0b      	ldr	r3, [pc, #44]	; (80048e8 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa8>)
 80048ba:	edd3 7a00 	vldr	s15, [r3]
 80048be:	4b09      	ldr	r3, [pc, #36]	; (80048e4 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 80048c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048c4:	ee17 2a90 	vmov	r2, s15
 80048c8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80048ca:	e003      	b.n	80048d4 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x94>
				OUTPUT_TIMER->ARR--;
 80048cc:	4b05      	ldr	r3, [pc, #20]	; (80048e4 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 80048ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048d0:	3a01      	subs	r2, #1
 80048d2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80048d4:	bf00      	nop
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr
 80048de:	bf00      	nop
 80048e0:	40000c00 	.word	0x40000c00
 80048e4:	40013400 	.word	0x40013400
 80048e8:	20000004 	.word	0x20000004
 80048ec:	20000000 	.word	0x20000000

080048f0 <IM_BTN1_EXTI14_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN1_EXTI14_Handler()
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b082      	sub	sp, #8
 80048f4:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 80048f6:	4b0f      	ldr	r3, [pc, #60]	; (8004934 <IM_BTN1_EXTI14_Handler+0x44>)
 80048f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fa:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn1_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 80048fc:	88fb      	ldrh	r3, [r7, #6]
 80048fe:	4a0e      	ldr	r2, [pc, #56]	; (8004938 <IM_BTN1_EXTI14_Handler+0x48>)
 8004900:	8812      	ldrh	r2, [r2, #0]
 8004902:	1a9b      	subs	r3, r3, r2
 8004904:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004908:	dd0c      	ble.n	8004924 <IM_BTN1_EXTI14_Handler+0x34>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14))
 800490a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800490e:	f7ff ff71 	bl	80047f4 <LL_EXTI_IsActiveFlag_0_31>
 8004912:	4603      	mov	r3, r0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d005      	beq.n	8004924 <IM_BTN1_EXTI14_Handler+0x34>
		{

			EM_SetNewEvent(evBlueBtn);
 8004918:	2001      	movs	r0, #1
 800491a:	f7ff f96f 	bl	8003bfc <EM_SetNewEvent>
			printf("'Blue' BTN1_EXTI14_Pin\n");
 800491e:	4807      	ldr	r0, [pc, #28]	; (800493c <IM_BTN1_EXTI14_Handler+0x4c>)
 8004920:	f00a fd04 	bl	800f32c <puts>
		}
	}
	btn1_last_interrupt_time = interrupt_time;
 8004924:	4a04      	ldr	r2, [pc, #16]	; (8004938 <IM_BTN1_EXTI14_Handler+0x48>)
 8004926:	88fb      	ldrh	r3, [r7, #6]
 8004928:	8013      	strh	r3, [r2, #0]


}
 800492a:	bf00      	nop
 800492c:	3708      	adds	r7, #8
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
 8004932:	bf00      	nop
 8004934:	40014400 	.word	0x40014400
 8004938:	20001eca 	.word	0x20001eca
 800493c:	08013630 	.word	0x08013630

08004940 <IM_BTN2_EXTI15_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN2_EXTI15_Handler()
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b082      	sub	sp, #8
 8004944:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8004946:	4b0f      	ldr	r3, [pc, #60]	; (8004984 <IM_BTN2_EXTI15_Handler+0x44>)
 8004948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494a:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn2_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 800494c:	88fb      	ldrh	r3, [r7, #6]
 800494e:	4a0e      	ldr	r2, [pc, #56]	; (8004988 <IM_BTN2_EXTI15_Handler+0x48>)
 8004950:	8812      	ldrh	r2, [r2, #0]
 8004952:	1a9b      	subs	r3, r3, r2
 8004954:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004958:	dd0c      	ble.n	8004974 <IM_BTN2_EXTI15_Handler+0x34>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15))
 800495a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800495e:	f7ff ff49 	bl	80047f4 <LL_EXTI_IsActiveFlag_0_31>
 8004962:	4603      	mov	r3, r0
 8004964:	2b00      	cmp	r3, #0
 8004966:	d005      	beq.n	8004974 <IM_BTN2_EXTI15_Handler+0x34>
		{
			EM_SetNewEvent(evYellowBtn);
 8004968:	2003      	movs	r0, #3
 800496a:	f7ff f947 	bl	8003bfc <EM_SetNewEvent>
			printf("'Yellow' BTN2_EXTI15_Pin\n");
 800496e:	4807      	ldr	r0, [pc, #28]	; (800498c <IM_BTN2_EXTI15_Handler+0x4c>)
 8004970:	f00a fcdc 	bl	800f32c <puts>
		}
	}
	btn2_last_interrupt_time = interrupt_time;
 8004974:	4a04      	ldr	r2, [pc, #16]	; (8004988 <IM_BTN2_EXTI15_Handler+0x48>)
 8004976:	88fb      	ldrh	r3, [r7, #6]
 8004978:	8013      	strh	r3, [r2, #0]


}
 800497a:	bf00      	nop
 800497c:	3708      	adds	r7, #8
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop
 8004984:	40014400 	.word	0x40014400
 8004988:	20001ecc 	.word	0x20001ecc
 800498c:	08013648 	.word	0x08013648

08004990 <IM_BTN3_EXTI0_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN3_EXTI0_Handler()
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b082      	sub	sp, #8
 8004994:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8004996:	4b0e      	ldr	r3, [pc, #56]	; (80049d0 <IM_BTN3_EXTI0_Handler+0x40>)
 8004998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499a:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn3_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 800499c:	88fb      	ldrh	r3, [r7, #6]
 800499e:	4a0d      	ldr	r2, [pc, #52]	; (80049d4 <IM_BTN3_EXTI0_Handler+0x44>)
 80049a0:	8812      	ldrh	r2, [r2, #0]
 80049a2:	1a9b      	subs	r3, r3, r2
 80049a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80049a8:	dd0b      	ble.n	80049c2 <IM_BTN3_EXTI0_Handler+0x32>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0))
 80049aa:	2001      	movs	r0, #1
 80049ac:	f7ff ff22 	bl	80047f4 <LL_EXTI_IsActiveFlag_0_31>
 80049b0:	4603      	mov	r3, r0
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d005      	beq.n	80049c2 <IM_BTN3_EXTI0_Handler+0x32>
		{
			EM_SetNewEvent(evRedBtn);
 80049b6:	2004      	movs	r0, #4
 80049b8:	f7ff f920 	bl	8003bfc <EM_SetNewEvent>
			printf("'Red' BTN3_EXTI0_Pin\n");
 80049bc:	4806      	ldr	r0, [pc, #24]	; (80049d8 <IM_BTN3_EXTI0_Handler+0x48>)
 80049be:	f00a fcb5 	bl	800f32c <puts>
		}
	}
	btn3_last_interrupt_time = interrupt_time;
 80049c2:	4a04      	ldr	r2, [pc, #16]	; (80049d4 <IM_BTN3_EXTI0_Handler+0x44>)
 80049c4:	88fb      	ldrh	r3, [r7, #6]
 80049c6:	8013      	strh	r3, [r2, #0]


}
 80049c8:	bf00      	nop
 80049ca:	3708      	adds	r7, #8
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	40014400 	.word	0x40014400
 80049d4:	20001ece 	.word	0x20001ece
 80049d8:	08013664 	.word	0x08013664

080049dc <IM_BTN4_EXTI1_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN4_EXTI1_Handler()
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b082      	sub	sp, #8
 80049e0:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 80049e2:	4b0e      	ldr	r3, [pc, #56]	; (8004a1c <IM_BTN4_EXTI1_Handler+0x40>)
 80049e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e6:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn4_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 80049e8:	88fb      	ldrh	r3, [r7, #6]
 80049ea:	4a0d      	ldr	r2, [pc, #52]	; (8004a20 <IM_BTN4_EXTI1_Handler+0x44>)
 80049ec:	8812      	ldrh	r2, [r2, #0]
 80049ee:	1a9b      	subs	r3, r3, r2
 80049f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80049f4:	dd0b      	ble.n	8004a0e <IM_BTN4_EXTI1_Handler+0x32>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1))
 80049f6:	2002      	movs	r0, #2
 80049f8:	f7ff fefc 	bl	80047f4 <LL_EXTI_IsActiveFlag_0_31>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d005      	beq.n	8004a0e <IM_BTN4_EXTI1_Handler+0x32>
		{
			EM_SetNewEvent(evGreenBtn);
 8004a02:	2002      	movs	r0, #2
 8004a04:	f7ff f8fa 	bl	8003bfc <EM_SetNewEvent>
			printf("'Green' BTN4_EXTI1_Pin\n");
 8004a08:	4806      	ldr	r0, [pc, #24]	; (8004a24 <IM_BTN4_EXTI1_Handler+0x48>)
 8004a0a:	f00a fc8f 	bl	800f32c <puts>
		}
	}
	btn4_last_interrupt_time = interrupt_time;
 8004a0e:	4a04      	ldr	r2, [pc, #16]	; (8004a20 <IM_BTN4_EXTI1_Handler+0x44>)
 8004a10:	88fb      	ldrh	r3, [r7, #6]
 8004a12:	8013      	strh	r3, [r2, #0]


}
 8004a14:	bf00      	nop
 8004a16:	3708      	adds	r7, #8
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}
 8004a1c:	40014400 	.word	0x40014400
 8004a20:	20001ed0 	.word	0x20001ed0
 8004a24:	0801367c 	.word	0x0801367c

08004a28 <IM_ENC_EXTI2_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_ENC_EXTI2_Handler()
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b082      	sub	sp, #8
 8004a2c:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8004a2e:	4b0e      	ldr	r3, [pc, #56]	; (8004a68 <IM_ENC_EXTI2_Handler+0x40>)
 8004a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a32:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - encbtn_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 8004a34:	88fb      	ldrh	r3, [r7, #6]
 8004a36:	4a0d      	ldr	r2, [pc, #52]	; (8004a6c <IM_ENC_EXTI2_Handler+0x44>)
 8004a38:	8812      	ldrh	r2, [r2, #0]
 8004a3a:	1a9b      	subs	r3, r3, r2
 8004a3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a40:	dd0b      	ble.n	8004a5a <IM_ENC_EXTI2_Handler+0x32>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2))
 8004a42:	2004      	movs	r0, #4
 8004a44:	f7ff fed6 	bl	80047f4 <LL_EXTI_IsActiveFlag_0_31>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d005      	beq.n	8004a5a <IM_ENC_EXTI2_Handler+0x32>
		{
			EM_SetNewEvent(evEncoderPush);
 8004a4e:	2006      	movs	r0, #6
 8004a50:	f7ff f8d4 	bl	8003bfc <EM_SetNewEvent>
			printf("'EncoderPush' ENC_EXTI2_Pin\n");
 8004a54:	4806      	ldr	r0, [pc, #24]	; (8004a70 <IM_ENC_EXTI2_Handler+0x48>)
 8004a56:	f00a fc69 	bl	800f32c <puts>
		}
	}
	encbtn_last_interrupt_time = interrupt_time;
 8004a5a:	4a04      	ldr	r2, [pc, #16]	; (8004a6c <IM_ENC_EXTI2_Handler+0x44>)
 8004a5c:	88fb      	ldrh	r3, [r7, #6]
 8004a5e:	8013      	strh	r3, [r2, #0]


}
 8004a60:	bf00      	nop
 8004a62:	3708      	adds	r7, #8
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}
 8004a68:	40014400 	.word	0x40014400
 8004a6c:	20001ed2 	.word	0x20001ed2
 8004a70:	08013694 	.word	0x08013694

08004a74 <IM_ENC_DIRF_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_ENC_DIRF_Handler()
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	af00      	add	r7, sp, #0

	if((TIM1->SR & TIM_SR_DIRF) == TIM_SR_DIRF)
 8004a78:	4b0a      	ldr	r3, [pc, #40]	; (8004aa4 <IM_ENC_DIRF_Handler+0x30>)
 8004a7a:	691b      	ldr	r3, [r3, #16]
 8004a7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a80:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a84:	d10b      	bne.n	8004a9e <IM_ENC_DIRF_Handler+0x2a>
	{
		EM_SetNewEvent(evEncoderSet);
 8004a86:	2005      	movs	r0, #5
 8004a88:	f7ff f8b8 	bl	8003bfc <EM_SetNewEvent>
		printf("Encoder new direction\n");
 8004a8c:	4806      	ldr	r0, [pc, #24]	; (8004aa8 <IM_ENC_DIRF_Handler+0x34>)
 8004a8e:	f00a fc4d 	bl	800f32c <puts>
		TIM1->SR &= ~(TIM_SR_DIRF);
 8004a92:	4b04      	ldr	r3, [pc, #16]	; (8004aa4 <IM_ENC_DIRF_Handler+0x30>)
 8004a94:	691b      	ldr	r3, [r3, #16]
 8004a96:	4a03      	ldr	r2, [pc, #12]	; (8004aa4 <IM_ENC_DIRF_Handler+0x30>)
 8004a98:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004a9c:	6113      	str	r3, [r2, #16]

	}
}
 8004a9e:	bf00      	nop
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	40012c00 	.word	0x40012c00
 8004aa8:	080136b0 	.word	0x080136b0

08004aac <BO_GetBiasPolarity>:
 *	@param None
 *	@retval None
 *
 */
eBias_Polarity BO_GetBiasPolarity()
{
 8004aac:	b480      	push	{r7}
 8004aae:	af00      	add	r7, sp, #0
	return eBiasPolarity;
 8004ab0:	4b03      	ldr	r3, [pc, #12]	; (8004ac0 <BO_GetBiasPolarity+0x14>)
 8004ab2:	781b      	ldrb	r3, [r3, #0]
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr
 8004abe:	bf00      	nop
 8004ac0:	20000009 	.word	0x20000009

08004ac4 <BO_GetDcBiasEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
uint16_t BO_GetDcBiasEncoderValue()
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	af00      	add	r7, sp, #0
	return dc_bias_encoder_value;
 8004ac8:	4b03      	ldr	r3, [pc, #12]	; (8004ad8 <BO_GetDcBiasEncoderValue+0x14>)
 8004aca:	881b      	ldrh	r3, [r3, #0]
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr
 8004ad6:	bf00      	nop
 8004ad8:	2000000a 	.word	0x2000000a

08004adc <BO_ModifyOutput>:
 *	@param None
 *	@retval None
 *
 */
void BO_ModifyOutput(uint16_t pEncoderValue)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b082      	sub	sp, #8
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	80fb      	strh	r3, [r7, #6]
	// pEncoderValue is reversed for correct rotary encoder operation.
	// However, we want to retain the forward direction value to prevent polarity flip!
	dc_bias_encoder_value = SM_GetEncoderValue(ENCODER_FORWARD);
 8004ae6:	2000      	movs	r0, #0
 8004ae8:	f000 fe2a 	bl	8005740 <SM_GetEncoderValue>
 8004aec:	4603      	mov	r3, r0
 8004aee:	461a      	mov	r2, r3
 8004af0:	4b1b      	ldr	r3, [pc, #108]	; (8004b60 <BO_ModifyOutput+0x84>)
 8004af2:	801a      	strh	r2, [r3, #0]

	// apply negative dc bias
	if(pEncoderValue < BIAS_CENTER) {
 8004af4:	88fb      	ldrh	r3, [r7, #6]
 8004af6:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8004afa:	d214      	bcs.n	8004b26 <BO_ModifyOutput+0x4a>

		eBiasPolarity = INVERSEBIAS;
 8004afc:	4b19      	ldr	r3, [pc, #100]	; (8004b64 <BO_ModifyOutput+0x88>)
 8004afe:	2200      	movs	r2, #0
 8004b00:	701a      	strb	r2, [r3, #0]


		HAL_DAC_SetValue(	&hdac1,
							DAC1_CHANNEL_2,
							DAC_ALIGN_12B_R,
							((BIAS_CENTER - pEncoderValue) * BIAS_MAG));
 8004b02:	88fb      	ldrh	r3, [r7, #6]
 8004b04:	f5c3 72c8 	rsb	r2, r3, #400	; 0x190
 8004b08:	4613      	mov	r3, r2
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	4413      	add	r3, r2
 8004b0e:	005b      	lsls	r3, r3, #1
		HAL_DAC_SetValue(	&hdac1,
 8004b10:	2200      	movs	r2, #0
 8004b12:	2110      	movs	r1, #16
 8004b14:	4814      	ldr	r0, [pc, #80]	; (8004b68 <BO_ModifyOutput+0x8c>)
 8004b16:	f005 fc89 	bl	800a42c <HAL_DAC_SetValue>

		HAL_GPIO_WritePin(	DCBIAS_INVERT_GPIO_Port,
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	2108      	movs	r1, #8
 8004b1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004b22:	f006 fb63 	bl	800b1ec <HAL_GPIO_WritePin>
							DCBIAS_INVERT_Pin,
							GPIO_PIN_SET);
	}
	// apply positive dc bias
	if(pEncoderValue >= BIAS_CENTER) {
 8004b26:	88fb      	ldrh	r3, [r7, #6]
 8004b28:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8004b2c:	d314      	bcc.n	8004b58 <BO_ModifyOutput+0x7c>

		eBiasPolarity = NORMALBIAS;
 8004b2e:	4b0d      	ldr	r3, [pc, #52]	; (8004b64 <BO_ModifyOutput+0x88>)
 8004b30:	2201      	movs	r2, #1
 8004b32:	701a      	strb	r2, [r3, #0]
		//TIM1->CNT = pEncoderValue;

		HAL_DAC_SetValue(	&hdac1,
							DAC1_CHANNEL_2,
							DAC_ALIGN_12B_R,
							((pEncoderValue - BIAS_CENTER) * BIAS_MAG));
 8004b34:	88fb      	ldrh	r3, [r7, #6]
 8004b36:	f5a3 72c8 	sub.w	r2, r3, #400	; 0x190
 8004b3a:	4613      	mov	r3, r2
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	4413      	add	r3, r2
 8004b40:	005b      	lsls	r3, r3, #1
		HAL_DAC_SetValue(	&hdac1,
 8004b42:	2200      	movs	r2, #0
 8004b44:	2110      	movs	r1, #16
 8004b46:	4808      	ldr	r0, [pc, #32]	; (8004b68 <BO_ModifyOutput+0x8c>)
 8004b48:	f005 fc70 	bl	800a42c <HAL_DAC_SetValue>

		HAL_GPIO_WritePin(	DCBIAS_INVERT_GPIO_Port,
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	2108      	movs	r1, #8
 8004b50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004b54:	f006 fb4a 	bl	800b1ec <HAL_GPIO_WritePin>
							DCBIAS_INVERT_Pin,
							GPIO_PIN_RESET);
	}
}
 8004b58:	bf00      	nop
 8004b5a:	3708      	adds	r7, #8
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}
 8004b60:	2000000a 	.word	0x2000000a
 8004b64:	20000009 	.word	0x20000009
 8004b68:	200025c0 	.word	0x200025c0

08004b6c <BO_GetOutputBias>:
 *	@param None
 *	@retval None
 *
 */
uint32_t BO_GetOutputBias()
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	af00      	add	r7, sp, #0
	return HAL_DAC_GetValue(&hdac1, DAC1_CHANNEL_2);
 8004b70:	2110      	movs	r1, #16
 8004b72:	4803      	ldr	r0, [pc, #12]	; (8004b80 <BO_GetOutputBias+0x14>)
 8004b74:	f005 fca0 	bl	800a4b8 <HAL_DAC_GetValue>
 8004b78:	4603      	mov	r3, r0
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	bf00      	nop
 8004b80:	200025c0 	.word	0x200025c0

08004b84 <DT_InitRegister>:
 *	@param None
 *	@retval None
 *
 */
void DT_InitRegister()
{
 8004b84:	b480      	push	{r7}
 8004b86:	b083      	sub	sp, #12
 8004b88:	af00      	add	r7, sp, #0
	for(int i = 0; i < MAX_DAC_TIMER_SETTINGS; i++)
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	607b      	str	r3, [r7, #4]
 8004b8e:	e06b      	b.n	8004c68 <DT_InitRegister+0xe4>
	{
		// prevent divide by zero (prescaler)
		if(DacTimerReg[i].psc == 0)
 8004b90:	493a      	ldr	r1, [pc, #232]	; (8004c7c <DT_InitRegister+0xf8>)
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	4613      	mov	r3, r2
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	4413      	add	r3, r2
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	440b      	add	r3, r1
 8004b9e:	3308      	adds	r3, #8
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d129      	bne.n	8004bfa <DT_InitRegister+0x76>
			DacTimerReg[i].arr = ((SM_MCLK / DacTimerReg[i].hertz) / SM_FSAMP) * DacTimerReg[i].error;
 8004ba6:	4935      	ldr	r1, [pc, #212]	; (8004c7c <DT_InitRegister+0xf8>)
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	4613      	mov	r3, r2
 8004bac:	009b      	lsls	r3, r3, #2
 8004bae:	4413      	add	r3, r2
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	440b      	add	r3, r1
 8004bb4:	3304      	adds	r3, #4
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a31      	ldr	r2, [pc, #196]	; (8004c80 <DT_InitRegister+0xfc>)
 8004bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bbe:	ee07 3a90 	vmov	s15, r3
 8004bc2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004bc6:	492d      	ldr	r1, [pc, #180]	; (8004c7c <DT_InitRegister+0xf8>)
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	4613      	mov	r3, r2
 8004bcc:	009b      	lsls	r3, r3, #2
 8004bce:	4413      	add	r3, r2
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	440b      	add	r3, r1
 8004bd4:	3310      	adds	r3, #16
 8004bd6:	edd3 7a00 	vldr	s15, [r3]
 8004bda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004be2:	ee17 0a90 	vmov	r0, s15
 8004be6:	4925      	ldr	r1, [pc, #148]	; (8004c7c <DT_InitRegister+0xf8>)
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	4613      	mov	r3, r2
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	4413      	add	r3, r2
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	440b      	add	r3, r1
 8004bf4:	330c      	adds	r3, #12
 8004bf6:	6018      	str	r0, [r3, #0]
 8004bf8:	e033      	b.n	8004c62 <DT_InitRegister+0xde>
		else
			DacTimerReg[i].arr = (((SM_MCLK / DacTimerReg[i].hertz) / DacTimerReg[i].psc) / SM_FSAMP) * DacTimerReg[i].error;
 8004bfa:	4920      	ldr	r1, [pc, #128]	; (8004c7c <DT_InitRegister+0xf8>)
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	4613      	mov	r3, r2
 8004c00:	009b      	lsls	r3, r3, #2
 8004c02:	4413      	add	r3, r2
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	440b      	add	r3, r1
 8004c08:	3304      	adds	r3, #4
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a1c      	ldr	r2, [pc, #112]	; (8004c80 <DT_InitRegister+0xfc>)
 8004c0e:	fbb2 f1f3 	udiv	r1, r2, r3
 8004c12:	481a      	ldr	r0, [pc, #104]	; (8004c7c <DT_InitRegister+0xf8>)
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	4613      	mov	r3, r2
 8004c18:	009b      	lsls	r3, r3, #2
 8004c1a:	4413      	add	r3, r2
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	4403      	add	r3, r0
 8004c20:	3308      	adds	r3, #8
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c28:	ee07 3a90 	vmov	s15, r3
 8004c2c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004c30:	4912      	ldr	r1, [pc, #72]	; (8004c7c <DT_InitRegister+0xf8>)
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	4613      	mov	r3, r2
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	4413      	add	r3, r2
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	440b      	add	r3, r1
 8004c3e:	3310      	adds	r3, #16
 8004c40:	edd3 7a00 	vldr	s15, [r3]
 8004c44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c4c:	ee17 0a90 	vmov	r0, s15
 8004c50:	490a      	ldr	r1, [pc, #40]	; (8004c7c <DT_InitRegister+0xf8>)
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	4613      	mov	r3, r2
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	4413      	add	r3, r2
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	440b      	add	r3, r1
 8004c5e:	330c      	adds	r3, #12
 8004c60:	6018      	str	r0, [r3, #0]
	for(int i = 0; i < MAX_DAC_TIMER_SETTINGS; i++)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	3301      	adds	r3, #1
 8004c66:	607b      	str	r3, [r7, #4]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2b0d      	cmp	r3, #13
 8004c6c:	dd90      	ble.n	8004b90 <DT_InitRegister+0xc>
	}
}
 8004c6e:	bf00      	nop
 8004c70:	370c      	adds	r7, #12
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr
 8004c7a:	bf00      	nop
 8004c7c:	2000000c 	.word	0x2000000c
 8004c80:	00155cc0 	.word	0x00155cc0

08004c84 <DT_GetRegisterByEnum>:
 *	@param pEnum Enummeration (eFreqSettings_t) search criteria. Not an index
 *	@retval Pointer to the found DacTimeReg_t struct. Null if no result!
 *
 */
DacTimeReg_t* DT_GetRegisterByEnum(eFreqSettings_t pEnum)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b085      	sub	sp, #20
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < MAX_DAC_TIMER_SETTINGS; i++)
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	60fb      	str	r3, [r7, #12]
 8004c90:	e016      	b.n	8004cc0 <DT_GetRegisterByEnum+0x3c>
		if(DacTimerReg[i].hertz == pEnum)
 8004c92:	4910      	ldr	r1, [pc, #64]	; (8004cd4 <DT_GetRegisterByEnum+0x50>)
 8004c94:	68fa      	ldr	r2, [r7, #12]
 8004c96:	4613      	mov	r3, r2
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	4413      	add	r3, r2
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	440b      	add	r3, r1
 8004ca0:	3304      	adds	r3, #4
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d107      	bne.n	8004cba <DT_GetRegisterByEnum+0x36>
			return &DacTimerReg[i];
 8004caa:	68fa      	ldr	r2, [r7, #12]
 8004cac:	4613      	mov	r3, r2
 8004cae:	009b      	lsls	r3, r3, #2
 8004cb0:	4413      	add	r3, r2
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	4a07      	ldr	r2, [pc, #28]	; (8004cd4 <DT_GetRegisterByEnum+0x50>)
 8004cb6:	4413      	add	r3, r2
 8004cb8:	e006      	b.n	8004cc8 <DT_GetRegisterByEnum+0x44>
	for(int i = 0; i < MAX_DAC_TIMER_SETTINGS; i++)
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	3301      	adds	r3, #1
 8004cbe:	60fb      	str	r3, [r7, #12]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2b0d      	cmp	r3, #13
 8004cc4:	dde5      	ble.n	8004c92 <DT_GetRegisterByEnum+0xe>

	return 0;
 8004cc6:	2300      	movs	r3, #0
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3714      	adds	r7, #20
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr
 8004cd4:	2000000c 	.word	0x2000000c

08004cd8 <FreqO_AdjustFreq>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_AdjustFreq()
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	af00      	add	r7, sp, #0
		//OUTPUT_TIMER->ARR = SM_GetEncoderValue(ENCODER_FORWARD) * FREQ_ENCODER_HIFREQ_MAG;
		OUTPUT_TIMER->ARR = SM_GetEncoderValue(ENCODER_FORWARD); //* FREQ_ENCODER_MIDFREQ_MAG;
 8004cdc:	2000      	movs	r0, #0
 8004cde:	f000 fd2f 	bl	8005740 <SM_GetEncoderValue>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	4b02      	ldr	r3, [pc, #8]	; (8004cf0 <FreqO_AdjustFreq+0x18>)
 8004ce8:	62da      	str	r2, [r3, #44]	; 0x2c
		//OUTPUT_TIMER->ARR = SM_GetEncoderValue(ENCODER_FORWARD) * FREQ_ENCODER_LOFREQ_MAG;
}
 8004cea:	bf00      	nop
 8004cec:	bd80      	pop	{r7, pc}
 8004cee:	bf00      	nop
 8004cf0:	40013400 	.word	0x40013400

08004cf4 <FreqO_ModifyOutput>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_ModifyOutput(uint16_t pEncValue)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b082      	sub	sp, #8
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	80fb      	strh	r3, [r7, #6]

	switch(pEncValue)
 8004cfe:	88fb      	ldrh	r3, [r7, #6]
 8004d00:	2b38      	cmp	r3, #56	; 0x38
 8004d02:	f200 80b4 	bhi.w	8004e6e <FreqO_ModifyOutput+0x17a>
 8004d06:	a201      	add	r2, pc, #4	; (adr r2, 8004d0c <FreqO_ModifyOutput+0x18>)
 8004d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d0c:	08004df1 	.word	0x08004df1
 8004d10:	08004df1 	.word	0x08004df1
 8004d14:	08004df1 	.word	0x08004df1
 8004d18:	08004df1 	.word	0x08004df1
 8004d1c:	08004df9 	.word	0x08004df9
 8004d20:	08004df9 	.word	0x08004df9
 8004d24:	08004df9 	.word	0x08004df9
 8004d28:	08004df9 	.word	0x08004df9
 8004d2c:	08004e01 	.word	0x08004e01
 8004d30:	08004e01 	.word	0x08004e01
 8004d34:	08004e01 	.word	0x08004e01
 8004d38:	08004e01 	.word	0x08004e01
 8004d3c:	08004e09 	.word	0x08004e09
 8004d40:	08004e09 	.word	0x08004e09
 8004d44:	08004e09 	.word	0x08004e09
 8004d48:	08004e09 	.word	0x08004e09
 8004d4c:	08004e11 	.word	0x08004e11
 8004d50:	08004e11 	.word	0x08004e11
 8004d54:	08004e11 	.word	0x08004e11
 8004d58:	08004e11 	.word	0x08004e11
 8004d5c:	08004e19 	.word	0x08004e19
 8004d60:	08004e19 	.word	0x08004e19
 8004d64:	08004e19 	.word	0x08004e19
 8004d68:	08004e19 	.word	0x08004e19
 8004d6c:	08004e23 	.word	0x08004e23
 8004d70:	08004e23 	.word	0x08004e23
 8004d74:	08004e23 	.word	0x08004e23
 8004d78:	08004e23 	.word	0x08004e23
 8004d7c:	08004e2d 	.word	0x08004e2d
 8004d80:	08004e2d 	.word	0x08004e2d
 8004d84:	08004e2d 	.word	0x08004e2d
 8004d88:	08004e6f 	.word	0x08004e6f
 8004d8c:	08004e2d 	.word	0x08004e2d
 8004d90:	08004e37 	.word	0x08004e37
 8004d94:	08004e37 	.word	0x08004e37
 8004d98:	08004e37 	.word	0x08004e37
 8004d9c:	08004e37 	.word	0x08004e37
 8004da0:	08004e41 	.word	0x08004e41
 8004da4:	08004e41 	.word	0x08004e41
 8004da8:	08004e41 	.word	0x08004e41
 8004dac:	08004e41 	.word	0x08004e41
 8004db0:	08004e4b 	.word	0x08004e4b
 8004db4:	08004e4b 	.word	0x08004e4b
 8004db8:	08004e4b 	.word	0x08004e4b
 8004dbc:	08004e4b 	.word	0x08004e4b
 8004dc0:	08004e55 	.word	0x08004e55
 8004dc4:	08004e55 	.word	0x08004e55
 8004dc8:	08004e55 	.word	0x08004e55
 8004dcc:	08004e55 	.word	0x08004e55
 8004dd0:	08004e5f 	.word	0x08004e5f
 8004dd4:	08004e5f 	.word	0x08004e5f
 8004dd8:	08004e5f 	.word	0x08004e5f
 8004ddc:	08004e5f 	.word	0x08004e5f
 8004de0:	08004e67 	.word	0x08004e67
 8004de4:	08004e67 	.word	0x08004e67
 8004de8:	08004e67 	.word	0x08004e67
 8004dec:	08004e67 	.word	0x08004e67
	{
		case 0:
		case 1:
		case 2:
		case 3:
			FreqO_ApplyPreset(FPRESET_1HZ);
 8004df0:	2001      	movs	r0, #1
 8004df2:	f000 f845 	bl	8004e80 <FreqO_ApplyPreset>
			break;
 8004df6:	e03a      	b.n	8004e6e <FreqO_ModifyOutput+0x17a>
		case 4:
		case 5:
		case 6:
		case 7:
			FreqO_ApplyPreset(FPRESET_10HZ);
 8004df8:	200a      	movs	r0, #10
 8004dfa:	f000 f841 	bl	8004e80 <FreqO_ApplyPreset>
			break;
 8004dfe:	e036      	b.n	8004e6e <FreqO_ModifyOutput+0x17a>
		case 8:
		case 9:
		case 10:
		case 11:
			FreqO_ApplyPreset(FPRESET_50HZ);
 8004e00:	2032      	movs	r0, #50	; 0x32
 8004e02:	f000 f83d 	bl	8004e80 <FreqO_ApplyPreset>
			break;
 8004e06:	e032      	b.n	8004e6e <FreqO_ModifyOutput+0x17a>
		case 12:
		case 13:
		case 14:
		case 15:
			FreqO_ApplyPreset(FPRESET_100HZ);
 8004e08:	2064      	movs	r0, #100	; 0x64
 8004e0a:	f000 f839 	bl	8004e80 <FreqO_ApplyPreset>
			break;
 8004e0e:	e02e      	b.n	8004e6e <FreqO_ModifyOutput+0x17a>
		case 16:
		case 17:
		case 18:
		case 19:
			FreqO_ApplyPreset(FPRESET_250HZ);
 8004e10:	20fa      	movs	r0, #250	; 0xfa
 8004e12:	f000 f835 	bl	8004e80 <FreqO_ApplyPreset>
			break;
 8004e16:	e02a      	b.n	8004e6e <FreqO_ModifyOutput+0x17a>
		case 20:
		case 21:
		case 22:
		case 23:
			FreqO_ApplyPreset(FPRESET_500HZ);
 8004e18:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004e1c:	f000 f830 	bl	8004e80 <FreqO_ApplyPreset>
			break;
 8004e20:	e025      	b.n	8004e6e <FreqO_ModifyOutput+0x17a>
		case 24:
		case 25:
		case 26:
		case 27:
			FreqO_ApplyPreset(FPRESET_750HZ);
 8004e22:	f240 20ee 	movw	r0, #750	; 0x2ee
 8004e26:	f000 f82b 	bl	8004e80 <FreqO_ApplyPreset>
			break;
 8004e2a:	e020      	b.n	8004e6e <FreqO_ModifyOutput+0x17a>
		case 28:
		case 29:
		case 30:
		case 32:
			FreqO_ApplyPreset(FPRESET_1KHZ);
 8004e2c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004e30:	f000 f826 	bl	8004e80 <FreqO_ApplyPreset>
			break;
 8004e34:	e01b      	b.n	8004e6e <FreqO_ModifyOutput+0x17a>
		case 33:
		case 34:
		case 35:
		case 36:
			FreqO_ApplyPreset(FPRESET_5KHZ);
 8004e36:	f241 3088 	movw	r0, #5000	; 0x1388
 8004e3a:	f000 f821 	bl	8004e80 <FreqO_ApplyPreset>
			break;
 8004e3e:	e016      	b.n	8004e6e <FreqO_ModifyOutput+0x17a>
		case 37:
		case 38:
		case 39:
		case 40:
			FreqO_ApplyPreset(FPRESET_10KHZ);
 8004e40:	f242 7010 	movw	r0, #10000	; 0x2710
 8004e44:	f000 f81c 	bl	8004e80 <FreqO_ApplyPreset>
			break;
 8004e48:	e011      	b.n	8004e6e <FreqO_ModifyOutput+0x17a>
		case 41:
		case 42:
		case 43:
		case 44:
			FreqO_ApplyPreset(FPRESET_25KHZ);
 8004e4a:	f246 10a8 	movw	r0, #25000	; 0x61a8
 8004e4e:	f000 f817 	bl	8004e80 <FreqO_ApplyPreset>
			break;
 8004e52:	e00c      	b.n	8004e6e <FreqO_ModifyOutput+0x17a>
		case 45:
		case 46:
		case 47:
		case 48:
			FreqO_ApplyPreset(FPRESET_50KHZ);
 8004e54:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004e58:	f000 f812 	bl	8004e80 <FreqO_ApplyPreset>
			break;
 8004e5c:	e007      	b.n	8004e6e <FreqO_ModifyOutput+0x17a>
		case 49:
		case 50:
		case 51:
		case 52:
			FreqO_ApplyPreset(FPRESET_75KHZ);
 8004e5e:	4806      	ldr	r0, [pc, #24]	; (8004e78 <FreqO_ModifyOutput+0x184>)
 8004e60:	f000 f80e 	bl	8004e80 <FreqO_ApplyPreset>
			break;
 8004e64:	e003      	b.n	8004e6e <FreqO_ModifyOutput+0x17a>
		case 53:
		case 54:
		case 55:
		case 56:
			FreqO_ApplyPreset(FPRESET_100KHZ);
 8004e66:	4805      	ldr	r0, [pc, #20]	; (8004e7c <FreqO_ModifyOutput+0x188>)
 8004e68:	f000 f80a 	bl	8004e80 <FreqO_ApplyPreset>
			break;
 8004e6c:	bf00      	nop
	}

}
 8004e6e:	bf00      	nop
 8004e70:	3708      	adds	r7, #8
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}
 8004e76:	bf00      	nop
 8004e78:	000124f8 	.word	0x000124f8
 8004e7c:	000186a0 	.word	0x000186a0

08004e80 <FreqO_ApplyPreset>:

 *	@retval None
 *
 */
void FreqO_ApplyPreset(eFreqSettings_t pPresetEnum)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b084      	sub	sp, #16
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
	DacTimeReg_t* tmp = DT_GetRegisterByEnum(pPresetEnum);
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	f7ff fefb 	bl	8004c84 <DT_GetRegisterByEnum>
 8004e8e:	60f8      	str	r0, [r7, #12]
	if(tmp)
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d015      	beq.n	8004ec2 <FreqO_ApplyPreset+0x42>
	{
		OUTPUT_TIMER->PSC = tmp->psc;
 8004e96:	4a0d      	ldr	r2, [pc, #52]	; (8004ecc <FreqO_ApplyPreset+0x4c>)
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	6293      	str	r3, [r2, #40]	; 0x28
		OUTPUT_TIMER->ARR = tmp->arr;
 8004e9e:	4a0b      	ldr	r2, [pc, #44]	; (8004ecc <FreqO_ApplyPreset+0x4c>)
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	62d3      	str	r3, [r2, #44]	; 0x2c


		//eNewFreqPreset = pPresetEnum;
		FreqProfile_t * tmp = FreqO_FindFPresetObject(pPresetEnum);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f000 f822 	bl	8004ef0 <FreqO_FindFPresetObject>
 8004eac:	60b8      	str	r0, [r7, #8]
		if(tmp)
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d003      	beq.n	8004ebc <FreqO_ApplyPreset+0x3c>
		{
			freq_profile = tmp;
 8004eb4:	4a06      	ldr	r2, [pc, #24]	; (8004ed0 <FreqO_ApplyPreset+0x50>)
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	6013      	str	r3, [r2, #0]
		{
			DM_SetErrorDebugMsg("FreqO_ApplyPreset() null pointer error");
		}

	}
}
 8004eba:	e002      	b.n	8004ec2 <FreqO_ApplyPreset+0x42>
			DM_SetErrorDebugMsg("FreqO_ApplyPreset() null pointer error");
 8004ebc:	4805      	ldr	r0, [pc, #20]	; (8004ed4 <FreqO_ApplyPreset+0x54>)
 8004ebe:	f7fc faff 	bl	80014c0 <DM_SetErrorDebugMsg>
}
 8004ec2:	bf00      	nop
 8004ec4:	3710      	adds	r7, #16
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	bf00      	nop
 8004ecc:	40013400 	.word	0x40013400
 8004ed0:	20000198 	.word	0x20000198
 8004ed4:	080136c8 	.word	0x080136c8

08004ed8 <FreqO_GetFPresetObject>:
 *	@param None
 *	@retval pointer to FreqProfile_t struct
 *
 */
FreqProfile_t * FreqO_GetFPresetObject()
{
 8004ed8:	b480      	push	{r7}
 8004eda:	af00      	add	r7, sp, #0
	return freq_profile;
 8004edc:	4b03      	ldr	r3, [pc, #12]	; (8004eec <FreqO_GetFPresetObject+0x14>)
 8004ede:	681b      	ldr	r3, [r3, #0]
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr
 8004eea:	bf00      	nop
 8004eec:	20000198 	.word	0x20000198

08004ef0 <FreqO_FindFPresetObject>:

 *	@retval pointer to FreqProfile_t struct
 *
 */
FreqProfile_t * FreqO_FindFPresetObject(eFreqSettings_t pEnum)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b084      	sub	sp, #16
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++ )
 8004ef8:	2300      	movs	r3, #0
 8004efa:	60fb      	str	r3, [r7, #12]
 8004efc:	e00e      	b.n	8004f1c <FreqO_FindFPresetObject+0x2c>
	{
		if(theFreqProfiles[i].hertz == pEnum)
 8004efe:	4a0d      	ldr	r2, [pc, #52]	; (8004f34 <FreqO_FindFPresetObject+0x44>)
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d104      	bne.n	8004f16 <FreqO_FindFPresetObject+0x26>
		{
			return &theFreqProfiles[i];
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	00db      	lsls	r3, r3, #3
 8004f10:	4a08      	ldr	r2, [pc, #32]	; (8004f34 <FreqO_FindFPresetObject+0x44>)
 8004f12:	4413      	add	r3, r2
 8004f14:	e009      	b.n	8004f2a <FreqO_FindFPresetObject+0x3a>
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++ )
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	3301      	adds	r3, #1
 8004f1a:	60fb      	str	r3, [r7, #12]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2b0d      	cmp	r3, #13
 8004f20:	dded      	ble.n	8004efe <FreqO_FindFPresetObject+0xe>
		}
	}
	// error!
	DM_SetErrorDebugMsg("FreqO_FindFPresetObject(): no FPreset obj found");
 8004f22:	4805      	ldr	r0, [pc, #20]	; (8004f38 <FreqO_FindFPresetObject+0x48>)
 8004f24:	f7fc facc 	bl	80014c0 <DM_SetErrorDebugMsg>
	return 0;
 8004f28:	2300      	movs	r3, #0
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3710      	adds	r7, #16
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
 8004f32:	bf00      	nop
 8004f34:	20000128 	.word	0x20000128
 8004f38:	080136f0 	.word	0x080136f0

08004f3c <FreqO_GetFreqPresetEncoderRange>:
 *	@param None
 *	@retval uint8_t
 *
 */
uint8_t FreqO_GetFreqPresetEncoderRange()
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	af00      	add	r7, sp, #0
	return FreqPresetEncoderRange;
 8004f40:	4b03      	ldr	r3, [pc, #12]	; (8004f50 <FreqO_GetFreqPresetEncoderRange+0x14>)
 8004f42:	781b      	ldrb	r3, [r3, #0]
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr
 8004f4e:	bf00      	nop
 8004f50:	20000124 	.word	0x20000124

08004f54 <FuncO_Init>:
 *	@param pEncoderValue rotary encoder value
 *	@retval None
 *
 */
void FuncO_Init()
{
 8004f54:	b480      	push	{r7}
 8004f56:	af00      	add	r7, sp, #0
		aProcessedSignalDataTable[i] = sine_data_table_3600[i];

	for(int i = 0; i < SINE_DATA_SIZE; i++)
		aProcessedSyncDataTable[i] = sine_data_table_3600[i];
		*/
}
 8004f58:	bf00      	nop
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr
	...

08004f64 <FuncO_ModifySignalOutput>:
 *	@param pEncoderValue rotary encoder value
 *	@retval None
 *
 */
void FuncO_ModifySignalOutput(uint16_t pEncoderValue)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b082      	sub	sp, #8
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	80fb      	strh	r3, [r7, #6]


	switch(pEncoderValue)
 8004f6e:	88fb      	ldrh	r3, [r7, #6]
 8004f70:	2b17      	cmp	r3, #23
 8004f72:	d84b      	bhi.n	800500c <FuncO_ModifySignalOutput+0xa8>
 8004f74:	a201      	add	r2, pc, #4	; (adr r2, 8004f7c <FuncO_ModifySignalOutput+0x18>)
 8004f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f7a:	bf00      	nop
 8004f7c:	08004fdd 	.word	0x08004fdd
 8004f80:	08004fdd 	.word	0x08004fdd
 8004f84:	08004fdd 	.word	0x08004fdd
 8004f88:	08004fe5 	.word	0x08004fe5
 8004f8c:	08004fe5 	.word	0x08004fe5
 8004f90:	08004fe5 	.word	0x08004fe5
 8004f94:	08004fe5 	.word	0x08004fe5
 8004f98:	08004fed 	.word	0x08004fed
 8004f9c:	08004fed 	.word	0x08004fed
 8004fa0:	08004fed 	.word	0x08004fed
 8004fa4:	08004fed 	.word	0x08004fed
 8004fa8:	08004ff5 	.word	0x08004ff5
 8004fac:	08004ff5 	.word	0x08004ff5
 8004fb0:	08004ff5 	.word	0x08004ff5
 8004fb4:	08004ff5 	.word	0x08004ff5
 8004fb8:	08004ffd 	.word	0x08004ffd
 8004fbc:	08004ffd 	.word	0x08004ffd
 8004fc0:	08004ffd 	.word	0x08004ffd
 8004fc4:	08004ffd 	.word	0x08004ffd
 8004fc8:	08005005 	.word	0x08005005
 8004fcc:	08005005 	.word	0x08005005
 8004fd0:	08005005 	.word	0x08005005
 8004fd4:	08005005 	.word	0x08005005
 8004fd8:	08005005 	.word	0x08005005
	{
		case 0: case 1: case 2:
			FuncO_ApplyPresetToSignal(SINE_FUNC_MODE);
 8004fdc:	2000      	movs	r0, #0
 8004fde:	f000 f871 	bl	80050c4 <FuncO_ApplyPresetToSignal>
			break;
 8004fe2:	e013      	b.n	800500c <FuncO_ModifySignalOutput+0xa8>

		case 3: case 4: case 5: case 6:
			FuncO_ApplyPresetToSignal(SQUARE_FUNC_MODE);
 8004fe4:	2001      	movs	r0, #1
 8004fe6:	f000 f86d 	bl	80050c4 <FuncO_ApplyPresetToSignal>
			break;
 8004fea:	e00f      	b.n	800500c <FuncO_ModifySignalOutput+0xa8>

		case 7: case 8: case 9: case 10:
			FuncO_ApplyPresetToSignal(SAW_FUNC_MODE);
 8004fec:	2002      	movs	r0, #2
 8004fee:	f000 f869 	bl	80050c4 <FuncO_ApplyPresetToSignal>
			break;
 8004ff2:	e00b      	b.n	800500c <FuncO_ModifySignalOutput+0xa8>

		case 11: case 12: case 13: case 14:
			FuncO_ApplyPresetToSignal(REV_SAW_FUNC_MODE);
 8004ff4:	2003      	movs	r0, #3
 8004ff6:	f000 f865 	bl	80050c4 <FuncO_ApplyPresetToSignal>
			break;
 8004ffa:	e007      	b.n	800500c <FuncO_ModifySignalOutput+0xa8>

		case 15: case 16: case 17: case 18:
			FuncO_ApplyPresetToSignal(TRIANGLE_FUNC_MODE);
 8004ffc:	2004      	movs	r0, #4
 8004ffe:	f000 f861 	bl	80050c4 <FuncO_ApplyPresetToSignal>
			break;
 8005002:	e003      	b.n	800500c <FuncO_ModifySignalOutput+0xa8>

		case 19: case 20: case 21: case 22: case 23:
			FuncO_ApplyPresetToSignal(IMPULSE_FUNC_MODE);
 8005004:	2005      	movs	r0, #5
 8005006:	f000 f85d 	bl	80050c4 <FuncO_ApplyPresetToSignal>
			break;
 800500a:	bf00      	nop

	}
}
 800500c:	bf00      	nop
 800500e:	3708      	adds	r7, #8
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}

08005014 <FuncO_ModifySyncOutput>:
 *	@param pEncoderValue rotary encoder value
 *	@retval None
 *
 */
void FuncO_ModifySyncOutput(uint16_t pEncoderValue)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b082      	sub	sp, #8
 8005018:	af00      	add	r7, sp, #0
 800501a:	4603      	mov	r3, r0
 800501c:	80fb      	strh	r3, [r7, #6]


	switch(pEncoderValue)
 800501e:	88fb      	ldrh	r3, [r7, #6]
 8005020:	2b17      	cmp	r3, #23
 8005022:	d84b      	bhi.n	80050bc <FuncO_ModifySyncOutput+0xa8>
 8005024:	a201      	add	r2, pc, #4	; (adr r2, 800502c <FuncO_ModifySyncOutput+0x18>)
 8005026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800502a:	bf00      	nop
 800502c:	0800508d 	.word	0x0800508d
 8005030:	0800508d 	.word	0x0800508d
 8005034:	0800508d 	.word	0x0800508d
 8005038:	08005095 	.word	0x08005095
 800503c:	08005095 	.word	0x08005095
 8005040:	08005095 	.word	0x08005095
 8005044:	08005095 	.word	0x08005095
 8005048:	0800509d 	.word	0x0800509d
 800504c:	0800509d 	.word	0x0800509d
 8005050:	0800509d 	.word	0x0800509d
 8005054:	0800509d 	.word	0x0800509d
 8005058:	080050a5 	.word	0x080050a5
 800505c:	080050a5 	.word	0x080050a5
 8005060:	080050a5 	.word	0x080050a5
 8005064:	080050a5 	.word	0x080050a5
 8005068:	080050ad 	.word	0x080050ad
 800506c:	080050ad 	.word	0x080050ad
 8005070:	080050ad 	.word	0x080050ad
 8005074:	080050ad 	.word	0x080050ad
 8005078:	080050b5 	.word	0x080050b5
 800507c:	080050b5 	.word	0x080050b5
 8005080:	080050b5 	.word	0x080050b5
 8005084:	080050b5 	.word	0x080050b5
 8005088:	080050b5 	.word	0x080050b5
	{
		case 0: case 1: case 2:
			FuncO_ApplyPresetToSync(SINE_FUNC_MODE);
 800508c:	2000      	movs	r0, #0
 800508e:	f000 f873 	bl	8005178 <FuncO_ApplyPresetToSync>
			break;
 8005092:	e013      	b.n	80050bc <FuncO_ModifySyncOutput+0xa8>

		case 3: case 4: case 5: case 6:
			FuncO_ApplyPresetToSync(SQUARE_FUNC_MODE);
 8005094:	2001      	movs	r0, #1
 8005096:	f000 f86f 	bl	8005178 <FuncO_ApplyPresetToSync>
			break;
 800509a:	e00f      	b.n	80050bc <FuncO_ModifySyncOutput+0xa8>

		case 7: case 8: case 9: case 10:
			FuncO_ApplyPresetToSync(SAW_FUNC_MODE);
 800509c:	2002      	movs	r0, #2
 800509e:	f000 f86b 	bl	8005178 <FuncO_ApplyPresetToSync>
			break;
 80050a2:	e00b      	b.n	80050bc <FuncO_ModifySyncOutput+0xa8>

		case 11: case 12: case 13: case 14:
			FuncO_ApplyPresetToSync(REV_SAW_FUNC_MODE);
 80050a4:	2003      	movs	r0, #3
 80050a6:	f000 f867 	bl	8005178 <FuncO_ApplyPresetToSync>
			break;
 80050aa:	e007      	b.n	80050bc <FuncO_ModifySyncOutput+0xa8>

		case 15: case 16: case 17: case 18:
			FuncO_ApplyPresetToSync(TRIANGLE_FUNC_MODE);
 80050ac:	2004      	movs	r0, #4
 80050ae:	f000 f863 	bl	8005178 <FuncO_ApplyPresetToSync>
			break;
 80050b2:	e003      	b.n	80050bc <FuncO_ModifySyncOutput+0xa8>

		case 19: case 20: case 21: case 22: case 23:
			FuncO_ApplyPresetToSync(IMPULSE_FUNC_MODE);
 80050b4:	2005      	movs	r0, #5
 80050b6:	f000 f85f 	bl	8005178 <FuncO_ApplyPresetToSync>
			break;
 80050ba:	bf00      	nop

	}
}
 80050bc:	bf00      	nop
 80050be:	3708      	adds	r7, #8
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <FuncO_ApplyPresetToSignal>:

 *	@retval None
 *
 */
void FuncO_ApplyPresetToSignal(eOutput_mode pPresetEnum)
{
 80050c4:	b590      	push	{r4, r7, lr}
 80050c6:	b087      	sub	sp, #28
 80050c8:	af02      	add	r7, sp, #8
 80050ca:	4603      	mov	r3, r0
 80050cc:	71fb      	strb	r3, [r7, #7]

	// copy the lookup table for the next output function in to SignalChannel object
	SM_GetOutputChannel(SIGNAL_CHANNEL)->ref_lut_data = theFuncProfiles[pPresetEnum].lookup_table_data;
 80050ce:	79fc      	ldrb	r4, [r7, #7]
 80050d0:	2000      	movs	r0, #0
 80050d2:	f000 fb1f 	bl	8005714 <SM_GetOutputChannel>
 80050d6:	4601      	mov	r1, r0
 80050d8:	4a23      	ldr	r2, [pc, #140]	; (8005168 <FuncO_ApplyPresetToSignal+0xa4>)
 80050da:	00e3      	lsls	r3, r4, #3
 80050dc:	4413      	add	r3, r2
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	604b      	str	r3, [r1, #4]

	// set preset for PGA gain and dsp amplitude adjustment
	eAmpSettings_t eTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile->amp_setting;
 80050e2:	2000      	movs	r0, #0
 80050e4:	f000 fb16 	bl	8005714 <SM_GetOutputChannel>
 80050e8:	4603      	mov	r3, r0
 80050ea:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	73fb      	strb	r3, [r7, #15]
	VPP_ApplyPresetToSignal(eTmpVppPreset);
 80050f2:	7bfb      	ldrb	r3, [r7, #15]
 80050f4:	4618      	mov	r0, r3
 80050f6:	f000 fba9 	bl	800584c <VPP_ApplyPresetToSignal>

	// set the next function output
	SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile = &theFuncProfiles[pPresetEnum];
 80050fa:	79fc      	ldrb	r4, [r7, #7]
 80050fc:	2000      	movs	r0, #0
 80050fe:	f000 fb09 	bl	8005714 <SM_GetOutputChannel>
 8005102:	4601      	mov	r1, r0
 8005104:	00e3      	lsls	r3, r4, #3
 8005106:	4a18      	ldr	r2, [pc, #96]	; (8005168 <FuncO_ApplyPresetToSignal+0xa4>)
 8005108:	4413      	add	r3, r2
 800510a:	f8c1 31e8 	str.w	r3, [r1, #488]	; 0x1e8

	// pause timer to resync both outputs
	//OUTPUT_TIMER->CR1 &= ~(TIM_CR1_CEN);
	HAL_TIM_Base_Stop(&htim8);
 800510e:	4817      	ldr	r0, [pc, #92]	; (800516c <FuncO_ApplyPresetToSignal+0xa8>)
 8005110:	f007 f994 	bl	800c43c <HAL_TIM_Base_Stop>

	// restart the DAC with the new data
	HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8005114:	2100      	movs	r1, #0
 8005116:	4816      	ldr	r0, [pc, #88]	; (8005170 <FuncO_ApplyPresetToSignal+0xac>)
 8005118:	f005 f932 	bl	800a380 <HAL_DAC_Stop_DMA>
	HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 800511c:	2000      	movs	r0, #0
 800511e:	f000 faf9 	bl	8005714 <SM_GetOutputChannel>
 8005122:	4603      	mov	r3, r0
 8005124:	f103 0208 	add.w	r2, r3, #8
 8005128:	2300      	movs	r3, #0
 800512a:	9300      	str	r3, [sp, #0]
 800512c:	2378      	movs	r3, #120	; 0x78
 800512e:	2100      	movs	r1, #0
 8005130:	480f      	ldr	r0, [pc, #60]	; (8005170 <FuncO_ApplyPresetToSignal+0xac>)
 8005132:	f005 f863 	bl	800a1fc <HAL_DAC_Start_DMA>

	// restart the the other DAC
	HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1);
 8005136:	2100      	movs	r1, #0
 8005138:	480e      	ldr	r0, [pc, #56]	; (8005174 <FuncO_ApplyPresetToSignal+0xb0>)
 800513a:	f005 f921 	bl	800a380 <HAL_DAC_Stop_DMA>
	HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SYNC_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 800513e:	2001      	movs	r0, #1
 8005140:	f000 fae8 	bl	8005714 <SM_GetOutputChannel>
 8005144:	4603      	mov	r3, r0
 8005146:	f103 0208 	add.w	r2, r3, #8
 800514a:	2300      	movs	r3, #0
 800514c:	9300      	str	r3, [sp, #0]
 800514e:	2378      	movs	r3, #120	; 0x78
 8005150:	2100      	movs	r1, #0
 8005152:	4808      	ldr	r0, [pc, #32]	; (8005174 <FuncO_ApplyPresetToSignal+0xb0>)
 8005154:	f005 f852 	bl	800a1fc <HAL_DAC_Start_DMA>

	// resume timer to resync both outputs
	HAL_TIM_Base_Start(&htim8);
 8005158:	4804      	ldr	r0, [pc, #16]	; (800516c <FuncO_ApplyPresetToSignal+0xa8>)
 800515a:	f007 f941 	bl	800c3e0 <HAL_TIM_Base_Start>
	//OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
}
 800515e:	bf00      	nop
 8005160:	3714      	adds	r7, #20
 8005162:	46bd      	mov	sp, r7
 8005164:	bd90      	pop	{r4, r7, pc}
 8005166:	bf00      	nop
 8005168:	200001a0 	.word	0x200001a0
 800516c:	200026f8 	.word	0x200026f8
 8005170:	200025c0 	.word	0x200025c0
 8005174:	200025ac 	.word	0x200025ac

08005178 <FuncO_ApplyPresetToSync>:

 *	@retval None
 *
 */
void FuncO_ApplyPresetToSync(eOutput_mode pPresetEnum)
{
 8005178:	b590      	push	{r4, r7, lr}
 800517a:	b087      	sub	sp, #28
 800517c:	af02      	add	r7, sp, #8
 800517e:	4603      	mov	r3, r0
 8005180:	71fb      	strb	r3, [r7, #7]
	// copy the lookup table for the next output function in to SyncChannel object
	SM_GetOutputChannel(SYNC_CHANNEL)->ref_lut_data = theFuncProfiles[pPresetEnum].lookup_table_data;
 8005182:	79fc      	ldrb	r4, [r7, #7]
 8005184:	2001      	movs	r0, #1
 8005186:	f000 fac5 	bl	8005714 <SM_GetOutputChannel>
 800518a:	4601      	mov	r1, r0
 800518c:	4a26      	ldr	r2, [pc, #152]	; (8005228 <FuncO_ApplyPresetToSync+0xb0>)
 800518e:	00e3      	lsls	r3, r4, #3
 8005190:	4413      	add	r3, r2
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	604b      	str	r3, [r1, #4]

	// set preset PGA gain and dsp amplitude adjustment
	eAmpSettings_t eTmpVppPreset = SM_GetOutputChannel(SYNC_CHANNEL)->amp_profile->amp_setting;
 8005196:	2001      	movs	r0, #1
 8005198:	f000 fabc 	bl	8005714 <SM_GetOutputChannel>
 800519c:	4603      	mov	r3, r0
 800519e:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 80051a2:	781b      	ldrb	r3, [r3, #0]
 80051a4:	73fb      	strb	r3, [r7, #15]
	VPP_ApplyPresetToSync(eTmpVppPreset);
 80051a6:	7bfb      	ldrb	r3, [r7, #15]
 80051a8:	4618      	mov	r0, r3
 80051aa:	f000 fb7d 	bl	80058a8 <VPP_ApplyPresetToSync>

	// set the next output function
	SM_GetOutputChannel(SYNC_CHANNEL)->func_profile = &theFuncProfiles[pPresetEnum];
 80051ae:	79fc      	ldrb	r4, [r7, #7]
 80051b0:	2001      	movs	r0, #1
 80051b2:	f000 faaf 	bl	8005714 <SM_GetOutputChannel>
 80051b6:	4601      	mov	r1, r0
 80051b8:	00e3      	lsls	r3, r4, #3
 80051ba:	4a1b      	ldr	r2, [pc, #108]	; (8005228 <FuncO_ApplyPresetToSync+0xb0>)
 80051bc:	4413      	add	r3, r2
 80051be:	f8c1 31e8 	str.w	r3, [r1, #488]	; 0x1e8

	// pause timer to resync both outputs
	//HAL_TIM_Base_Stop(&htim8);
	OUTPUT_TIMER->CR1 &= ~(TIM_CR1_CEN);
 80051c2:	4b1a      	ldr	r3, [pc, #104]	; (800522c <FuncO_ApplyPresetToSync+0xb4>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a19      	ldr	r2, [pc, #100]	; (800522c <FuncO_ApplyPresetToSync+0xb4>)
 80051c8:	f023 0301 	bic.w	r3, r3, #1
 80051cc:	6013      	str	r3, [r2, #0]

	// restart the DAC with the new data
	HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1);
 80051ce:	2100      	movs	r1, #0
 80051d0:	4817      	ldr	r0, [pc, #92]	; (8005230 <FuncO_ApplyPresetToSync+0xb8>)
 80051d2:	f005 f8d5 	bl	800a380 <HAL_DAC_Stop_DMA>
	HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SYNC_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 80051d6:	2001      	movs	r0, #1
 80051d8:	f000 fa9c 	bl	8005714 <SM_GetOutputChannel>
 80051dc:	4603      	mov	r3, r0
 80051de:	f103 0208 	add.w	r2, r3, #8
 80051e2:	2300      	movs	r3, #0
 80051e4:	9300      	str	r3, [sp, #0]
 80051e6:	2378      	movs	r3, #120	; 0x78
 80051e8:	2100      	movs	r1, #0
 80051ea:	4811      	ldr	r0, [pc, #68]	; (8005230 <FuncO_ApplyPresetToSync+0xb8>)
 80051ec:	f005 f806 	bl	800a1fc <HAL_DAC_Start_DMA>

	// restart the the other DAC
	HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 80051f0:	2100      	movs	r1, #0
 80051f2:	4810      	ldr	r0, [pc, #64]	; (8005234 <FuncO_ApplyPresetToSync+0xbc>)
 80051f4:	f005 f8c4 	bl	800a380 <HAL_DAC_Stop_DMA>
	HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 80051f8:	2000      	movs	r0, #0
 80051fa:	f000 fa8b 	bl	8005714 <SM_GetOutputChannel>
 80051fe:	4603      	mov	r3, r0
 8005200:	f103 0208 	add.w	r2, r3, #8
 8005204:	2300      	movs	r3, #0
 8005206:	9300      	str	r3, [sp, #0]
 8005208:	2378      	movs	r3, #120	; 0x78
 800520a:	2100      	movs	r1, #0
 800520c:	4809      	ldr	r0, [pc, #36]	; (8005234 <FuncO_ApplyPresetToSync+0xbc>)
 800520e:	f004 fff5 	bl	800a1fc <HAL_DAC_Start_DMA>

	// resume timer to resync both outputs
	//HAL_TIM_Base_Start(&htim8);
	OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
 8005212:	4b06      	ldr	r3, [pc, #24]	; (800522c <FuncO_ApplyPresetToSync+0xb4>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a05      	ldr	r2, [pc, #20]	; (800522c <FuncO_ApplyPresetToSync+0xb4>)
 8005218:	f043 0301 	orr.w	r3, r3, #1
 800521c:	6013      	str	r3, [r2, #0]
}
 800521e:	bf00      	nop
 8005220:	3714      	adds	r7, #20
 8005222:	46bd      	mov	sp, r7
 8005224:	bd90      	pop	{r4, r7, pc}
 8005226:	bf00      	nop
 8005228:	200001a0 	.word	0x200001a0
 800522c:	40013400 	.word	0x40013400
 8005230:	200025ac 	.word	0x200025ac
 8005234:	200025c0 	.word	0x200025c0

08005238 <FuncO_GetFuncPresetEncoderRange>:
 *	@param None
 *	@retval uint8_t
 *
 */
uint8_t FuncO_GetFuncPresetEncoderRange()
{
 8005238:	b480      	push	{r7}
 800523a:	af00      	add	r7, sp, #0
	return FuncPresetEncoderRange;
 800523c:	4b03      	ldr	r3, [pc, #12]	; (800524c <FuncO_GetFuncPresetEncoderRange+0x14>)
 800523e:	781b      	ldrb	r3, [r3, #0]
}
 8005240:	4618      	mov	r0, r3
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr
 800524a:	bf00      	nop
 800524c:	2000019c 	.word	0x2000019c

08005250 <GO_ApplyPresetToSignal>:
 *	@param None
 *	@retval None
 *
 */
void GO_ApplyPresetToSignal(eGainSettings_t pPresetEnum)
{
 8005250:	b590      	push	{r4, r7, lr}
 8005252:	b083      	sub	sp, #12
 8005254:	af00      	add	r7, sp, #0
 8005256:	4603      	mov	r3, r0
 8005258:	71fb      	strb	r3, [r7, #7]
	SM_GetOutputChannel(SIGNAL_CHANNEL)->gain_profile = &theGainProfiles[pPresetEnum];
 800525a:	79fc      	ldrb	r4, [r7, #7]
 800525c:	2000      	movs	r0, #0
 800525e:	f000 fa59 	bl	8005714 <SM_GetOutputChannel>
 8005262:	4601      	mov	r1, r0
 8005264:	4623      	mov	r3, r4
 8005266:	005b      	lsls	r3, r3, #1
 8005268:	4423      	add	r3, r4
 800526a:	4a4f      	ldr	r2, [pc, #316]	; (80053a8 <GO_ApplyPresetToSignal+0x158>)
 800526c:	4413      	add	r3, r2
 800526e:	f8c1 31f0 	str.w	r3, [r1, #496]	; 0x1f0

	switch(pPresetEnum)
 8005272:	79fb      	ldrb	r3, [r7, #7]
 8005274:	2b07      	cmp	r3, #7
 8005276:	f200 8093 	bhi.w	80053a0 <GO_ApplyPresetToSignal+0x150>
 800527a:	a201      	add	r2, pc, #4	; (adr r2, 8005280 <GO_ApplyPresetToSignal+0x30>)
 800527c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005280:	080052a1 	.word	0x080052a1
 8005284:	080052c1 	.word	0x080052c1
 8005288:	080052e1 	.word	0x080052e1
 800528c:	08005301 	.word	0x08005301
 8005290:	08005321 	.word	0x08005321
 8005294:	08005341 	.word	0x08005341
 8005298:	08005361 	.word	0x08005361
 800529c:	08005381 	.word	0x08005381
	{
		case ZERO_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 80052a0:	2200      	movs	r2, #0
 80052a2:	2101      	movs	r1, #1
 80052a4:	4841      	ldr	r0, [pc, #260]	; (80053ac <GO_ApplyPresetToSignal+0x15c>)
 80052a6:	f005 ffa1 	bl	800b1ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 80052aa:	2200      	movs	r2, #0
 80052ac:	2120      	movs	r1, #32
 80052ae:	4840      	ldr	r0, [pc, #256]	; (80053b0 <GO_ApplyPresetToSignal+0x160>)
 80052b0:	f005 ff9c 	bl	800b1ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 80052b4:	2200      	movs	r2, #0
 80052b6:	2110      	movs	r1, #16
 80052b8:	483d      	ldr	r0, [pc, #244]	; (80053b0 <GO_ApplyPresetToSignal+0x160>)
 80052ba:	f005 ff97 	bl	800b1ec <HAL_GPIO_WritePin>
			break;
 80052be:	e06f      	b.n	80053a0 <GO_ApplyPresetToSignal+0x150>

		case ONE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 80052c0:	2201      	movs	r2, #1
 80052c2:	2101      	movs	r1, #1
 80052c4:	4839      	ldr	r0, [pc, #228]	; (80053ac <GO_ApplyPresetToSignal+0x15c>)
 80052c6:	f005 ff91 	bl	800b1ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 80052ca:	2200      	movs	r2, #0
 80052cc:	2120      	movs	r1, #32
 80052ce:	4838      	ldr	r0, [pc, #224]	; (80053b0 <GO_ApplyPresetToSignal+0x160>)
 80052d0:	f005 ff8c 	bl	800b1ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 80052d4:	2200      	movs	r2, #0
 80052d6:	2110      	movs	r1, #16
 80052d8:	4835      	ldr	r0, [pc, #212]	; (80053b0 <GO_ApplyPresetToSignal+0x160>)
 80052da:	f005 ff87 	bl	800b1ec <HAL_GPIO_WritePin>
			break;
 80052de:	e05f      	b.n	80053a0 <GO_ApplyPresetToSignal+0x150>

		case TWO_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 80052e0:	2200      	movs	r2, #0
 80052e2:	2101      	movs	r1, #1
 80052e4:	4831      	ldr	r0, [pc, #196]	; (80053ac <GO_ApplyPresetToSignal+0x15c>)
 80052e6:	f005 ff81 	bl	800b1ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 80052ea:	2201      	movs	r2, #1
 80052ec:	2120      	movs	r1, #32
 80052ee:	4830      	ldr	r0, [pc, #192]	; (80053b0 <GO_ApplyPresetToSignal+0x160>)
 80052f0:	f005 ff7c 	bl	800b1ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 80052f4:	2200      	movs	r2, #0
 80052f6:	2110      	movs	r1, #16
 80052f8:	482d      	ldr	r0, [pc, #180]	; (80053b0 <GO_ApplyPresetToSignal+0x160>)
 80052fa:	f005 ff77 	bl	800b1ec <HAL_GPIO_WritePin>
			break;
 80052fe:	e04f      	b.n	80053a0 <GO_ApplyPresetToSignal+0x150>

		case THREE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8005300:	2201      	movs	r2, #1
 8005302:	2101      	movs	r1, #1
 8005304:	4829      	ldr	r0, [pc, #164]	; (80053ac <GO_ApplyPresetToSignal+0x15c>)
 8005306:	f005 ff71 	bl	800b1ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 800530a:	2201      	movs	r2, #1
 800530c:	2120      	movs	r1, #32
 800530e:	4828      	ldr	r0, [pc, #160]	; (80053b0 <GO_ApplyPresetToSignal+0x160>)
 8005310:	f005 ff6c 	bl	800b1ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8005314:	2200      	movs	r2, #0
 8005316:	2110      	movs	r1, #16
 8005318:	4825      	ldr	r0, [pc, #148]	; (80053b0 <GO_ApplyPresetToSignal+0x160>)
 800531a:	f005 ff67 	bl	800b1ec <HAL_GPIO_WritePin>
			break;
 800531e:	e03f      	b.n	80053a0 <GO_ApplyPresetToSignal+0x150>

		case FOUR_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8005320:	2200      	movs	r2, #0
 8005322:	2101      	movs	r1, #1
 8005324:	4821      	ldr	r0, [pc, #132]	; (80053ac <GO_ApplyPresetToSignal+0x15c>)
 8005326:	f005 ff61 	bl	800b1ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 800532a:	2200      	movs	r2, #0
 800532c:	2120      	movs	r1, #32
 800532e:	4820      	ldr	r0, [pc, #128]	; (80053b0 <GO_ApplyPresetToSignal+0x160>)
 8005330:	f005 ff5c 	bl	800b1ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8005334:	2201      	movs	r2, #1
 8005336:	2110      	movs	r1, #16
 8005338:	481d      	ldr	r0, [pc, #116]	; (80053b0 <GO_ApplyPresetToSignal+0x160>)
 800533a:	f005 ff57 	bl	800b1ec <HAL_GPIO_WritePin>
			break;
 800533e:	e02f      	b.n	80053a0 <GO_ApplyPresetToSignal+0x150>

		case FIVE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8005340:	2201      	movs	r2, #1
 8005342:	2101      	movs	r1, #1
 8005344:	4819      	ldr	r0, [pc, #100]	; (80053ac <GO_ApplyPresetToSignal+0x15c>)
 8005346:	f005 ff51 	bl	800b1ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 800534a:	2200      	movs	r2, #0
 800534c:	2120      	movs	r1, #32
 800534e:	4818      	ldr	r0, [pc, #96]	; (80053b0 <GO_ApplyPresetToSignal+0x160>)
 8005350:	f005 ff4c 	bl	800b1ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8005354:	2201      	movs	r2, #1
 8005356:	2110      	movs	r1, #16
 8005358:	4815      	ldr	r0, [pc, #84]	; (80053b0 <GO_ApplyPresetToSignal+0x160>)
 800535a:	f005 ff47 	bl	800b1ec <HAL_GPIO_WritePin>
			break;
 800535e:	e01f      	b.n	80053a0 <GO_ApplyPresetToSignal+0x150>

		case SIX_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8005360:	2200      	movs	r2, #0
 8005362:	2101      	movs	r1, #1
 8005364:	4811      	ldr	r0, [pc, #68]	; (80053ac <GO_ApplyPresetToSignal+0x15c>)
 8005366:	f005 ff41 	bl	800b1ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 800536a:	2201      	movs	r2, #1
 800536c:	2120      	movs	r1, #32
 800536e:	4810      	ldr	r0, [pc, #64]	; (80053b0 <GO_ApplyPresetToSignal+0x160>)
 8005370:	f005 ff3c 	bl	800b1ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8005374:	2201      	movs	r2, #1
 8005376:	2110      	movs	r1, #16
 8005378:	480d      	ldr	r0, [pc, #52]	; (80053b0 <GO_ApplyPresetToSignal+0x160>)
 800537a:	f005 ff37 	bl	800b1ec <HAL_GPIO_WritePin>
			break;
 800537e:	e00f      	b.n	80053a0 <GO_ApplyPresetToSignal+0x150>

		case SEVEN_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8005380:	2201      	movs	r2, #1
 8005382:	2101      	movs	r1, #1
 8005384:	4809      	ldr	r0, [pc, #36]	; (80053ac <GO_ApplyPresetToSignal+0x15c>)
 8005386:	f005 ff31 	bl	800b1ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 800538a:	2201      	movs	r2, #1
 800538c:	2120      	movs	r1, #32
 800538e:	4808      	ldr	r0, [pc, #32]	; (80053b0 <GO_ApplyPresetToSignal+0x160>)
 8005390:	f005 ff2c 	bl	800b1ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8005394:	2201      	movs	r2, #1
 8005396:	2110      	movs	r1, #16
 8005398:	4805      	ldr	r0, [pc, #20]	; (80053b0 <GO_ApplyPresetToSignal+0x160>)
 800539a:	f005 ff27 	bl	800b1ec <HAL_GPIO_WritePin>
			break;
 800539e:	bf00      	nop
	}
}
 80053a0:	bf00      	nop
 80053a2:	370c      	adds	r7, #12
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd90      	pop	{r4, r7, pc}
 80053a8:	200001d0 	.word	0x200001d0
 80053ac:	48000400 	.word	0x48000400
 80053b0:	48000800 	.word	0x48000800

080053b4 <GO_ApplyPresetToSync>:
 *	@param None
 *	@retval None
 *
 */
void GO_ApplyPresetToSync(eGainSettings_t pPresetEnum)
{
 80053b4:	b590      	push	{r4, r7, lr}
 80053b6:	b083      	sub	sp, #12
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	4603      	mov	r3, r0
 80053bc:	71fb      	strb	r3, [r7, #7]
	SM_GetOutputChannel(SYNC_CHANNEL)->gain_profile = &theGainProfiles[pPresetEnum];
 80053be:	79fc      	ldrb	r4, [r7, #7]
 80053c0:	2001      	movs	r0, #1
 80053c2:	f000 f9a7 	bl	8005714 <SM_GetOutputChannel>
 80053c6:	4601      	mov	r1, r0
 80053c8:	4623      	mov	r3, r4
 80053ca:	005b      	lsls	r3, r3, #1
 80053cc:	4423      	add	r3, r4
 80053ce:	4a4f      	ldr	r2, [pc, #316]	; (800550c <GO_ApplyPresetToSync+0x158>)
 80053d0:	4413      	add	r3, r2
 80053d2:	f8c1 31f0 	str.w	r3, [r1, #496]	; 0x1f0

	switch(pPresetEnum)
 80053d6:	79fb      	ldrb	r3, [r7, #7]
 80053d8:	2b07      	cmp	r3, #7
 80053da:	f200 8093 	bhi.w	8005504 <GO_ApplyPresetToSync+0x150>
 80053de:	a201      	add	r2, pc, #4	; (adr r2, 80053e4 <GO_ApplyPresetToSync+0x30>)
 80053e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e4:	08005405 	.word	0x08005405
 80053e8:	08005425 	.word	0x08005425
 80053ec:	08005445 	.word	0x08005445
 80053f0:	08005465 	.word	0x08005465
 80053f4:	08005485 	.word	0x08005485
 80053f8:	080054a5 	.word	0x080054a5
 80053fc:	080054c5 	.word	0x080054c5
 8005400:	080054e5 	.word	0x080054e5
	{
		case ZERO_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8005404:	2200      	movs	r2, #0
 8005406:	2101      	movs	r1, #1
 8005408:	4841      	ldr	r0, [pc, #260]	; (8005510 <GO_ApplyPresetToSync+0x15c>)
 800540a:	f005 feef 	bl	800b1ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 800540e:	2200      	movs	r2, #0
 8005410:	2120      	movs	r1, #32
 8005412:	4840      	ldr	r0, [pc, #256]	; (8005514 <GO_ApplyPresetToSync+0x160>)
 8005414:	f005 feea 	bl	800b1ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8005418:	2200      	movs	r2, #0
 800541a:	2110      	movs	r1, #16
 800541c:	483d      	ldr	r0, [pc, #244]	; (8005514 <GO_ApplyPresetToSync+0x160>)
 800541e:	f005 fee5 	bl	800b1ec <HAL_GPIO_WritePin>
			break;
 8005422:	e06f      	b.n	8005504 <GO_ApplyPresetToSync+0x150>

		case ONE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8005424:	2201      	movs	r2, #1
 8005426:	2101      	movs	r1, #1
 8005428:	4839      	ldr	r0, [pc, #228]	; (8005510 <GO_ApplyPresetToSync+0x15c>)
 800542a:	f005 fedf 	bl	800b1ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 800542e:	2200      	movs	r2, #0
 8005430:	2120      	movs	r1, #32
 8005432:	4838      	ldr	r0, [pc, #224]	; (8005514 <GO_ApplyPresetToSync+0x160>)
 8005434:	f005 feda 	bl	800b1ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8005438:	2200      	movs	r2, #0
 800543a:	2110      	movs	r1, #16
 800543c:	4835      	ldr	r0, [pc, #212]	; (8005514 <GO_ApplyPresetToSync+0x160>)
 800543e:	f005 fed5 	bl	800b1ec <HAL_GPIO_WritePin>
			break;
 8005442:	e05f      	b.n	8005504 <GO_ApplyPresetToSync+0x150>

		case TWO_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8005444:	2200      	movs	r2, #0
 8005446:	2101      	movs	r1, #1
 8005448:	4831      	ldr	r0, [pc, #196]	; (8005510 <GO_ApplyPresetToSync+0x15c>)
 800544a:	f005 fecf 	bl	800b1ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 800544e:	2201      	movs	r2, #1
 8005450:	2120      	movs	r1, #32
 8005452:	4830      	ldr	r0, [pc, #192]	; (8005514 <GO_ApplyPresetToSync+0x160>)
 8005454:	f005 feca 	bl	800b1ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8005458:	2200      	movs	r2, #0
 800545a:	2110      	movs	r1, #16
 800545c:	482d      	ldr	r0, [pc, #180]	; (8005514 <GO_ApplyPresetToSync+0x160>)
 800545e:	f005 fec5 	bl	800b1ec <HAL_GPIO_WritePin>
			break;
 8005462:	e04f      	b.n	8005504 <GO_ApplyPresetToSync+0x150>

		case THREE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8005464:	2201      	movs	r2, #1
 8005466:	2101      	movs	r1, #1
 8005468:	4829      	ldr	r0, [pc, #164]	; (8005510 <GO_ApplyPresetToSync+0x15c>)
 800546a:	f005 febf 	bl	800b1ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 800546e:	2201      	movs	r2, #1
 8005470:	2120      	movs	r1, #32
 8005472:	4828      	ldr	r0, [pc, #160]	; (8005514 <GO_ApplyPresetToSync+0x160>)
 8005474:	f005 feba 	bl	800b1ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8005478:	2200      	movs	r2, #0
 800547a:	2110      	movs	r1, #16
 800547c:	4825      	ldr	r0, [pc, #148]	; (8005514 <GO_ApplyPresetToSync+0x160>)
 800547e:	f005 feb5 	bl	800b1ec <HAL_GPIO_WritePin>
			break;
 8005482:	e03f      	b.n	8005504 <GO_ApplyPresetToSync+0x150>

		case FOUR_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8005484:	2200      	movs	r2, #0
 8005486:	2101      	movs	r1, #1
 8005488:	4821      	ldr	r0, [pc, #132]	; (8005510 <GO_ApplyPresetToSync+0x15c>)
 800548a:	f005 feaf 	bl	800b1ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 800548e:	2200      	movs	r2, #0
 8005490:	2120      	movs	r1, #32
 8005492:	4820      	ldr	r0, [pc, #128]	; (8005514 <GO_ApplyPresetToSync+0x160>)
 8005494:	f005 feaa 	bl	800b1ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8005498:	2201      	movs	r2, #1
 800549a:	2110      	movs	r1, #16
 800549c:	481d      	ldr	r0, [pc, #116]	; (8005514 <GO_ApplyPresetToSync+0x160>)
 800549e:	f005 fea5 	bl	800b1ec <HAL_GPIO_WritePin>
			break;
 80054a2:	e02f      	b.n	8005504 <GO_ApplyPresetToSync+0x150>

		case FIVE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 80054a4:	2201      	movs	r2, #1
 80054a6:	2101      	movs	r1, #1
 80054a8:	4819      	ldr	r0, [pc, #100]	; (8005510 <GO_ApplyPresetToSync+0x15c>)
 80054aa:	f005 fe9f 	bl	800b1ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 80054ae:	2200      	movs	r2, #0
 80054b0:	2120      	movs	r1, #32
 80054b2:	4818      	ldr	r0, [pc, #96]	; (8005514 <GO_ApplyPresetToSync+0x160>)
 80054b4:	f005 fe9a 	bl	800b1ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 80054b8:	2201      	movs	r2, #1
 80054ba:	2110      	movs	r1, #16
 80054bc:	4815      	ldr	r0, [pc, #84]	; (8005514 <GO_ApplyPresetToSync+0x160>)
 80054be:	f005 fe95 	bl	800b1ec <HAL_GPIO_WritePin>
			break;
 80054c2:	e01f      	b.n	8005504 <GO_ApplyPresetToSync+0x150>

		case SIX_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 80054c4:	2200      	movs	r2, #0
 80054c6:	2101      	movs	r1, #1
 80054c8:	4811      	ldr	r0, [pc, #68]	; (8005510 <GO_ApplyPresetToSync+0x15c>)
 80054ca:	f005 fe8f 	bl	800b1ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 80054ce:	2201      	movs	r2, #1
 80054d0:	2120      	movs	r1, #32
 80054d2:	4810      	ldr	r0, [pc, #64]	; (8005514 <GO_ApplyPresetToSync+0x160>)
 80054d4:	f005 fe8a 	bl	800b1ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 80054d8:	2201      	movs	r2, #1
 80054da:	2110      	movs	r1, #16
 80054dc:	480d      	ldr	r0, [pc, #52]	; (8005514 <GO_ApplyPresetToSync+0x160>)
 80054de:	f005 fe85 	bl	800b1ec <HAL_GPIO_WritePin>
			break;
 80054e2:	e00f      	b.n	8005504 <GO_ApplyPresetToSync+0x150>

		case SEVEN_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 80054e4:	2201      	movs	r2, #1
 80054e6:	2101      	movs	r1, #1
 80054e8:	4809      	ldr	r0, [pc, #36]	; (8005510 <GO_ApplyPresetToSync+0x15c>)
 80054ea:	f005 fe7f 	bl	800b1ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 80054ee:	2201      	movs	r2, #1
 80054f0:	2120      	movs	r1, #32
 80054f2:	4808      	ldr	r0, [pc, #32]	; (8005514 <GO_ApplyPresetToSync+0x160>)
 80054f4:	f005 fe7a 	bl	800b1ec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 80054f8:	2201      	movs	r2, #1
 80054fa:	2110      	movs	r1, #16
 80054fc:	4805      	ldr	r0, [pc, #20]	; (8005514 <GO_ApplyPresetToSync+0x160>)
 80054fe:	f005 fe75 	bl	800b1ec <HAL_GPIO_WritePin>
			break;
 8005502:	bf00      	nop
	}
}
 8005504:	bf00      	nop
 8005506:	370c      	adds	r7, #12
 8005508:	46bd      	mov	sp, r7
 800550a:	bd90      	pop	{r4, r7, pc}
 800550c:	200001d0 	.word	0x200001d0
 8005510:	48000400 	.word	0x48000400
 8005514:	48000800 	.word	0x48000800

08005518 <SM_Init>:
void _InitOutputChannels();
void _InitNegGainCoefficients();
void _InitGainInDecibels();

void SM_Init()
{
 8005518:	b580      	push	{r7, lr}
 800551a:	af00      	add	r7, sp, #0

	_InitOutputChannels();
 800551c:	f000 f89a 	bl	8005654 <_InitOutputChannels>
	_InitNegGainCoefficients();
 8005520:	f000 f850 	bl	80055c4 <_InitNegGainCoefficients>
	_InitGainInDecibels();
 8005524:	f000 f802 	bl	800552c <_InitGainInDecibels>

}
 8005528:	bf00      	nop
 800552a:	bd80      	pop	{r7, pc}

0800552c <_InitGainInDecibels>:

void _InitGainInDecibels()
{
 800552c:	b590      	push	{r4, r7, lr}
 800552e:	b085      	sub	sp, #20
 8005530:	af00      	add	r7, sp, #0

	// =20*LOG10(TARGETVPP/0.001)
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 8005532:	2300      	movs	r3, #0
 8005534:	60fb      	str	r3, [r7, #12]
 8005536:	e037      	b.n	80055a8 <_InitGainInDecibels+0x7c>
	{
		float decibel_mvolt_ref = 0.001;
 8005538:	4b1f      	ldr	r3, [pc, #124]	; (80055b8 <_InitGainInDecibels+0x8c>)
 800553a:	60bb      	str	r3, [r7, #8]
		float this_amp_value = theAmpProfiles[i].amp_value;
 800553c:	491f      	ldr	r1, [pc, #124]	; (80055bc <_InitGainInDecibels+0x90>)
 800553e:	68fa      	ldr	r2, [r7, #12]
 8005540:	4613      	mov	r3, r2
 8005542:	00db      	lsls	r3, r3, #3
 8005544:	1a9b      	subs	r3, r3, r2
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	440b      	add	r3, r1
 800554a:	3304      	adds	r3, #4
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	607b      	str	r3, [r7, #4]
		float new_gain_decibels = 20 * log10( this_amp_value / decibel_mvolt_ref );
 8005550:	ed97 7a01 	vldr	s14, [r7, #4]
 8005554:	edd7 7a02 	vldr	s15, [r7, #8]
 8005558:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800555c:	ee16 0a90 	vmov	r0, s13
 8005560:	f7fb f81a 	bl	8000598 <__aeabi_f2d>
 8005564:	4603      	mov	r3, r0
 8005566:	460c      	mov	r4, r1
 8005568:	ec44 3b10 	vmov	d0, r3, r4
 800556c:	f00b fe38 	bl	80111e0 <log10>
 8005570:	ec51 0b10 	vmov	r0, r1, d0
 8005574:	f04f 0200 	mov.w	r2, #0
 8005578:	4b11      	ldr	r3, [pc, #68]	; (80055c0 <_InitGainInDecibels+0x94>)
 800557a:	f7fb f865 	bl	8000648 <__aeabi_dmul>
 800557e:	4603      	mov	r3, r0
 8005580:	460c      	mov	r4, r1
 8005582:	4618      	mov	r0, r3
 8005584:	4621      	mov	r1, r4
 8005586:	f7fb fb57 	bl	8000c38 <__aeabi_d2f>
 800558a:	4603      	mov	r3, r0
 800558c:	603b      	str	r3, [r7, #0]
		theAmpProfiles[i].gain_decibels = new_gain_decibels;
 800558e:	490b      	ldr	r1, [pc, #44]	; (80055bc <_InitGainInDecibels+0x90>)
 8005590:	68fa      	ldr	r2, [r7, #12]
 8005592:	4613      	mov	r3, r2
 8005594:	00db      	lsls	r3, r3, #3
 8005596:	1a9b      	subs	r3, r3, r2
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	440b      	add	r3, r1
 800559c:	330c      	adds	r3, #12
 800559e:	683a      	ldr	r2, [r7, #0]
 80055a0:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	3301      	adds	r3, #1
 80055a6:	60fb      	str	r3, [r7, #12]
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2b61      	cmp	r3, #97	; 0x61
 80055ac:	ddc4      	ble.n	8005538 <_InitGainInDecibels+0xc>

	}
}
 80055ae:	bf00      	nop
 80055b0:	3714      	adds	r7, #20
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd90      	pop	{r4, r7, pc}
 80055b6:	bf00      	nop
 80055b8:	3a83126f 	.word	0x3a83126f
 80055bc:	200001e8 	.word	0x200001e8
 80055c0:	40340000 	.word	0x40340000

080055c4 <_InitNegGainCoefficients>:

void _InitNegGainCoefficients()
{
 80055c4:	b480      	push	{r7}
 80055c6:	b087      	sub	sp, #28
 80055c8:	af00      	add	r7, sp, #0

	// =(TARGETVPP/LUTVPP)/GAIN
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 80055ca:	2300      	movs	r3, #0
 80055cc:	617b      	str	r3, [r7, #20]
 80055ce:	e033      	b.n	8005638 <_InitNegGainCoefficients+0x74>
	{
		float this_amp_value = theAmpProfiles[i].amp_value;
 80055d0:	491e      	ldr	r1, [pc, #120]	; (800564c <_InitNegGainCoefficients+0x88>)
 80055d2:	697a      	ldr	r2, [r7, #20]
 80055d4:	4613      	mov	r3, r2
 80055d6:	00db      	lsls	r3, r3, #3
 80055d8:	1a9b      	subs	r3, r3, r2
 80055da:	009b      	lsls	r3, r3, #2
 80055dc:	440b      	add	r3, r1
 80055de:	3304      	adds	r3, #4
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	613b      	str	r3, [r7, #16]
		float this_lut_vpp = LUT_VPP;
 80055e4:	4b1a      	ldr	r3, [pc, #104]	; (8005650 <_InitNegGainCoefficients+0x8c>)
 80055e6:	60fb      	str	r3, [r7, #12]
		float this_gain_preset = (float)theAmpProfiles[i].gain_preset;
 80055e8:	4918      	ldr	r1, [pc, #96]	; (800564c <_InitNegGainCoefficients+0x88>)
 80055ea:	697a      	ldr	r2, [r7, #20]
 80055ec:	4613      	mov	r3, r2
 80055ee:	00db      	lsls	r3, r3, #3
 80055f0:	1a9b      	subs	r3, r3, r2
 80055f2:	009b      	lsls	r3, r3, #2
 80055f4:	440b      	add	r3, r1
 80055f6:	3308      	adds	r3, #8
 80055f8:	781b      	ldrb	r3, [r3, #0]
 80055fa:	ee07 3a90 	vmov	s15, r3
 80055fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005602:	edc7 7a02 	vstr	s15, [r7, #8]
		float new_ngc = ( (this_amp_value / this_lut_vpp) / this_gain_preset);
 8005606:	ed97 7a04 	vldr	s14, [r7, #16]
 800560a:	edd7 7a03 	vldr	s15, [r7, #12]
 800560e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005612:	ed97 7a02 	vldr	s14, [r7, #8]
 8005616:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800561a:	edc7 7a01 	vstr	s15, [r7, #4]
		theAmpProfiles[i].neg_gain_coeff = new_ngc;
 800561e:	490b      	ldr	r1, [pc, #44]	; (800564c <_InitNegGainCoefficients+0x88>)
 8005620:	697a      	ldr	r2, [r7, #20]
 8005622:	4613      	mov	r3, r2
 8005624:	00db      	lsls	r3, r3, #3
 8005626:	1a9b      	subs	r3, r3, r2
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	440b      	add	r3, r1
 800562c:	3310      	adds	r3, #16
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	3301      	adds	r3, #1
 8005636:	617b      	str	r3, [r7, #20]
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	2b61      	cmp	r3, #97	; 0x61
 800563c:	ddc8      	ble.n	80055d0 <_InitNegGainCoefficients+0xc>
	}
}
 800563e:	bf00      	nop
 8005640:	371c      	adds	r7, #28
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr
 800564a:	bf00      	nop
 800564c:	200001e8 	.word	0x200001e8
 8005650:	402ccccd 	.word	0x402ccccd

08005654 <_InitOutputChannels>:

void _InitOutputChannels()
{
 8005654:	b480      	push	{r7}
 8005656:	b083      	sub	sp, #12
 8005658:	af00      	add	r7, sp, #0
	// initialise the SIGNAL output channel
	SignalChannel.channel = SIGNAL_CHANNEL;
 800565a:	4b28      	ldr	r3, [pc, #160]	; (80056fc <_InitOutputChannels+0xa8>)
 800565c:	2200      	movs	r2, #0
 800565e:	701a      	strb	r2, [r3, #0]
	SignalChannel.ref_lut_data = theFuncProfiles[SINE_FUNC_MODE].lookup_table_data;
 8005660:	4b27      	ldr	r3, [pc, #156]	; (8005700 <_InitOutputChannels+0xac>)
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	4a25      	ldr	r2, [pc, #148]	; (80056fc <_InitOutputChannels+0xa8>)
 8005666:	6053      	str	r3, [r2, #4]
	SignalChannel.func_profile = &theFuncProfiles[eDefaultFuncPreset];
 8005668:	4b24      	ldr	r3, [pc, #144]	; (80056fc <_InitOutputChannels+0xa8>)
 800566a:	4a25      	ldr	r2, [pc, #148]	; (8005700 <_InitOutputChannels+0xac>)
 800566c:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8

	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005670:	2300      	movs	r3, #0
 8005672:	607b      	str	r3, [r7, #4]
 8005674:	e00b      	b.n	800568e <_InitOutputChannels+0x3a>
		SignalChannel.dsp_lut_data[i] = sine_data_table_3600[i];
 8005676:	4a23      	ldr	r2, [pc, #140]	; (8005704 <_InitOutputChannels+0xb0>)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800567e:	491f      	ldr	r1, [pc, #124]	; (80056fc <_InitOutputChannels+0xa8>)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	3302      	adds	r3, #2
 8005684:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	3301      	adds	r3, #1
 800568c:	607b      	str	r3, [r7, #4]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2b77      	cmp	r3, #119	; 0x77
 8005692:	ddf0      	ble.n	8005676 <_InitOutputChannels+0x22>

	SignalChannel.amp_profile = &theAmpProfiles[eDefaultVppPreset];
 8005694:	4b19      	ldr	r3, [pc, #100]	; (80056fc <_InitOutputChannels+0xa8>)
 8005696:	4a1c      	ldr	r2, [pc, #112]	; (8005708 <_InitOutputChannels+0xb4>)
 8005698:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
	SignalChannel.gain_profile = &theGainProfiles[eDefaultGainPreset];
 800569c:	4b17      	ldr	r3, [pc, #92]	; (80056fc <_InitOutputChannels+0xa8>)
 800569e:	4a1b      	ldr	r2, [pc, #108]	; (800570c <_InitOutputChannels+0xb8>)
 80056a0:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0

	// initialise the SYNC output channel
	SyncChannel.channel = SYNC_CHANNEL;
 80056a4:	4b1a      	ldr	r3, [pc, #104]	; (8005710 <_InitOutputChannels+0xbc>)
 80056a6:	2201      	movs	r2, #1
 80056a8:	701a      	strb	r2, [r3, #0]
	SyncChannel.ref_lut_data = theFuncProfiles[SINE_FUNC_MODE].lookup_table_data;
 80056aa:	4b15      	ldr	r3, [pc, #84]	; (8005700 <_InitOutputChannels+0xac>)
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	4a18      	ldr	r2, [pc, #96]	; (8005710 <_InitOutputChannels+0xbc>)
 80056b0:	6053      	str	r3, [r2, #4]
	SyncChannel.func_profile = &theFuncProfiles[eDefaultFuncPreset];
 80056b2:	4b17      	ldr	r3, [pc, #92]	; (8005710 <_InitOutputChannels+0xbc>)
 80056b4:	4a12      	ldr	r2, [pc, #72]	; (8005700 <_InitOutputChannels+0xac>)
 80056b6:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8

	for(int i = 0; i < SINE_DATA_SIZE; i++)
 80056ba:	2300      	movs	r3, #0
 80056bc:	603b      	str	r3, [r7, #0]
 80056be:	e00b      	b.n	80056d8 <_InitOutputChannels+0x84>
		SyncChannel.dsp_lut_data[i] = sine_data_table_3600[i];
 80056c0:	4a10      	ldr	r2, [pc, #64]	; (8005704 <_InitOutputChannels+0xb0>)
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80056c8:	4911      	ldr	r1, [pc, #68]	; (8005710 <_InitOutputChannels+0xbc>)
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	3302      	adds	r3, #2
 80056ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	3301      	adds	r3, #1
 80056d6:	603b      	str	r3, [r7, #0]
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	2b77      	cmp	r3, #119	; 0x77
 80056dc:	ddf0      	ble.n	80056c0 <_InitOutputChannels+0x6c>

	SyncChannel.amp_profile = &theAmpProfiles[eDefaultVppPreset];
 80056de:	4b0c      	ldr	r3, [pc, #48]	; (8005710 <_InitOutputChannels+0xbc>)
 80056e0:	4a09      	ldr	r2, [pc, #36]	; (8005708 <_InitOutputChannels+0xb4>)
 80056e2:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
	SyncChannel.gain_profile = &theGainProfiles[eDefaultGainPreset];
 80056e6:	4b0a      	ldr	r3, [pc, #40]	; (8005710 <_InitOutputChannels+0xbc>)
 80056e8:	4a08      	ldr	r2, [pc, #32]	; (800570c <_InitOutputChannels+0xb8>)
 80056ea:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
}
 80056ee:	bf00      	nop
 80056f0:	370c      	adds	r7, #12
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr
 80056fa:	bf00      	nop
 80056fc:	200020e8 	.word	0x200020e8
 8005700:	200001a0 	.word	0x200001a0
 8005704:	20001524 	.word	0x20001524
 8005708:	20000ba4 	.word	0x20000ba4
 800570c:	200001d3 	.word	0x200001d3
 8005710:	20001ef4 	.word	0x20001ef4

08005714 <SM_GetOutputChannel>:

sOutputChannel_t * SM_GetOutputChannel(eOutputChannel_t pChannel)
{
 8005714:	b480      	push	{r7}
 8005716:	b083      	sub	sp, #12
 8005718:	af00      	add	r7, sp, #0
 800571a:	4603      	mov	r3, r0
 800571c:	71fb      	strb	r3, [r7, #7]
	if(!pChannel)
 800571e:	79fb      	ldrb	r3, [r7, #7]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d101      	bne.n	8005728 <SM_GetOutputChannel+0x14>
		return &SignalChannel;
 8005724:	4b04      	ldr	r3, [pc, #16]	; (8005738 <SM_GetOutputChannel+0x24>)
 8005726:	e000      	b.n	800572a <SM_GetOutputChannel+0x16>
	else
		return &SyncChannel;
 8005728:	4b04      	ldr	r3, [pc, #16]	; (800573c <SM_GetOutputChannel+0x28>)
}
 800572a:	4618      	mov	r0, r3
 800572c:	370c      	adds	r7, #12
 800572e:	46bd      	mov	sp, r7
 8005730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005734:	4770      	bx	lr
 8005736:	bf00      	nop
 8005738:	200020e8 	.word	0x200020e8
 800573c:	20001ef4 	.word	0x20001ef4

08005740 <SM_GetEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
uint16_t SM_GetEncoderValue(eEncoder_Direction direction)
{
 8005740:	b480      	push	{r7}
 8005742:	b083      	sub	sp, #12
 8005744:	af00      	add	r7, sp, #0
 8005746:	4603      	mov	r3, r0
 8005748:	71fb      	strb	r3, [r7, #7]
	if(direction)
 800574a:	79fb      	ldrb	r3, [r7, #7]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d008      	beq.n	8005762 <SM_GetEncoderValue+0x22>
	{
		return ENCODER_TIMER->ARR - ENCODER_TIMER->CNT;
 8005750:	4b08      	ldr	r3, [pc, #32]	; (8005774 <SM_GetEncoderValue+0x34>)
 8005752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005754:	b29a      	uxth	r2, r3
 8005756:	4b07      	ldr	r3, [pc, #28]	; (8005774 <SM_GetEncoderValue+0x34>)
 8005758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575a:	b29b      	uxth	r3, r3
 800575c:	1ad3      	subs	r3, r2, r3
 800575e:	b29b      	uxth	r3, r3
 8005760:	e002      	b.n	8005768 <SM_GetEncoderValue+0x28>
	}
	else
	{
		return ENCODER_TIMER->CNT;
 8005762:	4b04      	ldr	r3, [pc, #16]	; (8005774 <SM_GetEncoderValue+0x34>)
 8005764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005766:	b29b      	uxth	r3, r3
	}
}
 8005768:	4618      	mov	r0, r3
 800576a:	370c      	adds	r7, #12
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr
 8005774:	40012c00 	.word	0x40012c00

08005778 <SM_GetOutputInHertz>:
 *	@param None
 *	@retval None
 *
 */
float SM_GetOutputInHertz()
{
 8005778:	b480      	push	{r7}
 800577a:	b085      	sub	sp, #20
 800577c:	af00      	add	r7, sp, #0
	volatile float output_tm_psc;
	volatile float output_tm_arr;

	// safe-guard against divide by zero
	(OUTPUT_TIMER->PSC == 0) ? (output_tm_psc = 1) : (output_tm_psc = OUTPUT_TIMER->PSC);
 800577e:	4b1d      	ldr	r3, [pc, #116]	; (80057f4 <SM_GetOutputInHertz+0x7c>)
 8005780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005782:	2b00      	cmp	r3, #0
 8005784:	d103      	bne.n	800578e <SM_GetOutputInHertz+0x16>
 8005786:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800578a:	60bb      	str	r3, [r7, #8]
 800578c:	e007      	b.n	800579e <SM_GetOutputInHertz+0x26>
 800578e:	4b19      	ldr	r3, [pc, #100]	; (80057f4 <SM_GetOutputInHertz+0x7c>)
 8005790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005792:	ee07 3a90 	vmov	s15, r3
 8005796:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800579a:	edc7 7a02 	vstr	s15, [r7, #8]
	(OUTPUT_TIMER->ARR == 0) ? (output_tm_arr = 1) : (output_tm_arr = OUTPUT_TIMER->ARR);
 800579e:	4b15      	ldr	r3, [pc, #84]	; (80057f4 <SM_GetOutputInHertz+0x7c>)
 80057a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d103      	bne.n	80057ae <SM_GetOutputInHertz+0x36>
 80057a6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80057aa:	607b      	str	r3, [r7, #4]
 80057ac:	e007      	b.n	80057be <SM_GetOutputInHertz+0x46>
 80057ae:	4b11      	ldr	r3, [pc, #68]	; (80057f4 <SM_GetOutputInHertz+0x7c>)
 80057b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b2:	ee07 3a90 	vmov	s15, r3
 80057b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057ba:	edc7 7a01 	vstr	s15, [r7, #4]

	float output_tm_freq = SM_MCLK / (output_tm_psc * output_tm_arr);
 80057be:	ed97 7a02 	vldr	s14, [r7, #8]
 80057c2:	edd7 7a01 	vldr	s15, [r7, #4]
 80057c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80057ca:	eddf 6a0b 	vldr	s13, [pc, #44]	; 80057f8 <SM_GetOutputInHertz+0x80>
 80057ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057d2:	edc7 7a03 	vstr	s15, [r7, #12]


	return output_tm_freq / SM_FSAMP;
 80057d6:	edd7 7a03 	vldr	s15, [r7, #12]
 80057da:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80057fc <SM_GetOutputInHertz+0x84>
 80057de:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80057e2:	eef0 7a66 	vmov.f32	s15, s13
}
 80057e6:	eeb0 0a67 	vmov.f32	s0, s15
 80057ea:	3714      	adds	r7, #20
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr
 80057f4:	40013400 	.word	0x40013400
 80057f8:	4d2037a0 	.word	0x4d2037a0
 80057fc:	42f00000 	.word	0x42f00000

08005800 <SM_ConvertPeriodToHertz>:


float SM_ConvertPeriodToHertz(uint32_t period, uint16_t psc)
{
 8005800:	b480      	push	{r7}
 8005802:	b083      	sub	sp, #12
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	460b      	mov	r3, r1
 800580a:	807b      	strh	r3, [r7, #2]
	(psc == 0) ? (psc = 1) : psc;
 800580c:	887b      	ldrh	r3, [r7, #2]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d101      	bne.n	8005816 <SM_ConvertPeriodToHertz+0x16>
 8005812:	2301      	movs	r3, #1
 8005814:	807b      	strh	r3, [r7, #2]

	return (float)SM_MCLK / ( (float)psc * (float)period );
 8005816:	887b      	ldrh	r3, [r7, #2]
 8005818:	ee07 3a90 	vmov	s15, r3
 800581c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	ee07 3a90 	vmov	s15, r3
 8005826:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800582a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800582e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8005848 <SM_ConvertPeriodToHertz+0x48>
 8005832:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005836:	eef0 7a66 	vmov.f32	s15, s13
}
 800583a:	eeb0 0a67 	vmov.f32	s0, s15
 800583e:	370c      	adds	r7, #12
 8005840:	46bd      	mov	sp, r7
 8005842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005846:	4770      	bx	lr
 8005848:	4d2037a0 	.word	0x4d2037a0

0800584c <VPP_ApplyPresetToSignal>:
 *	@param None
 *	@retval None
 *
 */
void VPP_ApplyPresetToSignal(eAmpSettings_t pPresetEnum)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b084      	sub	sp, #16
 8005850:	af00      	add	r7, sp, #0
 8005852:	4603      	mov	r3, r0
 8005854:	71fb      	strb	r3, [r7, #7]
	// retrieve the next preset
	AmplitudeProfile_t* pNextEncPreset = &theAmpProfiles[pPresetEnum];
 8005856:	79fa      	ldrb	r2, [r7, #7]
 8005858:	4613      	mov	r3, r2
 800585a:	00db      	lsls	r3, r3, #3
 800585c:	1a9b      	subs	r3, r3, r2
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	4a10      	ldr	r2, [pc, #64]	; (80058a4 <VPP_ApplyPresetToSignal+0x58>)
 8005862:	4413      	add	r3, r2
 8005864:	60fb      	str	r3, [r7, #12]

	// Set the new  amp profile to the SignalChannel object
	SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile = pNextEncPreset;
 8005866:	2000      	movs	r0, #0
 8005868:	f7ff ff54 	bl	8005714 <SM_GetOutputChannel>
 800586c:	4602      	mov	r2, r0
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	f8c2 31ec 	str.w	r3, [r2, #492]	; 0x1ec

    // set the gain preset
	GO_ApplyPresetToSignal(pNextEncPreset->gain_preset);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	7a1b      	ldrb	r3, [r3, #8]
 8005878:	4618      	mov	r0, r3
 800587a:	f7ff fce9 	bl	8005250 <GO_ApplyPresetToSignal>

    // Apply the next amplitude setting to the SignalChannel object
    _ProcessSignalDataTable(pNextEncPreset->neg_gain_coeff, pNextEncPreset->amp_offset , pNextEncPreset->epos);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	edd3 7a04 	vldr	s15, [r3, #16]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	ed93 7a05 	vldr	s14, [r3, #20]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	8b1b      	ldrh	r3, [r3, #24]
 800588e:	4618      	mov	r0, r3
 8005890:	eef0 0a47 	vmov.f32	s1, s14
 8005894:	eeb0 0a67 	vmov.f32	s0, s15
 8005898:	f000 f834 	bl	8005904 <_ProcessSignalDataTable>


}
 800589c:	bf00      	nop
 800589e:	3710      	adds	r7, #16
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}
 80058a4:	200001e8 	.word	0x200001e8

080058a8 <VPP_ApplyPresetToSync>:
 *	@param None
 *	@retval None
 *
 */
void VPP_ApplyPresetToSync(eAmpSettings_t pPresetEnum)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b084      	sub	sp, #16
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	4603      	mov	r3, r0
 80058b0:	71fb      	strb	r3, [r7, #7]
	// retrieve the next preset
	AmplitudeProfile_t* pNextEncPreset = &theAmpProfiles[pPresetEnum];
 80058b2:	79fa      	ldrb	r2, [r7, #7]
 80058b4:	4613      	mov	r3, r2
 80058b6:	00db      	lsls	r3, r3, #3
 80058b8:	1a9b      	subs	r3, r3, r2
 80058ba:	009b      	lsls	r3, r3, #2
 80058bc:	4a10      	ldr	r2, [pc, #64]	; (8005900 <VPP_ApplyPresetToSync+0x58>)
 80058be:	4413      	add	r3, r2
 80058c0:	60fb      	str	r3, [r7, #12]

	// Set the new VPP Preset to the SyncChannel object
	SM_GetOutputChannel(SYNC_CHANNEL)->amp_profile = pNextEncPreset;
 80058c2:	2001      	movs	r0, #1
 80058c4:	f7ff ff26 	bl	8005714 <SM_GetOutputChannel>
 80058c8:	4602      	mov	r2, r0
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	f8c2 31ec 	str.w	r3, [r2, #492]	; 0x1ec

	 // set the gain preset
	GO_ApplyPresetToSync(pNextEncPreset->gain_preset);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	7a1b      	ldrb	r3, [r3, #8]
 80058d4:	4618      	mov	r0, r3
 80058d6:	f7ff fd6d 	bl	80053b4 <GO_ApplyPresetToSync>

	// Apply the next amplitude setting to the SyncChannel object
	_ProcessSyncDataTable(pNextEncPreset->neg_gain_coeff, pNextEncPreset->amp_offset , pNextEncPreset->epos);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	edd3 7a04 	vldr	s15, [r3, #16]
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	ed93 7a05 	vldr	s14, [r3, #20]
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	8b1b      	ldrh	r3, [r3, #24]
 80058ea:	4618      	mov	r0, r3
 80058ec:	eef0 0a47 	vmov.f32	s1, s14
 80058f0:	eeb0 0a67 	vmov.f32	s0, s15
 80058f4:	f000 f884 	bl	8005a00 <_ProcessSyncDataTable>



}
 80058f8:	bf00      	nop
 80058fa:	3710      	adds	r7, #16
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}
 8005900:	200001e8 	.word	0x200001e8

08005904 <_ProcessSignalDataTable>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessSignalDataTable(float _neg_gain_coeff, float amp_offset, uint16_t _encoder_value)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b088      	sub	sp, #32
 8005908:	af00      	add	r7, sp, #0
 800590a:	ed87 0a03 	vstr	s0, [r7, #12]
 800590e:	edc7 0a02 	vstr	s1, [r7, #8]
 8005912:	4603      	mov	r3, r0
 8005914:	80fb      	strh	r3, [r7, #6]
	// copy refer lookup datat table from SignalChannel object
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005916:	2300      	movs	r3, #0
 8005918:	61fb      	str	r3, [r7, #28]
 800591a:	e00f      	b.n	800593c <_ProcessSignalDataTable+0x38>
	{
		tmpDataTable[i] = SM_GetOutputChannel(SIGNAL_CHANNEL)->ref_lut_data[i];
 800591c:	2000      	movs	r0, #0
 800591e:	f7ff fef9 	bl	8005714 <SM_GetOutputChannel>
 8005922:	4603      	mov	r3, r0
 8005924:	685a      	ldr	r2, [r3, #4]
 8005926:	69fb      	ldr	r3, [r7, #28]
 8005928:	009b      	lsls	r3, r3, #2
 800592a:	4413      	add	r3, r2
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	4933      	ldr	r1, [pc, #204]	; (80059fc <_ProcessSignalDataTable+0xf8>)
 8005930:	69fb      	ldr	r3, [r7, #28]
 8005932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005936:	69fb      	ldr	r3, [r7, #28]
 8005938:	3301      	adds	r3, #1
 800593a:	61fb      	str	r3, [r7, #28]
 800593c:	69fb      	ldr	r3, [r7, #28]
 800593e:	2b77      	cmp	r3, #119	; 0x77
 8005940:	ddec      	ble.n	800591c <_ProcessSignalDataTable+0x18>
	}

	// calculate positive offset coefficient from encoder position
	float pos_offset_coeff = 1;
 8005942:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8005946:	61bb      	str	r3, [r7, #24]
	if(_encoder_value)
 8005948:	88fb      	ldrh	r3, [r7, #6]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d008      	beq.n	8005960 <_ProcessSignalDataTable+0x5c>
	{
		pos_offset_coeff = (_encoder_value/4);
 800594e:	88fb      	ldrh	r3, [r7, #6]
 8005950:	089b      	lsrs	r3, r3, #2
 8005952:	b29b      	uxth	r3, r3
 8005954:	ee07 3a90 	vmov	s15, r3
 8005958:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800595c:	edc7 7a06 	vstr	s15, [r7, #24]
	}

	// adjust amplitude and offset of lookup table copy
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005960:	2300      	movs	r3, #0
 8005962:	617b      	str	r3, [r7, #20]
 8005964:	e02e      	b.n	80059c4 <_ProcessSignalDataTable+0xc0>
	{
		tmpDataTable[i] = tmpDataTable[i] * (_neg_gain_coeff);
 8005966:	4a25      	ldr	r2, [pc, #148]	; (80059fc <_ProcessSignalDataTable+0xf8>)
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800596e:	ee07 3a90 	vmov	s15, r3
 8005972:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005976:	edd7 7a03 	vldr	s15, [r7, #12]
 800597a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800597e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005982:	ee17 1a90 	vmov	r1, s15
 8005986:	4a1d      	ldr	r2, [pc, #116]	; (80059fc <_ProcessSignalDataTable+0xf8>)
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		tmpDataTable[i] = tmpDataTable[i] + (AMP_OFFSET * pos_offset_coeff);
 800598e:	4a1b      	ldr	r2, [pc, #108]	; (80059fc <_ProcessSignalDataTable+0xf8>)
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005996:	ee07 3a90 	vmov	s15, r3
 800599a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800599e:	edd7 7a06 	vldr	s15, [r7, #24]
 80059a2:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 80059a6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80059aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80059ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80059b2:	ee17 1a90 	vmov	r1, s15
 80059b6:	4a11      	ldr	r2, [pc, #68]	; (80059fc <_ProcessSignalDataTable+0xf8>)
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	3301      	adds	r3, #1
 80059c2:	617b      	str	r3, [r7, #20]
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	2b77      	cmp	r3, #119	; 0x77
 80059c8:	ddcd      	ble.n	8005966 <_ProcessSignalDataTable+0x62>
	}

	// restore lookup table copy to active lookup table in SignalChannel object
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 80059ca:	2300      	movs	r3, #0
 80059cc:	613b      	str	r3, [r7, #16]
 80059ce:	e00e      	b.n	80059ee <_ProcessSignalDataTable+0xea>
	{
		SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data[i] = tmpDataTable[i];
 80059d0:	2000      	movs	r0, #0
 80059d2:	f7ff fe9f 	bl	8005714 <SM_GetOutputChannel>
 80059d6:	4601      	mov	r1, r0
 80059d8:	4a08      	ldr	r2, [pc, #32]	; (80059fc <_ProcessSignalDataTable+0xf8>)
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	3302      	adds	r3, #2
 80059e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	3301      	adds	r3, #1
 80059ec:	613b      	str	r3, [r7, #16]
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	2b77      	cmp	r3, #119	; 0x77
 80059f2:	dded      	ble.n	80059d0 <_ProcessSignalDataTable+0xcc>
	}
}
 80059f4:	bf00      	nop
 80059f6:	3720      	adds	r7, #32
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}
 80059fc:	200022dc 	.word	0x200022dc

08005a00 <_ProcessSyncDataTable>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessSyncDataTable(float _neg_gain_coeff, float amp_offset, uint16_t _encoder_value)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b088      	sub	sp, #32
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	ed87 0a03 	vstr	s0, [r7, #12]
 8005a0a:	edc7 0a02 	vstr	s1, [r7, #8]
 8005a0e:	4603      	mov	r3, r0
 8005a10:	80fb      	strh	r3, [r7, #6]
	// copy refer lookup datat table from SyncChannel object
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005a12:	2300      	movs	r3, #0
 8005a14:	61fb      	str	r3, [r7, #28]
 8005a16:	e00f      	b.n	8005a38 <_ProcessSyncDataTable+0x38>
	{
		tmpDataTable[i] = SM_GetOutputChannel(SYNC_CHANNEL)->ref_lut_data[i];
 8005a18:	2001      	movs	r0, #1
 8005a1a:	f7ff fe7b 	bl	8005714 <SM_GetOutputChannel>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	685a      	ldr	r2, [r3, #4]
 8005a22:	69fb      	ldr	r3, [r7, #28]
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	4413      	add	r3, r2
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	4933      	ldr	r1, [pc, #204]	; (8005af8 <_ProcessSyncDataTable+0xf8>)
 8005a2c:	69fb      	ldr	r3, [r7, #28]
 8005a2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005a32:	69fb      	ldr	r3, [r7, #28]
 8005a34:	3301      	adds	r3, #1
 8005a36:	61fb      	str	r3, [r7, #28]
 8005a38:	69fb      	ldr	r3, [r7, #28]
 8005a3a:	2b77      	cmp	r3, #119	; 0x77
 8005a3c:	ddec      	ble.n	8005a18 <_ProcessSyncDataTable+0x18>
	}

	// calculate positive offset coefficient from encoder position
	float pos_offset_coeff = 1;
 8005a3e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8005a42:	61bb      	str	r3, [r7, #24]
	if(_encoder_value)
 8005a44:	88fb      	ldrh	r3, [r7, #6]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d008      	beq.n	8005a5c <_ProcessSyncDataTable+0x5c>
	{
		pos_offset_coeff = (_encoder_value/4);
 8005a4a:	88fb      	ldrh	r3, [r7, #6]
 8005a4c:	089b      	lsrs	r3, r3, #2
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	ee07 3a90 	vmov	s15, r3
 8005a54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a58:	edc7 7a06 	vstr	s15, [r7, #24]
	}

	// adjust amplitude and offset of lookup table copy
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	617b      	str	r3, [r7, #20]
 8005a60:	e02e      	b.n	8005ac0 <_ProcessSyncDataTable+0xc0>
	{

		tmpDataTable[i] = tmpDataTable[i] * (_neg_gain_coeff);
 8005a62:	4a25      	ldr	r2, [pc, #148]	; (8005af8 <_ProcessSyncDataTable+0xf8>)
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a6a:	ee07 3a90 	vmov	s15, r3
 8005a6e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005a72:	edd7 7a03 	vldr	s15, [r7, #12]
 8005a76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a7e:	ee17 1a90 	vmov	r1, s15
 8005a82:	4a1d      	ldr	r2, [pc, #116]	; (8005af8 <_ProcessSyncDataTable+0xf8>)
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		tmpDataTable[i] = tmpDataTable[i] + (AMP_OFFSET * pos_offset_coeff);
 8005a8a:	4a1b      	ldr	r2, [pc, #108]	; (8005af8 <_ProcessSyncDataTable+0xf8>)
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a92:	ee07 3a90 	vmov	s15, r3
 8005a96:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005a9a:	edd7 7a06 	vldr	s15, [r7, #24]
 8005a9e:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8005aa2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005aa6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005aaa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005aae:	ee17 1a90 	vmov	r1, s15
 8005ab2:	4a11      	ldr	r2, [pc, #68]	; (8005af8 <_ProcessSyncDataTable+0xf8>)
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	3301      	adds	r3, #1
 8005abe:	617b      	str	r3, [r7, #20]
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	2b77      	cmp	r3, #119	; 0x77
 8005ac4:	ddcd      	ble.n	8005a62 <_ProcessSyncDataTable+0x62>
	}

	// restore lookup table copy to active lookup table in SignalChannel object
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	613b      	str	r3, [r7, #16]
 8005aca:	e00e      	b.n	8005aea <_ProcessSyncDataTable+0xea>
	{
		SM_GetOutputChannel(SYNC_CHANNEL)->dsp_lut_data[i] = tmpDataTable[i];
 8005acc:	2001      	movs	r0, #1
 8005ace:	f7ff fe21 	bl	8005714 <SM_GetOutputChannel>
 8005ad2:	4601      	mov	r1, r0
 8005ad4:	4a08      	ldr	r2, [pc, #32]	; (8005af8 <_ProcessSyncDataTable+0xf8>)
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	3302      	adds	r3, #2
 8005ae0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	3301      	adds	r3, #1
 8005ae8:	613b      	str	r3, [r7, #16]
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	2b77      	cmp	r3, #119	; 0x77
 8005aee:	dded      	ble.n	8005acc <_ProcessSyncDataTable+0xcc>
	}
}
 8005af0:	bf00      	nop
 8005af2:	3720      	adds	r7, #32
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}
 8005af8:	200022dc 	.word	0x200022dc

08005afc <VPP_ModifySignalOutput>:

 *	@retval None
 *
 */
void VPP_ModifySignalOutput(uint16_t pEncoderValue)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b082      	sub	sp, #8
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	4603      	mov	r3, r0
 8005b04:	80fb      	strh	r3, [r7, #6]
	switch(pEncoderValue)
 8005b06:	88fb      	ldrh	r3, [r7, #6]
 8005b08:	f5b3 7fc3 	cmp.w	r3, #390	; 0x186
 8005b0c:	f200 849a 	bhi.w	8006444 <VPP_ModifySignalOutput+0x948>
 8005b10:	a201      	add	r2, pc, #4	; (adr r2, 8005b18 <VPP_ModifySignalOutput+0x1c>)
 8005b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b16:	bf00      	nop
 8005b18:	08006135 	.word	0x08006135
 8005b1c:	08006135 	.word	0x08006135
 8005b20:	08006135 	.word	0x08006135
 8005b24:	0800613d 	.word	0x0800613d
 8005b28:	0800613d 	.word	0x0800613d
 8005b2c:	0800613d 	.word	0x0800613d
 8005b30:	0800613d 	.word	0x0800613d
 8005b34:	08006145 	.word	0x08006145
 8005b38:	08006145 	.word	0x08006145
 8005b3c:	08006145 	.word	0x08006145
 8005b40:	08006145 	.word	0x08006145
 8005b44:	0800614d 	.word	0x0800614d
 8005b48:	0800614d 	.word	0x0800614d
 8005b4c:	0800614d 	.word	0x0800614d
 8005b50:	0800614d 	.word	0x0800614d
 8005b54:	08006155 	.word	0x08006155
 8005b58:	08006155 	.word	0x08006155
 8005b5c:	08006155 	.word	0x08006155
 8005b60:	08006155 	.word	0x08006155
 8005b64:	0800615d 	.word	0x0800615d
 8005b68:	0800615d 	.word	0x0800615d
 8005b6c:	0800615d 	.word	0x0800615d
 8005b70:	0800615d 	.word	0x0800615d
 8005b74:	08006165 	.word	0x08006165
 8005b78:	08006165 	.word	0x08006165
 8005b7c:	08006165 	.word	0x08006165
 8005b80:	08006165 	.word	0x08006165
 8005b84:	0800616d 	.word	0x0800616d
 8005b88:	0800616d 	.word	0x0800616d
 8005b8c:	0800616d 	.word	0x0800616d
 8005b90:	0800616d 	.word	0x0800616d
 8005b94:	08006175 	.word	0x08006175
 8005b98:	08006175 	.word	0x08006175
 8005b9c:	08006175 	.word	0x08006175
 8005ba0:	08006175 	.word	0x08006175
 8005ba4:	0800617d 	.word	0x0800617d
 8005ba8:	0800617d 	.word	0x0800617d
 8005bac:	0800617d 	.word	0x0800617d
 8005bb0:	0800617d 	.word	0x0800617d
 8005bb4:	08006185 	.word	0x08006185
 8005bb8:	08006185 	.word	0x08006185
 8005bbc:	08006185 	.word	0x08006185
 8005bc0:	08006185 	.word	0x08006185
 8005bc4:	0800618d 	.word	0x0800618d
 8005bc8:	0800618d 	.word	0x0800618d
 8005bcc:	0800618d 	.word	0x0800618d
 8005bd0:	0800618d 	.word	0x0800618d
 8005bd4:	08006195 	.word	0x08006195
 8005bd8:	08006195 	.word	0x08006195
 8005bdc:	08006195 	.word	0x08006195
 8005be0:	08006195 	.word	0x08006195
 8005be4:	0800619d 	.word	0x0800619d
 8005be8:	0800619d 	.word	0x0800619d
 8005bec:	0800619d 	.word	0x0800619d
 8005bf0:	0800619d 	.word	0x0800619d
 8005bf4:	080061a5 	.word	0x080061a5
 8005bf8:	080061a5 	.word	0x080061a5
 8005bfc:	080061a5 	.word	0x080061a5
 8005c00:	080061a5 	.word	0x080061a5
 8005c04:	080061ad 	.word	0x080061ad
 8005c08:	080061ad 	.word	0x080061ad
 8005c0c:	080061ad 	.word	0x080061ad
 8005c10:	080061ad 	.word	0x080061ad
 8005c14:	080061b5 	.word	0x080061b5
 8005c18:	080061b5 	.word	0x080061b5
 8005c1c:	080061b5 	.word	0x080061b5
 8005c20:	080061b5 	.word	0x080061b5
 8005c24:	080061bd 	.word	0x080061bd
 8005c28:	080061bd 	.word	0x080061bd
 8005c2c:	080061bd 	.word	0x080061bd
 8005c30:	080061bd 	.word	0x080061bd
 8005c34:	080061c5 	.word	0x080061c5
 8005c38:	080061c5 	.word	0x080061c5
 8005c3c:	080061c5 	.word	0x080061c5
 8005c40:	080061c5 	.word	0x080061c5
 8005c44:	080061cd 	.word	0x080061cd
 8005c48:	080061cd 	.word	0x080061cd
 8005c4c:	080061cd 	.word	0x080061cd
 8005c50:	080061cd 	.word	0x080061cd
 8005c54:	080061d5 	.word	0x080061d5
 8005c58:	080061d5 	.word	0x080061d5
 8005c5c:	080061d5 	.word	0x080061d5
 8005c60:	080061d5 	.word	0x080061d5
 8005c64:	080061dd 	.word	0x080061dd
 8005c68:	080061dd 	.word	0x080061dd
 8005c6c:	080061dd 	.word	0x080061dd
 8005c70:	080061dd 	.word	0x080061dd
 8005c74:	080061e5 	.word	0x080061e5
 8005c78:	080061e5 	.word	0x080061e5
 8005c7c:	080061e5 	.word	0x080061e5
 8005c80:	080061e5 	.word	0x080061e5
 8005c84:	080061ed 	.word	0x080061ed
 8005c88:	080061ed 	.word	0x080061ed
 8005c8c:	080061ed 	.word	0x080061ed
 8005c90:	080061ed 	.word	0x080061ed
 8005c94:	080061f5 	.word	0x080061f5
 8005c98:	080061f5 	.word	0x080061f5
 8005c9c:	080061f5 	.word	0x080061f5
 8005ca0:	080061f5 	.word	0x080061f5
 8005ca4:	080061fd 	.word	0x080061fd
 8005ca8:	080061fd 	.word	0x080061fd
 8005cac:	080061fd 	.word	0x080061fd
 8005cb0:	080061fd 	.word	0x080061fd
 8005cb4:	08006205 	.word	0x08006205
 8005cb8:	08006205 	.word	0x08006205
 8005cbc:	08006205 	.word	0x08006205
 8005cc0:	08006205 	.word	0x08006205
 8005cc4:	0800620d 	.word	0x0800620d
 8005cc8:	0800620d 	.word	0x0800620d
 8005ccc:	0800620d 	.word	0x0800620d
 8005cd0:	0800620d 	.word	0x0800620d
 8005cd4:	08006215 	.word	0x08006215
 8005cd8:	08006215 	.word	0x08006215
 8005cdc:	08006215 	.word	0x08006215
 8005ce0:	08006215 	.word	0x08006215
 8005ce4:	0800621d 	.word	0x0800621d
 8005ce8:	0800621d 	.word	0x0800621d
 8005cec:	0800621d 	.word	0x0800621d
 8005cf0:	0800621d 	.word	0x0800621d
 8005cf4:	08006225 	.word	0x08006225
 8005cf8:	08006225 	.word	0x08006225
 8005cfc:	08006225 	.word	0x08006225
 8005d00:	08006225 	.word	0x08006225
 8005d04:	0800622d 	.word	0x0800622d
 8005d08:	0800622d 	.word	0x0800622d
 8005d0c:	0800622d 	.word	0x0800622d
 8005d10:	0800622d 	.word	0x0800622d
 8005d14:	08006235 	.word	0x08006235
 8005d18:	08006235 	.word	0x08006235
 8005d1c:	08006235 	.word	0x08006235
 8005d20:	08006235 	.word	0x08006235
 8005d24:	0800623d 	.word	0x0800623d
 8005d28:	0800623d 	.word	0x0800623d
 8005d2c:	0800623d 	.word	0x0800623d
 8005d30:	0800623d 	.word	0x0800623d
 8005d34:	08006245 	.word	0x08006245
 8005d38:	08006245 	.word	0x08006245
 8005d3c:	08006245 	.word	0x08006245
 8005d40:	08006245 	.word	0x08006245
 8005d44:	0800624d 	.word	0x0800624d
 8005d48:	0800624d 	.word	0x0800624d
 8005d4c:	0800624d 	.word	0x0800624d
 8005d50:	0800624d 	.word	0x0800624d
 8005d54:	08006255 	.word	0x08006255
 8005d58:	08006255 	.word	0x08006255
 8005d5c:	08006255 	.word	0x08006255
 8005d60:	08006255 	.word	0x08006255
 8005d64:	0800625d 	.word	0x0800625d
 8005d68:	0800625d 	.word	0x0800625d
 8005d6c:	0800625d 	.word	0x0800625d
 8005d70:	0800625d 	.word	0x0800625d
 8005d74:	08006265 	.word	0x08006265
 8005d78:	08006265 	.word	0x08006265
 8005d7c:	08006265 	.word	0x08006265
 8005d80:	08006265 	.word	0x08006265
 8005d84:	0800626d 	.word	0x0800626d
 8005d88:	0800626d 	.word	0x0800626d
 8005d8c:	0800626d 	.word	0x0800626d
 8005d90:	0800626d 	.word	0x0800626d
 8005d94:	08006275 	.word	0x08006275
 8005d98:	08006275 	.word	0x08006275
 8005d9c:	08006275 	.word	0x08006275
 8005da0:	08006275 	.word	0x08006275
 8005da4:	0800627d 	.word	0x0800627d
 8005da8:	0800627d 	.word	0x0800627d
 8005dac:	0800627d 	.word	0x0800627d
 8005db0:	0800627d 	.word	0x0800627d
 8005db4:	08006285 	.word	0x08006285
 8005db8:	08006285 	.word	0x08006285
 8005dbc:	08006285 	.word	0x08006285
 8005dc0:	08006285 	.word	0x08006285
 8005dc4:	0800628d 	.word	0x0800628d
 8005dc8:	0800628d 	.word	0x0800628d
 8005dcc:	0800628d 	.word	0x0800628d
 8005dd0:	0800628d 	.word	0x0800628d
 8005dd4:	08006295 	.word	0x08006295
 8005dd8:	08006295 	.word	0x08006295
 8005ddc:	08006295 	.word	0x08006295
 8005de0:	08006295 	.word	0x08006295
 8005de4:	0800629d 	.word	0x0800629d
 8005de8:	0800629d 	.word	0x0800629d
 8005dec:	0800629d 	.word	0x0800629d
 8005df0:	0800629d 	.word	0x0800629d
 8005df4:	080062a5 	.word	0x080062a5
 8005df8:	080062a5 	.word	0x080062a5
 8005dfc:	080062a5 	.word	0x080062a5
 8005e00:	080062a5 	.word	0x080062a5
 8005e04:	080062ad 	.word	0x080062ad
 8005e08:	080062ad 	.word	0x080062ad
 8005e0c:	080062ad 	.word	0x080062ad
 8005e10:	080062ad 	.word	0x080062ad
 8005e14:	080062b5 	.word	0x080062b5
 8005e18:	080062b5 	.word	0x080062b5
 8005e1c:	080062b5 	.word	0x080062b5
 8005e20:	080062b5 	.word	0x080062b5
 8005e24:	080062bd 	.word	0x080062bd
 8005e28:	080062bd 	.word	0x080062bd
 8005e2c:	080062bd 	.word	0x080062bd
 8005e30:	080062bd 	.word	0x080062bd
 8005e34:	080062c5 	.word	0x080062c5
 8005e38:	080062c5 	.word	0x080062c5
 8005e3c:	080062c5 	.word	0x080062c5
 8005e40:	080062c5 	.word	0x080062c5
 8005e44:	080062cd 	.word	0x080062cd
 8005e48:	080062cd 	.word	0x080062cd
 8005e4c:	080062cd 	.word	0x080062cd
 8005e50:	080062cd 	.word	0x080062cd
 8005e54:	080062d5 	.word	0x080062d5
 8005e58:	080062d5 	.word	0x080062d5
 8005e5c:	080062d5 	.word	0x080062d5
 8005e60:	080062d5 	.word	0x080062d5
 8005e64:	080062dd 	.word	0x080062dd
 8005e68:	080062dd 	.word	0x080062dd
 8005e6c:	080062dd 	.word	0x080062dd
 8005e70:	080062dd 	.word	0x080062dd
 8005e74:	080062e5 	.word	0x080062e5
 8005e78:	080062e5 	.word	0x080062e5
 8005e7c:	080062e5 	.word	0x080062e5
 8005e80:	080062e5 	.word	0x080062e5
 8005e84:	080062ed 	.word	0x080062ed
 8005e88:	080062ed 	.word	0x080062ed
 8005e8c:	080062ed 	.word	0x080062ed
 8005e90:	080062ed 	.word	0x080062ed
 8005e94:	080062f5 	.word	0x080062f5
 8005e98:	080062f5 	.word	0x080062f5
 8005e9c:	080062f5 	.word	0x080062f5
 8005ea0:	080062f5 	.word	0x080062f5
 8005ea4:	080062fd 	.word	0x080062fd
 8005ea8:	080062fd 	.word	0x080062fd
 8005eac:	080062fd 	.word	0x080062fd
 8005eb0:	080062fd 	.word	0x080062fd
 8005eb4:	08006305 	.word	0x08006305
 8005eb8:	08006305 	.word	0x08006305
 8005ebc:	08006305 	.word	0x08006305
 8005ec0:	08006305 	.word	0x08006305
 8005ec4:	0800630d 	.word	0x0800630d
 8005ec8:	0800630d 	.word	0x0800630d
 8005ecc:	0800630d 	.word	0x0800630d
 8005ed0:	0800630d 	.word	0x0800630d
 8005ed4:	08006315 	.word	0x08006315
 8005ed8:	08006315 	.word	0x08006315
 8005edc:	08006315 	.word	0x08006315
 8005ee0:	08006315 	.word	0x08006315
 8005ee4:	0800631d 	.word	0x0800631d
 8005ee8:	0800631d 	.word	0x0800631d
 8005eec:	0800631d 	.word	0x0800631d
 8005ef0:	0800631d 	.word	0x0800631d
 8005ef4:	08006325 	.word	0x08006325
 8005ef8:	08006325 	.word	0x08006325
 8005efc:	08006325 	.word	0x08006325
 8005f00:	08006325 	.word	0x08006325
 8005f04:	0800632d 	.word	0x0800632d
 8005f08:	0800632d 	.word	0x0800632d
 8005f0c:	0800632d 	.word	0x0800632d
 8005f10:	0800632d 	.word	0x0800632d
 8005f14:	08006335 	.word	0x08006335
 8005f18:	08006335 	.word	0x08006335
 8005f1c:	08006335 	.word	0x08006335
 8005f20:	08006335 	.word	0x08006335
 8005f24:	0800633d 	.word	0x0800633d
 8005f28:	0800633d 	.word	0x0800633d
 8005f2c:	0800633d 	.word	0x0800633d
 8005f30:	0800633d 	.word	0x0800633d
 8005f34:	08006345 	.word	0x08006345
 8005f38:	08006345 	.word	0x08006345
 8005f3c:	08006345 	.word	0x08006345
 8005f40:	08006345 	.word	0x08006345
 8005f44:	0800634d 	.word	0x0800634d
 8005f48:	0800634d 	.word	0x0800634d
 8005f4c:	0800634d 	.word	0x0800634d
 8005f50:	0800634d 	.word	0x0800634d
 8005f54:	08006355 	.word	0x08006355
 8005f58:	08006355 	.word	0x08006355
 8005f5c:	08006355 	.word	0x08006355
 8005f60:	08006355 	.word	0x08006355
 8005f64:	0800635d 	.word	0x0800635d
 8005f68:	0800635d 	.word	0x0800635d
 8005f6c:	0800635d 	.word	0x0800635d
 8005f70:	0800635d 	.word	0x0800635d
 8005f74:	08006365 	.word	0x08006365
 8005f78:	08006365 	.word	0x08006365
 8005f7c:	08006365 	.word	0x08006365
 8005f80:	08006365 	.word	0x08006365
 8005f84:	0800636d 	.word	0x0800636d
 8005f88:	0800636d 	.word	0x0800636d
 8005f8c:	0800636d 	.word	0x0800636d
 8005f90:	0800636d 	.word	0x0800636d
 8005f94:	08006375 	.word	0x08006375
 8005f98:	08006375 	.word	0x08006375
 8005f9c:	08006375 	.word	0x08006375
 8005fa0:	08006375 	.word	0x08006375
 8005fa4:	0800637d 	.word	0x0800637d
 8005fa8:	0800637d 	.word	0x0800637d
 8005fac:	0800637d 	.word	0x0800637d
 8005fb0:	0800637d 	.word	0x0800637d
 8005fb4:	08006385 	.word	0x08006385
 8005fb8:	08006385 	.word	0x08006385
 8005fbc:	08006385 	.word	0x08006385
 8005fc0:	08006385 	.word	0x08006385
 8005fc4:	0800638d 	.word	0x0800638d
 8005fc8:	0800638d 	.word	0x0800638d
 8005fcc:	0800638d 	.word	0x0800638d
 8005fd0:	0800638d 	.word	0x0800638d
 8005fd4:	08006395 	.word	0x08006395
 8005fd8:	08006395 	.word	0x08006395
 8005fdc:	08006395 	.word	0x08006395
 8005fe0:	08006395 	.word	0x08006395
 8005fe4:	0800639d 	.word	0x0800639d
 8005fe8:	0800639d 	.word	0x0800639d
 8005fec:	0800639d 	.word	0x0800639d
 8005ff0:	0800639d 	.word	0x0800639d
 8005ff4:	080063a5 	.word	0x080063a5
 8005ff8:	080063a5 	.word	0x080063a5
 8005ffc:	080063a5 	.word	0x080063a5
 8006000:	080063a5 	.word	0x080063a5
 8006004:	080063ad 	.word	0x080063ad
 8006008:	080063ad 	.word	0x080063ad
 800600c:	080063ad 	.word	0x080063ad
 8006010:	080063ad 	.word	0x080063ad
 8006014:	080063b5 	.word	0x080063b5
 8006018:	080063b5 	.word	0x080063b5
 800601c:	080063b5 	.word	0x080063b5
 8006020:	080063b5 	.word	0x080063b5
 8006024:	080063bd 	.word	0x080063bd
 8006028:	080063bd 	.word	0x080063bd
 800602c:	080063bd 	.word	0x080063bd
 8006030:	080063bd 	.word	0x080063bd
 8006034:	080063c5 	.word	0x080063c5
 8006038:	080063c5 	.word	0x080063c5
 800603c:	080063c5 	.word	0x080063c5
 8006040:	080063c5 	.word	0x080063c5
 8006044:	080063cd 	.word	0x080063cd
 8006048:	080063cd 	.word	0x080063cd
 800604c:	080063cd 	.word	0x080063cd
 8006050:	080063cd 	.word	0x080063cd
 8006054:	080063d5 	.word	0x080063d5
 8006058:	080063d5 	.word	0x080063d5
 800605c:	080063d5 	.word	0x080063d5
 8006060:	080063d5 	.word	0x080063d5
 8006064:	080063dd 	.word	0x080063dd
 8006068:	080063dd 	.word	0x080063dd
 800606c:	080063dd 	.word	0x080063dd
 8006070:	080063dd 	.word	0x080063dd
 8006074:	080063e5 	.word	0x080063e5
 8006078:	080063e5 	.word	0x080063e5
 800607c:	080063e5 	.word	0x080063e5
 8006080:	080063e5 	.word	0x080063e5
 8006084:	080063ed 	.word	0x080063ed
 8006088:	080063ed 	.word	0x080063ed
 800608c:	080063ed 	.word	0x080063ed
 8006090:	080063ed 	.word	0x080063ed
 8006094:	080063f5 	.word	0x080063f5
 8006098:	080063f5 	.word	0x080063f5
 800609c:	080063f5 	.word	0x080063f5
 80060a0:	080063f5 	.word	0x080063f5
 80060a4:	080063fd 	.word	0x080063fd
 80060a8:	080063fd 	.word	0x080063fd
 80060ac:	080063fd 	.word	0x080063fd
 80060b0:	080063fd 	.word	0x080063fd
 80060b4:	08006405 	.word	0x08006405
 80060b8:	08006405 	.word	0x08006405
 80060bc:	08006405 	.word	0x08006405
 80060c0:	08006405 	.word	0x08006405
 80060c4:	0800640d 	.word	0x0800640d
 80060c8:	0800640d 	.word	0x0800640d
 80060cc:	0800640d 	.word	0x0800640d
 80060d0:	0800640d 	.word	0x0800640d
 80060d4:	08006415 	.word	0x08006415
 80060d8:	08006415 	.word	0x08006415
 80060dc:	08006415 	.word	0x08006415
 80060e0:	08006415 	.word	0x08006415
 80060e4:	0800641d 	.word	0x0800641d
 80060e8:	0800641d 	.word	0x0800641d
 80060ec:	0800641d 	.word	0x0800641d
 80060f0:	0800641d 	.word	0x0800641d
 80060f4:	08006425 	.word	0x08006425
 80060f8:	08006425 	.word	0x08006425
 80060fc:	08006425 	.word	0x08006425
 8006100:	08006425 	.word	0x08006425
 8006104:	0800642d 	.word	0x0800642d
 8006108:	0800642d 	.word	0x0800642d
 800610c:	0800642d 	.word	0x0800642d
 8006110:	0800642d 	.word	0x0800642d
 8006114:	08006435 	.word	0x08006435
 8006118:	08006435 	.word	0x08006435
 800611c:	08006435 	.word	0x08006435
 8006120:	08006435 	.word	0x08006435
 8006124:	0800643d 	.word	0x0800643d
 8006128:	0800643d 	.word	0x0800643d
 800612c:	0800643d 	.word	0x0800643d
 8006130:	0800643d 	.word	0x0800643d
	{
		case 0	:
		case 1	:
		case 2	:
			VPP_ApplyPresetToSignal( VPP01 );
 8006134:	2000      	movs	r0, #0
 8006136:	f7ff fb89 	bl	800584c <VPP_ApplyPresetToSignal>
			break;
 800613a:	e184      	b.n	8006446 <VPP_ModifySignalOutput+0x94a>
		case 3	:
		case 4	:
		case 5	:
		case 6	:
			VPP_ApplyPresetToSignal( VPP02	);
 800613c:	2001      	movs	r0, #1
 800613e:	f7ff fb85 	bl	800584c <VPP_ApplyPresetToSignal>
			break;
 8006142:	e180      	b.n	8006446 <VPP_ModifySignalOutput+0x94a>
		case 7	:
		case 8	:
		case 9	:
		case 10	:
			VPP_ApplyPresetToSignal( VPP03	);
 8006144:	2002      	movs	r0, #2
 8006146:	f7ff fb81 	bl	800584c <VPP_ApplyPresetToSignal>
			break;
 800614a:	e17c      	b.n	8006446 <VPP_ModifySignalOutput+0x94a>
		case 11	:
		case 12	:
		case 13	:
		case 14	:
			VPP_ApplyPresetToSignal( VPP04	);
 800614c:	2003      	movs	r0, #3
 800614e:	f7ff fb7d 	bl	800584c <VPP_ApplyPresetToSignal>
			break;
 8006152:	e178      	b.n	8006446 <VPP_ModifySignalOutput+0x94a>
		case 15	:
		case 16	:
		case 17	:
		case 18	:
			VPP_ApplyPresetToSignal( VPP05	);
 8006154:	2004      	movs	r0, #4
 8006156:	f7ff fb79 	bl	800584c <VPP_ApplyPresetToSignal>
			break;
 800615a:	e174      	b.n	8006446 <VPP_ModifySignalOutput+0x94a>
		case 19	:
		case 20	:
		case 21	:
		case 22	:
			VPP_ApplyPresetToSignal( VPP06	);
 800615c:	2005      	movs	r0, #5
 800615e:	f7ff fb75 	bl	800584c <VPP_ApplyPresetToSignal>
			break;
 8006162:	e170      	b.n	8006446 <VPP_ModifySignalOutput+0x94a>
		case 23	:
		case 24	:
		case 25	:
		case 26	:
			VPP_ApplyPresetToSignal( VPP07	);
 8006164:	2006      	movs	r0, #6
 8006166:	f7ff fb71 	bl	800584c <VPP_ApplyPresetToSignal>
			break;
 800616a:	e16c      	b.n	8006446 <VPP_ModifySignalOutput+0x94a>
		case 27	:
		case 28	:
		case 29	:
		case 30	:
			VPP_ApplyPresetToSignal( VPP08	);
 800616c:	2007      	movs	r0, #7
 800616e:	f7ff fb6d 	bl	800584c <VPP_ApplyPresetToSignal>
			break;
 8006172:	e168      	b.n	8006446 <VPP_ModifySignalOutput+0x94a>
		case 31	:
		case 32	:
		case 33	:
		case 34	:
			VPP_ApplyPresetToSignal( VPP09	);
 8006174:	2008      	movs	r0, #8
 8006176:	f7ff fb69 	bl	800584c <VPP_ApplyPresetToSignal>
			break;
 800617a:	e164      	b.n	8006446 <VPP_ModifySignalOutput+0x94a>
		case 35	:
		case 36	:
		case 37	:
		case 38	:
			VPP_ApplyPresetToSignal( VPP10	);
 800617c:	2009      	movs	r0, #9
 800617e:	f7ff fb65 	bl	800584c <VPP_ApplyPresetToSignal>
			break;
 8006182:	e160      	b.n	8006446 <VPP_ModifySignalOutput+0x94a>
		case 39	:
		case 40	:
		case 41	:
		case 42	:
			VPP_ApplyPresetToSignal( VPP11	);
 8006184:	200a      	movs	r0, #10
 8006186:	f7ff fb61 	bl	800584c <VPP_ApplyPresetToSignal>
			break;
 800618a:	e15c      	b.n	8006446 <VPP_ModifySignalOutput+0x94a>
		case 43	:
		case 44	:
		case 45	:
		case 46	:
			VPP_ApplyPresetToSignal( VPP12	);
 800618c:	200b      	movs	r0, #11
 800618e:	f7ff fb5d 	bl	800584c <VPP_ApplyPresetToSignal>
			break;
 8006192:	e158      	b.n	8006446 <VPP_ModifySignalOutput+0x94a>
		case 47	:
		case 48	:
		case 49	:
		case 50	:
			VPP_ApplyPresetToSignal( VPP13	);
 8006194:	200c      	movs	r0, #12
 8006196:	f7ff fb59 	bl	800584c <VPP_ApplyPresetToSignal>
			break;
 800619a:	e154      	b.n	8006446 <VPP_ModifySignalOutput+0x94a>
		case 51	:
		case 52	:
		case 53	:
		case 54	:
			VPP_ApplyPresetToSignal( VPP14	);
 800619c:	200d      	movs	r0, #13
 800619e:	f7ff fb55 	bl	800584c <VPP_ApplyPresetToSignal>
			break;
 80061a2:	e150      	b.n	8006446 <VPP_ModifySignalOutput+0x94a>
		case 55	:
		case 56	:
		case 57	:
		case 58	:
			VPP_ApplyPresetToSignal( VPP15	);
 80061a4:	200e      	movs	r0, #14
 80061a6:	f7ff fb51 	bl	800584c <VPP_ApplyPresetToSignal>
			break;
 80061aa:	e14c      	b.n	8006446 <VPP_ModifySignalOutput+0x94a>
		case 59	:
		case 60	:
		case 61	:
		case 62	:
			VPP_ApplyPresetToSignal( VPP16	);
 80061ac:	200f      	movs	r0, #15
 80061ae:	f7ff fb4d 	bl	800584c <VPP_ApplyPresetToSignal>
			break;
 80061b2:	e148      	b.n	8006446 <VPP_ModifySignalOutput+0x94a>
		case 63	:
		case 64	:
		case 65	:
		case 66	:
			VPP_ApplyPresetToSignal( VPP17	);
 80061b4:	2010      	movs	r0, #16
 80061b6:	f7ff fb49 	bl	800584c <VPP_ApplyPresetToSignal>
			break;
 80061ba:	e144      	b.n	8006446 <VPP_ModifySignalOutput+0x94a>
		case 67	:
		case 68	:
		case 69	:
		case 70	:
			VPP_ApplyPresetToSignal( VPP18	);
 80061bc:	2011      	movs	r0, #17
 80061be:	f7ff fb45 	bl	800584c <VPP_ApplyPresetToSignal>
			break;
 80061c2:	e140      	b.n	8006446 <VPP_ModifySignalOutput+0x94a>
		case 71	:
		case 72	:
		case 73	:
		case 74	:
			VPP_ApplyPresetToSignal( VPP19	);
 80061c4:	2012      	movs	r0, #18
 80061c6:	f7ff fb41 	bl	800584c <VPP_ApplyPresetToSignal>
			break;
 80061ca:	e13c      	b.n	8006446 <VPP_ModifySignalOutput+0x94a>
		case 75	:
		case 76	:
		case 77	:
		case 78	:
			VPP_ApplyPresetToSignal( VPP20	);
 80061cc:	2013      	movs	r0, #19
 80061ce:	f7ff fb3d 	bl	800584c <VPP_ApplyPresetToSignal>
			break;
 80061d2:	e138      	b.n	8006446 <VPP_ModifySignalOutput+0x94a>
		case 79	:
		case 80	:
		case 81	:
		case 82	:
			VPP_ApplyPresetToSignal( VPP21	);
 80061d4:	2014      	movs	r0, #20
 80061d6:	f7ff fb39 	bl	800584c <VPP_ApplyPresetToSignal>
			break;
 80061da:	e134      	b.n	8006446 <VPP_ModifySignalOutput+0x94a>
		case 83	:
		case 84	:
		case 85	:
		case 86	:
			VPP_ApplyPresetToSignal( VPP22	);
 80061dc:	2015      	movs	r0, #21
 80061de:	f7ff fb35 	bl	800584c <VPP_ApplyPresetToSignal>
			break;
 80061e2:	e130      	b.n	8006446 <VPP_ModifySignalOutput+0x94a>
		case 87	:
		case 88	:
		case 89	:
		case 90	:
			VPP_ApplyPresetToSignal( VPP23	);
 80061e4:	2016      	movs	r0, #22
 80061e6:	f7ff fb31 	bl	800584c <VPP_ApplyPresetToSignal>
			break;
 80061ea:	e12c      	b.n	8006446 <VPP_ModifySignalOutput+0x94a>
		case 91	:
		case 92	:
		case 93	:
		case 94	:
			VPP_ApplyPresetToSignal( VPP24	);
 80061ec:	2017      	movs	r0, #23
 80061ee:	f7ff fb2d 	bl	800584c <VPP_ApplyPresetToSignal>
			break;
 80061f2:	e128      	b.n	8006446 <VPP_ModifySignalOutput+0x94a>
		case 95	:
		case 96	:
		case 97	:
		case 98	:
			VPP_ApplyPresetToSignal( VPP25	);
 80061f4:	2018      	movs	r0, #24
 80061f6:	f7ff fb29 	bl	800584c <VPP_ApplyPresetToSignal>
			break;
 80061fa:	e124      	b.n	8006446 <VPP_ModifySignalOutput+0x94a>
		case 99		:
		case 100	:
		case 101	:
		case 102	:
			VPP_ApplyPresetToSignal( VPP26	);
 80061fc:	2019      	movs	r0, #25
 80061fe:	f7ff fb25 	bl	800584c <VPP_ApplyPresetToSignal>
			break;
 8006202:	e120      	b.n	8006446 <VPP_ModifySignalOutput+0x94a>
		case 103	:
		case 104	:
		case 105	:
		case 106	:
			VPP_ApplyPresetToSignal( VPP27	);
 8006204:	201a      	movs	r0, #26
 8006206:	f7ff fb21 	bl	800584c <VPP_ApplyPresetToSignal>
			break;
 800620a:	e11c      	b.n	8006446 <VPP_ModifySignalOutput+0x94a>
		case 107	:
		case 108	:
		case 109	:
		case 110	:
			VPP_ApplyPresetToSignal( VPP28	);
 800620c:	201b      	movs	r0, #27
 800620e:	f7ff fb1d 	bl	800584c <VPP_ApplyPresetToSignal>
			break;
 8006212:	e118      	b.n	8006446 <VPP_ModifySignalOutput+0x94a>
		case 111	:
		case 112	:
		case 113	:
		case 114	:
			VPP_ApplyPresetToSignal( VPP29	);
 8006214:	201c      	movs	r0, #28
 8006216:	f7ff fb19 	bl	800584c <VPP_ApplyPresetToSignal>
			break;
 800621a:	e114      	b.n	8006446 <VPP_ModifySignalOutput+0x94a>
		case 115	:
		case 116	:
		case 117	:
		case 118	:
			VPP_ApplyPresetToSignal( VPP30	);
 800621c:	201d      	movs	r0, #29
 800621e:	f7ff fb15 	bl	800584c <VPP_ApplyPresetToSignal>
			break;
 8006222:	e110      	b.n	8006446 <VPP_ModifySignalOutput+0x94a>
		case 119	:
		case 120	:
		case 121	:
		case 122	:
			VPP_ApplyPresetToSignal( VPP31	);
 8006224:	201e      	movs	r0, #30
 8006226:	f7ff fb11 	bl	800584c <VPP_ApplyPresetToSignal>
			break;
 800622a:	e10c      	b.n	8006446 <VPP_ModifySignalOutput+0x94a>
		case 123	:
		case 124	:
		case 125	:
		case 126	:
			VPP_ApplyPresetToSignal( VPP32	);
 800622c:	201f      	movs	r0, #31
 800622e:	f7ff fb0d 	bl	800584c <VPP_ApplyPresetToSignal>
			break;
 8006232:	e108      	b.n	8006446 <VPP_ModifySignalOutput+0x94a>
		case 127	:
		case 128	:
		case 129	:
		case 130	:
			VPP_ApplyPresetToSignal( VPP33	);
 8006234:	2020      	movs	r0, #32
 8006236:	f7ff fb09 	bl	800584c <VPP_ApplyPresetToSignal>
			break;
 800623a:	e104      	b.n	8006446 <VPP_ModifySignalOutput+0x94a>
		case 131	:
		case 132	:
		case 133	:
		case 134	:
			VPP_ApplyPresetToSignal( VPP34	);
 800623c:	2021      	movs	r0, #33	; 0x21
 800623e:	f7ff fb05 	bl	800584c <VPP_ApplyPresetToSignal>
			break;
 8006242:	e100      	b.n	8006446 <VPP_ModifySignalOutput+0x94a>
		case 135	:
		case 136	:
		case 137	:
		case 138	:
			VPP_ApplyPresetToSignal( VPP35	);
 8006244:	2022      	movs	r0, #34	; 0x22
 8006246:	f7ff fb01 	bl	800584c <VPP_ApplyPresetToSignal>
			break;
 800624a:	e0fc      	b.n	8006446 <VPP_ModifySignalOutput+0x94a>
		case 139	:
		case 140	:
		case 141	:
		case 142	:
			VPP_ApplyPresetToSignal( VPP36	);
 800624c:	2023      	movs	r0, #35	; 0x23
 800624e:	f7ff fafd 	bl	800584c <VPP_ApplyPresetToSignal>
			break;
 8006252:	e0f8      	b.n	8006446 <VPP_ModifySignalOutput+0x94a>
		case 143	:
		case 144	:
		case 145	:
		case 146	:
			VPP_ApplyPresetToSignal( VPP37	);
 8006254:	2024      	movs	r0, #36	; 0x24
 8006256:	f7ff faf9 	bl	800584c <VPP_ApplyPresetToSignal>
			break;
 800625a:	e0f4      	b.n	8006446 <VPP_ModifySignalOutput+0x94a>
		case 147	:
		case 148	:
		case 149	:
		case 150	:
			VPP_ApplyPresetToSignal( VPP38	);
 800625c:	2025      	movs	r0, #37	; 0x25
 800625e:	f7ff faf5 	bl	800584c <VPP_ApplyPresetToSignal>
			break;
 8006262:	e0f0      	b.n	8006446 <VPP_ModifySignalOutput+0x94a>
		case 151	:
		case 152	:
		case 153	:
		case 154	:
			VPP_ApplyPresetToSignal( VPP39	);
 8006264:	2026      	movs	r0, #38	; 0x26
 8006266:	f7ff faf1 	bl	800584c <VPP_ApplyPresetToSignal>
			break;
 800626a:	e0ec      	b.n	8006446 <VPP_ModifySignalOutput+0x94a>
		case 155	:
		case 156	:
		case 157	:
		case 158	:
			VPP_ApplyPresetToSignal( VPP40	);
 800626c:	2027      	movs	r0, #39	; 0x27
 800626e:	f7ff faed 	bl	800584c <VPP_ApplyPresetToSignal>
			break;
 8006272:	e0e8      	b.n	8006446 <VPP_ModifySignalOutput+0x94a>
		case 159	:
		case 160	:
		case 161	:
		case 162	:
			VPP_ApplyPresetToSignal( VPP41	);
 8006274:	2028      	movs	r0, #40	; 0x28
 8006276:	f7ff fae9 	bl	800584c <VPP_ApplyPresetToSignal>
			break;
 800627a:	e0e4      	b.n	8006446 <VPP_ModifySignalOutput+0x94a>
		case 163	:
		case 164	:
		case 165	:
		case 166	:
			VPP_ApplyPresetToSignal( VPP42	);
 800627c:	2029      	movs	r0, #41	; 0x29
 800627e:	f7ff fae5 	bl	800584c <VPP_ApplyPresetToSignal>
			break;
 8006282:	e0e0      	b.n	8006446 <VPP_ModifySignalOutput+0x94a>
		case 167	:
		case 168	:
		case 169	:
		case 170	:
			VPP_ApplyPresetToSignal( VPP43	);
 8006284:	202a      	movs	r0, #42	; 0x2a
 8006286:	f7ff fae1 	bl	800584c <VPP_ApplyPresetToSignal>
			break;
 800628a:	e0dc      	b.n	8006446 <VPP_ModifySignalOutput+0x94a>
		case 171	:
		case 172	:
		case 173	:
		case 174	:
			VPP_ApplyPresetToSignal( VPP44	);
 800628c:	202b      	movs	r0, #43	; 0x2b
 800628e:	f7ff fadd 	bl	800584c <VPP_ApplyPresetToSignal>
			break;
 8006292:	e0d8      	b.n	8006446 <VPP_ModifySignalOutput+0x94a>
		case 175	:
		case 176	:
		case 177	:
		case 178	:
			VPP_ApplyPresetToSignal( VPP45	);
 8006294:	202c      	movs	r0, #44	; 0x2c
 8006296:	f7ff fad9 	bl	800584c <VPP_ApplyPresetToSignal>
			break;
 800629a:	e0d4      	b.n	8006446 <VPP_ModifySignalOutput+0x94a>
		case 179	:
		case 180	:
		case 181	:
		case 182	:
			VPP_ApplyPresetToSignal( VPP46	);
 800629c:	202d      	movs	r0, #45	; 0x2d
 800629e:	f7ff fad5 	bl	800584c <VPP_ApplyPresetToSignal>
			break;
 80062a2:	e0d0      	b.n	8006446 <VPP_ModifySignalOutput+0x94a>
		case 183	:
		case 184	:
		case 185	:
		case 186	:
			VPP_ApplyPresetToSignal( VPP47	);
 80062a4:	202e      	movs	r0, #46	; 0x2e
 80062a6:	f7ff fad1 	bl	800584c <VPP_ApplyPresetToSignal>
			break;
 80062aa:	e0cc      	b.n	8006446 <VPP_ModifySignalOutput+0x94a>
		case 187	:
		case 188	:
		case 189	:
		case 190	:
			VPP_ApplyPresetToSignal( VPP48	);
 80062ac:	202f      	movs	r0, #47	; 0x2f
 80062ae:	f7ff facd 	bl	800584c <VPP_ApplyPresetToSignal>
			break;
 80062b2:	e0c8      	b.n	8006446 <VPP_ModifySignalOutput+0x94a>
		case 191	:
		case 192	:
		case 193	:
		case 194	:
			VPP_ApplyPresetToSignal( VPP49	);
 80062b4:	2030      	movs	r0, #48	; 0x30
 80062b6:	f7ff fac9 	bl	800584c <VPP_ApplyPresetToSignal>
			break;
 80062ba:	e0c4      	b.n	8006446 <VPP_ModifySignalOutput+0x94a>
		case 195	:
		case 196	:
		case 197	:
		case 198	:
			VPP_ApplyPresetToSignal( VPP50	);
 80062bc:	2031      	movs	r0, #49	; 0x31
 80062be:	f7ff fac5 	bl	800584c <VPP_ApplyPresetToSignal>
			break;
 80062c2:	e0c0      	b.n	8006446 <VPP_ModifySignalOutput+0x94a>
		case 199	:
		case 200	:
		case 201	:
		case 202	:
			VPP_ApplyPresetToSignal( VPP51	);
 80062c4:	2032      	movs	r0, #50	; 0x32
 80062c6:	f7ff fac1 	bl	800584c <VPP_ApplyPresetToSignal>
			break;
 80062ca:	e0bc      	b.n	8006446 <VPP_ModifySignalOutput+0x94a>
		case 203	:
		case 204	:
		case 205	:
		case 206	:
			VPP_ApplyPresetToSignal( VPP52	);
 80062cc:	2033      	movs	r0, #51	; 0x33
 80062ce:	f7ff fabd 	bl	800584c <VPP_ApplyPresetToSignal>
			break;
 80062d2:	e0b8      	b.n	8006446 <VPP_ModifySignalOutput+0x94a>
		case 207	:
		case 208	:
		case 209	:
		case 210	:
			VPP_ApplyPresetToSignal( VPP53	);
 80062d4:	2034      	movs	r0, #52	; 0x34
 80062d6:	f7ff fab9 	bl	800584c <VPP_ApplyPresetToSignal>
			break;
 80062da:	e0b4      	b.n	8006446 <VPP_ModifySignalOutput+0x94a>
		case 211	:
		case 212	:
		case 213	:
		case 214	:
			VPP_ApplyPresetToSignal( VPP54	);
 80062dc:	2035      	movs	r0, #53	; 0x35
 80062de:	f7ff fab5 	bl	800584c <VPP_ApplyPresetToSignal>
			break;
 80062e2:	e0b0      	b.n	8006446 <VPP_ModifySignalOutput+0x94a>
		case 215	:
		case 216	:
		case 217	:
		case 218	:
			VPP_ApplyPresetToSignal( VPP55	);
 80062e4:	2036      	movs	r0, #54	; 0x36
 80062e6:	f7ff fab1 	bl	800584c <VPP_ApplyPresetToSignal>
			break;
 80062ea:	e0ac      	b.n	8006446 <VPP_ModifySignalOutput+0x94a>
		case 219	:
		case 220	:
		case 221	:
		case 222	:
			VPP_ApplyPresetToSignal( VPP56	);
 80062ec:	2037      	movs	r0, #55	; 0x37
 80062ee:	f7ff faad 	bl	800584c <VPP_ApplyPresetToSignal>
			break;
 80062f2:	e0a8      	b.n	8006446 <VPP_ModifySignalOutput+0x94a>
		case 223	:
		case 224	:
		case 225	:
		case 226	:
			VPP_ApplyPresetToSignal( VPP57	);
 80062f4:	2038      	movs	r0, #56	; 0x38
 80062f6:	f7ff faa9 	bl	800584c <VPP_ApplyPresetToSignal>
			break;
 80062fa:	e0a4      	b.n	8006446 <VPP_ModifySignalOutput+0x94a>
		case 227	:
		case 228	:
		case 229	:
		case 230	:
			VPP_ApplyPresetToSignal( VPP58	);
 80062fc:	2039      	movs	r0, #57	; 0x39
 80062fe:	f7ff faa5 	bl	800584c <VPP_ApplyPresetToSignal>
			break;
 8006302:	e0a0      	b.n	8006446 <VPP_ModifySignalOutput+0x94a>
		case 231	:
		case 232	:
		case 233	:
		case 234	:
			VPP_ApplyPresetToSignal( VPP59	);
 8006304:	203a      	movs	r0, #58	; 0x3a
 8006306:	f7ff faa1 	bl	800584c <VPP_ApplyPresetToSignal>
			break;
 800630a:	e09c      	b.n	8006446 <VPP_ModifySignalOutput+0x94a>
		case 235	:
		case 236	:
		case 237	:
		case 238	:
			VPP_ApplyPresetToSignal( VPP60	);
 800630c:	203b      	movs	r0, #59	; 0x3b
 800630e:	f7ff fa9d 	bl	800584c <VPP_ApplyPresetToSignal>
			break;
 8006312:	e098      	b.n	8006446 <VPP_ModifySignalOutput+0x94a>
		case 239	:
		case 240	:
		case 241	:
		case 242	:
			VPP_ApplyPresetToSignal( VPP61	);
 8006314:	203c      	movs	r0, #60	; 0x3c
 8006316:	f7ff fa99 	bl	800584c <VPP_ApplyPresetToSignal>
			break;
 800631a:	e094      	b.n	8006446 <VPP_ModifySignalOutput+0x94a>
		case 243	:
		case 244	:
		case 245	:
		case 246	:
			VPP_ApplyPresetToSignal( VPP62	);
 800631c:	203d      	movs	r0, #61	; 0x3d
 800631e:	f7ff fa95 	bl	800584c <VPP_ApplyPresetToSignal>
			break;
 8006322:	e090      	b.n	8006446 <VPP_ModifySignalOutput+0x94a>
		case 247	:
		case 248	:
		case 249	:
		case 250	:
			VPP_ApplyPresetToSignal( VPP63	);
 8006324:	203e      	movs	r0, #62	; 0x3e
 8006326:	f7ff fa91 	bl	800584c <VPP_ApplyPresetToSignal>
			break;
 800632a:	e08c      	b.n	8006446 <VPP_ModifySignalOutput+0x94a>
		case 251	:
		case 252	:
		case 253	:
		case 254	:
			VPP_ApplyPresetToSignal( VPP64	);
 800632c:	203f      	movs	r0, #63	; 0x3f
 800632e:	f7ff fa8d 	bl	800584c <VPP_ApplyPresetToSignal>
			break;
 8006332:	e088      	b.n	8006446 <VPP_ModifySignalOutput+0x94a>
		case 255	:
		case 256	:
		case 257	:
		case 258	:
			VPP_ApplyPresetToSignal( VPP65	);
 8006334:	2040      	movs	r0, #64	; 0x40
 8006336:	f7ff fa89 	bl	800584c <VPP_ApplyPresetToSignal>
			break;
 800633a:	e084      	b.n	8006446 <VPP_ModifySignalOutput+0x94a>
		case 259	:
		case 260	:
		case 261	:
		case 262	:
			VPP_ApplyPresetToSignal( VPP66	);
 800633c:	2041      	movs	r0, #65	; 0x41
 800633e:	f7ff fa85 	bl	800584c <VPP_ApplyPresetToSignal>
			break;
 8006342:	e080      	b.n	8006446 <VPP_ModifySignalOutput+0x94a>
		case 263	:
		case 264	:
		case 265	:
		case 266	:
			VPP_ApplyPresetToSignal( VPP67	);
 8006344:	2042      	movs	r0, #66	; 0x42
 8006346:	f7ff fa81 	bl	800584c <VPP_ApplyPresetToSignal>
			break;
 800634a:	e07c      	b.n	8006446 <VPP_ModifySignalOutput+0x94a>
		case 267	:
		case 268	:
		case 269	:
		case 270	:
			VPP_ApplyPresetToSignal( VPP68	);
 800634c:	2043      	movs	r0, #67	; 0x43
 800634e:	f7ff fa7d 	bl	800584c <VPP_ApplyPresetToSignal>
			break;
 8006352:	e078      	b.n	8006446 <VPP_ModifySignalOutput+0x94a>
		case 271	:
		case 272	:
		case 273	:
		case 274	:
			VPP_ApplyPresetToSignal( VPP69	);
 8006354:	2044      	movs	r0, #68	; 0x44
 8006356:	f7ff fa79 	bl	800584c <VPP_ApplyPresetToSignal>
			break;
 800635a:	e074      	b.n	8006446 <VPP_ModifySignalOutput+0x94a>
		case 275	:
		case 276	:
		case 277	:
		case 278	:
			VPP_ApplyPresetToSignal( VPP70	);
 800635c:	2045      	movs	r0, #69	; 0x45
 800635e:	f7ff fa75 	bl	800584c <VPP_ApplyPresetToSignal>
			break;
 8006362:	e070      	b.n	8006446 <VPP_ModifySignalOutput+0x94a>
		case 279	:
		case 280	:
		case 281	:
		case 282	:
			VPP_ApplyPresetToSignal( VPP71	);
 8006364:	2046      	movs	r0, #70	; 0x46
 8006366:	f7ff fa71 	bl	800584c <VPP_ApplyPresetToSignal>
			break;
 800636a:	e06c      	b.n	8006446 <VPP_ModifySignalOutput+0x94a>
		case 283	:
		case 284	:
		case 285	:
		case 286	:
			VPP_ApplyPresetToSignal( VPP72	);
 800636c:	2047      	movs	r0, #71	; 0x47
 800636e:	f7ff fa6d 	bl	800584c <VPP_ApplyPresetToSignal>
			break;
 8006372:	e068      	b.n	8006446 <VPP_ModifySignalOutput+0x94a>
		case 287	:
		case 288	:
		case 289	:
		case 290	:
			VPP_ApplyPresetToSignal( VPP73	);
 8006374:	2048      	movs	r0, #72	; 0x48
 8006376:	f7ff fa69 	bl	800584c <VPP_ApplyPresetToSignal>
			break;
 800637a:	e064      	b.n	8006446 <VPP_ModifySignalOutput+0x94a>
		case 291	:
		case 292	:
		case 293	:
		case 294	:
			VPP_ApplyPresetToSignal( VPP74	);
 800637c:	2049      	movs	r0, #73	; 0x49
 800637e:	f7ff fa65 	bl	800584c <VPP_ApplyPresetToSignal>
			break;
 8006382:	e060      	b.n	8006446 <VPP_ModifySignalOutput+0x94a>
		case 295	:
		case 296	:
		case 297	:
		case 298	:
			VPP_ApplyPresetToSignal( VPP75	);
 8006384:	204a      	movs	r0, #74	; 0x4a
 8006386:	f7ff fa61 	bl	800584c <VPP_ApplyPresetToSignal>
			break;
 800638a:	e05c      	b.n	8006446 <VPP_ModifySignalOutput+0x94a>
		case 299	:
		case 300	:
		case 301	:
		case 302	:
			VPP_ApplyPresetToSignal( VPP76	);
 800638c:	204b      	movs	r0, #75	; 0x4b
 800638e:	f7ff fa5d 	bl	800584c <VPP_ApplyPresetToSignal>
			break;
 8006392:	e058      	b.n	8006446 <VPP_ModifySignalOutput+0x94a>
		case 303	:
		case 304	:
		case 305	:
		case 306	:
			VPP_ApplyPresetToSignal( VPP77	);
 8006394:	204c      	movs	r0, #76	; 0x4c
 8006396:	f7ff fa59 	bl	800584c <VPP_ApplyPresetToSignal>
			break;
 800639a:	e054      	b.n	8006446 <VPP_ModifySignalOutput+0x94a>
		case 307	:
		case 308	:
		case 309	:
		case 310	:
			VPP_ApplyPresetToSignal( VPP78	);
 800639c:	204d      	movs	r0, #77	; 0x4d
 800639e:	f7ff fa55 	bl	800584c <VPP_ApplyPresetToSignal>
			break;
 80063a2:	e050      	b.n	8006446 <VPP_ModifySignalOutput+0x94a>
		case 311	:
		case 312	:
		case 313	:
		case 314	:
			VPP_ApplyPresetToSignal( VPP79	);
 80063a4:	204e      	movs	r0, #78	; 0x4e
 80063a6:	f7ff fa51 	bl	800584c <VPP_ApplyPresetToSignal>
			break;
 80063aa:	e04c      	b.n	8006446 <VPP_ModifySignalOutput+0x94a>
		case 315	:
		case 316	:
		case 317	:
		case 318	:
			VPP_ApplyPresetToSignal( VPP80	);
 80063ac:	204f      	movs	r0, #79	; 0x4f
 80063ae:	f7ff fa4d 	bl	800584c <VPP_ApplyPresetToSignal>
			break;
 80063b2:	e048      	b.n	8006446 <VPP_ModifySignalOutput+0x94a>
		case 319	:
		case 320	:
		case 321	:
		case 322	:
			VPP_ApplyPresetToSignal( VPP81	);
 80063b4:	2050      	movs	r0, #80	; 0x50
 80063b6:	f7ff fa49 	bl	800584c <VPP_ApplyPresetToSignal>
			break;
 80063ba:	e044      	b.n	8006446 <VPP_ModifySignalOutput+0x94a>
		case 323	:
		case 324	:
		case 325	:
		case 326	:
			VPP_ApplyPresetToSignal( VPP82	);
 80063bc:	2051      	movs	r0, #81	; 0x51
 80063be:	f7ff fa45 	bl	800584c <VPP_ApplyPresetToSignal>
			break;
 80063c2:	e040      	b.n	8006446 <VPP_ModifySignalOutput+0x94a>
		case 327	:
		case 328	:
		case 329	:
		case 330	:
			VPP_ApplyPresetToSignal( VPP83	);
 80063c4:	2052      	movs	r0, #82	; 0x52
 80063c6:	f7ff fa41 	bl	800584c <VPP_ApplyPresetToSignal>
			break;
 80063ca:	e03c      	b.n	8006446 <VPP_ModifySignalOutput+0x94a>
		case 331	:
		case 332	:
		case 333	:
		case 334	:
			VPP_ApplyPresetToSignal( VPP84	);
 80063cc:	2053      	movs	r0, #83	; 0x53
 80063ce:	f7ff fa3d 	bl	800584c <VPP_ApplyPresetToSignal>
			break;
 80063d2:	e038      	b.n	8006446 <VPP_ModifySignalOutput+0x94a>
		case 335	:
		case 336	:
		case 337	:
		case 338	:
			VPP_ApplyPresetToSignal( VPP85	);
 80063d4:	2054      	movs	r0, #84	; 0x54
 80063d6:	f7ff fa39 	bl	800584c <VPP_ApplyPresetToSignal>
			break;
 80063da:	e034      	b.n	8006446 <VPP_ModifySignalOutput+0x94a>
		case 339	:
		case 340	:
		case 341	:
		case 342	:
			VPP_ApplyPresetToSignal( VPP86	);
 80063dc:	2055      	movs	r0, #85	; 0x55
 80063de:	f7ff fa35 	bl	800584c <VPP_ApplyPresetToSignal>
			break;
 80063e2:	e030      	b.n	8006446 <VPP_ModifySignalOutput+0x94a>
		case 343	:
		case 344	:
		case 345	:
		case 346	:
			VPP_ApplyPresetToSignal( VPP87	);
 80063e4:	2056      	movs	r0, #86	; 0x56
 80063e6:	f7ff fa31 	bl	800584c <VPP_ApplyPresetToSignal>
			break;
 80063ea:	e02c      	b.n	8006446 <VPP_ModifySignalOutput+0x94a>
		case 347	:
		case 348	:
		case 349	:
		case 350	:
			VPP_ApplyPresetToSignal( VPP88	);
 80063ec:	2057      	movs	r0, #87	; 0x57
 80063ee:	f7ff fa2d 	bl	800584c <VPP_ApplyPresetToSignal>
			break;
 80063f2:	e028      	b.n	8006446 <VPP_ModifySignalOutput+0x94a>
		case 351	:
		case 352	:
		case 353	:
		case 354	:
			VPP_ApplyPresetToSignal( VPP89	);
 80063f4:	2058      	movs	r0, #88	; 0x58
 80063f6:	f7ff fa29 	bl	800584c <VPP_ApplyPresetToSignal>
			break;
 80063fa:	e024      	b.n	8006446 <VPP_ModifySignalOutput+0x94a>
		case 355	:
		case 356	:
		case 357	:
		case 358	:
			VPP_ApplyPresetToSignal( VPP90	);
 80063fc:	2059      	movs	r0, #89	; 0x59
 80063fe:	f7ff fa25 	bl	800584c <VPP_ApplyPresetToSignal>
			break;
 8006402:	e020      	b.n	8006446 <VPP_ModifySignalOutput+0x94a>
		case 359	:
		case 360	:
		case 361	:
		case 362	:
			VPP_ApplyPresetToSignal( VPP91	);
 8006404:	205a      	movs	r0, #90	; 0x5a
 8006406:	f7ff fa21 	bl	800584c <VPP_ApplyPresetToSignal>
			break;
 800640a:	e01c      	b.n	8006446 <VPP_ModifySignalOutput+0x94a>
		case 363	:
		case 364	:
		case 365	:
		case 366	:
			VPP_ApplyPresetToSignal( VPP92	);
 800640c:	205b      	movs	r0, #91	; 0x5b
 800640e:	f7ff fa1d 	bl	800584c <VPP_ApplyPresetToSignal>
			break;
 8006412:	e018      	b.n	8006446 <VPP_ModifySignalOutput+0x94a>
		case 367	:
		case 368	:
		case 369	:
		case 370	:
			VPP_ApplyPresetToSignal( VPP93	);
 8006414:	205c      	movs	r0, #92	; 0x5c
 8006416:	f7ff fa19 	bl	800584c <VPP_ApplyPresetToSignal>
			break;
 800641a:	e014      	b.n	8006446 <VPP_ModifySignalOutput+0x94a>
		case 371	:
		case 372	:
		case 373	:
		case 374	:
			VPP_ApplyPresetToSignal( VPP94	);
 800641c:	205d      	movs	r0, #93	; 0x5d
 800641e:	f7ff fa15 	bl	800584c <VPP_ApplyPresetToSignal>
			break;
 8006422:	e010      	b.n	8006446 <VPP_ModifySignalOutput+0x94a>
		case 375	:
		case 376	:
		case 377	:
		case 378	:
			VPP_ApplyPresetToSignal( VPP95	);
 8006424:	205e      	movs	r0, #94	; 0x5e
 8006426:	f7ff fa11 	bl	800584c <VPP_ApplyPresetToSignal>
			break;
 800642a:	e00c      	b.n	8006446 <VPP_ModifySignalOutput+0x94a>
		case 379	:
		case 380	:
		case 381	:
		case 382	:
			VPP_ApplyPresetToSignal( VPP96	);
 800642c:	205f      	movs	r0, #95	; 0x5f
 800642e:	f7ff fa0d 	bl	800584c <VPP_ApplyPresetToSignal>
			break;
 8006432:	e008      	b.n	8006446 <VPP_ModifySignalOutput+0x94a>
		case 383	:
		case 384	:
		case 385	:
		case 386	:
			VPP_ApplyPresetToSignal( VPP97	);
 8006434:	2060      	movs	r0, #96	; 0x60
 8006436:	f7ff fa09 	bl	800584c <VPP_ApplyPresetToSignal>
			break;
 800643a:	e004      	b.n	8006446 <VPP_ModifySignalOutput+0x94a>
		case 387	:
		case 388	:
		case 389	:
		case 390	:
			VPP_ApplyPresetToSignal( VPP98	);
 800643c:	2061      	movs	r0, #97	; 0x61
 800643e:	f7ff fa05 	bl	800584c <VPP_ApplyPresetToSignal>
			break;
 8006442:	e000      	b.n	8006446 <VPP_ModifySignalOutput+0x94a>

		default:
			break;
 8006444:	bf00      	nop
	}
}
 8006446:	bf00      	nop
 8006448:	3708      	adds	r7, #8
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}
 800644e:	bf00      	nop

08006450 <VPP_ModifySyncOutput>:

 *	@retval None
 *
 */
void VPP_ModifySyncOutput(uint16_t pEncoderValue)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b082      	sub	sp, #8
 8006454:	af00      	add	r7, sp, #0
 8006456:	4603      	mov	r3, r0
 8006458:	80fb      	strh	r3, [r7, #6]
	switch(pEncoderValue)
 800645a:	88fb      	ldrh	r3, [r7, #6]
 800645c:	f5b3 7fc3 	cmp.w	r3, #390	; 0x186
 8006460:	f200 849a 	bhi.w	8006d98 <VPP_ModifySyncOutput+0x948>
 8006464:	a201      	add	r2, pc, #4	; (adr r2, 800646c <VPP_ModifySyncOutput+0x1c>)
 8006466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800646a:	bf00      	nop
 800646c:	08006a89 	.word	0x08006a89
 8006470:	08006a89 	.word	0x08006a89
 8006474:	08006a89 	.word	0x08006a89
 8006478:	08006a91 	.word	0x08006a91
 800647c:	08006a91 	.word	0x08006a91
 8006480:	08006a91 	.word	0x08006a91
 8006484:	08006a91 	.word	0x08006a91
 8006488:	08006a99 	.word	0x08006a99
 800648c:	08006a99 	.word	0x08006a99
 8006490:	08006a99 	.word	0x08006a99
 8006494:	08006a99 	.word	0x08006a99
 8006498:	08006aa1 	.word	0x08006aa1
 800649c:	08006aa1 	.word	0x08006aa1
 80064a0:	08006aa1 	.word	0x08006aa1
 80064a4:	08006aa1 	.word	0x08006aa1
 80064a8:	08006aa9 	.word	0x08006aa9
 80064ac:	08006aa9 	.word	0x08006aa9
 80064b0:	08006aa9 	.word	0x08006aa9
 80064b4:	08006aa9 	.word	0x08006aa9
 80064b8:	08006ab1 	.word	0x08006ab1
 80064bc:	08006ab1 	.word	0x08006ab1
 80064c0:	08006ab1 	.word	0x08006ab1
 80064c4:	08006ab1 	.word	0x08006ab1
 80064c8:	08006ab9 	.word	0x08006ab9
 80064cc:	08006ab9 	.word	0x08006ab9
 80064d0:	08006ab9 	.word	0x08006ab9
 80064d4:	08006ab9 	.word	0x08006ab9
 80064d8:	08006ac1 	.word	0x08006ac1
 80064dc:	08006ac1 	.word	0x08006ac1
 80064e0:	08006ac1 	.word	0x08006ac1
 80064e4:	08006ac1 	.word	0x08006ac1
 80064e8:	08006ac9 	.word	0x08006ac9
 80064ec:	08006ac9 	.word	0x08006ac9
 80064f0:	08006ac9 	.word	0x08006ac9
 80064f4:	08006ac9 	.word	0x08006ac9
 80064f8:	08006ad1 	.word	0x08006ad1
 80064fc:	08006ad1 	.word	0x08006ad1
 8006500:	08006ad1 	.word	0x08006ad1
 8006504:	08006ad1 	.word	0x08006ad1
 8006508:	08006ad9 	.word	0x08006ad9
 800650c:	08006ad9 	.word	0x08006ad9
 8006510:	08006ad9 	.word	0x08006ad9
 8006514:	08006ad9 	.word	0x08006ad9
 8006518:	08006ae1 	.word	0x08006ae1
 800651c:	08006ae1 	.word	0x08006ae1
 8006520:	08006ae1 	.word	0x08006ae1
 8006524:	08006ae1 	.word	0x08006ae1
 8006528:	08006ae9 	.word	0x08006ae9
 800652c:	08006ae9 	.word	0x08006ae9
 8006530:	08006ae9 	.word	0x08006ae9
 8006534:	08006ae9 	.word	0x08006ae9
 8006538:	08006af1 	.word	0x08006af1
 800653c:	08006af1 	.word	0x08006af1
 8006540:	08006af1 	.word	0x08006af1
 8006544:	08006af1 	.word	0x08006af1
 8006548:	08006af9 	.word	0x08006af9
 800654c:	08006af9 	.word	0x08006af9
 8006550:	08006af9 	.word	0x08006af9
 8006554:	08006af9 	.word	0x08006af9
 8006558:	08006b01 	.word	0x08006b01
 800655c:	08006b01 	.word	0x08006b01
 8006560:	08006b01 	.word	0x08006b01
 8006564:	08006b01 	.word	0x08006b01
 8006568:	08006b09 	.word	0x08006b09
 800656c:	08006b09 	.word	0x08006b09
 8006570:	08006b09 	.word	0x08006b09
 8006574:	08006b09 	.word	0x08006b09
 8006578:	08006b11 	.word	0x08006b11
 800657c:	08006b11 	.word	0x08006b11
 8006580:	08006b11 	.word	0x08006b11
 8006584:	08006b11 	.word	0x08006b11
 8006588:	08006b19 	.word	0x08006b19
 800658c:	08006b19 	.word	0x08006b19
 8006590:	08006b19 	.word	0x08006b19
 8006594:	08006b19 	.word	0x08006b19
 8006598:	08006b21 	.word	0x08006b21
 800659c:	08006b21 	.word	0x08006b21
 80065a0:	08006b21 	.word	0x08006b21
 80065a4:	08006b21 	.word	0x08006b21
 80065a8:	08006b29 	.word	0x08006b29
 80065ac:	08006b29 	.word	0x08006b29
 80065b0:	08006b29 	.word	0x08006b29
 80065b4:	08006b29 	.word	0x08006b29
 80065b8:	08006b31 	.word	0x08006b31
 80065bc:	08006b31 	.word	0x08006b31
 80065c0:	08006b31 	.word	0x08006b31
 80065c4:	08006b31 	.word	0x08006b31
 80065c8:	08006b39 	.word	0x08006b39
 80065cc:	08006b39 	.word	0x08006b39
 80065d0:	08006b39 	.word	0x08006b39
 80065d4:	08006b39 	.word	0x08006b39
 80065d8:	08006b41 	.word	0x08006b41
 80065dc:	08006b41 	.word	0x08006b41
 80065e0:	08006b41 	.word	0x08006b41
 80065e4:	08006b41 	.word	0x08006b41
 80065e8:	08006b49 	.word	0x08006b49
 80065ec:	08006b49 	.word	0x08006b49
 80065f0:	08006b49 	.word	0x08006b49
 80065f4:	08006b49 	.word	0x08006b49
 80065f8:	08006b51 	.word	0x08006b51
 80065fc:	08006b51 	.word	0x08006b51
 8006600:	08006b51 	.word	0x08006b51
 8006604:	08006b51 	.word	0x08006b51
 8006608:	08006b59 	.word	0x08006b59
 800660c:	08006b59 	.word	0x08006b59
 8006610:	08006b59 	.word	0x08006b59
 8006614:	08006b59 	.word	0x08006b59
 8006618:	08006b61 	.word	0x08006b61
 800661c:	08006b61 	.word	0x08006b61
 8006620:	08006b61 	.word	0x08006b61
 8006624:	08006b61 	.word	0x08006b61
 8006628:	08006b69 	.word	0x08006b69
 800662c:	08006b69 	.word	0x08006b69
 8006630:	08006b69 	.word	0x08006b69
 8006634:	08006b69 	.word	0x08006b69
 8006638:	08006b71 	.word	0x08006b71
 800663c:	08006b71 	.word	0x08006b71
 8006640:	08006b71 	.word	0x08006b71
 8006644:	08006b71 	.word	0x08006b71
 8006648:	08006b79 	.word	0x08006b79
 800664c:	08006b79 	.word	0x08006b79
 8006650:	08006b79 	.word	0x08006b79
 8006654:	08006b79 	.word	0x08006b79
 8006658:	08006b81 	.word	0x08006b81
 800665c:	08006b81 	.word	0x08006b81
 8006660:	08006b81 	.word	0x08006b81
 8006664:	08006b81 	.word	0x08006b81
 8006668:	08006b89 	.word	0x08006b89
 800666c:	08006b89 	.word	0x08006b89
 8006670:	08006b89 	.word	0x08006b89
 8006674:	08006b89 	.word	0x08006b89
 8006678:	08006b91 	.word	0x08006b91
 800667c:	08006b91 	.word	0x08006b91
 8006680:	08006b91 	.word	0x08006b91
 8006684:	08006b91 	.word	0x08006b91
 8006688:	08006b99 	.word	0x08006b99
 800668c:	08006b99 	.word	0x08006b99
 8006690:	08006b99 	.word	0x08006b99
 8006694:	08006b99 	.word	0x08006b99
 8006698:	08006ba1 	.word	0x08006ba1
 800669c:	08006ba1 	.word	0x08006ba1
 80066a0:	08006ba1 	.word	0x08006ba1
 80066a4:	08006ba1 	.word	0x08006ba1
 80066a8:	08006ba9 	.word	0x08006ba9
 80066ac:	08006ba9 	.word	0x08006ba9
 80066b0:	08006ba9 	.word	0x08006ba9
 80066b4:	08006ba9 	.word	0x08006ba9
 80066b8:	08006bb1 	.word	0x08006bb1
 80066bc:	08006bb1 	.word	0x08006bb1
 80066c0:	08006bb1 	.word	0x08006bb1
 80066c4:	08006bb1 	.word	0x08006bb1
 80066c8:	08006bb9 	.word	0x08006bb9
 80066cc:	08006bb9 	.word	0x08006bb9
 80066d0:	08006bb9 	.word	0x08006bb9
 80066d4:	08006bb9 	.word	0x08006bb9
 80066d8:	08006bc1 	.word	0x08006bc1
 80066dc:	08006bc1 	.word	0x08006bc1
 80066e0:	08006bc1 	.word	0x08006bc1
 80066e4:	08006bc1 	.word	0x08006bc1
 80066e8:	08006bc9 	.word	0x08006bc9
 80066ec:	08006bc9 	.word	0x08006bc9
 80066f0:	08006bc9 	.word	0x08006bc9
 80066f4:	08006bc9 	.word	0x08006bc9
 80066f8:	08006bd1 	.word	0x08006bd1
 80066fc:	08006bd1 	.word	0x08006bd1
 8006700:	08006bd1 	.word	0x08006bd1
 8006704:	08006bd1 	.word	0x08006bd1
 8006708:	08006bd9 	.word	0x08006bd9
 800670c:	08006bd9 	.word	0x08006bd9
 8006710:	08006bd9 	.word	0x08006bd9
 8006714:	08006bd9 	.word	0x08006bd9
 8006718:	08006be1 	.word	0x08006be1
 800671c:	08006be1 	.word	0x08006be1
 8006720:	08006be1 	.word	0x08006be1
 8006724:	08006be1 	.word	0x08006be1
 8006728:	08006be9 	.word	0x08006be9
 800672c:	08006be9 	.word	0x08006be9
 8006730:	08006be9 	.word	0x08006be9
 8006734:	08006be9 	.word	0x08006be9
 8006738:	08006bf1 	.word	0x08006bf1
 800673c:	08006bf1 	.word	0x08006bf1
 8006740:	08006bf1 	.word	0x08006bf1
 8006744:	08006bf1 	.word	0x08006bf1
 8006748:	08006bf9 	.word	0x08006bf9
 800674c:	08006bf9 	.word	0x08006bf9
 8006750:	08006bf9 	.word	0x08006bf9
 8006754:	08006bf9 	.word	0x08006bf9
 8006758:	08006c01 	.word	0x08006c01
 800675c:	08006c01 	.word	0x08006c01
 8006760:	08006c01 	.word	0x08006c01
 8006764:	08006c01 	.word	0x08006c01
 8006768:	08006c09 	.word	0x08006c09
 800676c:	08006c09 	.word	0x08006c09
 8006770:	08006c09 	.word	0x08006c09
 8006774:	08006c09 	.word	0x08006c09
 8006778:	08006c11 	.word	0x08006c11
 800677c:	08006c11 	.word	0x08006c11
 8006780:	08006c11 	.word	0x08006c11
 8006784:	08006c11 	.word	0x08006c11
 8006788:	08006c19 	.word	0x08006c19
 800678c:	08006c19 	.word	0x08006c19
 8006790:	08006c19 	.word	0x08006c19
 8006794:	08006c19 	.word	0x08006c19
 8006798:	08006c21 	.word	0x08006c21
 800679c:	08006c21 	.word	0x08006c21
 80067a0:	08006c21 	.word	0x08006c21
 80067a4:	08006c21 	.word	0x08006c21
 80067a8:	08006c29 	.word	0x08006c29
 80067ac:	08006c29 	.word	0x08006c29
 80067b0:	08006c29 	.word	0x08006c29
 80067b4:	08006c29 	.word	0x08006c29
 80067b8:	08006c31 	.word	0x08006c31
 80067bc:	08006c31 	.word	0x08006c31
 80067c0:	08006c31 	.word	0x08006c31
 80067c4:	08006c31 	.word	0x08006c31
 80067c8:	08006c39 	.word	0x08006c39
 80067cc:	08006c39 	.word	0x08006c39
 80067d0:	08006c39 	.word	0x08006c39
 80067d4:	08006c39 	.word	0x08006c39
 80067d8:	08006c41 	.word	0x08006c41
 80067dc:	08006c41 	.word	0x08006c41
 80067e0:	08006c41 	.word	0x08006c41
 80067e4:	08006c41 	.word	0x08006c41
 80067e8:	08006c49 	.word	0x08006c49
 80067ec:	08006c49 	.word	0x08006c49
 80067f0:	08006c49 	.word	0x08006c49
 80067f4:	08006c49 	.word	0x08006c49
 80067f8:	08006c51 	.word	0x08006c51
 80067fc:	08006c51 	.word	0x08006c51
 8006800:	08006c51 	.word	0x08006c51
 8006804:	08006c51 	.word	0x08006c51
 8006808:	08006c59 	.word	0x08006c59
 800680c:	08006c59 	.word	0x08006c59
 8006810:	08006c59 	.word	0x08006c59
 8006814:	08006c59 	.word	0x08006c59
 8006818:	08006c61 	.word	0x08006c61
 800681c:	08006c61 	.word	0x08006c61
 8006820:	08006c61 	.word	0x08006c61
 8006824:	08006c61 	.word	0x08006c61
 8006828:	08006c69 	.word	0x08006c69
 800682c:	08006c69 	.word	0x08006c69
 8006830:	08006c69 	.word	0x08006c69
 8006834:	08006c69 	.word	0x08006c69
 8006838:	08006c71 	.word	0x08006c71
 800683c:	08006c71 	.word	0x08006c71
 8006840:	08006c71 	.word	0x08006c71
 8006844:	08006c71 	.word	0x08006c71
 8006848:	08006c79 	.word	0x08006c79
 800684c:	08006c79 	.word	0x08006c79
 8006850:	08006c79 	.word	0x08006c79
 8006854:	08006c79 	.word	0x08006c79
 8006858:	08006c81 	.word	0x08006c81
 800685c:	08006c81 	.word	0x08006c81
 8006860:	08006c81 	.word	0x08006c81
 8006864:	08006c81 	.word	0x08006c81
 8006868:	08006c89 	.word	0x08006c89
 800686c:	08006c89 	.word	0x08006c89
 8006870:	08006c89 	.word	0x08006c89
 8006874:	08006c89 	.word	0x08006c89
 8006878:	08006c91 	.word	0x08006c91
 800687c:	08006c91 	.word	0x08006c91
 8006880:	08006c91 	.word	0x08006c91
 8006884:	08006c91 	.word	0x08006c91
 8006888:	08006c99 	.word	0x08006c99
 800688c:	08006c99 	.word	0x08006c99
 8006890:	08006c99 	.word	0x08006c99
 8006894:	08006c99 	.word	0x08006c99
 8006898:	08006ca1 	.word	0x08006ca1
 800689c:	08006ca1 	.word	0x08006ca1
 80068a0:	08006ca1 	.word	0x08006ca1
 80068a4:	08006ca1 	.word	0x08006ca1
 80068a8:	08006ca9 	.word	0x08006ca9
 80068ac:	08006ca9 	.word	0x08006ca9
 80068b0:	08006ca9 	.word	0x08006ca9
 80068b4:	08006ca9 	.word	0x08006ca9
 80068b8:	08006cb1 	.word	0x08006cb1
 80068bc:	08006cb1 	.word	0x08006cb1
 80068c0:	08006cb1 	.word	0x08006cb1
 80068c4:	08006cb1 	.word	0x08006cb1
 80068c8:	08006cb9 	.word	0x08006cb9
 80068cc:	08006cb9 	.word	0x08006cb9
 80068d0:	08006cb9 	.word	0x08006cb9
 80068d4:	08006cb9 	.word	0x08006cb9
 80068d8:	08006cc1 	.word	0x08006cc1
 80068dc:	08006cc1 	.word	0x08006cc1
 80068e0:	08006cc1 	.word	0x08006cc1
 80068e4:	08006cc1 	.word	0x08006cc1
 80068e8:	08006cc9 	.word	0x08006cc9
 80068ec:	08006cc9 	.word	0x08006cc9
 80068f0:	08006cc9 	.word	0x08006cc9
 80068f4:	08006cc9 	.word	0x08006cc9
 80068f8:	08006cd1 	.word	0x08006cd1
 80068fc:	08006cd1 	.word	0x08006cd1
 8006900:	08006cd1 	.word	0x08006cd1
 8006904:	08006cd1 	.word	0x08006cd1
 8006908:	08006cd9 	.word	0x08006cd9
 800690c:	08006cd9 	.word	0x08006cd9
 8006910:	08006cd9 	.word	0x08006cd9
 8006914:	08006cd9 	.word	0x08006cd9
 8006918:	08006ce1 	.word	0x08006ce1
 800691c:	08006ce1 	.word	0x08006ce1
 8006920:	08006ce1 	.word	0x08006ce1
 8006924:	08006ce1 	.word	0x08006ce1
 8006928:	08006ce9 	.word	0x08006ce9
 800692c:	08006ce9 	.word	0x08006ce9
 8006930:	08006ce9 	.word	0x08006ce9
 8006934:	08006ce9 	.word	0x08006ce9
 8006938:	08006cf1 	.word	0x08006cf1
 800693c:	08006cf1 	.word	0x08006cf1
 8006940:	08006cf1 	.word	0x08006cf1
 8006944:	08006cf1 	.word	0x08006cf1
 8006948:	08006cf9 	.word	0x08006cf9
 800694c:	08006cf9 	.word	0x08006cf9
 8006950:	08006cf9 	.word	0x08006cf9
 8006954:	08006cf9 	.word	0x08006cf9
 8006958:	08006d01 	.word	0x08006d01
 800695c:	08006d01 	.word	0x08006d01
 8006960:	08006d01 	.word	0x08006d01
 8006964:	08006d01 	.word	0x08006d01
 8006968:	08006d09 	.word	0x08006d09
 800696c:	08006d09 	.word	0x08006d09
 8006970:	08006d09 	.word	0x08006d09
 8006974:	08006d09 	.word	0x08006d09
 8006978:	08006d11 	.word	0x08006d11
 800697c:	08006d11 	.word	0x08006d11
 8006980:	08006d11 	.word	0x08006d11
 8006984:	08006d11 	.word	0x08006d11
 8006988:	08006d19 	.word	0x08006d19
 800698c:	08006d19 	.word	0x08006d19
 8006990:	08006d19 	.word	0x08006d19
 8006994:	08006d19 	.word	0x08006d19
 8006998:	08006d21 	.word	0x08006d21
 800699c:	08006d21 	.word	0x08006d21
 80069a0:	08006d21 	.word	0x08006d21
 80069a4:	08006d21 	.word	0x08006d21
 80069a8:	08006d29 	.word	0x08006d29
 80069ac:	08006d29 	.word	0x08006d29
 80069b0:	08006d29 	.word	0x08006d29
 80069b4:	08006d29 	.word	0x08006d29
 80069b8:	08006d31 	.word	0x08006d31
 80069bc:	08006d31 	.word	0x08006d31
 80069c0:	08006d31 	.word	0x08006d31
 80069c4:	08006d31 	.word	0x08006d31
 80069c8:	08006d39 	.word	0x08006d39
 80069cc:	08006d39 	.word	0x08006d39
 80069d0:	08006d39 	.word	0x08006d39
 80069d4:	08006d39 	.word	0x08006d39
 80069d8:	08006d41 	.word	0x08006d41
 80069dc:	08006d41 	.word	0x08006d41
 80069e0:	08006d41 	.word	0x08006d41
 80069e4:	08006d41 	.word	0x08006d41
 80069e8:	08006d49 	.word	0x08006d49
 80069ec:	08006d49 	.word	0x08006d49
 80069f0:	08006d49 	.word	0x08006d49
 80069f4:	08006d49 	.word	0x08006d49
 80069f8:	08006d51 	.word	0x08006d51
 80069fc:	08006d51 	.word	0x08006d51
 8006a00:	08006d51 	.word	0x08006d51
 8006a04:	08006d51 	.word	0x08006d51
 8006a08:	08006d59 	.word	0x08006d59
 8006a0c:	08006d59 	.word	0x08006d59
 8006a10:	08006d59 	.word	0x08006d59
 8006a14:	08006d59 	.word	0x08006d59
 8006a18:	08006d61 	.word	0x08006d61
 8006a1c:	08006d61 	.word	0x08006d61
 8006a20:	08006d61 	.word	0x08006d61
 8006a24:	08006d61 	.word	0x08006d61
 8006a28:	08006d69 	.word	0x08006d69
 8006a2c:	08006d69 	.word	0x08006d69
 8006a30:	08006d69 	.word	0x08006d69
 8006a34:	08006d69 	.word	0x08006d69
 8006a38:	08006d71 	.word	0x08006d71
 8006a3c:	08006d71 	.word	0x08006d71
 8006a40:	08006d71 	.word	0x08006d71
 8006a44:	08006d71 	.word	0x08006d71
 8006a48:	08006d79 	.word	0x08006d79
 8006a4c:	08006d79 	.word	0x08006d79
 8006a50:	08006d79 	.word	0x08006d79
 8006a54:	08006d79 	.word	0x08006d79
 8006a58:	08006d81 	.word	0x08006d81
 8006a5c:	08006d81 	.word	0x08006d81
 8006a60:	08006d81 	.word	0x08006d81
 8006a64:	08006d81 	.word	0x08006d81
 8006a68:	08006d89 	.word	0x08006d89
 8006a6c:	08006d89 	.word	0x08006d89
 8006a70:	08006d89 	.word	0x08006d89
 8006a74:	08006d89 	.word	0x08006d89
 8006a78:	08006d91 	.word	0x08006d91
 8006a7c:	08006d91 	.word	0x08006d91
 8006a80:	08006d91 	.word	0x08006d91
 8006a84:	08006d91 	.word	0x08006d91
	{
		case 0	:
		case 1	:
		case 2	:
			VPP_ApplyPresetToSync( VPP01 );
 8006a88:	2000      	movs	r0, #0
 8006a8a:	f7fe ff0d 	bl	80058a8 <VPP_ApplyPresetToSync>
			break;
 8006a8e:	e184      	b.n	8006d9a <VPP_ModifySyncOutput+0x94a>
		case 3	:
		case 4	:
		case 5	:
		case 6	:
			VPP_ApplyPresetToSync( VPP02	);
 8006a90:	2001      	movs	r0, #1
 8006a92:	f7fe ff09 	bl	80058a8 <VPP_ApplyPresetToSync>
			break;
 8006a96:	e180      	b.n	8006d9a <VPP_ModifySyncOutput+0x94a>
		case 7	:
		case 8	:
		case 9	:
		case 10	:
			VPP_ApplyPresetToSync( VPP03	);
 8006a98:	2002      	movs	r0, #2
 8006a9a:	f7fe ff05 	bl	80058a8 <VPP_ApplyPresetToSync>
			break;
 8006a9e:	e17c      	b.n	8006d9a <VPP_ModifySyncOutput+0x94a>
		case 11	:
		case 12	:
		case 13	:
		case 14	:
			VPP_ApplyPresetToSync( VPP04	);
 8006aa0:	2003      	movs	r0, #3
 8006aa2:	f7fe ff01 	bl	80058a8 <VPP_ApplyPresetToSync>
			break;
 8006aa6:	e178      	b.n	8006d9a <VPP_ModifySyncOutput+0x94a>
		case 15	:
		case 16	:
		case 17	:
		case 18	:
			VPP_ApplyPresetToSync( VPP05	);
 8006aa8:	2004      	movs	r0, #4
 8006aaa:	f7fe fefd 	bl	80058a8 <VPP_ApplyPresetToSync>
			break;
 8006aae:	e174      	b.n	8006d9a <VPP_ModifySyncOutput+0x94a>
		case 19	:
		case 20	:
		case 21	:
		case 22	:
			VPP_ApplyPresetToSync( VPP06	);
 8006ab0:	2005      	movs	r0, #5
 8006ab2:	f7fe fef9 	bl	80058a8 <VPP_ApplyPresetToSync>
			break;
 8006ab6:	e170      	b.n	8006d9a <VPP_ModifySyncOutput+0x94a>
		case 23	:
		case 24	:
		case 25	:
		case 26	:
			VPP_ApplyPresetToSync( VPP07	);
 8006ab8:	2006      	movs	r0, #6
 8006aba:	f7fe fef5 	bl	80058a8 <VPP_ApplyPresetToSync>
			break;
 8006abe:	e16c      	b.n	8006d9a <VPP_ModifySyncOutput+0x94a>
		case 27	:
		case 28	:
		case 29	:
		case 30	:
			VPP_ApplyPresetToSync( VPP08	);
 8006ac0:	2007      	movs	r0, #7
 8006ac2:	f7fe fef1 	bl	80058a8 <VPP_ApplyPresetToSync>
			break;
 8006ac6:	e168      	b.n	8006d9a <VPP_ModifySyncOutput+0x94a>
		case 31	:
		case 32	:
		case 33	:
		case 34	:
			VPP_ApplyPresetToSync( VPP09	);
 8006ac8:	2008      	movs	r0, #8
 8006aca:	f7fe feed 	bl	80058a8 <VPP_ApplyPresetToSync>
			break;
 8006ace:	e164      	b.n	8006d9a <VPP_ModifySyncOutput+0x94a>
		case 35	:
		case 36	:
		case 37	:
		case 38	:
			VPP_ApplyPresetToSync( VPP10	);
 8006ad0:	2009      	movs	r0, #9
 8006ad2:	f7fe fee9 	bl	80058a8 <VPP_ApplyPresetToSync>
			break;
 8006ad6:	e160      	b.n	8006d9a <VPP_ModifySyncOutput+0x94a>
		case 39	:
		case 40	:
		case 41	:
		case 42	:
			VPP_ApplyPresetToSync( VPP11	);
 8006ad8:	200a      	movs	r0, #10
 8006ada:	f7fe fee5 	bl	80058a8 <VPP_ApplyPresetToSync>
			break;
 8006ade:	e15c      	b.n	8006d9a <VPP_ModifySyncOutput+0x94a>
		case 43	:
		case 44	:
		case 45	:
		case 46	:
			VPP_ApplyPresetToSync( VPP12	);
 8006ae0:	200b      	movs	r0, #11
 8006ae2:	f7fe fee1 	bl	80058a8 <VPP_ApplyPresetToSync>
			break;
 8006ae6:	e158      	b.n	8006d9a <VPP_ModifySyncOutput+0x94a>
		case 47	:
		case 48	:
		case 49	:
		case 50	:
			VPP_ApplyPresetToSync( VPP13	);
 8006ae8:	200c      	movs	r0, #12
 8006aea:	f7fe fedd 	bl	80058a8 <VPP_ApplyPresetToSync>
			break;
 8006aee:	e154      	b.n	8006d9a <VPP_ModifySyncOutput+0x94a>
		case 51	:
		case 52	:
		case 53	:
		case 54	:
			VPP_ApplyPresetToSync( VPP14	);
 8006af0:	200d      	movs	r0, #13
 8006af2:	f7fe fed9 	bl	80058a8 <VPP_ApplyPresetToSync>
			break;
 8006af6:	e150      	b.n	8006d9a <VPP_ModifySyncOutput+0x94a>
		case 55	:
		case 56	:
		case 57	:
		case 58	:
			VPP_ApplyPresetToSync( VPP15	);
 8006af8:	200e      	movs	r0, #14
 8006afa:	f7fe fed5 	bl	80058a8 <VPP_ApplyPresetToSync>
			break;
 8006afe:	e14c      	b.n	8006d9a <VPP_ModifySyncOutput+0x94a>
		case 59	:
		case 60	:
		case 61	:
		case 62	:
			VPP_ApplyPresetToSync( VPP16	);
 8006b00:	200f      	movs	r0, #15
 8006b02:	f7fe fed1 	bl	80058a8 <VPP_ApplyPresetToSync>
			break;
 8006b06:	e148      	b.n	8006d9a <VPP_ModifySyncOutput+0x94a>
		case 63	:
		case 64	:
		case 65	:
		case 66	:
			VPP_ApplyPresetToSync( VPP17	);
 8006b08:	2010      	movs	r0, #16
 8006b0a:	f7fe fecd 	bl	80058a8 <VPP_ApplyPresetToSync>
			break;
 8006b0e:	e144      	b.n	8006d9a <VPP_ModifySyncOutput+0x94a>
		case 67	:
		case 68	:
		case 69	:
		case 70	:
			VPP_ApplyPresetToSync( VPP18	);
 8006b10:	2011      	movs	r0, #17
 8006b12:	f7fe fec9 	bl	80058a8 <VPP_ApplyPresetToSync>
			break;
 8006b16:	e140      	b.n	8006d9a <VPP_ModifySyncOutput+0x94a>
		case 71	:
		case 72	:
		case 73	:
		case 74	:
			VPP_ApplyPresetToSync( VPP19	);
 8006b18:	2012      	movs	r0, #18
 8006b1a:	f7fe fec5 	bl	80058a8 <VPP_ApplyPresetToSync>
			break;
 8006b1e:	e13c      	b.n	8006d9a <VPP_ModifySyncOutput+0x94a>
		case 75	:
		case 76	:
		case 77	:
		case 78	:
			VPP_ApplyPresetToSync( VPP20	);
 8006b20:	2013      	movs	r0, #19
 8006b22:	f7fe fec1 	bl	80058a8 <VPP_ApplyPresetToSync>
			break;
 8006b26:	e138      	b.n	8006d9a <VPP_ModifySyncOutput+0x94a>
		case 79	:
		case 80	:
		case 81	:
		case 82	:
			VPP_ApplyPresetToSync( VPP21	);
 8006b28:	2014      	movs	r0, #20
 8006b2a:	f7fe febd 	bl	80058a8 <VPP_ApplyPresetToSync>
			break;
 8006b2e:	e134      	b.n	8006d9a <VPP_ModifySyncOutput+0x94a>
		case 83	:
		case 84	:
		case 85	:
		case 86	:
			VPP_ApplyPresetToSync( VPP22	);
 8006b30:	2015      	movs	r0, #21
 8006b32:	f7fe feb9 	bl	80058a8 <VPP_ApplyPresetToSync>
			break;
 8006b36:	e130      	b.n	8006d9a <VPP_ModifySyncOutput+0x94a>
		case 87	:
		case 88	:
		case 89	:
		case 90	:
			VPP_ApplyPresetToSync( VPP23	);
 8006b38:	2016      	movs	r0, #22
 8006b3a:	f7fe feb5 	bl	80058a8 <VPP_ApplyPresetToSync>
			break;
 8006b3e:	e12c      	b.n	8006d9a <VPP_ModifySyncOutput+0x94a>
		case 91	:
		case 92	:
		case 93	:
		case 94	:
			VPP_ApplyPresetToSync( VPP24	);
 8006b40:	2017      	movs	r0, #23
 8006b42:	f7fe feb1 	bl	80058a8 <VPP_ApplyPresetToSync>
			break;
 8006b46:	e128      	b.n	8006d9a <VPP_ModifySyncOutput+0x94a>
		case 95	:
		case 96	:
		case 97	:
		case 98	:
			VPP_ApplyPresetToSync( VPP25	);
 8006b48:	2018      	movs	r0, #24
 8006b4a:	f7fe fead 	bl	80058a8 <VPP_ApplyPresetToSync>
			break;
 8006b4e:	e124      	b.n	8006d9a <VPP_ModifySyncOutput+0x94a>
		case 99		:
		case 100	:
		case 101	:
		case 102	:
			VPP_ApplyPresetToSync( VPP26	);
 8006b50:	2019      	movs	r0, #25
 8006b52:	f7fe fea9 	bl	80058a8 <VPP_ApplyPresetToSync>
			break;
 8006b56:	e120      	b.n	8006d9a <VPP_ModifySyncOutput+0x94a>
		case 103	:
		case 104	:
		case 105	:
		case 106	:
			VPP_ApplyPresetToSync( VPP27	);
 8006b58:	201a      	movs	r0, #26
 8006b5a:	f7fe fea5 	bl	80058a8 <VPP_ApplyPresetToSync>
			break;
 8006b5e:	e11c      	b.n	8006d9a <VPP_ModifySyncOutput+0x94a>
		case 107	:
		case 108	:
		case 109	:
		case 110	:
			VPP_ApplyPresetToSync( VPP28	);
 8006b60:	201b      	movs	r0, #27
 8006b62:	f7fe fea1 	bl	80058a8 <VPP_ApplyPresetToSync>
			break;
 8006b66:	e118      	b.n	8006d9a <VPP_ModifySyncOutput+0x94a>
		case 111	:
		case 112	:
		case 113	:
		case 114	:
			VPP_ApplyPresetToSync( VPP29	);
 8006b68:	201c      	movs	r0, #28
 8006b6a:	f7fe fe9d 	bl	80058a8 <VPP_ApplyPresetToSync>
			break;
 8006b6e:	e114      	b.n	8006d9a <VPP_ModifySyncOutput+0x94a>
		case 115	:
		case 116	:
		case 117	:
		case 118	:
			VPP_ApplyPresetToSync( VPP30	);
 8006b70:	201d      	movs	r0, #29
 8006b72:	f7fe fe99 	bl	80058a8 <VPP_ApplyPresetToSync>
			break;
 8006b76:	e110      	b.n	8006d9a <VPP_ModifySyncOutput+0x94a>
		case 119	:
		case 120	:
		case 121	:
		case 122	:
			VPP_ApplyPresetToSync( VPP31	);
 8006b78:	201e      	movs	r0, #30
 8006b7a:	f7fe fe95 	bl	80058a8 <VPP_ApplyPresetToSync>
			break;
 8006b7e:	e10c      	b.n	8006d9a <VPP_ModifySyncOutput+0x94a>
		case 123	:
		case 124	:
		case 125	:
		case 126	:
			VPP_ApplyPresetToSync( VPP32	);
 8006b80:	201f      	movs	r0, #31
 8006b82:	f7fe fe91 	bl	80058a8 <VPP_ApplyPresetToSync>
			break;
 8006b86:	e108      	b.n	8006d9a <VPP_ModifySyncOutput+0x94a>
		case 127	:
		case 128	:
		case 129	:
		case 130	:
			VPP_ApplyPresetToSync( VPP33	);
 8006b88:	2020      	movs	r0, #32
 8006b8a:	f7fe fe8d 	bl	80058a8 <VPP_ApplyPresetToSync>
			break;
 8006b8e:	e104      	b.n	8006d9a <VPP_ModifySyncOutput+0x94a>
		case 131	:
		case 132	:
		case 133	:
		case 134	:
			VPP_ApplyPresetToSync( VPP34	);
 8006b90:	2021      	movs	r0, #33	; 0x21
 8006b92:	f7fe fe89 	bl	80058a8 <VPP_ApplyPresetToSync>
			break;
 8006b96:	e100      	b.n	8006d9a <VPP_ModifySyncOutput+0x94a>
		case 135	:
		case 136	:
		case 137	:
		case 138	:
			VPP_ApplyPresetToSync( VPP35	);
 8006b98:	2022      	movs	r0, #34	; 0x22
 8006b9a:	f7fe fe85 	bl	80058a8 <VPP_ApplyPresetToSync>
			break;
 8006b9e:	e0fc      	b.n	8006d9a <VPP_ModifySyncOutput+0x94a>
		case 139	:
		case 140	:
		case 141	:
		case 142	:
			VPP_ApplyPresetToSync( VPP36	);
 8006ba0:	2023      	movs	r0, #35	; 0x23
 8006ba2:	f7fe fe81 	bl	80058a8 <VPP_ApplyPresetToSync>
			break;
 8006ba6:	e0f8      	b.n	8006d9a <VPP_ModifySyncOutput+0x94a>
		case 143	:
		case 144	:
		case 145	:
		case 146	:
			VPP_ApplyPresetToSync( VPP37	);
 8006ba8:	2024      	movs	r0, #36	; 0x24
 8006baa:	f7fe fe7d 	bl	80058a8 <VPP_ApplyPresetToSync>
			break;
 8006bae:	e0f4      	b.n	8006d9a <VPP_ModifySyncOutput+0x94a>
		case 147	:
		case 148	:
		case 149	:
		case 150	:
			VPP_ApplyPresetToSync( VPP38	);
 8006bb0:	2025      	movs	r0, #37	; 0x25
 8006bb2:	f7fe fe79 	bl	80058a8 <VPP_ApplyPresetToSync>
			break;
 8006bb6:	e0f0      	b.n	8006d9a <VPP_ModifySyncOutput+0x94a>
		case 151	:
		case 152	:
		case 153	:
		case 154	:
			VPP_ApplyPresetToSync( VPP39	);
 8006bb8:	2026      	movs	r0, #38	; 0x26
 8006bba:	f7fe fe75 	bl	80058a8 <VPP_ApplyPresetToSync>
			break;
 8006bbe:	e0ec      	b.n	8006d9a <VPP_ModifySyncOutput+0x94a>
		case 155	:
		case 156	:
		case 157	:
		case 158	:
			VPP_ApplyPresetToSync( VPP40	);
 8006bc0:	2027      	movs	r0, #39	; 0x27
 8006bc2:	f7fe fe71 	bl	80058a8 <VPP_ApplyPresetToSync>
			break;
 8006bc6:	e0e8      	b.n	8006d9a <VPP_ModifySyncOutput+0x94a>
		case 159	:
		case 160	:
		case 161	:
		case 162	:
			VPP_ApplyPresetToSync( VPP41	);
 8006bc8:	2028      	movs	r0, #40	; 0x28
 8006bca:	f7fe fe6d 	bl	80058a8 <VPP_ApplyPresetToSync>
			break;
 8006bce:	e0e4      	b.n	8006d9a <VPP_ModifySyncOutput+0x94a>
		case 163	:
		case 164	:
		case 165	:
		case 166	:
			VPP_ApplyPresetToSync( VPP42	);
 8006bd0:	2029      	movs	r0, #41	; 0x29
 8006bd2:	f7fe fe69 	bl	80058a8 <VPP_ApplyPresetToSync>
			break;
 8006bd6:	e0e0      	b.n	8006d9a <VPP_ModifySyncOutput+0x94a>
		case 167	:
		case 168	:
		case 169	:
		case 170	:
			VPP_ApplyPresetToSync( VPP43	);
 8006bd8:	202a      	movs	r0, #42	; 0x2a
 8006bda:	f7fe fe65 	bl	80058a8 <VPP_ApplyPresetToSync>
			break;
 8006bde:	e0dc      	b.n	8006d9a <VPP_ModifySyncOutput+0x94a>
		case 171	:
		case 172	:
		case 173	:
		case 174	:
			VPP_ApplyPresetToSync( VPP44	);
 8006be0:	202b      	movs	r0, #43	; 0x2b
 8006be2:	f7fe fe61 	bl	80058a8 <VPP_ApplyPresetToSync>
			break;
 8006be6:	e0d8      	b.n	8006d9a <VPP_ModifySyncOutput+0x94a>
		case 175	:
		case 176	:
		case 177	:
		case 178	:
			VPP_ApplyPresetToSync( VPP45	);
 8006be8:	202c      	movs	r0, #44	; 0x2c
 8006bea:	f7fe fe5d 	bl	80058a8 <VPP_ApplyPresetToSync>
			break;
 8006bee:	e0d4      	b.n	8006d9a <VPP_ModifySyncOutput+0x94a>
		case 179	:
		case 180	:
		case 181	:
		case 182	:
			VPP_ApplyPresetToSync( VPP46	);
 8006bf0:	202d      	movs	r0, #45	; 0x2d
 8006bf2:	f7fe fe59 	bl	80058a8 <VPP_ApplyPresetToSync>
			break;
 8006bf6:	e0d0      	b.n	8006d9a <VPP_ModifySyncOutput+0x94a>
		case 183	:
		case 184	:
		case 185	:
		case 186	:
			VPP_ApplyPresetToSync( VPP47	);
 8006bf8:	202e      	movs	r0, #46	; 0x2e
 8006bfa:	f7fe fe55 	bl	80058a8 <VPP_ApplyPresetToSync>
			break;
 8006bfe:	e0cc      	b.n	8006d9a <VPP_ModifySyncOutput+0x94a>
		case 187	:
		case 188	:
		case 189	:
		case 190	:
			VPP_ApplyPresetToSync( VPP48	);
 8006c00:	202f      	movs	r0, #47	; 0x2f
 8006c02:	f7fe fe51 	bl	80058a8 <VPP_ApplyPresetToSync>
			break;
 8006c06:	e0c8      	b.n	8006d9a <VPP_ModifySyncOutput+0x94a>
		case 191	:
		case 192	:
		case 193	:
		case 194	:
			VPP_ApplyPresetToSync( VPP49	);
 8006c08:	2030      	movs	r0, #48	; 0x30
 8006c0a:	f7fe fe4d 	bl	80058a8 <VPP_ApplyPresetToSync>
			break;
 8006c0e:	e0c4      	b.n	8006d9a <VPP_ModifySyncOutput+0x94a>
		case 195	:
		case 196	:
		case 197	:
		case 198	:
			VPP_ApplyPresetToSync( VPP50	);
 8006c10:	2031      	movs	r0, #49	; 0x31
 8006c12:	f7fe fe49 	bl	80058a8 <VPP_ApplyPresetToSync>
			break;
 8006c16:	e0c0      	b.n	8006d9a <VPP_ModifySyncOutput+0x94a>
		case 199	:
		case 200	:
		case 201	:
		case 202	:
			VPP_ApplyPresetToSync( VPP51	);
 8006c18:	2032      	movs	r0, #50	; 0x32
 8006c1a:	f7fe fe45 	bl	80058a8 <VPP_ApplyPresetToSync>
			break;
 8006c1e:	e0bc      	b.n	8006d9a <VPP_ModifySyncOutput+0x94a>
		case 203	:
		case 204	:
		case 205	:
		case 206	:
			VPP_ApplyPresetToSync( VPP52	);
 8006c20:	2033      	movs	r0, #51	; 0x33
 8006c22:	f7fe fe41 	bl	80058a8 <VPP_ApplyPresetToSync>
			break;
 8006c26:	e0b8      	b.n	8006d9a <VPP_ModifySyncOutput+0x94a>
		case 207	:
		case 208	:
		case 209	:
		case 210	:
			VPP_ApplyPresetToSync( VPP53	);
 8006c28:	2034      	movs	r0, #52	; 0x34
 8006c2a:	f7fe fe3d 	bl	80058a8 <VPP_ApplyPresetToSync>
			break;
 8006c2e:	e0b4      	b.n	8006d9a <VPP_ModifySyncOutput+0x94a>
		case 211	:
		case 212	:
		case 213	:
		case 214	:
			VPP_ApplyPresetToSync( VPP54	);
 8006c30:	2035      	movs	r0, #53	; 0x35
 8006c32:	f7fe fe39 	bl	80058a8 <VPP_ApplyPresetToSync>
			break;
 8006c36:	e0b0      	b.n	8006d9a <VPP_ModifySyncOutput+0x94a>
		case 215	:
		case 216	:
		case 217	:
		case 218	:
			VPP_ApplyPresetToSync( VPP55	);
 8006c38:	2036      	movs	r0, #54	; 0x36
 8006c3a:	f7fe fe35 	bl	80058a8 <VPP_ApplyPresetToSync>
			break;
 8006c3e:	e0ac      	b.n	8006d9a <VPP_ModifySyncOutput+0x94a>
		case 219	:
		case 220	:
		case 221	:
		case 222	:
			VPP_ApplyPresetToSync( VPP56	);
 8006c40:	2037      	movs	r0, #55	; 0x37
 8006c42:	f7fe fe31 	bl	80058a8 <VPP_ApplyPresetToSync>
			break;
 8006c46:	e0a8      	b.n	8006d9a <VPP_ModifySyncOutput+0x94a>
		case 223	:
		case 224	:
		case 225	:
		case 226	:
			VPP_ApplyPresetToSync( VPP57	);
 8006c48:	2038      	movs	r0, #56	; 0x38
 8006c4a:	f7fe fe2d 	bl	80058a8 <VPP_ApplyPresetToSync>
			break;
 8006c4e:	e0a4      	b.n	8006d9a <VPP_ModifySyncOutput+0x94a>
		case 227	:
		case 228	:
		case 229	:
		case 230	:
			VPP_ApplyPresetToSync( VPP58	);
 8006c50:	2039      	movs	r0, #57	; 0x39
 8006c52:	f7fe fe29 	bl	80058a8 <VPP_ApplyPresetToSync>
			break;
 8006c56:	e0a0      	b.n	8006d9a <VPP_ModifySyncOutput+0x94a>
		case 231	:
		case 232	:
		case 233	:
		case 234	:
			VPP_ApplyPresetToSync( VPP59	);
 8006c58:	203a      	movs	r0, #58	; 0x3a
 8006c5a:	f7fe fe25 	bl	80058a8 <VPP_ApplyPresetToSync>
			break;
 8006c5e:	e09c      	b.n	8006d9a <VPP_ModifySyncOutput+0x94a>
		case 235	:
		case 236	:
		case 237	:
		case 238	:
			VPP_ApplyPresetToSync( VPP60	);
 8006c60:	203b      	movs	r0, #59	; 0x3b
 8006c62:	f7fe fe21 	bl	80058a8 <VPP_ApplyPresetToSync>
			break;
 8006c66:	e098      	b.n	8006d9a <VPP_ModifySyncOutput+0x94a>
		case 239	:
		case 240	:
		case 241	:
		case 242	:
			VPP_ApplyPresetToSync( VPP61	);
 8006c68:	203c      	movs	r0, #60	; 0x3c
 8006c6a:	f7fe fe1d 	bl	80058a8 <VPP_ApplyPresetToSync>
			break;
 8006c6e:	e094      	b.n	8006d9a <VPP_ModifySyncOutput+0x94a>
		case 243	:
		case 244	:
		case 245	:
		case 246	:
			VPP_ApplyPresetToSync( VPP62	);
 8006c70:	203d      	movs	r0, #61	; 0x3d
 8006c72:	f7fe fe19 	bl	80058a8 <VPP_ApplyPresetToSync>
			break;
 8006c76:	e090      	b.n	8006d9a <VPP_ModifySyncOutput+0x94a>
		case 247	:
		case 248	:
		case 249	:
		case 250	:
			VPP_ApplyPresetToSync( VPP63	);
 8006c78:	203e      	movs	r0, #62	; 0x3e
 8006c7a:	f7fe fe15 	bl	80058a8 <VPP_ApplyPresetToSync>
			break;
 8006c7e:	e08c      	b.n	8006d9a <VPP_ModifySyncOutput+0x94a>
		case 251	:
		case 252	:
		case 253	:
		case 254	:
			VPP_ApplyPresetToSync( VPP64	);
 8006c80:	203f      	movs	r0, #63	; 0x3f
 8006c82:	f7fe fe11 	bl	80058a8 <VPP_ApplyPresetToSync>
			break;
 8006c86:	e088      	b.n	8006d9a <VPP_ModifySyncOutput+0x94a>
		case 255	:
		case 256	:
		case 257	:
		case 258	:
			VPP_ApplyPresetToSync( VPP65	);
 8006c88:	2040      	movs	r0, #64	; 0x40
 8006c8a:	f7fe fe0d 	bl	80058a8 <VPP_ApplyPresetToSync>
			break;
 8006c8e:	e084      	b.n	8006d9a <VPP_ModifySyncOutput+0x94a>
		case 259	:
		case 260	:
		case 261	:
		case 262	:
			VPP_ApplyPresetToSync( VPP66	);
 8006c90:	2041      	movs	r0, #65	; 0x41
 8006c92:	f7fe fe09 	bl	80058a8 <VPP_ApplyPresetToSync>
			break;
 8006c96:	e080      	b.n	8006d9a <VPP_ModifySyncOutput+0x94a>
		case 263	:
		case 264	:
		case 265	:
		case 266	:
			VPP_ApplyPresetToSync( VPP67	);
 8006c98:	2042      	movs	r0, #66	; 0x42
 8006c9a:	f7fe fe05 	bl	80058a8 <VPP_ApplyPresetToSync>
			break;
 8006c9e:	e07c      	b.n	8006d9a <VPP_ModifySyncOutput+0x94a>
		case 267	:
		case 268	:
		case 269	:
		case 270	:
			VPP_ApplyPresetToSync( VPP68	);
 8006ca0:	2043      	movs	r0, #67	; 0x43
 8006ca2:	f7fe fe01 	bl	80058a8 <VPP_ApplyPresetToSync>
			break;
 8006ca6:	e078      	b.n	8006d9a <VPP_ModifySyncOutput+0x94a>
		case 271	:
		case 272	:
		case 273	:
		case 274	:
			VPP_ApplyPresetToSync( VPP69	);
 8006ca8:	2044      	movs	r0, #68	; 0x44
 8006caa:	f7fe fdfd 	bl	80058a8 <VPP_ApplyPresetToSync>
			break;
 8006cae:	e074      	b.n	8006d9a <VPP_ModifySyncOutput+0x94a>
		case 275	:
		case 276	:
		case 277	:
		case 278	:
			VPP_ApplyPresetToSync( VPP70	);
 8006cb0:	2045      	movs	r0, #69	; 0x45
 8006cb2:	f7fe fdf9 	bl	80058a8 <VPP_ApplyPresetToSync>
			break;
 8006cb6:	e070      	b.n	8006d9a <VPP_ModifySyncOutput+0x94a>
		case 279	:
		case 280	:
		case 281	:
		case 282	:
			VPP_ApplyPresetToSync( VPP71	);
 8006cb8:	2046      	movs	r0, #70	; 0x46
 8006cba:	f7fe fdf5 	bl	80058a8 <VPP_ApplyPresetToSync>
			break;
 8006cbe:	e06c      	b.n	8006d9a <VPP_ModifySyncOutput+0x94a>
		case 283	:
		case 284	:
		case 285	:
		case 286	:
			VPP_ApplyPresetToSync( VPP72	);
 8006cc0:	2047      	movs	r0, #71	; 0x47
 8006cc2:	f7fe fdf1 	bl	80058a8 <VPP_ApplyPresetToSync>
			break;
 8006cc6:	e068      	b.n	8006d9a <VPP_ModifySyncOutput+0x94a>
		case 287	:
		case 288	:
		case 289	:
		case 290	:
			VPP_ApplyPresetToSync( VPP73	);
 8006cc8:	2048      	movs	r0, #72	; 0x48
 8006cca:	f7fe fded 	bl	80058a8 <VPP_ApplyPresetToSync>
			break;
 8006cce:	e064      	b.n	8006d9a <VPP_ModifySyncOutput+0x94a>
		case 291	:
		case 292	:
		case 293	:
		case 294	:
			VPP_ApplyPresetToSync( VPP74	);
 8006cd0:	2049      	movs	r0, #73	; 0x49
 8006cd2:	f7fe fde9 	bl	80058a8 <VPP_ApplyPresetToSync>
			break;
 8006cd6:	e060      	b.n	8006d9a <VPP_ModifySyncOutput+0x94a>
		case 295	:
		case 296	:
		case 297	:
		case 298	:
			VPP_ApplyPresetToSync( VPP75	);
 8006cd8:	204a      	movs	r0, #74	; 0x4a
 8006cda:	f7fe fde5 	bl	80058a8 <VPP_ApplyPresetToSync>
			break;
 8006cde:	e05c      	b.n	8006d9a <VPP_ModifySyncOutput+0x94a>
		case 299	:
		case 300	:
		case 301	:
		case 302	:
			VPP_ApplyPresetToSync( VPP76	);
 8006ce0:	204b      	movs	r0, #75	; 0x4b
 8006ce2:	f7fe fde1 	bl	80058a8 <VPP_ApplyPresetToSync>
			break;
 8006ce6:	e058      	b.n	8006d9a <VPP_ModifySyncOutput+0x94a>
		case 303	:
		case 304	:
		case 305	:
		case 306	:
			VPP_ApplyPresetToSync( VPP77	);
 8006ce8:	204c      	movs	r0, #76	; 0x4c
 8006cea:	f7fe fddd 	bl	80058a8 <VPP_ApplyPresetToSync>
			break;
 8006cee:	e054      	b.n	8006d9a <VPP_ModifySyncOutput+0x94a>
		case 307	:
		case 308	:
		case 309	:
		case 310	:
			VPP_ApplyPresetToSync( VPP78	);
 8006cf0:	204d      	movs	r0, #77	; 0x4d
 8006cf2:	f7fe fdd9 	bl	80058a8 <VPP_ApplyPresetToSync>
			break;
 8006cf6:	e050      	b.n	8006d9a <VPP_ModifySyncOutput+0x94a>
		case 311	:
		case 312	:
		case 313	:
		case 314	:
			VPP_ApplyPresetToSync( VPP79	);
 8006cf8:	204e      	movs	r0, #78	; 0x4e
 8006cfa:	f7fe fdd5 	bl	80058a8 <VPP_ApplyPresetToSync>
			break;
 8006cfe:	e04c      	b.n	8006d9a <VPP_ModifySyncOutput+0x94a>
		case 315	:
		case 316	:
		case 317	:
		case 318	:
			VPP_ApplyPresetToSync( VPP80	);
 8006d00:	204f      	movs	r0, #79	; 0x4f
 8006d02:	f7fe fdd1 	bl	80058a8 <VPP_ApplyPresetToSync>
			break;
 8006d06:	e048      	b.n	8006d9a <VPP_ModifySyncOutput+0x94a>
		case 319	:
		case 320	:
		case 321	:
		case 322	:
			VPP_ApplyPresetToSync( VPP81	);
 8006d08:	2050      	movs	r0, #80	; 0x50
 8006d0a:	f7fe fdcd 	bl	80058a8 <VPP_ApplyPresetToSync>
			break;
 8006d0e:	e044      	b.n	8006d9a <VPP_ModifySyncOutput+0x94a>
		case 323	:
		case 324	:
		case 325	:
		case 326	:
			VPP_ApplyPresetToSync( VPP82	);
 8006d10:	2051      	movs	r0, #81	; 0x51
 8006d12:	f7fe fdc9 	bl	80058a8 <VPP_ApplyPresetToSync>
			break;
 8006d16:	e040      	b.n	8006d9a <VPP_ModifySyncOutput+0x94a>
		case 327	:
		case 328	:
		case 329	:
		case 330	:
			VPP_ApplyPresetToSync( VPP83	);
 8006d18:	2052      	movs	r0, #82	; 0x52
 8006d1a:	f7fe fdc5 	bl	80058a8 <VPP_ApplyPresetToSync>
			break;
 8006d1e:	e03c      	b.n	8006d9a <VPP_ModifySyncOutput+0x94a>
		case 331	:
		case 332	:
		case 333	:
		case 334	:
			VPP_ApplyPresetToSync( VPP84	);
 8006d20:	2053      	movs	r0, #83	; 0x53
 8006d22:	f7fe fdc1 	bl	80058a8 <VPP_ApplyPresetToSync>
			break;
 8006d26:	e038      	b.n	8006d9a <VPP_ModifySyncOutput+0x94a>
		case 335	:
		case 336	:
		case 337	:
		case 338	:
			VPP_ApplyPresetToSync( VPP85	);
 8006d28:	2054      	movs	r0, #84	; 0x54
 8006d2a:	f7fe fdbd 	bl	80058a8 <VPP_ApplyPresetToSync>
			break;
 8006d2e:	e034      	b.n	8006d9a <VPP_ModifySyncOutput+0x94a>
		case 339	:
		case 340	:
		case 341	:
		case 342	:
			VPP_ApplyPresetToSync( VPP86	);
 8006d30:	2055      	movs	r0, #85	; 0x55
 8006d32:	f7fe fdb9 	bl	80058a8 <VPP_ApplyPresetToSync>
			break;
 8006d36:	e030      	b.n	8006d9a <VPP_ModifySyncOutput+0x94a>
		case 343	:
		case 344	:
		case 345	:
		case 346	:
			VPP_ApplyPresetToSync( VPP87	);
 8006d38:	2056      	movs	r0, #86	; 0x56
 8006d3a:	f7fe fdb5 	bl	80058a8 <VPP_ApplyPresetToSync>
			break;
 8006d3e:	e02c      	b.n	8006d9a <VPP_ModifySyncOutput+0x94a>
		case 347	:
		case 348	:
		case 349	:
		case 350	:
			VPP_ApplyPresetToSync( VPP88	);
 8006d40:	2057      	movs	r0, #87	; 0x57
 8006d42:	f7fe fdb1 	bl	80058a8 <VPP_ApplyPresetToSync>
			break;
 8006d46:	e028      	b.n	8006d9a <VPP_ModifySyncOutput+0x94a>
		case 351	:
		case 352	:
		case 353	:
		case 354	:
			VPP_ApplyPresetToSync( VPP89	);
 8006d48:	2058      	movs	r0, #88	; 0x58
 8006d4a:	f7fe fdad 	bl	80058a8 <VPP_ApplyPresetToSync>
			break;
 8006d4e:	e024      	b.n	8006d9a <VPP_ModifySyncOutput+0x94a>
		case 355	:
		case 356	:
		case 357	:
		case 358	:
			VPP_ApplyPresetToSync( VPP90	);
 8006d50:	2059      	movs	r0, #89	; 0x59
 8006d52:	f7fe fda9 	bl	80058a8 <VPP_ApplyPresetToSync>
			break;
 8006d56:	e020      	b.n	8006d9a <VPP_ModifySyncOutput+0x94a>
		case 359	:
		case 360	:
		case 361	:
		case 362	:
			VPP_ApplyPresetToSync( VPP91	);
 8006d58:	205a      	movs	r0, #90	; 0x5a
 8006d5a:	f7fe fda5 	bl	80058a8 <VPP_ApplyPresetToSync>
			break;
 8006d5e:	e01c      	b.n	8006d9a <VPP_ModifySyncOutput+0x94a>
		case 363	:
		case 364	:
		case 365	:
		case 366	:
			VPP_ApplyPresetToSync( VPP92	);
 8006d60:	205b      	movs	r0, #91	; 0x5b
 8006d62:	f7fe fda1 	bl	80058a8 <VPP_ApplyPresetToSync>
			break;
 8006d66:	e018      	b.n	8006d9a <VPP_ModifySyncOutput+0x94a>
		case 367	:
		case 368	:
		case 369	:
		case 370	:
			VPP_ApplyPresetToSync( VPP93	);
 8006d68:	205c      	movs	r0, #92	; 0x5c
 8006d6a:	f7fe fd9d 	bl	80058a8 <VPP_ApplyPresetToSync>
			break;
 8006d6e:	e014      	b.n	8006d9a <VPP_ModifySyncOutput+0x94a>
		case 371	:
		case 372	:
		case 373	:
		case 374	:
			VPP_ApplyPresetToSync( VPP94	);
 8006d70:	205d      	movs	r0, #93	; 0x5d
 8006d72:	f7fe fd99 	bl	80058a8 <VPP_ApplyPresetToSync>
			break;
 8006d76:	e010      	b.n	8006d9a <VPP_ModifySyncOutput+0x94a>
		case 375	:
		case 376	:
		case 377	:
		case 378	:
			VPP_ApplyPresetToSync( VPP95	);
 8006d78:	205e      	movs	r0, #94	; 0x5e
 8006d7a:	f7fe fd95 	bl	80058a8 <VPP_ApplyPresetToSync>
			break;
 8006d7e:	e00c      	b.n	8006d9a <VPP_ModifySyncOutput+0x94a>
		case 379	:
		case 380	:
		case 381	:
		case 382	:
			VPP_ApplyPresetToSync( VPP96	);
 8006d80:	205f      	movs	r0, #95	; 0x5f
 8006d82:	f7fe fd91 	bl	80058a8 <VPP_ApplyPresetToSync>
			break;
 8006d86:	e008      	b.n	8006d9a <VPP_ModifySyncOutput+0x94a>
		case 383	:
		case 384	:
		case 385	:
		case 386	:
			VPP_ApplyPresetToSync( VPP97	);
 8006d88:	2060      	movs	r0, #96	; 0x60
 8006d8a:	f7fe fd8d 	bl	80058a8 <VPP_ApplyPresetToSync>
			break;
 8006d8e:	e004      	b.n	8006d9a <VPP_ModifySyncOutput+0x94a>
		case 387	:
		case 388	:
		case 389	:
		case 390	:
			VPP_ApplyPresetToSync( VPP98	);
 8006d90:	2061      	movs	r0, #97	; 0x61
 8006d92:	f7fe fd89 	bl	80058a8 <VPP_ApplyPresetToSync>
			break;
 8006d96:	e000      	b.n	8006d9a <VPP_ModifySyncOutput+0x94a>

		default:
			break;
 8006d98:	bf00      	nop
	}
}
 8006d9a:	bf00      	nop
 8006d9c:	3708      	adds	r7, #8
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}
 8006da2:	bf00      	nop

08006da4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b08c      	sub	sp, #48	; 0x30
 8006da8:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 8006daa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006dae:	2200      	movs	r2, #0
 8006db0:	601a      	str	r2, [r3, #0]
 8006db2:	605a      	str	r2, [r3, #4]
 8006db4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8006db6:	1d3b      	adds	r3, r7, #4
 8006db8:	2220      	movs	r2, #32
 8006dba:	2100      	movs	r1, #0
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f007 fdf5 	bl	800e9ac <memset>

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8006dc2:	4b32      	ldr	r3, [pc, #200]	; (8006e8c <MX_ADC1_Init+0xe8>)
 8006dc4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006dc8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8006dca:	4b30      	ldr	r3, [pc, #192]	; (8006e8c <MX_ADC1_Init+0xe8>)
 8006dcc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006dd0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8006dd2:	4b2e      	ldr	r3, [pc, #184]	; (8006e8c <MX_ADC1_Init+0xe8>)
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006dd8:	4b2c      	ldr	r3, [pc, #176]	; (8006e8c <MX_ADC1_Init+0xe8>)
 8006dda:	2200      	movs	r2, #0
 8006ddc:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8006dde:	4b2b      	ldr	r3, [pc, #172]	; (8006e8c <MX_ADC1_Init+0xe8>)
 8006de0:	2200      	movs	r2, #0
 8006de2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8006de4:	4b29      	ldr	r3, [pc, #164]	; (8006e8c <MX_ADC1_Init+0xe8>)
 8006de6:	2200      	movs	r2, #0
 8006de8:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006dea:	4b28      	ldr	r3, [pc, #160]	; (8006e8c <MX_ADC1_Init+0xe8>)
 8006dec:	2204      	movs	r2, #4
 8006dee:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8006df0:	4b26      	ldr	r3, [pc, #152]	; (8006e8c <MX_ADC1_Init+0xe8>)
 8006df2:	2200      	movs	r2, #0
 8006df4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8006df6:	4b25      	ldr	r3, [pc, #148]	; (8006e8c <MX_ADC1_Init+0xe8>)
 8006df8:	2201      	movs	r2, #1
 8006dfa:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8006dfc:	4b23      	ldr	r3, [pc, #140]	; (8006e8c <MX_ADC1_Init+0xe8>)
 8006dfe:	2201      	movs	r2, #1
 8006e00:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8006e02:	4b22      	ldr	r3, [pc, #136]	; (8006e8c <MX_ADC1_Init+0xe8>)
 8006e04:	2200      	movs	r2, #0
 8006e06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006e0a:	4b20      	ldr	r3, [pc, #128]	; (8006e8c <MX_ADC1_Init+0xe8>)
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006e10:	4b1e      	ldr	r3, [pc, #120]	; (8006e8c <MX_ADC1_Init+0xe8>)
 8006e12:	2200      	movs	r2, #0
 8006e14:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8006e16:	4b1d      	ldr	r3, [pc, #116]	; (8006e8c <MX_ADC1_Init+0xe8>)
 8006e18:	2201      	movs	r2, #1
 8006e1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8006e1e:	4b1b      	ldr	r3, [pc, #108]	; (8006e8c <MX_ADC1_Init+0xe8>)
 8006e20:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006e24:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8006e26:	4b19      	ldr	r3, [pc, #100]	; (8006e8c <MX_ADC1_Init+0xe8>)
 8006e28:	2200      	movs	r2, #0
 8006e2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8006e2e:	4817      	ldr	r0, [pc, #92]	; (8006e8c <MX_ADC1_Init+0xe8>)
 8006e30:	f001 fee2 	bl	8008bf8 <HAL_ADC_Init>
 8006e34:	4603      	mov	r3, r0
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d001      	beq.n	8006e3e <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 8006e3a:	f000 feaf 	bl	8007b9c <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8006e42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e46:	4619      	mov	r1, r3
 8006e48:	4810      	ldr	r0, [pc, #64]	; (8006e8c <MX_ADC1_Init+0xe8>)
 8006e4a:	f002 fc6b 	bl	8009724 <HAL_ADCEx_MultiModeConfigChannel>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d001      	beq.n	8006e58 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8006e54:	f000 fea2 	bl	8007b9c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8006e58:	4b0d      	ldr	r3, [pc, #52]	; (8006e90 <MX_ADC1_Init+0xec>)
 8006e5a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8006e5c:	2306      	movs	r3, #6
 8006e5e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8006e60:	2300      	movs	r3, #0
 8006e62:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8006e64:	237f      	movs	r3, #127	; 0x7f
 8006e66:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8006e68:	2304      	movs	r3, #4
 8006e6a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006e70:	1d3b      	adds	r3, r7, #4
 8006e72:	4619      	mov	r1, r3
 8006e74:	4805      	ldr	r0, [pc, #20]	; (8006e8c <MX_ADC1_Init+0xe8>)
 8006e76:	f002 f87f 	bl	8008f78 <HAL_ADC_ConfigChannel>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d001      	beq.n	8006e84 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8006e80:	f000 fe8c 	bl	8007b9c <Error_Handler>
  }

}
 8006e84:	bf00      	nop
 8006e86:	3730      	adds	r7, #48	; 0x30
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}
 8006e8c:	200024bc 	.word	0x200024bc
 8006e90:	0c900008 	.word	0x0c900008

08006e94 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b08a      	sub	sp, #40	; 0x28
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e9c:	f107 0314 	add.w	r3, r7, #20
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	601a      	str	r2, [r3, #0]
 8006ea4:	605a      	str	r2, [r3, #4]
 8006ea6:	609a      	str	r2, [r3, #8]
 8006ea8:	60da      	str	r2, [r3, #12]
 8006eaa:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006eb4:	d14f      	bne.n	8006f56 <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8006eb6:	4b2a      	ldr	r3, [pc, #168]	; (8006f60 <HAL_ADC_MspInit+0xcc>)
 8006eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006eba:	4a29      	ldr	r2, [pc, #164]	; (8006f60 <HAL_ADC_MspInit+0xcc>)
 8006ebc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006ec0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006ec2:	4b27      	ldr	r3, [pc, #156]	; (8006f60 <HAL_ADC_MspInit+0xcc>)
 8006ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ec6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006eca:	613b      	str	r3, [r7, #16]
 8006ecc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006ece:	4b24      	ldr	r3, [pc, #144]	; (8006f60 <HAL_ADC_MspInit+0xcc>)
 8006ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ed2:	4a23      	ldr	r2, [pc, #140]	; (8006f60 <HAL_ADC_MspInit+0xcc>)
 8006ed4:	f043 0301 	orr.w	r3, r3, #1
 8006ed8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006eda:	4b21      	ldr	r3, [pc, #132]	; (8006f60 <HAL_ADC_MspInit+0xcc>)
 8006edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ede:	f003 0301 	and.w	r3, r3, #1
 8006ee2:	60fb      	str	r3, [r7, #12]
 8006ee4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA2     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006ee6:	2304      	movs	r3, #4
 8006ee8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006eea:	2303      	movs	r3, #3
 8006eec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ef2:	f107 0314 	add.w	r3, r7, #20
 8006ef6:	4619      	mov	r1, r3
 8006ef8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006efc:	f003 fff4 	bl	800aee8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8006f00:	4b18      	ldr	r3, [pc, #96]	; (8006f64 <HAL_ADC_MspInit+0xd0>)
 8006f02:	4a19      	ldr	r2, [pc, #100]	; (8006f68 <HAL_ADC_MspInit+0xd4>)
 8006f04:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8006f06:	4b17      	ldr	r3, [pc, #92]	; (8006f64 <HAL_ADC_MspInit+0xd0>)
 8006f08:	2205      	movs	r2, #5
 8006f0a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006f0c:	4b15      	ldr	r3, [pc, #84]	; (8006f64 <HAL_ADC_MspInit+0xd0>)
 8006f0e:	2200      	movs	r2, #0
 8006f10:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006f12:	4b14      	ldr	r3, [pc, #80]	; (8006f64 <HAL_ADC_MspInit+0xd0>)
 8006f14:	2200      	movs	r2, #0
 8006f16:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8006f18:	4b12      	ldr	r3, [pc, #72]	; (8006f64 <HAL_ADC_MspInit+0xd0>)
 8006f1a:	2280      	movs	r2, #128	; 0x80
 8006f1c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006f1e:	4b11      	ldr	r3, [pc, #68]	; (8006f64 <HAL_ADC_MspInit+0xd0>)
 8006f20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f24:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006f26:	4b0f      	ldr	r3, [pc, #60]	; (8006f64 <HAL_ADC_MspInit+0xd0>)
 8006f28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f2c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8006f2e:	4b0d      	ldr	r3, [pc, #52]	; (8006f64 <HAL_ADC_MspInit+0xd0>)
 8006f30:	2220      	movs	r2, #32
 8006f32:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8006f34:	4b0b      	ldr	r3, [pc, #44]	; (8006f64 <HAL_ADC_MspInit+0xd0>)
 8006f36:	2200      	movs	r2, #0
 8006f38:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8006f3a:	480a      	ldr	r0, [pc, #40]	; (8006f64 <HAL_ADC_MspInit+0xd0>)
 8006f3c:	f003 fd08 	bl	800a950 <HAL_DMA_Init>
 8006f40:	4603      	mov	r3, r0
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d001      	beq.n	8006f4a <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 8006f46:	f000 fe29 	bl	8007b9c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	4a05      	ldr	r2, [pc, #20]	; (8006f64 <HAL_ADC_MspInit+0xd0>)
 8006f4e:	655a      	str	r2, [r3, #84]	; 0x54
 8006f50:	4a04      	ldr	r2, [pc, #16]	; (8006f64 <HAL_ADC_MspInit+0xd0>)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8006f56:	bf00      	nop
 8006f58:	3728      	adds	r7, #40	; 0x28
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}
 8006f5e:	bf00      	nop
 8006f60:	40021000 	.word	0x40021000
 8006f64:	20002528 	.word	0x20002528
 8006f68:	40020008 	.word	0x40020008

08006f6c <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	af00      	add	r7, sp, #0

  hcomp1.Instance = COMP1;
 8006f70:	4b0f      	ldr	r3, [pc, #60]	; (8006fb0 <MX_COMP1_Init+0x44>)
 8006f72:	4a10      	ldr	r2, [pc, #64]	; (8006fb4 <MX_COMP1_Init+0x48>)
 8006f74:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8006f76:	4b0e      	ldr	r3, [pc, #56]	; (8006fb0 <MX_COMP1_Init+0x44>)
 8006f78:	2200      	movs	r2, #0
 8006f7a:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 8006f7c:	4b0c      	ldr	r3, [pc, #48]	; (8006fb0 <MX_COMP1_Init+0x44>)
 8006f7e:	4a0e      	ldr	r2, [pc, #56]	; (8006fb8 <MX_COMP1_Init+0x4c>)
 8006f80:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8006f82:	4b0b      	ldr	r3, [pc, #44]	; (8006fb0 <MX_COMP1_Init+0x44>)
 8006f84:	2200      	movs	r2, #0
 8006f86:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8006f88:	4b09      	ldr	r3, [pc, #36]	; (8006fb0 <MX_COMP1_Init+0x44>)
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8006f8e:	4b08      	ldr	r3, [pc, #32]	; (8006fb0 <MX_COMP1_Init+0x44>)
 8006f90:	2200      	movs	r2, #0
 8006f92:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8006f94:	4b06      	ldr	r3, [pc, #24]	; (8006fb0 <MX_COMP1_Init+0x44>)
 8006f96:	2200      	movs	r2, #0
 8006f98:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8006f9a:	4805      	ldr	r0, [pc, #20]	; (8006fb0 <MX_COMP1_Init+0x44>)
 8006f9c:	f002 fe16 	bl	8009bcc <HAL_COMP_Init>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d001      	beq.n	8006faa <MX_COMP1_Init+0x3e>
  {
    Error_Handler();
 8006fa6:	f000 fdf9 	bl	8007b9c <Error_Handler>
  }

}
 8006faa:	bf00      	nop
 8006fac:	bd80      	pop	{r7, pc}
 8006fae:	bf00      	nop
 8006fb0:	20002588 	.word	0x20002588
 8006fb4:	40010200 	.word	0x40010200
 8006fb8:	00800030 	.word	0x00800030

08006fbc <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b088      	sub	sp, #32
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006fc4:	f107 030c 	add.w	r3, r7, #12
 8006fc8:	2200      	movs	r2, #0
 8006fca:	601a      	str	r2, [r3, #0]
 8006fcc:	605a      	str	r2, [r3, #4]
 8006fce:	609a      	str	r2, [r3, #8]
 8006fd0:	60da      	str	r2, [r3, #12]
 8006fd2:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a0f      	ldr	r2, [pc, #60]	; (8007018 <HAL_COMP_MspInit+0x5c>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d118      	bne.n	8007010 <HAL_COMP_MspInit+0x54>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006fde:	4b0f      	ldr	r3, [pc, #60]	; (800701c <HAL_COMP_MspInit+0x60>)
 8006fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fe2:	4a0e      	ldr	r2, [pc, #56]	; (800701c <HAL_COMP_MspInit+0x60>)
 8006fe4:	f043 0301 	orr.w	r3, r3, #1
 8006fe8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006fea:	4b0c      	ldr	r3, [pc, #48]	; (800701c <HAL_COMP_MspInit+0x60>)
 8006fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fee:	f003 0301 	and.w	r3, r3, #1
 8006ff2:	60bb      	str	r3, [r7, #8]
 8006ff4:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration    
    PA1     ------> COMP1_INP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8006ff6:	2302      	movs	r3, #2
 8006ff8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006ffa:	2303      	movs	r3, #3
 8006ffc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ffe:	2300      	movs	r3, #0
 8007000:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007002:	f107 030c 	add.w	r3, r7, #12
 8007006:	4619      	mov	r1, r3
 8007008:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800700c:	f003 ff6c 	bl	800aee8 <HAL_GPIO_Init>

  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 8007010:	bf00      	nop
 8007012:	3720      	adds	r7, #32
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}
 8007018:	40010200 	.word	0x40010200
 800701c:	40021000 	.word	0x40021000

08007020 <MX_DAC1_Init>:
DMA_HandleTypeDef hdma_dac1_ch1;
DMA_HandleTypeDef hdma_dac2_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b08c      	sub	sp, #48	; 0x30
 8007024:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8007026:	463b      	mov	r3, r7
 8007028:	2230      	movs	r2, #48	; 0x30
 800702a:	2100      	movs	r1, #0
 800702c:	4618      	mov	r0, r3
 800702e:	f007 fcbd 	bl	800e9ac <memset>

  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 8007032:	4b1e      	ldr	r3, [pc, #120]	; (80070ac <MX_DAC1_Init+0x8c>)
 8007034:	4a1e      	ldr	r2, [pc, #120]	; (80070b0 <MX_DAC1_Init+0x90>)
 8007036:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8007038:	481c      	ldr	r0, [pc, #112]	; (80070ac <MX_DAC1_Init+0x8c>)
 800703a:	f003 f86a 	bl	800a112 <HAL_DAC_Init>
 800703e:	4603      	mov	r3, r0
 8007040:	2b00      	cmp	r3, #0
 8007042:	d001      	beq.n	8007048 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8007044:	f000 fdaa 	bl	8007b9c <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8007048:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800704c:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 800704e:	2300      	movs	r3, #0
 8007050:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8007052:	2300      	movs	r3, #0
 8007054:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8007056:	2300      	movs	r3, #0
 8007058:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 800705a:	2306      	movs	r3, #6
 800705c:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 800705e:	2300      	movs	r3, #0
 8007060:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8007062:	2300      	movs	r3, #0
 8007064:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8007066:	2301      	movs	r3, #1
 8007068:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800706a:	2300      	movs	r3, #0
 800706c:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800706e:	463b      	mov	r3, r7
 8007070:	2200      	movs	r2, #0
 8007072:	4619      	mov	r1, r3
 8007074:	480d      	ldr	r0, [pc, #52]	; (80070ac <MX_DAC1_Init+0x8c>)
 8007076:	f003 fa35 	bl	800a4e4 <HAL_DAC_ConfigChannel>
 800707a:	4603      	mov	r3, r0
 800707c:	2b00      	cmp	r3, #0
 800707e:	d001      	beq.n	8007084 <MX_DAC1_Init+0x64>
  {
    Error_Handler();
 8007080:	f000 fd8c 	bl	8007b9c <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8007084:	2300      	movs	r3, #0
 8007086:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8007088:	2301      	movs	r3, #1
 800708a:	61bb      	str	r3, [r7, #24]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800708c:	463b      	mov	r3, r7
 800708e:	2210      	movs	r2, #16
 8007090:	4619      	mov	r1, r3
 8007092:	4806      	ldr	r0, [pc, #24]	; (80070ac <MX_DAC1_Init+0x8c>)
 8007094:	f003 fa26 	bl	800a4e4 <HAL_DAC_ConfigChannel>
 8007098:	4603      	mov	r3, r0
 800709a:	2b00      	cmp	r3, #0
 800709c:	d001      	beq.n	80070a2 <MX_DAC1_Init+0x82>
  {
    Error_Handler();
 800709e:	f000 fd7d 	bl	8007b9c <Error_Handler>
  }

}
 80070a2:	bf00      	nop
 80070a4:	3730      	adds	r7, #48	; 0x30
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}
 80070aa:	bf00      	nop
 80070ac:	200025c0 	.word	0x200025c0
 80070b0:	50000800 	.word	0x50000800

080070b4 <MX_DAC2_Init>:
/* DAC2 init function */
void MX_DAC2_Init(void)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b08c      	sub	sp, #48	; 0x30
 80070b8:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 80070ba:	463b      	mov	r3, r7
 80070bc:	2230      	movs	r2, #48	; 0x30
 80070be:	2100      	movs	r1, #0
 80070c0:	4618      	mov	r0, r3
 80070c2:	f007 fc73 	bl	800e9ac <memset>

  /** DAC Initialization 
  */
  hdac2.Instance = DAC2;
 80070c6:	4b16      	ldr	r3, [pc, #88]	; (8007120 <MX_DAC2_Init+0x6c>)
 80070c8:	4a16      	ldr	r2, [pc, #88]	; (8007124 <MX_DAC2_Init+0x70>)
 80070ca:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 80070cc:	4814      	ldr	r0, [pc, #80]	; (8007120 <MX_DAC2_Init+0x6c>)
 80070ce:	f003 f820 	bl	800a112 <HAL_DAC_Init>
 80070d2:	4603      	mov	r3, r0
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d001      	beq.n	80070dc <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 80070d8:	f000 fd60 	bl	8007b9c <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80070dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80070e0:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80070e2:	2300      	movs	r3, #0
 80070e4:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80070e6:	2300      	movs	r3, #0
 80070e8:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80070ea:	2300      	movs	r3, #0
 80070ec:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 80070ee:	2306      	movs	r3, #6
 80070f0:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80070f2:	2300      	movs	r3, #0
 80070f4:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80070f6:	2300      	movs	r3, #0
 80070f8:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80070fa:	2301      	movs	r3, #1
 80070fc:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80070fe:	2300      	movs	r3, #0
 8007100:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8007102:	463b      	mov	r3, r7
 8007104:	2200      	movs	r2, #0
 8007106:	4619      	mov	r1, r3
 8007108:	4805      	ldr	r0, [pc, #20]	; (8007120 <MX_DAC2_Init+0x6c>)
 800710a:	f003 f9eb 	bl	800a4e4 <HAL_DAC_ConfigChannel>
 800710e:	4603      	mov	r3, r0
 8007110:	2b00      	cmp	r3, #0
 8007112:	d001      	beq.n	8007118 <MX_DAC2_Init+0x64>
  {
    Error_Handler();
 8007114:	f000 fd42 	bl	8007b9c <Error_Handler>
  }

}
 8007118:	bf00      	nop
 800711a:	3730      	adds	r7, #48	; 0x30
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}
 8007120:	200025ac 	.word	0x200025ac
 8007124:	50000c00 	.word	0x50000c00

08007128 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b08c      	sub	sp, #48	; 0x30
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007130:	f107 031c 	add.w	r3, r7, #28
 8007134:	2200      	movs	r2, #0
 8007136:	601a      	str	r2, [r3, #0]
 8007138:	605a      	str	r2, [r3, #4]
 800713a:	609a      	str	r2, [r3, #8]
 800713c:	60da      	str	r2, [r3, #12]
 800713e:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a56      	ldr	r2, [pc, #344]	; (80072a0 <HAL_DAC_MspInit+0x178>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d150      	bne.n	80071ec <HAL_DAC_MspInit+0xc4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800714a:	4b56      	ldr	r3, [pc, #344]	; (80072a4 <HAL_DAC_MspInit+0x17c>)
 800714c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800714e:	4a55      	ldr	r2, [pc, #340]	; (80072a4 <HAL_DAC_MspInit+0x17c>)
 8007150:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007154:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007156:	4b53      	ldr	r3, [pc, #332]	; (80072a4 <HAL_DAC_MspInit+0x17c>)
 8007158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800715a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800715e:	61bb      	str	r3, [r7, #24]
 8007160:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007162:	4b50      	ldr	r3, [pc, #320]	; (80072a4 <HAL_DAC_MspInit+0x17c>)
 8007164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007166:	4a4f      	ldr	r2, [pc, #316]	; (80072a4 <HAL_DAC_MspInit+0x17c>)
 8007168:	f043 0301 	orr.w	r3, r3, #1
 800716c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800716e:	4b4d      	ldr	r3, [pc, #308]	; (80072a4 <HAL_DAC_MspInit+0x17c>)
 8007170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007172:	f003 0301 	and.w	r3, r3, #1
 8007176:	617b      	str	r3, [r7, #20]
 8007178:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800717a:	2330      	movs	r3, #48	; 0x30
 800717c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800717e:	2303      	movs	r3, #3
 8007180:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007182:	2300      	movs	r3, #0
 8007184:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007186:	f107 031c 	add.w	r3, r7, #28
 800718a:	4619      	mov	r1, r3
 800718c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007190:	f003 feaa 	bl	800aee8 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel2;
 8007194:	4b44      	ldr	r3, [pc, #272]	; (80072a8 <HAL_DAC_MspInit+0x180>)
 8007196:	4a45      	ldr	r2, [pc, #276]	; (80072ac <HAL_DAC_MspInit+0x184>)
 8007198:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 800719a:	4b43      	ldr	r3, [pc, #268]	; (80072a8 <HAL_DAC_MspInit+0x180>)
 800719c:	2206      	movs	r2, #6
 800719e:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80071a0:	4b41      	ldr	r3, [pc, #260]	; (80072a8 <HAL_DAC_MspInit+0x180>)
 80071a2:	2210      	movs	r2, #16
 80071a4:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80071a6:	4b40      	ldr	r3, [pc, #256]	; (80072a8 <HAL_DAC_MspInit+0x180>)
 80071a8:	2200      	movs	r2, #0
 80071aa:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80071ac:	4b3e      	ldr	r3, [pc, #248]	; (80072a8 <HAL_DAC_MspInit+0x180>)
 80071ae:	2280      	movs	r2, #128	; 0x80
 80071b0:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80071b2:	4b3d      	ldr	r3, [pc, #244]	; (80072a8 <HAL_DAC_MspInit+0x180>)
 80071b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80071b8:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80071ba:	4b3b      	ldr	r3, [pc, #236]	; (80072a8 <HAL_DAC_MspInit+0x180>)
 80071bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80071c0:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 80071c2:	4b39      	ldr	r3, [pc, #228]	; (80072a8 <HAL_DAC_MspInit+0x180>)
 80071c4:	2220      	movs	r2, #32
 80071c6:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80071c8:	4b37      	ldr	r3, [pc, #220]	; (80072a8 <HAL_DAC_MspInit+0x180>)
 80071ca:	2200      	movs	r2, #0
 80071cc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80071ce:	4836      	ldr	r0, [pc, #216]	; (80072a8 <HAL_DAC_MspInit+0x180>)
 80071d0:	f003 fbbe 	bl	800a950 <HAL_DMA_Init>
 80071d4:	4603      	mov	r3, r0
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d001      	beq.n	80071de <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 80071da:	f000 fcdf 	bl	8007b9c <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	4a31      	ldr	r2, [pc, #196]	; (80072a8 <HAL_DAC_MspInit+0x180>)
 80071e2:	609a      	str	r2, [r3, #8]
 80071e4:	4a30      	ldr	r2, [pc, #192]	; (80072a8 <HAL_DAC_MspInit+0x180>)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }
}
 80071ea:	e054      	b.n	8007296 <HAL_DAC_MspInit+0x16e>
  else if(dacHandle->Instance==DAC2)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a2f      	ldr	r2, [pc, #188]	; (80072b0 <HAL_DAC_MspInit+0x188>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d14f      	bne.n	8007296 <HAL_DAC_MspInit+0x16e>
    __HAL_RCC_DAC2_CLK_ENABLE();
 80071f6:	4b2b      	ldr	r3, [pc, #172]	; (80072a4 <HAL_DAC_MspInit+0x17c>)
 80071f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071fa:	4a2a      	ldr	r2, [pc, #168]	; (80072a4 <HAL_DAC_MspInit+0x17c>)
 80071fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007200:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007202:	4b28      	ldr	r3, [pc, #160]	; (80072a4 <HAL_DAC_MspInit+0x17c>)
 8007204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800720a:	613b      	str	r3, [r7, #16]
 800720c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800720e:	4b25      	ldr	r3, [pc, #148]	; (80072a4 <HAL_DAC_MspInit+0x17c>)
 8007210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007212:	4a24      	ldr	r2, [pc, #144]	; (80072a4 <HAL_DAC_MspInit+0x17c>)
 8007214:	f043 0301 	orr.w	r3, r3, #1
 8007218:	64d3      	str	r3, [r2, #76]	; 0x4c
 800721a:	4b22      	ldr	r3, [pc, #136]	; (80072a4 <HAL_DAC_MspInit+0x17c>)
 800721c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800721e:	f003 0301 	and.w	r3, r3, #1
 8007222:	60fb      	str	r3, [r7, #12]
 8007224:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8007226:	2340      	movs	r3, #64	; 0x40
 8007228:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800722a:	2303      	movs	r3, #3
 800722c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800722e:	2300      	movs	r3, #0
 8007230:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007232:	f107 031c 	add.w	r3, r7, #28
 8007236:	4619      	mov	r1, r3
 8007238:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800723c:	f003 fe54 	bl	800aee8 <HAL_GPIO_Init>
    hdma_dac2_ch1.Instance = DMA1_Channel3;
 8007240:	4b1c      	ldr	r3, [pc, #112]	; (80072b4 <HAL_DAC_MspInit+0x18c>)
 8007242:	4a1d      	ldr	r2, [pc, #116]	; (80072b8 <HAL_DAC_MspInit+0x190>)
 8007244:	601a      	str	r2, [r3, #0]
    hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 8007246:	4b1b      	ldr	r3, [pc, #108]	; (80072b4 <HAL_DAC_MspInit+0x18c>)
 8007248:	2229      	movs	r2, #41	; 0x29
 800724a:	605a      	str	r2, [r3, #4]
    hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800724c:	4b19      	ldr	r3, [pc, #100]	; (80072b4 <HAL_DAC_MspInit+0x18c>)
 800724e:	2210      	movs	r2, #16
 8007250:	609a      	str	r2, [r3, #8]
    hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8007252:	4b18      	ldr	r3, [pc, #96]	; (80072b4 <HAL_DAC_MspInit+0x18c>)
 8007254:	2200      	movs	r2, #0
 8007256:	60da      	str	r2, [r3, #12]
    hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8007258:	4b16      	ldr	r3, [pc, #88]	; (80072b4 <HAL_DAC_MspInit+0x18c>)
 800725a:	2280      	movs	r2, #128	; 0x80
 800725c:	611a      	str	r2, [r3, #16]
    hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800725e:	4b15      	ldr	r3, [pc, #84]	; (80072b4 <HAL_DAC_MspInit+0x18c>)
 8007260:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007264:	615a      	str	r2, [r3, #20]
    hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8007266:	4b13      	ldr	r3, [pc, #76]	; (80072b4 <HAL_DAC_MspInit+0x18c>)
 8007268:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800726c:	619a      	str	r2, [r3, #24]
    hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 800726e:	4b11      	ldr	r3, [pc, #68]	; (80072b4 <HAL_DAC_MspInit+0x18c>)
 8007270:	2220      	movs	r2, #32
 8007272:	61da      	str	r2, [r3, #28]
    hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8007274:	4b0f      	ldr	r3, [pc, #60]	; (80072b4 <HAL_DAC_MspInit+0x18c>)
 8007276:	2200      	movs	r2, #0
 8007278:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac2_ch1) != HAL_OK)
 800727a:	480e      	ldr	r0, [pc, #56]	; (80072b4 <HAL_DAC_MspInit+0x18c>)
 800727c:	f003 fb68 	bl	800a950 <HAL_DMA_Init>
 8007280:	4603      	mov	r3, r0
 8007282:	2b00      	cmp	r3, #0
 8007284:	d001      	beq.n	800728a <HAL_DAC_MspInit+0x162>
      Error_Handler();
 8007286:	f000 fc89 	bl	8007b9c <Error_Handler>
    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac2_ch1);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	4a09      	ldr	r2, [pc, #36]	; (80072b4 <HAL_DAC_MspInit+0x18c>)
 800728e:	609a      	str	r2, [r3, #8]
 8007290:	4a08      	ldr	r2, [pc, #32]	; (80072b4 <HAL_DAC_MspInit+0x18c>)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6293      	str	r3, [r2, #40]	; 0x28
}
 8007296:	bf00      	nop
 8007298:	3730      	adds	r7, #48	; 0x30
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}
 800729e:	bf00      	nop
 80072a0:	50000800 	.word	0x50000800
 80072a4:	40021000 	.word	0x40021000
 80072a8:	200025d4 	.word	0x200025d4
 80072ac:	4002001c 	.word	0x4002001c
 80072b0:	50000c00 	.word	0x50000c00
 80072b4:	20002634 	.word	0x20002634
 80072b8:	40020030 	.word	0x40020030

080072bc <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b082      	sub	sp, #8
 80072c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80072c2:	4b1a      	ldr	r3, [pc, #104]	; (800732c <MX_DMA_Init+0x70>)
 80072c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072c6:	4a19      	ldr	r2, [pc, #100]	; (800732c <MX_DMA_Init+0x70>)
 80072c8:	f043 0304 	orr.w	r3, r3, #4
 80072cc:	6493      	str	r3, [r2, #72]	; 0x48
 80072ce:	4b17      	ldr	r3, [pc, #92]	; (800732c <MX_DMA_Init+0x70>)
 80072d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072d2:	f003 0304 	and.w	r3, r3, #4
 80072d6:	607b      	str	r3, [r7, #4]
 80072d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80072da:	4b14      	ldr	r3, [pc, #80]	; (800732c <MX_DMA_Init+0x70>)
 80072dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072de:	4a13      	ldr	r2, [pc, #76]	; (800732c <MX_DMA_Init+0x70>)
 80072e0:	f043 0301 	orr.w	r3, r3, #1
 80072e4:	6493      	str	r3, [r2, #72]	; 0x48
 80072e6:	4b11      	ldr	r3, [pc, #68]	; (800732c <MX_DMA_Init+0x70>)
 80072e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072ea:	f003 0301 	and.w	r3, r3, #1
 80072ee:	603b      	str	r3, [r7, #0]
 80072f0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 80072f2:	2200      	movs	r2, #0
 80072f4:	2101      	movs	r1, #1
 80072f6:	200b      	movs	r0, #11
 80072f8:	f002 fed7 	bl	800a0aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80072fc:	200b      	movs	r0, #11
 80072fe:	f002 feee 	bl	800a0de <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8007302:	2200      	movs	r2, #0
 8007304:	2100      	movs	r1, #0
 8007306:	200c      	movs	r0, #12
 8007308:	f002 fecf 	bl	800a0aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800730c:	200c      	movs	r0, #12
 800730e:	f002 fee6 	bl	800a0de <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8007312:	2200      	movs	r2, #0
 8007314:	2100      	movs	r1, #0
 8007316:	200d      	movs	r0, #13
 8007318:	f002 fec7 	bl	800a0aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800731c:	200d      	movs	r0, #13
 800731e:	f002 fede 	bl	800a0de <HAL_NVIC_EnableIRQ>

}
 8007322:	bf00      	nop
 8007324:	3708      	adds	r7, #8
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}
 800732a:	bf00      	nop
 800732c:	40021000 	.word	0x40021000

08007330 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007330:	b480      	push	{r7}
 8007332:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007334:	4b04      	ldr	r3, [pc, #16]	; (8007348 <__NVIC_GetPriorityGrouping+0x18>)
 8007336:	68db      	ldr	r3, [r3, #12]
 8007338:	0a1b      	lsrs	r3, r3, #8
 800733a:	f003 0307 	and.w	r3, r3, #7
}
 800733e:	4618      	mov	r0, r3
 8007340:	46bd      	mov	sp, r7
 8007342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007346:	4770      	bx	lr
 8007348:	e000ed00 	.word	0xe000ed00

0800734c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800734c:	b480      	push	{r7}
 800734e:	b083      	sub	sp, #12
 8007350:	af00      	add	r7, sp, #0
 8007352:	4603      	mov	r3, r0
 8007354:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800735a:	2b00      	cmp	r3, #0
 800735c:	db0b      	blt.n	8007376 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800735e:	79fb      	ldrb	r3, [r7, #7]
 8007360:	f003 021f 	and.w	r2, r3, #31
 8007364:	4907      	ldr	r1, [pc, #28]	; (8007384 <__NVIC_EnableIRQ+0x38>)
 8007366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800736a:	095b      	lsrs	r3, r3, #5
 800736c:	2001      	movs	r0, #1
 800736e:	fa00 f202 	lsl.w	r2, r0, r2
 8007372:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007376:	bf00      	nop
 8007378:	370c      	adds	r7, #12
 800737a:	46bd      	mov	sp, r7
 800737c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007380:	4770      	bx	lr
 8007382:	bf00      	nop
 8007384:	e000e100 	.word	0xe000e100

08007388 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007388:	b480      	push	{r7}
 800738a:	b083      	sub	sp, #12
 800738c:	af00      	add	r7, sp, #0
 800738e:	4603      	mov	r3, r0
 8007390:	6039      	str	r1, [r7, #0]
 8007392:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007394:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007398:	2b00      	cmp	r3, #0
 800739a:	db0a      	blt.n	80073b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	b2da      	uxtb	r2, r3
 80073a0:	490c      	ldr	r1, [pc, #48]	; (80073d4 <__NVIC_SetPriority+0x4c>)
 80073a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80073a6:	0112      	lsls	r2, r2, #4
 80073a8:	b2d2      	uxtb	r2, r2
 80073aa:	440b      	add	r3, r1
 80073ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80073b0:	e00a      	b.n	80073c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	b2da      	uxtb	r2, r3
 80073b6:	4908      	ldr	r1, [pc, #32]	; (80073d8 <__NVIC_SetPriority+0x50>)
 80073b8:	79fb      	ldrb	r3, [r7, #7]
 80073ba:	f003 030f 	and.w	r3, r3, #15
 80073be:	3b04      	subs	r3, #4
 80073c0:	0112      	lsls	r2, r2, #4
 80073c2:	b2d2      	uxtb	r2, r2
 80073c4:	440b      	add	r3, r1
 80073c6:	761a      	strb	r2, [r3, #24]
}
 80073c8:	bf00      	nop
 80073ca:	370c      	adds	r7, #12
 80073cc:	46bd      	mov	sp, r7
 80073ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d2:	4770      	bx	lr
 80073d4:	e000e100 	.word	0xe000e100
 80073d8:	e000ed00 	.word	0xe000ed00

080073dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80073dc:	b480      	push	{r7}
 80073de:	b089      	sub	sp, #36	; 0x24
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	60f8      	str	r0, [r7, #12]
 80073e4:	60b9      	str	r1, [r7, #8]
 80073e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f003 0307 	and.w	r3, r3, #7
 80073ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80073f0:	69fb      	ldr	r3, [r7, #28]
 80073f2:	f1c3 0307 	rsb	r3, r3, #7
 80073f6:	2b04      	cmp	r3, #4
 80073f8:	bf28      	it	cs
 80073fa:	2304      	movcs	r3, #4
 80073fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80073fe:	69fb      	ldr	r3, [r7, #28]
 8007400:	3304      	adds	r3, #4
 8007402:	2b06      	cmp	r3, #6
 8007404:	d902      	bls.n	800740c <NVIC_EncodePriority+0x30>
 8007406:	69fb      	ldr	r3, [r7, #28]
 8007408:	3b03      	subs	r3, #3
 800740a:	e000      	b.n	800740e <NVIC_EncodePriority+0x32>
 800740c:	2300      	movs	r3, #0
 800740e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007410:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007414:	69bb      	ldr	r3, [r7, #24]
 8007416:	fa02 f303 	lsl.w	r3, r2, r3
 800741a:	43da      	mvns	r2, r3
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	401a      	ands	r2, r3
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007424:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	fa01 f303 	lsl.w	r3, r1, r3
 800742e:	43d9      	mvns	r1, r3
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007434:	4313      	orrs	r3, r2
         );
}
 8007436:	4618      	mov	r0, r3
 8007438:	3724      	adds	r7, #36	; 0x24
 800743a:	46bd      	mov	sp, r7
 800743c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007440:	4770      	bx	lr
	...

08007444 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8007444:	b480      	push	{r7}
 8007446:	b085      	sub	sp, #20
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
 800744c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16U), Port << (POSITION_VAL((Line >> 16U)) & 0x1FU) );
 800744e:	4a14      	ldr	r2, [pc, #80]	; (80074a0 <LL_SYSCFG_SetEXTISource+0x5c>)
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	f003 0303 	and.w	r3, r3, #3
 8007456:	3302      	adds	r3, #2
 8007458:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	0c1b      	lsrs	r3, r3, #16
 8007460:	43db      	mvns	r3, r3
 8007462:	ea02 0103 	and.w	r1, r2, r3
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	0c1b      	lsrs	r3, r3, #16
 800746a:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	fa93 f3a3 	rbit	r3, r3
 8007472:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	fab3 f383 	clz	r3, r3
 800747a:	b2db      	uxtb	r3, r3
 800747c:	f003 031f 	and.w	r3, r3, #31
 8007480:	687a      	ldr	r2, [r7, #4]
 8007482:	409a      	lsls	r2, r3
 8007484:	4806      	ldr	r0, [pc, #24]	; (80074a0 <LL_SYSCFG_SetEXTISource+0x5c>)
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	f003 0303 	and.w	r3, r3, #3
 800748c:	430a      	orrs	r2, r1
 800748e:	3302      	adds	r3, #2
 8007490:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8007494:	bf00      	nop
 8007496:	3714      	adds	r7, #20
 8007498:	46bd      	mov	sp, r7
 800749a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749e:	4770      	bx	lr
 80074a0:	40010000 	.word	0x40010000

080074a4 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b089      	sub	sp, #36	; 0x24
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	60f8      	str	r0, [r7, #12]
 80074ac:	60b9      	str	r1, [r7, #8]
 80074ae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681a      	ldr	r2, [r3, #0]
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	fa93 f3a3 	rbit	r3, r3
 80074be:	613b      	str	r3, [r7, #16]
  return result;
 80074c0:	693b      	ldr	r3, [r7, #16]
 80074c2:	fab3 f383 	clz	r3, r3
 80074c6:	b2db      	uxtb	r3, r3
 80074c8:	005b      	lsls	r3, r3, #1
 80074ca:	2103      	movs	r1, #3
 80074cc:	fa01 f303 	lsl.w	r3, r1, r3
 80074d0:	43db      	mvns	r3, r3
 80074d2:	401a      	ands	r2, r3
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074d8:	69fb      	ldr	r3, [r7, #28]
 80074da:	fa93 f3a3 	rbit	r3, r3
 80074de:	61bb      	str	r3, [r7, #24]
  return result;
 80074e0:	69bb      	ldr	r3, [r7, #24]
 80074e2:	fab3 f383 	clz	r3, r3
 80074e6:	b2db      	uxtb	r3, r3
 80074e8:	005b      	lsls	r3, r3, #1
 80074ea:	6879      	ldr	r1, [r7, #4]
 80074ec:	fa01 f303 	lsl.w	r3, r1, r3
 80074f0:	431a      	orrs	r2, r3
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	601a      	str	r2, [r3, #0]
}
 80074f6:	bf00      	nop
 80074f8:	3724      	adds	r7, #36	; 0x24
 80074fa:	46bd      	mov	sp, r7
 80074fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007500:	4770      	bx	lr

08007502 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8007502:	b480      	push	{r7}
 8007504:	b089      	sub	sp, #36	; 0x24
 8007506:	af00      	add	r7, sp, #0
 8007508:	60f8      	str	r0, [r7, #12]
 800750a:	60b9      	str	r1, [r7, #8]
 800750c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	68da      	ldr	r2, [r3, #12]
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	fa93 f3a3 	rbit	r3, r3
 800751c:	613b      	str	r3, [r7, #16]
  return result;
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	fab3 f383 	clz	r3, r3
 8007524:	b2db      	uxtb	r3, r3
 8007526:	005b      	lsls	r3, r3, #1
 8007528:	2103      	movs	r1, #3
 800752a:	fa01 f303 	lsl.w	r3, r1, r3
 800752e:	43db      	mvns	r3, r3
 8007530:	401a      	ands	r2, r3
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007536:	69fb      	ldr	r3, [r7, #28]
 8007538:	fa93 f3a3 	rbit	r3, r3
 800753c:	61bb      	str	r3, [r7, #24]
  return result;
 800753e:	69bb      	ldr	r3, [r7, #24]
 8007540:	fab3 f383 	clz	r3, r3
 8007544:	b2db      	uxtb	r3, r3
 8007546:	005b      	lsls	r3, r3, #1
 8007548:	6879      	ldr	r1, [r7, #4]
 800754a:	fa01 f303 	lsl.w	r3, r1, r3
 800754e:	431a      	orrs	r2, r3
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	60da      	str	r2, [r3, #12]
}
 8007554:	bf00      	nop
 8007556:	3724      	adds	r7, #36	; 0x24
 8007558:	46bd      	mov	sp, r7
 800755a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755e:	4770      	bx	lr

08007560 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8007560:	b480      	push	{r7}
 8007562:	b083      	sub	sp, #12
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
 8007568:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	683a      	ldr	r2, [r7, #0]
 800756e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007570:	bf00      	nop
 8007572:	370c      	adds	r7, #12
 8007574:	46bd      	mov	sp, r7
 8007576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757a:	4770      	bx	lr

0800757c <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800757c:	b480      	push	{r7}
 800757e:	b085      	sub	sp, #20
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8007584:	4b08      	ldr	r3, [pc, #32]	; (80075a8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007586:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007588:	4907      	ldr	r1, [pc, #28]	; (80075a8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	4313      	orrs	r3, r2
 800758e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8007590:	4b05      	ldr	r3, [pc, #20]	; (80075a8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007592:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	4013      	ands	r3, r2
 8007598:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800759a:	68fb      	ldr	r3, [r7, #12]
}
 800759c:	bf00      	nop
 800759e:	3714      	adds	r7, #20
 80075a0:	46bd      	mov	sp, r7
 80075a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a6:	4770      	bx	lr
 80075a8:	40021000 	.word	0x40021000

080075ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b08a      	sub	sp, #40	; 0x28
 80075b0:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80075b2:	f107 031c 	add.w	r3, r7, #28
 80075b6:	2200      	movs	r2, #0
 80075b8:	601a      	str	r2, [r3, #0]
 80075ba:	605a      	str	r2, [r3, #4]
 80075bc:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80075be:	1d3b      	adds	r3, r7, #4
 80075c0:	2200      	movs	r2, #0
 80075c2:	601a      	str	r2, [r3, #0]
 80075c4:	605a      	str	r2, [r3, #4]
 80075c6:	609a      	str	r2, [r3, #8]
 80075c8:	60da      	str	r2, [r3, #12]
 80075ca:	611a      	str	r2, [r3, #16]
 80075cc:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 80075ce:	2004      	movs	r0, #4
 80075d0:	f7ff ffd4 	bl	800757c <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 80075d4:	2020      	movs	r0, #32
 80075d6:	f7ff ffd1 	bl	800757c <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80075da:	2001      	movs	r0, #1
 80075dc:	f7ff ffce 	bl	800757c <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80075e0:	2002      	movs	r0, #2
 80075e2:	f7ff ffcb 	bl	800757c <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMODE_GPIO_Port, TRIGMODE_Pin);
 80075e6:	2108      	movs	r1, #8
 80075e8:	48d3      	ldr	r0, [pc, #844]	; (8007938 <MX_GPIO_Init+0x38c>)
 80075ea:	f7ff ffb9 	bl	8007560 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin);
 80075ee:	2108      	movs	r1, #8
 80075f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80075f4:	f7ff ffb4 	bl	8007560 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG2_GPIO_Port, SG2_Pin);
 80075f8:	2110      	movs	r1, #16
 80075fa:	48cf      	ldr	r0, [pc, #828]	; (8007938 <MX_GPIO_Init+0x38c>)
 80075fc:	f7ff ffb0 	bl	8007560 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG1_GPIO_Port, SG1_Pin);
 8007600:	2120      	movs	r1, #32
 8007602:	48cd      	ldr	r0, [pc, #820]	; (8007938 <MX_GPIO_Init+0x38c>)
 8007604:	f7ff ffac 	bl	8007560 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG0_GPIO_Port, SG0_Pin);
 8007608:	2101      	movs	r1, #1
 800760a:	48cc      	ldr	r0, [pc, #816]	; (800793c <MX_GPIO_Init+0x390>)
 800760c:	f7ff ffa8 	bl	8007560 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin);
 8007610:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007614:	48c8      	ldr	r0, [pc, #800]	; (8007938 <MX_GPIO_Init+0x38c>)
 8007616:	f7ff ffa3 	bl	8007560 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin);
 800761a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800761e:	48c6      	ldr	r0, [pc, #792]	; (8007938 <MX_GPIO_Init+0x38c>)
 8007620:	f7ff ff9e 	bl	8007560 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DC_GPIO_Port, DC_Pin);
 8007624:	2140      	movs	r1, #64	; 0x40
 8007626:	48c5      	ldr	r0, [pc, #788]	; (800793c <MX_GPIO_Init+0x390>)
 8007628:	f7ff ff9a 	bl	8007560 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CS_GPIO_Port, CS_Pin);
 800762c:	2180      	movs	r1, #128	; 0x80
 800762e:	48c3      	ldr	r0, [pc, #780]	; (800793c <MX_GPIO_Init+0x390>)
 8007630:	f7ff ff96 	bl	8007560 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(RST_GPIO_Port, RST_Pin);
 8007634:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007638:	48c0      	ldr	r0, [pc, #768]	; (800793c <MX_GPIO_Init+0x390>)
 800763a:	f7ff ff91 	bl	8007560 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE14);
 800763e:	49c0      	ldr	r1, [pc, #768]	; (8007940 <MX_GPIO_Init+0x394>)
 8007640:	2002      	movs	r0, #2
 8007642:	f7ff feff 	bl	8007444 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE15);
 8007646:	49bf      	ldr	r1, [pc, #764]	; (8007944 <MX_GPIO_Init+0x398>)
 8007648:	2002      	movs	r0, #2
 800764a:	f7ff fefb 	bl	8007444 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE0);
 800764e:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8007652:	2005      	movs	r0, #5
 8007654:	f7ff fef6 	bl	8007444 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE1);
 8007658:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
 800765c:	2005      	movs	r0, #5
 800765e:	f7ff fef1 	bl	8007444 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE2);
 8007662:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8007666:	2002      	movs	r0, #2
 8007668:	f7ff feec 	bl	8007444 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 800766c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007670:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8007672:	2301      	movs	r3, #1
 8007674:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8007678:	2300      	movs	r3, #0
 800767a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 800767e:	2302      	movs	r3, #2
 8007680:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8007684:	f107 031c 	add.w	r3, r7, #28
 8007688:	4618      	mov	r0, r3
 800768a:	f005 fead 	bl	800d3e8 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 800768e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007692:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8007694:	2301      	movs	r3, #1
 8007696:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800769a:	2300      	movs	r3, #0
 800769c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80076a0:	2302      	movs	r3, #2
 80076a2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80076a6:	f107 031c 	add.w	r3, r7, #28
 80076aa:	4618      	mov	r0, r3
 80076ac:	f005 fe9c 	bl	800d3e8 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 80076b0:	2301      	movs	r3, #1
 80076b2:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 80076b4:	2301      	movs	r3, #1
 80076b6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80076ba:	2300      	movs	r3, #0
 80076bc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80076c0:	2302      	movs	r3, #2
 80076c2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80076c6:	f107 031c 	add.w	r3, r7, #28
 80076ca:	4618      	mov	r0, r3
 80076cc:	f005 fe8c 	bl	800d3e8 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 80076d0:	2302      	movs	r3, #2
 80076d2:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 80076d4:	2301      	movs	r3, #1
 80076d6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80076da:	2300      	movs	r3, #0
 80076dc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80076e0:	2302      	movs	r3, #2
 80076e2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80076e6:	f107 031c 	add.w	r3, r7, #28
 80076ea:	4618      	mov	r0, r3
 80076ec:	f005 fe7c 	bl	800d3e8 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_2;
 80076f0:	2304      	movs	r3, #4
 80076f2:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 80076f4:	2301      	movs	r3, #1
 80076f6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80076fa:	2300      	movs	r3, #0
 80076fc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8007700:	2302      	movs	r3, #2
 8007702:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8007706:	f107 031c 	add.w	r3, r7, #28
 800770a:	4618      	mov	r0, r3
 800770c:	f005 fe6c 	bl	800d3e8 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_PULL_UP);
 8007710:	2201      	movs	r2, #1
 8007712:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007716:	4888      	ldr	r0, [pc, #544]	; (8007938 <MX_GPIO_Init+0x38c>)
 8007718:	f7ff fef3 	bl	8007502 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_PULL_UP);
 800771c:	2201      	movs	r2, #1
 800771e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007722:	4885      	ldr	r0, [pc, #532]	; (8007938 <MX_GPIO_Init+0x38c>)
 8007724:	f7ff feed 	bl	8007502 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_PULL_UP);
 8007728:	2201      	movs	r2, #1
 800772a:	2101      	movs	r1, #1
 800772c:	4886      	ldr	r0, [pc, #536]	; (8007948 <MX_GPIO_Init+0x39c>)
 800772e:	f7ff fee8 	bl	8007502 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_PULL_UP);
 8007732:	2201      	movs	r2, #1
 8007734:	2102      	movs	r1, #2
 8007736:	4884      	ldr	r0, [pc, #528]	; (8007948 <MX_GPIO_Init+0x39c>)
 8007738:	f7ff fee3 	bl	8007502 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(ENC_EXTI2_GPIO_Port, ENC_EXTI2_Pin, LL_GPIO_PULL_UP);
 800773c:	2201      	movs	r2, #1
 800773e:	2104      	movs	r1, #4
 8007740:	487d      	ldr	r0, [pc, #500]	; (8007938 <MX_GPIO_Init+0x38c>)
 8007742:	f7ff fede 	bl	8007502 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_MODE_INPUT);
 8007746:	2200      	movs	r2, #0
 8007748:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800774c:	487a      	ldr	r0, [pc, #488]	; (8007938 <MX_GPIO_Init+0x38c>)
 800774e:	f7ff fea9 	bl	80074a4 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_MODE_INPUT);
 8007752:	2200      	movs	r2, #0
 8007754:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007758:	4877      	ldr	r0, [pc, #476]	; (8007938 <MX_GPIO_Init+0x38c>)
 800775a:	f7ff fea3 	bl	80074a4 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_MODE_INPUT);
 800775e:	2200      	movs	r2, #0
 8007760:	2101      	movs	r1, #1
 8007762:	4879      	ldr	r0, [pc, #484]	; (8007948 <MX_GPIO_Init+0x39c>)
 8007764:	f7ff fe9e 	bl	80074a4 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_MODE_INPUT);
 8007768:	2200      	movs	r2, #0
 800776a:	2102      	movs	r1, #2
 800776c:	4876      	ldr	r0, [pc, #472]	; (8007948 <MX_GPIO_Init+0x39c>)
 800776e:	f7ff fe99 	bl	80074a4 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(ENC_EXTI2_GPIO_Port, ENC_EXTI2_Pin, LL_GPIO_MODE_INPUT);
 8007772:	2200      	movs	r2, #0
 8007774:	2104      	movs	r1, #4
 8007776:	4870      	ldr	r0, [pc, #448]	; (8007938 <MX_GPIO_Init+0x38c>)
 8007778:	f7ff fe94 	bl	80074a4 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = TRIGMODE_Pin;
 800777c:	2308      	movs	r3, #8
 800777e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007780:	2301      	movs	r3, #1
 8007782:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007784:	2300      	movs	r3, #0
 8007786:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007788:	2300      	movs	r3, #0
 800778a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 800778c:	2302      	movs	r3, #2
 800778e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMODE_GPIO_Port, &GPIO_InitStruct);
 8007790:	1d3b      	adds	r3, r7, #4
 8007792:	4619      	mov	r1, r3
 8007794:	4868      	ldr	r0, [pc, #416]	; (8007938 <MX_GPIO_Init+0x38c>)
 8007796:	f006 f81a 	bl	800d7ce <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DCBIAS_INVERT_Pin;
 800779a:	2308      	movs	r3, #8
 800779c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800779e:	2301      	movs	r3, #1
 80077a0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80077a2:	2300      	movs	r3, #0
 80077a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80077a6:	2300      	movs	r3, #0
 80077a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80077aa:	2300      	movs	r3, #0
 80077ac:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DCBIAS_INVERT_GPIO_Port, &GPIO_InitStruct);
 80077ae:	1d3b      	adds	r3, r7, #4
 80077b0:	4619      	mov	r1, r3
 80077b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80077b6:	f006 f80a 	bl	800d7ce <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG2_Pin;
 80077ba:	2310      	movs	r3, #16
 80077bc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80077be:	2301      	movs	r3, #1
 80077c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80077c2:	2300      	movs	r3, #0
 80077c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80077c6:	2300      	movs	r3, #0
 80077c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80077ca:	2300      	movs	r3, #0
 80077cc:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG2_GPIO_Port, &GPIO_InitStruct);
 80077ce:	1d3b      	adds	r3, r7, #4
 80077d0:	4619      	mov	r1, r3
 80077d2:	4859      	ldr	r0, [pc, #356]	; (8007938 <MX_GPIO_Init+0x38c>)
 80077d4:	f005 fffb 	bl	800d7ce <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG1_Pin;
 80077d8:	2320      	movs	r3, #32
 80077da:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80077dc:	2301      	movs	r3, #1
 80077de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80077e0:	2300      	movs	r3, #0
 80077e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80077e4:	2300      	movs	r3, #0
 80077e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80077e8:	2300      	movs	r3, #0
 80077ea:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG1_GPIO_Port, &GPIO_InitStruct);
 80077ec:	1d3b      	adds	r3, r7, #4
 80077ee:	4619      	mov	r1, r3
 80077f0:	4851      	ldr	r0, [pc, #324]	; (8007938 <MX_GPIO_Init+0x38c>)
 80077f2:	f005 ffec 	bl	800d7ce <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG0_Pin;
 80077f6:	2301      	movs	r3, #1
 80077f8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80077fa:	2301      	movs	r3, #1
 80077fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80077fe:	2300      	movs	r3, #0
 8007800:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007802:	2300      	movs	r3, #0
 8007804:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007806:	2300      	movs	r3, #0
 8007808:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG0_GPIO_Port, &GPIO_InitStruct);
 800780a:	1d3b      	adds	r3, r7, #4
 800780c:	4619      	mov	r1, r3
 800780e:	484b      	ldr	r0, [pc, #300]	; (800793c <MX_GPIO_Init+0x390>)
 8007810:	f005 ffdd 	bl	800d7ce <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX1_Pin;
 8007814:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007818:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800781a:	2301      	movs	r3, #1
 800781c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800781e:	2300      	movs	r3, #0
 8007820:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007822:	2300      	movs	r3, #0
 8007824:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007826:	2300      	movs	r3, #0
 8007828:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX1_GPIO_Port, &GPIO_InitStruct);
 800782a:	1d3b      	adds	r3, r7, #4
 800782c:	4619      	mov	r1, r3
 800782e:	4842      	ldr	r0, [pc, #264]	; (8007938 <MX_GPIO_Init+0x38c>)
 8007830:	f005 ffcd 	bl	800d7ce <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX2_Pin;
 8007834:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007838:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800783a:	2301      	movs	r3, #1
 800783c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800783e:	2300      	movs	r3, #0
 8007840:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007842:	2300      	movs	r3, #0
 8007844:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007846:	2300      	movs	r3, #0
 8007848:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX2_GPIO_Port, &GPIO_InitStruct);
 800784a:	1d3b      	adds	r3, r7, #4
 800784c:	4619      	mov	r1, r3
 800784e:	483a      	ldr	r0, [pc, #232]	; (8007938 <MX_GPIO_Init+0x38c>)
 8007850:	f005 ffbd 	bl	800d7ce <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DC_Pin;
 8007854:	2340      	movs	r3, #64	; 0x40
 8007856:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007858:	2301      	movs	r3, #1
 800785a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800785c:	2303      	movs	r3, #3
 800785e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007860:	2300      	movs	r3, #0
 8007862:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007864:	2300      	movs	r3, #0
 8007866:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DC_GPIO_Port, &GPIO_InitStruct);
 8007868:	1d3b      	adds	r3, r7, #4
 800786a:	4619      	mov	r1, r3
 800786c:	4833      	ldr	r0, [pc, #204]	; (800793c <MX_GPIO_Init+0x390>)
 800786e:	f005 ffae 	bl	800d7ce <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CS_Pin;
 8007872:	2380      	movs	r3, #128	; 0x80
 8007874:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007876:	2301      	movs	r3, #1
 8007878:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800787a:	2303      	movs	r3, #3
 800787c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800787e:	2300      	movs	r3, #0
 8007880:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007882:	2300      	movs	r3, #0
 8007884:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8007886:	1d3b      	adds	r3, r7, #4
 8007888:	4619      	mov	r1, r3
 800788a:	482c      	ldr	r0, [pc, #176]	; (800793c <MX_GPIO_Init+0x390>)
 800788c:	f005 ff9f 	bl	800d7ce <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = RST_Pin;
 8007890:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007894:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007896:	2301      	movs	r3, #1
 8007898:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800789a:	2303      	movs	r3, #3
 800789c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800789e:	2300      	movs	r3, #0
 80078a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80078a2:	2300      	movs	r3, #0
 80078a4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 80078a6:	1d3b      	adds	r3, r7, #4
 80078a8:	4619      	mov	r1, r3
 80078aa:	4824      	ldr	r0, [pc, #144]	; (800793c <MX_GPIO_Init+0x390>)
 80078ac:	f005 ff8f 	bl	800d7ce <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80078b0:	f7ff fd3e 	bl	8007330 <__NVIC_GetPriorityGrouping>
 80078b4:	4603      	mov	r3, r0
 80078b6:	2200      	movs	r2, #0
 80078b8:	2100      	movs	r1, #0
 80078ba:	4618      	mov	r0, r3
 80078bc:	f7ff fd8e 	bl	80073dc <NVIC_EncodePriority>
 80078c0:	4603      	mov	r3, r0
 80078c2:	4619      	mov	r1, r3
 80078c4:	2006      	movs	r0, #6
 80078c6:	f7ff fd5f 	bl	8007388 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI0_IRQn);
 80078ca:	2006      	movs	r0, #6
 80078cc:	f7ff fd3e 	bl	800734c <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80078d0:	f7ff fd2e 	bl	8007330 <__NVIC_GetPriorityGrouping>
 80078d4:	4603      	mov	r3, r0
 80078d6:	2200      	movs	r2, #0
 80078d8:	2100      	movs	r1, #0
 80078da:	4618      	mov	r0, r3
 80078dc:	f7ff fd7e 	bl	80073dc <NVIC_EncodePriority>
 80078e0:	4603      	mov	r3, r0
 80078e2:	4619      	mov	r1, r3
 80078e4:	2007      	movs	r0, #7
 80078e6:	f7ff fd4f 	bl	8007388 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI1_IRQn);
 80078ea:	2007      	movs	r0, #7
 80078ec:	f7ff fd2e 	bl	800734c <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80078f0:	f7ff fd1e 	bl	8007330 <__NVIC_GetPriorityGrouping>
 80078f4:	4603      	mov	r3, r0
 80078f6:	2200      	movs	r2, #0
 80078f8:	2100      	movs	r1, #0
 80078fa:	4618      	mov	r0, r3
 80078fc:	f7ff fd6e 	bl	80073dc <NVIC_EncodePriority>
 8007900:	4603      	mov	r3, r0
 8007902:	4619      	mov	r1, r3
 8007904:	2008      	movs	r0, #8
 8007906:	f7ff fd3f 	bl	8007388 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI2_IRQn);
 800790a:	2008      	movs	r0, #8
 800790c:	f7ff fd1e 	bl	800734c <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8007910:	f7ff fd0e 	bl	8007330 <__NVIC_GetPriorityGrouping>
 8007914:	4603      	mov	r3, r0
 8007916:	2200      	movs	r2, #0
 8007918:	2100      	movs	r1, #0
 800791a:	4618      	mov	r0, r3
 800791c:	f7ff fd5e 	bl	80073dc <NVIC_EncodePriority>
 8007920:	4603      	mov	r3, r0
 8007922:	4619      	mov	r1, r3
 8007924:	2028      	movs	r0, #40	; 0x28
 8007926:	f7ff fd2f 	bl	8007388 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 800792a:	2028      	movs	r0, #40	; 0x28
 800792c:	f7ff fd0e 	bl	800734c <__NVIC_EnableIRQ>

}
 8007930:	bf00      	nop
 8007932:	3728      	adds	r7, #40	; 0x28
 8007934:	46bd      	mov	sp, r7
 8007936:	e009      	b.n	800794c <MX_GPIO_Init+0x3a0>
 8007938:	48000800 	.word	0x48000800
 800793c:	48000400 	.word	0x48000400
 8007940:	0f000003 	.word	0x0f000003
 8007944:	f0000003 	.word	0xf0000003
 8007948:	48001400 	.word	0x48001400
 800794c:	bd80      	pop	{r7, pc}
 800794e:	bf00      	nop

08007950 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8007950:	b480      	push	{r7}
 8007952:	b083      	sub	sp, #12
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8007958:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800795c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8007960:	f003 0301 	and.w	r3, r3, #1
 8007964:	2b00      	cmp	r3, #0
 8007966:	d013      	beq.n	8007990 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8007968:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800796c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8007970:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8007974:	2b00      	cmp	r3, #0
 8007976:	d00b      	beq.n	8007990 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8007978:	e000      	b.n	800797c <ITM_SendChar+0x2c>
    {
      __NOP();
 800797a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800797c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d0f9      	beq.n	800797a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8007986:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800798a:	687a      	ldr	r2, [r7, #4]
 800798c:	b2d2      	uxtb	r2, r2
 800798e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8007990:	687b      	ldr	r3, [r7, #4]
}
 8007992:	4618      	mov	r0, r3
 8007994:	370c      	adds	r7, #12
 8007996:	46bd      	mov	sp, r7
 8007998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799c:	4770      	bx	lr

0800799e <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// redirect printf to SWV
int _write(int file, char *ptr, int len)
{
 800799e:	b580      	push	{r7, lr}
 80079a0:	b086      	sub	sp, #24
 80079a2:	af00      	add	r7, sp, #0
 80079a4:	60f8      	str	r0, [r7, #12]
 80079a6:	60b9      	str	r1, [r7, #8]
 80079a8:	607a      	str	r2, [r7, #4]
  int i=0;
 80079aa:	2300      	movs	r3, #0
 80079ac:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 80079ae:	2300      	movs	r3, #0
 80079b0:	617b      	str	r3, [r7, #20]
 80079b2:	e009      	b.n	80079c8 <_write+0x2a>
    ITM_SendChar((*ptr++));
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	1c5a      	adds	r2, r3, #1
 80079b8:	60ba      	str	r2, [r7, #8]
 80079ba:	781b      	ldrb	r3, [r3, #0]
 80079bc:	4618      	mov	r0, r3
 80079be:	f7ff ffc7 	bl	8007950 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	3301      	adds	r3, #1
 80079c6:	617b      	str	r3, [r7, #20]
 80079c8:	697a      	ldr	r2, [r7, #20]
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	429a      	cmp	r2, r3
 80079ce:	dbf1      	blt.n	80079b4 <_write+0x16>
  return len;
 80079d0:	687b      	ldr	r3, [r7, #4]
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3718      	adds	r7, #24
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}
	...

080079dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80079e0:	f000 feb5 	bl	800874e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80079e4:	f000 f86c 	bl	8007ac0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80079e8:	f7ff fde0 	bl	80075ac <MX_GPIO_Init>
  MX_DMA_Init();
 80079ec:	f7ff fc66 	bl	80072bc <MX_DMA_Init>
  MX_DAC1_Init();
 80079f0:	f7ff fb16 	bl	8007020 <MX_DAC1_Init>
  MX_DAC2_Init();
 80079f4:	f7ff fb5e 	bl	80070b4 <MX_DAC2_Init>
  MX_ADC1_Init();
 80079f8:	f7ff f9d4 	bl	8006da4 <MX_ADC1_Init>
  MX_COMP1_Init();
 80079fc:	f7ff fab6 	bl	8006f6c <MX_COMP1_Init>
  MX_TIM2_Init();
 8007a00:	f000 fbaa 	bl	8008158 <MX_TIM2_Init>
  MX_SPI3_Init();
 8007a04:	f000 f908 	bl	8007c18 <MX_SPI3_Init>
  MX_RNG_Init();
 8007a08:	f000 f8f8 	bl	8007bfc <MX_RNG_Init>
  MX_TIM1_Init();
 8007a0c:	f000 fb34 	bl	8008078 <MX_TIM1_Init>
  MX_TIM8_Init();
 8007a10:	f000 fc8a 	bl	8008328 <MX_TIM8_Init>
  MX_TIM16_Init();
 8007a14:	f000 fd42 	bl	800849c <MX_TIM16_Init>
  MX_TIM15_Init();
 8007a18:	f000 fcee 	bl	80083f8 <MX_TIM15_Init>
  MX_TIM5_Init();
 8007a1c:	f000 fc36 	bl	800828c <MX_TIM5_Init>
  MX_TIM3_Init();
 8007a20:	f000 fbe6 	bl	80081f0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */



  DT_InitRegister();
 8007a24:	f7fd f8ae 	bl	8004b84 <DT_InitRegister>

  // main signal function output (external)
  //DAC_InitDevices()
  SM_Init();
 8007a28:	f7fd fd76 	bl	8005518 <SM_Init>
  FuncO_Init();
 8007a2c:	f7fd fa92 	bl	8004f54 <FuncO_Init>
  FuncO_ApplyPresetToSignal(eDefaultFuncPreset);
 8007a30:	2000      	movs	r0, #0
 8007a32:	f7fd fb47 	bl	80050c4 <FuncO_ApplyPresetToSignal>
  FuncO_ApplyPresetToSync(eDefaultFuncPreset);
 8007a36:	2000      	movs	r0, #0
 8007a38:	f7fd fb9e 	bl	8005178 <FuncO_ApplyPresetToSync>

  //TIM8->ARR = sin1_MAX_OUTPUT_ARR;

  // DC bias output (internal)
  HAL_DAC_Start(&hdac1, DAC1_CHANNEL_2);
 8007a3c:	2110      	movs	r1, #16
 8007a3e:	481b      	ldr	r0, [pc, #108]	; (8007aac <main+0xd0>)
 8007a40:	f002 fb89 	bl	800a156 <HAL_DAC_Start>
  // single clock to run all DAC channels. TODO add independent clocks
  //HAL_TIM_Base_Start(&htim8);
  //HAL_TIM_Base_Start(&htim2);

  // TIM2 - DAC TIMER
  OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
 8007a44:	4b1a      	ldr	r3, [pc, #104]	; (8007ab0 <main+0xd4>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4a19      	ldr	r2, [pc, #100]	; (8007ab0 <main+0xd4>)
 8007a4a:	f043 0301 	orr.w	r3, r3, #1
 8007a4e:	6013      	str	r3, [r2, #0]
  FreqO_ApplyPreset(eDefaultFreqPreset);
 8007a50:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007a54:	f7fd fa14 	bl	8004e80 <FreqO_ApplyPreset>

#endif //DISABLE_ALL_TIMERS

  // DC bias inversion
  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, GPIO_PIN_SET);
 8007a58:	2201      	movs	r2, #1
 8007a5a:	2108      	movs	r1, #8
 8007a5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007a60:	f003 fbc4 	bl	800b1ec <HAL_GPIO_WritePin>

  // PGA gain
  //GO_ApplyPreset_Fast(eDefaultGainPreset);
  VPP_ApplyPresetToSignal(eDefaultVppPreset);
 8007a64:	2059      	movs	r0, #89	; 0x59
 8007a66:	f7fd fef1 	bl	800584c <VPP_ApplyPresetToSignal>
  //HAL_TIM_Base_Start_IT(&htim3);
#endif	//DISABLE_ALL_TIMERS


// http://www.ti.com/lit/ds/symlink/ts5a3357.pdf
  HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin6
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007a70:	4810      	ldr	r0, [pc, #64]	; (8007ab4 <main+0xd8>)
 8007a72:	f003 fbbb 	bl	800b1ec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin5
 8007a76:	2200      	movs	r2, #0
 8007a78:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007a7c:	480d      	ldr	r0, [pc, #52]	; (8007ab4 <main+0xd8>)
 8007a7e:	f003 fbb5 	bl	800b1ec <HAL_GPIO_WritePin>



#ifndef DISABLE_ALL_TIMERS
  // encoder input
  HAL_TIM_Base_Start(&htim1);		// enable encoder timer
 8007a82:	480d      	ldr	r0, [pc, #52]	; (8007ab8 <main+0xdc>)
 8007a84:	f004 fcac 	bl	800c3e0 <HAL_TIM_Base_Start>
  //TIM1->DIER |= TIM_DIER_IDXIE;		// enable index interrupts

#endif	//DISABLE_ALL_TIMERS

  TIM6->PSC = 65535;
 8007a88:	4b0c      	ldr	r3, [pc, #48]	; (8007abc <main+0xe0>)
 8007a8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007a8e:	629a      	str	r2, [r3, #40]	; 0x28
  TIM6->ARR = 65535;
 8007a90:	4b0a      	ldr	r3, [pc, #40]	; (8007abc <main+0xe0>)
 8007a92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007a96:	62da      	str	r2, [r3, #44]	; 0x2c



  // TFT lib enable
  DM_Init();
 8007a98:	f7f9 f944 	bl	8000d24 <DM_Init>
  DM_PostInit();
 8007a9c:	f7f9 f950 	bl	8000d40 <DM_PostInit>

  IM_Init();
 8007aa0:	f7fc febe 	bl	8004820 <IM_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	EM_ProcessEvent();
 8007aa4:	f7fb fe62 	bl	800376c <EM_ProcessEvent>
 8007aa8:	e7fc      	b.n	8007aa4 <main+0xc8>
 8007aaa:	bf00      	nop
 8007aac:	200025c0 	.word	0x200025c0
 8007ab0:	40013400 	.word	0x40013400
 8007ab4:	48000800 	.word	0x48000800
 8007ab8:	20002828 	.word	0x20002828
 8007abc:	40001000 	.word	0x40001000

08007ac0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b0a8      	sub	sp, #160	; 0xa0
 8007ac4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007ac6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007aca:	2238      	movs	r2, #56	; 0x38
 8007acc:	2100      	movs	r1, #0
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f006 ff6c 	bl	800e9ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007ad4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007ad8:	2200      	movs	r2, #0
 8007ada:	601a      	str	r2, [r3, #0]
 8007adc:	605a      	str	r2, [r3, #4]
 8007ade:	609a      	str	r2, [r3, #8]
 8007ae0:	60da      	str	r2, [r3, #12]
 8007ae2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007ae4:	463b      	mov	r3, r7
 8007ae6:	2254      	movs	r2, #84	; 0x54
 8007ae8:	2100      	movs	r1, #0
 8007aea:	4618      	mov	r0, r3
 8007aec:	f006 ff5e 	bl	800e9ac <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8007af0:	2000      	movs	r0, #0
 8007af2:	f003 fb93 	bl	800b21c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8007af6:	2322      	movs	r3, #34	; 0x22
 8007af8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007afa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007afe:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007b00:	2340      	movs	r3, #64	; 0x40
 8007b02:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8007b04:	2301      	movs	r3, #1
 8007b06:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007b0a:	2302      	movs	r3, #2
 8007b0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8007b10:	2302      	movs	r3, #2
 8007b12:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8007b16:	2302      	movs	r3, #2
 8007b18:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 42;
 8007b1c:	232a      	movs	r3, #42	; 0x2a
 8007b1e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV30;
 8007b22:	231e      	movs	r3, #30
 8007b24:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8007b28:	2304      	movs	r3, #4
 8007b2a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8007b2e:	2302      	movs	r3, #2
 8007b30:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007b34:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007b38:	4618      	mov	r0, r3
 8007b3a:	f003 fc13 	bl	800b364 <HAL_RCC_OscConfig>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d001      	beq.n	8007b48 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8007b44:	f000 f82a 	bl	8007b9c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007b48:	230f      	movs	r3, #15
 8007b4a:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007b4c:	2303      	movs	r3, #3
 8007b4e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007b50:	2300      	movs	r3, #0
 8007b52:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8007b54:	2300      	movs	r3, #0
 8007b56:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007b58:	2300      	movs	r3, #0
 8007b5a:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 8007b5c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007b60:	2108      	movs	r1, #8
 8007b62:	4618      	mov	r0, r3
 8007b64:	f003 ff16 	bl	800b994 <HAL_RCC_ClockConfig>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d001      	beq.n	8007b72 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8007b6e:	f000 f815 	bl	8007b9c <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_ADC12;
 8007b72:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8007b76:	603b      	str	r3, [r7, #0]
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8007b78:	2300      	movs	r3, #0
 8007b7a:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8007b7c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007b80:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007b82:	463b      	mov	r3, r7
 8007b84:	4618      	mov	r0, r3
 8007b86:	f004 f8f5 	bl	800bd74 <HAL_RCCEx_PeriphCLKConfig>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d001      	beq.n	8007b94 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8007b90:	f000 f804 	bl	8007b9c <Error_Handler>
  }
}
 8007b94:	bf00      	nop
 8007b96:	37a0      	adds	r7, #160	; 0xa0
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bd80      	pop	{r7, pc}

08007b9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8007ba0:	bf00      	nop
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba8:	4770      	bx	lr

08007baa <LL_RNG_Enable>:
  * @rmtoll CR           RNGEN         LL_RNG_Enable
  * @param  RNGx RNG Instance
  * @retval None
  */
__STATIC_INLINE void LL_RNG_Enable(RNG_TypeDef *RNGx)
{
 8007baa:	b480      	push	{r7}
 8007bac:	b083      	sub	sp, #12
 8007bae:	af00      	add	r7, sp, #0
 8007bb0:	6078      	str	r0, [r7, #4]
  SET_BIT(RNGx->CR, RNG_CR_RNGEN);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f043 0204 	orr.w	r2, r3, #4
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	601a      	str	r2, [r3, #0]
}
 8007bbe:	bf00      	nop
 8007bc0:	370c      	adds	r7, #12
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc8:	4770      	bx	lr
	...

08007bcc <LL_AHB2_GRP1_EnableClock>:
{
 8007bcc:	b480      	push	{r7}
 8007bce:	b085      	sub	sp, #20
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8007bd4:	4b08      	ldr	r3, [pc, #32]	; (8007bf8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007bd6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007bd8:	4907      	ldr	r1, [pc, #28]	; (8007bf8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	4313      	orrs	r3, r2
 8007bde:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8007be0:	4b05      	ldr	r3, [pc, #20]	; (8007bf8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007be2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	4013      	ands	r3, r2
 8007be8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007bea:	68fb      	ldr	r3, [r7, #12]
}
 8007bec:	bf00      	nop
 8007bee:	3714      	adds	r7, #20
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf6:	4770      	bx	lr
 8007bf8:	40021000 	.word	0x40021000

08007bfc <MX_RNG_Init>:

/* USER CODE END 0 */

/* RNG init function */
void MX_RNG_Init(void)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	af00      	add	r7, sp, #0

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_RNG);
 8007c00:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8007c04:	f7ff ffe2 	bl	8007bcc <LL_AHB2_GRP1_EnableClock>

  LL_RNG_Enable(RNG);
 8007c08:	4802      	ldr	r0, [pc, #8]	; (8007c14 <MX_RNG_Init+0x18>)
 8007c0a:	f7ff ffce 	bl	8007baa <LL_RNG_Enable>

}
 8007c0e:	bf00      	nop
 8007c10:	bd80      	pop	{r7, pc}
 8007c12:	bf00      	nop
 8007c14:	50060800 	.word	0x50060800

08007c18 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8007c1c:	4b1b      	ldr	r3, [pc, #108]	; (8007c8c <MX_SPI3_Init+0x74>)
 8007c1e:	4a1c      	ldr	r2, [pc, #112]	; (8007c90 <MX_SPI3_Init+0x78>)
 8007c20:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8007c22:	4b1a      	ldr	r3, [pc, #104]	; (8007c8c <MX_SPI3_Init+0x74>)
 8007c24:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007c28:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8007c2a:	4b18      	ldr	r3, [pc, #96]	; (8007c8c <MX_SPI3_Init+0x74>)
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8007c30:	4b16      	ldr	r3, [pc, #88]	; (8007c8c <MX_SPI3_Init+0x74>)
 8007c32:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8007c36:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007c38:	4b14      	ldr	r3, [pc, #80]	; (8007c8c <MX_SPI3_Init+0x74>)
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007c3e:	4b13      	ldr	r3, [pc, #76]	; (8007c8c <MX_SPI3_Init+0x74>)
 8007c40:	2200      	movs	r2, #0
 8007c42:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8007c44:	4b11      	ldr	r3, [pc, #68]	; (8007c8c <MX_SPI3_Init+0x74>)
 8007c46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c4a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8007c4c:	4b0f      	ldr	r3, [pc, #60]	; (8007c8c <MX_SPI3_Init+0x74>)
 8007c4e:	2210      	movs	r2, #16
 8007c50:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007c52:	4b0e      	ldr	r3, [pc, #56]	; (8007c8c <MX_SPI3_Init+0x74>)
 8007c54:	2200      	movs	r2, #0
 8007c56:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8007c58:	4b0c      	ldr	r3, [pc, #48]	; (8007c8c <MX_SPI3_Init+0x74>)
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007c5e:	4b0b      	ldr	r3, [pc, #44]	; (8007c8c <MX_SPI3_Init+0x74>)
 8007c60:	2200      	movs	r2, #0
 8007c62:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8007c64:	4b09      	ldr	r3, [pc, #36]	; (8007c8c <MX_SPI3_Init+0x74>)
 8007c66:	2207      	movs	r2, #7
 8007c68:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8007c6a:	4b08      	ldr	r3, [pc, #32]	; (8007c8c <MX_SPI3_Init+0x74>)
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8007c70:	4b06      	ldr	r3, [pc, #24]	; (8007c8c <MX_SPI3_Init+0x74>)
 8007c72:	2208      	movs	r2, #8
 8007c74:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8007c76:	4805      	ldr	r0, [pc, #20]	; (8007c8c <MX_SPI3_Init+0x74>)
 8007c78:	f004 fac8 	bl	800c20c <HAL_SPI_Init>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d001      	beq.n	8007c86 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8007c82:	f7ff ff8b 	bl	8007b9c <Error_Handler>
  }

}
 8007c86:	bf00      	nop
 8007c88:	bd80      	pop	{r7, pc}
 8007c8a:	bf00      	nop
 8007c8c:	20002694 	.word	0x20002694
 8007c90:	40003c00 	.word	0x40003c00

08007c94 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b08a      	sub	sp, #40	; 0x28
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c9c:	f107 0314 	add.w	r3, r7, #20
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	601a      	str	r2, [r3, #0]
 8007ca4:	605a      	str	r2, [r3, #4]
 8007ca6:	609a      	str	r2, [r3, #8]
 8007ca8:	60da      	str	r2, [r3, #12]
 8007caa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4a17      	ldr	r2, [pc, #92]	; (8007d10 <HAL_SPI_MspInit+0x7c>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d128      	bne.n	8007d08 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8007cb6:	4b17      	ldr	r3, [pc, #92]	; (8007d14 <HAL_SPI_MspInit+0x80>)
 8007cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cba:	4a16      	ldr	r2, [pc, #88]	; (8007d14 <HAL_SPI_MspInit+0x80>)
 8007cbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cc0:	6593      	str	r3, [r2, #88]	; 0x58
 8007cc2:	4b14      	ldr	r3, [pc, #80]	; (8007d14 <HAL_SPI_MspInit+0x80>)
 8007cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cc6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007cca:	613b      	str	r3, [r7, #16]
 8007ccc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007cce:	4b11      	ldr	r3, [pc, #68]	; (8007d14 <HAL_SPI_MspInit+0x80>)
 8007cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cd2:	4a10      	ldr	r2, [pc, #64]	; (8007d14 <HAL_SPI_MspInit+0x80>)
 8007cd4:	f043 0304 	orr.w	r3, r3, #4
 8007cd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007cda:	4b0e      	ldr	r3, [pc, #56]	; (8007d14 <HAL_SPI_MspInit+0x80>)
 8007cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cde:	f003 0304 	and.w	r3, r3, #4
 8007ce2:	60fb      	str	r3, [r7, #12]
 8007ce4:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8007ce6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007cea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007cec:	2302      	movs	r3, #2
 8007cee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8007cf8:	2306      	movs	r3, #6
 8007cfa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007cfc:	f107 0314 	add.w	r3, r7, #20
 8007d00:	4619      	mov	r1, r3
 8007d02:	4805      	ldr	r0, [pc, #20]	; (8007d18 <HAL_SPI_MspInit+0x84>)
 8007d04:	f003 f8f0 	bl	800aee8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8007d08:	bf00      	nop
 8007d0a:	3728      	adds	r7, #40	; 0x28
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}
 8007d10:	40003c00 	.word	0x40003c00
 8007d14:	40021000 	.word	0x40021000
 8007d18:	48000800 	.word	0x48000800

08007d1c <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8007d20:	4b05      	ldr	r3, [pc, #20]	; (8007d38 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8007d22:	689b      	ldr	r3, [r3, #8]
 8007d24:	4a04      	ldr	r2, [pc, #16]	; (8007d38 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8007d26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007d2a:	6093      	str	r3, [r2, #8]
}
 8007d2c:	bf00      	nop
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d34:	4770      	bx	lr
 8007d36:	bf00      	nop
 8007d38:	40007000 	.word	0x40007000

08007d3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b082      	sub	sp, #8
 8007d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007d42:	4b0f      	ldr	r3, [pc, #60]	; (8007d80 <HAL_MspInit+0x44>)
 8007d44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d46:	4a0e      	ldr	r2, [pc, #56]	; (8007d80 <HAL_MspInit+0x44>)
 8007d48:	f043 0301 	orr.w	r3, r3, #1
 8007d4c:	6613      	str	r3, [r2, #96]	; 0x60
 8007d4e:	4b0c      	ldr	r3, [pc, #48]	; (8007d80 <HAL_MspInit+0x44>)
 8007d50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d52:	f003 0301 	and.w	r3, r3, #1
 8007d56:	607b      	str	r3, [r7, #4]
 8007d58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007d5a:	4b09      	ldr	r3, [pc, #36]	; (8007d80 <HAL_MspInit+0x44>)
 8007d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d5e:	4a08      	ldr	r2, [pc, #32]	; (8007d80 <HAL_MspInit+0x44>)
 8007d60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d64:	6593      	str	r3, [r2, #88]	; 0x58
 8007d66:	4b06      	ldr	r3, [pc, #24]	; (8007d80 <HAL_MspInit+0x44>)
 8007d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d6e:	603b      	str	r3, [r7, #0]
 8007d70:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 8007d72:	f7ff ffd3 	bl	8007d1c <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007d76:	bf00      	nop
 8007d78:	3708      	adds	r7, #8
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}
 8007d7e:	bf00      	nop
 8007d80:	40021000 	.word	0x40021000

08007d84 <LL_EXTI_IsActiveFlag_0_31>:
{
 8007d84:	b480      	push	{r7}
 8007d86:	b083      	sub	sp, #12
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8007d8c:	4b07      	ldr	r3, [pc, #28]	; (8007dac <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8007d8e:	695a      	ldr	r2, [r3, #20]
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	4013      	ands	r3, r2
 8007d94:	687a      	ldr	r2, [r7, #4]
 8007d96:	429a      	cmp	r2, r3
 8007d98:	d101      	bne.n	8007d9e <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	e000      	b.n	8007da0 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8007d9e:	2300      	movs	r3, #0
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	370c      	adds	r7, #12
 8007da4:	46bd      	mov	sp, r7
 8007da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007daa:	4770      	bx	lr
 8007dac:	40010400 	.word	0x40010400

08007db0 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8007db0:	b480      	push	{r7}
 8007db2:	b083      	sub	sp, #12
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8007db8:	4a04      	ldr	r2, [pc, #16]	; (8007dcc <LL_EXTI_ClearFlag_0_31+0x1c>)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6153      	str	r3, [r2, #20]
}
 8007dbe:	bf00      	nop
 8007dc0:	370c      	adds	r7, #12
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc8:	4770      	bx	lr
 8007dca:	bf00      	nop
 8007dcc:	40010400 	.word	0x40010400

08007dd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007dd4:	bf00      	nop
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ddc:	4770      	bx	lr

08007dde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007dde:	b480      	push	{r7}
 8007de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007de2:	e7fe      	b.n	8007de2 <HardFault_Handler+0x4>

08007de4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007de4:	b480      	push	{r7}
 8007de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007de8:	e7fe      	b.n	8007de8 <MemManage_Handler+0x4>

08007dea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007dea:	b480      	push	{r7}
 8007dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007dee:	e7fe      	b.n	8007dee <BusFault_Handler+0x4>

08007df0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007df0:	b480      	push	{r7}
 8007df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007df4:	e7fe      	b.n	8007df4 <UsageFault_Handler+0x4>

08007df6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007df6:	b480      	push	{r7}
 8007df8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007dfa:	bf00      	nop
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e02:	4770      	bx	lr

08007e04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007e04:	b480      	push	{r7}
 8007e06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007e08:	bf00      	nop
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e10:	4770      	bx	lr

08007e12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007e12:	b480      	push	{r7}
 8007e14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007e16:	bf00      	nop
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1e:	4770      	bx	lr

08007e20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007e24:	f000 fce6 	bl	80087f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007e28:	bf00      	nop
 8007e2a:	bd80      	pop	{r7, pc}

08007e2c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

	IM_BTN3_EXTI0_Handler();
 8007e30:	f7fc fdae 	bl	8004990 <IM_BTN3_EXTI0_Handler>

  /* USER CODE END EXTI0_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 8007e34:	2001      	movs	r0, #1
 8007e36:	f7ff ffa5 	bl	8007d84 <LL_EXTI_IsActiveFlag_0_31>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d002      	beq.n	8007e46 <EXTI0_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 8007e40:	2001      	movs	r0, #1
 8007e42:	f7ff ffb5 	bl	8007db0 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_0 */
  }
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8007e46:	bf00      	nop
 8007e48:	bd80      	pop	{r7, pc}

08007e4a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8007e4a:	b580      	push	{r7, lr}
 8007e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

	IM_BTN4_EXTI1_Handler();
 8007e4e:	f7fc fdc5 	bl	80049dc <IM_BTN4_EXTI1_Handler>

  /* USER CODE END EXTI1_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1) != RESET)
 8007e52:	2002      	movs	r0, #2
 8007e54:	f7ff ff96 	bl	8007d84 <LL_EXTI_IsActiveFlag_0_31>
 8007e58:	4603      	mov	r3, r0
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d002      	beq.n	8007e64 <EXTI1_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_1);
 8007e5e:	2002      	movs	r0, #2
 8007e60:	f7ff ffa6 	bl	8007db0 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_1 */
  }
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8007e64:	bf00      	nop
 8007e66:	bd80      	pop	{r7, pc}

08007e68 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

	IM_ENC_EXTI2_Handler();
 8007e6c:	f7fc fddc 	bl	8004a28 <IM_ENC_EXTI2_Handler>

  /* USER CODE END EXTI2_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2) != RESET)
 8007e70:	2004      	movs	r0, #4
 8007e72:	f7ff ff87 	bl	8007d84 <LL_EXTI_IsActiveFlag_0_31>
 8007e76:	4603      	mov	r3, r0
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d002      	beq.n	8007e82 <EXTI2_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_2);
 8007e7c:	2004      	movs	r0, #4
 8007e7e:	f7ff ff97 	bl	8007db0 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_2 */
  }
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8007e82:	bf00      	nop
 8007e84:	bd80      	pop	{r7, pc}
	...

08007e88 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8007e8c:	4802      	ldr	r0, [pc, #8]	; (8007e98 <DMA1_Channel1_IRQHandler+0x10>)
 8007e8e:	f002 fedb 	bl	800ac48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8007e92:	bf00      	nop
 8007e94:	bd80      	pop	{r7, pc}
 8007e96:	bf00      	nop
 8007e98:	20002528 	.word	0x20002528

08007e9c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8007ea0:	4802      	ldr	r0, [pc, #8]	; (8007eac <DMA1_Channel2_IRQHandler+0x10>)
 8007ea2:	f002 fed1 	bl	800ac48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8007ea6:	bf00      	nop
 8007ea8:	bd80      	pop	{r7, pc}
 8007eaa:	bf00      	nop
 8007eac:	200025d4 	.word	0x200025d4

08007eb0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2_ch1);
 8007eb4:	4802      	ldr	r0, [pc, #8]	; (8007ec0 <DMA1_Channel3_IRQHandler+0x10>)
 8007eb6:	f002 fec7 	bl	800ac48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8007eba:	bf00      	nop
 8007ebc:	bd80      	pop	{r7, pc}
 8007ebe:	bf00      	nop
 8007ec0:	20002634 	.word	0x20002634

08007ec4 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

	DM_UpdateDisplay();
 8007ec8:	f7f8 ff58 	bl	8000d7c <DM_UpdateDisplay>

	IM_ENC_DIRF_Handler();
 8007ecc:	f7fc fdd2 	bl	8004a74 <IM_ENC_DIRF_Handler>

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8007ed0:	4803      	ldr	r0, [pc, #12]	; (8007ee0 <TIM1_BRK_TIM15_IRQHandler+0x1c>)
 8007ed2:	f004 fbe6 	bl	800c6a2 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8007ed6:	4803      	ldr	r0, [pc, #12]	; (8007ee4 <TIM1_BRK_TIM15_IRQHandler+0x20>)
 8007ed8:	f004 fbe3 	bl	800c6a2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8007edc:	bf00      	nop
 8007ede:	bd80      	pop	{r7, pc}
 8007ee0:	20002828 	.word	0x20002828
 8007ee4:	20002744 	.word	0x20002744

08007ee8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8007eec:	4802      	ldr	r0, [pc, #8]	; (8007ef8 <TIM3_IRQHandler+0x10>)
 8007eee:	f004 fbd8 	bl	800c6a2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8007ef2:	bf00      	nop
 8007ef4:	bd80      	pop	{r7, pc}
 8007ef6:	bf00      	nop
 8007ef8:	200027dc 	.word	0x200027dc

08007efc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	IM_BTN1_EXTI14_Handler();
 8007f00:	f7fc fcf6 	bl	80048f0 <IM_BTN1_EXTI14_Handler>
	IM_BTN2_EXTI15_Handler();
 8007f04:	f7fc fd1c 	bl	8004940 <IM_BTN2_EXTI15_Handler>

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14) != RESET)
 8007f08:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8007f0c:	f7ff ff3a 	bl	8007d84 <LL_EXTI_IsActiveFlag_0_31>
 8007f10:	4603      	mov	r3, r0
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d003      	beq.n	8007f1e <EXTI15_10_IRQHandler+0x22>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_14);
 8007f16:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8007f1a:	f7ff ff49 	bl	8007db0 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_14 */
    
    /* USER CODE END LL_EXTI_LINE_14 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15) != RESET)
 8007f1e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007f22:	f7ff ff2f 	bl	8007d84 <LL_EXTI_IsActiveFlag_0_31>
 8007f26:	4603      	mov	r3, r0
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d003      	beq.n	8007f34 <EXTI15_10_IRQHandler+0x38>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_15);
 8007f2c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007f30:	f7ff ff3e 	bl	8007db0 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_15 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8007f34:	bf00      	nop
 8007f36:	bd80      	pop	{r7, pc}

08007f38 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	IM_SWEEP_UPDATE_TIM_IRQHandler();
 8007f3c:	f7fc fc80 	bl	8004840 <IM_SWEEP_UPDATE_TIM_IRQHandler>
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8007f40:	4802      	ldr	r0, [pc, #8]	; (8007f4c <TIM5_IRQHandler+0x14>)
 8007f42:	f004 fbae 	bl	800c6a2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8007f46:	bf00      	nop
 8007f48:	bd80      	pop	{r7, pc}
 8007f4a:	bf00      	nop
 8007f4c:	20002790 	.word	0x20002790

08007f50 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b086      	sub	sp, #24
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	60f8      	str	r0, [r7, #12]
 8007f58:	60b9      	str	r1, [r7, #8]
 8007f5a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	617b      	str	r3, [r7, #20]
 8007f60:	e00a      	b.n	8007f78 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8007f62:	f3af 8000 	nop.w
 8007f66:	4601      	mov	r1, r0
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	1c5a      	adds	r2, r3, #1
 8007f6c:	60ba      	str	r2, [r7, #8]
 8007f6e:	b2ca      	uxtb	r2, r1
 8007f70:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	3301      	adds	r3, #1
 8007f76:	617b      	str	r3, [r7, #20]
 8007f78:	697a      	ldr	r2, [r7, #20]
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	429a      	cmp	r2, r3
 8007f7e:	dbf0      	blt.n	8007f62 <_read+0x12>
	}

return len;
 8007f80:	687b      	ldr	r3, [r7, #4]
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3718      	adds	r7, #24
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}

08007f8a <_close>:
	}
	return len;
}

int _close(int file)
{
 8007f8a:	b480      	push	{r7}
 8007f8c:	b083      	sub	sp, #12
 8007f8e:	af00      	add	r7, sp, #0
 8007f90:	6078      	str	r0, [r7, #4]
	return -1;
 8007f92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007f96:	4618      	mov	r0, r3
 8007f98:	370c      	adds	r7, #12
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa0:	4770      	bx	lr

08007fa2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007fa2:	b480      	push	{r7}
 8007fa4:	b083      	sub	sp, #12
 8007fa6:	af00      	add	r7, sp, #0
 8007fa8:	6078      	str	r0, [r7, #4]
 8007faa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007fb2:	605a      	str	r2, [r3, #4]
	return 0;
 8007fb4:	2300      	movs	r3, #0
}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	370c      	adds	r7, #12
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc0:	4770      	bx	lr

08007fc2 <_isatty>:

int _isatty(int file)
{
 8007fc2:	b480      	push	{r7}
 8007fc4:	b083      	sub	sp, #12
 8007fc6:	af00      	add	r7, sp, #0
 8007fc8:	6078      	str	r0, [r7, #4]
	return 1;
 8007fca:	2301      	movs	r3, #1
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	370c      	adds	r7, #12
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd6:	4770      	bx	lr

08007fd8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b085      	sub	sp, #20
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	60f8      	str	r0, [r7, #12]
 8007fe0:	60b9      	str	r1, [r7, #8]
 8007fe2:	607a      	str	r2, [r7, #4]
	return 0;
 8007fe4:	2300      	movs	r3, #0
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3714      	adds	r7, #20
 8007fea:	46bd      	mov	sp, r7
 8007fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff0:	4770      	bx	lr
	...

08007ff4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b084      	sub	sp, #16
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007ffc:	4b11      	ldr	r3, [pc, #68]	; (8008044 <_sbrk+0x50>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d102      	bne.n	800800a <_sbrk+0x16>
		heap_end = &end;
 8008004:	4b0f      	ldr	r3, [pc, #60]	; (8008044 <_sbrk+0x50>)
 8008006:	4a10      	ldr	r2, [pc, #64]	; (8008048 <_sbrk+0x54>)
 8008008:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800800a:	4b0e      	ldr	r3, [pc, #56]	; (8008044 <_sbrk+0x50>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8008010:	4b0c      	ldr	r3, [pc, #48]	; (8008044 <_sbrk+0x50>)
 8008012:	681a      	ldr	r2, [r3, #0]
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	4413      	add	r3, r2
 8008018:	466a      	mov	r2, sp
 800801a:	4293      	cmp	r3, r2
 800801c:	d907      	bls.n	800802e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800801e:	f006 fc9b 	bl	800e958 <__errno>
 8008022:	4602      	mov	r2, r0
 8008024:	230c      	movs	r3, #12
 8008026:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8008028:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800802c:	e006      	b.n	800803c <_sbrk+0x48>
	}

	heap_end += incr;
 800802e:	4b05      	ldr	r3, [pc, #20]	; (8008044 <_sbrk+0x50>)
 8008030:	681a      	ldr	r2, [r3, #0]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	4413      	add	r3, r2
 8008036:	4a03      	ldr	r2, [pc, #12]	; (8008044 <_sbrk+0x50>)
 8008038:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800803a:	68fb      	ldr	r3, [r7, #12]
}
 800803c:	4618      	mov	r0, r3
 800803e:	3710      	adds	r7, #16
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}
 8008044:	20001ed4 	.word	0x20001ed4
 8008048:	20002918 	.word	0x20002918

0800804c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800804c:	b480      	push	{r7}
 800804e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8008050:	4b08      	ldr	r3, [pc, #32]	; (8008074 <SystemInit+0x28>)
 8008052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008056:	4a07      	ldr	r2, [pc, #28]	; (8008074 <SystemInit+0x28>)
 8008058:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800805c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008060:	4b04      	ldr	r3, [pc, #16]	; (8008074 <SystemInit+0x28>)
 8008062:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008066:	609a      	str	r2, [r3, #8]
#endif
}
 8008068:	bf00      	nop
 800806a:	46bd      	mov	sp, r7
 800806c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008070:	4770      	bx	lr
 8008072:	bf00      	nop
 8008074:	e000ed00 	.word	0xe000ed00

08008078 <MX_TIM1_Init>:
TIM_HandleTypeDef htim15;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b09a      	sub	sp, #104	; 0x68
 800807c:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 800807e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008082:	2224      	movs	r2, #36	; 0x24
 8008084:	2100      	movs	r1, #0
 8008086:	4618      	mov	r0, r3
 8008088:	f006 fc90 	bl	800e9ac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800808c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008090:	2200      	movs	r2, #0
 8008092:	601a      	str	r2, [r3, #0]
 8008094:	605a      	str	r2, [r3, #4]
 8008096:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8008098:	1d3b      	adds	r3, r7, #4
 800809a:	2234      	movs	r2, #52	; 0x34
 800809c:	2100      	movs	r1, #0
 800809e:	4618      	mov	r0, r3
 80080a0:	f006 fc84 	bl	800e9ac <memset>

  htim1.Instance = TIM1;
 80080a4:	4b2a      	ldr	r3, [pc, #168]	; (8008150 <MX_TIM1_Init+0xd8>)
 80080a6:	4a2b      	ldr	r2, [pc, #172]	; (8008154 <MX_TIM1_Init+0xdc>)
 80080a8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80080aa:	4b29      	ldr	r3, [pc, #164]	; (8008150 <MX_TIM1_Init+0xd8>)
 80080ac:	2200      	movs	r2, #0
 80080ae:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 80080b0:	4b27      	ldr	r3, [pc, #156]	; (8008150 <MX_TIM1_Init+0xd8>)
 80080b2:	2240      	movs	r2, #64	; 0x40
 80080b4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024;
 80080b6:	4b26      	ldr	r3, [pc, #152]	; (8008150 <MX_TIM1_Init+0xd8>)
 80080b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80080bc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80080be:	4b24      	ldr	r3, [pc, #144]	; (8008150 <MX_TIM1_Init+0xd8>)
 80080c0:	2200      	movs	r2, #0
 80080c2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80080c4:	4b22      	ldr	r3, [pc, #136]	; (8008150 <MX_TIM1_Init+0xd8>)
 80080c6:	2200      	movs	r2, #0
 80080c8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80080ca:	4b21      	ldr	r3, [pc, #132]	; (8008150 <MX_TIM1_Init+0xd8>)
 80080cc:	2280      	movs	r2, #128	; 0x80
 80080ce:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80080d0:	2303      	movs	r3, #3
 80080d2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80080d4:	2300      	movs	r3, #0
 80080d6:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80080d8:	2301      	movs	r3, #1
 80080da:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80080dc:	2300      	movs	r3, #0
 80080de:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 80080e0:	2300      	movs	r3, #0
 80080e2:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80080e4:	2300      	movs	r3, #0
 80080e6:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80080e8:	2301      	movs	r3, #1
 80080ea:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80080ec:	2300      	movs	r3, #0
 80080ee:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 80080f0:	2300      	movs	r3, #0
 80080f2:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80080f4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80080f8:	4619      	mov	r1, r3
 80080fa:	4815      	ldr	r0, [pc, #84]	; (8008150 <MX_TIM1_Init+0xd8>)
 80080fc:	f004 fa2b 	bl	800c556 <HAL_TIM_Encoder_Init>
 8008100:	4603      	mov	r3, r0
 8008102:	2b00      	cmp	r3, #0
 8008104:	d001      	beq.n	800810a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8008106:	f7ff fd49 	bl	8007b9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800810a:	2320      	movs	r3, #32
 800810c:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800810e:	2300      	movs	r3, #0
 8008110:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008112:	2300      	movs	r3, #0
 8008114:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8008116:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800811a:	4619      	mov	r1, r3
 800811c:	480c      	ldr	r0, [pc, #48]	; (8008150 <MX_TIM1_Init+0xd8>)
 800811e:	f004 fea5 	bl	800ce6c <HAL_TIMEx_MasterConfigSynchronization>
 8008122:	4603      	mov	r3, r0
 8008124:	2b00      	cmp	r3, #0
 8008126:	d001      	beq.n	800812c <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8008128:	f7ff fd38 	bl	8007b9c <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800812c:	2300      	movs	r3, #0
 800812e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8008130:	2300      	movs	r3, #0
 8008132:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8008134:	1d3b      	adds	r3, r7, #4
 8008136:	4619      	mov	r1, r3
 8008138:	4805      	ldr	r0, [pc, #20]	; (8008150 <MX_TIM1_Init+0xd8>)
 800813a:	f004 ff2d 	bl	800cf98 <HAL_TIMEx_ConfigBreakDeadTime>
 800813e:	4603      	mov	r3, r0
 8008140:	2b00      	cmp	r3, #0
 8008142:	d001      	beq.n	8008148 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8008144:	f7ff fd2a 	bl	8007b9c <Error_Handler>
  }

}
 8008148:	bf00      	nop
 800814a:	3768      	adds	r7, #104	; 0x68
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}
 8008150:	20002828 	.word	0x20002828
 8008154:	40012c00 	.word	0x40012c00

08008158 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b088      	sub	sp, #32
 800815c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800815e:	f107 0310 	add.w	r3, r7, #16
 8008162:	2200      	movs	r2, #0
 8008164:	601a      	str	r2, [r3, #0]
 8008166:	605a      	str	r2, [r3, #4]
 8008168:	609a      	str	r2, [r3, #8]
 800816a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800816c:	1d3b      	adds	r3, r7, #4
 800816e:	2200      	movs	r2, #0
 8008170:	601a      	str	r2, [r3, #0]
 8008172:	605a      	str	r2, [r3, #4]
 8008174:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8008176:	4b1d      	ldr	r3, [pc, #116]	; (80081ec <MX_TIM2_Init+0x94>)
 8008178:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800817c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800817e:	4b1b      	ldr	r3, [pc, #108]	; (80081ec <MX_TIM2_Init+0x94>)
 8008180:	2200      	movs	r2, #0
 8008182:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008184:	4b19      	ldr	r3, [pc, #100]	; (80081ec <MX_TIM2_Init+0x94>)
 8008186:	2200      	movs	r2, #0
 8008188:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 800818a:	4b18      	ldr	r3, [pc, #96]	; (80081ec <MX_TIM2_Init+0x94>)
 800818c:	2201      	movs	r2, #1
 800818e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008190:	4b16      	ldr	r3, [pc, #88]	; (80081ec <MX_TIM2_Init+0x94>)
 8008192:	2200      	movs	r2, #0
 8008194:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8008196:	4b15      	ldr	r3, [pc, #84]	; (80081ec <MX_TIM2_Init+0x94>)
 8008198:	2280      	movs	r2, #128	; 0x80
 800819a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800819c:	4813      	ldr	r0, [pc, #76]	; (80081ec <MX_TIM2_Init+0x94>)
 800819e:	f004 f8c7 	bl	800c330 <HAL_TIM_Base_Init>
 80081a2:	4603      	mov	r3, r0
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d001      	beq.n	80081ac <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80081a8:	f7ff fcf8 	bl	8007b9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80081ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80081b0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80081b2:	f107 0310 	add.w	r3, r7, #16
 80081b6:	4619      	mov	r1, r3
 80081b8:	480c      	ldr	r0, [pc, #48]	; (80081ec <MX_TIM2_Init+0x94>)
 80081ba:	f004 fbf1 	bl	800c9a0 <HAL_TIM_ConfigClockSource>
 80081be:	4603      	mov	r3, r0
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d001      	beq.n	80081c8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80081c4:	f7ff fcea 	bl	8007b9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80081c8:	2320      	movs	r3, #32
 80081ca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80081cc:	2300      	movs	r3, #0
 80081ce:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80081d0:	1d3b      	adds	r3, r7, #4
 80081d2:	4619      	mov	r1, r3
 80081d4:	4805      	ldr	r0, [pc, #20]	; (80081ec <MX_TIM2_Init+0x94>)
 80081d6:	f004 fe49 	bl	800ce6c <HAL_TIMEx_MasterConfigSynchronization>
 80081da:	4603      	mov	r3, r0
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d001      	beq.n	80081e4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80081e0:	f7ff fcdc 	bl	8007b9c <Error_Handler>
  }

}
 80081e4:	bf00      	nop
 80081e6:	3720      	adds	r7, #32
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}
 80081ec:	20002874 	.word	0x20002874

080081f0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b088      	sub	sp, #32
 80081f4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80081f6:	f107 0310 	add.w	r3, r7, #16
 80081fa:	2200      	movs	r2, #0
 80081fc:	601a      	str	r2, [r3, #0]
 80081fe:	605a      	str	r2, [r3, #4]
 8008200:	609a      	str	r2, [r3, #8]
 8008202:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008204:	1d3b      	adds	r3, r7, #4
 8008206:	2200      	movs	r2, #0
 8008208:	601a      	str	r2, [r3, #0]
 800820a:	605a      	str	r2, [r3, #4]
 800820c:	609a      	str	r2, [r3, #8]

  htim3.Instance = TIM3;
 800820e:	4b1d      	ldr	r3, [pc, #116]	; (8008284 <MX_TIM3_Init+0x94>)
 8008210:	4a1d      	ldr	r2, [pc, #116]	; (8008288 <MX_TIM3_Init+0x98>)
 8008212:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8008214:	4b1b      	ldr	r3, [pc, #108]	; (8008284 <MX_TIM3_Init+0x94>)
 8008216:	2200      	movs	r2, #0
 8008218:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 800821a:	4b1a      	ldr	r3, [pc, #104]	; (8008284 <MX_TIM3_Init+0x94>)
 800821c:	2210      	movs	r2, #16
 800821e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1;
 8008220:	4b18      	ldr	r3, [pc, #96]	; (8008284 <MX_TIM3_Init+0x94>)
 8008222:	2201      	movs	r2, #1
 8008224:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8008226:	4b17      	ldr	r3, [pc, #92]	; (8008284 <MX_TIM3_Init+0x94>)
 8008228:	f44f 7200 	mov.w	r2, #512	; 0x200
 800822c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800822e:	4b15      	ldr	r3, [pc, #84]	; (8008284 <MX_TIM3_Init+0x94>)
 8008230:	2200      	movs	r2, #0
 8008232:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8008234:	4813      	ldr	r0, [pc, #76]	; (8008284 <MX_TIM3_Init+0x94>)
 8008236:	f004 f87b 	bl	800c330 <HAL_TIM_Base_Init>
 800823a:	4603      	mov	r3, r0
 800823c:	2b00      	cmp	r3, #0
 800823e:	d001      	beq.n	8008244 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8008240:	f7ff fcac 	bl	8007b9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008244:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008248:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800824a:	f107 0310 	add.w	r3, r7, #16
 800824e:	4619      	mov	r1, r3
 8008250:	480c      	ldr	r0, [pc, #48]	; (8008284 <MX_TIM3_Init+0x94>)
 8008252:	f004 fba5 	bl	800c9a0 <HAL_TIM_ConfigClockSource>
 8008256:	4603      	mov	r3, r0
 8008258:	2b00      	cmp	r3, #0
 800825a:	d001      	beq.n	8008260 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800825c:	f7ff fc9e 	bl	8007b9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008260:	2300      	movs	r3, #0
 8008262:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008264:	2300      	movs	r3, #0
 8008266:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8008268:	1d3b      	adds	r3, r7, #4
 800826a:	4619      	mov	r1, r3
 800826c:	4805      	ldr	r0, [pc, #20]	; (8008284 <MX_TIM3_Init+0x94>)
 800826e:	f004 fdfd 	bl	800ce6c <HAL_TIMEx_MasterConfigSynchronization>
 8008272:	4603      	mov	r3, r0
 8008274:	2b00      	cmp	r3, #0
 8008276:	d001      	beq.n	800827c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8008278:	f7ff fc90 	bl	8007b9c <Error_Handler>
  }

}
 800827c:	bf00      	nop
 800827e:	3720      	adds	r7, #32
 8008280:	46bd      	mov	sp, r7
 8008282:	bd80      	pop	{r7, pc}
 8008284:	200027dc 	.word	0x200027dc
 8008288:	40000400 	.word	0x40000400

0800828c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b088      	sub	sp, #32
 8008290:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008292:	f107 0310 	add.w	r3, r7, #16
 8008296:	2200      	movs	r2, #0
 8008298:	601a      	str	r2, [r3, #0]
 800829a:	605a      	str	r2, [r3, #4]
 800829c:	609a      	str	r2, [r3, #8]
 800829e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80082a0:	1d3b      	adds	r3, r7, #4
 80082a2:	2200      	movs	r2, #0
 80082a4:	601a      	str	r2, [r3, #0]
 80082a6:	605a      	str	r2, [r3, #4]
 80082a8:	609a      	str	r2, [r3, #8]

  htim5.Instance = TIM5;
 80082aa:	4b1d      	ldr	r3, [pc, #116]	; (8008320 <MX_TIM5_Init+0x94>)
 80082ac:	4a1d      	ldr	r2, [pc, #116]	; (8008324 <MX_TIM5_Init+0x98>)
 80082ae:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80082b0:	4b1b      	ldr	r3, [pc, #108]	; (8008320 <MX_TIM5_Init+0x94>)
 80082b2:	2200      	movs	r2, #0
 80082b4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80082b6:	4b1a      	ldr	r3, [pc, #104]	; (8008320 <MX_TIM5_Init+0x94>)
 80082b8:	2200      	movs	r2, #0
 80082ba:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1024;
 80082bc:	4b18      	ldr	r3, [pc, #96]	; (8008320 <MX_TIM5_Init+0x94>)
 80082be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80082c2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80082c4:	4b16      	ldr	r3, [pc, #88]	; (8008320 <MX_TIM5_Init+0x94>)
 80082c6:	2200      	movs	r2, #0
 80082c8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80082ca:	4b15      	ldr	r3, [pc, #84]	; (8008320 <MX_TIM5_Init+0x94>)
 80082cc:	2280      	movs	r2, #128	; 0x80
 80082ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80082d0:	4813      	ldr	r0, [pc, #76]	; (8008320 <MX_TIM5_Init+0x94>)
 80082d2:	f004 f82d 	bl	800c330 <HAL_TIM_Base_Init>
 80082d6:	4603      	mov	r3, r0
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d001      	beq.n	80082e0 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80082dc:	f7ff fc5e 	bl	8007b9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80082e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80082e4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80082e6:	f107 0310 	add.w	r3, r7, #16
 80082ea:	4619      	mov	r1, r3
 80082ec:	480c      	ldr	r0, [pc, #48]	; (8008320 <MX_TIM5_Init+0x94>)
 80082ee:	f004 fb57 	bl	800c9a0 <HAL_TIM_ConfigClockSource>
 80082f2:	4603      	mov	r3, r0
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d001      	beq.n	80082fc <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80082f8:	f7ff fc50 	bl	8007b9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80082fc:	2300      	movs	r3, #0
 80082fe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008300:	2300      	movs	r3, #0
 8008302:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8008304:	1d3b      	adds	r3, r7, #4
 8008306:	4619      	mov	r1, r3
 8008308:	4805      	ldr	r0, [pc, #20]	; (8008320 <MX_TIM5_Init+0x94>)
 800830a:	f004 fdaf 	bl	800ce6c <HAL_TIMEx_MasterConfigSynchronization>
 800830e:	4603      	mov	r3, r0
 8008310:	2b00      	cmp	r3, #0
 8008312:	d001      	beq.n	8008318 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8008314:	f7ff fc42 	bl	8007b9c <Error_Handler>
  }

}
 8008318:	bf00      	nop
 800831a:	3720      	adds	r7, #32
 800831c:	46bd      	mov	sp, r7
 800831e:	bd80      	pop	{r7, pc}
 8008320:	20002790 	.word	0x20002790
 8008324:	40000c00 	.word	0x40000c00

08008328 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b094      	sub	sp, #80	; 0x50
 800832c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800832e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008332:	2200      	movs	r2, #0
 8008334:	601a      	str	r2, [r3, #0]
 8008336:	605a      	str	r2, [r3, #4]
 8008338:	609a      	str	r2, [r3, #8]
 800833a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800833c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008340:	2200      	movs	r2, #0
 8008342:	601a      	str	r2, [r3, #0]
 8008344:	605a      	str	r2, [r3, #4]
 8008346:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8008348:	463b      	mov	r3, r7
 800834a:	2234      	movs	r2, #52	; 0x34
 800834c:	2100      	movs	r1, #0
 800834e:	4618      	mov	r0, r3
 8008350:	f006 fb2c 	bl	800e9ac <memset>

  htim8.Instance = TIM8;
 8008354:	4b26      	ldr	r3, [pc, #152]	; (80083f0 <MX_TIM8_Init+0xc8>)
 8008356:	4a27      	ldr	r2, [pc, #156]	; (80083f4 <MX_TIM8_Init+0xcc>)
 8008358:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800835a:	4b25      	ldr	r3, [pc, #148]	; (80083f0 <MX_TIM8_Init+0xc8>)
 800835c:	2200      	movs	r2, #0
 800835e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008360:	4b23      	ldr	r3, [pc, #140]	; (80083f0 <MX_TIM8_Init+0xc8>)
 8008362:	2200      	movs	r2, #0
 8008364:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1;
 8008366:	4b22      	ldr	r3, [pc, #136]	; (80083f0 <MX_TIM8_Init+0xc8>)
 8008368:	2201      	movs	r2, #1
 800836a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800836c:	4b20      	ldr	r3, [pc, #128]	; (80083f0 <MX_TIM8_Init+0xc8>)
 800836e:	2200      	movs	r2, #0
 8008370:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8008372:	4b1f      	ldr	r3, [pc, #124]	; (80083f0 <MX_TIM8_Init+0xc8>)
 8008374:	2200      	movs	r2, #0
 8008376:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8008378:	4b1d      	ldr	r3, [pc, #116]	; (80083f0 <MX_TIM8_Init+0xc8>)
 800837a:	2280      	movs	r2, #128	; 0x80
 800837c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800837e:	481c      	ldr	r0, [pc, #112]	; (80083f0 <MX_TIM8_Init+0xc8>)
 8008380:	f003 ffd6 	bl	800c330 <HAL_TIM_Base_Init>
 8008384:	4603      	mov	r3, r0
 8008386:	2b00      	cmp	r3, #0
 8008388:	d001      	beq.n	800838e <MX_TIM8_Init+0x66>
  {
    Error_Handler();
 800838a:	f7ff fc07 	bl	8007b9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800838e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008392:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8008394:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008398:	4619      	mov	r1, r3
 800839a:	4815      	ldr	r0, [pc, #84]	; (80083f0 <MX_TIM8_Init+0xc8>)
 800839c:	f004 fb00 	bl	800c9a0 <HAL_TIM_ConfigClockSource>
 80083a0:	4603      	mov	r3, r0
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d001      	beq.n	80083aa <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 80083a6:	f7ff fbf9 	bl	8007b9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80083aa:	2320      	movs	r3, #32
 80083ac:	637b      	str	r3, [r7, #52]	; 0x34
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80083ae:	2300      	movs	r3, #0
 80083b0:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80083b2:	2300      	movs	r3, #0
 80083b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80083b6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80083ba:	4619      	mov	r1, r3
 80083bc:	480c      	ldr	r0, [pc, #48]	; (80083f0 <MX_TIM8_Init+0xc8>)
 80083be:	f004 fd55 	bl	800ce6c <HAL_TIMEx_MasterConfigSynchronization>
 80083c2:	4603      	mov	r3, r0
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d001      	beq.n	80083cc <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 80083c8:	f7ff fbe8 	bl	8007b9c <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80083cc:	2300      	movs	r3, #0
 80083ce:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80083d0:	2300      	movs	r3, #0
 80083d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80083d4:	463b      	mov	r3, r7
 80083d6:	4619      	mov	r1, r3
 80083d8:	4805      	ldr	r0, [pc, #20]	; (80083f0 <MX_TIM8_Init+0xc8>)
 80083da:	f004 fddd 	bl	800cf98 <HAL_TIMEx_ConfigBreakDeadTime>
 80083de:	4603      	mov	r3, r0
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d001      	beq.n	80083e8 <MX_TIM8_Init+0xc0>
  {
    Error_Handler();
 80083e4:	f7ff fbda 	bl	8007b9c <Error_Handler>
  }

}
 80083e8:	bf00      	nop
 80083ea:	3750      	adds	r7, #80	; 0x50
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bd80      	pop	{r7, pc}
 80083f0:	200026f8 	.word	0x200026f8
 80083f4:	40013400 	.word	0x40013400

080083f8 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b088      	sub	sp, #32
 80083fc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80083fe:	f107 0310 	add.w	r3, r7, #16
 8008402:	2200      	movs	r2, #0
 8008404:	601a      	str	r2, [r3, #0]
 8008406:	605a      	str	r2, [r3, #4]
 8008408:	609a      	str	r2, [r3, #8]
 800840a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800840c:	1d3b      	adds	r3, r7, #4
 800840e:	2200      	movs	r2, #0
 8008410:	601a      	str	r2, [r3, #0]
 8008412:	605a      	str	r2, [r3, #4]
 8008414:	609a      	str	r2, [r3, #8]

  htim15.Instance = TIM15;
 8008416:	4b1f      	ldr	r3, [pc, #124]	; (8008494 <MX_TIM15_Init+0x9c>)
 8008418:	4a1f      	ldr	r2, [pc, #124]	; (8008498 <MX_TIM15_Init+0xa0>)
 800841a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 1024;
 800841c:	4b1d      	ldr	r3, [pc, #116]	; (8008494 <MX_TIM15_Init+0x9c>)
 800841e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008422:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008424:	4b1b      	ldr	r3, [pc, #108]	; (8008494 <MX_TIM15_Init+0x9c>)
 8008426:	2200      	movs	r2, #0
 8008428:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1024;
 800842a:	4b1a      	ldr	r3, [pc, #104]	; (8008494 <MX_TIM15_Init+0x9c>)
 800842c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008430:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008432:	4b18      	ldr	r3, [pc, #96]	; (8008494 <MX_TIM15_Init+0x9c>)
 8008434:	2200      	movs	r2, #0
 8008436:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8008438:	4b16      	ldr	r3, [pc, #88]	; (8008494 <MX_TIM15_Init+0x9c>)
 800843a:	2200      	movs	r2, #0
 800843c:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800843e:	4b15      	ldr	r3, [pc, #84]	; (8008494 <MX_TIM15_Init+0x9c>)
 8008440:	2200      	movs	r2, #0
 8008442:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8008444:	4813      	ldr	r0, [pc, #76]	; (8008494 <MX_TIM15_Init+0x9c>)
 8008446:	f003 ff73 	bl	800c330 <HAL_TIM_Base_Init>
 800844a:	4603      	mov	r3, r0
 800844c:	2b00      	cmp	r3, #0
 800844e:	d001      	beq.n	8008454 <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 8008450:	f7ff fba4 	bl	8007b9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008454:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008458:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800845a:	f107 0310 	add.w	r3, r7, #16
 800845e:	4619      	mov	r1, r3
 8008460:	480c      	ldr	r0, [pc, #48]	; (8008494 <MX_TIM15_Init+0x9c>)
 8008462:	f004 fa9d 	bl	800c9a0 <HAL_TIM_ConfigClockSource>
 8008466:	4603      	mov	r3, r0
 8008468:	2b00      	cmp	r3, #0
 800846a:	d001      	beq.n	8008470 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 800846c:	f7ff fb96 	bl	8007b9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008470:	2300      	movs	r3, #0
 8008472:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008474:	2300      	movs	r3, #0
 8008476:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8008478:	1d3b      	adds	r3, r7, #4
 800847a:	4619      	mov	r1, r3
 800847c:	4805      	ldr	r0, [pc, #20]	; (8008494 <MX_TIM15_Init+0x9c>)
 800847e:	f004 fcf5 	bl	800ce6c <HAL_TIMEx_MasterConfigSynchronization>
 8008482:	4603      	mov	r3, r0
 8008484:	2b00      	cmp	r3, #0
 8008486:	d001      	beq.n	800848c <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8008488:	f7ff fb88 	bl	8007b9c <Error_Handler>
  }

}
 800848c:	bf00      	nop
 800848e:	3720      	adds	r7, #32
 8008490:	46bd      	mov	sp, r7
 8008492:	bd80      	pop	{r7, pc}
 8008494:	20002744 	.word	0x20002744
 8008498:	40014000 	.word	0x40014000

0800849c <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 80084a0:	4b10      	ldr	r3, [pc, #64]	; (80084e4 <MX_TIM16_Init+0x48>)
 80084a2:	4a11      	ldr	r2, [pc, #68]	; (80084e8 <MX_TIM16_Init+0x4c>)
 80084a4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 65535;
 80084a6:	4b0f      	ldr	r3, [pc, #60]	; (80084e4 <MX_TIM16_Init+0x48>)
 80084a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80084ac:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80084ae:	4b0d      	ldr	r3, [pc, #52]	; (80084e4 <MX_TIM16_Init+0x48>)
 80084b0:	2200      	movs	r2, #0
 80084b2:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80084b4:	4b0b      	ldr	r3, [pc, #44]	; (80084e4 <MX_TIM16_Init+0x48>)
 80084b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80084ba:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80084bc:	4b09      	ldr	r3, [pc, #36]	; (80084e4 <MX_TIM16_Init+0x48>)
 80084be:	2200      	movs	r2, #0
 80084c0:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80084c2:	4b08      	ldr	r3, [pc, #32]	; (80084e4 <MX_TIM16_Init+0x48>)
 80084c4:	2200      	movs	r2, #0
 80084c6:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80084c8:	4b06      	ldr	r3, [pc, #24]	; (80084e4 <MX_TIM16_Init+0x48>)
 80084ca:	2200      	movs	r2, #0
 80084cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80084ce:	4805      	ldr	r0, [pc, #20]	; (80084e4 <MX_TIM16_Init+0x48>)
 80084d0:	f003 ff2e 	bl	800c330 <HAL_TIM_Base_Init>
 80084d4:	4603      	mov	r3, r0
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d001      	beq.n	80084de <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 80084da:	f7ff fb5f 	bl	8007b9c <Error_Handler>
  }

}
 80084de:	bf00      	nop
 80084e0:	bd80      	pop	{r7, pc}
 80084e2:	bf00      	nop
 80084e4:	200028c0 	.word	0x200028c0
 80084e8:	40014400 	.word	0x40014400

080084ec <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b08a      	sub	sp, #40	; 0x28
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80084f4:	f107 0314 	add.w	r3, r7, #20
 80084f8:	2200      	movs	r2, #0
 80084fa:	601a      	str	r2, [r3, #0]
 80084fc:	605a      	str	r2, [r3, #4]
 80084fe:	609a      	str	r2, [r3, #8]
 8008500:	60da      	str	r2, [r3, #12]
 8008502:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	4a1b      	ldr	r2, [pc, #108]	; (8008578 <HAL_TIM_Encoder_MspInit+0x8c>)
 800850a:	4293      	cmp	r3, r2
 800850c:	d12f      	bne.n	800856e <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800850e:	4b1b      	ldr	r3, [pc, #108]	; (800857c <HAL_TIM_Encoder_MspInit+0x90>)
 8008510:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008512:	4a1a      	ldr	r2, [pc, #104]	; (800857c <HAL_TIM_Encoder_MspInit+0x90>)
 8008514:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008518:	6613      	str	r3, [r2, #96]	; 0x60
 800851a:	4b18      	ldr	r3, [pc, #96]	; (800857c <HAL_TIM_Encoder_MspInit+0x90>)
 800851c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800851e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008522:	613b      	str	r3, [r7, #16]
 8008524:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008526:	4b15      	ldr	r3, [pc, #84]	; (800857c <HAL_TIM_Encoder_MspInit+0x90>)
 8008528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800852a:	4a14      	ldr	r2, [pc, #80]	; (800857c <HAL_TIM_Encoder_MspInit+0x90>)
 800852c:	f043 0304 	orr.w	r3, r3, #4
 8008530:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008532:	4b12      	ldr	r3, [pc, #72]	; (800857c <HAL_TIM_Encoder_MspInit+0x90>)
 8008534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008536:	f003 0304 	and.w	r3, r3, #4
 800853a:	60fb      	str	r3, [r7, #12]
 800853c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800853e:	2303      	movs	r3, #3
 8008540:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008542:	2302      	movs	r3, #2
 8008544:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008546:	2300      	movs	r3, #0
 8008548:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800854a:	2300      	movs	r3, #0
 800854c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800854e:	2302      	movs	r3, #2
 8008550:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008552:	f107 0314 	add.w	r3, r7, #20
 8008556:	4619      	mov	r1, r3
 8008558:	4809      	ldr	r0, [pc, #36]	; (8008580 <HAL_TIM_Encoder_MspInit+0x94>)
 800855a:	f002 fcc5 	bl	800aee8 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800855e:	2200      	movs	r2, #0
 8008560:	2100      	movs	r1, #0
 8008562:	2018      	movs	r0, #24
 8008564:	f001 fda1 	bl	800a0aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8008568:	2018      	movs	r0, #24
 800856a:	f001 fdb8 	bl	800a0de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800856e:	bf00      	nop
 8008570:	3728      	adds	r7, #40	; 0x28
 8008572:	46bd      	mov	sp, r7
 8008574:	bd80      	pop	{r7, pc}
 8008576:	bf00      	nop
 8008578:	40012c00 	.word	0x40012c00
 800857c:	40021000 	.word	0x40021000
 8008580:	48000800 	.word	0x48000800

08008584 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b08e      	sub	sp, #56	; 0x38
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800858c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008590:	2200      	movs	r2, #0
 8008592:	601a      	str	r2, [r3, #0]
 8008594:	605a      	str	r2, [r3, #4]
 8008596:	609a      	str	r2, [r3, #8]
 8008598:	60da      	str	r2, [r3, #12]
 800859a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085a4:	d10c      	bne.n	80085c0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80085a6:	4b4f      	ldr	r3, [pc, #316]	; (80086e4 <HAL_TIM_Base_MspInit+0x160>)
 80085a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085aa:	4a4e      	ldr	r2, [pc, #312]	; (80086e4 <HAL_TIM_Base_MspInit+0x160>)
 80085ac:	f043 0301 	orr.w	r3, r3, #1
 80085b0:	6593      	str	r3, [r2, #88]	; 0x58
 80085b2:	4b4c      	ldr	r3, [pc, #304]	; (80086e4 <HAL_TIM_Base_MspInit+0x160>)
 80085b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085b6:	f003 0301 	and.w	r3, r3, #1
 80085ba:	623b      	str	r3, [r7, #32]
 80085bc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_TIM16_CLK_ENABLE();
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 80085be:	e08d      	b.n	80086dc <HAL_TIM_Base_MspInit+0x158>
  else if(tim_baseHandle->Instance==TIM3)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	4a48      	ldr	r2, [pc, #288]	; (80086e8 <HAL_TIM_Base_MspInit+0x164>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d114      	bne.n	80085f4 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80085ca:	4b46      	ldr	r3, [pc, #280]	; (80086e4 <HAL_TIM_Base_MspInit+0x160>)
 80085cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085ce:	4a45      	ldr	r2, [pc, #276]	; (80086e4 <HAL_TIM_Base_MspInit+0x160>)
 80085d0:	f043 0302 	orr.w	r3, r3, #2
 80085d4:	6593      	str	r3, [r2, #88]	; 0x58
 80085d6:	4b43      	ldr	r3, [pc, #268]	; (80086e4 <HAL_TIM_Base_MspInit+0x160>)
 80085d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085da:	f003 0302 	and.w	r3, r3, #2
 80085de:	61fb      	str	r3, [r7, #28]
 80085e0:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80085e2:	2200      	movs	r2, #0
 80085e4:	2100      	movs	r1, #0
 80085e6:	201d      	movs	r0, #29
 80085e8:	f001 fd5f 	bl	800a0aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80085ec:	201d      	movs	r0, #29
 80085ee:	f001 fd76 	bl	800a0de <HAL_NVIC_EnableIRQ>
}
 80085f2:	e073      	b.n	80086dc <HAL_TIM_Base_MspInit+0x158>
  else if(tim_baseHandle->Instance==TIM5)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	4a3c      	ldr	r2, [pc, #240]	; (80086ec <HAL_TIM_Base_MspInit+0x168>)
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d131      	bne.n	8008662 <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80085fe:	4b39      	ldr	r3, [pc, #228]	; (80086e4 <HAL_TIM_Base_MspInit+0x160>)
 8008600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008602:	4a38      	ldr	r2, [pc, #224]	; (80086e4 <HAL_TIM_Base_MspInit+0x160>)
 8008604:	f043 0308 	orr.w	r3, r3, #8
 8008608:	6593      	str	r3, [r2, #88]	; 0x58
 800860a:	4b36      	ldr	r3, [pc, #216]	; (80086e4 <HAL_TIM_Base_MspInit+0x160>)
 800860c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800860e:	f003 0308 	and.w	r3, r3, #8
 8008612:	61bb      	str	r3, [r7, #24]
 8008614:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008616:	4b33      	ldr	r3, [pc, #204]	; (80086e4 <HAL_TIM_Base_MspInit+0x160>)
 8008618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800861a:	4a32      	ldr	r2, [pc, #200]	; (80086e4 <HAL_TIM_Base_MspInit+0x160>)
 800861c:	f043 0301 	orr.w	r3, r3, #1
 8008620:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008622:	4b30      	ldr	r3, [pc, #192]	; (80086e4 <HAL_TIM_Base_MspInit+0x160>)
 8008624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008626:	f003 0301 	and.w	r3, r3, #1
 800862a:	617b      	str	r3, [r7, #20]
 800862c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800862e:	2301      	movs	r3, #1
 8008630:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008632:	2302      	movs	r3, #2
 8008634:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008636:	2300      	movs	r3, #0
 8008638:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800863a:	2300      	movs	r3, #0
 800863c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800863e:	2302      	movs	r3, #2
 8008640:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008642:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008646:	4619      	mov	r1, r3
 8008648:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800864c:	f002 fc4c 	bl	800aee8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 2, 0);
 8008650:	2200      	movs	r2, #0
 8008652:	2102      	movs	r1, #2
 8008654:	2032      	movs	r0, #50	; 0x32
 8008656:	f001 fd28 	bl	800a0aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800865a:	2032      	movs	r0, #50	; 0x32
 800865c:	f001 fd3f 	bl	800a0de <HAL_NVIC_EnableIRQ>
}
 8008660:	e03c      	b.n	80086dc <HAL_TIM_Base_MspInit+0x158>
  else if(tim_baseHandle->Instance==TIM8)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	4a22      	ldr	r2, [pc, #136]	; (80086f0 <HAL_TIM_Base_MspInit+0x16c>)
 8008668:	4293      	cmp	r3, r2
 800866a:	d10c      	bne.n	8008686 <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800866c:	4b1d      	ldr	r3, [pc, #116]	; (80086e4 <HAL_TIM_Base_MspInit+0x160>)
 800866e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008670:	4a1c      	ldr	r2, [pc, #112]	; (80086e4 <HAL_TIM_Base_MspInit+0x160>)
 8008672:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008676:	6613      	str	r3, [r2, #96]	; 0x60
 8008678:	4b1a      	ldr	r3, [pc, #104]	; (80086e4 <HAL_TIM_Base_MspInit+0x160>)
 800867a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800867c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008680:	613b      	str	r3, [r7, #16]
 8008682:	693b      	ldr	r3, [r7, #16]
}
 8008684:	e02a      	b.n	80086dc <HAL_TIM_Base_MspInit+0x158>
  else if(tim_baseHandle->Instance==TIM15)
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	4a1a      	ldr	r2, [pc, #104]	; (80086f4 <HAL_TIM_Base_MspInit+0x170>)
 800868c:	4293      	cmp	r3, r2
 800868e:	d114      	bne.n	80086ba <HAL_TIM_Base_MspInit+0x136>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8008690:	4b14      	ldr	r3, [pc, #80]	; (80086e4 <HAL_TIM_Base_MspInit+0x160>)
 8008692:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008694:	4a13      	ldr	r2, [pc, #76]	; (80086e4 <HAL_TIM_Base_MspInit+0x160>)
 8008696:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800869a:	6613      	str	r3, [r2, #96]	; 0x60
 800869c:	4b11      	ldr	r3, [pc, #68]	; (80086e4 <HAL_TIM_Base_MspInit+0x160>)
 800869e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80086a4:	60fb      	str	r3, [r7, #12]
 80086a6:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80086a8:	2200      	movs	r2, #0
 80086aa:	2100      	movs	r1, #0
 80086ac:	2018      	movs	r0, #24
 80086ae:	f001 fcfc 	bl	800a0aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80086b2:	2018      	movs	r0, #24
 80086b4:	f001 fd13 	bl	800a0de <HAL_NVIC_EnableIRQ>
}
 80086b8:	e010      	b.n	80086dc <HAL_TIM_Base_MspInit+0x158>
  else if(tim_baseHandle->Instance==TIM16)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	4a0e      	ldr	r2, [pc, #56]	; (80086f8 <HAL_TIM_Base_MspInit+0x174>)
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d10b      	bne.n	80086dc <HAL_TIM_Base_MspInit+0x158>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80086c4:	4b07      	ldr	r3, [pc, #28]	; (80086e4 <HAL_TIM_Base_MspInit+0x160>)
 80086c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086c8:	4a06      	ldr	r2, [pc, #24]	; (80086e4 <HAL_TIM_Base_MspInit+0x160>)
 80086ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80086ce:	6613      	str	r3, [r2, #96]	; 0x60
 80086d0:	4b04      	ldr	r3, [pc, #16]	; (80086e4 <HAL_TIM_Base_MspInit+0x160>)
 80086d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086d8:	60bb      	str	r3, [r7, #8]
 80086da:	68bb      	ldr	r3, [r7, #8]
}
 80086dc:	bf00      	nop
 80086de:	3738      	adds	r7, #56	; 0x38
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}
 80086e4:	40021000 	.word	0x40021000
 80086e8:	40000400 	.word	0x40000400
 80086ec:	40000c00 	.word	0x40000c00
 80086f0:	40013400 	.word	0x40013400
 80086f4:	40014000 	.word	0x40014000
 80086f8:	40014400 	.word	0x40014400

080086fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80086fc:	480d      	ldr	r0, [pc, #52]	; (8008734 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80086fe:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008700:	480d      	ldr	r0, [pc, #52]	; (8008738 <LoopForever+0x6>)
  ldr r1, =_edata
 8008702:	490e      	ldr	r1, [pc, #56]	; (800873c <LoopForever+0xa>)
  ldr r2, =_sidata
 8008704:	4a0e      	ldr	r2, [pc, #56]	; (8008740 <LoopForever+0xe>)
  movs r3, #0
 8008706:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8008708:	e002      	b.n	8008710 <LoopCopyDataInit>

0800870a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800870a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800870c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800870e:	3304      	adds	r3, #4

08008710 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008710:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008712:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008714:	d3f9      	bcc.n	800870a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008716:	4a0b      	ldr	r2, [pc, #44]	; (8008744 <LoopForever+0x12>)
  ldr r4, =_ebss
 8008718:	4c0b      	ldr	r4, [pc, #44]	; (8008748 <LoopForever+0x16>)
  movs r3, #0
 800871a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800871c:	e001      	b.n	8008722 <LoopFillZerobss>

0800871e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800871e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008720:	3204      	adds	r2, #4

08008722 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008722:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008724:	d3fb      	bcc.n	800871e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8008726:	f7ff fc91 	bl	800804c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800872a:	f006 f91b 	bl	800e964 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800872e:	f7ff f955 	bl	80079dc <main>

08008732 <LoopForever>:

LoopForever:
    b LoopForever
 8008732:	e7fe      	b.n	8008732 <LoopForever>
  ldr   r0, =_estack
 8008734:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8008738:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800873c:	20001e78 	.word	0x20001e78
  ldr r2, =_sidata
 8008740:	08013c88 	.word	0x08013c88
  ldr r2, =_sbss
 8008744:	20001e78 	.word	0x20001e78
  ldr r4, =_ebss
 8008748:	20002914 	.word	0x20002914

0800874c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800874c:	e7fe      	b.n	800874c <ADC1_2_IRQHandler>

0800874e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800874e:	b580      	push	{r7, lr}
 8008750:	b082      	sub	sp, #8
 8008752:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8008754:	2300      	movs	r3, #0
 8008756:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008758:	2003      	movs	r0, #3
 800875a:	f001 fc9b 	bl	800a094 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800875e:	2000      	movs	r0, #0
 8008760:	f000 f80e 	bl	8008780 <HAL_InitTick>
 8008764:	4603      	mov	r3, r0
 8008766:	2b00      	cmp	r3, #0
 8008768:	d002      	beq.n	8008770 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800876a:	2301      	movs	r3, #1
 800876c:	71fb      	strb	r3, [r7, #7]
 800876e:	e001      	b.n	8008774 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8008770:	f7ff fae4 	bl	8007d3c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8008774:	79fb      	ldrb	r3, [r7, #7]

}
 8008776:	4618      	mov	r0, r3
 8008778:	3708      	adds	r7, #8
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}
	...

08008780 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b084      	sub	sp, #16
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8008788:	2300      	movs	r3, #0
 800878a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800878c:	4b16      	ldr	r3, [pc, #88]	; (80087e8 <HAL_InitTick+0x68>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d022      	beq.n	80087da <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8008794:	4b15      	ldr	r3, [pc, #84]	; (80087ec <HAL_InitTick+0x6c>)
 8008796:	681a      	ldr	r2, [r3, #0]
 8008798:	4b13      	ldr	r3, [pc, #76]	; (80087e8 <HAL_InitTick+0x68>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80087a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80087a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80087a8:	4618      	mov	r0, r3
 80087aa:	f001 fca6 	bl	800a0fa <HAL_SYSTICK_Config>
 80087ae:	4603      	mov	r3, r0
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d10f      	bne.n	80087d4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2b0f      	cmp	r3, #15
 80087b8:	d809      	bhi.n	80087ce <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80087ba:	2200      	movs	r2, #0
 80087bc:	6879      	ldr	r1, [r7, #4]
 80087be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80087c2:	f001 fc72 	bl	800a0aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80087c6:	4a0a      	ldr	r2, [pc, #40]	; (80087f0 <HAL_InitTick+0x70>)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6013      	str	r3, [r2, #0]
 80087cc:	e007      	b.n	80087de <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80087ce:	2301      	movs	r3, #1
 80087d0:	73fb      	strb	r3, [r7, #15]
 80087d2:	e004      	b.n	80087de <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80087d4:	2301      	movs	r3, #1
 80087d6:	73fb      	strb	r3, [r7, #15]
 80087d8:	e001      	b.n	80087de <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80087da:	2301      	movs	r3, #1
 80087dc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80087de:	7bfb      	ldrb	r3, [r7, #15]
}
 80087e0:	4618      	mov	r0, r3
 80087e2:	3710      	adds	r7, #16
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}
 80087e8:	20000ca8 	.word	0x20000ca8
 80087ec:	20000ca0 	.word	0x20000ca0
 80087f0:	20000ca4 	.word	0x20000ca4

080087f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80087f4:	b480      	push	{r7}
 80087f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80087f8:	4b05      	ldr	r3, [pc, #20]	; (8008810 <HAL_IncTick+0x1c>)
 80087fa:	681a      	ldr	r2, [r3, #0]
 80087fc:	4b05      	ldr	r3, [pc, #20]	; (8008814 <HAL_IncTick+0x20>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	4413      	add	r3, r2
 8008802:	4a03      	ldr	r2, [pc, #12]	; (8008810 <HAL_IncTick+0x1c>)
 8008804:	6013      	str	r3, [r2, #0]
}
 8008806:	bf00      	nop
 8008808:	46bd      	mov	sp, r7
 800880a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880e:	4770      	bx	lr
 8008810:	2000290c 	.word	0x2000290c
 8008814:	20000ca8 	.word	0x20000ca8

08008818 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008818:	b480      	push	{r7}
 800881a:	af00      	add	r7, sp, #0
  return uwTick;
 800881c:	4b03      	ldr	r3, [pc, #12]	; (800882c <HAL_GetTick+0x14>)
 800881e:	681b      	ldr	r3, [r3, #0]
}
 8008820:	4618      	mov	r0, r3
 8008822:	46bd      	mov	sp, r7
 8008824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008828:	4770      	bx	lr
 800882a:	bf00      	nop
 800882c:	2000290c 	.word	0x2000290c

08008830 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b084      	sub	sp, #16
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008838:	f7ff ffee 	bl	8008818 <HAL_GetTick>
 800883c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008848:	d004      	beq.n	8008854 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800884a:	4b09      	ldr	r3, [pc, #36]	; (8008870 <HAL_Delay+0x40>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	68fa      	ldr	r2, [r7, #12]
 8008850:	4413      	add	r3, r2
 8008852:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008854:	bf00      	nop
 8008856:	f7ff ffdf 	bl	8008818 <HAL_GetTick>
 800885a:	4602      	mov	r2, r0
 800885c:	68bb      	ldr	r3, [r7, #8]
 800885e:	1ad3      	subs	r3, r2, r3
 8008860:	68fa      	ldr	r2, [r7, #12]
 8008862:	429a      	cmp	r2, r3
 8008864:	d8f7      	bhi.n	8008856 <HAL_Delay+0x26>
  {
  }
}
 8008866:	bf00      	nop
 8008868:	3710      	adds	r7, #16
 800886a:	46bd      	mov	sp, r7
 800886c:	bd80      	pop	{r7, pc}
 800886e:	bf00      	nop
 8008870:	20000ca8 	.word	0x20000ca8

08008874 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8008874:	b480      	push	{r7}
 8008876:	b083      	sub	sp, #12
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
 800887c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	689b      	ldr	r3, [r3, #8]
 8008882:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	431a      	orrs	r2, r3
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	609a      	str	r2, [r3, #8]
}
 800888e:	bf00      	nop
 8008890:	370c      	adds	r7, #12
 8008892:	46bd      	mov	sp, r7
 8008894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008898:	4770      	bx	lr

0800889a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800889a:	b480      	push	{r7}
 800889c:	b083      	sub	sp, #12
 800889e:	af00      	add	r7, sp, #0
 80088a0:	6078      	str	r0, [r7, #4]
 80088a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	689b      	ldr	r3, [r3, #8]
 80088a8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	431a      	orrs	r2, r3
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	609a      	str	r2, [r3, #8]
}
 80088b4:	bf00      	nop
 80088b6:	370c      	adds	r7, #12
 80088b8:	46bd      	mov	sp, r7
 80088ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088be:	4770      	bx	lr

080088c0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80088c0:	b480      	push	{r7}
 80088c2:	b083      	sub	sp, #12
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	689b      	ldr	r3, [r3, #8]
 80088cc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80088d0:	4618      	mov	r0, r3
 80088d2:	370c      	adds	r7, #12
 80088d4:	46bd      	mov	sp, r7
 80088d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088da:	4770      	bx	lr

080088dc <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80088dc:	b490      	push	{r4, r7}
 80088de:	b084      	sub	sp, #16
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	60f8      	str	r0, [r7, #12]
 80088e4:	60b9      	str	r1, [r7, #8]
 80088e6:	607a      	str	r2, [r7, #4]
 80088e8:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	3360      	adds	r3, #96	; 0x60
 80088ee:	461a      	mov	r2, r3
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	009b      	lsls	r3, r3, #2
 80088f4:	4413      	add	r3, r2
 80088f6:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80088f8:	6822      	ldr	r2, [r4, #0]
 80088fa:	4b08      	ldr	r3, [pc, #32]	; (800891c <LL_ADC_SetOffset+0x40>)
 80088fc:	4013      	ands	r3, r2
 80088fe:	687a      	ldr	r2, [r7, #4]
 8008900:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8008904:	683a      	ldr	r2, [r7, #0]
 8008906:	430a      	orrs	r2, r1
 8008908:	4313      	orrs	r3, r2
 800890a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800890e:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8008910:	bf00      	nop
 8008912:	3710      	adds	r7, #16
 8008914:	46bd      	mov	sp, r7
 8008916:	bc90      	pop	{r4, r7}
 8008918:	4770      	bx	lr
 800891a:	bf00      	nop
 800891c:	03fff000 	.word	0x03fff000

08008920 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8008920:	b490      	push	{r4, r7}
 8008922:	b082      	sub	sp, #8
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
 8008928:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	3360      	adds	r3, #96	; 0x60
 800892e:	461a      	mov	r2, r3
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	009b      	lsls	r3, r3, #2
 8008934:	4413      	add	r3, r2
 8008936:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8008938:	6823      	ldr	r3, [r4, #0]
 800893a:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800893e:	4618      	mov	r0, r3
 8008940:	3708      	adds	r7, #8
 8008942:	46bd      	mov	sp, r7
 8008944:	bc90      	pop	{r4, r7}
 8008946:	4770      	bx	lr

08008948 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8008948:	b490      	push	{r4, r7}
 800894a:	b084      	sub	sp, #16
 800894c:	af00      	add	r7, sp, #0
 800894e:	60f8      	str	r0, [r7, #12]
 8008950:	60b9      	str	r1, [r7, #8]
 8008952:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	3360      	adds	r3, #96	; 0x60
 8008958:	461a      	mov	r2, r3
 800895a:	68bb      	ldr	r3, [r7, #8]
 800895c:	009b      	lsls	r3, r3, #2
 800895e:	4413      	add	r3, r2
 8008960:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8008962:	6823      	ldr	r3, [r4, #0]
 8008964:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	4313      	orrs	r3, r2
 800896c:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800896e:	bf00      	nop
 8008970:	3710      	adds	r7, #16
 8008972:	46bd      	mov	sp, r7
 8008974:	bc90      	pop	{r4, r7}
 8008976:	4770      	bx	lr

08008978 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8008978:	b490      	push	{r4, r7}
 800897a:	b084      	sub	sp, #16
 800897c:	af00      	add	r7, sp, #0
 800897e:	60f8      	str	r0, [r7, #12]
 8008980:	60b9      	str	r1, [r7, #8]
 8008982:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	3360      	adds	r3, #96	; 0x60
 8008988:	461a      	mov	r2, r3
 800898a:	68bb      	ldr	r3, [r7, #8]
 800898c:	009b      	lsls	r3, r3, #2
 800898e:	4413      	add	r3, r2
 8008990:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8008992:	6823      	ldr	r3, [r4, #0]
 8008994:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	4313      	orrs	r3, r2
 800899c:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800899e:	bf00      	nop
 80089a0:	3710      	adds	r7, #16
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bc90      	pop	{r4, r7}
 80089a6:	4770      	bx	lr

080089a8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80089a8:	b490      	push	{r4, r7}
 80089aa:	b084      	sub	sp, #16
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	60f8      	str	r0, [r7, #12]
 80089b0:	60b9      	str	r1, [r7, #8]
 80089b2:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	3360      	adds	r3, #96	; 0x60
 80089b8:	461a      	mov	r2, r3
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	009b      	lsls	r3, r3, #2
 80089be:	4413      	add	r3, r2
 80089c0:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80089c2:	6823      	ldr	r3, [r4, #0]
 80089c4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	4313      	orrs	r3, r2
 80089cc:	6023      	str	r3, [r4, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80089ce:	bf00      	nop
 80089d0:	3710      	adds	r7, #16
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bc90      	pop	{r4, r7}
 80089d6:	4770      	bx	lr

080089d8 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80089d8:	b480      	push	{r7}
 80089da:	b083      	sub	sp, #12
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
 80089e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	695b      	ldr	r3, [r3, #20]
 80089e6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	431a      	orrs	r2, r3
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	615a      	str	r2, [r3, #20]
}
 80089f2:	bf00      	nop
 80089f4:	370c      	adds	r7, #12
 80089f6:	46bd      	mov	sp, r7
 80089f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fc:	4770      	bx	lr

080089fe <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80089fe:	b490      	push	{r4, r7}
 8008a00:	b084      	sub	sp, #16
 8008a02:	af00      	add	r7, sp, #0
 8008a04:	60f8      	str	r0, [r7, #12]
 8008a06:	60b9      	str	r1, [r7, #8]
 8008a08:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	3330      	adds	r3, #48	; 0x30
 8008a0e:	461a      	mov	r2, r3
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	0a1b      	lsrs	r3, r3, #8
 8008a14:	009b      	lsls	r3, r3, #2
 8008a16:	f003 030c 	and.w	r3, r3, #12
 8008a1a:	4413      	add	r3, r2
 8008a1c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8008a1e:	6822      	ldr	r2, [r4, #0]
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	f003 031f 	and.w	r3, r3, #31
 8008a26:	211f      	movs	r1, #31
 8008a28:	fa01 f303 	lsl.w	r3, r1, r3
 8008a2c:	43db      	mvns	r3, r3
 8008a2e:	401a      	ands	r2, r3
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	0e9b      	lsrs	r3, r3, #26
 8008a34:	f003 011f 	and.w	r1, r3, #31
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	f003 031f 	and.w	r3, r3, #31
 8008a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8008a42:	4313      	orrs	r3, r2
 8008a44:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8008a46:	bf00      	nop
 8008a48:	3710      	adds	r7, #16
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bc90      	pop	{r4, r7}
 8008a4e:	4770      	bx	lr

08008a50 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8008a50:	b490      	push	{r4, r7}
 8008a52:	b084      	sub	sp, #16
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	60f8      	str	r0, [r7, #12]
 8008a58:	60b9      	str	r1, [r7, #8]
 8008a5a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	3314      	adds	r3, #20
 8008a60:	461a      	mov	r2, r3
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	0e5b      	lsrs	r3, r3, #25
 8008a66:	009b      	lsls	r3, r3, #2
 8008a68:	f003 0304 	and.w	r3, r3, #4
 8008a6c:	4413      	add	r3, r2
 8008a6e:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8008a70:	6822      	ldr	r2, [r4, #0]
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	0d1b      	lsrs	r3, r3, #20
 8008a76:	f003 031f 	and.w	r3, r3, #31
 8008a7a:	2107      	movs	r1, #7
 8008a7c:	fa01 f303 	lsl.w	r3, r1, r3
 8008a80:	43db      	mvns	r3, r3
 8008a82:	401a      	ands	r2, r3
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	0d1b      	lsrs	r3, r3, #20
 8008a88:	f003 031f 	and.w	r3, r3, #31
 8008a8c:	6879      	ldr	r1, [r7, #4]
 8008a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8008a92:	4313      	orrs	r3, r2
 8008a94:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8008a96:	bf00      	nop
 8008a98:	3710      	adds	r7, #16
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bc90      	pop	{r4, r7}
 8008a9e:	4770      	bx	lr

08008aa0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	b085      	sub	sp, #20
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	60f8      	str	r0, [r7, #12]
 8008aa8:	60b9      	str	r1, [r7, #8]
 8008aaa:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008ab8:	43db      	mvns	r3, r3
 8008aba:	401a      	ands	r2, r3
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f003 0318 	and.w	r3, r3, #24
 8008ac2:	4908      	ldr	r1, [pc, #32]	; (8008ae4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8008ac4:	40d9      	lsrs	r1, r3
 8008ac6:	68bb      	ldr	r3, [r7, #8]
 8008ac8:	400b      	ands	r3, r1
 8008aca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008ace:	431a      	orrs	r2, r3
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8008ad6:	bf00      	nop
 8008ad8:	3714      	adds	r7, #20
 8008ada:	46bd      	mov	sp, r7
 8008adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae0:	4770      	bx	lr
 8008ae2:	bf00      	nop
 8008ae4:	0007ffff 	.word	0x0007ffff

08008ae8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8008ae8:	b480      	push	{r7}
 8008aea:	b083      	sub	sp, #12
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	689b      	ldr	r3, [r3, #8]
 8008af4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8008af8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008afc:	687a      	ldr	r2, [r7, #4]
 8008afe:	6093      	str	r3, [r2, #8]
}
 8008b00:	bf00      	nop
 8008b02:	370c      	adds	r7, #12
 8008b04:	46bd      	mov	sp, r7
 8008b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0a:	4770      	bx	lr

08008b0c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8008b0c:	b480      	push	{r7}
 8008b0e:	b083      	sub	sp, #12
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	689b      	ldr	r3, [r3, #8]
 8008b18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008b1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b20:	d101      	bne.n	8008b26 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8008b22:	2301      	movs	r3, #1
 8008b24:	e000      	b.n	8008b28 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8008b26:	2300      	movs	r3, #0
}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	370c      	adds	r7, #12
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b32:	4770      	bx	lr

08008b34 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8008b34:	b480      	push	{r7}
 8008b36:	b083      	sub	sp, #12
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	689b      	ldr	r3, [r3, #8]
 8008b40:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8008b44:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008b48:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8008b50:	bf00      	nop
 8008b52:	370c      	adds	r7, #12
 8008b54:	46bd      	mov	sp, r7
 8008b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5a:	4770      	bx	lr

08008b5c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b083      	sub	sp, #12
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	689b      	ldr	r3, [r3, #8]
 8008b68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b6c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008b70:	d101      	bne.n	8008b76 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8008b72:	2301      	movs	r3, #1
 8008b74:	e000      	b.n	8008b78 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8008b76:	2300      	movs	r3, #0
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	370c      	adds	r7, #12
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b82:	4770      	bx	lr

08008b84 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8008b84:	b480      	push	{r7}
 8008b86:	b083      	sub	sp, #12
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	689b      	ldr	r3, [r3, #8]
 8008b90:	f003 0301 	and.w	r3, r3, #1
 8008b94:	2b01      	cmp	r3, #1
 8008b96:	d101      	bne.n	8008b9c <LL_ADC_IsEnabled+0x18>
 8008b98:	2301      	movs	r3, #1
 8008b9a:	e000      	b.n	8008b9e <LL_ADC_IsEnabled+0x1a>
 8008b9c:	2300      	movs	r3, #0
}
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	370c      	adds	r7, #12
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba8:	4770      	bx	lr

08008baa <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8008baa:	b480      	push	{r7}
 8008bac:	b083      	sub	sp, #12
 8008bae:	af00      	add	r7, sp, #0
 8008bb0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	689b      	ldr	r3, [r3, #8]
 8008bb6:	f003 0304 	and.w	r3, r3, #4
 8008bba:	2b04      	cmp	r3, #4
 8008bbc:	d101      	bne.n	8008bc2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	e000      	b.n	8008bc4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8008bc2:	2300      	movs	r3, #0
}
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	370c      	adds	r7, #12
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bce:	4770      	bx	lr

08008bd0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8008bd0:	b480      	push	{r7}
 8008bd2:	b083      	sub	sp, #12
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	689b      	ldr	r3, [r3, #8]
 8008bdc:	f003 0308 	and.w	r3, r3, #8
 8008be0:	2b08      	cmp	r3, #8
 8008be2:	d101      	bne.n	8008be8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8008be4:	2301      	movs	r3, #1
 8008be6:	e000      	b.n	8008bea <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8008be8:	2300      	movs	r3, #0
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	370c      	adds	r7, #12
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf4:	4770      	bx	lr
	...

08008bf8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8008bf8:	b590      	push	{r4, r7, lr}
 8008bfa:	b089      	sub	sp, #36	; 0x24
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008c00:	2300      	movs	r3, #0
 8008c02:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8008c04:	2300      	movs	r3, #0
 8008c06:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d101      	bne.n	8008c12 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8008c0e:	2301      	movs	r3, #1
 8008c10:	e1ad      	b.n	8008f6e <HAL_ADC_Init+0x376>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	695b      	ldr	r3, [r3, #20]
 8008c16:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d109      	bne.n	8008c34 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f7fe f937 	bl	8006e94 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2200      	movs	r2, #0
 8008c2a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2200      	movs	r2, #0
 8008c30:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	4618      	mov	r0, r3
 8008c3a:	f7ff ff67 	bl	8008b0c <LL_ADC_IsDeepPowerDownEnabled>
 8008c3e:	4603      	mov	r3, r0
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d004      	beq.n	8008c4e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	4618      	mov	r0, r3
 8008c4a:	f7ff ff4d 	bl	8008ae8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	4618      	mov	r0, r3
 8008c54:	f7ff ff82 	bl	8008b5c <LL_ADC_IsInternalRegulatorEnabled>
 8008c58:	4603      	mov	r3, r0
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d113      	bne.n	8008c86 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	4618      	mov	r0, r3
 8008c64:	f7ff ff66 	bl	8008b34 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8008c68:	4b9e      	ldr	r3, [pc, #632]	; (8008ee4 <HAL_ADC_Init+0x2ec>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	099b      	lsrs	r3, r3, #6
 8008c6e:	4a9e      	ldr	r2, [pc, #632]	; (8008ee8 <HAL_ADC_Init+0x2f0>)
 8008c70:	fba2 2303 	umull	r2, r3, r2, r3
 8008c74:	099b      	lsrs	r3, r3, #6
 8008c76:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8008c78:	e002      	b.n	8008c80 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	3b01      	subs	r3, #1
 8008c7e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d1f9      	bne.n	8008c7a <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	f7ff ff66 	bl	8008b5c <LL_ADC_IsInternalRegulatorEnabled>
 8008c90:	4603      	mov	r3, r0
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d10d      	bne.n	8008cb2 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c9a:	f043 0210 	orr.w	r2, r3, #16
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ca6:	f043 0201 	orr.w	r2, r3, #1
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8008cae:	2301      	movs	r3, #1
 8008cb0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	f7ff ff77 	bl	8008baa <LL_ADC_REG_IsConversionOngoing>
 8008cbc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008cc2:	f003 0310 	and.w	r3, r3, #16
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	f040 8148 	bne.w	8008f5c <HAL_ADC_Init+0x364>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8008ccc:	697b      	ldr	r3, [r7, #20]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	f040 8144 	bne.w	8008f5c <HAL_ADC_Init+0x364>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008cd8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8008cdc:	f043 0202 	orr.w	r2, r3, #2
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	4618      	mov	r0, r3
 8008cea:	f7ff ff4b 	bl	8008b84 <LL_ADC_IsEnabled>
 8008cee:	4603      	mov	r3, r0
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d141      	bne.n	8008d78 <HAL_ADC_Init+0x180>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008cfc:	d004      	beq.n	8008d08 <HAL_ADC_Init+0x110>
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	4a7a      	ldr	r2, [pc, #488]	; (8008eec <HAL_ADC_Init+0x2f4>)
 8008d04:	4293      	cmp	r3, r2
 8008d06:	d10f      	bne.n	8008d28 <HAL_ADC_Init+0x130>
 8008d08:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8008d0c:	f7ff ff3a 	bl	8008b84 <LL_ADC_IsEnabled>
 8008d10:	4604      	mov	r4, r0
 8008d12:	4876      	ldr	r0, [pc, #472]	; (8008eec <HAL_ADC_Init+0x2f4>)
 8008d14:	f7ff ff36 	bl	8008b84 <LL_ADC_IsEnabled>
 8008d18:	4603      	mov	r3, r0
 8008d1a:	4323      	orrs	r3, r4
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	bf0c      	ite	eq
 8008d20:	2301      	moveq	r3, #1
 8008d22:	2300      	movne	r3, #0
 8008d24:	b2db      	uxtb	r3, r3
 8008d26:	e012      	b.n	8008d4e <HAL_ADC_Init+0x156>
 8008d28:	4871      	ldr	r0, [pc, #452]	; (8008ef0 <HAL_ADC_Init+0x2f8>)
 8008d2a:	f7ff ff2b 	bl	8008b84 <LL_ADC_IsEnabled>
 8008d2e:	4604      	mov	r4, r0
 8008d30:	4870      	ldr	r0, [pc, #448]	; (8008ef4 <HAL_ADC_Init+0x2fc>)
 8008d32:	f7ff ff27 	bl	8008b84 <LL_ADC_IsEnabled>
 8008d36:	4603      	mov	r3, r0
 8008d38:	431c      	orrs	r4, r3
 8008d3a:	486f      	ldr	r0, [pc, #444]	; (8008ef8 <HAL_ADC_Init+0x300>)
 8008d3c:	f7ff ff22 	bl	8008b84 <LL_ADC_IsEnabled>
 8008d40:	4603      	mov	r3, r0
 8008d42:	4323      	orrs	r3, r4
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	bf0c      	ite	eq
 8008d48:	2301      	moveq	r3, #1
 8008d4a:	2300      	movne	r3, #0
 8008d4c:	b2db      	uxtb	r3, r3
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d012      	beq.n	8008d78 <HAL_ADC_Init+0x180>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008d5a:	d004      	beq.n	8008d66 <HAL_ADC_Init+0x16e>
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	4a62      	ldr	r2, [pc, #392]	; (8008eec <HAL_ADC_Init+0x2f4>)
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d101      	bne.n	8008d6a <HAL_ADC_Init+0x172>
 8008d66:	4a65      	ldr	r2, [pc, #404]	; (8008efc <HAL_ADC_Init+0x304>)
 8008d68:	e000      	b.n	8008d6c <HAL_ADC_Init+0x174>
 8008d6a:	4a65      	ldr	r2, [pc, #404]	; (8008f00 <HAL_ADC_Init+0x308>)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	685b      	ldr	r3, [r3, #4]
 8008d70:	4619      	mov	r1, r3
 8008d72:	4610      	mov	r0, r2
 8008d74:	f7ff fd7e 	bl	8008874 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	7f5b      	ldrb	r3, [r3, #29]
 8008d7c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8008d82:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8008d88:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8008d8e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008d96:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8008d98:	4313      	orrs	r3, r2
 8008d9a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008da2:	2b01      	cmp	r3, #1
 8008da4:	d106      	bne.n	8008db4 <HAL_ADC_Init+0x1bc>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008daa:	3b01      	subs	r3, #1
 8008dac:	045b      	lsls	r3, r3, #17
 8008dae:	69ba      	ldr	r2, [r7, #24]
 8008db0:	4313      	orrs	r3, r2
 8008db2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d009      	beq.n	8008dd0 <HAL_ADC_Init+0x1d8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dc0:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dc8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8008dca:	69ba      	ldr	r2, [r7, #24]
 8008dcc:	4313      	orrs	r3, r2
 8008dce:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	68da      	ldr	r2, [r3, #12]
 8008dd6:	4b4b      	ldr	r3, [pc, #300]	; (8008f04 <HAL_ADC_Init+0x30c>)
 8008dd8:	4013      	ands	r3, r2
 8008dda:	687a      	ldr	r2, [r7, #4]
 8008ddc:	6812      	ldr	r2, [r2, #0]
 8008dde:	69b9      	ldr	r1, [r7, #24]
 8008de0:	430b      	orrs	r3, r1
 8008de2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	691b      	ldr	r3, [r3, #16]
 8008dea:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	430a      	orrs	r2, r1
 8008df8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	4618      	mov	r0, r3
 8008e00:	f7ff fed3 	bl	8008baa <LL_ADC_REG_IsConversionOngoing>
 8008e04:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	f7ff fee0 	bl	8008bd0 <LL_ADC_INJ_IsConversionOngoing>
 8008e10:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8008e12:	693b      	ldr	r3, [r7, #16]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d17f      	bne.n	8008f18 <HAL_ADC_Init+0x320>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d17c      	bne.n	8008f18 <HAL_ADC_Init+0x320>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8008e22:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008e2a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8008e2c:	4313      	orrs	r3, r2
 8008e2e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	68db      	ldr	r3, [r3, #12]
 8008e36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008e3a:	f023 0302 	bic.w	r3, r3, #2
 8008e3e:	687a      	ldr	r2, [r7, #4]
 8008e40:	6812      	ldr	r2, [r2, #0]
 8008e42:	69b9      	ldr	r1, [r7, #24]
 8008e44:	430b      	orrs	r3, r1
 8008e46:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	691b      	ldr	r3, [r3, #16]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d017      	beq.n	8008e80 <HAL_ADC_Init+0x288>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	691a      	ldr	r2, [r3, #16]
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008e5e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008e68:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8008e6c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008e70:	687a      	ldr	r2, [r7, #4]
 8008e72:	6911      	ldr	r1, [r2, #16]
 8008e74:	687a      	ldr	r2, [r7, #4]
 8008e76:	6812      	ldr	r2, [r2, #0]
 8008e78:	430b      	orrs	r3, r1
 8008e7a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8008e7e:	e013      	b.n	8008ea8 <HAL_ADC_Init+0x2b0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	691a      	ldr	r2, [r3, #16]
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008e8e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008e98:	687a      	ldr	r2, [r7, #4]
 8008e9a:	6812      	ldr	r2, [r2, #0]
 8008e9c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8008ea0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008ea4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008eae:	2b01      	cmp	r3, #1
 8008eb0:	d12a      	bne.n	8008f08 <HAL_ADC_Init+0x310>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	691b      	ldr	r3, [r3, #16]
 8008eb8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008ebc:	f023 0304 	bic.w	r3, r3, #4
 8008ec0:	687a      	ldr	r2, [r7, #4]
 8008ec2:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8008ec4:	687a      	ldr	r2, [r7, #4]
 8008ec6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008ec8:	4311      	orrs	r1, r2
 8008eca:	687a      	ldr	r2, [r7, #4]
 8008ecc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8008ece:	4311      	orrs	r1, r2
 8008ed0:	687a      	ldr	r2, [r7, #4]
 8008ed2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008ed4:	430a      	orrs	r2, r1
 8008ed6:	431a      	orrs	r2, r3
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f042 0201 	orr.w	r2, r2, #1
 8008ee0:	611a      	str	r2, [r3, #16]
 8008ee2:	e019      	b.n	8008f18 <HAL_ADC_Init+0x320>
 8008ee4:	20000ca0 	.word	0x20000ca0
 8008ee8:	053e2d63 	.word	0x053e2d63
 8008eec:	50000100 	.word	0x50000100
 8008ef0:	50000400 	.word	0x50000400
 8008ef4:	50000500 	.word	0x50000500
 8008ef8:	50000600 	.word	0x50000600
 8008efc:	50000300 	.word	0x50000300
 8008f00:	50000700 	.word	0x50000700
 8008f04:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	691a      	ldr	r2, [r3, #16]
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f022 0201 	bic.w	r2, r2, #1
 8008f16:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	695b      	ldr	r3, [r3, #20]
 8008f1c:	2b01      	cmp	r3, #1
 8008f1e:	d10c      	bne.n	8008f3a <HAL_ADC_Init+0x342>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f26:	f023 010f 	bic.w	r1, r3, #15
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6a1b      	ldr	r3, [r3, #32]
 8008f2e:	1e5a      	subs	r2, r3, #1
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	430a      	orrs	r2, r1
 8008f36:	631a      	str	r2, [r3, #48]	; 0x30
 8008f38:	e007      	b.n	8008f4a <HAL_ADC_Init+0x352>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f022 020f 	bic.w	r2, r2, #15
 8008f48:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f4e:	f023 0303 	bic.w	r3, r3, #3
 8008f52:	f043 0201 	orr.w	r2, r3, #1
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	65da      	str	r2, [r3, #92]	; 0x5c
 8008f5a:	e007      	b.n	8008f6c <HAL_ADC_Init+0x374>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f60:	f043 0210 	orr.w	r2, r3, #16
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8008f68:	2301      	movs	r3, #1
 8008f6a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8008f6c:	7ffb      	ldrb	r3, [r7, #31]
}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	3724      	adds	r7, #36	; 0x24
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd90      	pop	{r4, r7, pc}
 8008f76:	bf00      	nop

08008f78 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b0a6      	sub	sp, #152	; 0x98
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
 8008f80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008f82:	2300      	movs	r3, #0
 8008f84:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8008f88:	2300      	movs	r3, #0
 8008f8a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008f92:	2b01      	cmp	r3, #1
 8008f94:	d101      	bne.n	8008f9a <HAL_ADC_ConfigChannel+0x22>
 8008f96:	2302      	movs	r3, #2
 8008f98:	e38e      	b.n	80096b8 <HAL_ADC_ConfigChannel+0x740>
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2201      	movs	r2, #1
 8008f9e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	f7ff fdff 	bl	8008baa <LL_ADC_REG_IsConversionOngoing>
 8008fac:	4603      	mov	r3, r0
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	f040 836f 	bne.w	8009692 <HAL_ADC_ConfigChannel+0x71a>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	6818      	ldr	r0, [r3, #0]
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	6859      	ldr	r1, [r3, #4]
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	461a      	mov	r2, r3
 8008fc2:	f7ff fd1c 	bl	80089fe <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	4618      	mov	r0, r3
 8008fcc:	f7ff fded 	bl	8008baa <LL_ADC_REG_IsConversionOngoing>
 8008fd0:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	4618      	mov	r0, r3
 8008fda:	f7ff fdf9 	bl	8008bd0 <LL_ADC_INJ_IsConversionOngoing>
 8008fde:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8008fe2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	f040 817b 	bne.w	80092e2 <HAL_ADC_ConfigChannel+0x36a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8008fec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	f040 8176 	bne.w	80092e2 <HAL_ADC_ConfigChannel+0x36a>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	689b      	ldr	r3, [r3, #8]
 8008ffa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ffe:	d10f      	bne.n	8009020 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6818      	ldr	r0, [r3, #0]
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	2200      	movs	r2, #0
 800900a:	4619      	mov	r1, r3
 800900c:	f7ff fd20 	bl	8008a50 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8009018:	4618      	mov	r0, r3
 800901a:	f7ff fcdd 	bl	80089d8 <LL_ADC_SetSamplingTimeCommonConfig>
 800901e:	e00e      	b.n	800903e <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	6818      	ldr	r0, [r3, #0]
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	6819      	ldr	r1, [r3, #0]
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	689b      	ldr	r3, [r3, #8]
 800902c:	461a      	mov	r2, r3
 800902e:	f7ff fd0f 	bl	8008a50 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	2100      	movs	r1, #0
 8009038:	4618      	mov	r0, r3
 800903a:	f7ff fccd 	bl	80089d8 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	695a      	ldr	r2, [r3, #20]
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	68db      	ldr	r3, [r3, #12]
 8009048:	08db      	lsrs	r3, r3, #3
 800904a:	f003 0303 	and.w	r3, r3, #3
 800904e:	005b      	lsls	r3, r3, #1
 8009050:	fa02 f303 	lsl.w	r3, r2, r3
 8009054:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	691b      	ldr	r3, [r3, #16]
 800905c:	2b04      	cmp	r3, #4
 800905e:	d022      	beq.n	80090a6 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	6818      	ldr	r0, [r3, #0]
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	6919      	ldr	r1, [r3, #16]
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	681a      	ldr	r2, [r3, #0]
 800906c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009070:	f7ff fc34 	bl	80088dc <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	6818      	ldr	r0, [r3, #0]
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	6919      	ldr	r1, [r3, #16]
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	699b      	ldr	r3, [r3, #24]
 8009080:	461a      	mov	r2, r3
 8009082:	f7ff fc79 	bl	8008978 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6818      	ldr	r0, [r3, #0]
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	6919      	ldr	r1, [r3, #16]
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	7f1b      	ldrb	r3, [r3, #28]
 8009092:	2b01      	cmp	r3, #1
 8009094:	d102      	bne.n	800909c <HAL_ADC_ConfigChannel+0x124>
 8009096:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800909a:	e000      	b.n	800909e <HAL_ADC_ConfigChannel+0x126>
 800909c:	2300      	movs	r3, #0
 800909e:	461a      	mov	r2, r3
 80090a0:	f7ff fc82 	bl	80089a8 <LL_ADC_SetOffsetSaturation>
 80090a4:	e11d      	b.n	80092e2 <HAL_ADC_ConfigChannel+0x36a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	2100      	movs	r1, #0
 80090ac:	4618      	mov	r0, r3
 80090ae:	f7ff fc37 	bl	8008920 <LL_ADC_GetOffsetChannel>
 80090b2:	4603      	mov	r3, r0
 80090b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d10a      	bne.n	80090d2 <HAL_ADC_ConfigChannel+0x15a>
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	2100      	movs	r1, #0
 80090c2:	4618      	mov	r0, r3
 80090c4:	f7ff fc2c 	bl	8008920 <LL_ADC_GetOffsetChannel>
 80090c8:	4603      	mov	r3, r0
 80090ca:	0e9b      	lsrs	r3, r3, #26
 80090cc:	f003 021f 	and.w	r2, r3, #31
 80090d0:	e012      	b.n	80090f8 <HAL_ADC_ConfigChannel+0x180>
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	2100      	movs	r1, #0
 80090d8:	4618      	mov	r0, r3
 80090da:	f7ff fc21 	bl	8008920 <LL_ADC_GetOffsetChannel>
 80090de:	4603      	mov	r3, r0
 80090e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80090e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80090e8:	fa93 f3a3 	rbit	r3, r3
 80090ec:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80090ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80090f0:	fab3 f383 	clz	r3, r3
 80090f4:	b2db      	uxtb	r3, r3
 80090f6:	461a      	mov	r2, r3
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009100:	2b00      	cmp	r3, #0
 8009102:	d105      	bne.n	8009110 <HAL_ADC_ConfigChannel+0x198>
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	0e9b      	lsrs	r3, r3, #26
 800910a:	f003 031f 	and.w	r3, r3, #31
 800910e:	e00a      	b.n	8009126 <HAL_ADC_ConfigChannel+0x1ae>
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009116:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009118:	fa93 f3a3 	rbit	r3, r3
 800911c:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 800911e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009120:	fab3 f383 	clz	r3, r3
 8009124:	b2db      	uxtb	r3, r3
 8009126:	429a      	cmp	r2, r3
 8009128:	d106      	bne.n	8009138 <HAL_ADC_ConfigChannel+0x1c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	2200      	movs	r2, #0
 8009130:	2100      	movs	r1, #0
 8009132:	4618      	mov	r0, r3
 8009134:	f7ff fc08 	bl	8008948 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	2101      	movs	r1, #1
 800913e:	4618      	mov	r0, r3
 8009140:	f7ff fbee 	bl	8008920 <LL_ADC_GetOffsetChannel>
 8009144:	4603      	mov	r3, r0
 8009146:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800914a:	2b00      	cmp	r3, #0
 800914c:	d10a      	bne.n	8009164 <HAL_ADC_ConfigChannel+0x1ec>
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	2101      	movs	r1, #1
 8009154:	4618      	mov	r0, r3
 8009156:	f7ff fbe3 	bl	8008920 <LL_ADC_GetOffsetChannel>
 800915a:	4603      	mov	r3, r0
 800915c:	0e9b      	lsrs	r3, r3, #26
 800915e:	f003 021f 	and.w	r2, r3, #31
 8009162:	e010      	b.n	8009186 <HAL_ADC_ConfigChannel+0x20e>
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	2101      	movs	r1, #1
 800916a:	4618      	mov	r0, r3
 800916c:	f7ff fbd8 	bl	8008920 <LL_ADC_GetOffsetChannel>
 8009170:	4603      	mov	r3, r0
 8009172:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009174:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009176:	fa93 f3a3 	rbit	r3, r3
 800917a:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800917c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800917e:	fab3 f383 	clz	r3, r3
 8009182:	b2db      	uxtb	r3, r3
 8009184:	461a      	mov	r2, r3
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800918e:	2b00      	cmp	r3, #0
 8009190:	d105      	bne.n	800919e <HAL_ADC_ConfigChannel+0x226>
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	0e9b      	lsrs	r3, r3, #26
 8009198:	f003 031f 	and.w	r3, r3, #31
 800919c:	e00a      	b.n	80091b4 <HAL_ADC_ConfigChannel+0x23c>
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80091a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80091a6:	fa93 f3a3 	rbit	r3, r3
 80091aa:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80091ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80091ae:	fab3 f383 	clz	r3, r3
 80091b2:	b2db      	uxtb	r3, r3
 80091b4:	429a      	cmp	r2, r3
 80091b6:	d106      	bne.n	80091c6 <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	2200      	movs	r2, #0
 80091be:	2101      	movs	r1, #1
 80091c0:	4618      	mov	r0, r3
 80091c2:	f7ff fbc1 	bl	8008948 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	2102      	movs	r1, #2
 80091cc:	4618      	mov	r0, r3
 80091ce:	f7ff fba7 	bl	8008920 <LL_ADC_GetOffsetChannel>
 80091d2:	4603      	mov	r3, r0
 80091d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d10a      	bne.n	80091f2 <HAL_ADC_ConfigChannel+0x27a>
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	2102      	movs	r1, #2
 80091e2:	4618      	mov	r0, r3
 80091e4:	f7ff fb9c 	bl	8008920 <LL_ADC_GetOffsetChannel>
 80091e8:	4603      	mov	r3, r0
 80091ea:	0e9b      	lsrs	r3, r3, #26
 80091ec:	f003 021f 	and.w	r2, r3, #31
 80091f0:	e010      	b.n	8009214 <HAL_ADC_ConfigChannel+0x29c>
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	2102      	movs	r1, #2
 80091f8:	4618      	mov	r0, r3
 80091fa:	f7ff fb91 	bl	8008920 <LL_ADC_GetOffsetChannel>
 80091fe:	4603      	mov	r3, r0
 8009200:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009202:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009204:	fa93 f3a3 	rbit	r3, r3
 8009208:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 800920a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800920c:	fab3 f383 	clz	r3, r3
 8009210:	b2db      	uxtb	r3, r3
 8009212:	461a      	mov	r2, r3
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800921c:	2b00      	cmp	r3, #0
 800921e:	d105      	bne.n	800922c <HAL_ADC_ConfigChannel+0x2b4>
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	0e9b      	lsrs	r3, r3, #26
 8009226:	f003 031f 	and.w	r3, r3, #31
 800922a:	e00a      	b.n	8009242 <HAL_ADC_ConfigChannel+0x2ca>
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009232:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009234:	fa93 f3a3 	rbit	r3, r3
 8009238:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800923a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800923c:	fab3 f383 	clz	r3, r3
 8009240:	b2db      	uxtb	r3, r3
 8009242:	429a      	cmp	r2, r3
 8009244:	d106      	bne.n	8009254 <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	2200      	movs	r2, #0
 800924c:	2102      	movs	r1, #2
 800924e:	4618      	mov	r0, r3
 8009250:	f7ff fb7a 	bl	8008948 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	2103      	movs	r1, #3
 800925a:	4618      	mov	r0, r3
 800925c:	f7ff fb60 	bl	8008920 <LL_ADC_GetOffsetChannel>
 8009260:	4603      	mov	r3, r0
 8009262:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009266:	2b00      	cmp	r3, #0
 8009268:	d10a      	bne.n	8009280 <HAL_ADC_ConfigChannel+0x308>
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	2103      	movs	r1, #3
 8009270:	4618      	mov	r0, r3
 8009272:	f7ff fb55 	bl	8008920 <LL_ADC_GetOffsetChannel>
 8009276:	4603      	mov	r3, r0
 8009278:	0e9b      	lsrs	r3, r3, #26
 800927a:	f003 021f 	and.w	r2, r3, #31
 800927e:	e010      	b.n	80092a2 <HAL_ADC_ConfigChannel+0x32a>
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	2103      	movs	r1, #3
 8009286:	4618      	mov	r0, r3
 8009288:	f7ff fb4a 	bl	8008920 <LL_ADC_GetOffsetChannel>
 800928c:	4603      	mov	r3, r0
 800928e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009290:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009292:	fa93 f3a3 	rbit	r3, r3
 8009296:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8009298:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800929a:	fab3 f383 	clz	r3, r3
 800929e:	b2db      	uxtb	r3, r3
 80092a0:	461a      	mov	r2, r3
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d105      	bne.n	80092ba <HAL_ADC_ConfigChannel+0x342>
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	0e9b      	lsrs	r3, r3, #26
 80092b4:	f003 031f 	and.w	r3, r3, #31
 80092b8:	e00a      	b.n	80092d0 <HAL_ADC_ConfigChannel+0x358>
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80092c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092c2:	fa93 f3a3 	rbit	r3, r3
 80092c6:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 80092c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092ca:	fab3 f383 	clz	r3, r3
 80092ce:	b2db      	uxtb	r3, r3
 80092d0:	429a      	cmp	r2, r3
 80092d2:	d106      	bne.n	80092e2 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	2200      	movs	r2, #0
 80092da:	2103      	movs	r1, #3
 80092dc:	4618      	mov	r0, r3
 80092de:	f7ff fb33 	bl	8008948 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	4618      	mov	r0, r3
 80092e8:	f7ff fc4c 	bl	8008b84 <LL_ADC_IsEnabled>
 80092ec:	4603      	mov	r3, r0
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	f040 810c 	bne.w	800950c <HAL_ADC_ConfigChannel+0x594>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6818      	ldr	r0, [r3, #0]
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	6819      	ldr	r1, [r3, #0]
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	68db      	ldr	r3, [r3, #12]
 8009300:	461a      	mov	r2, r3
 8009302:	f7ff fbcd 	bl	8008aa0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	68db      	ldr	r3, [r3, #12]
 800930a:	4aaf      	ldr	r2, [pc, #700]	; (80095c8 <HAL_ADC_ConfigChannel+0x650>)
 800930c:	4293      	cmp	r3, r2
 800930e:	f040 80fd 	bne.w	800950c <HAL_ADC_ConfigChannel+0x594>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800931e:	2b00      	cmp	r3, #0
 8009320:	d10b      	bne.n	800933a <HAL_ADC_ConfigChannel+0x3c2>
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	0e9b      	lsrs	r3, r3, #26
 8009328:	3301      	adds	r3, #1
 800932a:	f003 031f 	and.w	r3, r3, #31
 800932e:	2b09      	cmp	r3, #9
 8009330:	bf94      	ite	ls
 8009332:	2301      	movls	r3, #1
 8009334:	2300      	movhi	r3, #0
 8009336:	b2db      	uxtb	r3, r3
 8009338:	e012      	b.n	8009360 <HAL_ADC_ConfigChannel+0x3e8>
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009340:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009342:	fa93 f3a3 	rbit	r3, r3
 8009346:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8009348:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800934a:	fab3 f383 	clz	r3, r3
 800934e:	b2db      	uxtb	r3, r3
 8009350:	3301      	adds	r3, #1
 8009352:	f003 031f 	and.w	r3, r3, #31
 8009356:	2b09      	cmp	r3, #9
 8009358:	bf94      	ite	ls
 800935a:	2301      	movls	r3, #1
 800935c:	2300      	movhi	r3, #0
 800935e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009360:	2b00      	cmp	r3, #0
 8009362:	d064      	beq.n	800942e <HAL_ADC_ConfigChannel+0x4b6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800936c:	2b00      	cmp	r3, #0
 800936e:	d107      	bne.n	8009380 <HAL_ADC_ConfigChannel+0x408>
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	0e9b      	lsrs	r3, r3, #26
 8009376:	3301      	adds	r3, #1
 8009378:	069b      	lsls	r3, r3, #26
 800937a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800937e:	e00e      	b.n	800939e <HAL_ADC_ConfigChannel+0x426>
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009388:	fa93 f3a3 	rbit	r3, r3
 800938c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800938e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009390:	fab3 f383 	clz	r3, r3
 8009394:	b2db      	uxtb	r3, r3
 8009396:	3301      	adds	r3, #1
 8009398:	069b      	lsls	r3, r3, #26
 800939a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d109      	bne.n	80093be <HAL_ADC_ConfigChannel+0x446>
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	0e9b      	lsrs	r3, r3, #26
 80093b0:	3301      	adds	r3, #1
 80093b2:	f003 031f 	and.w	r3, r3, #31
 80093b6:	2101      	movs	r1, #1
 80093b8:	fa01 f303 	lsl.w	r3, r1, r3
 80093bc:	e010      	b.n	80093e0 <HAL_ADC_ConfigChannel+0x468>
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80093c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093c6:	fa93 f3a3 	rbit	r3, r3
 80093ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80093cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093ce:	fab3 f383 	clz	r3, r3
 80093d2:	b2db      	uxtb	r3, r3
 80093d4:	3301      	adds	r3, #1
 80093d6:	f003 031f 	and.w	r3, r3, #31
 80093da:	2101      	movs	r1, #1
 80093dc:	fa01 f303 	lsl.w	r3, r1, r3
 80093e0:	ea42 0103 	orr.w	r1, r2, r3
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d10a      	bne.n	8009406 <HAL_ADC_ConfigChannel+0x48e>
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	0e9b      	lsrs	r3, r3, #26
 80093f6:	3301      	adds	r3, #1
 80093f8:	f003 021f 	and.w	r2, r3, #31
 80093fc:	4613      	mov	r3, r2
 80093fe:	005b      	lsls	r3, r3, #1
 8009400:	4413      	add	r3, r2
 8009402:	051b      	lsls	r3, r3, #20
 8009404:	e011      	b.n	800942a <HAL_ADC_ConfigChannel+0x4b2>
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800940c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800940e:	fa93 f3a3 	rbit	r3, r3
 8009412:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8009414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009416:	fab3 f383 	clz	r3, r3
 800941a:	b2db      	uxtb	r3, r3
 800941c:	3301      	adds	r3, #1
 800941e:	f003 021f 	and.w	r2, r3, #31
 8009422:	4613      	mov	r3, r2
 8009424:	005b      	lsls	r3, r3, #1
 8009426:	4413      	add	r3, r2
 8009428:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800942a:	430b      	orrs	r3, r1
 800942c:	e069      	b.n	8009502 <HAL_ADC_ConfigChannel+0x58a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009436:	2b00      	cmp	r3, #0
 8009438:	d107      	bne.n	800944a <HAL_ADC_ConfigChannel+0x4d2>
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	0e9b      	lsrs	r3, r3, #26
 8009440:	3301      	adds	r3, #1
 8009442:	069b      	lsls	r3, r3, #26
 8009444:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8009448:	e00e      	b.n	8009468 <HAL_ADC_ConfigChannel+0x4f0>
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009450:	6a3b      	ldr	r3, [r7, #32]
 8009452:	fa93 f3a3 	rbit	r3, r3
 8009456:	61fb      	str	r3, [r7, #28]
  return result;
 8009458:	69fb      	ldr	r3, [r7, #28]
 800945a:	fab3 f383 	clz	r3, r3
 800945e:	b2db      	uxtb	r3, r3
 8009460:	3301      	adds	r3, #1
 8009462:	069b      	lsls	r3, r3, #26
 8009464:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009470:	2b00      	cmp	r3, #0
 8009472:	d109      	bne.n	8009488 <HAL_ADC_ConfigChannel+0x510>
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	0e9b      	lsrs	r3, r3, #26
 800947a:	3301      	adds	r3, #1
 800947c:	f003 031f 	and.w	r3, r3, #31
 8009480:	2101      	movs	r1, #1
 8009482:	fa01 f303 	lsl.w	r3, r1, r3
 8009486:	e010      	b.n	80094aa <HAL_ADC_ConfigChannel+0x532>
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800948e:	69bb      	ldr	r3, [r7, #24]
 8009490:	fa93 f3a3 	rbit	r3, r3
 8009494:	617b      	str	r3, [r7, #20]
  return result;
 8009496:	697b      	ldr	r3, [r7, #20]
 8009498:	fab3 f383 	clz	r3, r3
 800949c:	b2db      	uxtb	r3, r3
 800949e:	3301      	adds	r3, #1
 80094a0:	f003 031f 	and.w	r3, r3, #31
 80094a4:	2101      	movs	r1, #1
 80094a6:	fa01 f303 	lsl.w	r3, r1, r3
 80094aa:	ea42 0103 	orr.w	r1, r2, r3
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d10d      	bne.n	80094d6 <HAL_ADC_ConfigChannel+0x55e>
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	0e9b      	lsrs	r3, r3, #26
 80094c0:	3301      	adds	r3, #1
 80094c2:	f003 021f 	and.w	r2, r3, #31
 80094c6:	4613      	mov	r3, r2
 80094c8:	005b      	lsls	r3, r3, #1
 80094ca:	4413      	add	r3, r2
 80094cc:	3b1e      	subs	r3, #30
 80094ce:	051b      	lsls	r3, r3, #20
 80094d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80094d4:	e014      	b.n	8009500 <HAL_ADC_ConfigChannel+0x588>
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80094dc:	693b      	ldr	r3, [r7, #16]
 80094de:	fa93 f3a3 	rbit	r3, r3
 80094e2:	60fb      	str	r3, [r7, #12]
  return result;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	fab3 f383 	clz	r3, r3
 80094ea:	b2db      	uxtb	r3, r3
 80094ec:	3301      	adds	r3, #1
 80094ee:	f003 021f 	and.w	r2, r3, #31
 80094f2:	4613      	mov	r3, r2
 80094f4:	005b      	lsls	r3, r3, #1
 80094f6:	4413      	add	r3, r2
 80094f8:	3b1e      	subs	r3, #30
 80094fa:	051b      	lsls	r3, r3, #20
 80094fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009500:	430b      	orrs	r3, r1
 8009502:	683a      	ldr	r2, [r7, #0]
 8009504:	6892      	ldr	r2, [r2, #8]
 8009506:	4619      	mov	r1, r3
 8009508:	f7ff faa2 	bl	8008a50 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	681a      	ldr	r2, [r3, #0]
 8009510:	4b2e      	ldr	r3, [pc, #184]	; (80095cc <HAL_ADC_ConfigChannel+0x654>)
 8009512:	4013      	ands	r3, r2
 8009514:	2b00      	cmp	r3, #0
 8009516:	f000 80c9 	beq.w	80096ac <HAL_ADC_ConfigChannel+0x734>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009522:	d004      	beq.n	800952e <HAL_ADC_ConfigChannel+0x5b6>
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	4a29      	ldr	r2, [pc, #164]	; (80095d0 <HAL_ADC_ConfigChannel+0x658>)
 800952a:	4293      	cmp	r3, r2
 800952c:	d101      	bne.n	8009532 <HAL_ADC_ConfigChannel+0x5ba>
 800952e:	4b29      	ldr	r3, [pc, #164]	; (80095d4 <HAL_ADC_ConfigChannel+0x65c>)
 8009530:	e000      	b.n	8009534 <HAL_ADC_ConfigChannel+0x5bc>
 8009532:	4b29      	ldr	r3, [pc, #164]	; (80095d8 <HAL_ADC_ConfigChannel+0x660>)
 8009534:	4618      	mov	r0, r3
 8009536:	f7ff f9c3 	bl	80088c0 <LL_ADC_GetCommonPathInternalCh>
 800953a:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	4a26      	ldr	r2, [pc, #152]	; (80095dc <HAL_ADC_ConfigChannel+0x664>)
 8009544:	4293      	cmp	r3, r2
 8009546:	d004      	beq.n	8009552 <HAL_ADC_ConfigChannel+0x5da>
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	4a24      	ldr	r2, [pc, #144]	; (80095e0 <HAL_ADC_ConfigChannel+0x668>)
 800954e:	4293      	cmp	r3, r2
 8009550:	d14e      	bne.n	80095f0 <HAL_ADC_ConfigChannel+0x678>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8009552:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009556:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800955a:	2b00      	cmp	r3, #0
 800955c:	d148      	bne.n	80095f0 <HAL_ADC_ConfigChannel+0x678>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009566:	d005      	beq.n	8009574 <HAL_ADC_ConfigChannel+0x5fc>
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	4a1d      	ldr	r2, [pc, #116]	; (80095e4 <HAL_ADC_ConfigChannel+0x66c>)
 800956e:	4293      	cmp	r3, r2
 8009570:	f040 8099 	bne.w	80096a6 <HAL_ADC_ConfigChannel+0x72e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800957c:	d004      	beq.n	8009588 <HAL_ADC_ConfigChannel+0x610>
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	4a13      	ldr	r2, [pc, #76]	; (80095d0 <HAL_ADC_ConfigChannel+0x658>)
 8009584:	4293      	cmp	r3, r2
 8009586:	d101      	bne.n	800958c <HAL_ADC_ConfigChannel+0x614>
 8009588:	4a12      	ldr	r2, [pc, #72]	; (80095d4 <HAL_ADC_ConfigChannel+0x65c>)
 800958a:	e000      	b.n	800958e <HAL_ADC_ConfigChannel+0x616>
 800958c:	4a12      	ldr	r2, [pc, #72]	; (80095d8 <HAL_ADC_ConfigChannel+0x660>)
 800958e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009592:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009596:	4619      	mov	r1, r3
 8009598:	4610      	mov	r0, r2
 800959a:	f7ff f97e 	bl	800889a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800959e:	4b12      	ldr	r3, [pc, #72]	; (80095e8 <HAL_ADC_ConfigChannel+0x670>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	099b      	lsrs	r3, r3, #6
 80095a4:	4a11      	ldr	r2, [pc, #68]	; (80095ec <HAL_ADC_ConfigChannel+0x674>)
 80095a6:	fba2 2303 	umull	r2, r3, r2, r3
 80095aa:	099a      	lsrs	r2, r3, #6
 80095ac:	4613      	mov	r3, r2
 80095ae:	005b      	lsls	r3, r3, #1
 80095b0:	4413      	add	r3, r2
 80095b2:	009b      	lsls	r3, r3, #2
 80095b4:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80095b6:	e002      	b.n	80095be <HAL_ADC_ConfigChannel+0x646>
          {
            wait_loop_index--;
 80095b8:	68bb      	ldr	r3, [r7, #8]
 80095ba:	3b01      	subs	r3, #1
 80095bc:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80095be:	68bb      	ldr	r3, [r7, #8]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d1f9      	bne.n	80095b8 <HAL_ADC_ConfigChannel+0x640>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80095c4:	e06f      	b.n	80096a6 <HAL_ADC_ConfigChannel+0x72e>
 80095c6:	bf00      	nop
 80095c8:	407f0000 	.word	0x407f0000
 80095cc:	80080000 	.word	0x80080000
 80095d0:	50000100 	.word	0x50000100
 80095d4:	50000300 	.word	0x50000300
 80095d8:	50000700 	.word	0x50000700
 80095dc:	c3210000 	.word	0xc3210000
 80095e0:	90c00010 	.word	0x90c00010
 80095e4:	50000600 	.word	0x50000600
 80095e8:	20000ca0 	.word	0x20000ca0
 80095ec:	053e2d63 	.word	0x053e2d63
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	4a32      	ldr	r2, [pc, #200]	; (80096c0 <HAL_ADC_ConfigChannel+0x748>)
 80095f6:	4293      	cmp	r3, r2
 80095f8:	d125      	bne.n	8009646 <HAL_ADC_ConfigChannel+0x6ce>
 80095fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80095fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009602:	2b00      	cmp	r3, #0
 8009604:	d11f      	bne.n	8009646 <HAL_ADC_ConfigChannel+0x6ce>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	4a2e      	ldr	r2, [pc, #184]	; (80096c4 <HAL_ADC_ConfigChannel+0x74c>)
 800960c:	4293      	cmp	r3, r2
 800960e:	d104      	bne.n	800961a <HAL_ADC_ConfigChannel+0x6a2>
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	4a2c      	ldr	r2, [pc, #176]	; (80096c8 <HAL_ADC_ConfigChannel+0x750>)
 8009616:	4293      	cmp	r3, r2
 8009618:	d047      	beq.n	80096aa <HAL_ADC_ConfigChannel+0x732>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009622:	d004      	beq.n	800962e <HAL_ADC_ConfigChannel+0x6b6>
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	4a26      	ldr	r2, [pc, #152]	; (80096c4 <HAL_ADC_ConfigChannel+0x74c>)
 800962a:	4293      	cmp	r3, r2
 800962c:	d101      	bne.n	8009632 <HAL_ADC_ConfigChannel+0x6ba>
 800962e:	4a27      	ldr	r2, [pc, #156]	; (80096cc <HAL_ADC_ConfigChannel+0x754>)
 8009630:	e000      	b.n	8009634 <HAL_ADC_ConfigChannel+0x6bc>
 8009632:	4a27      	ldr	r2, [pc, #156]	; (80096d0 <HAL_ADC_ConfigChannel+0x758>)
 8009634:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009638:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800963c:	4619      	mov	r1, r3
 800963e:	4610      	mov	r0, r2
 8009640:	f7ff f92b 	bl	800889a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8009644:	e031      	b.n	80096aa <HAL_ADC_ConfigChannel+0x732>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	4a22      	ldr	r2, [pc, #136]	; (80096d4 <HAL_ADC_ConfigChannel+0x75c>)
 800964c:	4293      	cmp	r3, r2
 800964e:	d12d      	bne.n	80096ac <HAL_ADC_ConfigChannel+0x734>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8009650:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009654:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009658:	2b00      	cmp	r3, #0
 800965a:	d127      	bne.n	80096ac <HAL_ADC_ConfigChannel+0x734>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	4a18      	ldr	r2, [pc, #96]	; (80096c4 <HAL_ADC_ConfigChannel+0x74c>)
 8009662:	4293      	cmp	r3, r2
 8009664:	d022      	beq.n	80096ac <HAL_ADC_ConfigChannel+0x734>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800966e:	d004      	beq.n	800967a <HAL_ADC_ConfigChannel+0x702>
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	4a13      	ldr	r2, [pc, #76]	; (80096c4 <HAL_ADC_ConfigChannel+0x74c>)
 8009676:	4293      	cmp	r3, r2
 8009678:	d101      	bne.n	800967e <HAL_ADC_ConfigChannel+0x706>
 800967a:	4a14      	ldr	r2, [pc, #80]	; (80096cc <HAL_ADC_ConfigChannel+0x754>)
 800967c:	e000      	b.n	8009680 <HAL_ADC_ConfigChannel+0x708>
 800967e:	4a14      	ldr	r2, [pc, #80]	; (80096d0 <HAL_ADC_ConfigChannel+0x758>)
 8009680:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009684:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009688:	4619      	mov	r1, r3
 800968a:	4610      	mov	r0, r2
 800968c:	f7ff f905 	bl	800889a <LL_ADC_SetCommonPathInternalCh>
 8009690:	e00c      	b.n	80096ac <HAL_ADC_ConfigChannel+0x734>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009696:	f043 0220 	orr.w	r2, r3, #32
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800969e:	2301      	movs	r3, #1
 80096a0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80096a4:	e002      	b.n	80096ac <HAL_ADC_ConfigChannel+0x734>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80096a6:	bf00      	nop
 80096a8:	e000      	b.n	80096ac <HAL_ADC_ConfigChannel+0x734>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80096aa:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2200      	movs	r2, #0
 80096b0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80096b4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 80096b8:	4618      	mov	r0, r3
 80096ba:	3798      	adds	r7, #152	; 0x98
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}
 80096c0:	c7520000 	.word	0xc7520000
 80096c4:	50000100 	.word	0x50000100
 80096c8:	50000500 	.word	0x50000500
 80096cc:	50000300 	.word	0x50000300
 80096d0:	50000700 	.word	0x50000700
 80096d4:	cb840000 	.word	0xcb840000

080096d8 <LL_ADC_IsEnabled>:
{
 80096d8:	b480      	push	{r7}
 80096da:	b083      	sub	sp, #12
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	689b      	ldr	r3, [r3, #8]
 80096e4:	f003 0301 	and.w	r3, r3, #1
 80096e8:	2b01      	cmp	r3, #1
 80096ea:	d101      	bne.n	80096f0 <LL_ADC_IsEnabled+0x18>
 80096ec:	2301      	movs	r3, #1
 80096ee:	e000      	b.n	80096f2 <LL_ADC_IsEnabled+0x1a>
 80096f0:	2300      	movs	r3, #0
}
 80096f2:	4618      	mov	r0, r3
 80096f4:	370c      	adds	r7, #12
 80096f6:	46bd      	mov	sp, r7
 80096f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fc:	4770      	bx	lr

080096fe <LL_ADC_REG_IsConversionOngoing>:
{
 80096fe:	b480      	push	{r7}
 8009700:	b083      	sub	sp, #12
 8009702:	af00      	add	r7, sp, #0
 8009704:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	689b      	ldr	r3, [r3, #8]
 800970a:	f003 0304 	and.w	r3, r3, #4
 800970e:	2b04      	cmp	r3, #4
 8009710:	d101      	bne.n	8009716 <LL_ADC_REG_IsConversionOngoing+0x18>
 8009712:	2301      	movs	r3, #1
 8009714:	e000      	b.n	8009718 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8009716:	2300      	movs	r3, #0
}
 8009718:	4618      	mov	r0, r3
 800971a:	370c      	adds	r7, #12
 800971c:	46bd      	mov	sp, r7
 800971e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009722:	4770      	bx	lr

08009724 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8009724:	b590      	push	{r4, r7, lr}
 8009726:	b0a1      	sub	sp, #132	; 0x84
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
 800972c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800972e:	2300      	movs	r3, #0
 8009730:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800973a:	2b01      	cmp	r3, #1
 800973c:	d101      	bne.n	8009742 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800973e:	2302      	movs	r3, #2
 8009740:	e0e3      	b.n	800990a <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2201      	movs	r2, #1
 8009746:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009752:	d102      	bne.n	800975a <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8009754:	4b6f      	ldr	r3, [pc, #444]	; (8009914 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8009756:	60bb      	str	r3, [r7, #8]
 8009758:	e009      	b.n	800976e <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	4a6e      	ldr	r2, [pc, #440]	; (8009918 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8009760:	4293      	cmp	r3, r2
 8009762:	d102      	bne.n	800976a <HAL_ADCEx_MultiModeConfigChannel+0x46>
 8009764:	4b6d      	ldr	r3, [pc, #436]	; (800991c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8009766:	60bb      	str	r3, [r7, #8]
 8009768:	e001      	b.n	800976e <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 800976a:	2300      	movs	r3, #0
 800976c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800976e:	68bb      	ldr	r3, [r7, #8]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d10b      	bne.n	800978c <HAL_ADCEx_MultiModeConfigChannel+0x68>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009778:	f043 0220 	orr.w	r2, r3, #32
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2200      	movs	r2, #0
 8009784:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8009788:	2301      	movs	r3, #1
 800978a:	e0be      	b.n	800990a <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800978c:	68bb      	ldr	r3, [r7, #8]
 800978e:	4618      	mov	r0, r3
 8009790:	f7ff ffb5 	bl	80096fe <LL_ADC_REG_IsConversionOngoing>
 8009794:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	4618      	mov	r0, r3
 800979c:	f7ff ffaf 	bl	80096fe <LL_ADC_REG_IsConversionOngoing>
 80097a0:	4603      	mov	r3, r0
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	f040 80a0 	bne.w	80098e8 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80097a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	f040 809c 	bne.w	80098e8 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80097b8:	d004      	beq.n	80097c4 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	4a55      	ldr	r2, [pc, #340]	; (8009914 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80097c0:	4293      	cmp	r3, r2
 80097c2:	d101      	bne.n	80097c8 <HAL_ADCEx_MultiModeConfigChannel+0xa4>
 80097c4:	4b56      	ldr	r3, [pc, #344]	; (8009920 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80097c6:	e000      	b.n	80097ca <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 80097c8:	4b56      	ldr	r3, [pc, #344]	; (8009924 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80097ca:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d04b      	beq.n	800986c <HAL_ADCEx_MultiModeConfigChannel+0x148>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80097d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80097d6:	689b      	ldr	r3, [r3, #8]
 80097d8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	6859      	ldr	r1, [r3, #4]
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80097e6:	035b      	lsls	r3, r3, #13
 80097e8:	430b      	orrs	r3, r1
 80097ea:	431a      	orrs	r2, r3
 80097ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80097ee:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80097f8:	d004      	beq.n	8009804 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	4a45      	ldr	r2, [pc, #276]	; (8009914 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8009800:	4293      	cmp	r3, r2
 8009802:	d10f      	bne.n	8009824 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8009804:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8009808:	f7ff ff66 	bl	80096d8 <LL_ADC_IsEnabled>
 800980c:	4604      	mov	r4, r0
 800980e:	4841      	ldr	r0, [pc, #260]	; (8009914 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8009810:	f7ff ff62 	bl	80096d8 <LL_ADC_IsEnabled>
 8009814:	4603      	mov	r3, r0
 8009816:	4323      	orrs	r3, r4
 8009818:	2b00      	cmp	r3, #0
 800981a:	bf0c      	ite	eq
 800981c:	2301      	moveq	r3, #1
 800981e:	2300      	movne	r3, #0
 8009820:	b2db      	uxtb	r3, r3
 8009822:	e012      	b.n	800984a <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8009824:	483c      	ldr	r0, [pc, #240]	; (8009918 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8009826:	f7ff ff57 	bl	80096d8 <LL_ADC_IsEnabled>
 800982a:	4604      	mov	r4, r0
 800982c:	483b      	ldr	r0, [pc, #236]	; (800991c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800982e:	f7ff ff53 	bl	80096d8 <LL_ADC_IsEnabled>
 8009832:	4603      	mov	r3, r0
 8009834:	431c      	orrs	r4, r3
 8009836:	483c      	ldr	r0, [pc, #240]	; (8009928 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8009838:	f7ff ff4e 	bl	80096d8 <LL_ADC_IsEnabled>
 800983c:	4603      	mov	r3, r0
 800983e:	4323      	orrs	r3, r4
 8009840:	2b00      	cmp	r3, #0
 8009842:	bf0c      	ite	eq
 8009844:	2301      	moveq	r3, #1
 8009846:	2300      	movne	r3, #0
 8009848:	b2db      	uxtb	r3, r3
 800984a:	2b00      	cmp	r3, #0
 800984c:	d056      	beq.n	80098fc <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800984e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009850:	689b      	ldr	r3, [r3, #8]
 8009852:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8009856:	f023 030f 	bic.w	r3, r3, #15
 800985a:	683a      	ldr	r2, [r7, #0]
 800985c:	6811      	ldr	r1, [r2, #0]
 800985e:	683a      	ldr	r2, [r7, #0]
 8009860:	6892      	ldr	r2, [r2, #8]
 8009862:	430a      	orrs	r2, r1
 8009864:	431a      	orrs	r2, r3
 8009866:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009868:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800986a:	e047      	b.n	80098fc <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800986c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800986e:	689b      	ldr	r3, [r3, #8]
 8009870:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009874:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009876:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009880:	d004      	beq.n	800988c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	4a23      	ldr	r2, [pc, #140]	; (8009914 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8009888:	4293      	cmp	r3, r2
 800988a:	d10f      	bne.n	80098ac <HAL_ADCEx_MultiModeConfigChannel+0x188>
 800988c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8009890:	f7ff ff22 	bl	80096d8 <LL_ADC_IsEnabled>
 8009894:	4604      	mov	r4, r0
 8009896:	481f      	ldr	r0, [pc, #124]	; (8009914 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8009898:	f7ff ff1e 	bl	80096d8 <LL_ADC_IsEnabled>
 800989c:	4603      	mov	r3, r0
 800989e:	4323      	orrs	r3, r4
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	bf0c      	ite	eq
 80098a4:	2301      	moveq	r3, #1
 80098a6:	2300      	movne	r3, #0
 80098a8:	b2db      	uxtb	r3, r3
 80098aa:	e012      	b.n	80098d2 <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
 80098ac:	481a      	ldr	r0, [pc, #104]	; (8009918 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 80098ae:	f7ff ff13 	bl	80096d8 <LL_ADC_IsEnabled>
 80098b2:	4604      	mov	r4, r0
 80098b4:	4819      	ldr	r0, [pc, #100]	; (800991c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80098b6:	f7ff ff0f 	bl	80096d8 <LL_ADC_IsEnabled>
 80098ba:	4603      	mov	r3, r0
 80098bc:	431c      	orrs	r4, r3
 80098be:	481a      	ldr	r0, [pc, #104]	; (8009928 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80098c0:	f7ff ff0a 	bl	80096d8 <LL_ADC_IsEnabled>
 80098c4:	4603      	mov	r3, r0
 80098c6:	4323      	orrs	r3, r4
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	bf0c      	ite	eq
 80098cc:	2301      	moveq	r3, #1
 80098ce:	2300      	movne	r3, #0
 80098d0:	b2db      	uxtb	r3, r3
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d012      	beq.n	80098fc <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80098d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80098d8:	689b      	ldr	r3, [r3, #8]
 80098da:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80098de:	f023 030f 	bic.w	r3, r3, #15
 80098e2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80098e4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80098e6:	e009      	b.n	80098fc <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80098ec:	f043 0220 	orr.w	r2, r3, #32
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80098f4:	2301      	movs	r3, #1
 80098f6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80098fa:	e000      	b.n	80098fe <HAL_ADCEx_MultiModeConfigChannel+0x1da>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80098fc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	2200      	movs	r2, #0
 8009902:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8009906:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800990a:	4618      	mov	r0, r3
 800990c:	3784      	adds	r7, #132	; 0x84
 800990e:	46bd      	mov	sp, r7
 8009910:	bd90      	pop	{r4, r7, pc}
 8009912:	bf00      	nop
 8009914:	50000100 	.word	0x50000100
 8009918:	50000400 	.word	0x50000400
 800991c:	50000500 	.word	0x50000500
 8009920:	50000300 	.word	0x50000300
 8009924:	50000700 	.word	0x50000700
 8009928:	50000600 	.word	0x50000600

0800992c <LL_EXTI_EnableIT_0_31>:
{
 800992c:	b480      	push	{r7}
 800992e:	b083      	sub	sp, #12
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8009934:	4b05      	ldr	r3, [pc, #20]	; (800994c <LL_EXTI_EnableIT_0_31+0x20>)
 8009936:	681a      	ldr	r2, [r3, #0]
 8009938:	4904      	ldr	r1, [pc, #16]	; (800994c <LL_EXTI_EnableIT_0_31+0x20>)
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	4313      	orrs	r3, r2
 800993e:	600b      	str	r3, [r1, #0]
}
 8009940:	bf00      	nop
 8009942:	370c      	adds	r7, #12
 8009944:	46bd      	mov	sp, r7
 8009946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994a:	4770      	bx	lr
 800994c:	40010400 	.word	0x40010400

08009950 <LL_EXTI_EnableIT_32_63>:
{
 8009950:	b480      	push	{r7}
 8009952:	b083      	sub	sp, #12
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8009958:	4b05      	ldr	r3, [pc, #20]	; (8009970 <LL_EXTI_EnableIT_32_63+0x20>)
 800995a:	6a1a      	ldr	r2, [r3, #32]
 800995c:	4904      	ldr	r1, [pc, #16]	; (8009970 <LL_EXTI_EnableIT_32_63+0x20>)
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	4313      	orrs	r3, r2
 8009962:	620b      	str	r3, [r1, #32]
}
 8009964:	bf00      	nop
 8009966:	370c      	adds	r7, #12
 8009968:	46bd      	mov	sp, r7
 800996a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996e:	4770      	bx	lr
 8009970:	40010400 	.word	0x40010400

08009974 <LL_EXTI_DisableIT_0_31>:
{
 8009974:	b480      	push	{r7}
 8009976:	b083      	sub	sp, #12
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800997c:	4b06      	ldr	r3, [pc, #24]	; (8009998 <LL_EXTI_DisableIT_0_31+0x24>)
 800997e:	681a      	ldr	r2, [r3, #0]
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	43db      	mvns	r3, r3
 8009984:	4904      	ldr	r1, [pc, #16]	; (8009998 <LL_EXTI_DisableIT_0_31+0x24>)
 8009986:	4013      	ands	r3, r2
 8009988:	600b      	str	r3, [r1, #0]
}
 800998a:	bf00      	nop
 800998c:	370c      	adds	r7, #12
 800998e:	46bd      	mov	sp, r7
 8009990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009994:	4770      	bx	lr
 8009996:	bf00      	nop
 8009998:	40010400 	.word	0x40010400

0800999c <LL_EXTI_DisableIT_32_63>:
{
 800999c:	b480      	push	{r7}
 800999e:	b083      	sub	sp, #12
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 80099a4:	4b06      	ldr	r3, [pc, #24]	; (80099c0 <LL_EXTI_DisableIT_32_63+0x24>)
 80099a6:	6a1a      	ldr	r2, [r3, #32]
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	43db      	mvns	r3, r3
 80099ac:	4904      	ldr	r1, [pc, #16]	; (80099c0 <LL_EXTI_DisableIT_32_63+0x24>)
 80099ae:	4013      	ands	r3, r2
 80099b0:	620b      	str	r3, [r1, #32]
}
 80099b2:	bf00      	nop
 80099b4:	370c      	adds	r7, #12
 80099b6:	46bd      	mov	sp, r7
 80099b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099bc:	4770      	bx	lr
 80099be:	bf00      	nop
 80099c0:	40010400 	.word	0x40010400

080099c4 <LL_EXTI_EnableEvent_0_31>:
{
 80099c4:	b480      	push	{r7}
 80099c6:	b083      	sub	sp, #12
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 80099cc:	4b05      	ldr	r3, [pc, #20]	; (80099e4 <LL_EXTI_EnableEvent_0_31+0x20>)
 80099ce:	685a      	ldr	r2, [r3, #4]
 80099d0:	4904      	ldr	r1, [pc, #16]	; (80099e4 <LL_EXTI_EnableEvent_0_31+0x20>)
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	4313      	orrs	r3, r2
 80099d6:	604b      	str	r3, [r1, #4]
}
 80099d8:	bf00      	nop
 80099da:	370c      	adds	r7, #12
 80099dc:	46bd      	mov	sp, r7
 80099de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e2:	4770      	bx	lr
 80099e4:	40010400 	.word	0x40010400

080099e8 <LL_EXTI_EnableEvent_32_63>:
{
 80099e8:	b480      	push	{r7}
 80099ea:	b083      	sub	sp, #12
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 80099f0:	4b05      	ldr	r3, [pc, #20]	; (8009a08 <LL_EXTI_EnableEvent_32_63+0x20>)
 80099f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80099f4:	4904      	ldr	r1, [pc, #16]	; (8009a08 <LL_EXTI_EnableEvent_32_63+0x20>)
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	4313      	orrs	r3, r2
 80099fa:	624b      	str	r3, [r1, #36]	; 0x24
}
 80099fc:	bf00      	nop
 80099fe:	370c      	adds	r7, #12
 8009a00:	46bd      	mov	sp, r7
 8009a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a06:	4770      	bx	lr
 8009a08:	40010400 	.word	0x40010400

08009a0c <LL_EXTI_DisableEvent_0_31>:
{
 8009a0c:	b480      	push	{r7}
 8009a0e:	b083      	sub	sp, #12
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8009a14:	4b06      	ldr	r3, [pc, #24]	; (8009a30 <LL_EXTI_DisableEvent_0_31+0x24>)
 8009a16:	685a      	ldr	r2, [r3, #4]
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	43db      	mvns	r3, r3
 8009a1c:	4904      	ldr	r1, [pc, #16]	; (8009a30 <LL_EXTI_DisableEvent_0_31+0x24>)
 8009a1e:	4013      	ands	r3, r2
 8009a20:	604b      	str	r3, [r1, #4]
}
 8009a22:	bf00      	nop
 8009a24:	370c      	adds	r7, #12
 8009a26:	46bd      	mov	sp, r7
 8009a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2c:	4770      	bx	lr
 8009a2e:	bf00      	nop
 8009a30:	40010400 	.word	0x40010400

08009a34 <LL_EXTI_DisableEvent_32_63>:
{
 8009a34:	b480      	push	{r7}
 8009a36:	b083      	sub	sp, #12
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8009a3c:	4b06      	ldr	r3, [pc, #24]	; (8009a58 <LL_EXTI_DisableEvent_32_63+0x24>)
 8009a3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	43db      	mvns	r3, r3
 8009a44:	4904      	ldr	r1, [pc, #16]	; (8009a58 <LL_EXTI_DisableEvent_32_63+0x24>)
 8009a46:	4013      	ands	r3, r2
 8009a48:	624b      	str	r3, [r1, #36]	; 0x24
}
 8009a4a:	bf00      	nop
 8009a4c:	370c      	adds	r7, #12
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a54:	4770      	bx	lr
 8009a56:	bf00      	nop
 8009a58:	40010400 	.word	0x40010400

08009a5c <LL_EXTI_EnableRisingTrig_0_31>:
{
 8009a5c:	b480      	push	{r7}
 8009a5e:	b083      	sub	sp, #12
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8009a64:	4b05      	ldr	r3, [pc, #20]	; (8009a7c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8009a66:	689a      	ldr	r2, [r3, #8]
 8009a68:	4904      	ldr	r1, [pc, #16]	; (8009a7c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	4313      	orrs	r3, r2
 8009a6e:	608b      	str	r3, [r1, #8]
}
 8009a70:	bf00      	nop
 8009a72:	370c      	adds	r7, #12
 8009a74:	46bd      	mov	sp, r7
 8009a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7a:	4770      	bx	lr
 8009a7c:	40010400 	.word	0x40010400

08009a80 <LL_EXTI_EnableRisingTrig_32_63>:
{
 8009a80:	b480      	push	{r7}
 8009a82:	b083      	sub	sp, #12
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8009a88:	4b05      	ldr	r3, [pc, #20]	; (8009aa0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8009a8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009a8c:	4904      	ldr	r1, [pc, #16]	; (8009aa0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	4313      	orrs	r3, r2
 8009a92:	628b      	str	r3, [r1, #40]	; 0x28
}
 8009a94:	bf00      	nop
 8009a96:	370c      	adds	r7, #12
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9e:	4770      	bx	lr
 8009aa0:	40010400 	.word	0x40010400

08009aa4 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8009aa4:	b480      	push	{r7}
 8009aa6:	b083      	sub	sp, #12
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8009aac:	4b06      	ldr	r3, [pc, #24]	; (8009ac8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8009aae:	689a      	ldr	r2, [r3, #8]
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	43db      	mvns	r3, r3
 8009ab4:	4904      	ldr	r1, [pc, #16]	; (8009ac8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8009ab6:	4013      	ands	r3, r2
 8009ab8:	608b      	str	r3, [r1, #8]
}
 8009aba:	bf00      	nop
 8009abc:	370c      	adds	r7, #12
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac4:	4770      	bx	lr
 8009ac6:	bf00      	nop
 8009ac8:	40010400 	.word	0x40010400

08009acc <LL_EXTI_DisableRisingTrig_32_63>:
{
 8009acc:	b480      	push	{r7}
 8009ace:	b083      	sub	sp, #12
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8009ad4:	4b06      	ldr	r3, [pc, #24]	; (8009af0 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8009ad6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	43db      	mvns	r3, r3
 8009adc:	4904      	ldr	r1, [pc, #16]	; (8009af0 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8009ade:	4013      	ands	r3, r2
 8009ae0:	628b      	str	r3, [r1, #40]	; 0x28
}
 8009ae2:	bf00      	nop
 8009ae4:	370c      	adds	r7, #12
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aec:	4770      	bx	lr
 8009aee:	bf00      	nop
 8009af0:	40010400 	.word	0x40010400

08009af4 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8009af4:	b480      	push	{r7}
 8009af6:	b083      	sub	sp, #12
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8009afc:	4b05      	ldr	r3, [pc, #20]	; (8009b14 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8009afe:	68da      	ldr	r2, [r3, #12]
 8009b00:	4904      	ldr	r1, [pc, #16]	; (8009b14 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	4313      	orrs	r3, r2
 8009b06:	60cb      	str	r3, [r1, #12]
}
 8009b08:	bf00      	nop
 8009b0a:	370c      	adds	r7, #12
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b12:	4770      	bx	lr
 8009b14:	40010400 	.word	0x40010400

08009b18 <LL_EXTI_EnableFallingTrig_32_63>:
{
 8009b18:	b480      	push	{r7}
 8009b1a:	b083      	sub	sp, #12
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8009b20:	4b05      	ldr	r3, [pc, #20]	; (8009b38 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8009b22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b24:	4904      	ldr	r1, [pc, #16]	; (8009b38 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	4313      	orrs	r3, r2
 8009b2a:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8009b2c:	bf00      	nop
 8009b2e:	370c      	adds	r7, #12
 8009b30:	46bd      	mov	sp, r7
 8009b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b36:	4770      	bx	lr
 8009b38:	40010400 	.word	0x40010400

08009b3c <LL_EXTI_DisableFallingTrig_0_31>:
{
 8009b3c:	b480      	push	{r7}
 8009b3e:	b083      	sub	sp, #12
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8009b44:	4b06      	ldr	r3, [pc, #24]	; (8009b60 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8009b46:	68da      	ldr	r2, [r3, #12]
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	43db      	mvns	r3, r3
 8009b4c:	4904      	ldr	r1, [pc, #16]	; (8009b60 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8009b4e:	4013      	ands	r3, r2
 8009b50:	60cb      	str	r3, [r1, #12]
}
 8009b52:	bf00      	nop
 8009b54:	370c      	adds	r7, #12
 8009b56:	46bd      	mov	sp, r7
 8009b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5c:	4770      	bx	lr
 8009b5e:	bf00      	nop
 8009b60:	40010400 	.word	0x40010400

08009b64 <LL_EXTI_DisableFallingTrig_32_63>:
{
 8009b64:	b480      	push	{r7}
 8009b66:	b083      	sub	sp, #12
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8009b6c:	4b06      	ldr	r3, [pc, #24]	; (8009b88 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8009b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	43db      	mvns	r3, r3
 8009b74:	4904      	ldr	r1, [pc, #16]	; (8009b88 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8009b76:	4013      	ands	r3, r2
 8009b78:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8009b7a:	bf00      	nop
 8009b7c:	370c      	adds	r7, #12
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b84:	4770      	bx	lr
 8009b86:	bf00      	nop
 8009b88:	40010400 	.word	0x40010400

08009b8c <LL_EXTI_ClearFlag_0_31>:
{
 8009b8c:	b480      	push	{r7}
 8009b8e:	b083      	sub	sp, #12
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8009b94:	4a04      	ldr	r2, [pc, #16]	; (8009ba8 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	6153      	str	r3, [r2, #20]
}
 8009b9a:	bf00      	nop
 8009b9c:	370c      	adds	r7, #12
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba4:	4770      	bx	lr
 8009ba6:	bf00      	nop
 8009ba8:	40010400 	.word	0x40010400

08009bac <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 8009bac:	b480      	push	{r7}
 8009bae:	b083      	sub	sp, #12
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 8009bb4:	4a04      	ldr	r2, [pc, #16]	; (8009bc8 <LL_EXTI_ClearFlag_32_63+0x1c>)
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	6353      	str	r3, [r2, #52]	; 0x34
}
 8009bba:	bf00      	nop
 8009bbc:	370c      	adds	r7, #12
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc4:	4770      	bx	lr
 8009bc6:	bf00      	nop
 8009bc8:	40010400 	.word	0x40010400

08009bcc <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b088      	sub	sp, #32
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8009bd8:	2300      	movs	r3, #0
 8009bda:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d102      	bne.n	8009be8 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8009be2:	2301      	movs	r3, #1
 8009be4:	77fb      	strb	r3, [r7, #31]
 8009be6:	e180      	b.n	8009eea <HAL_COMP_Init+0x31e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009bf2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009bf6:	d102      	bne.n	8009bfe <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8009bf8:	2301      	movs	r3, #1
 8009bfa:	77fb      	strb	r3, [r7, #31]
 8009bfc:	e175      	b.n	8009eea <HAL_COMP_Init+0x31e>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	7f5b      	ldrb	r3, [r3, #29]
 8009c02:	b2db      	uxtb	r3, r3
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d108      	bne.n	8009c1a <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2200      	movs	r2, #0
 8009c12:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8009c14:	6878      	ldr	r0, [r7, #4]
 8009c16:	f7fd f9d1 	bl	8006fbc <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009c24:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	685b      	ldr	r3, [r3, #4]
 8009c2e:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	695b      	ldr	r3, [r3, #20]
 8009c34:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	68db      	ldr	r3, [r3, #12]
 8009c3a:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (  hcomp->Init.InputMinus
 8009c40:	4313      	orrs	r3, r2
 8009c42:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	681a      	ldr	r2, [r3, #0]
 8009c4a:	4b98      	ldr	r3, [pc, #608]	; (8009eac <HAL_COMP_Init+0x2e0>)
 8009c4c:	4013      	ands	r3, r2
 8009c4e:	687a      	ldr	r2, [r7, #4]
 8009c50:	6812      	ldr	r2, [r2, #0]
 8009c52:	6979      	ldr	r1, [r7, #20]
 8009c54:	430b      	orrs	r3, r1
 8009c56:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d015      	beq.n	8009c92 <HAL_COMP_Init+0xc6>
 8009c66:	69bb      	ldr	r3, [r7, #24]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d112      	bne.n	8009c92 <HAL_COMP_Init+0xc6>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8009c6c:	4b90      	ldr	r3, [pc, #576]	; (8009eb0 <HAL_COMP_Init+0x2e4>)
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	099b      	lsrs	r3, r3, #6
 8009c72:	4a90      	ldr	r2, [pc, #576]	; (8009eb4 <HAL_COMP_Init+0x2e8>)
 8009c74:	fba2 2303 	umull	r2, r3, r2, r3
 8009c78:	099a      	lsrs	r2, r3, #6
 8009c7a:	4613      	mov	r3, r2
 8009c7c:	009b      	lsls	r3, r3, #2
 8009c7e:	4413      	add	r3, r2
 8009c80:	009b      	lsls	r3, r3, #2
 8009c82:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8009c84:	e002      	b.n	8009c8c <HAL_COMP_Init+0xc0>
      {
        wait_loop_index--;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	3b01      	subs	r3, #1
 8009c8a:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d1f9      	bne.n	8009c86 <HAL_COMP_Init+0xba>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	4a88      	ldr	r2, [pc, #544]	; (8009eb8 <HAL_COMP_Init+0x2ec>)
 8009c98:	4293      	cmp	r3, r2
 8009c9a:	d028      	beq.n	8009cee <HAL_COMP_Init+0x122>
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	4a86      	ldr	r2, [pc, #536]	; (8009ebc <HAL_COMP_Init+0x2f0>)
 8009ca2:	4293      	cmp	r3, r2
 8009ca4:	d020      	beq.n	8009ce8 <HAL_COMP_Init+0x11c>
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	4a85      	ldr	r2, [pc, #532]	; (8009ec0 <HAL_COMP_Init+0x2f4>)
 8009cac:	4293      	cmp	r3, r2
 8009cae:	d018      	beq.n	8009ce2 <HAL_COMP_Init+0x116>
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	4a83      	ldr	r2, [pc, #524]	; (8009ec4 <HAL_COMP_Init+0x2f8>)
 8009cb6:	4293      	cmp	r3, r2
 8009cb8:	d010      	beq.n	8009cdc <HAL_COMP_Init+0x110>
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	4a82      	ldr	r2, [pc, #520]	; (8009ec8 <HAL_COMP_Init+0x2fc>)
 8009cc0:	4293      	cmp	r3, r2
 8009cc2:	d008      	beq.n	8009cd6 <HAL_COMP_Init+0x10a>
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	4a80      	ldr	r2, [pc, #512]	; (8009ecc <HAL_COMP_Init+0x300>)
 8009cca:	4293      	cmp	r3, r2
 8009ccc:	d101      	bne.n	8009cd2 <HAL_COMP_Init+0x106>
 8009cce:	2301      	movs	r3, #1
 8009cd0:	e00f      	b.n	8009cf2 <HAL_COMP_Init+0x126>
 8009cd2:	2302      	movs	r3, #2
 8009cd4:	e00d      	b.n	8009cf2 <HAL_COMP_Init+0x126>
 8009cd6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009cda:	e00a      	b.n	8009cf2 <HAL_COMP_Init+0x126>
 8009cdc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009ce0:	e007      	b.n	8009cf2 <HAL_COMP_Init+0x126>
 8009ce2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8009ce6:	e004      	b.n	8009cf2 <HAL_COMP_Init+0x126>
 8009ce8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009cec:	e001      	b.n	8009cf2 <HAL_COMP_Init+0x126>
 8009cee:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009cf2:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	699b      	ldr	r3, [r3, #24]
 8009cf8:	f003 0303 	and.w	r3, r3, #3
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	f000 80b6 	beq.w	8009e6e <HAL_COMP_Init+0x2a2>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	699b      	ldr	r3, [r3, #24]
 8009d06:	f003 0310 	and.w	r3, r3, #16
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d011      	beq.n	8009d32 <HAL_COMP_Init+0x166>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	4a6e      	ldr	r2, [pc, #440]	; (8009ecc <HAL_COMP_Init+0x300>)
 8009d14:	4293      	cmp	r3, r2
 8009d16:	d004      	beq.n	8009d22 <HAL_COMP_Init+0x156>
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	4a6c      	ldr	r2, [pc, #432]	; (8009ed0 <HAL_COMP_Init+0x304>)
 8009d1e:	4293      	cmp	r3, r2
 8009d20:	d103      	bne.n	8009d2a <HAL_COMP_Init+0x15e>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 8009d22:	6938      	ldr	r0, [r7, #16]
 8009d24:	f7ff feac 	bl	8009a80 <LL_EXTI_EnableRisingTrig_32_63>
 8009d28:	e014      	b.n	8009d54 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8009d2a:	6938      	ldr	r0, [r7, #16]
 8009d2c:	f7ff fe96 	bl	8009a5c <LL_EXTI_EnableRisingTrig_0_31>
 8009d30:	e010      	b.n	8009d54 <HAL_COMP_Init+0x188>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	4a65      	ldr	r2, [pc, #404]	; (8009ecc <HAL_COMP_Init+0x300>)
 8009d38:	4293      	cmp	r3, r2
 8009d3a:	d004      	beq.n	8009d46 <HAL_COMP_Init+0x17a>
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	4a63      	ldr	r2, [pc, #396]	; (8009ed0 <HAL_COMP_Init+0x304>)
 8009d42:	4293      	cmp	r3, r2
 8009d44:	d103      	bne.n	8009d4e <HAL_COMP_Init+0x182>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 8009d46:	6938      	ldr	r0, [r7, #16]
 8009d48:	f7ff fec0 	bl	8009acc <LL_EXTI_DisableRisingTrig_32_63>
 8009d4c:	e002      	b.n	8009d54 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8009d4e:	6938      	ldr	r0, [r7, #16]
 8009d50:	f7ff fea8 	bl	8009aa4 <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	699b      	ldr	r3, [r3, #24]
 8009d58:	f003 0320 	and.w	r3, r3, #32
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d011      	beq.n	8009d84 <HAL_COMP_Init+0x1b8>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	4a59      	ldr	r2, [pc, #356]	; (8009ecc <HAL_COMP_Init+0x300>)
 8009d66:	4293      	cmp	r3, r2
 8009d68:	d004      	beq.n	8009d74 <HAL_COMP_Init+0x1a8>
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	4a58      	ldr	r2, [pc, #352]	; (8009ed0 <HAL_COMP_Init+0x304>)
 8009d70:	4293      	cmp	r3, r2
 8009d72:	d103      	bne.n	8009d7c <HAL_COMP_Init+0x1b0>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 8009d74:	6938      	ldr	r0, [r7, #16]
 8009d76:	f7ff fecf 	bl	8009b18 <LL_EXTI_EnableFallingTrig_32_63>
 8009d7a:	e014      	b.n	8009da6 <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8009d7c:	6938      	ldr	r0, [r7, #16]
 8009d7e:	f7ff feb9 	bl	8009af4 <LL_EXTI_EnableFallingTrig_0_31>
 8009d82:	e010      	b.n	8009da6 <HAL_COMP_Init+0x1da>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	4a50      	ldr	r2, [pc, #320]	; (8009ecc <HAL_COMP_Init+0x300>)
 8009d8a:	4293      	cmp	r3, r2
 8009d8c:	d004      	beq.n	8009d98 <HAL_COMP_Init+0x1cc>
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	4a4f      	ldr	r2, [pc, #316]	; (8009ed0 <HAL_COMP_Init+0x304>)
 8009d94:	4293      	cmp	r3, r2
 8009d96:	d103      	bne.n	8009da0 <HAL_COMP_Init+0x1d4>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 8009d98:	6938      	ldr	r0, [r7, #16]
 8009d9a:	f7ff fee3 	bl	8009b64 <LL_EXTI_DisableFallingTrig_32_63>
 8009d9e:	e002      	b.n	8009da6 <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8009da0:	6938      	ldr	r0, [r7, #16]
 8009da2:	f7ff fecb 	bl	8009b3c <LL_EXTI_DisableFallingTrig_0_31>
#endif
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	4a48      	ldr	r2, [pc, #288]	; (8009ecc <HAL_COMP_Init+0x300>)
 8009dac:	4293      	cmp	r3, r2
 8009dae:	d004      	beq.n	8009dba <HAL_COMP_Init+0x1ee>
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	4a46      	ldr	r2, [pc, #280]	; (8009ed0 <HAL_COMP_Init+0x304>)
 8009db6:	4293      	cmp	r3, r2
 8009db8:	d103      	bne.n	8009dc2 <HAL_COMP_Init+0x1f6>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 8009dba:	6938      	ldr	r0, [r7, #16]
 8009dbc:	f7ff fef6 	bl	8009bac <LL_EXTI_ClearFlag_32_63>
 8009dc0:	e002      	b.n	8009dc8 <HAL_COMP_Init+0x1fc>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 8009dc2:	6938      	ldr	r0, [r7, #16]
 8009dc4:	f7ff fee2 	bl	8009b8c <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	699b      	ldr	r3, [r3, #24]
 8009dcc:	f003 0302 	and.w	r3, r3, #2
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d011      	beq.n	8009df8 <HAL_COMP_Init+0x22c>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	4a3c      	ldr	r2, [pc, #240]	; (8009ecc <HAL_COMP_Init+0x300>)
 8009dda:	4293      	cmp	r3, r2
 8009ddc:	d004      	beq.n	8009de8 <HAL_COMP_Init+0x21c>
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	4a3b      	ldr	r2, [pc, #236]	; (8009ed0 <HAL_COMP_Init+0x304>)
 8009de4:	4293      	cmp	r3, r2
 8009de6:	d103      	bne.n	8009df0 <HAL_COMP_Init+0x224>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 8009de8:	6938      	ldr	r0, [r7, #16]
 8009dea:	f7ff fdfd 	bl	80099e8 <LL_EXTI_EnableEvent_32_63>
 8009dee:	e014      	b.n	8009e1a <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 8009df0:	6938      	ldr	r0, [r7, #16]
 8009df2:	f7ff fde7 	bl	80099c4 <LL_EXTI_EnableEvent_0_31>
 8009df6:	e010      	b.n	8009e1a <HAL_COMP_Init+0x24e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	4a33      	ldr	r2, [pc, #204]	; (8009ecc <HAL_COMP_Init+0x300>)
 8009dfe:	4293      	cmp	r3, r2
 8009e00:	d004      	beq.n	8009e0c <HAL_COMP_Init+0x240>
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	4a32      	ldr	r2, [pc, #200]	; (8009ed0 <HAL_COMP_Init+0x304>)
 8009e08:	4293      	cmp	r3, r2
 8009e0a:	d103      	bne.n	8009e14 <HAL_COMP_Init+0x248>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 8009e0c:	6938      	ldr	r0, [r7, #16]
 8009e0e:	f7ff fe11 	bl	8009a34 <LL_EXTI_DisableEvent_32_63>
 8009e12:	e002      	b.n	8009e1a <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 8009e14:	6938      	ldr	r0, [r7, #16]
 8009e16:	f7ff fdf9 	bl	8009a0c <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	699b      	ldr	r3, [r3, #24]
 8009e1e:	f003 0301 	and.w	r3, r3, #1
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d011      	beq.n	8009e4a <HAL_COMP_Init+0x27e>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	4a28      	ldr	r2, [pc, #160]	; (8009ecc <HAL_COMP_Init+0x300>)
 8009e2c:	4293      	cmp	r3, r2
 8009e2e:	d004      	beq.n	8009e3a <HAL_COMP_Init+0x26e>
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	4a26      	ldr	r2, [pc, #152]	; (8009ed0 <HAL_COMP_Init+0x304>)
 8009e36:	4293      	cmp	r3, r2
 8009e38:	d103      	bne.n	8009e42 <HAL_COMP_Init+0x276>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 8009e3a:	6938      	ldr	r0, [r7, #16]
 8009e3c:	f7ff fd88 	bl	8009950 <LL_EXTI_EnableIT_32_63>
 8009e40:	e04b      	b.n	8009eda <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 8009e42:	6938      	ldr	r0, [r7, #16]
 8009e44:	f7ff fd72 	bl	800992c <LL_EXTI_EnableIT_0_31>
 8009e48:	e047      	b.n	8009eda <HAL_COMP_Init+0x30e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	4a1f      	ldr	r2, [pc, #124]	; (8009ecc <HAL_COMP_Init+0x300>)
 8009e50:	4293      	cmp	r3, r2
 8009e52:	d004      	beq.n	8009e5e <HAL_COMP_Init+0x292>
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	4a1d      	ldr	r2, [pc, #116]	; (8009ed0 <HAL_COMP_Init+0x304>)
 8009e5a:	4293      	cmp	r3, r2
 8009e5c:	d103      	bne.n	8009e66 <HAL_COMP_Init+0x29a>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 8009e5e:	6938      	ldr	r0, [r7, #16]
 8009e60:	f7ff fd9c 	bl	800999c <LL_EXTI_DisableIT_32_63>
 8009e64:	e039      	b.n	8009eda <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 8009e66:	6938      	ldr	r0, [r7, #16]
 8009e68:	f7ff fd84 	bl	8009974 <LL_EXTI_DisableIT_0_31>
 8009e6c:	e035      	b.n	8009eda <HAL_COMP_Init+0x30e>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	4a16      	ldr	r2, [pc, #88]	; (8009ecc <HAL_COMP_Init+0x300>)
 8009e74:	4293      	cmp	r3, r2
 8009e76:	d004      	beq.n	8009e82 <HAL_COMP_Init+0x2b6>
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	4a14      	ldr	r2, [pc, #80]	; (8009ed0 <HAL_COMP_Init+0x304>)
 8009e7e:	4293      	cmp	r3, r2
 8009e80:	d103      	bne.n	8009e8a <HAL_COMP_Init+0x2be>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 8009e82:	6938      	ldr	r0, [r7, #16]
 8009e84:	f7ff fdd6 	bl	8009a34 <LL_EXTI_DisableEvent_32_63>
 8009e88:	e002      	b.n	8009e90 <HAL_COMP_Init+0x2c4>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8009e8a:	6938      	ldr	r0, [r7, #16]
 8009e8c:	f7ff fdbe 	bl	8009a0c <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif

      /* Disable EXTI interrupt mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	4a0d      	ldr	r2, [pc, #52]	; (8009ecc <HAL_COMP_Init+0x300>)
 8009e96:	4293      	cmp	r3, r2
 8009e98:	d004      	beq.n	8009ea4 <HAL_COMP_Init+0x2d8>
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	4a0c      	ldr	r2, [pc, #48]	; (8009ed0 <HAL_COMP_Init+0x304>)
 8009ea0:	4293      	cmp	r3, r2
 8009ea2:	d117      	bne.n	8009ed4 <HAL_COMP_Init+0x308>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 8009ea4:	6938      	ldr	r0, [r7, #16]
 8009ea6:	f7ff fd79 	bl	800999c <LL_EXTI_DisableIT_32_63>
 8009eaa:	e016      	b.n	8009eda <HAL_COMP_Init+0x30e>
 8009eac:	ff007e0f 	.word	0xff007e0f
 8009eb0:	20000ca0 	.word	0x20000ca0
 8009eb4:	053e2d63 	.word	0x053e2d63
 8009eb8:	40010200 	.word	0x40010200
 8009ebc:	40010204 	.word	0x40010204
 8009ec0:	40010208 	.word	0x40010208
 8009ec4:	4001020c 	.word	0x4001020c
 8009ec8:	40010210 	.word	0x40010210
 8009ecc:	40010214 	.word	0x40010214
 8009ed0:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8009ed4:	6938      	ldr	r0, [r7, #16]
 8009ed6:	f7ff fd4d 	bl	8009974 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	7f5b      	ldrb	r3, [r3, #29]
 8009ede:	b2db      	uxtb	r3, r3
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d102      	bne.n	8009eea <HAL_COMP_Init+0x31e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2201      	movs	r2, #1
 8009ee8:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 8009eea:	7ffb      	ldrb	r3, [r7, #31]
}
 8009eec:	4618      	mov	r0, r3
 8009eee:	3720      	adds	r7, #32
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	bd80      	pop	{r7, pc}

08009ef4 <__NVIC_SetPriorityGrouping>:
{
 8009ef4:	b480      	push	{r7}
 8009ef6:	b085      	sub	sp, #20
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	f003 0307 	and.w	r3, r3, #7
 8009f02:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009f04:	4b0c      	ldr	r3, [pc, #48]	; (8009f38 <__NVIC_SetPriorityGrouping+0x44>)
 8009f06:	68db      	ldr	r3, [r3, #12]
 8009f08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009f0a:	68ba      	ldr	r2, [r7, #8]
 8009f0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009f10:	4013      	ands	r3, r2
 8009f12:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009f18:	68bb      	ldr	r3, [r7, #8]
 8009f1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009f1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009f20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009f26:	4a04      	ldr	r2, [pc, #16]	; (8009f38 <__NVIC_SetPriorityGrouping+0x44>)
 8009f28:	68bb      	ldr	r3, [r7, #8]
 8009f2a:	60d3      	str	r3, [r2, #12]
}
 8009f2c:	bf00      	nop
 8009f2e:	3714      	adds	r7, #20
 8009f30:	46bd      	mov	sp, r7
 8009f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f36:	4770      	bx	lr
 8009f38:	e000ed00 	.word	0xe000ed00

08009f3c <__NVIC_GetPriorityGrouping>:
{
 8009f3c:	b480      	push	{r7}
 8009f3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009f40:	4b04      	ldr	r3, [pc, #16]	; (8009f54 <__NVIC_GetPriorityGrouping+0x18>)
 8009f42:	68db      	ldr	r3, [r3, #12]
 8009f44:	0a1b      	lsrs	r3, r3, #8
 8009f46:	f003 0307 	and.w	r3, r3, #7
}
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f52:	4770      	bx	lr
 8009f54:	e000ed00 	.word	0xe000ed00

08009f58 <__NVIC_EnableIRQ>:
{
 8009f58:	b480      	push	{r7}
 8009f5a:	b083      	sub	sp, #12
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	4603      	mov	r3, r0
 8009f60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	db0b      	blt.n	8009f82 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009f6a:	79fb      	ldrb	r3, [r7, #7]
 8009f6c:	f003 021f 	and.w	r2, r3, #31
 8009f70:	4907      	ldr	r1, [pc, #28]	; (8009f90 <__NVIC_EnableIRQ+0x38>)
 8009f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009f76:	095b      	lsrs	r3, r3, #5
 8009f78:	2001      	movs	r0, #1
 8009f7a:	fa00 f202 	lsl.w	r2, r0, r2
 8009f7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8009f82:	bf00      	nop
 8009f84:	370c      	adds	r7, #12
 8009f86:	46bd      	mov	sp, r7
 8009f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8c:	4770      	bx	lr
 8009f8e:	bf00      	nop
 8009f90:	e000e100 	.word	0xe000e100

08009f94 <__NVIC_SetPriority>:
{
 8009f94:	b480      	push	{r7}
 8009f96:	b083      	sub	sp, #12
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	6039      	str	r1, [r7, #0]
 8009f9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009fa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	db0a      	blt.n	8009fbe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	b2da      	uxtb	r2, r3
 8009fac:	490c      	ldr	r1, [pc, #48]	; (8009fe0 <__NVIC_SetPriority+0x4c>)
 8009fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009fb2:	0112      	lsls	r2, r2, #4
 8009fb4:	b2d2      	uxtb	r2, r2
 8009fb6:	440b      	add	r3, r1
 8009fb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009fbc:	e00a      	b.n	8009fd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	b2da      	uxtb	r2, r3
 8009fc2:	4908      	ldr	r1, [pc, #32]	; (8009fe4 <__NVIC_SetPriority+0x50>)
 8009fc4:	79fb      	ldrb	r3, [r7, #7]
 8009fc6:	f003 030f 	and.w	r3, r3, #15
 8009fca:	3b04      	subs	r3, #4
 8009fcc:	0112      	lsls	r2, r2, #4
 8009fce:	b2d2      	uxtb	r2, r2
 8009fd0:	440b      	add	r3, r1
 8009fd2:	761a      	strb	r2, [r3, #24]
}
 8009fd4:	bf00      	nop
 8009fd6:	370c      	adds	r7, #12
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fde:	4770      	bx	lr
 8009fe0:	e000e100 	.word	0xe000e100
 8009fe4:	e000ed00 	.word	0xe000ed00

08009fe8 <NVIC_EncodePriority>:
{
 8009fe8:	b480      	push	{r7}
 8009fea:	b089      	sub	sp, #36	; 0x24
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	60f8      	str	r0, [r7, #12]
 8009ff0:	60b9      	str	r1, [r7, #8]
 8009ff2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	f003 0307 	and.w	r3, r3, #7
 8009ffa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009ffc:	69fb      	ldr	r3, [r7, #28]
 8009ffe:	f1c3 0307 	rsb	r3, r3, #7
 800a002:	2b04      	cmp	r3, #4
 800a004:	bf28      	it	cs
 800a006:	2304      	movcs	r3, #4
 800a008:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a00a:	69fb      	ldr	r3, [r7, #28]
 800a00c:	3304      	adds	r3, #4
 800a00e:	2b06      	cmp	r3, #6
 800a010:	d902      	bls.n	800a018 <NVIC_EncodePriority+0x30>
 800a012:	69fb      	ldr	r3, [r7, #28]
 800a014:	3b03      	subs	r3, #3
 800a016:	e000      	b.n	800a01a <NVIC_EncodePriority+0x32>
 800a018:	2300      	movs	r3, #0
 800a01a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a01c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a020:	69bb      	ldr	r3, [r7, #24]
 800a022:	fa02 f303 	lsl.w	r3, r2, r3
 800a026:	43da      	mvns	r2, r3
 800a028:	68bb      	ldr	r3, [r7, #8]
 800a02a:	401a      	ands	r2, r3
 800a02c:	697b      	ldr	r3, [r7, #20]
 800a02e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a030:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a034:	697b      	ldr	r3, [r7, #20]
 800a036:	fa01 f303 	lsl.w	r3, r1, r3
 800a03a:	43d9      	mvns	r1, r3
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a040:	4313      	orrs	r3, r2
}
 800a042:	4618      	mov	r0, r3
 800a044:	3724      	adds	r7, #36	; 0x24
 800a046:	46bd      	mov	sp, r7
 800a048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04c:	4770      	bx	lr
	...

0800a050 <SysTick_Config>:
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b082      	sub	sp, #8
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	3b01      	subs	r3, #1
 800a05c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a060:	d301      	bcc.n	800a066 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800a062:	2301      	movs	r3, #1
 800a064:	e00f      	b.n	800a086 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a066:	4a0a      	ldr	r2, [pc, #40]	; (800a090 <SysTick_Config+0x40>)
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	3b01      	subs	r3, #1
 800a06c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a06e:	210f      	movs	r1, #15
 800a070:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a074:	f7ff ff8e 	bl	8009f94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a078:	4b05      	ldr	r3, [pc, #20]	; (800a090 <SysTick_Config+0x40>)
 800a07a:	2200      	movs	r2, #0
 800a07c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a07e:	4b04      	ldr	r3, [pc, #16]	; (800a090 <SysTick_Config+0x40>)
 800a080:	2207      	movs	r2, #7
 800a082:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800a084:	2300      	movs	r3, #0
}
 800a086:	4618      	mov	r0, r3
 800a088:	3708      	adds	r7, #8
 800a08a:	46bd      	mov	sp, r7
 800a08c:	bd80      	pop	{r7, pc}
 800a08e:	bf00      	nop
 800a090:	e000e010 	.word	0xe000e010

0800a094 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b082      	sub	sp, #8
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a09c:	6878      	ldr	r0, [r7, #4]
 800a09e:	f7ff ff29 	bl	8009ef4 <__NVIC_SetPriorityGrouping>
}
 800a0a2:	bf00      	nop
 800a0a4:	3708      	adds	r7, #8
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	bd80      	pop	{r7, pc}

0800a0aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a0aa:	b580      	push	{r7, lr}
 800a0ac:	b086      	sub	sp, #24
 800a0ae:	af00      	add	r7, sp, #0
 800a0b0:	4603      	mov	r3, r0
 800a0b2:	60b9      	str	r1, [r7, #8]
 800a0b4:	607a      	str	r2, [r7, #4]
 800a0b6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800a0b8:	f7ff ff40 	bl	8009f3c <__NVIC_GetPriorityGrouping>
 800a0bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a0be:	687a      	ldr	r2, [r7, #4]
 800a0c0:	68b9      	ldr	r1, [r7, #8]
 800a0c2:	6978      	ldr	r0, [r7, #20]
 800a0c4:	f7ff ff90 	bl	8009fe8 <NVIC_EncodePriority>
 800a0c8:	4602      	mov	r2, r0
 800a0ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a0ce:	4611      	mov	r1, r2
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	f7ff ff5f 	bl	8009f94 <__NVIC_SetPriority>
}
 800a0d6:	bf00      	nop
 800a0d8:	3718      	adds	r7, #24
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	bd80      	pop	{r7, pc}

0800a0de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a0de:	b580      	push	{r7, lr}
 800a0e0:	b082      	sub	sp, #8
 800a0e2:	af00      	add	r7, sp, #0
 800a0e4:	4603      	mov	r3, r0
 800a0e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a0e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	f7ff ff33 	bl	8009f58 <__NVIC_EnableIRQ>
}
 800a0f2:	bf00      	nop
 800a0f4:	3708      	adds	r7, #8
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	bd80      	pop	{r7, pc}

0800a0fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a0fa:	b580      	push	{r7, lr}
 800a0fc:	b082      	sub	sp, #8
 800a0fe:	af00      	add	r7, sp, #0
 800a100:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a102:	6878      	ldr	r0, [r7, #4]
 800a104:	f7ff ffa4 	bl	800a050 <SysTick_Config>
 800a108:	4603      	mov	r3, r0
}
 800a10a:	4618      	mov	r0, r3
 800a10c:	3708      	adds	r7, #8
 800a10e:	46bd      	mov	sp, r7
 800a110:	bd80      	pop	{r7, pc}

0800a112 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800a112:	b580      	push	{r7, lr}
 800a114:	b082      	sub	sp, #8
 800a116:	af00      	add	r7, sp, #0
 800a118:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d101      	bne.n	800a124 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800a120:	2301      	movs	r3, #1
 800a122:	e014      	b.n	800a14e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	791b      	ldrb	r3, [r3, #4]
 800a128:	b2db      	uxtb	r3, r3
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d105      	bne.n	800a13a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2200      	movs	r2, #0
 800a132:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800a134:	6878      	ldr	r0, [r7, #4]
 800a136:	f7fc fff7 	bl	8007128 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	2202      	movs	r2, #2
 800a13e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2200      	movs	r2, #0
 800a144:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	2201      	movs	r2, #1
 800a14a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800a14c:	2300      	movs	r3, #0
}
 800a14e:	4618      	mov	r0, r3
 800a150:	3708      	adds	r7, #8
 800a152:	46bd      	mov	sp, r7
 800a154:	bd80      	pop	{r7, pc}

0800a156 <HAL_DAC_Start>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800a156:	b580      	push	{r7, lr}
 800a158:	b082      	sub	sp, #8
 800a15a:	af00      	add	r7, sp, #0
 800a15c:	6078      	str	r0, [r7, #4]
 800a15e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	795b      	ldrb	r3, [r3, #5]
 800a164:	2b01      	cmp	r3, #1
 800a166:	d101      	bne.n	800a16c <HAL_DAC_Start+0x16>
 800a168:	2302      	movs	r3, #2
 800a16a:	e043      	b.n	800a1f4 <HAL_DAC_Start+0x9e>
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2201      	movs	r2, #1
 800a170:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	2202      	movs	r2, #2
 800a176:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	6819      	ldr	r1, [r3, #0]
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	f003 0310 	and.w	r3, r3, #16
 800a184:	2201      	movs	r2, #1
 800a186:	409a      	lsls	r2, r3
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	430a      	orrs	r2, r1
 800a18e:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 800a190:	2001      	movs	r0, #1
 800a192:	f7fe fb4d 	bl	8008830 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 800a196:	683b      	ldr	r3, [r7, #0]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d10f      	bne.n	800a1bc <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800a1a6:	2b02      	cmp	r3, #2
 800a1a8:	d11d      	bne.n	800a1e6 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	685a      	ldr	r2, [r3, #4]
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	f042 0201 	orr.w	r2, r2, #1
 800a1b8:	605a      	str	r2, [r3, #4]
 800a1ba:	e014      	b.n	800a1e6 <HAL_DAC_Start+0x90>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	f003 0310 	and.w	r3, r3, #16
 800a1cc:	2102      	movs	r1, #2
 800a1ce:	fa01 f303 	lsl.w	r3, r1, r3
 800a1d2:	429a      	cmp	r2, r3
 800a1d4:	d107      	bne.n	800a1e6 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	685a      	ldr	r2, [r3, #4]
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	f042 0202 	orr.w	r2, r2, #2
 800a1e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	2201      	movs	r2, #1
 800a1ea:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800a1f2:	2300      	movs	r3, #0
}
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	3708      	adds	r7, #8
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	bd80      	pop	{r7, pc}

0800a1fc <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b086      	sub	sp, #24
 800a200:	af00      	add	r7, sp, #0
 800a202:	60f8      	str	r0, [r7, #12]
 800a204:	60b9      	str	r1, [r7, #8]
 800a206:	607a      	str	r2, [r7, #4]
 800a208:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 800a20a:	2300      	movs	r3, #0
 800a20c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	795b      	ldrb	r3, [r3, #5]
 800a212:	2b01      	cmp	r3, #1
 800a214:	d101      	bne.n	800a21a <HAL_DAC_Start_DMA+0x1e>
 800a216:	2302      	movs	r3, #2
 800a218:	e0a1      	b.n	800a35e <HAL_DAC_Start_DMA+0x162>
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	2201      	movs	r2, #1
 800a21e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	2202      	movs	r2, #2
 800a224:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800a226:	68bb      	ldr	r3, [r7, #8]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d12a      	bne.n	800a282 <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	689b      	ldr	r3, [r3, #8]
 800a230:	4a4d      	ldr	r2, [pc, #308]	; (800a368 <HAL_DAC_Start_DMA+0x16c>)
 800a232:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	689b      	ldr	r3, [r3, #8]
 800a238:	4a4c      	ldr	r2, [pc, #304]	; (800a36c <HAL_DAC_Start_DMA+0x170>)
 800a23a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	689b      	ldr	r3, [r3, #8]
 800a240:	4a4b      	ldr	r2, [pc, #300]	; (800a370 <HAL_DAC_Start_DMA+0x174>)
 800a242:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	681a      	ldr	r2, [r3, #0]
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a252:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800a254:	6a3b      	ldr	r3, [r7, #32]
 800a256:	2b04      	cmp	r3, #4
 800a258:	d009      	beq.n	800a26e <HAL_DAC_Start_DMA+0x72>
 800a25a:	2b08      	cmp	r3, #8
 800a25c:	d00c      	beq.n	800a278 <HAL_DAC_Start_DMA+0x7c>
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d000      	beq.n	800a264 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 800a262:	e039      	b.n	800a2d8 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	3308      	adds	r3, #8
 800a26a:	613b      	str	r3, [r7, #16]
        break;
 800a26c:	e034      	b.n	800a2d8 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	330c      	adds	r3, #12
 800a274:	613b      	str	r3, [r7, #16]
        break;
 800a276:	e02f      	b.n	800a2d8 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	3310      	adds	r3, #16
 800a27e:	613b      	str	r3, [r7, #16]
        break;
 800a280:	e02a      	b.n	800a2d8 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	68db      	ldr	r3, [r3, #12]
 800a286:	4a3b      	ldr	r2, [pc, #236]	; (800a374 <HAL_DAC_Start_DMA+0x178>)
 800a288:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	68db      	ldr	r3, [r3, #12]
 800a28e:	4a3a      	ldr	r2, [pc, #232]	; (800a378 <HAL_DAC_Start_DMA+0x17c>)
 800a290:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	68db      	ldr	r3, [r3, #12]
 800a296:	4a39      	ldr	r2, [pc, #228]	; (800a37c <HAL_DAC_Start_DMA+0x180>)
 800a298:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	681a      	ldr	r2, [r3, #0]
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800a2a8:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800a2aa:	6a3b      	ldr	r3, [r7, #32]
 800a2ac:	2b04      	cmp	r3, #4
 800a2ae:	d009      	beq.n	800a2c4 <HAL_DAC_Start_DMA+0xc8>
 800a2b0:	2b08      	cmp	r3, #8
 800a2b2:	d00c      	beq.n	800a2ce <HAL_DAC_Start_DMA+0xd2>
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d000      	beq.n	800a2ba <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 800a2b8:	e00e      	b.n	800a2d8 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	3314      	adds	r3, #20
 800a2c0:	613b      	str	r3, [r7, #16]
        break;
 800a2c2:	e009      	b.n	800a2d8 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	3318      	adds	r3, #24
 800a2ca:	613b      	str	r3, [r7, #16]
        break;
 800a2cc:	e004      	b.n	800a2d8 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	331c      	adds	r3, #28
 800a2d4:	613b      	str	r3, [r7, #16]
        break;
 800a2d6:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 800a2d8:	68bb      	ldr	r3, [r7, #8]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d111      	bne.n	800a302 <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	681a      	ldr	r2, [r3, #0]
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a2ec:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	6898      	ldr	r0, [r3, #8]
 800a2f2:	6879      	ldr	r1, [r7, #4]
 800a2f4:	683b      	ldr	r3, [r7, #0]
 800a2f6:	693a      	ldr	r2, [r7, #16]
 800a2f8:	f000 fbd2 	bl	800aaa0 <HAL_DMA_Start_IT>
 800a2fc:	4603      	mov	r3, r0
 800a2fe:	75fb      	strb	r3, [r7, #23]
 800a300:	e010      	b.n	800a324 <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	681a      	ldr	r2, [r3, #0]
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800a310:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	68d8      	ldr	r0, [r3, #12]
 800a316:	6879      	ldr	r1, [r7, #4]
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	693a      	ldr	r2, [r7, #16]
 800a31c:	f000 fbc0 	bl	800aaa0 <HAL_DMA_Start_IT>
 800a320:	4603      	mov	r3, r0
 800a322:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	2200      	movs	r2, #0
 800a328:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 800a32a:	7dfb      	ldrb	r3, [r7, #23]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d10f      	bne.n	800a350 <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	6819      	ldr	r1, [r3, #0]
 800a336:	68bb      	ldr	r3, [r7, #8]
 800a338:	f003 0310 	and.w	r3, r3, #16
 800a33c:	2201      	movs	r2, #1
 800a33e:	409a      	lsls	r2, r3
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	430a      	orrs	r2, r1
 800a346:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 800a348:	2001      	movs	r0, #1
 800a34a:	f7fe fa71 	bl	8008830 <HAL_Delay>
 800a34e:	e005      	b.n	800a35c <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	691b      	ldr	r3, [r3, #16]
 800a354:	f043 0204 	orr.w	r2, r3, #4
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 800a35c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a35e:	4618      	mov	r0, r3
 800a360:	3718      	adds	r7, #24
 800a362:	46bd      	mov	sp, r7
 800a364:	bd80      	pop	{r7, pc}
 800a366:	bf00      	nop
 800a368:	0800a83d 	.word	0x0800a83d
 800a36c:	0800a85f 	.word	0x0800a85f
 800a370:	0800a87b 	.word	0x0800a87b
 800a374:	0800a8e5 	.word	0x0800a8e5
 800a378:	0800a907 	.word	0x0800a907
 800a37c:	0800a923 	.word	0x0800a923

0800a380 <HAL_DAC_Stop_DMA>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800a380:	b580      	push	{r7, lr}
 800a382:	b084      	sub	sp, #16
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
 800a388:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	6819      	ldr	r1, [r3, #0]
 800a390:	683b      	ldr	r3, [r7, #0]
 800a392:	f003 0310 	and.w	r3, r3, #16
 800a396:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a39a:	fa02 f303 	lsl.w	r3, r2, r3
 800a39e:	43da      	mvns	r2, r3
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	400a      	ands	r2, r1
 800a3a6:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	6819      	ldr	r1, [r3, #0]
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	f003 0310 	and.w	r3, r3, #16
 800a3b4:	2201      	movs	r2, #1
 800a3b6:	fa02 f303 	lsl.w	r3, r2, r3
 800a3ba:	43da      	mvns	r2, r3
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	400a      	ands	r2, r1
 800a3c2:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before enabling peripheral after disabling it */
  HAL_Delay(1);
 800a3c4:	2001      	movs	r0, #1
 800a3c6:	f7fe fa33 	bl	8008830 <HAL_Delay>

  /* Disable the DMA channel */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 800a3ca:	683b      	ldr	r3, [r7, #0]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d10f      	bne.n	800a3f0 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	689b      	ldr	r3, [r3, #8]
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	f000 fbde 	bl	800ab96 <HAL_DMA_Abort>
 800a3da:	4603      	mov	r3, r0
 800a3dc:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	681a      	ldr	r2, [r3, #0]
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a3ec:	601a      	str	r2, [r3, #0]
 800a3ee:	e00e      	b.n	800a40e <HAL_DAC_Stop_DMA+0x8e>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle2);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	68db      	ldr	r3, [r3, #12]
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	f000 fbce 	bl	800ab96 <HAL_DMA_Abort>
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	681a      	ldr	r2, [r3, #0]
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800a40c:	601a      	str	r2, [r3, #0]
  }

  /* Check if DMA Channel effectively disabled */
  if (status != HAL_OK)
 800a40e:	7bfb      	ldrb	r3, [r7, #15]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d003      	beq.n	800a41c <HAL_DAC_Stop_DMA+0x9c>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2204      	movs	r2, #4
 800a418:	711a      	strb	r2, [r3, #4]
 800a41a:	e002      	b.n	800a422 <HAL_DAC_Stop_DMA+0xa2>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	2201      	movs	r2, #1
 800a420:	711a      	strb	r2, [r3, #4]
  }

  /* Return function status */
  return status;
 800a422:	7bfb      	ldrb	r3, [r7, #15]
}
 800a424:	4618      	mov	r0, r3
 800a426:	3710      	adds	r7, #16
 800a428:	46bd      	mov	sp, r7
 800a42a:	bd80      	pop	{r7, pc}

0800a42c <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800a42c:	b480      	push	{r7}
 800a42e:	b087      	sub	sp, #28
 800a430:	af00      	add	r7, sp, #0
 800a432:	60f8      	str	r0, [r7, #12]
 800a434:	60b9      	str	r1, [r7, #8]
 800a436:	607a      	str	r2, [r7, #4]
 800a438:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 800a43a:	2300      	movs	r3, #0
 800a43c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800a44a:	68bb      	ldr	r3, [r7, #8]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d105      	bne.n	800a45c <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800a450:	697a      	ldr	r2, [r7, #20]
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	4413      	add	r3, r2
 800a456:	3308      	adds	r3, #8
 800a458:	617b      	str	r3, [r7, #20]
 800a45a:	e004      	b.n	800a466 <HAL_DAC_SetValue+0x3a>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800a45c:	697a      	ldr	r2, [r7, #20]
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	4413      	add	r3, r2
 800a462:	3314      	adds	r3, #20
 800a464:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800a466:	697b      	ldr	r3, [r7, #20]
 800a468:	461a      	mov	r2, r3
 800a46a:	683b      	ldr	r3, [r7, #0]
 800a46c:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800a46e:	2300      	movs	r3, #0
}
 800a470:	4618      	mov	r0, r3
 800a472:	371c      	adds	r7, #28
 800a474:	46bd      	mov	sp, r7
 800a476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47a:	4770      	bx	lr

0800a47c <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800a47c:	b480      	push	{r7}
 800a47e:	b083      	sub	sp, #12
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800a484:	bf00      	nop
 800a486:	370c      	adds	r7, #12
 800a488:	46bd      	mov	sp, r7
 800a48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48e:	4770      	bx	lr

0800a490 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800a490:	b480      	push	{r7}
 800a492:	b083      	sub	sp, #12
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800a498:	bf00      	nop
 800a49a:	370c      	adds	r7, #12
 800a49c:	46bd      	mov	sp, r7
 800a49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a2:	4770      	bx	lr

0800a4a4 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800a4a4:	b480      	push	{r7}
 800a4a6:	b083      	sub	sp, #12
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800a4ac:	bf00      	nop
 800a4ae:	370c      	adds	r7, #12
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b6:	4770      	bx	lr

0800a4b8 <HAL_DAC_GetValue>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval The selected DAC channel data output value.
  */
uint32_t HAL_DAC_GetValue(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800a4b8:	b480      	push	{r7}
 800a4ba:	b083      	sub	sp, #12
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
 800a4c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Returns the DAC channel data output register value */
  if (Channel == DAC_CHANNEL_1)
 800a4c2:	683b      	ldr	r3, [r7, #0]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d103      	bne.n	800a4d0 <HAL_DAC_GetValue+0x18>
  {
    return hdac->Instance->DOR1;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4ce:	e002      	b.n	800a4d6 <HAL_DAC_GetValue+0x1e>
  }
  else
  {
    return hdac->Instance->DOR2;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  }
}
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	370c      	adds	r7, #12
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e0:	4770      	bx	lr
	...

0800a4e4 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b08a      	sub	sp, #40	; 0x28
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	60f8      	str	r0, [r7, #12]
 800a4ec:	60b9      	str	r1, [r7, #8]
 800a4ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	61fb      	str	r3, [r7, #28]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	795b      	ldrb	r3, [r3, #5]
 800a4f8:	2b01      	cmp	r3, #1
 800a4fa:	d101      	bne.n	800a500 <HAL_DAC_ConfigChannel+0x1c>
 800a4fc:	2302      	movs	r3, #2
 800a4fe:	e194      	b.n	800a82a <HAL_DAC_ConfigChannel+0x346>
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	2201      	movs	r2, #1
 800a504:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	2202      	movs	r2, #2
 800a50a:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800a50c:	68bb      	ldr	r3, [r7, #8]
 800a50e:	689b      	ldr	r3, [r3, #8]
 800a510:	2b04      	cmp	r3, #4
 800a512:	d174      	bne.n	800a5fe <HAL_DAC_ConfigChannel+0x11a>
    /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d137      	bne.n	800a58a <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 800a51a:	f7fe f97d 	bl	8008818 <HAL_GetTick>
 800a51e:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800a520:	e011      	b.n	800a546 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800a522:	f7fe f979 	bl	8008818 <HAL_GetTick>
 800a526:	4602      	mov	r2, r0
 800a528:	69fb      	ldr	r3, [r7, #28]
 800a52a:	1ad3      	subs	r3, r2, r3
 800a52c:	2b01      	cmp	r3, #1
 800a52e:	d90a      	bls.n	800a546 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	691b      	ldr	r3, [r3, #16]
 800a534:	f043 0208 	orr.w	r2, r3, #8
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	2203      	movs	r2, #3
 800a540:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800a542:	2303      	movs	r3, #3
 800a544:	e171      	b.n	800a82a <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a54c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a550:	2b00      	cmp	r3, #0
 800a552:	d1e6      	bne.n	800a522 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 800a554:	2001      	movs	r0, #1
 800a556:	f7fe f96b 	bl	8008830 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	68ba      	ldr	r2, [r7, #8]
 800a560:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a562:	641a      	str	r2, [r3, #64]	; 0x40
 800a564:	e01e      	b.n	800a5a4 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800a566:	f7fe f957 	bl	8008818 <HAL_GetTick>
 800a56a:	4602      	mov	r2, r0
 800a56c:	69fb      	ldr	r3, [r7, #28]
 800a56e:	1ad3      	subs	r3, r2, r3
 800a570:	2b01      	cmp	r3, #1
 800a572:	d90a      	bls.n	800a58a <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	691b      	ldr	r3, [r3, #16]
 800a578:	f043 0208 	orr.w	r2, r3, #8
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	2203      	movs	r2, #3
 800a584:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800a586:	2303      	movs	r3, #3
 800a588:	e14f      	b.n	800a82a <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a590:	2b00      	cmp	r3, #0
 800a592:	dbe8      	blt.n	800a566 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 800a594:	2001      	movs	r0, #1
 800a596:	f7fe f94b 	bl	8008830 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	68ba      	ldr	r2, [r7, #8]
 800a5a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a5a2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	f003 0310 	and.w	r3, r3, #16
 800a5b0:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800a5b4:	fa01 f303 	lsl.w	r3, r1, r3
 800a5b8:	43db      	mvns	r3, r3
 800a5ba:	ea02 0103 	and.w	r1, r2, r3
 800a5be:	68bb      	ldr	r3, [r7, #8]
 800a5c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	f003 0310 	and.w	r3, r3, #16
 800a5c8:	409a      	lsls	r2, r3
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	430a      	orrs	r2, r1
 800a5d0:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	f003 0310 	and.w	r3, r3, #16
 800a5de:	21ff      	movs	r1, #255	; 0xff
 800a5e0:	fa01 f303 	lsl.w	r3, r1, r3
 800a5e4:	43db      	mvns	r3, r3
 800a5e6:	ea02 0103 	and.w	r1, r2, r3
 800a5ea:	68bb      	ldr	r3, [r7, #8]
 800a5ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	f003 0310 	and.w	r3, r3, #16
 800a5f4:	409a      	lsls	r2, r3
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	430a      	orrs	r2, r1
 800a5fc:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800a5fe:	68bb      	ldr	r3, [r7, #8]
 800a600:	69db      	ldr	r3, [r3, #28]
 800a602:	2b01      	cmp	r3, #1
 800a604:	d11d      	bne.n	800a642 <HAL_DAC_ConfigChannel+0x15e>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a60c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	f003 0310 	and.w	r3, r3, #16
 800a614:	221f      	movs	r2, #31
 800a616:	fa02 f303 	lsl.w	r3, r2, r3
 800a61a:	43db      	mvns	r3, r3
 800a61c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a61e:	4013      	ands	r3, r2
 800a620:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800a622:	68bb      	ldr	r3, [r7, #8]
 800a624:	6a1b      	ldr	r3, [r3, #32]
 800a626:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	f003 0310 	and.w	r3, r3, #16
 800a62e:	69ba      	ldr	r2, [r7, #24]
 800a630:	fa02 f303 	lsl.w	r3, r2, r3
 800a634:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a636:	4313      	orrs	r3, r2
 800a638:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a640:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a648:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	f003 0310 	and.w	r3, r3, #16
 800a650:	2207      	movs	r2, #7
 800a652:	fa02 f303 	lsl.w	r3, r2, r3
 800a656:	43db      	mvns	r3, r3
 800a658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a65a:	4013      	ands	r3, r2
 800a65c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_EXTERNAL) == DAC_CHIPCONNECT_EXTERNAL)
 800a65e:	68bb      	ldr	r3, [r7, #8]
 800a660:	699b      	ldr	r3, [r3, #24]
 800a662:	f003 0301 	and.w	r3, r3, #1
 800a666:	2b00      	cmp	r3, #0
 800a668:	d002      	beq.n	800a670 <HAL_DAC_ConfigChannel+0x18c>
  {
    connectOnChip = 0x00000000UL;
 800a66a:	2300      	movs	r3, #0
 800a66c:	623b      	str	r3, [r7, #32]
 800a66e:	e011      	b.n	800a694 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_INTERNAL) == DAC_CHIPCONNECT_INTERNAL)
 800a670:	68bb      	ldr	r3, [r7, #8]
 800a672:	699b      	ldr	r3, [r3, #24]
 800a674:	f003 0302 	and.w	r3, r3, #2
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d002      	beq.n	800a682 <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800a67c:	2301      	movs	r3, #1
 800a67e:	623b      	str	r3, [r7, #32]
 800a680:	e008      	b.n	800a694 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_BOTH) == DAC_CHIPCONNECT_BOTH */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800a682:	68bb      	ldr	r3, [r7, #8]
 800a684:	695b      	ldr	r3, [r3, #20]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d102      	bne.n	800a690 <HAL_DAC_ConfigChannel+0x1ac>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800a68a:	2301      	movs	r3, #1
 800a68c:	623b      	str	r3, [r7, #32]
 800a68e:	e001      	b.n	800a694 <HAL_DAC_ConfigChannel+0x1b0>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800a690:	2300      	movs	r3, #0
 800a692:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800a694:	68bb      	ldr	r3, [r7, #8]
 800a696:	689a      	ldr	r2, [r3, #8]
 800a698:	68bb      	ldr	r3, [r7, #8]
 800a69a:	695b      	ldr	r3, [r3, #20]
 800a69c:	4313      	orrs	r3, r2
 800a69e:	6a3a      	ldr	r2, [r7, #32]
 800a6a0:	4313      	orrs	r3, r2
 800a6a2:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	f003 0310 	and.w	r3, r3, #16
 800a6aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a6ae:	fa02 f303 	lsl.w	r3, r2, r3
 800a6b2:	43db      	mvns	r3, r3
 800a6b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6b6:	4013      	ands	r3, r2
 800a6b8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800a6ba:	68bb      	ldr	r3, [r7, #8]
 800a6bc:	791b      	ldrb	r3, [r3, #4]
 800a6be:	2b01      	cmp	r3, #1
 800a6c0:	d102      	bne.n	800a6c8 <HAL_DAC_ConfigChannel+0x1e4>
 800a6c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a6c6:	e000      	b.n	800a6ca <HAL_DAC_ConfigChannel+0x1e6>
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	69ba      	ldr	r2, [r7, #24]
 800a6cc:	4313      	orrs	r3, r2
 800a6ce:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	f003 0310 	and.w	r3, r3, #16
 800a6d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a6da:	fa02 f303 	lsl.w	r3, r2, r3
 800a6de:	43db      	mvns	r3, r3
 800a6e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6e2:	4013      	ands	r3, r2
 800a6e4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800a6e6:	68bb      	ldr	r3, [r7, #8]
 800a6e8:	795b      	ldrb	r3, [r3, #5]
 800a6ea:	2b01      	cmp	r3, #1
 800a6ec:	d102      	bne.n	800a6f4 <HAL_DAC_ConfigChannel+0x210>
 800a6ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a6f2:	e000      	b.n	800a6f6 <HAL_DAC_ConfigChannel+0x212>
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	69ba      	ldr	r2, [r7, #24]
 800a6f8:	4313      	orrs	r3, r2
 800a6fa:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 800a6fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6fe:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800a702:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 800a704:	68bb      	ldr	r3, [r7, #8]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	2b02      	cmp	r3, #2
 800a70a:	d114      	bne.n	800a736 <HAL_DAC_ConfigChannel+0x252>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 800a70c:	f001 fae0 	bl	800bcd0 <HAL_RCC_GetHCLKFreq>
 800a710:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 800a712:	697b      	ldr	r3, [r7, #20]
 800a714:	4a47      	ldr	r2, [pc, #284]	; (800a834 <HAL_DAC_ConfigChannel+0x350>)
 800a716:	4293      	cmp	r3, r2
 800a718:	d904      	bls.n	800a724 <HAL_DAC_ConfigChannel+0x240>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800a71a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a71c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a720:	627b      	str	r3, [r7, #36]	; 0x24
 800a722:	e00d      	b.n	800a740 <HAL_DAC_ConfigChannel+0x25c>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 800a724:	697b      	ldr	r3, [r7, #20]
 800a726:	4a44      	ldr	r2, [pc, #272]	; (800a838 <HAL_DAC_ConfigChannel+0x354>)
 800a728:	4293      	cmp	r3, r2
 800a72a:	d909      	bls.n	800a740 <HAL_DAC_ConfigChannel+0x25c>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800a72c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a72e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a732:	627b      	str	r3, [r7, #36]	; 0x24
 800a734:	e004      	b.n	800a740 <HAL_DAC_ConfigChannel+0x25c>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800a736:	68bb      	ldr	r3, [r7, #8]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a73c:	4313      	orrs	r3, r2
 800a73e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	f003 0310 	and.w	r3, r3, #16
 800a746:	69ba      	ldr	r2, [r7, #24]
 800a748:	fa02 f303 	lsl.w	r3, r2, r3
 800a74c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a74e:	4313      	orrs	r3, r2
 800a750:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a758:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	6819      	ldr	r1, [r3, #0]
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	f003 0310 	and.w	r3, r3, #16
 800a766:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a76a:	fa02 f303 	lsl.w	r3, r2, r3
 800a76e:	43da      	mvns	r2, r3
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	400a      	ands	r2, r1
 800a776:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	f003 0310 	and.w	r3, r3, #16
 800a786:	f640 72fe 	movw	r2, #4094	; 0xffe
 800a78a:	fa02 f303 	lsl.w	r3, r2, r3
 800a78e:	43db      	mvns	r3, r3
 800a790:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a792:	4013      	ands	r3, r2
 800a794:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800a796:	68bb      	ldr	r3, [r7, #8]
 800a798:	68db      	ldr	r3, [r3, #12]
 800a79a:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	f003 0310 	and.w	r3, r3, #16
 800a7a2:	69ba      	ldr	r2, [r7, #24]
 800a7a4:	fa02 f303 	lsl.w	r3, r2, r3
 800a7a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7aa:	4313      	orrs	r3, r2
 800a7ac:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7b4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	6819      	ldr	r1, [r3, #0]
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	f003 0310 	and.w	r3, r3, #16
 800a7c2:	22c0      	movs	r2, #192	; 0xc0
 800a7c4:	fa02 f303 	lsl.w	r3, r2, r3
 800a7c8:	43da      	mvns	r2, r3
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	400a      	ands	r2, r1
 800a7d0:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800a7d2:	68bb      	ldr	r3, [r7, #8]
 800a7d4:	68db      	ldr	r3, [r3, #12]
 800a7d6:	089b      	lsrs	r3, r3, #2
 800a7d8:	f003 030f 	and.w	r3, r3, #15
 800a7dc:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800a7de:	68bb      	ldr	r3, [r7, #8]
 800a7e0:	691b      	ldr	r3, [r3, #16]
 800a7e2:	089b      	lsrs	r3, r3, #2
 800a7e4:	021b      	lsls	r3, r3, #8
 800a7e6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a7ea:	69ba      	ldr	r2, [r7, #24]
 800a7ec:	4313      	orrs	r3, r2
 800a7ee:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	f003 0310 	and.w	r3, r3, #16
 800a7fc:	f640 710f 	movw	r1, #3855	; 0xf0f
 800a800:	fa01 f303 	lsl.w	r3, r1, r3
 800a804:	43db      	mvns	r3, r3
 800a806:	ea02 0103 	and.w	r1, r2, r3
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	f003 0310 	and.w	r3, r3, #16
 800a810:	69ba      	ldr	r2, [r7, #24]
 800a812:	409a      	lsls	r2, r3
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	430a      	orrs	r2, r1
 800a81a:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	2201      	movs	r2, #1
 800a820:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	2200      	movs	r2, #0
 800a826:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800a828:	2300      	movs	r3, #0
}
 800a82a:	4618      	mov	r0, r3
 800a82c:	3728      	adds	r7, #40	; 0x28
 800a82e:	46bd      	mov	sp, r7
 800a830:	bd80      	pop	{r7, pc}
 800a832:	bf00      	nop
 800a834:	09896800 	.word	0x09896800
 800a838:	04c4b400 	.word	0x04c4b400

0800a83c <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b084      	sub	sp, #16
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a848:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800a84a:	68f8      	ldr	r0, [r7, #12]
 800a84c:	f7ff fe16 	bl	800a47c <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	2201      	movs	r2, #1
 800a854:	711a      	strb	r2, [r3, #4]
}
 800a856:	bf00      	nop
 800a858:	3710      	adds	r7, #16
 800a85a:	46bd      	mov	sp, r7
 800a85c:	bd80      	pop	{r7, pc}

0800a85e <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800a85e:	b580      	push	{r7, lr}
 800a860:	b084      	sub	sp, #16
 800a862:	af00      	add	r7, sp, #0
 800a864:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a86a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800a86c:	68f8      	ldr	r0, [r7, #12]
 800a86e:	f7ff fe0f 	bl	800a490 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800a872:	bf00      	nop
 800a874:	3710      	adds	r7, #16
 800a876:	46bd      	mov	sp, r7
 800a878:	bd80      	pop	{r7, pc}

0800a87a <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800a87a:	b580      	push	{r7, lr}
 800a87c:	b084      	sub	sp, #16
 800a87e:	af00      	add	r7, sp, #0
 800a880:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a886:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	691b      	ldr	r3, [r3, #16]
 800a88c:	f043 0204 	orr.w	r2, r3, #4
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800a894:	68f8      	ldr	r0, [r7, #12]
 800a896:	f7ff fe05 	bl	800a4a4 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	2201      	movs	r2, #1
 800a89e:	711a      	strb	r2, [r3, #4]
}
 800a8a0:	bf00      	nop
 800a8a2:	3710      	adds	r7, #16
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	bd80      	pop	{r7, pc}

0800a8a8 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800a8a8:	b480      	push	{r7}
 800a8aa:	b083      	sub	sp, #12
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800a8b0:	bf00      	nop
 800a8b2:	370c      	adds	r7, #12
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ba:	4770      	bx	lr

0800a8bc <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800a8bc:	b480      	push	{r7}
 800a8be:	b083      	sub	sp, #12
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800a8c4:	bf00      	nop
 800a8c6:	370c      	adds	r7, #12
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ce:	4770      	bx	lr

0800a8d0 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800a8d0:	b480      	push	{r7}
 800a8d2:	b083      	sub	sp, #12
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800a8d8:	bf00      	nop
 800a8da:	370c      	adds	r7, #12
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e2:	4770      	bx	lr

0800a8e4 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b084      	sub	sp, #16
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8f0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800a8f2:	68f8      	ldr	r0, [r7, #12]
 800a8f4:	f7ff ffd8 	bl	800a8a8 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	2201      	movs	r2, #1
 800a8fc:	711a      	strb	r2, [r3, #4]
}
 800a8fe:	bf00      	nop
 800a900:	3710      	adds	r7, #16
 800a902:	46bd      	mov	sp, r7
 800a904:	bd80      	pop	{r7, pc}

0800a906 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800a906:	b580      	push	{r7, lr}
 800a908:	b084      	sub	sp, #16
 800a90a:	af00      	add	r7, sp, #0
 800a90c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a912:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800a914:	68f8      	ldr	r0, [r7, #12]
 800a916:	f7ff ffd1 	bl	800a8bc <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800a91a:	bf00      	nop
 800a91c:	3710      	adds	r7, #16
 800a91e:	46bd      	mov	sp, r7
 800a920:	bd80      	pop	{r7, pc}

0800a922 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800a922:	b580      	push	{r7, lr}
 800a924:	b084      	sub	sp, #16
 800a926:	af00      	add	r7, sp, #0
 800a928:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a92e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	691b      	ldr	r3, [r3, #16]
 800a934:	f043 0204 	orr.w	r2, r3, #4
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800a93c:	68f8      	ldr	r0, [r7, #12]
 800a93e:	f7ff ffc7 	bl	800a8d0 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	2201      	movs	r2, #1
 800a946:	711a      	strb	r2, [r3, #4]
}
 800a948:	bf00      	nop
 800a94a:	3710      	adds	r7, #16
 800a94c:	46bd      	mov	sp, r7
 800a94e:	bd80      	pop	{r7, pc}

0800a950 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b084      	sub	sp, #16
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d101      	bne.n	800a962 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800a95e:	2301      	movs	r3, #1
 800a960:	e08d      	b.n	800aa7e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	461a      	mov	r2, r3
 800a968:	4b47      	ldr	r3, [pc, #284]	; (800aa88 <HAL_DMA_Init+0x138>)
 800a96a:	429a      	cmp	r2, r3
 800a96c:	d80f      	bhi.n	800a98e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	461a      	mov	r2, r3
 800a974:	4b45      	ldr	r3, [pc, #276]	; (800aa8c <HAL_DMA_Init+0x13c>)
 800a976:	4413      	add	r3, r2
 800a978:	4a45      	ldr	r2, [pc, #276]	; (800aa90 <HAL_DMA_Init+0x140>)
 800a97a:	fba2 2303 	umull	r2, r3, r2, r3
 800a97e:	091b      	lsrs	r3, r3, #4
 800a980:	009a      	lsls	r2, r3, #2
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	4a42      	ldr	r2, [pc, #264]	; (800aa94 <HAL_DMA_Init+0x144>)
 800a98a:	641a      	str	r2, [r3, #64]	; 0x40
 800a98c:	e00e      	b.n	800a9ac <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	461a      	mov	r2, r3
 800a994:	4b40      	ldr	r3, [pc, #256]	; (800aa98 <HAL_DMA_Init+0x148>)
 800a996:	4413      	add	r3, r2
 800a998:	4a3d      	ldr	r2, [pc, #244]	; (800aa90 <HAL_DMA_Init+0x140>)
 800a99a:	fba2 2303 	umull	r2, r3, r2, r3
 800a99e:	091b      	lsrs	r3, r3, #4
 800a9a0:	009a      	lsls	r2, r3, #2
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	4a3c      	ldr	r2, [pc, #240]	; (800aa9c <HAL_DMA_Init+0x14c>)
 800a9aa:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	2202      	movs	r2, #2
 800a9b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800a9c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a9c6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800a9d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	691b      	ldr	r3, [r3, #16]
 800a9d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a9dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	699b      	ldr	r3, [r3, #24]
 800a9e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a9e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	6a1b      	ldr	r3, [r3, #32]
 800a9ee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800a9f0:	68fa      	ldr	r2, [r7, #12]
 800a9f2:	4313      	orrs	r3, r2
 800a9f4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	68fa      	ldr	r2, [r7, #12]
 800a9fc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800a9fe:	6878      	ldr	r0, [r7, #4]
 800aa00:	f000 fa10 	bl	800ae24 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	689b      	ldr	r3, [r3, #8]
 800aa08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aa0c:	d102      	bne.n	800aa14 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	2200      	movs	r2, #0
 800aa12:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	685a      	ldr	r2, [r3, #4]
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aa1c:	b2d2      	uxtb	r2, r2
 800aa1e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa24:	687a      	ldr	r2, [r7, #4]
 800aa26:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800aa28:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	685b      	ldr	r3, [r3, #4]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d010      	beq.n	800aa54 <HAL_DMA_Init+0x104>
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	685b      	ldr	r3, [r3, #4]
 800aa36:	2b04      	cmp	r3, #4
 800aa38:	d80c      	bhi.n	800aa54 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800aa3a:	6878      	ldr	r0, [r7, #4]
 800aa3c:	f000 fa30 	bl	800aea0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa44:	2200      	movs	r2, #0
 800aa46:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa4c:	687a      	ldr	r2, [r7, #4]
 800aa4e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800aa50:	605a      	str	r2, [r3, #4]
 800aa52:	e008      	b.n	800aa66 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2200      	movs	r2, #0
 800aa58:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	2200      	movs	r2, #0
 800aa64:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	2200      	movs	r2, #0
 800aa6a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2201      	movs	r2, #1
 800aa70:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	2200      	movs	r2, #0
 800aa78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800aa7c:	2300      	movs	r3, #0
}
 800aa7e:	4618      	mov	r0, r3
 800aa80:	3710      	adds	r7, #16
 800aa82:	46bd      	mov	sp, r7
 800aa84:	bd80      	pop	{r7, pc}
 800aa86:	bf00      	nop
 800aa88:	40020407 	.word	0x40020407
 800aa8c:	bffdfff8 	.word	0xbffdfff8
 800aa90:	cccccccd 	.word	0xcccccccd
 800aa94:	40020000 	.word	0x40020000
 800aa98:	bffdfbf8 	.word	0xbffdfbf8
 800aa9c:	40020400 	.word	0x40020400

0800aaa0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b086      	sub	sp, #24
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	60f8      	str	r0, [r7, #12]
 800aaa8:	60b9      	str	r1, [r7, #8]
 800aaaa:	607a      	str	r2, [r7, #4]
 800aaac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800aaae:	2300      	movs	r3, #0
 800aab0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800aab8:	2b01      	cmp	r3, #1
 800aaba:	d101      	bne.n	800aac0 <HAL_DMA_Start_IT+0x20>
 800aabc:	2302      	movs	r3, #2
 800aabe:	e066      	b.n	800ab8e <HAL_DMA_Start_IT+0xee>
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	2201      	movs	r2, #1
 800aac4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800aace:	b2db      	uxtb	r3, r3
 800aad0:	2b01      	cmp	r3, #1
 800aad2:	d155      	bne.n	800ab80 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	2202      	movs	r2, #2
 800aad8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	2200      	movs	r2, #0
 800aae0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	681a      	ldr	r2, [r3, #0]
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	f022 0201 	bic.w	r2, r2, #1
 800aaf0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800aaf2:	683b      	ldr	r3, [r7, #0]
 800aaf4:	687a      	ldr	r2, [r7, #4]
 800aaf6:	68b9      	ldr	r1, [r7, #8]
 800aaf8:	68f8      	ldr	r0, [r7, #12]
 800aafa:	f000 f954 	bl	800ada6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d008      	beq.n	800ab18 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	681a      	ldr	r2, [r3, #0]
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	f042 020e 	orr.w	r2, r2, #14
 800ab14:	601a      	str	r2, [r3, #0]
 800ab16:	e00f      	b.n	800ab38 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	681a      	ldr	r2, [r3, #0]
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	f022 0204 	bic.w	r2, r2, #4
 800ab26:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	681a      	ldr	r2, [r3, #0]
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	f042 020a 	orr.w	r2, r2, #10
 800ab36:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d007      	beq.n	800ab56 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab4a:	681a      	ldr	r2, [r3, #0]
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ab54:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d007      	beq.n	800ab6e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab62:	681a      	ldr	r2, [r3, #0]
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ab6c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	681a      	ldr	r2, [r3, #0]
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	f042 0201 	orr.w	r2, r2, #1
 800ab7c:	601a      	str	r2, [r3, #0]
 800ab7e:	e005      	b.n	800ab8c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	2200      	movs	r2, #0
 800ab84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800ab88:	2302      	movs	r3, #2
 800ab8a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800ab8c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab8e:	4618      	mov	r0, r3
 800ab90:	3718      	adds	r7, #24
 800ab92:	46bd      	mov	sp, r7
 800ab94:	bd80      	pop	{r7, pc}

0800ab96 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800ab96:	b480      	push	{r7}
 800ab98:	b085      	sub	sp, #20
 800ab9a:	af00      	add	r7, sp, #0
 800ab9c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ab9e:	2300      	movs	r3, #0
 800aba0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800aba8:	b2db      	uxtb	r3, r3
 800abaa:	2b02      	cmp	r3, #2
 800abac:	d005      	beq.n	800abba <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	2204      	movs	r2, #4
 800abb2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800abb4:	2301      	movs	r3, #1
 800abb6:	73fb      	strb	r3, [r7, #15]
 800abb8:	e037      	b.n	800ac2a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	681a      	ldr	r2, [r3, #0]
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	f022 020e 	bic.w	r2, r2, #14
 800abc8:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800abce:	681a      	ldr	r2, [r3, #0]
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800abd4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800abd8:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	681a      	ldr	r2, [r3, #0]
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	f022 0201 	bic.w	r2, r2, #1
 800abe8:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abee:	f003 021f 	and.w	r2, r3, #31
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abf6:	2101      	movs	r1, #1
 800abf8:	fa01 f202 	lsl.w	r2, r1, r2
 800abfc:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac02:	687a      	ldr	r2, [r7, #4]
 800ac04:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800ac06:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d00c      	beq.n	800ac2a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac14:	681a      	ldr	r2, [r3, #0]
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac1a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ac1e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac24:	687a      	ldr	r2, [r7, #4]
 800ac26:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800ac28:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	2201      	movs	r2, #1
 800ac2e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	2200      	movs	r2, #0
 800ac36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800ac3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	3714      	adds	r7, #20
 800ac40:	46bd      	mov	sp, r7
 800ac42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac46:	4770      	bx	lr

0800ac48 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b084      	sub	sp, #16
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac64:	f003 031f 	and.w	r3, r3, #31
 800ac68:	2204      	movs	r2, #4
 800ac6a:	409a      	lsls	r2, r3
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	4013      	ands	r3, r2
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d026      	beq.n	800acc2 <HAL_DMA_IRQHandler+0x7a>
 800ac74:	68bb      	ldr	r3, [r7, #8]
 800ac76:	f003 0304 	and.w	r3, r3, #4
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d021      	beq.n	800acc2 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	f003 0320 	and.w	r3, r3, #32
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d107      	bne.n	800ac9c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	681a      	ldr	r2, [r3, #0]
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	f022 0204 	bic.w	r2, r2, #4
 800ac9a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aca0:	f003 021f 	and.w	r2, r3, #31
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aca8:	2104      	movs	r1, #4
 800acaa:	fa01 f202 	lsl.w	r2, r1, r2
 800acae:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d071      	beq.n	800ad9c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acbc:	6878      	ldr	r0, [r7, #4]
 800acbe:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800acc0:	e06c      	b.n	800ad9c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acc6:	f003 031f 	and.w	r3, r3, #31
 800acca:	2202      	movs	r2, #2
 800accc:	409a      	lsls	r2, r3
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	4013      	ands	r3, r2
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d02e      	beq.n	800ad34 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800acd6:	68bb      	ldr	r3, [r7, #8]
 800acd8:	f003 0302 	and.w	r3, r3, #2
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d029      	beq.n	800ad34 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	f003 0320 	and.w	r3, r3, #32
 800acea:	2b00      	cmp	r3, #0
 800acec:	d10b      	bne.n	800ad06 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	681a      	ldr	r2, [r3, #0]
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	f022 020a 	bic.w	r2, r2, #10
 800acfc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	2201      	movs	r2, #1
 800ad02:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad0a:	f003 021f 	and.w	r2, r3, #31
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad12:	2102      	movs	r1, #2
 800ad14:	fa01 f202 	lsl.w	r2, r1, r2
 800ad18:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d038      	beq.n	800ad9c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad2e:	6878      	ldr	r0, [r7, #4]
 800ad30:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800ad32:	e033      	b.n	800ad9c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad38:	f003 031f 	and.w	r3, r3, #31
 800ad3c:	2208      	movs	r2, #8
 800ad3e:	409a      	lsls	r2, r3
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	4013      	ands	r3, r2
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d02a      	beq.n	800ad9e <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800ad48:	68bb      	ldr	r3, [r7, #8]
 800ad4a:	f003 0308 	and.w	r3, r3, #8
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d025      	beq.n	800ad9e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	681a      	ldr	r2, [r3, #0]
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	f022 020e 	bic.w	r2, r2, #14
 800ad60:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad66:	f003 021f 	and.w	r2, r3, #31
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad6e:	2101      	movs	r1, #1
 800ad70:	fa01 f202 	lsl.w	r2, r1, r2
 800ad74:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	2201      	movs	r2, #1
 800ad7a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	2201      	movs	r2, #1
 800ad80:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	2200      	movs	r2, #0
 800ad88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d004      	beq.n	800ad9e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad98:	6878      	ldr	r0, [r7, #4]
 800ad9a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800ad9c:	bf00      	nop
 800ad9e:	bf00      	nop
}
 800ada0:	3710      	adds	r7, #16
 800ada2:	46bd      	mov	sp, r7
 800ada4:	bd80      	pop	{r7, pc}

0800ada6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800ada6:	b480      	push	{r7}
 800ada8:	b085      	sub	sp, #20
 800adaa:	af00      	add	r7, sp, #0
 800adac:	60f8      	str	r0, [r7, #12]
 800adae:	60b9      	str	r1, [r7, #8]
 800adb0:	607a      	str	r2, [r7, #4]
 800adb2:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800adb8:	68fa      	ldr	r2, [r7, #12]
 800adba:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800adbc:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d004      	beq.n	800add0 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800adca:	68fa      	ldr	r2, [r7, #12]
 800adcc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800adce:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800add4:	f003 021f 	and.w	r2, r3, #31
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800addc:	2101      	movs	r1, #1
 800adde:	fa01 f202 	lsl.w	r2, r1, r2
 800ade2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	683a      	ldr	r2, [r7, #0]
 800adea:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	689b      	ldr	r3, [r3, #8]
 800adf0:	2b10      	cmp	r3, #16
 800adf2:	d108      	bne.n	800ae06 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	687a      	ldr	r2, [r7, #4]
 800adfa:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	68ba      	ldr	r2, [r7, #8]
 800ae02:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800ae04:	e007      	b.n	800ae16 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	68ba      	ldr	r2, [r7, #8]
 800ae0c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	687a      	ldr	r2, [r7, #4]
 800ae14:	60da      	str	r2, [r3, #12]
}
 800ae16:	bf00      	nop
 800ae18:	3714      	adds	r7, #20
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae20:	4770      	bx	lr
	...

0800ae24 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800ae24:	b480      	push	{r7}
 800ae26:	b087      	sub	sp, #28
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	461a      	mov	r2, r3
 800ae32:	4b16      	ldr	r3, [pc, #88]	; (800ae8c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800ae34:	429a      	cmp	r2, r3
 800ae36:	d802      	bhi.n	800ae3e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800ae38:	4b15      	ldr	r3, [pc, #84]	; (800ae90 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800ae3a:	617b      	str	r3, [r7, #20]
 800ae3c:	e001      	b.n	800ae42 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800ae3e:	4b15      	ldr	r3, [pc, #84]	; (800ae94 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800ae40:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800ae42:	697b      	ldr	r3, [r7, #20]
 800ae44:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	b2db      	uxtb	r3, r3
 800ae4c:	3b08      	subs	r3, #8
 800ae4e:	4a12      	ldr	r2, [pc, #72]	; (800ae98 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800ae50:	fba2 2303 	umull	r2, r3, r2, r3
 800ae54:	091b      	lsrs	r3, r3, #4
 800ae56:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae5c:	089b      	lsrs	r3, r3, #2
 800ae5e:	009a      	lsls	r2, r3, #2
 800ae60:	693b      	ldr	r3, [r7, #16]
 800ae62:	4413      	add	r3, r2
 800ae64:	461a      	mov	r2, r3
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	4a0b      	ldr	r2, [pc, #44]	; (800ae9c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800ae6e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	f003 031f 	and.w	r3, r3, #31
 800ae76:	2201      	movs	r2, #1
 800ae78:	409a      	lsls	r2, r3
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800ae7e:	bf00      	nop
 800ae80:	371c      	adds	r7, #28
 800ae82:	46bd      	mov	sp, r7
 800ae84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae88:	4770      	bx	lr
 800ae8a:	bf00      	nop
 800ae8c:	40020407 	.word	0x40020407
 800ae90:	40020800 	.word	0x40020800
 800ae94:	40020820 	.word	0x40020820
 800ae98:	cccccccd 	.word	0xcccccccd
 800ae9c:	40020880 	.word	0x40020880

0800aea0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800aea0:	b480      	push	{r7}
 800aea2:	b085      	sub	sp, #20
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	685b      	ldr	r3, [r3, #4]
 800aeac:	b2db      	uxtb	r3, r3
 800aeae:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800aeb0:	68fa      	ldr	r2, [r7, #12]
 800aeb2:	4b0b      	ldr	r3, [pc, #44]	; (800aee0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800aeb4:	4413      	add	r3, r2
 800aeb6:	009b      	lsls	r3, r3, #2
 800aeb8:	461a      	mov	r2, r3
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	4a08      	ldr	r2, [pc, #32]	; (800aee4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800aec2:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	3b01      	subs	r3, #1
 800aec8:	f003 031f 	and.w	r3, r3, #31
 800aecc:	2201      	movs	r2, #1
 800aece:	409a      	lsls	r2, r3
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800aed4:	bf00      	nop
 800aed6:	3714      	adds	r7, #20
 800aed8:	46bd      	mov	sp, r7
 800aeda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aede:	4770      	bx	lr
 800aee0:	1000823f 	.word	0x1000823f
 800aee4:	40020940 	.word	0x40020940

0800aee8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800aee8:	b480      	push	{r7}
 800aeea:	b087      	sub	sp, #28
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]
 800aef0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800aef2:	2300      	movs	r3, #0
 800aef4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800aef6:	e15a      	b.n	800b1ae <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800aef8:	683b      	ldr	r3, [r7, #0]
 800aefa:	681a      	ldr	r2, [r3, #0]
 800aefc:	2101      	movs	r1, #1
 800aefe:	697b      	ldr	r3, [r7, #20]
 800af00:	fa01 f303 	lsl.w	r3, r1, r3
 800af04:	4013      	ands	r3, r2
 800af06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	f000 814c 	beq.w	800b1a8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800af10:	683b      	ldr	r3, [r7, #0]
 800af12:	685b      	ldr	r3, [r3, #4]
 800af14:	2b01      	cmp	r3, #1
 800af16:	d00b      	beq.n	800af30 <HAL_GPIO_Init+0x48>
 800af18:	683b      	ldr	r3, [r7, #0]
 800af1a:	685b      	ldr	r3, [r3, #4]
 800af1c:	2b02      	cmp	r3, #2
 800af1e:	d007      	beq.n	800af30 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800af20:	683b      	ldr	r3, [r7, #0]
 800af22:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800af24:	2b11      	cmp	r3, #17
 800af26:	d003      	beq.n	800af30 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800af28:	683b      	ldr	r3, [r7, #0]
 800af2a:	685b      	ldr	r3, [r3, #4]
 800af2c:	2b12      	cmp	r3, #18
 800af2e:	d130      	bne.n	800af92 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	689b      	ldr	r3, [r3, #8]
 800af34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800af36:	697b      	ldr	r3, [r7, #20]
 800af38:	005b      	lsls	r3, r3, #1
 800af3a:	2203      	movs	r2, #3
 800af3c:	fa02 f303 	lsl.w	r3, r2, r3
 800af40:	43db      	mvns	r3, r3
 800af42:	693a      	ldr	r2, [r7, #16]
 800af44:	4013      	ands	r3, r2
 800af46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800af48:	683b      	ldr	r3, [r7, #0]
 800af4a:	68da      	ldr	r2, [r3, #12]
 800af4c:	697b      	ldr	r3, [r7, #20]
 800af4e:	005b      	lsls	r3, r3, #1
 800af50:	fa02 f303 	lsl.w	r3, r2, r3
 800af54:	693a      	ldr	r2, [r7, #16]
 800af56:	4313      	orrs	r3, r2
 800af58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	693a      	ldr	r2, [r7, #16]
 800af5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	685b      	ldr	r3, [r3, #4]
 800af64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800af66:	2201      	movs	r2, #1
 800af68:	697b      	ldr	r3, [r7, #20]
 800af6a:	fa02 f303 	lsl.w	r3, r2, r3
 800af6e:	43db      	mvns	r3, r3
 800af70:	693a      	ldr	r2, [r7, #16]
 800af72:	4013      	ands	r3, r2
 800af74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800af76:	683b      	ldr	r3, [r7, #0]
 800af78:	685b      	ldr	r3, [r3, #4]
 800af7a:	091b      	lsrs	r3, r3, #4
 800af7c:	f003 0201 	and.w	r2, r3, #1
 800af80:	697b      	ldr	r3, [r7, #20]
 800af82:	fa02 f303 	lsl.w	r3, r2, r3
 800af86:	693a      	ldr	r2, [r7, #16]
 800af88:	4313      	orrs	r3, r2
 800af8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	693a      	ldr	r2, [r7, #16]
 800af90:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	68db      	ldr	r3, [r3, #12]
 800af96:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800af98:	697b      	ldr	r3, [r7, #20]
 800af9a:	005b      	lsls	r3, r3, #1
 800af9c:	2203      	movs	r2, #3
 800af9e:	fa02 f303 	lsl.w	r3, r2, r3
 800afa2:	43db      	mvns	r3, r3
 800afa4:	693a      	ldr	r2, [r7, #16]
 800afa6:	4013      	ands	r3, r2
 800afa8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800afaa:	683b      	ldr	r3, [r7, #0]
 800afac:	689a      	ldr	r2, [r3, #8]
 800afae:	697b      	ldr	r3, [r7, #20]
 800afb0:	005b      	lsls	r3, r3, #1
 800afb2:	fa02 f303 	lsl.w	r3, r2, r3
 800afb6:	693a      	ldr	r2, [r7, #16]
 800afb8:	4313      	orrs	r3, r2
 800afba:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	693a      	ldr	r2, [r7, #16]
 800afc0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800afc2:	683b      	ldr	r3, [r7, #0]
 800afc4:	685b      	ldr	r3, [r3, #4]
 800afc6:	2b02      	cmp	r3, #2
 800afc8:	d003      	beq.n	800afd2 <HAL_GPIO_Init+0xea>
 800afca:	683b      	ldr	r3, [r7, #0]
 800afcc:	685b      	ldr	r3, [r3, #4]
 800afce:	2b12      	cmp	r3, #18
 800afd0:	d123      	bne.n	800b01a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800afd2:	697b      	ldr	r3, [r7, #20]
 800afd4:	08da      	lsrs	r2, r3, #3
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	3208      	adds	r2, #8
 800afda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afde:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800afe0:	697b      	ldr	r3, [r7, #20]
 800afe2:	f003 0307 	and.w	r3, r3, #7
 800afe6:	009b      	lsls	r3, r3, #2
 800afe8:	220f      	movs	r2, #15
 800afea:	fa02 f303 	lsl.w	r3, r2, r3
 800afee:	43db      	mvns	r3, r3
 800aff0:	693a      	ldr	r2, [r7, #16]
 800aff2:	4013      	ands	r3, r2
 800aff4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800aff6:	683b      	ldr	r3, [r7, #0]
 800aff8:	691a      	ldr	r2, [r3, #16]
 800affa:	697b      	ldr	r3, [r7, #20]
 800affc:	f003 0307 	and.w	r3, r3, #7
 800b000:	009b      	lsls	r3, r3, #2
 800b002:	fa02 f303 	lsl.w	r3, r2, r3
 800b006:	693a      	ldr	r2, [r7, #16]
 800b008:	4313      	orrs	r3, r2
 800b00a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800b00c:	697b      	ldr	r3, [r7, #20]
 800b00e:	08da      	lsrs	r2, r3, #3
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	3208      	adds	r2, #8
 800b014:	6939      	ldr	r1, [r7, #16]
 800b016:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800b020:	697b      	ldr	r3, [r7, #20]
 800b022:	005b      	lsls	r3, r3, #1
 800b024:	2203      	movs	r2, #3
 800b026:	fa02 f303 	lsl.w	r3, r2, r3
 800b02a:	43db      	mvns	r3, r3
 800b02c:	693a      	ldr	r2, [r7, #16]
 800b02e:	4013      	ands	r3, r2
 800b030:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b032:	683b      	ldr	r3, [r7, #0]
 800b034:	685b      	ldr	r3, [r3, #4]
 800b036:	f003 0203 	and.w	r2, r3, #3
 800b03a:	697b      	ldr	r3, [r7, #20]
 800b03c:	005b      	lsls	r3, r3, #1
 800b03e:	fa02 f303 	lsl.w	r3, r2, r3
 800b042:	693a      	ldr	r2, [r7, #16]
 800b044:	4313      	orrs	r3, r2
 800b046:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	693a      	ldr	r2, [r7, #16]
 800b04c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800b04e:	683b      	ldr	r3, [r7, #0]
 800b050:	685b      	ldr	r3, [r3, #4]
 800b052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b056:	2b00      	cmp	r3, #0
 800b058:	f000 80a6 	beq.w	800b1a8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b05c:	4b5b      	ldr	r3, [pc, #364]	; (800b1cc <HAL_GPIO_Init+0x2e4>)
 800b05e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b060:	4a5a      	ldr	r2, [pc, #360]	; (800b1cc <HAL_GPIO_Init+0x2e4>)
 800b062:	f043 0301 	orr.w	r3, r3, #1
 800b066:	6613      	str	r3, [r2, #96]	; 0x60
 800b068:	4b58      	ldr	r3, [pc, #352]	; (800b1cc <HAL_GPIO_Init+0x2e4>)
 800b06a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b06c:	f003 0301 	and.w	r3, r3, #1
 800b070:	60bb      	str	r3, [r7, #8]
 800b072:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b074:	4a56      	ldr	r2, [pc, #344]	; (800b1d0 <HAL_GPIO_Init+0x2e8>)
 800b076:	697b      	ldr	r3, [r7, #20]
 800b078:	089b      	lsrs	r3, r3, #2
 800b07a:	3302      	adds	r3, #2
 800b07c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b080:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800b082:	697b      	ldr	r3, [r7, #20]
 800b084:	f003 0303 	and.w	r3, r3, #3
 800b088:	009b      	lsls	r3, r3, #2
 800b08a:	220f      	movs	r2, #15
 800b08c:	fa02 f303 	lsl.w	r3, r2, r3
 800b090:	43db      	mvns	r3, r3
 800b092:	693a      	ldr	r2, [r7, #16]
 800b094:	4013      	ands	r3, r2
 800b096:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800b09e:	d01f      	beq.n	800b0e0 <HAL_GPIO_Init+0x1f8>
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	4a4c      	ldr	r2, [pc, #304]	; (800b1d4 <HAL_GPIO_Init+0x2ec>)
 800b0a4:	4293      	cmp	r3, r2
 800b0a6:	d019      	beq.n	800b0dc <HAL_GPIO_Init+0x1f4>
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	4a4b      	ldr	r2, [pc, #300]	; (800b1d8 <HAL_GPIO_Init+0x2f0>)
 800b0ac:	4293      	cmp	r3, r2
 800b0ae:	d013      	beq.n	800b0d8 <HAL_GPIO_Init+0x1f0>
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	4a4a      	ldr	r2, [pc, #296]	; (800b1dc <HAL_GPIO_Init+0x2f4>)
 800b0b4:	4293      	cmp	r3, r2
 800b0b6:	d00d      	beq.n	800b0d4 <HAL_GPIO_Init+0x1ec>
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	4a49      	ldr	r2, [pc, #292]	; (800b1e0 <HAL_GPIO_Init+0x2f8>)
 800b0bc:	4293      	cmp	r3, r2
 800b0be:	d007      	beq.n	800b0d0 <HAL_GPIO_Init+0x1e8>
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	4a48      	ldr	r2, [pc, #288]	; (800b1e4 <HAL_GPIO_Init+0x2fc>)
 800b0c4:	4293      	cmp	r3, r2
 800b0c6:	d101      	bne.n	800b0cc <HAL_GPIO_Init+0x1e4>
 800b0c8:	2305      	movs	r3, #5
 800b0ca:	e00a      	b.n	800b0e2 <HAL_GPIO_Init+0x1fa>
 800b0cc:	2306      	movs	r3, #6
 800b0ce:	e008      	b.n	800b0e2 <HAL_GPIO_Init+0x1fa>
 800b0d0:	2304      	movs	r3, #4
 800b0d2:	e006      	b.n	800b0e2 <HAL_GPIO_Init+0x1fa>
 800b0d4:	2303      	movs	r3, #3
 800b0d6:	e004      	b.n	800b0e2 <HAL_GPIO_Init+0x1fa>
 800b0d8:	2302      	movs	r3, #2
 800b0da:	e002      	b.n	800b0e2 <HAL_GPIO_Init+0x1fa>
 800b0dc:	2301      	movs	r3, #1
 800b0de:	e000      	b.n	800b0e2 <HAL_GPIO_Init+0x1fa>
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	697a      	ldr	r2, [r7, #20]
 800b0e4:	f002 0203 	and.w	r2, r2, #3
 800b0e8:	0092      	lsls	r2, r2, #2
 800b0ea:	4093      	lsls	r3, r2
 800b0ec:	693a      	ldr	r2, [r7, #16]
 800b0ee:	4313      	orrs	r3, r2
 800b0f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b0f2:	4937      	ldr	r1, [pc, #220]	; (800b1d0 <HAL_GPIO_Init+0x2e8>)
 800b0f4:	697b      	ldr	r3, [r7, #20]
 800b0f6:	089b      	lsrs	r3, r3, #2
 800b0f8:	3302      	adds	r3, #2
 800b0fa:	693a      	ldr	r2, [r7, #16]
 800b0fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800b100:	4b39      	ldr	r3, [pc, #228]	; (800b1e8 <HAL_GPIO_Init+0x300>)
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	43db      	mvns	r3, r3
 800b10a:	693a      	ldr	r2, [r7, #16]
 800b10c:	4013      	ands	r3, r2
 800b10e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800b110:	683b      	ldr	r3, [r7, #0]
 800b112:	685b      	ldr	r3, [r3, #4]
 800b114:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d003      	beq.n	800b124 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800b11c:	693a      	ldr	r2, [r7, #16]
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	4313      	orrs	r3, r2
 800b122:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800b124:	4a30      	ldr	r2, [pc, #192]	; (800b1e8 <HAL_GPIO_Init+0x300>)
 800b126:	693b      	ldr	r3, [r7, #16]
 800b128:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800b12a:	4b2f      	ldr	r3, [pc, #188]	; (800b1e8 <HAL_GPIO_Init+0x300>)
 800b12c:	685b      	ldr	r3, [r3, #4]
 800b12e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	43db      	mvns	r3, r3
 800b134:	693a      	ldr	r2, [r7, #16]
 800b136:	4013      	ands	r3, r2
 800b138:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800b13a:	683b      	ldr	r3, [r7, #0]
 800b13c:	685b      	ldr	r3, [r3, #4]
 800b13e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b142:	2b00      	cmp	r3, #0
 800b144:	d003      	beq.n	800b14e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800b146:	693a      	ldr	r2, [r7, #16]
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	4313      	orrs	r3, r2
 800b14c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800b14e:	4a26      	ldr	r2, [pc, #152]	; (800b1e8 <HAL_GPIO_Init+0x300>)
 800b150:	693b      	ldr	r3, [r7, #16]
 800b152:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800b154:	4b24      	ldr	r3, [pc, #144]	; (800b1e8 <HAL_GPIO_Init+0x300>)
 800b156:	689b      	ldr	r3, [r3, #8]
 800b158:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	43db      	mvns	r3, r3
 800b15e:	693a      	ldr	r2, [r7, #16]
 800b160:	4013      	ands	r3, r2
 800b162:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800b164:	683b      	ldr	r3, [r7, #0]
 800b166:	685b      	ldr	r3, [r3, #4]
 800b168:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d003      	beq.n	800b178 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800b170:	693a      	ldr	r2, [r7, #16]
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	4313      	orrs	r3, r2
 800b176:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800b178:	4a1b      	ldr	r2, [pc, #108]	; (800b1e8 <HAL_GPIO_Init+0x300>)
 800b17a:	693b      	ldr	r3, [r7, #16]
 800b17c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800b17e:	4b1a      	ldr	r3, [pc, #104]	; (800b1e8 <HAL_GPIO_Init+0x300>)
 800b180:	68db      	ldr	r3, [r3, #12]
 800b182:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	43db      	mvns	r3, r3
 800b188:	693a      	ldr	r2, [r7, #16]
 800b18a:	4013      	ands	r3, r2
 800b18c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800b18e:	683b      	ldr	r3, [r7, #0]
 800b190:	685b      	ldr	r3, [r3, #4]
 800b192:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b196:	2b00      	cmp	r3, #0
 800b198:	d003      	beq.n	800b1a2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800b19a:	693a      	ldr	r2, [r7, #16]
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	4313      	orrs	r3, r2
 800b1a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800b1a2:	4a11      	ldr	r2, [pc, #68]	; (800b1e8 <HAL_GPIO_Init+0x300>)
 800b1a4:	693b      	ldr	r3, [r7, #16]
 800b1a6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800b1a8:	697b      	ldr	r3, [r7, #20]
 800b1aa:	3301      	adds	r3, #1
 800b1ac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800b1ae:	683b      	ldr	r3, [r7, #0]
 800b1b0:	681a      	ldr	r2, [r3, #0]
 800b1b2:	697b      	ldr	r3, [r7, #20]
 800b1b4:	fa22 f303 	lsr.w	r3, r2, r3
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	f47f ae9d 	bne.w	800aef8 <HAL_GPIO_Init+0x10>
  }
}
 800b1be:	bf00      	nop
 800b1c0:	371c      	adds	r7, #28
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c8:	4770      	bx	lr
 800b1ca:	bf00      	nop
 800b1cc:	40021000 	.word	0x40021000
 800b1d0:	40010000 	.word	0x40010000
 800b1d4:	48000400 	.word	0x48000400
 800b1d8:	48000800 	.word	0x48000800
 800b1dc:	48000c00 	.word	0x48000c00
 800b1e0:	48001000 	.word	0x48001000
 800b1e4:	48001400 	.word	0x48001400
 800b1e8:	40010400 	.word	0x40010400

0800b1ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b1ec:	b480      	push	{r7}
 800b1ee:	b083      	sub	sp, #12
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
 800b1f4:	460b      	mov	r3, r1
 800b1f6:	807b      	strh	r3, [r7, #2]
 800b1f8:	4613      	mov	r3, r2
 800b1fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800b1fc:	787b      	ldrb	r3, [r7, #1]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d003      	beq.n	800b20a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800b202:	887a      	ldrh	r2, [r7, #2]
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800b208:	e002      	b.n	800b210 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800b20a:	887a      	ldrh	r2, [r7, #2]
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	629a      	str	r2, [r3, #40]	; 0x28
}
 800b210:	bf00      	nop
 800b212:	370c      	adds	r7, #12
 800b214:	46bd      	mov	sp, r7
 800b216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21a:	4770      	bx	lr

0800b21c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800b21c:	b480      	push	{r7}
 800b21e:	b085      	sub	sp, #20
 800b220:	af00      	add	r7, sp, #0
 800b222:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	2b00      	cmp	r3, #0
 800b228:	d141      	bne.n	800b2ae <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800b22a:	4b4b      	ldr	r3, [pc, #300]	; (800b358 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b232:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b236:	d131      	bne.n	800b29c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b238:	4b47      	ldr	r3, [pc, #284]	; (800b358 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b23a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b23e:	4a46      	ldr	r2, [pc, #280]	; (800b358 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b240:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b244:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800b248:	4b43      	ldr	r3, [pc, #268]	; (800b358 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800b250:	4a41      	ldr	r2, [pc, #260]	; (800b358 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b252:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b256:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800b258:	4b40      	ldr	r3, [pc, #256]	; (800b35c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	2232      	movs	r2, #50	; 0x32
 800b25e:	fb02 f303 	mul.w	r3, r2, r3
 800b262:	4a3f      	ldr	r2, [pc, #252]	; (800b360 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800b264:	fba2 2303 	umull	r2, r3, r2, r3
 800b268:	0c9b      	lsrs	r3, r3, #18
 800b26a:	3301      	adds	r3, #1
 800b26c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b26e:	e002      	b.n	800b276 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	3b01      	subs	r3, #1
 800b274:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b276:	4b38      	ldr	r3, [pc, #224]	; (800b358 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b278:	695b      	ldr	r3, [r3, #20]
 800b27a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b27e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b282:	d102      	bne.n	800b28a <HAL_PWREx_ControlVoltageScaling+0x6e>
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d1f2      	bne.n	800b270 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800b28a:	4b33      	ldr	r3, [pc, #204]	; (800b358 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b28c:	695b      	ldr	r3, [r3, #20]
 800b28e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b292:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b296:	d158      	bne.n	800b34a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800b298:	2303      	movs	r3, #3
 800b29a:	e057      	b.n	800b34c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b29c:	4b2e      	ldr	r3, [pc, #184]	; (800b358 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b29e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b2a2:	4a2d      	ldr	r2, [pc, #180]	; (800b358 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b2a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b2a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800b2ac:	e04d      	b.n	800b34a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b2b4:	d141      	bne.n	800b33a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800b2b6:	4b28      	ldr	r3, [pc, #160]	; (800b358 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b2be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b2c2:	d131      	bne.n	800b328 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b2c4:	4b24      	ldr	r3, [pc, #144]	; (800b358 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b2c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b2ca:	4a23      	ldr	r2, [pc, #140]	; (800b358 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b2cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b2d0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800b2d4:	4b20      	ldr	r3, [pc, #128]	; (800b358 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800b2dc:	4a1e      	ldr	r2, [pc, #120]	; (800b358 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b2de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b2e2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800b2e4:	4b1d      	ldr	r3, [pc, #116]	; (800b35c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	2232      	movs	r2, #50	; 0x32
 800b2ea:	fb02 f303 	mul.w	r3, r2, r3
 800b2ee:	4a1c      	ldr	r2, [pc, #112]	; (800b360 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800b2f0:	fba2 2303 	umull	r2, r3, r2, r3
 800b2f4:	0c9b      	lsrs	r3, r3, #18
 800b2f6:	3301      	adds	r3, #1
 800b2f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b2fa:	e002      	b.n	800b302 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	3b01      	subs	r3, #1
 800b300:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b302:	4b15      	ldr	r3, [pc, #84]	; (800b358 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b304:	695b      	ldr	r3, [r3, #20]
 800b306:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b30a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b30e:	d102      	bne.n	800b316 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	2b00      	cmp	r3, #0
 800b314:	d1f2      	bne.n	800b2fc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800b316:	4b10      	ldr	r3, [pc, #64]	; (800b358 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b318:	695b      	ldr	r3, [r3, #20]
 800b31a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b31e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b322:	d112      	bne.n	800b34a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800b324:	2303      	movs	r3, #3
 800b326:	e011      	b.n	800b34c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b328:	4b0b      	ldr	r3, [pc, #44]	; (800b358 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b32a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b32e:	4a0a      	ldr	r2, [pc, #40]	; (800b358 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b330:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b334:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800b338:	e007      	b.n	800b34a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800b33a:	4b07      	ldr	r3, [pc, #28]	; (800b358 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800b342:	4a05      	ldr	r2, [pc, #20]	; (800b358 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b344:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b348:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800b34a:	2300      	movs	r3, #0
}
 800b34c:	4618      	mov	r0, r3
 800b34e:	3714      	adds	r7, #20
 800b350:	46bd      	mov	sp, r7
 800b352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b356:	4770      	bx	lr
 800b358:	40007000 	.word	0x40007000
 800b35c:	20000ca0 	.word	0x20000ca0
 800b360:	431bde83 	.word	0x431bde83

0800b364 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b364:	b580      	push	{r7, lr}
 800b366:	b088      	sub	sp, #32
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d101      	bne.n	800b376 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b372:	2301      	movs	r3, #1
 800b374:	e308      	b.n	800b988 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	f003 0301 	and.w	r3, r3, #1
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d075      	beq.n	800b46e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b382:	4ba3      	ldr	r3, [pc, #652]	; (800b610 <HAL_RCC_OscConfig+0x2ac>)
 800b384:	689b      	ldr	r3, [r3, #8]
 800b386:	f003 030c 	and.w	r3, r3, #12
 800b38a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b38c:	4ba0      	ldr	r3, [pc, #640]	; (800b610 <HAL_RCC_OscConfig+0x2ac>)
 800b38e:	68db      	ldr	r3, [r3, #12]
 800b390:	f003 0303 	and.w	r3, r3, #3
 800b394:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800b396:	69bb      	ldr	r3, [r7, #24]
 800b398:	2b0c      	cmp	r3, #12
 800b39a:	d102      	bne.n	800b3a2 <HAL_RCC_OscConfig+0x3e>
 800b39c:	697b      	ldr	r3, [r7, #20]
 800b39e:	2b03      	cmp	r3, #3
 800b3a0:	d002      	beq.n	800b3a8 <HAL_RCC_OscConfig+0x44>
 800b3a2:	69bb      	ldr	r3, [r7, #24]
 800b3a4:	2b08      	cmp	r3, #8
 800b3a6:	d10b      	bne.n	800b3c0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b3a8:	4b99      	ldr	r3, [pc, #612]	; (800b610 <HAL_RCC_OscConfig+0x2ac>)
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d05b      	beq.n	800b46c <HAL_RCC_OscConfig+0x108>
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	685b      	ldr	r3, [r3, #4]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d157      	bne.n	800b46c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800b3bc:	2301      	movs	r3, #1
 800b3be:	e2e3      	b.n	800b988 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	685b      	ldr	r3, [r3, #4]
 800b3c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b3c8:	d106      	bne.n	800b3d8 <HAL_RCC_OscConfig+0x74>
 800b3ca:	4b91      	ldr	r3, [pc, #580]	; (800b610 <HAL_RCC_OscConfig+0x2ac>)
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	4a90      	ldr	r2, [pc, #576]	; (800b610 <HAL_RCC_OscConfig+0x2ac>)
 800b3d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b3d4:	6013      	str	r3, [r2, #0]
 800b3d6:	e01d      	b.n	800b414 <HAL_RCC_OscConfig+0xb0>
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	685b      	ldr	r3, [r3, #4]
 800b3dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b3e0:	d10c      	bne.n	800b3fc <HAL_RCC_OscConfig+0x98>
 800b3e2:	4b8b      	ldr	r3, [pc, #556]	; (800b610 <HAL_RCC_OscConfig+0x2ac>)
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	4a8a      	ldr	r2, [pc, #552]	; (800b610 <HAL_RCC_OscConfig+0x2ac>)
 800b3e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b3ec:	6013      	str	r3, [r2, #0]
 800b3ee:	4b88      	ldr	r3, [pc, #544]	; (800b610 <HAL_RCC_OscConfig+0x2ac>)
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	4a87      	ldr	r2, [pc, #540]	; (800b610 <HAL_RCC_OscConfig+0x2ac>)
 800b3f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b3f8:	6013      	str	r3, [r2, #0]
 800b3fa:	e00b      	b.n	800b414 <HAL_RCC_OscConfig+0xb0>
 800b3fc:	4b84      	ldr	r3, [pc, #528]	; (800b610 <HAL_RCC_OscConfig+0x2ac>)
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	4a83      	ldr	r2, [pc, #524]	; (800b610 <HAL_RCC_OscConfig+0x2ac>)
 800b402:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b406:	6013      	str	r3, [r2, #0]
 800b408:	4b81      	ldr	r3, [pc, #516]	; (800b610 <HAL_RCC_OscConfig+0x2ac>)
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	4a80      	ldr	r2, [pc, #512]	; (800b610 <HAL_RCC_OscConfig+0x2ac>)
 800b40e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b412:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	685b      	ldr	r3, [r3, #4]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d013      	beq.n	800b444 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b41c:	f7fd f9fc 	bl	8008818 <HAL_GetTick>
 800b420:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b422:	e008      	b.n	800b436 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b424:	f7fd f9f8 	bl	8008818 <HAL_GetTick>
 800b428:	4602      	mov	r2, r0
 800b42a:	693b      	ldr	r3, [r7, #16]
 800b42c:	1ad3      	subs	r3, r2, r3
 800b42e:	2b64      	cmp	r3, #100	; 0x64
 800b430:	d901      	bls.n	800b436 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800b432:	2303      	movs	r3, #3
 800b434:	e2a8      	b.n	800b988 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b436:	4b76      	ldr	r3, [pc, #472]	; (800b610 <HAL_RCC_OscConfig+0x2ac>)
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d0f0      	beq.n	800b424 <HAL_RCC_OscConfig+0xc0>
 800b442:	e014      	b.n	800b46e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b444:	f7fd f9e8 	bl	8008818 <HAL_GetTick>
 800b448:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b44a:	e008      	b.n	800b45e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b44c:	f7fd f9e4 	bl	8008818 <HAL_GetTick>
 800b450:	4602      	mov	r2, r0
 800b452:	693b      	ldr	r3, [r7, #16]
 800b454:	1ad3      	subs	r3, r2, r3
 800b456:	2b64      	cmp	r3, #100	; 0x64
 800b458:	d901      	bls.n	800b45e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b45a:	2303      	movs	r3, #3
 800b45c:	e294      	b.n	800b988 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b45e:	4b6c      	ldr	r3, [pc, #432]	; (800b610 <HAL_RCC_OscConfig+0x2ac>)
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b466:	2b00      	cmp	r3, #0
 800b468:	d1f0      	bne.n	800b44c <HAL_RCC_OscConfig+0xe8>
 800b46a:	e000      	b.n	800b46e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b46c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	f003 0302 	and.w	r3, r3, #2
 800b476:	2b00      	cmp	r3, #0
 800b478:	d075      	beq.n	800b566 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b47a:	4b65      	ldr	r3, [pc, #404]	; (800b610 <HAL_RCC_OscConfig+0x2ac>)
 800b47c:	689b      	ldr	r3, [r3, #8]
 800b47e:	f003 030c 	and.w	r3, r3, #12
 800b482:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b484:	4b62      	ldr	r3, [pc, #392]	; (800b610 <HAL_RCC_OscConfig+0x2ac>)
 800b486:	68db      	ldr	r3, [r3, #12]
 800b488:	f003 0303 	and.w	r3, r3, #3
 800b48c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800b48e:	69bb      	ldr	r3, [r7, #24]
 800b490:	2b0c      	cmp	r3, #12
 800b492:	d102      	bne.n	800b49a <HAL_RCC_OscConfig+0x136>
 800b494:	697b      	ldr	r3, [r7, #20]
 800b496:	2b02      	cmp	r3, #2
 800b498:	d002      	beq.n	800b4a0 <HAL_RCC_OscConfig+0x13c>
 800b49a:	69bb      	ldr	r3, [r7, #24]
 800b49c:	2b04      	cmp	r3, #4
 800b49e:	d11f      	bne.n	800b4e0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b4a0:	4b5b      	ldr	r3, [pc, #364]	; (800b610 <HAL_RCC_OscConfig+0x2ac>)
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d005      	beq.n	800b4b8 <HAL_RCC_OscConfig+0x154>
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	68db      	ldr	r3, [r3, #12]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d101      	bne.n	800b4b8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800b4b4:	2301      	movs	r3, #1
 800b4b6:	e267      	b.n	800b988 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b4b8:	4b55      	ldr	r3, [pc, #340]	; (800b610 <HAL_RCC_OscConfig+0x2ac>)
 800b4ba:	685b      	ldr	r3, [r3, #4]
 800b4bc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	691b      	ldr	r3, [r3, #16]
 800b4c4:	061b      	lsls	r3, r3, #24
 800b4c6:	4952      	ldr	r1, [pc, #328]	; (800b610 <HAL_RCC_OscConfig+0x2ac>)
 800b4c8:	4313      	orrs	r3, r2
 800b4ca:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800b4cc:	4b51      	ldr	r3, [pc, #324]	; (800b614 <HAL_RCC_OscConfig+0x2b0>)
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	f7fd f955 	bl	8008780 <HAL_InitTick>
 800b4d6:	4603      	mov	r3, r0
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d043      	beq.n	800b564 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800b4dc:	2301      	movs	r3, #1
 800b4de:	e253      	b.n	800b988 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	68db      	ldr	r3, [r3, #12]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d023      	beq.n	800b530 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b4e8:	4b49      	ldr	r3, [pc, #292]	; (800b610 <HAL_RCC_OscConfig+0x2ac>)
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	4a48      	ldr	r2, [pc, #288]	; (800b610 <HAL_RCC_OscConfig+0x2ac>)
 800b4ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b4f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b4f4:	f7fd f990 	bl	8008818 <HAL_GetTick>
 800b4f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b4fa:	e008      	b.n	800b50e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b4fc:	f7fd f98c 	bl	8008818 <HAL_GetTick>
 800b500:	4602      	mov	r2, r0
 800b502:	693b      	ldr	r3, [r7, #16]
 800b504:	1ad3      	subs	r3, r2, r3
 800b506:	2b02      	cmp	r3, #2
 800b508:	d901      	bls.n	800b50e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800b50a:	2303      	movs	r3, #3
 800b50c:	e23c      	b.n	800b988 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b50e:	4b40      	ldr	r3, [pc, #256]	; (800b610 <HAL_RCC_OscConfig+0x2ac>)
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b516:	2b00      	cmp	r3, #0
 800b518:	d0f0      	beq.n	800b4fc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b51a:	4b3d      	ldr	r3, [pc, #244]	; (800b610 <HAL_RCC_OscConfig+0x2ac>)
 800b51c:	685b      	ldr	r3, [r3, #4]
 800b51e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	691b      	ldr	r3, [r3, #16]
 800b526:	061b      	lsls	r3, r3, #24
 800b528:	4939      	ldr	r1, [pc, #228]	; (800b610 <HAL_RCC_OscConfig+0x2ac>)
 800b52a:	4313      	orrs	r3, r2
 800b52c:	604b      	str	r3, [r1, #4]
 800b52e:	e01a      	b.n	800b566 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b530:	4b37      	ldr	r3, [pc, #220]	; (800b610 <HAL_RCC_OscConfig+0x2ac>)
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	4a36      	ldr	r2, [pc, #216]	; (800b610 <HAL_RCC_OscConfig+0x2ac>)
 800b536:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b53a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b53c:	f7fd f96c 	bl	8008818 <HAL_GetTick>
 800b540:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b542:	e008      	b.n	800b556 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b544:	f7fd f968 	bl	8008818 <HAL_GetTick>
 800b548:	4602      	mov	r2, r0
 800b54a:	693b      	ldr	r3, [r7, #16]
 800b54c:	1ad3      	subs	r3, r2, r3
 800b54e:	2b02      	cmp	r3, #2
 800b550:	d901      	bls.n	800b556 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800b552:	2303      	movs	r3, #3
 800b554:	e218      	b.n	800b988 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b556:	4b2e      	ldr	r3, [pc, #184]	; (800b610 <HAL_RCC_OscConfig+0x2ac>)
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d1f0      	bne.n	800b544 <HAL_RCC_OscConfig+0x1e0>
 800b562:	e000      	b.n	800b566 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b564:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	f003 0308 	and.w	r3, r3, #8
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d03c      	beq.n	800b5ec <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	695b      	ldr	r3, [r3, #20]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d01c      	beq.n	800b5b4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b57a:	4b25      	ldr	r3, [pc, #148]	; (800b610 <HAL_RCC_OscConfig+0x2ac>)
 800b57c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b580:	4a23      	ldr	r2, [pc, #140]	; (800b610 <HAL_RCC_OscConfig+0x2ac>)
 800b582:	f043 0301 	orr.w	r3, r3, #1
 800b586:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b58a:	f7fd f945 	bl	8008818 <HAL_GetTick>
 800b58e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b590:	e008      	b.n	800b5a4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b592:	f7fd f941 	bl	8008818 <HAL_GetTick>
 800b596:	4602      	mov	r2, r0
 800b598:	693b      	ldr	r3, [r7, #16]
 800b59a:	1ad3      	subs	r3, r2, r3
 800b59c:	2b02      	cmp	r3, #2
 800b59e:	d901      	bls.n	800b5a4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800b5a0:	2303      	movs	r3, #3
 800b5a2:	e1f1      	b.n	800b988 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b5a4:	4b1a      	ldr	r3, [pc, #104]	; (800b610 <HAL_RCC_OscConfig+0x2ac>)
 800b5a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b5aa:	f003 0302 	and.w	r3, r3, #2
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d0ef      	beq.n	800b592 <HAL_RCC_OscConfig+0x22e>
 800b5b2:	e01b      	b.n	800b5ec <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b5b4:	4b16      	ldr	r3, [pc, #88]	; (800b610 <HAL_RCC_OscConfig+0x2ac>)
 800b5b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b5ba:	4a15      	ldr	r2, [pc, #84]	; (800b610 <HAL_RCC_OscConfig+0x2ac>)
 800b5bc:	f023 0301 	bic.w	r3, r3, #1
 800b5c0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b5c4:	f7fd f928 	bl	8008818 <HAL_GetTick>
 800b5c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b5ca:	e008      	b.n	800b5de <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b5cc:	f7fd f924 	bl	8008818 <HAL_GetTick>
 800b5d0:	4602      	mov	r2, r0
 800b5d2:	693b      	ldr	r3, [r7, #16]
 800b5d4:	1ad3      	subs	r3, r2, r3
 800b5d6:	2b02      	cmp	r3, #2
 800b5d8:	d901      	bls.n	800b5de <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800b5da:	2303      	movs	r3, #3
 800b5dc:	e1d4      	b.n	800b988 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b5de:	4b0c      	ldr	r3, [pc, #48]	; (800b610 <HAL_RCC_OscConfig+0x2ac>)
 800b5e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b5e4:	f003 0302 	and.w	r3, r3, #2
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d1ef      	bne.n	800b5cc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	f003 0304 	and.w	r3, r3, #4
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	f000 80ab 	beq.w	800b750 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800b5fe:	4b04      	ldr	r3, [pc, #16]	; (800b610 <HAL_RCC_OscConfig+0x2ac>)
 800b600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b606:	2b00      	cmp	r3, #0
 800b608:	d106      	bne.n	800b618 <HAL_RCC_OscConfig+0x2b4>
 800b60a:	2301      	movs	r3, #1
 800b60c:	e005      	b.n	800b61a <HAL_RCC_OscConfig+0x2b6>
 800b60e:	bf00      	nop
 800b610:	40021000 	.word	0x40021000
 800b614:	20000ca4 	.word	0x20000ca4
 800b618:	2300      	movs	r3, #0
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d00d      	beq.n	800b63a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b61e:	4baf      	ldr	r3, [pc, #700]	; (800b8dc <HAL_RCC_OscConfig+0x578>)
 800b620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b622:	4aae      	ldr	r2, [pc, #696]	; (800b8dc <HAL_RCC_OscConfig+0x578>)
 800b624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b628:	6593      	str	r3, [r2, #88]	; 0x58
 800b62a:	4bac      	ldr	r3, [pc, #688]	; (800b8dc <HAL_RCC_OscConfig+0x578>)
 800b62c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b62e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b632:	60fb      	str	r3, [r7, #12]
 800b634:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800b636:	2301      	movs	r3, #1
 800b638:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b63a:	4ba9      	ldr	r3, [pc, #676]	; (800b8e0 <HAL_RCC_OscConfig+0x57c>)
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b642:	2b00      	cmp	r3, #0
 800b644:	d118      	bne.n	800b678 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b646:	4ba6      	ldr	r3, [pc, #664]	; (800b8e0 <HAL_RCC_OscConfig+0x57c>)
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	4aa5      	ldr	r2, [pc, #660]	; (800b8e0 <HAL_RCC_OscConfig+0x57c>)
 800b64c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b650:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b652:	f7fd f8e1 	bl	8008818 <HAL_GetTick>
 800b656:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b658:	e008      	b.n	800b66c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b65a:	f7fd f8dd 	bl	8008818 <HAL_GetTick>
 800b65e:	4602      	mov	r2, r0
 800b660:	693b      	ldr	r3, [r7, #16]
 800b662:	1ad3      	subs	r3, r2, r3
 800b664:	2b02      	cmp	r3, #2
 800b666:	d901      	bls.n	800b66c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800b668:	2303      	movs	r3, #3
 800b66a:	e18d      	b.n	800b988 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b66c:	4b9c      	ldr	r3, [pc, #624]	; (800b8e0 <HAL_RCC_OscConfig+0x57c>)
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b674:	2b00      	cmp	r3, #0
 800b676:	d0f0      	beq.n	800b65a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	689b      	ldr	r3, [r3, #8]
 800b67c:	2b01      	cmp	r3, #1
 800b67e:	d108      	bne.n	800b692 <HAL_RCC_OscConfig+0x32e>
 800b680:	4b96      	ldr	r3, [pc, #600]	; (800b8dc <HAL_RCC_OscConfig+0x578>)
 800b682:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b686:	4a95      	ldr	r2, [pc, #596]	; (800b8dc <HAL_RCC_OscConfig+0x578>)
 800b688:	f043 0301 	orr.w	r3, r3, #1
 800b68c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b690:	e024      	b.n	800b6dc <HAL_RCC_OscConfig+0x378>
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	689b      	ldr	r3, [r3, #8]
 800b696:	2b05      	cmp	r3, #5
 800b698:	d110      	bne.n	800b6bc <HAL_RCC_OscConfig+0x358>
 800b69a:	4b90      	ldr	r3, [pc, #576]	; (800b8dc <HAL_RCC_OscConfig+0x578>)
 800b69c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b6a0:	4a8e      	ldr	r2, [pc, #568]	; (800b8dc <HAL_RCC_OscConfig+0x578>)
 800b6a2:	f043 0304 	orr.w	r3, r3, #4
 800b6a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b6aa:	4b8c      	ldr	r3, [pc, #560]	; (800b8dc <HAL_RCC_OscConfig+0x578>)
 800b6ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b6b0:	4a8a      	ldr	r2, [pc, #552]	; (800b8dc <HAL_RCC_OscConfig+0x578>)
 800b6b2:	f043 0301 	orr.w	r3, r3, #1
 800b6b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b6ba:	e00f      	b.n	800b6dc <HAL_RCC_OscConfig+0x378>
 800b6bc:	4b87      	ldr	r3, [pc, #540]	; (800b8dc <HAL_RCC_OscConfig+0x578>)
 800b6be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b6c2:	4a86      	ldr	r2, [pc, #536]	; (800b8dc <HAL_RCC_OscConfig+0x578>)
 800b6c4:	f023 0301 	bic.w	r3, r3, #1
 800b6c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b6cc:	4b83      	ldr	r3, [pc, #524]	; (800b8dc <HAL_RCC_OscConfig+0x578>)
 800b6ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b6d2:	4a82      	ldr	r2, [pc, #520]	; (800b8dc <HAL_RCC_OscConfig+0x578>)
 800b6d4:	f023 0304 	bic.w	r3, r3, #4
 800b6d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	689b      	ldr	r3, [r3, #8]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d016      	beq.n	800b712 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b6e4:	f7fd f898 	bl	8008818 <HAL_GetTick>
 800b6e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b6ea:	e00a      	b.n	800b702 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b6ec:	f7fd f894 	bl	8008818 <HAL_GetTick>
 800b6f0:	4602      	mov	r2, r0
 800b6f2:	693b      	ldr	r3, [r7, #16]
 800b6f4:	1ad3      	subs	r3, r2, r3
 800b6f6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b6fa:	4293      	cmp	r3, r2
 800b6fc:	d901      	bls.n	800b702 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800b6fe:	2303      	movs	r3, #3
 800b700:	e142      	b.n	800b988 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b702:	4b76      	ldr	r3, [pc, #472]	; (800b8dc <HAL_RCC_OscConfig+0x578>)
 800b704:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b708:	f003 0302 	and.w	r3, r3, #2
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d0ed      	beq.n	800b6ec <HAL_RCC_OscConfig+0x388>
 800b710:	e015      	b.n	800b73e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b712:	f7fd f881 	bl	8008818 <HAL_GetTick>
 800b716:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b718:	e00a      	b.n	800b730 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b71a:	f7fd f87d 	bl	8008818 <HAL_GetTick>
 800b71e:	4602      	mov	r2, r0
 800b720:	693b      	ldr	r3, [r7, #16]
 800b722:	1ad3      	subs	r3, r2, r3
 800b724:	f241 3288 	movw	r2, #5000	; 0x1388
 800b728:	4293      	cmp	r3, r2
 800b72a:	d901      	bls.n	800b730 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800b72c:	2303      	movs	r3, #3
 800b72e:	e12b      	b.n	800b988 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b730:	4b6a      	ldr	r3, [pc, #424]	; (800b8dc <HAL_RCC_OscConfig+0x578>)
 800b732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b736:	f003 0302 	and.w	r3, r3, #2
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d1ed      	bne.n	800b71a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b73e:	7ffb      	ldrb	r3, [r7, #31]
 800b740:	2b01      	cmp	r3, #1
 800b742:	d105      	bne.n	800b750 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b744:	4b65      	ldr	r3, [pc, #404]	; (800b8dc <HAL_RCC_OscConfig+0x578>)
 800b746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b748:	4a64      	ldr	r2, [pc, #400]	; (800b8dc <HAL_RCC_OscConfig+0x578>)
 800b74a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b74e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	f003 0320 	and.w	r3, r3, #32
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d03c      	beq.n	800b7d6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	699b      	ldr	r3, [r3, #24]
 800b760:	2b00      	cmp	r3, #0
 800b762:	d01c      	beq.n	800b79e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b764:	4b5d      	ldr	r3, [pc, #372]	; (800b8dc <HAL_RCC_OscConfig+0x578>)
 800b766:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b76a:	4a5c      	ldr	r2, [pc, #368]	; (800b8dc <HAL_RCC_OscConfig+0x578>)
 800b76c:	f043 0301 	orr.w	r3, r3, #1
 800b770:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b774:	f7fd f850 	bl	8008818 <HAL_GetTick>
 800b778:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b77a:	e008      	b.n	800b78e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b77c:	f7fd f84c 	bl	8008818 <HAL_GetTick>
 800b780:	4602      	mov	r2, r0
 800b782:	693b      	ldr	r3, [r7, #16]
 800b784:	1ad3      	subs	r3, r2, r3
 800b786:	2b02      	cmp	r3, #2
 800b788:	d901      	bls.n	800b78e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800b78a:	2303      	movs	r3, #3
 800b78c:	e0fc      	b.n	800b988 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b78e:	4b53      	ldr	r3, [pc, #332]	; (800b8dc <HAL_RCC_OscConfig+0x578>)
 800b790:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b794:	f003 0302 	and.w	r3, r3, #2
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d0ef      	beq.n	800b77c <HAL_RCC_OscConfig+0x418>
 800b79c:	e01b      	b.n	800b7d6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b79e:	4b4f      	ldr	r3, [pc, #316]	; (800b8dc <HAL_RCC_OscConfig+0x578>)
 800b7a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b7a4:	4a4d      	ldr	r2, [pc, #308]	; (800b8dc <HAL_RCC_OscConfig+0x578>)
 800b7a6:	f023 0301 	bic.w	r3, r3, #1
 800b7aa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b7ae:	f7fd f833 	bl	8008818 <HAL_GetTick>
 800b7b2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b7b4:	e008      	b.n	800b7c8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b7b6:	f7fd f82f 	bl	8008818 <HAL_GetTick>
 800b7ba:	4602      	mov	r2, r0
 800b7bc:	693b      	ldr	r3, [r7, #16]
 800b7be:	1ad3      	subs	r3, r2, r3
 800b7c0:	2b02      	cmp	r3, #2
 800b7c2:	d901      	bls.n	800b7c8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800b7c4:	2303      	movs	r3, #3
 800b7c6:	e0df      	b.n	800b988 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b7c8:	4b44      	ldr	r3, [pc, #272]	; (800b8dc <HAL_RCC_OscConfig+0x578>)
 800b7ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b7ce:	f003 0302 	and.w	r3, r3, #2
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d1ef      	bne.n	800b7b6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	69db      	ldr	r3, [r3, #28]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	f000 80d3 	beq.w	800b986 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b7e0:	4b3e      	ldr	r3, [pc, #248]	; (800b8dc <HAL_RCC_OscConfig+0x578>)
 800b7e2:	689b      	ldr	r3, [r3, #8]
 800b7e4:	f003 030c 	and.w	r3, r3, #12
 800b7e8:	2b0c      	cmp	r3, #12
 800b7ea:	f000 808d 	beq.w	800b908 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	69db      	ldr	r3, [r3, #28]
 800b7f2:	2b02      	cmp	r3, #2
 800b7f4:	d15a      	bne.n	800b8ac <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b7f6:	4b39      	ldr	r3, [pc, #228]	; (800b8dc <HAL_RCC_OscConfig+0x578>)
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	4a38      	ldr	r2, [pc, #224]	; (800b8dc <HAL_RCC_OscConfig+0x578>)
 800b7fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b800:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b802:	f7fd f809 	bl	8008818 <HAL_GetTick>
 800b806:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b808:	e008      	b.n	800b81c <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b80a:	f7fd f805 	bl	8008818 <HAL_GetTick>
 800b80e:	4602      	mov	r2, r0
 800b810:	693b      	ldr	r3, [r7, #16]
 800b812:	1ad3      	subs	r3, r2, r3
 800b814:	2b02      	cmp	r3, #2
 800b816:	d901      	bls.n	800b81c <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 800b818:	2303      	movs	r3, #3
 800b81a:	e0b5      	b.n	800b988 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b81c:	4b2f      	ldr	r3, [pc, #188]	; (800b8dc <HAL_RCC_OscConfig+0x578>)
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b824:	2b00      	cmp	r3, #0
 800b826:	d1f0      	bne.n	800b80a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b828:	4b2c      	ldr	r3, [pc, #176]	; (800b8dc <HAL_RCC_OscConfig+0x578>)
 800b82a:	68da      	ldr	r2, [r3, #12]
 800b82c:	4b2d      	ldr	r3, [pc, #180]	; (800b8e4 <HAL_RCC_OscConfig+0x580>)
 800b82e:	4013      	ands	r3, r2
 800b830:	687a      	ldr	r2, [r7, #4]
 800b832:	6a11      	ldr	r1, [r2, #32]
 800b834:	687a      	ldr	r2, [r7, #4]
 800b836:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b838:	3a01      	subs	r2, #1
 800b83a:	0112      	lsls	r2, r2, #4
 800b83c:	4311      	orrs	r1, r2
 800b83e:	687a      	ldr	r2, [r7, #4]
 800b840:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800b842:	0212      	lsls	r2, r2, #8
 800b844:	4311      	orrs	r1, r2
 800b846:	687a      	ldr	r2, [r7, #4]
 800b848:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b84a:	0852      	lsrs	r2, r2, #1
 800b84c:	3a01      	subs	r2, #1
 800b84e:	0552      	lsls	r2, r2, #21
 800b850:	4311      	orrs	r1, r2
 800b852:	687a      	ldr	r2, [r7, #4]
 800b854:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800b856:	0852      	lsrs	r2, r2, #1
 800b858:	3a01      	subs	r2, #1
 800b85a:	0652      	lsls	r2, r2, #25
 800b85c:	4311      	orrs	r1, r2
 800b85e:	687a      	ldr	r2, [r7, #4]
 800b860:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800b862:	06d2      	lsls	r2, r2, #27
 800b864:	430a      	orrs	r2, r1
 800b866:	491d      	ldr	r1, [pc, #116]	; (800b8dc <HAL_RCC_OscConfig+0x578>)
 800b868:	4313      	orrs	r3, r2
 800b86a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b86c:	4b1b      	ldr	r3, [pc, #108]	; (800b8dc <HAL_RCC_OscConfig+0x578>)
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	4a1a      	ldr	r2, [pc, #104]	; (800b8dc <HAL_RCC_OscConfig+0x578>)
 800b872:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b876:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b878:	4b18      	ldr	r3, [pc, #96]	; (800b8dc <HAL_RCC_OscConfig+0x578>)
 800b87a:	68db      	ldr	r3, [r3, #12]
 800b87c:	4a17      	ldr	r2, [pc, #92]	; (800b8dc <HAL_RCC_OscConfig+0x578>)
 800b87e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b882:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b884:	f7fc ffc8 	bl	8008818 <HAL_GetTick>
 800b888:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b88a:	e008      	b.n	800b89e <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b88c:	f7fc ffc4 	bl	8008818 <HAL_GetTick>
 800b890:	4602      	mov	r2, r0
 800b892:	693b      	ldr	r3, [r7, #16]
 800b894:	1ad3      	subs	r3, r2, r3
 800b896:	2b02      	cmp	r3, #2
 800b898:	d901      	bls.n	800b89e <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800b89a:	2303      	movs	r3, #3
 800b89c:	e074      	b.n	800b988 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b89e:	4b0f      	ldr	r3, [pc, #60]	; (800b8dc <HAL_RCC_OscConfig+0x578>)
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d0f0      	beq.n	800b88c <HAL_RCC_OscConfig+0x528>
 800b8aa:	e06c      	b.n	800b986 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b8ac:	4b0b      	ldr	r3, [pc, #44]	; (800b8dc <HAL_RCC_OscConfig+0x578>)
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	4a0a      	ldr	r2, [pc, #40]	; (800b8dc <HAL_RCC_OscConfig+0x578>)
 800b8b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b8b6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800b8b8:	4b08      	ldr	r3, [pc, #32]	; (800b8dc <HAL_RCC_OscConfig+0x578>)
 800b8ba:	68db      	ldr	r3, [r3, #12]
 800b8bc:	4a07      	ldr	r2, [pc, #28]	; (800b8dc <HAL_RCC_OscConfig+0x578>)
 800b8be:	f023 0303 	bic.w	r3, r3, #3
 800b8c2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800b8c4:	4b05      	ldr	r3, [pc, #20]	; (800b8dc <HAL_RCC_OscConfig+0x578>)
 800b8c6:	68db      	ldr	r3, [r3, #12]
 800b8c8:	4a04      	ldr	r2, [pc, #16]	; (800b8dc <HAL_RCC_OscConfig+0x578>)
 800b8ca:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800b8ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b8d2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b8d4:	f7fc ffa0 	bl	8008818 <HAL_GetTick>
 800b8d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b8da:	e00e      	b.n	800b8fa <HAL_RCC_OscConfig+0x596>
 800b8dc:	40021000 	.word	0x40021000
 800b8e0:	40007000 	.word	0x40007000
 800b8e4:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b8e8:	f7fc ff96 	bl	8008818 <HAL_GetTick>
 800b8ec:	4602      	mov	r2, r0
 800b8ee:	693b      	ldr	r3, [r7, #16]
 800b8f0:	1ad3      	subs	r3, r2, r3
 800b8f2:	2b02      	cmp	r3, #2
 800b8f4:	d901      	bls.n	800b8fa <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800b8f6:	2303      	movs	r3, #3
 800b8f8:	e046      	b.n	800b988 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b8fa:	4b25      	ldr	r3, [pc, #148]	; (800b990 <HAL_RCC_OscConfig+0x62c>)
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b902:	2b00      	cmp	r3, #0
 800b904:	d1f0      	bne.n	800b8e8 <HAL_RCC_OscConfig+0x584>
 800b906:	e03e      	b.n	800b986 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	69db      	ldr	r3, [r3, #28]
 800b90c:	2b01      	cmp	r3, #1
 800b90e:	d101      	bne.n	800b914 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 800b910:	2301      	movs	r3, #1
 800b912:	e039      	b.n	800b988 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800b914:	4b1e      	ldr	r3, [pc, #120]	; (800b990 <HAL_RCC_OscConfig+0x62c>)
 800b916:	68db      	ldr	r3, [r3, #12]
 800b918:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b91a:	697b      	ldr	r3, [r7, #20]
 800b91c:	f003 0203 	and.w	r2, r3, #3
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	6a1b      	ldr	r3, [r3, #32]
 800b924:	429a      	cmp	r2, r3
 800b926:	d12c      	bne.n	800b982 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b928:	697b      	ldr	r3, [r7, #20]
 800b92a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b932:	3b01      	subs	r3, #1
 800b934:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b936:	429a      	cmp	r2, r3
 800b938:	d123      	bne.n	800b982 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800b93a:	697b      	ldr	r3, [r7, #20]
 800b93c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b944:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b946:	429a      	cmp	r2, r3
 800b948:	d11b      	bne.n	800b982 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b94a:	697b      	ldr	r3, [r7, #20]
 800b94c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b954:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800b956:	429a      	cmp	r2, r3
 800b958:	d113      	bne.n	800b982 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b95a:	697b      	ldr	r3, [r7, #20]
 800b95c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b964:	085b      	lsrs	r3, r3, #1
 800b966:	3b01      	subs	r3, #1
 800b968:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b96a:	429a      	cmp	r2, r3
 800b96c:	d109      	bne.n	800b982 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800b96e:	697b      	ldr	r3, [r7, #20]
 800b970:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b978:	085b      	lsrs	r3, r3, #1
 800b97a:	3b01      	subs	r3, #1
 800b97c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b97e:	429a      	cmp	r2, r3
 800b980:	d001      	beq.n	800b986 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800b982:	2301      	movs	r3, #1
 800b984:	e000      	b.n	800b988 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800b986:	2300      	movs	r3, #0
}
 800b988:	4618      	mov	r0, r3
 800b98a:	3720      	adds	r7, #32
 800b98c:	46bd      	mov	sp, r7
 800b98e:	bd80      	pop	{r7, pc}
 800b990:	40021000 	.word	0x40021000

0800b994 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b994:	b580      	push	{r7, lr}
 800b996:	b086      	sub	sp, #24
 800b998:	af00      	add	r7, sp, #0
 800b99a:	6078      	str	r0, [r7, #4]
 800b99c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800b99e:	2300      	movs	r3, #0
 800b9a0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d101      	bne.n	800b9ac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800b9a8:	2301      	movs	r3, #1
 800b9aa:	e11e      	b.n	800bbea <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b9ac:	4b91      	ldr	r3, [pc, #580]	; (800bbf4 <HAL_RCC_ClockConfig+0x260>)
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	f003 030f 	and.w	r3, r3, #15
 800b9b4:	683a      	ldr	r2, [r7, #0]
 800b9b6:	429a      	cmp	r2, r3
 800b9b8:	d910      	bls.n	800b9dc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b9ba:	4b8e      	ldr	r3, [pc, #568]	; (800bbf4 <HAL_RCC_ClockConfig+0x260>)
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	f023 020f 	bic.w	r2, r3, #15
 800b9c2:	498c      	ldr	r1, [pc, #560]	; (800bbf4 <HAL_RCC_ClockConfig+0x260>)
 800b9c4:	683b      	ldr	r3, [r7, #0]
 800b9c6:	4313      	orrs	r3, r2
 800b9c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b9ca:	4b8a      	ldr	r3, [pc, #552]	; (800bbf4 <HAL_RCC_ClockConfig+0x260>)
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	f003 030f 	and.w	r3, r3, #15
 800b9d2:	683a      	ldr	r2, [r7, #0]
 800b9d4:	429a      	cmp	r2, r3
 800b9d6:	d001      	beq.n	800b9dc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800b9d8:	2301      	movs	r3, #1
 800b9da:	e106      	b.n	800bbea <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	f003 0301 	and.w	r3, r3, #1
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d073      	beq.n	800bad0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	685b      	ldr	r3, [r3, #4]
 800b9ec:	2b03      	cmp	r3, #3
 800b9ee:	d129      	bne.n	800ba44 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b9f0:	4b81      	ldr	r3, [pc, #516]	; (800bbf8 <HAL_RCC_ClockConfig+0x264>)
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d101      	bne.n	800ba00 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800b9fc:	2301      	movs	r3, #1
 800b9fe:	e0f4      	b.n	800bbea <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800ba00:	f000 f972 	bl	800bce8 <RCC_GetSysClockFreqFromPLLSource>
 800ba04:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800ba06:	693b      	ldr	r3, [r7, #16]
 800ba08:	4a7c      	ldr	r2, [pc, #496]	; (800bbfc <HAL_RCC_ClockConfig+0x268>)
 800ba0a:	4293      	cmp	r3, r2
 800ba0c:	d93f      	bls.n	800ba8e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800ba0e:	4b7a      	ldr	r3, [pc, #488]	; (800bbf8 <HAL_RCC_ClockConfig+0x264>)
 800ba10:	689b      	ldr	r3, [r3, #8]
 800ba12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d009      	beq.n	800ba2e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d033      	beq.n	800ba8e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d12f      	bne.n	800ba8e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800ba2e:	4b72      	ldr	r3, [pc, #456]	; (800bbf8 <HAL_RCC_ClockConfig+0x264>)
 800ba30:	689b      	ldr	r3, [r3, #8]
 800ba32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ba36:	4a70      	ldr	r2, [pc, #448]	; (800bbf8 <HAL_RCC_ClockConfig+0x264>)
 800ba38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba3c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800ba3e:	2380      	movs	r3, #128	; 0x80
 800ba40:	617b      	str	r3, [r7, #20]
 800ba42:	e024      	b.n	800ba8e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	685b      	ldr	r3, [r3, #4]
 800ba48:	2b02      	cmp	r3, #2
 800ba4a:	d107      	bne.n	800ba5c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800ba4c:	4b6a      	ldr	r3, [pc, #424]	; (800bbf8 <HAL_RCC_ClockConfig+0x264>)
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d109      	bne.n	800ba6c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800ba58:	2301      	movs	r3, #1
 800ba5a:	e0c6      	b.n	800bbea <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ba5c:	4b66      	ldr	r3, [pc, #408]	; (800bbf8 <HAL_RCC_ClockConfig+0x264>)
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d101      	bne.n	800ba6c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800ba68:	2301      	movs	r3, #1
 800ba6a:	e0be      	b.n	800bbea <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800ba6c:	f000 f8ce 	bl	800bc0c <HAL_RCC_GetSysClockFreq>
 800ba70:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800ba72:	693b      	ldr	r3, [r7, #16]
 800ba74:	4a61      	ldr	r2, [pc, #388]	; (800bbfc <HAL_RCC_ClockConfig+0x268>)
 800ba76:	4293      	cmp	r3, r2
 800ba78:	d909      	bls.n	800ba8e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800ba7a:	4b5f      	ldr	r3, [pc, #380]	; (800bbf8 <HAL_RCC_ClockConfig+0x264>)
 800ba7c:	689b      	ldr	r3, [r3, #8]
 800ba7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ba82:	4a5d      	ldr	r2, [pc, #372]	; (800bbf8 <HAL_RCC_ClockConfig+0x264>)
 800ba84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba88:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800ba8a:	2380      	movs	r3, #128	; 0x80
 800ba8c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800ba8e:	4b5a      	ldr	r3, [pc, #360]	; (800bbf8 <HAL_RCC_ClockConfig+0x264>)
 800ba90:	689b      	ldr	r3, [r3, #8]
 800ba92:	f023 0203 	bic.w	r2, r3, #3
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	685b      	ldr	r3, [r3, #4]
 800ba9a:	4957      	ldr	r1, [pc, #348]	; (800bbf8 <HAL_RCC_ClockConfig+0x264>)
 800ba9c:	4313      	orrs	r3, r2
 800ba9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800baa0:	f7fc feba 	bl	8008818 <HAL_GetTick>
 800baa4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800baa6:	e00a      	b.n	800babe <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800baa8:	f7fc feb6 	bl	8008818 <HAL_GetTick>
 800baac:	4602      	mov	r2, r0
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	1ad3      	subs	r3, r2, r3
 800bab2:	f241 3288 	movw	r2, #5000	; 0x1388
 800bab6:	4293      	cmp	r3, r2
 800bab8:	d901      	bls.n	800babe <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800baba:	2303      	movs	r3, #3
 800babc:	e095      	b.n	800bbea <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800babe:	4b4e      	ldr	r3, [pc, #312]	; (800bbf8 <HAL_RCC_ClockConfig+0x264>)
 800bac0:	689b      	ldr	r3, [r3, #8]
 800bac2:	f003 020c 	and.w	r2, r3, #12
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	685b      	ldr	r3, [r3, #4]
 800baca:	009b      	lsls	r3, r3, #2
 800bacc:	429a      	cmp	r2, r3
 800bace:	d1eb      	bne.n	800baa8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	f003 0302 	and.w	r3, r3, #2
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d023      	beq.n	800bb24 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	f003 0304 	and.w	r3, r3, #4
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d005      	beq.n	800baf4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800bae8:	4b43      	ldr	r3, [pc, #268]	; (800bbf8 <HAL_RCC_ClockConfig+0x264>)
 800baea:	689b      	ldr	r3, [r3, #8]
 800baec:	4a42      	ldr	r2, [pc, #264]	; (800bbf8 <HAL_RCC_ClockConfig+0x264>)
 800baee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800baf2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	f003 0308 	and.w	r3, r3, #8
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d007      	beq.n	800bb10 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800bb00:	4b3d      	ldr	r3, [pc, #244]	; (800bbf8 <HAL_RCC_ClockConfig+0x264>)
 800bb02:	689b      	ldr	r3, [r3, #8]
 800bb04:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800bb08:	4a3b      	ldr	r2, [pc, #236]	; (800bbf8 <HAL_RCC_ClockConfig+0x264>)
 800bb0a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800bb0e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bb10:	4b39      	ldr	r3, [pc, #228]	; (800bbf8 <HAL_RCC_ClockConfig+0x264>)
 800bb12:	689b      	ldr	r3, [r3, #8]
 800bb14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	689b      	ldr	r3, [r3, #8]
 800bb1c:	4936      	ldr	r1, [pc, #216]	; (800bbf8 <HAL_RCC_ClockConfig+0x264>)
 800bb1e:	4313      	orrs	r3, r2
 800bb20:	608b      	str	r3, [r1, #8]
 800bb22:	e008      	b.n	800bb36 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800bb24:	697b      	ldr	r3, [r7, #20]
 800bb26:	2b80      	cmp	r3, #128	; 0x80
 800bb28:	d105      	bne.n	800bb36 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800bb2a:	4b33      	ldr	r3, [pc, #204]	; (800bbf8 <HAL_RCC_ClockConfig+0x264>)
 800bb2c:	689b      	ldr	r3, [r3, #8]
 800bb2e:	4a32      	ldr	r2, [pc, #200]	; (800bbf8 <HAL_RCC_ClockConfig+0x264>)
 800bb30:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bb34:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800bb36:	4b2f      	ldr	r3, [pc, #188]	; (800bbf4 <HAL_RCC_ClockConfig+0x260>)
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	f003 030f 	and.w	r3, r3, #15
 800bb3e:	683a      	ldr	r2, [r7, #0]
 800bb40:	429a      	cmp	r2, r3
 800bb42:	d21d      	bcs.n	800bb80 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bb44:	4b2b      	ldr	r3, [pc, #172]	; (800bbf4 <HAL_RCC_ClockConfig+0x260>)
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	f023 020f 	bic.w	r2, r3, #15
 800bb4c:	4929      	ldr	r1, [pc, #164]	; (800bbf4 <HAL_RCC_ClockConfig+0x260>)
 800bb4e:	683b      	ldr	r3, [r7, #0]
 800bb50:	4313      	orrs	r3, r2
 800bb52:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800bb54:	f7fc fe60 	bl	8008818 <HAL_GetTick>
 800bb58:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bb5a:	e00a      	b.n	800bb72 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bb5c:	f7fc fe5c 	bl	8008818 <HAL_GetTick>
 800bb60:	4602      	mov	r2, r0
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	1ad3      	subs	r3, r2, r3
 800bb66:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb6a:	4293      	cmp	r3, r2
 800bb6c:	d901      	bls.n	800bb72 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800bb6e:	2303      	movs	r3, #3
 800bb70:	e03b      	b.n	800bbea <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bb72:	4b20      	ldr	r3, [pc, #128]	; (800bbf4 <HAL_RCC_ClockConfig+0x260>)
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	f003 030f 	and.w	r3, r3, #15
 800bb7a:	683a      	ldr	r2, [r7, #0]
 800bb7c:	429a      	cmp	r2, r3
 800bb7e:	d1ed      	bne.n	800bb5c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	f003 0304 	and.w	r3, r3, #4
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d008      	beq.n	800bb9e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800bb8c:	4b1a      	ldr	r3, [pc, #104]	; (800bbf8 <HAL_RCC_ClockConfig+0x264>)
 800bb8e:	689b      	ldr	r3, [r3, #8]
 800bb90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	68db      	ldr	r3, [r3, #12]
 800bb98:	4917      	ldr	r1, [pc, #92]	; (800bbf8 <HAL_RCC_ClockConfig+0x264>)
 800bb9a:	4313      	orrs	r3, r2
 800bb9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	f003 0308 	and.w	r3, r3, #8
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d009      	beq.n	800bbbe <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800bbaa:	4b13      	ldr	r3, [pc, #76]	; (800bbf8 <HAL_RCC_ClockConfig+0x264>)
 800bbac:	689b      	ldr	r3, [r3, #8]
 800bbae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	691b      	ldr	r3, [r3, #16]
 800bbb6:	00db      	lsls	r3, r3, #3
 800bbb8:	490f      	ldr	r1, [pc, #60]	; (800bbf8 <HAL_RCC_ClockConfig+0x264>)
 800bbba:	4313      	orrs	r3, r2
 800bbbc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800bbbe:	f000 f825 	bl	800bc0c <HAL_RCC_GetSysClockFreq>
 800bbc2:	4601      	mov	r1, r0
 800bbc4:	4b0c      	ldr	r3, [pc, #48]	; (800bbf8 <HAL_RCC_ClockConfig+0x264>)
 800bbc6:	689b      	ldr	r3, [r3, #8]
 800bbc8:	091b      	lsrs	r3, r3, #4
 800bbca:	f003 030f 	and.w	r3, r3, #15
 800bbce:	4a0c      	ldr	r2, [pc, #48]	; (800bc00 <HAL_RCC_ClockConfig+0x26c>)
 800bbd0:	5cd3      	ldrb	r3, [r2, r3]
 800bbd2:	f003 031f 	and.w	r3, r3, #31
 800bbd6:	fa21 f303 	lsr.w	r3, r1, r3
 800bbda:	4a0a      	ldr	r2, [pc, #40]	; (800bc04 <HAL_RCC_ClockConfig+0x270>)
 800bbdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800bbde:	4b0a      	ldr	r3, [pc, #40]	; (800bc08 <HAL_RCC_ClockConfig+0x274>)
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	f7fc fdcc 	bl	8008780 <HAL_InitTick>
 800bbe8:	4603      	mov	r3, r0
}
 800bbea:	4618      	mov	r0, r3
 800bbec:	3718      	adds	r7, #24
 800bbee:	46bd      	mov	sp, r7
 800bbf0:	bd80      	pop	{r7, pc}
 800bbf2:	bf00      	nop
 800bbf4:	40022000 	.word	0x40022000
 800bbf8:	40021000 	.word	0x40021000
 800bbfc:	04c4b400 	.word	0x04c4b400
 800bc00:	08013720 	.word	0x08013720
 800bc04:	20000ca0 	.word	0x20000ca0
 800bc08:	20000ca4 	.word	0x20000ca4

0800bc0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800bc0c:	b480      	push	{r7}
 800bc0e:	b087      	sub	sp, #28
 800bc10:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800bc12:	4b2c      	ldr	r3, [pc, #176]	; (800bcc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800bc14:	689b      	ldr	r3, [r3, #8]
 800bc16:	f003 030c 	and.w	r3, r3, #12
 800bc1a:	2b04      	cmp	r3, #4
 800bc1c:	d102      	bne.n	800bc24 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800bc1e:	4b2a      	ldr	r3, [pc, #168]	; (800bcc8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800bc20:	613b      	str	r3, [r7, #16]
 800bc22:	e047      	b.n	800bcb4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800bc24:	4b27      	ldr	r3, [pc, #156]	; (800bcc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800bc26:	689b      	ldr	r3, [r3, #8]
 800bc28:	f003 030c 	and.w	r3, r3, #12
 800bc2c:	2b08      	cmp	r3, #8
 800bc2e:	d102      	bne.n	800bc36 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800bc30:	4b26      	ldr	r3, [pc, #152]	; (800bccc <HAL_RCC_GetSysClockFreq+0xc0>)
 800bc32:	613b      	str	r3, [r7, #16]
 800bc34:	e03e      	b.n	800bcb4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800bc36:	4b23      	ldr	r3, [pc, #140]	; (800bcc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800bc38:	689b      	ldr	r3, [r3, #8]
 800bc3a:	f003 030c 	and.w	r3, r3, #12
 800bc3e:	2b0c      	cmp	r3, #12
 800bc40:	d136      	bne.n	800bcb0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800bc42:	4b20      	ldr	r3, [pc, #128]	; (800bcc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800bc44:	68db      	ldr	r3, [r3, #12]
 800bc46:	f003 0303 	and.w	r3, r3, #3
 800bc4a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800bc4c:	4b1d      	ldr	r3, [pc, #116]	; (800bcc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800bc4e:	68db      	ldr	r3, [r3, #12]
 800bc50:	091b      	lsrs	r3, r3, #4
 800bc52:	f003 030f 	and.w	r3, r3, #15
 800bc56:	3301      	adds	r3, #1
 800bc58:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	2b03      	cmp	r3, #3
 800bc5e:	d10c      	bne.n	800bc7a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800bc60:	4a1a      	ldr	r2, [pc, #104]	; (800bccc <HAL_RCC_GetSysClockFreq+0xc0>)
 800bc62:	68bb      	ldr	r3, [r7, #8]
 800bc64:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc68:	4a16      	ldr	r2, [pc, #88]	; (800bcc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800bc6a:	68d2      	ldr	r2, [r2, #12]
 800bc6c:	0a12      	lsrs	r2, r2, #8
 800bc6e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800bc72:	fb02 f303 	mul.w	r3, r2, r3
 800bc76:	617b      	str	r3, [r7, #20]
      break;
 800bc78:	e00c      	b.n	800bc94 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800bc7a:	4a13      	ldr	r2, [pc, #76]	; (800bcc8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800bc7c:	68bb      	ldr	r3, [r7, #8]
 800bc7e:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc82:	4a10      	ldr	r2, [pc, #64]	; (800bcc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800bc84:	68d2      	ldr	r2, [r2, #12]
 800bc86:	0a12      	lsrs	r2, r2, #8
 800bc88:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800bc8c:	fb02 f303 	mul.w	r3, r2, r3
 800bc90:	617b      	str	r3, [r7, #20]
      break;
 800bc92:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800bc94:	4b0b      	ldr	r3, [pc, #44]	; (800bcc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800bc96:	68db      	ldr	r3, [r3, #12]
 800bc98:	0e5b      	lsrs	r3, r3, #25
 800bc9a:	f003 0303 	and.w	r3, r3, #3
 800bc9e:	3301      	adds	r3, #1
 800bca0:	005b      	lsls	r3, r3, #1
 800bca2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800bca4:	697a      	ldr	r2, [r7, #20]
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	fbb2 f3f3 	udiv	r3, r2, r3
 800bcac:	613b      	str	r3, [r7, #16]
 800bcae:	e001      	b.n	800bcb4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800bcb4:	693b      	ldr	r3, [r7, #16]
}
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	371c      	adds	r7, #28
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc0:	4770      	bx	lr
 800bcc2:	bf00      	nop
 800bcc4:	40021000 	.word	0x40021000
 800bcc8:	00f42400 	.word	0x00f42400
 800bccc:	007a1200 	.word	0x007a1200

0800bcd0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800bcd0:	b480      	push	{r7}
 800bcd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800bcd4:	4b03      	ldr	r3, [pc, #12]	; (800bce4 <HAL_RCC_GetHCLKFreq+0x14>)
 800bcd6:	681b      	ldr	r3, [r3, #0]
}
 800bcd8:	4618      	mov	r0, r3
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce0:	4770      	bx	lr
 800bce2:	bf00      	nop
 800bce4:	20000ca0 	.word	0x20000ca0

0800bce8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800bce8:	b480      	push	{r7}
 800bcea:	b087      	sub	sp, #28
 800bcec:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800bcee:	4b1e      	ldr	r3, [pc, #120]	; (800bd68 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800bcf0:	68db      	ldr	r3, [r3, #12]
 800bcf2:	f003 0303 	and.w	r3, r3, #3
 800bcf6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800bcf8:	4b1b      	ldr	r3, [pc, #108]	; (800bd68 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800bcfa:	68db      	ldr	r3, [r3, #12]
 800bcfc:	091b      	lsrs	r3, r3, #4
 800bcfe:	f003 030f 	and.w	r3, r3, #15
 800bd02:	3301      	adds	r3, #1
 800bd04:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800bd06:	693b      	ldr	r3, [r7, #16]
 800bd08:	2b03      	cmp	r3, #3
 800bd0a:	d10c      	bne.n	800bd26 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800bd0c:	4a17      	ldr	r2, [pc, #92]	; (800bd6c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd14:	4a14      	ldr	r2, [pc, #80]	; (800bd68 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800bd16:	68d2      	ldr	r2, [r2, #12]
 800bd18:	0a12      	lsrs	r2, r2, #8
 800bd1a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800bd1e:	fb02 f303 	mul.w	r3, r2, r3
 800bd22:	617b      	str	r3, [r7, #20]
    break;
 800bd24:	e00c      	b.n	800bd40 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800bd26:	4a12      	ldr	r2, [pc, #72]	; (800bd70 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd2e:	4a0e      	ldr	r2, [pc, #56]	; (800bd68 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800bd30:	68d2      	ldr	r2, [r2, #12]
 800bd32:	0a12      	lsrs	r2, r2, #8
 800bd34:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800bd38:	fb02 f303 	mul.w	r3, r2, r3
 800bd3c:	617b      	str	r3, [r7, #20]
    break;
 800bd3e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800bd40:	4b09      	ldr	r3, [pc, #36]	; (800bd68 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800bd42:	68db      	ldr	r3, [r3, #12]
 800bd44:	0e5b      	lsrs	r3, r3, #25
 800bd46:	f003 0303 	and.w	r3, r3, #3
 800bd4a:	3301      	adds	r3, #1
 800bd4c:	005b      	lsls	r3, r3, #1
 800bd4e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800bd50:	697a      	ldr	r2, [r7, #20]
 800bd52:	68bb      	ldr	r3, [r7, #8]
 800bd54:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd58:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800bd5a:	687b      	ldr	r3, [r7, #4]
}
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	371c      	adds	r7, #28
 800bd60:	46bd      	mov	sp, r7
 800bd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd66:	4770      	bx	lr
 800bd68:	40021000 	.word	0x40021000
 800bd6c:	007a1200 	.word	0x007a1200
 800bd70:	00f42400 	.word	0x00f42400

0800bd74 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800bd74:	b580      	push	{r7, lr}
 800bd76:	b086      	sub	sp, #24
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800bd80:	2300      	movs	r3, #0
 800bd82:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	f000 8098 	beq.w	800bec2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800bd92:	2300      	movs	r3, #0
 800bd94:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800bd96:	4b43      	ldr	r3, [pc, #268]	; (800bea4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bd98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d10d      	bne.n	800bdbe <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bda2:	4b40      	ldr	r3, [pc, #256]	; (800bea4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bda4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bda6:	4a3f      	ldr	r2, [pc, #252]	; (800bea4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bda8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bdac:	6593      	str	r3, [r2, #88]	; 0x58
 800bdae:	4b3d      	ldr	r3, [pc, #244]	; (800bea4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bdb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bdb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bdb6:	60bb      	str	r3, [r7, #8]
 800bdb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800bdba:	2301      	movs	r3, #1
 800bdbc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bdbe:	4b3a      	ldr	r3, [pc, #232]	; (800bea8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	4a39      	ldr	r2, [pc, #228]	; (800bea8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800bdc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bdc8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800bdca:	f7fc fd25 	bl	8008818 <HAL_GetTick>
 800bdce:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bdd0:	e009      	b.n	800bde6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bdd2:	f7fc fd21 	bl	8008818 <HAL_GetTick>
 800bdd6:	4602      	mov	r2, r0
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	1ad3      	subs	r3, r2, r3
 800bddc:	2b02      	cmp	r3, #2
 800bdde:	d902      	bls.n	800bde6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800bde0:	2303      	movs	r3, #3
 800bde2:	74fb      	strb	r3, [r7, #19]
        break;
 800bde4:	e005      	b.n	800bdf2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bde6:	4b30      	ldr	r3, [pc, #192]	; (800bea8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d0ef      	beq.n	800bdd2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800bdf2:	7cfb      	ldrb	r3, [r7, #19]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d159      	bne.n	800beac <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800bdf8:	4b2a      	ldr	r3, [pc, #168]	; (800bea4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bdfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bdfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800be02:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800be04:	697b      	ldr	r3, [r7, #20]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d01e      	beq.n	800be48 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be0e:	697a      	ldr	r2, [r7, #20]
 800be10:	429a      	cmp	r2, r3
 800be12:	d019      	beq.n	800be48 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800be14:	4b23      	ldr	r3, [pc, #140]	; (800bea4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800be16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800be1e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800be20:	4b20      	ldr	r3, [pc, #128]	; (800bea4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800be22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be26:	4a1f      	ldr	r2, [pc, #124]	; (800bea4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800be28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800be2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800be30:	4b1c      	ldr	r3, [pc, #112]	; (800bea4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800be32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be36:	4a1b      	ldr	r2, [pc, #108]	; (800bea4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800be38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800be3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800be40:	4a18      	ldr	r2, [pc, #96]	; (800bea4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800be42:	697b      	ldr	r3, [r7, #20]
 800be44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800be48:	697b      	ldr	r3, [r7, #20]
 800be4a:	f003 0301 	and.w	r3, r3, #1
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d016      	beq.n	800be80 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800be52:	f7fc fce1 	bl	8008818 <HAL_GetTick>
 800be56:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800be58:	e00b      	b.n	800be72 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800be5a:	f7fc fcdd 	bl	8008818 <HAL_GetTick>
 800be5e:	4602      	mov	r2, r0
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	1ad3      	subs	r3, r2, r3
 800be64:	f241 3288 	movw	r2, #5000	; 0x1388
 800be68:	4293      	cmp	r3, r2
 800be6a:	d902      	bls.n	800be72 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800be6c:	2303      	movs	r3, #3
 800be6e:	74fb      	strb	r3, [r7, #19]
            break;
 800be70:	e006      	b.n	800be80 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800be72:	4b0c      	ldr	r3, [pc, #48]	; (800bea4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800be74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be78:	f003 0302 	and.w	r3, r3, #2
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d0ec      	beq.n	800be5a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800be80:	7cfb      	ldrb	r3, [r7, #19]
 800be82:	2b00      	cmp	r3, #0
 800be84:	d10b      	bne.n	800be9e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800be86:	4b07      	ldr	r3, [pc, #28]	; (800bea4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800be88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be94:	4903      	ldr	r1, [pc, #12]	; (800bea4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800be96:	4313      	orrs	r3, r2
 800be98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800be9c:	e008      	b.n	800beb0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800be9e:	7cfb      	ldrb	r3, [r7, #19]
 800bea0:	74bb      	strb	r3, [r7, #18]
 800bea2:	e005      	b.n	800beb0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800bea4:	40021000 	.word	0x40021000
 800bea8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800beac:	7cfb      	ldrb	r3, [r7, #19]
 800beae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800beb0:	7c7b      	ldrb	r3, [r7, #17]
 800beb2:	2b01      	cmp	r3, #1
 800beb4:	d105      	bne.n	800bec2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800beb6:	4baf      	ldr	r3, [pc, #700]	; (800c174 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800beb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800beba:	4aae      	ldr	r2, [pc, #696]	; (800c174 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bebc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bec0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	f003 0301 	and.w	r3, r3, #1
 800beca:	2b00      	cmp	r3, #0
 800becc:	d00a      	beq.n	800bee4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800bece:	4ba9      	ldr	r3, [pc, #676]	; (800c174 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bed4:	f023 0203 	bic.w	r2, r3, #3
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	685b      	ldr	r3, [r3, #4]
 800bedc:	49a5      	ldr	r1, [pc, #660]	; (800c174 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bede:	4313      	orrs	r3, r2
 800bee0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	f003 0302 	and.w	r3, r3, #2
 800beec:	2b00      	cmp	r3, #0
 800beee:	d00a      	beq.n	800bf06 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800bef0:	4ba0      	ldr	r3, [pc, #640]	; (800c174 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bef6:	f023 020c 	bic.w	r2, r3, #12
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	689b      	ldr	r3, [r3, #8]
 800befe:	499d      	ldr	r1, [pc, #628]	; (800c174 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bf00:	4313      	orrs	r3, r2
 800bf02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	f003 0304 	and.w	r3, r3, #4
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d00a      	beq.n	800bf28 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800bf12:	4b98      	ldr	r3, [pc, #608]	; (800c174 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bf14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf18:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	68db      	ldr	r3, [r3, #12]
 800bf20:	4994      	ldr	r1, [pc, #592]	; (800c174 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bf22:	4313      	orrs	r3, r2
 800bf24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	f003 0308 	and.w	r3, r3, #8
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d00a      	beq.n	800bf4a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800bf34:	4b8f      	ldr	r3, [pc, #572]	; (800c174 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bf36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf3a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	691b      	ldr	r3, [r3, #16]
 800bf42:	498c      	ldr	r1, [pc, #560]	; (800c174 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bf44:	4313      	orrs	r3, r2
 800bf46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	f003 0310 	and.w	r3, r3, #16
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d00a      	beq.n	800bf6c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800bf56:	4b87      	ldr	r3, [pc, #540]	; (800c174 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bf58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	695b      	ldr	r3, [r3, #20]
 800bf64:	4983      	ldr	r1, [pc, #524]	; (800c174 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bf66:	4313      	orrs	r3, r2
 800bf68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	f003 0320 	and.w	r3, r3, #32
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d00a      	beq.n	800bf8e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800bf78:	4b7e      	ldr	r3, [pc, #504]	; (800c174 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bf7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf7e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	699b      	ldr	r3, [r3, #24]
 800bf86:	497b      	ldr	r1, [pc, #492]	; (800c174 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bf88:	4313      	orrs	r3, r2
 800bf8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d00a      	beq.n	800bfb0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800bf9a:	4b76      	ldr	r3, [pc, #472]	; (800c174 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bf9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bfa0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	69db      	ldr	r3, [r3, #28]
 800bfa8:	4972      	ldr	r1, [pc, #456]	; (800c174 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bfaa:	4313      	orrs	r3, r2
 800bfac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d00a      	beq.n	800bfd2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800bfbc:	4b6d      	ldr	r3, [pc, #436]	; (800c174 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bfbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bfc2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	6a1b      	ldr	r3, [r3, #32]
 800bfca:	496a      	ldr	r1, [pc, #424]	; (800c174 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bfcc:	4313      	orrs	r3, r2
 800bfce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d00a      	beq.n	800bff4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800bfde:	4b65      	ldr	r3, [pc, #404]	; (800c174 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bfe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bfe4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfec:	4961      	ldr	r1, [pc, #388]	; (800c174 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bfee:	4313      	orrs	r3, r2
 800bff0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d00a      	beq.n	800c016 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c000:	4b5c      	ldr	r3, [pc, #368]	; (800c174 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c002:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c006:	f023 0203 	bic.w	r2, r3, #3
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c00e:	4959      	ldr	r1, [pc, #356]	; (800c174 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c010:	4313      	orrs	r3, r2
 800c012:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d00a      	beq.n	800c038 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c022:	4b54      	ldr	r3, [pc, #336]	; (800c174 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c024:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c028:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c030:	4950      	ldr	r1, [pc, #320]	; (800c174 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c032:	4313      	orrs	r3, r2
 800c034:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c040:	2b00      	cmp	r3, #0
 800c042:	d015      	beq.n	800c070 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c044:	4b4b      	ldr	r3, [pc, #300]	; (800c174 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c04a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c052:	4948      	ldr	r1, [pc, #288]	; (800c174 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c054:	4313      	orrs	r3, r2
 800c056:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c05e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c062:	d105      	bne.n	800c070 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c064:	4b43      	ldr	r3, [pc, #268]	; (800c174 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c066:	68db      	ldr	r3, [r3, #12]
 800c068:	4a42      	ldr	r2, [pc, #264]	; (800c174 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c06a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c06e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d015      	beq.n	800c0a8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800c07c:	4b3d      	ldr	r3, [pc, #244]	; (800c174 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c07e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c082:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c08a:	493a      	ldr	r1, [pc, #232]	; (800c174 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c08c:	4313      	orrs	r3, r2
 800c08e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c096:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c09a:	d105      	bne.n	800c0a8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c09c:	4b35      	ldr	r3, [pc, #212]	; (800c174 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c09e:	68db      	ldr	r3, [r3, #12]
 800c0a0:	4a34      	ldr	r2, [pc, #208]	; (800c174 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c0a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c0a6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d015      	beq.n	800c0e0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800c0b4:	4b2f      	ldr	r3, [pc, #188]	; (800c174 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c0b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c0ba:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0c2:	492c      	ldr	r1, [pc, #176]	; (800c174 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c0c4:	4313      	orrs	r3, r2
 800c0c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0ce:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c0d2:	d105      	bne.n	800c0e0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c0d4:	4b27      	ldr	r3, [pc, #156]	; (800c174 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c0d6:	68db      	ldr	r3, [r3, #12]
 800c0d8:	4a26      	ldr	r2, [pc, #152]	; (800c174 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c0da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c0de:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d015      	beq.n	800c118 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c0ec:	4b21      	ldr	r3, [pc, #132]	; (800c174 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c0ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c0f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0fa:	491e      	ldr	r1, [pc, #120]	; (800c174 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c0fc:	4313      	orrs	r3, r2
 800c0fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c106:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c10a:	d105      	bne.n	800c118 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c10c:	4b19      	ldr	r3, [pc, #100]	; (800c174 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c10e:	68db      	ldr	r3, [r3, #12]
 800c110:	4a18      	ldr	r2, [pc, #96]	; (800c174 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c112:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c116:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c120:	2b00      	cmp	r3, #0
 800c122:	d015      	beq.n	800c150 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c124:	4b13      	ldr	r3, [pc, #76]	; (800c174 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c126:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c12a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c132:	4910      	ldr	r1, [pc, #64]	; (800c174 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c134:	4313      	orrs	r3, r2
 800c136:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c13e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c142:	d105      	bne.n	800c150 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c144:	4b0b      	ldr	r3, [pc, #44]	; (800c174 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c146:	68db      	ldr	r3, [r3, #12]
 800c148:	4a0a      	ldr	r2, [pc, #40]	; (800c174 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c14a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c14e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d018      	beq.n	800c18e <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800c15c:	4b05      	ldr	r3, [pc, #20]	; (800c174 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c15e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c162:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c16a:	4902      	ldr	r1, [pc, #8]	; (800c174 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800c16c:	4313      	orrs	r3, r2
 800c16e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800c172:	e001      	b.n	800c178 <HAL_RCCEx_PeriphCLKConfig+0x404>
 800c174:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c17c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c180:	d105      	bne.n	800c18e <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800c182:	4b21      	ldr	r3, [pc, #132]	; (800c208 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c184:	68db      	ldr	r3, [r3, #12]
 800c186:	4a20      	ldr	r2, [pc, #128]	; (800c208 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c188:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c18c:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c196:	2b00      	cmp	r3, #0
 800c198:	d015      	beq.n	800c1c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800c19a:	4b1b      	ldr	r3, [pc, #108]	; (800c208 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c19c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c1a0:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c1a8:	4917      	ldr	r1, [pc, #92]	; (800c208 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c1aa:	4313      	orrs	r3, r2
 800c1ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c1b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c1b8:	d105      	bne.n	800c1c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800c1ba:	4b13      	ldr	r3, [pc, #76]	; (800c208 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c1bc:	68db      	ldr	r3, [r3, #12]
 800c1be:	4a12      	ldr	r2, [pc, #72]	; (800c208 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c1c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c1c4:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d015      	beq.n	800c1fe <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800c1d2:	4b0d      	ldr	r3, [pc, #52]	; (800c208 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c1d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c1d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c1e0:	4909      	ldr	r1, [pc, #36]	; (800c208 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c1e2:	4313      	orrs	r3, r2
 800c1e4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c1ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c1f0:	d105      	bne.n	800c1fe <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c1f2:	4b05      	ldr	r3, [pc, #20]	; (800c208 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c1f4:	68db      	ldr	r3, [r3, #12]
 800c1f6:	4a04      	ldr	r2, [pc, #16]	; (800c208 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c1f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c1fc:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800c1fe:	7cbb      	ldrb	r3, [r7, #18]
}
 800c200:	4618      	mov	r0, r3
 800c202:	3718      	adds	r7, #24
 800c204:	46bd      	mov	sp, r7
 800c206:	bd80      	pop	{r7, pc}
 800c208:	40021000 	.word	0x40021000

0800c20c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c20c:	b580      	push	{r7, lr}
 800c20e:	b084      	sub	sp, #16
 800c210:	af00      	add	r7, sp, #0
 800c212:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d101      	bne.n	800c21e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c21a:	2301      	movs	r3, #1
 800c21c:	e084      	b.n	800c328 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	2200      	movs	r2, #0
 800c222:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c22a:	b2db      	uxtb	r3, r3
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d106      	bne.n	800c23e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	2200      	movs	r2, #0
 800c234:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c238:	6878      	ldr	r0, [r7, #4]
 800c23a:	f7fb fd2b 	bl	8007c94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	2202      	movs	r2, #2
 800c242:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	681a      	ldr	r2, [r3, #0]
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c254:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	68db      	ldr	r3, [r3, #12]
 800c25a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c25e:	d902      	bls.n	800c266 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800c260:	2300      	movs	r3, #0
 800c262:	60fb      	str	r3, [r7, #12]
 800c264:	e002      	b.n	800c26c <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800c266:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c26a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	68db      	ldr	r3, [r3, #12]
 800c270:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800c274:	d007      	beq.n	800c286 <HAL_SPI_Init+0x7a>
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	68db      	ldr	r3, [r3, #12]
 800c27a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c27e:	d002      	beq.n	800c286 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	2200      	movs	r2, #0
 800c284:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d10b      	bne.n	800c2a6 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	68db      	ldr	r3, [r3, #12]
 800c292:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c296:	d903      	bls.n	800c2a0 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	2202      	movs	r2, #2
 800c29c:	631a      	str	r2, [r3, #48]	; 0x30
 800c29e:	e002      	b.n	800c2a6 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	2201      	movs	r2, #1
 800c2a4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	685a      	ldr	r2, [r3, #4]
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	689b      	ldr	r3, [r3, #8]
 800c2ae:	431a      	orrs	r2, r3
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	691b      	ldr	r3, [r3, #16]
 800c2b4:	431a      	orrs	r2, r3
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	695b      	ldr	r3, [r3, #20]
 800c2ba:	431a      	orrs	r2, r3
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	699b      	ldr	r3, [r3, #24]
 800c2c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c2c4:	431a      	orrs	r2, r3
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	69db      	ldr	r3, [r3, #28]
 800c2ca:	431a      	orrs	r2, r3
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	6a1b      	ldr	r3, [r3, #32]
 800c2d0:	ea42 0103 	orr.w	r1, r2, r3
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	430a      	orrs	r2, r1
 800c2de:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	699b      	ldr	r3, [r3, #24]
 800c2e4:	0c1b      	lsrs	r3, r3, #16
 800c2e6:	f003 0204 	and.w	r2, r3, #4
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2ee:	431a      	orrs	r2, r3
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c2f4:	431a      	orrs	r2, r3
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	68db      	ldr	r3, [r3, #12]
 800c2fa:	ea42 0103 	orr.w	r1, r2, r3
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	68fa      	ldr	r2, [r7, #12]
 800c304:	430a      	orrs	r2, r1
 800c306:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	69da      	ldr	r2, [r3, #28]
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c316:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	2200      	movs	r2, #0
 800c31c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	2201      	movs	r2, #1
 800c322:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800c326:	2300      	movs	r3, #0
}
 800c328:	4618      	mov	r0, r3
 800c32a:	3710      	adds	r7, #16
 800c32c:	46bd      	mov	sp, r7
 800c32e:	bd80      	pop	{r7, pc}

0800c330 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c330:	b580      	push	{r7, lr}
 800c332:	b082      	sub	sp, #8
 800c334:	af00      	add	r7, sp, #0
 800c336:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d101      	bne.n	800c342 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c33e:	2301      	movs	r3, #1
 800c340:	e049      	b.n	800c3d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c348:	b2db      	uxtb	r3, r3
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d106      	bne.n	800c35c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	2200      	movs	r2, #0
 800c352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c356:	6878      	ldr	r0, [r7, #4]
 800c358:	f7fc f914 	bl	8008584 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	2202      	movs	r2, #2
 800c360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	681a      	ldr	r2, [r3, #0]
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	3304      	adds	r3, #4
 800c36c:	4619      	mov	r1, r3
 800c36e:	4610      	mov	r0, r2
 800c370:	f000 fc38 	bl	800cbe4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	2201      	movs	r2, #1
 800c378:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	2201      	movs	r2, #1
 800c380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	2201      	movs	r2, #1
 800c388:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	2201      	movs	r2, #1
 800c390:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	2201      	movs	r2, #1
 800c398:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	2201      	movs	r2, #1
 800c3a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	2201      	movs	r2, #1
 800c3a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	2201      	movs	r2, #1
 800c3b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	2201      	movs	r2, #1
 800c3b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	2201      	movs	r2, #1
 800c3c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	2201      	movs	r2, #1
 800c3c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	2201      	movs	r2, #1
 800c3d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c3d4:	2300      	movs	r3, #0
}
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	3708      	adds	r7, #8
 800c3da:	46bd      	mov	sp, r7
 800c3dc:	bd80      	pop	{r7, pc}
	...

0800c3e0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800c3e0:	b480      	push	{r7}
 800c3e2:	b085      	sub	sp, #20
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c3ee:	b2db      	uxtb	r3, r3
 800c3f0:	2b01      	cmp	r3, #1
 800c3f2:	d001      	beq.n	800c3f8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800c3f4:	2301      	movs	r3, #1
 800c3f6:	e019      	b.n	800c42c <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	2202      	movs	r2, #2
 800c3fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	689a      	ldr	r2, [r3, #8]
 800c406:	4b0c      	ldr	r3, [pc, #48]	; (800c438 <HAL_TIM_Base_Start+0x58>)
 800c408:	4013      	ands	r3, r2
 800c40a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	2b06      	cmp	r3, #6
 800c410:	d00b      	beq.n	800c42a <HAL_TIM_Base_Start+0x4a>
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c418:	d007      	beq.n	800c42a <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	681a      	ldr	r2, [r3, #0]
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	f042 0201 	orr.w	r2, r2, #1
 800c428:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c42a:	2300      	movs	r3, #0
}
 800c42c:	4618      	mov	r0, r3
 800c42e:	3714      	adds	r7, #20
 800c430:	46bd      	mov	sp, r7
 800c432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c436:	4770      	bx	lr
 800c438:	00010007 	.word	0x00010007

0800c43c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800c43c:	b480      	push	{r7}
 800c43e:	b083      	sub	sp, #12
 800c440:	af00      	add	r7, sp, #0
 800c442:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	6a1a      	ldr	r2, [r3, #32]
 800c44a:	f241 1311 	movw	r3, #4369	; 0x1111
 800c44e:	4013      	ands	r3, r2
 800c450:	2b00      	cmp	r3, #0
 800c452:	d10f      	bne.n	800c474 <HAL_TIM_Base_Stop+0x38>
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	6a1a      	ldr	r2, [r3, #32]
 800c45a:	f244 4344 	movw	r3, #17476	; 0x4444
 800c45e:	4013      	ands	r3, r2
 800c460:	2b00      	cmp	r3, #0
 800c462:	d107      	bne.n	800c474 <HAL_TIM_Base_Stop+0x38>
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	681a      	ldr	r2, [r3, #0]
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	f022 0201 	bic.w	r2, r2, #1
 800c472:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	2201      	movs	r2, #1
 800c478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800c47c:	2300      	movs	r3, #0
}
 800c47e:	4618      	mov	r0, r3
 800c480:	370c      	adds	r7, #12
 800c482:	46bd      	mov	sp, r7
 800c484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c488:	4770      	bx	lr
	...

0800c48c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c48c:	b480      	push	{r7}
 800c48e:	b085      	sub	sp, #20
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c49a:	b2db      	uxtb	r3, r3
 800c49c:	2b01      	cmp	r3, #1
 800c49e:	d001      	beq.n	800c4a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c4a0:	2301      	movs	r3, #1
 800c4a2:	e021      	b.n	800c4e8 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	2202      	movs	r2, #2
 800c4a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	68da      	ldr	r2, [r3, #12]
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	f042 0201 	orr.w	r2, r2, #1
 800c4ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	689a      	ldr	r2, [r3, #8]
 800c4c2:	4b0c      	ldr	r3, [pc, #48]	; (800c4f4 <HAL_TIM_Base_Start_IT+0x68>)
 800c4c4:	4013      	ands	r3, r2
 800c4c6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	2b06      	cmp	r3, #6
 800c4cc:	d00b      	beq.n	800c4e6 <HAL_TIM_Base_Start_IT+0x5a>
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c4d4:	d007      	beq.n	800c4e6 <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	681a      	ldr	r2, [r3, #0]
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	f042 0201 	orr.w	r2, r2, #1
 800c4e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c4e6:	2300      	movs	r3, #0
}
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	3714      	adds	r7, #20
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f2:	4770      	bx	lr
 800c4f4:	00010007 	.word	0x00010007

0800c4f8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800c4f8:	b480      	push	{r7}
 800c4fa:	b083      	sub	sp, #12
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	68da      	ldr	r2, [r3, #12]
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	f022 0201 	bic.w	r2, r2, #1
 800c50e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	6a1a      	ldr	r2, [r3, #32]
 800c516:	f241 1311 	movw	r3, #4369	; 0x1111
 800c51a:	4013      	ands	r3, r2
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d10f      	bne.n	800c540 <HAL_TIM_Base_Stop_IT+0x48>
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	6a1a      	ldr	r2, [r3, #32]
 800c526:	f244 4344 	movw	r3, #17476	; 0x4444
 800c52a:	4013      	ands	r3, r2
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d107      	bne.n	800c540 <HAL_TIM_Base_Stop_IT+0x48>
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	681a      	ldr	r2, [r3, #0]
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	f022 0201 	bic.w	r2, r2, #1
 800c53e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	2201      	movs	r2, #1
 800c544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800c548:	2300      	movs	r3, #0
}
 800c54a:	4618      	mov	r0, r3
 800c54c:	370c      	adds	r7, #12
 800c54e:	46bd      	mov	sp, r7
 800c550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c554:	4770      	bx	lr

0800c556 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800c556:	b580      	push	{r7, lr}
 800c558:	b086      	sub	sp, #24
 800c55a:	af00      	add	r7, sp, #0
 800c55c:	6078      	str	r0, [r7, #4]
 800c55e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	2b00      	cmp	r3, #0
 800c564:	d101      	bne.n	800c56a <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800c566:	2301      	movs	r3, #1
 800c568:	e097      	b.n	800c69a <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c570:	b2db      	uxtb	r3, r3
 800c572:	2b00      	cmp	r3, #0
 800c574:	d106      	bne.n	800c584 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	2200      	movs	r2, #0
 800c57a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800c57e:	6878      	ldr	r0, [r7, #4]
 800c580:	f7fb ffb4 	bl	80084ec <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	2202      	movs	r2, #2
 800c588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	689b      	ldr	r3, [r3, #8]
 800c592:	687a      	ldr	r2, [r7, #4]
 800c594:	6812      	ldr	r2, [r2, #0]
 800c596:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800c59a:	f023 0307 	bic.w	r3, r3, #7
 800c59e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	681a      	ldr	r2, [r3, #0]
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	3304      	adds	r3, #4
 800c5a8:	4619      	mov	r1, r3
 800c5aa:	4610      	mov	r0, r2
 800c5ac:	f000 fb1a 	bl	800cbe4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	689b      	ldr	r3, [r3, #8]
 800c5b6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	699b      	ldr	r3, [r3, #24]
 800c5be:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	6a1b      	ldr	r3, [r3, #32]
 800c5c6:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800c5c8:	683b      	ldr	r3, [r7, #0]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	697a      	ldr	r2, [r7, #20]
 800c5ce:	4313      	orrs	r3, r2
 800c5d0:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800c5d2:	693b      	ldr	r3, [r7, #16]
 800c5d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c5d8:	f023 0303 	bic.w	r3, r3, #3
 800c5dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800c5de:	683b      	ldr	r3, [r7, #0]
 800c5e0:	689a      	ldr	r2, [r3, #8]
 800c5e2:	683b      	ldr	r3, [r7, #0]
 800c5e4:	699b      	ldr	r3, [r3, #24]
 800c5e6:	021b      	lsls	r3, r3, #8
 800c5e8:	4313      	orrs	r3, r2
 800c5ea:	693a      	ldr	r2, [r7, #16]
 800c5ec:	4313      	orrs	r3, r2
 800c5ee:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800c5f0:	693b      	ldr	r3, [r7, #16]
 800c5f2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800c5f6:	f023 030c 	bic.w	r3, r3, #12
 800c5fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800c5fc:	693b      	ldr	r3, [r7, #16]
 800c5fe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c602:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c606:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800c608:	683b      	ldr	r3, [r7, #0]
 800c60a:	68da      	ldr	r2, [r3, #12]
 800c60c:	683b      	ldr	r3, [r7, #0]
 800c60e:	69db      	ldr	r3, [r3, #28]
 800c610:	021b      	lsls	r3, r3, #8
 800c612:	4313      	orrs	r3, r2
 800c614:	693a      	ldr	r2, [r7, #16]
 800c616:	4313      	orrs	r3, r2
 800c618:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800c61a:	683b      	ldr	r3, [r7, #0]
 800c61c:	691b      	ldr	r3, [r3, #16]
 800c61e:	011a      	lsls	r2, r3, #4
 800c620:	683b      	ldr	r3, [r7, #0]
 800c622:	6a1b      	ldr	r3, [r3, #32]
 800c624:	031b      	lsls	r3, r3, #12
 800c626:	4313      	orrs	r3, r2
 800c628:	693a      	ldr	r2, [r7, #16]
 800c62a:	4313      	orrs	r3, r2
 800c62c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800c634:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800c63c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800c63e:	683b      	ldr	r3, [r7, #0]
 800c640:	685a      	ldr	r2, [r3, #4]
 800c642:	683b      	ldr	r3, [r7, #0]
 800c644:	695b      	ldr	r3, [r3, #20]
 800c646:	011b      	lsls	r3, r3, #4
 800c648:	4313      	orrs	r3, r2
 800c64a:	68fa      	ldr	r2, [r7, #12]
 800c64c:	4313      	orrs	r3, r2
 800c64e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	697a      	ldr	r2, [r7, #20]
 800c656:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	693a      	ldr	r2, [r7, #16]
 800c65e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	68fa      	ldr	r2, [r7, #12]
 800c666:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	2201      	movs	r2, #1
 800c66c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	2201      	movs	r2, #1
 800c674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	2201      	movs	r2, #1
 800c67c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	2201      	movs	r2, #1
 800c684:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	2201      	movs	r2, #1
 800c68c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	2201      	movs	r2, #1
 800c694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c698:	2300      	movs	r3, #0
}
 800c69a:	4618      	mov	r0, r3
 800c69c:	3718      	adds	r7, #24
 800c69e:	46bd      	mov	sp, r7
 800c6a0:	bd80      	pop	{r7, pc}

0800c6a2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c6a2:	b580      	push	{r7, lr}
 800c6a4:	b082      	sub	sp, #8
 800c6a6:	af00      	add	r7, sp, #0
 800c6a8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	691b      	ldr	r3, [r3, #16]
 800c6b0:	f003 0302 	and.w	r3, r3, #2
 800c6b4:	2b02      	cmp	r3, #2
 800c6b6:	d122      	bne.n	800c6fe <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	68db      	ldr	r3, [r3, #12]
 800c6be:	f003 0302 	and.w	r3, r3, #2
 800c6c2:	2b02      	cmp	r3, #2
 800c6c4:	d11b      	bne.n	800c6fe <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	f06f 0202 	mvn.w	r2, #2
 800c6ce:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	2201      	movs	r2, #1
 800c6d4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	699b      	ldr	r3, [r3, #24]
 800c6dc:	f003 0303 	and.w	r3, r3, #3
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d003      	beq.n	800c6ec <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c6e4:	6878      	ldr	r0, [r7, #4]
 800c6e6:	f000 fa5f 	bl	800cba8 <HAL_TIM_IC_CaptureCallback>
 800c6ea:	e005      	b.n	800c6f8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c6ec:	6878      	ldr	r0, [r7, #4]
 800c6ee:	f000 fa51 	bl	800cb94 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c6f2:	6878      	ldr	r0, [r7, #4]
 800c6f4:	f000 fa62 	bl	800cbbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	2200      	movs	r2, #0
 800c6fc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	691b      	ldr	r3, [r3, #16]
 800c704:	f003 0304 	and.w	r3, r3, #4
 800c708:	2b04      	cmp	r3, #4
 800c70a:	d122      	bne.n	800c752 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	68db      	ldr	r3, [r3, #12]
 800c712:	f003 0304 	and.w	r3, r3, #4
 800c716:	2b04      	cmp	r3, #4
 800c718:	d11b      	bne.n	800c752 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	f06f 0204 	mvn.w	r2, #4
 800c722:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	2202      	movs	r2, #2
 800c728:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	699b      	ldr	r3, [r3, #24]
 800c730:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c734:	2b00      	cmp	r3, #0
 800c736:	d003      	beq.n	800c740 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c738:	6878      	ldr	r0, [r7, #4]
 800c73a:	f000 fa35 	bl	800cba8 <HAL_TIM_IC_CaptureCallback>
 800c73e:	e005      	b.n	800c74c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c740:	6878      	ldr	r0, [r7, #4]
 800c742:	f000 fa27 	bl	800cb94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c746:	6878      	ldr	r0, [r7, #4]
 800c748:	f000 fa38 	bl	800cbbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	2200      	movs	r2, #0
 800c750:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	691b      	ldr	r3, [r3, #16]
 800c758:	f003 0308 	and.w	r3, r3, #8
 800c75c:	2b08      	cmp	r3, #8
 800c75e:	d122      	bne.n	800c7a6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	68db      	ldr	r3, [r3, #12]
 800c766:	f003 0308 	and.w	r3, r3, #8
 800c76a:	2b08      	cmp	r3, #8
 800c76c:	d11b      	bne.n	800c7a6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	f06f 0208 	mvn.w	r2, #8
 800c776:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	2204      	movs	r2, #4
 800c77c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	69db      	ldr	r3, [r3, #28]
 800c784:	f003 0303 	and.w	r3, r3, #3
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d003      	beq.n	800c794 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c78c:	6878      	ldr	r0, [r7, #4]
 800c78e:	f000 fa0b 	bl	800cba8 <HAL_TIM_IC_CaptureCallback>
 800c792:	e005      	b.n	800c7a0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c794:	6878      	ldr	r0, [r7, #4]
 800c796:	f000 f9fd 	bl	800cb94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c79a:	6878      	ldr	r0, [r7, #4]
 800c79c:	f000 fa0e 	bl	800cbbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	2200      	movs	r2, #0
 800c7a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	691b      	ldr	r3, [r3, #16]
 800c7ac:	f003 0310 	and.w	r3, r3, #16
 800c7b0:	2b10      	cmp	r3, #16
 800c7b2:	d122      	bne.n	800c7fa <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	68db      	ldr	r3, [r3, #12]
 800c7ba:	f003 0310 	and.w	r3, r3, #16
 800c7be:	2b10      	cmp	r3, #16
 800c7c0:	d11b      	bne.n	800c7fa <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	f06f 0210 	mvn.w	r2, #16
 800c7ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	2208      	movs	r2, #8
 800c7d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	69db      	ldr	r3, [r3, #28]
 800c7d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d003      	beq.n	800c7e8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c7e0:	6878      	ldr	r0, [r7, #4]
 800c7e2:	f000 f9e1 	bl	800cba8 <HAL_TIM_IC_CaptureCallback>
 800c7e6:	e005      	b.n	800c7f4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c7e8:	6878      	ldr	r0, [r7, #4]
 800c7ea:	f000 f9d3 	bl	800cb94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c7ee:	6878      	ldr	r0, [r7, #4]
 800c7f0:	f000 f9e4 	bl	800cbbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	2200      	movs	r2, #0
 800c7f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	691b      	ldr	r3, [r3, #16]
 800c800:	f003 0301 	and.w	r3, r3, #1
 800c804:	2b01      	cmp	r3, #1
 800c806:	d10e      	bne.n	800c826 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	68db      	ldr	r3, [r3, #12]
 800c80e:	f003 0301 	and.w	r3, r3, #1
 800c812:	2b01      	cmp	r3, #1
 800c814:	d107      	bne.n	800c826 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	f06f 0201 	mvn.w	r2, #1
 800c81e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c820:	6878      	ldr	r0, [r7, #4]
 800c822:	f000 f9ad 	bl	800cb80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	691b      	ldr	r3, [r3, #16]
 800c82c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c830:	2b80      	cmp	r3, #128	; 0x80
 800c832:	d10e      	bne.n	800c852 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	68db      	ldr	r3, [r3, #12]
 800c83a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c83e:	2b80      	cmp	r3, #128	; 0x80
 800c840:	d107      	bne.n	800c852 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c84a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c84c:	6878      	ldr	r0, [r7, #4]
 800c84e:	f000 fc5f 	bl	800d110 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	691b      	ldr	r3, [r3, #16]
 800c858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c85c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c860:	d10e      	bne.n	800c880 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	68db      	ldr	r3, [r3, #12]
 800c868:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c86c:	2b80      	cmp	r3, #128	; 0x80
 800c86e:	d107      	bne.n	800c880 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c878:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c87a:	6878      	ldr	r0, [r7, #4]
 800c87c:	f000 fc52 	bl	800d124 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	691b      	ldr	r3, [r3, #16]
 800c886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c88a:	2b40      	cmp	r3, #64	; 0x40
 800c88c:	d10e      	bne.n	800c8ac <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	68db      	ldr	r3, [r3, #12]
 800c894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c898:	2b40      	cmp	r3, #64	; 0x40
 800c89a:	d107      	bne.n	800c8ac <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c8a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c8a6:	6878      	ldr	r0, [r7, #4]
 800c8a8:	f000 f992 	bl	800cbd0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	691b      	ldr	r3, [r3, #16]
 800c8b2:	f003 0320 	and.w	r3, r3, #32
 800c8b6:	2b20      	cmp	r3, #32
 800c8b8:	d10e      	bne.n	800c8d8 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	68db      	ldr	r3, [r3, #12]
 800c8c0:	f003 0320 	and.w	r3, r3, #32
 800c8c4:	2b20      	cmp	r3, #32
 800c8c6:	d107      	bne.n	800c8d8 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	f06f 0220 	mvn.w	r2, #32
 800c8d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c8d2:	6878      	ldr	r0, [r7, #4]
 800c8d4:	f000 fc12 	bl	800d0fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	691b      	ldr	r3, [r3, #16]
 800c8de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c8e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c8e6:	d10f      	bne.n	800c908 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	68db      	ldr	r3, [r3, #12]
 800c8ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c8f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c8f6:	d107      	bne.n	800c908 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800c900:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800c902:	6878      	ldr	r0, [r7, #4]
 800c904:	f000 fc18 	bl	800d138 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	691b      	ldr	r3, [r3, #16]
 800c90e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c912:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c916:	d10f      	bne.n	800c938 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	68db      	ldr	r3, [r3, #12]
 800c91e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c922:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c926:	d107      	bne.n	800c938 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800c930:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800c932:	6878      	ldr	r0, [r7, #4]
 800c934:	f000 fc0a 	bl	800d14c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	691b      	ldr	r3, [r3, #16]
 800c93e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c942:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c946:	d10f      	bne.n	800c968 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	68db      	ldr	r3, [r3, #12]
 800c94e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c952:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c956:	d107      	bne.n	800c968 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800c960:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800c962:	6878      	ldr	r0, [r7, #4]
 800c964:	f000 fbfc 	bl	800d160 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	691b      	ldr	r3, [r3, #16]
 800c96e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c972:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c976:	d10f      	bne.n	800c998 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	68db      	ldr	r3, [r3, #12]
 800c97e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c982:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c986:	d107      	bne.n	800c998 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800c990:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800c992:	6878      	ldr	r0, [r7, #4]
 800c994:	f000 fbee 	bl	800d174 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c998:	bf00      	nop
 800c99a:	3708      	adds	r7, #8
 800c99c:	46bd      	mov	sp, r7
 800c99e:	bd80      	pop	{r7, pc}

0800c9a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c9a0:	b580      	push	{r7, lr}
 800c9a2:	b084      	sub	sp, #16
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	6078      	str	r0, [r7, #4]
 800c9a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c9b0:	2b01      	cmp	r3, #1
 800c9b2:	d101      	bne.n	800c9b8 <HAL_TIM_ConfigClockSource+0x18>
 800c9b4:	2302      	movs	r3, #2
 800c9b6:	e0d2      	b.n	800cb5e <HAL_TIM_ConfigClockSource+0x1be>
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	2201      	movs	r2, #1
 800c9bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	2202      	movs	r2, #2
 800c9c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	689b      	ldr	r3, [r3, #8]
 800c9ce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800c9d6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c9da:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c9e2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	68fa      	ldr	r2, [r7, #12]
 800c9ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c9ec:	683b      	ldr	r3, [r7, #0]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c9f4:	f000 80a9 	beq.w	800cb4a <HAL_TIM_ConfigClockSource+0x1aa>
 800c9f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c9fc:	d81a      	bhi.n	800ca34 <HAL_TIM_ConfigClockSource+0x94>
 800c9fe:	2b30      	cmp	r3, #48	; 0x30
 800ca00:	f000 809a 	beq.w	800cb38 <HAL_TIM_ConfigClockSource+0x198>
 800ca04:	2b30      	cmp	r3, #48	; 0x30
 800ca06:	d809      	bhi.n	800ca1c <HAL_TIM_ConfigClockSource+0x7c>
 800ca08:	2b10      	cmp	r3, #16
 800ca0a:	f000 8095 	beq.w	800cb38 <HAL_TIM_ConfigClockSource+0x198>
 800ca0e:	2b20      	cmp	r3, #32
 800ca10:	f000 8092 	beq.w	800cb38 <HAL_TIM_ConfigClockSource+0x198>
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	f000 808f 	beq.w	800cb38 <HAL_TIM_ConfigClockSource+0x198>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800ca1a:	e097      	b.n	800cb4c <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800ca1c:	2b50      	cmp	r3, #80	; 0x50
 800ca1e:	d05b      	beq.n	800cad8 <HAL_TIM_ConfigClockSource+0x138>
 800ca20:	2b50      	cmp	r3, #80	; 0x50
 800ca22:	d802      	bhi.n	800ca2a <HAL_TIM_ConfigClockSource+0x8a>
 800ca24:	2b40      	cmp	r3, #64	; 0x40
 800ca26:	d077      	beq.n	800cb18 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800ca28:	e090      	b.n	800cb4c <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800ca2a:	2b60      	cmp	r3, #96	; 0x60
 800ca2c:	d064      	beq.n	800caf8 <HAL_TIM_ConfigClockSource+0x158>
 800ca2e:	2b70      	cmp	r3, #112	; 0x70
 800ca30:	d028      	beq.n	800ca84 <HAL_TIM_ConfigClockSource+0xe4>
      break;
 800ca32:	e08b      	b.n	800cb4c <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800ca34:	4a4c      	ldr	r2, [pc, #304]	; (800cb68 <HAL_TIM_ConfigClockSource+0x1c8>)
 800ca36:	4293      	cmp	r3, r2
 800ca38:	d07e      	beq.n	800cb38 <HAL_TIM_ConfigClockSource+0x198>
 800ca3a:	4a4b      	ldr	r2, [pc, #300]	; (800cb68 <HAL_TIM_ConfigClockSource+0x1c8>)
 800ca3c:	4293      	cmp	r3, r2
 800ca3e:	d810      	bhi.n	800ca62 <HAL_TIM_ConfigClockSource+0xc2>
 800ca40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ca44:	d078      	beq.n	800cb38 <HAL_TIM_ConfigClockSource+0x198>
 800ca46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ca4a:	d803      	bhi.n	800ca54 <HAL_TIM_ConfigClockSource+0xb4>
 800ca4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ca50:	d02f      	beq.n	800cab2 <HAL_TIM_ConfigClockSource+0x112>
      break;
 800ca52:	e07b      	b.n	800cb4c <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800ca54:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ca58:	d06e      	beq.n	800cb38 <HAL_TIM_ConfigClockSource+0x198>
 800ca5a:	4a44      	ldr	r2, [pc, #272]	; (800cb6c <HAL_TIM_ConfigClockSource+0x1cc>)
 800ca5c:	4293      	cmp	r3, r2
 800ca5e:	d06b      	beq.n	800cb38 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800ca60:	e074      	b.n	800cb4c <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800ca62:	4a43      	ldr	r2, [pc, #268]	; (800cb70 <HAL_TIM_ConfigClockSource+0x1d0>)
 800ca64:	4293      	cmp	r3, r2
 800ca66:	d067      	beq.n	800cb38 <HAL_TIM_ConfigClockSource+0x198>
 800ca68:	4a41      	ldr	r2, [pc, #260]	; (800cb70 <HAL_TIM_ConfigClockSource+0x1d0>)
 800ca6a:	4293      	cmp	r3, r2
 800ca6c:	d803      	bhi.n	800ca76 <HAL_TIM_ConfigClockSource+0xd6>
 800ca6e:	4a41      	ldr	r2, [pc, #260]	; (800cb74 <HAL_TIM_ConfigClockSource+0x1d4>)
 800ca70:	4293      	cmp	r3, r2
 800ca72:	d061      	beq.n	800cb38 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800ca74:	e06a      	b.n	800cb4c <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800ca76:	4a40      	ldr	r2, [pc, #256]	; (800cb78 <HAL_TIM_ConfigClockSource+0x1d8>)
 800ca78:	4293      	cmp	r3, r2
 800ca7a:	d05d      	beq.n	800cb38 <HAL_TIM_ConfigClockSource+0x198>
 800ca7c:	4a3f      	ldr	r2, [pc, #252]	; (800cb7c <HAL_TIM_ConfigClockSource+0x1dc>)
 800ca7e:	4293      	cmp	r3, r2
 800ca80:	d05a      	beq.n	800cb38 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800ca82:	e063      	b.n	800cb4c <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	6818      	ldr	r0, [r3, #0]
 800ca88:	683b      	ldr	r3, [r7, #0]
 800ca8a:	6899      	ldr	r1, [r3, #8]
 800ca8c:	683b      	ldr	r3, [r7, #0]
 800ca8e:	685a      	ldr	r2, [r3, #4]
 800ca90:	683b      	ldr	r3, [r7, #0]
 800ca92:	68db      	ldr	r3, [r3, #12]
 800ca94:	f000 f9ca 	bl	800ce2c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	689b      	ldr	r3, [r3, #8]
 800ca9e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800caa6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	68fa      	ldr	r2, [r7, #12]
 800caae:	609a      	str	r2, [r3, #8]
      break;
 800cab0:	e04c      	b.n	800cb4c <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	6818      	ldr	r0, [r3, #0]
 800cab6:	683b      	ldr	r3, [r7, #0]
 800cab8:	6899      	ldr	r1, [r3, #8]
 800caba:	683b      	ldr	r3, [r7, #0]
 800cabc:	685a      	ldr	r2, [r3, #4]
 800cabe:	683b      	ldr	r3, [r7, #0]
 800cac0:	68db      	ldr	r3, [r3, #12]
 800cac2:	f000 f9b3 	bl	800ce2c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	689a      	ldr	r2, [r3, #8]
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800cad4:	609a      	str	r2, [r3, #8]
      break;
 800cad6:	e039      	b.n	800cb4c <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	6818      	ldr	r0, [r3, #0]
 800cadc:	683b      	ldr	r3, [r7, #0]
 800cade:	6859      	ldr	r1, [r3, #4]
 800cae0:	683b      	ldr	r3, [r7, #0]
 800cae2:	68db      	ldr	r3, [r3, #12]
 800cae4:	461a      	mov	r2, r3
 800cae6:	f000 f925 	bl	800cd34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	2150      	movs	r1, #80	; 0x50
 800caf0:	4618      	mov	r0, r3
 800caf2:	f000 f97e 	bl	800cdf2 <TIM_ITRx_SetConfig>
      break;
 800caf6:	e029      	b.n	800cb4c <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	6818      	ldr	r0, [r3, #0]
 800cafc:	683b      	ldr	r3, [r7, #0]
 800cafe:	6859      	ldr	r1, [r3, #4]
 800cb00:	683b      	ldr	r3, [r7, #0]
 800cb02:	68db      	ldr	r3, [r3, #12]
 800cb04:	461a      	mov	r2, r3
 800cb06:	f000 f944 	bl	800cd92 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	2160      	movs	r1, #96	; 0x60
 800cb10:	4618      	mov	r0, r3
 800cb12:	f000 f96e 	bl	800cdf2 <TIM_ITRx_SetConfig>
      break;
 800cb16:	e019      	b.n	800cb4c <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	6818      	ldr	r0, [r3, #0]
 800cb1c:	683b      	ldr	r3, [r7, #0]
 800cb1e:	6859      	ldr	r1, [r3, #4]
 800cb20:	683b      	ldr	r3, [r7, #0]
 800cb22:	68db      	ldr	r3, [r3, #12]
 800cb24:	461a      	mov	r2, r3
 800cb26:	f000 f905 	bl	800cd34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	2140      	movs	r1, #64	; 0x40
 800cb30:	4618      	mov	r0, r3
 800cb32:	f000 f95e 	bl	800cdf2 <TIM_ITRx_SetConfig>
      break;
 800cb36:	e009      	b.n	800cb4c <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	681a      	ldr	r2, [r3, #0]
 800cb3c:	683b      	ldr	r3, [r7, #0]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	4619      	mov	r1, r3
 800cb42:	4610      	mov	r0, r2
 800cb44:	f000 f955 	bl	800cdf2 <TIM_ITRx_SetConfig>
      break;
 800cb48:	e000      	b.n	800cb4c <HAL_TIM_ConfigClockSource+0x1ac>
      break;
 800cb4a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	2201      	movs	r2, #1
 800cb50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	2200      	movs	r2, #0
 800cb58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cb5c:	2300      	movs	r3, #0
}
 800cb5e:	4618      	mov	r0, r3
 800cb60:	3710      	adds	r7, #16
 800cb62:	46bd      	mov	sp, r7
 800cb64:	bd80      	pop	{r7, pc}
 800cb66:	bf00      	nop
 800cb68:	00100030 	.word	0x00100030
 800cb6c:	00100020 	.word	0x00100020
 800cb70:	00100050 	.word	0x00100050
 800cb74:	00100040 	.word	0x00100040
 800cb78:	00100060 	.word	0x00100060
 800cb7c:	00100070 	.word	0x00100070

0800cb80 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cb80:	b480      	push	{r7}
 800cb82:	b083      	sub	sp, #12
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800cb88:	bf00      	nop
 800cb8a:	370c      	adds	r7, #12
 800cb8c:	46bd      	mov	sp, r7
 800cb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb92:	4770      	bx	lr

0800cb94 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cb94:	b480      	push	{r7}
 800cb96:	b083      	sub	sp, #12
 800cb98:	af00      	add	r7, sp, #0
 800cb9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800cb9c:	bf00      	nop
 800cb9e:	370c      	adds	r7, #12
 800cba0:	46bd      	mov	sp, r7
 800cba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba6:	4770      	bx	lr

0800cba8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800cba8:	b480      	push	{r7}
 800cbaa:	b083      	sub	sp, #12
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800cbb0:	bf00      	nop
 800cbb2:	370c      	adds	r7, #12
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbba:	4770      	bx	lr

0800cbbc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cbbc:	b480      	push	{r7}
 800cbbe:	b083      	sub	sp, #12
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cbc4:	bf00      	nop
 800cbc6:	370c      	adds	r7, #12
 800cbc8:	46bd      	mov	sp, r7
 800cbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbce:	4770      	bx	lr

0800cbd0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cbd0:	b480      	push	{r7}
 800cbd2:	b083      	sub	sp, #12
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cbd8:	bf00      	nop
 800cbda:	370c      	adds	r7, #12
 800cbdc:	46bd      	mov	sp, r7
 800cbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe2:	4770      	bx	lr

0800cbe4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800cbe4:	b480      	push	{r7}
 800cbe6:	b085      	sub	sp, #20
 800cbe8:	af00      	add	r7, sp, #0
 800cbea:	6078      	str	r0, [r7, #4]
 800cbec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	4a46      	ldr	r2, [pc, #280]	; (800cd10 <TIM_Base_SetConfig+0x12c>)
 800cbf8:	4293      	cmp	r3, r2
 800cbfa:	d017      	beq.n	800cc2c <TIM_Base_SetConfig+0x48>
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cc02:	d013      	beq.n	800cc2c <TIM_Base_SetConfig+0x48>
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	4a43      	ldr	r2, [pc, #268]	; (800cd14 <TIM_Base_SetConfig+0x130>)
 800cc08:	4293      	cmp	r3, r2
 800cc0a:	d00f      	beq.n	800cc2c <TIM_Base_SetConfig+0x48>
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	4a42      	ldr	r2, [pc, #264]	; (800cd18 <TIM_Base_SetConfig+0x134>)
 800cc10:	4293      	cmp	r3, r2
 800cc12:	d00b      	beq.n	800cc2c <TIM_Base_SetConfig+0x48>
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	4a41      	ldr	r2, [pc, #260]	; (800cd1c <TIM_Base_SetConfig+0x138>)
 800cc18:	4293      	cmp	r3, r2
 800cc1a:	d007      	beq.n	800cc2c <TIM_Base_SetConfig+0x48>
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	4a40      	ldr	r2, [pc, #256]	; (800cd20 <TIM_Base_SetConfig+0x13c>)
 800cc20:	4293      	cmp	r3, r2
 800cc22:	d003      	beq.n	800cc2c <TIM_Base_SetConfig+0x48>
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	4a3f      	ldr	r2, [pc, #252]	; (800cd24 <TIM_Base_SetConfig+0x140>)
 800cc28:	4293      	cmp	r3, r2
 800cc2a:	d108      	bne.n	800cc3e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cc32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cc34:	683b      	ldr	r3, [r7, #0]
 800cc36:	685b      	ldr	r3, [r3, #4]
 800cc38:	68fa      	ldr	r2, [r7, #12]
 800cc3a:	4313      	orrs	r3, r2
 800cc3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	4a33      	ldr	r2, [pc, #204]	; (800cd10 <TIM_Base_SetConfig+0x12c>)
 800cc42:	4293      	cmp	r3, r2
 800cc44:	d023      	beq.n	800cc8e <TIM_Base_SetConfig+0xaa>
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cc4c:	d01f      	beq.n	800cc8e <TIM_Base_SetConfig+0xaa>
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	4a30      	ldr	r2, [pc, #192]	; (800cd14 <TIM_Base_SetConfig+0x130>)
 800cc52:	4293      	cmp	r3, r2
 800cc54:	d01b      	beq.n	800cc8e <TIM_Base_SetConfig+0xaa>
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	4a2f      	ldr	r2, [pc, #188]	; (800cd18 <TIM_Base_SetConfig+0x134>)
 800cc5a:	4293      	cmp	r3, r2
 800cc5c:	d017      	beq.n	800cc8e <TIM_Base_SetConfig+0xaa>
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	4a2e      	ldr	r2, [pc, #184]	; (800cd1c <TIM_Base_SetConfig+0x138>)
 800cc62:	4293      	cmp	r3, r2
 800cc64:	d013      	beq.n	800cc8e <TIM_Base_SetConfig+0xaa>
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	4a2d      	ldr	r2, [pc, #180]	; (800cd20 <TIM_Base_SetConfig+0x13c>)
 800cc6a:	4293      	cmp	r3, r2
 800cc6c:	d00f      	beq.n	800cc8e <TIM_Base_SetConfig+0xaa>
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	4a2d      	ldr	r2, [pc, #180]	; (800cd28 <TIM_Base_SetConfig+0x144>)
 800cc72:	4293      	cmp	r3, r2
 800cc74:	d00b      	beq.n	800cc8e <TIM_Base_SetConfig+0xaa>
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	4a2c      	ldr	r2, [pc, #176]	; (800cd2c <TIM_Base_SetConfig+0x148>)
 800cc7a:	4293      	cmp	r3, r2
 800cc7c:	d007      	beq.n	800cc8e <TIM_Base_SetConfig+0xaa>
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	4a2b      	ldr	r2, [pc, #172]	; (800cd30 <TIM_Base_SetConfig+0x14c>)
 800cc82:	4293      	cmp	r3, r2
 800cc84:	d003      	beq.n	800cc8e <TIM_Base_SetConfig+0xaa>
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	4a26      	ldr	r2, [pc, #152]	; (800cd24 <TIM_Base_SetConfig+0x140>)
 800cc8a:	4293      	cmp	r3, r2
 800cc8c:	d108      	bne.n	800cca0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cc94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cc96:	683b      	ldr	r3, [r7, #0]
 800cc98:	68db      	ldr	r3, [r3, #12]
 800cc9a:	68fa      	ldr	r2, [r7, #12]
 800cc9c:	4313      	orrs	r3, r2
 800cc9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800cca6:	683b      	ldr	r3, [r7, #0]
 800cca8:	695b      	ldr	r3, [r3, #20]
 800ccaa:	4313      	orrs	r3, r2
 800ccac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	68fa      	ldr	r2, [r7, #12]
 800ccb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ccb4:	683b      	ldr	r3, [r7, #0]
 800ccb6:	689a      	ldr	r2, [r3, #8]
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ccbc:	683b      	ldr	r3, [r7, #0]
 800ccbe:	681a      	ldr	r2, [r3, #0]
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	4a12      	ldr	r2, [pc, #72]	; (800cd10 <TIM_Base_SetConfig+0x12c>)
 800ccc8:	4293      	cmp	r3, r2
 800ccca:	d013      	beq.n	800ccf4 <TIM_Base_SetConfig+0x110>
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	4a14      	ldr	r2, [pc, #80]	; (800cd20 <TIM_Base_SetConfig+0x13c>)
 800ccd0:	4293      	cmp	r3, r2
 800ccd2:	d00f      	beq.n	800ccf4 <TIM_Base_SetConfig+0x110>
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	4a14      	ldr	r2, [pc, #80]	; (800cd28 <TIM_Base_SetConfig+0x144>)
 800ccd8:	4293      	cmp	r3, r2
 800ccda:	d00b      	beq.n	800ccf4 <TIM_Base_SetConfig+0x110>
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	4a13      	ldr	r2, [pc, #76]	; (800cd2c <TIM_Base_SetConfig+0x148>)
 800cce0:	4293      	cmp	r3, r2
 800cce2:	d007      	beq.n	800ccf4 <TIM_Base_SetConfig+0x110>
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	4a12      	ldr	r2, [pc, #72]	; (800cd30 <TIM_Base_SetConfig+0x14c>)
 800cce8:	4293      	cmp	r3, r2
 800ccea:	d003      	beq.n	800ccf4 <TIM_Base_SetConfig+0x110>
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	4a0d      	ldr	r2, [pc, #52]	; (800cd24 <TIM_Base_SetConfig+0x140>)
 800ccf0:	4293      	cmp	r3, r2
 800ccf2:	d103      	bne.n	800ccfc <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ccf4:	683b      	ldr	r3, [r7, #0]
 800ccf6:	691a      	ldr	r2, [r3, #16]
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	2201      	movs	r2, #1
 800cd00:	615a      	str	r2, [r3, #20]
}
 800cd02:	bf00      	nop
 800cd04:	3714      	adds	r7, #20
 800cd06:	46bd      	mov	sp, r7
 800cd08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd0c:	4770      	bx	lr
 800cd0e:	bf00      	nop
 800cd10:	40012c00 	.word	0x40012c00
 800cd14:	40000400 	.word	0x40000400
 800cd18:	40000800 	.word	0x40000800
 800cd1c:	40000c00 	.word	0x40000c00
 800cd20:	40013400 	.word	0x40013400
 800cd24:	40015000 	.word	0x40015000
 800cd28:	40014000 	.word	0x40014000
 800cd2c:	40014400 	.word	0x40014400
 800cd30:	40014800 	.word	0x40014800

0800cd34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cd34:	b480      	push	{r7}
 800cd36:	b087      	sub	sp, #28
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	60f8      	str	r0, [r7, #12]
 800cd3c:	60b9      	str	r1, [r7, #8]
 800cd3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	6a1b      	ldr	r3, [r3, #32]
 800cd44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	6a1b      	ldr	r3, [r3, #32]
 800cd4a:	f023 0201 	bic.w	r2, r3, #1
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	699b      	ldr	r3, [r3, #24]
 800cd56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cd58:	693b      	ldr	r3, [r7, #16]
 800cd5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cd5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	011b      	lsls	r3, r3, #4
 800cd64:	693a      	ldr	r2, [r7, #16]
 800cd66:	4313      	orrs	r3, r2
 800cd68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cd6a:	697b      	ldr	r3, [r7, #20]
 800cd6c:	f023 030a 	bic.w	r3, r3, #10
 800cd70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cd72:	697a      	ldr	r2, [r7, #20]
 800cd74:	68bb      	ldr	r3, [r7, #8]
 800cd76:	4313      	orrs	r3, r2
 800cd78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	693a      	ldr	r2, [r7, #16]
 800cd7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	697a      	ldr	r2, [r7, #20]
 800cd84:	621a      	str	r2, [r3, #32]
}
 800cd86:	bf00      	nop
 800cd88:	371c      	adds	r7, #28
 800cd8a:	46bd      	mov	sp, r7
 800cd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd90:	4770      	bx	lr

0800cd92 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cd92:	b480      	push	{r7}
 800cd94:	b087      	sub	sp, #28
 800cd96:	af00      	add	r7, sp, #0
 800cd98:	60f8      	str	r0, [r7, #12]
 800cd9a:	60b9      	str	r1, [r7, #8]
 800cd9c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	6a1b      	ldr	r3, [r3, #32]
 800cda2:	f023 0210 	bic.w	r2, r3, #16
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	699b      	ldr	r3, [r3, #24]
 800cdae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	6a1b      	ldr	r3, [r3, #32]
 800cdb4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cdb6:	697b      	ldr	r3, [r7, #20]
 800cdb8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800cdbc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	031b      	lsls	r3, r3, #12
 800cdc2:	697a      	ldr	r2, [r7, #20]
 800cdc4:	4313      	orrs	r3, r2
 800cdc6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cdc8:	693b      	ldr	r3, [r7, #16]
 800cdca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800cdce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cdd0:	68bb      	ldr	r3, [r7, #8]
 800cdd2:	011b      	lsls	r3, r3, #4
 800cdd4:	693a      	ldr	r2, [r7, #16]
 800cdd6:	4313      	orrs	r3, r2
 800cdd8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	697a      	ldr	r2, [r7, #20]
 800cdde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	693a      	ldr	r2, [r7, #16]
 800cde4:	621a      	str	r2, [r3, #32]
}
 800cde6:	bf00      	nop
 800cde8:	371c      	adds	r7, #28
 800cdea:	46bd      	mov	sp, r7
 800cdec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf0:	4770      	bx	lr

0800cdf2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800cdf2:	b480      	push	{r7}
 800cdf4:	b085      	sub	sp, #20
 800cdf6:	af00      	add	r7, sp, #0
 800cdf8:	6078      	str	r0, [r7, #4]
 800cdfa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	689b      	ldr	r3, [r3, #8]
 800ce00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800ce08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ce0c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ce0e:	683a      	ldr	r2, [r7, #0]
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	4313      	orrs	r3, r2
 800ce14:	f043 0307 	orr.w	r3, r3, #7
 800ce18:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	68fa      	ldr	r2, [r7, #12]
 800ce1e:	609a      	str	r2, [r3, #8]
}
 800ce20:	bf00      	nop
 800ce22:	3714      	adds	r7, #20
 800ce24:	46bd      	mov	sp, r7
 800ce26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce2a:	4770      	bx	lr

0800ce2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ce2c:	b480      	push	{r7}
 800ce2e:	b087      	sub	sp, #28
 800ce30:	af00      	add	r7, sp, #0
 800ce32:	60f8      	str	r0, [r7, #12]
 800ce34:	60b9      	str	r1, [r7, #8]
 800ce36:	607a      	str	r2, [r7, #4]
 800ce38:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	689b      	ldr	r3, [r3, #8]
 800ce3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ce40:	697b      	ldr	r3, [r7, #20]
 800ce42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ce46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ce48:	683b      	ldr	r3, [r7, #0]
 800ce4a:	021a      	lsls	r2, r3, #8
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	431a      	orrs	r2, r3
 800ce50:	68bb      	ldr	r3, [r7, #8]
 800ce52:	4313      	orrs	r3, r2
 800ce54:	697a      	ldr	r2, [r7, #20]
 800ce56:	4313      	orrs	r3, r2
 800ce58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	697a      	ldr	r2, [r7, #20]
 800ce5e:	609a      	str	r2, [r3, #8]
}
 800ce60:	bf00      	nop
 800ce62:	371c      	adds	r7, #28
 800ce64:	46bd      	mov	sp, r7
 800ce66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce6a:	4770      	bx	lr

0800ce6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ce6c:	b480      	push	{r7}
 800ce6e:	b085      	sub	sp, #20
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	6078      	str	r0, [r7, #4]
 800ce74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ce7c:	2b01      	cmp	r3, #1
 800ce7e:	d101      	bne.n	800ce84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ce80:	2302      	movs	r3, #2
 800ce82:	e074      	b.n	800cf6e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	2201      	movs	r2, #1
 800ce88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	2202      	movs	r2, #2
 800ce90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	685b      	ldr	r3, [r3, #4]
 800ce9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	689b      	ldr	r3, [r3, #8]
 800cea2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	4a34      	ldr	r2, [pc, #208]	; (800cf7c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ceaa:	4293      	cmp	r3, r2
 800ceac:	d009      	beq.n	800cec2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	4a33      	ldr	r2, [pc, #204]	; (800cf80 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ceb4:	4293      	cmp	r3, r2
 800ceb6:	d004      	beq.n	800cec2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	4a31      	ldr	r2, [pc, #196]	; (800cf84 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800cebe:	4293      	cmp	r3, r2
 800cec0:	d108      	bne.n	800ced4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800cec8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ceca:	683b      	ldr	r3, [r7, #0]
 800cecc:	685b      	ldr	r3, [r3, #4]
 800cece:	68fa      	ldr	r2, [r7, #12]
 800ced0:	4313      	orrs	r3, r2
 800ced2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800ceda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cede:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cee0:	683b      	ldr	r3, [r7, #0]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	68fa      	ldr	r2, [r7, #12]
 800cee6:	4313      	orrs	r3, r2
 800cee8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	68fa      	ldr	r2, [r7, #12]
 800cef0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	4a21      	ldr	r2, [pc, #132]	; (800cf7c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800cef8:	4293      	cmp	r3, r2
 800cefa:	d022      	beq.n	800cf42 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cf04:	d01d      	beq.n	800cf42 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	4a1f      	ldr	r2, [pc, #124]	; (800cf88 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800cf0c:	4293      	cmp	r3, r2
 800cf0e:	d018      	beq.n	800cf42 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	4a1d      	ldr	r2, [pc, #116]	; (800cf8c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800cf16:	4293      	cmp	r3, r2
 800cf18:	d013      	beq.n	800cf42 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	4a1c      	ldr	r2, [pc, #112]	; (800cf90 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800cf20:	4293      	cmp	r3, r2
 800cf22:	d00e      	beq.n	800cf42 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	4a15      	ldr	r2, [pc, #84]	; (800cf80 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800cf2a:	4293      	cmp	r3, r2
 800cf2c:	d009      	beq.n	800cf42 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	4a18      	ldr	r2, [pc, #96]	; (800cf94 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800cf34:	4293      	cmp	r3, r2
 800cf36:	d004      	beq.n	800cf42 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	4a11      	ldr	r2, [pc, #68]	; (800cf84 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800cf3e:	4293      	cmp	r3, r2
 800cf40:	d10c      	bne.n	800cf5c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cf42:	68bb      	ldr	r3, [r7, #8]
 800cf44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cf48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cf4a:	683b      	ldr	r3, [r7, #0]
 800cf4c:	689b      	ldr	r3, [r3, #8]
 800cf4e:	68ba      	ldr	r2, [r7, #8]
 800cf50:	4313      	orrs	r3, r2
 800cf52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	68ba      	ldr	r2, [r7, #8]
 800cf5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	2201      	movs	r2, #1
 800cf60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	2200      	movs	r2, #0
 800cf68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cf6c:	2300      	movs	r3, #0
}
 800cf6e:	4618      	mov	r0, r3
 800cf70:	3714      	adds	r7, #20
 800cf72:	46bd      	mov	sp, r7
 800cf74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf78:	4770      	bx	lr
 800cf7a:	bf00      	nop
 800cf7c:	40012c00 	.word	0x40012c00
 800cf80:	40013400 	.word	0x40013400
 800cf84:	40015000 	.word	0x40015000
 800cf88:	40000400 	.word	0x40000400
 800cf8c:	40000800 	.word	0x40000800
 800cf90:	40000c00 	.word	0x40000c00
 800cf94:	40014000 	.word	0x40014000

0800cf98 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800cf98:	b480      	push	{r7}
 800cf9a:	b085      	sub	sp, #20
 800cf9c:	af00      	add	r7, sp, #0
 800cf9e:	6078      	str	r0, [r7, #4]
 800cfa0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cfac:	2b01      	cmp	r3, #1
 800cfae:	d101      	bne.n	800cfb4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800cfb0:	2302      	movs	r3, #2
 800cfb2:	e096      	b.n	800d0e2 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	2201      	movs	r2, #1
 800cfb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800cfc2:	683b      	ldr	r3, [r7, #0]
 800cfc4:	68db      	ldr	r3, [r3, #12]
 800cfc6:	4313      	orrs	r3, r2
 800cfc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800cfd0:	683b      	ldr	r3, [r7, #0]
 800cfd2:	689b      	ldr	r3, [r3, #8]
 800cfd4:	4313      	orrs	r3, r2
 800cfd6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800cfde:	683b      	ldr	r3, [r7, #0]
 800cfe0:	685b      	ldr	r3, [r3, #4]
 800cfe2:	4313      	orrs	r3, r2
 800cfe4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800cfec:	683b      	ldr	r3, [r7, #0]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	4313      	orrs	r3, r2
 800cff2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cffa:	683b      	ldr	r3, [r7, #0]
 800cffc:	691b      	ldr	r3, [r3, #16]
 800cffe:	4313      	orrs	r3, r2
 800d000:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800d008:	683b      	ldr	r3, [r7, #0]
 800d00a:	695b      	ldr	r3, [r3, #20]
 800d00c:	4313      	orrs	r3, r2
 800d00e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800d016:	683b      	ldr	r3, [r7, #0]
 800d018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d01a:	4313      	orrs	r3, r2
 800d01c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800d024:	683b      	ldr	r3, [r7, #0]
 800d026:	699b      	ldr	r3, [r3, #24]
 800d028:	041b      	lsls	r3, r3, #16
 800d02a:	4313      	orrs	r3, r2
 800d02c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	4a2f      	ldr	r2, [pc, #188]	; (800d0f0 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800d034:	4293      	cmp	r3, r2
 800d036:	d009      	beq.n	800d04c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	4a2d      	ldr	r2, [pc, #180]	; (800d0f4 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800d03e:	4293      	cmp	r3, r2
 800d040:	d004      	beq.n	800d04c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	4a2c      	ldr	r2, [pc, #176]	; (800d0f8 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800d048:	4293      	cmp	r3, r2
 800d04a:	d106      	bne.n	800d05a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800d052:	683b      	ldr	r3, [r7, #0]
 800d054:	69db      	ldr	r3, [r3, #28]
 800d056:	4313      	orrs	r3, r2
 800d058:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	4a24      	ldr	r2, [pc, #144]	; (800d0f0 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800d060:	4293      	cmp	r3, r2
 800d062:	d009      	beq.n	800d078 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	4a22      	ldr	r2, [pc, #136]	; (800d0f4 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800d06a:	4293      	cmp	r3, r2
 800d06c:	d004      	beq.n	800d078 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	4a21      	ldr	r2, [pc, #132]	; (800d0f8 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800d074:	4293      	cmp	r3, r2
 800d076:	d12b      	bne.n	800d0d0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800d07e:	683b      	ldr	r3, [r7, #0]
 800d080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d082:	051b      	lsls	r3, r3, #20
 800d084:	4313      	orrs	r3, r2
 800d086:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800d08e:	683b      	ldr	r3, [r7, #0]
 800d090:	6a1b      	ldr	r3, [r3, #32]
 800d092:	4313      	orrs	r3, r2
 800d094:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800d09c:	683b      	ldr	r3, [r7, #0]
 800d09e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0a0:	4313      	orrs	r3, r2
 800d0a2:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	4a11      	ldr	r2, [pc, #68]	; (800d0f0 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800d0aa:	4293      	cmp	r3, r2
 800d0ac:	d009      	beq.n	800d0c2 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	4a10      	ldr	r2, [pc, #64]	; (800d0f4 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800d0b4:	4293      	cmp	r3, r2
 800d0b6:	d004      	beq.n	800d0c2 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	4a0e      	ldr	r2, [pc, #56]	; (800d0f8 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800d0be:	4293      	cmp	r3, r2
 800d0c0:	d106      	bne.n	800d0d0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800d0c8:	683b      	ldr	r3, [r7, #0]
 800d0ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0cc:	4313      	orrs	r3, r2
 800d0ce:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	68fa      	ldr	r2, [r7, #12]
 800d0d6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	2200      	movs	r2, #0
 800d0dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d0e0:	2300      	movs	r3, #0
}
 800d0e2:	4618      	mov	r0, r3
 800d0e4:	3714      	adds	r7, #20
 800d0e6:	46bd      	mov	sp, r7
 800d0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ec:	4770      	bx	lr
 800d0ee:	bf00      	nop
 800d0f0:	40012c00 	.word	0x40012c00
 800d0f4:	40013400 	.word	0x40013400
 800d0f8:	40015000 	.word	0x40015000

0800d0fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d0fc:	b480      	push	{r7}
 800d0fe:	b083      	sub	sp, #12
 800d100:	af00      	add	r7, sp, #0
 800d102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d104:	bf00      	nop
 800d106:	370c      	adds	r7, #12
 800d108:	46bd      	mov	sp, r7
 800d10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d10e:	4770      	bx	lr

0800d110 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d110:	b480      	push	{r7}
 800d112:	b083      	sub	sp, #12
 800d114:	af00      	add	r7, sp, #0
 800d116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d118:	bf00      	nop
 800d11a:	370c      	adds	r7, #12
 800d11c:	46bd      	mov	sp, r7
 800d11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d122:	4770      	bx	lr

0800d124 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d124:	b480      	push	{r7}
 800d126:	b083      	sub	sp, #12
 800d128:	af00      	add	r7, sp, #0
 800d12a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d12c:	bf00      	nop
 800d12e:	370c      	adds	r7, #12
 800d130:	46bd      	mov	sp, r7
 800d132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d136:	4770      	bx	lr

0800d138 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800d138:	b480      	push	{r7}
 800d13a:	b083      	sub	sp, #12
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800d140:	bf00      	nop
 800d142:	370c      	adds	r7, #12
 800d144:	46bd      	mov	sp, r7
 800d146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d14a:	4770      	bx	lr

0800d14c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800d14c:	b480      	push	{r7}
 800d14e:	b083      	sub	sp, #12
 800d150:	af00      	add	r7, sp, #0
 800d152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800d154:	bf00      	nop
 800d156:	370c      	adds	r7, #12
 800d158:	46bd      	mov	sp, r7
 800d15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d15e:	4770      	bx	lr

0800d160 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800d160:	b480      	push	{r7}
 800d162:	b083      	sub	sp, #12
 800d164:	af00      	add	r7, sp, #0
 800d166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800d168:	bf00      	nop
 800d16a:	370c      	adds	r7, #12
 800d16c:	46bd      	mov	sp, r7
 800d16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d172:	4770      	bx	lr

0800d174 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800d174:	b480      	push	{r7}
 800d176:	b083      	sub	sp, #12
 800d178:	af00      	add	r7, sp, #0
 800d17a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800d17c:	bf00      	nop
 800d17e:	370c      	adds	r7, #12
 800d180:	46bd      	mov	sp, r7
 800d182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d186:	4770      	bx	lr

0800d188 <LL_EXTI_EnableIT_0_31>:
{
 800d188:	b480      	push	{r7}
 800d18a:	b083      	sub	sp, #12
 800d18c:	af00      	add	r7, sp, #0
 800d18e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800d190:	4b05      	ldr	r3, [pc, #20]	; (800d1a8 <LL_EXTI_EnableIT_0_31+0x20>)
 800d192:	681a      	ldr	r2, [r3, #0]
 800d194:	4904      	ldr	r1, [pc, #16]	; (800d1a8 <LL_EXTI_EnableIT_0_31+0x20>)
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	4313      	orrs	r3, r2
 800d19a:	600b      	str	r3, [r1, #0]
}
 800d19c:	bf00      	nop
 800d19e:	370c      	adds	r7, #12
 800d1a0:	46bd      	mov	sp, r7
 800d1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a6:	4770      	bx	lr
 800d1a8:	40010400 	.word	0x40010400

0800d1ac <LL_EXTI_EnableIT_32_63>:
{
 800d1ac:	b480      	push	{r7}
 800d1ae:	b083      	sub	sp, #12
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800d1b4:	4b05      	ldr	r3, [pc, #20]	; (800d1cc <LL_EXTI_EnableIT_32_63+0x20>)
 800d1b6:	6a1a      	ldr	r2, [r3, #32]
 800d1b8:	4904      	ldr	r1, [pc, #16]	; (800d1cc <LL_EXTI_EnableIT_32_63+0x20>)
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	4313      	orrs	r3, r2
 800d1be:	620b      	str	r3, [r1, #32]
}
 800d1c0:	bf00      	nop
 800d1c2:	370c      	adds	r7, #12
 800d1c4:	46bd      	mov	sp, r7
 800d1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ca:	4770      	bx	lr
 800d1cc:	40010400 	.word	0x40010400

0800d1d0 <LL_EXTI_DisableIT_0_31>:
{
 800d1d0:	b480      	push	{r7}
 800d1d2:	b083      	sub	sp, #12
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800d1d8:	4b06      	ldr	r3, [pc, #24]	; (800d1f4 <LL_EXTI_DisableIT_0_31+0x24>)
 800d1da:	681a      	ldr	r2, [r3, #0]
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	43db      	mvns	r3, r3
 800d1e0:	4904      	ldr	r1, [pc, #16]	; (800d1f4 <LL_EXTI_DisableIT_0_31+0x24>)
 800d1e2:	4013      	ands	r3, r2
 800d1e4:	600b      	str	r3, [r1, #0]
}
 800d1e6:	bf00      	nop
 800d1e8:	370c      	adds	r7, #12
 800d1ea:	46bd      	mov	sp, r7
 800d1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f0:	4770      	bx	lr
 800d1f2:	bf00      	nop
 800d1f4:	40010400 	.word	0x40010400

0800d1f8 <LL_EXTI_DisableIT_32_63>:
{
 800d1f8:	b480      	push	{r7}
 800d1fa:	b083      	sub	sp, #12
 800d1fc:	af00      	add	r7, sp, #0
 800d1fe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 800d200:	4b06      	ldr	r3, [pc, #24]	; (800d21c <LL_EXTI_DisableIT_32_63+0x24>)
 800d202:	6a1a      	ldr	r2, [r3, #32]
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	43db      	mvns	r3, r3
 800d208:	4904      	ldr	r1, [pc, #16]	; (800d21c <LL_EXTI_DisableIT_32_63+0x24>)
 800d20a:	4013      	ands	r3, r2
 800d20c:	620b      	str	r3, [r1, #32]
}
 800d20e:	bf00      	nop
 800d210:	370c      	adds	r7, #12
 800d212:	46bd      	mov	sp, r7
 800d214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d218:	4770      	bx	lr
 800d21a:	bf00      	nop
 800d21c:	40010400 	.word	0x40010400

0800d220 <LL_EXTI_EnableEvent_0_31>:
{
 800d220:	b480      	push	{r7}
 800d222:	b083      	sub	sp, #12
 800d224:	af00      	add	r7, sp, #0
 800d226:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 800d228:	4b05      	ldr	r3, [pc, #20]	; (800d240 <LL_EXTI_EnableEvent_0_31+0x20>)
 800d22a:	685a      	ldr	r2, [r3, #4]
 800d22c:	4904      	ldr	r1, [pc, #16]	; (800d240 <LL_EXTI_EnableEvent_0_31+0x20>)
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	4313      	orrs	r3, r2
 800d232:	604b      	str	r3, [r1, #4]
}
 800d234:	bf00      	nop
 800d236:	370c      	adds	r7, #12
 800d238:	46bd      	mov	sp, r7
 800d23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d23e:	4770      	bx	lr
 800d240:	40010400 	.word	0x40010400

0800d244 <LL_EXTI_EnableEvent_32_63>:
{
 800d244:	b480      	push	{r7}
 800d246:	b083      	sub	sp, #12
 800d248:	af00      	add	r7, sp, #0
 800d24a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 800d24c:	4b05      	ldr	r3, [pc, #20]	; (800d264 <LL_EXTI_EnableEvent_32_63+0x20>)
 800d24e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d250:	4904      	ldr	r1, [pc, #16]	; (800d264 <LL_EXTI_EnableEvent_32_63+0x20>)
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	4313      	orrs	r3, r2
 800d256:	624b      	str	r3, [r1, #36]	; 0x24
}
 800d258:	bf00      	nop
 800d25a:	370c      	adds	r7, #12
 800d25c:	46bd      	mov	sp, r7
 800d25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d262:	4770      	bx	lr
 800d264:	40010400 	.word	0x40010400

0800d268 <LL_EXTI_DisableEvent_0_31>:
{
 800d268:	b480      	push	{r7}
 800d26a:	b083      	sub	sp, #12
 800d26c:	af00      	add	r7, sp, #0
 800d26e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800d270:	4b06      	ldr	r3, [pc, #24]	; (800d28c <LL_EXTI_DisableEvent_0_31+0x24>)
 800d272:	685a      	ldr	r2, [r3, #4]
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	43db      	mvns	r3, r3
 800d278:	4904      	ldr	r1, [pc, #16]	; (800d28c <LL_EXTI_DisableEvent_0_31+0x24>)
 800d27a:	4013      	ands	r3, r2
 800d27c:	604b      	str	r3, [r1, #4]
}
 800d27e:	bf00      	nop
 800d280:	370c      	adds	r7, #12
 800d282:	46bd      	mov	sp, r7
 800d284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d288:	4770      	bx	lr
 800d28a:	bf00      	nop
 800d28c:	40010400 	.word	0x40010400

0800d290 <LL_EXTI_DisableEvent_32_63>:
{
 800d290:	b480      	push	{r7}
 800d292:	b083      	sub	sp, #12
 800d294:	af00      	add	r7, sp, #0
 800d296:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 800d298:	4b06      	ldr	r3, [pc, #24]	; (800d2b4 <LL_EXTI_DisableEvent_32_63+0x24>)
 800d29a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	43db      	mvns	r3, r3
 800d2a0:	4904      	ldr	r1, [pc, #16]	; (800d2b4 <LL_EXTI_DisableEvent_32_63+0x24>)
 800d2a2:	4013      	ands	r3, r2
 800d2a4:	624b      	str	r3, [r1, #36]	; 0x24
}
 800d2a6:	bf00      	nop
 800d2a8:	370c      	adds	r7, #12
 800d2aa:	46bd      	mov	sp, r7
 800d2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b0:	4770      	bx	lr
 800d2b2:	bf00      	nop
 800d2b4:	40010400 	.word	0x40010400

0800d2b8 <LL_EXTI_EnableRisingTrig_0_31>:
{
 800d2b8:	b480      	push	{r7}
 800d2ba:	b083      	sub	sp, #12
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800d2c0:	4b05      	ldr	r3, [pc, #20]	; (800d2d8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800d2c2:	689a      	ldr	r2, [r3, #8]
 800d2c4:	4904      	ldr	r1, [pc, #16]	; (800d2d8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	4313      	orrs	r3, r2
 800d2ca:	608b      	str	r3, [r1, #8]
}
 800d2cc:	bf00      	nop
 800d2ce:	370c      	adds	r7, #12
 800d2d0:	46bd      	mov	sp, r7
 800d2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d6:	4770      	bx	lr
 800d2d8:	40010400 	.word	0x40010400

0800d2dc <LL_EXTI_EnableRisingTrig_32_63>:
{
 800d2dc:	b480      	push	{r7}
 800d2de:	b083      	sub	sp, #12
 800d2e0:	af00      	add	r7, sp, #0
 800d2e2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800d2e4:	4b05      	ldr	r3, [pc, #20]	; (800d2fc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800d2e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d2e8:	4904      	ldr	r1, [pc, #16]	; (800d2fc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	4313      	orrs	r3, r2
 800d2ee:	628b      	str	r3, [r1, #40]	; 0x28
}
 800d2f0:	bf00      	nop
 800d2f2:	370c      	adds	r7, #12
 800d2f4:	46bd      	mov	sp, r7
 800d2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2fa:	4770      	bx	lr
 800d2fc:	40010400 	.word	0x40010400

0800d300 <LL_EXTI_DisableRisingTrig_0_31>:
{
 800d300:	b480      	push	{r7}
 800d302:	b083      	sub	sp, #12
 800d304:	af00      	add	r7, sp, #0
 800d306:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800d308:	4b06      	ldr	r3, [pc, #24]	; (800d324 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800d30a:	689a      	ldr	r2, [r3, #8]
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	43db      	mvns	r3, r3
 800d310:	4904      	ldr	r1, [pc, #16]	; (800d324 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800d312:	4013      	ands	r3, r2
 800d314:	608b      	str	r3, [r1, #8]
}
 800d316:	bf00      	nop
 800d318:	370c      	adds	r7, #12
 800d31a:	46bd      	mov	sp, r7
 800d31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d320:	4770      	bx	lr
 800d322:	bf00      	nop
 800d324:	40010400 	.word	0x40010400

0800d328 <LL_EXTI_DisableRisingTrig_32_63>:
{
 800d328:	b480      	push	{r7}
 800d32a:	b083      	sub	sp, #12
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 800d330:	4b06      	ldr	r3, [pc, #24]	; (800d34c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800d332:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	43db      	mvns	r3, r3
 800d338:	4904      	ldr	r1, [pc, #16]	; (800d34c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800d33a:	4013      	ands	r3, r2
 800d33c:	628b      	str	r3, [r1, #40]	; 0x28
}
 800d33e:	bf00      	nop
 800d340:	370c      	adds	r7, #12
 800d342:	46bd      	mov	sp, r7
 800d344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d348:	4770      	bx	lr
 800d34a:	bf00      	nop
 800d34c:	40010400 	.word	0x40010400

0800d350 <LL_EXTI_EnableFallingTrig_0_31>:
{
 800d350:	b480      	push	{r7}
 800d352:	b083      	sub	sp, #12
 800d354:	af00      	add	r7, sp, #0
 800d356:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800d358:	4b05      	ldr	r3, [pc, #20]	; (800d370 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800d35a:	68da      	ldr	r2, [r3, #12]
 800d35c:	4904      	ldr	r1, [pc, #16]	; (800d370 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	4313      	orrs	r3, r2
 800d362:	60cb      	str	r3, [r1, #12]
}
 800d364:	bf00      	nop
 800d366:	370c      	adds	r7, #12
 800d368:	46bd      	mov	sp, r7
 800d36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d36e:	4770      	bx	lr
 800d370:	40010400 	.word	0x40010400

0800d374 <LL_EXTI_EnableFallingTrig_32_63>:
{
 800d374:	b480      	push	{r7}
 800d376:	b083      	sub	sp, #12
 800d378:	af00      	add	r7, sp, #0
 800d37a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 800d37c:	4b05      	ldr	r3, [pc, #20]	; (800d394 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800d37e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d380:	4904      	ldr	r1, [pc, #16]	; (800d394 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	4313      	orrs	r3, r2
 800d386:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800d388:	bf00      	nop
 800d38a:	370c      	adds	r7, #12
 800d38c:	46bd      	mov	sp, r7
 800d38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d392:	4770      	bx	lr
 800d394:	40010400 	.word	0x40010400

0800d398 <LL_EXTI_DisableFallingTrig_0_31>:
{
 800d398:	b480      	push	{r7}
 800d39a:	b083      	sub	sp, #12
 800d39c:	af00      	add	r7, sp, #0
 800d39e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800d3a0:	4b06      	ldr	r3, [pc, #24]	; (800d3bc <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800d3a2:	68da      	ldr	r2, [r3, #12]
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	43db      	mvns	r3, r3
 800d3a8:	4904      	ldr	r1, [pc, #16]	; (800d3bc <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800d3aa:	4013      	ands	r3, r2
 800d3ac:	60cb      	str	r3, [r1, #12]
}
 800d3ae:	bf00      	nop
 800d3b0:	370c      	adds	r7, #12
 800d3b2:	46bd      	mov	sp, r7
 800d3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b8:	4770      	bx	lr
 800d3ba:	bf00      	nop
 800d3bc:	40010400 	.word	0x40010400

0800d3c0 <LL_EXTI_DisableFallingTrig_32_63>:
{
 800d3c0:	b480      	push	{r7}
 800d3c2:	b083      	sub	sp, #12
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 800d3c8:	4b06      	ldr	r3, [pc, #24]	; (800d3e4 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800d3ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	43db      	mvns	r3, r3
 800d3d0:	4904      	ldr	r1, [pc, #16]	; (800d3e4 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800d3d2:	4013      	ands	r3, r2
 800d3d4:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800d3d6:	bf00      	nop
 800d3d8:	370c      	adds	r7, #12
 800d3da:	46bd      	mov	sp, r7
 800d3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e0:	4770      	bx	lr
 800d3e2:	bf00      	nop
 800d3e4:	40010400 	.word	0x40010400

0800d3e8 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other calue : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 800d3e8:	b580      	push	{r7, lr}
 800d3ea:	b084      	sub	sp, #16
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 800d3f0:	2300      	movs	r3, #0
 800d3f2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	7a1b      	ldrb	r3, [r3, #8]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	f000 80c8 	beq.w	800d58e <LL_EXTI_Init+0x1a6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	2b00      	cmp	r3, #0
 800d404:	d05d      	beq.n	800d4c2 <LL_EXTI_Init+0xda>
    {
      switch (EXTI_InitStruct->Mode)
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	7a5b      	ldrb	r3, [r3, #9]
 800d40a:	2b01      	cmp	r3, #1
 800d40c:	d00e      	beq.n	800d42c <LL_EXTI_Init+0x44>
 800d40e:	2b02      	cmp	r3, #2
 800d410:	d017      	beq.n	800d442 <LL_EXTI_Init+0x5a>
 800d412:	2b00      	cmp	r3, #0
 800d414:	d120      	bne.n	800d458 <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	4618      	mov	r0, r3
 800d41c:	f7ff ff24 	bl	800d268 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	4618      	mov	r0, r3
 800d426:	f7ff feaf 	bl	800d188 <LL_EXTI_EnableIT_0_31>
          break;
 800d42a:	e018      	b.n	800d45e <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	4618      	mov	r0, r3
 800d432:	f7ff fecd 	bl	800d1d0 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	4618      	mov	r0, r3
 800d43c:	f7ff fef0 	bl	800d220 <LL_EXTI_EnableEvent_0_31>
          break;
 800d440:	e00d      	b.n	800d45e <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	4618      	mov	r0, r3
 800d448:	f7ff fe9e 	bl	800d188 <LL_EXTI_EnableIT_0_31>
          /* Directly Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	4618      	mov	r0, r3
 800d452:	f7ff fee5 	bl	800d220 <LL_EXTI_EnableEvent_0_31>
          break;
 800d456:	e002      	b.n	800d45e <LL_EXTI_Init+0x76>
        default:
          status = 0x01u;
 800d458:	2301      	movs	r3, #1
 800d45a:	60fb      	str	r3, [r7, #12]
          break;
 800d45c:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	7a9b      	ldrb	r3, [r3, #10]
 800d462:	2b00      	cmp	r3, #0
 800d464:	d02d      	beq.n	800d4c2 <LL_EXTI_Init+0xda>
      {
        switch (EXTI_InitStruct->Trigger)
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	7a9b      	ldrb	r3, [r3, #10]
 800d46a:	2b02      	cmp	r3, #2
 800d46c:	d00e      	beq.n	800d48c <LL_EXTI_Init+0xa4>
 800d46e:	2b03      	cmp	r3, #3
 800d470:	d017      	beq.n	800d4a2 <LL_EXTI_Init+0xba>
 800d472:	2b01      	cmp	r3, #1
 800d474:	d120      	bne.n	800d4b8 <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	4618      	mov	r0, r3
 800d47c:	f7ff ff8c 	bl	800d398 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	4618      	mov	r0, r3
 800d486:	f7ff ff17 	bl	800d2b8 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 800d48a:	e01b      	b.n	800d4c4 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	4618      	mov	r0, r3
 800d492:	f7ff ff35 	bl	800d300 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	4618      	mov	r0, r3
 800d49c:	f7ff ff58 	bl	800d350 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800d4a0:	e010      	b.n	800d4c4 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	4618      	mov	r0, r3
 800d4a8:	f7ff ff06 	bl	800d2b8 <LL_EXTI_EnableRisingTrig_0_31>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	4618      	mov	r0, r3
 800d4b2:	f7ff ff4d 	bl	800d350 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800d4b6:	e005      	b.n	800d4c4 <LL_EXTI_Init+0xdc>
          default:
            status |= 0x02u;
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	f043 0302 	orr.w	r3, r3, #2
 800d4be:	60fb      	str	r3, [r7, #12]
            break;
 800d4c0:	e000      	b.n	800d4c4 <LL_EXTI_Init+0xdc>
        }
      }
 800d4c2:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	685b      	ldr	r3, [r3, #4]
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d075      	beq.n	800d5b8 <LL_EXTI_Init+0x1d0>
    {
      switch (EXTI_InitStruct->Mode)
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	7a5b      	ldrb	r3, [r3, #9]
 800d4d0:	2b01      	cmp	r3, #1
 800d4d2:	d00e      	beq.n	800d4f2 <LL_EXTI_Init+0x10a>
 800d4d4:	2b02      	cmp	r3, #2
 800d4d6:	d017      	beq.n	800d508 <LL_EXTI_Init+0x120>
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d120      	bne.n	800d51e <LL_EXTI_Init+0x136>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	685b      	ldr	r3, [r3, #4]
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	f7ff fed5 	bl	800d290 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	685b      	ldr	r3, [r3, #4]
 800d4ea:	4618      	mov	r0, r3
 800d4ec:	f7ff fe5e 	bl	800d1ac <LL_EXTI_EnableIT_32_63>
          break;
 800d4f0:	e01a      	b.n	800d528 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	685b      	ldr	r3, [r3, #4]
 800d4f6:	4618      	mov	r0, r3
 800d4f8:	f7ff fe7e 	bl	800d1f8 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	685b      	ldr	r3, [r3, #4]
 800d500:	4618      	mov	r0, r3
 800d502:	f7ff fe9f 	bl	800d244 <LL_EXTI_EnableEvent_32_63>
          break;
 800d506:	e00f      	b.n	800d528 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	685b      	ldr	r3, [r3, #4]
 800d50c:	4618      	mov	r0, r3
 800d50e:	f7ff fe4d 	bl	800d1ac <LL_EXTI_EnableIT_32_63>
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	685b      	ldr	r3, [r3, #4]
 800d516:	4618      	mov	r0, r3
 800d518:	f7ff fe94 	bl	800d244 <LL_EXTI_EnableEvent_32_63>
          break;
 800d51c:	e004      	b.n	800d528 <LL_EXTI_Init+0x140>
        default:
          status |= 0x04u;
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	f043 0304 	orr.w	r3, r3, #4
 800d524:	60fb      	str	r3, [r7, #12]
          break;
 800d526:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	7a9b      	ldrb	r3, [r3, #10]
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d043      	beq.n	800d5b8 <LL_EXTI_Init+0x1d0>
      {
        switch (EXTI_InitStruct->Trigger)
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	7a9b      	ldrb	r3, [r3, #10]
 800d534:	2b02      	cmp	r3, #2
 800d536:	d00e      	beq.n	800d556 <LL_EXTI_Init+0x16e>
 800d538:	2b03      	cmp	r3, #3
 800d53a:	d017      	beq.n	800d56c <LL_EXTI_Init+0x184>
 800d53c:	2b01      	cmp	r3, #1
 800d53e:	d120      	bne.n	800d582 <LL_EXTI_Init+0x19a>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	685b      	ldr	r3, [r3, #4]
 800d544:	4618      	mov	r0, r3
 800d546:	f7ff ff3b 	bl	800d3c0 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	685b      	ldr	r3, [r3, #4]
 800d54e:	4618      	mov	r0, r3
 800d550:	f7ff fec4 	bl	800d2dc <LL_EXTI_EnableRisingTrig_32_63>
            break;
 800d554:	e031      	b.n	800d5ba <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	685b      	ldr	r3, [r3, #4]
 800d55a:	4618      	mov	r0, r3
 800d55c:	f7ff fee4 	bl	800d328 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	685b      	ldr	r3, [r3, #4]
 800d564:	4618      	mov	r0, r3
 800d566:	f7ff ff05 	bl	800d374 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800d56a:	e026      	b.n	800d5ba <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	685b      	ldr	r3, [r3, #4]
 800d570:	4618      	mov	r0, r3
 800d572:	f7ff feb3 	bl	800d2dc <LL_EXTI_EnableRisingTrig_32_63>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	685b      	ldr	r3, [r3, #4]
 800d57a:	4618      	mov	r0, r3
 800d57c:	f7ff fefa 	bl	800d374 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800d580:	e01b      	b.n	800d5ba <LL_EXTI_Init+0x1d2>
          default:
            status |= 0x05u;
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	f043 0305 	orr.w	r3, r3, #5
 800d588:	60fb      	str	r3, [r7, #12]
            break;
 800d58a:	bf00      	nop
 800d58c:	e015      	b.n	800d5ba <LL_EXTI_Init+0x1d2>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure IT EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	4618      	mov	r0, r3
 800d594:	f7ff fe1c 	bl	800d1d0 <LL_EXTI_DisableIT_0_31>
    /* De-configure Event EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	4618      	mov	r0, r3
 800d59e:	f7ff fe63 	bl	800d268 <LL_EXTI_DisableEvent_0_31>
    /* De-configure IT EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	685b      	ldr	r3, [r3, #4]
 800d5a6:	4618      	mov	r0, r3
 800d5a8:	f7ff fe26 	bl	800d1f8 <LL_EXTI_DisableIT_32_63>
    /* De-configure Event EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	685b      	ldr	r3, [r3, #4]
 800d5b0:	4618      	mov	r0, r3
 800d5b2:	f7ff fe6d 	bl	800d290 <LL_EXTI_DisableEvent_32_63>
 800d5b6:	e000      	b.n	800d5ba <LL_EXTI_Init+0x1d2>
      }
 800d5b8:	bf00      	nop
  }

  return status;
 800d5ba:	68fb      	ldr	r3, [r7, #12]
}
 800d5bc:	4618      	mov	r0, r3
 800d5be:	3710      	adds	r7, #16
 800d5c0:	46bd      	mov	sp, r7
 800d5c2:	bd80      	pop	{r7, pc}

0800d5c4 <LL_GPIO_SetPinMode>:
{
 800d5c4:	b480      	push	{r7}
 800d5c6:	b089      	sub	sp, #36	; 0x24
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	60f8      	str	r0, [r7, #12]
 800d5cc:	60b9      	str	r1, [r7, #8]
 800d5ce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	681a      	ldr	r2, [r3, #0]
 800d5d4:	68bb      	ldr	r3, [r7, #8]
 800d5d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d5d8:	697b      	ldr	r3, [r7, #20]
 800d5da:	fa93 f3a3 	rbit	r3, r3
 800d5de:	613b      	str	r3, [r7, #16]
  return result;
 800d5e0:	693b      	ldr	r3, [r7, #16]
 800d5e2:	fab3 f383 	clz	r3, r3
 800d5e6:	b2db      	uxtb	r3, r3
 800d5e8:	005b      	lsls	r3, r3, #1
 800d5ea:	2103      	movs	r1, #3
 800d5ec:	fa01 f303 	lsl.w	r3, r1, r3
 800d5f0:	43db      	mvns	r3, r3
 800d5f2:	401a      	ands	r2, r3
 800d5f4:	68bb      	ldr	r3, [r7, #8]
 800d5f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d5f8:	69fb      	ldr	r3, [r7, #28]
 800d5fa:	fa93 f3a3 	rbit	r3, r3
 800d5fe:	61bb      	str	r3, [r7, #24]
  return result;
 800d600:	69bb      	ldr	r3, [r7, #24]
 800d602:	fab3 f383 	clz	r3, r3
 800d606:	b2db      	uxtb	r3, r3
 800d608:	005b      	lsls	r3, r3, #1
 800d60a:	6879      	ldr	r1, [r7, #4]
 800d60c:	fa01 f303 	lsl.w	r3, r1, r3
 800d610:	431a      	orrs	r2, r3
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	601a      	str	r2, [r3, #0]
}
 800d616:	bf00      	nop
 800d618:	3724      	adds	r7, #36	; 0x24
 800d61a:	46bd      	mov	sp, r7
 800d61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d620:	4770      	bx	lr

0800d622 <LL_GPIO_SetPinOutputType>:
{
 800d622:	b480      	push	{r7}
 800d624:	b085      	sub	sp, #20
 800d626:	af00      	add	r7, sp, #0
 800d628:	60f8      	str	r0, [r7, #12]
 800d62a:	60b9      	str	r1, [r7, #8]
 800d62c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	685a      	ldr	r2, [r3, #4]
 800d632:	68bb      	ldr	r3, [r7, #8]
 800d634:	43db      	mvns	r3, r3
 800d636:	401a      	ands	r2, r3
 800d638:	68bb      	ldr	r3, [r7, #8]
 800d63a:	6879      	ldr	r1, [r7, #4]
 800d63c:	fb01 f303 	mul.w	r3, r1, r3
 800d640:	431a      	orrs	r2, r3
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	605a      	str	r2, [r3, #4]
}
 800d646:	bf00      	nop
 800d648:	3714      	adds	r7, #20
 800d64a:	46bd      	mov	sp, r7
 800d64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d650:	4770      	bx	lr

0800d652 <LL_GPIO_SetPinSpeed>:
{
 800d652:	b480      	push	{r7}
 800d654:	b089      	sub	sp, #36	; 0x24
 800d656:	af00      	add	r7, sp, #0
 800d658:	60f8      	str	r0, [r7, #12]
 800d65a:	60b9      	str	r1, [r7, #8]
 800d65c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	689a      	ldr	r2, [r3, #8]
 800d662:	68bb      	ldr	r3, [r7, #8]
 800d664:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d666:	697b      	ldr	r3, [r7, #20]
 800d668:	fa93 f3a3 	rbit	r3, r3
 800d66c:	613b      	str	r3, [r7, #16]
  return result;
 800d66e:	693b      	ldr	r3, [r7, #16]
 800d670:	fab3 f383 	clz	r3, r3
 800d674:	b2db      	uxtb	r3, r3
 800d676:	005b      	lsls	r3, r3, #1
 800d678:	2103      	movs	r1, #3
 800d67a:	fa01 f303 	lsl.w	r3, r1, r3
 800d67e:	43db      	mvns	r3, r3
 800d680:	401a      	ands	r2, r3
 800d682:	68bb      	ldr	r3, [r7, #8]
 800d684:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d686:	69fb      	ldr	r3, [r7, #28]
 800d688:	fa93 f3a3 	rbit	r3, r3
 800d68c:	61bb      	str	r3, [r7, #24]
  return result;
 800d68e:	69bb      	ldr	r3, [r7, #24]
 800d690:	fab3 f383 	clz	r3, r3
 800d694:	b2db      	uxtb	r3, r3
 800d696:	005b      	lsls	r3, r3, #1
 800d698:	6879      	ldr	r1, [r7, #4]
 800d69a:	fa01 f303 	lsl.w	r3, r1, r3
 800d69e:	431a      	orrs	r2, r3
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	609a      	str	r2, [r3, #8]
}
 800d6a4:	bf00      	nop
 800d6a6:	3724      	adds	r7, #36	; 0x24
 800d6a8:	46bd      	mov	sp, r7
 800d6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ae:	4770      	bx	lr

0800d6b0 <LL_GPIO_SetPinPull>:
{
 800d6b0:	b480      	push	{r7}
 800d6b2:	b089      	sub	sp, #36	; 0x24
 800d6b4:	af00      	add	r7, sp, #0
 800d6b6:	60f8      	str	r0, [r7, #12]
 800d6b8:	60b9      	str	r1, [r7, #8]
 800d6ba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	68da      	ldr	r2, [r3, #12]
 800d6c0:	68bb      	ldr	r3, [r7, #8]
 800d6c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d6c4:	697b      	ldr	r3, [r7, #20]
 800d6c6:	fa93 f3a3 	rbit	r3, r3
 800d6ca:	613b      	str	r3, [r7, #16]
  return result;
 800d6cc:	693b      	ldr	r3, [r7, #16]
 800d6ce:	fab3 f383 	clz	r3, r3
 800d6d2:	b2db      	uxtb	r3, r3
 800d6d4:	005b      	lsls	r3, r3, #1
 800d6d6:	2103      	movs	r1, #3
 800d6d8:	fa01 f303 	lsl.w	r3, r1, r3
 800d6dc:	43db      	mvns	r3, r3
 800d6de:	401a      	ands	r2, r3
 800d6e0:	68bb      	ldr	r3, [r7, #8]
 800d6e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d6e4:	69fb      	ldr	r3, [r7, #28]
 800d6e6:	fa93 f3a3 	rbit	r3, r3
 800d6ea:	61bb      	str	r3, [r7, #24]
  return result;
 800d6ec:	69bb      	ldr	r3, [r7, #24]
 800d6ee:	fab3 f383 	clz	r3, r3
 800d6f2:	b2db      	uxtb	r3, r3
 800d6f4:	005b      	lsls	r3, r3, #1
 800d6f6:	6879      	ldr	r1, [r7, #4]
 800d6f8:	fa01 f303 	lsl.w	r3, r1, r3
 800d6fc:	431a      	orrs	r2, r3
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	60da      	str	r2, [r3, #12]
}
 800d702:	bf00      	nop
 800d704:	3724      	adds	r7, #36	; 0x24
 800d706:	46bd      	mov	sp, r7
 800d708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d70c:	4770      	bx	lr

0800d70e <LL_GPIO_SetAFPin_0_7>:
{
 800d70e:	b480      	push	{r7}
 800d710:	b089      	sub	sp, #36	; 0x24
 800d712:	af00      	add	r7, sp, #0
 800d714:	60f8      	str	r0, [r7, #12]
 800d716:	60b9      	str	r1, [r7, #8]
 800d718:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	6a1a      	ldr	r2, [r3, #32]
 800d71e:	68bb      	ldr	r3, [r7, #8]
 800d720:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d722:	697b      	ldr	r3, [r7, #20]
 800d724:	fa93 f3a3 	rbit	r3, r3
 800d728:	613b      	str	r3, [r7, #16]
  return result;
 800d72a:	693b      	ldr	r3, [r7, #16]
 800d72c:	fab3 f383 	clz	r3, r3
 800d730:	b2db      	uxtb	r3, r3
 800d732:	009b      	lsls	r3, r3, #2
 800d734:	210f      	movs	r1, #15
 800d736:	fa01 f303 	lsl.w	r3, r1, r3
 800d73a:	43db      	mvns	r3, r3
 800d73c:	401a      	ands	r2, r3
 800d73e:	68bb      	ldr	r3, [r7, #8]
 800d740:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d742:	69fb      	ldr	r3, [r7, #28]
 800d744:	fa93 f3a3 	rbit	r3, r3
 800d748:	61bb      	str	r3, [r7, #24]
  return result;
 800d74a:	69bb      	ldr	r3, [r7, #24]
 800d74c:	fab3 f383 	clz	r3, r3
 800d750:	b2db      	uxtb	r3, r3
 800d752:	009b      	lsls	r3, r3, #2
 800d754:	6879      	ldr	r1, [r7, #4]
 800d756:	fa01 f303 	lsl.w	r3, r1, r3
 800d75a:	431a      	orrs	r2, r3
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	621a      	str	r2, [r3, #32]
}
 800d760:	bf00      	nop
 800d762:	3724      	adds	r7, #36	; 0x24
 800d764:	46bd      	mov	sp, r7
 800d766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d76a:	4770      	bx	lr

0800d76c <LL_GPIO_SetAFPin_8_15>:
{
 800d76c:	b480      	push	{r7}
 800d76e:	b089      	sub	sp, #36	; 0x24
 800d770:	af00      	add	r7, sp, #0
 800d772:	60f8      	str	r0, [r7, #12]
 800d774:	60b9      	str	r1, [r7, #8]
 800d776:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d77c:	68bb      	ldr	r3, [r7, #8]
 800d77e:	0a1b      	lsrs	r3, r3, #8
 800d780:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d782:	697b      	ldr	r3, [r7, #20]
 800d784:	fa93 f3a3 	rbit	r3, r3
 800d788:	613b      	str	r3, [r7, #16]
  return result;
 800d78a:	693b      	ldr	r3, [r7, #16]
 800d78c:	fab3 f383 	clz	r3, r3
 800d790:	b2db      	uxtb	r3, r3
 800d792:	009b      	lsls	r3, r3, #2
 800d794:	210f      	movs	r1, #15
 800d796:	fa01 f303 	lsl.w	r3, r1, r3
 800d79a:	43db      	mvns	r3, r3
 800d79c:	401a      	ands	r2, r3
 800d79e:	68bb      	ldr	r3, [r7, #8]
 800d7a0:	0a1b      	lsrs	r3, r3, #8
 800d7a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d7a4:	69fb      	ldr	r3, [r7, #28]
 800d7a6:	fa93 f3a3 	rbit	r3, r3
 800d7aa:	61bb      	str	r3, [r7, #24]
  return result;
 800d7ac:	69bb      	ldr	r3, [r7, #24]
 800d7ae:	fab3 f383 	clz	r3, r3
 800d7b2:	b2db      	uxtb	r3, r3
 800d7b4:	009b      	lsls	r3, r3, #2
 800d7b6:	6879      	ldr	r1, [r7, #4]
 800d7b8:	fa01 f303 	lsl.w	r3, r1, r3
 800d7bc:	431a      	orrs	r2, r3
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	625a      	str	r2, [r3, #36]	; 0x24
}
 800d7c2:	bf00      	nop
 800d7c4:	3724      	adds	r7, #36	; 0x24
 800d7c6:	46bd      	mov	sp, r7
 800d7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7cc:	4770      	bx	lr

0800d7ce <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800d7ce:	b580      	push	{r7, lr}
 800d7d0:	b086      	sub	sp, #24
 800d7d2:	af00      	add	r7, sp, #0
 800d7d4:	6078      	str	r0, [r7, #4]
 800d7d6:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800d7d8:	683b      	ldr	r3, [r7, #0]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	fa93 f3a3 	rbit	r3, r3
 800d7e4:	60bb      	str	r3, [r7, #8]
  return result;
 800d7e6:	68bb      	ldr	r3, [r7, #8]
 800d7e8:	fab3 f383 	clz	r3, r3
 800d7ec:	b2db      	uxtb	r3, r3
 800d7ee:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800d7f0:	e040      	b.n	800d874 <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 800d7f2:	683b      	ldr	r3, [r7, #0]
 800d7f4:	681a      	ldr	r2, [r3, #0]
 800d7f6:	2101      	movs	r1, #1
 800d7f8:	697b      	ldr	r3, [r7, #20]
 800d7fa:	fa01 f303 	lsl.w	r3, r1, r3
 800d7fe:	4013      	ands	r3, r2
 800d800:	613b      	str	r3, [r7, #16]

    if (currentpin != 0x00u)
 800d802:	693b      	ldr	r3, [r7, #16]
 800d804:	2b00      	cmp	r3, #0
 800d806:	d032      	beq.n	800d86e <LL_GPIO_Init+0xa0>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800d808:	683b      	ldr	r3, [r7, #0]
 800d80a:	685b      	ldr	r3, [r3, #4]
 800d80c:	461a      	mov	r2, r3
 800d80e:	6939      	ldr	r1, [r7, #16]
 800d810:	6878      	ldr	r0, [r7, #4]
 800d812:	f7ff fed7 	bl	800d5c4 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800d816:	683b      	ldr	r3, [r7, #0]
 800d818:	685b      	ldr	r3, [r3, #4]
 800d81a:	2b01      	cmp	r3, #1
 800d81c:	d003      	beq.n	800d826 <LL_GPIO_Init+0x58>
 800d81e:	683b      	ldr	r3, [r7, #0]
 800d820:	685b      	ldr	r3, [r3, #4]
 800d822:	2b02      	cmp	r3, #2
 800d824:	d106      	bne.n	800d834 <LL_GPIO_Init+0x66>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800d826:	683b      	ldr	r3, [r7, #0]
 800d828:	689b      	ldr	r3, [r3, #8]
 800d82a:	461a      	mov	r2, r3
 800d82c:	6939      	ldr	r1, [r7, #16]
 800d82e:	6878      	ldr	r0, [r7, #4]
 800d830:	f7ff ff0f 	bl	800d652 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800d834:	683b      	ldr	r3, [r7, #0]
 800d836:	691b      	ldr	r3, [r3, #16]
 800d838:	461a      	mov	r2, r3
 800d83a:	6939      	ldr	r1, [r7, #16]
 800d83c:	6878      	ldr	r0, [r7, #4]
 800d83e:	f7ff ff37 	bl	800d6b0 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800d842:	683b      	ldr	r3, [r7, #0]
 800d844:	685b      	ldr	r3, [r3, #4]
 800d846:	2b02      	cmp	r3, #2
 800d848:	d111      	bne.n	800d86e <LL_GPIO_Init+0xa0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800d84a:	693b      	ldr	r3, [r7, #16]
 800d84c:	2bff      	cmp	r3, #255	; 0xff
 800d84e:	d807      	bhi.n	800d860 <LL_GPIO_Init+0x92>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800d850:	683b      	ldr	r3, [r7, #0]
 800d852:	695b      	ldr	r3, [r3, #20]
 800d854:	461a      	mov	r2, r3
 800d856:	6939      	ldr	r1, [r7, #16]
 800d858:	6878      	ldr	r0, [r7, #4]
 800d85a:	f7ff ff58 	bl	800d70e <LL_GPIO_SetAFPin_0_7>
 800d85e:	e006      	b.n	800d86e <LL_GPIO_Init+0xa0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800d860:	683b      	ldr	r3, [r7, #0]
 800d862:	695b      	ldr	r3, [r3, #20]
 800d864:	461a      	mov	r2, r3
 800d866:	6939      	ldr	r1, [r7, #16]
 800d868:	6878      	ldr	r0, [r7, #4]
 800d86a:	f7ff ff7f 	bl	800d76c <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 800d86e:	697b      	ldr	r3, [r7, #20]
 800d870:	3301      	adds	r3, #1
 800d872:	617b      	str	r3, [r7, #20]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800d874:	683b      	ldr	r3, [r7, #0]
 800d876:	681a      	ldr	r2, [r3, #0]
 800d878:	697b      	ldr	r3, [r7, #20]
 800d87a:	fa22 f303 	lsr.w	r3, r2, r3
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d1b7      	bne.n	800d7f2 <LL_GPIO_Init+0x24>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800d882:	683b      	ldr	r3, [r7, #0]
 800d884:	685b      	ldr	r3, [r3, #4]
 800d886:	2b01      	cmp	r3, #1
 800d888:	d003      	beq.n	800d892 <LL_GPIO_Init+0xc4>
 800d88a:	683b      	ldr	r3, [r7, #0]
 800d88c:	685b      	ldr	r3, [r3, #4]
 800d88e:	2b02      	cmp	r3, #2
 800d890:	d107      	bne.n	800d8a2 <LL_GPIO_Init+0xd4>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800d892:	683b      	ldr	r3, [r7, #0]
 800d894:	6819      	ldr	r1, [r3, #0]
 800d896:	683b      	ldr	r3, [r7, #0]
 800d898:	68db      	ldr	r3, [r3, #12]
 800d89a:	461a      	mov	r2, r3
 800d89c:	6878      	ldr	r0, [r7, #4]
 800d89e:	f7ff fec0 	bl	800d622 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 800d8a2:	2300      	movs	r3, #0
}
 800d8a4:	4618      	mov	r0, r3
 800d8a6:	3718      	adds	r7, #24
 800d8a8:	46bd      	mov	sp, r7
 800d8aa:	bd80      	pop	{r7, pc}

0800d8ac <ILI9341_Draw_Wave>:

 extern uint16_t BURST_MAX_SIZE;


void ILI9341_Draw_Wave(uint16_t x, uint16_t y, uint8_t weight, uint16_t colour, uint8_t scale, uint32_t* data_table, uint16_t data_table_size)
{
 800d8ac:	b590      	push	{r4, r7, lr}
 800d8ae:	b085      	sub	sp, #20
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	4604      	mov	r4, r0
 800d8b4:	4608      	mov	r0, r1
 800d8b6:	4611      	mov	r1, r2
 800d8b8:	461a      	mov	r2, r3
 800d8ba:	4623      	mov	r3, r4
 800d8bc:	80fb      	strh	r3, [r7, #6]
 800d8be:	4603      	mov	r3, r0
 800d8c0:	80bb      	strh	r3, [r7, #4]
 800d8c2:	460b      	mov	r3, r1
 800d8c4:	70fb      	strb	r3, [r7, #3]
 800d8c6:	4613      	mov	r3, r2
 800d8c8:	803b      	strh	r3, [r7, #0]
	for(int w = 0; w < weight; w++ )
 800d8ca:	2300      	movs	r3, #0
 800d8cc:	60fb      	str	r3, [r7, #12]
 800d8ce:	e026      	b.n	800d91e <ILI9341_Draw_Wave+0x72>
	{
		for(int i = 0; i < data_table_size; i++)
 800d8d0:	2300      	movs	r3, #0
 800d8d2:	60bb      	str	r3, [r7, #8]
 800d8d4:	e01c      	b.n	800d910 <ILI9341_Draw_Wave+0x64>
		{
			ILI9341_Draw_Pixel(	x + i,	(y + data_table[i] / scale) + w, colour);
 800d8d6:	68bb      	ldr	r3, [r7, #8]
 800d8d8:	b29a      	uxth	r2, r3
 800d8da:	88fb      	ldrh	r3, [r7, #6]
 800d8dc:	4413      	add	r3, r2
 800d8de:	b298      	uxth	r0, r3
 800d8e0:	68bb      	ldr	r3, [r7, #8]
 800d8e2:	009b      	lsls	r3, r3, #2
 800d8e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d8e6:	4413      	add	r3, r2
 800d8e8:	681a      	ldr	r2, [r3, #0]
 800d8ea:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d8ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800d8f2:	b29a      	uxth	r2, r3
 800d8f4:	88bb      	ldrh	r3, [r7, #4]
 800d8f6:	4413      	add	r3, r2
 800d8f8:	b29a      	uxth	r2, r3
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	b29b      	uxth	r3, r3
 800d8fe:	4413      	add	r3, r2
 800d900:	b29b      	uxth	r3, r3
 800d902:	883a      	ldrh	r2, [r7, #0]
 800d904:	4619      	mov	r1, r3
 800d906:	f000 fc1f 	bl	800e148 <ILI9341_Draw_Pixel>
		for(int i = 0; i < data_table_size; i++)
 800d90a:	68bb      	ldr	r3, [r7, #8]
 800d90c:	3301      	adds	r3, #1
 800d90e:	60bb      	str	r3, [r7, #8]
 800d910:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d912:	68ba      	ldr	r2, [r7, #8]
 800d914:	429a      	cmp	r2, r3
 800d916:	dbde      	blt.n	800d8d6 <ILI9341_Draw_Wave+0x2a>
	for(int w = 0; w < weight; w++ )
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	3301      	adds	r3, #1
 800d91c:	60fb      	str	r3, [r7, #12]
 800d91e:	78fb      	ldrb	r3, [r7, #3]
 800d920:	68fa      	ldr	r2, [r7, #12]
 800d922:	429a      	cmp	r2, r3
 800d924:	dbd4      	blt.n	800d8d0 <ILI9341_Draw_Wave+0x24>

		}
	}

}
 800d926:	bf00      	nop
 800d928:	3714      	adds	r7, #20
 800d92a:	46bd      	mov	sp, r7
 800d92c:	bd90      	pop	{r4, r7, pc}

0800d92e <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>:
 *
 *
 *
 */
void ILI9341_Draw_Bordered_Filled_Rectangle_Coord(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t inner_colour, uint8_t border_weight, uint16_t border_colour)
{
 800d92e:	b590      	push	{r4, r7, lr}
 800d930:	b087      	sub	sp, #28
 800d932:	af02      	add	r7, sp, #8
 800d934:	4604      	mov	r4, r0
 800d936:	4608      	mov	r0, r1
 800d938:	4611      	mov	r1, r2
 800d93a:	461a      	mov	r2, r3
 800d93c:	4623      	mov	r3, r4
 800d93e:	80fb      	strh	r3, [r7, #6]
 800d940:	4603      	mov	r3, r0
 800d942:	80bb      	strh	r3, [r7, #4]
 800d944:	460b      	mov	r3, r1
 800d946:	807b      	strh	r3, [r7, #2]
 800d948:	4613      	mov	r3, r2
 800d94a:	803b      	strh	r3, [r7, #0]

	// Draw inwards (and shorter) for each level of border weight
	for(uint8_t b = 0; ; b++)
 800d94c:	2300      	movs	r3, #0
 800d94e:	73fb      	strb	r3, [r7, #15]
	{


		if(b > border_weight)
 800d950:	7bfa      	ldrb	r2, [r7, #15]
 800d952:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d956:	429a      	cmp	r2, r3
 800d958:	d939      	bls.n	800d9ce <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0xa0>
		{

			// stop before the inner space reaches zero! (hard fault)
			if( ((y + b) == ((y + h) - b)) || ((x + b) == ((x + w) - b)) )
 800d95a:	88ba      	ldrh	r2, [r7, #4]
 800d95c:	7bfb      	ldrb	r3, [r7, #15]
 800d95e:	441a      	add	r2, r3
 800d960:	88b9      	ldrh	r1, [r7, #4]
 800d962:	883b      	ldrh	r3, [r7, #0]
 800d964:	4419      	add	r1, r3
 800d966:	7bfb      	ldrb	r3, [r7, #15]
 800d968:	1acb      	subs	r3, r1, r3
 800d96a:	429a      	cmp	r2, r3
 800d96c:	f000 8089 	beq.w	800da82 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x154>
 800d970:	88fa      	ldrh	r2, [r7, #6]
 800d972:	7bfb      	ldrb	r3, [r7, #15]
 800d974:	441a      	add	r2, r3
 800d976:	88f9      	ldrh	r1, [r7, #6]
 800d978:	887b      	ldrh	r3, [r7, #2]
 800d97a:	4419      	add	r1, r3
 800d97c:	7bfb      	ldrb	r3, [r7, #15]
 800d97e:	1acb      	subs	r3, r1, r3
 800d980:	429a      	cmp	r2, r3
 800d982:	d07e      	beq.n	800da82 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x154>
				// add final line?
				goto finish;
			}
			else
			{
				ILI9341_Draw_Rectangle(x + b, y + b, (w - (2*b)) + 1, (h - (2*b)) + 1, inner_colour, AREA_CHUNK);
 800d984:	7bfb      	ldrb	r3, [r7, #15]
 800d986:	b29a      	uxth	r2, r3
 800d988:	88fb      	ldrh	r3, [r7, #6]
 800d98a:	4413      	add	r3, r2
 800d98c:	b298      	uxth	r0, r3
 800d98e:	7bfb      	ldrb	r3, [r7, #15]
 800d990:	b29a      	uxth	r2, r3
 800d992:	88bb      	ldrh	r3, [r7, #4]
 800d994:	4413      	add	r3, r2
 800d996:	b299      	uxth	r1, r3
 800d998:	7bfb      	ldrb	r3, [r7, #15]
 800d99a:	b29b      	uxth	r3, r3
 800d99c:	005b      	lsls	r3, r3, #1
 800d99e:	b29b      	uxth	r3, r3
 800d9a0:	887a      	ldrh	r2, [r7, #2]
 800d9a2:	1ad3      	subs	r3, r2, r3
 800d9a4:	b29b      	uxth	r3, r3
 800d9a6:	3301      	adds	r3, #1
 800d9a8:	b29c      	uxth	r4, r3
 800d9aa:	7bfb      	ldrb	r3, [r7, #15]
 800d9ac:	b29b      	uxth	r3, r3
 800d9ae:	005b      	lsls	r3, r3, #1
 800d9b0:	b29b      	uxth	r3, r3
 800d9b2:	883a      	ldrh	r2, [r7, #0]
 800d9b4:	1ad3      	subs	r3, r2, r3
 800d9b6:	b29b      	uxth	r3, r3
 800d9b8:	3301      	adds	r3, #1
 800d9ba:	b29a      	uxth	r2, r3
 800d9bc:	2304      	movs	r3, #4
 800d9be:	9301      	str	r3, [sp, #4]
 800d9c0:	8c3b      	ldrh	r3, [r7, #32]
 800d9c2:	9300      	str	r3, [sp, #0]
 800d9c4:	4613      	mov	r3, r2
 800d9c6:	4622      	mov	r2, r4
 800d9c8:	f000 fd18 	bl	800e3fc <ILI9341_Draw_Rectangle>
				goto finish;
 800d9cc:	e05a      	b.n	800da84 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x156>
			}
		}

		// Horizontal line - Top
		ILI9341_Draw_Horizontal_Line(	x + b,
 800d9ce:	7bfb      	ldrb	r3, [r7, #15]
 800d9d0:	b29a      	uxth	r2, r3
 800d9d2:	88fb      	ldrh	r3, [r7, #6]
 800d9d4:	4413      	add	r3, r2
 800d9d6:	b298      	uxth	r0, r3
 800d9d8:	7bfb      	ldrb	r3, [r7, #15]
 800d9da:	b29a      	uxth	r2, r3
 800d9dc:	88bb      	ldrh	r3, [r7, #4]
 800d9de:	4413      	add	r3, r2
 800d9e0:	b299      	uxth	r1, r3
										y + b,
										(w - b)+1,
 800d9e2:	7bfb      	ldrb	r3, [r7, #15]
 800d9e4:	b29b      	uxth	r3, r3
 800d9e6:	887a      	ldrh	r2, [r7, #2]
 800d9e8:	1ad3      	subs	r3, r2, r3
 800d9ea:	b29b      	uxth	r3, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 800d9ec:	3301      	adds	r3, #1
 800d9ee:	b29a      	uxth	r2, r3
 800d9f0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d9f2:	f000 fa6b 	bl	800decc <ILI9341_Draw_Horizontal_Line>
										border_colour);
		// Horizontal line - Bottom
		ILI9341_Draw_Horizontal_Line(	x + b,
 800d9f6:	7bfb      	ldrb	r3, [r7, #15]
 800d9f8:	b29a      	uxth	r2, r3
 800d9fa:	88fb      	ldrh	r3, [r7, #6]
 800d9fc:	4413      	add	r3, r2
 800d9fe:	b298      	uxth	r0, r3
										(y + h) - b,
 800da00:	88ba      	ldrh	r2, [r7, #4]
 800da02:	883b      	ldrh	r3, [r7, #0]
 800da04:	4413      	add	r3, r2
 800da06:	b29a      	uxth	r2, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 800da08:	7bfb      	ldrb	r3, [r7, #15]
 800da0a:	b29b      	uxth	r3, r3
 800da0c:	1ad3      	subs	r3, r2, r3
 800da0e:	b299      	uxth	r1, r3
										(w - b)+1,
 800da10:	7bfb      	ldrb	r3, [r7, #15]
 800da12:	b29b      	uxth	r3, r3
 800da14:	887a      	ldrh	r2, [r7, #2]
 800da16:	1ad3      	subs	r3, r2, r3
 800da18:	b29b      	uxth	r3, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 800da1a:	3301      	adds	r3, #1
 800da1c:	b29a      	uxth	r2, r3
 800da1e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800da20:	f000 fa54 	bl	800decc <ILI9341_Draw_Horizontal_Line>
										border_colour);


		// Vertical line - left
		ILI9341_Draw_Vertical_Line(		x + b,
 800da24:	7bfb      	ldrb	r3, [r7, #15]
 800da26:	b29a      	uxth	r2, r3
 800da28:	88fb      	ldrh	r3, [r7, #6]
 800da2a:	4413      	add	r3, r2
 800da2c:	b298      	uxth	r0, r3
 800da2e:	7bfb      	ldrb	r3, [r7, #15]
 800da30:	b29a      	uxth	r2, r3
 800da32:	88bb      	ldrh	r3, [r7, #4]
 800da34:	4413      	add	r3, r2
 800da36:	b299      	uxth	r1, r3
 800da38:	7bfb      	ldrb	r3, [r7, #15]
 800da3a:	b29b      	uxth	r3, r3
 800da3c:	005b      	lsls	r3, r3, #1
 800da3e:	b29b      	uxth	r3, r3
 800da40:	883a      	ldrh	r2, [r7, #0]
 800da42:	1ad3      	subs	r3, r2, r3
 800da44:	b29a      	uxth	r2, r3
 800da46:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800da48:	f000 faa4 	bl	800df94 <ILI9341_Draw_Vertical_Line>
										y + b,
										h - (2*b),
										border_colour);
		// Vertical line - right
		ILI9341_Draw_Vertical_Line(		((x + w)) - (b),
 800da4c:	88fa      	ldrh	r2, [r7, #6]
 800da4e:	887b      	ldrh	r3, [r7, #2]
 800da50:	4413      	add	r3, r2
 800da52:	b29a      	uxth	r2, r3
 800da54:	7bfb      	ldrb	r3, [r7, #15]
 800da56:	b29b      	uxth	r3, r3
 800da58:	1ad3      	subs	r3, r2, r3
 800da5a:	b298      	uxth	r0, r3
 800da5c:	7bfb      	ldrb	r3, [r7, #15]
 800da5e:	b29a      	uxth	r2, r3
 800da60:	88bb      	ldrh	r3, [r7, #4]
 800da62:	4413      	add	r3, r2
 800da64:	b299      	uxth	r1, r3
 800da66:	7bfb      	ldrb	r3, [r7, #15]
 800da68:	b29b      	uxth	r3, r3
 800da6a:	005b      	lsls	r3, r3, #1
 800da6c:	b29b      	uxth	r3, r3
 800da6e:	883a      	ldrh	r2, [r7, #0]
 800da70:	1ad3      	subs	r3, r2, r3
 800da72:	b29a      	uxth	r2, r3
 800da74:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800da76:	f000 fa8d 	bl	800df94 <ILI9341_Draw_Vertical_Line>
	for(uint8_t b = 0; ; b++)
 800da7a:	7bfb      	ldrb	r3, [r7, #15]
 800da7c:	3301      	adds	r3, #1
 800da7e:	73fb      	strb	r3, [r7, #15]
		if(b > border_weight)
 800da80:	e766      	b.n	800d950 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x22>
										h - (2*b),
										border_colour);

	}

	finish:
 800da82:	bf00      	nop
	// done
	return;
 800da84:	bf00      	nop
}
 800da86:	3714      	adds	r7, #20
 800da88:	46bd      	mov	sp, r7
 800da8a:	bd90      	pop	{r4, r7, pc}

0800da8c <ILI9341_Draw_Char>:
 *	@retval None
 *
 */

void ILI9341_Draw_Char(char character, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 800da8c:	b590      	push	{r4, r7, lr}
 800da8e:	b089      	sub	sp, #36	; 0x24
 800da90:	af02      	add	r7, sp, #8
 800da92:	4604      	mov	r4, r0
 800da94:	4608      	mov	r0, r1
 800da96:	4611      	mov	r1, r2
 800da98:	461a      	mov	r2, r3
 800da9a:	4623      	mov	r3, r4
 800da9c:	71fb      	strb	r3, [r7, #7]
 800da9e:	4603      	mov	r3, r0
 800daa0:	80bb      	strh	r3, [r7, #4]
 800daa2:	460b      	mov	r3, r1
 800daa4:	807b      	strh	r3, [r7, #2]
 800daa6:	4613      	mov	r3, r2
 800daa8:	803b      	strh	r3, [r7, #0]
    uint8_t 	i,j;
		



	function_char = character;
 800daaa:	79fb      	ldrb	r3, [r7, #7]
 800daac:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ')
 800daae:	7dfb      	ldrb	r3, [r7, #23]
 800dab0:	2b1f      	cmp	r3, #31
 800dab2:	d802      	bhi.n	800daba <ILI9341_Draw_Char+0x2e>
    {
        character = 0;
 800dab4:	2300      	movs	r3, #0
 800dab6:	71fb      	strb	r3, [r7, #7]
 800dab8:	e002      	b.n	800dac0 <ILI9341_Draw_Char+0x34>
    }
    else
    {
    	function_char -= 32;
 800daba:	7dfb      	ldrb	r3, [r7, #23]
 800dabc:	3b20      	subs	r3, #32
 800dabe:	75fb      	strb	r3, [r7, #23]
	}
   	
	char temp[CHAR_WIDTH];

	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800dac0:	2300      	movs	r3, #0
 800dac2:	753b      	strb	r3, [r7, #20]
 800dac4:	e012      	b.n	800daec <ILI9341_Draw_Char+0x60>
	{
		temp[k] = font[function_char][k];
 800dac6:	7dfa      	ldrb	r2, [r7, #23]
 800dac8:	7d38      	ldrb	r0, [r7, #20]
 800daca:	7d39      	ldrb	r1, [r7, #20]
 800dacc:	4c48      	ldr	r4, [pc, #288]	; (800dbf0 <ILI9341_Draw_Char+0x164>)
 800dace:	4613      	mov	r3, r2
 800dad0:	005b      	lsls	r3, r3, #1
 800dad2:	4413      	add	r3, r2
 800dad4:	005b      	lsls	r3, r3, #1
 800dad6:	4423      	add	r3, r4
 800dad8:	4403      	add	r3, r0
 800dada:	781a      	ldrb	r2, [r3, #0]
 800dadc:	f107 0318 	add.w	r3, r7, #24
 800dae0:	440b      	add	r3, r1
 800dae2:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800dae6:	7d3b      	ldrb	r3, [r7, #20]
 800dae8:	3301      	adds	r3, #1
 800daea:	753b      	strb	r3, [r7, #20]
 800daec:	7d3b      	ldrb	r3, [r7, #20]
 800daee:	2b05      	cmp	r3, #5
 800daf0:	d9e9      	bls.n	800dac6 <ILI9341_Draw_Char+0x3a>
	}
		
    // Draw pixels
	//ILI9341_Draw_Rectangle(x, Y, CHAR_WIDTH*size, CHAR_HEIGHT*size, bgcolour);
    for (j=0; j<CHAR_WIDTH; j++)
 800daf2:	2300      	movs	r3, #0
 800daf4:	757b      	strb	r3, [r7, #21]
 800daf6:	e074      	b.n	800dbe2 <ILI9341_Draw_Char+0x156>
    {
        for (i=0; i<CHAR_HEIGHT; i++)
 800daf8:	2300      	movs	r3, #0
 800dafa:	75bb      	strb	r3, [r7, #22]
 800dafc:	e06b      	b.n	800dbd6 <ILI9341_Draw_Char+0x14a>
        {
            if (temp[j] & (1<<i))
 800dafe:	7d7b      	ldrb	r3, [r7, #21]
 800db00:	f107 0218 	add.w	r2, r7, #24
 800db04:	4413      	add	r3, r2
 800db06:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800db0a:	461a      	mov	r2, r3
 800db0c:	7dbb      	ldrb	r3, [r7, #22]
 800db0e:	fa42 f303 	asr.w	r3, r2, r3
 800db12:	f003 0301 	and.w	r3, r3, #1
 800db16:	2b00      	cmp	r3, #0
 800db18:	d02d      	beq.n	800db76 <ILI9341_Draw_Char+0xea>
            {
            	if(size == 1)
 800db1a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800db1c:	2b01      	cmp	r3, #1
 800db1e:	d10e      	bne.n	800db3e <ILI9341_Draw_Char+0xb2>
				{
            		ILI9341_Draw_Pixel(x+j, y+i, colour);
 800db20:	7d7b      	ldrb	r3, [r7, #21]
 800db22:	b29a      	uxth	r2, r3
 800db24:	88bb      	ldrh	r3, [r7, #4]
 800db26:	4413      	add	r3, r2
 800db28:	b298      	uxth	r0, r3
 800db2a:	7dbb      	ldrb	r3, [r7, #22]
 800db2c:	b29a      	uxth	r2, r3
 800db2e:	887b      	ldrh	r3, [r7, #2]
 800db30:	4413      	add	r3, r2
 800db32:	b29b      	uxth	r3, r3
 800db34:	883a      	ldrh	r2, [r7, #0]
 800db36:	4619      	mov	r1, r3
 800db38:	f000 fb06 	bl	800e148 <ILI9341_Draw_Pixel>
 800db3c:	e048      	b.n	800dbd0 <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, colour, TEXT_CHUNK);
 800db3e:	7d7b      	ldrb	r3, [r7, #21]
 800db40:	b29b      	uxth	r3, r3
 800db42:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800db44:	fb12 f303 	smulbb	r3, r2, r3
 800db48:	b29a      	uxth	r2, r3
 800db4a:	88bb      	ldrh	r3, [r7, #4]
 800db4c:	4413      	add	r3, r2
 800db4e:	b298      	uxth	r0, r3
 800db50:	7dbb      	ldrb	r3, [r7, #22]
 800db52:	b29b      	uxth	r3, r3
 800db54:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800db56:	fb12 f303 	smulbb	r3, r2, r3
 800db5a:	b29a      	uxth	r2, r3
 800db5c:	887b      	ldrh	r3, [r7, #2]
 800db5e:	4413      	add	r3, r2
 800db60:	b299      	uxth	r1, r3
 800db62:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 800db64:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800db66:	2301      	movs	r3, #1
 800db68:	9301      	str	r3, [sp, #4]
 800db6a:	883b      	ldrh	r3, [r7, #0]
 800db6c:	9300      	str	r3, [sp, #0]
 800db6e:	4623      	mov	r3, r4
 800db70:	f000 fc44 	bl	800e3fc <ILI9341_Draw_Rectangle>
 800db74:	e02c      	b.n	800dbd0 <ILI9341_Draw_Char+0x144>
				}
            }
            else
            {
               	if(size == 1)
 800db76:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800db78:	2b01      	cmp	r3, #1
 800db7a:	d10e      	bne.n	800db9a <ILI9341_Draw_Char+0x10e>
				{
					ILI9341_Draw_Pixel(x+j, y+i, bgcolour);
 800db7c:	7d7b      	ldrb	r3, [r7, #21]
 800db7e:	b29a      	uxth	r2, r3
 800db80:	88bb      	ldrh	r3, [r7, #4]
 800db82:	4413      	add	r3, r2
 800db84:	b298      	uxth	r0, r3
 800db86:	7dbb      	ldrb	r3, [r7, #22]
 800db88:	b29a      	uxth	r2, r3
 800db8a:	887b      	ldrh	r3, [r7, #2]
 800db8c:	4413      	add	r3, r2
 800db8e:	b29b      	uxth	r3, r3
 800db90:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800db92:	4619      	mov	r1, r3
 800db94:	f000 fad8 	bl	800e148 <ILI9341_Draw_Pixel>
 800db98:	e01a      	b.n	800dbd0 <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, bgcolour, TEXT_CHUNK);
 800db9a:	7d7b      	ldrb	r3, [r7, #21]
 800db9c:	b29b      	uxth	r3, r3
 800db9e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800dba0:	fb12 f303 	smulbb	r3, r2, r3
 800dba4:	b29a      	uxth	r2, r3
 800dba6:	88bb      	ldrh	r3, [r7, #4]
 800dba8:	4413      	add	r3, r2
 800dbaa:	b298      	uxth	r0, r3
 800dbac:	7dbb      	ldrb	r3, [r7, #22]
 800dbae:	b29b      	uxth	r3, r3
 800dbb0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800dbb2:	fb12 f303 	smulbb	r3, r2, r3
 800dbb6:	b29a      	uxth	r2, r3
 800dbb8:	887b      	ldrh	r3, [r7, #2]
 800dbba:	4413      	add	r3, r2
 800dbbc:	b299      	uxth	r1, r3
 800dbbe:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 800dbc0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800dbc2:	2301      	movs	r3, #1
 800dbc4:	9301      	str	r3, [sp, #4]
 800dbc6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800dbc8:	9300      	str	r3, [sp, #0]
 800dbca:	4623      	mov	r3, r4
 800dbcc:	f000 fc16 	bl	800e3fc <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++)
 800dbd0:	7dbb      	ldrb	r3, [r7, #22]
 800dbd2:	3301      	adds	r3, #1
 800dbd4:	75bb      	strb	r3, [r7, #22]
 800dbd6:	7dbb      	ldrb	r3, [r7, #22]
 800dbd8:	2b07      	cmp	r3, #7
 800dbda:	d990      	bls.n	800dafe <ILI9341_Draw_Char+0x72>
    for (j=0; j<CHAR_WIDTH; j++)
 800dbdc:	7d7b      	ldrb	r3, [r7, #21]
 800dbde:	3301      	adds	r3, #1
 800dbe0:	757b      	strb	r3, [r7, #21]
 800dbe2:	7d7b      	ldrb	r3, [r7, #21]
 800dbe4:	2b05      	cmp	r3, #5
 800dbe6:	d987      	bls.n	800daf8 <ILI9341_Draw_Char+0x6c>
				}
            }
        }
    }
}
 800dbe8:	bf00      	nop
 800dbea:	371c      	adds	r7, #28
 800dbec:	46bd      	mov	sp, r7
 800dbee:	bd90      	pop	{r4, r7, pc}
 800dbf0:	08013730 	.word	0x08013730

0800dbf4 <ILI9341_Draw_Text>:
 *	@param None
 *	@retval None
 *
 */
void ILI9341_Draw_Text(const char* Text, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 800dbf4:	b590      	push	{r4, r7, lr}
 800dbf6:	b087      	sub	sp, #28
 800dbf8:	af02      	add	r7, sp, #8
 800dbfa:	60f8      	str	r0, [r7, #12]
 800dbfc:	4608      	mov	r0, r1
 800dbfe:	4611      	mov	r1, r2
 800dc00:	461a      	mov	r2, r3
 800dc02:	4603      	mov	r3, r0
 800dc04:	817b      	strh	r3, [r7, #10]
 800dc06:	460b      	mov	r3, r1
 800dc08:	813b      	strh	r3, [r7, #8]
 800dc0a:	4613      	mov	r3, r2
 800dc0c:	80fb      	strh	r3, [r7, #6]
	ILI9341_Draw_Vertical_Line(x-1, y, CHAR_HEIGHT*size, bgcolour);
 800dc0e:	897b      	ldrh	r3, [r7, #10]
 800dc10:	3b01      	subs	r3, #1
 800dc12:	b298      	uxth	r0, r3
 800dc14:	8c3b      	ldrh	r3, [r7, #32]
 800dc16:	00db      	lsls	r3, r3, #3
 800dc18:	b29a      	uxth	r2, r3
 800dc1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc1c:	8939      	ldrh	r1, [r7, #8]
 800dc1e:	f000 f9b9 	bl	800df94 <ILI9341_Draw_Vertical_Line>
    ILI9341_Draw_Vertical_Line(x-2, y, CHAR_HEIGHT*size, bgcolour);
 800dc22:	897b      	ldrh	r3, [r7, #10]
 800dc24:	3b02      	subs	r3, #2
 800dc26:	b298      	uxth	r0, r3
 800dc28:	8c3b      	ldrh	r3, [r7, #32]
 800dc2a:	00db      	lsls	r3, r3, #3
 800dc2c:	b29a      	uxth	r2, r3
 800dc2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc30:	8939      	ldrh	r1, [r7, #8]
 800dc32:	f000 f9af 	bl	800df94 <ILI9341_Draw_Vertical_Line>

    while (*Text) {
 800dc36:	e016      	b.n	800dc66 <ILI9341_Draw_Text+0x72>
        ILI9341_Draw_Char(*Text++, x, y, colour, size, bgcolour);
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	1c5a      	adds	r2, r3, #1
 800dc3c:	60fa      	str	r2, [r7, #12]
 800dc3e:	7818      	ldrb	r0, [r3, #0]
 800dc40:	88fc      	ldrh	r4, [r7, #6]
 800dc42:	893a      	ldrh	r2, [r7, #8]
 800dc44:	8979      	ldrh	r1, [r7, #10]
 800dc46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc48:	9301      	str	r3, [sp, #4]
 800dc4a:	8c3b      	ldrh	r3, [r7, #32]
 800dc4c:	9300      	str	r3, [sp, #0]
 800dc4e:	4623      	mov	r3, r4
 800dc50:	f7ff ff1c 	bl	800da8c <ILI9341_Draw_Char>
        x += CHAR_WIDTH*size;
 800dc54:	8c3b      	ldrh	r3, [r7, #32]
 800dc56:	461a      	mov	r2, r3
 800dc58:	0052      	lsls	r2, r2, #1
 800dc5a:	4413      	add	r3, r2
 800dc5c:	005b      	lsls	r3, r3, #1
 800dc5e:	b29a      	uxth	r2, r3
 800dc60:	897b      	ldrh	r3, [r7, #10]
 800dc62:	4413      	add	r3, r2
 800dc64:	817b      	strh	r3, [r7, #10]
    while (*Text) {
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	781b      	ldrb	r3, [r3, #0]
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d1e4      	bne.n	800dc38 <ILI9341_Draw_Text+0x44>
    }


}
 800dc6e:	bf00      	nop
 800dc70:	3714      	adds	r7, #20
 800dc72:	46bd      	mov	sp, r7
 800dc74:	bd90      	pop	{r4, r7, pc}

0800dc76 <ILI9341_Init>:
 *
 * Initialize LCD display
 *
 */
void ILI9341_Init(void)
{
 800dc76:	b580      	push	{r7, lr}
 800dc78:	af00      	add	r7, sp, #0

	_LCD_Enable();
 800dc7a:	f000 fca3 	bl	800e5c4 <_LCD_Enable>
	ILI9341_SPI_Init();
 800dc7e:	f000 f907 	bl	800de90 <ILI9341_SPI_Init>
	_LCD_Reset();
 800dc82:	f000 fcaf 	bl	800e5e4 <_LCD_Reset>

	//SOFTWARE RESET
	_LCD_SendCommand(0x01);
 800dc86:	2001      	movs	r0, #1
 800dc88:	f000 fd7a 	bl	800e780 <_LCD_SendCommand>
	HAL_Delay(2000);
 800dc8c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800dc90:	f7fa fdce 	bl	8008830 <HAL_Delay>

	//POWER CONTROL A
	_LCD_SendCommand(0xCB);
 800dc94:	20cb      	movs	r0, #203	; 0xcb
 800dc96:	f000 fd73 	bl	800e780 <_LCD_SendCommand>
	_LCD_SendData(0x39);
 800dc9a:	2039      	movs	r0, #57	; 0x39
 800dc9c:	f000 fda2 	bl	800e7e4 <_LCD_SendData>
	_LCD_SendData(0x2C);
 800dca0:	202c      	movs	r0, #44	; 0x2c
 800dca2:	f000 fd9f 	bl	800e7e4 <_LCD_SendData>
	_LCD_SendData(0x00);
 800dca6:	2000      	movs	r0, #0
 800dca8:	f000 fd9c 	bl	800e7e4 <_LCD_SendData>
	_LCD_SendData(0x34);
 800dcac:	2034      	movs	r0, #52	; 0x34
 800dcae:	f000 fd99 	bl	800e7e4 <_LCD_SendData>
	_LCD_SendData(0x02);
 800dcb2:	2002      	movs	r0, #2
 800dcb4:	f000 fd96 	bl	800e7e4 <_LCD_SendData>

	//POWER CONTROL B
	_LCD_SendCommand(0xCF);
 800dcb8:	20cf      	movs	r0, #207	; 0xcf
 800dcba:	f000 fd61 	bl	800e780 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800dcbe:	2000      	movs	r0, #0
 800dcc0:	f000 fd90 	bl	800e7e4 <_LCD_SendData>
	_LCD_SendData(0xC1);
 800dcc4:	20c1      	movs	r0, #193	; 0xc1
 800dcc6:	f000 fd8d 	bl	800e7e4 <_LCD_SendData>
	_LCD_SendData(0x30);
 800dcca:	2030      	movs	r0, #48	; 0x30
 800dccc:	f000 fd8a 	bl	800e7e4 <_LCD_SendData>

	//DRIVER TIMING CONTROL A
	_LCD_SendCommand(0xE8);
 800dcd0:	20e8      	movs	r0, #232	; 0xe8
 800dcd2:	f000 fd55 	bl	800e780 <_LCD_SendCommand>
	_LCD_SendData(0x85);
 800dcd6:	2085      	movs	r0, #133	; 0x85
 800dcd8:	f000 fd84 	bl	800e7e4 <_LCD_SendData>
	_LCD_SendData(0x00);
 800dcdc:	2000      	movs	r0, #0
 800dcde:	f000 fd81 	bl	800e7e4 <_LCD_SendData>
	_LCD_SendData(0x78);
 800dce2:	2078      	movs	r0, #120	; 0x78
 800dce4:	f000 fd7e 	bl	800e7e4 <_LCD_SendData>

	//DRIVER TIMING CONTROL B
	_LCD_SendCommand(0xEA);
 800dce8:	20ea      	movs	r0, #234	; 0xea
 800dcea:	f000 fd49 	bl	800e780 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800dcee:	2000      	movs	r0, #0
 800dcf0:	f000 fd78 	bl	800e7e4 <_LCD_SendData>
	_LCD_SendData(0x00);
 800dcf4:	2000      	movs	r0, #0
 800dcf6:	f000 fd75 	bl	800e7e4 <_LCD_SendData>

	//POWER ON SEQUENCE CONTROL
	_LCD_SendCommand(0xED);
 800dcfa:	20ed      	movs	r0, #237	; 0xed
 800dcfc:	f000 fd40 	bl	800e780 <_LCD_SendCommand>
	_LCD_SendData(0x64);
 800dd00:	2064      	movs	r0, #100	; 0x64
 800dd02:	f000 fd6f 	bl	800e7e4 <_LCD_SendData>
	_LCD_SendData(0x03);
 800dd06:	2003      	movs	r0, #3
 800dd08:	f000 fd6c 	bl	800e7e4 <_LCD_SendData>
	_LCD_SendData(0x12);
 800dd0c:	2012      	movs	r0, #18
 800dd0e:	f000 fd69 	bl	800e7e4 <_LCD_SendData>
	_LCD_SendData(0x81);
 800dd12:	2081      	movs	r0, #129	; 0x81
 800dd14:	f000 fd66 	bl	800e7e4 <_LCD_SendData>

	//PUMP RATIO CONTROL
	_LCD_SendCommand(0xF7);
 800dd18:	20f7      	movs	r0, #247	; 0xf7
 800dd1a:	f000 fd31 	bl	800e780 <_LCD_SendCommand>
	_LCD_SendData(0x20);
 800dd1e:	2020      	movs	r0, #32
 800dd20:	f000 fd60 	bl	800e7e4 <_LCD_SendData>

	//POWER CONTROL,VRH[5:0]
	_LCD_SendCommand(0xC0);
 800dd24:	20c0      	movs	r0, #192	; 0xc0
 800dd26:	f000 fd2b 	bl	800e780 <_LCD_SendCommand>
	_LCD_SendData(0x23);
 800dd2a:	2023      	movs	r0, #35	; 0x23
 800dd2c:	f000 fd5a 	bl	800e7e4 <_LCD_SendData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	_LCD_SendCommand(0xC1);
 800dd30:	20c1      	movs	r0, #193	; 0xc1
 800dd32:	f000 fd25 	bl	800e780 <_LCD_SendCommand>
	_LCD_SendData(0x10);
 800dd36:	2010      	movs	r0, #16
 800dd38:	f000 fd54 	bl	800e7e4 <_LCD_SendData>

	//VCM CONTROL
	_LCD_SendCommand(0xC5);
 800dd3c:	20c5      	movs	r0, #197	; 0xc5
 800dd3e:	f000 fd1f 	bl	800e780 <_LCD_SendCommand>
	_LCD_SendData(0x3E);
 800dd42:	203e      	movs	r0, #62	; 0x3e
 800dd44:	f000 fd4e 	bl	800e7e4 <_LCD_SendData>
	_LCD_SendData(0x28);
 800dd48:	2028      	movs	r0, #40	; 0x28
 800dd4a:	f000 fd4b 	bl	800e7e4 <_LCD_SendData>

	//VCM CONTROL 2
	_LCD_SendCommand(0xC7);
 800dd4e:	20c7      	movs	r0, #199	; 0xc7
 800dd50:	f000 fd16 	bl	800e780 <_LCD_SendCommand>
	_LCD_SendData(0x86);
 800dd54:	2086      	movs	r0, #134	; 0x86
 800dd56:	f000 fd45 	bl	800e7e4 <_LCD_SendData>

	//MEMORY ACCESS CONTROL
	_LCD_SendCommand(0x36);
 800dd5a:	2036      	movs	r0, #54	; 0x36
 800dd5c:	f000 fd10 	bl	800e780 <_LCD_SendCommand>
	_LCD_SendData(0x48);
 800dd60:	2048      	movs	r0, #72	; 0x48
 800dd62:	f000 fd3f 	bl	800e7e4 <_LCD_SendData>


	//PIXEL FORMAT
	_LCD_SendCommand(0x3A);
 800dd66:	203a      	movs	r0, #58	; 0x3a
 800dd68:	f000 fd0a 	bl	800e780 <_LCD_SendCommand>
	_LCD_SendData(0x55);
 800dd6c:	2055      	movs	r0, #85	; 0x55
 800dd6e:	f000 fd39 	bl	800e7e4 <_LCD_SendData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	_LCD_SendCommand(0xB1);
 800dd72:	20b1      	movs	r0, #177	; 0xb1
 800dd74:	f000 fd04 	bl	800e780 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800dd78:	2000      	movs	r0, #0
 800dd7a:	f000 fd33 	bl	800e7e4 <_LCD_SendData>
	_LCD_SendData(0x18);
 800dd7e:	2018      	movs	r0, #24
 800dd80:	f000 fd30 	bl	800e7e4 <_LCD_SendData>

	//DISPLAY FUNCTION CONTROL
	_LCD_SendCommand(0xB6);
 800dd84:	20b6      	movs	r0, #182	; 0xb6
 800dd86:	f000 fcfb 	bl	800e780 <_LCD_SendCommand>
	_LCD_SendData(0x08);
 800dd8a:	2008      	movs	r0, #8
 800dd8c:	f000 fd2a 	bl	800e7e4 <_LCD_SendData>
	_LCD_SendData(0x82);
 800dd90:	2082      	movs	r0, #130	; 0x82
 800dd92:	f000 fd27 	bl	800e7e4 <_LCD_SendData>
	_LCD_SendData(0x27);
 800dd96:	2027      	movs	r0, #39	; 0x27
 800dd98:	f000 fd24 	bl	800e7e4 <_LCD_SendData>


	//3GAMMA FUNCTION DISABLE
	_LCD_SendCommand(0xF2);
 800dd9c:	20f2      	movs	r0, #242	; 0xf2
 800dd9e:	f000 fcef 	bl	800e780 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800dda2:	2000      	movs	r0, #0
 800dda4:	f000 fd1e 	bl	800e7e4 <_LCD_SendData>

	//GAMMA CURVE SELECTED
	_LCD_SendCommand(0x26);
 800dda8:	2026      	movs	r0, #38	; 0x26
 800ddaa:	f000 fce9 	bl	800e780 <_LCD_SendCommand>
	_LCD_SendData(0x01);
 800ddae:	2001      	movs	r0, #1
 800ddb0:	f000 fd18 	bl	800e7e4 <_LCD_SendData>

	//POSITIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE0);
 800ddb4:	20e0      	movs	r0, #224	; 0xe0
 800ddb6:	f000 fce3 	bl	800e780 <_LCD_SendCommand>
	_LCD_SendData(0x0F);
 800ddba:	200f      	movs	r0, #15
 800ddbc:	f000 fd12 	bl	800e7e4 <_LCD_SendData>
	_LCD_SendData(0x31);
 800ddc0:	2031      	movs	r0, #49	; 0x31
 800ddc2:	f000 fd0f 	bl	800e7e4 <_LCD_SendData>
	_LCD_SendData(0x2B);
 800ddc6:	202b      	movs	r0, #43	; 0x2b
 800ddc8:	f000 fd0c 	bl	800e7e4 <_LCD_SendData>
	_LCD_SendData(0x0C);
 800ddcc:	200c      	movs	r0, #12
 800ddce:	f000 fd09 	bl	800e7e4 <_LCD_SendData>
	_LCD_SendData(0x0E);
 800ddd2:	200e      	movs	r0, #14
 800ddd4:	f000 fd06 	bl	800e7e4 <_LCD_SendData>
	_LCD_SendData(0x08);
 800ddd8:	2008      	movs	r0, #8
 800ddda:	f000 fd03 	bl	800e7e4 <_LCD_SendData>
	_LCD_SendData(0x4E);
 800ddde:	204e      	movs	r0, #78	; 0x4e
 800dde0:	f000 fd00 	bl	800e7e4 <_LCD_SendData>
	_LCD_SendData(0xF1);
 800dde4:	20f1      	movs	r0, #241	; 0xf1
 800dde6:	f000 fcfd 	bl	800e7e4 <_LCD_SendData>
	_LCD_SendData(0x37);
 800ddea:	2037      	movs	r0, #55	; 0x37
 800ddec:	f000 fcfa 	bl	800e7e4 <_LCD_SendData>
	_LCD_SendData(0x07);
 800ddf0:	2007      	movs	r0, #7
 800ddf2:	f000 fcf7 	bl	800e7e4 <_LCD_SendData>
	_LCD_SendData(0x10);
 800ddf6:	2010      	movs	r0, #16
 800ddf8:	f000 fcf4 	bl	800e7e4 <_LCD_SendData>
	_LCD_SendData(0x03);
 800ddfc:	2003      	movs	r0, #3
 800ddfe:	f000 fcf1 	bl	800e7e4 <_LCD_SendData>
	_LCD_SendData(0x0E);
 800de02:	200e      	movs	r0, #14
 800de04:	f000 fcee 	bl	800e7e4 <_LCD_SendData>
	_LCD_SendData(0x09);
 800de08:	2009      	movs	r0, #9
 800de0a:	f000 fceb 	bl	800e7e4 <_LCD_SendData>
	_LCD_SendData(0x00);
 800de0e:	2000      	movs	r0, #0
 800de10:	f000 fce8 	bl	800e7e4 <_LCD_SendData>

	//NEGATIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE1);
 800de14:	20e1      	movs	r0, #225	; 0xe1
 800de16:	f000 fcb3 	bl	800e780 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800de1a:	2000      	movs	r0, #0
 800de1c:	f000 fce2 	bl	800e7e4 <_LCD_SendData>
	_LCD_SendData(0x0E);
 800de20:	200e      	movs	r0, #14
 800de22:	f000 fcdf 	bl	800e7e4 <_LCD_SendData>
	_LCD_SendData(0x14);
 800de26:	2014      	movs	r0, #20
 800de28:	f000 fcdc 	bl	800e7e4 <_LCD_SendData>
	_LCD_SendData(0x03);
 800de2c:	2003      	movs	r0, #3
 800de2e:	f000 fcd9 	bl	800e7e4 <_LCD_SendData>
	_LCD_SendData(0x11);
 800de32:	2011      	movs	r0, #17
 800de34:	f000 fcd6 	bl	800e7e4 <_LCD_SendData>
	_LCD_SendData(0x07);
 800de38:	2007      	movs	r0, #7
 800de3a:	f000 fcd3 	bl	800e7e4 <_LCD_SendData>
	_LCD_SendData(0x31);
 800de3e:	2031      	movs	r0, #49	; 0x31
 800de40:	f000 fcd0 	bl	800e7e4 <_LCD_SendData>
	_LCD_SendData(0xC1);
 800de44:	20c1      	movs	r0, #193	; 0xc1
 800de46:	f000 fccd 	bl	800e7e4 <_LCD_SendData>
	_LCD_SendData(0x48);
 800de4a:	2048      	movs	r0, #72	; 0x48
 800de4c:	f000 fcca 	bl	800e7e4 <_LCD_SendData>
	_LCD_SendData(0x08);
 800de50:	2008      	movs	r0, #8
 800de52:	f000 fcc7 	bl	800e7e4 <_LCD_SendData>
	_LCD_SendData(0x0F);
 800de56:	200f      	movs	r0, #15
 800de58:	f000 fcc4 	bl	800e7e4 <_LCD_SendData>
	_LCD_SendData(0x0C);
 800de5c:	200c      	movs	r0, #12
 800de5e:	f000 fcc1 	bl	800e7e4 <_LCD_SendData>
	_LCD_SendData(0x31);
 800de62:	2031      	movs	r0, #49	; 0x31
 800de64:	f000 fcbe 	bl	800e7e4 <_LCD_SendData>
	_LCD_SendData(0x36);
 800de68:	2036      	movs	r0, #54	; 0x36
 800de6a:	f000 fcbb 	bl	800e7e4 <_LCD_SendData>
	_LCD_SendData(0x0F);
 800de6e:	200f      	movs	r0, #15
 800de70:	f000 fcb8 	bl	800e7e4 <_LCD_SendData>

	//EXIT SLEEP
	_LCD_SendCommand(0x11);
 800de74:	2011      	movs	r0, #17
 800de76:	f000 fc83 	bl	800e780 <_LCD_SendCommand>
	HAL_Delay(240);
 800de7a:	20f0      	movs	r0, #240	; 0xf0
 800de7c:	f7fa fcd8 	bl	8008830 <HAL_Delay>

	//TURN ON DISPLAY
	_LCD_SendCommand(0x29);
 800de80:	2029      	movs	r0, #41	; 0x29
 800de82:	f000 fc7d 	bl	800e780 <_LCD_SendCommand>

	//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 800de86:	2000      	movs	r0, #0
 800de88:	f000 fb4e 	bl	800e528 <ILI9341_Set_Rotation>
}
 800de8c:	bf00      	nop
 800de8e:	bd80      	pop	{r7, pc}

0800de90 <ILI9341_SPI_Init>:
 *
 * 	Initialise SPI peripheral
 *
 */
void ILI9341_SPI_Init(void)
{
 800de90:	b480      	push	{r7}
 800de92:	af00      	add	r7, sp, #0

   	// check SPI enabled
	if ((SPI_PERIPH->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800de94:	4b0b      	ldr	r3, [pc, #44]	; (800dec4 <ILI9341_SPI_Init+0x34>)
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de9c:	2b40      	cmp	r3, #64	; 0x40
 800de9e:	d005      	beq.n	800deac <ILI9341_SPI_Init+0x1c>
	{
		SPI_PERIPH->CR1 |= SPI_CR1_SPE;
 800dea0:	4b08      	ldr	r3, [pc, #32]	; (800dec4 <ILI9341_SPI_Init+0x34>)
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	4a07      	ldr	r2, [pc, #28]	; (800dec4 <ILI9341_SPI_Init+0x34>)
 800dea6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800deaa:	6013      	str	r3, [r2, #0]
	}

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800deac:	4b06      	ldr	r3, [pc, #24]	; (800dec8 <ILI9341_SPI_Init+0x38>)
 800deae:	695b      	ldr	r3, [r3, #20]
 800deb0:	4a05      	ldr	r2, [pc, #20]	; (800dec8 <ILI9341_SPI_Init+0x38>)
 800deb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800deb6:	6153      	str	r3, [r2, #20]
}
 800deb8:	bf00      	nop
 800deba:	46bd      	mov	sp, r7
 800debc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec0:	4770      	bx	lr
 800dec2:	bf00      	nop
 800dec4:	40003c00 	.word	0x40003c00
 800dec8:	48000400 	.word	0x48000400

0800decc <ILI9341_Draw_Horizontal_Line>:
 *	Draw horizontal line
 *
 */

void ILI9341_Draw_Horizontal_Line(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t colour)
{
 800decc:	b590      	push	{r4, r7, lr}
 800dece:	b087      	sub	sp, #28
 800ded0:	af02      	add	r7, sp, #8
 800ded2:	4604      	mov	r4, r0
 800ded4:	4608      	mov	r0, r1
 800ded6:	4611      	mov	r1, r2
 800ded8:	461a      	mov	r2, r3
 800deda:	4623      	mov	r3, r4
 800dedc:	80fb      	strh	r3, [r7, #6]
 800dede:	4603      	mov	r3, r0
 800dee0:	80bb      	strh	r3, [r7, #4]
 800dee2:	460b      	mov	r3, r1
 800dee4:	807b      	strh	r3, [r7, #2]
 800dee6:	4613      	mov	r3, r2
 800dee8:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800deea:	4b28      	ldr	r3, [pc, #160]	; (800df8c <ILI9341_Draw_Horizontal_Line+0xc0>)
 800deec:	881b      	ldrh	r3, [r3, #0]
 800deee:	b29b      	uxth	r3, r3
 800def0:	88fa      	ldrh	r2, [r7, #6]
 800def2:	429a      	cmp	r2, r3
 800def4:	d246      	bcs.n	800df84 <ILI9341_Draw_Horizontal_Line+0xb8>
 800def6:	4b26      	ldr	r3, [pc, #152]	; (800df90 <ILI9341_Draw_Horizontal_Line+0xc4>)
 800def8:	881b      	ldrh	r3, [r3, #0]
 800defa:	b29b      	uxth	r3, r3
 800defc:	88ba      	ldrh	r2, [r7, #4]
 800defe:	429a      	cmp	r2, r3
 800df00:	d240      	bcs.n	800df84 <ILI9341_Draw_Horizontal_Line+0xb8>
	if(((xpos + width) - 1 ) >= LCD_WIDTH)
 800df02:	88fa      	ldrh	r2, [r7, #6]
 800df04:	887b      	ldrh	r3, [r7, #2]
 800df06:	4413      	add	r3, r2
 800df08:	3b01      	subs	r3, #1
 800df0a:	4a20      	ldr	r2, [pc, #128]	; (800df8c <ILI9341_Draw_Horizontal_Line+0xc0>)
 800df0c:	8812      	ldrh	r2, [r2, #0]
 800df0e:	b292      	uxth	r2, r2
 800df10:	4293      	cmp	r3, r2
 800df12:	db05      	blt.n	800df20 <ILI9341_Draw_Horizontal_Line+0x54>
		{
			width= LCD_WIDTH - xpos;
 800df14:	4b1d      	ldr	r3, [pc, #116]	; (800df8c <ILI9341_Draw_Horizontal_Line+0xc0>)
 800df16:	881b      	ldrh	r3, [r3, #0]
 800df18:	b29a      	uxth	r2, r3
 800df1a:	88fb      	ldrh	r3, [r7, #6]
 800df1c:	1ad3      	subs	r3, r2, r3
 800df1e:	807b      	strh	r3, [r7, #2]
		}
	ILI9341_Set_Frame(	xpos,
							ypos,
							(xpos + width) - 1,
 800df20:	88fa      	ldrh	r2, [r7, #6]
 800df22:	887b      	ldrh	r3, [r7, #2]
 800df24:	4413      	add	r3, r2
 800df26:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800df28:	3b01      	subs	r3, #1
 800df2a:	b29a      	uxth	r2, r3
 800df2c:	88bb      	ldrh	r3, [r7, #4]
 800df2e:	88b9      	ldrh	r1, [r7, #4]
 800df30:	88f8      	ldrh	r0, [r7, #6]
 800df32:	f000 f893 	bl	800e05c <ILI9341_Set_Frame>
	// to keep _LCD_Write_Frame() happy.

	// Note, truncated pixel will be needed at function end.


	uint8_t truncated = 0;
 800df36:	2300      	movs	r3, #0
 800df38:	73fb      	strb	r3, [r7, #15]

	if((width & 1) && (width > 1))		// don't round down to zero!
 800df3a:	887b      	ldrh	r3, [r7, #2]
 800df3c:	f003 0301 	and.w	r3, r3, #1
 800df40:	2b00      	cmp	r3, #0
 800df42:	d009      	beq.n	800df58 <ILI9341_Draw_Horizontal_Line+0x8c>
 800df44:	887b      	ldrh	r3, [r7, #2]
 800df46:	2b01      	cmp	r3, #1
 800df48:	d906      	bls.n	800df58 <ILI9341_Draw_Horizontal_Line+0x8c>
	{
		truncated = 1;
 800df4a:	2301      	movs	r3, #1
 800df4c:	73fb      	strb	r3, [r7, #15]
		width = ((width >> 1) * 2);
 800df4e:	887b      	ldrh	r3, [r7, #2]
 800df50:	085b      	lsrs	r3, r3, #1
 800df52:	b29b      	uxth	r3, r3
 800df54:	005b      	lsls	r3, r3, #1
 800df56:	807b      	strh	r3, [r7, #2]
	}
	_LCD_Write_Frame(xpos, ypos, colour, width, LINE_CHUNK);
 800df58:	887c      	ldrh	r4, [r7, #2]
 800df5a:	883a      	ldrh	r2, [r7, #0]
 800df5c:	88b9      	ldrh	r1, [r7, #4]
 800df5e:	88f8      	ldrh	r0, [r7, #6]
 800df60:	2303      	movs	r3, #3
 800df62:	9300      	str	r3, [sp, #0]
 800df64:	4623      	mov	r3, r4
 800df66:	f000 fb5b 	bl	800e620 <_LCD_Write_Frame>
	//
//TODO
	// add the truncated pixel now
	if(truncated)
 800df6a:	7bfb      	ldrb	r3, [r7, #15]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d00a      	beq.n	800df86 <ILI9341_Draw_Horizontal_Line+0xba>
	{
		ILI9341_Draw_Pixel(	(xpos + width),
 800df70:	88fa      	ldrh	r2, [r7, #6]
 800df72:	887b      	ldrh	r3, [r7, #2]
 800df74:	4413      	add	r3, r2
 800df76:	b29b      	uxth	r3, r3
 800df78:	883a      	ldrh	r2, [r7, #0]
 800df7a:	88b9      	ldrh	r1, [r7, #4]
 800df7c:	4618      	mov	r0, r3
 800df7e:	f000 f8e3 	bl	800e148 <ILI9341_Draw_Pixel>
 800df82:	e000      	b.n	800df86 <ILI9341_Draw_Horizontal_Line+0xba>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800df84:	bf00      	nop
							(ypos),
							colour);
	}


}
 800df86:	3714      	adds	r7, #20
 800df88:	46bd      	mov	sp, r7
 800df8a:	bd90      	pop	{r4, r7, pc}
 800df8c:	20000cae 	.word	0x20000cae
 800df90:	20000cac 	.word	0x20000cac

0800df94 <ILI9341_Draw_Vertical_Line>:
 *
 *  Draw vertical line
 *
 */
void ILI9341_Draw_Vertical_Line(uint16_t xpos, uint16_t ypos, uint16_t height, uint16_t colour)
{
 800df94:	b590      	push	{r4, r7, lr}
 800df96:	b087      	sub	sp, #28
 800df98:	af02      	add	r7, sp, #8
 800df9a:	4604      	mov	r4, r0
 800df9c:	4608      	mov	r0, r1
 800df9e:	4611      	mov	r1, r2
 800dfa0:	461a      	mov	r2, r3
 800dfa2:	4623      	mov	r3, r4
 800dfa4:	80fb      	strh	r3, [r7, #6]
 800dfa6:	4603      	mov	r3, r0
 800dfa8:	80bb      	strh	r3, [r7, #4]
 800dfaa:	460b      	mov	r3, r1
 800dfac:	807b      	strh	r3, [r7, #2]
 800dfae:	4613      	mov	r3, r2
 800dfb0:	803b      	strh	r3, [r7, #0]
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 800dfb2:	4b28      	ldr	r3, [pc, #160]	; (800e054 <ILI9341_Draw_Vertical_Line+0xc0>)
 800dfb4:	881b      	ldrh	r3, [r3, #0]
 800dfb6:	b29b      	uxth	r3, r3
 800dfb8:	88fa      	ldrh	r2, [r7, #6]
 800dfba:	429a      	cmp	r2, r3
 800dfbc:	d246      	bcs.n	800e04c <ILI9341_Draw_Vertical_Line+0xb8>
 800dfbe:	4b26      	ldr	r3, [pc, #152]	; (800e058 <ILI9341_Draw_Vertical_Line+0xc4>)
 800dfc0:	881b      	ldrh	r3, [r3, #0]
 800dfc2:	b29b      	uxth	r3, r3
 800dfc4:	88ba      	ldrh	r2, [r7, #4]
 800dfc6:	429a      	cmp	r2, r3
 800dfc8:	d240      	bcs.n	800e04c <ILI9341_Draw_Vertical_Line+0xb8>
	if(((ypos + height) - 1) >= LCD_HEIGHT)
 800dfca:	88ba      	ldrh	r2, [r7, #4]
 800dfcc:	887b      	ldrh	r3, [r7, #2]
 800dfce:	4413      	add	r3, r2
 800dfd0:	3b01      	subs	r3, #1
 800dfd2:	4a21      	ldr	r2, [pc, #132]	; (800e058 <ILI9341_Draw_Vertical_Line+0xc4>)
 800dfd4:	8812      	ldrh	r2, [r2, #0]
 800dfd6:	b292      	uxth	r2, r2
 800dfd8:	4293      	cmp	r3, r2
 800dfda:	db05      	blt.n	800dfe8 <ILI9341_Draw_Vertical_Line+0x54>
	{
		height= LCD_HEIGHT - ypos;
 800dfdc:	4b1e      	ldr	r3, [pc, #120]	; (800e058 <ILI9341_Draw_Vertical_Line+0xc4>)
 800dfde:	881b      	ldrh	r3, [r3, #0]
 800dfe0:	b29a      	uxth	r2, r3
 800dfe2:	88bb      	ldrh	r3, [r7, #4]
 800dfe4:	1ad3      	subs	r3, r2, r3
 800dfe6:	807b      	strh	r3, [r7, #2]
	}

	ILI9341_Set_Frame(xpos, ypos, xpos, (ypos + height) - 1);
 800dfe8:	88ba      	ldrh	r2, [r7, #4]
 800dfea:	887b      	ldrh	r3, [r7, #2]
 800dfec:	4413      	add	r3, r2
 800dfee:	b29b      	uxth	r3, r3
 800dff0:	3b01      	subs	r3, #1
 800dff2:	b29b      	uxth	r3, r3
 800dff4:	88fa      	ldrh	r2, [r7, #6]
 800dff6:	88b9      	ldrh	r1, [r7, #4]
 800dff8:	88f8      	ldrh	r0, [r7, #6]
 800dffa:	f000 f82f 	bl	800e05c <ILI9341_Set_Frame>

	uint8_t truncated = 0;
 800dffe:	2300      	movs	r3, #0
 800e000:	73fb      	strb	r3, [r7, #15]

	if((height & 1) && (height > 1))		// don't round down to zero!
 800e002:	887b      	ldrh	r3, [r7, #2]
 800e004:	f003 0301 	and.w	r3, r3, #1
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d009      	beq.n	800e020 <ILI9341_Draw_Vertical_Line+0x8c>
 800e00c:	887b      	ldrh	r3, [r7, #2]
 800e00e:	2b01      	cmp	r3, #1
 800e010:	d906      	bls.n	800e020 <ILI9341_Draw_Vertical_Line+0x8c>
	{
		truncated = 1;
 800e012:	2301      	movs	r3, #1
 800e014:	73fb      	strb	r3, [r7, #15]
		height = ((height >> 1) * 2);
 800e016:	887b      	ldrh	r3, [r7, #2]
 800e018:	085b      	lsrs	r3, r3, #1
 800e01a:	b29b      	uxth	r3, r3
 800e01c:	005b      	lsls	r3, r3, #1
 800e01e:	807b      	strh	r3, [r7, #2]
//TODO


	//

	if(truncated)
 800e020:	7bfb      	ldrb	r3, [r7, #15]
 800e022:	2b00      	cmp	r3, #0
 800e024:	d008      	beq.n	800e038 <ILI9341_Draw_Vertical_Line+0xa4>
	{
		ILI9341_Draw_Pixel(	(xpos),
 800e026:	88ba      	ldrh	r2, [r7, #4]
 800e028:	887b      	ldrh	r3, [r7, #2]
 800e02a:	4413      	add	r3, r2
 800e02c:	b299      	uxth	r1, r3
 800e02e:	883a      	ldrh	r2, [r7, #0]
 800e030:	88fb      	ldrh	r3, [r7, #6]
 800e032:	4618      	mov	r0, r3
 800e034:	f000 f888 	bl	800e148 <ILI9341_Draw_Pixel>
							(ypos + height),
							colour);
	}

	_LCD_Write_Frame(xpos, ypos, colour, height, LINE_CHUNK);
 800e038:	887c      	ldrh	r4, [r7, #2]
 800e03a:	883a      	ldrh	r2, [r7, #0]
 800e03c:	88b9      	ldrh	r1, [r7, #4]
 800e03e:	88f8      	ldrh	r0, [r7, #6]
 800e040:	2303      	movs	r3, #3
 800e042:	9300      	str	r3, [sp, #0]
 800e044:	4623      	mov	r3, r4
 800e046:	f000 faeb 	bl	800e620 <_LCD_Write_Frame>
 800e04a:	e000      	b.n	800e04e <ILI9341_Draw_Vertical_Line+0xba>
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 800e04c:	bf00      	nop
}
 800e04e:	3714      	adds	r7, #20
 800e050:	46bd      	mov	sp, r7
 800e052:	bd90      	pop	{r4, r7, pc}
 800e054:	20000cae 	.word	0x20000cae
 800e058:	20000cac 	.word	0x20000cac

0800e05c <ILI9341_Set_Frame>:
 *	bottom right of area (ec, ep):
 *	ec 	- 	"end column"
 *	ep	- 	"end page"
 */
void ILI9341_Set_Frame(uint16_t sc, uint16_t sp, uint16_t ec, uint16_t ep)
{
 800e05c:	b590      	push	{r4, r7, lr}
 800e05e:	b083      	sub	sp, #12
 800e060:	af00      	add	r7, sp, #0
 800e062:	4604      	mov	r4, r0
 800e064:	4608      	mov	r0, r1
 800e066:	4611      	mov	r1, r2
 800e068:	461a      	mov	r2, r3
 800e06a:	4623      	mov	r3, r4
 800e06c:	80fb      	strh	r3, [r7, #6]
 800e06e:	4603      	mov	r3, r0
 800e070:	80bb      	strh	r3, [r7, #4]
 800e072:	460b      	mov	r3, r1
 800e074:	807b      	strh	r3, [r7, #2]
 800e076:	4613      	mov	r3, r2
 800e078:	803b      	strh	r3, [r7, #0]
	// send "Column Address Set" command
	_LCD_SendCommand(0x2A);
 800e07a:	202a      	movs	r0, #42	; 0x2a
 800e07c:	f000 fb80 	bl	800e780 <_LCD_SendCommand>
	_LCD_SendData(sc >> 8);
 800e080:	88fb      	ldrh	r3, [r7, #6]
 800e082:	0a1b      	lsrs	r3, r3, #8
 800e084:	b29b      	uxth	r3, r3
 800e086:	b2db      	uxtb	r3, r3
 800e088:	4618      	mov	r0, r3
 800e08a:	f000 fbab 	bl	800e7e4 <_LCD_SendData>
	_LCD_SendData(sc);
 800e08e:	88fb      	ldrh	r3, [r7, #6]
 800e090:	b2db      	uxtb	r3, r3
 800e092:	4618      	mov	r0, r3
 800e094:	f000 fba6 	bl	800e7e4 <_LCD_SendData>
	_LCD_SendData(ec >> 8);
 800e098:	887b      	ldrh	r3, [r7, #2]
 800e09a:	0a1b      	lsrs	r3, r3, #8
 800e09c:	b29b      	uxth	r3, r3
 800e09e:	b2db      	uxtb	r3, r3
 800e0a0:	4618      	mov	r0, r3
 800e0a2:	f000 fb9f 	bl	800e7e4 <_LCD_SendData>
	_LCD_SendData(ec);
 800e0a6:	887b      	ldrh	r3, [r7, #2]
 800e0a8:	b2db      	uxtb	r3, r3
 800e0aa:	4618      	mov	r0, r3
 800e0ac:	f000 fb9a 	bl	800e7e4 <_LCD_SendData>

	// send "Page Address Set" command
	_LCD_SendCommand(0x2B);
 800e0b0:	202b      	movs	r0, #43	; 0x2b
 800e0b2:	f000 fb65 	bl	800e780 <_LCD_SendCommand>
	_LCD_SendData(sp >> 8);
 800e0b6:	88bb      	ldrh	r3, [r7, #4]
 800e0b8:	0a1b      	lsrs	r3, r3, #8
 800e0ba:	b29b      	uxth	r3, r3
 800e0bc:	b2db      	uxtb	r3, r3
 800e0be:	4618      	mov	r0, r3
 800e0c0:	f000 fb90 	bl	800e7e4 <_LCD_SendData>
	_LCD_SendData(sp);
 800e0c4:	88bb      	ldrh	r3, [r7, #4]
 800e0c6:	b2db      	uxtb	r3, r3
 800e0c8:	4618      	mov	r0, r3
 800e0ca:	f000 fb8b 	bl	800e7e4 <_LCD_SendData>
	_LCD_SendData(ep >> 8);
 800e0ce:	883b      	ldrh	r3, [r7, #0]
 800e0d0:	0a1b      	lsrs	r3, r3, #8
 800e0d2:	b29b      	uxth	r3, r3
 800e0d4:	b2db      	uxtb	r3, r3
 800e0d6:	4618      	mov	r0, r3
 800e0d8:	f000 fb84 	bl	800e7e4 <_LCD_SendData>
	_LCD_SendData(ep);
 800e0dc:	883b      	ldrh	r3, [r7, #0]
 800e0de:	b2db      	uxtb	r3, r3
 800e0e0:	4618      	mov	r0, r3
 800e0e2:	f000 fb7f 	bl	800e7e4 <_LCD_SendData>

	_LCD_SendCommand(0x2C);
 800e0e6:	202c      	movs	r0, #44	; 0x2c
 800e0e8:	f000 fb4a 	bl	800e780 <_LCD_SendCommand>
}
 800e0ec:	bf00      	nop
 800e0ee:	370c      	adds	r7, #12
 800e0f0:	46bd      	mov	sp, r7
 800e0f2:	bd90      	pop	{r4, r7, pc}

0800e0f4 <ILI9341_Fill_Screen>:
 *
 * 	Sets address (entire screen) and Sends height*width ammount of colour information to LCD
 *
 */
void ILI9341_Fill_Screen(uint16_t colour)
{
 800e0f4:	b580      	push	{r7, lr}
 800e0f6:	b084      	sub	sp, #16
 800e0f8:	af02      	add	r7, sp, #8
 800e0fa:	4603      	mov	r3, r0
 800e0fc:	80fb      	strh	r3, [r7, #6]
	ILI9341_Set_Frame(0,0,LCD_WIDTH,LCD_HEIGHT);
 800e0fe:	4b10      	ldr	r3, [pc, #64]	; (800e140 <ILI9341_Fill_Screen+0x4c>)
 800e100:	881b      	ldrh	r3, [r3, #0]
 800e102:	b29a      	uxth	r2, r3
 800e104:	4b0f      	ldr	r3, [pc, #60]	; (800e144 <ILI9341_Fill_Screen+0x50>)
 800e106:	881b      	ldrh	r3, [r3, #0]
 800e108:	b29b      	uxth	r3, r3
 800e10a:	2100      	movs	r1, #0
 800e10c:	2000      	movs	r0, #0
 800e10e:	f7ff ffa5 	bl	800e05c <ILI9341_Set_Frame>
	_LCD_Write_Frame(0, 0, colour, LCD_WIDTH*LCD_HEIGHT, AREA_CHUNK);
 800e112:	4b0b      	ldr	r3, [pc, #44]	; (800e140 <ILI9341_Fill_Screen+0x4c>)
 800e114:	881b      	ldrh	r3, [r3, #0]
 800e116:	b29b      	uxth	r3, r3
 800e118:	461a      	mov	r2, r3
 800e11a:	4b0a      	ldr	r3, [pc, #40]	; (800e144 <ILI9341_Fill_Screen+0x50>)
 800e11c:	881b      	ldrh	r3, [r3, #0]
 800e11e:	b29b      	uxth	r3, r3
 800e120:	fb03 f302 	mul.w	r3, r3, r2
 800e124:	4619      	mov	r1, r3
 800e126:	88fa      	ldrh	r2, [r7, #6]
 800e128:	2304      	movs	r3, #4
 800e12a:	9300      	str	r3, [sp, #0]
 800e12c:	460b      	mov	r3, r1
 800e12e:	2100      	movs	r1, #0
 800e130:	2000      	movs	r0, #0
 800e132:	f000 fa75 	bl	800e620 <_LCD_Write_Frame>
}
 800e136:	bf00      	nop
 800e138:	3708      	adds	r7, #8
 800e13a:	46bd      	mov	sp, r7
 800e13c:	bd80      	pop	{r7, pc}
 800e13e:	bf00      	nop
 800e140:	20000cae 	.word	0x20000cae
 800e144:	20000cac 	.word	0x20000cac

0800e148 <ILI9341_Draw_Pixel>:
 * 	Using pixels to draw big simple structures is not recommended as it is really slow
 * 	Try using either rectangles or lines if possible
 *
 */
void ILI9341_Draw_Pixel(uint16_t x,uint16_t y,uint16_t colour)
{
 800e148:	b580      	push	{r7, lr}
 800e14a:	b08e      	sub	sp, #56	; 0x38
 800e14c:	af00      	add	r7, sp, #0
 800e14e:	4603      	mov	r3, r0
 800e150:	80fb      	strh	r3, [r7, #6]
 800e152:	460b      	mov	r3, r1
 800e154:	80bb      	strh	r3, [r7, #4]
 800e156:	4613      	mov	r3, r2
 800e158:	807b      	strh	r3, [r7, #2]
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800e15a:	4b98      	ldr	r3, [pc, #608]	; (800e3bc <ILI9341_Draw_Pixel+0x274>)
 800e15c:	881b      	ldrh	r3, [r3, #0]
 800e15e:	b29b      	uxth	r3, r3
 800e160:	88fa      	ldrh	r2, [r7, #6]
 800e162:	429a      	cmp	r2, r3
 800e164:	f080 8143 	bcs.w	800e3ee <ILI9341_Draw_Pixel+0x2a6>
 800e168:	4b95      	ldr	r3, [pc, #596]	; (800e3c0 <ILI9341_Draw_Pixel+0x278>)
 800e16a:	881b      	ldrh	r3, [r3, #0]
 800e16c:	b29b      	uxth	r3, r3
 800e16e:	88ba      	ldrh	r2, [r7, #4]
 800e170:	429a      	cmp	r2, r3
 800e172:	f080 813c 	bcs.w	800e3ee <ILI9341_Draw_Pixel+0x2a6>

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800e176:	4b93      	ldr	r3, [pc, #588]	; (800e3c4 <ILI9341_Draw_Pixel+0x27c>)
 800e178:	695b      	ldr	r3, [r3, #20]
 800e17a:	4a92      	ldr	r2, [pc, #584]	; (800e3c4 <ILI9341_Draw_Pixel+0x27c>)
 800e17c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e180:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e182:	4b90      	ldr	r3, [pc, #576]	; (800e3c4 <ILI9341_Draw_Pixel+0x27c>)
 800e184:	695b      	ldr	r3, [r3, #20]
 800e186:	4a8f      	ldr	r2, [pc, #572]	; (800e3c4 <ILI9341_Draw_Pixel+0x27c>)
 800e188:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e18c:	6153      	str	r3, [r2, #20]
	_SPI_SendByte(0x2A, 0, 10);
 800e18e:	220a      	movs	r2, #10
 800e190:	2100      	movs	r1, #0
 800e192:	202a      	movs	r0, #42	; 0x2a
 800e194:	f000 fb58 	bl	800e848 <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e198:	2300      	movs	r3, #0
 800e19a:	637b      	str	r3, [r7, #52]	; 0x34
 800e19c:	e008      	b.n	800e1b0 <ILI9341_Draw_Pixel+0x68>
 800e19e:	4b89      	ldr	r3, [pc, #548]	; (800e3c4 <ILI9341_Draw_Pixel+0x27c>)
 800e1a0:	695b      	ldr	r3, [r3, #20]
 800e1a2:	4a88      	ldr	r2, [pc, #544]	; (800e3c4 <ILI9341_Draw_Pixel+0x27c>)
 800e1a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e1a8:	6153      	str	r3, [r2, #20]
 800e1aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e1ac:	3301      	adds	r3, #1
 800e1ae:	637b      	str	r3, [r7, #52]	; 0x34
 800e1b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e1b2:	2b02      	cmp	r3, #2
 800e1b4:	ddf3      	ble.n	800e19e <ILI9341_Draw_Pixel+0x56>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800e1b6:	4b83      	ldr	r3, [pc, #524]	; (800e3c4 <ILI9341_Draw_Pixel+0x27c>)
 800e1b8:	695b      	ldr	r3, [r3, #20]
 800e1ba:	4a82      	ldr	r2, [pc, #520]	; (800e3c4 <ILI9341_Draw_Pixel+0x27c>)
 800e1bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e1c0:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800e1c2:	4b80      	ldr	r3, [pc, #512]	; (800e3c4 <ILI9341_Draw_Pixel+0x27c>)
 800e1c4:	695b      	ldr	r3, [r3, #20]
 800e1c6:	4a7f      	ldr	r2, [pc, #508]	; (800e3c4 <ILI9341_Draw_Pixel+0x27c>)
 800e1c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e1cc:	6153      	str	r3, [r2, #20]

	//XDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e1ce:	4b7d      	ldr	r3, [pc, #500]	; (800e3c4 <ILI9341_Draw_Pixel+0x27c>)
 800e1d0:	695b      	ldr	r3, [r3, #20]
 800e1d2:	4a7c      	ldr	r2, [pc, #496]	; (800e3c4 <ILI9341_Draw_Pixel+0x27c>)
 800e1d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e1d8:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer[4] = { x >> 8, x, (x + 1) >> 8, (x + 1) };
 800e1da:	88fb      	ldrh	r3, [r7, #6]
 800e1dc:	0a1b      	lsrs	r3, r3, #8
 800e1de:	b29b      	uxth	r3, r3
 800e1e0:	b2db      	uxtb	r3, r3
 800e1e2:	753b      	strb	r3, [r7, #20]
 800e1e4:	88fb      	ldrh	r3, [r7, #6]
 800e1e6:	b2db      	uxtb	r3, r3
 800e1e8:	757b      	strb	r3, [r7, #21]
 800e1ea:	88fb      	ldrh	r3, [r7, #6]
 800e1ec:	3301      	adds	r3, #1
 800e1ee:	121b      	asrs	r3, r3, #8
 800e1f0:	b2db      	uxtb	r3, r3
 800e1f2:	75bb      	strb	r3, [r7, #22]
 800e1f4:	88fb      	ldrh	r3, [r7, #6]
 800e1f6:	b2db      	uxtb	r3, r3
 800e1f8:	3301      	adds	r3, #1
 800e1fa:	b2db      	uxtb	r3, r3
 800e1fc:	75fb      	strb	r3, [r7, #23]
	_SPI_SendByteMultiByte(Temp_Buffer, 4, 0, 10);
 800e1fe:	f107 0014 	add.w	r0, r7, #20
 800e202:	230a      	movs	r3, #10
 800e204:	2200      	movs	r2, #0
 800e206:	2104      	movs	r1, #4
 800e208:	f000 fb50 	bl	800e8ac <_SPI_SendByteMultiByte>
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1 );
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e20c:	2300      	movs	r3, #0
 800e20e:	633b      	str	r3, [r7, #48]	; 0x30
 800e210:	e008      	b.n	800e224 <ILI9341_Draw_Pixel+0xdc>
 800e212:	4b6c      	ldr	r3, [pc, #432]	; (800e3c4 <ILI9341_Draw_Pixel+0x27c>)
 800e214:	695b      	ldr	r3, [r3, #20]
 800e216:	4a6b      	ldr	r2, [pc, #428]	; (800e3c4 <ILI9341_Draw_Pixel+0x27c>)
 800e218:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e21c:	6153      	str	r3, [r2, #20]
 800e21e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e220:	3301      	adds	r3, #1
 800e222:	633b      	str	r3, [r7, #48]	; 0x30
 800e224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e226:	2b02      	cmp	r3, #2
 800e228:	ddf3      	ble.n	800e212 <ILI9341_Draw_Pixel+0xca>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800e22a:	4b66      	ldr	r3, [pc, #408]	; (800e3c4 <ILI9341_Draw_Pixel+0x27c>)
 800e22c:	695b      	ldr	r3, [r3, #20]
 800e22e:	4a65      	ldr	r2, [pc, #404]	; (800e3c4 <ILI9341_Draw_Pixel+0x27c>)
 800e230:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e234:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800e236:	4b63      	ldr	r3, [pc, #396]	; (800e3c4 <ILI9341_Draw_Pixel+0x27c>)
 800e238:	695b      	ldr	r3, [r3, #20]
 800e23a:	4a62      	ldr	r2, [pc, #392]	; (800e3c4 <ILI9341_Draw_Pixel+0x27c>)
 800e23c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e240:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e242:	4b60      	ldr	r3, [pc, #384]	; (800e3c4 <ILI9341_Draw_Pixel+0x27c>)
 800e244:	695b      	ldr	r3, [r3, #20]
 800e246:	4a5f      	ldr	r2, [pc, #380]	; (800e3c4 <ILI9341_Draw_Pixel+0x27c>)
 800e248:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e24c:	6153      	str	r3, [r2, #20]
	_SPI_SendByte(0x2B, 0, 10);
 800e24e:	220a      	movs	r2, #10
 800e250:	2100      	movs	r1, #0
 800e252:	202b      	movs	r0, #43	; 0x2b
 800e254:	f000 faf8 	bl	800e848 <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e258:	2300      	movs	r3, #0
 800e25a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e25c:	e008      	b.n	800e270 <ILI9341_Draw_Pixel+0x128>
 800e25e:	4b59      	ldr	r3, [pc, #356]	; (800e3c4 <ILI9341_Draw_Pixel+0x27c>)
 800e260:	695b      	ldr	r3, [r3, #20]
 800e262:	4a58      	ldr	r2, [pc, #352]	; (800e3c4 <ILI9341_Draw_Pixel+0x27c>)
 800e264:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e268:	6153      	str	r3, [r2, #20]
 800e26a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e26c:	3301      	adds	r3, #1
 800e26e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e272:	2b02      	cmp	r3, #2
 800e274:	ddf3      	ble.n	800e25e <ILI9341_Draw_Pixel+0x116>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800e276:	4b53      	ldr	r3, [pc, #332]	; (800e3c4 <ILI9341_Draw_Pixel+0x27c>)
 800e278:	695b      	ldr	r3, [r3, #20]
 800e27a:	4a52      	ldr	r2, [pc, #328]	; (800e3c4 <ILI9341_Draw_Pixel+0x27c>)
 800e27c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e280:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800e282:	4b50      	ldr	r3, [pc, #320]	; (800e3c4 <ILI9341_Draw_Pixel+0x27c>)
 800e284:	695b      	ldr	r3, [r3, #20]
 800e286:	4a4f      	ldr	r2, [pc, #316]	; (800e3c4 <ILI9341_Draw_Pixel+0x27c>)
 800e288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e28c:	6153      	str	r3, [r2, #20]

	//YDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e28e:	4b4d      	ldr	r3, [pc, #308]	; (800e3c4 <ILI9341_Draw_Pixel+0x27c>)
 800e290:	695b      	ldr	r3, [r3, #20]
 800e292:	4a4c      	ldr	r2, [pc, #304]	; (800e3c4 <ILI9341_Draw_Pixel+0x27c>)
 800e294:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e298:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer1[4] = { y >> 8, y, (y + 1) >> 8, (y + 1) };
 800e29a:	88bb      	ldrh	r3, [r7, #4]
 800e29c:	0a1b      	lsrs	r3, r3, #8
 800e29e:	b29b      	uxth	r3, r3
 800e2a0:	b2db      	uxtb	r3, r3
 800e2a2:	743b      	strb	r3, [r7, #16]
 800e2a4:	88bb      	ldrh	r3, [r7, #4]
 800e2a6:	b2db      	uxtb	r3, r3
 800e2a8:	747b      	strb	r3, [r7, #17]
 800e2aa:	88bb      	ldrh	r3, [r7, #4]
 800e2ac:	3301      	adds	r3, #1
 800e2ae:	121b      	asrs	r3, r3, #8
 800e2b0:	b2db      	uxtb	r3, r3
 800e2b2:	74bb      	strb	r3, [r7, #18]
 800e2b4:	88bb      	ldrh	r3, [r7, #4]
 800e2b6:	b2db      	uxtb	r3, r3
 800e2b8:	3301      	adds	r3, #1
 800e2ba:	b2db      	uxtb	r3, r3
 800e2bc:	74fb      	strb	r3, [r7, #19]
	_SPI_SendByteMultiByte(Temp_Buffer1, 4, 0, 10);
 800e2be:	f107 0010 	add.w	r0, r7, #16
 800e2c2:	230a      	movs	r3, #10
 800e2c4:	2200      	movs	r2, #0
 800e2c6:	2104      	movs	r1, #4
 800e2c8:	f000 faf0 	bl	800e8ac <_SPI_SendByteMultiByte>
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1 );
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e2cc:	2300      	movs	r3, #0
 800e2ce:	62bb      	str	r3, [r7, #40]	; 0x28
 800e2d0:	e008      	b.n	800e2e4 <ILI9341_Draw_Pixel+0x19c>
 800e2d2:	4b3c      	ldr	r3, [pc, #240]	; (800e3c4 <ILI9341_Draw_Pixel+0x27c>)
 800e2d4:	695b      	ldr	r3, [r3, #20]
 800e2d6:	4a3b      	ldr	r2, [pc, #236]	; (800e3c4 <ILI9341_Draw_Pixel+0x27c>)
 800e2d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e2dc:	6153      	str	r3, [r2, #20]
 800e2de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2e0:	3301      	adds	r3, #1
 800e2e2:	62bb      	str	r3, [r7, #40]	; 0x28
 800e2e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2e6:	2b02      	cmp	r3, #2
 800e2e8:	ddf3      	ble.n	800e2d2 <ILI9341_Draw_Pixel+0x18a>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800e2ea:	4b36      	ldr	r3, [pc, #216]	; (800e3c4 <ILI9341_Draw_Pixel+0x27c>)
 800e2ec:	695b      	ldr	r3, [r3, #20]
 800e2ee:	4a35      	ldr	r2, [pc, #212]	; (800e3c4 <ILI9341_Draw_Pixel+0x27c>)
 800e2f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e2f4:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800e2f6:	4b33      	ldr	r3, [pc, #204]	; (800e3c4 <ILI9341_Draw_Pixel+0x27c>)
 800e2f8:	695b      	ldr	r3, [r3, #20]
 800e2fa:	4a32      	ldr	r2, [pc, #200]	; (800e3c4 <ILI9341_Draw_Pixel+0x27c>)
 800e2fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e300:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e302:	4b30      	ldr	r3, [pc, #192]	; (800e3c4 <ILI9341_Draw_Pixel+0x27c>)
 800e304:	695b      	ldr	r3, [r3, #20]
 800e306:	4a2f      	ldr	r2, [pc, #188]	; (800e3c4 <ILI9341_Draw_Pixel+0x27c>)
 800e308:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e30c:	6153      	str	r3, [r2, #20]
	_SPI_SendByte(0x2C, 0, 10);
 800e30e:	220a      	movs	r2, #10
 800e310:	2100      	movs	r1, #0
 800e312:	202c      	movs	r0, #44	; 0x2c
 800e314:	f000 fa98 	bl	800e848 <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e318:	2300      	movs	r3, #0
 800e31a:	627b      	str	r3, [r7, #36]	; 0x24
 800e31c:	e008      	b.n	800e330 <ILI9341_Draw_Pixel+0x1e8>
 800e31e:	4b29      	ldr	r3, [pc, #164]	; (800e3c4 <ILI9341_Draw_Pixel+0x27c>)
 800e320:	695b      	ldr	r3, [r3, #20]
 800e322:	4a28      	ldr	r2, [pc, #160]	; (800e3c4 <ILI9341_Draw_Pixel+0x27c>)
 800e324:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e328:	6153      	str	r3, [r2, #20]
 800e32a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e32c:	3301      	adds	r3, #1
 800e32e:	627b      	str	r3, [r7, #36]	; 0x24
 800e330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e332:	2b02      	cmp	r3, #2
 800e334:	ddf3      	ble.n	800e31e <ILI9341_Draw_Pixel+0x1d6>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800e336:	4b23      	ldr	r3, [pc, #140]	; (800e3c4 <ILI9341_Draw_Pixel+0x27c>)
 800e338:	695b      	ldr	r3, [r3, #20]
 800e33a:	4a22      	ldr	r2, [pc, #136]	; (800e3c4 <ILI9341_Draw_Pixel+0x27c>)
 800e33c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e340:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800e342:	4b20      	ldr	r3, [pc, #128]	; (800e3c4 <ILI9341_Draw_Pixel+0x27c>)
 800e344:	695b      	ldr	r3, [r3, #20]
 800e346:	4a1f      	ldr	r2, [pc, #124]	; (800e3c4 <ILI9341_Draw_Pixel+0x27c>)
 800e348:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e34c:	6153      	str	r3, [r2, #20]

	//COLOUR
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e34e:	4b1d      	ldr	r3, [pc, #116]	; (800e3c4 <ILI9341_Draw_Pixel+0x27c>)
 800e350:	695b      	ldr	r3, [r3, #20]
 800e352:	4a1c      	ldr	r2, [pc, #112]	; (800e3c4 <ILI9341_Draw_Pixel+0x27c>)
 800e354:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e358:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer2[2] = {colour>>8, colour};
 800e35a:	887b      	ldrh	r3, [r7, #2]
 800e35c:	0a1b      	lsrs	r3, r3, #8
 800e35e:	b29b      	uxth	r3, r3
 800e360:	b2db      	uxtb	r3, r3
 800e362:	733b      	strb	r3, [r7, #12]
 800e364:	887b      	ldrh	r3, [r7, #2]
 800e366:	b2db      	uxtb	r3, r3
 800e368:	737b      	strb	r3, [r7, #13]
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1 );
	_SPI_SendByteMultiByte(Temp_Buffer2, 2, 0, 1);
 800e36a:	f107 000c 	add.w	r0, r7, #12
 800e36e:	2301      	movs	r3, #1
 800e370:	2200      	movs	r2, #0
 800e372:	2102      	movs	r1, #2
 800e374:	f000 fa9a 	bl	800e8ac <_SPI_SendByteMultiByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e378:	2300      	movs	r3, #0
 800e37a:	623b      	str	r3, [r7, #32]
 800e37c:	e008      	b.n	800e390 <ILI9341_Draw_Pixel+0x248>
 800e37e:	4b11      	ldr	r3, [pc, #68]	; (800e3c4 <ILI9341_Draw_Pixel+0x27c>)
 800e380:	695b      	ldr	r3, [r3, #20]
 800e382:	4a10      	ldr	r2, [pc, #64]	; (800e3c4 <ILI9341_Draw_Pixel+0x27c>)
 800e384:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e388:	6153      	str	r3, [r2, #20]
 800e38a:	6a3b      	ldr	r3, [r7, #32]
 800e38c:	3301      	adds	r3, #1
 800e38e:	623b      	str	r3, [r7, #32]
 800e390:	6a3b      	ldr	r3, [r7, #32]
 800e392:	2b02      	cmp	r3, #2
 800e394:	ddf3      	ble.n	800e37e <ILI9341_Draw_Pixel+0x236>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e396:	2300      	movs	r3, #0
 800e398:	61fb      	str	r3, [r7, #28]
 800e39a:	e008      	b.n	800e3ae <ILI9341_Draw_Pixel+0x266>
 800e39c:	4b09      	ldr	r3, [pc, #36]	; (800e3c4 <ILI9341_Draw_Pixel+0x27c>)
 800e39e:	695b      	ldr	r3, [r3, #20]
 800e3a0:	4a08      	ldr	r2, [pc, #32]	; (800e3c4 <ILI9341_Draw_Pixel+0x27c>)
 800e3a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e3a6:	6153      	str	r3, [r2, #20]
 800e3a8:	69fb      	ldr	r3, [r7, #28]
 800e3aa:	3301      	adds	r3, #1
 800e3ac:	61fb      	str	r3, [r7, #28]
 800e3ae:	69fb      	ldr	r3, [r7, #28]
 800e3b0:	2b02      	cmp	r3, #2
 800e3b2:	ddf3      	ble.n	800e39c <ILI9341_Draw_Pixel+0x254>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e3b4:	2300      	movs	r3, #0
 800e3b6:	61bb      	str	r3, [r7, #24]
 800e3b8:	e00f      	b.n	800e3da <ILI9341_Draw_Pixel+0x292>
 800e3ba:	bf00      	nop
 800e3bc:	20000cae 	.word	0x20000cae
 800e3c0:	20000cac 	.word	0x20000cac
 800e3c4:	48000400 	.word	0x48000400
 800e3c8:	4b0b      	ldr	r3, [pc, #44]	; (800e3f8 <ILI9341_Draw_Pixel+0x2b0>)
 800e3ca:	695b      	ldr	r3, [r3, #20]
 800e3cc:	4a0a      	ldr	r2, [pc, #40]	; (800e3f8 <ILI9341_Draw_Pixel+0x2b0>)
 800e3ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e3d2:	6153      	str	r3, [r2, #20]
 800e3d4:	69bb      	ldr	r3, [r7, #24]
 800e3d6:	3301      	adds	r3, #1
 800e3d8:	61bb      	str	r3, [r7, #24]
 800e3da:	69bb      	ldr	r3, [r7, #24]
 800e3dc:	2b02      	cmp	r3, #2
 800e3de:	ddf3      	ble.n	800e3c8 <ILI9341_Draw_Pixel+0x280>


	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800e3e0:	4b05      	ldr	r3, [pc, #20]	; (800e3f8 <ILI9341_Draw_Pixel+0x2b0>)
 800e3e2:	695b      	ldr	r3, [r3, #20]
 800e3e4:	4a04      	ldr	r2, [pc, #16]	; (800e3f8 <ILI9341_Draw_Pixel+0x2b0>)
 800e3e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e3ea:	6153      	str	r3, [r2, #20]
 800e3ec:	e000      	b.n	800e3f0 <ILI9341_Draw_Pixel+0x2a8>
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800e3ee:	bf00      	nop


}
 800e3f0:	3738      	adds	r7, #56	; 0x38
 800e3f2:	46bd      	mov	sp, r7
 800e3f4:	bd80      	pop	{r7, pc}
 800e3f6:	bf00      	nop
 800e3f8:	48000400 	.word	0x48000400

0800e3fc <ILI9341_Draw_Rectangle>:
 *
 *
 */

void ILI9341_Draw_Rectangle(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t height, uint16_t colour, CHUNK_Type chunk_type)
{
 800e3fc:	b590      	push	{r4, r7, lr}
 800e3fe:	b087      	sub	sp, #28
 800e400:	af02      	add	r7, sp, #8
 800e402:	4604      	mov	r4, r0
 800e404:	4608      	mov	r0, r1
 800e406:	4611      	mov	r1, r2
 800e408:	461a      	mov	r2, r3
 800e40a:	4623      	mov	r3, r4
 800e40c:	80fb      	strh	r3, [r7, #6]
 800e40e:	4603      	mov	r3, r0
 800e410:	80bb      	strh	r3, [r7, #4]
 800e412:	460b      	mov	r3, r1
 800e414:	807b      	strh	r3, [r7, #2]
 800e416:	4613      	mov	r3, r2
 800e418:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800e41a:	4b41      	ldr	r3, [pc, #260]	; (800e520 <ILI9341_Draw_Rectangle+0x124>)
 800e41c:	881b      	ldrh	r3, [r3, #0]
 800e41e:	b29b      	uxth	r3, r3
 800e420:	88fa      	ldrh	r2, [r7, #6]
 800e422:	429a      	cmp	r2, r3
 800e424:	d278      	bcs.n	800e518 <ILI9341_Draw_Rectangle+0x11c>
 800e426:	4b3f      	ldr	r3, [pc, #252]	; (800e524 <ILI9341_Draw_Rectangle+0x128>)
 800e428:	881b      	ldrh	r3, [r3, #0]
 800e42a:	b29b      	uxth	r3, r3
 800e42c:	88ba      	ldrh	r2, [r7, #4]
 800e42e:	429a      	cmp	r2, r3
 800e430:	d272      	bcs.n	800e518 <ILI9341_Draw_Rectangle+0x11c>
	if((xpos+width-1)>=LCD_WIDTH)
 800e432:	88fa      	ldrh	r2, [r7, #6]
 800e434:	887b      	ldrh	r3, [r7, #2]
 800e436:	4413      	add	r3, r2
 800e438:	3b01      	subs	r3, #1
 800e43a:	4a39      	ldr	r2, [pc, #228]	; (800e520 <ILI9341_Draw_Rectangle+0x124>)
 800e43c:	8812      	ldrh	r2, [r2, #0]
 800e43e:	b292      	uxth	r2, r2
 800e440:	4293      	cmp	r3, r2
 800e442:	db05      	blt.n	800e450 <ILI9341_Draw_Rectangle+0x54>
		{
			width=LCD_WIDTH-xpos;
 800e444:	4b36      	ldr	r3, [pc, #216]	; (800e520 <ILI9341_Draw_Rectangle+0x124>)
 800e446:	881b      	ldrh	r3, [r3, #0]
 800e448:	b29a      	uxth	r2, r3
 800e44a:	88fb      	ldrh	r3, [r7, #6]
 800e44c:	1ad3      	subs	r3, r2, r3
 800e44e:	807b      	strh	r3, [r7, #2]
		}
	if((ypos+height-1)>=LCD_HEIGHT)
 800e450:	88ba      	ldrh	r2, [r7, #4]
 800e452:	883b      	ldrh	r3, [r7, #0]
 800e454:	4413      	add	r3, r2
 800e456:	3b01      	subs	r3, #1
 800e458:	4a32      	ldr	r2, [pc, #200]	; (800e524 <ILI9341_Draw_Rectangle+0x128>)
 800e45a:	8812      	ldrh	r2, [r2, #0]
 800e45c:	b292      	uxth	r2, r2
 800e45e:	4293      	cmp	r3, r2
 800e460:	db05      	blt.n	800e46e <ILI9341_Draw_Rectangle+0x72>
		{
			height=LCD_HEIGHT-ypos;
 800e462:	4b30      	ldr	r3, [pc, #192]	; (800e524 <ILI9341_Draw_Rectangle+0x128>)
 800e464:	881b      	ldrh	r3, [r3, #0]
 800e466:	b29a      	uxth	r2, r3
 800e468:	88bb      	ldrh	r3, [r7, #4]
 800e46a:	1ad3      	subs	r3, r2, r3
 800e46c:	803b      	strh	r3, [r7, #0]
		}
	ILI9341_Set_Frame(	xpos,
						ypos,
						(xpos + width) - 1,
 800e46e:	88fa      	ldrh	r2, [r7, #6]
 800e470:	887b      	ldrh	r3, [r7, #2]
 800e472:	4413      	add	r3, r2
 800e474:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800e476:	3b01      	subs	r3, #1
 800e478:	b29c      	uxth	r4, r3
						(ypos + height) - 1);
 800e47a:	88ba      	ldrh	r2, [r7, #4]
 800e47c:	883b      	ldrh	r3, [r7, #0]
 800e47e:	4413      	add	r3, r2
 800e480:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800e482:	3b01      	subs	r3, #1
 800e484:	b29b      	uxth	r3, r3
 800e486:	88b9      	ldrh	r1, [r7, #4]
 800e488:	88f8      	ldrh	r0, [r7, #6]
 800e48a:	4622      	mov	r2, r4
 800e48c:	f7ff fde6 	bl	800e05c <ILI9341_Set_Frame>
	// if odd numbered rect area is requested, we round down to nearest even number
	// to keep _LCD_Write_Frame() happy.

	// Note, truncated pixel will be needed at function end.

	uint16_t size = height*width;
 800e490:	883a      	ldrh	r2, [r7, #0]
 800e492:	887b      	ldrh	r3, [r7, #2]
 800e494:	fb12 f303 	smulbb	r3, r2, r3
 800e498:	81fb      	strh	r3, [r7, #14]
	uint8_t truncated = 0;
 800e49a:	2300      	movs	r3, #0
 800e49c:	737b      	strb	r3, [r7, #13]

	if((size & 1) && (size > 1))		// don't round down to zero!
 800e49e:	89fb      	ldrh	r3, [r7, #14]
 800e4a0:	f003 0301 	and.w	r3, r3, #1
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d009      	beq.n	800e4bc <ILI9341_Draw_Rectangle+0xc0>
 800e4a8:	89fb      	ldrh	r3, [r7, #14]
 800e4aa:	2b01      	cmp	r3, #1
 800e4ac:	d906      	bls.n	800e4bc <ILI9341_Draw_Rectangle+0xc0>
	{
		truncated = 1;
 800e4ae:	2301      	movs	r3, #1
 800e4b0:	737b      	strb	r3, [r7, #13]
	 	size = ((size >> 1) * 2);
 800e4b2:	89fb      	ldrh	r3, [r7, #14]
 800e4b4:	085b      	lsrs	r3, r3, #1
 800e4b6:	b29b      	uxth	r3, r3
 800e4b8:	005b      	lsls	r3, r3, #1
 800e4ba:	81fb      	strh	r3, [r7, #14]
	}

	_LCD_Write_Frame(	xpos,
 800e4bc:	89fc      	ldrh	r4, [r7, #14]
 800e4be:	8c3a      	ldrh	r2, [r7, #32]
 800e4c0:	88b9      	ldrh	r1, [r7, #4]
 800e4c2:	88f8      	ldrh	r0, [r7, #6]
 800e4c4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e4c8:	9300      	str	r3, [sp, #0]
 800e4ca:	4623      	mov	r3, r4
 800e4cc:	f000 f8a8 	bl	800e620 <_LCD_Write_Frame>
						colour,
						size,
						chunk_type);

	// add the truncated pixel now
	if(truncated)
 800e4d0:	7b7b      	ldrb	r3, [r7, #13]
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d021      	beq.n	800e51a <ILI9341_Draw_Rectangle+0x11e>
	{
		ILI9341_Draw_Pixel(	(xpos + width) - 2,
 800e4d6:	88fa      	ldrh	r2, [r7, #6]
 800e4d8:	887b      	ldrh	r3, [r7, #2]
 800e4da:	4413      	add	r3, r2
 800e4dc:	b29b      	uxth	r3, r3
 800e4de:	3b02      	subs	r3, #2
 800e4e0:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 800e4e2:	88ba      	ldrh	r2, [r7, #4]
 800e4e4:	883b      	ldrh	r3, [r7, #0]
 800e4e6:	4413      	add	r3, r2
 800e4e8:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 2,
 800e4ea:	3b01      	subs	r3, #1
 800e4ec:	b29b      	uxth	r3, r3
 800e4ee:	8c3a      	ldrh	r2, [r7, #32]
 800e4f0:	4619      	mov	r1, r3
 800e4f2:	f7ff fe29 	bl	800e148 <ILI9341_Draw_Pixel>
							colour);
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 800e4f6:	88fa      	ldrh	r2, [r7, #6]
 800e4f8:	887b      	ldrh	r3, [r7, #2]
 800e4fa:	4413      	add	r3, r2
 800e4fc:	b29b      	uxth	r3, r3
 800e4fe:	3b01      	subs	r3, #1
 800e500:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 800e502:	88ba      	ldrh	r2, [r7, #4]
 800e504:	883b      	ldrh	r3, [r7, #0]
 800e506:	4413      	add	r3, r2
 800e508:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 800e50a:	3b01      	subs	r3, #1
 800e50c:	b29b      	uxth	r3, r3
 800e50e:	8c3a      	ldrh	r2, [r7, #32]
 800e510:	4619      	mov	r1, r3
 800e512:	f7ff fe19 	bl	800e148 <ILI9341_Draw_Pixel>
 800e516:	e000      	b.n	800e51a <ILI9341_Draw_Rectangle+0x11e>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800e518:	bf00      	nop
							colour);
	}
}
 800e51a:	3714      	adds	r7, #20
 800e51c:	46bd      	mov	sp, r7
 800e51e:	bd90      	pop	{r4, r7, pc}
 800e520:	20000cae 	.word	0x20000cae
 800e524:	20000cac 	.word	0x20000cac

0800e528 <ILI9341_Set_Rotation>:
 *
 * 	Set LCD orientation
 *
 */
void ILI9341_Set_Rotation(uint8_t rotation)
{
 800e528:	b580      	push	{r7, lr}
 800e52a:	b084      	sub	sp, #16
 800e52c:	af00      	add	r7, sp, #0
 800e52e:	4603      	mov	r3, r0
 800e530:	71fb      	strb	r3, [r7, #7]

	uint8_t screen_rotation = rotation;
 800e532:	79fb      	ldrb	r3, [r7, #7]
 800e534:	73fb      	strb	r3, [r7, #15]

	_LCD_SendCommand(0x36);
 800e536:	2036      	movs	r0, #54	; 0x36
 800e538:	f000 f922 	bl	800e780 <_LCD_SendCommand>
	//HAL_Delay(1);

	switch(screen_rotation)
 800e53c:	7bfb      	ldrb	r3, [r7, #15]
 800e53e:	2b03      	cmp	r3, #3
 800e540:	d836      	bhi.n	800e5b0 <ILI9341_Set_Rotation+0x88>
 800e542:	a201      	add	r2, pc, #4	; (adr r2, 800e548 <ILI9341_Set_Rotation+0x20>)
 800e544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e548:	0800e559 	.word	0x0800e559
 800e54c:	0800e56f 	.word	0x0800e56f
 800e550:	0800e585 	.word	0x0800e585
 800e554:	0800e59b 	.word	0x0800e59b
	{
		case SCREEN_VERTICAL_1:
			_LCD_SendData(0x40|0x08);
 800e558:	2048      	movs	r0, #72	; 0x48
 800e55a:	f000 f943 	bl	800e7e4 <_LCD_SendData>
			LCD_WIDTH = 240;
 800e55e:	4b17      	ldr	r3, [pc, #92]	; (800e5bc <ILI9341_Set_Rotation+0x94>)
 800e560:	22f0      	movs	r2, #240	; 0xf0
 800e562:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800e564:	4b16      	ldr	r3, [pc, #88]	; (800e5c0 <ILI9341_Set_Rotation+0x98>)
 800e566:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800e56a:	801a      	strh	r2, [r3, #0]
			break;
 800e56c:	e021      	b.n	800e5b2 <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_1:
			_LCD_SendData(0x20|0x08);
 800e56e:	2028      	movs	r0, #40	; 0x28
 800e570:	f000 f938 	bl	800e7e4 <_LCD_SendData>
			LCD_WIDTH  = 320;
 800e574:	4b11      	ldr	r3, [pc, #68]	; (800e5bc <ILI9341_Set_Rotation+0x94>)
 800e576:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800e57a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 800e57c:	4b10      	ldr	r3, [pc, #64]	; (800e5c0 <ILI9341_Set_Rotation+0x98>)
 800e57e:	22f0      	movs	r2, #240	; 0xf0
 800e580:	801a      	strh	r2, [r3, #0]
			break;
 800e582:	e016      	b.n	800e5b2 <ILI9341_Set_Rotation+0x8a>
		case SCREEN_VERTICAL_2:
			_LCD_SendData(0x80|0x08);
 800e584:	2088      	movs	r0, #136	; 0x88
 800e586:	f000 f92d 	bl	800e7e4 <_LCD_SendData>
			LCD_WIDTH  = 240;
 800e58a:	4b0c      	ldr	r3, [pc, #48]	; (800e5bc <ILI9341_Set_Rotation+0x94>)
 800e58c:	22f0      	movs	r2, #240	; 0xf0
 800e58e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800e590:	4b0b      	ldr	r3, [pc, #44]	; (800e5c0 <ILI9341_Set_Rotation+0x98>)
 800e592:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800e596:	801a      	strh	r2, [r3, #0]
			break;
 800e598:	e00b      	b.n	800e5b2 <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_2:
			_LCD_SendData(0x40|0x80|0x20|0x08);
 800e59a:	20e8      	movs	r0, #232	; 0xe8
 800e59c:	f000 f922 	bl	800e7e4 <_LCD_SendData>
			LCD_WIDTH  = 320;
 800e5a0:	4b06      	ldr	r3, [pc, #24]	; (800e5bc <ILI9341_Set_Rotation+0x94>)
 800e5a2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800e5a6:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 800e5a8:	4b05      	ldr	r3, [pc, #20]	; (800e5c0 <ILI9341_Set_Rotation+0x98>)
 800e5aa:	22f0      	movs	r2, #240	; 0xf0
 800e5ac:	801a      	strh	r2, [r3, #0]
			break;
 800e5ae:	e000      	b.n	800e5b2 <ILI9341_Set_Rotation+0x8a>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 800e5b0:	bf00      	nop
	}
}
 800e5b2:	bf00      	nop
 800e5b4:	3710      	adds	r7, #16
 800e5b6:	46bd      	mov	sp, r7
 800e5b8:	bd80      	pop	{r7, pc}
 800e5ba:	bf00      	nop
 800e5bc:	20000cae 	.word	0x20000cae
 800e5c0:	20000cac 	.word	0x20000cac

0800e5c4 <_LCD_Enable>:
 *
 * Enable LCD display
 *
 */
void _LCD_Enable()
{
 800e5c4:	b480      	push	{r7}
 800e5c6:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 800e5c8:	4b05      	ldr	r3, [pc, #20]	; (800e5e0 <_LCD_Enable+0x1c>)
 800e5ca:	695b      	ldr	r3, [r3, #20]
 800e5cc:	4a04      	ldr	r2, [pc, #16]	; (800e5e0 <_LCD_Enable+0x1c>)
 800e5ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e5d2:	6153      	str	r3, [r2, #20]
}
 800e5d4:	bf00      	nop
 800e5d6:	46bd      	mov	sp, r7
 800e5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5dc:	4770      	bx	lr
 800e5de:	bf00      	nop
 800e5e0:	48000400 	.word	0x48000400

0800e5e4 <_LCD_Reset>:
 *
 * 	Reset LCD
 *
 */
void _LCD_Reset()
{
 800e5e4:	b580      	push	{r7, lr}
 800e5e6:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR &= ~(LCD_RST_PIN);
 800e5e8:	4b0c      	ldr	r3, [pc, #48]	; (800e61c <_LCD_Reset+0x38>)
 800e5ea:	695b      	ldr	r3, [r3, #20]
 800e5ec:	4a0b      	ldr	r2, [pc, #44]	; (800e61c <_LCD_Reset+0x38>)
 800e5ee:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e5f2:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 800e5f4:	20c8      	movs	r0, #200	; 0xc8
 800e5f6:	f7fa f91b 	bl	8008830 <HAL_Delay>
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e5fa:	4b08      	ldr	r3, [pc, #32]	; (800e61c <_LCD_Reset+0x38>)
 800e5fc:	695b      	ldr	r3, [r3, #20]
 800e5fe:	4a07      	ldr	r2, [pc, #28]	; (800e61c <_LCD_Reset+0x38>)
 800e600:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e604:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 800e606:	20c8      	movs	r0, #200	; 0xc8
 800e608:	f7fa f912 	bl	8008830 <HAL_Delay>
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 800e60c:	4b03      	ldr	r3, [pc, #12]	; (800e61c <_LCD_Reset+0x38>)
 800e60e:	695b      	ldr	r3, [r3, #20]
 800e610:	4a02      	ldr	r2, [pc, #8]	; (800e61c <_LCD_Reset+0x38>)
 800e612:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e616:	6153      	str	r3, [r2, #20]
}
 800e618:	bf00      	nop
 800e61a:	bd80      	pop	{r7, pc}
 800e61c:	48000400 	.word	0x48000400

0800e620 <_LCD_Write_Frame>:
 *
 *	entire data sent to this function is a CHUNK < BURST_MAX_SIZE
 *	each CHUNK is broken down into smaller BLOCKS
 */
void _LCD_Write_Frame(uint16_t chunk_xpos, uint16_t chunk_ypos, uint16_t colour, uint32_t chunk_size, CHUNK_Type chunk_type)
{
 800e620:	b5b0      	push	{r4, r5, r7, lr}
 800e622:	b08e      	sub	sp, #56	; 0x38
 800e624:	af00      	add	r7, sp, #0
 800e626:	607b      	str	r3, [r7, #4]
 800e628:	4603      	mov	r3, r0
 800e62a:	81fb      	strh	r3, [r7, #14]
 800e62c:	460b      	mov	r3, r1
 800e62e:	81bb      	strh	r3, [r7, #12]
 800e630:	4613      	mov	r3, r2
 800e632:	817b      	strh	r3, [r7, #10]
 800e634:	466b      	mov	r3, sp
 800e636:	461d      	mov	r5, r3

	uint32_t buffer_size = 0;
 800e638:	2300      	movs	r3, #0
 800e63a:	62fb      	str	r3, [r7, #44]	; 0x2c
	if((chunk_size*2) < BURST_MAX_SIZE)
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	005b      	lsls	r3, r3, #1
 800e640:	4a4d      	ldr	r2, [pc, #308]	; (800e778 <_LCD_Write_Frame+0x158>)
 800e642:	8812      	ldrh	r2, [r2, #0]
 800e644:	4293      	cmp	r3, r2
 800e646:	d202      	bcs.n	800e64e <_LCD_Write_Frame+0x2e>
	{
		buffer_size = chunk_size;
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e64c:	e002      	b.n	800e654 <_LCD_Write_Frame+0x34>
	}
	else
	{
		buffer_size = BURST_MAX_SIZE;
 800e64e:	4b4a      	ldr	r3, [pc, #296]	; (800e778 <_LCD_Write_Frame+0x158>)
 800e650:	881b      	ldrh	r3, [r3, #0]
 800e652:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	unsigned char chifted = 	colour>>8;;
 800e654:	897b      	ldrh	r3, [r7, #10]
 800e656:	0a1b      	lsrs	r3, r3, #8
 800e658:	b29b      	uxth	r3, r3
 800e65a:	77fb      	strb	r3, [r7, #31]
	unsigned char burst_buffer[buffer_size];
 800e65c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e65e:	4603      	mov	r3, r0
 800e660:	3b01      	subs	r3, #1
 800e662:	61bb      	str	r3, [r7, #24]
 800e664:	4601      	mov	r1, r0
 800e666:	f04f 0200 	mov.w	r2, #0
 800e66a:	f04f 0300 	mov.w	r3, #0
 800e66e:	f04f 0400 	mov.w	r4, #0
 800e672:	00d4      	lsls	r4, r2, #3
 800e674:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800e678:	00cb      	lsls	r3, r1, #3
 800e67a:	4601      	mov	r1, r0
 800e67c:	f04f 0200 	mov.w	r2, #0
 800e680:	f04f 0300 	mov.w	r3, #0
 800e684:	f04f 0400 	mov.w	r4, #0
 800e688:	00d4      	lsls	r4, r2, #3
 800e68a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800e68e:	00cb      	lsls	r3, r1, #3
 800e690:	1dc3      	adds	r3, r0, #7
 800e692:	08db      	lsrs	r3, r3, #3
 800e694:	00db      	lsls	r3, r3, #3
 800e696:	ebad 0d03 	sub.w	sp, sp, r3
 800e69a:	466b      	mov	r3, sp
 800e69c:	3300      	adds	r3, #0
 800e69e:	617b      	str	r3, [r7, #20]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 800e6a0:	2300      	movs	r3, #0
 800e6a2:	633b      	str	r3, [r7, #48]	; 0x30
 800e6a4:	e00d      	b.n	800e6c2 <_LCD_Write_Frame+0xa2>
	{
			burst_buffer[j] = 	chifted;
 800e6a6:	697a      	ldr	r2, [r7, #20]
 800e6a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6aa:	4413      	add	r3, r2
 800e6ac:	7ffa      	ldrb	r2, [r7, #31]
 800e6ae:	701a      	strb	r2, [r3, #0]
			burst_buffer[j+1] = colour;
 800e6b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6b2:	3301      	adds	r3, #1
 800e6b4:	897a      	ldrh	r2, [r7, #10]
 800e6b6:	b2d1      	uxtb	r1, r2
 800e6b8:	697a      	ldr	r2, [r7, #20]
 800e6ba:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 800e6bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6be:	3302      	adds	r3, #2
 800e6c0:	633b      	str	r3, [r7, #48]	; 0x30
 800e6c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e6c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6c6:	429a      	cmp	r2, r3
 800e6c8:	d3ed      	bcc.n	800e6a6 <_LCD_Write_Frame+0x86>
	}
	
	uint32_t Sending_size = chunk_size*2;
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	005b      	lsls	r3, r3, #1
 800e6ce:	613b      	str	r3, [r7, #16]

	// make sure we don't divide by size=0
	uint32_t Sending_in_Block = 1;
 800e6d0:	2301      	movs	r3, #1
 800e6d2:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t Remainder_from_block = 0;
 800e6d4:	2300      	movs	r3, #0
 800e6d6:	62bb      	str	r3, [r7, #40]	; 0x28
	if(chunk_size > 0)
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d00d      	beq.n	800e6fa <_LCD_Write_Frame+0xda>
	{
			Sending_in_Block 		= Sending_size/buffer_size;
 800e6de:	693a      	ldr	r2, [r7, #16]
 800e6e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6e2:	fbb2 f3f3 	udiv	r3, r2, r3
 800e6e6:	637b      	str	r3, [r7, #52]	; 0x34
			Remainder_from_block 	= Sending_size%buffer_size;
 800e6e8:	693b      	ldr	r3, [r7, #16]
 800e6ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e6ec:	fbb3 f2f2 	udiv	r2, r3, r2
 800e6f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e6f2:	fb01 f202 	mul.w	r2, r1, r2
 800e6f6:	1a9b      	subs	r3, r3, r2
 800e6f8:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	// send blocks
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800e6fa:	4b20      	ldr	r3, [pc, #128]	; (800e77c <_LCD_Write_Frame+0x15c>)
 800e6fc:	695b      	ldr	r3, [r3, #20]
 800e6fe:	4a1f      	ldr	r2, [pc, #124]	; (800e77c <_LCD_Write_Frame+0x15c>)
 800e700:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e704:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e706:	4b1d      	ldr	r3, [pc, #116]	; (800e77c <_LCD_Write_Frame+0x15c>)
 800e708:	695b      	ldr	r3, [r3, #20]
 800e70a:	4a1c      	ldr	r2, [pc, #112]	; (800e77c <_LCD_Write_Frame+0x15c>)
 800e70c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e710:	6153      	str	r3, [r2, #20]
//TODO
	if(Sending_in_Block != 0)
 800e712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e714:	2b00      	cmp	r3, #0
 800e716:	d00f      	beq.n	800e738 <_LCD_Write_Frame+0x118>
	{
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800e718:	2300      	movs	r3, #0
 800e71a:	627b      	str	r3, [r7, #36]	; 0x24
 800e71c:	e008      	b.n	800e730 <_LCD_Write_Frame+0x110>
		{
			_SPI_SendByteMultiByte(burst_buffer, buffer_size, 0, 10);
 800e71e:	6978      	ldr	r0, [r7, #20]
 800e720:	230a      	movs	r3, #10
 800e722:	2200      	movs	r2, #0
 800e724:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e726:	f000 f8c1 	bl	800e8ac <_SPI_SendByteMultiByte>
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800e72a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e72c:	3301      	adds	r3, #1
 800e72e:	627b      	str	r3, [r7, #36]	; 0x24
 800e730:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e732:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e734:	429a      	cmp	r2, r3
 800e736:	d3f2      	bcc.n	800e71e <_LCD_Write_Frame+0xfe>
		}
	}

	_SPI_SendByteMultiByte(burst_buffer, Remainder_from_block, 0, 10);
 800e738:	6978      	ldr	r0, [r7, #20]
 800e73a:	230a      	movs	r3, #10
 800e73c:	2200      	movs	r2, #0
 800e73e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e740:	f000 f8b4 	bl	800e8ac <_SPI_SendByteMultiByte>


	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800e744:	2300      	movs	r3, #0
 800e746:	623b      	str	r3, [r7, #32]
 800e748:	e008      	b.n	800e75c <_LCD_Write_Frame+0x13c>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e74a:	4b0c      	ldr	r3, [pc, #48]	; (800e77c <_LCD_Write_Frame+0x15c>)
 800e74c:	695b      	ldr	r3, [r3, #20]
 800e74e:	4a0b      	ldr	r2, [pc, #44]	; (800e77c <_LCD_Write_Frame+0x15c>)
 800e750:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e754:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800e756:	6a3b      	ldr	r3, [r7, #32]
 800e758:	3301      	adds	r3, #1
 800e75a:	623b      	str	r3, [r7, #32]
 800e75c:	6a3b      	ldr	r3, [r7, #32]
 800e75e:	2b02      	cmp	r3, #2
 800e760:	ddf3      	ble.n	800e74a <_LCD_Write_Frame+0x12a>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800e762:	4b06      	ldr	r3, [pc, #24]	; (800e77c <_LCD_Write_Frame+0x15c>)
 800e764:	695b      	ldr	r3, [r3, #20]
 800e766:	4a05      	ldr	r2, [pc, #20]	; (800e77c <_LCD_Write_Frame+0x15c>)
 800e768:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e76c:	6153      	str	r3, [r2, #20]
 800e76e:	46ad      	mov	sp, r5

}
 800e770:	bf00      	nop
 800e772:	3738      	adds	r7, #56	; 0x38
 800e774:	46bd      	mov	sp, r7
 800e776:	bdb0      	pop	{r4, r5, r7, pc}
 800e778:	20000cb0 	.word	0x20000cb0
 800e77c:	48000400 	.word	0x48000400

0800e780 <_LCD_SendCommand>:
 *
 * 	Send command to LCD
 *
 */
void _LCD_SendCommand(uint8_t command)
{
 800e780:	b580      	push	{r7, lr}
 800e782:	b084      	sub	sp, #16
 800e784:	af00      	add	r7, sp, #0
 800e786:	4603      	mov	r3, r0
 800e788:	71fb      	strb	r3, [r7, #7]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e78a:	4b15      	ldr	r3, [pc, #84]	; (800e7e0 <_LCD_SendCommand+0x60>)
 800e78c:	695b      	ldr	r3, [r3, #20]
 800e78e:	4a14      	ldr	r2, [pc, #80]	; (800e7e0 <_LCD_SendCommand+0x60>)
 800e790:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e794:	6153      	str	r3, [r2, #20]
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800e796:	4b12      	ldr	r3, [pc, #72]	; (800e7e0 <_LCD_SendCommand+0x60>)
 800e798:	695b      	ldr	r3, [r3, #20]
 800e79a:	4a11      	ldr	r2, [pc, #68]	; (800e7e0 <_LCD_SendCommand+0x60>)
 800e79c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e7a0:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(command, 0 , 0);
 800e7a2:	79fb      	ldrb	r3, [r7, #7]
 800e7a4:	2200      	movs	r2, #0
 800e7a6:	2100      	movs	r1, #0
 800e7a8:	4618      	mov	r0, r3
 800e7aa:	f000 f84d 	bl	800e848 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800e7ae:	2300      	movs	r3, #0
 800e7b0:	60fb      	str	r3, [r7, #12]
 800e7b2:	e008      	b.n	800e7c6 <_LCD_SendCommand+0x46>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e7b4:	4b0a      	ldr	r3, [pc, #40]	; (800e7e0 <_LCD_SendCommand+0x60>)
 800e7b6:	695b      	ldr	r3, [r3, #20]
 800e7b8:	4a09      	ldr	r2, [pc, #36]	; (800e7e0 <_LCD_SendCommand+0x60>)
 800e7ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e7be:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	3301      	adds	r3, #1
 800e7c4:	60fb      	str	r3, [r7, #12]
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	2b02      	cmp	r3, #2
 800e7ca:	ddf3      	ble.n	800e7b4 <_LCD_SendCommand+0x34>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800e7cc:	4b04      	ldr	r3, [pc, #16]	; (800e7e0 <_LCD_SendCommand+0x60>)
 800e7ce:	695b      	ldr	r3, [r3, #20]
 800e7d0:	4a03      	ldr	r2, [pc, #12]	; (800e7e0 <_LCD_SendCommand+0x60>)
 800e7d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e7d6:	6153      	str	r3, [r2, #20]
}
 800e7d8:	bf00      	nop
 800e7da:	3710      	adds	r7, #16
 800e7dc:	46bd      	mov	sp, r7
 800e7de:	bd80      	pop	{r7, pc}
 800e7e0:	48000400 	.word	0x48000400

0800e7e4 <_LCD_SendData>:
 *
 * 	Send Data to LCD
 *
 */
void _LCD_SendData(uint8_t data)
{
 800e7e4:	b580      	push	{r7, lr}
 800e7e6:	b084      	sub	sp, #16
 800e7e8:	af00      	add	r7, sp, #0
 800e7ea:	4603      	mov	r3, r0
 800e7ec:	71fb      	strb	r3, [r7, #7]
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800e7ee:	4b15      	ldr	r3, [pc, #84]	; (800e844 <_LCD_SendData+0x60>)
 800e7f0:	695b      	ldr	r3, [r3, #20]
 800e7f2:	4a14      	ldr	r2, [pc, #80]	; (800e844 <_LCD_SendData+0x60>)
 800e7f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e7f8:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e7fa:	4b12      	ldr	r3, [pc, #72]	; (800e844 <_LCD_SendData+0x60>)
 800e7fc:	695b      	ldr	r3, [r3, #20]
 800e7fe:	4a11      	ldr	r2, [pc, #68]	; (800e844 <_LCD_SendData+0x60>)
 800e800:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e804:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(data, 0 , 0);
 800e806:	79fb      	ldrb	r3, [r7, #7]
 800e808:	2200      	movs	r2, #0
 800e80a:	2100      	movs	r1, #0
 800e80c:	4618      	mov	r0, r3
 800e80e:	f000 f81b 	bl	800e848 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800e812:	2300      	movs	r3, #0
 800e814:	60fb      	str	r3, [r7, #12]
 800e816:	e008      	b.n	800e82a <_LCD_SendData+0x46>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e818:	4b0a      	ldr	r3, [pc, #40]	; (800e844 <_LCD_SendData+0x60>)
 800e81a:	695b      	ldr	r3, [r3, #20]
 800e81c:	4a09      	ldr	r2, [pc, #36]	; (800e844 <_LCD_SendData+0x60>)
 800e81e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e822:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	3301      	adds	r3, #1
 800e828:	60fb      	str	r3, [r7, #12]
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	2b02      	cmp	r3, #2
 800e82e:	ddf3      	ble.n	800e818 <_LCD_SendData+0x34>

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e830:	4b04      	ldr	r3, [pc, #16]	; (800e844 <_LCD_SendData+0x60>)
 800e832:	695b      	ldr	r3, [r3, #20]
 800e834:	4a03      	ldr	r2, [pc, #12]	; (800e844 <_LCD_SendData+0x60>)
 800e836:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e83a:	6153      	str	r3, [r2, #20]
}
 800e83c:	bf00      	nop
 800e83e:	3710      	adds	r7, #16
 800e840:	46bd      	mov	sp, r7
 800e842:	bd80      	pop	{r7, pc}
 800e844:	48000400 	.word	0x48000400

0800e848 <_SPI_SendByte>:
 *
 * 	Send single byte over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByte(unsigned char data_buffer, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 800e848:	b480      	push	{r7}
 800e84a:	b085      	sub	sp, #20
 800e84c:	af00      	add	r7, sp, #0
 800e84e:	4603      	mov	r3, r0
 800e850:	71fb      	strb	r3, [r7, #7]
 800e852:	460b      	mov	r3, r1
 800e854:	71bb      	strb	r3, [r7, #6]
 800e856:	4613      	mov	r3, r2
 800e858:	717b      	strb	r3, [r7, #5]
#endif

#ifdef USE_BARE_SPI

    // pre frame delay
   	for(int d = 0; d < pre_frame_delay ; d++)
 800e85a:	2300      	movs	r3, #0
 800e85c:	60fb      	str	r3, [r7, #12]
 800e85e:	e003      	b.n	800e868 <_SPI_SendByte+0x20>
   		asm("nop");
 800e860:	bf00      	nop
   	for(int d = 0; d < pre_frame_delay ; d++)
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	3301      	adds	r3, #1
 800e866:	60fb      	str	r3, [r7, #12]
 800e868:	79bb      	ldrb	r3, [r7, #6]
 800e86a:	68fa      	ldr	r2, [r7, #12]
 800e86c:	429a      	cmp	r2, r3
 800e86e:	dbf7      	blt.n	800e860 <_SPI_SendByte+0x18>

	// check transmit buffer empty
	if((SPI_PERIPH->SR & SPI_SR_TXE) == SPI_SR_TXE)
 800e870:	4b0c      	ldr	r3, [pc, #48]	; (800e8a4 <_SPI_SendByte+0x5c>)
 800e872:	689b      	ldr	r3, [r3, #8]
 800e874:	f003 0302 	and.w	r3, r3, #2
 800e878:	2b02      	cmp	r3, #2
 800e87a:	d102      	bne.n	800e882 <_SPI_SendByte+0x3a>
	{
		*(volatile uint8_t *)&SPI_PERIPH->DR = data_buffer;
 800e87c:	4a0a      	ldr	r2, [pc, #40]	; (800e8a8 <_SPI_SendByte+0x60>)
 800e87e:	79fb      	ldrb	r3, [r7, #7]
 800e880:	7013      	strb	r3, [r2, #0]
	}

    // post frame delay
   	for(int d = 0; d < post_frame_delay ; d++)
 800e882:	2300      	movs	r3, #0
 800e884:	60bb      	str	r3, [r7, #8]
 800e886:	e003      	b.n	800e890 <_SPI_SendByte+0x48>
   		asm("nop");
 800e888:	bf00      	nop
   	for(int d = 0; d < post_frame_delay ; d++)
 800e88a:	68bb      	ldr	r3, [r7, #8]
 800e88c:	3301      	adds	r3, #1
 800e88e:	60bb      	str	r3, [r7, #8]
 800e890:	797b      	ldrb	r3, [r7, #5]
 800e892:	68ba      	ldr	r2, [r7, #8]
 800e894:	429a      	cmp	r2, r3
 800e896:	dbf7      	blt.n	800e888 <_SPI_SendByte+0x40>

#endif

}
 800e898:	bf00      	nop
 800e89a:	3714      	adds	r7, #20
 800e89c:	46bd      	mov	sp, r7
 800e89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a2:	4770      	bx	lr
 800e8a4:	40003c00 	.word	0x40003c00
 800e8a8:	40003c0c 	.word	0x40003c0c

0800e8ac <_SPI_SendByteMultiByte>:
 *
 * 	Send multiple bytes over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByteMultiByte(unsigned char *data_buffer, uint32_t buffer_size, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 800e8ac:	b480      	push	{r7}
 800e8ae:	b089      	sub	sp, #36	; 0x24
 800e8b0:	af00      	add	r7, sp, #0
 800e8b2:	60f8      	str	r0, [r7, #12]
 800e8b4:	60b9      	str	r1, [r7, #8]
 800e8b6:	4611      	mov	r1, r2
 800e8b8:	461a      	mov	r2, r3
 800e8ba:	460b      	mov	r3, r1
 800e8bc:	71fb      	strb	r3, [r7, #7]
 800e8be:	4613      	mov	r3, r2
 800e8c0:	71bb      	strb	r3, [r7, #6]
#endif

#ifdef USE_BARE_SPI

    // pre frame delay
   	for(int d = 0; d < pre_frame_delay ; d++)
 800e8c2:	2300      	movs	r3, #0
 800e8c4:	61fb      	str	r3, [r7, #28]
 800e8c6:	e003      	b.n	800e8d0 <_SPI_SendByteMultiByte+0x24>
   		asm("nop");
 800e8c8:	bf00      	nop
   	for(int d = 0; d < pre_frame_delay ; d++)
 800e8ca:	69fb      	ldr	r3, [r7, #28]
 800e8cc:	3301      	adds	r3, #1
 800e8ce:	61fb      	str	r3, [r7, #28]
 800e8d0:	79fb      	ldrb	r3, [r7, #7]
 800e8d2:	69fa      	ldr	r2, [r7, #28]
 800e8d4:	429a      	cmp	r2, r3
 800e8d6:	dbf7      	blt.n	800e8c8 <_SPI_SendByteMultiByte+0x1c>

	uint8_t *p_data_buffer = (uint8_t *)data_buffer;
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	61bb      	str	r3, [r7, #24]
	//volatile uint16_t TxXferCount = (uint16_t)buffer_size;

	while (buffer_size > 0U)
 800e8dc:	e01d      	b.n	800e91a <_SPI_SendByteMultiByte+0x6e>
	{
		// check transmit buffer empty
		if ((SPI_PERIPH->SR & SPI_SR_TXE) == SPI_SR_TXE)
 800e8de:	4b1c      	ldr	r3, [pc, #112]	; (800e950 <_SPI_SendByteMultiByte+0xa4>)
 800e8e0:	689b      	ldr	r3, [r3, #8]
 800e8e2:	f003 0302 	and.w	r3, r3, #2
 800e8e6:	2b02      	cmp	r3, #2
 800e8e8:	d117      	bne.n	800e91a <_SPI_SendByteMultiByte+0x6e>
		{
			if (buffer_size > 1U)
 800e8ea:	68bb      	ldr	r3, [r7, #8]
 800e8ec:	2b01      	cmp	r3, #1
 800e8ee:	d90a      	bls.n	800e906 <_SPI_SendByteMultiByte+0x5a>
			{
				// write on the data register in packing mode
				SPI_PERIPH->DR = *((uint16_t *)p_data_buffer);
 800e8f0:	69bb      	ldr	r3, [r7, #24]
 800e8f2:	881a      	ldrh	r2, [r3, #0]
 800e8f4:	4b16      	ldr	r3, [pc, #88]	; (800e950 <_SPI_SendByteMultiByte+0xa4>)
 800e8f6:	60da      	str	r2, [r3, #12]
				p_data_buffer += sizeof(uint16_t);
 800e8f8:	69bb      	ldr	r3, [r7, #24]
 800e8fa:	3302      	adds	r3, #2
 800e8fc:	61bb      	str	r3, [r7, #24]
				buffer_size -= 2U;
 800e8fe:	68bb      	ldr	r3, [r7, #8]
 800e900:	3b02      	subs	r3, #2
 800e902:	60bb      	str	r3, [r7, #8]
 800e904:	e009      	b.n	800e91a <_SPI_SendByteMultiByte+0x6e>
			}
			else
			{
				*((volatile uint8_t *)&SPI_PERIPH->DR) = (*p_data_buffer);
 800e906:	4a13      	ldr	r2, [pc, #76]	; (800e954 <_SPI_SendByteMultiByte+0xa8>)
 800e908:	69bb      	ldr	r3, [r7, #24]
 800e90a:	781b      	ldrb	r3, [r3, #0]
 800e90c:	7013      	strb	r3, [r2, #0]
				p_data_buffer++;
 800e90e:	69bb      	ldr	r3, [r7, #24]
 800e910:	3301      	adds	r3, #1
 800e912:	61bb      	str	r3, [r7, #24]
				buffer_size--;
 800e914:	68bb      	ldr	r3, [r7, #8]
 800e916:	3b01      	subs	r3, #1
 800e918:	60bb      	str	r3, [r7, #8]
	while (buffer_size > 0U)
 800e91a:	68bb      	ldr	r3, [r7, #8]
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d1de      	bne.n	800e8de <_SPI_SendByteMultiByte+0x32>
			}
		}
	}

	// clear SPI overrun flag
	SPI_PERIPH->SR &= ~(SPI_SR_OVR);
 800e920:	4b0b      	ldr	r3, [pc, #44]	; (800e950 <_SPI_SendByteMultiByte+0xa4>)
 800e922:	689b      	ldr	r3, [r3, #8]
 800e924:	4a0a      	ldr	r2, [pc, #40]	; (800e950 <_SPI_SendByteMultiByte+0xa4>)
 800e926:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e92a:	6093      	str	r3, [r2, #8]

    // post frame delay
   	for(int d = 0; d < post_frame_delay ; d++)
 800e92c:	2300      	movs	r3, #0
 800e92e:	617b      	str	r3, [r7, #20]
 800e930:	e003      	b.n	800e93a <_SPI_SendByteMultiByte+0x8e>
   		asm("nop");
 800e932:	bf00      	nop
   	for(int d = 0; d < post_frame_delay ; d++)
 800e934:	697b      	ldr	r3, [r7, #20]
 800e936:	3301      	adds	r3, #1
 800e938:	617b      	str	r3, [r7, #20]
 800e93a:	79bb      	ldrb	r3, [r7, #6]
 800e93c:	697a      	ldr	r2, [r7, #20]
 800e93e:	429a      	cmp	r2, r3
 800e940:	dbf7      	blt.n	800e932 <_SPI_SendByteMultiByte+0x86>

#endif

}
 800e942:	bf00      	nop
 800e944:	3724      	adds	r7, #36	; 0x24
 800e946:	46bd      	mov	sp, r7
 800e948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e94c:	4770      	bx	lr
 800e94e:	bf00      	nop
 800e950:	40003c00 	.word	0x40003c00
 800e954:	40003c0c 	.word	0x40003c0c

0800e958 <__errno>:
 800e958:	4b01      	ldr	r3, [pc, #4]	; (800e960 <__errno+0x8>)
 800e95a:	6818      	ldr	r0, [r3, #0]
 800e95c:	4770      	bx	lr
 800e95e:	bf00      	nop
 800e960:	20001ca4 	.word	0x20001ca4

0800e964 <__libc_init_array>:
 800e964:	b570      	push	{r4, r5, r6, lr}
 800e966:	4e0d      	ldr	r6, [pc, #52]	; (800e99c <__libc_init_array+0x38>)
 800e968:	4c0d      	ldr	r4, [pc, #52]	; (800e9a0 <__libc_init_array+0x3c>)
 800e96a:	1ba4      	subs	r4, r4, r6
 800e96c:	10a4      	asrs	r4, r4, #2
 800e96e:	2500      	movs	r5, #0
 800e970:	42a5      	cmp	r5, r4
 800e972:	d109      	bne.n	800e988 <__libc_init_array+0x24>
 800e974:	4e0b      	ldr	r6, [pc, #44]	; (800e9a4 <__libc_init_array+0x40>)
 800e976:	4c0c      	ldr	r4, [pc, #48]	; (800e9a8 <__libc_init_array+0x44>)
 800e978:	f003 ff48 	bl	801280c <_init>
 800e97c:	1ba4      	subs	r4, r4, r6
 800e97e:	10a4      	asrs	r4, r4, #2
 800e980:	2500      	movs	r5, #0
 800e982:	42a5      	cmp	r5, r4
 800e984:	d105      	bne.n	800e992 <__libc_init_array+0x2e>
 800e986:	bd70      	pop	{r4, r5, r6, pc}
 800e988:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e98c:	4798      	blx	r3
 800e98e:	3501      	adds	r5, #1
 800e990:	e7ee      	b.n	800e970 <__libc_init_array+0xc>
 800e992:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e996:	4798      	blx	r3
 800e998:	3501      	adds	r5, #1
 800e99a:	e7f2      	b.n	800e982 <__libc_init_array+0x1e>
 800e99c:	08013c80 	.word	0x08013c80
 800e9a0:	08013c80 	.word	0x08013c80
 800e9a4:	08013c80 	.word	0x08013c80
 800e9a8:	08013c84 	.word	0x08013c84

0800e9ac <memset>:
 800e9ac:	4402      	add	r2, r0
 800e9ae:	4603      	mov	r3, r0
 800e9b0:	4293      	cmp	r3, r2
 800e9b2:	d100      	bne.n	800e9b6 <memset+0xa>
 800e9b4:	4770      	bx	lr
 800e9b6:	f803 1b01 	strb.w	r1, [r3], #1
 800e9ba:	e7f9      	b.n	800e9b0 <memset+0x4>

0800e9bc <__cvt>:
 800e9bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e9c0:	ec55 4b10 	vmov	r4, r5, d0
 800e9c4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800e9c6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e9ca:	2d00      	cmp	r5, #0
 800e9cc:	460e      	mov	r6, r1
 800e9ce:	4691      	mov	r9, r2
 800e9d0:	4619      	mov	r1, r3
 800e9d2:	bfb8      	it	lt
 800e9d4:	4622      	movlt	r2, r4
 800e9d6:	462b      	mov	r3, r5
 800e9d8:	f027 0720 	bic.w	r7, r7, #32
 800e9dc:	bfbb      	ittet	lt
 800e9de:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e9e2:	461d      	movlt	r5, r3
 800e9e4:	2300      	movge	r3, #0
 800e9e6:	232d      	movlt	r3, #45	; 0x2d
 800e9e8:	bfb8      	it	lt
 800e9ea:	4614      	movlt	r4, r2
 800e9ec:	2f46      	cmp	r7, #70	; 0x46
 800e9ee:	700b      	strb	r3, [r1, #0]
 800e9f0:	d004      	beq.n	800e9fc <__cvt+0x40>
 800e9f2:	2f45      	cmp	r7, #69	; 0x45
 800e9f4:	d100      	bne.n	800e9f8 <__cvt+0x3c>
 800e9f6:	3601      	adds	r6, #1
 800e9f8:	2102      	movs	r1, #2
 800e9fa:	e000      	b.n	800e9fe <__cvt+0x42>
 800e9fc:	2103      	movs	r1, #3
 800e9fe:	ab03      	add	r3, sp, #12
 800ea00:	9301      	str	r3, [sp, #4]
 800ea02:	ab02      	add	r3, sp, #8
 800ea04:	9300      	str	r3, [sp, #0]
 800ea06:	4632      	mov	r2, r6
 800ea08:	4653      	mov	r3, sl
 800ea0a:	ec45 4b10 	vmov	d0, r4, r5
 800ea0e:	f000 fe27 	bl	800f660 <_dtoa_r>
 800ea12:	2f47      	cmp	r7, #71	; 0x47
 800ea14:	4680      	mov	r8, r0
 800ea16:	d102      	bne.n	800ea1e <__cvt+0x62>
 800ea18:	f019 0f01 	tst.w	r9, #1
 800ea1c:	d026      	beq.n	800ea6c <__cvt+0xb0>
 800ea1e:	2f46      	cmp	r7, #70	; 0x46
 800ea20:	eb08 0906 	add.w	r9, r8, r6
 800ea24:	d111      	bne.n	800ea4a <__cvt+0x8e>
 800ea26:	f898 3000 	ldrb.w	r3, [r8]
 800ea2a:	2b30      	cmp	r3, #48	; 0x30
 800ea2c:	d10a      	bne.n	800ea44 <__cvt+0x88>
 800ea2e:	2200      	movs	r2, #0
 800ea30:	2300      	movs	r3, #0
 800ea32:	4620      	mov	r0, r4
 800ea34:	4629      	mov	r1, r5
 800ea36:	f7f2 f86f 	bl	8000b18 <__aeabi_dcmpeq>
 800ea3a:	b918      	cbnz	r0, 800ea44 <__cvt+0x88>
 800ea3c:	f1c6 0601 	rsb	r6, r6, #1
 800ea40:	f8ca 6000 	str.w	r6, [sl]
 800ea44:	f8da 3000 	ldr.w	r3, [sl]
 800ea48:	4499      	add	r9, r3
 800ea4a:	2200      	movs	r2, #0
 800ea4c:	2300      	movs	r3, #0
 800ea4e:	4620      	mov	r0, r4
 800ea50:	4629      	mov	r1, r5
 800ea52:	f7f2 f861 	bl	8000b18 <__aeabi_dcmpeq>
 800ea56:	b938      	cbnz	r0, 800ea68 <__cvt+0xac>
 800ea58:	2230      	movs	r2, #48	; 0x30
 800ea5a:	9b03      	ldr	r3, [sp, #12]
 800ea5c:	454b      	cmp	r3, r9
 800ea5e:	d205      	bcs.n	800ea6c <__cvt+0xb0>
 800ea60:	1c59      	adds	r1, r3, #1
 800ea62:	9103      	str	r1, [sp, #12]
 800ea64:	701a      	strb	r2, [r3, #0]
 800ea66:	e7f8      	b.n	800ea5a <__cvt+0x9e>
 800ea68:	f8cd 900c 	str.w	r9, [sp, #12]
 800ea6c:	9b03      	ldr	r3, [sp, #12]
 800ea6e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ea70:	eba3 0308 	sub.w	r3, r3, r8
 800ea74:	4640      	mov	r0, r8
 800ea76:	6013      	str	r3, [r2, #0]
 800ea78:	b004      	add	sp, #16
 800ea7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800ea7e <__exponent>:
 800ea7e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ea80:	2900      	cmp	r1, #0
 800ea82:	4604      	mov	r4, r0
 800ea84:	bfba      	itte	lt
 800ea86:	4249      	neglt	r1, r1
 800ea88:	232d      	movlt	r3, #45	; 0x2d
 800ea8a:	232b      	movge	r3, #43	; 0x2b
 800ea8c:	2909      	cmp	r1, #9
 800ea8e:	f804 2b02 	strb.w	r2, [r4], #2
 800ea92:	7043      	strb	r3, [r0, #1]
 800ea94:	dd20      	ble.n	800ead8 <__exponent+0x5a>
 800ea96:	f10d 0307 	add.w	r3, sp, #7
 800ea9a:	461f      	mov	r7, r3
 800ea9c:	260a      	movs	r6, #10
 800ea9e:	fb91 f5f6 	sdiv	r5, r1, r6
 800eaa2:	fb06 1115 	mls	r1, r6, r5, r1
 800eaa6:	3130      	adds	r1, #48	; 0x30
 800eaa8:	2d09      	cmp	r5, #9
 800eaaa:	f803 1c01 	strb.w	r1, [r3, #-1]
 800eaae:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800eab2:	4629      	mov	r1, r5
 800eab4:	dc09      	bgt.n	800eaca <__exponent+0x4c>
 800eab6:	3130      	adds	r1, #48	; 0x30
 800eab8:	3b02      	subs	r3, #2
 800eaba:	f802 1c01 	strb.w	r1, [r2, #-1]
 800eabe:	42bb      	cmp	r3, r7
 800eac0:	4622      	mov	r2, r4
 800eac2:	d304      	bcc.n	800eace <__exponent+0x50>
 800eac4:	1a10      	subs	r0, r2, r0
 800eac6:	b003      	add	sp, #12
 800eac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eaca:	4613      	mov	r3, r2
 800eacc:	e7e7      	b.n	800ea9e <__exponent+0x20>
 800eace:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ead2:	f804 2b01 	strb.w	r2, [r4], #1
 800ead6:	e7f2      	b.n	800eabe <__exponent+0x40>
 800ead8:	2330      	movs	r3, #48	; 0x30
 800eada:	4419      	add	r1, r3
 800eadc:	7083      	strb	r3, [r0, #2]
 800eade:	1d02      	adds	r2, r0, #4
 800eae0:	70c1      	strb	r1, [r0, #3]
 800eae2:	e7ef      	b.n	800eac4 <__exponent+0x46>

0800eae4 <_printf_float>:
 800eae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eae8:	b08d      	sub	sp, #52	; 0x34
 800eaea:	460c      	mov	r4, r1
 800eaec:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800eaf0:	4616      	mov	r6, r2
 800eaf2:	461f      	mov	r7, r3
 800eaf4:	4605      	mov	r5, r0
 800eaf6:	f001 fce5 	bl	80104c4 <_localeconv_r>
 800eafa:	6803      	ldr	r3, [r0, #0]
 800eafc:	9304      	str	r3, [sp, #16]
 800eafe:	4618      	mov	r0, r3
 800eb00:	f7f1 fb8e 	bl	8000220 <strlen>
 800eb04:	2300      	movs	r3, #0
 800eb06:	930a      	str	r3, [sp, #40]	; 0x28
 800eb08:	f8d8 3000 	ldr.w	r3, [r8]
 800eb0c:	9005      	str	r0, [sp, #20]
 800eb0e:	3307      	adds	r3, #7
 800eb10:	f023 0307 	bic.w	r3, r3, #7
 800eb14:	f103 0208 	add.w	r2, r3, #8
 800eb18:	f894 a018 	ldrb.w	sl, [r4, #24]
 800eb1c:	f8d4 b000 	ldr.w	fp, [r4]
 800eb20:	f8c8 2000 	str.w	r2, [r8]
 800eb24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb28:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800eb2c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800eb30:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800eb34:	9307      	str	r3, [sp, #28]
 800eb36:	f8cd 8018 	str.w	r8, [sp, #24]
 800eb3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800eb3e:	4ba7      	ldr	r3, [pc, #668]	; (800eddc <_printf_float+0x2f8>)
 800eb40:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800eb44:	f7f2 f81a 	bl	8000b7c <__aeabi_dcmpun>
 800eb48:	bb70      	cbnz	r0, 800eba8 <_printf_float+0xc4>
 800eb4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800eb4e:	4ba3      	ldr	r3, [pc, #652]	; (800eddc <_printf_float+0x2f8>)
 800eb50:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800eb54:	f7f1 fff4 	bl	8000b40 <__aeabi_dcmple>
 800eb58:	bb30      	cbnz	r0, 800eba8 <_printf_float+0xc4>
 800eb5a:	2200      	movs	r2, #0
 800eb5c:	2300      	movs	r3, #0
 800eb5e:	4640      	mov	r0, r8
 800eb60:	4649      	mov	r1, r9
 800eb62:	f7f1 ffe3 	bl	8000b2c <__aeabi_dcmplt>
 800eb66:	b110      	cbz	r0, 800eb6e <_printf_float+0x8a>
 800eb68:	232d      	movs	r3, #45	; 0x2d
 800eb6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eb6e:	4a9c      	ldr	r2, [pc, #624]	; (800ede0 <_printf_float+0x2fc>)
 800eb70:	4b9c      	ldr	r3, [pc, #624]	; (800ede4 <_printf_float+0x300>)
 800eb72:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800eb76:	bf8c      	ite	hi
 800eb78:	4690      	movhi	r8, r2
 800eb7a:	4698      	movls	r8, r3
 800eb7c:	2303      	movs	r3, #3
 800eb7e:	f02b 0204 	bic.w	r2, fp, #4
 800eb82:	6123      	str	r3, [r4, #16]
 800eb84:	6022      	str	r2, [r4, #0]
 800eb86:	f04f 0900 	mov.w	r9, #0
 800eb8a:	9700      	str	r7, [sp, #0]
 800eb8c:	4633      	mov	r3, r6
 800eb8e:	aa0b      	add	r2, sp, #44	; 0x2c
 800eb90:	4621      	mov	r1, r4
 800eb92:	4628      	mov	r0, r5
 800eb94:	f000 f9e6 	bl	800ef64 <_printf_common>
 800eb98:	3001      	adds	r0, #1
 800eb9a:	f040 808d 	bne.w	800ecb8 <_printf_float+0x1d4>
 800eb9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800eba2:	b00d      	add	sp, #52	; 0x34
 800eba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eba8:	4642      	mov	r2, r8
 800ebaa:	464b      	mov	r3, r9
 800ebac:	4640      	mov	r0, r8
 800ebae:	4649      	mov	r1, r9
 800ebb0:	f7f1 ffe4 	bl	8000b7c <__aeabi_dcmpun>
 800ebb4:	b110      	cbz	r0, 800ebbc <_printf_float+0xd8>
 800ebb6:	4a8c      	ldr	r2, [pc, #560]	; (800ede8 <_printf_float+0x304>)
 800ebb8:	4b8c      	ldr	r3, [pc, #560]	; (800edec <_printf_float+0x308>)
 800ebba:	e7da      	b.n	800eb72 <_printf_float+0x8e>
 800ebbc:	6861      	ldr	r1, [r4, #4]
 800ebbe:	1c4b      	adds	r3, r1, #1
 800ebc0:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800ebc4:	a80a      	add	r0, sp, #40	; 0x28
 800ebc6:	d13e      	bne.n	800ec46 <_printf_float+0x162>
 800ebc8:	2306      	movs	r3, #6
 800ebca:	6063      	str	r3, [r4, #4]
 800ebcc:	2300      	movs	r3, #0
 800ebce:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800ebd2:	ab09      	add	r3, sp, #36	; 0x24
 800ebd4:	9300      	str	r3, [sp, #0]
 800ebd6:	ec49 8b10 	vmov	d0, r8, r9
 800ebda:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ebde:	6022      	str	r2, [r4, #0]
 800ebe0:	f8cd a004 	str.w	sl, [sp, #4]
 800ebe4:	6861      	ldr	r1, [r4, #4]
 800ebe6:	4628      	mov	r0, r5
 800ebe8:	f7ff fee8 	bl	800e9bc <__cvt>
 800ebec:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800ebf0:	2b47      	cmp	r3, #71	; 0x47
 800ebf2:	4680      	mov	r8, r0
 800ebf4:	d109      	bne.n	800ec0a <_printf_float+0x126>
 800ebf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ebf8:	1cd8      	adds	r0, r3, #3
 800ebfa:	db02      	blt.n	800ec02 <_printf_float+0x11e>
 800ebfc:	6862      	ldr	r2, [r4, #4]
 800ebfe:	4293      	cmp	r3, r2
 800ec00:	dd47      	ble.n	800ec92 <_printf_float+0x1ae>
 800ec02:	f1aa 0a02 	sub.w	sl, sl, #2
 800ec06:	fa5f fa8a 	uxtb.w	sl, sl
 800ec0a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800ec0e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ec10:	d824      	bhi.n	800ec5c <_printf_float+0x178>
 800ec12:	3901      	subs	r1, #1
 800ec14:	4652      	mov	r2, sl
 800ec16:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ec1a:	9109      	str	r1, [sp, #36]	; 0x24
 800ec1c:	f7ff ff2f 	bl	800ea7e <__exponent>
 800ec20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ec22:	1813      	adds	r3, r2, r0
 800ec24:	2a01      	cmp	r2, #1
 800ec26:	4681      	mov	r9, r0
 800ec28:	6123      	str	r3, [r4, #16]
 800ec2a:	dc02      	bgt.n	800ec32 <_printf_float+0x14e>
 800ec2c:	6822      	ldr	r2, [r4, #0]
 800ec2e:	07d1      	lsls	r1, r2, #31
 800ec30:	d501      	bpl.n	800ec36 <_printf_float+0x152>
 800ec32:	3301      	adds	r3, #1
 800ec34:	6123      	str	r3, [r4, #16]
 800ec36:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d0a5      	beq.n	800eb8a <_printf_float+0xa6>
 800ec3e:	232d      	movs	r3, #45	; 0x2d
 800ec40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ec44:	e7a1      	b.n	800eb8a <_printf_float+0xa6>
 800ec46:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800ec4a:	f000 8177 	beq.w	800ef3c <_printf_float+0x458>
 800ec4e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800ec52:	d1bb      	bne.n	800ebcc <_printf_float+0xe8>
 800ec54:	2900      	cmp	r1, #0
 800ec56:	d1b9      	bne.n	800ebcc <_printf_float+0xe8>
 800ec58:	2301      	movs	r3, #1
 800ec5a:	e7b6      	b.n	800ebca <_printf_float+0xe6>
 800ec5c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800ec60:	d119      	bne.n	800ec96 <_printf_float+0x1b2>
 800ec62:	2900      	cmp	r1, #0
 800ec64:	6863      	ldr	r3, [r4, #4]
 800ec66:	dd0c      	ble.n	800ec82 <_printf_float+0x19e>
 800ec68:	6121      	str	r1, [r4, #16]
 800ec6a:	b913      	cbnz	r3, 800ec72 <_printf_float+0x18e>
 800ec6c:	6822      	ldr	r2, [r4, #0]
 800ec6e:	07d2      	lsls	r2, r2, #31
 800ec70:	d502      	bpl.n	800ec78 <_printf_float+0x194>
 800ec72:	3301      	adds	r3, #1
 800ec74:	440b      	add	r3, r1
 800ec76:	6123      	str	r3, [r4, #16]
 800ec78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec7a:	65a3      	str	r3, [r4, #88]	; 0x58
 800ec7c:	f04f 0900 	mov.w	r9, #0
 800ec80:	e7d9      	b.n	800ec36 <_printf_float+0x152>
 800ec82:	b913      	cbnz	r3, 800ec8a <_printf_float+0x1a6>
 800ec84:	6822      	ldr	r2, [r4, #0]
 800ec86:	07d0      	lsls	r0, r2, #31
 800ec88:	d501      	bpl.n	800ec8e <_printf_float+0x1aa>
 800ec8a:	3302      	adds	r3, #2
 800ec8c:	e7f3      	b.n	800ec76 <_printf_float+0x192>
 800ec8e:	2301      	movs	r3, #1
 800ec90:	e7f1      	b.n	800ec76 <_printf_float+0x192>
 800ec92:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800ec96:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800ec9a:	4293      	cmp	r3, r2
 800ec9c:	db05      	blt.n	800ecaa <_printf_float+0x1c6>
 800ec9e:	6822      	ldr	r2, [r4, #0]
 800eca0:	6123      	str	r3, [r4, #16]
 800eca2:	07d1      	lsls	r1, r2, #31
 800eca4:	d5e8      	bpl.n	800ec78 <_printf_float+0x194>
 800eca6:	3301      	adds	r3, #1
 800eca8:	e7e5      	b.n	800ec76 <_printf_float+0x192>
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	bfd4      	ite	le
 800ecae:	f1c3 0302 	rsble	r3, r3, #2
 800ecb2:	2301      	movgt	r3, #1
 800ecb4:	4413      	add	r3, r2
 800ecb6:	e7de      	b.n	800ec76 <_printf_float+0x192>
 800ecb8:	6823      	ldr	r3, [r4, #0]
 800ecba:	055a      	lsls	r2, r3, #21
 800ecbc:	d407      	bmi.n	800ecce <_printf_float+0x1ea>
 800ecbe:	6923      	ldr	r3, [r4, #16]
 800ecc0:	4642      	mov	r2, r8
 800ecc2:	4631      	mov	r1, r6
 800ecc4:	4628      	mov	r0, r5
 800ecc6:	47b8      	blx	r7
 800ecc8:	3001      	adds	r0, #1
 800ecca:	d12b      	bne.n	800ed24 <_printf_float+0x240>
 800eccc:	e767      	b.n	800eb9e <_printf_float+0xba>
 800ecce:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800ecd2:	f240 80dc 	bls.w	800ee8e <_printf_float+0x3aa>
 800ecd6:	2200      	movs	r2, #0
 800ecd8:	2300      	movs	r3, #0
 800ecda:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ecde:	f7f1 ff1b 	bl	8000b18 <__aeabi_dcmpeq>
 800ece2:	2800      	cmp	r0, #0
 800ece4:	d033      	beq.n	800ed4e <_printf_float+0x26a>
 800ece6:	2301      	movs	r3, #1
 800ece8:	4a41      	ldr	r2, [pc, #260]	; (800edf0 <_printf_float+0x30c>)
 800ecea:	4631      	mov	r1, r6
 800ecec:	4628      	mov	r0, r5
 800ecee:	47b8      	blx	r7
 800ecf0:	3001      	adds	r0, #1
 800ecf2:	f43f af54 	beq.w	800eb9e <_printf_float+0xba>
 800ecf6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ecfa:	429a      	cmp	r2, r3
 800ecfc:	db02      	blt.n	800ed04 <_printf_float+0x220>
 800ecfe:	6823      	ldr	r3, [r4, #0]
 800ed00:	07d8      	lsls	r0, r3, #31
 800ed02:	d50f      	bpl.n	800ed24 <_printf_float+0x240>
 800ed04:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ed08:	4631      	mov	r1, r6
 800ed0a:	4628      	mov	r0, r5
 800ed0c:	47b8      	blx	r7
 800ed0e:	3001      	adds	r0, #1
 800ed10:	f43f af45 	beq.w	800eb9e <_printf_float+0xba>
 800ed14:	f04f 0800 	mov.w	r8, #0
 800ed18:	f104 091a 	add.w	r9, r4, #26
 800ed1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ed1e:	3b01      	subs	r3, #1
 800ed20:	4543      	cmp	r3, r8
 800ed22:	dc09      	bgt.n	800ed38 <_printf_float+0x254>
 800ed24:	6823      	ldr	r3, [r4, #0]
 800ed26:	079b      	lsls	r3, r3, #30
 800ed28:	f100 8103 	bmi.w	800ef32 <_printf_float+0x44e>
 800ed2c:	68e0      	ldr	r0, [r4, #12]
 800ed2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ed30:	4298      	cmp	r0, r3
 800ed32:	bfb8      	it	lt
 800ed34:	4618      	movlt	r0, r3
 800ed36:	e734      	b.n	800eba2 <_printf_float+0xbe>
 800ed38:	2301      	movs	r3, #1
 800ed3a:	464a      	mov	r2, r9
 800ed3c:	4631      	mov	r1, r6
 800ed3e:	4628      	mov	r0, r5
 800ed40:	47b8      	blx	r7
 800ed42:	3001      	adds	r0, #1
 800ed44:	f43f af2b 	beq.w	800eb9e <_printf_float+0xba>
 800ed48:	f108 0801 	add.w	r8, r8, #1
 800ed4c:	e7e6      	b.n	800ed1c <_printf_float+0x238>
 800ed4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	dc2b      	bgt.n	800edac <_printf_float+0x2c8>
 800ed54:	2301      	movs	r3, #1
 800ed56:	4a26      	ldr	r2, [pc, #152]	; (800edf0 <_printf_float+0x30c>)
 800ed58:	4631      	mov	r1, r6
 800ed5a:	4628      	mov	r0, r5
 800ed5c:	47b8      	blx	r7
 800ed5e:	3001      	adds	r0, #1
 800ed60:	f43f af1d 	beq.w	800eb9e <_printf_float+0xba>
 800ed64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed66:	b923      	cbnz	r3, 800ed72 <_printf_float+0x28e>
 800ed68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ed6a:	b913      	cbnz	r3, 800ed72 <_printf_float+0x28e>
 800ed6c:	6823      	ldr	r3, [r4, #0]
 800ed6e:	07d9      	lsls	r1, r3, #31
 800ed70:	d5d8      	bpl.n	800ed24 <_printf_float+0x240>
 800ed72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ed76:	4631      	mov	r1, r6
 800ed78:	4628      	mov	r0, r5
 800ed7a:	47b8      	blx	r7
 800ed7c:	3001      	adds	r0, #1
 800ed7e:	f43f af0e 	beq.w	800eb9e <_printf_float+0xba>
 800ed82:	f04f 0900 	mov.w	r9, #0
 800ed86:	f104 0a1a 	add.w	sl, r4, #26
 800ed8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed8c:	425b      	negs	r3, r3
 800ed8e:	454b      	cmp	r3, r9
 800ed90:	dc01      	bgt.n	800ed96 <_printf_float+0x2b2>
 800ed92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ed94:	e794      	b.n	800ecc0 <_printf_float+0x1dc>
 800ed96:	2301      	movs	r3, #1
 800ed98:	4652      	mov	r2, sl
 800ed9a:	4631      	mov	r1, r6
 800ed9c:	4628      	mov	r0, r5
 800ed9e:	47b8      	blx	r7
 800eda0:	3001      	adds	r0, #1
 800eda2:	f43f aefc 	beq.w	800eb9e <_printf_float+0xba>
 800eda6:	f109 0901 	add.w	r9, r9, #1
 800edaa:	e7ee      	b.n	800ed8a <_printf_float+0x2a6>
 800edac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800edae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800edb0:	429a      	cmp	r2, r3
 800edb2:	bfa8      	it	ge
 800edb4:	461a      	movge	r2, r3
 800edb6:	2a00      	cmp	r2, #0
 800edb8:	4691      	mov	r9, r2
 800edba:	dd07      	ble.n	800edcc <_printf_float+0x2e8>
 800edbc:	4613      	mov	r3, r2
 800edbe:	4631      	mov	r1, r6
 800edc0:	4642      	mov	r2, r8
 800edc2:	4628      	mov	r0, r5
 800edc4:	47b8      	blx	r7
 800edc6:	3001      	adds	r0, #1
 800edc8:	f43f aee9 	beq.w	800eb9e <_printf_float+0xba>
 800edcc:	f104 031a 	add.w	r3, r4, #26
 800edd0:	f04f 0b00 	mov.w	fp, #0
 800edd4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800edd8:	9306      	str	r3, [sp, #24]
 800edda:	e015      	b.n	800ee08 <_printf_float+0x324>
 800eddc:	7fefffff 	.word	0x7fefffff
 800ede0:	08013978 	.word	0x08013978
 800ede4:	08013974 	.word	0x08013974
 800ede8:	08013980 	.word	0x08013980
 800edec:	0801397c 	.word	0x0801397c
 800edf0:	08013c34 	.word	0x08013c34
 800edf4:	2301      	movs	r3, #1
 800edf6:	9a06      	ldr	r2, [sp, #24]
 800edf8:	4631      	mov	r1, r6
 800edfa:	4628      	mov	r0, r5
 800edfc:	47b8      	blx	r7
 800edfe:	3001      	adds	r0, #1
 800ee00:	f43f aecd 	beq.w	800eb9e <_printf_float+0xba>
 800ee04:	f10b 0b01 	add.w	fp, fp, #1
 800ee08:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800ee0c:	ebaa 0309 	sub.w	r3, sl, r9
 800ee10:	455b      	cmp	r3, fp
 800ee12:	dcef      	bgt.n	800edf4 <_printf_float+0x310>
 800ee14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ee18:	429a      	cmp	r2, r3
 800ee1a:	44d0      	add	r8, sl
 800ee1c:	db15      	blt.n	800ee4a <_printf_float+0x366>
 800ee1e:	6823      	ldr	r3, [r4, #0]
 800ee20:	07da      	lsls	r2, r3, #31
 800ee22:	d412      	bmi.n	800ee4a <_printf_float+0x366>
 800ee24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ee26:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ee28:	eba3 020a 	sub.w	r2, r3, sl
 800ee2c:	eba3 0a01 	sub.w	sl, r3, r1
 800ee30:	4592      	cmp	sl, r2
 800ee32:	bfa8      	it	ge
 800ee34:	4692      	movge	sl, r2
 800ee36:	f1ba 0f00 	cmp.w	sl, #0
 800ee3a:	dc0e      	bgt.n	800ee5a <_printf_float+0x376>
 800ee3c:	f04f 0800 	mov.w	r8, #0
 800ee40:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ee44:	f104 091a 	add.w	r9, r4, #26
 800ee48:	e019      	b.n	800ee7e <_printf_float+0x39a>
 800ee4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ee4e:	4631      	mov	r1, r6
 800ee50:	4628      	mov	r0, r5
 800ee52:	47b8      	blx	r7
 800ee54:	3001      	adds	r0, #1
 800ee56:	d1e5      	bne.n	800ee24 <_printf_float+0x340>
 800ee58:	e6a1      	b.n	800eb9e <_printf_float+0xba>
 800ee5a:	4653      	mov	r3, sl
 800ee5c:	4642      	mov	r2, r8
 800ee5e:	4631      	mov	r1, r6
 800ee60:	4628      	mov	r0, r5
 800ee62:	47b8      	blx	r7
 800ee64:	3001      	adds	r0, #1
 800ee66:	d1e9      	bne.n	800ee3c <_printf_float+0x358>
 800ee68:	e699      	b.n	800eb9e <_printf_float+0xba>
 800ee6a:	2301      	movs	r3, #1
 800ee6c:	464a      	mov	r2, r9
 800ee6e:	4631      	mov	r1, r6
 800ee70:	4628      	mov	r0, r5
 800ee72:	47b8      	blx	r7
 800ee74:	3001      	adds	r0, #1
 800ee76:	f43f ae92 	beq.w	800eb9e <_printf_float+0xba>
 800ee7a:	f108 0801 	add.w	r8, r8, #1
 800ee7e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ee82:	1a9b      	subs	r3, r3, r2
 800ee84:	eba3 030a 	sub.w	r3, r3, sl
 800ee88:	4543      	cmp	r3, r8
 800ee8a:	dcee      	bgt.n	800ee6a <_printf_float+0x386>
 800ee8c:	e74a      	b.n	800ed24 <_printf_float+0x240>
 800ee8e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ee90:	2a01      	cmp	r2, #1
 800ee92:	dc01      	bgt.n	800ee98 <_printf_float+0x3b4>
 800ee94:	07db      	lsls	r3, r3, #31
 800ee96:	d53a      	bpl.n	800ef0e <_printf_float+0x42a>
 800ee98:	2301      	movs	r3, #1
 800ee9a:	4642      	mov	r2, r8
 800ee9c:	4631      	mov	r1, r6
 800ee9e:	4628      	mov	r0, r5
 800eea0:	47b8      	blx	r7
 800eea2:	3001      	adds	r0, #1
 800eea4:	f43f ae7b 	beq.w	800eb9e <_printf_float+0xba>
 800eea8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800eeac:	4631      	mov	r1, r6
 800eeae:	4628      	mov	r0, r5
 800eeb0:	47b8      	blx	r7
 800eeb2:	3001      	adds	r0, #1
 800eeb4:	f108 0801 	add.w	r8, r8, #1
 800eeb8:	f43f ae71 	beq.w	800eb9e <_printf_float+0xba>
 800eebc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eebe:	2200      	movs	r2, #0
 800eec0:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 800eec4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800eec8:	2300      	movs	r3, #0
 800eeca:	f7f1 fe25 	bl	8000b18 <__aeabi_dcmpeq>
 800eece:	b9c8      	cbnz	r0, 800ef04 <_printf_float+0x420>
 800eed0:	4653      	mov	r3, sl
 800eed2:	4642      	mov	r2, r8
 800eed4:	4631      	mov	r1, r6
 800eed6:	4628      	mov	r0, r5
 800eed8:	47b8      	blx	r7
 800eeda:	3001      	adds	r0, #1
 800eedc:	d10e      	bne.n	800eefc <_printf_float+0x418>
 800eede:	e65e      	b.n	800eb9e <_printf_float+0xba>
 800eee0:	2301      	movs	r3, #1
 800eee2:	4652      	mov	r2, sl
 800eee4:	4631      	mov	r1, r6
 800eee6:	4628      	mov	r0, r5
 800eee8:	47b8      	blx	r7
 800eeea:	3001      	adds	r0, #1
 800eeec:	f43f ae57 	beq.w	800eb9e <_printf_float+0xba>
 800eef0:	f108 0801 	add.w	r8, r8, #1
 800eef4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eef6:	3b01      	subs	r3, #1
 800eef8:	4543      	cmp	r3, r8
 800eefa:	dcf1      	bgt.n	800eee0 <_printf_float+0x3fc>
 800eefc:	464b      	mov	r3, r9
 800eefe:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ef02:	e6de      	b.n	800ecc2 <_printf_float+0x1de>
 800ef04:	f04f 0800 	mov.w	r8, #0
 800ef08:	f104 0a1a 	add.w	sl, r4, #26
 800ef0c:	e7f2      	b.n	800eef4 <_printf_float+0x410>
 800ef0e:	2301      	movs	r3, #1
 800ef10:	e7df      	b.n	800eed2 <_printf_float+0x3ee>
 800ef12:	2301      	movs	r3, #1
 800ef14:	464a      	mov	r2, r9
 800ef16:	4631      	mov	r1, r6
 800ef18:	4628      	mov	r0, r5
 800ef1a:	47b8      	blx	r7
 800ef1c:	3001      	adds	r0, #1
 800ef1e:	f43f ae3e 	beq.w	800eb9e <_printf_float+0xba>
 800ef22:	f108 0801 	add.w	r8, r8, #1
 800ef26:	68e3      	ldr	r3, [r4, #12]
 800ef28:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ef2a:	1a9b      	subs	r3, r3, r2
 800ef2c:	4543      	cmp	r3, r8
 800ef2e:	dcf0      	bgt.n	800ef12 <_printf_float+0x42e>
 800ef30:	e6fc      	b.n	800ed2c <_printf_float+0x248>
 800ef32:	f04f 0800 	mov.w	r8, #0
 800ef36:	f104 0919 	add.w	r9, r4, #25
 800ef3a:	e7f4      	b.n	800ef26 <_printf_float+0x442>
 800ef3c:	2900      	cmp	r1, #0
 800ef3e:	f43f ae8b 	beq.w	800ec58 <_printf_float+0x174>
 800ef42:	2300      	movs	r3, #0
 800ef44:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800ef48:	ab09      	add	r3, sp, #36	; 0x24
 800ef4a:	9300      	str	r3, [sp, #0]
 800ef4c:	ec49 8b10 	vmov	d0, r8, r9
 800ef50:	6022      	str	r2, [r4, #0]
 800ef52:	f8cd a004 	str.w	sl, [sp, #4]
 800ef56:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ef5a:	4628      	mov	r0, r5
 800ef5c:	f7ff fd2e 	bl	800e9bc <__cvt>
 800ef60:	4680      	mov	r8, r0
 800ef62:	e648      	b.n	800ebf6 <_printf_float+0x112>

0800ef64 <_printf_common>:
 800ef64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef68:	4691      	mov	r9, r2
 800ef6a:	461f      	mov	r7, r3
 800ef6c:	688a      	ldr	r2, [r1, #8]
 800ef6e:	690b      	ldr	r3, [r1, #16]
 800ef70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ef74:	4293      	cmp	r3, r2
 800ef76:	bfb8      	it	lt
 800ef78:	4613      	movlt	r3, r2
 800ef7a:	f8c9 3000 	str.w	r3, [r9]
 800ef7e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ef82:	4606      	mov	r6, r0
 800ef84:	460c      	mov	r4, r1
 800ef86:	b112      	cbz	r2, 800ef8e <_printf_common+0x2a>
 800ef88:	3301      	adds	r3, #1
 800ef8a:	f8c9 3000 	str.w	r3, [r9]
 800ef8e:	6823      	ldr	r3, [r4, #0]
 800ef90:	0699      	lsls	r1, r3, #26
 800ef92:	bf42      	ittt	mi
 800ef94:	f8d9 3000 	ldrmi.w	r3, [r9]
 800ef98:	3302      	addmi	r3, #2
 800ef9a:	f8c9 3000 	strmi.w	r3, [r9]
 800ef9e:	6825      	ldr	r5, [r4, #0]
 800efa0:	f015 0506 	ands.w	r5, r5, #6
 800efa4:	d107      	bne.n	800efb6 <_printf_common+0x52>
 800efa6:	f104 0a19 	add.w	sl, r4, #25
 800efaa:	68e3      	ldr	r3, [r4, #12]
 800efac:	f8d9 2000 	ldr.w	r2, [r9]
 800efb0:	1a9b      	subs	r3, r3, r2
 800efb2:	42ab      	cmp	r3, r5
 800efb4:	dc28      	bgt.n	800f008 <_printf_common+0xa4>
 800efb6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800efba:	6822      	ldr	r2, [r4, #0]
 800efbc:	3300      	adds	r3, #0
 800efbe:	bf18      	it	ne
 800efc0:	2301      	movne	r3, #1
 800efc2:	0692      	lsls	r2, r2, #26
 800efc4:	d42d      	bmi.n	800f022 <_printf_common+0xbe>
 800efc6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800efca:	4639      	mov	r1, r7
 800efcc:	4630      	mov	r0, r6
 800efce:	47c0      	blx	r8
 800efd0:	3001      	adds	r0, #1
 800efd2:	d020      	beq.n	800f016 <_printf_common+0xb2>
 800efd4:	6823      	ldr	r3, [r4, #0]
 800efd6:	68e5      	ldr	r5, [r4, #12]
 800efd8:	f8d9 2000 	ldr.w	r2, [r9]
 800efdc:	f003 0306 	and.w	r3, r3, #6
 800efe0:	2b04      	cmp	r3, #4
 800efe2:	bf08      	it	eq
 800efe4:	1aad      	subeq	r5, r5, r2
 800efe6:	68a3      	ldr	r3, [r4, #8]
 800efe8:	6922      	ldr	r2, [r4, #16]
 800efea:	bf0c      	ite	eq
 800efec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800eff0:	2500      	movne	r5, #0
 800eff2:	4293      	cmp	r3, r2
 800eff4:	bfc4      	itt	gt
 800eff6:	1a9b      	subgt	r3, r3, r2
 800eff8:	18ed      	addgt	r5, r5, r3
 800effa:	f04f 0900 	mov.w	r9, #0
 800effe:	341a      	adds	r4, #26
 800f000:	454d      	cmp	r5, r9
 800f002:	d11a      	bne.n	800f03a <_printf_common+0xd6>
 800f004:	2000      	movs	r0, #0
 800f006:	e008      	b.n	800f01a <_printf_common+0xb6>
 800f008:	2301      	movs	r3, #1
 800f00a:	4652      	mov	r2, sl
 800f00c:	4639      	mov	r1, r7
 800f00e:	4630      	mov	r0, r6
 800f010:	47c0      	blx	r8
 800f012:	3001      	adds	r0, #1
 800f014:	d103      	bne.n	800f01e <_printf_common+0xba>
 800f016:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f01a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f01e:	3501      	adds	r5, #1
 800f020:	e7c3      	b.n	800efaa <_printf_common+0x46>
 800f022:	18e1      	adds	r1, r4, r3
 800f024:	1c5a      	adds	r2, r3, #1
 800f026:	2030      	movs	r0, #48	; 0x30
 800f028:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f02c:	4422      	add	r2, r4
 800f02e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f032:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f036:	3302      	adds	r3, #2
 800f038:	e7c5      	b.n	800efc6 <_printf_common+0x62>
 800f03a:	2301      	movs	r3, #1
 800f03c:	4622      	mov	r2, r4
 800f03e:	4639      	mov	r1, r7
 800f040:	4630      	mov	r0, r6
 800f042:	47c0      	blx	r8
 800f044:	3001      	adds	r0, #1
 800f046:	d0e6      	beq.n	800f016 <_printf_common+0xb2>
 800f048:	f109 0901 	add.w	r9, r9, #1
 800f04c:	e7d8      	b.n	800f000 <_printf_common+0x9c>
	...

0800f050 <_printf_i>:
 800f050:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f054:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800f058:	460c      	mov	r4, r1
 800f05a:	7e09      	ldrb	r1, [r1, #24]
 800f05c:	b085      	sub	sp, #20
 800f05e:	296e      	cmp	r1, #110	; 0x6e
 800f060:	4617      	mov	r7, r2
 800f062:	4606      	mov	r6, r0
 800f064:	4698      	mov	r8, r3
 800f066:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f068:	f000 80b3 	beq.w	800f1d2 <_printf_i+0x182>
 800f06c:	d822      	bhi.n	800f0b4 <_printf_i+0x64>
 800f06e:	2963      	cmp	r1, #99	; 0x63
 800f070:	d036      	beq.n	800f0e0 <_printf_i+0x90>
 800f072:	d80a      	bhi.n	800f08a <_printf_i+0x3a>
 800f074:	2900      	cmp	r1, #0
 800f076:	f000 80b9 	beq.w	800f1ec <_printf_i+0x19c>
 800f07a:	2958      	cmp	r1, #88	; 0x58
 800f07c:	f000 8083 	beq.w	800f186 <_printf_i+0x136>
 800f080:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f084:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800f088:	e032      	b.n	800f0f0 <_printf_i+0xa0>
 800f08a:	2964      	cmp	r1, #100	; 0x64
 800f08c:	d001      	beq.n	800f092 <_printf_i+0x42>
 800f08e:	2969      	cmp	r1, #105	; 0x69
 800f090:	d1f6      	bne.n	800f080 <_printf_i+0x30>
 800f092:	6820      	ldr	r0, [r4, #0]
 800f094:	6813      	ldr	r3, [r2, #0]
 800f096:	0605      	lsls	r5, r0, #24
 800f098:	f103 0104 	add.w	r1, r3, #4
 800f09c:	d52a      	bpl.n	800f0f4 <_printf_i+0xa4>
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	6011      	str	r1, [r2, #0]
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	da03      	bge.n	800f0ae <_printf_i+0x5e>
 800f0a6:	222d      	movs	r2, #45	; 0x2d
 800f0a8:	425b      	negs	r3, r3
 800f0aa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800f0ae:	486f      	ldr	r0, [pc, #444]	; (800f26c <_printf_i+0x21c>)
 800f0b0:	220a      	movs	r2, #10
 800f0b2:	e039      	b.n	800f128 <_printf_i+0xd8>
 800f0b4:	2973      	cmp	r1, #115	; 0x73
 800f0b6:	f000 809d 	beq.w	800f1f4 <_printf_i+0x1a4>
 800f0ba:	d808      	bhi.n	800f0ce <_printf_i+0x7e>
 800f0bc:	296f      	cmp	r1, #111	; 0x6f
 800f0be:	d020      	beq.n	800f102 <_printf_i+0xb2>
 800f0c0:	2970      	cmp	r1, #112	; 0x70
 800f0c2:	d1dd      	bne.n	800f080 <_printf_i+0x30>
 800f0c4:	6823      	ldr	r3, [r4, #0]
 800f0c6:	f043 0320 	orr.w	r3, r3, #32
 800f0ca:	6023      	str	r3, [r4, #0]
 800f0cc:	e003      	b.n	800f0d6 <_printf_i+0x86>
 800f0ce:	2975      	cmp	r1, #117	; 0x75
 800f0d0:	d017      	beq.n	800f102 <_printf_i+0xb2>
 800f0d2:	2978      	cmp	r1, #120	; 0x78
 800f0d4:	d1d4      	bne.n	800f080 <_printf_i+0x30>
 800f0d6:	2378      	movs	r3, #120	; 0x78
 800f0d8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f0dc:	4864      	ldr	r0, [pc, #400]	; (800f270 <_printf_i+0x220>)
 800f0de:	e055      	b.n	800f18c <_printf_i+0x13c>
 800f0e0:	6813      	ldr	r3, [r2, #0]
 800f0e2:	1d19      	adds	r1, r3, #4
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	6011      	str	r1, [r2, #0]
 800f0e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f0ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f0f0:	2301      	movs	r3, #1
 800f0f2:	e08c      	b.n	800f20e <_printf_i+0x1be>
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	6011      	str	r1, [r2, #0]
 800f0f8:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f0fc:	bf18      	it	ne
 800f0fe:	b21b      	sxthne	r3, r3
 800f100:	e7cf      	b.n	800f0a2 <_printf_i+0x52>
 800f102:	6813      	ldr	r3, [r2, #0]
 800f104:	6825      	ldr	r5, [r4, #0]
 800f106:	1d18      	adds	r0, r3, #4
 800f108:	6010      	str	r0, [r2, #0]
 800f10a:	0628      	lsls	r0, r5, #24
 800f10c:	d501      	bpl.n	800f112 <_printf_i+0xc2>
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	e002      	b.n	800f118 <_printf_i+0xc8>
 800f112:	0668      	lsls	r0, r5, #25
 800f114:	d5fb      	bpl.n	800f10e <_printf_i+0xbe>
 800f116:	881b      	ldrh	r3, [r3, #0]
 800f118:	4854      	ldr	r0, [pc, #336]	; (800f26c <_printf_i+0x21c>)
 800f11a:	296f      	cmp	r1, #111	; 0x6f
 800f11c:	bf14      	ite	ne
 800f11e:	220a      	movne	r2, #10
 800f120:	2208      	moveq	r2, #8
 800f122:	2100      	movs	r1, #0
 800f124:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f128:	6865      	ldr	r5, [r4, #4]
 800f12a:	60a5      	str	r5, [r4, #8]
 800f12c:	2d00      	cmp	r5, #0
 800f12e:	f2c0 8095 	blt.w	800f25c <_printf_i+0x20c>
 800f132:	6821      	ldr	r1, [r4, #0]
 800f134:	f021 0104 	bic.w	r1, r1, #4
 800f138:	6021      	str	r1, [r4, #0]
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d13d      	bne.n	800f1ba <_printf_i+0x16a>
 800f13e:	2d00      	cmp	r5, #0
 800f140:	f040 808e 	bne.w	800f260 <_printf_i+0x210>
 800f144:	4665      	mov	r5, ip
 800f146:	2a08      	cmp	r2, #8
 800f148:	d10b      	bne.n	800f162 <_printf_i+0x112>
 800f14a:	6823      	ldr	r3, [r4, #0]
 800f14c:	07db      	lsls	r3, r3, #31
 800f14e:	d508      	bpl.n	800f162 <_printf_i+0x112>
 800f150:	6923      	ldr	r3, [r4, #16]
 800f152:	6862      	ldr	r2, [r4, #4]
 800f154:	429a      	cmp	r2, r3
 800f156:	bfde      	ittt	le
 800f158:	2330      	movle	r3, #48	; 0x30
 800f15a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f15e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800f162:	ebac 0305 	sub.w	r3, ip, r5
 800f166:	6123      	str	r3, [r4, #16]
 800f168:	f8cd 8000 	str.w	r8, [sp]
 800f16c:	463b      	mov	r3, r7
 800f16e:	aa03      	add	r2, sp, #12
 800f170:	4621      	mov	r1, r4
 800f172:	4630      	mov	r0, r6
 800f174:	f7ff fef6 	bl	800ef64 <_printf_common>
 800f178:	3001      	adds	r0, #1
 800f17a:	d14d      	bne.n	800f218 <_printf_i+0x1c8>
 800f17c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f180:	b005      	add	sp, #20
 800f182:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f186:	4839      	ldr	r0, [pc, #228]	; (800f26c <_printf_i+0x21c>)
 800f188:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800f18c:	6813      	ldr	r3, [r2, #0]
 800f18e:	6821      	ldr	r1, [r4, #0]
 800f190:	1d1d      	adds	r5, r3, #4
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	6015      	str	r5, [r2, #0]
 800f196:	060a      	lsls	r2, r1, #24
 800f198:	d50b      	bpl.n	800f1b2 <_printf_i+0x162>
 800f19a:	07ca      	lsls	r2, r1, #31
 800f19c:	bf44      	itt	mi
 800f19e:	f041 0120 	orrmi.w	r1, r1, #32
 800f1a2:	6021      	strmi	r1, [r4, #0]
 800f1a4:	b91b      	cbnz	r3, 800f1ae <_printf_i+0x15e>
 800f1a6:	6822      	ldr	r2, [r4, #0]
 800f1a8:	f022 0220 	bic.w	r2, r2, #32
 800f1ac:	6022      	str	r2, [r4, #0]
 800f1ae:	2210      	movs	r2, #16
 800f1b0:	e7b7      	b.n	800f122 <_printf_i+0xd2>
 800f1b2:	064d      	lsls	r5, r1, #25
 800f1b4:	bf48      	it	mi
 800f1b6:	b29b      	uxthmi	r3, r3
 800f1b8:	e7ef      	b.n	800f19a <_printf_i+0x14a>
 800f1ba:	4665      	mov	r5, ip
 800f1bc:	fbb3 f1f2 	udiv	r1, r3, r2
 800f1c0:	fb02 3311 	mls	r3, r2, r1, r3
 800f1c4:	5cc3      	ldrb	r3, [r0, r3]
 800f1c6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800f1ca:	460b      	mov	r3, r1
 800f1cc:	2900      	cmp	r1, #0
 800f1ce:	d1f5      	bne.n	800f1bc <_printf_i+0x16c>
 800f1d0:	e7b9      	b.n	800f146 <_printf_i+0xf6>
 800f1d2:	6813      	ldr	r3, [r2, #0]
 800f1d4:	6825      	ldr	r5, [r4, #0]
 800f1d6:	6961      	ldr	r1, [r4, #20]
 800f1d8:	1d18      	adds	r0, r3, #4
 800f1da:	6010      	str	r0, [r2, #0]
 800f1dc:	0628      	lsls	r0, r5, #24
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	d501      	bpl.n	800f1e6 <_printf_i+0x196>
 800f1e2:	6019      	str	r1, [r3, #0]
 800f1e4:	e002      	b.n	800f1ec <_printf_i+0x19c>
 800f1e6:	066a      	lsls	r2, r5, #25
 800f1e8:	d5fb      	bpl.n	800f1e2 <_printf_i+0x192>
 800f1ea:	8019      	strh	r1, [r3, #0]
 800f1ec:	2300      	movs	r3, #0
 800f1ee:	6123      	str	r3, [r4, #16]
 800f1f0:	4665      	mov	r5, ip
 800f1f2:	e7b9      	b.n	800f168 <_printf_i+0x118>
 800f1f4:	6813      	ldr	r3, [r2, #0]
 800f1f6:	1d19      	adds	r1, r3, #4
 800f1f8:	6011      	str	r1, [r2, #0]
 800f1fa:	681d      	ldr	r5, [r3, #0]
 800f1fc:	6862      	ldr	r2, [r4, #4]
 800f1fe:	2100      	movs	r1, #0
 800f200:	4628      	mov	r0, r5
 800f202:	f7f1 f815 	bl	8000230 <memchr>
 800f206:	b108      	cbz	r0, 800f20c <_printf_i+0x1bc>
 800f208:	1b40      	subs	r0, r0, r5
 800f20a:	6060      	str	r0, [r4, #4]
 800f20c:	6863      	ldr	r3, [r4, #4]
 800f20e:	6123      	str	r3, [r4, #16]
 800f210:	2300      	movs	r3, #0
 800f212:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f216:	e7a7      	b.n	800f168 <_printf_i+0x118>
 800f218:	6923      	ldr	r3, [r4, #16]
 800f21a:	462a      	mov	r2, r5
 800f21c:	4639      	mov	r1, r7
 800f21e:	4630      	mov	r0, r6
 800f220:	47c0      	blx	r8
 800f222:	3001      	adds	r0, #1
 800f224:	d0aa      	beq.n	800f17c <_printf_i+0x12c>
 800f226:	6823      	ldr	r3, [r4, #0]
 800f228:	079b      	lsls	r3, r3, #30
 800f22a:	d413      	bmi.n	800f254 <_printf_i+0x204>
 800f22c:	68e0      	ldr	r0, [r4, #12]
 800f22e:	9b03      	ldr	r3, [sp, #12]
 800f230:	4298      	cmp	r0, r3
 800f232:	bfb8      	it	lt
 800f234:	4618      	movlt	r0, r3
 800f236:	e7a3      	b.n	800f180 <_printf_i+0x130>
 800f238:	2301      	movs	r3, #1
 800f23a:	464a      	mov	r2, r9
 800f23c:	4639      	mov	r1, r7
 800f23e:	4630      	mov	r0, r6
 800f240:	47c0      	blx	r8
 800f242:	3001      	adds	r0, #1
 800f244:	d09a      	beq.n	800f17c <_printf_i+0x12c>
 800f246:	3501      	adds	r5, #1
 800f248:	68e3      	ldr	r3, [r4, #12]
 800f24a:	9a03      	ldr	r2, [sp, #12]
 800f24c:	1a9b      	subs	r3, r3, r2
 800f24e:	42ab      	cmp	r3, r5
 800f250:	dcf2      	bgt.n	800f238 <_printf_i+0x1e8>
 800f252:	e7eb      	b.n	800f22c <_printf_i+0x1dc>
 800f254:	2500      	movs	r5, #0
 800f256:	f104 0919 	add.w	r9, r4, #25
 800f25a:	e7f5      	b.n	800f248 <_printf_i+0x1f8>
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d1ac      	bne.n	800f1ba <_printf_i+0x16a>
 800f260:	7803      	ldrb	r3, [r0, #0]
 800f262:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f266:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f26a:	e76c      	b.n	800f146 <_printf_i+0xf6>
 800f26c:	08013984 	.word	0x08013984
 800f270:	08013995 	.word	0x08013995

0800f274 <_puts_r>:
 800f274:	b570      	push	{r4, r5, r6, lr}
 800f276:	460e      	mov	r6, r1
 800f278:	4605      	mov	r5, r0
 800f27a:	b118      	cbz	r0, 800f284 <_puts_r+0x10>
 800f27c:	6983      	ldr	r3, [r0, #24]
 800f27e:	b90b      	cbnz	r3, 800f284 <_puts_r+0x10>
 800f280:	f001 f896 	bl	80103b0 <__sinit>
 800f284:	69ab      	ldr	r3, [r5, #24]
 800f286:	68ac      	ldr	r4, [r5, #8]
 800f288:	b913      	cbnz	r3, 800f290 <_puts_r+0x1c>
 800f28a:	4628      	mov	r0, r5
 800f28c:	f001 f890 	bl	80103b0 <__sinit>
 800f290:	4b23      	ldr	r3, [pc, #140]	; (800f320 <_puts_r+0xac>)
 800f292:	429c      	cmp	r4, r3
 800f294:	d117      	bne.n	800f2c6 <_puts_r+0x52>
 800f296:	686c      	ldr	r4, [r5, #4]
 800f298:	89a3      	ldrh	r3, [r4, #12]
 800f29a:	071b      	lsls	r3, r3, #28
 800f29c:	d51d      	bpl.n	800f2da <_puts_r+0x66>
 800f29e:	6923      	ldr	r3, [r4, #16]
 800f2a0:	b1db      	cbz	r3, 800f2da <_puts_r+0x66>
 800f2a2:	3e01      	subs	r6, #1
 800f2a4:	68a3      	ldr	r3, [r4, #8]
 800f2a6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f2aa:	3b01      	subs	r3, #1
 800f2ac:	60a3      	str	r3, [r4, #8]
 800f2ae:	b9e9      	cbnz	r1, 800f2ec <_puts_r+0x78>
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	da2e      	bge.n	800f312 <_puts_r+0x9e>
 800f2b4:	4622      	mov	r2, r4
 800f2b6:	210a      	movs	r1, #10
 800f2b8:	4628      	mov	r0, r5
 800f2ba:	f000 f883 	bl	800f3c4 <__swbuf_r>
 800f2be:	3001      	adds	r0, #1
 800f2c0:	d011      	beq.n	800f2e6 <_puts_r+0x72>
 800f2c2:	200a      	movs	r0, #10
 800f2c4:	e011      	b.n	800f2ea <_puts_r+0x76>
 800f2c6:	4b17      	ldr	r3, [pc, #92]	; (800f324 <_puts_r+0xb0>)
 800f2c8:	429c      	cmp	r4, r3
 800f2ca:	d101      	bne.n	800f2d0 <_puts_r+0x5c>
 800f2cc:	68ac      	ldr	r4, [r5, #8]
 800f2ce:	e7e3      	b.n	800f298 <_puts_r+0x24>
 800f2d0:	4b15      	ldr	r3, [pc, #84]	; (800f328 <_puts_r+0xb4>)
 800f2d2:	429c      	cmp	r4, r3
 800f2d4:	bf08      	it	eq
 800f2d6:	68ec      	ldreq	r4, [r5, #12]
 800f2d8:	e7de      	b.n	800f298 <_puts_r+0x24>
 800f2da:	4621      	mov	r1, r4
 800f2dc:	4628      	mov	r0, r5
 800f2de:	f000 f8c3 	bl	800f468 <__swsetup_r>
 800f2e2:	2800      	cmp	r0, #0
 800f2e4:	d0dd      	beq.n	800f2a2 <_puts_r+0x2e>
 800f2e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f2ea:	bd70      	pop	{r4, r5, r6, pc}
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	da04      	bge.n	800f2fa <_puts_r+0x86>
 800f2f0:	69a2      	ldr	r2, [r4, #24]
 800f2f2:	429a      	cmp	r2, r3
 800f2f4:	dc06      	bgt.n	800f304 <_puts_r+0x90>
 800f2f6:	290a      	cmp	r1, #10
 800f2f8:	d004      	beq.n	800f304 <_puts_r+0x90>
 800f2fa:	6823      	ldr	r3, [r4, #0]
 800f2fc:	1c5a      	adds	r2, r3, #1
 800f2fe:	6022      	str	r2, [r4, #0]
 800f300:	7019      	strb	r1, [r3, #0]
 800f302:	e7cf      	b.n	800f2a4 <_puts_r+0x30>
 800f304:	4622      	mov	r2, r4
 800f306:	4628      	mov	r0, r5
 800f308:	f000 f85c 	bl	800f3c4 <__swbuf_r>
 800f30c:	3001      	adds	r0, #1
 800f30e:	d1c9      	bne.n	800f2a4 <_puts_r+0x30>
 800f310:	e7e9      	b.n	800f2e6 <_puts_r+0x72>
 800f312:	6823      	ldr	r3, [r4, #0]
 800f314:	200a      	movs	r0, #10
 800f316:	1c5a      	adds	r2, r3, #1
 800f318:	6022      	str	r2, [r4, #0]
 800f31a:	7018      	strb	r0, [r3, #0]
 800f31c:	e7e5      	b.n	800f2ea <_puts_r+0x76>
 800f31e:	bf00      	nop
 800f320:	080139d4 	.word	0x080139d4
 800f324:	080139f4 	.word	0x080139f4
 800f328:	080139b4 	.word	0x080139b4

0800f32c <puts>:
 800f32c:	4b02      	ldr	r3, [pc, #8]	; (800f338 <puts+0xc>)
 800f32e:	4601      	mov	r1, r0
 800f330:	6818      	ldr	r0, [r3, #0]
 800f332:	f7ff bf9f 	b.w	800f274 <_puts_r>
 800f336:	bf00      	nop
 800f338:	20001ca4 	.word	0x20001ca4

0800f33c <sniprintf>:
 800f33c:	b40c      	push	{r2, r3}
 800f33e:	b530      	push	{r4, r5, lr}
 800f340:	4b17      	ldr	r3, [pc, #92]	; (800f3a0 <sniprintf+0x64>)
 800f342:	1e0c      	subs	r4, r1, #0
 800f344:	b09d      	sub	sp, #116	; 0x74
 800f346:	681d      	ldr	r5, [r3, #0]
 800f348:	da08      	bge.n	800f35c <sniprintf+0x20>
 800f34a:	238b      	movs	r3, #139	; 0x8b
 800f34c:	602b      	str	r3, [r5, #0]
 800f34e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f352:	b01d      	add	sp, #116	; 0x74
 800f354:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f358:	b002      	add	sp, #8
 800f35a:	4770      	bx	lr
 800f35c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800f360:	f8ad 3014 	strh.w	r3, [sp, #20]
 800f364:	bf14      	ite	ne
 800f366:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800f36a:	4623      	moveq	r3, r4
 800f36c:	9304      	str	r3, [sp, #16]
 800f36e:	9307      	str	r3, [sp, #28]
 800f370:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f374:	9002      	str	r0, [sp, #8]
 800f376:	9006      	str	r0, [sp, #24]
 800f378:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f37c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800f37e:	ab21      	add	r3, sp, #132	; 0x84
 800f380:	a902      	add	r1, sp, #8
 800f382:	4628      	mov	r0, r5
 800f384:	9301      	str	r3, [sp, #4]
 800f386:	f001 fd0d 	bl	8010da4 <_svfiprintf_r>
 800f38a:	1c43      	adds	r3, r0, #1
 800f38c:	bfbc      	itt	lt
 800f38e:	238b      	movlt	r3, #139	; 0x8b
 800f390:	602b      	strlt	r3, [r5, #0]
 800f392:	2c00      	cmp	r4, #0
 800f394:	d0dd      	beq.n	800f352 <sniprintf+0x16>
 800f396:	9b02      	ldr	r3, [sp, #8]
 800f398:	2200      	movs	r2, #0
 800f39a:	701a      	strb	r2, [r3, #0]
 800f39c:	e7d9      	b.n	800f352 <sniprintf+0x16>
 800f39e:	bf00      	nop
 800f3a0:	20001ca4 	.word	0x20001ca4

0800f3a4 <strcat>:
 800f3a4:	b510      	push	{r4, lr}
 800f3a6:	4603      	mov	r3, r0
 800f3a8:	781a      	ldrb	r2, [r3, #0]
 800f3aa:	1c5c      	adds	r4, r3, #1
 800f3ac:	b93a      	cbnz	r2, 800f3be <strcat+0x1a>
 800f3ae:	3b01      	subs	r3, #1
 800f3b0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f3b4:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f3b8:	2a00      	cmp	r2, #0
 800f3ba:	d1f9      	bne.n	800f3b0 <strcat+0xc>
 800f3bc:	bd10      	pop	{r4, pc}
 800f3be:	4623      	mov	r3, r4
 800f3c0:	e7f2      	b.n	800f3a8 <strcat+0x4>
	...

0800f3c4 <__swbuf_r>:
 800f3c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3c6:	460e      	mov	r6, r1
 800f3c8:	4614      	mov	r4, r2
 800f3ca:	4605      	mov	r5, r0
 800f3cc:	b118      	cbz	r0, 800f3d6 <__swbuf_r+0x12>
 800f3ce:	6983      	ldr	r3, [r0, #24]
 800f3d0:	b90b      	cbnz	r3, 800f3d6 <__swbuf_r+0x12>
 800f3d2:	f000 ffed 	bl	80103b0 <__sinit>
 800f3d6:	4b21      	ldr	r3, [pc, #132]	; (800f45c <__swbuf_r+0x98>)
 800f3d8:	429c      	cmp	r4, r3
 800f3da:	d12a      	bne.n	800f432 <__swbuf_r+0x6e>
 800f3dc:	686c      	ldr	r4, [r5, #4]
 800f3de:	69a3      	ldr	r3, [r4, #24]
 800f3e0:	60a3      	str	r3, [r4, #8]
 800f3e2:	89a3      	ldrh	r3, [r4, #12]
 800f3e4:	071a      	lsls	r2, r3, #28
 800f3e6:	d52e      	bpl.n	800f446 <__swbuf_r+0x82>
 800f3e8:	6923      	ldr	r3, [r4, #16]
 800f3ea:	b363      	cbz	r3, 800f446 <__swbuf_r+0x82>
 800f3ec:	6923      	ldr	r3, [r4, #16]
 800f3ee:	6820      	ldr	r0, [r4, #0]
 800f3f0:	1ac0      	subs	r0, r0, r3
 800f3f2:	6963      	ldr	r3, [r4, #20]
 800f3f4:	b2f6      	uxtb	r6, r6
 800f3f6:	4283      	cmp	r3, r0
 800f3f8:	4637      	mov	r7, r6
 800f3fa:	dc04      	bgt.n	800f406 <__swbuf_r+0x42>
 800f3fc:	4621      	mov	r1, r4
 800f3fe:	4628      	mov	r0, r5
 800f400:	f000 ff6c 	bl	80102dc <_fflush_r>
 800f404:	bb28      	cbnz	r0, 800f452 <__swbuf_r+0x8e>
 800f406:	68a3      	ldr	r3, [r4, #8]
 800f408:	3b01      	subs	r3, #1
 800f40a:	60a3      	str	r3, [r4, #8]
 800f40c:	6823      	ldr	r3, [r4, #0]
 800f40e:	1c5a      	adds	r2, r3, #1
 800f410:	6022      	str	r2, [r4, #0]
 800f412:	701e      	strb	r6, [r3, #0]
 800f414:	6963      	ldr	r3, [r4, #20]
 800f416:	3001      	adds	r0, #1
 800f418:	4283      	cmp	r3, r0
 800f41a:	d004      	beq.n	800f426 <__swbuf_r+0x62>
 800f41c:	89a3      	ldrh	r3, [r4, #12]
 800f41e:	07db      	lsls	r3, r3, #31
 800f420:	d519      	bpl.n	800f456 <__swbuf_r+0x92>
 800f422:	2e0a      	cmp	r6, #10
 800f424:	d117      	bne.n	800f456 <__swbuf_r+0x92>
 800f426:	4621      	mov	r1, r4
 800f428:	4628      	mov	r0, r5
 800f42a:	f000 ff57 	bl	80102dc <_fflush_r>
 800f42e:	b190      	cbz	r0, 800f456 <__swbuf_r+0x92>
 800f430:	e00f      	b.n	800f452 <__swbuf_r+0x8e>
 800f432:	4b0b      	ldr	r3, [pc, #44]	; (800f460 <__swbuf_r+0x9c>)
 800f434:	429c      	cmp	r4, r3
 800f436:	d101      	bne.n	800f43c <__swbuf_r+0x78>
 800f438:	68ac      	ldr	r4, [r5, #8]
 800f43a:	e7d0      	b.n	800f3de <__swbuf_r+0x1a>
 800f43c:	4b09      	ldr	r3, [pc, #36]	; (800f464 <__swbuf_r+0xa0>)
 800f43e:	429c      	cmp	r4, r3
 800f440:	bf08      	it	eq
 800f442:	68ec      	ldreq	r4, [r5, #12]
 800f444:	e7cb      	b.n	800f3de <__swbuf_r+0x1a>
 800f446:	4621      	mov	r1, r4
 800f448:	4628      	mov	r0, r5
 800f44a:	f000 f80d 	bl	800f468 <__swsetup_r>
 800f44e:	2800      	cmp	r0, #0
 800f450:	d0cc      	beq.n	800f3ec <__swbuf_r+0x28>
 800f452:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800f456:	4638      	mov	r0, r7
 800f458:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f45a:	bf00      	nop
 800f45c:	080139d4 	.word	0x080139d4
 800f460:	080139f4 	.word	0x080139f4
 800f464:	080139b4 	.word	0x080139b4

0800f468 <__swsetup_r>:
 800f468:	4b32      	ldr	r3, [pc, #200]	; (800f534 <__swsetup_r+0xcc>)
 800f46a:	b570      	push	{r4, r5, r6, lr}
 800f46c:	681d      	ldr	r5, [r3, #0]
 800f46e:	4606      	mov	r6, r0
 800f470:	460c      	mov	r4, r1
 800f472:	b125      	cbz	r5, 800f47e <__swsetup_r+0x16>
 800f474:	69ab      	ldr	r3, [r5, #24]
 800f476:	b913      	cbnz	r3, 800f47e <__swsetup_r+0x16>
 800f478:	4628      	mov	r0, r5
 800f47a:	f000 ff99 	bl	80103b0 <__sinit>
 800f47e:	4b2e      	ldr	r3, [pc, #184]	; (800f538 <__swsetup_r+0xd0>)
 800f480:	429c      	cmp	r4, r3
 800f482:	d10f      	bne.n	800f4a4 <__swsetup_r+0x3c>
 800f484:	686c      	ldr	r4, [r5, #4]
 800f486:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f48a:	b29a      	uxth	r2, r3
 800f48c:	0715      	lsls	r5, r2, #28
 800f48e:	d42c      	bmi.n	800f4ea <__swsetup_r+0x82>
 800f490:	06d0      	lsls	r0, r2, #27
 800f492:	d411      	bmi.n	800f4b8 <__swsetup_r+0x50>
 800f494:	2209      	movs	r2, #9
 800f496:	6032      	str	r2, [r6, #0]
 800f498:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f49c:	81a3      	strh	r3, [r4, #12]
 800f49e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f4a2:	e03e      	b.n	800f522 <__swsetup_r+0xba>
 800f4a4:	4b25      	ldr	r3, [pc, #148]	; (800f53c <__swsetup_r+0xd4>)
 800f4a6:	429c      	cmp	r4, r3
 800f4a8:	d101      	bne.n	800f4ae <__swsetup_r+0x46>
 800f4aa:	68ac      	ldr	r4, [r5, #8]
 800f4ac:	e7eb      	b.n	800f486 <__swsetup_r+0x1e>
 800f4ae:	4b24      	ldr	r3, [pc, #144]	; (800f540 <__swsetup_r+0xd8>)
 800f4b0:	429c      	cmp	r4, r3
 800f4b2:	bf08      	it	eq
 800f4b4:	68ec      	ldreq	r4, [r5, #12]
 800f4b6:	e7e6      	b.n	800f486 <__swsetup_r+0x1e>
 800f4b8:	0751      	lsls	r1, r2, #29
 800f4ba:	d512      	bpl.n	800f4e2 <__swsetup_r+0x7a>
 800f4bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f4be:	b141      	cbz	r1, 800f4d2 <__swsetup_r+0x6a>
 800f4c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f4c4:	4299      	cmp	r1, r3
 800f4c6:	d002      	beq.n	800f4ce <__swsetup_r+0x66>
 800f4c8:	4630      	mov	r0, r6
 800f4ca:	f001 fb69 	bl	8010ba0 <_free_r>
 800f4ce:	2300      	movs	r3, #0
 800f4d0:	6363      	str	r3, [r4, #52]	; 0x34
 800f4d2:	89a3      	ldrh	r3, [r4, #12]
 800f4d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f4d8:	81a3      	strh	r3, [r4, #12]
 800f4da:	2300      	movs	r3, #0
 800f4dc:	6063      	str	r3, [r4, #4]
 800f4de:	6923      	ldr	r3, [r4, #16]
 800f4e0:	6023      	str	r3, [r4, #0]
 800f4e2:	89a3      	ldrh	r3, [r4, #12]
 800f4e4:	f043 0308 	orr.w	r3, r3, #8
 800f4e8:	81a3      	strh	r3, [r4, #12]
 800f4ea:	6923      	ldr	r3, [r4, #16]
 800f4ec:	b94b      	cbnz	r3, 800f502 <__swsetup_r+0x9a>
 800f4ee:	89a3      	ldrh	r3, [r4, #12]
 800f4f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f4f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f4f8:	d003      	beq.n	800f502 <__swsetup_r+0x9a>
 800f4fa:	4621      	mov	r1, r4
 800f4fc:	4630      	mov	r0, r6
 800f4fe:	f001 f813 	bl	8010528 <__smakebuf_r>
 800f502:	89a2      	ldrh	r2, [r4, #12]
 800f504:	f012 0301 	ands.w	r3, r2, #1
 800f508:	d00c      	beq.n	800f524 <__swsetup_r+0xbc>
 800f50a:	2300      	movs	r3, #0
 800f50c:	60a3      	str	r3, [r4, #8]
 800f50e:	6963      	ldr	r3, [r4, #20]
 800f510:	425b      	negs	r3, r3
 800f512:	61a3      	str	r3, [r4, #24]
 800f514:	6923      	ldr	r3, [r4, #16]
 800f516:	b953      	cbnz	r3, 800f52e <__swsetup_r+0xc6>
 800f518:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f51c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800f520:	d1ba      	bne.n	800f498 <__swsetup_r+0x30>
 800f522:	bd70      	pop	{r4, r5, r6, pc}
 800f524:	0792      	lsls	r2, r2, #30
 800f526:	bf58      	it	pl
 800f528:	6963      	ldrpl	r3, [r4, #20]
 800f52a:	60a3      	str	r3, [r4, #8]
 800f52c:	e7f2      	b.n	800f514 <__swsetup_r+0xac>
 800f52e:	2000      	movs	r0, #0
 800f530:	e7f7      	b.n	800f522 <__swsetup_r+0xba>
 800f532:	bf00      	nop
 800f534:	20001ca4 	.word	0x20001ca4
 800f538:	080139d4 	.word	0x080139d4
 800f53c:	080139f4 	.word	0x080139f4
 800f540:	080139b4 	.word	0x080139b4

0800f544 <quorem>:
 800f544:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f548:	6903      	ldr	r3, [r0, #16]
 800f54a:	690c      	ldr	r4, [r1, #16]
 800f54c:	42a3      	cmp	r3, r4
 800f54e:	4680      	mov	r8, r0
 800f550:	f2c0 8082 	blt.w	800f658 <quorem+0x114>
 800f554:	3c01      	subs	r4, #1
 800f556:	f101 0714 	add.w	r7, r1, #20
 800f55a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800f55e:	f100 0614 	add.w	r6, r0, #20
 800f562:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800f566:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800f56a:	eb06 030c 	add.w	r3, r6, ip
 800f56e:	3501      	adds	r5, #1
 800f570:	eb07 090c 	add.w	r9, r7, ip
 800f574:	9301      	str	r3, [sp, #4]
 800f576:	fbb0 f5f5 	udiv	r5, r0, r5
 800f57a:	b395      	cbz	r5, 800f5e2 <quorem+0x9e>
 800f57c:	f04f 0a00 	mov.w	sl, #0
 800f580:	4638      	mov	r0, r7
 800f582:	46b6      	mov	lr, r6
 800f584:	46d3      	mov	fp, sl
 800f586:	f850 2b04 	ldr.w	r2, [r0], #4
 800f58a:	b293      	uxth	r3, r2
 800f58c:	fb05 a303 	mla	r3, r5, r3, sl
 800f590:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f594:	b29b      	uxth	r3, r3
 800f596:	ebab 0303 	sub.w	r3, fp, r3
 800f59a:	0c12      	lsrs	r2, r2, #16
 800f59c:	f8de b000 	ldr.w	fp, [lr]
 800f5a0:	fb05 a202 	mla	r2, r5, r2, sl
 800f5a4:	fa13 f38b 	uxtah	r3, r3, fp
 800f5a8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800f5ac:	fa1f fb82 	uxth.w	fp, r2
 800f5b0:	f8de 2000 	ldr.w	r2, [lr]
 800f5b4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800f5b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f5bc:	b29b      	uxth	r3, r3
 800f5be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f5c2:	4581      	cmp	r9, r0
 800f5c4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800f5c8:	f84e 3b04 	str.w	r3, [lr], #4
 800f5cc:	d2db      	bcs.n	800f586 <quorem+0x42>
 800f5ce:	f856 300c 	ldr.w	r3, [r6, ip]
 800f5d2:	b933      	cbnz	r3, 800f5e2 <quorem+0x9e>
 800f5d4:	9b01      	ldr	r3, [sp, #4]
 800f5d6:	3b04      	subs	r3, #4
 800f5d8:	429e      	cmp	r6, r3
 800f5da:	461a      	mov	r2, r3
 800f5dc:	d330      	bcc.n	800f640 <quorem+0xfc>
 800f5de:	f8c8 4010 	str.w	r4, [r8, #16]
 800f5e2:	4640      	mov	r0, r8
 800f5e4:	f001 fa08 	bl	80109f8 <__mcmp>
 800f5e8:	2800      	cmp	r0, #0
 800f5ea:	db25      	blt.n	800f638 <quorem+0xf4>
 800f5ec:	3501      	adds	r5, #1
 800f5ee:	4630      	mov	r0, r6
 800f5f0:	f04f 0c00 	mov.w	ip, #0
 800f5f4:	f857 2b04 	ldr.w	r2, [r7], #4
 800f5f8:	f8d0 e000 	ldr.w	lr, [r0]
 800f5fc:	b293      	uxth	r3, r2
 800f5fe:	ebac 0303 	sub.w	r3, ip, r3
 800f602:	0c12      	lsrs	r2, r2, #16
 800f604:	fa13 f38e 	uxtah	r3, r3, lr
 800f608:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f60c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f610:	b29b      	uxth	r3, r3
 800f612:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f616:	45b9      	cmp	r9, r7
 800f618:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f61c:	f840 3b04 	str.w	r3, [r0], #4
 800f620:	d2e8      	bcs.n	800f5f4 <quorem+0xb0>
 800f622:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800f626:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800f62a:	b92a      	cbnz	r2, 800f638 <quorem+0xf4>
 800f62c:	3b04      	subs	r3, #4
 800f62e:	429e      	cmp	r6, r3
 800f630:	461a      	mov	r2, r3
 800f632:	d30b      	bcc.n	800f64c <quorem+0x108>
 800f634:	f8c8 4010 	str.w	r4, [r8, #16]
 800f638:	4628      	mov	r0, r5
 800f63a:	b003      	add	sp, #12
 800f63c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f640:	6812      	ldr	r2, [r2, #0]
 800f642:	3b04      	subs	r3, #4
 800f644:	2a00      	cmp	r2, #0
 800f646:	d1ca      	bne.n	800f5de <quorem+0x9a>
 800f648:	3c01      	subs	r4, #1
 800f64a:	e7c5      	b.n	800f5d8 <quorem+0x94>
 800f64c:	6812      	ldr	r2, [r2, #0]
 800f64e:	3b04      	subs	r3, #4
 800f650:	2a00      	cmp	r2, #0
 800f652:	d1ef      	bne.n	800f634 <quorem+0xf0>
 800f654:	3c01      	subs	r4, #1
 800f656:	e7ea      	b.n	800f62e <quorem+0xea>
 800f658:	2000      	movs	r0, #0
 800f65a:	e7ee      	b.n	800f63a <quorem+0xf6>
 800f65c:	0000      	movs	r0, r0
	...

0800f660 <_dtoa_r>:
 800f660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f664:	ec57 6b10 	vmov	r6, r7, d0
 800f668:	b097      	sub	sp, #92	; 0x5c
 800f66a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f66c:	9106      	str	r1, [sp, #24]
 800f66e:	4604      	mov	r4, r0
 800f670:	920b      	str	r2, [sp, #44]	; 0x2c
 800f672:	9312      	str	r3, [sp, #72]	; 0x48
 800f674:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f678:	e9cd 6700 	strd	r6, r7, [sp]
 800f67c:	b93d      	cbnz	r5, 800f68e <_dtoa_r+0x2e>
 800f67e:	2010      	movs	r0, #16
 800f680:	f000 ff92 	bl	80105a8 <malloc>
 800f684:	6260      	str	r0, [r4, #36]	; 0x24
 800f686:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f68a:	6005      	str	r5, [r0, #0]
 800f68c:	60c5      	str	r5, [r0, #12]
 800f68e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f690:	6819      	ldr	r1, [r3, #0]
 800f692:	b151      	cbz	r1, 800f6aa <_dtoa_r+0x4a>
 800f694:	685a      	ldr	r2, [r3, #4]
 800f696:	604a      	str	r2, [r1, #4]
 800f698:	2301      	movs	r3, #1
 800f69a:	4093      	lsls	r3, r2
 800f69c:	608b      	str	r3, [r1, #8]
 800f69e:	4620      	mov	r0, r4
 800f6a0:	f000 ffc9 	bl	8010636 <_Bfree>
 800f6a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f6a6:	2200      	movs	r2, #0
 800f6a8:	601a      	str	r2, [r3, #0]
 800f6aa:	1e3b      	subs	r3, r7, #0
 800f6ac:	bfbb      	ittet	lt
 800f6ae:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f6b2:	9301      	strlt	r3, [sp, #4]
 800f6b4:	2300      	movge	r3, #0
 800f6b6:	2201      	movlt	r2, #1
 800f6b8:	bfac      	ite	ge
 800f6ba:	f8c8 3000 	strge.w	r3, [r8]
 800f6be:	f8c8 2000 	strlt.w	r2, [r8]
 800f6c2:	4baf      	ldr	r3, [pc, #700]	; (800f980 <_dtoa_r+0x320>)
 800f6c4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800f6c8:	ea33 0308 	bics.w	r3, r3, r8
 800f6cc:	d114      	bne.n	800f6f8 <_dtoa_r+0x98>
 800f6ce:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f6d0:	f242 730f 	movw	r3, #9999	; 0x270f
 800f6d4:	6013      	str	r3, [r2, #0]
 800f6d6:	9b00      	ldr	r3, [sp, #0]
 800f6d8:	b923      	cbnz	r3, 800f6e4 <_dtoa_r+0x84>
 800f6da:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800f6de:	2800      	cmp	r0, #0
 800f6e0:	f000 8542 	beq.w	8010168 <_dtoa_r+0xb08>
 800f6e4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f6e6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800f994 <_dtoa_r+0x334>
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	f000 8544 	beq.w	8010178 <_dtoa_r+0xb18>
 800f6f0:	f10b 0303 	add.w	r3, fp, #3
 800f6f4:	f000 bd3e 	b.w	8010174 <_dtoa_r+0xb14>
 800f6f8:	e9dd 6700 	ldrd	r6, r7, [sp]
 800f6fc:	2200      	movs	r2, #0
 800f6fe:	2300      	movs	r3, #0
 800f700:	4630      	mov	r0, r6
 800f702:	4639      	mov	r1, r7
 800f704:	f7f1 fa08 	bl	8000b18 <__aeabi_dcmpeq>
 800f708:	4681      	mov	r9, r0
 800f70a:	b168      	cbz	r0, 800f728 <_dtoa_r+0xc8>
 800f70c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f70e:	2301      	movs	r3, #1
 800f710:	6013      	str	r3, [r2, #0]
 800f712:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f714:	2b00      	cmp	r3, #0
 800f716:	f000 8524 	beq.w	8010162 <_dtoa_r+0xb02>
 800f71a:	4b9a      	ldr	r3, [pc, #616]	; (800f984 <_dtoa_r+0x324>)
 800f71c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f71e:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 800f722:	6013      	str	r3, [r2, #0]
 800f724:	f000 bd28 	b.w	8010178 <_dtoa_r+0xb18>
 800f728:	aa14      	add	r2, sp, #80	; 0x50
 800f72a:	a915      	add	r1, sp, #84	; 0x54
 800f72c:	ec47 6b10 	vmov	d0, r6, r7
 800f730:	4620      	mov	r0, r4
 800f732:	f001 f9d8 	bl	8010ae6 <__d2b>
 800f736:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800f73a:	9004      	str	r0, [sp, #16]
 800f73c:	2d00      	cmp	r5, #0
 800f73e:	d07c      	beq.n	800f83a <_dtoa_r+0x1da>
 800f740:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f744:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800f748:	46b2      	mov	sl, r6
 800f74a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800f74e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f752:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800f756:	2200      	movs	r2, #0
 800f758:	4b8b      	ldr	r3, [pc, #556]	; (800f988 <_dtoa_r+0x328>)
 800f75a:	4650      	mov	r0, sl
 800f75c:	4659      	mov	r1, fp
 800f75e:	f7f0 fdbb 	bl	80002d8 <__aeabi_dsub>
 800f762:	a381      	add	r3, pc, #516	; (adr r3, 800f968 <_dtoa_r+0x308>)
 800f764:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f768:	f7f0 ff6e 	bl	8000648 <__aeabi_dmul>
 800f76c:	a380      	add	r3, pc, #512	; (adr r3, 800f970 <_dtoa_r+0x310>)
 800f76e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f772:	f7f0 fdb3 	bl	80002dc <__adddf3>
 800f776:	4606      	mov	r6, r0
 800f778:	4628      	mov	r0, r5
 800f77a:	460f      	mov	r7, r1
 800f77c:	f7f0 fefa 	bl	8000574 <__aeabi_i2d>
 800f780:	a37d      	add	r3, pc, #500	; (adr r3, 800f978 <_dtoa_r+0x318>)
 800f782:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f786:	f7f0 ff5f 	bl	8000648 <__aeabi_dmul>
 800f78a:	4602      	mov	r2, r0
 800f78c:	460b      	mov	r3, r1
 800f78e:	4630      	mov	r0, r6
 800f790:	4639      	mov	r1, r7
 800f792:	f7f0 fda3 	bl	80002dc <__adddf3>
 800f796:	4606      	mov	r6, r0
 800f798:	460f      	mov	r7, r1
 800f79a:	f7f1 fa05 	bl	8000ba8 <__aeabi_d2iz>
 800f79e:	2200      	movs	r2, #0
 800f7a0:	4682      	mov	sl, r0
 800f7a2:	2300      	movs	r3, #0
 800f7a4:	4630      	mov	r0, r6
 800f7a6:	4639      	mov	r1, r7
 800f7a8:	f7f1 f9c0 	bl	8000b2c <__aeabi_dcmplt>
 800f7ac:	b148      	cbz	r0, 800f7c2 <_dtoa_r+0x162>
 800f7ae:	4650      	mov	r0, sl
 800f7b0:	f7f0 fee0 	bl	8000574 <__aeabi_i2d>
 800f7b4:	4632      	mov	r2, r6
 800f7b6:	463b      	mov	r3, r7
 800f7b8:	f7f1 f9ae 	bl	8000b18 <__aeabi_dcmpeq>
 800f7bc:	b908      	cbnz	r0, 800f7c2 <_dtoa_r+0x162>
 800f7be:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800f7c2:	f1ba 0f16 	cmp.w	sl, #22
 800f7c6:	d859      	bhi.n	800f87c <_dtoa_r+0x21c>
 800f7c8:	4970      	ldr	r1, [pc, #448]	; (800f98c <_dtoa_r+0x32c>)
 800f7ca:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800f7ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f7d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f7d6:	f7f1 f9c7 	bl	8000b68 <__aeabi_dcmpgt>
 800f7da:	2800      	cmp	r0, #0
 800f7dc:	d050      	beq.n	800f880 <_dtoa_r+0x220>
 800f7de:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800f7e2:	2300      	movs	r3, #0
 800f7e4:	930f      	str	r3, [sp, #60]	; 0x3c
 800f7e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f7e8:	1b5d      	subs	r5, r3, r5
 800f7ea:	f1b5 0801 	subs.w	r8, r5, #1
 800f7ee:	bf49      	itett	mi
 800f7f0:	f1c5 0301 	rsbmi	r3, r5, #1
 800f7f4:	2300      	movpl	r3, #0
 800f7f6:	9305      	strmi	r3, [sp, #20]
 800f7f8:	f04f 0800 	movmi.w	r8, #0
 800f7fc:	bf58      	it	pl
 800f7fe:	9305      	strpl	r3, [sp, #20]
 800f800:	f1ba 0f00 	cmp.w	sl, #0
 800f804:	db3e      	blt.n	800f884 <_dtoa_r+0x224>
 800f806:	2300      	movs	r3, #0
 800f808:	44d0      	add	r8, sl
 800f80a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800f80e:	9307      	str	r3, [sp, #28]
 800f810:	9b06      	ldr	r3, [sp, #24]
 800f812:	2b09      	cmp	r3, #9
 800f814:	f200 8090 	bhi.w	800f938 <_dtoa_r+0x2d8>
 800f818:	2b05      	cmp	r3, #5
 800f81a:	bfc4      	itt	gt
 800f81c:	3b04      	subgt	r3, #4
 800f81e:	9306      	strgt	r3, [sp, #24]
 800f820:	9b06      	ldr	r3, [sp, #24]
 800f822:	f1a3 0302 	sub.w	r3, r3, #2
 800f826:	bfcc      	ite	gt
 800f828:	2500      	movgt	r5, #0
 800f82a:	2501      	movle	r5, #1
 800f82c:	2b03      	cmp	r3, #3
 800f82e:	f200 808f 	bhi.w	800f950 <_dtoa_r+0x2f0>
 800f832:	e8df f003 	tbb	[pc, r3]
 800f836:	7f7d      	.short	0x7f7d
 800f838:	7131      	.short	0x7131
 800f83a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800f83e:	441d      	add	r5, r3
 800f840:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800f844:	2820      	cmp	r0, #32
 800f846:	dd13      	ble.n	800f870 <_dtoa_r+0x210>
 800f848:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800f84c:	9b00      	ldr	r3, [sp, #0]
 800f84e:	fa08 f800 	lsl.w	r8, r8, r0
 800f852:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800f856:	fa23 f000 	lsr.w	r0, r3, r0
 800f85a:	ea48 0000 	orr.w	r0, r8, r0
 800f85e:	f7f0 fe79 	bl	8000554 <__aeabi_ui2d>
 800f862:	2301      	movs	r3, #1
 800f864:	4682      	mov	sl, r0
 800f866:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800f86a:	3d01      	subs	r5, #1
 800f86c:	9313      	str	r3, [sp, #76]	; 0x4c
 800f86e:	e772      	b.n	800f756 <_dtoa_r+0xf6>
 800f870:	9b00      	ldr	r3, [sp, #0]
 800f872:	f1c0 0020 	rsb	r0, r0, #32
 800f876:	fa03 f000 	lsl.w	r0, r3, r0
 800f87a:	e7f0      	b.n	800f85e <_dtoa_r+0x1fe>
 800f87c:	2301      	movs	r3, #1
 800f87e:	e7b1      	b.n	800f7e4 <_dtoa_r+0x184>
 800f880:	900f      	str	r0, [sp, #60]	; 0x3c
 800f882:	e7b0      	b.n	800f7e6 <_dtoa_r+0x186>
 800f884:	9b05      	ldr	r3, [sp, #20]
 800f886:	eba3 030a 	sub.w	r3, r3, sl
 800f88a:	9305      	str	r3, [sp, #20]
 800f88c:	f1ca 0300 	rsb	r3, sl, #0
 800f890:	9307      	str	r3, [sp, #28]
 800f892:	2300      	movs	r3, #0
 800f894:	930e      	str	r3, [sp, #56]	; 0x38
 800f896:	e7bb      	b.n	800f810 <_dtoa_r+0x1b0>
 800f898:	2301      	movs	r3, #1
 800f89a:	930a      	str	r3, [sp, #40]	; 0x28
 800f89c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	dd59      	ble.n	800f956 <_dtoa_r+0x2f6>
 800f8a2:	9302      	str	r3, [sp, #8]
 800f8a4:	4699      	mov	r9, r3
 800f8a6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f8a8:	2200      	movs	r2, #0
 800f8aa:	6072      	str	r2, [r6, #4]
 800f8ac:	2204      	movs	r2, #4
 800f8ae:	f102 0014 	add.w	r0, r2, #20
 800f8b2:	4298      	cmp	r0, r3
 800f8b4:	6871      	ldr	r1, [r6, #4]
 800f8b6:	d953      	bls.n	800f960 <_dtoa_r+0x300>
 800f8b8:	4620      	mov	r0, r4
 800f8ba:	f000 fe88 	bl	80105ce <_Balloc>
 800f8be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f8c0:	6030      	str	r0, [r6, #0]
 800f8c2:	f1b9 0f0e 	cmp.w	r9, #14
 800f8c6:	f8d3 b000 	ldr.w	fp, [r3]
 800f8ca:	f200 80e6 	bhi.w	800fa9a <_dtoa_r+0x43a>
 800f8ce:	2d00      	cmp	r5, #0
 800f8d0:	f000 80e3 	beq.w	800fa9a <_dtoa_r+0x43a>
 800f8d4:	ed9d 7b00 	vldr	d7, [sp]
 800f8d8:	f1ba 0f00 	cmp.w	sl, #0
 800f8dc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800f8e0:	dd74      	ble.n	800f9cc <_dtoa_r+0x36c>
 800f8e2:	4a2a      	ldr	r2, [pc, #168]	; (800f98c <_dtoa_r+0x32c>)
 800f8e4:	f00a 030f 	and.w	r3, sl, #15
 800f8e8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f8ec:	ed93 7b00 	vldr	d7, [r3]
 800f8f0:	ea4f 162a 	mov.w	r6, sl, asr #4
 800f8f4:	06f0      	lsls	r0, r6, #27
 800f8f6:	ed8d 7b08 	vstr	d7, [sp, #32]
 800f8fa:	d565      	bpl.n	800f9c8 <_dtoa_r+0x368>
 800f8fc:	4b24      	ldr	r3, [pc, #144]	; (800f990 <_dtoa_r+0x330>)
 800f8fe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800f902:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f906:	f7f0 ffc9 	bl	800089c <__aeabi_ddiv>
 800f90a:	e9cd 0100 	strd	r0, r1, [sp]
 800f90e:	f006 060f 	and.w	r6, r6, #15
 800f912:	2503      	movs	r5, #3
 800f914:	4f1e      	ldr	r7, [pc, #120]	; (800f990 <_dtoa_r+0x330>)
 800f916:	e04c      	b.n	800f9b2 <_dtoa_r+0x352>
 800f918:	2301      	movs	r3, #1
 800f91a:	930a      	str	r3, [sp, #40]	; 0x28
 800f91c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f91e:	4453      	add	r3, sl
 800f920:	f103 0901 	add.w	r9, r3, #1
 800f924:	9302      	str	r3, [sp, #8]
 800f926:	464b      	mov	r3, r9
 800f928:	2b01      	cmp	r3, #1
 800f92a:	bfb8      	it	lt
 800f92c:	2301      	movlt	r3, #1
 800f92e:	e7ba      	b.n	800f8a6 <_dtoa_r+0x246>
 800f930:	2300      	movs	r3, #0
 800f932:	e7b2      	b.n	800f89a <_dtoa_r+0x23a>
 800f934:	2300      	movs	r3, #0
 800f936:	e7f0      	b.n	800f91a <_dtoa_r+0x2ba>
 800f938:	2501      	movs	r5, #1
 800f93a:	2300      	movs	r3, #0
 800f93c:	9306      	str	r3, [sp, #24]
 800f93e:	950a      	str	r5, [sp, #40]	; 0x28
 800f940:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f944:	9302      	str	r3, [sp, #8]
 800f946:	4699      	mov	r9, r3
 800f948:	2200      	movs	r2, #0
 800f94a:	2312      	movs	r3, #18
 800f94c:	920b      	str	r2, [sp, #44]	; 0x2c
 800f94e:	e7aa      	b.n	800f8a6 <_dtoa_r+0x246>
 800f950:	2301      	movs	r3, #1
 800f952:	930a      	str	r3, [sp, #40]	; 0x28
 800f954:	e7f4      	b.n	800f940 <_dtoa_r+0x2e0>
 800f956:	2301      	movs	r3, #1
 800f958:	9302      	str	r3, [sp, #8]
 800f95a:	4699      	mov	r9, r3
 800f95c:	461a      	mov	r2, r3
 800f95e:	e7f5      	b.n	800f94c <_dtoa_r+0x2ec>
 800f960:	3101      	adds	r1, #1
 800f962:	6071      	str	r1, [r6, #4]
 800f964:	0052      	lsls	r2, r2, #1
 800f966:	e7a2      	b.n	800f8ae <_dtoa_r+0x24e>
 800f968:	636f4361 	.word	0x636f4361
 800f96c:	3fd287a7 	.word	0x3fd287a7
 800f970:	8b60c8b3 	.word	0x8b60c8b3
 800f974:	3fc68a28 	.word	0x3fc68a28
 800f978:	509f79fb 	.word	0x509f79fb
 800f97c:	3fd34413 	.word	0x3fd34413
 800f980:	7ff00000 	.word	0x7ff00000
 800f984:	08013c35 	.word	0x08013c35
 800f988:	3ff80000 	.word	0x3ff80000
 800f98c:	08013a40 	.word	0x08013a40
 800f990:	08013a18 	.word	0x08013a18
 800f994:	080139af 	.word	0x080139af
 800f998:	07f1      	lsls	r1, r6, #31
 800f99a:	d508      	bpl.n	800f9ae <_dtoa_r+0x34e>
 800f99c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f9a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f9a4:	f7f0 fe50 	bl	8000648 <__aeabi_dmul>
 800f9a8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f9ac:	3501      	adds	r5, #1
 800f9ae:	1076      	asrs	r6, r6, #1
 800f9b0:	3708      	adds	r7, #8
 800f9b2:	2e00      	cmp	r6, #0
 800f9b4:	d1f0      	bne.n	800f998 <_dtoa_r+0x338>
 800f9b6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f9ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f9be:	f7f0 ff6d 	bl	800089c <__aeabi_ddiv>
 800f9c2:	e9cd 0100 	strd	r0, r1, [sp]
 800f9c6:	e01a      	b.n	800f9fe <_dtoa_r+0x39e>
 800f9c8:	2502      	movs	r5, #2
 800f9ca:	e7a3      	b.n	800f914 <_dtoa_r+0x2b4>
 800f9cc:	f000 80a0 	beq.w	800fb10 <_dtoa_r+0x4b0>
 800f9d0:	f1ca 0600 	rsb	r6, sl, #0
 800f9d4:	4b9f      	ldr	r3, [pc, #636]	; (800fc54 <_dtoa_r+0x5f4>)
 800f9d6:	4fa0      	ldr	r7, [pc, #640]	; (800fc58 <_dtoa_r+0x5f8>)
 800f9d8:	f006 020f 	and.w	r2, r6, #15
 800f9dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f9e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9e4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800f9e8:	f7f0 fe2e 	bl	8000648 <__aeabi_dmul>
 800f9ec:	e9cd 0100 	strd	r0, r1, [sp]
 800f9f0:	1136      	asrs	r6, r6, #4
 800f9f2:	2300      	movs	r3, #0
 800f9f4:	2502      	movs	r5, #2
 800f9f6:	2e00      	cmp	r6, #0
 800f9f8:	d17f      	bne.n	800fafa <_dtoa_r+0x49a>
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d1e1      	bne.n	800f9c2 <_dtoa_r+0x362>
 800f9fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	f000 8087 	beq.w	800fb14 <_dtoa_r+0x4b4>
 800fa06:	e9dd 6700 	ldrd	r6, r7, [sp]
 800fa0a:	2200      	movs	r2, #0
 800fa0c:	4b93      	ldr	r3, [pc, #588]	; (800fc5c <_dtoa_r+0x5fc>)
 800fa0e:	4630      	mov	r0, r6
 800fa10:	4639      	mov	r1, r7
 800fa12:	f7f1 f88b 	bl	8000b2c <__aeabi_dcmplt>
 800fa16:	2800      	cmp	r0, #0
 800fa18:	d07c      	beq.n	800fb14 <_dtoa_r+0x4b4>
 800fa1a:	f1b9 0f00 	cmp.w	r9, #0
 800fa1e:	d079      	beq.n	800fb14 <_dtoa_r+0x4b4>
 800fa20:	9b02      	ldr	r3, [sp, #8]
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	dd35      	ble.n	800fa92 <_dtoa_r+0x432>
 800fa26:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800fa2a:	9308      	str	r3, [sp, #32]
 800fa2c:	4639      	mov	r1, r7
 800fa2e:	2200      	movs	r2, #0
 800fa30:	4b8b      	ldr	r3, [pc, #556]	; (800fc60 <_dtoa_r+0x600>)
 800fa32:	4630      	mov	r0, r6
 800fa34:	f7f0 fe08 	bl	8000648 <__aeabi_dmul>
 800fa38:	e9cd 0100 	strd	r0, r1, [sp]
 800fa3c:	9f02      	ldr	r7, [sp, #8]
 800fa3e:	3501      	adds	r5, #1
 800fa40:	4628      	mov	r0, r5
 800fa42:	f7f0 fd97 	bl	8000574 <__aeabi_i2d>
 800fa46:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fa4a:	f7f0 fdfd 	bl	8000648 <__aeabi_dmul>
 800fa4e:	2200      	movs	r2, #0
 800fa50:	4b84      	ldr	r3, [pc, #528]	; (800fc64 <_dtoa_r+0x604>)
 800fa52:	f7f0 fc43 	bl	80002dc <__adddf3>
 800fa56:	4605      	mov	r5, r0
 800fa58:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800fa5c:	2f00      	cmp	r7, #0
 800fa5e:	d15d      	bne.n	800fb1c <_dtoa_r+0x4bc>
 800fa60:	2200      	movs	r2, #0
 800fa62:	4b81      	ldr	r3, [pc, #516]	; (800fc68 <_dtoa_r+0x608>)
 800fa64:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fa68:	f7f0 fc36 	bl	80002d8 <__aeabi_dsub>
 800fa6c:	462a      	mov	r2, r5
 800fa6e:	4633      	mov	r3, r6
 800fa70:	e9cd 0100 	strd	r0, r1, [sp]
 800fa74:	f7f1 f878 	bl	8000b68 <__aeabi_dcmpgt>
 800fa78:	2800      	cmp	r0, #0
 800fa7a:	f040 8288 	bne.w	800ff8e <_dtoa_r+0x92e>
 800fa7e:	462a      	mov	r2, r5
 800fa80:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800fa84:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fa88:	f7f1 f850 	bl	8000b2c <__aeabi_dcmplt>
 800fa8c:	2800      	cmp	r0, #0
 800fa8e:	f040 827c 	bne.w	800ff8a <_dtoa_r+0x92a>
 800fa92:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800fa96:	e9cd 2300 	strd	r2, r3, [sp]
 800fa9a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	f2c0 8150 	blt.w	800fd42 <_dtoa_r+0x6e2>
 800faa2:	f1ba 0f0e 	cmp.w	sl, #14
 800faa6:	f300 814c 	bgt.w	800fd42 <_dtoa_r+0x6e2>
 800faaa:	4b6a      	ldr	r3, [pc, #424]	; (800fc54 <_dtoa_r+0x5f4>)
 800faac:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800fab0:	ed93 7b00 	vldr	d7, [r3]
 800fab4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800fabc:	f280 80d8 	bge.w	800fc70 <_dtoa_r+0x610>
 800fac0:	f1b9 0f00 	cmp.w	r9, #0
 800fac4:	f300 80d4 	bgt.w	800fc70 <_dtoa_r+0x610>
 800fac8:	f040 825e 	bne.w	800ff88 <_dtoa_r+0x928>
 800facc:	2200      	movs	r2, #0
 800face:	4b66      	ldr	r3, [pc, #408]	; (800fc68 <_dtoa_r+0x608>)
 800fad0:	ec51 0b17 	vmov	r0, r1, d7
 800fad4:	f7f0 fdb8 	bl	8000648 <__aeabi_dmul>
 800fad8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fadc:	f7f1 f83a 	bl	8000b54 <__aeabi_dcmpge>
 800fae0:	464f      	mov	r7, r9
 800fae2:	464e      	mov	r6, r9
 800fae4:	2800      	cmp	r0, #0
 800fae6:	f040 8234 	bne.w	800ff52 <_dtoa_r+0x8f2>
 800faea:	2331      	movs	r3, #49	; 0x31
 800faec:	f10b 0501 	add.w	r5, fp, #1
 800faf0:	f88b 3000 	strb.w	r3, [fp]
 800faf4:	f10a 0a01 	add.w	sl, sl, #1
 800faf8:	e22f      	b.n	800ff5a <_dtoa_r+0x8fa>
 800fafa:	07f2      	lsls	r2, r6, #31
 800fafc:	d505      	bpl.n	800fb0a <_dtoa_r+0x4aa>
 800fafe:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fb02:	f7f0 fda1 	bl	8000648 <__aeabi_dmul>
 800fb06:	3501      	adds	r5, #1
 800fb08:	2301      	movs	r3, #1
 800fb0a:	1076      	asrs	r6, r6, #1
 800fb0c:	3708      	adds	r7, #8
 800fb0e:	e772      	b.n	800f9f6 <_dtoa_r+0x396>
 800fb10:	2502      	movs	r5, #2
 800fb12:	e774      	b.n	800f9fe <_dtoa_r+0x39e>
 800fb14:	f8cd a020 	str.w	sl, [sp, #32]
 800fb18:	464f      	mov	r7, r9
 800fb1a:	e791      	b.n	800fa40 <_dtoa_r+0x3e0>
 800fb1c:	4b4d      	ldr	r3, [pc, #308]	; (800fc54 <_dtoa_r+0x5f4>)
 800fb1e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800fb22:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800fb26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d047      	beq.n	800fbbc <_dtoa_r+0x55c>
 800fb2c:	4602      	mov	r2, r0
 800fb2e:	460b      	mov	r3, r1
 800fb30:	2000      	movs	r0, #0
 800fb32:	494e      	ldr	r1, [pc, #312]	; (800fc6c <_dtoa_r+0x60c>)
 800fb34:	f7f0 feb2 	bl	800089c <__aeabi_ddiv>
 800fb38:	462a      	mov	r2, r5
 800fb3a:	4633      	mov	r3, r6
 800fb3c:	f7f0 fbcc 	bl	80002d8 <__aeabi_dsub>
 800fb40:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800fb44:	465d      	mov	r5, fp
 800fb46:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fb4a:	f7f1 f82d 	bl	8000ba8 <__aeabi_d2iz>
 800fb4e:	4606      	mov	r6, r0
 800fb50:	f7f0 fd10 	bl	8000574 <__aeabi_i2d>
 800fb54:	4602      	mov	r2, r0
 800fb56:	460b      	mov	r3, r1
 800fb58:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fb5c:	f7f0 fbbc 	bl	80002d8 <__aeabi_dsub>
 800fb60:	3630      	adds	r6, #48	; 0x30
 800fb62:	f805 6b01 	strb.w	r6, [r5], #1
 800fb66:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800fb6a:	e9cd 0100 	strd	r0, r1, [sp]
 800fb6e:	f7f0 ffdd 	bl	8000b2c <__aeabi_dcmplt>
 800fb72:	2800      	cmp	r0, #0
 800fb74:	d163      	bne.n	800fc3e <_dtoa_r+0x5de>
 800fb76:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fb7a:	2000      	movs	r0, #0
 800fb7c:	4937      	ldr	r1, [pc, #220]	; (800fc5c <_dtoa_r+0x5fc>)
 800fb7e:	f7f0 fbab 	bl	80002d8 <__aeabi_dsub>
 800fb82:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800fb86:	f7f0 ffd1 	bl	8000b2c <__aeabi_dcmplt>
 800fb8a:	2800      	cmp	r0, #0
 800fb8c:	f040 80b7 	bne.w	800fcfe <_dtoa_r+0x69e>
 800fb90:	eba5 030b 	sub.w	r3, r5, fp
 800fb94:	429f      	cmp	r7, r3
 800fb96:	f77f af7c 	ble.w	800fa92 <_dtoa_r+0x432>
 800fb9a:	2200      	movs	r2, #0
 800fb9c:	4b30      	ldr	r3, [pc, #192]	; (800fc60 <_dtoa_r+0x600>)
 800fb9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800fba2:	f7f0 fd51 	bl	8000648 <__aeabi_dmul>
 800fba6:	2200      	movs	r2, #0
 800fba8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800fbac:	4b2c      	ldr	r3, [pc, #176]	; (800fc60 <_dtoa_r+0x600>)
 800fbae:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fbb2:	f7f0 fd49 	bl	8000648 <__aeabi_dmul>
 800fbb6:	e9cd 0100 	strd	r0, r1, [sp]
 800fbba:	e7c4      	b.n	800fb46 <_dtoa_r+0x4e6>
 800fbbc:	462a      	mov	r2, r5
 800fbbe:	4633      	mov	r3, r6
 800fbc0:	f7f0 fd42 	bl	8000648 <__aeabi_dmul>
 800fbc4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800fbc8:	eb0b 0507 	add.w	r5, fp, r7
 800fbcc:	465e      	mov	r6, fp
 800fbce:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fbd2:	f7f0 ffe9 	bl	8000ba8 <__aeabi_d2iz>
 800fbd6:	4607      	mov	r7, r0
 800fbd8:	f7f0 fccc 	bl	8000574 <__aeabi_i2d>
 800fbdc:	3730      	adds	r7, #48	; 0x30
 800fbde:	4602      	mov	r2, r0
 800fbe0:	460b      	mov	r3, r1
 800fbe2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fbe6:	f7f0 fb77 	bl	80002d8 <__aeabi_dsub>
 800fbea:	f806 7b01 	strb.w	r7, [r6], #1
 800fbee:	42ae      	cmp	r6, r5
 800fbf0:	e9cd 0100 	strd	r0, r1, [sp]
 800fbf4:	f04f 0200 	mov.w	r2, #0
 800fbf8:	d126      	bne.n	800fc48 <_dtoa_r+0x5e8>
 800fbfa:	4b1c      	ldr	r3, [pc, #112]	; (800fc6c <_dtoa_r+0x60c>)
 800fbfc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800fc00:	f7f0 fb6c 	bl	80002dc <__adddf3>
 800fc04:	4602      	mov	r2, r0
 800fc06:	460b      	mov	r3, r1
 800fc08:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fc0c:	f7f0 ffac 	bl	8000b68 <__aeabi_dcmpgt>
 800fc10:	2800      	cmp	r0, #0
 800fc12:	d174      	bne.n	800fcfe <_dtoa_r+0x69e>
 800fc14:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800fc18:	2000      	movs	r0, #0
 800fc1a:	4914      	ldr	r1, [pc, #80]	; (800fc6c <_dtoa_r+0x60c>)
 800fc1c:	f7f0 fb5c 	bl	80002d8 <__aeabi_dsub>
 800fc20:	4602      	mov	r2, r0
 800fc22:	460b      	mov	r3, r1
 800fc24:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fc28:	f7f0 ff80 	bl	8000b2c <__aeabi_dcmplt>
 800fc2c:	2800      	cmp	r0, #0
 800fc2e:	f43f af30 	beq.w	800fa92 <_dtoa_r+0x432>
 800fc32:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800fc36:	2b30      	cmp	r3, #48	; 0x30
 800fc38:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800fc3c:	d002      	beq.n	800fc44 <_dtoa_r+0x5e4>
 800fc3e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800fc42:	e04a      	b.n	800fcda <_dtoa_r+0x67a>
 800fc44:	4615      	mov	r5, r2
 800fc46:	e7f4      	b.n	800fc32 <_dtoa_r+0x5d2>
 800fc48:	4b05      	ldr	r3, [pc, #20]	; (800fc60 <_dtoa_r+0x600>)
 800fc4a:	f7f0 fcfd 	bl	8000648 <__aeabi_dmul>
 800fc4e:	e9cd 0100 	strd	r0, r1, [sp]
 800fc52:	e7bc      	b.n	800fbce <_dtoa_r+0x56e>
 800fc54:	08013a40 	.word	0x08013a40
 800fc58:	08013a18 	.word	0x08013a18
 800fc5c:	3ff00000 	.word	0x3ff00000
 800fc60:	40240000 	.word	0x40240000
 800fc64:	401c0000 	.word	0x401c0000
 800fc68:	40140000 	.word	0x40140000
 800fc6c:	3fe00000 	.word	0x3fe00000
 800fc70:	e9dd 6700 	ldrd	r6, r7, [sp]
 800fc74:	465d      	mov	r5, fp
 800fc76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fc7a:	4630      	mov	r0, r6
 800fc7c:	4639      	mov	r1, r7
 800fc7e:	f7f0 fe0d 	bl	800089c <__aeabi_ddiv>
 800fc82:	f7f0 ff91 	bl	8000ba8 <__aeabi_d2iz>
 800fc86:	4680      	mov	r8, r0
 800fc88:	f7f0 fc74 	bl	8000574 <__aeabi_i2d>
 800fc8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fc90:	f7f0 fcda 	bl	8000648 <__aeabi_dmul>
 800fc94:	4602      	mov	r2, r0
 800fc96:	460b      	mov	r3, r1
 800fc98:	4630      	mov	r0, r6
 800fc9a:	4639      	mov	r1, r7
 800fc9c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800fca0:	f7f0 fb1a 	bl	80002d8 <__aeabi_dsub>
 800fca4:	f805 6b01 	strb.w	r6, [r5], #1
 800fca8:	eba5 060b 	sub.w	r6, r5, fp
 800fcac:	45b1      	cmp	r9, r6
 800fcae:	4602      	mov	r2, r0
 800fcb0:	460b      	mov	r3, r1
 800fcb2:	d139      	bne.n	800fd28 <_dtoa_r+0x6c8>
 800fcb4:	f7f0 fb12 	bl	80002dc <__adddf3>
 800fcb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fcbc:	4606      	mov	r6, r0
 800fcbe:	460f      	mov	r7, r1
 800fcc0:	f7f0 ff52 	bl	8000b68 <__aeabi_dcmpgt>
 800fcc4:	b9c8      	cbnz	r0, 800fcfa <_dtoa_r+0x69a>
 800fcc6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fcca:	4630      	mov	r0, r6
 800fccc:	4639      	mov	r1, r7
 800fcce:	f7f0 ff23 	bl	8000b18 <__aeabi_dcmpeq>
 800fcd2:	b110      	cbz	r0, 800fcda <_dtoa_r+0x67a>
 800fcd4:	f018 0f01 	tst.w	r8, #1
 800fcd8:	d10f      	bne.n	800fcfa <_dtoa_r+0x69a>
 800fcda:	9904      	ldr	r1, [sp, #16]
 800fcdc:	4620      	mov	r0, r4
 800fcde:	f000 fcaa 	bl	8010636 <_Bfree>
 800fce2:	2300      	movs	r3, #0
 800fce4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800fce6:	702b      	strb	r3, [r5, #0]
 800fce8:	f10a 0301 	add.w	r3, sl, #1
 800fcec:	6013      	str	r3, [r2, #0]
 800fcee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	f000 8241 	beq.w	8010178 <_dtoa_r+0xb18>
 800fcf6:	601d      	str	r5, [r3, #0]
 800fcf8:	e23e      	b.n	8010178 <_dtoa_r+0xb18>
 800fcfa:	f8cd a020 	str.w	sl, [sp, #32]
 800fcfe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800fd02:	2a39      	cmp	r2, #57	; 0x39
 800fd04:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 800fd08:	d108      	bne.n	800fd1c <_dtoa_r+0x6bc>
 800fd0a:	459b      	cmp	fp, r3
 800fd0c:	d10a      	bne.n	800fd24 <_dtoa_r+0x6c4>
 800fd0e:	9b08      	ldr	r3, [sp, #32]
 800fd10:	3301      	adds	r3, #1
 800fd12:	9308      	str	r3, [sp, #32]
 800fd14:	2330      	movs	r3, #48	; 0x30
 800fd16:	f88b 3000 	strb.w	r3, [fp]
 800fd1a:	465b      	mov	r3, fp
 800fd1c:	781a      	ldrb	r2, [r3, #0]
 800fd1e:	3201      	adds	r2, #1
 800fd20:	701a      	strb	r2, [r3, #0]
 800fd22:	e78c      	b.n	800fc3e <_dtoa_r+0x5de>
 800fd24:	461d      	mov	r5, r3
 800fd26:	e7ea      	b.n	800fcfe <_dtoa_r+0x69e>
 800fd28:	2200      	movs	r2, #0
 800fd2a:	4b9b      	ldr	r3, [pc, #620]	; (800ff98 <_dtoa_r+0x938>)
 800fd2c:	f7f0 fc8c 	bl	8000648 <__aeabi_dmul>
 800fd30:	2200      	movs	r2, #0
 800fd32:	2300      	movs	r3, #0
 800fd34:	4606      	mov	r6, r0
 800fd36:	460f      	mov	r7, r1
 800fd38:	f7f0 feee 	bl	8000b18 <__aeabi_dcmpeq>
 800fd3c:	2800      	cmp	r0, #0
 800fd3e:	d09a      	beq.n	800fc76 <_dtoa_r+0x616>
 800fd40:	e7cb      	b.n	800fcda <_dtoa_r+0x67a>
 800fd42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fd44:	2a00      	cmp	r2, #0
 800fd46:	f000 808b 	beq.w	800fe60 <_dtoa_r+0x800>
 800fd4a:	9a06      	ldr	r2, [sp, #24]
 800fd4c:	2a01      	cmp	r2, #1
 800fd4e:	dc6e      	bgt.n	800fe2e <_dtoa_r+0x7ce>
 800fd50:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800fd52:	2a00      	cmp	r2, #0
 800fd54:	d067      	beq.n	800fe26 <_dtoa_r+0x7c6>
 800fd56:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800fd5a:	9f07      	ldr	r7, [sp, #28]
 800fd5c:	9d05      	ldr	r5, [sp, #20]
 800fd5e:	9a05      	ldr	r2, [sp, #20]
 800fd60:	2101      	movs	r1, #1
 800fd62:	441a      	add	r2, r3
 800fd64:	4620      	mov	r0, r4
 800fd66:	9205      	str	r2, [sp, #20]
 800fd68:	4498      	add	r8, r3
 800fd6a:	f000 fd04 	bl	8010776 <__i2b>
 800fd6e:	4606      	mov	r6, r0
 800fd70:	2d00      	cmp	r5, #0
 800fd72:	dd0c      	ble.n	800fd8e <_dtoa_r+0x72e>
 800fd74:	f1b8 0f00 	cmp.w	r8, #0
 800fd78:	dd09      	ble.n	800fd8e <_dtoa_r+0x72e>
 800fd7a:	4545      	cmp	r5, r8
 800fd7c:	9a05      	ldr	r2, [sp, #20]
 800fd7e:	462b      	mov	r3, r5
 800fd80:	bfa8      	it	ge
 800fd82:	4643      	movge	r3, r8
 800fd84:	1ad2      	subs	r2, r2, r3
 800fd86:	9205      	str	r2, [sp, #20]
 800fd88:	1aed      	subs	r5, r5, r3
 800fd8a:	eba8 0803 	sub.w	r8, r8, r3
 800fd8e:	9b07      	ldr	r3, [sp, #28]
 800fd90:	b1eb      	cbz	r3, 800fdce <_dtoa_r+0x76e>
 800fd92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d067      	beq.n	800fe68 <_dtoa_r+0x808>
 800fd98:	b18f      	cbz	r7, 800fdbe <_dtoa_r+0x75e>
 800fd9a:	4631      	mov	r1, r6
 800fd9c:	463a      	mov	r2, r7
 800fd9e:	4620      	mov	r0, r4
 800fda0:	f000 fd88 	bl	80108b4 <__pow5mult>
 800fda4:	9a04      	ldr	r2, [sp, #16]
 800fda6:	4601      	mov	r1, r0
 800fda8:	4606      	mov	r6, r0
 800fdaa:	4620      	mov	r0, r4
 800fdac:	f000 fcec 	bl	8010788 <__multiply>
 800fdb0:	9904      	ldr	r1, [sp, #16]
 800fdb2:	9008      	str	r0, [sp, #32]
 800fdb4:	4620      	mov	r0, r4
 800fdb6:	f000 fc3e 	bl	8010636 <_Bfree>
 800fdba:	9b08      	ldr	r3, [sp, #32]
 800fdbc:	9304      	str	r3, [sp, #16]
 800fdbe:	9b07      	ldr	r3, [sp, #28]
 800fdc0:	1bda      	subs	r2, r3, r7
 800fdc2:	d004      	beq.n	800fdce <_dtoa_r+0x76e>
 800fdc4:	9904      	ldr	r1, [sp, #16]
 800fdc6:	4620      	mov	r0, r4
 800fdc8:	f000 fd74 	bl	80108b4 <__pow5mult>
 800fdcc:	9004      	str	r0, [sp, #16]
 800fdce:	2101      	movs	r1, #1
 800fdd0:	4620      	mov	r0, r4
 800fdd2:	f000 fcd0 	bl	8010776 <__i2b>
 800fdd6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fdd8:	4607      	mov	r7, r0
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	f000 81d0 	beq.w	8010180 <_dtoa_r+0xb20>
 800fde0:	461a      	mov	r2, r3
 800fde2:	4601      	mov	r1, r0
 800fde4:	4620      	mov	r0, r4
 800fde6:	f000 fd65 	bl	80108b4 <__pow5mult>
 800fdea:	9b06      	ldr	r3, [sp, #24]
 800fdec:	2b01      	cmp	r3, #1
 800fdee:	4607      	mov	r7, r0
 800fdf0:	dc40      	bgt.n	800fe74 <_dtoa_r+0x814>
 800fdf2:	9b00      	ldr	r3, [sp, #0]
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d139      	bne.n	800fe6c <_dtoa_r+0x80c>
 800fdf8:	9b01      	ldr	r3, [sp, #4]
 800fdfa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d136      	bne.n	800fe70 <_dtoa_r+0x810>
 800fe02:	9b01      	ldr	r3, [sp, #4]
 800fe04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fe08:	0d1b      	lsrs	r3, r3, #20
 800fe0a:	051b      	lsls	r3, r3, #20
 800fe0c:	b12b      	cbz	r3, 800fe1a <_dtoa_r+0x7ba>
 800fe0e:	9b05      	ldr	r3, [sp, #20]
 800fe10:	3301      	adds	r3, #1
 800fe12:	9305      	str	r3, [sp, #20]
 800fe14:	f108 0801 	add.w	r8, r8, #1
 800fe18:	2301      	movs	r3, #1
 800fe1a:	9307      	str	r3, [sp, #28]
 800fe1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d12a      	bne.n	800fe78 <_dtoa_r+0x818>
 800fe22:	2001      	movs	r0, #1
 800fe24:	e030      	b.n	800fe88 <_dtoa_r+0x828>
 800fe26:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fe28:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800fe2c:	e795      	b.n	800fd5a <_dtoa_r+0x6fa>
 800fe2e:	9b07      	ldr	r3, [sp, #28]
 800fe30:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 800fe34:	42bb      	cmp	r3, r7
 800fe36:	bfbf      	itttt	lt
 800fe38:	9b07      	ldrlt	r3, [sp, #28]
 800fe3a:	9707      	strlt	r7, [sp, #28]
 800fe3c:	1afa      	sublt	r2, r7, r3
 800fe3e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800fe40:	bfbb      	ittet	lt
 800fe42:	189b      	addlt	r3, r3, r2
 800fe44:	930e      	strlt	r3, [sp, #56]	; 0x38
 800fe46:	1bdf      	subge	r7, r3, r7
 800fe48:	2700      	movlt	r7, #0
 800fe4a:	f1b9 0f00 	cmp.w	r9, #0
 800fe4e:	bfb5      	itete	lt
 800fe50:	9b05      	ldrlt	r3, [sp, #20]
 800fe52:	9d05      	ldrge	r5, [sp, #20]
 800fe54:	eba3 0509 	sublt.w	r5, r3, r9
 800fe58:	464b      	movge	r3, r9
 800fe5a:	bfb8      	it	lt
 800fe5c:	2300      	movlt	r3, #0
 800fe5e:	e77e      	b.n	800fd5e <_dtoa_r+0x6fe>
 800fe60:	9f07      	ldr	r7, [sp, #28]
 800fe62:	9d05      	ldr	r5, [sp, #20]
 800fe64:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800fe66:	e783      	b.n	800fd70 <_dtoa_r+0x710>
 800fe68:	9a07      	ldr	r2, [sp, #28]
 800fe6a:	e7ab      	b.n	800fdc4 <_dtoa_r+0x764>
 800fe6c:	2300      	movs	r3, #0
 800fe6e:	e7d4      	b.n	800fe1a <_dtoa_r+0x7ba>
 800fe70:	9b00      	ldr	r3, [sp, #0]
 800fe72:	e7d2      	b.n	800fe1a <_dtoa_r+0x7ba>
 800fe74:	2300      	movs	r3, #0
 800fe76:	9307      	str	r3, [sp, #28]
 800fe78:	693b      	ldr	r3, [r7, #16]
 800fe7a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800fe7e:	6918      	ldr	r0, [r3, #16]
 800fe80:	f000 fc2b 	bl	80106da <__hi0bits>
 800fe84:	f1c0 0020 	rsb	r0, r0, #32
 800fe88:	4440      	add	r0, r8
 800fe8a:	f010 001f 	ands.w	r0, r0, #31
 800fe8e:	d047      	beq.n	800ff20 <_dtoa_r+0x8c0>
 800fe90:	f1c0 0320 	rsb	r3, r0, #32
 800fe94:	2b04      	cmp	r3, #4
 800fe96:	dd3b      	ble.n	800ff10 <_dtoa_r+0x8b0>
 800fe98:	9b05      	ldr	r3, [sp, #20]
 800fe9a:	f1c0 001c 	rsb	r0, r0, #28
 800fe9e:	4403      	add	r3, r0
 800fea0:	9305      	str	r3, [sp, #20]
 800fea2:	4405      	add	r5, r0
 800fea4:	4480      	add	r8, r0
 800fea6:	9b05      	ldr	r3, [sp, #20]
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	dd05      	ble.n	800feb8 <_dtoa_r+0x858>
 800feac:	461a      	mov	r2, r3
 800feae:	9904      	ldr	r1, [sp, #16]
 800feb0:	4620      	mov	r0, r4
 800feb2:	f000 fd4d 	bl	8010950 <__lshift>
 800feb6:	9004      	str	r0, [sp, #16]
 800feb8:	f1b8 0f00 	cmp.w	r8, #0
 800febc:	dd05      	ble.n	800feca <_dtoa_r+0x86a>
 800febe:	4639      	mov	r1, r7
 800fec0:	4642      	mov	r2, r8
 800fec2:	4620      	mov	r0, r4
 800fec4:	f000 fd44 	bl	8010950 <__lshift>
 800fec8:	4607      	mov	r7, r0
 800feca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fecc:	b353      	cbz	r3, 800ff24 <_dtoa_r+0x8c4>
 800fece:	4639      	mov	r1, r7
 800fed0:	9804      	ldr	r0, [sp, #16]
 800fed2:	f000 fd91 	bl	80109f8 <__mcmp>
 800fed6:	2800      	cmp	r0, #0
 800fed8:	da24      	bge.n	800ff24 <_dtoa_r+0x8c4>
 800feda:	2300      	movs	r3, #0
 800fedc:	220a      	movs	r2, #10
 800fede:	9904      	ldr	r1, [sp, #16]
 800fee0:	4620      	mov	r0, r4
 800fee2:	f000 fbbf 	bl	8010664 <__multadd>
 800fee6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fee8:	9004      	str	r0, [sp, #16]
 800feea:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800feee:	2b00      	cmp	r3, #0
 800fef0:	f000 814d 	beq.w	801018e <_dtoa_r+0xb2e>
 800fef4:	2300      	movs	r3, #0
 800fef6:	4631      	mov	r1, r6
 800fef8:	220a      	movs	r2, #10
 800fefa:	4620      	mov	r0, r4
 800fefc:	f000 fbb2 	bl	8010664 <__multadd>
 800ff00:	9b02      	ldr	r3, [sp, #8]
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	4606      	mov	r6, r0
 800ff06:	dc4f      	bgt.n	800ffa8 <_dtoa_r+0x948>
 800ff08:	9b06      	ldr	r3, [sp, #24]
 800ff0a:	2b02      	cmp	r3, #2
 800ff0c:	dd4c      	ble.n	800ffa8 <_dtoa_r+0x948>
 800ff0e:	e011      	b.n	800ff34 <_dtoa_r+0x8d4>
 800ff10:	d0c9      	beq.n	800fea6 <_dtoa_r+0x846>
 800ff12:	9a05      	ldr	r2, [sp, #20]
 800ff14:	331c      	adds	r3, #28
 800ff16:	441a      	add	r2, r3
 800ff18:	9205      	str	r2, [sp, #20]
 800ff1a:	441d      	add	r5, r3
 800ff1c:	4498      	add	r8, r3
 800ff1e:	e7c2      	b.n	800fea6 <_dtoa_r+0x846>
 800ff20:	4603      	mov	r3, r0
 800ff22:	e7f6      	b.n	800ff12 <_dtoa_r+0x8b2>
 800ff24:	f1b9 0f00 	cmp.w	r9, #0
 800ff28:	dc38      	bgt.n	800ff9c <_dtoa_r+0x93c>
 800ff2a:	9b06      	ldr	r3, [sp, #24]
 800ff2c:	2b02      	cmp	r3, #2
 800ff2e:	dd35      	ble.n	800ff9c <_dtoa_r+0x93c>
 800ff30:	f8cd 9008 	str.w	r9, [sp, #8]
 800ff34:	9b02      	ldr	r3, [sp, #8]
 800ff36:	b963      	cbnz	r3, 800ff52 <_dtoa_r+0x8f2>
 800ff38:	4639      	mov	r1, r7
 800ff3a:	2205      	movs	r2, #5
 800ff3c:	4620      	mov	r0, r4
 800ff3e:	f000 fb91 	bl	8010664 <__multadd>
 800ff42:	4601      	mov	r1, r0
 800ff44:	4607      	mov	r7, r0
 800ff46:	9804      	ldr	r0, [sp, #16]
 800ff48:	f000 fd56 	bl	80109f8 <__mcmp>
 800ff4c:	2800      	cmp	r0, #0
 800ff4e:	f73f adcc 	bgt.w	800faea <_dtoa_r+0x48a>
 800ff52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ff54:	465d      	mov	r5, fp
 800ff56:	ea6f 0a03 	mvn.w	sl, r3
 800ff5a:	f04f 0900 	mov.w	r9, #0
 800ff5e:	4639      	mov	r1, r7
 800ff60:	4620      	mov	r0, r4
 800ff62:	f000 fb68 	bl	8010636 <_Bfree>
 800ff66:	2e00      	cmp	r6, #0
 800ff68:	f43f aeb7 	beq.w	800fcda <_dtoa_r+0x67a>
 800ff6c:	f1b9 0f00 	cmp.w	r9, #0
 800ff70:	d005      	beq.n	800ff7e <_dtoa_r+0x91e>
 800ff72:	45b1      	cmp	r9, r6
 800ff74:	d003      	beq.n	800ff7e <_dtoa_r+0x91e>
 800ff76:	4649      	mov	r1, r9
 800ff78:	4620      	mov	r0, r4
 800ff7a:	f000 fb5c 	bl	8010636 <_Bfree>
 800ff7e:	4631      	mov	r1, r6
 800ff80:	4620      	mov	r0, r4
 800ff82:	f000 fb58 	bl	8010636 <_Bfree>
 800ff86:	e6a8      	b.n	800fcda <_dtoa_r+0x67a>
 800ff88:	2700      	movs	r7, #0
 800ff8a:	463e      	mov	r6, r7
 800ff8c:	e7e1      	b.n	800ff52 <_dtoa_r+0x8f2>
 800ff8e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800ff92:	463e      	mov	r6, r7
 800ff94:	e5a9      	b.n	800faea <_dtoa_r+0x48a>
 800ff96:	bf00      	nop
 800ff98:	40240000 	.word	0x40240000
 800ff9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ff9e:	f8cd 9008 	str.w	r9, [sp, #8]
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	f000 80fa 	beq.w	801019c <_dtoa_r+0xb3c>
 800ffa8:	2d00      	cmp	r5, #0
 800ffaa:	dd05      	ble.n	800ffb8 <_dtoa_r+0x958>
 800ffac:	4631      	mov	r1, r6
 800ffae:	462a      	mov	r2, r5
 800ffb0:	4620      	mov	r0, r4
 800ffb2:	f000 fccd 	bl	8010950 <__lshift>
 800ffb6:	4606      	mov	r6, r0
 800ffb8:	9b07      	ldr	r3, [sp, #28]
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	d04c      	beq.n	8010058 <_dtoa_r+0x9f8>
 800ffbe:	6871      	ldr	r1, [r6, #4]
 800ffc0:	4620      	mov	r0, r4
 800ffc2:	f000 fb04 	bl	80105ce <_Balloc>
 800ffc6:	6932      	ldr	r2, [r6, #16]
 800ffc8:	3202      	adds	r2, #2
 800ffca:	4605      	mov	r5, r0
 800ffcc:	0092      	lsls	r2, r2, #2
 800ffce:	f106 010c 	add.w	r1, r6, #12
 800ffd2:	300c      	adds	r0, #12
 800ffd4:	f000 faf0 	bl	80105b8 <memcpy>
 800ffd8:	2201      	movs	r2, #1
 800ffda:	4629      	mov	r1, r5
 800ffdc:	4620      	mov	r0, r4
 800ffde:	f000 fcb7 	bl	8010950 <__lshift>
 800ffe2:	9b00      	ldr	r3, [sp, #0]
 800ffe4:	f8cd b014 	str.w	fp, [sp, #20]
 800ffe8:	f003 0301 	and.w	r3, r3, #1
 800ffec:	46b1      	mov	r9, r6
 800ffee:	9307      	str	r3, [sp, #28]
 800fff0:	4606      	mov	r6, r0
 800fff2:	4639      	mov	r1, r7
 800fff4:	9804      	ldr	r0, [sp, #16]
 800fff6:	f7ff faa5 	bl	800f544 <quorem>
 800fffa:	4649      	mov	r1, r9
 800fffc:	4605      	mov	r5, r0
 800fffe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8010002:	9804      	ldr	r0, [sp, #16]
 8010004:	f000 fcf8 	bl	80109f8 <__mcmp>
 8010008:	4632      	mov	r2, r6
 801000a:	9000      	str	r0, [sp, #0]
 801000c:	4639      	mov	r1, r7
 801000e:	4620      	mov	r0, r4
 8010010:	f000 fd0c 	bl	8010a2c <__mdiff>
 8010014:	68c3      	ldr	r3, [r0, #12]
 8010016:	4602      	mov	r2, r0
 8010018:	bb03      	cbnz	r3, 801005c <_dtoa_r+0x9fc>
 801001a:	4601      	mov	r1, r0
 801001c:	9008      	str	r0, [sp, #32]
 801001e:	9804      	ldr	r0, [sp, #16]
 8010020:	f000 fcea 	bl	80109f8 <__mcmp>
 8010024:	9a08      	ldr	r2, [sp, #32]
 8010026:	4603      	mov	r3, r0
 8010028:	4611      	mov	r1, r2
 801002a:	4620      	mov	r0, r4
 801002c:	9308      	str	r3, [sp, #32]
 801002e:	f000 fb02 	bl	8010636 <_Bfree>
 8010032:	9b08      	ldr	r3, [sp, #32]
 8010034:	b9a3      	cbnz	r3, 8010060 <_dtoa_r+0xa00>
 8010036:	9a06      	ldr	r2, [sp, #24]
 8010038:	b992      	cbnz	r2, 8010060 <_dtoa_r+0xa00>
 801003a:	9a07      	ldr	r2, [sp, #28]
 801003c:	b982      	cbnz	r2, 8010060 <_dtoa_r+0xa00>
 801003e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8010042:	d029      	beq.n	8010098 <_dtoa_r+0xa38>
 8010044:	9b00      	ldr	r3, [sp, #0]
 8010046:	2b00      	cmp	r3, #0
 8010048:	dd01      	ble.n	801004e <_dtoa_r+0x9ee>
 801004a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 801004e:	9b05      	ldr	r3, [sp, #20]
 8010050:	1c5d      	adds	r5, r3, #1
 8010052:	f883 8000 	strb.w	r8, [r3]
 8010056:	e782      	b.n	800ff5e <_dtoa_r+0x8fe>
 8010058:	4630      	mov	r0, r6
 801005a:	e7c2      	b.n	800ffe2 <_dtoa_r+0x982>
 801005c:	2301      	movs	r3, #1
 801005e:	e7e3      	b.n	8010028 <_dtoa_r+0x9c8>
 8010060:	9a00      	ldr	r2, [sp, #0]
 8010062:	2a00      	cmp	r2, #0
 8010064:	db04      	blt.n	8010070 <_dtoa_r+0xa10>
 8010066:	d125      	bne.n	80100b4 <_dtoa_r+0xa54>
 8010068:	9a06      	ldr	r2, [sp, #24]
 801006a:	bb1a      	cbnz	r2, 80100b4 <_dtoa_r+0xa54>
 801006c:	9a07      	ldr	r2, [sp, #28]
 801006e:	bb0a      	cbnz	r2, 80100b4 <_dtoa_r+0xa54>
 8010070:	2b00      	cmp	r3, #0
 8010072:	ddec      	ble.n	801004e <_dtoa_r+0x9ee>
 8010074:	2201      	movs	r2, #1
 8010076:	9904      	ldr	r1, [sp, #16]
 8010078:	4620      	mov	r0, r4
 801007a:	f000 fc69 	bl	8010950 <__lshift>
 801007e:	4639      	mov	r1, r7
 8010080:	9004      	str	r0, [sp, #16]
 8010082:	f000 fcb9 	bl	80109f8 <__mcmp>
 8010086:	2800      	cmp	r0, #0
 8010088:	dc03      	bgt.n	8010092 <_dtoa_r+0xa32>
 801008a:	d1e0      	bne.n	801004e <_dtoa_r+0x9ee>
 801008c:	f018 0f01 	tst.w	r8, #1
 8010090:	d0dd      	beq.n	801004e <_dtoa_r+0x9ee>
 8010092:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8010096:	d1d8      	bne.n	801004a <_dtoa_r+0x9ea>
 8010098:	9b05      	ldr	r3, [sp, #20]
 801009a:	9a05      	ldr	r2, [sp, #20]
 801009c:	1c5d      	adds	r5, r3, #1
 801009e:	2339      	movs	r3, #57	; 0x39
 80100a0:	7013      	strb	r3, [r2, #0]
 80100a2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80100a6:	2b39      	cmp	r3, #57	; 0x39
 80100a8:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80100ac:	d04f      	beq.n	801014e <_dtoa_r+0xaee>
 80100ae:	3301      	adds	r3, #1
 80100b0:	7013      	strb	r3, [r2, #0]
 80100b2:	e754      	b.n	800ff5e <_dtoa_r+0x8fe>
 80100b4:	9a05      	ldr	r2, [sp, #20]
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	f102 0501 	add.w	r5, r2, #1
 80100bc:	dd06      	ble.n	80100cc <_dtoa_r+0xa6c>
 80100be:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80100c2:	d0e9      	beq.n	8010098 <_dtoa_r+0xa38>
 80100c4:	f108 0801 	add.w	r8, r8, #1
 80100c8:	9b05      	ldr	r3, [sp, #20]
 80100ca:	e7c2      	b.n	8010052 <_dtoa_r+0x9f2>
 80100cc:	9a02      	ldr	r2, [sp, #8]
 80100ce:	f805 8c01 	strb.w	r8, [r5, #-1]
 80100d2:	eba5 030b 	sub.w	r3, r5, fp
 80100d6:	4293      	cmp	r3, r2
 80100d8:	d021      	beq.n	801011e <_dtoa_r+0xabe>
 80100da:	2300      	movs	r3, #0
 80100dc:	220a      	movs	r2, #10
 80100de:	9904      	ldr	r1, [sp, #16]
 80100e0:	4620      	mov	r0, r4
 80100e2:	f000 fabf 	bl	8010664 <__multadd>
 80100e6:	45b1      	cmp	r9, r6
 80100e8:	9004      	str	r0, [sp, #16]
 80100ea:	f04f 0300 	mov.w	r3, #0
 80100ee:	f04f 020a 	mov.w	r2, #10
 80100f2:	4649      	mov	r1, r9
 80100f4:	4620      	mov	r0, r4
 80100f6:	d105      	bne.n	8010104 <_dtoa_r+0xaa4>
 80100f8:	f000 fab4 	bl	8010664 <__multadd>
 80100fc:	4681      	mov	r9, r0
 80100fe:	4606      	mov	r6, r0
 8010100:	9505      	str	r5, [sp, #20]
 8010102:	e776      	b.n	800fff2 <_dtoa_r+0x992>
 8010104:	f000 faae 	bl	8010664 <__multadd>
 8010108:	4631      	mov	r1, r6
 801010a:	4681      	mov	r9, r0
 801010c:	2300      	movs	r3, #0
 801010e:	220a      	movs	r2, #10
 8010110:	4620      	mov	r0, r4
 8010112:	f000 faa7 	bl	8010664 <__multadd>
 8010116:	4606      	mov	r6, r0
 8010118:	e7f2      	b.n	8010100 <_dtoa_r+0xaa0>
 801011a:	f04f 0900 	mov.w	r9, #0
 801011e:	2201      	movs	r2, #1
 8010120:	9904      	ldr	r1, [sp, #16]
 8010122:	4620      	mov	r0, r4
 8010124:	f000 fc14 	bl	8010950 <__lshift>
 8010128:	4639      	mov	r1, r7
 801012a:	9004      	str	r0, [sp, #16]
 801012c:	f000 fc64 	bl	80109f8 <__mcmp>
 8010130:	2800      	cmp	r0, #0
 8010132:	dcb6      	bgt.n	80100a2 <_dtoa_r+0xa42>
 8010134:	d102      	bne.n	801013c <_dtoa_r+0xadc>
 8010136:	f018 0f01 	tst.w	r8, #1
 801013a:	d1b2      	bne.n	80100a2 <_dtoa_r+0xa42>
 801013c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010140:	2b30      	cmp	r3, #48	; 0x30
 8010142:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8010146:	f47f af0a 	bne.w	800ff5e <_dtoa_r+0x8fe>
 801014a:	4615      	mov	r5, r2
 801014c:	e7f6      	b.n	801013c <_dtoa_r+0xadc>
 801014e:	4593      	cmp	fp, r2
 8010150:	d105      	bne.n	801015e <_dtoa_r+0xafe>
 8010152:	2331      	movs	r3, #49	; 0x31
 8010154:	f10a 0a01 	add.w	sl, sl, #1
 8010158:	f88b 3000 	strb.w	r3, [fp]
 801015c:	e6ff      	b.n	800ff5e <_dtoa_r+0x8fe>
 801015e:	4615      	mov	r5, r2
 8010160:	e79f      	b.n	80100a2 <_dtoa_r+0xa42>
 8010162:	f8df b064 	ldr.w	fp, [pc, #100]	; 80101c8 <_dtoa_r+0xb68>
 8010166:	e007      	b.n	8010178 <_dtoa_r+0xb18>
 8010168:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801016a:	f8df b060 	ldr.w	fp, [pc, #96]	; 80101cc <_dtoa_r+0xb6c>
 801016e:	b11b      	cbz	r3, 8010178 <_dtoa_r+0xb18>
 8010170:	f10b 0308 	add.w	r3, fp, #8
 8010174:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010176:	6013      	str	r3, [r2, #0]
 8010178:	4658      	mov	r0, fp
 801017a:	b017      	add	sp, #92	; 0x5c
 801017c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010180:	9b06      	ldr	r3, [sp, #24]
 8010182:	2b01      	cmp	r3, #1
 8010184:	f77f ae35 	ble.w	800fdf2 <_dtoa_r+0x792>
 8010188:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801018a:	9307      	str	r3, [sp, #28]
 801018c:	e649      	b.n	800fe22 <_dtoa_r+0x7c2>
 801018e:	9b02      	ldr	r3, [sp, #8]
 8010190:	2b00      	cmp	r3, #0
 8010192:	dc03      	bgt.n	801019c <_dtoa_r+0xb3c>
 8010194:	9b06      	ldr	r3, [sp, #24]
 8010196:	2b02      	cmp	r3, #2
 8010198:	f73f aecc 	bgt.w	800ff34 <_dtoa_r+0x8d4>
 801019c:	465d      	mov	r5, fp
 801019e:	4639      	mov	r1, r7
 80101a0:	9804      	ldr	r0, [sp, #16]
 80101a2:	f7ff f9cf 	bl	800f544 <quorem>
 80101a6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80101aa:	f805 8b01 	strb.w	r8, [r5], #1
 80101ae:	9a02      	ldr	r2, [sp, #8]
 80101b0:	eba5 030b 	sub.w	r3, r5, fp
 80101b4:	429a      	cmp	r2, r3
 80101b6:	ddb0      	ble.n	801011a <_dtoa_r+0xaba>
 80101b8:	2300      	movs	r3, #0
 80101ba:	220a      	movs	r2, #10
 80101bc:	9904      	ldr	r1, [sp, #16]
 80101be:	4620      	mov	r0, r4
 80101c0:	f000 fa50 	bl	8010664 <__multadd>
 80101c4:	9004      	str	r0, [sp, #16]
 80101c6:	e7ea      	b.n	801019e <_dtoa_r+0xb3e>
 80101c8:	08013c34 	.word	0x08013c34
 80101cc:	080139a6 	.word	0x080139a6

080101d0 <__sflush_r>:
 80101d0:	898a      	ldrh	r2, [r1, #12]
 80101d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80101d6:	4605      	mov	r5, r0
 80101d8:	0710      	lsls	r0, r2, #28
 80101da:	460c      	mov	r4, r1
 80101dc:	d458      	bmi.n	8010290 <__sflush_r+0xc0>
 80101de:	684b      	ldr	r3, [r1, #4]
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	dc05      	bgt.n	80101f0 <__sflush_r+0x20>
 80101e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	dc02      	bgt.n	80101f0 <__sflush_r+0x20>
 80101ea:	2000      	movs	r0, #0
 80101ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80101f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80101f2:	2e00      	cmp	r6, #0
 80101f4:	d0f9      	beq.n	80101ea <__sflush_r+0x1a>
 80101f6:	2300      	movs	r3, #0
 80101f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80101fc:	682f      	ldr	r7, [r5, #0]
 80101fe:	6a21      	ldr	r1, [r4, #32]
 8010200:	602b      	str	r3, [r5, #0]
 8010202:	d032      	beq.n	801026a <__sflush_r+0x9a>
 8010204:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010206:	89a3      	ldrh	r3, [r4, #12]
 8010208:	075a      	lsls	r2, r3, #29
 801020a:	d505      	bpl.n	8010218 <__sflush_r+0x48>
 801020c:	6863      	ldr	r3, [r4, #4]
 801020e:	1ac0      	subs	r0, r0, r3
 8010210:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010212:	b10b      	cbz	r3, 8010218 <__sflush_r+0x48>
 8010214:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010216:	1ac0      	subs	r0, r0, r3
 8010218:	2300      	movs	r3, #0
 801021a:	4602      	mov	r2, r0
 801021c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801021e:	6a21      	ldr	r1, [r4, #32]
 8010220:	4628      	mov	r0, r5
 8010222:	47b0      	blx	r6
 8010224:	1c43      	adds	r3, r0, #1
 8010226:	89a3      	ldrh	r3, [r4, #12]
 8010228:	d106      	bne.n	8010238 <__sflush_r+0x68>
 801022a:	6829      	ldr	r1, [r5, #0]
 801022c:	291d      	cmp	r1, #29
 801022e:	d848      	bhi.n	80102c2 <__sflush_r+0xf2>
 8010230:	4a29      	ldr	r2, [pc, #164]	; (80102d8 <__sflush_r+0x108>)
 8010232:	40ca      	lsrs	r2, r1
 8010234:	07d6      	lsls	r6, r2, #31
 8010236:	d544      	bpl.n	80102c2 <__sflush_r+0xf2>
 8010238:	2200      	movs	r2, #0
 801023a:	6062      	str	r2, [r4, #4]
 801023c:	04d9      	lsls	r1, r3, #19
 801023e:	6922      	ldr	r2, [r4, #16]
 8010240:	6022      	str	r2, [r4, #0]
 8010242:	d504      	bpl.n	801024e <__sflush_r+0x7e>
 8010244:	1c42      	adds	r2, r0, #1
 8010246:	d101      	bne.n	801024c <__sflush_r+0x7c>
 8010248:	682b      	ldr	r3, [r5, #0]
 801024a:	b903      	cbnz	r3, 801024e <__sflush_r+0x7e>
 801024c:	6560      	str	r0, [r4, #84]	; 0x54
 801024e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010250:	602f      	str	r7, [r5, #0]
 8010252:	2900      	cmp	r1, #0
 8010254:	d0c9      	beq.n	80101ea <__sflush_r+0x1a>
 8010256:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801025a:	4299      	cmp	r1, r3
 801025c:	d002      	beq.n	8010264 <__sflush_r+0x94>
 801025e:	4628      	mov	r0, r5
 8010260:	f000 fc9e 	bl	8010ba0 <_free_r>
 8010264:	2000      	movs	r0, #0
 8010266:	6360      	str	r0, [r4, #52]	; 0x34
 8010268:	e7c0      	b.n	80101ec <__sflush_r+0x1c>
 801026a:	2301      	movs	r3, #1
 801026c:	4628      	mov	r0, r5
 801026e:	47b0      	blx	r6
 8010270:	1c41      	adds	r1, r0, #1
 8010272:	d1c8      	bne.n	8010206 <__sflush_r+0x36>
 8010274:	682b      	ldr	r3, [r5, #0]
 8010276:	2b00      	cmp	r3, #0
 8010278:	d0c5      	beq.n	8010206 <__sflush_r+0x36>
 801027a:	2b1d      	cmp	r3, #29
 801027c:	d001      	beq.n	8010282 <__sflush_r+0xb2>
 801027e:	2b16      	cmp	r3, #22
 8010280:	d101      	bne.n	8010286 <__sflush_r+0xb6>
 8010282:	602f      	str	r7, [r5, #0]
 8010284:	e7b1      	b.n	80101ea <__sflush_r+0x1a>
 8010286:	89a3      	ldrh	r3, [r4, #12]
 8010288:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801028c:	81a3      	strh	r3, [r4, #12]
 801028e:	e7ad      	b.n	80101ec <__sflush_r+0x1c>
 8010290:	690f      	ldr	r7, [r1, #16]
 8010292:	2f00      	cmp	r7, #0
 8010294:	d0a9      	beq.n	80101ea <__sflush_r+0x1a>
 8010296:	0793      	lsls	r3, r2, #30
 8010298:	680e      	ldr	r6, [r1, #0]
 801029a:	bf08      	it	eq
 801029c:	694b      	ldreq	r3, [r1, #20]
 801029e:	600f      	str	r7, [r1, #0]
 80102a0:	bf18      	it	ne
 80102a2:	2300      	movne	r3, #0
 80102a4:	eba6 0807 	sub.w	r8, r6, r7
 80102a8:	608b      	str	r3, [r1, #8]
 80102aa:	f1b8 0f00 	cmp.w	r8, #0
 80102ae:	dd9c      	ble.n	80101ea <__sflush_r+0x1a>
 80102b0:	4643      	mov	r3, r8
 80102b2:	463a      	mov	r2, r7
 80102b4:	6a21      	ldr	r1, [r4, #32]
 80102b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80102b8:	4628      	mov	r0, r5
 80102ba:	47b0      	blx	r6
 80102bc:	2800      	cmp	r0, #0
 80102be:	dc06      	bgt.n	80102ce <__sflush_r+0xfe>
 80102c0:	89a3      	ldrh	r3, [r4, #12]
 80102c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80102c6:	81a3      	strh	r3, [r4, #12]
 80102c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80102cc:	e78e      	b.n	80101ec <__sflush_r+0x1c>
 80102ce:	4407      	add	r7, r0
 80102d0:	eba8 0800 	sub.w	r8, r8, r0
 80102d4:	e7e9      	b.n	80102aa <__sflush_r+0xda>
 80102d6:	bf00      	nop
 80102d8:	20400001 	.word	0x20400001

080102dc <_fflush_r>:
 80102dc:	b538      	push	{r3, r4, r5, lr}
 80102de:	690b      	ldr	r3, [r1, #16]
 80102e0:	4605      	mov	r5, r0
 80102e2:	460c      	mov	r4, r1
 80102e4:	b1db      	cbz	r3, 801031e <_fflush_r+0x42>
 80102e6:	b118      	cbz	r0, 80102f0 <_fflush_r+0x14>
 80102e8:	6983      	ldr	r3, [r0, #24]
 80102ea:	b90b      	cbnz	r3, 80102f0 <_fflush_r+0x14>
 80102ec:	f000 f860 	bl	80103b0 <__sinit>
 80102f0:	4b0c      	ldr	r3, [pc, #48]	; (8010324 <_fflush_r+0x48>)
 80102f2:	429c      	cmp	r4, r3
 80102f4:	d109      	bne.n	801030a <_fflush_r+0x2e>
 80102f6:	686c      	ldr	r4, [r5, #4]
 80102f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80102fc:	b17b      	cbz	r3, 801031e <_fflush_r+0x42>
 80102fe:	4621      	mov	r1, r4
 8010300:	4628      	mov	r0, r5
 8010302:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010306:	f7ff bf63 	b.w	80101d0 <__sflush_r>
 801030a:	4b07      	ldr	r3, [pc, #28]	; (8010328 <_fflush_r+0x4c>)
 801030c:	429c      	cmp	r4, r3
 801030e:	d101      	bne.n	8010314 <_fflush_r+0x38>
 8010310:	68ac      	ldr	r4, [r5, #8]
 8010312:	e7f1      	b.n	80102f8 <_fflush_r+0x1c>
 8010314:	4b05      	ldr	r3, [pc, #20]	; (801032c <_fflush_r+0x50>)
 8010316:	429c      	cmp	r4, r3
 8010318:	bf08      	it	eq
 801031a:	68ec      	ldreq	r4, [r5, #12]
 801031c:	e7ec      	b.n	80102f8 <_fflush_r+0x1c>
 801031e:	2000      	movs	r0, #0
 8010320:	bd38      	pop	{r3, r4, r5, pc}
 8010322:	bf00      	nop
 8010324:	080139d4 	.word	0x080139d4
 8010328:	080139f4 	.word	0x080139f4
 801032c:	080139b4 	.word	0x080139b4

08010330 <std>:
 8010330:	2300      	movs	r3, #0
 8010332:	b510      	push	{r4, lr}
 8010334:	4604      	mov	r4, r0
 8010336:	e9c0 3300 	strd	r3, r3, [r0]
 801033a:	6083      	str	r3, [r0, #8]
 801033c:	8181      	strh	r1, [r0, #12]
 801033e:	6643      	str	r3, [r0, #100]	; 0x64
 8010340:	81c2      	strh	r2, [r0, #14]
 8010342:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010346:	6183      	str	r3, [r0, #24]
 8010348:	4619      	mov	r1, r3
 801034a:	2208      	movs	r2, #8
 801034c:	305c      	adds	r0, #92	; 0x5c
 801034e:	f7fe fb2d 	bl	800e9ac <memset>
 8010352:	4b05      	ldr	r3, [pc, #20]	; (8010368 <std+0x38>)
 8010354:	6263      	str	r3, [r4, #36]	; 0x24
 8010356:	4b05      	ldr	r3, [pc, #20]	; (801036c <std+0x3c>)
 8010358:	62a3      	str	r3, [r4, #40]	; 0x28
 801035a:	4b05      	ldr	r3, [pc, #20]	; (8010370 <std+0x40>)
 801035c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801035e:	4b05      	ldr	r3, [pc, #20]	; (8010374 <std+0x44>)
 8010360:	6224      	str	r4, [r4, #32]
 8010362:	6323      	str	r3, [r4, #48]	; 0x30
 8010364:	bd10      	pop	{r4, pc}
 8010366:	bf00      	nop
 8010368:	08010fb5 	.word	0x08010fb5
 801036c:	08010fd7 	.word	0x08010fd7
 8010370:	0801100f 	.word	0x0801100f
 8010374:	08011033 	.word	0x08011033

08010378 <_cleanup_r>:
 8010378:	4901      	ldr	r1, [pc, #4]	; (8010380 <_cleanup_r+0x8>)
 801037a:	f000 b885 	b.w	8010488 <_fwalk_reent>
 801037e:	bf00      	nop
 8010380:	080102dd 	.word	0x080102dd

08010384 <__sfmoreglue>:
 8010384:	b570      	push	{r4, r5, r6, lr}
 8010386:	1e4a      	subs	r2, r1, #1
 8010388:	2568      	movs	r5, #104	; 0x68
 801038a:	4355      	muls	r5, r2
 801038c:	460e      	mov	r6, r1
 801038e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010392:	f000 fc53 	bl	8010c3c <_malloc_r>
 8010396:	4604      	mov	r4, r0
 8010398:	b140      	cbz	r0, 80103ac <__sfmoreglue+0x28>
 801039a:	2100      	movs	r1, #0
 801039c:	e9c0 1600 	strd	r1, r6, [r0]
 80103a0:	300c      	adds	r0, #12
 80103a2:	60a0      	str	r0, [r4, #8]
 80103a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80103a8:	f7fe fb00 	bl	800e9ac <memset>
 80103ac:	4620      	mov	r0, r4
 80103ae:	bd70      	pop	{r4, r5, r6, pc}

080103b0 <__sinit>:
 80103b0:	6983      	ldr	r3, [r0, #24]
 80103b2:	b510      	push	{r4, lr}
 80103b4:	4604      	mov	r4, r0
 80103b6:	bb33      	cbnz	r3, 8010406 <__sinit+0x56>
 80103b8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80103bc:	6503      	str	r3, [r0, #80]	; 0x50
 80103be:	4b12      	ldr	r3, [pc, #72]	; (8010408 <__sinit+0x58>)
 80103c0:	4a12      	ldr	r2, [pc, #72]	; (801040c <__sinit+0x5c>)
 80103c2:	681b      	ldr	r3, [r3, #0]
 80103c4:	6282      	str	r2, [r0, #40]	; 0x28
 80103c6:	4298      	cmp	r0, r3
 80103c8:	bf04      	itt	eq
 80103ca:	2301      	moveq	r3, #1
 80103cc:	6183      	streq	r3, [r0, #24]
 80103ce:	f000 f81f 	bl	8010410 <__sfp>
 80103d2:	6060      	str	r0, [r4, #4]
 80103d4:	4620      	mov	r0, r4
 80103d6:	f000 f81b 	bl	8010410 <__sfp>
 80103da:	60a0      	str	r0, [r4, #8]
 80103dc:	4620      	mov	r0, r4
 80103de:	f000 f817 	bl	8010410 <__sfp>
 80103e2:	2200      	movs	r2, #0
 80103e4:	60e0      	str	r0, [r4, #12]
 80103e6:	2104      	movs	r1, #4
 80103e8:	6860      	ldr	r0, [r4, #4]
 80103ea:	f7ff ffa1 	bl	8010330 <std>
 80103ee:	2201      	movs	r2, #1
 80103f0:	2109      	movs	r1, #9
 80103f2:	68a0      	ldr	r0, [r4, #8]
 80103f4:	f7ff ff9c 	bl	8010330 <std>
 80103f8:	2202      	movs	r2, #2
 80103fa:	2112      	movs	r1, #18
 80103fc:	68e0      	ldr	r0, [r4, #12]
 80103fe:	f7ff ff97 	bl	8010330 <std>
 8010402:	2301      	movs	r3, #1
 8010404:	61a3      	str	r3, [r4, #24]
 8010406:	bd10      	pop	{r4, pc}
 8010408:	08013970 	.word	0x08013970
 801040c:	08010379 	.word	0x08010379

08010410 <__sfp>:
 8010410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010412:	4b1b      	ldr	r3, [pc, #108]	; (8010480 <__sfp+0x70>)
 8010414:	681e      	ldr	r6, [r3, #0]
 8010416:	69b3      	ldr	r3, [r6, #24]
 8010418:	4607      	mov	r7, r0
 801041a:	b913      	cbnz	r3, 8010422 <__sfp+0x12>
 801041c:	4630      	mov	r0, r6
 801041e:	f7ff ffc7 	bl	80103b0 <__sinit>
 8010422:	3648      	adds	r6, #72	; 0x48
 8010424:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010428:	3b01      	subs	r3, #1
 801042a:	d503      	bpl.n	8010434 <__sfp+0x24>
 801042c:	6833      	ldr	r3, [r6, #0]
 801042e:	b133      	cbz	r3, 801043e <__sfp+0x2e>
 8010430:	6836      	ldr	r6, [r6, #0]
 8010432:	e7f7      	b.n	8010424 <__sfp+0x14>
 8010434:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010438:	b16d      	cbz	r5, 8010456 <__sfp+0x46>
 801043a:	3468      	adds	r4, #104	; 0x68
 801043c:	e7f4      	b.n	8010428 <__sfp+0x18>
 801043e:	2104      	movs	r1, #4
 8010440:	4638      	mov	r0, r7
 8010442:	f7ff ff9f 	bl	8010384 <__sfmoreglue>
 8010446:	6030      	str	r0, [r6, #0]
 8010448:	2800      	cmp	r0, #0
 801044a:	d1f1      	bne.n	8010430 <__sfp+0x20>
 801044c:	230c      	movs	r3, #12
 801044e:	603b      	str	r3, [r7, #0]
 8010450:	4604      	mov	r4, r0
 8010452:	4620      	mov	r0, r4
 8010454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010456:	4b0b      	ldr	r3, [pc, #44]	; (8010484 <__sfp+0x74>)
 8010458:	6665      	str	r5, [r4, #100]	; 0x64
 801045a:	e9c4 5500 	strd	r5, r5, [r4]
 801045e:	60a5      	str	r5, [r4, #8]
 8010460:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8010464:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8010468:	2208      	movs	r2, #8
 801046a:	4629      	mov	r1, r5
 801046c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010470:	f7fe fa9c 	bl	800e9ac <memset>
 8010474:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010478:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801047c:	e7e9      	b.n	8010452 <__sfp+0x42>
 801047e:	bf00      	nop
 8010480:	08013970 	.word	0x08013970
 8010484:	ffff0001 	.word	0xffff0001

08010488 <_fwalk_reent>:
 8010488:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801048c:	4680      	mov	r8, r0
 801048e:	4689      	mov	r9, r1
 8010490:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010494:	2600      	movs	r6, #0
 8010496:	b914      	cbnz	r4, 801049e <_fwalk_reent+0x16>
 8010498:	4630      	mov	r0, r6
 801049a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801049e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80104a2:	3f01      	subs	r7, #1
 80104a4:	d501      	bpl.n	80104aa <_fwalk_reent+0x22>
 80104a6:	6824      	ldr	r4, [r4, #0]
 80104a8:	e7f5      	b.n	8010496 <_fwalk_reent+0xe>
 80104aa:	89ab      	ldrh	r3, [r5, #12]
 80104ac:	2b01      	cmp	r3, #1
 80104ae:	d907      	bls.n	80104c0 <_fwalk_reent+0x38>
 80104b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80104b4:	3301      	adds	r3, #1
 80104b6:	d003      	beq.n	80104c0 <_fwalk_reent+0x38>
 80104b8:	4629      	mov	r1, r5
 80104ba:	4640      	mov	r0, r8
 80104bc:	47c8      	blx	r9
 80104be:	4306      	orrs	r6, r0
 80104c0:	3568      	adds	r5, #104	; 0x68
 80104c2:	e7ee      	b.n	80104a2 <_fwalk_reent+0x1a>

080104c4 <_localeconv_r>:
 80104c4:	4b04      	ldr	r3, [pc, #16]	; (80104d8 <_localeconv_r+0x14>)
 80104c6:	681b      	ldr	r3, [r3, #0]
 80104c8:	6a18      	ldr	r0, [r3, #32]
 80104ca:	4b04      	ldr	r3, [pc, #16]	; (80104dc <_localeconv_r+0x18>)
 80104cc:	2800      	cmp	r0, #0
 80104ce:	bf08      	it	eq
 80104d0:	4618      	moveq	r0, r3
 80104d2:	30f0      	adds	r0, #240	; 0xf0
 80104d4:	4770      	bx	lr
 80104d6:	bf00      	nop
 80104d8:	20001ca4 	.word	0x20001ca4
 80104dc:	20001d08 	.word	0x20001d08

080104e0 <__swhatbuf_r>:
 80104e0:	b570      	push	{r4, r5, r6, lr}
 80104e2:	460e      	mov	r6, r1
 80104e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80104e8:	2900      	cmp	r1, #0
 80104ea:	b096      	sub	sp, #88	; 0x58
 80104ec:	4614      	mov	r4, r2
 80104ee:	461d      	mov	r5, r3
 80104f0:	da07      	bge.n	8010502 <__swhatbuf_r+0x22>
 80104f2:	2300      	movs	r3, #0
 80104f4:	602b      	str	r3, [r5, #0]
 80104f6:	89b3      	ldrh	r3, [r6, #12]
 80104f8:	061a      	lsls	r2, r3, #24
 80104fa:	d410      	bmi.n	801051e <__swhatbuf_r+0x3e>
 80104fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010500:	e00e      	b.n	8010520 <__swhatbuf_r+0x40>
 8010502:	466a      	mov	r2, sp
 8010504:	f000 fdbc 	bl	8011080 <_fstat_r>
 8010508:	2800      	cmp	r0, #0
 801050a:	dbf2      	blt.n	80104f2 <__swhatbuf_r+0x12>
 801050c:	9a01      	ldr	r2, [sp, #4]
 801050e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010512:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010516:	425a      	negs	r2, r3
 8010518:	415a      	adcs	r2, r3
 801051a:	602a      	str	r2, [r5, #0]
 801051c:	e7ee      	b.n	80104fc <__swhatbuf_r+0x1c>
 801051e:	2340      	movs	r3, #64	; 0x40
 8010520:	2000      	movs	r0, #0
 8010522:	6023      	str	r3, [r4, #0]
 8010524:	b016      	add	sp, #88	; 0x58
 8010526:	bd70      	pop	{r4, r5, r6, pc}

08010528 <__smakebuf_r>:
 8010528:	898b      	ldrh	r3, [r1, #12]
 801052a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801052c:	079d      	lsls	r5, r3, #30
 801052e:	4606      	mov	r6, r0
 8010530:	460c      	mov	r4, r1
 8010532:	d507      	bpl.n	8010544 <__smakebuf_r+0x1c>
 8010534:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010538:	6023      	str	r3, [r4, #0]
 801053a:	6123      	str	r3, [r4, #16]
 801053c:	2301      	movs	r3, #1
 801053e:	6163      	str	r3, [r4, #20]
 8010540:	b002      	add	sp, #8
 8010542:	bd70      	pop	{r4, r5, r6, pc}
 8010544:	ab01      	add	r3, sp, #4
 8010546:	466a      	mov	r2, sp
 8010548:	f7ff ffca 	bl	80104e0 <__swhatbuf_r>
 801054c:	9900      	ldr	r1, [sp, #0]
 801054e:	4605      	mov	r5, r0
 8010550:	4630      	mov	r0, r6
 8010552:	f000 fb73 	bl	8010c3c <_malloc_r>
 8010556:	b948      	cbnz	r0, 801056c <__smakebuf_r+0x44>
 8010558:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801055c:	059a      	lsls	r2, r3, #22
 801055e:	d4ef      	bmi.n	8010540 <__smakebuf_r+0x18>
 8010560:	f023 0303 	bic.w	r3, r3, #3
 8010564:	f043 0302 	orr.w	r3, r3, #2
 8010568:	81a3      	strh	r3, [r4, #12]
 801056a:	e7e3      	b.n	8010534 <__smakebuf_r+0xc>
 801056c:	4b0d      	ldr	r3, [pc, #52]	; (80105a4 <__smakebuf_r+0x7c>)
 801056e:	62b3      	str	r3, [r6, #40]	; 0x28
 8010570:	89a3      	ldrh	r3, [r4, #12]
 8010572:	6020      	str	r0, [r4, #0]
 8010574:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010578:	81a3      	strh	r3, [r4, #12]
 801057a:	9b00      	ldr	r3, [sp, #0]
 801057c:	6163      	str	r3, [r4, #20]
 801057e:	9b01      	ldr	r3, [sp, #4]
 8010580:	6120      	str	r0, [r4, #16]
 8010582:	b15b      	cbz	r3, 801059c <__smakebuf_r+0x74>
 8010584:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010588:	4630      	mov	r0, r6
 801058a:	f000 fd8b 	bl	80110a4 <_isatty_r>
 801058e:	b128      	cbz	r0, 801059c <__smakebuf_r+0x74>
 8010590:	89a3      	ldrh	r3, [r4, #12]
 8010592:	f023 0303 	bic.w	r3, r3, #3
 8010596:	f043 0301 	orr.w	r3, r3, #1
 801059a:	81a3      	strh	r3, [r4, #12]
 801059c:	89a3      	ldrh	r3, [r4, #12]
 801059e:	431d      	orrs	r5, r3
 80105a0:	81a5      	strh	r5, [r4, #12]
 80105a2:	e7cd      	b.n	8010540 <__smakebuf_r+0x18>
 80105a4:	08010379 	.word	0x08010379

080105a8 <malloc>:
 80105a8:	4b02      	ldr	r3, [pc, #8]	; (80105b4 <malloc+0xc>)
 80105aa:	4601      	mov	r1, r0
 80105ac:	6818      	ldr	r0, [r3, #0]
 80105ae:	f000 bb45 	b.w	8010c3c <_malloc_r>
 80105b2:	bf00      	nop
 80105b4:	20001ca4 	.word	0x20001ca4

080105b8 <memcpy>:
 80105b8:	b510      	push	{r4, lr}
 80105ba:	1e43      	subs	r3, r0, #1
 80105bc:	440a      	add	r2, r1
 80105be:	4291      	cmp	r1, r2
 80105c0:	d100      	bne.n	80105c4 <memcpy+0xc>
 80105c2:	bd10      	pop	{r4, pc}
 80105c4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80105c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80105cc:	e7f7      	b.n	80105be <memcpy+0x6>

080105ce <_Balloc>:
 80105ce:	b570      	push	{r4, r5, r6, lr}
 80105d0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80105d2:	4604      	mov	r4, r0
 80105d4:	460e      	mov	r6, r1
 80105d6:	b93d      	cbnz	r5, 80105e8 <_Balloc+0x1a>
 80105d8:	2010      	movs	r0, #16
 80105da:	f7ff ffe5 	bl	80105a8 <malloc>
 80105de:	6260      	str	r0, [r4, #36]	; 0x24
 80105e0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80105e4:	6005      	str	r5, [r0, #0]
 80105e6:	60c5      	str	r5, [r0, #12]
 80105e8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80105ea:	68eb      	ldr	r3, [r5, #12]
 80105ec:	b183      	cbz	r3, 8010610 <_Balloc+0x42>
 80105ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80105f0:	68db      	ldr	r3, [r3, #12]
 80105f2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80105f6:	b9b8      	cbnz	r0, 8010628 <_Balloc+0x5a>
 80105f8:	2101      	movs	r1, #1
 80105fa:	fa01 f506 	lsl.w	r5, r1, r6
 80105fe:	1d6a      	adds	r2, r5, #5
 8010600:	0092      	lsls	r2, r2, #2
 8010602:	4620      	mov	r0, r4
 8010604:	f000 fabe 	bl	8010b84 <_calloc_r>
 8010608:	b160      	cbz	r0, 8010624 <_Balloc+0x56>
 801060a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 801060e:	e00e      	b.n	801062e <_Balloc+0x60>
 8010610:	2221      	movs	r2, #33	; 0x21
 8010612:	2104      	movs	r1, #4
 8010614:	4620      	mov	r0, r4
 8010616:	f000 fab5 	bl	8010b84 <_calloc_r>
 801061a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801061c:	60e8      	str	r0, [r5, #12]
 801061e:	68db      	ldr	r3, [r3, #12]
 8010620:	2b00      	cmp	r3, #0
 8010622:	d1e4      	bne.n	80105ee <_Balloc+0x20>
 8010624:	2000      	movs	r0, #0
 8010626:	bd70      	pop	{r4, r5, r6, pc}
 8010628:	6802      	ldr	r2, [r0, #0]
 801062a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 801062e:	2300      	movs	r3, #0
 8010630:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010634:	e7f7      	b.n	8010626 <_Balloc+0x58>

08010636 <_Bfree>:
 8010636:	b570      	push	{r4, r5, r6, lr}
 8010638:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801063a:	4606      	mov	r6, r0
 801063c:	460d      	mov	r5, r1
 801063e:	b93c      	cbnz	r4, 8010650 <_Bfree+0x1a>
 8010640:	2010      	movs	r0, #16
 8010642:	f7ff ffb1 	bl	80105a8 <malloc>
 8010646:	6270      	str	r0, [r6, #36]	; 0x24
 8010648:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801064c:	6004      	str	r4, [r0, #0]
 801064e:	60c4      	str	r4, [r0, #12]
 8010650:	b13d      	cbz	r5, 8010662 <_Bfree+0x2c>
 8010652:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8010654:	686a      	ldr	r2, [r5, #4]
 8010656:	68db      	ldr	r3, [r3, #12]
 8010658:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801065c:	6029      	str	r1, [r5, #0]
 801065e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8010662:	bd70      	pop	{r4, r5, r6, pc}

08010664 <__multadd>:
 8010664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010668:	690d      	ldr	r5, [r1, #16]
 801066a:	461f      	mov	r7, r3
 801066c:	4606      	mov	r6, r0
 801066e:	460c      	mov	r4, r1
 8010670:	f101 0c14 	add.w	ip, r1, #20
 8010674:	2300      	movs	r3, #0
 8010676:	f8dc 0000 	ldr.w	r0, [ip]
 801067a:	b281      	uxth	r1, r0
 801067c:	fb02 7101 	mla	r1, r2, r1, r7
 8010680:	0c0f      	lsrs	r7, r1, #16
 8010682:	0c00      	lsrs	r0, r0, #16
 8010684:	fb02 7000 	mla	r0, r2, r0, r7
 8010688:	b289      	uxth	r1, r1
 801068a:	3301      	adds	r3, #1
 801068c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8010690:	429d      	cmp	r5, r3
 8010692:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8010696:	f84c 1b04 	str.w	r1, [ip], #4
 801069a:	dcec      	bgt.n	8010676 <__multadd+0x12>
 801069c:	b1d7      	cbz	r7, 80106d4 <__multadd+0x70>
 801069e:	68a3      	ldr	r3, [r4, #8]
 80106a0:	42ab      	cmp	r3, r5
 80106a2:	dc12      	bgt.n	80106ca <__multadd+0x66>
 80106a4:	6861      	ldr	r1, [r4, #4]
 80106a6:	4630      	mov	r0, r6
 80106a8:	3101      	adds	r1, #1
 80106aa:	f7ff ff90 	bl	80105ce <_Balloc>
 80106ae:	6922      	ldr	r2, [r4, #16]
 80106b0:	3202      	adds	r2, #2
 80106b2:	f104 010c 	add.w	r1, r4, #12
 80106b6:	4680      	mov	r8, r0
 80106b8:	0092      	lsls	r2, r2, #2
 80106ba:	300c      	adds	r0, #12
 80106bc:	f7ff ff7c 	bl	80105b8 <memcpy>
 80106c0:	4621      	mov	r1, r4
 80106c2:	4630      	mov	r0, r6
 80106c4:	f7ff ffb7 	bl	8010636 <_Bfree>
 80106c8:	4644      	mov	r4, r8
 80106ca:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80106ce:	3501      	adds	r5, #1
 80106d0:	615f      	str	r7, [r3, #20]
 80106d2:	6125      	str	r5, [r4, #16]
 80106d4:	4620      	mov	r0, r4
 80106d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080106da <__hi0bits>:
 80106da:	0c02      	lsrs	r2, r0, #16
 80106dc:	0412      	lsls	r2, r2, #16
 80106de:	4603      	mov	r3, r0
 80106e0:	b9b2      	cbnz	r2, 8010710 <__hi0bits+0x36>
 80106e2:	0403      	lsls	r3, r0, #16
 80106e4:	2010      	movs	r0, #16
 80106e6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80106ea:	bf04      	itt	eq
 80106ec:	021b      	lsleq	r3, r3, #8
 80106ee:	3008      	addeq	r0, #8
 80106f0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80106f4:	bf04      	itt	eq
 80106f6:	011b      	lsleq	r3, r3, #4
 80106f8:	3004      	addeq	r0, #4
 80106fa:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80106fe:	bf04      	itt	eq
 8010700:	009b      	lsleq	r3, r3, #2
 8010702:	3002      	addeq	r0, #2
 8010704:	2b00      	cmp	r3, #0
 8010706:	db06      	blt.n	8010716 <__hi0bits+0x3c>
 8010708:	005b      	lsls	r3, r3, #1
 801070a:	d503      	bpl.n	8010714 <__hi0bits+0x3a>
 801070c:	3001      	adds	r0, #1
 801070e:	4770      	bx	lr
 8010710:	2000      	movs	r0, #0
 8010712:	e7e8      	b.n	80106e6 <__hi0bits+0xc>
 8010714:	2020      	movs	r0, #32
 8010716:	4770      	bx	lr

08010718 <__lo0bits>:
 8010718:	6803      	ldr	r3, [r0, #0]
 801071a:	f013 0207 	ands.w	r2, r3, #7
 801071e:	4601      	mov	r1, r0
 8010720:	d00b      	beq.n	801073a <__lo0bits+0x22>
 8010722:	07da      	lsls	r2, r3, #31
 8010724:	d423      	bmi.n	801076e <__lo0bits+0x56>
 8010726:	0798      	lsls	r0, r3, #30
 8010728:	bf49      	itett	mi
 801072a:	085b      	lsrmi	r3, r3, #1
 801072c:	089b      	lsrpl	r3, r3, #2
 801072e:	2001      	movmi	r0, #1
 8010730:	600b      	strmi	r3, [r1, #0]
 8010732:	bf5c      	itt	pl
 8010734:	600b      	strpl	r3, [r1, #0]
 8010736:	2002      	movpl	r0, #2
 8010738:	4770      	bx	lr
 801073a:	b298      	uxth	r0, r3
 801073c:	b9a8      	cbnz	r0, 801076a <__lo0bits+0x52>
 801073e:	0c1b      	lsrs	r3, r3, #16
 8010740:	2010      	movs	r0, #16
 8010742:	f013 0fff 	tst.w	r3, #255	; 0xff
 8010746:	bf04      	itt	eq
 8010748:	0a1b      	lsreq	r3, r3, #8
 801074a:	3008      	addeq	r0, #8
 801074c:	071a      	lsls	r2, r3, #28
 801074e:	bf04      	itt	eq
 8010750:	091b      	lsreq	r3, r3, #4
 8010752:	3004      	addeq	r0, #4
 8010754:	079a      	lsls	r2, r3, #30
 8010756:	bf04      	itt	eq
 8010758:	089b      	lsreq	r3, r3, #2
 801075a:	3002      	addeq	r0, #2
 801075c:	07da      	lsls	r2, r3, #31
 801075e:	d402      	bmi.n	8010766 <__lo0bits+0x4e>
 8010760:	085b      	lsrs	r3, r3, #1
 8010762:	d006      	beq.n	8010772 <__lo0bits+0x5a>
 8010764:	3001      	adds	r0, #1
 8010766:	600b      	str	r3, [r1, #0]
 8010768:	4770      	bx	lr
 801076a:	4610      	mov	r0, r2
 801076c:	e7e9      	b.n	8010742 <__lo0bits+0x2a>
 801076e:	2000      	movs	r0, #0
 8010770:	4770      	bx	lr
 8010772:	2020      	movs	r0, #32
 8010774:	4770      	bx	lr

08010776 <__i2b>:
 8010776:	b510      	push	{r4, lr}
 8010778:	460c      	mov	r4, r1
 801077a:	2101      	movs	r1, #1
 801077c:	f7ff ff27 	bl	80105ce <_Balloc>
 8010780:	2201      	movs	r2, #1
 8010782:	6144      	str	r4, [r0, #20]
 8010784:	6102      	str	r2, [r0, #16]
 8010786:	bd10      	pop	{r4, pc}

08010788 <__multiply>:
 8010788:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801078c:	4614      	mov	r4, r2
 801078e:	690a      	ldr	r2, [r1, #16]
 8010790:	6923      	ldr	r3, [r4, #16]
 8010792:	429a      	cmp	r2, r3
 8010794:	bfb8      	it	lt
 8010796:	460b      	movlt	r3, r1
 8010798:	4688      	mov	r8, r1
 801079a:	bfbc      	itt	lt
 801079c:	46a0      	movlt	r8, r4
 801079e:	461c      	movlt	r4, r3
 80107a0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80107a4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80107a8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80107ac:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80107b0:	eb07 0609 	add.w	r6, r7, r9
 80107b4:	42b3      	cmp	r3, r6
 80107b6:	bfb8      	it	lt
 80107b8:	3101      	addlt	r1, #1
 80107ba:	f7ff ff08 	bl	80105ce <_Balloc>
 80107be:	f100 0514 	add.w	r5, r0, #20
 80107c2:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80107c6:	462b      	mov	r3, r5
 80107c8:	2200      	movs	r2, #0
 80107ca:	4573      	cmp	r3, lr
 80107cc:	d316      	bcc.n	80107fc <__multiply+0x74>
 80107ce:	f104 0214 	add.w	r2, r4, #20
 80107d2:	f108 0114 	add.w	r1, r8, #20
 80107d6:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80107da:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80107de:	9300      	str	r3, [sp, #0]
 80107e0:	9b00      	ldr	r3, [sp, #0]
 80107e2:	9201      	str	r2, [sp, #4]
 80107e4:	4293      	cmp	r3, r2
 80107e6:	d80c      	bhi.n	8010802 <__multiply+0x7a>
 80107e8:	2e00      	cmp	r6, #0
 80107ea:	dd03      	ble.n	80107f4 <__multiply+0x6c>
 80107ec:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d05d      	beq.n	80108b0 <__multiply+0x128>
 80107f4:	6106      	str	r6, [r0, #16]
 80107f6:	b003      	add	sp, #12
 80107f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107fc:	f843 2b04 	str.w	r2, [r3], #4
 8010800:	e7e3      	b.n	80107ca <__multiply+0x42>
 8010802:	f8b2 b000 	ldrh.w	fp, [r2]
 8010806:	f1bb 0f00 	cmp.w	fp, #0
 801080a:	d023      	beq.n	8010854 <__multiply+0xcc>
 801080c:	4689      	mov	r9, r1
 801080e:	46ac      	mov	ip, r5
 8010810:	f04f 0800 	mov.w	r8, #0
 8010814:	f859 4b04 	ldr.w	r4, [r9], #4
 8010818:	f8dc a000 	ldr.w	sl, [ip]
 801081c:	b2a3      	uxth	r3, r4
 801081e:	fa1f fa8a 	uxth.w	sl, sl
 8010822:	fb0b a303 	mla	r3, fp, r3, sl
 8010826:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801082a:	f8dc 4000 	ldr.w	r4, [ip]
 801082e:	4443      	add	r3, r8
 8010830:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8010834:	fb0b 840a 	mla	r4, fp, sl, r8
 8010838:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 801083c:	46e2      	mov	sl, ip
 801083e:	b29b      	uxth	r3, r3
 8010840:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8010844:	454f      	cmp	r7, r9
 8010846:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801084a:	f84a 3b04 	str.w	r3, [sl], #4
 801084e:	d82b      	bhi.n	80108a8 <__multiply+0x120>
 8010850:	f8cc 8004 	str.w	r8, [ip, #4]
 8010854:	9b01      	ldr	r3, [sp, #4]
 8010856:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 801085a:	3204      	adds	r2, #4
 801085c:	f1ba 0f00 	cmp.w	sl, #0
 8010860:	d020      	beq.n	80108a4 <__multiply+0x11c>
 8010862:	682b      	ldr	r3, [r5, #0]
 8010864:	4689      	mov	r9, r1
 8010866:	46a8      	mov	r8, r5
 8010868:	f04f 0b00 	mov.w	fp, #0
 801086c:	f8b9 c000 	ldrh.w	ip, [r9]
 8010870:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8010874:	fb0a 440c 	mla	r4, sl, ip, r4
 8010878:	445c      	add	r4, fp
 801087a:	46c4      	mov	ip, r8
 801087c:	b29b      	uxth	r3, r3
 801087e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8010882:	f84c 3b04 	str.w	r3, [ip], #4
 8010886:	f859 3b04 	ldr.w	r3, [r9], #4
 801088a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 801088e:	0c1b      	lsrs	r3, r3, #16
 8010890:	fb0a b303 	mla	r3, sl, r3, fp
 8010894:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8010898:	454f      	cmp	r7, r9
 801089a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 801089e:	d805      	bhi.n	80108ac <__multiply+0x124>
 80108a0:	f8c8 3004 	str.w	r3, [r8, #4]
 80108a4:	3504      	adds	r5, #4
 80108a6:	e79b      	b.n	80107e0 <__multiply+0x58>
 80108a8:	46d4      	mov	ip, sl
 80108aa:	e7b3      	b.n	8010814 <__multiply+0x8c>
 80108ac:	46e0      	mov	r8, ip
 80108ae:	e7dd      	b.n	801086c <__multiply+0xe4>
 80108b0:	3e01      	subs	r6, #1
 80108b2:	e799      	b.n	80107e8 <__multiply+0x60>

080108b4 <__pow5mult>:
 80108b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80108b8:	4615      	mov	r5, r2
 80108ba:	f012 0203 	ands.w	r2, r2, #3
 80108be:	4606      	mov	r6, r0
 80108c0:	460f      	mov	r7, r1
 80108c2:	d007      	beq.n	80108d4 <__pow5mult+0x20>
 80108c4:	3a01      	subs	r2, #1
 80108c6:	4c21      	ldr	r4, [pc, #132]	; (801094c <__pow5mult+0x98>)
 80108c8:	2300      	movs	r3, #0
 80108ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80108ce:	f7ff fec9 	bl	8010664 <__multadd>
 80108d2:	4607      	mov	r7, r0
 80108d4:	10ad      	asrs	r5, r5, #2
 80108d6:	d035      	beq.n	8010944 <__pow5mult+0x90>
 80108d8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80108da:	b93c      	cbnz	r4, 80108ec <__pow5mult+0x38>
 80108dc:	2010      	movs	r0, #16
 80108de:	f7ff fe63 	bl	80105a8 <malloc>
 80108e2:	6270      	str	r0, [r6, #36]	; 0x24
 80108e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80108e8:	6004      	str	r4, [r0, #0]
 80108ea:	60c4      	str	r4, [r0, #12]
 80108ec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80108f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80108f4:	b94c      	cbnz	r4, 801090a <__pow5mult+0x56>
 80108f6:	f240 2171 	movw	r1, #625	; 0x271
 80108fa:	4630      	mov	r0, r6
 80108fc:	f7ff ff3b 	bl	8010776 <__i2b>
 8010900:	2300      	movs	r3, #0
 8010902:	f8c8 0008 	str.w	r0, [r8, #8]
 8010906:	4604      	mov	r4, r0
 8010908:	6003      	str	r3, [r0, #0]
 801090a:	f04f 0800 	mov.w	r8, #0
 801090e:	07eb      	lsls	r3, r5, #31
 8010910:	d50a      	bpl.n	8010928 <__pow5mult+0x74>
 8010912:	4639      	mov	r1, r7
 8010914:	4622      	mov	r2, r4
 8010916:	4630      	mov	r0, r6
 8010918:	f7ff ff36 	bl	8010788 <__multiply>
 801091c:	4639      	mov	r1, r7
 801091e:	4681      	mov	r9, r0
 8010920:	4630      	mov	r0, r6
 8010922:	f7ff fe88 	bl	8010636 <_Bfree>
 8010926:	464f      	mov	r7, r9
 8010928:	106d      	asrs	r5, r5, #1
 801092a:	d00b      	beq.n	8010944 <__pow5mult+0x90>
 801092c:	6820      	ldr	r0, [r4, #0]
 801092e:	b938      	cbnz	r0, 8010940 <__pow5mult+0x8c>
 8010930:	4622      	mov	r2, r4
 8010932:	4621      	mov	r1, r4
 8010934:	4630      	mov	r0, r6
 8010936:	f7ff ff27 	bl	8010788 <__multiply>
 801093a:	6020      	str	r0, [r4, #0]
 801093c:	f8c0 8000 	str.w	r8, [r0]
 8010940:	4604      	mov	r4, r0
 8010942:	e7e4      	b.n	801090e <__pow5mult+0x5a>
 8010944:	4638      	mov	r0, r7
 8010946:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801094a:	bf00      	nop
 801094c:	08013b08 	.word	0x08013b08

08010950 <__lshift>:
 8010950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010954:	460c      	mov	r4, r1
 8010956:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801095a:	6923      	ldr	r3, [r4, #16]
 801095c:	6849      	ldr	r1, [r1, #4]
 801095e:	eb0a 0903 	add.w	r9, sl, r3
 8010962:	68a3      	ldr	r3, [r4, #8]
 8010964:	4607      	mov	r7, r0
 8010966:	4616      	mov	r6, r2
 8010968:	f109 0501 	add.w	r5, r9, #1
 801096c:	42ab      	cmp	r3, r5
 801096e:	db32      	blt.n	80109d6 <__lshift+0x86>
 8010970:	4638      	mov	r0, r7
 8010972:	f7ff fe2c 	bl	80105ce <_Balloc>
 8010976:	2300      	movs	r3, #0
 8010978:	4680      	mov	r8, r0
 801097a:	f100 0114 	add.w	r1, r0, #20
 801097e:	461a      	mov	r2, r3
 8010980:	4553      	cmp	r3, sl
 8010982:	db2b      	blt.n	80109dc <__lshift+0x8c>
 8010984:	6920      	ldr	r0, [r4, #16]
 8010986:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801098a:	f104 0314 	add.w	r3, r4, #20
 801098e:	f016 021f 	ands.w	r2, r6, #31
 8010992:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010996:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801099a:	d025      	beq.n	80109e8 <__lshift+0x98>
 801099c:	f1c2 0e20 	rsb	lr, r2, #32
 80109a0:	2000      	movs	r0, #0
 80109a2:	681e      	ldr	r6, [r3, #0]
 80109a4:	468a      	mov	sl, r1
 80109a6:	4096      	lsls	r6, r2
 80109a8:	4330      	orrs	r0, r6
 80109aa:	f84a 0b04 	str.w	r0, [sl], #4
 80109ae:	f853 0b04 	ldr.w	r0, [r3], #4
 80109b2:	459c      	cmp	ip, r3
 80109b4:	fa20 f00e 	lsr.w	r0, r0, lr
 80109b8:	d814      	bhi.n	80109e4 <__lshift+0x94>
 80109ba:	6048      	str	r0, [r1, #4]
 80109bc:	b108      	cbz	r0, 80109c2 <__lshift+0x72>
 80109be:	f109 0502 	add.w	r5, r9, #2
 80109c2:	3d01      	subs	r5, #1
 80109c4:	4638      	mov	r0, r7
 80109c6:	f8c8 5010 	str.w	r5, [r8, #16]
 80109ca:	4621      	mov	r1, r4
 80109cc:	f7ff fe33 	bl	8010636 <_Bfree>
 80109d0:	4640      	mov	r0, r8
 80109d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80109d6:	3101      	adds	r1, #1
 80109d8:	005b      	lsls	r3, r3, #1
 80109da:	e7c7      	b.n	801096c <__lshift+0x1c>
 80109dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80109e0:	3301      	adds	r3, #1
 80109e2:	e7cd      	b.n	8010980 <__lshift+0x30>
 80109e4:	4651      	mov	r1, sl
 80109e6:	e7dc      	b.n	80109a2 <__lshift+0x52>
 80109e8:	3904      	subs	r1, #4
 80109ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80109ee:	f841 2f04 	str.w	r2, [r1, #4]!
 80109f2:	459c      	cmp	ip, r3
 80109f4:	d8f9      	bhi.n	80109ea <__lshift+0x9a>
 80109f6:	e7e4      	b.n	80109c2 <__lshift+0x72>

080109f8 <__mcmp>:
 80109f8:	6903      	ldr	r3, [r0, #16]
 80109fa:	690a      	ldr	r2, [r1, #16]
 80109fc:	1a9b      	subs	r3, r3, r2
 80109fe:	b530      	push	{r4, r5, lr}
 8010a00:	d10c      	bne.n	8010a1c <__mcmp+0x24>
 8010a02:	0092      	lsls	r2, r2, #2
 8010a04:	3014      	adds	r0, #20
 8010a06:	3114      	adds	r1, #20
 8010a08:	1884      	adds	r4, r0, r2
 8010a0a:	4411      	add	r1, r2
 8010a0c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010a10:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010a14:	4295      	cmp	r5, r2
 8010a16:	d003      	beq.n	8010a20 <__mcmp+0x28>
 8010a18:	d305      	bcc.n	8010a26 <__mcmp+0x2e>
 8010a1a:	2301      	movs	r3, #1
 8010a1c:	4618      	mov	r0, r3
 8010a1e:	bd30      	pop	{r4, r5, pc}
 8010a20:	42a0      	cmp	r0, r4
 8010a22:	d3f3      	bcc.n	8010a0c <__mcmp+0x14>
 8010a24:	e7fa      	b.n	8010a1c <__mcmp+0x24>
 8010a26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010a2a:	e7f7      	b.n	8010a1c <__mcmp+0x24>

08010a2c <__mdiff>:
 8010a2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010a30:	460d      	mov	r5, r1
 8010a32:	4607      	mov	r7, r0
 8010a34:	4611      	mov	r1, r2
 8010a36:	4628      	mov	r0, r5
 8010a38:	4614      	mov	r4, r2
 8010a3a:	f7ff ffdd 	bl	80109f8 <__mcmp>
 8010a3e:	1e06      	subs	r6, r0, #0
 8010a40:	d108      	bne.n	8010a54 <__mdiff+0x28>
 8010a42:	4631      	mov	r1, r6
 8010a44:	4638      	mov	r0, r7
 8010a46:	f7ff fdc2 	bl	80105ce <_Balloc>
 8010a4a:	2301      	movs	r3, #1
 8010a4c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8010a50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a54:	bfa4      	itt	ge
 8010a56:	4623      	movge	r3, r4
 8010a58:	462c      	movge	r4, r5
 8010a5a:	4638      	mov	r0, r7
 8010a5c:	6861      	ldr	r1, [r4, #4]
 8010a5e:	bfa6      	itte	ge
 8010a60:	461d      	movge	r5, r3
 8010a62:	2600      	movge	r6, #0
 8010a64:	2601      	movlt	r6, #1
 8010a66:	f7ff fdb2 	bl	80105ce <_Balloc>
 8010a6a:	692b      	ldr	r3, [r5, #16]
 8010a6c:	60c6      	str	r6, [r0, #12]
 8010a6e:	6926      	ldr	r6, [r4, #16]
 8010a70:	f105 0914 	add.w	r9, r5, #20
 8010a74:	f104 0214 	add.w	r2, r4, #20
 8010a78:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8010a7c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8010a80:	f100 0514 	add.w	r5, r0, #20
 8010a84:	f04f 0e00 	mov.w	lr, #0
 8010a88:	f852 ab04 	ldr.w	sl, [r2], #4
 8010a8c:	f859 4b04 	ldr.w	r4, [r9], #4
 8010a90:	fa1e f18a 	uxtah	r1, lr, sl
 8010a94:	b2a3      	uxth	r3, r4
 8010a96:	1ac9      	subs	r1, r1, r3
 8010a98:	0c23      	lsrs	r3, r4, #16
 8010a9a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8010a9e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8010aa2:	b289      	uxth	r1, r1
 8010aa4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8010aa8:	45c8      	cmp	r8, r9
 8010aaa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8010aae:	4694      	mov	ip, r2
 8010ab0:	f845 3b04 	str.w	r3, [r5], #4
 8010ab4:	d8e8      	bhi.n	8010a88 <__mdiff+0x5c>
 8010ab6:	45bc      	cmp	ip, r7
 8010ab8:	d304      	bcc.n	8010ac4 <__mdiff+0x98>
 8010aba:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8010abe:	b183      	cbz	r3, 8010ae2 <__mdiff+0xb6>
 8010ac0:	6106      	str	r6, [r0, #16]
 8010ac2:	e7c5      	b.n	8010a50 <__mdiff+0x24>
 8010ac4:	f85c 1b04 	ldr.w	r1, [ip], #4
 8010ac8:	fa1e f381 	uxtah	r3, lr, r1
 8010acc:	141a      	asrs	r2, r3, #16
 8010ace:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010ad2:	b29b      	uxth	r3, r3
 8010ad4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010ad8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8010adc:	f845 3b04 	str.w	r3, [r5], #4
 8010ae0:	e7e9      	b.n	8010ab6 <__mdiff+0x8a>
 8010ae2:	3e01      	subs	r6, #1
 8010ae4:	e7e9      	b.n	8010aba <__mdiff+0x8e>

08010ae6 <__d2b>:
 8010ae6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010aea:	460e      	mov	r6, r1
 8010aec:	2101      	movs	r1, #1
 8010aee:	ec59 8b10 	vmov	r8, r9, d0
 8010af2:	4615      	mov	r5, r2
 8010af4:	f7ff fd6b 	bl	80105ce <_Balloc>
 8010af8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8010afc:	4607      	mov	r7, r0
 8010afe:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010b02:	bb34      	cbnz	r4, 8010b52 <__d2b+0x6c>
 8010b04:	9301      	str	r3, [sp, #4]
 8010b06:	f1b8 0300 	subs.w	r3, r8, #0
 8010b0a:	d027      	beq.n	8010b5c <__d2b+0x76>
 8010b0c:	a802      	add	r0, sp, #8
 8010b0e:	f840 3d08 	str.w	r3, [r0, #-8]!
 8010b12:	f7ff fe01 	bl	8010718 <__lo0bits>
 8010b16:	9900      	ldr	r1, [sp, #0]
 8010b18:	b1f0      	cbz	r0, 8010b58 <__d2b+0x72>
 8010b1a:	9a01      	ldr	r2, [sp, #4]
 8010b1c:	f1c0 0320 	rsb	r3, r0, #32
 8010b20:	fa02 f303 	lsl.w	r3, r2, r3
 8010b24:	430b      	orrs	r3, r1
 8010b26:	40c2      	lsrs	r2, r0
 8010b28:	617b      	str	r3, [r7, #20]
 8010b2a:	9201      	str	r2, [sp, #4]
 8010b2c:	9b01      	ldr	r3, [sp, #4]
 8010b2e:	61bb      	str	r3, [r7, #24]
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	bf14      	ite	ne
 8010b34:	2102      	movne	r1, #2
 8010b36:	2101      	moveq	r1, #1
 8010b38:	6139      	str	r1, [r7, #16]
 8010b3a:	b1c4      	cbz	r4, 8010b6e <__d2b+0x88>
 8010b3c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8010b40:	4404      	add	r4, r0
 8010b42:	6034      	str	r4, [r6, #0]
 8010b44:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010b48:	6028      	str	r0, [r5, #0]
 8010b4a:	4638      	mov	r0, r7
 8010b4c:	b003      	add	sp, #12
 8010b4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010b52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010b56:	e7d5      	b.n	8010b04 <__d2b+0x1e>
 8010b58:	6179      	str	r1, [r7, #20]
 8010b5a:	e7e7      	b.n	8010b2c <__d2b+0x46>
 8010b5c:	a801      	add	r0, sp, #4
 8010b5e:	f7ff fddb 	bl	8010718 <__lo0bits>
 8010b62:	9b01      	ldr	r3, [sp, #4]
 8010b64:	617b      	str	r3, [r7, #20]
 8010b66:	2101      	movs	r1, #1
 8010b68:	6139      	str	r1, [r7, #16]
 8010b6a:	3020      	adds	r0, #32
 8010b6c:	e7e5      	b.n	8010b3a <__d2b+0x54>
 8010b6e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8010b72:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010b76:	6030      	str	r0, [r6, #0]
 8010b78:	6918      	ldr	r0, [r3, #16]
 8010b7a:	f7ff fdae 	bl	80106da <__hi0bits>
 8010b7e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8010b82:	e7e1      	b.n	8010b48 <__d2b+0x62>

08010b84 <_calloc_r>:
 8010b84:	b538      	push	{r3, r4, r5, lr}
 8010b86:	fb02 f401 	mul.w	r4, r2, r1
 8010b8a:	4621      	mov	r1, r4
 8010b8c:	f000 f856 	bl	8010c3c <_malloc_r>
 8010b90:	4605      	mov	r5, r0
 8010b92:	b118      	cbz	r0, 8010b9c <_calloc_r+0x18>
 8010b94:	4622      	mov	r2, r4
 8010b96:	2100      	movs	r1, #0
 8010b98:	f7fd ff08 	bl	800e9ac <memset>
 8010b9c:	4628      	mov	r0, r5
 8010b9e:	bd38      	pop	{r3, r4, r5, pc}

08010ba0 <_free_r>:
 8010ba0:	b538      	push	{r3, r4, r5, lr}
 8010ba2:	4605      	mov	r5, r0
 8010ba4:	2900      	cmp	r1, #0
 8010ba6:	d045      	beq.n	8010c34 <_free_r+0x94>
 8010ba8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010bac:	1f0c      	subs	r4, r1, #4
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	bfb8      	it	lt
 8010bb2:	18e4      	addlt	r4, r4, r3
 8010bb4:	f000 fac3 	bl	801113e <__malloc_lock>
 8010bb8:	4a1f      	ldr	r2, [pc, #124]	; (8010c38 <_free_r+0x98>)
 8010bba:	6813      	ldr	r3, [r2, #0]
 8010bbc:	4610      	mov	r0, r2
 8010bbe:	b933      	cbnz	r3, 8010bce <_free_r+0x2e>
 8010bc0:	6063      	str	r3, [r4, #4]
 8010bc2:	6014      	str	r4, [r2, #0]
 8010bc4:	4628      	mov	r0, r5
 8010bc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010bca:	f000 bab9 	b.w	8011140 <__malloc_unlock>
 8010bce:	42a3      	cmp	r3, r4
 8010bd0:	d90c      	bls.n	8010bec <_free_r+0x4c>
 8010bd2:	6821      	ldr	r1, [r4, #0]
 8010bd4:	1862      	adds	r2, r4, r1
 8010bd6:	4293      	cmp	r3, r2
 8010bd8:	bf04      	itt	eq
 8010bda:	681a      	ldreq	r2, [r3, #0]
 8010bdc:	685b      	ldreq	r3, [r3, #4]
 8010bde:	6063      	str	r3, [r4, #4]
 8010be0:	bf04      	itt	eq
 8010be2:	1852      	addeq	r2, r2, r1
 8010be4:	6022      	streq	r2, [r4, #0]
 8010be6:	6004      	str	r4, [r0, #0]
 8010be8:	e7ec      	b.n	8010bc4 <_free_r+0x24>
 8010bea:	4613      	mov	r3, r2
 8010bec:	685a      	ldr	r2, [r3, #4]
 8010bee:	b10a      	cbz	r2, 8010bf4 <_free_r+0x54>
 8010bf0:	42a2      	cmp	r2, r4
 8010bf2:	d9fa      	bls.n	8010bea <_free_r+0x4a>
 8010bf4:	6819      	ldr	r1, [r3, #0]
 8010bf6:	1858      	adds	r0, r3, r1
 8010bf8:	42a0      	cmp	r0, r4
 8010bfa:	d10b      	bne.n	8010c14 <_free_r+0x74>
 8010bfc:	6820      	ldr	r0, [r4, #0]
 8010bfe:	4401      	add	r1, r0
 8010c00:	1858      	adds	r0, r3, r1
 8010c02:	4282      	cmp	r2, r0
 8010c04:	6019      	str	r1, [r3, #0]
 8010c06:	d1dd      	bne.n	8010bc4 <_free_r+0x24>
 8010c08:	6810      	ldr	r0, [r2, #0]
 8010c0a:	6852      	ldr	r2, [r2, #4]
 8010c0c:	605a      	str	r2, [r3, #4]
 8010c0e:	4401      	add	r1, r0
 8010c10:	6019      	str	r1, [r3, #0]
 8010c12:	e7d7      	b.n	8010bc4 <_free_r+0x24>
 8010c14:	d902      	bls.n	8010c1c <_free_r+0x7c>
 8010c16:	230c      	movs	r3, #12
 8010c18:	602b      	str	r3, [r5, #0]
 8010c1a:	e7d3      	b.n	8010bc4 <_free_r+0x24>
 8010c1c:	6820      	ldr	r0, [r4, #0]
 8010c1e:	1821      	adds	r1, r4, r0
 8010c20:	428a      	cmp	r2, r1
 8010c22:	bf04      	itt	eq
 8010c24:	6811      	ldreq	r1, [r2, #0]
 8010c26:	6852      	ldreq	r2, [r2, #4]
 8010c28:	6062      	str	r2, [r4, #4]
 8010c2a:	bf04      	itt	eq
 8010c2c:	1809      	addeq	r1, r1, r0
 8010c2e:	6021      	streq	r1, [r4, #0]
 8010c30:	605c      	str	r4, [r3, #4]
 8010c32:	e7c7      	b.n	8010bc4 <_free_r+0x24>
 8010c34:	bd38      	pop	{r3, r4, r5, pc}
 8010c36:	bf00      	nop
 8010c38:	20001ed8 	.word	0x20001ed8

08010c3c <_malloc_r>:
 8010c3c:	b570      	push	{r4, r5, r6, lr}
 8010c3e:	1ccd      	adds	r5, r1, #3
 8010c40:	f025 0503 	bic.w	r5, r5, #3
 8010c44:	3508      	adds	r5, #8
 8010c46:	2d0c      	cmp	r5, #12
 8010c48:	bf38      	it	cc
 8010c4a:	250c      	movcc	r5, #12
 8010c4c:	2d00      	cmp	r5, #0
 8010c4e:	4606      	mov	r6, r0
 8010c50:	db01      	blt.n	8010c56 <_malloc_r+0x1a>
 8010c52:	42a9      	cmp	r1, r5
 8010c54:	d903      	bls.n	8010c5e <_malloc_r+0x22>
 8010c56:	230c      	movs	r3, #12
 8010c58:	6033      	str	r3, [r6, #0]
 8010c5a:	2000      	movs	r0, #0
 8010c5c:	bd70      	pop	{r4, r5, r6, pc}
 8010c5e:	f000 fa6e 	bl	801113e <__malloc_lock>
 8010c62:	4a21      	ldr	r2, [pc, #132]	; (8010ce8 <_malloc_r+0xac>)
 8010c64:	6814      	ldr	r4, [r2, #0]
 8010c66:	4621      	mov	r1, r4
 8010c68:	b991      	cbnz	r1, 8010c90 <_malloc_r+0x54>
 8010c6a:	4c20      	ldr	r4, [pc, #128]	; (8010cec <_malloc_r+0xb0>)
 8010c6c:	6823      	ldr	r3, [r4, #0]
 8010c6e:	b91b      	cbnz	r3, 8010c78 <_malloc_r+0x3c>
 8010c70:	4630      	mov	r0, r6
 8010c72:	f000 f98f 	bl	8010f94 <_sbrk_r>
 8010c76:	6020      	str	r0, [r4, #0]
 8010c78:	4629      	mov	r1, r5
 8010c7a:	4630      	mov	r0, r6
 8010c7c:	f000 f98a 	bl	8010f94 <_sbrk_r>
 8010c80:	1c43      	adds	r3, r0, #1
 8010c82:	d124      	bne.n	8010cce <_malloc_r+0x92>
 8010c84:	230c      	movs	r3, #12
 8010c86:	6033      	str	r3, [r6, #0]
 8010c88:	4630      	mov	r0, r6
 8010c8a:	f000 fa59 	bl	8011140 <__malloc_unlock>
 8010c8e:	e7e4      	b.n	8010c5a <_malloc_r+0x1e>
 8010c90:	680b      	ldr	r3, [r1, #0]
 8010c92:	1b5b      	subs	r3, r3, r5
 8010c94:	d418      	bmi.n	8010cc8 <_malloc_r+0x8c>
 8010c96:	2b0b      	cmp	r3, #11
 8010c98:	d90f      	bls.n	8010cba <_malloc_r+0x7e>
 8010c9a:	600b      	str	r3, [r1, #0]
 8010c9c:	50cd      	str	r5, [r1, r3]
 8010c9e:	18cc      	adds	r4, r1, r3
 8010ca0:	4630      	mov	r0, r6
 8010ca2:	f000 fa4d 	bl	8011140 <__malloc_unlock>
 8010ca6:	f104 000b 	add.w	r0, r4, #11
 8010caa:	1d23      	adds	r3, r4, #4
 8010cac:	f020 0007 	bic.w	r0, r0, #7
 8010cb0:	1ac3      	subs	r3, r0, r3
 8010cb2:	d0d3      	beq.n	8010c5c <_malloc_r+0x20>
 8010cb4:	425a      	negs	r2, r3
 8010cb6:	50e2      	str	r2, [r4, r3]
 8010cb8:	e7d0      	b.n	8010c5c <_malloc_r+0x20>
 8010cba:	428c      	cmp	r4, r1
 8010cbc:	684b      	ldr	r3, [r1, #4]
 8010cbe:	bf16      	itet	ne
 8010cc0:	6063      	strne	r3, [r4, #4]
 8010cc2:	6013      	streq	r3, [r2, #0]
 8010cc4:	460c      	movne	r4, r1
 8010cc6:	e7eb      	b.n	8010ca0 <_malloc_r+0x64>
 8010cc8:	460c      	mov	r4, r1
 8010cca:	6849      	ldr	r1, [r1, #4]
 8010ccc:	e7cc      	b.n	8010c68 <_malloc_r+0x2c>
 8010cce:	1cc4      	adds	r4, r0, #3
 8010cd0:	f024 0403 	bic.w	r4, r4, #3
 8010cd4:	42a0      	cmp	r0, r4
 8010cd6:	d005      	beq.n	8010ce4 <_malloc_r+0xa8>
 8010cd8:	1a21      	subs	r1, r4, r0
 8010cda:	4630      	mov	r0, r6
 8010cdc:	f000 f95a 	bl	8010f94 <_sbrk_r>
 8010ce0:	3001      	adds	r0, #1
 8010ce2:	d0cf      	beq.n	8010c84 <_malloc_r+0x48>
 8010ce4:	6025      	str	r5, [r4, #0]
 8010ce6:	e7db      	b.n	8010ca0 <_malloc_r+0x64>
 8010ce8:	20001ed8 	.word	0x20001ed8
 8010cec:	20001edc 	.word	0x20001edc

08010cf0 <__ssputs_r>:
 8010cf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010cf4:	688e      	ldr	r6, [r1, #8]
 8010cf6:	429e      	cmp	r6, r3
 8010cf8:	4682      	mov	sl, r0
 8010cfa:	460c      	mov	r4, r1
 8010cfc:	4690      	mov	r8, r2
 8010cfe:	4699      	mov	r9, r3
 8010d00:	d837      	bhi.n	8010d72 <__ssputs_r+0x82>
 8010d02:	898a      	ldrh	r2, [r1, #12]
 8010d04:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010d08:	d031      	beq.n	8010d6e <__ssputs_r+0x7e>
 8010d0a:	6825      	ldr	r5, [r4, #0]
 8010d0c:	6909      	ldr	r1, [r1, #16]
 8010d0e:	1a6f      	subs	r7, r5, r1
 8010d10:	6965      	ldr	r5, [r4, #20]
 8010d12:	2302      	movs	r3, #2
 8010d14:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010d18:	fb95 f5f3 	sdiv	r5, r5, r3
 8010d1c:	f109 0301 	add.w	r3, r9, #1
 8010d20:	443b      	add	r3, r7
 8010d22:	429d      	cmp	r5, r3
 8010d24:	bf38      	it	cc
 8010d26:	461d      	movcc	r5, r3
 8010d28:	0553      	lsls	r3, r2, #21
 8010d2a:	d530      	bpl.n	8010d8e <__ssputs_r+0x9e>
 8010d2c:	4629      	mov	r1, r5
 8010d2e:	f7ff ff85 	bl	8010c3c <_malloc_r>
 8010d32:	4606      	mov	r6, r0
 8010d34:	b950      	cbnz	r0, 8010d4c <__ssputs_r+0x5c>
 8010d36:	230c      	movs	r3, #12
 8010d38:	f8ca 3000 	str.w	r3, [sl]
 8010d3c:	89a3      	ldrh	r3, [r4, #12]
 8010d3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010d42:	81a3      	strh	r3, [r4, #12]
 8010d44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010d48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d4c:	463a      	mov	r2, r7
 8010d4e:	6921      	ldr	r1, [r4, #16]
 8010d50:	f7ff fc32 	bl	80105b8 <memcpy>
 8010d54:	89a3      	ldrh	r3, [r4, #12]
 8010d56:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010d5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010d5e:	81a3      	strh	r3, [r4, #12]
 8010d60:	6126      	str	r6, [r4, #16]
 8010d62:	6165      	str	r5, [r4, #20]
 8010d64:	443e      	add	r6, r7
 8010d66:	1bed      	subs	r5, r5, r7
 8010d68:	6026      	str	r6, [r4, #0]
 8010d6a:	60a5      	str	r5, [r4, #8]
 8010d6c:	464e      	mov	r6, r9
 8010d6e:	454e      	cmp	r6, r9
 8010d70:	d900      	bls.n	8010d74 <__ssputs_r+0x84>
 8010d72:	464e      	mov	r6, r9
 8010d74:	4632      	mov	r2, r6
 8010d76:	4641      	mov	r1, r8
 8010d78:	6820      	ldr	r0, [r4, #0]
 8010d7a:	f000 f9c7 	bl	801110c <memmove>
 8010d7e:	68a3      	ldr	r3, [r4, #8]
 8010d80:	1b9b      	subs	r3, r3, r6
 8010d82:	60a3      	str	r3, [r4, #8]
 8010d84:	6823      	ldr	r3, [r4, #0]
 8010d86:	441e      	add	r6, r3
 8010d88:	6026      	str	r6, [r4, #0]
 8010d8a:	2000      	movs	r0, #0
 8010d8c:	e7dc      	b.n	8010d48 <__ssputs_r+0x58>
 8010d8e:	462a      	mov	r2, r5
 8010d90:	f000 f9d7 	bl	8011142 <_realloc_r>
 8010d94:	4606      	mov	r6, r0
 8010d96:	2800      	cmp	r0, #0
 8010d98:	d1e2      	bne.n	8010d60 <__ssputs_r+0x70>
 8010d9a:	6921      	ldr	r1, [r4, #16]
 8010d9c:	4650      	mov	r0, sl
 8010d9e:	f7ff feff 	bl	8010ba0 <_free_r>
 8010da2:	e7c8      	b.n	8010d36 <__ssputs_r+0x46>

08010da4 <_svfiprintf_r>:
 8010da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010da8:	461d      	mov	r5, r3
 8010daa:	898b      	ldrh	r3, [r1, #12]
 8010dac:	061f      	lsls	r7, r3, #24
 8010dae:	b09d      	sub	sp, #116	; 0x74
 8010db0:	4680      	mov	r8, r0
 8010db2:	460c      	mov	r4, r1
 8010db4:	4616      	mov	r6, r2
 8010db6:	d50f      	bpl.n	8010dd8 <_svfiprintf_r+0x34>
 8010db8:	690b      	ldr	r3, [r1, #16]
 8010dba:	b96b      	cbnz	r3, 8010dd8 <_svfiprintf_r+0x34>
 8010dbc:	2140      	movs	r1, #64	; 0x40
 8010dbe:	f7ff ff3d 	bl	8010c3c <_malloc_r>
 8010dc2:	6020      	str	r0, [r4, #0]
 8010dc4:	6120      	str	r0, [r4, #16]
 8010dc6:	b928      	cbnz	r0, 8010dd4 <_svfiprintf_r+0x30>
 8010dc8:	230c      	movs	r3, #12
 8010dca:	f8c8 3000 	str.w	r3, [r8]
 8010dce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010dd2:	e0c8      	b.n	8010f66 <_svfiprintf_r+0x1c2>
 8010dd4:	2340      	movs	r3, #64	; 0x40
 8010dd6:	6163      	str	r3, [r4, #20]
 8010dd8:	2300      	movs	r3, #0
 8010dda:	9309      	str	r3, [sp, #36]	; 0x24
 8010ddc:	2320      	movs	r3, #32
 8010dde:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010de2:	2330      	movs	r3, #48	; 0x30
 8010de4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010de8:	9503      	str	r5, [sp, #12]
 8010dea:	f04f 0b01 	mov.w	fp, #1
 8010dee:	4637      	mov	r7, r6
 8010df0:	463d      	mov	r5, r7
 8010df2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8010df6:	b10b      	cbz	r3, 8010dfc <_svfiprintf_r+0x58>
 8010df8:	2b25      	cmp	r3, #37	; 0x25
 8010dfa:	d13e      	bne.n	8010e7a <_svfiprintf_r+0xd6>
 8010dfc:	ebb7 0a06 	subs.w	sl, r7, r6
 8010e00:	d00b      	beq.n	8010e1a <_svfiprintf_r+0x76>
 8010e02:	4653      	mov	r3, sl
 8010e04:	4632      	mov	r2, r6
 8010e06:	4621      	mov	r1, r4
 8010e08:	4640      	mov	r0, r8
 8010e0a:	f7ff ff71 	bl	8010cf0 <__ssputs_r>
 8010e0e:	3001      	adds	r0, #1
 8010e10:	f000 80a4 	beq.w	8010f5c <_svfiprintf_r+0x1b8>
 8010e14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e16:	4453      	add	r3, sl
 8010e18:	9309      	str	r3, [sp, #36]	; 0x24
 8010e1a:	783b      	ldrb	r3, [r7, #0]
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	f000 809d 	beq.w	8010f5c <_svfiprintf_r+0x1b8>
 8010e22:	2300      	movs	r3, #0
 8010e24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010e28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010e2c:	9304      	str	r3, [sp, #16]
 8010e2e:	9307      	str	r3, [sp, #28]
 8010e30:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010e34:	931a      	str	r3, [sp, #104]	; 0x68
 8010e36:	462f      	mov	r7, r5
 8010e38:	2205      	movs	r2, #5
 8010e3a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8010e3e:	4850      	ldr	r0, [pc, #320]	; (8010f80 <_svfiprintf_r+0x1dc>)
 8010e40:	f7ef f9f6 	bl	8000230 <memchr>
 8010e44:	9b04      	ldr	r3, [sp, #16]
 8010e46:	b9d0      	cbnz	r0, 8010e7e <_svfiprintf_r+0xda>
 8010e48:	06d9      	lsls	r1, r3, #27
 8010e4a:	bf44      	itt	mi
 8010e4c:	2220      	movmi	r2, #32
 8010e4e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8010e52:	071a      	lsls	r2, r3, #28
 8010e54:	bf44      	itt	mi
 8010e56:	222b      	movmi	r2, #43	; 0x2b
 8010e58:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8010e5c:	782a      	ldrb	r2, [r5, #0]
 8010e5e:	2a2a      	cmp	r2, #42	; 0x2a
 8010e60:	d015      	beq.n	8010e8e <_svfiprintf_r+0xea>
 8010e62:	9a07      	ldr	r2, [sp, #28]
 8010e64:	462f      	mov	r7, r5
 8010e66:	2000      	movs	r0, #0
 8010e68:	250a      	movs	r5, #10
 8010e6a:	4639      	mov	r1, r7
 8010e6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010e70:	3b30      	subs	r3, #48	; 0x30
 8010e72:	2b09      	cmp	r3, #9
 8010e74:	d94d      	bls.n	8010f12 <_svfiprintf_r+0x16e>
 8010e76:	b1b8      	cbz	r0, 8010ea8 <_svfiprintf_r+0x104>
 8010e78:	e00f      	b.n	8010e9a <_svfiprintf_r+0xf6>
 8010e7a:	462f      	mov	r7, r5
 8010e7c:	e7b8      	b.n	8010df0 <_svfiprintf_r+0x4c>
 8010e7e:	4a40      	ldr	r2, [pc, #256]	; (8010f80 <_svfiprintf_r+0x1dc>)
 8010e80:	1a80      	subs	r0, r0, r2
 8010e82:	fa0b f000 	lsl.w	r0, fp, r0
 8010e86:	4318      	orrs	r0, r3
 8010e88:	9004      	str	r0, [sp, #16]
 8010e8a:	463d      	mov	r5, r7
 8010e8c:	e7d3      	b.n	8010e36 <_svfiprintf_r+0x92>
 8010e8e:	9a03      	ldr	r2, [sp, #12]
 8010e90:	1d11      	adds	r1, r2, #4
 8010e92:	6812      	ldr	r2, [r2, #0]
 8010e94:	9103      	str	r1, [sp, #12]
 8010e96:	2a00      	cmp	r2, #0
 8010e98:	db01      	blt.n	8010e9e <_svfiprintf_r+0xfa>
 8010e9a:	9207      	str	r2, [sp, #28]
 8010e9c:	e004      	b.n	8010ea8 <_svfiprintf_r+0x104>
 8010e9e:	4252      	negs	r2, r2
 8010ea0:	f043 0302 	orr.w	r3, r3, #2
 8010ea4:	9207      	str	r2, [sp, #28]
 8010ea6:	9304      	str	r3, [sp, #16]
 8010ea8:	783b      	ldrb	r3, [r7, #0]
 8010eaa:	2b2e      	cmp	r3, #46	; 0x2e
 8010eac:	d10c      	bne.n	8010ec8 <_svfiprintf_r+0x124>
 8010eae:	787b      	ldrb	r3, [r7, #1]
 8010eb0:	2b2a      	cmp	r3, #42	; 0x2a
 8010eb2:	d133      	bne.n	8010f1c <_svfiprintf_r+0x178>
 8010eb4:	9b03      	ldr	r3, [sp, #12]
 8010eb6:	1d1a      	adds	r2, r3, #4
 8010eb8:	681b      	ldr	r3, [r3, #0]
 8010eba:	9203      	str	r2, [sp, #12]
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	bfb8      	it	lt
 8010ec0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8010ec4:	3702      	adds	r7, #2
 8010ec6:	9305      	str	r3, [sp, #20]
 8010ec8:	4d2e      	ldr	r5, [pc, #184]	; (8010f84 <_svfiprintf_r+0x1e0>)
 8010eca:	7839      	ldrb	r1, [r7, #0]
 8010ecc:	2203      	movs	r2, #3
 8010ece:	4628      	mov	r0, r5
 8010ed0:	f7ef f9ae 	bl	8000230 <memchr>
 8010ed4:	b138      	cbz	r0, 8010ee6 <_svfiprintf_r+0x142>
 8010ed6:	2340      	movs	r3, #64	; 0x40
 8010ed8:	1b40      	subs	r0, r0, r5
 8010eda:	fa03 f000 	lsl.w	r0, r3, r0
 8010ede:	9b04      	ldr	r3, [sp, #16]
 8010ee0:	4303      	orrs	r3, r0
 8010ee2:	3701      	adds	r7, #1
 8010ee4:	9304      	str	r3, [sp, #16]
 8010ee6:	7839      	ldrb	r1, [r7, #0]
 8010ee8:	4827      	ldr	r0, [pc, #156]	; (8010f88 <_svfiprintf_r+0x1e4>)
 8010eea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010eee:	2206      	movs	r2, #6
 8010ef0:	1c7e      	adds	r6, r7, #1
 8010ef2:	f7ef f99d 	bl	8000230 <memchr>
 8010ef6:	2800      	cmp	r0, #0
 8010ef8:	d038      	beq.n	8010f6c <_svfiprintf_r+0x1c8>
 8010efa:	4b24      	ldr	r3, [pc, #144]	; (8010f8c <_svfiprintf_r+0x1e8>)
 8010efc:	bb13      	cbnz	r3, 8010f44 <_svfiprintf_r+0x1a0>
 8010efe:	9b03      	ldr	r3, [sp, #12]
 8010f00:	3307      	adds	r3, #7
 8010f02:	f023 0307 	bic.w	r3, r3, #7
 8010f06:	3308      	adds	r3, #8
 8010f08:	9303      	str	r3, [sp, #12]
 8010f0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010f0c:	444b      	add	r3, r9
 8010f0e:	9309      	str	r3, [sp, #36]	; 0x24
 8010f10:	e76d      	b.n	8010dee <_svfiprintf_r+0x4a>
 8010f12:	fb05 3202 	mla	r2, r5, r2, r3
 8010f16:	2001      	movs	r0, #1
 8010f18:	460f      	mov	r7, r1
 8010f1a:	e7a6      	b.n	8010e6a <_svfiprintf_r+0xc6>
 8010f1c:	2300      	movs	r3, #0
 8010f1e:	3701      	adds	r7, #1
 8010f20:	9305      	str	r3, [sp, #20]
 8010f22:	4619      	mov	r1, r3
 8010f24:	250a      	movs	r5, #10
 8010f26:	4638      	mov	r0, r7
 8010f28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010f2c:	3a30      	subs	r2, #48	; 0x30
 8010f2e:	2a09      	cmp	r2, #9
 8010f30:	d903      	bls.n	8010f3a <_svfiprintf_r+0x196>
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	d0c8      	beq.n	8010ec8 <_svfiprintf_r+0x124>
 8010f36:	9105      	str	r1, [sp, #20]
 8010f38:	e7c6      	b.n	8010ec8 <_svfiprintf_r+0x124>
 8010f3a:	fb05 2101 	mla	r1, r5, r1, r2
 8010f3e:	2301      	movs	r3, #1
 8010f40:	4607      	mov	r7, r0
 8010f42:	e7f0      	b.n	8010f26 <_svfiprintf_r+0x182>
 8010f44:	ab03      	add	r3, sp, #12
 8010f46:	9300      	str	r3, [sp, #0]
 8010f48:	4622      	mov	r2, r4
 8010f4a:	4b11      	ldr	r3, [pc, #68]	; (8010f90 <_svfiprintf_r+0x1ec>)
 8010f4c:	a904      	add	r1, sp, #16
 8010f4e:	4640      	mov	r0, r8
 8010f50:	f7fd fdc8 	bl	800eae4 <_printf_float>
 8010f54:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8010f58:	4681      	mov	r9, r0
 8010f5a:	d1d6      	bne.n	8010f0a <_svfiprintf_r+0x166>
 8010f5c:	89a3      	ldrh	r3, [r4, #12]
 8010f5e:	065b      	lsls	r3, r3, #25
 8010f60:	f53f af35 	bmi.w	8010dce <_svfiprintf_r+0x2a>
 8010f64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010f66:	b01d      	add	sp, #116	; 0x74
 8010f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f6c:	ab03      	add	r3, sp, #12
 8010f6e:	9300      	str	r3, [sp, #0]
 8010f70:	4622      	mov	r2, r4
 8010f72:	4b07      	ldr	r3, [pc, #28]	; (8010f90 <_svfiprintf_r+0x1ec>)
 8010f74:	a904      	add	r1, sp, #16
 8010f76:	4640      	mov	r0, r8
 8010f78:	f7fe f86a 	bl	800f050 <_printf_i>
 8010f7c:	e7ea      	b.n	8010f54 <_svfiprintf_r+0x1b0>
 8010f7e:	bf00      	nop
 8010f80:	08013b14 	.word	0x08013b14
 8010f84:	08013b1a 	.word	0x08013b1a
 8010f88:	08013b1e 	.word	0x08013b1e
 8010f8c:	0800eae5 	.word	0x0800eae5
 8010f90:	08010cf1 	.word	0x08010cf1

08010f94 <_sbrk_r>:
 8010f94:	b538      	push	{r3, r4, r5, lr}
 8010f96:	4c06      	ldr	r4, [pc, #24]	; (8010fb0 <_sbrk_r+0x1c>)
 8010f98:	2300      	movs	r3, #0
 8010f9a:	4605      	mov	r5, r0
 8010f9c:	4608      	mov	r0, r1
 8010f9e:	6023      	str	r3, [r4, #0]
 8010fa0:	f7f7 f828 	bl	8007ff4 <_sbrk>
 8010fa4:	1c43      	adds	r3, r0, #1
 8010fa6:	d102      	bne.n	8010fae <_sbrk_r+0x1a>
 8010fa8:	6823      	ldr	r3, [r4, #0]
 8010faa:	b103      	cbz	r3, 8010fae <_sbrk_r+0x1a>
 8010fac:	602b      	str	r3, [r5, #0]
 8010fae:	bd38      	pop	{r3, r4, r5, pc}
 8010fb0:	20002910 	.word	0x20002910

08010fb4 <__sread>:
 8010fb4:	b510      	push	{r4, lr}
 8010fb6:	460c      	mov	r4, r1
 8010fb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010fbc:	f000 f8e8 	bl	8011190 <_read_r>
 8010fc0:	2800      	cmp	r0, #0
 8010fc2:	bfab      	itete	ge
 8010fc4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010fc6:	89a3      	ldrhlt	r3, [r4, #12]
 8010fc8:	181b      	addge	r3, r3, r0
 8010fca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010fce:	bfac      	ite	ge
 8010fd0:	6563      	strge	r3, [r4, #84]	; 0x54
 8010fd2:	81a3      	strhlt	r3, [r4, #12]
 8010fd4:	bd10      	pop	{r4, pc}

08010fd6 <__swrite>:
 8010fd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010fda:	461f      	mov	r7, r3
 8010fdc:	898b      	ldrh	r3, [r1, #12]
 8010fde:	05db      	lsls	r3, r3, #23
 8010fe0:	4605      	mov	r5, r0
 8010fe2:	460c      	mov	r4, r1
 8010fe4:	4616      	mov	r6, r2
 8010fe6:	d505      	bpl.n	8010ff4 <__swrite+0x1e>
 8010fe8:	2302      	movs	r3, #2
 8010fea:	2200      	movs	r2, #0
 8010fec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ff0:	f000 f868 	bl	80110c4 <_lseek_r>
 8010ff4:	89a3      	ldrh	r3, [r4, #12]
 8010ff6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010ffa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010ffe:	81a3      	strh	r3, [r4, #12]
 8011000:	4632      	mov	r2, r6
 8011002:	463b      	mov	r3, r7
 8011004:	4628      	mov	r0, r5
 8011006:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801100a:	f000 b817 	b.w	801103c <_write_r>

0801100e <__sseek>:
 801100e:	b510      	push	{r4, lr}
 8011010:	460c      	mov	r4, r1
 8011012:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011016:	f000 f855 	bl	80110c4 <_lseek_r>
 801101a:	1c43      	adds	r3, r0, #1
 801101c:	89a3      	ldrh	r3, [r4, #12]
 801101e:	bf15      	itete	ne
 8011020:	6560      	strne	r0, [r4, #84]	; 0x54
 8011022:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011026:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801102a:	81a3      	strheq	r3, [r4, #12]
 801102c:	bf18      	it	ne
 801102e:	81a3      	strhne	r3, [r4, #12]
 8011030:	bd10      	pop	{r4, pc}

08011032 <__sclose>:
 8011032:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011036:	f000 b813 	b.w	8011060 <_close_r>
	...

0801103c <_write_r>:
 801103c:	b538      	push	{r3, r4, r5, lr}
 801103e:	4c07      	ldr	r4, [pc, #28]	; (801105c <_write_r+0x20>)
 8011040:	4605      	mov	r5, r0
 8011042:	4608      	mov	r0, r1
 8011044:	4611      	mov	r1, r2
 8011046:	2200      	movs	r2, #0
 8011048:	6022      	str	r2, [r4, #0]
 801104a:	461a      	mov	r2, r3
 801104c:	f7f6 fca7 	bl	800799e <_write>
 8011050:	1c43      	adds	r3, r0, #1
 8011052:	d102      	bne.n	801105a <_write_r+0x1e>
 8011054:	6823      	ldr	r3, [r4, #0]
 8011056:	b103      	cbz	r3, 801105a <_write_r+0x1e>
 8011058:	602b      	str	r3, [r5, #0]
 801105a:	bd38      	pop	{r3, r4, r5, pc}
 801105c:	20002910 	.word	0x20002910

08011060 <_close_r>:
 8011060:	b538      	push	{r3, r4, r5, lr}
 8011062:	4c06      	ldr	r4, [pc, #24]	; (801107c <_close_r+0x1c>)
 8011064:	2300      	movs	r3, #0
 8011066:	4605      	mov	r5, r0
 8011068:	4608      	mov	r0, r1
 801106a:	6023      	str	r3, [r4, #0]
 801106c:	f7f6 ff8d 	bl	8007f8a <_close>
 8011070:	1c43      	adds	r3, r0, #1
 8011072:	d102      	bne.n	801107a <_close_r+0x1a>
 8011074:	6823      	ldr	r3, [r4, #0]
 8011076:	b103      	cbz	r3, 801107a <_close_r+0x1a>
 8011078:	602b      	str	r3, [r5, #0]
 801107a:	bd38      	pop	{r3, r4, r5, pc}
 801107c:	20002910 	.word	0x20002910

08011080 <_fstat_r>:
 8011080:	b538      	push	{r3, r4, r5, lr}
 8011082:	4c07      	ldr	r4, [pc, #28]	; (80110a0 <_fstat_r+0x20>)
 8011084:	2300      	movs	r3, #0
 8011086:	4605      	mov	r5, r0
 8011088:	4608      	mov	r0, r1
 801108a:	4611      	mov	r1, r2
 801108c:	6023      	str	r3, [r4, #0]
 801108e:	f7f6 ff88 	bl	8007fa2 <_fstat>
 8011092:	1c43      	adds	r3, r0, #1
 8011094:	d102      	bne.n	801109c <_fstat_r+0x1c>
 8011096:	6823      	ldr	r3, [r4, #0]
 8011098:	b103      	cbz	r3, 801109c <_fstat_r+0x1c>
 801109a:	602b      	str	r3, [r5, #0]
 801109c:	bd38      	pop	{r3, r4, r5, pc}
 801109e:	bf00      	nop
 80110a0:	20002910 	.word	0x20002910

080110a4 <_isatty_r>:
 80110a4:	b538      	push	{r3, r4, r5, lr}
 80110a6:	4c06      	ldr	r4, [pc, #24]	; (80110c0 <_isatty_r+0x1c>)
 80110a8:	2300      	movs	r3, #0
 80110aa:	4605      	mov	r5, r0
 80110ac:	4608      	mov	r0, r1
 80110ae:	6023      	str	r3, [r4, #0]
 80110b0:	f7f6 ff87 	bl	8007fc2 <_isatty>
 80110b4:	1c43      	adds	r3, r0, #1
 80110b6:	d102      	bne.n	80110be <_isatty_r+0x1a>
 80110b8:	6823      	ldr	r3, [r4, #0]
 80110ba:	b103      	cbz	r3, 80110be <_isatty_r+0x1a>
 80110bc:	602b      	str	r3, [r5, #0]
 80110be:	bd38      	pop	{r3, r4, r5, pc}
 80110c0:	20002910 	.word	0x20002910

080110c4 <_lseek_r>:
 80110c4:	b538      	push	{r3, r4, r5, lr}
 80110c6:	4c07      	ldr	r4, [pc, #28]	; (80110e4 <_lseek_r+0x20>)
 80110c8:	4605      	mov	r5, r0
 80110ca:	4608      	mov	r0, r1
 80110cc:	4611      	mov	r1, r2
 80110ce:	2200      	movs	r2, #0
 80110d0:	6022      	str	r2, [r4, #0]
 80110d2:	461a      	mov	r2, r3
 80110d4:	f7f6 ff80 	bl	8007fd8 <_lseek>
 80110d8:	1c43      	adds	r3, r0, #1
 80110da:	d102      	bne.n	80110e2 <_lseek_r+0x1e>
 80110dc:	6823      	ldr	r3, [r4, #0]
 80110de:	b103      	cbz	r3, 80110e2 <_lseek_r+0x1e>
 80110e0:	602b      	str	r3, [r5, #0]
 80110e2:	bd38      	pop	{r3, r4, r5, pc}
 80110e4:	20002910 	.word	0x20002910

080110e8 <__ascii_mbtowc>:
 80110e8:	b082      	sub	sp, #8
 80110ea:	b901      	cbnz	r1, 80110ee <__ascii_mbtowc+0x6>
 80110ec:	a901      	add	r1, sp, #4
 80110ee:	b142      	cbz	r2, 8011102 <__ascii_mbtowc+0x1a>
 80110f0:	b14b      	cbz	r3, 8011106 <__ascii_mbtowc+0x1e>
 80110f2:	7813      	ldrb	r3, [r2, #0]
 80110f4:	600b      	str	r3, [r1, #0]
 80110f6:	7812      	ldrb	r2, [r2, #0]
 80110f8:	1c10      	adds	r0, r2, #0
 80110fa:	bf18      	it	ne
 80110fc:	2001      	movne	r0, #1
 80110fe:	b002      	add	sp, #8
 8011100:	4770      	bx	lr
 8011102:	4610      	mov	r0, r2
 8011104:	e7fb      	b.n	80110fe <__ascii_mbtowc+0x16>
 8011106:	f06f 0001 	mvn.w	r0, #1
 801110a:	e7f8      	b.n	80110fe <__ascii_mbtowc+0x16>

0801110c <memmove>:
 801110c:	4288      	cmp	r0, r1
 801110e:	b510      	push	{r4, lr}
 8011110:	eb01 0302 	add.w	r3, r1, r2
 8011114:	d807      	bhi.n	8011126 <memmove+0x1a>
 8011116:	1e42      	subs	r2, r0, #1
 8011118:	4299      	cmp	r1, r3
 801111a:	d00a      	beq.n	8011132 <memmove+0x26>
 801111c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011120:	f802 4f01 	strb.w	r4, [r2, #1]!
 8011124:	e7f8      	b.n	8011118 <memmove+0xc>
 8011126:	4283      	cmp	r3, r0
 8011128:	d9f5      	bls.n	8011116 <memmove+0xa>
 801112a:	1881      	adds	r1, r0, r2
 801112c:	1ad2      	subs	r2, r2, r3
 801112e:	42d3      	cmn	r3, r2
 8011130:	d100      	bne.n	8011134 <memmove+0x28>
 8011132:	bd10      	pop	{r4, pc}
 8011134:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011138:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801113c:	e7f7      	b.n	801112e <memmove+0x22>

0801113e <__malloc_lock>:
 801113e:	4770      	bx	lr

08011140 <__malloc_unlock>:
 8011140:	4770      	bx	lr

08011142 <_realloc_r>:
 8011142:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011144:	4607      	mov	r7, r0
 8011146:	4614      	mov	r4, r2
 8011148:	460e      	mov	r6, r1
 801114a:	b921      	cbnz	r1, 8011156 <_realloc_r+0x14>
 801114c:	4611      	mov	r1, r2
 801114e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8011152:	f7ff bd73 	b.w	8010c3c <_malloc_r>
 8011156:	b922      	cbnz	r2, 8011162 <_realloc_r+0x20>
 8011158:	f7ff fd22 	bl	8010ba0 <_free_r>
 801115c:	4625      	mov	r5, r4
 801115e:	4628      	mov	r0, r5
 8011160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011162:	f000 f834 	bl	80111ce <_malloc_usable_size_r>
 8011166:	42a0      	cmp	r0, r4
 8011168:	d20f      	bcs.n	801118a <_realloc_r+0x48>
 801116a:	4621      	mov	r1, r4
 801116c:	4638      	mov	r0, r7
 801116e:	f7ff fd65 	bl	8010c3c <_malloc_r>
 8011172:	4605      	mov	r5, r0
 8011174:	2800      	cmp	r0, #0
 8011176:	d0f2      	beq.n	801115e <_realloc_r+0x1c>
 8011178:	4631      	mov	r1, r6
 801117a:	4622      	mov	r2, r4
 801117c:	f7ff fa1c 	bl	80105b8 <memcpy>
 8011180:	4631      	mov	r1, r6
 8011182:	4638      	mov	r0, r7
 8011184:	f7ff fd0c 	bl	8010ba0 <_free_r>
 8011188:	e7e9      	b.n	801115e <_realloc_r+0x1c>
 801118a:	4635      	mov	r5, r6
 801118c:	e7e7      	b.n	801115e <_realloc_r+0x1c>
	...

08011190 <_read_r>:
 8011190:	b538      	push	{r3, r4, r5, lr}
 8011192:	4c07      	ldr	r4, [pc, #28]	; (80111b0 <_read_r+0x20>)
 8011194:	4605      	mov	r5, r0
 8011196:	4608      	mov	r0, r1
 8011198:	4611      	mov	r1, r2
 801119a:	2200      	movs	r2, #0
 801119c:	6022      	str	r2, [r4, #0]
 801119e:	461a      	mov	r2, r3
 80111a0:	f7f6 fed6 	bl	8007f50 <_read>
 80111a4:	1c43      	adds	r3, r0, #1
 80111a6:	d102      	bne.n	80111ae <_read_r+0x1e>
 80111a8:	6823      	ldr	r3, [r4, #0]
 80111aa:	b103      	cbz	r3, 80111ae <_read_r+0x1e>
 80111ac:	602b      	str	r3, [r5, #0]
 80111ae:	bd38      	pop	{r3, r4, r5, pc}
 80111b0:	20002910 	.word	0x20002910

080111b4 <__ascii_wctomb>:
 80111b4:	b149      	cbz	r1, 80111ca <__ascii_wctomb+0x16>
 80111b6:	2aff      	cmp	r2, #255	; 0xff
 80111b8:	bf85      	ittet	hi
 80111ba:	238a      	movhi	r3, #138	; 0x8a
 80111bc:	6003      	strhi	r3, [r0, #0]
 80111be:	700a      	strbls	r2, [r1, #0]
 80111c0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80111c4:	bf98      	it	ls
 80111c6:	2001      	movls	r0, #1
 80111c8:	4770      	bx	lr
 80111ca:	4608      	mov	r0, r1
 80111cc:	4770      	bx	lr

080111ce <_malloc_usable_size_r>:
 80111ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80111d2:	1f18      	subs	r0, r3, #4
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	bfbc      	itt	lt
 80111d8:	580b      	ldrlt	r3, [r1, r0]
 80111da:	18c0      	addlt	r0, r0, r3
 80111dc:	4770      	bx	lr
	...

080111e0 <log10>:
 80111e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80111e2:	ed2d 8b02 	vpush	{d8}
 80111e6:	b08b      	sub	sp, #44	; 0x2c
 80111e8:	ec55 4b10 	vmov	r4, r5, d0
 80111ec:	f000 f9e8 	bl	80115c0 <__ieee754_log10>
 80111f0:	4b36      	ldr	r3, [pc, #216]	; (80112cc <log10+0xec>)
 80111f2:	eeb0 8a40 	vmov.f32	s16, s0
 80111f6:	eef0 8a60 	vmov.f32	s17, s1
 80111fa:	f993 6000 	ldrsb.w	r6, [r3]
 80111fe:	1c73      	adds	r3, r6, #1
 8011200:	d05c      	beq.n	80112bc <log10+0xdc>
 8011202:	4622      	mov	r2, r4
 8011204:	462b      	mov	r3, r5
 8011206:	4620      	mov	r0, r4
 8011208:	4629      	mov	r1, r5
 801120a:	f7ef fcb7 	bl	8000b7c <__aeabi_dcmpun>
 801120e:	4607      	mov	r7, r0
 8011210:	2800      	cmp	r0, #0
 8011212:	d153      	bne.n	80112bc <log10+0xdc>
 8011214:	2200      	movs	r2, #0
 8011216:	2300      	movs	r3, #0
 8011218:	4620      	mov	r0, r4
 801121a:	4629      	mov	r1, r5
 801121c:	f7ef fc90 	bl	8000b40 <__aeabi_dcmple>
 8011220:	2800      	cmp	r0, #0
 8011222:	d04b      	beq.n	80112bc <log10+0xdc>
 8011224:	4b2a      	ldr	r3, [pc, #168]	; (80112d0 <log10+0xf0>)
 8011226:	9301      	str	r3, [sp, #4]
 8011228:	9708      	str	r7, [sp, #32]
 801122a:	e9cd 4502 	strd	r4, r5, [sp, #8]
 801122e:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8011232:	b9a6      	cbnz	r6, 801125e <log10+0x7e>
 8011234:	4b27      	ldr	r3, [pc, #156]	; (80112d4 <log10+0xf4>)
 8011236:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801123a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801123e:	4620      	mov	r0, r4
 8011240:	2200      	movs	r2, #0
 8011242:	2300      	movs	r3, #0
 8011244:	4629      	mov	r1, r5
 8011246:	f7ef fc67 	bl	8000b18 <__aeabi_dcmpeq>
 801124a:	bb40      	cbnz	r0, 801129e <log10+0xbe>
 801124c:	2301      	movs	r3, #1
 801124e:	2e02      	cmp	r6, #2
 8011250:	9300      	str	r3, [sp, #0]
 8011252:	d119      	bne.n	8011288 <log10+0xa8>
 8011254:	f7fd fb80 	bl	800e958 <__errno>
 8011258:	2321      	movs	r3, #33	; 0x21
 801125a:	6003      	str	r3, [r0, #0]
 801125c:	e019      	b.n	8011292 <log10+0xb2>
 801125e:	4b1e      	ldr	r3, [pc, #120]	; (80112d8 <log10+0xf8>)
 8011260:	2200      	movs	r2, #0
 8011262:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8011266:	4620      	mov	r0, r4
 8011268:	2200      	movs	r2, #0
 801126a:	2300      	movs	r3, #0
 801126c:	4629      	mov	r1, r5
 801126e:	f7ef fc53 	bl	8000b18 <__aeabi_dcmpeq>
 8011272:	2800      	cmp	r0, #0
 8011274:	d0ea      	beq.n	801124c <log10+0x6c>
 8011276:	2302      	movs	r3, #2
 8011278:	429e      	cmp	r6, r3
 801127a:	9300      	str	r3, [sp, #0]
 801127c:	d111      	bne.n	80112a2 <log10+0xc2>
 801127e:	f7fd fb6b 	bl	800e958 <__errno>
 8011282:	2322      	movs	r3, #34	; 0x22
 8011284:	6003      	str	r3, [r0, #0]
 8011286:	e011      	b.n	80112ac <log10+0xcc>
 8011288:	4668      	mov	r0, sp
 801128a:	f000 fff4 	bl	8012276 <matherr>
 801128e:	2800      	cmp	r0, #0
 8011290:	d0e0      	beq.n	8011254 <log10+0x74>
 8011292:	4812      	ldr	r0, [pc, #72]	; (80112dc <log10+0xfc>)
 8011294:	f000 fff4 	bl	8012280 <nan>
 8011298:	ed8d 0b06 	vstr	d0, [sp, #24]
 801129c:	e006      	b.n	80112ac <log10+0xcc>
 801129e:	2302      	movs	r3, #2
 80112a0:	9300      	str	r3, [sp, #0]
 80112a2:	4668      	mov	r0, sp
 80112a4:	f000 ffe7 	bl	8012276 <matherr>
 80112a8:	2800      	cmp	r0, #0
 80112aa:	d0e8      	beq.n	801127e <log10+0x9e>
 80112ac:	9b08      	ldr	r3, [sp, #32]
 80112ae:	b11b      	cbz	r3, 80112b8 <log10+0xd8>
 80112b0:	f7fd fb52 	bl	800e958 <__errno>
 80112b4:	9b08      	ldr	r3, [sp, #32]
 80112b6:	6003      	str	r3, [r0, #0]
 80112b8:	ed9d 8b06 	vldr	d8, [sp, #24]
 80112bc:	eeb0 0a48 	vmov.f32	s0, s16
 80112c0:	eef0 0a68 	vmov.f32	s1, s17
 80112c4:	b00b      	add	sp, #44	; 0x2c
 80112c6:	ecbd 8b02 	vpop	{d8}
 80112ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80112cc:	20001e74 	.word	0x20001e74
 80112d0:	08013c30 	.word	0x08013c30
 80112d4:	c7efffff 	.word	0xc7efffff
 80112d8:	fff00000 	.word	0xfff00000
 80112dc:	08013b19 	.word	0x08013b19

080112e0 <pow>:
 80112e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112e4:	ed2d 8b04 	vpush	{d8-d9}
 80112e8:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 80115bc <pow+0x2dc>
 80112ec:	b08d      	sub	sp, #52	; 0x34
 80112ee:	ec57 6b10 	vmov	r6, r7, d0
 80112f2:	ec55 4b11 	vmov	r4, r5, d1
 80112f6:	f000 f9ef 	bl	80116d8 <__ieee754_pow>
 80112fa:	f999 3000 	ldrsb.w	r3, [r9]
 80112fe:	9300      	str	r3, [sp, #0]
 8011300:	3301      	adds	r3, #1
 8011302:	eeb0 8a40 	vmov.f32	s16, s0
 8011306:	eef0 8a60 	vmov.f32	s17, s1
 801130a:	46c8      	mov	r8, r9
 801130c:	d05f      	beq.n	80113ce <pow+0xee>
 801130e:	4622      	mov	r2, r4
 8011310:	462b      	mov	r3, r5
 8011312:	4620      	mov	r0, r4
 8011314:	4629      	mov	r1, r5
 8011316:	f7ef fc31 	bl	8000b7c <__aeabi_dcmpun>
 801131a:	4683      	mov	fp, r0
 801131c:	2800      	cmp	r0, #0
 801131e:	d156      	bne.n	80113ce <pow+0xee>
 8011320:	4632      	mov	r2, r6
 8011322:	463b      	mov	r3, r7
 8011324:	4630      	mov	r0, r6
 8011326:	4639      	mov	r1, r7
 8011328:	f7ef fc28 	bl	8000b7c <__aeabi_dcmpun>
 801132c:	9001      	str	r0, [sp, #4]
 801132e:	b1e8      	cbz	r0, 801136c <pow+0x8c>
 8011330:	2200      	movs	r2, #0
 8011332:	2300      	movs	r3, #0
 8011334:	4620      	mov	r0, r4
 8011336:	4629      	mov	r1, r5
 8011338:	f7ef fbee 	bl	8000b18 <__aeabi_dcmpeq>
 801133c:	2800      	cmp	r0, #0
 801133e:	d046      	beq.n	80113ce <pow+0xee>
 8011340:	2301      	movs	r3, #1
 8011342:	9302      	str	r3, [sp, #8]
 8011344:	4b96      	ldr	r3, [pc, #600]	; (80115a0 <pow+0x2c0>)
 8011346:	9303      	str	r3, [sp, #12]
 8011348:	4b96      	ldr	r3, [pc, #600]	; (80115a4 <pow+0x2c4>)
 801134a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801134e:	2200      	movs	r2, #0
 8011350:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011354:	9b00      	ldr	r3, [sp, #0]
 8011356:	2b02      	cmp	r3, #2
 8011358:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801135c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8011360:	d033      	beq.n	80113ca <pow+0xea>
 8011362:	a802      	add	r0, sp, #8
 8011364:	f000 ff87 	bl	8012276 <matherr>
 8011368:	bb48      	cbnz	r0, 80113be <pow+0xde>
 801136a:	e05d      	b.n	8011428 <pow+0x148>
 801136c:	f04f 0a00 	mov.w	sl, #0
 8011370:	f04f 0b00 	mov.w	fp, #0
 8011374:	4652      	mov	r2, sl
 8011376:	465b      	mov	r3, fp
 8011378:	4630      	mov	r0, r6
 801137a:	4639      	mov	r1, r7
 801137c:	f7ef fbcc 	bl	8000b18 <__aeabi_dcmpeq>
 8011380:	ec4b ab19 	vmov	d9, sl, fp
 8011384:	2800      	cmp	r0, #0
 8011386:	d054      	beq.n	8011432 <pow+0x152>
 8011388:	4652      	mov	r2, sl
 801138a:	465b      	mov	r3, fp
 801138c:	4620      	mov	r0, r4
 801138e:	4629      	mov	r1, r5
 8011390:	f7ef fbc2 	bl	8000b18 <__aeabi_dcmpeq>
 8011394:	4680      	mov	r8, r0
 8011396:	b318      	cbz	r0, 80113e0 <pow+0x100>
 8011398:	2301      	movs	r3, #1
 801139a:	9302      	str	r3, [sp, #8]
 801139c:	4b80      	ldr	r3, [pc, #512]	; (80115a0 <pow+0x2c0>)
 801139e:	9303      	str	r3, [sp, #12]
 80113a0:	9b01      	ldr	r3, [sp, #4]
 80113a2:	930a      	str	r3, [sp, #40]	; 0x28
 80113a4:	9b00      	ldr	r3, [sp, #0]
 80113a6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80113aa:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80113ae:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	d0d5      	beq.n	8011362 <pow+0x82>
 80113b6:	4b7b      	ldr	r3, [pc, #492]	; (80115a4 <pow+0x2c4>)
 80113b8:	2200      	movs	r2, #0
 80113ba:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80113be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80113c0:	b11b      	cbz	r3, 80113ca <pow+0xea>
 80113c2:	f7fd fac9 	bl	800e958 <__errno>
 80113c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80113c8:	6003      	str	r3, [r0, #0]
 80113ca:	ed9d 8b08 	vldr	d8, [sp, #32]
 80113ce:	eeb0 0a48 	vmov.f32	s0, s16
 80113d2:	eef0 0a68 	vmov.f32	s1, s17
 80113d6:	b00d      	add	sp, #52	; 0x34
 80113d8:	ecbd 8b04 	vpop	{d8-d9}
 80113dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113e0:	ec45 4b10 	vmov	d0, r4, r5
 80113e4:	f000 ff3f 	bl	8012266 <finite>
 80113e8:	2800      	cmp	r0, #0
 80113ea:	d0f0      	beq.n	80113ce <pow+0xee>
 80113ec:	4652      	mov	r2, sl
 80113ee:	465b      	mov	r3, fp
 80113f0:	4620      	mov	r0, r4
 80113f2:	4629      	mov	r1, r5
 80113f4:	f7ef fb9a 	bl	8000b2c <__aeabi_dcmplt>
 80113f8:	2800      	cmp	r0, #0
 80113fa:	d0e8      	beq.n	80113ce <pow+0xee>
 80113fc:	2301      	movs	r3, #1
 80113fe:	9302      	str	r3, [sp, #8]
 8011400:	4b67      	ldr	r3, [pc, #412]	; (80115a0 <pow+0x2c0>)
 8011402:	9303      	str	r3, [sp, #12]
 8011404:	f999 3000 	ldrsb.w	r3, [r9]
 8011408:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 801140c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8011410:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8011414:	b913      	cbnz	r3, 801141c <pow+0x13c>
 8011416:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801141a:	e7a2      	b.n	8011362 <pow+0x82>
 801141c:	4962      	ldr	r1, [pc, #392]	; (80115a8 <pow+0x2c8>)
 801141e:	2000      	movs	r0, #0
 8011420:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011424:	2b02      	cmp	r3, #2
 8011426:	d19c      	bne.n	8011362 <pow+0x82>
 8011428:	f7fd fa96 	bl	800e958 <__errno>
 801142c:	2321      	movs	r3, #33	; 0x21
 801142e:	6003      	str	r3, [r0, #0]
 8011430:	e7c5      	b.n	80113be <pow+0xde>
 8011432:	eeb0 0a48 	vmov.f32	s0, s16
 8011436:	eef0 0a68 	vmov.f32	s1, s17
 801143a:	f000 ff14 	bl	8012266 <finite>
 801143e:	9000      	str	r0, [sp, #0]
 8011440:	2800      	cmp	r0, #0
 8011442:	f040 8081 	bne.w	8011548 <pow+0x268>
 8011446:	ec47 6b10 	vmov	d0, r6, r7
 801144a:	f000 ff0c 	bl	8012266 <finite>
 801144e:	2800      	cmp	r0, #0
 8011450:	d07a      	beq.n	8011548 <pow+0x268>
 8011452:	ec45 4b10 	vmov	d0, r4, r5
 8011456:	f000 ff06 	bl	8012266 <finite>
 801145a:	2800      	cmp	r0, #0
 801145c:	d074      	beq.n	8011548 <pow+0x268>
 801145e:	ec53 2b18 	vmov	r2, r3, d8
 8011462:	ee18 0a10 	vmov	r0, s16
 8011466:	4619      	mov	r1, r3
 8011468:	f7ef fb88 	bl	8000b7c <__aeabi_dcmpun>
 801146c:	f999 9000 	ldrsb.w	r9, [r9]
 8011470:	4b4b      	ldr	r3, [pc, #300]	; (80115a0 <pow+0x2c0>)
 8011472:	b1b0      	cbz	r0, 80114a2 <pow+0x1c2>
 8011474:	2201      	movs	r2, #1
 8011476:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801147a:	9b00      	ldr	r3, [sp, #0]
 801147c:	930a      	str	r3, [sp, #40]	; 0x28
 801147e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8011482:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8011486:	f1b9 0f00 	cmp.w	r9, #0
 801148a:	d0c4      	beq.n	8011416 <pow+0x136>
 801148c:	4652      	mov	r2, sl
 801148e:	465b      	mov	r3, fp
 8011490:	4650      	mov	r0, sl
 8011492:	4659      	mov	r1, fp
 8011494:	f7ef fa02 	bl	800089c <__aeabi_ddiv>
 8011498:	f1b9 0f02 	cmp.w	r9, #2
 801149c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80114a0:	e7c1      	b.n	8011426 <pow+0x146>
 80114a2:	2203      	movs	r2, #3
 80114a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80114a8:	900a      	str	r0, [sp, #40]	; 0x28
 80114aa:	4629      	mov	r1, r5
 80114ac:	4620      	mov	r0, r4
 80114ae:	2200      	movs	r2, #0
 80114b0:	4b3e      	ldr	r3, [pc, #248]	; (80115ac <pow+0x2cc>)
 80114b2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80114b6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80114ba:	f7ef f8c5 	bl	8000648 <__aeabi_dmul>
 80114be:	4604      	mov	r4, r0
 80114c0:	460d      	mov	r5, r1
 80114c2:	f1b9 0f00 	cmp.w	r9, #0
 80114c6:	d124      	bne.n	8011512 <pow+0x232>
 80114c8:	4b39      	ldr	r3, [pc, #228]	; (80115b0 <pow+0x2d0>)
 80114ca:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80114ce:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80114d2:	4630      	mov	r0, r6
 80114d4:	4652      	mov	r2, sl
 80114d6:	465b      	mov	r3, fp
 80114d8:	4639      	mov	r1, r7
 80114da:	f7ef fb27 	bl	8000b2c <__aeabi_dcmplt>
 80114de:	2800      	cmp	r0, #0
 80114e0:	d056      	beq.n	8011590 <pow+0x2b0>
 80114e2:	ec45 4b10 	vmov	d0, r4, r5
 80114e6:	f000 fed3 	bl	8012290 <rint>
 80114ea:	4622      	mov	r2, r4
 80114ec:	462b      	mov	r3, r5
 80114ee:	ec51 0b10 	vmov	r0, r1, d0
 80114f2:	f7ef fb11 	bl	8000b18 <__aeabi_dcmpeq>
 80114f6:	b920      	cbnz	r0, 8011502 <pow+0x222>
 80114f8:	4b2e      	ldr	r3, [pc, #184]	; (80115b4 <pow+0x2d4>)
 80114fa:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80114fe:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011502:	f998 3000 	ldrsb.w	r3, [r8]
 8011506:	2b02      	cmp	r3, #2
 8011508:	d142      	bne.n	8011590 <pow+0x2b0>
 801150a:	f7fd fa25 	bl	800e958 <__errno>
 801150e:	2322      	movs	r3, #34	; 0x22
 8011510:	e78d      	b.n	801142e <pow+0x14e>
 8011512:	4b29      	ldr	r3, [pc, #164]	; (80115b8 <pow+0x2d8>)
 8011514:	2200      	movs	r2, #0
 8011516:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801151a:	4630      	mov	r0, r6
 801151c:	4652      	mov	r2, sl
 801151e:	465b      	mov	r3, fp
 8011520:	4639      	mov	r1, r7
 8011522:	f7ef fb03 	bl	8000b2c <__aeabi_dcmplt>
 8011526:	2800      	cmp	r0, #0
 8011528:	d0eb      	beq.n	8011502 <pow+0x222>
 801152a:	ec45 4b10 	vmov	d0, r4, r5
 801152e:	f000 feaf 	bl	8012290 <rint>
 8011532:	4622      	mov	r2, r4
 8011534:	462b      	mov	r3, r5
 8011536:	ec51 0b10 	vmov	r0, r1, d0
 801153a:	f7ef faed 	bl	8000b18 <__aeabi_dcmpeq>
 801153e:	2800      	cmp	r0, #0
 8011540:	d1df      	bne.n	8011502 <pow+0x222>
 8011542:	2200      	movs	r2, #0
 8011544:	4b18      	ldr	r3, [pc, #96]	; (80115a8 <pow+0x2c8>)
 8011546:	e7da      	b.n	80114fe <pow+0x21e>
 8011548:	2200      	movs	r2, #0
 801154a:	2300      	movs	r3, #0
 801154c:	ec51 0b18 	vmov	r0, r1, d8
 8011550:	f7ef fae2 	bl	8000b18 <__aeabi_dcmpeq>
 8011554:	2800      	cmp	r0, #0
 8011556:	f43f af3a 	beq.w	80113ce <pow+0xee>
 801155a:	ec47 6b10 	vmov	d0, r6, r7
 801155e:	f000 fe82 	bl	8012266 <finite>
 8011562:	2800      	cmp	r0, #0
 8011564:	f43f af33 	beq.w	80113ce <pow+0xee>
 8011568:	ec45 4b10 	vmov	d0, r4, r5
 801156c:	f000 fe7b 	bl	8012266 <finite>
 8011570:	2800      	cmp	r0, #0
 8011572:	f43f af2c 	beq.w	80113ce <pow+0xee>
 8011576:	2304      	movs	r3, #4
 8011578:	9302      	str	r3, [sp, #8]
 801157a:	4b09      	ldr	r3, [pc, #36]	; (80115a0 <pow+0x2c0>)
 801157c:	9303      	str	r3, [sp, #12]
 801157e:	2300      	movs	r3, #0
 8011580:	930a      	str	r3, [sp, #40]	; 0x28
 8011582:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8011586:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801158a:	ed8d 9b08 	vstr	d9, [sp, #32]
 801158e:	e7b8      	b.n	8011502 <pow+0x222>
 8011590:	a802      	add	r0, sp, #8
 8011592:	f000 fe70 	bl	8012276 <matherr>
 8011596:	2800      	cmp	r0, #0
 8011598:	f47f af11 	bne.w	80113be <pow+0xde>
 801159c:	e7b5      	b.n	801150a <pow+0x22a>
 801159e:	bf00      	nop
 80115a0:	08013c36 	.word	0x08013c36
 80115a4:	3ff00000 	.word	0x3ff00000
 80115a8:	fff00000 	.word	0xfff00000
 80115ac:	3fe00000 	.word	0x3fe00000
 80115b0:	47efffff 	.word	0x47efffff
 80115b4:	c7efffff 	.word	0xc7efffff
 80115b8:	7ff00000 	.word	0x7ff00000
 80115bc:	20001e74 	.word	0x20001e74

080115c0 <__ieee754_log10>:
 80115c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80115c4:	ec55 4b10 	vmov	r4, r5, d0
 80115c8:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 80115cc:	462b      	mov	r3, r5
 80115ce:	da2f      	bge.n	8011630 <__ieee754_log10+0x70>
 80115d0:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 80115d4:	4322      	orrs	r2, r4
 80115d6:	d10a      	bne.n	80115ee <__ieee754_log10+0x2e>
 80115d8:	493b      	ldr	r1, [pc, #236]	; (80116c8 <__ieee754_log10+0x108>)
 80115da:	2200      	movs	r2, #0
 80115dc:	2300      	movs	r3, #0
 80115de:	2000      	movs	r0, #0
 80115e0:	f7ef f95c 	bl	800089c <__aeabi_ddiv>
 80115e4:	ec41 0b10 	vmov	d0, r0, r1
 80115e8:	b003      	add	sp, #12
 80115ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80115ee:	2d00      	cmp	r5, #0
 80115f0:	da08      	bge.n	8011604 <__ieee754_log10+0x44>
 80115f2:	ee10 2a10 	vmov	r2, s0
 80115f6:	4620      	mov	r0, r4
 80115f8:	4629      	mov	r1, r5
 80115fa:	f7ee fe6d 	bl	80002d8 <__aeabi_dsub>
 80115fe:	2200      	movs	r2, #0
 8011600:	2300      	movs	r3, #0
 8011602:	e7ed      	b.n	80115e0 <__ieee754_log10+0x20>
 8011604:	2200      	movs	r2, #0
 8011606:	4b31      	ldr	r3, [pc, #196]	; (80116cc <__ieee754_log10+0x10c>)
 8011608:	4629      	mov	r1, r5
 801160a:	ee10 0a10 	vmov	r0, s0
 801160e:	f7ef f81b 	bl	8000648 <__aeabi_dmul>
 8011612:	f06f 0235 	mvn.w	r2, #53	; 0x35
 8011616:	4604      	mov	r4, r0
 8011618:	460d      	mov	r5, r1
 801161a:	460b      	mov	r3, r1
 801161c:	492c      	ldr	r1, [pc, #176]	; (80116d0 <__ieee754_log10+0x110>)
 801161e:	428b      	cmp	r3, r1
 8011620:	dd08      	ble.n	8011634 <__ieee754_log10+0x74>
 8011622:	4622      	mov	r2, r4
 8011624:	462b      	mov	r3, r5
 8011626:	4620      	mov	r0, r4
 8011628:	4629      	mov	r1, r5
 801162a:	f7ee fe57 	bl	80002dc <__adddf3>
 801162e:	e7d9      	b.n	80115e4 <__ieee754_log10+0x24>
 8011630:	2200      	movs	r2, #0
 8011632:	e7f3      	b.n	801161c <__ieee754_log10+0x5c>
 8011634:	1518      	asrs	r0, r3, #20
 8011636:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 801163a:	4410      	add	r0, r2
 801163c:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 8011640:	4448      	add	r0, r9
 8011642:	f3c3 0813 	ubfx	r8, r3, #0, #20
 8011646:	f7ee ff95 	bl	8000574 <__aeabi_i2d>
 801164a:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 801164e:	3303      	adds	r3, #3
 8011650:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 8011654:	ec45 4b10 	vmov	d0, r4, r5
 8011658:	4606      	mov	r6, r0
 801165a:	460f      	mov	r7, r1
 801165c:	f000 ff14 	bl	8012488 <__ieee754_log>
 8011660:	a313      	add	r3, pc, #76	; (adr r3, 80116b0 <__ieee754_log10+0xf0>)
 8011662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011666:	4630      	mov	r0, r6
 8011668:	4639      	mov	r1, r7
 801166a:	ed8d 0b00 	vstr	d0, [sp]
 801166e:	f7ee ffeb 	bl	8000648 <__aeabi_dmul>
 8011672:	ed9d 0b00 	vldr	d0, [sp]
 8011676:	4604      	mov	r4, r0
 8011678:	460d      	mov	r5, r1
 801167a:	a30f      	add	r3, pc, #60	; (adr r3, 80116b8 <__ieee754_log10+0xf8>)
 801167c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011680:	ec51 0b10 	vmov	r0, r1, d0
 8011684:	f7ee ffe0 	bl	8000648 <__aeabi_dmul>
 8011688:	4602      	mov	r2, r0
 801168a:	460b      	mov	r3, r1
 801168c:	4620      	mov	r0, r4
 801168e:	4629      	mov	r1, r5
 8011690:	f7ee fe24 	bl	80002dc <__adddf3>
 8011694:	a30a      	add	r3, pc, #40	; (adr r3, 80116c0 <__ieee754_log10+0x100>)
 8011696:	e9d3 2300 	ldrd	r2, r3, [r3]
 801169a:	4604      	mov	r4, r0
 801169c:	460d      	mov	r5, r1
 801169e:	4630      	mov	r0, r6
 80116a0:	4639      	mov	r1, r7
 80116a2:	f7ee ffd1 	bl	8000648 <__aeabi_dmul>
 80116a6:	4602      	mov	r2, r0
 80116a8:	460b      	mov	r3, r1
 80116aa:	4620      	mov	r0, r4
 80116ac:	4629      	mov	r1, r5
 80116ae:	e7bc      	b.n	801162a <__ieee754_log10+0x6a>
 80116b0:	11f12b36 	.word	0x11f12b36
 80116b4:	3d59fef3 	.word	0x3d59fef3
 80116b8:	1526e50e 	.word	0x1526e50e
 80116bc:	3fdbcb7b 	.word	0x3fdbcb7b
 80116c0:	509f6000 	.word	0x509f6000
 80116c4:	3fd34413 	.word	0x3fd34413
 80116c8:	c3500000 	.word	0xc3500000
 80116cc:	43500000 	.word	0x43500000
 80116d0:	7fefffff 	.word	0x7fefffff
 80116d4:	00000000 	.word	0x00000000

080116d8 <__ieee754_pow>:
 80116d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116dc:	b091      	sub	sp, #68	; 0x44
 80116de:	ed8d 1b00 	vstr	d1, [sp]
 80116e2:	e9dd 2900 	ldrd	r2, r9, [sp]
 80116e6:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80116ea:	ea58 0302 	orrs.w	r3, r8, r2
 80116ee:	ec57 6b10 	vmov	r6, r7, d0
 80116f2:	f000 84be 	beq.w	8012072 <__ieee754_pow+0x99a>
 80116f6:	4b7a      	ldr	r3, [pc, #488]	; (80118e0 <__ieee754_pow+0x208>)
 80116f8:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80116fc:	429c      	cmp	r4, r3
 80116fe:	463d      	mov	r5, r7
 8011700:	ee10 aa10 	vmov	sl, s0
 8011704:	dc09      	bgt.n	801171a <__ieee754_pow+0x42>
 8011706:	d103      	bne.n	8011710 <__ieee754_pow+0x38>
 8011708:	b93e      	cbnz	r6, 801171a <__ieee754_pow+0x42>
 801170a:	45a0      	cmp	r8, r4
 801170c:	dc0d      	bgt.n	801172a <__ieee754_pow+0x52>
 801170e:	e001      	b.n	8011714 <__ieee754_pow+0x3c>
 8011710:	4598      	cmp	r8, r3
 8011712:	dc02      	bgt.n	801171a <__ieee754_pow+0x42>
 8011714:	4598      	cmp	r8, r3
 8011716:	d10e      	bne.n	8011736 <__ieee754_pow+0x5e>
 8011718:	b16a      	cbz	r2, 8011736 <__ieee754_pow+0x5e>
 801171a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801171e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8011722:	ea54 030a 	orrs.w	r3, r4, sl
 8011726:	f000 84a4 	beq.w	8012072 <__ieee754_pow+0x99a>
 801172a:	486e      	ldr	r0, [pc, #440]	; (80118e4 <__ieee754_pow+0x20c>)
 801172c:	b011      	add	sp, #68	; 0x44
 801172e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011732:	f000 bda5 	b.w	8012280 <nan>
 8011736:	2d00      	cmp	r5, #0
 8011738:	da53      	bge.n	80117e2 <__ieee754_pow+0x10a>
 801173a:	4b6b      	ldr	r3, [pc, #428]	; (80118e8 <__ieee754_pow+0x210>)
 801173c:	4598      	cmp	r8, r3
 801173e:	dc4d      	bgt.n	80117dc <__ieee754_pow+0x104>
 8011740:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8011744:	4598      	cmp	r8, r3
 8011746:	dd4c      	ble.n	80117e2 <__ieee754_pow+0x10a>
 8011748:	ea4f 5328 	mov.w	r3, r8, asr #20
 801174c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8011750:	2b14      	cmp	r3, #20
 8011752:	dd26      	ble.n	80117a2 <__ieee754_pow+0xca>
 8011754:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8011758:	fa22 f103 	lsr.w	r1, r2, r3
 801175c:	fa01 f303 	lsl.w	r3, r1, r3
 8011760:	4293      	cmp	r3, r2
 8011762:	d13e      	bne.n	80117e2 <__ieee754_pow+0x10a>
 8011764:	f001 0101 	and.w	r1, r1, #1
 8011768:	f1c1 0b02 	rsb	fp, r1, #2
 801176c:	2a00      	cmp	r2, #0
 801176e:	d15b      	bne.n	8011828 <__ieee754_pow+0x150>
 8011770:	4b5b      	ldr	r3, [pc, #364]	; (80118e0 <__ieee754_pow+0x208>)
 8011772:	4598      	cmp	r8, r3
 8011774:	d124      	bne.n	80117c0 <__ieee754_pow+0xe8>
 8011776:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801177a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801177e:	ea53 030a 	orrs.w	r3, r3, sl
 8011782:	f000 8476 	beq.w	8012072 <__ieee754_pow+0x99a>
 8011786:	4b59      	ldr	r3, [pc, #356]	; (80118ec <__ieee754_pow+0x214>)
 8011788:	429c      	cmp	r4, r3
 801178a:	dd2d      	ble.n	80117e8 <__ieee754_pow+0x110>
 801178c:	f1b9 0f00 	cmp.w	r9, #0
 8011790:	f280 8473 	bge.w	801207a <__ieee754_pow+0x9a2>
 8011794:	2000      	movs	r0, #0
 8011796:	2100      	movs	r1, #0
 8011798:	ec41 0b10 	vmov	d0, r0, r1
 801179c:	b011      	add	sp, #68	; 0x44
 801179e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117a2:	2a00      	cmp	r2, #0
 80117a4:	d13e      	bne.n	8011824 <__ieee754_pow+0x14c>
 80117a6:	f1c3 0314 	rsb	r3, r3, #20
 80117aa:	fa48 f103 	asr.w	r1, r8, r3
 80117ae:	fa01 f303 	lsl.w	r3, r1, r3
 80117b2:	4543      	cmp	r3, r8
 80117b4:	f040 8469 	bne.w	801208a <__ieee754_pow+0x9b2>
 80117b8:	f001 0101 	and.w	r1, r1, #1
 80117bc:	f1c1 0b02 	rsb	fp, r1, #2
 80117c0:	4b4b      	ldr	r3, [pc, #300]	; (80118f0 <__ieee754_pow+0x218>)
 80117c2:	4598      	cmp	r8, r3
 80117c4:	d118      	bne.n	80117f8 <__ieee754_pow+0x120>
 80117c6:	f1b9 0f00 	cmp.w	r9, #0
 80117ca:	f280 845a 	bge.w	8012082 <__ieee754_pow+0x9aa>
 80117ce:	4948      	ldr	r1, [pc, #288]	; (80118f0 <__ieee754_pow+0x218>)
 80117d0:	4632      	mov	r2, r6
 80117d2:	463b      	mov	r3, r7
 80117d4:	2000      	movs	r0, #0
 80117d6:	f7ef f861 	bl	800089c <__aeabi_ddiv>
 80117da:	e7dd      	b.n	8011798 <__ieee754_pow+0xc0>
 80117dc:	f04f 0b02 	mov.w	fp, #2
 80117e0:	e7c4      	b.n	801176c <__ieee754_pow+0x94>
 80117e2:	f04f 0b00 	mov.w	fp, #0
 80117e6:	e7c1      	b.n	801176c <__ieee754_pow+0x94>
 80117e8:	f1b9 0f00 	cmp.w	r9, #0
 80117ec:	dad2      	bge.n	8011794 <__ieee754_pow+0xbc>
 80117ee:	e9dd 0300 	ldrd	r0, r3, [sp]
 80117f2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80117f6:	e7cf      	b.n	8011798 <__ieee754_pow+0xc0>
 80117f8:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80117fc:	d106      	bne.n	801180c <__ieee754_pow+0x134>
 80117fe:	4632      	mov	r2, r6
 8011800:	463b      	mov	r3, r7
 8011802:	4610      	mov	r0, r2
 8011804:	4619      	mov	r1, r3
 8011806:	f7ee ff1f 	bl	8000648 <__aeabi_dmul>
 801180a:	e7c5      	b.n	8011798 <__ieee754_pow+0xc0>
 801180c:	4b39      	ldr	r3, [pc, #228]	; (80118f4 <__ieee754_pow+0x21c>)
 801180e:	4599      	cmp	r9, r3
 8011810:	d10a      	bne.n	8011828 <__ieee754_pow+0x150>
 8011812:	2d00      	cmp	r5, #0
 8011814:	db08      	blt.n	8011828 <__ieee754_pow+0x150>
 8011816:	ec47 6b10 	vmov	d0, r6, r7
 801181a:	b011      	add	sp, #68	; 0x44
 801181c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011820:	f000 bc68 	b.w	80120f4 <__ieee754_sqrt>
 8011824:	f04f 0b00 	mov.w	fp, #0
 8011828:	ec47 6b10 	vmov	d0, r6, r7
 801182c:	f000 fd12 	bl	8012254 <fabs>
 8011830:	ec51 0b10 	vmov	r0, r1, d0
 8011834:	f1ba 0f00 	cmp.w	sl, #0
 8011838:	d127      	bne.n	801188a <__ieee754_pow+0x1b2>
 801183a:	b124      	cbz	r4, 8011846 <__ieee754_pow+0x16e>
 801183c:	4b2c      	ldr	r3, [pc, #176]	; (80118f0 <__ieee754_pow+0x218>)
 801183e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8011842:	429a      	cmp	r2, r3
 8011844:	d121      	bne.n	801188a <__ieee754_pow+0x1b2>
 8011846:	f1b9 0f00 	cmp.w	r9, #0
 801184a:	da05      	bge.n	8011858 <__ieee754_pow+0x180>
 801184c:	4602      	mov	r2, r0
 801184e:	460b      	mov	r3, r1
 8011850:	2000      	movs	r0, #0
 8011852:	4927      	ldr	r1, [pc, #156]	; (80118f0 <__ieee754_pow+0x218>)
 8011854:	f7ef f822 	bl	800089c <__aeabi_ddiv>
 8011858:	2d00      	cmp	r5, #0
 801185a:	da9d      	bge.n	8011798 <__ieee754_pow+0xc0>
 801185c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8011860:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8011864:	ea54 030b 	orrs.w	r3, r4, fp
 8011868:	d108      	bne.n	801187c <__ieee754_pow+0x1a4>
 801186a:	4602      	mov	r2, r0
 801186c:	460b      	mov	r3, r1
 801186e:	4610      	mov	r0, r2
 8011870:	4619      	mov	r1, r3
 8011872:	f7ee fd31 	bl	80002d8 <__aeabi_dsub>
 8011876:	4602      	mov	r2, r0
 8011878:	460b      	mov	r3, r1
 801187a:	e7ac      	b.n	80117d6 <__ieee754_pow+0xfe>
 801187c:	f1bb 0f01 	cmp.w	fp, #1
 8011880:	d18a      	bne.n	8011798 <__ieee754_pow+0xc0>
 8011882:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011886:	4619      	mov	r1, r3
 8011888:	e786      	b.n	8011798 <__ieee754_pow+0xc0>
 801188a:	0fed      	lsrs	r5, r5, #31
 801188c:	1e6b      	subs	r3, r5, #1
 801188e:	930d      	str	r3, [sp, #52]	; 0x34
 8011890:	ea5b 0303 	orrs.w	r3, fp, r3
 8011894:	d102      	bne.n	801189c <__ieee754_pow+0x1c4>
 8011896:	4632      	mov	r2, r6
 8011898:	463b      	mov	r3, r7
 801189a:	e7e8      	b.n	801186e <__ieee754_pow+0x196>
 801189c:	4b16      	ldr	r3, [pc, #88]	; (80118f8 <__ieee754_pow+0x220>)
 801189e:	4598      	cmp	r8, r3
 80118a0:	f340 80fe 	ble.w	8011aa0 <__ieee754_pow+0x3c8>
 80118a4:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80118a8:	4598      	cmp	r8, r3
 80118aa:	dd0a      	ble.n	80118c2 <__ieee754_pow+0x1ea>
 80118ac:	4b0f      	ldr	r3, [pc, #60]	; (80118ec <__ieee754_pow+0x214>)
 80118ae:	429c      	cmp	r4, r3
 80118b0:	dc0d      	bgt.n	80118ce <__ieee754_pow+0x1f6>
 80118b2:	f1b9 0f00 	cmp.w	r9, #0
 80118b6:	f6bf af6d 	bge.w	8011794 <__ieee754_pow+0xbc>
 80118ba:	a307      	add	r3, pc, #28	; (adr r3, 80118d8 <__ieee754_pow+0x200>)
 80118bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118c0:	e79f      	b.n	8011802 <__ieee754_pow+0x12a>
 80118c2:	4b0e      	ldr	r3, [pc, #56]	; (80118fc <__ieee754_pow+0x224>)
 80118c4:	429c      	cmp	r4, r3
 80118c6:	ddf4      	ble.n	80118b2 <__ieee754_pow+0x1da>
 80118c8:	4b09      	ldr	r3, [pc, #36]	; (80118f0 <__ieee754_pow+0x218>)
 80118ca:	429c      	cmp	r4, r3
 80118cc:	dd18      	ble.n	8011900 <__ieee754_pow+0x228>
 80118ce:	f1b9 0f00 	cmp.w	r9, #0
 80118d2:	dcf2      	bgt.n	80118ba <__ieee754_pow+0x1e2>
 80118d4:	e75e      	b.n	8011794 <__ieee754_pow+0xbc>
 80118d6:	bf00      	nop
 80118d8:	8800759c 	.word	0x8800759c
 80118dc:	7e37e43c 	.word	0x7e37e43c
 80118e0:	7ff00000 	.word	0x7ff00000
 80118e4:	08013b19 	.word	0x08013b19
 80118e8:	433fffff 	.word	0x433fffff
 80118ec:	3fefffff 	.word	0x3fefffff
 80118f0:	3ff00000 	.word	0x3ff00000
 80118f4:	3fe00000 	.word	0x3fe00000
 80118f8:	41e00000 	.word	0x41e00000
 80118fc:	3feffffe 	.word	0x3feffffe
 8011900:	2200      	movs	r2, #0
 8011902:	4b63      	ldr	r3, [pc, #396]	; (8011a90 <__ieee754_pow+0x3b8>)
 8011904:	f7ee fce8 	bl	80002d8 <__aeabi_dsub>
 8011908:	a355      	add	r3, pc, #340	; (adr r3, 8011a60 <__ieee754_pow+0x388>)
 801190a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801190e:	4604      	mov	r4, r0
 8011910:	460d      	mov	r5, r1
 8011912:	f7ee fe99 	bl	8000648 <__aeabi_dmul>
 8011916:	a354      	add	r3, pc, #336	; (adr r3, 8011a68 <__ieee754_pow+0x390>)
 8011918:	e9d3 2300 	ldrd	r2, r3, [r3]
 801191c:	4606      	mov	r6, r0
 801191e:	460f      	mov	r7, r1
 8011920:	4620      	mov	r0, r4
 8011922:	4629      	mov	r1, r5
 8011924:	f7ee fe90 	bl	8000648 <__aeabi_dmul>
 8011928:	2200      	movs	r2, #0
 801192a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801192e:	4b59      	ldr	r3, [pc, #356]	; (8011a94 <__ieee754_pow+0x3bc>)
 8011930:	4620      	mov	r0, r4
 8011932:	4629      	mov	r1, r5
 8011934:	f7ee fe88 	bl	8000648 <__aeabi_dmul>
 8011938:	4602      	mov	r2, r0
 801193a:	460b      	mov	r3, r1
 801193c:	a14c      	add	r1, pc, #304	; (adr r1, 8011a70 <__ieee754_pow+0x398>)
 801193e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011942:	f7ee fcc9 	bl	80002d8 <__aeabi_dsub>
 8011946:	4622      	mov	r2, r4
 8011948:	462b      	mov	r3, r5
 801194a:	f7ee fe7d 	bl	8000648 <__aeabi_dmul>
 801194e:	4602      	mov	r2, r0
 8011950:	460b      	mov	r3, r1
 8011952:	2000      	movs	r0, #0
 8011954:	4950      	ldr	r1, [pc, #320]	; (8011a98 <__ieee754_pow+0x3c0>)
 8011956:	f7ee fcbf 	bl	80002d8 <__aeabi_dsub>
 801195a:	4622      	mov	r2, r4
 801195c:	462b      	mov	r3, r5
 801195e:	4680      	mov	r8, r0
 8011960:	4689      	mov	r9, r1
 8011962:	4620      	mov	r0, r4
 8011964:	4629      	mov	r1, r5
 8011966:	f7ee fe6f 	bl	8000648 <__aeabi_dmul>
 801196a:	4602      	mov	r2, r0
 801196c:	460b      	mov	r3, r1
 801196e:	4640      	mov	r0, r8
 8011970:	4649      	mov	r1, r9
 8011972:	f7ee fe69 	bl	8000648 <__aeabi_dmul>
 8011976:	a340      	add	r3, pc, #256	; (adr r3, 8011a78 <__ieee754_pow+0x3a0>)
 8011978:	e9d3 2300 	ldrd	r2, r3, [r3]
 801197c:	f7ee fe64 	bl	8000648 <__aeabi_dmul>
 8011980:	4602      	mov	r2, r0
 8011982:	460b      	mov	r3, r1
 8011984:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011988:	f7ee fca6 	bl	80002d8 <__aeabi_dsub>
 801198c:	4602      	mov	r2, r0
 801198e:	460b      	mov	r3, r1
 8011990:	4604      	mov	r4, r0
 8011992:	460d      	mov	r5, r1
 8011994:	4630      	mov	r0, r6
 8011996:	4639      	mov	r1, r7
 8011998:	f7ee fca0 	bl	80002dc <__adddf3>
 801199c:	2000      	movs	r0, #0
 801199e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80119a2:	4632      	mov	r2, r6
 80119a4:	463b      	mov	r3, r7
 80119a6:	f7ee fc97 	bl	80002d8 <__aeabi_dsub>
 80119aa:	4602      	mov	r2, r0
 80119ac:	460b      	mov	r3, r1
 80119ae:	4620      	mov	r0, r4
 80119b0:	4629      	mov	r1, r5
 80119b2:	f7ee fc91 	bl	80002d8 <__aeabi_dsub>
 80119b6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80119b8:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 80119bc:	4313      	orrs	r3, r2
 80119be:	4606      	mov	r6, r0
 80119c0:	460f      	mov	r7, r1
 80119c2:	f040 81eb 	bne.w	8011d9c <__ieee754_pow+0x6c4>
 80119c6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8011a80 <__ieee754_pow+0x3a8>
 80119ca:	e9dd 4500 	ldrd	r4, r5, [sp]
 80119ce:	2400      	movs	r4, #0
 80119d0:	4622      	mov	r2, r4
 80119d2:	462b      	mov	r3, r5
 80119d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80119d8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80119dc:	f7ee fc7c 	bl	80002d8 <__aeabi_dsub>
 80119e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80119e4:	f7ee fe30 	bl	8000648 <__aeabi_dmul>
 80119e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80119ec:	4680      	mov	r8, r0
 80119ee:	4689      	mov	r9, r1
 80119f0:	4630      	mov	r0, r6
 80119f2:	4639      	mov	r1, r7
 80119f4:	f7ee fe28 	bl	8000648 <__aeabi_dmul>
 80119f8:	4602      	mov	r2, r0
 80119fa:	460b      	mov	r3, r1
 80119fc:	4640      	mov	r0, r8
 80119fe:	4649      	mov	r1, r9
 8011a00:	f7ee fc6c 	bl	80002dc <__adddf3>
 8011a04:	4622      	mov	r2, r4
 8011a06:	462b      	mov	r3, r5
 8011a08:	4680      	mov	r8, r0
 8011a0a:	4689      	mov	r9, r1
 8011a0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011a10:	f7ee fe1a 	bl	8000648 <__aeabi_dmul>
 8011a14:	460b      	mov	r3, r1
 8011a16:	4604      	mov	r4, r0
 8011a18:	460d      	mov	r5, r1
 8011a1a:	4602      	mov	r2, r0
 8011a1c:	4649      	mov	r1, r9
 8011a1e:	4640      	mov	r0, r8
 8011a20:	e9cd 4500 	strd	r4, r5, [sp]
 8011a24:	f7ee fc5a 	bl	80002dc <__adddf3>
 8011a28:	4b1c      	ldr	r3, [pc, #112]	; (8011a9c <__ieee754_pow+0x3c4>)
 8011a2a:	4299      	cmp	r1, r3
 8011a2c:	4606      	mov	r6, r0
 8011a2e:	460f      	mov	r7, r1
 8011a30:	468b      	mov	fp, r1
 8011a32:	f340 82f7 	ble.w	8012024 <__ieee754_pow+0x94c>
 8011a36:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8011a3a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8011a3e:	4303      	orrs	r3, r0
 8011a40:	f000 81ea 	beq.w	8011e18 <__ieee754_pow+0x740>
 8011a44:	a310      	add	r3, pc, #64	; (adr r3, 8011a88 <__ieee754_pow+0x3b0>)
 8011a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011a4e:	f7ee fdfb 	bl	8000648 <__aeabi_dmul>
 8011a52:	a30d      	add	r3, pc, #52	; (adr r3, 8011a88 <__ieee754_pow+0x3b0>)
 8011a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a58:	e6d5      	b.n	8011806 <__ieee754_pow+0x12e>
 8011a5a:	bf00      	nop
 8011a5c:	f3af 8000 	nop.w
 8011a60:	60000000 	.word	0x60000000
 8011a64:	3ff71547 	.word	0x3ff71547
 8011a68:	f85ddf44 	.word	0xf85ddf44
 8011a6c:	3e54ae0b 	.word	0x3e54ae0b
 8011a70:	55555555 	.word	0x55555555
 8011a74:	3fd55555 	.word	0x3fd55555
 8011a78:	652b82fe 	.word	0x652b82fe
 8011a7c:	3ff71547 	.word	0x3ff71547
 8011a80:	00000000 	.word	0x00000000
 8011a84:	bff00000 	.word	0xbff00000
 8011a88:	8800759c 	.word	0x8800759c
 8011a8c:	7e37e43c 	.word	0x7e37e43c
 8011a90:	3ff00000 	.word	0x3ff00000
 8011a94:	3fd00000 	.word	0x3fd00000
 8011a98:	3fe00000 	.word	0x3fe00000
 8011a9c:	408fffff 	.word	0x408fffff
 8011aa0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8011aa4:	f04f 0200 	mov.w	r2, #0
 8011aa8:	da05      	bge.n	8011ab6 <__ieee754_pow+0x3de>
 8011aaa:	4bd3      	ldr	r3, [pc, #844]	; (8011df8 <__ieee754_pow+0x720>)
 8011aac:	f7ee fdcc 	bl	8000648 <__aeabi_dmul>
 8011ab0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8011ab4:	460c      	mov	r4, r1
 8011ab6:	1523      	asrs	r3, r4, #20
 8011ab8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8011abc:	4413      	add	r3, r2
 8011abe:	9309      	str	r3, [sp, #36]	; 0x24
 8011ac0:	4bce      	ldr	r3, [pc, #824]	; (8011dfc <__ieee754_pow+0x724>)
 8011ac2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8011ac6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8011aca:	429c      	cmp	r4, r3
 8011acc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8011ad0:	dd08      	ble.n	8011ae4 <__ieee754_pow+0x40c>
 8011ad2:	4bcb      	ldr	r3, [pc, #812]	; (8011e00 <__ieee754_pow+0x728>)
 8011ad4:	429c      	cmp	r4, r3
 8011ad6:	f340 815e 	ble.w	8011d96 <__ieee754_pow+0x6be>
 8011ada:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011adc:	3301      	adds	r3, #1
 8011ade:	9309      	str	r3, [sp, #36]	; 0x24
 8011ae0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8011ae4:	f04f 0a00 	mov.w	sl, #0
 8011ae8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8011aec:	930c      	str	r3, [sp, #48]	; 0x30
 8011aee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011af0:	4bc4      	ldr	r3, [pc, #784]	; (8011e04 <__ieee754_pow+0x72c>)
 8011af2:	4413      	add	r3, r2
 8011af4:	ed93 7b00 	vldr	d7, [r3]
 8011af8:	4629      	mov	r1, r5
 8011afa:	ec53 2b17 	vmov	r2, r3, d7
 8011afe:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011b02:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8011b06:	f7ee fbe7 	bl	80002d8 <__aeabi_dsub>
 8011b0a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8011b0e:	4606      	mov	r6, r0
 8011b10:	460f      	mov	r7, r1
 8011b12:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011b16:	f7ee fbe1 	bl	80002dc <__adddf3>
 8011b1a:	4602      	mov	r2, r0
 8011b1c:	460b      	mov	r3, r1
 8011b1e:	2000      	movs	r0, #0
 8011b20:	49b9      	ldr	r1, [pc, #740]	; (8011e08 <__ieee754_pow+0x730>)
 8011b22:	f7ee febb 	bl	800089c <__aeabi_ddiv>
 8011b26:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8011b2a:	4602      	mov	r2, r0
 8011b2c:	460b      	mov	r3, r1
 8011b2e:	4630      	mov	r0, r6
 8011b30:	4639      	mov	r1, r7
 8011b32:	f7ee fd89 	bl	8000648 <__aeabi_dmul>
 8011b36:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011b3a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8011b3e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8011b42:	2300      	movs	r3, #0
 8011b44:	9302      	str	r3, [sp, #8]
 8011b46:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8011b4a:	106d      	asrs	r5, r5, #1
 8011b4c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8011b50:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8011b54:	2200      	movs	r2, #0
 8011b56:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8011b5a:	4640      	mov	r0, r8
 8011b5c:	4649      	mov	r1, r9
 8011b5e:	4614      	mov	r4, r2
 8011b60:	461d      	mov	r5, r3
 8011b62:	f7ee fd71 	bl	8000648 <__aeabi_dmul>
 8011b66:	4602      	mov	r2, r0
 8011b68:	460b      	mov	r3, r1
 8011b6a:	4630      	mov	r0, r6
 8011b6c:	4639      	mov	r1, r7
 8011b6e:	f7ee fbb3 	bl	80002d8 <__aeabi_dsub>
 8011b72:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011b76:	4606      	mov	r6, r0
 8011b78:	460f      	mov	r7, r1
 8011b7a:	4620      	mov	r0, r4
 8011b7c:	4629      	mov	r1, r5
 8011b7e:	f7ee fbab 	bl	80002d8 <__aeabi_dsub>
 8011b82:	4602      	mov	r2, r0
 8011b84:	460b      	mov	r3, r1
 8011b86:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011b8a:	f7ee fba5 	bl	80002d8 <__aeabi_dsub>
 8011b8e:	4642      	mov	r2, r8
 8011b90:	464b      	mov	r3, r9
 8011b92:	f7ee fd59 	bl	8000648 <__aeabi_dmul>
 8011b96:	4602      	mov	r2, r0
 8011b98:	460b      	mov	r3, r1
 8011b9a:	4630      	mov	r0, r6
 8011b9c:	4639      	mov	r1, r7
 8011b9e:	f7ee fb9b 	bl	80002d8 <__aeabi_dsub>
 8011ba2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8011ba6:	f7ee fd4f 	bl	8000648 <__aeabi_dmul>
 8011baa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011bae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8011bb2:	4610      	mov	r0, r2
 8011bb4:	4619      	mov	r1, r3
 8011bb6:	f7ee fd47 	bl	8000648 <__aeabi_dmul>
 8011bba:	a37b      	add	r3, pc, #492	; (adr r3, 8011da8 <__ieee754_pow+0x6d0>)
 8011bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bc0:	4604      	mov	r4, r0
 8011bc2:	460d      	mov	r5, r1
 8011bc4:	f7ee fd40 	bl	8000648 <__aeabi_dmul>
 8011bc8:	a379      	add	r3, pc, #484	; (adr r3, 8011db0 <__ieee754_pow+0x6d8>)
 8011bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bce:	f7ee fb85 	bl	80002dc <__adddf3>
 8011bd2:	4622      	mov	r2, r4
 8011bd4:	462b      	mov	r3, r5
 8011bd6:	f7ee fd37 	bl	8000648 <__aeabi_dmul>
 8011bda:	a377      	add	r3, pc, #476	; (adr r3, 8011db8 <__ieee754_pow+0x6e0>)
 8011bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011be0:	f7ee fb7c 	bl	80002dc <__adddf3>
 8011be4:	4622      	mov	r2, r4
 8011be6:	462b      	mov	r3, r5
 8011be8:	f7ee fd2e 	bl	8000648 <__aeabi_dmul>
 8011bec:	a374      	add	r3, pc, #464	; (adr r3, 8011dc0 <__ieee754_pow+0x6e8>)
 8011bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bf2:	f7ee fb73 	bl	80002dc <__adddf3>
 8011bf6:	4622      	mov	r2, r4
 8011bf8:	462b      	mov	r3, r5
 8011bfa:	f7ee fd25 	bl	8000648 <__aeabi_dmul>
 8011bfe:	a372      	add	r3, pc, #456	; (adr r3, 8011dc8 <__ieee754_pow+0x6f0>)
 8011c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c04:	f7ee fb6a 	bl	80002dc <__adddf3>
 8011c08:	4622      	mov	r2, r4
 8011c0a:	462b      	mov	r3, r5
 8011c0c:	f7ee fd1c 	bl	8000648 <__aeabi_dmul>
 8011c10:	a36f      	add	r3, pc, #444	; (adr r3, 8011dd0 <__ieee754_pow+0x6f8>)
 8011c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c16:	f7ee fb61 	bl	80002dc <__adddf3>
 8011c1a:	4622      	mov	r2, r4
 8011c1c:	4606      	mov	r6, r0
 8011c1e:	460f      	mov	r7, r1
 8011c20:	462b      	mov	r3, r5
 8011c22:	4620      	mov	r0, r4
 8011c24:	4629      	mov	r1, r5
 8011c26:	f7ee fd0f 	bl	8000648 <__aeabi_dmul>
 8011c2a:	4602      	mov	r2, r0
 8011c2c:	460b      	mov	r3, r1
 8011c2e:	4630      	mov	r0, r6
 8011c30:	4639      	mov	r1, r7
 8011c32:	f7ee fd09 	bl	8000648 <__aeabi_dmul>
 8011c36:	4642      	mov	r2, r8
 8011c38:	4604      	mov	r4, r0
 8011c3a:	460d      	mov	r5, r1
 8011c3c:	464b      	mov	r3, r9
 8011c3e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011c42:	f7ee fb4b 	bl	80002dc <__adddf3>
 8011c46:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011c4a:	f7ee fcfd 	bl	8000648 <__aeabi_dmul>
 8011c4e:	4622      	mov	r2, r4
 8011c50:	462b      	mov	r3, r5
 8011c52:	f7ee fb43 	bl	80002dc <__adddf3>
 8011c56:	4642      	mov	r2, r8
 8011c58:	4606      	mov	r6, r0
 8011c5a:	460f      	mov	r7, r1
 8011c5c:	464b      	mov	r3, r9
 8011c5e:	4640      	mov	r0, r8
 8011c60:	4649      	mov	r1, r9
 8011c62:	f7ee fcf1 	bl	8000648 <__aeabi_dmul>
 8011c66:	2200      	movs	r2, #0
 8011c68:	4b68      	ldr	r3, [pc, #416]	; (8011e0c <__ieee754_pow+0x734>)
 8011c6a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8011c6e:	f7ee fb35 	bl	80002dc <__adddf3>
 8011c72:	4632      	mov	r2, r6
 8011c74:	463b      	mov	r3, r7
 8011c76:	f7ee fb31 	bl	80002dc <__adddf3>
 8011c7a:	9802      	ldr	r0, [sp, #8]
 8011c7c:	460d      	mov	r5, r1
 8011c7e:	4604      	mov	r4, r0
 8011c80:	4602      	mov	r2, r0
 8011c82:	460b      	mov	r3, r1
 8011c84:	4640      	mov	r0, r8
 8011c86:	4649      	mov	r1, r9
 8011c88:	f7ee fcde 	bl	8000648 <__aeabi_dmul>
 8011c8c:	2200      	movs	r2, #0
 8011c8e:	4680      	mov	r8, r0
 8011c90:	4689      	mov	r9, r1
 8011c92:	4b5e      	ldr	r3, [pc, #376]	; (8011e0c <__ieee754_pow+0x734>)
 8011c94:	4620      	mov	r0, r4
 8011c96:	4629      	mov	r1, r5
 8011c98:	f7ee fb1e 	bl	80002d8 <__aeabi_dsub>
 8011c9c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8011ca0:	f7ee fb1a 	bl	80002d8 <__aeabi_dsub>
 8011ca4:	4602      	mov	r2, r0
 8011ca6:	460b      	mov	r3, r1
 8011ca8:	4630      	mov	r0, r6
 8011caa:	4639      	mov	r1, r7
 8011cac:	f7ee fb14 	bl	80002d8 <__aeabi_dsub>
 8011cb0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011cb4:	f7ee fcc8 	bl	8000648 <__aeabi_dmul>
 8011cb8:	4622      	mov	r2, r4
 8011cba:	4606      	mov	r6, r0
 8011cbc:	460f      	mov	r7, r1
 8011cbe:	462b      	mov	r3, r5
 8011cc0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011cc4:	f7ee fcc0 	bl	8000648 <__aeabi_dmul>
 8011cc8:	4602      	mov	r2, r0
 8011cca:	460b      	mov	r3, r1
 8011ccc:	4630      	mov	r0, r6
 8011cce:	4639      	mov	r1, r7
 8011cd0:	f7ee fb04 	bl	80002dc <__adddf3>
 8011cd4:	4606      	mov	r6, r0
 8011cd6:	460f      	mov	r7, r1
 8011cd8:	4602      	mov	r2, r0
 8011cda:	460b      	mov	r3, r1
 8011cdc:	4640      	mov	r0, r8
 8011cde:	4649      	mov	r1, r9
 8011ce0:	f7ee fafc 	bl	80002dc <__adddf3>
 8011ce4:	9802      	ldr	r0, [sp, #8]
 8011ce6:	a33c      	add	r3, pc, #240	; (adr r3, 8011dd8 <__ieee754_pow+0x700>)
 8011ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cec:	4604      	mov	r4, r0
 8011cee:	460d      	mov	r5, r1
 8011cf0:	f7ee fcaa 	bl	8000648 <__aeabi_dmul>
 8011cf4:	4642      	mov	r2, r8
 8011cf6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8011cfa:	464b      	mov	r3, r9
 8011cfc:	4620      	mov	r0, r4
 8011cfe:	4629      	mov	r1, r5
 8011d00:	f7ee faea 	bl	80002d8 <__aeabi_dsub>
 8011d04:	4602      	mov	r2, r0
 8011d06:	460b      	mov	r3, r1
 8011d08:	4630      	mov	r0, r6
 8011d0a:	4639      	mov	r1, r7
 8011d0c:	f7ee fae4 	bl	80002d8 <__aeabi_dsub>
 8011d10:	a333      	add	r3, pc, #204	; (adr r3, 8011de0 <__ieee754_pow+0x708>)
 8011d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d16:	f7ee fc97 	bl	8000648 <__aeabi_dmul>
 8011d1a:	a333      	add	r3, pc, #204	; (adr r3, 8011de8 <__ieee754_pow+0x710>)
 8011d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d20:	4606      	mov	r6, r0
 8011d22:	460f      	mov	r7, r1
 8011d24:	4620      	mov	r0, r4
 8011d26:	4629      	mov	r1, r5
 8011d28:	f7ee fc8e 	bl	8000648 <__aeabi_dmul>
 8011d2c:	4602      	mov	r2, r0
 8011d2e:	460b      	mov	r3, r1
 8011d30:	4630      	mov	r0, r6
 8011d32:	4639      	mov	r1, r7
 8011d34:	f7ee fad2 	bl	80002dc <__adddf3>
 8011d38:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011d3a:	4b35      	ldr	r3, [pc, #212]	; (8011e10 <__ieee754_pow+0x738>)
 8011d3c:	4413      	add	r3, r2
 8011d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d42:	f7ee facb 	bl	80002dc <__adddf3>
 8011d46:	4604      	mov	r4, r0
 8011d48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011d4a:	460d      	mov	r5, r1
 8011d4c:	f7ee fc12 	bl	8000574 <__aeabi_i2d>
 8011d50:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011d52:	4b30      	ldr	r3, [pc, #192]	; (8011e14 <__ieee754_pow+0x73c>)
 8011d54:	4413      	add	r3, r2
 8011d56:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011d5a:	4606      	mov	r6, r0
 8011d5c:	460f      	mov	r7, r1
 8011d5e:	4622      	mov	r2, r4
 8011d60:	462b      	mov	r3, r5
 8011d62:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011d66:	f7ee fab9 	bl	80002dc <__adddf3>
 8011d6a:	4642      	mov	r2, r8
 8011d6c:	464b      	mov	r3, r9
 8011d6e:	f7ee fab5 	bl	80002dc <__adddf3>
 8011d72:	4632      	mov	r2, r6
 8011d74:	463b      	mov	r3, r7
 8011d76:	f7ee fab1 	bl	80002dc <__adddf3>
 8011d7a:	9802      	ldr	r0, [sp, #8]
 8011d7c:	4632      	mov	r2, r6
 8011d7e:	463b      	mov	r3, r7
 8011d80:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011d84:	f7ee faa8 	bl	80002d8 <__aeabi_dsub>
 8011d88:	4642      	mov	r2, r8
 8011d8a:	464b      	mov	r3, r9
 8011d8c:	f7ee faa4 	bl	80002d8 <__aeabi_dsub>
 8011d90:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011d94:	e607      	b.n	80119a6 <__ieee754_pow+0x2ce>
 8011d96:	f04f 0a01 	mov.w	sl, #1
 8011d9a:	e6a5      	b.n	8011ae8 <__ieee754_pow+0x410>
 8011d9c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8011df0 <__ieee754_pow+0x718>
 8011da0:	e613      	b.n	80119ca <__ieee754_pow+0x2f2>
 8011da2:	bf00      	nop
 8011da4:	f3af 8000 	nop.w
 8011da8:	4a454eef 	.word	0x4a454eef
 8011dac:	3fca7e28 	.word	0x3fca7e28
 8011db0:	93c9db65 	.word	0x93c9db65
 8011db4:	3fcd864a 	.word	0x3fcd864a
 8011db8:	a91d4101 	.word	0xa91d4101
 8011dbc:	3fd17460 	.word	0x3fd17460
 8011dc0:	518f264d 	.word	0x518f264d
 8011dc4:	3fd55555 	.word	0x3fd55555
 8011dc8:	db6fabff 	.word	0xdb6fabff
 8011dcc:	3fdb6db6 	.word	0x3fdb6db6
 8011dd0:	33333303 	.word	0x33333303
 8011dd4:	3fe33333 	.word	0x3fe33333
 8011dd8:	e0000000 	.word	0xe0000000
 8011ddc:	3feec709 	.word	0x3feec709
 8011de0:	dc3a03fd 	.word	0xdc3a03fd
 8011de4:	3feec709 	.word	0x3feec709
 8011de8:	145b01f5 	.word	0x145b01f5
 8011dec:	be3e2fe0 	.word	0xbe3e2fe0
 8011df0:	00000000 	.word	0x00000000
 8011df4:	3ff00000 	.word	0x3ff00000
 8011df8:	43400000 	.word	0x43400000
 8011dfc:	0003988e 	.word	0x0003988e
 8011e00:	000bb679 	.word	0x000bb679
 8011e04:	08013c40 	.word	0x08013c40
 8011e08:	3ff00000 	.word	0x3ff00000
 8011e0c:	40080000 	.word	0x40080000
 8011e10:	08013c60 	.word	0x08013c60
 8011e14:	08013c50 	.word	0x08013c50
 8011e18:	a3b4      	add	r3, pc, #720	; (adr r3, 80120ec <__ieee754_pow+0xa14>)
 8011e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e1e:	4640      	mov	r0, r8
 8011e20:	4649      	mov	r1, r9
 8011e22:	f7ee fa5b 	bl	80002dc <__adddf3>
 8011e26:	4622      	mov	r2, r4
 8011e28:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011e2c:	462b      	mov	r3, r5
 8011e2e:	4630      	mov	r0, r6
 8011e30:	4639      	mov	r1, r7
 8011e32:	f7ee fa51 	bl	80002d8 <__aeabi_dsub>
 8011e36:	4602      	mov	r2, r0
 8011e38:	460b      	mov	r3, r1
 8011e3a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011e3e:	f7ee fe93 	bl	8000b68 <__aeabi_dcmpgt>
 8011e42:	2800      	cmp	r0, #0
 8011e44:	f47f adfe 	bne.w	8011a44 <__ieee754_pow+0x36c>
 8011e48:	4aa3      	ldr	r2, [pc, #652]	; (80120d8 <__ieee754_pow+0xa00>)
 8011e4a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011e4e:	4293      	cmp	r3, r2
 8011e50:	f340 810a 	ble.w	8012068 <__ieee754_pow+0x990>
 8011e54:	151b      	asrs	r3, r3, #20
 8011e56:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8011e5a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8011e5e:	fa4a f303 	asr.w	r3, sl, r3
 8011e62:	445b      	add	r3, fp
 8011e64:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8011e68:	4e9c      	ldr	r6, [pc, #624]	; (80120dc <__ieee754_pow+0xa04>)
 8011e6a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8011e6e:	4116      	asrs	r6, r2
 8011e70:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8011e74:	2000      	movs	r0, #0
 8011e76:	ea23 0106 	bic.w	r1, r3, r6
 8011e7a:	f1c2 0214 	rsb	r2, r2, #20
 8011e7e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8011e82:	fa4a fa02 	asr.w	sl, sl, r2
 8011e86:	f1bb 0f00 	cmp.w	fp, #0
 8011e8a:	4602      	mov	r2, r0
 8011e8c:	460b      	mov	r3, r1
 8011e8e:	4620      	mov	r0, r4
 8011e90:	4629      	mov	r1, r5
 8011e92:	bfb8      	it	lt
 8011e94:	f1ca 0a00 	rsblt	sl, sl, #0
 8011e98:	f7ee fa1e 	bl	80002d8 <__aeabi_dsub>
 8011e9c:	e9cd 0100 	strd	r0, r1, [sp]
 8011ea0:	4642      	mov	r2, r8
 8011ea2:	464b      	mov	r3, r9
 8011ea4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011ea8:	f7ee fa18 	bl	80002dc <__adddf3>
 8011eac:	2000      	movs	r0, #0
 8011eae:	a378      	add	r3, pc, #480	; (adr r3, 8012090 <__ieee754_pow+0x9b8>)
 8011eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011eb4:	4604      	mov	r4, r0
 8011eb6:	460d      	mov	r5, r1
 8011eb8:	f7ee fbc6 	bl	8000648 <__aeabi_dmul>
 8011ebc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011ec0:	4606      	mov	r6, r0
 8011ec2:	460f      	mov	r7, r1
 8011ec4:	4620      	mov	r0, r4
 8011ec6:	4629      	mov	r1, r5
 8011ec8:	f7ee fa06 	bl	80002d8 <__aeabi_dsub>
 8011ecc:	4602      	mov	r2, r0
 8011ece:	460b      	mov	r3, r1
 8011ed0:	4640      	mov	r0, r8
 8011ed2:	4649      	mov	r1, r9
 8011ed4:	f7ee fa00 	bl	80002d8 <__aeabi_dsub>
 8011ed8:	a36f      	add	r3, pc, #444	; (adr r3, 8012098 <__ieee754_pow+0x9c0>)
 8011eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ede:	f7ee fbb3 	bl	8000648 <__aeabi_dmul>
 8011ee2:	a36f      	add	r3, pc, #444	; (adr r3, 80120a0 <__ieee754_pow+0x9c8>)
 8011ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ee8:	4680      	mov	r8, r0
 8011eea:	4689      	mov	r9, r1
 8011eec:	4620      	mov	r0, r4
 8011eee:	4629      	mov	r1, r5
 8011ef0:	f7ee fbaa 	bl	8000648 <__aeabi_dmul>
 8011ef4:	4602      	mov	r2, r0
 8011ef6:	460b      	mov	r3, r1
 8011ef8:	4640      	mov	r0, r8
 8011efa:	4649      	mov	r1, r9
 8011efc:	f7ee f9ee 	bl	80002dc <__adddf3>
 8011f00:	4604      	mov	r4, r0
 8011f02:	460d      	mov	r5, r1
 8011f04:	4602      	mov	r2, r0
 8011f06:	460b      	mov	r3, r1
 8011f08:	4630      	mov	r0, r6
 8011f0a:	4639      	mov	r1, r7
 8011f0c:	f7ee f9e6 	bl	80002dc <__adddf3>
 8011f10:	4632      	mov	r2, r6
 8011f12:	463b      	mov	r3, r7
 8011f14:	4680      	mov	r8, r0
 8011f16:	4689      	mov	r9, r1
 8011f18:	f7ee f9de 	bl	80002d8 <__aeabi_dsub>
 8011f1c:	4602      	mov	r2, r0
 8011f1e:	460b      	mov	r3, r1
 8011f20:	4620      	mov	r0, r4
 8011f22:	4629      	mov	r1, r5
 8011f24:	f7ee f9d8 	bl	80002d8 <__aeabi_dsub>
 8011f28:	4642      	mov	r2, r8
 8011f2a:	4606      	mov	r6, r0
 8011f2c:	460f      	mov	r7, r1
 8011f2e:	464b      	mov	r3, r9
 8011f30:	4640      	mov	r0, r8
 8011f32:	4649      	mov	r1, r9
 8011f34:	f7ee fb88 	bl	8000648 <__aeabi_dmul>
 8011f38:	a35b      	add	r3, pc, #364	; (adr r3, 80120a8 <__ieee754_pow+0x9d0>)
 8011f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f3e:	4604      	mov	r4, r0
 8011f40:	460d      	mov	r5, r1
 8011f42:	f7ee fb81 	bl	8000648 <__aeabi_dmul>
 8011f46:	a35a      	add	r3, pc, #360	; (adr r3, 80120b0 <__ieee754_pow+0x9d8>)
 8011f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f4c:	f7ee f9c4 	bl	80002d8 <__aeabi_dsub>
 8011f50:	4622      	mov	r2, r4
 8011f52:	462b      	mov	r3, r5
 8011f54:	f7ee fb78 	bl	8000648 <__aeabi_dmul>
 8011f58:	a357      	add	r3, pc, #348	; (adr r3, 80120b8 <__ieee754_pow+0x9e0>)
 8011f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f5e:	f7ee f9bd 	bl	80002dc <__adddf3>
 8011f62:	4622      	mov	r2, r4
 8011f64:	462b      	mov	r3, r5
 8011f66:	f7ee fb6f 	bl	8000648 <__aeabi_dmul>
 8011f6a:	a355      	add	r3, pc, #340	; (adr r3, 80120c0 <__ieee754_pow+0x9e8>)
 8011f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f70:	f7ee f9b2 	bl	80002d8 <__aeabi_dsub>
 8011f74:	4622      	mov	r2, r4
 8011f76:	462b      	mov	r3, r5
 8011f78:	f7ee fb66 	bl	8000648 <__aeabi_dmul>
 8011f7c:	a352      	add	r3, pc, #328	; (adr r3, 80120c8 <__ieee754_pow+0x9f0>)
 8011f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f82:	f7ee f9ab 	bl	80002dc <__adddf3>
 8011f86:	4622      	mov	r2, r4
 8011f88:	462b      	mov	r3, r5
 8011f8a:	f7ee fb5d 	bl	8000648 <__aeabi_dmul>
 8011f8e:	4602      	mov	r2, r0
 8011f90:	460b      	mov	r3, r1
 8011f92:	4640      	mov	r0, r8
 8011f94:	4649      	mov	r1, r9
 8011f96:	f7ee f99f 	bl	80002d8 <__aeabi_dsub>
 8011f9a:	4604      	mov	r4, r0
 8011f9c:	460d      	mov	r5, r1
 8011f9e:	4602      	mov	r2, r0
 8011fa0:	460b      	mov	r3, r1
 8011fa2:	4640      	mov	r0, r8
 8011fa4:	4649      	mov	r1, r9
 8011fa6:	f7ee fb4f 	bl	8000648 <__aeabi_dmul>
 8011faa:	2200      	movs	r2, #0
 8011fac:	e9cd 0100 	strd	r0, r1, [sp]
 8011fb0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011fb4:	4620      	mov	r0, r4
 8011fb6:	4629      	mov	r1, r5
 8011fb8:	f7ee f98e 	bl	80002d8 <__aeabi_dsub>
 8011fbc:	4602      	mov	r2, r0
 8011fbe:	460b      	mov	r3, r1
 8011fc0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011fc4:	f7ee fc6a 	bl	800089c <__aeabi_ddiv>
 8011fc8:	4632      	mov	r2, r6
 8011fca:	4604      	mov	r4, r0
 8011fcc:	460d      	mov	r5, r1
 8011fce:	463b      	mov	r3, r7
 8011fd0:	4640      	mov	r0, r8
 8011fd2:	4649      	mov	r1, r9
 8011fd4:	f7ee fb38 	bl	8000648 <__aeabi_dmul>
 8011fd8:	4632      	mov	r2, r6
 8011fda:	463b      	mov	r3, r7
 8011fdc:	f7ee f97e 	bl	80002dc <__adddf3>
 8011fe0:	4602      	mov	r2, r0
 8011fe2:	460b      	mov	r3, r1
 8011fe4:	4620      	mov	r0, r4
 8011fe6:	4629      	mov	r1, r5
 8011fe8:	f7ee f976 	bl	80002d8 <__aeabi_dsub>
 8011fec:	4642      	mov	r2, r8
 8011fee:	464b      	mov	r3, r9
 8011ff0:	f7ee f972 	bl	80002d8 <__aeabi_dsub>
 8011ff4:	4602      	mov	r2, r0
 8011ff6:	460b      	mov	r3, r1
 8011ff8:	2000      	movs	r0, #0
 8011ffa:	4939      	ldr	r1, [pc, #228]	; (80120e0 <__ieee754_pow+0xa08>)
 8011ffc:	f7ee f96c 	bl	80002d8 <__aeabi_dsub>
 8012000:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8012004:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8012008:	4602      	mov	r2, r0
 801200a:	460b      	mov	r3, r1
 801200c:	da2f      	bge.n	801206e <__ieee754_pow+0x996>
 801200e:	4650      	mov	r0, sl
 8012010:	ec43 2b10 	vmov	d0, r2, r3
 8012014:	f000 f9c0 	bl	8012398 <scalbn>
 8012018:	ec51 0b10 	vmov	r0, r1, d0
 801201c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012020:	f7ff bbf1 	b.w	8011806 <__ieee754_pow+0x12e>
 8012024:	4b2f      	ldr	r3, [pc, #188]	; (80120e4 <__ieee754_pow+0xa0c>)
 8012026:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801202a:	429e      	cmp	r6, r3
 801202c:	f77f af0c 	ble.w	8011e48 <__ieee754_pow+0x770>
 8012030:	4b2d      	ldr	r3, [pc, #180]	; (80120e8 <__ieee754_pow+0xa10>)
 8012032:	440b      	add	r3, r1
 8012034:	4303      	orrs	r3, r0
 8012036:	d00b      	beq.n	8012050 <__ieee754_pow+0x978>
 8012038:	a325      	add	r3, pc, #148	; (adr r3, 80120d0 <__ieee754_pow+0x9f8>)
 801203a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801203e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012042:	f7ee fb01 	bl	8000648 <__aeabi_dmul>
 8012046:	a322      	add	r3, pc, #136	; (adr r3, 80120d0 <__ieee754_pow+0x9f8>)
 8012048:	e9d3 2300 	ldrd	r2, r3, [r3]
 801204c:	f7ff bbdb 	b.w	8011806 <__ieee754_pow+0x12e>
 8012050:	4622      	mov	r2, r4
 8012052:	462b      	mov	r3, r5
 8012054:	f7ee f940 	bl	80002d8 <__aeabi_dsub>
 8012058:	4642      	mov	r2, r8
 801205a:	464b      	mov	r3, r9
 801205c:	f7ee fd7a 	bl	8000b54 <__aeabi_dcmpge>
 8012060:	2800      	cmp	r0, #0
 8012062:	f43f aef1 	beq.w	8011e48 <__ieee754_pow+0x770>
 8012066:	e7e7      	b.n	8012038 <__ieee754_pow+0x960>
 8012068:	f04f 0a00 	mov.w	sl, #0
 801206c:	e718      	b.n	8011ea0 <__ieee754_pow+0x7c8>
 801206e:	4621      	mov	r1, r4
 8012070:	e7d4      	b.n	801201c <__ieee754_pow+0x944>
 8012072:	2000      	movs	r0, #0
 8012074:	491a      	ldr	r1, [pc, #104]	; (80120e0 <__ieee754_pow+0xa08>)
 8012076:	f7ff bb8f 	b.w	8011798 <__ieee754_pow+0xc0>
 801207a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801207e:	f7ff bb8b 	b.w	8011798 <__ieee754_pow+0xc0>
 8012082:	4630      	mov	r0, r6
 8012084:	4639      	mov	r1, r7
 8012086:	f7ff bb87 	b.w	8011798 <__ieee754_pow+0xc0>
 801208a:	4693      	mov	fp, r2
 801208c:	f7ff bb98 	b.w	80117c0 <__ieee754_pow+0xe8>
 8012090:	00000000 	.word	0x00000000
 8012094:	3fe62e43 	.word	0x3fe62e43
 8012098:	fefa39ef 	.word	0xfefa39ef
 801209c:	3fe62e42 	.word	0x3fe62e42
 80120a0:	0ca86c39 	.word	0x0ca86c39
 80120a4:	be205c61 	.word	0xbe205c61
 80120a8:	72bea4d0 	.word	0x72bea4d0
 80120ac:	3e663769 	.word	0x3e663769
 80120b0:	c5d26bf1 	.word	0xc5d26bf1
 80120b4:	3ebbbd41 	.word	0x3ebbbd41
 80120b8:	af25de2c 	.word	0xaf25de2c
 80120bc:	3f11566a 	.word	0x3f11566a
 80120c0:	16bebd93 	.word	0x16bebd93
 80120c4:	3f66c16c 	.word	0x3f66c16c
 80120c8:	5555553e 	.word	0x5555553e
 80120cc:	3fc55555 	.word	0x3fc55555
 80120d0:	c2f8f359 	.word	0xc2f8f359
 80120d4:	01a56e1f 	.word	0x01a56e1f
 80120d8:	3fe00000 	.word	0x3fe00000
 80120dc:	000fffff 	.word	0x000fffff
 80120e0:	3ff00000 	.word	0x3ff00000
 80120e4:	4090cbff 	.word	0x4090cbff
 80120e8:	3f6f3400 	.word	0x3f6f3400
 80120ec:	652b82fe 	.word	0x652b82fe
 80120f0:	3c971547 	.word	0x3c971547

080120f4 <__ieee754_sqrt>:
 80120f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80120f8:	4955      	ldr	r1, [pc, #340]	; (8012250 <__ieee754_sqrt+0x15c>)
 80120fa:	ec55 4b10 	vmov	r4, r5, d0
 80120fe:	43a9      	bics	r1, r5
 8012100:	462b      	mov	r3, r5
 8012102:	462a      	mov	r2, r5
 8012104:	d112      	bne.n	801212c <__ieee754_sqrt+0x38>
 8012106:	ee10 2a10 	vmov	r2, s0
 801210a:	ee10 0a10 	vmov	r0, s0
 801210e:	4629      	mov	r1, r5
 8012110:	f7ee fa9a 	bl	8000648 <__aeabi_dmul>
 8012114:	4602      	mov	r2, r0
 8012116:	460b      	mov	r3, r1
 8012118:	4620      	mov	r0, r4
 801211a:	4629      	mov	r1, r5
 801211c:	f7ee f8de 	bl	80002dc <__adddf3>
 8012120:	4604      	mov	r4, r0
 8012122:	460d      	mov	r5, r1
 8012124:	ec45 4b10 	vmov	d0, r4, r5
 8012128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801212c:	2d00      	cmp	r5, #0
 801212e:	ee10 0a10 	vmov	r0, s0
 8012132:	4621      	mov	r1, r4
 8012134:	dc0f      	bgt.n	8012156 <__ieee754_sqrt+0x62>
 8012136:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801213a:	4330      	orrs	r0, r6
 801213c:	d0f2      	beq.n	8012124 <__ieee754_sqrt+0x30>
 801213e:	b155      	cbz	r5, 8012156 <__ieee754_sqrt+0x62>
 8012140:	ee10 2a10 	vmov	r2, s0
 8012144:	4620      	mov	r0, r4
 8012146:	4629      	mov	r1, r5
 8012148:	f7ee f8c6 	bl	80002d8 <__aeabi_dsub>
 801214c:	4602      	mov	r2, r0
 801214e:	460b      	mov	r3, r1
 8012150:	f7ee fba4 	bl	800089c <__aeabi_ddiv>
 8012154:	e7e4      	b.n	8012120 <__ieee754_sqrt+0x2c>
 8012156:	151b      	asrs	r3, r3, #20
 8012158:	d073      	beq.n	8012242 <__ieee754_sqrt+0x14e>
 801215a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801215e:	07dd      	lsls	r5, r3, #31
 8012160:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8012164:	bf48      	it	mi
 8012166:	0fc8      	lsrmi	r0, r1, #31
 8012168:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 801216c:	bf44      	itt	mi
 801216e:	0049      	lslmi	r1, r1, #1
 8012170:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8012174:	2500      	movs	r5, #0
 8012176:	1058      	asrs	r0, r3, #1
 8012178:	0fcb      	lsrs	r3, r1, #31
 801217a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 801217e:	0049      	lsls	r1, r1, #1
 8012180:	2316      	movs	r3, #22
 8012182:	462c      	mov	r4, r5
 8012184:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8012188:	19a7      	adds	r7, r4, r6
 801218a:	4297      	cmp	r7, r2
 801218c:	bfde      	ittt	le
 801218e:	19bc      	addle	r4, r7, r6
 8012190:	1bd2      	suble	r2, r2, r7
 8012192:	19ad      	addle	r5, r5, r6
 8012194:	0fcf      	lsrs	r7, r1, #31
 8012196:	3b01      	subs	r3, #1
 8012198:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 801219c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80121a0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80121a4:	d1f0      	bne.n	8012188 <__ieee754_sqrt+0x94>
 80121a6:	f04f 0c20 	mov.w	ip, #32
 80121aa:	469e      	mov	lr, r3
 80121ac:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80121b0:	42a2      	cmp	r2, r4
 80121b2:	eb06 070e 	add.w	r7, r6, lr
 80121b6:	dc02      	bgt.n	80121be <__ieee754_sqrt+0xca>
 80121b8:	d112      	bne.n	80121e0 <__ieee754_sqrt+0xec>
 80121ba:	428f      	cmp	r7, r1
 80121bc:	d810      	bhi.n	80121e0 <__ieee754_sqrt+0xec>
 80121be:	2f00      	cmp	r7, #0
 80121c0:	eb07 0e06 	add.w	lr, r7, r6
 80121c4:	da42      	bge.n	801224c <__ieee754_sqrt+0x158>
 80121c6:	f1be 0f00 	cmp.w	lr, #0
 80121ca:	db3f      	blt.n	801224c <__ieee754_sqrt+0x158>
 80121cc:	f104 0801 	add.w	r8, r4, #1
 80121d0:	1b12      	subs	r2, r2, r4
 80121d2:	428f      	cmp	r7, r1
 80121d4:	bf88      	it	hi
 80121d6:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 80121da:	1bc9      	subs	r1, r1, r7
 80121dc:	4433      	add	r3, r6
 80121de:	4644      	mov	r4, r8
 80121e0:	0052      	lsls	r2, r2, #1
 80121e2:	f1bc 0c01 	subs.w	ip, ip, #1
 80121e6:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 80121ea:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80121ee:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80121f2:	d1dd      	bne.n	80121b0 <__ieee754_sqrt+0xbc>
 80121f4:	430a      	orrs	r2, r1
 80121f6:	d006      	beq.n	8012206 <__ieee754_sqrt+0x112>
 80121f8:	1c5c      	adds	r4, r3, #1
 80121fa:	bf13      	iteet	ne
 80121fc:	3301      	addne	r3, #1
 80121fe:	3501      	addeq	r5, #1
 8012200:	4663      	moveq	r3, ip
 8012202:	f023 0301 	bicne.w	r3, r3, #1
 8012206:	106a      	asrs	r2, r5, #1
 8012208:	085b      	lsrs	r3, r3, #1
 801220a:	07e9      	lsls	r1, r5, #31
 801220c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8012210:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8012214:	bf48      	it	mi
 8012216:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801221a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 801221e:	461c      	mov	r4, r3
 8012220:	e780      	b.n	8012124 <__ieee754_sqrt+0x30>
 8012222:	0aca      	lsrs	r2, r1, #11
 8012224:	3815      	subs	r0, #21
 8012226:	0549      	lsls	r1, r1, #21
 8012228:	2a00      	cmp	r2, #0
 801222a:	d0fa      	beq.n	8012222 <__ieee754_sqrt+0x12e>
 801222c:	02d6      	lsls	r6, r2, #11
 801222e:	d50a      	bpl.n	8012246 <__ieee754_sqrt+0x152>
 8012230:	f1c3 0420 	rsb	r4, r3, #32
 8012234:	fa21 f404 	lsr.w	r4, r1, r4
 8012238:	1e5d      	subs	r5, r3, #1
 801223a:	4099      	lsls	r1, r3
 801223c:	4322      	orrs	r2, r4
 801223e:	1b43      	subs	r3, r0, r5
 8012240:	e78b      	b.n	801215a <__ieee754_sqrt+0x66>
 8012242:	4618      	mov	r0, r3
 8012244:	e7f0      	b.n	8012228 <__ieee754_sqrt+0x134>
 8012246:	0052      	lsls	r2, r2, #1
 8012248:	3301      	adds	r3, #1
 801224a:	e7ef      	b.n	801222c <__ieee754_sqrt+0x138>
 801224c:	46a0      	mov	r8, r4
 801224e:	e7bf      	b.n	80121d0 <__ieee754_sqrt+0xdc>
 8012250:	7ff00000 	.word	0x7ff00000

08012254 <fabs>:
 8012254:	ec51 0b10 	vmov	r0, r1, d0
 8012258:	ee10 2a10 	vmov	r2, s0
 801225c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012260:	ec43 2b10 	vmov	d0, r2, r3
 8012264:	4770      	bx	lr

08012266 <finite>:
 8012266:	ee10 3a90 	vmov	r3, s1
 801226a:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 801226e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8012272:	0fc0      	lsrs	r0, r0, #31
 8012274:	4770      	bx	lr

08012276 <matherr>:
 8012276:	2000      	movs	r0, #0
 8012278:	4770      	bx	lr
 801227a:	0000      	movs	r0, r0
 801227c:	0000      	movs	r0, r0
	...

08012280 <nan>:
 8012280:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012288 <nan+0x8>
 8012284:	4770      	bx	lr
 8012286:	bf00      	nop
 8012288:	00000000 	.word	0x00000000
 801228c:	7ff80000 	.word	0x7ff80000

08012290 <rint>:
 8012290:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012292:	ec51 0b10 	vmov	r0, r1, d0
 8012296:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801229a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801229e:	2e13      	cmp	r6, #19
 80122a0:	460b      	mov	r3, r1
 80122a2:	ee10 4a10 	vmov	r4, s0
 80122a6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80122aa:	dc56      	bgt.n	801235a <rint+0xca>
 80122ac:	2e00      	cmp	r6, #0
 80122ae:	da2b      	bge.n	8012308 <rint+0x78>
 80122b0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80122b4:	4302      	orrs	r2, r0
 80122b6:	d023      	beq.n	8012300 <rint+0x70>
 80122b8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80122bc:	4302      	orrs	r2, r0
 80122be:	4254      	negs	r4, r2
 80122c0:	4314      	orrs	r4, r2
 80122c2:	0c4b      	lsrs	r3, r1, #17
 80122c4:	0b24      	lsrs	r4, r4, #12
 80122c6:	045b      	lsls	r3, r3, #17
 80122c8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 80122cc:	ea44 0103 	orr.w	r1, r4, r3
 80122d0:	460b      	mov	r3, r1
 80122d2:	492f      	ldr	r1, [pc, #188]	; (8012390 <rint+0x100>)
 80122d4:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 80122d8:	e9d1 6700 	ldrd	r6, r7, [r1]
 80122dc:	4602      	mov	r2, r0
 80122de:	4639      	mov	r1, r7
 80122e0:	4630      	mov	r0, r6
 80122e2:	f7ed fffb 	bl	80002dc <__adddf3>
 80122e6:	e9cd 0100 	strd	r0, r1, [sp]
 80122ea:	463b      	mov	r3, r7
 80122ec:	4632      	mov	r2, r6
 80122ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 80122f2:	f7ed fff1 	bl	80002d8 <__aeabi_dsub>
 80122f6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80122fa:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80122fe:	4639      	mov	r1, r7
 8012300:	ec41 0b10 	vmov	d0, r0, r1
 8012304:	b003      	add	sp, #12
 8012306:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012308:	4a22      	ldr	r2, [pc, #136]	; (8012394 <rint+0x104>)
 801230a:	4132      	asrs	r2, r6
 801230c:	ea01 0702 	and.w	r7, r1, r2
 8012310:	4307      	orrs	r7, r0
 8012312:	d0f5      	beq.n	8012300 <rint+0x70>
 8012314:	0852      	lsrs	r2, r2, #1
 8012316:	4011      	ands	r1, r2
 8012318:	430c      	orrs	r4, r1
 801231a:	d00b      	beq.n	8012334 <rint+0xa4>
 801231c:	ea23 0202 	bic.w	r2, r3, r2
 8012320:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8012324:	2e13      	cmp	r6, #19
 8012326:	fa43 f306 	asr.w	r3, r3, r6
 801232a:	bf0c      	ite	eq
 801232c:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8012330:	2400      	movne	r4, #0
 8012332:	4313      	orrs	r3, r2
 8012334:	4916      	ldr	r1, [pc, #88]	; (8012390 <rint+0x100>)
 8012336:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 801233a:	4622      	mov	r2, r4
 801233c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8012340:	4620      	mov	r0, r4
 8012342:	4629      	mov	r1, r5
 8012344:	f7ed ffca 	bl	80002dc <__adddf3>
 8012348:	e9cd 0100 	strd	r0, r1, [sp]
 801234c:	4622      	mov	r2, r4
 801234e:	462b      	mov	r3, r5
 8012350:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012354:	f7ed ffc0 	bl	80002d8 <__aeabi_dsub>
 8012358:	e7d2      	b.n	8012300 <rint+0x70>
 801235a:	2e33      	cmp	r6, #51	; 0x33
 801235c:	dd07      	ble.n	801236e <rint+0xde>
 801235e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8012362:	d1cd      	bne.n	8012300 <rint+0x70>
 8012364:	ee10 2a10 	vmov	r2, s0
 8012368:	f7ed ffb8 	bl	80002dc <__adddf3>
 801236c:	e7c8      	b.n	8012300 <rint+0x70>
 801236e:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8012372:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012376:	40f2      	lsrs	r2, r6
 8012378:	4210      	tst	r0, r2
 801237a:	d0c1      	beq.n	8012300 <rint+0x70>
 801237c:	0852      	lsrs	r2, r2, #1
 801237e:	4210      	tst	r0, r2
 8012380:	bf1f      	itttt	ne
 8012382:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8012386:	ea20 0202 	bicne.w	r2, r0, r2
 801238a:	4134      	asrne	r4, r6
 801238c:	4314      	orrne	r4, r2
 801238e:	e7d1      	b.n	8012334 <rint+0xa4>
 8012390:	08013c70 	.word	0x08013c70
 8012394:	000fffff 	.word	0x000fffff

08012398 <scalbn>:
 8012398:	b570      	push	{r4, r5, r6, lr}
 801239a:	ec55 4b10 	vmov	r4, r5, d0
 801239e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80123a2:	4606      	mov	r6, r0
 80123a4:	462b      	mov	r3, r5
 80123a6:	b9aa      	cbnz	r2, 80123d4 <scalbn+0x3c>
 80123a8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80123ac:	4323      	orrs	r3, r4
 80123ae:	d03b      	beq.n	8012428 <scalbn+0x90>
 80123b0:	4b31      	ldr	r3, [pc, #196]	; (8012478 <scalbn+0xe0>)
 80123b2:	4629      	mov	r1, r5
 80123b4:	2200      	movs	r2, #0
 80123b6:	ee10 0a10 	vmov	r0, s0
 80123ba:	f7ee f945 	bl	8000648 <__aeabi_dmul>
 80123be:	4b2f      	ldr	r3, [pc, #188]	; (801247c <scalbn+0xe4>)
 80123c0:	429e      	cmp	r6, r3
 80123c2:	4604      	mov	r4, r0
 80123c4:	460d      	mov	r5, r1
 80123c6:	da12      	bge.n	80123ee <scalbn+0x56>
 80123c8:	a327      	add	r3, pc, #156	; (adr r3, 8012468 <scalbn+0xd0>)
 80123ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123ce:	f7ee f93b 	bl	8000648 <__aeabi_dmul>
 80123d2:	e009      	b.n	80123e8 <scalbn+0x50>
 80123d4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80123d8:	428a      	cmp	r2, r1
 80123da:	d10c      	bne.n	80123f6 <scalbn+0x5e>
 80123dc:	ee10 2a10 	vmov	r2, s0
 80123e0:	4620      	mov	r0, r4
 80123e2:	4629      	mov	r1, r5
 80123e4:	f7ed ff7a 	bl	80002dc <__adddf3>
 80123e8:	4604      	mov	r4, r0
 80123ea:	460d      	mov	r5, r1
 80123ec:	e01c      	b.n	8012428 <scalbn+0x90>
 80123ee:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80123f2:	460b      	mov	r3, r1
 80123f4:	3a36      	subs	r2, #54	; 0x36
 80123f6:	4432      	add	r2, r6
 80123f8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80123fc:	428a      	cmp	r2, r1
 80123fe:	dd0b      	ble.n	8012418 <scalbn+0x80>
 8012400:	ec45 4b11 	vmov	d1, r4, r5
 8012404:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8012470 <scalbn+0xd8>
 8012408:	f000 f9f0 	bl	80127ec <copysign>
 801240c:	a318      	add	r3, pc, #96	; (adr r3, 8012470 <scalbn+0xd8>)
 801240e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012412:	ec51 0b10 	vmov	r0, r1, d0
 8012416:	e7da      	b.n	80123ce <scalbn+0x36>
 8012418:	2a00      	cmp	r2, #0
 801241a:	dd08      	ble.n	801242e <scalbn+0x96>
 801241c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012420:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012424:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012428:	ec45 4b10 	vmov	d0, r4, r5
 801242c:	bd70      	pop	{r4, r5, r6, pc}
 801242e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8012432:	da0d      	bge.n	8012450 <scalbn+0xb8>
 8012434:	f24c 3350 	movw	r3, #50000	; 0xc350
 8012438:	429e      	cmp	r6, r3
 801243a:	ec45 4b11 	vmov	d1, r4, r5
 801243e:	dce1      	bgt.n	8012404 <scalbn+0x6c>
 8012440:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8012468 <scalbn+0xd0>
 8012444:	f000 f9d2 	bl	80127ec <copysign>
 8012448:	a307      	add	r3, pc, #28	; (adr r3, 8012468 <scalbn+0xd0>)
 801244a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801244e:	e7e0      	b.n	8012412 <scalbn+0x7a>
 8012450:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012454:	3236      	adds	r2, #54	; 0x36
 8012456:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801245a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801245e:	4620      	mov	r0, r4
 8012460:	4629      	mov	r1, r5
 8012462:	2200      	movs	r2, #0
 8012464:	4b06      	ldr	r3, [pc, #24]	; (8012480 <scalbn+0xe8>)
 8012466:	e7b2      	b.n	80123ce <scalbn+0x36>
 8012468:	c2f8f359 	.word	0xc2f8f359
 801246c:	01a56e1f 	.word	0x01a56e1f
 8012470:	8800759c 	.word	0x8800759c
 8012474:	7e37e43c 	.word	0x7e37e43c
 8012478:	43500000 	.word	0x43500000
 801247c:	ffff3cb0 	.word	0xffff3cb0
 8012480:	3c900000 	.word	0x3c900000
 8012484:	00000000 	.word	0x00000000

08012488 <__ieee754_log>:
 8012488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801248c:	ec51 0b10 	vmov	r0, r1, d0
 8012490:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8012494:	b087      	sub	sp, #28
 8012496:	460d      	mov	r5, r1
 8012498:	da27      	bge.n	80124ea <__ieee754_log+0x62>
 801249a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801249e:	4303      	orrs	r3, r0
 80124a0:	ee10 2a10 	vmov	r2, s0
 80124a4:	d10a      	bne.n	80124bc <__ieee754_log+0x34>
 80124a6:	49cc      	ldr	r1, [pc, #816]	; (80127d8 <__ieee754_log+0x350>)
 80124a8:	2200      	movs	r2, #0
 80124aa:	2300      	movs	r3, #0
 80124ac:	2000      	movs	r0, #0
 80124ae:	f7ee f9f5 	bl	800089c <__aeabi_ddiv>
 80124b2:	ec41 0b10 	vmov	d0, r0, r1
 80124b6:	b007      	add	sp, #28
 80124b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124bc:	2900      	cmp	r1, #0
 80124be:	da05      	bge.n	80124cc <__ieee754_log+0x44>
 80124c0:	460b      	mov	r3, r1
 80124c2:	f7ed ff09 	bl	80002d8 <__aeabi_dsub>
 80124c6:	2200      	movs	r2, #0
 80124c8:	2300      	movs	r3, #0
 80124ca:	e7f0      	b.n	80124ae <__ieee754_log+0x26>
 80124cc:	4bc3      	ldr	r3, [pc, #780]	; (80127dc <__ieee754_log+0x354>)
 80124ce:	2200      	movs	r2, #0
 80124d0:	f7ee f8ba 	bl	8000648 <__aeabi_dmul>
 80124d4:	f06f 0335 	mvn.w	r3, #53	; 0x35
 80124d8:	460d      	mov	r5, r1
 80124da:	4ac1      	ldr	r2, [pc, #772]	; (80127e0 <__ieee754_log+0x358>)
 80124dc:	4295      	cmp	r5, r2
 80124de:	dd06      	ble.n	80124ee <__ieee754_log+0x66>
 80124e0:	4602      	mov	r2, r0
 80124e2:	460b      	mov	r3, r1
 80124e4:	f7ed fefa 	bl	80002dc <__adddf3>
 80124e8:	e7e3      	b.n	80124b2 <__ieee754_log+0x2a>
 80124ea:	2300      	movs	r3, #0
 80124ec:	e7f5      	b.n	80124da <__ieee754_log+0x52>
 80124ee:	152c      	asrs	r4, r5, #20
 80124f0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80124f4:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80124f8:	441c      	add	r4, r3
 80124fa:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 80124fe:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8012502:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012506:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 801250a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 801250e:	ea42 0105 	orr.w	r1, r2, r5
 8012512:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8012516:	2200      	movs	r2, #0
 8012518:	4bb2      	ldr	r3, [pc, #712]	; (80127e4 <__ieee754_log+0x35c>)
 801251a:	f7ed fedd 	bl	80002d8 <__aeabi_dsub>
 801251e:	1cab      	adds	r3, r5, #2
 8012520:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012524:	2b02      	cmp	r3, #2
 8012526:	4682      	mov	sl, r0
 8012528:	468b      	mov	fp, r1
 801252a:	f04f 0200 	mov.w	r2, #0
 801252e:	dc53      	bgt.n	80125d8 <__ieee754_log+0x150>
 8012530:	2300      	movs	r3, #0
 8012532:	f7ee faf1 	bl	8000b18 <__aeabi_dcmpeq>
 8012536:	b1d0      	cbz	r0, 801256e <__ieee754_log+0xe6>
 8012538:	2c00      	cmp	r4, #0
 801253a:	f000 8120 	beq.w	801277e <__ieee754_log+0x2f6>
 801253e:	4620      	mov	r0, r4
 8012540:	f7ee f818 	bl	8000574 <__aeabi_i2d>
 8012544:	a390      	add	r3, pc, #576	; (adr r3, 8012788 <__ieee754_log+0x300>)
 8012546:	e9d3 2300 	ldrd	r2, r3, [r3]
 801254a:	4606      	mov	r6, r0
 801254c:	460f      	mov	r7, r1
 801254e:	f7ee f87b 	bl	8000648 <__aeabi_dmul>
 8012552:	a38f      	add	r3, pc, #572	; (adr r3, 8012790 <__ieee754_log+0x308>)
 8012554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012558:	4604      	mov	r4, r0
 801255a:	460d      	mov	r5, r1
 801255c:	4630      	mov	r0, r6
 801255e:	4639      	mov	r1, r7
 8012560:	f7ee f872 	bl	8000648 <__aeabi_dmul>
 8012564:	4602      	mov	r2, r0
 8012566:	460b      	mov	r3, r1
 8012568:	4620      	mov	r0, r4
 801256a:	4629      	mov	r1, r5
 801256c:	e7ba      	b.n	80124e4 <__ieee754_log+0x5c>
 801256e:	a38a      	add	r3, pc, #552	; (adr r3, 8012798 <__ieee754_log+0x310>)
 8012570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012574:	4650      	mov	r0, sl
 8012576:	4659      	mov	r1, fp
 8012578:	f7ee f866 	bl	8000648 <__aeabi_dmul>
 801257c:	4602      	mov	r2, r0
 801257e:	460b      	mov	r3, r1
 8012580:	2000      	movs	r0, #0
 8012582:	4999      	ldr	r1, [pc, #612]	; (80127e8 <__ieee754_log+0x360>)
 8012584:	f7ed fea8 	bl	80002d8 <__aeabi_dsub>
 8012588:	4652      	mov	r2, sl
 801258a:	4606      	mov	r6, r0
 801258c:	460f      	mov	r7, r1
 801258e:	465b      	mov	r3, fp
 8012590:	4650      	mov	r0, sl
 8012592:	4659      	mov	r1, fp
 8012594:	f7ee f858 	bl	8000648 <__aeabi_dmul>
 8012598:	4602      	mov	r2, r0
 801259a:	460b      	mov	r3, r1
 801259c:	4630      	mov	r0, r6
 801259e:	4639      	mov	r1, r7
 80125a0:	f7ee f852 	bl	8000648 <__aeabi_dmul>
 80125a4:	4606      	mov	r6, r0
 80125a6:	460f      	mov	r7, r1
 80125a8:	b914      	cbnz	r4, 80125b0 <__ieee754_log+0x128>
 80125aa:	4632      	mov	r2, r6
 80125ac:	463b      	mov	r3, r7
 80125ae:	e0a0      	b.n	80126f2 <__ieee754_log+0x26a>
 80125b0:	4620      	mov	r0, r4
 80125b2:	f7ed ffdf 	bl	8000574 <__aeabi_i2d>
 80125b6:	a374      	add	r3, pc, #464	; (adr r3, 8012788 <__ieee754_log+0x300>)
 80125b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125bc:	4680      	mov	r8, r0
 80125be:	4689      	mov	r9, r1
 80125c0:	f7ee f842 	bl	8000648 <__aeabi_dmul>
 80125c4:	a372      	add	r3, pc, #456	; (adr r3, 8012790 <__ieee754_log+0x308>)
 80125c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125ca:	4604      	mov	r4, r0
 80125cc:	460d      	mov	r5, r1
 80125ce:	4640      	mov	r0, r8
 80125d0:	4649      	mov	r1, r9
 80125d2:	f7ee f839 	bl	8000648 <__aeabi_dmul>
 80125d6:	e0a5      	b.n	8012724 <__ieee754_log+0x29c>
 80125d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80125dc:	f7ed fe7e 	bl	80002dc <__adddf3>
 80125e0:	4602      	mov	r2, r0
 80125e2:	460b      	mov	r3, r1
 80125e4:	4650      	mov	r0, sl
 80125e6:	4659      	mov	r1, fp
 80125e8:	f7ee f958 	bl	800089c <__aeabi_ddiv>
 80125ec:	e9cd 0100 	strd	r0, r1, [sp]
 80125f0:	4620      	mov	r0, r4
 80125f2:	f7ed ffbf 	bl	8000574 <__aeabi_i2d>
 80125f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80125fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80125fe:	4610      	mov	r0, r2
 8012600:	4619      	mov	r1, r3
 8012602:	f7ee f821 	bl	8000648 <__aeabi_dmul>
 8012606:	4602      	mov	r2, r0
 8012608:	460b      	mov	r3, r1
 801260a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801260e:	f7ee f81b 	bl	8000648 <__aeabi_dmul>
 8012612:	a363      	add	r3, pc, #396	; (adr r3, 80127a0 <__ieee754_log+0x318>)
 8012614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012618:	4680      	mov	r8, r0
 801261a:	4689      	mov	r9, r1
 801261c:	f7ee f814 	bl	8000648 <__aeabi_dmul>
 8012620:	a361      	add	r3, pc, #388	; (adr r3, 80127a8 <__ieee754_log+0x320>)
 8012622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012626:	f7ed fe59 	bl	80002dc <__adddf3>
 801262a:	4642      	mov	r2, r8
 801262c:	464b      	mov	r3, r9
 801262e:	f7ee f80b 	bl	8000648 <__aeabi_dmul>
 8012632:	a35f      	add	r3, pc, #380	; (adr r3, 80127b0 <__ieee754_log+0x328>)
 8012634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012638:	f7ed fe50 	bl	80002dc <__adddf3>
 801263c:	4642      	mov	r2, r8
 801263e:	464b      	mov	r3, r9
 8012640:	f7ee f802 	bl	8000648 <__aeabi_dmul>
 8012644:	a35c      	add	r3, pc, #368	; (adr r3, 80127b8 <__ieee754_log+0x330>)
 8012646:	e9d3 2300 	ldrd	r2, r3, [r3]
 801264a:	f7ed fe47 	bl	80002dc <__adddf3>
 801264e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012652:	f7ed fff9 	bl	8000648 <__aeabi_dmul>
 8012656:	a35a      	add	r3, pc, #360	; (adr r3, 80127c0 <__ieee754_log+0x338>)
 8012658:	e9d3 2300 	ldrd	r2, r3, [r3]
 801265c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012660:	4640      	mov	r0, r8
 8012662:	4649      	mov	r1, r9
 8012664:	f7ed fff0 	bl	8000648 <__aeabi_dmul>
 8012668:	a357      	add	r3, pc, #348	; (adr r3, 80127c8 <__ieee754_log+0x340>)
 801266a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801266e:	f7ed fe35 	bl	80002dc <__adddf3>
 8012672:	4642      	mov	r2, r8
 8012674:	464b      	mov	r3, r9
 8012676:	f7ed ffe7 	bl	8000648 <__aeabi_dmul>
 801267a:	a355      	add	r3, pc, #340	; (adr r3, 80127d0 <__ieee754_log+0x348>)
 801267c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012680:	f7ed fe2c 	bl	80002dc <__adddf3>
 8012684:	4642      	mov	r2, r8
 8012686:	464b      	mov	r3, r9
 8012688:	f7ed ffde 	bl	8000648 <__aeabi_dmul>
 801268c:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 8012690:	4602      	mov	r2, r0
 8012692:	460b      	mov	r3, r1
 8012694:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8012698:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801269c:	f7ed fe1e 	bl	80002dc <__adddf3>
 80126a0:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 80126a4:	3551      	adds	r5, #81	; 0x51
 80126a6:	4335      	orrs	r5, r6
 80126a8:	2d00      	cmp	r5, #0
 80126aa:	4680      	mov	r8, r0
 80126ac:	4689      	mov	r9, r1
 80126ae:	dd48      	ble.n	8012742 <__ieee754_log+0x2ba>
 80126b0:	2200      	movs	r2, #0
 80126b2:	4b4d      	ldr	r3, [pc, #308]	; (80127e8 <__ieee754_log+0x360>)
 80126b4:	4650      	mov	r0, sl
 80126b6:	4659      	mov	r1, fp
 80126b8:	f7ed ffc6 	bl	8000648 <__aeabi_dmul>
 80126bc:	4652      	mov	r2, sl
 80126be:	465b      	mov	r3, fp
 80126c0:	f7ed ffc2 	bl	8000648 <__aeabi_dmul>
 80126c4:	4602      	mov	r2, r0
 80126c6:	460b      	mov	r3, r1
 80126c8:	4606      	mov	r6, r0
 80126ca:	460f      	mov	r7, r1
 80126cc:	4640      	mov	r0, r8
 80126ce:	4649      	mov	r1, r9
 80126d0:	f7ed fe04 	bl	80002dc <__adddf3>
 80126d4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80126d8:	f7ed ffb6 	bl	8000648 <__aeabi_dmul>
 80126dc:	4680      	mov	r8, r0
 80126de:	4689      	mov	r9, r1
 80126e0:	b964      	cbnz	r4, 80126fc <__ieee754_log+0x274>
 80126e2:	4602      	mov	r2, r0
 80126e4:	460b      	mov	r3, r1
 80126e6:	4630      	mov	r0, r6
 80126e8:	4639      	mov	r1, r7
 80126ea:	f7ed fdf5 	bl	80002d8 <__aeabi_dsub>
 80126ee:	4602      	mov	r2, r0
 80126f0:	460b      	mov	r3, r1
 80126f2:	4650      	mov	r0, sl
 80126f4:	4659      	mov	r1, fp
 80126f6:	f7ed fdef 	bl	80002d8 <__aeabi_dsub>
 80126fa:	e6da      	b.n	80124b2 <__ieee754_log+0x2a>
 80126fc:	a322      	add	r3, pc, #136	; (adr r3, 8012788 <__ieee754_log+0x300>)
 80126fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012702:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012706:	f7ed ff9f 	bl	8000648 <__aeabi_dmul>
 801270a:	a321      	add	r3, pc, #132	; (adr r3, 8012790 <__ieee754_log+0x308>)
 801270c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012710:	4604      	mov	r4, r0
 8012712:	460d      	mov	r5, r1
 8012714:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012718:	f7ed ff96 	bl	8000648 <__aeabi_dmul>
 801271c:	4642      	mov	r2, r8
 801271e:	464b      	mov	r3, r9
 8012720:	f7ed fddc 	bl	80002dc <__adddf3>
 8012724:	4602      	mov	r2, r0
 8012726:	460b      	mov	r3, r1
 8012728:	4630      	mov	r0, r6
 801272a:	4639      	mov	r1, r7
 801272c:	f7ed fdd4 	bl	80002d8 <__aeabi_dsub>
 8012730:	4652      	mov	r2, sl
 8012732:	465b      	mov	r3, fp
 8012734:	f7ed fdd0 	bl	80002d8 <__aeabi_dsub>
 8012738:	4602      	mov	r2, r0
 801273a:	460b      	mov	r3, r1
 801273c:	4620      	mov	r0, r4
 801273e:	4629      	mov	r1, r5
 8012740:	e7d9      	b.n	80126f6 <__ieee754_log+0x26e>
 8012742:	4602      	mov	r2, r0
 8012744:	460b      	mov	r3, r1
 8012746:	4650      	mov	r0, sl
 8012748:	4659      	mov	r1, fp
 801274a:	f7ed fdc5 	bl	80002d8 <__aeabi_dsub>
 801274e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012752:	f7ed ff79 	bl	8000648 <__aeabi_dmul>
 8012756:	4606      	mov	r6, r0
 8012758:	460f      	mov	r7, r1
 801275a:	2c00      	cmp	r4, #0
 801275c:	f43f af25 	beq.w	80125aa <__ieee754_log+0x122>
 8012760:	a309      	add	r3, pc, #36	; (adr r3, 8012788 <__ieee754_log+0x300>)
 8012762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012766:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801276a:	f7ed ff6d 	bl	8000648 <__aeabi_dmul>
 801276e:	a308      	add	r3, pc, #32	; (adr r3, 8012790 <__ieee754_log+0x308>)
 8012770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012774:	4604      	mov	r4, r0
 8012776:	460d      	mov	r5, r1
 8012778:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801277c:	e729      	b.n	80125d2 <__ieee754_log+0x14a>
 801277e:	2000      	movs	r0, #0
 8012780:	2100      	movs	r1, #0
 8012782:	e696      	b.n	80124b2 <__ieee754_log+0x2a>
 8012784:	f3af 8000 	nop.w
 8012788:	fee00000 	.word	0xfee00000
 801278c:	3fe62e42 	.word	0x3fe62e42
 8012790:	35793c76 	.word	0x35793c76
 8012794:	3dea39ef 	.word	0x3dea39ef
 8012798:	55555555 	.word	0x55555555
 801279c:	3fd55555 	.word	0x3fd55555
 80127a0:	df3e5244 	.word	0xdf3e5244
 80127a4:	3fc2f112 	.word	0x3fc2f112
 80127a8:	96cb03de 	.word	0x96cb03de
 80127ac:	3fc74664 	.word	0x3fc74664
 80127b0:	94229359 	.word	0x94229359
 80127b4:	3fd24924 	.word	0x3fd24924
 80127b8:	55555593 	.word	0x55555593
 80127bc:	3fe55555 	.word	0x3fe55555
 80127c0:	d078c69f 	.word	0xd078c69f
 80127c4:	3fc39a09 	.word	0x3fc39a09
 80127c8:	1d8e78af 	.word	0x1d8e78af
 80127cc:	3fcc71c5 	.word	0x3fcc71c5
 80127d0:	9997fa04 	.word	0x9997fa04
 80127d4:	3fd99999 	.word	0x3fd99999
 80127d8:	c3500000 	.word	0xc3500000
 80127dc:	43500000 	.word	0x43500000
 80127e0:	7fefffff 	.word	0x7fefffff
 80127e4:	3ff00000 	.word	0x3ff00000
 80127e8:	3fe00000 	.word	0x3fe00000

080127ec <copysign>:
 80127ec:	ec51 0b10 	vmov	r0, r1, d0
 80127f0:	ee11 0a90 	vmov	r0, s3
 80127f4:	ee10 2a10 	vmov	r2, s0
 80127f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80127fc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8012800:	ea41 0300 	orr.w	r3, r1, r0
 8012804:	ec43 2b10 	vmov	d0, r2, r3
 8012808:	4770      	bx	lr
	...

0801280c <_init>:
 801280c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801280e:	bf00      	nop
 8012810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012812:	bc08      	pop	{r3}
 8012814:	469e      	mov	lr, r3
 8012816:	4770      	bx	lr

08012818 <_fini>:
 8012818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801281a:	bf00      	nop
 801281c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801281e:	bc08      	pop	{r3}
 8012820:	469e      	mov	lr, r3
 8012822:	4770      	bx	lr
