
FunctionGeneratorCortexM4_SW_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000107e0  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001898  080109c0  080109c0  000209c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012258  08012258  00031ec8  2**0
                  CONTENTS
  4 .ARM          00000000  08012258  08012258  00031ec8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08012258  08012258  00031ec8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012258  08012258  00022258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801225c  0801225c  0002225c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001ec8  20000000  08012260  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a9c  20001ec8  08014128  00031ec8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002964  08014128  00032964  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00031ec8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003f8c3  00000000  00000000  00031ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000726e  00000000  00000000  000717bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002120  00000000  00000000  00078a30  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001d38  00000000  00000000  0007ab50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003403e  00000000  00000000  0007c888  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002be90  00000000  00000000  000b08c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00125b95  00000000  00000000  000dc756  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  002022eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009038  00000000  00000000  00202368  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20001ec8 	.word	0x20001ec8
 80001fc:	00000000 	.word	0x00000000
 8000200:	080109a8 	.word	0x080109a8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20001ecc 	.word	0x20001ecc
 800021c:	080109a8 	.word	0x080109a8

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800040e:	f1a4 0401 	sub.w	r4, r4, #1
 8000412:	d1e9      	bne.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <BiasMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void BiasMenu_DrawMenu(eBiasMenu_Status pMenu)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8000c02:	79fb      	ldrb	r3, [r7, #7]
 8000c04:	2b01      	cmp	r3, #1
 8000c06:	d000      	beq.n	8000c0a <BiasMenu_DrawMenu+0x12>
		case ENABLE_BIAS_MENU:
			BiasMenu_DrawMainMenu();
			break;

		default:
			break;
 8000c08:	e002      	b.n	8000c10 <BiasMenu_DrawMenu+0x18>
			BiasMenu_DrawMainMenu();
 8000c0a:	f000 f805 	bl	8000c18 <BiasMenu_DrawMainMenu>
			break;
 8000c0e:	bf00      	nop

	}
}
 8000c10:	bf00      	nop
 8000c12:	3708      	adds	r7, #8
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}

08000c18 <BiasMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void BiasMenu_DrawMainMenu()
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->BIAS", 	10, 10, WHITE, 2, BLACK);
 8000c1e:	2300      	movs	r3, #0
 8000c20:	9301      	str	r3, [sp, #4]
 8000c22:	2302      	movs	r3, #2
 8000c24:	9300      	str	r3, [sp, #0]
 8000c26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c2a:	220a      	movs	r2, #10
 8000c2c:	210a      	movs	r1, #10
 8000c2e:	4804      	ldr	r0, [pc, #16]	; (8000c40 <BiasMenu_DrawMainMenu+0x28>)
 8000c30:	f00c fc1c 	bl	800d46c <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8000c34:	f000 f936 	bl	8000ea4 <DM_DisplayFormattedOutput>

}
 8000c38:	bf00      	nop
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	080109c0 	.word	0x080109c0

08000c44 <DM_Init>:
 *	@param None
 *	@retval None
 *
 */
void DM_Init()
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
	  ILI9341_Init();
 8000c48:	f00c fc62 	bl	800d510 <ILI9341_Init>
	  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8000c4c:	2003      	movs	r0, #3
 8000c4e:	f00d f84f 	bl	800dcf0 <ILI9341_Set_Rotation>
	  ILI9341_Fill_Screen(WHITE);
 8000c52:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000c56:	f00c fe63 	bl	800d920 <ILI9341_Fill_Screen>

}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
	...

08000c60 <DM_PostInit>:
 *	@param None
 *	@retval None
 *
 */
void DM_PostInit()
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af02      	add	r7, sp, #8

	  ILI9341_Draw_Text("Initialising", 10, 10, BLACK, 1, WHITE);
 8000c66:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c6a:	9301      	str	r3, [sp, #4]
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	9300      	str	r3, [sp, #0]
 8000c70:	2300      	movs	r3, #0
 8000c72:	220a      	movs	r2, #10
 8000c74:	210a      	movs	r1, #10
 8000c76:	4807      	ldr	r0, [pc, #28]	; (8000c94 <DM_PostInit+0x34>)
 8000c78:	f00c fbf8 	bl	800d46c <ILI9341_Draw_Text>
	  HAL_Delay(500);
 8000c7c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c80:	f007 fa4c 	bl	800811c <HAL_Delay>

	  DM_RefreshScreen();
 8000c84:	f000 fa16 	bl	80010b4 <DM_RefreshScreen>
#ifdef SWV_DEBUG_ENABLED
	  printf("Init Completed\n");
 8000c88:	4803      	ldr	r0, [pc, #12]	; (8000c98 <DM_PostInit+0x38>)
 8000c8a:	f00d ff33 	bl	800eaf4 <puts>
#endif


}
 8000c8e:	bf00      	nop
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	080109cc 	.word	0x080109cc
 8000c98:	080109dc 	.word	0x080109dc

08000c9c <DM_UpdateDisplay>:
 *	@param None
 *	@retval None
 *
 */
void DM_UpdateDisplay()
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b09c      	sub	sp, #112	; 0x70
 8000ca0:	af02      	add	r7, sp, #8

	if(ToplevelMenu_getStatus())
 8000ca2:	f003 faab 	bl	80041fc <ToplevelMenu_getStatus>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d018      	beq.n	8000cde <DM_UpdateDisplay+0x42>
	{

		#ifdef SWV_DEBUG_ENABLED
			  printf("FuncMenu_DrawMenu\n");
 8000cac:	4872      	ldr	r0, [pc, #456]	; (8000e78 <DM_UpdateDisplay+0x1dc>)
 8000cae:	f00d ff21 	bl	800eaf4 <puts>
		#endif

		switch(ToplevelMenu_getStatus())
 8000cb2:	f003 faa3 	bl	80041fc <ToplevelMenu_getStatus>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b02      	cmp	r3, #2
 8000cba:	d008      	beq.n	8000cce <DM_UpdateDisplay+0x32>
 8000cbc:	2b03      	cmp	r3, #3
 8000cbe:	d00a      	beq.n	8000cd6 <DM_UpdateDisplay+0x3a>
 8000cc0:	2b01      	cmp	r3, #1
 8000cc2:	d000      	beq.n	8000cc6 <DM_UpdateDisplay+0x2a>

				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_INPUT_MENU);
				break;

			default:
				break;
 8000cc4:	e089      	b.n	8000dda <DM_UpdateDisplay+0x13e>
				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_MAIN_MENU);
 8000cc6:	2001      	movs	r0, #1
 8000cc8:	f002 fb4e 	bl	8003368 <ToplevelMenu_DrawMenu>
				break;
 8000ccc:	e085      	b.n	8000dda <DM_UpdateDisplay+0x13e>
				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_OUTPUT_MENU);
 8000cce:	2002      	movs	r0, #2
 8000cd0:	f002 fb4a 	bl	8003368 <ToplevelMenu_DrawMenu>
				break;
 8000cd4:	e081      	b.n	8000dda <DM_UpdateDisplay+0x13e>
				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_INPUT_MENU);
 8000cd6:	2003      	movs	r0, #3
 8000cd8:	f002 fb46 	bl	8003368 <ToplevelMenu_DrawMenu>
				break;
 8000cdc:	e07d      	b.n	8000dda <DM_UpdateDisplay+0x13e>
		}
	}

	// Function menus
	else if(FuncMenu_getStatus())		//  != DISABLE_FUNC_MENU
 8000cde:	f003 f88d 	bl	8003dfc <FuncMenu_getStatus>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d018      	beq.n	8000d1a <DM_UpdateDisplay+0x7e>
	{

		#ifdef SWV_DEBUG_ENABLED
			  printf("FuncMenu_DrawMenu\n");
 8000ce8:	4863      	ldr	r0, [pc, #396]	; (8000e78 <DM_UpdateDisplay+0x1dc>)
 8000cea:	f00d ff03 	bl	800eaf4 <puts>
		#endif

		switch(FuncMenu_getStatus())
 8000cee:	f003 f885 	bl	8003dfc <FuncMenu_getStatus>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b02      	cmp	r3, #2
 8000cf6:	d008      	beq.n	8000d0a <DM_UpdateDisplay+0x6e>
 8000cf8:	2b03      	cmp	r3, #3
 8000cfa:	d00a      	beq.n	8000d12 <DM_UpdateDisplay+0x76>
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d000      	beq.n	8000d02 <DM_UpdateDisplay+0x66>
				FuncMenu_DrawMenu(ENABLE_FUNC_SYNC_MENU);

				break;

			default:
				break;
 8000d00:	e06b      	b.n	8000dda <DM_UpdateDisplay+0x13e>
				FuncMenu_DrawMenu(ENABLE_FUNC_MAIN_MENU);
 8000d02:	2001      	movs	r0, #1
 8000d04:	f001 fe80 	bl	8002a08 <FuncMenu_DrawMenu>
				break;
 8000d08:	e067      	b.n	8000dda <DM_UpdateDisplay+0x13e>
				FuncMenu_DrawMenu(ENABLE_FUNC_SIGNAL_MENU);
 8000d0a:	2002      	movs	r0, #2
 8000d0c:	f001 fe7c 	bl	8002a08 <FuncMenu_DrawMenu>
				break;
 8000d10:	e063      	b.n	8000dda <DM_UpdateDisplay+0x13e>
				FuncMenu_DrawMenu(ENABLE_FUNC_SYNC_MENU);
 8000d12:	2003      	movs	r0, #3
 8000d14:	f001 fe78 	bl	8002a08 <FuncMenu_DrawMenu>
				break;
 8000d18:	e05f      	b.n	8000dda <DM_UpdateDisplay+0x13e>
		}

	}
	// Gain menus
	else if(GainMenu_getStatus())		//  != DISABLE_GAIN_MENU
 8000d1a:	f003 f971 	bl	8004000 <GainMenu_getStatus>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d018      	beq.n	8000d56 <DM_UpdateDisplay+0xba>
	{

		#ifdef SWV_DEBUG_ENABLED
			  printf("GainMenu_DrawMenu\n");
 8000d24:	4855      	ldr	r0, [pc, #340]	; (8000e7c <DM_UpdateDisplay+0x1e0>)
 8000d26:	f00d fee5 	bl	800eaf4 <puts>
		#endif

		switch(GainMenu_getStatus())
 8000d2a:	f003 f969 	bl	8004000 <GainMenu_getStatus>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b02      	cmp	r3, #2
 8000d32:	d008      	beq.n	8000d46 <DM_UpdateDisplay+0xaa>
 8000d34:	2b03      	cmp	r3, #3
 8000d36:	d00a      	beq.n	8000d4e <DM_UpdateDisplay+0xb2>
 8000d38:	2b01      	cmp	r3, #1
 8000d3a:	d000      	beq.n	8000d3e <DM_UpdateDisplay+0xa2>
				GainMenu_DrawMenu(ENABLE_GAIN_SYNC_MENU);

				break;

			default:
				break;
 8000d3c:	e04d      	b.n	8000dda <DM_UpdateDisplay+0x13e>
				GainMenu_DrawMenu(ENABLE_GAIN_MAIN_MENU);
 8000d3e:	2001      	movs	r0, #1
 8000d40:	f002 fa84 	bl	800324c <GainMenu_DrawMenu>
				break;
 8000d44:	e049      	b.n	8000dda <DM_UpdateDisplay+0x13e>
				GainMenu_DrawMenu(ENABLE_GAIN_SIGNAL_MENU);
 8000d46:	2002      	movs	r0, #2
 8000d48:	f002 fa80 	bl	800324c <GainMenu_DrawMenu>
				break;
 8000d4c:	e045      	b.n	8000dda <DM_UpdateDisplay+0x13e>
				GainMenu_DrawMenu(ENABLE_GAIN_SYNC_MENU);
 8000d4e:	2003      	movs	r0, #3
 8000d50:	f002 fa7c 	bl	800324c <GainMenu_DrawMenu>
				break;
 8000d54:	e041      	b.n	8000dda <DM_UpdateDisplay+0x13e>
		}

	}

	// Frequency menus
	else if(FreqMenu_getStatus())		//  != DISABLE_FREQ_MENU
 8000d56:	f002 fe63 	bl	8003a20 <FreqMenu_getStatus>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d023      	beq.n	8000da8 <DM_UpdateDisplay+0x10c>
	{

		#ifdef SWV_DEBUG_ENABLED
			  printf("FreqMenu_DrawMenu\n");
 8000d60:	4847      	ldr	r0, [pc, #284]	; (8000e80 <DM_UpdateDisplay+0x1e4>)
 8000d62:	f00d fec7 	bl	800eaf4 <puts>
		#endif

		//ILI9341_Draw_Text("FREQUENCY MENU", 	30, 10, WHITE, 3, BLACK);

		switch(FreqMenu_getStatus())
 8000d66:	f002 fe5b 	bl	8003a20 <FreqMenu_getStatus>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	3b01      	subs	r3, #1
 8000d6e:	2b03      	cmp	r3, #3
 8000d70:	d832      	bhi.n	8000dd8 <DM_UpdateDisplay+0x13c>
 8000d72:	a201      	add	r2, pc, #4	; (adr r2, 8000d78 <DM_UpdateDisplay+0xdc>)
 8000d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d78:	08000d89 	.word	0x08000d89
 8000d7c:	08000d91 	.word	0x08000d91
 8000d80:	08000d99 	.word	0x08000d99
 8000d84:	08000da1 	.word	0x08000da1
		{
			case ENABLE_FREQ_MAIN_MENU:

				FreqMenu_DrawMenu(ENABLE_FREQ_MAIN_MENU);
 8000d88:	2001      	movs	r0, #1
 8000d8a:	f000 f9ef 	bl	800116c <FreqMenu_DrawMenu>

				break;
 8000d8e:	e024      	b.n	8000dda <DM_UpdateDisplay+0x13e>

			case ENABLE_FREQ_PRESET_MENU:

				FreqMenu_DrawMenu(ENABLE_FREQ_PRESET_MENU);
 8000d90:	2002      	movs	r0, #2
 8000d92:	f000 f9eb 	bl	800116c <FreqMenu_DrawMenu>
				break;
 8000d96:	e020      	b.n	8000dda <DM_UpdateDisplay+0x13e>

			case ENABLE_FREQ_ADJUST_MENU:


				FreqMenu_DrawMenu(ENABLE_FREQ_ADJUST_MENU);
 8000d98:	2003      	movs	r0, #3
 8000d9a:	f000 f9e7 	bl	800116c <FreqMenu_DrawMenu>

				break;
 8000d9e:	e01c      	b.n	8000dda <DM_UpdateDisplay+0x13e>

			case ENABLE_FREQ_SWEEP_MENU:

				FreqMenu_DrawMenu(ENABLE_FREQ_SWEEP_MENU);
 8000da0:	2004      	movs	r0, #4
 8000da2:	f000 f9e3 	bl	800116c <FreqMenu_DrawMenu>
				break;
 8000da6:	e018      	b.n	8000dda <DM_UpdateDisplay+0x13e>
		}

	}

	// Bias menu
	else if(BiasMenu_getStatus())		//  != DISABLE_BIAS_MENU
 8000da8:	f002 fb98 	bl	80034dc <BiasMenu_getStatus>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d006      	beq.n	8000dc0 <DM_UpdateDisplay+0x124>
	{

		#ifdef SWV_DEBUG_ENABLED
			  printf("BiasMenu_DrawMenu\n");
 8000db2:	4834      	ldr	r0, [pc, #208]	; (8000e84 <DM_UpdateDisplay+0x1e8>)
 8000db4:	f00d fe9e 	bl	800eaf4 <puts>
		#endif

		BiasMenu_DrawMenu(ENABLE_BIAS_MENU);
 8000db8:	2001      	movs	r0, #1
 8000dba:	f7ff ff1d 	bl	8000bf8 <BiasMenu_DrawMenu>
 8000dbe:	e00c      	b.n	8000dda <DM_UpdateDisplay+0x13e>
	}
	else
	{
		ILI9341_Draw_Text("DisplayManager: no menu status set!", 10, 50, BLACK, 1, RED);
 8000dc0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000dc4:	9301      	str	r3, [sp, #4]
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	9300      	str	r3, [sp, #0]
 8000dca:	2300      	movs	r3, #0
 8000dcc:	2232      	movs	r2, #50	; 0x32
 8000dce:	210a      	movs	r1, #10
 8000dd0:	482d      	ldr	r0, [pc, #180]	; (8000e88 <DM_UpdateDisplay+0x1ec>)
 8000dd2:	f00c fb4b 	bl	800d46c <ILI9341_Draw_Text>
 8000dd6:	e000      	b.n	8000dda <DM_UpdateDisplay+0x13e>
				break;
 8000dd8:	bf00      	nop
	}

	#ifdef ENCODER_DEBUG
		char tim5_text[50] = "";
 8000dda:	2300      	movs	r3, #0
 8000ddc:	637b      	str	r3, [r7, #52]	; 0x34
 8000dde:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000de2:	222e      	movs	r2, #46	; 0x2e
 8000de4:	2100      	movs	r1, #0
 8000de6:	4618      	mov	r0, r3
 8000de8:	f00d f9c4 	bl	800e174 <memset>
		snprintf(tim5_text, sizeof(tim5_text), "OUTPUT_TIMER->ARR: %5lu", OUTPUT_TIMER->ARR);
 8000dec:	4b27      	ldr	r3, [pc, #156]	; (8000e8c <DM_UpdateDisplay+0x1f0>)
 8000dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000df0:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8000df4:	4a26      	ldr	r2, [pc, #152]	; (8000e90 <DM_UpdateDisplay+0x1f4>)
 8000df6:	2132      	movs	r1, #50	; 0x32
 8000df8:	f00d fe84 	bl	800eb04 <sniprintf>
		//if(DM_AddDigitPadding(ENCODER_TIMER->CNT, encoder_value, sizeof(encoder_value)) == 0)
			ILI9341_Draw_Text(tim5_text, 10, 180, BLACK, 1, RED);
 8000dfc:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8000e00:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000e04:	9301      	str	r3, [sp, #4]
 8000e06:	2301      	movs	r3, #1
 8000e08:	9300      	str	r3, [sp, #0]
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	22b4      	movs	r2, #180	; 0xb4
 8000e0e:	210a      	movs	r1, #10
 8000e10:	f00c fb2c 	bl	800d46c <ILI9341_Draw_Text>

		char encoder_value[50] = "";
 8000e14:	2300      	movs	r3, #0
 8000e16:	603b      	str	r3, [r7, #0]
 8000e18:	1d3b      	adds	r3, r7, #4
 8000e1a:	222e      	movs	r2, #46	; 0x2e
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f00d f9a8 	bl	800e174 <memset>
		snprintf(encoder_value, sizeof(encoder_value), "SWEEP_TIMER->ARR: %5lu - ENCODER: %5lu", SWEEP_TIMER->ARR, ENCODER_TIMER->CNT);
 8000e24:	4b1b      	ldr	r3, [pc, #108]	; (8000e94 <DM_UpdateDisplay+0x1f8>)
 8000e26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e28:	4b1b      	ldr	r3, [pc, #108]	; (8000e98 <DM_UpdateDisplay+0x1fc>)
 8000e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e2c:	4638      	mov	r0, r7
 8000e2e:	9300      	str	r3, [sp, #0]
 8000e30:	4613      	mov	r3, r2
 8000e32:	4a1a      	ldr	r2, [pc, #104]	; (8000e9c <DM_UpdateDisplay+0x200>)
 8000e34:	2132      	movs	r1, #50	; 0x32
 8000e36:	f00d fe65 	bl	800eb04 <sniprintf>
		//if(DM_AddDigitPadding(ENCODER_TIMER->CNT, encoder_value, sizeof(encoder_value)) == 0)
			ILI9341_Draw_Text(encoder_value, 10, 190, BLACK, 1, RED);
 8000e3a:	4638      	mov	r0, r7
 8000e3c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000e40:	9301      	str	r3, [sp, #4]
 8000e42:	2301      	movs	r3, #1
 8000e44:	9300      	str	r3, [sp, #0]
 8000e46:	2300      	movs	r3, #0
 8000e48:	22be      	movs	r2, #190	; 0xbe
 8000e4a:	210a      	movs	r1, #10
 8000e4c:	f00c fb0e 	bl	800d46c <ILI9341_Draw_Text>
	#endif //ENCODER_DEBUG

	if(*ErrorDebugMsg)
 8000e50:	4b13      	ldr	r3, [pc, #76]	; (8000ea0 <DM_UpdateDisplay+0x204>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d00a      	beq.n	8000e6e <DM_UpdateDisplay+0x1d2>
		ILI9341_Draw_Text(ErrorDebugMsg, 10, 190, BLACK, 1, RED);
 8000e58:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000e5c:	9301      	str	r3, [sp, #4]
 8000e5e:	2301      	movs	r3, #1
 8000e60:	9300      	str	r3, [sp, #0]
 8000e62:	2300      	movs	r3, #0
 8000e64:	22be      	movs	r2, #190	; 0xbe
 8000e66:	210a      	movs	r1, #10
 8000e68:	480d      	ldr	r0, [pc, #52]	; (8000ea0 <DM_UpdateDisplay+0x204>)
 8000e6a:	f00c faff 	bl	800d46c <ILI9341_Draw_Text>

}
 8000e6e:	bf00      	nop
 8000e70:	3768      	adds	r7, #104	; 0x68
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	080109ec 	.word	0x080109ec
 8000e7c:	08010a00 	.word	0x08010a00
 8000e80:	08010a14 	.word	0x08010a14
 8000e84:	08010a28 	.word	0x08010a28
 8000e88:	08010a3c 	.word	0x08010a3c
 8000e8c:	40013400 	.word	0x40013400
 8000e90:	08010a60 	.word	0x08010a60
 8000e94:	40000c00 	.word	0x40000c00
 8000e98:	40012c00 	.word	0x40012c00
 8000e9c:	08010a78 	.word	0x08010a78
 8000ea0:	20001ee4 	.word	0x20001ee4

08000ea4 <DM_DisplayFormattedOutput>:
 *	@param None
 *	@retval None
 *
 */
void DM_DisplayFormattedOutput()
{
 8000ea4:	b590      	push	{r4, r7, lr}
 8000ea6:	b099      	sub	sp, #100	; 0x64
 8000ea8:	af02      	add	r7, sp, #8
	char out_hertz[13] = "";
 8000eaa:	2300      	movs	r3, #0
 8000eac:	633b      	str	r3, [r7, #48]	; 0x30
 8000eae:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	601a      	str	r2, [r3, #0]
 8000eb6:	605a      	str	r2, [r3, #4]
 8000eb8:	721a      	strb	r2, [r3, #8]
	uint8_t out_hertz_x = 70;
 8000eba:	2346      	movs	r3, #70	; 0x46
 8000ebc:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	uint8_t out_hertz_y = 40;
 8000ec0:	2328      	movs	r3, #40	; 0x28
 8000ec2:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52

	char out_vpp[16] = "";
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	623b      	str	r3, [r7, #32]
 8000eca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ece:	2200      	movs	r2, #0
 8000ed0:	601a      	str	r2, [r3, #0]
 8000ed2:	605a      	str	r2, [r3, #4]
 8000ed4:	609a      	str	r2, [r3, #8]
	uint8_t out_vpp_x = 70;
 8000ed6:	2346      	movs	r3, #70	; 0x46
 8000ed8:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
	uint8_t out_vpp_y = 70;
 8000edc:	2346      	movs	r3, #70	; 0x46
 8000ede:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50

	char out_decibels[11] = "";
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	617b      	str	r3, [r7, #20]
 8000ee6:	f107 0318 	add.w	r3, r7, #24
 8000eea:	2200      	movs	r2, #0
 8000eec:	601a      	str	r2, [r3, #0]
 8000eee:	f8c3 2003 	str.w	r2, [r3, #3]
	uint8_t out_decibels_x = 70;
 8000ef2:	2346      	movs	r3, #70	; 0x46
 8000ef4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	uint8_t out_decibels_y = 100;
 8000ef8:	2364      	movs	r3, #100	; 0x64
 8000efa:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e


	float volts_per_thou = 0.00075;
 8000efe:	4b66      	ldr	r3, [pc, #408]	; (8001098 <DM_DisplayFormattedOutput+0x1f4>)
 8000f00:	64bb      	str	r3, [r7, #72]	; 0x48
	char out_dcvolts[10] = "";
 8000f02:	2300      	movs	r3, #0
 8000f04:	60bb      	str	r3, [r7, #8]
 8000f06:	f107 030c 	add.w	r3, r7, #12
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	601a      	str	r2, [r3, #0]
 8000f0e:	809a      	strh	r2, [r3, #4]
	uint8_t out_dcvolts_x = 70;
 8000f10:	2346      	movs	r3, #70	; 0x46
 8000f12:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint8_t out_dcvolts_y = 130;
 8000f16:	2382      	movs	r3, #130	; 0x82
 8000f18:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

	// display output in hertz
	snprintf(out_hertz, sizeof(out_hertz), "%4.2f Hz", SM_GetOutputInHertz());
 8000f1c:	f004 f8c8 	bl	80050b0 <SM_GetOutputInHertz>
 8000f20:	ee10 3a10 	vmov	r3, s0
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff fb37 	bl	8000598 <__aeabi_f2d>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	460c      	mov	r4, r1
 8000f2e:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8000f32:	e9cd 3400 	strd	r3, r4, [sp]
 8000f36:	4a59      	ldr	r2, [pc, #356]	; (800109c <DM_DisplayFormattedOutput+0x1f8>)
 8000f38:	210d      	movs	r1, #13
 8000f3a:	f00d fde3 	bl	800eb04 <sniprintf>
	ILI9341_Draw_Text(out_hertz, out_hertz_x, out_hertz_y, BLACK, 3, WHITE);
 8000f3e:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8000f42:	b299      	uxth	r1, r3
 8000f44:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8000f48:	b29a      	uxth	r2, r3
 8000f4a:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8000f4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f52:	9301      	str	r3, [sp, #4]
 8000f54:	2303      	movs	r3, #3
 8000f56:	9300      	str	r3, [sp, #0]
 8000f58:	2300      	movs	r3, #0
 8000f5a:	f00c fa87 	bl	800d46c <ILI9341_Draw_Text>

	// display output in volts peak-to-peak and decibels
	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile;
 8000f5e:	2000      	movs	r0, #0
 8000f60:	f004 f874 	bl	800504c <SM_GetOutputChannel>
 8000f64:	4603      	mov	r3, r0
 8000f66:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8000f6a:	643b      	str	r3, [r7, #64]	; 0x40

	if(pTmpVppPreset)
 8000f6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d016      	beq.n	8000fa0 <DM_DisplayFormattedOutput+0xfc>
	{
		snprintf(out_vpp, sizeof(out_vpp), "%2.2f Vpp", pTmpVppPreset->amp_value);
 8000f72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	4618      	mov	r0, r3
 8000f78:	f7ff fb0e 	bl	8000598 <__aeabi_f2d>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	460c      	mov	r4, r1
 8000f80:	f107 0020 	add.w	r0, r7, #32
 8000f84:	e9cd 3400 	strd	r3, r4, [sp]
 8000f88:	4a45      	ldr	r2, [pc, #276]	; (80010a0 <DM_DisplayFormattedOutput+0x1fc>)
 8000f8a:	2110      	movs	r1, #16
 8000f8c:	f00d fdba 	bl	800eb04 <sniprintf>
		snprintf(out_decibels, sizeof(out_decibels), "%s", pTmpVppPreset->gain_decibels);
 8000f90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	f107 0014 	add.w	r0, r7, #20
 8000f98:	4a42      	ldr	r2, [pc, #264]	; (80010a4 <DM_DisplayFormattedOutput+0x200>)
 8000f9a:	210b      	movs	r1, #11
 8000f9c:	f00d fdb2 	bl	800eb04 <sniprintf>
	}
	ILI9341_Draw_Text(out_vpp, out_vpp_x, out_vpp_y, BLACK, 3, WHITE);
 8000fa0:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8000fa4:	b299      	uxth	r1, r3
 8000fa6:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8000faa:	b29a      	uxth	r2, r3
 8000fac:	f107 0020 	add.w	r0, r7, #32
 8000fb0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fb4:	9301      	str	r3, [sp, #4]
 8000fb6:	2303      	movs	r3, #3
 8000fb8:	9300      	str	r3, [sp, #0]
 8000fba:	2300      	movs	r3, #0
 8000fbc:	f00c fa56 	bl	800d46c <ILI9341_Draw_Text>
	ILI9341_Draw_Text(out_decibels, out_decibels_x, out_decibels_y, BLACK, 3, WHITE);
 8000fc0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000fc4:	b299      	uxth	r1, r3
 8000fc6:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000fca:	b29a      	uxth	r2, r3
 8000fcc:	f107 0014 	add.w	r0, r7, #20
 8000fd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fd4:	9301      	str	r3, [sp, #4]
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	9300      	str	r3, [sp, #0]
 8000fda:	2300      	movs	r3, #0
 8000fdc:	f00c fa46 	bl	800d46c <ILI9341_Draw_Text>



	// display output bias in +/- Volts
	float dc_volts;
	(BO_GetOutputBias() == 0) ? (dc_volts = 0) : (dc_volts = volts_per_thou * (float)BO_GetOutputBias());
 8000fe0:	f003 fafe 	bl	80045e0 <BO_GetOutputBias>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d103      	bne.n	8000ff2 <DM_DisplayFormattedOutput+0x14e>
 8000fea:	f04f 0300 	mov.w	r3, #0
 8000fee:	657b      	str	r3, [r7, #84]	; 0x54
 8000ff0:	e00b      	b.n	800100a <DM_DisplayFormattedOutput+0x166>
 8000ff2:	f003 faf5 	bl	80045e0 <BO_GetOutputBias>
 8000ff6:	ee07 0a90 	vmov	s15, r0
 8000ffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ffe:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001002:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001006:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

	snprintf(out_dcvolts, sizeof(out_dcvolts), "%1.4f v", dc_volts);
 800100a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800100c:	f7ff fac4 	bl	8000598 <__aeabi_f2d>
 8001010:	4603      	mov	r3, r0
 8001012:	460c      	mov	r4, r1
 8001014:	f107 0008 	add.w	r0, r7, #8
 8001018:	e9cd 3400 	strd	r3, r4, [sp]
 800101c:	4a22      	ldr	r2, [pc, #136]	; (80010a8 <DM_DisplayFormattedOutput+0x204>)
 800101e:	210a      	movs	r1, #10
 8001020:	f00d fd70 	bl	800eb04 <sniprintf>
	if(BO_GetBiasPolarity())
 8001024:	f003 fa7c 	bl	8004520 <BO_GetBiasPolarity>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d018      	beq.n	8001060 <DM_DisplayFormattedOutput+0x1bc>
	{
		char symbol[2] = "+\0";
 800102e:	4b1f      	ldr	r3, [pc, #124]	; (80010ac <DM_DisplayFormattedOutput+0x208>)
 8001030:	881b      	ldrh	r3, [r3, #0]
 8001032:	80bb      	strh	r3, [r7, #4]
		ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, BLACK, 3, WHITE);
 8001034:	f107 0208 	add.w	r2, r7, #8
 8001038:	1d3b      	adds	r3, r7, #4
 800103a:	4611      	mov	r1, r2
 800103c:	4618      	mov	r0, r3
 800103e:	f00d fd95 	bl	800eb6c <strcat>
 8001042:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001046:	b299      	uxth	r1, r3
 8001048:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800104c:	b29a      	uxth	r2, r3
 800104e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001052:	9301      	str	r3, [sp, #4]
 8001054:	2303      	movs	r3, #3
 8001056:	9300      	str	r3, [sp, #0]
 8001058:	2300      	movs	r3, #0
 800105a:	f00c fa07 	bl	800d46c <ILI9341_Draw_Text>
	{
		char symbol[2] = "-\0";
		ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, BLACK, 3, WHITE);
	}

}
 800105e:	e017      	b.n	8001090 <DM_DisplayFormattedOutput+0x1ec>
		char symbol[2] = "-\0";
 8001060:	4b13      	ldr	r3, [pc, #76]	; (80010b0 <DM_DisplayFormattedOutput+0x20c>)
 8001062:	881b      	ldrh	r3, [r3, #0]
 8001064:	803b      	strh	r3, [r7, #0]
		ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, BLACK, 3, WHITE);
 8001066:	f107 0208 	add.w	r2, r7, #8
 800106a:	463b      	mov	r3, r7
 800106c:	4611      	mov	r1, r2
 800106e:	4618      	mov	r0, r3
 8001070:	f00d fd7c 	bl	800eb6c <strcat>
 8001074:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001078:	b299      	uxth	r1, r3
 800107a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800107e:	b29a      	uxth	r2, r3
 8001080:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001084:	9301      	str	r3, [sp, #4]
 8001086:	2303      	movs	r3, #3
 8001088:	9300      	str	r3, [sp, #0]
 800108a:	2300      	movs	r3, #0
 800108c:	f00c f9ee 	bl	800d46c <ILI9341_Draw_Text>
}
 8001090:	bf00      	nop
 8001092:	375c      	adds	r7, #92	; 0x5c
 8001094:	46bd      	mov	sp, r7
 8001096:	bd90      	pop	{r4, r7, pc}
 8001098:	3a449ba6 	.word	0x3a449ba6
 800109c:	08010aa0 	.word	0x08010aa0
 80010a0:	08010aac 	.word	0x08010aac
 80010a4:	08010ab8 	.word	0x08010ab8
 80010a8:	08010abc 	.word	0x08010abc
 80010ac:	08010ac4 	.word	0x08010ac4
 80010b0:	08010ac8 	.word	0x08010ac8

080010b4 <DM_RefreshScreen>:
 *	@param None
 *	@retval None
 *
 */
void DM_RefreshScreen()
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af04      	add	r7, sp, #16
	// pause display interrupts
	HAL_TIM_Base_Stop_IT(&htim15);
 80010ba:	4821      	ldr	r0, [pc, #132]	; (8001140 <DM_RefreshScreen+0x8c>)
 80010bc:	f00a fe92 	bl	800bde4 <HAL_TIM_Base_Stop_IT>


	//ILI9341_Fill_Screen(WHITE);
	ILI9341_FillScreenGradient();
 80010c0:	f00c fa02 	bl	800d4c8 <ILI9341_FillScreenGradient>

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[0],
 80010c4:	4b1f      	ldr	r3, [pc, #124]	; (8001144 <DM_RefreshScreen+0x90>)
 80010c6:	8818      	ldrh	r0, [r3, #0]
 80010c8:	2300      	movs	r3, #0
 80010ca:	9302      	str	r3, [sp, #8]
 80010cc:	2302      	movs	r3, #2
 80010ce:	9301      	str	r3, [sp, #4]
 80010d0:	f240 33ef 	movw	r3, #1007	; 0x3ef
 80010d4:	9300      	str	r3, [sp, #0]
 80010d6:	2332      	movs	r3, #50	; 0x32
 80010d8:	2250      	movs	r2, #80	; 0x50
 80010da:	21c8      	movs	r1, #200	; 0xc8
 80010dc:	f00c f85c 	bl	800d198 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													DARKCYAN,
													BORDER_SIZE,
													BLACK);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[1],
 80010e0:	4b18      	ldr	r3, [pc, #96]	; (8001144 <DM_RefreshScreen+0x90>)
 80010e2:	8858      	ldrh	r0, [r3, #2]
 80010e4:	2300      	movs	r3, #0
 80010e6:	9302      	str	r3, [sp, #8]
 80010e8:	2302      	movs	r3, #2
 80010ea:	9301      	str	r3, [sp, #4]
 80010ec:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 80010f0:	9300      	str	r3, [sp, #0]
 80010f2:	2332      	movs	r3, #50	; 0x32
 80010f4:	2250      	movs	r2, #80	; 0x50
 80010f6:	21c8      	movs	r1, #200	; 0xc8
 80010f8:	f00c f84e 	bl	800d198 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													DARKGREEN,
													BORDER_SIZE,
													BLACK);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[2],
 80010fc:	4b11      	ldr	r3, [pc, #68]	; (8001144 <DM_RefreshScreen+0x90>)
 80010fe:	8898      	ldrh	r0, [r3, #4]
 8001100:	2300      	movs	r3, #0
 8001102:	9302      	str	r3, [sp, #8]
 8001104:	2302      	movs	r3, #2
 8001106:	9301      	str	r3, [sp, #4]
 8001108:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800110c:	9300      	str	r3, [sp, #0]
 800110e:	2332      	movs	r3, #50	; 0x32
 8001110:	2250      	movs	r2, #80	; 0x50
 8001112:	21c8      	movs	r1, #200	; 0xc8
 8001114:	f00c f840 	bl	800d198 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													YELLOW,
													BORDER_SIZE,
													BLACK);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[3],
 8001118:	4b0a      	ldr	r3, [pc, #40]	; (8001144 <DM_RefreshScreen+0x90>)
 800111a:	88d8      	ldrh	r0, [r3, #6]
 800111c:	2300      	movs	r3, #0
 800111e:	9302      	str	r3, [sp, #8]
 8001120:	2302      	movs	r3, #2
 8001122:	9301      	str	r3, [sp, #4]
 8001124:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001128:	9300      	str	r3, [sp, #0]
 800112a:	2332      	movs	r3, #50	; 0x32
 800112c:	2250      	movs	r2, #80	; 0x50
 800112e:	21c8      	movs	r1, #200	; 0xc8
 8001130:	f00c f832 	bl	800d198 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													RED,
													BORDER_SIZE,
													BLACK);
	// resume diaplay interrupts
	HAL_TIM_Base_Start_IT(&htim15);
 8001134:	4802      	ldr	r0, [pc, #8]	; (8001140 <DM_RefreshScreen+0x8c>)
 8001136:	f00a fe1f 	bl	800bd78 <HAL_TIM_Base_Start_IT>
}
 800113a:	bf00      	nop
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	20002794 	.word	0x20002794
 8001144:	20000000 	.word	0x20000000

08001148 <DM_SetErrorDebugMsg>:
	ILI9341_Draw_Text("- SINE", 	10, 30, WHITE, 2, BLACK);
	*/
}

void DM_SetErrorDebugMsg(char* msg)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
	snprintf(ErrorDebugMsg, sizeof(ErrorDebugMsg), "%s", msg);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	4a04      	ldr	r2, [pc, #16]	; (8001164 <DM_SetErrorDebugMsg+0x1c>)
 8001154:	212d      	movs	r1, #45	; 0x2d
 8001156:	4804      	ldr	r0, [pc, #16]	; (8001168 <DM_SetErrorDebugMsg+0x20>)
 8001158:	f00d fcd4 	bl	800eb04 <sniprintf>
}
 800115c:	bf00      	nop
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	08010ab8 	.word	0x08010ab8
 8001168:	20001ee4 	.word	0x20001ee4

0800116c <FreqMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawMenu(eFreqMenu_Status pMenu)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8001176:	79fb      	ldrb	r3, [r7, #7]
 8001178:	3b01      	subs	r3, #1
 800117a:	2b03      	cmp	r3, #3
 800117c:	d816      	bhi.n	80011ac <FreqMenu_DrawMenu+0x40>
 800117e:	a201      	add	r2, pc, #4	; (adr r2, 8001184 <FreqMenu_DrawMenu+0x18>)
 8001180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001184:	08001195 	.word	0x08001195
 8001188:	0800119b 	.word	0x0800119b
 800118c:	080011a1 	.word	0x080011a1
 8001190:	080011a7 	.word	0x080011a7
	{
		case ENABLE_FREQ_MAIN_MENU:
			FreqMenu_DrawMainMenu();
 8001194:	f000 f810 	bl	80011b8 <FreqMenu_DrawMainMenu>
			break;
 8001198:	e009      	b.n	80011ae <FreqMenu_DrawMenu+0x42>
		case ENABLE_FREQ_PRESET_MENU:
			FreqMenu_DrawPresetMenu();
 800119a:	f000 f857 	bl	800124c <FreqMenu_DrawPresetMenu>
			break;
 800119e:	e006      	b.n	80011ae <FreqMenu_DrawMenu+0x42>
		case ENABLE_FREQ_ADJUST_MENU:
			FreqMenu_DrawAdjustMenu();
 80011a0:	f001 fb02 	bl	80027a8 <FreqMenu_DrawAdjustMenu>
			break;
 80011a4:	e003      	b.n	80011ae <FreqMenu_DrawMenu+0x42>
		case ENABLE_FREQ_SWEEP_MENU:
			FreqMenu_DrawSweepMenu();
 80011a6:	f001 fb15 	bl	80027d4 <FreqMenu_DrawSweepMenu>
			break;
 80011aa:	e000      	b.n	80011ae <FreqMenu_DrawMenu+0x42>

		default:
			break;
 80011ac:	bf00      	nop

	}
}
 80011ae:	bf00      	nop
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop

080011b8 <FreqMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawMainMenu()
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af02      	add	r7, sp, #8
	// main
	ILI9341_Draw_Text("OUT->FREQ", 	10, 10, WHITE, 2, BLACK);
 80011be:	2300      	movs	r3, #0
 80011c0:	9301      	str	r3, [sp, #4]
 80011c2:	2302      	movs	r3, #2
 80011c4:	9300      	str	r3, [sp, #0]
 80011c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011ca:	220a      	movs	r2, #10
 80011cc:	210a      	movs	r1, #10
 80011ce:	481a      	ldr	r0, [pc, #104]	; (8001238 <FreqMenu_DrawMainMenu+0x80>)
 80011d0:	f00c f94c 	bl	800d46c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("Select an option below", 	30, 165, BLACK, 2, WHITE);
 80011d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011d8:	9301      	str	r3, [sp, #4]
 80011da:	2302      	movs	r3, #2
 80011dc:	9300      	str	r3, [sp, #0]
 80011de:	2300      	movs	r3, #0
 80011e0:	22a5      	movs	r2, #165	; 0xa5
 80011e2:	211e      	movs	r1, #30
 80011e4:	4815      	ldr	r0, [pc, #84]	; (800123c <FreqMenu_DrawMainMenu+0x84>)
 80011e6:	f00c f941 	bl	800d46c <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 80011ea:	f7ff fe5b 	bl	8000ea4 <DM_DisplayFormattedOutput>

	// buttons
	ILI9341_Draw_Text("PRESET", 5, 210, BLACK, 2, DARKCYAN);
 80011ee:	f240 33ef 	movw	r3, #1007	; 0x3ef
 80011f2:	9301      	str	r3, [sp, #4]
 80011f4:	2302      	movs	r3, #2
 80011f6:	9300      	str	r3, [sp, #0]
 80011f8:	2300      	movs	r3, #0
 80011fa:	22d2      	movs	r2, #210	; 0xd2
 80011fc:	2105      	movs	r1, #5
 80011fe:	4810      	ldr	r0, [pc, #64]	; (8001240 <FreqMenu_DrawMainMenu+0x88>)
 8001200:	f00c f934 	bl	800d46c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("ADJUST", 87, 210, BLACK, 2, DARKGREEN);
 8001204:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8001208:	9301      	str	r3, [sp, #4]
 800120a:	2302      	movs	r3, #2
 800120c:	9300      	str	r3, [sp, #0]
 800120e:	2300      	movs	r3, #0
 8001210:	22d2      	movs	r2, #210	; 0xd2
 8001212:	2157      	movs	r1, #87	; 0x57
 8001214:	480b      	ldr	r0, [pc, #44]	; (8001244 <FreqMenu_DrawMainMenu+0x8c>)
 8001216:	f00c f929 	bl	800d46c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SWEEP", 174, 210, BLACK, 2, YELLOW);
 800121a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800121e:	9301      	str	r3, [sp, #4]
 8001220:	2302      	movs	r3, #2
 8001222:	9300      	str	r3, [sp, #0]
 8001224:	2300      	movs	r3, #0
 8001226:	22d2      	movs	r2, #210	; 0xd2
 8001228:	21ae      	movs	r1, #174	; 0xae
 800122a:	4807      	ldr	r0, [pc, #28]	; (8001248 <FreqMenu_DrawMainMenu+0x90>)
 800122c:	f00c f91e 	bl	800d46c <ILI9341_Draw_Text>
	//ILI9341_Draw_Text("    ", 260, 210, BLACK, 2, RED);
}
 8001230:	bf00      	nop
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	08010b48 	.word	0x08010b48
 800123c:	08010b54 	.word	0x08010b54
 8001240:	08010b6c 	.word	0x08010b6c
 8001244:	08010b74 	.word	0x08010b74
 8001248:	08010b7c 	.word	0x08010b7c

0800124c <FreqMenu_DrawPresetMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawPresetMenu()
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("OUT->FREQ->PRESET", 	10, 10, WHITE, 2, BLACK);
 8001252:	2300      	movs	r3, #0
 8001254:	9301      	str	r3, [sp, #4]
 8001256:	2302      	movs	r3, #2
 8001258:	9300      	str	r3, [sp, #0]
 800125a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800125e:	220a      	movs	r2, #10
 8001260:	210a      	movs	r1, #10
 8001262:	4886      	ldr	r0, [pc, #536]	; (800147c <FreqMenu_DrawPresetMenu+0x230>)
 8001264:	f00c f902 	bl	800d46c <ILI9341_Draw_Text>
	uint8_t menu_pos_y1 = 50;
 8001268:	2332      	movs	r3, #50	; 0x32
 800126a:	73fb      	strb	r3, [r7, #15]
	uint8_t menu_pos_y2 = 70;
 800126c:	2346      	movs	r3, #70	; 0x46
 800126e:	73bb      	strb	r3, [r7, #14]
	uint8_t menu_pos_y3 = 90;
 8001270:	235a      	movs	r3, #90	; 0x5a
 8001272:	737b      	strb	r3, [r7, #13]
	uint8_t menu_pos_y4 = 110;
 8001274:	236e      	movs	r3, #110	; 0x6e
 8001276:	733b      	strb	r3, [r7, #12]
	uint8_t menu_pos_y5 = 130;
 8001278:	2382      	movs	r3, #130	; 0x82
 800127a:	72fb      	strb	r3, [r7, #11]
	uint8_t menu_pos_y6 = 150;
 800127c:	2396      	movs	r3, #150	; 0x96
 800127e:	72bb      	strb	r3, [r7, #10]
	uint8_t menu_pos_y7 = 170;
 8001280:	23aa      	movs	r3, #170	; 0xaa
 8001282:	727b      	strb	r3, [r7, #9]
	FreqProfile_t *pFreqPresetTmp =  FreqO_GetFPresetObject();
 8001284:	f003 fb62 	bl	800494c <FreqO_GetFPresetObject>
 8001288:	6078      	str	r0, [r7, #4]
	if(pFreqPresetTmp)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2b00      	cmp	r3, #0
 800128e:	f001 825d 	beq.w	800274c <FreqMenu_DrawPresetMenu+0x1500>
	{
		switch(pFreqPresetTmp->hertz)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f240 22ee 	movw	r2, #750	; 0x2ee
 800129a:	4293      	cmp	r3, r2
 800129c:	f000 849a 	beq.w	8001bd4 <FreqMenu_DrawPresetMenu+0x988>
 80012a0:	f240 22ee 	movw	r2, #750	; 0x2ee
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d817      	bhi.n	80012d8 <FreqMenu_DrawPresetMenu+0x8c>
 80012a8:	2b32      	cmp	r3, #50	; 0x32
 80012aa:	f000 81b3 	beq.w	8001614 <FreqMenu_DrawPresetMenu+0x3c8>
 80012ae:	2b32      	cmp	r3, #50	; 0x32
 80012b0:	d806      	bhi.n	80012c0 <FreqMenu_DrawPresetMenu+0x74>
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d038      	beq.n	8001328 <FreqMenu_DrawPresetMenu+0xdc>
 80012b6:	2b0a      	cmp	r3, #10
 80012b8:	f000 8102 	beq.w	80014c0 <FreqMenu_DrawPresetMenu+0x274>
	else
	{
		ILI9341_Draw_Text("FreqMenus::FreqMenu_DrawFreqPresetMenu() Error", 		10, 180, RED, 1, BLACK);
	}

}
 80012bc:	f001 ba52 	b.w	8002764 <FreqMenu_DrawPresetMenu+0x1518>
		switch(pFreqPresetTmp->hertz)
 80012c0:	2bfa      	cmp	r3, #250	; 0xfa
 80012c2:	f000 8317 	beq.w	80018f4 <FreqMenu_DrawPresetMenu+0x6a8>
 80012c6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80012ca:	f000 83d9 	beq.w	8001a80 <FreqMenu_DrawPresetMenu+0x834>
 80012ce:	2b64      	cmp	r3, #100	; 0x64
 80012d0:	f000 8266 	beq.w	80017a0 <FreqMenu_DrawPresetMenu+0x554>
}
 80012d4:	f001 ba46 	b.w	8002764 <FreqMenu_DrawPresetMenu+0x1518>
		switch(pFreqPresetTmp->hertz)
 80012d8:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80012dc:	4293      	cmp	r3, r2
 80012de:	f000 8758 	beq.w	8002192 <FreqMenu_DrawPresetMenu+0xf46>
 80012e2:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d80f      	bhi.n	800130a <FreqMenu_DrawPresetMenu+0xbe>
 80012ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80012ee:	4293      	cmp	r3, r2
 80012f0:	f000 85e0 	beq.w	8001eb4 <FreqMenu_DrawPresetMenu+0xc68>
 80012f4:	f242 7210 	movw	r2, #10000	; 0x2710
 80012f8:	4293      	cmp	r3, r2
 80012fa:	f000 86a1 	beq.w	8002040 <FreqMenu_DrawPresetMenu+0xdf4>
 80012fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001302:	f000 852d 	beq.w	8001d60 <FreqMenu_DrawPresetMenu+0xb14>
}
 8001306:	f001 ba2d 	b.w	8002764 <FreqMenu_DrawPresetMenu+0x1518>
		switch(pFreqPresetTmp->hertz)
 800130a:	4a5d      	ldr	r2, [pc, #372]	; (8001480 <FreqMenu_DrawPresetMenu+0x234>)
 800130c:	4293      	cmp	r3, r2
 800130e:	f001 80ae 	beq.w	800246e <FreqMenu_DrawPresetMenu+0x1222>
 8001312:	4a5c      	ldr	r2, [pc, #368]	; (8001484 <FreqMenu_DrawPresetMenu+0x238>)
 8001314:	4293      	cmp	r3, r2
 8001316:	f001 816f 	beq.w	80025f8 <FreqMenu_DrawPresetMenu+0x13ac>
 800131a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800131e:	4293      	cmp	r3, r2
 8001320:	f000 87fc 	beq.w	800231c <FreqMenu_DrawPresetMenu+0x10d0>
}
 8001324:	f001 ba1e 	b.w	8002764 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, WHITE, 2, BLACK);
 8001328:	7bfb      	ldrb	r3, [r7, #15]
 800132a:	b29a      	uxth	r2, r3
 800132c:	2300      	movs	r3, #0
 800132e:	9301      	str	r3, [sp, #4]
 8001330:	2302      	movs	r3, #2
 8001332:	9300      	str	r3, [sp, #0]
 8001334:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001338:	210a      	movs	r1, #10
 800133a:	4853      	ldr	r0, [pc, #332]	; (8001488 <FreqMenu_DrawPresetMenu+0x23c>)
 800133c:	f00c f896 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8001340:	7bbb      	ldrb	r3, [r7, #14]
 8001342:	b29a      	uxth	r2, r3
 8001344:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001348:	9301      	str	r3, [sp, #4]
 800134a:	2302      	movs	r3, #2
 800134c:	9300      	str	r3, [sp, #0]
 800134e:	2300      	movs	r3, #0
 8001350:	210a      	movs	r1, #10
 8001352:	484e      	ldr	r0, [pc, #312]	; (800148c <FreqMenu_DrawPresetMenu+0x240>)
 8001354:	f00c f88a 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8001358:	7b7b      	ldrb	r3, [r7, #13]
 800135a:	b29a      	uxth	r2, r3
 800135c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001360:	9301      	str	r3, [sp, #4]
 8001362:	2302      	movs	r3, #2
 8001364:	9300      	str	r3, [sp, #0]
 8001366:	2300      	movs	r3, #0
 8001368:	210a      	movs	r1, #10
 800136a:	4849      	ldr	r0, [pc, #292]	; (8001490 <FreqMenu_DrawPresetMenu+0x244>)
 800136c:	f00c f87e 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8001370:	7b3b      	ldrb	r3, [r7, #12]
 8001372:	b29a      	uxth	r2, r3
 8001374:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001378:	9301      	str	r3, [sp, #4]
 800137a:	2302      	movs	r3, #2
 800137c:	9300      	str	r3, [sp, #0]
 800137e:	2300      	movs	r3, #0
 8001380:	210a      	movs	r1, #10
 8001382:	4844      	ldr	r0, [pc, #272]	; (8001494 <FreqMenu_DrawPresetMenu+0x248>)
 8001384:	f00c f872 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8001388:	7afb      	ldrb	r3, [r7, #11]
 800138a:	b29a      	uxth	r2, r3
 800138c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001390:	9301      	str	r3, [sp, #4]
 8001392:	2302      	movs	r3, #2
 8001394:	9300      	str	r3, [sp, #0]
 8001396:	2300      	movs	r3, #0
 8001398:	210a      	movs	r1, #10
 800139a:	483f      	ldr	r0, [pc, #252]	; (8001498 <FreqMenu_DrawPresetMenu+0x24c>)
 800139c:	f00c f866 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 80013a0:	7abb      	ldrb	r3, [r7, #10]
 80013a2:	b29a      	uxth	r2, r3
 80013a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013a8:	9301      	str	r3, [sp, #4]
 80013aa:	2302      	movs	r3, #2
 80013ac:	9300      	str	r3, [sp, #0]
 80013ae:	2300      	movs	r3, #0
 80013b0:	210a      	movs	r1, #10
 80013b2:	483a      	ldr	r0, [pc, #232]	; (800149c <FreqMenu_DrawPresetMenu+0x250>)
 80013b4:	f00c f85a 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 80013b8:	7a7b      	ldrb	r3, [r7, #9]
 80013ba:	b29a      	uxth	r2, r3
 80013bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013c0:	9301      	str	r3, [sp, #4]
 80013c2:	2302      	movs	r3, #2
 80013c4:	9300      	str	r3, [sp, #0]
 80013c6:	2300      	movs	r3, #0
 80013c8:	210a      	movs	r1, #10
 80013ca:	4835      	ldr	r0, [pc, #212]	; (80014a0 <FreqMenu_DrawPresetMenu+0x254>)
 80013cc:	f00c f84e 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 80013d0:	7bfb      	ldrb	r3, [r7, #15]
 80013d2:	b29a      	uxth	r2, r3
 80013d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013d8:	9301      	str	r3, [sp, #4]
 80013da:	2302      	movs	r3, #2
 80013dc:	9300      	str	r3, [sp, #0]
 80013de:	2300      	movs	r3, #0
 80013e0:	2178      	movs	r1, #120	; 0x78
 80013e2:	4830      	ldr	r0, [pc, #192]	; (80014a4 <FreqMenu_DrawPresetMenu+0x258>)
 80013e4:	f00c f842 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 80013e8:	7bbb      	ldrb	r3, [r7, #14]
 80013ea:	b29a      	uxth	r2, r3
 80013ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013f0:	9301      	str	r3, [sp, #4]
 80013f2:	2302      	movs	r3, #2
 80013f4:	9300      	str	r3, [sp, #0]
 80013f6:	2300      	movs	r3, #0
 80013f8:	2178      	movs	r1, #120	; 0x78
 80013fa:	482b      	ldr	r0, [pc, #172]	; (80014a8 <FreqMenu_DrawPresetMenu+0x25c>)
 80013fc:	f00c f836 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8001400:	7b7b      	ldrb	r3, [r7, #13]
 8001402:	b29a      	uxth	r2, r3
 8001404:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001408:	9301      	str	r3, [sp, #4]
 800140a:	2302      	movs	r3, #2
 800140c:	9300      	str	r3, [sp, #0]
 800140e:	2300      	movs	r3, #0
 8001410:	2178      	movs	r1, #120	; 0x78
 8001412:	4826      	ldr	r0, [pc, #152]	; (80014ac <FreqMenu_DrawPresetMenu+0x260>)
 8001414:	f00c f82a 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8001418:	7b3b      	ldrb	r3, [r7, #12]
 800141a:	b29a      	uxth	r2, r3
 800141c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001420:	9301      	str	r3, [sp, #4]
 8001422:	2302      	movs	r3, #2
 8001424:	9300      	str	r3, [sp, #0]
 8001426:	2300      	movs	r3, #0
 8001428:	2178      	movs	r1, #120	; 0x78
 800142a:	4821      	ldr	r0, [pc, #132]	; (80014b0 <FreqMenu_DrawPresetMenu+0x264>)
 800142c:	f00c f81e 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8001430:	7afb      	ldrb	r3, [r7, #11]
 8001432:	b29a      	uxth	r2, r3
 8001434:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001438:	9301      	str	r3, [sp, #4]
 800143a:	2302      	movs	r3, #2
 800143c:	9300      	str	r3, [sp, #0]
 800143e:	2300      	movs	r3, #0
 8001440:	2178      	movs	r1, #120	; 0x78
 8001442:	481c      	ldr	r0, [pc, #112]	; (80014b4 <FreqMenu_DrawPresetMenu+0x268>)
 8001444:	f00c f812 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8001448:	7abb      	ldrb	r3, [r7, #10]
 800144a:	b29a      	uxth	r2, r3
 800144c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001450:	9301      	str	r3, [sp, #4]
 8001452:	2302      	movs	r3, #2
 8001454:	9300      	str	r3, [sp, #0]
 8001456:	2300      	movs	r3, #0
 8001458:	2178      	movs	r1, #120	; 0x78
 800145a:	4817      	ldr	r0, [pc, #92]	; (80014b8 <FreqMenu_DrawPresetMenu+0x26c>)
 800145c:	f00c f806 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8001460:	7a7b      	ldrb	r3, [r7, #9]
 8001462:	b29a      	uxth	r2, r3
 8001464:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001468:	9301      	str	r3, [sp, #4]
 800146a:	2302      	movs	r3, #2
 800146c:	9300      	str	r3, [sp, #0]
 800146e:	2300      	movs	r3, #0
 8001470:	2178      	movs	r1, #120	; 0x78
 8001472:	4812      	ldr	r0, [pc, #72]	; (80014bc <FreqMenu_DrawPresetMenu+0x270>)
 8001474:	f00b fffa 	bl	800d46c <ILI9341_Draw_Text>
				break;
 8001478:	f001 b974 	b.w	8002764 <FreqMenu_DrawPresetMenu+0x1518>
 800147c:	08010b84 	.word	0x08010b84
 8001480:	000124f8 	.word	0x000124f8
 8001484:	000186a0 	.word	0x000186a0
 8001488:	08010b98 	.word	0x08010b98
 800148c:	08010ba0 	.word	0x08010ba0
 8001490:	08010ba8 	.word	0x08010ba8
 8001494:	08010bb0 	.word	0x08010bb0
 8001498:	08010bb8 	.word	0x08010bb8
 800149c:	08010bc0 	.word	0x08010bc0
 80014a0:	08010bc8 	.word	0x08010bc8
 80014a4:	08010bd0 	.word	0x08010bd0
 80014a8:	08010bd8 	.word	0x08010bd8
 80014ac:	08010be0 	.word	0x08010be0
 80014b0:	08010be8 	.word	0x08010be8
 80014b4:	08010bf0 	.word	0x08010bf0
 80014b8:	08010bf8 	.word	0x08010bf8
 80014bc:	08010c00 	.word	0x08010c00
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 80014c0:	7bfb      	ldrb	r3, [r7, #15]
 80014c2:	b29a      	uxth	r2, r3
 80014c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014c8:	9301      	str	r3, [sp, #4]
 80014ca:	2302      	movs	r3, #2
 80014cc:	9300      	str	r3, [sp, #0]
 80014ce:	2300      	movs	r3, #0
 80014d0:	210a      	movs	r1, #10
 80014d2:	48a5      	ldr	r0, [pc, #660]	; (8001768 <FreqMenu_DrawPresetMenu+0x51c>)
 80014d4:	f00b ffca 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, WHITE, 2, BLACK);
 80014d8:	7bbb      	ldrb	r3, [r7, #14]
 80014da:	b29a      	uxth	r2, r3
 80014dc:	2300      	movs	r3, #0
 80014de:	9301      	str	r3, [sp, #4]
 80014e0:	2302      	movs	r3, #2
 80014e2:	9300      	str	r3, [sp, #0]
 80014e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014e8:	210a      	movs	r1, #10
 80014ea:	48a0      	ldr	r0, [pc, #640]	; (800176c <FreqMenu_DrawPresetMenu+0x520>)
 80014ec:	f00b ffbe 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 80014f0:	7b7b      	ldrb	r3, [r7, #13]
 80014f2:	b29a      	uxth	r2, r3
 80014f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014f8:	9301      	str	r3, [sp, #4]
 80014fa:	2302      	movs	r3, #2
 80014fc:	9300      	str	r3, [sp, #0]
 80014fe:	2300      	movs	r3, #0
 8001500:	210a      	movs	r1, #10
 8001502:	489b      	ldr	r0, [pc, #620]	; (8001770 <FreqMenu_DrawPresetMenu+0x524>)
 8001504:	f00b ffb2 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8001508:	7b3b      	ldrb	r3, [r7, #12]
 800150a:	b29a      	uxth	r2, r3
 800150c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001510:	9301      	str	r3, [sp, #4]
 8001512:	2302      	movs	r3, #2
 8001514:	9300      	str	r3, [sp, #0]
 8001516:	2300      	movs	r3, #0
 8001518:	210a      	movs	r1, #10
 800151a:	4896      	ldr	r0, [pc, #600]	; (8001774 <FreqMenu_DrawPresetMenu+0x528>)
 800151c:	f00b ffa6 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8001520:	7afb      	ldrb	r3, [r7, #11]
 8001522:	b29a      	uxth	r2, r3
 8001524:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001528:	9301      	str	r3, [sp, #4]
 800152a:	2302      	movs	r3, #2
 800152c:	9300      	str	r3, [sp, #0]
 800152e:	2300      	movs	r3, #0
 8001530:	210a      	movs	r1, #10
 8001532:	4891      	ldr	r0, [pc, #580]	; (8001778 <FreqMenu_DrawPresetMenu+0x52c>)
 8001534:	f00b ff9a 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 8001538:	7abb      	ldrb	r3, [r7, #10]
 800153a:	b29a      	uxth	r2, r3
 800153c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001540:	9301      	str	r3, [sp, #4]
 8001542:	2302      	movs	r3, #2
 8001544:	9300      	str	r3, [sp, #0]
 8001546:	2300      	movs	r3, #0
 8001548:	210a      	movs	r1, #10
 800154a:	488c      	ldr	r0, [pc, #560]	; (800177c <FreqMenu_DrawPresetMenu+0x530>)
 800154c:	f00b ff8e 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8001550:	7a7b      	ldrb	r3, [r7, #9]
 8001552:	b29a      	uxth	r2, r3
 8001554:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001558:	9301      	str	r3, [sp, #4]
 800155a:	2302      	movs	r3, #2
 800155c:	9300      	str	r3, [sp, #0]
 800155e:	2300      	movs	r3, #0
 8001560:	210a      	movs	r1, #10
 8001562:	4887      	ldr	r0, [pc, #540]	; (8001780 <FreqMenu_DrawPresetMenu+0x534>)
 8001564:	f00b ff82 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8001568:	7bfb      	ldrb	r3, [r7, #15]
 800156a:	b29a      	uxth	r2, r3
 800156c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001570:	9301      	str	r3, [sp, #4]
 8001572:	2302      	movs	r3, #2
 8001574:	9300      	str	r3, [sp, #0]
 8001576:	2300      	movs	r3, #0
 8001578:	2178      	movs	r1, #120	; 0x78
 800157a:	4882      	ldr	r0, [pc, #520]	; (8001784 <FreqMenu_DrawPresetMenu+0x538>)
 800157c:	f00b ff76 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 8001580:	7bbb      	ldrb	r3, [r7, #14]
 8001582:	b29a      	uxth	r2, r3
 8001584:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001588:	9301      	str	r3, [sp, #4]
 800158a:	2302      	movs	r3, #2
 800158c:	9300      	str	r3, [sp, #0]
 800158e:	2300      	movs	r3, #0
 8001590:	2178      	movs	r1, #120	; 0x78
 8001592:	487d      	ldr	r0, [pc, #500]	; (8001788 <FreqMenu_DrawPresetMenu+0x53c>)
 8001594:	f00b ff6a 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8001598:	7b7b      	ldrb	r3, [r7, #13]
 800159a:	b29a      	uxth	r2, r3
 800159c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015a0:	9301      	str	r3, [sp, #4]
 80015a2:	2302      	movs	r3, #2
 80015a4:	9300      	str	r3, [sp, #0]
 80015a6:	2300      	movs	r3, #0
 80015a8:	2178      	movs	r1, #120	; 0x78
 80015aa:	4878      	ldr	r0, [pc, #480]	; (800178c <FreqMenu_DrawPresetMenu+0x540>)
 80015ac:	f00b ff5e 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 80015b0:	7b3b      	ldrb	r3, [r7, #12]
 80015b2:	b29a      	uxth	r2, r3
 80015b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015b8:	9301      	str	r3, [sp, #4]
 80015ba:	2302      	movs	r3, #2
 80015bc:	9300      	str	r3, [sp, #0]
 80015be:	2300      	movs	r3, #0
 80015c0:	2178      	movs	r1, #120	; 0x78
 80015c2:	4873      	ldr	r0, [pc, #460]	; (8001790 <FreqMenu_DrawPresetMenu+0x544>)
 80015c4:	f00b ff52 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 80015c8:	7afb      	ldrb	r3, [r7, #11]
 80015ca:	b29a      	uxth	r2, r3
 80015cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015d0:	9301      	str	r3, [sp, #4]
 80015d2:	2302      	movs	r3, #2
 80015d4:	9300      	str	r3, [sp, #0]
 80015d6:	2300      	movs	r3, #0
 80015d8:	2178      	movs	r1, #120	; 0x78
 80015da:	486e      	ldr	r0, [pc, #440]	; (8001794 <FreqMenu_DrawPresetMenu+0x548>)
 80015dc:	f00b ff46 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 80015e0:	7abb      	ldrb	r3, [r7, #10]
 80015e2:	b29a      	uxth	r2, r3
 80015e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015e8:	9301      	str	r3, [sp, #4]
 80015ea:	2302      	movs	r3, #2
 80015ec:	9300      	str	r3, [sp, #0]
 80015ee:	2300      	movs	r3, #0
 80015f0:	2178      	movs	r1, #120	; 0x78
 80015f2:	4869      	ldr	r0, [pc, #420]	; (8001798 <FreqMenu_DrawPresetMenu+0x54c>)
 80015f4:	f00b ff3a 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 80015f8:	7a7b      	ldrb	r3, [r7, #9]
 80015fa:	b29a      	uxth	r2, r3
 80015fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001600:	9301      	str	r3, [sp, #4]
 8001602:	2302      	movs	r3, #2
 8001604:	9300      	str	r3, [sp, #0]
 8001606:	2300      	movs	r3, #0
 8001608:	2178      	movs	r1, #120	; 0x78
 800160a:	4864      	ldr	r0, [pc, #400]	; (800179c <FreqMenu_DrawPresetMenu+0x550>)
 800160c:	f00b ff2e 	bl	800d46c <ILI9341_Draw_Text>
				break;
 8001610:	f001 b8a8 	b.w	8002764 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8001614:	7bfb      	ldrb	r3, [r7, #15]
 8001616:	b29a      	uxth	r2, r3
 8001618:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800161c:	9301      	str	r3, [sp, #4]
 800161e:	2302      	movs	r3, #2
 8001620:	9300      	str	r3, [sp, #0]
 8001622:	2300      	movs	r3, #0
 8001624:	210a      	movs	r1, #10
 8001626:	4850      	ldr	r0, [pc, #320]	; (8001768 <FreqMenu_DrawPresetMenu+0x51c>)
 8001628:	f00b ff20 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 800162c:	7bbb      	ldrb	r3, [r7, #14]
 800162e:	b29a      	uxth	r2, r3
 8001630:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001634:	9301      	str	r3, [sp, #4]
 8001636:	2302      	movs	r3, #2
 8001638:	9300      	str	r3, [sp, #0]
 800163a:	2300      	movs	r3, #0
 800163c:	210a      	movs	r1, #10
 800163e:	484b      	ldr	r0, [pc, #300]	; (800176c <FreqMenu_DrawPresetMenu+0x520>)
 8001640:	f00b ff14 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, WHITE, 2, BLACK);
 8001644:	7b7b      	ldrb	r3, [r7, #13]
 8001646:	b29a      	uxth	r2, r3
 8001648:	2300      	movs	r3, #0
 800164a:	9301      	str	r3, [sp, #4]
 800164c:	2302      	movs	r3, #2
 800164e:	9300      	str	r3, [sp, #0]
 8001650:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001654:	210a      	movs	r1, #10
 8001656:	4846      	ldr	r0, [pc, #280]	; (8001770 <FreqMenu_DrawPresetMenu+0x524>)
 8001658:	f00b ff08 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 800165c:	7b3b      	ldrb	r3, [r7, #12]
 800165e:	b29a      	uxth	r2, r3
 8001660:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001664:	9301      	str	r3, [sp, #4]
 8001666:	2302      	movs	r3, #2
 8001668:	9300      	str	r3, [sp, #0]
 800166a:	2300      	movs	r3, #0
 800166c:	210a      	movs	r1, #10
 800166e:	4841      	ldr	r0, [pc, #260]	; (8001774 <FreqMenu_DrawPresetMenu+0x528>)
 8001670:	f00b fefc 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8001674:	7afb      	ldrb	r3, [r7, #11]
 8001676:	b29a      	uxth	r2, r3
 8001678:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800167c:	9301      	str	r3, [sp, #4]
 800167e:	2302      	movs	r3, #2
 8001680:	9300      	str	r3, [sp, #0]
 8001682:	2300      	movs	r3, #0
 8001684:	210a      	movs	r1, #10
 8001686:	483c      	ldr	r0, [pc, #240]	; (8001778 <FreqMenu_DrawPresetMenu+0x52c>)
 8001688:	f00b fef0 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 800168c:	7abb      	ldrb	r3, [r7, #10]
 800168e:	b29a      	uxth	r2, r3
 8001690:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001694:	9301      	str	r3, [sp, #4]
 8001696:	2302      	movs	r3, #2
 8001698:	9300      	str	r3, [sp, #0]
 800169a:	2300      	movs	r3, #0
 800169c:	210a      	movs	r1, #10
 800169e:	4837      	ldr	r0, [pc, #220]	; (800177c <FreqMenu_DrawPresetMenu+0x530>)
 80016a0:	f00b fee4 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 80016a4:	7a7b      	ldrb	r3, [r7, #9]
 80016a6:	b29a      	uxth	r2, r3
 80016a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016ac:	9301      	str	r3, [sp, #4]
 80016ae:	2302      	movs	r3, #2
 80016b0:	9300      	str	r3, [sp, #0]
 80016b2:	2300      	movs	r3, #0
 80016b4:	210a      	movs	r1, #10
 80016b6:	4832      	ldr	r0, [pc, #200]	; (8001780 <FreqMenu_DrawPresetMenu+0x534>)
 80016b8:	f00b fed8 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 80016bc:	7bfb      	ldrb	r3, [r7, #15]
 80016be:	b29a      	uxth	r2, r3
 80016c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016c4:	9301      	str	r3, [sp, #4]
 80016c6:	2302      	movs	r3, #2
 80016c8:	9300      	str	r3, [sp, #0]
 80016ca:	2300      	movs	r3, #0
 80016cc:	2178      	movs	r1, #120	; 0x78
 80016ce:	482d      	ldr	r0, [pc, #180]	; (8001784 <FreqMenu_DrawPresetMenu+0x538>)
 80016d0:	f00b fecc 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 80016d4:	7bbb      	ldrb	r3, [r7, #14]
 80016d6:	b29a      	uxth	r2, r3
 80016d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016dc:	9301      	str	r3, [sp, #4]
 80016de:	2302      	movs	r3, #2
 80016e0:	9300      	str	r3, [sp, #0]
 80016e2:	2300      	movs	r3, #0
 80016e4:	2178      	movs	r1, #120	; 0x78
 80016e6:	4828      	ldr	r0, [pc, #160]	; (8001788 <FreqMenu_DrawPresetMenu+0x53c>)
 80016e8:	f00b fec0 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 80016ec:	7b7b      	ldrb	r3, [r7, #13]
 80016ee:	b29a      	uxth	r2, r3
 80016f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016f4:	9301      	str	r3, [sp, #4]
 80016f6:	2302      	movs	r3, #2
 80016f8:	9300      	str	r3, [sp, #0]
 80016fa:	2300      	movs	r3, #0
 80016fc:	2178      	movs	r1, #120	; 0x78
 80016fe:	4823      	ldr	r0, [pc, #140]	; (800178c <FreqMenu_DrawPresetMenu+0x540>)
 8001700:	f00b feb4 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8001704:	7b3b      	ldrb	r3, [r7, #12]
 8001706:	b29a      	uxth	r2, r3
 8001708:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800170c:	9301      	str	r3, [sp, #4]
 800170e:	2302      	movs	r3, #2
 8001710:	9300      	str	r3, [sp, #0]
 8001712:	2300      	movs	r3, #0
 8001714:	2178      	movs	r1, #120	; 0x78
 8001716:	481e      	ldr	r0, [pc, #120]	; (8001790 <FreqMenu_DrawPresetMenu+0x544>)
 8001718:	f00b fea8 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 800171c:	7afb      	ldrb	r3, [r7, #11]
 800171e:	b29a      	uxth	r2, r3
 8001720:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001724:	9301      	str	r3, [sp, #4]
 8001726:	2302      	movs	r3, #2
 8001728:	9300      	str	r3, [sp, #0]
 800172a:	2300      	movs	r3, #0
 800172c:	2178      	movs	r1, #120	; 0x78
 800172e:	4819      	ldr	r0, [pc, #100]	; (8001794 <FreqMenu_DrawPresetMenu+0x548>)
 8001730:	f00b fe9c 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8001734:	7abb      	ldrb	r3, [r7, #10]
 8001736:	b29a      	uxth	r2, r3
 8001738:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800173c:	9301      	str	r3, [sp, #4]
 800173e:	2302      	movs	r3, #2
 8001740:	9300      	str	r3, [sp, #0]
 8001742:	2300      	movs	r3, #0
 8001744:	2178      	movs	r1, #120	; 0x78
 8001746:	4814      	ldr	r0, [pc, #80]	; (8001798 <FreqMenu_DrawPresetMenu+0x54c>)
 8001748:	f00b fe90 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 800174c:	7a7b      	ldrb	r3, [r7, #9]
 800174e:	b29a      	uxth	r2, r3
 8001750:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001754:	9301      	str	r3, [sp, #4]
 8001756:	2302      	movs	r3, #2
 8001758:	9300      	str	r3, [sp, #0]
 800175a:	2300      	movs	r3, #0
 800175c:	2178      	movs	r1, #120	; 0x78
 800175e:	480f      	ldr	r0, [pc, #60]	; (800179c <FreqMenu_DrawPresetMenu+0x550>)
 8001760:	f00b fe84 	bl	800d46c <ILI9341_Draw_Text>
				break;
 8001764:	f000 bffe 	b.w	8002764 <FreqMenu_DrawPresetMenu+0x1518>
 8001768:	08010b98 	.word	0x08010b98
 800176c:	08010ba0 	.word	0x08010ba0
 8001770:	08010ba8 	.word	0x08010ba8
 8001774:	08010bb0 	.word	0x08010bb0
 8001778:	08010bb8 	.word	0x08010bb8
 800177c:	08010bc0 	.word	0x08010bc0
 8001780:	08010bc8 	.word	0x08010bc8
 8001784:	08010bd0 	.word	0x08010bd0
 8001788:	08010bd8 	.word	0x08010bd8
 800178c:	08010be0 	.word	0x08010be0
 8001790:	08010be8 	.word	0x08010be8
 8001794:	08010bf0 	.word	0x08010bf0
 8001798:	08010bf8 	.word	0x08010bf8
 800179c:	08010c00 	.word	0x08010c00
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 80017a0:	7bfb      	ldrb	r3, [r7, #15]
 80017a2:	b29a      	uxth	r2, r3
 80017a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017a8:	9301      	str	r3, [sp, #4]
 80017aa:	2302      	movs	r3, #2
 80017ac:	9300      	str	r3, [sp, #0]
 80017ae:	2300      	movs	r3, #0
 80017b0:	210a      	movs	r1, #10
 80017b2:	48a5      	ldr	r0, [pc, #660]	; (8001a48 <FreqMenu_DrawPresetMenu+0x7fc>)
 80017b4:	f00b fe5a 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 80017b8:	7bbb      	ldrb	r3, [r7, #14]
 80017ba:	b29a      	uxth	r2, r3
 80017bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017c0:	9301      	str	r3, [sp, #4]
 80017c2:	2302      	movs	r3, #2
 80017c4:	9300      	str	r3, [sp, #0]
 80017c6:	2300      	movs	r3, #0
 80017c8:	210a      	movs	r1, #10
 80017ca:	48a0      	ldr	r0, [pc, #640]	; (8001a4c <FreqMenu_DrawPresetMenu+0x800>)
 80017cc:	f00b fe4e 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 80017d0:	7b7b      	ldrb	r3, [r7, #13]
 80017d2:	b29a      	uxth	r2, r3
 80017d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017d8:	9301      	str	r3, [sp, #4]
 80017da:	2302      	movs	r3, #2
 80017dc:	9300      	str	r3, [sp, #0]
 80017de:	2300      	movs	r3, #0
 80017e0:	210a      	movs	r1, #10
 80017e2:	489b      	ldr	r0, [pc, #620]	; (8001a50 <FreqMenu_DrawPresetMenu+0x804>)
 80017e4:	f00b fe42 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, WHITE, 2, BLACK);
 80017e8:	7b3b      	ldrb	r3, [r7, #12]
 80017ea:	b29a      	uxth	r2, r3
 80017ec:	2300      	movs	r3, #0
 80017ee:	9301      	str	r3, [sp, #4]
 80017f0:	2302      	movs	r3, #2
 80017f2:	9300      	str	r3, [sp, #0]
 80017f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017f8:	210a      	movs	r1, #10
 80017fa:	4896      	ldr	r0, [pc, #600]	; (8001a54 <FreqMenu_DrawPresetMenu+0x808>)
 80017fc:	f00b fe36 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8001800:	7afb      	ldrb	r3, [r7, #11]
 8001802:	b29a      	uxth	r2, r3
 8001804:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001808:	9301      	str	r3, [sp, #4]
 800180a:	2302      	movs	r3, #2
 800180c:	9300      	str	r3, [sp, #0]
 800180e:	2300      	movs	r3, #0
 8001810:	210a      	movs	r1, #10
 8001812:	4891      	ldr	r0, [pc, #580]	; (8001a58 <FreqMenu_DrawPresetMenu+0x80c>)
 8001814:	f00b fe2a 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 8001818:	7abb      	ldrb	r3, [r7, #10]
 800181a:	b29a      	uxth	r2, r3
 800181c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001820:	9301      	str	r3, [sp, #4]
 8001822:	2302      	movs	r3, #2
 8001824:	9300      	str	r3, [sp, #0]
 8001826:	2300      	movs	r3, #0
 8001828:	210a      	movs	r1, #10
 800182a:	488c      	ldr	r0, [pc, #560]	; (8001a5c <FreqMenu_DrawPresetMenu+0x810>)
 800182c:	f00b fe1e 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8001830:	7a7b      	ldrb	r3, [r7, #9]
 8001832:	b29a      	uxth	r2, r3
 8001834:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001838:	9301      	str	r3, [sp, #4]
 800183a:	2302      	movs	r3, #2
 800183c:	9300      	str	r3, [sp, #0]
 800183e:	2300      	movs	r3, #0
 8001840:	210a      	movs	r1, #10
 8001842:	4887      	ldr	r0, [pc, #540]	; (8001a60 <FreqMenu_DrawPresetMenu+0x814>)
 8001844:	f00b fe12 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8001848:	7bfb      	ldrb	r3, [r7, #15]
 800184a:	b29a      	uxth	r2, r3
 800184c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001850:	9301      	str	r3, [sp, #4]
 8001852:	2302      	movs	r3, #2
 8001854:	9300      	str	r3, [sp, #0]
 8001856:	2300      	movs	r3, #0
 8001858:	2178      	movs	r1, #120	; 0x78
 800185a:	4882      	ldr	r0, [pc, #520]	; (8001a64 <FreqMenu_DrawPresetMenu+0x818>)
 800185c:	f00b fe06 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 8001860:	7bbb      	ldrb	r3, [r7, #14]
 8001862:	b29a      	uxth	r2, r3
 8001864:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001868:	9301      	str	r3, [sp, #4]
 800186a:	2302      	movs	r3, #2
 800186c:	9300      	str	r3, [sp, #0]
 800186e:	2300      	movs	r3, #0
 8001870:	2178      	movs	r1, #120	; 0x78
 8001872:	487d      	ldr	r0, [pc, #500]	; (8001a68 <FreqMenu_DrawPresetMenu+0x81c>)
 8001874:	f00b fdfa 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8001878:	7b7b      	ldrb	r3, [r7, #13]
 800187a:	b29a      	uxth	r2, r3
 800187c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001880:	9301      	str	r3, [sp, #4]
 8001882:	2302      	movs	r3, #2
 8001884:	9300      	str	r3, [sp, #0]
 8001886:	2300      	movs	r3, #0
 8001888:	2178      	movs	r1, #120	; 0x78
 800188a:	4878      	ldr	r0, [pc, #480]	; (8001a6c <FreqMenu_DrawPresetMenu+0x820>)
 800188c:	f00b fdee 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8001890:	7b3b      	ldrb	r3, [r7, #12]
 8001892:	b29a      	uxth	r2, r3
 8001894:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001898:	9301      	str	r3, [sp, #4]
 800189a:	2302      	movs	r3, #2
 800189c:	9300      	str	r3, [sp, #0]
 800189e:	2300      	movs	r3, #0
 80018a0:	2178      	movs	r1, #120	; 0x78
 80018a2:	4873      	ldr	r0, [pc, #460]	; (8001a70 <FreqMenu_DrawPresetMenu+0x824>)
 80018a4:	f00b fde2 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 80018a8:	7afb      	ldrb	r3, [r7, #11]
 80018aa:	b29a      	uxth	r2, r3
 80018ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018b0:	9301      	str	r3, [sp, #4]
 80018b2:	2302      	movs	r3, #2
 80018b4:	9300      	str	r3, [sp, #0]
 80018b6:	2300      	movs	r3, #0
 80018b8:	2178      	movs	r1, #120	; 0x78
 80018ba:	486e      	ldr	r0, [pc, #440]	; (8001a74 <FreqMenu_DrawPresetMenu+0x828>)
 80018bc:	f00b fdd6 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 80018c0:	7abb      	ldrb	r3, [r7, #10]
 80018c2:	b29a      	uxth	r2, r3
 80018c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018c8:	9301      	str	r3, [sp, #4]
 80018ca:	2302      	movs	r3, #2
 80018cc:	9300      	str	r3, [sp, #0]
 80018ce:	2300      	movs	r3, #0
 80018d0:	2178      	movs	r1, #120	; 0x78
 80018d2:	4869      	ldr	r0, [pc, #420]	; (8001a78 <FreqMenu_DrawPresetMenu+0x82c>)
 80018d4:	f00b fdca 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 80018d8:	7a7b      	ldrb	r3, [r7, #9]
 80018da:	b29a      	uxth	r2, r3
 80018dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018e0:	9301      	str	r3, [sp, #4]
 80018e2:	2302      	movs	r3, #2
 80018e4:	9300      	str	r3, [sp, #0]
 80018e6:	2300      	movs	r3, #0
 80018e8:	2178      	movs	r1, #120	; 0x78
 80018ea:	4864      	ldr	r0, [pc, #400]	; (8001a7c <FreqMenu_DrawPresetMenu+0x830>)
 80018ec:	f00b fdbe 	bl	800d46c <ILI9341_Draw_Text>
				break;
 80018f0:	f000 bf38 	b.w	8002764 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 80018f4:	7bfb      	ldrb	r3, [r7, #15]
 80018f6:	b29a      	uxth	r2, r3
 80018f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018fc:	9301      	str	r3, [sp, #4]
 80018fe:	2302      	movs	r3, #2
 8001900:	9300      	str	r3, [sp, #0]
 8001902:	2300      	movs	r3, #0
 8001904:	210a      	movs	r1, #10
 8001906:	4850      	ldr	r0, [pc, #320]	; (8001a48 <FreqMenu_DrawPresetMenu+0x7fc>)
 8001908:	f00b fdb0 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 800190c:	7bbb      	ldrb	r3, [r7, #14]
 800190e:	b29a      	uxth	r2, r3
 8001910:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001914:	9301      	str	r3, [sp, #4]
 8001916:	2302      	movs	r3, #2
 8001918:	9300      	str	r3, [sp, #0]
 800191a:	2300      	movs	r3, #0
 800191c:	210a      	movs	r1, #10
 800191e:	484b      	ldr	r0, [pc, #300]	; (8001a4c <FreqMenu_DrawPresetMenu+0x800>)
 8001920:	f00b fda4 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8001924:	7b7b      	ldrb	r3, [r7, #13]
 8001926:	b29a      	uxth	r2, r3
 8001928:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800192c:	9301      	str	r3, [sp, #4]
 800192e:	2302      	movs	r3, #2
 8001930:	9300      	str	r3, [sp, #0]
 8001932:	2300      	movs	r3, #0
 8001934:	210a      	movs	r1, #10
 8001936:	4846      	ldr	r0, [pc, #280]	; (8001a50 <FreqMenu_DrawPresetMenu+0x804>)
 8001938:	f00b fd98 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 800193c:	7b3b      	ldrb	r3, [r7, #12]
 800193e:	b29a      	uxth	r2, r3
 8001940:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001944:	9301      	str	r3, [sp, #4]
 8001946:	2302      	movs	r3, #2
 8001948:	9300      	str	r3, [sp, #0]
 800194a:	2300      	movs	r3, #0
 800194c:	210a      	movs	r1, #10
 800194e:	4841      	ldr	r0, [pc, #260]	; (8001a54 <FreqMenu_DrawPresetMenu+0x808>)
 8001950:	f00b fd8c 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, WHITE, 2, BLACK);
 8001954:	7afb      	ldrb	r3, [r7, #11]
 8001956:	b29a      	uxth	r2, r3
 8001958:	2300      	movs	r3, #0
 800195a:	9301      	str	r3, [sp, #4]
 800195c:	2302      	movs	r3, #2
 800195e:	9300      	str	r3, [sp, #0]
 8001960:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001964:	210a      	movs	r1, #10
 8001966:	483c      	ldr	r0, [pc, #240]	; (8001a58 <FreqMenu_DrawPresetMenu+0x80c>)
 8001968:	f00b fd80 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 800196c:	7abb      	ldrb	r3, [r7, #10]
 800196e:	b29a      	uxth	r2, r3
 8001970:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001974:	9301      	str	r3, [sp, #4]
 8001976:	2302      	movs	r3, #2
 8001978:	9300      	str	r3, [sp, #0]
 800197a:	2300      	movs	r3, #0
 800197c:	210a      	movs	r1, #10
 800197e:	4837      	ldr	r0, [pc, #220]	; (8001a5c <FreqMenu_DrawPresetMenu+0x810>)
 8001980:	f00b fd74 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8001984:	7a7b      	ldrb	r3, [r7, #9]
 8001986:	b29a      	uxth	r2, r3
 8001988:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800198c:	9301      	str	r3, [sp, #4]
 800198e:	2302      	movs	r3, #2
 8001990:	9300      	str	r3, [sp, #0]
 8001992:	2300      	movs	r3, #0
 8001994:	210a      	movs	r1, #10
 8001996:	4832      	ldr	r0, [pc, #200]	; (8001a60 <FreqMenu_DrawPresetMenu+0x814>)
 8001998:	f00b fd68 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 800199c:	7bfb      	ldrb	r3, [r7, #15]
 800199e:	b29a      	uxth	r2, r3
 80019a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019a4:	9301      	str	r3, [sp, #4]
 80019a6:	2302      	movs	r3, #2
 80019a8:	9300      	str	r3, [sp, #0]
 80019aa:	2300      	movs	r3, #0
 80019ac:	2178      	movs	r1, #120	; 0x78
 80019ae:	482d      	ldr	r0, [pc, #180]	; (8001a64 <FreqMenu_DrawPresetMenu+0x818>)
 80019b0:	f00b fd5c 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 80019b4:	7bbb      	ldrb	r3, [r7, #14]
 80019b6:	b29a      	uxth	r2, r3
 80019b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019bc:	9301      	str	r3, [sp, #4]
 80019be:	2302      	movs	r3, #2
 80019c0:	9300      	str	r3, [sp, #0]
 80019c2:	2300      	movs	r3, #0
 80019c4:	2178      	movs	r1, #120	; 0x78
 80019c6:	4828      	ldr	r0, [pc, #160]	; (8001a68 <FreqMenu_DrawPresetMenu+0x81c>)
 80019c8:	f00b fd50 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 80019cc:	7b7b      	ldrb	r3, [r7, #13]
 80019ce:	b29a      	uxth	r2, r3
 80019d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019d4:	9301      	str	r3, [sp, #4]
 80019d6:	2302      	movs	r3, #2
 80019d8:	9300      	str	r3, [sp, #0]
 80019da:	2300      	movs	r3, #0
 80019dc:	2178      	movs	r1, #120	; 0x78
 80019de:	4823      	ldr	r0, [pc, #140]	; (8001a6c <FreqMenu_DrawPresetMenu+0x820>)
 80019e0:	f00b fd44 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 80019e4:	7b3b      	ldrb	r3, [r7, #12]
 80019e6:	b29a      	uxth	r2, r3
 80019e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019ec:	9301      	str	r3, [sp, #4]
 80019ee:	2302      	movs	r3, #2
 80019f0:	9300      	str	r3, [sp, #0]
 80019f2:	2300      	movs	r3, #0
 80019f4:	2178      	movs	r1, #120	; 0x78
 80019f6:	481e      	ldr	r0, [pc, #120]	; (8001a70 <FreqMenu_DrawPresetMenu+0x824>)
 80019f8:	f00b fd38 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 80019fc:	7afb      	ldrb	r3, [r7, #11]
 80019fe:	b29a      	uxth	r2, r3
 8001a00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a04:	9301      	str	r3, [sp, #4]
 8001a06:	2302      	movs	r3, #2
 8001a08:	9300      	str	r3, [sp, #0]
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	2178      	movs	r1, #120	; 0x78
 8001a0e:	4819      	ldr	r0, [pc, #100]	; (8001a74 <FreqMenu_DrawPresetMenu+0x828>)
 8001a10:	f00b fd2c 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8001a14:	7abb      	ldrb	r3, [r7, #10]
 8001a16:	b29a      	uxth	r2, r3
 8001a18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a1c:	9301      	str	r3, [sp, #4]
 8001a1e:	2302      	movs	r3, #2
 8001a20:	9300      	str	r3, [sp, #0]
 8001a22:	2300      	movs	r3, #0
 8001a24:	2178      	movs	r1, #120	; 0x78
 8001a26:	4814      	ldr	r0, [pc, #80]	; (8001a78 <FreqMenu_DrawPresetMenu+0x82c>)
 8001a28:	f00b fd20 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8001a2c:	7a7b      	ldrb	r3, [r7, #9]
 8001a2e:	b29a      	uxth	r2, r3
 8001a30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a34:	9301      	str	r3, [sp, #4]
 8001a36:	2302      	movs	r3, #2
 8001a38:	9300      	str	r3, [sp, #0]
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	2178      	movs	r1, #120	; 0x78
 8001a3e:	480f      	ldr	r0, [pc, #60]	; (8001a7c <FreqMenu_DrawPresetMenu+0x830>)
 8001a40:	f00b fd14 	bl	800d46c <ILI9341_Draw_Text>
				break;
 8001a44:	f000 be8e 	b.w	8002764 <FreqMenu_DrawPresetMenu+0x1518>
 8001a48:	08010b98 	.word	0x08010b98
 8001a4c:	08010ba0 	.word	0x08010ba0
 8001a50:	08010ba8 	.word	0x08010ba8
 8001a54:	08010bb0 	.word	0x08010bb0
 8001a58:	08010bb8 	.word	0x08010bb8
 8001a5c:	08010bc0 	.word	0x08010bc0
 8001a60:	08010bc8 	.word	0x08010bc8
 8001a64:	08010bd0 	.word	0x08010bd0
 8001a68:	08010bd8 	.word	0x08010bd8
 8001a6c:	08010be0 	.word	0x08010be0
 8001a70:	08010be8 	.word	0x08010be8
 8001a74:	08010bf0 	.word	0x08010bf0
 8001a78:	08010bf8 	.word	0x08010bf8
 8001a7c:	08010c00 	.word	0x08010c00
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8001a80:	7bfb      	ldrb	r3, [r7, #15]
 8001a82:	b29a      	uxth	r2, r3
 8001a84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a88:	9301      	str	r3, [sp, #4]
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	9300      	str	r3, [sp, #0]
 8001a8e:	2300      	movs	r3, #0
 8001a90:	210a      	movs	r1, #10
 8001a92:	48a5      	ldr	r0, [pc, #660]	; (8001d28 <FreqMenu_DrawPresetMenu+0xadc>)
 8001a94:	f00b fcea 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8001a98:	7bbb      	ldrb	r3, [r7, #14]
 8001a9a:	b29a      	uxth	r2, r3
 8001a9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001aa0:	9301      	str	r3, [sp, #4]
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	9300      	str	r3, [sp, #0]
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	210a      	movs	r1, #10
 8001aaa:	48a0      	ldr	r0, [pc, #640]	; (8001d2c <FreqMenu_DrawPresetMenu+0xae0>)
 8001aac:	f00b fcde 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8001ab0:	7b7b      	ldrb	r3, [r7, #13]
 8001ab2:	b29a      	uxth	r2, r3
 8001ab4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ab8:	9301      	str	r3, [sp, #4]
 8001aba:	2302      	movs	r3, #2
 8001abc:	9300      	str	r3, [sp, #0]
 8001abe:	2300      	movs	r3, #0
 8001ac0:	210a      	movs	r1, #10
 8001ac2:	489b      	ldr	r0, [pc, #620]	; (8001d30 <FreqMenu_DrawPresetMenu+0xae4>)
 8001ac4:	f00b fcd2 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8001ac8:	7b3b      	ldrb	r3, [r7, #12]
 8001aca:	b29a      	uxth	r2, r3
 8001acc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ad0:	9301      	str	r3, [sp, #4]
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	9300      	str	r3, [sp, #0]
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	210a      	movs	r1, #10
 8001ada:	4896      	ldr	r0, [pc, #600]	; (8001d34 <FreqMenu_DrawPresetMenu+0xae8>)
 8001adc:	f00b fcc6 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8001ae0:	7afb      	ldrb	r3, [r7, #11]
 8001ae2:	b29a      	uxth	r2, r3
 8001ae4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ae8:	9301      	str	r3, [sp, #4]
 8001aea:	2302      	movs	r3, #2
 8001aec:	9300      	str	r3, [sp, #0]
 8001aee:	2300      	movs	r3, #0
 8001af0:	210a      	movs	r1, #10
 8001af2:	4891      	ldr	r0, [pc, #580]	; (8001d38 <FreqMenu_DrawPresetMenu+0xaec>)
 8001af4:	f00b fcba 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, WHITE, 2, BLACK);
 8001af8:	7abb      	ldrb	r3, [r7, #10]
 8001afa:	b29a      	uxth	r2, r3
 8001afc:	2300      	movs	r3, #0
 8001afe:	9301      	str	r3, [sp, #4]
 8001b00:	2302      	movs	r3, #2
 8001b02:	9300      	str	r3, [sp, #0]
 8001b04:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b08:	210a      	movs	r1, #10
 8001b0a:	488c      	ldr	r0, [pc, #560]	; (8001d3c <FreqMenu_DrawPresetMenu+0xaf0>)
 8001b0c:	f00b fcae 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8001b10:	7a7b      	ldrb	r3, [r7, #9]
 8001b12:	b29a      	uxth	r2, r3
 8001b14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b18:	9301      	str	r3, [sp, #4]
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	9300      	str	r3, [sp, #0]
 8001b1e:	2300      	movs	r3, #0
 8001b20:	210a      	movs	r1, #10
 8001b22:	4887      	ldr	r0, [pc, #540]	; (8001d40 <FreqMenu_DrawPresetMenu+0xaf4>)
 8001b24:	f00b fca2 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8001b28:	7bfb      	ldrb	r3, [r7, #15]
 8001b2a:	b29a      	uxth	r2, r3
 8001b2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b30:	9301      	str	r3, [sp, #4]
 8001b32:	2302      	movs	r3, #2
 8001b34:	9300      	str	r3, [sp, #0]
 8001b36:	2300      	movs	r3, #0
 8001b38:	2178      	movs	r1, #120	; 0x78
 8001b3a:	4882      	ldr	r0, [pc, #520]	; (8001d44 <FreqMenu_DrawPresetMenu+0xaf8>)
 8001b3c:	f00b fc96 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 8001b40:	7bbb      	ldrb	r3, [r7, #14]
 8001b42:	b29a      	uxth	r2, r3
 8001b44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b48:	9301      	str	r3, [sp, #4]
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	9300      	str	r3, [sp, #0]
 8001b4e:	2300      	movs	r3, #0
 8001b50:	2178      	movs	r1, #120	; 0x78
 8001b52:	487d      	ldr	r0, [pc, #500]	; (8001d48 <FreqMenu_DrawPresetMenu+0xafc>)
 8001b54:	f00b fc8a 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8001b58:	7b7b      	ldrb	r3, [r7, #13]
 8001b5a:	b29a      	uxth	r2, r3
 8001b5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b60:	9301      	str	r3, [sp, #4]
 8001b62:	2302      	movs	r3, #2
 8001b64:	9300      	str	r3, [sp, #0]
 8001b66:	2300      	movs	r3, #0
 8001b68:	2178      	movs	r1, #120	; 0x78
 8001b6a:	4878      	ldr	r0, [pc, #480]	; (8001d4c <FreqMenu_DrawPresetMenu+0xb00>)
 8001b6c:	f00b fc7e 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8001b70:	7b3b      	ldrb	r3, [r7, #12]
 8001b72:	b29a      	uxth	r2, r3
 8001b74:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b78:	9301      	str	r3, [sp, #4]
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	9300      	str	r3, [sp, #0]
 8001b7e:	2300      	movs	r3, #0
 8001b80:	2178      	movs	r1, #120	; 0x78
 8001b82:	4873      	ldr	r0, [pc, #460]	; (8001d50 <FreqMenu_DrawPresetMenu+0xb04>)
 8001b84:	f00b fc72 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8001b88:	7afb      	ldrb	r3, [r7, #11]
 8001b8a:	b29a      	uxth	r2, r3
 8001b8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b90:	9301      	str	r3, [sp, #4]
 8001b92:	2302      	movs	r3, #2
 8001b94:	9300      	str	r3, [sp, #0]
 8001b96:	2300      	movs	r3, #0
 8001b98:	2178      	movs	r1, #120	; 0x78
 8001b9a:	486e      	ldr	r0, [pc, #440]	; (8001d54 <FreqMenu_DrawPresetMenu+0xb08>)
 8001b9c:	f00b fc66 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8001ba0:	7abb      	ldrb	r3, [r7, #10]
 8001ba2:	b29a      	uxth	r2, r3
 8001ba4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ba8:	9301      	str	r3, [sp, #4]
 8001baa:	2302      	movs	r3, #2
 8001bac:	9300      	str	r3, [sp, #0]
 8001bae:	2300      	movs	r3, #0
 8001bb0:	2178      	movs	r1, #120	; 0x78
 8001bb2:	4869      	ldr	r0, [pc, #420]	; (8001d58 <FreqMenu_DrawPresetMenu+0xb0c>)
 8001bb4:	f00b fc5a 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8001bb8:	7a7b      	ldrb	r3, [r7, #9]
 8001bba:	b29a      	uxth	r2, r3
 8001bbc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bc0:	9301      	str	r3, [sp, #4]
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	9300      	str	r3, [sp, #0]
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	2178      	movs	r1, #120	; 0x78
 8001bca:	4864      	ldr	r0, [pc, #400]	; (8001d5c <FreqMenu_DrawPresetMenu+0xb10>)
 8001bcc:	f00b fc4e 	bl	800d46c <ILI9341_Draw_Text>
				break;
 8001bd0:	f000 bdc8 	b.w	8002764 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8001bd4:	7bfb      	ldrb	r3, [r7, #15]
 8001bd6:	b29a      	uxth	r2, r3
 8001bd8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bdc:	9301      	str	r3, [sp, #4]
 8001bde:	2302      	movs	r3, #2
 8001be0:	9300      	str	r3, [sp, #0]
 8001be2:	2300      	movs	r3, #0
 8001be4:	210a      	movs	r1, #10
 8001be6:	4850      	ldr	r0, [pc, #320]	; (8001d28 <FreqMenu_DrawPresetMenu+0xadc>)
 8001be8:	f00b fc40 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8001bec:	7bbb      	ldrb	r3, [r7, #14]
 8001bee:	b29a      	uxth	r2, r3
 8001bf0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bf4:	9301      	str	r3, [sp, #4]
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	9300      	str	r3, [sp, #0]
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	210a      	movs	r1, #10
 8001bfe:	484b      	ldr	r0, [pc, #300]	; (8001d2c <FreqMenu_DrawPresetMenu+0xae0>)
 8001c00:	f00b fc34 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8001c04:	7b7b      	ldrb	r3, [r7, #13]
 8001c06:	b29a      	uxth	r2, r3
 8001c08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c0c:	9301      	str	r3, [sp, #4]
 8001c0e:	2302      	movs	r3, #2
 8001c10:	9300      	str	r3, [sp, #0]
 8001c12:	2300      	movs	r3, #0
 8001c14:	210a      	movs	r1, #10
 8001c16:	4846      	ldr	r0, [pc, #280]	; (8001d30 <FreqMenu_DrawPresetMenu+0xae4>)
 8001c18:	f00b fc28 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8001c1c:	7b3b      	ldrb	r3, [r7, #12]
 8001c1e:	b29a      	uxth	r2, r3
 8001c20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c24:	9301      	str	r3, [sp, #4]
 8001c26:	2302      	movs	r3, #2
 8001c28:	9300      	str	r3, [sp, #0]
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	210a      	movs	r1, #10
 8001c2e:	4841      	ldr	r0, [pc, #260]	; (8001d34 <FreqMenu_DrawPresetMenu+0xae8>)
 8001c30:	f00b fc1c 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8001c34:	7afb      	ldrb	r3, [r7, #11]
 8001c36:	b29a      	uxth	r2, r3
 8001c38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c3c:	9301      	str	r3, [sp, #4]
 8001c3e:	2302      	movs	r3, #2
 8001c40:	9300      	str	r3, [sp, #0]
 8001c42:	2300      	movs	r3, #0
 8001c44:	210a      	movs	r1, #10
 8001c46:	483c      	ldr	r0, [pc, #240]	; (8001d38 <FreqMenu_DrawPresetMenu+0xaec>)
 8001c48:	f00b fc10 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 8001c4c:	7abb      	ldrb	r3, [r7, #10]
 8001c4e:	b29a      	uxth	r2, r3
 8001c50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c54:	9301      	str	r3, [sp, #4]
 8001c56:	2302      	movs	r3, #2
 8001c58:	9300      	str	r3, [sp, #0]
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	210a      	movs	r1, #10
 8001c5e:	4837      	ldr	r0, [pc, #220]	; (8001d3c <FreqMenu_DrawPresetMenu+0xaf0>)
 8001c60:	f00b fc04 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, WHITE, 2, BLACK);
 8001c64:	7a7b      	ldrb	r3, [r7, #9]
 8001c66:	b29a      	uxth	r2, r3
 8001c68:	2300      	movs	r3, #0
 8001c6a:	9301      	str	r3, [sp, #4]
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	9300      	str	r3, [sp, #0]
 8001c70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c74:	210a      	movs	r1, #10
 8001c76:	4832      	ldr	r0, [pc, #200]	; (8001d40 <FreqMenu_DrawPresetMenu+0xaf4>)
 8001c78:	f00b fbf8 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8001c7c:	7bfb      	ldrb	r3, [r7, #15]
 8001c7e:	b29a      	uxth	r2, r3
 8001c80:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c84:	9301      	str	r3, [sp, #4]
 8001c86:	2302      	movs	r3, #2
 8001c88:	9300      	str	r3, [sp, #0]
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	2178      	movs	r1, #120	; 0x78
 8001c8e:	482d      	ldr	r0, [pc, #180]	; (8001d44 <FreqMenu_DrawPresetMenu+0xaf8>)
 8001c90:	f00b fbec 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 8001c94:	7bbb      	ldrb	r3, [r7, #14]
 8001c96:	b29a      	uxth	r2, r3
 8001c98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c9c:	9301      	str	r3, [sp, #4]
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	9300      	str	r3, [sp, #0]
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	2178      	movs	r1, #120	; 0x78
 8001ca6:	4828      	ldr	r0, [pc, #160]	; (8001d48 <FreqMenu_DrawPresetMenu+0xafc>)
 8001ca8:	f00b fbe0 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8001cac:	7b7b      	ldrb	r3, [r7, #13]
 8001cae:	b29a      	uxth	r2, r3
 8001cb0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cb4:	9301      	str	r3, [sp, #4]
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	9300      	str	r3, [sp, #0]
 8001cba:	2300      	movs	r3, #0
 8001cbc:	2178      	movs	r1, #120	; 0x78
 8001cbe:	4823      	ldr	r0, [pc, #140]	; (8001d4c <FreqMenu_DrawPresetMenu+0xb00>)
 8001cc0:	f00b fbd4 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8001cc4:	7b3b      	ldrb	r3, [r7, #12]
 8001cc6:	b29a      	uxth	r2, r3
 8001cc8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ccc:	9301      	str	r3, [sp, #4]
 8001cce:	2302      	movs	r3, #2
 8001cd0:	9300      	str	r3, [sp, #0]
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	2178      	movs	r1, #120	; 0x78
 8001cd6:	481e      	ldr	r0, [pc, #120]	; (8001d50 <FreqMenu_DrawPresetMenu+0xb04>)
 8001cd8:	f00b fbc8 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8001cdc:	7afb      	ldrb	r3, [r7, #11]
 8001cde:	b29a      	uxth	r2, r3
 8001ce0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ce4:	9301      	str	r3, [sp, #4]
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	9300      	str	r3, [sp, #0]
 8001cea:	2300      	movs	r3, #0
 8001cec:	2178      	movs	r1, #120	; 0x78
 8001cee:	4819      	ldr	r0, [pc, #100]	; (8001d54 <FreqMenu_DrawPresetMenu+0xb08>)
 8001cf0:	f00b fbbc 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8001cf4:	7abb      	ldrb	r3, [r7, #10]
 8001cf6:	b29a      	uxth	r2, r3
 8001cf8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cfc:	9301      	str	r3, [sp, #4]
 8001cfe:	2302      	movs	r3, #2
 8001d00:	9300      	str	r3, [sp, #0]
 8001d02:	2300      	movs	r3, #0
 8001d04:	2178      	movs	r1, #120	; 0x78
 8001d06:	4814      	ldr	r0, [pc, #80]	; (8001d58 <FreqMenu_DrawPresetMenu+0xb0c>)
 8001d08:	f00b fbb0 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8001d0c:	7a7b      	ldrb	r3, [r7, #9]
 8001d0e:	b29a      	uxth	r2, r3
 8001d10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d14:	9301      	str	r3, [sp, #4]
 8001d16:	2302      	movs	r3, #2
 8001d18:	9300      	str	r3, [sp, #0]
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	2178      	movs	r1, #120	; 0x78
 8001d1e:	480f      	ldr	r0, [pc, #60]	; (8001d5c <FreqMenu_DrawPresetMenu+0xb10>)
 8001d20:	f00b fba4 	bl	800d46c <ILI9341_Draw_Text>
				break;
 8001d24:	f000 bd1e 	b.w	8002764 <FreqMenu_DrawPresetMenu+0x1518>
 8001d28:	08010b98 	.word	0x08010b98
 8001d2c:	08010ba0 	.word	0x08010ba0
 8001d30:	08010ba8 	.word	0x08010ba8
 8001d34:	08010bb0 	.word	0x08010bb0
 8001d38:	08010bb8 	.word	0x08010bb8
 8001d3c:	08010bc0 	.word	0x08010bc0
 8001d40:	08010bc8 	.word	0x08010bc8
 8001d44:	08010bd0 	.word	0x08010bd0
 8001d48:	08010bd8 	.word	0x08010bd8
 8001d4c:	08010be0 	.word	0x08010be0
 8001d50:	08010be8 	.word	0x08010be8
 8001d54:	08010bf0 	.word	0x08010bf0
 8001d58:	08010bf8 	.word	0x08010bf8
 8001d5c:	08010c00 	.word	0x08010c00
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8001d60:	7bfb      	ldrb	r3, [r7, #15]
 8001d62:	b29a      	uxth	r2, r3
 8001d64:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d68:	9301      	str	r3, [sp, #4]
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	9300      	str	r3, [sp, #0]
 8001d6e:	2300      	movs	r3, #0
 8001d70:	210a      	movs	r1, #10
 8001d72:	48a5      	ldr	r0, [pc, #660]	; (8002008 <FreqMenu_DrawPresetMenu+0xdbc>)
 8001d74:	f00b fb7a 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8001d78:	7bbb      	ldrb	r3, [r7, #14]
 8001d7a:	b29a      	uxth	r2, r3
 8001d7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d80:	9301      	str	r3, [sp, #4]
 8001d82:	2302      	movs	r3, #2
 8001d84:	9300      	str	r3, [sp, #0]
 8001d86:	2300      	movs	r3, #0
 8001d88:	210a      	movs	r1, #10
 8001d8a:	48a0      	ldr	r0, [pc, #640]	; (800200c <FreqMenu_DrawPresetMenu+0xdc0>)
 8001d8c:	f00b fb6e 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8001d90:	7b7b      	ldrb	r3, [r7, #13]
 8001d92:	b29a      	uxth	r2, r3
 8001d94:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d98:	9301      	str	r3, [sp, #4]
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	9300      	str	r3, [sp, #0]
 8001d9e:	2300      	movs	r3, #0
 8001da0:	210a      	movs	r1, #10
 8001da2:	489b      	ldr	r0, [pc, #620]	; (8002010 <FreqMenu_DrawPresetMenu+0xdc4>)
 8001da4:	f00b fb62 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8001da8:	7b3b      	ldrb	r3, [r7, #12]
 8001daa:	b29a      	uxth	r2, r3
 8001dac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001db0:	9301      	str	r3, [sp, #4]
 8001db2:	2302      	movs	r3, #2
 8001db4:	9300      	str	r3, [sp, #0]
 8001db6:	2300      	movs	r3, #0
 8001db8:	210a      	movs	r1, #10
 8001dba:	4896      	ldr	r0, [pc, #600]	; (8002014 <FreqMenu_DrawPresetMenu+0xdc8>)
 8001dbc:	f00b fb56 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8001dc0:	7afb      	ldrb	r3, [r7, #11]
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001dc8:	9301      	str	r3, [sp, #4]
 8001dca:	2302      	movs	r3, #2
 8001dcc:	9300      	str	r3, [sp, #0]
 8001dce:	2300      	movs	r3, #0
 8001dd0:	210a      	movs	r1, #10
 8001dd2:	4891      	ldr	r0, [pc, #580]	; (8002018 <FreqMenu_DrawPresetMenu+0xdcc>)
 8001dd4:	f00b fb4a 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 8001dd8:	7abb      	ldrb	r3, [r7, #10]
 8001dda:	b29a      	uxth	r2, r3
 8001ddc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001de0:	9301      	str	r3, [sp, #4]
 8001de2:	2302      	movs	r3, #2
 8001de4:	9300      	str	r3, [sp, #0]
 8001de6:	2300      	movs	r3, #0
 8001de8:	210a      	movs	r1, #10
 8001dea:	488c      	ldr	r0, [pc, #560]	; (800201c <FreqMenu_DrawPresetMenu+0xdd0>)
 8001dec:	f00b fb3e 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8001df0:	7a7b      	ldrb	r3, [r7, #9]
 8001df2:	b29a      	uxth	r2, r3
 8001df4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001df8:	9301      	str	r3, [sp, #4]
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	9300      	str	r3, [sp, #0]
 8001dfe:	2300      	movs	r3, #0
 8001e00:	210a      	movs	r1, #10
 8001e02:	4887      	ldr	r0, [pc, #540]	; (8002020 <FreqMenu_DrawPresetMenu+0xdd4>)
 8001e04:	f00b fb32 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, WHITE, 2, BLACK);
 8001e08:	7bfb      	ldrb	r3, [r7, #15]
 8001e0a:	b29a      	uxth	r2, r3
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	9301      	str	r3, [sp, #4]
 8001e10:	2302      	movs	r3, #2
 8001e12:	9300      	str	r3, [sp, #0]
 8001e14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e18:	2178      	movs	r1, #120	; 0x78
 8001e1a:	4882      	ldr	r0, [pc, #520]	; (8002024 <FreqMenu_DrawPresetMenu+0xdd8>)
 8001e1c:	f00b fb26 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 8001e20:	7bbb      	ldrb	r3, [r7, #14]
 8001e22:	b29a      	uxth	r2, r3
 8001e24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e28:	9301      	str	r3, [sp, #4]
 8001e2a:	2302      	movs	r3, #2
 8001e2c:	9300      	str	r3, [sp, #0]
 8001e2e:	2300      	movs	r3, #0
 8001e30:	2178      	movs	r1, #120	; 0x78
 8001e32:	487d      	ldr	r0, [pc, #500]	; (8002028 <FreqMenu_DrawPresetMenu+0xddc>)
 8001e34:	f00b fb1a 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8001e38:	7b7b      	ldrb	r3, [r7, #13]
 8001e3a:	b29a      	uxth	r2, r3
 8001e3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e40:	9301      	str	r3, [sp, #4]
 8001e42:	2302      	movs	r3, #2
 8001e44:	9300      	str	r3, [sp, #0]
 8001e46:	2300      	movs	r3, #0
 8001e48:	2178      	movs	r1, #120	; 0x78
 8001e4a:	4878      	ldr	r0, [pc, #480]	; (800202c <FreqMenu_DrawPresetMenu+0xde0>)
 8001e4c:	f00b fb0e 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8001e50:	7b3b      	ldrb	r3, [r7, #12]
 8001e52:	b29a      	uxth	r2, r3
 8001e54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e58:	9301      	str	r3, [sp, #4]
 8001e5a:	2302      	movs	r3, #2
 8001e5c:	9300      	str	r3, [sp, #0]
 8001e5e:	2300      	movs	r3, #0
 8001e60:	2178      	movs	r1, #120	; 0x78
 8001e62:	4873      	ldr	r0, [pc, #460]	; (8002030 <FreqMenu_DrawPresetMenu+0xde4>)
 8001e64:	f00b fb02 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8001e68:	7afb      	ldrb	r3, [r7, #11]
 8001e6a:	b29a      	uxth	r2, r3
 8001e6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e70:	9301      	str	r3, [sp, #4]
 8001e72:	2302      	movs	r3, #2
 8001e74:	9300      	str	r3, [sp, #0]
 8001e76:	2300      	movs	r3, #0
 8001e78:	2178      	movs	r1, #120	; 0x78
 8001e7a:	486e      	ldr	r0, [pc, #440]	; (8002034 <FreqMenu_DrawPresetMenu+0xde8>)
 8001e7c:	f00b faf6 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8001e80:	7abb      	ldrb	r3, [r7, #10]
 8001e82:	b29a      	uxth	r2, r3
 8001e84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e88:	9301      	str	r3, [sp, #4]
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	9300      	str	r3, [sp, #0]
 8001e8e:	2300      	movs	r3, #0
 8001e90:	2178      	movs	r1, #120	; 0x78
 8001e92:	4869      	ldr	r0, [pc, #420]	; (8002038 <FreqMenu_DrawPresetMenu+0xdec>)
 8001e94:	f00b faea 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8001e98:	7a7b      	ldrb	r3, [r7, #9]
 8001e9a:	b29a      	uxth	r2, r3
 8001e9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ea0:	9301      	str	r3, [sp, #4]
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	9300      	str	r3, [sp, #0]
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	2178      	movs	r1, #120	; 0x78
 8001eaa:	4864      	ldr	r0, [pc, #400]	; (800203c <FreqMenu_DrawPresetMenu+0xdf0>)
 8001eac:	f00b fade 	bl	800d46c <ILI9341_Draw_Text>
				break;
 8001eb0:	f000 bc58 	b.w	8002764 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8001eb4:	7bfb      	ldrb	r3, [r7, #15]
 8001eb6:	b29a      	uxth	r2, r3
 8001eb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ebc:	9301      	str	r3, [sp, #4]
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	9300      	str	r3, [sp, #0]
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	210a      	movs	r1, #10
 8001ec6:	4850      	ldr	r0, [pc, #320]	; (8002008 <FreqMenu_DrawPresetMenu+0xdbc>)
 8001ec8:	f00b fad0 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8001ecc:	7bbb      	ldrb	r3, [r7, #14]
 8001ece:	b29a      	uxth	r2, r3
 8001ed0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ed4:	9301      	str	r3, [sp, #4]
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	9300      	str	r3, [sp, #0]
 8001eda:	2300      	movs	r3, #0
 8001edc:	210a      	movs	r1, #10
 8001ede:	484b      	ldr	r0, [pc, #300]	; (800200c <FreqMenu_DrawPresetMenu+0xdc0>)
 8001ee0:	f00b fac4 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8001ee4:	7b7b      	ldrb	r3, [r7, #13]
 8001ee6:	b29a      	uxth	r2, r3
 8001ee8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001eec:	9301      	str	r3, [sp, #4]
 8001eee:	2302      	movs	r3, #2
 8001ef0:	9300      	str	r3, [sp, #0]
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	210a      	movs	r1, #10
 8001ef6:	4846      	ldr	r0, [pc, #280]	; (8002010 <FreqMenu_DrawPresetMenu+0xdc4>)
 8001ef8:	f00b fab8 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8001efc:	7b3b      	ldrb	r3, [r7, #12]
 8001efe:	b29a      	uxth	r2, r3
 8001f00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f04:	9301      	str	r3, [sp, #4]
 8001f06:	2302      	movs	r3, #2
 8001f08:	9300      	str	r3, [sp, #0]
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	210a      	movs	r1, #10
 8001f0e:	4841      	ldr	r0, [pc, #260]	; (8002014 <FreqMenu_DrawPresetMenu+0xdc8>)
 8001f10:	f00b faac 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8001f14:	7afb      	ldrb	r3, [r7, #11]
 8001f16:	b29a      	uxth	r2, r3
 8001f18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f1c:	9301      	str	r3, [sp, #4]
 8001f1e:	2302      	movs	r3, #2
 8001f20:	9300      	str	r3, [sp, #0]
 8001f22:	2300      	movs	r3, #0
 8001f24:	210a      	movs	r1, #10
 8001f26:	483c      	ldr	r0, [pc, #240]	; (8002018 <FreqMenu_DrawPresetMenu+0xdcc>)
 8001f28:	f00b faa0 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 8001f2c:	7abb      	ldrb	r3, [r7, #10]
 8001f2e:	b29a      	uxth	r2, r3
 8001f30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f34:	9301      	str	r3, [sp, #4]
 8001f36:	2302      	movs	r3, #2
 8001f38:	9300      	str	r3, [sp, #0]
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	210a      	movs	r1, #10
 8001f3e:	4837      	ldr	r0, [pc, #220]	; (800201c <FreqMenu_DrawPresetMenu+0xdd0>)
 8001f40:	f00b fa94 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8001f44:	7a7b      	ldrb	r3, [r7, #9]
 8001f46:	b29a      	uxth	r2, r3
 8001f48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f4c:	9301      	str	r3, [sp, #4]
 8001f4e:	2302      	movs	r3, #2
 8001f50:	9300      	str	r3, [sp, #0]
 8001f52:	2300      	movs	r3, #0
 8001f54:	210a      	movs	r1, #10
 8001f56:	4832      	ldr	r0, [pc, #200]	; (8002020 <FreqMenu_DrawPresetMenu+0xdd4>)
 8001f58:	f00b fa88 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8001f5c:	7bfb      	ldrb	r3, [r7, #15]
 8001f5e:	b29a      	uxth	r2, r3
 8001f60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f64:	9301      	str	r3, [sp, #4]
 8001f66:	2302      	movs	r3, #2
 8001f68:	9300      	str	r3, [sp, #0]
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	2178      	movs	r1, #120	; 0x78
 8001f6e:	482d      	ldr	r0, [pc, #180]	; (8002024 <FreqMenu_DrawPresetMenu+0xdd8>)
 8001f70:	f00b fa7c 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, WHITE, 2, BLACK);
 8001f74:	7bbb      	ldrb	r3, [r7, #14]
 8001f76:	b29a      	uxth	r2, r3
 8001f78:	2300      	movs	r3, #0
 8001f7a:	9301      	str	r3, [sp, #4]
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	9300      	str	r3, [sp, #0]
 8001f80:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f84:	2178      	movs	r1, #120	; 0x78
 8001f86:	4828      	ldr	r0, [pc, #160]	; (8002028 <FreqMenu_DrawPresetMenu+0xddc>)
 8001f88:	f00b fa70 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8001f8c:	7b7b      	ldrb	r3, [r7, #13]
 8001f8e:	b29a      	uxth	r2, r3
 8001f90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f94:	9301      	str	r3, [sp, #4]
 8001f96:	2302      	movs	r3, #2
 8001f98:	9300      	str	r3, [sp, #0]
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	2178      	movs	r1, #120	; 0x78
 8001f9e:	4823      	ldr	r0, [pc, #140]	; (800202c <FreqMenu_DrawPresetMenu+0xde0>)
 8001fa0:	f00b fa64 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8001fa4:	7b3b      	ldrb	r3, [r7, #12]
 8001fa6:	b29a      	uxth	r2, r3
 8001fa8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fac:	9301      	str	r3, [sp, #4]
 8001fae:	2302      	movs	r3, #2
 8001fb0:	9300      	str	r3, [sp, #0]
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	2178      	movs	r1, #120	; 0x78
 8001fb6:	481e      	ldr	r0, [pc, #120]	; (8002030 <FreqMenu_DrawPresetMenu+0xde4>)
 8001fb8:	f00b fa58 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8001fbc:	7afb      	ldrb	r3, [r7, #11]
 8001fbe:	b29a      	uxth	r2, r3
 8001fc0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fc4:	9301      	str	r3, [sp, #4]
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	9300      	str	r3, [sp, #0]
 8001fca:	2300      	movs	r3, #0
 8001fcc:	2178      	movs	r1, #120	; 0x78
 8001fce:	4819      	ldr	r0, [pc, #100]	; (8002034 <FreqMenu_DrawPresetMenu+0xde8>)
 8001fd0:	f00b fa4c 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8001fd4:	7abb      	ldrb	r3, [r7, #10]
 8001fd6:	b29a      	uxth	r2, r3
 8001fd8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fdc:	9301      	str	r3, [sp, #4]
 8001fde:	2302      	movs	r3, #2
 8001fe0:	9300      	str	r3, [sp, #0]
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	2178      	movs	r1, #120	; 0x78
 8001fe6:	4814      	ldr	r0, [pc, #80]	; (8002038 <FreqMenu_DrawPresetMenu+0xdec>)
 8001fe8:	f00b fa40 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8001fec:	7a7b      	ldrb	r3, [r7, #9]
 8001fee:	b29a      	uxth	r2, r3
 8001ff0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ff4:	9301      	str	r3, [sp, #4]
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	9300      	str	r3, [sp, #0]
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	2178      	movs	r1, #120	; 0x78
 8001ffe:	480f      	ldr	r0, [pc, #60]	; (800203c <FreqMenu_DrawPresetMenu+0xdf0>)
 8002000:	f00b fa34 	bl	800d46c <ILI9341_Draw_Text>
				break;
 8002004:	e3ae      	b.n	8002764 <FreqMenu_DrawPresetMenu+0x1518>
 8002006:	bf00      	nop
 8002008:	08010b98 	.word	0x08010b98
 800200c:	08010ba0 	.word	0x08010ba0
 8002010:	08010ba8 	.word	0x08010ba8
 8002014:	08010bb0 	.word	0x08010bb0
 8002018:	08010bb8 	.word	0x08010bb8
 800201c:	08010bc0 	.word	0x08010bc0
 8002020:	08010bc8 	.word	0x08010bc8
 8002024:	08010bd0 	.word	0x08010bd0
 8002028:	08010bd8 	.word	0x08010bd8
 800202c:	08010be0 	.word	0x08010be0
 8002030:	08010be8 	.word	0x08010be8
 8002034:	08010bf0 	.word	0x08010bf0
 8002038:	08010bf8 	.word	0x08010bf8
 800203c:	08010c00 	.word	0x08010c00
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8002040:	7bfb      	ldrb	r3, [r7, #15]
 8002042:	b29a      	uxth	r2, r3
 8002044:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002048:	9301      	str	r3, [sp, #4]
 800204a:	2302      	movs	r3, #2
 800204c:	9300      	str	r3, [sp, #0]
 800204e:	2300      	movs	r3, #0
 8002050:	210a      	movs	r1, #10
 8002052:	48a4      	ldr	r0, [pc, #656]	; (80022e4 <FreqMenu_DrawPresetMenu+0x1098>)
 8002054:	f00b fa0a 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8002058:	7bbb      	ldrb	r3, [r7, #14]
 800205a:	b29a      	uxth	r2, r3
 800205c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002060:	9301      	str	r3, [sp, #4]
 8002062:	2302      	movs	r3, #2
 8002064:	9300      	str	r3, [sp, #0]
 8002066:	2300      	movs	r3, #0
 8002068:	210a      	movs	r1, #10
 800206a:	489f      	ldr	r0, [pc, #636]	; (80022e8 <FreqMenu_DrawPresetMenu+0x109c>)
 800206c:	f00b f9fe 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8002070:	7b7b      	ldrb	r3, [r7, #13]
 8002072:	b29a      	uxth	r2, r3
 8002074:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002078:	9301      	str	r3, [sp, #4]
 800207a:	2302      	movs	r3, #2
 800207c:	9300      	str	r3, [sp, #0]
 800207e:	2300      	movs	r3, #0
 8002080:	210a      	movs	r1, #10
 8002082:	489a      	ldr	r0, [pc, #616]	; (80022ec <FreqMenu_DrawPresetMenu+0x10a0>)
 8002084:	f00b f9f2 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8002088:	7b3b      	ldrb	r3, [r7, #12]
 800208a:	b29a      	uxth	r2, r3
 800208c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002090:	9301      	str	r3, [sp, #4]
 8002092:	2302      	movs	r3, #2
 8002094:	9300      	str	r3, [sp, #0]
 8002096:	2300      	movs	r3, #0
 8002098:	210a      	movs	r1, #10
 800209a:	4895      	ldr	r0, [pc, #596]	; (80022f0 <FreqMenu_DrawPresetMenu+0x10a4>)
 800209c:	f00b f9e6 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 80020a0:	7afb      	ldrb	r3, [r7, #11]
 80020a2:	b29a      	uxth	r2, r3
 80020a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020a8:	9301      	str	r3, [sp, #4]
 80020aa:	2302      	movs	r3, #2
 80020ac:	9300      	str	r3, [sp, #0]
 80020ae:	2300      	movs	r3, #0
 80020b0:	210a      	movs	r1, #10
 80020b2:	4890      	ldr	r0, [pc, #576]	; (80022f4 <FreqMenu_DrawPresetMenu+0x10a8>)
 80020b4:	f00b f9da 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 80020b8:	7abb      	ldrb	r3, [r7, #10]
 80020ba:	b29a      	uxth	r2, r3
 80020bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020c0:	9301      	str	r3, [sp, #4]
 80020c2:	2302      	movs	r3, #2
 80020c4:	9300      	str	r3, [sp, #0]
 80020c6:	2300      	movs	r3, #0
 80020c8:	210a      	movs	r1, #10
 80020ca:	488b      	ldr	r0, [pc, #556]	; (80022f8 <FreqMenu_DrawPresetMenu+0x10ac>)
 80020cc:	f00b f9ce 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 80020d0:	7a7b      	ldrb	r3, [r7, #9]
 80020d2:	b29a      	uxth	r2, r3
 80020d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020d8:	9301      	str	r3, [sp, #4]
 80020da:	2302      	movs	r3, #2
 80020dc:	9300      	str	r3, [sp, #0]
 80020de:	2300      	movs	r3, #0
 80020e0:	210a      	movs	r1, #10
 80020e2:	4886      	ldr	r0, [pc, #536]	; (80022fc <FreqMenu_DrawPresetMenu+0x10b0>)
 80020e4:	f00b f9c2 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 80020e8:	7bfb      	ldrb	r3, [r7, #15]
 80020ea:	b29a      	uxth	r2, r3
 80020ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020f0:	9301      	str	r3, [sp, #4]
 80020f2:	2302      	movs	r3, #2
 80020f4:	9300      	str	r3, [sp, #0]
 80020f6:	2300      	movs	r3, #0
 80020f8:	2178      	movs	r1, #120	; 0x78
 80020fa:	4881      	ldr	r0, [pc, #516]	; (8002300 <FreqMenu_DrawPresetMenu+0x10b4>)
 80020fc:	f00b f9b6 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 8002100:	7bbb      	ldrb	r3, [r7, #14]
 8002102:	b29a      	uxth	r2, r3
 8002104:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002108:	9301      	str	r3, [sp, #4]
 800210a:	2302      	movs	r3, #2
 800210c:	9300      	str	r3, [sp, #0]
 800210e:	2300      	movs	r3, #0
 8002110:	2178      	movs	r1, #120	; 0x78
 8002112:	487c      	ldr	r0, [pc, #496]	; (8002304 <FreqMenu_DrawPresetMenu+0x10b8>)
 8002114:	f00b f9aa 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, WHITE, 2, BLACK);
 8002118:	7b7b      	ldrb	r3, [r7, #13]
 800211a:	b29a      	uxth	r2, r3
 800211c:	2300      	movs	r3, #0
 800211e:	9301      	str	r3, [sp, #4]
 8002120:	2302      	movs	r3, #2
 8002122:	9300      	str	r3, [sp, #0]
 8002124:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002128:	2178      	movs	r1, #120	; 0x78
 800212a:	4877      	ldr	r0, [pc, #476]	; (8002308 <FreqMenu_DrawPresetMenu+0x10bc>)
 800212c:	f00b f99e 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8002130:	7b3b      	ldrb	r3, [r7, #12]
 8002132:	b29a      	uxth	r2, r3
 8002134:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002138:	9301      	str	r3, [sp, #4]
 800213a:	2302      	movs	r3, #2
 800213c:	9300      	str	r3, [sp, #0]
 800213e:	2300      	movs	r3, #0
 8002140:	2178      	movs	r1, #120	; 0x78
 8002142:	4872      	ldr	r0, [pc, #456]	; (800230c <FreqMenu_DrawPresetMenu+0x10c0>)
 8002144:	f00b f992 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8002148:	7afb      	ldrb	r3, [r7, #11]
 800214a:	b29a      	uxth	r2, r3
 800214c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002150:	9301      	str	r3, [sp, #4]
 8002152:	2302      	movs	r3, #2
 8002154:	9300      	str	r3, [sp, #0]
 8002156:	2300      	movs	r3, #0
 8002158:	2178      	movs	r1, #120	; 0x78
 800215a:	486d      	ldr	r0, [pc, #436]	; (8002310 <FreqMenu_DrawPresetMenu+0x10c4>)
 800215c:	f00b f986 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8002160:	7abb      	ldrb	r3, [r7, #10]
 8002162:	b29a      	uxth	r2, r3
 8002164:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002168:	9301      	str	r3, [sp, #4]
 800216a:	2302      	movs	r3, #2
 800216c:	9300      	str	r3, [sp, #0]
 800216e:	2300      	movs	r3, #0
 8002170:	2178      	movs	r1, #120	; 0x78
 8002172:	4868      	ldr	r0, [pc, #416]	; (8002314 <FreqMenu_DrawPresetMenu+0x10c8>)
 8002174:	f00b f97a 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8002178:	7a7b      	ldrb	r3, [r7, #9]
 800217a:	b29a      	uxth	r2, r3
 800217c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002180:	9301      	str	r3, [sp, #4]
 8002182:	2302      	movs	r3, #2
 8002184:	9300      	str	r3, [sp, #0]
 8002186:	2300      	movs	r3, #0
 8002188:	2178      	movs	r1, #120	; 0x78
 800218a:	4863      	ldr	r0, [pc, #396]	; (8002318 <FreqMenu_DrawPresetMenu+0x10cc>)
 800218c:	f00b f96e 	bl	800d46c <ILI9341_Draw_Text>
				break;
 8002190:	e2e8      	b.n	8002764 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8002192:	7bfb      	ldrb	r3, [r7, #15]
 8002194:	b29a      	uxth	r2, r3
 8002196:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800219a:	9301      	str	r3, [sp, #4]
 800219c:	2302      	movs	r3, #2
 800219e:	9300      	str	r3, [sp, #0]
 80021a0:	2300      	movs	r3, #0
 80021a2:	210a      	movs	r1, #10
 80021a4:	484f      	ldr	r0, [pc, #316]	; (80022e4 <FreqMenu_DrawPresetMenu+0x1098>)
 80021a6:	f00b f961 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 80021aa:	7bbb      	ldrb	r3, [r7, #14]
 80021ac:	b29a      	uxth	r2, r3
 80021ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021b2:	9301      	str	r3, [sp, #4]
 80021b4:	2302      	movs	r3, #2
 80021b6:	9300      	str	r3, [sp, #0]
 80021b8:	2300      	movs	r3, #0
 80021ba:	210a      	movs	r1, #10
 80021bc:	484a      	ldr	r0, [pc, #296]	; (80022e8 <FreqMenu_DrawPresetMenu+0x109c>)
 80021be:	f00b f955 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 80021c2:	7b7b      	ldrb	r3, [r7, #13]
 80021c4:	b29a      	uxth	r2, r3
 80021c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021ca:	9301      	str	r3, [sp, #4]
 80021cc:	2302      	movs	r3, #2
 80021ce:	9300      	str	r3, [sp, #0]
 80021d0:	2300      	movs	r3, #0
 80021d2:	210a      	movs	r1, #10
 80021d4:	4845      	ldr	r0, [pc, #276]	; (80022ec <FreqMenu_DrawPresetMenu+0x10a0>)
 80021d6:	f00b f949 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 80021da:	7b3b      	ldrb	r3, [r7, #12]
 80021dc:	b29a      	uxth	r2, r3
 80021de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021e2:	9301      	str	r3, [sp, #4]
 80021e4:	2302      	movs	r3, #2
 80021e6:	9300      	str	r3, [sp, #0]
 80021e8:	2300      	movs	r3, #0
 80021ea:	210a      	movs	r1, #10
 80021ec:	4840      	ldr	r0, [pc, #256]	; (80022f0 <FreqMenu_DrawPresetMenu+0x10a4>)
 80021ee:	f00b f93d 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 80021f2:	7afb      	ldrb	r3, [r7, #11]
 80021f4:	b29a      	uxth	r2, r3
 80021f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021fa:	9301      	str	r3, [sp, #4]
 80021fc:	2302      	movs	r3, #2
 80021fe:	9300      	str	r3, [sp, #0]
 8002200:	2300      	movs	r3, #0
 8002202:	210a      	movs	r1, #10
 8002204:	483b      	ldr	r0, [pc, #236]	; (80022f4 <FreqMenu_DrawPresetMenu+0x10a8>)
 8002206:	f00b f931 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 800220a:	7abb      	ldrb	r3, [r7, #10]
 800220c:	b29a      	uxth	r2, r3
 800220e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002212:	9301      	str	r3, [sp, #4]
 8002214:	2302      	movs	r3, #2
 8002216:	9300      	str	r3, [sp, #0]
 8002218:	2300      	movs	r3, #0
 800221a:	210a      	movs	r1, #10
 800221c:	4836      	ldr	r0, [pc, #216]	; (80022f8 <FreqMenu_DrawPresetMenu+0x10ac>)
 800221e:	f00b f925 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8002222:	7a7b      	ldrb	r3, [r7, #9]
 8002224:	b29a      	uxth	r2, r3
 8002226:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800222a:	9301      	str	r3, [sp, #4]
 800222c:	2302      	movs	r3, #2
 800222e:	9300      	str	r3, [sp, #0]
 8002230:	2300      	movs	r3, #0
 8002232:	210a      	movs	r1, #10
 8002234:	4831      	ldr	r0, [pc, #196]	; (80022fc <FreqMenu_DrawPresetMenu+0x10b0>)
 8002236:	f00b f919 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 800223a:	7bfb      	ldrb	r3, [r7, #15]
 800223c:	b29a      	uxth	r2, r3
 800223e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002242:	9301      	str	r3, [sp, #4]
 8002244:	2302      	movs	r3, #2
 8002246:	9300      	str	r3, [sp, #0]
 8002248:	2300      	movs	r3, #0
 800224a:	2178      	movs	r1, #120	; 0x78
 800224c:	482c      	ldr	r0, [pc, #176]	; (8002300 <FreqMenu_DrawPresetMenu+0x10b4>)
 800224e:	f00b f90d 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 8002252:	7bbb      	ldrb	r3, [r7, #14]
 8002254:	b29a      	uxth	r2, r3
 8002256:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800225a:	9301      	str	r3, [sp, #4]
 800225c:	2302      	movs	r3, #2
 800225e:	9300      	str	r3, [sp, #0]
 8002260:	2300      	movs	r3, #0
 8002262:	2178      	movs	r1, #120	; 0x78
 8002264:	4827      	ldr	r0, [pc, #156]	; (8002304 <FreqMenu_DrawPresetMenu+0x10b8>)
 8002266:	f00b f901 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 800226a:	7b7b      	ldrb	r3, [r7, #13]
 800226c:	b29a      	uxth	r2, r3
 800226e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002272:	9301      	str	r3, [sp, #4]
 8002274:	2302      	movs	r3, #2
 8002276:	9300      	str	r3, [sp, #0]
 8002278:	2300      	movs	r3, #0
 800227a:	2178      	movs	r1, #120	; 0x78
 800227c:	4822      	ldr	r0, [pc, #136]	; (8002308 <FreqMenu_DrawPresetMenu+0x10bc>)
 800227e:	f00b f8f5 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, WHITE, 2, BLACK);
 8002282:	7b3b      	ldrb	r3, [r7, #12]
 8002284:	b29a      	uxth	r2, r3
 8002286:	2300      	movs	r3, #0
 8002288:	9301      	str	r3, [sp, #4]
 800228a:	2302      	movs	r3, #2
 800228c:	9300      	str	r3, [sp, #0]
 800228e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002292:	2178      	movs	r1, #120	; 0x78
 8002294:	481d      	ldr	r0, [pc, #116]	; (800230c <FreqMenu_DrawPresetMenu+0x10c0>)
 8002296:	f00b f8e9 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 800229a:	7afb      	ldrb	r3, [r7, #11]
 800229c:	b29a      	uxth	r2, r3
 800229e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022a2:	9301      	str	r3, [sp, #4]
 80022a4:	2302      	movs	r3, #2
 80022a6:	9300      	str	r3, [sp, #0]
 80022a8:	2300      	movs	r3, #0
 80022aa:	2178      	movs	r1, #120	; 0x78
 80022ac:	4818      	ldr	r0, [pc, #96]	; (8002310 <FreqMenu_DrawPresetMenu+0x10c4>)
 80022ae:	f00b f8dd 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 80022b2:	7abb      	ldrb	r3, [r7, #10]
 80022b4:	b29a      	uxth	r2, r3
 80022b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022ba:	9301      	str	r3, [sp, #4]
 80022bc:	2302      	movs	r3, #2
 80022be:	9300      	str	r3, [sp, #0]
 80022c0:	2300      	movs	r3, #0
 80022c2:	2178      	movs	r1, #120	; 0x78
 80022c4:	4813      	ldr	r0, [pc, #76]	; (8002314 <FreqMenu_DrawPresetMenu+0x10c8>)
 80022c6:	f00b f8d1 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 80022ca:	7a7b      	ldrb	r3, [r7, #9]
 80022cc:	b29a      	uxth	r2, r3
 80022ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022d2:	9301      	str	r3, [sp, #4]
 80022d4:	2302      	movs	r3, #2
 80022d6:	9300      	str	r3, [sp, #0]
 80022d8:	2300      	movs	r3, #0
 80022da:	2178      	movs	r1, #120	; 0x78
 80022dc:	480e      	ldr	r0, [pc, #56]	; (8002318 <FreqMenu_DrawPresetMenu+0x10cc>)
 80022de:	f00b f8c5 	bl	800d46c <ILI9341_Draw_Text>
				break;
 80022e2:	e23f      	b.n	8002764 <FreqMenu_DrawPresetMenu+0x1518>
 80022e4:	08010b98 	.word	0x08010b98
 80022e8:	08010ba0 	.word	0x08010ba0
 80022ec:	08010ba8 	.word	0x08010ba8
 80022f0:	08010bb0 	.word	0x08010bb0
 80022f4:	08010bb8 	.word	0x08010bb8
 80022f8:	08010bc0 	.word	0x08010bc0
 80022fc:	08010bc8 	.word	0x08010bc8
 8002300:	08010bd0 	.word	0x08010bd0
 8002304:	08010bd8 	.word	0x08010bd8
 8002308:	08010be0 	.word	0x08010be0
 800230c:	08010be8 	.word	0x08010be8
 8002310:	08010bf0 	.word	0x08010bf0
 8002314:	08010bf8 	.word	0x08010bf8
 8002318:	08010c00 	.word	0x08010c00
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 800231c:	7bfb      	ldrb	r3, [r7, #15]
 800231e:	b29a      	uxth	r2, r3
 8002320:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002324:	9301      	str	r3, [sp, #4]
 8002326:	2302      	movs	r3, #2
 8002328:	9300      	str	r3, [sp, #0]
 800232a:	2300      	movs	r3, #0
 800232c:	210a      	movs	r1, #10
 800232e:	48a4      	ldr	r0, [pc, #656]	; (80025c0 <FreqMenu_DrawPresetMenu+0x1374>)
 8002330:	f00b f89c 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8002334:	7bbb      	ldrb	r3, [r7, #14]
 8002336:	b29a      	uxth	r2, r3
 8002338:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800233c:	9301      	str	r3, [sp, #4]
 800233e:	2302      	movs	r3, #2
 8002340:	9300      	str	r3, [sp, #0]
 8002342:	2300      	movs	r3, #0
 8002344:	210a      	movs	r1, #10
 8002346:	489f      	ldr	r0, [pc, #636]	; (80025c4 <FreqMenu_DrawPresetMenu+0x1378>)
 8002348:	f00b f890 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 800234c:	7b7b      	ldrb	r3, [r7, #13]
 800234e:	b29a      	uxth	r2, r3
 8002350:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002354:	9301      	str	r3, [sp, #4]
 8002356:	2302      	movs	r3, #2
 8002358:	9300      	str	r3, [sp, #0]
 800235a:	2300      	movs	r3, #0
 800235c:	210a      	movs	r1, #10
 800235e:	489a      	ldr	r0, [pc, #616]	; (80025c8 <FreqMenu_DrawPresetMenu+0x137c>)
 8002360:	f00b f884 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8002364:	7b3b      	ldrb	r3, [r7, #12]
 8002366:	b29a      	uxth	r2, r3
 8002368:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800236c:	9301      	str	r3, [sp, #4]
 800236e:	2302      	movs	r3, #2
 8002370:	9300      	str	r3, [sp, #0]
 8002372:	2300      	movs	r3, #0
 8002374:	210a      	movs	r1, #10
 8002376:	4895      	ldr	r0, [pc, #596]	; (80025cc <FreqMenu_DrawPresetMenu+0x1380>)
 8002378:	f00b f878 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 800237c:	7afb      	ldrb	r3, [r7, #11]
 800237e:	b29a      	uxth	r2, r3
 8002380:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002384:	9301      	str	r3, [sp, #4]
 8002386:	2302      	movs	r3, #2
 8002388:	9300      	str	r3, [sp, #0]
 800238a:	2300      	movs	r3, #0
 800238c:	210a      	movs	r1, #10
 800238e:	4890      	ldr	r0, [pc, #576]	; (80025d0 <FreqMenu_DrawPresetMenu+0x1384>)
 8002390:	f00b f86c 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 8002394:	7abb      	ldrb	r3, [r7, #10]
 8002396:	b29a      	uxth	r2, r3
 8002398:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800239c:	9301      	str	r3, [sp, #4]
 800239e:	2302      	movs	r3, #2
 80023a0:	9300      	str	r3, [sp, #0]
 80023a2:	2300      	movs	r3, #0
 80023a4:	210a      	movs	r1, #10
 80023a6:	488b      	ldr	r0, [pc, #556]	; (80025d4 <FreqMenu_DrawPresetMenu+0x1388>)
 80023a8:	f00b f860 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 80023ac:	7a7b      	ldrb	r3, [r7, #9]
 80023ae:	b29a      	uxth	r2, r3
 80023b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023b4:	9301      	str	r3, [sp, #4]
 80023b6:	2302      	movs	r3, #2
 80023b8:	9300      	str	r3, [sp, #0]
 80023ba:	2300      	movs	r3, #0
 80023bc:	210a      	movs	r1, #10
 80023be:	4886      	ldr	r0, [pc, #536]	; (80025d8 <FreqMenu_DrawPresetMenu+0x138c>)
 80023c0:	f00b f854 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 80023c4:	7bfb      	ldrb	r3, [r7, #15]
 80023c6:	b29a      	uxth	r2, r3
 80023c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023cc:	9301      	str	r3, [sp, #4]
 80023ce:	2302      	movs	r3, #2
 80023d0:	9300      	str	r3, [sp, #0]
 80023d2:	2300      	movs	r3, #0
 80023d4:	2178      	movs	r1, #120	; 0x78
 80023d6:	4881      	ldr	r0, [pc, #516]	; (80025dc <FreqMenu_DrawPresetMenu+0x1390>)
 80023d8:	f00b f848 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 80023dc:	7bbb      	ldrb	r3, [r7, #14]
 80023de:	b29a      	uxth	r2, r3
 80023e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023e4:	9301      	str	r3, [sp, #4]
 80023e6:	2302      	movs	r3, #2
 80023e8:	9300      	str	r3, [sp, #0]
 80023ea:	2300      	movs	r3, #0
 80023ec:	2178      	movs	r1, #120	; 0x78
 80023ee:	487c      	ldr	r0, [pc, #496]	; (80025e0 <FreqMenu_DrawPresetMenu+0x1394>)
 80023f0:	f00b f83c 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 80023f4:	7b7b      	ldrb	r3, [r7, #13]
 80023f6:	b29a      	uxth	r2, r3
 80023f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023fc:	9301      	str	r3, [sp, #4]
 80023fe:	2302      	movs	r3, #2
 8002400:	9300      	str	r3, [sp, #0]
 8002402:	2300      	movs	r3, #0
 8002404:	2178      	movs	r1, #120	; 0x78
 8002406:	4877      	ldr	r0, [pc, #476]	; (80025e4 <FreqMenu_DrawPresetMenu+0x1398>)
 8002408:	f00b f830 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 800240c:	7b3b      	ldrb	r3, [r7, #12]
 800240e:	b29a      	uxth	r2, r3
 8002410:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002414:	9301      	str	r3, [sp, #4]
 8002416:	2302      	movs	r3, #2
 8002418:	9300      	str	r3, [sp, #0]
 800241a:	2300      	movs	r3, #0
 800241c:	2178      	movs	r1, #120	; 0x78
 800241e:	4872      	ldr	r0, [pc, #456]	; (80025e8 <FreqMenu_DrawPresetMenu+0x139c>)
 8002420:	f00b f824 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, WHITE, 2, BLACK);
 8002424:	7afb      	ldrb	r3, [r7, #11]
 8002426:	b29a      	uxth	r2, r3
 8002428:	2300      	movs	r3, #0
 800242a:	9301      	str	r3, [sp, #4]
 800242c:	2302      	movs	r3, #2
 800242e:	9300      	str	r3, [sp, #0]
 8002430:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002434:	2178      	movs	r1, #120	; 0x78
 8002436:	486d      	ldr	r0, [pc, #436]	; (80025ec <FreqMenu_DrawPresetMenu+0x13a0>)
 8002438:	f00b f818 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 800243c:	7abb      	ldrb	r3, [r7, #10]
 800243e:	b29a      	uxth	r2, r3
 8002440:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002444:	9301      	str	r3, [sp, #4]
 8002446:	2302      	movs	r3, #2
 8002448:	9300      	str	r3, [sp, #0]
 800244a:	2300      	movs	r3, #0
 800244c:	2178      	movs	r1, #120	; 0x78
 800244e:	4868      	ldr	r0, [pc, #416]	; (80025f0 <FreqMenu_DrawPresetMenu+0x13a4>)
 8002450:	f00b f80c 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8002454:	7a7b      	ldrb	r3, [r7, #9]
 8002456:	b29a      	uxth	r2, r3
 8002458:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800245c:	9301      	str	r3, [sp, #4]
 800245e:	2302      	movs	r3, #2
 8002460:	9300      	str	r3, [sp, #0]
 8002462:	2300      	movs	r3, #0
 8002464:	2178      	movs	r1, #120	; 0x78
 8002466:	4863      	ldr	r0, [pc, #396]	; (80025f4 <FreqMenu_DrawPresetMenu+0x13a8>)
 8002468:	f00b f800 	bl	800d46c <ILI9341_Draw_Text>
			break;
 800246c:	e17a      	b.n	8002764 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 800246e:	7bfb      	ldrb	r3, [r7, #15]
 8002470:	b29a      	uxth	r2, r3
 8002472:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002476:	9301      	str	r3, [sp, #4]
 8002478:	2302      	movs	r3, #2
 800247a:	9300      	str	r3, [sp, #0]
 800247c:	2300      	movs	r3, #0
 800247e:	210a      	movs	r1, #10
 8002480:	484f      	ldr	r0, [pc, #316]	; (80025c0 <FreqMenu_DrawPresetMenu+0x1374>)
 8002482:	f00a fff3 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8002486:	7bbb      	ldrb	r3, [r7, #14]
 8002488:	b29a      	uxth	r2, r3
 800248a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800248e:	9301      	str	r3, [sp, #4]
 8002490:	2302      	movs	r3, #2
 8002492:	9300      	str	r3, [sp, #0]
 8002494:	2300      	movs	r3, #0
 8002496:	210a      	movs	r1, #10
 8002498:	484a      	ldr	r0, [pc, #296]	; (80025c4 <FreqMenu_DrawPresetMenu+0x1378>)
 800249a:	f00a ffe7 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 800249e:	7b7b      	ldrb	r3, [r7, #13]
 80024a0:	b29a      	uxth	r2, r3
 80024a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024a6:	9301      	str	r3, [sp, #4]
 80024a8:	2302      	movs	r3, #2
 80024aa:	9300      	str	r3, [sp, #0]
 80024ac:	2300      	movs	r3, #0
 80024ae:	210a      	movs	r1, #10
 80024b0:	4845      	ldr	r0, [pc, #276]	; (80025c8 <FreqMenu_DrawPresetMenu+0x137c>)
 80024b2:	f00a ffdb 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 80024b6:	7b3b      	ldrb	r3, [r7, #12]
 80024b8:	b29a      	uxth	r2, r3
 80024ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024be:	9301      	str	r3, [sp, #4]
 80024c0:	2302      	movs	r3, #2
 80024c2:	9300      	str	r3, [sp, #0]
 80024c4:	2300      	movs	r3, #0
 80024c6:	210a      	movs	r1, #10
 80024c8:	4840      	ldr	r0, [pc, #256]	; (80025cc <FreqMenu_DrawPresetMenu+0x1380>)
 80024ca:	f00a ffcf 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 80024ce:	7afb      	ldrb	r3, [r7, #11]
 80024d0:	b29a      	uxth	r2, r3
 80024d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024d6:	9301      	str	r3, [sp, #4]
 80024d8:	2302      	movs	r3, #2
 80024da:	9300      	str	r3, [sp, #0]
 80024dc:	2300      	movs	r3, #0
 80024de:	210a      	movs	r1, #10
 80024e0:	483b      	ldr	r0, [pc, #236]	; (80025d0 <FreqMenu_DrawPresetMenu+0x1384>)
 80024e2:	f00a ffc3 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 80024e6:	7abb      	ldrb	r3, [r7, #10]
 80024e8:	b29a      	uxth	r2, r3
 80024ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024ee:	9301      	str	r3, [sp, #4]
 80024f0:	2302      	movs	r3, #2
 80024f2:	9300      	str	r3, [sp, #0]
 80024f4:	2300      	movs	r3, #0
 80024f6:	210a      	movs	r1, #10
 80024f8:	4836      	ldr	r0, [pc, #216]	; (80025d4 <FreqMenu_DrawPresetMenu+0x1388>)
 80024fa:	f00a ffb7 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 80024fe:	7a7b      	ldrb	r3, [r7, #9]
 8002500:	b29a      	uxth	r2, r3
 8002502:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002506:	9301      	str	r3, [sp, #4]
 8002508:	2302      	movs	r3, #2
 800250a:	9300      	str	r3, [sp, #0]
 800250c:	2300      	movs	r3, #0
 800250e:	210a      	movs	r1, #10
 8002510:	4831      	ldr	r0, [pc, #196]	; (80025d8 <FreqMenu_DrawPresetMenu+0x138c>)
 8002512:	f00a ffab 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8002516:	7bfb      	ldrb	r3, [r7, #15]
 8002518:	b29a      	uxth	r2, r3
 800251a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800251e:	9301      	str	r3, [sp, #4]
 8002520:	2302      	movs	r3, #2
 8002522:	9300      	str	r3, [sp, #0]
 8002524:	2300      	movs	r3, #0
 8002526:	2178      	movs	r1, #120	; 0x78
 8002528:	482c      	ldr	r0, [pc, #176]	; (80025dc <FreqMenu_DrawPresetMenu+0x1390>)
 800252a:	f00a ff9f 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 800252e:	7bbb      	ldrb	r3, [r7, #14]
 8002530:	b29a      	uxth	r2, r3
 8002532:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002536:	9301      	str	r3, [sp, #4]
 8002538:	2302      	movs	r3, #2
 800253a:	9300      	str	r3, [sp, #0]
 800253c:	2300      	movs	r3, #0
 800253e:	2178      	movs	r1, #120	; 0x78
 8002540:	4827      	ldr	r0, [pc, #156]	; (80025e0 <FreqMenu_DrawPresetMenu+0x1394>)
 8002542:	f00a ff93 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8002546:	7b7b      	ldrb	r3, [r7, #13]
 8002548:	b29a      	uxth	r2, r3
 800254a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800254e:	9301      	str	r3, [sp, #4]
 8002550:	2302      	movs	r3, #2
 8002552:	9300      	str	r3, [sp, #0]
 8002554:	2300      	movs	r3, #0
 8002556:	2178      	movs	r1, #120	; 0x78
 8002558:	4822      	ldr	r0, [pc, #136]	; (80025e4 <FreqMenu_DrawPresetMenu+0x1398>)
 800255a:	f00a ff87 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 800255e:	7b3b      	ldrb	r3, [r7, #12]
 8002560:	b29a      	uxth	r2, r3
 8002562:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002566:	9301      	str	r3, [sp, #4]
 8002568:	2302      	movs	r3, #2
 800256a:	9300      	str	r3, [sp, #0]
 800256c:	2300      	movs	r3, #0
 800256e:	2178      	movs	r1, #120	; 0x78
 8002570:	481d      	ldr	r0, [pc, #116]	; (80025e8 <FreqMenu_DrawPresetMenu+0x139c>)
 8002572:	f00a ff7b 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8002576:	7afb      	ldrb	r3, [r7, #11]
 8002578:	b29a      	uxth	r2, r3
 800257a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800257e:	9301      	str	r3, [sp, #4]
 8002580:	2302      	movs	r3, #2
 8002582:	9300      	str	r3, [sp, #0]
 8002584:	2300      	movs	r3, #0
 8002586:	2178      	movs	r1, #120	; 0x78
 8002588:	4818      	ldr	r0, [pc, #96]	; (80025ec <FreqMenu_DrawPresetMenu+0x13a0>)
 800258a:	f00a ff6f 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, WHITE, 2, BLACK);
 800258e:	7abb      	ldrb	r3, [r7, #10]
 8002590:	b29a      	uxth	r2, r3
 8002592:	2300      	movs	r3, #0
 8002594:	9301      	str	r3, [sp, #4]
 8002596:	2302      	movs	r3, #2
 8002598:	9300      	str	r3, [sp, #0]
 800259a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800259e:	2178      	movs	r1, #120	; 0x78
 80025a0:	4813      	ldr	r0, [pc, #76]	; (80025f0 <FreqMenu_DrawPresetMenu+0x13a4>)
 80025a2:	f00a ff63 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 80025a6:	7a7b      	ldrb	r3, [r7, #9]
 80025a8:	b29a      	uxth	r2, r3
 80025aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025ae:	9301      	str	r3, [sp, #4]
 80025b0:	2302      	movs	r3, #2
 80025b2:	9300      	str	r3, [sp, #0]
 80025b4:	2300      	movs	r3, #0
 80025b6:	2178      	movs	r1, #120	; 0x78
 80025b8:	480e      	ldr	r0, [pc, #56]	; (80025f4 <FreqMenu_DrawPresetMenu+0x13a8>)
 80025ba:	f00a ff57 	bl	800d46c <ILI9341_Draw_Text>
			break;
 80025be:	e0d1      	b.n	8002764 <FreqMenu_DrawPresetMenu+0x1518>
 80025c0:	08010b98 	.word	0x08010b98
 80025c4:	08010ba0 	.word	0x08010ba0
 80025c8:	08010ba8 	.word	0x08010ba8
 80025cc:	08010bb0 	.word	0x08010bb0
 80025d0:	08010bb8 	.word	0x08010bb8
 80025d4:	08010bc0 	.word	0x08010bc0
 80025d8:	08010bc8 	.word	0x08010bc8
 80025dc:	08010bd0 	.word	0x08010bd0
 80025e0:	08010bd8 	.word	0x08010bd8
 80025e4:	08010be0 	.word	0x08010be0
 80025e8:	08010be8 	.word	0x08010be8
 80025ec:	08010bf0 	.word	0x08010bf0
 80025f0:	08010bf8 	.word	0x08010bf8
 80025f4:	08010c00 	.word	0x08010c00
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 80025f8:	7bfb      	ldrb	r3, [r7, #15]
 80025fa:	b29a      	uxth	r2, r3
 80025fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002600:	9301      	str	r3, [sp, #4]
 8002602:	2302      	movs	r3, #2
 8002604:	9300      	str	r3, [sp, #0]
 8002606:	2300      	movs	r3, #0
 8002608:	210a      	movs	r1, #10
 800260a:	4858      	ldr	r0, [pc, #352]	; (800276c <FreqMenu_DrawPresetMenu+0x1520>)
 800260c:	f00a ff2e 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8002610:	7bbb      	ldrb	r3, [r7, #14]
 8002612:	b29a      	uxth	r2, r3
 8002614:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002618:	9301      	str	r3, [sp, #4]
 800261a:	2302      	movs	r3, #2
 800261c:	9300      	str	r3, [sp, #0]
 800261e:	2300      	movs	r3, #0
 8002620:	210a      	movs	r1, #10
 8002622:	4853      	ldr	r0, [pc, #332]	; (8002770 <FreqMenu_DrawPresetMenu+0x1524>)
 8002624:	f00a ff22 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8002628:	7b7b      	ldrb	r3, [r7, #13]
 800262a:	b29a      	uxth	r2, r3
 800262c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002630:	9301      	str	r3, [sp, #4]
 8002632:	2302      	movs	r3, #2
 8002634:	9300      	str	r3, [sp, #0]
 8002636:	2300      	movs	r3, #0
 8002638:	210a      	movs	r1, #10
 800263a:	484e      	ldr	r0, [pc, #312]	; (8002774 <FreqMenu_DrawPresetMenu+0x1528>)
 800263c:	f00a ff16 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8002640:	7b3b      	ldrb	r3, [r7, #12]
 8002642:	b29a      	uxth	r2, r3
 8002644:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002648:	9301      	str	r3, [sp, #4]
 800264a:	2302      	movs	r3, #2
 800264c:	9300      	str	r3, [sp, #0]
 800264e:	2300      	movs	r3, #0
 8002650:	210a      	movs	r1, #10
 8002652:	4849      	ldr	r0, [pc, #292]	; (8002778 <FreqMenu_DrawPresetMenu+0x152c>)
 8002654:	f00a ff0a 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8002658:	7afb      	ldrb	r3, [r7, #11]
 800265a:	b29a      	uxth	r2, r3
 800265c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002660:	9301      	str	r3, [sp, #4]
 8002662:	2302      	movs	r3, #2
 8002664:	9300      	str	r3, [sp, #0]
 8002666:	2300      	movs	r3, #0
 8002668:	210a      	movs	r1, #10
 800266a:	4844      	ldr	r0, [pc, #272]	; (800277c <FreqMenu_DrawPresetMenu+0x1530>)
 800266c:	f00a fefe 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 8002670:	7abb      	ldrb	r3, [r7, #10]
 8002672:	b29a      	uxth	r2, r3
 8002674:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002678:	9301      	str	r3, [sp, #4]
 800267a:	2302      	movs	r3, #2
 800267c:	9300      	str	r3, [sp, #0]
 800267e:	2300      	movs	r3, #0
 8002680:	210a      	movs	r1, #10
 8002682:	483f      	ldr	r0, [pc, #252]	; (8002780 <FreqMenu_DrawPresetMenu+0x1534>)
 8002684:	f00a fef2 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8002688:	7a7b      	ldrb	r3, [r7, #9]
 800268a:	b29a      	uxth	r2, r3
 800268c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002690:	9301      	str	r3, [sp, #4]
 8002692:	2302      	movs	r3, #2
 8002694:	9300      	str	r3, [sp, #0]
 8002696:	2300      	movs	r3, #0
 8002698:	210a      	movs	r1, #10
 800269a:	483a      	ldr	r0, [pc, #232]	; (8002784 <FreqMenu_DrawPresetMenu+0x1538>)
 800269c:	f00a fee6 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 80026a0:	7bfb      	ldrb	r3, [r7, #15]
 80026a2:	b29a      	uxth	r2, r3
 80026a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026a8:	9301      	str	r3, [sp, #4]
 80026aa:	2302      	movs	r3, #2
 80026ac:	9300      	str	r3, [sp, #0]
 80026ae:	2300      	movs	r3, #0
 80026b0:	2178      	movs	r1, #120	; 0x78
 80026b2:	4835      	ldr	r0, [pc, #212]	; (8002788 <FreqMenu_DrawPresetMenu+0x153c>)
 80026b4:	f00a feda 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 80026b8:	7bbb      	ldrb	r3, [r7, #14]
 80026ba:	b29a      	uxth	r2, r3
 80026bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026c0:	9301      	str	r3, [sp, #4]
 80026c2:	2302      	movs	r3, #2
 80026c4:	9300      	str	r3, [sp, #0]
 80026c6:	2300      	movs	r3, #0
 80026c8:	2178      	movs	r1, #120	; 0x78
 80026ca:	4830      	ldr	r0, [pc, #192]	; (800278c <FreqMenu_DrawPresetMenu+0x1540>)
 80026cc:	f00a fece 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 80026d0:	7b7b      	ldrb	r3, [r7, #13]
 80026d2:	b29a      	uxth	r2, r3
 80026d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026d8:	9301      	str	r3, [sp, #4]
 80026da:	2302      	movs	r3, #2
 80026dc:	9300      	str	r3, [sp, #0]
 80026de:	2300      	movs	r3, #0
 80026e0:	2178      	movs	r1, #120	; 0x78
 80026e2:	482b      	ldr	r0, [pc, #172]	; (8002790 <FreqMenu_DrawPresetMenu+0x1544>)
 80026e4:	f00a fec2 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 80026e8:	7b3b      	ldrb	r3, [r7, #12]
 80026ea:	b29a      	uxth	r2, r3
 80026ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026f0:	9301      	str	r3, [sp, #4]
 80026f2:	2302      	movs	r3, #2
 80026f4:	9300      	str	r3, [sp, #0]
 80026f6:	2300      	movs	r3, #0
 80026f8:	2178      	movs	r1, #120	; 0x78
 80026fa:	4826      	ldr	r0, [pc, #152]	; (8002794 <FreqMenu_DrawPresetMenu+0x1548>)
 80026fc:	f00a feb6 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8002700:	7afb      	ldrb	r3, [r7, #11]
 8002702:	b29a      	uxth	r2, r3
 8002704:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002708:	9301      	str	r3, [sp, #4]
 800270a:	2302      	movs	r3, #2
 800270c:	9300      	str	r3, [sp, #0]
 800270e:	2300      	movs	r3, #0
 8002710:	2178      	movs	r1, #120	; 0x78
 8002712:	4821      	ldr	r0, [pc, #132]	; (8002798 <FreqMenu_DrawPresetMenu+0x154c>)
 8002714:	f00a feaa 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8002718:	7abb      	ldrb	r3, [r7, #10]
 800271a:	b29a      	uxth	r2, r3
 800271c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002720:	9301      	str	r3, [sp, #4]
 8002722:	2302      	movs	r3, #2
 8002724:	9300      	str	r3, [sp, #0]
 8002726:	2300      	movs	r3, #0
 8002728:	2178      	movs	r1, #120	; 0x78
 800272a:	481c      	ldr	r0, [pc, #112]	; (800279c <FreqMenu_DrawPresetMenu+0x1550>)
 800272c:	f00a fe9e 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, WHITE, 2, BLACK);
 8002730:	7a7b      	ldrb	r3, [r7, #9]
 8002732:	b29a      	uxth	r2, r3
 8002734:	2300      	movs	r3, #0
 8002736:	9301      	str	r3, [sp, #4]
 8002738:	2302      	movs	r3, #2
 800273a:	9300      	str	r3, [sp, #0]
 800273c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002740:	2178      	movs	r1, #120	; 0x78
 8002742:	4817      	ldr	r0, [pc, #92]	; (80027a0 <FreqMenu_DrawPresetMenu+0x1554>)
 8002744:	f00a fe92 	bl	800d46c <ILI9341_Draw_Text>
			break;
 8002748:	bf00      	nop
 800274a:	e00b      	b.n	8002764 <FreqMenu_DrawPresetMenu+0x1518>
		ILI9341_Draw_Text("FreqMenus::FreqMenu_DrawFreqPresetMenu() Error", 		10, 180, RED, 1, BLACK);
 800274c:	2300      	movs	r3, #0
 800274e:	9301      	str	r3, [sp, #4]
 8002750:	2301      	movs	r3, #1
 8002752:	9300      	str	r3, [sp, #0]
 8002754:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002758:	22b4      	movs	r2, #180	; 0xb4
 800275a:	210a      	movs	r1, #10
 800275c:	4811      	ldr	r0, [pc, #68]	; (80027a4 <FreqMenu_DrawPresetMenu+0x1558>)
 800275e:	f00a fe85 	bl	800d46c <ILI9341_Draw_Text>
}
 8002762:	e7ff      	b.n	8002764 <FreqMenu_DrawPresetMenu+0x1518>
 8002764:	bf00      	nop
 8002766:	3710      	adds	r7, #16
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	08010b98 	.word	0x08010b98
 8002770:	08010ba0 	.word	0x08010ba0
 8002774:	08010ba8 	.word	0x08010ba8
 8002778:	08010bb0 	.word	0x08010bb0
 800277c:	08010bb8 	.word	0x08010bb8
 8002780:	08010bc0 	.word	0x08010bc0
 8002784:	08010bc8 	.word	0x08010bc8
 8002788:	08010bd0 	.word	0x08010bd0
 800278c:	08010bd8 	.word	0x08010bd8
 8002790:	08010be0 	.word	0x08010be0
 8002794:	08010be8 	.word	0x08010be8
 8002798:	08010bf0 	.word	0x08010bf0
 800279c:	08010bf8 	.word	0x08010bf8
 80027a0:	08010c00 	.word	0x08010c00
 80027a4:	08010c0c 	.word	0x08010c0c

080027a8 <FreqMenu_DrawAdjustMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawAdjustMenu()
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FREQ->ADJUST", 10, 10, WHITE, 2, BLACK);
 80027ae:	2300      	movs	r3, #0
 80027b0:	9301      	str	r3, [sp, #4]
 80027b2:	2302      	movs	r3, #2
 80027b4:	9300      	str	r3, [sp, #0]
 80027b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027ba:	220a      	movs	r2, #10
 80027bc:	210a      	movs	r1, #10
 80027be:	4804      	ldr	r0, [pc, #16]	; (80027d0 <FreqMenu_DrawAdjustMenu+0x28>)
 80027c0:	f00a fe54 	bl	800d46c <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 80027c4:	f7fe fb6e 	bl	8000ea4 <DM_DisplayFormattedOutput>
	//snprintf(freq, sizeof(freq), "%u", (uint8_t)FreqO_GetOutputFreq());
	if(DM_AddDigitPadding((uint16_t)FreqO_GetOutputFreq(), freq, sizeof(freq)) == 0)
		ILI9341_Draw_Text(freq, 250, 150, WHITE, 1, BLACK);
*/

}
 80027c8:	bf00      	nop
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	08010c3c 	.word	0x08010c3c

080027d4 <FreqMenu_DrawSweepMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawSweepMenu()
{
 80027d4:	b590      	push	{r4, r7, lr}
 80027d6:	b095      	sub	sp, #84	; 0x54
 80027d8:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FREQ->SWEEP", 	10, 10, WHITE, 2, BLACK);
 80027da:	2300      	movs	r3, #0
 80027dc:	9301      	str	r3, [sp, #4]
 80027de:	2302      	movs	r3, #2
 80027e0:	9300      	str	r3, [sp, #0]
 80027e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027e6:	220a      	movs	r2, #10
 80027e8:	210a      	movs	r1, #10
 80027ea:	4878      	ldr	r0, [pc, #480]	; (80029cc <FreqMenu_DrawSweepMenu+0x1f8>)
 80027ec:	f00a fe3e 	bl	800d46c <ILI9341_Draw_Text>


	// draw enabled status
	char enabled_text[16] = "";
 80027f0:	2300      	movs	r3, #0
 80027f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80027f4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80027f8:	2200      	movs	r2, #0
 80027fa:	601a      	str	r2, [r3, #0]
 80027fc:	605a      	str	r2, [r3, #4]
 80027fe:	609a      	str	r2, [r3, #8]
	if((SWEEP_TIMER->CR1 & TIM_CR1_CEN) == TIM_CR1_CEN)
 8002800:	4b73      	ldr	r3, [pc, #460]	; (80029d0 <FreqMenu_DrawSweepMenu+0x1fc>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0301 	and.w	r3, r3, #1
 8002808:	2b01      	cmp	r3, #1
 800280a:	d10b      	bne.n	8002824 <FreqMenu_DrawSweepMenu+0x50>
	{
		snprintf(enabled_text, sizeof(enabled_text), "SWEEP  ENABLED");
 800280c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002810:	4a70      	ldr	r2, [pc, #448]	; (80029d4 <FreqMenu_DrawSweepMenu+0x200>)
 8002812:	461c      	mov	r4, r3
 8002814:	4613      	mov	r3, r2
 8002816:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002818:	c407      	stmia	r4!, {r0, r1, r2}
 800281a:	8023      	strh	r3, [r4, #0]
 800281c:	3402      	adds	r4, #2
 800281e:	0c1b      	lsrs	r3, r3, #16
 8002820:	7023      	strb	r3, [r4, #0]
 8002822:	e00a      	b.n	800283a <FreqMenu_DrawSweepMenu+0x66>
	}
	else
	{
		snprintf(enabled_text, sizeof(enabled_text), "SWEEP DISABLED");
 8002824:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002828:	4a6b      	ldr	r2, [pc, #428]	; (80029d8 <FreqMenu_DrawSweepMenu+0x204>)
 800282a:	461c      	mov	r4, r3
 800282c:	4613      	mov	r3, r2
 800282e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002830:	c407      	stmia	r4!, {r0, r1, r2}
 8002832:	8023      	strh	r3, [r4, #0]
 8002834:	3402      	adds	r4, #2
 8002836:	0c1b      	lsrs	r3, r3, #16
 8002838:	7023      	strb	r3, [r4, #0]
	}

	ILI9341_Draw_Text(enabled_text, 10, 50, BLACK, 2, WHITE);
 800283a:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800283e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002842:	9301      	str	r3, [sp, #4]
 8002844:	2302      	movs	r3, #2
 8002846:	9300      	str	r3, [sp, #0]
 8002848:	2300      	movs	r3, #0
 800284a:	2232      	movs	r2, #50	; 0x32
 800284c:	210a      	movs	r1, #10
 800284e:	f00a fe0d 	bl	800d46c <ILI9341_Draw_Text>



	// draw mode (direction) status
	char mode_text[16] = "";
 8002852:	2300      	movs	r3, #0
 8002854:	62bb      	str	r3, [r7, #40]	; 0x28
 8002856:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800285a:	2200      	movs	r2, #0
 800285c:	601a      	str	r2, [r3, #0]
 800285e:	605a      	str	r2, [r3, #4]
 8002860:	609a      	str	r2, [r3, #8]

	if((SWEEP_TIMER->CR1 & TIM_CR1_CMS_0) == TIM_CR1_CMS_0)
 8002862:	4b5b      	ldr	r3, [pc, #364]	; (80029d0 <FreqMenu_DrawSweepMenu+0x1fc>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0320 	and.w	r3, r3, #32
 800286a:	2b20      	cmp	r3, #32
 800286c:	d106      	bne.n	800287c <FreqMenu_DrawSweepMenu+0xa8>
	{
		// direction not relevant in center-alligned mode (bi-directional)
		snprintf(mode_text, sizeof(mode_text), "DIRECTION: BOTH");
 800286e:	4b5b      	ldr	r3, [pc, #364]	; (80029dc <FreqMenu_DrawSweepMenu+0x208>)
 8002870:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002874:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002876:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800287a:	e012      	b.n	80028a2 <FreqMenu_DrawSweepMenu+0xce>
	{
		// center-alligned mode disabled (uni-directional)


		// get direction
		if((SWEEP_TIMER->CR1 & TIM_CR1_DIR) == TIM_CR1_DIR)
 800287c:	4b54      	ldr	r3, [pc, #336]	; (80029d0 <FreqMenu_DrawSweepMenu+0x1fc>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0310 	and.w	r3, r3, #16
 8002884:	2b10      	cmp	r3, #16
 8002886:	d106      	bne.n	8002896 <FreqMenu_DrawSweepMenu+0xc2>
			snprintf(mode_text, sizeof(mode_text), "DIRECTION: DOWN");
 8002888:	4b55      	ldr	r3, [pc, #340]	; (80029e0 <FreqMenu_DrawSweepMenu+0x20c>)
 800288a:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800288e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002890:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002894:	e005      	b.n	80028a2 <FreqMenu_DrawSweepMenu+0xce>
		else
			snprintf(mode_text, sizeof(mode_text), "DIRECTION:   UP");
 8002896:	4b53      	ldr	r3, [pc, #332]	; (80029e4 <FreqMenu_DrawSweepMenu+0x210>)
 8002898:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800289c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800289e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	}

	ILI9341_Draw_Text(mode_text, 10, 80, BLACK, 2, WHITE);
 80028a2:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80028a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028aa:	9301      	str	r3, [sp, #4]
 80028ac:	2302      	movs	r3, #2
 80028ae:	9300      	str	r3, [sp, #0]
 80028b0:	2300      	movs	r3, #0
 80028b2:	2250      	movs	r2, #80	; 0x50
 80028b4:	210a      	movs	r1, #10
 80028b6:	f00a fdd9 	bl	800d46c <ILI9341_Draw_Text>

	// draw rate status
	char arr_text[20] = "";
 80028ba:	2300      	movs	r3, #0
 80028bc:	617b      	str	r3, [r7, #20]
 80028be:	f107 0318 	add.w	r3, r7, #24
 80028c2:	2200      	movs	r2, #0
 80028c4:	601a      	str	r2, [r3, #0]
 80028c6:	605a      	str	r2, [r3, #4]
 80028c8:	609a      	str	r2, [r3, #8]
 80028ca:	60da      	str	r2, [r3, #12]
	snprintf(arr_text, sizeof(arr_text), "RATE: %1.4f Hertz", calculated_sweep_in_hertz);
 80028cc:	4b46      	ldr	r3, [pc, #280]	; (80029e8 <FreqMenu_DrawSweepMenu+0x214>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7fd fe61 	bl	8000598 <__aeabi_f2d>
 80028d6:	4603      	mov	r3, r0
 80028d8:	460c      	mov	r4, r1
 80028da:	f107 0014 	add.w	r0, r7, #20
 80028de:	e9cd 3400 	strd	r3, r4, [sp]
 80028e2:	4a42      	ldr	r2, [pc, #264]	; (80029ec <FreqMenu_DrawSweepMenu+0x218>)
 80028e4:	2114      	movs	r1, #20
 80028e6:	f00c f90d 	bl	800eb04 <sniprintf>
	ILI9341_Draw_Text(arr_text, 10, 110, BLACK, 2, WHITE);
 80028ea:	f107 0014 	add.w	r0, r7, #20
 80028ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028f2:	9301      	str	r3, [sp, #4]
 80028f4:	2302      	movs	r3, #2
 80028f6:	9300      	str	r3, [sp, #0]
 80028f8:	2300      	movs	r3, #0
 80028fa:	226e      	movs	r2, #110	; 0x6e
 80028fc:	210a      	movs	r1, #10
 80028fe:	f00a fdb5 	bl	800d46c <ILI9341_Draw_Text>

	// draw output freq status

	char out_hertz[20] = "";
 8002902:	2300      	movs	r3, #0
 8002904:	603b      	str	r3, [r7, #0]
 8002906:	1d3b      	adds	r3, r7, #4
 8002908:	2200      	movs	r2, #0
 800290a:	601a      	str	r2, [r3, #0]
 800290c:	605a      	str	r2, [r3, #4]
 800290e:	609a      	str	r2, [r3, #8]
 8002910:	60da      	str	r2, [r3, #12]
	snprintf(out_hertz, sizeof(out_hertz), "OUT: %7.2f Hertz", SM_GetOutputInHertz());
 8002912:	f002 fbcd 	bl	80050b0 <SM_GetOutputInHertz>
 8002916:	ee10 3a10 	vmov	r3, s0
 800291a:	4618      	mov	r0, r3
 800291c:	f7fd fe3c 	bl	8000598 <__aeabi_f2d>
 8002920:	4603      	mov	r3, r0
 8002922:	460c      	mov	r4, r1
 8002924:	4638      	mov	r0, r7
 8002926:	e9cd 3400 	strd	r3, r4, [sp]
 800292a:	4a31      	ldr	r2, [pc, #196]	; (80029f0 <FreqMenu_DrawSweepMenu+0x21c>)
 800292c:	2114      	movs	r1, #20
 800292e:	f00c f8e9 	bl	800eb04 <sniprintf>
	ILI9341_Draw_Text(out_hertz, 10, 140, BLACK, 2, WHITE);
 8002932:	4638      	mov	r0, r7
 8002934:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002938:	9301      	str	r3, [sp, #4]
 800293a:	2302      	movs	r3, #2
 800293c:	9300      	str	r3, [sp, #0]
 800293e:	2300      	movs	r3, #0
 8002940:	228c      	movs	r2, #140	; 0x8c
 8002942:	210a      	movs	r1, #10
 8002944:	f00a fd92 	bl	800d46c <ILI9341_Draw_Text>



	// draw bottom menu button text
	if((SWEEP_TIMER->CR1 & TIM_CR1_CEN) == TIM_CR1_CEN)
 8002948:	4b21      	ldr	r3, [pc, #132]	; (80029d0 <FreqMenu_DrawSweepMenu+0x1fc>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0301 	and.w	r3, r3, #1
 8002950:	2b01      	cmp	r3, #1
 8002952:	d10b      	bne.n	800296c <FreqMenu_DrawSweepMenu+0x198>
		ILI9341_Draw_Text("PAUSE ", 6, 210, BLACK, 2, DARKCYAN);
 8002954:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8002958:	9301      	str	r3, [sp, #4]
 800295a:	2302      	movs	r3, #2
 800295c:	9300      	str	r3, [sp, #0]
 800295e:	2300      	movs	r3, #0
 8002960:	22d2      	movs	r2, #210	; 0xd2
 8002962:	2106      	movs	r1, #6
 8002964:	4823      	ldr	r0, [pc, #140]	; (80029f4 <FreqMenu_DrawSweepMenu+0x220>)
 8002966:	f00a fd81 	bl	800d46c <ILI9341_Draw_Text>
 800296a:	e00a      	b.n	8002982 <FreqMenu_DrawSweepMenu+0x1ae>
	else
		ILI9341_Draw_Text("RESUME", 5, 210, BLACK, 2, DARKCYAN);
 800296c:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8002970:	9301      	str	r3, [sp, #4]
 8002972:	2302      	movs	r3, #2
 8002974:	9300      	str	r3, [sp, #0]
 8002976:	2300      	movs	r3, #0
 8002978:	22d2      	movs	r2, #210	; 0xd2
 800297a:	2105      	movs	r1, #5
 800297c:	481e      	ldr	r0, [pc, #120]	; (80029f8 <FreqMenu_DrawSweepMenu+0x224>)
 800297e:	f00a fd75 	bl	800d46c <ILI9341_Draw_Text>

	ILI9341_Draw_Text("MODE", 95, 210, BLACK, 2, DARKGREEN);
 8002982:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8002986:	9301      	str	r3, [sp, #4]
 8002988:	2302      	movs	r3, #2
 800298a:	9300      	str	r3, [sp, #0]
 800298c:	2300      	movs	r3, #0
 800298e:	22d2      	movs	r2, #210	; 0xd2
 8002990:	215f      	movs	r1, #95	; 0x5f
 8002992:	481a      	ldr	r0, [pc, #104]	; (80029fc <FreqMenu_DrawSweepMenu+0x228>)
 8002994:	f00a fd6a 	bl	800d46c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("LOWER", 173, 210, BLACK, 2, YELLOW);
 8002998:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800299c:	9301      	str	r3, [sp, #4]
 800299e:	2302      	movs	r3, #2
 80029a0:	9300      	str	r3, [sp, #0]
 80029a2:	2300      	movs	r3, #0
 80029a4:	22d2      	movs	r2, #210	; 0xd2
 80029a6:	21ad      	movs	r1, #173	; 0xad
 80029a8:	4815      	ldr	r0, [pc, #84]	; (8002a00 <FreqMenu_DrawSweepMenu+0x22c>)
 80029aa:	f00a fd5f 	bl	800d46c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("UPPER", 250, 210, BLACK, 2, RED);
 80029ae:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80029b2:	9301      	str	r3, [sp, #4]
 80029b4:	2302      	movs	r3, #2
 80029b6:	9300      	str	r3, [sp, #0]
 80029b8:	2300      	movs	r3, #0
 80029ba:	22d2      	movs	r2, #210	; 0xd2
 80029bc:	21fa      	movs	r1, #250	; 0xfa
 80029be:	4811      	ldr	r0, [pc, #68]	; (8002a04 <FreqMenu_DrawSweepMenu+0x230>)
 80029c0:	f00a fd54 	bl	800d46c <ILI9341_Draw_Text>

}
 80029c4:	bf00      	nop
 80029c6:	374c      	adds	r7, #76	; 0x4c
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd90      	pop	{r4, r7, pc}
 80029cc:	08010c50 	.word	0x08010c50
 80029d0:	40000c00 	.word	0x40000c00
 80029d4:	08010c64 	.word	0x08010c64
 80029d8:	08010c74 	.word	0x08010c74
 80029dc:	08010c84 	.word	0x08010c84
 80029e0:	08010c94 	.word	0x08010c94
 80029e4:	08010ca4 	.word	0x08010ca4
 80029e8:	20001f30 	.word	0x20001f30
 80029ec:	08010cb4 	.word	0x08010cb4
 80029f0:	08010cc8 	.word	0x08010cc8
 80029f4:	08010cdc 	.word	0x08010cdc
 80029f8:	08010ce4 	.word	0x08010ce4
 80029fc:	08010cec 	.word	0x08010cec
 8002a00:	08010cf4 	.word	0x08010cf4
 8002a04:	08010cfc 	.word	0x08010cfc

08002a08 <FuncMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawMenu(eFuncMenu_Status pMenu)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	4603      	mov	r3, r0
 8002a10:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8002a12:	79fb      	ldrb	r3, [r7, #7]
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	d007      	beq.n	8002a28 <FuncMenu_DrawMenu+0x20>
 8002a18:	2b03      	cmp	r3, #3
 8002a1a:	d008      	beq.n	8002a2e <FuncMenu_DrawMenu+0x26>
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d000      	beq.n	8002a22 <FuncMenu_DrawMenu+0x1a>
		case ENABLE_FUNC_SYNC_MENU:
			FuncMenu_DrawSyncMenu();
			break;

		default:
			break;
 8002a20:	e008      	b.n	8002a34 <FuncMenu_DrawMenu+0x2c>
			FuncMenu_DrawMainMenu();
 8002a22:	f000 f80b 	bl	8002a3c <FuncMenu_DrawMainMenu>
			break;
 8002a26:	e005      	b.n	8002a34 <FuncMenu_DrawMenu+0x2c>
			FuncMenu_DrawSignalMenu();
 8002a28:	f000 f850 	bl	8002acc <FuncMenu_DrawSignalMenu>
			break;
 8002a2c:	e002      	b.n	8002a34 <FuncMenu_DrawMenu+0x2c>
			FuncMenu_DrawSyncMenu();
 8002a2e:	f000 fa2d 	bl	8002e8c <FuncMenu_DrawSyncMenu>
			break;
 8002a32:	bf00      	nop

	}
}
 8002a34:	bf00      	nop
 8002a36:	3708      	adds	r7, #8
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <FuncMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawMainMenu()
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FUNC", 	10, 10, WHITE, 2, BLACK);
 8002a42:	2300      	movs	r3, #0
 8002a44:	9301      	str	r3, [sp, #4]
 8002a46:	2302      	movs	r3, #2
 8002a48:	9300      	str	r3, [sp, #0]
 8002a4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a4e:	220a      	movs	r2, #10
 8002a50:	210a      	movs	r1, #10
 8002a52:	481a      	ldr	r0, [pc, #104]	; (8002abc <FuncMenu_DrawMainMenu+0x80>)
 8002a54:	f00a fd0a 	bl	800d46c <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8002a58:	f7fe fa24 	bl	8000ea4 <DM_DisplayFormattedOutput>

 	// coloured menu btn labels
	ILI9341_Draw_Text("SIGNAL", 5, 210, BLACK, 2, DARKCYAN);
 8002a5c:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8002a60:	9301      	str	r3, [sp, #4]
 8002a62:	2302      	movs	r3, #2
 8002a64:	9300      	str	r3, [sp, #0]
 8002a66:	2300      	movs	r3, #0
 8002a68:	22d2      	movs	r2, #210	; 0xd2
 8002a6a:	2105      	movs	r1, #5
 8002a6c:	4814      	ldr	r0, [pc, #80]	; (8002ac0 <FuncMenu_DrawMainMenu+0x84>)
 8002a6e:	f00a fcfd 	bl	800d46c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SYNC", 97, 210, BLACK, 2, DARKGREEN);
 8002a72:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8002a76:	9301      	str	r3, [sp, #4]
 8002a78:	2302      	movs	r3, #2
 8002a7a:	9300      	str	r3, [sp, #0]
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	22d2      	movs	r2, #210	; 0xd2
 8002a80:	2161      	movs	r1, #97	; 0x61
 8002a82:	4810      	ldr	r0, [pc, #64]	; (8002ac4 <FuncMenu_DrawMainMenu+0x88>)
 8002a84:	f00a fcf2 	bl	800d46c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 175, 210, BLACK, 2, YELLOW);
 8002a88:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002a8c:	9301      	str	r3, [sp, #4]
 8002a8e:	2302      	movs	r3, #2
 8002a90:	9300      	str	r3, [sp, #0]
 8002a92:	2300      	movs	r3, #0
 8002a94:	22d2      	movs	r2, #210	; 0xd2
 8002a96:	21af      	movs	r1, #175	; 0xaf
 8002a98:	480b      	ldr	r0, [pc, #44]	; (8002ac8 <FuncMenu_DrawMainMenu+0x8c>)
 8002a9a:	f00a fce7 	bl	800d46c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 260, 210, BLACK, 2, RED);
 8002a9e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002aa2:	9301      	str	r3, [sp, #4]
 8002aa4:	2302      	movs	r3, #2
 8002aa6:	9300      	str	r3, [sp, #0]
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	22d2      	movs	r2, #210	; 0xd2
 8002aac:	f44f 7182 	mov.w	r1, #260	; 0x104
 8002ab0:	4805      	ldr	r0, [pc, #20]	; (8002ac8 <FuncMenu_DrawMainMenu+0x8c>)
 8002ab2:	f00a fcdb 	bl	800d46c <ILI9341_Draw_Text>
}
 8002ab6:	bf00      	nop
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	08010d04 	.word	0x08010d04
 8002ac0:	08010d10 	.word	0x08010d10
 8002ac4:	08010d18 	.word	0x08010d18
 8002ac8:	08010d20 	.word	0x08010d20

08002acc <FuncMenu_DrawSignalMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawSignalMenu()
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FUNC->SIG", 	10, 10, WHITE, 2, BLACK);
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	9301      	str	r3, [sp, #4]
 8002ad6:	2302      	movs	r3, #2
 8002ad8:	9300      	str	r3, [sp, #0]
 8002ada:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ade:	220a      	movs	r2, #10
 8002ae0:	210a      	movs	r1, #10
 8002ae2:	48b9      	ldr	r0, [pc, #740]	; (8002dc8 <FuncMenu_DrawSignalMenu+0x2fc>)
 8002ae4:	f00a fcc2 	bl	800d46c <ILI9341_Draw_Text>

	//FunctionProfile_t *func_profileTmp = FuncO_GetSignalFPresetObject();
	FunctionProfile_t *func_profileTmp = SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile;
 8002ae8:	2000      	movs	r0, #0
 8002aea:	f002 faaf 	bl	800504c <SM_GetOutputChannel>
 8002aee:	4603      	mov	r3, r0
 8002af0:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8002af4:	607b      	str	r3, [r7, #4]
	if(func_profileTmp)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	f000 81b6 	beq.w	8002e6a <FuncMenu_DrawSignalMenu+0x39e>
	{
		switch(func_profileTmp->func)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	2b05      	cmp	r3, #5
 8002b04:	f200 81b1 	bhi.w	8002e6a <FuncMenu_DrawSignalMenu+0x39e>
 8002b08:	a201      	add	r2, pc, #4	; (adr r2, 8002b10 <FuncMenu_DrawSignalMenu+0x44>)
 8002b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b0e:	bf00      	nop
 8002b10:	08002b29 	.word	0x08002b29
 8002b14:	08002baf 	.word	0x08002baf
 8002b18:	08002c35 	.word	0x08002c35
 8002b1c:	08002cbb 	.word	0x08002cbb
 8002b20:	08002d41 	.word	0x08002d41
 8002b24:	08002de5 	.word	0x08002de5
		{
			case SINE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, WHITE, 2, BLACK);
 8002b28:	2300      	movs	r3, #0
 8002b2a:	9301      	str	r3, [sp, #4]
 8002b2c:	2302      	movs	r3, #2
 8002b2e:	9300      	str	r3, [sp, #0]
 8002b30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b34:	2232      	movs	r2, #50	; 0x32
 8002b36:	210a      	movs	r1, #10
 8002b38:	48a4      	ldr	r0, [pc, #656]	; (8002dcc <FuncMenu_DrawSignalMenu+0x300>)
 8002b3a:	f00a fc97 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, BLACK, 2, WHITE);
 8002b3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b42:	9301      	str	r3, [sp, #4]
 8002b44:	2302      	movs	r3, #2
 8002b46:	9300      	str	r3, [sp, #0]
 8002b48:	2300      	movs	r3, #0
 8002b4a:	2246      	movs	r2, #70	; 0x46
 8002b4c:	210a      	movs	r1, #10
 8002b4e:	48a0      	ldr	r0, [pc, #640]	; (8002dd0 <FuncMenu_DrawSignalMenu+0x304>)
 8002b50:	f00a fc8c 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, BLACK, 2, WHITE);
 8002b54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b58:	9301      	str	r3, [sp, #4]
 8002b5a:	2302      	movs	r3, #2
 8002b5c:	9300      	str	r3, [sp, #0]
 8002b5e:	2300      	movs	r3, #0
 8002b60:	225a      	movs	r2, #90	; 0x5a
 8002b62:	210a      	movs	r1, #10
 8002b64:	489b      	ldr	r0, [pc, #620]	; (8002dd4 <FuncMenu_DrawSignalMenu+0x308>)
 8002b66:	f00a fc81 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, BLACK, 2, WHITE);
 8002b6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b6e:	9301      	str	r3, [sp, #4]
 8002b70:	2302      	movs	r3, #2
 8002b72:	9300      	str	r3, [sp, #0]
 8002b74:	2300      	movs	r3, #0
 8002b76:	226e      	movs	r2, #110	; 0x6e
 8002b78:	210a      	movs	r1, #10
 8002b7a:	4897      	ldr	r0, [pc, #604]	; (8002dd8 <FuncMenu_DrawSignalMenu+0x30c>)
 8002b7c:	f00a fc76 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, BLACK, 2, WHITE);
 8002b80:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b84:	9301      	str	r3, [sp, #4]
 8002b86:	2302      	movs	r3, #2
 8002b88:	9300      	str	r3, [sp, #0]
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	2282      	movs	r2, #130	; 0x82
 8002b8e:	210a      	movs	r1, #10
 8002b90:	4892      	ldr	r0, [pc, #584]	; (8002ddc <FuncMenu_DrawSignalMenu+0x310>)
 8002b92:	f00a fc6b 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, BLACK, 2, WHITE);
 8002b96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b9a:	9301      	str	r3, [sp, #4]
 8002b9c:	2302      	movs	r3, #2
 8002b9e:	9300      	str	r3, [sp, #0]
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	2296      	movs	r2, #150	; 0x96
 8002ba4:	210a      	movs	r1, #10
 8002ba6:	488e      	ldr	r0, [pc, #568]	; (8002de0 <FuncMenu_DrawSignalMenu+0x314>)
 8002ba8:	f00a fc60 	bl	800d46c <ILI9341_Draw_Text>
				break;
 8002bac:	e15d      	b.n	8002e6a <FuncMenu_DrawSignalMenu+0x39e>
			case SQUARE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, BLACK, 2, WHITE);
 8002bae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002bb2:	9301      	str	r3, [sp, #4]
 8002bb4:	2302      	movs	r3, #2
 8002bb6:	9300      	str	r3, [sp, #0]
 8002bb8:	2300      	movs	r3, #0
 8002bba:	2232      	movs	r2, #50	; 0x32
 8002bbc:	210a      	movs	r1, #10
 8002bbe:	4883      	ldr	r0, [pc, #524]	; (8002dcc <FuncMenu_DrawSignalMenu+0x300>)
 8002bc0:	f00a fc54 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, WHITE, 2, BLACK);
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	9301      	str	r3, [sp, #4]
 8002bc8:	2302      	movs	r3, #2
 8002bca:	9300      	str	r3, [sp, #0]
 8002bcc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002bd0:	2246      	movs	r2, #70	; 0x46
 8002bd2:	210a      	movs	r1, #10
 8002bd4:	487e      	ldr	r0, [pc, #504]	; (8002dd0 <FuncMenu_DrawSignalMenu+0x304>)
 8002bd6:	f00a fc49 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, BLACK, 2, WHITE);
 8002bda:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002bde:	9301      	str	r3, [sp, #4]
 8002be0:	2302      	movs	r3, #2
 8002be2:	9300      	str	r3, [sp, #0]
 8002be4:	2300      	movs	r3, #0
 8002be6:	225a      	movs	r2, #90	; 0x5a
 8002be8:	210a      	movs	r1, #10
 8002bea:	487a      	ldr	r0, [pc, #488]	; (8002dd4 <FuncMenu_DrawSignalMenu+0x308>)
 8002bec:	f00a fc3e 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, BLACK, 2, WHITE);
 8002bf0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002bf4:	9301      	str	r3, [sp, #4]
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	9300      	str	r3, [sp, #0]
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	226e      	movs	r2, #110	; 0x6e
 8002bfe:	210a      	movs	r1, #10
 8002c00:	4875      	ldr	r0, [pc, #468]	; (8002dd8 <FuncMenu_DrawSignalMenu+0x30c>)
 8002c02:	f00a fc33 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, BLACK, 2, WHITE);
 8002c06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c0a:	9301      	str	r3, [sp, #4]
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	9300      	str	r3, [sp, #0]
 8002c10:	2300      	movs	r3, #0
 8002c12:	2282      	movs	r2, #130	; 0x82
 8002c14:	210a      	movs	r1, #10
 8002c16:	4871      	ldr	r0, [pc, #452]	; (8002ddc <FuncMenu_DrawSignalMenu+0x310>)
 8002c18:	f00a fc28 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, BLACK, 2, WHITE);
 8002c1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c20:	9301      	str	r3, [sp, #4]
 8002c22:	2302      	movs	r3, #2
 8002c24:	9300      	str	r3, [sp, #0]
 8002c26:	2300      	movs	r3, #0
 8002c28:	2296      	movs	r2, #150	; 0x96
 8002c2a:	210a      	movs	r1, #10
 8002c2c:	486c      	ldr	r0, [pc, #432]	; (8002de0 <FuncMenu_DrawSignalMenu+0x314>)
 8002c2e:	f00a fc1d 	bl	800d46c <ILI9341_Draw_Text>
				break;
 8002c32:	e11a      	b.n	8002e6a <FuncMenu_DrawSignalMenu+0x39e>
			case SAW_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, BLACK, 2, WHITE);
 8002c34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c38:	9301      	str	r3, [sp, #4]
 8002c3a:	2302      	movs	r3, #2
 8002c3c:	9300      	str	r3, [sp, #0]
 8002c3e:	2300      	movs	r3, #0
 8002c40:	2232      	movs	r2, #50	; 0x32
 8002c42:	210a      	movs	r1, #10
 8002c44:	4861      	ldr	r0, [pc, #388]	; (8002dcc <FuncMenu_DrawSignalMenu+0x300>)
 8002c46:	f00a fc11 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, BLACK, 2, WHITE);
 8002c4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c4e:	9301      	str	r3, [sp, #4]
 8002c50:	2302      	movs	r3, #2
 8002c52:	9300      	str	r3, [sp, #0]
 8002c54:	2300      	movs	r3, #0
 8002c56:	2246      	movs	r2, #70	; 0x46
 8002c58:	210a      	movs	r1, #10
 8002c5a:	485d      	ldr	r0, [pc, #372]	; (8002dd0 <FuncMenu_DrawSignalMenu+0x304>)
 8002c5c:	f00a fc06 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, WHITE, 2, BLACK);
 8002c60:	2300      	movs	r3, #0
 8002c62:	9301      	str	r3, [sp, #4]
 8002c64:	2302      	movs	r3, #2
 8002c66:	9300      	str	r3, [sp, #0]
 8002c68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c6c:	225a      	movs	r2, #90	; 0x5a
 8002c6e:	210a      	movs	r1, #10
 8002c70:	4858      	ldr	r0, [pc, #352]	; (8002dd4 <FuncMenu_DrawSignalMenu+0x308>)
 8002c72:	f00a fbfb 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, BLACK, 2, WHITE);
 8002c76:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c7a:	9301      	str	r3, [sp, #4]
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	9300      	str	r3, [sp, #0]
 8002c80:	2300      	movs	r3, #0
 8002c82:	226e      	movs	r2, #110	; 0x6e
 8002c84:	210a      	movs	r1, #10
 8002c86:	4854      	ldr	r0, [pc, #336]	; (8002dd8 <FuncMenu_DrawSignalMenu+0x30c>)
 8002c88:	f00a fbf0 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, BLACK, 2, WHITE);
 8002c8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c90:	9301      	str	r3, [sp, #4]
 8002c92:	2302      	movs	r3, #2
 8002c94:	9300      	str	r3, [sp, #0]
 8002c96:	2300      	movs	r3, #0
 8002c98:	2282      	movs	r2, #130	; 0x82
 8002c9a:	210a      	movs	r1, #10
 8002c9c:	484f      	ldr	r0, [pc, #316]	; (8002ddc <FuncMenu_DrawSignalMenu+0x310>)
 8002c9e:	f00a fbe5 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, BLACK, 2, WHITE);
 8002ca2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ca6:	9301      	str	r3, [sp, #4]
 8002ca8:	2302      	movs	r3, #2
 8002caa:	9300      	str	r3, [sp, #0]
 8002cac:	2300      	movs	r3, #0
 8002cae:	2296      	movs	r2, #150	; 0x96
 8002cb0:	210a      	movs	r1, #10
 8002cb2:	484b      	ldr	r0, [pc, #300]	; (8002de0 <FuncMenu_DrawSignalMenu+0x314>)
 8002cb4:	f00a fbda 	bl	800d46c <ILI9341_Draw_Text>
				break;
 8002cb8:	e0d7      	b.n	8002e6a <FuncMenu_DrawSignalMenu+0x39e>
			case REV_SAW_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, BLACK, 2, WHITE);
 8002cba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002cbe:	9301      	str	r3, [sp, #4]
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	9300      	str	r3, [sp, #0]
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	2232      	movs	r2, #50	; 0x32
 8002cc8:	210a      	movs	r1, #10
 8002cca:	4840      	ldr	r0, [pc, #256]	; (8002dcc <FuncMenu_DrawSignalMenu+0x300>)
 8002ccc:	f00a fbce 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, BLACK, 2, WHITE);
 8002cd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002cd4:	9301      	str	r3, [sp, #4]
 8002cd6:	2302      	movs	r3, #2
 8002cd8:	9300      	str	r3, [sp, #0]
 8002cda:	2300      	movs	r3, #0
 8002cdc:	2246      	movs	r2, #70	; 0x46
 8002cde:	210a      	movs	r1, #10
 8002ce0:	483b      	ldr	r0, [pc, #236]	; (8002dd0 <FuncMenu_DrawSignalMenu+0x304>)
 8002ce2:	f00a fbc3 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, BLACK, 2, WHITE);
 8002ce6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002cea:	9301      	str	r3, [sp, #4]
 8002cec:	2302      	movs	r3, #2
 8002cee:	9300      	str	r3, [sp, #0]
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	225a      	movs	r2, #90	; 0x5a
 8002cf4:	210a      	movs	r1, #10
 8002cf6:	4837      	ldr	r0, [pc, #220]	; (8002dd4 <FuncMenu_DrawSignalMenu+0x308>)
 8002cf8:	f00a fbb8 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, WHITE, 2, BLACK);
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	9301      	str	r3, [sp, #4]
 8002d00:	2302      	movs	r3, #2
 8002d02:	9300      	str	r3, [sp, #0]
 8002d04:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d08:	226e      	movs	r2, #110	; 0x6e
 8002d0a:	210a      	movs	r1, #10
 8002d0c:	4832      	ldr	r0, [pc, #200]	; (8002dd8 <FuncMenu_DrawSignalMenu+0x30c>)
 8002d0e:	f00a fbad 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, BLACK, 2, WHITE);
 8002d12:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d16:	9301      	str	r3, [sp, #4]
 8002d18:	2302      	movs	r3, #2
 8002d1a:	9300      	str	r3, [sp, #0]
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	2282      	movs	r2, #130	; 0x82
 8002d20:	210a      	movs	r1, #10
 8002d22:	482e      	ldr	r0, [pc, #184]	; (8002ddc <FuncMenu_DrawSignalMenu+0x310>)
 8002d24:	f00a fba2 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, BLACK, 2, WHITE);
 8002d28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d2c:	9301      	str	r3, [sp, #4]
 8002d2e:	2302      	movs	r3, #2
 8002d30:	9300      	str	r3, [sp, #0]
 8002d32:	2300      	movs	r3, #0
 8002d34:	2296      	movs	r2, #150	; 0x96
 8002d36:	210a      	movs	r1, #10
 8002d38:	4829      	ldr	r0, [pc, #164]	; (8002de0 <FuncMenu_DrawSignalMenu+0x314>)
 8002d3a:	f00a fb97 	bl	800d46c <ILI9341_Draw_Text>
				break;
 8002d3e:	e094      	b.n	8002e6a <FuncMenu_DrawSignalMenu+0x39e>
			case TRIANGLE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, BLACK, 2, WHITE);
 8002d40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d44:	9301      	str	r3, [sp, #4]
 8002d46:	2302      	movs	r3, #2
 8002d48:	9300      	str	r3, [sp, #0]
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	2232      	movs	r2, #50	; 0x32
 8002d4e:	210a      	movs	r1, #10
 8002d50:	481e      	ldr	r0, [pc, #120]	; (8002dcc <FuncMenu_DrawSignalMenu+0x300>)
 8002d52:	f00a fb8b 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, BLACK, 2, WHITE);
 8002d56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d5a:	9301      	str	r3, [sp, #4]
 8002d5c:	2302      	movs	r3, #2
 8002d5e:	9300      	str	r3, [sp, #0]
 8002d60:	2300      	movs	r3, #0
 8002d62:	2246      	movs	r2, #70	; 0x46
 8002d64:	210a      	movs	r1, #10
 8002d66:	481a      	ldr	r0, [pc, #104]	; (8002dd0 <FuncMenu_DrawSignalMenu+0x304>)
 8002d68:	f00a fb80 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, BLACK, 2, WHITE);
 8002d6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d70:	9301      	str	r3, [sp, #4]
 8002d72:	2302      	movs	r3, #2
 8002d74:	9300      	str	r3, [sp, #0]
 8002d76:	2300      	movs	r3, #0
 8002d78:	225a      	movs	r2, #90	; 0x5a
 8002d7a:	210a      	movs	r1, #10
 8002d7c:	4815      	ldr	r0, [pc, #84]	; (8002dd4 <FuncMenu_DrawSignalMenu+0x308>)
 8002d7e:	f00a fb75 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, BLACK, 2, WHITE);
 8002d82:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d86:	9301      	str	r3, [sp, #4]
 8002d88:	2302      	movs	r3, #2
 8002d8a:	9300      	str	r3, [sp, #0]
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	226e      	movs	r2, #110	; 0x6e
 8002d90:	210a      	movs	r1, #10
 8002d92:	4811      	ldr	r0, [pc, #68]	; (8002dd8 <FuncMenu_DrawSignalMenu+0x30c>)
 8002d94:	f00a fb6a 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, WHITE, 2, BLACK);
 8002d98:	2300      	movs	r3, #0
 8002d9a:	9301      	str	r3, [sp, #4]
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	9300      	str	r3, [sp, #0]
 8002da0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002da4:	2282      	movs	r2, #130	; 0x82
 8002da6:	210a      	movs	r1, #10
 8002da8:	480c      	ldr	r0, [pc, #48]	; (8002ddc <FuncMenu_DrawSignalMenu+0x310>)
 8002daa:	f00a fb5f 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, BLACK, 2, WHITE);
 8002dae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002db2:	9301      	str	r3, [sp, #4]
 8002db4:	2302      	movs	r3, #2
 8002db6:	9300      	str	r3, [sp, #0]
 8002db8:	2300      	movs	r3, #0
 8002dba:	2296      	movs	r2, #150	; 0x96
 8002dbc:	210a      	movs	r1, #10
 8002dbe:	4808      	ldr	r0, [pc, #32]	; (8002de0 <FuncMenu_DrawSignalMenu+0x314>)
 8002dc0:	f00a fb54 	bl	800d46c <ILI9341_Draw_Text>
				break;
 8002dc4:	e051      	b.n	8002e6a <FuncMenu_DrawSignalMenu+0x39e>
 8002dc6:	bf00      	nop
 8002dc8:	08010d28 	.word	0x08010d28
 8002dcc:	08010d38 	.word	0x08010d38
 8002dd0:	08010d40 	.word	0x08010d40
 8002dd4:	08010d4c 	.word	0x08010d4c
 8002dd8:	08010d54 	.word	0x08010d54
 8002ddc:	08010d60 	.word	0x08010d60
 8002de0:	08010d6c 	.word	0x08010d6c
			case IMPULSE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, BLACK, 2, WHITE);
 8002de4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002de8:	9301      	str	r3, [sp, #4]
 8002dea:	2302      	movs	r3, #2
 8002dec:	9300      	str	r3, [sp, #0]
 8002dee:	2300      	movs	r3, #0
 8002df0:	2232      	movs	r2, #50	; 0x32
 8002df2:	210a      	movs	r1, #10
 8002df4:	481f      	ldr	r0, [pc, #124]	; (8002e74 <FuncMenu_DrawSignalMenu+0x3a8>)
 8002df6:	f00a fb39 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, BLACK, 2, WHITE);
 8002dfa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002dfe:	9301      	str	r3, [sp, #4]
 8002e00:	2302      	movs	r3, #2
 8002e02:	9300      	str	r3, [sp, #0]
 8002e04:	2300      	movs	r3, #0
 8002e06:	2246      	movs	r2, #70	; 0x46
 8002e08:	210a      	movs	r1, #10
 8002e0a:	481b      	ldr	r0, [pc, #108]	; (8002e78 <FuncMenu_DrawSignalMenu+0x3ac>)
 8002e0c:	f00a fb2e 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, BLACK, 2, WHITE);
 8002e10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e14:	9301      	str	r3, [sp, #4]
 8002e16:	2302      	movs	r3, #2
 8002e18:	9300      	str	r3, [sp, #0]
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	225a      	movs	r2, #90	; 0x5a
 8002e1e:	210a      	movs	r1, #10
 8002e20:	4816      	ldr	r0, [pc, #88]	; (8002e7c <FuncMenu_DrawSignalMenu+0x3b0>)
 8002e22:	f00a fb23 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, BLACK, 2, WHITE);
 8002e26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e2a:	9301      	str	r3, [sp, #4]
 8002e2c:	2302      	movs	r3, #2
 8002e2e:	9300      	str	r3, [sp, #0]
 8002e30:	2300      	movs	r3, #0
 8002e32:	226e      	movs	r2, #110	; 0x6e
 8002e34:	210a      	movs	r1, #10
 8002e36:	4812      	ldr	r0, [pc, #72]	; (8002e80 <FuncMenu_DrawSignalMenu+0x3b4>)
 8002e38:	f00a fb18 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, BLACK, 2, WHITE);
 8002e3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e40:	9301      	str	r3, [sp, #4]
 8002e42:	2302      	movs	r3, #2
 8002e44:	9300      	str	r3, [sp, #0]
 8002e46:	2300      	movs	r3, #0
 8002e48:	2282      	movs	r2, #130	; 0x82
 8002e4a:	210a      	movs	r1, #10
 8002e4c:	480d      	ldr	r0, [pc, #52]	; (8002e84 <FuncMenu_DrawSignalMenu+0x3b8>)
 8002e4e:	f00a fb0d 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, WHITE, 2, BLACK);
 8002e52:	2300      	movs	r3, #0
 8002e54:	9301      	str	r3, [sp, #4]
 8002e56:	2302      	movs	r3, #2
 8002e58:	9300      	str	r3, [sp, #0]
 8002e5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e5e:	2296      	movs	r2, #150	; 0x96
 8002e60:	210a      	movs	r1, #10
 8002e62:	4809      	ldr	r0, [pc, #36]	; (8002e88 <FuncMenu_DrawSignalMenu+0x3bc>)
 8002e64:	f00a fb02 	bl	800d46c <ILI9341_Draw_Text>
				break;
 8002e68:	bf00      	nop

		}
	}


}
 8002e6a:	bf00      	nop
 8002e6c:	3708      	adds	r7, #8
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	08010d38 	.word	0x08010d38
 8002e78:	08010d40 	.word	0x08010d40
 8002e7c:	08010d4c 	.word	0x08010d4c
 8002e80:	08010d54 	.word	0x08010d54
 8002e84:	08010d60 	.word	0x08010d60
 8002e88:	08010d6c 	.word	0x08010d6c

08002e8c <FuncMenu_DrawSyncMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawSyncMenu()
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FUNC->SYNC", 	10, 10, WHITE, 2, BLACK);
 8002e92:	2300      	movs	r3, #0
 8002e94:	9301      	str	r3, [sp, #4]
 8002e96:	2302      	movs	r3, #2
 8002e98:	9300      	str	r3, [sp, #0]
 8002e9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e9e:	220a      	movs	r2, #10
 8002ea0:	210a      	movs	r1, #10
 8002ea2:	48b9      	ldr	r0, [pc, #740]	; (8003188 <FuncMenu_DrawSyncMenu+0x2fc>)
 8002ea4:	f00a fae2 	bl	800d46c <ILI9341_Draw_Text>
	//FunctionProfile_t *func_profileTmp = FuncO_GetSyncFPresetObject();
	FunctionProfile_t *func_profileTmp = SM_GetOutputChannel(SYNC_CHANNEL)->func_profile;
 8002ea8:	2001      	movs	r0, #1
 8002eaa:	f002 f8cf 	bl	800504c <SM_GetOutputChannel>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8002eb4:	607b      	str	r3, [r7, #4]
	if(func_profileTmp)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	f000 81b6 	beq.w	800322a <FuncMenu_DrawSyncMenu+0x39e>
	{
		switch(func_profileTmp->func)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	2b05      	cmp	r3, #5
 8002ec4:	f200 81b1 	bhi.w	800322a <FuncMenu_DrawSyncMenu+0x39e>
 8002ec8:	a201      	add	r2, pc, #4	; (adr r2, 8002ed0 <FuncMenu_DrawSyncMenu+0x44>)
 8002eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ece:	bf00      	nop
 8002ed0:	08002ee9 	.word	0x08002ee9
 8002ed4:	08002f6f 	.word	0x08002f6f
 8002ed8:	08002ff5 	.word	0x08002ff5
 8002edc:	0800307b 	.word	0x0800307b
 8002ee0:	08003101 	.word	0x08003101
 8002ee4:	080031a5 	.word	0x080031a5
		{
			case SINE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, WHITE, 2, BLACK);
 8002ee8:	2300      	movs	r3, #0
 8002eea:	9301      	str	r3, [sp, #4]
 8002eec:	2302      	movs	r3, #2
 8002eee:	9300      	str	r3, [sp, #0]
 8002ef0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ef4:	2232      	movs	r2, #50	; 0x32
 8002ef6:	210a      	movs	r1, #10
 8002ef8:	48a4      	ldr	r0, [pc, #656]	; (800318c <FuncMenu_DrawSyncMenu+0x300>)
 8002efa:	f00a fab7 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, BLACK, 2, WHITE);
 8002efe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f02:	9301      	str	r3, [sp, #4]
 8002f04:	2302      	movs	r3, #2
 8002f06:	9300      	str	r3, [sp, #0]
 8002f08:	2300      	movs	r3, #0
 8002f0a:	2246      	movs	r2, #70	; 0x46
 8002f0c:	210a      	movs	r1, #10
 8002f0e:	48a0      	ldr	r0, [pc, #640]	; (8003190 <FuncMenu_DrawSyncMenu+0x304>)
 8002f10:	f00a faac 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, BLACK, 2, WHITE);
 8002f14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f18:	9301      	str	r3, [sp, #4]
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	9300      	str	r3, [sp, #0]
 8002f1e:	2300      	movs	r3, #0
 8002f20:	225a      	movs	r2, #90	; 0x5a
 8002f22:	210a      	movs	r1, #10
 8002f24:	489b      	ldr	r0, [pc, #620]	; (8003194 <FuncMenu_DrawSyncMenu+0x308>)
 8002f26:	f00a faa1 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, BLACK, 2, WHITE);
 8002f2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f2e:	9301      	str	r3, [sp, #4]
 8002f30:	2302      	movs	r3, #2
 8002f32:	9300      	str	r3, [sp, #0]
 8002f34:	2300      	movs	r3, #0
 8002f36:	226e      	movs	r2, #110	; 0x6e
 8002f38:	210a      	movs	r1, #10
 8002f3a:	4897      	ldr	r0, [pc, #604]	; (8003198 <FuncMenu_DrawSyncMenu+0x30c>)
 8002f3c:	f00a fa96 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, BLACK, 2, WHITE);
 8002f40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f44:	9301      	str	r3, [sp, #4]
 8002f46:	2302      	movs	r3, #2
 8002f48:	9300      	str	r3, [sp, #0]
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	2282      	movs	r2, #130	; 0x82
 8002f4e:	210a      	movs	r1, #10
 8002f50:	4892      	ldr	r0, [pc, #584]	; (800319c <FuncMenu_DrawSyncMenu+0x310>)
 8002f52:	f00a fa8b 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, BLACK, 2, WHITE);
 8002f56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f5a:	9301      	str	r3, [sp, #4]
 8002f5c:	2302      	movs	r3, #2
 8002f5e:	9300      	str	r3, [sp, #0]
 8002f60:	2300      	movs	r3, #0
 8002f62:	2296      	movs	r2, #150	; 0x96
 8002f64:	210a      	movs	r1, #10
 8002f66:	488e      	ldr	r0, [pc, #568]	; (80031a0 <FuncMenu_DrawSyncMenu+0x314>)
 8002f68:	f00a fa80 	bl	800d46c <ILI9341_Draw_Text>
				break;
 8002f6c:	e15d      	b.n	800322a <FuncMenu_DrawSyncMenu+0x39e>
			case SQUARE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, BLACK, 2, WHITE);
 8002f6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f72:	9301      	str	r3, [sp, #4]
 8002f74:	2302      	movs	r3, #2
 8002f76:	9300      	str	r3, [sp, #0]
 8002f78:	2300      	movs	r3, #0
 8002f7a:	2232      	movs	r2, #50	; 0x32
 8002f7c:	210a      	movs	r1, #10
 8002f7e:	4883      	ldr	r0, [pc, #524]	; (800318c <FuncMenu_DrawSyncMenu+0x300>)
 8002f80:	f00a fa74 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, WHITE, 2, BLACK);
 8002f84:	2300      	movs	r3, #0
 8002f86:	9301      	str	r3, [sp, #4]
 8002f88:	2302      	movs	r3, #2
 8002f8a:	9300      	str	r3, [sp, #0]
 8002f8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f90:	2246      	movs	r2, #70	; 0x46
 8002f92:	210a      	movs	r1, #10
 8002f94:	487e      	ldr	r0, [pc, #504]	; (8003190 <FuncMenu_DrawSyncMenu+0x304>)
 8002f96:	f00a fa69 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, BLACK, 2, WHITE);
 8002f9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f9e:	9301      	str	r3, [sp, #4]
 8002fa0:	2302      	movs	r3, #2
 8002fa2:	9300      	str	r3, [sp, #0]
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	225a      	movs	r2, #90	; 0x5a
 8002fa8:	210a      	movs	r1, #10
 8002faa:	487a      	ldr	r0, [pc, #488]	; (8003194 <FuncMenu_DrawSyncMenu+0x308>)
 8002fac:	f00a fa5e 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, BLACK, 2, WHITE);
 8002fb0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002fb4:	9301      	str	r3, [sp, #4]
 8002fb6:	2302      	movs	r3, #2
 8002fb8:	9300      	str	r3, [sp, #0]
 8002fba:	2300      	movs	r3, #0
 8002fbc:	226e      	movs	r2, #110	; 0x6e
 8002fbe:	210a      	movs	r1, #10
 8002fc0:	4875      	ldr	r0, [pc, #468]	; (8003198 <FuncMenu_DrawSyncMenu+0x30c>)
 8002fc2:	f00a fa53 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, BLACK, 2, WHITE);
 8002fc6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002fca:	9301      	str	r3, [sp, #4]
 8002fcc:	2302      	movs	r3, #2
 8002fce:	9300      	str	r3, [sp, #0]
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	2282      	movs	r2, #130	; 0x82
 8002fd4:	210a      	movs	r1, #10
 8002fd6:	4871      	ldr	r0, [pc, #452]	; (800319c <FuncMenu_DrawSyncMenu+0x310>)
 8002fd8:	f00a fa48 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, BLACK, 2, WHITE);
 8002fdc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002fe0:	9301      	str	r3, [sp, #4]
 8002fe2:	2302      	movs	r3, #2
 8002fe4:	9300      	str	r3, [sp, #0]
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	2296      	movs	r2, #150	; 0x96
 8002fea:	210a      	movs	r1, #10
 8002fec:	486c      	ldr	r0, [pc, #432]	; (80031a0 <FuncMenu_DrawSyncMenu+0x314>)
 8002fee:	f00a fa3d 	bl	800d46c <ILI9341_Draw_Text>
				break;
 8002ff2:	e11a      	b.n	800322a <FuncMenu_DrawSyncMenu+0x39e>
			case SAW_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, BLACK, 2, WHITE);
 8002ff4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ff8:	9301      	str	r3, [sp, #4]
 8002ffa:	2302      	movs	r3, #2
 8002ffc:	9300      	str	r3, [sp, #0]
 8002ffe:	2300      	movs	r3, #0
 8003000:	2232      	movs	r2, #50	; 0x32
 8003002:	210a      	movs	r1, #10
 8003004:	4861      	ldr	r0, [pc, #388]	; (800318c <FuncMenu_DrawSyncMenu+0x300>)
 8003006:	f00a fa31 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, BLACK, 2, WHITE);
 800300a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800300e:	9301      	str	r3, [sp, #4]
 8003010:	2302      	movs	r3, #2
 8003012:	9300      	str	r3, [sp, #0]
 8003014:	2300      	movs	r3, #0
 8003016:	2246      	movs	r2, #70	; 0x46
 8003018:	210a      	movs	r1, #10
 800301a:	485d      	ldr	r0, [pc, #372]	; (8003190 <FuncMenu_DrawSyncMenu+0x304>)
 800301c:	f00a fa26 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, WHITE, 2, BLACK);
 8003020:	2300      	movs	r3, #0
 8003022:	9301      	str	r3, [sp, #4]
 8003024:	2302      	movs	r3, #2
 8003026:	9300      	str	r3, [sp, #0]
 8003028:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800302c:	225a      	movs	r2, #90	; 0x5a
 800302e:	210a      	movs	r1, #10
 8003030:	4858      	ldr	r0, [pc, #352]	; (8003194 <FuncMenu_DrawSyncMenu+0x308>)
 8003032:	f00a fa1b 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, BLACK, 2, WHITE);
 8003036:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800303a:	9301      	str	r3, [sp, #4]
 800303c:	2302      	movs	r3, #2
 800303e:	9300      	str	r3, [sp, #0]
 8003040:	2300      	movs	r3, #0
 8003042:	226e      	movs	r2, #110	; 0x6e
 8003044:	210a      	movs	r1, #10
 8003046:	4854      	ldr	r0, [pc, #336]	; (8003198 <FuncMenu_DrawSyncMenu+0x30c>)
 8003048:	f00a fa10 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, BLACK, 2, WHITE);
 800304c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003050:	9301      	str	r3, [sp, #4]
 8003052:	2302      	movs	r3, #2
 8003054:	9300      	str	r3, [sp, #0]
 8003056:	2300      	movs	r3, #0
 8003058:	2282      	movs	r2, #130	; 0x82
 800305a:	210a      	movs	r1, #10
 800305c:	484f      	ldr	r0, [pc, #316]	; (800319c <FuncMenu_DrawSyncMenu+0x310>)
 800305e:	f00a fa05 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, BLACK, 2, WHITE);
 8003062:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003066:	9301      	str	r3, [sp, #4]
 8003068:	2302      	movs	r3, #2
 800306a:	9300      	str	r3, [sp, #0]
 800306c:	2300      	movs	r3, #0
 800306e:	2296      	movs	r2, #150	; 0x96
 8003070:	210a      	movs	r1, #10
 8003072:	484b      	ldr	r0, [pc, #300]	; (80031a0 <FuncMenu_DrawSyncMenu+0x314>)
 8003074:	f00a f9fa 	bl	800d46c <ILI9341_Draw_Text>
				break;
 8003078:	e0d7      	b.n	800322a <FuncMenu_DrawSyncMenu+0x39e>
			case REV_SAW_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, BLACK, 2, WHITE);
 800307a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800307e:	9301      	str	r3, [sp, #4]
 8003080:	2302      	movs	r3, #2
 8003082:	9300      	str	r3, [sp, #0]
 8003084:	2300      	movs	r3, #0
 8003086:	2232      	movs	r2, #50	; 0x32
 8003088:	210a      	movs	r1, #10
 800308a:	4840      	ldr	r0, [pc, #256]	; (800318c <FuncMenu_DrawSyncMenu+0x300>)
 800308c:	f00a f9ee 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, BLACK, 2, WHITE);
 8003090:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003094:	9301      	str	r3, [sp, #4]
 8003096:	2302      	movs	r3, #2
 8003098:	9300      	str	r3, [sp, #0]
 800309a:	2300      	movs	r3, #0
 800309c:	2246      	movs	r2, #70	; 0x46
 800309e:	210a      	movs	r1, #10
 80030a0:	483b      	ldr	r0, [pc, #236]	; (8003190 <FuncMenu_DrawSyncMenu+0x304>)
 80030a2:	f00a f9e3 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, BLACK, 2, WHITE);
 80030a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80030aa:	9301      	str	r3, [sp, #4]
 80030ac:	2302      	movs	r3, #2
 80030ae:	9300      	str	r3, [sp, #0]
 80030b0:	2300      	movs	r3, #0
 80030b2:	225a      	movs	r2, #90	; 0x5a
 80030b4:	210a      	movs	r1, #10
 80030b6:	4837      	ldr	r0, [pc, #220]	; (8003194 <FuncMenu_DrawSyncMenu+0x308>)
 80030b8:	f00a f9d8 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, WHITE, 2, BLACK);
 80030bc:	2300      	movs	r3, #0
 80030be:	9301      	str	r3, [sp, #4]
 80030c0:	2302      	movs	r3, #2
 80030c2:	9300      	str	r3, [sp, #0]
 80030c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80030c8:	226e      	movs	r2, #110	; 0x6e
 80030ca:	210a      	movs	r1, #10
 80030cc:	4832      	ldr	r0, [pc, #200]	; (8003198 <FuncMenu_DrawSyncMenu+0x30c>)
 80030ce:	f00a f9cd 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, BLACK, 2, WHITE);
 80030d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80030d6:	9301      	str	r3, [sp, #4]
 80030d8:	2302      	movs	r3, #2
 80030da:	9300      	str	r3, [sp, #0]
 80030dc:	2300      	movs	r3, #0
 80030de:	2282      	movs	r2, #130	; 0x82
 80030e0:	210a      	movs	r1, #10
 80030e2:	482e      	ldr	r0, [pc, #184]	; (800319c <FuncMenu_DrawSyncMenu+0x310>)
 80030e4:	f00a f9c2 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, BLACK, 2, WHITE);
 80030e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80030ec:	9301      	str	r3, [sp, #4]
 80030ee:	2302      	movs	r3, #2
 80030f0:	9300      	str	r3, [sp, #0]
 80030f2:	2300      	movs	r3, #0
 80030f4:	2296      	movs	r2, #150	; 0x96
 80030f6:	210a      	movs	r1, #10
 80030f8:	4829      	ldr	r0, [pc, #164]	; (80031a0 <FuncMenu_DrawSyncMenu+0x314>)
 80030fa:	f00a f9b7 	bl	800d46c <ILI9341_Draw_Text>
				break;
 80030fe:	e094      	b.n	800322a <FuncMenu_DrawSyncMenu+0x39e>
			case TRIANGLE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, BLACK, 2, WHITE);
 8003100:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003104:	9301      	str	r3, [sp, #4]
 8003106:	2302      	movs	r3, #2
 8003108:	9300      	str	r3, [sp, #0]
 800310a:	2300      	movs	r3, #0
 800310c:	2232      	movs	r2, #50	; 0x32
 800310e:	210a      	movs	r1, #10
 8003110:	481e      	ldr	r0, [pc, #120]	; (800318c <FuncMenu_DrawSyncMenu+0x300>)
 8003112:	f00a f9ab 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, BLACK, 2, WHITE);
 8003116:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800311a:	9301      	str	r3, [sp, #4]
 800311c:	2302      	movs	r3, #2
 800311e:	9300      	str	r3, [sp, #0]
 8003120:	2300      	movs	r3, #0
 8003122:	2246      	movs	r2, #70	; 0x46
 8003124:	210a      	movs	r1, #10
 8003126:	481a      	ldr	r0, [pc, #104]	; (8003190 <FuncMenu_DrawSyncMenu+0x304>)
 8003128:	f00a f9a0 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, BLACK, 2, WHITE);
 800312c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003130:	9301      	str	r3, [sp, #4]
 8003132:	2302      	movs	r3, #2
 8003134:	9300      	str	r3, [sp, #0]
 8003136:	2300      	movs	r3, #0
 8003138:	225a      	movs	r2, #90	; 0x5a
 800313a:	210a      	movs	r1, #10
 800313c:	4815      	ldr	r0, [pc, #84]	; (8003194 <FuncMenu_DrawSyncMenu+0x308>)
 800313e:	f00a f995 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, BLACK, 2, WHITE);
 8003142:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003146:	9301      	str	r3, [sp, #4]
 8003148:	2302      	movs	r3, #2
 800314a:	9300      	str	r3, [sp, #0]
 800314c:	2300      	movs	r3, #0
 800314e:	226e      	movs	r2, #110	; 0x6e
 8003150:	210a      	movs	r1, #10
 8003152:	4811      	ldr	r0, [pc, #68]	; (8003198 <FuncMenu_DrawSyncMenu+0x30c>)
 8003154:	f00a f98a 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, WHITE, 2, BLACK);
 8003158:	2300      	movs	r3, #0
 800315a:	9301      	str	r3, [sp, #4]
 800315c:	2302      	movs	r3, #2
 800315e:	9300      	str	r3, [sp, #0]
 8003160:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003164:	2282      	movs	r2, #130	; 0x82
 8003166:	210a      	movs	r1, #10
 8003168:	480c      	ldr	r0, [pc, #48]	; (800319c <FuncMenu_DrawSyncMenu+0x310>)
 800316a:	f00a f97f 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, BLACK, 2, WHITE);
 800316e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003172:	9301      	str	r3, [sp, #4]
 8003174:	2302      	movs	r3, #2
 8003176:	9300      	str	r3, [sp, #0]
 8003178:	2300      	movs	r3, #0
 800317a:	2296      	movs	r2, #150	; 0x96
 800317c:	210a      	movs	r1, #10
 800317e:	4808      	ldr	r0, [pc, #32]	; (80031a0 <FuncMenu_DrawSyncMenu+0x314>)
 8003180:	f00a f974 	bl	800d46c <ILI9341_Draw_Text>
				break;
 8003184:	e051      	b.n	800322a <FuncMenu_DrawSyncMenu+0x39e>
 8003186:	bf00      	nop
 8003188:	08010d74 	.word	0x08010d74
 800318c:	08010d38 	.word	0x08010d38
 8003190:	08010d40 	.word	0x08010d40
 8003194:	08010d4c 	.word	0x08010d4c
 8003198:	08010d54 	.word	0x08010d54
 800319c:	08010d60 	.word	0x08010d60
 80031a0:	08010d6c 	.word	0x08010d6c
			case IMPULSE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, BLACK, 2, WHITE);
 80031a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80031a8:	9301      	str	r3, [sp, #4]
 80031aa:	2302      	movs	r3, #2
 80031ac:	9300      	str	r3, [sp, #0]
 80031ae:	2300      	movs	r3, #0
 80031b0:	2232      	movs	r2, #50	; 0x32
 80031b2:	210a      	movs	r1, #10
 80031b4:	481f      	ldr	r0, [pc, #124]	; (8003234 <FuncMenu_DrawSyncMenu+0x3a8>)
 80031b6:	f00a f959 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, BLACK, 2, WHITE);
 80031ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80031be:	9301      	str	r3, [sp, #4]
 80031c0:	2302      	movs	r3, #2
 80031c2:	9300      	str	r3, [sp, #0]
 80031c4:	2300      	movs	r3, #0
 80031c6:	2246      	movs	r2, #70	; 0x46
 80031c8:	210a      	movs	r1, #10
 80031ca:	481b      	ldr	r0, [pc, #108]	; (8003238 <FuncMenu_DrawSyncMenu+0x3ac>)
 80031cc:	f00a f94e 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, BLACK, 2, WHITE);
 80031d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80031d4:	9301      	str	r3, [sp, #4]
 80031d6:	2302      	movs	r3, #2
 80031d8:	9300      	str	r3, [sp, #0]
 80031da:	2300      	movs	r3, #0
 80031dc:	225a      	movs	r2, #90	; 0x5a
 80031de:	210a      	movs	r1, #10
 80031e0:	4816      	ldr	r0, [pc, #88]	; (800323c <FuncMenu_DrawSyncMenu+0x3b0>)
 80031e2:	f00a f943 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, BLACK, 2, WHITE);
 80031e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80031ea:	9301      	str	r3, [sp, #4]
 80031ec:	2302      	movs	r3, #2
 80031ee:	9300      	str	r3, [sp, #0]
 80031f0:	2300      	movs	r3, #0
 80031f2:	226e      	movs	r2, #110	; 0x6e
 80031f4:	210a      	movs	r1, #10
 80031f6:	4812      	ldr	r0, [pc, #72]	; (8003240 <FuncMenu_DrawSyncMenu+0x3b4>)
 80031f8:	f00a f938 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, BLACK, 2, WHITE);
 80031fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003200:	9301      	str	r3, [sp, #4]
 8003202:	2302      	movs	r3, #2
 8003204:	9300      	str	r3, [sp, #0]
 8003206:	2300      	movs	r3, #0
 8003208:	2282      	movs	r2, #130	; 0x82
 800320a:	210a      	movs	r1, #10
 800320c:	480d      	ldr	r0, [pc, #52]	; (8003244 <FuncMenu_DrawSyncMenu+0x3b8>)
 800320e:	f00a f92d 	bl	800d46c <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, WHITE, 2, BLACK);
 8003212:	2300      	movs	r3, #0
 8003214:	9301      	str	r3, [sp, #4]
 8003216:	2302      	movs	r3, #2
 8003218:	9300      	str	r3, [sp, #0]
 800321a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800321e:	2296      	movs	r2, #150	; 0x96
 8003220:	210a      	movs	r1, #10
 8003222:	4809      	ldr	r0, [pc, #36]	; (8003248 <FuncMenu_DrawSyncMenu+0x3bc>)
 8003224:	f00a f922 	bl	800d46c <ILI9341_Draw_Text>
				break;
 8003228:	bf00      	nop

		}
	}

}
 800322a:	bf00      	nop
 800322c:	3708      	adds	r7, #8
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	08010d38 	.word	0x08010d38
 8003238:	08010d40 	.word	0x08010d40
 800323c:	08010d4c 	.word	0x08010d4c
 8003240:	08010d54 	.word	0x08010d54
 8003244:	08010d60 	.word	0x08010d60
 8003248:	08010d6c 	.word	0x08010d6c

0800324c <GainMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawMenu(eGainMenu_Status pMenu)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b082      	sub	sp, #8
 8003250:	af00      	add	r7, sp, #0
 8003252:	4603      	mov	r3, r0
 8003254:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8003256:	79fb      	ldrb	r3, [r7, #7]
 8003258:	2b02      	cmp	r3, #2
 800325a:	d007      	beq.n	800326c <GainMenu_DrawMenu+0x20>
 800325c:	2b03      	cmp	r3, #3
 800325e:	d008      	beq.n	8003272 <GainMenu_DrawMenu+0x26>
 8003260:	2b01      	cmp	r3, #1
 8003262:	d000      	beq.n	8003266 <GainMenu_DrawMenu+0x1a>
		case ENABLE_GAIN_SYNC_MENU:
			GainMenu_DrawSyncMenu();
			break;

		default:
			break;
 8003264:	e008      	b.n	8003278 <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawMainMenu();
 8003266:	f000 f80b 	bl	8003280 <GainMenu_DrawMainMenu>
			break;
 800326a:	e005      	b.n	8003278 <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawSignalMenu();
 800326c:	f000 f850 	bl	8003310 <GainMenu_DrawSignalMenu>
			break;
 8003270:	e002      	b.n	8003278 <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawSyncMenu();
 8003272:	f000 f863 	bl	800333c <GainMenu_DrawSyncMenu>
			break;
 8003276:	bf00      	nop

	}
}
 8003278:	bf00      	nop
 800327a:	3708      	adds	r7, #8
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <GainMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawMainMenu()
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b082      	sub	sp, #8
 8003284:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("OUT->GAIN", 	10, 10, WHITE, 2, BLACK);
 8003286:	2300      	movs	r3, #0
 8003288:	9301      	str	r3, [sp, #4]
 800328a:	2302      	movs	r3, #2
 800328c:	9300      	str	r3, [sp, #0]
 800328e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003292:	220a      	movs	r2, #10
 8003294:	210a      	movs	r1, #10
 8003296:	481a      	ldr	r0, [pc, #104]	; (8003300 <GainMenu_DrawMainMenu+0x80>)
 8003298:	f00a f8e8 	bl	800d46c <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 800329c:	f7fd fe02 	bl	8000ea4 <DM_DisplayFormattedOutput>

	// coloured menu btn labels
	ILI9341_Draw_Text("SIGNAL", 5, 210, BLACK, 2, DARKCYAN);
 80032a0:	f240 33ef 	movw	r3, #1007	; 0x3ef
 80032a4:	9301      	str	r3, [sp, #4]
 80032a6:	2302      	movs	r3, #2
 80032a8:	9300      	str	r3, [sp, #0]
 80032aa:	2300      	movs	r3, #0
 80032ac:	22d2      	movs	r2, #210	; 0xd2
 80032ae:	2105      	movs	r1, #5
 80032b0:	4814      	ldr	r0, [pc, #80]	; (8003304 <GainMenu_DrawMainMenu+0x84>)
 80032b2:	f00a f8db 	bl	800d46c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SYNC",97, 210, BLACK, 2, DARKGREEN);
 80032b6:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 80032ba:	9301      	str	r3, [sp, #4]
 80032bc:	2302      	movs	r3, #2
 80032be:	9300      	str	r3, [sp, #0]
 80032c0:	2300      	movs	r3, #0
 80032c2:	22d2      	movs	r2, #210	; 0xd2
 80032c4:	2161      	movs	r1, #97	; 0x61
 80032c6:	4810      	ldr	r0, [pc, #64]	; (8003308 <GainMenu_DrawMainMenu+0x88>)
 80032c8:	f00a f8d0 	bl	800d46c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 175, 210, BLACK, 2, YELLOW);
 80032cc:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80032d0:	9301      	str	r3, [sp, #4]
 80032d2:	2302      	movs	r3, #2
 80032d4:	9300      	str	r3, [sp, #0]
 80032d6:	2300      	movs	r3, #0
 80032d8:	22d2      	movs	r2, #210	; 0xd2
 80032da:	21af      	movs	r1, #175	; 0xaf
 80032dc:	480b      	ldr	r0, [pc, #44]	; (800330c <GainMenu_DrawMainMenu+0x8c>)
 80032de:	f00a f8c5 	bl	800d46c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 260, 210, BLACK, 2, RED);
 80032e2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80032e6:	9301      	str	r3, [sp, #4]
 80032e8:	2302      	movs	r3, #2
 80032ea:	9300      	str	r3, [sp, #0]
 80032ec:	2300      	movs	r3, #0
 80032ee:	22d2      	movs	r2, #210	; 0xd2
 80032f0:	f44f 7182 	mov.w	r1, #260	; 0x104
 80032f4:	4805      	ldr	r0, [pc, #20]	; (800330c <GainMenu_DrawMainMenu+0x8c>)
 80032f6:	f00a f8b9 	bl	800d46c <ILI9341_Draw_Text>
}
 80032fa:	bf00      	nop
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	08010d84 	.word	0x08010d84
 8003304:	08010d90 	.word	0x08010d90
 8003308:	08010d98 	.word	0x08010d98
 800330c:	08010da0 	.word	0x08010da0

08003310 <GainMenu_DrawSignalMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawSignalMenu()
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->GAIN->SIG", 10, 10, WHITE, 2, BLACK);
 8003316:	2300      	movs	r3, #0
 8003318:	9301      	str	r3, [sp, #4]
 800331a:	2302      	movs	r3, #2
 800331c:	9300      	str	r3, [sp, #0]
 800331e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003322:	220a      	movs	r2, #10
 8003324:	210a      	movs	r1, #10
 8003326:	4804      	ldr	r0, [pc, #16]	; (8003338 <GainMenu_DrawSignalMenu+0x28>)
 8003328:	f00a f8a0 	bl	800d46c <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 800332c:	f7fd fdba 	bl	8000ea4 <DM_DisplayFormattedOutput>
}
 8003330:	bf00      	nop
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	08010da8 	.word	0x08010da8

0800333c <GainMenu_DrawSyncMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawSyncMenu()
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->GAIN->SYNC", 10, 10, WHITE, 2, BLACK);
 8003342:	2300      	movs	r3, #0
 8003344:	9301      	str	r3, [sp, #4]
 8003346:	2302      	movs	r3, #2
 8003348:	9300      	str	r3, [sp, #0]
 800334a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800334e:	220a      	movs	r2, #10
 8003350:	210a      	movs	r1, #10
 8003352:	4804      	ldr	r0, [pc, #16]	; (8003364 <GainMenu_DrawSyncMenu+0x28>)
 8003354:	f00a f88a 	bl	800d46c <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003358:	f7fd fda4 	bl	8000ea4 <DM_DisplayFormattedOutput>
}
 800335c:	bf00      	nop
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	08010db8 	.word	0x08010db8

08003368 <ToplevelMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawMenu(eToplevelMenu_Status pMenu)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
 800336e:	4603      	mov	r3, r0
 8003370:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8003372:	79fb      	ldrb	r3, [r7, #7]
 8003374:	2b02      	cmp	r3, #2
 8003376:	d007      	beq.n	8003388 <ToplevelMenu_DrawMenu+0x20>
 8003378:	2b03      	cmp	r3, #3
 800337a:	d008      	beq.n	800338e <ToplevelMenu_DrawMenu+0x26>
 800337c:	2b01      	cmp	r3, #1
 800337e:	d000      	beq.n	8003382 <ToplevelMenu_DrawMenu+0x1a>
		case ENABLE_TOPLEVEL_INPUT_MENU:
			ToplevelMenu_DrawInputMenu();
			break;

		default:
			break;
 8003380:	e008      	b.n	8003394 <ToplevelMenu_DrawMenu+0x2c>
			ToplevelMenu_DrawMainMenu();
 8003382:	f000 f80b 	bl	800339c <ToplevelMenu_DrawMainMenu>
			break;
 8003386:	e005      	b.n	8003394 <ToplevelMenu_DrawMenu+0x2c>
			ToplevelMenu_DrawOutputMenu();
 8003388:	f000 f848 	bl	800341c <ToplevelMenu_DrawOutputMenu>
			break;
 800338c:	e002      	b.n	8003394 <ToplevelMenu_DrawMenu+0x2c>
			ToplevelMenu_DrawInputMenu();
 800338e:	f000 f88f 	bl	80034b0 <ToplevelMenu_DrawInputMenu>
			break;
 8003392:	bf00      	nop

	}
}
 8003394:	bf00      	nop
 8003396:	3708      	adds	r7, #8
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}

0800339c <ToplevelMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawMainMenu()
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b082      	sub	sp, #8
 80033a0:	af02      	add	r7, sp, #8
	// Top Level screen
	#ifdef SWV_DEBUG_ENABLED
		  printf("Drawing Main screen\n");
 80033a2:	481a      	ldr	r0, [pc, #104]	; (800340c <ToplevelMenu_DrawMainMenu+0x70>)
 80033a4:	f00b fba6 	bl	800eaf4 <puts>
	#endif

	// Main screen
	//ILI9341_Draw_Text("SIGNAL GENERATOR", 	10, 10, WHITE, 2, BLACK);

	DM_DisplayFormattedOutput();
 80033a8:	f7fd fd7c 	bl	8000ea4 <DM_DisplayFormattedOutput>

	ILI9341_Draw_Text("OUTPUT", 6, 210, BLACK, 2, DARKCYAN);
 80033ac:	f240 33ef 	movw	r3, #1007	; 0x3ef
 80033b0:	9301      	str	r3, [sp, #4]
 80033b2:	2302      	movs	r3, #2
 80033b4:	9300      	str	r3, [sp, #0]
 80033b6:	2300      	movs	r3, #0
 80033b8:	22d2      	movs	r2, #210	; 0xd2
 80033ba:	2106      	movs	r1, #6
 80033bc:	4814      	ldr	r0, [pc, #80]	; (8003410 <ToplevelMenu_DrawMainMenu+0x74>)
 80033be:	f00a f855 	bl	800d46c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("INPUT", 95, 210, BLACK, 2, DARKGREEN);
 80033c2:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 80033c6:	9301      	str	r3, [sp, #4]
 80033c8:	2302      	movs	r3, #2
 80033ca:	9300      	str	r3, [sp, #0]
 80033cc:	2300      	movs	r3, #0
 80033ce:	22d2      	movs	r2, #210	; 0xd2
 80033d0:	215f      	movs	r1, #95	; 0x5f
 80033d2:	4810      	ldr	r0, [pc, #64]	; (8003414 <ToplevelMenu_DrawMainMenu+0x78>)
 80033d4:	f00a f84a 	bl	800d46c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 175, 210, BLACK, 2, YELLOW);
 80033d8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80033dc:	9301      	str	r3, [sp, #4]
 80033de:	2302      	movs	r3, #2
 80033e0:	9300      	str	r3, [sp, #0]
 80033e2:	2300      	movs	r3, #0
 80033e4:	22d2      	movs	r2, #210	; 0xd2
 80033e6:	21af      	movs	r1, #175	; 0xaf
 80033e8:	480b      	ldr	r0, [pc, #44]	; (8003418 <ToplevelMenu_DrawMainMenu+0x7c>)
 80033ea:	f00a f83f 	bl	800d46c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 260, 210, BLACK, 2, RED);
 80033ee:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80033f2:	9301      	str	r3, [sp, #4]
 80033f4:	2302      	movs	r3, #2
 80033f6:	9300      	str	r3, [sp, #0]
 80033f8:	2300      	movs	r3, #0
 80033fa:	22d2      	movs	r2, #210	; 0xd2
 80033fc:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003400:	4805      	ldr	r0, [pc, #20]	; (8003418 <ToplevelMenu_DrawMainMenu+0x7c>)
 8003402:	f00a f833 	bl	800d46c <ILI9341_Draw_Text>


}
 8003406:	bf00      	nop
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}
 800340c:	08010dc8 	.word	0x08010dc8
 8003410:	08010ddc 	.word	0x08010ddc
 8003414:	08010de4 	.word	0x08010de4
 8003418:	08010dec 	.word	0x08010dec

0800341c <ToplevelMenu_DrawOutputMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawOutputMenu()
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b082      	sub	sp, #8
 8003420:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->", 10, 10, WHITE, 2, BLACK);
 8003422:	2300      	movs	r3, #0
 8003424:	9301      	str	r3, [sp, #4]
 8003426:	2302      	movs	r3, #2
 8003428:	9300      	str	r3, [sp, #0]
 800342a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800342e:	220a      	movs	r2, #10
 8003430:	210a      	movs	r1, #10
 8003432:	481a      	ldr	r0, [pc, #104]	; (800349c <ToplevelMenu_DrawOutputMenu+0x80>)
 8003434:	f00a f81a 	bl	800d46c <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003438:	f7fd fd34 	bl	8000ea4 <DM_DisplayFormattedOutput>

	ILI9341_Draw_Text("FUNC", 13, 210, BLACK, 2, DARKCYAN);
 800343c:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8003440:	9301      	str	r3, [sp, #4]
 8003442:	2302      	movs	r3, #2
 8003444:	9300      	str	r3, [sp, #0]
 8003446:	2300      	movs	r3, #0
 8003448:	22d2      	movs	r2, #210	; 0xd2
 800344a:	210d      	movs	r1, #13
 800344c:	4814      	ldr	r0, [pc, #80]	; (80034a0 <ToplevelMenu_DrawOutputMenu+0x84>)
 800344e:	f00a f80d 	bl	800d46c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("FREQ", 99, 210, BLACK, 2, DARKGREEN);
 8003452:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8003456:	9301      	str	r3, [sp, #4]
 8003458:	2302      	movs	r3, #2
 800345a:	9300      	str	r3, [sp, #0]
 800345c:	2300      	movs	r3, #0
 800345e:	22d2      	movs	r2, #210	; 0xd2
 8003460:	2163      	movs	r1, #99	; 0x63
 8003462:	4810      	ldr	r0, [pc, #64]	; (80034a4 <ToplevelMenu_DrawOutputMenu+0x88>)
 8003464:	f00a f802 	bl	800d46c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("GAIN", 176, 210, BLACK, 2, YELLOW);
 8003468:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800346c:	9301      	str	r3, [sp, #4]
 800346e:	2302      	movs	r3, #2
 8003470:	9300      	str	r3, [sp, #0]
 8003472:	2300      	movs	r3, #0
 8003474:	22d2      	movs	r2, #210	; 0xd2
 8003476:	21b0      	movs	r1, #176	; 0xb0
 8003478:	480b      	ldr	r0, [pc, #44]	; (80034a8 <ToplevelMenu_DrawOutputMenu+0x8c>)
 800347a:	f009 fff7 	bl	800d46c <ILI9341_Draw_Text>
	ILI9341_Draw_Text("BIAS", 259, 210, BLACK, 2, RED);
 800347e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003482:	9301      	str	r3, [sp, #4]
 8003484:	2302      	movs	r3, #2
 8003486:	9300      	str	r3, [sp, #0]
 8003488:	2300      	movs	r3, #0
 800348a:	22d2      	movs	r2, #210	; 0xd2
 800348c:	f240 1103 	movw	r1, #259	; 0x103
 8003490:	4806      	ldr	r0, [pc, #24]	; (80034ac <ToplevelMenu_DrawOutputMenu+0x90>)
 8003492:	f009 ffeb 	bl	800d46c <ILI9341_Draw_Text>
}
 8003496:	bf00      	nop
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}
 800349c:	08010df4 	.word	0x08010df4
 80034a0:	08010dfc 	.word	0x08010dfc
 80034a4:	08010e04 	.word	0x08010e04
 80034a8:	08010e0c 	.word	0x08010e0c
 80034ac:	08010e14 	.word	0x08010e14

080034b0 <ToplevelMenu_DrawInputMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawInputMenu()
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b082      	sub	sp, #8
 80034b4:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("IN->", 10, 10, WHITE, 2, BLACK);
 80034b6:	2300      	movs	r3, #0
 80034b8:	9301      	str	r3, [sp, #4]
 80034ba:	2302      	movs	r3, #2
 80034bc:	9300      	str	r3, [sp, #0]
 80034be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80034c2:	220a      	movs	r2, #10
 80034c4:	210a      	movs	r1, #10
 80034c6:	4804      	ldr	r0, [pc, #16]	; (80034d8 <ToplevelMenu_DrawInputMenu+0x28>)
 80034c8:	f009 ffd0 	bl	800d46c <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 80034cc:	f7fd fcea 	bl	8000ea4 <DM_DisplayFormattedOutput>
}
 80034d0:	bf00      	nop
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	08010e1c 	.word	0x08010e1c

080034dc <BiasMenu_getStatus>:
#include <stdio.h>

eBiasMenu_Status eNextBiasMenuStatus =	DISABLE_BIAS_MENU;

eBiasMenu_Status BiasMenu_getStatus()
{
 80034dc:	b480      	push	{r7}
 80034de:	af00      	add	r7, sp, #0
	return eNextBiasMenuStatus;
 80034e0:	4b03      	ldr	r3, [pc, #12]	; (80034f0 <BiasMenu_getStatus+0x14>)
 80034e2:	781b      	ldrb	r3, [r3, #0]
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr
 80034ee:	bf00      	nop
 80034f0:	20001f11 	.word	0x20001f11

080034f4 <BiasMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuEntryHandler()
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("BiasMenuEntryHandler Event captured\n");
 80034f8:	480b      	ldr	r0, [pc, #44]	; (8003528 <BiasMenuEntryHandler+0x34>)
 80034fa:	f00b fafb 	bl	800eaf4 <puts>
#endif

	DM_RefreshScreen();
 80034fe:	f7fd fdd9 	bl	80010b4 <DM_RefreshScreen>

	eNextBiasMenuStatus = ENABLE_BIAS_MENU;
 8003502:	4b0a      	ldr	r3, [pc, #40]	; (800352c <BiasMenuEntryHandler+0x38>)
 8003504:	2201      	movs	r2, #1
 8003506:	701a      	strb	r2, [r3, #0]

	ENCODER_TIMER->ARR = BIAS_MAX;
 8003508:	4b09      	ldr	r3, [pc, #36]	; (8003530 <BiasMenuEntryHandler+0x3c>)
 800350a:	f44f 7248 	mov.w	r2, #800	; 0x320
 800350e:	62da      	str	r2, [r3, #44]	; 0x2c
	ENCODER_TIMER->CNT = BO_GetDcBiasEncoderValue();
 8003510:	f001 f812 	bl	8004538 <BO_GetDcBiasEncoderValue>
 8003514:	4603      	mov	r3, r0
 8003516:	461a      	mov	r2, r3
 8003518:	4b05      	ldr	r3, [pc, #20]	; (8003530 <BiasMenuEntryHandler+0x3c>)
 800351a:	625a      	str	r2, [r3, #36]	; 0x24

	eNewEvent = evIdle;
 800351c:	4b05      	ldr	r3, [pc, #20]	; (8003534 <BiasMenuEntryHandler+0x40>)
 800351e:	2200      	movs	r2, #0
 8003520:	701a      	strb	r2, [r3, #0]
	return Bias_Menu_State;
 8003522:	230e      	movs	r3, #14
}
 8003524:	4618      	mov	r0, r3
 8003526:	bd80      	pop	{r7, pc}
 8003528:	08010e24 	.word	0x08010e24
 800352c:	20001f11 	.word	0x20001f11
 8003530:	40012c00 	.word	0x40012c00
 8003534:	20001f13 	.word	0x20001f13

08003538 <BiasMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuInputHandler()
{
 8003538:	b580      	push	{r7, lr}
 800353a:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("BiasMenuInputHandler Event captured\n");
 800353c:	4807      	ldr	r0, [pc, #28]	; (800355c <BiasMenuInputHandler+0x24>)
 800353e:	f00b fad9 	bl	800eaf4 <puts>
#endif

	BO_ModifyOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 8003542:	2001      	movs	r0, #1
 8003544:	f001 fd98 	bl	8005078 <SM_GetEncoderValue>
 8003548:	4603      	mov	r3, r0
 800354a:	4618      	mov	r0, r3
 800354c:	f001 f800 	bl	8004550 <BO_ModifyOutput>

	eNewEvent = evIdle;
 8003550:	4b03      	ldr	r3, [pc, #12]	; (8003560 <BiasMenuInputHandler+0x28>)
 8003552:	2200      	movs	r2, #0
 8003554:	701a      	strb	r2, [r3, #0]
	return Bias_Menu_State;
 8003556:	230e      	movs	r3, #14
}
 8003558:	4618      	mov	r0, r3
 800355a:	bd80      	pop	{r7, pc}
 800355c:	08010e48 	.word	0x08010e48
 8003560:	20001f13 	.word	0x20001f13

08003564 <BiasMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuExitHandler()
{
 8003564:	b580      	push	{r7, lr}
 8003566:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("BiasMenuExitHandler Event captured\n");
 8003568:	4808      	ldr	r0, [pc, #32]	; (800358c <BiasMenuExitHandler+0x28>)
 800356a:	f00b fac3 	bl	800eaf4 <puts>
#endif


	// disable the menu
	eNextBiasMenuStatus = DISABLE_BIAS_MENU;
 800356e:	4b08      	ldr	r3, [pc, #32]	; (8003590 <BiasMenuExitHandler+0x2c>)
 8003570:	2200      	movs	r2, #0
 8003572:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

	//ENCODER_TIMER->ARR = 1024;

	DM_RefreshScreen();
 8003574:	f7fd fd9e 	bl	80010b4 <DM_RefreshScreen>

#ifdef SWV_DEBUG_ENABLED
	  printf("returning to Idle State\n");
 8003578:	4806      	ldr	r0, [pc, #24]	; (8003594 <BiasMenuExitHandler+0x30>)
 800357a:	f00b fabb 	bl	800eaf4 <puts>
#endif

	eNewEvent = evIdle;
 800357e:	4b06      	ldr	r3, [pc, #24]	; (8003598 <BiasMenuExitHandler+0x34>)
 8003580:	2200      	movs	r2, #0
 8003582:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 8003584:	2301      	movs	r3, #1
}
 8003586:	4618      	mov	r0, r3
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	08010e6c 	.word	0x08010e6c
 8003590:	20001f11 	.word	0x20001f11
 8003594:	08010e90 	.word	0x08010e90
 8003598:	20001f13 	.word	0x20001f13

0800359c <EM_ProcessEvent>:
 *	@param None
 *	@retval None
 *
 */
void EM_ProcessEvent()
{
 800359c:	b580      	push	{r7, lr}
 800359e:	af00      	add	r7, sp, #0

	switch(eNextState)
 80035a0:	4bb8      	ldr	r3, [pc, #736]	; (8003884 <EM_ProcessEvent+0x2e8>)
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	2b0e      	cmp	r3, #14
 80035a6:	f200 81ff 	bhi.w	80039a8 <EM_ProcessEvent+0x40c>
 80035aa:	a201      	add	r2, pc, #4	; (adr r2, 80035b0 <EM_ProcessEvent+0x14>)
 80035ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035b0:	080035ed 	.word	0x080035ed
 80035b4:	0800361f 	.word	0x0800361f
 80035b8:	080036a5 	.word	0x080036a5
 80035bc:	080036c3 	.word	0x080036c3
 80035c0:	0800370f 	.word	0x0800370f
 80035c4:	08003741 	.word	0x08003741
 80035c8:	08003773 	.word	0x08003773
 80035cc:	080037bf 	.word	0x080037bf
 80035d0:	080037f1 	.word	0x080037f1
 80035d4:	080039a9 	.word	0x080039a9
 80035d8:	08003823 	.word	0x08003823
 80035dc:	080038b5 	.word	0x080038b5
 80035e0:	080038e5 	.word	0x080038e5
 80035e4:	08003915 	.word	0x08003915
 80035e8:	08003973 	.word	0x08003973
// MAIN MENU
		case Idle_State:


			#ifdef SWV_DEBUG_ENABLED
			  printf("Idle_State\n");
 80035ec:	48a6      	ldr	r0, [pc, #664]	; (8003888 <EM_ProcessEvent+0x2ec>)
 80035ee:	f00b fa81 	bl	800eaf4 <puts>
			#endif

			if(eNewEvent == evBlueBtn)
 80035f2:	4ba6      	ldr	r3, [pc, #664]	; (800388c <EM_ProcessEvent+0x2f0>)
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d105      	bne.n	8003606 <EM_ProcessEvent+0x6a>
			{
				eNextState = ToplevelOutputMenuEntryHandler();
 80035fa:	f000 fe1b 	bl	8004234 <ToplevelOutputMenuEntryHandler>
 80035fe:	4603      	mov	r3, r0
 8003600:	461a      	mov	r2, r3
 8003602:	4ba0      	ldr	r3, [pc, #640]	; (8003884 <EM_ProcessEvent+0x2e8>)
 8003604:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8003606:	4ba1      	ldr	r3, [pc, #644]	; (800388c <EM_ProcessEvent+0x2f0>)
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	2b02      	cmp	r3, #2
 800360c:	f040 81ce 	bne.w	80039ac <EM_ProcessEvent+0x410>
			{
				eNextState = ToplevelInputMenuEntryHandler();
 8003610:	f000 fe3c 	bl	800428c <ToplevelInputMenuEntryHandler>
 8003614:	4603      	mov	r3, r0
 8003616:	461a      	mov	r2, r3
 8003618:	4b9a      	ldr	r3, [pc, #616]	; (8003884 <EM_ProcessEvent+0x2e8>)
 800361a:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evRedBtn)
			{
				// no menu action
			}
			break;
 800361c:	e1c6      	b.n	80039ac <EM_ProcessEvent+0x410>

		case Toplevel_Output_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
			  printf("Toplevel_Output_Menu_State\n");
 800361e:	489c      	ldr	r0, [pc, #624]	; (8003890 <EM_ProcessEvent+0x2f4>)
 8003620:	f00b fa68 	bl	800eaf4 <puts>
			#endif

			if(eNewEvent == evEncoderPush)
 8003624:	4b99      	ldr	r3, [pc, #612]	; (800388c <EM_ProcessEvent+0x2f0>)
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	2b06      	cmp	r3, #6
 800362a:	d105      	bne.n	8003638 <EM_ProcessEvent+0x9c>
			{
				eNextState = ToplevelOutputMenuExitHandler();
 800362c:	f000 fe18 	bl	8004260 <ToplevelOutputMenuExitHandler>
 8003630:	4603      	mov	r3, r0
 8003632:	461a      	mov	r2, r3
 8003634:	4b93      	ldr	r3, [pc, #588]	; (8003884 <EM_ProcessEvent+0x2e8>)
 8003636:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evBlueBtn)
 8003638:	4b94      	ldr	r3, [pc, #592]	; (800388c <EM_ProcessEvent+0x2f0>)
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	2b01      	cmp	r3, #1
 800363e:	d108      	bne.n	8003652 <EM_ProcessEvent+0xb6>
			{
				ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 8003640:	2000      	movs	r0, #0
 8003642:	f000 fde7 	bl	8004214 <ToplevelMenu_setStatus>
				eNextState = FuncMainMenuEntryHandler();
 8003646:	f000 fbe5 	bl	8003e14 <FuncMainMenuEntryHandler>
 800364a:	4603      	mov	r3, r0
 800364c:	461a      	mov	r2, r3
 800364e:	4b8d      	ldr	r3, [pc, #564]	; (8003884 <EM_ProcessEvent+0x2e8>)
 8003650:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8003652:	4b8e      	ldr	r3, [pc, #568]	; (800388c <EM_ProcessEvent+0x2f0>)
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	2b02      	cmp	r3, #2
 8003658:	d108      	bne.n	800366c <EM_ProcessEvent+0xd0>
			{
				ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 800365a:	2000      	movs	r0, #0
 800365c:	f000 fdda 	bl	8004214 <ToplevelMenu_setStatus>
				eNextState = FreqMainMenuEntryHandler();
 8003660:	f000 f9ea 	bl	8003a38 <FreqMainMenuEntryHandler>
 8003664:	4603      	mov	r3, r0
 8003666:	461a      	mov	r2, r3
 8003668:	4b86      	ldr	r3, [pc, #536]	; (8003884 <EM_ProcessEvent+0x2e8>)
 800366a:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evYellowBtn)
 800366c:	4b87      	ldr	r3, [pc, #540]	; (800388c <EM_ProcessEvent+0x2f0>)
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	2b03      	cmp	r3, #3
 8003672:	d108      	bne.n	8003686 <EM_ProcessEvent+0xea>
			{
				ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 8003674:	2000      	movs	r0, #0
 8003676:	f000 fdcd 	bl	8004214 <ToplevelMenu_setStatus>
				eNextState = GainMainMenuEntryHandler();
 800367a:	f000 fccd 	bl	8004018 <GainMainMenuEntryHandler>
 800367e:	4603      	mov	r3, r0
 8003680:	461a      	mov	r2, r3
 8003682:	4b80      	ldr	r3, [pc, #512]	; (8003884 <EM_ProcessEvent+0x2e8>)
 8003684:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evRedBtn)
 8003686:	4b81      	ldr	r3, [pc, #516]	; (800388c <EM_ProcessEvent+0x2f0>)
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	2b04      	cmp	r3, #4
 800368c:	f040 8190 	bne.w	80039b0 <EM_ProcessEvent+0x414>
			{
				ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 8003690:	2000      	movs	r0, #0
 8003692:	f000 fdbf 	bl	8004214 <ToplevelMenu_setStatus>
				eNextState = BiasMenuEntryHandler();
 8003696:	f7ff ff2d 	bl	80034f4 <BiasMenuEntryHandler>
 800369a:	4603      	mov	r3, r0
 800369c:	461a      	mov	r2, r3
 800369e:	4b79      	ldr	r3, [pc, #484]	; (8003884 <EM_ProcessEvent+0x2e8>)
 80036a0:	701a      	strb	r2, [r3, #0]
			}
			break;
 80036a2:	e185      	b.n	80039b0 <EM_ProcessEvent+0x414>

		case Toplevel_Input_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
			  printf("Toplevel_Input_Menu_State\n");
 80036a4:	487b      	ldr	r0, [pc, #492]	; (8003894 <EM_ProcessEvent+0x2f8>)
 80036a6:	f00b fa25 	bl	800eaf4 <puts>
			#endif

			if(eNewEvent == evEncoderPush)
 80036aa:	4b78      	ldr	r3, [pc, #480]	; (800388c <EM_ProcessEvent+0x2f0>)
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	2b06      	cmp	r3, #6
 80036b0:	f040 8180 	bne.w	80039b4 <EM_ProcessEvent+0x418>
			{
				eNextState = ToplevelInputMenuExitHandler();
 80036b4:	f000 fe00 	bl	80042b8 <ToplevelInputMenuExitHandler>
 80036b8:	4603      	mov	r3, r0
 80036ba:	461a      	mov	r2, r3
 80036bc:	4b71      	ldr	r3, [pc, #452]	; (8003884 <EM_ProcessEvent+0x2e8>)
 80036be:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evRedBtn)
			{
				// no menu action
			}
			break;
 80036c0:	e178      	b.n	80039b4 <EM_ProcessEvent+0x418>
// FUNC MENUS

		case Func_Main_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Func_Main_Menu_State\n");
 80036c2:	4875      	ldr	r0, [pc, #468]	; (8003898 <EM_ProcessEvent+0x2fc>)
 80036c4:	f00b fa16 	bl	800eaf4 <puts>

			if(eNewEvent == evEncoderSet)
			{
				// No menu action
			}
			if(eNewEvent == evEncoderPush)
 80036c8:	4b70      	ldr	r3, [pc, #448]	; (800388c <EM_ProcessEvent+0x2f0>)
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	2b06      	cmp	r3, #6
 80036ce:	d108      	bne.n	80036e2 <EM_ProcessEvent+0x146>
			{
				eNextState = FuncMainMenuExitHandler();
 80036d0:	f000 fbb6 	bl	8003e40 <FuncMainMenuExitHandler>
 80036d4:	4603      	mov	r3, r0
 80036d6:	461a      	mov	r2, r3
 80036d8:	4b6a      	ldr	r3, [pc, #424]	; (8003884 <EM_ProcessEvent+0x2e8>)
 80036da:	701a      	strb	r2, [r3, #0]
				ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 80036dc:	2002      	movs	r0, #2
 80036de:	f000 fd99 	bl	8004214 <ToplevelMenu_setStatus>
			}
			if(eNewEvent == evBlueBtn)
 80036e2:	4b6a      	ldr	r3, [pc, #424]	; (800388c <EM_ProcessEvent+0x2f0>)
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d105      	bne.n	80036f6 <EM_ProcessEvent+0x15a>
			{
				eNextState = FuncSignalMenuEntryHandler();
 80036ea:	f000 fbc5 	bl	8003e78 <FuncSignalMenuEntryHandler>
 80036ee:	4603      	mov	r3, r0
 80036f0:	461a      	mov	r2, r3
 80036f2:	4b64      	ldr	r3, [pc, #400]	; (8003884 <EM_ProcessEvent+0x2e8>)
 80036f4:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 80036f6:	4b65      	ldr	r3, [pc, #404]	; (800388c <EM_ProcessEvent+0x2f0>)
 80036f8:	781b      	ldrb	r3, [r3, #0]
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	f040 815c 	bne.w	80039b8 <EM_ProcessEvent+0x41c>
			{
				eNextState = FuncSyncMenuEntryHandler();
 8003700:	f000 fc1c 	bl	8003f3c <FuncSyncMenuEntryHandler>
 8003704:	4603      	mov	r3, r0
 8003706:	461a      	mov	r2, r3
 8003708:	4b5e      	ldr	r3, [pc, #376]	; (8003884 <EM_ProcessEvent+0x2e8>)
 800370a:	701a      	strb	r2, [r3, #0]
			}

			break;
 800370c:	e154      	b.n	80039b8 <EM_ProcessEvent+0x41c>

		case Func_Signal_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Func_Signal_Menu_State\n");
 800370e:	4863      	ldr	r0, [pc, #396]	; (800389c <EM_ProcessEvent+0x300>)
 8003710:	f00b f9f0 	bl	800eaf4 <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 8003714:	4b5d      	ldr	r3, [pc, #372]	; (800388c <EM_ProcessEvent+0x2f0>)
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	2b05      	cmp	r3, #5
 800371a:	d105      	bne.n	8003728 <EM_ProcessEvent+0x18c>
			{
				eNextState = FuncSignalMenuInputHandler();
 800371c:	f000 fbe2 	bl	8003ee4 <FuncSignalMenuInputHandler>
 8003720:	4603      	mov	r3, r0
 8003722:	461a      	mov	r2, r3
 8003724:	4b57      	ldr	r3, [pc, #348]	; (8003884 <EM_ProcessEvent+0x2e8>)
 8003726:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8003728:	4b58      	ldr	r3, [pc, #352]	; (800388c <EM_ProcessEvent+0x2f0>)
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	2b06      	cmp	r3, #6
 800372e:	f040 8145 	bne.w	80039bc <EM_ProcessEvent+0x420>
			{
				eNextState = FuncSignalMenuExitHandler();
 8003732:	f000 fbed 	bl	8003f10 <FuncSignalMenuExitHandler>
 8003736:	4603      	mov	r3, r0
 8003738:	461a      	mov	r2, r3
 800373a:	4b52      	ldr	r3, [pc, #328]	; (8003884 <EM_ProcessEvent+0x2e8>)
 800373c:	701a      	strb	r2, [r3, #0]

			}

			break;
 800373e:	e13d      	b.n	80039bc <EM_ProcessEvent+0x420>

		case Func_Sync_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Func_Sync_Menu_State\n");
 8003740:	4857      	ldr	r0, [pc, #348]	; (80038a0 <EM_ProcessEvent+0x304>)
 8003742:	f00b f9d7 	bl	800eaf4 <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 8003746:	4b51      	ldr	r3, [pc, #324]	; (800388c <EM_ProcessEvent+0x2f0>)
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	2b05      	cmp	r3, #5
 800374c:	d105      	bne.n	800375a <EM_ProcessEvent+0x1be>
			{
				eNextState = FuncSyncMenuInputHandler();
 800374e:	f000 fc2b 	bl	8003fa8 <FuncSyncMenuInputHandler>
 8003752:	4603      	mov	r3, r0
 8003754:	461a      	mov	r2, r3
 8003756:	4b4b      	ldr	r3, [pc, #300]	; (8003884 <EM_ProcessEvent+0x2e8>)
 8003758:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 800375a:	4b4c      	ldr	r3, [pc, #304]	; (800388c <EM_ProcessEvent+0x2f0>)
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	2b06      	cmp	r3, #6
 8003760:	f040 812e 	bne.w	80039c0 <EM_ProcessEvent+0x424>
			{
				eNextState = FuncSyncMenuExitHandler();
 8003764:	f000 fc36 	bl	8003fd4 <FuncSyncMenuExitHandler>
 8003768:	4603      	mov	r3, r0
 800376a:	461a      	mov	r2, r3
 800376c:	4b45      	ldr	r3, [pc, #276]	; (8003884 <EM_ProcessEvent+0x2e8>)
 800376e:	701a      	strb	r2, [r3, #0]
			}

			break;
 8003770:	e126      	b.n	80039c0 <EM_ProcessEvent+0x424>
// GAIN MENUS

		case Gain_Main_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Gain_Main_Menu_State\n");
 8003772:	484c      	ldr	r0, [pc, #304]	; (80038a4 <EM_ProcessEvent+0x308>)
 8003774:	f00b f9be 	bl	800eaf4 <puts>
			#endif
			if(eNewEvent == evEncoderSet)
			{
				// No menu action
			}
			if(eNewEvent == evEncoderPush)
 8003778:	4b44      	ldr	r3, [pc, #272]	; (800388c <EM_ProcessEvent+0x2f0>)
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	2b06      	cmp	r3, #6
 800377e:	d108      	bne.n	8003792 <EM_ProcessEvent+0x1f6>
			{
				eNextState = GainMainMenuExitHandler();
 8003780:	f000 fc60 	bl	8004044 <GainMainMenuExitHandler>
 8003784:	4603      	mov	r3, r0
 8003786:	461a      	mov	r2, r3
 8003788:	4b3e      	ldr	r3, [pc, #248]	; (8003884 <EM_ProcessEvent+0x2e8>)
 800378a:	701a      	strb	r2, [r3, #0]
				ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 800378c:	2002      	movs	r0, #2
 800378e:	f000 fd41 	bl	8004214 <ToplevelMenu_setStatus>
			}
			if(eNewEvent == evBlueBtn)
 8003792:	4b3e      	ldr	r3, [pc, #248]	; (800388c <EM_ProcessEvent+0x2f0>)
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	2b01      	cmp	r3, #1
 8003798:	d105      	bne.n	80037a6 <EM_ProcessEvent+0x20a>
			{
				eNextState = GainSignalMenuEntryHandler();
 800379a:	f000 fc6f 	bl	800407c <GainSignalMenuEntryHandler>
 800379e:	4603      	mov	r3, r0
 80037a0:	461a      	mov	r2, r3
 80037a2:	4b38      	ldr	r3, [pc, #224]	; (8003884 <EM_ProcessEvent+0x2e8>)
 80037a4:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 80037a6:	4b39      	ldr	r3, [pc, #228]	; (800388c <EM_ProcessEvent+0x2f0>)
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	f040 810a 	bne.w	80039c4 <EM_ProcessEvent+0x428>
			{
				eNextState = GainSyncMenuEntryHandler();
 80037b0:	f000 fcc4 	bl	800413c <GainSyncMenuEntryHandler>
 80037b4:	4603      	mov	r3, r0
 80037b6:	461a      	mov	r2, r3
 80037b8:	4b32      	ldr	r3, [pc, #200]	; (8003884 <EM_ProcessEvent+0x2e8>)
 80037ba:	701a      	strb	r2, [r3, #0]
			}

			break;
 80037bc:	e102      	b.n	80039c4 <EM_ProcessEvent+0x428>

		case Gain_Signal_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Gain_Signal_Menu_State\n");
 80037be:	483a      	ldr	r0, [pc, #232]	; (80038a8 <EM_ProcessEvent+0x30c>)
 80037c0:	f00b f998 	bl	800eaf4 <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 80037c4:	4b31      	ldr	r3, [pc, #196]	; (800388c <EM_ProcessEvent+0x2f0>)
 80037c6:	781b      	ldrb	r3, [r3, #0]
 80037c8:	2b05      	cmp	r3, #5
 80037ca:	d105      	bne.n	80037d8 <EM_ProcessEvent+0x23c>
			{
				eNextState = GainSignalMenuInputHandler();
 80037cc:	f000 fc8a 	bl	80040e4 <GainSignalMenuInputHandler>
 80037d0:	4603      	mov	r3, r0
 80037d2:	461a      	mov	r2, r3
 80037d4:	4b2b      	ldr	r3, [pc, #172]	; (8003884 <EM_ProcessEvent+0x2e8>)
 80037d6:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 80037d8:	4b2c      	ldr	r3, [pc, #176]	; (800388c <EM_ProcessEvent+0x2f0>)
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	2b06      	cmp	r3, #6
 80037de:	f040 80f3 	bne.w	80039c8 <EM_ProcessEvent+0x42c>
			{
				eNextState = GainSignalMenuExitHandler();
 80037e2:	f000 fc95 	bl	8004110 <GainSignalMenuExitHandler>
 80037e6:	4603      	mov	r3, r0
 80037e8:	461a      	mov	r2, r3
 80037ea:	4b26      	ldr	r3, [pc, #152]	; (8003884 <EM_ProcessEvent+0x2e8>)
 80037ec:	701a      	strb	r2, [r3, #0]
			}

			break;
 80037ee:	e0eb      	b.n	80039c8 <EM_ProcessEvent+0x42c>

		case Gain_Sync_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Gain_Sync_Menu_State\n");
 80037f0:	482e      	ldr	r0, [pc, #184]	; (80038ac <EM_ProcessEvent+0x310>)
 80037f2:	f00b f97f 	bl	800eaf4 <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 80037f6:	4b25      	ldr	r3, [pc, #148]	; (800388c <EM_ProcessEvent+0x2f0>)
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	2b05      	cmp	r3, #5
 80037fc:	d105      	bne.n	800380a <EM_ProcessEvent+0x26e>
			{
				eNextState = GainSyncMenuInputHandler();
 80037fe:	f000 fcd1 	bl	80041a4 <GainSyncMenuInputHandler>
 8003802:	4603      	mov	r3, r0
 8003804:	461a      	mov	r2, r3
 8003806:	4b1f      	ldr	r3, [pc, #124]	; (8003884 <EM_ProcessEvent+0x2e8>)
 8003808:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 800380a:	4b20      	ldr	r3, [pc, #128]	; (800388c <EM_ProcessEvent+0x2f0>)
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	2b06      	cmp	r3, #6
 8003810:	f040 80dc 	bne.w	80039cc <EM_ProcessEvent+0x430>
			{
				eNextState = GainSyncMenuExitHandler();
 8003814:	f000 fcdc 	bl	80041d0 <GainSyncMenuExitHandler>
 8003818:	4603      	mov	r3, r0
 800381a:	461a      	mov	r2, r3
 800381c:	4b19      	ldr	r3, [pc, #100]	; (8003884 <EM_ProcessEvent+0x2e8>)
 800381e:	701a      	strb	r2, [r3, #0]
			}

			break;
 8003820:	e0d4      	b.n	80039cc <EM_ProcessEvent+0x430>
// FREQ MENUS

		case Freq_Main_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Freq_Main_Menu_State\n");
 8003822:	4823      	ldr	r0, [pc, #140]	; (80038b0 <EM_ProcessEvent+0x314>)
 8003824:	f00b f966 	bl	800eaf4 <puts>
			#endif

			if(eNewEvent == evEncoderPush)
 8003828:	4b18      	ldr	r3, [pc, #96]	; (800388c <EM_ProcessEvent+0x2f0>)
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	2b06      	cmp	r3, #6
 800382e:	d108      	bne.n	8003842 <EM_ProcessEvent+0x2a6>
			{
				eNextState = FreqMainMenuExitHandler();
 8003830:	f000 f918 	bl	8003a64 <FreqMainMenuExitHandler>
 8003834:	4603      	mov	r3, r0
 8003836:	461a      	mov	r2, r3
 8003838:	4b12      	ldr	r3, [pc, #72]	; (8003884 <EM_ProcessEvent+0x2e8>)
 800383a:	701a      	strb	r2, [r3, #0]
				ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 800383c:	2002      	movs	r0, #2
 800383e:	f000 fce9 	bl	8004214 <ToplevelMenu_setStatus>
			}
			if(eNewEvent == evBlueBtn)
 8003842:	4b12      	ldr	r3, [pc, #72]	; (800388c <EM_ProcessEvent+0x2f0>)
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	2b01      	cmp	r3, #1
 8003848:	d105      	bne.n	8003856 <EM_ProcessEvent+0x2ba>
			{
				eNextState = FreqPresetMenuEntryHandler();
 800384a:	f000 f92d 	bl	8003aa8 <FreqPresetMenuEntryHandler>
 800384e:	4603      	mov	r3, r0
 8003850:	461a      	mov	r2, r3
 8003852:	4b0c      	ldr	r3, [pc, #48]	; (8003884 <EM_ProcessEvent+0x2e8>)
 8003854:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8003856:	4b0d      	ldr	r3, [pc, #52]	; (800388c <EM_ProcessEvent+0x2f0>)
 8003858:	781b      	ldrb	r3, [r3, #0]
 800385a:	2b02      	cmp	r3, #2
 800385c:	d105      	bne.n	800386a <EM_ProcessEvent+0x2ce>
			{
				eNextState = FreqAdjustMenuEntryHandler();
 800385e:	f000 f981 	bl	8003b64 <FreqAdjustMenuEntryHandler>
 8003862:	4603      	mov	r3, r0
 8003864:	461a      	mov	r2, r3
 8003866:	4b07      	ldr	r3, [pc, #28]	; (8003884 <EM_ProcessEvent+0x2e8>)
 8003868:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evYellowBtn)
 800386a:	4b08      	ldr	r3, [pc, #32]	; (800388c <EM_ProcessEvent+0x2f0>)
 800386c:	781b      	ldrb	r3, [r3, #0]
 800386e:	2b03      	cmp	r3, #3
 8003870:	f040 80ae 	bne.w	80039d0 <EM_ProcessEvent+0x434>
			{
				eNextState = FreqSweepMenuEntryHandler();
 8003874:	f000 f9c0 	bl	8003bf8 <FreqSweepMenuEntryHandler>
 8003878:	4603      	mov	r3, r0
 800387a:	461a      	mov	r2, r3
 800387c:	4b01      	ldr	r3, [pc, #4]	; (8003884 <EM_ProcessEvent+0x2e8>)
 800387e:	701a      	strb	r2, [r3, #0]
			}

			break;
 8003880:	e0a6      	b.n	80039d0 <EM_ProcessEvent+0x434>
 8003882:	bf00      	nop
 8003884:	20001f12 	.word	0x20001f12
 8003888:	08010ea8 	.word	0x08010ea8
 800388c:	20001f13 	.word	0x20001f13
 8003890:	08010eb4 	.word	0x08010eb4
 8003894:	08010ed0 	.word	0x08010ed0
 8003898:	08010eec 	.word	0x08010eec
 800389c:	08010f04 	.word	0x08010f04
 80038a0:	08010f1c 	.word	0x08010f1c
 80038a4:	08010f34 	.word	0x08010f34
 80038a8:	08010f4c 	.word	0x08010f4c
 80038ac:	08010f64 	.word	0x08010f64
 80038b0:	08010f7c 	.word	0x08010f7c

		case Freq_Preset_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Freq_Preset_Menu_State\n");
 80038b4:	484c      	ldr	r0, [pc, #304]	; (80039e8 <EM_ProcessEvent+0x44c>)
 80038b6:	f00b f91d 	bl	800eaf4 <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 80038ba:	4b4c      	ldr	r3, [pc, #304]	; (80039ec <EM_ProcessEvent+0x450>)
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	2b05      	cmp	r3, #5
 80038c0:	d105      	bne.n	80038ce <EM_ProcessEvent+0x332>
			{
				eNextState = FreqPresetMenuInputHandler();
 80038c2:	f000 f923 	bl	8003b0c <FreqPresetMenuInputHandler>
 80038c6:	4603      	mov	r3, r0
 80038c8:	461a      	mov	r2, r3
 80038ca:	4b49      	ldr	r3, [pc, #292]	; (80039f0 <EM_ProcessEvent+0x454>)
 80038cc:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 80038ce:	4b47      	ldr	r3, [pc, #284]	; (80039ec <EM_ProcessEvent+0x450>)
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	2b06      	cmp	r3, #6
 80038d4:	d17e      	bne.n	80039d4 <EM_ProcessEvent+0x438>
			{
				eNextState = FreqPresetMenuExitHandler();
 80038d6:	f000 f92f 	bl	8003b38 <FreqPresetMenuExitHandler>
 80038da:	4603      	mov	r3, r0
 80038dc:	461a      	mov	r2, r3
 80038de:	4b44      	ldr	r3, [pc, #272]	; (80039f0 <EM_ProcessEvent+0x454>)
 80038e0:	701a      	strb	r2, [r3, #0]
			}
			break;
 80038e2:	e077      	b.n	80039d4 <EM_ProcessEvent+0x438>

		case Freq_Adjust_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Freq_Adjust_Menu_State\n");
 80038e4:	4843      	ldr	r0, [pc, #268]	; (80039f4 <EM_ProcessEvent+0x458>)
 80038e6:	f00b f905 	bl	800eaf4 <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 80038ea:	4b40      	ldr	r3, [pc, #256]	; (80039ec <EM_ProcessEvent+0x450>)
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	2b05      	cmp	r3, #5
 80038f0:	d105      	bne.n	80038fe <EM_ProcessEvent+0x362>
			{
				eNextState = FreqAdjustMenuInputHandler();
 80038f2:	f000 f959 	bl	8003ba8 <FreqAdjustMenuInputHandler>
 80038f6:	4603      	mov	r3, r0
 80038f8:	461a      	mov	r2, r3
 80038fa:	4b3d      	ldr	r3, [pc, #244]	; (80039f0 <EM_ProcessEvent+0x454>)
 80038fc:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 80038fe:	4b3b      	ldr	r3, [pc, #236]	; (80039ec <EM_ProcessEvent+0x450>)
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	2b06      	cmp	r3, #6
 8003904:	d168      	bne.n	80039d8 <EM_ProcessEvent+0x43c>
			{
				eNextState = FreqAdjustMenuExitHandler();
 8003906:	f000 f961 	bl	8003bcc <FreqAdjustMenuExitHandler>
 800390a:	4603      	mov	r3, r0
 800390c:	461a      	mov	r2, r3
 800390e:	4b38      	ldr	r3, [pc, #224]	; (80039f0 <EM_ProcessEvent+0x454>)
 8003910:	701a      	strb	r2, [r3, #0]
			}
			break;
 8003912:	e061      	b.n	80039d8 <EM_ProcessEvent+0x43c>

		case Freq_Sweep_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Freq_Sweep_Menu_State\n");
 8003914:	4838      	ldr	r0, [pc, #224]	; (80039f8 <EM_ProcessEvent+0x45c>)
 8003916:	f00b f8ed 	bl	800eaf4 <puts>
			#endif

			if(eNewEvent == evBlueBtn)
 800391a:	4b34      	ldr	r3, [pc, #208]	; (80039ec <EM_ProcessEvent+0x450>)
 800391c:	781b      	ldrb	r3, [r3, #0]
 800391e:	2b01      	cmp	r3, #1
 8003920:	d106      	bne.n	8003930 <EM_ProcessEvent+0x394>
			{
				// enable
				eNextState = FreqSweepMenuInputHandler(evSweepEnable);
 8003922:	2007      	movs	r0, #7
 8003924:	f000 f998 	bl	8003c58 <FreqSweepMenuInputHandler>
 8003928:	4603      	mov	r3, r0
 800392a:	461a      	mov	r2, r3
 800392c:	4b30      	ldr	r3, [pc, #192]	; (80039f0 <EM_ProcessEvent+0x454>)
 800392e:	701a      	strb	r2, [r3, #0]

			}
			if(eNewEvent == evGreenBtn)
 8003930:	4b2e      	ldr	r3, [pc, #184]	; (80039ec <EM_ProcessEvent+0x450>)
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	2b02      	cmp	r3, #2
 8003936:	d106      	bne.n	8003946 <EM_ProcessEvent+0x3aa>
			{
				// center-aligned mode
				eNextState = FreqSweepMenuInputHandler(evSweepMode);
 8003938:	2008      	movs	r0, #8
 800393a:	f000 f98d 	bl	8003c58 <FreqSweepMenuInputHandler>
 800393e:	4603      	mov	r3, r0
 8003940:	461a      	mov	r2, r3
 8003942:	4b2b      	ldr	r3, [pc, #172]	; (80039f0 <EM_ProcessEvent+0x454>)
 8003944:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evRedBtn)
			{
				// no event action
			}
			if(eNewEvent == evEncoderSet)
 8003946:	4b29      	ldr	r3, [pc, #164]	; (80039ec <EM_ProcessEvent+0x450>)
 8003948:	781b      	ldrb	r3, [r3, #0]
 800394a:	2b05      	cmp	r3, #5
 800394c:	d106      	bne.n	800395c <EM_ProcessEvent+0x3c0>
			{
				eNextState = FreqSweepMenuInputHandler(evSweepSpeed);
 800394e:	2009      	movs	r0, #9
 8003950:	f000 f982 	bl	8003c58 <FreqSweepMenuInputHandler>
 8003954:	4603      	mov	r3, r0
 8003956:	461a      	mov	r2, r3
 8003958:	4b25      	ldr	r3, [pc, #148]	; (80039f0 <EM_ProcessEvent+0x454>)
 800395a:	701a      	strb	r2, [r3, #0]

			}
			if(eNewEvent == evEncoderPush)
 800395c:	4b23      	ldr	r3, [pc, #140]	; (80039ec <EM_ProcessEvent+0x450>)
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	2b06      	cmp	r3, #6
 8003962:	d13b      	bne.n	80039dc <EM_ProcessEvent+0x440>
			{
				eNextState = FreqSweepMenuExitHandler();
 8003964:	f000 fa26 	bl	8003db4 <FreqSweepMenuExitHandler>
 8003968:	4603      	mov	r3, r0
 800396a:	461a      	mov	r2, r3
 800396c:	4b20      	ldr	r3, [pc, #128]	; (80039f0 <EM_ProcessEvent+0x454>)
 800396e:	701a      	strb	r2, [r3, #0]
			}

			break;
 8003970:	e034      	b.n	80039dc <EM_ProcessEvent+0x440>
// BIAS MENUS

		case Bias_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Bias_Menu_State\n");
 8003972:	4822      	ldr	r0, [pc, #136]	; (80039fc <EM_ProcessEvent+0x460>)
 8003974:	f00b f8be 	bl	800eaf4 <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 8003978:	4b1c      	ldr	r3, [pc, #112]	; (80039ec <EM_ProcessEvent+0x450>)
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	2b05      	cmp	r3, #5
 800397e:	d105      	bne.n	800398c <EM_ProcessEvent+0x3f0>
			{
				eNextState = BiasMenuInputHandler();
 8003980:	f7ff fdda 	bl	8003538 <BiasMenuInputHandler>
 8003984:	4603      	mov	r3, r0
 8003986:	461a      	mov	r2, r3
 8003988:	4b19      	ldr	r3, [pc, #100]	; (80039f0 <EM_ProcessEvent+0x454>)
 800398a:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 800398c:	4b17      	ldr	r3, [pc, #92]	; (80039ec <EM_ProcessEvent+0x450>)
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	2b06      	cmp	r3, #6
 8003992:	d125      	bne.n	80039e0 <EM_ProcessEvent+0x444>
			{
				eNextState = BiasMenuExitHandler();
 8003994:	f7ff fde6 	bl	8003564 <BiasMenuExitHandler>
 8003998:	4603      	mov	r3, r0
 800399a:	461a      	mov	r2, r3
 800399c:	4b14      	ldr	r3, [pc, #80]	; (80039f0 <EM_ProcessEvent+0x454>)
 800399e:	701a      	strb	r2, [r3, #0]
				ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 80039a0:	2002      	movs	r0, #2
 80039a2:	f000 fc37 	bl	8004214 <ToplevelMenu_setStatus>
			}

			break;
 80039a6:	e01b      	b.n	80039e0 <EM_ProcessEvent+0x444>

		default:
			break;
 80039a8:	bf00      	nop
 80039aa:	e01a      	b.n	80039e2 <EM_ProcessEvent+0x446>
			break;
 80039ac:	bf00      	nop
 80039ae:	e018      	b.n	80039e2 <EM_ProcessEvent+0x446>
			break;
 80039b0:	bf00      	nop
 80039b2:	e016      	b.n	80039e2 <EM_ProcessEvent+0x446>
			break;
 80039b4:	bf00      	nop
 80039b6:	e014      	b.n	80039e2 <EM_ProcessEvent+0x446>
			break;
 80039b8:	bf00      	nop
 80039ba:	e012      	b.n	80039e2 <EM_ProcessEvent+0x446>
			break;
 80039bc:	bf00      	nop
 80039be:	e010      	b.n	80039e2 <EM_ProcessEvent+0x446>
			break;
 80039c0:	bf00      	nop
 80039c2:	e00e      	b.n	80039e2 <EM_ProcessEvent+0x446>
			break;
 80039c4:	bf00      	nop
 80039c6:	e00c      	b.n	80039e2 <EM_ProcessEvent+0x446>
			break;
 80039c8:	bf00      	nop
 80039ca:	e00a      	b.n	80039e2 <EM_ProcessEvent+0x446>
			break;
 80039cc:	bf00      	nop
 80039ce:	e008      	b.n	80039e2 <EM_ProcessEvent+0x446>
			break;
 80039d0:	bf00      	nop
 80039d2:	e006      	b.n	80039e2 <EM_ProcessEvent+0x446>
			break;
 80039d4:	bf00      	nop
 80039d6:	e004      	b.n	80039e2 <EM_ProcessEvent+0x446>
			break;
 80039d8:	bf00      	nop
 80039da:	e002      	b.n	80039e2 <EM_ProcessEvent+0x446>
			break;
 80039dc:	bf00      	nop
 80039de:	e000      	b.n	80039e2 <EM_ProcessEvent+0x446>
			break;
 80039e0:	bf00      	nop
	}

}
 80039e2:	bf00      	nop
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	08010f94 	.word	0x08010f94
 80039ec:	20001f13 	.word	0x20001f13
 80039f0:	20001f12 	.word	0x20001f12
 80039f4:	08010fac 	.word	0x08010fac
 80039f8:	08010fc4 	.word	0x08010fc4
 80039fc:	08010fdc 	.word	0x08010fdc

08003a00 <EM_SetNewEvent>:
 *	@param None
 *	@retval None
 *
 */
void EM_SetNewEvent(eSystemEvent pEvent)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	4603      	mov	r3, r0
 8003a08:	71fb      	strb	r3, [r7, #7]
	eNewEvent = pEvent;
 8003a0a:	4a04      	ldr	r2, [pc, #16]	; (8003a1c <EM_SetNewEvent+0x1c>)
 8003a0c:	79fb      	ldrb	r3, [r7, #7]
 8003a0e:	7013      	strb	r3, [r2, #0]
}
 8003a10:	bf00      	nop
 8003a12:	370c      	adds	r7, #12
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr
 8003a1c:	20001f13 	.word	0x20001f13

08003a20 <FreqMenu_getStatus>:

#define RATE_COEF	32	// how much the encoder increments/decrements per pulse
#define RATE_DELTA	1.1	// how much we increment/decrement by

eFreqMenu_Status FreqMenu_getStatus()
{
 8003a20:	b480      	push	{r7}
 8003a22:	af00      	add	r7, sp, #0
	return eNextFreqMenuStatus;
 8003a24:	4b03      	ldr	r3, [pc, #12]	; (8003a34 <FreqMenu_getStatus+0x14>)
 8003a26:	781b      	ldrb	r3, [r3, #0]
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop
 8003a34:	20001f15 	.word	0x20001f15

08003a38 <FreqMainMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqMainMenuEntryHandler()
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqMainMenuEntryHandler Event captured\n");
 8003a3c:	4806      	ldr	r0, [pc, #24]	; (8003a58 <FreqMainMenuEntryHandler+0x20>)
 8003a3e:	f00b f859 	bl	800eaf4 <puts>
	#endif

	DM_RefreshScreen();
 8003a42:	f7fd fb37 	bl	80010b4 <DM_RefreshScreen>

	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 8003a46:	4b05      	ldr	r3, [pc, #20]	; (8003a5c <FreqMainMenuEntryHandler+0x24>)
 8003a48:	2201      	movs	r2, #1
 8003a4a:	701a      	strb	r2, [r3, #0]

	// stay in this state
	eNewEvent = evIdle;
 8003a4c:	4b04      	ldr	r3, [pc, #16]	; (8003a60 <FreqMainMenuEntryHandler+0x28>)
 8003a4e:	2200      	movs	r2, #0
 8003a50:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8003a52:	230a      	movs	r3, #10
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	08010fec 	.word	0x08010fec
 8003a5c:	20001f15 	.word	0x20001f15
 8003a60:	20001f13 	.word	0x20001f13

08003a64 <FreqMainMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqMainMenuExitHandler()
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqMainMenuExitHandler Event captured\n");
 8003a68:	480a      	ldr	r0, [pc, #40]	; (8003a94 <FreqMainMenuExitHandler+0x30>)
 8003a6a:	f00b f843 	bl	800eaf4 <puts>
	#endif


	// disable the menu
	eNextFreqMenuStatus = DISABLE_FREQ_MENU;
 8003a6e:	4b0a      	ldr	r3, [pc, #40]	; (8003a98 <FreqMainMenuExitHandler+0x34>)
 8003a70:	2200      	movs	r2, #0
 8003a72:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

	ENCODER_TIMER->ARR = 1024;
 8003a74:	4b09      	ldr	r3, [pc, #36]	; (8003a9c <FreqMainMenuExitHandler+0x38>)
 8003a76:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a7a:	62da      	str	r2, [r3, #44]	; 0x2c

	DM_RefreshScreen();
 8003a7c:	f7fd fb1a 	bl	80010b4 <DM_RefreshScreen>

	#ifdef SWV_DEBUG_ENABLED
		  printf("returning to Idle State\n");
 8003a80:	4807      	ldr	r0, [pc, #28]	; (8003aa0 <FreqMainMenuExitHandler+0x3c>)
 8003a82:	f00b f837 	bl	800eaf4 <puts>
	#endif

	eNewEvent = evIdle;
 8003a86:	4b07      	ldr	r3, [pc, #28]	; (8003aa4 <FreqMainMenuExitHandler+0x40>)
 8003a88:	2200      	movs	r2, #0
 8003a8a:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 8003a8c:	2301      	movs	r3, #1
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	0801103c 	.word	0x0801103c
 8003a98:	20001f15 	.word	0x20001f15
 8003a9c:	40012c00 	.word	0x40012c00
 8003aa0:	08011064 	.word	0x08011064
 8003aa4:	20001f13 	.word	0x20001f13

08003aa8 <FreqPresetMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuEntryHandler()
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqPresetMenuEntryHandler Event captured\n");
 8003aae:	4812      	ldr	r0, [pc, #72]	; (8003af8 <FreqPresetMenuEntryHandler+0x50>)
 8003ab0:	f00b f820 	bl	800eaf4 <puts>
	#endif

	DM_RefreshScreen();
 8003ab4:	f7fd fafe 	bl	80010b4 <DM_RefreshScreen>

	eNextFreqMenuStatus = ENABLE_FREQ_PRESET_MENU;
 8003ab8:	4b10      	ldr	r3, [pc, #64]	; (8003afc <FreqPresetMenuEntryHandler+0x54>)
 8003aba:	2202      	movs	r2, #2
 8003abc:	701a      	strb	r2, [r3, #0]

	FreqProfile_t *pFreqPresetTmp =  FreqO_GetFPresetObject();
 8003abe:	f000 ff45 	bl	800494c <FreqO_GetFPresetObject>
 8003ac2:	6078      	str	r0, [r7, #4]
	if(pFreqPresetTmp)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d00a      	beq.n	8003ae0 <FreqPresetMenuEntryHandler+0x38>
	{
		ENCODER_TIMER->CNT = pFreqPresetTmp->epos;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	791a      	ldrb	r2, [r3, #4]
 8003ace:	4b0c      	ldr	r3, [pc, #48]	; (8003b00 <FreqPresetMenuEntryHandler+0x58>)
 8003ad0:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = FreqO_GetFreqPresetEncoderRange();
 8003ad2:	f000 ff6d 	bl	80049b0 <FreqO_GetFreqPresetEncoderRange>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	461a      	mov	r2, r3
 8003ada:	4b09      	ldr	r3, [pc, #36]	; (8003b00 <FreqPresetMenuEntryHandler+0x58>)
 8003adc:	62da      	str	r2, [r3, #44]	; 0x2c
 8003ade:	e002      	b.n	8003ae6 <FreqPresetMenuEntryHandler+0x3e>
	}
	else
	{
		DM_SetErrorDebugMsg("_FreqPresetMenuEntryHandler: pFreqPresetTmp null pointer");
 8003ae0:	4808      	ldr	r0, [pc, #32]	; (8003b04 <FreqPresetMenuEntryHandler+0x5c>)
 8003ae2:	f7fd fb31 	bl	8001148 <DM_SetErrorDebugMsg>
	}


	// stay in this state
	eNewEvent = evIdle;
 8003ae6:	4b08      	ldr	r3, [pc, #32]	; (8003b08 <FreqPresetMenuEntryHandler+0x60>)
 8003ae8:	2200      	movs	r2, #0
 8003aea:	701a      	strb	r2, [r3, #0]
	return Freq_Preset_Menu_State;
 8003aec:	230b      	movs	r3, #11
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3708      	adds	r7, #8
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	0801107c 	.word	0x0801107c
 8003afc:	20001f15 	.word	0x20001f15
 8003b00:	40012c00 	.word	0x40012c00
 8003b04:	080110a8 	.word	0x080110a8
 8003b08:	20001f13 	.word	0x20001f13

08003b0c <FreqPresetMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuInputHandler()
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqPresetMenuInputHandler Event captured\n");
 8003b10:	4807      	ldr	r0, [pc, #28]	; (8003b30 <FreqPresetMenuInputHandler+0x24>)
 8003b12:	f00a ffef 	bl	800eaf4 <puts>
	#endif

	FreqO_ModifyOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 8003b16:	2001      	movs	r0, #1
 8003b18:	f001 faae 	bl	8005078 <SM_GetEncoderValue>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f000 fe22 	bl	8004768 <FreqO_ModifyOutput>

	// stay in this state
	eNewEvent = evIdle;
 8003b24:	4b03      	ldr	r3, [pc, #12]	; (8003b34 <FreqPresetMenuInputHandler+0x28>)
 8003b26:	2200      	movs	r2, #0
 8003b28:	701a      	strb	r2, [r3, #0]
	return Freq_Preset_Menu_State;
 8003b2a:	230b      	movs	r3, #11
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	080110e4 	.word	0x080110e4
 8003b34:	20001f13 	.word	0x20001f13

08003b38 <FreqPresetMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuExitHandler()
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqPresetMenuExitHandler Event captured\n");
 8003b3c:	4806      	ldr	r0, [pc, #24]	; (8003b58 <FreqPresetMenuExitHandler+0x20>)
 8003b3e:	f00a ffd9 	bl	800eaf4 <puts>
	#endif

	DM_RefreshScreen();
 8003b42:	f7fd fab7 	bl	80010b4 <DM_RefreshScreen>

	// disable the menu
	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 8003b46:	4b05      	ldr	r3, [pc, #20]	; (8003b5c <FreqPresetMenuExitHandler+0x24>)
 8003b48:	2201      	movs	r2, #1
 8003b4a:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 8003b4c:	4b04      	ldr	r3, [pc, #16]	; (8003b60 <FreqPresetMenuExitHandler+0x28>)
 8003b4e:	2200      	movs	r2, #0
 8003b50:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8003b52:	230a      	movs	r3, #10
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	08011110 	.word	0x08011110
 8003b5c:	20001f15 	.word	0x20001f15
 8003b60:	20001f13 	.word	0x20001f13

08003b64 <FreqAdjustMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuEntryHandler()
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqAdjustMenuEntryHandler Event captured\n");
 8003b68:	480a      	ldr	r0, [pc, #40]	; (8003b94 <FreqAdjustMenuEntryHandler+0x30>)
 8003b6a:	f00a ffc3 	bl	800eaf4 <puts>
	#endif

	DM_RefreshScreen();
 8003b6e:	f7fd faa1 	bl	80010b4 <DM_RefreshScreen>

	eNextFreqMenuStatus = ENABLE_FREQ_ADJUST_MENU;
 8003b72:	4b09      	ldr	r3, [pc, #36]	; (8003b98 <FreqAdjustMenuEntryHandler+0x34>)
 8003b74:	2203      	movs	r2, #3
 8003b76:	701a      	strb	r2, [r3, #0]

	// set the rotary encoder limits to 0-? for this menu
	ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
 8003b78:	4b08      	ldr	r3, [pc, #32]	; (8003b9c <FreqAdjustMenuEntryHandler+0x38>)
 8003b7a:	4a09      	ldr	r2, [pc, #36]	; (8003ba0 <FreqAdjustMenuEntryHandler+0x3c>)
 8003b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b7e:	6253      	str	r3, [r2, #36]	; 0x24
	ENCODER_TIMER->ARR = 65535;
 8003b80:	4b07      	ldr	r3, [pc, #28]	; (8003ba0 <FreqAdjustMenuEntryHandler+0x3c>)
 8003b82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b86:	62da      	str	r2, [r3, #44]	; 0x2c

	// stay in this state
	eNewEvent = evIdle;
 8003b88:	4b06      	ldr	r3, [pc, #24]	; (8003ba4 <FreqAdjustMenuEntryHandler+0x40>)
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	701a      	strb	r2, [r3, #0]
	return Freq_Adjust_Menu_State;
 8003b8e:	230c      	movs	r3, #12
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	bd80      	pop	{r7, pc}
 8003b94:	0801113c 	.word	0x0801113c
 8003b98:	20001f15 	.word	0x20001f15
 8003b9c:	40013400 	.word	0x40013400
 8003ba0:	40012c00 	.word	0x40012c00
 8003ba4:	20001f13 	.word	0x20001f13

08003ba8 <FreqAdjustMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuInputHandler()
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqAdjustMenuInputHandler Event captured\n");
 8003bac:	4805      	ldr	r0, [pc, #20]	; (8003bc4 <FreqAdjustMenuInputHandler+0x1c>)
 8003bae:	f00a ffa1 	bl	800eaf4 <puts>
	#endif

	FreqO_AdjustFreq();
 8003bb2:	f000 fdcb 	bl	800474c <FreqO_AdjustFreq>

	// stay in this state
	eNewEvent = evIdle;
 8003bb6:	4b04      	ldr	r3, [pc, #16]	; (8003bc8 <FreqAdjustMenuInputHandler+0x20>)
 8003bb8:	2200      	movs	r2, #0
 8003bba:	701a      	strb	r2, [r3, #0]
	return Freq_Adjust_Menu_State;
 8003bbc:	230c      	movs	r3, #12
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	08011168 	.word	0x08011168
 8003bc8:	20001f13 	.word	0x20001f13

08003bcc <FreqAdjustMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuExitHandler()
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqAdjustMenuExitHandler Event captured\n");
 8003bd0:	4806      	ldr	r0, [pc, #24]	; (8003bec <FreqAdjustMenuExitHandler+0x20>)
 8003bd2:	f00a ff8f 	bl	800eaf4 <puts>
	#endif

	DM_RefreshScreen();
 8003bd6:	f7fd fa6d 	bl	80010b4 <DM_RefreshScreen>

	// disable the menu
	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 8003bda:	4b05      	ldr	r3, [pc, #20]	; (8003bf0 <FreqAdjustMenuExitHandler+0x24>)
 8003bdc:	2201      	movs	r2, #1
 8003bde:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 8003be0:	4b04      	ldr	r3, [pc, #16]	; (8003bf4 <FreqAdjustMenuExitHandler+0x28>)
 8003be2:	2200      	movs	r2, #0
 8003be4:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8003be6:	230a      	movs	r3, #10
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	08011194 	.word	0x08011194
 8003bf0:	20001f15 	.word	0x20001f15
 8003bf4:	20001f13 	.word	0x20001f13

08003bf8 <FreqSweepMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqSweepMenuEntryHandler()
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqSweepMenuEntryHandler captured\n");
 8003bfc:	4810      	ldr	r0, [pc, #64]	; (8003c40 <FreqSweepMenuEntryHandler+0x48>)
 8003bfe:	f00a ff79 	bl	800eaf4 <puts>
	#endif

	DM_RefreshScreen();
 8003c02:	f7fd fa57 	bl	80010b4 <DM_RefreshScreen>

	// pause sweep, wait for user input (evSweepEnable) to restart
	//SWEEP_TIMER->CR1 ^= TIM_CR1_CEN;

	// encoder start value
	ENCODER_TIMER->CNT = 1;
 8003c06:	4b0f      	ldr	r3, [pc, #60]	; (8003c44 <FreqSweepMenuEntryHandler+0x4c>)
 8003c08:	2201      	movs	r2, #1
 8003c0a:	625a      	str	r2, [r3, #36]	; 0x24
	// encoder limit
	ENCODER_TIMER->ARR = 65535;
 8003c0c:	4b0d      	ldr	r3, [pc, #52]	; (8003c44 <FreqSweepMenuEntryHandler+0x4c>)
 8003c0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c12:	62da      	str	r2, [r3, #44]	; 0x2c

	// reset sweep start value
	SWEEP_TIMER->CNT = 0;
 8003c14:	4b0c      	ldr	r3, [pc, #48]	; (8003c48 <FreqSweepMenuEntryHandler+0x50>)
 8003c16:	2200      	movs	r2, #0
 8003c18:	625a      	str	r2, [r3, #36]	; 0x24

	// sweep start speed
	SWEEP_TIMER->ARR = min_arr;
 8003c1a:	4b0c      	ldr	r3, [pc, #48]	; (8003c4c <FreqSweepMenuEntryHandler+0x54>)
 8003c1c:	881a      	ldrh	r2, [r3, #0]
 8003c1e:	4b0a      	ldr	r3, [pc, #40]	; (8003c48 <FreqSweepMenuEntryHandler+0x50>)
 8003c20:	62da      	str	r2, [r3, #44]	; 0x2c
	SWEEP_TIMER->PSC = 0;
 8003c22:	4b09      	ldr	r3, [pc, #36]	; (8003c48 <FreqSweepMenuEntryHandler+0x50>)
 8003c24:	2200      	movs	r2, #0
 8003c26:	629a      	str	r2, [r3, #40]	; 0x28

	// do stuff
	FreqSweepMenuInputHandler(evSweepSpeed);
 8003c28:	2009      	movs	r0, #9
 8003c2a:	f000 f815 	bl	8003c58 <FreqSweepMenuInputHandler>

	// get ready to load menu
	eNextFreqMenuStatus = ENABLE_FREQ_SWEEP_MENU;
 8003c2e:	4b08      	ldr	r3, [pc, #32]	; (8003c50 <FreqSweepMenuEntryHandler+0x58>)
 8003c30:	2204      	movs	r2, #4
 8003c32:	701a      	strb	r2, [r3, #0]


	// stay in this state
	eNewEvent = evIdle;
 8003c34:	4b07      	ldr	r3, [pc, #28]	; (8003c54 <FreqSweepMenuEntryHandler+0x5c>)
 8003c36:	2200      	movs	r2, #0
 8003c38:	701a      	strb	r2, [r3, #0]
	return Freq_Sweep_Menu_State;
 8003c3a:	230d      	movs	r3, #13
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	080111c0 	.word	0x080111c0
 8003c44:	40012c00 	.word	0x40012c00
 8003c48:	40000c00 	.word	0x40000c00
 8003c4c:	20000008 	.word	0x20000008
 8003c50:	20001f15 	.word	0x20001f15
 8003c54:	20001f13 	.word	0x20001f13

08003c58 <FreqSweepMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqSweepMenuInputHandler(eSystemEvent pEvent)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b082      	sub	sp, #8
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	4603      	mov	r3, r0
 8003c60:	71fb      	strb	r3, [r7, #7]
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqAdjustMenuInputHandler Event captured\n");
 8003c62:	4849      	ldr	r0, [pc, #292]	; (8003d88 <FreqSweepMenuInputHandler+0x130>)
 8003c64:	f00a ff46 	bl	800eaf4 <puts>
	#endif



	switch(pEvent)
 8003c68:	79fb      	ldrb	r3, [r7, #7]
 8003c6a:	2b08      	cmp	r3, #8
 8003c6c:	d014      	beq.n	8003c98 <FreqSweepMenuInputHandler+0x40>
 8003c6e:	2b09      	cmp	r3, #9
 8003c70:	d047      	beq.n	8003d02 <FreqSweepMenuInputHandler+0xaa>
 8003c72:	2b07      	cmp	r3, #7
 8003c74:	d000      	beq.n	8003c78 <FreqSweepMenuInputHandler+0x20>

			break;

		default:
			// don't care about other eSystemEvent
			break;
 8003c76:	e07f      	b.n	8003d78 <FreqSweepMenuInputHandler+0x120>
				printf("evSweepEnable captured\n");
 8003c78:	4844      	ldr	r0, [pc, #272]	; (8003d8c <FreqSweepMenuInputHandler+0x134>)
 8003c7a:	f00a ff3b 	bl	800eaf4 <puts>
			SWEEP_TIMER->DIER 	^= TIM_DIER_UIE;
 8003c7e:	4b44      	ldr	r3, [pc, #272]	; (8003d90 <FreqSweepMenuInputHandler+0x138>)
 8003c80:	68db      	ldr	r3, [r3, #12]
 8003c82:	4a43      	ldr	r2, [pc, #268]	; (8003d90 <FreqSweepMenuInputHandler+0x138>)
 8003c84:	f083 0301 	eor.w	r3, r3, #1
 8003c88:	60d3      	str	r3, [r2, #12]
			SWEEP_TIMER->CR1	^= TIM_CR1_CEN;
 8003c8a:	4b41      	ldr	r3, [pc, #260]	; (8003d90 <FreqSweepMenuInputHandler+0x138>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a40      	ldr	r2, [pc, #256]	; (8003d90 <FreqSweepMenuInputHandler+0x138>)
 8003c90:	f083 0301 	eor.w	r3, r3, #1
 8003c94:	6013      	str	r3, [r2, #0]
			break;
 8003c96:	e06f      	b.n	8003d78 <FreqSweepMenuInputHandler+0x120>
				printf("evSweepMode captured\n");
 8003c98:	483e      	ldr	r0, [pc, #248]	; (8003d94 <FreqSweepMenuInputHandler+0x13c>)
 8003c9a:	f00a ff2b 	bl	800eaf4 <puts>
			active_sweep_mode++;
 8003c9e:	4b3e      	ldr	r3, [pc, #248]	; (8003d98 <FreqSweepMenuInputHandler+0x140>)
 8003ca0:	781b      	ldrb	r3, [r3, #0]
 8003ca2:	3301      	adds	r3, #1
 8003ca4:	b2da      	uxtb	r2, r3
 8003ca6:	4b3c      	ldr	r3, [pc, #240]	; (8003d98 <FreqSweepMenuInputHandler+0x140>)
 8003ca8:	701a      	strb	r2, [r3, #0]
			if(active_sweep_mode > 3)
 8003caa:	4b3b      	ldr	r3, [pc, #236]	; (8003d98 <FreqSweepMenuInputHandler+0x140>)
 8003cac:	781b      	ldrb	r3, [r3, #0]
 8003cae:	2b03      	cmp	r3, #3
 8003cb0:	d902      	bls.n	8003cb8 <FreqSweepMenuInputHandler+0x60>
				active_sweep_mode = 0;
 8003cb2:	4b39      	ldr	r3, [pc, #228]	; (8003d98 <FreqSweepMenuInputHandler+0x140>)
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	701a      	strb	r2, [r3, #0]
			switch(active_sweep_mode)
 8003cb8:	4b37      	ldr	r3, [pc, #220]	; (8003d98 <FreqSweepMenuInputHandler+0x140>)
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d011      	beq.n	8003ce4 <FreqSweepMenuInputHandler+0x8c>
 8003cc0:	2b02      	cmp	r3, #2
 8003cc2:	d01c      	beq.n	8003cfe <FreqSweepMenuInputHandler+0xa6>
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d000      	beq.n	8003cca <FreqSweepMenuInputHandler+0x72>
			break;
 8003cc8:	e056      	b.n	8003d78 <FreqSweepMenuInputHandler+0x120>
					SWEEP_TIMER->CR1 |= (TIM_CR1_DIR);
 8003cca:	4b31      	ldr	r3, [pc, #196]	; (8003d90 <FreqSweepMenuInputHandler+0x138>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a30      	ldr	r2, [pc, #192]	; (8003d90 <FreqSweepMenuInputHandler+0x138>)
 8003cd0:	f043 0310 	orr.w	r3, r3, #16
 8003cd4:	6013      	str	r3, [r2, #0]
					SWEEP_TIMER->CR1 &= ~((TIM_CR1_CMS_0) | (TIM_CR1_CMS_1));
 8003cd6:	4b2e      	ldr	r3, [pc, #184]	; (8003d90 <FreqSweepMenuInputHandler+0x138>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a2d      	ldr	r2, [pc, #180]	; (8003d90 <FreqSweepMenuInputHandler+0x138>)
 8003cdc:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8003ce0:	6013      	str	r3, [r2, #0]
					break;
 8003ce2:	e00d      	b.n	8003d00 <FreqSweepMenuInputHandler+0xa8>
					SWEEP_TIMER->CR1 &= ~(TIM_CR1_DIR);
 8003ce4:	4b2a      	ldr	r3, [pc, #168]	; (8003d90 <FreqSweepMenuInputHandler+0x138>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a29      	ldr	r2, [pc, #164]	; (8003d90 <FreqSweepMenuInputHandler+0x138>)
 8003cea:	f023 0310 	bic.w	r3, r3, #16
 8003cee:	6013      	str	r3, [r2, #0]
					SWEEP_TIMER->CR1 &= ~((TIM_CR1_CMS_0) | (TIM_CR1_CMS_1));
 8003cf0:	4b27      	ldr	r3, [pc, #156]	; (8003d90 <FreqSweepMenuInputHandler+0x138>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a26      	ldr	r2, [pc, #152]	; (8003d90 <FreqSweepMenuInputHandler+0x138>)
 8003cf6:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8003cfa:	6013      	str	r3, [r2, #0]
					break;
 8003cfc:	e000      	b.n	8003d00 <FreqSweepMenuInputHandler+0xa8>
					break;
 8003cfe:	bf00      	nop
			break;
 8003d00:	e03a      	b.n	8003d78 <FreqSweepMenuInputHandler+0x120>
				printf("evSweepSpeed captured\n");
 8003d02:	4826      	ldr	r0, [pc, #152]	; (8003d9c <FreqSweepMenuInputHandler+0x144>)
 8003d04:	f00a fef6 	bl	800eaf4 <puts>
			SWEEP_TIMER->PSC = min_arr + ((ENCODER_TIMER->CNT*ENCODER_TIMER->CNT*ENCODER_TIMER->CNT));
 8003d08:	4b25      	ldr	r3, [pc, #148]	; (8003da0 <FreqSweepMenuInputHandler+0x148>)
 8003d0a:	881b      	ldrh	r3, [r3, #0]
 8003d0c:	4619      	mov	r1, r3
 8003d0e:	4b25      	ldr	r3, [pc, #148]	; (8003da4 <FreqSweepMenuInputHandler+0x14c>)
 8003d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d12:	4a24      	ldr	r2, [pc, #144]	; (8003da4 <FreqSweepMenuInputHandler+0x14c>)
 8003d14:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d16:	fb02 f303 	mul.w	r3, r2, r3
 8003d1a:	4a22      	ldr	r2, [pc, #136]	; (8003da4 <FreqSweepMenuInputHandler+0x14c>)
 8003d1c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d1e:	fb02 f303 	mul.w	r3, r2, r3
 8003d22:	4a1b      	ldr	r2, [pc, #108]	; (8003d90 <FreqSweepMenuInputHandler+0x138>)
 8003d24:	440b      	add	r3, r1
 8003d26:	6293      	str	r3, [r2, #40]	; 0x28
			if(SWEEP_TIMER->PSC == 0)
 8003d28:	4b19      	ldr	r3, [pc, #100]	; (8003d90 <FreqSweepMenuInputHandler+0x138>)
 8003d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d10d      	bne.n	8003d4c <FreqSweepMenuInputHandler+0xf4>
				calculated_sweep_in_hertz = (float)SM_MCLK / ((float)1 * (float)SWEEP_TIMER->ARR);
 8003d30:	4b17      	ldr	r3, [pc, #92]	; (8003d90 <FreqSweepMenuInputHandler+0x138>)
 8003d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d34:	ee07 3a90 	vmov	s15, r3
 8003d38:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003d3c:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8003da8 <FreqSweepMenuInputHandler+0x150>
 8003d40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d44:	4b19      	ldr	r3, [pc, #100]	; (8003dac <FreqSweepMenuInputHandler+0x154>)
 8003d46:	edc3 7a00 	vstr	s15, [r3]
			break;
 8003d4a:	e014      	b.n	8003d76 <FreqSweepMenuInputHandler+0x11e>
				calculated_sweep_in_hertz = (float)SM_MCLK / ((float)SWEEP_TIMER->PSC * (float)SWEEP_TIMER->ARR);
 8003d4c:	4b10      	ldr	r3, [pc, #64]	; (8003d90 <FreqSweepMenuInputHandler+0x138>)
 8003d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d50:	ee07 3a90 	vmov	s15, r3
 8003d54:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003d58:	4b0d      	ldr	r3, [pc, #52]	; (8003d90 <FreqSweepMenuInputHandler+0x138>)
 8003d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d5c:	ee07 3a90 	vmov	s15, r3
 8003d60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d64:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d68:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8003da8 <FreqSweepMenuInputHandler+0x150>
 8003d6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d70:	4b0e      	ldr	r3, [pc, #56]	; (8003dac <FreqSweepMenuInputHandler+0x154>)
 8003d72:	edc3 7a00 	vstr	s15, [r3]
			break;
 8003d76:	bf00      	nop
	}

	// stay in this state
	eNewEvent = evIdle;
 8003d78:	4b0d      	ldr	r3, [pc, #52]	; (8003db0 <FreqSweepMenuInputHandler+0x158>)
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	701a      	strb	r2, [r3, #0]
	return Freq_Sweep_Menu_State;
 8003d7e:	230d      	movs	r3, #13
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3708      	adds	r7, #8
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}
 8003d88:	08011168 	.word	0x08011168
 8003d8c:	080111e4 	.word	0x080111e4
 8003d90:	40000c00 	.word	0x40000c00
 8003d94:	080111fc 	.word	0x080111fc
 8003d98:	20001f14 	.word	0x20001f14
 8003d9c:	08011214 	.word	0x08011214
 8003da0:	20000008 	.word	0x20000008
 8003da4:	40012c00 	.word	0x40012c00
 8003da8:	4d2037a0 	.word	0x4d2037a0
 8003dac:	20001f30 	.word	0x20001f30
 8003db0:	20001f13 	.word	0x20001f13

08003db4 <FreqSweepMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqSweepMenuExitHandler()
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqSweepMenuExitHandler Event captured\n");
 8003db8:	480c      	ldr	r0, [pc, #48]	; (8003dec <FreqSweepMenuExitHandler+0x38>)
 8003dba:	f00a fe9b 	bl	800eaf4 <puts>
	#endif

	DM_RefreshScreen();
 8003dbe:	f7fd f979 	bl	80010b4 <DM_RefreshScreen>

	// disable sweep timer and interrupts
	SWEEP_TIMER->DIER 	&= ~(TIM_DIER_UIE);
 8003dc2:	4b0b      	ldr	r3, [pc, #44]	; (8003df0 <FreqSweepMenuExitHandler+0x3c>)
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	4a0a      	ldr	r2, [pc, #40]	; (8003df0 <FreqSweepMenuExitHandler+0x3c>)
 8003dc8:	f023 0301 	bic.w	r3, r3, #1
 8003dcc:	60d3      	str	r3, [r2, #12]
	SWEEP_TIMER->CR1 	&= ~(TIM_CR1_CEN);
 8003dce:	4b08      	ldr	r3, [pc, #32]	; (8003df0 <FreqSweepMenuExitHandler+0x3c>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a07      	ldr	r2, [pc, #28]	; (8003df0 <FreqSweepMenuExitHandler+0x3c>)
 8003dd4:	f023 0301 	bic.w	r3, r3, #1
 8003dd8:	6013      	str	r3, [r2, #0]



	// disable the menu
	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 8003dda:	4b06      	ldr	r3, [pc, #24]	; (8003df4 <FreqSweepMenuExitHandler+0x40>)
 8003ddc:	2201      	movs	r2, #1
 8003dde:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 8003de0:	4b05      	ldr	r3, [pc, #20]	; (8003df8 <FreqSweepMenuExitHandler+0x44>)
 8003de2:	2200      	movs	r2, #0
 8003de4:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8003de6:	230a      	movs	r3, #10
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	0801122c 	.word	0x0801122c
 8003df0:	40000c00 	.word	0x40000c00
 8003df4:	20001f15 	.word	0x20001f15
 8003df8:	20001f13 	.word	0x20001f13

08003dfc <FuncMenu_getStatus>:
#include <stdio.h>

eFuncMenu_Status eNextFuncMenuStatus = 	DISABLE_FUNC_MENU;

eFuncMenu_Status FuncMenu_getStatus()
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	af00      	add	r7, sp, #0
	return eNextFuncMenuStatus;
 8003e00:	4b03      	ldr	r3, [pc, #12]	; (8003e10 <FuncMenu_getStatus+0x14>)
 8003e02:	781b      	ldrb	r3, [r3, #0]
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr
 8003e0e:	bf00      	nop
 8003e10:	20001f16 	.word	0x20001f16

08003e14 <FuncMainMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncMainMenuEntryHandler(void)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("FuncMainMenuEntryHandler Event captured\n");
 8003e18:	4806      	ldr	r0, [pc, #24]	; (8003e34 <FuncMainMenuEntryHandler+0x20>)
 8003e1a:	f00a fe6b 	bl	800eaf4 <puts>
#endif

	DM_RefreshScreen();
 8003e1e:	f7fd f949 	bl	80010b4 <DM_RefreshScreen>


	eNextFuncMenuStatus = 	ENABLE_FUNC_MAIN_MENU;
 8003e22:	4b05      	ldr	r3, [pc, #20]	; (8003e38 <FuncMainMenuEntryHandler+0x24>)
 8003e24:	2201      	movs	r2, #1
 8003e26:	701a      	strb	r2, [r3, #0]
	else
	{
		DM_SetErrorDebugMsg("_FuncMenuEntryHandler: func_profileTmp null pointer");
	}
*/
	eNewEvent = evIdle;
 8003e28:	4b04      	ldr	r3, [pc, #16]	; (8003e3c <FuncMainMenuEntryHandler+0x28>)
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 8003e2e:	2303      	movs	r3, #3
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	bd80      	pop	{r7, pc}
 8003e34:	08011254 	.word	0x08011254
 8003e38:	20001f16 	.word	0x20001f16
 8003e3c:	20001f13 	.word	0x20001f13

08003e40 <FuncMainMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncMainMenuExitHandler()
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("FuncMainMenuExitHandler Event captured\n");
 8003e44:	4808      	ldr	r0, [pc, #32]	; (8003e68 <FuncMainMenuExitHandler+0x28>)
 8003e46:	f00a fe55 	bl	800eaf4 <puts>
#endif

	// disable the menu

	eNextFuncMenuStatus = 	DISABLE_FUNC_MENU;
 8003e4a:	4b08      	ldr	r3, [pc, #32]	; (8003e6c <FuncMainMenuExitHandler+0x2c>)
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

//	ENCODER_TIMER->ARR = 1024;

	DM_RefreshScreen();
 8003e50:	f7fd f930 	bl	80010b4 <DM_RefreshScreen>

#ifdef SWV_DEBUG_ENABLED
	  printf("returning to Idle State\n");
 8003e54:	4806      	ldr	r0, [pc, #24]	; (8003e70 <FuncMainMenuExitHandler+0x30>)
 8003e56:	f00a fe4d 	bl	800eaf4 <puts>
#endif

	eNewEvent = evIdle;
 8003e5a:	4b06      	ldr	r3, [pc, #24]	; (8003e74 <FuncMainMenuExitHandler+0x34>)
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 8003e60:	2301      	movs	r3, #1
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	080112a4 	.word	0x080112a4
 8003e6c:	20001f16 	.word	0x20001f16
 8003e70:	080112cc 	.word	0x080112cc
 8003e74:	20001f13 	.word	0x20001f13

08003e78 <FuncSignalMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuEntryHandler(void)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b082      	sub	sp, #8
 8003e7c:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("FuncSignalMenuEntryHandler Event captured\n");
 8003e7e:	4814      	ldr	r0, [pc, #80]	; (8003ed0 <FuncSignalMenuEntryHandler+0x58>)
 8003e80:	f00a fe38 	bl	800eaf4 <puts>
#endif

	DM_RefreshScreen();
 8003e84:	f7fd f916 	bl	80010b4 <DM_RefreshScreen>

	eNextFuncMenuStatus = 	ENABLE_FUNC_SIGNAL_MENU;
 8003e88:	4b12      	ldr	r3, [pc, #72]	; (8003ed4 <FuncSignalMenuEntryHandler+0x5c>)
 8003e8a:	2202      	movs	r2, #2
 8003e8c:	701a      	strb	r2, [r3, #0]

	//FunctionProfile_t *func_profileTmp =  FuncO_GetSignalFPresetObject();
	FunctionProfile_t *func_profileTmp = SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile;
 8003e8e:	2000      	movs	r0, #0
 8003e90:	f001 f8dc 	bl	800504c <SM_GetOutputChannel>
 8003e94:	4603      	mov	r3, r0
 8003e96:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8003e9a:	607b      	str	r3, [r7, #4]
	if(func_profileTmp)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d00a      	beq.n	8003eb8 <FuncSignalMenuEntryHandler+0x40>
	{
		ENCODER_TIMER->CNT = func_profileTmp->epos;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	785a      	ldrb	r2, [r3, #1]
 8003ea6:	4b0c      	ldr	r3, [pc, #48]	; (8003ed8 <FuncSignalMenuEntryHandler+0x60>)
 8003ea8:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = FuncO_GetFuncPresetEncoderRange();
 8003eaa:	f000 feff 	bl	8004cac <FuncO_GetFuncPresetEncoderRange>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	4b09      	ldr	r3, [pc, #36]	; (8003ed8 <FuncSignalMenuEntryHandler+0x60>)
 8003eb4:	62da      	str	r2, [r3, #44]	; 0x2c
 8003eb6:	e002      	b.n	8003ebe <FuncSignalMenuEntryHandler+0x46>
	}
	else
	{
		DM_SetErrorDebugMsg("_FuncMenuEntryHandler: func_profileTmp null pointer");
 8003eb8:	4808      	ldr	r0, [pc, #32]	; (8003edc <FuncSignalMenuEntryHandler+0x64>)
 8003eba:	f7fd f945 	bl	8001148 <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 8003ebe:	4b08      	ldr	r3, [pc, #32]	; (8003ee0 <FuncSignalMenuEntryHandler+0x68>)
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	701a      	strb	r2, [r3, #0]
	return Func_Signal_Menu_State;
 8003ec4:	2304      	movs	r3, #4
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3708      	adds	r7, #8
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	080112e4 	.word	0x080112e4
 8003ed4:	20001f16 	.word	0x20001f16
 8003ed8:	40012c00 	.word	0x40012c00
 8003edc:	08011310 	.word	0x08011310
 8003ee0:	20001f13 	.word	0x20001f13

08003ee4 <FuncSignalMenuInputHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuInputHandler(void)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("FuncSignalMenuInputHandler Event captured\n");
 8003ee8:	4807      	ldr	r0, [pc, #28]	; (8003f08 <FuncSignalMenuInputHandler+0x24>)
 8003eea:	f00a fe03 	bl	800eaf4 <puts>
#endif


	FuncO_ModifySignalOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 8003eee:	2001      	movs	r0, #1
 8003ef0:	f001 f8c2 	bl	8005078 <SM_GetEncoderValue>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f000 fd6e 	bl	80049d8 <FuncO_ModifySignalOutput>
	eNewEvent = evBlueBtn;
 8003efc:	4b03      	ldr	r3, [pc, #12]	; (8003f0c <FuncSignalMenuInputHandler+0x28>)
 8003efe:	2201      	movs	r2, #1
 8003f00:	701a      	strb	r2, [r3, #0]
	return Func_Signal_Menu_State;
 8003f02:	2304      	movs	r3, #4
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	bd80      	pop	{r7, pc}
 8003f08:	08011344 	.word	0x08011344
 8003f0c:	20001f13 	.word	0x20001f13

08003f10 <FuncSignalMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuExitHandler()
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("FuncSignalMenuExitHandler Event captured\n");
 8003f14:	4806      	ldr	r0, [pc, #24]	; (8003f30 <FuncSignalMenuExitHandler+0x20>)
 8003f16:	f00a fded 	bl	800eaf4 <puts>
#endif

	// disable the menu

	eNextFuncMenuStatus = 	ENABLE_FUNC_MAIN_MENU;
 8003f1a:	4b06      	ldr	r3, [pc, #24]	; (8003f34 <FuncSignalMenuExitHandler+0x24>)
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

//	ENCODER_TIMER->ARR = 1024;

	DM_RefreshScreen();
 8003f20:	f7fd f8c8 	bl	80010b4 <DM_RefreshScreen>

	eNewEvent = evIdle;
 8003f24:	4b04      	ldr	r3, [pc, #16]	; (8003f38 <FuncSignalMenuExitHandler+0x28>)
 8003f26:	2200      	movs	r2, #0
 8003f28:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 8003f2a:	2303      	movs	r3, #3
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	08011370 	.word	0x08011370
 8003f34:	20001f16 	.word	0x20001f16
 8003f38:	20001f13 	.word	0x20001f13

08003f3c <FuncSyncMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSyncMenuEntryHandler(void)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b082      	sub	sp, #8
 8003f40:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("FuncSyncMenuEntryHandler Event captured\n");
 8003f42:	4814      	ldr	r0, [pc, #80]	; (8003f94 <FuncSyncMenuEntryHandler+0x58>)
 8003f44:	f00a fdd6 	bl	800eaf4 <puts>
#endif

	DM_RefreshScreen();
 8003f48:	f7fd f8b4 	bl	80010b4 <DM_RefreshScreen>

	eNextFuncMenuStatus = 	ENABLE_FUNC_SYNC_MENU;
 8003f4c:	4b12      	ldr	r3, [pc, #72]	; (8003f98 <FuncSyncMenuEntryHandler+0x5c>)
 8003f4e:	2203      	movs	r2, #3
 8003f50:	701a      	strb	r2, [r3, #0]

	//FunctionProfile_t *func_profileTmp =  FuncO_GetSyncFPresetObject();
	FunctionProfile_t *func_profileTmp = SM_GetOutputChannel(SYNC_CHANNEL)->func_profile;
 8003f52:	2001      	movs	r0, #1
 8003f54:	f001 f87a 	bl	800504c <SM_GetOutputChannel>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8003f5e:	607b      	str	r3, [r7, #4]
	if(func_profileTmp)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d00a      	beq.n	8003f7c <FuncSyncMenuEntryHandler+0x40>
	{
		ENCODER_TIMER->CNT = func_profileTmp->epos;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	785a      	ldrb	r2, [r3, #1]
 8003f6a:	4b0c      	ldr	r3, [pc, #48]	; (8003f9c <FuncSyncMenuEntryHandler+0x60>)
 8003f6c:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = FuncO_GetFuncPresetEncoderRange();
 8003f6e:	f000 fe9d 	bl	8004cac <FuncO_GetFuncPresetEncoderRange>
 8003f72:	4603      	mov	r3, r0
 8003f74:	461a      	mov	r2, r3
 8003f76:	4b09      	ldr	r3, [pc, #36]	; (8003f9c <FuncSyncMenuEntryHandler+0x60>)
 8003f78:	62da      	str	r2, [r3, #44]	; 0x2c
 8003f7a:	e002      	b.n	8003f82 <FuncSyncMenuEntryHandler+0x46>
	}
	else
	{
		DM_SetErrorDebugMsg("_FuncMenuEntryHandler: func_profileTmp null pointer");
 8003f7c:	4808      	ldr	r0, [pc, #32]	; (8003fa0 <FuncSyncMenuEntryHandler+0x64>)
 8003f7e:	f7fd f8e3 	bl	8001148 <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 8003f82:	4b08      	ldr	r3, [pc, #32]	; (8003fa4 <FuncSyncMenuEntryHandler+0x68>)
 8003f84:	2200      	movs	r2, #0
 8003f86:	701a      	strb	r2, [r3, #0]
	return Func_Sync_Menu_State;
 8003f88:	2305      	movs	r3, #5
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3708      	adds	r7, #8
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	0801139c 	.word	0x0801139c
 8003f98:	20001f16 	.word	0x20001f16
 8003f9c:	40012c00 	.word	0x40012c00
 8003fa0:	08011310 	.word	0x08011310
 8003fa4:	20001f13 	.word	0x20001f13

08003fa8 <FuncSyncMenuInputHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSyncMenuInputHandler(void)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("FuncSyncMenuInputHandler Event captured\n");
 8003fac:	4807      	ldr	r0, [pc, #28]	; (8003fcc <FuncSyncMenuInputHandler+0x24>)
 8003fae:	f00a fda1 	bl	800eaf4 <puts>
#endif


	FuncO_ModifySyncOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 8003fb2:	2001      	movs	r0, #1
 8003fb4:	f001 f860 	bl	8005078 <SM_GetEncoderValue>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f000 fd64 	bl	8004a88 <FuncO_ModifySyncOutput>
	eNewEvent = evBlueBtn;
 8003fc0:	4b03      	ldr	r3, [pc, #12]	; (8003fd0 <FuncSyncMenuInputHandler+0x28>)
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	701a      	strb	r2, [r3, #0]
	return Func_Sync_Menu_State;
 8003fc6:	2305      	movs	r3, #5
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	080113c4 	.word	0x080113c4
 8003fd0:	20001f13 	.word	0x20001f13

08003fd4 <FuncSyncMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSyncMenuExitHandler()
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("FuncSyncMenuExitHandler Event captured\n");
 8003fd8:	4806      	ldr	r0, [pc, #24]	; (8003ff4 <FuncSyncMenuExitHandler+0x20>)
 8003fda:	f00a fd8b 	bl	800eaf4 <puts>
#endif

	// disable the menu

	eNextFuncMenuStatus = 	ENABLE_FUNC_MAIN_MENU;
 8003fde:	4b06      	ldr	r3, [pc, #24]	; (8003ff8 <FuncSyncMenuExitHandler+0x24>)
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

	//ENCODER_TIMER->ARR = 1024;

	DM_RefreshScreen();
 8003fe4:	f7fd f866 	bl	80010b4 <DM_RefreshScreen>

	eNewEvent = evIdle;
 8003fe8:	4b04      	ldr	r3, [pc, #16]	; (8003ffc <FuncSyncMenuExitHandler+0x28>)
 8003fea:	2200      	movs	r2, #0
 8003fec:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 8003fee:	2303      	movs	r3, #3
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	080113ec 	.word	0x080113ec
 8003ff8:	20001f16 	.word	0x20001f16
 8003ffc:	20001f13 	.word	0x20001f13

08004000 <GainMenu_getStatus>:
#include <stdio.h>

eGainMenu_Status eNextGainMenuStatus = 	DISABLE_GAIN_MENU;

eGainMenu_Status GainMenu_getStatus()
{
 8004000:	b480      	push	{r7}
 8004002:	af00      	add	r7, sp, #0
	return eNextGainMenuStatus;
 8004004:	4b03      	ldr	r3, [pc, #12]	; (8004014 <GainMenu_getStatus+0x14>)
 8004006:	781b      	ldrb	r3, [r3, #0]
}
 8004008:	4618      	mov	r0, r3
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr
 8004012:	bf00      	nop
 8004014:	20001f17 	.word	0x20001f17

08004018 <GainMainMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainMainMenuEntryHandler()
{
 8004018:	b580      	push	{r7, lr}
 800401a:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("GainMainMenuEntryHandler Event captured\n");
 800401c:	4806      	ldr	r0, [pc, #24]	; (8004038 <GainMainMenuEntryHandler+0x20>)
 800401e:	f00a fd69 	bl	800eaf4 <puts>
#endif

	DM_RefreshScreen();
 8004022:	f7fd f847 	bl	80010b4 <DM_RefreshScreen>

	eNextGainMenuStatus = ENABLE_GAIN_MAIN_MENU;
 8004026:	4b05      	ldr	r3, [pc, #20]	; (800403c <GainMainMenuEntryHandler+0x24>)
 8004028:	2201      	movs	r2, #1
 800402a:	701a      	strb	r2, [r3, #0]

	eNewEvent = evIdle;
 800402c:	4b04      	ldr	r3, [pc, #16]	; (8004040 <GainMainMenuEntryHandler+0x28>)
 800402e:	2200      	movs	r2, #0
 8004030:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 8004032:	2306      	movs	r3, #6
}
 8004034:	4618      	mov	r0, r3
 8004036:	bd80      	pop	{r7, pc}
 8004038:	08011414 	.word	0x08011414
 800403c:	20001f17 	.word	0x20001f17
 8004040:	20001f13 	.word	0x20001f13

08004044 <GainMainMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainMainMenuExitHandler()
{
 8004044:	b580      	push	{r7, lr}
 8004046:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("GainMainMenuExitHandler Event captured\n");
 8004048:	4808      	ldr	r0, [pc, #32]	; (800406c <GainMainMenuExitHandler+0x28>)
 800404a:	f00a fd53 	bl	800eaf4 <puts>
#endif

	eNextGainMenuStatus = DISABLE_GAIN_MENU;
 800404e:	4b08      	ldr	r3, [pc, #32]	; (8004070 <GainMainMenuExitHandler+0x2c>)
 8004050:	2200      	movs	r2, #0
 8004052:	701a      	strb	r2, [r3, #0]

	DM_RefreshScreen();
 8004054:	f7fd f82e 	bl	80010b4 <DM_RefreshScreen>

#ifdef SWV_DEBUG_ENABLED
	  printf("returning to Idle State\n");
 8004058:	4806      	ldr	r0, [pc, #24]	; (8004074 <GainMainMenuExitHandler+0x30>)
 800405a:	f00a fd4b 	bl	800eaf4 <puts>
#endif

	eNewEvent = evIdle;
 800405e:	4b06      	ldr	r3, [pc, #24]	; (8004078 <GainMainMenuExitHandler+0x34>)
 8004060:	2200      	movs	r2, #0
 8004062:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 8004064:	2301      	movs	r3, #1
}
 8004066:	4618      	mov	r0, r3
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	08011464 	.word	0x08011464
 8004070:	20001f17 	.word	0x20001f17
 8004074:	0801148c 	.word	0x0801148c
 8004078:	20001f13 	.word	0x20001f13

0800407c <GainSignalMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuEntryHandler()
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b082      	sub	sp, #8
 8004080:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("GainSignalMenuEntryHandler Event captured\n");
 8004082:	4813      	ldr	r0, [pc, #76]	; (80040d0 <GainSignalMenuEntryHandler+0x54>)
 8004084:	f00a fd36 	bl	800eaf4 <puts>
#endif

	DM_RefreshScreen();
 8004088:	f7fd f814 	bl	80010b4 <DM_RefreshScreen>

	eNextGainMenuStatus = ENABLE_GAIN_SIGNAL_MENU;
 800408c:	4b11      	ldr	r3, [pc, #68]	; (80040d4 <GainSignalMenuEntryHandler+0x58>)
 800408e:	2202      	movs	r2, #2
 8004090:	701a      	strb	r2, [r3, #0]

	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile;
 8004092:	2000      	movs	r0, #0
 8004094:	f000 ffda 	bl	800504c <SM_GetOutputChannel>
 8004098:	4603      	mov	r3, r0
 800409a:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 800409e:	607b      	str	r3, [r7, #4]

	if(pTmpVppPreset)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d008      	beq.n	80040b8 <GainSignalMenuEntryHandler+0x3c>
	{
		ENCODER_TIMER->CNT = pTmpVppPreset->epos;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	8b1a      	ldrh	r2, [r3, #24]
 80040aa:	4b0b      	ldr	r3, [pc, #44]	; (80040d8 <GainSignalMenuEntryHandler+0x5c>)
 80040ac:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = MAX_VPP_ENCODER_RANGE;
 80040ae:	4b0a      	ldr	r3, [pc, #40]	; (80040d8 <GainSignalMenuEntryHandler+0x5c>)
 80040b0:	f44f 72c7 	mov.w	r2, #398	; 0x18e
 80040b4:	62da      	str	r2, [r3, #44]	; 0x2c
 80040b6:	e002      	b.n	80040be <GainSignalMenuEntryHandler+0x42>
	}
	else
	{
		DM_SetErrorDebugMsg("GainMainMenuEntryHandler: pVppPresetTmp null pointer");
 80040b8:	4808      	ldr	r0, [pc, #32]	; (80040dc <GainSignalMenuEntryHandler+0x60>)
 80040ba:	f7fd f845 	bl	8001148 <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 80040be:	4b08      	ldr	r3, [pc, #32]	; (80040e0 <GainSignalMenuEntryHandler+0x64>)
 80040c0:	2200      	movs	r2, #0
 80040c2:	701a      	strb	r2, [r3, #0]
	return Gain_Signal_Menu_State;
 80040c4:	2307      	movs	r3, #7
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3708      	adds	r7, #8
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	080114a4 	.word	0x080114a4
 80040d4:	20001f17 	.word	0x20001f17
 80040d8:	40012c00 	.word	0x40012c00
 80040dc:	080114d0 	.word	0x080114d0
 80040e0:	20001f13 	.word	0x20001f13

080040e4 <GainSignalMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuInputHandler()
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("GainSignalMenuInputHandler Event captured\n");
 80040e8:	4807      	ldr	r0, [pc, #28]	; (8004108 <GainSignalMenuInputHandler+0x24>)
 80040ea:	f00a fd03 	bl	800eaf4 <puts>
#endif

	//GO_ModifyOutput(SMGetEncoderValue(ENCODER_REVERSE));
	VPP_ModifySignalOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 80040ee:	2001      	movs	r0, #1
 80040f0:	f000 ffc2 	bl	8005078 <SM_GetEncoderValue>
 80040f4:	4603      	mov	r3, r0
 80040f6:	4618      	mov	r0, r3
 80040f8:	f001 f976 	bl	80053e8 <VPP_ModifySignalOutput>

	eNewEvent = evYellowBtn;
 80040fc:	4b03      	ldr	r3, [pc, #12]	; (800410c <GainSignalMenuInputHandler+0x28>)
 80040fe:	2203      	movs	r2, #3
 8004100:	701a      	strb	r2, [r3, #0]
	return Gain_Signal_Menu_State;
 8004102:	2307      	movs	r3, #7
}
 8004104:	4618      	mov	r0, r3
 8004106:	bd80      	pop	{r7, pc}
 8004108:	08011508 	.word	0x08011508
 800410c:	20001f13 	.word	0x20001f13

08004110 <GainSignalMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuExitHandler()
{
 8004110:	b580      	push	{r7, lr}
 8004112:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("GainSignalMenuExitHandler Event captured\n");
 8004114:	4806      	ldr	r0, [pc, #24]	; (8004130 <GainSignalMenuExitHandler+0x20>)
 8004116:	f00a fced 	bl	800eaf4 <puts>
#endif

	eNextGainMenuStatus = ENABLE_GAIN_MAIN_MENU;
 800411a:	4b06      	ldr	r3, [pc, #24]	; (8004134 <GainSignalMenuExitHandler+0x24>)
 800411c:	2201      	movs	r2, #1
 800411e:	701a      	strb	r2, [r3, #0]

	DM_RefreshScreen();
 8004120:	f7fc ffc8 	bl	80010b4 <DM_RefreshScreen>

	eNewEvent = evIdle;
 8004124:	4b04      	ldr	r3, [pc, #16]	; (8004138 <GainSignalMenuExitHandler+0x28>)
 8004126:	2200      	movs	r2, #0
 8004128:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 800412a:	2306      	movs	r3, #6
}
 800412c:	4618      	mov	r0, r3
 800412e:	bd80      	pop	{r7, pc}
 8004130:	08011534 	.word	0x08011534
 8004134:	20001f17 	.word	0x20001f17
 8004138:	20001f13 	.word	0x20001f13

0800413c <GainSyncMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSyncMenuEntryHandler()
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b082      	sub	sp, #8
 8004140:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("GainSyncMenuEntryHandler Event captured\n");
 8004142:	4813      	ldr	r0, [pc, #76]	; (8004190 <GainSyncMenuEntryHandler+0x54>)
 8004144:	f00a fcd6 	bl	800eaf4 <puts>
#endif

	DM_RefreshScreen();
 8004148:	f7fc ffb4 	bl	80010b4 <DM_RefreshScreen>

	eNextGainMenuStatus = ENABLE_GAIN_SYNC_MENU;
 800414c:	4b11      	ldr	r3, [pc, #68]	; (8004194 <GainSyncMenuEntryHandler+0x58>)
 800414e:	2203      	movs	r2, #3
 8004150:	701a      	strb	r2, [r3, #0]

	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(SYNC_CHANNEL)->amp_profile;
 8004152:	2001      	movs	r0, #1
 8004154:	f000 ff7a 	bl	800504c <SM_GetOutputChannel>
 8004158:	4603      	mov	r3, r0
 800415a:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 800415e:	607b      	str	r3, [r7, #4]

	if(pTmpVppPreset)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d008      	beq.n	8004178 <GainSyncMenuEntryHandler+0x3c>
	{
		ENCODER_TIMER->CNT = pTmpVppPreset->epos;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	8b1a      	ldrh	r2, [r3, #24]
 800416a:	4b0b      	ldr	r3, [pc, #44]	; (8004198 <GainSyncMenuEntryHandler+0x5c>)
 800416c:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = MAX_VPP_ENCODER_RANGE;
 800416e:	4b0a      	ldr	r3, [pc, #40]	; (8004198 <GainSyncMenuEntryHandler+0x5c>)
 8004170:	f44f 72c7 	mov.w	r2, #398	; 0x18e
 8004174:	62da      	str	r2, [r3, #44]	; 0x2c
 8004176:	e002      	b.n	800417e <GainSyncMenuEntryHandler+0x42>
	}
	else
	{
		DM_SetErrorDebugMsg("GainMainMenuEntryHandler: pVppPresetTmp null pointer");
 8004178:	4808      	ldr	r0, [pc, #32]	; (800419c <GainSyncMenuEntryHandler+0x60>)
 800417a:	f7fc ffe5 	bl	8001148 <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 800417e:	4b08      	ldr	r3, [pc, #32]	; (80041a0 <GainSyncMenuEntryHandler+0x64>)
 8004180:	2200      	movs	r2, #0
 8004182:	701a      	strb	r2, [r3, #0]
	return Gain_Sync_Menu_State;
 8004184:	2308      	movs	r3, #8
}
 8004186:	4618      	mov	r0, r3
 8004188:	3708      	adds	r7, #8
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
 800418e:	bf00      	nop
 8004190:	08011560 	.word	0x08011560
 8004194:	20001f17 	.word	0x20001f17
 8004198:	40012c00 	.word	0x40012c00
 800419c:	080114d0 	.word	0x080114d0
 80041a0:	20001f13 	.word	0x20001f13

080041a4 <GainSyncMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSyncMenuInputHandler()
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("GainSyncMenuInputHandler Event captured\n");
 80041a8:	4807      	ldr	r0, [pc, #28]	; (80041c8 <GainSyncMenuInputHandler+0x24>)
 80041aa:	f00a fca3 	bl	800eaf4 <puts>
#endif

	//GO_ModifyOutput(SMGetEncoderValue(ENCODER_REVERSE));
	VPP_ModifySyncOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 80041ae:	2001      	movs	r0, #1
 80041b0:	f000 ff62 	bl	8005078 <SM_GetEncoderValue>
 80041b4:	4603      	mov	r3, r0
 80041b6:	4618      	mov	r0, r3
 80041b8:	f001 fdc0 	bl	8005d3c <VPP_ModifySyncOutput>

	eNewEvent = evYellowBtn;
 80041bc:	4b03      	ldr	r3, [pc, #12]	; (80041cc <GainSyncMenuInputHandler+0x28>)
 80041be:	2203      	movs	r2, #3
 80041c0:	701a      	strb	r2, [r3, #0]
	return Gain_Sync_Menu_State;
 80041c2:	2308      	movs	r3, #8
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	bd80      	pop	{r7, pc}
 80041c8:	08011588 	.word	0x08011588
 80041cc:	20001f13 	.word	0x20001f13

080041d0 <GainSyncMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSyncMenuExitHandler()
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("GainSyncMenuExitHandler Event captured\n");
 80041d4:	4806      	ldr	r0, [pc, #24]	; (80041f0 <GainSyncMenuExitHandler+0x20>)
 80041d6:	f00a fc8d 	bl	800eaf4 <puts>
#endif

	eNextGainMenuStatus = ENABLE_GAIN_MAIN_MENU;
 80041da:	4b06      	ldr	r3, [pc, #24]	; (80041f4 <GainSyncMenuExitHandler+0x24>)
 80041dc:	2201      	movs	r2, #1
 80041de:	701a      	strb	r2, [r3, #0]

	DM_RefreshScreen();
 80041e0:	f7fc ff68 	bl	80010b4 <DM_RefreshScreen>

	eNewEvent = evIdle;
 80041e4:	4b04      	ldr	r3, [pc, #16]	; (80041f8 <GainSyncMenuExitHandler+0x28>)
 80041e6:	2200      	movs	r2, #0
 80041e8:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 80041ea:	2306      	movs	r3, #6
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	bd80      	pop	{r7, pc}
 80041f0:	080115b0 	.word	0x080115b0
 80041f4:	20001f17 	.word	0x20001f17
 80041f8:	20001f13 	.word	0x20001f13

080041fc <ToplevelMenu_getStatus>:
eToplevelMenu_Status eNextToplevelMenuStatus = 	ENABLE_TOPLEVEL_MAIN_MENU;



eToplevelMenu_Status ToplevelMenu_getStatus()
{
 80041fc:	b480      	push	{r7}
 80041fe:	af00      	add	r7, sp, #0
	return eNextToplevelMenuStatus;
 8004200:	4b03      	ldr	r3, [pc, #12]	; (8004210 <ToplevelMenu_getStatus+0x14>)
 8004202:	781b      	ldrb	r3, [r3, #0]
}
 8004204:	4618      	mov	r0, r3
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr
 800420e:	bf00      	nop
 8004210:	2000000a 	.word	0x2000000a

08004214 <ToplevelMenu_setStatus>:

void ToplevelMenu_setStatus(eToplevelMenu_Status pStatus)
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	4603      	mov	r3, r0
 800421c:	71fb      	strb	r3, [r7, #7]
	eNextToplevelMenuStatus = pStatus;
 800421e:	4a04      	ldr	r2, [pc, #16]	; (8004230 <ToplevelMenu_setStatus+0x1c>)
 8004220:	79fb      	ldrb	r3, [r7, #7]
 8004222:	7013      	strb	r3, [r2, #0]
}
 8004224:	bf00      	nop
 8004226:	370c      	adds	r7, #12
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr
 8004230:	2000000a 	.word	0x2000000a

08004234 <ToplevelOutputMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelOutputMenuEntryHandler()
{
 8004234:	b580      	push	{r7, lr}
 8004236:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("ToplevelOutputMenuEntryHandler Event captured\n");
 8004238:	4806      	ldr	r0, [pc, #24]	; (8004254 <ToplevelOutputMenuEntryHandler+0x20>)
 800423a:	f00a fc5b 	bl	800eaf4 <puts>
	#endif

	DM_RefreshScreen();
 800423e:	f7fc ff39 	bl	80010b4 <DM_RefreshScreen>

	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_OUTPUT_MENU;
 8004242:	4b05      	ldr	r3, [pc, #20]	; (8004258 <ToplevelOutputMenuEntryHandler+0x24>)
 8004244:	2202      	movs	r2, #2
 8004246:	701a      	strb	r2, [r3, #0]




	// stay in this state
	eNewEvent = evIdle;
 8004248:	4b04      	ldr	r3, [pc, #16]	; (800425c <ToplevelOutputMenuEntryHandler+0x28>)
 800424a:	2200      	movs	r2, #0
 800424c:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 800424e:	2301      	movs	r3, #1
}
 8004250:	4618      	mov	r0, r3
 8004252:	bd80      	pop	{r7, pc}
 8004254:	08011674 	.word	0x08011674
 8004258:	2000000a 	.word	0x2000000a
 800425c:	20001f13 	.word	0x20001f13

08004260 <ToplevelOutputMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelOutputMenuExitHandler()
{
 8004260:	b580      	push	{r7, lr}
 8004262:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("ToplevelOutputMenuExitHandler Event captured\n");
 8004264:	4806      	ldr	r0, [pc, #24]	; (8004280 <ToplevelOutputMenuExitHandler+0x20>)
 8004266:	f00a fc45 	bl	800eaf4 <puts>
	#endif

	DM_RefreshScreen();
 800426a:	f7fc ff23 	bl	80010b4 <DM_RefreshScreen>

	// disable the menu
	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_MAIN_MENU;
 800426e:	4b05      	ldr	r3, [pc, #20]	; (8004284 <ToplevelOutputMenuExitHandler+0x24>)
 8004270:	2201      	movs	r2, #1
 8004272:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 8004274:	4b04      	ldr	r3, [pc, #16]	; (8004288 <ToplevelOutputMenuExitHandler+0x28>)
 8004276:	2200      	movs	r2, #0
 8004278:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 800427a:	2300      	movs	r3, #0
}
 800427c:	4618      	mov	r0, r3
 800427e:	bd80      	pop	{r7, pc}
 8004280:	080116d4 	.word	0x080116d4
 8004284:	2000000a 	.word	0x2000000a
 8004288:	20001f13 	.word	0x20001f13

0800428c <ToplevelInputMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelInputMenuEntryHandler()
{
 800428c:	b580      	push	{r7, lr}
 800428e:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("ToplevelInputMenuEntryHandler Event captured\n");
 8004290:	4806      	ldr	r0, [pc, #24]	; (80042ac <ToplevelInputMenuEntryHandler+0x20>)
 8004292:	f00a fc2f 	bl	800eaf4 <puts>
	#endif

	DM_RefreshScreen();
 8004296:	f7fc ff0d 	bl	80010b4 <DM_RefreshScreen>

	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_INPUT_MENU;
 800429a:	4b05      	ldr	r3, [pc, #20]	; (80042b0 <ToplevelInputMenuEntryHandler+0x24>)
 800429c:	2203      	movs	r2, #3
 800429e:	701a      	strb	r2, [r3, #0]




	// stay in this state
	eNewEvent = evIdle;
 80042a0:	4b04      	ldr	r3, [pc, #16]	; (80042b4 <ToplevelInputMenuEntryHandler+0x28>)
 80042a2:	2200      	movs	r2, #0
 80042a4:	701a      	strb	r2, [r3, #0]
	return Toplevel_Input_Menu_State;
 80042a6:	2302      	movs	r3, #2
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	08011704 	.word	0x08011704
 80042b0:	2000000a 	.word	0x2000000a
 80042b4:	20001f13 	.word	0x20001f13

080042b8 <ToplevelInputMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelInputMenuExitHandler()
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("ToplevelInputMenuExitHandler Event captured\n");
 80042bc:	4806      	ldr	r0, [pc, #24]	; (80042d8 <ToplevelInputMenuExitHandler+0x20>)
 80042be:	f00a fc19 	bl	800eaf4 <puts>
	#endif

	DM_RefreshScreen();
 80042c2:	f7fc fef7 	bl	80010b4 <DM_RefreshScreen>

	// disable the menu
	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_MAIN_MENU;
 80042c6:	4b05      	ldr	r3, [pc, #20]	; (80042dc <ToplevelInputMenuExitHandler+0x24>)
 80042c8:	2201      	movs	r2, #1
 80042ca:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 80042cc:	4b04      	ldr	r3, [pc, #16]	; (80042e0 <ToplevelInputMenuExitHandler+0x28>)
 80042ce:	2200      	movs	r2, #0
 80042d0:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 80042d2:	2300      	movs	r3, #0
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	08011764 	.word	0x08011764
 80042dc:	2000000a 	.word	0x2000000a
 80042e0:	20001f13 	.word	0x20001f13

080042e4 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b083      	sub	sp, #12
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 80042ec:	4b07      	ldr	r3, [pc, #28]	; (800430c <LL_EXTI_IsActiveFlag_0_31+0x28>)
 80042ee:	695a      	ldr	r2, [r3, #20]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	4013      	ands	r3, r2
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d101      	bne.n	80042fe <LL_EXTI_IsActiveFlag_0_31+0x1a>
 80042fa:	2301      	movs	r3, #1
 80042fc:	e000      	b.n	8004300 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 80042fe:	2300      	movs	r3, #0
}
 8004300:	4618      	mov	r0, r3
 8004302:	370c      	adds	r7, #12
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr
 800430c:	40010400 	.word	0x40010400

08004310 <IM_Init>:
uint16_t btn4_last_interrupt_time = 0;
uint16_t encbtn_last_interrupt_time = 0;


void IM_Init()
{
 8004310:	b480      	push	{r7}
 8004312:	af00      	add	r7, sp, #0
	  // debounce timer
	  DEBOUNCE_TIMER->CR1 |= TIM_CR1_CEN;
 8004314:	4b05      	ldr	r3, [pc, #20]	; (800432c <IM_Init+0x1c>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a04      	ldr	r2, [pc, #16]	; (800432c <IM_Init+0x1c>)
 800431a:	f043 0301 	orr.w	r3, r3, #1
 800431e:	6013      	str	r3, [r2, #0]
}
 8004320:	bf00      	nop
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr
 800432a:	bf00      	nop
 800432c:	40014400 	.word	0x40014400

08004330 <IM_SWEEPINCREMENT_TIM_IRQHandler>:


void 	IM_SWEEPINCREMENT_TIM_IRQHandler()
{
 8004330:	b480      	push	{r7}
 8004332:	af00      	add	r7, sp, #0
	if((SWEEP_TIMER->CR1 & TIM_CR1_DIR) == TIM_CR1_DIR)
 8004334:	4b09      	ldr	r3, [pc, #36]	; (800435c <IM_SWEEPINCREMENT_TIM_IRQHandler+0x2c>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0310 	and.w	r3, r3, #16
 800433c:	2b10      	cmp	r3, #16
 800433e:	d104      	bne.n	800434a <IM_SWEEPINCREMENT_TIM_IRQHandler+0x1a>
	{
		OUTPUT_TIMER->ARR++;
 8004340:	4b07      	ldr	r3, [pc, #28]	; (8004360 <IM_SWEEPINCREMENT_TIM_IRQHandler+0x30>)
 8004342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004344:	3201      	adds	r2, #1
 8004346:	62da      	str	r2, [r3, #44]	; 0x2c
	{
		OUTPUT_TIMER->ARR--;
	}

	//SWEEP_TIMER->ARR--;
}
 8004348:	e003      	b.n	8004352 <IM_SWEEPINCREMENT_TIM_IRQHandler+0x22>
		OUTPUT_TIMER->ARR--;
 800434a:	4b05      	ldr	r3, [pc, #20]	; (8004360 <IM_SWEEPINCREMENT_TIM_IRQHandler+0x30>)
 800434c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800434e:	3a01      	subs	r2, #1
 8004350:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004352:	bf00      	nop
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr
 800435c:	40000c00 	.word	0x40000c00
 8004360:	40013400 	.word	0x40013400

08004364 <IM_BTN1_EXTI14_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN1_EXTI14_Handler()
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b082      	sub	sp, #8
 8004368:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 800436a:	4b0f      	ldr	r3, [pc, #60]	; (80043a8 <IM_BTN1_EXTI14_Handler+0x44>)
 800436c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800436e:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn1_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 8004370:	88fb      	ldrh	r3, [r7, #6]
 8004372:	4a0e      	ldr	r2, [pc, #56]	; (80043ac <IM_BTN1_EXTI14_Handler+0x48>)
 8004374:	8812      	ldrh	r2, [r2, #0]
 8004376:	1a9b      	subs	r3, r3, r2
 8004378:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800437c:	dd0c      	ble.n	8004398 <IM_BTN1_EXTI14_Handler+0x34>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14))
 800437e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004382:	f7ff ffaf 	bl	80042e4 <LL_EXTI_IsActiveFlag_0_31>
 8004386:	4603      	mov	r3, r0
 8004388:	2b00      	cmp	r3, #0
 800438a:	d005      	beq.n	8004398 <IM_BTN1_EXTI14_Handler+0x34>
		{

			EM_SetNewEvent(evBlueBtn);
 800438c:	2001      	movs	r0, #1
 800438e:	f7ff fb37 	bl	8003a00 <EM_SetNewEvent>
			printf("'Blue' BTN1_EXTI14_Pin\n");
 8004392:	4807      	ldr	r0, [pc, #28]	; (80043b0 <IM_BTN1_EXTI14_Handler+0x4c>)
 8004394:	f00a fbae 	bl	800eaf4 <puts>
		}
	}
	btn1_last_interrupt_time = interrupt_time;
 8004398:	4a04      	ldr	r2, [pc, #16]	; (80043ac <IM_BTN1_EXTI14_Handler+0x48>)
 800439a:	88fb      	ldrh	r3, [r7, #6]
 800439c:	8013      	strh	r3, [r2, #0]


}
 800439e:	bf00      	nop
 80043a0:	3708      	adds	r7, #8
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	bf00      	nop
 80043a8:	40014400 	.word	0x40014400
 80043ac:	20001f18 	.word	0x20001f18
 80043b0:	08011790 	.word	0x08011790

080043b4 <IM_BTN2_EXTI15_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN2_EXTI15_Handler()
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b082      	sub	sp, #8
 80043b8:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 80043ba:	4b0f      	ldr	r3, [pc, #60]	; (80043f8 <IM_BTN2_EXTI15_Handler+0x44>)
 80043bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043be:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn2_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 80043c0:	88fb      	ldrh	r3, [r7, #6]
 80043c2:	4a0e      	ldr	r2, [pc, #56]	; (80043fc <IM_BTN2_EXTI15_Handler+0x48>)
 80043c4:	8812      	ldrh	r2, [r2, #0]
 80043c6:	1a9b      	subs	r3, r3, r2
 80043c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80043cc:	dd0c      	ble.n	80043e8 <IM_BTN2_EXTI15_Handler+0x34>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15))
 80043ce:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80043d2:	f7ff ff87 	bl	80042e4 <LL_EXTI_IsActiveFlag_0_31>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d005      	beq.n	80043e8 <IM_BTN2_EXTI15_Handler+0x34>
		{
			EM_SetNewEvent(evYellowBtn);
 80043dc:	2003      	movs	r0, #3
 80043de:	f7ff fb0f 	bl	8003a00 <EM_SetNewEvent>
			printf("'Yellow' BTN2_EXTI15_Pin\n");
 80043e2:	4807      	ldr	r0, [pc, #28]	; (8004400 <IM_BTN2_EXTI15_Handler+0x4c>)
 80043e4:	f00a fb86 	bl	800eaf4 <puts>
		}
	}
	btn2_last_interrupt_time = interrupt_time;
 80043e8:	4a04      	ldr	r2, [pc, #16]	; (80043fc <IM_BTN2_EXTI15_Handler+0x48>)
 80043ea:	88fb      	ldrh	r3, [r7, #6]
 80043ec:	8013      	strh	r3, [r2, #0]


}
 80043ee:	bf00      	nop
 80043f0:	3708      	adds	r7, #8
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	40014400 	.word	0x40014400
 80043fc:	20001f1a 	.word	0x20001f1a
 8004400:	080117a8 	.word	0x080117a8

08004404 <IM_BTN3_EXTI0_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN3_EXTI0_Handler()
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b082      	sub	sp, #8
 8004408:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 800440a:	4b0e      	ldr	r3, [pc, #56]	; (8004444 <IM_BTN3_EXTI0_Handler+0x40>)
 800440c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440e:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn3_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 8004410:	88fb      	ldrh	r3, [r7, #6]
 8004412:	4a0d      	ldr	r2, [pc, #52]	; (8004448 <IM_BTN3_EXTI0_Handler+0x44>)
 8004414:	8812      	ldrh	r2, [r2, #0]
 8004416:	1a9b      	subs	r3, r3, r2
 8004418:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800441c:	dd0b      	ble.n	8004436 <IM_BTN3_EXTI0_Handler+0x32>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0))
 800441e:	2001      	movs	r0, #1
 8004420:	f7ff ff60 	bl	80042e4 <LL_EXTI_IsActiveFlag_0_31>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d005      	beq.n	8004436 <IM_BTN3_EXTI0_Handler+0x32>
		{
			EM_SetNewEvent(evRedBtn);
 800442a:	2004      	movs	r0, #4
 800442c:	f7ff fae8 	bl	8003a00 <EM_SetNewEvent>
			printf("'Red' BTN3_EXTI0_Pin\n");
 8004430:	4806      	ldr	r0, [pc, #24]	; (800444c <IM_BTN3_EXTI0_Handler+0x48>)
 8004432:	f00a fb5f 	bl	800eaf4 <puts>
		}
	}
	btn3_last_interrupt_time = interrupt_time;
 8004436:	4a04      	ldr	r2, [pc, #16]	; (8004448 <IM_BTN3_EXTI0_Handler+0x44>)
 8004438:	88fb      	ldrh	r3, [r7, #6]
 800443a:	8013      	strh	r3, [r2, #0]


}
 800443c:	bf00      	nop
 800443e:	3708      	adds	r7, #8
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}
 8004444:	40014400 	.word	0x40014400
 8004448:	20001f1c 	.word	0x20001f1c
 800444c:	080117c4 	.word	0x080117c4

08004450 <IM_BTN4_EXTI1_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN4_EXTI1_Handler()
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b082      	sub	sp, #8
 8004454:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8004456:	4b0e      	ldr	r3, [pc, #56]	; (8004490 <IM_BTN4_EXTI1_Handler+0x40>)
 8004458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445a:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn4_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 800445c:	88fb      	ldrh	r3, [r7, #6]
 800445e:	4a0d      	ldr	r2, [pc, #52]	; (8004494 <IM_BTN4_EXTI1_Handler+0x44>)
 8004460:	8812      	ldrh	r2, [r2, #0]
 8004462:	1a9b      	subs	r3, r3, r2
 8004464:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004468:	dd0b      	ble.n	8004482 <IM_BTN4_EXTI1_Handler+0x32>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1))
 800446a:	2002      	movs	r0, #2
 800446c:	f7ff ff3a 	bl	80042e4 <LL_EXTI_IsActiveFlag_0_31>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d005      	beq.n	8004482 <IM_BTN4_EXTI1_Handler+0x32>
		{
			EM_SetNewEvent(evGreenBtn);
 8004476:	2002      	movs	r0, #2
 8004478:	f7ff fac2 	bl	8003a00 <EM_SetNewEvent>
			printf("'Green' BTN4_EXTI1_Pin\n");
 800447c:	4806      	ldr	r0, [pc, #24]	; (8004498 <IM_BTN4_EXTI1_Handler+0x48>)
 800447e:	f00a fb39 	bl	800eaf4 <puts>
		}
	}
	btn4_last_interrupt_time = interrupt_time;
 8004482:	4a04      	ldr	r2, [pc, #16]	; (8004494 <IM_BTN4_EXTI1_Handler+0x44>)
 8004484:	88fb      	ldrh	r3, [r7, #6]
 8004486:	8013      	strh	r3, [r2, #0]


}
 8004488:	bf00      	nop
 800448a:	3708      	adds	r7, #8
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}
 8004490:	40014400 	.word	0x40014400
 8004494:	20001f1e 	.word	0x20001f1e
 8004498:	080117dc 	.word	0x080117dc

0800449c <IM_ENC_EXTI2_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_ENC_EXTI2_Handler()
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b082      	sub	sp, #8
 80044a0:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 80044a2:	4b0e      	ldr	r3, [pc, #56]	; (80044dc <IM_ENC_EXTI2_Handler+0x40>)
 80044a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a6:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - encbtn_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 80044a8:	88fb      	ldrh	r3, [r7, #6]
 80044aa:	4a0d      	ldr	r2, [pc, #52]	; (80044e0 <IM_ENC_EXTI2_Handler+0x44>)
 80044ac:	8812      	ldrh	r2, [r2, #0]
 80044ae:	1a9b      	subs	r3, r3, r2
 80044b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80044b4:	dd0b      	ble.n	80044ce <IM_ENC_EXTI2_Handler+0x32>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2))
 80044b6:	2004      	movs	r0, #4
 80044b8:	f7ff ff14 	bl	80042e4 <LL_EXTI_IsActiveFlag_0_31>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d005      	beq.n	80044ce <IM_ENC_EXTI2_Handler+0x32>
		{
			EM_SetNewEvent(evEncoderPush);
 80044c2:	2006      	movs	r0, #6
 80044c4:	f7ff fa9c 	bl	8003a00 <EM_SetNewEvent>
			printf("'EncoderPush' ENC_EXTI2_Pin\n");
 80044c8:	4806      	ldr	r0, [pc, #24]	; (80044e4 <IM_ENC_EXTI2_Handler+0x48>)
 80044ca:	f00a fb13 	bl	800eaf4 <puts>
		}
	}
	encbtn_last_interrupt_time = interrupt_time;
 80044ce:	4a04      	ldr	r2, [pc, #16]	; (80044e0 <IM_ENC_EXTI2_Handler+0x44>)
 80044d0:	88fb      	ldrh	r3, [r7, #6]
 80044d2:	8013      	strh	r3, [r2, #0]


}
 80044d4:	bf00      	nop
 80044d6:	3708      	adds	r7, #8
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	40014400 	.word	0x40014400
 80044e0:	20001f20 	.word	0x20001f20
 80044e4:	080117f4 	.word	0x080117f4

080044e8 <IM_ENC_DIRF_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_ENC_DIRF_Handler()
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	af00      	add	r7, sp, #0

	if((TIM1->SR & TIM_SR_DIRF) == TIM_SR_DIRF)
 80044ec:	4b0a      	ldr	r3, [pc, #40]	; (8004518 <IM_ENC_DIRF_Handler+0x30>)
 80044ee:	691b      	ldr	r3, [r3, #16]
 80044f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80044f8:	d10b      	bne.n	8004512 <IM_ENC_DIRF_Handler+0x2a>
	{
		EM_SetNewEvent(evEncoderSet);
 80044fa:	2005      	movs	r0, #5
 80044fc:	f7ff fa80 	bl	8003a00 <EM_SetNewEvent>
		printf("Encoder new direction\n");
 8004500:	4806      	ldr	r0, [pc, #24]	; (800451c <IM_ENC_DIRF_Handler+0x34>)
 8004502:	f00a faf7 	bl	800eaf4 <puts>
		TIM1->SR &= ~(TIM_SR_DIRF);
 8004506:	4b04      	ldr	r3, [pc, #16]	; (8004518 <IM_ENC_DIRF_Handler+0x30>)
 8004508:	691b      	ldr	r3, [r3, #16]
 800450a:	4a03      	ldr	r2, [pc, #12]	; (8004518 <IM_ENC_DIRF_Handler+0x30>)
 800450c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004510:	6113      	str	r3, [r2, #16]

	}
}
 8004512:	bf00      	nop
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	40012c00 	.word	0x40012c00
 800451c:	08011810 	.word	0x08011810

08004520 <BO_GetBiasPolarity>:
 *	@param None
 *	@retval None
 *
 */
eBias_Polarity BO_GetBiasPolarity()
{
 8004520:	b480      	push	{r7}
 8004522:	af00      	add	r7, sp, #0
	return eBiasPolarity;
 8004524:	4b03      	ldr	r3, [pc, #12]	; (8004534 <BO_GetBiasPolarity+0x14>)
 8004526:	781b      	ldrb	r3, [r3, #0]
}
 8004528:	4618      	mov	r0, r3
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr
 8004532:	bf00      	nop
 8004534:	2000000b 	.word	0x2000000b

08004538 <BO_GetDcBiasEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
uint16_t BO_GetDcBiasEncoderValue()
{
 8004538:	b480      	push	{r7}
 800453a:	af00      	add	r7, sp, #0
	return dc_bias_encoder_value;
 800453c:	4b03      	ldr	r3, [pc, #12]	; (800454c <BO_GetDcBiasEncoderValue+0x14>)
 800453e:	881b      	ldrh	r3, [r3, #0]
}
 8004540:	4618      	mov	r0, r3
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr
 800454a:	bf00      	nop
 800454c:	2000000c 	.word	0x2000000c

08004550 <BO_ModifyOutput>:
 *	@param None
 *	@retval None
 *
 */
void BO_ModifyOutput(uint16_t pEncoderValue)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b082      	sub	sp, #8
 8004554:	af00      	add	r7, sp, #0
 8004556:	4603      	mov	r3, r0
 8004558:	80fb      	strh	r3, [r7, #6]
	// pEncoderValue is reversed for correct rotary encoder operation.
	// However, we want to retain the forward direction value to prevent polarity flip!
	dc_bias_encoder_value = SM_GetEncoderValue(ENCODER_FORWARD);
 800455a:	2000      	movs	r0, #0
 800455c:	f000 fd8c 	bl	8005078 <SM_GetEncoderValue>
 8004560:	4603      	mov	r3, r0
 8004562:	461a      	mov	r2, r3
 8004564:	4b1b      	ldr	r3, [pc, #108]	; (80045d4 <BO_ModifyOutput+0x84>)
 8004566:	801a      	strh	r2, [r3, #0]

	// apply negative dc bias
	if(pEncoderValue < BIAS_CENTER) {
 8004568:	88fb      	ldrh	r3, [r7, #6]
 800456a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800456e:	d214      	bcs.n	800459a <BO_ModifyOutput+0x4a>

		eBiasPolarity = INVERSEBIAS;
 8004570:	4b19      	ldr	r3, [pc, #100]	; (80045d8 <BO_ModifyOutput+0x88>)
 8004572:	2200      	movs	r2, #0
 8004574:	701a      	strb	r2, [r3, #0]


		HAL_DAC_SetValue(	&hdac1,
							DAC1_CHANNEL_2,
							DAC_ALIGN_12B_R,
							((BIAS_CENTER - pEncoderValue) * BIAS_MAG));
 8004576:	88fb      	ldrh	r3, [r7, #6]
 8004578:	f5c3 72c8 	rsb	r2, r3, #400	; 0x190
 800457c:	4613      	mov	r3, r2
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	4413      	add	r3, r2
 8004582:	005b      	lsls	r3, r3, #1
		HAL_DAC_SetValue(	&hdac1,
 8004584:	2200      	movs	r2, #0
 8004586:	2110      	movs	r1, #16
 8004588:	4814      	ldr	r0, [pc, #80]	; (80045dc <BO_ModifyOutput+0x8c>)
 800458a:	f005 fbc5 	bl	8009d18 <HAL_DAC_SetValue>

		HAL_GPIO_WritePin(	DCBIAS_INVERT_GPIO_Port,
 800458e:	2201      	movs	r2, #1
 8004590:	2108      	movs	r1, #8
 8004592:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004596:	f006 fa9f 	bl	800aad8 <HAL_GPIO_WritePin>
							DCBIAS_INVERT_Pin,
							GPIO_PIN_SET);
	}
	// apply positive dc bias
	if(pEncoderValue >= BIAS_CENTER) {
 800459a:	88fb      	ldrh	r3, [r7, #6]
 800459c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80045a0:	d314      	bcc.n	80045cc <BO_ModifyOutput+0x7c>

		eBiasPolarity = NORMALBIAS;
 80045a2:	4b0d      	ldr	r3, [pc, #52]	; (80045d8 <BO_ModifyOutput+0x88>)
 80045a4:	2201      	movs	r2, #1
 80045a6:	701a      	strb	r2, [r3, #0]
		//TIM1->CNT = pEncoderValue;

		HAL_DAC_SetValue(	&hdac1,
							DAC1_CHANNEL_2,
							DAC_ALIGN_12B_R,
							((pEncoderValue - BIAS_CENTER) * BIAS_MAG));
 80045a8:	88fb      	ldrh	r3, [r7, #6]
 80045aa:	f5a3 72c8 	sub.w	r2, r3, #400	; 0x190
 80045ae:	4613      	mov	r3, r2
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	4413      	add	r3, r2
 80045b4:	005b      	lsls	r3, r3, #1
		HAL_DAC_SetValue(	&hdac1,
 80045b6:	2200      	movs	r2, #0
 80045b8:	2110      	movs	r1, #16
 80045ba:	4808      	ldr	r0, [pc, #32]	; (80045dc <BO_ModifyOutput+0x8c>)
 80045bc:	f005 fbac 	bl	8009d18 <HAL_DAC_SetValue>

		HAL_GPIO_WritePin(	DCBIAS_INVERT_GPIO_Port,
 80045c0:	2200      	movs	r2, #0
 80045c2:	2108      	movs	r1, #8
 80045c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80045c8:	f006 fa86 	bl	800aad8 <HAL_GPIO_WritePin>
							DCBIAS_INVERT_Pin,
							GPIO_PIN_RESET);
	}
}
 80045cc:	bf00      	nop
 80045ce:	3708      	adds	r7, #8
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	2000000c 	.word	0x2000000c
 80045d8:	2000000b 	.word	0x2000000b
 80045dc:	20002610 	.word	0x20002610

080045e0 <BO_GetOutputBias>:
 *	@param None
 *	@retval None
 *
 */
uint32_t BO_GetOutputBias()
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	af00      	add	r7, sp, #0
	return HAL_DAC_GetValue(&hdac1, DAC1_CHANNEL_2);
 80045e4:	2110      	movs	r1, #16
 80045e6:	4803      	ldr	r0, [pc, #12]	; (80045f4 <BO_GetOutputBias+0x14>)
 80045e8:	f005 fbdc 	bl	8009da4 <HAL_DAC_GetValue>
 80045ec:	4603      	mov	r3, r0
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	20002610 	.word	0x20002610

080045f8 <DT_InitRegister>:
 *	@param None
 *	@retval None
 *
 */
void DT_InitRegister()
{
 80045f8:	b480      	push	{r7}
 80045fa:	b083      	sub	sp, #12
 80045fc:	af00      	add	r7, sp, #0
	for(int i = 0; i < MAX_DAC_TIMER_SETTINGS; i++)
 80045fe:	2300      	movs	r3, #0
 8004600:	607b      	str	r3, [r7, #4]
 8004602:	e06b      	b.n	80046dc <DT_InitRegister+0xe4>
	{
		// prevent divide by zero (prescaler)
		if(DacTimerReg[i].psc == 0)
 8004604:	493a      	ldr	r1, [pc, #232]	; (80046f0 <DT_InitRegister+0xf8>)
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	4613      	mov	r3, r2
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	4413      	add	r3, r2
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	440b      	add	r3, r1
 8004612:	3308      	adds	r3, #8
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d129      	bne.n	800466e <DT_InitRegister+0x76>
			DacTimerReg[i].arr = ((SM_MCLK / DacTimerReg[i].hertz) / SM_FSAMP) * DacTimerReg[i].error;
 800461a:	4935      	ldr	r1, [pc, #212]	; (80046f0 <DT_InitRegister+0xf8>)
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	4613      	mov	r3, r2
 8004620:	009b      	lsls	r3, r3, #2
 8004622:	4413      	add	r3, r2
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	440b      	add	r3, r1
 8004628:	3304      	adds	r3, #4
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a31      	ldr	r2, [pc, #196]	; (80046f4 <DT_InitRegister+0xfc>)
 800462e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004632:	ee07 3a90 	vmov	s15, r3
 8004636:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800463a:	492d      	ldr	r1, [pc, #180]	; (80046f0 <DT_InitRegister+0xf8>)
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	4613      	mov	r3, r2
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	4413      	add	r3, r2
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	440b      	add	r3, r1
 8004648:	3310      	adds	r3, #16
 800464a:	edd3 7a00 	vldr	s15, [r3]
 800464e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004652:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004656:	ee17 0a90 	vmov	r0, s15
 800465a:	4925      	ldr	r1, [pc, #148]	; (80046f0 <DT_InitRegister+0xf8>)
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	4613      	mov	r3, r2
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	4413      	add	r3, r2
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	440b      	add	r3, r1
 8004668:	330c      	adds	r3, #12
 800466a:	6018      	str	r0, [r3, #0]
 800466c:	e033      	b.n	80046d6 <DT_InitRegister+0xde>
		else
			DacTimerReg[i].arr = (((SM_MCLK / DacTimerReg[i].hertz) / DacTimerReg[i].psc) / SM_FSAMP) * DacTimerReg[i].error;
 800466e:	4920      	ldr	r1, [pc, #128]	; (80046f0 <DT_InitRegister+0xf8>)
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	4613      	mov	r3, r2
 8004674:	009b      	lsls	r3, r3, #2
 8004676:	4413      	add	r3, r2
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	440b      	add	r3, r1
 800467c:	3304      	adds	r3, #4
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a1c      	ldr	r2, [pc, #112]	; (80046f4 <DT_InitRegister+0xfc>)
 8004682:	fbb2 f1f3 	udiv	r1, r2, r3
 8004686:	481a      	ldr	r0, [pc, #104]	; (80046f0 <DT_InitRegister+0xf8>)
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	4613      	mov	r3, r2
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	4413      	add	r3, r2
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	4403      	add	r3, r0
 8004694:	3308      	adds	r3, #8
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	fbb1 f3f3 	udiv	r3, r1, r3
 800469c:	ee07 3a90 	vmov	s15, r3
 80046a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80046a4:	4912      	ldr	r1, [pc, #72]	; (80046f0 <DT_InitRegister+0xf8>)
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	4613      	mov	r3, r2
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	4413      	add	r3, r2
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	440b      	add	r3, r1
 80046b2:	3310      	adds	r3, #16
 80046b4:	edd3 7a00 	vldr	s15, [r3]
 80046b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046c0:	ee17 0a90 	vmov	r0, s15
 80046c4:	490a      	ldr	r1, [pc, #40]	; (80046f0 <DT_InitRegister+0xf8>)
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	4613      	mov	r3, r2
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	4413      	add	r3, r2
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	440b      	add	r3, r1
 80046d2:	330c      	adds	r3, #12
 80046d4:	6018      	str	r0, [r3, #0]
	for(int i = 0; i < MAX_DAC_TIMER_SETTINGS; i++)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	3301      	adds	r3, #1
 80046da:	607b      	str	r3, [r7, #4]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2b0d      	cmp	r3, #13
 80046e0:	dd90      	ble.n	8004604 <DT_InitRegister+0xc>
	}
}
 80046e2:	bf00      	nop
 80046e4:	370c      	adds	r7, #12
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr
 80046ee:	bf00      	nop
 80046f0:	20000010 	.word	0x20000010
 80046f4:	00155cc0 	.word	0x00155cc0

080046f8 <DT_GetRegisterByEnum>:
 *	@param pEnum Enummeration (eFreqSettings_t) search criteria. Not an index
 *	@retval Pointer to the found DacTimeReg_t struct. Null if no result!
 *
 */
DacTimeReg_t* DT_GetRegisterByEnum(eFreqSettings_t pEnum)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b085      	sub	sp, #20
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < MAX_DAC_TIMER_SETTINGS; i++)
 8004700:	2300      	movs	r3, #0
 8004702:	60fb      	str	r3, [r7, #12]
 8004704:	e016      	b.n	8004734 <DT_GetRegisterByEnum+0x3c>
		if(DacTimerReg[i].hertz == pEnum)
 8004706:	4910      	ldr	r1, [pc, #64]	; (8004748 <DT_GetRegisterByEnum+0x50>)
 8004708:	68fa      	ldr	r2, [r7, #12]
 800470a:	4613      	mov	r3, r2
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	4413      	add	r3, r2
 8004710:	009b      	lsls	r3, r3, #2
 8004712:	440b      	add	r3, r1
 8004714:	3304      	adds	r3, #4
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	429a      	cmp	r2, r3
 800471c:	d107      	bne.n	800472e <DT_GetRegisterByEnum+0x36>
			return &DacTimerReg[i];
 800471e:	68fa      	ldr	r2, [r7, #12]
 8004720:	4613      	mov	r3, r2
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	4413      	add	r3, r2
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	4a07      	ldr	r2, [pc, #28]	; (8004748 <DT_GetRegisterByEnum+0x50>)
 800472a:	4413      	add	r3, r2
 800472c:	e006      	b.n	800473c <DT_GetRegisterByEnum+0x44>
	for(int i = 0; i < MAX_DAC_TIMER_SETTINGS; i++)
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	3301      	adds	r3, #1
 8004732:	60fb      	str	r3, [r7, #12]
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2b0d      	cmp	r3, #13
 8004738:	dde5      	ble.n	8004706 <DT_GetRegisterByEnum+0xe>

	return 0;
 800473a:	2300      	movs	r3, #0
}
 800473c:	4618      	mov	r0, r3
 800473e:	3714      	adds	r7, #20
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr
 8004748:	20000010 	.word	0x20000010

0800474c <FreqO_AdjustFreq>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_AdjustFreq()
{
 800474c:	b580      	push	{r7, lr}
 800474e:	af00      	add	r7, sp, #0
		//OUTPUT_TIMER->ARR = SM_GetEncoderValue(ENCODER_FORWARD) * FREQ_ENCODER_HIFREQ_MAG;
		OUTPUT_TIMER->ARR = SM_GetEncoderValue(ENCODER_FORWARD); //* FREQ_ENCODER_MIDFREQ_MAG;
 8004750:	2000      	movs	r0, #0
 8004752:	f000 fc91 	bl	8005078 <SM_GetEncoderValue>
 8004756:	4603      	mov	r3, r0
 8004758:	461a      	mov	r2, r3
 800475a:	4b02      	ldr	r3, [pc, #8]	; (8004764 <FreqO_AdjustFreq+0x18>)
 800475c:	62da      	str	r2, [r3, #44]	; 0x2c
		//OUTPUT_TIMER->ARR = SM_GetEncoderValue(ENCODER_FORWARD) * FREQ_ENCODER_LOFREQ_MAG;
}
 800475e:	bf00      	nop
 8004760:	bd80      	pop	{r7, pc}
 8004762:	bf00      	nop
 8004764:	40013400 	.word	0x40013400

08004768 <FreqO_ModifyOutput>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_ModifyOutput(uint16_t pEncValue)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b082      	sub	sp, #8
 800476c:	af00      	add	r7, sp, #0
 800476e:	4603      	mov	r3, r0
 8004770:	80fb      	strh	r3, [r7, #6]

	switch(pEncValue)
 8004772:	88fb      	ldrh	r3, [r7, #6]
 8004774:	2b38      	cmp	r3, #56	; 0x38
 8004776:	f200 80b4 	bhi.w	80048e2 <FreqO_ModifyOutput+0x17a>
 800477a:	a201      	add	r2, pc, #4	; (adr r2, 8004780 <FreqO_ModifyOutput+0x18>)
 800477c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004780:	08004865 	.word	0x08004865
 8004784:	08004865 	.word	0x08004865
 8004788:	08004865 	.word	0x08004865
 800478c:	08004865 	.word	0x08004865
 8004790:	0800486d 	.word	0x0800486d
 8004794:	0800486d 	.word	0x0800486d
 8004798:	0800486d 	.word	0x0800486d
 800479c:	0800486d 	.word	0x0800486d
 80047a0:	08004875 	.word	0x08004875
 80047a4:	08004875 	.word	0x08004875
 80047a8:	08004875 	.word	0x08004875
 80047ac:	08004875 	.word	0x08004875
 80047b0:	0800487d 	.word	0x0800487d
 80047b4:	0800487d 	.word	0x0800487d
 80047b8:	0800487d 	.word	0x0800487d
 80047bc:	0800487d 	.word	0x0800487d
 80047c0:	08004885 	.word	0x08004885
 80047c4:	08004885 	.word	0x08004885
 80047c8:	08004885 	.word	0x08004885
 80047cc:	08004885 	.word	0x08004885
 80047d0:	0800488d 	.word	0x0800488d
 80047d4:	0800488d 	.word	0x0800488d
 80047d8:	0800488d 	.word	0x0800488d
 80047dc:	0800488d 	.word	0x0800488d
 80047e0:	08004897 	.word	0x08004897
 80047e4:	08004897 	.word	0x08004897
 80047e8:	08004897 	.word	0x08004897
 80047ec:	08004897 	.word	0x08004897
 80047f0:	080048a1 	.word	0x080048a1
 80047f4:	080048a1 	.word	0x080048a1
 80047f8:	080048a1 	.word	0x080048a1
 80047fc:	080048e3 	.word	0x080048e3
 8004800:	080048a1 	.word	0x080048a1
 8004804:	080048ab 	.word	0x080048ab
 8004808:	080048ab 	.word	0x080048ab
 800480c:	080048ab 	.word	0x080048ab
 8004810:	080048ab 	.word	0x080048ab
 8004814:	080048b5 	.word	0x080048b5
 8004818:	080048b5 	.word	0x080048b5
 800481c:	080048b5 	.word	0x080048b5
 8004820:	080048b5 	.word	0x080048b5
 8004824:	080048bf 	.word	0x080048bf
 8004828:	080048bf 	.word	0x080048bf
 800482c:	080048bf 	.word	0x080048bf
 8004830:	080048bf 	.word	0x080048bf
 8004834:	080048c9 	.word	0x080048c9
 8004838:	080048c9 	.word	0x080048c9
 800483c:	080048c9 	.word	0x080048c9
 8004840:	080048c9 	.word	0x080048c9
 8004844:	080048d3 	.word	0x080048d3
 8004848:	080048d3 	.word	0x080048d3
 800484c:	080048d3 	.word	0x080048d3
 8004850:	080048d3 	.word	0x080048d3
 8004854:	080048db 	.word	0x080048db
 8004858:	080048db 	.word	0x080048db
 800485c:	080048db 	.word	0x080048db
 8004860:	080048db 	.word	0x080048db
	{
		case 0:
		case 1:
		case 2:
		case 3:
			FreqO_ApplyPreset(FPRESET_1HZ);
 8004864:	2001      	movs	r0, #1
 8004866:	f000 f845 	bl	80048f4 <FreqO_ApplyPreset>
			break;
 800486a:	e03a      	b.n	80048e2 <FreqO_ModifyOutput+0x17a>
		case 4:
		case 5:
		case 6:
		case 7:
			FreqO_ApplyPreset(FPRESET_10HZ);
 800486c:	200a      	movs	r0, #10
 800486e:	f000 f841 	bl	80048f4 <FreqO_ApplyPreset>
			break;
 8004872:	e036      	b.n	80048e2 <FreqO_ModifyOutput+0x17a>
		case 8:
		case 9:
		case 10:
		case 11:
			FreqO_ApplyPreset(FPRESET_50HZ);
 8004874:	2032      	movs	r0, #50	; 0x32
 8004876:	f000 f83d 	bl	80048f4 <FreqO_ApplyPreset>
			break;
 800487a:	e032      	b.n	80048e2 <FreqO_ModifyOutput+0x17a>
		case 12:
		case 13:
		case 14:
		case 15:
			FreqO_ApplyPreset(FPRESET_100HZ);
 800487c:	2064      	movs	r0, #100	; 0x64
 800487e:	f000 f839 	bl	80048f4 <FreqO_ApplyPreset>
			break;
 8004882:	e02e      	b.n	80048e2 <FreqO_ModifyOutput+0x17a>
		case 16:
		case 17:
		case 18:
		case 19:
			FreqO_ApplyPreset(FPRESET_250HZ);
 8004884:	20fa      	movs	r0, #250	; 0xfa
 8004886:	f000 f835 	bl	80048f4 <FreqO_ApplyPreset>
			break;
 800488a:	e02a      	b.n	80048e2 <FreqO_ModifyOutput+0x17a>
		case 20:
		case 21:
		case 22:
		case 23:
			FreqO_ApplyPreset(FPRESET_500HZ);
 800488c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004890:	f000 f830 	bl	80048f4 <FreqO_ApplyPreset>
			break;
 8004894:	e025      	b.n	80048e2 <FreqO_ModifyOutput+0x17a>
		case 24:
		case 25:
		case 26:
		case 27:
			FreqO_ApplyPreset(FPRESET_750HZ);
 8004896:	f240 20ee 	movw	r0, #750	; 0x2ee
 800489a:	f000 f82b 	bl	80048f4 <FreqO_ApplyPreset>
			break;
 800489e:	e020      	b.n	80048e2 <FreqO_ModifyOutput+0x17a>
		case 28:
		case 29:
		case 30:
		case 32:
			FreqO_ApplyPreset(FPRESET_1KHZ);
 80048a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80048a4:	f000 f826 	bl	80048f4 <FreqO_ApplyPreset>
			break;
 80048a8:	e01b      	b.n	80048e2 <FreqO_ModifyOutput+0x17a>
		case 33:
		case 34:
		case 35:
		case 36:
			FreqO_ApplyPreset(FPRESET_5KHZ);
 80048aa:	f241 3088 	movw	r0, #5000	; 0x1388
 80048ae:	f000 f821 	bl	80048f4 <FreqO_ApplyPreset>
			break;
 80048b2:	e016      	b.n	80048e2 <FreqO_ModifyOutput+0x17a>
		case 37:
		case 38:
		case 39:
		case 40:
			FreqO_ApplyPreset(FPRESET_10KHZ);
 80048b4:	f242 7010 	movw	r0, #10000	; 0x2710
 80048b8:	f000 f81c 	bl	80048f4 <FreqO_ApplyPreset>
			break;
 80048bc:	e011      	b.n	80048e2 <FreqO_ModifyOutput+0x17a>
		case 41:
		case 42:
		case 43:
		case 44:
			FreqO_ApplyPreset(FPRESET_25KHZ);
 80048be:	f246 10a8 	movw	r0, #25000	; 0x61a8
 80048c2:	f000 f817 	bl	80048f4 <FreqO_ApplyPreset>
			break;
 80048c6:	e00c      	b.n	80048e2 <FreqO_ModifyOutput+0x17a>
		case 45:
		case 46:
		case 47:
		case 48:
			FreqO_ApplyPreset(FPRESET_50KHZ);
 80048c8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80048cc:	f000 f812 	bl	80048f4 <FreqO_ApplyPreset>
			break;
 80048d0:	e007      	b.n	80048e2 <FreqO_ModifyOutput+0x17a>
		case 49:
		case 50:
		case 51:
		case 52:
			FreqO_ApplyPreset(FPRESET_75KHZ);
 80048d2:	4806      	ldr	r0, [pc, #24]	; (80048ec <FreqO_ModifyOutput+0x184>)
 80048d4:	f000 f80e 	bl	80048f4 <FreqO_ApplyPreset>
			break;
 80048d8:	e003      	b.n	80048e2 <FreqO_ModifyOutput+0x17a>
		case 53:
		case 54:
		case 55:
		case 56:
			FreqO_ApplyPreset(FPRESET_100KHZ);
 80048da:	4805      	ldr	r0, [pc, #20]	; (80048f0 <FreqO_ModifyOutput+0x188>)
 80048dc:	f000 f80a 	bl	80048f4 <FreqO_ApplyPreset>
			break;
 80048e0:	bf00      	nop
	}

}
 80048e2:	bf00      	nop
 80048e4:	3708      	adds	r7, #8
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}
 80048ea:	bf00      	nop
 80048ec:	000124f8 	.word	0x000124f8
 80048f0:	000186a0 	.word	0x000186a0

080048f4 <FreqO_ApplyPreset>:

 *	@retval None
 *
 */
void FreqO_ApplyPreset(eFreqSettings_t pPresetEnum)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
	DacTimeReg_t* tmp = DT_GetRegisterByEnum(pPresetEnum);
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f7ff fefb 	bl	80046f8 <DT_GetRegisterByEnum>
 8004902:	60f8      	str	r0, [r7, #12]
	if(tmp)
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d015      	beq.n	8004936 <FreqO_ApplyPreset+0x42>
	{
		OUTPUT_TIMER->PSC = tmp->psc;
 800490a:	4a0d      	ldr	r2, [pc, #52]	; (8004940 <FreqO_ApplyPreset+0x4c>)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	6293      	str	r3, [r2, #40]	; 0x28
		OUTPUT_TIMER->ARR = tmp->arr;
 8004912:	4a0b      	ldr	r2, [pc, #44]	; (8004940 <FreqO_ApplyPreset+0x4c>)
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	62d3      	str	r3, [r2, #44]	; 0x2c


		//eNewFreqPreset = pPresetEnum;
		FreqProfile_t * tmp = FreqO_FindFPresetObject(pPresetEnum);
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f000 f822 	bl	8004964 <FreqO_FindFPresetObject>
 8004920:	60b8      	str	r0, [r7, #8]
		if(tmp)
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d003      	beq.n	8004930 <FreqO_ApplyPreset+0x3c>
		{
			freq_profile = tmp;
 8004928:	4a06      	ldr	r2, [pc, #24]	; (8004944 <FreqO_ApplyPreset+0x50>)
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	6013      	str	r3, [r2, #0]
		{
			DM_SetErrorDebugMsg("FreqO_ApplyPreset() null pointer error");
		}

	}
}
 800492e:	e002      	b.n	8004936 <FreqO_ApplyPreset+0x42>
			DM_SetErrorDebugMsg("FreqO_ApplyPreset() null pointer error");
 8004930:	4805      	ldr	r0, [pc, #20]	; (8004948 <FreqO_ApplyPreset+0x54>)
 8004932:	f7fc fc09 	bl	8001148 <DM_SetErrorDebugMsg>
}
 8004936:	bf00      	nop
 8004938:	3710      	adds	r7, #16
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
 800493e:	bf00      	nop
 8004940:	40013400 	.word	0x40013400
 8004944:	2000019c 	.word	0x2000019c
 8004948:	08011828 	.word	0x08011828

0800494c <FreqO_GetFPresetObject>:
 *	@param None
 *	@retval pointer to FreqProfile_t struct
 *
 */
FreqProfile_t * FreqO_GetFPresetObject()
{
 800494c:	b480      	push	{r7}
 800494e:	af00      	add	r7, sp, #0
	return freq_profile;
 8004950:	4b03      	ldr	r3, [pc, #12]	; (8004960 <FreqO_GetFPresetObject+0x14>)
 8004952:	681b      	ldr	r3, [r3, #0]
}
 8004954:	4618      	mov	r0, r3
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr
 800495e:	bf00      	nop
 8004960:	2000019c 	.word	0x2000019c

08004964 <FreqO_FindFPresetObject>:

 *	@retval pointer to FreqProfile_t struct
 *
 */
FreqProfile_t * FreqO_FindFPresetObject(eFreqSettings_t pEnum)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b084      	sub	sp, #16
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++ )
 800496c:	2300      	movs	r3, #0
 800496e:	60fb      	str	r3, [r7, #12]
 8004970:	e00e      	b.n	8004990 <FreqO_FindFPresetObject+0x2c>
	{
		if(theFreqProfiles[i].hertz == pEnum)
 8004972:	4a0d      	ldr	r2, [pc, #52]	; (80049a8 <FreqO_FindFPresetObject+0x44>)
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	429a      	cmp	r2, r3
 800497e:	d104      	bne.n	800498a <FreqO_FindFPresetObject+0x26>
		{
			return &theFreqProfiles[i];
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	00db      	lsls	r3, r3, #3
 8004984:	4a08      	ldr	r2, [pc, #32]	; (80049a8 <FreqO_FindFPresetObject+0x44>)
 8004986:	4413      	add	r3, r2
 8004988:	e009      	b.n	800499e <FreqO_FindFPresetObject+0x3a>
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++ )
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	3301      	adds	r3, #1
 800498e:	60fb      	str	r3, [r7, #12]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2b0d      	cmp	r3, #13
 8004994:	dded      	ble.n	8004972 <FreqO_FindFPresetObject+0xe>
		}
	}
	// error!
	DM_SetErrorDebugMsg("FreqO_FindFPresetObject(): no FPreset obj found");
 8004996:	4805      	ldr	r0, [pc, #20]	; (80049ac <FreqO_FindFPresetObject+0x48>)
 8004998:	f7fc fbd6 	bl	8001148 <DM_SetErrorDebugMsg>
	return 0;
 800499c:	2300      	movs	r3, #0
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3710      	adds	r7, #16
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	2000012c 	.word	0x2000012c
 80049ac:	08011850 	.word	0x08011850

080049b0 <FreqO_GetFreqPresetEncoderRange>:
 *	@param None
 *	@retval uint8_t
 *
 */
uint8_t FreqO_GetFreqPresetEncoderRange()
{
 80049b0:	b480      	push	{r7}
 80049b2:	af00      	add	r7, sp, #0
	return FreqPresetEncoderRange;
 80049b4:	4b03      	ldr	r3, [pc, #12]	; (80049c4 <FreqO_GetFreqPresetEncoderRange+0x14>)
 80049b6:	781b      	ldrb	r3, [r3, #0]
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr
 80049c2:	bf00      	nop
 80049c4:	20000128 	.word	0x20000128

080049c8 <FuncO_Init>:
 *	@param pEncoderValue rotary encoder value
 *	@retval None
 *
 */
void FuncO_Init()
{
 80049c8:	b480      	push	{r7}
 80049ca:	af00      	add	r7, sp, #0
		aProcessedSignalDataTable[i] = sine_data_table_3600[i];

	for(int i = 0; i < SINE_DATA_SIZE; i++)
		aProcessedSyncDataTable[i] = sine_data_table_3600[i];
		*/
}
 80049cc:	bf00      	nop
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr
	...

080049d8 <FuncO_ModifySignalOutput>:
 *	@param pEncoderValue rotary encoder value
 *	@retval None
 *
 */
void FuncO_ModifySignalOutput(uint16_t pEncoderValue)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b082      	sub	sp, #8
 80049dc:	af00      	add	r7, sp, #0
 80049de:	4603      	mov	r3, r0
 80049e0:	80fb      	strh	r3, [r7, #6]


	switch(pEncoderValue)
 80049e2:	88fb      	ldrh	r3, [r7, #6]
 80049e4:	2b17      	cmp	r3, #23
 80049e6:	d84b      	bhi.n	8004a80 <FuncO_ModifySignalOutput+0xa8>
 80049e8:	a201      	add	r2, pc, #4	; (adr r2, 80049f0 <FuncO_ModifySignalOutput+0x18>)
 80049ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ee:	bf00      	nop
 80049f0:	08004a51 	.word	0x08004a51
 80049f4:	08004a51 	.word	0x08004a51
 80049f8:	08004a51 	.word	0x08004a51
 80049fc:	08004a59 	.word	0x08004a59
 8004a00:	08004a59 	.word	0x08004a59
 8004a04:	08004a59 	.word	0x08004a59
 8004a08:	08004a59 	.word	0x08004a59
 8004a0c:	08004a61 	.word	0x08004a61
 8004a10:	08004a61 	.word	0x08004a61
 8004a14:	08004a61 	.word	0x08004a61
 8004a18:	08004a61 	.word	0x08004a61
 8004a1c:	08004a69 	.word	0x08004a69
 8004a20:	08004a69 	.word	0x08004a69
 8004a24:	08004a69 	.word	0x08004a69
 8004a28:	08004a69 	.word	0x08004a69
 8004a2c:	08004a71 	.word	0x08004a71
 8004a30:	08004a71 	.word	0x08004a71
 8004a34:	08004a71 	.word	0x08004a71
 8004a38:	08004a71 	.word	0x08004a71
 8004a3c:	08004a79 	.word	0x08004a79
 8004a40:	08004a79 	.word	0x08004a79
 8004a44:	08004a79 	.word	0x08004a79
 8004a48:	08004a79 	.word	0x08004a79
 8004a4c:	08004a79 	.word	0x08004a79
	{
		case 0: case 1: case 2:
			FuncO_ApplyPresetToSignal(SINE_FUNC_MODE);
 8004a50:	2000      	movs	r0, #0
 8004a52:	f000 f871 	bl	8004b38 <FuncO_ApplyPresetToSignal>
			break;
 8004a56:	e013      	b.n	8004a80 <FuncO_ModifySignalOutput+0xa8>

		case 3: case 4: case 5: case 6:
			FuncO_ApplyPresetToSignal(SQUARE_FUNC_MODE);
 8004a58:	2001      	movs	r0, #1
 8004a5a:	f000 f86d 	bl	8004b38 <FuncO_ApplyPresetToSignal>
			break;
 8004a5e:	e00f      	b.n	8004a80 <FuncO_ModifySignalOutput+0xa8>

		case 7: case 8: case 9: case 10:
			FuncO_ApplyPresetToSignal(SAW_FUNC_MODE);
 8004a60:	2002      	movs	r0, #2
 8004a62:	f000 f869 	bl	8004b38 <FuncO_ApplyPresetToSignal>
			break;
 8004a66:	e00b      	b.n	8004a80 <FuncO_ModifySignalOutput+0xa8>

		case 11: case 12: case 13: case 14:
			FuncO_ApplyPresetToSignal(REV_SAW_FUNC_MODE);
 8004a68:	2003      	movs	r0, #3
 8004a6a:	f000 f865 	bl	8004b38 <FuncO_ApplyPresetToSignal>
			break;
 8004a6e:	e007      	b.n	8004a80 <FuncO_ModifySignalOutput+0xa8>

		case 15: case 16: case 17: case 18:
			FuncO_ApplyPresetToSignal(TRIANGLE_FUNC_MODE);
 8004a70:	2004      	movs	r0, #4
 8004a72:	f000 f861 	bl	8004b38 <FuncO_ApplyPresetToSignal>
			break;
 8004a76:	e003      	b.n	8004a80 <FuncO_ModifySignalOutput+0xa8>

		case 19: case 20: case 21: case 22: case 23:
			FuncO_ApplyPresetToSignal(IMPULSE_FUNC_MODE);
 8004a78:	2005      	movs	r0, #5
 8004a7a:	f000 f85d 	bl	8004b38 <FuncO_ApplyPresetToSignal>
			break;
 8004a7e:	bf00      	nop

	}
}
 8004a80:	bf00      	nop
 8004a82:	3708      	adds	r7, #8
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}

08004a88 <FuncO_ModifySyncOutput>:
 *	@param pEncoderValue rotary encoder value
 *	@retval None
 *
 */
void FuncO_ModifySyncOutput(uint16_t pEncoderValue)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b082      	sub	sp, #8
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	4603      	mov	r3, r0
 8004a90:	80fb      	strh	r3, [r7, #6]


	switch(pEncoderValue)
 8004a92:	88fb      	ldrh	r3, [r7, #6]
 8004a94:	2b17      	cmp	r3, #23
 8004a96:	d84b      	bhi.n	8004b30 <FuncO_ModifySyncOutput+0xa8>
 8004a98:	a201      	add	r2, pc, #4	; (adr r2, 8004aa0 <FuncO_ModifySyncOutput+0x18>)
 8004a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a9e:	bf00      	nop
 8004aa0:	08004b01 	.word	0x08004b01
 8004aa4:	08004b01 	.word	0x08004b01
 8004aa8:	08004b01 	.word	0x08004b01
 8004aac:	08004b09 	.word	0x08004b09
 8004ab0:	08004b09 	.word	0x08004b09
 8004ab4:	08004b09 	.word	0x08004b09
 8004ab8:	08004b09 	.word	0x08004b09
 8004abc:	08004b11 	.word	0x08004b11
 8004ac0:	08004b11 	.word	0x08004b11
 8004ac4:	08004b11 	.word	0x08004b11
 8004ac8:	08004b11 	.word	0x08004b11
 8004acc:	08004b19 	.word	0x08004b19
 8004ad0:	08004b19 	.word	0x08004b19
 8004ad4:	08004b19 	.word	0x08004b19
 8004ad8:	08004b19 	.word	0x08004b19
 8004adc:	08004b21 	.word	0x08004b21
 8004ae0:	08004b21 	.word	0x08004b21
 8004ae4:	08004b21 	.word	0x08004b21
 8004ae8:	08004b21 	.word	0x08004b21
 8004aec:	08004b29 	.word	0x08004b29
 8004af0:	08004b29 	.word	0x08004b29
 8004af4:	08004b29 	.word	0x08004b29
 8004af8:	08004b29 	.word	0x08004b29
 8004afc:	08004b29 	.word	0x08004b29
	{
		case 0: case 1: case 2:
			FuncO_ApplyPresetToSync(SINE_FUNC_MODE);
 8004b00:	2000      	movs	r0, #0
 8004b02:	f000 f873 	bl	8004bec <FuncO_ApplyPresetToSync>
			break;
 8004b06:	e013      	b.n	8004b30 <FuncO_ModifySyncOutput+0xa8>

		case 3: case 4: case 5: case 6:
			FuncO_ApplyPresetToSync(SQUARE_FUNC_MODE);
 8004b08:	2001      	movs	r0, #1
 8004b0a:	f000 f86f 	bl	8004bec <FuncO_ApplyPresetToSync>
			break;
 8004b0e:	e00f      	b.n	8004b30 <FuncO_ModifySyncOutput+0xa8>

		case 7: case 8: case 9: case 10:
			FuncO_ApplyPresetToSync(SAW_FUNC_MODE);
 8004b10:	2002      	movs	r0, #2
 8004b12:	f000 f86b 	bl	8004bec <FuncO_ApplyPresetToSync>
			break;
 8004b16:	e00b      	b.n	8004b30 <FuncO_ModifySyncOutput+0xa8>

		case 11: case 12: case 13: case 14:
			FuncO_ApplyPresetToSync(REV_SAW_FUNC_MODE);
 8004b18:	2003      	movs	r0, #3
 8004b1a:	f000 f867 	bl	8004bec <FuncO_ApplyPresetToSync>
			break;
 8004b1e:	e007      	b.n	8004b30 <FuncO_ModifySyncOutput+0xa8>

		case 15: case 16: case 17: case 18:
			FuncO_ApplyPresetToSync(TRIANGLE_FUNC_MODE);
 8004b20:	2004      	movs	r0, #4
 8004b22:	f000 f863 	bl	8004bec <FuncO_ApplyPresetToSync>
			break;
 8004b26:	e003      	b.n	8004b30 <FuncO_ModifySyncOutput+0xa8>

		case 19: case 20: case 21: case 22: case 23:
			FuncO_ApplyPresetToSync(IMPULSE_FUNC_MODE);
 8004b28:	2005      	movs	r0, #5
 8004b2a:	f000 f85f 	bl	8004bec <FuncO_ApplyPresetToSync>
			break;
 8004b2e:	bf00      	nop

	}
}
 8004b30:	bf00      	nop
 8004b32:	3708      	adds	r7, #8
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}

08004b38 <FuncO_ApplyPresetToSignal>:

 *	@retval None
 *
 */
void FuncO_ApplyPresetToSignal(eOutput_mode pPresetEnum)
{
 8004b38:	b590      	push	{r4, r7, lr}
 8004b3a:	b087      	sub	sp, #28
 8004b3c:	af02      	add	r7, sp, #8
 8004b3e:	4603      	mov	r3, r0
 8004b40:	71fb      	strb	r3, [r7, #7]

	// copy the lookup table for the next output function in to SignalChannel object
	SM_GetOutputChannel(SIGNAL_CHANNEL)->ref_lut_data = theFuncProfiles[pPresetEnum].lookup_table_data;
 8004b42:	79fc      	ldrb	r4, [r7, #7]
 8004b44:	2000      	movs	r0, #0
 8004b46:	f000 fa81 	bl	800504c <SM_GetOutputChannel>
 8004b4a:	4601      	mov	r1, r0
 8004b4c:	4a23      	ldr	r2, [pc, #140]	; (8004bdc <FuncO_ApplyPresetToSignal+0xa4>)
 8004b4e:	00e3      	lsls	r3, r4, #3
 8004b50:	4413      	add	r3, r2
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	604b      	str	r3, [r1, #4]

	// set preset for PGA gain and dsp amplitude adjustment
	eAmpSettings_t eTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile->amp_setting;
 8004b56:	2000      	movs	r0, #0
 8004b58:	f000 fa78 	bl	800504c <SM_GetOutputChannel>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8004b62:	781b      	ldrb	r3, [r3, #0]
 8004b64:	73fb      	strb	r3, [r7, #15]
	VPP_ApplyPresetToSignal(eTmpVppPreset);
 8004b66:	7bfb      	ldrb	r3, [r7, #15]
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f000 fae5 	bl	8005138 <VPP_ApplyPresetToSignal>

	// set the next function output
	SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile = &theFuncProfiles[pPresetEnum];
 8004b6e:	79fc      	ldrb	r4, [r7, #7]
 8004b70:	2000      	movs	r0, #0
 8004b72:	f000 fa6b 	bl	800504c <SM_GetOutputChannel>
 8004b76:	4601      	mov	r1, r0
 8004b78:	00e3      	lsls	r3, r4, #3
 8004b7a:	4a18      	ldr	r2, [pc, #96]	; (8004bdc <FuncO_ApplyPresetToSignal+0xa4>)
 8004b7c:	4413      	add	r3, r2
 8004b7e:	f8c1 31e8 	str.w	r3, [r1, #488]	; 0x1e8

	// pause timer to resync both outputs
	//OUTPUT_TIMER->CR1 &= ~(TIM_CR1_CEN);
	HAL_TIM_Base_Stop(&htim8);
 8004b82:	4817      	ldr	r0, [pc, #92]	; (8004be0 <FuncO_ApplyPresetToSignal+0xa8>)
 8004b84:	f007 f8d0 	bl	800bd28 <HAL_TIM_Base_Stop>

	// restart the DAC with the new data
	HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8004b88:	2100      	movs	r1, #0
 8004b8a:	4816      	ldr	r0, [pc, #88]	; (8004be4 <FuncO_ApplyPresetToSignal+0xac>)
 8004b8c:	f005 f86e 	bl	8009c6c <HAL_DAC_Stop_DMA>
	HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8004b90:	2000      	movs	r0, #0
 8004b92:	f000 fa5b 	bl	800504c <SM_GetOutputChannel>
 8004b96:	4603      	mov	r3, r0
 8004b98:	f103 0208 	add.w	r2, r3, #8
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	9300      	str	r3, [sp, #0]
 8004ba0:	2378      	movs	r3, #120	; 0x78
 8004ba2:	2100      	movs	r1, #0
 8004ba4:	480f      	ldr	r0, [pc, #60]	; (8004be4 <FuncO_ApplyPresetToSignal+0xac>)
 8004ba6:	f004 ff9f 	bl	8009ae8 <HAL_DAC_Start_DMA>

	// restart the the other DAC
	HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1);
 8004baa:	2100      	movs	r1, #0
 8004bac:	480e      	ldr	r0, [pc, #56]	; (8004be8 <FuncO_ApplyPresetToSignal+0xb0>)
 8004bae:	f005 f85d 	bl	8009c6c <HAL_DAC_Stop_DMA>
	HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SYNC_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8004bb2:	2001      	movs	r0, #1
 8004bb4:	f000 fa4a 	bl	800504c <SM_GetOutputChannel>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	f103 0208 	add.w	r2, r3, #8
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	9300      	str	r3, [sp, #0]
 8004bc2:	2378      	movs	r3, #120	; 0x78
 8004bc4:	2100      	movs	r1, #0
 8004bc6:	4808      	ldr	r0, [pc, #32]	; (8004be8 <FuncO_ApplyPresetToSignal+0xb0>)
 8004bc8:	f004 ff8e 	bl	8009ae8 <HAL_DAC_Start_DMA>

	// resume timer to resync both outputs
	HAL_TIM_Base_Start(&htim8);
 8004bcc:	4804      	ldr	r0, [pc, #16]	; (8004be0 <FuncO_ApplyPresetToSignal+0xa8>)
 8004bce:	f007 f87d 	bl	800bccc <HAL_TIM_Base_Start>
	//OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
}
 8004bd2:	bf00      	nop
 8004bd4:	3714      	adds	r7, #20
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd90      	pop	{r4, r7, pc}
 8004bda:	bf00      	nop
 8004bdc:	200001a4 	.word	0x200001a4
 8004be0:	20002748 	.word	0x20002748
 8004be4:	20002610 	.word	0x20002610
 8004be8:	200025fc 	.word	0x200025fc

08004bec <FuncO_ApplyPresetToSync>:

 *	@retval None
 *
 */
void FuncO_ApplyPresetToSync(eOutput_mode pPresetEnum)
{
 8004bec:	b590      	push	{r4, r7, lr}
 8004bee:	b087      	sub	sp, #28
 8004bf0:	af02      	add	r7, sp, #8
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	71fb      	strb	r3, [r7, #7]
	// copy the lookup table for the next output function in to SyncChannel object
	SM_GetOutputChannel(SYNC_CHANNEL)->ref_lut_data = theFuncProfiles[pPresetEnum].lookup_table_data;
 8004bf6:	79fc      	ldrb	r4, [r7, #7]
 8004bf8:	2001      	movs	r0, #1
 8004bfa:	f000 fa27 	bl	800504c <SM_GetOutputChannel>
 8004bfe:	4601      	mov	r1, r0
 8004c00:	4a26      	ldr	r2, [pc, #152]	; (8004c9c <FuncO_ApplyPresetToSync+0xb0>)
 8004c02:	00e3      	lsls	r3, r4, #3
 8004c04:	4413      	add	r3, r2
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	604b      	str	r3, [r1, #4]

	// set preset PGA gain and dsp amplitude adjustment
	eAmpSettings_t eTmpVppPreset = SM_GetOutputChannel(SYNC_CHANNEL)->amp_profile->amp_setting;
 8004c0a:	2001      	movs	r0, #1
 8004c0c:	f000 fa1e 	bl	800504c <SM_GetOutputChannel>
 8004c10:	4603      	mov	r3, r0
 8004c12:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	73fb      	strb	r3, [r7, #15]
	VPP_ApplyPresetToSync(eTmpVppPreset);
 8004c1a:	7bfb      	ldrb	r3, [r7, #15]
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f000 fab9 	bl	8005194 <VPP_ApplyPresetToSync>

	// set the next output function
	SM_GetOutputChannel(SYNC_CHANNEL)->func_profile = &theFuncProfiles[pPresetEnum];
 8004c22:	79fc      	ldrb	r4, [r7, #7]
 8004c24:	2001      	movs	r0, #1
 8004c26:	f000 fa11 	bl	800504c <SM_GetOutputChannel>
 8004c2a:	4601      	mov	r1, r0
 8004c2c:	00e3      	lsls	r3, r4, #3
 8004c2e:	4a1b      	ldr	r2, [pc, #108]	; (8004c9c <FuncO_ApplyPresetToSync+0xb0>)
 8004c30:	4413      	add	r3, r2
 8004c32:	f8c1 31e8 	str.w	r3, [r1, #488]	; 0x1e8

	// pause timer to resync both outputs
	//HAL_TIM_Base_Stop(&htim8);
	OUTPUT_TIMER->CR1 &= ~(TIM_CR1_CEN);
 8004c36:	4b1a      	ldr	r3, [pc, #104]	; (8004ca0 <FuncO_ApplyPresetToSync+0xb4>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a19      	ldr	r2, [pc, #100]	; (8004ca0 <FuncO_ApplyPresetToSync+0xb4>)
 8004c3c:	f023 0301 	bic.w	r3, r3, #1
 8004c40:	6013      	str	r3, [r2, #0]

	// restart the DAC with the new data
	HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1);
 8004c42:	2100      	movs	r1, #0
 8004c44:	4817      	ldr	r0, [pc, #92]	; (8004ca4 <FuncO_ApplyPresetToSync+0xb8>)
 8004c46:	f005 f811 	bl	8009c6c <HAL_DAC_Stop_DMA>
	HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SYNC_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8004c4a:	2001      	movs	r0, #1
 8004c4c:	f000 f9fe 	bl	800504c <SM_GetOutputChannel>
 8004c50:	4603      	mov	r3, r0
 8004c52:	f103 0208 	add.w	r2, r3, #8
 8004c56:	2300      	movs	r3, #0
 8004c58:	9300      	str	r3, [sp, #0]
 8004c5a:	2378      	movs	r3, #120	; 0x78
 8004c5c:	2100      	movs	r1, #0
 8004c5e:	4811      	ldr	r0, [pc, #68]	; (8004ca4 <FuncO_ApplyPresetToSync+0xb8>)
 8004c60:	f004 ff42 	bl	8009ae8 <HAL_DAC_Start_DMA>

	// restart the the other DAC
	HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8004c64:	2100      	movs	r1, #0
 8004c66:	4810      	ldr	r0, [pc, #64]	; (8004ca8 <FuncO_ApplyPresetToSync+0xbc>)
 8004c68:	f005 f800 	bl	8009c6c <HAL_DAC_Stop_DMA>
	HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8004c6c:	2000      	movs	r0, #0
 8004c6e:	f000 f9ed 	bl	800504c <SM_GetOutputChannel>
 8004c72:	4603      	mov	r3, r0
 8004c74:	f103 0208 	add.w	r2, r3, #8
 8004c78:	2300      	movs	r3, #0
 8004c7a:	9300      	str	r3, [sp, #0]
 8004c7c:	2378      	movs	r3, #120	; 0x78
 8004c7e:	2100      	movs	r1, #0
 8004c80:	4809      	ldr	r0, [pc, #36]	; (8004ca8 <FuncO_ApplyPresetToSync+0xbc>)
 8004c82:	f004 ff31 	bl	8009ae8 <HAL_DAC_Start_DMA>

	// resume timer to resync both outputs
	//HAL_TIM_Base_Start(&htim8);
	OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
 8004c86:	4b06      	ldr	r3, [pc, #24]	; (8004ca0 <FuncO_ApplyPresetToSync+0xb4>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a05      	ldr	r2, [pc, #20]	; (8004ca0 <FuncO_ApplyPresetToSync+0xb4>)
 8004c8c:	f043 0301 	orr.w	r3, r3, #1
 8004c90:	6013      	str	r3, [r2, #0]
}
 8004c92:	bf00      	nop
 8004c94:	3714      	adds	r7, #20
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd90      	pop	{r4, r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	200001a4 	.word	0x200001a4
 8004ca0:	40013400 	.word	0x40013400
 8004ca4:	200025fc 	.word	0x200025fc
 8004ca8:	20002610 	.word	0x20002610

08004cac <FuncO_GetFuncPresetEncoderRange>:
 *	@param None
 *	@retval uint8_t
 *
 */
uint8_t FuncO_GetFuncPresetEncoderRange()
{
 8004cac:	b480      	push	{r7}
 8004cae:	af00      	add	r7, sp, #0
	return FuncPresetEncoderRange;
 8004cb0:	4b03      	ldr	r3, [pc, #12]	; (8004cc0 <FuncO_GetFuncPresetEncoderRange+0x14>)
 8004cb2:	781b      	ldrb	r3, [r3, #0]
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr
 8004cbe:	bf00      	nop
 8004cc0:	200001a0 	.word	0x200001a0

08004cc4 <GO_ApplyPresetToSignal>:
 *	@param None
 *	@retval None
 *
 */
void GO_ApplyPresetToSignal(eGainSettings_t pPresetEnum)
{
 8004cc4:	b590      	push	{r4, r7, lr}
 8004cc6:	b083      	sub	sp, #12
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	4603      	mov	r3, r0
 8004ccc:	71fb      	strb	r3, [r7, #7]
	SM_GetOutputChannel(SIGNAL_CHANNEL)->gain_profile = &theGainProfiles[pPresetEnum];
 8004cce:	79fc      	ldrb	r4, [r7, #7]
 8004cd0:	2000      	movs	r0, #0
 8004cd2:	f000 f9bb 	bl	800504c <SM_GetOutputChannel>
 8004cd6:	4601      	mov	r1, r0
 8004cd8:	4623      	mov	r3, r4
 8004cda:	005b      	lsls	r3, r3, #1
 8004cdc:	4423      	add	r3, r4
 8004cde:	4a4f      	ldr	r2, [pc, #316]	; (8004e1c <GO_ApplyPresetToSignal+0x158>)
 8004ce0:	4413      	add	r3, r2
 8004ce2:	f8c1 31f0 	str.w	r3, [r1, #496]	; 0x1f0

	switch(pPresetEnum)
 8004ce6:	79fb      	ldrb	r3, [r7, #7]
 8004ce8:	2b07      	cmp	r3, #7
 8004cea:	f200 8093 	bhi.w	8004e14 <GO_ApplyPresetToSignal+0x150>
 8004cee:	a201      	add	r2, pc, #4	; (adr r2, 8004cf4 <GO_ApplyPresetToSignal+0x30>)
 8004cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cf4:	08004d15 	.word	0x08004d15
 8004cf8:	08004d35 	.word	0x08004d35
 8004cfc:	08004d55 	.word	0x08004d55
 8004d00:	08004d75 	.word	0x08004d75
 8004d04:	08004d95 	.word	0x08004d95
 8004d08:	08004db5 	.word	0x08004db5
 8004d0c:	08004dd5 	.word	0x08004dd5
 8004d10:	08004df5 	.word	0x08004df5
	{
		case ZERO_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8004d14:	2200      	movs	r2, #0
 8004d16:	2101      	movs	r1, #1
 8004d18:	4841      	ldr	r0, [pc, #260]	; (8004e20 <GO_ApplyPresetToSignal+0x15c>)
 8004d1a:	f005 fedd 	bl	800aad8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8004d1e:	2200      	movs	r2, #0
 8004d20:	2120      	movs	r1, #32
 8004d22:	4840      	ldr	r0, [pc, #256]	; (8004e24 <GO_ApplyPresetToSignal+0x160>)
 8004d24:	f005 fed8 	bl	800aad8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8004d28:	2200      	movs	r2, #0
 8004d2a:	2110      	movs	r1, #16
 8004d2c:	483d      	ldr	r0, [pc, #244]	; (8004e24 <GO_ApplyPresetToSignal+0x160>)
 8004d2e:	f005 fed3 	bl	800aad8 <HAL_GPIO_WritePin>
			break;
 8004d32:	e06f      	b.n	8004e14 <GO_ApplyPresetToSignal+0x150>

		case ONE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8004d34:	2201      	movs	r2, #1
 8004d36:	2101      	movs	r1, #1
 8004d38:	4839      	ldr	r0, [pc, #228]	; (8004e20 <GO_ApplyPresetToSignal+0x15c>)
 8004d3a:	f005 fecd 	bl	800aad8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8004d3e:	2200      	movs	r2, #0
 8004d40:	2120      	movs	r1, #32
 8004d42:	4838      	ldr	r0, [pc, #224]	; (8004e24 <GO_ApplyPresetToSignal+0x160>)
 8004d44:	f005 fec8 	bl	800aad8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8004d48:	2200      	movs	r2, #0
 8004d4a:	2110      	movs	r1, #16
 8004d4c:	4835      	ldr	r0, [pc, #212]	; (8004e24 <GO_ApplyPresetToSignal+0x160>)
 8004d4e:	f005 fec3 	bl	800aad8 <HAL_GPIO_WritePin>
			break;
 8004d52:	e05f      	b.n	8004e14 <GO_ApplyPresetToSignal+0x150>

		case TWO_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8004d54:	2200      	movs	r2, #0
 8004d56:	2101      	movs	r1, #1
 8004d58:	4831      	ldr	r0, [pc, #196]	; (8004e20 <GO_ApplyPresetToSignal+0x15c>)
 8004d5a:	f005 febd 	bl	800aad8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8004d5e:	2201      	movs	r2, #1
 8004d60:	2120      	movs	r1, #32
 8004d62:	4830      	ldr	r0, [pc, #192]	; (8004e24 <GO_ApplyPresetToSignal+0x160>)
 8004d64:	f005 feb8 	bl	800aad8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8004d68:	2200      	movs	r2, #0
 8004d6a:	2110      	movs	r1, #16
 8004d6c:	482d      	ldr	r0, [pc, #180]	; (8004e24 <GO_ApplyPresetToSignal+0x160>)
 8004d6e:	f005 feb3 	bl	800aad8 <HAL_GPIO_WritePin>
			break;
 8004d72:	e04f      	b.n	8004e14 <GO_ApplyPresetToSignal+0x150>

		case THREE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8004d74:	2201      	movs	r2, #1
 8004d76:	2101      	movs	r1, #1
 8004d78:	4829      	ldr	r0, [pc, #164]	; (8004e20 <GO_ApplyPresetToSignal+0x15c>)
 8004d7a:	f005 fead 	bl	800aad8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8004d7e:	2201      	movs	r2, #1
 8004d80:	2120      	movs	r1, #32
 8004d82:	4828      	ldr	r0, [pc, #160]	; (8004e24 <GO_ApplyPresetToSignal+0x160>)
 8004d84:	f005 fea8 	bl	800aad8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8004d88:	2200      	movs	r2, #0
 8004d8a:	2110      	movs	r1, #16
 8004d8c:	4825      	ldr	r0, [pc, #148]	; (8004e24 <GO_ApplyPresetToSignal+0x160>)
 8004d8e:	f005 fea3 	bl	800aad8 <HAL_GPIO_WritePin>
			break;
 8004d92:	e03f      	b.n	8004e14 <GO_ApplyPresetToSignal+0x150>

		case FOUR_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8004d94:	2200      	movs	r2, #0
 8004d96:	2101      	movs	r1, #1
 8004d98:	4821      	ldr	r0, [pc, #132]	; (8004e20 <GO_ApplyPresetToSignal+0x15c>)
 8004d9a:	f005 fe9d 	bl	800aad8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8004d9e:	2200      	movs	r2, #0
 8004da0:	2120      	movs	r1, #32
 8004da2:	4820      	ldr	r0, [pc, #128]	; (8004e24 <GO_ApplyPresetToSignal+0x160>)
 8004da4:	f005 fe98 	bl	800aad8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8004da8:	2201      	movs	r2, #1
 8004daa:	2110      	movs	r1, #16
 8004dac:	481d      	ldr	r0, [pc, #116]	; (8004e24 <GO_ApplyPresetToSignal+0x160>)
 8004dae:	f005 fe93 	bl	800aad8 <HAL_GPIO_WritePin>
			break;
 8004db2:	e02f      	b.n	8004e14 <GO_ApplyPresetToSignal+0x150>

		case FIVE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8004db4:	2201      	movs	r2, #1
 8004db6:	2101      	movs	r1, #1
 8004db8:	4819      	ldr	r0, [pc, #100]	; (8004e20 <GO_ApplyPresetToSignal+0x15c>)
 8004dba:	f005 fe8d 	bl	800aad8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	2120      	movs	r1, #32
 8004dc2:	4818      	ldr	r0, [pc, #96]	; (8004e24 <GO_ApplyPresetToSignal+0x160>)
 8004dc4:	f005 fe88 	bl	800aad8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8004dc8:	2201      	movs	r2, #1
 8004dca:	2110      	movs	r1, #16
 8004dcc:	4815      	ldr	r0, [pc, #84]	; (8004e24 <GO_ApplyPresetToSignal+0x160>)
 8004dce:	f005 fe83 	bl	800aad8 <HAL_GPIO_WritePin>
			break;
 8004dd2:	e01f      	b.n	8004e14 <GO_ApplyPresetToSignal+0x150>

		case SIX_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	2101      	movs	r1, #1
 8004dd8:	4811      	ldr	r0, [pc, #68]	; (8004e20 <GO_ApplyPresetToSignal+0x15c>)
 8004dda:	f005 fe7d 	bl	800aad8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8004dde:	2201      	movs	r2, #1
 8004de0:	2120      	movs	r1, #32
 8004de2:	4810      	ldr	r0, [pc, #64]	; (8004e24 <GO_ApplyPresetToSignal+0x160>)
 8004de4:	f005 fe78 	bl	800aad8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8004de8:	2201      	movs	r2, #1
 8004dea:	2110      	movs	r1, #16
 8004dec:	480d      	ldr	r0, [pc, #52]	; (8004e24 <GO_ApplyPresetToSignal+0x160>)
 8004dee:	f005 fe73 	bl	800aad8 <HAL_GPIO_WritePin>
			break;
 8004df2:	e00f      	b.n	8004e14 <GO_ApplyPresetToSignal+0x150>

		case SEVEN_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8004df4:	2201      	movs	r2, #1
 8004df6:	2101      	movs	r1, #1
 8004df8:	4809      	ldr	r0, [pc, #36]	; (8004e20 <GO_ApplyPresetToSignal+0x15c>)
 8004dfa:	f005 fe6d 	bl	800aad8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8004dfe:	2201      	movs	r2, #1
 8004e00:	2120      	movs	r1, #32
 8004e02:	4808      	ldr	r0, [pc, #32]	; (8004e24 <GO_ApplyPresetToSignal+0x160>)
 8004e04:	f005 fe68 	bl	800aad8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8004e08:	2201      	movs	r2, #1
 8004e0a:	2110      	movs	r1, #16
 8004e0c:	4805      	ldr	r0, [pc, #20]	; (8004e24 <GO_ApplyPresetToSignal+0x160>)
 8004e0e:	f005 fe63 	bl	800aad8 <HAL_GPIO_WritePin>
			break;
 8004e12:	bf00      	nop
	}
}
 8004e14:	bf00      	nop
 8004e16:	370c      	adds	r7, #12
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd90      	pop	{r4, r7, pc}
 8004e1c:	200001d4 	.word	0x200001d4
 8004e20:	48000400 	.word	0x48000400
 8004e24:	48000800 	.word	0x48000800

08004e28 <GO_ApplyPresetToSync>:
 *	@param None
 *	@retval None
 *
 */
void GO_ApplyPresetToSync(eGainSettings_t pPresetEnum)
{
 8004e28:	b590      	push	{r4, r7, lr}
 8004e2a:	b083      	sub	sp, #12
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	4603      	mov	r3, r0
 8004e30:	71fb      	strb	r3, [r7, #7]
	SM_GetOutputChannel(SYNC_CHANNEL)->gain_profile = &theGainProfiles[pPresetEnum];
 8004e32:	79fc      	ldrb	r4, [r7, #7]
 8004e34:	2001      	movs	r0, #1
 8004e36:	f000 f909 	bl	800504c <SM_GetOutputChannel>
 8004e3a:	4601      	mov	r1, r0
 8004e3c:	4623      	mov	r3, r4
 8004e3e:	005b      	lsls	r3, r3, #1
 8004e40:	4423      	add	r3, r4
 8004e42:	4a4f      	ldr	r2, [pc, #316]	; (8004f80 <GO_ApplyPresetToSync+0x158>)
 8004e44:	4413      	add	r3, r2
 8004e46:	f8c1 31f0 	str.w	r3, [r1, #496]	; 0x1f0

	switch(pPresetEnum)
 8004e4a:	79fb      	ldrb	r3, [r7, #7]
 8004e4c:	2b07      	cmp	r3, #7
 8004e4e:	f200 8093 	bhi.w	8004f78 <GO_ApplyPresetToSync+0x150>
 8004e52:	a201      	add	r2, pc, #4	; (adr r2, 8004e58 <GO_ApplyPresetToSync+0x30>)
 8004e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e58:	08004e79 	.word	0x08004e79
 8004e5c:	08004e99 	.word	0x08004e99
 8004e60:	08004eb9 	.word	0x08004eb9
 8004e64:	08004ed9 	.word	0x08004ed9
 8004e68:	08004ef9 	.word	0x08004ef9
 8004e6c:	08004f19 	.word	0x08004f19
 8004e70:	08004f39 	.word	0x08004f39
 8004e74:	08004f59 	.word	0x08004f59
	{
		case ZERO_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8004e78:	2200      	movs	r2, #0
 8004e7a:	2101      	movs	r1, #1
 8004e7c:	4841      	ldr	r0, [pc, #260]	; (8004f84 <GO_ApplyPresetToSync+0x15c>)
 8004e7e:	f005 fe2b 	bl	800aad8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8004e82:	2200      	movs	r2, #0
 8004e84:	2120      	movs	r1, #32
 8004e86:	4840      	ldr	r0, [pc, #256]	; (8004f88 <GO_ApplyPresetToSync+0x160>)
 8004e88:	f005 fe26 	bl	800aad8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	2110      	movs	r1, #16
 8004e90:	483d      	ldr	r0, [pc, #244]	; (8004f88 <GO_ApplyPresetToSync+0x160>)
 8004e92:	f005 fe21 	bl	800aad8 <HAL_GPIO_WritePin>
			break;
 8004e96:	e06f      	b.n	8004f78 <GO_ApplyPresetToSync+0x150>

		case ONE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8004e98:	2201      	movs	r2, #1
 8004e9a:	2101      	movs	r1, #1
 8004e9c:	4839      	ldr	r0, [pc, #228]	; (8004f84 <GO_ApplyPresetToSync+0x15c>)
 8004e9e:	f005 fe1b 	bl	800aad8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	2120      	movs	r1, #32
 8004ea6:	4838      	ldr	r0, [pc, #224]	; (8004f88 <GO_ApplyPresetToSync+0x160>)
 8004ea8:	f005 fe16 	bl	800aad8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8004eac:	2200      	movs	r2, #0
 8004eae:	2110      	movs	r1, #16
 8004eb0:	4835      	ldr	r0, [pc, #212]	; (8004f88 <GO_ApplyPresetToSync+0x160>)
 8004eb2:	f005 fe11 	bl	800aad8 <HAL_GPIO_WritePin>
			break;
 8004eb6:	e05f      	b.n	8004f78 <GO_ApplyPresetToSync+0x150>

		case TWO_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8004eb8:	2200      	movs	r2, #0
 8004eba:	2101      	movs	r1, #1
 8004ebc:	4831      	ldr	r0, [pc, #196]	; (8004f84 <GO_ApplyPresetToSync+0x15c>)
 8004ebe:	f005 fe0b 	bl	800aad8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	2120      	movs	r1, #32
 8004ec6:	4830      	ldr	r0, [pc, #192]	; (8004f88 <GO_ApplyPresetToSync+0x160>)
 8004ec8:	f005 fe06 	bl	800aad8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8004ecc:	2200      	movs	r2, #0
 8004ece:	2110      	movs	r1, #16
 8004ed0:	482d      	ldr	r0, [pc, #180]	; (8004f88 <GO_ApplyPresetToSync+0x160>)
 8004ed2:	f005 fe01 	bl	800aad8 <HAL_GPIO_WritePin>
			break;
 8004ed6:	e04f      	b.n	8004f78 <GO_ApplyPresetToSync+0x150>

		case THREE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8004ed8:	2201      	movs	r2, #1
 8004eda:	2101      	movs	r1, #1
 8004edc:	4829      	ldr	r0, [pc, #164]	; (8004f84 <GO_ApplyPresetToSync+0x15c>)
 8004ede:	f005 fdfb 	bl	800aad8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	2120      	movs	r1, #32
 8004ee6:	4828      	ldr	r0, [pc, #160]	; (8004f88 <GO_ApplyPresetToSync+0x160>)
 8004ee8:	f005 fdf6 	bl	800aad8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8004eec:	2200      	movs	r2, #0
 8004eee:	2110      	movs	r1, #16
 8004ef0:	4825      	ldr	r0, [pc, #148]	; (8004f88 <GO_ApplyPresetToSync+0x160>)
 8004ef2:	f005 fdf1 	bl	800aad8 <HAL_GPIO_WritePin>
			break;
 8004ef6:	e03f      	b.n	8004f78 <GO_ApplyPresetToSync+0x150>

		case FOUR_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8004ef8:	2200      	movs	r2, #0
 8004efa:	2101      	movs	r1, #1
 8004efc:	4821      	ldr	r0, [pc, #132]	; (8004f84 <GO_ApplyPresetToSync+0x15c>)
 8004efe:	f005 fdeb 	bl	800aad8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8004f02:	2200      	movs	r2, #0
 8004f04:	2120      	movs	r1, #32
 8004f06:	4820      	ldr	r0, [pc, #128]	; (8004f88 <GO_ApplyPresetToSync+0x160>)
 8004f08:	f005 fde6 	bl	800aad8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	2110      	movs	r1, #16
 8004f10:	481d      	ldr	r0, [pc, #116]	; (8004f88 <GO_ApplyPresetToSync+0x160>)
 8004f12:	f005 fde1 	bl	800aad8 <HAL_GPIO_WritePin>
			break;
 8004f16:	e02f      	b.n	8004f78 <GO_ApplyPresetToSync+0x150>

		case FIVE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8004f18:	2201      	movs	r2, #1
 8004f1a:	2101      	movs	r1, #1
 8004f1c:	4819      	ldr	r0, [pc, #100]	; (8004f84 <GO_ApplyPresetToSync+0x15c>)
 8004f1e:	f005 fddb 	bl	800aad8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8004f22:	2200      	movs	r2, #0
 8004f24:	2120      	movs	r1, #32
 8004f26:	4818      	ldr	r0, [pc, #96]	; (8004f88 <GO_ApplyPresetToSync+0x160>)
 8004f28:	f005 fdd6 	bl	800aad8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	2110      	movs	r1, #16
 8004f30:	4815      	ldr	r0, [pc, #84]	; (8004f88 <GO_ApplyPresetToSync+0x160>)
 8004f32:	f005 fdd1 	bl	800aad8 <HAL_GPIO_WritePin>
			break;
 8004f36:	e01f      	b.n	8004f78 <GO_ApplyPresetToSync+0x150>

		case SIX_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8004f38:	2200      	movs	r2, #0
 8004f3a:	2101      	movs	r1, #1
 8004f3c:	4811      	ldr	r0, [pc, #68]	; (8004f84 <GO_ApplyPresetToSync+0x15c>)
 8004f3e:	f005 fdcb 	bl	800aad8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8004f42:	2201      	movs	r2, #1
 8004f44:	2120      	movs	r1, #32
 8004f46:	4810      	ldr	r0, [pc, #64]	; (8004f88 <GO_ApplyPresetToSync+0x160>)
 8004f48:	f005 fdc6 	bl	800aad8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	2110      	movs	r1, #16
 8004f50:	480d      	ldr	r0, [pc, #52]	; (8004f88 <GO_ApplyPresetToSync+0x160>)
 8004f52:	f005 fdc1 	bl	800aad8 <HAL_GPIO_WritePin>
			break;
 8004f56:	e00f      	b.n	8004f78 <GO_ApplyPresetToSync+0x150>

		case SEVEN_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8004f58:	2201      	movs	r2, #1
 8004f5a:	2101      	movs	r1, #1
 8004f5c:	4809      	ldr	r0, [pc, #36]	; (8004f84 <GO_ApplyPresetToSync+0x15c>)
 8004f5e:	f005 fdbb 	bl	800aad8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8004f62:	2201      	movs	r2, #1
 8004f64:	2120      	movs	r1, #32
 8004f66:	4808      	ldr	r0, [pc, #32]	; (8004f88 <GO_ApplyPresetToSync+0x160>)
 8004f68:	f005 fdb6 	bl	800aad8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	2110      	movs	r1, #16
 8004f70:	4805      	ldr	r0, [pc, #20]	; (8004f88 <GO_ApplyPresetToSync+0x160>)
 8004f72:	f005 fdb1 	bl	800aad8 <HAL_GPIO_WritePin>
			break;
 8004f76:	bf00      	nop
	}
}
 8004f78:	bf00      	nop
 8004f7a:	370c      	adds	r7, #12
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd90      	pop	{r4, r7, pc}
 8004f80:	200001d4 	.word	0x200001d4
 8004f84:	48000400 	.word	0x48000400
 8004f88:	48000800 	.word	0x48000800

08004f8c <SM_Init>:
sOutputChannel_t SignalChannel;
sOutputChannel_t SyncChannel;


void SM_Init()
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b083      	sub	sp, #12
 8004f90:	af00      	add	r7, sp, #0

	// initialise the SIGNAL output channel
	SignalChannel.channel = SIGNAL_CHANNEL;
 8004f92:	4b28      	ldr	r3, [pc, #160]	; (8005034 <SM_Init+0xa8>)
 8004f94:	2200      	movs	r2, #0
 8004f96:	701a      	strb	r2, [r3, #0]
	SignalChannel.ref_lut_data = theFuncProfiles[SINE_FUNC_MODE].lookup_table_data;
 8004f98:	4b27      	ldr	r3, [pc, #156]	; (8005038 <SM_Init+0xac>)
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	4a25      	ldr	r2, [pc, #148]	; (8005034 <SM_Init+0xa8>)
 8004f9e:	6053      	str	r3, [r2, #4]
	SignalChannel.func_profile = &theFuncProfiles[eDefaultFuncPreset];
 8004fa0:	4b24      	ldr	r3, [pc, #144]	; (8005034 <SM_Init+0xa8>)
 8004fa2:	4a25      	ldr	r2, [pc, #148]	; (8005038 <SM_Init+0xac>)
 8004fa4:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8

	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8004fa8:	2300      	movs	r3, #0
 8004faa:	607b      	str	r3, [r7, #4]
 8004fac:	e00b      	b.n	8004fc6 <SM_Init+0x3a>
		SignalChannel.dsp_lut_data[i] = sine_data_table_3600[i];
 8004fae:	4a23      	ldr	r2, [pc, #140]	; (800503c <SM_Init+0xb0>)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004fb6:	491f      	ldr	r1, [pc, #124]	; (8005034 <SM_Init+0xa8>)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	3302      	adds	r3, #2
 8004fbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	3301      	adds	r3, #1
 8004fc4:	607b      	str	r3, [r7, #4]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2b77      	cmp	r3, #119	; 0x77
 8004fca:	ddf0      	ble.n	8004fae <SM_Init+0x22>

	SignalChannel.amp_profile = &theAmpProfiles[eDefaultVppPreset];
 8004fcc:	4b19      	ldr	r3, [pc, #100]	; (8005034 <SM_Init+0xa8>)
 8004fce:	4a1c      	ldr	r2, [pc, #112]	; (8005040 <SM_Init+0xb4>)
 8004fd0:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
	SignalChannel.gain_profile = &theGainProfiles[eDefaultGainPreset];
 8004fd4:	4b17      	ldr	r3, [pc, #92]	; (8005034 <SM_Init+0xa8>)
 8004fd6:	4a1b      	ldr	r2, [pc, #108]	; (8005044 <SM_Init+0xb8>)
 8004fd8:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0

	// initialise the SYNC output channel
	SyncChannel.channel = SYNC_CHANNEL;
 8004fdc:	4b1a      	ldr	r3, [pc, #104]	; (8005048 <SM_Init+0xbc>)
 8004fde:	2201      	movs	r2, #1
 8004fe0:	701a      	strb	r2, [r3, #0]
	SyncChannel.ref_lut_data = theFuncProfiles[SINE_FUNC_MODE].lookup_table_data;
 8004fe2:	4b15      	ldr	r3, [pc, #84]	; (8005038 <SM_Init+0xac>)
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	4a18      	ldr	r2, [pc, #96]	; (8005048 <SM_Init+0xbc>)
 8004fe8:	6053      	str	r3, [r2, #4]
	SyncChannel.func_profile = &theFuncProfiles[eDefaultFuncPreset];
 8004fea:	4b17      	ldr	r3, [pc, #92]	; (8005048 <SM_Init+0xbc>)
 8004fec:	4a12      	ldr	r2, [pc, #72]	; (8005038 <SM_Init+0xac>)
 8004fee:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8

	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	603b      	str	r3, [r7, #0]
 8004ff6:	e00b      	b.n	8005010 <SM_Init+0x84>
		SyncChannel.dsp_lut_data[i] = sine_data_table_3600[i];
 8004ff8:	4a10      	ldr	r2, [pc, #64]	; (800503c <SM_Init+0xb0>)
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005000:	4911      	ldr	r1, [pc, #68]	; (8005048 <SM_Init+0xbc>)
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	3302      	adds	r3, #2
 8005006:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	3301      	adds	r3, #1
 800500e:	603b      	str	r3, [r7, #0]
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	2b77      	cmp	r3, #119	; 0x77
 8005014:	ddf0      	ble.n	8004ff8 <SM_Init+0x6c>

	SyncChannel.amp_profile = &theAmpProfiles[eDefaultVppPreset];
 8005016:	4b0c      	ldr	r3, [pc, #48]	; (8005048 <SM_Init+0xbc>)
 8005018:	4a09      	ldr	r2, [pc, #36]	; (8005040 <SM_Init+0xb4>)
 800501a:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
	SyncChannel.gain_profile = &theGainProfiles[eDefaultGainPreset];
 800501e:	4b0a      	ldr	r3, [pc, #40]	; (8005048 <SM_Init+0xbc>)
 8005020:	4a08      	ldr	r2, [pc, #32]	; (8005044 <SM_Init+0xb8>)
 8005022:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
}
 8005026:	bf00      	nop
 8005028:	370c      	adds	r7, #12
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr
 8005032:	bf00      	nop
 8005034:	20002138 	.word	0x20002138
 8005038:	200001a4 	.word	0x200001a4
 800503c:	20001578 	.word	0x20001578
 8005040:	20000ba8 	.word	0x20000ba8
 8005044:	200001d7 	.word	0x200001d7
 8005048:	20001f44 	.word	0x20001f44

0800504c <SM_GetOutputChannel>:

sOutputChannel_t * SM_GetOutputChannel(eOutputChannel_t pChannel)
{
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 8005052:	4603      	mov	r3, r0
 8005054:	71fb      	strb	r3, [r7, #7]
	if(!pChannel)
 8005056:	79fb      	ldrb	r3, [r7, #7]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d101      	bne.n	8005060 <SM_GetOutputChannel+0x14>
		return &SignalChannel;
 800505c:	4b04      	ldr	r3, [pc, #16]	; (8005070 <SM_GetOutputChannel+0x24>)
 800505e:	e000      	b.n	8005062 <SM_GetOutputChannel+0x16>
	else
		return &SyncChannel;
 8005060:	4b04      	ldr	r3, [pc, #16]	; (8005074 <SM_GetOutputChannel+0x28>)
}
 8005062:	4618      	mov	r0, r3
 8005064:	370c      	adds	r7, #12
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr
 800506e:	bf00      	nop
 8005070:	20002138 	.word	0x20002138
 8005074:	20001f44 	.word	0x20001f44

08005078 <SM_GetEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
uint16_t SM_GetEncoderValue(eEncoder_Direction direction)
{
 8005078:	b480      	push	{r7}
 800507a:	b083      	sub	sp, #12
 800507c:	af00      	add	r7, sp, #0
 800507e:	4603      	mov	r3, r0
 8005080:	71fb      	strb	r3, [r7, #7]
	if(direction)
 8005082:	79fb      	ldrb	r3, [r7, #7]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d008      	beq.n	800509a <SM_GetEncoderValue+0x22>
	{
		return ENCODER_TIMER->ARR - ENCODER_TIMER->CNT;
 8005088:	4b08      	ldr	r3, [pc, #32]	; (80050ac <SM_GetEncoderValue+0x34>)
 800508a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800508c:	b29a      	uxth	r2, r3
 800508e:	4b07      	ldr	r3, [pc, #28]	; (80050ac <SM_GetEncoderValue+0x34>)
 8005090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005092:	b29b      	uxth	r3, r3
 8005094:	1ad3      	subs	r3, r2, r3
 8005096:	b29b      	uxth	r3, r3
 8005098:	e002      	b.n	80050a0 <SM_GetEncoderValue+0x28>
	}
	else
	{
		return ENCODER_TIMER->CNT;
 800509a:	4b04      	ldr	r3, [pc, #16]	; (80050ac <SM_GetEncoderValue+0x34>)
 800509c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509e:	b29b      	uxth	r3, r3
	}
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	370c      	adds	r7, #12
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr
 80050ac:	40012c00 	.word	0x40012c00

080050b0 <SM_GetOutputInHertz>:
 *	@param None
 *	@retval None
 *
 */
float SM_GetOutputInHertz()
{
 80050b0:	b480      	push	{r7}
 80050b2:	b085      	sub	sp, #20
 80050b4:	af00      	add	r7, sp, #0
	volatile float output_tm_psc;
	volatile float output_tm_arr;

	// safe-guard against divide by zero
	(OUTPUT_TIMER->PSC == 0) ? (output_tm_psc = 1) : (output_tm_psc = OUTPUT_TIMER->PSC);
 80050b6:	4b1d      	ldr	r3, [pc, #116]	; (800512c <SM_GetOutputInHertz+0x7c>)
 80050b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d103      	bne.n	80050c6 <SM_GetOutputInHertz+0x16>
 80050be:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80050c2:	60bb      	str	r3, [r7, #8]
 80050c4:	e007      	b.n	80050d6 <SM_GetOutputInHertz+0x26>
 80050c6:	4b19      	ldr	r3, [pc, #100]	; (800512c <SM_GetOutputInHertz+0x7c>)
 80050c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ca:	ee07 3a90 	vmov	s15, r3
 80050ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050d2:	edc7 7a02 	vstr	s15, [r7, #8]
	(OUTPUT_TIMER->ARR == 0) ? (output_tm_arr = 1) : (output_tm_arr = OUTPUT_TIMER->ARR);
 80050d6:	4b15      	ldr	r3, [pc, #84]	; (800512c <SM_GetOutputInHertz+0x7c>)
 80050d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d103      	bne.n	80050e6 <SM_GetOutputInHertz+0x36>
 80050de:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80050e2:	607b      	str	r3, [r7, #4]
 80050e4:	e007      	b.n	80050f6 <SM_GetOutputInHertz+0x46>
 80050e6:	4b11      	ldr	r3, [pc, #68]	; (800512c <SM_GetOutputInHertz+0x7c>)
 80050e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ea:	ee07 3a90 	vmov	s15, r3
 80050ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050f2:	edc7 7a01 	vstr	s15, [r7, #4]

	float output_tm_freq = SM_MCLK / (output_tm_psc * output_tm_arr);
 80050f6:	ed97 7a02 	vldr	s14, [r7, #8]
 80050fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80050fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005102:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8005130 <SM_GetOutputInHertz+0x80>
 8005106:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800510a:	edc7 7a03 	vstr	s15, [r7, #12]


	return output_tm_freq / SM_FSAMP;
 800510e:	edd7 7a03 	vldr	s15, [r7, #12]
 8005112:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8005134 <SM_GetOutputInHertz+0x84>
 8005116:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800511a:	eef0 7a66 	vmov.f32	s15, s13
}
 800511e:	eeb0 0a67 	vmov.f32	s0, s15
 8005122:	3714      	adds	r7, #20
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr
 800512c:	40013400 	.word	0x40013400
 8005130:	4d2037a0 	.word	0x4d2037a0
 8005134:	42f00000 	.word	0x42f00000

08005138 <VPP_ApplyPresetToSignal>:
 *	@param None
 *	@retval None
 *
 */
void VPP_ApplyPresetToSignal(eAmpSettings_t pPresetEnum)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b084      	sub	sp, #16
 800513c:	af00      	add	r7, sp, #0
 800513e:	4603      	mov	r3, r0
 8005140:	71fb      	strb	r3, [r7, #7]
	// retrieve the next preset
	AmplitudeProfile_t* pNextEncPreset = &theAmpProfiles[pPresetEnum];
 8005142:	79fa      	ldrb	r2, [r7, #7]
 8005144:	4613      	mov	r3, r2
 8005146:	00db      	lsls	r3, r3, #3
 8005148:	1a9b      	subs	r3, r3, r2
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	4a10      	ldr	r2, [pc, #64]	; (8005190 <VPP_ApplyPresetToSignal+0x58>)
 800514e:	4413      	add	r3, r2
 8005150:	60fb      	str	r3, [r7, #12]

	// Set the new  amp profile to the SignalChannel object
	SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile = pNextEncPreset;
 8005152:	2000      	movs	r0, #0
 8005154:	f7ff ff7a 	bl	800504c <SM_GetOutputChannel>
 8005158:	4602      	mov	r2, r0
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	f8c2 31ec 	str.w	r3, [r2, #492]	; 0x1ec

    // set the gain preset
	GO_ApplyPresetToSignal(pNextEncPreset->gain_preset);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	7a1b      	ldrb	r3, [r3, #8]
 8005164:	4618      	mov	r0, r3
 8005166:	f7ff fdad 	bl	8004cc4 <GO_ApplyPresetToSignal>

    // Apply the next amplitude setting to the SignalChannel object
    _ProcessSignalDataTable(pNextEncPreset->neg_gain_coeff, pNextEncPreset->amp_offset , pNextEncPreset->epos);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	edd3 7a04 	vldr	s15, [r3, #16]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	ed93 7a05 	vldr	s14, [r3, #20]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	8b1b      	ldrh	r3, [r3, #24]
 800517a:	4618      	mov	r0, r3
 800517c:	eef0 0a47 	vmov.f32	s1, s14
 8005180:	eeb0 0a67 	vmov.f32	s0, s15
 8005184:	f000 f834 	bl	80051f0 <_ProcessSignalDataTable>


}
 8005188:	bf00      	nop
 800518a:	3710      	adds	r7, #16
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}
 8005190:	200001ec 	.word	0x200001ec

08005194 <VPP_ApplyPresetToSync>:
 *	@param None
 *	@retval None
 *
 */
void VPP_ApplyPresetToSync(eAmpSettings_t pPresetEnum)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b084      	sub	sp, #16
 8005198:	af00      	add	r7, sp, #0
 800519a:	4603      	mov	r3, r0
 800519c:	71fb      	strb	r3, [r7, #7]
	// retrieve the next preset
	AmplitudeProfile_t* pNextEncPreset = &theAmpProfiles[pPresetEnum];
 800519e:	79fa      	ldrb	r2, [r7, #7]
 80051a0:	4613      	mov	r3, r2
 80051a2:	00db      	lsls	r3, r3, #3
 80051a4:	1a9b      	subs	r3, r3, r2
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	4a10      	ldr	r2, [pc, #64]	; (80051ec <VPP_ApplyPresetToSync+0x58>)
 80051aa:	4413      	add	r3, r2
 80051ac:	60fb      	str	r3, [r7, #12]

	// Set the new VPP Preset to the SyncChannel object
	SM_GetOutputChannel(SYNC_CHANNEL)->amp_profile = pNextEncPreset;
 80051ae:	2001      	movs	r0, #1
 80051b0:	f7ff ff4c 	bl	800504c <SM_GetOutputChannel>
 80051b4:	4602      	mov	r2, r0
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	f8c2 31ec 	str.w	r3, [r2, #492]	; 0x1ec

	 // set the gain preset
	GO_ApplyPresetToSync(pNextEncPreset->gain_preset);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	7a1b      	ldrb	r3, [r3, #8]
 80051c0:	4618      	mov	r0, r3
 80051c2:	f7ff fe31 	bl	8004e28 <GO_ApplyPresetToSync>

	// Apply the next amplitude setting to the SyncChannel object
	_ProcessSyncDataTable(pNextEncPreset->neg_gain_coeff, pNextEncPreset->amp_offset , pNextEncPreset->epos);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	edd3 7a04 	vldr	s15, [r3, #16]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	ed93 7a05 	vldr	s14, [r3, #20]
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	8b1b      	ldrh	r3, [r3, #24]
 80051d6:	4618      	mov	r0, r3
 80051d8:	eef0 0a47 	vmov.f32	s1, s14
 80051dc:	eeb0 0a67 	vmov.f32	s0, s15
 80051e0:	f000 f884 	bl	80052ec <_ProcessSyncDataTable>



}
 80051e4:	bf00      	nop
 80051e6:	3710      	adds	r7, #16
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}
 80051ec:	200001ec 	.word	0x200001ec

080051f0 <_ProcessSignalDataTable>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessSignalDataTable(float _neg_gain_coeff, float amp_offset, uint16_t _encoder_value)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b088      	sub	sp, #32
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	ed87 0a03 	vstr	s0, [r7, #12]
 80051fa:	edc7 0a02 	vstr	s1, [r7, #8]
 80051fe:	4603      	mov	r3, r0
 8005200:	80fb      	strh	r3, [r7, #6]
	// copy refer lookup datat table from SignalChannel object
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005202:	2300      	movs	r3, #0
 8005204:	61fb      	str	r3, [r7, #28]
 8005206:	e00f      	b.n	8005228 <_ProcessSignalDataTable+0x38>
	{
		tmpDataTable[i] = SM_GetOutputChannel(SIGNAL_CHANNEL)->ref_lut_data[i];
 8005208:	2000      	movs	r0, #0
 800520a:	f7ff ff1f 	bl	800504c <SM_GetOutputChannel>
 800520e:	4603      	mov	r3, r0
 8005210:	685a      	ldr	r2, [r3, #4]
 8005212:	69fb      	ldr	r3, [r7, #28]
 8005214:	009b      	lsls	r3, r3, #2
 8005216:	4413      	add	r3, r2
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	4933      	ldr	r1, [pc, #204]	; (80052e8 <_ProcessSignalDataTable+0xf8>)
 800521c:	69fb      	ldr	r3, [r7, #28]
 800521e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	3301      	adds	r3, #1
 8005226:	61fb      	str	r3, [r7, #28]
 8005228:	69fb      	ldr	r3, [r7, #28]
 800522a:	2b77      	cmp	r3, #119	; 0x77
 800522c:	ddec      	ble.n	8005208 <_ProcessSignalDataTable+0x18>
	}

	// calculate positive offset coefficient from encoder position
	float pos_offset_coeff = 1;
 800522e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8005232:	61bb      	str	r3, [r7, #24]
	if(_encoder_value)
 8005234:	88fb      	ldrh	r3, [r7, #6]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d008      	beq.n	800524c <_ProcessSignalDataTable+0x5c>
	{
		pos_offset_coeff = (_encoder_value/4);
 800523a:	88fb      	ldrh	r3, [r7, #6]
 800523c:	089b      	lsrs	r3, r3, #2
 800523e:	b29b      	uxth	r3, r3
 8005240:	ee07 3a90 	vmov	s15, r3
 8005244:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005248:	edc7 7a06 	vstr	s15, [r7, #24]
	}

	// adjust amplitude and offset of lookup table copy
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 800524c:	2300      	movs	r3, #0
 800524e:	617b      	str	r3, [r7, #20]
 8005250:	e02e      	b.n	80052b0 <_ProcessSignalDataTable+0xc0>
	{
		tmpDataTable[i] = tmpDataTable[i] * (_neg_gain_coeff);
 8005252:	4a25      	ldr	r2, [pc, #148]	; (80052e8 <_ProcessSignalDataTable+0xf8>)
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800525a:	ee07 3a90 	vmov	s15, r3
 800525e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005262:	edd7 7a03 	vldr	s15, [r7, #12]
 8005266:	ee67 7a27 	vmul.f32	s15, s14, s15
 800526a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800526e:	ee17 1a90 	vmov	r1, s15
 8005272:	4a1d      	ldr	r2, [pc, #116]	; (80052e8 <_ProcessSignalDataTable+0xf8>)
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		tmpDataTable[i] = tmpDataTable[i] + (AMP_OFFSET * pos_offset_coeff);
 800527a:	4a1b      	ldr	r2, [pc, #108]	; (80052e8 <_ProcessSignalDataTable+0xf8>)
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005282:	ee07 3a90 	vmov	s15, r3
 8005286:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800528a:	edd7 7a06 	vldr	s15, [r7, #24]
 800528e:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8005292:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005296:	ee77 7a27 	vadd.f32	s15, s14, s15
 800529a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800529e:	ee17 1a90 	vmov	r1, s15
 80052a2:	4a11      	ldr	r2, [pc, #68]	; (80052e8 <_ProcessSignalDataTable+0xf8>)
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	3301      	adds	r3, #1
 80052ae:	617b      	str	r3, [r7, #20]
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	2b77      	cmp	r3, #119	; 0x77
 80052b4:	ddcd      	ble.n	8005252 <_ProcessSignalDataTable+0x62>
	}

	// restore lookup table copy to active lookup table in SignalChannel object
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 80052b6:	2300      	movs	r3, #0
 80052b8:	613b      	str	r3, [r7, #16]
 80052ba:	e00e      	b.n	80052da <_ProcessSignalDataTable+0xea>
	{
		SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data[i] = tmpDataTable[i];
 80052bc:	2000      	movs	r0, #0
 80052be:	f7ff fec5 	bl	800504c <SM_GetOutputChannel>
 80052c2:	4601      	mov	r1, r0
 80052c4:	4a08      	ldr	r2, [pc, #32]	; (80052e8 <_ProcessSignalDataTable+0xf8>)
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	3302      	adds	r3, #2
 80052d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	3301      	adds	r3, #1
 80052d8:	613b      	str	r3, [r7, #16]
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	2b77      	cmp	r3, #119	; 0x77
 80052de:	dded      	ble.n	80052bc <_ProcessSignalDataTable+0xcc>
	}
}
 80052e0:	bf00      	nop
 80052e2:	3720      	adds	r7, #32
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}
 80052e8:	2000232c 	.word	0x2000232c

080052ec <_ProcessSyncDataTable>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessSyncDataTable(float _neg_gain_coeff, float amp_offset, uint16_t _encoder_value)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b088      	sub	sp, #32
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	ed87 0a03 	vstr	s0, [r7, #12]
 80052f6:	edc7 0a02 	vstr	s1, [r7, #8]
 80052fa:	4603      	mov	r3, r0
 80052fc:	80fb      	strh	r3, [r7, #6]
	// copy refer lookup datat table from SyncChannel object
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 80052fe:	2300      	movs	r3, #0
 8005300:	61fb      	str	r3, [r7, #28]
 8005302:	e00f      	b.n	8005324 <_ProcessSyncDataTable+0x38>
	{
		tmpDataTable[i] = SM_GetOutputChannel(SYNC_CHANNEL)->ref_lut_data[i];
 8005304:	2001      	movs	r0, #1
 8005306:	f7ff fea1 	bl	800504c <SM_GetOutputChannel>
 800530a:	4603      	mov	r3, r0
 800530c:	685a      	ldr	r2, [r3, #4]
 800530e:	69fb      	ldr	r3, [r7, #28]
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	4413      	add	r3, r2
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	4933      	ldr	r1, [pc, #204]	; (80053e4 <_ProcessSyncDataTable+0xf8>)
 8005318:	69fb      	ldr	r3, [r7, #28]
 800531a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 800531e:	69fb      	ldr	r3, [r7, #28]
 8005320:	3301      	adds	r3, #1
 8005322:	61fb      	str	r3, [r7, #28]
 8005324:	69fb      	ldr	r3, [r7, #28]
 8005326:	2b77      	cmp	r3, #119	; 0x77
 8005328:	ddec      	ble.n	8005304 <_ProcessSyncDataTable+0x18>
	}

	// calculate positive offset coefficient from encoder position
	float pos_offset_coeff = 1;
 800532a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800532e:	61bb      	str	r3, [r7, #24]
	if(_encoder_value)
 8005330:	88fb      	ldrh	r3, [r7, #6]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d008      	beq.n	8005348 <_ProcessSyncDataTable+0x5c>
	{
		pos_offset_coeff = (_encoder_value/4);
 8005336:	88fb      	ldrh	r3, [r7, #6]
 8005338:	089b      	lsrs	r3, r3, #2
 800533a:	b29b      	uxth	r3, r3
 800533c:	ee07 3a90 	vmov	s15, r3
 8005340:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005344:	edc7 7a06 	vstr	s15, [r7, #24]
	}

	// adjust amplitude and offset of lookup table copy
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005348:	2300      	movs	r3, #0
 800534a:	617b      	str	r3, [r7, #20]
 800534c:	e02e      	b.n	80053ac <_ProcessSyncDataTable+0xc0>
	{

		tmpDataTable[i] = tmpDataTable[i] * (_neg_gain_coeff);
 800534e:	4a25      	ldr	r2, [pc, #148]	; (80053e4 <_ProcessSyncDataTable+0xf8>)
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005356:	ee07 3a90 	vmov	s15, r3
 800535a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800535e:	edd7 7a03 	vldr	s15, [r7, #12]
 8005362:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005366:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800536a:	ee17 1a90 	vmov	r1, s15
 800536e:	4a1d      	ldr	r2, [pc, #116]	; (80053e4 <_ProcessSyncDataTable+0xf8>)
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		tmpDataTable[i] = tmpDataTable[i] + (AMP_OFFSET * pos_offset_coeff);
 8005376:	4a1b      	ldr	r2, [pc, #108]	; (80053e4 <_ProcessSyncDataTable+0xf8>)
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800537e:	ee07 3a90 	vmov	s15, r3
 8005382:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005386:	edd7 7a06 	vldr	s15, [r7, #24]
 800538a:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 800538e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005392:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005396:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800539a:	ee17 1a90 	vmov	r1, s15
 800539e:	4a11      	ldr	r2, [pc, #68]	; (80053e4 <_ProcessSyncDataTable+0xf8>)
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	3301      	adds	r3, #1
 80053aa:	617b      	str	r3, [r7, #20]
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	2b77      	cmp	r3, #119	; 0x77
 80053b0:	ddcd      	ble.n	800534e <_ProcessSyncDataTable+0x62>
	}

	// restore lookup table copy to active lookup table in SignalChannel object
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 80053b2:	2300      	movs	r3, #0
 80053b4:	613b      	str	r3, [r7, #16]
 80053b6:	e00e      	b.n	80053d6 <_ProcessSyncDataTable+0xea>
	{
		SM_GetOutputChannel(SYNC_CHANNEL)->dsp_lut_data[i] = tmpDataTable[i];
 80053b8:	2001      	movs	r0, #1
 80053ba:	f7ff fe47 	bl	800504c <SM_GetOutputChannel>
 80053be:	4601      	mov	r1, r0
 80053c0:	4a08      	ldr	r2, [pc, #32]	; (80053e4 <_ProcessSyncDataTable+0xf8>)
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	3302      	adds	r3, #2
 80053cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	3301      	adds	r3, #1
 80053d4:	613b      	str	r3, [r7, #16]
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	2b77      	cmp	r3, #119	; 0x77
 80053da:	dded      	ble.n	80053b8 <_ProcessSyncDataTable+0xcc>
	}
}
 80053dc:	bf00      	nop
 80053de:	3720      	adds	r7, #32
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}
 80053e4:	2000232c 	.word	0x2000232c

080053e8 <VPP_ModifySignalOutput>:

 *	@retval None
 *
 */
void VPP_ModifySignalOutput(uint16_t pEncoderValue)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b082      	sub	sp, #8
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	4603      	mov	r3, r0
 80053f0:	80fb      	strh	r3, [r7, #6]
	switch(pEncoderValue)
 80053f2:	88fb      	ldrh	r3, [r7, #6]
 80053f4:	f5b3 7fc3 	cmp.w	r3, #390	; 0x186
 80053f8:	f200 849a 	bhi.w	8005d30 <VPP_ModifySignalOutput+0x948>
 80053fc:	a201      	add	r2, pc, #4	; (adr r2, 8005404 <VPP_ModifySignalOutput+0x1c>)
 80053fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005402:	bf00      	nop
 8005404:	08005a21 	.word	0x08005a21
 8005408:	08005a21 	.word	0x08005a21
 800540c:	08005a21 	.word	0x08005a21
 8005410:	08005a29 	.word	0x08005a29
 8005414:	08005a29 	.word	0x08005a29
 8005418:	08005a29 	.word	0x08005a29
 800541c:	08005a29 	.word	0x08005a29
 8005420:	08005a31 	.word	0x08005a31
 8005424:	08005a31 	.word	0x08005a31
 8005428:	08005a31 	.word	0x08005a31
 800542c:	08005a31 	.word	0x08005a31
 8005430:	08005a39 	.word	0x08005a39
 8005434:	08005a39 	.word	0x08005a39
 8005438:	08005a39 	.word	0x08005a39
 800543c:	08005a39 	.word	0x08005a39
 8005440:	08005a41 	.word	0x08005a41
 8005444:	08005a41 	.word	0x08005a41
 8005448:	08005a41 	.word	0x08005a41
 800544c:	08005a41 	.word	0x08005a41
 8005450:	08005a49 	.word	0x08005a49
 8005454:	08005a49 	.word	0x08005a49
 8005458:	08005a49 	.word	0x08005a49
 800545c:	08005a49 	.word	0x08005a49
 8005460:	08005a51 	.word	0x08005a51
 8005464:	08005a51 	.word	0x08005a51
 8005468:	08005a51 	.word	0x08005a51
 800546c:	08005a51 	.word	0x08005a51
 8005470:	08005a59 	.word	0x08005a59
 8005474:	08005a59 	.word	0x08005a59
 8005478:	08005a59 	.word	0x08005a59
 800547c:	08005a59 	.word	0x08005a59
 8005480:	08005a61 	.word	0x08005a61
 8005484:	08005a61 	.word	0x08005a61
 8005488:	08005a61 	.word	0x08005a61
 800548c:	08005a61 	.word	0x08005a61
 8005490:	08005a69 	.word	0x08005a69
 8005494:	08005a69 	.word	0x08005a69
 8005498:	08005a69 	.word	0x08005a69
 800549c:	08005a69 	.word	0x08005a69
 80054a0:	08005a71 	.word	0x08005a71
 80054a4:	08005a71 	.word	0x08005a71
 80054a8:	08005a71 	.word	0x08005a71
 80054ac:	08005a71 	.word	0x08005a71
 80054b0:	08005a79 	.word	0x08005a79
 80054b4:	08005a79 	.word	0x08005a79
 80054b8:	08005a79 	.word	0x08005a79
 80054bc:	08005a79 	.word	0x08005a79
 80054c0:	08005a81 	.word	0x08005a81
 80054c4:	08005a81 	.word	0x08005a81
 80054c8:	08005a81 	.word	0x08005a81
 80054cc:	08005a81 	.word	0x08005a81
 80054d0:	08005a89 	.word	0x08005a89
 80054d4:	08005a89 	.word	0x08005a89
 80054d8:	08005a89 	.word	0x08005a89
 80054dc:	08005a89 	.word	0x08005a89
 80054e0:	08005a91 	.word	0x08005a91
 80054e4:	08005a91 	.word	0x08005a91
 80054e8:	08005a91 	.word	0x08005a91
 80054ec:	08005a91 	.word	0x08005a91
 80054f0:	08005a99 	.word	0x08005a99
 80054f4:	08005a99 	.word	0x08005a99
 80054f8:	08005a99 	.word	0x08005a99
 80054fc:	08005a99 	.word	0x08005a99
 8005500:	08005aa1 	.word	0x08005aa1
 8005504:	08005aa1 	.word	0x08005aa1
 8005508:	08005aa1 	.word	0x08005aa1
 800550c:	08005aa1 	.word	0x08005aa1
 8005510:	08005aa9 	.word	0x08005aa9
 8005514:	08005aa9 	.word	0x08005aa9
 8005518:	08005aa9 	.word	0x08005aa9
 800551c:	08005aa9 	.word	0x08005aa9
 8005520:	08005ab1 	.word	0x08005ab1
 8005524:	08005ab1 	.word	0x08005ab1
 8005528:	08005ab1 	.word	0x08005ab1
 800552c:	08005ab1 	.word	0x08005ab1
 8005530:	08005ab9 	.word	0x08005ab9
 8005534:	08005ab9 	.word	0x08005ab9
 8005538:	08005ab9 	.word	0x08005ab9
 800553c:	08005ab9 	.word	0x08005ab9
 8005540:	08005ac1 	.word	0x08005ac1
 8005544:	08005ac1 	.word	0x08005ac1
 8005548:	08005ac1 	.word	0x08005ac1
 800554c:	08005ac1 	.word	0x08005ac1
 8005550:	08005ac9 	.word	0x08005ac9
 8005554:	08005ac9 	.word	0x08005ac9
 8005558:	08005ac9 	.word	0x08005ac9
 800555c:	08005ac9 	.word	0x08005ac9
 8005560:	08005ad1 	.word	0x08005ad1
 8005564:	08005ad1 	.word	0x08005ad1
 8005568:	08005ad1 	.word	0x08005ad1
 800556c:	08005ad1 	.word	0x08005ad1
 8005570:	08005ad9 	.word	0x08005ad9
 8005574:	08005ad9 	.word	0x08005ad9
 8005578:	08005ad9 	.word	0x08005ad9
 800557c:	08005ad9 	.word	0x08005ad9
 8005580:	08005ae1 	.word	0x08005ae1
 8005584:	08005ae1 	.word	0x08005ae1
 8005588:	08005ae1 	.word	0x08005ae1
 800558c:	08005ae1 	.word	0x08005ae1
 8005590:	08005ae9 	.word	0x08005ae9
 8005594:	08005ae9 	.word	0x08005ae9
 8005598:	08005ae9 	.word	0x08005ae9
 800559c:	08005ae9 	.word	0x08005ae9
 80055a0:	08005af1 	.word	0x08005af1
 80055a4:	08005af1 	.word	0x08005af1
 80055a8:	08005af1 	.word	0x08005af1
 80055ac:	08005af1 	.word	0x08005af1
 80055b0:	08005af9 	.word	0x08005af9
 80055b4:	08005af9 	.word	0x08005af9
 80055b8:	08005af9 	.word	0x08005af9
 80055bc:	08005af9 	.word	0x08005af9
 80055c0:	08005b01 	.word	0x08005b01
 80055c4:	08005b01 	.word	0x08005b01
 80055c8:	08005b01 	.word	0x08005b01
 80055cc:	08005b01 	.word	0x08005b01
 80055d0:	08005b09 	.word	0x08005b09
 80055d4:	08005b09 	.word	0x08005b09
 80055d8:	08005b09 	.word	0x08005b09
 80055dc:	08005b09 	.word	0x08005b09
 80055e0:	08005b11 	.word	0x08005b11
 80055e4:	08005b11 	.word	0x08005b11
 80055e8:	08005b11 	.word	0x08005b11
 80055ec:	08005b11 	.word	0x08005b11
 80055f0:	08005b19 	.word	0x08005b19
 80055f4:	08005b19 	.word	0x08005b19
 80055f8:	08005b19 	.word	0x08005b19
 80055fc:	08005b19 	.word	0x08005b19
 8005600:	08005b21 	.word	0x08005b21
 8005604:	08005b21 	.word	0x08005b21
 8005608:	08005b21 	.word	0x08005b21
 800560c:	08005b21 	.word	0x08005b21
 8005610:	08005b29 	.word	0x08005b29
 8005614:	08005b29 	.word	0x08005b29
 8005618:	08005b29 	.word	0x08005b29
 800561c:	08005b29 	.word	0x08005b29
 8005620:	08005b31 	.word	0x08005b31
 8005624:	08005b31 	.word	0x08005b31
 8005628:	08005b31 	.word	0x08005b31
 800562c:	08005b31 	.word	0x08005b31
 8005630:	08005b39 	.word	0x08005b39
 8005634:	08005b39 	.word	0x08005b39
 8005638:	08005b39 	.word	0x08005b39
 800563c:	08005b39 	.word	0x08005b39
 8005640:	08005b41 	.word	0x08005b41
 8005644:	08005b41 	.word	0x08005b41
 8005648:	08005b41 	.word	0x08005b41
 800564c:	08005b41 	.word	0x08005b41
 8005650:	08005b49 	.word	0x08005b49
 8005654:	08005b49 	.word	0x08005b49
 8005658:	08005b49 	.word	0x08005b49
 800565c:	08005b49 	.word	0x08005b49
 8005660:	08005b51 	.word	0x08005b51
 8005664:	08005b51 	.word	0x08005b51
 8005668:	08005b51 	.word	0x08005b51
 800566c:	08005b51 	.word	0x08005b51
 8005670:	08005b59 	.word	0x08005b59
 8005674:	08005b59 	.word	0x08005b59
 8005678:	08005b59 	.word	0x08005b59
 800567c:	08005b59 	.word	0x08005b59
 8005680:	08005b61 	.word	0x08005b61
 8005684:	08005b61 	.word	0x08005b61
 8005688:	08005b61 	.word	0x08005b61
 800568c:	08005b61 	.word	0x08005b61
 8005690:	08005b69 	.word	0x08005b69
 8005694:	08005b69 	.word	0x08005b69
 8005698:	08005b69 	.word	0x08005b69
 800569c:	08005b69 	.word	0x08005b69
 80056a0:	08005b71 	.word	0x08005b71
 80056a4:	08005b71 	.word	0x08005b71
 80056a8:	08005b71 	.word	0x08005b71
 80056ac:	08005b71 	.word	0x08005b71
 80056b0:	08005b79 	.word	0x08005b79
 80056b4:	08005b79 	.word	0x08005b79
 80056b8:	08005b79 	.word	0x08005b79
 80056bc:	08005b79 	.word	0x08005b79
 80056c0:	08005b81 	.word	0x08005b81
 80056c4:	08005b81 	.word	0x08005b81
 80056c8:	08005b81 	.word	0x08005b81
 80056cc:	08005b81 	.word	0x08005b81
 80056d0:	08005b89 	.word	0x08005b89
 80056d4:	08005b89 	.word	0x08005b89
 80056d8:	08005b89 	.word	0x08005b89
 80056dc:	08005b89 	.word	0x08005b89
 80056e0:	08005b91 	.word	0x08005b91
 80056e4:	08005b91 	.word	0x08005b91
 80056e8:	08005b91 	.word	0x08005b91
 80056ec:	08005b91 	.word	0x08005b91
 80056f0:	08005b99 	.word	0x08005b99
 80056f4:	08005b99 	.word	0x08005b99
 80056f8:	08005b99 	.word	0x08005b99
 80056fc:	08005b99 	.word	0x08005b99
 8005700:	08005ba1 	.word	0x08005ba1
 8005704:	08005ba1 	.word	0x08005ba1
 8005708:	08005ba1 	.word	0x08005ba1
 800570c:	08005ba1 	.word	0x08005ba1
 8005710:	08005ba9 	.word	0x08005ba9
 8005714:	08005ba9 	.word	0x08005ba9
 8005718:	08005ba9 	.word	0x08005ba9
 800571c:	08005ba9 	.word	0x08005ba9
 8005720:	08005bb1 	.word	0x08005bb1
 8005724:	08005bb1 	.word	0x08005bb1
 8005728:	08005bb1 	.word	0x08005bb1
 800572c:	08005bb1 	.word	0x08005bb1
 8005730:	08005bb9 	.word	0x08005bb9
 8005734:	08005bb9 	.word	0x08005bb9
 8005738:	08005bb9 	.word	0x08005bb9
 800573c:	08005bb9 	.word	0x08005bb9
 8005740:	08005bc1 	.word	0x08005bc1
 8005744:	08005bc1 	.word	0x08005bc1
 8005748:	08005bc1 	.word	0x08005bc1
 800574c:	08005bc1 	.word	0x08005bc1
 8005750:	08005bc9 	.word	0x08005bc9
 8005754:	08005bc9 	.word	0x08005bc9
 8005758:	08005bc9 	.word	0x08005bc9
 800575c:	08005bc9 	.word	0x08005bc9
 8005760:	08005bd1 	.word	0x08005bd1
 8005764:	08005bd1 	.word	0x08005bd1
 8005768:	08005bd1 	.word	0x08005bd1
 800576c:	08005bd1 	.word	0x08005bd1
 8005770:	08005bd9 	.word	0x08005bd9
 8005774:	08005bd9 	.word	0x08005bd9
 8005778:	08005bd9 	.word	0x08005bd9
 800577c:	08005bd9 	.word	0x08005bd9
 8005780:	08005be1 	.word	0x08005be1
 8005784:	08005be1 	.word	0x08005be1
 8005788:	08005be1 	.word	0x08005be1
 800578c:	08005be1 	.word	0x08005be1
 8005790:	08005be9 	.word	0x08005be9
 8005794:	08005be9 	.word	0x08005be9
 8005798:	08005be9 	.word	0x08005be9
 800579c:	08005be9 	.word	0x08005be9
 80057a0:	08005bf1 	.word	0x08005bf1
 80057a4:	08005bf1 	.word	0x08005bf1
 80057a8:	08005bf1 	.word	0x08005bf1
 80057ac:	08005bf1 	.word	0x08005bf1
 80057b0:	08005bf9 	.word	0x08005bf9
 80057b4:	08005bf9 	.word	0x08005bf9
 80057b8:	08005bf9 	.word	0x08005bf9
 80057bc:	08005bf9 	.word	0x08005bf9
 80057c0:	08005c01 	.word	0x08005c01
 80057c4:	08005c01 	.word	0x08005c01
 80057c8:	08005c01 	.word	0x08005c01
 80057cc:	08005c01 	.word	0x08005c01
 80057d0:	08005c09 	.word	0x08005c09
 80057d4:	08005c09 	.word	0x08005c09
 80057d8:	08005c09 	.word	0x08005c09
 80057dc:	08005c09 	.word	0x08005c09
 80057e0:	08005c11 	.word	0x08005c11
 80057e4:	08005c11 	.word	0x08005c11
 80057e8:	08005c11 	.word	0x08005c11
 80057ec:	08005c11 	.word	0x08005c11
 80057f0:	08005c19 	.word	0x08005c19
 80057f4:	08005c19 	.word	0x08005c19
 80057f8:	08005c19 	.word	0x08005c19
 80057fc:	08005c19 	.word	0x08005c19
 8005800:	08005c21 	.word	0x08005c21
 8005804:	08005c21 	.word	0x08005c21
 8005808:	08005c21 	.word	0x08005c21
 800580c:	08005c21 	.word	0x08005c21
 8005810:	08005c29 	.word	0x08005c29
 8005814:	08005c29 	.word	0x08005c29
 8005818:	08005c29 	.word	0x08005c29
 800581c:	08005c29 	.word	0x08005c29
 8005820:	08005c31 	.word	0x08005c31
 8005824:	08005c31 	.word	0x08005c31
 8005828:	08005c31 	.word	0x08005c31
 800582c:	08005c31 	.word	0x08005c31
 8005830:	08005c39 	.word	0x08005c39
 8005834:	08005c39 	.word	0x08005c39
 8005838:	08005c39 	.word	0x08005c39
 800583c:	08005c39 	.word	0x08005c39
 8005840:	08005c41 	.word	0x08005c41
 8005844:	08005c41 	.word	0x08005c41
 8005848:	08005c41 	.word	0x08005c41
 800584c:	08005c41 	.word	0x08005c41
 8005850:	08005c49 	.word	0x08005c49
 8005854:	08005c49 	.word	0x08005c49
 8005858:	08005c49 	.word	0x08005c49
 800585c:	08005c49 	.word	0x08005c49
 8005860:	08005c51 	.word	0x08005c51
 8005864:	08005c51 	.word	0x08005c51
 8005868:	08005c51 	.word	0x08005c51
 800586c:	08005c51 	.word	0x08005c51
 8005870:	08005c59 	.word	0x08005c59
 8005874:	08005c59 	.word	0x08005c59
 8005878:	08005c59 	.word	0x08005c59
 800587c:	08005c59 	.word	0x08005c59
 8005880:	08005c61 	.word	0x08005c61
 8005884:	08005c61 	.word	0x08005c61
 8005888:	08005c61 	.word	0x08005c61
 800588c:	08005c61 	.word	0x08005c61
 8005890:	08005c69 	.word	0x08005c69
 8005894:	08005c69 	.word	0x08005c69
 8005898:	08005c69 	.word	0x08005c69
 800589c:	08005c69 	.word	0x08005c69
 80058a0:	08005c71 	.word	0x08005c71
 80058a4:	08005c71 	.word	0x08005c71
 80058a8:	08005c71 	.word	0x08005c71
 80058ac:	08005c71 	.word	0x08005c71
 80058b0:	08005c79 	.word	0x08005c79
 80058b4:	08005c79 	.word	0x08005c79
 80058b8:	08005c79 	.word	0x08005c79
 80058bc:	08005c79 	.word	0x08005c79
 80058c0:	08005c81 	.word	0x08005c81
 80058c4:	08005c81 	.word	0x08005c81
 80058c8:	08005c81 	.word	0x08005c81
 80058cc:	08005c81 	.word	0x08005c81
 80058d0:	08005c89 	.word	0x08005c89
 80058d4:	08005c89 	.word	0x08005c89
 80058d8:	08005c89 	.word	0x08005c89
 80058dc:	08005c89 	.word	0x08005c89
 80058e0:	08005c91 	.word	0x08005c91
 80058e4:	08005c91 	.word	0x08005c91
 80058e8:	08005c91 	.word	0x08005c91
 80058ec:	08005c91 	.word	0x08005c91
 80058f0:	08005c99 	.word	0x08005c99
 80058f4:	08005c99 	.word	0x08005c99
 80058f8:	08005c99 	.word	0x08005c99
 80058fc:	08005c99 	.word	0x08005c99
 8005900:	08005ca1 	.word	0x08005ca1
 8005904:	08005ca1 	.word	0x08005ca1
 8005908:	08005ca1 	.word	0x08005ca1
 800590c:	08005ca1 	.word	0x08005ca1
 8005910:	08005ca9 	.word	0x08005ca9
 8005914:	08005ca9 	.word	0x08005ca9
 8005918:	08005ca9 	.word	0x08005ca9
 800591c:	08005ca9 	.word	0x08005ca9
 8005920:	08005cb1 	.word	0x08005cb1
 8005924:	08005cb1 	.word	0x08005cb1
 8005928:	08005cb1 	.word	0x08005cb1
 800592c:	08005cb1 	.word	0x08005cb1
 8005930:	08005cb9 	.word	0x08005cb9
 8005934:	08005cb9 	.word	0x08005cb9
 8005938:	08005cb9 	.word	0x08005cb9
 800593c:	08005cb9 	.word	0x08005cb9
 8005940:	08005cc1 	.word	0x08005cc1
 8005944:	08005cc1 	.word	0x08005cc1
 8005948:	08005cc1 	.word	0x08005cc1
 800594c:	08005cc1 	.word	0x08005cc1
 8005950:	08005cc9 	.word	0x08005cc9
 8005954:	08005cc9 	.word	0x08005cc9
 8005958:	08005cc9 	.word	0x08005cc9
 800595c:	08005cc9 	.word	0x08005cc9
 8005960:	08005cd1 	.word	0x08005cd1
 8005964:	08005cd1 	.word	0x08005cd1
 8005968:	08005cd1 	.word	0x08005cd1
 800596c:	08005cd1 	.word	0x08005cd1
 8005970:	08005cd9 	.word	0x08005cd9
 8005974:	08005cd9 	.word	0x08005cd9
 8005978:	08005cd9 	.word	0x08005cd9
 800597c:	08005cd9 	.word	0x08005cd9
 8005980:	08005ce1 	.word	0x08005ce1
 8005984:	08005ce1 	.word	0x08005ce1
 8005988:	08005ce1 	.word	0x08005ce1
 800598c:	08005ce1 	.word	0x08005ce1
 8005990:	08005ce9 	.word	0x08005ce9
 8005994:	08005ce9 	.word	0x08005ce9
 8005998:	08005ce9 	.word	0x08005ce9
 800599c:	08005ce9 	.word	0x08005ce9
 80059a0:	08005cf1 	.word	0x08005cf1
 80059a4:	08005cf1 	.word	0x08005cf1
 80059a8:	08005cf1 	.word	0x08005cf1
 80059ac:	08005cf1 	.word	0x08005cf1
 80059b0:	08005cf9 	.word	0x08005cf9
 80059b4:	08005cf9 	.word	0x08005cf9
 80059b8:	08005cf9 	.word	0x08005cf9
 80059bc:	08005cf9 	.word	0x08005cf9
 80059c0:	08005d01 	.word	0x08005d01
 80059c4:	08005d01 	.word	0x08005d01
 80059c8:	08005d01 	.word	0x08005d01
 80059cc:	08005d01 	.word	0x08005d01
 80059d0:	08005d09 	.word	0x08005d09
 80059d4:	08005d09 	.word	0x08005d09
 80059d8:	08005d09 	.word	0x08005d09
 80059dc:	08005d09 	.word	0x08005d09
 80059e0:	08005d11 	.word	0x08005d11
 80059e4:	08005d11 	.word	0x08005d11
 80059e8:	08005d11 	.word	0x08005d11
 80059ec:	08005d11 	.word	0x08005d11
 80059f0:	08005d19 	.word	0x08005d19
 80059f4:	08005d19 	.word	0x08005d19
 80059f8:	08005d19 	.word	0x08005d19
 80059fc:	08005d19 	.word	0x08005d19
 8005a00:	08005d21 	.word	0x08005d21
 8005a04:	08005d21 	.word	0x08005d21
 8005a08:	08005d21 	.word	0x08005d21
 8005a0c:	08005d21 	.word	0x08005d21
 8005a10:	08005d29 	.word	0x08005d29
 8005a14:	08005d29 	.word	0x08005d29
 8005a18:	08005d29 	.word	0x08005d29
 8005a1c:	08005d29 	.word	0x08005d29
	{
		case 0	:
		case 1	:
		case 2	:
			VPP_ApplyPresetToSignal( VPP01 );
 8005a20:	2000      	movs	r0, #0
 8005a22:	f7ff fb89 	bl	8005138 <VPP_ApplyPresetToSignal>
			break;
 8005a26:	e184      	b.n	8005d32 <VPP_ModifySignalOutput+0x94a>
		case 3	:
		case 4	:
		case 5	:
		case 6	:
			VPP_ApplyPresetToSignal( VPP02	);
 8005a28:	2001      	movs	r0, #1
 8005a2a:	f7ff fb85 	bl	8005138 <VPP_ApplyPresetToSignal>
			break;
 8005a2e:	e180      	b.n	8005d32 <VPP_ModifySignalOutput+0x94a>
		case 7	:
		case 8	:
		case 9	:
		case 10	:
			VPP_ApplyPresetToSignal( VPP03	);
 8005a30:	2002      	movs	r0, #2
 8005a32:	f7ff fb81 	bl	8005138 <VPP_ApplyPresetToSignal>
			break;
 8005a36:	e17c      	b.n	8005d32 <VPP_ModifySignalOutput+0x94a>
		case 11	:
		case 12	:
		case 13	:
		case 14	:
			VPP_ApplyPresetToSignal( VPP04	);
 8005a38:	2003      	movs	r0, #3
 8005a3a:	f7ff fb7d 	bl	8005138 <VPP_ApplyPresetToSignal>
			break;
 8005a3e:	e178      	b.n	8005d32 <VPP_ModifySignalOutput+0x94a>
		case 15	:
		case 16	:
		case 17	:
		case 18	:
			VPP_ApplyPresetToSignal( VPP05	);
 8005a40:	2004      	movs	r0, #4
 8005a42:	f7ff fb79 	bl	8005138 <VPP_ApplyPresetToSignal>
			break;
 8005a46:	e174      	b.n	8005d32 <VPP_ModifySignalOutput+0x94a>
		case 19	:
		case 20	:
		case 21	:
		case 22	:
			VPP_ApplyPresetToSignal( VPP06	);
 8005a48:	2005      	movs	r0, #5
 8005a4a:	f7ff fb75 	bl	8005138 <VPP_ApplyPresetToSignal>
			break;
 8005a4e:	e170      	b.n	8005d32 <VPP_ModifySignalOutput+0x94a>
		case 23	:
		case 24	:
		case 25	:
		case 26	:
			VPP_ApplyPresetToSignal( VPP07	);
 8005a50:	2006      	movs	r0, #6
 8005a52:	f7ff fb71 	bl	8005138 <VPP_ApplyPresetToSignal>
			break;
 8005a56:	e16c      	b.n	8005d32 <VPP_ModifySignalOutput+0x94a>
		case 27	:
		case 28	:
		case 29	:
		case 30	:
			VPP_ApplyPresetToSignal( VPP08	);
 8005a58:	2007      	movs	r0, #7
 8005a5a:	f7ff fb6d 	bl	8005138 <VPP_ApplyPresetToSignal>
			break;
 8005a5e:	e168      	b.n	8005d32 <VPP_ModifySignalOutput+0x94a>
		case 31	:
		case 32	:
		case 33	:
		case 34	:
			VPP_ApplyPresetToSignal( VPP09	);
 8005a60:	2008      	movs	r0, #8
 8005a62:	f7ff fb69 	bl	8005138 <VPP_ApplyPresetToSignal>
			break;
 8005a66:	e164      	b.n	8005d32 <VPP_ModifySignalOutput+0x94a>
		case 35	:
		case 36	:
		case 37	:
		case 38	:
			VPP_ApplyPresetToSignal( VPP10	);
 8005a68:	2009      	movs	r0, #9
 8005a6a:	f7ff fb65 	bl	8005138 <VPP_ApplyPresetToSignal>
			break;
 8005a6e:	e160      	b.n	8005d32 <VPP_ModifySignalOutput+0x94a>
		case 39	:
		case 40	:
		case 41	:
		case 42	:
			VPP_ApplyPresetToSignal( VPP11	);
 8005a70:	200a      	movs	r0, #10
 8005a72:	f7ff fb61 	bl	8005138 <VPP_ApplyPresetToSignal>
			break;
 8005a76:	e15c      	b.n	8005d32 <VPP_ModifySignalOutput+0x94a>
		case 43	:
		case 44	:
		case 45	:
		case 46	:
			VPP_ApplyPresetToSignal( VPP12	);
 8005a78:	200b      	movs	r0, #11
 8005a7a:	f7ff fb5d 	bl	8005138 <VPP_ApplyPresetToSignal>
			break;
 8005a7e:	e158      	b.n	8005d32 <VPP_ModifySignalOutput+0x94a>
		case 47	:
		case 48	:
		case 49	:
		case 50	:
			VPP_ApplyPresetToSignal( VPP13	);
 8005a80:	200c      	movs	r0, #12
 8005a82:	f7ff fb59 	bl	8005138 <VPP_ApplyPresetToSignal>
			break;
 8005a86:	e154      	b.n	8005d32 <VPP_ModifySignalOutput+0x94a>
		case 51	:
		case 52	:
		case 53	:
		case 54	:
			VPP_ApplyPresetToSignal( VPP14	);
 8005a88:	200d      	movs	r0, #13
 8005a8a:	f7ff fb55 	bl	8005138 <VPP_ApplyPresetToSignal>
			break;
 8005a8e:	e150      	b.n	8005d32 <VPP_ModifySignalOutput+0x94a>
		case 55	:
		case 56	:
		case 57	:
		case 58	:
			VPP_ApplyPresetToSignal( VPP15	);
 8005a90:	200e      	movs	r0, #14
 8005a92:	f7ff fb51 	bl	8005138 <VPP_ApplyPresetToSignal>
			break;
 8005a96:	e14c      	b.n	8005d32 <VPP_ModifySignalOutput+0x94a>
		case 59	:
		case 60	:
		case 61	:
		case 62	:
			VPP_ApplyPresetToSignal( VPP16	);
 8005a98:	200f      	movs	r0, #15
 8005a9a:	f7ff fb4d 	bl	8005138 <VPP_ApplyPresetToSignal>
			break;
 8005a9e:	e148      	b.n	8005d32 <VPP_ModifySignalOutput+0x94a>
		case 63	:
		case 64	:
		case 65	:
		case 66	:
			VPP_ApplyPresetToSignal( VPP17	);
 8005aa0:	2010      	movs	r0, #16
 8005aa2:	f7ff fb49 	bl	8005138 <VPP_ApplyPresetToSignal>
			break;
 8005aa6:	e144      	b.n	8005d32 <VPP_ModifySignalOutput+0x94a>
		case 67	:
		case 68	:
		case 69	:
		case 70	:
			VPP_ApplyPresetToSignal( VPP18	);
 8005aa8:	2011      	movs	r0, #17
 8005aaa:	f7ff fb45 	bl	8005138 <VPP_ApplyPresetToSignal>
			break;
 8005aae:	e140      	b.n	8005d32 <VPP_ModifySignalOutput+0x94a>
		case 71	:
		case 72	:
		case 73	:
		case 74	:
			VPP_ApplyPresetToSignal( VPP19	);
 8005ab0:	2012      	movs	r0, #18
 8005ab2:	f7ff fb41 	bl	8005138 <VPP_ApplyPresetToSignal>
			break;
 8005ab6:	e13c      	b.n	8005d32 <VPP_ModifySignalOutput+0x94a>
		case 75	:
		case 76	:
		case 77	:
		case 78	:
			VPP_ApplyPresetToSignal( VPP20	);
 8005ab8:	2013      	movs	r0, #19
 8005aba:	f7ff fb3d 	bl	8005138 <VPP_ApplyPresetToSignal>
			break;
 8005abe:	e138      	b.n	8005d32 <VPP_ModifySignalOutput+0x94a>
		case 79	:
		case 80	:
		case 81	:
		case 82	:
			VPP_ApplyPresetToSignal( VPP21	);
 8005ac0:	2014      	movs	r0, #20
 8005ac2:	f7ff fb39 	bl	8005138 <VPP_ApplyPresetToSignal>
			break;
 8005ac6:	e134      	b.n	8005d32 <VPP_ModifySignalOutput+0x94a>
		case 83	:
		case 84	:
		case 85	:
		case 86	:
			VPP_ApplyPresetToSignal( VPP22	);
 8005ac8:	2015      	movs	r0, #21
 8005aca:	f7ff fb35 	bl	8005138 <VPP_ApplyPresetToSignal>
			break;
 8005ace:	e130      	b.n	8005d32 <VPP_ModifySignalOutput+0x94a>
		case 87	:
		case 88	:
		case 89	:
		case 90	:
			VPP_ApplyPresetToSignal( VPP23	);
 8005ad0:	2016      	movs	r0, #22
 8005ad2:	f7ff fb31 	bl	8005138 <VPP_ApplyPresetToSignal>
			break;
 8005ad6:	e12c      	b.n	8005d32 <VPP_ModifySignalOutput+0x94a>
		case 91	:
		case 92	:
		case 93	:
		case 94	:
			VPP_ApplyPresetToSignal( VPP24	);
 8005ad8:	2017      	movs	r0, #23
 8005ada:	f7ff fb2d 	bl	8005138 <VPP_ApplyPresetToSignal>
			break;
 8005ade:	e128      	b.n	8005d32 <VPP_ModifySignalOutput+0x94a>
		case 95	:
		case 96	:
		case 97	:
		case 98	:
			VPP_ApplyPresetToSignal( VPP25	);
 8005ae0:	2018      	movs	r0, #24
 8005ae2:	f7ff fb29 	bl	8005138 <VPP_ApplyPresetToSignal>
			break;
 8005ae6:	e124      	b.n	8005d32 <VPP_ModifySignalOutput+0x94a>
		case 99		:
		case 100	:
		case 101	:
		case 102	:
			VPP_ApplyPresetToSignal( VPP26	);
 8005ae8:	2019      	movs	r0, #25
 8005aea:	f7ff fb25 	bl	8005138 <VPP_ApplyPresetToSignal>
			break;
 8005aee:	e120      	b.n	8005d32 <VPP_ModifySignalOutput+0x94a>
		case 103	:
		case 104	:
		case 105	:
		case 106	:
			VPP_ApplyPresetToSignal( VPP27	);
 8005af0:	201a      	movs	r0, #26
 8005af2:	f7ff fb21 	bl	8005138 <VPP_ApplyPresetToSignal>
			break;
 8005af6:	e11c      	b.n	8005d32 <VPP_ModifySignalOutput+0x94a>
		case 107	:
		case 108	:
		case 109	:
		case 110	:
			VPP_ApplyPresetToSignal( VPP28	);
 8005af8:	201b      	movs	r0, #27
 8005afa:	f7ff fb1d 	bl	8005138 <VPP_ApplyPresetToSignal>
			break;
 8005afe:	e118      	b.n	8005d32 <VPP_ModifySignalOutput+0x94a>
		case 111	:
		case 112	:
		case 113	:
		case 114	:
			VPP_ApplyPresetToSignal( VPP29	);
 8005b00:	201c      	movs	r0, #28
 8005b02:	f7ff fb19 	bl	8005138 <VPP_ApplyPresetToSignal>
			break;
 8005b06:	e114      	b.n	8005d32 <VPP_ModifySignalOutput+0x94a>
		case 115	:
		case 116	:
		case 117	:
		case 118	:
			VPP_ApplyPresetToSignal( VPP30	);
 8005b08:	201d      	movs	r0, #29
 8005b0a:	f7ff fb15 	bl	8005138 <VPP_ApplyPresetToSignal>
			break;
 8005b0e:	e110      	b.n	8005d32 <VPP_ModifySignalOutput+0x94a>
		case 119	:
		case 120	:
		case 121	:
		case 122	:
			VPP_ApplyPresetToSignal( VPP31	);
 8005b10:	201e      	movs	r0, #30
 8005b12:	f7ff fb11 	bl	8005138 <VPP_ApplyPresetToSignal>
			break;
 8005b16:	e10c      	b.n	8005d32 <VPP_ModifySignalOutput+0x94a>
		case 123	:
		case 124	:
		case 125	:
		case 126	:
			VPP_ApplyPresetToSignal( VPP32	);
 8005b18:	201f      	movs	r0, #31
 8005b1a:	f7ff fb0d 	bl	8005138 <VPP_ApplyPresetToSignal>
			break;
 8005b1e:	e108      	b.n	8005d32 <VPP_ModifySignalOutput+0x94a>
		case 127	:
		case 128	:
		case 129	:
		case 130	:
			VPP_ApplyPresetToSignal( VPP33	);
 8005b20:	2020      	movs	r0, #32
 8005b22:	f7ff fb09 	bl	8005138 <VPP_ApplyPresetToSignal>
			break;
 8005b26:	e104      	b.n	8005d32 <VPP_ModifySignalOutput+0x94a>
		case 131	:
		case 132	:
		case 133	:
		case 134	:
			VPP_ApplyPresetToSignal( VPP34	);
 8005b28:	2021      	movs	r0, #33	; 0x21
 8005b2a:	f7ff fb05 	bl	8005138 <VPP_ApplyPresetToSignal>
			break;
 8005b2e:	e100      	b.n	8005d32 <VPP_ModifySignalOutput+0x94a>
		case 135	:
		case 136	:
		case 137	:
		case 138	:
			VPP_ApplyPresetToSignal( VPP35	);
 8005b30:	2022      	movs	r0, #34	; 0x22
 8005b32:	f7ff fb01 	bl	8005138 <VPP_ApplyPresetToSignal>
			break;
 8005b36:	e0fc      	b.n	8005d32 <VPP_ModifySignalOutput+0x94a>
		case 139	:
		case 140	:
		case 141	:
		case 142	:
			VPP_ApplyPresetToSignal( VPP36	);
 8005b38:	2023      	movs	r0, #35	; 0x23
 8005b3a:	f7ff fafd 	bl	8005138 <VPP_ApplyPresetToSignal>
			break;
 8005b3e:	e0f8      	b.n	8005d32 <VPP_ModifySignalOutput+0x94a>
		case 143	:
		case 144	:
		case 145	:
		case 146	:
			VPP_ApplyPresetToSignal( VPP37	);
 8005b40:	2024      	movs	r0, #36	; 0x24
 8005b42:	f7ff faf9 	bl	8005138 <VPP_ApplyPresetToSignal>
			break;
 8005b46:	e0f4      	b.n	8005d32 <VPP_ModifySignalOutput+0x94a>
		case 147	:
		case 148	:
		case 149	:
		case 150	:
			VPP_ApplyPresetToSignal( VPP38	);
 8005b48:	2025      	movs	r0, #37	; 0x25
 8005b4a:	f7ff faf5 	bl	8005138 <VPP_ApplyPresetToSignal>
			break;
 8005b4e:	e0f0      	b.n	8005d32 <VPP_ModifySignalOutput+0x94a>
		case 151	:
		case 152	:
		case 153	:
		case 154	:
			VPP_ApplyPresetToSignal( VPP39	);
 8005b50:	2026      	movs	r0, #38	; 0x26
 8005b52:	f7ff faf1 	bl	8005138 <VPP_ApplyPresetToSignal>
			break;
 8005b56:	e0ec      	b.n	8005d32 <VPP_ModifySignalOutput+0x94a>
		case 155	:
		case 156	:
		case 157	:
		case 158	:
			VPP_ApplyPresetToSignal( VPP40	);
 8005b58:	2027      	movs	r0, #39	; 0x27
 8005b5a:	f7ff faed 	bl	8005138 <VPP_ApplyPresetToSignal>
			break;
 8005b5e:	e0e8      	b.n	8005d32 <VPP_ModifySignalOutput+0x94a>
		case 159	:
		case 160	:
		case 161	:
		case 162	:
			VPP_ApplyPresetToSignal( VPP41	);
 8005b60:	2028      	movs	r0, #40	; 0x28
 8005b62:	f7ff fae9 	bl	8005138 <VPP_ApplyPresetToSignal>
			break;
 8005b66:	e0e4      	b.n	8005d32 <VPP_ModifySignalOutput+0x94a>
		case 163	:
		case 164	:
		case 165	:
		case 166	:
			VPP_ApplyPresetToSignal( VPP42	);
 8005b68:	2029      	movs	r0, #41	; 0x29
 8005b6a:	f7ff fae5 	bl	8005138 <VPP_ApplyPresetToSignal>
			break;
 8005b6e:	e0e0      	b.n	8005d32 <VPP_ModifySignalOutput+0x94a>
		case 167	:
		case 168	:
		case 169	:
		case 170	:
			VPP_ApplyPresetToSignal( VPP43	);
 8005b70:	202a      	movs	r0, #42	; 0x2a
 8005b72:	f7ff fae1 	bl	8005138 <VPP_ApplyPresetToSignal>
			break;
 8005b76:	e0dc      	b.n	8005d32 <VPP_ModifySignalOutput+0x94a>
		case 171	:
		case 172	:
		case 173	:
		case 174	:
			VPP_ApplyPresetToSignal( VPP44	);
 8005b78:	202b      	movs	r0, #43	; 0x2b
 8005b7a:	f7ff fadd 	bl	8005138 <VPP_ApplyPresetToSignal>
			break;
 8005b7e:	e0d8      	b.n	8005d32 <VPP_ModifySignalOutput+0x94a>
		case 175	:
		case 176	:
		case 177	:
		case 178	:
			VPP_ApplyPresetToSignal( VPP45	);
 8005b80:	202c      	movs	r0, #44	; 0x2c
 8005b82:	f7ff fad9 	bl	8005138 <VPP_ApplyPresetToSignal>
			break;
 8005b86:	e0d4      	b.n	8005d32 <VPP_ModifySignalOutput+0x94a>
		case 179	:
		case 180	:
		case 181	:
		case 182	:
			VPP_ApplyPresetToSignal( VPP46	);
 8005b88:	202d      	movs	r0, #45	; 0x2d
 8005b8a:	f7ff fad5 	bl	8005138 <VPP_ApplyPresetToSignal>
			break;
 8005b8e:	e0d0      	b.n	8005d32 <VPP_ModifySignalOutput+0x94a>
		case 183	:
		case 184	:
		case 185	:
		case 186	:
			VPP_ApplyPresetToSignal( VPP47	);
 8005b90:	202e      	movs	r0, #46	; 0x2e
 8005b92:	f7ff fad1 	bl	8005138 <VPP_ApplyPresetToSignal>
			break;
 8005b96:	e0cc      	b.n	8005d32 <VPP_ModifySignalOutput+0x94a>
		case 187	:
		case 188	:
		case 189	:
		case 190	:
			VPP_ApplyPresetToSignal( VPP48	);
 8005b98:	202f      	movs	r0, #47	; 0x2f
 8005b9a:	f7ff facd 	bl	8005138 <VPP_ApplyPresetToSignal>
			break;
 8005b9e:	e0c8      	b.n	8005d32 <VPP_ModifySignalOutput+0x94a>
		case 191	:
		case 192	:
		case 193	:
		case 194	:
			VPP_ApplyPresetToSignal( VPP49	);
 8005ba0:	2030      	movs	r0, #48	; 0x30
 8005ba2:	f7ff fac9 	bl	8005138 <VPP_ApplyPresetToSignal>
			break;
 8005ba6:	e0c4      	b.n	8005d32 <VPP_ModifySignalOutput+0x94a>
		case 195	:
		case 196	:
		case 197	:
		case 198	:
			VPP_ApplyPresetToSignal( VPP50	);
 8005ba8:	2031      	movs	r0, #49	; 0x31
 8005baa:	f7ff fac5 	bl	8005138 <VPP_ApplyPresetToSignal>
			break;
 8005bae:	e0c0      	b.n	8005d32 <VPP_ModifySignalOutput+0x94a>
		case 199	:
		case 200	:
		case 201	:
		case 202	:
			VPP_ApplyPresetToSignal( VPP51	);
 8005bb0:	2032      	movs	r0, #50	; 0x32
 8005bb2:	f7ff fac1 	bl	8005138 <VPP_ApplyPresetToSignal>
			break;
 8005bb6:	e0bc      	b.n	8005d32 <VPP_ModifySignalOutput+0x94a>
		case 203	:
		case 204	:
		case 205	:
		case 206	:
			VPP_ApplyPresetToSignal( VPP52	);
 8005bb8:	2033      	movs	r0, #51	; 0x33
 8005bba:	f7ff fabd 	bl	8005138 <VPP_ApplyPresetToSignal>
			break;
 8005bbe:	e0b8      	b.n	8005d32 <VPP_ModifySignalOutput+0x94a>
		case 207	:
		case 208	:
		case 209	:
		case 210	:
			VPP_ApplyPresetToSignal( VPP53	);
 8005bc0:	2034      	movs	r0, #52	; 0x34
 8005bc2:	f7ff fab9 	bl	8005138 <VPP_ApplyPresetToSignal>
			break;
 8005bc6:	e0b4      	b.n	8005d32 <VPP_ModifySignalOutput+0x94a>
		case 211	:
		case 212	:
		case 213	:
		case 214	:
			VPP_ApplyPresetToSignal( VPP54	);
 8005bc8:	2035      	movs	r0, #53	; 0x35
 8005bca:	f7ff fab5 	bl	8005138 <VPP_ApplyPresetToSignal>
			break;
 8005bce:	e0b0      	b.n	8005d32 <VPP_ModifySignalOutput+0x94a>
		case 215	:
		case 216	:
		case 217	:
		case 218	:
			VPP_ApplyPresetToSignal( VPP55	);
 8005bd0:	2036      	movs	r0, #54	; 0x36
 8005bd2:	f7ff fab1 	bl	8005138 <VPP_ApplyPresetToSignal>
			break;
 8005bd6:	e0ac      	b.n	8005d32 <VPP_ModifySignalOutput+0x94a>
		case 219	:
		case 220	:
		case 221	:
		case 222	:
			VPP_ApplyPresetToSignal( VPP56	);
 8005bd8:	2037      	movs	r0, #55	; 0x37
 8005bda:	f7ff faad 	bl	8005138 <VPP_ApplyPresetToSignal>
			break;
 8005bde:	e0a8      	b.n	8005d32 <VPP_ModifySignalOutput+0x94a>
		case 223	:
		case 224	:
		case 225	:
		case 226	:
			VPP_ApplyPresetToSignal( VPP57	);
 8005be0:	2038      	movs	r0, #56	; 0x38
 8005be2:	f7ff faa9 	bl	8005138 <VPP_ApplyPresetToSignal>
			break;
 8005be6:	e0a4      	b.n	8005d32 <VPP_ModifySignalOutput+0x94a>
		case 227	:
		case 228	:
		case 229	:
		case 230	:
			VPP_ApplyPresetToSignal( VPP58	);
 8005be8:	2039      	movs	r0, #57	; 0x39
 8005bea:	f7ff faa5 	bl	8005138 <VPP_ApplyPresetToSignal>
			break;
 8005bee:	e0a0      	b.n	8005d32 <VPP_ModifySignalOutput+0x94a>
		case 231	:
		case 232	:
		case 233	:
		case 234	:
			VPP_ApplyPresetToSignal( VPP59	);
 8005bf0:	203a      	movs	r0, #58	; 0x3a
 8005bf2:	f7ff faa1 	bl	8005138 <VPP_ApplyPresetToSignal>
			break;
 8005bf6:	e09c      	b.n	8005d32 <VPP_ModifySignalOutput+0x94a>
		case 235	:
		case 236	:
		case 237	:
		case 238	:
			VPP_ApplyPresetToSignal( VPP60	);
 8005bf8:	203b      	movs	r0, #59	; 0x3b
 8005bfa:	f7ff fa9d 	bl	8005138 <VPP_ApplyPresetToSignal>
			break;
 8005bfe:	e098      	b.n	8005d32 <VPP_ModifySignalOutput+0x94a>
		case 239	:
		case 240	:
		case 241	:
		case 242	:
			VPP_ApplyPresetToSignal( VPP61	);
 8005c00:	203c      	movs	r0, #60	; 0x3c
 8005c02:	f7ff fa99 	bl	8005138 <VPP_ApplyPresetToSignal>
			break;
 8005c06:	e094      	b.n	8005d32 <VPP_ModifySignalOutput+0x94a>
		case 243	:
		case 244	:
		case 245	:
		case 246	:
			VPP_ApplyPresetToSignal( VPP62	);
 8005c08:	203d      	movs	r0, #61	; 0x3d
 8005c0a:	f7ff fa95 	bl	8005138 <VPP_ApplyPresetToSignal>
			break;
 8005c0e:	e090      	b.n	8005d32 <VPP_ModifySignalOutput+0x94a>
		case 247	:
		case 248	:
		case 249	:
		case 250	:
			VPP_ApplyPresetToSignal( VPP63	);
 8005c10:	203e      	movs	r0, #62	; 0x3e
 8005c12:	f7ff fa91 	bl	8005138 <VPP_ApplyPresetToSignal>
			break;
 8005c16:	e08c      	b.n	8005d32 <VPP_ModifySignalOutput+0x94a>
		case 251	:
		case 252	:
		case 253	:
		case 254	:
			VPP_ApplyPresetToSignal( VPP64	);
 8005c18:	203f      	movs	r0, #63	; 0x3f
 8005c1a:	f7ff fa8d 	bl	8005138 <VPP_ApplyPresetToSignal>
			break;
 8005c1e:	e088      	b.n	8005d32 <VPP_ModifySignalOutput+0x94a>
		case 255	:
		case 256	:
		case 257	:
		case 258	:
			VPP_ApplyPresetToSignal( VPP65	);
 8005c20:	2040      	movs	r0, #64	; 0x40
 8005c22:	f7ff fa89 	bl	8005138 <VPP_ApplyPresetToSignal>
			break;
 8005c26:	e084      	b.n	8005d32 <VPP_ModifySignalOutput+0x94a>
		case 259	:
		case 260	:
		case 261	:
		case 262	:
			VPP_ApplyPresetToSignal( VPP66	);
 8005c28:	2041      	movs	r0, #65	; 0x41
 8005c2a:	f7ff fa85 	bl	8005138 <VPP_ApplyPresetToSignal>
			break;
 8005c2e:	e080      	b.n	8005d32 <VPP_ModifySignalOutput+0x94a>
		case 263	:
		case 264	:
		case 265	:
		case 266	:
			VPP_ApplyPresetToSignal( VPP67	);
 8005c30:	2042      	movs	r0, #66	; 0x42
 8005c32:	f7ff fa81 	bl	8005138 <VPP_ApplyPresetToSignal>
			break;
 8005c36:	e07c      	b.n	8005d32 <VPP_ModifySignalOutput+0x94a>
		case 267	:
		case 268	:
		case 269	:
		case 270	:
			VPP_ApplyPresetToSignal( VPP68	);
 8005c38:	2043      	movs	r0, #67	; 0x43
 8005c3a:	f7ff fa7d 	bl	8005138 <VPP_ApplyPresetToSignal>
			break;
 8005c3e:	e078      	b.n	8005d32 <VPP_ModifySignalOutput+0x94a>
		case 271	:
		case 272	:
		case 273	:
		case 274	:
			VPP_ApplyPresetToSignal( VPP69	);
 8005c40:	2044      	movs	r0, #68	; 0x44
 8005c42:	f7ff fa79 	bl	8005138 <VPP_ApplyPresetToSignal>
			break;
 8005c46:	e074      	b.n	8005d32 <VPP_ModifySignalOutput+0x94a>
		case 275	:
		case 276	:
		case 277	:
		case 278	:
			VPP_ApplyPresetToSignal( VPP70	);
 8005c48:	2045      	movs	r0, #69	; 0x45
 8005c4a:	f7ff fa75 	bl	8005138 <VPP_ApplyPresetToSignal>
			break;
 8005c4e:	e070      	b.n	8005d32 <VPP_ModifySignalOutput+0x94a>
		case 279	:
		case 280	:
		case 281	:
		case 282	:
			VPP_ApplyPresetToSignal( VPP71	);
 8005c50:	2046      	movs	r0, #70	; 0x46
 8005c52:	f7ff fa71 	bl	8005138 <VPP_ApplyPresetToSignal>
			break;
 8005c56:	e06c      	b.n	8005d32 <VPP_ModifySignalOutput+0x94a>
		case 283	:
		case 284	:
		case 285	:
		case 286	:
			VPP_ApplyPresetToSignal( VPP72	);
 8005c58:	2047      	movs	r0, #71	; 0x47
 8005c5a:	f7ff fa6d 	bl	8005138 <VPP_ApplyPresetToSignal>
			break;
 8005c5e:	e068      	b.n	8005d32 <VPP_ModifySignalOutput+0x94a>
		case 287	:
		case 288	:
		case 289	:
		case 290	:
			VPP_ApplyPresetToSignal( VPP73	);
 8005c60:	2048      	movs	r0, #72	; 0x48
 8005c62:	f7ff fa69 	bl	8005138 <VPP_ApplyPresetToSignal>
			break;
 8005c66:	e064      	b.n	8005d32 <VPP_ModifySignalOutput+0x94a>
		case 291	:
		case 292	:
		case 293	:
		case 294	:
			VPP_ApplyPresetToSignal( VPP74	);
 8005c68:	2049      	movs	r0, #73	; 0x49
 8005c6a:	f7ff fa65 	bl	8005138 <VPP_ApplyPresetToSignal>
			break;
 8005c6e:	e060      	b.n	8005d32 <VPP_ModifySignalOutput+0x94a>
		case 295	:
		case 296	:
		case 297	:
		case 298	:
			VPP_ApplyPresetToSignal( VPP75	);
 8005c70:	204a      	movs	r0, #74	; 0x4a
 8005c72:	f7ff fa61 	bl	8005138 <VPP_ApplyPresetToSignal>
			break;
 8005c76:	e05c      	b.n	8005d32 <VPP_ModifySignalOutput+0x94a>
		case 299	:
		case 300	:
		case 301	:
		case 302	:
			VPP_ApplyPresetToSignal( VPP76	);
 8005c78:	204b      	movs	r0, #75	; 0x4b
 8005c7a:	f7ff fa5d 	bl	8005138 <VPP_ApplyPresetToSignal>
			break;
 8005c7e:	e058      	b.n	8005d32 <VPP_ModifySignalOutput+0x94a>
		case 303	:
		case 304	:
		case 305	:
		case 306	:
			VPP_ApplyPresetToSignal( VPP77	);
 8005c80:	204c      	movs	r0, #76	; 0x4c
 8005c82:	f7ff fa59 	bl	8005138 <VPP_ApplyPresetToSignal>
			break;
 8005c86:	e054      	b.n	8005d32 <VPP_ModifySignalOutput+0x94a>
		case 307	:
		case 308	:
		case 309	:
		case 310	:
			VPP_ApplyPresetToSignal( VPP78	);
 8005c88:	204d      	movs	r0, #77	; 0x4d
 8005c8a:	f7ff fa55 	bl	8005138 <VPP_ApplyPresetToSignal>
			break;
 8005c8e:	e050      	b.n	8005d32 <VPP_ModifySignalOutput+0x94a>
		case 311	:
		case 312	:
		case 313	:
		case 314	:
			VPP_ApplyPresetToSignal( VPP79	);
 8005c90:	204e      	movs	r0, #78	; 0x4e
 8005c92:	f7ff fa51 	bl	8005138 <VPP_ApplyPresetToSignal>
			break;
 8005c96:	e04c      	b.n	8005d32 <VPP_ModifySignalOutput+0x94a>
		case 315	:
		case 316	:
		case 317	:
		case 318	:
			VPP_ApplyPresetToSignal( VPP80	);
 8005c98:	204f      	movs	r0, #79	; 0x4f
 8005c9a:	f7ff fa4d 	bl	8005138 <VPP_ApplyPresetToSignal>
			break;
 8005c9e:	e048      	b.n	8005d32 <VPP_ModifySignalOutput+0x94a>
		case 319	:
		case 320	:
		case 321	:
		case 322	:
			VPP_ApplyPresetToSignal( VPP81	);
 8005ca0:	2050      	movs	r0, #80	; 0x50
 8005ca2:	f7ff fa49 	bl	8005138 <VPP_ApplyPresetToSignal>
			break;
 8005ca6:	e044      	b.n	8005d32 <VPP_ModifySignalOutput+0x94a>
		case 323	:
		case 324	:
		case 325	:
		case 326	:
			VPP_ApplyPresetToSignal( VPP82	);
 8005ca8:	2051      	movs	r0, #81	; 0x51
 8005caa:	f7ff fa45 	bl	8005138 <VPP_ApplyPresetToSignal>
			break;
 8005cae:	e040      	b.n	8005d32 <VPP_ModifySignalOutput+0x94a>
		case 327	:
		case 328	:
		case 329	:
		case 330	:
			VPP_ApplyPresetToSignal( VPP83	);
 8005cb0:	2052      	movs	r0, #82	; 0x52
 8005cb2:	f7ff fa41 	bl	8005138 <VPP_ApplyPresetToSignal>
			break;
 8005cb6:	e03c      	b.n	8005d32 <VPP_ModifySignalOutput+0x94a>
		case 331	:
		case 332	:
		case 333	:
		case 334	:
			VPP_ApplyPresetToSignal( VPP84	);
 8005cb8:	2053      	movs	r0, #83	; 0x53
 8005cba:	f7ff fa3d 	bl	8005138 <VPP_ApplyPresetToSignal>
			break;
 8005cbe:	e038      	b.n	8005d32 <VPP_ModifySignalOutput+0x94a>
		case 335	:
		case 336	:
		case 337	:
		case 338	:
			VPP_ApplyPresetToSignal( VPP85	);
 8005cc0:	2054      	movs	r0, #84	; 0x54
 8005cc2:	f7ff fa39 	bl	8005138 <VPP_ApplyPresetToSignal>
			break;
 8005cc6:	e034      	b.n	8005d32 <VPP_ModifySignalOutput+0x94a>
		case 339	:
		case 340	:
		case 341	:
		case 342	:
			VPP_ApplyPresetToSignal( VPP86	);
 8005cc8:	2055      	movs	r0, #85	; 0x55
 8005cca:	f7ff fa35 	bl	8005138 <VPP_ApplyPresetToSignal>
			break;
 8005cce:	e030      	b.n	8005d32 <VPP_ModifySignalOutput+0x94a>
		case 343	:
		case 344	:
		case 345	:
		case 346	:
			VPP_ApplyPresetToSignal( VPP87	);
 8005cd0:	2056      	movs	r0, #86	; 0x56
 8005cd2:	f7ff fa31 	bl	8005138 <VPP_ApplyPresetToSignal>
			break;
 8005cd6:	e02c      	b.n	8005d32 <VPP_ModifySignalOutput+0x94a>
		case 347	:
		case 348	:
		case 349	:
		case 350	:
			VPP_ApplyPresetToSignal( VPP88	);
 8005cd8:	2057      	movs	r0, #87	; 0x57
 8005cda:	f7ff fa2d 	bl	8005138 <VPP_ApplyPresetToSignal>
			break;
 8005cde:	e028      	b.n	8005d32 <VPP_ModifySignalOutput+0x94a>
		case 351	:
		case 352	:
		case 353	:
		case 354	:
			VPP_ApplyPresetToSignal( VPP89	);
 8005ce0:	2058      	movs	r0, #88	; 0x58
 8005ce2:	f7ff fa29 	bl	8005138 <VPP_ApplyPresetToSignal>
			break;
 8005ce6:	e024      	b.n	8005d32 <VPP_ModifySignalOutput+0x94a>
		case 355	:
		case 356	:
		case 357	:
		case 358	:
			VPP_ApplyPresetToSignal( VPP90	);
 8005ce8:	2059      	movs	r0, #89	; 0x59
 8005cea:	f7ff fa25 	bl	8005138 <VPP_ApplyPresetToSignal>
			break;
 8005cee:	e020      	b.n	8005d32 <VPP_ModifySignalOutput+0x94a>
		case 359	:
		case 360	:
		case 361	:
		case 362	:
			VPP_ApplyPresetToSignal( VPP91	);
 8005cf0:	205a      	movs	r0, #90	; 0x5a
 8005cf2:	f7ff fa21 	bl	8005138 <VPP_ApplyPresetToSignal>
			break;
 8005cf6:	e01c      	b.n	8005d32 <VPP_ModifySignalOutput+0x94a>
		case 363	:
		case 364	:
		case 365	:
		case 366	:
			VPP_ApplyPresetToSignal( VPP92	);
 8005cf8:	205b      	movs	r0, #91	; 0x5b
 8005cfa:	f7ff fa1d 	bl	8005138 <VPP_ApplyPresetToSignal>
			break;
 8005cfe:	e018      	b.n	8005d32 <VPP_ModifySignalOutput+0x94a>
		case 367	:
		case 368	:
		case 369	:
		case 370	:
			VPP_ApplyPresetToSignal( VPP93	);
 8005d00:	205c      	movs	r0, #92	; 0x5c
 8005d02:	f7ff fa19 	bl	8005138 <VPP_ApplyPresetToSignal>
			break;
 8005d06:	e014      	b.n	8005d32 <VPP_ModifySignalOutput+0x94a>
		case 371	:
		case 372	:
		case 373	:
		case 374	:
			VPP_ApplyPresetToSignal( VPP94	);
 8005d08:	205d      	movs	r0, #93	; 0x5d
 8005d0a:	f7ff fa15 	bl	8005138 <VPP_ApplyPresetToSignal>
			break;
 8005d0e:	e010      	b.n	8005d32 <VPP_ModifySignalOutput+0x94a>
		case 375	:
		case 376	:
		case 377	:
		case 378	:
			VPP_ApplyPresetToSignal( VPP95	);
 8005d10:	205e      	movs	r0, #94	; 0x5e
 8005d12:	f7ff fa11 	bl	8005138 <VPP_ApplyPresetToSignal>
			break;
 8005d16:	e00c      	b.n	8005d32 <VPP_ModifySignalOutput+0x94a>
		case 379	:
		case 380	:
		case 381	:
		case 382	:
			VPP_ApplyPresetToSignal( VPP96	);
 8005d18:	205f      	movs	r0, #95	; 0x5f
 8005d1a:	f7ff fa0d 	bl	8005138 <VPP_ApplyPresetToSignal>
			break;
 8005d1e:	e008      	b.n	8005d32 <VPP_ModifySignalOutput+0x94a>
		case 383	:
		case 384	:
		case 385	:
		case 386	:
			VPP_ApplyPresetToSignal( VPP97	);
 8005d20:	2060      	movs	r0, #96	; 0x60
 8005d22:	f7ff fa09 	bl	8005138 <VPP_ApplyPresetToSignal>
			break;
 8005d26:	e004      	b.n	8005d32 <VPP_ModifySignalOutput+0x94a>
		case 387	:
		case 388	:
		case 389	:
		case 390	:
			VPP_ApplyPresetToSignal( VPP98	);
 8005d28:	2061      	movs	r0, #97	; 0x61
 8005d2a:	f7ff fa05 	bl	8005138 <VPP_ApplyPresetToSignal>
			break;
 8005d2e:	e000      	b.n	8005d32 <VPP_ModifySignalOutput+0x94a>

		default:
			break;
 8005d30:	bf00      	nop
	}
}
 8005d32:	bf00      	nop
 8005d34:	3708      	adds	r7, #8
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}
 8005d3a:	bf00      	nop

08005d3c <VPP_ModifySyncOutput>:

 *	@retval None
 *
 */
void VPP_ModifySyncOutput(uint16_t pEncoderValue)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b082      	sub	sp, #8
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	4603      	mov	r3, r0
 8005d44:	80fb      	strh	r3, [r7, #6]
	switch(pEncoderValue)
 8005d46:	88fb      	ldrh	r3, [r7, #6]
 8005d48:	f5b3 7fc3 	cmp.w	r3, #390	; 0x186
 8005d4c:	f200 849a 	bhi.w	8006684 <VPP_ModifySyncOutput+0x948>
 8005d50:	a201      	add	r2, pc, #4	; (adr r2, 8005d58 <VPP_ModifySyncOutput+0x1c>)
 8005d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d56:	bf00      	nop
 8005d58:	08006375 	.word	0x08006375
 8005d5c:	08006375 	.word	0x08006375
 8005d60:	08006375 	.word	0x08006375
 8005d64:	0800637d 	.word	0x0800637d
 8005d68:	0800637d 	.word	0x0800637d
 8005d6c:	0800637d 	.word	0x0800637d
 8005d70:	0800637d 	.word	0x0800637d
 8005d74:	08006385 	.word	0x08006385
 8005d78:	08006385 	.word	0x08006385
 8005d7c:	08006385 	.word	0x08006385
 8005d80:	08006385 	.word	0x08006385
 8005d84:	0800638d 	.word	0x0800638d
 8005d88:	0800638d 	.word	0x0800638d
 8005d8c:	0800638d 	.word	0x0800638d
 8005d90:	0800638d 	.word	0x0800638d
 8005d94:	08006395 	.word	0x08006395
 8005d98:	08006395 	.word	0x08006395
 8005d9c:	08006395 	.word	0x08006395
 8005da0:	08006395 	.word	0x08006395
 8005da4:	0800639d 	.word	0x0800639d
 8005da8:	0800639d 	.word	0x0800639d
 8005dac:	0800639d 	.word	0x0800639d
 8005db0:	0800639d 	.word	0x0800639d
 8005db4:	080063a5 	.word	0x080063a5
 8005db8:	080063a5 	.word	0x080063a5
 8005dbc:	080063a5 	.word	0x080063a5
 8005dc0:	080063a5 	.word	0x080063a5
 8005dc4:	080063ad 	.word	0x080063ad
 8005dc8:	080063ad 	.word	0x080063ad
 8005dcc:	080063ad 	.word	0x080063ad
 8005dd0:	080063ad 	.word	0x080063ad
 8005dd4:	080063b5 	.word	0x080063b5
 8005dd8:	080063b5 	.word	0x080063b5
 8005ddc:	080063b5 	.word	0x080063b5
 8005de0:	080063b5 	.word	0x080063b5
 8005de4:	080063bd 	.word	0x080063bd
 8005de8:	080063bd 	.word	0x080063bd
 8005dec:	080063bd 	.word	0x080063bd
 8005df0:	080063bd 	.word	0x080063bd
 8005df4:	080063c5 	.word	0x080063c5
 8005df8:	080063c5 	.word	0x080063c5
 8005dfc:	080063c5 	.word	0x080063c5
 8005e00:	080063c5 	.word	0x080063c5
 8005e04:	080063cd 	.word	0x080063cd
 8005e08:	080063cd 	.word	0x080063cd
 8005e0c:	080063cd 	.word	0x080063cd
 8005e10:	080063cd 	.word	0x080063cd
 8005e14:	080063d5 	.word	0x080063d5
 8005e18:	080063d5 	.word	0x080063d5
 8005e1c:	080063d5 	.word	0x080063d5
 8005e20:	080063d5 	.word	0x080063d5
 8005e24:	080063dd 	.word	0x080063dd
 8005e28:	080063dd 	.word	0x080063dd
 8005e2c:	080063dd 	.word	0x080063dd
 8005e30:	080063dd 	.word	0x080063dd
 8005e34:	080063e5 	.word	0x080063e5
 8005e38:	080063e5 	.word	0x080063e5
 8005e3c:	080063e5 	.word	0x080063e5
 8005e40:	080063e5 	.word	0x080063e5
 8005e44:	080063ed 	.word	0x080063ed
 8005e48:	080063ed 	.word	0x080063ed
 8005e4c:	080063ed 	.word	0x080063ed
 8005e50:	080063ed 	.word	0x080063ed
 8005e54:	080063f5 	.word	0x080063f5
 8005e58:	080063f5 	.word	0x080063f5
 8005e5c:	080063f5 	.word	0x080063f5
 8005e60:	080063f5 	.word	0x080063f5
 8005e64:	080063fd 	.word	0x080063fd
 8005e68:	080063fd 	.word	0x080063fd
 8005e6c:	080063fd 	.word	0x080063fd
 8005e70:	080063fd 	.word	0x080063fd
 8005e74:	08006405 	.word	0x08006405
 8005e78:	08006405 	.word	0x08006405
 8005e7c:	08006405 	.word	0x08006405
 8005e80:	08006405 	.word	0x08006405
 8005e84:	0800640d 	.word	0x0800640d
 8005e88:	0800640d 	.word	0x0800640d
 8005e8c:	0800640d 	.word	0x0800640d
 8005e90:	0800640d 	.word	0x0800640d
 8005e94:	08006415 	.word	0x08006415
 8005e98:	08006415 	.word	0x08006415
 8005e9c:	08006415 	.word	0x08006415
 8005ea0:	08006415 	.word	0x08006415
 8005ea4:	0800641d 	.word	0x0800641d
 8005ea8:	0800641d 	.word	0x0800641d
 8005eac:	0800641d 	.word	0x0800641d
 8005eb0:	0800641d 	.word	0x0800641d
 8005eb4:	08006425 	.word	0x08006425
 8005eb8:	08006425 	.word	0x08006425
 8005ebc:	08006425 	.word	0x08006425
 8005ec0:	08006425 	.word	0x08006425
 8005ec4:	0800642d 	.word	0x0800642d
 8005ec8:	0800642d 	.word	0x0800642d
 8005ecc:	0800642d 	.word	0x0800642d
 8005ed0:	0800642d 	.word	0x0800642d
 8005ed4:	08006435 	.word	0x08006435
 8005ed8:	08006435 	.word	0x08006435
 8005edc:	08006435 	.word	0x08006435
 8005ee0:	08006435 	.word	0x08006435
 8005ee4:	0800643d 	.word	0x0800643d
 8005ee8:	0800643d 	.word	0x0800643d
 8005eec:	0800643d 	.word	0x0800643d
 8005ef0:	0800643d 	.word	0x0800643d
 8005ef4:	08006445 	.word	0x08006445
 8005ef8:	08006445 	.word	0x08006445
 8005efc:	08006445 	.word	0x08006445
 8005f00:	08006445 	.word	0x08006445
 8005f04:	0800644d 	.word	0x0800644d
 8005f08:	0800644d 	.word	0x0800644d
 8005f0c:	0800644d 	.word	0x0800644d
 8005f10:	0800644d 	.word	0x0800644d
 8005f14:	08006455 	.word	0x08006455
 8005f18:	08006455 	.word	0x08006455
 8005f1c:	08006455 	.word	0x08006455
 8005f20:	08006455 	.word	0x08006455
 8005f24:	0800645d 	.word	0x0800645d
 8005f28:	0800645d 	.word	0x0800645d
 8005f2c:	0800645d 	.word	0x0800645d
 8005f30:	0800645d 	.word	0x0800645d
 8005f34:	08006465 	.word	0x08006465
 8005f38:	08006465 	.word	0x08006465
 8005f3c:	08006465 	.word	0x08006465
 8005f40:	08006465 	.word	0x08006465
 8005f44:	0800646d 	.word	0x0800646d
 8005f48:	0800646d 	.word	0x0800646d
 8005f4c:	0800646d 	.word	0x0800646d
 8005f50:	0800646d 	.word	0x0800646d
 8005f54:	08006475 	.word	0x08006475
 8005f58:	08006475 	.word	0x08006475
 8005f5c:	08006475 	.word	0x08006475
 8005f60:	08006475 	.word	0x08006475
 8005f64:	0800647d 	.word	0x0800647d
 8005f68:	0800647d 	.word	0x0800647d
 8005f6c:	0800647d 	.word	0x0800647d
 8005f70:	0800647d 	.word	0x0800647d
 8005f74:	08006485 	.word	0x08006485
 8005f78:	08006485 	.word	0x08006485
 8005f7c:	08006485 	.word	0x08006485
 8005f80:	08006485 	.word	0x08006485
 8005f84:	0800648d 	.word	0x0800648d
 8005f88:	0800648d 	.word	0x0800648d
 8005f8c:	0800648d 	.word	0x0800648d
 8005f90:	0800648d 	.word	0x0800648d
 8005f94:	08006495 	.word	0x08006495
 8005f98:	08006495 	.word	0x08006495
 8005f9c:	08006495 	.word	0x08006495
 8005fa0:	08006495 	.word	0x08006495
 8005fa4:	0800649d 	.word	0x0800649d
 8005fa8:	0800649d 	.word	0x0800649d
 8005fac:	0800649d 	.word	0x0800649d
 8005fb0:	0800649d 	.word	0x0800649d
 8005fb4:	080064a5 	.word	0x080064a5
 8005fb8:	080064a5 	.word	0x080064a5
 8005fbc:	080064a5 	.word	0x080064a5
 8005fc0:	080064a5 	.word	0x080064a5
 8005fc4:	080064ad 	.word	0x080064ad
 8005fc8:	080064ad 	.word	0x080064ad
 8005fcc:	080064ad 	.word	0x080064ad
 8005fd0:	080064ad 	.word	0x080064ad
 8005fd4:	080064b5 	.word	0x080064b5
 8005fd8:	080064b5 	.word	0x080064b5
 8005fdc:	080064b5 	.word	0x080064b5
 8005fe0:	080064b5 	.word	0x080064b5
 8005fe4:	080064bd 	.word	0x080064bd
 8005fe8:	080064bd 	.word	0x080064bd
 8005fec:	080064bd 	.word	0x080064bd
 8005ff0:	080064bd 	.word	0x080064bd
 8005ff4:	080064c5 	.word	0x080064c5
 8005ff8:	080064c5 	.word	0x080064c5
 8005ffc:	080064c5 	.word	0x080064c5
 8006000:	080064c5 	.word	0x080064c5
 8006004:	080064cd 	.word	0x080064cd
 8006008:	080064cd 	.word	0x080064cd
 800600c:	080064cd 	.word	0x080064cd
 8006010:	080064cd 	.word	0x080064cd
 8006014:	080064d5 	.word	0x080064d5
 8006018:	080064d5 	.word	0x080064d5
 800601c:	080064d5 	.word	0x080064d5
 8006020:	080064d5 	.word	0x080064d5
 8006024:	080064dd 	.word	0x080064dd
 8006028:	080064dd 	.word	0x080064dd
 800602c:	080064dd 	.word	0x080064dd
 8006030:	080064dd 	.word	0x080064dd
 8006034:	080064e5 	.word	0x080064e5
 8006038:	080064e5 	.word	0x080064e5
 800603c:	080064e5 	.word	0x080064e5
 8006040:	080064e5 	.word	0x080064e5
 8006044:	080064ed 	.word	0x080064ed
 8006048:	080064ed 	.word	0x080064ed
 800604c:	080064ed 	.word	0x080064ed
 8006050:	080064ed 	.word	0x080064ed
 8006054:	080064f5 	.word	0x080064f5
 8006058:	080064f5 	.word	0x080064f5
 800605c:	080064f5 	.word	0x080064f5
 8006060:	080064f5 	.word	0x080064f5
 8006064:	080064fd 	.word	0x080064fd
 8006068:	080064fd 	.word	0x080064fd
 800606c:	080064fd 	.word	0x080064fd
 8006070:	080064fd 	.word	0x080064fd
 8006074:	08006505 	.word	0x08006505
 8006078:	08006505 	.word	0x08006505
 800607c:	08006505 	.word	0x08006505
 8006080:	08006505 	.word	0x08006505
 8006084:	0800650d 	.word	0x0800650d
 8006088:	0800650d 	.word	0x0800650d
 800608c:	0800650d 	.word	0x0800650d
 8006090:	0800650d 	.word	0x0800650d
 8006094:	08006515 	.word	0x08006515
 8006098:	08006515 	.word	0x08006515
 800609c:	08006515 	.word	0x08006515
 80060a0:	08006515 	.word	0x08006515
 80060a4:	0800651d 	.word	0x0800651d
 80060a8:	0800651d 	.word	0x0800651d
 80060ac:	0800651d 	.word	0x0800651d
 80060b0:	0800651d 	.word	0x0800651d
 80060b4:	08006525 	.word	0x08006525
 80060b8:	08006525 	.word	0x08006525
 80060bc:	08006525 	.word	0x08006525
 80060c0:	08006525 	.word	0x08006525
 80060c4:	0800652d 	.word	0x0800652d
 80060c8:	0800652d 	.word	0x0800652d
 80060cc:	0800652d 	.word	0x0800652d
 80060d0:	0800652d 	.word	0x0800652d
 80060d4:	08006535 	.word	0x08006535
 80060d8:	08006535 	.word	0x08006535
 80060dc:	08006535 	.word	0x08006535
 80060e0:	08006535 	.word	0x08006535
 80060e4:	0800653d 	.word	0x0800653d
 80060e8:	0800653d 	.word	0x0800653d
 80060ec:	0800653d 	.word	0x0800653d
 80060f0:	0800653d 	.word	0x0800653d
 80060f4:	08006545 	.word	0x08006545
 80060f8:	08006545 	.word	0x08006545
 80060fc:	08006545 	.word	0x08006545
 8006100:	08006545 	.word	0x08006545
 8006104:	0800654d 	.word	0x0800654d
 8006108:	0800654d 	.word	0x0800654d
 800610c:	0800654d 	.word	0x0800654d
 8006110:	0800654d 	.word	0x0800654d
 8006114:	08006555 	.word	0x08006555
 8006118:	08006555 	.word	0x08006555
 800611c:	08006555 	.word	0x08006555
 8006120:	08006555 	.word	0x08006555
 8006124:	0800655d 	.word	0x0800655d
 8006128:	0800655d 	.word	0x0800655d
 800612c:	0800655d 	.word	0x0800655d
 8006130:	0800655d 	.word	0x0800655d
 8006134:	08006565 	.word	0x08006565
 8006138:	08006565 	.word	0x08006565
 800613c:	08006565 	.word	0x08006565
 8006140:	08006565 	.word	0x08006565
 8006144:	0800656d 	.word	0x0800656d
 8006148:	0800656d 	.word	0x0800656d
 800614c:	0800656d 	.word	0x0800656d
 8006150:	0800656d 	.word	0x0800656d
 8006154:	08006575 	.word	0x08006575
 8006158:	08006575 	.word	0x08006575
 800615c:	08006575 	.word	0x08006575
 8006160:	08006575 	.word	0x08006575
 8006164:	0800657d 	.word	0x0800657d
 8006168:	0800657d 	.word	0x0800657d
 800616c:	0800657d 	.word	0x0800657d
 8006170:	0800657d 	.word	0x0800657d
 8006174:	08006585 	.word	0x08006585
 8006178:	08006585 	.word	0x08006585
 800617c:	08006585 	.word	0x08006585
 8006180:	08006585 	.word	0x08006585
 8006184:	0800658d 	.word	0x0800658d
 8006188:	0800658d 	.word	0x0800658d
 800618c:	0800658d 	.word	0x0800658d
 8006190:	0800658d 	.word	0x0800658d
 8006194:	08006595 	.word	0x08006595
 8006198:	08006595 	.word	0x08006595
 800619c:	08006595 	.word	0x08006595
 80061a0:	08006595 	.word	0x08006595
 80061a4:	0800659d 	.word	0x0800659d
 80061a8:	0800659d 	.word	0x0800659d
 80061ac:	0800659d 	.word	0x0800659d
 80061b0:	0800659d 	.word	0x0800659d
 80061b4:	080065a5 	.word	0x080065a5
 80061b8:	080065a5 	.word	0x080065a5
 80061bc:	080065a5 	.word	0x080065a5
 80061c0:	080065a5 	.word	0x080065a5
 80061c4:	080065ad 	.word	0x080065ad
 80061c8:	080065ad 	.word	0x080065ad
 80061cc:	080065ad 	.word	0x080065ad
 80061d0:	080065ad 	.word	0x080065ad
 80061d4:	080065b5 	.word	0x080065b5
 80061d8:	080065b5 	.word	0x080065b5
 80061dc:	080065b5 	.word	0x080065b5
 80061e0:	080065b5 	.word	0x080065b5
 80061e4:	080065bd 	.word	0x080065bd
 80061e8:	080065bd 	.word	0x080065bd
 80061ec:	080065bd 	.word	0x080065bd
 80061f0:	080065bd 	.word	0x080065bd
 80061f4:	080065c5 	.word	0x080065c5
 80061f8:	080065c5 	.word	0x080065c5
 80061fc:	080065c5 	.word	0x080065c5
 8006200:	080065c5 	.word	0x080065c5
 8006204:	080065cd 	.word	0x080065cd
 8006208:	080065cd 	.word	0x080065cd
 800620c:	080065cd 	.word	0x080065cd
 8006210:	080065cd 	.word	0x080065cd
 8006214:	080065d5 	.word	0x080065d5
 8006218:	080065d5 	.word	0x080065d5
 800621c:	080065d5 	.word	0x080065d5
 8006220:	080065d5 	.word	0x080065d5
 8006224:	080065dd 	.word	0x080065dd
 8006228:	080065dd 	.word	0x080065dd
 800622c:	080065dd 	.word	0x080065dd
 8006230:	080065dd 	.word	0x080065dd
 8006234:	080065e5 	.word	0x080065e5
 8006238:	080065e5 	.word	0x080065e5
 800623c:	080065e5 	.word	0x080065e5
 8006240:	080065e5 	.word	0x080065e5
 8006244:	080065ed 	.word	0x080065ed
 8006248:	080065ed 	.word	0x080065ed
 800624c:	080065ed 	.word	0x080065ed
 8006250:	080065ed 	.word	0x080065ed
 8006254:	080065f5 	.word	0x080065f5
 8006258:	080065f5 	.word	0x080065f5
 800625c:	080065f5 	.word	0x080065f5
 8006260:	080065f5 	.word	0x080065f5
 8006264:	080065fd 	.word	0x080065fd
 8006268:	080065fd 	.word	0x080065fd
 800626c:	080065fd 	.word	0x080065fd
 8006270:	080065fd 	.word	0x080065fd
 8006274:	08006605 	.word	0x08006605
 8006278:	08006605 	.word	0x08006605
 800627c:	08006605 	.word	0x08006605
 8006280:	08006605 	.word	0x08006605
 8006284:	0800660d 	.word	0x0800660d
 8006288:	0800660d 	.word	0x0800660d
 800628c:	0800660d 	.word	0x0800660d
 8006290:	0800660d 	.word	0x0800660d
 8006294:	08006615 	.word	0x08006615
 8006298:	08006615 	.word	0x08006615
 800629c:	08006615 	.word	0x08006615
 80062a0:	08006615 	.word	0x08006615
 80062a4:	0800661d 	.word	0x0800661d
 80062a8:	0800661d 	.word	0x0800661d
 80062ac:	0800661d 	.word	0x0800661d
 80062b0:	0800661d 	.word	0x0800661d
 80062b4:	08006625 	.word	0x08006625
 80062b8:	08006625 	.word	0x08006625
 80062bc:	08006625 	.word	0x08006625
 80062c0:	08006625 	.word	0x08006625
 80062c4:	0800662d 	.word	0x0800662d
 80062c8:	0800662d 	.word	0x0800662d
 80062cc:	0800662d 	.word	0x0800662d
 80062d0:	0800662d 	.word	0x0800662d
 80062d4:	08006635 	.word	0x08006635
 80062d8:	08006635 	.word	0x08006635
 80062dc:	08006635 	.word	0x08006635
 80062e0:	08006635 	.word	0x08006635
 80062e4:	0800663d 	.word	0x0800663d
 80062e8:	0800663d 	.word	0x0800663d
 80062ec:	0800663d 	.word	0x0800663d
 80062f0:	0800663d 	.word	0x0800663d
 80062f4:	08006645 	.word	0x08006645
 80062f8:	08006645 	.word	0x08006645
 80062fc:	08006645 	.word	0x08006645
 8006300:	08006645 	.word	0x08006645
 8006304:	0800664d 	.word	0x0800664d
 8006308:	0800664d 	.word	0x0800664d
 800630c:	0800664d 	.word	0x0800664d
 8006310:	0800664d 	.word	0x0800664d
 8006314:	08006655 	.word	0x08006655
 8006318:	08006655 	.word	0x08006655
 800631c:	08006655 	.word	0x08006655
 8006320:	08006655 	.word	0x08006655
 8006324:	0800665d 	.word	0x0800665d
 8006328:	0800665d 	.word	0x0800665d
 800632c:	0800665d 	.word	0x0800665d
 8006330:	0800665d 	.word	0x0800665d
 8006334:	08006665 	.word	0x08006665
 8006338:	08006665 	.word	0x08006665
 800633c:	08006665 	.word	0x08006665
 8006340:	08006665 	.word	0x08006665
 8006344:	0800666d 	.word	0x0800666d
 8006348:	0800666d 	.word	0x0800666d
 800634c:	0800666d 	.word	0x0800666d
 8006350:	0800666d 	.word	0x0800666d
 8006354:	08006675 	.word	0x08006675
 8006358:	08006675 	.word	0x08006675
 800635c:	08006675 	.word	0x08006675
 8006360:	08006675 	.word	0x08006675
 8006364:	0800667d 	.word	0x0800667d
 8006368:	0800667d 	.word	0x0800667d
 800636c:	0800667d 	.word	0x0800667d
 8006370:	0800667d 	.word	0x0800667d
	{
		case 0	:
		case 1	:
		case 2	:
			VPP_ApplyPresetToSync( VPP01 );
 8006374:	2000      	movs	r0, #0
 8006376:	f7fe ff0d 	bl	8005194 <VPP_ApplyPresetToSync>
			break;
 800637a:	e184      	b.n	8006686 <VPP_ModifySyncOutput+0x94a>
		case 3	:
		case 4	:
		case 5	:
		case 6	:
			VPP_ApplyPresetToSync( VPP02	);
 800637c:	2001      	movs	r0, #1
 800637e:	f7fe ff09 	bl	8005194 <VPP_ApplyPresetToSync>
			break;
 8006382:	e180      	b.n	8006686 <VPP_ModifySyncOutput+0x94a>
		case 7	:
		case 8	:
		case 9	:
		case 10	:
			VPP_ApplyPresetToSync( VPP03	);
 8006384:	2002      	movs	r0, #2
 8006386:	f7fe ff05 	bl	8005194 <VPP_ApplyPresetToSync>
			break;
 800638a:	e17c      	b.n	8006686 <VPP_ModifySyncOutput+0x94a>
		case 11	:
		case 12	:
		case 13	:
		case 14	:
			VPP_ApplyPresetToSync( VPP04	);
 800638c:	2003      	movs	r0, #3
 800638e:	f7fe ff01 	bl	8005194 <VPP_ApplyPresetToSync>
			break;
 8006392:	e178      	b.n	8006686 <VPP_ModifySyncOutput+0x94a>
		case 15	:
		case 16	:
		case 17	:
		case 18	:
			VPP_ApplyPresetToSync( VPP05	);
 8006394:	2004      	movs	r0, #4
 8006396:	f7fe fefd 	bl	8005194 <VPP_ApplyPresetToSync>
			break;
 800639a:	e174      	b.n	8006686 <VPP_ModifySyncOutput+0x94a>
		case 19	:
		case 20	:
		case 21	:
		case 22	:
			VPP_ApplyPresetToSync( VPP06	);
 800639c:	2005      	movs	r0, #5
 800639e:	f7fe fef9 	bl	8005194 <VPP_ApplyPresetToSync>
			break;
 80063a2:	e170      	b.n	8006686 <VPP_ModifySyncOutput+0x94a>
		case 23	:
		case 24	:
		case 25	:
		case 26	:
			VPP_ApplyPresetToSync( VPP07	);
 80063a4:	2006      	movs	r0, #6
 80063a6:	f7fe fef5 	bl	8005194 <VPP_ApplyPresetToSync>
			break;
 80063aa:	e16c      	b.n	8006686 <VPP_ModifySyncOutput+0x94a>
		case 27	:
		case 28	:
		case 29	:
		case 30	:
			VPP_ApplyPresetToSync( VPP08	);
 80063ac:	2007      	movs	r0, #7
 80063ae:	f7fe fef1 	bl	8005194 <VPP_ApplyPresetToSync>
			break;
 80063b2:	e168      	b.n	8006686 <VPP_ModifySyncOutput+0x94a>
		case 31	:
		case 32	:
		case 33	:
		case 34	:
			VPP_ApplyPresetToSync( VPP09	);
 80063b4:	2008      	movs	r0, #8
 80063b6:	f7fe feed 	bl	8005194 <VPP_ApplyPresetToSync>
			break;
 80063ba:	e164      	b.n	8006686 <VPP_ModifySyncOutput+0x94a>
		case 35	:
		case 36	:
		case 37	:
		case 38	:
			VPP_ApplyPresetToSync( VPP10	);
 80063bc:	2009      	movs	r0, #9
 80063be:	f7fe fee9 	bl	8005194 <VPP_ApplyPresetToSync>
			break;
 80063c2:	e160      	b.n	8006686 <VPP_ModifySyncOutput+0x94a>
		case 39	:
		case 40	:
		case 41	:
		case 42	:
			VPP_ApplyPresetToSync( VPP11	);
 80063c4:	200a      	movs	r0, #10
 80063c6:	f7fe fee5 	bl	8005194 <VPP_ApplyPresetToSync>
			break;
 80063ca:	e15c      	b.n	8006686 <VPP_ModifySyncOutput+0x94a>
		case 43	:
		case 44	:
		case 45	:
		case 46	:
			VPP_ApplyPresetToSync( VPP12	);
 80063cc:	200b      	movs	r0, #11
 80063ce:	f7fe fee1 	bl	8005194 <VPP_ApplyPresetToSync>
			break;
 80063d2:	e158      	b.n	8006686 <VPP_ModifySyncOutput+0x94a>
		case 47	:
		case 48	:
		case 49	:
		case 50	:
			VPP_ApplyPresetToSync( VPP13	);
 80063d4:	200c      	movs	r0, #12
 80063d6:	f7fe fedd 	bl	8005194 <VPP_ApplyPresetToSync>
			break;
 80063da:	e154      	b.n	8006686 <VPP_ModifySyncOutput+0x94a>
		case 51	:
		case 52	:
		case 53	:
		case 54	:
			VPP_ApplyPresetToSync( VPP14	);
 80063dc:	200d      	movs	r0, #13
 80063de:	f7fe fed9 	bl	8005194 <VPP_ApplyPresetToSync>
			break;
 80063e2:	e150      	b.n	8006686 <VPP_ModifySyncOutput+0x94a>
		case 55	:
		case 56	:
		case 57	:
		case 58	:
			VPP_ApplyPresetToSync( VPP15	);
 80063e4:	200e      	movs	r0, #14
 80063e6:	f7fe fed5 	bl	8005194 <VPP_ApplyPresetToSync>
			break;
 80063ea:	e14c      	b.n	8006686 <VPP_ModifySyncOutput+0x94a>
		case 59	:
		case 60	:
		case 61	:
		case 62	:
			VPP_ApplyPresetToSync( VPP16	);
 80063ec:	200f      	movs	r0, #15
 80063ee:	f7fe fed1 	bl	8005194 <VPP_ApplyPresetToSync>
			break;
 80063f2:	e148      	b.n	8006686 <VPP_ModifySyncOutput+0x94a>
		case 63	:
		case 64	:
		case 65	:
		case 66	:
			VPP_ApplyPresetToSync( VPP17	);
 80063f4:	2010      	movs	r0, #16
 80063f6:	f7fe fecd 	bl	8005194 <VPP_ApplyPresetToSync>
			break;
 80063fa:	e144      	b.n	8006686 <VPP_ModifySyncOutput+0x94a>
		case 67	:
		case 68	:
		case 69	:
		case 70	:
			VPP_ApplyPresetToSync( VPP18	);
 80063fc:	2011      	movs	r0, #17
 80063fe:	f7fe fec9 	bl	8005194 <VPP_ApplyPresetToSync>
			break;
 8006402:	e140      	b.n	8006686 <VPP_ModifySyncOutput+0x94a>
		case 71	:
		case 72	:
		case 73	:
		case 74	:
			VPP_ApplyPresetToSync( VPP19	);
 8006404:	2012      	movs	r0, #18
 8006406:	f7fe fec5 	bl	8005194 <VPP_ApplyPresetToSync>
			break;
 800640a:	e13c      	b.n	8006686 <VPP_ModifySyncOutput+0x94a>
		case 75	:
		case 76	:
		case 77	:
		case 78	:
			VPP_ApplyPresetToSync( VPP20	);
 800640c:	2013      	movs	r0, #19
 800640e:	f7fe fec1 	bl	8005194 <VPP_ApplyPresetToSync>
			break;
 8006412:	e138      	b.n	8006686 <VPP_ModifySyncOutput+0x94a>
		case 79	:
		case 80	:
		case 81	:
		case 82	:
			VPP_ApplyPresetToSync( VPP21	);
 8006414:	2014      	movs	r0, #20
 8006416:	f7fe febd 	bl	8005194 <VPP_ApplyPresetToSync>
			break;
 800641a:	e134      	b.n	8006686 <VPP_ModifySyncOutput+0x94a>
		case 83	:
		case 84	:
		case 85	:
		case 86	:
			VPP_ApplyPresetToSync( VPP22	);
 800641c:	2015      	movs	r0, #21
 800641e:	f7fe feb9 	bl	8005194 <VPP_ApplyPresetToSync>
			break;
 8006422:	e130      	b.n	8006686 <VPP_ModifySyncOutput+0x94a>
		case 87	:
		case 88	:
		case 89	:
		case 90	:
			VPP_ApplyPresetToSync( VPP23	);
 8006424:	2016      	movs	r0, #22
 8006426:	f7fe feb5 	bl	8005194 <VPP_ApplyPresetToSync>
			break;
 800642a:	e12c      	b.n	8006686 <VPP_ModifySyncOutput+0x94a>
		case 91	:
		case 92	:
		case 93	:
		case 94	:
			VPP_ApplyPresetToSync( VPP24	);
 800642c:	2017      	movs	r0, #23
 800642e:	f7fe feb1 	bl	8005194 <VPP_ApplyPresetToSync>
			break;
 8006432:	e128      	b.n	8006686 <VPP_ModifySyncOutput+0x94a>
		case 95	:
		case 96	:
		case 97	:
		case 98	:
			VPP_ApplyPresetToSync( VPP25	);
 8006434:	2018      	movs	r0, #24
 8006436:	f7fe fead 	bl	8005194 <VPP_ApplyPresetToSync>
			break;
 800643a:	e124      	b.n	8006686 <VPP_ModifySyncOutput+0x94a>
		case 99		:
		case 100	:
		case 101	:
		case 102	:
			VPP_ApplyPresetToSync( VPP26	);
 800643c:	2019      	movs	r0, #25
 800643e:	f7fe fea9 	bl	8005194 <VPP_ApplyPresetToSync>
			break;
 8006442:	e120      	b.n	8006686 <VPP_ModifySyncOutput+0x94a>
		case 103	:
		case 104	:
		case 105	:
		case 106	:
			VPP_ApplyPresetToSync( VPP27	);
 8006444:	201a      	movs	r0, #26
 8006446:	f7fe fea5 	bl	8005194 <VPP_ApplyPresetToSync>
			break;
 800644a:	e11c      	b.n	8006686 <VPP_ModifySyncOutput+0x94a>
		case 107	:
		case 108	:
		case 109	:
		case 110	:
			VPP_ApplyPresetToSync( VPP28	);
 800644c:	201b      	movs	r0, #27
 800644e:	f7fe fea1 	bl	8005194 <VPP_ApplyPresetToSync>
			break;
 8006452:	e118      	b.n	8006686 <VPP_ModifySyncOutput+0x94a>
		case 111	:
		case 112	:
		case 113	:
		case 114	:
			VPP_ApplyPresetToSync( VPP29	);
 8006454:	201c      	movs	r0, #28
 8006456:	f7fe fe9d 	bl	8005194 <VPP_ApplyPresetToSync>
			break;
 800645a:	e114      	b.n	8006686 <VPP_ModifySyncOutput+0x94a>
		case 115	:
		case 116	:
		case 117	:
		case 118	:
			VPP_ApplyPresetToSync( VPP30	);
 800645c:	201d      	movs	r0, #29
 800645e:	f7fe fe99 	bl	8005194 <VPP_ApplyPresetToSync>
			break;
 8006462:	e110      	b.n	8006686 <VPP_ModifySyncOutput+0x94a>
		case 119	:
		case 120	:
		case 121	:
		case 122	:
			VPP_ApplyPresetToSync( VPP31	);
 8006464:	201e      	movs	r0, #30
 8006466:	f7fe fe95 	bl	8005194 <VPP_ApplyPresetToSync>
			break;
 800646a:	e10c      	b.n	8006686 <VPP_ModifySyncOutput+0x94a>
		case 123	:
		case 124	:
		case 125	:
		case 126	:
			VPP_ApplyPresetToSync( VPP32	);
 800646c:	201f      	movs	r0, #31
 800646e:	f7fe fe91 	bl	8005194 <VPP_ApplyPresetToSync>
			break;
 8006472:	e108      	b.n	8006686 <VPP_ModifySyncOutput+0x94a>
		case 127	:
		case 128	:
		case 129	:
		case 130	:
			VPP_ApplyPresetToSync( VPP33	);
 8006474:	2020      	movs	r0, #32
 8006476:	f7fe fe8d 	bl	8005194 <VPP_ApplyPresetToSync>
			break;
 800647a:	e104      	b.n	8006686 <VPP_ModifySyncOutput+0x94a>
		case 131	:
		case 132	:
		case 133	:
		case 134	:
			VPP_ApplyPresetToSync( VPP34	);
 800647c:	2021      	movs	r0, #33	; 0x21
 800647e:	f7fe fe89 	bl	8005194 <VPP_ApplyPresetToSync>
			break;
 8006482:	e100      	b.n	8006686 <VPP_ModifySyncOutput+0x94a>
		case 135	:
		case 136	:
		case 137	:
		case 138	:
			VPP_ApplyPresetToSync( VPP35	);
 8006484:	2022      	movs	r0, #34	; 0x22
 8006486:	f7fe fe85 	bl	8005194 <VPP_ApplyPresetToSync>
			break;
 800648a:	e0fc      	b.n	8006686 <VPP_ModifySyncOutput+0x94a>
		case 139	:
		case 140	:
		case 141	:
		case 142	:
			VPP_ApplyPresetToSync( VPP36	);
 800648c:	2023      	movs	r0, #35	; 0x23
 800648e:	f7fe fe81 	bl	8005194 <VPP_ApplyPresetToSync>
			break;
 8006492:	e0f8      	b.n	8006686 <VPP_ModifySyncOutput+0x94a>
		case 143	:
		case 144	:
		case 145	:
		case 146	:
			VPP_ApplyPresetToSync( VPP37	);
 8006494:	2024      	movs	r0, #36	; 0x24
 8006496:	f7fe fe7d 	bl	8005194 <VPP_ApplyPresetToSync>
			break;
 800649a:	e0f4      	b.n	8006686 <VPP_ModifySyncOutput+0x94a>
		case 147	:
		case 148	:
		case 149	:
		case 150	:
			VPP_ApplyPresetToSync( VPP38	);
 800649c:	2025      	movs	r0, #37	; 0x25
 800649e:	f7fe fe79 	bl	8005194 <VPP_ApplyPresetToSync>
			break;
 80064a2:	e0f0      	b.n	8006686 <VPP_ModifySyncOutput+0x94a>
		case 151	:
		case 152	:
		case 153	:
		case 154	:
			VPP_ApplyPresetToSync( VPP39	);
 80064a4:	2026      	movs	r0, #38	; 0x26
 80064a6:	f7fe fe75 	bl	8005194 <VPP_ApplyPresetToSync>
			break;
 80064aa:	e0ec      	b.n	8006686 <VPP_ModifySyncOutput+0x94a>
		case 155	:
		case 156	:
		case 157	:
		case 158	:
			VPP_ApplyPresetToSync( VPP40	);
 80064ac:	2027      	movs	r0, #39	; 0x27
 80064ae:	f7fe fe71 	bl	8005194 <VPP_ApplyPresetToSync>
			break;
 80064b2:	e0e8      	b.n	8006686 <VPP_ModifySyncOutput+0x94a>
		case 159	:
		case 160	:
		case 161	:
		case 162	:
			VPP_ApplyPresetToSync( VPP41	);
 80064b4:	2028      	movs	r0, #40	; 0x28
 80064b6:	f7fe fe6d 	bl	8005194 <VPP_ApplyPresetToSync>
			break;
 80064ba:	e0e4      	b.n	8006686 <VPP_ModifySyncOutput+0x94a>
		case 163	:
		case 164	:
		case 165	:
		case 166	:
			VPP_ApplyPresetToSync( VPP42	);
 80064bc:	2029      	movs	r0, #41	; 0x29
 80064be:	f7fe fe69 	bl	8005194 <VPP_ApplyPresetToSync>
			break;
 80064c2:	e0e0      	b.n	8006686 <VPP_ModifySyncOutput+0x94a>
		case 167	:
		case 168	:
		case 169	:
		case 170	:
			VPP_ApplyPresetToSync( VPP43	);
 80064c4:	202a      	movs	r0, #42	; 0x2a
 80064c6:	f7fe fe65 	bl	8005194 <VPP_ApplyPresetToSync>
			break;
 80064ca:	e0dc      	b.n	8006686 <VPP_ModifySyncOutput+0x94a>
		case 171	:
		case 172	:
		case 173	:
		case 174	:
			VPP_ApplyPresetToSync( VPP44	);
 80064cc:	202b      	movs	r0, #43	; 0x2b
 80064ce:	f7fe fe61 	bl	8005194 <VPP_ApplyPresetToSync>
			break;
 80064d2:	e0d8      	b.n	8006686 <VPP_ModifySyncOutput+0x94a>
		case 175	:
		case 176	:
		case 177	:
		case 178	:
			VPP_ApplyPresetToSync( VPP45	);
 80064d4:	202c      	movs	r0, #44	; 0x2c
 80064d6:	f7fe fe5d 	bl	8005194 <VPP_ApplyPresetToSync>
			break;
 80064da:	e0d4      	b.n	8006686 <VPP_ModifySyncOutput+0x94a>
		case 179	:
		case 180	:
		case 181	:
		case 182	:
			VPP_ApplyPresetToSync( VPP46	);
 80064dc:	202d      	movs	r0, #45	; 0x2d
 80064de:	f7fe fe59 	bl	8005194 <VPP_ApplyPresetToSync>
			break;
 80064e2:	e0d0      	b.n	8006686 <VPP_ModifySyncOutput+0x94a>
		case 183	:
		case 184	:
		case 185	:
		case 186	:
			VPP_ApplyPresetToSync( VPP47	);
 80064e4:	202e      	movs	r0, #46	; 0x2e
 80064e6:	f7fe fe55 	bl	8005194 <VPP_ApplyPresetToSync>
			break;
 80064ea:	e0cc      	b.n	8006686 <VPP_ModifySyncOutput+0x94a>
		case 187	:
		case 188	:
		case 189	:
		case 190	:
			VPP_ApplyPresetToSync( VPP48	);
 80064ec:	202f      	movs	r0, #47	; 0x2f
 80064ee:	f7fe fe51 	bl	8005194 <VPP_ApplyPresetToSync>
			break;
 80064f2:	e0c8      	b.n	8006686 <VPP_ModifySyncOutput+0x94a>
		case 191	:
		case 192	:
		case 193	:
		case 194	:
			VPP_ApplyPresetToSync( VPP49	);
 80064f4:	2030      	movs	r0, #48	; 0x30
 80064f6:	f7fe fe4d 	bl	8005194 <VPP_ApplyPresetToSync>
			break;
 80064fa:	e0c4      	b.n	8006686 <VPP_ModifySyncOutput+0x94a>
		case 195	:
		case 196	:
		case 197	:
		case 198	:
			VPP_ApplyPresetToSync( VPP50	);
 80064fc:	2031      	movs	r0, #49	; 0x31
 80064fe:	f7fe fe49 	bl	8005194 <VPP_ApplyPresetToSync>
			break;
 8006502:	e0c0      	b.n	8006686 <VPP_ModifySyncOutput+0x94a>
		case 199	:
		case 200	:
		case 201	:
		case 202	:
			VPP_ApplyPresetToSync( VPP51	);
 8006504:	2032      	movs	r0, #50	; 0x32
 8006506:	f7fe fe45 	bl	8005194 <VPP_ApplyPresetToSync>
			break;
 800650a:	e0bc      	b.n	8006686 <VPP_ModifySyncOutput+0x94a>
		case 203	:
		case 204	:
		case 205	:
		case 206	:
			VPP_ApplyPresetToSync( VPP52	);
 800650c:	2033      	movs	r0, #51	; 0x33
 800650e:	f7fe fe41 	bl	8005194 <VPP_ApplyPresetToSync>
			break;
 8006512:	e0b8      	b.n	8006686 <VPP_ModifySyncOutput+0x94a>
		case 207	:
		case 208	:
		case 209	:
		case 210	:
			VPP_ApplyPresetToSync( VPP53	);
 8006514:	2034      	movs	r0, #52	; 0x34
 8006516:	f7fe fe3d 	bl	8005194 <VPP_ApplyPresetToSync>
			break;
 800651a:	e0b4      	b.n	8006686 <VPP_ModifySyncOutput+0x94a>
		case 211	:
		case 212	:
		case 213	:
		case 214	:
			VPP_ApplyPresetToSync( VPP54	);
 800651c:	2035      	movs	r0, #53	; 0x35
 800651e:	f7fe fe39 	bl	8005194 <VPP_ApplyPresetToSync>
			break;
 8006522:	e0b0      	b.n	8006686 <VPP_ModifySyncOutput+0x94a>
		case 215	:
		case 216	:
		case 217	:
		case 218	:
			VPP_ApplyPresetToSync( VPP55	);
 8006524:	2036      	movs	r0, #54	; 0x36
 8006526:	f7fe fe35 	bl	8005194 <VPP_ApplyPresetToSync>
			break;
 800652a:	e0ac      	b.n	8006686 <VPP_ModifySyncOutput+0x94a>
		case 219	:
		case 220	:
		case 221	:
		case 222	:
			VPP_ApplyPresetToSync( VPP56	);
 800652c:	2037      	movs	r0, #55	; 0x37
 800652e:	f7fe fe31 	bl	8005194 <VPP_ApplyPresetToSync>
			break;
 8006532:	e0a8      	b.n	8006686 <VPP_ModifySyncOutput+0x94a>
		case 223	:
		case 224	:
		case 225	:
		case 226	:
			VPP_ApplyPresetToSync( VPP57	);
 8006534:	2038      	movs	r0, #56	; 0x38
 8006536:	f7fe fe2d 	bl	8005194 <VPP_ApplyPresetToSync>
			break;
 800653a:	e0a4      	b.n	8006686 <VPP_ModifySyncOutput+0x94a>
		case 227	:
		case 228	:
		case 229	:
		case 230	:
			VPP_ApplyPresetToSync( VPP58	);
 800653c:	2039      	movs	r0, #57	; 0x39
 800653e:	f7fe fe29 	bl	8005194 <VPP_ApplyPresetToSync>
			break;
 8006542:	e0a0      	b.n	8006686 <VPP_ModifySyncOutput+0x94a>
		case 231	:
		case 232	:
		case 233	:
		case 234	:
			VPP_ApplyPresetToSync( VPP59	);
 8006544:	203a      	movs	r0, #58	; 0x3a
 8006546:	f7fe fe25 	bl	8005194 <VPP_ApplyPresetToSync>
			break;
 800654a:	e09c      	b.n	8006686 <VPP_ModifySyncOutput+0x94a>
		case 235	:
		case 236	:
		case 237	:
		case 238	:
			VPP_ApplyPresetToSync( VPP60	);
 800654c:	203b      	movs	r0, #59	; 0x3b
 800654e:	f7fe fe21 	bl	8005194 <VPP_ApplyPresetToSync>
			break;
 8006552:	e098      	b.n	8006686 <VPP_ModifySyncOutput+0x94a>
		case 239	:
		case 240	:
		case 241	:
		case 242	:
			VPP_ApplyPresetToSync( VPP61	);
 8006554:	203c      	movs	r0, #60	; 0x3c
 8006556:	f7fe fe1d 	bl	8005194 <VPP_ApplyPresetToSync>
			break;
 800655a:	e094      	b.n	8006686 <VPP_ModifySyncOutput+0x94a>
		case 243	:
		case 244	:
		case 245	:
		case 246	:
			VPP_ApplyPresetToSync( VPP62	);
 800655c:	203d      	movs	r0, #61	; 0x3d
 800655e:	f7fe fe19 	bl	8005194 <VPP_ApplyPresetToSync>
			break;
 8006562:	e090      	b.n	8006686 <VPP_ModifySyncOutput+0x94a>
		case 247	:
		case 248	:
		case 249	:
		case 250	:
			VPP_ApplyPresetToSync( VPP63	);
 8006564:	203e      	movs	r0, #62	; 0x3e
 8006566:	f7fe fe15 	bl	8005194 <VPP_ApplyPresetToSync>
			break;
 800656a:	e08c      	b.n	8006686 <VPP_ModifySyncOutput+0x94a>
		case 251	:
		case 252	:
		case 253	:
		case 254	:
			VPP_ApplyPresetToSync( VPP64	);
 800656c:	203f      	movs	r0, #63	; 0x3f
 800656e:	f7fe fe11 	bl	8005194 <VPP_ApplyPresetToSync>
			break;
 8006572:	e088      	b.n	8006686 <VPP_ModifySyncOutput+0x94a>
		case 255	:
		case 256	:
		case 257	:
		case 258	:
			VPP_ApplyPresetToSync( VPP65	);
 8006574:	2040      	movs	r0, #64	; 0x40
 8006576:	f7fe fe0d 	bl	8005194 <VPP_ApplyPresetToSync>
			break;
 800657a:	e084      	b.n	8006686 <VPP_ModifySyncOutput+0x94a>
		case 259	:
		case 260	:
		case 261	:
		case 262	:
			VPP_ApplyPresetToSync( VPP66	);
 800657c:	2041      	movs	r0, #65	; 0x41
 800657e:	f7fe fe09 	bl	8005194 <VPP_ApplyPresetToSync>
			break;
 8006582:	e080      	b.n	8006686 <VPP_ModifySyncOutput+0x94a>
		case 263	:
		case 264	:
		case 265	:
		case 266	:
			VPP_ApplyPresetToSync( VPP67	);
 8006584:	2042      	movs	r0, #66	; 0x42
 8006586:	f7fe fe05 	bl	8005194 <VPP_ApplyPresetToSync>
			break;
 800658a:	e07c      	b.n	8006686 <VPP_ModifySyncOutput+0x94a>
		case 267	:
		case 268	:
		case 269	:
		case 270	:
			VPP_ApplyPresetToSync( VPP68	);
 800658c:	2043      	movs	r0, #67	; 0x43
 800658e:	f7fe fe01 	bl	8005194 <VPP_ApplyPresetToSync>
			break;
 8006592:	e078      	b.n	8006686 <VPP_ModifySyncOutput+0x94a>
		case 271	:
		case 272	:
		case 273	:
		case 274	:
			VPP_ApplyPresetToSync( VPP69	);
 8006594:	2044      	movs	r0, #68	; 0x44
 8006596:	f7fe fdfd 	bl	8005194 <VPP_ApplyPresetToSync>
			break;
 800659a:	e074      	b.n	8006686 <VPP_ModifySyncOutput+0x94a>
		case 275	:
		case 276	:
		case 277	:
		case 278	:
			VPP_ApplyPresetToSync( VPP70	);
 800659c:	2045      	movs	r0, #69	; 0x45
 800659e:	f7fe fdf9 	bl	8005194 <VPP_ApplyPresetToSync>
			break;
 80065a2:	e070      	b.n	8006686 <VPP_ModifySyncOutput+0x94a>
		case 279	:
		case 280	:
		case 281	:
		case 282	:
			VPP_ApplyPresetToSync( VPP71	);
 80065a4:	2046      	movs	r0, #70	; 0x46
 80065a6:	f7fe fdf5 	bl	8005194 <VPP_ApplyPresetToSync>
			break;
 80065aa:	e06c      	b.n	8006686 <VPP_ModifySyncOutput+0x94a>
		case 283	:
		case 284	:
		case 285	:
		case 286	:
			VPP_ApplyPresetToSync( VPP72	);
 80065ac:	2047      	movs	r0, #71	; 0x47
 80065ae:	f7fe fdf1 	bl	8005194 <VPP_ApplyPresetToSync>
			break;
 80065b2:	e068      	b.n	8006686 <VPP_ModifySyncOutput+0x94a>
		case 287	:
		case 288	:
		case 289	:
		case 290	:
			VPP_ApplyPresetToSync( VPP73	);
 80065b4:	2048      	movs	r0, #72	; 0x48
 80065b6:	f7fe fded 	bl	8005194 <VPP_ApplyPresetToSync>
			break;
 80065ba:	e064      	b.n	8006686 <VPP_ModifySyncOutput+0x94a>
		case 291	:
		case 292	:
		case 293	:
		case 294	:
			VPP_ApplyPresetToSync( VPP74	);
 80065bc:	2049      	movs	r0, #73	; 0x49
 80065be:	f7fe fde9 	bl	8005194 <VPP_ApplyPresetToSync>
			break;
 80065c2:	e060      	b.n	8006686 <VPP_ModifySyncOutput+0x94a>
		case 295	:
		case 296	:
		case 297	:
		case 298	:
			VPP_ApplyPresetToSync( VPP75	);
 80065c4:	204a      	movs	r0, #74	; 0x4a
 80065c6:	f7fe fde5 	bl	8005194 <VPP_ApplyPresetToSync>
			break;
 80065ca:	e05c      	b.n	8006686 <VPP_ModifySyncOutput+0x94a>
		case 299	:
		case 300	:
		case 301	:
		case 302	:
			VPP_ApplyPresetToSync( VPP76	);
 80065cc:	204b      	movs	r0, #75	; 0x4b
 80065ce:	f7fe fde1 	bl	8005194 <VPP_ApplyPresetToSync>
			break;
 80065d2:	e058      	b.n	8006686 <VPP_ModifySyncOutput+0x94a>
		case 303	:
		case 304	:
		case 305	:
		case 306	:
			VPP_ApplyPresetToSync( VPP77	);
 80065d4:	204c      	movs	r0, #76	; 0x4c
 80065d6:	f7fe fddd 	bl	8005194 <VPP_ApplyPresetToSync>
			break;
 80065da:	e054      	b.n	8006686 <VPP_ModifySyncOutput+0x94a>
		case 307	:
		case 308	:
		case 309	:
		case 310	:
			VPP_ApplyPresetToSync( VPP78	);
 80065dc:	204d      	movs	r0, #77	; 0x4d
 80065de:	f7fe fdd9 	bl	8005194 <VPP_ApplyPresetToSync>
			break;
 80065e2:	e050      	b.n	8006686 <VPP_ModifySyncOutput+0x94a>
		case 311	:
		case 312	:
		case 313	:
		case 314	:
			VPP_ApplyPresetToSync( VPP79	);
 80065e4:	204e      	movs	r0, #78	; 0x4e
 80065e6:	f7fe fdd5 	bl	8005194 <VPP_ApplyPresetToSync>
			break;
 80065ea:	e04c      	b.n	8006686 <VPP_ModifySyncOutput+0x94a>
		case 315	:
		case 316	:
		case 317	:
		case 318	:
			VPP_ApplyPresetToSync( VPP80	);
 80065ec:	204f      	movs	r0, #79	; 0x4f
 80065ee:	f7fe fdd1 	bl	8005194 <VPP_ApplyPresetToSync>
			break;
 80065f2:	e048      	b.n	8006686 <VPP_ModifySyncOutput+0x94a>
		case 319	:
		case 320	:
		case 321	:
		case 322	:
			VPP_ApplyPresetToSync( VPP81	);
 80065f4:	2050      	movs	r0, #80	; 0x50
 80065f6:	f7fe fdcd 	bl	8005194 <VPP_ApplyPresetToSync>
			break;
 80065fa:	e044      	b.n	8006686 <VPP_ModifySyncOutput+0x94a>
		case 323	:
		case 324	:
		case 325	:
		case 326	:
			VPP_ApplyPresetToSync( VPP82	);
 80065fc:	2051      	movs	r0, #81	; 0x51
 80065fe:	f7fe fdc9 	bl	8005194 <VPP_ApplyPresetToSync>
			break;
 8006602:	e040      	b.n	8006686 <VPP_ModifySyncOutput+0x94a>
		case 327	:
		case 328	:
		case 329	:
		case 330	:
			VPP_ApplyPresetToSync( VPP83	);
 8006604:	2052      	movs	r0, #82	; 0x52
 8006606:	f7fe fdc5 	bl	8005194 <VPP_ApplyPresetToSync>
			break;
 800660a:	e03c      	b.n	8006686 <VPP_ModifySyncOutput+0x94a>
		case 331	:
		case 332	:
		case 333	:
		case 334	:
			VPP_ApplyPresetToSync( VPP84	);
 800660c:	2053      	movs	r0, #83	; 0x53
 800660e:	f7fe fdc1 	bl	8005194 <VPP_ApplyPresetToSync>
			break;
 8006612:	e038      	b.n	8006686 <VPP_ModifySyncOutput+0x94a>
		case 335	:
		case 336	:
		case 337	:
		case 338	:
			VPP_ApplyPresetToSync( VPP85	);
 8006614:	2054      	movs	r0, #84	; 0x54
 8006616:	f7fe fdbd 	bl	8005194 <VPP_ApplyPresetToSync>
			break;
 800661a:	e034      	b.n	8006686 <VPP_ModifySyncOutput+0x94a>
		case 339	:
		case 340	:
		case 341	:
		case 342	:
			VPP_ApplyPresetToSync( VPP86	);
 800661c:	2055      	movs	r0, #85	; 0x55
 800661e:	f7fe fdb9 	bl	8005194 <VPP_ApplyPresetToSync>
			break;
 8006622:	e030      	b.n	8006686 <VPP_ModifySyncOutput+0x94a>
		case 343	:
		case 344	:
		case 345	:
		case 346	:
			VPP_ApplyPresetToSync( VPP87	);
 8006624:	2056      	movs	r0, #86	; 0x56
 8006626:	f7fe fdb5 	bl	8005194 <VPP_ApplyPresetToSync>
			break;
 800662a:	e02c      	b.n	8006686 <VPP_ModifySyncOutput+0x94a>
		case 347	:
		case 348	:
		case 349	:
		case 350	:
			VPP_ApplyPresetToSync( VPP88	);
 800662c:	2057      	movs	r0, #87	; 0x57
 800662e:	f7fe fdb1 	bl	8005194 <VPP_ApplyPresetToSync>
			break;
 8006632:	e028      	b.n	8006686 <VPP_ModifySyncOutput+0x94a>
		case 351	:
		case 352	:
		case 353	:
		case 354	:
			VPP_ApplyPresetToSync( VPP89	);
 8006634:	2058      	movs	r0, #88	; 0x58
 8006636:	f7fe fdad 	bl	8005194 <VPP_ApplyPresetToSync>
			break;
 800663a:	e024      	b.n	8006686 <VPP_ModifySyncOutput+0x94a>
		case 355	:
		case 356	:
		case 357	:
		case 358	:
			VPP_ApplyPresetToSync( VPP90	);
 800663c:	2059      	movs	r0, #89	; 0x59
 800663e:	f7fe fda9 	bl	8005194 <VPP_ApplyPresetToSync>
			break;
 8006642:	e020      	b.n	8006686 <VPP_ModifySyncOutput+0x94a>
		case 359	:
		case 360	:
		case 361	:
		case 362	:
			VPP_ApplyPresetToSync( VPP91	);
 8006644:	205a      	movs	r0, #90	; 0x5a
 8006646:	f7fe fda5 	bl	8005194 <VPP_ApplyPresetToSync>
			break;
 800664a:	e01c      	b.n	8006686 <VPP_ModifySyncOutput+0x94a>
		case 363	:
		case 364	:
		case 365	:
		case 366	:
			VPP_ApplyPresetToSync( VPP92	);
 800664c:	205b      	movs	r0, #91	; 0x5b
 800664e:	f7fe fda1 	bl	8005194 <VPP_ApplyPresetToSync>
			break;
 8006652:	e018      	b.n	8006686 <VPP_ModifySyncOutput+0x94a>
		case 367	:
		case 368	:
		case 369	:
		case 370	:
			VPP_ApplyPresetToSync( VPP93	);
 8006654:	205c      	movs	r0, #92	; 0x5c
 8006656:	f7fe fd9d 	bl	8005194 <VPP_ApplyPresetToSync>
			break;
 800665a:	e014      	b.n	8006686 <VPP_ModifySyncOutput+0x94a>
		case 371	:
		case 372	:
		case 373	:
		case 374	:
			VPP_ApplyPresetToSync( VPP94	);
 800665c:	205d      	movs	r0, #93	; 0x5d
 800665e:	f7fe fd99 	bl	8005194 <VPP_ApplyPresetToSync>
			break;
 8006662:	e010      	b.n	8006686 <VPP_ModifySyncOutput+0x94a>
		case 375	:
		case 376	:
		case 377	:
		case 378	:
			VPP_ApplyPresetToSync( VPP95	);
 8006664:	205e      	movs	r0, #94	; 0x5e
 8006666:	f7fe fd95 	bl	8005194 <VPP_ApplyPresetToSync>
			break;
 800666a:	e00c      	b.n	8006686 <VPP_ModifySyncOutput+0x94a>
		case 379	:
		case 380	:
		case 381	:
		case 382	:
			VPP_ApplyPresetToSync( VPP96	);
 800666c:	205f      	movs	r0, #95	; 0x5f
 800666e:	f7fe fd91 	bl	8005194 <VPP_ApplyPresetToSync>
			break;
 8006672:	e008      	b.n	8006686 <VPP_ModifySyncOutput+0x94a>
		case 383	:
		case 384	:
		case 385	:
		case 386	:
			VPP_ApplyPresetToSync( VPP97	);
 8006674:	2060      	movs	r0, #96	; 0x60
 8006676:	f7fe fd8d 	bl	8005194 <VPP_ApplyPresetToSync>
			break;
 800667a:	e004      	b.n	8006686 <VPP_ModifySyncOutput+0x94a>
		case 387	:
		case 388	:
		case 389	:
		case 390	:
			VPP_ApplyPresetToSync( VPP98	);
 800667c:	2061      	movs	r0, #97	; 0x61
 800667e:	f7fe fd89 	bl	8005194 <VPP_ApplyPresetToSync>
			break;
 8006682:	e000      	b.n	8006686 <VPP_ModifySyncOutput+0x94a>

		default:
			break;
 8006684:	bf00      	nop
	}
}
 8006686:	bf00      	nop
 8006688:	3708      	adds	r7, #8
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
 800668e:	bf00      	nop

08006690 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b08c      	sub	sp, #48	; 0x30
 8006694:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 8006696:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800669a:	2200      	movs	r2, #0
 800669c:	601a      	str	r2, [r3, #0]
 800669e:	605a      	str	r2, [r3, #4]
 80066a0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80066a2:	1d3b      	adds	r3, r7, #4
 80066a4:	2220      	movs	r2, #32
 80066a6:	2100      	movs	r1, #0
 80066a8:	4618      	mov	r0, r3
 80066aa:	f007 fd63 	bl	800e174 <memset>

  /** Common config 
  */
  hadc1.Instance = ADC1;
 80066ae:	4b32      	ldr	r3, [pc, #200]	; (8006778 <MX_ADC1_Init+0xe8>)
 80066b0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80066b4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80066b6:	4b30      	ldr	r3, [pc, #192]	; (8006778 <MX_ADC1_Init+0xe8>)
 80066b8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80066bc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80066be:	4b2e      	ldr	r3, [pc, #184]	; (8006778 <MX_ADC1_Init+0xe8>)
 80066c0:	2200      	movs	r2, #0
 80066c2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80066c4:	4b2c      	ldr	r3, [pc, #176]	; (8006778 <MX_ADC1_Init+0xe8>)
 80066c6:	2200      	movs	r2, #0
 80066c8:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80066ca:	4b2b      	ldr	r3, [pc, #172]	; (8006778 <MX_ADC1_Init+0xe8>)
 80066cc:	2200      	movs	r2, #0
 80066ce:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80066d0:	4b29      	ldr	r3, [pc, #164]	; (8006778 <MX_ADC1_Init+0xe8>)
 80066d2:	2200      	movs	r2, #0
 80066d4:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80066d6:	4b28      	ldr	r3, [pc, #160]	; (8006778 <MX_ADC1_Init+0xe8>)
 80066d8:	2204      	movs	r2, #4
 80066da:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80066dc:	4b26      	ldr	r3, [pc, #152]	; (8006778 <MX_ADC1_Init+0xe8>)
 80066de:	2200      	movs	r2, #0
 80066e0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80066e2:	4b25      	ldr	r3, [pc, #148]	; (8006778 <MX_ADC1_Init+0xe8>)
 80066e4:	2201      	movs	r2, #1
 80066e6:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80066e8:	4b23      	ldr	r3, [pc, #140]	; (8006778 <MX_ADC1_Init+0xe8>)
 80066ea:	2201      	movs	r2, #1
 80066ec:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80066ee:	4b22      	ldr	r3, [pc, #136]	; (8006778 <MX_ADC1_Init+0xe8>)
 80066f0:	2200      	movs	r2, #0
 80066f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80066f6:	4b20      	ldr	r3, [pc, #128]	; (8006778 <MX_ADC1_Init+0xe8>)
 80066f8:	2200      	movs	r2, #0
 80066fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80066fc:	4b1e      	ldr	r3, [pc, #120]	; (8006778 <MX_ADC1_Init+0xe8>)
 80066fe:	2200      	movs	r2, #0
 8006700:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8006702:	4b1d      	ldr	r3, [pc, #116]	; (8006778 <MX_ADC1_Init+0xe8>)
 8006704:	2201      	movs	r2, #1
 8006706:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800670a:	4b1b      	ldr	r3, [pc, #108]	; (8006778 <MX_ADC1_Init+0xe8>)
 800670c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006710:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8006712:	4b19      	ldr	r3, [pc, #100]	; (8006778 <MX_ADC1_Init+0xe8>)
 8006714:	2200      	movs	r2, #0
 8006716:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800671a:	4817      	ldr	r0, [pc, #92]	; (8006778 <MX_ADC1_Init+0xe8>)
 800671c:	f001 fee2 	bl	80084e4 <HAL_ADC_Init>
 8006720:	4603      	mov	r3, r0
 8006722:	2b00      	cmp	r3, #0
 8006724:	d001      	beq.n	800672a <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 8006726:	f000 feaf 	bl	8007488 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800672a:	2300      	movs	r3, #0
 800672c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800672e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006732:	4619      	mov	r1, r3
 8006734:	4810      	ldr	r0, [pc, #64]	; (8006778 <MX_ADC1_Init+0xe8>)
 8006736:	f002 fc6b 	bl	8009010 <HAL_ADCEx_MultiModeConfigChannel>
 800673a:	4603      	mov	r3, r0
 800673c:	2b00      	cmp	r3, #0
 800673e:	d001      	beq.n	8006744 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8006740:	f000 fea2 	bl	8007488 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8006744:	4b0d      	ldr	r3, [pc, #52]	; (800677c <MX_ADC1_Init+0xec>)
 8006746:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8006748:	2306      	movs	r3, #6
 800674a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800674c:	2300      	movs	r3, #0
 800674e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8006750:	237f      	movs	r3, #127	; 0x7f
 8006752:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8006754:	2304      	movs	r3, #4
 8006756:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8006758:	2300      	movs	r3, #0
 800675a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800675c:	1d3b      	adds	r3, r7, #4
 800675e:	4619      	mov	r1, r3
 8006760:	4805      	ldr	r0, [pc, #20]	; (8006778 <MX_ADC1_Init+0xe8>)
 8006762:	f002 f87f 	bl	8008864 <HAL_ADC_ConfigChannel>
 8006766:	4603      	mov	r3, r0
 8006768:	2b00      	cmp	r3, #0
 800676a:	d001      	beq.n	8006770 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 800676c:	f000 fe8c 	bl	8007488 <Error_Handler>
  }

}
 8006770:	bf00      	nop
 8006772:	3730      	adds	r7, #48	; 0x30
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}
 8006778:	2000250c 	.word	0x2000250c
 800677c:	0c900008 	.word	0x0c900008

08006780 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b08a      	sub	sp, #40	; 0x28
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006788:	f107 0314 	add.w	r3, r7, #20
 800678c:	2200      	movs	r2, #0
 800678e:	601a      	str	r2, [r3, #0]
 8006790:	605a      	str	r2, [r3, #4]
 8006792:	609a      	str	r2, [r3, #8]
 8006794:	60da      	str	r2, [r3, #12]
 8006796:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80067a0:	d14f      	bne.n	8006842 <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80067a2:	4b2a      	ldr	r3, [pc, #168]	; (800684c <HAL_ADC_MspInit+0xcc>)
 80067a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067a6:	4a29      	ldr	r2, [pc, #164]	; (800684c <HAL_ADC_MspInit+0xcc>)
 80067a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80067ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80067ae:	4b27      	ldr	r3, [pc, #156]	; (800684c <HAL_ADC_MspInit+0xcc>)
 80067b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80067b6:	613b      	str	r3, [r7, #16]
 80067b8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80067ba:	4b24      	ldr	r3, [pc, #144]	; (800684c <HAL_ADC_MspInit+0xcc>)
 80067bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067be:	4a23      	ldr	r2, [pc, #140]	; (800684c <HAL_ADC_MspInit+0xcc>)
 80067c0:	f043 0301 	orr.w	r3, r3, #1
 80067c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80067c6:	4b21      	ldr	r3, [pc, #132]	; (800684c <HAL_ADC_MspInit+0xcc>)
 80067c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067ca:	f003 0301 	and.w	r3, r3, #1
 80067ce:	60fb      	str	r3, [r7, #12]
 80067d0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA2     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80067d2:	2304      	movs	r3, #4
 80067d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80067d6:	2303      	movs	r3, #3
 80067d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067da:	2300      	movs	r3, #0
 80067dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80067de:	f107 0314 	add.w	r3, r7, #20
 80067e2:	4619      	mov	r1, r3
 80067e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80067e8:	f003 fff4 	bl	800a7d4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80067ec:	4b18      	ldr	r3, [pc, #96]	; (8006850 <HAL_ADC_MspInit+0xd0>)
 80067ee:	4a19      	ldr	r2, [pc, #100]	; (8006854 <HAL_ADC_MspInit+0xd4>)
 80067f0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80067f2:	4b17      	ldr	r3, [pc, #92]	; (8006850 <HAL_ADC_MspInit+0xd0>)
 80067f4:	2205      	movs	r2, #5
 80067f6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80067f8:	4b15      	ldr	r3, [pc, #84]	; (8006850 <HAL_ADC_MspInit+0xd0>)
 80067fa:	2200      	movs	r2, #0
 80067fc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80067fe:	4b14      	ldr	r3, [pc, #80]	; (8006850 <HAL_ADC_MspInit+0xd0>)
 8006800:	2200      	movs	r2, #0
 8006802:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8006804:	4b12      	ldr	r3, [pc, #72]	; (8006850 <HAL_ADC_MspInit+0xd0>)
 8006806:	2280      	movs	r2, #128	; 0x80
 8006808:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800680a:	4b11      	ldr	r3, [pc, #68]	; (8006850 <HAL_ADC_MspInit+0xd0>)
 800680c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006810:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006812:	4b0f      	ldr	r3, [pc, #60]	; (8006850 <HAL_ADC_MspInit+0xd0>)
 8006814:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006818:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800681a:	4b0d      	ldr	r3, [pc, #52]	; (8006850 <HAL_ADC_MspInit+0xd0>)
 800681c:	2220      	movs	r2, #32
 800681e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8006820:	4b0b      	ldr	r3, [pc, #44]	; (8006850 <HAL_ADC_MspInit+0xd0>)
 8006822:	2200      	movs	r2, #0
 8006824:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8006826:	480a      	ldr	r0, [pc, #40]	; (8006850 <HAL_ADC_MspInit+0xd0>)
 8006828:	f003 fd08 	bl	800a23c <HAL_DMA_Init>
 800682c:	4603      	mov	r3, r0
 800682e:	2b00      	cmp	r3, #0
 8006830:	d001      	beq.n	8006836 <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 8006832:	f000 fe29 	bl	8007488 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	4a05      	ldr	r2, [pc, #20]	; (8006850 <HAL_ADC_MspInit+0xd0>)
 800683a:	655a      	str	r2, [r3, #84]	; 0x54
 800683c:	4a04      	ldr	r2, [pc, #16]	; (8006850 <HAL_ADC_MspInit+0xd0>)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8006842:	bf00      	nop
 8006844:	3728      	adds	r7, #40	; 0x28
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}
 800684a:	bf00      	nop
 800684c:	40021000 	.word	0x40021000
 8006850:	20002578 	.word	0x20002578
 8006854:	40020008 	.word	0x40020008

08006858 <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	af00      	add	r7, sp, #0

  hcomp1.Instance = COMP1;
 800685c:	4b0f      	ldr	r3, [pc, #60]	; (800689c <MX_COMP1_Init+0x44>)
 800685e:	4a10      	ldr	r2, [pc, #64]	; (80068a0 <MX_COMP1_Init+0x48>)
 8006860:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8006862:	4b0e      	ldr	r3, [pc, #56]	; (800689c <MX_COMP1_Init+0x44>)
 8006864:	2200      	movs	r2, #0
 8006866:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 8006868:	4b0c      	ldr	r3, [pc, #48]	; (800689c <MX_COMP1_Init+0x44>)
 800686a:	4a0e      	ldr	r2, [pc, #56]	; (80068a4 <MX_COMP1_Init+0x4c>)
 800686c:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800686e:	4b0b      	ldr	r3, [pc, #44]	; (800689c <MX_COMP1_Init+0x44>)
 8006870:	2200      	movs	r2, #0
 8006872:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8006874:	4b09      	ldr	r3, [pc, #36]	; (800689c <MX_COMP1_Init+0x44>)
 8006876:	2200      	movs	r2, #0
 8006878:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 800687a:	4b08      	ldr	r3, [pc, #32]	; (800689c <MX_COMP1_Init+0x44>)
 800687c:	2200      	movs	r2, #0
 800687e:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8006880:	4b06      	ldr	r3, [pc, #24]	; (800689c <MX_COMP1_Init+0x44>)
 8006882:	2200      	movs	r2, #0
 8006884:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8006886:	4805      	ldr	r0, [pc, #20]	; (800689c <MX_COMP1_Init+0x44>)
 8006888:	f002 fe16 	bl	80094b8 <HAL_COMP_Init>
 800688c:	4603      	mov	r3, r0
 800688e:	2b00      	cmp	r3, #0
 8006890:	d001      	beq.n	8006896 <MX_COMP1_Init+0x3e>
  {
    Error_Handler();
 8006892:	f000 fdf9 	bl	8007488 <Error_Handler>
  }

}
 8006896:	bf00      	nop
 8006898:	bd80      	pop	{r7, pc}
 800689a:	bf00      	nop
 800689c:	200025d8 	.word	0x200025d8
 80068a0:	40010200 	.word	0x40010200
 80068a4:	00800030 	.word	0x00800030

080068a8 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b088      	sub	sp, #32
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80068b0:	f107 030c 	add.w	r3, r7, #12
 80068b4:	2200      	movs	r2, #0
 80068b6:	601a      	str	r2, [r3, #0]
 80068b8:	605a      	str	r2, [r3, #4]
 80068ba:	609a      	str	r2, [r3, #8]
 80068bc:	60da      	str	r2, [r3, #12]
 80068be:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a0f      	ldr	r2, [pc, #60]	; (8006904 <HAL_COMP_MspInit+0x5c>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d118      	bne.n	80068fc <HAL_COMP_MspInit+0x54>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80068ca:	4b0f      	ldr	r3, [pc, #60]	; (8006908 <HAL_COMP_MspInit+0x60>)
 80068cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068ce:	4a0e      	ldr	r2, [pc, #56]	; (8006908 <HAL_COMP_MspInit+0x60>)
 80068d0:	f043 0301 	orr.w	r3, r3, #1
 80068d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80068d6:	4b0c      	ldr	r3, [pc, #48]	; (8006908 <HAL_COMP_MspInit+0x60>)
 80068d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068da:	f003 0301 	and.w	r3, r3, #1
 80068de:	60bb      	str	r3, [r7, #8]
 80068e0:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration    
    PA1     ------> COMP1_INP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80068e2:	2302      	movs	r3, #2
 80068e4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80068e6:	2303      	movs	r3, #3
 80068e8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068ea:	2300      	movs	r3, #0
 80068ec:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80068ee:	f107 030c 	add.w	r3, r7, #12
 80068f2:	4619      	mov	r1, r3
 80068f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80068f8:	f003 ff6c 	bl	800a7d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 80068fc:	bf00      	nop
 80068fe:	3720      	adds	r7, #32
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}
 8006904:	40010200 	.word	0x40010200
 8006908:	40021000 	.word	0x40021000

0800690c <MX_DAC1_Init>:
DMA_HandleTypeDef hdma_dac1_ch1;
DMA_HandleTypeDef hdma_dac2_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b08c      	sub	sp, #48	; 0x30
 8006910:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8006912:	463b      	mov	r3, r7
 8006914:	2230      	movs	r2, #48	; 0x30
 8006916:	2100      	movs	r1, #0
 8006918:	4618      	mov	r0, r3
 800691a:	f007 fc2b 	bl	800e174 <memset>

  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 800691e:	4b1e      	ldr	r3, [pc, #120]	; (8006998 <MX_DAC1_Init+0x8c>)
 8006920:	4a1e      	ldr	r2, [pc, #120]	; (800699c <MX_DAC1_Init+0x90>)
 8006922:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8006924:	481c      	ldr	r0, [pc, #112]	; (8006998 <MX_DAC1_Init+0x8c>)
 8006926:	f003 f86a 	bl	80099fe <HAL_DAC_Init>
 800692a:	4603      	mov	r3, r0
 800692c:	2b00      	cmp	r3, #0
 800692e:	d001      	beq.n	8006934 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8006930:	f000 fdaa 	bl	8007488 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8006934:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006938:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 800693a:	2300      	movs	r3, #0
 800693c:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 800693e:	2300      	movs	r3, #0
 8006940:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8006942:	2300      	movs	r3, #0
 8006944:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 8006946:	2306      	movs	r3, #6
 8006948:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 800694a:	2300      	movs	r3, #0
 800694c:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800694e:	2300      	movs	r3, #0
 8006950:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8006952:	2301      	movs	r3, #1
 8006954:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8006956:	2300      	movs	r3, #0
 8006958:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800695a:	463b      	mov	r3, r7
 800695c:	2200      	movs	r2, #0
 800695e:	4619      	mov	r1, r3
 8006960:	480d      	ldr	r0, [pc, #52]	; (8006998 <MX_DAC1_Init+0x8c>)
 8006962:	f003 fa35 	bl	8009dd0 <HAL_DAC_ConfigChannel>
 8006966:	4603      	mov	r3, r0
 8006968:	2b00      	cmp	r3, #0
 800696a:	d001      	beq.n	8006970 <MX_DAC1_Init+0x64>
  {
    Error_Handler();
 800696c:	f000 fd8c 	bl	8007488 <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8006970:	2300      	movs	r3, #0
 8006972:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8006974:	2301      	movs	r3, #1
 8006976:	61bb      	str	r3, [r7, #24]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8006978:	463b      	mov	r3, r7
 800697a:	2210      	movs	r2, #16
 800697c:	4619      	mov	r1, r3
 800697e:	4806      	ldr	r0, [pc, #24]	; (8006998 <MX_DAC1_Init+0x8c>)
 8006980:	f003 fa26 	bl	8009dd0 <HAL_DAC_ConfigChannel>
 8006984:	4603      	mov	r3, r0
 8006986:	2b00      	cmp	r3, #0
 8006988:	d001      	beq.n	800698e <MX_DAC1_Init+0x82>
  {
    Error_Handler();
 800698a:	f000 fd7d 	bl	8007488 <Error_Handler>
  }

}
 800698e:	bf00      	nop
 8006990:	3730      	adds	r7, #48	; 0x30
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}
 8006996:	bf00      	nop
 8006998:	20002610 	.word	0x20002610
 800699c:	50000800 	.word	0x50000800

080069a0 <MX_DAC2_Init>:
/* DAC2 init function */
void MX_DAC2_Init(void)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b08c      	sub	sp, #48	; 0x30
 80069a4:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 80069a6:	463b      	mov	r3, r7
 80069a8:	2230      	movs	r2, #48	; 0x30
 80069aa:	2100      	movs	r1, #0
 80069ac:	4618      	mov	r0, r3
 80069ae:	f007 fbe1 	bl	800e174 <memset>

  /** DAC Initialization 
  */
  hdac2.Instance = DAC2;
 80069b2:	4b16      	ldr	r3, [pc, #88]	; (8006a0c <MX_DAC2_Init+0x6c>)
 80069b4:	4a16      	ldr	r2, [pc, #88]	; (8006a10 <MX_DAC2_Init+0x70>)
 80069b6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 80069b8:	4814      	ldr	r0, [pc, #80]	; (8006a0c <MX_DAC2_Init+0x6c>)
 80069ba:	f003 f820 	bl	80099fe <HAL_DAC_Init>
 80069be:	4603      	mov	r3, r0
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d001      	beq.n	80069c8 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 80069c4:	f000 fd60 	bl	8007488 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80069c8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80069cc:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80069ce:	2300      	movs	r3, #0
 80069d0:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80069d2:	2300      	movs	r3, #0
 80069d4:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80069d6:	2300      	movs	r3, #0
 80069d8:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 80069da:	2306      	movs	r3, #6
 80069dc:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80069de:	2300      	movs	r3, #0
 80069e0:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80069e2:	2300      	movs	r3, #0
 80069e4:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80069e6:	2301      	movs	r3, #1
 80069e8:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80069ea:	2300      	movs	r3, #0
 80069ec:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80069ee:	463b      	mov	r3, r7
 80069f0:	2200      	movs	r2, #0
 80069f2:	4619      	mov	r1, r3
 80069f4:	4805      	ldr	r0, [pc, #20]	; (8006a0c <MX_DAC2_Init+0x6c>)
 80069f6:	f003 f9eb 	bl	8009dd0 <HAL_DAC_ConfigChannel>
 80069fa:	4603      	mov	r3, r0
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d001      	beq.n	8006a04 <MX_DAC2_Init+0x64>
  {
    Error_Handler();
 8006a00:	f000 fd42 	bl	8007488 <Error_Handler>
  }

}
 8006a04:	bf00      	nop
 8006a06:	3730      	adds	r7, #48	; 0x30
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd80      	pop	{r7, pc}
 8006a0c:	200025fc 	.word	0x200025fc
 8006a10:	50000c00 	.word	0x50000c00

08006a14 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b08c      	sub	sp, #48	; 0x30
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a1c:	f107 031c 	add.w	r3, r7, #28
 8006a20:	2200      	movs	r2, #0
 8006a22:	601a      	str	r2, [r3, #0]
 8006a24:	605a      	str	r2, [r3, #4]
 8006a26:	609a      	str	r2, [r3, #8]
 8006a28:	60da      	str	r2, [r3, #12]
 8006a2a:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a56      	ldr	r2, [pc, #344]	; (8006b8c <HAL_DAC_MspInit+0x178>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d150      	bne.n	8006ad8 <HAL_DAC_MspInit+0xc4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8006a36:	4b56      	ldr	r3, [pc, #344]	; (8006b90 <HAL_DAC_MspInit+0x17c>)
 8006a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a3a:	4a55      	ldr	r2, [pc, #340]	; (8006b90 <HAL_DAC_MspInit+0x17c>)
 8006a3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006a42:	4b53      	ldr	r3, [pc, #332]	; (8006b90 <HAL_DAC_MspInit+0x17c>)
 8006a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a4a:	61bb      	str	r3, [r7, #24]
 8006a4c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006a4e:	4b50      	ldr	r3, [pc, #320]	; (8006b90 <HAL_DAC_MspInit+0x17c>)
 8006a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a52:	4a4f      	ldr	r2, [pc, #316]	; (8006b90 <HAL_DAC_MspInit+0x17c>)
 8006a54:	f043 0301 	orr.w	r3, r3, #1
 8006a58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006a5a:	4b4d      	ldr	r3, [pc, #308]	; (8006b90 <HAL_DAC_MspInit+0x17c>)
 8006a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a5e:	f003 0301 	and.w	r3, r3, #1
 8006a62:	617b      	str	r3, [r7, #20]
 8006a64:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8006a66:	2330      	movs	r3, #48	; 0x30
 8006a68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006a6a:	2303      	movs	r3, #3
 8006a6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a72:	f107 031c 	add.w	r3, r7, #28
 8006a76:	4619      	mov	r1, r3
 8006a78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006a7c:	f003 feaa 	bl	800a7d4 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel2;
 8006a80:	4b44      	ldr	r3, [pc, #272]	; (8006b94 <HAL_DAC_MspInit+0x180>)
 8006a82:	4a45      	ldr	r2, [pc, #276]	; (8006b98 <HAL_DAC_MspInit+0x184>)
 8006a84:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 8006a86:	4b43      	ldr	r3, [pc, #268]	; (8006b94 <HAL_DAC_MspInit+0x180>)
 8006a88:	2206      	movs	r2, #6
 8006a8a:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006a8c:	4b41      	ldr	r3, [pc, #260]	; (8006b94 <HAL_DAC_MspInit+0x180>)
 8006a8e:	2210      	movs	r2, #16
 8006a90:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006a92:	4b40      	ldr	r3, [pc, #256]	; (8006b94 <HAL_DAC_MspInit+0x180>)
 8006a94:	2200      	movs	r2, #0
 8006a96:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8006a98:	4b3e      	ldr	r3, [pc, #248]	; (8006b94 <HAL_DAC_MspInit+0x180>)
 8006a9a:	2280      	movs	r2, #128	; 0x80
 8006a9c:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006a9e:	4b3d      	ldr	r3, [pc, #244]	; (8006b94 <HAL_DAC_MspInit+0x180>)
 8006aa0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006aa4:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006aa6:	4b3b      	ldr	r3, [pc, #236]	; (8006b94 <HAL_DAC_MspInit+0x180>)
 8006aa8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006aac:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8006aae:	4b39      	ldr	r3, [pc, #228]	; (8006b94 <HAL_DAC_MspInit+0x180>)
 8006ab0:	2220      	movs	r2, #32
 8006ab2:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8006ab4:	4b37      	ldr	r3, [pc, #220]	; (8006b94 <HAL_DAC_MspInit+0x180>)
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8006aba:	4836      	ldr	r0, [pc, #216]	; (8006b94 <HAL_DAC_MspInit+0x180>)
 8006abc:	f003 fbbe 	bl	800a23c <HAL_DMA_Init>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d001      	beq.n	8006aca <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8006ac6:	f000 fcdf 	bl	8007488 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	4a31      	ldr	r2, [pc, #196]	; (8006b94 <HAL_DAC_MspInit+0x180>)
 8006ace:	609a      	str	r2, [r3, #8]
 8006ad0:	4a30      	ldr	r2, [pc, #192]	; (8006b94 <HAL_DAC_MspInit+0x180>)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }
}
 8006ad6:	e054      	b.n	8006b82 <HAL_DAC_MspInit+0x16e>
  else if(dacHandle->Instance==DAC2)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a2f      	ldr	r2, [pc, #188]	; (8006b9c <HAL_DAC_MspInit+0x188>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d14f      	bne.n	8006b82 <HAL_DAC_MspInit+0x16e>
    __HAL_RCC_DAC2_CLK_ENABLE();
 8006ae2:	4b2b      	ldr	r3, [pc, #172]	; (8006b90 <HAL_DAC_MspInit+0x17c>)
 8006ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ae6:	4a2a      	ldr	r2, [pc, #168]	; (8006b90 <HAL_DAC_MspInit+0x17c>)
 8006ae8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006aec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006aee:	4b28      	ldr	r3, [pc, #160]	; (8006b90 <HAL_DAC_MspInit+0x17c>)
 8006af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006af6:	613b      	str	r3, [r7, #16]
 8006af8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006afa:	4b25      	ldr	r3, [pc, #148]	; (8006b90 <HAL_DAC_MspInit+0x17c>)
 8006afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006afe:	4a24      	ldr	r2, [pc, #144]	; (8006b90 <HAL_DAC_MspInit+0x17c>)
 8006b00:	f043 0301 	orr.w	r3, r3, #1
 8006b04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006b06:	4b22      	ldr	r3, [pc, #136]	; (8006b90 <HAL_DAC_MspInit+0x17c>)
 8006b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b0a:	f003 0301 	and.w	r3, r3, #1
 8006b0e:	60fb      	str	r3, [r7, #12]
 8006b10:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006b12:	2340      	movs	r3, #64	; 0x40
 8006b14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006b16:	2303      	movs	r3, #3
 8006b18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b1e:	f107 031c 	add.w	r3, r7, #28
 8006b22:	4619      	mov	r1, r3
 8006b24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006b28:	f003 fe54 	bl	800a7d4 <HAL_GPIO_Init>
    hdma_dac2_ch1.Instance = DMA1_Channel3;
 8006b2c:	4b1c      	ldr	r3, [pc, #112]	; (8006ba0 <HAL_DAC_MspInit+0x18c>)
 8006b2e:	4a1d      	ldr	r2, [pc, #116]	; (8006ba4 <HAL_DAC_MspInit+0x190>)
 8006b30:	601a      	str	r2, [r3, #0]
    hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 8006b32:	4b1b      	ldr	r3, [pc, #108]	; (8006ba0 <HAL_DAC_MspInit+0x18c>)
 8006b34:	2229      	movs	r2, #41	; 0x29
 8006b36:	605a      	str	r2, [r3, #4]
    hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006b38:	4b19      	ldr	r3, [pc, #100]	; (8006ba0 <HAL_DAC_MspInit+0x18c>)
 8006b3a:	2210      	movs	r2, #16
 8006b3c:	609a      	str	r2, [r3, #8]
    hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006b3e:	4b18      	ldr	r3, [pc, #96]	; (8006ba0 <HAL_DAC_MspInit+0x18c>)
 8006b40:	2200      	movs	r2, #0
 8006b42:	60da      	str	r2, [r3, #12]
    hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8006b44:	4b16      	ldr	r3, [pc, #88]	; (8006ba0 <HAL_DAC_MspInit+0x18c>)
 8006b46:	2280      	movs	r2, #128	; 0x80
 8006b48:	611a      	str	r2, [r3, #16]
    hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006b4a:	4b15      	ldr	r3, [pc, #84]	; (8006ba0 <HAL_DAC_MspInit+0x18c>)
 8006b4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b50:	615a      	str	r2, [r3, #20]
    hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006b52:	4b13      	ldr	r3, [pc, #76]	; (8006ba0 <HAL_DAC_MspInit+0x18c>)
 8006b54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b58:	619a      	str	r2, [r3, #24]
    hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 8006b5a:	4b11      	ldr	r3, [pc, #68]	; (8006ba0 <HAL_DAC_MspInit+0x18c>)
 8006b5c:	2220      	movs	r2, #32
 8006b5e:	61da      	str	r2, [r3, #28]
    hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8006b60:	4b0f      	ldr	r3, [pc, #60]	; (8006ba0 <HAL_DAC_MspInit+0x18c>)
 8006b62:	2200      	movs	r2, #0
 8006b64:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac2_ch1) != HAL_OK)
 8006b66:	480e      	ldr	r0, [pc, #56]	; (8006ba0 <HAL_DAC_MspInit+0x18c>)
 8006b68:	f003 fb68 	bl	800a23c <HAL_DMA_Init>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d001      	beq.n	8006b76 <HAL_DAC_MspInit+0x162>
      Error_Handler();
 8006b72:	f000 fc89 	bl	8007488 <Error_Handler>
    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac2_ch1);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	4a09      	ldr	r2, [pc, #36]	; (8006ba0 <HAL_DAC_MspInit+0x18c>)
 8006b7a:	609a      	str	r2, [r3, #8]
 8006b7c:	4a08      	ldr	r2, [pc, #32]	; (8006ba0 <HAL_DAC_MspInit+0x18c>)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6293      	str	r3, [r2, #40]	; 0x28
}
 8006b82:	bf00      	nop
 8006b84:	3730      	adds	r7, #48	; 0x30
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}
 8006b8a:	bf00      	nop
 8006b8c:	50000800 	.word	0x50000800
 8006b90:	40021000 	.word	0x40021000
 8006b94:	20002624 	.word	0x20002624
 8006b98:	4002001c 	.word	0x4002001c
 8006b9c:	50000c00 	.word	0x50000c00
 8006ba0:	20002684 	.word	0x20002684
 8006ba4:	40020030 	.word	0x40020030

08006ba8 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b082      	sub	sp, #8
 8006bac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8006bae:	4b1a      	ldr	r3, [pc, #104]	; (8006c18 <MX_DMA_Init+0x70>)
 8006bb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bb2:	4a19      	ldr	r2, [pc, #100]	; (8006c18 <MX_DMA_Init+0x70>)
 8006bb4:	f043 0304 	orr.w	r3, r3, #4
 8006bb8:	6493      	str	r3, [r2, #72]	; 0x48
 8006bba:	4b17      	ldr	r3, [pc, #92]	; (8006c18 <MX_DMA_Init+0x70>)
 8006bbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bbe:	f003 0304 	and.w	r3, r3, #4
 8006bc2:	607b      	str	r3, [r7, #4]
 8006bc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8006bc6:	4b14      	ldr	r3, [pc, #80]	; (8006c18 <MX_DMA_Init+0x70>)
 8006bc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bca:	4a13      	ldr	r2, [pc, #76]	; (8006c18 <MX_DMA_Init+0x70>)
 8006bcc:	f043 0301 	orr.w	r3, r3, #1
 8006bd0:	6493      	str	r3, [r2, #72]	; 0x48
 8006bd2:	4b11      	ldr	r3, [pc, #68]	; (8006c18 <MX_DMA_Init+0x70>)
 8006bd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bd6:	f003 0301 	and.w	r3, r3, #1
 8006bda:	603b      	str	r3, [r7, #0]
 8006bdc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8006bde:	2200      	movs	r2, #0
 8006be0:	2101      	movs	r1, #1
 8006be2:	200b      	movs	r0, #11
 8006be4:	f002 fed7 	bl	8009996 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8006be8:	200b      	movs	r0, #11
 8006bea:	f002 feee 	bl	80099ca <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8006bee:	2200      	movs	r2, #0
 8006bf0:	2100      	movs	r1, #0
 8006bf2:	200c      	movs	r0, #12
 8006bf4:	f002 fecf 	bl	8009996 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8006bf8:	200c      	movs	r0, #12
 8006bfa:	f002 fee6 	bl	80099ca <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8006bfe:	2200      	movs	r2, #0
 8006c00:	2100      	movs	r1, #0
 8006c02:	200d      	movs	r0, #13
 8006c04:	f002 fec7 	bl	8009996 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8006c08:	200d      	movs	r0, #13
 8006c0a:	f002 fede 	bl	80099ca <HAL_NVIC_EnableIRQ>

}
 8006c0e:	bf00      	nop
 8006c10:	3708      	adds	r7, #8
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}
 8006c16:	bf00      	nop
 8006c18:	40021000 	.word	0x40021000

08006c1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006c20:	4b04      	ldr	r3, [pc, #16]	; (8006c34 <__NVIC_GetPriorityGrouping+0x18>)
 8006c22:	68db      	ldr	r3, [r3, #12]
 8006c24:	0a1b      	lsrs	r3, r3, #8
 8006c26:	f003 0307 	and.w	r3, r3, #7
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c32:	4770      	bx	lr
 8006c34:	e000ed00 	.word	0xe000ed00

08006c38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b083      	sub	sp, #12
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	4603      	mov	r3, r0
 8006c40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	db0b      	blt.n	8006c62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006c4a:	79fb      	ldrb	r3, [r7, #7]
 8006c4c:	f003 021f 	and.w	r2, r3, #31
 8006c50:	4907      	ldr	r1, [pc, #28]	; (8006c70 <__NVIC_EnableIRQ+0x38>)
 8006c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c56:	095b      	lsrs	r3, r3, #5
 8006c58:	2001      	movs	r0, #1
 8006c5a:	fa00 f202 	lsl.w	r2, r0, r2
 8006c5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006c62:	bf00      	nop
 8006c64:	370c      	adds	r7, #12
 8006c66:	46bd      	mov	sp, r7
 8006c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6c:	4770      	bx	lr
 8006c6e:	bf00      	nop
 8006c70:	e000e100 	.word	0xe000e100

08006c74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b083      	sub	sp, #12
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	6039      	str	r1, [r7, #0]
 8006c7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006c80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	db0a      	blt.n	8006c9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	b2da      	uxtb	r2, r3
 8006c8c:	490c      	ldr	r1, [pc, #48]	; (8006cc0 <__NVIC_SetPriority+0x4c>)
 8006c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c92:	0112      	lsls	r2, r2, #4
 8006c94:	b2d2      	uxtb	r2, r2
 8006c96:	440b      	add	r3, r1
 8006c98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006c9c:	e00a      	b.n	8006cb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	b2da      	uxtb	r2, r3
 8006ca2:	4908      	ldr	r1, [pc, #32]	; (8006cc4 <__NVIC_SetPriority+0x50>)
 8006ca4:	79fb      	ldrb	r3, [r7, #7]
 8006ca6:	f003 030f 	and.w	r3, r3, #15
 8006caa:	3b04      	subs	r3, #4
 8006cac:	0112      	lsls	r2, r2, #4
 8006cae:	b2d2      	uxtb	r2, r2
 8006cb0:	440b      	add	r3, r1
 8006cb2:	761a      	strb	r2, [r3, #24]
}
 8006cb4:	bf00      	nop
 8006cb6:	370c      	adds	r7, #12
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbe:	4770      	bx	lr
 8006cc0:	e000e100 	.word	0xe000e100
 8006cc4:	e000ed00 	.word	0xe000ed00

08006cc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b089      	sub	sp, #36	; 0x24
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	60f8      	str	r0, [r7, #12]
 8006cd0:	60b9      	str	r1, [r7, #8]
 8006cd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f003 0307 	and.w	r3, r3, #7
 8006cda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006cdc:	69fb      	ldr	r3, [r7, #28]
 8006cde:	f1c3 0307 	rsb	r3, r3, #7
 8006ce2:	2b04      	cmp	r3, #4
 8006ce4:	bf28      	it	cs
 8006ce6:	2304      	movcs	r3, #4
 8006ce8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006cea:	69fb      	ldr	r3, [r7, #28]
 8006cec:	3304      	adds	r3, #4
 8006cee:	2b06      	cmp	r3, #6
 8006cf0:	d902      	bls.n	8006cf8 <NVIC_EncodePriority+0x30>
 8006cf2:	69fb      	ldr	r3, [r7, #28]
 8006cf4:	3b03      	subs	r3, #3
 8006cf6:	e000      	b.n	8006cfa <NVIC_EncodePriority+0x32>
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006cfc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006d00:	69bb      	ldr	r3, [r7, #24]
 8006d02:	fa02 f303 	lsl.w	r3, r2, r3
 8006d06:	43da      	mvns	r2, r3
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	401a      	ands	r2, r3
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006d10:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	fa01 f303 	lsl.w	r3, r1, r3
 8006d1a:	43d9      	mvns	r1, r3
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006d20:	4313      	orrs	r3, r2
         );
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3724      	adds	r7, #36	; 0x24
 8006d26:	46bd      	mov	sp, r7
 8006d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2c:	4770      	bx	lr
	...

08006d30 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b085      	sub	sp, #20
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
 8006d38:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16U), Port << (POSITION_VAL((Line >> 16U)) & 0x1FU) );
 8006d3a:	4a14      	ldr	r2, [pc, #80]	; (8006d8c <LL_SYSCFG_SetEXTISource+0x5c>)
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	f003 0303 	and.w	r3, r3, #3
 8006d42:	3302      	adds	r3, #2
 8006d44:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	0c1b      	lsrs	r3, r3, #16
 8006d4c:	43db      	mvns	r3, r3
 8006d4e:	ea02 0103 	and.w	r1, r2, r3
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	0c1b      	lsrs	r3, r3, #16
 8006d56:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	fa93 f3a3 	rbit	r3, r3
 8006d5e:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	fab3 f383 	clz	r3, r3
 8006d66:	b2db      	uxtb	r3, r3
 8006d68:	f003 031f 	and.w	r3, r3, #31
 8006d6c:	687a      	ldr	r2, [r7, #4]
 8006d6e:	409a      	lsls	r2, r3
 8006d70:	4806      	ldr	r0, [pc, #24]	; (8006d8c <LL_SYSCFG_SetEXTISource+0x5c>)
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	f003 0303 	and.w	r3, r3, #3
 8006d78:	430a      	orrs	r2, r1
 8006d7a:	3302      	adds	r3, #2
 8006d7c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8006d80:	bf00      	nop
 8006d82:	3714      	adds	r7, #20
 8006d84:	46bd      	mov	sp, r7
 8006d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8a:	4770      	bx	lr
 8006d8c:	40010000 	.word	0x40010000

08006d90 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b089      	sub	sp, #36	; 0x24
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	60f8      	str	r0, [r7, #12]
 8006d98:	60b9      	str	r1, [r7, #8]
 8006d9a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681a      	ldr	r2, [r3, #0]
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	fa93 f3a3 	rbit	r3, r3
 8006daa:	613b      	str	r3, [r7, #16]
  return result;
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	fab3 f383 	clz	r3, r3
 8006db2:	b2db      	uxtb	r3, r3
 8006db4:	005b      	lsls	r3, r3, #1
 8006db6:	2103      	movs	r1, #3
 8006db8:	fa01 f303 	lsl.w	r3, r1, r3
 8006dbc:	43db      	mvns	r3, r3
 8006dbe:	401a      	ands	r2, r3
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006dc4:	69fb      	ldr	r3, [r7, #28]
 8006dc6:	fa93 f3a3 	rbit	r3, r3
 8006dca:	61bb      	str	r3, [r7, #24]
  return result;
 8006dcc:	69bb      	ldr	r3, [r7, #24]
 8006dce:	fab3 f383 	clz	r3, r3
 8006dd2:	b2db      	uxtb	r3, r3
 8006dd4:	005b      	lsls	r3, r3, #1
 8006dd6:	6879      	ldr	r1, [r7, #4]
 8006dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8006ddc:	431a      	orrs	r2, r3
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	601a      	str	r2, [r3, #0]
}
 8006de2:	bf00      	nop
 8006de4:	3724      	adds	r7, #36	; 0x24
 8006de6:	46bd      	mov	sp, r7
 8006de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dec:	4770      	bx	lr

08006dee <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8006dee:	b480      	push	{r7}
 8006df0:	b089      	sub	sp, #36	; 0x24
 8006df2:	af00      	add	r7, sp, #0
 8006df4:	60f8      	str	r0, [r7, #12]
 8006df6:	60b9      	str	r1, [r7, #8]
 8006df8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	68da      	ldr	r2, [r3, #12]
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	fa93 f3a3 	rbit	r3, r3
 8006e08:	613b      	str	r3, [r7, #16]
  return result;
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	fab3 f383 	clz	r3, r3
 8006e10:	b2db      	uxtb	r3, r3
 8006e12:	005b      	lsls	r3, r3, #1
 8006e14:	2103      	movs	r1, #3
 8006e16:	fa01 f303 	lsl.w	r3, r1, r3
 8006e1a:	43db      	mvns	r3, r3
 8006e1c:	401a      	ands	r2, r3
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e22:	69fb      	ldr	r3, [r7, #28]
 8006e24:	fa93 f3a3 	rbit	r3, r3
 8006e28:	61bb      	str	r3, [r7, #24]
  return result;
 8006e2a:	69bb      	ldr	r3, [r7, #24]
 8006e2c:	fab3 f383 	clz	r3, r3
 8006e30:	b2db      	uxtb	r3, r3
 8006e32:	005b      	lsls	r3, r3, #1
 8006e34:	6879      	ldr	r1, [r7, #4]
 8006e36:	fa01 f303 	lsl.w	r3, r1, r3
 8006e3a:	431a      	orrs	r2, r3
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	60da      	str	r2, [r3, #12]
}
 8006e40:	bf00      	nop
 8006e42:	3724      	adds	r7, #36	; 0x24
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr

08006e4c <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b083      	sub	sp, #12
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
 8006e54:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	683a      	ldr	r2, [r7, #0]
 8006e5a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006e5c:	bf00      	nop
 8006e5e:	370c      	adds	r7, #12
 8006e60:	46bd      	mov	sp, r7
 8006e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e66:	4770      	bx	lr

08006e68 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b085      	sub	sp, #20
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8006e70:	4b08      	ldr	r3, [pc, #32]	; (8006e94 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8006e72:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006e74:	4907      	ldr	r1, [pc, #28]	; (8006e94 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8006e7c:	4b05      	ldr	r3, [pc, #20]	; (8006e94 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8006e7e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	4013      	ands	r3, r2
 8006e84:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006e86:	68fb      	ldr	r3, [r7, #12]
}
 8006e88:	bf00      	nop
 8006e8a:	3714      	adds	r7, #20
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr
 8006e94:	40021000 	.word	0x40021000

08006e98 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b08a      	sub	sp, #40	; 0x28
 8006e9c:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8006e9e:	f107 031c 	add.w	r3, r7, #28
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	601a      	str	r2, [r3, #0]
 8006ea6:	605a      	str	r2, [r3, #4]
 8006ea8:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006eaa:	1d3b      	adds	r3, r7, #4
 8006eac:	2200      	movs	r2, #0
 8006eae:	601a      	str	r2, [r3, #0]
 8006eb0:	605a      	str	r2, [r3, #4]
 8006eb2:	609a      	str	r2, [r3, #8]
 8006eb4:	60da      	str	r2, [r3, #12]
 8006eb6:	611a      	str	r2, [r3, #16]
 8006eb8:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8006eba:	2004      	movs	r0, #4
 8006ebc:	f7ff ffd4 	bl	8006e68 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 8006ec0:	2020      	movs	r0, #32
 8006ec2:	f7ff ffd1 	bl	8006e68 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8006ec6:	2001      	movs	r0, #1
 8006ec8:	f7ff ffce 	bl	8006e68 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8006ecc:	2002      	movs	r0, #2
 8006ece:	f7ff ffcb 	bl	8006e68 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMODE_GPIO_Port, TRIGMODE_Pin);
 8006ed2:	2108      	movs	r1, #8
 8006ed4:	48d3      	ldr	r0, [pc, #844]	; (8007224 <MX_GPIO_Init+0x38c>)
 8006ed6:	f7ff ffb9 	bl	8006e4c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin);
 8006eda:	2108      	movs	r1, #8
 8006edc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006ee0:	f7ff ffb4 	bl	8006e4c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG2_GPIO_Port, SG2_Pin);
 8006ee4:	2110      	movs	r1, #16
 8006ee6:	48cf      	ldr	r0, [pc, #828]	; (8007224 <MX_GPIO_Init+0x38c>)
 8006ee8:	f7ff ffb0 	bl	8006e4c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG1_GPIO_Port, SG1_Pin);
 8006eec:	2120      	movs	r1, #32
 8006eee:	48cd      	ldr	r0, [pc, #820]	; (8007224 <MX_GPIO_Init+0x38c>)
 8006ef0:	f7ff ffac 	bl	8006e4c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG0_GPIO_Port, SG0_Pin);
 8006ef4:	2101      	movs	r1, #1
 8006ef6:	48cc      	ldr	r0, [pc, #816]	; (8007228 <MX_GPIO_Init+0x390>)
 8006ef8:	f7ff ffa8 	bl	8006e4c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin);
 8006efc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006f00:	48c8      	ldr	r0, [pc, #800]	; (8007224 <MX_GPIO_Init+0x38c>)
 8006f02:	f7ff ffa3 	bl	8006e4c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin);
 8006f06:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006f0a:	48c6      	ldr	r0, [pc, #792]	; (8007224 <MX_GPIO_Init+0x38c>)
 8006f0c:	f7ff ff9e 	bl	8006e4c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DC_GPIO_Port, DC_Pin);
 8006f10:	2140      	movs	r1, #64	; 0x40
 8006f12:	48c5      	ldr	r0, [pc, #788]	; (8007228 <MX_GPIO_Init+0x390>)
 8006f14:	f7ff ff9a 	bl	8006e4c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CS_GPIO_Port, CS_Pin);
 8006f18:	2180      	movs	r1, #128	; 0x80
 8006f1a:	48c3      	ldr	r0, [pc, #780]	; (8007228 <MX_GPIO_Init+0x390>)
 8006f1c:	f7ff ff96 	bl	8006e4c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(RST_GPIO_Port, RST_Pin);
 8006f20:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006f24:	48c0      	ldr	r0, [pc, #768]	; (8007228 <MX_GPIO_Init+0x390>)
 8006f26:	f7ff ff91 	bl	8006e4c <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE14);
 8006f2a:	49c0      	ldr	r1, [pc, #768]	; (800722c <MX_GPIO_Init+0x394>)
 8006f2c:	2002      	movs	r0, #2
 8006f2e:	f7ff feff 	bl	8006d30 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE15);
 8006f32:	49bf      	ldr	r1, [pc, #764]	; (8007230 <MX_GPIO_Init+0x398>)
 8006f34:	2002      	movs	r0, #2
 8006f36:	f7ff fefb 	bl	8006d30 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE0);
 8006f3a:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8006f3e:	2005      	movs	r0, #5
 8006f40:	f7ff fef6 	bl	8006d30 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE1);
 8006f44:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
 8006f48:	2005      	movs	r0, #5
 8006f4a:	f7ff fef1 	bl	8006d30 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE2);
 8006f4e:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8006f52:	2002      	movs	r0, #2
 8006f54:	f7ff feec 	bl	8006d30 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 8006f58:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006f5c:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8006f64:	2300      	movs	r3, #0
 8006f66:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8006f6a:	2302      	movs	r3, #2
 8006f6c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8006f70:	f107 031c 	add.w	r3, r7, #28
 8006f74:	4618      	mov	r0, r3
 8006f76:	f005 fead 	bl	800ccd4 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 8006f7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f7e:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8006f80:	2301      	movs	r3, #1
 8006f82:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8006f86:	2300      	movs	r3, #0
 8006f88:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8006f8c:	2302      	movs	r3, #2
 8006f8e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8006f92:	f107 031c 	add.w	r3, r7, #28
 8006f96:	4618      	mov	r0, r3
 8006f98:	f005 fe9c 	bl	800ccd4 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8006fac:	2302      	movs	r3, #2
 8006fae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8006fb2:	f107 031c 	add.w	r3, r7, #28
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f005 fe8c 	bl	800ccd4 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 8006fbc:	2302      	movs	r3, #2
 8006fbe:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8006fcc:	2302      	movs	r3, #2
 8006fce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8006fd2:	f107 031c 	add.w	r3, r7, #28
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f005 fe7c 	bl	800ccd4 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_2;
 8006fdc:	2304      	movs	r3, #4
 8006fde:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8006fec:	2302      	movs	r3, #2
 8006fee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8006ff2:	f107 031c 	add.w	r3, r7, #28
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f005 fe6c 	bl	800ccd4 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_PULL_UP);
 8006ffc:	2201      	movs	r2, #1
 8006ffe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007002:	4888      	ldr	r0, [pc, #544]	; (8007224 <MX_GPIO_Init+0x38c>)
 8007004:	f7ff fef3 	bl	8006dee <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_PULL_UP);
 8007008:	2201      	movs	r2, #1
 800700a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800700e:	4885      	ldr	r0, [pc, #532]	; (8007224 <MX_GPIO_Init+0x38c>)
 8007010:	f7ff feed 	bl	8006dee <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_PULL_UP);
 8007014:	2201      	movs	r2, #1
 8007016:	2101      	movs	r1, #1
 8007018:	4886      	ldr	r0, [pc, #536]	; (8007234 <MX_GPIO_Init+0x39c>)
 800701a:	f7ff fee8 	bl	8006dee <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_PULL_UP);
 800701e:	2201      	movs	r2, #1
 8007020:	2102      	movs	r1, #2
 8007022:	4884      	ldr	r0, [pc, #528]	; (8007234 <MX_GPIO_Init+0x39c>)
 8007024:	f7ff fee3 	bl	8006dee <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(ENC_EXTI2_GPIO_Port, ENC_EXTI2_Pin, LL_GPIO_PULL_UP);
 8007028:	2201      	movs	r2, #1
 800702a:	2104      	movs	r1, #4
 800702c:	487d      	ldr	r0, [pc, #500]	; (8007224 <MX_GPIO_Init+0x38c>)
 800702e:	f7ff fede 	bl	8006dee <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_MODE_INPUT);
 8007032:	2200      	movs	r2, #0
 8007034:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007038:	487a      	ldr	r0, [pc, #488]	; (8007224 <MX_GPIO_Init+0x38c>)
 800703a:	f7ff fea9 	bl	8006d90 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_MODE_INPUT);
 800703e:	2200      	movs	r2, #0
 8007040:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007044:	4877      	ldr	r0, [pc, #476]	; (8007224 <MX_GPIO_Init+0x38c>)
 8007046:	f7ff fea3 	bl	8006d90 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_MODE_INPUT);
 800704a:	2200      	movs	r2, #0
 800704c:	2101      	movs	r1, #1
 800704e:	4879      	ldr	r0, [pc, #484]	; (8007234 <MX_GPIO_Init+0x39c>)
 8007050:	f7ff fe9e 	bl	8006d90 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_MODE_INPUT);
 8007054:	2200      	movs	r2, #0
 8007056:	2102      	movs	r1, #2
 8007058:	4876      	ldr	r0, [pc, #472]	; (8007234 <MX_GPIO_Init+0x39c>)
 800705a:	f7ff fe99 	bl	8006d90 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(ENC_EXTI2_GPIO_Port, ENC_EXTI2_Pin, LL_GPIO_MODE_INPUT);
 800705e:	2200      	movs	r2, #0
 8007060:	2104      	movs	r1, #4
 8007062:	4870      	ldr	r0, [pc, #448]	; (8007224 <MX_GPIO_Init+0x38c>)
 8007064:	f7ff fe94 	bl	8006d90 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = TRIGMODE_Pin;
 8007068:	2308      	movs	r3, #8
 800706a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800706c:	2301      	movs	r3, #1
 800706e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007070:	2300      	movs	r3, #0
 8007072:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007074:	2300      	movs	r3, #0
 8007076:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8007078:	2302      	movs	r3, #2
 800707a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMODE_GPIO_Port, &GPIO_InitStruct);
 800707c:	1d3b      	adds	r3, r7, #4
 800707e:	4619      	mov	r1, r3
 8007080:	4868      	ldr	r0, [pc, #416]	; (8007224 <MX_GPIO_Init+0x38c>)
 8007082:	f006 f81a 	bl	800d0ba <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DCBIAS_INVERT_Pin;
 8007086:	2308      	movs	r3, #8
 8007088:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800708a:	2301      	movs	r3, #1
 800708c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800708e:	2300      	movs	r3, #0
 8007090:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007092:	2300      	movs	r3, #0
 8007094:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007096:	2300      	movs	r3, #0
 8007098:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DCBIAS_INVERT_GPIO_Port, &GPIO_InitStruct);
 800709a:	1d3b      	adds	r3, r7, #4
 800709c:	4619      	mov	r1, r3
 800709e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80070a2:	f006 f80a 	bl	800d0ba <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG2_Pin;
 80070a6:	2310      	movs	r3, #16
 80070a8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80070aa:	2301      	movs	r3, #1
 80070ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80070ae:	2300      	movs	r3, #0
 80070b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80070b2:	2300      	movs	r3, #0
 80070b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80070b6:	2300      	movs	r3, #0
 80070b8:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG2_GPIO_Port, &GPIO_InitStruct);
 80070ba:	1d3b      	adds	r3, r7, #4
 80070bc:	4619      	mov	r1, r3
 80070be:	4859      	ldr	r0, [pc, #356]	; (8007224 <MX_GPIO_Init+0x38c>)
 80070c0:	f005 fffb 	bl	800d0ba <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG1_Pin;
 80070c4:	2320      	movs	r3, #32
 80070c6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80070c8:	2301      	movs	r3, #1
 80070ca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80070cc:	2300      	movs	r3, #0
 80070ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80070d0:	2300      	movs	r3, #0
 80070d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80070d4:	2300      	movs	r3, #0
 80070d6:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG1_GPIO_Port, &GPIO_InitStruct);
 80070d8:	1d3b      	adds	r3, r7, #4
 80070da:	4619      	mov	r1, r3
 80070dc:	4851      	ldr	r0, [pc, #324]	; (8007224 <MX_GPIO_Init+0x38c>)
 80070de:	f005 ffec 	bl	800d0ba <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG0_Pin;
 80070e2:	2301      	movs	r3, #1
 80070e4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80070e6:	2301      	movs	r3, #1
 80070e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80070ea:	2300      	movs	r3, #0
 80070ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80070ee:	2300      	movs	r3, #0
 80070f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80070f2:	2300      	movs	r3, #0
 80070f4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG0_GPIO_Port, &GPIO_InitStruct);
 80070f6:	1d3b      	adds	r3, r7, #4
 80070f8:	4619      	mov	r1, r3
 80070fa:	484b      	ldr	r0, [pc, #300]	; (8007228 <MX_GPIO_Init+0x390>)
 80070fc:	f005 ffdd 	bl	800d0ba <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX1_Pin;
 8007100:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007104:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007106:	2301      	movs	r3, #1
 8007108:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800710a:	2300      	movs	r3, #0
 800710c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800710e:	2300      	movs	r3, #0
 8007110:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007112:	2300      	movs	r3, #0
 8007114:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX1_GPIO_Port, &GPIO_InitStruct);
 8007116:	1d3b      	adds	r3, r7, #4
 8007118:	4619      	mov	r1, r3
 800711a:	4842      	ldr	r0, [pc, #264]	; (8007224 <MX_GPIO_Init+0x38c>)
 800711c:	f005 ffcd 	bl	800d0ba <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX2_Pin;
 8007120:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007124:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007126:	2301      	movs	r3, #1
 8007128:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800712a:	2300      	movs	r3, #0
 800712c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800712e:	2300      	movs	r3, #0
 8007130:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007132:	2300      	movs	r3, #0
 8007134:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX2_GPIO_Port, &GPIO_InitStruct);
 8007136:	1d3b      	adds	r3, r7, #4
 8007138:	4619      	mov	r1, r3
 800713a:	483a      	ldr	r0, [pc, #232]	; (8007224 <MX_GPIO_Init+0x38c>)
 800713c:	f005 ffbd 	bl	800d0ba <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DC_Pin;
 8007140:	2340      	movs	r3, #64	; 0x40
 8007142:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007144:	2301      	movs	r3, #1
 8007146:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8007148:	2303      	movs	r3, #3
 800714a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800714c:	2300      	movs	r3, #0
 800714e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007150:	2300      	movs	r3, #0
 8007152:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DC_GPIO_Port, &GPIO_InitStruct);
 8007154:	1d3b      	adds	r3, r7, #4
 8007156:	4619      	mov	r1, r3
 8007158:	4833      	ldr	r0, [pc, #204]	; (8007228 <MX_GPIO_Init+0x390>)
 800715a:	f005 ffae 	bl	800d0ba <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CS_Pin;
 800715e:	2380      	movs	r3, #128	; 0x80
 8007160:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007162:	2301      	movs	r3, #1
 8007164:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8007166:	2303      	movs	r3, #3
 8007168:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800716a:	2300      	movs	r3, #0
 800716c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800716e:	2300      	movs	r3, #0
 8007170:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8007172:	1d3b      	adds	r3, r7, #4
 8007174:	4619      	mov	r1, r3
 8007176:	482c      	ldr	r0, [pc, #176]	; (8007228 <MX_GPIO_Init+0x390>)
 8007178:	f005 ff9f 	bl	800d0ba <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = RST_Pin;
 800717c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007180:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007182:	2301      	movs	r3, #1
 8007184:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8007186:	2303      	movs	r3, #3
 8007188:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800718a:	2300      	movs	r3, #0
 800718c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800718e:	2300      	movs	r3, #0
 8007190:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8007192:	1d3b      	adds	r3, r7, #4
 8007194:	4619      	mov	r1, r3
 8007196:	4824      	ldr	r0, [pc, #144]	; (8007228 <MX_GPIO_Init+0x390>)
 8007198:	f005 ff8f 	bl	800d0ba <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800719c:	f7ff fd3e 	bl	8006c1c <__NVIC_GetPriorityGrouping>
 80071a0:	4603      	mov	r3, r0
 80071a2:	2200      	movs	r2, #0
 80071a4:	2100      	movs	r1, #0
 80071a6:	4618      	mov	r0, r3
 80071a8:	f7ff fd8e 	bl	8006cc8 <NVIC_EncodePriority>
 80071ac:	4603      	mov	r3, r0
 80071ae:	4619      	mov	r1, r3
 80071b0:	2006      	movs	r0, #6
 80071b2:	f7ff fd5f 	bl	8006c74 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI0_IRQn);
 80071b6:	2006      	movs	r0, #6
 80071b8:	f7ff fd3e 	bl	8006c38 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80071bc:	f7ff fd2e 	bl	8006c1c <__NVIC_GetPriorityGrouping>
 80071c0:	4603      	mov	r3, r0
 80071c2:	2200      	movs	r2, #0
 80071c4:	2100      	movs	r1, #0
 80071c6:	4618      	mov	r0, r3
 80071c8:	f7ff fd7e 	bl	8006cc8 <NVIC_EncodePriority>
 80071cc:	4603      	mov	r3, r0
 80071ce:	4619      	mov	r1, r3
 80071d0:	2007      	movs	r0, #7
 80071d2:	f7ff fd4f 	bl	8006c74 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI1_IRQn);
 80071d6:	2007      	movs	r0, #7
 80071d8:	f7ff fd2e 	bl	8006c38 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80071dc:	f7ff fd1e 	bl	8006c1c <__NVIC_GetPriorityGrouping>
 80071e0:	4603      	mov	r3, r0
 80071e2:	2200      	movs	r2, #0
 80071e4:	2100      	movs	r1, #0
 80071e6:	4618      	mov	r0, r3
 80071e8:	f7ff fd6e 	bl	8006cc8 <NVIC_EncodePriority>
 80071ec:	4603      	mov	r3, r0
 80071ee:	4619      	mov	r1, r3
 80071f0:	2008      	movs	r0, #8
 80071f2:	f7ff fd3f 	bl	8006c74 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI2_IRQn);
 80071f6:	2008      	movs	r0, #8
 80071f8:	f7ff fd1e 	bl	8006c38 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80071fc:	f7ff fd0e 	bl	8006c1c <__NVIC_GetPriorityGrouping>
 8007200:	4603      	mov	r3, r0
 8007202:	2200      	movs	r2, #0
 8007204:	2100      	movs	r1, #0
 8007206:	4618      	mov	r0, r3
 8007208:	f7ff fd5e 	bl	8006cc8 <NVIC_EncodePriority>
 800720c:	4603      	mov	r3, r0
 800720e:	4619      	mov	r1, r3
 8007210:	2028      	movs	r0, #40	; 0x28
 8007212:	f7ff fd2f 	bl	8006c74 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 8007216:	2028      	movs	r0, #40	; 0x28
 8007218:	f7ff fd0e 	bl	8006c38 <__NVIC_EnableIRQ>

}
 800721c:	bf00      	nop
 800721e:	3728      	adds	r7, #40	; 0x28
 8007220:	46bd      	mov	sp, r7
 8007222:	e009      	b.n	8007238 <MX_GPIO_Init+0x3a0>
 8007224:	48000800 	.word	0x48000800
 8007228:	48000400 	.word	0x48000400
 800722c:	0f000003 	.word	0x0f000003
 8007230:	f0000003 	.word	0xf0000003
 8007234:	48001400 	.word	0x48001400
 8007238:	bd80      	pop	{r7, pc}
 800723a:	bf00      	nop

0800723c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800723c:	b480      	push	{r7}
 800723e:	b083      	sub	sp, #12
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8007244:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8007248:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800724c:	f003 0301 	and.w	r3, r3, #1
 8007250:	2b00      	cmp	r3, #0
 8007252:	d013      	beq.n	800727c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8007254:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8007258:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800725c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8007260:	2b00      	cmp	r3, #0
 8007262:	d00b      	beq.n	800727c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8007264:	e000      	b.n	8007268 <ITM_SendChar+0x2c>
    {
      __NOP();
 8007266:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8007268:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d0f9      	beq.n	8007266 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8007272:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8007276:	687a      	ldr	r2, [r7, #4]
 8007278:	b2d2      	uxtb	r2, r2
 800727a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800727c:	687b      	ldr	r3, [r7, #4]
}
 800727e:	4618      	mov	r0, r3
 8007280:	370c      	adds	r7, #12
 8007282:	46bd      	mov	sp, r7
 8007284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007288:	4770      	bx	lr

0800728a <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// redirect printf to SWV
int _write(int file, char *ptr, int len)
{
 800728a:	b580      	push	{r7, lr}
 800728c:	b086      	sub	sp, #24
 800728e:	af00      	add	r7, sp, #0
 8007290:	60f8      	str	r0, [r7, #12]
 8007292:	60b9      	str	r1, [r7, #8]
 8007294:	607a      	str	r2, [r7, #4]
  int i=0;
 8007296:	2300      	movs	r3, #0
 8007298:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 800729a:	2300      	movs	r3, #0
 800729c:	617b      	str	r3, [r7, #20]
 800729e:	e009      	b.n	80072b4 <_write+0x2a>
    ITM_SendChar((*ptr++));
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	1c5a      	adds	r2, r3, #1
 80072a4:	60ba      	str	r2, [r7, #8]
 80072a6:	781b      	ldrb	r3, [r3, #0]
 80072a8:	4618      	mov	r0, r3
 80072aa:	f7ff ffc7 	bl	800723c <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	3301      	adds	r3, #1
 80072b2:	617b      	str	r3, [r7, #20]
 80072b4:	697a      	ldr	r2, [r7, #20]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	429a      	cmp	r2, r3
 80072ba:	dbf1      	blt.n	80072a0 <_write+0x16>
  return len;
 80072bc:	687b      	ldr	r3, [r7, #4]
}
 80072be:	4618      	mov	r0, r3
 80072c0:	3718      	adds	r7, #24
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}
	...

080072c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80072cc:	f000 feb5 	bl	800803a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80072d0:	f000 f86c 	bl	80073ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80072d4:	f7ff fde0 	bl	8006e98 <MX_GPIO_Init>
  MX_DMA_Init();
 80072d8:	f7ff fc66 	bl	8006ba8 <MX_DMA_Init>
  MX_DAC1_Init();
 80072dc:	f7ff fb16 	bl	800690c <MX_DAC1_Init>
  MX_DAC2_Init();
 80072e0:	f7ff fb5e 	bl	80069a0 <MX_DAC2_Init>
  MX_ADC1_Init();
 80072e4:	f7ff f9d4 	bl	8006690 <MX_ADC1_Init>
  MX_COMP1_Init();
 80072e8:	f7ff fab6 	bl	8006858 <MX_COMP1_Init>
  MX_TIM2_Init();
 80072ec:	f000 fbaa 	bl	8007a44 <MX_TIM2_Init>
  MX_SPI3_Init();
 80072f0:	f000 f908 	bl	8007504 <MX_SPI3_Init>
  MX_RNG_Init();
 80072f4:	f000 f8f8 	bl	80074e8 <MX_RNG_Init>
  MX_TIM1_Init();
 80072f8:	f000 fb34 	bl	8007964 <MX_TIM1_Init>
  MX_TIM8_Init();
 80072fc:	f000 fc8a 	bl	8007c14 <MX_TIM8_Init>
  MX_TIM16_Init();
 8007300:	f000 fd42 	bl	8007d88 <MX_TIM16_Init>
  MX_TIM15_Init();
 8007304:	f000 fcee 	bl	8007ce4 <MX_TIM15_Init>
  MX_TIM5_Init();
 8007308:	f000 fc36 	bl	8007b78 <MX_TIM5_Init>
  MX_TIM3_Init();
 800730c:	f000 fbe6 	bl	8007adc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  DT_InitRegister();
 8007310:	f7fd f972 	bl	80045f8 <DT_InitRegister>

  // main signal function output (external)
  //DAC_InitDevices()
  SM_Init();
 8007314:	f7fd fe3a 	bl	8004f8c <SM_Init>
  FuncO_Init();
 8007318:	f7fd fb56 	bl	80049c8 <FuncO_Init>
  FuncO_ApplyPresetToSignal(eDefaultFuncPreset);
 800731c:	2000      	movs	r0, #0
 800731e:	f7fd fc0b 	bl	8004b38 <FuncO_ApplyPresetToSignal>
  FuncO_ApplyPresetToSync(eDefaultFuncPreset);
 8007322:	2000      	movs	r0, #0
 8007324:	f7fd fc62 	bl	8004bec <FuncO_ApplyPresetToSync>

  //TIM8->ARR = sin1_max_arr;

  // DC bias output (internal)
  HAL_DAC_Start(&hdac1, DAC1_CHANNEL_2);
 8007328:	2110      	movs	r1, #16
 800732a:	481b      	ldr	r0, [pc, #108]	; (8007398 <main+0xd0>)
 800732c:	f002 fb89 	bl	8009a42 <HAL_DAC_Start>
  // single clock to run all DAC channels. TODO add independent clocks
  //HAL_TIM_Base_Start(&htim8);
  //HAL_TIM_Base_Start(&htim2);

  // TIM2 - DAC TIMER
  OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
 8007330:	4b1a      	ldr	r3, [pc, #104]	; (800739c <main+0xd4>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a19      	ldr	r2, [pc, #100]	; (800739c <main+0xd4>)
 8007336:	f043 0301 	orr.w	r3, r3, #1
 800733a:	6013      	str	r3, [r2, #0]
  FreqO_ApplyPreset(eDefaultFreqPreset);
 800733c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007340:	f7fd fad8 	bl	80048f4 <FreqO_ApplyPreset>

#endif //DISABLE_ALL_TIMERS

  // DC bias inversion
  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, GPIO_PIN_SET);
 8007344:	2201      	movs	r2, #1
 8007346:	2108      	movs	r1, #8
 8007348:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800734c:	f003 fbc4 	bl	800aad8 <HAL_GPIO_WritePin>

  // PGA gain
  //GO_ApplyPreset_Fast(eDefaultGainPreset);
  VPP_ApplyPresetToSignal(eDefaultVppPreset);
 8007350:	2059      	movs	r0, #89	; 0x59
 8007352:	f7fd fef1 	bl	8005138 <VPP_ApplyPresetToSignal>
  //HAL_TIM_Base_Start_IT(&htim3);
#endif	//DISABLE_ALL_TIMERS


// http://www.ti.com/lit/ds/symlink/ts5a3357.pdf
  HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin6
 8007356:	2200      	movs	r2, #0
 8007358:	f44f 7180 	mov.w	r1, #256	; 0x100
 800735c:	4810      	ldr	r0, [pc, #64]	; (80073a0 <main+0xd8>)
 800735e:	f003 fbbb 	bl	800aad8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin5
 8007362:	2200      	movs	r2, #0
 8007364:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007368:	480d      	ldr	r0, [pc, #52]	; (80073a0 <main+0xd8>)
 800736a:	f003 fbb5 	bl	800aad8 <HAL_GPIO_WritePin>



#ifndef DISABLE_ALL_TIMERS
  // encoder input
  HAL_TIM_Base_Start(&htim1);		// enable encoder timer
 800736e:	480d      	ldr	r0, [pc, #52]	; (80073a4 <main+0xdc>)
 8007370:	f004 fcac 	bl	800bccc <HAL_TIM_Base_Start>
  //TIM1->DIER |= TIM_DIER_IDXIE;		// enable index interrupts

#endif	//DISABLE_ALL_TIMERS

  TIM6->PSC = 65535;
 8007374:	4b0c      	ldr	r3, [pc, #48]	; (80073a8 <main+0xe0>)
 8007376:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800737a:	629a      	str	r2, [r3, #40]	; 0x28
  TIM6->ARR = 65535;
 800737c:	4b0a      	ldr	r3, [pc, #40]	; (80073a8 <main+0xe0>)
 800737e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007382:	62da      	str	r2, [r3, #44]	; 0x2c



  // TFT lib enable
  DM_Init();
 8007384:	f7f9 fc5e 	bl	8000c44 <DM_Init>
  DM_PostInit();
 8007388:	f7f9 fc6a 	bl	8000c60 <DM_PostInit>

  IM_Init();
 800738c:	f7fc ffc0 	bl	8004310 <IM_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	EM_ProcessEvent();
 8007390:	f7fc f904 	bl	800359c <EM_ProcessEvent>
 8007394:	e7fc      	b.n	8007390 <main+0xc8>
 8007396:	bf00      	nop
 8007398:	20002610 	.word	0x20002610
 800739c:	40013400 	.word	0x40013400
 80073a0:	48000800 	.word	0x48000800
 80073a4:	20002878 	.word	0x20002878
 80073a8:	40001000 	.word	0x40001000

080073ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b0a8      	sub	sp, #160	; 0xa0
 80073b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80073b2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80073b6:	2238      	movs	r2, #56	; 0x38
 80073b8:	2100      	movs	r1, #0
 80073ba:	4618      	mov	r0, r3
 80073bc:	f006 feda 	bl	800e174 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80073c0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80073c4:	2200      	movs	r2, #0
 80073c6:	601a      	str	r2, [r3, #0]
 80073c8:	605a      	str	r2, [r3, #4]
 80073ca:	609a      	str	r2, [r3, #8]
 80073cc:	60da      	str	r2, [r3, #12]
 80073ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80073d0:	463b      	mov	r3, r7
 80073d2:	2254      	movs	r2, #84	; 0x54
 80073d4:	2100      	movs	r1, #0
 80073d6:	4618      	mov	r0, r3
 80073d8:	f006 fecc 	bl	800e174 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80073dc:	2000      	movs	r0, #0
 80073de:	f003 fb93 	bl	800ab08 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 80073e2:	2322      	movs	r3, #34	; 0x22
 80073e4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80073e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80073ea:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80073ec:	2340      	movs	r3, #64	; 0x40
 80073ee:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80073f0:	2301      	movs	r3, #1
 80073f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80073f6:	2302      	movs	r3, #2
 80073f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80073fc:	2302      	movs	r3, #2
 80073fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8007402:	2302      	movs	r3, #2
 8007404:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 42;
 8007408:	232a      	movs	r3, #42	; 0x2a
 800740a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV30;
 800740e:	231e      	movs	r3, #30
 8007410:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8007414:	2304      	movs	r3, #4
 8007416:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800741a:	2302      	movs	r3, #2
 800741c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007420:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007424:	4618      	mov	r0, r3
 8007426:	f003 fc13 	bl	800ac50 <HAL_RCC_OscConfig>
 800742a:	4603      	mov	r3, r0
 800742c:	2b00      	cmp	r3, #0
 800742e:	d001      	beq.n	8007434 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8007430:	f000 f82a 	bl	8007488 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007434:	230f      	movs	r3, #15
 8007436:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007438:	2303      	movs	r3, #3
 800743a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800743c:	2300      	movs	r3, #0
 800743e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8007440:	2300      	movs	r3, #0
 8007442:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007444:	2300      	movs	r3, #0
 8007446:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 8007448:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800744c:	2108      	movs	r1, #8
 800744e:	4618      	mov	r0, r3
 8007450:	f003 ff16 	bl	800b280 <HAL_RCC_ClockConfig>
 8007454:	4603      	mov	r3, r0
 8007456:	2b00      	cmp	r3, #0
 8007458:	d001      	beq.n	800745e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800745a:	f000 f815 	bl	8007488 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_ADC12;
 800745e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8007462:	603b      	str	r3, [r7, #0]
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8007464:	2300      	movs	r3, #0
 8007466:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8007468:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800746c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800746e:	463b      	mov	r3, r7
 8007470:	4618      	mov	r0, r3
 8007472:	f004 f8f5 	bl	800b660 <HAL_RCCEx_PeriphCLKConfig>
 8007476:	4603      	mov	r3, r0
 8007478:	2b00      	cmp	r3, #0
 800747a:	d001      	beq.n	8007480 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800747c:	f000 f804 	bl	8007488 <Error_Handler>
  }
}
 8007480:	bf00      	nop
 8007482:	37a0      	adds	r7, #160	; 0xa0
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}

08007488 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007488:	b480      	push	{r7}
 800748a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800748c:	bf00      	nop
 800748e:	46bd      	mov	sp, r7
 8007490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007494:	4770      	bx	lr

08007496 <LL_RNG_Enable>:
  * @rmtoll CR           RNGEN         LL_RNG_Enable
  * @param  RNGx RNG Instance
  * @retval None
  */
__STATIC_INLINE void LL_RNG_Enable(RNG_TypeDef *RNGx)
{
 8007496:	b480      	push	{r7}
 8007498:	b083      	sub	sp, #12
 800749a:	af00      	add	r7, sp, #0
 800749c:	6078      	str	r0, [r7, #4]
  SET_BIT(RNGx->CR, RNG_CR_RNGEN);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f043 0204 	orr.w	r2, r3, #4
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	601a      	str	r2, [r3, #0]
}
 80074aa:	bf00      	nop
 80074ac:	370c      	adds	r7, #12
 80074ae:	46bd      	mov	sp, r7
 80074b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b4:	4770      	bx	lr
	...

080074b8 <LL_AHB2_GRP1_EnableClock>:
{
 80074b8:	b480      	push	{r7}
 80074ba:	b085      	sub	sp, #20
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80074c0:	4b08      	ldr	r3, [pc, #32]	; (80074e4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80074c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80074c4:	4907      	ldr	r1, [pc, #28]	; (80074e4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	4313      	orrs	r3, r2
 80074ca:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80074cc:	4b05      	ldr	r3, [pc, #20]	; (80074e4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80074ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	4013      	ands	r3, r2
 80074d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80074d6:	68fb      	ldr	r3, [r7, #12]
}
 80074d8:	bf00      	nop
 80074da:	3714      	adds	r7, #20
 80074dc:	46bd      	mov	sp, r7
 80074de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e2:	4770      	bx	lr
 80074e4:	40021000 	.word	0x40021000

080074e8 <MX_RNG_Init>:

/* USER CODE END 0 */

/* RNG init function */
void MX_RNG_Init(void)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	af00      	add	r7, sp, #0

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_RNG);
 80074ec:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80074f0:	f7ff ffe2 	bl	80074b8 <LL_AHB2_GRP1_EnableClock>

  LL_RNG_Enable(RNG);
 80074f4:	4802      	ldr	r0, [pc, #8]	; (8007500 <MX_RNG_Init+0x18>)
 80074f6:	f7ff ffce 	bl	8007496 <LL_RNG_Enable>

}
 80074fa:	bf00      	nop
 80074fc:	bd80      	pop	{r7, pc}
 80074fe:	bf00      	nop
 8007500:	50060800 	.word	0x50060800

08007504 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8007508:	4b1b      	ldr	r3, [pc, #108]	; (8007578 <MX_SPI3_Init+0x74>)
 800750a:	4a1c      	ldr	r2, [pc, #112]	; (800757c <MX_SPI3_Init+0x78>)
 800750c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800750e:	4b1a      	ldr	r3, [pc, #104]	; (8007578 <MX_SPI3_Init+0x74>)
 8007510:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007514:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8007516:	4b18      	ldr	r3, [pc, #96]	; (8007578 <MX_SPI3_Init+0x74>)
 8007518:	2200      	movs	r2, #0
 800751a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800751c:	4b16      	ldr	r3, [pc, #88]	; (8007578 <MX_SPI3_Init+0x74>)
 800751e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8007522:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007524:	4b14      	ldr	r3, [pc, #80]	; (8007578 <MX_SPI3_Init+0x74>)
 8007526:	2200      	movs	r2, #0
 8007528:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800752a:	4b13      	ldr	r3, [pc, #76]	; (8007578 <MX_SPI3_Init+0x74>)
 800752c:	2200      	movs	r2, #0
 800752e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8007530:	4b11      	ldr	r3, [pc, #68]	; (8007578 <MX_SPI3_Init+0x74>)
 8007532:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007536:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8007538:	4b0f      	ldr	r3, [pc, #60]	; (8007578 <MX_SPI3_Init+0x74>)
 800753a:	2210      	movs	r2, #16
 800753c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800753e:	4b0e      	ldr	r3, [pc, #56]	; (8007578 <MX_SPI3_Init+0x74>)
 8007540:	2200      	movs	r2, #0
 8007542:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8007544:	4b0c      	ldr	r3, [pc, #48]	; (8007578 <MX_SPI3_Init+0x74>)
 8007546:	2200      	movs	r2, #0
 8007548:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800754a:	4b0b      	ldr	r3, [pc, #44]	; (8007578 <MX_SPI3_Init+0x74>)
 800754c:	2200      	movs	r2, #0
 800754e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8007550:	4b09      	ldr	r3, [pc, #36]	; (8007578 <MX_SPI3_Init+0x74>)
 8007552:	2207      	movs	r2, #7
 8007554:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8007556:	4b08      	ldr	r3, [pc, #32]	; (8007578 <MX_SPI3_Init+0x74>)
 8007558:	2200      	movs	r2, #0
 800755a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800755c:	4b06      	ldr	r3, [pc, #24]	; (8007578 <MX_SPI3_Init+0x74>)
 800755e:	2208      	movs	r2, #8
 8007560:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8007562:	4805      	ldr	r0, [pc, #20]	; (8007578 <MX_SPI3_Init+0x74>)
 8007564:	f004 fac8 	bl	800baf8 <HAL_SPI_Init>
 8007568:	4603      	mov	r3, r0
 800756a:	2b00      	cmp	r3, #0
 800756c:	d001      	beq.n	8007572 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800756e:	f7ff ff8b 	bl	8007488 <Error_Handler>
  }

}
 8007572:	bf00      	nop
 8007574:	bd80      	pop	{r7, pc}
 8007576:	bf00      	nop
 8007578:	200026e4 	.word	0x200026e4
 800757c:	40003c00 	.word	0x40003c00

08007580 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b08a      	sub	sp, #40	; 0x28
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007588:	f107 0314 	add.w	r3, r7, #20
 800758c:	2200      	movs	r2, #0
 800758e:	601a      	str	r2, [r3, #0]
 8007590:	605a      	str	r2, [r3, #4]
 8007592:	609a      	str	r2, [r3, #8]
 8007594:	60da      	str	r2, [r3, #12]
 8007596:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a17      	ldr	r2, [pc, #92]	; (80075fc <HAL_SPI_MspInit+0x7c>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d128      	bne.n	80075f4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80075a2:	4b17      	ldr	r3, [pc, #92]	; (8007600 <HAL_SPI_MspInit+0x80>)
 80075a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075a6:	4a16      	ldr	r2, [pc, #88]	; (8007600 <HAL_SPI_MspInit+0x80>)
 80075a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075ac:	6593      	str	r3, [r2, #88]	; 0x58
 80075ae:	4b14      	ldr	r3, [pc, #80]	; (8007600 <HAL_SPI_MspInit+0x80>)
 80075b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80075b6:	613b      	str	r3, [r7, #16]
 80075b8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80075ba:	4b11      	ldr	r3, [pc, #68]	; (8007600 <HAL_SPI_MspInit+0x80>)
 80075bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075be:	4a10      	ldr	r2, [pc, #64]	; (8007600 <HAL_SPI_MspInit+0x80>)
 80075c0:	f043 0304 	orr.w	r3, r3, #4
 80075c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80075c6:	4b0e      	ldr	r3, [pc, #56]	; (8007600 <HAL_SPI_MspInit+0x80>)
 80075c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075ca:	f003 0304 	and.w	r3, r3, #4
 80075ce:	60fb      	str	r3, [r7, #12]
 80075d0:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80075d2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80075d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80075d8:	2302      	movs	r3, #2
 80075da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075dc:	2300      	movs	r3, #0
 80075de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80075e0:	2300      	movs	r3, #0
 80075e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80075e4:	2306      	movs	r3, #6
 80075e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80075e8:	f107 0314 	add.w	r3, r7, #20
 80075ec:	4619      	mov	r1, r3
 80075ee:	4805      	ldr	r0, [pc, #20]	; (8007604 <HAL_SPI_MspInit+0x84>)
 80075f0:	f003 f8f0 	bl	800a7d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80075f4:	bf00      	nop
 80075f6:	3728      	adds	r7, #40	; 0x28
 80075f8:	46bd      	mov	sp, r7
 80075fa:	bd80      	pop	{r7, pc}
 80075fc:	40003c00 	.word	0x40003c00
 8007600:	40021000 	.word	0x40021000
 8007604:	48000800 	.word	0x48000800

08007608 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 8007608:	b480      	push	{r7}
 800760a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800760c:	4b05      	ldr	r3, [pc, #20]	; (8007624 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 800760e:	689b      	ldr	r3, [r3, #8]
 8007610:	4a04      	ldr	r2, [pc, #16]	; (8007624 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8007612:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007616:	6093      	str	r3, [r2, #8]
}
 8007618:	bf00      	nop
 800761a:	46bd      	mov	sp, r7
 800761c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007620:	4770      	bx	lr
 8007622:	bf00      	nop
 8007624:	40007000 	.word	0x40007000

08007628 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b082      	sub	sp, #8
 800762c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800762e:	4b0f      	ldr	r3, [pc, #60]	; (800766c <HAL_MspInit+0x44>)
 8007630:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007632:	4a0e      	ldr	r2, [pc, #56]	; (800766c <HAL_MspInit+0x44>)
 8007634:	f043 0301 	orr.w	r3, r3, #1
 8007638:	6613      	str	r3, [r2, #96]	; 0x60
 800763a:	4b0c      	ldr	r3, [pc, #48]	; (800766c <HAL_MspInit+0x44>)
 800763c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800763e:	f003 0301 	and.w	r3, r3, #1
 8007642:	607b      	str	r3, [r7, #4]
 8007644:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007646:	4b09      	ldr	r3, [pc, #36]	; (800766c <HAL_MspInit+0x44>)
 8007648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800764a:	4a08      	ldr	r2, [pc, #32]	; (800766c <HAL_MspInit+0x44>)
 800764c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007650:	6593      	str	r3, [r2, #88]	; 0x58
 8007652:	4b06      	ldr	r3, [pc, #24]	; (800766c <HAL_MspInit+0x44>)
 8007654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800765a:	603b      	str	r3, [r7, #0]
 800765c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 800765e:	f7ff ffd3 	bl	8007608 <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007662:	bf00      	nop
 8007664:	3708      	adds	r7, #8
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}
 800766a:	bf00      	nop
 800766c:	40021000 	.word	0x40021000

08007670 <LL_EXTI_IsActiveFlag_0_31>:
{
 8007670:	b480      	push	{r7}
 8007672:	b083      	sub	sp, #12
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8007678:	4b07      	ldr	r3, [pc, #28]	; (8007698 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 800767a:	695a      	ldr	r2, [r3, #20]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	4013      	ands	r3, r2
 8007680:	687a      	ldr	r2, [r7, #4]
 8007682:	429a      	cmp	r2, r3
 8007684:	d101      	bne.n	800768a <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8007686:	2301      	movs	r3, #1
 8007688:	e000      	b.n	800768c <LL_EXTI_IsActiveFlag_0_31+0x1c>
 800768a:	2300      	movs	r3, #0
}
 800768c:	4618      	mov	r0, r3
 800768e:	370c      	adds	r7, #12
 8007690:	46bd      	mov	sp, r7
 8007692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007696:	4770      	bx	lr
 8007698:	40010400 	.word	0x40010400

0800769c <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 800769c:	b480      	push	{r7}
 800769e:	b083      	sub	sp, #12
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 80076a4:	4a04      	ldr	r2, [pc, #16]	; (80076b8 <LL_EXTI_ClearFlag_0_31+0x1c>)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6153      	str	r3, [r2, #20]
}
 80076aa:	bf00      	nop
 80076ac:	370c      	adds	r7, #12
 80076ae:	46bd      	mov	sp, r7
 80076b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b4:	4770      	bx	lr
 80076b6:	bf00      	nop
 80076b8:	40010400 	.word	0x40010400

080076bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80076bc:	b480      	push	{r7}
 80076be:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80076c0:	bf00      	nop
 80076c2:	46bd      	mov	sp, r7
 80076c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c8:	4770      	bx	lr

080076ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80076ca:	b480      	push	{r7}
 80076cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80076ce:	e7fe      	b.n	80076ce <HardFault_Handler+0x4>

080076d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80076d0:	b480      	push	{r7}
 80076d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80076d4:	e7fe      	b.n	80076d4 <MemManage_Handler+0x4>

080076d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80076d6:	b480      	push	{r7}
 80076d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80076da:	e7fe      	b.n	80076da <BusFault_Handler+0x4>

080076dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80076dc:	b480      	push	{r7}
 80076de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80076e0:	e7fe      	b.n	80076e0 <UsageFault_Handler+0x4>

080076e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80076e2:	b480      	push	{r7}
 80076e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80076e6:	bf00      	nop
 80076e8:	46bd      	mov	sp, r7
 80076ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ee:	4770      	bx	lr

080076f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80076f0:	b480      	push	{r7}
 80076f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80076f4:	bf00      	nop
 80076f6:	46bd      	mov	sp, r7
 80076f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fc:	4770      	bx	lr

080076fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80076fe:	b480      	push	{r7}
 8007700:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007702:	bf00      	nop
 8007704:	46bd      	mov	sp, r7
 8007706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770a:	4770      	bx	lr

0800770c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007710:	f000 fce6 	bl	80080e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007714:	bf00      	nop
 8007716:	bd80      	pop	{r7, pc}

08007718 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

	IM_BTN3_EXTI0_Handler();
 800771c:	f7fc fe72 	bl	8004404 <IM_BTN3_EXTI0_Handler>

  /* USER CODE END EXTI0_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 8007720:	2001      	movs	r0, #1
 8007722:	f7ff ffa5 	bl	8007670 <LL_EXTI_IsActiveFlag_0_31>
 8007726:	4603      	mov	r3, r0
 8007728:	2b00      	cmp	r3, #0
 800772a:	d002      	beq.n	8007732 <EXTI0_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 800772c:	2001      	movs	r0, #1
 800772e:	f7ff ffb5 	bl	800769c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_0 */
  }
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8007732:	bf00      	nop
 8007734:	bd80      	pop	{r7, pc}

08007736 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8007736:	b580      	push	{r7, lr}
 8007738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

	IM_BTN4_EXTI1_Handler();
 800773a:	f7fc fe89 	bl	8004450 <IM_BTN4_EXTI1_Handler>

  /* USER CODE END EXTI1_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1) != RESET)
 800773e:	2002      	movs	r0, #2
 8007740:	f7ff ff96 	bl	8007670 <LL_EXTI_IsActiveFlag_0_31>
 8007744:	4603      	mov	r3, r0
 8007746:	2b00      	cmp	r3, #0
 8007748:	d002      	beq.n	8007750 <EXTI1_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_1);
 800774a:	2002      	movs	r0, #2
 800774c:	f7ff ffa6 	bl	800769c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_1 */
  }
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8007750:	bf00      	nop
 8007752:	bd80      	pop	{r7, pc}

08007754 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

	IM_ENC_EXTI2_Handler();
 8007758:	f7fc fea0 	bl	800449c <IM_ENC_EXTI2_Handler>

  /* USER CODE END EXTI2_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2) != RESET)
 800775c:	2004      	movs	r0, #4
 800775e:	f7ff ff87 	bl	8007670 <LL_EXTI_IsActiveFlag_0_31>
 8007762:	4603      	mov	r3, r0
 8007764:	2b00      	cmp	r3, #0
 8007766:	d002      	beq.n	800776e <EXTI2_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_2);
 8007768:	2004      	movs	r0, #4
 800776a:	f7ff ff97 	bl	800769c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_2 */
  }
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800776e:	bf00      	nop
 8007770:	bd80      	pop	{r7, pc}
	...

08007774 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8007778:	4802      	ldr	r0, [pc, #8]	; (8007784 <DMA1_Channel1_IRQHandler+0x10>)
 800777a:	f002 fedb 	bl	800a534 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800777e:	bf00      	nop
 8007780:	bd80      	pop	{r7, pc}
 8007782:	bf00      	nop
 8007784:	20002578 	.word	0x20002578

08007788 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 800778c:	4802      	ldr	r0, [pc, #8]	; (8007798 <DMA1_Channel2_IRQHandler+0x10>)
 800778e:	f002 fed1 	bl	800a534 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8007792:	bf00      	nop
 8007794:	bd80      	pop	{r7, pc}
 8007796:	bf00      	nop
 8007798:	20002624 	.word	0x20002624

0800779c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2_ch1);
 80077a0:	4802      	ldr	r0, [pc, #8]	; (80077ac <DMA1_Channel3_IRQHandler+0x10>)
 80077a2:	f002 fec7 	bl	800a534 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80077a6:	bf00      	nop
 80077a8:	bd80      	pop	{r7, pc}
 80077aa:	bf00      	nop
 80077ac:	20002684 	.word	0x20002684

080077b0 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

	DM_UpdateDisplay();
 80077b4:	f7f9 fa72 	bl	8000c9c <DM_UpdateDisplay>

	IM_ENC_DIRF_Handler();
 80077b8:	f7fc fe96 	bl	80044e8 <IM_ENC_DIRF_Handler>

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80077bc:	4803      	ldr	r0, [pc, #12]	; (80077cc <TIM1_BRK_TIM15_IRQHandler+0x1c>)
 80077be:	f004 fbe6 	bl	800bf8e <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 80077c2:	4803      	ldr	r0, [pc, #12]	; (80077d0 <TIM1_BRK_TIM15_IRQHandler+0x20>)
 80077c4:	f004 fbe3 	bl	800bf8e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80077c8:	bf00      	nop
 80077ca:	bd80      	pop	{r7, pc}
 80077cc:	20002878 	.word	0x20002878
 80077d0:	20002794 	.word	0x20002794

080077d4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80077d8:	4802      	ldr	r0, [pc, #8]	; (80077e4 <TIM3_IRQHandler+0x10>)
 80077da:	f004 fbd8 	bl	800bf8e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80077de:	bf00      	nop
 80077e0:	bd80      	pop	{r7, pc}
 80077e2:	bf00      	nop
 80077e4:	2000282c 	.word	0x2000282c

080077e8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	IM_BTN1_EXTI14_Handler();
 80077ec:	f7fc fdba 	bl	8004364 <IM_BTN1_EXTI14_Handler>
	IM_BTN2_EXTI15_Handler();
 80077f0:	f7fc fde0 	bl	80043b4 <IM_BTN2_EXTI15_Handler>

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14) != RESET)
 80077f4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80077f8:	f7ff ff3a 	bl	8007670 <LL_EXTI_IsActiveFlag_0_31>
 80077fc:	4603      	mov	r3, r0
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d003      	beq.n	800780a <EXTI15_10_IRQHandler+0x22>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_14);
 8007802:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8007806:	f7ff ff49 	bl	800769c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_14 */
    
    /* USER CODE END LL_EXTI_LINE_14 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15) != RESET)
 800780a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800780e:	f7ff ff2f 	bl	8007670 <LL_EXTI_IsActiveFlag_0_31>
 8007812:	4603      	mov	r3, r0
 8007814:	2b00      	cmp	r3, #0
 8007816:	d003      	beq.n	8007820 <EXTI15_10_IRQHandler+0x38>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_15);
 8007818:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800781c:	f7ff ff3e 	bl	800769c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_15 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8007820:	bf00      	nop
 8007822:	bd80      	pop	{r7, pc}

08007824 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	IM_SWEEPINCREMENT_TIM_IRQHandler();
 8007828:	f7fc fd82 	bl	8004330 <IM_SWEEPINCREMENT_TIM_IRQHandler>
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800782c:	4802      	ldr	r0, [pc, #8]	; (8007838 <TIM5_IRQHandler+0x14>)
 800782e:	f004 fbae 	bl	800bf8e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8007832:	bf00      	nop
 8007834:	bd80      	pop	{r7, pc}
 8007836:	bf00      	nop
 8007838:	200027e0 	.word	0x200027e0

0800783c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b086      	sub	sp, #24
 8007840:	af00      	add	r7, sp, #0
 8007842:	60f8      	str	r0, [r7, #12]
 8007844:	60b9      	str	r1, [r7, #8]
 8007846:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007848:	2300      	movs	r3, #0
 800784a:	617b      	str	r3, [r7, #20]
 800784c:	e00a      	b.n	8007864 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800784e:	f3af 8000 	nop.w
 8007852:	4601      	mov	r1, r0
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	1c5a      	adds	r2, r3, #1
 8007858:	60ba      	str	r2, [r7, #8]
 800785a:	b2ca      	uxtb	r2, r1
 800785c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	3301      	adds	r3, #1
 8007862:	617b      	str	r3, [r7, #20]
 8007864:	697a      	ldr	r2, [r7, #20]
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	429a      	cmp	r2, r3
 800786a:	dbf0      	blt.n	800784e <_read+0x12>
	}

return len;
 800786c:	687b      	ldr	r3, [r7, #4]
}
 800786e:	4618      	mov	r0, r3
 8007870:	3718      	adds	r7, #24
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}

08007876 <_close>:
	}
	return len;
}

int _close(int file)
{
 8007876:	b480      	push	{r7}
 8007878:	b083      	sub	sp, #12
 800787a:	af00      	add	r7, sp, #0
 800787c:	6078      	str	r0, [r7, #4]
	return -1;
 800787e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007882:	4618      	mov	r0, r3
 8007884:	370c      	adds	r7, #12
 8007886:	46bd      	mov	sp, r7
 8007888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788c:	4770      	bx	lr

0800788e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800788e:	b480      	push	{r7}
 8007890:	b083      	sub	sp, #12
 8007892:	af00      	add	r7, sp, #0
 8007894:	6078      	str	r0, [r7, #4]
 8007896:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800789e:	605a      	str	r2, [r3, #4]
	return 0;
 80078a0:	2300      	movs	r3, #0
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	370c      	adds	r7, #12
 80078a6:	46bd      	mov	sp, r7
 80078a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ac:	4770      	bx	lr

080078ae <_isatty>:

int _isatty(int file)
{
 80078ae:	b480      	push	{r7}
 80078b0:	b083      	sub	sp, #12
 80078b2:	af00      	add	r7, sp, #0
 80078b4:	6078      	str	r0, [r7, #4]
	return 1;
 80078b6:	2301      	movs	r3, #1
}
 80078b8:	4618      	mov	r0, r3
 80078ba:	370c      	adds	r7, #12
 80078bc:	46bd      	mov	sp, r7
 80078be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c2:	4770      	bx	lr

080078c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b085      	sub	sp, #20
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	60f8      	str	r0, [r7, #12]
 80078cc:	60b9      	str	r1, [r7, #8]
 80078ce:	607a      	str	r2, [r7, #4]
	return 0;
 80078d0:	2300      	movs	r3, #0
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3714      	adds	r7, #20
 80078d6:	46bd      	mov	sp, r7
 80078d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078dc:	4770      	bx	lr
	...

080078e0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b084      	sub	sp, #16
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80078e8:	4b11      	ldr	r3, [pc, #68]	; (8007930 <_sbrk+0x50>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d102      	bne.n	80078f6 <_sbrk+0x16>
		heap_end = &end;
 80078f0:	4b0f      	ldr	r3, [pc, #60]	; (8007930 <_sbrk+0x50>)
 80078f2:	4a10      	ldr	r2, [pc, #64]	; (8007934 <_sbrk+0x54>)
 80078f4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80078f6:	4b0e      	ldr	r3, [pc, #56]	; (8007930 <_sbrk+0x50>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80078fc:	4b0c      	ldr	r3, [pc, #48]	; (8007930 <_sbrk+0x50>)
 80078fe:	681a      	ldr	r2, [r3, #0]
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	4413      	add	r3, r2
 8007904:	466a      	mov	r2, sp
 8007906:	4293      	cmp	r3, r2
 8007908:	d907      	bls.n	800791a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800790a:	f006 fc09 	bl	800e120 <__errno>
 800790e:	4602      	mov	r2, r0
 8007910:	230c      	movs	r3, #12
 8007912:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8007914:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007918:	e006      	b.n	8007928 <_sbrk+0x48>
	}

	heap_end += incr;
 800791a:	4b05      	ldr	r3, [pc, #20]	; (8007930 <_sbrk+0x50>)
 800791c:	681a      	ldr	r2, [r3, #0]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	4413      	add	r3, r2
 8007922:	4a03      	ldr	r2, [pc, #12]	; (8007930 <_sbrk+0x50>)
 8007924:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8007926:	68fb      	ldr	r3, [r7, #12]
}
 8007928:	4618      	mov	r0, r3
 800792a:	3710      	adds	r7, #16
 800792c:	46bd      	mov	sp, r7
 800792e:	bd80      	pop	{r7, pc}
 8007930:	20001f24 	.word	0x20001f24
 8007934:	20002968 	.word	0x20002968

08007938 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8007938:	b480      	push	{r7}
 800793a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800793c:	4b08      	ldr	r3, [pc, #32]	; (8007960 <SystemInit+0x28>)
 800793e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007942:	4a07      	ldr	r2, [pc, #28]	; (8007960 <SystemInit+0x28>)
 8007944:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007948:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800794c:	4b04      	ldr	r3, [pc, #16]	; (8007960 <SystemInit+0x28>)
 800794e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007952:	609a      	str	r2, [r3, #8]
#endif
}
 8007954:	bf00      	nop
 8007956:	46bd      	mov	sp, r7
 8007958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795c:	4770      	bx	lr
 800795e:	bf00      	nop
 8007960:	e000ed00 	.word	0xe000ed00

08007964 <MX_TIM1_Init>:
TIM_HandleTypeDef htim15;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b09a      	sub	sp, #104	; 0x68
 8007968:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 800796a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800796e:	2224      	movs	r2, #36	; 0x24
 8007970:	2100      	movs	r1, #0
 8007972:	4618      	mov	r0, r3
 8007974:	f006 fbfe 	bl	800e174 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007978:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800797c:	2200      	movs	r2, #0
 800797e:	601a      	str	r2, [r3, #0]
 8007980:	605a      	str	r2, [r3, #4]
 8007982:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8007984:	1d3b      	adds	r3, r7, #4
 8007986:	2234      	movs	r2, #52	; 0x34
 8007988:	2100      	movs	r1, #0
 800798a:	4618      	mov	r0, r3
 800798c:	f006 fbf2 	bl	800e174 <memset>

  htim1.Instance = TIM1;
 8007990:	4b2a      	ldr	r3, [pc, #168]	; (8007a3c <MX_TIM1_Init+0xd8>)
 8007992:	4a2b      	ldr	r2, [pc, #172]	; (8007a40 <MX_TIM1_Init+0xdc>)
 8007994:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8007996:	4b29      	ldr	r3, [pc, #164]	; (8007a3c <MX_TIM1_Init+0xd8>)
 8007998:	2200      	movs	r2, #0
 800799a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 800799c:	4b27      	ldr	r3, [pc, #156]	; (8007a3c <MX_TIM1_Init+0xd8>)
 800799e:	2240      	movs	r2, #64	; 0x40
 80079a0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024;
 80079a2:	4b26      	ldr	r3, [pc, #152]	; (8007a3c <MX_TIM1_Init+0xd8>)
 80079a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80079a8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80079aa:	4b24      	ldr	r3, [pc, #144]	; (8007a3c <MX_TIM1_Init+0xd8>)
 80079ac:	2200      	movs	r2, #0
 80079ae:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80079b0:	4b22      	ldr	r3, [pc, #136]	; (8007a3c <MX_TIM1_Init+0xd8>)
 80079b2:	2200      	movs	r2, #0
 80079b4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80079b6:	4b21      	ldr	r3, [pc, #132]	; (8007a3c <MX_TIM1_Init+0xd8>)
 80079b8:	2280      	movs	r2, #128	; 0x80
 80079ba:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80079bc:	2303      	movs	r3, #3
 80079be:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80079c0:	2300      	movs	r3, #0
 80079c2:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80079c4:	2301      	movs	r3, #1
 80079c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80079c8:	2300      	movs	r3, #0
 80079ca:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 80079cc:	2300      	movs	r3, #0
 80079ce:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80079d0:	2300      	movs	r3, #0
 80079d2:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80079d4:	2301      	movs	r3, #1
 80079d6:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80079d8:	2300      	movs	r3, #0
 80079da:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 80079dc:	2300      	movs	r3, #0
 80079de:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80079e0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80079e4:	4619      	mov	r1, r3
 80079e6:	4815      	ldr	r0, [pc, #84]	; (8007a3c <MX_TIM1_Init+0xd8>)
 80079e8:	f004 fa2b 	bl	800be42 <HAL_TIM_Encoder_Init>
 80079ec:	4603      	mov	r3, r0
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d001      	beq.n	80079f6 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80079f2:	f7ff fd49 	bl	8007488 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80079f6:	2320      	movs	r3, #32
 80079f8:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80079fa:	2300      	movs	r3, #0
 80079fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80079fe:	2300      	movs	r3, #0
 8007a00:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8007a02:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007a06:	4619      	mov	r1, r3
 8007a08:	480c      	ldr	r0, [pc, #48]	; (8007a3c <MX_TIM1_Init+0xd8>)
 8007a0a:	f004 fea5 	bl	800c758 <HAL_TIMEx_MasterConfigSynchronization>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d001      	beq.n	8007a18 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8007a14:	f7ff fd38 	bl	8007488 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8007a18:	2300      	movs	r3, #0
 8007a1a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8007a20:	1d3b      	adds	r3, r7, #4
 8007a22:	4619      	mov	r1, r3
 8007a24:	4805      	ldr	r0, [pc, #20]	; (8007a3c <MX_TIM1_Init+0xd8>)
 8007a26:	f004 ff2d 	bl	800c884 <HAL_TIMEx_ConfigBreakDeadTime>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d001      	beq.n	8007a34 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8007a30:	f7ff fd2a 	bl	8007488 <Error_Handler>
  }

}
 8007a34:	bf00      	nop
 8007a36:	3768      	adds	r7, #104	; 0x68
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	bd80      	pop	{r7, pc}
 8007a3c:	20002878 	.word	0x20002878
 8007a40:	40012c00 	.word	0x40012c00

08007a44 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b088      	sub	sp, #32
 8007a48:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007a4a:	f107 0310 	add.w	r3, r7, #16
 8007a4e:	2200      	movs	r2, #0
 8007a50:	601a      	str	r2, [r3, #0]
 8007a52:	605a      	str	r2, [r3, #4]
 8007a54:	609a      	str	r2, [r3, #8]
 8007a56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007a58:	1d3b      	adds	r3, r7, #4
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	601a      	str	r2, [r3, #0]
 8007a5e:	605a      	str	r2, [r3, #4]
 8007a60:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8007a62:	4b1d      	ldr	r3, [pc, #116]	; (8007ad8 <MX_TIM2_Init+0x94>)
 8007a64:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007a68:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8007a6a:	4b1b      	ldr	r3, [pc, #108]	; (8007ad8 <MX_TIM2_Init+0x94>)
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007a70:	4b19      	ldr	r3, [pc, #100]	; (8007ad8 <MX_TIM2_Init+0x94>)
 8007a72:	2200      	movs	r2, #0
 8007a74:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 8007a76:	4b18      	ldr	r3, [pc, #96]	; (8007ad8 <MX_TIM2_Init+0x94>)
 8007a78:	2201      	movs	r2, #1
 8007a7a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007a7c:	4b16      	ldr	r3, [pc, #88]	; (8007ad8 <MX_TIM2_Init+0x94>)
 8007a7e:	2200      	movs	r2, #0
 8007a80:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8007a82:	4b15      	ldr	r3, [pc, #84]	; (8007ad8 <MX_TIM2_Init+0x94>)
 8007a84:	2280      	movs	r2, #128	; 0x80
 8007a86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8007a88:	4813      	ldr	r0, [pc, #76]	; (8007ad8 <MX_TIM2_Init+0x94>)
 8007a8a:	f004 f8c7 	bl	800bc1c <HAL_TIM_Base_Init>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d001      	beq.n	8007a98 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8007a94:	f7ff fcf8 	bl	8007488 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007a98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007a9c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8007a9e:	f107 0310 	add.w	r3, r7, #16
 8007aa2:	4619      	mov	r1, r3
 8007aa4:	480c      	ldr	r0, [pc, #48]	; (8007ad8 <MX_TIM2_Init+0x94>)
 8007aa6:	f004 fbf1 	bl	800c28c <HAL_TIM_ConfigClockSource>
 8007aaa:	4603      	mov	r3, r0
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d001      	beq.n	8007ab4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8007ab0:	f7ff fcea 	bl	8007488 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8007ab4:	2320      	movs	r3, #32
 8007ab6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8007abc:	1d3b      	adds	r3, r7, #4
 8007abe:	4619      	mov	r1, r3
 8007ac0:	4805      	ldr	r0, [pc, #20]	; (8007ad8 <MX_TIM2_Init+0x94>)
 8007ac2:	f004 fe49 	bl	800c758 <HAL_TIMEx_MasterConfigSynchronization>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d001      	beq.n	8007ad0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8007acc:	f7ff fcdc 	bl	8007488 <Error_Handler>
  }

}
 8007ad0:	bf00      	nop
 8007ad2:	3720      	adds	r7, #32
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}
 8007ad8:	200028c4 	.word	0x200028c4

08007adc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b088      	sub	sp, #32
 8007ae0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007ae2:	f107 0310 	add.w	r3, r7, #16
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	601a      	str	r2, [r3, #0]
 8007aea:	605a      	str	r2, [r3, #4]
 8007aec:	609a      	str	r2, [r3, #8]
 8007aee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007af0:	1d3b      	adds	r3, r7, #4
 8007af2:	2200      	movs	r2, #0
 8007af4:	601a      	str	r2, [r3, #0]
 8007af6:	605a      	str	r2, [r3, #4]
 8007af8:	609a      	str	r2, [r3, #8]

  htim3.Instance = TIM3;
 8007afa:	4b1d      	ldr	r3, [pc, #116]	; (8007b70 <MX_TIM3_Init+0x94>)
 8007afc:	4a1d      	ldr	r2, [pc, #116]	; (8007b74 <MX_TIM3_Init+0x98>)
 8007afe:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8007b00:	4b1b      	ldr	r3, [pc, #108]	; (8007b70 <MX_TIM3_Init+0x94>)
 8007b02:	2200      	movs	r2, #0
 8007b04:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8007b06:	4b1a      	ldr	r3, [pc, #104]	; (8007b70 <MX_TIM3_Init+0x94>)
 8007b08:	2210      	movs	r2, #16
 8007b0a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1;
 8007b0c:	4b18      	ldr	r3, [pc, #96]	; (8007b70 <MX_TIM3_Init+0x94>)
 8007b0e:	2201      	movs	r2, #1
 8007b10:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8007b12:	4b17      	ldr	r3, [pc, #92]	; (8007b70 <MX_TIM3_Init+0x94>)
 8007b14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b18:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007b1a:	4b15      	ldr	r3, [pc, #84]	; (8007b70 <MX_TIM3_Init+0x94>)
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8007b20:	4813      	ldr	r0, [pc, #76]	; (8007b70 <MX_TIM3_Init+0x94>)
 8007b22:	f004 f87b 	bl	800bc1c <HAL_TIM_Base_Init>
 8007b26:	4603      	mov	r3, r0
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d001      	beq.n	8007b30 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8007b2c:	f7ff fcac 	bl	8007488 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007b30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007b34:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8007b36:	f107 0310 	add.w	r3, r7, #16
 8007b3a:	4619      	mov	r1, r3
 8007b3c:	480c      	ldr	r0, [pc, #48]	; (8007b70 <MX_TIM3_Init+0x94>)
 8007b3e:	f004 fba5 	bl	800c28c <HAL_TIM_ConfigClockSource>
 8007b42:	4603      	mov	r3, r0
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d001      	beq.n	8007b4c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8007b48:	f7ff fc9e 	bl	8007488 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007b50:	2300      	movs	r3, #0
 8007b52:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8007b54:	1d3b      	adds	r3, r7, #4
 8007b56:	4619      	mov	r1, r3
 8007b58:	4805      	ldr	r0, [pc, #20]	; (8007b70 <MX_TIM3_Init+0x94>)
 8007b5a:	f004 fdfd 	bl	800c758 <HAL_TIMEx_MasterConfigSynchronization>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d001      	beq.n	8007b68 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8007b64:	f7ff fc90 	bl	8007488 <Error_Handler>
  }

}
 8007b68:	bf00      	nop
 8007b6a:	3720      	adds	r7, #32
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}
 8007b70:	2000282c 	.word	0x2000282c
 8007b74:	40000400 	.word	0x40000400

08007b78 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b088      	sub	sp, #32
 8007b7c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007b7e:	f107 0310 	add.w	r3, r7, #16
 8007b82:	2200      	movs	r2, #0
 8007b84:	601a      	str	r2, [r3, #0]
 8007b86:	605a      	str	r2, [r3, #4]
 8007b88:	609a      	str	r2, [r3, #8]
 8007b8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007b8c:	1d3b      	adds	r3, r7, #4
 8007b8e:	2200      	movs	r2, #0
 8007b90:	601a      	str	r2, [r3, #0]
 8007b92:	605a      	str	r2, [r3, #4]
 8007b94:	609a      	str	r2, [r3, #8]

  htim5.Instance = TIM5;
 8007b96:	4b1d      	ldr	r3, [pc, #116]	; (8007c0c <MX_TIM5_Init+0x94>)
 8007b98:	4a1d      	ldr	r2, [pc, #116]	; (8007c10 <MX_TIM5_Init+0x98>)
 8007b9a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8007b9c:	4b1b      	ldr	r3, [pc, #108]	; (8007c0c <MX_TIM5_Init+0x94>)
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007ba2:	4b1a      	ldr	r3, [pc, #104]	; (8007c0c <MX_TIM5_Init+0x94>)
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1024;
 8007ba8:	4b18      	ldr	r3, [pc, #96]	; (8007c0c <MX_TIM5_Init+0x94>)
 8007baa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007bae:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007bb0:	4b16      	ldr	r3, [pc, #88]	; (8007c0c <MX_TIM5_Init+0x94>)
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8007bb6:	4b15      	ldr	r3, [pc, #84]	; (8007c0c <MX_TIM5_Init+0x94>)
 8007bb8:	2280      	movs	r2, #128	; 0x80
 8007bba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8007bbc:	4813      	ldr	r0, [pc, #76]	; (8007c0c <MX_TIM5_Init+0x94>)
 8007bbe:	f004 f82d 	bl	800bc1c <HAL_TIM_Base_Init>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d001      	beq.n	8007bcc <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8007bc8:	f7ff fc5e 	bl	8007488 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007bcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007bd0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8007bd2:	f107 0310 	add.w	r3, r7, #16
 8007bd6:	4619      	mov	r1, r3
 8007bd8:	480c      	ldr	r0, [pc, #48]	; (8007c0c <MX_TIM5_Init+0x94>)
 8007bda:	f004 fb57 	bl	800c28c <HAL_TIM_ConfigClockSource>
 8007bde:	4603      	mov	r3, r0
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d001      	beq.n	8007be8 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8007be4:	f7ff fc50 	bl	8007488 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007be8:	2300      	movs	r3, #0
 8007bea:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007bec:	2300      	movs	r3, #0
 8007bee:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8007bf0:	1d3b      	adds	r3, r7, #4
 8007bf2:	4619      	mov	r1, r3
 8007bf4:	4805      	ldr	r0, [pc, #20]	; (8007c0c <MX_TIM5_Init+0x94>)
 8007bf6:	f004 fdaf 	bl	800c758 <HAL_TIMEx_MasterConfigSynchronization>
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d001      	beq.n	8007c04 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8007c00:	f7ff fc42 	bl	8007488 <Error_Handler>
  }

}
 8007c04:	bf00      	nop
 8007c06:	3720      	adds	r7, #32
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bd80      	pop	{r7, pc}
 8007c0c:	200027e0 	.word	0x200027e0
 8007c10:	40000c00 	.word	0x40000c00

08007c14 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b094      	sub	sp, #80	; 0x50
 8007c18:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007c1a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007c1e:	2200      	movs	r2, #0
 8007c20:	601a      	str	r2, [r3, #0]
 8007c22:	605a      	str	r2, [r3, #4]
 8007c24:	609a      	str	r2, [r3, #8]
 8007c26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007c28:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	601a      	str	r2, [r3, #0]
 8007c30:	605a      	str	r2, [r3, #4]
 8007c32:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8007c34:	463b      	mov	r3, r7
 8007c36:	2234      	movs	r2, #52	; 0x34
 8007c38:	2100      	movs	r1, #0
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f006 fa9a 	bl	800e174 <memset>

  htim8.Instance = TIM8;
 8007c40:	4b26      	ldr	r3, [pc, #152]	; (8007cdc <MX_TIM8_Init+0xc8>)
 8007c42:	4a27      	ldr	r2, [pc, #156]	; (8007ce0 <MX_TIM8_Init+0xcc>)
 8007c44:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8007c46:	4b25      	ldr	r3, [pc, #148]	; (8007cdc <MX_TIM8_Init+0xc8>)
 8007c48:	2200      	movs	r2, #0
 8007c4a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007c4c:	4b23      	ldr	r3, [pc, #140]	; (8007cdc <MX_TIM8_Init+0xc8>)
 8007c4e:	2200      	movs	r2, #0
 8007c50:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1;
 8007c52:	4b22      	ldr	r3, [pc, #136]	; (8007cdc <MX_TIM8_Init+0xc8>)
 8007c54:	2201      	movs	r2, #1
 8007c56:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007c58:	4b20      	ldr	r3, [pc, #128]	; (8007cdc <MX_TIM8_Init+0xc8>)
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8007c5e:	4b1f      	ldr	r3, [pc, #124]	; (8007cdc <MX_TIM8_Init+0xc8>)
 8007c60:	2200      	movs	r2, #0
 8007c62:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8007c64:	4b1d      	ldr	r3, [pc, #116]	; (8007cdc <MX_TIM8_Init+0xc8>)
 8007c66:	2280      	movs	r2, #128	; 0x80
 8007c68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8007c6a:	481c      	ldr	r0, [pc, #112]	; (8007cdc <MX_TIM8_Init+0xc8>)
 8007c6c:	f003 ffd6 	bl	800bc1c <HAL_TIM_Base_Init>
 8007c70:	4603      	mov	r3, r0
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d001      	beq.n	8007c7a <MX_TIM8_Init+0x66>
  {
    Error_Handler();
 8007c76:	f7ff fc07 	bl	8007488 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007c7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007c7e:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8007c80:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007c84:	4619      	mov	r1, r3
 8007c86:	4815      	ldr	r0, [pc, #84]	; (8007cdc <MX_TIM8_Init+0xc8>)
 8007c88:	f004 fb00 	bl	800c28c <HAL_TIM_ConfigClockSource>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d001      	beq.n	8007c96 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8007c92:	f7ff fbf9 	bl	8007488 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8007c96:	2320      	movs	r3, #32
 8007c98:	637b      	str	r3, [r7, #52]	; 0x34
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8007ca2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007ca6:	4619      	mov	r1, r3
 8007ca8:	480c      	ldr	r0, [pc, #48]	; (8007cdc <MX_TIM8_Init+0xc8>)
 8007caa:	f004 fd55 	bl	800c758 <HAL_TIMEx_MasterConfigSynchronization>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d001      	beq.n	8007cb8 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8007cb4:	f7ff fbe8 	bl	8007488 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8007cb8:	2300      	movs	r3, #0
 8007cba:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8007cc0:	463b      	mov	r3, r7
 8007cc2:	4619      	mov	r1, r3
 8007cc4:	4805      	ldr	r0, [pc, #20]	; (8007cdc <MX_TIM8_Init+0xc8>)
 8007cc6:	f004 fddd 	bl	800c884 <HAL_TIMEx_ConfigBreakDeadTime>
 8007cca:	4603      	mov	r3, r0
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d001      	beq.n	8007cd4 <MX_TIM8_Init+0xc0>
  {
    Error_Handler();
 8007cd0:	f7ff fbda 	bl	8007488 <Error_Handler>
  }

}
 8007cd4:	bf00      	nop
 8007cd6:	3750      	adds	r7, #80	; 0x50
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}
 8007cdc:	20002748 	.word	0x20002748
 8007ce0:	40013400 	.word	0x40013400

08007ce4 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b088      	sub	sp, #32
 8007ce8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007cea:	f107 0310 	add.w	r3, r7, #16
 8007cee:	2200      	movs	r2, #0
 8007cf0:	601a      	str	r2, [r3, #0]
 8007cf2:	605a      	str	r2, [r3, #4]
 8007cf4:	609a      	str	r2, [r3, #8]
 8007cf6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007cf8:	1d3b      	adds	r3, r7, #4
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	601a      	str	r2, [r3, #0]
 8007cfe:	605a      	str	r2, [r3, #4]
 8007d00:	609a      	str	r2, [r3, #8]

  htim15.Instance = TIM15;
 8007d02:	4b1f      	ldr	r3, [pc, #124]	; (8007d80 <MX_TIM15_Init+0x9c>)
 8007d04:	4a1f      	ldr	r2, [pc, #124]	; (8007d84 <MX_TIM15_Init+0xa0>)
 8007d06:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 1024;
 8007d08:	4b1d      	ldr	r3, [pc, #116]	; (8007d80 <MX_TIM15_Init+0x9c>)
 8007d0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007d0e:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007d10:	4b1b      	ldr	r3, [pc, #108]	; (8007d80 <MX_TIM15_Init+0x9c>)
 8007d12:	2200      	movs	r2, #0
 8007d14:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1024;
 8007d16:	4b1a      	ldr	r3, [pc, #104]	; (8007d80 <MX_TIM15_Init+0x9c>)
 8007d18:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007d1c:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007d1e:	4b18      	ldr	r3, [pc, #96]	; (8007d80 <MX_TIM15_Init+0x9c>)
 8007d20:	2200      	movs	r2, #0
 8007d22:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8007d24:	4b16      	ldr	r3, [pc, #88]	; (8007d80 <MX_TIM15_Init+0x9c>)
 8007d26:	2200      	movs	r2, #0
 8007d28:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007d2a:	4b15      	ldr	r3, [pc, #84]	; (8007d80 <MX_TIM15_Init+0x9c>)
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8007d30:	4813      	ldr	r0, [pc, #76]	; (8007d80 <MX_TIM15_Init+0x9c>)
 8007d32:	f003 ff73 	bl	800bc1c <HAL_TIM_Base_Init>
 8007d36:	4603      	mov	r3, r0
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d001      	beq.n	8007d40 <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 8007d3c:	f7ff fba4 	bl	8007488 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007d40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007d44:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8007d46:	f107 0310 	add.w	r3, r7, #16
 8007d4a:	4619      	mov	r1, r3
 8007d4c:	480c      	ldr	r0, [pc, #48]	; (8007d80 <MX_TIM15_Init+0x9c>)
 8007d4e:	f004 fa9d 	bl	800c28c <HAL_TIM_ConfigClockSource>
 8007d52:	4603      	mov	r3, r0
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d001      	beq.n	8007d5c <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8007d58:	f7ff fb96 	bl	8007488 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007d60:	2300      	movs	r3, #0
 8007d62:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8007d64:	1d3b      	adds	r3, r7, #4
 8007d66:	4619      	mov	r1, r3
 8007d68:	4805      	ldr	r0, [pc, #20]	; (8007d80 <MX_TIM15_Init+0x9c>)
 8007d6a:	f004 fcf5 	bl	800c758 <HAL_TIMEx_MasterConfigSynchronization>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d001      	beq.n	8007d78 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8007d74:	f7ff fb88 	bl	8007488 <Error_Handler>
  }

}
 8007d78:	bf00      	nop
 8007d7a:	3720      	adds	r7, #32
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}
 8007d80:	20002794 	.word	0x20002794
 8007d84:	40014000 	.word	0x40014000

08007d88 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 8007d8c:	4b10      	ldr	r3, [pc, #64]	; (8007dd0 <MX_TIM16_Init+0x48>)
 8007d8e:	4a11      	ldr	r2, [pc, #68]	; (8007dd4 <MX_TIM16_Init+0x4c>)
 8007d90:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 65535;
 8007d92:	4b0f      	ldr	r3, [pc, #60]	; (8007dd0 <MX_TIM16_Init+0x48>)
 8007d94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007d98:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007d9a:	4b0d      	ldr	r3, [pc, #52]	; (8007dd0 <MX_TIM16_Init+0x48>)
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8007da0:	4b0b      	ldr	r3, [pc, #44]	; (8007dd0 <MX_TIM16_Init+0x48>)
 8007da2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007da6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007da8:	4b09      	ldr	r3, [pc, #36]	; (8007dd0 <MX_TIM16_Init+0x48>)
 8007daa:	2200      	movs	r2, #0
 8007dac:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8007dae:	4b08      	ldr	r3, [pc, #32]	; (8007dd0 <MX_TIM16_Init+0x48>)
 8007db0:	2200      	movs	r2, #0
 8007db2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007db4:	4b06      	ldr	r3, [pc, #24]	; (8007dd0 <MX_TIM16_Init+0x48>)
 8007db6:	2200      	movs	r2, #0
 8007db8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8007dba:	4805      	ldr	r0, [pc, #20]	; (8007dd0 <MX_TIM16_Init+0x48>)
 8007dbc:	f003 ff2e 	bl	800bc1c <HAL_TIM_Base_Init>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d001      	beq.n	8007dca <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8007dc6:	f7ff fb5f 	bl	8007488 <Error_Handler>
  }

}
 8007dca:	bf00      	nop
 8007dcc:	bd80      	pop	{r7, pc}
 8007dce:	bf00      	nop
 8007dd0:	20002910 	.word	0x20002910
 8007dd4:	40014400 	.word	0x40014400

08007dd8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b08a      	sub	sp, #40	; 0x28
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007de0:	f107 0314 	add.w	r3, r7, #20
 8007de4:	2200      	movs	r2, #0
 8007de6:	601a      	str	r2, [r3, #0]
 8007de8:	605a      	str	r2, [r3, #4]
 8007dea:	609a      	str	r2, [r3, #8]
 8007dec:	60da      	str	r2, [r3, #12]
 8007dee:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	4a1b      	ldr	r2, [pc, #108]	; (8007e64 <HAL_TIM_Encoder_MspInit+0x8c>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d12f      	bne.n	8007e5a <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8007dfa:	4b1b      	ldr	r3, [pc, #108]	; (8007e68 <HAL_TIM_Encoder_MspInit+0x90>)
 8007dfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dfe:	4a1a      	ldr	r2, [pc, #104]	; (8007e68 <HAL_TIM_Encoder_MspInit+0x90>)
 8007e00:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007e04:	6613      	str	r3, [r2, #96]	; 0x60
 8007e06:	4b18      	ldr	r3, [pc, #96]	; (8007e68 <HAL_TIM_Encoder_MspInit+0x90>)
 8007e08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e0e:	613b      	str	r3, [r7, #16]
 8007e10:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007e12:	4b15      	ldr	r3, [pc, #84]	; (8007e68 <HAL_TIM_Encoder_MspInit+0x90>)
 8007e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e16:	4a14      	ldr	r2, [pc, #80]	; (8007e68 <HAL_TIM_Encoder_MspInit+0x90>)
 8007e18:	f043 0304 	orr.w	r3, r3, #4
 8007e1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007e1e:	4b12      	ldr	r3, [pc, #72]	; (8007e68 <HAL_TIM_Encoder_MspInit+0x90>)
 8007e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e22:	f003 0304 	and.w	r3, r3, #4
 8007e26:	60fb      	str	r3, [r7, #12]
 8007e28:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8007e2a:	2303      	movs	r3, #3
 8007e2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e2e:	2302      	movs	r3, #2
 8007e30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e32:	2300      	movs	r3, #0
 8007e34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007e36:	2300      	movs	r3, #0
 8007e38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8007e3a:	2302      	movs	r3, #2
 8007e3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007e3e:	f107 0314 	add.w	r3, r7, #20
 8007e42:	4619      	mov	r1, r3
 8007e44:	4809      	ldr	r0, [pc, #36]	; (8007e6c <HAL_TIM_Encoder_MspInit+0x94>)
 8007e46:	f002 fcc5 	bl	800a7d4 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	2100      	movs	r1, #0
 8007e4e:	2018      	movs	r0, #24
 8007e50:	f001 fda1 	bl	8009996 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8007e54:	2018      	movs	r0, #24
 8007e56:	f001 fdb8 	bl	80099ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8007e5a:	bf00      	nop
 8007e5c:	3728      	adds	r7, #40	; 0x28
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}
 8007e62:	bf00      	nop
 8007e64:	40012c00 	.word	0x40012c00
 8007e68:	40021000 	.word	0x40021000
 8007e6c:	48000800 	.word	0x48000800

08007e70 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b08e      	sub	sp, #56	; 0x38
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	601a      	str	r2, [r3, #0]
 8007e80:	605a      	str	r2, [r3, #4]
 8007e82:	609a      	str	r2, [r3, #8]
 8007e84:	60da      	str	r2, [r3, #12]
 8007e86:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e90:	d10c      	bne.n	8007eac <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007e92:	4b4f      	ldr	r3, [pc, #316]	; (8007fd0 <HAL_TIM_Base_MspInit+0x160>)
 8007e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e96:	4a4e      	ldr	r2, [pc, #312]	; (8007fd0 <HAL_TIM_Base_MspInit+0x160>)
 8007e98:	f043 0301 	orr.w	r3, r3, #1
 8007e9c:	6593      	str	r3, [r2, #88]	; 0x58
 8007e9e:	4b4c      	ldr	r3, [pc, #304]	; (8007fd0 <HAL_TIM_Base_MspInit+0x160>)
 8007ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ea2:	f003 0301 	and.w	r3, r3, #1
 8007ea6:	623b      	str	r3, [r7, #32]
 8007ea8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_TIM16_CLK_ENABLE();
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8007eaa:	e08d      	b.n	8007fc8 <HAL_TIM_Base_MspInit+0x158>
  else if(tim_baseHandle->Instance==TIM3)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4a48      	ldr	r2, [pc, #288]	; (8007fd4 <HAL_TIM_Base_MspInit+0x164>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d114      	bne.n	8007ee0 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007eb6:	4b46      	ldr	r3, [pc, #280]	; (8007fd0 <HAL_TIM_Base_MspInit+0x160>)
 8007eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007eba:	4a45      	ldr	r2, [pc, #276]	; (8007fd0 <HAL_TIM_Base_MspInit+0x160>)
 8007ebc:	f043 0302 	orr.w	r3, r3, #2
 8007ec0:	6593      	str	r3, [r2, #88]	; 0x58
 8007ec2:	4b43      	ldr	r3, [pc, #268]	; (8007fd0 <HAL_TIM_Base_MspInit+0x160>)
 8007ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ec6:	f003 0302 	and.w	r3, r3, #2
 8007eca:	61fb      	str	r3, [r7, #28]
 8007ecc:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8007ece:	2200      	movs	r2, #0
 8007ed0:	2100      	movs	r1, #0
 8007ed2:	201d      	movs	r0, #29
 8007ed4:	f001 fd5f 	bl	8009996 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8007ed8:	201d      	movs	r0, #29
 8007eda:	f001 fd76 	bl	80099ca <HAL_NVIC_EnableIRQ>
}
 8007ede:	e073      	b.n	8007fc8 <HAL_TIM_Base_MspInit+0x158>
  else if(tim_baseHandle->Instance==TIM5)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	4a3c      	ldr	r2, [pc, #240]	; (8007fd8 <HAL_TIM_Base_MspInit+0x168>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d131      	bne.n	8007f4e <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8007eea:	4b39      	ldr	r3, [pc, #228]	; (8007fd0 <HAL_TIM_Base_MspInit+0x160>)
 8007eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007eee:	4a38      	ldr	r2, [pc, #224]	; (8007fd0 <HAL_TIM_Base_MspInit+0x160>)
 8007ef0:	f043 0308 	orr.w	r3, r3, #8
 8007ef4:	6593      	str	r3, [r2, #88]	; 0x58
 8007ef6:	4b36      	ldr	r3, [pc, #216]	; (8007fd0 <HAL_TIM_Base_MspInit+0x160>)
 8007ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007efa:	f003 0308 	and.w	r3, r3, #8
 8007efe:	61bb      	str	r3, [r7, #24]
 8007f00:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007f02:	4b33      	ldr	r3, [pc, #204]	; (8007fd0 <HAL_TIM_Base_MspInit+0x160>)
 8007f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f06:	4a32      	ldr	r2, [pc, #200]	; (8007fd0 <HAL_TIM_Base_MspInit+0x160>)
 8007f08:	f043 0301 	orr.w	r3, r3, #1
 8007f0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007f0e:	4b30      	ldr	r3, [pc, #192]	; (8007fd0 <HAL_TIM_Base_MspInit+0x160>)
 8007f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f12:	f003 0301 	and.w	r3, r3, #1
 8007f16:	617b      	str	r3, [r7, #20]
 8007f18:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f1e:	2302      	movs	r3, #2
 8007f20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f22:	2300      	movs	r3, #0
 8007f24:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007f26:	2300      	movs	r3, #0
 8007f28:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8007f2a:	2302      	movs	r3, #2
 8007f2c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007f2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f32:	4619      	mov	r1, r3
 8007f34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007f38:	f002 fc4c 	bl	800a7d4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 2, 0);
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	2102      	movs	r1, #2
 8007f40:	2032      	movs	r0, #50	; 0x32
 8007f42:	f001 fd28 	bl	8009996 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8007f46:	2032      	movs	r0, #50	; 0x32
 8007f48:	f001 fd3f 	bl	80099ca <HAL_NVIC_EnableIRQ>
}
 8007f4c:	e03c      	b.n	8007fc8 <HAL_TIM_Base_MspInit+0x158>
  else if(tim_baseHandle->Instance==TIM8)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4a22      	ldr	r2, [pc, #136]	; (8007fdc <HAL_TIM_Base_MspInit+0x16c>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d10c      	bne.n	8007f72 <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8007f58:	4b1d      	ldr	r3, [pc, #116]	; (8007fd0 <HAL_TIM_Base_MspInit+0x160>)
 8007f5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f5c:	4a1c      	ldr	r2, [pc, #112]	; (8007fd0 <HAL_TIM_Base_MspInit+0x160>)
 8007f5e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007f62:	6613      	str	r3, [r2, #96]	; 0x60
 8007f64:	4b1a      	ldr	r3, [pc, #104]	; (8007fd0 <HAL_TIM_Base_MspInit+0x160>)
 8007f66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007f6c:	613b      	str	r3, [r7, #16]
 8007f6e:	693b      	ldr	r3, [r7, #16]
}
 8007f70:	e02a      	b.n	8007fc8 <HAL_TIM_Base_MspInit+0x158>
  else if(tim_baseHandle->Instance==TIM15)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	4a1a      	ldr	r2, [pc, #104]	; (8007fe0 <HAL_TIM_Base_MspInit+0x170>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d114      	bne.n	8007fa6 <HAL_TIM_Base_MspInit+0x136>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8007f7c:	4b14      	ldr	r3, [pc, #80]	; (8007fd0 <HAL_TIM_Base_MspInit+0x160>)
 8007f7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f80:	4a13      	ldr	r2, [pc, #76]	; (8007fd0 <HAL_TIM_Base_MspInit+0x160>)
 8007f82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f86:	6613      	str	r3, [r2, #96]	; 0x60
 8007f88:	4b11      	ldr	r3, [pc, #68]	; (8007fd0 <HAL_TIM_Base_MspInit+0x160>)
 8007f8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f90:	60fb      	str	r3, [r7, #12]
 8007f92:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8007f94:	2200      	movs	r2, #0
 8007f96:	2100      	movs	r1, #0
 8007f98:	2018      	movs	r0, #24
 8007f9a:	f001 fcfc 	bl	8009996 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8007f9e:	2018      	movs	r0, #24
 8007fa0:	f001 fd13 	bl	80099ca <HAL_NVIC_EnableIRQ>
}
 8007fa4:	e010      	b.n	8007fc8 <HAL_TIM_Base_MspInit+0x158>
  else if(tim_baseHandle->Instance==TIM16)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4a0e      	ldr	r2, [pc, #56]	; (8007fe4 <HAL_TIM_Base_MspInit+0x174>)
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d10b      	bne.n	8007fc8 <HAL_TIM_Base_MspInit+0x158>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8007fb0:	4b07      	ldr	r3, [pc, #28]	; (8007fd0 <HAL_TIM_Base_MspInit+0x160>)
 8007fb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fb4:	4a06      	ldr	r2, [pc, #24]	; (8007fd0 <HAL_TIM_Base_MspInit+0x160>)
 8007fb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007fba:	6613      	str	r3, [r2, #96]	; 0x60
 8007fbc:	4b04      	ldr	r3, [pc, #16]	; (8007fd0 <HAL_TIM_Base_MspInit+0x160>)
 8007fbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fc4:	60bb      	str	r3, [r7, #8]
 8007fc6:	68bb      	ldr	r3, [r7, #8]
}
 8007fc8:	bf00      	nop
 8007fca:	3738      	adds	r7, #56	; 0x38
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}
 8007fd0:	40021000 	.word	0x40021000
 8007fd4:	40000400 	.word	0x40000400
 8007fd8:	40000c00 	.word	0x40000c00
 8007fdc:	40013400 	.word	0x40013400
 8007fe0:	40014000 	.word	0x40014000
 8007fe4:	40014400 	.word	0x40014400

08007fe8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8007fe8:	480d      	ldr	r0, [pc, #52]	; (8008020 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8007fea:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007fec:	480d      	ldr	r0, [pc, #52]	; (8008024 <LoopForever+0x6>)
  ldr r1, =_edata
 8007fee:	490e      	ldr	r1, [pc, #56]	; (8008028 <LoopForever+0xa>)
  ldr r2, =_sidata
 8007ff0:	4a0e      	ldr	r2, [pc, #56]	; (800802c <LoopForever+0xe>)
  movs r3, #0
 8007ff2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8007ff4:	e002      	b.n	8007ffc <LoopCopyDataInit>

08007ff6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007ff6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007ff8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007ffa:	3304      	adds	r3, #4

08007ffc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007ffc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007ffe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008000:	d3f9      	bcc.n	8007ff6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008002:	4a0b      	ldr	r2, [pc, #44]	; (8008030 <LoopForever+0x12>)
  ldr r4, =_ebss
 8008004:	4c0b      	ldr	r4, [pc, #44]	; (8008034 <LoopForever+0x16>)
  movs r3, #0
 8008006:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008008:	e001      	b.n	800800e <LoopFillZerobss>

0800800a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800800a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800800c:	3204      	adds	r2, #4

0800800e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800800e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008010:	d3fb      	bcc.n	800800a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8008012:	f7ff fc91 	bl	8007938 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008016:	f006 f889 	bl	800e12c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800801a:	f7ff f955 	bl	80072c8 <main>

0800801e <LoopForever>:

LoopForever:
    b LoopForever
 800801e:	e7fe      	b.n	800801e <LoopForever>
  ldr   r0, =_estack
 8008020:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8008024:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008028:	20001ec8 	.word	0x20001ec8
  ldr r2, =_sidata
 800802c:	08012260 	.word	0x08012260
  ldr r2, =_sbss
 8008030:	20001ec8 	.word	0x20001ec8
  ldr r4, =_ebss
 8008034:	20002964 	.word	0x20002964

08008038 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8008038:	e7fe      	b.n	8008038 <ADC1_2_IRQHandler>

0800803a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800803a:	b580      	push	{r7, lr}
 800803c:	b082      	sub	sp, #8
 800803e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8008040:	2300      	movs	r3, #0
 8008042:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008044:	2003      	movs	r0, #3
 8008046:	f001 fc9b 	bl	8009980 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800804a:	2000      	movs	r0, #0
 800804c:	f000 f80e 	bl	800806c <HAL_InitTick>
 8008050:	4603      	mov	r3, r0
 8008052:	2b00      	cmp	r3, #0
 8008054:	d002      	beq.n	800805c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8008056:	2301      	movs	r3, #1
 8008058:	71fb      	strb	r3, [r7, #7]
 800805a:	e001      	b.n	8008060 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800805c:	f7ff fae4 	bl	8007628 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8008060:	79fb      	ldrb	r3, [r7, #7]

}
 8008062:	4618      	mov	r0, r3
 8008064:	3708      	adds	r7, #8
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}
	...

0800806c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b084      	sub	sp, #16
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8008074:	2300      	movs	r3, #0
 8008076:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8008078:	4b16      	ldr	r3, [pc, #88]	; (80080d4 <HAL_InitTick+0x68>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d022      	beq.n	80080c6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8008080:	4b15      	ldr	r3, [pc, #84]	; (80080d8 <HAL_InitTick+0x6c>)
 8008082:	681a      	ldr	r2, [r3, #0]
 8008084:	4b13      	ldr	r3, [pc, #76]	; (80080d4 <HAL_InitTick+0x68>)
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800808c:	fbb1 f3f3 	udiv	r3, r1, r3
 8008090:	fbb2 f3f3 	udiv	r3, r2, r3
 8008094:	4618      	mov	r0, r3
 8008096:	f001 fca6 	bl	80099e6 <HAL_SYSTICK_Config>
 800809a:	4603      	mov	r3, r0
 800809c:	2b00      	cmp	r3, #0
 800809e:	d10f      	bne.n	80080c0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2b0f      	cmp	r3, #15
 80080a4:	d809      	bhi.n	80080ba <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80080a6:	2200      	movs	r2, #0
 80080a8:	6879      	ldr	r1, [r7, #4]
 80080aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80080ae:	f001 fc72 	bl	8009996 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80080b2:	4a0a      	ldr	r2, [pc, #40]	; (80080dc <HAL_InitTick+0x70>)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6013      	str	r3, [r2, #0]
 80080b8:	e007      	b.n	80080ca <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80080ba:	2301      	movs	r3, #1
 80080bc:	73fb      	strb	r3, [r7, #15]
 80080be:	e004      	b.n	80080ca <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80080c0:	2301      	movs	r3, #1
 80080c2:	73fb      	strb	r3, [r7, #15]
 80080c4:	e001      	b.n	80080ca <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80080c6:	2301      	movs	r3, #1
 80080c8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80080ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80080cc:	4618      	mov	r0, r3
 80080ce:	3710      	adds	r7, #16
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}
 80080d4:	20000cac 	.word	0x20000cac
 80080d8:	20000ca4 	.word	0x20000ca4
 80080dc:	20000ca8 	.word	0x20000ca8

080080e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80080e0:	b480      	push	{r7}
 80080e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80080e4:	4b05      	ldr	r3, [pc, #20]	; (80080fc <HAL_IncTick+0x1c>)
 80080e6:	681a      	ldr	r2, [r3, #0]
 80080e8:	4b05      	ldr	r3, [pc, #20]	; (8008100 <HAL_IncTick+0x20>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4413      	add	r3, r2
 80080ee:	4a03      	ldr	r2, [pc, #12]	; (80080fc <HAL_IncTick+0x1c>)
 80080f0:	6013      	str	r3, [r2, #0]
}
 80080f2:	bf00      	nop
 80080f4:	46bd      	mov	sp, r7
 80080f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fa:	4770      	bx	lr
 80080fc:	2000295c 	.word	0x2000295c
 8008100:	20000cac 	.word	0x20000cac

08008104 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008104:	b480      	push	{r7}
 8008106:	af00      	add	r7, sp, #0
  return uwTick;
 8008108:	4b03      	ldr	r3, [pc, #12]	; (8008118 <HAL_GetTick+0x14>)
 800810a:	681b      	ldr	r3, [r3, #0]
}
 800810c:	4618      	mov	r0, r3
 800810e:	46bd      	mov	sp, r7
 8008110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008114:	4770      	bx	lr
 8008116:	bf00      	nop
 8008118:	2000295c 	.word	0x2000295c

0800811c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b084      	sub	sp, #16
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008124:	f7ff ffee 	bl	8008104 <HAL_GetTick>
 8008128:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008134:	d004      	beq.n	8008140 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8008136:	4b09      	ldr	r3, [pc, #36]	; (800815c <HAL_Delay+0x40>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	68fa      	ldr	r2, [r7, #12]
 800813c:	4413      	add	r3, r2
 800813e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008140:	bf00      	nop
 8008142:	f7ff ffdf 	bl	8008104 <HAL_GetTick>
 8008146:	4602      	mov	r2, r0
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	1ad3      	subs	r3, r2, r3
 800814c:	68fa      	ldr	r2, [r7, #12]
 800814e:	429a      	cmp	r2, r3
 8008150:	d8f7      	bhi.n	8008142 <HAL_Delay+0x26>
  {
  }
}
 8008152:	bf00      	nop
 8008154:	3710      	adds	r7, #16
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}
 800815a:	bf00      	nop
 800815c:	20000cac 	.word	0x20000cac

08008160 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8008160:	b480      	push	{r7}
 8008162:	b083      	sub	sp, #12
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
 8008168:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	689b      	ldr	r3, [r3, #8]
 800816e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	431a      	orrs	r2, r3
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	609a      	str	r2, [r3, #8]
}
 800817a:	bf00      	nop
 800817c:	370c      	adds	r7, #12
 800817e:	46bd      	mov	sp, r7
 8008180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008184:	4770      	bx	lr

08008186 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8008186:	b480      	push	{r7}
 8008188:	b083      	sub	sp, #12
 800818a:	af00      	add	r7, sp, #0
 800818c:	6078      	str	r0, [r7, #4]
 800818e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	689b      	ldr	r3, [r3, #8]
 8008194:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	431a      	orrs	r2, r3
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	609a      	str	r2, [r3, #8]
}
 80081a0:	bf00      	nop
 80081a2:	370c      	adds	r7, #12
 80081a4:	46bd      	mov	sp, r7
 80081a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081aa:	4770      	bx	lr

080081ac <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80081ac:	b480      	push	{r7}
 80081ae:	b083      	sub	sp, #12
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	689b      	ldr	r3, [r3, #8]
 80081b8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80081bc:	4618      	mov	r0, r3
 80081be:	370c      	adds	r7, #12
 80081c0:	46bd      	mov	sp, r7
 80081c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c6:	4770      	bx	lr

080081c8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80081c8:	b490      	push	{r4, r7}
 80081ca:	b084      	sub	sp, #16
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	60f8      	str	r0, [r7, #12]
 80081d0:	60b9      	str	r1, [r7, #8]
 80081d2:	607a      	str	r2, [r7, #4]
 80081d4:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	3360      	adds	r3, #96	; 0x60
 80081da:	461a      	mov	r2, r3
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	009b      	lsls	r3, r3, #2
 80081e0:	4413      	add	r3, r2
 80081e2:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80081e4:	6822      	ldr	r2, [r4, #0]
 80081e6:	4b08      	ldr	r3, [pc, #32]	; (8008208 <LL_ADC_SetOffset+0x40>)
 80081e8:	4013      	ands	r3, r2
 80081ea:	687a      	ldr	r2, [r7, #4]
 80081ec:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80081f0:	683a      	ldr	r2, [r7, #0]
 80081f2:	430a      	orrs	r2, r1
 80081f4:	4313      	orrs	r3, r2
 80081f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80081fa:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80081fc:	bf00      	nop
 80081fe:	3710      	adds	r7, #16
 8008200:	46bd      	mov	sp, r7
 8008202:	bc90      	pop	{r4, r7}
 8008204:	4770      	bx	lr
 8008206:	bf00      	nop
 8008208:	03fff000 	.word	0x03fff000

0800820c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800820c:	b490      	push	{r4, r7}
 800820e:	b082      	sub	sp, #8
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
 8008214:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	3360      	adds	r3, #96	; 0x60
 800821a:	461a      	mov	r2, r3
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	009b      	lsls	r3, r3, #2
 8008220:	4413      	add	r3, r2
 8008222:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8008224:	6823      	ldr	r3, [r4, #0]
 8008226:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800822a:	4618      	mov	r0, r3
 800822c:	3708      	adds	r7, #8
 800822e:	46bd      	mov	sp, r7
 8008230:	bc90      	pop	{r4, r7}
 8008232:	4770      	bx	lr

08008234 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8008234:	b490      	push	{r4, r7}
 8008236:	b084      	sub	sp, #16
 8008238:	af00      	add	r7, sp, #0
 800823a:	60f8      	str	r0, [r7, #12]
 800823c:	60b9      	str	r1, [r7, #8]
 800823e:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	3360      	adds	r3, #96	; 0x60
 8008244:	461a      	mov	r2, r3
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	009b      	lsls	r3, r3, #2
 800824a:	4413      	add	r3, r2
 800824c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800824e:	6823      	ldr	r3, [r4, #0]
 8008250:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	4313      	orrs	r3, r2
 8008258:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800825a:	bf00      	nop
 800825c:	3710      	adds	r7, #16
 800825e:	46bd      	mov	sp, r7
 8008260:	bc90      	pop	{r4, r7}
 8008262:	4770      	bx	lr

08008264 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8008264:	b490      	push	{r4, r7}
 8008266:	b084      	sub	sp, #16
 8008268:	af00      	add	r7, sp, #0
 800826a:	60f8      	str	r0, [r7, #12]
 800826c:	60b9      	str	r1, [r7, #8]
 800826e:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	3360      	adds	r3, #96	; 0x60
 8008274:	461a      	mov	r2, r3
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	009b      	lsls	r3, r3, #2
 800827a:	4413      	add	r3, r2
 800827c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800827e:	6823      	ldr	r3, [r4, #0]
 8008280:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	4313      	orrs	r3, r2
 8008288:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800828a:	bf00      	nop
 800828c:	3710      	adds	r7, #16
 800828e:	46bd      	mov	sp, r7
 8008290:	bc90      	pop	{r4, r7}
 8008292:	4770      	bx	lr

08008294 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8008294:	b490      	push	{r4, r7}
 8008296:	b084      	sub	sp, #16
 8008298:	af00      	add	r7, sp, #0
 800829a:	60f8      	str	r0, [r7, #12]
 800829c:	60b9      	str	r1, [r7, #8]
 800829e:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	3360      	adds	r3, #96	; 0x60
 80082a4:	461a      	mov	r2, r3
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	009b      	lsls	r3, r3, #2
 80082aa:	4413      	add	r3, r2
 80082ac:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80082ae:	6823      	ldr	r3, [r4, #0]
 80082b0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	4313      	orrs	r3, r2
 80082b8:	6023      	str	r3, [r4, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80082ba:	bf00      	nop
 80082bc:	3710      	adds	r7, #16
 80082be:	46bd      	mov	sp, r7
 80082c0:	bc90      	pop	{r4, r7}
 80082c2:	4770      	bx	lr

080082c4 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80082c4:	b480      	push	{r7}
 80082c6:	b083      	sub	sp, #12
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
 80082cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	695b      	ldr	r3, [r3, #20]
 80082d2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	431a      	orrs	r2, r3
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	615a      	str	r2, [r3, #20]
}
 80082de:	bf00      	nop
 80082e0:	370c      	adds	r7, #12
 80082e2:	46bd      	mov	sp, r7
 80082e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e8:	4770      	bx	lr

080082ea <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80082ea:	b490      	push	{r4, r7}
 80082ec:	b084      	sub	sp, #16
 80082ee:	af00      	add	r7, sp, #0
 80082f0:	60f8      	str	r0, [r7, #12]
 80082f2:	60b9      	str	r1, [r7, #8]
 80082f4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	3330      	adds	r3, #48	; 0x30
 80082fa:	461a      	mov	r2, r3
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	0a1b      	lsrs	r3, r3, #8
 8008300:	009b      	lsls	r3, r3, #2
 8008302:	f003 030c 	and.w	r3, r3, #12
 8008306:	4413      	add	r3, r2
 8008308:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800830a:	6822      	ldr	r2, [r4, #0]
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	f003 031f 	and.w	r3, r3, #31
 8008312:	211f      	movs	r1, #31
 8008314:	fa01 f303 	lsl.w	r3, r1, r3
 8008318:	43db      	mvns	r3, r3
 800831a:	401a      	ands	r2, r3
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	0e9b      	lsrs	r3, r3, #26
 8008320:	f003 011f 	and.w	r1, r3, #31
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	f003 031f 	and.w	r3, r3, #31
 800832a:	fa01 f303 	lsl.w	r3, r1, r3
 800832e:	4313      	orrs	r3, r2
 8008330:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8008332:	bf00      	nop
 8008334:	3710      	adds	r7, #16
 8008336:	46bd      	mov	sp, r7
 8008338:	bc90      	pop	{r4, r7}
 800833a:	4770      	bx	lr

0800833c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800833c:	b490      	push	{r4, r7}
 800833e:	b084      	sub	sp, #16
 8008340:	af00      	add	r7, sp, #0
 8008342:	60f8      	str	r0, [r7, #12]
 8008344:	60b9      	str	r1, [r7, #8]
 8008346:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	3314      	adds	r3, #20
 800834c:	461a      	mov	r2, r3
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	0e5b      	lsrs	r3, r3, #25
 8008352:	009b      	lsls	r3, r3, #2
 8008354:	f003 0304 	and.w	r3, r3, #4
 8008358:	4413      	add	r3, r2
 800835a:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800835c:	6822      	ldr	r2, [r4, #0]
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	0d1b      	lsrs	r3, r3, #20
 8008362:	f003 031f 	and.w	r3, r3, #31
 8008366:	2107      	movs	r1, #7
 8008368:	fa01 f303 	lsl.w	r3, r1, r3
 800836c:	43db      	mvns	r3, r3
 800836e:	401a      	ands	r2, r3
 8008370:	68bb      	ldr	r3, [r7, #8]
 8008372:	0d1b      	lsrs	r3, r3, #20
 8008374:	f003 031f 	and.w	r3, r3, #31
 8008378:	6879      	ldr	r1, [r7, #4]
 800837a:	fa01 f303 	lsl.w	r3, r1, r3
 800837e:	4313      	orrs	r3, r2
 8008380:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8008382:	bf00      	nop
 8008384:	3710      	adds	r7, #16
 8008386:	46bd      	mov	sp, r7
 8008388:	bc90      	pop	{r4, r7}
 800838a:	4770      	bx	lr

0800838c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800838c:	b480      	push	{r7}
 800838e:	b085      	sub	sp, #20
 8008390:	af00      	add	r7, sp, #0
 8008392:	60f8      	str	r0, [r7, #12]
 8008394:	60b9      	str	r1, [r7, #8]
 8008396:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80083a4:	43db      	mvns	r3, r3
 80083a6:	401a      	ands	r2, r3
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f003 0318 	and.w	r3, r3, #24
 80083ae:	4908      	ldr	r1, [pc, #32]	; (80083d0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80083b0:	40d9      	lsrs	r1, r3
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	400b      	ands	r3, r1
 80083b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80083ba:	431a      	orrs	r2, r3
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80083c2:	bf00      	nop
 80083c4:	3714      	adds	r7, #20
 80083c6:	46bd      	mov	sp, r7
 80083c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083cc:	4770      	bx	lr
 80083ce:	bf00      	nop
 80083d0:	0007ffff 	.word	0x0007ffff

080083d4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80083d4:	b480      	push	{r7}
 80083d6:	b083      	sub	sp, #12
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	689b      	ldr	r3, [r3, #8]
 80083e0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80083e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80083e8:	687a      	ldr	r2, [r7, #4]
 80083ea:	6093      	str	r3, [r2, #8]
}
 80083ec:	bf00      	nop
 80083ee:	370c      	adds	r7, #12
 80083f0:	46bd      	mov	sp, r7
 80083f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f6:	4770      	bx	lr

080083f8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80083f8:	b480      	push	{r7}
 80083fa:	b083      	sub	sp, #12
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	689b      	ldr	r3, [r3, #8]
 8008404:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008408:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800840c:	d101      	bne.n	8008412 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800840e:	2301      	movs	r3, #1
 8008410:	e000      	b.n	8008414 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8008412:	2300      	movs	r3, #0
}
 8008414:	4618      	mov	r0, r3
 8008416:	370c      	adds	r7, #12
 8008418:	46bd      	mov	sp, r7
 800841a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841e:	4770      	bx	lr

08008420 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8008420:	b480      	push	{r7}
 8008422:	b083      	sub	sp, #12
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	689b      	ldr	r3, [r3, #8]
 800842c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8008430:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008434:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800843c:	bf00      	nop
 800843e:	370c      	adds	r7, #12
 8008440:	46bd      	mov	sp, r7
 8008442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008446:	4770      	bx	lr

08008448 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8008448:	b480      	push	{r7}
 800844a:	b083      	sub	sp, #12
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	689b      	ldr	r3, [r3, #8]
 8008454:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008458:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800845c:	d101      	bne.n	8008462 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800845e:	2301      	movs	r3, #1
 8008460:	e000      	b.n	8008464 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8008462:	2300      	movs	r3, #0
}
 8008464:	4618      	mov	r0, r3
 8008466:	370c      	adds	r7, #12
 8008468:	46bd      	mov	sp, r7
 800846a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846e:	4770      	bx	lr

08008470 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8008470:	b480      	push	{r7}
 8008472:	b083      	sub	sp, #12
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	689b      	ldr	r3, [r3, #8]
 800847c:	f003 0301 	and.w	r3, r3, #1
 8008480:	2b01      	cmp	r3, #1
 8008482:	d101      	bne.n	8008488 <LL_ADC_IsEnabled+0x18>
 8008484:	2301      	movs	r3, #1
 8008486:	e000      	b.n	800848a <LL_ADC_IsEnabled+0x1a>
 8008488:	2300      	movs	r3, #0
}
 800848a:	4618      	mov	r0, r3
 800848c:	370c      	adds	r7, #12
 800848e:	46bd      	mov	sp, r7
 8008490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008494:	4770      	bx	lr

08008496 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8008496:	b480      	push	{r7}
 8008498:	b083      	sub	sp, #12
 800849a:	af00      	add	r7, sp, #0
 800849c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	689b      	ldr	r3, [r3, #8]
 80084a2:	f003 0304 	and.w	r3, r3, #4
 80084a6:	2b04      	cmp	r3, #4
 80084a8:	d101      	bne.n	80084ae <LL_ADC_REG_IsConversionOngoing+0x18>
 80084aa:	2301      	movs	r3, #1
 80084ac:	e000      	b.n	80084b0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80084ae:	2300      	movs	r3, #0
}
 80084b0:	4618      	mov	r0, r3
 80084b2:	370c      	adds	r7, #12
 80084b4:	46bd      	mov	sp, r7
 80084b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ba:	4770      	bx	lr

080084bc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80084bc:	b480      	push	{r7}
 80084be:	b083      	sub	sp, #12
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	689b      	ldr	r3, [r3, #8]
 80084c8:	f003 0308 	and.w	r3, r3, #8
 80084cc:	2b08      	cmp	r3, #8
 80084ce:	d101      	bne.n	80084d4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80084d0:	2301      	movs	r3, #1
 80084d2:	e000      	b.n	80084d6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80084d4:	2300      	movs	r3, #0
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	370c      	adds	r7, #12
 80084da:	46bd      	mov	sp, r7
 80084dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e0:	4770      	bx	lr
	...

080084e4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80084e4:	b590      	push	{r4, r7, lr}
 80084e6:	b089      	sub	sp, #36	; 0x24
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80084ec:	2300      	movs	r3, #0
 80084ee:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80084f0:	2300      	movs	r3, #0
 80084f2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d101      	bne.n	80084fe <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80084fa:	2301      	movs	r3, #1
 80084fc:	e1ad      	b.n	800885a <HAL_ADC_Init+0x376>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	695b      	ldr	r3, [r3, #20]
 8008502:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008508:	2b00      	cmp	r3, #0
 800850a:	d109      	bne.n	8008520 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f7fe f937 	bl	8006780 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2200      	movs	r2, #0
 8008516:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2200      	movs	r2, #0
 800851c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	4618      	mov	r0, r3
 8008526:	f7ff ff67 	bl	80083f8 <LL_ADC_IsDeepPowerDownEnabled>
 800852a:	4603      	mov	r3, r0
 800852c:	2b00      	cmp	r3, #0
 800852e:	d004      	beq.n	800853a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	4618      	mov	r0, r3
 8008536:	f7ff ff4d 	bl	80083d4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	4618      	mov	r0, r3
 8008540:	f7ff ff82 	bl	8008448 <LL_ADC_IsInternalRegulatorEnabled>
 8008544:	4603      	mov	r3, r0
 8008546:	2b00      	cmp	r3, #0
 8008548:	d113      	bne.n	8008572 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	4618      	mov	r0, r3
 8008550:	f7ff ff66 	bl	8008420 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8008554:	4b9e      	ldr	r3, [pc, #632]	; (80087d0 <HAL_ADC_Init+0x2ec>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	099b      	lsrs	r3, r3, #6
 800855a:	4a9e      	ldr	r2, [pc, #632]	; (80087d4 <HAL_ADC_Init+0x2f0>)
 800855c:	fba2 2303 	umull	r2, r3, r2, r3
 8008560:	099b      	lsrs	r3, r3, #6
 8008562:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8008564:	e002      	b.n	800856c <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8008566:	68bb      	ldr	r3, [r7, #8]
 8008568:	3b01      	subs	r3, #1
 800856a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d1f9      	bne.n	8008566 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	4618      	mov	r0, r3
 8008578:	f7ff ff66 	bl	8008448 <LL_ADC_IsInternalRegulatorEnabled>
 800857c:	4603      	mov	r3, r0
 800857e:	2b00      	cmp	r3, #0
 8008580:	d10d      	bne.n	800859e <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008586:	f043 0210 	orr.w	r2, r3, #16
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008592:	f043 0201 	orr.w	r2, r3, #1
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800859a:	2301      	movs	r3, #1
 800859c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	4618      	mov	r0, r3
 80085a4:	f7ff ff77 	bl	8008496 <LL_ADC_REG_IsConversionOngoing>
 80085a8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085ae:	f003 0310 	and.w	r3, r3, #16
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	f040 8148 	bne.w	8008848 <HAL_ADC_Init+0x364>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80085b8:	697b      	ldr	r3, [r7, #20]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	f040 8144 	bne.w	8008848 <HAL_ADC_Init+0x364>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085c4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80085c8:	f043 0202 	orr.w	r2, r3, #2
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	4618      	mov	r0, r3
 80085d6:	f7ff ff4b 	bl	8008470 <LL_ADC_IsEnabled>
 80085da:	4603      	mov	r3, r0
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d141      	bne.n	8008664 <HAL_ADC_Init+0x180>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80085e8:	d004      	beq.n	80085f4 <HAL_ADC_Init+0x110>
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	4a7a      	ldr	r2, [pc, #488]	; (80087d8 <HAL_ADC_Init+0x2f4>)
 80085f0:	4293      	cmp	r3, r2
 80085f2:	d10f      	bne.n	8008614 <HAL_ADC_Init+0x130>
 80085f4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80085f8:	f7ff ff3a 	bl	8008470 <LL_ADC_IsEnabled>
 80085fc:	4604      	mov	r4, r0
 80085fe:	4876      	ldr	r0, [pc, #472]	; (80087d8 <HAL_ADC_Init+0x2f4>)
 8008600:	f7ff ff36 	bl	8008470 <LL_ADC_IsEnabled>
 8008604:	4603      	mov	r3, r0
 8008606:	4323      	orrs	r3, r4
 8008608:	2b00      	cmp	r3, #0
 800860a:	bf0c      	ite	eq
 800860c:	2301      	moveq	r3, #1
 800860e:	2300      	movne	r3, #0
 8008610:	b2db      	uxtb	r3, r3
 8008612:	e012      	b.n	800863a <HAL_ADC_Init+0x156>
 8008614:	4871      	ldr	r0, [pc, #452]	; (80087dc <HAL_ADC_Init+0x2f8>)
 8008616:	f7ff ff2b 	bl	8008470 <LL_ADC_IsEnabled>
 800861a:	4604      	mov	r4, r0
 800861c:	4870      	ldr	r0, [pc, #448]	; (80087e0 <HAL_ADC_Init+0x2fc>)
 800861e:	f7ff ff27 	bl	8008470 <LL_ADC_IsEnabled>
 8008622:	4603      	mov	r3, r0
 8008624:	431c      	orrs	r4, r3
 8008626:	486f      	ldr	r0, [pc, #444]	; (80087e4 <HAL_ADC_Init+0x300>)
 8008628:	f7ff ff22 	bl	8008470 <LL_ADC_IsEnabled>
 800862c:	4603      	mov	r3, r0
 800862e:	4323      	orrs	r3, r4
 8008630:	2b00      	cmp	r3, #0
 8008632:	bf0c      	ite	eq
 8008634:	2301      	moveq	r3, #1
 8008636:	2300      	movne	r3, #0
 8008638:	b2db      	uxtb	r3, r3
 800863a:	2b00      	cmp	r3, #0
 800863c:	d012      	beq.n	8008664 <HAL_ADC_Init+0x180>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008646:	d004      	beq.n	8008652 <HAL_ADC_Init+0x16e>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	4a62      	ldr	r2, [pc, #392]	; (80087d8 <HAL_ADC_Init+0x2f4>)
 800864e:	4293      	cmp	r3, r2
 8008650:	d101      	bne.n	8008656 <HAL_ADC_Init+0x172>
 8008652:	4a65      	ldr	r2, [pc, #404]	; (80087e8 <HAL_ADC_Init+0x304>)
 8008654:	e000      	b.n	8008658 <HAL_ADC_Init+0x174>
 8008656:	4a65      	ldr	r2, [pc, #404]	; (80087ec <HAL_ADC_Init+0x308>)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	685b      	ldr	r3, [r3, #4]
 800865c:	4619      	mov	r1, r3
 800865e:	4610      	mov	r0, r2
 8008660:	f7ff fd7e 	bl	8008160 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	7f5b      	ldrb	r3, [r3, #29]
 8008668:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800866e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8008674:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800867a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008682:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8008684:	4313      	orrs	r3, r2
 8008686:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800868e:	2b01      	cmp	r3, #1
 8008690:	d106      	bne.n	80086a0 <HAL_ADC_Init+0x1bc>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008696:	3b01      	subs	r3, #1
 8008698:	045b      	lsls	r3, r3, #17
 800869a:	69ba      	ldr	r2, [r7, #24]
 800869c:	4313      	orrs	r3, r2
 800869e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d009      	beq.n	80086bc <HAL_ADC_Init+0x1d8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086ac:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086b4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80086b6:	69ba      	ldr	r2, [r7, #24]
 80086b8:	4313      	orrs	r3, r2
 80086ba:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	68da      	ldr	r2, [r3, #12]
 80086c2:	4b4b      	ldr	r3, [pc, #300]	; (80087f0 <HAL_ADC_Init+0x30c>)
 80086c4:	4013      	ands	r3, r2
 80086c6:	687a      	ldr	r2, [r7, #4]
 80086c8:	6812      	ldr	r2, [r2, #0]
 80086ca:	69b9      	ldr	r1, [r7, #24]
 80086cc:	430b      	orrs	r3, r1
 80086ce:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	691b      	ldr	r3, [r3, #16]
 80086d6:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	430a      	orrs	r2, r1
 80086e4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	4618      	mov	r0, r3
 80086ec:	f7ff fed3 	bl	8008496 <LL_ADC_REG_IsConversionOngoing>
 80086f0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	4618      	mov	r0, r3
 80086f8:	f7ff fee0 	bl	80084bc <LL_ADC_INJ_IsConversionOngoing>
 80086fc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80086fe:	693b      	ldr	r3, [r7, #16]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d17f      	bne.n	8008804 <HAL_ADC_Init+0x320>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d17c      	bne.n	8008804 <HAL_ADC_Init+0x320>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800870e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008716:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8008718:	4313      	orrs	r3, r2
 800871a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	68db      	ldr	r3, [r3, #12]
 8008722:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008726:	f023 0302 	bic.w	r3, r3, #2
 800872a:	687a      	ldr	r2, [r7, #4]
 800872c:	6812      	ldr	r2, [r2, #0]
 800872e:	69b9      	ldr	r1, [r7, #24]
 8008730:	430b      	orrs	r3, r1
 8008732:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	691b      	ldr	r3, [r3, #16]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d017      	beq.n	800876c <HAL_ADC_Init+0x288>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	691a      	ldr	r2, [r3, #16]
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800874a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008754:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8008758:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800875c:	687a      	ldr	r2, [r7, #4]
 800875e:	6911      	ldr	r1, [r2, #16]
 8008760:	687a      	ldr	r2, [r7, #4]
 8008762:	6812      	ldr	r2, [r2, #0]
 8008764:	430b      	orrs	r3, r1
 8008766:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800876a:	e013      	b.n	8008794 <HAL_ADC_Init+0x2b0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	691a      	ldr	r2, [r3, #16]
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800877a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008784:	687a      	ldr	r2, [r7, #4]
 8008786:	6812      	ldr	r2, [r2, #0]
 8008788:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800878c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008790:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800879a:	2b01      	cmp	r3, #1
 800879c:	d12a      	bne.n	80087f4 <HAL_ADC_Init+0x310>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	691b      	ldr	r3, [r3, #16]
 80087a4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80087a8:	f023 0304 	bic.w	r3, r3, #4
 80087ac:	687a      	ldr	r2, [r7, #4]
 80087ae:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80087b0:	687a      	ldr	r2, [r7, #4]
 80087b2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80087b4:	4311      	orrs	r1, r2
 80087b6:	687a      	ldr	r2, [r7, #4]
 80087b8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80087ba:	4311      	orrs	r1, r2
 80087bc:	687a      	ldr	r2, [r7, #4]
 80087be:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80087c0:	430a      	orrs	r2, r1
 80087c2:	431a      	orrs	r2, r3
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f042 0201 	orr.w	r2, r2, #1
 80087cc:	611a      	str	r2, [r3, #16]
 80087ce:	e019      	b.n	8008804 <HAL_ADC_Init+0x320>
 80087d0:	20000ca4 	.word	0x20000ca4
 80087d4:	053e2d63 	.word	0x053e2d63
 80087d8:	50000100 	.word	0x50000100
 80087dc:	50000400 	.word	0x50000400
 80087e0:	50000500 	.word	0x50000500
 80087e4:	50000600 	.word	0x50000600
 80087e8:	50000300 	.word	0x50000300
 80087ec:	50000700 	.word	0x50000700
 80087f0:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	691a      	ldr	r2, [r3, #16]
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f022 0201 	bic.w	r2, r2, #1
 8008802:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	695b      	ldr	r3, [r3, #20]
 8008808:	2b01      	cmp	r3, #1
 800880a:	d10c      	bne.n	8008826 <HAL_ADC_Init+0x342>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008812:	f023 010f 	bic.w	r1, r3, #15
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6a1b      	ldr	r3, [r3, #32]
 800881a:	1e5a      	subs	r2, r3, #1
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	430a      	orrs	r2, r1
 8008822:	631a      	str	r2, [r3, #48]	; 0x30
 8008824:	e007      	b.n	8008836 <HAL_ADC_Init+0x352>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f022 020f 	bic.w	r2, r2, #15
 8008834:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800883a:	f023 0303 	bic.w	r3, r3, #3
 800883e:	f043 0201 	orr.w	r2, r3, #1
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	65da      	str	r2, [r3, #92]	; 0x5c
 8008846:	e007      	b.n	8008858 <HAL_ADC_Init+0x374>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800884c:	f043 0210 	orr.w	r2, r3, #16
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8008854:	2301      	movs	r3, #1
 8008856:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8008858:	7ffb      	ldrb	r3, [r7, #31]
}
 800885a:	4618      	mov	r0, r3
 800885c:	3724      	adds	r7, #36	; 0x24
 800885e:	46bd      	mov	sp, r7
 8008860:	bd90      	pop	{r4, r7, pc}
 8008862:	bf00      	nop

08008864 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b0a6      	sub	sp, #152	; 0x98
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
 800886c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800886e:	2300      	movs	r3, #0
 8008870:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8008874:	2300      	movs	r3, #0
 8008876:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800887e:	2b01      	cmp	r3, #1
 8008880:	d101      	bne.n	8008886 <HAL_ADC_ConfigChannel+0x22>
 8008882:	2302      	movs	r3, #2
 8008884:	e38e      	b.n	8008fa4 <HAL_ADC_ConfigChannel+0x740>
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2201      	movs	r2, #1
 800888a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	4618      	mov	r0, r3
 8008894:	f7ff fdff 	bl	8008496 <LL_ADC_REG_IsConversionOngoing>
 8008898:	4603      	mov	r3, r0
 800889a:	2b00      	cmp	r3, #0
 800889c:	f040 836f 	bne.w	8008f7e <HAL_ADC_ConfigChannel+0x71a>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	6818      	ldr	r0, [r3, #0]
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	6859      	ldr	r1, [r3, #4]
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	461a      	mov	r2, r3
 80088ae:	f7ff fd1c 	bl	80082ea <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	4618      	mov	r0, r3
 80088b8:	f7ff fded 	bl	8008496 <LL_ADC_REG_IsConversionOngoing>
 80088bc:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	4618      	mov	r0, r3
 80088c6:	f7ff fdf9 	bl	80084bc <LL_ADC_INJ_IsConversionOngoing>
 80088ca:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80088ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	f040 817b 	bne.w	8008bce <HAL_ADC_ConfigChannel+0x36a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80088d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80088dc:	2b00      	cmp	r3, #0
 80088de:	f040 8176 	bne.w	8008bce <HAL_ADC_ConfigChannel+0x36a>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	689b      	ldr	r3, [r3, #8]
 80088e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80088ea:	d10f      	bne.n	800890c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6818      	ldr	r0, [r3, #0]
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	2200      	movs	r2, #0
 80088f6:	4619      	mov	r1, r3
 80088f8:	f7ff fd20 	bl	800833c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8008904:	4618      	mov	r0, r3
 8008906:	f7ff fcdd 	bl	80082c4 <LL_ADC_SetSamplingTimeCommonConfig>
 800890a:	e00e      	b.n	800892a <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6818      	ldr	r0, [r3, #0]
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	6819      	ldr	r1, [r3, #0]
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	689b      	ldr	r3, [r3, #8]
 8008918:	461a      	mov	r2, r3
 800891a:	f7ff fd0f 	bl	800833c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	2100      	movs	r1, #0
 8008924:	4618      	mov	r0, r3
 8008926:	f7ff fccd 	bl	80082c4 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	695a      	ldr	r2, [r3, #20]
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	68db      	ldr	r3, [r3, #12]
 8008934:	08db      	lsrs	r3, r3, #3
 8008936:	f003 0303 	and.w	r3, r3, #3
 800893a:	005b      	lsls	r3, r3, #1
 800893c:	fa02 f303 	lsl.w	r3, r2, r3
 8008940:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	691b      	ldr	r3, [r3, #16]
 8008948:	2b04      	cmp	r3, #4
 800894a:	d022      	beq.n	8008992 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6818      	ldr	r0, [r3, #0]
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	6919      	ldr	r1, [r3, #16]
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	681a      	ldr	r2, [r3, #0]
 8008958:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800895c:	f7ff fc34 	bl	80081c8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	6818      	ldr	r0, [r3, #0]
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	6919      	ldr	r1, [r3, #16]
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	699b      	ldr	r3, [r3, #24]
 800896c:	461a      	mov	r2, r3
 800896e:	f7ff fc79 	bl	8008264 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6818      	ldr	r0, [r3, #0]
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	6919      	ldr	r1, [r3, #16]
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	7f1b      	ldrb	r3, [r3, #28]
 800897e:	2b01      	cmp	r3, #1
 8008980:	d102      	bne.n	8008988 <HAL_ADC_ConfigChannel+0x124>
 8008982:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008986:	e000      	b.n	800898a <HAL_ADC_ConfigChannel+0x126>
 8008988:	2300      	movs	r3, #0
 800898a:	461a      	mov	r2, r3
 800898c:	f7ff fc82 	bl	8008294 <LL_ADC_SetOffsetSaturation>
 8008990:	e11d      	b.n	8008bce <HAL_ADC_ConfigChannel+0x36a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	2100      	movs	r1, #0
 8008998:	4618      	mov	r0, r3
 800899a:	f7ff fc37 	bl	800820c <LL_ADC_GetOffsetChannel>
 800899e:	4603      	mov	r3, r0
 80089a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d10a      	bne.n	80089be <HAL_ADC_ConfigChannel+0x15a>
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	2100      	movs	r1, #0
 80089ae:	4618      	mov	r0, r3
 80089b0:	f7ff fc2c 	bl	800820c <LL_ADC_GetOffsetChannel>
 80089b4:	4603      	mov	r3, r0
 80089b6:	0e9b      	lsrs	r3, r3, #26
 80089b8:	f003 021f 	and.w	r2, r3, #31
 80089bc:	e012      	b.n	80089e4 <HAL_ADC_ConfigChannel+0x180>
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	2100      	movs	r1, #0
 80089c4:	4618      	mov	r0, r3
 80089c6:	f7ff fc21 	bl	800820c <LL_ADC_GetOffsetChannel>
 80089ca:	4603      	mov	r3, r0
 80089cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80089d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80089d4:	fa93 f3a3 	rbit	r3, r3
 80089d8:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80089da:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80089dc:	fab3 f383 	clz	r3, r3
 80089e0:	b2db      	uxtb	r3, r3
 80089e2:	461a      	mov	r2, r3
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d105      	bne.n	80089fc <HAL_ADC_ConfigChannel+0x198>
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	0e9b      	lsrs	r3, r3, #26
 80089f6:	f003 031f 	and.w	r3, r3, #31
 80089fa:	e00a      	b.n	8008a12 <HAL_ADC_ConfigChannel+0x1ae>
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a04:	fa93 f3a3 	rbit	r3, r3
 8008a08:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8008a0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a0c:	fab3 f383 	clz	r3, r3
 8008a10:	b2db      	uxtb	r3, r3
 8008a12:	429a      	cmp	r2, r3
 8008a14:	d106      	bne.n	8008a24 <HAL_ADC_ConfigChannel+0x1c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	2100      	movs	r1, #0
 8008a1e:	4618      	mov	r0, r3
 8008a20:	f7ff fc08 	bl	8008234 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	2101      	movs	r1, #1
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	f7ff fbee 	bl	800820c <LL_ADC_GetOffsetChannel>
 8008a30:	4603      	mov	r3, r0
 8008a32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d10a      	bne.n	8008a50 <HAL_ADC_ConfigChannel+0x1ec>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	2101      	movs	r1, #1
 8008a40:	4618      	mov	r0, r3
 8008a42:	f7ff fbe3 	bl	800820c <LL_ADC_GetOffsetChannel>
 8008a46:	4603      	mov	r3, r0
 8008a48:	0e9b      	lsrs	r3, r3, #26
 8008a4a:	f003 021f 	and.w	r2, r3, #31
 8008a4e:	e010      	b.n	8008a72 <HAL_ADC_ConfigChannel+0x20e>
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	2101      	movs	r1, #1
 8008a56:	4618      	mov	r0, r3
 8008a58:	f7ff fbd8 	bl	800820c <LL_ADC_GetOffsetChannel>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a60:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008a62:	fa93 f3a3 	rbit	r3, r3
 8008a66:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8008a68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a6a:	fab3 f383 	clz	r3, r3
 8008a6e:	b2db      	uxtb	r3, r3
 8008a70:	461a      	mov	r2, r3
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d105      	bne.n	8008a8a <HAL_ADC_ConfigChannel+0x226>
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	0e9b      	lsrs	r3, r3, #26
 8008a84:	f003 031f 	and.w	r3, r3, #31
 8008a88:	e00a      	b.n	8008aa0 <HAL_ADC_ConfigChannel+0x23c>
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008a92:	fa93 f3a3 	rbit	r3, r3
 8008a96:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8008a98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008a9a:	fab3 f383 	clz	r3, r3
 8008a9e:	b2db      	uxtb	r3, r3
 8008aa0:	429a      	cmp	r2, r3
 8008aa2:	d106      	bne.n	8008ab2 <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	2101      	movs	r1, #1
 8008aac:	4618      	mov	r0, r3
 8008aae:	f7ff fbc1 	bl	8008234 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	2102      	movs	r1, #2
 8008ab8:	4618      	mov	r0, r3
 8008aba:	f7ff fba7 	bl	800820c <LL_ADC_GetOffsetChannel>
 8008abe:	4603      	mov	r3, r0
 8008ac0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d10a      	bne.n	8008ade <HAL_ADC_ConfigChannel+0x27a>
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	2102      	movs	r1, #2
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f7ff fb9c 	bl	800820c <LL_ADC_GetOffsetChannel>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	0e9b      	lsrs	r3, r3, #26
 8008ad8:	f003 021f 	and.w	r2, r3, #31
 8008adc:	e010      	b.n	8008b00 <HAL_ADC_ConfigChannel+0x29c>
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	2102      	movs	r1, #2
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	f7ff fb91 	bl	800820c <LL_ADC_GetOffsetChannel>
 8008aea:	4603      	mov	r3, r0
 8008aec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008aee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008af0:	fa93 f3a3 	rbit	r3, r3
 8008af4:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8008af6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008af8:	fab3 f383 	clz	r3, r3
 8008afc:	b2db      	uxtb	r3, r3
 8008afe:	461a      	mov	r2, r3
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d105      	bne.n	8008b18 <HAL_ADC_ConfigChannel+0x2b4>
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	0e9b      	lsrs	r3, r3, #26
 8008b12:	f003 031f 	and.w	r3, r3, #31
 8008b16:	e00a      	b.n	8008b2e <HAL_ADC_ConfigChannel+0x2ca>
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008b20:	fa93 f3a3 	rbit	r3, r3
 8008b24:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8008b26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b28:	fab3 f383 	clz	r3, r3
 8008b2c:	b2db      	uxtb	r3, r3
 8008b2e:	429a      	cmp	r2, r3
 8008b30:	d106      	bne.n	8008b40 <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	2200      	movs	r2, #0
 8008b38:	2102      	movs	r1, #2
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f7ff fb7a 	bl	8008234 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	2103      	movs	r1, #3
 8008b46:	4618      	mov	r0, r3
 8008b48:	f7ff fb60 	bl	800820c <LL_ADC_GetOffsetChannel>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d10a      	bne.n	8008b6c <HAL_ADC_ConfigChannel+0x308>
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	2103      	movs	r1, #3
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	f7ff fb55 	bl	800820c <LL_ADC_GetOffsetChannel>
 8008b62:	4603      	mov	r3, r0
 8008b64:	0e9b      	lsrs	r3, r3, #26
 8008b66:	f003 021f 	and.w	r2, r3, #31
 8008b6a:	e010      	b.n	8008b8e <HAL_ADC_ConfigChannel+0x32a>
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	2103      	movs	r1, #3
 8008b72:	4618      	mov	r0, r3
 8008b74:	f7ff fb4a 	bl	800820c <LL_ADC_GetOffsetChannel>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b7e:	fa93 f3a3 	rbit	r3, r3
 8008b82:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8008b84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b86:	fab3 f383 	clz	r3, r3
 8008b8a:	b2db      	uxtb	r3, r3
 8008b8c:	461a      	mov	r2, r3
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d105      	bne.n	8008ba6 <HAL_ADC_ConfigChannel+0x342>
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	0e9b      	lsrs	r3, r3, #26
 8008ba0:	f003 031f 	and.w	r3, r3, #31
 8008ba4:	e00a      	b.n	8008bbc <HAL_ADC_ConfigChannel+0x358>
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008bac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008bae:	fa93 f3a3 	rbit	r3, r3
 8008bb2:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8008bb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008bb6:	fab3 f383 	clz	r3, r3
 8008bba:	b2db      	uxtb	r3, r3
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	d106      	bne.n	8008bce <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	2103      	movs	r1, #3
 8008bc8:	4618      	mov	r0, r3
 8008bca:	f7ff fb33 	bl	8008234 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	f7ff fc4c 	bl	8008470 <LL_ADC_IsEnabled>
 8008bd8:	4603      	mov	r3, r0
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	f040 810c 	bne.w	8008df8 <HAL_ADC_ConfigChannel+0x594>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6818      	ldr	r0, [r3, #0]
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	6819      	ldr	r1, [r3, #0]
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	68db      	ldr	r3, [r3, #12]
 8008bec:	461a      	mov	r2, r3
 8008bee:	f7ff fbcd 	bl	800838c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	68db      	ldr	r3, [r3, #12]
 8008bf6:	4aaf      	ldr	r2, [pc, #700]	; (8008eb4 <HAL_ADC_ConfigChannel+0x650>)
 8008bf8:	4293      	cmp	r3, r2
 8008bfa:	f040 80fd 	bne.w	8008df8 <HAL_ADC_ConfigChannel+0x594>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d10b      	bne.n	8008c26 <HAL_ADC_ConfigChannel+0x3c2>
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	0e9b      	lsrs	r3, r3, #26
 8008c14:	3301      	adds	r3, #1
 8008c16:	f003 031f 	and.w	r3, r3, #31
 8008c1a:	2b09      	cmp	r3, #9
 8008c1c:	bf94      	ite	ls
 8008c1e:	2301      	movls	r3, #1
 8008c20:	2300      	movhi	r3, #0
 8008c22:	b2db      	uxtb	r3, r3
 8008c24:	e012      	b.n	8008c4c <HAL_ADC_ConfigChannel+0x3e8>
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c2e:	fa93 f3a3 	rbit	r3, r3
 8008c32:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8008c34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c36:	fab3 f383 	clz	r3, r3
 8008c3a:	b2db      	uxtb	r3, r3
 8008c3c:	3301      	adds	r3, #1
 8008c3e:	f003 031f 	and.w	r3, r3, #31
 8008c42:	2b09      	cmp	r3, #9
 8008c44:	bf94      	ite	ls
 8008c46:	2301      	movls	r3, #1
 8008c48:	2300      	movhi	r3, #0
 8008c4a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d064      	beq.n	8008d1a <HAL_ADC_ConfigChannel+0x4b6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d107      	bne.n	8008c6c <HAL_ADC_ConfigChannel+0x408>
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	0e9b      	lsrs	r3, r3, #26
 8008c62:	3301      	adds	r3, #1
 8008c64:	069b      	lsls	r3, r3, #26
 8008c66:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008c6a:	e00e      	b.n	8008c8a <HAL_ADC_ConfigChannel+0x426>
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c74:	fa93 f3a3 	rbit	r3, r3
 8008c78:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8008c7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c7c:	fab3 f383 	clz	r3, r3
 8008c80:	b2db      	uxtb	r3, r3
 8008c82:	3301      	adds	r3, #1
 8008c84:	069b      	lsls	r3, r3, #26
 8008c86:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d109      	bne.n	8008caa <HAL_ADC_ConfigChannel+0x446>
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	0e9b      	lsrs	r3, r3, #26
 8008c9c:	3301      	adds	r3, #1
 8008c9e:	f003 031f 	and.w	r3, r3, #31
 8008ca2:	2101      	movs	r1, #1
 8008ca4:	fa01 f303 	lsl.w	r3, r1, r3
 8008ca8:	e010      	b.n	8008ccc <HAL_ADC_ConfigChannel+0x468>
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cb2:	fa93 f3a3 	rbit	r3, r3
 8008cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8008cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cba:	fab3 f383 	clz	r3, r3
 8008cbe:	b2db      	uxtb	r3, r3
 8008cc0:	3301      	adds	r3, #1
 8008cc2:	f003 031f 	and.w	r3, r3, #31
 8008cc6:	2101      	movs	r1, #1
 8008cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8008ccc:	ea42 0103 	orr.w	r1, r2, r3
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d10a      	bne.n	8008cf2 <HAL_ADC_ConfigChannel+0x48e>
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	0e9b      	lsrs	r3, r3, #26
 8008ce2:	3301      	adds	r3, #1
 8008ce4:	f003 021f 	and.w	r2, r3, #31
 8008ce8:	4613      	mov	r3, r2
 8008cea:	005b      	lsls	r3, r3, #1
 8008cec:	4413      	add	r3, r2
 8008cee:	051b      	lsls	r3, r3, #20
 8008cf0:	e011      	b.n	8008d16 <HAL_ADC_ConfigChannel+0x4b2>
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cfa:	fa93 f3a3 	rbit	r3, r3
 8008cfe:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8008d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d02:	fab3 f383 	clz	r3, r3
 8008d06:	b2db      	uxtb	r3, r3
 8008d08:	3301      	adds	r3, #1
 8008d0a:	f003 021f 	and.w	r2, r3, #31
 8008d0e:	4613      	mov	r3, r2
 8008d10:	005b      	lsls	r3, r3, #1
 8008d12:	4413      	add	r3, r2
 8008d14:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008d16:	430b      	orrs	r3, r1
 8008d18:	e069      	b.n	8008dee <HAL_ADC_ConfigChannel+0x58a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d107      	bne.n	8008d36 <HAL_ADC_ConfigChannel+0x4d2>
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	0e9b      	lsrs	r3, r3, #26
 8008d2c:	3301      	adds	r3, #1
 8008d2e:	069b      	lsls	r3, r3, #26
 8008d30:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008d34:	e00e      	b.n	8008d54 <HAL_ADC_ConfigChannel+0x4f0>
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d3c:	6a3b      	ldr	r3, [r7, #32]
 8008d3e:	fa93 f3a3 	rbit	r3, r3
 8008d42:	61fb      	str	r3, [r7, #28]
  return result;
 8008d44:	69fb      	ldr	r3, [r7, #28]
 8008d46:	fab3 f383 	clz	r3, r3
 8008d4a:	b2db      	uxtb	r3, r3
 8008d4c:	3301      	adds	r3, #1
 8008d4e:	069b      	lsls	r3, r3, #26
 8008d50:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d109      	bne.n	8008d74 <HAL_ADC_ConfigChannel+0x510>
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	0e9b      	lsrs	r3, r3, #26
 8008d66:	3301      	adds	r3, #1
 8008d68:	f003 031f 	and.w	r3, r3, #31
 8008d6c:	2101      	movs	r1, #1
 8008d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8008d72:	e010      	b.n	8008d96 <HAL_ADC_ConfigChannel+0x532>
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d7a:	69bb      	ldr	r3, [r7, #24]
 8008d7c:	fa93 f3a3 	rbit	r3, r3
 8008d80:	617b      	str	r3, [r7, #20]
  return result;
 8008d82:	697b      	ldr	r3, [r7, #20]
 8008d84:	fab3 f383 	clz	r3, r3
 8008d88:	b2db      	uxtb	r3, r3
 8008d8a:	3301      	adds	r3, #1
 8008d8c:	f003 031f 	and.w	r3, r3, #31
 8008d90:	2101      	movs	r1, #1
 8008d92:	fa01 f303 	lsl.w	r3, r1, r3
 8008d96:	ea42 0103 	orr.w	r1, r2, r3
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d10d      	bne.n	8008dc2 <HAL_ADC_ConfigChannel+0x55e>
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	0e9b      	lsrs	r3, r3, #26
 8008dac:	3301      	adds	r3, #1
 8008dae:	f003 021f 	and.w	r2, r3, #31
 8008db2:	4613      	mov	r3, r2
 8008db4:	005b      	lsls	r3, r3, #1
 8008db6:	4413      	add	r3, r2
 8008db8:	3b1e      	subs	r3, #30
 8008dba:	051b      	lsls	r3, r3, #20
 8008dbc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008dc0:	e014      	b.n	8008dec <HAL_ADC_ConfigChannel+0x588>
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008dc8:	693b      	ldr	r3, [r7, #16]
 8008dca:	fa93 f3a3 	rbit	r3, r3
 8008dce:	60fb      	str	r3, [r7, #12]
  return result;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	fab3 f383 	clz	r3, r3
 8008dd6:	b2db      	uxtb	r3, r3
 8008dd8:	3301      	adds	r3, #1
 8008dda:	f003 021f 	and.w	r2, r3, #31
 8008dde:	4613      	mov	r3, r2
 8008de0:	005b      	lsls	r3, r3, #1
 8008de2:	4413      	add	r3, r2
 8008de4:	3b1e      	subs	r3, #30
 8008de6:	051b      	lsls	r3, r3, #20
 8008de8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008dec:	430b      	orrs	r3, r1
 8008dee:	683a      	ldr	r2, [r7, #0]
 8008df0:	6892      	ldr	r2, [r2, #8]
 8008df2:	4619      	mov	r1, r3
 8008df4:	f7ff faa2 	bl	800833c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	681a      	ldr	r2, [r3, #0]
 8008dfc:	4b2e      	ldr	r3, [pc, #184]	; (8008eb8 <HAL_ADC_ConfigChannel+0x654>)
 8008dfe:	4013      	ands	r3, r2
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	f000 80c9 	beq.w	8008f98 <HAL_ADC_ConfigChannel+0x734>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008e0e:	d004      	beq.n	8008e1a <HAL_ADC_ConfigChannel+0x5b6>
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	4a29      	ldr	r2, [pc, #164]	; (8008ebc <HAL_ADC_ConfigChannel+0x658>)
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d101      	bne.n	8008e1e <HAL_ADC_ConfigChannel+0x5ba>
 8008e1a:	4b29      	ldr	r3, [pc, #164]	; (8008ec0 <HAL_ADC_ConfigChannel+0x65c>)
 8008e1c:	e000      	b.n	8008e20 <HAL_ADC_ConfigChannel+0x5bc>
 8008e1e:	4b29      	ldr	r3, [pc, #164]	; (8008ec4 <HAL_ADC_ConfigChannel+0x660>)
 8008e20:	4618      	mov	r0, r3
 8008e22:	f7ff f9c3 	bl	80081ac <LL_ADC_GetCommonPathInternalCh>
 8008e26:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	4a26      	ldr	r2, [pc, #152]	; (8008ec8 <HAL_ADC_ConfigChannel+0x664>)
 8008e30:	4293      	cmp	r3, r2
 8008e32:	d004      	beq.n	8008e3e <HAL_ADC_ConfigChannel+0x5da>
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	4a24      	ldr	r2, [pc, #144]	; (8008ecc <HAL_ADC_ConfigChannel+0x668>)
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	d14e      	bne.n	8008edc <HAL_ADC_ConfigChannel+0x678>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8008e3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008e42:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d148      	bne.n	8008edc <HAL_ADC_ConfigChannel+0x678>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008e52:	d005      	beq.n	8008e60 <HAL_ADC_ConfigChannel+0x5fc>
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	4a1d      	ldr	r2, [pc, #116]	; (8008ed0 <HAL_ADC_ConfigChannel+0x66c>)
 8008e5a:	4293      	cmp	r3, r2
 8008e5c:	f040 8099 	bne.w	8008f92 <HAL_ADC_ConfigChannel+0x72e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008e68:	d004      	beq.n	8008e74 <HAL_ADC_ConfigChannel+0x610>
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	4a13      	ldr	r2, [pc, #76]	; (8008ebc <HAL_ADC_ConfigChannel+0x658>)
 8008e70:	4293      	cmp	r3, r2
 8008e72:	d101      	bne.n	8008e78 <HAL_ADC_ConfigChannel+0x614>
 8008e74:	4a12      	ldr	r2, [pc, #72]	; (8008ec0 <HAL_ADC_ConfigChannel+0x65c>)
 8008e76:	e000      	b.n	8008e7a <HAL_ADC_ConfigChannel+0x616>
 8008e78:	4a12      	ldr	r2, [pc, #72]	; (8008ec4 <HAL_ADC_ConfigChannel+0x660>)
 8008e7a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008e7e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008e82:	4619      	mov	r1, r3
 8008e84:	4610      	mov	r0, r2
 8008e86:	f7ff f97e 	bl	8008186 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8008e8a:	4b12      	ldr	r3, [pc, #72]	; (8008ed4 <HAL_ADC_ConfigChannel+0x670>)
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	099b      	lsrs	r3, r3, #6
 8008e90:	4a11      	ldr	r2, [pc, #68]	; (8008ed8 <HAL_ADC_ConfigChannel+0x674>)
 8008e92:	fba2 2303 	umull	r2, r3, r2, r3
 8008e96:	099a      	lsrs	r2, r3, #6
 8008e98:	4613      	mov	r3, r2
 8008e9a:	005b      	lsls	r3, r3, #1
 8008e9c:	4413      	add	r3, r2
 8008e9e:	009b      	lsls	r3, r3, #2
 8008ea0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8008ea2:	e002      	b.n	8008eaa <HAL_ADC_ConfigChannel+0x646>
          {
            wait_loop_index--;
 8008ea4:	68bb      	ldr	r3, [r7, #8]
 8008ea6:	3b01      	subs	r3, #1
 8008ea8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8008eaa:	68bb      	ldr	r3, [r7, #8]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d1f9      	bne.n	8008ea4 <HAL_ADC_ConfigChannel+0x640>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008eb0:	e06f      	b.n	8008f92 <HAL_ADC_ConfigChannel+0x72e>
 8008eb2:	bf00      	nop
 8008eb4:	407f0000 	.word	0x407f0000
 8008eb8:	80080000 	.word	0x80080000
 8008ebc:	50000100 	.word	0x50000100
 8008ec0:	50000300 	.word	0x50000300
 8008ec4:	50000700 	.word	0x50000700
 8008ec8:	c3210000 	.word	0xc3210000
 8008ecc:	90c00010 	.word	0x90c00010
 8008ed0:	50000600 	.word	0x50000600
 8008ed4:	20000ca4 	.word	0x20000ca4
 8008ed8:	053e2d63 	.word	0x053e2d63
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	4a32      	ldr	r2, [pc, #200]	; (8008fac <HAL_ADC_ConfigChannel+0x748>)
 8008ee2:	4293      	cmp	r3, r2
 8008ee4:	d125      	bne.n	8008f32 <HAL_ADC_ConfigChannel+0x6ce>
 8008ee6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008eea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d11f      	bne.n	8008f32 <HAL_ADC_ConfigChannel+0x6ce>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	4a2e      	ldr	r2, [pc, #184]	; (8008fb0 <HAL_ADC_ConfigChannel+0x74c>)
 8008ef8:	4293      	cmp	r3, r2
 8008efa:	d104      	bne.n	8008f06 <HAL_ADC_ConfigChannel+0x6a2>
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	4a2c      	ldr	r2, [pc, #176]	; (8008fb4 <HAL_ADC_ConfigChannel+0x750>)
 8008f02:	4293      	cmp	r3, r2
 8008f04:	d047      	beq.n	8008f96 <HAL_ADC_ConfigChannel+0x732>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008f0e:	d004      	beq.n	8008f1a <HAL_ADC_ConfigChannel+0x6b6>
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	4a26      	ldr	r2, [pc, #152]	; (8008fb0 <HAL_ADC_ConfigChannel+0x74c>)
 8008f16:	4293      	cmp	r3, r2
 8008f18:	d101      	bne.n	8008f1e <HAL_ADC_ConfigChannel+0x6ba>
 8008f1a:	4a27      	ldr	r2, [pc, #156]	; (8008fb8 <HAL_ADC_ConfigChannel+0x754>)
 8008f1c:	e000      	b.n	8008f20 <HAL_ADC_ConfigChannel+0x6bc>
 8008f1e:	4a27      	ldr	r2, [pc, #156]	; (8008fbc <HAL_ADC_ConfigChannel+0x758>)
 8008f20:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008f24:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008f28:	4619      	mov	r1, r3
 8008f2a:	4610      	mov	r0, r2
 8008f2c:	f7ff f92b 	bl	8008186 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008f30:	e031      	b.n	8008f96 <HAL_ADC_ConfigChannel+0x732>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	4a22      	ldr	r2, [pc, #136]	; (8008fc0 <HAL_ADC_ConfigChannel+0x75c>)
 8008f38:	4293      	cmp	r3, r2
 8008f3a:	d12d      	bne.n	8008f98 <HAL_ADC_ConfigChannel+0x734>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8008f3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008f40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d127      	bne.n	8008f98 <HAL_ADC_ConfigChannel+0x734>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	4a18      	ldr	r2, [pc, #96]	; (8008fb0 <HAL_ADC_ConfigChannel+0x74c>)
 8008f4e:	4293      	cmp	r3, r2
 8008f50:	d022      	beq.n	8008f98 <HAL_ADC_ConfigChannel+0x734>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008f5a:	d004      	beq.n	8008f66 <HAL_ADC_ConfigChannel+0x702>
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	4a13      	ldr	r2, [pc, #76]	; (8008fb0 <HAL_ADC_ConfigChannel+0x74c>)
 8008f62:	4293      	cmp	r3, r2
 8008f64:	d101      	bne.n	8008f6a <HAL_ADC_ConfigChannel+0x706>
 8008f66:	4a14      	ldr	r2, [pc, #80]	; (8008fb8 <HAL_ADC_ConfigChannel+0x754>)
 8008f68:	e000      	b.n	8008f6c <HAL_ADC_ConfigChannel+0x708>
 8008f6a:	4a14      	ldr	r2, [pc, #80]	; (8008fbc <HAL_ADC_ConfigChannel+0x758>)
 8008f6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008f70:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008f74:	4619      	mov	r1, r3
 8008f76:	4610      	mov	r0, r2
 8008f78:	f7ff f905 	bl	8008186 <LL_ADC_SetCommonPathInternalCh>
 8008f7c:	e00c      	b.n	8008f98 <HAL_ADC_ConfigChannel+0x734>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f82:	f043 0220 	orr.w	r2, r3, #32
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8008f90:	e002      	b.n	8008f98 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008f92:	bf00      	nop
 8008f94:	e000      	b.n	8008f98 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008f96:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8008fa0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	3798      	adds	r7, #152	; 0x98
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}
 8008fac:	c7520000 	.word	0xc7520000
 8008fb0:	50000100 	.word	0x50000100
 8008fb4:	50000500 	.word	0x50000500
 8008fb8:	50000300 	.word	0x50000300
 8008fbc:	50000700 	.word	0x50000700
 8008fc0:	cb840000 	.word	0xcb840000

08008fc4 <LL_ADC_IsEnabled>:
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	b083      	sub	sp, #12
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	689b      	ldr	r3, [r3, #8]
 8008fd0:	f003 0301 	and.w	r3, r3, #1
 8008fd4:	2b01      	cmp	r3, #1
 8008fd6:	d101      	bne.n	8008fdc <LL_ADC_IsEnabled+0x18>
 8008fd8:	2301      	movs	r3, #1
 8008fda:	e000      	b.n	8008fde <LL_ADC_IsEnabled+0x1a>
 8008fdc:	2300      	movs	r3, #0
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	370c      	adds	r7, #12
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe8:	4770      	bx	lr

08008fea <LL_ADC_REG_IsConversionOngoing>:
{
 8008fea:	b480      	push	{r7}
 8008fec:	b083      	sub	sp, #12
 8008fee:	af00      	add	r7, sp, #0
 8008ff0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	689b      	ldr	r3, [r3, #8]
 8008ff6:	f003 0304 	and.w	r3, r3, #4
 8008ffa:	2b04      	cmp	r3, #4
 8008ffc:	d101      	bne.n	8009002 <LL_ADC_REG_IsConversionOngoing+0x18>
 8008ffe:	2301      	movs	r3, #1
 8009000:	e000      	b.n	8009004 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8009002:	2300      	movs	r3, #0
}
 8009004:	4618      	mov	r0, r3
 8009006:	370c      	adds	r7, #12
 8009008:	46bd      	mov	sp, r7
 800900a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900e:	4770      	bx	lr

08009010 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8009010:	b590      	push	{r4, r7, lr}
 8009012:	b0a1      	sub	sp, #132	; 0x84
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
 8009018:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800901a:	2300      	movs	r3, #0
 800901c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8009026:	2b01      	cmp	r3, #1
 8009028:	d101      	bne.n	800902e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800902a:	2302      	movs	r3, #2
 800902c:	e0e3      	b.n	80091f6 <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2201      	movs	r2, #1
 8009032:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800903e:	d102      	bne.n	8009046 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8009040:	4b6f      	ldr	r3, [pc, #444]	; (8009200 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8009042:	60bb      	str	r3, [r7, #8]
 8009044:	e009      	b.n	800905a <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	4a6e      	ldr	r2, [pc, #440]	; (8009204 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 800904c:	4293      	cmp	r3, r2
 800904e:	d102      	bne.n	8009056 <HAL_ADCEx_MultiModeConfigChannel+0x46>
 8009050:	4b6d      	ldr	r3, [pc, #436]	; (8009208 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8009052:	60bb      	str	r3, [r7, #8]
 8009054:	e001      	b.n	800905a <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8009056:	2300      	movs	r3, #0
 8009058:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800905a:	68bb      	ldr	r3, [r7, #8]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d10b      	bne.n	8009078 <HAL_ADCEx_MultiModeConfigChannel+0x68>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009064:	f043 0220 	orr.w	r2, r3, #32
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2200      	movs	r2, #0
 8009070:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8009074:	2301      	movs	r3, #1
 8009076:	e0be      	b.n	80091f6 <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	4618      	mov	r0, r3
 800907c:	f7ff ffb5 	bl	8008fea <LL_ADC_REG_IsConversionOngoing>
 8009080:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	4618      	mov	r0, r3
 8009088:	f7ff ffaf 	bl	8008fea <LL_ADC_REG_IsConversionOngoing>
 800908c:	4603      	mov	r3, r0
 800908e:	2b00      	cmp	r3, #0
 8009090:	f040 80a0 	bne.w	80091d4 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8009094:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009096:	2b00      	cmp	r3, #0
 8009098:	f040 809c 	bne.w	80091d4 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80090a4:	d004      	beq.n	80090b0 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	4a55      	ldr	r2, [pc, #340]	; (8009200 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80090ac:	4293      	cmp	r3, r2
 80090ae:	d101      	bne.n	80090b4 <HAL_ADCEx_MultiModeConfigChannel+0xa4>
 80090b0:	4b56      	ldr	r3, [pc, #344]	; (800920c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80090b2:	e000      	b.n	80090b6 <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 80090b4:	4b56      	ldr	r3, [pc, #344]	; (8009210 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80090b6:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d04b      	beq.n	8009158 <HAL_ADCEx_MultiModeConfigChannel+0x148>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80090c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80090c2:	689b      	ldr	r3, [r3, #8]
 80090c4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	6859      	ldr	r1, [r3, #4]
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80090d2:	035b      	lsls	r3, r3, #13
 80090d4:	430b      	orrs	r3, r1
 80090d6:	431a      	orrs	r2, r3
 80090d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80090da:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80090e4:	d004      	beq.n	80090f0 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	4a45      	ldr	r2, [pc, #276]	; (8009200 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80090ec:	4293      	cmp	r3, r2
 80090ee:	d10f      	bne.n	8009110 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 80090f0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80090f4:	f7ff ff66 	bl	8008fc4 <LL_ADC_IsEnabled>
 80090f8:	4604      	mov	r4, r0
 80090fa:	4841      	ldr	r0, [pc, #260]	; (8009200 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80090fc:	f7ff ff62 	bl	8008fc4 <LL_ADC_IsEnabled>
 8009100:	4603      	mov	r3, r0
 8009102:	4323      	orrs	r3, r4
 8009104:	2b00      	cmp	r3, #0
 8009106:	bf0c      	ite	eq
 8009108:	2301      	moveq	r3, #1
 800910a:	2300      	movne	r3, #0
 800910c:	b2db      	uxtb	r3, r3
 800910e:	e012      	b.n	8009136 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8009110:	483c      	ldr	r0, [pc, #240]	; (8009204 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8009112:	f7ff ff57 	bl	8008fc4 <LL_ADC_IsEnabled>
 8009116:	4604      	mov	r4, r0
 8009118:	483b      	ldr	r0, [pc, #236]	; (8009208 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800911a:	f7ff ff53 	bl	8008fc4 <LL_ADC_IsEnabled>
 800911e:	4603      	mov	r3, r0
 8009120:	431c      	orrs	r4, r3
 8009122:	483c      	ldr	r0, [pc, #240]	; (8009214 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8009124:	f7ff ff4e 	bl	8008fc4 <LL_ADC_IsEnabled>
 8009128:	4603      	mov	r3, r0
 800912a:	4323      	orrs	r3, r4
 800912c:	2b00      	cmp	r3, #0
 800912e:	bf0c      	ite	eq
 8009130:	2301      	moveq	r3, #1
 8009132:	2300      	movne	r3, #0
 8009134:	b2db      	uxtb	r3, r3
 8009136:	2b00      	cmp	r3, #0
 8009138:	d056      	beq.n	80091e8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800913a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800913c:	689b      	ldr	r3, [r3, #8]
 800913e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8009142:	f023 030f 	bic.w	r3, r3, #15
 8009146:	683a      	ldr	r2, [r7, #0]
 8009148:	6811      	ldr	r1, [r2, #0]
 800914a:	683a      	ldr	r2, [r7, #0]
 800914c:	6892      	ldr	r2, [r2, #8]
 800914e:	430a      	orrs	r2, r1
 8009150:	431a      	orrs	r2, r3
 8009152:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009154:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8009156:	e047      	b.n	80091e8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8009158:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800915a:	689b      	ldr	r3, [r3, #8]
 800915c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009160:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009162:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800916c:	d004      	beq.n	8009178 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	4a23      	ldr	r2, [pc, #140]	; (8009200 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8009174:	4293      	cmp	r3, r2
 8009176:	d10f      	bne.n	8009198 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8009178:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800917c:	f7ff ff22 	bl	8008fc4 <LL_ADC_IsEnabled>
 8009180:	4604      	mov	r4, r0
 8009182:	481f      	ldr	r0, [pc, #124]	; (8009200 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8009184:	f7ff ff1e 	bl	8008fc4 <LL_ADC_IsEnabled>
 8009188:	4603      	mov	r3, r0
 800918a:	4323      	orrs	r3, r4
 800918c:	2b00      	cmp	r3, #0
 800918e:	bf0c      	ite	eq
 8009190:	2301      	moveq	r3, #1
 8009192:	2300      	movne	r3, #0
 8009194:	b2db      	uxtb	r3, r3
 8009196:	e012      	b.n	80091be <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
 8009198:	481a      	ldr	r0, [pc, #104]	; (8009204 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 800919a:	f7ff ff13 	bl	8008fc4 <LL_ADC_IsEnabled>
 800919e:	4604      	mov	r4, r0
 80091a0:	4819      	ldr	r0, [pc, #100]	; (8009208 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80091a2:	f7ff ff0f 	bl	8008fc4 <LL_ADC_IsEnabled>
 80091a6:	4603      	mov	r3, r0
 80091a8:	431c      	orrs	r4, r3
 80091aa:	481a      	ldr	r0, [pc, #104]	; (8009214 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80091ac:	f7ff ff0a 	bl	8008fc4 <LL_ADC_IsEnabled>
 80091b0:	4603      	mov	r3, r0
 80091b2:	4323      	orrs	r3, r4
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	bf0c      	ite	eq
 80091b8:	2301      	moveq	r3, #1
 80091ba:	2300      	movne	r3, #0
 80091bc:	b2db      	uxtb	r3, r3
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d012      	beq.n	80091e8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80091c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80091c4:	689b      	ldr	r3, [r3, #8]
 80091c6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80091ca:	f023 030f 	bic.w	r3, r3, #15
 80091ce:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80091d0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80091d2:	e009      	b.n	80091e8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091d8:	f043 0220 	orr.w	r2, r3, #32
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80091e0:	2301      	movs	r3, #1
 80091e2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80091e6:	e000      	b.n	80091ea <HAL_ADCEx_MultiModeConfigChannel+0x1da>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80091e8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2200      	movs	r2, #0
 80091ee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80091f2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80091f6:	4618      	mov	r0, r3
 80091f8:	3784      	adds	r7, #132	; 0x84
 80091fa:	46bd      	mov	sp, r7
 80091fc:	bd90      	pop	{r4, r7, pc}
 80091fe:	bf00      	nop
 8009200:	50000100 	.word	0x50000100
 8009204:	50000400 	.word	0x50000400
 8009208:	50000500 	.word	0x50000500
 800920c:	50000300 	.word	0x50000300
 8009210:	50000700 	.word	0x50000700
 8009214:	50000600 	.word	0x50000600

08009218 <LL_EXTI_EnableIT_0_31>:
{
 8009218:	b480      	push	{r7}
 800921a:	b083      	sub	sp, #12
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8009220:	4b05      	ldr	r3, [pc, #20]	; (8009238 <LL_EXTI_EnableIT_0_31+0x20>)
 8009222:	681a      	ldr	r2, [r3, #0]
 8009224:	4904      	ldr	r1, [pc, #16]	; (8009238 <LL_EXTI_EnableIT_0_31+0x20>)
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	4313      	orrs	r3, r2
 800922a:	600b      	str	r3, [r1, #0]
}
 800922c:	bf00      	nop
 800922e:	370c      	adds	r7, #12
 8009230:	46bd      	mov	sp, r7
 8009232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009236:	4770      	bx	lr
 8009238:	40010400 	.word	0x40010400

0800923c <LL_EXTI_EnableIT_32_63>:
{
 800923c:	b480      	push	{r7}
 800923e:	b083      	sub	sp, #12
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8009244:	4b05      	ldr	r3, [pc, #20]	; (800925c <LL_EXTI_EnableIT_32_63+0x20>)
 8009246:	6a1a      	ldr	r2, [r3, #32]
 8009248:	4904      	ldr	r1, [pc, #16]	; (800925c <LL_EXTI_EnableIT_32_63+0x20>)
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	4313      	orrs	r3, r2
 800924e:	620b      	str	r3, [r1, #32]
}
 8009250:	bf00      	nop
 8009252:	370c      	adds	r7, #12
 8009254:	46bd      	mov	sp, r7
 8009256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925a:	4770      	bx	lr
 800925c:	40010400 	.word	0x40010400

08009260 <LL_EXTI_DisableIT_0_31>:
{
 8009260:	b480      	push	{r7}
 8009262:	b083      	sub	sp, #12
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8009268:	4b06      	ldr	r3, [pc, #24]	; (8009284 <LL_EXTI_DisableIT_0_31+0x24>)
 800926a:	681a      	ldr	r2, [r3, #0]
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	43db      	mvns	r3, r3
 8009270:	4904      	ldr	r1, [pc, #16]	; (8009284 <LL_EXTI_DisableIT_0_31+0x24>)
 8009272:	4013      	ands	r3, r2
 8009274:	600b      	str	r3, [r1, #0]
}
 8009276:	bf00      	nop
 8009278:	370c      	adds	r7, #12
 800927a:	46bd      	mov	sp, r7
 800927c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009280:	4770      	bx	lr
 8009282:	bf00      	nop
 8009284:	40010400 	.word	0x40010400

08009288 <LL_EXTI_DisableIT_32_63>:
{
 8009288:	b480      	push	{r7}
 800928a:	b083      	sub	sp, #12
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8009290:	4b06      	ldr	r3, [pc, #24]	; (80092ac <LL_EXTI_DisableIT_32_63+0x24>)
 8009292:	6a1a      	ldr	r2, [r3, #32]
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	43db      	mvns	r3, r3
 8009298:	4904      	ldr	r1, [pc, #16]	; (80092ac <LL_EXTI_DisableIT_32_63+0x24>)
 800929a:	4013      	ands	r3, r2
 800929c:	620b      	str	r3, [r1, #32]
}
 800929e:	bf00      	nop
 80092a0:	370c      	adds	r7, #12
 80092a2:	46bd      	mov	sp, r7
 80092a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a8:	4770      	bx	lr
 80092aa:	bf00      	nop
 80092ac:	40010400 	.word	0x40010400

080092b0 <LL_EXTI_EnableEvent_0_31>:
{
 80092b0:	b480      	push	{r7}
 80092b2:	b083      	sub	sp, #12
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 80092b8:	4b05      	ldr	r3, [pc, #20]	; (80092d0 <LL_EXTI_EnableEvent_0_31+0x20>)
 80092ba:	685a      	ldr	r2, [r3, #4]
 80092bc:	4904      	ldr	r1, [pc, #16]	; (80092d0 <LL_EXTI_EnableEvent_0_31+0x20>)
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	4313      	orrs	r3, r2
 80092c2:	604b      	str	r3, [r1, #4]
}
 80092c4:	bf00      	nop
 80092c6:	370c      	adds	r7, #12
 80092c8:	46bd      	mov	sp, r7
 80092ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ce:	4770      	bx	lr
 80092d0:	40010400 	.word	0x40010400

080092d4 <LL_EXTI_EnableEvent_32_63>:
{
 80092d4:	b480      	push	{r7}
 80092d6:	b083      	sub	sp, #12
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 80092dc:	4b05      	ldr	r3, [pc, #20]	; (80092f4 <LL_EXTI_EnableEvent_32_63+0x20>)
 80092de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80092e0:	4904      	ldr	r1, [pc, #16]	; (80092f4 <LL_EXTI_EnableEvent_32_63+0x20>)
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	4313      	orrs	r3, r2
 80092e6:	624b      	str	r3, [r1, #36]	; 0x24
}
 80092e8:	bf00      	nop
 80092ea:	370c      	adds	r7, #12
 80092ec:	46bd      	mov	sp, r7
 80092ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f2:	4770      	bx	lr
 80092f4:	40010400 	.word	0x40010400

080092f8 <LL_EXTI_DisableEvent_0_31>:
{
 80092f8:	b480      	push	{r7}
 80092fa:	b083      	sub	sp, #12
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8009300:	4b06      	ldr	r3, [pc, #24]	; (800931c <LL_EXTI_DisableEvent_0_31+0x24>)
 8009302:	685a      	ldr	r2, [r3, #4]
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	43db      	mvns	r3, r3
 8009308:	4904      	ldr	r1, [pc, #16]	; (800931c <LL_EXTI_DisableEvent_0_31+0x24>)
 800930a:	4013      	ands	r3, r2
 800930c:	604b      	str	r3, [r1, #4]
}
 800930e:	bf00      	nop
 8009310:	370c      	adds	r7, #12
 8009312:	46bd      	mov	sp, r7
 8009314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009318:	4770      	bx	lr
 800931a:	bf00      	nop
 800931c:	40010400 	.word	0x40010400

08009320 <LL_EXTI_DisableEvent_32_63>:
{
 8009320:	b480      	push	{r7}
 8009322:	b083      	sub	sp, #12
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8009328:	4b06      	ldr	r3, [pc, #24]	; (8009344 <LL_EXTI_DisableEvent_32_63+0x24>)
 800932a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	43db      	mvns	r3, r3
 8009330:	4904      	ldr	r1, [pc, #16]	; (8009344 <LL_EXTI_DisableEvent_32_63+0x24>)
 8009332:	4013      	ands	r3, r2
 8009334:	624b      	str	r3, [r1, #36]	; 0x24
}
 8009336:	bf00      	nop
 8009338:	370c      	adds	r7, #12
 800933a:	46bd      	mov	sp, r7
 800933c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009340:	4770      	bx	lr
 8009342:	bf00      	nop
 8009344:	40010400 	.word	0x40010400

08009348 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8009348:	b480      	push	{r7}
 800934a:	b083      	sub	sp, #12
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8009350:	4b05      	ldr	r3, [pc, #20]	; (8009368 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8009352:	689a      	ldr	r2, [r3, #8]
 8009354:	4904      	ldr	r1, [pc, #16]	; (8009368 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	4313      	orrs	r3, r2
 800935a:	608b      	str	r3, [r1, #8]
}
 800935c:	bf00      	nop
 800935e:	370c      	adds	r7, #12
 8009360:	46bd      	mov	sp, r7
 8009362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009366:	4770      	bx	lr
 8009368:	40010400 	.word	0x40010400

0800936c <LL_EXTI_EnableRisingTrig_32_63>:
{
 800936c:	b480      	push	{r7}
 800936e:	b083      	sub	sp, #12
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8009374:	4b05      	ldr	r3, [pc, #20]	; (800938c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8009376:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009378:	4904      	ldr	r1, [pc, #16]	; (800938c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	4313      	orrs	r3, r2
 800937e:	628b      	str	r3, [r1, #40]	; 0x28
}
 8009380:	bf00      	nop
 8009382:	370c      	adds	r7, #12
 8009384:	46bd      	mov	sp, r7
 8009386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938a:	4770      	bx	lr
 800938c:	40010400 	.word	0x40010400

08009390 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8009390:	b480      	push	{r7}
 8009392:	b083      	sub	sp, #12
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8009398:	4b06      	ldr	r3, [pc, #24]	; (80093b4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800939a:	689a      	ldr	r2, [r3, #8]
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	43db      	mvns	r3, r3
 80093a0:	4904      	ldr	r1, [pc, #16]	; (80093b4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80093a2:	4013      	ands	r3, r2
 80093a4:	608b      	str	r3, [r1, #8]
}
 80093a6:	bf00      	nop
 80093a8:	370c      	adds	r7, #12
 80093aa:	46bd      	mov	sp, r7
 80093ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b0:	4770      	bx	lr
 80093b2:	bf00      	nop
 80093b4:	40010400 	.word	0x40010400

080093b8 <LL_EXTI_DisableRisingTrig_32_63>:
{
 80093b8:	b480      	push	{r7}
 80093ba:	b083      	sub	sp, #12
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 80093c0:	4b06      	ldr	r3, [pc, #24]	; (80093dc <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80093c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	43db      	mvns	r3, r3
 80093c8:	4904      	ldr	r1, [pc, #16]	; (80093dc <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80093ca:	4013      	ands	r3, r2
 80093cc:	628b      	str	r3, [r1, #40]	; 0x28
}
 80093ce:	bf00      	nop
 80093d0:	370c      	adds	r7, #12
 80093d2:	46bd      	mov	sp, r7
 80093d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d8:	4770      	bx	lr
 80093da:	bf00      	nop
 80093dc:	40010400 	.word	0x40010400

080093e0 <LL_EXTI_EnableFallingTrig_0_31>:
{
 80093e0:	b480      	push	{r7}
 80093e2:	b083      	sub	sp, #12
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80093e8:	4b05      	ldr	r3, [pc, #20]	; (8009400 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80093ea:	68da      	ldr	r2, [r3, #12]
 80093ec:	4904      	ldr	r1, [pc, #16]	; (8009400 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	4313      	orrs	r3, r2
 80093f2:	60cb      	str	r3, [r1, #12]
}
 80093f4:	bf00      	nop
 80093f6:	370c      	adds	r7, #12
 80093f8:	46bd      	mov	sp, r7
 80093fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fe:	4770      	bx	lr
 8009400:	40010400 	.word	0x40010400

08009404 <LL_EXTI_EnableFallingTrig_32_63>:
{
 8009404:	b480      	push	{r7}
 8009406:	b083      	sub	sp, #12
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 800940c:	4b05      	ldr	r3, [pc, #20]	; (8009424 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800940e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009410:	4904      	ldr	r1, [pc, #16]	; (8009424 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	4313      	orrs	r3, r2
 8009416:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8009418:	bf00      	nop
 800941a:	370c      	adds	r7, #12
 800941c:	46bd      	mov	sp, r7
 800941e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009422:	4770      	bx	lr
 8009424:	40010400 	.word	0x40010400

08009428 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8009428:	b480      	push	{r7}
 800942a:	b083      	sub	sp, #12
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8009430:	4b06      	ldr	r3, [pc, #24]	; (800944c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8009432:	68da      	ldr	r2, [r3, #12]
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	43db      	mvns	r3, r3
 8009438:	4904      	ldr	r1, [pc, #16]	; (800944c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800943a:	4013      	ands	r3, r2
 800943c:	60cb      	str	r3, [r1, #12]
}
 800943e:	bf00      	nop
 8009440:	370c      	adds	r7, #12
 8009442:	46bd      	mov	sp, r7
 8009444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009448:	4770      	bx	lr
 800944a:	bf00      	nop
 800944c:	40010400 	.word	0x40010400

08009450 <LL_EXTI_DisableFallingTrig_32_63>:
{
 8009450:	b480      	push	{r7}
 8009452:	b083      	sub	sp, #12
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8009458:	4b06      	ldr	r3, [pc, #24]	; (8009474 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800945a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	43db      	mvns	r3, r3
 8009460:	4904      	ldr	r1, [pc, #16]	; (8009474 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8009462:	4013      	ands	r3, r2
 8009464:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8009466:	bf00      	nop
 8009468:	370c      	adds	r7, #12
 800946a:	46bd      	mov	sp, r7
 800946c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009470:	4770      	bx	lr
 8009472:	bf00      	nop
 8009474:	40010400 	.word	0x40010400

08009478 <LL_EXTI_ClearFlag_0_31>:
{
 8009478:	b480      	push	{r7}
 800947a:	b083      	sub	sp, #12
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8009480:	4a04      	ldr	r2, [pc, #16]	; (8009494 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6153      	str	r3, [r2, #20]
}
 8009486:	bf00      	nop
 8009488:	370c      	adds	r7, #12
 800948a:	46bd      	mov	sp, r7
 800948c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009490:	4770      	bx	lr
 8009492:	bf00      	nop
 8009494:	40010400 	.word	0x40010400

08009498 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 8009498:	b480      	push	{r7}
 800949a:	b083      	sub	sp, #12
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 80094a0:	4a04      	ldr	r2, [pc, #16]	; (80094b4 <LL_EXTI_ClearFlag_32_63+0x1c>)
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	6353      	str	r3, [r2, #52]	; 0x34
}
 80094a6:	bf00      	nop
 80094a8:	370c      	adds	r7, #12
 80094aa:	46bd      	mov	sp, r7
 80094ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b0:	4770      	bx	lr
 80094b2:	bf00      	nop
 80094b4:	40010400 	.word	0x40010400

080094b8 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b088      	sub	sp, #32
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 80094c0:	2300      	movs	r3, #0
 80094c2:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80094c4:	2300      	movs	r3, #0
 80094c6:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d102      	bne.n	80094d4 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 80094ce:	2301      	movs	r3, #1
 80094d0:	77fb      	strb	r3, [r7, #31]
 80094d2:	e180      	b.n	80097d6 <HAL_COMP_Init+0x31e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80094de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80094e2:	d102      	bne.n	80094ea <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 80094e4:	2301      	movs	r3, #1
 80094e6:	77fb      	strb	r3, [r7, #31]
 80094e8:	e175      	b.n	80097d6 <HAL_COMP_Init+0x31e>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	7f5b      	ldrb	r3, [r3, #29]
 80094ee:	b2db      	uxtb	r3, r3
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d108      	bne.n	8009506 <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2200      	movs	r2, #0
 80094f8:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2200      	movs	r2, #0
 80094fe:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8009500:	6878      	ldr	r0, [r7, #4]
 8009502:	f7fd f9d1 	bl	80068a8 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009510:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	685b      	ldr	r3, [r3, #4]
 800951a:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	695b      	ldr	r3, [r3, #20]
 8009520:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	68db      	ldr	r3, [r3, #12]
 8009526:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (  hcomp->Init.InputMinus
 800952c:	4313      	orrs	r3, r2
 800952e:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	681a      	ldr	r2, [r3, #0]
 8009536:	4b98      	ldr	r3, [pc, #608]	; (8009798 <HAL_COMP_Init+0x2e0>)
 8009538:	4013      	ands	r3, r2
 800953a:	687a      	ldr	r2, [r7, #4]
 800953c:	6812      	ldr	r2, [r2, #0]
 800953e:	6979      	ldr	r1, [r7, #20]
 8009540:	430b      	orrs	r3, r1
 8009542:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800954e:	2b00      	cmp	r3, #0
 8009550:	d015      	beq.n	800957e <HAL_COMP_Init+0xc6>
 8009552:	69bb      	ldr	r3, [r7, #24]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d112      	bne.n	800957e <HAL_COMP_Init+0xc6>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8009558:	4b90      	ldr	r3, [pc, #576]	; (800979c <HAL_COMP_Init+0x2e4>)
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	099b      	lsrs	r3, r3, #6
 800955e:	4a90      	ldr	r2, [pc, #576]	; (80097a0 <HAL_COMP_Init+0x2e8>)
 8009560:	fba2 2303 	umull	r2, r3, r2, r3
 8009564:	099a      	lsrs	r2, r3, #6
 8009566:	4613      	mov	r3, r2
 8009568:	009b      	lsls	r3, r3, #2
 800956a:	4413      	add	r3, r2
 800956c:	009b      	lsls	r3, r3, #2
 800956e:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8009570:	e002      	b.n	8009578 <HAL_COMP_Init+0xc0>
      {
        wait_loop_index--;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	3b01      	subs	r3, #1
 8009576:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d1f9      	bne.n	8009572 <HAL_COMP_Init+0xba>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	4a88      	ldr	r2, [pc, #544]	; (80097a4 <HAL_COMP_Init+0x2ec>)
 8009584:	4293      	cmp	r3, r2
 8009586:	d028      	beq.n	80095da <HAL_COMP_Init+0x122>
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	4a86      	ldr	r2, [pc, #536]	; (80097a8 <HAL_COMP_Init+0x2f0>)
 800958e:	4293      	cmp	r3, r2
 8009590:	d020      	beq.n	80095d4 <HAL_COMP_Init+0x11c>
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	4a85      	ldr	r2, [pc, #532]	; (80097ac <HAL_COMP_Init+0x2f4>)
 8009598:	4293      	cmp	r3, r2
 800959a:	d018      	beq.n	80095ce <HAL_COMP_Init+0x116>
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	4a83      	ldr	r2, [pc, #524]	; (80097b0 <HAL_COMP_Init+0x2f8>)
 80095a2:	4293      	cmp	r3, r2
 80095a4:	d010      	beq.n	80095c8 <HAL_COMP_Init+0x110>
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	4a82      	ldr	r2, [pc, #520]	; (80097b4 <HAL_COMP_Init+0x2fc>)
 80095ac:	4293      	cmp	r3, r2
 80095ae:	d008      	beq.n	80095c2 <HAL_COMP_Init+0x10a>
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	4a80      	ldr	r2, [pc, #512]	; (80097b8 <HAL_COMP_Init+0x300>)
 80095b6:	4293      	cmp	r3, r2
 80095b8:	d101      	bne.n	80095be <HAL_COMP_Init+0x106>
 80095ba:	2301      	movs	r3, #1
 80095bc:	e00f      	b.n	80095de <HAL_COMP_Init+0x126>
 80095be:	2302      	movs	r3, #2
 80095c0:	e00d      	b.n	80095de <HAL_COMP_Init+0x126>
 80095c2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80095c6:	e00a      	b.n	80095de <HAL_COMP_Init+0x126>
 80095c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80095cc:	e007      	b.n	80095de <HAL_COMP_Init+0x126>
 80095ce:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80095d2:	e004      	b.n	80095de <HAL_COMP_Init+0x126>
 80095d4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80095d8:	e001      	b.n	80095de <HAL_COMP_Init+0x126>
 80095da:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80095de:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	699b      	ldr	r3, [r3, #24]
 80095e4:	f003 0303 	and.w	r3, r3, #3
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	f000 80b6 	beq.w	800975a <HAL_COMP_Init+0x2a2>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	699b      	ldr	r3, [r3, #24]
 80095f2:	f003 0310 	and.w	r3, r3, #16
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d011      	beq.n	800961e <HAL_COMP_Init+0x166>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	4a6e      	ldr	r2, [pc, #440]	; (80097b8 <HAL_COMP_Init+0x300>)
 8009600:	4293      	cmp	r3, r2
 8009602:	d004      	beq.n	800960e <HAL_COMP_Init+0x156>
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	4a6c      	ldr	r2, [pc, #432]	; (80097bc <HAL_COMP_Init+0x304>)
 800960a:	4293      	cmp	r3, r2
 800960c:	d103      	bne.n	8009616 <HAL_COMP_Init+0x15e>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 800960e:	6938      	ldr	r0, [r7, #16]
 8009610:	f7ff feac 	bl	800936c <LL_EXTI_EnableRisingTrig_32_63>
 8009614:	e014      	b.n	8009640 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8009616:	6938      	ldr	r0, [r7, #16]
 8009618:	f7ff fe96 	bl	8009348 <LL_EXTI_EnableRisingTrig_0_31>
 800961c:	e010      	b.n	8009640 <HAL_COMP_Init+0x188>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	4a65      	ldr	r2, [pc, #404]	; (80097b8 <HAL_COMP_Init+0x300>)
 8009624:	4293      	cmp	r3, r2
 8009626:	d004      	beq.n	8009632 <HAL_COMP_Init+0x17a>
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	4a63      	ldr	r2, [pc, #396]	; (80097bc <HAL_COMP_Init+0x304>)
 800962e:	4293      	cmp	r3, r2
 8009630:	d103      	bne.n	800963a <HAL_COMP_Init+0x182>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 8009632:	6938      	ldr	r0, [r7, #16]
 8009634:	f7ff fec0 	bl	80093b8 <LL_EXTI_DisableRisingTrig_32_63>
 8009638:	e002      	b.n	8009640 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 800963a:	6938      	ldr	r0, [r7, #16]
 800963c:	f7ff fea8 	bl	8009390 <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	699b      	ldr	r3, [r3, #24]
 8009644:	f003 0320 	and.w	r3, r3, #32
 8009648:	2b00      	cmp	r3, #0
 800964a:	d011      	beq.n	8009670 <HAL_COMP_Init+0x1b8>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	4a59      	ldr	r2, [pc, #356]	; (80097b8 <HAL_COMP_Init+0x300>)
 8009652:	4293      	cmp	r3, r2
 8009654:	d004      	beq.n	8009660 <HAL_COMP_Init+0x1a8>
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	4a58      	ldr	r2, [pc, #352]	; (80097bc <HAL_COMP_Init+0x304>)
 800965c:	4293      	cmp	r3, r2
 800965e:	d103      	bne.n	8009668 <HAL_COMP_Init+0x1b0>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 8009660:	6938      	ldr	r0, [r7, #16]
 8009662:	f7ff fecf 	bl	8009404 <LL_EXTI_EnableFallingTrig_32_63>
 8009666:	e014      	b.n	8009692 <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8009668:	6938      	ldr	r0, [r7, #16]
 800966a:	f7ff feb9 	bl	80093e0 <LL_EXTI_EnableFallingTrig_0_31>
 800966e:	e010      	b.n	8009692 <HAL_COMP_Init+0x1da>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	4a50      	ldr	r2, [pc, #320]	; (80097b8 <HAL_COMP_Init+0x300>)
 8009676:	4293      	cmp	r3, r2
 8009678:	d004      	beq.n	8009684 <HAL_COMP_Init+0x1cc>
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	4a4f      	ldr	r2, [pc, #316]	; (80097bc <HAL_COMP_Init+0x304>)
 8009680:	4293      	cmp	r3, r2
 8009682:	d103      	bne.n	800968c <HAL_COMP_Init+0x1d4>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 8009684:	6938      	ldr	r0, [r7, #16]
 8009686:	f7ff fee3 	bl	8009450 <LL_EXTI_DisableFallingTrig_32_63>
 800968a:	e002      	b.n	8009692 <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 800968c:	6938      	ldr	r0, [r7, #16]
 800968e:	f7ff fecb 	bl	8009428 <LL_EXTI_DisableFallingTrig_0_31>
#endif
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	4a48      	ldr	r2, [pc, #288]	; (80097b8 <HAL_COMP_Init+0x300>)
 8009698:	4293      	cmp	r3, r2
 800969a:	d004      	beq.n	80096a6 <HAL_COMP_Init+0x1ee>
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	4a46      	ldr	r2, [pc, #280]	; (80097bc <HAL_COMP_Init+0x304>)
 80096a2:	4293      	cmp	r3, r2
 80096a4:	d103      	bne.n	80096ae <HAL_COMP_Init+0x1f6>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 80096a6:	6938      	ldr	r0, [r7, #16]
 80096a8:	f7ff fef6 	bl	8009498 <LL_EXTI_ClearFlag_32_63>
 80096ac:	e002      	b.n	80096b4 <HAL_COMP_Init+0x1fc>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 80096ae:	6938      	ldr	r0, [r7, #16]
 80096b0:	f7ff fee2 	bl	8009478 <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	699b      	ldr	r3, [r3, #24]
 80096b8:	f003 0302 	and.w	r3, r3, #2
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d011      	beq.n	80096e4 <HAL_COMP_Init+0x22c>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	4a3c      	ldr	r2, [pc, #240]	; (80097b8 <HAL_COMP_Init+0x300>)
 80096c6:	4293      	cmp	r3, r2
 80096c8:	d004      	beq.n	80096d4 <HAL_COMP_Init+0x21c>
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	4a3b      	ldr	r2, [pc, #236]	; (80097bc <HAL_COMP_Init+0x304>)
 80096d0:	4293      	cmp	r3, r2
 80096d2:	d103      	bne.n	80096dc <HAL_COMP_Init+0x224>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 80096d4:	6938      	ldr	r0, [r7, #16]
 80096d6:	f7ff fdfd 	bl	80092d4 <LL_EXTI_EnableEvent_32_63>
 80096da:	e014      	b.n	8009706 <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 80096dc:	6938      	ldr	r0, [r7, #16]
 80096de:	f7ff fde7 	bl	80092b0 <LL_EXTI_EnableEvent_0_31>
 80096e2:	e010      	b.n	8009706 <HAL_COMP_Init+0x24e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	4a33      	ldr	r2, [pc, #204]	; (80097b8 <HAL_COMP_Init+0x300>)
 80096ea:	4293      	cmp	r3, r2
 80096ec:	d004      	beq.n	80096f8 <HAL_COMP_Init+0x240>
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	4a32      	ldr	r2, [pc, #200]	; (80097bc <HAL_COMP_Init+0x304>)
 80096f4:	4293      	cmp	r3, r2
 80096f6:	d103      	bne.n	8009700 <HAL_COMP_Init+0x248>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 80096f8:	6938      	ldr	r0, [r7, #16]
 80096fa:	f7ff fe11 	bl	8009320 <LL_EXTI_DisableEvent_32_63>
 80096fe:	e002      	b.n	8009706 <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 8009700:	6938      	ldr	r0, [r7, #16]
 8009702:	f7ff fdf9 	bl	80092f8 <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	699b      	ldr	r3, [r3, #24]
 800970a:	f003 0301 	and.w	r3, r3, #1
 800970e:	2b00      	cmp	r3, #0
 8009710:	d011      	beq.n	8009736 <HAL_COMP_Init+0x27e>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	4a28      	ldr	r2, [pc, #160]	; (80097b8 <HAL_COMP_Init+0x300>)
 8009718:	4293      	cmp	r3, r2
 800971a:	d004      	beq.n	8009726 <HAL_COMP_Init+0x26e>
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	4a26      	ldr	r2, [pc, #152]	; (80097bc <HAL_COMP_Init+0x304>)
 8009722:	4293      	cmp	r3, r2
 8009724:	d103      	bne.n	800972e <HAL_COMP_Init+0x276>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 8009726:	6938      	ldr	r0, [r7, #16]
 8009728:	f7ff fd88 	bl	800923c <LL_EXTI_EnableIT_32_63>
 800972c:	e04b      	b.n	80097c6 <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 800972e:	6938      	ldr	r0, [r7, #16]
 8009730:	f7ff fd72 	bl	8009218 <LL_EXTI_EnableIT_0_31>
 8009734:	e047      	b.n	80097c6 <HAL_COMP_Init+0x30e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	4a1f      	ldr	r2, [pc, #124]	; (80097b8 <HAL_COMP_Init+0x300>)
 800973c:	4293      	cmp	r3, r2
 800973e:	d004      	beq.n	800974a <HAL_COMP_Init+0x292>
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	4a1d      	ldr	r2, [pc, #116]	; (80097bc <HAL_COMP_Init+0x304>)
 8009746:	4293      	cmp	r3, r2
 8009748:	d103      	bne.n	8009752 <HAL_COMP_Init+0x29a>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 800974a:	6938      	ldr	r0, [r7, #16]
 800974c:	f7ff fd9c 	bl	8009288 <LL_EXTI_DisableIT_32_63>
 8009750:	e039      	b.n	80097c6 <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 8009752:	6938      	ldr	r0, [r7, #16]
 8009754:	f7ff fd84 	bl	8009260 <LL_EXTI_DisableIT_0_31>
 8009758:	e035      	b.n	80097c6 <HAL_COMP_Init+0x30e>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	4a16      	ldr	r2, [pc, #88]	; (80097b8 <HAL_COMP_Init+0x300>)
 8009760:	4293      	cmp	r3, r2
 8009762:	d004      	beq.n	800976e <HAL_COMP_Init+0x2b6>
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	4a14      	ldr	r2, [pc, #80]	; (80097bc <HAL_COMP_Init+0x304>)
 800976a:	4293      	cmp	r3, r2
 800976c:	d103      	bne.n	8009776 <HAL_COMP_Init+0x2be>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 800976e:	6938      	ldr	r0, [r7, #16]
 8009770:	f7ff fdd6 	bl	8009320 <LL_EXTI_DisableEvent_32_63>
 8009774:	e002      	b.n	800977c <HAL_COMP_Init+0x2c4>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8009776:	6938      	ldr	r0, [r7, #16]
 8009778:	f7ff fdbe 	bl	80092f8 <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif

      /* Disable EXTI interrupt mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	4a0d      	ldr	r2, [pc, #52]	; (80097b8 <HAL_COMP_Init+0x300>)
 8009782:	4293      	cmp	r3, r2
 8009784:	d004      	beq.n	8009790 <HAL_COMP_Init+0x2d8>
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	4a0c      	ldr	r2, [pc, #48]	; (80097bc <HAL_COMP_Init+0x304>)
 800978c:	4293      	cmp	r3, r2
 800978e:	d117      	bne.n	80097c0 <HAL_COMP_Init+0x308>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 8009790:	6938      	ldr	r0, [r7, #16]
 8009792:	f7ff fd79 	bl	8009288 <LL_EXTI_DisableIT_32_63>
 8009796:	e016      	b.n	80097c6 <HAL_COMP_Init+0x30e>
 8009798:	ff007e0f 	.word	0xff007e0f
 800979c:	20000ca4 	.word	0x20000ca4
 80097a0:	053e2d63 	.word	0x053e2d63
 80097a4:	40010200 	.word	0x40010200
 80097a8:	40010204 	.word	0x40010204
 80097ac:	40010208 	.word	0x40010208
 80097b0:	4001020c 	.word	0x4001020c
 80097b4:	40010210 	.word	0x40010210
 80097b8:	40010214 	.word	0x40010214
 80097bc:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 80097c0:	6938      	ldr	r0, [r7, #16]
 80097c2:	f7ff fd4d 	bl	8009260 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	7f5b      	ldrb	r3, [r3, #29]
 80097ca:	b2db      	uxtb	r3, r3
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d102      	bne.n	80097d6 <HAL_COMP_Init+0x31e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2201      	movs	r2, #1
 80097d4:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 80097d6:	7ffb      	ldrb	r3, [r7, #31]
}
 80097d8:	4618      	mov	r0, r3
 80097da:	3720      	adds	r7, #32
 80097dc:	46bd      	mov	sp, r7
 80097de:	bd80      	pop	{r7, pc}

080097e0 <__NVIC_SetPriorityGrouping>:
{
 80097e0:	b480      	push	{r7}
 80097e2:	b085      	sub	sp, #20
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f003 0307 	and.w	r3, r3, #7
 80097ee:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80097f0:	4b0c      	ldr	r3, [pc, #48]	; (8009824 <__NVIC_SetPriorityGrouping+0x44>)
 80097f2:	68db      	ldr	r3, [r3, #12]
 80097f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80097f6:	68ba      	ldr	r2, [r7, #8]
 80097f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80097fc:	4013      	ands	r3, r2
 80097fe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009804:	68bb      	ldr	r3, [r7, #8]
 8009806:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009808:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800980c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009810:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009812:	4a04      	ldr	r2, [pc, #16]	; (8009824 <__NVIC_SetPriorityGrouping+0x44>)
 8009814:	68bb      	ldr	r3, [r7, #8]
 8009816:	60d3      	str	r3, [r2, #12]
}
 8009818:	bf00      	nop
 800981a:	3714      	adds	r7, #20
 800981c:	46bd      	mov	sp, r7
 800981e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009822:	4770      	bx	lr
 8009824:	e000ed00 	.word	0xe000ed00

08009828 <__NVIC_GetPriorityGrouping>:
{
 8009828:	b480      	push	{r7}
 800982a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800982c:	4b04      	ldr	r3, [pc, #16]	; (8009840 <__NVIC_GetPriorityGrouping+0x18>)
 800982e:	68db      	ldr	r3, [r3, #12]
 8009830:	0a1b      	lsrs	r3, r3, #8
 8009832:	f003 0307 	and.w	r3, r3, #7
}
 8009836:	4618      	mov	r0, r3
 8009838:	46bd      	mov	sp, r7
 800983a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983e:	4770      	bx	lr
 8009840:	e000ed00 	.word	0xe000ed00

08009844 <__NVIC_EnableIRQ>:
{
 8009844:	b480      	push	{r7}
 8009846:	b083      	sub	sp, #12
 8009848:	af00      	add	r7, sp, #0
 800984a:	4603      	mov	r3, r0
 800984c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800984e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009852:	2b00      	cmp	r3, #0
 8009854:	db0b      	blt.n	800986e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009856:	79fb      	ldrb	r3, [r7, #7]
 8009858:	f003 021f 	and.w	r2, r3, #31
 800985c:	4907      	ldr	r1, [pc, #28]	; (800987c <__NVIC_EnableIRQ+0x38>)
 800985e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009862:	095b      	lsrs	r3, r3, #5
 8009864:	2001      	movs	r0, #1
 8009866:	fa00 f202 	lsl.w	r2, r0, r2
 800986a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800986e:	bf00      	nop
 8009870:	370c      	adds	r7, #12
 8009872:	46bd      	mov	sp, r7
 8009874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009878:	4770      	bx	lr
 800987a:	bf00      	nop
 800987c:	e000e100 	.word	0xe000e100

08009880 <__NVIC_SetPriority>:
{
 8009880:	b480      	push	{r7}
 8009882:	b083      	sub	sp, #12
 8009884:	af00      	add	r7, sp, #0
 8009886:	4603      	mov	r3, r0
 8009888:	6039      	str	r1, [r7, #0]
 800988a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800988c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009890:	2b00      	cmp	r3, #0
 8009892:	db0a      	blt.n	80098aa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	b2da      	uxtb	r2, r3
 8009898:	490c      	ldr	r1, [pc, #48]	; (80098cc <__NVIC_SetPriority+0x4c>)
 800989a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800989e:	0112      	lsls	r2, r2, #4
 80098a0:	b2d2      	uxtb	r2, r2
 80098a2:	440b      	add	r3, r1
 80098a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80098a8:	e00a      	b.n	80098c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	b2da      	uxtb	r2, r3
 80098ae:	4908      	ldr	r1, [pc, #32]	; (80098d0 <__NVIC_SetPriority+0x50>)
 80098b0:	79fb      	ldrb	r3, [r7, #7]
 80098b2:	f003 030f 	and.w	r3, r3, #15
 80098b6:	3b04      	subs	r3, #4
 80098b8:	0112      	lsls	r2, r2, #4
 80098ba:	b2d2      	uxtb	r2, r2
 80098bc:	440b      	add	r3, r1
 80098be:	761a      	strb	r2, [r3, #24]
}
 80098c0:	bf00      	nop
 80098c2:	370c      	adds	r7, #12
 80098c4:	46bd      	mov	sp, r7
 80098c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ca:	4770      	bx	lr
 80098cc:	e000e100 	.word	0xe000e100
 80098d0:	e000ed00 	.word	0xe000ed00

080098d4 <NVIC_EncodePriority>:
{
 80098d4:	b480      	push	{r7}
 80098d6:	b089      	sub	sp, #36	; 0x24
 80098d8:	af00      	add	r7, sp, #0
 80098da:	60f8      	str	r0, [r7, #12]
 80098dc:	60b9      	str	r1, [r7, #8]
 80098de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	f003 0307 	and.w	r3, r3, #7
 80098e6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80098e8:	69fb      	ldr	r3, [r7, #28]
 80098ea:	f1c3 0307 	rsb	r3, r3, #7
 80098ee:	2b04      	cmp	r3, #4
 80098f0:	bf28      	it	cs
 80098f2:	2304      	movcs	r3, #4
 80098f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80098f6:	69fb      	ldr	r3, [r7, #28]
 80098f8:	3304      	adds	r3, #4
 80098fa:	2b06      	cmp	r3, #6
 80098fc:	d902      	bls.n	8009904 <NVIC_EncodePriority+0x30>
 80098fe:	69fb      	ldr	r3, [r7, #28]
 8009900:	3b03      	subs	r3, #3
 8009902:	e000      	b.n	8009906 <NVIC_EncodePriority+0x32>
 8009904:	2300      	movs	r3, #0
 8009906:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009908:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800990c:	69bb      	ldr	r3, [r7, #24]
 800990e:	fa02 f303 	lsl.w	r3, r2, r3
 8009912:	43da      	mvns	r2, r3
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	401a      	ands	r2, r3
 8009918:	697b      	ldr	r3, [r7, #20]
 800991a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800991c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009920:	697b      	ldr	r3, [r7, #20]
 8009922:	fa01 f303 	lsl.w	r3, r1, r3
 8009926:	43d9      	mvns	r1, r3
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800992c:	4313      	orrs	r3, r2
}
 800992e:	4618      	mov	r0, r3
 8009930:	3724      	adds	r7, #36	; 0x24
 8009932:	46bd      	mov	sp, r7
 8009934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009938:	4770      	bx	lr
	...

0800993c <SysTick_Config>:
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b082      	sub	sp, #8
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	3b01      	subs	r3, #1
 8009948:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800994c:	d301      	bcc.n	8009952 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800994e:	2301      	movs	r3, #1
 8009950:	e00f      	b.n	8009972 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009952:	4a0a      	ldr	r2, [pc, #40]	; (800997c <SysTick_Config+0x40>)
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	3b01      	subs	r3, #1
 8009958:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800995a:	210f      	movs	r1, #15
 800995c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009960:	f7ff ff8e 	bl	8009880 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009964:	4b05      	ldr	r3, [pc, #20]	; (800997c <SysTick_Config+0x40>)
 8009966:	2200      	movs	r2, #0
 8009968:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800996a:	4b04      	ldr	r3, [pc, #16]	; (800997c <SysTick_Config+0x40>)
 800996c:	2207      	movs	r2, #7
 800996e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8009970:	2300      	movs	r3, #0
}
 8009972:	4618      	mov	r0, r3
 8009974:	3708      	adds	r7, #8
 8009976:	46bd      	mov	sp, r7
 8009978:	bd80      	pop	{r7, pc}
 800997a:	bf00      	nop
 800997c:	e000e010 	.word	0xe000e010

08009980 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b082      	sub	sp, #8
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	f7ff ff29 	bl	80097e0 <__NVIC_SetPriorityGrouping>
}
 800998e:	bf00      	nop
 8009990:	3708      	adds	r7, #8
 8009992:	46bd      	mov	sp, r7
 8009994:	bd80      	pop	{r7, pc}

08009996 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009996:	b580      	push	{r7, lr}
 8009998:	b086      	sub	sp, #24
 800999a:	af00      	add	r7, sp, #0
 800999c:	4603      	mov	r3, r0
 800999e:	60b9      	str	r1, [r7, #8]
 80099a0:	607a      	str	r2, [r7, #4]
 80099a2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80099a4:	f7ff ff40 	bl	8009828 <__NVIC_GetPriorityGrouping>
 80099a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80099aa:	687a      	ldr	r2, [r7, #4]
 80099ac:	68b9      	ldr	r1, [r7, #8]
 80099ae:	6978      	ldr	r0, [r7, #20]
 80099b0:	f7ff ff90 	bl	80098d4 <NVIC_EncodePriority>
 80099b4:	4602      	mov	r2, r0
 80099b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80099ba:	4611      	mov	r1, r2
 80099bc:	4618      	mov	r0, r3
 80099be:	f7ff ff5f 	bl	8009880 <__NVIC_SetPriority>
}
 80099c2:	bf00      	nop
 80099c4:	3718      	adds	r7, #24
 80099c6:	46bd      	mov	sp, r7
 80099c8:	bd80      	pop	{r7, pc}

080099ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80099ca:	b580      	push	{r7, lr}
 80099cc:	b082      	sub	sp, #8
 80099ce:	af00      	add	r7, sp, #0
 80099d0:	4603      	mov	r3, r0
 80099d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80099d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80099d8:	4618      	mov	r0, r3
 80099da:	f7ff ff33 	bl	8009844 <__NVIC_EnableIRQ>
}
 80099de:	bf00      	nop
 80099e0:	3708      	adds	r7, #8
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}

080099e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80099e6:	b580      	push	{r7, lr}
 80099e8:	b082      	sub	sp, #8
 80099ea:	af00      	add	r7, sp, #0
 80099ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80099ee:	6878      	ldr	r0, [r7, #4]
 80099f0:	f7ff ffa4 	bl	800993c <SysTick_Config>
 80099f4:	4603      	mov	r3, r0
}
 80099f6:	4618      	mov	r0, r3
 80099f8:	3708      	adds	r7, #8
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bd80      	pop	{r7, pc}

080099fe <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80099fe:	b580      	push	{r7, lr}
 8009a00:	b082      	sub	sp, #8
 8009a02:	af00      	add	r7, sp, #0
 8009a04:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d101      	bne.n	8009a10 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8009a0c:	2301      	movs	r3, #1
 8009a0e:	e014      	b.n	8009a3a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	791b      	ldrb	r3, [r3, #4]
 8009a14:	b2db      	uxtb	r3, r3
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d105      	bne.n	8009a26 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8009a20:	6878      	ldr	r0, [r7, #4]
 8009a22:	f7fc fff7 	bl	8006a14 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	2202      	movs	r2, #2
 8009a2a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2200      	movs	r2, #0
 8009a30:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	2201      	movs	r2, #1
 8009a36:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8009a38:	2300      	movs	r3, #0
}
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	3708      	adds	r7, #8
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	bd80      	pop	{r7, pc}

08009a42 <HAL_DAC_Start>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8009a42:	b580      	push	{r7, lr}
 8009a44:	b082      	sub	sp, #8
 8009a46:	af00      	add	r7, sp, #0
 8009a48:	6078      	str	r0, [r7, #4]
 8009a4a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	795b      	ldrb	r3, [r3, #5]
 8009a50:	2b01      	cmp	r3, #1
 8009a52:	d101      	bne.n	8009a58 <HAL_DAC_Start+0x16>
 8009a54:	2302      	movs	r3, #2
 8009a56:	e043      	b.n	8009ae0 <HAL_DAC_Start+0x9e>
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2201      	movs	r2, #1
 8009a5c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2202      	movs	r2, #2
 8009a62:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	6819      	ldr	r1, [r3, #0]
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	f003 0310 	and.w	r3, r3, #16
 8009a70:	2201      	movs	r2, #1
 8009a72:	409a      	lsls	r2, r3
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	430a      	orrs	r2, r1
 8009a7a:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 8009a7c:	2001      	movs	r0, #1
 8009a7e:	f7fe fb4d 	bl	800811c <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d10f      	bne.n	8009aa8 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8009a92:	2b02      	cmp	r3, #2
 8009a94:	d11d      	bne.n	8009ad2 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	685a      	ldr	r2, [r3, #4]
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	f042 0201 	orr.w	r2, r2, #1
 8009aa4:	605a      	str	r2, [r3, #4]
 8009aa6:	e014      	b.n	8009ad2 <HAL_DAC_Start+0x90>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	f003 0310 	and.w	r3, r3, #16
 8009ab8:	2102      	movs	r1, #2
 8009aba:	fa01 f303 	lsl.w	r3, r1, r3
 8009abe:	429a      	cmp	r2, r3
 8009ac0:	d107      	bne.n	8009ad2 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	685a      	ldr	r2, [r3, #4]
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	f042 0202 	orr.w	r2, r2, #2
 8009ad0:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2201      	movs	r2, #1
 8009ad6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2200      	movs	r2, #0
 8009adc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8009ade:	2300      	movs	r3, #0
}
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	3708      	adds	r7, #8
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	bd80      	pop	{r7, pc}

08009ae8 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b086      	sub	sp, #24
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	60f8      	str	r0, [r7, #12]
 8009af0:	60b9      	str	r1, [r7, #8]
 8009af2:	607a      	str	r2, [r7, #4]
 8009af4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8009af6:	2300      	movs	r3, #0
 8009af8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	795b      	ldrb	r3, [r3, #5]
 8009afe:	2b01      	cmp	r3, #1
 8009b00:	d101      	bne.n	8009b06 <HAL_DAC_Start_DMA+0x1e>
 8009b02:	2302      	movs	r3, #2
 8009b04:	e0a1      	b.n	8009c4a <HAL_DAC_Start_DMA+0x162>
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	2201      	movs	r2, #1
 8009b0a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	2202      	movs	r2, #2
 8009b10:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8009b12:	68bb      	ldr	r3, [r7, #8]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d12a      	bne.n	8009b6e <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	689b      	ldr	r3, [r3, #8]
 8009b1c:	4a4d      	ldr	r2, [pc, #308]	; (8009c54 <HAL_DAC_Start_DMA+0x16c>)
 8009b1e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	689b      	ldr	r3, [r3, #8]
 8009b24:	4a4c      	ldr	r2, [pc, #304]	; (8009c58 <HAL_DAC_Start_DMA+0x170>)
 8009b26:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	689b      	ldr	r3, [r3, #8]
 8009b2c:	4a4b      	ldr	r2, [pc, #300]	; (8009c5c <HAL_DAC_Start_DMA+0x174>)
 8009b2e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	681a      	ldr	r2, [r3, #0]
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009b3e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8009b40:	6a3b      	ldr	r3, [r7, #32]
 8009b42:	2b04      	cmp	r3, #4
 8009b44:	d009      	beq.n	8009b5a <HAL_DAC_Start_DMA+0x72>
 8009b46:	2b08      	cmp	r3, #8
 8009b48:	d00c      	beq.n	8009b64 <HAL_DAC_Start_DMA+0x7c>
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d000      	beq.n	8009b50 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8009b4e:	e039      	b.n	8009bc4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	3308      	adds	r3, #8
 8009b56:	613b      	str	r3, [r7, #16]
        break;
 8009b58:	e034      	b.n	8009bc4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	330c      	adds	r3, #12
 8009b60:	613b      	str	r3, [r7, #16]
        break;
 8009b62:	e02f      	b.n	8009bc4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	3310      	adds	r3, #16
 8009b6a:	613b      	str	r3, [r7, #16]
        break;
 8009b6c:	e02a      	b.n	8009bc4 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	68db      	ldr	r3, [r3, #12]
 8009b72:	4a3b      	ldr	r2, [pc, #236]	; (8009c60 <HAL_DAC_Start_DMA+0x178>)
 8009b74:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	68db      	ldr	r3, [r3, #12]
 8009b7a:	4a3a      	ldr	r2, [pc, #232]	; (8009c64 <HAL_DAC_Start_DMA+0x17c>)
 8009b7c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	68db      	ldr	r3, [r3, #12]
 8009b82:	4a39      	ldr	r2, [pc, #228]	; (8009c68 <HAL_DAC_Start_DMA+0x180>)
 8009b84:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	681a      	ldr	r2, [r3, #0]
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8009b94:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8009b96:	6a3b      	ldr	r3, [r7, #32]
 8009b98:	2b04      	cmp	r3, #4
 8009b9a:	d009      	beq.n	8009bb0 <HAL_DAC_Start_DMA+0xc8>
 8009b9c:	2b08      	cmp	r3, #8
 8009b9e:	d00c      	beq.n	8009bba <HAL_DAC_Start_DMA+0xd2>
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d000      	beq.n	8009ba6 <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8009ba4:	e00e      	b.n	8009bc4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	3314      	adds	r3, #20
 8009bac:	613b      	str	r3, [r7, #16]
        break;
 8009bae:	e009      	b.n	8009bc4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	3318      	adds	r3, #24
 8009bb6:	613b      	str	r3, [r7, #16]
        break;
 8009bb8:	e004      	b.n	8009bc4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	331c      	adds	r3, #28
 8009bc0:	613b      	str	r3, [r7, #16]
        break;
 8009bc2:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8009bc4:	68bb      	ldr	r3, [r7, #8]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d111      	bne.n	8009bee <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	681a      	ldr	r2, [r3, #0]
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009bd8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	6898      	ldr	r0, [r3, #8]
 8009bde:	6879      	ldr	r1, [r7, #4]
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	693a      	ldr	r2, [r7, #16]
 8009be4:	f000 fbd2 	bl	800a38c <HAL_DMA_Start_IT>
 8009be8:	4603      	mov	r3, r0
 8009bea:	75fb      	strb	r3, [r7, #23]
 8009bec:	e010      	b.n	8009c10 <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	681a      	ldr	r2, [r3, #0]
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8009bfc:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	68d8      	ldr	r0, [r3, #12]
 8009c02:	6879      	ldr	r1, [r7, #4]
 8009c04:	683b      	ldr	r3, [r7, #0]
 8009c06:	693a      	ldr	r2, [r7, #16]
 8009c08:	f000 fbc0 	bl	800a38c <HAL_DMA_Start_IT>
 8009c0c:	4603      	mov	r3, r0
 8009c0e:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	2200      	movs	r2, #0
 8009c14:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8009c16:	7dfb      	ldrb	r3, [r7, #23]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d10f      	bne.n	8009c3c <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	6819      	ldr	r1, [r3, #0]
 8009c22:	68bb      	ldr	r3, [r7, #8]
 8009c24:	f003 0310 	and.w	r3, r3, #16
 8009c28:	2201      	movs	r2, #1
 8009c2a:	409a      	lsls	r2, r3
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	430a      	orrs	r2, r1
 8009c32:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 8009c34:	2001      	movs	r0, #1
 8009c36:	f7fe fa71 	bl	800811c <HAL_Delay>
 8009c3a:	e005      	b.n	8009c48 <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	691b      	ldr	r3, [r3, #16]
 8009c40:	f043 0204 	orr.w	r2, r3, #4
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8009c48:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	3718      	adds	r7, #24
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	bd80      	pop	{r7, pc}
 8009c52:	bf00      	nop
 8009c54:	0800a129 	.word	0x0800a129
 8009c58:	0800a14b 	.word	0x0800a14b
 8009c5c:	0800a167 	.word	0x0800a167
 8009c60:	0800a1d1 	.word	0x0800a1d1
 8009c64:	0800a1f3 	.word	0x0800a1f3
 8009c68:	0800a20f 	.word	0x0800a20f

08009c6c <HAL_DAC_Stop_DMA>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b084      	sub	sp, #16
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
 8009c74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	6819      	ldr	r1, [r3, #0]
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	f003 0310 	and.w	r3, r3, #16
 8009c82:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009c86:	fa02 f303 	lsl.w	r3, r2, r3
 8009c8a:	43da      	mvns	r2, r3
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	400a      	ands	r2, r1
 8009c92:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	6819      	ldr	r1, [r3, #0]
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	f003 0310 	and.w	r3, r3, #16
 8009ca0:	2201      	movs	r2, #1
 8009ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8009ca6:	43da      	mvns	r2, r3
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	400a      	ands	r2, r1
 8009cae:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before enabling peripheral after disabling it */
  HAL_Delay(1);
 8009cb0:	2001      	movs	r0, #1
 8009cb2:	f7fe fa33 	bl	800811c <HAL_Delay>

  /* Disable the DMA channel */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d10f      	bne.n	8009cdc <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	689b      	ldr	r3, [r3, #8]
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	f000 fbde 	bl	800a482 <HAL_DMA_Abort>
 8009cc6:	4603      	mov	r3, r0
 8009cc8:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	681a      	ldr	r2, [r3, #0]
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009cd8:	601a      	str	r2, [r3, #0]
 8009cda:	e00e      	b.n	8009cfa <HAL_DAC_Stop_DMA+0x8e>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle2);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	68db      	ldr	r3, [r3, #12]
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	f000 fbce 	bl	800a482 <HAL_DMA_Abort>
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	681a      	ldr	r2, [r3, #0]
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8009cf8:	601a      	str	r2, [r3, #0]
  }

  /* Check if DMA Channel effectively disabled */
  if (status != HAL_OK)
 8009cfa:	7bfb      	ldrb	r3, [r7, #15]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d003      	beq.n	8009d08 <HAL_DAC_Stop_DMA+0x9c>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2204      	movs	r2, #4
 8009d04:	711a      	strb	r2, [r3, #4]
 8009d06:	e002      	b.n	8009d0e <HAL_DAC_Stop_DMA+0xa2>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2201      	movs	r2, #1
 8009d0c:	711a      	strb	r2, [r3, #4]
  }

  /* Return function status */
  return status;
 8009d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d10:	4618      	mov	r0, r3
 8009d12:	3710      	adds	r7, #16
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bd80      	pop	{r7, pc}

08009d18 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8009d18:	b480      	push	{r7}
 8009d1a:	b087      	sub	sp, #28
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	60f8      	str	r0, [r7, #12]
 8009d20:	60b9      	str	r1, [r7, #8]
 8009d22:	607a      	str	r2, [r7, #4]
 8009d24:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8009d26:	2300      	movs	r3, #0
 8009d28:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8009d36:	68bb      	ldr	r3, [r7, #8]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d105      	bne.n	8009d48 <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8009d3c:	697a      	ldr	r2, [r7, #20]
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	4413      	add	r3, r2
 8009d42:	3308      	adds	r3, #8
 8009d44:	617b      	str	r3, [r7, #20]
 8009d46:	e004      	b.n	8009d52 <HAL_DAC_SetValue+0x3a>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8009d48:	697a      	ldr	r2, [r7, #20]
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	4413      	add	r3, r2
 8009d4e:	3314      	adds	r3, #20
 8009d50:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8009d52:	697b      	ldr	r3, [r7, #20]
 8009d54:	461a      	mov	r2, r3
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8009d5a:	2300      	movs	r3, #0
}
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	371c      	adds	r7, #28
 8009d60:	46bd      	mov	sp, r7
 8009d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d66:	4770      	bx	lr

08009d68 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8009d68:	b480      	push	{r7}
 8009d6a:	b083      	sub	sp, #12
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8009d70:	bf00      	nop
 8009d72:	370c      	adds	r7, #12
 8009d74:	46bd      	mov	sp, r7
 8009d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7a:	4770      	bx	lr

08009d7c <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8009d7c:	b480      	push	{r7}
 8009d7e:	b083      	sub	sp, #12
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8009d84:	bf00      	nop
 8009d86:	370c      	adds	r7, #12
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8e:	4770      	bx	lr

08009d90 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8009d90:	b480      	push	{r7}
 8009d92:	b083      	sub	sp, #12
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8009d98:	bf00      	nop
 8009d9a:	370c      	adds	r7, #12
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da2:	4770      	bx	lr

08009da4 <HAL_DAC_GetValue>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval The selected DAC channel data output value.
  */
uint32_t HAL_DAC_GetValue(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8009da4:	b480      	push	{r7}
 8009da6:	b083      	sub	sp, #12
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
 8009dac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Returns the DAC channel data output register value */
  if (Channel == DAC_CHANNEL_1)
 8009dae:	683b      	ldr	r3, [r7, #0]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d103      	bne.n	8009dbc <HAL_DAC_GetValue+0x18>
  {
    return hdac->Instance->DOR1;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dba:	e002      	b.n	8009dc2 <HAL_DAC_GetValue+0x1e>
  }
  else
  {
    return hdac->Instance->DOR2;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  }
}
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	370c      	adds	r7, #12
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dcc:	4770      	bx	lr
	...

08009dd0 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b08a      	sub	sp, #40	; 0x28
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	60f8      	str	r0, [r7, #12]
 8009dd8:	60b9      	str	r1, [r7, #8]
 8009dda:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8009ddc:	2300      	movs	r3, #0
 8009dde:	61fb      	str	r3, [r7, #28]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	795b      	ldrb	r3, [r3, #5]
 8009de4:	2b01      	cmp	r3, #1
 8009de6:	d101      	bne.n	8009dec <HAL_DAC_ConfigChannel+0x1c>
 8009de8:	2302      	movs	r3, #2
 8009dea:	e194      	b.n	800a116 <HAL_DAC_ConfigChannel+0x346>
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	2201      	movs	r2, #1
 8009df0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	2202      	movs	r2, #2
 8009df6:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	689b      	ldr	r3, [r3, #8]
 8009dfc:	2b04      	cmp	r3, #4
 8009dfe:	d174      	bne.n	8009eea <HAL_DAC_ConfigChannel+0x11a>
    /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d137      	bne.n	8009e76 <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 8009e06:	f7fe f97d 	bl	8008104 <HAL_GetTick>
 8009e0a:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8009e0c:	e011      	b.n	8009e32 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8009e0e:	f7fe f979 	bl	8008104 <HAL_GetTick>
 8009e12:	4602      	mov	r2, r0
 8009e14:	69fb      	ldr	r3, [r7, #28]
 8009e16:	1ad3      	subs	r3, r2, r3
 8009e18:	2b01      	cmp	r3, #1
 8009e1a:	d90a      	bls.n	8009e32 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	691b      	ldr	r3, [r3, #16]
 8009e20:	f043 0208 	orr.w	r2, r3, #8
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	2203      	movs	r2, #3
 8009e2c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8009e2e:	2303      	movs	r3, #3
 8009e30:	e171      	b.n	800a116 <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d1e6      	bne.n	8009e0e <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8009e40:	2001      	movs	r0, #1
 8009e42:	f7fe f96b 	bl	800811c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	68ba      	ldr	r2, [r7, #8]
 8009e4c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009e4e:	641a      	str	r2, [r3, #64]	; 0x40
 8009e50:	e01e      	b.n	8009e90 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8009e52:	f7fe f957 	bl	8008104 <HAL_GetTick>
 8009e56:	4602      	mov	r2, r0
 8009e58:	69fb      	ldr	r3, [r7, #28]
 8009e5a:	1ad3      	subs	r3, r2, r3
 8009e5c:	2b01      	cmp	r3, #1
 8009e5e:	d90a      	bls.n	8009e76 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	691b      	ldr	r3, [r3, #16]
 8009e64:	f043 0208 	orr.w	r2, r3, #8
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	2203      	movs	r2, #3
 8009e70:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8009e72:	2303      	movs	r3, #3
 8009e74:	e14f      	b.n	800a116 <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	dbe8      	blt.n	8009e52 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8009e80:	2001      	movs	r0, #1
 8009e82:	f7fe f94b 	bl	800811c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	68ba      	ldr	r2, [r7, #8]
 8009e8c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009e8e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	f003 0310 	and.w	r3, r3, #16
 8009e9c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8009ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8009ea4:	43db      	mvns	r3, r3
 8009ea6:	ea02 0103 	and.w	r1, r2, r3
 8009eaa:	68bb      	ldr	r3, [r7, #8]
 8009eac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	f003 0310 	and.w	r3, r3, #16
 8009eb4:	409a      	lsls	r2, r3
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	430a      	orrs	r2, r1
 8009ebc:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	f003 0310 	and.w	r3, r3, #16
 8009eca:	21ff      	movs	r1, #255	; 0xff
 8009ecc:	fa01 f303 	lsl.w	r3, r1, r3
 8009ed0:	43db      	mvns	r3, r3
 8009ed2:	ea02 0103 	and.w	r1, r2, r3
 8009ed6:	68bb      	ldr	r3, [r7, #8]
 8009ed8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	f003 0310 	and.w	r3, r3, #16
 8009ee0:	409a      	lsls	r2, r3
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	430a      	orrs	r2, r1
 8009ee8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8009eea:	68bb      	ldr	r3, [r7, #8]
 8009eec:	69db      	ldr	r3, [r3, #28]
 8009eee:	2b01      	cmp	r3, #1
 8009ef0:	d11d      	bne.n	8009f2e <HAL_DAC_ConfigChannel+0x15e>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ef8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	f003 0310 	and.w	r3, r3, #16
 8009f00:	221f      	movs	r2, #31
 8009f02:	fa02 f303 	lsl.w	r3, r2, r3
 8009f06:	43db      	mvns	r3, r3
 8009f08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f0a:	4013      	ands	r3, r2
 8009f0c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8009f0e:	68bb      	ldr	r3, [r7, #8]
 8009f10:	6a1b      	ldr	r3, [r3, #32]
 8009f12:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	f003 0310 	and.w	r3, r3, #16
 8009f1a:	69ba      	ldr	r2, [r7, #24]
 8009f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8009f20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f22:	4313      	orrs	r3, r2
 8009f24:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f2c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f34:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	f003 0310 	and.w	r3, r3, #16
 8009f3c:	2207      	movs	r2, #7
 8009f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8009f42:	43db      	mvns	r3, r3
 8009f44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f46:	4013      	ands	r3, r2
 8009f48:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_EXTERNAL) == DAC_CHIPCONNECT_EXTERNAL)
 8009f4a:	68bb      	ldr	r3, [r7, #8]
 8009f4c:	699b      	ldr	r3, [r3, #24]
 8009f4e:	f003 0301 	and.w	r3, r3, #1
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d002      	beq.n	8009f5c <HAL_DAC_ConfigChannel+0x18c>
  {
    connectOnChip = 0x00000000UL;
 8009f56:	2300      	movs	r3, #0
 8009f58:	623b      	str	r3, [r7, #32]
 8009f5a:	e011      	b.n	8009f80 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_INTERNAL) == DAC_CHIPCONNECT_INTERNAL)
 8009f5c:	68bb      	ldr	r3, [r7, #8]
 8009f5e:	699b      	ldr	r3, [r3, #24]
 8009f60:	f003 0302 	and.w	r3, r3, #2
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d002      	beq.n	8009f6e <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8009f68:	2301      	movs	r3, #1
 8009f6a:	623b      	str	r3, [r7, #32]
 8009f6c:	e008      	b.n	8009f80 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_BOTH) == DAC_CHIPCONNECT_BOTH */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8009f6e:	68bb      	ldr	r3, [r7, #8]
 8009f70:	695b      	ldr	r3, [r3, #20]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d102      	bne.n	8009f7c <HAL_DAC_ConfigChannel+0x1ac>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8009f76:	2301      	movs	r3, #1
 8009f78:	623b      	str	r3, [r7, #32]
 8009f7a:	e001      	b.n	8009f80 <HAL_DAC_ConfigChannel+0x1b0>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8009f80:	68bb      	ldr	r3, [r7, #8]
 8009f82:	689a      	ldr	r2, [r3, #8]
 8009f84:	68bb      	ldr	r3, [r7, #8]
 8009f86:	695b      	ldr	r3, [r3, #20]
 8009f88:	4313      	orrs	r3, r2
 8009f8a:	6a3a      	ldr	r2, [r7, #32]
 8009f8c:	4313      	orrs	r3, r2
 8009f8e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	f003 0310 	and.w	r3, r3, #16
 8009f96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8009f9e:	43db      	mvns	r3, r3
 8009fa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fa2:	4013      	ands	r3, r2
 8009fa4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8009fa6:	68bb      	ldr	r3, [r7, #8]
 8009fa8:	791b      	ldrb	r3, [r3, #4]
 8009faa:	2b01      	cmp	r3, #1
 8009fac:	d102      	bne.n	8009fb4 <HAL_DAC_ConfigChannel+0x1e4>
 8009fae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009fb2:	e000      	b.n	8009fb6 <HAL_DAC_ConfigChannel+0x1e6>
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	69ba      	ldr	r2, [r7, #24]
 8009fb8:	4313      	orrs	r3, r2
 8009fba:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	f003 0310 	and.w	r3, r3, #16
 8009fc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8009fca:	43db      	mvns	r3, r3
 8009fcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fce:	4013      	ands	r3, r2
 8009fd0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8009fd2:	68bb      	ldr	r3, [r7, #8]
 8009fd4:	795b      	ldrb	r3, [r3, #5]
 8009fd6:	2b01      	cmp	r3, #1
 8009fd8:	d102      	bne.n	8009fe0 <HAL_DAC_ConfigChannel+0x210>
 8009fda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009fde:	e000      	b.n	8009fe2 <HAL_DAC_ConfigChannel+0x212>
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	69ba      	ldr	r2, [r7, #24]
 8009fe4:	4313      	orrs	r3, r2
 8009fe6:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8009fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fea:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8009fee:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8009ff0:	68bb      	ldr	r3, [r7, #8]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	2b02      	cmp	r3, #2
 8009ff6:	d114      	bne.n	800a022 <HAL_DAC_ConfigChannel+0x252>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8009ff8:	f001 fae0 	bl	800b5bc <HAL_RCC_GetHCLKFreq>
 8009ffc:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8009ffe:	697b      	ldr	r3, [r7, #20]
 800a000:	4a47      	ldr	r2, [pc, #284]	; (800a120 <HAL_DAC_ConfigChannel+0x350>)
 800a002:	4293      	cmp	r3, r2
 800a004:	d904      	bls.n	800a010 <HAL_DAC_ConfigChannel+0x240>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800a006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a008:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a00c:	627b      	str	r3, [r7, #36]	; 0x24
 800a00e:	e00d      	b.n	800a02c <HAL_DAC_ConfigChannel+0x25c>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 800a010:	697b      	ldr	r3, [r7, #20]
 800a012:	4a44      	ldr	r2, [pc, #272]	; (800a124 <HAL_DAC_ConfigChannel+0x354>)
 800a014:	4293      	cmp	r3, r2
 800a016:	d909      	bls.n	800a02c <HAL_DAC_ConfigChannel+0x25c>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800a018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a01a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a01e:	627b      	str	r3, [r7, #36]	; 0x24
 800a020:	e004      	b.n	800a02c <HAL_DAC_ConfigChannel+0x25c>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800a022:	68bb      	ldr	r3, [r7, #8]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a028:	4313      	orrs	r3, r2
 800a02a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	f003 0310 	and.w	r3, r3, #16
 800a032:	69ba      	ldr	r2, [r7, #24]
 800a034:	fa02 f303 	lsl.w	r3, r2, r3
 800a038:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a03a:	4313      	orrs	r3, r2
 800a03c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a044:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	6819      	ldr	r1, [r3, #0]
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	f003 0310 	and.w	r3, r3, #16
 800a052:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a056:	fa02 f303 	lsl.w	r3, r2, r3
 800a05a:	43da      	mvns	r2, r3
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	400a      	ands	r2, r1
 800a062:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	f003 0310 	and.w	r3, r3, #16
 800a072:	f640 72fe 	movw	r2, #4094	; 0xffe
 800a076:	fa02 f303 	lsl.w	r3, r2, r3
 800a07a:	43db      	mvns	r3, r3
 800a07c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a07e:	4013      	ands	r3, r2
 800a080:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800a082:	68bb      	ldr	r3, [r7, #8]
 800a084:	68db      	ldr	r3, [r3, #12]
 800a086:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	f003 0310 	and.w	r3, r3, #16
 800a08e:	69ba      	ldr	r2, [r7, #24]
 800a090:	fa02 f303 	lsl.w	r3, r2, r3
 800a094:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a096:	4313      	orrs	r3, r2
 800a098:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0a0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	6819      	ldr	r1, [r3, #0]
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	f003 0310 	and.w	r3, r3, #16
 800a0ae:	22c0      	movs	r2, #192	; 0xc0
 800a0b0:	fa02 f303 	lsl.w	r3, r2, r3
 800a0b4:	43da      	mvns	r2, r3
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	400a      	ands	r2, r1
 800a0bc:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800a0be:	68bb      	ldr	r3, [r7, #8]
 800a0c0:	68db      	ldr	r3, [r3, #12]
 800a0c2:	089b      	lsrs	r3, r3, #2
 800a0c4:	f003 030f 	and.w	r3, r3, #15
 800a0c8:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800a0ca:	68bb      	ldr	r3, [r7, #8]
 800a0cc:	691b      	ldr	r3, [r3, #16]
 800a0ce:	089b      	lsrs	r3, r3, #2
 800a0d0:	021b      	lsls	r3, r3, #8
 800a0d2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a0d6:	69ba      	ldr	r2, [r7, #24]
 800a0d8:	4313      	orrs	r3, r2
 800a0da:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	f003 0310 	and.w	r3, r3, #16
 800a0e8:	f640 710f 	movw	r1, #3855	; 0xf0f
 800a0ec:	fa01 f303 	lsl.w	r3, r1, r3
 800a0f0:	43db      	mvns	r3, r3
 800a0f2:	ea02 0103 	and.w	r1, r2, r3
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	f003 0310 	and.w	r3, r3, #16
 800a0fc:	69ba      	ldr	r2, [r7, #24]
 800a0fe:	409a      	lsls	r2, r3
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	430a      	orrs	r2, r1
 800a106:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	2201      	movs	r2, #1
 800a10c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	2200      	movs	r2, #0
 800a112:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800a114:	2300      	movs	r3, #0
}
 800a116:	4618      	mov	r0, r3
 800a118:	3728      	adds	r7, #40	; 0x28
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bd80      	pop	{r7, pc}
 800a11e:	bf00      	nop
 800a120:	09896800 	.word	0x09896800
 800a124:	04c4b400 	.word	0x04c4b400

0800a128 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b084      	sub	sp, #16
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a134:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800a136:	68f8      	ldr	r0, [r7, #12]
 800a138:	f7ff fe16 	bl	8009d68 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	2201      	movs	r2, #1
 800a140:	711a      	strb	r2, [r3, #4]
}
 800a142:	bf00      	nop
 800a144:	3710      	adds	r7, #16
 800a146:	46bd      	mov	sp, r7
 800a148:	bd80      	pop	{r7, pc}

0800a14a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800a14a:	b580      	push	{r7, lr}
 800a14c:	b084      	sub	sp, #16
 800a14e:	af00      	add	r7, sp, #0
 800a150:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a156:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800a158:	68f8      	ldr	r0, [r7, #12]
 800a15a:	f7ff fe0f 	bl	8009d7c <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800a15e:	bf00      	nop
 800a160:	3710      	adds	r7, #16
 800a162:	46bd      	mov	sp, r7
 800a164:	bd80      	pop	{r7, pc}

0800a166 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800a166:	b580      	push	{r7, lr}
 800a168:	b084      	sub	sp, #16
 800a16a:	af00      	add	r7, sp, #0
 800a16c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a172:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	691b      	ldr	r3, [r3, #16]
 800a178:	f043 0204 	orr.w	r2, r3, #4
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800a180:	68f8      	ldr	r0, [r7, #12]
 800a182:	f7ff fe05 	bl	8009d90 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	2201      	movs	r2, #1
 800a18a:	711a      	strb	r2, [r3, #4]
}
 800a18c:	bf00      	nop
 800a18e:	3710      	adds	r7, #16
 800a190:	46bd      	mov	sp, r7
 800a192:	bd80      	pop	{r7, pc}

0800a194 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800a194:	b480      	push	{r7}
 800a196:	b083      	sub	sp, #12
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800a19c:	bf00      	nop
 800a19e:	370c      	adds	r7, #12
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a6:	4770      	bx	lr

0800a1a8 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800a1a8:	b480      	push	{r7}
 800a1aa:	b083      	sub	sp, #12
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800a1b0:	bf00      	nop
 800a1b2:	370c      	adds	r7, #12
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ba:	4770      	bx	lr

0800a1bc <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800a1bc:	b480      	push	{r7}
 800a1be:	b083      	sub	sp, #12
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800a1c4:	bf00      	nop
 800a1c6:	370c      	adds	r7, #12
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ce:	4770      	bx	lr

0800a1d0 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b084      	sub	sp, #16
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1dc:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800a1de:	68f8      	ldr	r0, [r7, #12]
 800a1e0:	f7ff ffd8 	bl	800a194 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	2201      	movs	r2, #1
 800a1e8:	711a      	strb	r2, [r3, #4]
}
 800a1ea:	bf00      	nop
 800a1ec:	3710      	adds	r7, #16
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bd80      	pop	{r7, pc}

0800a1f2 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800a1f2:	b580      	push	{r7, lr}
 800a1f4:	b084      	sub	sp, #16
 800a1f6:	af00      	add	r7, sp, #0
 800a1f8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1fe:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800a200:	68f8      	ldr	r0, [r7, #12]
 800a202:	f7ff ffd1 	bl	800a1a8 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800a206:	bf00      	nop
 800a208:	3710      	adds	r7, #16
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bd80      	pop	{r7, pc}

0800a20e <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800a20e:	b580      	push	{r7, lr}
 800a210:	b084      	sub	sp, #16
 800a212:	af00      	add	r7, sp, #0
 800a214:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a21a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	691b      	ldr	r3, [r3, #16]
 800a220:	f043 0204 	orr.w	r2, r3, #4
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800a228:	68f8      	ldr	r0, [r7, #12]
 800a22a:	f7ff ffc7 	bl	800a1bc <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	2201      	movs	r2, #1
 800a232:	711a      	strb	r2, [r3, #4]
}
 800a234:	bf00      	nop
 800a236:	3710      	adds	r7, #16
 800a238:	46bd      	mov	sp, r7
 800a23a:	bd80      	pop	{r7, pc}

0800a23c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b084      	sub	sp, #16
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d101      	bne.n	800a24e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800a24a:	2301      	movs	r3, #1
 800a24c:	e08d      	b.n	800a36a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	461a      	mov	r2, r3
 800a254:	4b47      	ldr	r3, [pc, #284]	; (800a374 <HAL_DMA_Init+0x138>)
 800a256:	429a      	cmp	r2, r3
 800a258:	d80f      	bhi.n	800a27a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	461a      	mov	r2, r3
 800a260:	4b45      	ldr	r3, [pc, #276]	; (800a378 <HAL_DMA_Init+0x13c>)
 800a262:	4413      	add	r3, r2
 800a264:	4a45      	ldr	r2, [pc, #276]	; (800a37c <HAL_DMA_Init+0x140>)
 800a266:	fba2 2303 	umull	r2, r3, r2, r3
 800a26a:	091b      	lsrs	r3, r3, #4
 800a26c:	009a      	lsls	r2, r3, #2
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	4a42      	ldr	r2, [pc, #264]	; (800a380 <HAL_DMA_Init+0x144>)
 800a276:	641a      	str	r2, [r3, #64]	; 0x40
 800a278:	e00e      	b.n	800a298 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	461a      	mov	r2, r3
 800a280:	4b40      	ldr	r3, [pc, #256]	; (800a384 <HAL_DMA_Init+0x148>)
 800a282:	4413      	add	r3, r2
 800a284:	4a3d      	ldr	r2, [pc, #244]	; (800a37c <HAL_DMA_Init+0x140>)
 800a286:	fba2 2303 	umull	r2, r3, r2, r3
 800a28a:	091b      	lsrs	r3, r3, #4
 800a28c:	009a      	lsls	r2, r3, #2
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	4a3c      	ldr	r2, [pc, #240]	; (800a388 <HAL_DMA_Init+0x14c>)
 800a296:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	2202      	movs	r2, #2
 800a29c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800a2ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2b2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800a2bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	691b      	ldr	r3, [r3, #16]
 800a2c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a2c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	699b      	ldr	r3, [r3, #24]
 800a2ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a2d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	6a1b      	ldr	r3, [r3, #32]
 800a2da:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800a2dc:	68fa      	ldr	r2, [r7, #12]
 800a2de:	4313      	orrs	r3, r2
 800a2e0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	68fa      	ldr	r2, [r7, #12]
 800a2e8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800a2ea:	6878      	ldr	r0, [r7, #4]
 800a2ec:	f000 fa10 	bl	800a710 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	689b      	ldr	r3, [r3, #8]
 800a2f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a2f8:	d102      	bne.n	800a300 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	685a      	ldr	r2, [r3, #4]
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a308:	b2d2      	uxtb	r2, r2
 800a30a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a310:	687a      	ldr	r2, [r7, #4]
 800a312:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800a314:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	685b      	ldr	r3, [r3, #4]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d010      	beq.n	800a340 <HAL_DMA_Init+0x104>
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	685b      	ldr	r3, [r3, #4]
 800a322:	2b04      	cmp	r3, #4
 800a324:	d80c      	bhi.n	800a340 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800a326:	6878      	ldr	r0, [r7, #4]
 800a328:	f000 fa30 	bl	800a78c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a330:	2200      	movs	r2, #0
 800a332:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a338:	687a      	ldr	r2, [r7, #4]
 800a33a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800a33c:	605a      	str	r2, [r3, #4]
 800a33e:	e008      	b.n	800a352 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2200      	movs	r2, #0
 800a344:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	2200      	movs	r2, #0
 800a34a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2200      	movs	r2, #0
 800a350:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	2200      	movs	r2, #0
 800a356:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2201      	movs	r2, #1
 800a35c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	2200      	movs	r2, #0
 800a364:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800a368:	2300      	movs	r3, #0
}
 800a36a:	4618      	mov	r0, r3
 800a36c:	3710      	adds	r7, #16
 800a36e:	46bd      	mov	sp, r7
 800a370:	bd80      	pop	{r7, pc}
 800a372:	bf00      	nop
 800a374:	40020407 	.word	0x40020407
 800a378:	bffdfff8 	.word	0xbffdfff8
 800a37c:	cccccccd 	.word	0xcccccccd
 800a380:	40020000 	.word	0x40020000
 800a384:	bffdfbf8 	.word	0xbffdfbf8
 800a388:	40020400 	.word	0x40020400

0800a38c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b086      	sub	sp, #24
 800a390:	af00      	add	r7, sp, #0
 800a392:	60f8      	str	r0, [r7, #12]
 800a394:	60b9      	str	r1, [r7, #8]
 800a396:	607a      	str	r2, [r7, #4]
 800a398:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a39a:	2300      	movs	r3, #0
 800a39c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a3a4:	2b01      	cmp	r3, #1
 800a3a6:	d101      	bne.n	800a3ac <HAL_DMA_Start_IT+0x20>
 800a3a8:	2302      	movs	r3, #2
 800a3aa:	e066      	b.n	800a47a <HAL_DMA_Start_IT+0xee>
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	2201      	movs	r2, #1
 800a3b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800a3ba:	b2db      	uxtb	r3, r3
 800a3bc:	2b01      	cmp	r3, #1
 800a3be:	d155      	bne.n	800a46c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	2202      	movs	r2, #2
 800a3c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	681a      	ldr	r2, [r3, #0]
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	f022 0201 	bic.w	r2, r2, #1
 800a3dc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a3de:	683b      	ldr	r3, [r7, #0]
 800a3e0:	687a      	ldr	r2, [r7, #4]
 800a3e2:	68b9      	ldr	r1, [r7, #8]
 800a3e4:	68f8      	ldr	r0, [r7, #12]
 800a3e6:	f000 f954 	bl	800a692 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d008      	beq.n	800a404 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	681a      	ldr	r2, [r3, #0]
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	f042 020e 	orr.w	r2, r2, #14
 800a400:	601a      	str	r2, [r3, #0]
 800a402:	e00f      	b.n	800a424 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	681a      	ldr	r2, [r3, #0]
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	f022 0204 	bic.w	r2, r2, #4
 800a412:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	681a      	ldr	r2, [r3, #0]
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	f042 020a 	orr.w	r2, r2, #10
 800a422:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d007      	beq.n	800a442 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a436:	681a      	ldr	r2, [r3, #0]
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a43c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a440:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a446:	2b00      	cmp	r3, #0
 800a448:	d007      	beq.n	800a45a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a44e:	681a      	ldr	r2, [r3, #0]
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a454:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a458:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	681a      	ldr	r2, [r3, #0]
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	f042 0201 	orr.w	r2, r2, #1
 800a468:	601a      	str	r2, [r3, #0]
 800a46a:	e005      	b.n	800a478 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	2200      	movs	r2, #0
 800a470:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800a474:	2302      	movs	r3, #2
 800a476:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800a478:	7dfb      	ldrb	r3, [r7, #23]
}
 800a47a:	4618      	mov	r0, r3
 800a47c:	3718      	adds	r7, #24
 800a47e:	46bd      	mov	sp, r7
 800a480:	bd80      	pop	{r7, pc}

0800a482 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800a482:	b480      	push	{r7}
 800a484:	b085      	sub	sp, #20
 800a486:	af00      	add	r7, sp, #0
 800a488:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a48a:	2300      	movs	r3, #0
 800a48c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800a494:	b2db      	uxtb	r3, r3
 800a496:	2b02      	cmp	r3, #2
 800a498:	d005      	beq.n	800a4a6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	2204      	movs	r2, #4
 800a49e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	73fb      	strb	r3, [r7, #15]
 800a4a4:	e037      	b.n	800a516 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	681a      	ldr	r2, [r3, #0]
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	f022 020e 	bic.w	r2, r2, #14
 800a4b4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a4ba:	681a      	ldr	r2, [r3, #0]
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a4c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a4c4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	681a      	ldr	r2, [r3, #0]
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	f022 0201 	bic.w	r2, r2, #1
 800a4d4:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4da:	f003 021f 	and.w	r2, r3, #31
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4e2:	2101      	movs	r1, #1
 800a4e4:	fa01 f202 	lsl.w	r2, r1, r2
 800a4e8:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4ee:	687a      	ldr	r2, [r7, #4]
 800a4f0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800a4f2:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d00c      	beq.n	800a516 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a500:	681a      	ldr	r2, [r3, #0]
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a506:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a50a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a510:	687a      	ldr	r2, [r7, #4]
 800a512:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800a514:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	2201      	movs	r2, #1
 800a51a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	2200      	movs	r2, #0
 800a522:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800a526:	7bfb      	ldrb	r3, [r7, #15]
}
 800a528:	4618      	mov	r0, r3
 800a52a:	3714      	adds	r7, #20
 800a52c:	46bd      	mov	sp, r7
 800a52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a532:	4770      	bx	lr

0800a534 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a534:	b580      	push	{r7, lr}
 800a536:	b084      	sub	sp, #16
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a550:	f003 031f 	and.w	r3, r3, #31
 800a554:	2204      	movs	r2, #4
 800a556:	409a      	lsls	r2, r3
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	4013      	ands	r3, r2
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d026      	beq.n	800a5ae <HAL_DMA_IRQHandler+0x7a>
 800a560:	68bb      	ldr	r3, [r7, #8]
 800a562:	f003 0304 	and.w	r3, r3, #4
 800a566:	2b00      	cmp	r3, #0
 800a568:	d021      	beq.n	800a5ae <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	f003 0320 	and.w	r3, r3, #32
 800a574:	2b00      	cmp	r3, #0
 800a576:	d107      	bne.n	800a588 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	681a      	ldr	r2, [r3, #0]
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	f022 0204 	bic.w	r2, r2, #4
 800a586:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a58c:	f003 021f 	and.w	r2, r3, #31
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a594:	2104      	movs	r1, #4
 800a596:	fa01 f202 	lsl.w	r2, r1, r2
 800a59a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d071      	beq.n	800a688 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5a8:	6878      	ldr	r0, [r7, #4]
 800a5aa:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800a5ac:	e06c      	b.n	800a688 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5b2:	f003 031f 	and.w	r3, r3, #31
 800a5b6:	2202      	movs	r2, #2
 800a5b8:	409a      	lsls	r2, r3
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	4013      	ands	r3, r2
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d02e      	beq.n	800a620 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800a5c2:	68bb      	ldr	r3, [r7, #8]
 800a5c4:	f003 0302 	and.w	r3, r3, #2
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d029      	beq.n	800a620 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	f003 0320 	and.w	r3, r3, #32
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d10b      	bne.n	800a5f2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	681a      	ldr	r2, [r3, #0]
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	f022 020a 	bic.w	r2, r2, #10
 800a5e8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	2201      	movs	r2, #1
 800a5ee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5f6:	f003 021f 	and.w	r2, r3, #31
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5fe:	2102      	movs	r1, #2
 800a600:	fa01 f202 	lsl.w	r2, r1, r2
 800a604:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	2200      	movs	r2, #0
 800a60a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a612:	2b00      	cmp	r3, #0
 800a614:	d038      	beq.n	800a688 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a61a:	6878      	ldr	r0, [r7, #4]
 800a61c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800a61e:	e033      	b.n	800a688 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a624:	f003 031f 	and.w	r3, r3, #31
 800a628:	2208      	movs	r2, #8
 800a62a:	409a      	lsls	r2, r3
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	4013      	ands	r3, r2
 800a630:	2b00      	cmp	r3, #0
 800a632:	d02a      	beq.n	800a68a <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800a634:	68bb      	ldr	r3, [r7, #8]
 800a636:	f003 0308 	and.w	r3, r3, #8
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d025      	beq.n	800a68a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	681a      	ldr	r2, [r3, #0]
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	f022 020e 	bic.w	r2, r2, #14
 800a64c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a652:	f003 021f 	and.w	r2, r3, #31
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a65a:	2101      	movs	r1, #1
 800a65c:	fa01 f202 	lsl.w	r2, r1, r2
 800a660:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	2201      	movs	r2, #1
 800a666:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2201      	movs	r2, #1
 800a66c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	2200      	movs	r2, #0
 800a674:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d004      	beq.n	800a68a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a684:	6878      	ldr	r0, [r7, #4]
 800a686:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800a688:	bf00      	nop
 800a68a:	bf00      	nop
}
 800a68c:	3710      	adds	r7, #16
 800a68e:	46bd      	mov	sp, r7
 800a690:	bd80      	pop	{r7, pc}

0800a692 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a692:	b480      	push	{r7}
 800a694:	b085      	sub	sp, #20
 800a696:	af00      	add	r7, sp, #0
 800a698:	60f8      	str	r0, [r7, #12]
 800a69a:	60b9      	str	r1, [r7, #8]
 800a69c:	607a      	str	r2, [r7, #4]
 800a69e:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a6a4:	68fa      	ldr	r2, [r7, #12]
 800a6a6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800a6a8:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d004      	beq.n	800a6bc <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6b6:	68fa      	ldr	r2, [r7, #12]
 800a6b8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800a6ba:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6c0:	f003 021f 	and.w	r2, r3, #31
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6c8:	2101      	movs	r1, #1
 800a6ca:	fa01 f202 	lsl.w	r2, r1, r2
 800a6ce:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	683a      	ldr	r2, [r7, #0]
 800a6d6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	689b      	ldr	r3, [r3, #8]
 800a6dc:	2b10      	cmp	r3, #16
 800a6de:	d108      	bne.n	800a6f2 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	687a      	ldr	r2, [r7, #4]
 800a6e6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	68ba      	ldr	r2, [r7, #8]
 800a6ee:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800a6f0:	e007      	b.n	800a702 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	68ba      	ldr	r2, [r7, #8]
 800a6f8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	687a      	ldr	r2, [r7, #4]
 800a700:	60da      	str	r2, [r3, #12]
}
 800a702:	bf00      	nop
 800a704:	3714      	adds	r7, #20
 800a706:	46bd      	mov	sp, r7
 800a708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70c:	4770      	bx	lr
	...

0800a710 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a710:	b480      	push	{r7}
 800a712:	b087      	sub	sp, #28
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	461a      	mov	r2, r3
 800a71e:	4b16      	ldr	r3, [pc, #88]	; (800a778 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800a720:	429a      	cmp	r2, r3
 800a722:	d802      	bhi.n	800a72a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800a724:	4b15      	ldr	r3, [pc, #84]	; (800a77c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800a726:	617b      	str	r3, [r7, #20]
 800a728:	e001      	b.n	800a72e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800a72a:	4b15      	ldr	r3, [pc, #84]	; (800a780 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800a72c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800a72e:	697b      	ldr	r3, [r7, #20]
 800a730:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	b2db      	uxtb	r3, r3
 800a738:	3b08      	subs	r3, #8
 800a73a:	4a12      	ldr	r2, [pc, #72]	; (800a784 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800a73c:	fba2 2303 	umull	r2, r3, r2, r3
 800a740:	091b      	lsrs	r3, r3, #4
 800a742:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a748:	089b      	lsrs	r3, r3, #2
 800a74a:	009a      	lsls	r2, r3, #2
 800a74c:	693b      	ldr	r3, [r7, #16]
 800a74e:	4413      	add	r3, r2
 800a750:	461a      	mov	r2, r3
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	4a0b      	ldr	r2, [pc, #44]	; (800a788 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800a75a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	f003 031f 	and.w	r3, r3, #31
 800a762:	2201      	movs	r2, #1
 800a764:	409a      	lsls	r2, r3
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	651a      	str	r2, [r3, #80]	; 0x50
}
 800a76a:	bf00      	nop
 800a76c:	371c      	adds	r7, #28
 800a76e:	46bd      	mov	sp, r7
 800a770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a774:	4770      	bx	lr
 800a776:	bf00      	nop
 800a778:	40020407 	.word	0x40020407
 800a77c:	40020800 	.word	0x40020800
 800a780:	40020820 	.word	0x40020820
 800a784:	cccccccd 	.word	0xcccccccd
 800a788:	40020880 	.word	0x40020880

0800a78c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a78c:	b480      	push	{r7}
 800a78e:	b085      	sub	sp, #20
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	685b      	ldr	r3, [r3, #4]
 800a798:	b2db      	uxtb	r3, r3
 800a79a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800a79c:	68fa      	ldr	r2, [r7, #12]
 800a79e:	4b0b      	ldr	r3, [pc, #44]	; (800a7cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800a7a0:	4413      	add	r3, r2
 800a7a2:	009b      	lsls	r3, r3, #2
 800a7a4:	461a      	mov	r2, r3
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	4a08      	ldr	r2, [pc, #32]	; (800a7d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800a7ae:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	3b01      	subs	r3, #1
 800a7b4:	f003 031f 	and.w	r3, r3, #31
 800a7b8:	2201      	movs	r2, #1
 800a7ba:	409a      	lsls	r2, r3
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800a7c0:	bf00      	nop
 800a7c2:	3714      	adds	r7, #20
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ca:	4770      	bx	lr
 800a7cc:	1000823f 	.word	0x1000823f
 800a7d0:	40020940 	.word	0x40020940

0800a7d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a7d4:	b480      	push	{r7}
 800a7d6:	b087      	sub	sp, #28
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
 800a7dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800a7de:	2300      	movs	r3, #0
 800a7e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800a7e2:	e15a      	b.n	800aa9a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800a7e4:	683b      	ldr	r3, [r7, #0]
 800a7e6:	681a      	ldr	r2, [r3, #0]
 800a7e8:	2101      	movs	r1, #1
 800a7ea:	697b      	ldr	r3, [r7, #20]
 800a7ec:	fa01 f303 	lsl.w	r3, r1, r3
 800a7f0:	4013      	ands	r3, r2
 800a7f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	f000 814c 	beq.w	800aa94 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a7fc:	683b      	ldr	r3, [r7, #0]
 800a7fe:	685b      	ldr	r3, [r3, #4]
 800a800:	2b01      	cmp	r3, #1
 800a802:	d00b      	beq.n	800a81c <HAL_GPIO_Init+0x48>
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	685b      	ldr	r3, [r3, #4]
 800a808:	2b02      	cmp	r3, #2
 800a80a:	d007      	beq.n	800a81c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a810:	2b11      	cmp	r3, #17
 800a812:	d003      	beq.n	800a81c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a814:	683b      	ldr	r3, [r7, #0]
 800a816:	685b      	ldr	r3, [r3, #4]
 800a818:	2b12      	cmp	r3, #18
 800a81a:	d130      	bne.n	800a87e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	689b      	ldr	r3, [r3, #8]
 800a820:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a822:	697b      	ldr	r3, [r7, #20]
 800a824:	005b      	lsls	r3, r3, #1
 800a826:	2203      	movs	r2, #3
 800a828:	fa02 f303 	lsl.w	r3, r2, r3
 800a82c:	43db      	mvns	r3, r3
 800a82e:	693a      	ldr	r2, [r7, #16]
 800a830:	4013      	ands	r3, r2
 800a832:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a834:	683b      	ldr	r3, [r7, #0]
 800a836:	68da      	ldr	r2, [r3, #12]
 800a838:	697b      	ldr	r3, [r7, #20]
 800a83a:	005b      	lsls	r3, r3, #1
 800a83c:	fa02 f303 	lsl.w	r3, r2, r3
 800a840:	693a      	ldr	r2, [r7, #16]
 800a842:	4313      	orrs	r3, r2
 800a844:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	693a      	ldr	r2, [r7, #16]
 800a84a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	685b      	ldr	r3, [r3, #4]
 800a850:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a852:	2201      	movs	r2, #1
 800a854:	697b      	ldr	r3, [r7, #20]
 800a856:	fa02 f303 	lsl.w	r3, r2, r3
 800a85a:	43db      	mvns	r3, r3
 800a85c:	693a      	ldr	r2, [r7, #16]
 800a85e:	4013      	ands	r3, r2
 800a860:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	685b      	ldr	r3, [r3, #4]
 800a866:	091b      	lsrs	r3, r3, #4
 800a868:	f003 0201 	and.w	r2, r3, #1
 800a86c:	697b      	ldr	r3, [r7, #20]
 800a86e:	fa02 f303 	lsl.w	r3, r2, r3
 800a872:	693a      	ldr	r2, [r7, #16]
 800a874:	4313      	orrs	r3, r2
 800a876:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	693a      	ldr	r2, [r7, #16]
 800a87c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	68db      	ldr	r3, [r3, #12]
 800a882:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a884:	697b      	ldr	r3, [r7, #20]
 800a886:	005b      	lsls	r3, r3, #1
 800a888:	2203      	movs	r2, #3
 800a88a:	fa02 f303 	lsl.w	r3, r2, r3
 800a88e:	43db      	mvns	r3, r3
 800a890:	693a      	ldr	r2, [r7, #16]
 800a892:	4013      	ands	r3, r2
 800a894:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	689a      	ldr	r2, [r3, #8]
 800a89a:	697b      	ldr	r3, [r7, #20]
 800a89c:	005b      	lsls	r3, r3, #1
 800a89e:	fa02 f303 	lsl.w	r3, r2, r3
 800a8a2:	693a      	ldr	r2, [r7, #16]
 800a8a4:	4313      	orrs	r3, r2
 800a8a6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	693a      	ldr	r2, [r7, #16]
 800a8ac:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a8ae:	683b      	ldr	r3, [r7, #0]
 800a8b0:	685b      	ldr	r3, [r3, #4]
 800a8b2:	2b02      	cmp	r3, #2
 800a8b4:	d003      	beq.n	800a8be <HAL_GPIO_Init+0xea>
 800a8b6:	683b      	ldr	r3, [r7, #0]
 800a8b8:	685b      	ldr	r3, [r3, #4]
 800a8ba:	2b12      	cmp	r3, #18
 800a8bc:	d123      	bne.n	800a906 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a8be:	697b      	ldr	r3, [r7, #20]
 800a8c0:	08da      	lsrs	r2, r3, #3
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	3208      	adds	r2, #8
 800a8c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a8cc:	697b      	ldr	r3, [r7, #20]
 800a8ce:	f003 0307 	and.w	r3, r3, #7
 800a8d2:	009b      	lsls	r3, r3, #2
 800a8d4:	220f      	movs	r2, #15
 800a8d6:	fa02 f303 	lsl.w	r3, r2, r3
 800a8da:	43db      	mvns	r3, r3
 800a8dc:	693a      	ldr	r2, [r7, #16]
 800a8de:	4013      	ands	r3, r2
 800a8e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800a8e2:	683b      	ldr	r3, [r7, #0]
 800a8e4:	691a      	ldr	r2, [r3, #16]
 800a8e6:	697b      	ldr	r3, [r7, #20]
 800a8e8:	f003 0307 	and.w	r3, r3, #7
 800a8ec:	009b      	lsls	r3, r3, #2
 800a8ee:	fa02 f303 	lsl.w	r3, r2, r3
 800a8f2:	693a      	ldr	r2, [r7, #16]
 800a8f4:	4313      	orrs	r3, r2
 800a8f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800a8f8:	697b      	ldr	r3, [r7, #20]
 800a8fa:	08da      	lsrs	r2, r3, #3
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	3208      	adds	r2, #8
 800a900:	6939      	ldr	r1, [r7, #16]
 800a902:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800a90c:	697b      	ldr	r3, [r7, #20]
 800a90e:	005b      	lsls	r3, r3, #1
 800a910:	2203      	movs	r2, #3
 800a912:	fa02 f303 	lsl.w	r3, r2, r3
 800a916:	43db      	mvns	r3, r3
 800a918:	693a      	ldr	r2, [r7, #16]
 800a91a:	4013      	ands	r3, r2
 800a91c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	685b      	ldr	r3, [r3, #4]
 800a922:	f003 0203 	and.w	r2, r3, #3
 800a926:	697b      	ldr	r3, [r7, #20]
 800a928:	005b      	lsls	r3, r3, #1
 800a92a:	fa02 f303 	lsl.w	r3, r2, r3
 800a92e:	693a      	ldr	r2, [r7, #16]
 800a930:	4313      	orrs	r3, r2
 800a932:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	693a      	ldr	r2, [r7, #16]
 800a938:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	685b      	ldr	r3, [r3, #4]
 800a93e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a942:	2b00      	cmp	r3, #0
 800a944:	f000 80a6 	beq.w	800aa94 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a948:	4b5b      	ldr	r3, [pc, #364]	; (800aab8 <HAL_GPIO_Init+0x2e4>)
 800a94a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a94c:	4a5a      	ldr	r2, [pc, #360]	; (800aab8 <HAL_GPIO_Init+0x2e4>)
 800a94e:	f043 0301 	orr.w	r3, r3, #1
 800a952:	6613      	str	r3, [r2, #96]	; 0x60
 800a954:	4b58      	ldr	r3, [pc, #352]	; (800aab8 <HAL_GPIO_Init+0x2e4>)
 800a956:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a958:	f003 0301 	and.w	r3, r3, #1
 800a95c:	60bb      	str	r3, [r7, #8]
 800a95e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a960:	4a56      	ldr	r2, [pc, #344]	; (800aabc <HAL_GPIO_Init+0x2e8>)
 800a962:	697b      	ldr	r3, [r7, #20]
 800a964:	089b      	lsrs	r3, r3, #2
 800a966:	3302      	adds	r3, #2
 800a968:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a96c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a96e:	697b      	ldr	r3, [r7, #20]
 800a970:	f003 0303 	and.w	r3, r3, #3
 800a974:	009b      	lsls	r3, r3, #2
 800a976:	220f      	movs	r2, #15
 800a978:	fa02 f303 	lsl.w	r3, r2, r3
 800a97c:	43db      	mvns	r3, r3
 800a97e:	693a      	ldr	r2, [r7, #16]
 800a980:	4013      	ands	r3, r2
 800a982:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800a98a:	d01f      	beq.n	800a9cc <HAL_GPIO_Init+0x1f8>
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	4a4c      	ldr	r2, [pc, #304]	; (800aac0 <HAL_GPIO_Init+0x2ec>)
 800a990:	4293      	cmp	r3, r2
 800a992:	d019      	beq.n	800a9c8 <HAL_GPIO_Init+0x1f4>
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	4a4b      	ldr	r2, [pc, #300]	; (800aac4 <HAL_GPIO_Init+0x2f0>)
 800a998:	4293      	cmp	r3, r2
 800a99a:	d013      	beq.n	800a9c4 <HAL_GPIO_Init+0x1f0>
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	4a4a      	ldr	r2, [pc, #296]	; (800aac8 <HAL_GPIO_Init+0x2f4>)
 800a9a0:	4293      	cmp	r3, r2
 800a9a2:	d00d      	beq.n	800a9c0 <HAL_GPIO_Init+0x1ec>
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	4a49      	ldr	r2, [pc, #292]	; (800aacc <HAL_GPIO_Init+0x2f8>)
 800a9a8:	4293      	cmp	r3, r2
 800a9aa:	d007      	beq.n	800a9bc <HAL_GPIO_Init+0x1e8>
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	4a48      	ldr	r2, [pc, #288]	; (800aad0 <HAL_GPIO_Init+0x2fc>)
 800a9b0:	4293      	cmp	r3, r2
 800a9b2:	d101      	bne.n	800a9b8 <HAL_GPIO_Init+0x1e4>
 800a9b4:	2305      	movs	r3, #5
 800a9b6:	e00a      	b.n	800a9ce <HAL_GPIO_Init+0x1fa>
 800a9b8:	2306      	movs	r3, #6
 800a9ba:	e008      	b.n	800a9ce <HAL_GPIO_Init+0x1fa>
 800a9bc:	2304      	movs	r3, #4
 800a9be:	e006      	b.n	800a9ce <HAL_GPIO_Init+0x1fa>
 800a9c0:	2303      	movs	r3, #3
 800a9c2:	e004      	b.n	800a9ce <HAL_GPIO_Init+0x1fa>
 800a9c4:	2302      	movs	r3, #2
 800a9c6:	e002      	b.n	800a9ce <HAL_GPIO_Init+0x1fa>
 800a9c8:	2301      	movs	r3, #1
 800a9ca:	e000      	b.n	800a9ce <HAL_GPIO_Init+0x1fa>
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	697a      	ldr	r2, [r7, #20]
 800a9d0:	f002 0203 	and.w	r2, r2, #3
 800a9d4:	0092      	lsls	r2, r2, #2
 800a9d6:	4093      	lsls	r3, r2
 800a9d8:	693a      	ldr	r2, [r7, #16]
 800a9da:	4313      	orrs	r3, r2
 800a9dc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a9de:	4937      	ldr	r1, [pc, #220]	; (800aabc <HAL_GPIO_Init+0x2e8>)
 800a9e0:	697b      	ldr	r3, [r7, #20]
 800a9e2:	089b      	lsrs	r3, r3, #2
 800a9e4:	3302      	adds	r3, #2
 800a9e6:	693a      	ldr	r2, [r7, #16]
 800a9e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800a9ec:	4b39      	ldr	r3, [pc, #228]	; (800aad4 <HAL_GPIO_Init+0x300>)
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	43db      	mvns	r3, r3
 800a9f6:	693a      	ldr	r2, [r7, #16]
 800a9f8:	4013      	ands	r3, r2
 800a9fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	685b      	ldr	r3, [r3, #4]
 800aa00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d003      	beq.n	800aa10 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800aa08:	693a      	ldr	r2, [r7, #16]
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	4313      	orrs	r3, r2
 800aa0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800aa10:	4a30      	ldr	r2, [pc, #192]	; (800aad4 <HAL_GPIO_Init+0x300>)
 800aa12:	693b      	ldr	r3, [r7, #16]
 800aa14:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800aa16:	4b2f      	ldr	r3, [pc, #188]	; (800aad4 <HAL_GPIO_Init+0x300>)
 800aa18:	685b      	ldr	r3, [r3, #4]
 800aa1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	43db      	mvns	r3, r3
 800aa20:	693a      	ldr	r2, [r7, #16]
 800aa22:	4013      	ands	r3, r2
 800aa24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800aa26:	683b      	ldr	r3, [r7, #0]
 800aa28:	685b      	ldr	r3, [r3, #4]
 800aa2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d003      	beq.n	800aa3a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800aa32:	693a      	ldr	r2, [r7, #16]
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	4313      	orrs	r3, r2
 800aa38:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800aa3a:	4a26      	ldr	r2, [pc, #152]	; (800aad4 <HAL_GPIO_Init+0x300>)
 800aa3c:	693b      	ldr	r3, [r7, #16]
 800aa3e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800aa40:	4b24      	ldr	r3, [pc, #144]	; (800aad4 <HAL_GPIO_Init+0x300>)
 800aa42:	689b      	ldr	r3, [r3, #8]
 800aa44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	43db      	mvns	r3, r3
 800aa4a:	693a      	ldr	r2, [r7, #16]
 800aa4c:	4013      	ands	r3, r2
 800aa4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800aa50:	683b      	ldr	r3, [r7, #0]
 800aa52:	685b      	ldr	r3, [r3, #4]
 800aa54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d003      	beq.n	800aa64 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800aa5c:	693a      	ldr	r2, [r7, #16]
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	4313      	orrs	r3, r2
 800aa62:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800aa64:	4a1b      	ldr	r2, [pc, #108]	; (800aad4 <HAL_GPIO_Init+0x300>)
 800aa66:	693b      	ldr	r3, [r7, #16]
 800aa68:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800aa6a:	4b1a      	ldr	r3, [pc, #104]	; (800aad4 <HAL_GPIO_Init+0x300>)
 800aa6c:	68db      	ldr	r3, [r3, #12]
 800aa6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	43db      	mvns	r3, r3
 800aa74:	693a      	ldr	r2, [r7, #16]
 800aa76:	4013      	ands	r3, r2
 800aa78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	685b      	ldr	r3, [r3, #4]
 800aa7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d003      	beq.n	800aa8e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800aa86:	693a      	ldr	r2, [r7, #16]
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	4313      	orrs	r3, r2
 800aa8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800aa8e:	4a11      	ldr	r2, [pc, #68]	; (800aad4 <HAL_GPIO_Init+0x300>)
 800aa90:	693b      	ldr	r3, [r7, #16]
 800aa92:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800aa94:	697b      	ldr	r3, [r7, #20]
 800aa96:	3301      	adds	r3, #1
 800aa98:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	681a      	ldr	r2, [r3, #0]
 800aa9e:	697b      	ldr	r3, [r7, #20]
 800aaa0:	fa22 f303 	lsr.w	r3, r2, r3
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	f47f ae9d 	bne.w	800a7e4 <HAL_GPIO_Init+0x10>
  }
}
 800aaaa:	bf00      	nop
 800aaac:	371c      	adds	r7, #28
 800aaae:	46bd      	mov	sp, r7
 800aab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab4:	4770      	bx	lr
 800aab6:	bf00      	nop
 800aab8:	40021000 	.word	0x40021000
 800aabc:	40010000 	.word	0x40010000
 800aac0:	48000400 	.word	0x48000400
 800aac4:	48000800 	.word	0x48000800
 800aac8:	48000c00 	.word	0x48000c00
 800aacc:	48001000 	.word	0x48001000
 800aad0:	48001400 	.word	0x48001400
 800aad4:	40010400 	.word	0x40010400

0800aad8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800aad8:	b480      	push	{r7}
 800aada:	b083      	sub	sp, #12
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
 800aae0:	460b      	mov	r3, r1
 800aae2:	807b      	strh	r3, [r7, #2]
 800aae4:	4613      	mov	r3, r2
 800aae6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800aae8:	787b      	ldrb	r3, [r7, #1]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d003      	beq.n	800aaf6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800aaee:	887a      	ldrh	r2, [r7, #2]
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800aaf4:	e002      	b.n	800aafc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800aaf6:	887a      	ldrh	r2, [r7, #2]
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	629a      	str	r2, [r3, #40]	; 0x28
}
 800aafc:	bf00      	nop
 800aafe:	370c      	adds	r7, #12
 800ab00:	46bd      	mov	sp, r7
 800ab02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab06:	4770      	bx	lr

0800ab08 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800ab08:	b480      	push	{r7}
 800ab0a:	b085      	sub	sp, #20
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d141      	bne.n	800ab9a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800ab16:	4b4b      	ldr	r3, [pc, #300]	; (800ac44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ab1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ab22:	d131      	bne.n	800ab88 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800ab24:	4b47      	ldr	r3, [pc, #284]	; (800ac44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ab26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ab2a:	4a46      	ldr	r2, [pc, #280]	; (800ac44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ab2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ab30:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800ab34:	4b43      	ldr	r3, [pc, #268]	; (800ac44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800ab3c:	4a41      	ldr	r2, [pc, #260]	; (800ac44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ab3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ab42:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800ab44:	4b40      	ldr	r3, [pc, #256]	; (800ac48 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	2232      	movs	r2, #50	; 0x32
 800ab4a:	fb02 f303 	mul.w	r3, r2, r3
 800ab4e:	4a3f      	ldr	r2, [pc, #252]	; (800ac4c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800ab50:	fba2 2303 	umull	r2, r3, r2, r3
 800ab54:	0c9b      	lsrs	r3, r3, #18
 800ab56:	3301      	adds	r3, #1
 800ab58:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800ab5a:	e002      	b.n	800ab62 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	3b01      	subs	r3, #1
 800ab60:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800ab62:	4b38      	ldr	r3, [pc, #224]	; (800ac44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ab64:	695b      	ldr	r3, [r3, #20]
 800ab66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ab6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ab6e:	d102      	bne.n	800ab76 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d1f2      	bne.n	800ab5c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800ab76:	4b33      	ldr	r3, [pc, #204]	; (800ac44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ab78:	695b      	ldr	r3, [r3, #20]
 800ab7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ab7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ab82:	d158      	bne.n	800ac36 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800ab84:	2303      	movs	r3, #3
 800ab86:	e057      	b.n	800ac38 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800ab88:	4b2e      	ldr	r3, [pc, #184]	; (800ac44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ab8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ab8e:	4a2d      	ldr	r2, [pc, #180]	; (800ac44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ab90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ab94:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800ab98:	e04d      	b.n	800ac36 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aba0:	d141      	bne.n	800ac26 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800aba2:	4b28      	ldr	r3, [pc, #160]	; (800ac44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800abaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800abae:	d131      	bne.n	800ac14 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800abb0:	4b24      	ldr	r3, [pc, #144]	; (800ac44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800abb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800abb6:	4a23      	ldr	r2, [pc, #140]	; (800ac44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800abb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800abbc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800abc0:	4b20      	ldr	r3, [pc, #128]	; (800ac44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800abc8:	4a1e      	ldr	r2, [pc, #120]	; (800ac44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800abca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800abce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800abd0:	4b1d      	ldr	r3, [pc, #116]	; (800ac48 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	2232      	movs	r2, #50	; 0x32
 800abd6:	fb02 f303 	mul.w	r3, r2, r3
 800abda:	4a1c      	ldr	r2, [pc, #112]	; (800ac4c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800abdc:	fba2 2303 	umull	r2, r3, r2, r3
 800abe0:	0c9b      	lsrs	r3, r3, #18
 800abe2:	3301      	adds	r3, #1
 800abe4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800abe6:	e002      	b.n	800abee <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	3b01      	subs	r3, #1
 800abec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800abee:	4b15      	ldr	r3, [pc, #84]	; (800ac44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800abf0:	695b      	ldr	r3, [r3, #20]
 800abf2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800abf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800abfa:	d102      	bne.n	800ac02 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d1f2      	bne.n	800abe8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800ac02:	4b10      	ldr	r3, [pc, #64]	; (800ac44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ac04:	695b      	ldr	r3, [r3, #20]
 800ac06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ac0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ac0e:	d112      	bne.n	800ac36 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800ac10:	2303      	movs	r3, #3
 800ac12:	e011      	b.n	800ac38 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800ac14:	4b0b      	ldr	r3, [pc, #44]	; (800ac44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ac16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ac1a:	4a0a      	ldr	r2, [pc, #40]	; (800ac44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ac1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ac20:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800ac24:	e007      	b.n	800ac36 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800ac26:	4b07      	ldr	r3, [pc, #28]	; (800ac44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800ac2e:	4a05      	ldr	r2, [pc, #20]	; (800ac44 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ac30:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ac34:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800ac36:	2300      	movs	r3, #0
}
 800ac38:	4618      	mov	r0, r3
 800ac3a:	3714      	adds	r7, #20
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac42:	4770      	bx	lr
 800ac44:	40007000 	.word	0x40007000
 800ac48:	20000ca4 	.word	0x20000ca4
 800ac4c:	431bde83 	.word	0x431bde83

0800ac50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b088      	sub	sp, #32
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d101      	bne.n	800ac62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ac5e:	2301      	movs	r3, #1
 800ac60:	e308      	b.n	800b274 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	f003 0301 	and.w	r3, r3, #1
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d075      	beq.n	800ad5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ac6e:	4ba3      	ldr	r3, [pc, #652]	; (800aefc <HAL_RCC_OscConfig+0x2ac>)
 800ac70:	689b      	ldr	r3, [r3, #8]
 800ac72:	f003 030c 	and.w	r3, r3, #12
 800ac76:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800ac78:	4ba0      	ldr	r3, [pc, #640]	; (800aefc <HAL_RCC_OscConfig+0x2ac>)
 800ac7a:	68db      	ldr	r3, [r3, #12]
 800ac7c:	f003 0303 	and.w	r3, r3, #3
 800ac80:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800ac82:	69bb      	ldr	r3, [r7, #24]
 800ac84:	2b0c      	cmp	r3, #12
 800ac86:	d102      	bne.n	800ac8e <HAL_RCC_OscConfig+0x3e>
 800ac88:	697b      	ldr	r3, [r7, #20]
 800ac8a:	2b03      	cmp	r3, #3
 800ac8c:	d002      	beq.n	800ac94 <HAL_RCC_OscConfig+0x44>
 800ac8e:	69bb      	ldr	r3, [r7, #24]
 800ac90:	2b08      	cmp	r3, #8
 800ac92:	d10b      	bne.n	800acac <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ac94:	4b99      	ldr	r3, [pc, #612]	; (800aefc <HAL_RCC_OscConfig+0x2ac>)
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d05b      	beq.n	800ad58 <HAL_RCC_OscConfig+0x108>
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	685b      	ldr	r3, [r3, #4]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d157      	bne.n	800ad58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800aca8:	2301      	movs	r3, #1
 800acaa:	e2e3      	b.n	800b274 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	685b      	ldr	r3, [r3, #4]
 800acb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800acb4:	d106      	bne.n	800acc4 <HAL_RCC_OscConfig+0x74>
 800acb6:	4b91      	ldr	r3, [pc, #580]	; (800aefc <HAL_RCC_OscConfig+0x2ac>)
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	4a90      	ldr	r2, [pc, #576]	; (800aefc <HAL_RCC_OscConfig+0x2ac>)
 800acbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800acc0:	6013      	str	r3, [r2, #0]
 800acc2:	e01d      	b.n	800ad00 <HAL_RCC_OscConfig+0xb0>
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	685b      	ldr	r3, [r3, #4]
 800acc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800accc:	d10c      	bne.n	800ace8 <HAL_RCC_OscConfig+0x98>
 800acce:	4b8b      	ldr	r3, [pc, #556]	; (800aefc <HAL_RCC_OscConfig+0x2ac>)
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	4a8a      	ldr	r2, [pc, #552]	; (800aefc <HAL_RCC_OscConfig+0x2ac>)
 800acd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800acd8:	6013      	str	r3, [r2, #0]
 800acda:	4b88      	ldr	r3, [pc, #544]	; (800aefc <HAL_RCC_OscConfig+0x2ac>)
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	4a87      	ldr	r2, [pc, #540]	; (800aefc <HAL_RCC_OscConfig+0x2ac>)
 800ace0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ace4:	6013      	str	r3, [r2, #0]
 800ace6:	e00b      	b.n	800ad00 <HAL_RCC_OscConfig+0xb0>
 800ace8:	4b84      	ldr	r3, [pc, #528]	; (800aefc <HAL_RCC_OscConfig+0x2ac>)
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	4a83      	ldr	r2, [pc, #524]	; (800aefc <HAL_RCC_OscConfig+0x2ac>)
 800acee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800acf2:	6013      	str	r3, [r2, #0]
 800acf4:	4b81      	ldr	r3, [pc, #516]	; (800aefc <HAL_RCC_OscConfig+0x2ac>)
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	4a80      	ldr	r2, [pc, #512]	; (800aefc <HAL_RCC_OscConfig+0x2ac>)
 800acfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800acfe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	685b      	ldr	r3, [r3, #4]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d013      	beq.n	800ad30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad08:	f7fd f9fc 	bl	8008104 <HAL_GetTick>
 800ad0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800ad0e:	e008      	b.n	800ad22 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ad10:	f7fd f9f8 	bl	8008104 <HAL_GetTick>
 800ad14:	4602      	mov	r2, r0
 800ad16:	693b      	ldr	r3, [r7, #16]
 800ad18:	1ad3      	subs	r3, r2, r3
 800ad1a:	2b64      	cmp	r3, #100	; 0x64
 800ad1c:	d901      	bls.n	800ad22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800ad1e:	2303      	movs	r3, #3
 800ad20:	e2a8      	b.n	800b274 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800ad22:	4b76      	ldr	r3, [pc, #472]	; (800aefc <HAL_RCC_OscConfig+0x2ac>)
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d0f0      	beq.n	800ad10 <HAL_RCC_OscConfig+0xc0>
 800ad2e:	e014      	b.n	800ad5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad30:	f7fd f9e8 	bl	8008104 <HAL_GetTick>
 800ad34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800ad36:	e008      	b.n	800ad4a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ad38:	f7fd f9e4 	bl	8008104 <HAL_GetTick>
 800ad3c:	4602      	mov	r2, r0
 800ad3e:	693b      	ldr	r3, [r7, #16]
 800ad40:	1ad3      	subs	r3, r2, r3
 800ad42:	2b64      	cmp	r3, #100	; 0x64
 800ad44:	d901      	bls.n	800ad4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800ad46:	2303      	movs	r3, #3
 800ad48:	e294      	b.n	800b274 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800ad4a:	4b6c      	ldr	r3, [pc, #432]	; (800aefc <HAL_RCC_OscConfig+0x2ac>)
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d1f0      	bne.n	800ad38 <HAL_RCC_OscConfig+0xe8>
 800ad56:	e000      	b.n	800ad5a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ad58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	f003 0302 	and.w	r3, r3, #2
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d075      	beq.n	800ae52 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ad66:	4b65      	ldr	r3, [pc, #404]	; (800aefc <HAL_RCC_OscConfig+0x2ac>)
 800ad68:	689b      	ldr	r3, [r3, #8]
 800ad6a:	f003 030c 	and.w	r3, r3, #12
 800ad6e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800ad70:	4b62      	ldr	r3, [pc, #392]	; (800aefc <HAL_RCC_OscConfig+0x2ac>)
 800ad72:	68db      	ldr	r3, [r3, #12]
 800ad74:	f003 0303 	and.w	r3, r3, #3
 800ad78:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800ad7a:	69bb      	ldr	r3, [r7, #24]
 800ad7c:	2b0c      	cmp	r3, #12
 800ad7e:	d102      	bne.n	800ad86 <HAL_RCC_OscConfig+0x136>
 800ad80:	697b      	ldr	r3, [r7, #20]
 800ad82:	2b02      	cmp	r3, #2
 800ad84:	d002      	beq.n	800ad8c <HAL_RCC_OscConfig+0x13c>
 800ad86:	69bb      	ldr	r3, [r7, #24]
 800ad88:	2b04      	cmp	r3, #4
 800ad8a:	d11f      	bne.n	800adcc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ad8c:	4b5b      	ldr	r3, [pc, #364]	; (800aefc <HAL_RCC_OscConfig+0x2ac>)
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d005      	beq.n	800ada4 <HAL_RCC_OscConfig+0x154>
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	68db      	ldr	r3, [r3, #12]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d101      	bne.n	800ada4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800ada0:	2301      	movs	r3, #1
 800ada2:	e267      	b.n	800b274 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ada4:	4b55      	ldr	r3, [pc, #340]	; (800aefc <HAL_RCC_OscConfig+0x2ac>)
 800ada6:	685b      	ldr	r3, [r3, #4]
 800ada8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	691b      	ldr	r3, [r3, #16]
 800adb0:	061b      	lsls	r3, r3, #24
 800adb2:	4952      	ldr	r1, [pc, #328]	; (800aefc <HAL_RCC_OscConfig+0x2ac>)
 800adb4:	4313      	orrs	r3, r2
 800adb6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800adb8:	4b51      	ldr	r3, [pc, #324]	; (800af00 <HAL_RCC_OscConfig+0x2b0>)
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	4618      	mov	r0, r3
 800adbe:	f7fd f955 	bl	800806c <HAL_InitTick>
 800adc2:	4603      	mov	r3, r0
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d043      	beq.n	800ae50 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800adc8:	2301      	movs	r3, #1
 800adca:	e253      	b.n	800b274 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	68db      	ldr	r3, [r3, #12]
 800add0:	2b00      	cmp	r3, #0
 800add2:	d023      	beq.n	800ae1c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800add4:	4b49      	ldr	r3, [pc, #292]	; (800aefc <HAL_RCC_OscConfig+0x2ac>)
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	4a48      	ldr	r2, [pc, #288]	; (800aefc <HAL_RCC_OscConfig+0x2ac>)
 800adda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800adde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ade0:	f7fd f990 	bl	8008104 <HAL_GetTick>
 800ade4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ade6:	e008      	b.n	800adfa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ade8:	f7fd f98c 	bl	8008104 <HAL_GetTick>
 800adec:	4602      	mov	r2, r0
 800adee:	693b      	ldr	r3, [r7, #16]
 800adf0:	1ad3      	subs	r3, r2, r3
 800adf2:	2b02      	cmp	r3, #2
 800adf4:	d901      	bls.n	800adfa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800adf6:	2303      	movs	r3, #3
 800adf8:	e23c      	b.n	800b274 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800adfa:	4b40      	ldr	r3, [pc, #256]	; (800aefc <HAL_RCC_OscConfig+0x2ac>)
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d0f0      	beq.n	800ade8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ae06:	4b3d      	ldr	r3, [pc, #244]	; (800aefc <HAL_RCC_OscConfig+0x2ac>)
 800ae08:	685b      	ldr	r3, [r3, #4]
 800ae0a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	691b      	ldr	r3, [r3, #16]
 800ae12:	061b      	lsls	r3, r3, #24
 800ae14:	4939      	ldr	r1, [pc, #228]	; (800aefc <HAL_RCC_OscConfig+0x2ac>)
 800ae16:	4313      	orrs	r3, r2
 800ae18:	604b      	str	r3, [r1, #4]
 800ae1a:	e01a      	b.n	800ae52 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ae1c:	4b37      	ldr	r3, [pc, #220]	; (800aefc <HAL_RCC_OscConfig+0x2ac>)
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	4a36      	ldr	r2, [pc, #216]	; (800aefc <HAL_RCC_OscConfig+0x2ac>)
 800ae22:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ae26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae28:	f7fd f96c 	bl	8008104 <HAL_GetTick>
 800ae2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800ae2e:	e008      	b.n	800ae42 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ae30:	f7fd f968 	bl	8008104 <HAL_GetTick>
 800ae34:	4602      	mov	r2, r0
 800ae36:	693b      	ldr	r3, [r7, #16]
 800ae38:	1ad3      	subs	r3, r2, r3
 800ae3a:	2b02      	cmp	r3, #2
 800ae3c:	d901      	bls.n	800ae42 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800ae3e:	2303      	movs	r3, #3
 800ae40:	e218      	b.n	800b274 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800ae42:	4b2e      	ldr	r3, [pc, #184]	; (800aefc <HAL_RCC_OscConfig+0x2ac>)
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d1f0      	bne.n	800ae30 <HAL_RCC_OscConfig+0x1e0>
 800ae4e:	e000      	b.n	800ae52 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ae50:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	f003 0308 	and.w	r3, r3, #8
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d03c      	beq.n	800aed8 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	695b      	ldr	r3, [r3, #20]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d01c      	beq.n	800aea0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ae66:	4b25      	ldr	r3, [pc, #148]	; (800aefc <HAL_RCC_OscConfig+0x2ac>)
 800ae68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ae6c:	4a23      	ldr	r2, [pc, #140]	; (800aefc <HAL_RCC_OscConfig+0x2ac>)
 800ae6e:	f043 0301 	orr.w	r3, r3, #1
 800ae72:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ae76:	f7fd f945 	bl	8008104 <HAL_GetTick>
 800ae7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800ae7c:	e008      	b.n	800ae90 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ae7e:	f7fd f941 	bl	8008104 <HAL_GetTick>
 800ae82:	4602      	mov	r2, r0
 800ae84:	693b      	ldr	r3, [r7, #16]
 800ae86:	1ad3      	subs	r3, r2, r3
 800ae88:	2b02      	cmp	r3, #2
 800ae8a:	d901      	bls.n	800ae90 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800ae8c:	2303      	movs	r3, #3
 800ae8e:	e1f1      	b.n	800b274 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800ae90:	4b1a      	ldr	r3, [pc, #104]	; (800aefc <HAL_RCC_OscConfig+0x2ac>)
 800ae92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ae96:	f003 0302 	and.w	r3, r3, #2
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d0ef      	beq.n	800ae7e <HAL_RCC_OscConfig+0x22e>
 800ae9e:	e01b      	b.n	800aed8 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800aea0:	4b16      	ldr	r3, [pc, #88]	; (800aefc <HAL_RCC_OscConfig+0x2ac>)
 800aea2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aea6:	4a15      	ldr	r2, [pc, #84]	; (800aefc <HAL_RCC_OscConfig+0x2ac>)
 800aea8:	f023 0301 	bic.w	r3, r3, #1
 800aeac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aeb0:	f7fd f928 	bl	8008104 <HAL_GetTick>
 800aeb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800aeb6:	e008      	b.n	800aeca <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aeb8:	f7fd f924 	bl	8008104 <HAL_GetTick>
 800aebc:	4602      	mov	r2, r0
 800aebe:	693b      	ldr	r3, [r7, #16]
 800aec0:	1ad3      	subs	r3, r2, r3
 800aec2:	2b02      	cmp	r3, #2
 800aec4:	d901      	bls.n	800aeca <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800aec6:	2303      	movs	r3, #3
 800aec8:	e1d4      	b.n	800b274 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800aeca:	4b0c      	ldr	r3, [pc, #48]	; (800aefc <HAL_RCC_OscConfig+0x2ac>)
 800aecc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aed0:	f003 0302 	and.w	r3, r3, #2
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d1ef      	bne.n	800aeb8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	f003 0304 	and.w	r3, r3, #4
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	f000 80ab 	beq.w	800b03c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800aee6:	2300      	movs	r3, #0
 800aee8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800aeea:	4b04      	ldr	r3, [pc, #16]	; (800aefc <HAL_RCC_OscConfig+0x2ac>)
 800aeec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aeee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d106      	bne.n	800af04 <HAL_RCC_OscConfig+0x2b4>
 800aef6:	2301      	movs	r3, #1
 800aef8:	e005      	b.n	800af06 <HAL_RCC_OscConfig+0x2b6>
 800aefa:	bf00      	nop
 800aefc:	40021000 	.word	0x40021000
 800af00:	20000ca8 	.word	0x20000ca8
 800af04:	2300      	movs	r3, #0
 800af06:	2b00      	cmp	r3, #0
 800af08:	d00d      	beq.n	800af26 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800af0a:	4baf      	ldr	r3, [pc, #700]	; (800b1c8 <HAL_RCC_OscConfig+0x578>)
 800af0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af0e:	4aae      	ldr	r2, [pc, #696]	; (800b1c8 <HAL_RCC_OscConfig+0x578>)
 800af10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800af14:	6593      	str	r3, [r2, #88]	; 0x58
 800af16:	4bac      	ldr	r3, [pc, #688]	; (800b1c8 <HAL_RCC_OscConfig+0x578>)
 800af18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800af1e:	60fb      	str	r3, [r7, #12]
 800af20:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800af22:	2301      	movs	r3, #1
 800af24:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800af26:	4ba9      	ldr	r3, [pc, #676]	; (800b1cc <HAL_RCC_OscConfig+0x57c>)
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d118      	bne.n	800af64 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800af32:	4ba6      	ldr	r3, [pc, #664]	; (800b1cc <HAL_RCC_OscConfig+0x57c>)
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	4aa5      	ldr	r2, [pc, #660]	; (800b1cc <HAL_RCC_OscConfig+0x57c>)
 800af38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800af3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800af3e:	f7fd f8e1 	bl	8008104 <HAL_GetTick>
 800af42:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800af44:	e008      	b.n	800af58 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800af46:	f7fd f8dd 	bl	8008104 <HAL_GetTick>
 800af4a:	4602      	mov	r2, r0
 800af4c:	693b      	ldr	r3, [r7, #16]
 800af4e:	1ad3      	subs	r3, r2, r3
 800af50:	2b02      	cmp	r3, #2
 800af52:	d901      	bls.n	800af58 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800af54:	2303      	movs	r3, #3
 800af56:	e18d      	b.n	800b274 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800af58:	4b9c      	ldr	r3, [pc, #624]	; (800b1cc <HAL_RCC_OscConfig+0x57c>)
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af60:	2b00      	cmp	r3, #0
 800af62:	d0f0      	beq.n	800af46 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	689b      	ldr	r3, [r3, #8]
 800af68:	2b01      	cmp	r3, #1
 800af6a:	d108      	bne.n	800af7e <HAL_RCC_OscConfig+0x32e>
 800af6c:	4b96      	ldr	r3, [pc, #600]	; (800b1c8 <HAL_RCC_OscConfig+0x578>)
 800af6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af72:	4a95      	ldr	r2, [pc, #596]	; (800b1c8 <HAL_RCC_OscConfig+0x578>)
 800af74:	f043 0301 	orr.w	r3, r3, #1
 800af78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800af7c:	e024      	b.n	800afc8 <HAL_RCC_OscConfig+0x378>
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	689b      	ldr	r3, [r3, #8]
 800af82:	2b05      	cmp	r3, #5
 800af84:	d110      	bne.n	800afa8 <HAL_RCC_OscConfig+0x358>
 800af86:	4b90      	ldr	r3, [pc, #576]	; (800b1c8 <HAL_RCC_OscConfig+0x578>)
 800af88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af8c:	4a8e      	ldr	r2, [pc, #568]	; (800b1c8 <HAL_RCC_OscConfig+0x578>)
 800af8e:	f043 0304 	orr.w	r3, r3, #4
 800af92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800af96:	4b8c      	ldr	r3, [pc, #560]	; (800b1c8 <HAL_RCC_OscConfig+0x578>)
 800af98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af9c:	4a8a      	ldr	r2, [pc, #552]	; (800b1c8 <HAL_RCC_OscConfig+0x578>)
 800af9e:	f043 0301 	orr.w	r3, r3, #1
 800afa2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800afa6:	e00f      	b.n	800afc8 <HAL_RCC_OscConfig+0x378>
 800afa8:	4b87      	ldr	r3, [pc, #540]	; (800b1c8 <HAL_RCC_OscConfig+0x578>)
 800afaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800afae:	4a86      	ldr	r2, [pc, #536]	; (800b1c8 <HAL_RCC_OscConfig+0x578>)
 800afb0:	f023 0301 	bic.w	r3, r3, #1
 800afb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800afb8:	4b83      	ldr	r3, [pc, #524]	; (800b1c8 <HAL_RCC_OscConfig+0x578>)
 800afba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800afbe:	4a82      	ldr	r2, [pc, #520]	; (800b1c8 <HAL_RCC_OscConfig+0x578>)
 800afc0:	f023 0304 	bic.w	r3, r3, #4
 800afc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	689b      	ldr	r3, [r3, #8]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d016      	beq.n	800affe <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800afd0:	f7fd f898 	bl	8008104 <HAL_GetTick>
 800afd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800afd6:	e00a      	b.n	800afee <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800afd8:	f7fd f894 	bl	8008104 <HAL_GetTick>
 800afdc:	4602      	mov	r2, r0
 800afde:	693b      	ldr	r3, [r7, #16]
 800afe0:	1ad3      	subs	r3, r2, r3
 800afe2:	f241 3288 	movw	r2, #5000	; 0x1388
 800afe6:	4293      	cmp	r3, r2
 800afe8:	d901      	bls.n	800afee <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800afea:	2303      	movs	r3, #3
 800afec:	e142      	b.n	800b274 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800afee:	4b76      	ldr	r3, [pc, #472]	; (800b1c8 <HAL_RCC_OscConfig+0x578>)
 800aff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aff4:	f003 0302 	and.w	r3, r3, #2
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d0ed      	beq.n	800afd8 <HAL_RCC_OscConfig+0x388>
 800affc:	e015      	b.n	800b02a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800affe:	f7fd f881 	bl	8008104 <HAL_GetTick>
 800b002:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b004:	e00a      	b.n	800b01c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b006:	f7fd f87d 	bl	8008104 <HAL_GetTick>
 800b00a:	4602      	mov	r2, r0
 800b00c:	693b      	ldr	r3, [r7, #16]
 800b00e:	1ad3      	subs	r3, r2, r3
 800b010:	f241 3288 	movw	r2, #5000	; 0x1388
 800b014:	4293      	cmp	r3, r2
 800b016:	d901      	bls.n	800b01c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800b018:	2303      	movs	r3, #3
 800b01a:	e12b      	b.n	800b274 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b01c:	4b6a      	ldr	r3, [pc, #424]	; (800b1c8 <HAL_RCC_OscConfig+0x578>)
 800b01e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b022:	f003 0302 	and.w	r3, r3, #2
 800b026:	2b00      	cmp	r3, #0
 800b028:	d1ed      	bne.n	800b006 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b02a:	7ffb      	ldrb	r3, [r7, #31]
 800b02c:	2b01      	cmp	r3, #1
 800b02e:	d105      	bne.n	800b03c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b030:	4b65      	ldr	r3, [pc, #404]	; (800b1c8 <HAL_RCC_OscConfig+0x578>)
 800b032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b034:	4a64      	ldr	r2, [pc, #400]	; (800b1c8 <HAL_RCC_OscConfig+0x578>)
 800b036:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b03a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	f003 0320 	and.w	r3, r3, #32
 800b044:	2b00      	cmp	r3, #0
 800b046:	d03c      	beq.n	800b0c2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	699b      	ldr	r3, [r3, #24]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d01c      	beq.n	800b08a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b050:	4b5d      	ldr	r3, [pc, #372]	; (800b1c8 <HAL_RCC_OscConfig+0x578>)
 800b052:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b056:	4a5c      	ldr	r2, [pc, #368]	; (800b1c8 <HAL_RCC_OscConfig+0x578>)
 800b058:	f043 0301 	orr.w	r3, r3, #1
 800b05c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b060:	f7fd f850 	bl	8008104 <HAL_GetTick>
 800b064:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b066:	e008      	b.n	800b07a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b068:	f7fd f84c 	bl	8008104 <HAL_GetTick>
 800b06c:	4602      	mov	r2, r0
 800b06e:	693b      	ldr	r3, [r7, #16]
 800b070:	1ad3      	subs	r3, r2, r3
 800b072:	2b02      	cmp	r3, #2
 800b074:	d901      	bls.n	800b07a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800b076:	2303      	movs	r3, #3
 800b078:	e0fc      	b.n	800b274 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b07a:	4b53      	ldr	r3, [pc, #332]	; (800b1c8 <HAL_RCC_OscConfig+0x578>)
 800b07c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b080:	f003 0302 	and.w	r3, r3, #2
 800b084:	2b00      	cmp	r3, #0
 800b086:	d0ef      	beq.n	800b068 <HAL_RCC_OscConfig+0x418>
 800b088:	e01b      	b.n	800b0c2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b08a:	4b4f      	ldr	r3, [pc, #316]	; (800b1c8 <HAL_RCC_OscConfig+0x578>)
 800b08c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b090:	4a4d      	ldr	r2, [pc, #308]	; (800b1c8 <HAL_RCC_OscConfig+0x578>)
 800b092:	f023 0301 	bic.w	r3, r3, #1
 800b096:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b09a:	f7fd f833 	bl	8008104 <HAL_GetTick>
 800b09e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b0a0:	e008      	b.n	800b0b4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b0a2:	f7fd f82f 	bl	8008104 <HAL_GetTick>
 800b0a6:	4602      	mov	r2, r0
 800b0a8:	693b      	ldr	r3, [r7, #16]
 800b0aa:	1ad3      	subs	r3, r2, r3
 800b0ac:	2b02      	cmp	r3, #2
 800b0ae:	d901      	bls.n	800b0b4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800b0b0:	2303      	movs	r3, #3
 800b0b2:	e0df      	b.n	800b274 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b0b4:	4b44      	ldr	r3, [pc, #272]	; (800b1c8 <HAL_RCC_OscConfig+0x578>)
 800b0b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b0ba:	f003 0302 	and.w	r3, r3, #2
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d1ef      	bne.n	800b0a2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	69db      	ldr	r3, [r3, #28]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	f000 80d3 	beq.w	800b272 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b0cc:	4b3e      	ldr	r3, [pc, #248]	; (800b1c8 <HAL_RCC_OscConfig+0x578>)
 800b0ce:	689b      	ldr	r3, [r3, #8]
 800b0d0:	f003 030c 	and.w	r3, r3, #12
 800b0d4:	2b0c      	cmp	r3, #12
 800b0d6:	f000 808d 	beq.w	800b1f4 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	69db      	ldr	r3, [r3, #28]
 800b0de:	2b02      	cmp	r3, #2
 800b0e0:	d15a      	bne.n	800b198 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b0e2:	4b39      	ldr	r3, [pc, #228]	; (800b1c8 <HAL_RCC_OscConfig+0x578>)
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	4a38      	ldr	r2, [pc, #224]	; (800b1c8 <HAL_RCC_OscConfig+0x578>)
 800b0e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b0ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b0ee:	f7fd f809 	bl	8008104 <HAL_GetTick>
 800b0f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b0f4:	e008      	b.n	800b108 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b0f6:	f7fd f805 	bl	8008104 <HAL_GetTick>
 800b0fa:	4602      	mov	r2, r0
 800b0fc:	693b      	ldr	r3, [r7, #16]
 800b0fe:	1ad3      	subs	r3, r2, r3
 800b100:	2b02      	cmp	r3, #2
 800b102:	d901      	bls.n	800b108 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 800b104:	2303      	movs	r3, #3
 800b106:	e0b5      	b.n	800b274 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b108:	4b2f      	ldr	r3, [pc, #188]	; (800b1c8 <HAL_RCC_OscConfig+0x578>)
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b110:	2b00      	cmp	r3, #0
 800b112:	d1f0      	bne.n	800b0f6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b114:	4b2c      	ldr	r3, [pc, #176]	; (800b1c8 <HAL_RCC_OscConfig+0x578>)
 800b116:	68da      	ldr	r2, [r3, #12]
 800b118:	4b2d      	ldr	r3, [pc, #180]	; (800b1d0 <HAL_RCC_OscConfig+0x580>)
 800b11a:	4013      	ands	r3, r2
 800b11c:	687a      	ldr	r2, [r7, #4]
 800b11e:	6a11      	ldr	r1, [r2, #32]
 800b120:	687a      	ldr	r2, [r7, #4]
 800b122:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b124:	3a01      	subs	r2, #1
 800b126:	0112      	lsls	r2, r2, #4
 800b128:	4311      	orrs	r1, r2
 800b12a:	687a      	ldr	r2, [r7, #4]
 800b12c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800b12e:	0212      	lsls	r2, r2, #8
 800b130:	4311      	orrs	r1, r2
 800b132:	687a      	ldr	r2, [r7, #4]
 800b134:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b136:	0852      	lsrs	r2, r2, #1
 800b138:	3a01      	subs	r2, #1
 800b13a:	0552      	lsls	r2, r2, #21
 800b13c:	4311      	orrs	r1, r2
 800b13e:	687a      	ldr	r2, [r7, #4]
 800b140:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800b142:	0852      	lsrs	r2, r2, #1
 800b144:	3a01      	subs	r2, #1
 800b146:	0652      	lsls	r2, r2, #25
 800b148:	4311      	orrs	r1, r2
 800b14a:	687a      	ldr	r2, [r7, #4]
 800b14c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800b14e:	06d2      	lsls	r2, r2, #27
 800b150:	430a      	orrs	r2, r1
 800b152:	491d      	ldr	r1, [pc, #116]	; (800b1c8 <HAL_RCC_OscConfig+0x578>)
 800b154:	4313      	orrs	r3, r2
 800b156:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b158:	4b1b      	ldr	r3, [pc, #108]	; (800b1c8 <HAL_RCC_OscConfig+0x578>)
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	4a1a      	ldr	r2, [pc, #104]	; (800b1c8 <HAL_RCC_OscConfig+0x578>)
 800b15e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b162:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b164:	4b18      	ldr	r3, [pc, #96]	; (800b1c8 <HAL_RCC_OscConfig+0x578>)
 800b166:	68db      	ldr	r3, [r3, #12]
 800b168:	4a17      	ldr	r2, [pc, #92]	; (800b1c8 <HAL_RCC_OscConfig+0x578>)
 800b16a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b16e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b170:	f7fc ffc8 	bl	8008104 <HAL_GetTick>
 800b174:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b176:	e008      	b.n	800b18a <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b178:	f7fc ffc4 	bl	8008104 <HAL_GetTick>
 800b17c:	4602      	mov	r2, r0
 800b17e:	693b      	ldr	r3, [r7, #16]
 800b180:	1ad3      	subs	r3, r2, r3
 800b182:	2b02      	cmp	r3, #2
 800b184:	d901      	bls.n	800b18a <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800b186:	2303      	movs	r3, #3
 800b188:	e074      	b.n	800b274 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b18a:	4b0f      	ldr	r3, [pc, #60]	; (800b1c8 <HAL_RCC_OscConfig+0x578>)
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b192:	2b00      	cmp	r3, #0
 800b194:	d0f0      	beq.n	800b178 <HAL_RCC_OscConfig+0x528>
 800b196:	e06c      	b.n	800b272 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b198:	4b0b      	ldr	r3, [pc, #44]	; (800b1c8 <HAL_RCC_OscConfig+0x578>)
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	4a0a      	ldr	r2, [pc, #40]	; (800b1c8 <HAL_RCC_OscConfig+0x578>)
 800b19e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b1a2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800b1a4:	4b08      	ldr	r3, [pc, #32]	; (800b1c8 <HAL_RCC_OscConfig+0x578>)
 800b1a6:	68db      	ldr	r3, [r3, #12]
 800b1a8:	4a07      	ldr	r2, [pc, #28]	; (800b1c8 <HAL_RCC_OscConfig+0x578>)
 800b1aa:	f023 0303 	bic.w	r3, r3, #3
 800b1ae:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800b1b0:	4b05      	ldr	r3, [pc, #20]	; (800b1c8 <HAL_RCC_OscConfig+0x578>)
 800b1b2:	68db      	ldr	r3, [r3, #12]
 800b1b4:	4a04      	ldr	r2, [pc, #16]	; (800b1c8 <HAL_RCC_OscConfig+0x578>)
 800b1b6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800b1ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b1be:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b1c0:	f7fc ffa0 	bl	8008104 <HAL_GetTick>
 800b1c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b1c6:	e00e      	b.n	800b1e6 <HAL_RCC_OscConfig+0x596>
 800b1c8:	40021000 	.word	0x40021000
 800b1cc:	40007000 	.word	0x40007000
 800b1d0:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b1d4:	f7fc ff96 	bl	8008104 <HAL_GetTick>
 800b1d8:	4602      	mov	r2, r0
 800b1da:	693b      	ldr	r3, [r7, #16]
 800b1dc:	1ad3      	subs	r3, r2, r3
 800b1de:	2b02      	cmp	r3, #2
 800b1e0:	d901      	bls.n	800b1e6 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800b1e2:	2303      	movs	r3, #3
 800b1e4:	e046      	b.n	800b274 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b1e6:	4b25      	ldr	r3, [pc, #148]	; (800b27c <HAL_RCC_OscConfig+0x62c>)
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d1f0      	bne.n	800b1d4 <HAL_RCC_OscConfig+0x584>
 800b1f2:	e03e      	b.n	800b272 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	69db      	ldr	r3, [r3, #28]
 800b1f8:	2b01      	cmp	r3, #1
 800b1fa:	d101      	bne.n	800b200 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 800b1fc:	2301      	movs	r3, #1
 800b1fe:	e039      	b.n	800b274 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800b200:	4b1e      	ldr	r3, [pc, #120]	; (800b27c <HAL_RCC_OscConfig+0x62c>)
 800b202:	68db      	ldr	r3, [r3, #12]
 800b204:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b206:	697b      	ldr	r3, [r7, #20]
 800b208:	f003 0203 	and.w	r2, r3, #3
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	6a1b      	ldr	r3, [r3, #32]
 800b210:	429a      	cmp	r2, r3
 800b212:	d12c      	bne.n	800b26e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b214:	697b      	ldr	r3, [r7, #20]
 800b216:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b21e:	3b01      	subs	r3, #1
 800b220:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b222:	429a      	cmp	r2, r3
 800b224:	d123      	bne.n	800b26e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800b226:	697b      	ldr	r3, [r7, #20]
 800b228:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b230:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b232:	429a      	cmp	r2, r3
 800b234:	d11b      	bne.n	800b26e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b236:	697b      	ldr	r3, [r7, #20]
 800b238:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b240:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800b242:	429a      	cmp	r2, r3
 800b244:	d113      	bne.n	800b26e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b246:	697b      	ldr	r3, [r7, #20]
 800b248:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b250:	085b      	lsrs	r3, r3, #1
 800b252:	3b01      	subs	r3, #1
 800b254:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b256:	429a      	cmp	r2, r3
 800b258:	d109      	bne.n	800b26e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800b25a:	697b      	ldr	r3, [r7, #20]
 800b25c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b264:	085b      	lsrs	r3, r3, #1
 800b266:	3b01      	subs	r3, #1
 800b268:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b26a:	429a      	cmp	r2, r3
 800b26c:	d001      	beq.n	800b272 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800b26e:	2301      	movs	r3, #1
 800b270:	e000      	b.n	800b274 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800b272:	2300      	movs	r3, #0
}
 800b274:	4618      	mov	r0, r3
 800b276:	3720      	adds	r7, #32
 800b278:	46bd      	mov	sp, r7
 800b27a:	bd80      	pop	{r7, pc}
 800b27c:	40021000 	.word	0x40021000

0800b280 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b280:	b580      	push	{r7, lr}
 800b282:	b086      	sub	sp, #24
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
 800b288:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800b28a:	2300      	movs	r3, #0
 800b28c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d101      	bne.n	800b298 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800b294:	2301      	movs	r3, #1
 800b296:	e11e      	b.n	800b4d6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b298:	4b91      	ldr	r3, [pc, #580]	; (800b4e0 <HAL_RCC_ClockConfig+0x260>)
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	f003 030f 	and.w	r3, r3, #15
 800b2a0:	683a      	ldr	r2, [r7, #0]
 800b2a2:	429a      	cmp	r2, r3
 800b2a4:	d910      	bls.n	800b2c8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b2a6:	4b8e      	ldr	r3, [pc, #568]	; (800b4e0 <HAL_RCC_ClockConfig+0x260>)
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	f023 020f 	bic.w	r2, r3, #15
 800b2ae:	498c      	ldr	r1, [pc, #560]	; (800b4e0 <HAL_RCC_ClockConfig+0x260>)
 800b2b0:	683b      	ldr	r3, [r7, #0]
 800b2b2:	4313      	orrs	r3, r2
 800b2b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b2b6:	4b8a      	ldr	r3, [pc, #552]	; (800b4e0 <HAL_RCC_ClockConfig+0x260>)
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	f003 030f 	and.w	r3, r3, #15
 800b2be:	683a      	ldr	r2, [r7, #0]
 800b2c0:	429a      	cmp	r2, r3
 800b2c2:	d001      	beq.n	800b2c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800b2c4:	2301      	movs	r3, #1
 800b2c6:	e106      	b.n	800b4d6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	f003 0301 	and.w	r3, r3, #1
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d073      	beq.n	800b3bc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	685b      	ldr	r3, [r3, #4]
 800b2d8:	2b03      	cmp	r3, #3
 800b2da:	d129      	bne.n	800b330 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b2dc:	4b81      	ldr	r3, [pc, #516]	; (800b4e4 <HAL_RCC_ClockConfig+0x264>)
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d101      	bne.n	800b2ec <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800b2e8:	2301      	movs	r3, #1
 800b2ea:	e0f4      	b.n	800b4d6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800b2ec:	f000 f972 	bl	800b5d4 <RCC_GetSysClockFreqFromPLLSource>
 800b2f0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800b2f2:	693b      	ldr	r3, [r7, #16]
 800b2f4:	4a7c      	ldr	r2, [pc, #496]	; (800b4e8 <HAL_RCC_ClockConfig+0x268>)
 800b2f6:	4293      	cmp	r3, r2
 800b2f8:	d93f      	bls.n	800b37a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800b2fa:	4b7a      	ldr	r3, [pc, #488]	; (800b4e4 <HAL_RCC_ClockConfig+0x264>)
 800b2fc:	689b      	ldr	r3, [r3, #8]
 800b2fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b302:	2b00      	cmp	r3, #0
 800b304:	d009      	beq.n	800b31a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d033      	beq.n	800b37a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800b316:	2b00      	cmp	r3, #0
 800b318:	d12f      	bne.n	800b37a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800b31a:	4b72      	ldr	r3, [pc, #456]	; (800b4e4 <HAL_RCC_ClockConfig+0x264>)
 800b31c:	689b      	ldr	r3, [r3, #8]
 800b31e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b322:	4a70      	ldr	r2, [pc, #448]	; (800b4e4 <HAL_RCC_ClockConfig+0x264>)
 800b324:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b328:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800b32a:	2380      	movs	r3, #128	; 0x80
 800b32c:	617b      	str	r3, [r7, #20]
 800b32e:	e024      	b.n	800b37a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	685b      	ldr	r3, [r3, #4]
 800b334:	2b02      	cmp	r3, #2
 800b336:	d107      	bne.n	800b348 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b338:	4b6a      	ldr	r3, [pc, #424]	; (800b4e4 <HAL_RCC_ClockConfig+0x264>)
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b340:	2b00      	cmp	r3, #0
 800b342:	d109      	bne.n	800b358 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800b344:	2301      	movs	r3, #1
 800b346:	e0c6      	b.n	800b4d6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b348:	4b66      	ldr	r3, [pc, #408]	; (800b4e4 <HAL_RCC_ClockConfig+0x264>)
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b350:	2b00      	cmp	r3, #0
 800b352:	d101      	bne.n	800b358 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800b354:	2301      	movs	r3, #1
 800b356:	e0be      	b.n	800b4d6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800b358:	f000 f8ce 	bl	800b4f8 <HAL_RCC_GetSysClockFreq>
 800b35c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800b35e:	693b      	ldr	r3, [r7, #16]
 800b360:	4a61      	ldr	r2, [pc, #388]	; (800b4e8 <HAL_RCC_ClockConfig+0x268>)
 800b362:	4293      	cmp	r3, r2
 800b364:	d909      	bls.n	800b37a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800b366:	4b5f      	ldr	r3, [pc, #380]	; (800b4e4 <HAL_RCC_ClockConfig+0x264>)
 800b368:	689b      	ldr	r3, [r3, #8]
 800b36a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b36e:	4a5d      	ldr	r2, [pc, #372]	; (800b4e4 <HAL_RCC_ClockConfig+0x264>)
 800b370:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b374:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800b376:	2380      	movs	r3, #128	; 0x80
 800b378:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b37a:	4b5a      	ldr	r3, [pc, #360]	; (800b4e4 <HAL_RCC_ClockConfig+0x264>)
 800b37c:	689b      	ldr	r3, [r3, #8]
 800b37e:	f023 0203 	bic.w	r2, r3, #3
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	685b      	ldr	r3, [r3, #4]
 800b386:	4957      	ldr	r1, [pc, #348]	; (800b4e4 <HAL_RCC_ClockConfig+0x264>)
 800b388:	4313      	orrs	r3, r2
 800b38a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b38c:	f7fc feba 	bl	8008104 <HAL_GetTick>
 800b390:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b392:	e00a      	b.n	800b3aa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b394:	f7fc feb6 	bl	8008104 <HAL_GetTick>
 800b398:	4602      	mov	r2, r0
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	1ad3      	subs	r3, r2, r3
 800b39e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3a2:	4293      	cmp	r3, r2
 800b3a4:	d901      	bls.n	800b3aa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800b3a6:	2303      	movs	r3, #3
 800b3a8:	e095      	b.n	800b4d6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b3aa:	4b4e      	ldr	r3, [pc, #312]	; (800b4e4 <HAL_RCC_ClockConfig+0x264>)
 800b3ac:	689b      	ldr	r3, [r3, #8]
 800b3ae:	f003 020c 	and.w	r2, r3, #12
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	685b      	ldr	r3, [r3, #4]
 800b3b6:	009b      	lsls	r3, r3, #2
 800b3b8:	429a      	cmp	r2, r3
 800b3ba:	d1eb      	bne.n	800b394 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	f003 0302 	and.w	r3, r3, #2
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d023      	beq.n	800b410 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	f003 0304 	and.w	r3, r3, #4
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d005      	beq.n	800b3e0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b3d4:	4b43      	ldr	r3, [pc, #268]	; (800b4e4 <HAL_RCC_ClockConfig+0x264>)
 800b3d6:	689b      	ldr	r3, [r3, #8]
 800b3d8:	4a42      	ldr	r2, [pc, #264]	; (800b4e4 <HAL_RCC_ClockConfig+0x264>)
 800b3da:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800b3de:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	f003 0308 	and.w	r3, r3, #8
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d007      	beq.n	800b3fc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800b3ec:	4b3d      	ldr	r3, [pc, #244]	; (800b4e4 <HAL_RCC_ClockConfig+0x264>)
 800b3ee:	689b      	ldr	r3, [r3, #8]
 800b3f0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b3f4:	4a3b      	ldr	r2, [pc, #236]	; (800b4e4 <HAL_RCC_ClockConfig+0x264>)
 800b3f6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800b3fa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b3fc:	4b39      	ldr	r3, [pc, #228]	; (800b4e4 <HAL_RCC_ClockConfig+0x264>)
 800b3fe:	689b      	ldr	r3, [r3, #8]
 800b400:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	689b      	ldr	r3, [r3, #8]
 800b408:	4936      	ldr	r1, [pc, #216]	; (800b4e4 <HAL_RCC_ClockConfig+0x264>)
 800b40a:	4313      	orrs	r3, r2
 800b40c:	608b      	str	r3, [r1, #8]
 800b40e:	e008      	b.n	800b422 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800b410:	697b      	ldr	r3, [r7, #20]
 800b412:	2b80      	cmp	r3, #128	; 0x80
 800b414:	d105      	bne.n	800b422 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800b416:	4b33      	ldr	r3, [pc, #204]	; (800b4e4 <HAL_RCC_ClockConfig+0x264>)
 800b418:	689b      	ldr	r3, [r3, #8]
 800b41a:	4a32      	ldr	r2, [pc, #200]	; (800b4e4 <HAL_RCC_ClockConfig+0x264>)
 800b41c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b420:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b422:	4b2f      	ldr	r3, [pc, #188]	; (800b4e0 <HAL_RCC_ClockConfig+0x260>)
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	f003 030f 	and.w	r3, r3, #15
 800b42a:	683a      	ldr	r2, [r7, #0]
 800b42c:	429a      	cmp	r2, r3
 800b42e:	d21d      	bcs.n	800b46c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b430:	4b2b      	ldr	r3, [pc, #172]	; (800b4e0 <HAL_RCC_ClockConfig+0x260>)
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	f023 020f 	bic.w	r2, r3, #15
 800b438:	4929      	ldr	r1, [pc, #164]	; (800b4e0 <HAL_RCC_ClockConfig+0x260>)
 800b43a:	683b      	ldr	r3, [r7, #0]
 800b43c:	4313      	orrs	r3, r2
 800b43e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800b440:	f7fc fe60 	bl	8008104 <HAL_GetTick>
 800b444:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b446:	e00a      	b.n	800b45e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b448:	f7fc fe5c 	bl	8008104 <HAL_GetTick>
 800b44c:	4602      	mov	r2, r0
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	1ad3      	subs	r3, r2, r3
 800b452:	f241 3288 	movw	r2, #5000	; 0x1388
 800b456:	4293      	cmp	r3, r2
 800b458:	d901      	bls.n	800b45e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800b45a:	2303      	movs	r3, #3
 800b45c:	e03b      	b.n	800b4d6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b45e:	4b20      	ldr	r3, [pc, #128]	; (800b4e0 <HAL_RCC_ClockConfig+0x260>)
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	f003 030f 	and.w	r3, r3, #15
 800b466:	683a      	ldr	r2, [r7, #0]
 800b468:	429a      	cmp	r2, r3
 800b46a:	d1ed      	bne.n	800b448 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	f003 0304 	and.w	r3, r3, #4
 800b474:	2b00      	cmp	r3, #0
 800b476:	d008      	beq.n	800b48a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b478:	4b1a      	ldr	r3, [pc, #104]	; (800b4e4 <HAL_RCC_ClockConfig+0x264>)
 800b47a:	689b      	ldr	r3, [r3, #8]
 800b47c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	68db      	ldr	r3, [r3, #12]
 800b484:	4917      	ldr	r1, [pc, #92]	; (800b4e4 <HAL_RCC_ClockConfig+0x264>)
 800b486:	4313      	orrs	r3, r2
 800b488:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	f003 0308 	and.w	r3, r3, #8
 800b492:	2b00      	cmp	r3, #0
 800b494:	d009      	beq.n	800b4aa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b496:	4b13      	ldr	r3, [pc, #76]	; (800b4e4 <HAL_RCC_ClockConfig+0x264>)
 800b498:	689b      	ldr	r3, [r3, #8]
 800b49a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	691b      	ldr	r3, [r3, #16]
 800b4a2:	00db      	lsls	r3, r3, #3
 800b4a4:	490f      	ldr	r1, [pc, #60]	; (800b4e4 <HAL_RCC_ClockConfig+0x264>)
 800b4a6:	4313      	orrs	r3, r2
 800b4a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800b4aa:	f000 f825 	bl	800b4f8 <HAL_RCC_GetSysClockFreq>
 800b4ae:	4601      	mov	r1, r0
 800b4b0:	4b0c      	ldr	r3, [pc, #48]	; (800b4e4 <HAL_RCC_ClockConfig+0x264>)
 800b4b2:	689b      	ldr	r3, [r3, #8]
 800b4b4:	091b      	lsrs	r3, r3, #4
 800b4b6:	f003 030f 	and.w	r3, r3, #15
 800b4ba:	4a0c      	ldr	r2, [pc, #48]	; (800b4ec <HAL_RCC_ClockConfig+0x26c>)
 800b4bc:	5cd3      	ldrb	r3, [r2, r3]
 800b4be:	f003 031f 	and.w	r3, r3, #31
 800b4c2:	fa21 f303 	lsr.w	r3, r1, r3
 800b4c6:	4a0a      	ldr	r2, [pc, #40]	; (800b4f0 <HAL_RCC_ClockConfig+0x270>)
 800b4c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800b4ca:	4b0a      	ldr	r3, [pc, #40]	; (800b4f4 <HAL_RCC_ClockConfig+0x274>)
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	f7fc fdcc 	bl	800806c <HAL_InitTick>
 800b4d4:	4603      	mov	r3, r0
}
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	3718      	adds	r7, #24
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	bd80      	pop	{r7, pc}
 800b4de:	bf00      	nop
 800b4e0:	40022000 	.word	0x40022000
 800b4e4:	40021000 	.word	0x40021000
 800b4e8:	04c4b400 	.word	0x04c4b400
 800b4ec:	08011d48 	.word	0x08011d48
 800b4f0:	20000ca4 	.word	0x20000ca4
 800b4f4:	20000ca8 	.word	0x20000ca8

0800b4f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b4f8:	b480      	push	{r7}
 800b4fa:	b087      	sub	sp, #28
 800b4fc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800b4fe:	4b2c      	ldr	r3, [pc, #176]	; (800b5b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b500:	689b      	ldr	r3, [r3, #8]
 800b502:	f003 030c 	and.w	r3, r3, #12
 800b506:	2b04      	cmp	r3, #4
 800b508:	d102      	bne.n	800b510 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800b50a:	4b2a      	ldr	r3, [pc, #168]	; (800b5b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800b50c:	613b      	str	r3, [r7, #16]
 800b50e:	e047      	b.n	800b5a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800b510:	4b27      	ldr	r3, [pc, #156]	; (800b5b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b512:	689b      	ldr	r3, [r3, #8]
 800b514:	f003 030c 	and.w	r3, r3, #12
 800b518:	2b08      	cmp	r3, #8
 800b51a:	d102      	bne.n	800b522 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800b51c:	4b26      	ldr	r3, [pc, #152]	; (800b5b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800b51e:	613b      	str	r3, [r7, #16]
 800b520:	e03e      	b.n	800b5a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800b522:	4b23      	ldr	r3, [pc, #140]	; (800b5b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b524:	689b      	ldr	r3, [r3, #8]
 800b526:	f003 030c 	and.w	r3, r3, #12
 800b52a:	2b0c      	cmp	r3, #12
 800b52c:	d136      	bne.n	800b59c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b52e:	4b20      	ldr	r3, [pc, #128]	; (800b5b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b530:	68db      	ldr	r3, [r3, #12]
 800b532:	f003 0303 	and.w	r3, r3, #3
 800b536:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b538:	4b1d      	ldr	r3, [pc, #116]	; (800b5b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b53a:	68db      	ldr	r3, [r3, #12]
 800b53c:	091b      	lsrs	r3, r3, #4
 800b53e:	f003 030f 	and.w	r3, r3, #15
 800b542:	3301      	adds	r3, #1
 800b544:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	2b03      	cmp	r3, #3
 800b54a:	d10c      	bne.n	800b566 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b54c:	4a1a      	ldr	r2, [pc, #104]	; (800b5b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800b54e:	68bb      	ldr	r3, [r7, #8]
 800b550:	fbb2 f3f3 	udiv	r3, r2, r3
 800b554:	4a16      	ldr	r2, [pc, #88]	; (800b5b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b556:	68d2      	ldr	r2, [r2, #12]
 800b558:	0a12      	lsrs	r2, r2, #8
 800b55a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b55e:	fb02 f303 	mul.w	r3, r2, r3
 800b562:	617b      	str	r3, [r7, #20]
      break;
 800b564:	e00c      	b.n	800b580 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b566:	4a13      	ldr	r2, [pc, #76]	; (800b5b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800b568:	68bb      	ldr	r3, [r7, #8]
 800b56a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b56e:	4a10      	ldr	r2, [pc, #64]	; (800b5b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b570:	68d2      	ldr	r2, [r2, #12]
 800b572:	0a12      	lsrs	r2, r2, #8
 800b574:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b578:	fb02 f303 	mul.w	r3, r2, r3
 800b57c:	617b      	str	r3, [r7, #20]
      break;
 800b57e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800b580:	4b0b      	ldr	r3, [pc, #44]	; (800b5b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b582:	68db      	ldr	r3, [r3, #12]
 800b584:	0e5b      	lsrs	r3, r3, #25
 800b586:	f003 0303 	and.w	r3, r3, #3
 800b58a:	3301      	adds	r3, #1
 800b58c:	005b      	lsls	r3, r3, #1
 800b58e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800b590:	697a      	ldr	r2, [r7, #20]
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	fbb2 f3f3 	udiv	r3, r2, r3
 800b598:	613b      	str	r3, [r7, #16]
 800b59a:	e001      	b.n	800b5a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800b59c:	2300      	movs	r3, #0
 800b59e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800b5a0:	693b      	ldr	r3, [r7, #16]
}
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	371c      	adds	r7, #28
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ac:	4770      	bx	lr
 800b5ae:	bf00      	nop
 800b5b0:	40021000 	.word	0x40021000
 800b5b4:	00f42400 	.word	0x00f42400
 800b5b8:	007a1200 	.word	0x007a1200

0800b5bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b5bc:	b480      	push	{r7}
 800b5be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b5c0:	4b03      	ldr	r3, [pc, #12]	; (800b5d0 <HAL_RCC_GetHCLKFreq+0x14>)
 800b5c2:	681b      	ldr	r3, [r3, #0]
}
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5cc:	4770      	bx	lr
 800b5ce:	bf00      	nop
 800b5d0:	20000ca4 	.word	0x20000ca4

0800b5d4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800b5d4:	b480      	push	{r7}
 800b5d6:	b087      	sub	sp, #28
 800b5d8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b5da:	4b1e      	ldr	r3, [pc, #120]	; (800b654 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b5dc:	68db      	ldr	r3, [r3, #12]
 800b5de:	f003 0303 	and.w	r3, r3, #3
 800b5e2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b5e4:	4b1b      	ldr	r3, [pc, #108]	; (800b654 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b5e6:	68db      	ldr	r3, [r3, #12]
 800b5e8:	091b      	lsrs	r3, r3, #4
 800b5ea:	f003 030f 	and.w	r3, r3, #15
 800b5ee:	3301      	adds	r3, #1
 800b5f0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800b5f2:	693b      	ldr	r3, [r7, #16]
 800b5f4:	2b03      	cmp	r3, #3
 800b5f6:	d10c      	bne.n	800b612 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b5f8:	4a17      	ldr	r2, [pc, #92]	; (800b658 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b600:	4a14      	ldr	r2, [pc, #80]	; (800b654 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b602:	68d2      	ldr	r2, [r2, #12]
 800b604:	0a12      	lsrs	r2, r2, #8
 800b606:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b60a:	fb02 f303 	mul.w	r3, r2, r3
 800b60e:	617b      	str	r3, [r7, #20]
    break;
 800b610:	e00c      	b.n	800b62c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b612:	4a12      	ldr	r2, [pc, #72]	; (800b65c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	fbb2 f3f3 	udiv	r3, r2, r3
 800b61a:	4a0e      	ldr	r2, [pc, #56]	; (800b654 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b61c:	68d2      	ldr	r2, [r2, #12]
 800b61e:	0a12      	lsrs	r2, r2, #8
 800b620:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b624:	fb02 f303 	mul.w	r3, r2, r3
 800b628:	617b      	str	r3, [r7, #20]
    break;
 800b62a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800b62c:	4b09      	ldr	r3, [pc, #36]	; (800b654 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b62e:	68db      	ldr	r3, [r3, #12]
 800b630:	0e5b      	lsrs	r3, r3, #25
 800b632:	f003 0303 	and.w	r3, r3, #3
 800b636:	3301      	adds	r3, #1
 800b638:	005b      	lsls	r3, r3, #1
 800b63a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800b63c:	697a      	ldr	r2, [r7, #20]
 800b63e:	68bb      	ldr	r3, [r7, #8]
 800b640:	fbb2 f3f3 	udiv	r3, r2, r3
 800b644:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800b646:	687b      	ldr	r3, [r7, #4]
}
 800b648:	4618      	mov	r0, r3
 800b64a:	371c      	adds	r7, #28
 800b64c:	46bd      	mov	sp, r7
 800b64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b652:	4770      	bx	lr
 800b654:	40021000 	.word	0x40021000
 800b658:	007a1200 	.word	0x007a1200
 800b65c:	00f42400 	.word	0x00f42400

0800b660 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b660:	b580      	push	{r7, lr}
 800b662:	b086      	sub	sp, #24
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b668:	2300      	movs	r3, #0
 800b66a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b66c:	2300      	movs	r3, #0
 800b66e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b678:	2b00      	cmp	r3, #0
 800b67a:	f000 8098 	beq.w	800b7ae <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b67e:	2300      	movs	r3, #0
 800b680:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b682:	4b43      	ldr	r3, [pc, #268]	; (800b790 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d10d      	bne.n	800b6aa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b68e:	4b40      	ldr	r3, [pc, #256]	; (800b790 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b692:	4a3f      	ldr	r2, [pc, #252]	; (800b790 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b694:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b698:	6593      	str	r3, [r2, #88]	; 0x58
 800b69a:	4b3d      	ldr	r3, [pc, #244]	; (800b790 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b69c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b69e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b6a2:	60bb      	str	r3, [r7, #8]
 800b6a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b6a6:	2301      	movs	r3, #1
 800b6a8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b6aa:	4b3a      	ldr	r3, [pc, #232]	; (800b794 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	4a39      	ldr	r2, [pc, #228]	; (800b794 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800b6b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b6b4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b6b6:	f7fc fd25 	bl	8008104 <HAL_GetTick>
 800b6ba:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b6bc:	e009      	b.n	800b6d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b6be:	f7fc fd21 	bl	8008104 <HAL_GetTick>
 800b6c2:	4602      	mov	r2, r0
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	1ad3      	subs	r3, r2, r3
 800b6c8:	2b02      	cmp	r3, #2
 800b6ca:	d902      	bls.n	800b6d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800b6cc:	2303      	movs	r3, #3
 800b6ce:	74fb      	strb	r3, [r7, #19]
        break;
 800b6d0:	e005      	b.n	800b6de <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b6d2:	4b30      	ldr	r3, [pc, #192]	; (800b794 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d0ef      	beq.n	800b6be <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800b6de:	7cfb      	ldrb	r3, [r7, #19]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d159      	bne.n	800b798 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800b6e4:	4b2a      	ldr	r3, [pc, #168]	; (800b790 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b6e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b6ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b6ee:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800b6f0:	697b      	ldr	r3, [r7, #20]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d01e      	beq.n	800b734 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b6fa:	697a      	ldr	r2, [r7, #20]
 800b6fc:	429a      	cmp	r2, r3
 800b6fe:	d019      	beq.n	800b734 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800b700:	4b23      	ldr	r3, [pc, #140]	; (800b790 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b702:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b706:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b70a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b70c:	4b20      	ldr	r3, [pc, #128]	; (800b790 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b70e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b712:	4a1f      	ldr	r2, [pc, #124]	; (800b790 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b714:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b718:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b71c:	4b1c      	ldr	r3, [pc, #112]	; (800b790 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b71e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b722:	4a1b      	ldr	r2, [pc, #108]	; (800b790 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b724:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b728:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800b72c:	4a18      	ldr	r2, [pc, #96]	; (800b790 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b72e:	697b      	ldr	r3, [r7, #20]
 800b730:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800b734:	697b      	ldr	r3, [r7, #20]
 800b736:	f003 0301 	and.w	r3, r3, #1
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d016      	beq.n	800b76c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b73e:	f7fc fce1 	bl	8008104 <HAL_GetTick>
 800b742:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b744:	e00b      	b.n	800b75e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b746:	f7fc fcdd 	bl	8008104 <HAL_GetTick>
 800b74a:	4602      	mov	r2, r0
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	1ad3      	subs	r3, r2, r3
 800b750:	f241 3288 	movw	r2, #5000	; 0x1388
 800b754:	4293      	cmp	r3, r2
 800b756:	d902      	bls.n	800b75e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800b758:	2303      	movs	r3, #3
 800b75a:	74fb      	strb	r3, [r7, #19]
            break;
 800b75c:	e006      	b.n	800b76c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b75e:	4b0c      	ldr	r3, [pc, #48]	; (800b790 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b760:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b764:	f003 0302 	and.w	r3, r3, #2
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d0ec      	beq.n	800b746 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800b76c:	7cfb      	ldrb	r3, [r7, #19]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d10b      	bne.n	800b78a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b772:	4b07      	ldr	r3, [pc, #28]	; (800b790 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b774:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b778:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b780:	4903      	ldr	r1, [pc, #12]	; (800b790 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800b782:	4313      	orrs	r3, r2
 800b784:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800b788:	e008      	b.n	800b79c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b78a:	7cfb      	ldrb	r3, [r7, #19]
 800b78c:	74bb      	strb	r3, [r7, #18]
 800b78e:	e005      	b.n	800b79c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800b790:	40021000 	.word	0x40021000
 800b794:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b798:	7cfb      	ldrb	r3, [r7, #19]
 800b79a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b79c:	7c7b      	ldrb	r3, [r7, #17]
 800b79e:	2b01      	cmp	r3, #1
 800b7a0:	d105      	bne.n	800b7ae <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b7a2:	4baf      	ldr	r3, [pc, #700]	; (800ba60 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b7a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7a6:	4aae      	ldr	r2, [pc, #696]	; (800ba60 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b7a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b7ac:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	f003 0301 	and.w	r3, r3, #1
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d00a      	beq.n	800b7d0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b7ba:	4ba9      	ldr	r3, [pc, #676]	; (800ba60 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b7bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b7c0:	f023 0203 	bic.w	r2, r3, #3
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	685b      	ldr	r3, [r3, #4]
 800b7c8:	49a5      	ldr	r1, [pc, #660]	; (800ba60 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b7ca:	4313      	orrs	r3, r2
 800b7cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	f003 0302 	and.w	r3, r3, #2
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d00a      	beq.n	800b7f2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800b7dc:	4ba0      	ldr	r3, [pc, #640]	; (800ba60 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b7de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b7e2:	f023 020c 	bic.w	r2, r3, #12
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	689b      	ldr	r3, [r3, #8]
 800b7ea:	499d      	ldr	r1, [pc, #628]	; (800ba60 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b7ec:	4313      	orrs	r3, r2
 800b7ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	f003 0304 	and.w	r3, r3, #4
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d00a      	beq.n	800b814 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800b7fe:	4b98      	ldr	r3, [pc, #608]	; (800ba60 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b800:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b804:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	68db      	ldr	r3, [r3, #12]
 800b80c:	4994      	ldr	r1, [pc, #592]	; (800ba60 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b80e:	4313      	orrs	r3, r2
 800b810:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	f003 0308 	and.w	r3, r3, #8
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d00a      	beq.n	800b836 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800b820:	4b8f      	ldr	r3, [pc, #572]	; (800ba60 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b826:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	691b      	ldr	r3, [r3, #16]
 800b82e:	498c      	ldr	r1, [pc, #560]	; (800ba60 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b830:	4313      	orrs	r3, r2
 800b832:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	f003 0310 	and.w	r3, r3, #16
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d00a      	beq.n	800b858 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800b842:	4b87      	ldr	r3, [pc, #540]	; (800ba60 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b844:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b848:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	695b      	ldr	r3, [r3, #20]
 800b850:	4983      	ldr	r1, [pc, #524]	; (800ba60 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b852:	4313      	orrs	r3, r2
 800b854:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	f003 0320 	and.w	r3, r3, #32
 800b860:	2b00      	cmp	r3, #0
 800b862:	d00a      	beq.n	800b87a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b864:	4b7e      	ldr	r3, [pc, #504]	; (800ba60 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b86a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	699b      	ldr	r3, [r3, #24]
 800b872:	497b      	ldr	r1, [pc, #492]	; (800ba60 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b874:	4313      	orrs	r3, r2
 800b876:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b882:	2b00      	cmp	r3, #0
 800b884:	d00a      	beq.n	800b89c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b886:	4b76      	ldr	r3, [pc, #472]	; (800ba60 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b888:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b88c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	69db      	ldr	r3, [r3, #28]
 800b894:	4972      	ldr	r1, [pc, #456]	; (800ba60 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b896:	4313      	orrs	r3, r2
 800b898:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d00a      	beq.n	800b8be <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800b8a8:	4b6d      	ldr	r3, [pc, #436]	; (800ba60 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b8aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b8ae:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	6a1b      	ldr	r3, [r3, #32]
 800b8b6:	496a      	ldr	r1, [pc, #424]	; (800ba60 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b8b8:	4313      	orrs	r3, r2
 800b8ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d00a      	beq.n	800b8e0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b8ca:	4b65      	ldr	r3, [pc, #404]	; (800ba60 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b8cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b8d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8d8:	4961      	ldr	r1, [pc, #388]	; (800ba60 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b8da:	4313      	orrs	r3, r2
 800b8dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d00a      	beq.n	800b902 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b8ec:	4b5c      	ldr	r3, [pc, #368]	; (800ba60 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b8ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b8f2:	f023 0203 	bic.w	r2, r3, #3
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8fa:	4959      	ldr	r1, [pc, #356]	; (800ba60 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b8fc:	4313      	orrs	r3, r2
 800b8fe:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d00a      	beq.n	800b924 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b90e:	4b54      	ldr	r3, [pc, #336]	; (800ba60 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b910:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b914:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b91c:	4950      	ldr	r1, [pc, #320]	; (800ba60 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b91e:	4313      	orrs	r3, r2
 800b920:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d015      	beq.n	800b95c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b930:	4b4b      	ldr	r3, [pc, #300]	; (800ba60 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b936:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b93e:	4948      	ldr	r1, [pc, #288]	; (800ba60 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b940:	4313      	orrs	r3, r2
 800b942:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b94a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b94e:	d105      	bne.n	800b95c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b950:	4b43      	ldr	r3, [pc, #268]	; (800ba60 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b952:	68db      	ldr	r3, [r3, #12]
 800b954:	4a42      	ldr	r2, [pc, #264]	; (800ba60 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b956:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b95a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b964:	2b00      	cmp	r3, #0
 800b966:	d015      	beq.n	800b994 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800b968:	4b3d      	ldr	r3, [pc, #244]	; (800ba60 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b96a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b96e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b976:	493a      	ldr	r1, [pc, #232]	; (800ba60 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b978:	4313      	orrs	r3, r2
 800b97a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b982:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b986:	d105      	bne.n	800b994 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b988:	4b35      	ldr	r3, [pc, #212]	; (800ba60 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b98a:	68db      	ldr	r3, [r3, #12]
 800b98c:	4a34      	ldr	r2, [pc, #208]	; (800ba60 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b98e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b992:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d015      	beq.n	800b9cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b9a0:	4b2f      	ldr	r3, [pc, #188]	; (800ba60 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b9a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b9a6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9ae:	492c      	ldr	r1, [pc, #176]	; (800ba60 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b9b0:	4313      	orrs	r3, r2
 800b9b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9ba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b9be:	d105      	bne.n	800b9cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b9c0:	4b27      	ldr	r3, [pc, #156]	; (800ba60 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b9c2:	68db      	ldr	r3, [r3, #12]
 800b9c4:	4a26      	ldr	r2, [pc, #152]	; (800ba60 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b9c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b9ca:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d015      	beq.n	800ba04 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b9d8:	4b21      	ldr	r3, [pc, #132]	; (800ba60 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b9da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b9de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9e6:	491e      	ldr	r1, [pc, #120]	; (800ba60 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b9e8:	4313      	orrs	r3, r2
 800b9ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b9f6:	d105      	bne.n	800ba04 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b9f8:	4b19      	ldr	r3, [pc, #100]	; (800ba60 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b9fa:	68db      	ldr	r3, [r3, #12]
 800b9fc:	4a18      	ldr	r2, [pc, #96]	; (800ba60 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b9fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ba02:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d015      	beq.n	800ba3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ba10:	4b13      	ldr	r3, [pc, #76]	; (800ba60 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800ba12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba16:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba1e:	4910      	ldr	r1, [pc, #64]	; (800ba60 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800ba20:	4313      	orrs	r3, r2
 800ba22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ba2e:	d105      	bne.n	800ba3c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ba30:	4b0b      	ldr	r3, [pc, #44]	; (800ba60 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800ba32:	68db      	ldr	r3, [r3, #12]
 800ba34:	4a0a      	ldr	r2, [pc, #40]	; (800ba60 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800ba36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ba3a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d018      	beq.n	800ba7a <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800ba48:	4b05      	ldr	r3, [pc, #20]	; (800ba60 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800ba4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba4e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba56:	4902      	ldr	r1, [pc, #8]	; (800ba60 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800ba58:	4313      	orrs	r3, r2
 800ba5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800ba5e:	e001      	b.n	800ba64 <HAL_RCCEx_PeriphCLKConfig+0x404>
 800ba60:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ba6c:	d105      	bne.n	800ba7a <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800ba6e:	4b21      	ldr	r3, [pc, #132]	; (800baf4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800ba70:	68db      	ldr	r3, [r3, #12]
 800ba72:	4a20      	ldr	r2, [pc, #128]	; (800baf4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800ba74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ba78:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d015      	beq.n	800bab2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800ba86:	4b1b      	ldr	r3, [pc, #108]	; (800baf4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800ba88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba8c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ba94:	4917      	ldr	r1, [pc, #92]	; (800baf4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800ba96:	4313      	orrs	r3, r2
 800ba98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800baa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800baa4:	d105      	bne.n	800bab2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800baa6:	4b13      	ldr	r3, [pc, #76]	; (800baf4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800baa8:	68db      	ldr	r3, [r3, #12]
 800baaa:	4a12      	ldr	r2, [pc, #72]	; (800baf4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800baac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bab0:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800baba:	2b00      	cmp	r3, #0
 800babc:	d015      	beq.n	800baea <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800babe:	4b0d      	ldr	r3, [pc, #52]	; (800baf4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800bac0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bac4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bacc:	4909      	ldr	r1, [pc, #36]	; (800baf4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800bace:	4313      	orrs	r3, r2
 800bad0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bad8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800badc:	d105      	bne.n	800baea <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bade:	4b05      	ldr	r3, [pc, #20]	; (800baf4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800bae0:	68db      	ldr	r3, [r3, #12]
 800bae2:	4a04      	ldr	r2, [pc, #16]	; (800baf4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800bae4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bae8:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800baea:	7cbb      	ldrb	r3, [r7, #18]
}
 800baec:	4618      	mov	r0, r3
 800baee:	3718      	adds	r7, #24
 800baf0:	46bd      	mov	sp, r7
 800baf2:	bd80      	pop	{r7, pc}
 800baf4:	40021000 	.word	0x40021000

0800baf8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800baf8:	b580      	push	{r7, lr}
 800bafa:	b084      	sub	sp, #16
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d101      	bne.n	800bb0a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800bb06:	2301      	movs	r3, #1
 800bb08:	e084      	b.n	800bc14 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800bb16:	b2db      	uxtb	r3, r3
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d106      	bne.n	800bb2a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	2200      	movs	r2, #0
 800bb20:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800bb24:	6878      	ldr	r0, [r7, #4]
 800bb26:	f7fb fd2b 	bl	8007580 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	2202      	movs	r2, #2
 800bb2e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	681a      	ldr	r2, [r3, #0]
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bb40:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	68db      	ldr	r3, [r3, #12]
 800bb46:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bb4a:	d902      	bls.n	800bb52 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	60fb      	str	r3, [r7, #12]
 800bb50:	e002      	b.n	800bb58 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800bb52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bb56:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	68db      	ldr	r3, [r3, #12]
 800bb5c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800bb60:	d007      	beq.n	800bb72 <HAL_SPI_Init+0x7a>
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	68db      	ldr	r3, [r3, #12]
 800bb66:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bb6a:	d002      	beq.n	800bb72 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	2200      	movs	r2, #0
 800bb70:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d10b      	bne.n	800bb92 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	68db      	ldr	r3, [r3, #12]
 800bb7e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bb82:	d903      	bls.n	800bb8c <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	2202      	movs	r2, #2
 800bb88:	631a      	str	r2, [r3, #48]	; 0x30
 800bb8a:	e002      	b.n	800bb92 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	2201      	movs	r2, #1
 800bb90:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	685a      	ldr	r2, [r3, #4]
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	689b      	ldr	r3, [r3, #8]
 800bb9a:	431a      	orrs	r2, r3
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	691b      	ldr	r3, [r3, #16]
 800bba0:	431a      	orrs	r2, r3
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	695b      	ldr	r3, [r3, #20]
 800bba6:	431a      	orrs	r2, r3
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	699b      	ldr	r3, [r3, #24]
 800bbac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bbb0:	431a      	orrs	r2, r3
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	69db      	ldr	r3, [r3, #28]
 800bbb6:	431a      	orrs	r2, r3
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	6a1b      	ldr	r3, [r3, #32]
 800bbbc:	ea42 0103 	orr.w	r1, r2, r3
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	430a      	orrs	r2, r1
 800bbca:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	699b      	ldr	r3, [r3, #24]
 800bbd0:	0c1b      	lsrs	r3, r3, #16
 800bbd2:	f003 0204 	and.w	r2, r3, #4
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbda:	431a      	orrs	r2, r3
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbe0:	431a      	orrs	r2, r3
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	68db      	ldr	r3, [r3, #12]
 800bbe6:	ea42 0103 	orr.w	r1, r2, r3
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	68fa      	ldr	r2, [r7, #12]
 800bbf0:	430a      	orrs	r2, r1
 800bbf2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	69da      	ldr	r2, [r3, #28]
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bc02:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	2200      	movs	r2, #0
 800bc08:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	2201      	movs	r2, #1
 800bc0e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800bc12:	2300      	movs	r3, #0
}
 800bc14:	4618      	mov	r0, r3
 800bc16:	3710      	adds	r7, #16
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	bd80      	pop	{r7, pc}

0800bc1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b082      	sub	sp, #8
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d101      	bne.n	800bc2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bc2a:	2301      	movs	r3, #1
 800bc2c:	e049      	b.n	800bcc2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bc34:	b2db      	uxtb	r3, r3
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d106      	bne.n	800bc48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	2200      	movs	r2, #0
 800bc3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bc42:	6878      	ldr	r0, [r7, #4]
 800bc44:	f7fc f914 	bl	8007e70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	2202      	movs	r2, #2
 800bc4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	681a      	ldr	r2, [r3, #0]
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	3304      	adds	r3, #4
 800bc58:	4619      	mov	r1, r3
 800bc5a:	4610      	mov	r0, r2
 800bc5c:	f000 fc38 	bl	800c4d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	2201      	movs	r2, #1
 800bc64:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	2201      	movs	r2, #1
 800bc6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	2201      	movs	r2, #1
 800bc74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	2201      	movs	r2, #1
 800bc7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	2201      	movs	r2, #1
 800bc84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	2201      	movs	r2, #1
 800bc8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	2201      	movs	r2, #1
 800bc94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	2201      	movs	r2, #1
 800bc9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	2201      	movs	r2, #1
 800bca4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	2201      	movs	r2, #1
 800bcac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	2201      	movs	r2, #1
 800bcb4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	2201      	movs	r2, #1
 800bcbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bcc0:	2300      	movs	r3, #0
}
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	3708      	adds	r7, #8
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	bd80      	pop	{r7, pc}
	...

0800bccc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800bccc:	b480      	push	{r7}
 800bcce:	b085      	sub	sp, #20
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bcda:	b2db      	uxtb	r3, r3
 800bcdc:	2b01      	cmp	r3, #1
 800bcde:	d001      	beq.n	800bce4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800bce0:	2301      	movs	r3, #1
 800bce2:	e019      	b.n	800bd18 <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	2202      	movs	r2, #2
 800bce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	689a      	ldr	r2, [r3, #8]
 800bcf2:	4b0c      	ldr	r3, [pc, #48]	; (800bd24 <HAL_TIM_Base_Start+0x58>)
 800bcf4:	4013      	ands	r3, r2
 800bcf6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	2b06      	cmp	r3, #6
 800bcfc:	d00b      	beq.n	800bd16 <HAL_TIM_Base_Start+0x4a>
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd04:	d007      	beq.n	800bd16 <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	681a      	ldr	r2, [r3, #0]
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	f042 0201 	orr.w	r2, r2, #1
 800bd14:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800bd16:	2300      	movs	r3, #0
}
 800bd18:	4618      	mov	r0, r3
 800bd1a:	3714      	adds	r7, #20
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd22:	4770      	bx	lr
 800bd24:	00010007 	.word	0x00010007

0800bd28 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800bd28:	b480      	push	{r7}
 800bd2a:	b083      	sub	sp, #12
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	6a1a      	ldr	r2, [r3, #32]
 800bd36:	f241 1311 	movw	r3, #4369	; 0x1111
 800bd3a:	4013      	ands	r3, r2
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d10f      	bne.n	800bd60 <HAL_TIM_Base_Stop+0x38>
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	6a1a      	ldr	r2, [r3, #32]
 800bd46:	f244 4344 	movw	r3, #17476	; 0x4444
 800bd4a:	4013      	ands	r3, r2
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d107      	bne.n	800bd60 <HAL_TIM_Base_Stop+0x38>
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	681a      	ldr	r2, [r3, #0]
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	f022 0201 	bic.w	r2, r2, #1
 800bd5e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	2201      	movs	r2, #1
 800bd64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800bd68:	2300      	movs	r3, #0
}
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	370c      	adds	r7, #12
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd74:	4770      	bx	lr
	...

0800bd78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bd78:	b480      	push	{r7}
 800bd7a:	b085      	sub	sp, #20
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bd86:	b2db      	uxtb	r3, r3
 800bd88:	2b01      	cmp	r3, #1
 800bd8a:	d001      	beq.n	800bd90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bd8c:	2301      	movs	r3, #1
 800bd8e:	e021      	b.n	800bdd4 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	2202      	movs	r2, #2
 800bd94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	68da      	ldr	r2, [r3, #12]
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	f042 0201 	orr.w	r2, r2, #1
 800bda6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	689a      	ldr	r2, [r3, #8]
 800bdae:	4b0c      	ldr	r3, [pc, #48]	; (800bde0 <HAL_TIM_Base_Start_IT+0x68>)
 800bdb0:	4013      	ands	r3, r2
 800bdb2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	2b06      	cmp	r3, #6
 800bdb8:	d00b      	beq.n	800bdd2 <HAL_TIM_Base_Start_IT+0x5a>
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bdc0:	d007      	beq.n	800bdd2 <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	681a      	ldr	r2, [r3, #0]
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	f042 0201 	orr.w	r2, r2, #1
 800bdd0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800bdd2:	2300      	movs	r3, #0
}
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	3714      	adds	r7, #20
 800bdd8:	46bd      	mov	sp, r7
 800bdda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdde:	4770      	bx	lr
 800bde0:	00010007 	.word	0x00010007

0800bde4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800bde4:	b480      	push	{r7}
 800bde6:	b083      	sub	sp, #12
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	68da      	ldr	r2, [r3, #12]
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	f022 0201 	bic.w	r2, r2, #1
 800bdfa:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	6a1a      	ldr	r2, [r3, #32]
 800be02:	f241 1311 	movw	r3, #4369	; 0x1111
 800be06:	4013      	ands	r3, r2
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d10f      	bne.n	800be2c <HAL_TIM_Base_Stop_IT+0x48>
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	6a1a      	ldr	r2, [r3, #32]
 800be12:	f244 4344 	movw	r3, #17476	; 0x4444
 800be16:	4013      	ands	r3, r2
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d107      	bne.n	800be2c <HAL_TIM_Base_Stop_IT+0x48>
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	681a      	ldr	r2, [r3, #0]
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	f022 0201 	bic.w	r2, r2, #1
 800be2a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	2201      	movs	r2, #1
 800be30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800be34:	2300      	movs	r3, #0
}
 800be36:	4618      	mov	r0, r3
 800be38:	370c      	adds	r7, #12
 800be3a:	46bd      	mov	sp, r7
 800be3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be40:	4770      	bx	lr

0800be42 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800be42:	b580      	push	{r7, lr}
 800be44:	b086      	sub	sp, #24
 800be46:	af00      	add	r7, sp, #0
 800be48:	6078      	str	r0, [r7, #4]
 800be4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d101      	bne.n	800be56 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800be52:	2301      	movs	r3, #1
 800be54:	e097      	b.n	800bf86 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800be5c:	b2db      	uxtb	r3, r3
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d106      	bne.n	800be70 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	2200      	movs	r2, #0
 800be66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800be6a:	6878      	ldr	r0, [r7, #4]
 800be6c:	f7fb ffb4 	bl	8007dd8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	2202      	movs	r2, #2
 800be74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	689b      	ldr	r3, [r3, #8]
 800be7e:	687a      	ldr	r2, [r7, #4]
 800be80:	6812      	ldr	r2, [r2, #0]
 800be82:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800be86:	f023 0307 	bic.w	r3, r3, #7
 800be8a:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	681a      	ldr	r2, [r3, #0]
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	3304      	adds	r3, #4
 800be94:	4619      	mov	r1, r3
 800be96:	4610      	mov	r0, r2
 800be98:	f000 fb1a 	bl	800c4d0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	689b      	ldr	r3, [r3, #8]
 800bea2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	699b      	ldr	r3, [r3, #24]
 800beaa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	6a1b      	ldr	r3, [r3, #32]
 800beb2:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800beb4:	683b      	ldr	r3, [r7, #0]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	697a      	ldr	r2, [r7, #20]
 800beba:	4313      	orrs	r3, r2
 800bebc:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800bebe:	693b      	ldr	r3, [r7, #16]
 800bec0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bec4:	f023 0303 	bic.w	r3, r3, #3
 800bec8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800beca:	683b      	ldr	r3, [r7, #0]
 800becc:	689a      	ldr	r2, [r3, #8]
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	699b      	ldr	r3, [r3, #24]
 800bed2:	021b      	lsls	r3, r3, #8
 800bed4:	4313      	orrs	r3, r2
 800bed6:	693a      	ldr	r2, [r7, #16]
 800bed8:	4313      	orrs	r3, r2
 800beda:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800bedc:	693b      	ldr	r3, [r7, #16]
 800bede:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800bee2:	f023 030c 	bic.w	r3, r3, #12
 800bee6:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800bee8:	693b      	ldr	r3, [r7, #16]
 800beea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800beee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bef2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800bef4:	683b      	ldr	r3, [r7, #0]
 800bef6:	68da      	ldr	r2, [r3, #12]
 800bef8:	683b      	ldr	r3, [r7, #0]
 800befa:	69db      	ldr	r3, [r3, #28]
 800befc:	021b      	lsls	r3, r3, #8
 800befe:	4313      	orrs	r3, r2
 800bf00:	693a      	ldr	r2, [r7, #16]
 800bf02:	4313      	orrs	r3, r2
 800bf04:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800bf06:	683b      	ldr	r3, [r7, #0]
 800bf08:	691b      	ldr	r3, [r3, #16]
 800bf0a:	011a      	lsls	r2, r3, #4
 800bf0c:	683b      	ldr	r3, [r7, #0]
 800bf0e:	6a1b      	ldr	r3, [r3, #32]
 800bf10:	031b      	lsls	r3, r3, #12
 800bf12:	4313      	orrs	r3, r2
 800bf14:	693a      	ldr	r2, [r7, #16]
 800bf16:	4313      	orrs	r3, r2
 800bf18:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800bf20:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800bf28:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800bf2a:	683b      	ldr	r3, [r7, #0]
 800bf2c:	685a      	ldr	r2, [r3, #4]
 800bf2e:	683b      	ldr	r3, [r7, #0]
 800bf30:	695b      	ldr	r3, [r3, #20]
 800bf32:	011b      	lsls	r3, r3, #4
 800bf34:	4313      	orrs	r3, r2
 800bf36:	68fa      	ldr	r2, [r7, #12]
 800bf38:	4313      	orrs	r3, r2
 800bf3a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	697a      	ldr	r2, [r7, #20]
 800bf42:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	693a      	ldr	r2, [r7, #16]
 800bf4a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	68fa      	ldr	r2, [r7, #12]
 800bf52:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	2201      	movs	r2, #1
 800bf58:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	2201      	movs	r2, #1
 800bf60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	2201      	movs	r2, #1
 800bf68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	2201      	movs	r2, #1
 800bf70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	2201      	movs	r2, #1
 800bf78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	2201      	movs	r2, #1
 800bf80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bf84:	2300      	movs	r3, #0
}
 800bf86:	4618      	mov	r0, r3
 800bf88:	3718      	adds	r7, #24
 800bf8a:	46bd      	mov	sp, r7
 800bf8c:	bd80      	pop	{r7, pc}

0800bf8e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bf8e:	b580      	push	{r7, lr}
 800bf90:	b082      	sub	sp, #8
 800bf92:	af00      	add	r7, sp, #0
 800bf94:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	691b      	ldr	r3, [r3, #16]
 800bf9c:	f003 0302 	and.w	r3, r3, #2
 800bfa0:	2b02      	cmp	r3, #2
 800bfa2:	d122      	bne.n	800bfea <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	68db      	ldr	r3, [r3, #12]
 800bfaa:	f003 0302 	and.w	r3, r3, #2
 800bfae:	2b02      	cmp	r3, #2
 800bfb0:	d11b      	bne.n	800bfea <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	f06f 0202 	mvn.w	r2, #2
 800bfba:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	2201      	movs	r2, #1
 800bfc0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	699b      	ldr	r3, [r3, #24]
 800bfc8:	f003 0303 	and.w	r3, r3, #3
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d003      	beq.n	800bfd8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bfd0:	6878      	ldr	r0, [r7, #4]
 800bfd2:	f000 fa5f 	bl	800c494 <HAL_TIM_IC_CaptureCallback>
 800bfd6:	e005      	b.n	800bfe4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bfd8:	6878      	ldr	r0, [r7, #4]
 800bfda:	f000 fa51 	bl	800c480 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bfde:	6878      	ldr	r0, [r7, #4]
 800bfe0:	f000 fa62 	bl	800c4a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	691b      	ldr	r3, [r3, #16]
 800bff0:	f003 0304 	and.w	r3, r3, #4
 800bff4:	2b04      	cmp	r3, #4
 800bff6:	d122      	bne.n	800c03e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	68db      	ldr	r3, [r3, #12]
 800bffe:	f003 0304 	and.w	r3, r3, #4
 800c002:	2b04      	cmp	r3, #4
 800c004:	d11b      	bne.n	800c03e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	f06f 0204 	mvn.w	r2, #4
 800c00e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	2202      	movs	r2, #2
 800c014:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	699b      	ldr	r3, [r3, #24]
 800c01c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c020:	2b00      	cmp	r3, #0
 800c022:	d003      	beq.n	800c02c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c024:	6878      	ldr	r0, [r7, #4]
 800c026:	f000 fa35 	bl	800c494 <HAL_TIM_IC_CaptureCallback>
 800c02a:	e005      	b.n	800c038 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c02c:	6878      	ldr	r0, [r7, #4]
 800c02e:	f000 fa27 	bl	800c480 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c032:	6878      	ldr	r0, [r7, #4]
 800c034:	f000 fa38 	bl	800c4a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	2200      	movs	r2, #0
 800c03c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	691b      	ldr	r3, [r3, #16]
 800c044:	f003 0308 	and.w	r3, r3, #8
 800c048:	2b08      	cmp	r3, #8
 800c04a:	d122      	bne.n	800c092 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	68db      	ldr	r3, [r3, #12]
 800c052:	f003 0308 	and.w	r3, r3, #8
 800c056:	2b08      	cmp	r3, #8
 800c058:	d11b      	bne.n	800c092 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	f06f 0208 	mvn.w	r2, #8
 800c062:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	2204      	movs	r2, #4
 800c068:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	69db      	ldr	r3, [r3, #28]
 800c070:	f003 0303 	and.w	r3, r3, #3
 800c074:	2b00      	cmp	r3, #0
 800c076:	d003      	beq.n	800c080 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c078:	6878      	ldr	r0, [r7, #4]
 800c07a:	f000 fa0b 	bl	800c494 <HAL_TIM_IC_CaptureCallback>
 800c07e:	e005      	b.n	800c08c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c080:	6878      	ldr	r0, [r7, #4]
 800c082:	f000 f9fd 	bl	800c480 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c086:	6878      	ldr	r0, [r7, #4]
 800c088:	f000 fa0e 	bl	800c4a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	2200      	movs	r2, #0
 800c090:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	691b      	ldr	r3, [r3, #16]
 800c098:	f003 0310 	and.w	r3, r3, #16
 800c09c:	2b10      	cmp	r3, #16
 800c09e:	d122      	bne.n	800c0e6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	68db      	ldr	r3, [r3, #12]
 800c0a6:	f003 0310 	and.w	r3, r3, #16
 800c0aa:	2b10      	cmp	r3, #16
 800c0ac:	d11b      	bne.n	800c0e6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	f06f 0210 	mvn.w	r2, #16
 800c0b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	2208      	movs	r2, #8
 800c0bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	69db      	ldr	r3, [r3, #28]
 800c0c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d003      	beq.n	800c0d4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c0cc:	6878      	ldr	r0, [r7, #4]
 800c0ce:	f000 f9e1 	bl	800c494 <HAL_TIM_IC_CaptureCallback>
 800c0d2:	e005      	b.n	800c0e0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c0d4:	6878      	ldr	r0, [r7, #4]
 800c0d6:	f000 f9d3 	bl	800c480 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c0da:	6878      	ldr	r0, [r7, #4]
 800c0dc:	f000 f9e4 	bl	800c4a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	2200      	movs	r2, #0
 800c0e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	691b      	ldr	r3, [r3, #16]
 800c0ec:	f003 0301 	and.w	r3, r3, #1
 800c0f0:	2b01      	cmp	r3, #1
 800c0f2:	d10e      	bne.n	800c112 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	68db      	ldr	r3, [r3, #12]
 800c0fa:	f003 0301 	and.w	r3, r3, #1
 800c0fe:	2b01      	cmp	r3, #1
 800c100:	d107      	bne.n	800c112 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	f06f 0201 	mvn.w	r2, #1
 800c10a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c10c:	6878      	ldr	r0, [r7, #4]
 800c10e:	f000 f9ad 	bl	800c46c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	691b      	ldr	r3, [r3, #16]
 800c118:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c11c:	2b80      	cmp	r3, #128	; 0x80
 800c11e:	d10e      	bne.n	800c13e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	68db      	ldr	r3, [r3, #12]
 800c126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c12a:	2b80      	cmp	r3, #128	; 0x80
 800c12c:	d107      	bne.n	800c13e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c136:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c138:	6878      	ldr	r0, [r7, #4]
 800c13a:	f000 fc5f 	bl	800c9fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	691b      	ldr	r3, [r3, #16]
 800c144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c148:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c14c:	d10e      	bne.n	800c16c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	68db      	ldr	r3, [r3, #12]
 800c154:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c158:	2b80      	cmp	r3, #128	; 0x80
 800c15a:	d107      	bne.n	800c16c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c164:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c166:	6878      	ldr	r0, [r7, #4]
 800c168:	f000 fc52 	bl	800ca10 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	691b      	ldr	r3, [r3, #16]
 800c172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c176:	2b40      	cmp	r3, #64	; 0x40
 800c178:	d10e      	bne.n	800c198 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	68db      	ldr	r3, [r3, #12]
 800c180:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c184:	2b40      	cmp	r3, #64	; 0x40
 800c186:	d107      	bne.n	800c198 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c190:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c192:	6878      	ldr	r0, [r7, #4]
 800c194:	f000 f992 	bl	800c4bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	691b      	ldr	r3, [r3, #16]
 800c19e:	f003 0320 	and.w	r3, r3, #32
 800c1a2:	2b20      	cmp	r3, #32
 800c1a4:	d10e      	bne.n	800c1c4 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	68db      	ldr	r3, [r3, #12]
 800c1ac:	f003 0320 	and.w	r3, r3, #32
 800c1b0:	2b20      	cmp	r3, #32
 800c1b2:	d107      	bne.n	800c1c4 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	f06f 0220 	mvn.w	r2, #32
 800c1bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c1be:	6878      	ldr	r0, [r7, #4]
 800c1c0:	f000 fc12 	bl	800c9e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	691b      	ldr	r3, [r3, #16]
 800c1ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c1ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c1d2:	d10f      	bne.n	800c1f4 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	68db      	ldr	r3, [r3, #12]
 800c1da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c1de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c1e2:	d107      	bne.n	800c1f4 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800c1ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800c1ee:	6878      	ldr	r0, [r7, #4]
 800c1f0:	f000 fc18 	bl	800ca24 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	691b      	ldr	r3, [r3, #16]
 800c1fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c1fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c202:	d10f      	bne.n	800c224 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	68db      	ldr	r3, [r3, #12]
 800c20a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c20e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c212:	d107      	bne.n	800c224 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800c21c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800c21e:	6878      	ldr	r0, [r7, #4]
 800c220:	f000 fc0a 	bl	800ca38 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	691b      	ldr	r3, [r3, #16]
 800c22a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c22e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c232:	d10f      	bne.n	800c254 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	68db      	ldr	r3, [r3, #12]
 800c23a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c23e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c242:	d107      	bne.n	800c254 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800c24c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800c24e:	6878      	ldr	r0, [r7, #4]
 800c250:	f000 fbfc 	bl	800ca4c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	691b      	ldr	r3, [r3, #16]
 800c25a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c25e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c262:	d10f      	bne.n	800c284 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	68db      	ldr	r3, [r3, #12]
 800c26a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c26e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c272:	d107      	bne.n	800c284 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800c27c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800c27e:	6878      	ldr	r0, [r7, #4]
 800c280:	f000 fbee 	bl	800ca60 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c284:	bf00      	nop
 800c286:	3708      	adds	r7, #8
 800c288:	46bd      	mov	sp, r7
 800c28a:	bd80      	pop	{r7, pc}

0800c28c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b084      	sub	sp, #16
 800c290:	af00      	add	r7, sp, #0
 800c292:	6078      	str	r0, [r7, #4]
 800c294:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c29c:	2b01      	cmp	r3, #1
 800c29e:	d101      	bne.n	800c2a4 <HAL_TIM_ConfigClockSource+0x18>
 800c2a0:	2302      	movs	r3, #2
 800c2a2:	e0d2      	b.n	800c44a <HAL_TIM_ConfigClockSource+0x1be>
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	2201      	movs	r2, #1
 800c2a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	2202      	movs	r2, #2
 800c2b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	689b      	ldr	r3, [r3, #8]
 800c2ba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800c2c2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c2c6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c2ce:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	68fa      	ldr	r2, [r7, #12]
 800c2d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c2d8:	683b      	ldr	r3, [r7, #0]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c2e0:	f000 80a9 	beq.w	800c436 <HAL_TIM_ConfigClockSource+0x1aa>
 800c2e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c2e8:	d81a      	bhi.n	800c320 <HAL_TIM_ConfigClockSource+0x94>
 800c2ea:	2b30      	cmp	r3, #48	; 0x30
 800c2ec:	f000 809a 	beq.w	800c424 <HAL_TIM_ConfigClockSource+0x198>
 800c2f0:	2b30      	cmp	r3, #48	; 0x30
 800c2f2:	d809      	bhi.n	800c308 <HAL_TIM_ConfigClockSource+0x7c>
 800c2f4:	2b10      	cmp	r3, #16
 800c2f6:	f000 8095 	beq.w	800c424 <HAL_TIM_ConfigClockSource+0x198>
 800c2fa:	2b20      	cmp	r3, #32
 800c2fc:	f000 8092 	beq.w	800c424 <HAL_TIM_ConfigClockSource+0x198>
 800c300:	2b00      	cmp	r3, #0
 800c302:	f000 808f 	beq.w	800c424 <HAL_TIM_ConfigClockSource+0x198>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800c306:	e097      	b.n	800c438 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800c308:	2b50      	cmp	r3, #80	; 0x50
 800c30a:	d05b      	beq.n	800c3c4 <HAL_TIM_ConfigClockSource+0x138>
 800c30c:	2b50      	cmp	r3, #80	; 0x50
 800c30e:	d802      	bhi.n	800c316 <HAL_TIM_ConfigClockSource+0x8a>
 800c310:	2b40      	cmp	r3, #64	; 0x40
 800c312:	d077      	beq.n	800c404 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800c314:	e090      	b.n	800c438 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800c316:	2b60      	cmp	r3, #96	; 0x60
 800c318:	d064      	beq.n	800c3e4 <HAL_TIM_ConfigClockSource+0x158>
 800c31a:	2b70      	cmp	r3, #112	; 0x70
 800c31c:	d028      	beq.n	800c370 <HAL_TIM_ConfigClockSource+0xe4>
      break;
 800c31e:	e08b      	b.n	800c438 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800c320:	4a4c      	ldr	r2, [pc, #304]	; (800c454 <HAL_TIM_ConfigClockSource+0x1c8>)
 800c322:	4293      	cmp	r3, r2
 800c324:	d07e      	beq.n	800c424 <HAL_TIM_ConfigClockSource+0x198>
 800c326:	4a4b      	ldr	r2, [pc, #300]	; (800c454 <HAL_TIM_ConfigClockSource+0x1c8>)
 800c328:	4293      	cmp	r3, r2
 800c32a:	d810      	bhi.n	800c34e <HAL_TIM_ConfigClockSource+0xc2>
 800c32c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c330:	d078      	beq.n	800c424 <HAL_TIM_ConfigClockSource+0x198>
 800c332:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c336:	d803      	bhi.n	800c340 <HAL_TIM_ConfigClockSource+0xb4>
 800c338:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c33c:	d02f      	beq.n	800c39e <HAL_TIM_ConfigClockSource+0x112>
      break;
 800c33e:	e07b      	b.n	800c438 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800c340:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c344:	d06e      	beq.n	800c424 <HAL_TIM_ConfigClockSource+0x198>
 800c346:	4a44      	ldr	r2, [pc, #272]	; (800c458 <HAL_TIM_ConfigClockSource+0x1cc>)
 800c348:	4293      	cmp	r3, r2
 800c34a:	d06b      	beq.n	800c424 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800c34c:	e074      	b.n	800c438 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800c34e:	4a43      	ldr	r2, [pc, #268]	; (800c45c <HAL_TIM_ConfigClockSource+0x1d0>)
 800c350:	4293      	cmp	r3, r2
 800c352:	d067      	beq.n	800c424 <HAL_TIM_ConfigClockSource+0x198>
 800c354:	4a41      	ldr	r2, [pc, #260]	; (800c45c <HAL_TIM_ConfigClockSource+0x1d0>)
 800c356:	4293      	cmp	r3, r2
 800c358:	d803      	bhi.n	800c362 <HAL_TIM_ConfigClockSource+0xd6>
 800c35a:	4a41      	ldr	r2, [pc, #260]	; (800c460 <HAL_TIM_ConfigClockSource+0x1d4>)
 800c35c:	4293      	cmp	r3, r2
 800c35e:	d061      	beq.n	800c424 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800c360:	e06a      	b.n	800c438 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800c362:	4a40      	ldr	r2, [pc, #256]	; (800c464 <HAL_TIM_ConfigClockSource+0x1d8>)
 800c364:	4293      	cmp	r3, r2
 800c366:	d05d      	beq.n	800c424 <HAL_TIM_ConfigClockSource+0x198>
 800c368:	4a3f      	ldr	r2, [pc, #252]	; (800c468 <HAL_TIM_ConfigClockSource+0x1dc>)
 800c36a:	4293      	cmp	r3, r2
 800c36c:	d05a      	beq.n	800c424 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800c36e:	e063      	b.n	800c438 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	6818      	ldr	r0, [r3, #0]
 800c374:	683b      	ldr	r3, [r7, #0]
 800c376:	6899      	ldr	r1, [r3, #8]
 800c378:	683b      	ldr	r3, [r7, #0]
 800c37a:	685a      	ldr	r2, [r3, #4]
 800c37c:	683b      	ldr	r3, [r7, #0]
 800c37e:	68db      	ldr	r3, [r3, #12]
 800c380:	f000 f9ca 	bl	800c718 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	689b      	ldr	r3, [r3, #8]
 800c38a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c392:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	68fa      	ldr	r2, [r7, #12]
 800c39a:	609a      	str	r2, [r3, #8]
      break;
 800c39c:	e04c      	b.n	800c438 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	6818      	ldr	r0, [r3, #0]
 800c3a2:	683b      	ldr	r3, [r7, #0]
 800c3a4:	6899      	ldr	r1, [r3, #8]
 800c3a6:	683b      	ldr	r3, [r7, #0]
 800c3a8:	685a      	ldr	r2, [r3, #4]
 800c3aa:	683b      	ldr	r3, [r7, #0]
 800c3ac:	68db      	ldr	r3, [r3, #12]
 800c3ae:	f000 f9b3 	bl	800c718 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	689a      	ldr	r2, [r3, #8]
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c3c0:	609a      	str	r2, [r3, #8]
      break;
 800c3c2:	e039      	b.n	800c438 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	6818      	ldr	r0, [r3, #0]
 800c3c8:	683b      	ldr	r3, [r7, #0]
 800c3ca:	6859      	ldr	r1, [r3, #4]
 800c3cc:	683b      	ldr	r3, [r7, #0]
 800c3ce:	68db      	ldr	r3, [r3, #12]
 800c3d0:	461a      	mov	r2, r3
 800c3d2:	f000 f925 	bl	800c620 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	2150      	movs	r1, #80	; 0x50
 800c3dc:	4618      	mov	r0, r3
 800c3de:	f000 f97e 	bl	800c6de <TIM_ITRx_SetConfig>
      break;
 800c3e2:	e029      	b.n	800c438 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	6818      	ldr	r0, [r3, #0]
 800c3e8:	683b      	ldr	r3, [r7, #0]
 800c3ea:	6859      	ldr	r1, [r3, #4]
 800c3ec:	683b      	ldr	r3, [r7, #0]
 800c3ee:	68db      	ldr	r3, [r3, #12]
 800c3f0:	461a      	mov	r2, r3
 800c3f2:	f000 f944 	bl	800c67e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	2160      	movs	r1, #96	; 0x60
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	f000 f96e 	bl	800c6de <TIM_ITRx_SetConfig>
      break;
 800c402:	e019      	b.n	800c438 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	6818      	ldr	r0, [r3, #0]
 800c408:	683b      	ldr	r3, [r7, #0]
 800c40a:	6859      	ldr	r1, [r3, #4]
 800c40c:	683b      	ldr	r3, [r7, #0]
 800c40e:	68db      	ldr	r3, [r3, #12]
 800c410:	461a      	mov	r2, r3
 800c412:	f000 f905 	bl	800c620 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	2140      	movs	r1, #64	; 0x40
 800c41c:	4618      	mov	r0, r3
 800c41e:	f000 f95e 	bl	800c6de <TIM_ITRx_SetConfig>
      break;
 800c422:	e009      	b.n	800c438 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	681a      	ldr	r2, [r3, #0]
 800c428:	683b      	ldr	r3, [r7, #0]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	4619      	mov	r1, r3
 800c42e:	4610      	mov	r0, r2
 800c430:	f000 f955 	bl	800c6de <TIM_ITRx_SetConfig>
      break;
 800c434:	e000      	b.n	800c438 <HAL_TIM_ConfigClockSource+0x1ac>
      break;
 800c436:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	2201      	movs	r2, #1
 800c43c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	2200      	movs	r2, #0
 800c444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c448:	2300      	movs	r3, #0
}
 800c44a:	4618      	mov	r0, r3
 800c44c:	3710      	adds	r7, #16
 800c44e:	46bd      	mov	sp, r7
 800c450:	bd80      	pop	{r7, pc}
 800c452:	bf00      	nop
 800c454:	00100030 	.word	0x00100030
 800c458:	00100020 	.word	0x00100020
 800c45c:	00100050 	.word	0x00100050
 800c460:	00100040 	.word	0x00100040
 800c464:	00100060 	.word	0x00100060
 800c468:	00100070 	.word	0x00100070

0800c46c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c46c:	b480      	push	{r7}
 800c46e:	b083      	sub	sp, #12
 800c470:	af00      	add	r7, sp, #0
 800c472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800c474:	bf00      	nop
 800c476:	370c      	adds	r7, #12
 800c478:	46bd      	mov	sp, r7
 800c47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c47e:	4770      	bx	lr

0800c480 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c480:	b480      	push	{r7}
 800c482:	b083      	sub	sp, #12
 800c484:	af00      	add	r7, sp, #0
 800c486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c488:	bf00      	nop
 800c48a:	370c      	adds	r7, #12
 800c48c:	46bd      	mov	sp, r7
 800c48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c492:	4770      	bx	lr

0800c494 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c494:	b480      	push	{r7}
 800c496:	b083      	sub	sp, #12
 800c498:	af00      	add	r7, sp, #0
 800c49a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c49c:	bf00      	nop
 800c49e:	370c      	adds	r7, #12
 800c4a0:	46bd      	mov	sp, r7
 800c4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a6:	4770      	bx	lr

0800c4a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c4a8:	b480      	push	{r7}
 800c4aa:	b083      	sub	sp, #12
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c4b0:	bf00      	nop
 800c4b2:	370c      	adds	r7, #12
 800c4b4:	46bd      	mov	sp, r7
 800c4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ba:	4770      	bx	lr

0800c4bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c4bc:	b480      	push	{r7}
 800c4be:	b083      	sub	sp, #12
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c4c4:	bf00      	nop
 800c4c6:	370c      	adds	r7, #12
 800c4c8:	46bd      	mov	sp, r7
 800c4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ce:	4770      	bx	lr

0800c4d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c4d0:	b480      	push	{r7}
 800c4d2:	b085      	sub	sp, #20
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	6078      	str	r0, [r7, #4]
 800c4d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	4a46      	ldr	r2, [pc, #280]	; (800c5fc <TIM_Base_SetConfig+0x12c>)
 800c4e4:	4293      	cmp	r3, r2
 800c4e6:	d017      	beq.n	800c518 <TIM_Base_SetConfig+0x48>
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c4ee:	d013      	beq.n	800c518 <TIM_Base_SetConfig+0x48>
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	4a43      	ldr	r2, [pc, #268]	; (800c600 <TIM_Base_SetConfig+0x130>)
 800c4f4:	4293      	cmp	r3, r2
 800c4f6:	d00f      	beq.n	800c518 <TIM_Base_SetConfig+0x48>
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	4a42      	ldr	r2, [pc, #264]	; (800c604 <TIM_Base_SetConfig+0x134>)
 800c4fc:	4293      	cmp	r3, r2
 800c4fe:	d00b      	beq.n	800c518 <TIM_Base_SetConfig+0x48>
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	4a41      	ldr	r2, [pc, #260]	; (800c608 <TIM_Base_SetConfig+0x138>)
 800c504:	4293      	cmp	r3, r2
 800c506:	d007      	beq.n	800c518 <TIM_Base_SetConfig+0x48>
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	4a40      	ldr	r2, [pc, #256]	; (800c60c <TIM_Base_SetConfig+0x13c>)
 800c50c:	4293      	cmp	r3, r2
 800c50e:	d003      	beq.n	800c518 <TIM_Base_SetConfig+0x48>
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	4a3f      	ldr	r2, [pc, #252]	; (800c610 <TIM_Base_SetConfig+0x140>)
 800c514:	4293      	cmp	r3, r2
 800c516:	d108      	bne.n	800c52a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c51e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c520:	683b      	ldr	r3, [r7, #0]
 800c522:	685b      	ldr	r3, [r3, #4]
 800c524:	68fa      	ldr	r2, [r7, #12]
 800c526:	4313      	orrs	r3, r2
 800c528:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	4a33      	ldr	r2, [pc, #204]	; (800c5fc <TIM_Base_SetConfig+0x12c>)
 800c52e:	4293      	cmp	r3, r2
 800c530:	d023      	beq.n	800c57a <TIM_Base_SetConfig+0xaa>
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c538:	d01f      	beq.n	800c57a <TIM_Base_SetConfig+0xaa>
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	4a30      	ldr	r2, [pc, #192]	; (800c600 <TIM_Base_SetConfig+0x130>)
 800c53e:	4293      	cmp	r3, r2
 800c540:	d01b      	beq.n	800c57a <TIM_Base_SetConfig+0xaa>
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	4a2f      	ldr	r2, [pc, #188]	; (800c604 <TIM_Base_SetConfig+0x134>)
 800c546:	4293      	cmp	r3, r2
 800c548:	d017      	beq.n	800c57a <TIM_Base_SetConfig+0xaa>
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	4a2e      	ldr	r2, [pc, #184]	; (800c608 <TIM_Base_SetConfig+0x138>)
 800c54e:	4293      	cmp	r3, r2
 800c550:	d013      	beq.n	800c57a <TIM_Base_SetConfig+0xaa>
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	4a2d      	ldr	r2, [pc, #180]	; (800c60c <TIM_Base_SetConfig+0x13c>)
 800c556:	4293      	cmp	r3, r2
 800c558:	d00f      	beq.n	800c57a <TIM_Base_SetConfig+0xaa>
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	4a2d      	ldr	r2, [pc, #180]	; (800c614 <TIM_Base_SetConfig+0x144>)
 800c55e:	4293      	cmp	r3, r2
 800c560:	d00b      	beq.n	800c57a <TIM_Base_SetConfig+0xaa>
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	4a2c      	ldr	r2, [pc, #176]	; (800c618 <TIM_Base_SetConfig+0x148>)
 800c566:	4293      	cmp	r3, r2
 800c568:	d007      	beq.n	800c57a <TIM_Base_SetConfig+0xaa>
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	4a2b      	ldr	r2, [pc, #172]	; (800c61c <TIM_Base_SetConfig+0x14c>)
 800c56e:	4293      	cmp	r3, r2
 800c570:	d003      	beq.n	800c57a <TIM_Base_SetConfig+0xaa>
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	4a26      	ldr	r2, [pc, #152]	; (800c610 <TIM_Base_SetConfig+0x140>)
 800c576:	4293      	cmp	r3, r2
 800c578:	d108      	bne.n	800c58c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c580:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c582:	683b      	ldr	r3, [r7, #0]
 800c584:	68db      	ldr	r3, [r3, #12]
 800c586:	68fa      	ldr	r2, [r7, #12]
 800c588:	4313      	orrs	r3, r2
 800c58a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c592:	683b      	ldr	r3, [r7, #0]
 800c594:	695b      	ldr	r3, [r3, #20]
 800c596:	4313      	orrs	r3, r2
 800c598:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	68fa      	ldr	r2, [r7, #12]
 800c59e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c5a0:	683b      	ldr	r3, [r7, #0]
 800c5a2:	689a      	ldr	r2, [r3, #8]
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c5a8:	683b      	ldr	r3, [r7, #0]
 800c5aa:	681a      	ldr	r2, [r3, #0]
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	4a12      	ldr	r2, [pc, #72]	; (800c5fc <TIM_Base_SetConfig+0x12c>)
 800c5b4:	4293      	cmp	r3, r2
 800c5b6:	d013      	beq.n	800c5e0 <TIM_Base_SetConfig+0x110>
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	4a14      	ldr	r2, [pc, #80]	; (800c60c <TIM_Base_SetConfig+0x13c>)
 800c5bc:	4293      	cmp	r3, r2
 800c5be:	d00f      	beq.n	800c5e0 <TIM_Base_SetConfig+0x110>
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	4a14      	ldr	r2, [pc, #80]	; (800c614 <TIM_Base_SetConfig+0x144>)
 800c5c4:	4293      	cmp	r3, r2
 800c5c6:	d00b      	beq.n	800c5e0 <TIM_Base_SetConfig+0x110>
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	4a13      	ldr	r2, [pc, #76]	; (800c618 <TIM_Base_SetConfig+0x148>)
 800c5cc:	4293      	cmp	r3, r2
 800c5ce:	d007      	beq.n	800c5e0 <TIM_Base_SetConfig+0x110>
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	4a12      	ldr	r2, [pc, #72]	; (800c61c <TIM_Base_SetConfig+0x14c>)
 800c5d4:	4293      	cmp	r3, r2
 800c5d6:	d003      	beq.n	800c5e0 <TIM_Base_SetConfig+0x110>
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	4a0d      	ldr	r2, [pc, #52]	; (800c610 <TIM_Base_SetConfig+0x140>)
 800c5dc:	4293      	cmp	r3, r2
 800c5de:	d103      	bne.n	800c5e8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c5e0:	683b      	ldr	r3, [r7, #0]
 800c5e2:	691a      	ldr	r2, [r3, #16]
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	2201      	movs	r2, #1
 800c5ec:	615a      	str	r2, [r3, #20]
}
 800c5ee:	bf00      	nop
 800c5f0:	3714      	adds	r7, #20
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f8:	4770      	bx	lr
 800c5fa:	bf00      	nop
 800c5fc:	40012c00 	.word	0x40012c00
 800c600:	40000400 	.word	0x40000400
 800c604:	40000800 	.word	0x40000800
 800c608:	40000c00 	.word	0x40000c00
 800c60c:	40013400 	.word	0x40013400
 800c610:	40015000 	.word	0x40015000
 800c614:	40014000 	.word	0x40014000
 800c618:	40014400 	.word	0x40014400
 800c61c:	40014800 	.word	0x40014800

0800c620 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c620:	b480      	push	{r7}
 800c622:	b087      	sub	sp, #28
 800c624:	af00      	add	r7, sp, #0
 800c626:	60f8      	str	r0, [r7, #12]
 800c628:	60b9      	str	r1, [r7, #8]
 800c62a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	6a1b      	ldr	r3, [r3, #32]
 800c630:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	6a1b      	ldr	r3, [r3, #32]
 800c636:	f023 0201 	bic.w	r2, r3, #1
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	699b      	ldr	r3, [r3, #24]
 800c642:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c644:	693b      	ldr	r3, [r7, #16]
 800c646:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c64a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	011b      	lsls	r3, r3, #4
 800c650:	693a      	ldr	r2, [r7, #16]
 800c652:	4313      	orrs	r3, r2
 800c654:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c656:	697b      	ldr	r3, [r7, #20]
 800c658:	f023 030a 	bic.w	r3, r3, #10
 800c65c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c65e:	697a      	ldr	r2, [r7, #20]
 800c660:	68bb      	ldr	r3, [r7, #8]
 800c662:	4313      	orrs	r3, r2
 800c664:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	693a      	ldr	r2, [r7, #16]
 800c66a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	697a      	ldr	r2, [r7, #20]
 800c670:	621a      	str	r2, [r3, #32]
}
 800c672:	bf00      	nop
 800c674:	371c      	adds	r7, #28
 800c676:	46bd      	mov	sp, r7
 800c678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c67c:	4770      	bx	lr

0800c67e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c67e:	b480      	push	{r7}
 800c680:	b087      	sub	sp, #28
 800c682:	af00      	add	r7, sp, #0
 800c684:	60f8      	str	r0, [r7, #12]
 800c686:	60b9      	str	r1, [r7, #8]
 800c688:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	6a1b      	ldr	r3, [r3, #32]
 800c68e:	f023 0210 	bic.w	r2, r3, #16
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	699b      	ldr	r3, [r3, #24]
 800c69a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	6a1b      	ldr	r3, [r3, #32]
 800c6a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c6a2:	697b      	ldr	r3, [r7, #20]
 800c6a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c6a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	031b      	lsls	r3, r3, #12
 800c6ae:	697a      	ldr	r2, [r7, #20]
 800c6b0:	4313      	orrs	r3, r2
 800c6b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c6b4:	693b      	ldr	r3, [r7, #16]
 800c6b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c6ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c6bc:	68bb      	ldr	r3, [r7, #8]
 800c6be:	011b      	lsls	r3, r3, #4
 800c6c0:	693a      	ldr	r2, [r7, #16]
 800c6c2:	4313      	orrs	r3, r2
 800c6c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	697a      	ldr	r2, [r7, #20]
 800c6ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	693a      	ldr	r2, [r7, #16]
 800c6d0:	621a      	str	r2, [r3, #32]
}
 800c6d2:	bf00      	nop
 800c6d4:	371c      	adds	r7, #28
 800c6d6:	46bd      	mov	sp, r7
 800c6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6dc:	4770      	bx	lr

0800c6de <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c6de:	b480      	push	{r7}
 800c6e0:	b085      	sub	sp, #20
 800c6e2:	af00      	add	r7, sp, #0
 800c6e4:	6078      	str	r0, [r7, #4]
 800c6e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	689b      	ldr	r3, [r3, #8]
 800c6ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800c6f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c6f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c6fa:	683a      	ldr	r2, [r7, #0]
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	4313      	orrs	r3, r2
 800c700:	f043 0307 	orr.w	r3, r3, #7
 800c704:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	68fa      	ldr	r2, [r7, #12]
 800c70a:	609a      	str	r2, [r3, #8]
}
 800c70c:	bf00      	nop
 800c70e:	3714      	adds	r7, #20
 800c710:	46bd      	mov	sp, r7
 800c712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c716:	4770      	bx	lr

0800c718 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c718:	b480      	push	{r7}
 800c71a:	b087      	sub	sp, #28
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	60f8      	str	r0, [r7, #12]
 800c720:	60b9      	str	r1, [r7, #8]
 800c722:	607a      	str	r2, [r7, #4]
 800c724:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	689b      	ldr	r3, [r3, #8]
 800c72a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c72c:	697b      	ldr	r3, [r7, #20]
 800c72e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c732:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c734:	683b      	ldr	r3, [r7, #0]
 800c736:	021a      	lsls	r2, r3, #8
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	431a      	orrs	r2, r3
 800c73c:	68bb      	ldr	r3, [r7, #8]
 800c73e:	4313      	orrs	r3, r2
 800c740:	697a      	ldr	r2, [r7, #20]
 800c742:	4313      	orrs	r3, r2
 800c744:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	697a      	ldr	r2, [r7, #20]
 800c74a:	609a      	str	r2, [r3, #8]
}
 800c74c:	bf00      	nop
 800c74e:	371c      	adds	r7, #28
 800c750:	46bd      	mov	sp, r7
 800c752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c756:	4770      	bx	lr

0800c758 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c758:	b480      	push	{r7}
 800c75a:	b085      	sub	sp, #20
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	6078      	str	r0, [r7, #4]
 800c760:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c768:	2b01      	cmp	r3, #1
 800c76a:	d101      	bne.n	800c770 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c76c:	2302      	movs	r3, #2
 800c76e:	e074      	b.n	800c85a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	2201      	movs	r2, #1
 800c774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	2202      	movs	r2, #2
 800c77c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	685b      	ldr	r3, [r3, #4]
 800c786:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	689b      	ldr	r3, [r3, #8]
 800c78e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	4a34      	ldr	r2, [pc, #208]	; (800c868 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c796:	4293      	cmp	r3, r2
 800c798:	d009      	beq.n	800c7ae <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	4a33      	ldr	r2, [pc, #204]	; (800c86c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c7a0:	4293      	cmp	r3, r2
 800c7a2:	d004      	beq.n	800c7ae <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	4a31      	ldr	r2, [pc, #196]	; (800c870 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c7aa:	4293      	cmp	r3, r2
 800c7ac:	d108      	bne.n	800c7c0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c7b4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c7b6:	683b      	ldr	r3, [r7, #0]
 800c7b8:	685b      	ldr	r3, [r3, #4]
 800c7ba:	68fa      	ldr	r2, [r7, #12]
 800c7bc:	4313      	orrs	r3, r2
 800c7be:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800c7c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c7ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c7cc:	683b      	ldr	r3, [r7, #0]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	68fa      	ldr	r2, [r7, #12]
 800c7d2:	4313      	orrs	r3, r2
 800c7d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	68fa      	ldr	r2, [r7, #12]
 800c7dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	4a21      	ldr	r2, [pc, #132]	; (800c868 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c7e4:	4293      	cmp	r3, r2
 800c7e6:	d022      	beq.n	800c82e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c7f0:	d01d      	beq.n	800c82e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	4a1f      	ldr	r2, [pc, #124]	; (800c874 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800c7f8:	4293      	cmp	r3, r2
 800c7fa:	d018      	beq.n	800c82e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	4a1d      	ldr	r2, [pc, #116]	; (800c878 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800c802:	4293      	cmp	r3, r2
 800c804:	d013      	beq.n	800c82e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	4a1c      	ldr	r2, [pc, #112]	; (800c87c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800c80c:	4293      	cmp	r3, r2
 800c80e:	d00e      	beq.n	800c82e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	4a15      	ldr	r2, [pc, #84]	; (800c86c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c816:	4293      	cmp	r3, r2
 800c818:	d009      	beq.n	800c82e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	4a18      	ldr	r2, [pc, #96]	; (800c880 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800c820:	4293      	cmp	r3, r2
 800c822:	d004      	beq.n	800c82e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	4a11      	ldr	r2, [pc, #68]	; (800c870 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c82a:	4293      	cmp	r3, r2
 800c82c:	d10c      	bne.n	800c848 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c82e:	68bb      	ldr	r3, [r7, #8]
 800c830:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c834:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c836:	683b      	ldr	r3, [r7, #0]
 800c838:	689b      	ldr	r3, [r3, #8]
 800c83a:	68ba      	ldr	r2, [r7, #8]
 800c83c:	4313      	orrs	r3, r2
 800c83e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	68ba      	ldr	r2, [r7, #8]
 800c846:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	2201      	movs	r2, #1
 800c84c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	2200      	movs	r2, #0
 800c854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c858:	2300      	movs	r3, #0
}
 800c85a:	4618      	mov	r0, r3
 800c85c:	3714      	adds	r7, #20
 800c85e:	46bd      	mov	sp, r7
 800c860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c864:	4770      	bx	lr
 800c866:	bf00      	nop
 800c868:	40012c00 	.word	0x40012c00
 800c86c:	40013400 	.word	0x40013400
 800c870:	40015000 	.word	0x40015000
 800c874:	40000400 	.word	0x40000400
 800c878:	40000800 	.word	0x40000800
 800c87c:	40000c00 	.word	0x40000c00
 800c880:	40014000 	.word	0x40014000

0800c884 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c884:	b480      	push	{r7}
 800c886:	b085      	sub	sp, #20
 800c888:	af00      	add	r7, sp, #0
 800c88a:	6078      	str	r0, [r7, #4]
 800c88c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c88e:	2300      	movs	r3, #0
 800c890:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c898:	2b01      	cmp	r3, #1
 800c89a:	d101      	bne.n	800c8a0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c89c:	2302      	movs	r3, #2
 800c89e:	e096      	b.n	800c9ce <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	2201      	movs	r2, #1
 800c8a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c8ae:	683b      	ldr	r3, [r7, #0]
 800c8b0:	68db      	ldr	r3, [r3, #12]
 800c8b2:	4313      	orrs	r3, r2
 800c8b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c8bc:	683b      	ldr	r3, [r7, #0]
 800c8be:	689b      	ldr	r3, [r3, #8]
 800c8c0:	4313      	orrs	r3, r2
 800c8c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800c8ca:	683b      	ldr	r3, [r7, #0]
 800c8cc:	685b      	ldr	r3, [r3, #4]
 800c8ce:	4313      	orrs	r3, r2
 800c8d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800c8d8:	683b      	ldr	r3, [r7, #0]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	4313      	orrs	r3, r2
 800c8de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c8e6:	683b      	ldr	r3, [r7, #0]
 800c8e8:	691b      	ldr	r3, [r3, #16]
 800c8ea:	4313      	orrs	r3, r2
 800c8ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800c8f4:	683b      	ldr	r3, [r7, #0]
 800c8f6:	695b      	ldr	r3, [r3, #20]
 800c8f8:	4313      	orrs	r3, r2
 800c8fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c902:	683b      	ldr	r3, [r7, #0]
 800c904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c906:	4313      	orrs	r3, r2
 800c908:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800c910:	683b      	ldr	r3, [r7, #0]
 800c912:	699b      	ldr	r3, [r3, #24]
 800c914:	041b      	lsls	r3, r3, #16
 800c916:	4313      	orrs	r3, r2
 800c918:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	4a2f      	ldr	r2, [pc, #188]	; (800c9dc <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800c920:	4293      	cmp	r3, r2
 800c922:	d009      	beq.n	800c938 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	4a2d      	ldr	r2, [pc, #180]	; (800c9e0 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800c92a:	4293      	cmp	r3, r2
 800c92c:	d004      	beq.n	800c938 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	4a2c      	ldr	r2, [pc, #176]	; (800c9e4 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800c934:	4293      	cmp	r3, r2
 800c936:	d106      	bne.n	800c946 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800c93e:	683b      	ldr	r3, [r7, #0]
 800c940:	69db      	ldr	r3, [r3, #28]
 800c942:	4313      	orrs	r3, r2
 800c944:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	4a24      	ldr	r2, [pc, #144]	; (800c9dc <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800c94c:	4293      	cmp	r3, r2
 800c94e:	d009      	beq.n	800c964 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	4a22      	ldr	r2, [pc, #136]	; (800c9e0 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800c956:	4293      	cmp	r3, r2
 800c958:	d004      	beq.n	800c964 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	4a21      	ldr	r2, [pc, #132]	; (800c9e4 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800c960:	4293      	cmp	r3, r2
 800c962:	d12b      	bne.n	800c9bc <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800c96a:	683b      	ldr	r3, [r7, #0]
 800c96c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c96e:	051b      	lsls	r3, r3, #20
 800c970:	4313      	orrs	r3, r2
 800c972:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800c97a:	683b      	ldr	r3, [r7, #0]
 800c97c:	6a1b      	ldr	r3, [r3, #32]
 800c97e:	4313      	orrs	r3, r2
 800c980:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800c988:	683b      	ldr	r3, [r7, #0]
 800c98a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c98c:	4313      	orrs	r3, r2
 800c98e:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	4a11      	ldr	r2, [pc, #68]	; (800c9dc <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800c996:	4293      	cmp	r3, r2
 800c998:	d009      	beq.n	800c9ae <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	4a10      	ldr	r2, [pc, #64]	; (800c9e0 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800c9a0:	4293      	cmp	r3, r2
 800c9a2:	d004      	beq.n	800c9ae <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	4a0e      	ldr	r2, [pc, #56]	; (800c9e4 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800c9aa:	4293      	cmp	r3, r2
 800c9ac:	d106      	bne.n	800c9bc <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800c9b4:	683b      	ldr	r3, [r7, #0]
 800c9b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9b8:	4313      	orrs	r3, r2
 800c9ba:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	68fa      	ldr	r2, [r7, #12]
 800c9c2:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	2200      	movs	r2, #0
 800c9c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c9cc:	2300      	movs	r3, #0
}
 800c9ce:	4618      	mov	r0, r3
 800c9d0:	3714      	adds	r7, #20
 800c9d2:	46bd      	mov	sp, r7
 800c9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d8:	4770      	bx	lr
 800c9da:	bf00      	nop
 800c9dc:	40012c00 	.word	0x40012c00
 800c9e0:	40013400 	.word	0x40013400
 800c9e4:	40015000 	.word	0x40015000

0800c9e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c9e8:	b480      	push	{r7}
 800c9ea:	b083      	sub	sp, #12
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c9f0:	bf00      	nop
 800c9f2:	370c      	adds	r7, #12
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fa:	4770      	bx	lr

0800c9fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c9fc:	b480      	push	{r7}
 800c9fe:	b083      	sub	sp, #12
 800ca00:	af00      	add	r7, sp, #0
 800ca02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ca04:	bf00      	nop
 800ca06:	370c      	adds	r7, #12
 800ca08:	46bd      	mov	sp, r7
 800ca0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca0e:	4770      	bx	lr

0800ca10 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ca10:	b480      	push	{r7}
 800ca12:	b083      	sub	sp, #12
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ca18:	bf00      	nop
 800ca1a:	370c      	adds	r7, #12
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca22:	4770      	bx	lr

0800ca24 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800ca24:	b480      	push	{r7}
 800ca26:	b083      	sub	sp, #12
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800ca2c:	bf00      	nop
 800ca2e:	370c      	adds	r7, #12
 800ca30:	46bd      	mov	sp, r7
 800ca32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca36:	4770      	bx	lr

0800ca38 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800ca38:	b480      	push	{r7}
 800ca3a:	b083      	sub	sp, #12
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800ca40:	bf00      	nop
 800ca42:	370c      	adds	r7, #12
 800ca44:	46bd      	mov	sp, r7
 800ca46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca4a:	4770      	bx	lr

0800ca4c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800ca4c:	b480      	push	{r7}
 800ca4e:	b083      	sub	sp, #12
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800ca54:	bf00      	nop
 800ca56:	370c      	adds	r7, #12
 800ca58:	46bd      	mov	sp, r7
 800ca5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca5e:	4770      	bx	lr

0800ca60 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800ca60:	b480      	push	{r7}
 800ca62:	b083      	sub	sp, #12
 800ca64:	af00      	add	r7, sp, #0
 800ca66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800ca68:	bf00      	nop
 800ca6a:	370c      	adds	r7, #12
 800ca6c:	46bd      	mov	sp, r7
 800ca6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca72:	4770      	bx	lr

0800ca74 <LL_EXTI_EnableIT_0_31>:
{
 800ca74:	b480      	push	{r7}
 800ca76:	b083      	sub	sp, #12
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800ca7c:	4b05      	ldr	r3, [pc, #20]	; (800ca94 <LL_EXTI_EnableIT_0_31+0x20>)
 800ca7e:	681a      	ldr	r2, [r3, #0]
 800ca80:	4904      	ldr	r1, [pc, #16]	; (800ca94 <LL_EXTI_EnableIT_0_31+0x20>)
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	4313      	orrs	r3, r2
 800ca86:	600b      	str	r3, [r1, #0]
}
 800ca88:	bf00      	nop
 800ca8a:	370c      	adds	r7, #12
 800ca8c:	46bd      	mov	sp, r7
 800ca8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca92:	4770      	bx	lr
 800ca94:	40010400 	.word	0x40010400

0800ca98 <LL_EXTI_EnableIT_32_63>:
{
 800ca98:	b480      	push	{r7}
 800ca9a:	b083      	sub	sp, #12
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800caa0:	4b05      	ldr	r3, [pc, #20]	; (800cab8 <LL_EXTI_EnableIT_32_63+0x20>)
 800caa2:	6a1a      	ldr	r2, [r3, #32]
 800caa4:	4904      	ldr	r1, [pc, #16]	; (800cab8 <LL_EXTI_EnableIT_32_63+0x20>)
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	4313      	orrs	r3, r2
 800caaa:	620b      	str	r3, [r1, #32]
}
 800caac:	bf00      	nop
 800caae:	370c      	adds	r7, #12
 800cab0:	46bd      	mov	sp, r7
 800cab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab6:	4770      	bx	lr
 800cab8:	40010400 	.word	0x40010400

0800cabc <LL_EXTI_DisableIT_0_31>:
{
 800cabc:	b480      	push	{r7}
 800cabe:	b083      	sub	sp, #12
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800cac4:	4b06      	ldr	r3, [pc, #24]	; (800cae0 <LL_EXTI_DisableIT_0_31+0x24>)
 800cac6:	681a      	ldr	r2, [r3, #0]
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	43db      	mvns	r3, r3
 800cacc:	4904      	ldr	r1, [pc, #16]	; (800cae0 <LL_EXTI_DisableIT_0_31+0x24>)
 800cace:	4013      	ands	r3, r2
 800cad0:	600b      	str	r3, [r1, #0]
}
 800cad2:	bf00      	nop
 800cad4:	370c      	adds	r7, #12
 800cad6:	46bd      	mov	sp, r7
 800cad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cadc:	4770      	bx	lr
 800cade:	bf00      	nop
 800cae0:	40010400 	.word	0x40010400

0800cae4 <LL_EXTI_DisableIT_32_63>:
{
 800cae4:	b480      	push	{r7}
 800cae6:	b083      	sub	sp, #12
 800cae8:	af00      	add	r7, sp, #0
 800caea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 800caec:	4b06      	ldr	r3, [pc, #24]	; (800cb08 <LL_EXTI_DisableIT_32_63+0x24>)
 800caee:	6a1a      	ldr	r2, [r3, #32]
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	43db      	mvns	r3, r3
 800caf4:	4904      	ldr	r1, [pc, #16]	; (800cb08 <LL_EXTI_DisableIT_32_63+0x24>)
 800caf6:	4013      	ands	r3, r2
 800caf8:	620b      	str	r3, [r1, #32]
}
 800cafa:	bf00      	nop
 800cafc:	370c      	adds	r7, #12
 800cafe:	46bd      	mov	sp, r7
 800cb00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb04:	4770      	bx	lr
 800cb06:	bf00      	nop
 800cb08:	40010400 	.word	0x40010400

0800cb0c <LL_EXTI_EnableEvent_0_31>:
{
 800cb0c:	b480      	push	{r7}
 800cb0e:	b083      	sub	sp, #12
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 800cb14:	4b05      	ldr	r3, [pc, #20]	; (800cb2c <LL_EXTI_EnableEvent_0_31+0x20>)
 800cb16:	685a      	ldr	r2, [r3, #4]
 800cb18:	4904      	ldr	r1, [pc, #16]	; (800cb2c <LL_EXTI_EnableEvent_0_31+0x20>)
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	4313      	orrs	r3, r2
 800cb1e:	604b      	str	r3, [r1, #4]
}
 800cb20:	bf00      	nop
 800cb22:	370c      	adds	r7, #12
 800cb24:	46bd      	mov	sp, r7
 800cb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb2a:	4770      	bx	lr
 800cb2c:	40010400 	.word	0x40010400

0800cb30 <LL_EXTI_EnableEvent_32_63>:
{
 800cb30:	b480      	push	{r7}
 800cb32:	b083      	sub	sp, #12
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 800cb38:	4b05      	ldr	r3, [pc, #20]	; (800cb50 <LL_EXTI_EnableEvent_32_63+0x20>)
 800cb3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cb3c:	4904      	ldr	r1, [pc, #16]	; (800cb50 <LL_EXTI_EnableEvent_32_63+0x20>)
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	4313      	orrs	r3, r2
 800cb42:	624b      	str	r3, [r1, #36]	; 0x24
}
 800cb44:	bf00      	nop
 800cb46:	370c      	adds	r7, #12
 800cb48:	46bd      	mov	sp, r7
 800cb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb4e:	4770      	bx	lr
 800cb50:	40010400 	.word	0x40010400

0800cb54 <LL_EXTI_DisableEvent_0_31>:
{
 800cb54:	b480      	push	{r7}
 800cb56:	b083      	sub	sp, #12
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800cb5c:	4b06      	ldr	r3, [pc, #24]	; (800cb78 <LL_EXTI_DisableEvent_0_31+0x24>)
 800cb5e:	685a      	ldr	r2, [r3, #4]
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	43db      	mvns	r3, r3
 800cb64:	4904      	ldr	r1, [pc, #16]	; (800cb78 <LL_EXTI_DisableEvent_0_31+0x24>)
 800cb66:	4013      	ands	r3, r2
 800cb68:	604b      	str	r3, [r1, #4]
}
 800cb6a:	bf00      	nop
 800cb6c:	370c      	adds	r7, #12
 800cb6e:	46bd      	mov	sp, r7
 800cb70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb74:	4770      	bx	lr
 800cb76:	bf00      	nop
 800cb78:	40010400 	.word	0x40010400

0800cb7c <LL_EXTI_DisableEvent_32_63>:
{
 800cb7c:	b480      	push	{r7}
 800cb7e:	b083      	sub	sp, #12
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 800cb84:	4b06      	ldr	r3, [pc, #24]	; (800cba0 <LL_EXTI_DisableEvent_32_63+0x24>)
 800cb86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	43db      	mvns	r3, r3
 800cb8c:	4904      	ldr	r1, [pc, #16]	; (800cba0 <LL_EXTI_DisableEvent_32_63+0x24>)
 800cb8e:	4013      	ands	r3, r2
 800cb90:	624b      	str	r3, [r1, #36]	; 0x24
}
 800cb92:	bf00      	nop
 800cb94:	370c      	adds	r7, #12
 800cb96:	46bd      	mov	sp, r7
 800cb98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb9c:	4770      	bx	lr
 800cb9e:	bf00      	nop
 800cba0:	40010400 	.word	0x40010400

0800cba4 <LL_EXTI_EnableRisingTrig_0_31>:
{
 800cba4:	b480      	push	{r7}
 800cba6:	b083      	sub	sp, #12
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800cbac:	4b05      	ldr	r3, [pc, #20]	; (800cbc4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800cbae:	689a      	ldr	r2, [r3, #8]
 800cbb0:	4904      	ldr	r1, [pc, #16]	; (800cbc4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	4313      	orrs	r3, r2
 800cbb6:	608b      	str	r3, [r1, #8]
}
 800cbb8:	bf00      	nop
 800cbba:	370c      	adds	r7, #12
 800cbbc:	46bd      	mov	sp, r7
 800cbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc2:	4770      	bx	lr
 800cbc4:	40010400 	.word	0x40010400

0800cbc8 <LL_EXTI_EnableRisingTrig_32_63>:
{
 800cbc8:	b480      	push	{r7}
 800cbca:	b083      	sub	sp, #12
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800cbd0:	4b05      	ldr	r3, [pc, #20]	; (800cbe8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800cbd2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cbd4:	4904      	ldr	r1, [pc, #16]	; (800cbe8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	4313      	orrs	r3, r2
 800cbda:	628b      	str	r3, [r1, #40]	; 0x28
}
 800cbdc:	bf00      	nop
 800cbde:	370c      	adds	r7, #12
 800cbe0:	46bd      	mov	sp, r7
 800cbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe6:	4770      	bx	lr
 800cbe8:	40010400 	.word	0x40010400

0800cbec <LL_EXTI_DisableRisingTrig_0_31>:
{
 800cbec:	b480      	push	{r7}
 800cbee:	b083      	sub	sp, #12
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800cbf4:	4b06      	ldr	r3, [pc, #24]	; (800cc10 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800cbf6:	689a      	ldr	r2, [r3, #8]
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	43db      	mvns	r3, r3
 800cbfc:	4904      	ldr	r1, [pc, #16]	; (800cc10 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800cbfe:	4013      	ands	r3, r2
 800cc00:	608b      	str	r3, [r1, #8]
}
 800cc02:	bf00      	nop
 800cc04:	370c      	adds	r7, #12
 800cc06:	46bd      	mov	sp, r7
 800cc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc0c:	4770      	bx	lr
 800cc0e:	bf00      	nop
 800cc10:	40010400 	.word	0x40010400

0800cc14 <LL_EXTI_DisableRisingTrig_32_63>:
{
 800cc14:	b480      	push	{r7}
 800cc16:	b083      	sub	sp, #12
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 800cc1c:	4b06      	ldr	r3, [pc, #24]	; (800cc38 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800cc1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	43db      	mvns	r3, r3
 800cc24:	4904      	ldr	r1, [pc, #16]	; (800cc38 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800cc26:	4013      	ands	r3, r2
 800cc28:	628b      	str	r3, [r1, #40]	; 0x28
}
 800cc2a:	bf00      	nop
 800cc2c:	370c      	adds	r7, #12
 800cc2e:	46bd      	mov	sp, r7
 800cc30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc34:	4770      	bx	lr
 800cc36:	bf00      	nop
 800cc38:	40010400 	.word	0x40010400

0800cc3c <LL_EXTI_EnableFallingTrig_0_31>:
{
 800cc3c:	b480      	push	{r7}
 800cc3e:	b083      	sub	sp, #12
 800cc40:	af00      	add	r7, sp, #0
 800cc42:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800cc44:	4b05      	ldr	r3, [pc, #20]	; (800cc5c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800cc46:	68da      	ldr	r2, [r3, #12]
 800cc48:	4904      	ldr	r1, [pc, #16]	; (800cc5c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	4313      	orrs	r3, r2
 800cc4e:	60cb      	str	r3, [r1, #12]
}
 800cc50:	bf00      	nop
 800cc52:	370c      	adds	r7, #12
 800cc54:	46bd      	mov	sp, r7
 800cc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc5a:	4770      	bx	lr
 800cc5c:	40010400 	.word	0x40010400

0800cc60 <LL_EXTI_EnableFallingTrig_32_63>:
{
 800cc60:	b480      	push	{r7}
 800cc62:	b083      	sub	sp, #12
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 800cc68:	4b05      	ldr	r3, [pc, #20]	; (800cc80 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800cc6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc6c:	4904      	ldr	r1, [pc, #16]	; (800cc80 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	4313      	orrs	r3, r2
 800cc72:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800cc74:	bf00      	nop
 800cc76:	370c      	adds	r7, #12
 800cc78:	46bd      	mov	sp, r7
 800cc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc7e:	4770      	bx	lr
 800cc80:	40010400 	.word	0x40010400

0800cc84 <LL_EXTI_DisableFallingTrig_0_31>:
{
 800cc84:	b480      	push	{r7}
 800cc86:	b083      	sub	sp, #12
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800cc8c:	4b06      	ldr	r3, [pc, #24]	; (800cca8 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800cc8e:	68da      	ldr	r2, [r3, #12]
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	43db      	mvns	r3, r3
 800cc94:	4904      	ldr	r1, [pc, #16]	; (800cca8 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800cc96:	4013      	ands	r3, r2
 800cc98:	60cb      	str	r3, [r1, #12]
}
 800cc9a:	bf00      	nop
 800cc9c:	370c      	adds	r7, #12
 800cc9e:	46bd      	mov	sp, r7
 800cca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca4:	4770      	bx	lr
 800cca6:	bf00      	nop
 800cca8:	40010400 	.word	0x40010400

0800ccac <LL_EXTI_DisableFallingTrig_32_63>:
{
 800ccac:	b480      	push	{r7}
 800ccae:	b083      	sub	sp, #12
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 800ccb4:	4b06      	ldr	r3, [pc, #24]	; (800ccd0 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800ccb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	43db      	mvns	r3, r3
 800ccbc:	4904      	ldr	r1, [pc, #16]	; (800ccd0 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800ccbe:	4013      	ands	r3, r2
 800ccc0:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800ccc2:	bf00      	nop
 800ccc4:	370c      	adds	r7, #12
 800ccc6:	46bd      	mov	sp, r7
 800ccc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cccc:	4770      	bx	lr
 800ccce:	bf00      	nop
 800ccd0:	40010400 	.word	0x40010400

0800ccd4 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other calue : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 800ccd4:	b580      	push	{r7, lr}
 800ccd6:	b084      	sub	sp, #16
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 800ccdc:	2300      	movs	r3, #0
 800ccde:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	7a1b      	ldrb	r3, [r3, #8]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	f000 80c8 	beq.w	800ce7a <LL_EXTI_Init+0x1a6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d05d      	beq.n	800cdae <LL_EXTI_Init+0xda>
    {
      switch (EXTI_InitStruct->Mode)
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	7a5b      	ldrb	r3, [r3, #9]
 800ccf6:	2b01      	cmp	r3, #1
 800ccf8:	d00e      	beq.n	800cd18 <LL_EXTI_Init+0x44>
 800ccfa:	2b02      	cmp	r3, #2
 800ccfc:	d017      	beq.n	800cd2e <LL_EXTI_Init+0x5a>
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d120      	bne.n	800cd44 <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	4618      	mov	r0, r3
 800cd08:	f7ff ff24 	bl	800cb54 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	4618      	mov	r0, r3
 800cd12:	f7ff feaf 	bl	800ca74 <LL_EXTI_EnableIT_0_31>
          break;
 800cd16:	e018      	b.n	800cd4a <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	f7ff fecd 	bl	800cabc <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	4618      	mov	r0, r3
 800cd28:	f7ff fef0 	bl	800cb0c <LL_EXTI_EnableEvent_0_31>
          break;
 800cd2c:	e00d      	b.n	800cd4a <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	4618      	mov	r0, r3
 800cd34:	f7ff fe9e 	bl	800ca74 <LL_EXTI_EnableIT_0_31>
          /* Directly Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	4618      	mov	r0, r3
 800cd3e:	f7ff fee5 	bl	800cb0c <LL_EXTI_EnableEvent_0_31>
          break;
 800cd42:	e002      	b.n	800cd4a <LL_EXTI_Init+0x76>
        default:
          status = 0x01u;
 800cd44:	2301      	movs	r3, #1
 800cd46:	60fb      	str	r3, [r7, #12]
          break;
 800cd48:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	7a9b      	ldrb	r3, [r3, #10]
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d02d      	beq.n	800cdae <LL_EXTI_Init+0xda>
      {
        switch (EXTI_InitStruct->Trigger)
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	7a9b      	ldrb	r3, [r3, #10]
 800cd56:	2b02      	cmp	r3, #2
 800cd58:	d00e      	beq.n	800cd78 <LL_EXTI_Init+0xa4>
 800cd5a:	2b03      	cmp	r3, #3
 800cd5c:	d017      	beq.n	800cd8e <LL_EXTI_Init+0xba>
 800cd5e:	2b01      	cmp	r3, #1
 800cd60:	d120      	bne.n	800cda4 <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	4618      	mov	r0, r3
 800cd68:	f7ff ff8c 	bl	800cc84 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	4618      	mov	r0, r3
 800cd72:	f7ff ff17 	bl	800cba4 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 800cd76:	e01b      	b.n	800cdb0 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	4618      	mov	r0, r3
 800cd7e:	f7ff ff35 	bl	800cbec <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	4618      	mov	r0, r3
 800cd88:	f7ff ff58 	bl	800cc3c <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800cd8c:	e010      	b.n	800cdb0 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	4618      	mov	r0, r3
 800cd94:	f7ff ff06 	bl	800cba4 <LL_EXTI_EnableRisingTrig_0_31>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	f7ff ff4d 	bl	800cc3c <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800cda2:	e005      	b.n	800cdb0 <LL_EXTI_Init+0xdc>
          default:
            status |= 0x02u;
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	f043 0302 	orr.w	r3, r3, #2
 800cdaa:	60fb      	str	r3, [r7, #12]
            break;
 800cdac:	e000      	b.n	800cdb0 <LL_EXTI_Init+0xdc>
        }
      }
 800cdae:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	685b      	ldr	r3, [r3, #4]
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d075      	beq.n	800cea4 <LL_EXTI_Init+0x1d0>
    {
      switch (EXTI_InitStruct->Mode)
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	7a5b      	ldrb	r3, [r3, #9]
 800cdbc:	2b01      	cmp	r3, #1
 800cdbe:	d00e      	beq.n	800cdde <LL_EXTI_Init+0x10a>
 800cdc0:	2b02      	cmp	r3, #2
 800cdc2:	d017      	beq.n	800cdf4 <LL_EXTI_Init+0x120>
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d120      	bne.n	800ce0a <LL_EXTI_Init+0x136>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	685b      	ldr	r3, [r3, #4]
 800cdcc:	4618      	mov	r0, r3
 800cdce:	f7ff fed5 	bl	800cb7c <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	685b      	ldr	r3, [r3, #4]
 800cdd6:	4618      	mov	r0, r3
 800cdd8:	f7ff fe5e 	bl	800ca98 <LL_EXTI_EnableIT_32_63>
          break;
 800cddc:	e01a      	b.n	800ce14 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	685b      	ldr	r3, [r3, #4]
 800cde2:	4618      	mov	r0, r3
 800cde4:	f7ff fe7e 	bl	800cae4 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	685b      	ldr	r3, [r3, #4]
 800cdec:	4618      	mov	r0, r3
 800cdee:	f7ff fe9f 	bl	800cb30 <LL_EXTI_EnableEvent_32_63>
          break;
 800cdf2:	e00f      	b.n	800ce14 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	685b      	ldr	r3, [r3, #4]
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	f7ff fe4d 	bl	800ca98 <LL_EXTI_EnableIT_32_63>
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	685b      	ldr	r3, [r3, #4]
 800ce02:	4618      	mov	r0, r3
 800ce04:	f7ff fe94 	bl	800cb30 <LL_EXTI_EnableEvent_32_63>
          break;
 800ce08:	e004      	b.n	800ce14 <LL_EXTI_Init+0x140>
        default:
          status |= 0x04u;
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	f043 0304 	orr.w	r3, r3, #4
 800ce10:	60fb      	str	r3, [r7, #12]
          break;
 800ce12:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	7a9b      	ldrb	r3, [r3, #10]
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d043      	beq.n	800cea4 <LL_EXTI_Init+0x1d0>
      {
        switch (EXTI_InitStruct->Trigger)
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	7a9b      	ldrb	r3, [r3, #10]
 800ce20:	2b02      	cmp	r3, #2
 800ce22:	d00e      	beq.n	800ce42 <LL_EXTI_Init+0x16e>
 800ce24:	2b03      	cmp	r3, #3
 800ce26:	d017      	beq.n	800ce58 <LL_EXTI_Init+0x184>
 800ce28:	2b01      	cmp	r3, #1
 800ce2a:	d120      	bne.n	800ce6e <LL_EXTI_Init+0x19a>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	685b      	ldr	r3, [r3, #4]
 800ce30:	4618      	mov	r0, r3
 800ce32:	f7ff ff3b 	bl	800ccac <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	685b      	ldr	r3, [r3, #4]
 800ce3a:	4618      	mov	r0, r3
 800ce3c:	f7ff fec4 	bl	800cbc8 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 800ce40:	e031      	b.n	800cea6 <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	685b      	ldr	r3, [r3, #4]
 800ce46:	4618      	mov	r0, r3
 800ce48:	f7ff fee4 	bl	800cc14 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	685b      	ldr	r3, [r3, #4]
 800ce50:	4618      	mov	r0, r3
 800ce52:	f7ff ff05 	bl	800cc60 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800ce56:	e026      	b.n	800cea6 <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	685b      	ldr	r3, [r3, #4]
 800ce5c:	4618      	mov	r0, r3
 800ce5e:	f7ff feb3 	bl	800cbc8 <LL_EXTI_EnableRisingTrig_32_63>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	685b      	ldr	r3, [r3, #4]
 800ce66:	4618      	mov	r0, r3
 800ce68:	f7ff fefa 	bl	800cc60 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800ce6c:	e01b      	b.n	800cea6 <LL_EXTI_Init+0x1d2>
          default:
            status |= 0x05u;
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	f043 0305 	orr.w	r3, r3, #5
 800ce74:	60fb      	str	r3, [r7, #12]
            break;
 800ce76:	bf00      	nop
 800ce78:	e015      	b.n	800cea6 <LL_EXTI_Init+0x1d2>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure IT EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	4618      	mov	r0, r3
 800ce80:	f7ff fe1c 	bl	800cabc <LL_EXTI_DisableIT_0_31>
    /* De-configure Event EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	4618      	mov	r0, r3
 800ce8a:	f7ff fe63 	bl	800cb54 <LL_EXTI_DisableEvent_0_31>
    /* De-configure IT EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	685b      	ldr	r3, [r3, #4]
 800ce92:	4618      	mov	r0, r3
 800ce94:	f7ff fe26 	bl	800cae4 <LL_EXTI_DisableIT_32_63>
    /* De-configure Event EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	685b      	ldr	r3, [r3, #4]
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	f7ff fe6d 	bl	800cb7c <LL_EXTI_DisableEvent_32_63>
 800cea2:	e000      	b.n	800cea6 <LL_EXTI_Init+0x1d2>
      }
 800cea4:	bf00      	nop
  }

  return status;
 800cea6:	68fb      	ldr	r3, [r7, #12]
}
 800cea8:	4618      	mov	r0, r3
 800ceaa:	3710      	adds	r7, #16
 800ceac:	46bd      	mov	sp, r7
 800ceae:	bd80      	pop	{r7, pc}

0800ceb0 <LL_GPIO_SetPinMode>:
{
 800ceb0:	b480      	push	{r7}
 800ceb2:	b089      	sub	sp, #36	; 0x24
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	60f8      	str	r0, [r7, #12]
 800ceb8:	60b9      	str	r1, [r7, #8]
 800ceba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	681a      	ldr	r2, [r3, #0]
 800cec0:	68bb      	ldr	r3, [r7, #8]
 800cec2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cec4:	697b      	ldr	r3, [r7, #20]
 800cec6:	fa93 f3a3 	rbit	r3, r3
 800ceca:	613b      	str	r3, [r7, #16]
  return result;
 800cecc:	693b      	ldr	r3, [r7, #16]
 800cece:	fab3 f383 	clz	r3, r3
 800ced2:	b2db      	uxtb	r3, r3
 800ced4:	005b      	lsls	r3, r3, #1
 800ced6:	2103      	movs	r1, #3
 800ced8:	fa01 f303 	lsl.w	r3, r1, r3
 800cedc:	43db      	mvns	r3, r3
 800cede:	401a      	ands	r2, r3
 800cee0:	68bb      	ldr	r3, [r7, #8]
 800cee2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cee4:	69fb      	ldr	r3, [r7, #28]
 800cee6:	fa93 f3a3 	rbit	r3, r3
 800ceea:	61bb      	str	r3, [r7, #24]
  return result;
 800ceec:	69bb      	ldr	r3, [r7, #24]
 800ceee:	fab3 f383 	clz	r3, r3
 800cef2:	b2db      	uxtb	r3, r3
 800cef4:	005b      	lsls	r3, r3, #1
 800cef6:	6879      	ldr	r1, [r7, #4]
 800cef8:	fa01 f303 	lsl.w	r3, r1, r3
 800cefc:	431a      	orrs	r2, r3
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	601a      	str	r2, [r3, #0]
}
 800cf02:	bf00      	nop
 800cf04:	3724      	adds	r7, #36	; 0x24
 800cf06:	46bd      	mov	sp, r7
 800cf08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf0c:	4770      	bx	lr

0800cf0e <LL_GPIO_SetPinOutputType>:
{
 800cf0e:	b480      	push	{r7}
 800cf10:	b085      	sub	sp, #20
 800cf12:	af00      	add	r7, sp, #0
 800cf14:	60f8      	str	r0, [r7, #12]
 800cf16:	60b9      	str	r1, [r7, #8]
 800cf18:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	685a      	ldr	r2, [r3, #4]
 800cf1e:	68bb      	ldr	r3, [r7, #8]
 800cf20:	43db      	mvns	r3, r3
 800cf22:	401a      	ands	r2, r3
 800cf24:	68bb      	ldr	r3, [r7, #8]
 800cf26:	6879      	ldr	r1, [r7, #4]
 800cf28:	fb01 f303 	mul.w	r3, r1, r3
 800cf2c:	431a      	orrs	r2, r3
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	605a      	str	r2, [r3, #4]
}
 800cf32:	bf00      	nop
 800cf34:	3714      	adds	r7, #20
 800cf36:	46bd      	mov	sp, r7
 800cf38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf3c:	4770      	bx	lr

0800cf3e <LL_GPIO_SetPinSpeed>:
{
 800cf3e:	b480      	push	{r7}
 800cf40:	b089      	sub	sp, #36	; 0x24
 800cf42:	af00      	add	r7, sp, #0
 800cf44:	60f8      	str	r0, [r7, #12]
 800cf46:	60b9      	str	r1, [r7, #8]
 800cf48:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	689a      	ldr	r2, [r3, #8]
 800cf4e:	68bb      	ldr	r3, [r7, #8]
 800cf50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cf52:	697b      	ldr	r3, [r7, #20]
 800cf54:	fa93 f3a3 	rbit	r3, r3
 800cf58:	613b      	str	r3, [r7, #16]
  return result;
 800cf5a:	693b      	ldr	r3, [r7, #16]
 800cf5c:	fab3 f383 	clz	r3, r3
 800cf60:	b2db      	uxtb	r3, r3
 800cf62:	005b      	lsls	r3, r3, #1
 800cf64:	2103      	movs	r1, #3
 800cf66:	fa01 f303 	lsl.w	r3, r1, r3
 800cf6a:	43db      	mvns	r3, r3
 800cf6c:	401a      	ands	r2, r3
 800cf6e:	68bb      	ldr	r3, [r7, #8]
 800cf70:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cf72:	69fb      	ldr	r3, [r7, #28]
 800cf74:	fa93 f3a3 	rbit	r3, r3
 800cf78:	61bb      	str	r3, [r7, #24]
  return result;
 800cf7a:	69bb      	ldr	r3, [r7, #24]
 800cf7c:	fab3 f383 	clz	r3, r3
 800cf80:	b2db      	uxtb	r3, r3
 800cf82:	005b      	lsls	r3, r3, #1
 800cf84:	6879      	ldr	r1, [r7, #4]
 800cf86:	fa01 f303 	lsl.w	r3, r1, r3
 800cf8a:	431a      	orrs	r2, r3
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	609a      	str	r2, [r3, #8]
}
 800cf90:	bf00      	nop
 800cf92:	3724      	adds	r7, #36	; 0x24
 800cf94:	46bd      	mov	sp, r7
 800cf96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf9a:	4770      	bx	lr

0800cf9c <LL_GPIO_SetPinPull>:
{
 800cf9c:	b480      	push	{r7}
 800cf9e:	b089      	sub	sp, #36	; 0x24
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	60f8      	str	r0, [r7, #12]
 800cfa4:	60b9      	str	r1, [r7, #8]
 800cfa6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	68da      	ldr	r2, [r3, #12]
 800cfac:	68bb      	ldr	r3, [r7, #8]
 800cfae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cfb0:	697b      	ldr	r3, [r7, #20]
 800cfb2:	fa93 f3a3 	rbit	r3, r3
 800cfb6:	613b      	str	r3, [r7, #16]
  return result;
 800cfb8:	693b      	ldr	r3, [r7, #16]
 800cfba:	fab3 f383 	clz	r3, r3
 800cfbe:	b2db      	uxtb	r3, r3
 800cfc0:	005b      	lsls	r3, r3, #1
 800cfc2:	2103      	movs	r1, #3
 800cfc4:	fa01 f303 	lsl.w	r3, r1, r3
 800cfc8:	43db      	mvns	r3, r3
 800cfca:	401a      	ands	r2, r3
 800cfcc:	68bb      	ldr	r3, [r7, #8]
 800cfce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cfd0:	69fb      	ldr	r3, [r7, #28]
 800cfd2:	fa93 f3a3 	rbit	r3, r3
 800cfd6:	61bb      	str	r3, [r7, #24]
  return result;
 800cfd8:	69bb      	ldr	r3, [r7, #24]
 800cfda:	fab3 f383 	clz	r3, r3
 800cfde:	b2db      	uxtb	r3, r3
 800cfe0:	005b      	lsls	r3, r3, #1
 800cfe2:	6879      	ldr	r1, [r7, #4]
 800cfe4:	fa01 f303 	lsl.w	r3, r1, r3
 800cfe8:	431a      	orrs	r2, r3
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	60da      	str	r2, [r3, #12]
}
 800cfee:	bf00      	nop
 800cff0:	3724      	adds	r7, #36	; 0x24
 800cff2:	46bd      	mov	sp, r7
 800cff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff8:	4770      	bx	lr

0800cffa <LL_GPIO_SetAFPin_0_7>:
{
 800cffa:	b480      	push	{r7}
 800cffc:	b089      	sub	sp, #36	; 0x24
 800cffe:	af00      	add	r7, sp, #0
 800d000:	60f8      	str	r0, [r7, #12]
 800d002:	60b9      	str	r1, [r7, #8]
 800d004:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	6a1a      	ldr	r2, [r3, #32]
 800d00a:	68bb      	ldr	r3, [r7, #8]
 800d00c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d00e:	697b      	ldr	r3, [r7, #20]
 800d010:	fa93 f3a3 	rbit	r3, r3
 800d014:	613b      	str	r3, [r7, #16]
  return result;
 800d016:	693b      	ldr	r3, [r7, #16]
 800d018:	fab3 f383 	clz	r3, r3
 800d01c:	b2db      	uxtb	r3, r3
 800d01e:	009b      	lsls	r3, r3, #2
 800d020:	210f      	movs	r1, #15
 800d022:	fa01 f303 	lsl.w	r3, r1, r3
 800d026:	43db      	mvns	r3, r3
 800d028:	401a      	ands	r2, r3
 800d02a:	68bb      	ldr	r3, [r7, #8]
 800d02c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d02e:	69fb      	ldr	r3, [r7, #28]
 800d030:	fa93 f3a3 	rbit	r3, r3
 800d034:	61bb      	str	r3, [r7, #24]
  return result;
 800d036:	69bb      	ldr	r3, [r7, #24]
 800d038:	fab3 f383 	clz	r3, r3
 800d03c:	b2db      	uxtb	r3, r3
 800d03e:	009b      	lsls	r3, r3, #2
 800d040:	6879      	ldr	r1, [r7, #4]
 800d042:	fa01 f303 	lsl.w	r3, r1, r3
 800d046:	431a      	orrs	r2, r3
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	621a      	str	r2, [r3, #32]
}
 800d04c:	bf00      	nop
 800d04e:	3724      	adds	r7, #36	; 0x24
 800d050:	46bd      	mov	sp, r7
 800d052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d056:	4770      	bx	lr

0800d058 <LL_GPIO_SetAFPin_8_15>:
{
 800d058:	b480      	push	{r7}
 800d05a:	b089      	sub	sp, #36	; 0x24
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	60f8      	str	r0, [r7, #12]
 800d060:	60b9      	str	r1, [r7, #8]
 800d062:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d068:	68bb      	ldr	r3, [r7, #8]
 800d06a:	0a1b      	lsrs	r3, r3, #8
 800d06c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d06e:	697b      	ldr	r3, [r7, #20]
 800d070:	fa93 f3a3 	rbit	r3, r3
 800d074:	613b      	str	r3, [r7, #16]
  return result;
 800d076:	693b      	ldr	r3, [r7, #16]
 800d078:	fab3 f383 	clz	r3, r3
 800d07c:	b2db      	uxtb	r3, r3
 800d07e:	009b      	lsls	r3, r3, #2
 800d080:	210f      	movs	r1, #15
 800d082:	fa01 f303 	lsl.w	r3, r1, r3
 800d086:	43db      	mvns	r3, r3
 800d088:	401a      	ands	r2, r3
 800d08a:	68bb      	ldr	r3, [r7, #8]
 800d08c:	0a1b      	lsrs	r3, r3, #8
 800d08e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d090:	69fb      	ldr	r3, [r7, #28]
 800d092:	fa93 f3a3 	rbit	r3, r3
 800d096:	61bb      	str	r3, [r7, #24]
  return result;
 800d098:	69bb      	ldr	r3, [r7, #24]
 800d09a:	fab3 f383 	clz	r3, r3
 800d09e:	b2db      	uxtb	r3, r3
 800d0a0:	009b      	lsls	r3, r3, #2
 800d0a2:	6879      	ldr	r1, [r7, #4]
 800d0a4:	fa01 f303 	lsl.w	r3, r1, r3
 800d0a8:	431a      	orrs	r2, r3
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	625a      	str	r2, [r3, #36]	; 0x24
}
 800d0ae:	bf00      	nop
 800d0b0:	3724      	adds	r7, #36	; 0x24
 800d0b2:	46bd      	mov	sp, r7
 800d0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b8:	4770      	bx	lr

0800d0ba <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800d0ba:	b580      	push	{r7, lr}
 800d0bc:	b086      	sub	sp, #24
 800d0be:	af00      	add	r7, sp, #0
 800d0c0:	6078      	str	r0, [r7, #4]
 800d0c2:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800d0c4:	683b      	ldr	r3, [r7, #0]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	fa93 f3a3 	rbit	r3, r3
 800d0d0:	60bb      	str	r3, [r7, #8]
  return result;
 800d0d2:	68bb      	ldr	r3, [r7, #8]
 800d0d4:	fab3 f383 	clz	r3, r3
 800d0d8:	b2db      	uxtb	r3, r3
 800d0da:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800d0dc:	e040      	b.n	800d160 <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 800d0de:	683b      	ldr	r3, [r7, #0]
 800d0e0:	681a      	ldr	r2, [r3, #0]
 800d0e2:	2101      	movs	r1, #1
 800d0e4:	697b      	ldr	r3, [r7, #20]
 800d0e6:	fa01 f303 	lsl.w	r3, r1, r3
 800d0ea:	4013      	ands	r3, r2
 800d0ec:	613b      	str	r3, [r7, #16]

    if (currentpin != 0x00u)
 800d0ee:	693b      	ldr	r3, [r7, #16]
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d032      	beq.n	800d15a <LL_GPIO_Init+0xa0>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800d0f4:	683b      	ldr	r3, [r7, #0]
 800d0f6:	685b      	ldr	r3, [r3, #4]
 800d0f8:	461a      	mov	r2, r3
 800d0fa:	6939      	ldr	r1, [r7, #16]
 800d0fc:	6878      	ldr	r0, [r7, #4]
 800d0fe:	f7ff fed7 	bl	800ceb0 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800d102:	683b      	ldr	r3, [r7, #0]
 800d104:	685b      	ldr	r3, [r3, #4]
 800d106:	2b01      	cmp	r3, #1
 800d108:	d003      	beq.n	800d112 <LL_GPIO_Init+0x58>
 800d10a:	683b      	ldr	r3, [r7, #0]
 800d10c:	685b      	ldr	r3, [r3, #4]
 800d10e:	2b02      	cmp	r3, #2
 800d110:	d106      	bne.n	800d120 <LL_GPIO_Init+0x66>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800d112:	683b      	ldr	r3, [r7, #0]
 800d114:	689b      	ldr	r3, [r3, #8]
 800d116:	461a      	mov	r2, r3
 800d118:	6939      	ldr	r1, [r7, #16]
 800d11a:	6878      	ldr	r0, [r7, #4]
 800d11c:	f7ff ff0f 	bl	800cf3e <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800d120:	683b      	ldr	r3, [r7, #0]
 800d122:	691b      	ldr	r3, [r3, #16]
 800d124:	461a      	mov	r2, r3
 800d126:	6939      	ldr	r1, [r7, #16]
 800d128:	6878      	ldr	r0, [r7, #4]
 800d12a:	f7ff ff37 	bl	800cf9c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800d12e:	683b      	ldr	r3, [r7, #0]
 800d130:	685b      	ldr	r3, [r3, #4]
 800d132:	2b02      	cmp	r3, #2
 800d134:	d111      	bne.n	800d15a <LL_GPIO_Init+0xa0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800d136:	693b      	ldr	r3, [r7, #16]
 800d138:	2bff      	cmp	r3, #255	; 0xff
 800d13a:	d807      	bhi.n	800d14c <LL_GPIO_Init+0x92>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800d13c:	683b      	ldr	r3, [r7, #0]
 800d13e:	695b      	ldr	r3, [r3, #20]
 800d140:	461a      	mov	r2, r3
 800d142:	6939      	ldr	r1, [r7, #16]
 800d144:	6878      	ldr	r0, [r7, #4]
 800d146:	f7ff ff58 	bl	800cffa <LL_GPIO_SetAFPin_0_7>
 800d14a:	e006      	b.n	800d15a <LL_GPIO_Init+0xa0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800d14c:	683b      	ldr	r3, [r7, #0]
 800d14e:	695b      	ldr	r3, [r3, #20]
 800d150:	461a      	mov	r2, r3
 800d152:	6939      	ldr	r1, [r7, #16]
 800d154:	6878      	ldr	r0, [r7, #4]
 800d156:	f7ff ff7f 	bl	800d058 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 800d15a:	697b      	ldr	r3, [r7, #20]
 800d15c:	3301      	adds	r3, #1
 800d15e:	617b      	str	r3, [r7, #20]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800d160:	683b      	ldr	r3, [r7, #0]
 800d162:	681a      	ldr	r2, [r3, #0]
 800d164:	697b      	ldr	r3, [r7, #20]
 800d166:	fa22 f303 	lsr.w	r3, r2, r3
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d1b7      	bne.n	800d0de <LL_GPIO_Init+0x24>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800d16e:	683b      	ldr	r3, [r7, #0]
 800d170:	685b      	ldr	r3, [r3, #4]
 800d172:	2b01      	cmp	r3, #1
 800d174:	d003      	beq.n	800d17e <LL_GPIO_Init+0xc4>
 800d176:	683b      	ldr	r3, [r7, #0]
 800d178:	685b      	ldr	r3, [r3, #4]
 800d17a:	2b02      	cmp	r3, #2
 800d17c:	d107      	bne.n	800d18e <LL_GPIO_Init+0xd4>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800d17e:	683b      	ldr	r3, [r7, #0]
 800d180:	6819      	ldr	r1, [r3, #0]
 800d182:	683b      	ldr	r3, [r7, #0]
 800d184:	68db      	ldr	r3, [r3, #12]
 800d186:	461a      	mov	r2, r3
 800d188:	6878      	ldr	r0, [r7, #4]
 800d18a:	f7ff fec0 	bl	800cf0e <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 800d18e:	2300      	movs	r3, #0
}
 800d190:	4618      	mov	r0, r3
 800d192:	3718      	adds	r7, #24
 800d194:	46bd      	mov	sp, r7
 800d196:	bd80      	pop	{r7, pc}

0800d198 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>:
 *
 *
 */

void ILI9341_Draw_Bordered_Filled_Rectangle_Coord(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t inner_colour, uint8_t border_weight, uint8_t border_colour)
{
 800d198:	b590      	push	{r4, r7, lr}
 800d19a:	b087      	sub	sp, #28
 800d19c:	af02      	add	r7, sp, #8
 800d19e:	4604      	mov	r4, r0
 800d1a0:	4608      	mov	r0, r1
 800d1a2:	4611      	mov	r1, r2
 800d1a4:	461a      	mov	r2, r3
 800d1a6:	4623      	mov	r3, r4
 800d1a8:	80fb      	strh	r3, [r7, #6]
 800d1aa:	4603      	mov	r3, r0
 800d1ac:	80bb      	strh	r3, [r7, #4]
 800d1ae:	460b      	mov	r3, r1
 800d1b0:	807b      	strh	r3, [r7, #2]
 800d1b2:	4613      	mov	r3, r2
 800d1b4:	803b      	strh	r3, [r7, #0]

	// Draw inwards (and shorter) for each level of border weight
	for(uint8_t b = 0; ; b++)
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	73fb      	strb	r3, [r7, #15]
	{


		if(b > border_weight)
 800d1ba:	7bfa      	ldrb	r2, [r7, #15]
 800d1bc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d1c0:	429a      	cmp	r2, r3
 800d1c2:	d93a      	bls.n	800d23a <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0xa2>
		{

			// stop before the inner space reaches zero! (hard fault)
			if( ((y + b) == ((y + h) - b)) || ((x + b) == ((x + w) - b)) )
 800d1c4:	88ba      	ldrh	r2, [r7, #4]
 800d1c6:	7bfb      	ldrb	r3, [r7, #15]
 800d1c8:	441a      	add	r2, r3
 800d1ca:	88b9      	ldrh	r1, [r7, #4]
 800d1cc:	883b      	ldrh	r3, [r7, #0]
 800d1ce:	4419      	add	r1, r3
 800d1d0:	7bfb      	ldrb	r3, [r7, #15]
 800d1d2:	1acb      	subs	r3, r1, r3
 800d1d4:	429a      	cmp	r2, r3
 800d1d6:	f000 8090 	beq.w	800d2fa <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x162>
 800d1da:	88fa      	ldrh	r2, [r7, #6]
 800d1dc:	7bfb      	ldrb	r3, [r7, #15]
 800d1de:	441a      	add	r2, r3
 800d1e0:	88f9      	ldrh	r1, [r7, #6]
 800d1e2:	887b      	ldrh	r3, [r7, #2]
 800d1e4:	4419      	add	r1, r3
 800d1e6:	7bfb      	ldrb	r3, [r7, #15]
 800d1e8:	1acb      	subs	r3, r1, r3
 800d1ea:	429a      	cmp	r2, r3
 800d1ec:	f000 8085 	beq.w	800d2fa <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x162>
				// add final line?
				goto finish;
			}
			else
			{
				ILI9341_Draw_Rectangle(x + b, y + b, (w - (2*b)) + 1, (h - (2*b)) + 1, inner_colour, AREA_CHUNK);
 800d1f0:	7bfb      	ldrb	r3, [r7, #15]
 800d1f2:	b29a      	uxth	r2, r3
 800d1f4:	88fb      	ldrh	r3, [r7, #6]
 800d1f6:	4413      	add	r3, r2
 800d1f8:	b298      	uxth	r0, r3
 800d1fa:	7bfb      	ldrb	r3, [r7, #15]
 800d1fc:	b29a      	uxth	r2, r3
 800d1fe:	88bb      	ldrh	r3, [r7, #4]
 800d200:	4413      	add	r3, r2
 800d202:	b299      	uxth	r1, r3
 800d204:	7bfb      	ldrb	r3, [r7, #15]
 800d206:	b29b      	uxth	r3, r3
 800d208:	005b      	lsls	r3, r3, #1
 800d20a:	b29b      	uxth	r3, r3
 800d20c:	887a      	ldrh	r2, [r7, #2]
 800d20e:	1ad3      	subs	r3, r2, r3
 800d210:	b29b      	uxth	r3, r3
 800d212:	3301      	adds	r3, #1
 800d214:	b29c      	uxth	r4, r3
 800d216:	7bfb      	ldrb	r3, [r7, #15]
 800d218:	b29b      	uxth	r3, r3
 800d21a:	005b      	lsls	r3, r3, #1
 800d21c:	b29b      	uxth	r3, r3
 800d21e:	883a      	ldrh	r2, [r7, #0]
 800d220:	1ad3      	subs	r3, r2, r3
 800d222:	b29b      	uxth	r3, r3
 800d224:	3301      	adds	r3, #1
 800d226:	b29a      	uxth	r2, r3
 800d228:	2304      	movs	r3, #4
 800d22a:	9301      	str	r3, [sp, #4]
 800d22c:	8c3b      	ldrh	r3, [r7, #32]
 800d22e:	9300      	str	r3, [sp, #0]
 800d230:	4613      	mov	r3, r2
 800d232:	4622      	mov	r2, r4
 800d234:	f000 fcd6 	bl	800dbe4 <ILI9341_Draw_Rectangle>
				goto finish;
 800d238:	e060      	b.n	800d2fc <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x164>
			}
		}

		// Horizontal lines
		ILI9341_Draw_Horizontal_Line(	x + b,
 800d23a:	7bfb      	ldrb	r3, [r7, #15]
 800d23c:	b29a      	uxth	r2, r3
 800d23e:	88fb      	ldrh	r3, [r7, #6]
 800d240:	4413      	add	r3, r2
 800d242:	b298      	uxth	r0, r3
 800d244:	7bfb      	ldrb	r3, [r7, #15]
 800d246:	b29a      	uxth	r2, r3
 800d248:	88bb      	ldrh	r3, [r7, #4]
 800d24a:	4413      	add	r3, r2
 800d24c:	b299      	uxth	r1, r3
 800d24e:	7bfb      	ldrb	r3, [r7, #15]
 800d250:	b29b      	uxth	r3, r3
 800d252:	005b      	lsls	r3, r3, #1
 800d254:	b29b      	uxth	r3, r3
 800d256:	887a      	ldrh	r2, [r7, #2]
 800d258:	1ad3      	subs	r3, r2, r3
 800d25a:	b29a      	uxth	r2, r3
 800d25c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d260:	b29b      	uxth	r3, r3
 800d262:	f000 fa81 	bl	800d768 <ILI9341_Draw_Horizontal_Line>
										y + b,
										w - (2*b),
										border_colour);

		ILI9341_Draw_Horizontal_Line(	x + b,
 800d266:	7bfb      	ldrb	r3, [r7, #15]
 800d268:	b29a      	uxth	r2, r3
 800d26a:	88fb      	ldrh	r3, [r7, #6]
 800d26c:	4413      	add	r3, r2
 800d26e:	b298      	uxth	r0, r3
										(y + h) - b,
 800d270:	88ba      	ldrh	r2, [r7, #4]
 800d272:	883b      	ldrh	r3, [r7, #0]
 800d274:	4413      	add	r3, r2
 800d276:	b29a      	uxth	r2, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 800d278:	7bfb      	ldrb	r3, [r7, #15]
 800d27a:	b29b      	uxth	r3, r3
 800d27c:	1ad3      	subs	r3, r2, r3
 800d27e:	b299      	uxth	r1, r3
 800d280:	7bfb      	ldrb	r3, [r7, #15]
 800d282:	b29b      	uxth	r3, r3
 800d284:	887a      	ldrh	r2, [r7, #2]
 800d286:	1ad3      	subs	r3, r2, r3
 800d288:	b29a      	uxth	r2, r3
 800d28a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d28e:	b29b      	uxth	r3, r3
 800d290:	f000 fa6a 	bl	800d768 <ILI9341_Draw_Horizontal_Line>
										w - (b),
										border_colour);


		// Vertical lines
		ILI9341_Draw_Vertical_Line(		x + b,
 800d294:	7bfb      	ldrb	r3, [r7, #15]
 800d296:	b29a      	uxth	r2, r3
 800d298:	88fb      	ldrh	r3, [r7, #6]
 800d29a:	4413      	add	r3, r2
 800d29c:	b298      	uxth	r0, r3
 800d29e:	7bfb      	ldrb	r3, [r7, #15]
 800d2a0:	b29a      	uxth	r2, r3
 800d2a2:	88bb      	ldrh	r3, [r7, #4]
 800d2a4:	4413      	add	r3, r2
 800d2a6:	b299      	uxth	r1, r3
 800d2a8:	7bfb      	ldrb	r3, [r7, #15]
 800d2aa:	b29b      	uxth	r3, r3
 800d2ac:	005b      	lsls	r3, r3, #1
 800d2ae:	b29b      	uxth	r3, r3
 800d2b0:	883a      	ldrh	r2, [r7, #0]
 800d2b2:	1ad3      	subs	r3, r2, r3
 800d2b4:	b29a      	uxth	r2, r3
 800d2b6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d2ba:	b29b      	uxth	r3, r3
 800d2bc:	f000 fa9c 	bl	800d7f8 <ILI9341_Draw_Vertical_Line>
										y + b,
										h - (2*b),
										border_colour);

		ILI9341_Draw_Vertical_Line(		(x + w) - b,
 800d2c0:	88fa      	ldrh	r2, [r7, #6]
 800d2c2:	887b      	ldrh	r3, [r7, #2]
 800d2c4:	4413      	add	r3, r2
 800d2c6:	b29a      	uxth	r2, r3
 800d2c8:	7bfb      	ldrb	r3, [r7, #15]
 800d2ca:	b29b      	uxth	r3, r3
 800d2cc:	1ad3      	subs	r3, r2, r3
 800d2ce:	b298      	uxth	r0, r3
 800d2d0:	7bfb      	ldrb	r3, [r7, #15]
 800d2d2:	b29a      	uxth	r2, r3
 800d2d4:	88bb      	ldrh	r3, [r7, #4]
 800d2d6:	4413      	add	r3, r2
 800d2d8:	b299      	uxth	r1, r3
 800d2da:	7bfb      	ldrb	r3, [r7, #15]
 800d2dc:	b29b      	uxth	r3, r3
 800d2de:	005b      	lsls	r3, r3, #1
 800d2e0:	b29b      	uxth	r3, r3
 800d2e2:	883a      	ldrh	r2, [r7, #0]
 800d2e4:	1ad3      	subs	r3, r2, r3
 800d2e6:	b29a      	uxth	r2, r3
 800d2e8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d2ec:	b29b      	uxth	r3, r3
 800d2ee:	f000 fa83 	bl	800d7f8 <ILI9341_Draw_Vertical_Line>
	for(uint8_t b = 0; ; b++)
 800d2f2:	7bfb      	ldrb	r3, [r7, #15]
 800d2f4:	3301      	adds	r3, #1
 800d2f6:	73fb      	strb	r3, [r7, #15]
		if(b > border_weight)
 800d2f8:	e75f      	b.n	800d1ba <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x22>
										h - (2*b),
										border_colour);

	}

	finish:
 800d2fa:	bf00      	nop
	// done
	return;
 800d2fc:	bf00      	nop
}
 800d2fe:	3714      	adds	r7, #20
 800d300:	46bd      	mov	sp, r7
 800d302:	bd90      	pop	{r4, r7, pc}

0800d304 <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at x,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char character, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 800d304:	b590      	push	{r4, r7, lr}
 800d306:	b089      	sub	sp, #36	; 0x24
 800d308:	af02      	add	r7, sp, #8
 800d30a:	4604      	mov	r4, r0
 800d30c:	4608      	mov	r0, r1
 800d30e:	4611      	mov	r1, r2
 800d310:	461a      	mov	r2, r3
 800d312:	4623      	mov	r3, r4
 800d314:	71fb      	strb	r3, [r7, #7]
 800d316:	4603      	mov	r3, r0
 800d318:	80bb      	strh	r3, [r7, #4]
 800d31a:	460b      	mov	r3, r1
 800d31c:	807b      	strh	r3, [r7, #2]
 800d31e:	4613      	mov	r3, r2
 800d320:	803b      	strh	r3, [r7, #0]
    uint8_t 	i,j;
		



	function_char = character;
 800d322:	79fb      	ldrb	r3, [r7, #7]
 800d324:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ')
 800d326:	7dfb      	ldrb	r3, [r7, #23]
 800d328:	2b1f      	cmp	r3, #31
 800d32a:	d802      	bhi.n	800d332 <ILI9341_Draw_Char+0x2e>
    {
        character = 0;
 800d32c:	2300      	movs	r3, #0
 800d32e:	71fb      	strb	r3, [r7, #7]
 800d330:	e002      	b.n	800d338 <ILI9341_Draw_Char+0x34>
    }
    else
    {
    	function_char -= 32;
 800d332:	7dfb      	ldrb	r3, [r7, #23]
 800d334:	3b20      	subs	r3, #32
 800d336:	75fb      	strb	r3, [r7, #23]
	}
   	
	char temp[CHAR_WIDTH];

	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800d338:	2300      	movs	r3, #0
 800d33a:	753b      	strb	r3, [r7, #20]
 800d33c:	e012      	b.n	800d364 <ILI9341_Draw_Char+0x60>
	{
		temp[k] = font[function_char][k];
 800d33e:	7dfa      	ldrb	r2, [r7, #23]
 800d340:	7d38      	ldrb	r0, [r7, #20]
 800d342:	7d39      	ldrb	r1, [r7, #20]
 800d344:	4c48      	ldr	r4, [pc, #288]	; (800d468 <ILI9341_Draw_Char+0x164>)
 800d346:	4613      	mov	r3, r2
 800d348:	005b      	lsls	r3, r3, #1
 800d34a:	4413      	add	r3, r2
 800d34c:	005b      	lsls	r3, r3, #1
 800d34e:	4423      	add	r3, r4
 800d350:	4403      	add	r3, r0
 800d352:	781a      	ldrb	r2, [r3, #0]
 800d354:	f107 0318 	add.w	r3, r7, #24
 800d358:	440b      	add	r3, r1
 800d35a:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800d35e:	7d3b      	ldrb	r3, [r7, #20]
 800d360:	3301      	adds	r3, #1
 800d362:	753b      	strb	r3, [r7, #20]
 800d364:	7d3b      	ldrb	r3, [r7, #20]
 800d366:	2b05      	cmp	r3, #5
 800d368:	d9e9      	bls.n	800d33e <ILI9341_Draw_Char+0x3a>
	}
		
    // Draw pixels
	//ILI9341_Draw_Rectangle(x, Y, CHAR_WIDTH*size, CHAR_HEIGHT*size, bgcolour);
    for (j=0; j<CHAR_WIDTH; j++)
 800d36a:	2300      	movs	r3, #0
 800d36c:	757b      	strb	r3, [r7, #21]
 800d36e:	e074      	b.n	800d45a <ILI9341_Draw_Char+0x156>
    {
        for (i=0; i<CHAR_HEIGHT; i++)
 800d370:	2300      	movs	r3, #0
 800d372:	75bb      	strb	r3, [r7, #22]
 800d374:	e06b      	b.n	800d44e <ILI9341_Draw_Char+0x14a>
        {
            if (temp[j] & (1<<i))
 800d376:	7d7b      	ldrb	r3, [r7, #21]
 800d378:	f107 0218 	add.w	r2, r7, #24
 800d37c:	4413      	add	r3, r2
 800d37e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800d382:	461a      	mov	r2, r3
 800d384:	7dbb      	ldrb	r3, [r7, #22]
 800d386:	fa42 f303 	asr.w	r3, r2, r3
 800d38a:	f003 0301 	and.w	r3, r3, #1
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d02d      	beq.n	800d3ee <ILI9341_Draw_Char+0xea>
            {
            	if(size == 1)
 800d392:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d394:	2b01      	cmp	r3, #1
 800d396:	d10e      	bne.n	800d3b6 <ILI9341_Draw_Char+0xb2>
				{
            		ILI9341_Draw_Pixel(x+j, y+i, colour);
 800d398:	7d7b      	ldrb	r3, [r7, #21]
 800d39a:	b29a      	uxth	r2, r3
 800d39c:	88bb      	ldrh	r3, [r7, #4]
 800d39e:	4413      	add	r3, r2
 800d3a0:	b298      	uxth	r0, r3
 800d3a2:	7dbb      	ldrb	r3, [r7, #22]
 800d3a4:	b29a      	uxth	r2, r3
 800d3a6:	887b      	ldrh	r3, [r7, #2]
 800d3a8:	4413      	add	r3, r2
 800d3aa:	b29b      	uxth	r3, r3
 800d3ac:	883a      	ldrh	r2, [r7, #0]
 800d3ae:	4619      	mov	r1, r3
 800d3b0:	f000 fae0 	bl	800d974 <ILI9341_Draw_Pixel>
 800d3b4:	e048      	b.n	800d448 <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, colour, TEXT_CHUNK);
 800d3b6:	7d7b      	ldrb	r3, [r7, #21]
 800d3b8:	b29b      	uxth	r3, r3
 800d3ba:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800d3bc:	fb12 f303 	smulbb	r3, r2, r3
 800d3c0:	b29a      	uxth	r2, r3
 800d3c2:	88bb      	ldrh	r3, [r7, #4]
 800d3c4:	4413      	add	r3, r2
 800d3c6:	b298      	uxth	r0, r3
 800d3c8:	7dbb      	ldrb	r3, [r7, #22]
 800d3ca:	b29b      	uxth	r3, r3
 800d3cc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800d3ce:	fb12 f303 	smulbb	r3, r2, r3
 800d3d2:	b29a      	uxth	r2, r3
 800d3d4:	887b      	ldrh	r3, [r7, #2]
 800d3d6:	4413      	add	r3, r2
 800d3d8:	b299      	uxth	r1, r3
 800d3da:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 800d3dc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800d3de:	2301      	movs	r3, #1
 800d3e0:	9301      	str	r3, [sp, #4]
 800d3e2:	883b      	ldrh	r3, [r7, #0]
 800d3e4:	9300      	str	r3, [sp, #0]
 800d3e6:	4623      	mov	r3, r4
 800d3e8:	f000 fbfc 	bl	800dbe4 <ILI9341_Draw_Rectangle>
 800d3ec:	e02c      	b.n	800d448 <ILI9341_Draw_Char+0x144>
				}
            }
            else
            {
               	if(size == 1)
 800d3ee:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d3f0:	2b01      	cmp	r3, #1
 800d3f2:	d10e      	bne.n	800d412 <ILI9341_Draw_Char+0x10e>
				{
					ILI9341_Draw_Pixel(x+j, y+i, bgcolour);
 800d3f4:	7d7b      	ldrb	r3, [r7, #21]
 800d3f6:	b29a      	uxth	r2, r3
 800d3f8:	88bb      	ldrh	r3, [r7, #4]
 800d3fa:	4413      	add	r3, r2
 800d3fc:	b298      	uxth	r0, r3
 800d3fe:	7dbb      	ldrb	r3, [r7, #22]
 800d400:	b29a      	uxth	r2, r3
 800d402:	887b      	ldrh	r3, [r7, #2]
 800d404:	4413      	add	r3, r2
 800d406:	b29b      	uxth	r3, r3
 800d408:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800d40a:	4619      	mov	r1, r3
 800d40c:	f000 fab2 	bl	800d974 <ILI9341_Draw_Pixel>
 800d410:	e01a      	b.n	800d448 <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, bgcolour, TEXT_CHUNK);
 800d412:	7d7b      	ldrb	r3, [r7, #21]
 800d414:	b29b      	uxth	r3, r3
 800d416:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800d418:	fb12 f303 	smulbb	r3, r2, r3
 800d41c:	b29a      	uxth	r2, r3
 800d41e:	88bb      	ldrh	r3, [r7, #4]
 800d420:	4413      	add	r3, r2
 800d422:	b298      	uxth	r0, r3
 800d424:	7dbb      	ldrb	r3, [r7, #22]
 800d426:	b29b      	uxth	r3, r3
 800d428:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800d42a:	fb12 f303 	smulbb	r3, r2, r3
 800d42e:	b29a      	uxth	r2, r3
 800d430:	887b      	ldrh	r3, [r7, #2]
 800d432:	4413      	add	r3, r2
 800d434:	b299      	uxth	r1, r3
 800d436:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 800d438:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800d43a:	2301      	movs	r3, #1
 800d43c:	9301      	str	r3, [sp, #4]
 800d43e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d440:	9300      	str	r3, [sp, #0]
 800d442:	4623      	mov	r3, r4
 800d444:	f000 fbce 	bl	800dbe4 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++)
 800d448:	7dbb      	ldrb	r3, [r7, #22]
 800d44a:	3301      	adds	r3, #1
 800d44c:	75bb      	strb	r3, [r7, #22]
 800d44e:	7dbb      	ldrb	r3, [r7, #22]
 800d450:	2b07      	cmp	r3, #7
 800d452:	d990      	bls.n	800d376 <ILI9341_Draw_Char+0x72>
    for (j=0; j<CHAR_WIDTH; j++)
 800d454:	7d7b      	ldrb	r3, [r7, #21]
 800d456:	3301      	adds	r3, #1
 800d458:	757b      	strb	r3, [r7, #21]
 800d45a:	7d7b      	ldrb	r3, [r7, #21]
 800d45c:	2b05      	cmp	r3, #5
 800d45e:	d987      	bls.n	800d370 <ILI9341_Draw_Char+0x6c>
				}
            }
        }
    }
}
 800d460:	bf00      	nop
 800d462:	371c      	adds	r7, #28
 800d464:	46bd      	mov	sp, r7
 800d466:	bd90      	pop	{r4, r7, pc}
 800d468:	08011d58 	.word	0x08011d58

0800d46c <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at x,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 800d46c:	b590      	push	{r4, r7, lr}
 800d46e:	b087      	sub	sp, #28
 800d470:	af02      	add	r7, sp, #8
 800d472:	60f8      	str	r0, [r7, #12]
 800d474:	4608      	mov	r0, r1
 800d476:	4611      	mov	r1, r2
 800d478:	461a      	mov	r2, r3
 800d47a:	4603      	mov	r3, r0
 800d47c:	817b      	strh	r3, [r7, #10]
 800d47e:	460b      	mov	r3, r1
 800d480:	813b      	strh	r3, [r7, #8]
 800d482:	4613      	mov	r3, r2
 800d484:	80fb      	strh	r3, [r7, #6]
    /*if(size & 1)
    {
    	size = ((size >> 1) * 2);
    }*/

    while (*Text) {
 800d486:	e016      	b.n	800d4b6 <ILI9341_Draw_Text+0x4a>
        ILI9341_Draw_Char(*Text++, x, y, colour, size, bgcolour);
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	1c5a      	adds	r2, r3, #1
 800d48c:	60fa      	str	r2, [r7, #12]
 800d48e:	7818      	ldrb	r0, [r3, #0]
 800d490:	88fc      	ldrh	r4, [r7, #6]
 800d492:	893a      	ldrh	r2, [r7, #8]
 800d494:	8979      	ldrh	r1, [r7, #10]
 800d496:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d498:	9301      	str	r3, [sp, #4]
 800d49a:	8c3b      	ldrh	r3, [r7, #32]
 800d49c:	9300      	str	r3, [sp, #0]
 800d49e:	4623      	mov	r3, r4
 800d4a0:	f7ff ff30 	bl	800d304 <ILI9341_Draw_Char>
        x += CHAR_WIDTH*size;
 800d4a4:	8c3b      	ldrh	r3, [r7, #32]
 800d4a6:	461a      	mov	r2, r3
 800d4a8:	0052      	lsls	r2, r2, #1
 800d4aa:	4413      	add	r3, r2
 800d4ac:	005b      	lsls	r3, r3, #1
 800d4ae:	b29a      	uxth	r2, r3
 800d4b0:	897b      	ldrh	r3, [r7, #10]
 800d4b2:	4413      	add	r3, r2
 800d4b4:	817b      	strh	r3, [r7, #10]
    while (*Text) {
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	781b      	ldrb	r3, [r3, #0]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d1e4      	bne.n	800d488 <ILI9341_Draw_Text+0x1c>
    }


}
 800d4be:	bf00      	nop
 800d4c0:	3714      	adds	r7, #20
 800d4c2:	46bd      	mov	sp, r7
 800d4c4:	bd90      	pop	{r4, r7, pc}
	...

0800d4c8 <ILI9341_FillScreenGradient>:
		GPIOC->ODR |= CS_Pin;
	}
}

void ILI9341_FillScreenGradient()
{
 800d4c8:	b580      	push	{r7, lr}
 800d4ca:	b084      	sub	sp, #16
 800d4cc:	af02      	add	r7, sp, #8
	uint16_t x = 0;
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	80bb      	strh	r3, [r7, #4]
	//ILI9341_Draw_Text("Colour gradient", 10, 10, BLACK, 1, WHITE);
	//ILI9341_Draw_Text("Grayscale", 10, 20, BLACK, 1, WHITE);



	for(uint16_t i = 0; i <= (320); i++)
 800d4d2:	2300      	movs	r3, #0
 800d4d4:	80fb      	strh	r3, [r7, #6]
 800d4d6:	e010      	b.n	800d4fa <ILI9341_FillScreenGradient+0x32>

		uint16_t RGB_color = Red + Green + Blue;
		ILI9341_Draw_Rectangle(i, x, 1, 240, RGB_color, AREA_CHUNK);
*/

	ILI9341_Draw_Rectangle(i, x, 1, 240, (uint16_t)fade_log_seq_data_table[i], AREA_CHUNK);
 800d4d8:	88fb      	ldrh	r3, [r7, #6]
 800d4da:	4a0c      	ldr	r2, [pc, #48]	; (800d50c <ILI9341_FillScreenGradient+0x44>)
 800d4dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d4e0:	b29b      	uxth	r3, r3
 800d4e2:	88b9      	ldrh	r1, [r7, #4]
 800d4e4:	88f8      	ldrh	r0, [r7, #6]
 800d4e6:	2204      	movs	r2, #4
 800d4e8:	9201      	str	r2, [sp, #4]
 800d4ea:	9300      	str	r3, [sp, #0]
 800d4ec:	23f0      	movs	r3, #240	; 0xf0
 800d4ee:	2201      	movs	r2, #1
 800d4f0:	f000 fb78 	bl	800dbe4 <ILI9341_Draw_Rectangle>
	for(uint16_t i = 0; i <= (320); i++)
 800d4f4:	88fb      	ldrh	r3, [r7, #6]
 800d4f6:	3301      	adds	r3, #1
 800d4f8:	80fb      	strh	r3, [r7, #6]
 800d4fa:	88fb      	ldrh	r3, [r7, #6]
 800d4fc:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800d500:	d9ea      	bls.n	800d4d8 <ILI9341_FillScreenGradient+0x10>

	}
}
 800d502:	bf00      	nop
 800d504:	3708      	adds	r7, #8
 800d506:	46bd      	mov	sp, r7
 800d508:	bd80      	pop	{r7, pc}
 800d50a:	bf00      	nop
 800d50c:	20000cb8 	.word	0x20000cb8

0800d510 <ILI9341_Init>:
 *
 * Initialize LCD display
 *
 */
void ILI9341_Init(void)
{
 800d510:	b580      	push	{r7, lr}
 800d512:	af00      	add	r7, sp, #0

	_LCD_Enable();
 800d514:	f000 fc3a 	bl	800dd8c <_LCD_Enable>
	ILI9341_SPI_Init();
 800d518:	f000 f908 	bl	800d72c <ILI9341_SPI_Init>
	_LCD_Reset();
 800d51c:	f000 fc46 	bl	800ddac <_LCD_Reset>

	//SOFTWARE RESET
	_LCD_SendCommand(0x01);
 800d520:	2001      	movs	r0, #1
 800d522:	f000 fd11 	bl	800df48 <_LCD_SendCommand>
	HAL_Delay(2000);
 800d526:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800d52a:	f7fa fdf7 	bl	800811c <HAL_Delay>

	//POWER CONTROL A
	_LCD_SendCommand(0xCB);
 800d52e:	20cb      	movs	r0, #203	; 0xcb
 800d530:	f000 fd0a 	bl	800df48 <_LCD_SendCommand>
	_LCD_SendData(0x39);
 800d534:	2039      	movs	r0, #57	; 0x39
 800d536:	f000 fd39 	bl	800dfac <_LCD_SendData>
	_LCD_SendData(0x2C);
 800d53a:	202c      	movs	r0, #44	; 0x2c
 800d53c:	f000 fd36 	bl	800dfac <_LCD_SendData>
	_LCD_SendData(0x00);
 800d540:	2000      	movs	r0, #0
 800d542:	f000 fd33 	bl	800dfac <_LCD_SendData>
	_LCD_SendData(0x34);
 800d546:	2034      	movs	r0, #52	; 0x34
 800d548:	f000 fd30 	bl	800dfac <_LCD_SendData>
	_LCD_SendData(0x02);
 800d54c:	2002      	movs	r0, #2
 800d54e:	f000 fd2d 	bl	800dfac <_LCD_SendData>

	//POWER CONTROL B
	_LCD_SendCommand(0xCF);
 800d552:	20cf      	movs	r0, #207	; 0xcf
 800d554:	f000 fcf8 	bl	800df48 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800d558:	2000      	movs	r0, #0
 800d55a:	f000 fd27 	bl	800dfac <_LCD_SendData>
	_LCD_SendData(0xC1);
 800d55e:	20c1      	movs	r0, #193	; 0xc1
 800d560:	f000 fd24 	bl	800dfac <_LCD_SendData>
	_LCD_SendData(0x30);
 800d564:	2030      	movs	r0, #48	; 0x30
 800d566:	f000 fd21 	bl	800dfac <_LCD_SendData>

	//DRIVER TIMING CONTROL A
	_LCD_SendCommand(0xE8);
 800d56a:	20e8      	movs	r0, #232	; 0xe8
 800d56c:	f000 fcec 	bl	800df48 <_LCD_SendCommand>
	_LCD_SendData(0x85);
 800d570:	2085      	movs	r0, #133	; 0x85
 800d572:	f000 fd1b 	bl	800dfac <_LCD_SendData>
	_LCD_SendData(0x00);
 800d576:	2000      	movs	r0, #0
 800d578:	f000 fd18 	bl	800dfac <_LCD_SendData>
	_LCD_SendData(0x78);
 800d57c:	2078      	movs	r0, #120	; 0x78
 800d57e:	f000 fd15 	bl	800dfac <_LCD_SendData>

	//DRIVER TIMING CONTROL B
	_LCD_SendCommand(0xEA);
 800d582:	20ea      	movs	r0, #234	; 0xea
 800d584:	f000 fce0 	bl	800df48 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800d588:	2000      	movs	r0, #0
 800d58a:	f000 fd0f 	bl	800dfac <_LCD_SendData>
	_LCD_SendData(0x00);
 800d58e:	2000      	movs	r0, #0
 800d590:	f000 fd0c 	bl	800dfac <_LCD_SendData>

	//POWER ON SEQUENCE CONTROL
	_LCD_SendCommand(0xED);
 800d594:	20ed      	movs	r0, #237	; 0xed
 800d596:	f000 fcd7 	bl	800df48 <_LCD_SendCommand>
	_LCD_SendData(0x64);
 800d59a:	2064      	movs	r0, #100	; 0x64
 800d59c:	f000 fd06 	bl	800dfac <_LCD_SendData>
	_LCD_SendData(0x03);
 800d5a0:	2003      	movs	r0, #3
 800d5a2:	f000 fd03 	bl	800dfac <_LCD_SendData>
	_LCD_SendData(0x12);
 800d5a6:	2012      	movs	r0, #18
 800d5a8:	f000 fd00 	bl	800dfac <_LCD_SendData>
	_LCD_SendData(0x81);
 800d5ac:	2081      	movs	r0, #129	; 0x81
 800d5ae:	f000 fcfd 	bl	800dfac <_LCD_SendData>

	//PUMP RATIO CONTROL
	_LCD_SendCommand(0xF7);
 800d5b2:	20f7      	movs	r0, #247	; 0xf7
 800d5b4:	f000 fcc8 	bl	800df48 <_LCD_SendCommand>
	_LCD_SendData(0x20);
 800d5b8:	2020      	movs	r0, #32
 800d5ba:	f000 fcf7 	bl	800dfac <_LCD_SendData>

	//POWER CONTROL,VRH[5:0]
	_LCD_SendCommand(0xC0);
 800d5be:	20c0      	movs	r0, #192	; 0xc0
 800d5c0:	f000 fcc2 	bl	800df48 <_LCD_SendCommand>
	_LCD_SendData(0x23);
 800d5c4:	2023      	movs	r0, #35	; 0x23
 800d5c6:	f000 fcf1 	bl	800dfac <_LCD_SendData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	_LCD_SendCommand(0xC1);
 800d5ca:	20c1      	movs	r0, #193	; 0xc1
 800d5cc:	f000 fcbc 	bl	800df48 <_LCD_SendCommand>
	_LCD_SendData(0x10);
 800d5d0:	2010      	movs	r0, #16
 800d5d2:	f000 fceb 	bl	800dfac <_LCD_SendData>

	//VCM CONTROL
	_LCD_SendCommand(0xC5);
 800d5d6:	20c5      	movs	r0, #197	; 0xc5
 800d5d8:	f000 fcb6 	bl	800df48 <_LCD_SendCommand>
	_LCD_SendData(0x3E);
 800d5dc:	203e      	movs	r0, #62	; 0x3e
 800d5de:	f000 fce5 	bl	800dfac <_LCD_SendData>
	_LCD_SendData(0x28);
 800d5e2:	2028      	movs	r0, #40	; 0x28
 800d5e4:	f000 fce2 	bl	800dfac <_LCD_SendData>

	//VCM CONTROL 2
	_LCD_SendCommand(0xC7);
 800d5e8:	20c7      	movs	r0, #199	; 0xc7
 800d5ea:	f000 fcad 	bl	800df48 <_LCD_SendCommand>
	_LCD_SendData(0x86);
 800d5ee:	2086      	movs	r0, #134	; 0x86
 800d5f0:	f000 fcdc 	bl	800dfac <_LCD_SendData>

	//MEMORY ACCESS CONTROL
	_LCD_SendCommand(0x36);
 800d5f4:	2036      	movs	r0, #54	; 0x36
 800d5f6:	f000 fca7 	bl	800df48 <_LCD_SendCommand>
	_LCD_SendData(0x48);
 800d5fa:	2048      	movs	r0, #72	; 0x48
 800d5fc:	f000 fcd6 	bl	800dfac <_LCD_SendData>


	//PIXEL FORMAT
	_LCD_SendCommand(0x3A);
 800d600:	203a      	movs	r0, #58	; 0x3a
 800d602:	f000 fca1 	bl	800df48 <_LCD_SendCommand>
	_LCD_SendData(0x55);
 800d606:	2055      	movs	r0, #85	; 0x55
 800d608:	f000 fcd0 	bl	800dfac <_LCD_SendData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	_LCD_SendCommand(0xB1);
 800d60c:	20b1      	movs	r0, #177	; 0xb1
 800d60e:	f000 fc9b 	bl	800df48 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800d612:	2000      	movs	r0, #0
 800d614:	f000 fcca 	bl	800dfac <_LCD_SendData>
	_LCD_SendData(0x18);
 800d618:	2018      	movs	r0, #24
 800d61a:	f000 fcc7 	bl	800dfac <_LCD_SendData>

	//DISPLAY FUNCTION CONTROL
	_LCD_SendCommand(0xB6);
 800d61e:	20b6      	movs	r0, #182	; 0xb6
 800d620:	f000 fc92 	bl	800df48 <_LCD_SendCommand>
	_LCD_SendData(0x08);
 800d624:	2008      	movs	r0, #8
 800d626:	f000 fcc1 	bl	800dfac <_LCD_SendData>
	_LCD_SendData(0x82);
 800d62a:	2082      	movs	r0, #130	; 0x82
 800d62c:	f000 fcbe 	bl	800dfac <_LCD_SendData>
	_LCD_SendData(0x27);
 800d630:	2027      	movs	r0, #39	; 0x27
 800d632:	f000 fcbb 	bl	800dfac <_LCD_SendData>


	//3GAMMA FUNCTION DISABLE
	_LCD_SendCommand(0xF2);
 800d636:	20f2      	movs	r0, #242	; 0xf2
 800d638:	f000 fc86 	bl	800df48 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800d63c:	2000      	movs	r0, #0
 800d63e:	f000 fcb5 	bl	800dfac <_LCD_SendData>

	//GAMMA CURVE SELECTED
	_LCD_SendCommand(0x26);
 800d642:	2026      	movs	r0, #38	; 0x26
 800d644:	f000 fc80 	bl	800df48 <_LCD_SendCommand>
	_LCD_SendData(0x01);
 800d648:	2001      	movs	r0, #1
 800d64a:	f000 fcaf 	bl	800dfac <_LCD_SendData>

	//POSITIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE0);
 800d64e:	20e0      	movs	r0, #224	; 0xe0
 800d650:	f000 fc7a 	bl	800df48 <_LCD_SendCommand>
	_LCD_SendData(0x0F);
 800d654:	200f      	movs	r0, #15
 800d656:	f000 fca9 	bl	800dfac <_LCD_SendData>
	_LCD_SendData(0x31);
 800d65a:	2031      	movs	r0, #49	; 0x31
 800d65c:	f000 fca6 	bl	800dfac <_LCD_SendData>
	_LCD_SendData(0x2B);
 800d660:	202b      	movs	r0, #43	; 0x2b
 800d662:	f000 fca3 	bl	800dfac <_LCD_SendData>
	_LCD_SendData(0x0C);
 800d666:	200c      	movs	r0, #12
 800d668:	f000 fca0 	bl	800dfac <_LCD_SendData>
	_LCD_SendData(0x0E);
 800d66c:	200e      	movs	r0, #14
 800d66e:	f000 fc9d 	bl	800dfac <_LCD_SendData>
	_LCD_SendData(0x08);
 800d672:	2008      	movs	r0, #8
 800d674:	f000 fc9a 	bl	800dfac <_LCD_SendData>
	_LCD_SendData(0x4E);
 800d678:	204e      	movs	r0, #78	; 0x4e
 800d67a:	f000 fc97 	bl	800dfac <_LCD_SendData>
	_LCD_SendData(0xF1);
 800d67e:	20f1      	movs	r0, #241	; 0xf1
 800d680:	f000 fc94 	bl	800dfac <_LCD_SendData>
	_LCD_SendData(0x37);
 800d684:	2037      	movs	r0, #55	; 0x37
 800d686:	f000 fc91 	bl	800dfac <_LCD_SendData>
	_LCD_SendData(0x07);
 800d68a:	2007      	movs	r0, #7
 800d68c:	f000 fc8e 	bl	800dfac <_LCD_SendData>
	_LCD_SendData(0x10);
 800d690:	2010      	movs	r0, #16
 800d692:	f000 fc8b 	bl	800dfac <_LCD_SendData>
	_LCD_SendData(0x03);
 800d696:	2003      	movs	r0, #3
 800d698:	f000 fc88 	bl	800dfac <_LCD_SendData>
	_LCD_SendData(0x0E);
 800d69c:	200e      	movs	r0, #14
 800d69e:	f000 fc85 	bl	800dfac <_LCD_SendData>
	_LCD_SendData(0x09);
 800d6a2:	2009      	movs	r0, #9
 800d6a4:	f000 fc82 	bl	800dfac <_LCD_SendData>
	_LCD_SendData(0x00);
 800d6a8:	2000      	movs	r0, #0
 800d6aa:	f000 fc7f 	bl	800dfac <_LCD_SendData>

	//NEGATIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE1);
 800d6ae:	20e1      	movs	r0, #225	; 0xe1
 800d6b0:	f000 fc4a 	bl	800df48 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800d6b4:	2000      	movs	r0, #0
 800d6b6:	f000 fc79 	bl	800dfac <_LCD_SendData>
	_LCD_SendData(0x0E);
 800d6ba:	200e      	movs	r0, #14
 800d6bc:	f000 fc76 	bl	800dfac <_LCD_SendData>
	_LCD_SendData(0x14);
 800d6c0:	2014      	movs	r0, #20
 800d6c2:	f000 fc73 	bl	800dfac <_LCD_SendData>
	_LCD_SendData(0x03);
 800d6c6:	2003      	movs	r0, #3
 800d6c8:	f000 fc70 	bl	800dfac <_LCD_SendData>
	_LCD_SendData(0x11);
 800d6cc:	2011      	movs	r0, #17
 800d6ce:	f000 fc6d 	bl	800dfac <_LCD_SendData>
	_LCD_SendData(0x07);
 800d6d2:	2007      	movs	r0, #7
 800d6d4:	f000 fc6a 	bl	800dfac <_LCD_SendData>
	_LCD_SendData(0x31);
 800d6d8:	2031      	movs	r0, #49	; 0x31
 800d6da:	f000 fc67 	bl	800dfac <_LCD_SendData>
	_LCD_SendData(0xC1);
 800d6de:	20c1      	movs	r0, #193	; 0xc1
 800d6e0:	f000 fc64 	bl	800dfac <_LCD_SendData>
	_LCD_SendData(0x48);
 800d6e4:	2048      	movs	r0, #72	; 0x48
 800d6e6:	f000 fc61 	bl	800dfac <_LCD_SendData>
	_LCD_SendData(0x08);
 800d6ea:	2008      	movs	r0, #8
 800d6ec:	f000 fc5e 	bl	800dfac <_LCD_SendData>
	_LCD_SendData(0x0F);
 800d6f0:	200f      	movs	r0, #15
 800d6f2:	f000 fc5b 	bl	800dfac <_LCD_SendData>
	_LCD_SendData(0x0C);
 800d6f6:	200c      	movs	r0, #12
 800d6f8:	f000 fc58 	bl	800dfac <_LCD_SendData>
	_LCD_SendData(0x31);
 800d6fc:	2031      	movs	r0, #49	; 0x31
 800d6fe:	f000 fc55 	bl	800dfac <_LCD_SendData>
	_LCD_SendData(0x36);
 800d702:	2036      	movs	r0, #54	; 0x36
 800d704:	f000 fc52 	bl	800dfac <_LCD_SendData>
	_LCD_SendData(0x0F);
 800d708:	200f      	movs	r0, #15
 800d70a:	f000 fc4f 	bl	800dfac <_LCD_SendData>

	//EXIT SLEEP
	_LCD_SendCommand(0x11);
 800d70e:	2011      	movs	r0, #17
 800d710:	f000 fc1a 	bl	800df48 <_LCD_SendCommand>
	HAL_Delay(240);
 800d714:	20f0      	movs	r0, #240	; 0xf0
 800d716:	f7fa fd01 	bl	800811c <HAL_Delay>

	//TURN ON DISPLAY
	_LCD_SendCommand(0x29);
 800d71a:	2029      	movs	r0, #41	; 0x29
 800d71c:	f000 fc14 	bl	800df48 <_LCD_SendCommand>

	//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 800d720:	2000      	movs	r0, #0
 800d722:	f000 fae5 	bl	800dcf0 <ILI9341_Set_Rotation>
}
 800d726:	bf00      	nop
 800d728:	bd80      	pop	{r7, pc}
	...

0800d72c <ILI9341_SPI_Init>:
 *
 * 	Initialise SPI peripheral
 *
 */
void ILI9341_SPI_Init(void)
{
 800d72c:	b480      	push	{r7}
 800d72e:	af00      	add	r7, sp, #0

   	// check SPI enabled
	if ((SPI_PERIPH->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d730:	4b0b      	ldr	r3, [pc, #44]	; (800d760 <ILI9341_SPI_Init+0x34>)
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d738:	2b40      	cmp	r3, #64	; 0x40
 800d73a:	d005      	beq.n	800d748 <ILI9341_SPI_Init+0x1c>
	{
		SPI_PERIPH->CR1 |= SPI_CR1_SPE;
 800d73c:	4b08      	ldr	r3, [pc, #32]	; (800d760 <ILI9341_SPI_Init+0x34>)
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	4a07      	ldr	r2, [pc, #28]	; (800d760 <ILI9341_SPI_Init+0x34>)
 800d742:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d746:	6013      	str	r3, [r2, #0]
	}

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800d748:	4b06      	ldr	r3, [pc, #24]	; (800d764 <ILI9341_SPI_Init+0x38>)
 800d74a:	695b      	ldr	r3, [r3, #20]
 800d74c:	4a05      	ldr	r2, [pc, #20]	; (800d764 <ILI9341_SPI_Init+0x38>)
 800d74e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d752:	6153      	str	r3, [r2, #20]
}
 800d754:	bf00      	nop
 800d756:	46bd      	mov	sp, r7
 800d758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d75c:	4770      	bx	lr
 800d75e:	bf00      	nop
 800d760:	40003c00 	.word	0x40003c00
 800d764:	48000400 	.word	0x48000400

0800d768 <ILI9341_Draw_Horizontal_Line>:
 *	Draw horizontal line
 *
 */

void ILI9341_Draw_Horizontal_Line(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t colour)
{
 800d768:	b590      	push	{r4, r7, lr}
 800d76a:	b085      	sub	sp, #20
 800d76c:	af02      	add	r7, sp, #8
 800d76e:	4604      	mov	r4, r0
 800d770:	4608      	mov	r0, r1
 800d772:	4611      	mov	r1, r2
 800d774:	461a      	mov	r2, r3
 800d776:	4623      	mov	r3, r4
 800d778:	80fb      	strh	r3, [r7, #6]
 800d77a:	4603      	mov	r3, r0
 800d77c:	80bb      	strh	r3, [r7, #4]
 800d77e:	460b      	mov	r3, r1
 800d780:	807b      	strh	r3, [r7, #2]
 800d782:	4613      	mov	r3, r2
 800d784:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800d786:	4b1a      	ldr	r3, [pc, #104]	; (800d7f0 <ILI9341_Draw_Horizontal_Line+0x88>)
 800d788:	881b      	ldrh	r3, [r3, #0]
 800d78a:	b29b      	uxth	r3, r3
 800d78c:	88fa      	ldrh	r2, [r7, #6]
 800d78e:	429a      	cmp	r2, r3
 800d790:	d229      	bcs.n	800d7e6 <ILI9341_Draw_Horizontal_Line+0x7e>
 800d792:	4b18      	ldr	r3, [pc, #96]	; (800d7f4 <ILI9341_Draw_Horizontal_Line+0x8c>)
 800d794:	881b      	ldrh	r3, [r3, #0]
 800d796:	b29b      	uxth	r3, r3
 800d798:	88ba      	ldrh	r2, [r7, #4]
 800d79a:	429a      	cmp	r2, r3
 800d79c:	d223      	bcs.n	800d7e6 <ILI9341_Draw_Horizontal_Line+0x7e>
	if(((xpos + width) - 1 ) >= LCD_WIDTH)
 800d79e:	88fa      	ldrh	r2, [r7, #6]
 800d7a0:	887b      	ldrh	r3, [r7, #2]
 800d7a2:	4413      	add	r3, r2
 800d7a4:	3b01      	subs	r3, #1
 800d7a6:	4a12      	ldr	r2, [pc, #72]	; (800d7f0 <ILI9341_Draw_Horizontal_Line+0x88>)
 800d7a8:	8812      	ldrh	r2, [r2, #0]
 800d7aa:	b292      	uxth	r2, r2
 800d7ac:	4293      	cmp	r3, r2
 800d7ae:	db05      	blt.n	800d7bc <ILI9341_Draw_Horizontal_Line+0x54>
		{
			width= LCD_WIDTH - xpos;
 800d7b0:	4b0f      	ldr	r3, [pc, #60]	; (800d7f0 <ILI9341_Draw_Horizontal_Line+0x88>)
 800d7b2:	881b      	ldrh	r3, [r3, #0]
 800d7b4:	b29a      	uxth	r2, r3
 800d7b6:	88fb      	ldrh	r3, [r7, #6]
 800d7b8:	1ad3      	subs	r3, r2, r3
 800d7ba:	807b      	strh	r3, [r7, #2]
		}
	ILI9341_Set_Frame(	xpos,
							ypos,
							(xpos + width) - 1,
 800d7bc:	88fa      	ldrh	r2, [r7, #6]
 800d7be:	887b      	ldrh	r3, [r7, #2]
 800d7c0:	4413      	add	r3, r2
 800d7c2:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800d7c4:	3b01      	subs	r3, #1
 800d7c6:	b29a      	uxth	r2, r3
 800d7c8:	88bb      	ldrh	r3, [r7, #4]
 800d7ca:	88b9      	ldrh	r1, [r7, #4]
 800d7cc:	88f8      	ldrh	r0, [r7, #6]
 800d7ce:	f000 f85b 	bl	800d888 <ILI9341_Set_Frame>
							ypos);

	_LCD_Write_Frame(xpos, ypos, colour, width, LINE_CHUNK);
 800d7d2:	887c      	ldrh	r4, [r7, #2]
 800d7d4:	883a      	ldrh	r2, [r7, #0]
 800d7d6:	88b9      	ldrh	r1, [r7, #4]
 800d7d8:	88f8      	ldrh	r0, [r7, #6]
 800d7da:	2303      	movs	r3, #3
 800d7dc:	9300      	str	r3, [sp, #0]
 800d7de:	4623      	mov	r3, r4
 800d7e0:	f000 fb02 	bl	800dde8 <_LCD_Write_Frame>
 800d7e4:	e000      	b.n	800d7e8 <ILI9341_Draw_Horizontal_Line+0x80>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800d7e6:	bf00      	nop
}
 800d7e8:	370c      	adds	r7, #12
 800d7ea:	46bd      	mov	sp, r7
 800d7ec:	bd90      	pop	{r4, r7, pc}
 800d7ee:	bf00      	nop
 800d7f0:	20000cb2 	.word	0x20000cb2
 800d7f4:	20000cb0 	.word	0x20000cb0

0800d7f8 <ILI9341_Draw_Vertical_Line>:
 *
 *  Draw vertical line
 *
 */
void ILI9341_Draw_Vertical_Line(uint16_t xpos, uint16_t ypos, uint16_t height, uint16_t colour)
{
 800d7f8:	b590      	push	{r4, r7, lr}
 800d7fa:	b085      	sub	sp, #20
 800d7fc:	af02      	add	r7, sp, #8
 800d7fe:	4604      	mov	r4, r0
 800d800:	4608      	mov	r0, r1
 800d802:	4611      	mov	r1, r2
 800d804:	461a      	mov	r2, r3
 800d806:	4623      	mov	r3, r4
 800d808:	80fb      	strh	r3, [r7, #6]
 800d80a:	4603      	mov	r3, r0
 800d80c:	80bb      	strh	r3, [r7, #4]
 800d80e:	460b      	mov	r3, r1
 800d810:	807b      	strh	r3, [r7, #2]
 800d812:	4613      	mov	r3, r2
 800d814:	803b      	strh	r3, [r7, #0]
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 800d816:	4b1a      	ldr	r3, [pc, #104]	; (800d880 <ILI9341_Draw_Vertical_Line+0x88>)
 800d818:	881b      	ldrh	r3, [r3, #0]
 800d81a:	b29b      	uxth	r3, r3
 800d81c:	88fa      	ldrh	r2, [r7, #6]
 800d81e:	429a      	cmp	r2, r3
 800d820:	d229      	bcs.n	800d876 <ILI9341_Draw_Vertical_Line+0x7e>
 800d822:	4b18      	ldr	r3, [pc, #96]	; (800d884 <ILI9341_Draw_Vertical_Line+0x8c>)
 800d824:	881b      	ldrh	r3, [r3, #0]
 800d826:	b29b      	uxth	r3, r3
 800d828:	88ba      	ldrh	r2, [r7, #4]
 800d82a:	429a      	cmp	r2, r3
 800d82c:	d223      	bcs.n	800d876 <ILI9341_Draw_Vertical_Line+0x7e>
	if(((ypos + height) - 1) >= LCD_HEIGHT)
 800d82e:	88ba      	ldrh	r2, [r7, #4]
 800d830:	887b      	ldrh	r3, [r7, #2]
 800d832:	4413      	add	r3, r2
 800d834:	3b01      	subs	r3, #1
 800d836:	4a13      	ldr	r2, [pc, #76]	; (800d884 <ILI9341_Draw_Vertical_Line+0x8c>)
 800d838:	8812      	ldrh	r2, [r2, #0]
 800d83a:	b292      	uxth	r2, r2
 800d83c:	4293      	cmp	r3, r2
 800d83e:	db05      	blt.n	800d84c <ILI9341_Draw_Vertical_Line+0x54>
		{
			height= LCD_HEIGHT - ypos;
 800d840:	4b10      	ldr	r3, [pc, #64]	; (800d884 <ILI9341_Draw_Vertical_Line+0x8c>)
 800d842:	881b      	ldrh	r3, [r3, #0]
 800d844:	b29a      	uxth	r2, r3
 800d846:	88bb      	ldrh	r3, [r7, #4]
 800d848:	1ad3      	subs	r3, r2, r3
 800d84a:	807b      	strh	r3, [r7, #2]
		}
	ILI9341_Set_Frame(xpos, ypos, xpos, (ypos + height) - 1);
 800d84c:	88ba      	ldrh	r2, [r7, #4]
 800d84e:	887b      	ldrh	r3, [r7, #2]
 800d850:	4413      	add	r3, r2
 800d852:	b29b      	uxth	r3, r3
 800d854:	3b01      	subs	r3, #1
 800d856:	b29b      	uxth	r3, r3
 800d858:	88fa      	ldrh	r2, [r7, #6]
 800d85a:	88b9      	ldrh	r1, [r7, #4]
 800d85c:	88f8      	ldrh	r0, [r7, #6]
 800d85e:	f000 f813 	bl	800d888 <ILI9341_Set_Frame>
	_LCD_Write_Frame(xpos, ypos, colour, height, LINE_CHUNK);
 800d862:	887c      	ldrh	r4, [r7, #2]
 800d864:	883a      	ldrh	r2, [r7, #0]
 800d866:	88b9      	ldrh	r1, [r7, #4]
 800d868:	88f8      	ldrh	r0, [r7, #6]
 800d86a:	2303      	movs	r3, #3
 800d86c:	9300      	str	r3, [sp, #0]
 800d86e:	4623      	mov	r3, r4
 800d870:	f000 faba 	bl	800dde8 <_LCD_Write_Frame>
 800d874:	e000      	b.n	800d878 <ILI9341_Draw_Vertical_Line+0x80>
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 800d876:	bf00      	nop
}
 800d878:	370c      	adds	r7, #12
 800d87a:	46bd      	mov	sp, r7
 800d87c:	bd90      	pop	{r4, r7, pc}
 800d87e:	bf00      	nop
 800d880:	20000cb2 	.word	0x20000cb2
 800d884:	20000cb0 	.word	0x20000cb0

0800d888 <ILI9341_Set_Frame>:
 *	bottom right of area (ec, ep):
 *	ec 	- 	"end column"
 *	ep	- 	"end page"
 */
void ILI9341_Set_Frame(uint16_t sc, uint16_t sp, uint16_t ec, uint16_t ep)
{
 800d888:	b590      	push	{r4, r7, lr}
 800d88a:	b083      	sub	sp, #12
 800d88c:	af00      	add	r7, sp, #0
 800d88e:	4604      	mov	r4, r0
 800d890:	4608      	mov	r0, r1
 800d892:	4611      	mov	r1, r2
 800d894:	461a      	mov	r2, r3
 800d896:	4623      	mov	r3, r4
 800d898:	80fb      	strh	r3, [r7, #6]
 800d89a:	4603      	mov	r3, r0
 800d89c:	80bb      	strh	r3, [r7, #4]
 800d89e:	460b      	mov	r3, r1
 800d8a0:	807b      	strh	r3, [r7, #2]
 800d8a2:	4613      	mov	r3, r2
 800d8a4:	803b      	strh	r3, [r7, #0]
	// send "Column Address Set" command
	_LCD_SendCommand(0x2A);
 800d8a6:	202a      	movs	r0, #42	; 0x2a
 800d8a8:	f000 fb4e 	bl	800df48 <_LCD_SendCommand>
	_LCD_SendData(sc >> 8);
 800d8ac:	88fb      	ldrh	r3, [r7, #6]
 800d8ae:	0a1b      	lsrs	r3, r3, #8
 800d8b0:	b29b      	uxth	r3, r3
 800d8b2:	b2db      	uxtb	r3, r3
 800d8b4:	4618      	mov	r0, r3
 800d8b6:	f000 fb79 	bl	800dfac <_LCD_SendData>
	_LCD_SendData(sc);
 800d8ba:	88fb      	ldrh	r3, [r7, #6]
 800d8bc:	b2db      	uxtb	r3, r3
 800d8be:	4618      	mov	r0, r3
 800d8c0:	f000 fb74 	bl	800dfac <_LCD_SendData>
	_LCD_SendData(ec >> 8);
 800d8c4:	887b      	ldrh	r3, [r7, #2]
 800d8c6:	0a1b      	lsrs	r3, r3, #8
 800d8c8:	b29b      	uxth	r3, r3
 800d8ca:	b2db      	uxtb	r3, r3
 800d8cc:	4618      	mov	r0, r3
 800d8ce:	f000 fb6d 	bl	800dfac <_LCD_SendData>
	_LCD_SendData(ec);
 800d8d2:	887b      	ldrh	r3, [r7, #2]
 800d8d4:	b2db      	uxtb	r3, r3
 800d8d6:	4618      	mov	r0, r3
 800d8d8:	f000 fb68 	bl	800dfac <_LCD_SendData>

	// send "Page Address Set" command
	_LCD_SendCommand(0x2B);
 800d8dc:	202b      	movs	r0, #43	; 0x2b
 800d8de:	f000 fb33 	bl	800df48 <_LCD_SendCommand>
	_LCD_SendData(sp >> 8);
 800d8e2:	88bb      	ldrh	r3, [r7, #4]
 800d8e4:	0a1b      	lsrs	r3, r3, #8
 800d8e6:	b29b      	uxth	r3, r3
 800d8e8:	b2db      	uxtb	r3, r3
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	f000 fb5e 	bl	800dfac <_LCD_SendData>
	_LCD_SendData(sp);
 800d8f0:	88bb      	ldrh	r3, [r7, #4]
 800d8f2:	b2db      	uxtb	r3, r3
 800d8f4:	4618      	mov	r0, r3
 800d8f6:	f000 fb59 	bl	800dfac <_LCD_SendData>
	_LCD_SendData(ep >> 8);
 800d8fa:	883b      	ldrh	r3, [r7, #0]
 800d8fc:	0a1b      	lsrs	r3, r3, #8
 800d8fe:	b29b      	uxth	r3, r3
 800d900:	b2db      	uxtb	r3, r3
 800d902:	4618      	mov	r0, r3
 800d904:	f000 fb52 	bl	800dfac <_LCD_SendData>
	_LCD_SendData(ep);
 800d908:	883b      	ldrh	r3, [r7, #0]
 800d90a:	b2db      	uxtb	r3, r3
 800d90c:	4618      	mov	r0, r3
 800d90e:	f000 fb4d 	bl	800dfac <_LCD_SendData>

	_LCD_SendCommand(0x2C);
 800d912:	202c      	movs	r0, #44	; 0x2c
 800d914:	f000 fb18 	bl	800df48 <_LCD_SendCommand>
}
 800d918:	bf00      	nop
 800d91a:	370c      	adds	r7, #12
 800d91c:	46bd      	mov	sp, r7
 800d91e:	bd90      	pop	{r4, r7, pc}

0800d920 <ILI9341_Fill_Screen>:
 *
 * 	Sets address (entire screen) and Sends height*width ammount of colour information to LCD
 *
 */
void ILI9341_Fill_Screen(uint16_t colour)
{
 800d920:	b580      	push	{r7, lr}
 800d922:	b084      	sub	sp, #16
 800d924:	af02      	add	r7, sp, #8
 800d926:	4603      	mov	r3, r0
 800d928:	80fb      	strh	r3, [r7, #6]
	ILI9341_Set_Frame(0,0,LCD_WIDTH,LCD_HEIGHT);
 800d92a:	4b10      	ldr	r3, [pc, #64]	; (800d96c <ILI9341_Fill_Screen+0x4c>)
 800d92c:	881b      	ldrh	r3, [r3, #0]
 800d92e:	b29a      	uxth	r2, r3
 800d930:	4b0f      	ldr	r3, [pc, #60]	; (800d970 <ILI9341_Fill_Screen+0x50>)
 800d932:	881b      	ldrh	r3, [r3, #0]
 800d934:	b29b      	uxth	r3, r3
 800d936:	2100      	movs	r1, #0
 800d938:	2000      	movs	r0, #0
 800d93a:	f7ff ffa5 	bl	800d888 <ILI9341_Set_Frame>
	_LCD_Write_Frame(0, 0, colour, LCD_WIDTH*LCD_HEIGHT, AREA_CHUNK);
 800d93e:	4b0b      	ldr	r3, [pc, #44]	; (800d96c <ILI9341_Fill_Screen+0x4c>)
 800d940:	881b      	ldrh	r3, [r3, #0]
 800d942:	b29b      	uxth	r3, r3
 800d944:	461a      	mov	r2, r3
 800d946:	4b0a      	ldr	r3, [pc, #40]	; (800d970 <ILI9341_Fill_Screen+0x50>)
 800d948:	881b      	ldrh	r3, [r3, #0]
 800d94a:	b29b      	uxth	r3, r3
 800d94c:	fb03 f302 	mul.w	r3, r3, r2
 800d950:	4619      	mov	r1, r3
 800d952:	88fa      	ldrh	r2, [r7, #6]
 800d954:	2304      	movs	r3, #4
 800d956:	9300      	str	r3, [sp, #0]
 800d958:	460b      	mov	r3, r1
 800d95a:	2100      	movs	r1, #0
 800d95c:	2000      	movs	r0, #0
 800d95e:	f000 fa43 	bl	800dde8 <_LCD_Write_Frame>
}
 800d962:	bf00      	nop
 800d964:	3708      	adds	r7, #8
 800d966:	46bd      	mov	sp, r7
 800d968:	bd80      	pop	{r7, pc}
 800d96a:	bf00      	nop
 800d96c:	20000cb2 	.word	0x20000cb2
 800d970:	20000cb0 	.word	0x20000cb0

0800d974 <ILI9341_Draw_Pixel>:
 * 	Using pixels to draw big simple structures is not recommended as it is really slow
 * 	Try using either rectangles or lines if possible
 *
 */
void ILI9341_Draw_Pixel(uint16_t x,uint16_t y,uint16_t colour)
{
 800d974:	b580      	push	{r7, lr}
 800d976:	b08c      	sub	sp, #48	; 0x30
 800d978:	af00      	add	r7, sp, #0
 800d97a:	4603      	mov	r3, r0
 800d97c:	80fb      	strh	r3, [r7, #6]
 800d97e:	460b      	mov	r3, r1
 800d980:	80bb      	strh	r3, [r7, #4]
 800d982:	4613      	mov	r3, r2
 800d984:	807b      	strh	r3, [r7, #2]
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800d986:	4b94      	ldr	r3, [pc, #592]	; (800dbd8 <ILI9341_Draw_Pixel+0x264>)
 800d988:	881b      	ldrh	r3, [r3, #0]
 800d98a:	b29b      	uxth	r3, r3
 800d98c:	88fa      	ldrh	r2, [r7, #6]
 800d98e:	429a      	cmp	r2, r3
 800d990:	f080 811e 	bcs.w	800dbd0 <ILI9341_Draw_Pixel+0x25c>
 800d994:	4b91      	ldr	r3, [pc, #580]	; (800dbdc <ILI9341_Draw_Pixel+0x268>)
 800d996:	881b      	ldrh	r3, [r3, #0]
 800d998:	b29b      	uxth	r3, r3
 800d99a:	88ba      	ldrh	r2, [r7, #4]
 800d99c:	429a      	cmp	r2, r3
 800d99e:	f080 8117 	bcs.w	800dbd0 <ILI9341_Draw_Pixel+0x25c>

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800d9a2:	4b8f      	ldr	r3, [pc, #572]	; (800dbe0 <ILI9341_Draw_Pixel+0x26c>)
 800d9a4:	695b      	ldr	r3, [r3, #20]
 800d9a6:	4a8e      	ldr	r2, [pc, #568]	; (800dbe0 <ILI9341_Draw_Pixel+0x26c>)
 800d9a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d9ac:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800d9ae:	4b8c      	ldr	r3, [pc, #560]	; (800dbe0 <ILI9341_Draw_Pixel+0x26c>)
 800d9b0:	695b      	ldr	r3, [r3, #20]
 800d9b2:	4a8b      	ldr	r2, [pc, #556]	; (800dbe0 <ILI9341_Draw_Pixel+0x26c>)
 800d9b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d9b8:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(0x2A, 0, 0);
 800d9ba:	2200      	movs	r2, #0
 800d9bc:	2100      	movs	r1, #0
 800d9be:	202a      	movs	r0, #42	; 0x2a
 800d9c0:	f000 fb26 	bl	800e010 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800d9c4:	2300      	movs	r3, #0
 800d9c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d9c8:	e008      	b.n	800d9dc <ILI9341_Draw_Pixel+0x68>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800d9ca:	4b85      	ldr	r3, [pc, #532]	; (800dbe0 <ILI9341_Draw_Pixel+0x26c>)
 800d9cc:	695b      	ldr	r3, [r3, #20]
 800d9ce:	4a84      	ldr	r2, [pc, #528]	; (800dbe0 <ILI9341_Draw_Pixel+0x26c>)
 800d9d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d9d4:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800d9d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9d8:	3301      	adds	r3, #1
 800d9da:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d9dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9de:	2b02      	cmp	r3, #2
 800d9e0:	ddf3      	ble.n	800d9ca <ILI9341_Draw_Pixel+0x56>

	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800d9e2:	4b7f      	ldr	r3, [pc, #508]	; (800dbe0 <ILI9341_Draw_Pixel+0x26c>)
 800d9e4:	695b      	ldr	r3, [r3, #20]
 800d9e6:	4a7e      	ldr	r2, [pc, #504]	; (800dbe0 <ILI9341_Draw_Pixel+0x26c>)
 800d9e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d9ec:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800d9ee:	4b7c      	ldr	r3, [pc, #496]	; (800dbe0 <ILI9341_Draw_Pixel+0x26c>)
 800d9f0:	695b      	ldr	r3, [r3, #20]
 800d9f2:	4a7b      	ldr	r2, [pc, #492]	; (800dbe0 <ILI9341_Draw_Pixel+0x26c>)
 800d9f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d9f8:	6153      	str	r3, [r2, #20]

	//XDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800d9fa:	4b79      	ldr	r3, [pc, #484]	; (800dbe0 <ILI9341_Draw_Pixel+0x26c>)
 800d9fc:	695b      	ldr	r3, [r3, #20]
 800d9fe:	4a78      	ldr	r2, [pc, #480]	; (800dbe0 <ILI9341_Draw_Pixel+0x26c>)
 800da00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800da04:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer[4] =
 800da06:	88fb      	ldrh	r3, [r7, #6]
 800da08:	0a1b      	lsrs	r3, r3, #8
 800da0a:	b29b      	uxth	r3, r3
 800da0c:	b2db      	uxtb	r3, r3
 800da0e:	753b      	strb	r3, [r7, #20]
 800da10:	88fb      	ldrh	r3, [r7, #6]
 800da12:	b2db      	uxtb	r3, r3
 800da14:	757b      	strb	r3, [r7, #21]
	{
			x >> 8,
			x,
			(x + 1) >> 8,
 800da16:	88fb      	ldrh	r3, [r7, #6]
 800da18:	3301      	adds	r3, #1
 800da1a:	121b      	asrs	r3, r3, #8
	unsigned char Temp_Buffer[4] =
 800da1c:	b2db      	uxtb	r3, r3
 800da1e:	75bb      	strb	r3, [r7, #22]
			(x + 1)
 800da20:	88fb      	ldrh	r3, [r7, #6]
 800da22:	b2db      	uxtb	r3, r3
 800da24:	3301      	adds	r3, #1
 800da26:	b2db      	uxtb	r3, r3
	unsigned char Temp_Buffer[4] =
 800da28:	75fb      	strb	r3, [r7, #23]
	};

	_SPI_SendByteMultiByte(Temp_Buffer, 4, 0, 10);
 800da2a:	f107 0014 	add.w	r0, r7, #20
 800da2e:	230a      	movs	r3, #10
 800da30:	2200      	movs	r2, #0
 800da32:	2104      	movs	r1, #4
 800da34:	f000 fb1e 	bl	800e074 <_SPI_SendByteMultiByte>
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1 );

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800da38:	2300      	movs	r3, #0
 800da3a:	62bb      	str	r3, [r7, #40]	; 0x28
 800da3c:	e008      	b.n	800da50 <ILI9341_Draw_Pixel+0xdc>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800da3e:	4b68      	ldr	r3, [pc, #416]	; (800dbe0 <ILI9341_Draw_Pixel+0x26c>)
 800da40:	695b      	ldr	r3, [r3, #20]
 800da42:	4a67      	ldr	r2, [pc, #412]	; (800dbe0 <ILI9341_Draw_Pixel+0x26c>)
 800da44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800da48:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800da4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da4c:	3301      	adds	r3, #1
 800da4e:	62bb      	str	r3, [r7, #40]	; 0x28
 800da50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da52:	2b02      	cmp	r3, #2
 800da54:	ddf3      	ble.n	800da3e <ILI9341_Draw_Pixel+0xca>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800da56:	4b62      	ldr	r3, [pc, #392]	; (800dbe0 <ILI9341_Draw_Pixel+0x26c>)
 800da58:	695b      	ldr	r3, [r3, #20]
 800da5a:	4a61      	ldr	r2, [pc, #388]	; (800dbe0 <ILI9341_Draw_Pixel+0x26c>)
 800da5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800da60:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800da62:	4b5f      	ldr	r3, [pc, #380]	; (800dbe0 <ILI9341_Draw_Pixel+0x26c>)
 800da64:	695b      	ldr	r3, [r3, #20]
 800da66:	4a5e      	ldr	r2, [pc, #376]	; (800dbe0 <ILI9341_Draw_Pixel+0x26c>)
 800da68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800da6c:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800da6e:	4b5c      	ldr	r3, [pc, #368]	; (800dbe0 <ILI9341_Draw_Pixel+0x26c>)
 800da70:	695b      	ldr	r3, [r3, #20]
 800da72:	4a5b      	ldr	r2, [pc, #364]	; (800dbe0 <ILI9341_Draw_Pixel+0x26c>)
 800da74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800da78:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(0x2B, 0, 0);
 800da7a:	2200      	movs	r2, #0
 800da7c:	2100      	movs	r1, #0
 800da7e:	202b      	movs	r0, #43	; 0x2b
 800da80:	f000 fac6 	bl	800e010 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800da84:	2300      	movs	r3, #0
 800da86:	627b      	str	r3, [r7, #36]	; 0x24
 800da88:	e008      	b.n	800da9c <ILI9341_Draw_Pixel+0x128>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800da8a:	4b55      	ldr	r3, [pc, #340]	; (800dbe0 <ILI9341_Draw_Pixel+0x26c>)
 800da8c:	695b      	ldr	r3, [r3, #20]
 800da8e:	4a54      	ldr	r2, [pc, #336]	; (800dbe0 <ILI9341_Draw_Pixel+0x26c>)
 800da90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800da94:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800da96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da98:	3301      	adds	r3, #1
 800da9a:	627b      	str	r3, [r7, #36]	; 0x24
 800da9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da9e:	2b02      	cmp	r3, #2
 800daa0:	ddf3      	ble.n	800da8a <ILI9341_Draw_Pixel+0x116>

	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800daa2:	4b4f      	ldr	r3, [pc, #316]	; (800dbe0 <ILI9341_Draw_Pixel+0x26c>)
 800daa4:	695b      	ldr	r3, [r3, #20]
 800daa6:	4a4e      	ldr	r2, [pc, #312]	; (800dbe0 <ILI9341_Draw_Pixel+0x26c>)
 800daa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800daac:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800daae:	4b4c      	ldr	r3, [pc, #304]	; (800dbe0 <ILI9341_Draw_Pixel+0x26c>)
 800dab0:	695b      	ldr	r3, [r3, #20]
 800dab2:	4a4b      	ldr	r2, [pc, #300]	; (800dbe0 <ILI9341_Draw_Pixel+0x26c>)
 800dab4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dab8:	6153      	str	r3, [r2, #20]

	//YDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800daba:	4b49      	ldr	r3, [pc, #292]	; (800dbe0 <ILI9341_Draw_Pixel+0x26c>)
 800dabc:	695b      	ldr	r3, [r3, #20]
 800dabe:	4a48      	ldr	r2, [pc, #288]	; (800dbe0 <ILI9341_Draw_Pixel+0x26c>)
 800dac0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dac4:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer1[4] =
 800dac6:	88bb      	ldrh	r3, [r7, #4]
 800dac8:	0a1b      	lsrs	r3, r3, #8
 800daca:	b29b      	uxth	r3, r3
 800dacc:	b2db      	uxtb	r3, r3
 800dace:	743b      	strb	r3, [r7, #16]
 800dad0:	88bb      	ldrh	r3, [r7, #4]
 800dad2:	b2db      	uxtb	r3, r3
 800dad4:	747b      	strb	r3, [r7, #17]
	{
			y >> 8,
			y,
			(y + 1) >> 8,
 800dad6:	88bb      	ldrh	r3, [r7, #4]
 800dad8:	3301      	adds	r3, #1
 800dada:	121b      	asrs	r3, r3, #8
	unsigned char Temp_Buffer1[4] =
 800dadc:	b2db      	uxtb	r3, r3
 800dade:	74bb      	strb	r3, [r7, #18]
			(y + 1)
 800dae0:	88bb      	ldrh	r3, [r7, #4]
 800dae2:	b2db      	uxtb	r3, r3
 800dae4:	3301      	adds	r3, #1
 800dae6:	b2db      	uxtb	r3, r3
	unsigned char Temp_Buffer1[4] =
 800dae8:	74fb      	strb	r3, [r7, #19]
	};

	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1 );
	_SPI_SendByteMultiByte(Temp_Buffer1, 4, 0, 10);
 800daea:	f107 0010 	add.w	r0, r7, #16
 800daee:	230a      	movs	r3, #10
 800daf0:	2200      	movs	r2, #0
 800daf2:	2104      	movs	r1, #4
 800daf4:	f000 fabe 	bl	800e074 <_SPI_SendByteMultiByte>

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800daf8:	2300      	movs	r3, #0
 800dafa:	623b      	str	r3, [r7, #32]
 800dafc:	e008      	b.n	800db10 <ILI9341_Draw_Pixel+0x19c>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800dafe:	4b38      	ldr	r3, [pc, #224]	; (800dbe0 <ILI9341_Draw_Pixel+0x26c>)
 800db00:	695b      	ldr	r3, [r3, #20]
 800db02:	4a37      	ldr	r2, [pc, #220]	; (800dbe0 <ILI9341_Draw_Pixel+0x26c>)
 800db04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800db08:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800db0a:	6a3b      	ldr	r3, [r7, #32]
 800db0c:	3301      	adds	r3, #1
 800db0e:	623b      	str	r3, [r7, #32]
 800db10:	6a3b      	ldr	r3, [r7, #32]
 800db12:	2b02      	cmp	r3, #2
 800db14:	ddf3      	ble.n	800dafe <ILI9341_Draw_Pixel+0x18a>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800db16:	4b32      	ldr	r3, [pc, #200]	; (800dbe0 <ILI9341_Draw_Pixel+0x26c>)
 800db18:	695b      	ldr	r3, [r3, #20]
 800db1a:	4a31      	ldr	r2, [pc, #196]	; (800dbe0 <ILI9341_Draw_Pixel+0x26c>)
 800db1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db20:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800db22:	4b2f      	ldr	r3, [pc, #188]	; (800dbe0 <ILI9341_Draw_Pixel+0x26c>)
 800db24:	695b      	ldr	r3, [r3, #20]
 800db26:	4a2e      	ldr	r2, [pc, #184]	; (800dbe0 <ILI9341_Draw_Pixel+0x26c>)
 800db28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800db2c:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800db2e:	4b2c      	ldr	r3, [pc, #176]	; (800dbe0 <ILI9341_Draw_Pixel+0x26c>)
 800db30:	695b      	ldr	r3, [r3, #20]
 800db32:	4a2b      	ldr	r2, [pc, #172]	; (800dbe0 <ILI9341_Draw_Pixel+0x26c>)
 800db34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800db38:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(0x2C, 0, 0);
 800db3a:	2200      	movs	r2, #0
 800db3c:	2100      	movs	r1, #0
 800db3e:	202c      	movs	r0, #44	; 0x2c
 800db40:	f000 fa66 	bl	800e010 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800db44:	2300      	movs	r3, #0
 800db46:	61fb      	str	r3, [r7, #28]
 800db48:	e008      	b.n	800db5c <ILI9341_Draw_Pixel+0x1e8>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800db4a:	4b25      	ldr	r3, [pc, #148]	; (800dbe0 <ILI9341_Draw_Pixel+0x26c>)
 800db4c:	695b      	ldr	r3, [r3, #20]
 800db4e:	4a24      	ldr	r2, [pc, #144]	; (800dbe0 <ILI9341_Draw_Pixel+0x26c>)
 800db50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800db54:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800db56:	69fb      	ldr	r3, [r7, #28]
 800db58:	3301      	adds	r3, #1
 800db5a:	61fb      	str	r3, [r7, #28]
 800db5c:	69fb      	ldr	r3, [r7, #28]
 800db5e:	2b02      	cmp	r3, #2
 800db60:	ddf3      	ble.n	800db4a <ILI9341_Draw_Pixel+0x1d6>

	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800db62:	4b1f      	ldr	r3, [pc, #124]	; (800dbe0 <ILI9341_Draw_Pixel+0x26c>)
 800db64:	695b      	ldr	r3, [r3, #20]
 800db66:	4a1e      	ldr	r2, [pc, #120]	; (800dbe0 <ILI9341_Draw_Pixel+0x26c>)
 800db68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800db6c:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800db6e:	4b1c      	ldr	r3, [pc, #112]	; (800dbe0 <ILI9341_Draw_Pixel+0x26c>)
 800db70:	695b      	ldr	r3, [r3, #20]
 800db72:	4a1b      	ldr	r2, [pc, #108]	; (800dbe0 <ILI9341_Draw_Pixel+0x26c>)
 800db74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db78:	6153      	str	r3, [r2, #20]

	//COLOUR
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800db7a:	4b19      	ldr	r3, [pc, #100]	; (800dbe0 <ILI9341_Draw_Pixel+0x26c>)
 800db7c:	695b      	ldr	r3, [r3, #20]
 800db7e:	4a18      	ldr	r2, [pc, #96]	; (800dbe0 <ILI9341_Draw_Pixel+0x26c>)
 800db80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800db84:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer2[2] = {colour>>8, colour};
 800db86:	887b      	ldrh	r3, [r7, #2]
 800db88:	0a1b      	lsrs	r3, r3, #8
 800db8a:	b29b      	uxth	r3, r3
 800db8c:	b2db      	uxtb	r3, r3
 800db8e:	733b      	strb	r3, [r7, #12]
 800db90:	887b      	ldrh	r3, [r7, #2]
 800db92:	b2db      	uxtb	r3, r3
 800db94:	737b      	strb	r3, [r7, #13]

	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1 );
	_SPI_SendByteMultiByte(Temp_Buffer2, 4, 0, 10);
 800db96:	f107 000c 	add.w	r0, r7, #12
 800db9a:	230a      	movs	r3, #10
 800db9c:	2200      	movs	r2, #0
 800db9e:	2104      	movs	r1, #4
 800dba0:	f000 fa68 	bl	800e074 <_SPI_SendByteMultiByte>

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800dba4:	2300      	movs	r3, #0
 800dba6:	61bb      	str	r3, [r7, #24]
 800dba8:	e008      	b.n	800dbbc <ILI9341_Draw_Pixel+0x248>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800dbaa:	4b0d      	ldr	r3, [pc, #52]	; (800dbe0 <ILI9341_Draw_Pixel+0x26c>)
 800dbac:	695b      	ldr	r3, [r3, #20]
 800dbae:	4a0c      	ldr	r2, [pc, #48]	; (800dbe0 <ILI9341_Draw_Pixel+0x26c>)
 800dbb0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dbb4:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800dbb6:	69bb      	ldr	r3, [r7, #24]
 800dbb8:	3301      	adds	r3, #1
 800dbba:	61bb      	str	r3, [r7, #24]
 800dbbc:	69bb      	ldr	r3, [r7, #24]
 800dbbe:	2b02      	cmp	r3, #2
 800dbc0:	ddf3      	ble.n	800dbaa <ILI9341_Draw_Pixel+0x236>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800dbc2:	4b07      	ldr	r3, [pc, #28]	; (800dbe0 <ILI9341_Draw_Pixel+0x26c>)
 800dbc4:	695b      	ldr	r3, [r3, #20]
 800dbc6:	4a06      	ldr	r2, [pc, #24]	; (800dbe0 <ILI9341_Draw_Pixel+0x26c>)
 800dbc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dbcc:	6153      	str	r3, [r2, #20]
 800dbce:	e000      	b.n	800dbd2 <ILI9341_Draw_Pixel+0x25e>
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800dbd0:	bf00      	nop


}
 800dbd2:	3730      	adds	r7, #48	; 0x30
 800dbd4:	46bd      	mov	sp, r7
 800dbd6:	bd80      	pop	{r7, pc}
 800dbd8:	20000cb2 	.word	0x20000cb2
 800dbdc:	20000cb0 	.word	0x20000cb0
 800dbe0:	48000400 	.word	0x48000400

0800dbe4 <ILI9341_Draw_Rectangle>:
 *
 *
 */

void ILI9341_Draw_Rectangle(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t height, uint16_t colour, CHUNK_Type chunk_type)
{
 800dbe4:	b590      	push	{r4, r7, lr}
 800dbe6:	b087      	sub	sp, #28
 800dbe8:	af02      	add	r7, sp, #8
 800dbea:	4604      	mov	r4, r0
 800dbec:	4608      	mov	r0, r1
 800dbee:	4611      	mov	r1, r2
 800dbf0:	461a      	mov	r2, r3
 800dbf2:	4623      	mov	r3, r4
 800dbf4:	80fb      	strh	r3, [r7, #6]
 800dbf6:	4603      	mov	r3, r0
 800dbf8:	80bb      	strh	r3, [r7, #4]
 800dbfa:	460b      	mov	r3, r1
 800dbfc:	807b      	strh	r3, [r7, #2]
 800dbfe:	4613      	mov	r3, r2
 800dc00:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800dc02:	4b39      	ldr	r3, [pc, #228]	; (800dce8 <ILI9341_Draw_Rectangle+0x104>)
 800dc04:	881b      	ldrh	r3, [r3, #0]
 800dc06:	b29b      	uxth	r3, r3
 800dc08:	88fa      	ldrh	r2, [r7, #6]
 800dc0a:	429a      	cmp	r2, r3
 800dc0c:	d268      	bcs.n	800dce0 <ILI9341_Draw_Rectangle+0xfc>
 800dc0e:	4b37      	ldr	r3, [pc, #220]	; (800dcec <ILI9341_Draw_Rectangle+0x108>)
 800dc10:	881b      	ldrh	r3, [r3, #0]
 800dc12:	b29b      	uxth	r3, r3
 800dc14:	88ba      	ldrh	r2, [r7, #4]
 800dc16:	429a      	cmp	r2, r3
 800dc18:	d262      	bcs.n	800dce0 <ILI9341_Draw_Rectangle+0xfc>
	if((xpos+width-1)>=LCD_WIDTH)
 800dc1a:	88fa      	ldrh	r2, [r7, #6]
 800dc1c:	887b      	ldrh	r3, [r7, #2]
 800dc1e:	4413      	add	r3, r2
 800dc20:	3b01      	subs	r3, #1
 800dc22:	4a31      	ldr	r2, [pc, #196]	; (800dce8 <ILI9341_Draw_Rectangle+0x104>)
 800dc24:	8812      	ldrh	r2, [r2, #0]
 800dc26:	b292      	uxth	r2, r2
 800dc28:	4293      	cmp	r3, r2
 800dc2a:	db05      	blt.n	800dc38 <ILI9341_Draw_Rectangle+0x54>
		{
			width=LCD_WIDTH-xpos;
 800dc2c:	4b2e      	ldr	r3, [pc, #184]	; (800dce8 <ILI9341_Draw_Rectangle+0x104>)
 800dc2e:	881b      	ldrh	r3, [r3, #0]
 800dc30:	b29a      	uxth	r2, r3
 800dc32:	88fb      	ldrh	r3, [r7, #6]
 800dc34:	1ad3      	subs	r3, r2, r3
 800dc36:	807b      	strh	r3, [r7, #2]
		}
	if((ypos+height-1)>=LCD_HEIGHT)
 800dc38:	88ba      	ldrh	r2, [r7, #4]
 800dc3a:	883b      	ldrh	r3, [r7, #0]
 800dc3c:	4413      	add	r3, r2
 800dc3e:	3b01      	subs	r3, #1
 800dc40:	4a2a      	ldr	r2, [pc, #168]	; (800dcec <ILI9341_Draw_Rectangle+0x108>)
 800dc42:	8812      	ldrh	r2, [r2, #0]
 800dc44:	b292      	uxth	r2, r2
 800dc46:	4293      	cmp	r3, r2
 800dc48:	db05      	blt.n	800dc56 <ILI9341_Draw_Rectangle+0x72>
		{
			height=LCD_HEIGHT-ypos;
 800dc4a:	4b28      	ldr	r3, [pc, #160]	; (800dcec <ILI9341_Draw_Rectangle+0x108>)
 800dc4c:	881b      	ldrh	r3, [r3, #0]
 800dc4e:	b29a      	uxth	r2, r3
 800dc50:	88bb      	ldrh	r3, [r7, #4]
 800dc52:	1ad3      	subs	r3, r2, r3
 800dc54:	803b      	strh	r3, [r7, #0]
		}
	ILI9341_Set_Frame(	xpos,
						ypos,
						(xpos + width) - 1,
 800dc56:	88fa      	ldrh	r2, [r7, #6]
 800dc58:	887b      	ldrh	r3, [r7, #2]
 800dc5a:	4413      	add	r3, r2
 800dc5c:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800dc5e:	3b01      	subs	r3, #1
 800dc60:	b29c      	uxth	r4, r3
						(ypos + height) - 1);
 800dc62:	88ba      	ldrh	r2, [r7, #4]
 800dc64:	883b      	ldrh	r3, [r7, #0]
 800dc66:	4413      	add	r3, r2
 800dc68:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800dc6a:	3b01      	subs	r3, #1
 800dc6c:	b29b      	uxth	r3, r3
 800dc6e:	88b9      	ldrh	r1, [r7, #4]
 800dc70:	88f8      	ldrh	r0, [r7, #6]
 800dc72:	4622      	mov	r2, r4
 800dc74:	f7ff fe08 	bl	800d888 <ILI9341_Set_Frame>
	// if odd numbered rect area is requested, we round down to nearest even number
	// to keep _LCD_Write_Frame() happy.

	// Note, truncated pixel will be needed at function end.

	uint16_t size = height*width;
 800dc78:	883a      	ldrh	r2, [r7, #0]
 800dc7a:	887b      	ldrh	r3, [r7, #2]
 800dc7c:	fb12 f303 	smulbb	r3, r2, r3
 800dc80:	81fb      	strh	r3, [r7, #14]
	uint8_t truncated = 0;
 800dc82:	2300      	movs	r3, #0
 800dc84:	737b      	strb	r3, [r7, #13]

	if((size & 1) && (size > 1))		// don't round down to zero!
 800dc86:	89fb      	ldrh	r3, [r7, #14]
 800dc88:	f003 0301 	and.w	r3, r3, #1
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d009      	beq.n	800dca4 <ILI9341_Draw_Rectangle+0xc0>
 800dc90:	89fb      	ldrh	r3, [r7, #14]
 800dc92:	2b01      	cmp	r3, #1
 800dc94:	d906      	bls.n	800dca4 <ILI9341_Draw_Rectangle+0xc0>
	{
		truncated = 1;
 800dc96:	2301      	movs	r3, #1
 800dc98:	737b      	strb	r3, [r7, #13]
	 	size = ((size >> 1) * 2);
 800dc9a:	89fb      	ldrh	r3, [r7, #14]
 800dc9c:	085b      	lsrs	r3, r3, #1
 800dc9e:	b29b      	uxth	r3, r3
 800dca0:	005b      	lsls	r3, r3, #1
 800dca2:	81fb      	strh	r3, [r7, #14]
	}

	_LCD_Write_Frame(	xpos,
 800dca4:	89fc      	ldrh	r4, [r7, #14]
 800dca6:	8c3a      	ldrh	r2, [r7, #32]
 800dca8:	88b9      	ldrh	r1, [r7, #4]
 800dcaa:	88f8      	ldrh	r0, [r7, #6]
 800dcac:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800dcb0:	9300      	str	r3, [sp, #0]
 800dcb2:	4623      	mov	r3, r4
 800dcb4:	f000 f898 	bl	800dde8 <_LCD_Write_Frame>
						colour,
						size,
						chunk_type);

	// add the truncated pixel now
	if(truncated)
 800dcb8:	7b7b      	ldrb	r3, [r7, #13]
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d011      	beq.n	800dce2 <ILI9341_Draw_Rectangle+0xfe>
	{
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 800dcbe:	88fa      	ldrh	r2, [r7, #6]
 800dcc0:	887b      	ldrh	r3, [r7, #2]
 800dcc2:	4413      	add	r3, r2
 800dcc4:	b29b      	uxth	r3, r3
 800dcc6:	3b01      	subs	r3, #1
 800dcc8:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 800dcca:	88ba      	ldrh	r2, [r7, #4]
 800dccc:	883b      	ldrh	r3, [r7, #0]
 800dcce:	4413      	add	r3, r2
 800dcd0:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 800dcd2:	3b01      	subs	r3, #1
 800dcd4:	b29b      	uxth	r3, r3
 800dcd6:	8c3a      	ldrh	r2, [r7, #32]
 800dcd8:	4619      	mov	r1, r3
 800dcda:	f7ff fe4b 	bl	800d974 <ILI9341_Draw_Pixel>
 800dcde:	e000      	b.n	800dce2 <ILI9341_Draw_Rectangle+0xfe>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800dce0:	bf00      	nop
							colour);
	}
}
 800dce2:	3714      	adds	r7, #20
 800dce4:	46bd      	mov	sp, r7
 800dce6:	bd90      	pop	{r4, r7, pc}
 800dce8:	20000cb2 	.word	0x20000cb2
 800dcec:	20000cb0 	.word	0x20000cb0

0800dcf0 <ILI9341_Set_Rotation>:
 *
 * 	Set LCD orientation
 *
 */
void ILI9341_Set_Rotation(uint8_t rotation)
{
 800dcf0:	b580      	push	{r7, lr}
 800dcf2:	b084      	sub	sp, #16
 800dcf4:	af00      	add	r7, sp, #0
 800dcf6:	4603      	mov	r3, r0
 800dcf8:	71fb      	strb	r3, [r7, #7]

	uint8_t screen_rotation = rotation;
 800dcfa:	79fb      	ldrb	r3, [r7, #7]
 800dcfc:	73fb      	strb	r3, [r7, #15]

	_LCD_SendCommand(0x36);
 800dcfe:	2036      	movs	r0, #54	; 0x36
 800dd00:	f000 f922 	bl	800df48 <_LCD_SendCommand>
	//HAL_Delay(1);

	switch(screen_rotation)
 800dd04:	7bfb      	ldrb	r3, [r7, #15]
 800dd06:	2b03      	cmp	r3, #3
 800dd08:	d836      	bhi.n	800dd78 <ILI9341_Set_Rotation+0x88>
 800dd0a:	a201      	add	r2, pc, #4	; (adr r2, 800dd10 <ILI9341_Set_Rotation+0x20>)
 800dd0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd10:	0800dd21 	.word	0x0800dd21
 800dd14:	0800dd37 	.word	0x0800dd37
 800dd18:	0800dd4d 	.word	0x0800dd4d
 800dd1c:	0800dd63 	.word	0x0800dd63
	{
		case SCREEN_VERTICAL_1:
			_LCD_SendData(0x40|0x08);
 800dd20:	2048      	movs	r0, #72	; 0x48
 800dd22:	f000 f943 	bl	800dfac <_LCD_SendData>
			LCD_WIDTH = 240;
 800dd26:	4b17      	ldr	r3, [pc, #92]	; (800dd84 <ILI9341_Set_Rotation+0x94>)
 800dd28:	22f0      	movs	r2, #240	; 0xf0
 800dd2a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800dd2c:	4b16      	ldr	r3, [pc, #88]	; (800dd88 <ILI9341_Set_Rotation+0x98>)
 800dd2e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800dd32:	801a      	strh	r2, [r3, #0]
			break;
 800dd34:	e021      	b.n	800dd7a <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_1:
			_LCD_SendData(0x20|0x08);
 800dd36:	2028      	movs	r0, #40	; 0x28
 800dd38:	f000 f938 	bl	800dfac <_LCD_SendData>
			LCD_WIDTH  = 320;
 800dd3c:	4b11      	ldr	r3, [pc, #68]	; (800dd84 <ILI9341_Set_Rotation+0x94>)
 800dd3e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800dd42:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 800dd44:	4b10      	ldr	r3, [pc, #64]	; (800dd88 <ILI9341_Set_Rotation+0x98>)
 800dd46:	22f0      	movs	r2, #240	; 0xf0
 800dd48:	801a      	strh	r2, [r3, #0]
			break;
 800dd4a:	e016      	b.n	800dd7a <ILI9341_Set_Rotation+0x8a>
		case SCREEN_VERTICAL_2:
			_LCD_SendData(0x80|0x08);
 800dd4c:	2088      	movs	r0, #136	; 0x88
 800dd4e:	f000 f92d 	bl	800dfac <_LCD_SendData>
			LCD_WIDTH  = 240;
 800dd52:	4b0c      	ldr	r3, [pc, #48]	; (800dd84 <ILI9341_Set_Rotation+0x94>)
 800dd54:	22f0      	movs	r2, #240	; 0xf0
 800dd56:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800dd58:	4b0b      	ldr	r3, [pc, #44]	; (800dd88 <ILI9341_Set_Rotation+0x98>)
 800dd5a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800dd5e:	801a      	strh	r2, [r3, #0]
			break;
 800dd60:	e00b      	b.n	800dd7a <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_2:
			_LCD_SendData(0x40|0x80|0x20|0x08);
 800dd62:	20e8      	movs	r0, #232	; 0xe8
 800dd64:	f000 f922 	bl	800dfac <_LCD_SendData>
			LCD_WIDTH  = 320;
 800dd68:	4b06      	ldr	r3, [pc, #24]	; (800dd84 <ILI9341_Set_Rotation+0x94>)
 800dd6a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800dd6e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 800dd70:	4b05      	ldr	r3, [pc, #20]	; (800dd88 <ILI9341_Set_Rotation+0x98>)
 800dd72:	22f0      	movs	r2, #240	; 0xf0
 800dd74:	801a      	strh	r2, [r3, #0]
			break;
 800dd76:	e000      	b.n	800dd7a <ILI9341_Set_Rotation+0x8a>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 800dd78:	bf00      	nop
	}
}
 800dd7a:	bf00      	nop
 800dd7c:	3710      	adds	r7, #16
 800dd7e:	46bd      	mov	sp, r7
 800dd80:	bd80      	pop	{r7, pc}
 800dd82:	bf00      	nop
 800dd84:	20000cb2 	.word	0x20000cb2
 800dd88:	20000cb0 	.word	0x20000cb0

0800dd8c <_LCD_Enable>:
 *
 * Enable LCD display
 *
 */
void _LCD_Enable()
{
 800dd8c:	b480      	push	{r7}
 800dd8e:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 800dd90:	4b05      	ldr	r3, [pc, #20]	; (800dda8 <_LCD_Enable+0x1c>)
 800dd92:	695b      	ldr	r3, [r3, #20]
 800dd94:	4a04      	ldr	r2, [pc, #16]	; (800dda8 <_LCD_Enable+0x1c>)
 800dd96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800dd9a:	6153      	str	r3, [r2, #20]
}
 800dd9c:	bf00      	nop
 800dd9e:	46bd      	mov	sp, r7
 800dda0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda4:	4770      	bx	lr
 800dda6:	bf00      	nop
 800dda8:	48000400 	.word	0x48000400

0800ddac <_LCD_Reset>:
 *
 * 	Reset LCD
 *
 */
void _LCD_Reset()
{
 800ddac:	b580      	push	{r7, lr}
 800ddae:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR &= ~(LCD_RST_PIN);
 800ddb0:	4b0c      	ldr	r3, [pc, #48]	; (800dde4 <_LCD_Reset+0x38>)
 800ddb2:	695b      	ldr	r3, [r3, #20]
 800ddb4:	4a0b      	ldr	r2, [pc, #44]	; (800dde4 <_LCD_Reset+0x38>)
 800ddb6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ddba:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 800ddbc:	20c8      	movs	r0, #200	; 0xc8
 800ddbe:	f7fa f9ad 	bl	800811c <HAL_Delay>
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800ddc2:	4b08      	ldr	r3, [pc, #32]	; (800dde4 <_LCD_Reset+0x38>)
 800ddc4:	695b      	ldr	r3, [r3, #20]
 800ddc6:	4a07      	ldr	r2, [pc, #28]	; (800dde4 <_LCD_Reset+0x38>)
 800ddc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ddcc:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 800ddce:	20c8      	movs	r0, #200	; 0xc8
 800ddd0:	f7fa f9a4 	bl	800811c <HAL_Delay>
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 800ddd4:	4b03      	ldr	r3, [pc, #12]	; (800dde4 <_LCD_Reset+0x38>)
 800ddd6:	695b      	ldr	r3, [r3, #20]
 800ddd8:	4a02      	ldr	r2, [pc, #8]	; (800dde4 <_LCD_Reset+0x38>)
 800ddda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ddde:	6153      	str	r3, [r2, #20]
}
 800dde0:	bf00      	nop
 800dde2:	bd80      	pop	{r7, pc}
 800dde4:	48000400 	.word	0x48000400

0800dde8 <_LCD_Write_Frame>:
 *
 *	entire data sent to this function is a CHUNK < BURST_MAX_SIZE
 *	each CHUNK is broken down into smaller BLOCKS
 */
void _LCD_Write_Frame(uint16_t chunk_xpos, uint16_t chunk_ypos, uint16_t colour, uint32_t chunk_size, CHUNK_Type chunk_type)
{
 800dde8:	b5b0      	push	{r4, r5, r7, lr}
 800ddea:	b08e      	sub	sp, #56	; 0x38
 800ddec:	af00      	add	r7, sp, #0
 800ddee:	607b      	str	r3, [r7, #4]
 800ddf0:	4603      	mov	r3, r0
 800ddf2:	81fb      	strh	r3, [r7, #14]
 800ddf4:	460b      	mov	r3, r1
 800ddf6:	81bb      	strh	r3, [r7, #12]
 800ddf8:	4613      	mov	r3, r2
 800ddfa:	817b      	strh	r3, [r7, #10]
 800ddfc:	466b      	mov	r3, sp
 800ddfe:	461d      	mov	r5, r3

	uint32_t buffer_size = 0;
 800de00:	2300      	movs	r3, #0
 800de02:	62fb      	str	r3, [r7, #44]	; 0x2c
	if((chunk_size*2) < BURST_MAX_SIZE)
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	005b      	lsls	r3, r3, #1
 800de08:	4a4d      	ldr	r2, [pc, #308]	; (800df40 <_LCD_Write_Frame+0x158>)
 800de0a:	8812      	ldrh	r2, [r2, #0]
 800de0c:	4293      	cmp	r3, r2
 800de0e:	d202      	bcs.n	800de16 <_LCD_Write_Frame+0x2e>
	{
		buffer_size = chunk_size;
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	62fb      	str	r3, [r7, #44]	; 0x2c
 800de14:	e002      	b.n	800de1c <_LCD_Write_Frame+0x34>
	}
	else
	{
		buffer_size = BURST_MAX_SIZE;
 800de16:	4b4a      	ldr	r3, [pc, #296]	; (800df40 <_LCD_Write_Frame+0x158>)
 800de18:	881b      	ldrh	r3, [r3, #0]
 800de1a:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	unsigned char chifted = 	colour>>8;;
 800de1c:	897b      	ldrh	r3, [r7, #10]
 800de1e:	0a1b      	lsrs	r3, r3, #8
 800de20:	b29b      	uxth	r3, r3
 800de22:	77fb      	strb	r3, [r7, #31]
	unsigned char burst_buffer[buffer_size];
 800de24:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800de26:	4603      	mov	r3, r0
 800de28:	3b01      	subs	r3, #1
 800de2a:	61bb      	str	r3, [r7, #24]
 800de2c:	4601      	mov	r1, r0
 800de2e:	f04f 0200 	mov.w	r2, #0
 800de32:	f04f 0300 	mov.w	r3, #0
 800de36:	f04f 0400 	mov.w	r4, #0
 800de3a:	00d4      	lsls	r4, r2, #3
 800de3c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800de40:	00cb      	lsls	r3, r1, #3
 800de42:	4601      	mov	r1, r0
 800de44:	f04f 0200 	mov.w	r2, #0
 800de48:	f04f 0300 	mov.w	r3, #0
 800de4c:	f04f 0400 	mov.w	r4, #0
 800de50:	00d4      	lsls	r4, r2, #3
 800de52:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800de56:	00cb      	lsls	r3, r1, #3
 800de58:	1dc3      	adds	r3, r0, #7
 800de5a:	08db      	lsrs	r3, r3, #3
 800de5c:	00db      	lsls	r3, r3, #3
 800de5e:	ebad 0d03 	sub.w	sp, sp, r3
 800de62:	466b      	mov	r3, sp
 800de64:	3300      	adds	r3, #0
 800de66:	617b      	str	r3, [r7, #20]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 800de68:	2300      	movs	r3, #0
 800de6a:	633b      	str	r3, [r7, #48]	; 0x30
 800de6c:	e00d      	b.n	800de8a <_LCD_Write_Frame+0xa2>
	{
			burst_buffer[j] = 	chifted;
 800de6e:	697a      	ldr	r2, [r7, #20]
 800de70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de72:	4413      	add	r3, r2
 800de74:	7ffa      	ldrb	r2, [r7, #31]
 800de76:	701a      	strb	r2, [r3, #0]
			burst_buffer[j+1] = colour;
 800de78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de7a:	3301      	adds	r3, #1
 800de7c:	897a      	ldrh	r2, [r7, #10]
 800de7e:	b2d1      	uxtb	r1, r2
 800de80:	697a      	ldr	r2, [r7, #20]
 800de82:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 800de84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de86:	3302      	adds	r3, #2
 800de88:	633b      	str	r3, [r7, #48]	; 0x30
 800de8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800de8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de8e:	429a      	cmp	r2, r3
 800de90:	d3ed      	bcc.n	800de6e <_LCD_Write_Frame+0x86>
	}
	
	uint32_t Sending_size = chunk_size*2;
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	005b      	lsls	r3, r3, #1
 800de96:	613b      	str	r3, [r7, #16]

	// make sure we don't divide by size=0
	uint32_t Sending_in_Block = 1;
 800de98:	2301      	movs	r3, #1
 800de9a:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t Remainder_from_block = 0;
 800de9c:	2300      	movs	r3, #0
 800de9e:	62bb      	str	r3, [r7, #40]	; 0x28
	if(chunk_size > 0)
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d00d      	beq.n	800dec2 <_LCD_Write_Frame+0xda>
	{
			Sending_in_Block 		= Sending_size/buffer_size;
 800dea6:	693a      	ldr	r2, [r7, #16]
 800dea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800deaa:	fbb2 f3f3 	udiv	r3, r2, r3
 800deae:	637b      	str	r3, [r7, #52]	; 0x34
			Remainder_from_block 	= Sending_size%buffer_size;
 800deb0:	693b      	ldr	r3, [r7, #16]
 800deb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800deb4:	fbb3 f2f2 	udiv	r2, r3, r2
 800deb8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800deba:	fb01 f202 	mul.w	r2, r1, r2
 800debe:	1a9b      	subs	r3, r3, r2
 800dec0:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	// send blocks
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800dec2:	4b20      	ldr	r3, [pc, #128]	; (800df44 <_LCD_Write_Frame+0x15c>)
 800dec4:	695b      	ldr	r3, [r3, #20]
 800dec6:	4a1f      	ldr	r2, [pc, #124]	; (800df44 <_LCD_Write_Frame+0x15c>)
 800dec8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800decc:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800dece:	4b1d      	ldr	r3, [pc, #116]	; (800df44 <_LCD_Write_Frame+0x15c>)
 800ded0:	695b      	ldr	r3, [r3, #20]
 800ded2:	4a1c      	ldr	r2, [pc, #112]	; (800df44 <_LCD_Write_Frame+0x15c>)
 800ded4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ded8:	6153      	str	r3, [r2, #20]

	if(Sending_in_Block != 0)
 800deda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d00f      	beq.n	800df00 <_LCD_Write_Frame+0x118>
	{
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800dee0:	2300      	movs	r3, #0
 800dee2:	627b      	str	r3, [r7, #36]	; 0x24
 800dee4:	e008      	b.n	800def8 <_LCD_Write_Frame+0x110>
		{
			_SPI_SendByteMultiByte(burst_buffer, buffer_size, 0, 10);
 800dee6:	6978      	ldr	r0, [r7, #20]
 800dee8:	230a      	movs	r3, #10
 800deea:	2200      	movs	r2, #0
 800deec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800deee:	f000 f8c1 	bl	800e074 <_SPI_SendByteMultiByte>
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800def2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800def4:	3301      	adds	r3, #1
 800def6:	627b      	str	r3, [r7, #36]	; 0x24
 800def8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800defa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800defc:	429a      	cmp	r2, r3
 800defe:	d3f2      	bcc.n	800dee6 <_LCD_Write_Frame+0xfe>
		}
	}

	_SPI_SendByteMultiByte(burst_buffer, Remainder_from_block, 0, 10);
 800df00:	6978      	ldr	r0, [r7, #20]
 800df02:	230a      	movs	r3, #10
 800df04:	2200      	movs	r2, #0
 800df06:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800df08:	f000 f8b4 	bl	800e074 <_SPI_SendByteMultiByte>


	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800df0c:	2300      	movs	r3, #0
 800df0e:	623b      	str	r3, [r7, #32]
 800df10:	e008      	b.n	800df24 <_LCD_Write_Frame+0x13c>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800df12:	4b0c      	ldr	r3, [pc, #48]	; (800df44 <_LCD_Write_Frame+0x15c>)
 800df14:	695b      	ldr	r3, [r3, #20]
 800df16:	4a0b      	ldr	r2, [pc, #44]	; (800df44 <_LCD_Write_Frame+0x15c>)
 800df18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800df1c:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800df1e:	6a3b      	ldr	r3, [r7, #32]
 800df20:	3301      	adds	r3, #1
 800df22:	623b      	str	r3, [r7, #32]
 800df24:	6a3b      	ldr	r3, [r7, #32]
 800df26:	2b02      	cmp	r3, #2
 800df28:	ddf3      	ble.n	800df12 <_LCD_Write_Frame+0x12a>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800df2a:	4b06      	ldr	r3, [pc, #24]	; (800df44 <_LCD_Write_Frame+0x15c>)
 800df2c:	695b      	ldr	r3, [r3, #20]
 800df2e:	4a05      	ldr	r2, [pc, #20]	; (800df44 <_LCD_Write_Frame+0x15c>)
 800df30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800df34:	6153      	str	r3, [r2, #20]
 800df36:	46ad      	mov	sp, r5

}
 800df38:	bf00      	nop
 800df3a:	3738      	adds	r7, #56	; 0x38
 800df3c:	46bd      	mov	sp, r7
 800df3e:	bdb0      	pop	{r4, r5, r7, pc}
 800df40:	20000cb4 	.word	0x20000cb4
 800df44:	48000400 	.word	0x48000400

0800df48 <_LCD_SendCommand>:
 *
 * 	Send command to LCD
 *
 */
void _LCD_SendCommand(uint8_t command)
{
 800df48:	b580      	push	{r7, lr}
 800df4a:	b084      	sub	sp, #16
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	4603      	mov	r3, r0
 800df50:	71fb      	strb	r3, [r7, #7]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800df52:	4b15      	ldr	r3, [pc, #84]	; (800dfa8 <_LCD_SendCommand+0x60>)
 800df54:	695b      	ldr	r3, [r3, #20]
 800df56:	4a14      	ldr	r2, [pc, #80]	; (800dfa8 <_LCD_SendCommand+0x60>)
 800df58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800df5c:	6153      	str	r3, [r2, #20]
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800df5e:	4b12      	ldr	r3, [pc, #72]	; (800dfa8 <_LCD_SendCommand+0x60>)
 800df60:	695b      	ldr	r3, [r3, #20]
 800df62:	4a11      	ldr	r2, [pc, #68]	; (800dfa8 <_LCD_SendCommand+0x60>)
 800df64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800df68:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(command, 0 , 0);
 800df6a:	79fb      	ldrb	r3, [r7, #7]
 800df6c:	2200      	movs	r2, #0
 800df6e:	2100      	movs	r1, #0
 800df70:	4618      	mov	r0, r3
 800df72:	f000 f84d 	bl	800e010 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800df76:	2300      	movs	r3, #0
 800df78:	60fb      	str	r3, [r7, #12]
 800df7a:	e008      	b.n	800df8e <_LCD_SendCommand+0x46>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800df7c:	4b0a      	ldr	r3, [pc, #40]	; (800dfa8 <_LCD_SendCommand+0x60>)
 800df7e:	695b      	ldr	r3, [r3, #20]
 800df80:	4a09      	ldr	r2, [pc, #36]	; (800dfa8 <_LCD_SendCommand+0x60>)
 800df82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800df86:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	3301      	adds	r3, #1
 800df8c:	60fb      	str	r3, [r7, #12]
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	2b02      	cmp	r3, #2
 800df92:	ddf3      	ble.n	800df7c <_LCD_SendCommand+0x34>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800df94:	4b04      	ldr	r3, [pc, #16]	; (800dfa8 <_LCD_SendCommand+0x60>)
 800df96:	695b      	ldr	r3, [r3, #20]
 800df98:	4a03      	ldr	r2, [pc, #12]	; (800dfa8 <_LCD_SendCommand+0x60>)
 800df9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800df9e:	6153      	str	r3, [r2, #20]
}
 800dfa0:	bf00      	nop
 800dfa2:	3710      	adds	r7, #16
 800dfa4:	46bd      	mov	sp, r7
 800dfa6:	bd80      	pop	{r7, pc}
 800dfa8:	48000400 	.word	0x48000400

0800dfac <_LCD_SendData>:
 *
 * 	Send Data to LCD
 *
 */
void _LCD_SendData(uint8_t data)
{
 800dfac:	b580      	push	{r7, lr}
 800dfae:	b084      	sub	sp, #16
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	4603      	mov	r3, r0
 800dfb4:	71fb      	strb	r3, [r7, #7]
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800dfb6:	4b15      	ldr	r3, [pc, #84]	; (800e00c <_LCD_SendData+0x60>)
 800dfb8:	695b      	ldr	r3, [r3, #20]
 800dfba:	4a14      	ldr	r2, [pc, #80]	; (800e00c <_LCD_SendData+0x60>)
 800dfbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dfc0:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800dfc2:	4b12      	ldr	r3, [pc, #72]	; (800e00c <_LCD_SendData+0x60>)
 800dfc4:	695b      	ldr	r3, [r3, #20]
 800dfc6:	4a11      	ldr	r2, [pc, #68]	; (800e00c <_LCD_SendData+0x60>)
 800dfc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dfcc:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(data, 0 , 0);
 800dfce:	79fb      	ldrb	r3, [r7, #7]
 800dfd0:	2200      	movs	r2, #0
 800dfd2:	2100      	movs	r1, #0
 800dfd4:	4618      	mov	r0, r3
 800dfd6:	f000 f81b 	bl	800e010 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800dfda:	2300      	movs	r3, #0
 800dfdc:	60fb      	str	r3, [r7, #12]
 800dfde:	e008      	b.n	800dff2 <_LCD_SendData+0x46>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800dfe0:	4b0a      	ldr	r3, [pc, #40]	; (800e00c <_LCD_SendData+0x60>)
 800dfe2:	695b      	ldr	r3, [r3, #20]
 800dfe4:	4a09      	ldr	r2, [pc, #36]	; (800e00c <_LCD_SendData+0x60>)
 800dfe6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dfea:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	3301      	adds	r3, #1
 800dff0:	60fb      	str	r3, [r7, #12]
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	2b02      	cmp	r3, #2
 800dff6:	ddf3      	ble.n	800dfe0 <_LCD_SendData+0x34>

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800dff8:	4b04      	ldr	r3, [pc, #16]	; (800e00c <_LCD_SendData+0x60>)
 800dffa:	695b      	ldr	r3, [r3, #20]
 800dffc:	4a03      	ldr	r2, [pc, #12]	; (800e00c <_LCD_SendData+0x60>)
 800dffe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e002:	6153      	str	r3, [r2, #20]
}
 800e004:	bf00      	nop
 800e006:	3710      	adds	r7, #16
 800e008:	46bd      	mov	sp, r7
 800e00a:	bd80      	pop	{r7, pc}
 800e00c:	48000400 	.word	0x48000400

0800e010 <_SPI_SendByte>:
 *
 * 	Send single byte over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByte(unsigned char data_buffer, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 800e010:	b480      	push	{r7}
 800e012:	b085      	sub	sp, #20
 800e014:	af00      	add	r7, sp, #0
 800e016:	4603      	mov	r3, r0
 800e018:	71fb      	strb	r3, [r7, #7]
 800e01a:	460b      	mov	r3, r1
 800e01c:	71bb      	strb	r3, [r7, #6]
 800e01e:	4613      	mov	r3, r2
 800e020:	717b      	strb	r3, [r7, #5]
#endif

#ifdef USE_BARE_SPI

    // pre frame delay
   	for(int d = 0; d < pre_frame_delay ; d++)
 800e022:	2300      	movs	r3, #0
 800e024:	60fb      	str	r3, [r7, #12]
 800e026:	e003      	b.n	800e030 <_SPI_SendByte+0x20>
   		asm("nop");
 800e028:	bf00      	nop
   	for(int d = 0; d < pre_frame_delay ; d++)
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	3301      	adds	r3, #1
 800e02e:	60fb      	str	r3, [r7, #12]
 800e030:	79bb      	ldrb	r3, [r7, #6]
 800e032:	68fa      	ldr	r2, [r7, #12]
 800e034:	429a      	cmp	r2, r3
 800e036:	dbf7      	blt.n	800e028 <_SPI_SendByte+0x18>

	// check transmit buffer empty
	if((SPI_PERIPH->SR & SPI_SR_TXE) == SPI_SR_TXE)
 800e038:	4b0c      	ldr	r3, [pc, #48]	; (800e06c <_SPI_SendByte+0x5c>)
 800e03a:	689b      	ldr	r3, [r3, #8]
 800e03c:	f003 0302 	and.w	r3, r3, #2
 800e040:	2b02      	cmp	r3, #2
 800e042:	d102      	bne.n	800e04a <_SPI_SendByte+0x3a>
	{
		*(volatile uint8_t *)&SPI_PERIPH->DR = data_buffer;
 800e044:	4a0a      	ldr	r2, [pc, #40]	; (800e070 <_SPI_SendByte+0x60>)
 800e046:	79fb      	ldrb	r3, [r7, #7]
 800e048:	7013      	strb	r3, [r2, #0]
	}

    // post frame delay
   	for(int d = 0; d < post_frame_delay ; d++)
 800e04a:	2300      	movs	r3, #0
 800e04c:	60bb      	str	r3, [r7, #8]
 800e04e:	e003      	b.n	800e058 <_SPI_SendByte+0x48>
   		asm("nop");
 800e050:	bf00      	nop
   	for(int d = 0; d < post_frame_delay ; d++)
 800e052:	68bb      	ldr	r3, [r7, #8]
 800e054:	3301      	adds	r3, #1
 800e056:	60bb      	str	r3, [r7, #8]
 800e058:	797b      	ldrb	r3, [r7, #5]
 800e05a:	68ba      	ldr	r2, [r7, #8]
 800e05c:	429a      	cmp	r2, r3
 800e05e:	dbf7      	blt.n	800e050 <_SPI_SendByte+0x40>

#endif

}
 800e060:	bf00      	nop
 800e062:	3714      	adds	r7, #20
 800e064:	46bd      	mov	sp, r7
 800e066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e06a:	4770      	bx	lr
 800e06c:	40003c00 	.word	0x40003c00
 800e070:	40003c0c 	.word	0x40003c0c

0800e074 <_SPI_SendByteMultiByte>:
 *
 * 	Send multiple bytes over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByteMultiByte(unsigned char *data_buffer, uint32_t buffer_size, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 800e074:	b480      	push	{r7}
 800e076:	b089      	sub	sp, #36	; 0x24
 800e078:	af00      	add	r7, sp, #0
 800e07a:	60f8      	str	r0, [r7, #12]
 800e07c:	60b9      	str	r1, [r7, #8]
 800e07e:	4611      	mov	r1, r2
 800e080:	461a      	mov	r2, r3
 800e082:	460b      	mov	r3, r1
 800e084:	71fb      	strb	r3, [r7, #7]
 800e086:	4613      	mov	r3, r2
 800e088:	71bb      	strb	r3, [r7, #6]
#endif

#ifdef USE_BARE_SPI

    // pre frame delay
   	for(int d = 0; d < pre_frame_delay ; d++)
 800e08a:	2300      	movs	r3, #0
 800e08c:	61fb      	str	r3, [r7, #28]
 800e08e:	e003      	b.n	800e098 <_SPI_SendByteMultiByte+0x24>
   		asm("nop");
 800e090:	bf00      	nop
   	for(int d = 0; d < pre_frame_delay ; d++)
 800e092:	69fb      	ldr	r3, [r7, #28]
 800e094:	3301      	adds	r3, #1
 800e096:	61fb      	str	r3, [r7, #28]
 800e098:	79fb      	ldrb	r3, [r7, #7]
 800e09a:	69fa      	ldr	r2, [r7, #28]
 800e09c:	429a      	cmp	r2, r3
 800e09e:	dbf7      	blt.n	800e090 <_SPI_SendByteMultiByte+0x1c>

	uint8_t *p_data_buffer = (uint8_t *)data_buffer;
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	61bb      	str	r3, [r7, #24]
	//volatile uint16_t TxXferCount = (uint16_t)buffer_size;

	while (buffer_size > 0U)
 800e0a4:	e01d      	b.n	800e0e2 <_SPI_SendByteMultiByte+0x6e>
	{
		// check transmit buffer empty
		if ((SPI_PERIPH->SR & SPI_SR_TXE) == SPI_SR_TXE)
 800e0a6:	4b1c      	ldr	r3, [pc, #112]	; (800e118 <_SPI_SendByteMultiByte+0xa4>)
 800e0a8:	689b      	ldr	r3, [r3, #8]
 800e0aa:	f003 0302 	and.w	r3, r3, #2
 800e0ae:	2b02      	cmp	r3, #2
 800e0b0:	d117      	bne.n	800e0e2 <_SPI_SendByteMultiByte+0x6e>
		{
			if (buffer_size > 1U)
 800e0b2:	68bb      	ldr	r3, [r7, #8]
 800e0b4:	2b01      	cmp	r3, #1
 800e0b6:	d90a      	bls.n	800e0ce <_SPI_SendByteMultiByte+0x5a>
			{
				// write on the data register in packing mode
				SPI_PERIPH->DR = *((uint16_t *)p_data_buffer);
 800e0b8:	69bb      	ldr	r3, [r7, #24]
 800e0ba:	881a      	ldrh	r2, [r3, #0]
 800e0bc:	4b16      	ldr	r3, [pc, #88]	; (800e118 <_SPI_SendByteMultiByte+0xa4>)
 800e0be:	60da      	str	r2, [r3, #12]
				p_data_buffer += sizeof(uint16_t);
 800e0c0:	69bb      	ldr	r3, [r7, #24]
 800e0c2:	3302      	adds	r3, #2
 800e0c4:	61bb      	str	r3, [r7, #24]
				buffer_size -= 2U;
 800e0c6:	68bb      	ldr	r3, [r7, #8]
 800e0c8:	3b02      	subs	r3, #2
 800e0ca:	60bb      	str	r3, [r7, #8]
 800e0cc:	e009      	b.n	800e0e2 <_SPI_SendByteMultiByte+0x6e>
			}
			else
			{
				*((volatile uint8_t *)&SPI_PERIPH->DR) = (*p_data_buffer);
 800e0ce:	4a13      	ldr	r2, [pc, #76]	; (800e11c <_SPI_SendByteMultiByte+0xa8>)
 800e0d0:	69bb      	ldr	r3, [r7, #24]
 800e0d2:	781b      	ldrb	r3, [r3, #0]
 800e0d4:	7013      	strb	r3, [r2, #0]
				p_data_buffer++;
 800e0d6:	69bb      	ldr	r3, [r7, #24]
 800e0d8:	3301      	adds	r3, #1
 800e0da:	61bb      	str	r3, [r7, #24]
				buffer_size--;
 800e0dc:	68bb      	ldr	r3, [r7, #8]
 800e0de:	3b01      	subs	r3, #1
 800e0e0:	60bb      	str	r3, [r7, #8]
	while (buffer_size > 0U)
 800e0e2:	68bb      	ldr	r3, [r7, #8]
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d1de      	bne.n	800e0a6 <_SPI_SendByteMultiByte+0x32>
			}
		}
	}

	// clear SPI overrun flag
	SPI_PERIPH->SR &= ~(SPI_SR_OVR);
 800e0e8:	4b0b      	ldr	r3, [pc, #44]	; (800e118 <_SPI_SendByteMultiByte+0xa4>)
 800e0ea:	689b      	ldr	r3, [r3, #8]
 800e0ec:	4a0a      	ldr	r2, [pc, #40]	; (800e118 <_SPI_SendByteMultiByte+0xa4>)
 800e0ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e0f2:	6093      	str	r3, [r2, #8]

    // post frame delay
   	for(int d = 0; d < post_frame_delay ; d++)
 800e0f4:	2300      	movs	r3, #0
 800e0f6:	617b      	str	r3, [r7, #20]
 800e0f8:	e003      	b.n	800e102 <_SPI_SendByteMultiByte+0x8e>
   		asm("nop");
 800e0fa:	bf00      	nop
   	for(int d = 0; d < post_frame_delay ; d++)
 800e0fc:	697b      	ldr	r3, [r7, #20]
 800e0fe:	3301      	adds	r3, #1
 800e100:	617b      	str	r3, [r7, #20]
 800e102:	79bb      	ldrb	r3, [r7, #6]
 800e104:	697a      	ldr	r2, [r7, #20]
 800e106:	429a      	cmp	r2, r3
 800e108:	dbf7      	blt.n	800e0fa <_SPI_SendByteMultiByte+0x86>

#endif

}
 800e10a:	bf00      	nop
 800e10c:	3724      	adds	r7, #36	; 0x24
 800e10e:	46bd      	mov	sp, r7
 800e110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e114:	4770      	bx	lr
 800e116:	bf00      	nop
 800e118:	40003c00 	.word	0x40003c00
 800e11c:	40003c0c 	.word	0x40003c0c

0800e120 <__errno>:
 800e120:	4b01      	ldr	r3, [pc, #4]	; (800e128 <__errno+0x8>)
 800e122:	6818      	ldr	r0, [r3, #0]
 800e124:	4770      	bx	lr
 800e126:	bf00      	nop
 800e128:	20001cf8 	.word	0x20001cf8

0800e12c <__libc_init_array>:
 800e12c:	b570      	push	{r4, r5, r6, lr}
 800e12e:	4e0d      	ldr	r6, [pc, #52]	; (800e164 <__libc_init_array+0x38>)
 800e130:	4c0d      	ldr	r4, [pc, #52]	; (800e168 <__libc_init_array+0x3c>)
 800e132:	1ba4      	subs	r4, r4, r6
 800e134:	10a4      	asrs	r4, r4, #2
 800e136:	2500      	movs	r5, #0
 800e138:	42a5      	cmp	r5, r4
 800e13a:	d109      	bne.n	800e150 <__libc_init_array+0x24>
 800e13c:	4e0b      	ldr	r6, [pc, #44]	; (800e16c <__libc_init_array+0x40>)
 800e13e:	4c0c      	ldr	r4, [pc, #48]	; (800e170 <__libc_init_array+0x44>)
 800e140:	f002 fc32 	bl	80109a8 <_init>
 800e144:	1ba4      	subs	r4, r4, r6
 800e146:	10a4      	asrs	r4, r4, #2
 800e148:	2500      	movs	r5, #0
 800e14a:	42a5      	cmp	r5, r4
 800e14c:	d105      	bne.n	800e15a <__libc_init_array+0x2e>
 800e14e:	bd70      	pop	{r4, r5, r6, pc}
 800e150:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e154:	4798      	blx	r3
 800e156:	3501      	adds	r5, #1
 800e158:	e7ee      	b.n	800e138 <__libc_init_array+0xc>
 800e15a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e15e:	4798      	blx	r3
 800e160:	3501      	adds	r5, #1
 800e162:	e7f2      	b.n	800e14a <__libc_init_array+0x1e>
 800e164:	08012258 	.word	0x08012258
 800e168:	08012258 	.word	0x08012258
 800e16c:	08012258 	.word	0x08012258
 800e170:	0801225c 	.word	0x0801225c

0800e174 <memset>:
 800e174:	4402      	add	r2, r0
 800e176:	4603      	mov	r3, r0
 800e178:	4293      	cmp	r3, r2
 800e17a:	d100      	bne.n	800e17e <memset+0xa>
 800e17c:	4770      	bx	lr
 800e17e:	f803 1b01 	strb.w	r1, [r3], #1
 800e182:	e7f9      	b.n	800e178 <memset+0x4>

0800e184 <__cvt>:
 800e184:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e188:	ec55 4b10 	vmov	r4, r5, d0
 800e18c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800e18e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e192:	2d00      	cmp	r5, #0
 800e194:	460e      	mov	r6, r1
 800e196:	4691      	mov	r9, r2
 800e198:	4619      	mov	r1, r3
 800e19a:	bfb8      	it	lt
 800e19c:	4622      	movlt	r2, r4
 800e19e:	462b      	mov	r3, r5
 800e1a0:	f027 0720 	bic.w	r7, r7, #32
 800e1a4:	bfbb      	ittet	lt
 800e1a6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e1aa:	461d      	movlt	r5, r3
 800e1ac:	2300      	movge	r3, #0
 800e1ae:	232d      	movlt	r3, #45	; 0x2d
 800e1b0:	bfb8      	it	lt
 800e1b2:	4614      	movlt	r4, r2
 800e1b4:	2f46      	cmp	r7, #70	; 0x46
 800e1b6:	700b      	strb	r3, [r1, #0]
 800e1b8:	d004      	beq.n	800e1c4 <__cvt+0x40>
 800e1ba:	2f45      	cmp	r7, #69	; 0x45
 800e1bc:	d100      	bne.n	800e1c0 <__cvt+0x3c>
 800e1be:	3601      	adds	r6, #1
 800e1c0:	2102      	movs	r1, #2
 800e1c2:	e000      	b.n	800e1c6 <__cvt+0x42>
 800e1c4:	2103      	movs	r1, #3
 800e1c6:	ab03      	add	r3, sp, #12
 800e1c8:	9301      	str	r3, [sp, #4]
 800e1ca:	ab02      	add	r3, sp, #8
 800e1cc:	9300      	str	r3, [sp, #0]
 800e1ce:	4632      	mov	r2, r6
 800e1d0:	4653      	mov	r3, sl
 800e1d2:	ec45 4b10 	vmov	d0, r4, r5
 800e1d6:	f000 fe27 	bl	800ee28 <_dtoa_r>
 800e1da:	2f47      	cmp	r7, #71	; 0x47
 800e1dc:	4680      	mov	r8, r0
 800e1de:	d102      	bne.n	800e1e6 <__cvt+0x62>
 800e1e0:	f019 0f01 	tst.w	r9, #1
 800e1e4:	d026      	beq.n	800e234 <__cvt+0xb0>
 800e1e6:	2f46      	cmp	r7, #70	; 0x46
 800e1e8:	eb08 0906 	add.w	r9, r8, r6
 800e1ec:	d111      	bne.n	800e212 <__cvt+0x8e>
 800e1ee:	f898 3000 	ldrb.w	r3, [r8]
 800e1f2:	2b30      	cmp	r3, #48	; 0x30
 800e1f4:	d10a      	bne.n	800e20c <__cvt+0x88>
 800e1f6:	2200      	movs	r2, #0
 800e1f8:	2300      	movs	r3, #0
 800e1fa:	4620      	mov	r0, r4
 800e1fc:	4629      	mov	r1, r5
 800e1fe:	f7f2 fc8b 	bl	8000b18 <__aeabi_dcmpeq>
 800e202:	b918      	cbnz	r0, 800e20c <__cvt+0x88>
 800e204:	f1c6 0601 	rsb	r6, r6, #1
 800e208:	f8ca 6000 	str.w	r6, [sl]
 800e20c:	f8da 3000 	ldr.w	r3, [sl]
 800e210:	4499      	add	r9, r3
 800e212:	2200      	movs	r2, #0
 800e214:	2300      	movs	r3, #0
 800e216:	4620      	mov	r0, r4
 800e218:	4629      	mov	r1, r5
 800e21a:	f7f2 fc7d 	bl	8000b18 <__aeabi_dcmpeq>
 800e21e:	b938      	cbnz	r0, 800e230 <__cvt+0xac>
 800e220:	2230      	movs	r2, #48	; 0x30
 800e222:	9b03      	ldr	r3, [sp, #12]
 800e224:	454b      	cmp	r3, r9
 800e226:	d205      	bcs.n	800e234 <__cvt+0xb0>
 800e228:	1c59      	adds	r1, r3, #1
 800e22a:	9103      	str	r1, [sp, #12]
 800e22c:	701a      	strb	r2, [r3, #0]
 800e22e:	e7f8      	b.n	800e222 <__cvt+0x9e>
 800e230:	f8cd 900c 	str.w	r9, [sp, #12]
 800e234:	9b03      	ldr	r3, [sp, #12]
 800e236:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e238:	eba3 0308 	sub.w	r3, r3, r8
 800e23c:	4640      	mov	r0, r8
 800e23e:	6013      	str	r3, [r2, #0]
 800e240:	b004      	add	sp, #16
 800e242:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800e246 <__exponent>:
 800e246:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e248:	2900      	cmp	r1, #0
 800e24a:	4604      	mov	r4, r0
 800e24c:	bfba      	itte	lt
 800e24e:	4249      	neglt	r1, r1
 800e250:	232d      	movlt	r3, #45	; 0x2d
 800e252:	232b      	movge	r3, #43	; 0x2b
 800e254:	2909      	cmp	r1, #9
 800e256:	f804 2b02 	strb.w	r2, [r4], #2
 800e25a:	7043      	strb	r3, [r0, #1]
 800e25c:	dd20      	ble.n	800e2a0 <__exponent+0x5a>
 800e25e:	f10d 0307 	add.w	r3, sp, #7
 800e262:	461f      	mov	r7, r3
 800e264:	260a      	movs	r6, #10
 800e266:	fb91 f5f6 	sdiv	r5, r1, r6
 800e26a:	fb06 1115 	mls	r1, r6, r5, r1
 800e26e:	3130      	adds	r1, #48	; 0x30
 800e270:	2d09      	cmp	r5, #9
 800e272:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e276:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800e27a:	4629      	mov	r1, r5
 800e27c:	dc09      	bgt.n	800e292 <__exponent+0x4c>
 800e27e:	3130      	adds	r1, #48	; 0x30
 800e280:	3b02      	subs	r3, #2
 800e282:	f802 1c01 	strb.w	r1, [r2, #-1]
 800e286:	42bb      	cmp	r3, r7
 800e288:	4622      	mov	r2, r4
 800e28a:	d304      	bcc.n	800e296 <__exponent+0x50>
 800e28c:	1a10      	subs	r0, r2, r0
 800e28e:	b003      	add	sp, #12
 800e290:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e292:	4613      	mov	r3, r2
 800e294:	e7e7      	b.n	800e266 <__exponent+0x20>
 800e296:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e29a:	f804 2b01 	strb.w	r2, [r4], #1
 800e29e:	e7f2      	b.n	800e286 <__exponent+0x40>
 800e2a0:	2330      	movs	r3, #48	; 0x30
 800e2a2:	4419      	add	r1, r3
 800e2a4:	7083      	strb	r3, [r0, #2]
 800e2a6:	1d02      	adds	r2, r0, #4
 800e2a8:	70c1      	strb	r1, [r0, #3]
 800e2aa:	e7ef      	b.n	800e28c <__exponent+0x46>

0800e2ac <_printf_float>:
 800e2ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2b0:	b08d      	sub	sp, #52	; 0x34
 800e2b2:	460c      	mov	r4, r1
 800e2b4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800e2b8:	4616      	mov	r6, r2
 800e2ba:	461f      	mov	r7, r3
 800e2bc:	4605      	mov	r5, r0
 800e2be:	f001 fce5 	bl	800fc8c <_localeconv_r>
 800e2c2:	6803      	ldr	r3, [r0, #0]
 800e2c4:	9304      	str	r3, [sp, #16]
 800e2c6:	4618      	mov	r0, r3
 800e2c8:	f7f1 ffaa 	bl	8000220 <strlen>
 800e2cc:	2300      	movs	r3, #0
 800e2ce:	930a      	str	r3, [sp, #40]	; 0x28
 800e2d0:	f8d8 3000 	ldr.w	r3, [r8]
 800e2d4:	9005      	str	r0, [sp, #20]
 800e2d6:	3307      	adds	r3, #7
 800e2d8:	f023 0307 	bic.w	r3, r3, #7
 800e2dc:	f103 0208 	add.w	r2, r3, #8
 800e2e0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800e2e4:	f8d4 b000 	ldr.w	fp, [r4]
 800e2e8:	f8c8 2000 	str.w	r2, [r8]
 800e2ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2f0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800e2f4:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800e2f8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e2fc:	9307      	str	r3, [sp, #28]
 800e2fe:	f8cd 8018 	str.w	r8, [sp, #24]
 800e302:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e306:	4ba7      	ldr	r3, [pc, #668]	; (800e5a4 <_printf_float+0x2f8>)
 800e308:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e30c:	f7f2 fc36 	bl	8000b7c <__aeabi_dcmpun>
 800e310:	bb70      	cbnz	r0, 800e370 <_printf_float+0xc4>
 800e312:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e316:	4ba3      	ldr	r3, [pc, #652]	; (800e5a4 <_printf_float+0x2f8>)
 800e318:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e31c:	f7f2 fc10 	bl	8000b40 <__aeabi_dcmple>
 800e320:	bb30      	cbnz	r0, 800e370 <_printf_float+0xc4>
 800e322:	2200      	movs	r2, #0
 800e324:	2300      	movs	r3, #0
 800e326:	4640      	mov	r0, r8
 800e328:	4649      	mov	r1, r9
 800e32a:	f7f2 fbff 	bl	8000b2c <__aeabi_dcmplt>
 800e32e:	b110      	cbz	r0, 800e336 <_printf_float+0x8a>
 800e330:	232d      	movs	r3, #45	; 0x2d
 800e332:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e336:	4a9c      	ldr	r2, [pc, #624]	; (800e5a8 <_printf_float+0x2fc>)
 800e338:	4b9c      	ldr	r3, [pc, #624]	; (800e5ac <_printf_float+0x300>)
 800e33a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800e33e:	bf8c      	ite	hi
 800e340:	4690      	movhi	r8, r2
 800e342:	4698      	movls	r8, r3
 800e344:	2303      	movs	r3, #3
 800e346:	f02b 0204 	bic.w	r2, fp, #4
 800e34a:	6123      	str	r3, [r4, #16]
 800e34c:	6022      	str	r2, [r4, #0]
 800e34e:	f04f 0900 	mov.w	r9, #0
 800e352:	9700      	str	r7, [sp, #0]
 800e354:	4633      	mov	r3, r6
 800e356:	aa0b      	add	r2, sp, #44	; 0x2c
 800e358:	4621      	mov	r1, r4
 800e35a:	4628      	mov	r0, r5
 800e35c:	f000 f9e6 	bl	800e72c <_printf_common>
 800e360:	3001      	adds	r0, #1
 800e362:	f040 808d 	bne.w	800e480 <_printf_float+0x1d4>
 800e366:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e36a:	b00d      	add	sp, #52	; 0x34
 800e36c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e370:	4642      	mov	r2, r8
 800e372:	464b      	mov	r3, r9
 800e374:	4640      	mov	r0, r8
 800e376:	4649      	mov	r1, r9
 800e378:	f7f2 fc00 	bl	8000b7c <__aeabi_dcmpun>
 800e37c:	b110      	cbz	r0, 800e384 <_printf_float+0xd8>
 800e37e:	4a8c      	ldr	r2, [pc, #560]	; (800e5b0 <_printf_float+0x304>)
 800e380:	4b8c      	ldr	r3, [pc, #560]	; (800e5b4 <_printf_float+0x308>)
 800e382:	e7da      	b.n	800e33a <_printf_float+0x8e>
 800e384:	6861      	ldr	r1, [r4, #4]
 800e386:	1c4b      	adds	r3, r1, #1
 800e388:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800e38c:	a80a      	add	r0, sp, #40	; 0x28
 800e38e:	d13e      	bne.n	800e40e <_printf_float+0x162>
 800e390:	2306      	movs	r3, #6
 800e392:	6063      	str	r3, [r4, #4]
 800e394:	2300      	movs	r3, #0
 800e396:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800e39a:	ab09      	add	r3, sp, #36	; 0x24
 800e39c:	9300      	str	r3, [sp, #0]
 800e39e:	ec49 8b10 	vmov	d0, r8, r9
 800e3a2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e3a6:	6022      	str	r2, [r4, #0]
 800e3a8:	f8cd a004 	str.w	sl, [sp, #4]
 800e3ac:	6861      	ldr	r1, [r4, #4]
 800e3ae:	4628      	mov	r0, r5
 800e3b0:	f7ff fee8 	bl	800e184 <__cvt>
 800e3b4:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800e3b8:	2b47      	cmp	r3, #71	; 0x47
 800e3ba:	4680      	mov	r8, r0
 800e3bc:	d109      	bne.n	800e3d2 <_printf_float+0x126>
 800e3be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e3c0:	1cd8      	adds	r0, r3, #3
 800e3c2:	db02      	blt.n	800e3ca <_printf_float+0x11e>
 800e3c4:	6862      	ldr	r2, [r4, #4]
 800e3c6:	4293      	cmp	r3, r2
 800e3c8:	dd47      	ble.n	800e45a <_printf_float+0x1ae>
 800e3ca:	f1aa 0a02 	sub.w	sl, sl, #2
 800e3ce:	fa5f fa8a 	uxtb.w	sl, sl
 800e3d2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800e3d6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e3d8:	d824      	bhi.n	800e424 <_printf_float+0x178>
 800e3da:	3901      	subs	r1, #1
 800e3dc:	4652      	mov	r2, sl
 800e3de:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e3e2:	9109      	str	r1, [sp, #36]	; 0x24
 800e3e4:	f7ff ff2f 	bl	800e246 <__exponent>
 800e3e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e3ea:	1813      	adds	r3, r2, r0
 800e3ec:	2a01      	cmp	r2, #1
 800e3ee:	4681      	mov	r9, r0
 800e3f0:	6123      	str	r3, [r4, #16]
 800e3f2:	dc02      	bgt.n	800e3fa <_printf_float+0x14e>
 800e3f4:	6822      	ldr	r2, [r4, #0]
 800e3f6:	07d1      	lsls	r1, r2, #31
 800e3f8:	d501      	bpl.n	800e3fe <_printf_float+0x152>
 800e3fa:	3301      	adds	r3, #1
 800e3fc:	6123      	str	r3, [r4, #16]
 800e3fe:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e402:	2b00      	cmp	r3, #0
 800e404:	d0a5      	beq.n	800e352 <_printf_float+0xa6>
 800e406:	232d      	movs	r3, #45	; 0x2d
 800e408:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e40c:	e7a1      	b.n	800e352 <_printf_float+0xa6>
 800e40e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800e412:	f000 8177 	beq.w	800e704 <_printf_float+0x458>
 800e416:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800e41a:	d1bb      	bne.n	800e394 <_printf_float+0xe8>
 800e41c:	2900      	cmp	r1, #0
 800e41e:	d1b9      	bne.n	800e394 <_printf_float+0xe8>
 800e420:	2301      	movs	r3, #1
 800e422:	e7b6      	b.n	800e392 <_printf_float+0xe6>
 800e424:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800e428:	d119      	bne.n	800e45e <_printf_float+0x1b2>
 800e42a:	2900      	cmp	r1, #0
 800e42c:	6863      	ldr	r3, [r4, #4]
 800e42e:	dd0c      	ble.n	800e44a <_printf_float+0x19e>
 800e430:	6121      	str	r1, [r4, #16]
 800e432:	b913      	cbnz	r3, 800e43a <_printf_float+0x18e>
 800e434:	6822      	ldr	r2, [r4, #0]
 800e436:	07d2      	lsls	r2, r2, #31
 800e438:	d502      	bpl.n	800e440 <_printf_float+0x194>
 800e43a:	3301      	adds	r3, #1
 800e43c:	440b      	add	r3, r1
 800e43e:	6123      	str	r3, [r4, #16]
 800e440:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e442:	65a3      	str	r3, [r4, #88]	; 0x58
 800e444:	f04f 0900 	mov.w	r9, #0
 800e448:	e7d9      	b.n	800e3fe <_printf_float+0x152>
 800e44a:	b913      	cbnz	r3, 800e452 <_printf_float+0x1a6>
 800e44c:	6822      	ldr	r2, [r4, #0]
 800e44e:	07d0      	lsls	r0, r2, #31
 800e450:	d501      	bpl.n	800e456 <_printf_float+0x1aa>
 800e452:	3302      	adds	r3, #2
 800e454:	e7f3      	b.n	800e43e <_printf_float+0x192>
 800e456:	2301      	movs	r3, #1
 800e458:	e7f1      	b.n	800e43e <_printf_float+0x192>
 800e45a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800e45e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800e462:	4293      	cmp	r3, r2
 800e464:	db05      	blt.n	800e472 <_printf_float+0x1c6>
 800e466:	6822      	ldr	r2, [r4, #0]
 800e468:	6123      	str	r3, [r4, #16]
 800e46a:	07d1      	lsls	r1, r2, #31
 800e46c:	d5e8      	bpl.n	800e440 <_printf_float+0x194>
 800e46e:	3301      	adds	r3, #1
 800e470:	e7e5      	b.n	800e43e <_printf_float+0x192>
 800e472:	2b00      	cmp	r3, #0
 800e474:	bfd4      	ite	le
 800e476:	f1c3 0302 	rsble	r3, r3, #2
 800e47a:	2301      	movgt	r3, #1
 800e47c:	4413      	add	r3, r2
 800e47e:	e7de      	b.n	800e43e <_printf_float+0x192>
 800e480:	6823      	ldr	r3, [r4, #0]
 800e482:	055a      	lsls	r2, r3, #21
 800e484:	d407      	bmi.n	800e496 <_printf_float+0x1ea>
 800e486:	6923      	ldr	r3, [r4, #16]
 800e488:	4642      	mov	r2, r8
 800e48a:	4631      	mov	r1, r6
 800e48c:	4628      	mov	r0, r5
 800e48e:	47b8      	blx	r7
 800e490:	3001      	adds	r0, #1
 800e492:	d12b      	bne.n	800e4ec <_printf_float+0x240>
 800e494:	e767      	b.n	800e366 <_printf_float+0xba>
 800e496:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800e49a:	f240 80dc 	bls.w	800e656 <_printf_float+0x3aa>
 800e49e:	2200      	movs	r2, #0
 800e4a0:	2300      	movs	r3, #0
 800e4a2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e4a6:	f7f2 fb37 	bl	8000b18 <__aeabi_dcmpeq>
 800e4aa:	2800      	cmp	r0, #0
 800e4ac:	d033      	beq.n	800e516 <_printf_float+0x26a>
 800e4ae:	2301      	movs	r3, #1
 800e4b0:	4a41      	ldr	r2, [pc, #260]	; (800e5b8 <_printf_float+0x30c>)
 800e4b2:	4631      	mov	r1, r6
 800e4b4:	4628      	mov	r0, r5
 800e4b6:	47b8      	blx	r7
 800e4b8:	3001      	adds	r0, #1
 800e4ba:	f43f af54 	beq.w	800e366 <_printf_float+0xba>
 800e4be:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e4c2:	429a      	cmp	r2, r3
 800e4c4:	db02      	blt.n	800e4cc <_printf_float+0x220>
 800e4c6:	6823      	ldr	r3, [r4, #0]
 800e4c8:	07d8      	lsls	r0, r3, #31
 800e4ca:	d50f      	bpl.n	800e4ec <_printf_float+0x240>
 800e4cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e4d0:	4631      	mov	r1, r6
 800e4d2:	4628      	mov	r0, r5
 800e4d4:	47b8      	blx	r7
 800e4d6:	3001      	adds	r0, #1
 800e4d8:	f43f af45 	beq.w	800e366 <_printf_float+0xba>
 800e4dc:	f04f 0800 	mov.w	r8, #0
 800e4e0:	f104 091a 	add.w	r9, r4, #26
 800e4e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e4e6:	3b01      	subs	r3, #1
 800e4e8:	4543      	cmp	r3, r8
 800e4ea:	dc09      	bgt.n	800e500 <_printf_float+0x254>
 800e4ec:	6823      	ldr	r3, [r4, #0]
 800e4ee:	079b      	lsls	r3, r3, #30
 800e4f0:	f100 8103 	bmi.w	800e6fa <_printf_float+0x44e>
 800e4f4:	68e0      	ldr	r0, [r4, #12]
 800e4f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e4f8:	4298      	cmp	r0, r3
 800e4fa:	bfb8      	it	lt
 800e4fc:	4618      	movlt	r0, r3
 800e4fe:	e734      	b.n	800e36a <_printf_float+0xbe>
 800e500:	2301      	movs	r3, #1
 800e502:	464a      	mov	r2, r9
 800e504:	4631      	mov	r1, r6
 800e506:	4628      	mov	r0, r5
 800e508:	47b8      	blx	r7
 800e50a:	3001      	adds	r0, #1
 800e50c:	f43f af2b 	beq.w	800e366 <_printf_float+0xba>
 800e510:	f108 0801 	add.w	r8, r8, #1
 800e514:	e7e6      	b.n	800e4e4 <_printf_float+0x238>
 800e516:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e518:	2b00      	cmp	r3, #0
 800e51a:	dc2b      	bgt.n	800e574 <_printf_float+0x2c8>
 800e51c:	2301      	movs	r3, #1
 800e51e:	4a26      	ldr	r2, [pc, #152]	; (800e5b8 <_printf_float+0x30c>)
 800e520:	4631      	mov	r1, r6
 800e522:	4628      	mov	r0, r5
 800e524:	47b8      	blx	r7
 800e526:	3001      	adds	r0, #1
 800e528:	f43f af1d 	beq.w	800e366 <_printf_float+0xba>
 800e52c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e52e:	b923      	cbnz	r3, 800e53a <_printf_float+0x28e>
 800e530:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e532:	b913      	cbnz	r3, 800e53a <_printf_float+0x28e>
 800e534:	6823      	ldr	r3, [r4, #0]
 800e536:	07d9      	lsls	r1, r3, #31
 800e538:	d5d8      	bpl.n	800e4ec <_printf_float+0x240>
 800e53a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e53e:	4631      	mov	r1, r6
 800e540:	4628      	mov	r0, r5
 800e542:	47b8      	blx	r7
 800e544:	3001      	adds	r0, #1
 800e546:	f43f af0e 	beq.w	800e366 <_printf_float+0xba>
 800e54a:	f04f 0900 	mov.w	r9, #0
 800e54e:	f104 0a1a 	add.w	sl, r4, #26
 800e552:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e554:	425b      	negs	r3, r3
 800e556:	454b      	cmp	r3, r9
 800e558:	dc01      	bgt.n	800e55e <_printf_float+0x2b2>
 800e55a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e55c:	e794      	b.n	800e488 <_printf_float+0x1dc>
 800e55e:	2301      	movs	r3, #1
 800e560:	4652      	mov	r2, sl
 800e562:	4631      	mov	r1, r6
 800e564:	4628      	mov	r0, r5
 800e566:	47b8      	blx	r7
 800e568:	3001      	adds	r0, #1
 800e56a:	f43f aefc 	beq.w	800e366 <_printf_float+0xba>
 800e56e:	f109 0901 	add.w	r9, r9, #1
 800e572:	e7ee      	b.n	800e552 <_printf_float+0x2a6>
 800e574:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e576:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e578:	429a      	cmp	r2, r3
 800e57a:	bfa8      	it	ge
 800e57c:	461a      	movge	r2, r3
 800e57e:	2a00      	cmp	r2, #0
 800e580:	4691      	mov	r9, r2
 800e582:	dd07      	ble.n	800e594 <_printf_float+0x2e8>
 800e584:	4613      	mov	r3, r2
 800e586:	4631      	mov	r1, r6
 800e588:	4642      	mov	r2, r8
 800e58a:	4628      	mov	r0, r5
 800e58c:	47b8      	blx	r7
 800e58e:	3001      	adds	r0, #1
 800e590:	f43f aee9 	beq.w	800e366 <_printf_float+0xba>
 800e594:	f104 031a 	add.w	r3, r4, #26
 800e598:	f04f 0b00 	mov.w	fp, #0
 800e59c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e5a0:	9306      	str	r3, [sp, #24]
 800e5a2:	e015      	b.n	800e5d0 <_printf_float+0x324>
 800e5a4:	7fefffff 	.word	0x7fefffff
 800e5a8:	08011fa0 	.word	0x08011fa0
 800e5ac:	08011f9c 	.word	0x08011f9c
 800e5b0:	08011fa8 	.word	0x08011fa8
 800e5b4:	08011fa4 	.word	0x08011fa4
 800e5b8:	08011fac 	.word	0x08011fac
 800e5bc:	2301      	movs	r3, #1
 800e5be:	9a06      	ldr	r2, [sp, #24]
 800e5c0:	4631      	mov	r1, r6
 800e5c2:	4628      	mov	r0, r5
 800e5c4:	47b8      	blx	r7
 800e5c6:	3001      	adds	r0, #1
 800e5c8:	f43f aecd 	beq.w	800e366 <_printf_float+0xba>
 800e5cc:	f10b 0b01 	add.w	fp, fp, #1
 800e5d0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800e5d4:	ebaa 0309 	sub.w	r3, sl, r9
 800e5d8:	455b      	cmp	r3, fp
 800e5da:	dcef      	bgt.n	800e5bc <_printf_float+0x310>
 800e5dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e5e0:	429a      	cmp	r2, r3
 800e5e2:	44d0      	add	r8, sl
 800e5e4:	db15      	blt.n	800e612 <_printf_float+0x366>
 800e5e6:	6823      	ldr	r3, [r4, #0]
 800e5e8:	07da      	lsls	r2, r3, #31
 800e5ea:	d412      	bmi.n	800e612 <_printf_float+0x366>
 800e5ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e5ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e5f0:	eba3 020a 	sub.w	r2, r3, sl
 800e5f4:	eba3 0a01 	sub.w	sl, r3, r1
 800e5f8:	4592      	cmp	sl, r2
 800e5fa:	bfa8      	it	ge
 800e5fc:	4692      	movge	sl, r2
 800e5fe:	f1ba 0f00 	cmp.w	sl, #0
 800e602:	dc0e      	bgt.n	800e622 <_printf_float+0x376>
 800e604:	f04f 0800 	mov.w	r8, #0
 800e608:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e60c:	f104 091a 	add.w	r9, r4, #26
 800e610:	e019      	b.n	800e646 <_printf_float+0x39a>
 800e612:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e616:	4631      	mov	r1, r6
 800e618:	4628      	mov	r0, r5
 800e61a:	47b8      	blx	r7
 800e61c:	3001      	adds	r0, #1
 800e61e:	d1e5      	bne.n	800e5ec <_printf_float+0x340>
 800e620:	e6a1      	b.n	800e366 <_printf_float+0xba>
 800e622:	4653      	mov	r3, sl
 800e624:	4642      	mov	r2, r8
 800e626:	4631      	mov	r1, r6
 800e628:	4628      	mov	r0, r5
 800e62a:	47b8      	blx	r7
 800e62c:	3001      	adds	r0, #1
 800e62e:	d1e9      	bne.n	800e604 <_printf_float+0x358>
 800e630:	e699      	b.n	800e366 <_printf_float+0xba>
 800e632:	2301      	movs	r3, #1
 800e634:	464a      	mov	r2, r9
 800e636:	4631      	mov	r1, r6
 800e638:	4628      	mov	r0, r5
 800e63a:	47b8      	blx	r7
 800e63c:	3001      	adds	r0, #1
 800e63e:	f43f ae92 	beq.w	800e366 <_printf_float+0xba>
 800e642:	f108 0801 	add.w	r8, r8, #1
 800e646:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e64a:	1a9b      	subs	r3, r3, r2
 800e64c:	eba3 030a 	sub.w	r3, r3, sl
 800e650:	4543      	cmp	r3, r8
 800e652:	dcee      	bgt.n	800e632 <_printf_float+0x386>
 800e654:	e74a      	b.n	800e4ec <_printf_float+0x240>
 800e656:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e658:	2a01      	cmp	r2, #1
 800e65a:	dc01      	bgt.n	800e660 <_printf_float+0x3b4>
 800e65c:	07db      	lsls	r3, r3, #31
 800e65e:	d53a      	bpl.n	800e6d6 <_printf_float+0x42a>
 800e660:	2301      	movs	r3, #1
 800e662:	4642      	mov	r2, r8
 800e664:	4631      	mov	r1, r6
 800e666:	4628      	mov	r0, r5
 800e668:	47b8      	blx	r7
 800e66a:	3001      	adds	r0, #1
 800e66c:	f43f ae7b 	beq.w	800e366 <_printf_float+0xba>
 800e670:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e674:	4631      	mov	r1, r6
 800e676:	4628      	mov	r0, r5
 800e678:	47b8      	blx	r7
 800e67a:	3001      	adds	r0, #1
 800e67c:	f108 0801 	add.w	r8, r8, #1
 800e680:	f43f ae71 	beq.w	800e366 <_printf_float+0xba>
 800e684:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e686:	2200      	movs	r2, #0
 800e688:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 800e68c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e690:	2300      	movs	r3, #0
 800e692:	f7f2 fa41 	bl	8000b18 <__aeabi_dcmpeq>
 800e696:	b9c8      	cbnz	r0, 800e6cc <_printf_float+0x420>
 800e698:	4653      	mov	r3, sl
 800e69a:	4642      	mov	r2, r8
 800e69c:	4631      	mov	r1, r6
 800e69e:	4628      	mov	r0, r5
 800e6a0:	47b8      	blx	r7
 800e6a2:	3001      	adds	r0, #1
 800e6a4:	d10e      	bne.n	800e6c4 <_printf_float+0x418>
 800e6a6:	e65e      	b.n	800e366 <_printf_float+0xba>
 800e6a8:	2301      	movs	r3, #1
 800e6aa:	4652      	mov	r2, sl
 800e6ac:	4631      	mov	r1, r6
 800e6ae:	4628      	mov	r0, r5
 800e6b0:	47b8      	blx	r7
 800e6b2:	3001      	adds	r0, #1
 800e6b4:	f43f ae57 	beq.w	800e366 <_printf_float+0xba>
 800e6b8:	f108 0801 	add.w	r8, r8, #1
 800e6bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e6be:	3b01      	subs	r3, #1
 800e6c0:	4543      	cmp	r3, r8
 800e6c2:	dcf1      	bgt.n	800e6a8 <_printf_float+0x3fc>
 800e6c4:	464b      	mov	r3, r9
 800e6c6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e6ca:	e6de      	b.n	800e48a <_printf_float+0x1de>
 800e6cc:	f04f 0800 	mov.w	r8, #0
 800e6d0:	f104 0a1a 	add.w	sl, r4, #26
 800e6d4:	e7f2      	b.n	800e6bc <_printf_float+0x410>
 800e6d6:	2301      	movs	r3, #1
 800e6d8:	e7df      	b.n	800e69a <_printf_float+0x3ee>
 800e6da:	2301      	movs	r3, #1
 800e6dc:	464a      	mov	r2, r9
 800e6de:	4631      	mov	r1, r6
 800e6e0:	4628      	mov	r0, r5
 800e6e2:	47b8      	blx	r7
 800e6e4:	3001      	adds	r0, #1
 800e6e6:	f43f ae3e 	beq.w	800e366 <_printf_float+0xba>
 800e6ea:	f108 0801 	add.w	r8, r8, #1
 800e6ee:	68e3      	ldr	r3, [r4, #12]
 800e6f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e6f2:	1a9b      	subs	r3, r3, r2
 800e6f4:	4543      	cmp	r3, r8
 800e6f6:	dcf0      	bgt.n	800e6da <_printf_float+0x42e>
 800e6f8:	e6fc      	b.n	800e4f4 <_printf_float+0x248>
 800e6fa:	f04f 0800 	mov.w	r8, #0
 800e6fe:	f104 0919 	add.w	r9, r4, #25
 800e702:	e7f4      	b.n	800e6ee <_printf_float+0x442>
 800e704:	2900      	cmp	r1, #0
 800e706:	f43f ae8b 	beq.w	800e420 <_printf_float+0x174>
 800e70a:	2300      	movs	r3, #0
 800e70c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800e710:	ab09      	add	r3, sp, #36	; 0x24
 800e712:	9300      	str	r3, [sp, #0]
 800e714:	ec49 8b10 	vmov	d0, r8, r9
 800e718:	6022      	str	r2, [r4, #0]
 800e71a:	f8cd a004 	str.w	sl, [sp, #4]
 800e71e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e722:	4628      	mov	r0, r5
 800e724:	f7ff fd2e 	bl	800e184 <__cvt>
 800e728:	4680      	mov	r8, r0
 800e72a:	e648      	b.n	800e3be <_printf_float+0x112>

0800e72c <_printf_common>:
 800e72c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e730:	4691      	mov	r9, r2
 800e732:	461f      	mov	r7, r3
 800e734:	688a      	ldr	r2, [r1, #8]
 800e736:	690b      	ldr	r3, [r1, #16]
 800e738:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e73c:	4293      	cmp	r3, r2
 800e73e:	bfb8      	it	lt
 800e740:	4613      	movlt	r3, r2
 800e742:	f8c9 3000 	str.w	r3, [r9]
 800e746:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e74a:	4606      	mov	r6, r0
 800e74c:	460c      	mov	r4, r1
 800e74e:	b112      	cbz	r2, 800e756 <_printf_common+0x2a>
 800e750:	3301      	adds	r3, #1
 800e752:	f8c9 3000 	str.w	r3, [r9]
 800e756:	6823      	ldr	r3, [r4, #0]
 800e758:	0699      	lsls	r1, r3, #26
 800e75a:	bf42      	ittt	mi
 800e75c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800e760:	3302      	addmi	r3, #2
 800e762:	f8c9 3000 	strmi.w	r3, [r9]
 800e766:	6825      	ldr	r5, [r4, #0]
 800e768:	f015 0506 	ands.w	r5, r5, #6
 800e76c:	d107      	bne.n	800e77e <_printf_common+0x52>
 800e76e:	f104 0a19 	add.w	sl, r4, #25
 800e772:	68e3      	ldr	r3, [r4, #12]
 800e774:	f8d9 2000 	ldr.w	r2, [r9]
 800e778:	1a9b      	subs	r3, r3, r2
 800e77a:	42ab      	cmp	r3, r5
 800e77c:	dc28      	bgt.n	800e7d0 <_printf_common+0xa4>
 800e77e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800e782:	6822      	ldr	r2, [r4, #0]
 800e784:	3300      	adds	r3, #0
 800e786:	bf18      	it	ne
 800e788:	2301      	movne	r3, #1
 800e78a:	0692      	lsls	r2, r2, #26
 800e78c:	d42d      	bmi.n	800e7ea <_printf_common+0xbe>
 800e78e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e792:	4639      	mov	r1, r7
 800e794:	4630      	mov	r0, r6
 800e796:	47c0      	blx	r8
 800e798:	3001      	adds	r0, #1
 800e79a:	d020      	beq.n	800e7de <_printf_common+0xb2>
 800e79c:	6823      	ldr	r3, [r4, #0]
 800e79e:	68e5      	ldr	r5, [r4, #12]
 800e7a0:	f8d9 2000 	ldr.w	r2, [r9]
 800e7a4:	f003 0306 	and.w	r3, r3, #6
 800e7a8:	2b04      	cmp	r3, #4
 800e7aa:	bf08      	it	eq
 800e7ac:	1aad      	subeq	r5, r5, r2
 800e7ae:	68a3      	ldr	r3, [r4, #8]
 800e7b0:	6922      	ldr	r2, [r4, #16]
 800e7b2:	bf0c      	ite	eq
 800e7b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e7b8:	2500      	movne	r5, #0
 800e7ba:	4293      	cmp	r3, r2
 800e7bc:	bfc4      	itt	gt
 800e7be:	1a9b      	subgt	r3, r3, r2
 800e7c0:	18ed      	addgt	r5, r5, r3
 800e7c2:	f04f 0900 	mov.w	r9, #0
 800e7c6:	341a      	adds	r4, #26
 800e7c8:	454d      	cmp	r5, r9
 800e7ca:	d11a      	bne.n	800e802 <_printf_common+0xd6>
 800e7cc:	2000      	movs	r0, #0
 800e7ce:	e008      	b.n	800e7e2 <_printf_common+0xb6>
 800e7d0:	2301      	movs	r3, #1
 800e7d2:	4652      	mov	r2, sl
 800e7d4:	4639      	mov	r1, r7
 800e7d6:	4630      	mov	r0, r6
 800e7d8:	47c0      	blx	r8
 800e7da:	3001      	adds	r0, #1
 800e7dc:	d103      	bne.n	800e7e6 <_printf_common+0xba>
 800e7de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e7e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e7e6:	3501      	adds	r5, #1
 800e7e8:	e7c3      	b.n	800e772 <_printf_common+0x46>
 800e7ea:	18e1      	adds	r1, r4, r3
 800e7ec:	1c5a      	adds	r2, r3, #1
 800e7ee:	2030      	movs	r0, #48	; 0x30
 800e7f0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e7f4:	4422      	add	r2, r4
 800e7f6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e7fa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e7fe:	3302      	adds	r3, #2
 800e800:	e7c5      	b.n	800e78e <_printf_common+0x62>
 800e802:	2301      	movs	r3, #1
 800e804:	4622      	mov	r2, r4
 800e806:	4639      	mov	r1, r7
 800e808:	4630      	mov	r0, r6
 800e80a:	47c0      	blx	r8
 800e80c:	3001      	adds	r0, #1
 800e80e:	d0e6      	beq.n	800e7de <_printf_common+0xb2>
 800e810:	f109 0901 	add.w	r9, r9, #1
 800e814:	e7d8      	b.n	800e7c8 <_printf_common+0x9c>
	...

0800e818 <_printf_i>:
 800e818:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e81c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800e820:	460c      	mov	r4, r1
 800e822:	7e09      	ldrb	r1, [r1, #24]
 800e824:	b085      	sub	sp, #20
 800e826:	296e      	cmp	r1, #110	; 0x6e
 800e828:	4617      	mov	r7, r2
 800e82a:	4606      	mov	r6, r0
 800e82c:	4698      	mov	r8, r3
 800e82e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e830:	f000 80b3 	beq.w	800e99a <_printf_i+0x182>
 800e834:	d822      	bhi.n	800e87c <_printf_i+0x64>
 800e836:	2963      	cmp	r1, #99	; 0x63
 800e838:	d036      	beq.n	800e8a8 <_printf_i+0x90>
 800e83a:	d80a      	bhi.n	800e852 <_printf_i+0x3a>
 800e83c:	2900      	cmp	r1, #0
 800e83e:	f000 80b9 	beq.w	800e9b4 <_printf_i+0x19c>
 800e842:	2958      	cmp	r1, #88	; 0x58
 800e844:	f000 8083 	beq.w	800e94e <_printf_i+0x136>
 800e848:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e84c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800e850:	e032      	b.n	800e8b8 <_printf_i+0xa0>
 800e852:	2964      	cmp	r1, #100	; 0x64
 800e854:	d001      	beq.n	800e85a <_printf_i+0x42>
 800e856:	2969      	cmp	r1, #105	; 0x69
 800e858:	d1f6      	bne.n	800e848 <_printf_i+0x30>
 800e85a:	6820      	ldr	r0, [r4, #0]
 800e85c:	6813      	ldr	r3, [r2, #0]
 800e85e:	0605      	lsls	r5, r0, #24
 800e860:	f103 0104 	add.w	r1, r3, #4
 800e864:	d52a      	bpl.n	800e8bc <_printf_i+0xa4>
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	6011      	str	r1, [r2, #0]
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	da03      	bge.n	800e876 <_printf_i+0x5e>
 800e86e:	222d      	movs	r2, #45	; 0x2d
 800e870:	425b      	negs	r3, r3
 800e872:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800e876:	486f      	ldr	r0, [pc, #444]	; (800ea34 <_printf_i+0x21c>)
 800e878:	220a      	movs	r2, #10
 800e87a:	e039      	b.n	800e8f0 <_printf_i+0xd8>
 800e87c:	2973      	cmp	r1, #115	; 0x73
 800e87e:	f000 809d 	beq.w	800e9bc <_printf_i+0x1a4>
 800e882:	d808      	bhi.n	800e896 <_printf_i+0x7e>
 800e884:	296f      	cmp	r1, #111	; 0x6f
 800e886:	d020      	beq.n	800e8ca <_printf_i+0xb2>
 800e888:	2970      	cmp	r1, #112	; 0x70
 800e88a:	d1dd      	bne.n	800e848 <_printf_i+0x30>
 800e88c:	6823      	ldr	r3, [r4, #0]
 800e88e:	f043 0320 	orr.w	r3, r3, #32
 800e892:	6023      	str	r3, [r4, #0]
 800e894:	e003      	b.n	800e89e <_printf_i+0x86>
 800e896:	2975      	cmp	r1, #117	; 0x75
 800e898:	d017      	beq.n	800e8ca <_printf_i+0xb2>
 800e89a:	2978      	cmp	r1, #120	; 0x78
 800e89c:	d1d4      	bne.n	800e848 <_printf_i+0x30>
 800e89e:	2378      	movs	r3, #120	; 0x78
 800e8a0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e8a4:	4864      	ldr	r0, [pc, #400]	; (800ea38 <_printf_i+0x220>)
 800e8a6:	e055      	b.n	800e954 <_printf_i+0x13c>
 800e8a8:	6813      	ldr	r3, [r2, #0]
 800e8aa:	1d19      	adds	r1, r3, #4
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	6011      	str	r1, [r2, #0]
 800e8b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e8b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e8b8:	2301      	movs	r3, #1
 800e8ba:	e08c      	b.n	800e9d6 <_printf_i+0x1be>
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	6011      	str	r1, [r2, #0]
 800e8c0:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e8c4:	bf18      	it	ne
 800e8c6:	b21b      	sxthne	r3, r3
 800e8c8:	e7cf      	b.n	800e86a <_printf_i+0x52>
 800e8ca:	6813      	ldr	r3, [r2, #0]
 800e8cc:	6825      	ldr	r5, [r4, #0]
 800e8ce:	1d18      	adds	r0, r3, #4
 800e8d0:	6010      	str	r0, [r2, #0]
 800e8d2:	0628      	lsls	r0, r5, #24
 800e8d4:	d501      	bpl.n	800e8da <_printf_i+0xc2>
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	e002      	b.n	800e8e0 <_printf_i+0xc8>
 800e8da:	0668      	lsls	r0, r5, #25
 800e8dc:	d5fb      	bpl.n	800e8d6 <_printf_i+0xbe>
 800e8de:	881b      	ldrh	r3, [r3, #0]
 800e8e0:	4854      	ldr	r0, [pc, #336]	; (800ea34 <_printf_i+0x21c>)
 800e8e2:	296f      	cmp	r1, #111	; 0x6f
 800e8e4:	bf14      	ite	ne
 800e8e6:	220a      	movne	r2, #10
 800e8e8:	2208      	moveq	r2, #8
 800e8ea:	2100      	movs	r1, #0
 800e8ec:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e8f0:	6865      	ldr	r5, [r4, #4]
 800e8f2:	60a5      	str	r5, [r4, #8]
 800e8f4:	2d00      	cmp	r5, #0
 800e8f6:	f2c0 8095 	blt.w	800ea24 <_printf_i+0x20c>
 800e8fa:	6821      	ldr	r1, [r4, #0]
 800e8fc:	f021 0104 	bic.w	r1, r1, #4
 800e900:	6021      	str	r1, [r4, #0]
 800e902:	2b00      	cmp	r3, #0
 800e904:	d13d      	bne.n	800e982 <_printf_i+0x16a>
 800e906:	2d00      	cmp	r5, #0
 800e908:	f040 808e 	bne.w	800ea28 <_printf_i+0x210>
 800e90c:	4665      	mov	r5, ip
 800e90e:	2a08      	cmp	r2, #8
 800e910:	d10b      	bne.n	800e92a <_printf_i+0x112>
 800e912:	6823      	ldr	r3, [r4, #0]
 800e914:	07db      	lsls	r3, r3, #31
 800e916:	d508      	bpl.n	800e92a <_printf_i+0x112>
 800e918:	6923      	ldr	r3, [r4, #16]
 800e91a:	6862      	ldr	r2, [r4, #4]
 800e91c:	429a      	cmp	r2, r3
 800e91e:	bfde      	ittt	le
 800e920:	2330      	movle	r3, #48	; 0x30
 800e922:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e926:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800e92a:	ebac 0305 	sub.w	r3, ip, r5
 800e92e:	6123      	str	r3, [r4, #16]
 800e930:	f8cd 8000 	str.w	r8, [sp]
 800e934:	463b      	mov	r3, r7
 800e936:	aa03      	add	r2, sp, #12
 800e938:	4621      	mov	r1, r4
 800e93a:	4630      	mov	r0, r6
 800e93c:	f7ff fef6 	bl	800e72c <_printf_common>
 800e940:	3001      	adds	r0, #1
 800e942:	d14d      	bne.n	800e9e0 <_printf_i+0x1c8>
 800e944:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e948:	b005      	add	sp, #20
 800e94a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e94e:	4839      	ldr	r0, [pc, #228]	; (800ea34 <_printf_i+0x21c>)
 800e950:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800e954:	6813      	ldr	r3, [r2, #0]
 800e956:	6821      	ldr	r1, [r4, #0]
 800e958:	1d1d      	adds	r5, r3, #4
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	6015      	str	r5, [r2, #0]
 800e95e:	060a      	lsls	r2, r1, #24
 800e960:	d50b      	bpl.n	800e97a <_printf_i+0x162>
 800e962:	07ca      	lsls	r2, r1, #31
 800e964:	bf44      	itt	mi
 800e966:	f041 0120 	orrmi.w	r1, r1, #32
 800e96a:	6021      	strmi	r1, [r4, #0]
 800e96c:	b91b      	cbnz	r3, 800e976 <_printf_i+0x15e>
 800e96e:	6822      	ldr	r2, [r4, #0]
 800e970:	f022 0220 	bic.w	r2, r2, #32
 800e974:	6022      	str	r2, [r4, #0]
 800e976:	2210      	movs	r2, #16
 800e978:	e7b7      	b.n	800e8ea <_printf_i+0xd2>
 800e97a:	064d      	lsls	r5, r1, #25
 800e97c:	bf48      	it	mi
 800e97e:	b29b      	uxthmi	r3, r3
 800e980:	e7ef      	b.n	800e962 <_printf_i+0x14a>
 800e982:	4665      	mov	r5, ip
 800e984:	fbb3 f1f2 	udiv	r1, r3, r2
 800e988:	fb02 3311 	mls	r3, r2, r1, r3
 800e98c:	5cc3      	ldrb	r3, [r0, r3]
 800e98e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800e992:	460b      	mov	r3, r1
 800e994:	2900      	cmp	r1, #0
 800e996:	d1f5      	bne.n	800e984 <_printf_i+0x16c>
 800e998:	e7b9      	b.n	800e90e <_printf_i+0xf6>
 800e99a:	6813      	ldr	r3, [r2, #0]
 800e99c:	6825      	ldr	r5, [r4, #0]
 800e99e:	6961      	ldr	r1, [r4, #20]
 800e9a0:	1d18      	adds	r0, r3, #4
 800e9a2:	6010      	str	r0, [r2, #0]
 800e9a4:	0628      	lsls	r0, r5, #24
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	d501      	bpl.n	800e9ae <_printf_i+0x196>
 800e9aa:	6019      	str	r1, [r3, #0]
 800e9ac:	e002      	b.n	800e9b4 <_printf_i+0x19c>
 800e9ae:	066a      	lsls	r2, r5, #25
 800e9b0:	d5fb      	bpl.n	800e9aa <_printf_i+0x192>
 800e9b2:	8019      	strh	r1, [r3, #0]
 800e9b4:	2300      	movs	r3, #0
 800e9b6:	6123      	str	r3, [r4, #16]
 800e9b8:	4665      	mov	r5, ip
 800e9ba:	e7b9      	b.n	800e930 <_printf_i+0x118>
 800e9bc:	6813      	ldr	r3, [r2, #0]
 800e9be:	1d19      	adds	r1, r3, #4
 800e9c0:	6011      	str	r1, [r2, #0]
 800e9c2:	681d      	ldr	r5, [r3, #0]
 800e9c4:	6862      	ldr	r2, [r4, #4]
 800e9c6:	2100      	movs	r1, #0
 800e9c8:	4628      	mov	r0, r5
 800e9ca:	f7f1 fc31 	bl	8000230 <memchr>
 800e9ce:	b108      	cbz	r0, 800e9d4 <_printf_i+0x1bc>
 800e9d0:	1b40      	subs	r0, r0, r5
 800e9d2:	6060      	str	r0, [r4, #4]
 800e9d4:	6863      	ldr	r3, [r4, #4]
 800e9d6:	6123      	str	r3, [r4, #16]
 800e9d8:	2300      	movs	r3, #0
 800e9da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e9de:	e7a7      	b.n	800e930 <_printf_i+0x118>
 800e9e0:	6923      	ldr	r3, [r4, #16]
 800e9e2:	462a      	mov	r2, r5
 800e9e4:	4639      	mov	r1, r7
 800e9e6:	4630      	mov	r0, r6
 800e9e8:	47c0      	blx	r8
 800e9ea:	3001      	adds	r0, #1
 800e9ec:	d0aa      	beq.n	800e944 <_printf_i+0x12c>
 800e9ee:	6823      	ldr	r3, [r4, #0]
 800e9f0:	079b      	lsls	r3, r3, #30
 800e9f2:	d413      	bmi.n	800ea1c <_printf_i+0x204>
 800e9f4:	68e0      	ldr	r0, [r4, #12]
 800e9f6:	9b03      	ldr	r3, [sp, #12]
 800e9f8:	4298      	cmp	r0, r3
 800e9fa:	bfb8      	it	lt
 800e9fc:	4618      	movlt	r0, r3
 800e9fe:	e7a3      	b.n	800e948 <_printf_i+0x130>
 800ea00:	2301      	movs	r3, #1
 800ea02:	464a      	mov	r2, r9
 800ea04:	4639      	mov	r1, r7
 800ea06:	4630      	mov	r0, r6
 800ea08:	47c0      	blx	r8
 800ea0a:	3001      	adds	r0, #1
 800ea0c:	d09a      	beq.n	800e944 <_printf_i+0x12c>
 800ea0e:	3501      	adds	r5, #1
 800ea10:	68e3      	ldr	r3, [r4, #12]
 800ea12:	9a03      	ldr	r2, [sp, #12]
 800ea14:	1a9b      	subs	r3, r3, r2
 800ea16:	42ab      	cmp	r3, r5
 800ea18:	dcf2      	bgt.n	800ea00 <_printf_i+0x1e8>
 800ea1a:	e7eb      	b.n	800e9f4 <_printf_i+0x1dc>
 800ea1c:	2500      	movs	r5, #0
 800ea1e:	f104 0919 	add.w	r9, r4, #25
 800ea22:	e7f5      	b.n	800ea10 <_printf_i+0x1f8>
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d1ac      	bne.n	800e982 <_printf_i+0x16a>
 800ea28:	7803      	ldrb	r3, [r0, #0]
 800ea2a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ea2e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ea32:	e76c      	b.n	800e90e <_printf_i+0xf6>
 800ea34:	08011fae 	.word	0x08011fae
 800ea38:	08011fbf 	.word	0x08011fbf

0800ea3c <_puts_r>:
 800ea3c:	b570      	push	{r4, r5, r6, lr}
 800ea3e:	460e      	mov	r6, r1
 800ea40:	4605      	mov	r5, r0
 800ea42:	b118      	cbz	r0, 800ea4c <_puts_r+0x10>
 800ea44:	6983      	ldr	r3, [r0, #24]
 800ea46:	b90b      	cbnz	r3, 800ea4c <_puts_r+0x10>
 800ea48:	f001 f896 	bl	800fb78 <__sinit>
 800ea4c:	69ab      	ldr	r3, [r5, #24]
 800ea4e:	68ac      	ldr	r4, [r5, #8]
 800ea50:	b913      	cbnz	r3, 800ea58 <_puts_r+0x1c>
 800ea52:	4628      	mov	r0, r5
 800ea54:	f001 f890 	bl	800fb78 <__sinit>
 800ea58:	4b23      	ldr	r3, [pc, #140]	; (800eae8 <_puts_r+0xac>)
 800ea5a:	429c      	cmp	r4, r3
 800ea5c:	d117      	bne.n	800ea8e <_puts_r+0x52>
 800ea5e:	686c      	ldr	r4, [r5, #4]
 800ea60:	89a3      	ldrh	r3, [r4, #12]
 800ea62:	071b      	lsls	r3, r3, #28
 800ea64:	d51d      	bpl.n	800eaa2 <_puts_r+0x66>
 800ea66:	6923      	ldr	r3, [r4, #16]
 800ea68:	b1db      	cbz	r3, 800eaa2 <_puts_r+0x66>
 800ea6a:	3e01      	subs	r6, #1
 800ea6c:	68a3      	ldr	r3, [r4, #8]
 800ea6e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ea72:	3b01      	subs	r3, #1
 800ea74:	60a3      	str	r3, [r4, #8]
 800ea76:	b9e9      	cbnz	r1, 800eab4 <_puts_r+0x78>
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	da2e      	bge.n	800eada <_puts_r+0x9e>
 800ea7c:	4622      	mov	r2, r4
 800ea7e:	210a      	movs	r1, #10
 800ea80:	4628      	mov	r0, r5
 800ea82:	f000 f883 	bl	800eb8c <__swbuf_r>
 800ea86:	3001      	adds	r0, #1
 800ea88:	d011      	beq.n	800eaae <_puts_r+0x72>
 800ea8a:	200a      	movs	r0, #10
 800ea8c:	e011      	b.n	800eab2 <_puts_r+0x76>
 800ea8e:	4b17      	ldr	r3, [pc, #92]	; (800eaec <_puts_r+0xb0>)
 800ea90:	429c      	cmp	r4, r3
 800ea92:	d101      	bne.n	800ea98 <_puts_r+0x5c>
 800ea94:	68ac      	ldr	r4, [r5, #8]
 800ea96:	e7e3      	b.n	800ea60 <_puts_r+0x24>
 800ea98:	4b15      	ldr	r3, [pc, #84]	; (800eaf0 <_puts_r+0xb4>)
 800ea9a:	429c      	cmp	r4, r3
 800ea9c:	bf08      	it	eq
 800ea9e:	68ec      	ldreq	r4, [r5, #12]
 800eaa0:	e7de      	b.n	800ea60 <_puts_r+0x24>
 800eaa2:	4621      	mov	r1, r4
 800eaa4:	4628      	mov	r0, r5
 800eaa6:	f000 f8c3 	bl	800ec30 <__swsetup_r>
 800eaaa:	2800      	cmp	r0, #0
 800eaac:	d0dd      	beq.n	800ea6a <_puts_r+0x2e>
 800eaae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800eab2:	bd70      	pop	{r4, r5, r6, pc}
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	da04      	bge.n	800eac2 <_puts_r+0x86>
 800eab8:	69a2      	ldr	r2, [r4, #24]
 800eaba:	429a      	cmp	r2, r3
 800eabc:	dc06      	bgt.n	800eacc <_puts_r+0x90>
 800eabe:	290a      	cmp	r1, #10
 800eac0:	d004      	beq.n	800eacc <_puts_r+0x90>
 800eac2:	6823      	ldr	r3, [r4, #0]
 800eac4:	1c5a      	adds	r2, r3, #1
 800eac6:	6022      	str	r2, [r4, #0]
 800eac8:	7019      	strb	r1, [r3, #0]
 800eaca:	e7cf      	b.n	800ea6c <_puts_r+0x30>
 800eacc:	4622      	mov	r2, r4
 800eace:	4628      	mov	r0, r5
 800ead0:	f000 f85c 	bl	800eb8c <__swbuf_r>
 800ead4:	3001      	adds	r0, #1
 800ead6:	d1c9      	bne.n	800ea6c <_puts_r+0x30>
 800ead8:	e7e9      	b.n	800eaae <_puts_r+0x72>
 800eada:	6823      	ldr	r3, [r4, #0]
 800eadc:	200a      	movs	r0, #10
 800eade:	1c5a      	adds	r2, r3, #1
 800eae0:	6022      	str	r2, [r4, #0]
 800eae2:	7018      	strb	r0, [r3, #0]
 800eae4:	e7e5      	b.n	800eab2 <_puts_r+0x76>
 800eae6:	bf00      	nop
 800eae8:	08012000 	.word	0x08012000
 800eaec:	08012020 	.word	0x08012020
 800eaf0:	08011fe0 	.word	0x08011fe0

0800eaf4 <puts>:
 800eaf4:	4b02      	ldr	r3, [pc, #8]	; (800eb00 <puts+0xc>)
 800eaf6:	4601      	mov	r1, r0
 800eaf8:	6818      	ldr	r0, [r3, #0]
 800eafa:	f7ff bf9f 	b.w	800ea3c <_puts_r>
 800eafe:	bf00      	nop
 800eb00:	20001cf8 	.word	0x20001cf8

0800eb04 <sniprintf>:
 800eb04:	b40c      	push	{r2, r3}
 800eb06:	b530      	push	{r4, r5, lr}
 800eb08:	4b17      	ldr	r3, [pc, #92]	; (800eb68 <sniprintf+0x64>)
 800eb0a:	1e0c      	subs	r4, r1, #0
 800eb0c:	b09d      	sub	sp, #116	; 0x74
 800eb0e:	681d      	ldr	r5, [r3, #0]
 800eb10:	da08      	bge.n	800eb24 <sniprintf+0x20>
 800eb12:	238b      	movs	r3, #139	; 0x8b
 800eb14:	602b      	str	r3, [r5, #0]
 800eb16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800eb1a:	b01d      	add	sp, #116	; 0x74
 800eb1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800eb20:	b002      	add	sp, #8
 800eb22:	4770      	bx	lr
 800eb24:	f44f 7302 	mov.w	r3, #520	; 0x208
 800eb28:	f8ad 3014 	strh.w	r3, [sp, #20]
 800eb2c:	bf14      	ite	ne
 800eb2e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800eb32:	4623      	moveq	r3, r4
 800eb34:	9304      	str	r3, [sp, #16]
 800eb36:	9307      	str	r3, [sp, #28]
 800eb38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800eb3c:	9002      	str	r0, [sp, #8]
 800eb3e:	9006      	str	r0, [sp, #24]
 800eb40:	f8ad 3016 	strh.w	r3, [sp, #22]
 800eb44:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800eb46:	ab21      	add	r3, sp, #132	; 0x84
 800eb48:	a902      	add	r1, sp, #8
 800eb4a:	4628      	mov	r0, r5
 800eb4c:	9301      	str	r3, [sp, #4]
 800eb4e:	f001 fd0d 	bl	801056c <_svfiprintf_r>
 800eb52:	1c43      	adds	r3, r0, #1
 800eb54:	bfbc      	itt	lt
 800eb56:	238b      	movlt	r3, #139	; 0x8b
 800eb58:	602b      	strlt	r3, [r5, #0]
 800eb5a:	2c00      	cmp	r4, #0
 800eb5c:	d0dd      	beq.n	800eb1a <sniprintf+0x16>
 800eb5e:	9b02      	ldr	r3, [sp, #8]
 800eb60:	2200      	movs	r2, #0
 800eb62:	701a      	strb	r2, [r3, #0]
 800eb64:	e7d9      	b.n	800eb1a <sniprintf+0x16>
 800eb66:	bf00      	nop
 800eb68:	20001cf8 	.word	0x20001cf8

0800eb6c <strcat>:
 800eb6c:	b510      	push	{r4, lr}
 800eb6e:	4603      	mov	r3, r0
 800eb70:	781a      	ldrb	r2, [r3, #0]
 800eb72:	1c5c      	adds	r4, r3, #1
 800eb74:	b93a      	cbnz	r2, 800eb86 <strcat+0x1a>
 800eb76:	3b01      	subs	r3, #1
 800eb78:	f811 2b01 	ldrb.w	r2, [r1], #1
 800eb7c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800eb80:	2a00      	cmp	r2, #0
 800eb82:	d1f9      	bne.n	800eb78 <strcat+0xc>
 800eb84:	bd10      	pop	{r4, pc}
 800eb86:	4623      	mov	r3, r4
 800eb88:	e7f2      	b.n	800eb70 <strcat+0x4>
	...

0800eb8c <__swbuf_r>:
 800eb8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb8e:	460e      	mov	r6, r1
 800eb90:	4614      	mov	r4, r2
 800eb92:	4605      	mov	r5, r0
 800eb94:	b118      	cbz	r0, 800eb9e <__swbuf_r+0x12>
 800eb96:	6983      	ldr	r3, [r0, #24]
 800eb98:	b90b      	cbnz	r3, 800eb9e <__swbuf_r+0x12>
 800eb9a:	f000 ffed 	bl	800fb78 <__sinit>
 800eb9e:	4b21      	ldr	r3, [pc, #132]	; (800ec24 <__swbuf_r+0x98>)
 800eba0:	429c      	cmp	r4, r3
 800eba2:	d12a      	bne.n	800ebfa <__swbuf_r+0x6e>
 800eba4:	686c      	ldr	r4, [r5, #4]
 800eba6:	69a3      	ldr	r3, [r4, #24]
 800eba8:	60a3      	str	r3, [r4, #8]
 800ebaa:	89a3      	ldrh	r3, [r4, #12]
 800ebac:	071a      	lsls	r2, r3, #28
 800ebae:	d52e      	bpl.n	800ec0e <__swbuf_r+0x82>
 800ebb0:	6923      	ldr	r3, [r4, #16]
 800ebb2:	b363      	cbz	r3, 800ec0e <__swbuf_r+0x82>
 800ebb4:	6923      	ldr	r3, [r4, #16]
 800ebb6:	6820      	ldr	r0, [r4, #0]
 800ebb8:	1ac0      	subs	r0, r0, r3
 800ebba:	6963      	ldr	r3, [r4, #20]
 800ebbc:	b2f6      	uxtb	r6, r6
 800ebbe:	4283      	cmp	r3, r0
 800ebc0:	4637      	mov	r7, r6
 800ebc2:	dc04      	bgt.n	800ebce <__swbuf_r+0x42>
 800ebc4:	4621      	mov	r1, r4
 800ebc6:	4628      	mov	r0, r5
 800ebc8:	f000 ff6c 	bl	800faa4 <_fflush_r>
 800ebcc:	bb28      	cbnz	r0, 800ec1a <__swbuf_r+0x8e>
 800ebce:	68a3      	ldr	r3, [r4, #8]
 800ebd0:	3b01      	subs	r3, #1
 800ebd2:	60a3      	str	r3, [r4, #8]
 800ebd4:	6823      	ldr	r3, [r4, #0]
 800ebd6:	1c5a      	adds	r2, r3, #1
 800ebd8:	6022      	str	r2, [r4, #0]
 800ebda:	701e      	strb	r6, [r3, #0]
 800ebdc:	6963      	ldr	r3, [r4, #20]
 800ebde:	3001      	adds	r0, #1
 800ebe0:	4283      	cmp	r3, r0
 800ebe2:	d004      	beq.n	800ebee <__swbuf_r+0x62>
 800ebe4:	89a3      	ldrh	r3, [r4, #12]
 800ebe6:	07db      	lsls	r3, r3, #31
 800ebe8:	d519      	bpl.n	800ec1e <__swbuf_r+0x92>
 800ebea:	2e0a      	cmp	r6, #10
 800ebec:	d117      	bne.n	800ec1e <__swbuf_r+0x92>
 800ebee:	4621      	mov	r1, r4
 800ebf0:	4628      	mov	r0, r5
 800ebf2:	f000 ff57 	bl	800faa4 <_fflush_r>
 800ebf6:	b190      	cbz	r0, 800ec1e <__swbuf_r+0x92>
 800ebf8:	e00f      	b.n	800ec1a <__swbuf_r+0x8e>
 800ebfa:	4b0b      	ldr	r3, [pc, #44]	; (800ec28 <__swbuf_r+0x9c>)
 800ebfc:	429c      	cmp	r4, r3
 800ebfe:	d101      	bne.n	800ec04 <__swbuf_r+0x78>
 800ec00:	68ac      	ldr	r4, [r5, #8]
 800ec02:	e7d0      	b.n	800eba6 <__swbuf_r+0x1a>
 800ec04:	4b09      	ldr	r3, [pc, #36]	; (800ec2c <__swbuf_r+0xa0>)
 800ec06:	429c      	cmp	r4, r3
 800ec08:	bf08      	it	eq
 800ec0a:	68ec      	ldreq	r4, [r5, #12]
 800ec0c:	e7cb      	b.n	800eba6 <__swbuf_r+0x1a>
 800ec0e:	4621      	mov	r1, r4
 800ec10:	4628      	mov	r0, r5
 800ec12:	f000 f80d 	bl	800ec30 <__swsetup_r>
 800ec16:	2800      	cmp	r0, #0
 800ec18:	d0cc      	beq.n	800ebb4 <__swbuf_r+0x28>
 800ec1a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800ec1e:	4638      	mov	r0, r7
 800ec20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec22:	bf00      	nop
 800ec24:	08012000 	.word	0x08012000
 800ec28:	08012020 	.word	0x08012020
 800ec2c:	08011fe0 	.word	0x08011fe0

0800ec30 <__swsetup_r>:
 800ec30:	4b32      	ldr	r3, [pc, #200]	; (800ecfc <__swsetup_r+0xcc>)
 800ec32:	b570      	push	{r4, r5, r6, lr}
 800ec34:	681d      	ldr	r5, [r3, #0]
 800ec36:	4606      	mov	r6, r0
 800ec38:	460c      	mov	r4, r1
 800ec3a:	b125      	cbz	r5, 800ec46 <__swsetup_r+0x16>
 800ec3c:	69ab      	ldr	r3, [r5, #24]
 800ec3e:	b913      	cbnz	r3, 800ec46 <__swsetup_r+0x16>
 800ec40:	4628      	mov	r0, r5
 800ec42:	f000 ff99 	bl	800fb78 <__sinit>
 800ec46:	4b2e      	ldr	r3, [pc, #184]	; (800ed00 <__swsetup_r+0xd0>)
 800ec48:	429c      	cmp	r4, r3
 800ec4a:	d10f      	bne.n	800ec6c <__swsetup_r+0x3c>
 800ec4c:	686c      	ldr	r4, [r5, #4]
 800ec4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ec52:	b29a      	uxth	r2, r3
 800ec54:	0715      	lsls	r5, r2, #28
 800ec56:	d42c      	bmi.n	800ecb2 <__swsetup_r+0x82>
 800ec58:	06d0      	lsls	r0, r2, #27
 800ec5a:	d411      	bmi.n	800ec80 <__swsetup_r+0x50>
 800ec5c:	2209      	movs	r2, #9
 800ec5e:	6032      	str	r2, [r6, #0]
 800ec60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ec64:	81a3      	strh	r3, [r4, #12]
 800ec66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ec6a:	e03e      	b.n	800ecea <__swsetup_r+0xba>
 800ec6c:	4b25      	ldr	r3, [pc, #148]	; (800ed04 <__swsetup_r+0xd4>)
 800ec6e:	429c      	cmp	r4, r3
 800ec70:	d101      	bne.n	800ec76 <__swsetup_r+0x46>
 800ec72:	68ac      	ldr	r4, [r5, #8]
 800ec74:	e7eb      	b.n	800ec4e <__swsetup_r+0x1e>
 800ec76:	4b24      	ldr	r3, [pc, #144]	; (800ed08 <__swsetup_r+0xd8>)
 800ec78:	429c      	cmp	r4, r3
 800ec7a:	bf08      	it	eq
 800ec7c:	68ec      	ldreq	r4, [r5, #12]
 800ec7e:	e7e6      	b.n	800ec4e <__swsetup_r+0x1e>
 800ec80:	0751      	lsls	r1, r2, #29
 800ec82:	d512      	bpl.n	800ecaa <__swsetup_r+0x7a>
 800ec84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ec86:	b141      	cbz	r1, 800ec9a <__swsetup_r+0x6a>
 800ec88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ec8c:	4299      	cmp	r1, r3
 800ec8e:	d002      	beq.n	800ec96 <__swsetup_r+0x66>
 800ec90:	4630      	mov	r0, r6
 800ec92:	f001 fb69 	bl	8010368 <_free_r>
 800ec96:	2300      	movs	r3, #0
 800ec98:	6363      	str	r3, [r4, #52]	; 0x34
 800ec9a:	89a3      	ldrh	r3, [r4, #12]
 800ec9c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800eca0:	81a3      	strh	r3, [r4, #12]
 800eca2:	2300      	movs	r3, #0
 800eca4:	6063      	str	r3, [r4, #4]
 800eca6:	6923      	ldr	r3, [r4, #16]
 800eca8:	6023      	str	r3, [r4, #0]
 800ecaa:	89a3      	ldrh	r3, [r4, #12]
 800ecac:	f043 0308 	orr.w	r3, r3, #8
 800ecb0:	81a3      	strh	r3, [r4, #12]
 800ecb2:	6923      	ldr	r3, [r4, #16]
 800ecb4:	b94b      	cbnz	r3, 800ecca <__swsetup_r+0x9a>
 800ecb6:	89a3      	ldrh	r3, [r4, #12]
 800ecb8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ecbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ecc0:	d003      	beq.n	800ecca <__swsetup_r+0x9a>
 800ecc2:	4621      	mov	r1, r4
 800ecc4:	4630      	mov	r0, r6
 800ecc6:	f001 f813 	bl	800fcf0 <__smakebuf_r>
 800ecca:	89a2      	ldrh	r2, [r4, #12]
 800eccc:	f012 0301 	ands.w	r3, r2, #1
 800ecd0:	d00c      	beq.n	800ecec <__swsetup_r+0xbc>
 800ecd2:	2300      	movs	r3, #0
 800ecd4:	60a3      	str	r3, [r4, #8]
 800ecd6:	6963      	ldr	r3, [r4, #20]
 800ecd8:	425b      	negs	r3, r3
 800ecda:	61a3      	str	r3, [r4, #24]
 800ecdc:	6923      	ldr	r3, [r4, #16]
 800ecde:	b953      	cbnz	r3, 800ecf6 <__swsetup_r+0xc6>
 800ece0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ece4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800ece8:	d1ba      	bne.n	800ec60 <__swsetup_r+0x30>
 800ecea:	bd70      	pop	{r4, r5, r6, pc}
 800ecec:	0792      	lsls	r2, r2, #30
 800ecee:	bf58      	it	pl
 800ecf0:	6963      	ldrpl	r3, [r4, #20]
 800ecf2:	60a3      	str	r3, [r4, #8]
 800ecf4:	e7f2      	b.n	800ecdc <__swsetup_r+0xac>
 800ecf6:	2000      	movs	r0, #0
 800ecf8:	e7f7      	b.n	800ecea <__swsetup_r+0xba>
 800ecfa:	bf00      	nop
 800ecfc:	20001cf8 	.word	0x20001cf8
 800ed00:	08012000 	.word	0x08012000
 800ed04:	08012020 	.word	0x08012020
 800ed08:	08011fe0 	.word	0x08011fe0

0800ed0c <quorem>:
 800ed0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed10:	6903      	ldr	r3, [r0, #16]
 800ed12:	690c      	ldr	r4, [r1, #16]
 800ed14:	42a3      	cmp	r3, r4
 800ed16:	4680      	mov	r8, r0
 800ed18:	f2c0 8082 	blt.w	800ee20 <quorem+0x114>
 800ed1c:	3c01      	subs	r4, #1
 800ed1e:	f101 0714 	add.w	r7, r1, #20
 800ed22:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800ed26:	f100 0614 	add.w	r6, r0, #20
 800ed2a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800ed2e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800ed32:	eb06 030c 	add.w	r3, r6, ip
 800ed36:	3501      	adds	r5, #1
 800ed38:	eb07 090c 	add.w	r9, r7, ip
 800ed3c:	9301      	str	r3, [sp, #4]
 800ed3e:	fbb0 f5f5 	udiv	r5, r0, r5
 800ed42:	b395      	cbz	r5, 800edaa <quorem+0x9e>
 800ed44:	f04f 0a00 	mov.w	sl, #0
 800ed48:	4638      	mov	r0, r7
 800ed4a:	46b6      	mov	lr, r6
 800ed4c:	46d3      	mov	fp, sl
 800ed4e:	f850 2b04 	ldr.w	r2, [r0], #4
 800ed52:	b293      	uxth	r3, r2
 800ed54:	fb05 a303 	mla	r3, r5, r3, sl
 800ed58:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ed5c:	b29b      	uxth	r3, r3
 800ed5e:	ebab 0303 	sub.w	r3, fp, r3
 800ed62:	0c12      	lsrs	r2, r2, #16
 800ed64:	f8de b000 	ldr.w	fp, [lr]
 800ed68:	fb05 a202 	mla	r2, r5, r2, sl
 800ed6c:	fa13 f38b 	uxtah	r3, r3, fp
 800ed70:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800ed74:	fa1f fb82 	uxth.w	fp, r2
 800ed78:	f8de 2000 	ldr.w	r2, [lr]
 800ed7c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800ed80:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ed84:	b29b      	uxth	r3, r3
 800ed86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ed8a:	4581      	cmp	r9, r0
 800ed8c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800ed90:	f84e 3b04 	str.w	r3, [lr], #4
 800ed94:	d2db      	bcs.n	800ed4e <quorem+0x42>
 800ed96:	f856 300c 	ldr.w	r3, [r6, ip]
 800ed9a:	b933      	cbnz	r3, 800edaa <quorem+0x9e>
 800ed9c:	9b01      	ldr	r3, [sp, #4]
 800ed9e:	3b04      	subs	r3, #4
 800eda0:	429e      	cmp	r6, r3
 800eda2:	461a      	mov	r2, r3
 800eda4:	d330      	bcc.n	800ee08 <quorem+0xfc>
 800eda6:	f8c8 4010 	str.w	r4, [r8, #16]
 800edaa:	4640      	mov	r0, r8
 800edac:	f001 fa08 	bl	80101c0 <__mcmp>
 800edb0:	2800      	cmp	r0, #0
 800edb2:	db25      	blt.n	800ee00 <quorem+0xf4>
 800edb4:	3501      	adds	r5, #1
 800edb6:	4630      	mov	r0, r6
 800edb8:	f04f 0c00 	mov.w	ip, #0
 800edbc:	f857 2b04 	ldr.w	r2, [r7], #4
 800edc0:	f8d0 e000 	ldr.w	lr, [r0]
 800edc4:	b293      	uxth	r3, r2
 800edc6:	ebac 0303 	sub.w	r3, ip, r3
 800edca:	0c12      	lsrs	r2, r2, #16
 800edcc:	fa13 f38e 	uxtah	r3, r3, lr
 800edd0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800edd4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800edd8:	b29b      	uxth	r3, r3
 800edda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800edde:	45b9      	cmp	r9, r7
 800ede0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ede4:	f840 3b04 	str.w	r3, [r0], #4
 800ede8:	d2e8      	bcs.n	800edbc <quorem+0xb0>
 800edea:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800edee:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800edf2:	b92a      	cbnz	r2, 800ee00 <quorem+0xf4>
 800edf4:	3b04      	subs	r3, #4
 800edf6:	429e      	cmp	r6, r3
 800edf8:	461a      	mov	r2, r3
 800edfa:	d30b      	bcc.n	800ee14 <quorem+0x108>
 800edfc:	f8c8 4010 	str.w	r4, [r8, #16]
 800ee00:	4628      	mov	r0, r5
 800ee02:	b003      	add	sp, #12
 800ee04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee08:	6812      	ldr	r2, [r2, #0]
 800ee0a:	3b04      	subs	r3, #4
 800ee0c:	2a00      	cmp	r2, #0
 800ee0e:	d1ca      	bne.n	800eda6 <quorem+0x9a>
 800ee10:	3c01      	subs	r4, #1
 800ee12:	e7c5      	b.n	800eda0 <quorem+0x94>
 800ee14:	6812      	ldr	r2, [r2, #0]
 800ee16:	3b04      	subs	r3, #4
 800ee18:	2a00      	cmp	r2, #0
 800ee1a:	d1ef      	bne.n	800edfc <quorem+0xf0>
 800ee1c:	3c01      	subs	r4, #1
 800ee1e:	e7ea      	b.n	800edf6 <quorem+0xea>
 800ee20:	2000      	movs	r0, #0
 800ee22:	e7ee      	b.n	800ee02 <quorem+0xf6>
 800ee24:	0000      	movs	r0, r0
	...

0800ee28 <_dtoa_r>:
 800ee28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee2c:	ec57 6b10 	vmov	r6, r7, d0
 800ee30:	b097      	sub	sp, #92	; 0x5c
 800ee32:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ee34:	9106      	str	r1, [sp, #24]
 800ee36:	4604      	mov	r4, r0
 800ee38:	920b      	str	r2, [sp, #44]	; 0x2c
 800ee3a:	9312      	str	r3, [sp, #72]	; 0x48
 800ee3c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ee40:	e9cd 6700 	strd	r6, r7, [sp]
 800ee44:	b93d      	cbnz	r5, 800ee56 <_dtoa_r+0x2e>
 800ee46:	2010      	movs	r0, #16
 800ee48:	f000 ff92 	bl	800fd70 <malloc>
 800ee4c:	6260      	str	r0, [r4, #36]	; 0x24
 800ee4e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ee52:	6005      	str	r5, [r0, #0]
 800ee54:	60c5      	str	r5, [r0, #12]
 800ee56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ee58:	6819      	ldr	r1, [r3, #0]
 800ee5a:	b151      	cbz	r1, 800ee72 <_dtoa_r+0x4a>
 800ee5c:	685a      	ldr	r2, [r3, #4]
 800ee5e:	604a      	str	r2, [r1, #4]
 800ee60:	2301      	movs	r3, #1
 800ee62:	4093      	lsls	r3, r2
 800ee64:	608b      	str	r3, [r1, #8]
 800ee66:	4620      	mov	r0, r4
 800ee68:	f000 ffc9 	bl	800fdfe <_Bfree>
 800ee6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ee6e:	2200      	movs	r2, #0
 800ee70:	601a      	str	r2, [r3, #0]
 800ee72:	1e3b      	subs	r3, r7, #0
 800ee74:	bfbb      	ittet	lt
 800ee76:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ee7a:	9301      	strlt	r3, [sp, #4]
 800ee7c:	2300      	movge	r3, #0
 800ee7e:	2201      	movlt	r2, #1
 800ee80:	bfac      	ite	ge
 800ee82:	f8c8 3000 	strge.w	r3, [r8]
 800ee86:	f8c8 2000 	strlt.w	r2, [r8]
 800ee8a:	4baf      	ldr	r3, [pc, #700]	; (800f148 <_dtoa_r+0x320>)
 800ee8c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ee90:	ea33 0308 	bics.w	r3, r3, r8
 800ee94:	d114      	bne.n	800eec0 <_dtoa_r+0x98>
 800ee96:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ee98:	f242 730f 	movw	r3, #9999	; 0x270f
 800ee9c:	6013      	str	r3, [r2, #0]
 800ee9e:	9b00      	ldr	r3, [sp, #0]
 800eea0:	b923      	cbnz	r3, 800eeac <_dtoa_r+0x84>
 800eea2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800eea6:	2800      	cmp	r0, #0
 800eea8:	f000 8542 	beq.w	800f930 <_dtoa_r+0xb08>
 800eeac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800eeae:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800f15c <_dtoa_r+0x334>
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	f000 8544 	beq.w	800f940 <_dtoa_r+0xb18>
 800eeb8:	f10b 0303 	add.w	r3, fp, #3
 800eebc:	f000 bd3e 	b.w	800f93c <_dtoa_r+0xb14>
 800eec0:	e9dd 6700 	ldrd	r6, r7, [sp]
 800eec4:	2200      	movs	r2, #0
 800eec6:	2300      	movs	r3, #0
 800eec8:	4630      	mov	r0, r6
 800eeca:	4639      	mov	r1, r7
 800eecc:	f7f1 fe24 	bl	8000b18 <__aeabi_dcmpeq>
 800eed0:	4681      	mov	r9, r0
 800eed2:	b168      	cbz	r0, 800eef0 <_dtoa_r+0xc8>
 800eed4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800eed6:	2301      	movs	r3, #1
 800eed8:	6013      	str	r3, [r2, #0]
 800eeda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800eedc:	2b00      	cmp	r3, #0
 800eede:	f000 8524 	beq.w	800f92a <_dtoa_r+0xb02>
 800eee2:	4b9a      	ldr	r3, [pc, #616]	; (800f14c <_dtoa_r+0x324>)
 800eee4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800eee6:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 800eeea:	6013      	str	r3, [r2, #0]
 800eeec:	f000 bd28 	b.w	800f940 <_dtoa_r+0xb18>
 800eef0:	aa14      	add	r2, sp, #80	; 0x50
 800eef2:	a915      	add	r1, sp, #84	; 0x54
 800eef4:	ec47 6b10 	vmov	d0, r6, r7
 800eef8:	4620      	mov	r0, r4
 800eefa:	f001 f9d8 	bl	80102ae <__d2b>
 800eefe:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800ef02:	9004      	str	r0, [sp, #16]
 800ef04:	2d00      	cmp	r5, #0
 800ef06:	d07c      	beq.n	800f002 <_dtoa_r+0x1da>
 800ef08:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ef0c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800ef10:	46b2      	mov	sl, r6
 800ef12:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800ef16:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ef1a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800ef1e:	2200      	movs	r2, #0
 800ef20:	4b8b      	ldr	r3, [pc, #556]	; (800f150 <_dtoa_r+0x328>)
 800ef22:	4650      	mov	r0, sl
 800ef24:	4659      	mov	r1, fp
 800ef26:	f7f1 f9d7 	bl	80002d8 <__aeabi_dsub>
 800ef2a:	a381      	add	r3, pc, #516	; (adr r3, 800f130 <_dtoa_r+0x308>)
 800ef2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef30:	f7f1 fb8a 	bl	8000648 <__aeabi_dmul>
 800ef34:	a380      	add	r3, pc, #512	; (adr r3, 800f138 <_dtoa_r+0x310>)
 800ef36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef3a:	f7f1 f9cf 	bl	80002dc <__adddf3>
 800ef3e:	4606      	mov	r6, r0
 800ef40:	4628      	mov	r0, r5
 800ef42:	460f      	mov	r7, r1
 800ef44:	f7f1 fb16 	bl	8000574 <__aeabi_i2d>
 800ef48:	a37d      	add	r3, pc, #500	; (adr r3, 800f140 <_dtoa_r+0x318>)
 800ef4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef4e:	f7f1 fb7b 	bl	8000648 <__aeabi_dmul>
 800ef52:	4602      	mov	r2, r0
 800ef54:	460b      	mov	r3, r1
 800ef56:	4630      	mov	r0, r6
 800ef58:	4639      	mov	r1, r7
 800ef5a:	f7f1 f9bf 	bl	80002dc <__adddf3>
 800ef5e:	4606      	mov	r6, r0
 800ef60:	460f      	mov	r7, r1
 800ef62:	f7f1 fe21 	bl	8000ba8 <__aeabi_d2iz>
 800ef66:	2200      	movs	r2, #0
 800ef68:	4682      	mov	sl, r0
 800ef6a:	2300      	movs	r3, #0
 800ef6c:	4630      	mov	r0, r6
 800ef6e:	4639      	mov	r1, r7
 800ef70:	f7f1 fddc 	bl	8000b2c <__aeabi_dcmplt>
 800ef74:	b148      	cbz	r0, 800ef8a <_dtoa_r+0x162>
 800ef76:	4650      	mov	r0, sl
 800ef78:	f7f1 fafc 	bl	8000574 <__aeabi_i2d>
 800ef7c:	4632      	mov	r2, r6
 800ef7e:	463b      	mov	r3, r7
 800ef80:	f7f1 fdca 	bl	8000b18 <__aeabi_dcmpeq>
 800ef84:	b908      	cbnz	r0, 800ef8a <_dtoa_r+0x162>
 800ef86:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800ef8a:	f1ba 0f16 	cmp.w	sl, #22
 800ef8e:	d859      	bhi.n	800f044 <_dtoa_r+0x21c>
 800ef90:	4970      	ldr	r1, [pc, #448]	; (800f154 <_dtoa_r+0x32c>)
 800ef92:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800ef96:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ef9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ef9e:	f7f1 fde3 	bl	8000b68 <__aeabi_dcmpgt>
 800efa2:	2800      	cmp	r0, #0
 800efa4:	d050      	beq.n	800f048 <_dtoa_r+0x220>
 800efa6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800efaa:	2300      	movs	r3, #0
 800efac:	930f      	str	r3, [sp, #60]	; 0x3c
 800efae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800efb0:	1b5d      	subs	r5, r3, r5
 800efb2:	f1b5 0801 	subs.w	r8, r5, #1
 800efb6:	bf49      	itett	mi
 800efb8:	f1c5 0301 	rsbmi	r3, r5, #1
 800efbc:	2300      	movpl	r3, #0
 800efbe:	9305      	strmi	r3, [sp, #20]
 800efc0:	f04f 0800 	movmi.w	r8, #0
 800efc4:	bf58      	it	pl
 800efc6:	9305      	strpl	r3, [sp, #20]
 800efc8:	f1ba 0f00 	cmp.w	sl, #0
 800efcc:	db3e      	blt.n	800f04c <_dtoa_r+0x224>
 800efce:	2300      	movs	r3, #0
 800efd0:	44d0      	add	r8, sl
 800efd2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800efd6:	9307      	str	r3, [sp, #28]
 800efd8:	9b06      	ldr	r3, [sp, #24]
 800efda:	2b09      	cmp	r3, #9
 800efdc:	f200 8090 	bhi.w	800f100 <_dtoa_r+0x2d8>
 800efe0:	2b05      	cmp	r3, #5
 800efe2:	bfc4      	itt	gt
 800efe4:	3b04      	subgt	r3, #4
 800efe6:	9306      	strgt	r3, [sp, #24]
 800efe8:	9b06      	ldr	r3, [sp, #24]
 800efea:	f1a3 0302 	sub.w	r3, r3, #2
 800efee:	bfcc      	ite	gt
 800eff0:	2500      	movgt	r5, #0
 800eff2:	2501      	movle	r5, #1
 800eff4:	2b03      	cmp	r3, #3
 800eff6:	f200 808f 	bhi.w	800f118 <_dtoa_r+0x2f0>
 800effa:	e8df f003 	tbb	[pc, r3]
 800effe:	7f7d      	.short	0x7f7d
 800f000:	7131      	.short	0x7131
 800f002:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800f006:	441d      	add	r5, r3
 800f008:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800f00c:	2820      	cmp	r0, #32
 800f00e:	dd13      	ble.n	800f038 <_dtoa_r+0x210>
 800f010:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800f014:	9b00      	ldr	r3, [sp, #0]
 800f016:	fa08 f800 	lsl.w	r8, r8, r0
 800f01a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800f01e:	fa23 f000 	lsr.w	r0, r3, r0
 800f022:	ea48 0000 	orr.w	r0, r8, r0
 800f026:	f7f1 fa95 	bl	8000554 <__aeabi_ui2d>
 800f02a:	2301      	movs	r3, #1
 800f02c:	4682      	mov	sl, r0
 800f02e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800f032:	3d01      	subs	r5, #1
 800f034:	9313      	str	r3, [sp, #76]	; 0x4c
 800f036:	e772      	b.n	800ef1e <_dtoa_r+0xf6>
 800f038:	9b00      	ldr	r3, [sp, #0]
 800f03a:	f1c0 0020 	rsb	r0, r0, #32
 800f03e:	fa03 f000 	lsl.w	r0, r3, r0
 800f042:	e7f0      	b.n	800f026 <_dtoa_r+0x1fe>
 800f044:	2301      	movs	r3, #1
 800f046:	e7b1      	b.n	800efac <_dtoa_r+0x184>
 800f048:	900f      	str	r0, [sp, #60]	; 0x3c
 800f04a:	e7b0      	b.n	800efae <_dtoa_r+0x186>
 800f04c:	9b05      	ldr	r3, [sp, #20]
 800f04e:	eba3 030a 	sub.w	r3, r3, sl
 800f052:	9305      	str	r3, [sp, #20]
 800f054:	f1ca 0300 	rsb	r3, sl, #0
 800f058:	9307      	str	r3, [sp, #28]
 800f05a:	2300      	movs	r3, #0
 800f05c:	930e      	str	r3, [sp, #56]	; 0x38
 800f05e:	e7bb      	b.n	800efd8 <_dtoa_r+0x1b0>
 800f060:	2301      	movs	r3, #1
 800f062:	930a      	str	r3, [sp, #40]	; 0x28
 800f064:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f066:	2b00      	cmp	r3, #0
 800f068:	dd59      	ble.n	800f11e <_dtoa_r+0x2f6>
 800f06a:	9302      	str	r3, [sp, #8]
 800f06c:	4699      	mov	r9, r3
 800f06e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f070:	2200      	movs	r2, #0
 800f072:	6072      	str	r2, [r6, #4]
 800f074:	2204      	movs	r2, #4
 800f076:	f102 0014 	add.w	r0, r2, #20
 800f07a:	4298      	cmp	r0, r3
 800f07c:	6871      	ldr	r1, [r6, #4]
 800f07e:	d953      	bls.n	800f128 <_dtoa_r+0x300>
 800f080:	4620      	mov	r0, r4
 800f082:	f000 fe88 	bl	800fd96 <_Balloc>
 800f086:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f088:	6030      	str	r0, [r6, #0]
 800f08a:	f1b9 0f0e 	cmp.w	r9, #14
 800f08e:	f8d3 b000 	ldr.w	fp, [r3]
 800f092:	f200 80e6 	bhi.w	800f262 <_dtoa_r+0x43a>
 800f096:	2d00      	cmp	r5, #0
 800f098:	f000 80e3 	beq.w	800f262 <_dtoa_r+0x43a>
 800f09c:	ed9d 7b00 	vldr	d7, [sp]
 800f0a0:	f1ba 0f00 	cmp.w	sl, #0
 800f0a4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800f0a8:	dd74      	ble.n	800f194 <_dtoa_r+0x36c>
 800f0aa:	4a2a      	ldr	r2, [pc, #168]	; (800f154 <_dtoa_r+0x32c>)
 800f0ac:	f00a 030f 	and.w	r3, sl, #15
 800f0b0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f0b4:	ed93 7b00 	vldr	d7, [r3]
 800f0b8:	ea4f 162a 	mov.w	r6, sl, asr #4
 800f0bc:	06f0      	lsls	r0, r6, #27
 800f0be:	ed8d 7b08 	vstr	d7, [sp, #32]
 800f0c2:	d565      	bpl.n	800f190 <_dtoa_r+0x368>
 800f0c4:	4b24      	ldr	r3, [pc, #144]	; (800f158 <_dtoa_r+0x330>)
 800f0c6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800f0ca:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f0ce:	f7f1 fbe5 	bl	800089c <__aeabi_ddiv>
 800f0d2:	e9cd 0100 	strd	r0, r1, [sp]
 800f0d6:	f006 060f 	and.w	r6, r6, #15
 800f0da:	2503      	movs	r5, #3
 800f0dc:	4f1e      	ldr	r7, [pc, #120]	; (800f158 <_dtoa_r+0x330>)
 800f0de:	e04c      	b.n	800f17a <_dtoa_r+0x352>
 800f0e0:	2301      	movs	r3, #1
 800f0e2:	930a      	str	r3, [sp, #40]	; 0x28
 800f0e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f0e6:	4453      	add	r3, sl
 800f0e8:	f103 0901 	add.w	r9, r3, #1
 800f0ec:	9302      	str	r3, [sp, #8]
 800f0ee:	464b      	mov	r3, r9
 800f0f0:	2b01      	cmp	r3, #1
 800f0f2:	bfb8      	it	lt
 800f0f4:	2301      	movlt	r3, #1
 800f0f6:	e7ba      	b.n	800f06e <_dtoa_r+0x246>
 800f0f8:	2300      	movs	r3, #0
 800f0fa:	e7b2      	b.n	800f062 <_dtoa_r+0x23a>
 800f0fc:	2300      	movs	r3, #0
 800f0fe:	e7f0      	b.n	800f0e2 <_dtoa_r+0x2ba>
 800f100:	2501      	movs	r5, #1
 800f102:	2300      	movs	r3, #0
 800f104:	9306      	str	r3, [sp, #24]
 800f106:	950a      	str	r5, [sp, #40]	; 0x28
 800f108:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f10c:	9302      	str	r3, [sp, #8]
 800f10e:	4699      	mov	r9, r3
 800f110:	2200      	movs	r2, #0
 800f112:	2312      	movs	r3, #18
 800f114:	920b      	str	r2, [sp, #44]	; 0x2c
 800f116:	e7aa      	b.n	800f06e <_dtoa_r+0x246>
 800f118:	2301      	movs	r3, #1
 800f11a:	930a      	str	r3, [sp, #40]	; 0x28
 800f11c:	e7f4      	b.n	800f108 <_dtoa_r+0x2e0>
 800f11e:	2301      	movs	r3, #1
 800f120:	9302      	str	r3, [sp, #8]
 800f122:	4699      	mov	r9, r3
 800f124:	461a      	mov	r2, r3
 800f126:	e7f5      	b.n	800f114 <_dtoa_r+0x2ec>
 800f128:	3101      	adds	r1, #1
 800f12a:	6071      	str	r1, [r6, #4]
 800f12c:	0052      	lsls	r2, r2, #1
 800f12e:	e7a2      	b.n	800f076 <_dtoa_r+0x24e>
 800f130:	636f4361 	.word	0x636f4361
 800f134:	3fd287a7 	.word	0x3fd287a7
 800f138:	8b60c8b3 	.word	0x8b60c8b3
 800f13c:	3fc68a28 	.word	0x3fc68a28
 800f140:	509f79fb 	.word	0x509f79fb
 800f144:	3fd34413 	.word	0x3fd34413
 800f148:	7ff00000 	.word	0x7ff00000
 800f14c:	08011fad 	.word	0x08011fad
 800f150:	3ff80000 	.word	0x3ff80000
 800f154:	08012068 	.word	0x08012068
 800f158:	08012040 	.word	0x08012040
 800f15c:	08011fd9 	.word	0x08011fd9
 800f160:	07f1      	lsls	r1, r6, #31
 800f162:	d508      	bpl.n	800f176 <_dtoa_r+0x34e>
 800f164:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f168:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f16c:	f7f1 fa6c 	bl	8000648 <__aeabi_dmul>
 800f170:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f174:	3501      	adds	r5, #1
 800f176:	1076      	asrs	r6, r6, #1
 800f178:	3708      	adds	r7, #8
 800f17a:	2e00      	cmp	r6, #0
 800f17c:	d1f0      	bne.n	800f160 <_dtoa_r+0x338>
 800f17e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f182:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f186:	f7f1 fb89 	bl	800089c <__aeabi_ddiv>
 800f18a:	e9cd 0100 	strd	r0, r1, [sp]
 800f18e:	e01a      	b.n	800f1c6 <_dtoa_r+0x39e>
 800f190:	2502      	movs	r5, #2
 800f192:	e7a3      	b.n	800f0dc <_dtoa_r+0x2b4>
 800f194:	f000 80a0 	beq.w	800f2d8 <_dtoa_r+0x4b0>
 800f198:	f1ca 0600 	rsb	r6, sl, #0
 800f19c:	4b9f      	ldr	r3, [pc, #636]	; (800f41c <_dtoa_r+0x5f4>)
 800f19e:	4fa0      	ldr	r7, [pc, #640]	; (800f420 <_dtoa_r+0x5f8>)
 800f1a0:	f006 020f 	and.w	r2, r6, #15
 800f1a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f1a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1ac:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800f1b0:	f7f1 fa4a 	bl	8000648 <__aeabi_dmul>
 800f1b4:	e9cd 0100 	strd	r0, r1, [sp]
 800f1b8:	1136      	asrs	r6, r6, #4
 800f1ba:	2300      	movs	r3, #0
 800f1bc:	2502      	movs	r5, #2
 800f1be:	2e00      	cmp	r6, #0
 800f1c0:	d17f      	bne.n	800f2c2 <_dtoa_r+0x49a>
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d1e1      	bne.n	800f18a <_dtoa_r+0x362>
 800f1c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	f000 8087 	beq.w	800f2dc <_dtoa_r+0x4b4>
 800f1ce:	e9dd 6700 	ldrd	r6, r7, [sp]
 800f1d2:	2200      	movs	r2, #0
 800f1d4:	4b93      	ldr	r3, [pc, #588]	; (800f424 <_dtoa_r+0x5fc>)
 800f1d6:	4630      	mov	r0, r6
 800f1d8:	4639      	mov	r1, r7
 800f1da:	f7f1 fca7 	bl	8000b2c <__aeabi_dcmplt>
 800f1de:	2800      	cmp	r0, #0
 800f1e0:	d07c      	beq.n	800f2dc <_dtoa_r+0x4b4>
 800f1e2:	f1b9 0f00 	cmp.w	r9, #0
 800f1e6:	d079      	beq.n	800f2dc <_dtoa_r+0x4b4>
 800f1e8:	9b02      	ldr	r3, [sp, #8]
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	dd35      	ble.n	800f25a <_dtoa_r+0x432>
 800f1ee:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800f1f2:	9308      	str	r3, [sp, #32]
 800f1f4:	4639      	mov	r1, r7
 800f1f6:	2200      	movs	r2, #0
 800f1f8:	4b8b      	ldr	r3, [pc, #556]	; (800f428 <_dtoa_r+0x600>)
 800f1fa:	4630      	mov	r0, r6
 800f1fc:	f7f1 fa24 	bl	8000648 <__aeabi_dmul>
 800f200:	e9cd 0100 	strd	r0, r1, [sp]
 800f204:	9f02      	ldr	r7, [sp, #8]
 800f206:	3501      	adds	r5, #1
 800f208:	4628      	mov	r0, r5
 800f20a:	f7f1 f9b3 	bl	8000574 <__aeabi_i2d>
 800f20e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f212:	f7f1 fa19 	bl	8000648 <__aeabi_dmul>
 800f216:	2200      	movs	r2, #0
 800f218:	4b84      	ldr	r3, [pc, #528]	; (800f42c <_dtoa_r+0x604>)
 800f21a:	f7f1 f85f 	bl	80002dc <__adddf3>
 800f21e:	4605      	mov	r5, r0
 800f220:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800f224:	2f00      	cmp	r7, #0
 800f226:	d15d      	bne.n	800f2e4 <_dtoa_r+0x4bc>
 800f228:	2200      	movs	r2, #0
 800f22a:	4b81      	ldr	r3, [pc, #516]	; (800f430 <_dtoa_r+0x608>)
 800f22c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f230:	f7f1 f852 	bl	80002d8 <__aeabi_dsub>
 800f234:	462a      	mov	r2, r5
 800f236:	4633      	mov	r3, r6
 800f238:	e9cd 0100 	strd	r0, r1, [sp]
 800f23c:	f7f1 fc94 	bl	8000b68 <__aeabi_dcmpgt>
 800f240:	2800      	cmp	r0, #0
 800f242:	f040 8288 	bne.w	800f756 <_dtoa_r+0x92e>
 800f246:	462a      	mov	r2, r5
 800f248:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800f24c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f250:	f7f1 fc6c 	bl	8000b2c <__aeabi_dcmplt>
 800f254:	2800      	cmp	r0, #0
 800f256:	f040 827c 	bne.w	800f752 <_dtoa_r+0x92a>
 800f25a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f25e:	e9cd 2300 	strd	r2, r3, [sp]
 800f262:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f264:	2b00      	cmp	r3, #0
 800f266:	f2c0 8150 	blt.w	800f50a <_dtoa_r+0x6e2>
 800f26a:	f1ba 0f0e 	cmp.w	sl, #14
 800f26e:	f300 814c 	bgt.w	800f50a <_dtoa_r+0x6e2>
 800f272:	4b6a      	ldr	r3, [pc, #424]	; (800f41c <_dtoa_r+0x5f4>)
 800f274:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f278:	ed93 7b00 	vldr	d7, [r3]
 800f27c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f27e:	2b00      	cmp	r3, #0
 800f280:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f284:	f280 80d8 	bge.w	800f438 <_dtoa_r+0x610>
 800f288:	f1b9 0f00 	cmp.w	r9, #0
 800f28c:	f300 80d4 	bgt.w	800f438 <_dtoa_r+0x610>
 800f290:	f040 825e 	bne.w	800f750 <_dtoa_r+0x928>
 800f294:	2200      	movs	r2, #0
 800f296:	4b66      	ldr	r3, [pc, #408]	; (800f430 <_dtoa_r+0x608>)
 800f298:	ec51 0b17 	vmov	r0, r1, d7
 800f29c:	f7f1 f9d4 	bl	8000648 <__aeabi_dmul>
 800f2a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f2a4:	f7f1 fc56 	bl	8000b54 <__aeabi_dcmpge>
 800f2a8:	464f      	mov	r7, r9
 800f2aa:	464e      	mov	r6, r9
 800f2ac:	2800      	cmp	r0, #0
 800f2ae:	f040 8234 	bne.w	800f71a <_dtoa_r+0x8f2>
 800f2b2:	2331      	movs	r3, #49	; 0x31
 800f2b4:	f10b 0501 	add.w	r5, fp, #1
 800f2b8:	f88b 3000 	strb.w	r3, [fp]
 800f2bc:	f10a 0a01 	add.w	sl, sl, #1
 800f2c0:	e22f      	b.n	800f722 <_dtoa_r+0x8fa>
 800f2c2:	07f2      	lsls	r2, r6, #31
 800f2c4:	d505      	bpl.n	800f2d2 <_dtoa_r+0x4aa>
 800f2c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f2ca:	f7f1 f9bd 	bl	8000648 <__aeabi_dmul>
 800f2ce:	3501      	adds	r5, #1
 800f2d0:	2301      	movs	r3, #1
 800f2d2:	1076      	asrs	r6, r6, #1
 800f2d4:	3708      	adds	r7, #8
 800f2d6:	e772      	b.n	800f1be <_dtoa_r+0x396>
 800f2d8:	2502      	movs	r5, #2
 800f2da:	e774      	b.n	800f1c6 <_dtoa_r+0x39e>
 800f2dc:	f8cd a020 	str.w	sl, [sp, #32]
 800f2e0:	464f      	mov	r7, r9
 800f2e2:	e791      	b.n	800f208 <_dtoa_r+0x3e0>
 800f2e4:	4b4d      	ldr	r3, [pc, #308]	; (800f41c <_dtoa_r+0x5f4>)
 800f2e6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f2ea:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800f2ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d047      	beq.n	800f384 <_dtoa_r+0x55c>
 800f2f4:	4602      	mov	r2, r0
 800f2f6:	460b      	mov	r3, r1
 800f2f8:	2000      	movs	r0, #0
 800f2fa:	494e      	ldr	r1, [pc, #312]	; (800f434 <_dtoa_r+0x60c>)
 800f2fc:	f7f1 face 	bl	800089c <__aeabi_ddiv>
 800f300:	462a      	mov	r2, r5
 800f302:	4633      	mov	r3, r6
 800f304:	f7f0 ffe8 	bl	80002d8 <__aeabi_dsub>
 800f308:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800f30c:	465d      	mov	r5, fp
 800f30e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f312:	f7f1 fc49 	bl	8000ba8 <__aeabi_d2iz>
 800f316:	4606      	mov	r6, r0
 800f318:	f7f1 f92c 	bl	8000574 <__aeabi_i2d>
 800f31c:	4602      	mov	r2, r0
 800f31e:	460b      	mov	r3, r1
 800f320:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f324:	f7f0 ffd8 	bl	80002d8 <__aeabi_dsub>
 800f328:	3630      	adds	r6, #48	; 0x30
 800f32a:	f805 6b01 	strb.w	r6, [r5], #1
 800f32e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800f332:	e9cd 0100 	strd	r0, r1, [sp]
 800f336:	f7f1 fbf9 	bl	8000b2c <__aeabi_dcmplt>
 800f33a:	2800      	cmp	r0, #0
 800f33c:	d163      	bne.n	800f406 <_dtoa_r+0x5de>
 800f33e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f342:	2000      	movs	r0, #0
 800f344:	4937      	ldr	r1, [pc, #220]	; (800f424 <_dtoa_r+0x5fc>)
 800f346:	f7f0 ffc7 	bl	80002d8 <__aeabi_dsub>
 800f34a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800f34e:	f7f1 fbed 	bl	8000b2c <__aeabi_dcmplt>
 800f352:	2800      	cmp	r0, #0
 800f354:	f040 80b7 	bne.w	800f4c6 <_dtoa_r+0x69e>
 800f358:	eba5 030b 	sub.w	r3, r5, fp
 800f35c:	429f      	cmp	r7, r3
 800f35e:	f77f af7c 	ble.w	800f25a <_dtoa_r+0x432>
 800f362:	2200      	movs	r2, #0
 800f364:	4b30      	ldr	r3, [pc, #192]	; (800f428 <_dtoa_r+0x600>)
 800f366:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f36a:	f7f1 f96d 	bl	8000648 <__aeabi_dmul>
 800f36e:	2200      	movs	r2, #0
 800f370:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800f374:	4b2c      	ldr	r3, [pc, #176]	; (800f428 <_dtoa_r+0x600>)
 800f376:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f37a:	f7f1 f965 	bl	8000648 <__aeabi_dmul>
 800f37e:	e9cd 0100 	strd	r0, r1, [sp]
 800f382:	e7c4      	b.n	800f30e <_dtoa_r+0x4e6>
 800f384:	462a      	mov	r2, r5
 800f386:	4633      	mov	r3, r6
 800f388:	f7f1 f95e 	bl	8000648 <__aeabi_dmul>
 800f38c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800f390:	eb0b 0507 	add.w	r5, fp, r7
 800f394:	465e      	mov	r6, fp
 800f396:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f39a:	f7f1 fc05 	bl	8000ba8 <__aeabi_d2iz>
 800f39e:	4607      	mov	r7, r0
 800f3a0:	f7f1 f8e8 	bl	8000574 <__aeabi_i2d>
 800f3a4:	3730      	adds	r7, #48	; 0x30
 800f3a6:	4602      	mov	r2, r0
 800f3a8:	460b      	mov	r3, r1
 800f3aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f3ae:	f7f0 ff93 	bl	80002d8 <__aeabi_dsub>
 800f3b2:	f806 7b01 	strb.w	r7, [r6], #1
 800f3b6:	42ae      	cmp	r6, r5
 800f3b8:	e9cd 0100 	strd	r0, r1, [sp]
 800f3bc:	f04f 0200 	mov.w	r2, #0
 800f3c0:	d126      	bne.n	800f410 <_dtoa_r+0x5e8>
 800f3c2:	4b1c      	ldr	r3, [pc, #112]	; (800f434 <_dtoa_r+0x60c>)
 800f3c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f3c8:	f7f0 ff88 	bl	80002dc <__adddf3>
 800f3cc:	4602      	mov	r2, r0
 800f3ce:	460b      	mov	r3, r1
 800f3d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f3d4:	f7f1 fbc8 	bl	8000b68 <__aeabi_dcmpgt>
 800f3d8:	2800      	cmp	r0, #0
 800f3da:	d174      	bne.n	800f4c6 <_dtoa_r+0x69e>
 800f3dc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800f3e0:	2000      	movs	r0, #0
 800f3e2:	4914      	ldr	r1, [pc, #80]	; (800f434 <_dtoa_r+0x60c>)
 800f3e4:	f7f0 ff78 	bl	80002d8 <__aeabi_dsub>
 800f3e8:	4602      	mov	r2, r0
 800f3ea:	460b      	mov	r3, r1
 800f3ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f3f0:	f7f1 fb9c 	bl	8000b2c <__aeabi_dcmplt>
 800f3f4:	2800      	cmp	r0, #0
 800f3f6:	f43f af30 	beq.w	800f25a <_dtoa_r+0x432>
 800f3fa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f3fe:	2b30      	cmp	r3, #48	; 0x30
 800f400:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800f404:	d002      	beq.n	800f40c <_dtoa_r+0x5e4>
 800f406:	f8dd a020 	ldr.w	sl, [sp, #32]
 800f40a:	e04a      	b.n	800f4a2 <_dtoa_r+0x67a>
 800f40c:	4615      	mov	r5, r2
 800f40e:	e7f4      	b.n	800f3fa <_dtoa_r+0x5d2>
 800f410:	4b05      	ldr	r3, [pc, #20]	; (800f428 <_dtoa_r+0x600>)
 800f412:	f7f1 f919 	bl	8000648 <__aeabi_dmul>
 800f416:	e9cd 0100 	strd	r0, r1, [sp]
 800f41a:	e7bc      	b.n	800f396 <_dtoa_r+0x56e>
 800f41c:	08012068 	.word	0x08012068
 800f420:	08012040 	.word	0x08012040
 800f424:	3ff00000 	.word	0x3ff00000
 800f428:	40240000 	.word	0x40240000
 800f42c:	401c0000 	.word	0x401c0000
 800f430:	40140000 	.word	0x40140000
 800f434:	3fe00000 	.word	0x3fe00000
 800f438:	e9dd 6700 	ldrd	r6, r7, [sp]
 800f43c:	465d      	mov	r5, fp
 800f43e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f442:	4630      	mov	r0, r6
 800f444:	4639      	mov	r1, r7
 800f446:	f7f1 fa29 	bl	800089c <__aeabi_ddiv>
 800f44a:	f7f1 fbad 	bl	8000ba8 <__aeabi_d2iz>
 800f44e:	4680      	mov	r8, r0
 800f450:	f7f1 f890 	bl	8000574 <__aeabi_i2d>
 800f454:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f458:	f7f1 f8f6 	bl	8000648 <__aeabi_dmul>
 800f45c:	4602      	mov	r2, r0
 800f45e:	460b      	mov	r3, r1
 800f460:	4630      	mov	r0, r6
 800f462:	4639      	mov	r1, r7
 800f464:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800f468:	f7f0 ff36 	bl	80002d8 <__aeabi_dsub>
 800f46c:	f805 6b01 	strb.w	r6, [r5], #1
 800f470:	eba5 060b 	sub.w	r6, r5, fp
 800f474:	45b1      	cmp	r9, r6
 800f476:	4602      	mov	r2, r0
 800f478:	460b      	mov	r3, r1
 800f47a:	d139      	bne.n	800f4f0 <_dtoa_r+0x6c8>
 800f47c:	f7f0 ff2e 	bl	80002dc <__adddf3>
 800f480:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f484:	4606      	mov	r6, r0
 800f486:	460f      	mov	r7, r1
 800f488:	f7f1 fb6e 	bl	8000b68 <__aeabi_dcmpgt>
 800f48c:	b9c8      	cbnz	r0, 800f4c2 <_dtoa_r+0x69a>
 800f48e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f492:	4630      	mov	r0, r6
 800f494:	4639      	mov	r1, r7
 800f496:	f7f1 fb3f 	bl	8000b18 <__aeabi_dcmpeq>
 800f49a:	b110      	cbz	r0, 800f4a2 <_dtoa_r+0x67a>
 800f49c:	f018 0f01 	tst.w	r8, #1
 800f4a0:	d10f      	bne.n	800f4c2 <_dtoa_r+0x69a>
 800f4a2:	9904      	ldr	r1, [sp, #16]
 800f4a4:	4620      	mov	r0, r4
 800f4a6:	f000 fcaa 	bl	800fdfe <_Bfree>
 800f4aa:	2300      	movs	r3, #0
 800f4ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f4ae:	702b      	strb	r3, [r5, #0]
 800f4b0:	f10a 0301 	add.w	r3, sl, #1
 800f4b4:	6013      	str	r3, [r2, #0]
 800f4b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	f000 8241 	beq.w	800f940 <_dtoa_r+0xb18>
 800f4be:	601d      	str	r5, [r3, #0]
 800f4c0:	e23e      	b.n	800f940 <_dtoa_r+0xb18>
 800f4c2:	f8cd a020 	str.w	sl, [sp, #32]
 800f4c6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f4ca:	2a39      	cmp	r2, #57	; 0x39
 800f4cc:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 800f4d0:	d108      	bne.n	800f4e4 <_dtoa_r+0x6bc>
 800f4d2:	459b      	cmp	fp, r3
 800f4d4:	d10a      	bne.n	800f4ec <_dtoa_r+0x6c4>
 800f4d6:	9b08      	ldr	r3, [sp, #32]
 800f4d8:	3301      	adds	r3, #1
 800f4da:	9308      	str	r3, [sp, #32]
 800f4dc:	2330      	movs	r3, #48	; 0x30
 800f4de:	f88b 3000 	strb.w	r3, [fp]
 800f4e2:	465b      	mov	r3, fp
 800f4e4:	781a      	ldrb	r2, [r3, #0]
 800f4e6:	3201      	adds	r2, #1
 800f4e8:	701a      	strb	r2, [r3, #0]
 800f4ea:	e78c      	b.n	800f406 <_dtoa_r+0x5de>
 800f4ec:	461d      	mov	r5, r3
 800f4ee:	e7ea      	b.n	800f4c6 <_dtoa_r+0x69e>
 800f4f0:	2200      	movs	r2, #0
 800f4f2:	4b9b      	ldr	r3, [pc, #620]	; (800f760 <_dtoa_r+0x938>)
 800f4f4:	f7f1 f8a8 	bl	8000648 <__aeabi_dmul>
 800f4f8:	2200      	movs	r2, #0
 800f4fa:	2300      	movs	r3, #0
 800f4fc:	4606      	mov	r6, r0
 800f4fe:	460f      	mov	r7, r1
 800f500:	f7f1 fb0a 	bl	8000b18 <__aeabi_dcmpeq>
 800f504:	2800      	cmp	r0, #0
 800f506:	d09a      	beq.n	800f43e <_dtoa_r+0x616>
 800f508:	e7cb      	b.n	800f4a2 <_dtoa_r+0x67a>
 800f50a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f50c:	2a00      	cmp	r2, #0
 800f50e:	f000 808b 	beq.w	800f628 <_dtoa_r+0x800>
 800f512:	9a06      	ldr	r2, [sp, #24]
 800f514:	2a01      	cmp	r2, #1
 800f516:	dc6e      	bgt.n	800f5f6 <_dtoa_r+0x7ce>
 800f518:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f51a:	2a00      	cmp	r2, #0
 800f51c:	d067      	beq.n	800f5ee <_dtoa_r+0x7c6>
 800f51e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f522:	9f07      	ldr	r7, [sp, #28]
 800f524:	9d05      	ldr	r5, [sp, #20]
 800f526:	9a05      	ldr	r2, [sp, #20]
 800f528:	2101      	movs	r1, #1
 800f52a:	441a      	add	r2, r3
 800f52c:	4620      	mov	r0, r4
 800f52e:	9205      	str	r2, [sp, #20]
 800f530:	4498      	add	r8, r3
 800f532:	f000 fd04 	bl	800ff3e <__i2b>
 800f536:	4606      	mov	r6, r0
 800f538:	2d00      	cmp	r5, #0
 800f53a:	dd0c      	ble.n	800f556 <_dtoa_r+0x72e>
 800f53c:	f1b8 0f00 	cmp.w	r8, #0
 800f540:	dd09      	ble.n	800f556 <_dtoa_r+0x72e>
 800f542:	4545      	cmp	r5, r8
 800f544:	9a05      	ldr	r2, [sp, #20]
 800f546:	462b      	mov	r3, r5
 800f548:	bfa8      	it	ge
 800f54a:	4643      	movge	r3, r8
 800f54c:	1ad2      	subs	r2, r2, r3
 800f54e:	9205      	str	r2, [sp, #20]
 800f550:	1aed      	subs	r5, r5, r3
 800f552:	eba8 0803 	sub.w	r8, r8, r3
 800f556:	9b07      	ldr	r3, [sp, #28]
 800f558:	b1eb      	cbz	r3, 800f596 <_dtoa_r+0x76e>
 800f55a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d067      	beq.n	800f630 <_dtoa_r+0x808>
 800f560:	b18f      	cbz	r7, 800f586 <_dtoa_r+0x75e>
 800f562:	4631      	mov	r1, r6
 800f564:	463a      	mov	r2, r7
 800f566:	4620      	mov	r0, r4
 800f568:	f000 fd88 	bl	801007c <__pow5mult>
 800f56c:	9a04      	ldr	r2, [sp, #16]
 800f56e:	4601      	mov	r1, r0
 800f570:	4606      	mov	r6, r0
 800f572:	4620      	mov	r0, r4
 800f574:	f000 fcec 	bl	800ff50 <__multiply>
 800f578:	9904      	ldr	r1, [sp, #16]
 800f57a:	9008      	str	r0, [sp, #32]
 800f57c:	4620      	mov	r0, r4
 800f57e:	f000 fc3e 	bl	800fdfe <_Bfree>
 800f582:	9b08      	ldr	r3, [sp, #32]
 800f584:	9304      	str	r3, [sp, #16]
 800f586:	9b07      	ldr	r3, [sp, #28]
 800f588:	1bda      	subs	r2, r3, r7
 800f58a:	d004      	beq.n	800f596 <_dtoa_r+0x76e>
 800f58c:	9904      	ldr	r1, [sp, #16]
 800f58e:	4620      	mov	r0, r4
 800f590:	f000 fd74 	bl	801007c <__pow5mult>
 800f594:	9004      	str	r0, [sp, #16]
 800f596:	2101      	movs	r1, #1
 800f598:	4620      	mov	r0, r4
 800f59a:	f000 fcd0 	bl	800ff3e <__i2b>
 800f59e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f5a0:	4607      	mov	r7, r0
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	f000 81d0 	beq.w	800f948 <_dtoa_r+0xb20>
 800f5a8:	461a      	mov	r2, r3
 800f5aa:	4601      	mov	r1, r0
 800f5ac:	4620      	mov	r0, r4
 800f5ae:	f000 fd65 	bl	801007c <__pow5mult>
 800f5b2:	9b06      	ldr	r3, [sp, #24]
 800f5b4:	2b01      	cmp	r3, #1
 800f5b6:	4607      	mov	r7, r0
 800f5b8:	dc40      	bgt.n	800f63c <_dtoa_r+0x814>
 800f5ba:	9b00      	ldr	r3, [sp, #0]
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d139      	bne.n	800f634 <_dtoa_r+0x80c>
 800f5c0:	9b01      	ldr	r3, [sp, #4]
 800f5c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d136      	bne.n	800f638 <_dtoa_r+0x810>
 800f5ca:	9b01      	ldr	r3, [sp, #4]
 800f5cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f5d0:	0d1b      	lsrs	r3, r3, #20
 800f5d2:	051b      	lsls	r3, r3, #20
 800f5d4:	b12b      	cbz	r3, 800f5e2 <_dtoa_r+0x7ba>
 800f5d6:	9b05      	ldr	r3, [sp, #20]
 800f5d8:	3301      	adds	r3, #1
 800f5da:	9305      	str	r3, [sp, #20]
 800f5dc:	f108 0801 	add.w	r8, r8, #1
 800f5e0:	2301      	movs	r3, #1
 800f5e2:	9307      	str	r3, [sp, #28]
 800f5e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d12a      	bne.n	800f640 <_dtoa_r+0x818>
 800f5ea:	2001      	movs	r0, #1
 800f5ec:	e030      	b.n	800f650 <_dtoa_r+0x828>
 800f5ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f5f0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f5f4:	e795      	b.n	800f522 <_dtoa_r+0x6fa>
 800f5f6:	9b07      	ldr	r3, [sp, #28]
 800f5f8:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 800f5fc:	42bb      	cmp	r3, r7
 800f5fe:	bfbf      	itttt	lt
 800f600:	9b07      	ldrlt	r3, [sp, #28]
 800f602:	9707      	strlt	r7, [sp, #28]
 800f604:	1afa      	sublt	r2, r7, r3
 800f606:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800f608:	bfbb      	ittet	lt
 800f60a:	189b      	addlt	r3, r3, r2
 800f60c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800f60e:	1bdf      	subge	r7, r3, r7
 800f610:	2700      	movlt	r7, #0
 800f612:	f1b9 0f00 	cmp.w	r9, #0
 800f616:	bfb5      	itete	lt
 800f618:	9b05      	ldrlt	r3, [sp, #20]
 800f61a:	9d05      	ldrge	r5, [sp, #20]
 800f61c:	eba3 0509 	sublt.w	r5, r3, r9
 800f620:	464b      	movge	r3, r9
 800f622:	bfb8      	it	lt
 800f624:	2300      	movlt	r3, #0
 800f626:	e77e      	b.n	800f526 <_dtoa_r+0x6fe>
 800f628:	9f07      	ldr	r7, [sp, #28]
 800f62a:	9d05      	ldr	r5, [sp, #20]
 800f62c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800f62e:	e783      	b.n	800f538 <_dtoa_r+0x710>
 800f630:	9a07      	ldr	r2, [sp, #28]
 800f632:	e7ab      	b.n	800f58c <_dtoa_r+0x764>
 800f634:	2300      	movs	r3, #0
 800f636:	e7d4      	b.n	800f5e2 <_dtoa_r+0x7ba>
 800f638:	9b00      	ldr	r3, [sp, #0]
 800f63a:	e7d2      	b.n	800f5e2 <_dtoa_r+0x7ba>
 800f63c:	2300      	movs	r3, #0
 800f63e:	9307      	str	r3, [sp, #28]
 800f640:	693b      	ldr	r3, [r7, #16]
 800f642:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800f646:	6918      	ldr	r0, [r3, #16]
 800f648:	f000 fc2b 	bl	800fea2 <__hi0bits>
 800f64c:	f1c0 0020 	rsb	r0, r0, #32
 800f650:	4440      	add	r0, r8
 800f652:	f010 001f 	ands.w	r0, r0, #31
 800f656:	d047      	beq.n	800f6e8 <_dtoa_r+0x8c0>
 800f658:	f1c0 0320 	rsb	r3, r0, #32
 800f65c:	2b04      	cmp	r3, #4
 800f65e:	dd3b      	ble.n	800f6d8 <_dtoa_r+0x8b0>
 800f660:	9b05      	ldr	r3, [sp, #20]
 800f662:	f1c0 001c 	rsb	r0, r0, #28
 800f666:	4403      	add	r3, r0
 800f668:	9305      	str	r3, [sp, #20]
 800f66a:	4405      	add	r5, r0
 800f66c:	4480      	add	r8, r0
 800f66e:	9b05      	ldr	r3, [sp, #20]
 800f670:	2b00      	cmp	r3, #0
 800f672:	dd05      	ble.n	800f680 <_dtoa_r+0x858>
 800f674:	461a      	mov	r2, r3
 800f676:	9904      	ldr	r1, [sp, #16]
 800f678:	4620      	mov	r0, r4
 800f67a:	f000 fd4d 	bl	8010118 <__lshift>
 800f67e:	9004      	str	r0, [sp, #16]
 800f680:	f1b8 0f00 	cmp.w	r8, #0
 800f684:	dd05      	ble.n	800f692 <_dtoa_r+0x86a>
 800f686:	4639      	mov	r1, r7
 800f688:	4642      	mov	r2, r8
 800f68a:	4620      	mov	r0, r4
 800f68c:	f000 fd44 	bl	8010118 <__lshift>
 800f690:	4607      	mov	r7, r0
 800f692:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f694:	b353      	cbz	r3, 800f6ec <_dtoa_r+0x8c4>
 800f696:	4639      	mov	r1, r7
 800f698:	9804      	ldr	r0, [sp, #16]
 800f69a:	f000 fd91 	bl	80101c0 <__mcmp>
 800f69e:	2800      	cmp	r0, #0
 800f6a0:	da24      	bge.n	800f6ec <_dtoa_r+0x8c4>
 800f6a2:	2300      	movs	r3, #0
 800f6a4:	220a      	movs	r2, #10
 800f6a6:	9904      	ldr	r1, [sp, #16]
 800f6a8:	4620      	mov	r0, r4
 800f6aa:	f000 fbbf 	bl	800fe2c <__multadd>
 800f6ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f6b0:	9004      	str	r0, [sp, #16]
 800f6b2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	f000 814d 	beq.w	800f956 <_dtoa_r+0xb2e>
 800f6bc:	2300      	movs	r3, #0
 800f6be:	4631      	mov	r1, r6
 800f6c0:	220a      	movs	r2, #10
 800f6c2:	4620      	mov	r0, r4
 800f6c4:	f000 fbb2 	bl	800fe2c <__multadd>
 800f6c8:	9b02      	ldr	r3, [sp, #8]
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	4606      	mov	r6, r0
 800f6ce:	dc4f      	bgt.n	800f770 <_dtoa_r+0x948>
 800f6d0:	9b06      	ldr	r3, [sp, #24]
 800f6d2:	2b02      	cmp	r3, #2
 800f6d4:	dd4c      	ble.n	800f770 <_dtoa_r+0x948>
 800f6d6:	e011      	b.n	800f6fc <_dtoa_r+0x8d4>
 800f6d8:	d0c9      	beq.n	800f66e <_dtoa_r+0x846>
 800f6da:	9a05      	ldr	r2, [sp, #20]
 800f6dc:	331c      	adds	r3, #28
 800f6de:	441a      	add	r2, r3
 800f6e0:	9205      	str	r2, [sp, #20]
 800f6e2:	441d      	add	r5, r3
 800f6e4:	4498      	add	r8, r3
 800f6e6:	e7c2      	b.n	800f66e <_dtoa_r+0x846>
 800f6e8:	4603      	mov	r3, r0
 800f6ea:	e7f6      	b.n	800f6da <_dtoa_r+0x8b2>
 800f6ec:	f1b9 0f00 	cmp.w	r9, #0
 800f6f0:	dc38      	bgt.n	800f764 <_dtoa_r+0x93c>
 800f6f2:	9b06      	ldr	r3, [sp, #24]
 800f6f4:	2b02      	cmp	r3, #2
 800f6f6:	dd35      	ble.n	800f764 <_dtoa_r+0x93c>
 800f6f8:	f8cd 9008 	str.w	r9, [sp, #8]
 800f6fc:	9b02      	ldr	r3, [sp, #8]
 800f6fe:	b963      	cbnz	r3, 800f71a <_dtoa_r+0x8f2>
 800f700:	4639      	mov	r1, r7
 800f702:	2205      	movs	r2, #5
 800f704:	4620      	mov	r0, r4
 800f706:	f000 fb91 	bl	800fe2c <__multadd>
 800f70a:	4601      	mov	r1, r0
 800f70c:	4607      	mov	r7, r0
 800f70e:	9804      	ldr	r0, [sp, #16]
 800f710:	f000 fd56 	bl	80101c0 <__mcmp>
 800f714:	2800      	cmp	r0, #0
 800f716:	f73f adcc 	bgt.w	800f2b2 <_dtoa_r+0x48a>
 800f71a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f71c:	465d      	mov	r5, fp
 800f71e:	ea6f 0a03 	mvn.w	sl, r3
 800f722:	f04f 0900 	mov.w	r9, #0
 800f726:	4639      	mov	r1, r7
 800f728:	4620      	mov	r0, r4
 800f72a:	f000 fb68 	bl	800fdfe <_Bfree>
 800f72e:	2e00      	cmp	r6, #0
 800f730:	f43f aeb7 	beq.w	800f4a2 <_dtoa_r+0x67a>
 800f734:	f1b9 0f00 	cmp.w	r9, #0
 800f738:	d005      	beq.n	800f746 <_dtoa_r+0x91e>
 800f73a:	45b1      	cmp	r9, r6
 800f73c:	d003      	beq.n	800f746 <_dtoa_r+0x91e>
 800f73e:	4649      	mov	r1, r9
 800f740:	4620      	mov	r0, r4
 800f742:	f000 fb5c 	bl	800fdfe <_Bfree>
 800f746:	4631      	mov	r1, r6
 800f748:	4620      	mov	r0, r4
 800f74a:	f000 fb58 	bl	800fdfe <_Bfree>
 800f74e:	e6a8      	b.n	800f4a2 <_dtoa_r+0x67a>
 800f750:	2700      	movs	r7, #0
 800f752:	463e      	mov	r6, r7
 800f754:	e7e1      	b.n	800f71a <_dtoa_r+0x8f2>
 800f756:	f8dd a020 	ldr.w	sl, [sp, #32]
 800f75a:	463e      	mov	r6, r7
 800f75c:	e5a9      	b.n	800f2b2 <_dtoa_r+0x48a>
 800f75e:	bf00      	nop
 800f760:	40240000 	.word	0x40240000
 800f764:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f766:	f8cd 9008 	str.w	r9, [sp, #8]
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	f000 80fa 	beq.w	800f964 <_dtoa_r+0xb3c>
 800f770:	2d00      	cmp	r5, #0
 800f772:	dd05      	ble.n	800f780 <_dtoa_r+0x958>
 800f774:	4631      	mov	r1, r6
 800f776:	462a      	mov	r2, r5
 800f778:	4620      	mov	r0, r4
 800f77a:	f000 fccd 	bl	8010118 <__lshift>
 800f77e:	4606      	mov	r6, r0
 800f780:	9b07      	ldr	r3, [sp, #28]
 800f782:	2b00      	cmp	r3, #0
 800f784:	d04c      	beq.n	800f820 <_dtoa_r+0x9f8>
 800f786:	6871      	ldr	r1, [r6, #4]
 800f788:	4620      	mov	r0, r4
 800f78a:	f000 fb04 	bl	800fd96 <_Balloc>
 800f78e:	6932      	ldr	r2, [r6, #16]
 800f790:	3202      	adds	r2, #2
 800f792:	4605      	mov	r5, r0
 800f794:	0092      	lsls	r2, r2, #2
 800f796:	f106 010c 	add.w	r1, r6, #12
 800f79a:	300c      	adds	r0, #12
 800f79c:	f000 faf0 	bl	800fd80 <memcpy>
 800f7a0:	2201      	movs	r2, #1
 800f7a2:	4629      	mov	r1, r5
 800f7a4:	4620      	mov	r0, r4
 800f7a6:	f000 fcb7 	bl	8010118 <__lshift>
 800f7aa:	9b00      	ldr	r3, [sp, #0]
 800f7ac:	f8cd b014 	str.w	fp, [sp, #20]
 800f7b0:	f003 0301 	and.w	r3, r3, #1
 800f7b4:	46b1      	mov	r9, r6
 800f7b6:	9307      	str	r3, [sp, #28]
 800f7b8:	4606      	mov	r6, r0
 800f7ba:	4639      	mov	r1, r7
 800f7bc:	9804      	ldr	r0, [sp, #16]
 800f7be:	f7ff faa5 	bl	800ed0c <quorem>
 800f7c2:	4649      	mov	r1, r9
 800f7c4:	4605      	mov	r5, r0
 800f7c6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800f7ca:	9804      	ldr	r0, [sp, #16]
 800f7cc:	f000 fcf8 	bl	80101c0 <__mcmp>
 800f7d0:	4632      	mov	r2, r6
 800f7d2:	9000      	str	r0, [sp, #0]
 800f7d4:	4639      	mov	r1, r7
 800f7d6:	4620      	mov	r0, r4
 800f7d8:	f000 fd0c 	bl	80101f4 <__mdiff>
 800f7dc:	68c3      	ldr	r3, [r0, #12]
 800f7de:	4602      	mov	r2, r0
 800f7e0:	bb03      	cbnz	r3, 800f824 <_dtoa_r+0x9fc>
 800f7e2:	4601      	mov	r1, r0
 800f7e4:	9008      	str	r0, [sp, #32]
 800f7e6:	9804      	ldr	r0, [sp, #16]
 800f7e8:	f000 fcea 	bl	80101c0 <__mcmp>
 800f7ec:	9a08      	ldr	r2, [sp, #32]
 800f7ee:	4603      	mov	r3, r0
 800f7f0:	4611      	mov	r1, r2
 800f7f2:	4620      	mov	r0, r4
 800f7f4:	9308      	str	r3, [sp, #32]
 800f7f6:	f000 fb02 	bl	800fdfe <_Bfree>
 800f7fa:	9b08      	ldr	r3, [sp, #32]
 800f7fc:	b9a3      	cbnz	r3, 800f828 <_dtoa_r+0xa00>
 800f7fe:	9a06      	ldr	r2, [sp, #24]
 800f800:	b992      	cbnz	r2, 800f828 <_dtoa_r+0xa00>
 800f802:	9a07      	ldr	r2, [sp, #28]
 800f804:	b982      	cbnz	r2, 800f828 <_dtoa_r+0xa00>
 800f806:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800f80a:	d029      	beq.n	800f860 <_dtoa_r+0xa38>
 800f80c:	9b00      	ldr	r3, [sp, #0]
 800f80e:	2b00      	cmp	r3, #0
 800f810:	dd01      	ble.n	800f816 <_dtoa_r+0x9ee>
 800f812:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800f816:	9b05      	ldr	r3, [sp, #20]
 800f818:	1c5d      	adds	r5, r3, #1
 800f81a:	f883 8000 	strb.w	r8, [r3]
 800f81e:	e782      	b.n	800f726 <_dtoa_r+0x8fe>
 800f820:	4630      	mov	r0, r6
 800f822:	e7c2      	b.n	800f7aa <_dtoa_r+0x982>
 800f824:	2301      	movs	r3, #1
 800f826:	e7e3      	b.n	800f7f0 <_dtoa_r+0x9c8>
 800f828:	9a00      	ldr	r2, [sp, #0]
 800f82a:	2a00      	cmp	r2, #0
 800f82c:	db04      	blt.n	800f838 <_dtoa_r+0xa10>
 800f82e:	d125      	bne.n	800f87c <_dtoa_r+0xa54>
 800f830:	9a06      	ldr	r2, [sp, #24]
 800f832:	bb1a      	cbnz	r2, 800f87c <_dtoa_r+0xa54>
 800f834:	9a07      	ldr	r2, [sp, #28]
 800f836:	bb0a      	cbnz	r2, 800f87c <_dtoa_r+0xa54>
 800f838:	2b00      	cmp	r3, #0
 800f83a:	ddec      	ble.n	800f816 <_dtoa_r+0x9ee>
 800f83c:	2201      	movs	r2, #1
 800f83e:	9904      	ldr	r1, [sp, #16]
 800f840:	4620      	mov	r0, r4
 800f842:	f000 fc69 	bl	8010118 <__lshift>
 800f846:	4639      	mov	r1, r7
 800f848:	9004      	str	r0, [sp, #16]
 800f84a:	f000 fcb9 	bl	80101c0 <__mcmp>
 800f84e:	2800      	cmp	r0, #0
 800f850:	dc03      	bgt.n	800f85a <_dtoa_r+0xa32>
 800f852:	d1e0      	bne.n	800f816 <_dtoa_r+0x9ee>
 800f854:	f018 0f01 	tst.w	r8, #1
 800f858:	d0dd      	beq.n	800f816 <_dtoa_r+0x9ee>
 800f85a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800f85e:	d1d8      	bne.n	800f812 <_dtoa_r+0x9ea>
 800f860:	9b05      	ldr	r3, [sp, #20]
 800f862:	9a05      	ldr	r2, [sp, #20]
 800f864:	1c5d      	adds	r5, r3, #1
 800f866:	2339      	movs	r3, #57	; 0x39
 800f868:	7013      	strb	r3, [r2, #0]
 800f86a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f86e:	2b39      	cmp	r3, #57	; 0x39
 800f870:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800f874:	d04f      	beq.n	800f916 <_dtoa_r+0xaee>
 800f876:	3301      	adds	r3, #1
 800f878:	7013      	strb	r3, [r2, #0]
 800f87a:	e754      	b.n	800f726 <_dtoa_r+0x8fe>
 800f87c:	9a05      	ldr	r2, [sp, #20]
 800f87e:	2b00      	cmp	r3, #0
 800f880:	f102 0501 	add.w	r5, r2, #1
 800f884:	dd06      	ble.n	800f894 <_dtoa_r+0xa6c>
 800f886:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800f88a:	d0e9      	beq.n	800f860 <_dtoa_r+0xa38>
 800f88c:	f108 0801 	add.w	r8, r8, #1
 800f890:	9b05      	ldr	r3, [sp, #20]
 800f892:	e7c2      	b.n	800f81a <_dtoa_r+0x9f2>
 800f894:	9a02      	ldr	r2, [sp, #8]
 800f896:	f805 8c01 	strb.w	r8, [r5, #-1]
 800f89a:	eba5 030b 	sub.w	r3, r5, fp
 800f89e:	4293      	cmp	r3, r2
 800f8a0:	d021      	beq.n	800f8e6 <_dtoa_r+0xabe>
 800f8a2:	2300      	movs	r3, #0
 800f8a4:	220a      	movs	r2, #10
 800f8a6:	9904      	ldr	r1, [sp, #16]
 800f8a8:	4620      	mov	r0, r4
 800f8aa:	f000 fabf 	bl	800fe2c <__multadd>
 800f8ae:	45b1      	cmp	r9, r6
 800f8b0:	9004      	str	r0, [sp, #16]
 800f8b2:	f04f 0300 	mov.w	r3, #0
 800f8b6:	f04f 020a 	mov.w	r2, #10
 800f8ba:	4649      	mov	r1, r9
 800f8bc:	4620      	mov	r0, r4
 800f8be:	d105      	bne.n	800f8cc <_dtoa_r+0xaa4>
 800f8c0:	f000 fab4 	bl	800fe2c <__multadd>
 800f8c4:	4681      	mov	r9, r0
 800f8c6:	4606      	mov	r6, r0
 800f8c8:	9505      	str	r5, [sp, #20]
 800f8ca:	e776      	b.n	800f7ba <_dtoa_r+0x992>
 800f8cc:	f000 faae 	bl	800fe2c <__multadd>
 800f8d0:	4631      	mov	r1, r6
 800f8d2:	4681      	mov	r9, r0
 800f8d4:	2300      	movs	r3, #0
 800f8d6:	220a      	movs	r2, #10
 800f8d8:	4620      	mov	r0, r4
 800f8da:	f000 faa7 	bl	800fe2c <__multadd>
 800f8de:	4606      	mov	r6, r0
 800f8e0:	e7f2      	b.n	800f8c8 <_dtoa_r+0xaa0>
 800f8e2:	f04f 0900 	mov.w	r9, #0
 800f8e6:	2201      	movs	r2, #1
 800f8e8:	9904      	ldr	r1, [sp, #16]
 800f8ea:	4620      	mov	r0, r4
 800f8ec:	f000 fc14 	bl	8010118 <__lshift>
 800f8f0:	4639      	mov	r1, r7
 800f8f2:	9004      	str	r0, [sp, #16]
 800f8f4:	f000 fc64 	bl	80101c0 <__mcmp>
 800f8f8:	2800      	cmp	r0, #0
 800f8fa:	dcb6      	bgt.n	800f86a <_dtoa_r+0xa42>
 800f8fc:	d102      	bne.n	800f904 <_dtoa_r+0xadc>
 800f8fe:	f018 0f01 	tst.w	r8, #1
 800f902:	d1b2      	bne.n	800f86a <_dtoa_r+0xa42>
 800f904:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f908:	2b30      	cmp	r3, #48	; 0x30
 800f90a:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800f90e:	f47f af0a 	bne.w	800f726 <_dtoa_r+0x8fe>
 800f912:	4615      	mov	r5, r2
 800f914:	e7f6      	b.n	800f904 <_dtoa_r+0xadc>
 800f916:	4593      	cmp	fp, r2
 800f918:	d105      	bne.n	800f926 <_dtoa_r+0xafe>
 800f91a:	2331      	movs	r3, #49	; 0x31
 800f91c:	f10a 0a01 	add.w	sl, sl, #1
 800f920:	f88b 3000 	strb.w	r3, [fp]
 800f924:	e6ff      	b.n	800f726 <_dtoa_r+0x8fe>
 800f926:	4615      	mov	r5, r2
 800f928:	e79f      	b.n	800f86a <_dtoa_r+0xa42>
 800f92a:	f8df b064 	ldr.w	fp, [pc, #100]	; 800f990 <_dtoa_r+0xb68>
 800f92e:	e007      	b.n	800f940 <_dtoa_r+0xb18>
 800f930:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f932:	f8df b060 	ldr.w	fp, [pc, #96]	; 800f994 <_dtoa_r+0xb6c>
 800f936:	b11b      	cbz	r3, 800f940 <_dtoa_r+0xb18>
 800f938:	f10b 0308 	add.w	r3, fp, #8
 800f93c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f93e:	6013      	str	r3, [r2, #0]
 800f940:	4658      	mov	r0, fp
 800f942:	b017      	add	sp, #92	; 0x5c
 800f944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f948:	9b06      	ldr	r3, [sp, #24]
 800f94a:	2b01      	cmp	r3, #1
 800f94c:	f77f ae35 	ble.w	800f5ba <_dtoa_r+0x792>
 800f950:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f952:	9307      	str	r3, [sp, #28]
 800f954:	e649      	b.n	800f5ea <_dtoa_r+0x7c2>
 800f956:	9b02      	ldr	r3, [sp, #8]
 800f958:	2b00      	cmp	r3, #0
 800f95a:	dc03      	bgt.n	800f964 <_dtoa_r+0xb3c>
 800f95c:	9b06      	ldr	r3, [sp, #24]
 800f95e:	2b02      	cmp	r3, #2
 800f960:	f73f aecc 	bgt.w	800f6fc <_dtoa_r+0x8d4>
 800f964:	465d      	mov	r5, fp
 800f966:	4639      	mov	r1, r7
 800f968:	9804      	ldr	r0, [sp, #16]
 800f96a:	f7ff f9cf 	bl	800ed0c <quorem>
 800f96e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800f972:	f805 8b01 	strb.w	r8, [r5], #1
 800f976:	9a02      	ldr	r2, [sp, #8]
 800f978:	eba5 030b 	sub.w	r3, r5, fp
 800f97c:	429a      	cmp	r2, r3
 800f97e:	ddb0      	ble.n	800f8e2 <_dtoa_r+0xaba>
 800f980:	2300      	movs	r3, #0
 800f982:	220a      	movs	r2, #10
 800f984:	9904      	ldr	r1, [sp, #16]
 800f986:	4620      	mov	r0, r4
 800f988:	f000 fa50 	bl	800fe2c <__multadd>
 800f98c:	9004      	str	r0, [sp, #16]
 800f98e:	e7ea      	b.n	800f966 <_dtoa_r+0xb3e>
 800f990:	08011fac 	.word	0x08011fac
 800f994:	08011fd0 	.word	0x08011fd0

0800f998 <__sflush_r>:
 800f998:	898a      	ldrh	r2, [r1, #12]
 800f99a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f99e:	4605      	mov	r5, r0
 800f9a0:	0710      	lsls	r0, r2, #28
 800f9a2:	460c      	mov	r4, r1
 800f9a4:	d458      	bmi.n	800fa58 <__sflush_r+0xc0>
 800f9a6:	684b      	ldr	r3, [r1, #4]
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	dc05      	bgt.n	800f9b8 <__sflush_r+0x20>
 800f9ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	dc02      	bgt.n	800f9b8 <__sflush_r+0x20>
 800f9b2:	2000      	movs	r0, #0
 800f9b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f9b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f9ba:	2e00      	cmp	r6, #0
 800f9bc:	d0f9      	beq.n	800f9b2 <__sflush_r+0x1a>
 800f9be:	2300      	movs	r3, #0
 800f9c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f9c4:	682f      	ldr	r7, [r5, #0]
 800f9c6:	6a21      	ldr	r1, [r4, #32]
 800f9c8:	602b      	str	r3, [r5, #0]
 800f9ca:	d032      	beq.n	800fa32 <__sflush_r+0x9a>
 800f9cc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f9ce:	89a3      	ldrh	r3, [r4, #12]
 800f9d0:	075a      	lsls	r2, r3, #29
 800f9d2:	d505      	bpl.n	800f9e0 <__sflush_r+0x48>
 800f9d4:	6863      	ldr	r3, [r4, #4]
 800f9d6:	1ac0      	subs	r0, r0, r3
 800f9d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f9da:	b10b      	cbz	r3, 800f9e0 <__sflush_r+0x48>
 800f9dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f9de:	1ac0      	subs	r0, r0, r3
 800f9e0:	2300      	movs	r3, #0
 800f9e2:	4602      	mov	r2, r0
 800f9e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f9e6:	6a21      	ldr	r1, [r4, #32]
 800f9e8:	4628      	mov	r0, r5
 800f9ea:	47b0      	blx	r6
 800f9ec:	1c43      	adds	r3, r0, #1
 800f9ee:	89a3      	ldrh	r3, [r4, #12]
 800f9f0:	d106      	bne.n	800fa00 <__sflush_r+0x68>
 800f9f2:	6829      	ldr	r1, [r5, #0]
 800f9f4:	291d      	cmp	r1, #29
 800f9f6:	d848      	bhi.n	800fa8a <__sflush_r+0xf2>
 800f9f8:	4a29      	ldr	r2, [pc, #164]	; (800faa0 <__sflush_r+0x108>)
 800f9fa:	40ca      	lsrs	r2, r1
 800f9fc:	07d6      	lsls	r6, r2, #31
 800f9fe:	d544      	bpl.n	800fa8a <__sflush_r+0xf2>
 800fa00:	2200      	movs	r2, #0
 800fa02:	6062      	str	r2, [r4, #4]
 800fa04:	04d9      	lsls	r1, r3, #19
 800fa06:	6922      	ldr	r2, [r4, #16]
 800fa08:	6022      	str	r2, [r4, #0]
 800fa0a:	d504      	bpl.n	800fa16 <__sflush_r+0x7e>
 800fa0c:	1c42      	adds	r2, r0, #1
 800fa0e:	d101      	bne.n	800fa14 <__sflush_r+0x7c>
 800fa10:	682b      	ldr	r3, [r5, #0]
 800fa12:	b903      	cbnz	r3, 800fa16 <__sflush_r+0x7e>
 800fa14:	6560      	str	r0, [r4, #84]	; 0x54
 800fa16:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fa18:	602f      	str	r7, [r5, #0]
 800fa1a:	2900      	cmp	r1, #0
 800fa1c:	d0c9      	beq.n	800f9b2 <__sflush_r+0x1a>
 800fa1e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fa22:	4299      	cmp	r1, r3
 800fa24:	d002      	beq.n	800fa2c <__sflush_r+0x94>
 800fa26:	4628      	mov	r0, r5
 800fa28:	f000 fc9e 	bl	8010368 <_free_r>
 800fa2c:	2000      	movs	r0, #0
 800fa2e:	6360      	str	r0, [r4, #52]	; 0x34
 800fa30:	e7c0      	b.n	800f9b4 <__sflush_r+0x1c>
 800fa32:	2301      	movs	r3, #1
 800fa34:	4628      	mov	r0, r5
 800fa36:	47b0      	blx	r6
 800fa38:	1c41      	adds	r1, r0, #1
 800fa3a:	d1c8      	bne.n	800f9ce <__sflush_r+0x36>
 800fa3c:	682b      	ldr	r3, [r5, #0]
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d0c5      	beq.n	800f9ce <__sflush_r+0x36>
 800fa42:	2b1d      	cmp	r3, #29
 800fa44:	d001      	beq.n	800fa4a <__sflush_r+0xb2>
 800fa46:	2b16      	cmp	r3, #22
 800fa48:	d101      	bne.n	800fa4e <__sflush_r+0xb6>
 800fa4a:	602f      	str	r7, [r5, #0]
 800fa4c:	e7b1      	b.n	800f9b2 <__sflush_r+0x1a>
 800fa4e:	89a3      	ldrh	r3, [r4, #12]
 800fa50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fa54:	81a3      	strh	r3, [r4, #12]
 800fa56:	e7ad      	b.n	800f9b4 <__sflush_r+0x1c>
 800fa58:	690f      	ldr	r7, [r1, #16]
 800fa5a:	2f00      	cmp	r7, #0
 800fa5c:	d0a9      	beq.n	800f9b2 <__sflush_r+0x1a>
 800fa5e:	0793      	lsls	r3, r2, #30
 800fa60:	680e      	ldr	r6, [r1, #0]
 800fa62:	bf08      	it	eq
 800fa64:	694b      	ldreq	r3, [r1, #20]
 800fa66:	600f      	str	r7, [r1, #0]
 800fa68:	bf18      	it	ne
 800fa6a:	2300      	movne	r3, #0
 800fa6c:	eba6 0807 	sub.w	r8, r6, r7
 800fa70:	608b      	str	r3, [r1, #8]
 800fa72:	f1b8 0f00 	cmp.w	r8, #0
 800fa76:	dd9c      	ble.n	800f9b2 <__sflush_r+0x1a>
 800fa78:	4643      	mov	r3, r8
 800fa7a:	463a      	mov	r2, r7
 800fa7c:	6a21      	ldr	r1, [r4, #32]
 800fa7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fa80:	4628      	mov	r0, r5
 800fa82:	47b0      	blx	r6
 800fa84:	2800      	cmp	r0, #0
 800fa86:	dc06      	bgt.n	800fa96 <__sflush_r+0xfe>
 800fa88:	89a3      	ldrh	r3, [r4, #12]
 800fa8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fa8e:	81a3      	strh	r3, [r4, #12]
 800fa90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fa94:	e78e      	b.n	800f9b4 <__sflush_r+0x1c>
 800fa96:	4407      	add	r7, r0
 800fa98:	eba8 0800 	sub.w	r8, r8, r0
 800fa9c:	e7e9      	b.n	800fa72 <__sflush_r+0xda>
 800fa9e:	bf00      	nop
 800faa0:	20400001 	.word	0x20400001

0800faa4 <_fflush_r>:
 800faa4:	b538      	push	{r3, r4, r5, lr}
 800faa6:	690b      	ldr	r3, [r1, #16]
 800faa8:	4605      	mov	r5, r0
 800faaa:	460c      	mov	r4, r1
 800faac:	b1db      	cbz	r3, 800fae6 <_fflush_r+0x42>
 800faae:	b118      	cbz	r0, 800fab8 <_fflush_r+0x14>
 800fab0:	6983      	ldr	r3, [r0, #24]
 800fab2:	b90b      	cbnz	r3, 800fab8 <_fflush_r+0x14>
 800fab4:	f000 f860 	bl	800fb78 <__sinit>
 800fab8:	4b0c      	ldr	r3, [pc, #48]	; (800faec <_fflush_r+0x48>)
 800faba:	429c      	cmp	r4, r3
 800fabc:	d109      	bne.n	800fad2 <_fflush_r+0x2e>
 800fabe:	686c      	ldr	r4, [r5, #4]
 800fac0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fac4:	b17b      	cbz	r3, 800fae6 <_fflush_r+0x42>
 800fac6:	4621      	mov	r1, r4
 800fac8:	4628      	mov	r0, r5
 800faca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800face:	f7ff bf63 	b.w	800f998 <__sflush_r>
 800fad2:	4b07      	ldr	r3, [pc, #28]	; (800faf0 <_fflush_r+0x4c>)
 800fad4:	429c      	cmp	r4, r3
 800fad6:	d101      	bne.n	800fadc <_fflush_r+0x38>
 800fad8:	68ac      	ldr	r4, [r5, #8]
 800fada:	e7f1      	b.n	800fac0 <_fflush_r+0x1c>
 800fadc:	4b05      	ldr	r3, [pc, #20]	; (800faf4 <_fflush_r+0x50>)
 800fade:	429c      	cmp	r4, r3
 800fae0:	bf08      	it	eq
 800fae2:	68ec      	ldreq	r4, [r5, #12]
 800fae4:	e7ec      	b.n	800fac0 <_fflush_r+0x1c>
 800fae6:	2000      	movs	r0, #0
 800fae8:	bd38      	pop	{r3, r4, r5, pc}
 800faea:	bf00      	nop
 800faec:	08012000 	.word	0x08012000
 800faf0:	08012020 	.word	0x08012020
 800faf4:	08011fe0 	.word	0x08011fe0

0800faf8 <std>:
 800faf8:	2300      	movs	r3, #0
 800fafa:	b510      	push	{r4, lr}
 800fafc:	4604      	mov	r4, r0
 800fafe:	e9c0 3300 	strd	r3, r3, [r0]
 800fb02:	6083      	str	r3, [r0, #8]
 800fb04:	8181      	strh	r1, [r0, #12]
 800fb06:	6643      	str	r3, [r0, #100]	; 0x64
 800fb08:	81c2      	strh	r2, [r0, #14]
 800fb0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fb0e:	6183      	str	r3, [r0, #24]
 800fb10:	4619      	mov	r1, r3
 800fb12:	2208      	movs	r2, #8
 800fb14:	305c      	adds	r0, #92	; 0x5c
 800fb16:	f7fe fb2d 	bl	800e174 <memset>
 800fb1a:	4b05      	ldr	r3, [pc, #20]	; (800fb30 <std+0x38>)
 800fb1c:	6263      	str	r3, [r4, #36]	; 0x24
 800fb1e:	4b05      	ldr	r3, [pc, #20]	; (800fb34 <std+0x3c>)
 800fb20:	62a3      	str	r3, [r4, #40]	; 0x28
 800fb22:	4b05      	ldr	r3, [pc, #20]	; (800fb38 <std+0x40>)
 800fb24:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fb26:	4b05      	ldr	r3, [pc, #20]	; (800fb3c <std+0x44>)
 800fb28:	6224      	str	r4, [r4, #32]
 800fb2a:	6323      	str	r3, [r4, #48]	; 0x30
 800fb2c:	bd10      	pop	{r4, pc}
 800fb2e:	bf00      	nop
 800fb30:	0801077d 	.word	0x0801077d
 800fb34:	0801079f 	.word	0x0801079f
 800fb38:	080107d7 	.word	0x080107d7
 800fb3c:	080107fb 	.word	0x080107fb

0800fb40 <_cleanup_r>:
 800fb40:	4901      	ldr	r1, [pc, #4]	; (800fb48 <_cleanup_r+0x8>)
 800fb42:	f000 b885 	b.w	800fc50 <_fwalk_reent>
 800fb46:	bf00      	nop
 800fb48:	0800faa5 	.word	0x0800faa5

0800fb4c <__sfmoreglue>:
 800fb4c:	b570      	push	{r4, r5, r6, lr}
 800fb4e:	1e4a      	subs	r2, r1, #1
 800fb50:	2568      	movs	r5, #104	; 0x68
 800fb52:	4355      	muls	r5, r2
 800fb54:	460e      	mov	r6, r1
 800fb56:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800fb5a:	f000 fc53 	bl	8010404 <_malloc_r>
 800fb5e:	4604      	mov	r4, r0
 800fb60:	b140      	cbz	r0, 800fb74 <__sfmoreglue+0x28>
 800fb62:	2100      	movs	r1, #0
 800fb64:	e9c0 1600 	strd	r1, r6, [r0]
 800fb68:	300c      	adds	r0, #12
 800fb6a:	60a0      	str	r0, [r4, #8]
 800fb6c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800fb70:	f7fe fb00 	bl	800e174 <memset>
 800fb74:	4620      	mov	r0, r4
 800fb76:	bd70      	pop	{r4, r5, r6, pc}

0800fb78 <__sinit>:
 800fb78:	6983      	ldr	r3, [r0, #24]
 800fb7a:	b510      	push	{r4, lr}
 800fb7c:	4604      	mov	r4, r0
 800fb7e:	bb33      	cbnz	r3, 800fbce <__sinit+0x56>
 800fb80:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800fb84:	6503      	str	r3, [r0, #80]	; 0x50
 800fb86:	4b12      	ldr	r3, [pc, #72]	; (800fbd0 <__sinit+0x58>)
 800fb88:	4a12      	ldr	r2, [pc, #72]	; (800fbd4 <__sinit+0x5c>)
 800fb8a:	681b      	ldr	r3, [r3, #0]
 800fb8c:	6282      	str	r2, [r0, #40]	; 0x28
 800fb8e:	4298      	cmp	r0, r3
 800fb90:	bf04      	itt	eq
 800fb92:	2301      	moveq	r3, #1
 800fb94:	6183      	streq	r3, [r0, #24]
 800fb96:	f000 f81f 	bl	800fbd8 <__sfp>
 800fb9a:	6060      	str	r0, [r4, #4]
 800fb9c:	4620      	mov	r0, r4
 800fb9e:	f000 f81b 	bl	800fbd8 <__sfp>
 800fba2:	60a0      	str	r0, [r4, #8]
 800fba4:	4620      	mov	r0, r4
 800fba6:	f000 f817 	bl	800fbd8 <__sfp>
 800fbaa:	2200      	movs	r2, #0
 800fbac:	60e0      	str	r0, [r4, #12]
 800fbae:	2104      	movs	r1, #4
 800fbb0:	6860      	ldr	r0, [r4, #4]
 800fbb2:	f7ff ffa1 	bl	800faf8 <std>
 800fbb6:	2201      	movs	r2, #1
 800fbb8:	2109      	movs	r1, #9
 800fbba:	68a0      	ldr	r0, [r4, #8]
 800fbbc:	f7ff ff9c 	bl	800faf8 <std>
 800fbc0:	2202      	movs	r2, #2
 800fbc2:	2112      	movs	r1, #18
 800fbc4:	68e0      	ldr	r0, [r4, #12]
 800fbc6:	f7ff ff97 	bl	800faf8 <std>
 800fbca:	2301      	movs	r3, #1
 800fbcc:	61a3      	str	r3, [r4, #24]
 800fbce:	bd10      	pop	{r4, pc}
 800fbd0:	08011f98 	.word	0x08011f98
 800fbd4:	0800fb41 	.word	0x0800fb41

0800fbd8 <__sfp>:
 800fbd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fbda:	4b1b      	ldr	r3, [pc, #108]	; (800fc48 <__sfp+0x70>)
 800fbdc:	681e      	ldr	r6, [r3, #0]
 800fbde:	69b3      	ldr	r3, [r6, #24]
 800fbe0:	4607      	mov	r7, r0
 800fbe2:	b913      	cbnz	r3, 800fbea <__sfp+0x12>
 800fbe4:	4630      	mov	r0, r6
 800fbe6:	f7ff ffc7 	bl	800fb78 <__sinit>
 800fbea:	3648      	adds	r6, #72	; 0x48
 800fbec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800fbf0:	3b01      	subs	r3, #1
 800fbf2:	d503      	bpl.n	800fbfc <__sfp+0x24>
 800fbf4:	6833      	ldr	r3, [r6, #0]
 800fbf6:	b133      	cbz	r3, 800fc06 <__sfp+0x2e>
 800fbf8:	6836      	ldr	r6, [r6, #0]
 800fbfa:	e7f7      	b.n	800fbec <__sfp+0x14>
 800fbfc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800fc00:	b16d      	cbz	r5, 800fc1e <__sfp+0x46>
 800fc02:	3468      	adds	r4, #104	; 0x68
 800fc04:	e7f4      	b.n	800fbf0 <__sfp+0x18>
 800fc06:	2104      	movs	r1, #4
 800fc08:	4638      	mov	r0, r7
 800fc0a:	f7ff ff9f 	bl	800fb4c <__sfmoreglue>
 800fc0e:	6030      	str	r0, [r6, #0]
 800fc10:	2800      	cmp	r0, #0
 800fc12:	d1f1      	bne.n	800fbf8 <__sfp+0x20>
 800fc14:	230c      	movs	r3, #12
 800fc16:	603b      	str	r3, [r7, #0]
 800fc18:	4604      	mov	r4, r0
 800fc1a:	4620      	mov	r0, r4
 800fc1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fc1e:	4b0b      	ldr	r3, [pc, #44]	; (800fc4c <__sfp+0x74>)
 800fc20:	6665      	str	r5, [r4, #100]	; 0x64
 800fc22:	e9c4 5500 	strd	r5, r5, [r4]
 800fc26:	60a5      	str	r5, [r4, #8]
 800fc28:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800fc2c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800fc30:	2208      	movs	r2, #8
 800fc32:	4629      	mov	r1, r5
 800fc34:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800fc38:	f7fe fa9c 	bl	800e174 <memset>
 800fc3c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800fc40:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800fc44:	e7e9      	b.n	800fc1a <__sfp+0x42>
 800fc46:	bf00      	nop
 800fc48:	08011f98 	.word	0x08011f98
 800fc4c:	ffff0001 	.word	0xffff0001

0800fc50 <_fwalk_reent>:
 800fc50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fc54:	4680      	mov	r8, r0
 800fc56:	4689      	mov	r9, r1
 800fc58:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800fc5c:	2600      	movs	r6, #0
 800fc5e:	b914      	cbnz	r4, 800fc66 <_fwalk_reent+0x16>
 800fc60:	4630      	mov	r0, r6
 800fc62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fc66:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800fc6a:	3f01      	subs	r7, #1
 800fc6c:	d501      	bpl.n	800fc72 <_fwalk_reent+0x22>
 800fc6e:	6824      	ldr	r4, [r4, #0]
 800fc70:	e7f5      	b.n	800fc5e <_fwalk_reent+0xe>
 800fc72:	89ab      	ldrh	r3, [r5, #12]
 800fc74:	2b01      	cmp	r3, #1
 800fc76:	d907      	bls.n	800fc88 <_fwalk_reent+0x38>
 800fc78:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fc7c:	3301      	adds	r3, #1
 800fc7e:	d003      	beq.n	800fc88 <_fwalk_reent+0x38>
 800fc80:	4629      	mov	r1, r5
 800fc82:	4640      	mov	r0, r8
 800fc84:	47c8      	blx	r9
 800fc86:	4306      	orrs	r6, r0
 800fc88:	3568      	adds	r5, #104	; 0x68
 800fc8a:	e7ee      	b.n	800fc6a <_fwalk_reent+0x1a>

0800fc8c <_localeconv_r>:
 800fc8c:	4b04      	ldr	r3, [pc, #16]	; (800fca0 <_localeconv_r+0x14>)
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	6a18      	ldr	r0, [r3, #32]
 800fc92:	4b04      	ldr	r3, [pc, #16]	; (800fca4 <_localeconv_r+0x18>)
 800fc94:	2800      	cmp	r0, #0
 800fc96:	bf08      	it	eq
 800fc98:	4618      	moveq	r0, r3
 800fc9a:	30f0      	adds	r0, #240	; 0xf0
 800fc9c:	4770      	bx	lr
 800fc9e:	bf00      	nop
 800fca0:	20001cf8 	.word	0x20001cf8
 800fca4:	20001d5c 	.word	0x20001d5c

0800fca8 <__swhatbuf_r>:
 800fca8:	b570      	push	{r4, r5, r6, lr}
 800fcaa:	460e      	mov	r6, r1
 800fcac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fcb0:	2900      	cmp	r1, #0
 800fcb2:	b096      	sub	sp, #88	; 0x58
 800fcb4:	4614      	mov	r4, r2
 800fcb6:	461d      	mov	r5, r3
 800fcb8:	da07      	bge.n	800fcca <__swhatbuf_r+0x22>
 800fcba:	2300      	movs	r3, #0
 800fcbc:	602b      	str	r3, [r5, #0]
 800fcbe:	89b3      	ldrh	r3, [r6, #12]
 800fcc0:	061a      	lsls	r2, r3, #24
 800fcc2:	d410      	bmi.n	800fce6 <__swhatbuf_r+0x3e>
 800fcc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fcc8:	e00e      	b.n	800fce8 <__swhatbuf_r+0x40>
 800fcca:	466a      	mov	r2, sp
 800fccc:	f000 fdbc 	bl	8010848 <_fstat_r>
 800fcd0:	2800      	cmp	r0, #0
 800fcd2:	dbf2      	blt.n	800fcba <__swhatbuf_r+0x12>
 800fcd4:	9a01      	ldr	r2, [sp, #4]
 800fcd6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800fcda:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800fcde:	425a      	negs	r2, r3
 800fce0:	415a      	adcs	r2, r3
 800fce2:	602a      	str	r2, [r5, #0]
 800fce4:	e7ee      	b.n	800fcc4 <__swhatbuf_r+0x1c>
 800fce6:	2340      	movs	r3, #64	; 0x40
 800fce8:	2000      	movs	r0, #0
 800fcea:	6023      	str	r3, [r4, #0]
 800fcec:	b016      	add	sp, #88	; 0x58
 800fcee:	bd70      	pop	{r4, r5, r6, pc}

0800fcf0 <__smakebuf_r>:
 800fcf0:	898b      	ldrh	r3, [r1, #12]
 800fcf2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fcf4:	079d      	lsls	r5, r3, #30
 800fcf6:	4606      	mov	r6, r0
 800fcf8:	460c      	mov	r4, r1
 800fcfa:	d507      	bpl.n	800fd0c <__smakebuf_r+0x1c>
 800fcfc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fd00:	6023      	str	r3, [r4, #0]
 800fd02:	6123      	str	r3, [r4, #16]
 800fd04:	2301      	movs	r3, #1
 800fd06:	6163      	str	r3, [r4, #20]
 800fd08:	b002      	add	sp, #8
 800fd0a:	bd70      	pop	{r4, r5, r6, pc}
 800fd0c:	ab01      	add	r3, sp, #4
 800fd0e:	466a      	mov	r2, sp
 800fd10:	f7ff ffca 	bl	800fca8 <__swhatbuf_r>
 800fd14:	9900      	ldr	r1, [sp, #0]
 800fd16:	4605      	mov	r5, r0
 800fd18:	4630      	mov	r0, r6
 800fd1a:	f000 fb73 	bl	8010404 <_malloc_r>
 800fd1e:	b948      	cbnz	r0, 800fd34 <__smakebuf_r+0x44>
 800fd20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fd24:	059a      	lsls	r2, r3, #22
 800fd26:	d4ef      	bmi.n	800fd08 <__smakebuf_r+0x18>
 800fd28:	f023 0303 	bic.w	r3, r3, #3
 800fd2c:	f043 0302 	orr.w	r3, r3, #2
 800fd30:	81a3      	strh	r3, [r4, #12]
 800fd32:	e7e3      	b.n	800fcfc <__smakebuf_r+0xc>
 800fd34:	4b0d      	ldr	r3, [pc, #52]	; (800fd6c <__smakebuf_r+0x7c>)
 800fd36:	62b3      	str	r3, [r6, #40]	; 0x28
 800fd38:	89a3      	ldrh	r3, [r4, #12]
 800fd3a:	6020      	str	r0, [r4, #0]
 800fd3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fd40:	81a3      	strh	r3, [r4, #12]
 800fd42:	9b00      	ldr	r3, [sp, #0]
 800fd44:	6163      	str	r3, [r4, #20]
 800fd46:	9b01      	ldr	r3, [sp, #4]
 800fd48:	6120      	str	r0, [r4, #16]
 800fd4a:	b15b      	cbz	r3, 800fd64 <__smakebuf_r+0x74>
 800fd4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fd50:	4630      	mov	r0, r6
 800fd52:	f000 fd8b 	bl	801086c <_isatty_r>
 800fd56:	b128      	cbz	r0, 800fd64 <__smakebuf_r+0x74>
 800fd58:	89a3      	ldrh	r3, [r4, #12]
 800fd5a:	f023 0303 	bic.w	r3, r3, #3
 800fd5e:	f043 0301 	orr.w	r3, r3, #1
 800fd62:	81a3      	strh	r3, [r4, #12]
 800fd64:	89a3      	ldrh	r3, [r4, #12]
 800fd66:	431d      	orrs	r5, r3
 800fd68:	81a5      	strh	r5, [r4, #12]
 800fd6a:	e7cd      	b.n	800fd08 <__smakebuf_r+0x18>
 800fd6c:	0800fb41 	.word	0x0800fb41

0800fd70 <malloc>:
 800fd70:	4b02      	ldr	r3, [pc, #8]	; (800fd7c <malloc+0xc>)
 800fd72:	4601      	mov	r1, r0
 800fd74:	6818      	ldr	r0, [r3, #0]
 800fd76:	f000 bb45 	b.w	8010404 <_malloc_r>
 800fd7a:	bf00      	nop
 800fd7c:	20001cf8 	.word	0x20001cf8

0800fd80 <memcpy>:
 800fd80:	b510      	push	{r4, lr}
 800fd82:	1e43      	subs	r3, r0, #1
 800fd84:	440a      	add	r2, r1
 800fd86:	4291      	cmp	r1, r2
 800fd88:	d100      	bne.n	800fd8c <memcpy+0xc>
 800fd8a:	bd10      	pop	{r4, pc}
 800fd8c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fd90:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fd94:	e7f7      	b.n	800fd86 <memcpy+0x6>

0800fd96 <_Balloc>:
 800fd96:	b570      	push	{r4, r5, r6, lr}
 800fd98:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800fd9a:	4604      	mov	r4, r0
 800fd9c:	460e      	mov	r6, r1
 800fd9e:	b93d      	cbnz	r5, 800fdb0 <_Balloc+0x1a>
 800fda0:	2010      	movs	r0, #16
 800fda2:	f7ff ffe5 	bl	800fd70 <malloc>
 800fda6:	6260      	str	r0, [r4, #36]	; 0x24
 800fda8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800fdac:	6005      	str	r5, [r0, #0]
 800fdae:	60c5      	str	r5, [r0, #12]
 800fdb0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800fdb2:	68eb      	ldr	r3, [r5, #12]
 800fdb4:	b183      	cbz	r3, 800fdd8 <_Balloc+0x42>
 800fdb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fdb8:	68db      	ldr	r3, [r3, #12]
 800fdba:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800fdbe:	b9b8      	cbnz	r0, 800fdf0 <_Balloc+0x5a>
 800fdc0:	2101      	movs	r1, #1
 800fdc2:	fa01 f506 	lsl.w	r5, r1, r6
 800fdc6:	1d6a      	adds	r2, r5, #5
 800fdc8:	0092      	lsls	r2, r2, #2
 800fdca:	4620      	mov	r0, r4
 800fdcc:	f000 fabe 	bl	801034c <_calloc_r>
 800fdd0:	b160      	cbz	r0, 800fdec <_Balloc+0x56>
 800fdd2:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800fdd6:	e00e      	b.n	800fdf6 <_Balloc+0x60>
 800fdd8:	2221      	movs	r2, #33	; 0x21
 800fdda:	2104      	movs	r1, #4
 800fddc:	4620      	mov	r0, r4
 800fdde:	f000 fab5 	bl	801034c <_calloc_r>
 800fde2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fde4:	60e8      	str	r0, [r5, #12]
 800fde6:	68db      	ldr	r3, [r3, #12]
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d1e4      	bne.n	800fdb6 <_Balloc+0x20>
 800fdec:	2000      	movs	r0, #0
 800fdee:	bd70      	pop	{r4, r5, r6, pc}
 800fdf0:	6802      	ldr	r2, [r0, #0]
 800fdf2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800fdf6:	2300      	movs	r3, #0
 800fdf8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fdfc:	e7f7      	b.n	800fdee <_Balloc+0x58>

0800fdfe <_Bfree>:
 800fdfe:	b570      	push	{r4, r5, r6, lr}
 800fe00:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800fe02:	4606      	mov	r6, r0
 800fe04:	460d      	mov	r5, r1
 800fe06:	b93c      	cbnz	r4, 800fe18 <_Bfree+0x1a>
 800fe08:	2010      	movs	r0, #16
 800fe0a:	f7ff ffb1 	bl	800fd70 <malloc>
 800fe0e:	6270      	str	r0, [r6, #36]	; 0x24
 800fe10:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fe14:	6004      	str	r4, [r0, #0]
 800fe16:	60c4      	str	r4, [r0, #12]
 800fe18:	b13d      	cbz	r5, 800fe2a <_Bfree+0x2c>
 800fe1a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800fe1c:	686a      	ldr	r2, [r5, #4]
 800fe1e:	68db      	ldr	r3, [r3, #12]
 800fe20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fe24:	6029      	str	r1, [r5, #0]
 800fe26:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800fe2a:	bd70      	pop	{r4, r5, r6, pc}

0800fe2c <__multadd>:
 800fe2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe30:	690d      	ldr	r5, [r1, #16]
 800fe32:	461f      	mov	r7, r3
 800fe34:	4606      	mov	r6, r0
 800fe36:	460c      	mov	r4, r1
 800fe38:	f101 0c14 	add.w	ip, r1, #20
 800fe3c:	2300      	movs	r3, #0
 800fe3e:	f8dc 0000 	ldr.w	r0, [ip]
 800fe42:	b281      	uxth	r1, r0
 800fe44:	fb02 7101 	mla	r1, r2, r1, r7
 800fe48:	0c0f      	lsrs	r7, r1, #16
 800fe4a:	0c00      	lsrs	r0, r0, #16
 800fe4c:	fb02 7000 	mla	r0, r2, r0, r7
 800fe50:	b289      	uxth	r1, r1
 800fe52:	3301      	adds	r3, #1
 800fe54:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800fe58:	429d      	cmp	r5, r3
 800fe5a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800fe5e:	f84c 1b04 	str.w	r1, [ip], #4
 800fe62:	dcec      	bgt.n	800fe3e <__multadd+0x12>
 800fe64:	b1d7      	cbz	r7, 800fe9c <__multadd+0x70>
 800fe66:	68a3      	ldr	r3, [r4, #8]
 800fe68:	42ab      	cmp	r3, r5
 800fe6a:	dc12      	bgt.n	800fe92 <__multadd+0x66>
 800fe6c:	6861      	ldr	r1, [r4, #4]
 800fe6e:	4630      	mov	r0, r6
 800fe70:	3101      	adds	r1, #1
 800fe72:	f7ff ff90 	bl	800fd96 <_Balloc>
 800fe76:	6922      	ldr	r2, [r4, #16]
 800fe78:	3202      	adds	r2, #2
 800fe7a:	f104 010c 	add.w	r1, r4, #12
 800fe7e:	4680      	mov	r8, r0
 800fe80:	0092      	lsls	r2, r2, #2
 800fe82:	300c      	adds	r0, #12
 800fe84:	f7ff ff7c 	bl	800fd80 <memcpy>
 800fe88:	4621      	mov	r1, r4
 800fe8a:	4630      	mov	r0, r6
 800fe8c:	f7ff ffb7 	bl	800fdfe <_Bfree>
 800fe90:	4644      	mov	r4, r8
 800fe92:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fe96:	3501      	adds	r5, #1
 800fe98:	615f      	str	r7, [r3, #20]
 800fe9a:	6125      	str	r5, [r4, #16]
 800fe9c:	4620      	mov	r0, r4
 800fe9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800fea2 <__hi0bits>:
 800fea2:	0c02      	lsrs	r2, r0, #16
 800fea4:	0412      	lsls	r2, r2, #16
 800fea6:	4603      	mov	r3, r0
 800fea8:	b9b2      	cbnz	r2, 800fed8 <__hi0bits+0x36>
 800feaa:	0403      	lsls	r3, r0, #16
 800feac:	2010      	movs	r0, #16
 800feae:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800feb2:	bf04      	itt	eq
 800feb4:	021b      	lsleq	r3, r3, #8
 800feb6:	3008      	addeq	r0, #8
 800feb8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800febc:	bf04      	itt	eq
 800febe:	011b      	lsleq	r3, r3, #4
 800fec0:	3004      	addeq	r0, #4
 800fec2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800fec6:	bf04      	itt	eq
 800fec8:	009b      	lsleq	r3, r3, #2
 800feca:	3002      	addeq	r0, #2
 800fecc:	2b00      	cmp	r3, #0
 800fece:	db06      	blt.n	800fede <__hi0bits+0x3c>
 800fed0:	005b      	lsls	r3, r3, #1
 800fed2:	d503      	bpl.n	800fedc <__hi0bits+0x3a>
 800fed4:	3001      	adds	r0, #1
 800fed6:	4770      	bx	lr
 800fed8:	2000      	movs	r0, #0
 800feda:	e7e8      	b.n	800feae <__hi0bits+0xc>
 800fedc:	2020      	movs	r0, #32
 800fede:	4770      	bx	lr

0800fee0 <__lo0bits>:
 800fee0:	6803      	ldr	r3, [r0, #0]
 800fee2:	f013 0207 	ands.w	r2, r3, #7
 800fee6:	4601      	mov	r1, r0
 800fee8:	d00b      	beq.n	800ff02 <__lo0bits+0x22>
 800feea:	07da      	lsls	r2, r3, #31
 800feec:	d423      	bmi.n	800ff36 <__lo0bits+0x56>
 800feee:	0798      	lsls	r0, r3, #30
 800fef0:	bf49      	itett	mi
 800fef2:	085b      	lsrmi	r3, r3, #1
 800fef4:	089b      	lsrpl	r3, r3, #2
 800fef6:	2001      	movmi	r0, #1
 800fef8:	600b      	strmi	r3, [r1, #0]
 800fefa:	bf5c      	itt	pl
 800fefc:	600b      	strpl	r3, [r1, #0]
 800fefe:	2002      	movpl	r0, #2
 800ff00:	4770      	bx	lr
 800ff02:	b298      	uxth	r0, r3
 800ff04:	b9a8      	cbnz	r0, 800ff32 <__lo0bits+0x52>
 800ff06:	0c1b      	lsrs	r3, r3, #16
 800ff08:	2010      	movs	r0, #16
 800ff0a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ff0e:	bf04      	itt	eq
 800ff10:	0a1b      	lsreq	r3, r3, #8
 800ff12:	3008      	addeq	r0, #8
 800ff14:	071a      	lsls	r2, r3, #28
 800ff16:	bf04      	itt	eq
 800ff18:	091b      	lsreq	r3, r3, #4
 800ff1a:	3004      	addeq	r0, #4
 800ff1c:	079a      	lsls	r2, r3, #30
 800ff1e:	bf04      	itt	eq
 800ff20:	089b      	lsreq	r3, r3, #2
 800ff22:	3002      	addeq	r0, #2
 800ff24:	07da      	lsls	r2, r3, #31
 800ff26:	d402      	bmi.n	800ff2e <__lo0bits+0x4e>
 800ff28:	085b      	lsrs	r3, r3, #1
 800ff2a:	d006      	beq.n	800ff3a <__lo0bits+0x5a>
 800ff2c:	3001      	adds	r0, #1
 800ff2e:	600b      	str	r3, [r1, #0]
 800ff30:	4770      	bx	lr
 800ff32:	4610      	mov	r0, r2
 800ff34:	e7e9      	b.n	800ff0a <__lo0bits+0x2a>
 800ff36:	2000      	movs	r0, #0
 800ff38:	4770      	bx	lr
 800ff3a:	2020      	movs	r0, #32
 800ff3c:	4770      	bx	lr

0800ff3e <__i2b>:
 800ff3e:	b510      	push	{r4, lr}
 800ff40:	460c      	mov	r4, r1
 800ff42:	2101      	movs	r1, #1
 800ff44:	f7ff ff27 	bl	800fd96 <_Balloc>
 800ff48:	2201      	movs	r2, #1
 800ff4a:	6144      	str	r4, [r0, #20]
 800ff4c:	6102      	str	r2, [r0, #16]
 800ff4e:	bd10      	pop	{r4, pc}

0800ff50 <__multiply>:
 800ff50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff54:	4614      	mov	r4, r2
 800ff56:	690a      	ldr	r2, [r1, #16]
 800ff58:	6923      	ldr	r3, [r4, #16]
 800ff5a:	429a      	cmp	r2, r3
 800ff5c:	bfb8      	it	lt
 800ff5e:	460b      	movlt	r3, r1
 800ff60:	4688      	mov	r8, r1
 800ff62:	bfbc      	itt	lt
 800ff64:	46a0      	movlt	r8, r4
 800ff66:	461c      	movlt	r4, r3
 800ff68:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ff6c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800ff70:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ff74:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ff78:	eb07 0609 	add.w	r6, r7, r9
 800ff7c:	42b3      	cmp	r3, r6
 800ff7e:	bfb8      	it	lt
 800ff80:	3101      	addlt	r1, #1
 800ff82:	f7ff ff08 	bl	800fd96 <_Balloc>
 800ff86:	f100 0514 	add.w	r5, r0, #20
 800ff8a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800ff8e:	462b      	mov	r3, r5
 800ff90:	2200      	movs	r2, #0
 800ff92:	4573      	cmp	r3, lr
 800ff94:	d316      	bcc.n	800ffc4 <__multiply+0x74>
 800ff96:	f104 0214 	add.w	r2, r4, #20
 800ff9a:	f108 0114 	add.w	r1, r8, #20
 800ff9e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800ffa2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800ffa6:	9300      	str	r3, [sp, #0]
 800ffa8:	9b00      	ldr	r3, [sp, #0]
 800ffaa:	9201      	str	r2, [sp, #4]
 800ffac:	4293      	cmp	r3, r2
 800ffae:	d80c      	bhi.n	800ffca <__multiply+0x7a>
 800ffb0:	2e00      	cmp	r6, #0
 800ffb2:	dd03      	ble.n	800ffbc <__multiply+0x6c>
 800ffb4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d05d      	beq.n	8010078 <__multiply+0x128>
 800ffbc:	6106      	str	r6, [r0, #16]
 800ffbe:	b003      	add	sp, #12
 800ffc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffc4:	f843 2b04 	str.w	r2, [r3], #4
 800ffc8:	e7e3      	b.n	800ff92 <__multiply+0x42>
 800ffca:	f8b2 b000 	ldrh.w	fp, [r2]
 800ffce:	f1bb 0f00 	cmp.w	fp, #0
 800ffd2:	d023      	beq.n	801001c <__multiply+0xcc>
 800ffd4:	4689      	mov	r9, r1
 800ffd6:	46ac      	mov	ip, r5
 800ffd8:	f04f 0800 	mov.w	r8, #0
 800ffdc:	f859 4b04 	ldr.w	r4, [r9], #4
 800ffe0:	f8dc a000 	ldr.w	sl, [ip]
 800ffe4:	b2a3      	uxth	r3, r4
 800ffe6:	fa1f fa8a 	uxth.w	sl, sl
 800ffea:	fb0b a303 	mla	r3, fp, r3, sl
 800ffee:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800fff2:	f8dc 4000 	ldr.w	r4, [ip]
 800fff6:	4443      	add	r3, r8
 800fff8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800fffc:	fb0b 840a 	mla	r4, fp, sl, r8
 8010000:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8010004:	46e2      	mov	sl, ip
 8010006:	b29b      	uxth	r3, r3
 8010008:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801000c:	454f      	cmp	r7, r9
 801000e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8010012:	f84a 3b04 	str.w	r3, [sl], #4
 8010016:	d82b      	bhi.n	8010070 <__multiply+0x120>
 8010018:	f8cc 8004 	str.w	r8, [ip, #4]
 801001c:	9b01      	ldr	r3, [sp, #4]
 801001e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8010022:	3204      	adds	r2, #4
 8010024:	f1ba 0f00 	cmp.w	sl, #0
 8010028:	d020      	beq.n	801006c <__multiply+0x11c>
 801002a:	682b      	ldr	r3, [r5, #0]
 801002c:	4689      	mov	r9, r1
 801002e:	46a8      	mov	r8, r5
 8010030:	f04f 0b00 	mov.w	fp, #0
 8010034:	f8b9 c000 	ldrh.w	ip, [r9]
 8010038:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801003c:	fb0a 440c 	mla	r4, sl, ip, r4
 8010040:	445c      	add	r4, fp
 8010042:	46c4      	mov	ip, r8
 8010044:	b29b      	uxth	r3, r3
 8010046:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801004a:	f84c 3b04 	str.w	r3, [ip], #4
 801004e:	f859 3b04 	ldr.w	r3, [r9], #4
 8010052:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8010056:	0c1b      	lsrs	r3, r3, #16
 8010058:	fb0a b303 	mla	r3, sl, r3, fp
 801005c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8010060:	454f      	cmp	r7, r9
 8010062:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8010066:	d805      	bhi.n	8010074 <__multiply+0x124>
 8010068:	f8c8 3004 	str.w	r3, [r8, #4]
 801006c:	3504      	adds	r5, #4
 801006e:	e79b      	b.n	800ffa8 <__multiply+0x58>
 8010070:	46d4      	mov	ip, sl
 8010072:	e7b3      	b.n	800ffdc <__multiply+0x8c>
 8010074:	46e0      	mov	r8, ip
 8010076:	e7dd      	b.n	8010034 <__multiply+0xe4>
 8010078:	3e01      	subs	r6, #1
 801007a:	e799      	b.n	800ffb0 <__multiply+0x60>

0801007c <__pow5mult>:
 801007c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010080:	4615      	mov	r5, r2
 8010082:	f012 0203 	ands.w	r2, r2, #3
 8010086:	4606      	mov	r6, r0
 8010088:	460f      	mov	r7, r1
 801008a:	d007      	beq.n	801009c <__pow5mult+0x20>
 801008c:	3a01      	subs	r2, #1
 801008e:	4c21      	ldr	r4, [pc, #132]	; (8010114 <__pow5mult+0x98>)
 8010090:	2300      	movs	r3, #0
 8010092:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010096:	f7ff fec9 	bl	800fe2c <__multadd>
 801009a:	4607      	mov	r7, r0
 801009c:	10ad      	asrs	r5, r5, #2
 801009e:	d035      	beq.n	801010c <__pow5mult+0x90>
 80100a0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80100a2:	b93c      	cbnz	r4, 80100b4 <__pow5mult+0x38>
 80100a4:	2010      	movs	r0, #16
 80100a6:	f7ff fe63 	bl	800fd70 <malloc>
 80100aa:	6270      	str	r0, [r6, #36]	; 0x24
 80100ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80100b0:	6004      	str	r4, [r0, #0]
 80100b2:	60c4      	str	r4, [r0, #12]
 80100b4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80100b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80100bc:	b94c      	cbnz	r4, 80100d2 <__pow5mult+0x56>
 80100be:	f240 2171 	movw	r1, #625	; 0x271
 80100c2:	4630      	mov	r0, r6
 80100c4:	f7ff ff3b 	bl	800ff3e <__i2b>
 80100c8:	2300      	movs	r3, #0
 80100ca:	f8c8 0008 	str.w	r0, [r8, #8]
 80100ce:	4604      	mov	r4, r0
 80100d0:	6003      	str	r3, [r0, #0]
 80100d2:	f04f 0800 	mov.w	r8, #0
 80100d6:	07eb      	lsls	r3, r5, #31
 80100d8:	d50a      	bpl.n	80100f0 <__pow5mult+0x74>
 80100da:	4639      	mov	r1, r7
 80100dc:	4622      	mov	r2, r4
 80100de:	4630      	mov	r0, r6
 80100e0:	f7ff ff36 	bl	800ff50 <__multiply>
 80100e4:	4639      	mov	r1, r7
 80100e6:	4681      	mov	r9, r0
 80100e8:	4630      	mov	r0, r6
 80100ea:	f7ff fe88 	bl	800fdfe <_Bfree>
 80100ee:	464f      	mov	r7, r9
 80100f0:	106d      	asrs	r5, r5, #1
 80100f2:	d00b      	beq.n	801010c <__pow5mult+0x90>
 80100f4:	6820      	ldr	r0, [r4, #0]
 80100f6:	b938      	cbnz	r0, 8010108 <__pow5mult+0x8c>
 80100f8:	4622      	mov	r2, r4
 80100fa:	4621      	mov	r1, r4
 80100fc:	4630      	mov	r0, r6
 80100fe:	f7ff ff27 	bl	800ff50 <__multiply>
 8010102:	6020      	str	r0, [r4, #0]
 8010104:	f8c0 8000 	str.w	r8, [r0]
 8010108:	4604      	mov	r4, r0
 801010a:	e7e4      	b.n	80100d6 <__pow5mult+0x5a>
 801010c:	4638      	mov	r0, r7
 801010e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010112:	bf00      	nop
 8010114:	08012130 	.word	0x08012130

08010118 <__lshift>:
 8010118:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801011c:	460c      	mov	r4, r1
 801011e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010122:	6923      	ldr	r3, [r4, #16]
 8010124:	6849      	ldr	r1, [r1, #4]
 8010126:	eb0a 0903 	add.w	r9, sl, r3
 801012a:	68a3      	ldr	r3, [r4, #8]
 801012c:	4607      	mov	r7, r0
 801012e:	4616      	mov	r6, r2
 8010130:	f109 0501 	add.w	r5, r9, #1
 8010134:	42ab      	cmp	r3, r5
 8010136:	db32      	blt.n	801019e <__lshift+0x86>
 8010138:	4638      	mov	r0, r7
 801013a:	f7ff fe2c 	bl	800fd96 <_Balloc>
 801013e:	2300      	movs	r3, #0
 8010140:	4680      	mov	r8, r0
 8010142:	f100 0114 	add.w	r1, r0, #20
 8010146:	461a      	mov	r2, r3
 8010148:	4553      	cmp	r3, sl
 801014a:	db2b      	blt.n	80101a4 <__lshift+0x8c>
 801014c:	6920      	ldr	r0, [r4, #16]
 801014e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010152:	f104 0314 	add.w	r3, r4, #20
 8010156:	f016 021f 	ands.w	r2, r6, #31
 801015a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801015e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010162:	d025      	beq.n	80101b0 <__lshift+0x98>
 8010164:	f1c2 0e20 	rsb	lr, r2, #32
 8010168:	2000      	movs	r0, #0
 801016a:	681e      	ldr	r6, [r3, #0]
 801016c:	468a      	mov	sl, r1
 801016e:	4096      	lsls	r6, r2
 8010170:	4330      	orrs	r0, r6
 8010172:	f84a 0b04 	str.w	r0, [sl], #4
 8010176:	f853 0b04 	ldr.w	r0, [r3], #4
 801017a:	459c      	cmp	ip, r3
 801017c:	fa20 f00e 	lsr.w	r0, r0, lr
 8010180:	d814      	bhi.n	80101ac <__lshift+0x94>
 8010182:	6048      	str	r0, [r1, #4]
 8010184:	b108      	cbz	r0, 801018a <__lshift+0x72>
 8010186:	f109 0502 	add.w	r5, r9, #2
 801018a:	3d01      	subs	r5, #1
 801018c:	4638      	mov	r0, r7
 801018e:	f8c8 5010 	str.w	r5, [r8, #16]
 8010192:	4621      	mov	r1, r4
 8010194:	f7ff fe33 	bl	800fdfe <_Bfree>
 8010198:	4640      	mov	r0, r8
 801019a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801019e:	3101      	adds	r1, #1
 80101a0:	005b      	lsls	r3, r3, #1
 80101a2:	e7c7      	b.n	8010134 <__lshift+0x1c>
 80101a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80101a8:	3301      	adds	r3, #1
 80101aa:	e7cd      	b.n	8010148 <__lshift+0x30>
 80101ac:	4651      	mov	r1, sl
 80101ae:	e7dc      	b.n	801016a <__lshift+0x52>
 80101b0:	3904      	subs	r1, #4
 80101b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80101b6:	f841 2f04 	str.w	r2, [r1, #4]!
 80101ba:	459c      	cmp	ip, r3
 80101bc:	d8f9      	bhi.n	80101b2 <__lshift+0x9a>
 80101be:	e7e4      	b.n	801018a <__lshift+0x72>

080101c0 <__mcmp>:
 80101c0:	6903      	ldr	r3, [r0, #16]
 80101c2:	690a      	ldr	r2, [r1, #16]
 80101c4:	1a9b      	subs	r3, r3, r2
 80101c6:	b530      	push	{r4, r5, lr}
 80101c8:	d10c      	bne.n	80101e4 <__mcmp+0x24>
 80101ca:	0092      	lsls	r2, r2, #2
 80101cc:	3014      	adds	r0, #20
 80101ce:	3114      	adds	r1, #20
 80101d0:	1884      	adds	r4, r0, r2
 80101d2:	4411      	add	r1, r2
 80101d4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80101d8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80101dc:	4295      	cmp	r5, r2
 80101de:	d003      	beq.n	80101e8 <__mcmp+0x28>
 80101e0:	d305      	bcc.n	80101ee <__mcmp+0x2e>
 80101e2:	2301      	movs	r3, #1
 80101e4:	4618      	mov	r0, r3
 80101e6:	bd30      	pop	{r4, r5, pc}
 80101e8:	42a0      	cmp	r0, r4
 80101ea:	d3f3      	bcc.n	80101d4 <__mcmp+0x14>
 80101ec:	e7fa      	b.n	80101e4 <__mcmp+0x24>
 80101ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80101f2:	e7f7      	b.n	80101e4 <__mcmp+0x24>

080101f4 <__mdiff>:
 80101f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80101f8:	460d      	mov	r5, r1
 80101fa:	4607      	mov	r7, r0
 80101fc:	4611      	mov	r1, r2
 80101fe:	4628      	mov	r0, r5
 8010200:	4614      	mov	r4, r2
 8010202:	f7ff ffdd 	bl	80101c0 <__mcmp>
 8010206:	1e06      	subs	r6, r0, #0
 8010208:	d108      	bne.n	801021c <__mdiff+0x28>
 801020a:	4631      	mov	r1, r6
 801020c:	4638      	mov	r0, r7
 801020e:	f7ff fdc2 	bl	800fd96 <_Balloc>
 8010212:	2301      	movs	r3, #1
 8010214:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8010218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801021c:	bfa4      	itt	ge
 801021e:	4623      	movge	r3, r4
 8010220:	462c      	movge	r4, r5
 8010222:	4638      	mov	r0, r7
 8010224:	6861      	ldr	r1, [r4, #4]
 8010226:	bfa6      	itte	ge
 8010228:	461d      	movge	r5, r3
 801022a:	2600      	movge	r6, #0
 801022c:	2601      	movlt	r6, #1
 801022e:	f7ff fdb2 	bl	800fd96 <_Balloc>
 8010232:	692b      	ldr	r3, [r5, #16]
 8010234:	60c6      	str	r6, [r0, #12]
 8010236:	6926      	ldr	r6, [r4, #16]
 8010238:	f105 0914 	add.w	r9, r5, #20
 801023c:	f104 0214 	add.w	r2, r4, #20
 8010240:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8010244:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8010248:	f100 0514 	add.w	r5, r0, #20
 801024c:	f04f 0e00 	mov.w	lr, #0
 8010250:	f852 ab04 	ldr.w	sl, [r2], #4
 8010254:	f859 4b04 	ldr.w	r4, [r9], #4
 8010258:	fa1e f18a 	uxtah	r1, lr, sl
 801025c:	b2a3      	uxth	r3, r4
 801025e:	1ac9      	subs	r1, r1, r3
 8010260:	0c23      	lsrs	r3, r4, #16
 8010262:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8010266:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801026a:	b289      	uxth	r1, r1
 801026c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8010270:	45c8      	cmp	r8, r9
 8010272:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8010276:	4694      	mov	ip, r2
 8010278:	f845 3b04 	str.w	r3, [r5], #4
 801027c:	d8e8      	bhi.n	8010250 <__mdiff+0x5c>
 801027e:	45bc      	cmp	ip, r7
 8010280:	d304      	bcc.n	801028c <__mdiff+0x98>
 8010282:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8010286:	b183      	cbz	r3, 80102aa <__mdiff+0xb6>
 8010288:	6106      	str	r6, [r0, #16]
 801028a:	e7c5      	b.n	8010218 <__mdiff+0x24>
 801028c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8010290:	fa1e f381 	uxtah	r3, lr, r1
 8010294:	141a      	asrs	r2, r3, #16
 8010296:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801029a:	b29b      	uxth	r3, r3
 801029c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80102a0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80102a4:	f845 3b04 	str.w	r3, [r5], #4
 80102a8:	e7e9      	b.n	801027e <__mdiff+0x8a>
 80102aa:	3e01      	subs	r6, #1
 80102ac:	e7e9      	b.n	8010282 <__mdiff+0x8e>

080102ae <__d2b>:
 80102ae:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80102b2:	460e      	mov	r6, r1
 80102b4:	2101      	movs	r1, #1
 80102b6:	ec59 8b10 	vmov	r8, r9, d0
 80102ba:	4615      	mov	r5, r2
 80102bc:	f7ff fd6b 	bl	800fd96 <_Balloc>
 80102c0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80102c4:	4607      	mov	r7, r0
 80102c6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80102ca:	bb34      	cbnz	r4, 801031a <__d2b+0x6c>
 80102cc:	9301      	str	r3, [sp, #4]
 80102ce:	f1b8 0300 	subs.w	r3, r8, #0
 80102d2:	d027      	beq.n	8010324 <__d2b+0x76>
 80102d4:	a802      	add	r0, sp, #8
 80102d6:	f840 3d08 	str.w	r3, [r0, #-8]!
 80102da:	f7ff fe01 	bl	800fee0 <__lo0bits>
 80102de:	9900      	ldr	r1, [sp, #0]
 80102e0:	b1f0      	cbz	r0, 8010320 <__d2b+0x72>
 80102e2:	9a01      	ldr	r2, [sp, #4]
 80102e4:	f1c0 0320 	rsb	r3, r0, #32
 80102e8:	fa02 f303 	lsl.w	r3, r2, r3
 80102ec:	430b      	orrs	r3, r1
 80102ee:	40c2      	lsrs	r2, r0
 80102f0:	617b      	str	r3, [r7, #20]
 80102f2:	9201      	str	r2, [sp, #4]
 80102f4:	9b01      	ldr	r3, [sp, #4]
 80102f6:	61bb      	str	r3, [r7, #24]
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	bf14      	ite	ne
 80102fc:	2102      	movne	r1, #2
 80102fe:	2101      	moveq	r1, #1
 8010300:	6139      	str	r1, [r7, #16]
 8010302:	b1c4      	cbz	r4, 8010336 <__d2b+0x88>
 8010304:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8010308:	4404      	add	r4, r0
 801030a:	6034      	str	r4, [r6, #0]
 801030c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010310:	6028      	str	r0, [r5, #0]
 8010312:	4638      	mov	r0, r7
 8010314:	b003      	add	sp, #12
 8010316:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801031a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801031e:	e7d5      	b.n	80102cc <__d2b+0x1e>
 8010320:	6179      	str	r1, [r7, #20]
 8010322:	e7e7      	b.n	80102f4 <__d2b+0x46>
 8010324:	a801      	add	r0, sp, #4
 8010326:	f7ff fddb 	bl	800fee0 <__lo0bits>
 801032a:	9b01      	ldr	r3, [sp, #4]
 801032c:	617b      	str	r3, [r7, #20]
 801032e:	2101      	movs	r1, #1
 8010330:	6139      	str	r1, [r7, #16]
 8010332:	3020      	adds	r0, #32
 8010334:	e7e5      	b.n	8010302 <__d2b+0x54>
 8010336:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 801033a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801033e:	6030      	str	r0, [r6, #0]
 8010340:	6918      	ldr	r0, [r3, #16]
 8010342:	f7ff fdae 	bl	800fea2 <__hi0bits>
 8010346:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 801034a:	e7e1      	b.n	8010310 <__d2b+0x62>

0801034c <_calloc_r>:
 801034c:	b538      	push	{r3, r4, r5, lr}
 801034e:	fb02 f401 	mul.w	r4, r2, r1
 8010352:	4621      	mov	r1, r4
 8010354:	f000 f856 	bl	8010404 <_malloc_r>
 8010358:	4605      	mov	r5, r0
 801035a:	b118      	cbz	r0, 8010364 <_calloc_r+0x18>
 801035c:	4622      	mov	r2, r4
 801035e:	2100      	movs	r1, #0
 8010360:	f7fd ff08 	bl	800e174 <memset>
 8010364:	4628      	mov	r0, r5
 8010366:	bd38      	pop	{r3, r4, r5, pc}

08010368 <_free_r>:
 8010368:	b538      	push	{r3, r4, r5, lr}
 801036a:	4605      	mov	r5, r0
 801036c:	2900      	cmp	r1, #0
 801036e:	d045      	beq.n	80103fc <_free_r+0x94>
 8010370:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010374:	1f0c      	subs	r4, r1, #4
 8010376:	2b00      	cmp	r3, #0
 8010378:	bfb8      	it	lt
 801037a:	18e4      	addlt	r4, r4, r3
 801037c:	f000 fac3 	bl	8010906 <__malloc_lock>
 8010380:	4a1f      	ldr	r2, [pc, #124]	; (8010400 <_free_r+0x98>)
 8010382:	6813      	ldr	r3, [r2, #0]
 8010384:	4610      	mov	r0, r2
 8010386:	b933      	cbnz	r3, 8010396 <_free_r+0x2e>
 8010388:	6063      	str	r3, [r4, #4]
 801038a:	6014      	str	r4, [r2, #0]
 801038c:	4628      	mov	r0, r5
 801038e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010392:	f000 bab9 	b.w	8010908 <__malloc_unlock>
 8010396:	42a3      	cmp	r3, r4
 8010398:	d90c      	bls.n	80103b4 <_free_r+0x4c>
 801039a:	6821      	ldr	r1, [r4, #0]
 801039c:	1862      	adds	r2, r4, r1
 801039e:	4293      	cmp	r3, r2
 80103a0:	bf04      	itt	eq
 80103a2:	681a      	ldreq	r2, [r3, #0]
 80103a4:	685b      	ldreq	r3, [r3, #4]
 80103a6:	6063      	str	r3, [r4, #4]
 80103a8:	bf04      	itt	eq
 80103aa:	1852      	addeq	r2, r2, r1
 80103ac:	6022      	streq	r2, [r4, #0]
 80103ae:	6004      	str	r4, [r0, #0]
 80103b0:	e7ec      	b.n	801038c <_free_r+0x24>
 80103b2:	4613      	mov	r3, r2
 80103b4:	685a      	ldr	r2, [r3, #4]
 80103b6:	b10a      	cbz	r2, 80103bc <_free_r+0x54>
 80103b8:	42a2      	cmp	r2, r4
 80103ba:	d9fa      	bls.n	80103b2 <_free_r+0x4a>
 80103bc:	6819      	ldr	r1, [r3, #0]
 80103be:	1858      	adds	r0, r3, r1
 80103c0:	42a0      	cmp	r0, r4
 80103c2:	d10b      	bne.n	80103dc <_free_r+0x74>
 80103c4:	6820      	ldr	r0, [r4, #0]
 80103c6:	4401      	add	r1, r0
 80103c8:	1858      	adds	r0, r3, r1
 80103ca:	4282      	cmp	r2, r0
 80103cc:	6019      	str	r1, [r3, #0]
 80103ce:	d1dd      	bne.n	801038c <_free_r+0x24>
 80103d0:	6810      	ldr	r0, [r2, #0]
 80103d2:	6852      	ldr	r2, [r2, #4]
 80103d4:	605a      	str	r2, [r3, #4]
 80103d6:	4401      	add	r1, r0
 80103d8:	6019      	str	r1, [r3, #0]
 80103da:	e7d7      	b.n	801038c <_free_r+0x24>
 80103dc:	d902      	bls.n	80103e4 <_free_r+0x7c>
 80103de:	230c      	movs	r3, #12
 80103e0:	602b      	str	r3, [r5, #0]
 80103e2:	e7d3      	b.n	801038c <_free_r+0x24>
 80103e4:	6820      	ldr	r0, [r4, #0]
 80103e6:	1821      	adds	r1, r4, r0
 80103e8:	428a      	cmp	r2, r1
 80103ea:	bf04      	itt	eq
 80103ec:	6811      	ldreq	r1, [r2, #0]
 80103ee:	6852      	ldreq	r2, [r2, #4]
 80103f0:	6062      	str	r2, [r4, #4]
 80103f2:	bf04      	itt	eq
 80103f4:	1809      	addeq	r1, r1, r0
 80103f6:	6021      	streq	r1, [r4, #0]
 80103f8:	605c      	str	r4, [r3, #4]
 80103fa:	e7c7      	b.n	801038c <_free_r+0x24>
 80103fc:	bd38      	pop	{r3, r4, r5, pc}
 80103fe:	bf00      	nop
 8010400:	20001f28 	.word	0x20001f28

08010404 <_malloc_r>:
 8010404:	b570      	push	{r4, r5, r6, lr}
 8010406:	1ccd      	adds	r5, r1, #3
 8010408:	f025 0503 	bic.w	r5, r5, #3
 801040c:	3508      	adds	r5, #8
 801040e:	2d0c      	cmp	r5, #12
 8010410:	bf38      	it	cc
 8010412:	250c      	movcc	r5, #12
 8010414:	2d00      	cmp	r5, #0
 8010416:	4606      	mov	r6, r0
 8010418:	db01      	blt.n	801041e <_malloc_r+0x1a>
 801041a:	42a9      	cmp	r1, r5
 801041c:	d903      	bls.n	8010426 <_malloc_r+0x22>
 801041e:	230c      	movs	r3, #12
 8010420:	6033      	str	r3, [r6, #0]
 8010422:	2000      	movs	r0, #0
 8010424:	bd70      	pop	{r4, r5, r6, pc}
 8010426:	f000 fa6e 	bl	8010906 <__malloc_lock>
 801042a:	4a21      	ldr	r2, [pc, #132]	; (80104b0 <_malloc_r+0xac>)
 801042c:	6814      	ldr	r4, [r2, #0]
 801042e:	4621      	mov	r1, r4
 8010430:	b991      	cbnz	r1, 8010458 <_malloc_r+0x54>
 8010432:	4c20      	ldr	r4, [pc, #128]	; (80104b4 <_malloc_r+0xb0>)
 8010434:	6823      	ldr	r3, [r4, #0]
 8010436:	b91b      	cbnz	r3, 8010440 <_malloc_r+0x3c>
 8010438:	4630      	mov	r0, r6
 801043a:	f000 f98f 	bl	801075c <_sbrk_r>
 801043e:	6020      	str	r0, [r4, #0]
 8010440:	4629      	mov	r1, r5
 8010442:	4630      	mov	r0, r6
 8010444:	f000 f98a 	bl	801075c <_sbrk_r>
 8010448:	1c43      	adds	r3, r0, #1
 801044a:	d124      	bne.n	8010496 <_malloc_r+0x92>
 801044c:	230c      	movs	r3, #12
 801044e:	6033      	str	r3, [r6, #0]
 8010450:	4630      	mov	r0, r6
 8010452:	f000 fa59 	bl	8010908 <__malloc_unlock>
 8010456:	e7e4      	b.n	8010422 <_malloc_r+0x1e>
 8010458:	680b      	ldr	r3, [r1, #0]
 801045a:	1b5b      	subs	r3, r3, r5
 801045c:	d418      	bmi.n	8010490 <_malloc_r+0x8c>
 801045e:	2b0b      	cmp	r3, #11
 8010460:	d90f      	bls.n	8010482 <_malloc_r+0x7e>
 8010462:	600b      	str	r3, [r1, #0]
 8010464:	50cd      	str	r5, [r1, r3]
 8010466:	18cc      	adds	r4, r1, r3
 8010468:	4630      	mov	r0, r6
 801046a:	f000 fa4d 	bl	8010908 <__malloc_unlock>
 801046e:	f104 000b 	add.w	r0, r4, #11
 8010472:	1d23      	adds	r3, r4, #4
 8010474:	f020 0007 	bic.w	r0, r0, #7
 8010478:	1ac3      	subs	r3, r0, r3
 801047a:	d0d3      	beq.n	8010424 <_malloc_r+0x20>
 801047c:	425a      	negs	r2, r3
 801047e:	50e2      	str	r2, [r4, r3]
 8010480:	e7d0      	b.n	8010424 <_malloc_r+0x20>
 8010482:	428c      	cmp	r4, r1
 8010484:	684b      	ldr	r3, [r1, #4]
 8010486:	bf16      	itet	ne
 8010488:	6063      	strne	r3, [r4, #4]
 801048a:	6013      	streq	r3, [r2, #0]
 801048c:	460c      	movne	r4, r1
 801048e:	e7eb      	b.n	8010468 <_malloc_r+0x64>
 8010490:	460c      	mov	r4, r1
 8010492:	6849      	ldr	r1, [r1, #4]
 8010494:	e7cc      	b.n	8010430 <_malloc_r+0x2c>
 8010496:	1cc4      	adds	r4, r0, #3
 8010498:	f024 0403 	bic.w	r4, r4, #3
 801049c:	42a0      	cmp	r0, r4
 801049e:	d005      	beq.n	80104ac <_malloc_r+0xa8>
 80104a0:	1a21      	subs	r1, r4, r0
 80104a2:	4630      	mov	r0, r6
 80104a4:	f000 f95a 	bl	801075c <_sbrk_r>
 80104a8:	3001      	adds	r0, #1
 80104aa:	d0cf      	beq.n	801044c <_malloc_r+0x48>
 80104ac:	6025      	str	r5, [r4, #0]
 80104ae:	e7db      	b.n	8010468 <_malloc_r+0x64>
 80104b0:	20001f28 	.word	0x20001f28
 80104b4:	20001f2c 	.word	0x20001f2c

080104b8 <__ssputs_r>:
 80104b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80104bc:	688e      	ldr	r6, [r1, #8]
 80104be:	429e      	cmp	r6, r3
 80104c0:	4682      	mov	sl, r0
 80104c2:	460c      	mov	r4, r1
 80104c4:	4690      	mov	r8, r2
 80104c6:	4699      	mov	r9, r3
 80104c8:	d837      	bhi.n	801053a <__ssputs_r+0x82>
 80104ca:	898a      	ldrh	r2, [r1, #12]
 80104cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80104d0:	d031      	beq.n	8010536 <__ssputs_r+0x7e>
 80104d2:	6825      	ldr	r5, [r4, #0]
 80104d4:	6909      	ldr	r1, [r1, #16]
 80104d6:	1a6f      	subs	r7, r5, r1
 80104d8:	6965      	ldr	r5, [r4, #20]
 80104da:	2302      	movs	r3, #2
 80104dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80104e0:	fb95 f5f3 	sdiv	r5, r5, r3
 80104e4:	f109 0301 	add.w	r3, r9, #1
 80104e8:	443b      	add	r3, r7
 80104ea:	429d      	cmp	r5, r3
 80104ec:	bf38      	it	cc
 80104ee:	461d      	movcc	r5, r3
 80104f0:	0553      	lsls	r3, r2, #21
 80104f2:	d530      	bpl.n	8010556 <__ssputs_r+0x9e>
 80104f4:	4629      	mov	r1, r5
 80104f6:	f7ff ff85 	bl	8010404 <_malloc_r>
 80104fa:	4606      	mov	r6, r0
 80104fc:	b950      	cbnz	r0, 8010514 <__ssputs_r+0x5c>
 80104fe:	230c      	movs	r3, #12
 8010500:	f8ca 3000 	str.w	r3, [sl]
 8010504:	89a3      	ldrh	r3, [r4, #12]
 8010506:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801050a:	81a3      	strh	r3, [r4, #12]
 801050c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010514:	463a      	mov	r2, r7
 8010516:	6921      	ldr	r1, [r4, #16]
 8010518:	f7ff fc32 	bl	800fd80 <memcpy>
 801051c:	89a3      	ldrh	r3, [r4, #12]
 801051e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010522:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010526:	81a3      	strh	r3, [r4, #12]
 8010528:	6126      	str	r6, [r4, #16]
 801052a:	6165      	str	r5, [r4, #20]
 801052c:	443e      	add	r6, r7
 801052e:	1bed      	subs	r5, r5, r7
 8010530:	6026      	str	r6, [r4, #0]
 8010532:	60a5      	str	r5, [r4, #8]
 8010534:	464e      	mov	r6, r9
 8010536:	454e      	cmp	r6, r9
 8010538:	d900      	bls.n	801053c <__ssputs_r+0x84>
 801053a:	464e      	mov	r6, r9
 801053c:	4632      	mov	r2, r6
 801053e:	4641      	mov	r1, r8
 8010540:	6820      	ldr	r0, [r4, #0]
 8010542:	f000 f9c7 	bl	80108d4 <memmove>
 8010546:	68a3      	ldr	r3, [r4, #8]
 8010548:	1b9b      	subs	r3, r3, r6
 801054a:	60a3      	str	r3, [r4, #8]
 801054c:	6823      	ldr	r3, [r4, #0]
 801054e:	441e      	add	r6, r3
 8010550:	6026      	str	r6, [r4, #0]
 8010552:	2000      	movs	r0, #0
 8010554:	e7dc      	b.n	8010510 <__ssputs_r+0x58>
 8010556:	462a      	mov	r2, r5
 8010558:	f000 f9d7 	bl	801090a <_realloc_r>
 801055c:	4606      	mov	r6, r0
 801055e:	2800      	cmp	r0, #0
 8010560:	d1e2      	bne.n	8010528 <__ssputs_r+0x70>
 8010562:	6921      	ldr	r1, [r4, #16]
 8010564:	4650      	mov	r0, sl
 8010566:	f7ff feff 	bl	8010368 <_free_r>
 801056a:	e7c8      	b.n	80104fe <__ssputs_r+0x46>

0801056c <_svfiprintf_r>:
 801056c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010570:	461d      	mov	r5, r3
 8010572:	898b      	ldrh	r3, [r1, #12]
 8010574:	061f      	lsls	r7, r3, #24
 8010576:	b09d      	sub	sp, #116	; 0x74
 8010578:	4680      	mov	r8, r0
 801057a:	460c      	mov	r4, r1
 801057c:	4616      	mov	r6, r2
 801057e:	d50f      	bpl.n	80105a0 <_svfiprintf_r+0x34>
 8010580:	690b      	ldr	r3, [r1, #16]
 8010582:	b96b      	cbnz	r3, 80105a0 <_svfiprintf_r+0x34>
 8010584:	2140      	movs	r1, #64	; 0x40
 8010586:	f7ff ff3d 	bl	8010404 <_malloc_r>
 801058a:	6020      	str	r0, [r4, #0]
 801058c:	6120      	str	r0, [r4, #16]
 801058e:	b928      	cbnz	r0, 801059c <_svfiprintf_r+0x30>
 8010590:	230c      	movs	r3, #12
 8010592:	f8c8 3000 	str.w	r3, [r8]
 8010596:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801059a:	e0c8      	b.n	801072e <_svfiprintf_r+0x1c2>
 801059c:	2340      	movs	r3, #64	; 0x40
 801059e:	6163      	str	r3, [r4, #20]
 80105a0:	2300      	movs	r3, #0
 80105a2:	9309      	str	r3, [sp, #36]	; 0x24
 80105a4:	2320      	movs	r3, #32
 80105a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80105aa:	2330      	movs	r3, #48	; 0x30
 80105ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80105b0:	9503      	str	r5, [sp, #12]
 80105b2:	f04f 0b01 	mov.w	fp, #1
 80105b6:	4637      	mov	r7, r6
 80105b8:	463d      	mov	r5, r7
 80105ba:	f815 3b01 	ldrb.w	r3, [r5], #1
 80105be:	b10b      	cbz	r3, 80105c4 <_svfiprintf_r+0x58>
 80105c0:	2b25      	cmp	r3, #37	; 0x25
 80105c2:	d13e      	bne.n	8010642 <_svfiprintf_r+0xd6>
 80105c4:	ebb7 0a06 	subs.w	sl, r7, r6
 80105c8:	d00b      	beq.n	80105e2 <_svfiprintf_r+0x76>
 80105ca:	4653      	mov	r3, sl
 80105cc:	4632      	mov	r2, r6
 80105ce:	4621      	mov	r1, r4
 80105d0:	4640      	mov	r0, r8
 80105d2:	f7ff ff71 	bl	80104b8 <__ssputs_r>
 80105d6:	3001      	adds	r0, #1
 80105d8:	f000 80a4 	beq.w	8010724 <_svfiprintf_r+0x1b8>
 80105dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80105de:	4453      	add	r3, sl
 80105e0:	9309      	str	r3, [sp, #36]	; 0x24
 80105e2:	783b      	ldrb	r3, [r7, #0]
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	f000 809d 	beq.w	8010724 <_svfiprintf_r+0x1b8>
 80105ea:	2300      	movs	r3, #0
 80105ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80105f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80105f4:	9304      	str	r3, [sp, #16]
 80105f6:	9307      	str	r3, [sp, #28]
 80105f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80105fc:	931a      	str	r3, [sp, #104]	; 0x68
 80105fe:	462f      	mov	r7, r5
 8010600:	2205      	movs	r2, #5
 8010602:	f817 1b01 	ldrb.w	r1, [r7], #1
 8010606:	4850      	ldr	r0, [pc, #320]	; (8010748 <_svfiprintf_r+0x1dc>)
 8010608:	f7ef fe12 	bl	8000230 <memchr>
 801060c:	9b04      	ldr	r3, [sp, #16]
 801060e:	b9d0      	cbnz	r0, 8010646 <_svfiprintf_r+0xda>
 8010610:	06d9      	lsls	r1, r3, #27
 8010612:	bf44      	itt	mi
 8010614:	2220      	movmi	r2, #32
 8010616:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801061a:	071a      	lsls	r2, r3, #28
 801061c:	bf44      	itt	mi
 801061e:	222b      	movmi	r2, #43	; 0x2b
 8010620:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8010624:	782a      	ldrb	r2, [r5, #0]
 8010626:	2a2a      	cmp	r2, #42	; 0x2a
 8010628:	d015      	beq.n	8010656 <_svfiprintf_r+0xea>
 801062a:	9a07      	ldr	r2, [sp, #28]
 801062c:	462f      	mov	r7, r5
 801062e:	2000      	movs	r0, #0
 8010630:	250a      	movs	r5, #10
 8010632:	4639      	mov	r1, r7
 8010634:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010638:	3b30      	subs	r3, #48	; 0x30
 801063a:	2b09      	cmp	r3, #9
 801063c:	d94d      	bls.n	80106da <_svfiprintf_r+0x16e>
 801063e:	b1b8      	cbz	r0, 8010670 <_svfiprintf_r+0x104>
 8010640:	e00f      	b.n	8010662 <_svfiprintf_r+0xf6>
 8010642:	462f      	mov	r7, r5
 8010644:	e7b8      	b.n	80105b8 <_svfiprintf_r+0x4c>
 8010646:	4a40      	ldr	r2, [pc, #256]	; (8010748 <_svfiprintf_r+0x1dc>)
 8010648:	1a80      	subs	r0, r0, r2
 801064a:	fa0b f000 	lsl.w	r0, fp, r0
 801064e:	4318      	orrs	r0, r3
 8010650:	9004      	str	r0, [sp, #16]
 8010652:	463d      	mov	r5, r7
 8010654:	e7d3      	b.n	80105fe <_svfiprintf_r+0x92>
 8010656:	9a03      	ldr	r2, [sp, #12]
 8010658:	1d11      	adds	r1, r2, #4
 801065a:	6812      	ldr	r2, [r2, #0]
 801065c:	9103      	str	r1, [sp, #12]
 801065e:	2a00      	cmp	r2, #0
 8010660:	db01      	blt.n	8010666 <_svfiprintf_r+0xfa>
 8010662:	9207      	str	r2, [sp, #28]
 8010664:	e004      	b.n	8010670 <_svfiprintf_r+0x104>
 8010666:	4252      	negs	r2, r2
 8010668:	f043 0302 	orr.w	r3, r3, #2
 801066c:	9207      	str	r2, [sp, #28]
 801066e:	9304      	str	r3, [sp, #16]
 8010670:	783b      	ldrb	r3, [r7, #0]
 8010672:	2b2e      	cmp	r3, #46	; 0x2e
 8010674:	d10c      	bne.n	8010690 <_svfiprintf_r+0x124>
 8010676:	787b      	ldrb	r3, [r7, #1]
 8010678:	2b2a      	cmp	r3, #42	; 0x2a
 801067a:	d133      	bne.n	80106e4 <_svfiprintf_r+0x178>
 801067c:	9b03      	ldr	r3, [sp, #12]
 801067e:	1d1a      	adds	r2, r3, #4
 8010680:	681b      	ldr	r3, [r3, #0]
 8010682:	9203      	str	r2, [sp, #12]
 8010684:	2b00      	cmp	r3, #0
 8010686:	bfb8      	it	lt
 8010688:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801068c:	3702      	adds	r7, #2
 801068e:	9305      	str	r3, [sp, #20]
 8010690:	4d2e      	ldr	r5, [pc, #184]	; (801074c <_svfiprintf_r+0x1e0>)
 8010692:	7839      	ldrb	r1, [r7, #0]
 8010694:	2203      	movs	r2, #3
 8010696:	4628      	mov	r0, r5
 8010698:	f7ef fdca 	bl	8000230 <memchr>
 801069c:	b138      	cbz	r0, 80106ae <_svfiprintf_r+0x142>
 801069e:	2340      	movs	r3, #64	; 0x40
 80106a0:	1b40      	subs	r0, r0, r5
 80106a2:	fa03 f000 	lsl.w	r0, r3, r0
 80106a6:	9b04      	ldr	r3, [sp, #16]
 80106a8:	4303      	orrs	r3, r0
 80106aa:	3701      	adds	r7, #1
 80106ac:	9304      	str	r3, [sp, #16]
 80106ae:	7839      	ldrb	r1, [r7, #0]
 80106b0:	4827      	ldr	r0, [pc, #156]	; (8010750 <_svfiprintf_r+0x1e4>)
 80106b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80106b6:	2206      	movs	r2, #6
 80106b8:	1c7e      	adds	r6, r7, #1
 80106ba:	f7ef fdb9 	bl	8000230 <memchr>
 80106be:	2800      	cmp	r0, #0
 80106c0:	d038      	beq.n	8010734 <_svfiprintf_r+0x1c8>
 80106c2:	4b24      	ldr	r3, [pc, #144]	; (8010754 <_svfiprintf_r+0x1e8>)
 80106c4:	bb13      	cbnz	r3, 801070c <_svfiprintf_r+0x1a0>
 80106c6:	9b03      	ldr	r3, [sp, #12]
 80106c8:	3307      	adds	r3, #7
 80106ca:	f023 0307 	bic.w	r3, r3, #7
 80106ce:	3308      	adds	r3, #8
 80106d0:	9303      	str	r3, [sp, #12]
 80106d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80106d4:	444b      	add	r3, r9
 80106d6:	9309      	str	r3, [sp, #36]	; 0x24
 80106d8:	e76d      	b.n	80105b6 <_svfiprintf_r+0x4a>
 80106da:	fb05 3202 	mla	r2, r5, r2, r3
 80106de:	2001      	movs	r0, #1
 80106e0:	460f      	mov	r7, r1
 80106e2:	e7a6      	b.n	8010632 <_svfiprintf_r+0xc6>
 80106e4:	2300      	movs	r3, #0
 80106e6:	3701      	adds	r7, #1
 80106e8:	9305      	str	r3, [sp, #20]
 80106ea:	4619      	mov	r1, r3
 80106ec:	250a      	movs	r5, #10
 80106ee:	4638      	mov	r0, r7
 80106f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80106f4:	3a30      	subs	r2, #48	; 0x30
 80106f6:	2a09      	cmp	r2, #9
 80106f8:	d903      	bls.n	8010702 <_svfiprintf_r+0x196>
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d0c8      	beq.n	8010690 <_svfiprintf_r+0x124>
 80106fe:	9105      	str	r1, [sp, #20]
 8010700:	e7c6      	b.n	8010690 <_svfiprintf_r+0x124>
 8010702:	fb05 2101 	mla	r1, r5, r1, r2
 8010706:	2301      	movs	r3, #1
 8010708:	4607      	mov	r7, r0
 801070a:	e7f0      	b.n	80106ee <_svfiprintf_r+0x182>
 801070c:	ab03      	add	r3, sp, #12
 801070e:	9300      	str	r3, [sp, #0]
 8010710:	4622      	mov	r2, r4
 8010712:	4b11      	ldr	r3, [pc, #68]	; (8010758 <_svfiprintf_r+0x1ec>)
 8010714:	a904      	add	r1, sp, #16
 8010716:	4640      	mov	r0, r8
 8010718:	f7fd fdc8 	bl	800e2ac <_printf_float>
 801071c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8010720:	4681      	mov	r9, r0
 8010722:	d1d6      	bne.n	80106d2 <_svfiprintf_r+0x166>
 8010724:	89a3      	ldrh	r3, [r4, #12]
 8010726:	065b      	lsls	r3, r3, #25
 8010728:	f53f af35 	bmi.w	8010596 <_svfiprintf_r+0x2a>
 801072c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801072e:	b01d      	add	sp, #116	; 0x74
 8010730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010734:	ab03      	add	r3, sp, #12
 8010736:	9300      	str	r3, [sp, #0]
 8010738:	4622      	mov	r2, r4
 801073a:	4b07      	ldr	r3, [pc, #28]	; (8010758 <_svfiprintf_r+0x1ec>)
 801073c:	a904      	add	r1, sp, #16
 801073e:	4640      	mov	r0, r8
 8010740:	f7fe f86a 	bl	800e818 <_printf_i>
 8010744:	e7ea      	b.n	801071c <_svfiprintf_r+0x1b0>
 8010746:	bf00      	nop
 8010748:	0801213c 	.word	0x0801213c
 801074c:	08012142 	.word	0x08012142
 8010750:	08012146 	.word	0x08012146
 8010754:	0800e2ad 	.word	0x0800e2ad
 8010758:	080104b9 	.word	0x080104b9

0801075c <_sbrk_r>:
 801075c:	b538      	push	{r3, r4, r5, lr}
 801075e:	4c06      	ldr	r4, [pc, #24]	; (8010778 <_sbrk_r+0x1c>)
 8010760:	2300      	movs	r3, #0
 8010762:	4605      	mov	r5, r0
 8010764:	4608      	mov	r0, r1
 8010766:	6023      	str	r3, [r4, #0]
 8010768:	f7f7 f8ba 	bl	80078e0 <_sbrk>
 801076c:	1c43      	adds	r3, r0, #1
 801076e:	d102      	bne.n	8010776 <_sbrk_r+0x1a>
 8010770:	6823      	ldr	r3, [r4, #0]
 8010772:	b103      	cbz	r3, 8010776 <_sbrk_r+0x1a>
 8010774:	602b      	str	r3, [r5, #0]
 8010776:	bd38      	pop	{r3, r4, r5, pc}
 8010778:	20002960 	.word	0x20002960

0801077c <__sread>:
 801077c:	b510      	push	{r4, lr}
 801077e:	460c      	mov	r4, r1
 8010780:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010784:	f000 f8e8 	bl	8010958 <_read_r>
 8010788:	2800      	cmp	r0, #0
 801078a:	bfab      	itete	ge
 801078c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801078e:	89a3      	ldrhlt	r3, [r4, #12]
 8010790:	181b      	addge	r3, r3, r0
 8010792:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010796:	bfac      	ite	ge
 8010798:	6563      	strge	r3, [r4, #84]	; 0x54
 801079a:	81a3      	strhlt	r3, [r4, #12]
 801079c:	bd10      	pop	{r4, pc}

0801079e <__swrite>:
 801079e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80107a2:	461f      	mov	r7, r3
 80107a4:	898b      	ldrh	r3, [r1, #12]
 80107a6:	05db      	lsls	r3, r3, #23
 80107a8:	4605      	mov	r5, r0
 80107aa:	460c      	mov	r4, r1
 80107ac:	4616      	mov	r6, r2
 80107ae:	d505      	bpl.n	80107bc <__swrite+0x1e>
 80107b0:	2302      	movs	r3, #2
 80107b2:	2200      	movs	r2, #0
 80107b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80107b8:	f000 f868 	bl	801088c <_lseek_r>
 80107bc:	89a3      	ldrh	r3, [r4, #12]
 80107be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80107c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80107c6:	81a3      	strh	r3, [r4, #12]
 80107c8:	4632      	mov	r2, r6
 80107ca:	463b      	mov	r3, r7
 80107cc:	4628      	mov	r0, r5
 80107ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80107d2:	f000 b817 	b.w	8010804 <_write_r>

080107d6 <__sseek>:
 80107d6:	b510      	push	{r4, lr}
 80107d8:	460c      	mov	r4, r1
 80107da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80107de:	f000 f855 	bl	801088c <_lseek_r>
 80107e2:	1c43      	adds	r3, r0, #1
 80107e4:	89a3      	ldrh	r3, [r4, #12]
 80107e6:	bf15      	itete	ne
 80107e8:	6560      	strne	r0, [r4, #84]	; 0x54
 80107ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80107ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80107f2:	81a3      	strheq	r3, [r4, #12]
 80107f4:	bf18      	it	ne
 80107f6:	81a3      	strhne	r3, [r4, #12]
 80107f8:	bd10      	pop	{r4, pc}

080107fa <__sclose>:
 80107fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80107fe:	f000 b813 	b.w	8010828 <_close_r>
	...

08010804 <_write_r>:
 8010804:	b538      	push	{r3, r4, r5, lr}
 8010806:	4c07      	ldr	r4, [pc, #28]	; (8010824 <_write_r+0x20>)
 8010808:	4605      	mov	r5, r0
 801080a:	4608      	mov	r0, r1
 801080c:	4611      	mov	r1, r2
 801080e:	2200      	movs	r2, #0
 8010810:	6022      	str	r2, [r4, #0]
 8010812:	461a      	mov	r2, r3
 8010814:	f7f6 fd39 	bl	800728a <_write>
 8010818:	1c43      	adds	r3, r0, #1
 801081a:	d102      	bne.n	8010822 <_write_r+0x1e>
 801081c:	6823      	ldr	r3, [r4, #0]
 801081e:	b103      	cbz	r3, 8010822 <_write_r+0x1e>
 8010820:	602b      	str	r3, [r5, #0]
 8010822:	bd38      	pop	{r3, r4, r5, pc}
 8010824:	20002960 	.word	0x20002960

08010828 <_close_r>:
 8010828:	b538      	push	{r3, r4, r5, lr}
 801082a:	4c06      	ldr	r4, [pc, #24]	; (8010844 <_close_r+0x1c>)
 801082c:	2300      	movs	r3, #0
 801082e:	4605      	mov	r5, r0
 8010830:	4608      	mov	r0, r1
 8010832:	6023      	str	r3, [r4, #0]
 8010834:	f7f7 f81f 	bl	8007876 <_close>
 8010838:	1c43      	adds	r3, r0, #1
 801083a:	d102      	bne.n	8010842 <_close_r+0x1a>
 801083c:	6823      	ldr	r3, [r4, #0]
 801083e:	b103      	cbz	r3, 8010842 <_close_r+0x1a>
 8010840:	602b      	str	r3, [r5, #0]
 8010842:	bd38      	pop	{r3, r4, r5, pc}
 8010844:	20002960 	.word	0x20002960

08010848 <_fstat_r>:
 8010848:	b538      	push	{r3, r4, r5, lr}
 801084a:	4c07      	ldr	r4, [pc, #28]	; (8010868 <_fstat_r+0x20>)
 801084c:	2300      	movs	r3, #0
 801084e:	4605      	mov	r5, r0
 8010850:	4608      	mov	r0, r1
 8010852:	4611      	mov	r1, r2
 8010854:	6023      	str	r3, [r4, #0]
 8010856:	f7f7 f81a 	bl	800788e <_fstat>
 801085a:	1c43      	adds	r3, r0, #1
 801085c:	d102      	bne.n	8010864 <_fstat_r+0x1c>
 801085e:	6823      	ldr	r3, [r4, #0]
 8010860:	b103      	cbz	r3, 8010864 <_fstat_r+0x1c>
 8010862:	602b      	str	r3, [r5, #0]
 8010864:	bd38      	pop	{r3, r4, r5, pc}
 8010866:	bf00      	nop
 8010868:	20002960 	.word	0x20002960

0801086c <_isatty_r>:
 801086c:	b538      	push	{r3, r4, r5, lr}
 801086e:	4c06      	ldr	r4, [pc, #24]	; (8010888 <_isatty_r+0x1c>)
 8010870:	2300      	movs	r3, #0
 8010872:	4605      	mov	r5, r0
 8010874:	4608      	mov	r0, r1
 8010876:	6023      	str	r3, [r4, #0]
 8010878:	f7f7 f819 	bl	80078ae <_isatty>
 801087c:	1c43      	adds	r3, r0, #1
 801087e:	d102      	bne.n	8010886 <_isatty_r+0x1a>
 8010880:	6823      	ldr	r3, [r4, #0]
 8010882:	b103      	cbz	r3, 8010886 <_isatty_r+0x1a>
 8010884:	602b      	str	r3, [r5, #0]
 8010886:	bd38      	pop	{r3, r4, r5, pc}
 8010888:	20002960 	.word	0x20002960

0801088c <_lseek_r>:
 801088c:	b538      	push	{r3, r4, r5, lr}
 801088e:	4c07      	ldr	r4, [pc, #28]	; (80108ac <_lseek_r+0x20>)
 8010890:	4605      	mov	r5, r0
 8010892:	4608      	mov	r0, r1
 8010894:	4611      	mov	r1, r2
 8010896:	2200      	movs	r2, #0
 8010898:	6022      	str	r2, [r4, #0]
 801089a:	461a      	mov	r2, r3
 801089c:	f7f7 f812 	bl	80078c4 <_lseek>
 80108a0:	1c43      	adds	r3, r0, #1
 80108a2:	d102      	bne.n	80108aa <_lseek_r+0x1e>
 80108a4:	6823      	ldr	r3, [r4, #0]
 80108a6:	b103      	cbz	r3, 80108aa <_lseek_r+0x1e>
 80108a8:	602b      	str	r3, [r5, #0]
 80108aa:	bd38      	pop	{r3, r4, r5, pc}
 80108ac:	20002960 	.word	0x20002960

080108b0 <__ascii_mbtowc>:
 80108b0:	b082      	sub	sp, #8
 80108b2:	b901      	cbnz	r1, 80108b6 <__ascii_mbtowc+0x6>
 80108b4:	a901      	add	r1, sp, #4
 80108b6:	b142      	cbz	r2, 80108ca <__ascii_mbtowc+0x1a>
 80108b8:	b14b      	cbz	r3, 80108ce <__ascii_mbtowc+0x1e>
 80108ba:	7813      	ldrb	r3, [r2, #0]
 80108bc:	600b      	str	r3, [r1, #0]
 80108be:	7812      	ldrb	r2, [r2, #0]
 80108c0:	1c10      	adds	r0, r2, #0
 80108c2:	bf18      	it	ne
 80108c4:	2001      	movne	r0, #1
 80108c6:	b002      	add	sp, #8
 80108c8:	4770      	bx	lr
 80108ca:	4610      	mov	r0, r2
 80108cc:	e7fb      	b.n	80108c6 <__ascii_mbtowc+0x16>
 80108ce:	f06f 0001 	mvn.w	r0, #1
 80108d2:	e7f8      	b.n	80108c6 <__ascii_mbtowc+0x16>

080108d4 <memmove>:
 80108d4:	4288      	cmp	r0, r1
 80108d6:	b510      	push	{r4, lr}
 80108d8:	eb01 0302 	add.w	r3, r1, r2
 80108dc:	d807      	bhi.n	80108ee <memmove+0x1a>
 80108de:	1e42      	subs	r2, r0, #1
 80108e0:	4299      	cmp	r1, r3
 80108e2:	d00a      	beq.n	80108fa <memmove+0x26>
 80108e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80108e8:	f802 4f01 	strb.w	r4, [r2, #1]!
 80108ec:	e7f8      	b.n	80108e0 <memmove+0xc>
 80108ee:	4283      	cmp	r3, r0
 80108f0:	d9f5      	bls.n	80108de <memmove+0xa>
 80108f2:	1881      	adds	r1, r0, r2
 80108f4:	1ad2      	subs	r2, r2, r3
 80108f6:	42d3      	cmn	r3, r2
 80108f8:	d100      	bne.n	80108fc <memmove+0x28>
 80108fa:	bd10      	pop	{r4, pc}
 80108fc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010900:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8010904:	e7f7      	b.n	80108f6 <memmove+0x22>

08010906 <__malloc_lock>:
 8010906:	4770      	bx	lr

08010908 <__malloc_unlock>:
 8010908:	4770      	bx	lr

0801090a <_realloc_r>:
 801090a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801090c:	4607      	mov	r7, r0
 801090e:	4614      	mov	r4, r2
 8010910:	460e      	mov	r6, r1
 8010912:	b921      	cbnz	r1, 801091e <_realloc_r+0x14>
 8010914:	4611      	mov	r1, r2
 8010916:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801091a:	f7ff bd73 	b.w	8010404 <_malloc_r>
 801091e:	b922      	cbnz	r2, 801092a <_realloc_r+0x20>
 8010920:	f7ff fd22 	bl	8010368 <_free_r>
 8010924:	4625      	mov	r5, r4
 8010926:	4628      	mov	r0, r5
 8010928:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801092a:	f000 f834 	bl	8010996 <_malloc_usable_size_r>
 801092e:	42a0      	cmp	r0, r4
 8010930:	d20f      	bcs.n	8010952 <_realloc_r+0x48>
 8010932:	4621      	mov	r1, r4
 8010934:	4638      	mov	r0, r7
 8010936:	f7ff fd65 	bl	8010404 <_malloc_r>
 801093a:	4605      	mov	r5, r0
 801093c:	2800      	cmp	r0, #0
 801093e:	d0f2      	beq.n	8010926 <_realloc_r+0x1c>
 8010940:	4631      	mov	r1, r6
 8010942:	4622      	mov	r2, r4
 8010944:	f7ff fa1c 	bl	800fd80 <memcpy>
 8010948:	4631      	mov	r1, r6
 801094a:	4638      	mov	r0, r7
 801094c:	f7ff fd0c 	bl	8010368 <_free_r>
 8010950:	e7e9      	b.n	8010926 <_realloc_r+0x1c>
 8010952:	4635      	mov	r5, r6
 8010954:	e7e7      	b.n	8010926 <_realloc_r+0x1c>
	...

08010958 <_read_r>:
 8010958:	b538      	push	{r3, r4, r5, lr}
 801095a:	4c07      	ldr	r4, [pc, #28]	; (8010978 <_read_r+0x20>)
 801095c:	4605      	mov	r5, r0
 801095e:	4608      	mov	r0, r1
 8010960:	4611      	mov	r1, r2
 8010962:	2200      	movs	r2, #0
 8010964:	6022      	str	r2, [r4, #0]
 8010966:	461a      	mov	r2, r3
 8010968:	f7f6 ff68 	bl	800783c <_read>
 801096c:	1c43      	adds	r3, r0, #1
 801096e:	d102      	bne.n	8010976 <_read_r+0x1e>
 8010970:	6823      	ldr	r3, [r4, #0]
 8010972:	b103      	cbz	r3, 8010976 <_read_r+0x1e>
 8010974:	602b      	str	r3, [r5, #0]
 8010976:	bd38      	pop	{r3, r4, r5, pc}
 8010978:	20002960 	.word	0x20002960

0801097c <__ascii_wctomb>:
 801097c:	b149      	cbz	r1, 8010992 <__ascii_wctomb+0x16>
 801097e:	2aff      	cmp	r2, #255	; 0xff
 8010980:	bf85      	ittet	hi
 8010982:	238a      	movhi	r3, #138	; 0x8a
 8010984:	6003      	strhi	r3, [r0, #0]
 8010986:	700a      	strbls	r2, [r1, #0]
 8010988:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801098c:	bf98      	it	ls
 801098e:	2001      	movls	r0, #1
 8010990:	4770      	bx	lr
 8010992:	4608      	mov	r0, r1
 8010994:	4770      	bx	lr

08010996 <_malloc_usable_size_r>:
 8010996:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801099a:	1f18      	subs	r0, r3, #4
 801099c:	2b00      	cmp	r3, #0
 801099e:	bfbc      	itt	lt
 80109a0:	580b      	ldrlt	r3, [r1, r0]
 80109a2:	18c0      	addlt	r0, r0, r3
 80109a4:	4770      	bx	lr
	...

080109a8 <_init>:
 80109a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109aa:	bf00      	nop
 80109ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80109ae:	bc08      	pop	{r3}
 80109b0:	469e      	mov	lr, r3
 80109b2:	4770      	bx	lr

080109b4 <_fini>:
 80109b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109b6:	bf00      	nop
 80109b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80109ba:	bc08      	pop	{r3}
 80109bc:	469e      	mov	lr, r3
 80109be:	4770      	bx	lr
