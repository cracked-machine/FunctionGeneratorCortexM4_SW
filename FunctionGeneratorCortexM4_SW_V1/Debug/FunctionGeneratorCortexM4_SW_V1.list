
FunctionGeneratorCortexM4_SW_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001564c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001440  08015830  08015830  00025830  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016c70  08016c70  00032088  2**0
                  CONTENTS
  4 .ARM          00000000  08016c70  08016c70  00032088  2**0
                  CONTENTS
  5 .preinit_array 00000000  08016c70  08016c70  00032088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016c70  08016c70  00026c70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016c74  08016c74  00026c74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00002088  20000000  08016c78  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bf8  20002088  08018d00  00032088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002c80  08018d00  00032c80  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00032088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004a3dc  00000000  00000000  000320b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007e3f  00000000  00000000  0007c494  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000023a0  00000000  00000000  000842d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001f30  00000000  00000000  00086678  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00035c12  00000000  00000000  000885a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00030431  00000000  00000000  000be1ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00126c23  00000000  00000000  000ee5eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0021520e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009d08  00000000  00000000  0021528c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20002088 	.word	0x20002088
 80001fc:	00000000 	.word	0x00000000
 8000200:	08015814 	.word	0x08015814

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000208c 	.word	0x2000208c
 800021c:	08015814 	.word	0x08015814

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800040e:	f1a4 0401 	sub.w	r4, r4, #1
 8000412:	d1e9      	bne.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <BiasMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void BiasMenu_DrawMenu(eSystemState pMenu)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	2b0f      	cmp	r3, #15
 8000ce6:	d000      	beq.n	8000cea <BiasMenu_DrawMenu+0x12>
		case Bias_Menu_State:
			BiasMenu_DrawMainMenu();
			break;

		default:
			break;
 8000ce8:	e002      	b.n	8000cf0 <BiasMenu_DrawMenu+0x18>
			BiasMenu_DrawMainMenu();
 8000cea:	f000 f805 	bl	8000cf8 <BiasMenu_DrawMainMenu>
			break;
 8000cee:	bf00      	nop

	}
}
 8000cf0:	bf00      	nop
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <BiasMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void BiasMenu_DrawMainMenu()
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->BIAS", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8000cfe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d02:	9301      	str	r3, [sp, #4]
 8000d04:	2302      	movs	r3, #2
 8000d06:	9300      	str	r3, [sp, #0]
 8000d08:	2300      	movs	r3, #0
 8000d0a:	220a      	movs	r2, #10
 8000d0c:	210a      	movs	r1, #10
 8000d0e:	4814      	ldr	r0, [pc, #80]	; (8000d60 <BiasMenu_DrawMainMenu+0x68>)
 8000d10:	f00f fe1e 	bl	8010950 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8000d14:	f000 f8a0 	bl	8000e58 <DM_DisplayFormattedOutput>

	ILI9341_Draw_Text("POS", 15,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8000d18:	f240 23fd 	movw	r3, #765	; 0x2fd
 8000d1c:	9301      	str	r3, [sp, #4]
 8000d1e:	2302      	movs	r3, #2
 8000d20:	9300      	str	r3, [sp, #0]
 8000d22:	2300      	movs	r3, #0
 8000d24:	22d2      	movs	r2, #210	; 0xd2
 8000d26:	210f      	movs	r1, #15
 8000d28:	480e      	ldr	r0, [pc, #56]	; (8000d64 <BiasMenu_DrawMainMenu+0x6c>)
 8000d2a:	f00f fe11 	bl	8010950 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("NEG", 97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8000d2e:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8000d32:	9301      	str	r3, [sp, #4]
 8000d34:	2302      	movs	r3, #2
 8000d36:	9300      	str	r3, [sp, #0]
 8000d38:	2300      	movs	r3, #0
 8000d3a:	22d2      	movs	r2, #210	; 0xd2
 8000d3c:	2161      	movs	r1, #97	; 0x61
 8000d3e:	480a      	ldr	r0, [pc, #40]	; (8000d68 <BiasMenu_DrawMainMenu+0x70>)
 8000d40:	f00f fe06 	bl	8010950 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("GND",  190, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8000d44:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000d48:	9301      	str	r3, [sp, #4]
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	9300      	str	r3, [sp, #0]
 8000d4e:	2300      	movs	r3, #0
 8000d50:	22d2      	movs	r2, #210	; 0xd2
 8000d52:	21be      	movs	r1, #190	; 0xbe
 8000d54:	4805      	ldr	r0, [pc, #20]	; (8000d6c <BiasMenu_DrawMainMenu+0x74>)
 8000d56:	f00f fdfb 	bl	8010950 <ILI9341_Draw_Text>

}
 8000d5a:	bf00      	nop
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	08015830 	.word	0x08015830
 8000d64:	0801583c 	.word	0x0801583c
 8000d68:	08015840 	.word	0x08015840
 8000d6c:	08015844 	.word	0x08015844

08000d70 <DM_Init>:
 *	@param None
 *	@retval None
 *
 */
void DM_Init()
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
	  ILI9341_Init();
 8000d74:	f00f fe2d 	bl	80109d2 <ILI9341_Init>
	  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8000d78:	2003      	movs	r0, #3
 8000d7a:	f010 fa83 	bl	8011284 <ILI9341_Set_Rotation>
	  ILI9341_Fill_Screen(WHITE);
 8000d7e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000d82:	f010 f865 	bl	8010e50 <ILI9341_Fill_Screen>

}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
	...

08000d8c <DM_PostInit>:
 *	@param None
 *	@retval None
 *
 */
void DM_PostInit()
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("Initialising", 10, 10, NORMAL_TEXT_FGCOLOUR, 1, NORMAL_TEXT_BGCOLOUR);
 8000d92:	2300      	movs	r3, #0
 8000d94:	9301      	str	r3, [sp, #4]
 8000d96:	2301      	movs	r3, #1
 8000d98:	9300      	str	r3, [sp, #0]
 8000d9a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8000d9e:	220a      	movs	r2, #10
 8000da0:	210a      	movs	r1, #10
 8000da2:	4806      	ldr	r0, [pc, #24]	; (8000dbc <DM_PostInit+0x30>)
 8000da4:	f00f fdd4 	bl	8010950 <ILI9341_Draw_Text>
	HAL_Delay(500);
 8000da8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000dac:	f008 f922 	bl	8008ff4 <HAL_Delay>

	DM_RefreshScreen();
 8000db0:	f000 fd06 	bl	80017c0 <DM_RefreshScreen>
	#ifdef EVENT_MENU_DEBUG
		  printf("Init Completed\n");
	#endif


}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	08015848 	.word	0x08015848

08000dc0 <DM_UpdateDisplay>:
 *	@param None
 *	@retval None
 *
 */
void DM_UpdateDisplay()
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0

	eSystemState tempState = EM_GetSystemState();
 8000dc6:	f003 fe77 	bl	8004ab8 <EM_GetSystemState>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	71fb      	strb	r3, [r7, #7]
	switch(tempState)
 8000dce:	79fb      	ldrb	r3, [r7, #7]
 8000dd0:	2b0f      	cmp	r3, #15
 8000dd2:	d83c      	bhi.n	8000e4e <DM_UpdateDisplay+0x8e>
 8000dd4:	a201      	add	r2, pc, #4	; (adr r2, 8000ddc <DM_UpdateDisplay+0x1c>)
 8000dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dda:	bf00      	nop
 8000ddc:	08000e1d 	.word	0x08000e1d
 8000de0:	08000e1d 	.word	0x08000e1d
 8000de4:	08000e1d 	.word	0x08000e1d
 8000de8:	08000e27 	.word	0x08000e27
 8000dec:	08000e27 	.word	0x08000e27
 8000df0:	08000e27 	.word	0x08000e27
 8000df4:	08000e31 	.word	0x08000e31
 8000df8:	08000e31 	.word	0x08000e31
 8000dfc:	08000e31 	.word	0x08000e31
 8000e00:	08000e4f 	.word	0x08000e4f
 8000e04:	08000e3b 	.word	0x08000e3b
 8000e08:	08000e3b 	.word	0x08000e3b
 8000e0c:	08000e3b 	.word	0x08000e3b
 8000e10:	08000e3b 	.word	0x08000e3b
 8000e14:	08000e3b 	.word	0x08000e3b
 8000e18:	08000e45 	.word	0x08000e45
	{
		case Toplevel_Main_Menu_State:
		case Toplevel_Output_Menu_State:
		case Toplevel_Input_Menu_State:
			ToplevelMenu_DrawMenu(tempState);
 8000e1c:	79fb      	ldrb	r3, [r7, #7]
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f003 f862 	bl	8003ee8 <ToplevelMenu_DrawMenu>
			break;
 8000e24:	e014      	b.n	8000e50 <DM_UpdateDisplay+0x90>

		case Func_Main_Menu_State:
		case Func_Signal_Menu_State:
		case Func_Aux_Menu_State:
			FuncMenu_DrawMenu(tempState);
 8000e26:	79fb      	ldrb	r3, [r7, #7]
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f002 faaf 	bl	800338c <FuncMenu_DrawMenu>
			break;
 8000e2e:	e00f      	b.n	8000e50 <DM_UpdateDisplay+0x90>

		case Gain_Main_Menu_State:
		case Gain_Signal_Menu_State:
		case Gain_Aux_Menu_State:
			GainMenu_DrawMenu(tempState);
 8000e30:	79fb      	ldrb	r3, [r7, #7]
 8000e32:	4618      	mov	r0, r3
 8000e34:	f002 ff7e 	bl	8003d34 <GainMenu_DrawMenu>
			break;
 8000e38:	e00a      	b.n	8000e50 <DM_UpdateDisplay+0x90>
		case Freq_Main_Menu_State:
		case Freq_Preset_Menu_State:
		case Freq_Adjust_Menu_State:
		case Freq_Sweep_Menu_State:
		case Freq_Prescaler_Menu_State:
			FreqMenu_DrawMenu(tempState);
 8000e3a:	79fb      	ldrb	r3, [r7, #7]
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f000 fd23 	bl	8001888 <FreqMenu_DrawMenu>
			break;
 8000e42:	e005      	b.n	8000e50 <DM_UpdateDisplay+0x90>

		case Bias_Menu_State:
			BiasMenu_DrawMenu(tempState);
 8000e44:	79fb      	ldrb	r3, [r7, #7]
 8000e46:	4618      	mov	r0, r3
 8000e48:	f7ff ff46 	bl	8000cd8 <BiasMenu_DrawMenu>
			break;
 8000e4c:	e000      	b.n	8000e50 <DM_UpdateDisplay+0x90>

		default:
			break;
 8000e4e:	bf00      	nop
		ILI9341_Draw_Text(encoder_value, 220, 20, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
	#endif //ENCODER_DEBUG



}
 8000e50:	bf00      	nop
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <DM_DisplayFormattedOutput>:
 *	@param None
 *	@retval None
 *
 */
void DM_DisplayFormattedOutput()
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0

	_DisplayOutputSignalHertz(140, 45);
 8000e5c:	212d      	movs	r1, #45	; 0x2d
 8000e5e:	208c      	movs	r0, #140	; 0x8c
 8000e60:	f000 f99e 	bl	80011a0 <_DisplayOutputSignalHertz>
	_DisplayOutputSignalVpp(175, 70);
 8000e64:	2146      	movs	r1, #70	; 0x46
 8000e66:	20af      	movs	r0, #175	; 0xaf
 8000e68:	f000 f9ea 	bl	8001240 <_DisplayOutputSignalVpp>
	_DisplayOutputSignalDecibels(138, 95);
 8000e6c:	215f      	movs	r1, #95	; 0x5f
 8000e6e:	208a      	movs	r0, #138	; 0x8a
 8000e70:	f000 fa44 	bl	80012fc <_DisplayOutputSignalDecibels>
	_DisplayOutputSignalOffset(161, 120);
 8000e74:	2178      	movs	r1, #120	; 0x78
 8000e76:	20a1      	movs	r0, #161	; 0xa1
 8000e78:	f000 fab4 	bl	80013e4 <_DisplayOutputSignalOffset>
	_DisplayOutputWaveformIcons(80, 160, 245, 160);
 8000e7c:	23a0      	movs	r3, #160	; 0xa0
 8000e7e:	22f5      	movs	r2, #245	; 0xf5
 8000e80:	21a0      	movs	r1, #160	; 0xa0
 8000e82:	2050      	movs	r0, #80	; 0x50
 8000e84:	f000 fb4e 	bl	8001524 <_DisplayOutputWaveformIcons>

	DM_DisplayInputTriggerStatus();
 8000e88:	f000 f806 	bl	8000e98 <DM_DisplayInputTriggerStatus>
	DM_DisplayInputTriggerTimerHertz(200, 17);
 8000e8c:	2111      	movs	r1, #17
 8000e8e:	20c8      	movs	r0, #200	; 0xc8
 8000e90:	f000 f888 	bl	8000fa4 <DM_DisplayInputTriggerTimerHertz>

}
 8000e94:	bf00      	nop
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <DM_DisplayInputTriggerStatus>:
 *	@param None
 *	@retval None
 *
 */
void DM_DisplayInputTriggerStatus()
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af02      	add	r7, sp, #8

	uint16_t text_x_pos = 240;
 8000e9e:	23f0      	movs	r3, #240	; 0xf0
 8000ea0:	80fb      	strh	r3, [r7, #6]
	uint16_t text_y_pos = 1;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	80bb      	strh	r3, [r7, #4]
	// eTriggerInputMode
	switch(IT_GetActiveTriggerMode())
 8000ea6:	f005 fc35 	bl	8006714 <IT_GetActiveTriggerMode>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	d027      	beq.n	8000f00 <DM_DisplayInputTriggerStatus+0x68>
 8000eb0:	2b02      	cmp	r3, #2
 8000eb2:	d048      	beq.n	8000f46 <DM_DisplayInputTriggerStatus+0xae>
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d000      	beq.n	8000eba <DM_DisplayInputTriggerStatus+0x22>
			else
				ILI9341_Draw_Text("T:ADC ", text_x_pos, text_y_pos, HIGHLIGHT_TEXT_BGCOLOUR , text_size, HIGHLIGHT_TEXT_FGCOLOUR);
			break;

	}
}
 8000eb8:	e068      	b.n	8000f8c <DM_DisplayInputTriggerStatus+0xf4>
			if(IT_GetTriggerStatus())
 8000eba:	f005 fc47 	bl	800674c <IT_GetTriggerStatus>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d00e      	beq.n	8000ee2 <DM_DisplayInputTriggerStatus+0x4a>
				ILI9341_Draw_Text("T:TIM ", text_x_pos, text_y_pos, HIGHLIGHT_TEXT_FGCOLOUR , text_size, HIGHLIGHT_TEXT_BGCOLOUR);
 8000ec4:	4b33      	ldr	r3, [pc, #204]	; (8000f94 <DM_DisplayInputTriggerStatus+0xfc>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	b29b      	uxth	r3, r3
 8000eca:	88b8      	ldrh	r0, [r7, #4]
 8000ecc:	88f9      	ldrh	r1, [r7, #6]
 8000ece:	f644 42f6 	movw	r2, #19702	; 0x4cf6
 8000ed2:	9201      	str	r2, [sp, #4]
 8000ed4:	9300      	str	r3, [sp, #0]
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	4602      	mov	r2, r0
 8000eda:	482f      	ldr	r0, [pc, #188]	; (8000f98 <DM_DisplayInputTriggerStatus+0x100>)
 8000edc:	f00f fd38 	bl	8010950 <ILI9341_Draw_Text>
			break;
 8000ee0:	e054      	b.n	8000f8c <DM_DisplayInputTriggerStatus+0xf4>
				ILI9341_Draw_Text("T:TIM ", text_x_pos, text_y_pos, HIGHLIGHT_TEXT_BGCOLOUR , text_size, HIGHLIGHT_TEXT_FGCOLOUR);
 8000ee2:	4b2c      	ldr	r3, [pc, #176]	; (8000f94 <DM_DisplayInputTriggerStatus+0xfc>)
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	b29b      	uxth	r3, r3
 8000ee8:	88b8      	ldrh	r0, [r7, #4]
 8000eea:	88f9      	ldrh	r1, [r7, #6]
 8000eec:	2200      	movs	r2, #0
 8000eee:	9201      	str	r2, [sp, #4]
 8000ef0:	9300      	str	r3, [sp, #0]
 8000ef2:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8000ef6:	4602      	mov	r2, r0
 8000ef8:	4827      	ldr	r0, [pc, #156]	; (8000f98 <DM_DisplayInputTriggerStatus+0x100>)
 8000efa:	f00f fd29 	bl	8010950 <ILI9341_Draw_Text>
			break;
 8000efe:	e045      	b.n	8000f8c <DM_DisplayInputTriggerStatus+0xf4>
			if(IT_GetTriggerStatus())
 8000f00:	f005 fc24 	bl	800674c <IT_GetTriggerStatus>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d00e      	beq.n	8000f28 <DM_DisplayInputTriggerStatus+0x90>
				ILI9341_Draw_Text("T:COMP", text_x_pos, text_y_pos, HIGHLIGHT_TEXT_FGCOLOUR , text_size, HIGHLIGHT_TEXT_BGCOLOUR);
 8000f0a:	4b22      	ldr	r3, [pc, #136]	; (8000f94 <DM_DisplayInputTriggerStatus+0xfc>)
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	b29b      	uxth	r3, r3
 8000f10:	88b8      	ldrh	r0, [r7, #4]
 8000f12:	88f9      	ldrh	r1, [r7, #6]
 8000f14:	f644 42f6 	movw	r2, #19702	; 0x4cf6
 8000f18:	9201      	str	r2, [sp, #4]
 8000f1a:	9300      	str	r3, [sp, #0]
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	4602      	mov	r2, r0
 8000f20:	481e      	ldr	r0, [pc, #120]	; (8000f9c <DM_DisplayInputTriggerStatus+0x104>)
 8000f22:	f00f fd15 	bl	8010950 <ILI9341_Draw_Text>
			break;
 8000f26:	e031      	b.n	8000f8c <DM_DisplayInputTriggerStatus+0xf4>
				ILI9341_Draw_Text("T:COMP", text_x_pos, text_y_pos, HIGHLIGHT_TEXT_BGCOLOUR , text_size, HIGHLIGHT_TEXT_FGCOLOUR);
 8000f28:	4b1a      	ldr	r3, [pc, #104]	; (8000f94 <DM_DisplayInputTriggerStatus+0xfc>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	b29b      	uxth	r3, r3
 8000f2e:	88b8      	ldrh	r0, [r7, #4]
 8000f30:	88f9      	ldrh	r1, [r7, #6]
 8000f32:	2200      	movs	r2, #0
 8000f34:	9201      	str	r2, [sp, #4]
 8000f36:	9300      	str	r3, [sp, #0]
 8000f38:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	4817      	ldr	r0, [pc, #92]	; (8000f9c <DM_DisplayInputTriggerStatus+0x104>)
 8000f40:	f00f fd06 	bl	8010950 <ILI9341_Draw_Text>
			break;
 8000f44:	e022      	b.n	8000f8c <DM_DisplayInputTriggerStatus+0xf4>
			if(IT_GetTriggerStatus())
 8000f46:	f005 fc01 	bl	800674c <IT_GetTriggerStatus>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d00e      	beq.n	8000f6e <DM_DisplayInputTriggerStatus+0xd6>
				ILI9341_Draw_Text("T:ADC ", text_x_pos, text_y_pos, HIGHLIGHT_TEXT_FGCOLOUR , text_size, HIGHLIGHT_TEXT_BGCOLOUR);
 8000f50:	4b10      	ldr	r3, [pc, #64]	; (8000f94 <DM_DisplayInputTriggerStatus+0xfc>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	b29b      	uxth	r3, r3
 8000f56:	88b8      	ldrh	r0, [r7, #4]
 8000f58:	88f9      	ldrh	r1, [r7, #6]
 8000f5a:	f644 42f6 	movw	r2, #19702	; 0x4cf6
 8000f5e:	9201      	str	r2, [sp, #4]
 8000f60:	9300      	str	r3, [sp, #0]
 8000f62:	2300      	movs	r3, #0
 8000f64:	4602      	mov	r2, r0
 8000f66:	480e      	ldr	r0, [pc, #56]	; (8000fa0 <DM_DisplayInputTriggerStatus+0x108>)
 8000f68:	f00f fcf2 	bl	8010950 <ILI9341_Draw_Text>
			break;
 8000f6c:	e00d      	b.n	8000f8a <DM_DisplayInputTriggerStatus+0xf2>
				ILI9341_Draw_Text("T:ADC ", text_x_pos, text_y_pos, HIGHLIGHT_TEXT_BGCOLOUR , text_size, HIGHLIGHT_TEXT_FGCOLOUR);
 8000f6e:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <DM_DisplayInputTriggerStatus+0xfc>)
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	b29b      	uxth	r3, r3
 8000f74:	88b8      	ldrh	r0, [r7, #4]
 8000f76:	88f9      	ldrh	r1, [r7, #6]
 8000f78:	2200      	movs	r2, #0
 8000f7a:	9201      	str	r2, [sp, #4]
 8000f7c:	9300      	str	r3, [sp, #0]
 8000f7e:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8000f82:	4602      	mov	r2, r0
 8000f84:	4806      	ldr	r0, [pc, #24]	; (8000fa0 <DM_DisplayInputTriggerStatus+0x108>)
 8000f86:	f00f fce3 	bl	8010950 <ILI9341_Draw_Text>
			break;
 8000f8a:	bf00      	nop
}
 8000f8c:	bf00      	nop
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20000000 	.word	0x20000000
 8000f98:	08015858 	.word	0x08015858
 8000f9c:	08015860 	.word	0x08015860
 8000fa0:	08015868 	.word	0x08015868

08000fa4 <DM_DisplayInputTriggerTimerHertz>:
 *	@param None
 *	@retval None
 *
 */
void DM_DisplayInputTriggerTimerHertz(uint16_t xpos, uint16_t ypos)
{
 8000fa4:	b590      	push	{r4, r7, lr}
 8000fa6:	b095      	sub	sp, #84	; 0x54
 8000fa8:	af02      	add	r7, sp, #8
 8000faa:	4603      	mov	r3, r0
 8000fac:	460a      	mov	r2, r1
 8000fae:	80fb      	strh	r3, [r7, #6]
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	80bb      	strh	r3, [r7, #4]
	if(IT_GetTriggerStatus())
 8000fb4:	f005 fbca 	bl	800674c <IT_GetTriggerStatus>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	f000 80d0 	beq.w	8001160 <DM_DisplayInputTriggerTimerHertz+0x1bc>
	{
		if(IT_GetAverageFreqCountHertz() < 1000)
 8000fc0:	f005 fb9a 	bl	80066f8 <IT_GetAverageFreqCountHertz>
 8000fc4:	eeb0 7a40 	vmov.f32	s14, s0
 8000fc8:	eddf 7a6e 	vldr	s15, [pc, #440]	; 8001184 <DM_DisplayInputTriggerTimerHertz+0x1e0>
 8000fcc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fd4:	d527      	bpl.n	8001026 <DM_DisplayInputTriggerTimerHertz+0x82>
		{
			char avg_freq_count_hertz[13] = {};
 8000fd6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	605a      	str	r2, [r3, #4]
 8000fe0:	609a      	str	r2, [r3, #8]
 8000fe2:	731a      	strb	r2, [r3, #12]
			snprintf(avg_freq_count_hertz, sizeof(avg_freq_count_hertz), "%7.1f Hz", IT_GetAverageFreqCountHertz());
 8000fe4:	f005 fb88 	bl	80066f8 <IT_GetAverageFreqCountHertz>
 8000fe8:	ee10 3a10 	vmov	r3, s0
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff fad3 	bl	8000598 <__aeabi_f2d>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	460c      	mov	r4, r1
 8000ff6:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8000ffa:	e9cd 3400 	strd	r3, r4, [sp]
 8000ffe:	4a62      	ldr	r2, [pc, #392]	; (8001188 <DM_DisplayInputTriggerTimerHertz+0x1e4>)
 8001000:	210d      	movs	r1, #13
 8001002:	f011 f861 	bl	80120c8 <sniprintf>
			ILI9341_Draw_Text(avg_freq_count_hertz, xpos, ypos, NORMAL_TEXT_FGCOLOUR , text_size, NORMAL_TEXT_BGCOLOUR);
 8001006:	4b61      	ldr	r3, [pc, #388]	; (800118c <DM_DisplayInputTriggerTimerHertz+0x1e8>)
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	b29b      	uxth	r3, r3
 800100c:	88bc      	ldrh	r4, [r7, #4]
 800100e:	88f9      	ldrh	r1, [r7, #6]
 8001010:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8001014:	2200      	movs	r2, #0
 8001016:	9201      	str	r2, [sp, #4]
 8001018:	9300      	str	r3, [sp, #0]
 800101a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800101e:	4622      	mov	r2, r4
 8001020:	f00f fc96 	bl	8010950 <ILI9341_Draw_Text>
	}
	else
	{
		ILI9341_Draw_Text("                   ", xpos, ypos, NORMAL_TEXT_FGCOLOUR , text_size, NORMAL_TEXT_BGCOLOUR);
	}
}
 8001024:	e0aa      	b.n	800117c <DM_DisplayInputTriggerTimerHertz+0x1d8>
		else if(IT_GetAverageFreqCountHertz() < 10000)
 8001026:	f005 fb67 	bl	80066f8 <IT_GetAverageFreqCountHertz>
 800102a:	eeb0 7a40 	vmov.f32	s14, s0
 800102e:	eddf 7a58 	vldr	s15, [pc, #352]	; 8001190 <DM_DisplayInputTriggerTimerHertz+0x1ec>
 8001032:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800103a:	d52c      	bpl.n	8001096 <DM_DisplayInputTriggerTimerHertz+0xf2>
			char avg_freq_count_hertz[13] = {};
 800103c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	731a      	strb	r2, [r3, #12]
			snprintf(avg_freq_count_hertz, sizeof(avg_freq_count_hertz), "%6.1f KHz", IT_GetAverageFreqCountHertz() / 1000);
 800104a:	f005 fb55 	bl	80066f8 <IT_GetAverageFreqCountHertz>
 800104e:	eeb0 7a40 	vmov.f32	s14, s0
 8001052:	eddf 7a4c 	vldr	s15, [pc, #304]	; 8001184 <DM_DisplayInputTriggerTimerHertz+0x1e0>
 8001056:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800105a:	ee16 0a90 	vmov	r0, s13
 800105e:	f7ff fa9b 	bl	8000598 <__aeabi_f2d>
 8001062:	4603      	mov	r3, r0
 8001064:	460c      	mov	r4, r1
 8001066:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800106a:	e9cd 3400 	strd	r3, r4, [sp]
 800106e:	4a49      	ldr	r2, [pc, #292]	; (8001194 <DM_DisplayInputTriggerTimerHertz+0x1f0>)
 8001070:	210d      	movs	r1, #13
 8001072:	f011 f829 	bl	80120c8 <sniprintf>
			ILI9341_Draw_Text(avg_freq_count_hertz, xpos, ypos, NORMAL_TEXT_FGCOLOUR , text_size, NORMAL_TEXT_BGCOLOUR);
 8001076:	4b45      	ldr	r3, [pc, #276]	; (800118c <DM_DisplayInputTriggerTimerHertz+0x1e8>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	b29b      	uxth	r3, r3
 800107c:	88bc      	ldrh	r4, [r7, #4]
 800107e:	88f9      	ldrh	r1, [r7, #6]
 8001080:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001084:	2200      	movs	r2, #0
 8001086:	9201      	str	r2, [sp, #4]
 8001088:	9300      	str	r3, [sp, #0]
 800108a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800108e:	4622      	mov	r2, r4
 8001090:	f00f fc5e 	bl	8010950 <ILI9341_Draw_Text>
}
 8001094:	e072      	b.n	800117c <DM_DisplayInputTriggerTimerHertz+0x1d8>
		else if(IT_GetAverageFreqCountHertz() < 100000)
 8001096:	f005 fb2f 	bl	80066f8 <IT_GetAverageFreqCountHertz>
 800109a:	eeb0 7a40 	vmov.f32	s14, s0
 800109e:	eddf 7a3e 	vldr	s15, [pc, #248]	; 8001198 <DM_DisplayInputTriggerTimerHertz+0x1f4>
 80010a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010aa:	d52c      	bpl.n	8001106 <DM_DisplayInputTriggerTimerHertz+0x162>
			char avg_freq_count_hertz[13] = {};
 80010ac:	f107 0318 	add.w	r3, r7, #24
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	731a      	strb	r2, [r3, #12]
			snprintf(avg_freq_count_hertz, sizeof(avg_freq_count_hertz), "%6.1f KHz", IT_GetAverageFreqCountHertz()  / 1000);
 80010ba:	f005 fb1d 	bl	80066f8 <IT_GetAverageFreqCountHertz>
 80010be:	eeb0 7a40 	vmov.f32	s14, s0
 80010c2:	eddf 7a30 	vldr	s15, [pc, #192]	; 8001184 <DM_DisplayInputTriggerTimerHertz+0x1e0>
 80010c6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80010ca:	ee16 0a90 	vmov	r0, s13
 80010ce:	f7ff fa63 	bl	8000598 <__aeabi_f2d>
 80010d2:	4603      	mov	r3, r0
 80010d4:	460c      	mov	r4, r1
 80010d6:	f107 0018 	add.w	r0, r7, #24
 80010da:	e9cd 3400 	strd	r3, r4, [sp]
 80010de:	4a2d      	ldr	r2, [pc, #180]	; (8001194 <DM_DisplayInputTriggerTimerHertz+0x1f0>)
 80010e0:	210d      	movs	r1, #13
 80010e2:	f010 fff1 	bl	80120c8 <sniprintf>
			ILI9341_Draw_Text(avg_freq_count_hertz, xpos, ypos, NORMAL_TEXT_FGCOLOUR , text_size, NORMAL_TEXT_BGCOLOUR);
 80010e6:	4b29      	ldr	r3, [pc, #164]	; (800118c <DM_DisplayInputTriggerTimerHertz+0x1e8>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	b29b      	uxth	r3, r3
 80010ec:	88bc      	ldrh	r4, [r7, #4]
 80010ee:	88f9      	ldrh	r1, [r7, #6]
 80010f0:	f107 0018 	add.w	r0, r7, #24
 80010f4:	2200      	movs	r2, #0
 80010f6:	9201      	str	r2, [sp, #4]
 80010f8:	9300      	str	r3, [sp, #0]
 80010fa:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80010fe:	4622      	mov	r2, r4
 8001100:	f00f fc26 	bl	8010950 <ILI9341_Draw_Text>
}
 8001104:	e03a      	b.n	800117c <DM_DisplayInputTriggerTimerHertz+0x1d8>
			char avg_freq_count_hertz[13] = {};
 8001106:	f107 0308 	add.w	r3, r7, #8
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	605a      	str	r2, [r3, #4]
 8001110:	609a      	str	r2, [r3, #8]
 8001112:	731a      	strb	r2, [r3, #12]
			snprintf(avg_freq_count_hertz, sizeof(avg_freq_count_hertz), "%6.1f KHz", IT_GetAverageFreqCountHertz()  / 1000);
 8001114:	f005 faf0 	bl	80066f8 <IT_GetAverageFreqCountHertz>
 8001118:	eeb0 7a40 	vmov.f32	s14, s0
 800111c:	eddf 7a19 	vldr	s15, [pc, #100]	; 8001184 <DM_DisplayInputTriggerTimerHertz+0x1e0>
 8001120:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001124:	ee16 0a90 	vmov	r0, s13
 8001128:	f7ff fa36 	bl	8000598 <__aeabi_f2d>
 800112c:	4603      	mov	r3, r0
 800112e:	460c      	mov	r4, r1
 8001130:	f107 0008 	add.w	r0, r7, #8
 8001134:	e9cd 3400 	strd	r3, r4, [sp]
 8001138:	4a16      	ldr	r2, [pc, #88]	; (8001194 <DM_DisplayInputTriggerTimerHertz+0x1f0>)
 800113a:	210d      	movs	r1, #13
 800113c:	f010 ffc4 	bl	80120c8 <sniprintf>
			ILI9341_Draw_Text(avg_freq_count_hertz, xpos, ypos, NORMAL_TEXT_FGCOLOUR , text_size, NORMAL_TEXT_BGCOLOUR);
 8001140:	4b12      	ldr	r3, [pc, #72]	; (800118c <DM_DisplayInputTriggerTimerHertz+0x1e8>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	b29b      	uxth	r3, r3
 8001146:	88bc      	ldrh	r4, [r7, #4]
 8001148:	88f9      	ldrh	r1, [r7, #6]
 800114a:	f107 0008 	add.w	r0, r7, #8
 800114e:	2200      	movs	r2, #0
 8001150:	9201      	str	r2, [sp, #4]
 8001152:	9300      	str	r3, [sp, #0]
 8001154:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001158:	4622      	mov	r2, r4
 800115a:	f00f fbf9 	bl	8010950 <ILI9341_Draw_Text>
}
 800115e:	e00d      	b.n	800117c <DM_DisplayInputTriggerTimerHertz+0x1d8>
		ILI9341_Draw_Text("                   ", xpos, ypos, NORMAL_TEXT_FGCOLOUR , text_size, NORMAL_TEXT_BGCOLOUR);
 8001160:	4b0a      	ldr	r3, [pc, #40]	; (800118c <DM_DisplayInputTriggerTimerHertz+0x1e8>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	b29b      	uxth	r3, r3
 8001166:	88b8      	ldrh	r0, [r7, #4]
 8001168:	88f9      	ldrh	r1, [r7, #6]
 800116a:	2200      	movs	r2, #0
 800116c:	9201      	str	r2, [sp, #4]
 800116e:	9300      	str	r3, [sp, #0]
 8001170:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001174:	4602      	mov	r2, r0
 8001176:	4809      	ldr	r0, [pc, #36]	; (800119c <DM_DisplayInputTriggerTimerHertz+0x1f8>)
 8001178:	f00f fbea 	bl	8010950 <ILI9341_Draw_Text>
}
 800117c:	bf00      	nop
 800117e:	374c      	adds	r7, #76	; 0x4c
 8001180:	46bd      	mov	sp, r7
 8001182:	bd90      	pop	{r4, r7, pc}
 8001184:	447a0000 	.word	0x447a0000
 8001188:	08015870 	.word	0x08015870
 800118c:	20000000 	.word	0x20000000
 8001190:	461c4000 	.word	0x461c4000
 8001194:	0801587c 	.word	0x0801587c
 8001198:	47c35000 	.word	0x47c35000
 800119c:	08015888 	.word	0x08015888

080011a0 <_DisplayOutputSignalHertz>:
 *	@param None
 *	@retval None
 *
 */
void _DisplayOutputSignalHertz(uint16_t xpos, uint16_t ypos)
{
 80011a0:	b590      	push	{r4, r7, lr}
 80011a2:	b08b      	sub	sp, #44	; 0x2c
 80011a4:	af02      	add	r7, sp, #8
 80011a6:	4603      	mov	r3, r0
 80011a8:	460a      	mov	r2, r1
 80011aa:	80fb      	strh	r3, [r7, #6]
 80011ac:	4613      	mov	r3, r2
 80011ae:	80bb      	strh	r3, [r7, #4]
	char out_hertz[15] = "";
 80011b0:	2300      	movs	r3, #0
 80011b2:	60fb      	str	r3, [r7, #12]
 80011b4:	f107 0310 	add.w	r3, r7, #16
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	f8c3 2007 	str.w	r2, [r3, #7]
	uint8_t out_hertz_x = xpos;
 80011c2:	88fb      	ldrh	r3, [r7, #6]
 80011c4:	77fb      	strb	r3, [r7, #31]
	uint8_t out_hertz_y = ypos;
 80011c6:	88bb      	ldrh	r3, [r7, #4]
 80011c8:	77bb      	strb	r3, [r7, #30]

	// draw row header
	ILI9341_Draw_Text("FREQ   ....", 2, out_hertz_y , NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 80011ca:	7fbb      	ldrb	r3, [r7, #30]
 80011cc:	b299      	uxth	r1, r3
 80011ce:	4b19      	ldr	r3, [pc, #100]	; (8001234 <_DisplayOutputSignalHertz+0x94>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	b29b      	uxth	r3, r3
 80011d4:	2200      	movs	r2, #0
 80011d6:	9201      	str	r2, [sp, #4]
 80011d8:	9300      	str	r3, [sp, #0]
 80011da:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80011de:	460a      	mov	r2, r1
 80011e0:	2102      	movs	r1, #2
 80011e2:	4815      	ldr	r0, [pc, #84]	; (8001238 <_DisplayOutputSignalHertz+0x98>)
 80011e4:	f00f fbb4 	bl	8010950 <ILI9341_Draw_Text>

	// display output in hertz
	snprintf(out_hertz, sizeof(out_hertz), " %4.2f   Hz ", SM_GetOutputInHertz());
 80011e8:	f005 fe78 	bl	8006edc <SM_GetOutputInHertz>
 80011ec:	ee10 3a10 	vmov	r3, s0
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff f9d1 	bl	8000598 <__aeabi_f2d>
 80011f6:	4603      	mov	r3, r0
 80011f8:	460c      	mov	r4, r1
 80011fa:	f107 000c 	add.w	r0, r7, #12
 80011fe:	e9cd 3400 	strd	r3, r4, [sp]
 8001202:	4a0e      	ldr	r2, [pc, #56]	; (800123c <_DisplayOutputSignalHertz+0x9c>)
 8001204:	210f      	movs	r1, #15
 8001206:	f010 ff5f 	bl	80120c8 <sniprintf>
	ILI9341_Draw_Text(out_hertz, out_hertz_x, out_hertz_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 800120a:	7ffb      	ldrb	r3, [r7, #31]
 800120c:	b299      	uxth	r1, r3
 800120e:	7fbb      	ldrb	r3, [r7, #30]
 8001210:	b29c      	uxth	r4, r3
 8001212:	4b08      	ldr	r3, [pc, #32]	; (8001234 <_DisplayOutputSignalHertz+0x94>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	b29b      	uxth	r3, r3
 8001218:	f107 000c 	add.w	r0, r7, #12
 800121c:	2200      	movs	r2, #0
 800121e:	9201      	str	r2, [sp, #4]
 8001220:	9300      	str	r3, [sp, #0]
 8001222:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001226:	4622      	mov	r2, r4
 8001228:	f00f fb92 	bl	8010950 <ILI9341_Draw_Text>
}
 800122c:	bf00      	nop
 800122e:	3724      	adds	r7, #36	; 0x24
 8001230:	46bd      	mov	sp, r7
 8001232:	bd90      	pop	{r4, r7, pc}
 8001234:	20000000 	.word	0x20000000
 8001238:	0801589c 	.word	0x0801589c
 800123c:	080158a8 	.word	0x080158a8

08001240 <_DisplayOutputSignalVpp>:
 *	@param None
 *	@retval None
 *
 */
void _DisplayOutputSignalVpp(uint16_t xpos, uint16_t ypos)
{
 8001240:	b590      	push	{r4, r7, lr}
 8001242:	b08d      	sub	sp, #52	; 0x34
 8001244:	af02      	add	r7, sp, #8
 8001246:	4603      	mov	r3, r0
 8001248:	460a      	mov	r2, r1
 800124a:	80fb      	strh	r3, [r7, #6]
 800124c:	4613      	mov	r3, r2
 800124e:	80bb      	strh	r3, [r7, #4]
	char out_vpp[18] = "";
 8001250:	2300      	movs	r3, #0
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	f107 0310 	add.w	r3, r7, #16
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	609a      	str	r2, [r3, #8]
 8001260:	819a      	strh	r2, [r3, #12]
	uint8_t out_vpp_x = xpos;
 8001262:	88fb      	ldrh	r3, [r7, #6]
 8001264:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t out_vpp_y = ypos;
 8001268:	88bb      	ldrh	r3, [r7, #4]
 800126a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	// draw row header
	ILI9341_Draw_Text("VPP    ....", 2, out_vpp_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 800126e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001272:	b299      	uxth	r1, r3
 8001274:	4b1e      	ldr	r3, [pc, #120]	; (80012f0 <_DisplayOutputSignalVpp+0xb0>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	b29b      	uxth	r3, r3
 800127a:	2200      	movs	r2, #0
 800127c:	9201      	str	r2, [sp, #4]
 800127e:	9300      	str	r3, [sp, #0]
 8001280:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001284:	460a      	mov	r2, r1
 8001286:	2102      	movs	r1, #2
 8001288:	481a      	ldr	r0, [pc, #104]	; (80012f4 <_DisplayOutputSignalVpp+0xb4>)
 800128a:	f00f fb61 	bl	8010950 <ILI9341_Draw_Text>

	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile;
 800128e:	2000      	movs	r0, #0
 8001290:	f005 fb8c 	bl	80069ac <SM_GetOutputChannel>
 8001294:	4603      	mov	r3, r0
 8001296:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 800129a:	623b      	str	r3, [r7, #32]

	if(pTmpVppPreset)
 800129c:	6a3b      	ldr	r3, [r7, #32]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d00e      	beq.n	80012c0 <_DisplayOutputSignalVpp+0x80>
	{
		snprintf(out_vpp, sizeof(out_vpp), " %2.2f   V ", pTmpVppPreset->amp_value);
 80012a2:	6a3b      	ldr	r3, [r7, #32]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff f976 	bl	8000598 <__aeabi_f2d>
 80012ac:	4603      	mov	r3, r0
 80012ae:	460c      	mov	r4, r1
 80012b0:	f107 000c 	add.w	r0, r7, #12
 80012b4:	e9cd 3400 	strd	r3, r4, [sp]
 80012b8:	4a0f      	ldr	r2, [pc, #60]	; (80012f8 <_DisplayOutputSignalVpp+0xb8>)
 80012ba:	2112      	movs	r1, #18
 80012bc:	f010 ff04 	bl	80120c8 <sniprintf>
	}

	ILI9341_Draw_Text(out_vpp, out_vpp_x, out_vpp_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 80012c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012c4:	b299      	uxth	r1, r3
 80012c6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80012ca:	b29c      	uxth	r4, r3
 80012cc:	4b08      	ldr	r3, [pc, #32]	; (80012f0 <_DisplayOutputSignalVpp+0xb0>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	b29b      	uxth	r3, r3
 80012d2:	f107 000c 	add.w	r0, r7, #12
 80012d6:	2200      	movs	r2, #0
 80012d8:	9201      	str	r2, [sp, #4]
 80012da:	9300      	str	r3, [sp, #0]
 80012dc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80012e0:	4622      	mov	r2, r4
 80012e2:	f00f fb35 	bl	8010950 <ILI9341_Draw_Text>
}
 80012e6:	bf00      	nop
 80012e8:	372c      	adds	r7, #44	; 0x2c
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd90      	pop	{r4, r7, pc}
 80012ee:	bf00      	nop
 80012f0:	20000000 	.word	0x20000000
 80012f4:	080158b8 	.word	0x080158b8
 80012f8:	080158c4 	.word	0x080158c4

080012fc <_DisplayOutputSignalDecibels>:
 *	@param None
 *	@retval None
 *
 */
void _DisplayOutputSignalDecibels(uint16_t xpos, uint16_t ypos)
{
 80012fc:	b590      	push	{r4, r7, lr}
 80012fe:	b08d      	sub	sp, #52	; 0x34
 8001300:	af02      	add	r7, sp, #8
 8001302:	4603      	mov	r3, r0
 8001304:	460a      	mov	r2, r1
 8001306:	80fb      	strh	r3, [r7, #6]
 8001308:	4613      	mov	r3, r2
 800130a:	80bb      	strh	r3, [r7, #4]
	char out_decibels[20] = "";
 800130c:	2300      	movs	r3, #0
 800130e:	60fb      	str	r3, [r7, #12]
 8001310:	f107 0310 	add.w	r3, r7, #16
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
	uint8_t out_decibels_x = xpos;
 800131e:	88fb      	ldrh	r3, [r7, #6]
 8001320:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t out_decibels_y = ypos;
 8001324:	88bb      	ldrh	r3, [r7, #4]
 8001326:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	// draw row header
	ILI9341_Draw_Text("GAIN   ....", 2, out_decibels_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 800132a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800132e:	b299      	uxth	r1, r3
 8001330:	4b28      	ldr	r3, [pc, #160]	; (80013d4 <_DisplayOutputSignalDecibels+0xd8>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	b29b      	uxth	r3, r3
 8001336:	2200      	movs	r2, #0
 8001338:	9201      	str	r2, [sp, #4]
 800133a:	9300      	str	r3, [sp, #0]
 800133c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001340:	460a      	mov	r2, r1
 8001342:	2102      	movs	r1, #2
 8001344:	4824      	ldr	r0, [pc, #144]	; (80013d8 <_DisplayOutputSignalDecibels+0xdc>)
 8001346:	f00f fb03 	bl	8010950 <ILI9341_Draw_Text>

	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile;
 800134a:	2000      	movs	r0, #0
 800134c:	f005 fb2e 	bl	80069ac <SM_GetOutputChannel>
 8001350:	4603      	mov	r3, r0
 8001352:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8001356:	623b      	str	r3, [r7, #32]
	if(pTmpVppPreset)
 8001358:	6a3b      	ldr	r3, [r7, #32]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d00e      	beq.n	800137c <_DisplayOutputSignalDecibels+0x80>
	{
		snprintf(out_decibels, sizeof(out_decibels), " %+7.2f ", pTmpVppPreset->gain_decibels);
 800135e:	6a3b      	ldr	r3, [r7, #32]
 8001360:	68db      	ldr	r3, [r3, #12]
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff f918 	bl	8000598 <__aeabi_f2d>
 8001368:	4603      	mov	r3, r0
 800136a:	460c      	mov	r4, r1
 800136c:	f107 000c 	add.w	r0, r7, #12
 8001370:	e9cd 3400 	strd	r3, r4, [sp]
 8001374:	4a19      	ldr	r2, [pc, #100]	; (80013dc <_DisplayOutputSignalDecibels+0xe0>)
 8001376:	2114      	movs	r1, #20
 8001378:	f010 fea6 	bl	80120c8 <sniprintf>
	}

	ILI9341_Draw_Text(out_decibels, out_decibels_x, out_decibels_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 800137c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001380:	b299      	uxth	r1, r3
 8001382:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001386:	b29c      	uxth	r4, r3
 8001388:	4b12      	ldr	r3, [pc, #72]	; (80013d4 <_DisplayOutputSignalDecibels+0xd8>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	b29b      	uxth	r3, r3
 800138e:	f107 000c 	add.w	r0, r7, #12
 8001392:	2200      	movs	r2, #0
 8001394:	9201      	str	r2, [sp, #4]
 8001396:	9300      	str	r3, [sp, #0]
 8001398:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800139c:	4622      	mov	r2, r4
 800139e:	f00f fad7 	bl	8010950 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("dBmV", out_decibels_x + 128, out_decibels_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 80013a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80013a6:	b29b      	uxth	r3, r3
 80013a8:	3380      	adds	r3, #128	; 0x80
 80013aa:	b299      	uxth	r1, r3
 80013ac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80013b0:	b298      	uxth	r0, r3
 80013b2:	4b08      	ldr	r3, [pc, #32]	; (80013d4 <_DisplayOutputSignalDecibels+0xd8>)
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	b29b      	uxth	r3, r3
 80013b8:	2200      	movs	r2, #0
 80013ba:	9201      	str	r2, [sp, #4]
 80013bc:	9300      	str	r3, [sp, #0]
 80013be:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80013c2:	4602      	mov	r2, r0
 80013c4:	4806      	ldr	r0, [pc, #24]	; (80013e0 <_DisplayOutputSignalDecibels+0xe4>)
 80013c6:	f00f fac3 	bl	8010950 <ILI9341_Draw_Text>

}
 80013ca:	bf00      	nop
 80013cc:	372c      	adds	r7, #44	; 0x2c
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd90      	pop	{r4, r7, pc}
 80013d2:	bf00      	nop
 80013d4:	20000000 	.word	0x20000000
 80013d8:	080158d0 	.word	0x080158d0
 80013dc:	080158dc 	.word	0x080158dc
 80013e0:	080158e8 	.word	0x080158e8

080013e4 <_DisplayOutputSignalOffset>:
 *	@param None
 *	@retval None
 *
 */
void _DisplayOutputSignalOffset(uint16_t xpos, uint16_t ypos)
{
 80013e4:	b590      	push	{r4, r7, lr}
 80013e6:	b08d      	sub	sp, #52	; 0x34
 80013e8:	af02      	add	r7, sp, #8
 80013ea:	4603      	mov	r3, r0
 80013ec:	460a      	mov	r2, r1
 80013ee:	80fb      	strh	r3, [r7, #6]
 80013f0:	4613      	mov	r3, r2
 80013f2:	80bb      	strh	r3, [r7, #4]
	float volts_per_thou = 0.00075;
 80013f4:	4b45      	ldr	r3, [pc, #276]	; (800150c <_DisplayOutputSignalOffset+0x128>)
 80013f6:	623b      	str	r3, [r7, #32]
	char out_dcvolts[12] = "";
 80013f8:	2300      	movs	r3, #0
 80013fa:	613b      	str	r3, [r7, #16]
 80013fc:	f107 0314 	add.w	r3, r7, #20
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	605a      	str	r2, [r3, #4]
	uint8_t out_dcvolts_x = xpos;
 8001406:	88fb      	ldrh	r3, [r7, #6]
 8001408:	77fb      	strb	r3, [r7, #31]
	uint8_t out_dcvolts_y = ypos;
 800140a:	88bb      	ldrh	r3, [r7, #4]
 800140c:	77bb      	strb	r3, [r7, #30]

	ILI9341_Draw_Text("OFFSET ....", 2, out_dcvolts_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 800140e:	7fbb      	ldrb	r3, [r7, #30]
 8001410:	b299      	uxth	r1, r3
 8001412:	4b3f      	ldr	r3, [pc, #252]	; (8001510 <_DisplayOutputSignalOffset+0x12c>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	b29b      	uxth	r3, r3
 8001418:	2200      	movs	r2, #0
 800141a:	9201      	str	r2, [sp, #4]
 800141c:	9300      	str	r3, [sp, #0]
 800141e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001422:	460a      	mov	r2, r1
 8001424:	2102      	movs	r1, #2
 8001426:	483b      	ldr	r0, [pc, #236]	; (8001514 <_DisplayOutputSignalOffset+0x130>)
 8001428:	f00f fa92 	bl	8010950 <ILI9341_Draw_Text>

	// display output bias in +/- Volts
	float dc_volts;
	(BO_GetOutputBias() == 0) ? (dc_volts = 0) : (dc_volts = volts_per_thou * (float)BO_GetOutputBias());
 800142c:	f004 f926 	bl	800567c <BO_GetOutputBias>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d103      	bne.n	800143e <_DisplayOutputSignalOffset+0x5a>
 8001436:	f04f 0300 	mov.w	r3, #0
 800143a:	627b      	str	r3, [r7, #36]	; 0x24
 800143c:	e00b      	b.n	8001456 <_DisplayOutputSignalOffset+0x72>
 800143e:	f004 f91d 	bl	800567c <BO_GetOutputBias>
 8001442:	ee07 0a90 	vmov	s15, r0
 8001446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800144a:	ed97 7a08 	vldr	s14, [r7, #32]
 800144e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001452:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	snprintf(out_dcvolts, sizeof(out_dcvolts), "%05.2f   v ", dc_volts);
 8001456:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001458:	f7ff f89e 	bl	8000598 <__aeabi_f2d>
 800145c:	4603      	mov	r3, r0
 800145e:	460c      	mov	r4, r1
 8001460:	f107 0010 	add.w	r0, r7, #16
 8001464:	e9cd 3400 	strd	r3, r4, [sp]
 8001468:	4a2b      	ldr	r2, [pc, #172]	; (8001518 <_DisplayOutputSignalOffset+0x134>)
 800146a:	210c      	movs	r1, #12
 800146c:	f010 fe2c 	bl	80120c8 <sniprintf>
	if(BO_GetBiasPolarity())
 8001470:	f004 f8a4 	bl	80055bc <BO_GetBiasPolarity>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d022      	beq.n	80014c0 <_DisplayOutputSignalOffset+0xdc>
	{
		char symbol[3] = "+\0";
 800147a:	4a28      	ldr	r2, [pc, #160]	; (800151c <_DisplayOutputSignalOffset+0x138>)
 800147c:	f107 030c 	add.w	r3, r7, #12
 8001480:	6812      	ldr	r2, [r2, #0]
 8001482:	4611      	mov	r1, r2
 8001484:	8019      	strh	r1, [r3, #0]
 8001486:	3302      	adds	r3, #2
 8001488:	0c12      	lsrs	r2, r2, #16
 800148a:	701a      	strb	r2, [r3, #0]
		ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 800148c:	f107 0210 	add.w	r2, r7, #16
 8001490:	f107 030c 	add.w	r3, r7, #12
 8001494:	4611      	mov	r1, r2
 8001496:	4618      	mov	r0, r3
 8001498:	f010 fe4a 	bl	8012130 <strcat>
 800149c:	4604      	mov	r4, r0
 800149e:	7ffb      	ldrb	r3, [r7, #31]
 80014a0:	b299      	uxth	r1, r3
 80014a2:	7fbb      	ldrb	r3, [r7, #30]
 80014a4:	b298      	uxth	r0, r3
 80014a6:	4b1a      	ldr	r3, [pc, #104]	; (8001510 <_DisplayOutputSignalOffset+0x12c>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	b29b      	uxth	r3, r3
 80014ac:	2200      	movs	r2, #0
 80014ae:	9201      	str	r2, [sp, #4]
 80014b0:	9300      	str	r3, [sp, #0]
 80014b2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80014b6:	4602      	mov	r2, r0
 80014b8:	4620      	mov	r0, r4
 80014ba:	f00f fa49 	bl	8010950 <ILI9341_Draw_Text>
	{
		char symbol[3] = "-\0";
		ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
	}

}
 80014be:	e021      	b.n	8001504 <_DisplayOutputSignalOffset+0x120>
		char symbol[3] = "-\0";
 80014c0:	4a17      	ldr	r2, [pc, #92]	; (8001520 <_DisplayOutputSignalOffset+0x13c>)
 80014c2:	f107 0308 	add.w	r3, r7, #8
 80014c6:	6812      	ldr	r2, [r2, #0]
 80014c8:	4611      	mov	r1, r2
 80014ca:	8019      	strh	r1, [r3, #0]
 80014cc:	3302      	adds	r3, #2
 80014ce:	0c12      	lsrs	r2, r2, #16
 80014d0:	701a      	strb	r2, [r3, #0]
		ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 80014d2:	f107 0210 	add.w	r2, r7, #16
 80014d6:	f107 0308 	add.w	r3, r7, #8
 80014da:	4611      	mov	r1, r2
 80014dc:	4618      	mov	r0, r3
 80014de:	f010 fe27 	bl	8012130 <strcat>
 80014e2:	4604      	mov	r4, r0
 80014e4:	7ffb      	ldrb	r3, [r7, #31]
 80014e6:	b299      	uxth	r1, r3
 80014e8:	7fbb      	ldrb	r3, [r7, #30]
 80014ea:	b298      	uxth	r0, r3
 80014ec:	4b08      	ldr	r3, [pc, #32]	; (8001510 <_DisplayOutputSignalOffset+0x12c>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	b29b      	uxth	r3, r3
 80014f2:	2200      	movs	r2, #0
 80014f4:	9201      	str	r2, [sp, #4]
 80014f6:	9300      	str	r3, [sp, #0]
 80014f8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80014fc:	4602      	mov	r2, r0
 80014fe:	4620      	mov	r0, r4
 8001500:	f00f fa26 	bl	8010950 <ILI9341_Draw_Text>
}
 8001504:	bf00      	nop
 8001506:	372c      	adds	r7, #44	; 0x2c
 8001508:	46bd      	mov	sp, r7
 800150a:	bd90      	pop	{r4, r7, pc}
 800150c:	3a449ba6 	.word	0x3a449ba6
 8001510:	20000000 	.word	0x20000000
 8001514:	080158f0 	.word	0x080158f0
 8001518:	080158fc 	.word	0x080158fc
 800151c:	08015908 	.word	0x08015908
 8001520:	0801590c 	.word	0x0801590c

08001524 <_DisplayOutputWaveformIcons>:
 *	@param None
 *	@retval None
 *
 */
void _DisplayOutputWaveformIcons(uint16_t main_xpos, uint16_t main_ypos, uint16_t aux_xpos, uint16_t aux_ypos)
{
 8001524:	b590      	push	{r4, r7, lr}
 8001526:	b089      	sub	sp, #36	; 0x24
 8001528:	af04      	add	r7, sp, #16
 800152a:	4604      	mov	r4, r0
 800152c:	4608      	mov	r0, r1
 800152e:	4611      	mov	r1, r2
 8001530:	461a      	mov	r2, r3
 8001532:	4623      	mov	r3, r4
 8001534:	80fb      	strh	r3, [r7, #6]
 8001536:	4603      	mov	r3, r0
 8001538:	80bb      	strh	r3, [r7, #4]
 800153a:	460b      	mov	r3, r1
 800153c:	807b      	strh	r3, [r7, #2]
 800153e:	4613      	mov	r3, r2
 8001540:	803b      	strh	r3, [r7, #0]

	ILI9341_Draw_Text(" OUT:", 1, main_ypos+10, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001542:	88bb      	ldrh	r3, [r7, #4]
 8001544:	330a      	adds	r3, #10
 8001546:	b299      	uxth	r1, r3
 8001548:	4b94      	ldr	r3, [pc, #592]	; (800179c <_DisplayOutputWaveformIcons+0x278>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	b29b      	uxth	r3, r3
 800154e:	2200      	movs	r2, #0
 8001550:	9201      	str	r2, [sp, #4]
 8001552:	9300      	str	r3, [sp, #0]
 8001554:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001558:	460a      	mov	r2, r1
 800155a:	2101      	movs	r1, #1
 800155c:	4890      	ldr	r0, [pc, #576]	; (80017a0 <_DisplayOutputWaveformIcons+0x27c>)
 800155e:	f00f f9f7 	bl	8010950 <ILI9341_Draw_Text>
	eOutput_mode signal_output_func = SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile->func;
 8001562:	2000      	movs	r0, #0
 8001564:	f005 fa22 	bl	80069ac <SM_GetOutputChannel>
 8001568:	4603      	mov	r3, r0
 800156a:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	73fb      	strb	r3, [r7, #15]
	switch(signal_output_func)
 8001572:	7bfb      	ldrb	r3, [r7, #15]
 8001574:	2b06      	cmp	r3, #6
 8001576:	d878      	bhi.n	800166a <_DisplayOutputWaveformIcons+0x146>
 8001578:	a201      	add	r2, pc, #4	; (adr r2, 8001580 <_DisplayOutputWaveformIcons+0x5c>)
 800157a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800157e:	bf00      	nop
 8001580:	0800159d 	.word	0x0800159d
 8001584:	080015bd 	.word	0x080015bd
 8001588:	080015d9 	.word	0x080015d9
 800158c:	080015f5 	.word	0x080015f5
 8001590:	08001611 	.word	0x08001611
 8001594:	0800162d 	.word	0x0800162d
 8001598:	08001649 	.word	0x08001649
	{
		case SINE_FUNC_MODE:
			ILI9341_Draw_Wave(main_xpos, main_ypos-20, 3, SIGNAL_OUTPUT_ICON, 100, sineicon_data_table_1300, SINEICON_DATA_SIZE);
 800159c:	88bb      	ldrh	r3, [r7, #4]
 800159e:	3b14      	subs	r3, #20
 80015a0:	b299      	uxth	r1, r3
 80015a2:	88f8      	ldrh	r0, [r7, #6]
 80015a4:	233c      	movs	r3, #60	; 0x3c
 80015a6:	9302      	str	r3, [sp, #8]
 80015a8:	4b7e      	ldr	r3, [pc, #504]	; (80017a4 <_DisplayOutputWaveformIcons+0x280>)
 80015aa:	9301      	str	r3, [sp, #4]
 80015ac:	2364      	movs	r3, #100	; 0x64
 80015ae:	9300      	str	r3, [sp, #0]
 80015b0:	f240 23fd 	movw	r3, #765	; 0x2fd
 80015b4:	2203      	movs	r2, #3
 80015b6:	f00f f827 	bl	8010608 <ILI9341_Draw_Wave>
			break;
 80015ba:	e056      	b.n	800166a <_DisplayOutputWaveformIcons+0x146>
		case SQUARE_FUNC_MODE:
			ILI9341_Draw_Wave(main_xpos, main_ypos, 3, SIGNAL_OUTPUT_ICON, 200, squareicon_data_table_3600, SQUAREICON_DATA_SIZE);
 80015bc:	88b9      	ldrh	r1, [r7, #4]
 80015be:	88f8      	ldrh	r0, [r7, #6]
 80015c0:	233c      	movs	r3, #60	; 0x3c
 80015c2:	9302      	str	r3, [sp, #8]
 80015c4:	4b78      	ldr	r3, [pc, #480]	; (80017a8 <_DisplayOutputWaveformIcons+0x284>)
 80015c6:	9301      	str	r3, [sp, #4]
 80015c8:	23c8      	movs	r3, #200	; 0xc8
 80015ca:	9300      	str	r3, [sp, #0]
 80015cc:	f240 23fd 	movw	r3, #765	; 0x2fd
 80015d0:	2203      	movs	r2, #3
 80015d2:	f00f f819 	bl	8010608 <ILI9341_Draw_Wave>
			break;
 80015d6:	e048      	b.n	800166a <_DisplayOutputWaveformIcons+0x146>
		case SAW_FUNC_MODE:
			ILI9341_Draw_Wave(main_xpos, main_ypos, 3, SIGNAL_OUTPUT_ICON, 200, sawicon_data_table_3600, SAWICON_DATA_SIZE);
 80015d8:	88b9      	ldrh	r1, [r7, #4]
 80015da:	88f8      	ldrh	r0, [r7, #6]
 80015dc:	233c      	movs	r3, #60	; 0x3c
 80015de:	9302      	str	r3, [sp, #8]
 80015e0:	4b72      	ldr	r3, [pc, #456]	; (80017ac <_DisplayOutputWaveformIcons+0x288>)
 80015e2:	9301      	str	r3, [sp, #4]
 80015e4:	23c8      	movs	r3, #200	; 0xc8
 80015e6:	9300      	str	r3, [sp, #0]
 80015e8:	f240 23fd 	movw	r3, #765	; 0x2fd
 80015ec:	2203      	movs	r2, #3
 80015ee:	f00f f80b 	bl	8010608 <ILI9341_Draw_Wave>
			break;
 80015f2:	e03a      	b.n	800166a <_DisplayOutputWaveformIcons+0x146>
		case REV_SAW_FUNC_MODE:
			ILI9341_Draw_Wave(main_xpos, main_ypos, 3, SIGNAL_OUTPUT_ICON, 200, sawicon_rev_data_table_3600, SAWICON_REV_DATA_SIZE);
 80015f4:	88b9      	ldrh	r1, [r7, #4]
 80015f6:	88f8      	ldrh	r0, [r7, #6]
 80015f8:	233c      	movs	r3, #60	; 0x3c
 80015fa:	9302      	str	r3, [sp, #8]
 80015fc:	4b6c      	ldr	r3, [pc, #432]	; (80017b0 <_DisplayOutputWaveformIcons+0x28c>)
 80015fe:	9301      	str	r3, [sp, #4]
 8001600:	23c8      	movs	r3, #200	; 0xc8
 8001602:	9300      	str	r3, [sp, #0]
 8001604:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001608:	2203      	movs	r2, #3
 800160a:	f00e fffd 	bl	8010608 <ILI9341_Draw_Wave>
			break;
 800160e:	e02c      	b.n	800166a <_DisplayOutputWaveformIcons+0x146>
		case TRIANGLE_FUNC_MODE:
			ILI9341_Draw_Wave(main_xpos, main_ypos, 3, SIGNAL_OUTPUT_ICON, 200, triangleicon_data_table_3600, TRIANGLEICON_DATA_SIZE);
 8001610:	88b9      	ldrh	r1, [r7, #4]
 8001612:	88f8      	ldrh	r0, [r7, #6]
 8001614:	233c      	movs	r3, #60	; 0x3c
 8001616:	9302      	str	r3, [sp, #8]
 8001618:	4b66      	ldr	r3, [pc, #408]	; (80017b4 <_DisplayOutputWaveformIcons+0x290>)
 800161a:	9301      	str	r3, [sp, #4]
 800161c:	23c8      	movs	r3, #200	; 0xc8
 800161e:	9300      	str	r3, [sp, #0]
 8001620:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001624:	2203      	movs	r2, #3
 8001626:	f00e ffef 	bl	8010608 <ILI9341_Draw_Wave>
			break;
 800162a:	e01e      	b.n	800166a <_DisplayOutputWaveformIcons+0x146>
		case IMPULSE_FUNC_MODE:
			ILI9341_Draw_Wave(main_xpos, main_ypos, 3, SIGNAL_OUTPUT_ICON, 200, triangleicon_data_table_3600, TRIANGLEICON_DATA_SIZE);
 800162c:	88b9      	ldrh	r1, [r7, #4]
 800162e:	88f8      	ldrh	r0, [r7, #6]
 8001630:	233c      	movs	r3, #60	; 0x3c
 8001632:	9302      	str	r3, [sp, #8]
 8001634:	4b5f      	ldr	r3, [pc, #380]	; (80017b4 <_DisplayOutputWaveformIcons+0x290>)
 8001636:	9301      	str	r3, [sp, #4]
 8001638:	23c8      	movs	r3, #200	; 0xc8
 800163a:	9300      	str	r3, [sp, #0]
 800163c:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001640:	2203      	movs	r2, #3
 8001642:	f00e ffe1 	bl	8010608 <ILI9341_Draw_Wave>
			break;
 8001646:	e010      	b.n	800166a <_DisplayOutputWaveformIcons+0x146>
		case PWM_FUNC_MODE:
			ILI9341_Draw_Text("PWM", main_xpos, main_ypos+10, SIGNAL_OUTPUT_ICON, text_size, NORMAL_TEXT_BGCOLOUR);
 8001648:	88bb      	ldrh	r3, [r7, #4]
 800164a:	330a      	adds	r3, #10
 800164c:	b298      	uxth	r0, r3
 800164e:	4b53      	ldr	r3, [pc, #332]	; (800179c <_DisplayOutputWaveformIcons+0x278>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	b29b      	uxth	r3, r3
 8001654:	88f9      	ldrh	r1, [r7, #6]
 8001656:	2200      	movs	r2, #0
 8001658:	9201      	str	r2, [sp, #4]
 800165a:	9300      	str	r3, [sp, #0]
 800165c:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001660:	4602      	mov	r2, r0
 8001662:	4855      	ldr	r0, [pc, #340]	; (80017b8 <_DisplayOutputWaveformIcons+0x294>)
 8001664:	f00f f974 	bl	8010950 <ILI9341_Draw_Text>
			break;
 8001668:	bf00      	nop
	}

	ILI9341_Draw_Text("AUX:", 170, aux_ypos+10, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 800166a:	883b      	ldrh	r3, [r7, #0]
 800166c:	330a      	adds	r3, #10
 800166e:	b299      	uxth	r1, r3
 8001670:	4b4a      	ldr	r3, [pc, #296]	; (800179c <_DisplayOutputWaveformIcons+0x278>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	b29b      	uxth	r3, r3
 8001676:	2200      	movs	r2, #0
 8001678:	9201      	str	r2, [sp, #4]
 800167a:	9300      	str	r3, [sp, #0]
 800167c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001680:	460a      	mov	r2, r1
 8001682:	21aa      	movs	r1, #170	; 0xaa
 8001684:	484d      	ldr	r0, [pc, #308]	; (80017bc <_DisplayOutputWaveformIcons+0x298>)
 8001686:	f00f f963 	bl	8010950 <ILI9341_Draw_Text>
	eOutput_mode Aux_output_func = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 800168a:	2001      	movs	r0, #1
 800168c:	f005 f98e 	bl	80069ac <SM_GetOutputChannel>
 8001690:	4603      	mov	r3, r0
 8001692:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	73bb      	strb	r3, [r7, #14]
	switch(Aux_output_func)
 800169a:	7bbb      	ldrb	r3, [r7, #14]
 800169c:	2b06      	cmp	r3, #6
 800169e:	d878      	bhi.n	8001792 <_DisplayOutputWaveformIcons+0x26e>
 80016a0:	a201      	add	r2, pc, #4	; (adr r2, 80016a8 <_DisplayOutputWaveformIcons+0x184>)
 80016a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016a6:	bf00      	nop
 80016a8:	080016c5 	.word	0x080016c5
 80016ac:	080016e5 	.word	0x080016e5
 80016b0:	08001701 	.word	0x08001701
 80016b4:	0800171d 	.word	0x0800171d
 80016b8:	08001739 	.word	0x08001739
 80016bc:	08001755 	.word	0x08001755
 80016c0:	08001771 	.word	0x08001771
	{
		case SINE_FUNC_MODE:

			ILI9341_Draw_Wave(aux_xpos, aux_ypos-20, 3, Aux_OUTPUT_ICON, 100, sineicon_data_table_1300, SINEICON_DATA_SIZE);
 80016c4:	883b      	ldrh	r3, [r7, #0]
 80016c6:	3b14      	subs	r3, #20
 80016c8:	b299      	uxth	r1, r3
 80016ca:	8878      	ldrh	r0, [r7, #2]
 80016cc:	233c      	movs	r3, #60	; 0x3c
 80016ce:	9302      	str	r3, [sp, #8]
 80016d0:	4b34      	ldr	r3, [pc, #208]	; (80017a4 <_DisplayOutputWaveformIcons+0x280>)
 80016d2:	9301      	str	r3, [sp, #4]
 80016d4:	2364      	movs	r3, #100	; 0x64
 80016d6:	9300      	str	r3, [sp, #0]
 80016d8:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80016dc:	2203      	movs	r2, #3
 80016de:	f00e ff93 	bl	8010608 <ILI9341_Draw_Wave>
			break;
 80016e2:	e056      	b.n	8001792 <_DisplayOutputWaveformIcons+0x26e>
		case SQUARE_FUNC_MODE:
			ILI9341_Draw_Wave(aux_xpos, aux_ypos, 3, Aux_OUTPUT_ICON, 200, squareicon_data_table_3600, SQUAREICON_DATA_SIZE);
 80016e4:	8839      	ldrh	r1, [r7, #0]
 80016e6:	8878      	ldrh	r0, [r7, #2]
 80016e8:	233c      	movs	r3, #60	; 0x3c
 80016ea:	9302      	str	r3, [sp, #8]
 80016ec:	4b2e      	ldr	r3, [pc, #184]	; (80017a8 <_DisplayOutputWaveformIcons+0x284>)
 80016ee:	9301      	str	r3, [sp, #4]
 80016f0:	23c8      	movs	r3, #200	; 0xc8
 80016f2:	9300      	str	r3, [sp, #0]
 80016f4:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80016f8:	2203      	movs	r2, #3
 80016fa:	f00e ff85 	bl	8010608 <ILI9341_Draw_Wave>
			break;
 80016fe:	e048      	b.n	8001792 <_DisplayOutputWaveformIcons+0x26e>
		case SAW_FUNC_MODE:
			ILI9341_Draw_Wave(aux_xpos, aux_ypos, 3, Aux_OUTPUT_ICON, 200, sawicon_data_table_3600, SAWICON_DATA_SIZE);
 8001700:	8839      	ldrh	r1, [r7, #0]
 8001702:	8878      	ldrh	r0, [r7, #2]
 8001704:	233c      	movs	r3, #60	; 0x3c
 8001706:	9302      	str	r3, [sp, #8]
 8001708:	4b28      	ldr	r3, [pc, #160]	; (80017ac <_DisplayOutputWaveformIcons+0x288>)
 800170a:	9301      	str	r3, [sp, #4]
 800170c:	23c8      	movs	r3, #200	; 0xc8
 800170e:	9300      	str	r3, [sp, #0]
 8001710:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8001714:	2203      	movs	r2, #3
 8001716:	f00e ff77 	bl	8010608 <ILI9341_Draw_Wave>
			break;
 800171a:	e03a      	b.n	8001792 <_DisplayOutputWaveformIcons+0x26e>
		case REV_SAW_FUNC_MODE:
			ILI9341_Draw_Wave(aux_xpos, aux_ypos, 3, Aux_OUTPUT_ICON, 200, sawicon_rev_data_table_3600, SAWICON_REV_DATA_SIZE);
 800171c:	8839      	ldrh	r1, [r7, #0]
 800171e:	8878      	ldrh	r0, [r7, #2]
 8001720:	233c      	movs	r3, #60	; 0x3c
 8001722:	9302      	str	r3, [sp, #8]
 8001724:	4b22      	ldr	r3, [pc, #136]	; (80017b0 <_DisplayOutputWaveformIcons+0x28c>)
 8001726:	9301      	str	r3, [sp, #4]
 8001728:	23c8      	movs	r3, #200	; 0xc8
 800172a:	9300      	str	r3, [sp, #0]
 800172c:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8001730:	2203      	movs	r2, #3
 8001732:	f00e ff69 	bl	8010608 <ILI9341_Draw_Wave>
			break;
 8001736:	e02c      	b.n	8001792 <_DisplayOutputWaveformIcons+0x26e>
		case TRIANGLE_FUNC_MODE:
			ILI9341_Draw_Wave(aux_xpos, aux_ypos, 3, Aux_OUTPUT_ICON, 200, triangleicon_data_table_3600, TRIANGLEICON_DATA_SIZE);
 8001738:	8839      	ldrh	r1, [r7, #0]
 800173a:	8878      	ldrh	r0, [r7, #2]
 800173c:	233c      	movs	r3, #60	; 0x3c
 800173e:	9302      	str	r3, [sp, #8]
 8001740:	4b1c      	ldr	r3, [pc, #112]	; (80017b4 <_DisplayOutputWaveformIcons+0x290>)
 8001742:	9301      	str	r3, [sp, #4]
 8001744:	23c8      	movs	r3, #200	; 0xc8
 8001746:	9300      	str	r3, [sp, #0]
 8001748:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800174c:	2203      	movs	r2, #3
 800174e:	f00e ff5b 	bl	8010608 <ILI9341_Draw_Wave>
			break;
 8001752:	e01e      	b.n	8001792 <_DisplayOutputWaveformIcons+0x26e>
		case IMPULSE_FUNC_MODE:
			ILI9341_Draw_Wave(aux_xpos, aux_ypos, 3, Aux_OUTPUT_ICON, 200, triangleicon_data_table_3600, TRIANGLEICON_DATA_SIZE);
 8001754:	8839      	ldrh	r1, [r7, #0]
 8001756:	8878      	ldrh	r0, [r7, #2]
 8001758:	233c      	movs	r3, #60	; 0x3c
 800175a:	9302      	str	r3, [sp, #8]
 800175c:	4b15      	ldr	r3, [pc, #84]	; (80017b4 <_DisplayOutputWaveformIcons+0x290>)
 800175e:	9301      	str	r3, [sp, #4]
 8001760:	23c8      	movs	r3, #200	; 0xc8
 8001762:	9300      	str	r3, [sp, #0]
 8001764:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8001768:	2203      	movs	r2, #3
 800176a:	f00e ff4d 	bl	8010608 <ILI9341_Draw_Wave>
			break;
 800176e:	e010      	b.n	8001792 <_DisplayOutputWaveformIcons+0x26e>
		case PWM_FUNC_MODE:
			ILI9341_Draw_Text("PWM", aux_xpos, aux_ypos+10, Aux_OUTPUT_ICON, text_size, NORMAL_TEXT_BGCOLOUR);
 8001770:	883b      	ldrh	r3, [r7, #0]
 8001772:	330a      	adds	r3, #10
 8001774:	b298      	uxth	r0, r3
 8001776:	4b09      	ldr	r3, [pc, #36]	; (800179c <_DisplayOutputWaveformIcons+0x278>)
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	b29b      	uxth	r3, r3
 800177c:	8879      	ldrh	r1, [r7, #2]
 800177e:	2200      	movs	r2, #0
 8001780:	9201      	str	r2, [sp, #4]
 8001782:	9300      	str	r3, [sp, #0]
 8001784:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8001788:	4602      	mov	r2, r0
 800178a:	480b      	ldr	r0, [pc, #44]	; (80017b8 <_DisplayOutputWaveformIcons+0x294>)
 800178c:	f00f f8e0 	bl	8010950 <ILI9341_Draw_Text>
			break;
 8001790:	bf00      	nop
	}
}
 8001792:	bf00      	nop
 8001794:	3714      	adds	r7, #20
 8001796:	46bd      	mov	sp, r7
 8001798:	bd90      	pop	{r4, r7, pc}
 800179a:	bf00      	nop
 800179c:	20000000 	.word	0x20000000
 80017a0:	08015910 	.word	0x08015910
 80017a4:	200010a4 	.word	0x200010a4
 80017a8:	20001194 	.word	0x20001194
 80017ac:	20000ec4 	.word	0x20000ec4
 80017b0:	20000fb4 	.word	0x20000fb4
 80017b4:	20001284 	.word	0x20001284
 80017b8:	08015918 	.word	0x08015918
 80017bc:	0801591c 	.word	0x0801591c

080017c0 <DM_RefreshScreen>:
 *	@param None
 *	@retval None
 *
 */
void DM_RefreshScreen()
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af04      	add	r7, sp, #16



	// pause display interrupts
	HAL_TIM_Base_Stop_IT(&htim15);
 80017c6:	4820      	ldr	r0, [pc, #128]	; (8001848 <DM_RefreshScreen+0x88>)
 80017c8:	f00c f8a8 	bl	800d91c <HAL_TIM_Base_Stop_IT>


	ILI9341_Fill_Screen(SCREEN_BGCOLOUR);
 80017cc:	2000      	movs	r0, #0
 80017ce:	f00f fb3f 	bl	8010e50 <ILI9341_Fill_Screen>
	GUI_DrawPolygon(Points, 3, RED);
	GUI_FillPolygon(Points2, 3, BLUE);
	GUI_DrawEllipse(250, 110, 20, 30, GREEN);
	GUI_FillEllipse(250, 110, 20, 30, WHITE);
*/
	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	0,
 80017d2:	2300      	movs	r3, #0
 80017d4:	9302      	str	r3, [sp, #8]
 80017d6:	2302      	movs	r3, #2
 80017d8:	9301      	str	r3, [sp, #4]
 80017da:	f240 23fd 	movw	r3, #765	; 0x2fd
 80017de:	9300      	str	r3, [sp, #0]
 80017e0:	2328      	movs	r3, #40	; 0x28
 80017e2:	2250      	movs	r2, #80	; 0x50
 80017e4:	21c8      	movs	r1, #200	; 0xc8
 80017e6:	2000      	movs	r0, #0
 80017e8:	f00e ff4f 	bl	801068a <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													BTN1_FILL_COLOUR,
													BTN1_BORDER_WEIGHT,
													BTN1_BORDER_COLOUR);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	BTN_WIDTH,
 80017ec:	2300      	movs	r3, #0
 80017ee:	9302      	str	r3, [sp, #8]
 80017f0:	2302      	movs	r3, #2
 80017f2:	9301      	str	r3, [sp, #4]
 80017f4:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80017f8:	9300      	str	r3, [sp, #0]
 80017fa:	2328      	movs	r3, #40	; 0x28
 80017fc:	2250      	movs	r2, #80	; 0x50
 80017fe:	21c8      	movs	r1, #200	; 0xc8
 8001800:	2050      	movs	r0, #80	; 0x50
 8001802:	f00e ff42 	bl	801068a <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													BTN2_FILL_COLOUR,
													BTN2_BORDER_WEIGHT,
													BTN2_BORDER_COLOUR);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	BTN_WIDTH*2,
 8001806:	2300      	movs	r3, #0
 8001808:	9302      	str	r3, [sp, #8]
 800180a:	2302      	movs	r3, #2
 800180c:	9301      	str	r3, [sp, #4]
 800180e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001812:	9300      	str	r3, [sp, #0]
 8001814:	2328      	movs	r3, #40	; 0x28
 8001816:	2250      	movs	r2, #80	; 0x50
 8001818:	21c8      	movs	r1, #200	; 0xc8
 800181a:	20a0      	movs	r0, #160	; 0xa0
 800181c:	f00e ff35 	bl	801068a <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													BTN3_FILL_COLOUR,
													BTN3_BORDER_WEIGHT,
													BTN3_BORDER_COLOUR);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	BTN_WIDTH*3,
 8001820:	2300      	movs	r3, #0
 8001822:	9302      	str	r3, [sp, #8]
 8001824:	2302      	movs	r3, #2
 8001826:	9301      	str	r3, [sp, #4]
 8001828:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800182c:	9300      	str	r3, [sp, #0]
 800182e:	2328      	movs	r3, #40	; 0x28
 8001830:	2250      	movs	r2, #80	; 0x50
 8001832:	21c8      	movs	r1, #200	; 0xc8
 8001834:	20f0      	movs	r0, #240	; 0xf0
 8001836:	f00e ff28 	bl	801068a <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN4_FILL_COLOUR,
													BTN4_BORDER_WEIGHT,
													BTN4_BORDER_COLOUR);

	// resume diaplay interrupts
	HAL_TIM_Base_Start_IT(&htim15);
 800183a:	4803      	ldr	r0, [pc, #12]	; (8001848 <DM_RefreshScreen+0x88>)
 800183c:	f00c f838 	bl	800d8b0 <HAL_TIM_Base_Start_IT>


}
 8001840:	bf00      	nop
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	20002ab0 	.word	0x20002ab0

0800184c <DM_SetErrorDebugMsg>:
	ILI9341_Draw_Text("- SINE", 	10, 30, WHITE, 2, BLACK);
	*/
}

void DM_SetErrorDebugMsg(char* msg)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af02      	add	r7, sp, #8
 8001852:	6078      	str	r0, [r7, #4]
	snprintf(ErrorDebugMsg, sizeof(ErrorDebugMsg), "%s", msg);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	4a0a      	ldr	r2, [pc, #40]	; (8001880 <DM_SetErrorDebugMsg+0x34>)
 8001858:	212d      	movs	r1, #45	; 0x2d
 800185a:	480a      	ldr	r0, [pc, #40]	; (8001884 <DM_SetErrorDebugMsg+0x38>)
 800185c:	f010 fc34 	bl	80120c8 <sniprintf>
	ILI9341_Draw_Text(ErrorDebugMsg, 10, 190, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 8001860:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8001864:	9301      	str	r3, [sp, #4]
 8001866:	2301      	movs	r3, #1
 8001868:	9300      	str	r3, [sp, #0]
 800186a:	2300      	movs	r3, #0
 800186c:	22be      	movs	r2, #190	; 0xbe
 800186e:	210a      	movs	r1, #10
 8001870:	4804      	ldr	r0, [pc, #16]	; (8001884 <DM_SetErrorDebugMsg+0x38>)
 8001872:	f00f f86d 	bl	8010950 <ILI9341_Draw_Text>
}
 8001876:	bf00      	nop
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	080159a0 	.word	0x080159a0
 8001884:	200020a4 	.word	0x200020a4

08001888 <FreqMenu_DrawMenu>:
			Freq_Prescaler_Menu_State,
 *	@retval None
 *
 */
void FreqMenu_DrawMenu(eSystemState pMenu)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	4603      	mov	r3, r0
 8001890:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8001892:	79fb      	ldrb	r3, [r7, #7]
 8001894:	3b0a      	subs	r3, #10
 8001896:	2b04      	cmp	r3, #4
 8001898:	d81b      	bhi.n	80018d2 <FreqMenu_DrawMenu+0x4a>
 800189a:	a201      	add	r2, pc, #4	; (adr r2, 80018a0 <FreqMenu_DrawMenu+0x18>)
 800189c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018a0:	080018b5 	.word	0x080018b5
 80018a4:	080018bb 	.word	0x080018bb
 80018a8:	080018c1 	.word	0x080018c1
 80018ac:	080018c7 	.word	0x080018c7
 80018b0:	080018cd 	.word	0x080018cd
	{
		case Freq_Main_Menu_State:
			FreqMenu_DrawMainMenu();
 80018b4:	f000 f812 	bl	80018dc <FreqMenu_DrawMainMenu>
			break;
 80018b8:	e00c      	b.n	80018d4 <FreqMenu_DrawMenu+0x4c>
		case Freq_Preset_Menu_State:
			FreqMenu_DrawPresetMenu();
 80018ba:	f000 f859 	bl	8001970 <FreqMenu_DrawPresetMenu>
			break;
 80018be:	e009      	b.n	80018d4 <FreqMenu_DrawMenu+0x4c>
		case Freq_Adjust_Menu_State:
			FreqMenu_DrawAdjustMenu();
 80018c0:	f001 fb06 	bl	8002ed0 <FreqMenu_DrawAdjustMenu>
			break;
 80018c4:	e006      	b.n	80018d4 <FreqMenu_DrawMenu+0x4c>
		case Freq_Sweep_Menu_State:
			FreqMenu_DrawSweepMenu();
 80018c6:	f001 fb19 	bl	8002efc <FreqMenu_DrawSweepMenu>
			break;
 80018ca:	e003      	b.n	80018d4 <FreqMenu_DrawMenu+0x4c>
		case Freq_Prescaler_Menu_State:
			FreqMenu_DrawPrescalerMenu();
 80018cc:	f001 fd48 	bl	8003360 <FreqMenu_DrawPrescalerMenu>
			break;
 80018d0:	e000      	b.n	80018d4 <FreqMenu_DrawMenu+0x4c>
		default:
			break;
 80018d2:	bf00      	nop

	}
}
 80018d4:	bf00      	nop
 80018d6:	3708      	adds	r7, #8
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}

080018dc <FreqMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawMainMenu()
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af02      	add	r7, sp, #8
	// main
	ILI9341_Draw_Text("OUT->FREQ", 	5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 80018e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018e6:	9301      	str	r3, [sp, #4]
 80018e8:	2302      	movs	r3, #2
 80018ea:	9300      	str	r3, [sp, #0]
 80018ec:	2300      	movs	r3, #0
 80018ee:	220a      	movs	r2, #10
 80018f0:	2105      	movs	r1, #5
 80018f2:	481a      	ldr	r0, [pc, #104]	; (800195c <FreqMenu_DrawMainMenu+0x80>)
 80018f4:	f00f f82c 	bl	8010950 <ILI9341_Draw_Text>
//	ILI9341_Draw_Text("Select an option below", 	30, 165, BLACK, 2, WHITE);

	DM_DisplayFormattedOutput();
 80018f8:	f7ff faae 	bl	8000e58 <DM_DisplayFormattedOutput>

	// buttons
	ILI9341_Draw_Text("COARSE", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 80018fc:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001900:	9301      	str	r3, [sp, #4]
 8001902:	2302      	movs	r3, #2
 8001904:	9300      	str	r3, [sp, #0]
 8001906:	2300      	movs	r3, #0
 8001908:	22d2      	movs	r2, #210	; 0xd2
 800190a:	2105      	movs	r1, #5
 800190c:	4814      	ldr	r0, [pc, #80]	; (8001960 <FreqMenu_DrawMainMenu+0x84>)
 800190e:	f00f f81f 	bl	8010950 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("FINE", 97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8001912:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8001916:	9301      	str	r3, [sp, #4]
 8001918:	2302      	movs	r3, #2
 800191a:	9300      	str	r3, [sp, #0]
 800191c:	2300      	movs	r3, #0
 800191e:	22d2      	movs	r2, #210	; 0xd2
 8001920:	2161      	movs	r1, #97	; 0x61
 8001922:	4810      	ldr	r0, [pc, #64]	; (8001964 <FreqMenu_DrawMainMenu+0x88>)
 8001924:	f00f f814 	bl	8010950 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SWEEP",  172, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8001928:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800192c:	9301      	str	r3, [sp, #4]
 800192e:	2302      	movs	r3, #2
 8001930:	9300      	str	r3, [sp, #0]
 8001932:	2300      	movs	r3, #0
 8001934:	22d2      	movs	r2, #210	; 0xd2
 8001936:	21ac      	movs	r1, #172	; 0xac
 8001938:	480b      	ldr	r0, [pc, #44]	; (8001968 <FreqMenu_DrawMainMenu+0x8c>)
 800193a:	f00f f809 	bl	8010950 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("PSC", 260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 800193e:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8001942:	9301      	str	r3, [sp, #4]
 8001944:	2302      	movs	r3, #2
 8001946:	9300      	str	r3, [sp, #0]
 8001948:	2300      	movs	r3, #0
 800194a:	22d2      	movs	r2, #210	; 0xd2
 800194c:	f44f 7182 	mov.w	r1, #260	; 0x104
 8001950:	4806      	ldr	r0, [pc, #24]	; (800196c <FreqMenu_DrawMainMenu+0x90>)
 8001952:	f00e fffd 	bl	8010950 <ILI9341_Draw_Text>
}
 8001956:	bf00      	nop
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	080159a4 	.word	0x080159a4
 8001960:	080159b0 	.word	0x080159b0
 8001964:	080159b8 	.word	0x080159b8
 8001968:	080159c0 	.word	0x080159c0
 800196c:	080159c8 	.word	0x080159c8

08001970 <FreqMenu_DrawPresetMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawPresetMenu()
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b086      	sub	sp, #24
 8001974:	af02      	add	r7, sp, #8



	ILI9341_Draw_Text("OUT->FREQ->PRESET", 	5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8001976:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800197a:	9301      	str	r3, [sp, #4]
 800197c:	2302      	movs	r3, #2
 800197e:	9300      	str	r3, [sp, #0]
 8001980:	2300      	movs	r3, #0
 8001982:	220a      	movs	r2, #10
 8001984:	2105      	movs	r1, #5
 8001986:	4887      	ldr	r0, [pc, #540]	; (8001ba4 <FreqMenu_DrawPresetMenu+0x234>)
 8001988:	f00e ffe2 	bl	8010950 <ILI9341_Draw_Text>

	DM_DisplayInputTriggerStatus();
 800198c:	f7ff fa84 	bl	8000e98 <DM_DisplayInputTriggerStatus>

	uint8_t menu_pos_y1 = 40;
 8001990:	2328      	movs	r3, #40	; 0x28
 8001992:	73fb      	strb	r3, [r7, #15]
	uint8_t menu_pos_y2 = 60;
 8001994:	233c      	movs	r3, #60	; 0x3c
 8001996:	73bb      	strb	r3, [r7, #14]
	uint8_t menu_pos_y3 = 80;
 8001998:	2350      	movs	r3, #80	; 0x50
 800199a:	737b      	strb	r3, [r7, #13]
	uint8_t menu_pos_y4 = 100;
 800199c:	2364      	movs	r3, #100	; 0x64
 800199e:	733b      	strb	r3, [r7, #12]
	uint8_t menu_pos_y5 = 120;
 80019a0:	2378      	movs	r3, #120	; 0x78
 80019a2:	72fb      	strb	r3, [r7, #11]
	uint8_t menu_pos_y6 = 140;
 80019a4:	238c      	movs	r3, #140	; 0x8c
 80019a6:	72bb      	strb	r3, [r7, #10]
	uint8_t menu_pos_y7 = 160;
 80019a8:	23a0      	movs	r3, #160	; 0xa0
 80019aa:	727b      	strb	r3, [r7, #9]
	FreqProfile_t *pFreqPresetTmp =  FreqO_GetFPresetObject();
 80019ac:	f004 f816 	bl	80059dc <FreqO_GetFPresetObject>
 80019b0:	6078      	str	r0, [r7, #4]
	if(pFreqPresetTmp)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	f001 825d 	beq.w	8002e74 <FreqMenu_DrawPresetMenu+0x1504>
	{
		switch(pFreqPresetTmp->hertz)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	f240 22ee 	movw	r2, #750	; 0x2ee
 80019c2:	4293      	cmp	r3, r2
 80019c4:	f000 849a 	beq.w	80022fc <FreqMenu_DrawPresetMenu+0x98c>
 80019c8:	f240 22ee 	movw	r2, #750	; 0x2ee
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d817      	bhi.n	8001a00 <FreqMenu_DrawPresetMenu+0x90>
 80019d0:	2b32      	cmp	r3, #50	; 0x32
 80019d2:	f000 81b3 	beq.w	8001d3c <FreqMenu_DrawPresetMenu+0x3cc>
 80019d6:	2b32      	cmp	r3, #50	; 0x32
 80019d8:	d806      	bhi.n	80019e8 <FreqMenu_DrawPresetMenu+0x78>
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d038      	beq.n	8001a50 <FreqMenu_DrawPresetMenu+0xe0>
 80019de:	2b0a      	cmp	r3, #10
 80019e0:	f000 8102 	beq.w	8001be8 <FreqMenu_DrawPresetMenu+0x278>
	else
	{
		ILI9341_Draw_Text("FreqMenus::FreqMenu_DrawFreqPresetMenu() Error", 		5, 180, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
	}

}
 80019e4:	f001 ba52 	b.w	8002e8c <FreqMenu_DrawPresetMenu+0x151c>
		switch(pFreqPresetTmp->hertz)
 80019e8:	2bfa      	cmp	r3, #250	; 0xfa
 80019ea:	f000 8317 	beq.w	800201c <FreqMenu_DrawPresetMenu+0x6ac>
 80019ee:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80019f2:	f000 83d9 	beq.w	80021a8 <FreqMenu_DrawPresetMenu+0x838>
 80019f6:	2b64      	cmp	r3, #100	; 0x64
 80019f8:	f000 8266 	beq.w	8001ec8 <FreqMenu_DrawPresetMenu+0x558>
}
 80019fc:	f001 ba46 	b.w	8002e8c <FreqMenu_DrawPresetMenu+0x151c>
		switch(pFreqPresetTmp->hertz)
 8001a00:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8001a04:	4293      	cmp	r3, r2
 8001a06:	f000 8758 	beq.w	80028ba <FreqMenu_DrawPresetMenu+0xf4a>
 8001a0a:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d80f      	bhi.n	8001a32 <FreqMenu_DrawPresetMenu+0xc2>
 8001a12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a16:	4293      	cmp	r3, r2
 8001a18:	f000 85e0 	beq.w	80025dc <FreqMenu_DrawPresetMenu+0xc6c>
 8001a1c:	f242 7210 	movw	r2, #10000	; 0x2710
 8001a20:	4293      	cmp	r3, r2
 8001a22:	f000 86a1 	beq.w	8002768 <FreqMenu_DrawPresetMenu+0xdf8>
 8001a26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a2a:	f000 852d 	beq.w	8002488 <FreqMenu_DrawPresetMenu+0xb18>
}
 8001a2e:	f001 ba2d 	b.w	8002e8c <FreqMenu_DrawPresetMenu+0x151c>
		switch(pFreqPresetTmp->hertz)
 8001a32:	4a5d      	ldr	r2, [pc, #372]	; (8001ba8 <FreqMenu_DrawPresetMenu+0x238>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	f001 80ae 	beq.w	8002b96 <FreqMenu_DrawPresetMenu+0x1226>
 8001a3a:	4a5c      	ldr	r2, [pc, #368]	; (8001bac <FreqMenu_DrawPresetMenu+0x23c>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	f001 816f 	beq.w	8002d20 <FreqMenu_DrawPresetMenu+0x13b0>
 8001a42:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001a46:	4293      	cmp	r3, r2
 8001a48:	f000 87fc 	beq.w	8002a44 <FreqMenu_DrawPresetMenu+0x10d4>
}
 8001a4c:	f001 ba1e 	b.w	8002e8c <FreqMenu_DrawPresetMenu+0x151c>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001a50:	7bfb      	ldrb	r3, [r7, #15]
 8001a52:	b29a      	uxth	r2, r3
 8001a54:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001a58:	9301      	str	r3, [sp, #4]
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	9300      	str	r3, [sp, #0]
 8001a5e:	2300      	movs	r3, #0
 8001a60:	2105      	movs	r1, #5
 8001a62:	4853      	ldr	r0, [pc, #332]	; (8001bb0 <FreqMenu_DrawPresetMenu+0x240>)
 8001a64:	f00e ff74 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a68:	7bbb      	ldrb	r3, [r7, #14]
 8001a6a:	b29a      	uxth	r2, r3
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	9301      	str	r3, [sp, #4]
 8001a70:	2302      	movs	r3, #2
 8001a72:	9300      	str	r3, [sp, #0]
 8001a74:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a78:	2105      	movs	r1, #5
 8001a7a:	484e      	ldr	r0, [pc, #312]	; (8001bb4 <FreqMenu_DrawPresetMenu+0x244>)
 8001a7c:	f00e ff68 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a80:	7b7b      	ldrb	r3, [r7, #13]
 8001a82:	b29a      	uxth	r2, r3
 8001a84:	2300      	movs	r3, #0
 8001a86:	9301      	str	r3, [sp, #4]
 8001a88:	2302      	movs	r3, #2
 8001a8a:	9300      	str	r3, [sp, #0]
 8001a8c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a90:	2105      	movs	r1, #5
 8001a92:	4849      	ldr	r0, [pc, #292]	; (8001bb8 <FreqMenu_DrawPresetMenu+0x248>)
 8001a94:	f00e ff5c 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a98:	7b3b      	ldrb	r3, [r7, #12]
 8001a9a:	b29a      	uxth	r2, r3
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	9301      	str	r3, [sp, #4]
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	9300      	str	r3, [sp, #0]
 8001aa4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001aa8:	2105      	movs	r1, #5
 8001aaa:	4844      	ldr	r0, [pc, #272]	; (8001bbc <FreqMenu_DrawPresetMenu+0x24c>)
 8001aac:	f00e ff50 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ab0:	7afb      	ldrb	r3, [r7, #11]
 8001ab2:	b29a      	uxth	r2, r3
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	9301      	str	r3, [sp, #4]
 8001ab8:	2302      	movs	r3, #2
 8001aba:	9300      	str	r3, [sp, #0]
 8001abc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ac0:	2105      	movs	r1, #5
 8001ac2:	483f      	ldr	r0, [pc, #252]	; (8001bc0 <FreqMenu_DrawPresetMenu+0x250>)
 8001ac4:	f00e ff44 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ac8:	7abb      	ldrb	r3, [r7, #10]
 8001aca:	b29a      	uxth	r2, r3
 8001acc:	2300      	movs	r3, #0
 8001ace:	9301      	str	r3, [sp, #4]
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	9300      	str	r3, [sp, #0]
 8001ad4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ad8:	2105      	movs	r1, #5
 8001ada:	483a      	ldr	r0, [pc, #232]	; (8001bc4 <FreqMenu_DrawPresetMenu+0x254>)
 8001adc:	f00e ff38 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ae0:	7a7b      	ldrb	r3, [r7, #9]
 8001ae2:	b29a      	uxth	r2, r3
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	9301      	str	r3, [sp, #4]
 8001ae8:	2302      	movs	r3, #2
 8001aea:	9300      	str	r3, [sp, #0]
 8001aec:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001af0:	2105      	movs	r1, #5
 8001af2:	4835      	ldr	r0, [pc, #212]	; (8001bc8 <FreqMenu_DrawPresetMenu+0x258>)
 8001af4:	f00e ff2c 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001af8:	7bfb      	ldrb	r3, [r7, #15]
 8001afa:	b29a      	uxth	r2, r3
 8001afc:	2300      	movs	r3, #0
 8001afe:	9301      	str	r3, [sp, #4]
 8001b00:	2302      	movs	r3, #2
 8001b02:	9300      	str	r3, [sp, #0]
 8001b04:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b08:	2178      	movs	r1, #120	; 0x78
 8001b0a:	4830      	ldr	r0, [pc, #192]	; (8001bcc <FreqMenu_DrawPresetMenu+0x25c>)
 8001b0c:	f00e ff20 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b10:	7bbb      	ldrb	r3, [r7, #14]
 8001b12:	b29a      	uxth	r2, r3
 8001b14:	2300      	movs	r3, #0
 8001b16:	9301      	str	r3, [sp, #4]
 8001b18:	2302      	movs	r3, #2
 8001b1a:	9300      	str	r3, [sp, #0]
 8001b1c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b20:	2178      	movs	r1, #120	; 0x78
 8001b22:	482b      	ldr	r0, [pc, #172]	; (8001bd0 <FreqMenu_DrawPresetMenu+0x260>)
 8001b24:	f00e ff14 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b28:	7b7b      	ldrb	r3, [r7, #13]
 8001b2a:	b29a      	uxth	r2, r3
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	9301      	str	r3, [sp, #4]
 8001b30:	2302      	movs	r3, #2
 8001b32:	9300      	str	r3, [sp, #0]
 8001b34:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b38:	2178      	movs	r1, #120	; 0x78
 8001b3a:	4826      	ldr	r0, [pc, #152]	; (8001bd4 <FreqMenu_DrawPresetMenu+0x264>)
 8001b3c:	f00e ff08 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b40:	7b3b      	ldrb	r3, [r7, #12]
 8001b42:	b29a      	uxth	r2, r3
 8001b44:	2300      	movs	r3, #0
 8001b46:	9301      	str	r3, [sp, #4]
 8001b48:	2302      	movs	r3, #2
 8001b4a:	9300      	str	r3, [sp, #0]
 8001b4c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b50:	2178      	movs	r1, #120	; 0x78
 8001b52:	4821      	ldr	r0, [pc, #132]	; (8001bd8 <FreqMenu_DrawPresetMenu+0x268>)
 8001b54:	f00e fefc 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b58:	7afb      	ldrb	r3, [r7, #11]
 8001b5a:	b29a      	uxth	r2, r3
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	9301      	str	r3, [sp, #4]
 8001b60:	2302      	movs	r3, #2
 8001b62:	9300      	str	r3, [sp, #0]
 8001b64:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b68:	2178      	movs	r1, #120	; 0x78
 8001b6a:	481c      	ldr	r0, [pc, #112]	; (8001bdc <FreqMenu_DrawPresetMenu+0x26c>)
 8001b6c:	f00e fef0 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b70:	7abb      	ldrb	r3, [r7, #10]
 8001b72:	b29a      	uxth	r2, r3
 8001b74:	2300      	movs	r3, #0
 8001b76:	9301      	str	r3, [sp, #4]
 8001b78:	2302      	movs	r3, #2
 8001b7a:	9300      	str	r3, [sp, #0]
 8001b7c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b80:	2178      	movs	r1, #120	; 0x78
 8001b82:	4817      	ldr	r0, [pc, #92]	; (8001be0 <FreqMenu_DrawPresetMenu+0x270>)
 8001b84:	f00e fee4 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b88:	7a7b      	ldrb	r3, [r7, #9]
 8001b8a:	b29a      	uxth	r2, r3
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	9301      	str	r3, [sp, #4]
 8001b90:	2302      	movs	r3, #2
 8001b92:	9300      	str	r3, [sp, #0]
 8001b94:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b98:	2178      	movs	r1, #120	; 0x78
 8001b9a:	4812      	ldr	r0, [pc, #72]	; (8001be4 <FreqMenu_DrawPresetMenu+0x274>)
 8001b9c:	f00e fed8 	bl	8010950 <ILI9341_Draw_Text>
				break;
 8001ba0:	f001 b974 	b.w	8002e8c <FreqMenu_DrawPresetMenu+0x151c>
 8001ba4:	080159cc 	.word	0x080159cc
 8001ba8:	000124f8 	.word	0x000124f8
 8001bac:	000186a0 	.word	0x000186a0
 8001bb0:	080159e0 	.word	0x080159e0
 8001bb4:	080159e8 	.word	0x080159e8
 8001bb8:	080159f0 	.word	0x080159f0
 8001bbc:	080159f8 	.word	0x080159f8
 8001bc0:	08015a00 	.word	0x08015a00
 8001bc4:	08015a08 	.word	0x08015a08
 8001bc8:	08015a10 	.word	0x08015a10
 8001bcc:	08015a18 	.word	0x08015a18
 8001bd0:	08015a20 	.word	0x08015a20
 8001bd4:	08015a28 	.word	0x08015a28
 8001bd8:	08015a30 	.word	0x08015a30
 8001bdc:	08015a38 	.word	0x08015a38
 8001be0:	08015a40 	.word	0x08015a40
 8001be4:	08015a48 	.word	0x08015a48
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001be8:	7bfb      	ldrb	r3, [r7, #15]
 8001bea:	b29a      	uxth	r2, r3
 8001bec:	2300      	movs	r3, #0
 8001bee:	9301      	str	r3, [sp, #4]
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	9300      	str	r3, [sp, #0]
 8001bf4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001bf8:	2105      	movs	r1, #5
 8001bfa:	48a5      	ldr	r0, [pc, #660]	; (8001e90 <FreqMenu_DrawPresetMenu+0x520>)
 8001bfc:	f00e fea8 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001c00:	7bbb      	ldrb	r3, [r7, #14]
 8001c02:	b29a      	uxth	r2, r3
 8001c04:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001c08:	9301      	str	r3, [sp, #4]
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	9300      	str	r3, [sp, #0]
 8001c0e:	2300      	movs	r3, #0
 8001c10:	2105      	movs	r1, #5
 8001c12:	48a0      	ldr	r0, [pc, #640]	; (8001e94 <FreqMenu_DrawPresetMenu+0x524>)
 8001c14:	f00e fe9c 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c18:	7b7b      	ldrb	r3, [r7, #13]
 8001c1a:	b29a      	uxth	r2, r3
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	9301      	str	r3, [sp, #4]
 8001c20:	2302      	movs	r3, #2
 8001c22:	9300      	str	r3, [sp, #0]
 8001c24:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c28:	2105      	movs	r1, #5
 8001c2a:	489b      	ldr	r0, [pc, #620]	; (8001e98 <FreqMenu_DrawPresetMenu+0x528>)
 8001c2c:	f00e fe90 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c30:	7b3b      	ldrb	r3, [r7, #12]
 8001c32:	b29a      	uxth	r2, r3
 8001c34:	2300      	movs	r3, #0
 8001c36:	9301      	str	r3, [sp, #4]
 8001c38:	2302      	movs	r3, #2
 8001c3a:	9300      	str	r3, [sp, #0]
 8001c3c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c40:	2105      	movs	r1, #5
 8001c42:	4896      	ldr	r0, [pc, #600]	; (8001e9c <FreqMenu_DrawPresetMenu+0x52c>)
 8001c44:	f00e fe84 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c48:	7afb      	ldrb	r3, [r7, #11]
 8001c4a:	b29a      	uxth	r2, r3
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	9301      	str	r3, [sp, #4]
 8001c50:	2302      	movs	r3, #2
 8001c52:	9300      	str	r3, [sp, #0]
 8001c54:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c58:	2105      	movs	r1, #5
 8001c5a:	4891      	ldr	r0, [pc, #580]	; (8001ea0 <FreqMenu_DrawPresetMenu+0x530>)
 8001c5c:	f00e fe78 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c60:	7abb      	ldrb	r3, [r7, #10]
 8001c62:	b29a      	uxth	r2, r3
 8001c64:	2300      	movs	r3, #0
 8001c66:	9301      	str	r3, [sp, #4]
 8001c68:	2302      	movs	r3, #2
 8001c6a:	9300      	str	r3, [sp, #0]
 8001c6c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c70:	2105      	movs	r1, #5
 8001c72:	488c      	ldr	r0, [pc, #560]	; (8001ea4 <FreqMenu_DrawPresetMenu+0x534>)
 8001c74:	f00e fe6c 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c78:	7a7b      	ldrb	r3, [r7, #9]
 8001c7a:	b29a      	uxth	r2, r3
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	9301      	str	r3, [sp, #4]
 8001c80:	2302      	movs	r3, #2
 8001c82:	9300      	str	r3, [sp, #0]
 8001c84:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c88:	2105      	movs	r1, #5
 8001c8a:	4887      	ldr	r0, [pc, #540]	; (8001ea8 <FreqMenu_DrawPresetMenu+0x538>)
 8001c8c:	f00e fe60 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c90:	7bfb      	ldrb	r3, [r7, #15]
 8001c92:	b29a      	uxth	r2, r3
 8001c94:	2300      	movs	r3, #0
 8001c96:	9301      	str	r3, [sp, #4]
 8001c98:	2302      	movs	r3, #2
 8001c9a:	9300      	str	r3, [sp, #0]
 8001c9c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ca0:	2178      	movs	r1, #120	; 0x78
 8001ca2:	4882      	ldr	r0, [pc, #520]	; (8001eac <FreqMenu_DrawPresetMenu+0x53c>)
 8001ca4:	f00e fe54 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ca8:	7bbb      	ldrb	r3, [r7, #14]
 8001caa:	b29a      	uxth	r2, r3
 8001cac:	2300      	movs	r3, #0
 8001cae:	9301      	str	r3, [sp, #4]
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	9300      	str	r3, [sp, #0]
 8001cb4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001cb8:	2178      	movs	r1, #120	; 0x78
 8001cba:	487d      	ldr	r0, [pc, #500]	; (8001eb0 <FreqMenu_DrawPresetMenu+0x540>)
 8001cbc:	f00e fe48 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001cc0:	7b7b      	ldrb	r3, [r7, #13]
 8001cc2:	b29a      	uxth	r2, r3
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	9301      	str	r3, [sp, #4]
 8001cc8:	2302      	movs	r3, #2
 8001cca:	9300      	str	r3, [sp, #0]
 8001ccc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001cd0:	2178      	movs	r1, #120	; 0x78
 8001cd2:	4878      	ldr	r0, [pc, #480]	; (8001eb4 <FreqMenu_DrawPresetMenu+0x544>)
 8001cd4:	f00e fe3c 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001cd8:	7b3b      	ldrb	r3, [r7, #12]
 8001cda:	b29a      	uxth	r2, r3
 8001cdc:	2300      	movs	r3, #0
 8001cde:	9301      	str	r3, [sp, #4]
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	9300      	str	r3, [sp, #0]
 8001ce4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ce8:	2178      	movs	r1, #120	; 0x78
 8001cea:	4873      	ldr	r0, [pc, #460]	; (8001eb8 <FreqMenu_DrawPresetMenu+0x548>)
 8001cec:	f00e fe30 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001cf0:	7afb      	ldrb	r3, [r7, #11]
 8001cf2:	b29a      	uxth	r2, r3
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	9301      	str	r3, [sp, #4]
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	9300      	str	r3, [sp, #0]
 8001cfc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d00:	2178      	movs	r1, #120	; 0x78
 8001d02:	486e      	ldr	r0, [pc, #440]	; (8001ebc <FreqMenu_DrawPresetMenu+0x54c>)
 8001d04:	f00e fe24 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d08:	7abb      	ldrb	r3, [r7, #10]
 8001d0a:	b29a      	uxth	r2, r3
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	9301      	str	r3, [sp, #4]
 8001d10:	2302      	movs	r3, #2
 8001d12:	9300      	str	r3, [sp, #0]
 8001d14:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d18:	2178      	movs	r1, #120	; 0x78
 8001d1a:	4869      	ldr	r0, [pc, #420]	; (8001ec0 <FreqMenu_DrawPresetMenu+0x550>)
 8001d1c:	f00e fe18 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d20:	7a7b      	ldrb	r3, [r7, #9]
 8001d22:	b29a      	uxth	r2, r3
 8001d24:	2300      	movs	r3, #0
 8001d26:	9301      	str	r3, [sp, #4]
 8001d28:	2302      	movs	r3, #2
 8001d2a:	9300      	str	r3, [sp, #0]
 8001d2c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d30:	2178      	movs	r1, #120	; 0x78
 8001d32:	4864      	ldr	r0, [pc, #400]	; (8001ec4 <FreqMenu_DrawPresetMenu+0x554>)
 8001d34:	f00e fe0c 	bl	8010950 <ILI9341_Draw_Text>
				break;
 8001d38:	f001 b8a8 	b.w	8002e8c <FreqMenu_DrawPresetMenu+0x151c>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d3c:	7bfb      	ldrb	r3, [r7, #15]
 8001d3e:	b29a      	uxth	r2, r3
 8001d40:	2300      	movs	r3, #0
 8001d42:	9301      	str	r3, [sp, #4]
 8001d44:	2302      	movs	r3, #2
 8001d46:	9300      	str	r3, [sp, #0]
 8001d48:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d4c:	2105      	movs	r1, #5
 8001d4e:	4850      	ldr	r0, [pc, #320]	; (8001e90 <FreqMenu_DrawPresetMenu+0x520>)
 8001d50:	f00e fdfe 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d54:	7bbb      	ldrb	r3, [r7, #14]
 8001d56:	b29a      	uxth	r2, r3
 8001d58:	2300      	movs	r3, #0
 8001d5a:	9301      	str	r3, [sp, #4]
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	9300      	str	r3, [sp, #0]
 8001d60:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d64:	2105      	movs	r1, #5
 8001d66:	484b      	ldr	r0, [pc, #300]	; (8001e94 <FreqMenu_DrawPresetMenu+0x524>)
 8001d68:	f00e fdf2 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001d6c:	7b7b      	ldrb	r3, [r7, #13]
 8001d6e:	b29a      	uxth	r2, r3
 8001d70:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001d74:	9301      	str	r3, [sp, #4]
 8001d76:	2302      	movs	r3, #2
 8001d78:	9300      	str	r3, [sp, #0]
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	2105      	movs	r1, #5
 8001d7e:	4846      	ldr	r0, [pc, #280]	; (8001e98 <FreqMenu_DrawPresetMenu+0x528>)
 8001d80:	f00e fde6 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d84:	7b3b      	ldrb	r3, [r7, #12]
 8001d86:	b29a      	uxth	r2, r3
 8001d88:	2300      	movs	r3, #0
 8001d8a:	9301      	str	r3, [sp, #4]
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	9300      	str	r3, [sp, #0]
 8001d90:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d94:	2105      	movs	r1, #5
 8001d96:	4841      	ldr	r0, [pc, #260]	; (8001e9c <FreqMenu_DrawPresetMenu+0x52c>)
 8001d98:	f00e fdda 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d9c:	7afb      	ldrb	r3, [r7, #11]
 8001d9e:	b29a      	uxth	r2, r3
 8001da0:	2300      	movs	r3, #0
 8001da2:	9301      	str	r3, [sp, #4]
 8001da4:	2302      	movs	r3, #2
 8001da6:	9300      	str	r3, [sp, #0]
 8001da8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001dac:	2105      	movs	r1, #5
 8001dae:	483c      	ldr	r0, [pc, #240]	; (8001ea0 <FreqMenu_DrawPresetMenu+0x530>)
 8001db0:	f00e fdce 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001db4:	7abb      	ldrb	r3, [r7, #10]
 8001db6:	b29a      	uxth	r2, r3
 8001db8:	2300      	movs	r3, #0
 8001dba:	9301      	str	r3, [sp, #4]
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	9300      	str	r3, [sp, #0]
 8001dc0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001dc4:	2105      	movs	r1, #5
 8001dc6:	4837      	ldr	r0, [pc, #220]	; (8001ea4 <FreqMenu_DrawPresetMenu+0x534>)
 8001dc8:	f00e fdc2 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001dcc:	7a7b      	ldrb	r3, [r7, #9]
 8001dce:	b29a      	uxth	r2, r3
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	9301      	str	r3, [sp, #4]
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	9300      	str	r3, [sp, #0]
 8001dd8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ddc:	2105      	movs	r1, #5
 8001dde:	4832      	ldr	r0, [pc, #200]	; (8001ea8 <FreqMenu_DrawPresetMenu+0x538>)
 8001de0:	f00e fdb6 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001de4:	7bfb      	ldrb	r3, [r7, #15]
 8001de6:	b29a      	uxth	r2, r3
 8001de8:	2300      	movs	r3, #0
 8001dea:	9301      	str	r3, [sp, #4]
 8001dec:	2302      	movs	r3, #2
 8001dee:	9300      	str	r3, [sp, #0]
 8001df0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001df4:	2178      	movs	r1, #120	; 0x78
 8001df6:	482d      	ldr	r0, [pc, #180]	; (8001eac <FreqMenu_DrawPresetMenu+0x53c>)
 8001df8:	f00e fdaa 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001dfc:	7bbb      	ldrb	r3, [r7, #14]
 8001dfe:	b29a      	uxth	r2, r3
 8001e00:	2300      	movs	r3, #0
 8001e02:	9301      	str	r3, [sp, #4]
 8001e04:	2302      	movs	r3, #2
 8001e06:	9300      	str	r3, [sp, #0]
 8001e08:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e0c:	2178      	movs	r1, #120	; 0x78
 8001e0e:	4828      	ldr	r0, [pc, #160]	; (8001eb0 <FreqMenu_DrawPresetMenu+0x540>)
 8001e10:	f00e fd9e 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e14:	7b7b      	ldrb	r3, [r7, #13]
 8001e16:	b29a      	uxth	r2, r3
 8001e18:	2300      	movs	r3, #0
 8001e1a:	9301      	str	r3, [sp, #4]
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	9300      	str	r3, [sp, #0]
 8001e20:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e24:	2178      	movs	r1, #120	; 0x78
 8001e26:	4823      	ldr	r0, [pc, #140]	; (8001eb4 <FreqMenu_DrawPresetMenu+0x544>)
 8001e28:	f00e fd92 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e2c:	7b3b      	ldrb	r3, [r7, #12]
 8001e2e:	b29a      	uxth	r2, r3
 8001e30:	2300      	movs	r3, #0
 8001e32:	9301      	str	r3, [sp, #4]
 8001e34:	2302      	movs	r3, #2
 8001e36:	9300      	str	r3, [sp, #0]
 8001e38:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e3c:	2178      	movs	r1, #120	; 0x78
 8001e3e:	481e      	ldr	r0, [pc, #120]	; (8001eb8 <FreqMenu_DrawPresetMenu+0x548>)
 8001e40:	f00e fd86 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e44:	7afb      	ldrb	r3, [r7, #11]
 8001e46:	b29a      	uxth	r2, r3
 8001e48:	2300      	movs	r3, #0
 8001e4a:	9301      	str	r3, [sp, #4]
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	9300      	str	r3, [sp, #0]
 8001e50:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e54:	2178      	movs	r1, #120	; 0x78
 8001e56:	4819      	ldr	r0, [pc, #100]	; (8001ebc <FreqMenu_DrawPresetMenu+0x54c>)
 8001e58:	f00e fd7a 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e5c:	7abb      	ldrb	r3, [r7, #10]
 8001e5e:	b29a      	uxth	r2, r3
 8001e60:	2300      	movs	r3, #0
 8001e62:	9301      	str	r3, [sp, #4]
 8001e64:	2302      	movs	r3, #2
 8001e66:	9300      	str	r3, [sp, #0]
 8001e68:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e6c:	2178      	movs	r1, #120	; 0x78
 8001e6e:	4814      	ldr	r0, [pc, #80]	; (8001ec0 <FreqMenu_DrawPresetMenu+0x550>)
 8001e70:	f00e fd6e 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e74:	7a7b      	ldrb	r3, [r7, #9]
 8001e76:	b29a      	uxth	r2, r3
 8001e78:	2300      	movs	r3, #0
 8001e7a:	9301      	str	r3, [sp, #4]
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	9300      	str	r3, [sp, #0]
 8001e80:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e84:	2178      	movs	r1, #120	; 0x78
 8001e86:	480f      	ldr	r0, [pc, #60]	; (8001ec4 <FreqMenu_DrawPresetMenu+0x554>)
 8001e88:	f00e fd62 	bl	8010950 <ILI9341_Draw_Text>
				break;
 8001e8c:	f000 bffe 	b.w	8002e8c <FreqMenu_DrawPresetMenu+0x151c>
 8001e90:	080159e0 	.word	0x080159e0
 8001e94:	080159e8 	.word	0x080159e8
 8001e98:	080159f0 	.word	0x080159f0
 8001e9c:	080159f8 	.word	0x080159f8
 8001ea0:	08015a00 	.word	0x08015a00
 8001ea4:	08015a08 	.word	0x08015a08
 8001ea8:	08015a10 	.word	0x08015a10
 8001eac:	08015a18 	.word	0x08015a18
 8001eb0:	08015a20 	.word	0x08015a20
 8001eb4:	08015a28 	.word	0x08015a28
 8001eb8:	08015a30 	.word	0x08015a30
 8001ebc:	08015a38 	.word	0x08015a38
 8001ec0:	08015a40 	.word	0x08015a40
 8001ec4:	08015a48 	.word	0x08015a48
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ec8:	7bfb      	ldrb	r3, [r7, #15]
 8001eca:	b29a      	uxth	r2, r3
 8001ecc:	2300      	movs	r3, #0
 8001ece:	9301      	str	r3, [sp, #4]
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	9300      	str	r3, [sp, #0]
 8001ed4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ed8:	2105      	movs	r1, #5
 8001eda:	48a5      	ldr	r0, [pc, #660]	; (8002170 <FreqMenu_DrawPresetMenu+0x800>)
 8001edc:	f00e fd38 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ee0:	7bbb      	ldrb	r3, [r7, #14]
 8001ee2:	b29a      	uxth	r2, r3
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	9301      	str	r3, [sp, #4]
 8001ee8:	2302      	movs	r3, #2
 8001eea:	9300      	str	r3, [sp, #0]
 8001eec:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ef0:	2105      	movs	r1, #5
 8001ef2:	48a0      	ldr	r0, [pc, #640]	; (8002174 <FreqMenu_DrawPresetMenu+0x804>)
 8001ef4:	f00e fd2c 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ef8:	7b7b      	ldrb	r3, [r7, #13]
 8001efa:	b29a      	uxth	r2, r3
 8001efc:	2300      	movs	r3, #0
 8001efe:	9301      	str	r3, [sp, #4]
 8001f00:	2302      	movs	r3, #2
 8001f02:	9300      	str	r3, [sp, #0]
 8001f04:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f08:	2105      	movs	r1, #5
 8001f0a:	489b      	ldr	r0, [pc, #620]	; (8002178 <FreqMenu_DrawPresetMenu+0x808>)
 8001f0c:	f00e fd20 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001f10:	7b3b      	ldrb	r3, [r7, #12]
 8001f12:	b29a      	uxth	r2, r3
 8001f14:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001f18:	9301      	str	r3, [sp, #4]
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	9300      	str	r3, [sp, #0]
 8001f1e:	2300      	movs	r3, #0
 8001f20:	2105      	movs	r1, #5
 8001f22:	4896      	ldr	r0, [pc, #600]	; (800217c <FreqMenu_DrawPresetMenu+0x80c>)
 8001f24:	f00e fd14 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f28:	7afb      	ldrb	r3, [r7, #11]
 8001f2a:	b29a      	uxth	r2, r3
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	9301      	str	r3, [sp, #4]
 8001f30:	2302      	movs	r3, #2
 8001f32:	9300      	str	r3, [sp, #0]
 8001f34:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f38:	2105      	movs	r1, #5
 8001f3a:	4891      	ldr	r0, [pc, #580]	; (8002180 <FreqMenu_DrawPresetMenu+0x810>)
 8001f3c:	f00e fd08 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f40:	7abb      	ldrb	r3, [r7, #10]
 8001f42:	b29a      	uxth	r2, r3
 8001f44:	2300      	movs	r3, #0
 8001f46:	9301      	str	r3, [sp, #4]
 8001f48:	2302      	movs	r3, #2
 8001f4a:	9300      	str	r3, [sp, #0]
 8001f4c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f50:	2105      	movs	r1, #5
 8001f52:	488c      	ldr	r0, [pc, #560]	; (8002184 <FreqMenu_DrawPresetMenu+0x814>)
 8001f54:	f00e fcfc 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f58:	7a7b      	ldrb	r3, [r7, #9]
 8001f5a:	b29a      	uxth	r2, r3
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	9301      	str	r3, [sp, #4]
 8001f60:	2302      	movs	r3, #2
 8001f62:	9300      	str	r3, [sp, #0]
 8001f64:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f68:	2105      	movs	r1, #5
 8001f6a:	4887      	ldr	r0, [pc, #540]	; (8002188 <FreqMenu_DrawPresetMenu+0x818>)
 8001f6c:	f00e fcf0 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f70:	7bfb      	ldrb	r3, [r7, #15]
 8001f72:	b29a      	uxth	r2, r3
 8001f74:	2300      	movs	r3, #0
 8001f76:	9301      	str	r3, [sp, #4]
 8001f78:	2302      	movs	r3, #2
 8001f7a:	9300      	str	r3, [sp, #0]
 8001f7c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f80:	2178      	movs	r1, #120	; 0x78
 8001f82:	4882      	ldr	r0, [pc, #520]	; (800218c <FreqMenu_DrawPresetMenu+0x81c>)
 8001f84:	f00e fce4 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f88:	7bbb      	ldrb	r3, [r7, #14]
 8001f8a:	b29a      	uxth	r2, r3
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	9301      	str	r3, [sp, #4]
 8001f90:	2302      	movs	r3, #2
 8001f92:	9300      	str	r3, [sp, #0]
 8001f94:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f98:	2178      	movs	r1, #120	; 0x78
 8001f9a:	487d      	ldr	r0, [pc, #500]	; (8002190 <FreqMenu_DrawPresetMenu+0x820>)
 8001f9c:	f00e fcd8 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001fa0:	7b7b      	ldrb	r3, [r7, #13]
 8001fa2:	b29a      	uxth	r2, r3
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	9301      	str	r3, [sp, #4]
 8001fa8:	2302      	movs	r3, #2
 8001faa:	9300      	str	r3, [sp, #0]
 8001fac:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001fb0:	2178      	movs	r1, #120	; 0x78
 8001fb2:	4878      	ldr	r0, [pc, #480]	; (8002194 <FreqMenu_DrawPresetMenu+0x824>)
 8001fb4:	f00e fccc 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001fb8:	7b3b      	ldrb	r3, [r7, #12]
 8001fba:	b29a      	uxth	r2, r3
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	9301      	str	r3, [sp, #4]
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	9300      	str	r3, [sp, #0]
 8001fc4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001fc8:	2178      	movs	r1, #120	; 0x78
 8001fca:	4873      	ldr	r0, [pc, #460]	; (8002198 <FreqMenu_DrawPresetMenu+0x828>)
 8001fcc:	f00e fcc0 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001fd0:	7afb      	ldrb	r3, [r7, #11]
 8001fd2:	b29a      	uxth	r2, r3
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	9301      	str	r3, [sp, #4]
 8001fd8:	2302      	movs	r3, #2
 8001fda:	9300      	str	r3, [sp, #0]
 8001fdc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001fe0:	2178      	movs	r1, #120	; 0x78
 8001fe2:	486e      	ldr	r0, [pc, #440]	; (800219c <FreqMenu_DrawPresetMenu+0x82c>)
 8001fe4:	f00e fcb4 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001fe8:	7abb      	ldrb	r3, [r7, #10]
 8001fea:	b29a      	uxth	r2, r3
 8001fec:	2300      	movs	r3, #0
 8001fee:	9301      	str	r3, [sp, #4]
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	9300      	str	r3, [sp, #0]
 8001ff4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ff8:	2178      	movs	r1, #120	; 0x78
 8001ffa:	4869      	ldr	r0, [pc, #420]	; (80021a0 <FreqMenu_DrawPresetMenu+0x830>)
 8001ffc:	f00e fca8 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002000:	7a7b      	ldrb	r3, [r7, #9]
 8002002:	b29a      	uxth	r2, r3
 8002004:	2300      	movs	r3, #0
 8002006:	9301      	str	r3, [sp, #4]
 8002008:	2302      	movs	r3, #2
 800200a:	9300      	str	r3, [sp, #0]
 800200c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002010:	2178      	movs	r1, #120	; 0x78
 8002012:	4864      	ldr	r0, [pc, #400]	; (80021a4 <FreqMenu_DrawPresetMenu+0x834>)
 8002014:	f00e fc9c 	bl	8010950 <ILI9341_Draw_Text>
				break;
 8002018:	f000 bf38 	b.w	8002e8c <FreqMenu_DrawPresetMenu+0x151c>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800201c:	7bfb      	ldrb	r3, [r7, #15]
 800201e:	b29a      	uxth	r2, r3
 8002020:	2300      	movs	r3, #0
 8002022:	9301      	str	r3, [sp, #4]
 8002024:	2302      	movs	r3, #2
 8002026:	9300      	str	r3, [sp, #0]
 8002028:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800202c:	2105      	movs	r1, #5
 800202e:	4850      	ldr	r0, [pc, #320]	; (8002170 <FreqMenu_DrawPresetMenu+0x800>)
 8002030:	f00e fc8e 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002034:	7bbb      	ldrb	r3, [r7, #14]
 8002036:	b29a      	uxth	r2, r3
 8002038:	2300      	movs	r3, #0
 800203a:	9301      	str	r3, [sp, #4]
 800203c:	2302      	movs	r3, #2
 800203e:	9300      	str	r3, [sp, #0]
 8002040:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002044:	2105      	movs	r1, #5
 8002046:	484b      	ldr	r0, [pc, #300]	; (8002174 <FreqMenu_DrawPresetMenu+0x804>)
 8002048:	f00e fc82 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800204c:	7b7b      	ldrb	r3, [r7, #13]
 800204e:	b29a      	uxth	r2, r3
 8002050:	2300      	movs	r3, #0
 8002052:	9301      	str	r3, [sp, #4]
 8002054:	2302      	movs	r3, #2
 8002056:	9300      	str	r3, [sp, #0]
 8002058:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800205c:	2105      	movs	r1, #5
 800205e:	4846      	ldr	r0, [pc, #280]	; (8002178 <FreqMenu_DrawPresetMenu+0x808>)
 8002060:	f00e fc76 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002064:	7b3b      	ldrb	r3, [r7, #12]
 8002066:	b29a      	uxth	r2, r3
 8002068:	2300      	movs	r3, #0
 800206a:	9301      	str	r3, [sp, #4]
 800206c:	2302      	movs	r3, #2
 800206e:	9300      	str	r3, [sp, #0]
 8002070:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002074:	2105      	movs	r1, #5
 8002076:	4841      	ldr	r0, [pc, #260]	; (800217c <FreqMenu_DrawPresetMenu+0x80c>)
 8002078:	f00e fc6a 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 800207c:	7afb      	ldrb	r3, [r7, #11]
 800207e:	b29a      	uxth	r2, r3
 8002080:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002084:	9301      	str	r3, [sp, #4]
 8002086:	2302      	movs	r3, #2
 8002088:	9300      	str	r3, [sp, #0]
 800208a:	2300      	movs	r3, #0
 800208c:	2105      	movs	r1, #5
 800208e:	483c      	ldr	r0, [pc, #240]	; (8002180 <FreqMenu_DrawPresetMenu+0x810>)
 8002090:	f00e fc5e 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002094:	7abb      	ldrb	r3, [r7, #10]
 8002096:	b29a      	uxth	r2, r3
 8002098:	2300      	movs	r3, #0
 800209a:	9301      	str	r3, [sp, #4]
 800209c:	2302      	movs	r3, #2
 800209e:	9300      	str	r3, [sp, #0]
 80020a0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80020a4:	2105      	movs	r1, #5
 80020a6:	4837      	ldr	r0, [pc, #220]	; (8002184 <FreqMenu_DrawPresetMenu+0x814>)
 80020a8:	f00e fc52 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80020ac:	7a7b      	ldrb	r3, [r7, #9]
 80020ae:	b29a      	uxth	r2, r3
 80020b0:	2300      	movs	r3, #0
 80020b2:	9301      	str	r3, [sp, #4]
 80020b4:	2302      	movs	r3, #2
 80020b6:	9300      	str	r3, [sp, #0]
 80020b8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80020bc:	2105      	movs	r1, #5
 80020be:	4832      	ldr	r0, [pc, #200]	; (8002188 <FreqMenu_DrawPresetMenu+0x818>)
 80020c0:	f00e fc46 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80020c4:	7bfb      	ldrb	r3, [r7, #15]
 80020c6:	b29a      	uxth	r2, r3
 80020c8:	2300      	movs	r3, #0
 80020ca:	9301      	str	r3, [sp, #4]
 80020cc:	2302      	movs	r3, #2
 80020ce:	9300      	str	r3, [sp, #0]
 80020d0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80020d4:	2178      	movs	r1, #120	; 0x78
 80020d6:	482d      	ldr	r0, [pc, #180]	; (800218c <FreqMenu_DrawPresetMenu+0x81c>)
 80020d8:	f00e fc3a 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80020dc:	7bbb      	ldrb	r3, [r7, #14]
 80020de:	b29a      	uxth	r2, r3
 80020e0:	2300      	movs	r3, #0
 80020e2:	9301      	str	r3, [sp, #4]
 80020e4:	2302      	movs	r3, #2
 80020e6:	9300      	str	r3, [sp, #0]
 80020e8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80020ec:	2178      	movs	r1, #120	; 0x78
 80020ee:	4828      	ldr	r0, [pc, #160]	; (8002190 <FreqMenu_DrawPresetMenu+0x820>)
 80020f0:	f00e fc2e 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80020f4:	7b7b      	ldrb	r3, [r7, #13]
 80020f6:	b29a      	uxth	r2, r3
 80020f8:	2300      	movs	r3, #0
 80020fa:	9301      	str	r3, [sp, #4]
 80020fc:	2302      	movs	r3, #2
 80020fe:	9300      	str	r3, [sp, #0]
 8002100:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002104:	2178      	movs	r1, #120	; 0x78
 8002106:	4823      	ldr	r0, [pc, #140]	; (8002194 <FreqMenu_DrawPresetMenu+0x824>)
 8002108:	f00e fc22 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800210c:	7b3b      	ldrb	r3, [r7, #12]
 800210e:	b29a      	uxth	r2, r3
 8002110:	2300      	movs	r3, #0
 8002112:	9301      	str	r3, [sp, #4]
 8002114:	2302      	movs	r3, #2
 8002116:	9300      	str	r3, [sp, #0]
 8002118:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800211c:	2178      	movs	r1, #120	; 0x78
 800211e:	481e      	ldr	r0, [pc, #120]	; (8002198 <FreqMenu_DrawPresetMenu+0x828>)
 8002120:	f00e fc16 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002124:	7afb      	ldrb	r3, [r7, #11]
 8002126:	b29a      	uxth	r2, r3
 8002128:	2300      	movs	r3, #0
 800212a:	9301      	str	r3, [sp, #4]
 800212c:	2302      	movs	r3, #2
 800212e:	9300      	str	r3, [sp, #0]
 8002130:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002134:	2178      	movs	r1, #120	; 0x78
 8002136:	4819      	ldr	r0, [pc, #100]	; (800219c <FreqMenu_DrawPresetMenu+0x82c>)
 8002138:	f00e fc0a 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800213c:	7abb      	ldrb	r3, [r7, #10]
 800213e:	b29a      	uxth	r2, r3
 8002140:	2300      	movs	r3, #0
 8002142:	9301      	str	r3, [sp, #4]
 8002144:	2302      	movs	r3, #2
 8002146:	9300      	str	r3, [sp, #0]
 8002148:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800214c:	2178      	movs	r1, #120	; 0x78
 800214e:	4814      	ldr	r0, [pc, #80]	; (80021a0 <FreqMenu_DrawPresetMenu+0x830>)
 8002150:	f00e fbfe 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002154:	7a7b      	ldrb	r3, [r7, #9]
 8002156:	b29a      	uxth	r2, r3
 8002158:	2300      	movs	r3, #0
 800215a:	9301      	str	r3, [sp, #4]
 800215c:	2302      	movs	r3, #2
 800215e:	9300      	str	r3, [sp, #0]
 8002160:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002164:	2178      	movs	r1, #120	; 0x78
 8002166:	480f      	ldr	r0, [pc, #60]	; (80021a4 <FreqMenu_DrawPresetMenu+0x834>)
 8002168:	f00e fbf2 	bl	8010950 <ILI9341_Draw_Text>
				break;
 800216c:	f000 be8e 	b.w	8002e8c <FreqMenu_DrawPresetMenu+0x151c>
 8002170:	080159e0 	.word	0x080159e0
 8002174:	080159e8 	.word	0x080159e8
 8002178:	080159f0 	.word	0x080159f0
 800217c:	080159f8 	.word	0x080159f8
 8002180:	08015a00 	.word	0x08015a00
 8002184:	08015a08 	.word	0x08015a08
 8002188:	08015a10 	.word	0x08015a10
 800218c:	08015a18 	.word	0x08015a18
 8002190:	08015a20 	.word	0x08015a20
 8002194:	08015a28 	.word	0x08015a28
 8002198:	08015a30 	.word	0x08015a30
 800219c:	08015a38 	.word	0x08015a38
 80021a0:	08015a40 	.word	0x08015a40
 80021a4:	08015a48 	.word	0x08015a48
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80021a8:	7bfb      	ldrb	r3, [r7, #15]
 80021aa:	b29a      	uxth	r2, r3
 80021ac:	2300      	movs	r3, #0
 80021ae:	9301      	str	r3, [sp, #4]
 80021b0:	2302      	movs	r3, #2
 80021b2:	9300      	str	r3, [sp, #0]
 80021b4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80021b8:	2105      	movs	r1, #5
 80021ba:	48a5      	ldr	r0, [pc, #660]	; (8002450 <FreqMenu_DrawPresetMenu+0xae0>)
 80021bc:	f00e fbc8 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80021c0:	7bbb      	ldrb	r3, [r7, #14]
 80021c2:	b29a      	uxth	r2, r3
 80021c4:	2300      	movs	r3, #0
 80021c6:	9301      	str	r3, [sp, #4]
 80021c8:	2302      	movs	r3, #2
 80021ca:	9300      	str	r3, [sp, #0]
 80021cc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80021d0:	2105      	movs	r1, #5
 80021d2:	48a0      	ldr	r0, [pc, #640]	; (8002454 <FreqMenu_DrawPresetMenu+0xae4>)
 80021d4:	f00e fbbc 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80021d8:	7b7b      	ldrb	r3, [r7, #13]
 80021da:	b29a      	uxth	r2, r3
 80021dc:	2300      	movs	r3, #0
 80021de:	9301      	str	r3, [sp, #4]
 80021e0:	2302      	movs	r3, #2
 80021e2:	9300      	str	r3, [sp, #0]
 80021e4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80021e8:	2105      	movs	r1, #5
 80021ea:	489b      	ldr	r0, [pc, #620]	; (8002458 <FreqMenu_DrawPresetMenu+0xae8>)
 80021ec:	f00e fbb0 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80021f0:	7b3b      	ldrb	r3, [r7, #12]
 80021f2:	b29a      	uxth	r2, r3
 80021f4:	2300      	movs	r3, #0
 80021f6:	9301      	str	r3, [sp, #4]
 80021f8:	2302      	movs	r3, #2
 80021fa:	9300      	str	r3, [sp, #0]
 80021fc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002200:	2105      	movs	r1, #5
 8002202:	4896      	ldr	r0, [pc, #600]	; (800245c <FreqMenu_DrawPresetMenu+0xaec>)
 8002204:	f00e fba4 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002208:	7afb      	ldrb	r3, [r7, #11]
 800220a:	b29a      	uxth	r2, r3
 800220c:	2300      	movs	r3, #0
 800220e:	9301      	str	r3, [sp, #4]
 8002210:	2302      	movs	r3, #2
 8002212:	9300      	str	r3, [sp, #0]
 8002214:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002218:	2105      	movs	r1, #5
 800221a:	4891      	ldr	r0, [pc, #580]	; (8002460 <FreqMenu_DrawPresetMenu+0xaf0>)
 800221c:	f00e fb98 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002220:	7abb      	ldrb	r3, [r7, #10]
 8002222:	b29a      	uxth	r2, r3
 8002224:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002228:	9301      	str	r3, [sp, #4]
 800222a:	2302      	movs	r3, #2
 800222c:	9300      	str	r3, [sp, #0]
 800222e:	2300      	movs	r3, #0
 8002230:	2105      	movs	r1, #5
 8002232:	488c      	ldr	r0, [pc, #560]	; (8002464 <FreqMenu_DrawPresetMenu+0xaf4>)
 8002234:	f00e fb8c 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002238:	7a7b      	ldrb	r3, [r7, #9]
 800223a:	b29a      	uxth	r2, r3
 800223c:	2300      	movs	r3, #0
 800223e:	9301      	str	r3, [sp, #4]
 8002240:	2302      	movs	r3, #2
 8002242:	9300      	str	r3, [sp, #0]
 8002244:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002248:	2105      	movs	r1, #5
 800224a:	4887      	ldr	r0, [pc, #540]	; (8002468 <FreqMenu_DrawPresetMenu+0xaf8>)
 800224c:	f00e fb80 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002250:	7bfb      	ldrb	r3, [r7, #15]
 8002252:	b29a      	uxth	r2, r3
 8002254:	2300      	movs	r3, #0
 8002256:	9301      	str	r3, [sp, #4]
 8002258:	2302      	movs	r3, #2
 800225a:	9300      	str	r3, [sp, #0]
 800225c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002260:	2178      	movs	r1, #120	; 0x78
 8002262:	4882      	ldr	r0, [pc, #520]	; (800246c <FreqMenu_DrawPresetMenu+0xafc>)
 8002264:	f00e fb74 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002268:	7bbb      	ldrb	r3, [r7, #14]
 800226a:	b29a      	uxth	r2, r3
 800226c:	2300      	movs	r3, #0
 800226e:	9301      	str	r3, [sp, #4]
 8002270:	2302      	movs	r3, #2
 8002272:	9300      	str	r3, [sp, #0]
 8002274:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002278:	2178      	movs	r1, #120	; 0x78
 800227a:	487d      	ldr	r0, [pc, #500]	; (8002470 <FreqMenu_DrawPresetMenu+0xb00>)
 800227c:	f00e fb68 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002280:	7b7b      	ldrb	r3, [r7, #13]
 8002282:	b29a      	uxth	r2, r3
 8002284:	2300      	movs	r3, #0
 8002286:	9301      	str	r3, [sp, #4]
 8002288:	2302      	movs	r3, #2
 800228a:	9300      	str	r3, [sp, #0]
 800228c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002290:	2178      	movs	r1, #120	; 0x78
 8002292:	4878      	ldr	r0, [pc, #480]	; (8002474 <FreqMenu_DrawPresetMenu+0xb04>)
 8002294:	f00e fb5c 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002298:	7b3b      	ldrb	r3, [r7, #12]
 800229a:	b29a      	uxth	r2, r3
 800229c:	2300      	movs	r3, #0
 800229e:	9301      	str	r3, [sp, #4]
 80022a0:	2302      	movs	r3, #2
 80022a2:	9300      	str	r3, [sp, #0]
 80022a4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022a8:	2178      	movs	r1, #120	; 0x78
 80022aa:	4873      	ldr	r0, [pc, #460]	; (8002478 <FreqMenu_DrawPresetMenu+0xb08>)
 80022ac:	f00e fb50 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80022b0:	7afb      	ldrb	r3, [r7, #11]
 80022b2:	b29a      	uxth	r2, r3
 80022b4:	2300      	movs	r3, #0
 80022b6:	9301      	str	r3, [sp, #4]
 80022b8:	2302      	movs	r3, #2
 80022ba:	9300      	str	r3, [sp, #0]
 80022bc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022c0:	2178      	movs	r1, #120	; 0x78
 80022c2:	486e      	ldr	r0, [pc, #440]	; (800247c <FreqMenu_DrawPresetMenu+0xb0c>)
 80022c4:	f00e fb44 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80022c8:	7abb      	ldrb	r3, [r7, #10]
 80022ca:	b29a      	uxth	r2, r3
 80022cc:	2300      	movs	r3, #0
 80022ce:	9301      	str	r3, [sp, #4]
 80022d0:	2302      	movs	r3, #2
 80022d2:	9300      	str	r3, [sp, #0]
 80022d4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022d8:	2178      	movs	r1, #120	; 0x78
 80022da:	4869      	ldr	r0, [pc, #420]	; (8002480 <FreqMenu_DrawPresetMenu+0xb10>)
 80022dc:	f00e fb38 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80022e0:	7a7b      	ldrb	r3, [r7, #9]
 80022e2:	b29a      	uxth	r2, r3
 80022e4:	2300      	movs	r3, #0
 80022e6:	9301      	str	r3, [sp, #4]
 80022e8:	2302      	movs	r3, #2
 80022ea:	9300      	str	r3, [sp, #0]
 80022ec:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022f0:	2178      	movs	r1, #120	; 0x78
 80022f2:	4864      	ldr	r0, [pc, #400]	; (8002484 <FreqMenu_DrawPresetMenu+0xb14>)
 80022f4:	f00e fb2c 	bl	8010950 <ILI9341_Draw_Text>
				break;
 80022f8:	f000 bdc8 	b.w	8002e8c <FreqMenu_DrawPresetMenu+0x151c>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80022fc:	7bfb      	ldrb	r3, [r7, #15]
 80022fe:	b29a      	uxth	r2, r3
 8002300:	2300      	movs	r3, #0
 8002302:	9301      	str	r3, [sp, #4]
 8002304:	2302      	movs	r3, #2
 8002306:	9300      	str	r3, [sp, #0]
 8002308:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800230c:	2105      	movs	r1, #5
 800230e:	4850      	ldr	r0, [pc, #320]	; (8002450 <FreqMenu_DrawPresetMenu+0xae0>)
 8002310:	f00e fb1e 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002314:	7bbb      	ldrb	r3, [r7, #14]
 8002316:	b29a      	uxth	r2, r3
 8002318:	2300      	movs	r3, #0
 800231a:	9301      	str	r3, [sp, #4]
 800231c:	2302      	movs	r3, #2
 800231e:	9300      	str	r3, [sp, #0]
 8002320:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002324:	2105      	movs	r1, #5
 8002326:	484b      	ldr	r0, [pc, #300]	; (8002454 <FreqMenu_DrawPresetMenu+0xae4>)
 8002328:	f00e fb12 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800232c:	7b7b      	ldrb	r3, [r7, #13]
 800232e:	b29a      	uxth	r2, r3
 8002330:	2300      	movs	r3, #0
 8002332:	9301      	str	r3, [sp, #4]
 8002334:	2302      	movs	r3, #2
 8002336:	9300      	str	r3, [sp, #0]
 8002338:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800233c:	2105      	movs	r1, #5
 800233e:	4846      	ldr	r0, [pc, #280]	; (8002458 <FreqMenu_DrawPresetMenu+0xae8>)
 8002340:	f00e fb06 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002344:	7b3b      	ldrb	r3, [r7, #12]
 8002346:	b29a      	uxth	r2, r3
 8002348:	2300      	movs	r3, #0
 800234a:	9301      	str	r3, [sp, #4]
 800234c:	2302      	movs	r3, #2
 800234e:	9300      	str	r3, [sp, #0]
 8002350:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002354:	2105      	movs	r1, #5
 8002356:	4841      	ldr	r0, [pc, #260]	; (800245c <FreqMenu_DrawPresetMenu+0xaec>)
 8002358:	f00e fafa 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800235c:	7afb      	ldrb	r3, [r7, #11]
 800235e:	b29a      	uxth	r2, r3
 8002360:	2300      	movs	r3, #0
 8002362:	9301      	str	r3, [sp, #4]
 8002364:	2302      	movs	r3, #2
 8002366:	9300      	str	r3, [sp, #0]
 8002368:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800236c:	2105      	movs	r1, #5
 800236e:	483c      	ldr	r0, [pc, #240]	; (8002460 <FreqMenu_DrawPresetMenu+0xaf0>)
 8002370:	f00e faee 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002374:	7abb      	ldrb	r3, [r7, #10]
 8002376:	b29a      	uxth	r2, r3
 8002378:	2300      	movs	r3, #0
 800237a:	9301      	str	r3, [sp, #4]
 800237c:	2302      	movs	r3, #2
 800237e:	9300      	str	r3, [sp, #0]
 8002380:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002384:	2105      	movs	r1, #5
 8002386:	4837      	ldr	r0, [pc, #220]	; (8002464 <FreqMenu_DrawPresetMenu+0xaf4>)
 8002388:	f00e fae2 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 800238c:	7a7b      	ldrb	r3, [r7, #9]
 800238e:	b29a      	uxth	r2, r3
 8002390:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002394:	9301      	str	r3, [sp, #4]
 8002396:	2302      	movs	r3, #2
 8002398:	9300      	str	r3, [sp, #0]
 800239a:	2300      	movs	r3, #0
 800239c:	2105      	movs	r1, #5
 800239e:	4832      	ldr	r0, [pc, #200]	; (8002468 <FreqMenu_DrawPresetMenu+0xaf8>)
 80023a0:	f00e fad6 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80023a4:	7bfb      	ldrb	r3, [r7, #15]
 80023a6:	b29a      	uxth	r2, r3
 80023a8:	2300      	movs	r3, #0
 80023aa:	9301      	str	r3, [sp, #4]
 80023ac:	2302      	movs	r3, #2
 80023ae:	9300      	str	r3, [sp, #0]
 80023b0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80023b4:	2178      	movs	r1, #120	; 0x78
 80023b6:	482d      	ldr	r0, [pc, #180]	; (800246c <FreqMenu_DrawPresetMenu+0xafc>)
 80023b8:	f00e faca 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80023bc:	7bbb      	ldrb	r3, [r7, #14]
 80023be:	b29a      	uxth	r2, r3
 80023c0:	2300      	movs	r3, #0
 80023c2:	9301      	str	r3, [sp, #4]
 80023c4:	2302      	movs	r3, #2
 80023c6:	9300      	str	r3, [sp, #0]
 80023c8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80023cc:	2178      	movs	r1, #120	; 0x78
 80023ce:	4828      	ldr	r0, [pc, #160]	; (8002470 <FreqMenu_DrawPresetMenu+0xb00>)
 80023d0:	f00e fabe 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80023d4:	7b7b      	ldrb	r3, [r7, #13]
 80023d6:	b29a      	uxth	r2, r3
 80023d8:	2300      	movs	r3, #0
 80023da:	9301      	str	r3, [sp, #4]
 80023dc:	2302      	movs	r3, #2
 80023de:	9300      	str	r3, [sp, #0]
 80023e0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80023e4:	2178      	movs	r1, #120	; 0x78
 80023e6:	4823      	ldr	r0, [pc, #140]	; (8002474 <FreqMenu_DrawPresetMenu+0xb04>)
 80023e8:	f00e fab2 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80023ec:	7b3b      	ldrb	r3, [r7, #12]
 80023ee:	b29a      	uxth	r2, r3
 80023f0:	2300      	movs	r3, #0
 80023f2:	9301      	str	r3, [sp, #4]
 80023f4:	2302      	movs	r3, #2
 80023f6:	9300      	str	r3, [sp, #0]
 80023f8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80023fc:	2178      	movs	r1, #120	; 0x78
 80023fe:	481e      	ldr	r0, [pc, #120]	; (8002478 <FreqMenu_DrawPresetMenu+0xb08>)
 8002400:	f00e faa6 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002404:	7afb      	ldrb	r3, [r7, #11]
 8002406:	b29a      	uxth	r2, r3
 8002408:	2300      	movs	r3, #0
 800240a:	9301      	str	r3, [sp, #4]
 800240c:	2302      	movs	r3, #2
 800240e:	9300      	str	r3, [sp, #0]
 8002410:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002414:	2178      	movs	r1, #120	; 0x78
 8002416:	4819      	ldr	r0, [pc, #100]	; (800247c <FreqMenu_DrawPresetMenu+0xb0c>)
 8002418:	f00e fa9a 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800241c:	7abb      	ldrb	r3, [r7, #10]
 800241e:	b29a      	uxth	r2, r3
 8002420:	2300      	movs	r3, #0
 8002422:	9301      	str	r3, [sp, #4]
 8002424:	2302      	movs	r3, #2
 8002426:	9300      	str	r3, [sp, #0]
 8002428:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800242c:	2178      	movs	r1, #120	; 0x78
 800242e:	4814      	ldr	r0, [pc, #80]	; (8002480 <FreqMenu_DrawPresetMenu+0xb10>)
 8002430:	f00e fa8e 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002434:	7a7b      	ldrb	r3, [r7, #9]
 8002436:	b29a      	uxth	r2, r3
 8002438:	2300      	movs	r3, #0
 800243a:	9301      	str	r3, [sp, #4]
 800243c:	2302      	movs	r3, #2
 800243e:	9300      	str	r3, [sp, #0]
 8002440:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002444:	2178      	movs	r1, #120	; 0x78
 8002446:	480f      	ldr	r0, [pc, #60]	; (8002484 <FreqMenu_DrawPresetMenu+0xb14>)
 8002448:	f00e fa82 	bl	8010950 <ILI9341_Draw_Text>
				break;
 800244c:	f000 bd1e 	b.w	8002e8c <FreqMenu_DrawPresetMenu+0x151c>
 8002450:	080159e0 	.word	0x080159e0
 8002454:	080159e8 	.word	0x080159e8
 8002458:	080159f0 	.word	0x080159f0
 800245c:	080159f8 	.word	0x080159f8
 8002460:	08015a00 	.word	0x08015a00
 8002464:	08015a08 	.word	0x08015a08
 8002468:	08015a10 	.word	0x08015a10
 800246c:	08015a18 	.word	0x08015a18
 8002470:	08015a20 	.word	0x08015a20
 8002474:	08015a28 	.word	0x08015a28
 8002478:	08015a30 	.word	0x08015a30
 800247c:	08015a38 	.word	0x08015a38
 8002480:	08015a40 	.word	0x08015a40
 8002484:	08015a48 	.word	0x08015a48
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002488:	7bfb      	ldrb	r3, [r7, #15]
 800248a:	b29a      	uxth	r2, r3
 800248c:	2300      	movs	r3, #0
 800248e:	9301      	str	r3, [sp, #4]
 8002490:	2302      	movs	r3, #2
 8002492:	9300      	str	r3, [sp, #0]
 8002494:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002498:	2105      	movs	r1, #5
 800249a:	48a5      	ldr	r0, [pc, #660]	; (8002730 <FreqMenu_DrawPresetMenu+0xdc0>)
 800249c:	f00e fa58 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80024a0:	7bbb      	ldrb	r3, [r7, #14]
 80024a2:	b29a      	uxth	r2, r3
 80024a4:	2300      	movs	r3, #0
 80024a6:	9301      	str	r3, [sp, #4]
 80024a8:	2302      	movs	r3, #2
 80024aa:	9300      	str	r3, [sp, #0]
 80024ac:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80024b0:	2105      	movs	r1, #5
 80024b2:	48a0      	ldr	r0, [pc, #640]	; (8002734 <FreqMenu_DrawPresetMenu+0xdc4>)
 80024b4:	f00e fa4c 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80024b8:	7b7b      	ldrb	r3, [r7, #13]
 80024ba:	b29a      	uxth	r2, r3
 80024bc:	2300      	movs	r3, #0
 80024be:	9301      	str	r3, [sp, #4]
 80024c0:	2302      	movs	r3, #2
 80024c2:	9300      	str	r3, [sp, #0]
 80024c4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80024c8:	2105      	movs	r1, #5
 80024ca:	489b      	ldr	r0, [pc, #620]	; (8002738 <FreqMenu_DrawPresetMenu+0xdc8>)
 80024cc:	f00e fa40 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80024d0:	7b3b      	ldrb	r3, [r7, #12]
 80024d2:	b29a      	uxth	r2, r3
 80024d4:	2300      	movs	r3, #0
 80024d6:	9301      	str	r3, [sp, #4]
 80024d8:	2302      	movs	r3, #2
 80024da:	9300      	str	r3, [sp, #0]
 80024dc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80024e0:	2105      	movs	r1, #5
 80024e2:	4896      	ldr	r0, [pc, #600]	; (800273c <FreqMenu_DrawPresetMenu+0xdcc>)
 80024e4:	f00e fa34 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80024e8:	7afb      	ldrb	r3, [r7, #11]
 80024ea:	b29a      	uxth	r2, r3
 80024ec:	2300      	movs	r3, #0
 80024ee:	9301      	str	r3, [sp, #4]
 80024f0:	2302      	movs	r3, #2
 80024f2:	9300      	str	r3, [sp, #0]
 80024f4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80024f8:	2105      	movs	r1, #5
 80024fa:	4891      	ldr	r0, [pc, #580]	; (8002740 <FreqMenu_DrawPresetMenu+0xdd0>)
 80024fc:	f00e fa28 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002500:	7abb      	ldrb	r3, [r7, #10]
 8002502:	b29a      	uxth	r2, r3
 8002504:	2300      	movs	r3, #0
 8002506:	9301      	str	r3, [sp, #4]
 8002508:	2302      	movs	r3, #2
 800250a:	9300      	str	r3, [sp, #0]
 800250c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002510:	2105      	movs	r1, #5
 8002512:	488c      	ldr	r0, [pc, #560]	; (8002744 <FreqMenu_DrawPresetMenu+0xdd4>)
 8002514:	f00e fa1c 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002518:	7a7b      	ldrb	r3, [r7, #9]
 800251a:	b29a      	uxth	r2, r3
 800251c:	2300      	movs	r3, #0
 800251e:	9301      	str	r3, [sp, #4]
 8002520:	2302      	movs	r3, #2
 8002522:	9300      	str	r3, [sp, #0]
 8002524:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002528:	2105      	movs	r1, #5
 800252a:	4887      	ldr	r0, [pc, #540]	; (8002748 <FreqMenu_DrawPresetMenu+0xdd8>)
 800252c:	f00e fa10 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002530:	7bfb      	ldrb	r3, [r7, #15]
 8002532:	b29a      	uxth	r2, r3
 8002534:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002538:	9301      	str	r3, [sp, #4]
 800253a:	2302      	movs	r3, #2
 800253c:	9300      	str	r3, [sp, #0]
 800253e:	2300      	movs	r3, #0
 8002540:	2178      	movs	r1, #120	; 0x78
 8002542:	4882      	ldr	r0, [pc, #520]	; (800274c <FreqMenu_DrawPresetMenu+0xddc>)
 8002544:	f00e fa04 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002548:	7bbb      	ldrb	r3, [r7, #14]
 800254a:	b29a      	uxth	r2, r3
 800254c:	2300      	movs	r3, #0
 800254e:	9301      	str	r3, [sp, #4]
 8002550:	2302      	movs	r3, #2
 8002552:	9300      	str	r3, [sp, #0]
 8002554:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002558:	2178      	movs	r1, #120	; 0x78
 800255a:	487d      	ldr	r0, [pc, #500]	; (8002750 <FreqMenu_DrawPresetMenu+0xde0>)
 800255c:	f00e f9f8 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002560:	7b7b      	ldrb	r3, [r7, #13]
 8002562:	b29a      	uxth	r2, r3
 8002564:	2300      	movs	r3, #0
 8002566:	9301      	str	r3, [sp, #4]
 8002568:	2302      	movs	r3, #2
 800256a:	9300      	str	r3, [sp, #0]
 800256c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002570:	2178      	movs	r1, #120	; 0x78
 8002572:	4878      	ldr	r0, [pc, #480]	; (8002754 <FreqMenu_DrawPresetMenu+0xde4>)
 8002574:	f00e f9ec 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002578:	7b3b      	ldrb	r3, [r7, #12]
 800257a:	b29a      	uxth	r2, r3
 800257c:	2300      	movs	r3, #0
 800257e:	9301      	str	r3, [sp, #4]
 8002580:	2302      	movs	r3, #2
 8002582:	9300      	str	r3, [sp, #0]
 8002584:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002588:	2178      	movs	r1, #120	; 0x78
 800258a:	4873      	ldr	r0, [pc, #460]	; (8002758 <FreqMenu_DrawPresetMenu+0xde8>)
 800258c:	f00e f9e0 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002590:	7afb      	ldrb	r3, [r7, #11]
 8002592:	b29a      	uxth	r2, r3
 8002594:	2300      	movs	r3, #0
 8002596:	9301      	str	r3, [sp, #4]
 8002598:	2302      	movs	r3, #2
 800259a:	9300      	str	r3, [sp, #0]
 800259c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025a0:	2178      	movs	r1, #120	; 0x78
 80025a2:	486e      	ldr	r0, [pc, #440]	; (800275c <FreqMenu_DrawPresetMenu+0xdec>)
 80025a4:	f00e f9d4 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025a8:	7abb      	ldrb	r3, [r7, #10]
 80025aa:	b29a      	uxth	r2, r3
 80025ac:	2300      	movs	r3, #0
 80025ae:	9301      	str	r3, [sp, #4]
 80025b0:	2302      	movs	r3, #2
 80025b2:	9300      	str	r3, [sp, #0]
 80025b4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025b8:	2178      	movs	r1, #120	; 0x78
 80025ba:	4869      	ldr	r0, [pc, #420]	; (8002760 <FreqMenu_DrawPresetMenu+0xdf0>)
 80025bc:	f00e f9c8 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025c0:	7a7b      	ldrb	r3, [r7, #9]
 80025c2:	b29a      	uxth	r2, r3
 80025c4:	2300      	movs	r3, #0
 80025c6:	9301      	str	r3, [sp, #4]
 80025c8:	2302      	movs	r3, #2
 80025ca:	9300      	str	r3, [sp, #0]
 80025cc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025d0:	2178      	movs	r1, #120	; 0x78
 80025d2:	4864      	ldr	r0, [pc, #400]	; (8002764 <FreqMenu_DrawPresetMenu+0xdf4>)
 80025d4:	f00e f9bc 	bl	8010950 <ILI9341_Draw_Text>
				break;
 80025d8:	f000 bc58 	b.w	8002e8c <FreqMenu_DrawPresetMenu+0x151c>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025dc:	7bfb      	ldrb	r3, [r7, #15]
 80025de:	b29a      	uxth	r2, r3
 80025e0:	2300      	movs	r3, #0
 80025e2:	9301      	str	r3, [sp, #4]
 80025e4:	2302      	movs	r3, #2
 80025e6:	9300      	str	r3, [sp, #0]
 80025e8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025ec:	2105      	movs	r1, #5
 80025ee:	4850      	ldr	r0, [pc, #320]	; (8002730 <FreqMenu_DrawPresetMenu+0xdc0>)
 80025f0:	f00e f9ae 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025f4:	7bbb      	ldrb	r3, [r7, #14]
 80025f6:	b29a      	uxth	r2, r3
 80025f8:	2300      	movs	r3, #0
 80025fa:	9301      	str	r3, [sp, #4]
 80025fc:	2302      	movs	r3, #2
 80025fe:	9300      	str	r3, [sp, #0]
 8002600:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002604:	2105      	movs	r1, #5
 8002606:	484b      	ldr	r0, [pc, #300]	; (8002734 <FreqMenu_DrawPresetMenu+0xdc4>)
 8002608:	f00e f9a2 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800260c:	7b7b      	ldrb	r3, [r7, #13]
 800260e:	b29a      	uxth	r2, r3
 8002610:	2300      	movs	r3, #0
 8002612:	9301      	str	r3, [sp, #4]
 8002614:	2302      	movs	r3, #2
 8002616:	9300      	str	r3, [sp, #0]
 8002618:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800261c:	2105      	movs	r1, #5
 800261e:	4846      	ldr	r0, [pc, #280]	; (8002738 <FreqMenu_DrawPresetMenu+0xdc8>)
 8002620:	f00e f996 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002624:	7b3b      	ldrb	r3, [r7, #12]
 8002626:	b29a      	uxth	r2, r3
 8002628:	2300      	movs	r3, #0
 800262a:	9301      	str	r3, [sp, #4]
 800262c:	2302      	movs	r3, #2
 800262e:	9300      	str	r3, [sp, #0]
 8002630:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002634:	2105      	movs	r1, #5
 8002636:	4841      	ldr	r0, [pc, #260]	; (800273c <FreqMenu_DrawPresetMenu+0xdcc>)
 8002638:	f00e f98a 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800263c:	7afb      	ldrb	r3, [r7, #11]
 800263e:	b29a      	uxth	r2, r3
 8002640:	2300      	movs	r3, #0
 8002642:	9301      	str	r3, [sp, #4]
 8002644:	2302      	movs	r3, #2
 8002646:	9300      	str	r3, [sp, #0]
 8002648:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800264c:	2105      	movs	r1, #5
 800264e:	483c      	ldr	r0, [pc, #240]	; (8002740 <FreqMenu_DrawPresetMenu+0xdd0>)
 8002650:	f00e f97e 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002654:	7abb      	ldrb	r3, [r7, #10]
 8002656:	b29a      	uxth	r2, r3
 8002658:	2300      	movs	r3, #0
 800265a:	9301      	str	r3, [sp, #4]
 800265c:	2302      	movs	r3, #2
 800265e:	9300      	str	r3, [sp, #0]
 8002660:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002664:	2105      	movs	r1, #5
 8002666:	4837      	ldr	r0, [pc, #220]	; (8002744 <FreqMenu_DrawPresetMenu+0xdd4>)
 8002668:	f00e f972 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800266c:	7a7b      	ldrb	r3, [r7, #9]
 800266e:	b29a      	uxth	r2, r3
 8002670:	2300      	movs	r3, #0
 8002672:	9301      	str	r3, [sp, #4]
 8002674:	2302      	movs	r3, #2
 8002676:	9300      	str	r3, [sp, #0]
 8002678:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800267c:	2105      	movs	r1, #5
 800267e:	4832      	ldr	r0, [pc, #200]	; (8002748 <FreqMenu_DrawPresetMenu+0xdd8>)
 8002680:	f00e f966 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002684:	7bfb      	ldrb	r3, [r7, #15]
 8002686:	b29a      	uxth	r2, r3
 8002688:	2300      	movs	r3, #0
 800268a:	9301      	str	r3, [sp, #4]
 800268c:	2302      	movs	r3, #2
 800268e:	9300      	str	r3, [sp, #0]
 8002690:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002694:	2178      	movs	r1, #120	; 0x78
 8002696:	482d      	ldr	r0, [pc, #180]	; (800274c <FreqMenu_DrawPresetMenu+0xddc>)
 8002698:	f00e f95a 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 800269c:	7bbb      	ldrb	r3, [r7, #14]
 800269e:	b29a      	uxth	r2, r3
 80026a0:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80026a4:	9301      	str	r3, [sp, #4]
 80026a6:	2302      	movs	r3, #2
 80026a8:	9300      	str	r3, [sp, #0]
 80026aa:	2300      	movs	r3, #0
 80026ac:	2178      	movs	r1, #120	; 0x78
 80026ae:	4828      	ldr	r0, [pc, #160]	; (8002750 <FreqMenu_DrawPresetMenu+0xde0>)
 80026b0:	f00e f94e 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80026b4:	7b7b      	ldrb	r3, [r7, #13]
 80026b6:	b29a      	uxth	r2, r3
 80026b8:	2300      	movs	r3, #0
 80026ba:	9301      	str	r3, [sp, #4]
 80026bc:	2302      	movs	r3, #2
 80026be:	9300      	str	r3, [sp, #0]
 80026c0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80026c4:	2178      	movs	r1, #120	; 0x78
 80026c6:	4823      	ldr	r0, [pc, #140]	; (8002754 <FreqMenu_DrawPresetMenu+0xde4>)
 80026c8:	f00e f942 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80026cc:	7b3b      	ldrb	r3, [r7, #12]
 80026ce:	b29a      	uxth	r2, r3
 80026d0:	2300      	movs	r3, #0
 80026d2:	9301      	str	r3, [sp, #4]
 80026d4:	2302      	movs	r3, #2
 80026d6:	9300      	str	r3, [sp, #0]
 80026d8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80026dc:	2178      	movs	r1, #120	; 0x78
 80026de:	481e      	ldr	r0, [pc, #120]	; (8002758 <FreqMenu_DrawPresetMenu+0xde8>)
 80026e0:	f00e f936 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80026e4:	7afb      	ldrb	r3, [r7, #11]
 80026e6:	b29a      	uxth	r2, r3
 80026e8:	2300      	movs	r3, #0
 80026ea:	9301      	str	r3, [sp, #4]
 80026ec:	2302      	movs	r3, #2
 80026ee:	9300      	str	r3, [sp, #0]
 80026f0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80026f4:	2178      	movs	r1, #120	; 0x78
 80026f6:	4819      	ldr	r0, [pc, #100]	; (800275c <FreqMenu_DrawPresetMenu+0xdec>)
 80026f8:	f00e f92a 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80026fc:	7abb      	ldrb	r3, [r7, #10]
 80026fe:	b29a      	uxth	r2, r3
 8002700:	2300      	movs	r3, #0
 8002702:	9301      	str	r3, [sp, #4]
 8002704:	2302      	movs	r3, #2
 8002706:	9300      	str	r3, [sp, #0]
 8002708:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800270c:	2178      	movs	r1, #120	; 0x78
 800270e:	4814      	ldr	r0, [pc, #80]	; (8002760 <FreqMenu_DrawPresetMenu+0xdf0>)
 8002710:	f00e f91e 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002714:	7a7b      	ldrb	r3, [r7, #9]
 8002716:	b29a      	uxth	r2, r3
 8002718:	2300      	movs	r3, #0
 800271a:	9301      	str	r3, [sp, #4]
 800271c:	2302      	movs	r3, #2
 800271e:	9300      	str	r3, [sp, #0]
 8002720:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002724:	2178      	movs	r1, #120	; 0x78
 8002726:	480f      	ldr	r0, [pc, #60]	; (8002764 <FreqMenu_DrawPresetMenu+0xdf4>)
 8002728:	f00e f912 	bl	8010950 <ILI9341_Draw_Text>
				break;
 800272c:	e3ae      	b.n	8002e8c <FreqMenu_DrawPresetMenu+0x151c>
 800272e:	bf00      	nop
 8002730:	080159e0 	.word	0x080159e0
 8002734:	080159e8 	.word	0x080159e8
 8002738:	080159f0 	.word	0x080159f0
 800273c:	080159f8 	.word	0x080159f8
 8002740:	08015a00 	.word	0x08015a00
 8002744:	08015a08 	.word	0x08015a08
 8002748:	08015a10 	.word	0x08015a10
 800274c:	08015a18 	.word	0x08015a18
 8002750:	08015a20 	.word	0x08015a20
 8002754:	08015a28 	.word	0x08015a28
 8002758:	08015a30 	.word	0x08015a30
 800275c:	08015a38 	.word	0x08015a38
 8002760:	08015a40 	.word	0x08015a40
 8002764:	08015a48 	.word	0x08015a48
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002768:	7bfb      	ldrb	r3, [r7, #15]
 800276a:	b29a      	uxth	r2, r3
 800276c:	2300      	movs	r3, #0
 800276e:	9301      	str	r3, [sp, #4]
 8002770:	2302      	movs	r3, #2
 8002772:	9300      	str	r3, [sp, #0]
 8002774:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002778:	2105      	movs	r1, #5
 800277a:	48a4      	ldr	r0, [pc, #656]	; (8002a0c <FreqMenu_DrawPresetMenu+0x109c>)
 800277c:	f00e f8e8 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002780:	7bbb      	ldrb	r3, [r7, #14]
 8002782:	b29a      	uxth	r2, r3
 8002784:	2300      	movs	r3, #0
 8002786:	9301      	str	r3, [sp, #4]
 8002788:	2302      	movs	r3, #2
 800278a:	9300      	str	r3, [sp, #0]
 800278c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002790:	2105      	movs	r1, #5
 8002792:	489f      	ldr	r0, [pc, #636]	; (8002a10 <FreqMenu_DrawPresetMenu+0x10a0>)
 8002794:	f00e f8dc 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002798:	7b7b      	ldrb	r3, [r7, #13]
 800279a:	b29a      	uxth	r2, r3
 800279c:	2300      	movs	r3, #0
 800279e:	9301      	str	r3, [sp, #4]
 80027a0:	2302      	movs	r3, #2
 80027a2:	9300      	str	r3, [sp, #0]
 80027a4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80027a8:	2105      	movs	r1, #5
 80027aa:	489a      	ldr	r0, [pc, #616]	; (8002a14 <FreqMenu_DrawPresetMenu+0x10a4>)
 80027ac:	f00e f8d0 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80027b0:	7b3b      	ldrb	r3, [r7, #12]
 80027b2:	b29a      	uxth	r2, r3
 80027b4:	2300      	movs	r3, #0
 80027b6:	9301      	str	r3, [sp, #4]
 80027b8:	2302      	movs	r3, #2
 80027ba:	9300      	str	r3, [sp, #0]
 80027bc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80027c0:	2105      	movs	r1, #5
 80027c2:	4895      	ldr	r0, [pc, #596]	; (8002a18 <FreqMenu_DrawPresetMenu+0x10a8>)
 80027c4:	f00e f8c4 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80027c8:	7afb      	ldrb	r3, [r7, #11]
 80027ca:	b29a      	uxth	r2, r3
 80027cc:	2300      	movs	r3, #0
 80027ce:	9301      	str	r3, [sp, #4]
 80027d0:	2302      	movs	r3, #2
 80027d2:	9300      	str	r3, [sp, #0]
 80027d4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80027d8:	2105      	movs	r1, #5
 80027da:	4890      	ldr	r0, [pc, #576]	; (8002a1c <FreqMenu_DrawPresetMenu+0x10ac>)
 80027dc:	f00e f8b8 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80027e0:	7abb      	ldrb	r3, [r7, #10]
 80027e2:	b29a      	uxth	r2, r3
 80027e4:	2300      	movs	r3, #0
 80027e6:	9301      	str	r3, [sp, #4]
 80027e8:	2302      	movs	r3, #2
 80027ea:	9300      	str	r3, [sp, #0]
 80027ec:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80027f0:	2105      	movs	r1, #5
 80027f2:	488b      	ldr	r0, [pc, #556]	; (8002a20 <FreqMenu_DrawPresetMenu+0x10b0>)
 80027f4:	f00e f8ac 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80027f8:	7a7b      	ldrb	r3, [r7, #9]
 80027fa:	b29a      	uxth	r2, r3
 80027fc:	2300      	movs	r3, #0
 80027fe:	9301      	str	r3, [sp, #4]
 8002800:	2302      	movs	r3, #2
 8002802:	9300      	str	r3, [sp, #0]
 8002804:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002808:	2105      	movs	r1, #5
 800280a:	4886      	ldr	r0, [pc, #536]	; (8002a24 <FreqMenu_DrawPresetMenu+0x10b4>)
 800280c:	f00e f8a0 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002810:	7bfb      	ldrb	r3, [r7, #15]
 8002812:	b29a      	uxth	r2, r3
 8002814:	2300      	movs	r3, #0
 8002816:	9301      	str	r3, [sp, #4]
 8002818:	2302      	movs	r3, #2
 800281a:	9300      	str	r3, [sp, #0]
 800281c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002820:	2178      	movs	r1, #120	; 0x78
 8002822:	4881      	ldr	r0, [pc, #516]	; (8002a28 <FreqMenu_DrawPresetMenu+0x10b8>)
 8002824:	f00e f894 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002828:	7bbb      	ldrb	r3, [r7, #14]
 800282a:	b29a      	uxth	r2, r3
 800282c:	2300      	movs	r3, #0
 800282e:	9301      	str	r3, [sp, #4]
 8002830:	2302      	movs	r3, #2
 8002832:	9300      	str	r3, [sp, #0]
 8002834:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002838:	2178      	movs	r1, #120	; 0x78
 800283a:	487c      	ldr	r0, [pc, #496]	; (8002a2c <FreqMenu_DrawPresetMenu+0x10bc>)
 800283c:	f00e f888 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002840:	7b7b      	ldrb	r3, [r7, #13]
 8002842:	b29a      	uxth	r2, r3
 8002844:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002848:	9301      	str	r3, [sp, #4]
 800284a:	2302      	movs	r3, #2
 800284c:	9300      	str	r3, [sp, #0]
 800284e:	2300      	movs	r3, #0
 8002850:	2178      	movs	r1, #120	; 0x78
 8002852:	4877      	ldr	r0, [pc, #476]	; (8002a30 <FreqMenu_DrawPresetMenu+0x10c0>)
 8002854:	f00e f87c 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002858:	7b3b      	ldrb	r3, [r7, #12]
 800285a:	b29a      	uxth	r2, r3
 800285c:	2300      	movs	r3, #0
 800285e:	9301      	str	r3, [sp, #4]
 8002860:	2302      	movs	r3, #2
 8002862:	9300      	str	r3, [sp, #0]
 8002864:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002868:	2178      	movs	r1, #120	; 0x78
 800286a:	4872      	ldr	r0, [pc, #456]	; (8002a34 <FreqMenu_DrawPresetMenu+0x10c4>)
 800286c:	f00e f870 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002870:	7afb      	ldrb	r3, [r7, #11]
 8002872:	b29a      	uxth	r2, r3
 8002874:	2300      	movs	r3, #0
 8002876:	9301      	str	r3, [sp, #4]
 8002878:	2302      	movs	r3, #2
 800287a:	9300      	str	r3, [sp, #0]
 800287c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002880:	2178      	movs	r1, #120	; 0x78
 8002882:	486d      	ldr	r0, [pc, #436]	; (8002a38 <FreqMenu_DrawPresetMenu+0x10c8>)
 8002884:	f00e f864 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002888:	7abb      	ldrb	r3, [r7, #10]
 800288a:	b29a      	uxth	r2, r3
 800288c:	2300      	movs	r3, #0
 800288e:	9301      	str	r3, [sp, #4]
 8002890:	2302      	movs	r3, #2
 8002892:	9300      	str	r3, [sp, #0]
 8002894:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002898:	2178      	movs	r1, #120	; 0x78
 800289a:	4868      	ldr	r0, [pc, #416]	; (8002a3c <FreqMenu_DrawPresetMenu+0x10cc>)
 800289c:	f00e f858 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80028a0:	7a7b      	ldrb	r3, [r7, #9]
 80028a2:	b29a      	uxth	r2, r3
 80028a4:	2300      	movs	r3, #0
 80028a6:	9301      	str	r3, [sp, #4]
 80028a8:	2302      	movs	r3, #2
 80028aa:	9300      	str	r3, [sp, #0]
 80028ac:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80028b0:	2178      	movs	r1, #120	; 0x78
 80028b2:	4863      	ldr	r0, [pc, #396]	; (8002a40 <FreqMenu_DrawPresetMenu+0x10d0>)
 80028b4:	f00e f84c 	bl	8010950 <ILI9341_Draw_Text>
				break;
 80028b8:	e2e8      	b.n	8002e8c <FreqMenu_DrawPresetMenu+0x151c>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80028ba:	7bfb      	ldrb	r3, [r7, #15]
 80028bc:	b29a      	uxth	r2, r3
 80028be:	2300      	movs	r3, #0
 80028c0:	9301      	str	r3, [sp, #4]
 80028c2:	2302      	movs	r3, #2
 80028c4:	9300      	str	r3, [sp, #0]
 80028c6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80028ca:	2105      	movs	r1, #5
 80028cc:	484f      	ldr	r0, [pc, #316]	; (8002a0c <FreqMenu_DrawPresetMenu+0x109c>)
 80028ce:	f00e f83f 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80028d2:	7bbb      	ldrb	r3, [r7, #14]
 80028d4:	b29a      	uxth	r2, r3
 80028d6:	2300      	movs	r3, #0
 80028d8:	9301      	str	r3, [sp, #4]
 80028da:	2302      	movs	r3, #2
 80028dc:	9300      	str	r3, [sp, #0]
 80028de:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80028e2:	2105      	movs	r1, #5
 80028e4:	484a      	ldr	r0, [pc, #296]	; (8002a10 <FreqMenu_DrawPresetMenu+0x10a0>)
 80028e6:	f00e f833 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80028ea:	7b7b      	ldrb	r3, [r7, #13]
 80028ec:	b29a      	uxth	r2, r3
 80028ee:	2300      	movs	r3, #0
 80028f0:	9301      	str	r3, [sp, #4]
 80028f2:	2302      	movs	r3, #2
 80028f4:	9300      	str	r3, [sp, #0]
 80028f6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80028fa:	2105      	movs	r1, #5
 80028fc:	4845      	ldr	r0, [pc, #276]	; (8002a14 <FreqMenu_DrawPresetMenu+0x10a4>)
 80028fe:	f00e f827 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002902:	7b3b      	ldrb	r3, [r7, #12]
 8002904:	b29a      	uxth	r2, r3
 8002906:	2300      	movs	r3, #0
 8002908:	9301      	str	r3, [sp, #4]
 800290a:	2302      	movs	r3, #2
 800290c:	9300      	str	r3, [sp, #0]
 800290e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002912:	2105      	movs	r1, #5
 8002914:	4840      	ldr	r0, [pc, #256]	; (8002a18 <FreqMenu_DrawPresetMenu+0x10a8>)
 8002916:	f00e f81b 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800291a:	7afb      	ldrb	r3, [r7, #11]
 800291c:	b29a      	uxth	r2, r3
 800291e:	2300      	movs	r3, #0
 8002920:	9301      	str	r3, [sp, #4]
 8002922:	2302      	movs	r3, #2
 8002924:	9300      	str	r3, [sp, #0]
 8002926:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800292a:	2105      	movs	r1, #5
 800292c:	483b      	ldr	r0, [pc, #236]	; (8002a1c <FreqMenu_DrawPresetMenu+0x10ac>)
 800292e:	f00e f80f 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002932:	7abb      	ldrb	r3, [r7, #10]
 8002934:	b29a      	uxth	r2, r3
 8002936:	2300      	movs	r3, #0
 8002938:	9301      	str	r3, [sp, #4]
 800293a:	2302      	movs	r3, #2
 800293c:	9300      	str	r3, [sp, #0]
 800293e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002942:	2105      	movs	r1, #5
 8002944:	4836      	ldr	r0, [pc, #216]	; (8002a20 <FreqMenu_DrawPresetMenu+0x10b0>)
 8002946:	f00e f803 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800294a:	7a7b      	ldrb	r3, [r7, #9]
 800294c:	b29a      	uxth	r2, r3
 800294e:	2300      	movs	r3, #0
 8002950:	9301      	str	r3, [sp, #4]
 8002952:	2302      	movs	r3, #2
 8002954:	9300      	str	r3, [sp, #0]
 8002956:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800295a:	2105      	movs	r1, #5
 800295c:	4831      	ldr	r0, [pc, #196]	; (8002a24 <FreqMenu_DrawPresetMenu+0x10b4>)
 800295e:	f00d fff7 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002962:	7bfb      	ldrb	r3, [r7, #15]
 8002964:	b29a      	uxth	r2, r3
 8002966:	2300      	movs	r3, #0
 8002968:	9301      	str	r3, [sp, #4]
 800296a:	2302      	movs	r3, #2
 800296c:	9300      	str	r3, [sp, #0]
 800296e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002972:	2178      	movs	r1, #120	; 0x78
 8002974:	482c      	ldr	r0, [pc, #176]	; (8002a28 <FreqMenu_DrawPresetMenu+0x10b8>)
 8002976:	f00d ffeb 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800297a:	7bbb      	ldrb	r3, [r7, #14]
 800297c:	b29a      	uxth	r2, r3
 800297e:	2300      	movs	r3, #0
 8002980:	9301      	str	r3, [sp, #4]
 8002982:	2302      	movs	r3, #2
 8002984:	9300      	str	r3, [sp, #0]
 8002986:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800298a:	2178      	movs	r1, #120	; 0x78
 800298c:	4827      	ldr	r0, [pc, #156]	; (8002a2c <FreqMenu_DrawPresetMenu+0x10bc>)
 800298e:	f00d ffdf 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002992:	7b7b      	ldrb	r3, [r7, #13]
 8002994:	b29a      	uxth	r2, r3
 8002996:	2300      	movs	r3, #0
 8002998:	9301      	str	r3, [sp, #4]
 800299a:	2302      	movs	r3, #2
 800299c:	9300      	str	r3, [sp, #0]
 800299e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80029a2:	2178      	movs	r1, #120	; 0x78
 80029a4:	4822      	ldr	r0, [pc, #136]	; (8002a30 <FreqMenu_DrawPresetMenu+0x10c0>)
 80029a6:	f00d ffd3 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80029aa:	7b3b      	ldrb	r3, [r7, #12]
 80029ac:	b29a      	uxth	r2, r3
 80029ae:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80029b2:	9301      	str	r3, [sp, #4]
 80029b4:	2302      	movs	r3, #2
 80029b6:	9300      	str	r3, [sp, #0]
 80029b8:	2300      	movs	r3, #0
 80029ba:	2178      	movs	r1, #120	; 0x78
 80029bc:	481d      	ldr	r0, [pc, #116]	; (8002a34 <FreqMenu_DrawPresetMenu+0x10c4>)
 80029be:	f00d ffc7 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80029c2:	7afb      	ldrb	r3, [r7, #11]
 80029c4:	b29a      	uxth	r2, r3
 80029c6:	2300      	movs	r3, #0
 80029c8:	9301      	str	r3, [sp, #4]
 80029ca:	2302      	movs	r3, #2
 80029cc:	9300      	str	r3, [sp, #0]
 80029ce:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80029d2:	2178      	movs	r1, #120	; 0x78
 80029d4:	4818      	ldr	r0, [pc, #96]	; (8002a38 <FreqMenu_DrawPresetMenu+0x10c8>)
 80029d6:	f00d ffbb 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80029da:	7abb      	ldrb	r3, [r7, #10]
 80029dc:	b29a      	uxth	r2, r3
 80029de:	2300      	movs	r3, #0
 80029e0:	9301      	str	r3, [sp, #4]
 80029e2:	2302      	movs	r3, #2
 80029e4:	9300      	str	r3, [sp, #0]
 80029e6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80029ea:	2178      	movs	r1, #120	; 0x78
 80029ec:	4813      	ldr	r0, [pc, #76]	; (8002a3c <FreqMenu_DrawPresetMenu+0x10cc>)
 80029ee:	f00d ffaf 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80029f2:	7a7b      	ldrb	r3, [r7, #9]
 80029f4:	b29a      	uxth	r2, r3
 80029f6:	2300      	movs	r3, #0
 80029f8:	9301      	str	r3, [sp, #4]
 80029fa:	2302      	movs	r3, #2
 80029fc:	9300      	str	r3, [sp, #0]
 80029fe:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a02:	2178      	movs	r1, #120	; 0x78
 8002a04:	480e      	ldr	r0, [pc, #56]	; (8002a40 <FreqMenu_DrawPresetMenu+0x10d0>)
 8002a06:	f00d ffa3 	bl	8010950 <ILI9341_Draw_Text>
				break;
 8002a0a:	e23f      	b.n	8002e8c <FreqMenu_DrawPresetMenu+0x151c>
 8002a0c:	080159e0 	.word	0x080159e0
 8002a10:	080159e8 	.word	0x080159e8
 8002a14:	080159f0 	.word	0x080159f0
 8002a18:	080159f8 	.word	0x080159f8
 8002a1c:	08015a00 	.word	0x08015a00
 8002a20:	08015a08 	.word	0x08015a08
 8002a24:	08015a10 	.word	0x08015a10
 8002a28:	08015a18 	.word	0x08015a18
 8002a2c:	08015a20 	.word	0x08015a20
 8002a30:	08015a28 	.word	0x08015a28
 8002a34:	08015a30 	.word	0x08015a30
 8002a38:	08015a38 	.word	0x08015a38
 8002a3c:	08015a40 	.word	0x08015a40
 8002a40:	08015a48 	.word	0x08015a48
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a44:	7bfb      	ldrb	r3, [r7, #15]
 8002a46:	b29a      	uxth	r2, r3
 8002a48:	2300      	movs	r3, #0
 8002a4a:	9301      	str	r3, [sp, #4]
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	9300      	str	r3, [sp, #0]
 8002a50:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a54:	2105      	movs	r1, #5
 8002a56:	48a4      	ldr	r0, [pc, #656]	; (8002ce8 <FreqMenu_DrawPresetMenu+0x1378>)
 8002a58:	f00d ff7a 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a5c:	7bbb      	ldrb	r3, [r7, #14]
 8002a5e:	b29a      	uxth	r2, r3
 8002a60:	2300      	movs	r3, #0
 8002a62:	9301      	str	r3, [sp, #4]
 8002a64:	2302      	movs	r3, #2
 8002a66:	9300      	str	r3, [sp, #0]
 8002a68:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a6c:	2105      	movs	r1, #5
 8002a6e:	489f      	ldr	r0, [pc, #636]	; (8002cec <FreqMenu_DrawPresetMenu+0x137c>)
 8002a70:	f00d ff6e 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a74:	7b7b      	ldrb	r3, [r7, #13]
 8002a76:	b29a      	uxth	r2, r3
 8002a78:	2300      	movs	r3, #0
 8002a7a:	9301      	str	r3, [sp, #4]
 8002a7c:	2302      	movs	r3, #2
 8002a7e:	9300      	str	r3, [sp, #0]
 8002a80:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a84:	2105      	movs	r1, #5
 8002a86:	489a      	ldr	r0, [pc, #616]	; (8002cf0 <FreqMenu_DrawPresetMenu+0x1380>)
 8002a88:	f00d ff62 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a8c:	7b3b      	ldrb	r3, [r7, #12]
 8002a8e:	b29a      	uxth	r2, r3
 8002a90:	2300      	movs	r3, #0
 8002a92:	9301      	str	r3, [sp, #4]
 8002a94:	2302      	movs	r3, #2
 8002a96:	9300      	str	r3, [sp, #0]
 8002a98:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a9c:	2105      	movs	r1, #5
 8002a9e:	4895      	ldr	r0, [pc, #596]	; (8002cf4 <FreqMenu_DrawPresetMenu+0x1384>)
 8002aa0:	f00d ff56 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002aa4:	7afb      	ldrb	r3, [r7, #11]
 8002aa6:	b29a      	uxth	r2, r3
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	9301      	str	r3, [sp, #4]
 8002aac:	2302      	movs	r3, #2
 8002aae:	9300      	str	r3, [sp, #0]
 8002ab0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002ab4:	2105      	movs	r1, #5
 8002ab6:	4890      	ldr	r0, [pc, #576]	; (8002cf8 <FreqMenu_DrawPresetMenu+0x1388>)
 8002ab8:	f00d ff4a 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002abc:	7abb      	ldrb	r3, [r7, #10]
 8002abe:	b29a      	uxth	r2, r3
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	9301      	str	r3, [sp, #4]
 8002ac4:	2302      	movs	r3, #2
 8002ac6:	9300      	str	r3, [sp, #0]
 8002ac8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002acc:	2105      	movs	r1, #5
 8002ace:	488b      	ldr	r0, [pc, #556]	; (8002cfc <FreqMenu_DrawPresetMenu+0x138c>)
 8002ad0:	f00d ff3e 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002ad4:	7a7b      	ldrb	r3, [r7, #9]
 8002ad6:	b29a      	uxth	r2, r3
 8002ad8:	2300      	movs	r3, #0
 8002ada:	9301      	str	r3, [sp, #4]
 8002adc:	2302      	movs	r3, #2
 8002ade:	9300      	str	r3, [sp, #0]
 8002ae0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002ae4:	2105      	movs	r1, #5
 8002ae6:	4886      	ldr	r0, [pc, #536]	; (8002d00 <FreqMenu_DrawPresetMenu+0x1390>)
 8002ae8:	f00d ff32 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002aec:	7bfb      	ldrb	r3, [r7, #15]
 8002aee:	b29a      	uxth	r2, r3
 8002af0:	2300      	movs	r3, #0
 8002af2:	9301      	str	r3, [sp, #4]
 8002af4:	2302      	movs	r3, #2
 8002af6:	9300      	str	r3, [sp, #0]
 8002af8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002afc:	2178      	movs	r1, #120	; 0x78
 8002afe:	4881      	ldr	r0, [pc, #516]	; (8002d04 <FreqMenu_DrawPresetMenu+0x1394>)
 8002b00:	f00d ff26 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002b04:	7bbb      	ldrb	r3, [r7, #14]
 8002b06:	b29a      	uxth	r2, r3
 8002b08:	2300      	movs	r3, #0
 8002b0a:	9301      	str	r3, [sp, #4]
 8002b0c:	2302      	movs	r3, #2
 8002b0e:	9300      	str	r3, [sp, #0]
 8002b10:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002b14:	2178      	movs	r1, #120	; 0x78
 8002b16:	487c      	ldr	r0, [pc, #496]	; (8002d08 <FreqMenu_DrawPresetMenu+0x1398>)
 8002b18:	f00d ff1a 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002b1c:	7b7b      	ldrb	r3, [r7, #13]
 8002b1e:	b29a      	uxth	r2, r3
 8002b20:	2300      	movs	r3, #0
 8002b22:	9301      	str	r3, [sp, #4]
 8002b24:	2302      	movs	r3, #2
 8002b26:	9300      	str	r3, [sp, #0]
 8002b28:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002b2c:	2178      	movs	r1, #120	; 0x78
 8002b2e:	4877      	ldr	r0, [pc, #476]	; (8002d0c <FreqMenu_DrawPresetMenu+0x139c>)
 8002b30:	f00d ff0e 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002b34:	7b3b      	ldrb	r3, [r7, #12]
 8002b36:	b29a      	uxth	r2, r3
 8002b38:	2300      	movs	r3, #0
 8002b3a:	9301      	str	r3, [sp, #4]
 8002b3c:	2302      	movs	r3, #2
 8002b3e:	9300      	str	r3, [sp, #0]
 8002b40:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002b44:	2178      	movs	r1, #120	; 0x78
 8002b46:	4872      	ldr	r0, [pc, #456]	; (8002d10 <FreqMenu_DrawPresetMenu+0x13a0>)
 8002b48:	f00d ff02 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002b4c:	7afb      	ldrb	r3, [r7, #11]
 8002b4e:	b29a      	uxth	r2, r3
 8002b50:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002b54:	9301      	str	r3, [sp, #4]
 8002b56:	2302      	movs	r3, #2
 8002b58:	9300      	str	r3, [sp, #0]
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	2178      	movs	r1, #120	; 0x78
 8002b5e:	486d      	ldr	r0, [pc, #436]	; (8002d14 <FreqMenu_DrawPresetMenu+0x13a4>)
 8002b60:	f00d fef6 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002b64:	7abb      	ldrb	r3, [r7, #10]
 8002b66:	b29a      	uxth	r2, r3
 8002b68:	2300      	movs	r3, #0
 8002b6a:	9301      	str	r3, [sp, #4]
 8002b6c:	2302      	movs	r3, #2
 8002b6e:	9300      	str	r3, [sp, #0]
 8002b70:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002b74:	2178      	movs	r1, #120	; 0x78
 8002b76:	4868      	ldr	r0, [pc, #416]	; (8002d18 <FreqMenu_DrawPresetMenu+0x13a8>)
 8002b78:	f00d feea 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002b7c:	7a7b      	ldrb	r3, [r7, #9]
 8002b7e:	b29a      	uxth	r2, r3
 8002b80:	2300      	movs	r3, #0
 8002b82:	9301      	str	r3, [sp, #4]
 8002b84:	2302      	movs	r3, #2
 8002b86:	9300      	str	r3, [sp, #0]
 8002b88:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002b8c:	2178      	movs	r1, #120	; 0x78
 8002b8e:	4863      	ldr	r0, [pc, #396]	; (8002d1c <FreqMenu_DrawPresetMenu+0x13ac>)
 8002b90:	f00d fede 	bl	8010950 <ILI9341_Draw_Text>
			break;
 8002b94:	e17a      	b.n	8002e8c <FreqMenu_DrawPresetMenu+0x151c>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002b96:	7bfb      	ldrb	r3, [r7, #15]
 8002b98:	b29a      	uxth	r2, r3
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	9301      	str	r3, [sp, #4]
 8002b9e:	2302      	movs	r3, #2
 8002ba0:	9300      	str	r3, [sp, #0]
 8002ba2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002ba6:	2105      	movs	r1, #5
 8002ba8:	484f      	ldr	r0, [pc, #316]	; (8002ce8 <FreqMenu_DrawPresetMenu+0x1378>)
 8002baa:	f00d fed1 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002bae:	7bbb      	ldrb	r3, [r7, #14]
 8002bb0:	b29a      	uxth	r2, r3
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	9301      	str	r3, [sp, #4]
 8002bb6:	2302      	movs	r3, #2
 8002bb8:	9300      	str	r3, [sp, #0]
 8002bba:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002bbe:	2105      	movs	r1, #5
 8002bc0:	484a      	ldr	r0, [pc, #296]	; (8002cec <FreqMenu_DrawPresetMenu+0x137c>)
 8002bc2:	f00d fec5 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002bc6:	7b7b      	ldrb	r3, [r7, #13]
 8002bc8:	b29a      	uxth	r2, r3
 8002bca:	2300      	movs	r3, #0
 8002bcc:	9301      	str	r3, [sp, #4]
 8002bce:	2302      	movs	r3, #2
 8002bd0:	9300      	str	r3, [sp, #0]
 8002bd2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002bd6:	2105      	movs	r1, #5
 8002bd8:	4845      	ldr	r0, [pc, #276]	; (8002cf0 <FreqMenu_DrawPresetMenu+0x1380>)
 8002bda:	f00d feb9 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002bde:	7b3b      	ldrb	r3, [r7, #12]
 8002be0:	b29a      	uxth	r2, r3
 8002be2:	2300      	movs	r3, #0
 8002be4:	9301      	str	r3, [sp, #4]
 8002be6:	2302      	movs	r3, #2
 8002be8:	9300      	str	r3, [sp, #0]
 8002bea:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002bee:	2105      	movs	r1, #5
 8002bf0:	4840      	ldr	r0, [pc, #256]	; (8002cf4 <FreqMenu_DrawPresetMenu+0x1384>)
 8002bf2:	f00d fead 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002bf6:	7afb      	ldrb	r3, [r7, #11]
 8002bf8:	b29a      	uxth	r2, r3
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	9301      	str	r3, [sp, #4]
 8002bfe:	2302      	movs	r3, #2
 8002c00:	9300      	str	r3, [sp, #0]
 8002c02:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002c06:	2105      	movs	r1, #5
 8002c08:	483b      	ldr	r0, [pc, #236]	; (8002cf8 <FreqMenu_DrawPresetMenu+0x1388>)
 8002c0a:	f00d fea1 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002c0e:	7abb      	ldrb	r3, [r7, #10]
 8002c10:	b29a      	uxth	r2, r3
 8002c12:	2300      	movs	r3, #0
 8002c14:	9301      	str	r3, [sp, #4]
 8002c16:	2302      	movs	r3, #2
 8002c18:	9300      	str	r3, [sp, #0]
 8002c1a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002c1e:	2105      	movs	r1, #5
 8002c20:	4836      	ldr	r0, [pc, #216]	; (8002cfc <FreqMenu_DrawPresetMenu+0x138c>)
 8002c22:	f00d fe95 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002c26:	7a7b      	ldrb	r3, [r7, #9]
 8002c28:	b29a      	uxth	r2, r3
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	9301      	str	r3, [sp, #4]
 8002c2e:	2302      	movs	r3, #2
 8002c30:	9300      	str	r3, [sp, #0]
 8002c32:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002c36:	2105      	movs	r1, #5
 8002c38:	4831      	ldr	r0, [pc, #196]	; (8002d00 <FreqMenu_DrawPresetMenu+0x1390>)
 8002c3a:	f00d fe89 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002c3e:	7bfb      	ldrb	r3, [r7, #15]
 8002c40:	b29a      	uxth	r2, r3
 8002c42:	2300      	movs	r3, #0
 8002c44:	9301      	str	r3, [sp, #4]
 8002c46:	2302      	movs	r3, #2
 8002c48:	9300      	str	r3, [sp, #0]
 8002c4a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002c4e:	2178      	movs	r1, #120	; 0x78
 8002c50:	482c      	ldr	r0, [pc, #176]	; (8002d04 <FreqMenu_DrawPresetMenu+0x1394>)
 8002c52:	f00d fe7d 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002c56:	7bbb      	ldrb	r3, [r7, #14]
 8002c58:	b29a      	uxth	r2, r3
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	9301      	str	r3, [sp, #4]
 8002c5e:	2302      	movs	r3, #2
 8002c60:	9300      	str	r3, [sp, #0]
 8002c62:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002c66:	2178      	movs	r1, #120	; 0x78
 8002c68:	4827      	ldr	r0, [pc, #156]	; (8002d08 <FreqMenu_DrawPresetMenu+0x1398>)
 8002c6a:	f00d fe71 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002c6e:	7b7b      	ldrb	r3, [r7, #13]
 8002c70:	b29a      	uxth	r2, r3
 8002c72:	2300      	movs	r3, #0
 8002c74:	9301      	str	r3, [sp, #4]
 8002c76:	2302      	movs	r3, #2
 8002c78:	9300      	str	r3, [sp, #0]
 8002c7a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002c7e:	2178      	movs	r1, #120	; 0x78
 8002c80:	4822      	ldr	r0, [pc, #136]	; (8002d0c <FreqMenu_DrawPresetMenu+0x139c>)
 8002c82:	f00d fe65 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002c86:	7b3b      	ldrb	r3, [r7, #12]
 8002c88:	b29a      	uxth	r2, r3
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	9301      	str	r3, [sp, #4]
 8002c8e:	2302      	movs	r3, #2
 8002c90:	9300      	str	r3, [sp, #0]
 8002c92:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002c96:	2178      	movs	r1, #120	; 0x78
 8002c98:	481d      	ldr	r0, [pc, #116]	; (8002d10 <FreqMenu_DrawPresetMenu+0x13a0>)
 8002c9a:	f00d fe59 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002c9e:	7afb      	ldrb	r3, [r7, #11]
 8002ca0:	b29a      	uxth	r2, r3
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	9301      	str	r3, [sp, #4]
 8002ca6:	2302      	movs	r3, #2
 8002ca8:	9300      	str	r3, [sp, #0]
 8002caa:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002cae:	2178      	movs	r1, #120	; 0x78
 8002cb0:	4818      	ldr	r0, [pc, #96]	; (8002d14 <FreqMenu_DrawPresetMenu+0x13a4>)
 8002cb2:	f00d fe4d 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002cb6:	7abb      	ldrb	r3, [r7, #10]
 8002cb8:	b29a      	uxth	r2, r3
 8002cba:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002cbe:	9301      	str	r3, [sp, #4]
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	9300      	str	r3, [sp, #0]
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	2178      	movs	r1, #120	; 0x78
 8002cc8:	4813      	ldr	r0, [pc, #76]	; (8002d18 <FreqMenu_DrawPresetMenu+0x13a8>)
 8002cca:	f00d fe41 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002cce:	7a7b      	ldrb	r3, [r7, #9]
 8002cd0:	b29a      	uxth	r2, r3
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	9301      	str	r3, [sp, #4]
 8002cd6:	2302      	movs	r3, #2
 8002cd8:	9300      	str	r3, [sp, #0]
 8002cda:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002cde:	2178      	movs	r1, #120	; 0x78
 8002ce0:	480e      	ldr	r0, [pc, #56]	; (8002d1c <FreqMenu_DrawPresetMenu+0x13ac>)
 8002ce2:	f00d fe35 	bl	8010950 <ILI9341_Draw_Text>
			break;
 8002ce6:	e0d1      	b.n	8002e8c <FreqMenu_DrawPresetMenu+0x151c>
 8002ce8:	080159e0 	.word	0x080159e0
 8002cec:	080159e8 	.word	0x080159e8
 8002cf0:	080159f0 	.word	0x080159f0
 8002cf4:	080159f8 	.word	0x080159f8
 8002cf8:	08015a00 	.word	0x08015a00
 8002cfc:	08015a08 	.word	0x08015a08
 8002d00:	08015a10 	.word	0x08015a10
 8002d04:	08015a18 	.word	0x08015a18
 8002d08:	08015a20 	.word	0x08015a20
 8002d0c:	08015a28 	.word	0x08015a28
 8002d10:	08015a30 	.word	0x08015a30
 8002d14:	08015a38 	.word	0x08015a38
 8002d18:	08015a40 	.word	0x08015a40
 8002d1c:	08015a48 	.word	0x08015a48
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002d20:	7bfb      	ldrb	r3, [r7, #15]
 8002d22:	b29a      	uxth	r2, r3
 8002d24:	2300      	movs	r3, #0
 8002d26:	9301      	str	r3, [sp, #4]
 8002d28:	2302      	movs	r3, #2
 8002d2a:	9300      	str	r3, [sp, #0]
 8002d2c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002d30:	2105      	movs	r1, #5
 8002d32:	4858      	ldr	r0, [pc, #352]	; (8002e94 <FreqMenu_DrawPresetMenu+0x1524>)
 8002d34:	f00d fe0c 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002d38:	7bbb      	ldrb	r3, [r7, #14]
 8002d3a:	b29a      	uxth	r2, r3
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	9301      	str	r3, [sp, #4]
 8002d40:	2302      	movs	r3, #2
 8002d42:	9300      	str	r3, [sp, #0]
 8002d44:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002d48:	2105      	movs	r1, #5
 8002d4a:	4853      	ldr	r0, [pc, #332]	; (8002e98 <FreqMenu_DrawPresetMenu+0x1528>)
 8002d4c:	f00d fe00 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002d50:	7b7b      	ldrb	r3, [r7, #13]
 8002d52:	b29a      	uxth	r2, r3
 8002d54:	2300      	movs	r3, #0
 8002d56:	9301      	str	r3, [sp, #4]
 8002d58:	2302      	movs	r3, #2
 8002d5a:	9300      	str	r3, [sp, #0]
 8002d5c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002d60:	2105      	movs	r1, #5
 8002d62:	484e      	ldr	r0, [pc, #312]	; (8002e9c <FreqMenu_DrawPresetMenu+0x152c>)
 8002d64:	f00d fdf4 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002d68:	7b3b      	ldrb	r3, [r7, #12]
 8002d6a:	b29a      	uxth	r2, r3
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	9301      	str	r3, [sp, #4]
 8002d70:	2302      	movs	r3, #2
 8002d72:	9300      	str	r3, [sp, #0]
 8002d74:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002d78:	2105      	movs	r1, #5
 8002d7a:	4849      	ldr	r0, [pc, #292]	; (8002ea0 <FreqMenu_DrawPresetMenu+0x1530>)
 8002d7c:	f00d fde8 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002d80:	7afb      	ldrb	r3, [r7, #11]
 8002d82:	b29a      	uxth	r2, r3
 8002d84:	2300      	movs	r3, #0
 8002d86:	9301      	str	r3, [sp, #4]
 8002d88:	2302      	movs	r3, #2
 8002d8a:	9300      	str	r3, [sp, #0]
 8002d8c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002d90:	2105      	movs	r1, #5
 8002d92:	4844      	ldr	r0, [pc, #272]	; (8002ea4 <FreqMenu_DrawPresetMenu+0x1534>)
 8002d94:	f00d fddc 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002d98:	7abb      	ldrb	r3, [r7, #10]
 8002d9a:	b29a      	uxth	r2, r3
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	9301      	str	r3, [sp, #4]
 8002da0:	2302      	movs	r3, #2
 8002da2:	9300      	str	r3, [sp, #0]
 8002da4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002da8:	2105      	movs	r1, #5
 8002daa:	483f      	ldr	r0, [pc, #252]	; (8002ea8 <FreqMenu_DrawPresetMenu+0x1538>)
 8002dac:	f00d fdd0 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002db0:	7a7b      	ldrb	r3, [r7, #9]
 8002db2:	b29a      	uxth	r2, r3
 8002db4:	2300      	movs	r3, #0
 8002db6:	9301      	str	r3, [sp, #4]
 8002db8:	2302      	movs	r3, #2
 8002dba:	9300      	str	r3, [sp, #0]
 8002dbc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002dc0:	2105      	movs	r1, #5
 8002dc2:	483a      	ldr	r0, [pc, #232]	; (8002eac <FreqMenu_DrawPresetMenu+0x153c>)
 8002dc4:	f00d fdc4 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002dc8:	7bfb      	ldrb	r3, [r7, #15]
 8002dca:	b29a      	uxth	r2, r3
 8002dcc:	2300      	movs	r3, #0
 8002dce:	9301      	str	r3, [sp, #4]
 8002dd0:	2302      	movs	r3, #2
 8002dd2:	9300      	str	r3, [sp, #0]
 8002dd4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002dd8:	2178      	movs	r1, #120	; 0x78
 8002dda:	4835      	ldr	r0, [pc, #212]	; (8002eb0 <FreqMenu_DrawPresetMenu+0x1540>)
 8002ddc:	f00d fdb8 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002de0:	7bbb      	ldrb	r3, [r7, #14]
 8002de2:	b29a      	uxth	r2, r3
 8002de4:	2300      	movs	r3, #0
 8002de6:	9301      	str	r3, [sp, #4]
 8002de8:	2302      	movs	r3, #2
 8002dea:	9300      	str	r3, [sp, #0]
 8002dec:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002df0:	2178      	movs	r1, #120	; 0x78
 8002df2:	4830      	ldr	r0, [pc, #192]	; (8002eb4 <FreqMenu_DrawPresetMenu+0x1544>)
 8002df4:	f00d fdac 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002df8:	7b7b      	ldrb	r3, [r7, #13]
 8002dfa:	b29a      	uxth	r2, r3
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	9301      	str	r3, [sp, #4]
 8002e00:	2302      	movs	r3, #2
 8002e02:	9300      	str	r3, [sp, #0]
 8002e04:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002e08:	2178      	movs	r1, #120	; 0x78
 8002e0a:	482b      	ldr	r0, [pc, #172]	; (8002eb8 <FreqMenu_DrawPresetMenu+0x1548>)
 8002e0c:	f00d fda0 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002e10:	7b3b      	ldrb	r3, [r7, #12]
 8002e12:	b29a      	uxth	r2, r3
 8002e14:	2300      	movs	r3, #0
 8002e16:	9301      	str	r3, [sp, #4]
 8002e18:	2302      	movs	r3, #2
 8002e1a:	9300      	str	r3, [sp, #0]
 8002e1c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002e20:	2178      	movs	r1, #120	; 0x78
 8002e22:	4826      	ldr	r0, [pc, #152]	; (8002ebc <FreqMenu_DrawPresetMenu+0x154c>)
 8002e24:	f00d fd94 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002e28:	7afb      	ldrb	r3, [r7, #11]
 8002e2a:	b29a      	uxth	r2, r3
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	9301      	str	r3, [sp, #4]
 8002e30:	2302      	movs	r3, #2
 8002e32:	9300      	str	r3, [sp, #0]
 8002e34:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002e38:	2178      	movs	r1, #120	; 0x78
 8002e3a:	4821      	ldr	r0, [pc, #132]	; (8002ec0 <FreqMenu_DrawPresetMenu+0x1550>)
 8002e3c:	f00d fd88 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002e40:	7abb      	ldrb	r3, [r7, #10]
 8002e42:	b29a      	uxth	r2, r3
 8002e44:	2300      	movs	r3, #0
 8002e46:	9301      	str	r3, [sp, #4]
 8002e48:	2302      	movs	r3, #2
 8002e4a:	9300      	str	r3, [sp, #0]
 8002e4c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002e50:	2178      	movs	r1, #120	; 0x78
 8002e52:	481c      	ldr	r0, [pc, #112]	; (8002ec4 <FreqMenu_DrawPresetMenu+0x1554>)
 8002e54:	f00d fd7c 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002e58:	7a7b      	ldrb	r3, [r7, #9]
 8002e5a:	b29a      	uxth	r2, r3
 8002e5c:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002e60:	9301      	str	r3, [sp, #4]
 8002e62:	2302      	movs	r3, #2
 8002e64:	9300      	str	r3, [sp, #0]
 8002e66:	2300      	movs	r3, #0
 8002e68:	2178      	movs	r1, #120	; 0x78
 8002e6a:	4817      	ldr	r0, [pc, #92]	; (8002ec8 <FreqMenu_DrawPresetMenu+0x1558>)
 8002e6c:	f00d fd70 	bl	8010950 <ILI9341_Draw_Text>
			break;
 8002e70:	bf00      	nop
 8002e72:	e00b      	b.n	8002e8c <FreqMenu_DrawPresetMenu+0x151c>
		ILI9341_Draw_Text("FreqMenus::FreqMenu_DrawFreqPresetMenu() Error", 		5, 180, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 8002e74:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8002e78:	9301      	str	r3, [sp, #4]
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	9300      	str	r3, [sp, #0]
 8002e7e:	2300      	movs	r3, #0
 8002e80:	22b4      	movs	r2, #180	; 0xb4
 8002e82:	2105      	movs	r1, #5
 8002e84:	4811      	ldr	r0, [pc, #68]	; (8002ecc <FreqMenu_DrawPresetMenu+0x155c>)
 8002e86:	f00d fd63 	bl	8010950 <ILI9341_Draw_Text>
}
 8002e8a:	e7ff      	b.n	8002e8c <FreqMenu_DrawPresetMenu+0x151c>
 8002e8c:	bf00      	nop
 8002e8e:	3710      	adds	r7, #16
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	080159e0 	.word	0x080159e0
 8002e98:	080159e8 	.word	0x080159e8
 8002e9c:	080159f0 	.word	0x080159f0
 8002ea0:	080159f8 	.word	0x080159f8
 8002ea4:	08015a00 	.word	0x08015a00
 8002ea8:	08015a08 	.word	0x08015a08
 8002eac:	08015a10 	.word	0x08015a10
 8002eb0:	08015a18 	.word	0x08015a18
 8002eb4:	08015a20 	.word	0x08015a20
 8002eb8:	08015a28 	.word	0x08015a28
 8002ebc:	08015a30 	.word	0x08015a30
 8002ec0:	08015a38 	.word	0x08015a38
 8002ec4:	08015a40 	.word	0x08015a40
 8002ec8:	08015a48 	.word	0x08015a48
 8002ecc:	08015a54 	.word	0x08015a54

08002ed0 <FreqMenu_DrawAdjustMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawAdjustMenu()
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FREQ->ADJUST", 5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8002ed6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002eda:	9301      	str	r3, [sp, #4]
 8002edc:	2302      	movs	r3, #2
 8002ede:	9300      	str	r3, [sp, #0]
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	220a      	movs	r2, #10
 8002ee4:	2105      	movs	r1, #5
 8002ee6:	4804      	ldr	r0, [pc, #16]	; (8002ef8 <FreqMenu_DrawAdjustMenu+0x28>)
 8002ee8:	f00d fd32 	bl	8010950 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8002eec:	f7fd ffb4 	bl	8000e58 <DM_DisplayFormattedOutput>
	//snprintf(freq, sizeof(freq), "%u", (uint8_t)FreqO_GetOutputFreq());
	if(DM_AddDigitPadding((uint16_t)FreqO_GetOutputFreq(), freq, sizeof(freq)) == 0)
		ILI9341_Draw_Text(freq, 250, 150, WHITE, 1, BLACK);
*/

}
 8002ef0:	bf00      	nop
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	08015a84 	.word	0x08015a84

08002efc <FreqMenu_DrawSweepMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawSweepMenu()
{
 8002efc:	b5b0      	push	{r4, r5, r7, lr}
 8002efe:	b0a0      	sub	sp, #128	; 0x80
 8002f00:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FREQ->SWEEP", 	5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8002f02:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f06:	9301      	str	r3, [sp, #4]
 8002f08:	2302      	movs	r3, #2
 8002f0a:	9300      	str	r3, [sp, #0]
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	220a      	movs	r2, #10
 8002f10:	2105      	movs	r1, #5
 8002f12:	48a2      	ldr	r0, [pc, #648]	; (800319c <FreqMenu_DrawSweepMenu+0x2a0>)
 8002f14:	f00d fd1c 	bl	8010950 <ILI9341_Draw_Text>
	DM_DisplayInputTriggerStatus();
 8002f18:	f7fd ffbe 	bl	8000e98 <DM_DisplayInputTriggerStatus>

	// draw enabled status


	char enabled_text[20] = "";
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	667b      	str	r3, [r7, #100]	; 0x64
 8002f20:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002f24:	2200      	movs	r2, #0
 8002f26:	601a      	str	r2, [r3, #0]
 8002f28:	605a      	str	r2, [r3, #4]
 8002f2a:	609a      	str	r2, [r3, #8]
 8002f2c:	60da      	str	r2, [r3, #12]
	if((SWEEP_TIMER->CR1 & TIM_CR1_CEN) == TIM_CR1_CEN)
 8002f2e:	4b9c      	ldr	r3, [pc, #624]	; (80031a0 <FreqMenu_DrawSweepMenu+0x2a4>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0301 	and.w	r3, r3, #1
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d109      	bne.n	8002f4e <FreqMenu_DrawSweepMenu+0x52>
	{
		snprintf(enabled_text, sizeof(enabled_text), "STATUS:  RUNNING");
 8002f3a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002f3e:	4a99      	ldr	r2, [pc, #612]	; (80031a4 <FreqMenu_DrawSweepMenu+0x2a8>)
 8002f40:	461c      	mov	r4, r3
 8002f42:	4615      	mov	r5, r2
 8002f44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f48:	682b      	ldr	r3, [r5, #0]
 8002f4a:	7023      	strb	r3, [r4, #0]
 8002f4c:	e008      	b.n	8002f60 <FreqMenu_DrawSweepMenu+0x64>
	}
	else
	{
		snprintf(enabled_text, sizeof(enabled_text), "STATUS:  STOPPED");
 8002f4e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002f52:	4a95      	ldr	r2, [pc, #596]	; (80031a8 <FreqMenu_DrawSweepMenu+0x2ac>)
 8002f54:	461c      	mov	r4, r3
 8002f56:	4615      	mov	r5, r2
 8002f58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f5c:	682b      	ldr	r3, [r5, #0]
 8002f5e:	7023      	strb	r3, [r4, #0]
	}

	ILI9341_Draw_Text(enabled_text, 5, 40, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002f60:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8002f64:	2300      	movs	r3, #0
 8002f66:	9301      	str	r3, [sp, #4]
 8002f68:	2302      	movs	r3, #2
 8002f6a:	9300      	str	r3, [sp, #0]
 8002f6c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002f70:	2228      	movs	r2, #40	; 0x28
 8002f72:	2105      	movs	r1, #5
 8002f74:	f00d fcec 	bl	8010950 <ILI9341_Draw_Text>

	// draw output freq status
	char out_hertz[25] = "";
 8002f78:	2300      	movs	r3, #0
 8002f7a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f7c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002f80:	2200      	movs	r2, #0
 8002f82:	601a      	str	r2, [r3, #0]
 8002f84:	605a      	str	r2, [r3, #4]
 8002f86:	609a      	str	r2, [r3, #8]
 8002f88:	60da      	str	r2, [r3, #12]
 8002f8a:	611a      	str	r2, [r3, #16]
 8002f8c:	751a      	strb	r2, [r3, #20]
	snprintf(out_hertz, sizeof(out_hertz), "OUTPUT: %7.2f Hz", SM_GetOutputInHertz());
 8002f8e:	f003 ffa5 	bl	8006edc <SM_GetOutputInHertz>
 8002f92:	ee10 3a10 	vmov	r3, s0
 8002f96:	4618      	mov	r0, r3
 8002f98:	f7fd fafe 	bl	8000598 <__aeabi_f2d>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	460c      	mov	r4, r1
 8002fa0:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8002fa4:	e9cd 3400 	strd	r3, r4, [sp]
 8002fa8:	4a80      	ldr	r2, [pc, #512]	; (80031ac <FreqMenu_DrawSweepMenu+0x2b0>)
 8002faa:	2119      	movs	r1, #25
 8002fac:	f00f f88c 	bl	80120c8 <sniprintf>
	ILI9341_Draw_Text(out_hertz, 5, 60, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002fb0:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	9301      	str	r3, [sp, #4]
 8002fb8:	2302      	movs	r3, #2
 8002fba:	9300      	str	r3, [sp, #0]
 8002fbc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002fc0:	223c      	movs	r2, #60	; 0x3c
 8002fc2:	2105      	movs	r1, #5
 8002fc4:	f00d fcc4 	bl	8010950 <ILI9341_Draw_Text>
		//snprintf(dir_text, sizeof(dir_text), "DIRECTION:  N/A");
	}
	else
	{
*/
		ILI9341_Draw_Text("SWEEP MODE:", 5, 100, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002fc8:	2300      	movs	r3, #0
 8002fca:	9301      	str	r3, [sp, #4]
 8002fcc:	2302      	movs	r3, #2
 8002fce:	9300      	str	r3, [sp, #0]
 8002fd0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002fd4:	2264      	movs	r2, #100	; 0x64
 8002fd6:	2105      	movs	r1, #5
 8002fd8:	4875      	ldr	r0, [pc, #468]	; (80031b0 <FreqMenu_DrawSweepMenu+0x2b4>)
 8002fda:	f00d fcb9 	bl	8010950 <ILI9341_Draw_Text>

		// get direction
		if((SWEEP_TIMER->CR1 & TIM_CR1_DIR) == TIM_CR1_DIR)
 8002fde:	4b70      	ldr	r3, [pc, #448]	; (80031a0 <FreqMenu_DrawSweepMenu+0x2a4>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0310 	and.w	r3, r3, #16
 8002fe6:	2b10      	cmp	r3, #16
 8002fe8:	d117      	bne.n	800301a <FreqMenu_DrawSweepMenu+0x11e>
		{
			ILI9341_Draw_Text("UP", 235, 100, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002fea:	2300      	movs	r3, #0
 8002fec:	9301      	str	r3, [sp, #4]
 8002fee:	2302      	movs	r3, #2
 8002ff0:	9300      	str	r3, [sp, #0]
 8002ff2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002ff6:	2264      	movs	r2, #100	; 0x64
 8002ff8:	21eb      	movs	r1, #235	; 0xeb
 8002ffa:	486e      	ldr	r0, [pc, #440]	; (80031b4 <FreqMenu_DrawSweepMenu+0x2b8>)
 8002ffc:	f00d fca8 	bl	8010950 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("DOWN", 265, 100, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003000:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003004:	9301      	str	r3, [sp, #4]
 8003006:	2302      	movs	r3, #2
 8003008:	9300      	str	r3, [sp, #0]
 800300a:	2300      	movs	r3, #0
 800300c:	2264      	movs	r2, #100	; 0x64
 800300e:	f240 1109 	movw	r1, #265	; 0x109
 8003012:	4869      	ldr	r0, [pc, #420]	; (80031b8 <FreqMenu_DrawSweepMenu+0x2bc>)
 8003014:	f00d fc9c 	bl	8010950 <ILI9341_Draw_Text>
 8003018:	e016      	b.n	8003048 <FreqMenu_DrawSweepMenu+0x14c>
		}
		else
		{
			ILI9341_Draw_Text("DOWN", 265, 100, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800301a:	2300      	movs	r3, #0
 800301c:	9301      	str	r3, [sp, #4]
 800301e:	2302      	movs	r3, #2
 8003020:	9300      	str	r3, [sp, #0]
 8003022:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003026:	2264      	movs	r2, #100	; 0x64
 8003028:	f240 1109 	movw	r1, #265	; 0x109
 800302c:	4862      	ldr	r0, [pc, #392]	; (80031b8 <FreqMenu_DrawSweepMenu+0x2bc>)
 800302e:	f00d fc8f 	bl	8010950 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("UP", 235, 100, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003032:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003036:	9301      	str	r3, [sp, #4]
 8003038:	2302      	movs	r3, #2
 800303a:	9300      	str	r3, [sp, #0]
 800303c:	2300      	movs	r3, #0
 800303e:	2264      	movs	r2, #100	; 0x64
 8003040:	21eb      	movs	r1, #235	; 0xeb
 8003042:	485c      	ldr	r0, [pc, #368]	; (80031b4 <FreqMenu_DrawSweepMenu+0x2b8>)
 8003044:	f00d fc84 	bl	8010950 <ILI9341_Draw_Text>




	// draw rate status
	if(theCurrentEncoderSweepFunction == ENCODER_SWEEP_SPEED_FUNCTION)
 8003048:	4b5c      	ldr	r3, [pc, #368]	; (80031bc <FreqMenu_DrawSweepMenu+0x2c0>)
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d10b      	bne.n	8003068 <FreqMenu_DrawSweepMenu+0x16c>
	{
		ILI9341_Draw_Text("SWEEP SPEED:", 5, 120, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003050:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003054:	9301      	str	r3, [sp, #4]
 8003056:	2302      	movs	r3, #2
 8003058:	9300      	str	r3, [sp, #0]
 800305a:	2300      	movs	r3, #0
 800305c:	2278      	movs	r2, #120	; 0x78
 800305e:	2105      	movs	r1, #5
 8003060:	4857      	ldr	r0, [pc, #348]	; (80031c0 <FreqMenu_DrawSweepMenu+0x2c4>)
 8003062:	f00d fc75 	bl	8010950 <ILI9341_Draw_Text>
 8003066:	e00a      	b.n	800307e <FreqMenu_DrawSweepMenu+0x182>
	}
	else
	{
		ILI9341_Draw_Text("SWEEP SPEED:", 5, 120, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003068:	2300      	movs	r3, #0
 800306a:	9301      	str	r3, [sp, #4]
 800306c:	2302      	movs	r3, #2
 800306e:	9300      	str	r3, [sp, #0]
 8003070:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003074:	2278      	movs	r2, #120	; 0x78
 8003076:	2105      	movs	r1, #5
 8003078:	4851      	ldr	r0, [pc, #324]	; (80031c0 <FreqMenu_DrawSweepMenu+0x2c4>)
 800307a:	f00d fc69 	bl	8010950 <ILI9341_Draw_Text>
	}
	char arr_text[25] = "";
 800307e:	2300      	movs	r3, #0
 8003080:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003082:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003086:	2200      	movs	r2, #0
 8003088:	601a      	str	r2, [r3, #0]
 800308a:	605a      	str	r2, [r3, #4]
 800308c:	609a      	str	r2, [r3, #8]
 800308e:	60da      	str	r2, [r3, #12]
 8003090:	611a      	str	r2, [r3, #16]
 8003092:	751a      	strb	r2, [r3, #20]
	snprintf(arr_text, sizeof(arr_text), "%8.3f Hz", calculated_sweep_in_hertz);
 8003094:	4b4b      	ldr	r3, [pc, #300]	; (80031c4 <FreqMenu_DrawSweepMenu+0x2c8>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4618      	mov	r0, r3
 800309a:	f7fd fa7d 	bl	8000598 <__aeabi_f2d>
 800309e:	4603      	mov	r3, r0
 80030a0:	460c      	mov	r4, r1
 80030a2:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80030a6:	e9cd 3400 	strd	r3, r4, [sp]
 80030aa:	4a47      	ldr	r2, [pc, #284]	; (80031c8 <FreqMenu_DrawSweepMenu+0x2cc>)
 80030ac:	2119      	movs	r1, #25
 80030ae:	f00f f80b 	bl	80120c8 <sniprintf>
	ILI9341_Draw_Text(arr_text, 182, 120, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80030b2:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80030b6:	2300      	movs	r3, #0
 80030b8:	9301      	str	r3, [sp, #4]
 80030ba:	2302      	movs	r3, #2
 80030bc:	9300      	str	r3, [sp, #0]
 80030be:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80030c2:	2278      	movs	r2, #120	; 0x78
 80030c4:	21b6      	movs	r1, #182	; 0xb6
 80030c6:	f00d fc43 	bl	8010950 <ILI9341_Draw_Text>


	// draw upper sweep bounds
	if( (theCurrentEncoderSweepFunction == ENCODER_SWEEP_LIMIT_FUNCTION) && (active_sweep_mode == SWEEP_MODE_UP) )
 80030ca:	4b3c      	ldr	r3, [pc, #240]	; (80031bc <FreqMenu_DrawSweepMenu+0x2c0>)
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d10f      	bne.n	80030f2 <FreqMenu_DrawSweepMenu+0x1f6>
 80030d2:	4b3e      	ldr	r3, [pc, #248]	; (80031cc <FreqMenu_DrawSweepMenu+0x2d0>)
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d10b      	bne.n	80030f2 <FreqMenu_DrawSweepMenu+0x1f6>
	{
		ILI9341_Draw_Text("SWEEP UPPER:", 5, 140, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);	// highlighted
 80030da:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80030de:	9301      	str	r3, [sp, #4]
 80030e0:	2302      	movs	r3, #2
 80030e2:	9300      	str	r3, [sp, #0]
 80030e4:	2300      	movs	r3, #0
 80030e6:	228c      	movs	r2, #140	; 0x8c
 80030e8:	2105      	movs	r1, #5
 80030ea:	4839      	ldr	r0, [pc, #228]	; (80031d0 <FreqMenu_DrawSweepMenu+0x2d4>)
 80030ec:	f00d fc30 	bl	8010950 <ILI9341_Draw_Text>
 80030f0:	e00a      	b.n	8003108 <FreqMenu_DrawSweepMenu+0x20c>
		//ILI9341_Draw_Arrow(ARROW_UP, 280, 120, 10, BLACK);
	}
	else
	{
		ILI9341_Draw_Text("SWEEP UPPER:", 5, 140, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80030f2:	2300      	movs	r3, #0
 80030f4:	9301      	str	r3, [sp, #4]
 80030f6:	2302      	movs	r3, #2
 80030f8:	9300      	str	r3, [sp, #0]
 80030fa:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80030fe:	228c      	movs	r2, #140	; 0x8c
 8003100:	2105      	movs	r1, #5
 8003102:	4833      	ldr	r0, [pc, #204]	; (80031d0 <FreqMenu_DrawSweepMenu+0x2d4>)
 8003104:	f00d fc24 	bl	8010950 <ILI9341_Draw_Text>
	}
	char sweep_lower_text[20] = "";
 8003108:	2300      	movs	r3, #0
 800310a:	61bb      	str	r3, [r7, #24]
 800310c:	f107 031c 	add.w	r3, r7, #28
 8003110:	2200      	movs	r2, #0
 8003112:	601a      	str	r2, [r3, #0]
 8003114:	605a      	str	r2, [r3, #4]
 8003116:	609a      	str	r2, [r3, #8]
 8003118:	60da      	str	r2, [r3, #12]
	snprintf(sweep_lower_text, sizeof(sweep_lower_text), "%9.2f  Hz", SM_ConvertPeriodToHertz(sweep_lower_bounds_shortest_output_arr, OUTPUT_TIMER->PSC) /SM_FSAMP);
 800311a:	4b2e      	ldr	r3, [pc, #184]	; (80031d4 <FreqMenu_DrawSweepMenu+0x2d8>)
 800311c:	edd3 7a00 	vldr	s15, [r3]
 8003120:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003124:	4b2c      	ldr	r3, [pc, #176]	; (80031d8 <FreqMenu_DrawSweepMenu+0x2dc>)
 8003126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003128:	b29b      	uxth	r3, r3
 800312a:	4619      	mov	r1, r3
 800312c:	ee17 0a90 	vmov	r0, s15
 8003130:	f003 ff18 	bl	8006f64 <SM_ConvertPeriodToHertz>
 8003134:	eeb0 7a40 	vmov.f32	s14, s0
 8003138:	eddf 7a28 	vldr	s15, [pc, #160]	; 80031dc <FreqMenu_DrawSweepMenu+0x2e0>
 800313c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003140:	ee16 0a90 	vmov	r0, s13
 8003144:	f7fd fa28 	bl	8000598 <__aeabi_f2d>
 8003148:	4603      	mov	r3, r0
 800314a:	460c      	mov	r4, r1
 800314c:	f107 0018 	add.w	r0, r7, #24
 8003150:	e9cd 3400 	strd	r3, r4, [sp]
 8003154:	4a22      	ldr	r2, [pc, #136]	; (80031e0 <FreqMenu_DrawSweepMenu+0x2e4>)
 8003156:	2114      	movs	r1, #20
 8003158:	f00e ffb6 	bl	80120c8 <sniprintf>
	ILI9341_Draw_Text(sweep_lower_text, 158, 140, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800315c:	f107 0018 	add.w	r0, r7, #24
 8003160:	2300      	movs	r3, #0
 8003162:	9301      	str	r3, [sp, #4]
 8003164:	2302      	movs	r3, #2
 8003166:	9300      	str	r3, [sp, #0]
 8003168:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800316c:	228c      	movs	r2, #140	; 0x8c
 800316e:	219e      	movs	r1, #158	; 0x9e
 8003170:	f00d fbee 	bl	8010950 <ILI9341_Draw_Text>


	// draw lower sweep bounds
	if( (theCurrentEncoderSweepFunction == ENCODER_SWEEP_LIMIT_FUNCTION) && (active_sweep_mode == SWEEP_MODE_DOWN) )
 8003174:	4b11      	ldr	r3, [pc, #68]	; (80031bc <FreqMenu_DrawSweepMenu+0x2c0>)
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	2b01      	cmp	r3, #1
 800317a:	d135      	bne.n	80031e8 <FreqMenu_DrawSweepMenu+0x2ec>
 800317c:	4b13      	ldr	r3, [pc, #76]	; (80031cc <FreqMenu_DrawSweepMenu+0x2d0>)
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	2b01      	cmp	r3, #1
 8003182:	d131      	bne.n	80031e8 <FreqMenu_DrawSweepMenu+0x2ec>
	{
		ILI9341_Draw_Text("SWEEP LOWER:", 5, 160, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR); 	// highlighted
 8003184:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003188:	9301      	str	r3, [sp, #4]
 800318a:	2302      	movs	r3, #2
 800318c:	9300      	str	r3, [sp, #0]
 800318e:	2300      	movs	r3, #0
 8003190:	22a0      	movs	r2, #160	; 0xa0
 8003192:	2105      	movs	r1, #5
 8003194:	4813      	ldr	r0, [pc, #76]	; (80031e4 <FreqMenu_DrawSweepMenu+0x2e8>)
 8003196:	f00d fbdb 	bl	8010950 <ILI9341_Draw_Text>
 800319a:	e030      	b.n	80031fe <FreqMenu_DrawSweepMenu+0x302>
 800319c:	08015a98 	.word	0x08015a98
 80031a0:	40000c00 	.word	0x40000c00
 80031a4:	08015aac 	.word	0x08015aac
 80031a8:	08015ac0 	.word	0x08015ac0
 80031ac:	08015ad4 	.word	0x08015ad4
 80031b0:	08015ae8 	.word	0x08015ae8
 80031b4:	08015af4 	.word	0x08015af4
 80031b8:	08015af8 	.word	0x08015af8
 80031bc:	200020d4 	.word	0x200020d4
 80031c0:	08015b00 	.word	0x08015b00
 80031c4:	20002168 	.word	0x20002168
 80031c8:	08015b10 	.word	0x08015b10
 80031cc:	200020d3 	.word	0x200020d3
 80031d0:	08015b1c 	.word	0x08015b1c
 80031d4:	20000120 	.word	0x20000120
 80031d8:	40013400 	.word	0x40013400
 80031dc:	42f00000 	.word	0x42f00000
 80031e0:	08015b2c 	.word	0x08015b2c
 80031e4:	08015b38 	.word	0x08015b38
		//ILI9341_Draw_Arrow(ARROW_DOWN, 280, 130, 10, BLACK);
	}
	else
	{
		ILI9341_Draw_Text("SWEEP LOWER:", 5, 160, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80031e8:	2300      	movs	r3, #0
 80031ea:	9301      	str	r3, [sp, #4]
 80031ec:	2302      	movs	r3, #2
 80031ee:	9300      	str	r3, [sp, #0]
 80031f0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80031f4:	22a0      	movs	r2, #160	; 0xa0
 80031f6:	2105      	movs	r1, #5
 80031f8:	484d      	ldr	r0, [pc, #308]	; (8003330 <FreqMenu_DrawSweepMenu+0x434>)
 80031fa:	f00d fba9 	bl	8010950 <ILI9341_Draw_Text>
	}
	char sweep_upper_text[20] = "";
 80031fe:	2300      	movs	r3, #0
 8003200:	607b      	str	r3, [r7, #4]
 8003202:	f107 0308 	add.w	r3, r7, #8
 8003206:	2200      	movs	r2, #0
 8003208:	601a      	str	r2, [r3, #0]
 800320a:	605a      	str	r2, [r3, #4]
 800320c:	609a      	str	r2, [r3, #8]
 800320e:	60da      	str	r2, [r3, #12]
	snprintf(sweep_upper_text, sizeof(sweep_upper_text), "%8.2f  Hz", SM_ConvertPeriodToHertz(sweep_upper_bounds_longest_output_arr, OUTPUT_TIMER->PSC) /SM_FSAMP );
 8003210:	4b48      	ldr	r3, [pc, #288]	; (8003334 <FreqMenu_DrawSweepMenu+0x438>)
 8003212:	edd3 7a00 	vldr	s15, [r3]
 8003216:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800321a:	4b47      	ldr	r3, [pc, #284]	; (8003338 <FreqMenu_DrawSweepMenu+0x43c>)
 800321c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800321e:	b29b      	uxth	r3, r3
 8003220:	4619      	mov	r1, r3
 8003222:	ee17 0a90 	vmov	r0, s15
 8003226:	f003 fe9d 	bl	8006f64 <SM_ConvertPeriodToHertz>
 800322a:	eeb0 7a40 	vmov.f32	s14, s0
 800322e:	eddf 7a43 	vldr	s15, [pc, #268]	; 800333c <FreqMenu_DrawSweepMenu+0x440>
 8003232:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003236:	ee16 0a90 	vmov	r0, s13
 800323a:	f7fd f9ad 	bl	8000598 <__aeabi_f2d>
 800323e:	4603      	mov	r3, r0
 8003240:	460c      	mov	r4, r1
 8003242:	1d38      	adds	r0, r7, #4
 8003244:	e9cd 3400 	strd	r3, r4, [sp]
 8003248:	4a3d      	ldr	r2, [pc, #244]	; (8003340 <FreqMenu_DrawSweepMenu+0x444>)
 800324a:	2114      	movs	r1, #20
 800324c:	f00e ff3c 	bl	80120c8 <sniprintf>
	ILI9341_Draw_Text(sweep_upper_text, 170, 160, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003250:	1d38      	adds	r0, r7, #4
 8003252:	2300      	movs	r3, #0
 8003254:	9301      	str	r3, [sp, #4]
 8003256:	2302      	movs	r3, #2
 8003258:	9300      	str	r3, [sp, #0]
 800325a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800325e:	22a0      	movs	r2, #160	; 0xa0
 8003260:	21aa      	movs	r1, #170	; 0xaa
 8003262:	f00d fb75 	bl	8010950 <ILI9341_Draw_Text>


	// draw bottom menu button text
	if((SWEEP_TIMER->CR1 & TIM_CR1_CEN) == TIM_CR1_CEN)
 8003266:	4b37      	ldr	r3, [pc, #220]	; (8003344 <FreqMenu_DrawSweepMenu+0x448>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0301 	and.w	r3, r3, #1
 800326e:	2b01      	cmp	r3, #1
 8003270:	d10b      	bne.n	800328a <FreqMenu_DrawSweepMenu+0x38e>
		ILI9341_Draw_Text("PAUSE ", 6, 213, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003272:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003276:	9301      	str	r3, [sp, #4]
 8003278:	2302      	movs	r3, #2
 800327a:	9300      	str	r3, [sp, #0]
 800327c:	2300      	movs	r3, #0
 800327e:	22d5      	movs	r2, #213	; 0xd5
 8003280:	2106      	movs	r1, #6
 8003282:	4831      	ldr	r0, [pc, #196]	; (8003348 <FreqMenu_DrawSweepMenu+0x44c>)
 8003284:	f00d fb64 	bl	8010950 <ILI9341_Draw_Text>
 8003288:	e00a      	b.n	80032a0 <FreqMenu_DrawSweepMenu+0x3a4>
	else
		ILI9341_Draw_Text("RESUME", 5, 213, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 800328a:	f240 23fd 	movw	r3, #765	; 0x2fd
 800328e:	9301      	str	r3, [sp, #4]
 8003290:	2302      	movs	r3, #2
 8003292:	9300      	str	r3, [sp, #0]
 8003294:	2300      	movs	r3, #0
 8003296:	22d5      	movs	r2, #213	; 0xd5
 8003298:	2105      	movs	r1, #5
 800329a:	482c      	ldr	r0, [pc, #176]	; (800334c <FreqMenu_DrawSweepMenu+0x450>)
 800329c:	f00d fb58 	bl	8010950 <ILI9341_Draw_Text>

	ILI9341_Draw_Text("SET", 	104,	204, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 80032a0:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80032a4:	9301      	str	r3, [sp, #4]
 80032a6:	2302      	movs	r3, #2
 80032a8:	9300      	str	r3, [sp, #0]
 80032aa:	2300      	movs	r3, #0
 80032ac:	22cc      	movs	r2, #204	; 0xcc
 80032ae:	2168      	movs	r1, #104	; 0x68
 80032b0:	4827      	ldr	r0, [pc, #156]	; (8003350 <FreqMenu_DrawSweepMenu+0x454>)
 80032b2:	f00d fb4d 	bl	8010950 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("MODE",	97, 	222, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 80032b6:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80032ba:	9301      	str	r3, [sp, #4]
 80032bc:	2302      	movs	r3, #2
 80032be:	9300      	str	r3, [sp, #0]
 80032c0:	2300      	movs	r3, #0
 80032c2:	22de      	movs	r2, #222	; 0xde
 80032c4:	2161      	movs	r1, #97	; 0x61
 80032c6:	4823      	ldr	r0, [pc, #140]	; (8003354 <FreqMenu_DrawSweepMenu+0x458>)
 80032c8:	f00d fb42 	bl	8010950 <ILI9341_Draw_Text>

	ILI9341_Draw_Text("SET", 	183,	204, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80032cc:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80032d0:	9301      	str	r3, [sp, #4]
 80032d2:	2302      	movs	r3, #2
 80032d4:	9300      	str	r3, [sp, #0]
 80032d6:	2300      	movs	r3, #0
 80032d8:	22cc      	movs	r2, #204	; 0xcc
 80032da:	21b7      	movs	r1, #183	; 0xb7
 80032dc:	481c      	ldr	r0, [pc, #112]	; (8003350 <FreqMenu_DrawSweepMenu+0x454>)
 80032de:	f00d fb37 	bl	8010950 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SPEED",	173, 	222, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80032e2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80032e6:	9301      	str	r3, [sp, #4]
 80032e8:	2302      	movs	r3, #2
 80032ea:	9300      	str	r3, [sp, #0]
 80032ec:	2300      	movs	r3, #0
 80032ee:	22de      	movs	r2, #222	; 0xde
 80032f0:	21ad      	movs	r1, #173	; 0xad
 80032f2:	4819      	ldr	r0, [pc, #100]	; (8003358 <FreqMenu_DrawSweepMenu+0x45c>)
 80032f4:	f00d fb2c 	bl	8010950 <ILI9341_Draw_Text>

	ILI9341_Draw_Text("SET", 	263, 	204, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 80032f8:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80032fc:	9301      	str	r3, [sp, #4]
 80032fe:	2302      	movs	r3, #2
 8003300:	9300      	str	r3, [sp, #0]
 8003302:	2300      	movs	r3, #0
 8003304:	22cc      	movs	r2, #204	; 0xcc
 8003306:	f240 1107 	movw	r1, #263	; 0x107
 800330a:	4811      	ldr	r0, [pc, #68]	; (8003350 <FreqMenu_DrawSweepMenu+0x454>)
 800330c:	f00d fb20 	bl	8010950 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("LIMIT", 	252, 	222, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003310:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003314:	9301      	str	r3, [sp, #4]
 8003316:	2302      	movs	r3, #2
 8003318:	9300      	str	r3, [sp, #0]
 800331a:	2300      	movs	r3, #0
 800331c:	22de      	movs	r2, #222	; 0xde
 800331e:	21fc      	movs	r1, #252	; 0xfc
 8003320:	480e      	ldr	r0, [pc, #56]	; (800335c <FreqMenu_DrawSweepMenu+0x460>)
 8003322:	f00d fb15 	bl	8010950 <ILI9341_Draw_Text>
}
 8003326:	bf00      	nop
 8003328:	3778      	adds	r7, #120	; 0x78
 800332a:	46bd      	mov	sp, r7
 800332c:	bdb0      	pop	{r4, r5, r7, pc}
 800332e:	bf00      	nop
 8003330:	08015b38 	.word	0x08015b38
 8003334:	20000124 	.word	0x20000124
 8003338:	40013400 	.word	0x40013400
 800333c:	42f00000 	.word	0x42f00000
 8003340:	08015b48 	.word	0x08015b48
 8003344:	40000c00 	.word	0x40000c00
 8003348:	08015b54 	.word	0x08015b54
 800334c:	08015b5c 	.word	0x08015b5c
 8003350:	08015b64 	.word	0x08015b64
 8003354:	08015b68 	.word	0x08015b68
 8003358:	08015b70 	.word	0x08015b70
 800335c:	08015b78 	.word	0x08015b78

08003360 <FreqMenu_DrawPrescalerMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawPrescalerMenu()
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FREQ->PSC", 5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003366:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800336a:	9301      	str	r3, [sp, #4]
 800336c:	2302      	movs	r3, #2
 800336e:	9300      	str	r3, [sp, #0]
 8003370:	2300      	movs	r3, #0
 8003372:	220a      	movs	r2, #10
 8003374:	2105      	movs	r1, #5
 8003376:	4804      	ldr	r0, [pc, #16]	; (8003388 <FreqMenu_DrawPrescalerMenu+0x28>)
 8003378:	f00d faea 	bl	8010950 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 800337c:	f7fd fd6c 	bl	8000e58 <DM_DisplayFormattedOutput>

}
 8003380:	bf00      	nop
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	08015b80 	.word	0x08015b80

0800338c <FuncMenu_DrawMenu>:
			Func_Aux_Menu_State,
 *	@retval None
 *
 */
void FuncMenu_DrawMenu(eSystemState pMenu)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b082      	sub	sp, #8
 8003390:	af00      	add	r7, sp, #0
 8003392:	4603      	mov	r3, r0
 8003394:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8003396:	79fb      	ldrb	r3, [r7, #7]
 8003398:	2b04      	cmp	r3, #4
 800339a:	d007      	beq.n	80033ac <FuncMenu_DrawMenu+0x20>
 800339c:	2b05      	cmp	r3, #5
 800339e:	d009      	beq.n	80033b4 <FuncMenu_DrawMenu+0x28>
 80033a0:	2b03      	cmp	r3, #3
 80033a2:	d000      	beq.n	80033a6 <FuncMenu_DrawMenu+0x1a>
		case Func_Aux_Menu_State:
			FuncMenu_DrawOutputMenu(AUX_CHANNEL);
			break;

		default:
			break;
 80033a4:	e00a      	b.n	80033bc <FuncMenu_DrawMenu+0x30>
			FuncMenu_DrawMainMenu();
 80033a6:	f000 f80d 	bl	80033c4 <FuncMenu_DrawMainMenu>
			break;
 80033aa:	e007      	b.n	80033bc <FuncMenu_DrawMenu+0x30>
			FuncMenu_DrawOutputMenu(SIGNAL_CHANNEL);
 80033ac:	2000      	movs	r0, #0
 80033ae:	f000 f851 	bl	8003454 <FuncMenu_DrawOutputMenu>
			break;
 80033b2:	e003      	b.n	80033bc <FuncMenu_DrawMenu+0x30>
			FuncMenu_DrawOutputMenu(AUX_CHANNEL);
 80033b4:	2001      	movs	r0, #1
 80033b6:	f000 f84d 	bl	8003454 <FuncMenu_DrawOutputMenu>
			break;
 80033ba:	bf00      	nop

	}
}
 80033bc:	bf00      	nop
 80033be:	3708      	adds	r7, #8
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}

080033c4 <FuncMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawMainMenu()
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FUNC", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 80033ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80033ce:	9301      	str	r3, [sp, #4]
 80033d0:	2302      	movs	r3, #2
 80033d2:	9300      	str	r3, [sp, #0]
 80033d4:	2300      	movs	r3, #0
 80033d6:	220a      	movs	r2, #10
 80033d8:	210a      	movs	r1, #10
 80033da:	481a      	ldr	r0, [pc, #104]	; (8003444 <FuncMenu_DrawMainMenu+0x80>)
 80033dc:	f00d fab8 	bl	8010950 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 80033e0:	f7fd fd3a 	bl	8000e58 <DM_DisplayFormattedOutput>

 	// coloured menu btn labels
	ILI9341_Draw_Text("SIGNAL", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 80033e4:	f240 23fd 	movw	r3, #765	; 0x2fd
 80033e8:	9301      	str	r3, [sp, #4]
 80033ea:	2302      	movs	r3, #2
 80033ec:	9300      	str	r3, [sp, #0]
 80033ee:	2300      	movs	r3, #0
 80033f0:	22d2      	movs	r2, #210	; 0xd2
 80033f2:	2105      	movs	r1, #5
 80033f4:	4814      	ldr	r0, [pc, #80]	; (8003448 <FuncMenu_DrawMainMenu+0x84>)
 80033f6:	f00d faab 	bl	8010950 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("AUX", 	100,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 80033fa:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80033fe:	9301      	str	r3, [sp, #4]
 8003400:	2302      	movs	r3, #2
 8003402:	9300      	str	r3, [sp, #0]
 8003404:	2300      	movs	r3, #0
 8003406:	22d2      	movs	r2, #210	; 0xd2
 8003408:	2164      	movs	r1, #100	; 0x64
 800340a:	4810      	ldr	r0, [pc, #64]	; (800344c <FuncMenu_DrawMainMenu+0x88>)
 800340c:	f00d faa0 	bl	8010950 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003410:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003414:	9301      	str	r3, [sp, #4]
 8003416:	2302      	movs	r3, #2
 8003418:	9300      	str	r3, [sp, #0]
 800341a:	2300      	movs	r3, #0
 800341c:	22d2      	movs	r2, #210	; 0xd2
 800341e:	21af      	movs	r1, #175	; 0xaf
 8003420:	480b      	ldr	r0, [pc, #44]	; (8003450 <FuncMenu_DrawMainMenu+0x8c>)
 8003422:	f00d fa95 	bl	8010950 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003426:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800342a:	9301      	str	r3, [sp, #4]
 800342c:	2302      	movs	r3, #2
 800342e:	9300      	str	r3, [sp, #0]
 8003430:	2300      	movs	r3, #0
 8003432:	22d2      	movs	r2, #210	; 0xd2
 8003434:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003438:	4805      	ldr	r0, [pc, #20]	; (8003450 <FuncMenu_DrawMainMenu+0x8c>)
 800343a:	f00d fa89 	bl	8010950 <ILI9341_Draw_Text>
}
 800343e:	bf00      	nop
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}
 8003444:	08015b90 	.word	0x08015b90
 8003448:	08015b9c 	.word	0x08015b9c
 800344c:	08015ba4 	.word	0x08015ba4
 8003450:	08015ba8 	.word	0x08015ba8

08003454 <FuncMenu_DrawOutputMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawOutputMenu(eOutputChannel_t pOutChan)
{
 8003454:	b590      	push	{r4, r7, lr}
 8003456:	b089      	sub	sp, #36	; 0x24
 8003458:	af02      	add	r7, sp, #8
 800345a:	4603      	mov	r3, r0
 800345c:	71fb      	strb	r3, [r7, #7]
	if(pOutChan)
 800345e:	79fb      	ldrb	r3, [r7, #7]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d00b      	beq.n	800347c <FuncMenu_DrawOutputMenu+0x28>
		ILI9341_Draw_Text("OUT->FUNC->AUX", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003464:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003468:	9301      	str	r3, [sp, #4]
 800346a:	2302      	movs	r3, #2
 800346c:	9300      	str	r3, [sp, #0]
 800346e:	2300      	movs	r3, #0
 8003470:	220a      	movs	r2, #10
 8003472:	210a      	movs	r1, #10
 8003474:	4896      	ldr	r0, [pc, #600]	; (80036d0 <FuncMenu_DrawOutputMenu+0x27c>)
 8003476:	f00d fa6b 	bl	8010950 <ILI9341_Draw_Text>
 800347a:	e00a      	b.n	8003492 <FuncMenu_DrawOutputMenu+0x3e>
	else
		ILI9341_Draw_Text("OUT->FUNC->SIG", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 800347c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003480:	9301      	str	r3, [sp, #4]
 8003482:	2302      	movs	r3, #2
 8003484:	9300      	str	r3, [sp, #0]
 8003486:	2300      	movs	r3, #0
 8003488:	220a      	movs	r2, #10
 800348a:	210a      	movs	r1, #10
 800348c:	4891      	ldr	r0, [pc, #580]	; (80036d4 <FuncMenu_DrawOutputMenu+0x280>)
 800348e:	f00d fa5f 	bl	8010950 <ILI9341_Draw_Text>

	//FunctionProfile_t *func_profileTmp = FuncO_GetSignalFPresetObject();
	FunctionProfile_t *func_profileTmp = SM_GetOutputChannel(pOutChan)->func_profile;
 8003492:	79fb      	ldrb	r3, [r7, #7]
 8003494:	4618      	mov	r0, r3
 8003496:	f003 fa89 	bl	80069ac <SM_GetOutputChannel>
 800349a:	4603      	mov	r3, r0
 800349c:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 80034a0:	617b      	str	r3, [r7, #20]
	if(func_profileTmp)
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	f000 8424 	beq.w	8003cf2 <FuncMenu_DrawOutputMenu+0x89e>
	{
		switch(func_profileTmp->func)
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	2b06      	cmp	r3, #6
 80034b0:	f200 841f 	bhi.w	8003cf2 <FuncMenu_DrawOutputMenu+0x89e>
 80034b4:	a201      	add	r2, pc, #4	; (adr r2, 80034bc <FuncMenu_DrawOutputMenu+0x68>)
 80034b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ba:	bf00      	nop
 80034bc:	080034d9 	.word	0x080034d9
 80034c0:	080035d5 	.word	0x080035d5
 80034c4:	080036f9 	.word	0x080036f9
 80034c8:	080037f5 	.word	0x080037f5
 80034cc:	080038f1 	.word	0x080038f1
 80034d0:	08003a29 	.word	0x08003a29
 80034d4:	08003b3b 	.word	0x08003b3b
		{
			case SINE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80034d8:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80034dc:	9301      	str	r3, [sp, #4]
 80034de:	2302      	movs	r3, #2
 80034e0:	9300      	str	r3, [sp, #0]
 80034e2:	2300      	movs	r3, #0
 80034e4:	2232      	movs	r2, #50	; 0x32
 80034e6:	210a      	movs	r1, #10
 80034e8:	487b      	ldr	r0, [pc, #492]	; (80036d8 <FuncMenu_DrawOutputMenu+0x284>)
 80034ea:	f00d fa31 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80034ee:	2300      	movs	r3, #0
 80034f0:	9301      	str	r3, [sp, #4]
 80034f2:	2302      	movs	r3, #2
 80034f4:	9300      	str	r3, [sp, #0]
 80034f6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80034fa:	2246      	movs	r2, #70	; 0x46
 80034fc:	210a      	movs	r1, #10
 80034fe:	4877      	ldr	r0, [pc, #476]	; (80036dc <FuncMenu_DrawOutputMenu+0x288>)
 8003500:	f00d fa26 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003504:	2300      	movs	r3, #0
 8003506:	9301      	str	r3, [sp, #4]
 8003508:	2302      	movs	r3, #2
 800350a:	9300      	str	r3, [sp, #0]
 800350c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003510:	225a      	movs	r2, #90	; 0x5a
 8003512:	210a      	movs	r1, #10
 8003514:	4872      	ldr	r0, [pc, #456]	; (80036e0 <FuncMenu_DrawOutputMenu+0x28c>)
 8003516:	f00d fa1b 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800351a:	2300      	movs	r3, #0
 800351c:	9301      	str	r3, [sp, #4]
 800351e:	2302      	movs	r3, #2
 8003520:	9300      	str	r3, [sp, #0]
 8003522:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003526:	226e      	movs	r2, #110	; 0x6e
 8003528:	210a      	movs	r1, #10
 800352a:	486e      	ldr	r0, [pc, #440]	; (80036e4 <FuncMenu_DrawOutputMenu+0x290>)
 800352c:	f00d fa10 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003530:	2300      	movs	r3, #0
 8003532:	9301      	str	r3, [sp, #4]
 8003534:	2302      	movs	r3, #2
 8003536:	9300      	str	r3, [sp, #0]
 8003538:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800353c:	2282      	movs	r2, #130	; 0x82
 800353e:	210a      	movs	r1, #10
 8003540:	4869      	ldr	r0, [pc, #420]	; (80036e8 <FuncMenu_DrawOutputMenu+0x294>)
 8003542:	f00d fa05 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003546:	2300      	movs	r3, #0
 8003548:	9301      	str	r3, [sp, #4]
 800354a:	2302      	movs	r3, #2
 800354c:	9300      	str	r3, [sp, #0]
 800354e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003552:	2296      	movs	r2, #150	; 0x96
 8003554:	210a      	movs	r1, #10
 8003556:	4865      	ldr	r0, [pc, #404]	; (80036ec <FuncMenu_DrawOutputMenu+0x298>)
 8003558:	f00d f9fa 	bl	8010950 <ILI9341_Draw_Text>

				if(pOutChan)
 800355c:	79fb      	ldrb	r3, [r7, #7]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d00a      	beq.n	8003578 <FuncMenu_DrawOutputMenu+0x124>
					ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003562:	2300      	movs	r3, #0
 8003564:	9301      	str	r3, [sp, #4]
 8003566:	2302      	movs	r3, #2
 8003568:	9300      	str	r3, [sp, #0]
 800356a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800356e:	22aa      	movs	r2, #170	; 0xaa
 8003570:	210a      	movs	r1, #10
 8003572:	485f      	ldr	r0, [pc, #380]	; (80036f0 <FuncMenu_DrawOutputMenu+0x29c>)
 8003574:	f00d f9ec 	bl	8010950 <ILI9341_Draw_Text>

				// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003578:	f240 23fd 	movw	r3, #765	; 0x2fd
 800357c:	9301      	str	r3, [sp, #4]
 800357e:	2302      	movs	r3, #2
 8003580:	9300      	str	r3, [sp, #0]
 8003582:	2300      	movs	r3, #0
 8003584:	22d2      	movs	r2, #210	; 0xd2
 8003586:	2105      	movs	r1, #5
 8003588:	485a      	ldr	r0, [pc, #360]	; (80036f4 <FuncMenu_DrawOutputMenu+0x2a0>)
 800358a:	f00d f9e1 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 800358e:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003592:	9301      	str	r3, [sp, #4]
 8003594:	2302      	movs	r3, #2
 8003596:	9300      	str	r3, [sp, #0]
 8003598:	2300      	movs	r3, #0
 800359a:	22d2      	movs	r2, #210	; 0xd2
 800359c:	2161      	movs	r1, #97	; 0x61
 800359e:	4855      	ldr	r0, [pc, #340]	; (80036f4 <FuncMenu_DrawOutputMenu+0x2a0>)
 80035a0:	f00d f9d6 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80035a4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80035a8:	9301      	str	r3, [sp, #4]
 80035aa:	2302      	movs	r3, #2
 80035ac:	9300      	str	r3, [sp, #0]
 80035ae:	2300      	movs	r3, #0
 80035b0:	22d2      	movs	r2, #210	; 0xd2
 80035b2:	21af      	movs	r1, #175	; 0xaf
 80035b4:	484f      	ldr	r0, [pc, #316]	; (80036f4 <FuncMenu_DrawOutputMenu+0x2a0>)
 80035b6:	f00d f9cb 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 80035ba:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80035be:	9301      	str	r3, [sp, #4]
 80035c0:	2302      	movs	r3, #2
 80035c2:	9300      	str	r3, [sp, #0]
 80035c4:	2300      	movs	r3, #0
 80035c6:	22d2      	movs	r2, #210	; 0xd2
 80035c8:	f44f 7182 	mov.w	r1, #260	; 0x104
 80035cc:	4849      	ldr	r0, [pc, #292]	; (80036f4 <FuncMenu_DrawOutputMenu+0x2a0>)
 80035ce:	f00d f9bf 	bl	8010950 <ILI9341_Draw_Text>
				break;
 80035d2:	e38e      	b.n	8003cf2 <FuncMenu_DrawOutputMenu+0x89e>
			case SQUARE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80035d4:	2300      	movs	r3, #0
 80035d6:	9301      	str	r3, [sp, #4]
 80035d8:	2302      	movs	r3, #2
 80035da:	9300      	str	r3, [sp, #0]
 80035dc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80035e0:	2232      	movs	r2, #50	; 0x32
 80035e2:	210a      	movs	r1, #10
 80035e4:	483c      	ldr	r0, [pc, #240]	; (80036d8 <FuncMenu_DrawOutputMenu+0x284>)
 80035e6:	f00d f9b3 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80035ea:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80035ee:	9301      	str	r3, [sp, #4]
 80035f0:	2302      	movs	r3, #2
 80035f2:	9300      	str	r3, [sp, #0]
 80035f4:	2300      	movs	r3, #0
 80035f6:	2246      	movs	r2, #70	; 0x46
 80035f8:	210a      	movs	r1, #10
 80035fa:	4838      	ldr	r0, [pc, #224]	; (80036dc <FuncMenu_DrawOutputMenu+0x288>)
 80035fc:	f00d f9a8 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003600:	2300      	movs	r3, #0
 8003602:	9301      	str	r3, [sp, #4]
 8003604:	2302      	movs	r3, #2
 8003606:	9300      	str	r3, [sp, #0]
 8003608:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800360c:	225a      	movs	r2, #90	; 0x5a
 800360e:	210a      	movs	r1, #10
 8003610:	4833      	ldr	r0, [pc, #204]	; (80036e0 <FuncMenu_DrawOutputMenu+0x28c>)
 8003612:	f00d f99d 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003616:	2300      	movs	r3, #0
 8003618:	9301      	str	r3, [sp, #4]
 800361a:	2302      	movs	r3, #2
 800361c:	9300      	str	r3, [sp, #0]
 800361e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003622:	226e      	movs	r2, #110	; 0x6e
 8003624:	210a      	movs	r1, #10
 8003626:	482f      	ldr	r0, [pc, #188]	; (80036e4 <FuncMenu_DrawOutputMenu+0x290>)
 8003628:	f00d f992 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800362c:	2300      	movs	r3, #0
 800362e:	9301      	str	r3, [sp, #4]
 8003630:	2302      	movs	r3, #2
 8003632:	9300      	str	r3, [sp, #0]
 8003634:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003638:	2282      	movs	r2, #130	; 0x82
 800363a:	210a      	movs	r1, #10
 800363c:	482a      	ldr	r0, [pc, #168]	; (80036e8 <FuncMenu_DrawOutputMenu+0x294>)
 800363e:	f00d f987 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003642:	2300      	movs	r3, #0
 8003644:	9301      	str	r3, [sp, #4]
 8003646:	2302      	movs	r3, #2
 8003648:	9300      	str	r3, [sp, #0]
 800364a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800364e:	2296      	movs	r2, #150	; 0x96
 8003650:	210a      	movs	r1, #10
 8003652:	4826      	ldr	r0, [pc, #152]	; (80036ec <FuncMenu_DrawOutputMenu+0x298>)
 8003654:	f00d f97c 	bl	8010950 <ILI9341_Draw_Text>

				if(pOutChan)
 8003658:	79fb      	ldrb	r3, [r7, #7]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d00a      	beq.n	8003674 <FuncMenu_DrawOutputMenu+0x220>
					ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800365e:	2300      	movs	r3, #0
 8003660:	9301      	str	r3, [sp, #4]
 8003662:	2302      	movs	r3, #2
 8003664:	9300      	str	r3, [sp, #0]
 8003666:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800366a:	22aa      	movs	r2, #170	; 0xaa
 800366c:	210a      	movs	r1, #10
 800366e:	4820      	ldr	r0, [pc, #128]	; (80036f0 <FuncMenu_DrawOutputMenu+0x29c>)
 8003670:	f00d f96e 	bl	8010950 <ILI9341_Draw_Text>

				// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003674:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003678:	9301      	str	r3, [sp, #4]
 800367a:	2302      	movs	r3, #2
 800367c:	9300      	str	r3, [sp, #0]
 800367e:	2300      	movs	r3, #0
 8003680:	22d2      	movs	r2, #210	; 0xd2
 8003682:	2105      	movs	r1, #5
 8003684:	481b      	ldr	r0, [pc, #108]	; (80036f4 <FuncMenu_DrawOutputMenu+0x2a0>)
 8003686:	f00d f963 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 800368a:	f241 43a2 	movw	r3, #5282	; 0x14a2
 800368e:	9301      	str	r3, [sp, #4]
 8003690:	2302      	movs	r3, #2
 8003692:	9300      	str	r3, [sp, #0]
 8003694:	2300      	movs	r3, #0
 8003696:	22d2      	movs	r2, #210	; 0xd2
 8003698:	2161      	movs	r1, #97	; 0x61
 800369a:	4816      	ldr	r0, [pc, #88]	; (80036f4 <FuncMenu_DrawOutputMenu+0x2a0>)
 800369c:	f00d f958 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80036a0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80036a4:	9301      	str	r3, [sp, #4]
 80036a6:	2302      	movs	r3, #2
 80036a8:	9300      	str	r3, [sp, #0]
 80036aa:	2300      	movs	r3, #0
 80036ac:	22d2      	movs	r2, #210	; 0xd2
 80036ae:	21af      	movs	r1, #175	; 0xaf
 80036b0:	4810      	ldr	r0, [pc, #64]	; (80036f4 <FuncMenu_DrawOutputMenu+0x2a0>)
 80036b2:	f00d f94d 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 80036b6:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80036ba:	9301      	str	r3, [sp, #4]
 80036bc:	2302      	movs	r3, #2
 80036be:	9300      	str	r3, [sp, #0]
 80036c0:	2300      	movs	r3, #0
 80036c2:	22d2      	movs	r2, #210	; 0xd2
 80036c4:	f44f 7182 	mov.w	r1, #260	; 0x104
 80036c8:	480a      	ldr	r0, [pc, #40]	; (80036f4 <FuncMenu_DrawOutputMenu+0x2a0>)
 80036ca:	f00d f941 	bl	8010950 <ILI9341_Draw_Text>
				break;
 80036ce:	e310      	b.n	8003cf2 <FuncMenu_DrawOutputMenu+0x89e>
 80036d0:	08015bb0 	.word	0x08015bb0
 80036d4:	08015bc0 	.word	0x08015bc0
 80036d8:	08015bd0 	.word	0x08015bd0
 80036dc:	08015bd8 	.word	0x08015bd8
 80036e0:	08015be4 	.word	0x08015be4
 80036e4:	08015bec 	.word	0x08015bec
 80036e8:	08015bf8 	.word	0x08015bf8
 80036ec:	08015c04 	.word	0x08015c04
 80036f0:	08015c0c 	.word	0x08015c0c
 80036f4:	08015ba8 	.word	0x08015ba8
			case SAW_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80036f8:	2300      	movs	r3, #0
 80036fa:	9301      	str	r3, [sp, #4]
 80036fc:	2302      	movs	r3, #2
 80036fe:	9300      	str	r3, [sp, #0]
 8003700:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003704:	2232      	movs	r2, #50	; 0x32
 8003706:	210a      	movs	r1, #10
 8003708:	48be      	ldr	r0, [pc, #760]	; (8003a04 <FuncMenu_DrawOutputMenu+0x5b0>)
 800370a:	f00d f921 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800370e:	2300      	movs	r3, #0
 8003710:	9301      	str	r3, [sp, #4]
 8003712:	2302      	movs	r3, #2
 8003714:	9300      	str	r3, [sp, #0]
 8003716:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800371a:	2246      	movs	r2, #70	; 0x46
 800371c:	210a      	movs	r1, #10
 800371e:	48ba      	ldr	r0, [pc, #744]	; (8003a08 <FuncMenu_DrawOutputMenu+0x5b4>)
 8003720:	f00d f916 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003724:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003728:	9301      	str	r3, [sp, #4]
 800372a:	2302      	movs	r3, #2
 800372c:	9300      	str	r3, [sp, #0]
 800372e:	2300      	movs	r3, #0
 8003730:	225a      	movs	r2, #90	; 0x5a
 8003732:	210a      	movs	r1, #10
 8003734:	48b5      	ldr	r0, [pc, #724]	; (8003a0c <FuncMenu_DrawOutputMenu+0x5b8>)
 8003736:	f00d f90b 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800373a:	2300      	movs	r3, #0
 800373c:	9301      	str	r3, [sp, #4]
 800373e:	2302      	movs	r3, #2
 8003740:	9300      	str	r3, [sp, #0]
 8003742:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003746:	226e      	movs	r2, #110	; 0x6e
 8003748:	210a      	movs	r1, #10
 800374a:	48b1      	ldr	r0, [pc, #708]	; (8003a10 <FuncMenu_DrawOutputMenu+0x5bc>)
 800374c:	f00d f900 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003750:	2300      	movs	r3, #0
 8003752:	9301      	str	r3, [sp, #4]
 8003754:	2302      	movs	r3, #2
 8003756:	9300      	str	r3, [sp, #0]
 8003758:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800375c:	2282      	movs	r2, #130	; 0x82
 800375e:	210a      	movs	r1, #10
 8003760:	48ac      	ldr	r0, [pc, #688]	; (8003a14 <FuncMenu_DrawOutputMenu+0x5c0>)
 8003762:	f00d f8f5 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003766:	2300      	movs	r3, #0
 8003768:	9301      	str	r3, [sp, #4]
 800376a:	2302      	movs	r3, #2
 800376c:	9300      	str	r3, [sp, #0]
 800376e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003772:	2296      	movs	r2, #150	; 0x96
 8003774:	210a      	movs	r1, #10
 8003776:	48a8      	ldr	r0, [pc, #672]	; (8003a18 <FuncMenu_DrawOutputMenu+0x5c4>)
 8003778:	f00d f8ea 	bl	8010950 <ILI9341_Draw_Text>
				if(pOutChan)
 800377c:	79fb      	ldrb	r3, [r7, #7]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d00a      	beq.n	8003798 <FuncMenu_DrawOutputMenu+0x344>
					ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003782:	2300      	movs	r3, #0
 8003784:	9301      	str	r3, [sp, #4]
 8003786:	2302      	movs	r3, #2
 8003788:	9300      	str	r3, [sp, #0]
 800378a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800378e:	22aa      	movs	r2, #170	; 0xaa
 8003790:	210a      	movs	r1, #10
 8003792:	48a2      	ldr	r0, [pc, #648]	; (8003a1c <FuncMenu_DrawOutputMenu+0x5c8>)
 8003794:	f00d f8dc 	bl	8010950 <ILI9341_Draw_Text>
			 	// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003798:	f240 23fd 	movw	r3, #765	; 0x2fd
 800379c:	9301      	str	r3, [sp, #4]
 800379e:	2302      	movs	r3, #2
 80037a0:	9300      	str	r3, [sp, #0]
 80037a2:	2300      	movs	r3, #0
 80037a4:	22d2      	movs	r2, #210	; 0xd2
 80037a6:	2105      	movs	r1, #5
 80037a8:	489d      	ldr	r0, [pc, #628]	; (8003a20 <FuncMenu_DrawOutputMenu+0x5cc>)
 80037aa:	f00d f8d1 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 80037ae:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80037b2:	9301      	str	r3, [sp, #4]
 80037b4:	2302      	movs	r3, #2
 80037b6:	9300      	str	r3, [sp, #0]
 80037b8:	2300      	movs	r3, #0
 80037ba:	22d2      	movs	r2, #210	; 0xd2
 80037bc:	2161      	movs	r1, #97	; 0x61
 80037be:	4898      	ldr	r0, [pc, #608]	; (8003a20 <FuncMenu_DrawOutputMenu+0x5cc>)
 80037c0:	f00d f8c6 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80037c4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80037c8:	9301      	str	r3, [sp, #4]
 80037ca:	2302      	movs	r3, #2
 80037cc:	9300      	str	r3, [sp, #0]
 80037ce:	2300      	movs	r3, #0
 80037d0:	22d2      	movs	r2, #210	; 0xd2
 80037d2:	21af      	movs	r1, #175	; 0xaf
 80037d4:	4892      	ldr	r0, [pc, #584]	; (8003a20 <FuncMenu_DrawOutputMenu+0x5cc>)
 80037d6:	f00d f8bb 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 80037da:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80037de:	9301      	str	r3, [sp, #4]
 80037e0:	2302      	movs	r3, #2
 80037e2:	9300      	str	r3, [sp, #0]
 80037e4:	2300      	movs	r3, #0
 80037e6:	22d2      	movs	r2, #210	; 0xd2
 80037e8:	f44f 7182 	mov.w	r1, #260	; 0x104
 80037ec:	488c      	ldr	r0, [pc, #560]	; (8003a20 <FuncMenu_DrawOutputMenu+0x5cc>)
 80037ee:	f00d f8af 	bl	8010950 <ILI9341_Draw_Text>
				break;
 80037f2:	e27e      	b.n	8003cf2 <FuncMenu_DrawOutputMenu+0x89e>
			case REV_SAW_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80037f4:	2300      	movs	r3, #0
 80037f6:	9301      	str	r3, [sp, #4]
 80037f8:	2302      	movs	r3, #2
 80037fa:	9300      	str	r3, [sp, #0]
 80037fc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003800:	2232      	movs	r2, #50	; 0x32
 8003802:	210a      	movs	r1, #10
 8003804:	487f      	ldr	r0, [pc, #508]	; (8003a04 <FuncMenu_DrawOutputMenu+0x5b0>)
 8003806:	f00d f8a3 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800380a:	2300      	movs	r3, #0
 800380c:	9301      	str	r3, [sp, #4]
 800380e:	2302      	movs	r3, #2
 8003810:	9300      	str	r3, [sp, #0]
 8003812:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003816:	2246      	movs	r2, #70	; 0x46
 8003818:	210a      	movs	r1, #10
 800381a:	487b      	ldr	r0, [pc, #492]	; (8003a08 <FuncMenu_DrawOutputMenu+0x5b4>)
 800381c:	f00d f898 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003820:	2300      	movs	r3, #0
 8003822:	9301      	str	r3, [sp, #4]
 8003824:	2302      	movs	r3, #2
 8003826:	9300      	str	r3, [sp, #0]
 8003828:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800382c:	225a      	movs	r2, #90	; 0x5a
 800382e:	210a      	movs	r1, #10
 8003830:	4876      	ldr	r0, [pc, #472]	; (8003a0c <FuncMenu_DrawOutputMenu+0x5b8>)
 8003832:	f00d f88d 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003836:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 800383a:	9301      	str	r3, [sp, #4]
 800383c:	2302      	movs	r3, #2
 800383e:	9300      	str	r3, [sp, #0]
 8003840:	2300      	movs	r3, #0
 8003842:	226e      	movs	r2, #110	; 0x6e
 8003844:	210a      	movs	r1, #10
 8003846:	4872      	ldr	r0, [pc, #456]	; (8003a10 <FuncMenu_DrawOutputMenu+0x5bc>)
 8003848:	f00d f882 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800384c:	2300      	movs	r3, #0
 800384e:	9301      	str	r3, [sp, #4]
 8003850:	2302      	movs	r3, #2
 8003852:	9300      	str	r3, [sp, #0]
 8003854:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003858:	2282      	movs	r2, #130	; 0x82
 800385a:	210a      	movs	r1, #10
 800385c:	486d      	ldr	r0, [pc, #436]	; (8003a14 <FuncMenu_DrawOutputMenu+0x5c0>)
 800385e:	f00d f877 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003862:	2300      	movs	r3, #0
 8003864:	9301      	str	r3, [sp, #4]
 8003866:	2302      	movs	r3, #2
 8003868:	9300      	str	r3, [sp, #0]
 800386a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800386e:	2296      	movs	r2, #150	; 0x96
 8003870:	210a      	movs	r1, #10
 8003872:	4869      	ldr	r0, [pc, #420]	; (8003a18 <FuncMenu_DrawOutputMenu+0x5c4>)
 8003874:	f00d f86c 	bl	8010950 <ILI9341_Draw_Text>

				if(pOutChan)
 8003878:	79fb      	ldrb	r3, [r7, #7]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d00a      	beq.n	8003894 <FuncMenu_DrawOutputMenu+0x440>
					ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800387e:	2300      	movs	r3, #0
 8003880:	9301      	str	r3, [sp, #4]
 8003882:	2302      	movs	r3, #2
 8003884:	9300      	str	r3, [sp, #0]
 8003886:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800388a:	22aa      	movs	r2, #170	; 0xaa
 800388c:	210a      	movs	r1, #10
 800388e:	4863      	ldr	r0, [pc, #396]	; (8003a1c <FuncMenu_DrawOutputMenu+0x5c8>)
 8003890:	f00d f85e 	bl	8010950 <ILI9341_Draw_Text>

				// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003894:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003898:	9301      	str	r3, [sp, #4]
 800389a:	2302      	movs	r3, #2
 800389c:	9300      	str	r3, [sp, #0]
 800389e:	2300      	movs	r3, #0
 80038a0:	22d2      	movs	r2, #210	; 0xd2
 80038a2:	2105      	movs	r1, #5
 80038a4:	485e      	ldr	r0, [pc, #376]	; (8003a20 <FuncMenu_DrawOutputMenu+0x5cc>)
 80038a6:	f00d f853 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 80038aa:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80038ae:	9301      	str	r3, [sp, #4]
 80038b0:	2302      	movs	r3, #2
 80038b2:	9300      	str	r3, [sp, #0]
 80038b4:	2300      	movs	r3, #0
 80038b6:	22d2      	movs	r2, #210	; 0xd2
 80038b8:	2161      	movs	r1, #97	; 0x61
 80038ba:	4859      	ldr	r0, [pc, #356]	; (8003a20 <FuncMenu_DrawOutputMenu+0x5cc>)
 80038bc:	f00d f848 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80038c0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80038c4:	9301      	str	r3, [sp, #4]
 80038c6:	2302      	movs	r3, #2
 80038c8:	9300      	str	r3, [sp, #0]
 80038ca:	2300      	movs	r3, #0
 80038cc:	22d2      	movs	r2, #210	; 0xd2
 80038ce:	21af      	movs	r1, #175	; 0xaf
 80038d0:	4853      	ldr	r0, [pc, #332]	; (8003a20 <FuncMenu_DrawOutputMenu+0x5cc>)
 80038d2:	f00d f83d 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 80038d6:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80038da:	9301      	str	r3, [sp, #4]
 80038dc:	2302      	movs	r3, #2
 80038de:	9300      	str	r3, [sp, #0]
 80038e0:	2300      	movs	r3, #0
 80038e2:	22d2      	movs	r2, #210	; 0xd2
 80038e4:	f44f 7182 	mov.w	r1, #260	; 0x104
 80038e8:	484d      	ldr	r0, [pc, #308]	; (8003a20 <FuncMenu_DrawOutputMenu+0x5cc>)
 80038ea:	f00d f831 	bl	8010950 <ILI9341_Draw_Text>
				break;
 80038ee:	e200      	b.n	8003cf2 <FuncMenu_DrawOutputMenu+0x89e>
			case TRIANGLE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80038f0:	2300      	movs	r3, #0
 80038f2:	9301      	str	r3, [sp, #4]
 80038f4:	2302      	movs	r3, #2
 80038f6:	9300      	str	r3, [sp, #0]
 80038f8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80038fc:	2232      	movs	r2, #50	; 0x32
 80038fe:	210a      	movs	r1, #10
 8003900:	4840      	ldr	r0, [pc, #256]	; (8003a04 <FuncMenu_DrawOutputMenu+0x5b0>)
 8003902:	f00d f825 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003906:	2300      	movs	r3, #0
 8003908:	9301      	str	r3, [sp, #4]
 800390a:	2302      	movs	r3, #2
 800390c:	9300      	str	r3, [sp, #0]
 800390e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003912:	2246      	movs	r2, #70	; 0x46
 8003914:	210a      	movs	r1, #10
 8003916:	483c      	ldr	r0, [pc, #240]	; (8003a08 <FuncMenu_DrawOutputMenu+0x5b4>)
 8003918:	f00d f81a 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800391c:	2300      	movs	r3, #0
 800391e:	9301      	str	r3, [sp, #4]
 8003920:	2302      	movs	r3, #2
 8003922:	9300      	str	r3, [sp, #0]
 8003924:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003928:	225a      	movs	r2, #90	; 0x5a
 800392a:	210a      	movs	r1, #10
 800392c:	4837      	ldr	r0, [pc, #220]	; (8003a0c <FuncMenu_DrawOutputMenu+0x5b8>)
 800392e:	f00d f80f 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003932:	2300      	movs	r3, #0
 8003934:	9301      	str	r3, [sp, #4]
 8003936:	2302      	movs	r3, #2
 8003938:	9300      	str	r3, [sp, #0]
 800393a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800393e:	226e      	movs	r2, #110	; 0x6e
 8003940:	210a      	movs	r1, #10
 8003942:	4833      	ldr	r0, [pc, #204]	; (8003a10 <FuncMenu_DrawOutputMenu+0x5bc>)
 8003944:	f00d f804 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003948:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 800394c:	9301      	str	r3, [sp, #4]
 800394e:	2302      	movs	r3, #2
 8003950:	9300      	str	r3, [sp, #0]
 8003952:	2300      	movs	r3, #0
 8003954:	2282      	movs	r2, #130	; 0x82
 8003956:	210a      	movs	r1, #10
 8003958:	482e      	ldr	r0, [pc, #184]	; (8003a14 <FuncMenu_DrawOutputMenu+0x5c0>)
 800395a:	f00c fff9 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800395e:	2300      	movs	r3, #0
 8003960:	9301      	str	r3, [sp, #4]
 8003962:	2302      	movs	r3, #2
 8003964:	9300      	str	r3, [sp, #0]
 8003966:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800396a:	2296      	movs	r2, #150	; 0x96
 800396c:	210a      	movs	r1, #10
 800396e:	482a      	ldr	r0, [pc, #168]	; (8003a18 <FuncMenu_DrawOutputMenu+0x5c4>)
 8003970:	f00c ffee 	bl	8010950 <ILI9341_Draw_Text>

				if(pOutChan)
 8003974:	79fb      	ldrb	r3, [r7, #7]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d00a      	beq.n	8003990 <FuncMenu_DrawOutputMenu+0x53c>
					ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800397a:	2300      	movs	r3, #0
 800397c:	9301      	str	r3, [sp, #4]
 800397e:	2302      	movs	r3, #2
 8003980:	9300      	str	r3, [sp, #0]
 8003982:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003986:	22aa      	movs	r2, #170	; 0xaa
 8003988:	210a      	movs	r1, #10
 800398a:	4824      	ldr	r0, [pc, #144]	; (8003a1c <FuncMenu_DrawOutputMenu+0x5c8>)
 800398c:	f00c ffe0 	bl	8010950 <ILI9341_Draw_Text>

				// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003990:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003994:	9301      	str	r3, [sp, #4]
 8003996:	2302      	movs	r3, #2
 8003998:	9300      	str	r3, [sp, #0]
 800399a:	2300      	movs	r3, #0
 800399c:	22d2      	movs	r2, #210	; 0xd2
 800399e:	2105      	movs	r1, #5
 80039a0:	481f      	ldr	r0, [pc, #124]	; (8003a20 <FuncMenu_DrawOutputMenu+0x5cc>)
 80039a2:	f00c ffd5 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 80039a6:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80039aa:	9301      	str	r3, [sp, #4]
 80039ac:	2302      	movs	r3, #2
 80039ae:	9300      	str	r3, [sp, #0]
 80039b0:	2300      	movs	r3, #0
 80039b2:	22d2      	movs	r2, #210	; 0xd2
 80039b4:	2161      	movs	r1, #97	; 0x61
 80039b6:	481a      	ldr	r0, [pc, #104]	; (8003a20 <FuncMenu_DrawOutputMenu+0x5cc>)
 80039b8:	f00c ffca 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80039bc:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80039c0:	9301      	str	r3, [sp, #4]
 80039c2:	2302      	movs	r3, #2
 80039c4:	9300      	str	r3, [sp, #0]
 80039c6:	2300      	movs	r3, #0
 80039c8:	22d2      	movs	r2, #210	; 0xd2
 80039ca:	21af      	movs	r1, #175	; 0xaf
 80039cc:	4814      	ldr	r0, [pc, #80]	; (8003a20 <FuncMenu_DrawOutputMenu+0x5cc>)
 80039ce:	f00c ffbf 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 80039d2:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80039d6:	9301      	str	r3, [sp, #4]
 80039d8:	2302      	movs	r3, #2
 80039da:	9300      	str	r3, [sp, #0]
 80039dc:	2300      	movs	r3, #0
 80039de:	22d2      	movs	r2, #210	; 0xd2
 80039e0:	f44f 7182 	mov.w	r1, #260	; 0x104
 80039e4:	480e      	ldr	r0, [pc, #56]	; (8003a20 <FuncMenu_DrawOutputMenu+0x5cc>)
 80039e6:	f00c ffb3 	bl	8010950 <ILI9341_Draw_Text>

				ILI9341_Draw_Text("               ", 	150, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80039ea:	2300      	movs	r3, #0
 80039ec:	9301      	str	r3, [sp, #4]
 80039ee:	2302      	movs	r3, #2
 80039f0:	9300      	str	r3, [sp, #0]
 80039f2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80039f6:	2232      	movs	r2, #50	; 0x32
 80039f8:	2196      	movs	r1, #150	; 0x96
 80039fa:	480a      	ldr	r0, [pc, #40]	; (8003a24 <FuncMenu_DrawOutputMenu+0x5d0>)
 80039fc:	f00c ffa8 	bl	8010950 <ILI9341_Draw_Text>
				break;
 8003a00:	e177      	b.n	8003cf2 <FuncMenu_DrawOutputMenu+0x89e>
 8003a02:	bf00      	nop
 8003a04:	08015bd0 	.word	0x08015bd0
 8003a08:	08015bd8 	.word	0x08015bd8
 8003a0c:	08015be4 	.word	0x08015be4
 8003a10:	08015bec 	.word	0x08015bec
 8003a14:	08015bf8 	.word	0x08015bf8
 8003a18:	08015c04 	.word	0x08015c04
 8003a1c:	08015c0c 	.word	0x08015c0c
 8003a20:	08015ba8 	.word	0x08015ba8
 8003a24:	08015c14 	.word	0x08015c14
			case IMPULSE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003a28:	2300      	movs	r3, #0
 8003a2a:	9301      	str	r3, [sp, #4]
 8003a2c:	2302      	movs	r3, #2
 8003a2e:	9300      	str	r3, [sp, #0]
 8003a30:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003a34:	2232      	movs	r2, #50	; 0x32
 8003a36:	210a      	movs	r1, #10
 8003a38:	48b0      	ldr	r0, [pc, #704]	; (8003cfc <FuncMenu_DrawOutputMenu+0x8a8>)
 8003a3a:	f00c ff89 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003a3e:	2300      	movs	r3, #0
 8003a40:	9301      	str	r3, [sp, #4]
 8003a42:	2302      	movs	r3, #2
 8003a44:	9300      	str	r3, [sp, #0]
 8003a46:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003a4a:	2246      	movs	r2, #70	; 0x46
 8003a4c:	210a      	movs	r1, #10
 8003a4e:	48ac      	ldr	r0, [pc, #688]	; (8003d00 <FuncMenu_DrawOutputMenu+0x8ac>)
 8003a50:	f00c ff7e 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003a54:	2300      	movs	r3, #0
 8003a56:	9301      	str	r3, [sp, #4]
 8003a58:	2302      	movs	r3, #2
 8003a5a:	9300      	str	r3, [sp, #0]
 8003a5c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003a60:	225a      	movs	r2, #90	; 0x5a
 8003a62:	210a      	movs	r1, #10
 8003a64:	48a7      	ldr	r0, [pc, #668]	; (8003d04 <FuncMenu_DrawOutputMenu+0x8b0>)
 8003a66:	f00c ff73 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	9301      	str	r3, [sp, #4]
 8003a6e:	2302      	movs	r3, #2
 8003a70:	9300      	str	r3, [sp, #0]
 8003a72:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003a76:	226e      	movs	r2, #110	; 0x6e
 8003a78:	210a      	movs	r1, #10
 8003a7a:	48a3      	ldr	r0, [pc, #652]	; (8003d08 <FuncMenu_DrawOutputMenu+0x8b4>)
 8003a7c:	f00c ff68 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003a80:	2300      	movs	r3, #0
 8003a82:	9301      	str	r3, [sp, #4]
 8003a84:	2302      	movs	r3, #2
 8003a86:	9300      	str	r3, [sp, #0]
 8003a88:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003a8c:	2282      	movs	r2, #130	; 0x82
 8003a8e:	210a      	movs	r1, #10
 8003a90:	489e      	ldr	r0, [pc, #632]	; (8003d0c <FuncMenu_DrawOutputMenu+0x8b8>)
 8003a92:	f00c ff5d 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003a96:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003a9a:	9301      	str	r3, [sp, #4]
 8003a9c:	2302      	movs	r3, #2
 8003a9e:	9300      	str	r3, [sp, #0]
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	2296      	movs	r2, #150	; 0x96
 8003aa4:	210a      	movs	r1, #10
 8003aa6:	489a      	ldr	r0, [pc, #616]	; (8003d10 <FuncMenu_DrawOutputMenu+0x8bc>)
 8003aa8:	f00c ff52 	bl	8010950 <ILI9341_Draw_Text>

				if(pOutChan)
 8003aac:	79fb      	ldrb	r3, [r7, #7]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d00a      	beq.n	8003ac8 <FuncMenu_DrawOutputMenu+0x674>
					ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	9301      	str	r3, [sp, #4]
 8003ab6:	2302      	movs	r3, #2
 8003ab8:	9300      	str	r3, [sp, #0]
 8003aba:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003abe:	22aa      	movs	r2, #170	; 0xaa
 8003ac0:	210a      	movs	r1, #10
 8003ac2:	4894      	ldr	r0, [pc, #592]	; (8003d14 <FuncMenu_DrawOutputMenu+0x8c0>)
 8003ac4:	f00c ff44 	bl	8010950 <ILI9341_Draw_Text>

				// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003ac8:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003acc:	9301      	str	r3, [sp, #4]
 8003ace:	2302      	movs	r3, #2
 8003ad0:	9300      	str	r3, [sp, #0]
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	22d2      	movs	r2, #210	; 0xd2
 8003ad6:	2105      	movs	r1, #5
 8003ad8:	488f      	ldr	r0, [pc, #572]	; (8003d18 <FuncMenu_DrawOutputMenu+0x8c4>)
 8003ada:	f00c ff39 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003ade:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003ae2:	9301      	str	r3, [sp, #4]
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	9300      	str	r3, [sp, #0]
 8003ae8:	2300      	movs	r3, #0
 8003aea:	22d2      	movs	r2, #210	; 0xd2
 8003aec:	2161      	movs	r1, #97	; 0x61
 8003aee:	488a      	ldr	r0, [pc, #552]	; (8003d18 <FuncMenu_DrawOutputMenu+0x8c4>)
 8003af0:	f00c ff2e 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003af4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003af8:	9301      	str	r3, [sp, #4]
 8003afa:	2302      	movs	r3, #2
 8003afc:	9300      	str	r3, [sp, #0]
 8003afe:	2300      	movs	r3, #0
 8003b00:	22d2      	movs	r2, #210	; 0xd2
 8003b02:	21af      	movs	r1, #175	; 0xaf
 8003b04:	4884      	ldr	r0, [pc, #528]	; (8003d18 <FuncMenu_DrawOutputMenu+0x8c4>)
 8003b06:	f00c ff23 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003b0a:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003b0e:	9301      	str	r3, [sp, #4]
 8003b10:	2302      	movs	r3, #2
 8003b12:	9300      	str	r3, [sp, #0]
 8003b14:	2300      	movs	r3, #0
 8003b16:	22d2      	movs	r2, #210	; 0xd2
 8003b18:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003b1c:	487e      	ldr	r0, [pc, #504]	; (8003d18 <FuncMenu_DrawOutputMenu+0x8c4>)
 8003b1e:	f00c ff17 	bl	8010950 <ILI9341_Draw_Text>

				ILI9341_Draw_Text("               ", 	150, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003b22:	2300      	movs	r3, #0
 8003b24:	9301      	str	r3, [sp, #4]
 8003b26:	2302      	movs	r3, #2
 8003b28:	9300      	str	r3, [sp, #0]
 8003b2a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003b2e:	2232      	movs	r2, #50	; 0x32
 8003b30:	2196      	movs	r1, #150	; 0x96
 8003b32:	487a      	ldr	r0, [pc, #488]	; (8003d1c <FuncMenu_DrawOutputMenu+0x8c8>)
 8003b34:	f00c ff0c 	bl	8010950 <ILI9341_Draw_Text>
				break;
 8003b38:	e0db      	b.n	8003cf2 <FuncMenu_DrawOutputMenu+0x89e>
			case PWM_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	9301      	str	r3, [sp, #4]
 8003b3e:	2302      	movs	r3, #2
 8003b40:	9300      	str	r3, [sp, #0]
 8003b42:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003b46:	2232      	movs	r2, #50	; 0x32
 8003b48:	210a      	movs	r1, #10
 8003b4a:	486c      	ldr	r0, [pc, #432]	; (8003cfc <FuncMenu_DrawOutputMenu+0x8a8>)
 8003b4c:	f00c ff00 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003b50:	2300      	movs	r3, #0
 8003b52:	9301      	str	r3, [sp, #4]
 8003b54:	2302      	movs	r3, #2
 8003b56:	9300      	str	r3, [sp, #0]
 8003b58:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003b5c:	2246      	movs	r2, #70	; 0x46
 8003b5e:	210a      	movs	r1, #10
 8003b60:	4867      	ldr	r0, [pc, #412]	; (8003d00 <FuncMenu_DrawOutputMenu+0x8ac>)
 8003b62:	f00c fef5 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003b66:	2300      	movs	r3, #0
 8003b68:	9301      	str	r3, [sp, #4]
 8003b6a:	2302      	movs	r3, #2
 8003b6c:	9300      	str	r3, [sp, #0]
 8003b6e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003b72:	225a      	movs	r2, #90	; 0x5a
 8003b74:	210a      	movs	r1, #10
 8003b76:	4863      	ldr	r0, [pc, #396]	; (8003d04 <FuncMenu_DrawOutputMenu+0x8b0>)
 8003b78:	f00c feea 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	9301      	str	r3, [sp, #4]
 8003b80:	2302      	movs	r3, #2
 8003b82:	9300      	str	r3, [sp, #0]
 8003b84:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003b88:	226e      	movs	r2, #110	; 0x6e
 8003b8a:	210a      	movs	r1, #10
 8003b8c:	485e      	ldr	r0, [pc, #376]	; (8003d08 <FuncMenu_DrawOutputMenu+0x8b4>)
 8003b8e:	f00c fedf 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003b92:	2300      	movs	r3, #0
 8003b94:	9301      	str	r3, [sp, #4]
 8003b96:	2302      	movs	r3, #2
 8003b98:	9300      	str	r3, [sp, #0]
 8003b9a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003b9e:	2282      	movs	r2, #130	; 0x82
 8003ba0:	210a      	movs	r1, #10
 8003ba2:	485a      	ldr	r0, [pc, #360]	; (8003d0c <FuncMenu_DrawOutputMenu+0x8b8>)
 8003ba4:	f00c fed4 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003ba8:	2300      	movs	r3, #0
 8003baa:	9301      	str	r3, [sp, #4]
 8003bac:	2302      	movs	r3, #2
 8003bae:	9300      	str	r3, [sp, #0]
 8003bb0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003bb4:	2296      	movs	r2, #150	; 0x96
 8003bb6:	210a      	movs	r1, #10
 8003bb8:	4855      	ldr	r0, [pc, #340]	; (8003d10 <FuncMenu_DrawOutputMenu+0x8bc>)
 8003bba:	f00c fec9 	bl	8010950 <ILI9341_Draw_Text>

				if(pOutChan)
 8003bbe:	79fb      	ldrb	r3, [r7, #7]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d00a      	beq.n	8003bda <FuncMenu_DrawOutputMenu+0x786>
					ILI9341_Draw_Text("- PWM", 		10, 170, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003bc4:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003bc8:	9301      	str	r3, [sp, #4]
 8003bca:	2302      	movs	r3, #2
 8003bcc:	9300      	str	r3, [sp, #0]
 8003bce:	2300      	movs	r3, #0
 8003bd0:	22aa      	movs	r2, #170	; 0xaa
 8003bd2:	210a      	movs	r1, #10
 8003bd4:	484f      	ldr	r0, [pc, #316]	; (8003d14 <FuncMenu_DrawOutputMenu+0x8c0>)
 8003bd6:	f00c febb 	bl	8010950 <ILI9341_Draw_Text>

				// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003bda:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003bde:	9301      	str	r3, [sp, #4]
 8003be0:	2302      	movs	r3, #2
 8003be2:	9300      	str	r3, [sp, #0]
 8003be4:	2300      	movs	r3, #0
 8003be6:	22d2      	movs	r2, #210	; 0xd2
 8003be8:	2105      	movs	r1, #5
 8003bea:	484b      	ldr	r0, [pc, #300]	; (8003d18 <FuncMenu_DrawOutputMenu+0x8c4>)
 8003bec:	f00c feb0 	bl	8010950 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003bf0:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003bf4:	9301      	str	r3, [sp, #4]
 8003bf6:	2302      	movs	r3, #2
 8003bf8:	9300      	str	r3, [sp, #0]
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	22d2      	movs	r2, #210	; 0xd2
 8003bfe:	2161      	movs	r1, #97	; 0x61
 8003c00:	4845      	ldr	r0, [pc, #276]	; (8003d18 <FuncMenu_DrawOutputMenu+0x8c4>)
 8003c02:	f00c fea5 	bl	8010950 <ILI9341_Draw_Text>

				if(pOutChan)
 8003c06:	79fb      	ldrb	r3, [r7, #7]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d05a      	beq.n	8003cc2 <FuncMenu_DrawOutputMenu+0x86e>
				{
					ILI9341_Draw_Text("DUTY", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003c0c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003c10:	9301      	str	r3, [sp, #4]
 8003c12:	2302      	movs	r3, #2
 8003c14:	9300      	str	r3, [sp, #0]
 8003c16:	2300      	movs	r3, #0
 8003c18:	22d2      	movs	r2, #210	; 0xd2
 8003c1a:	21af      	movs	r1, #175	; 0xaf
 8003c1c:	4840      	ldr	r0, [pc, #256]	; (8003d20 <FuncMenu_DrawOutputMenu+0x8cc>)
 8003c1e:	f00c fe97 	bl	8010950 <ILI9341_Draw_Text>
					char duty[10] = "";
 8003c22:	2300      	movs	r3, #0
 8003c24:	60bb      	str	r3, [r7, #8]
 8003c26:	f107 030c 	add.w	r3, r7, #12
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	601a      	str	r2, [r3, #0]
 8003c2e:	809a      	strh	r2, [r3, #4]
					snprintf(duty, sizeof(duty), "%0.2f%%", ((float)PWM_AUX_OUT_TIM->CCR1 / (float)PWM_AUX_OUT_TIM->ARR) * 100);
 8003c30:	4b3c      	ldr	r3, [pc, #240]	; (8003d24 <FuncMenu_DrawOutputMenu+0x8d0>)
 8003c32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c34:	ee07 3a90 	vmov	s15, r3
 8003c38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c3c:	4b39      	ldr	r3, [pc, #228]	; (8003d24 <FuncMenu_DrawOutputMenu+0x8d0>)
 8003c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c40:	ee07 3a90 	vmov	s15, r3
 8003c44:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003c48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c4c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8003d28 <FuncMenu_DrawOutputMenu+0x8d4>
 8003c50:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c54:	ee17 0a90 	vmov	r0, s15
 8003c58:	f7fc fc9e 	bl	8000598 <__aeabi_f2d>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	460c      	mov	r4, r1
 8003c60:	f107 0008 	add.w	r0, r7, #8
 8003c64:	e9cd 3400 	strd	r3, r4, [sp]
 8003c68:	4a30      	ldr	r2, [pc, #192]	; (8003d2c <FuncMenu_DrawOutputMenu+0x8d8>)
 8003c6a:	210a      	movs	r1, #10
 8003c6c:	f00e fa2c 	bl	80120c8 <sniprintf>
					ILI9341_Draw_Text(duty, 	220, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003c70:	f107 0008 	add.w	r0, r7, #8
 8003c74:	2300      	movs	r3, #0
 8003c76:	9301      	str	r3, [sp, #4]
 8003c78:	2302      	movs	r3, #2
 8003c7a:	9300      	str	r3, [sp, #0]
 8003c7c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003c80:	2232      	movs	r2, #50	; 0x32
 8003c82:	21dc      	movs	r1, #220	; 0xdc
 8003c84:	f00c fe64 	bl	8010950 <ILI9341_Draw_Text>
					if(SM_IsFuncPwmDutyMode())
 8003c88:	f003 f992 	bl	8006fb0 <SM_IsFuncPwmDutyMode>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d00b      	beq.n	8003caa <FuncMenu_DrawOutputMenu+0x856>
					{
						ILI9341_Draw_Text("DUTY:", 	150, 50,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003c92:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003c96:	9301      	str	r3, [sp, #4]
 8003c98:	2302      	movs	r3, #2
 8003c9a:	9300      	str	r3, [sp, #0]
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	2232      	movs	r2, #50	; 0x32
 8003ca0:	2196      	movs	r1, #150	; 0x96
 8003ca2:	4823      	ldr	r0, [pc, #140]	; (8003d30 <FuncMenu_DrawOutputMenu+0x8dc>)
 8003ca4:	f00c fe54 	bl	8010950 <ILI9341_Draw_Text>
 8003ca8:	e016      	b.n	8003cd8 <FuncMenu_DrawOutputMenu+0x884>

					}
					else
					{
						ILI9341_Draw_Text("DUTY:", 	150, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003caa:	2300      	movs	r3, #0
 8003cac:	9301      	str	r3, [sp, #4]
 8003cae:	2302      	movs	r3, #2
 8003cb0:	9300      	str	r3, [sp, #0]
 8003cb2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003cb6:	2232      	movs	r2, #50	; 0x32
 8003cb8:	2196      	movs	r1, #150	; 0x96
 8003cba:	481d      	ldr	r0, [pc, #116]	; (8003d30 <FuncMenu_DrawOutputMenu+0x8dc>)
 8003cbc:	f00c fe48 	bl	8010950 <ILI9341_Draw_Text>
 8003cc0:	e00a      	b.n	8003cd8 <FuncMenu_DrawOutputMenu+0x884>
					}
				}
				else
				{
					ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003cc2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003cc6:	9301      	str	r3, [sp, #4]
 8003cc8:	2302      	movs	r3, #2
 8003cca:	9300      	str	r3, [sp, #0]
 8003ccc:	2300      	movs	r3, #0
 8003cce:	22d2      	movs	r2, #210	; 0xd2
 8003cd0:	21af      	movs	r1, #175	; 0xaf
 8003cd2:	4811      	ldr	r0, [pc, #68]	; (8003d18 <FuncMenu_DrawOutputMenu+0x8c4>)
 8003cd4:	f00c fe3c 	bl	8010950 <ILI9341_Draw_Text>
				}

				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003cd8:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003cdc:	9301      	str	r3, [sp, #4]
 8003cde:	2302      	movs	r3, #2
 8003ce0:	9300      	str	r3, [sp, #0]
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	22d2      	movs	r2, #210	; 0xd2
 8003ce6:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003cea:	480b      	ldr	r0, [pc, #44]	; (8003d18 <FuncMenu_DrawOutputMenu+0x8c4>)
 8003cec:	f00c fe30 	bl	8010950 <ILI9341_Draw_Text>

				break;
 8003cf0:	bf00      	nop
				//
		}
	}
}
 8003cf2:	bf00      	nop
 8003cf4:	371c      	adds	r7, #28
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd90      	pop	{r4, r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	08015bd0 	.word	0x08015bd0
 8003d00:	08015bd8 	.word	0x08015bd8
 8003d04:	08015be4 	.word	0x08015be4
 8003d08:	08015bec 	.word	0x08015bec
 8003d0c:	08015bf8 	.word	0x08015bf8
 8003d10:	08015c04 	.word	0x08015c04
 8003d14:	08015c0c 	.word	0x08015c0c
 8003d18:	08015ba8 	.word	0x08015ba8
 8003d1c:	08015c14 	.word	0x08015c14
 8003d20:	08015c24 	.word	0x08015c24
 8003d24:	40000400 	.word	0x40000400
 8003d28:	42c80000 	.word	0x42c80000
 8003d2c:	08015c2c 	.word	0x08015c2c
 8003d30:	08015c34 	.word	0x08015c34

08003d34 <GainMenu_DrawMenu>:
			Gain_Aux_Menu_State,
 *	@retval None
 *
 */
void GainMenu_DrawMenu(eSystemState pMenu)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8003d3e:	79fb      	ldrb	r3, [r7, #7]
 8003d40:	2b07      	cmp	r3, #7
 8003d42:	d007      	beq.n	8003d54 <GainMenu_DrawMenu+0x20>
 8003d44:	2b08      	cmp	r3, #8
 8003d46:	d008      	beq.n	8003d5a <GainMenu_DrawMenu+0x26>
 8003d48:	2b06      	cmp	r3, #6
 8003d4a:	d000      	beq.n	8003d4e <GainMenu_DrawMenu+0x1a>
		case Gain_Aux_Menu_State:
			GainMenu_DrawAuxMenu();
			break;

		default:
			break;
 8003d4c:	e008      	b.n	8003d60 <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawMainMenu();
 8003d4e:	f000 f80b 	bl	8003d68 <GainMenu_DrawMainMenu>
			break;
 8003d52:	e005      	b.n	8003d60 <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawSignalMenu();
 8003d54:	f000 f868 	bl	8003e28 <GainMenu_DrawSignalMenu>
			break;
 8003d58:	e002      	b.n	8003d60 <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawAuxMenu();
 8003d5a:	f000 f8af 	bl	8003ebc <GainMenu_DrawAuxMenu>
			break;
 8003d5e:	bf00      	nop

	}
}
 8003d60:	bf00      	nop
 8003d62:	3708      	adds	r7, #8
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <GainMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawMainMenu()
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("OUT->GAIN", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003d6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003d72:	9301      	str	r3, [sp, #4]
 8003d74:	2302      	movs	r3, #2
 8003d76:	9300      	str	r3, [sp, #0]
 8003d78:	2300      	movs	r3, #0
 8003d7a:	220a      	movs	r2, #10
 8003d7c:	210a      	movs	r1, #10
 8003d7e:	4826      	ldr	r0, [pc, #152]	; (8003e18 <GainMenu_DrawMainMenu+0xb0>)
 8003d80:	f00c fde6 	bl	8010950 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003d84:	f7fd f868 	bl	8000e58 <DM_DisplayFormattedOutput>

	// coloured menu btn labels
	ILI9341_Draw_Text("SIGNAL", 5, 	 210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003d88:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003d8c:	9301      	str	r3, [sp, #4]
 8003d8e:	2302      	movs	r3, #2
 8003d90:	9300      	str	r3, [sp, #0]
 8003d92:	2300      	movs	r3, #0
 8003d94:	22d2      	movs	r2, #210	; 0xd2
 8003d96:	2105      	movs	r1, #5
 8003d98:	4820      	ldr	r0, [pc, #128]	; (8003e1c <GainMenu_DrawMainMenu+0xb4>)
 8003d9a:	f00c fdd9 	bl	8010950 <ILI9341_Draw_Text>

	eOutput_mode aux_output_func = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 8003d9e:	2001      	movs	r0, #1
 8003da0:	f002 fe04 	bl	80069ac <SM_GetOutputChannel>
 8003da4:	4603      	mov	r3, r0
 8003da6:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	71fb      	strb	r3, [r7, #7]
	if(aux_output_func == PWM_FUNC_MODE)
 8003dae:	79fb      	ldrb	r3, [r7, #7]
 8003db0:	2b06      	cmp	r3, #6
 8003db2:	d10b      	bne.n	8003dcc <GainMenu_DrawMainMenu+0x64>
	{
		ILI9341_Draw_Text("    ",	100,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003db4:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003db8:	9301      	str	r3, [sp, #4]
 8003dba:	2302      	movs	r3, #2
 8003dbc:	9300      	str	r3, [sp, #0]
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	22d2      	movs	r2, #210	; 0xd2
 8003dc2:	2164      	movs	r1, #100	; 0x64
 8003dc4:	4816      	ldr	r0, [pc, #88]	; (8003e20 <GainMenu_DrawMainMenu+0xb8>)
 8003dc6:	f00c fdc3 	bl	8010950 <ILI9341_Draw_Text>
 8003dca:	e00a      	b.n	8003de2 <GainMenu_DrawMainMenu+0x7a>
	}
	else
	{
		ILI9341_Draw_Text("AUX",	100,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003dcc:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003dd0:	9301      	str	r3, [sp, #4]
 8003dd2:	2302      	movs	r3, #2
 8003dd4:	9300      	str	r3, [sp, #0]
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	22d2      	movs	r2, #210	; 0xd2
 8003dda:	2164      	movs	r1, #100	; 0x64
 8003ddc:	4811      	ldr	r0, [pc, #68]	; (8003e24 <GainMenu_DrawMainMenu+0xbc>)
 8003dde:	f00c fdb7 	bl	8010950 <ILI9341_Draw_Text>
	}

	ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003de2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003de6:	9301      	str	r3, [sp, #4]
 8003de8:	2302      	movs	r3, #2
 8003dea:	9300      	str	r3, [sp, #0]
 8003dec:	2300      	movs	r3, #0
 8003dee:	22d2      	movs	r2, #210	; 0xd2
 8003df0:	21af      	movs	r1, #175	; 0xaf
 8003df2:	480b      	ldr	r0, [pc, #44]	; (8003e20 <GainMenu_DrawMainMenu+0xb8>)
 8003df4:	f00c fdac 	bl	8010950 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003df8:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003dfc:	9301      	str	r3, [sp, #4]
 8003dfe:	2302      	movs	r3, #2
 8003e00:	9300      	str	r3, [sp, #0]
 8003e02:	2300      	movs	r3, #0
 8003e04:	22d2      	movs	r2, #210	; 0xd2
 8003e06:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003e0a:	4805      	ldr	r0, [pc, #20]	; (8003e20 <GainMenu_DrawMainMenu+0xb8>)
 8003e0c:	f00c fda0 	bl	8010950 <ILI9341_Draw_Text>
}
 8003e10:	bf00      	nop
 8003e12:	3708      	adds	r7, #8
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	08015c3c 	.word	0x08015c3c
 8003e1c:	08015c48 	.word	0x08015c48
 8003e20:	08015c50 	.word	0x08015c50
 8003e24:	08015c58 	.word	0x08015c58

08003e28 <GainMenu_DrawSignalMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawSignalMenu()
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b082      	sub	sp, #8
 8003e2c:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->GAIN->SIG", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003e2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003e32:	9301      	str	r3, [sp, #4]
 8003e34:	2302      	movs	r3, #2
 8003e36:	9300      	str	r3, [sp, #0]
 8003e38:	2300      	movs	r3, #0
 8003e3a:	220a      	movs	r2, #10
 8003e3c:	210a      	movs	r1, #10
 8003e3e:	481a      	ldr	r0, [pc, #104]	; (8003ea8 <GainMenu_DrawSignalMenu+0x80>)
 8003e40:	f00c fd86 	bl	8010950 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003e44:	f7fd f808 	bl	8000e58 <DM_DisplayFormattedOutput>

	ILI9341_Draw_Text("1.8V", 15,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003e48:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003e4c:	9301      	str	r3, [sp, #4]
 8003e4e:	2302      	movs	r3, #2
 8003e50:	9300      	str	r3, [sp, #0]
 8003e52:	2300      	movs	r3, #0
 8003e54:	22d2      	movs	r2, #210	; 0xd2
 8003e56:	210f      	movs	r1, #15
 8003e58:	4814      	ldr	r0, [pc, #80]	; (8003eac <GainMenu_DrawSignalMenu+0x84>)
 8003e5a:	f00c fd79 	bl	8010950 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("3.3V", 97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003e5e:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003e62:	9301      	str	r3, [sp, #4]
 8003e64:	2302      	movs	r3, #2
 8003e66:	9300      	str	r3, [sp, #0]
 8003e68:	2300      	movs	r3, #0
 8003e6a:	22d2      	movs	r2, #210	; 0xd2
 8003e6c:	2161      	movs	r1, #97	; 0x61
 8003e6e:	4810      	ldr	r0, [pc, #64]	; (8003eb0 <GainMenu_DrawSignalMenu+0x88>)
 8003e70:	f00c fd6e 	bl	8010950 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("5V",  190, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003e74:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003e78:	9301      	str	r3, [sp, #4]
 8003e7a:	2302      	movs	r3, #2
 8003e7c:	9300      	str	r3, [sp, #0]
 8003e7e:	2300      	movs	r3, #0
 8003e80:	22d2      	movs	r2, #210	; 0xd2
 8003e82:	21be      	movs	r1, #190	; 0xbe
 8003e84:	480b      	ldr	r0, [pc, #44]	; (8003eb4 <GainMenu_DrawSignalMenu+0x8c>)
 8003e86:	f00c fd63 	bl	8010950 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("9V", 265, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003e8a:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003e8e:	9301      	str	r3, [sp, #4]
 8003e90:	2302      	movs	r3, #2
 8003e92:	9300      	str	r3, [sp, #0]
 8003e94:	2300      	movs	r3, #0
 8003e96:	22d2      	movs	r2, #210	; 0xd2
 8003e98:	f240 1109 	movw	r1, #265	; 0x109
 8003e9c:	4806      	ldr	r0, [pc, #24]	; (8003eb8 <GainMenu_DrawSignalMenu+0x90>)
 8003e9e:	f00c fd57 	bl	8010950 <ILI9341_Draw_Text>
}
 8003ea2:	bf00      	nop
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}
 8003ea8:	08015c5c 	.word	0x08015c5c
 8003eac:	08015c6c 	.word	0x08015c6c
 8003eb0:	08015c74 	.word	0x08015c74
 8003eb4:	08015c7c 	.word	0x08015c7c
 8003eb8:	08015c80 	.word	0x08015c80

08003ebc <GainMenu_DrawAuxMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawAuxMenu()
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b082      	sub	sp, #8
 8003ec0:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->GAIN->Aux", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003ec2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003ec6:	9301      	str	r3, [sp, #4]
 8003ec8:	2302      	movs	r3, #2
 8003eca:	9300      	str	r3, [sp, #0]
 8003ecc:	2300      	movs	r3, #0
 8003ece:	220a      	movs	r2, #10
 8003ed0:	210a      	movs	r1, #10
 8003ed2:	4804      	ldr	r0, [pc, #16]	; (8003ee4 <GainMenu_DrawAuxMenu+0x28>)
 8003ed4:	f00c fd3c 	bl	8010950 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003ed8:	f7fc ffbe 	bl	8000e58 <DM_DisplayFormattedOutput>
}
 8003edc:	bf00      	nop
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	08015c84 	.word	0x08015c84

08003ee8 <ToplevelMenu_DrawMenu>:
			Toplevel_Input_Menu_State,
 *	@retval None
 *
 */
void ToplevelMenu_DrawMenu(eSystemState pMenu)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b082      	sub	sp, #8
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	4603      	mov	r3, r0
 8003ef0:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8003ef2:	79fb      	ldrb	r3, [r7, #7]
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d007      	beq.n	8003f08 <ToplevelMenu_DrawMenu+0x20>
 8003ef8:	2b02      	cmp	r3, #2
 8003efa:	d008      	beq.n	8003f0e <ToplevelMenu_DrawMenu+0x26>
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d000      	beq.n	8003f02 <ToplevelMenu_DrawMenu+0x1a>
		case Toplevel_Input_Menu_State:
			ToplevelMenu_DrawInputMenu();
			break;

		default:
			break;
 8003f00:	e008      	b.n	8003f14 <ToplevelMenu_DrawMenu+0x2c>
			ToplevelMenu_DrawMainMenu();
 8003f02:	f000 f80b 	bl	8003f1c <ToplevelMenu_DrawMainMenu>
			break;
 8003f06:	e005      	b.n	8003f14 <ToplevelMenu_DrawMenu+0x2c>
			ToplevelMenu_DrawOutputMenu();
 8003f08:	f000 f844 	bl	8003f94 <ToplevelMenu_DrawOutputMenu>
			break;
 8003f0c:	e002      	b.n	8003f14 <ToplevelMenu_DrawMenu+0x2c>
			ToplevelMenu_DrawInputMenu();
 8003f0e:	f000 f88b 	bl	8004028 <ToplevelMenu_DrawInputMenu>
			break;
 8003f12:	bf00      	nop

	}
}
 8003f14:	bf00      	nop
 8003f16:	3708      	adds	r7, #8
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <ToplevelMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawMainMenu()
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b082      	sub	sp, #8
 8003f20:	af02      	add	r7, sp, #8
	#endif

	// Main screen
	//ILI9341_Draw_Text("SIGNAL GENERATOR", 	10, 10, WHITE, 2, BLACK);

	DM_DisplayFormattedOutput();
 8003f22:	f7fc ff99 	bl	8000e58 <DM_DisplayFormattedOutput>

	ILI9341_Draw_Text("OUTPUT", 6, 210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003f26:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003f2a:	9301      	str	r3, [sp, #4]
 8003f2c:	2302      	movs	r3, #2
 8003f2e:	9300      	str	r3, [sp, #0]
 8003f30:	2300      	movs	r3, #0
 8003f32:	22d2      	movs	r2, #210	; 0xd2
 8003f34:	2106      	movs	r1, #6
 8003f36:	4814      	ldr	r0, [pc, #80]	; (8003f88 <ToplevelMenu_DrawMainMenu+0x6c>)
 8003f38:	f00c fd0a 	bl	8010950 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("INPUT", 93, 210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003f3c:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003f40:	9301      	str	r3, [sp, #4]
 8003f42:	2302      	movs	r3, #2
 8003f44:	9300      	str	r3, [sp, #0]
 8003f46:	2300      	movs	r3, #0
 8003f48:	22d2      	movs	r2, #210	; 0xd2
 8003f4a:	215d      	movs	r1, #93	; 0x5d
 8003f4c:	480f      	ldr	r0, [pc, #60]	; (8003f8c <ToplevelMenu_DrawMainMenu+0x70>)
 8003f4e:	f00c fcff 	bl	8010950 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003f52:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003f56:	9301      	str	r3, [sp, #4]
 8003f58:	2302      	movs	r3, #2
 8003f5a:	9300      	str	r3, [sp, #0]
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	22d2      	movs	r2, #210	; 0xd2
 8003f60:	21af      	movs	r1, #175	; 0xaf
 8003f62:	480b      	ldr	r0, [pc, #44]	; (8003f90 <ToplevelMenu_DrawMainMenu+0x74>)
 8003f64:	f00c fcf4 	bl	8010950 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003f68:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003f6c:	9301      	str	r3, [sp, #4]
 8003f6e:	2302      	movs	r3, #2
 8003f70:	9300      	str	r3, [sp, #0]
 8003f72:	2300      	movs	r3, #0
 8003f74:	22d2      	movs	r2, #210	; 0xd2
 8003f76:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003f7a:	4805      	ldr	r0, [pc, #20]	; (8003f90 <ToplevelMenu_DrawMainMenu+0x74>)
 8003f7c:	f00c fce8 	bl	8010950 <ILI9341_Draw_Text>


}
 8003f80:	bf00      	nop
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	08015c94 	.word	0x08015c94
 8003f8c:	08015c9c 	.word	0x08015c9c
 8003f90:	08015ca4 	.word	0x08015ca4

08003f94 <ToplevelMenu_DrawOutputMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawOutputMenu()
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b082      	sub	sp, #8
 8003f98:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003f9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003f9e:	9301      	str	r3, [sp, #4]
 8003fa0:	2302      	movs	r3, #2
 8003fa2:	9300      	str	r3, [sp, #0]
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	220a      	movs	r2, #10
 8003fa8:	210a      	movs	r1, #10
 8003faa:	481a      	ldr	r0, [pc, #104]	; (8004014 <ToplevelMenu_DrawOutputMenu+0x80>)
 8003fac:	f00c fcd0 	bl	8010950 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003fb0:	f7fc ff52 	bl	8000e58 <DM_DisplayFormattedOutput>

	ILI9341_Draw_Text("FUNC", 15,  210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003fb4:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003fb8:	9301      	str	r3, [sp, #4]
 8003fba:	2302      	movs	r3, #2
 8003fbc:	9300      	str	r3, [sp, #0]
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	22d2      	movs	r2, #210	; 0xd2
 8003fc2:	210f      	movs	r1, #15
 8003fc4:	4814      	ldr	r0, [pc, #80]	; (8004018 <ToplevelMenu_DrawOutputMenu+0x84>)
 8003fc6:	f00c fcc3 	bl	8010950 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("FREQ", 98,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003fca:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003fce:	9301      	str	r3, [sp, #4]
 8003fd0:	2302      	movs	r3, #2
 8003fd2:	9300      	str	r3, [sp, #0]
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	22d2      	movs	r2, #210	; 0xd2
 8003fd8:	2162      	movs	r1, #98	; 0x62
 8003fda:	4810      	ldr	r0, [pc, #64]	; (800401c <ToplevelMenu_DrawOutputMenu+0x88>)
 8003fdc:	f00c fcb8 	bl	8010950 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("GAIN", 176, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003fe0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003fe4:	9301      	str	r3, [sp, #4]
 8003fe6:	2302      	movs	r3, #2
 8003fe8:	9300      	str	r3, [sp, #0]
 8003fea:	2300      	movs	r3, #0
 8003fec:	22d2      	movs	r2, #210	; 0xd2
 8003fee:	21b0      	movs	r1, #176	; 0xb0
 8003ff0:	480b      	ldr	r0, [pc, #44]	; (8004020 <ToplevelMenu_DrawOutputMenu+0x8c>)
 8003ff2:	f00c fcad 	bl	8010950 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("OFFSET", 245, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003ff6:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003ffa:	9301      	str	r3, [sp, #4]
 8003ffc:	2302      	movs	r3, #2
 8003ffe:	9300      	str	r3, [sp, #0]
 8004000:	2300      	movs	r3, #0
 8004002:	22d2      	movs	r2, #210	; 0xd2
 8004004:	21f5      	movs	r1, #245	; 0xf5
 8004006:	4807      	ldr	r0, [pc, #28]	; (8004024 <ToplevelMenu_DrawOutputMenu+0x90>)
 8004008:	f00c fca2 	bl	8010950 <ILI9341_Draw_Text>
}
 800400c:	bf00      	nop
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	08015cac 	.word	0x08015cac
 8004018:	08015cb4 	.word	0x08015cb4
 800401c:	08015cbc 	.word	0x08015cbc
 8004020:	08015cc4 	.word	0x08015cc4
 8004024:	08015ccc 	.word	0x08015ccc

08004028 <ToplevelMenu_DrawInputMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawInputMenu()
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b088      	sub	sp, #32
 800402c:	af02      	add	r7, sp, #8

	DM_DisplayInputTriggerStatus();
 800402e:	f7fc ff33 	bl	8000e98 <DM_DisplayInputTriggerStatus>

	//
	// BREADCRUMB TRAIL
	//
	ILI9341_Draw_Text("IN->", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8004032:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004036:	9301      	str	r3, [sp, #4]
 8004038:	2302      	movs	r3, #2
 800403a:	9300      	str	r3, [sp, #0]
 800403c:	2300      	movs	r3, #0
 800403e:	220a      	movs	r2, #10
 8004040:	210a      	movs	r1, #10
 8004042:	48c5      	ldr	r0, [pc, #788]	; (8004358 <ToplevelMenu_DrawInputMenu+0x330>)
 8004044:	f00c fc84 	bl	8010950 <ILI9341_Draw_Text>

	//
	// TRIGGER SETTINGS DISPLAY
	//
	ILI9341_Draw_Text("TRIGGER:", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8004048:	2300      	movs	r3, #0
 800404a:	9301      	str	r3, [sp, #4]
 800404c:	2302      	movs	r3, #2
 800404e:	9300      	str	r3, [sp, #0]
 8004050:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8004054:	2232      	movs	r2, #50	; 0x32
 8004056:	210a      	movs	r1, #10
 8004058:	48c0      	ldr	r0, [pc, #768]	; (800435c <ToplevelMenu_DrawInputMenu+0x334>)
 800405a:	f00c fc79 	bl	8010950 <ILI9341_Draw_Text>
	if(IT_GetTriggerStatus())
 800405e:	f002 fb75 	bl	800674c <IT_GetTriggerStatus>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d016      	beq.n	8004096 <ToplevelMenu_DrawInputMenu+0x6e>
	{
		ILI9341_Draw_Text("ON", 	150, 50,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8004068:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 800406c:	9301      	str	r3, [sp, #4]
 800406e:	2302      	movs	r3, #2
 8004070:	9300      	str	r3, [sp, #0]
 8004072:	2300      	movs	r3, #0
 8004074:	2232      	movs	r2, #50	; 0x32
 8004076:	2196      	movs	r1, #150	; 0x96
 8004078:	48b9      	ldr	r0, [pc, #740]	; (8004360 <ToplevelMenu_DrawInputMenu+0x338>)
 800407a:	f00c fc69 	bl	8010950 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("OFF", 	200, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800407e:	2300      	movs	r3, #0
 8004080:	9301      	str	r3, [sp, #4]
 8004082:	2302      	movs	r3, #2
 8004084:	9300      	str	r3, [sp, #0]
 8004086:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800408a:	2232      	movs	r2, #50	; 0x32
 800408c:	21c8      	movs	r1, #200	; 0xc8
 800408e:	48b5      	ldr	r0, [pc, #724]	; (8004364 <ToplevelMenu_DrawInputMenu+0x33c>)
 8004090:	f00c fc5e 	bl	8010950 <ILI9341_Draw_Text>
 8004094:	e015      	b.n	80040c2 <ToplevelMenu_DrawInputMenu+0x9a>
	}
	else
	{
		ILI9341_Draw_Text("ON", 	150, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8004096:	2300      	movs	r3, #0
 8004098:	9301      	str	r3, [sp, #4]
 800409a:	2302      	movs	r3, #2
 800409c:	9300      	str	r3, [sp, #0]
 800409e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80040a2:	2232      	movs	r2, #50	; 0x32
 80040a4:	2196      	movs	r1, #150	; 0x96
 80040a6:	48ae      	ldr	r0, [pc, #696]	; (8004360 <ToplevelMenu_DrawInputMenu+0x338>)
 80040a8:	f00c fc52 	bl	8010950 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("OFF", 	200, 50,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80040ac:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80040b0:	9301      	str	r3, [sp, #4]
 80040b2:	2302      	movs	r3, #2
 80040b4:	9300      	str	r3, [sp, #0]
 80040b6:	2300      	movs	r3, #0
 80040b8:	2232      	movs	r2, #50	; 0x32
 80040ba:	21c8      	movs	r1, #200	; 0xc8
 80040bc:	48a9      	ldr	r0, [pc, #676]	; (8004364 <ToplevelMenu_DrawInputMenu+0x33c>)
 80040be:	f00c fc47 	bl	8010950 <ILI9341_Draw_Text>
	}

	//
	// MODE SETTINGS DISPLAY
	//
	ILI9341_Draw_Text("MODE:", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80040c2:	2300      	movs	r3, #0
 80040c4:	9301      	str	r3, [sp, #4]
 80040c6:	2302      	movs	r3, #2
 80040c8:	9300      	str	r3, [sp, #0]
 80040ca:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80040ce:	2246      	movs	r2, #70	; 0x46
 80040d0:	210a      	movs	r1, #10
 80040d2:	48a5      	ldr	r0, [pc, #660]	; (8004368 <ToplevelMenu_DrawInputMenu+0x340>)
 80040d4:	f00c fc3c 	bl	8010950 <ILI9341_Draw_Text>
	if(IT_GetActiveTriggerMode() == INPUT_TIMER_TIM)
 80040d8:	f002 fb1c 	bl	8006714 <IT_GetActiveTriggerMode>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d122      	bne.n	8004128 <ToplevelMenu_DrawInputMenu+0x100>
	{
		ILI9341_Draw_Text("TIM", 	150, 70,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80040e2:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80040e6:	9301      	str	r3, [sp, #4]
 80040e8:	2302      	movs	r3, #2
 80040ea:	9300      	str	r3, [sp, #0]
 80040ec:	2300      	movs	r3, #0
 80040ee:	2246      	movs	r2, #70	; 0x46
 80040f0:	2196      	movs	r1, #150	; 0x96
 80040f2:	489e      	ldr	r0, [pc, #632]	; (800436c <ToplevelMenu_DrawInputMenu+0x344>)
 80040f4:	f00c fc2c 	bl	8010950 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("COMP", 	200, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80040f8:	2300      	movs	r3, #0
 80040fa:	9301      	str	r3, [sp, #4]
 80040fc:	2302      	movs	r3, #2
 80040fe:	9300      	str	r3, [sp, #0]
 8004100:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8004104:	2246      	movs	r2, #70	; 0x46
 8004106:	21c8      	movs	r1, #200	; 0xc8
 8004108:	4899      	ldr	r0, [pc, #612]	; (8004370 <ToplevelMenu_DrawInputMenu+0x348>)
 800410a:	f00c fc21 	bl	8010950 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("ADC", 	270, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800410e:	2300      	movs	r3, #0
 8004110:	9301      	str	r3, [sp, #4]
 8004112:	2302      	movs	r3, #2
 8004114:	9300      	str	r3, [sp, #0]
 8004116:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800411a:	2246      	movs	r2, #70	; 0x46
 800411c:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8004120:	4894      	ldr	r0, [pc, #592]	; (8004374 <ToplevelMenu_DrawInputMenu+0x34c>)
 8004122:	f00c fc15 	bl	8010950 <ILI9341_Draw_Text>
 8004126:	e04e      	b.n	80041c6 <ToplevelMenu_DrawInputMenu+0x19e>


	}
	else if(IT_GetActiveTriggerMode() == INPUT_TIMER_COMP)
 8004128:	f002 faf4 	bl	8006714 <IT_GetActiveTriggerMode>
 800412c:	4603      	mov	r3, r0
 800412e:	2b01      	cmp	r3, #1
 8004130:	d122      	bne.n	8004178 <ToplevelMenu_DrawInputMenu+0x150>
	{
		ILI9341_Draw_Text("TIM", 	150, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8004132:	2300      	movs	r3, #0
 8004134:	9301      	str	r3, [sp, #4]
 8004136:	2302      	movs	r3, #2
 8004138:	9300      	str	r3, [sp, #0]
 800413a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800413e:	2246      	movs	r2, #70	; 0x46
 8004140:	2196      	movs	r1, #150	; 0x96
 8004142:	488a      	ldr	r0, [pc, #552]	; (800436c <ToplevelMenu_DrawInputMenu+0x344>)
 8004144:	f00c fc04 	bl	8010950 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("COMP", 	200, 70,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8004148:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 800414c:	9301      	str	r3, [sp, #4]
 800414e:	2302      	movs	r3, #2
 8004150:	9300      	str	r3, [sp, #0]
 8004152:	2300      	movs	r3, #0
 8004154:	2246      	movs	r2, #70	; 0x46
 8004156:	21c8      	movs	r1, #200	; 0xc8
 8004158:	4885      	ldr	r0, [pc, #532]	; (8004370 <ToplevelMenu_DrawInputMenu+0x348>)
 800415a:	f00c fbf9 	bl	8010950 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("ADC", 	270, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800415e:	2300      	movs	r3, #0
 8004160:	9301      	str	r3, [sp, #4]
 8004162:	2302      	movs	r3, #2
 8004164:	9300      	str	r3, [sp, #0]
 8004166:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800416a:	2246      	movs	r2, #70	; 0x46
 800416c:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8004170:	4880      	ldr	r0, [pc, #512]	; (8004374 <ToplevelMenu_DrawInputMenu+0x34c>)
 8004172:	f00c fbed 	bl	8010950 <ILI9341_Draw_Text>
 8004176:	e026      	b.n	80041c6 <ToplevelMenu_DrawInputMenu+0x19e>


	}
	else if(IT_GetActiveTriggerMode() == INPUT_TIMER_ADC)
 8004178:	f002 facc 	bl	8006714 <IT_GetActiveTriggerMode>
 800417c:	4603      	mov	r3, r0
 800417e:	2b02      	cmp	r3, #2
 8004180:	d121      	bne.n	80041c6 <ToplevelMenu_DrawInputMenu+0x19e>
	{
		ILI9341_Draw_Text("TIM", 	150, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8004182:	2300      	movs	r3, #0
 8004184:	9301      	str	r3, [sp, #4]
 8004186:	2302      	movs	r3, #2
 8004188:	9300      	str	r3, [sp, #0]
 800418a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800418e:	2246      	movs	r2, #70	; 0x46
 8004190:	2196      	movs	r1, #150	; 0x96
 8004192:	4876      	ldr	r0, [pc, #472]	; (800436c <ToplevelMenu_DrawInputMenu+0x344>)
 8004194:	f00c fbdc 	bl	8010950 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("COMP", 	200, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8004198:	2300      	movs	r3, #0
 800419a:	9301      	str	r3, [sp, #4]
 800419c:	2302      	movs	r3, #2
 800419e:	9300      	str	r3, [sp, #0]
 80041a0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80041a4:	2246      	movs	r2, #70	; 0x46
 80041a6:	21c8      	movs	r1, #200	; 0xc8
 80041a8:	4871      	ldr	r0, [pc, #452]	; (8004370 <ToplevelMenu_DrawInputMenu+0x348>)
 80041aa:	f00c fbd1 	bl	8010950 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("ADC", 	270, 70,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80041ae:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80041b2:	9301      	str	r3, [sp, #4]
 80041b4:	2302      	movs	r3, #2
 80041b6:	9300      	str	r3, [sp, #0]
 80041b8:	2300      	movs	r3, #0
 80041ba:	2246      	movs	r2, #70	; 0x46
 80041bc:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80041c0:	486c      	ldr	r0, [pc, #432]	; (8004374 <ToplevelMenu_DrawInputMenu+0x34c>)
 80041c2:	f00c fbc5 	bl	8010950 <ILI9341_Draw_Text>
	}

	//
	// LFO/COMPVOLT MODE DISPLAY
	//
	if(IT_GetActiveTriggerMode() == INPUT_TIMER_TIM)
 80041c6:	f002 faa5 	bl	8006714 <IT_GetActiveTriggerMode>
 80041ca:	4603      	mov	r3, r0
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d141      	bne.n	8004254 <ToplevelMenu_DrawInputMenu+0x22c>
	{
		ILI9341_Draw_Text("LF MODE:", 	10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80041d0:	2300      	movs	r3, #0
 80041d2:	9301      	str	r3, [sp, #4]
 80041d4:	2302      	movs	r3, #2
 80041d6:	9300      	str	r3, [sp, #0]
 80041d8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80041dc:	225a      	movs	r2, #90	; 0x5a
 80041de:	210a      	movs	r1, #10
 80041e0:	4865      	ldr	r0, [pc, #404]	; (8004378 <ToplevelMenu_DrawInputMenu+0x350>)
 80041e2:	f00c fbb5 	bl	8010950 <ILI9341_Draw_Text>
		if(INPUT_TIMER->PSC > 128)
 80041e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80041ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ec:	2b80      	cmp	r3, #128	; 0x80
 80041ee:	d916      	bls.n	800421e <ToplevelMenu_DrawInputMenu+0x1f6>
		{
			ILI9341_Draw_Text("ON", 	150, 90,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80041f0:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80041f4:	9301      	str	r3, [sp, #4]
 80041f6:	2302      	movs	r3, #2
 80041f8:	9300      	str	r3, [sp, #0]
 80041fa:	2300      	movs	r3, #0
 80041fc:	225a      	movs	r2, #90	; 0x5a
 80041fe:	2196      	movs	r1, #150	; 0x96
 8004200:	4857      	ldr	r0, [pc, #348]	; (8004360 <ToplevelMenu_DrawInputMenu+0x338>)
 8004202:	f00c fba5 	bl	8010950 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("OFF", 	200, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8004206:	2300      	movs	r3, #0
 8004208:	9301      	str	r3, [sp, #4]
 800420a:	2302      	movs	r3, #2
 800420c:	9300      	str	r3, [sp, #0]
 800420e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8004212:	225a      	movs	r2, #90	; 0x5a
 8004214:	21c8      	movs	r1, #200	; 0xc8
 8004216:	4853      	ldr	r0, [pc, #332]	; (8004364 <ToplevelMenu_DrawInputMenu+0x33c>)
 8004218:	f00c fb9a 	bl	8010950 <ILI9341_Draw_Text>
 800421c:	e015      	b.n	800424a <ToplevelMenu_DrawInputMenu+0x222>
		}
		else
		{
			ILI9341_Draw_Text("ON", 	150, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800421e:	2300      	movs	r3, #0
 8004220:	9301      	str	r3, [sp, #4]
 8004222:	2302      	movs	r3, #2
 8004224:	9300      	str	r3, [sp, #0]
 8004226:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800422a:	225a      	movs	r2, #90	; 0x5a
 800422c:	2196      	movs	r1, #150	; 0x96
 800422e:	484c      	ldr	r0, [pc, #304]	; (8004360 <ToplevelMenu_DrawInputMenu+0x338>)
 8004230:	f00c fb8e 	bl	8010950 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("OFF", 	200, 90,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8004234:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8004238:	9301      	str	r3, [sp, #4]
 800423a:	2302      	movs	r3, #2
 800423c:	9300      	str	r3, [sp, #0]
 800423e:	2300      	movs	r3, #0
 8004240:	225a      	movs	r2, #90	; 0x5a
 8004242:	21c8      	movs	r1, #200	; 0xc8
 8004244:	4847      	ldr	r0, [pc, #284]	; (8004364 <ToplevelMenu_DrawInputMenu+0x33c>)
 8004246:	f00c fb83 	bl	8010950 <ILI9341_Draw_Text>
		}

		DM_DisplayInputTriggerTimerHertz(200, 17);
 800424a:	2111      	movs	r1, #17
 800424c:	20c8      	movs	r0, #200	; 0xc8
 800424e:	f7fc fea9 	bl	8000fa4 <DM_DisplayInputTriggerTimerHertz>
 8004252:	e038      	b.n	80042c6 <ToplevelMenu_DrawInputMenu+0x29e>
	}
	else if(IT_GetActiveTriggerMode() == INPUT_TIMER_COMP)
 8004254:	f002 fa5e 	bl	8006714 <IT_GetActiveTriggerMode>
 8004258:	4603      	mov	r3, r0
 800425a:	2b01      	cmp	r3, #1
 800425c:	d128      	bne.n	80042b0 <ToplevelMenu_DrawInputMenu+0x288>
	{
		char comp_text[20] = "";
 800425e:	2300      	movs	r3, #0
 8004260:	607b      	str	r3, [r7, #4]
 8004262:	f107 0308 	add.w	r3, r7, #8
 8004266:	2200      	movs	r2, #0
 8004268:	601a      	str	r2, [r3, #0]
 800426a:	605a      	str	r2, [r3, #4]
 800426c:	609a      	str	r2, [r3, #8]
 800426e:	60da      	str	r2, [r3, #12]
		snprintf(comp_text, sizeof(comp_text), "%lu V", HAL_COMP_GetOutputLevel(&hcomp1));
 8004270:	4842      	ldr	r0, [pc, #264]	; (800437c <ToplevelMenu_DrawInputMenu+0x354>)
 8004272:	f006 fec9 	bl	800b008 <HAL_COMP_GetOutputLevel>
 8004276:	4603      	mov	r3, r0
 8004278:	1d38      	adds	r0, r7, #4
 800427a:	4a41      	ldr	r2, [pc, #260]	; (8004380 <ToplevelMenu_DrawInputMenu+0x358>)
 800427c:	2114      	movs	r1, #20
 800427e:	f00d ff23 	bl	80120c8 <sniprintf>
		ILI9341_Draw_Text(comp_text, 150, 90,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8004282:	1d38      	adds	r0, r7, #4
 8004284:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8004288:	9301      	str	r3, [sp, #4]
 800428a:	2302      	movs	r3, #2
 800428c:	9300      	str	r3, [sp, #0]
 800428e:	2300      	movs	r3, #0
 8004290:	225a      	movs	r2, #90	; 0x5a
 8004292:	2196      	movs	r1, #150	; 0x96
 8004294:	f00c fb5c 	bl	8010950 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("                ", 	200, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8004298:	2300      	movs	r3, #0
 800429a:	9301      	str	r3, [sp, #4]
 800429c:	2302      	movs	r3, #2
 800429e:	9300      	str	r3, [sp, #0]
 80042a0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80042a4:	225a      	movs	r2, #90	; 0x5a
 80042a6:	21c8      	movs	r1, #200	; 0xc8
 80042a8:	4836      	ldr	r0, [pc, #216]	; (8004384 <ToplevelMenu_DrawInputMenu+0x35c>)
 80042aa:	f00c fb51 	bl	8010950 <ILI9341_Draw_Text>
 80042ae:	e00a      	b.n	80042c6 <ToplevelMenu_DrawInputMenu+0x29e>
	}
	else
	{
		ILI9341_Draw_Text("                                    ", 	10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80042b0:	2300      	movs	r3, #0
 80042b2:	9301      	str	r3, [sp, #4]
 80042b4:	2302      	movs	r3, #2
 80042b6:	9300      	str	r3, [sp, #0]
 80042b8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80042bc:	225a      	movs	r2, #90	; 0x5a
 80042be:	210a      	movs	r1, #10
 80042c0:	4831      	ldr	r0, [pc, #196]	; (8004388 <ToplevelMenu_DrawInputMenu+0x360>)
 80042c2:	f00c fb45 	bl	8010950 <ILI9341_Draw_Text>
	}

	//
	// MENU BUTTON DISPLAY
	//
	ILI9341_Draw_Text("ON/", 	20, 	204, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 80042c6:	f240 23fd 	movw	r3, #765	; 0x2fd
 80042ca:	9301      	str	r3, [sp, #4]
 80042cc:	2302      	movs	r3, #2
 80042ce:	9300      	str	r3, [sp, #0]
 80042d0:	2300      	movs	r3, #0
 80042d2:	22cc      	movs	r2, #204	; 0xcc
 80042d4:	2114      	movs	r1, #20
 80042d6:	482d      	ldr	r0, [pc, #180]	; (800438c <ToplevelMenu_DrawInputMenu+0x364>)
 80042d8:	f00c fb3a 	bl	8010950 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("OFF ",	20, 	222, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 80042dc:	f240 23fd 	movw	r3, #765	; 0x2fd
 80042e0:	9301      	str	r3, [sp, #4]
 80042e2:	2302      	movs	r3, #2
 80042e4:	9300      	str	r3, [sp, #0]
 80042e6:	2300      	movs	r3, #0
 80042e8:	22de      	movs	r2, #222	; 0xde
 80042ea:	2114      	movs	r1, #20
 80042ec:	4828      	ldr	r0, [pc, #160]	; (8004390 <ToplevelMenu_DrawInputMenu+0x368>)
 80042ee:	f00c fb2f 	bl	8010950 <ILI9341_Draw_Text>

	ILI9341_Draw_Text("SET", 	104,	204, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 80042f2:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80042f6:	9301      	str	r3, [sp, #4]
 80042f8:	2302      	movs	r3, #2
 80042fa:	9300      	str	r3, [sp, #0]
 80042fc:	2300      	movs	r3, #0
 80042fe:	22cc      	movs	r2, #204	; 0xcc
 8004300:	2168      	movs	r1, #104	; 0x68
 8004302:	4824      	ldr	r0, [pc, #144]	; (8004394 <ToplevelMenu_DrawInputMenu+0x36c>)
 8004304:	f00c fb24 	bl	8010950 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("MODE",	97, 	222, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8004308:	f241 43a2 	movw	r3, #5282	; 0x14a2
 800430c:	9301      	str	r3, [sp, #4]
 800430e:	2302      	movs	r3, #2
 8004310:	9300      	str	r3, [sp, #0]
 8004312:	2300      	movs	r3, #0
 8004314:	22de      	movs	r2, #222	; 0xde
 8004316:	2161      	movs	r1, #97	; 0x61
 8004318:	481f      	ldr	r0, [pc, #124]	; (8004398 <ToplevelMenu_DrawInputMenu+0x370>)
 800431a:	f00c fb19 	bl	8010950 <ILI9341_Draw_Text>

	if(IT_GetActiveTriggerMode() == INPUT_TIMER_TIM)
 800431e:	f002 f9f9 	bl	8006714 <IT_GetActiveTriggerMode>
 8004322:	4603      	mov	r3, r0
 8004324:	2b00      	cmp	r3, #0
 8004326:	d13b      	bne.n	80043a0 <ToplevelMenu_DrawInputMenu+0x378>
	{
		// draw additional "LFO Mode" menu option
		ILI9341_Draw_Text("LF", 	190,	204, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8004328:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800432c:	9301      	str	r3, [sp, #4]
 800432e:	2302      	movs	r3, #2
 8004330:	9300      	str	r3, [sp, #0]
 8004332:	2300      	movs	r3, #0
 8004334:	22cc      	movs	r2, #204	; 0xcc
 8004336:	21be      	movs	r1, #190	; 0xbe
 8004338:	4818      	ldr	r0, [pc, #96]	; (800439c <ToplevelMenu_DrawInputMenu+0x374>)
 800433a:	f00c fb09 	bl	8010950 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("MODE",	175, 	222, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 800433e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004342:	9301      	str	r3, [sp, #4]
 8004344:	2302      	movs	r3, #2
 8004346:	9300      	str	r3, [sp, #0]
 8004348:	2300      	movs	r3, #0
 800434a:	22de      	movs	r2, #222	; 0xde
 800434c:	21af      	movs	r1, #175	; 0xaf
 800434e:	4812      	ldr	r0, [pc, #72]	; (8004398 <ToplevelMenu_DrawInputMenu+0x370>)
 8004350:	f00c fafe 	bl	8010950 <ILI9341_Draw_Text>

/*
	ILI9341_Draw_Text("SET", 	263, 	204, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
	ILI9341_Draw_Text("LIMIT", 	252, 	222, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
*/
}
 8004354:	e03a      	b.n	80043cc <ToplevelMenu_DrawInputMenu+0x3a4>
 8004356:	bf00      	nop
 8004358:	08015cd4 	.word	0x08015cd4
 800435c:	08015cdc 	.word	0x08015cdc
 8004360:	08015ce8 	.word	0x08015ce8
 8004364:	08015cec 	.word	0x08015cec
 8004368:	08015cf0 	.word	0x08015cf0
 800436c:	08015cf8 	.word	0x08015cf8
 8004370:	08015cfc 	.word	0x08015cfc
 8004374:	08015d04 	.word	0x08015d04
 8004378:	08015d08 	.word	0x08015d08
 800437c:	200028f4 	.word	0x200028f4
 8004380:	08015d14 	.word	0x08015d14
 8004384:	08015d1c 	.word	0x08015d1c
 8004388:	08015d30 	.word	0x08015d30
 800438c:	08015d58 	.word	0x08015d58
 8004390:	08015d5c 	.word	0x08015d5c
 8004394:	08015d64 	.word	0x08015d64
 8004398:	08015d68 	.word	0x08015d68
 800439c:	08015d70 	.word	0x08015d70
		ILI9341_Draw_Text("   ", 	183,	204, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80043a0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80043a4:	9301      	str	r3, [sp, #4]
 80043a6:	2302      	movs	r3, #2
 80043a8:	9300      	str	r3, [sp, #0]
 80043aa:	2300      	movs	r3, #0
 80043ac:	22cc      	movs	r2, #204	; 0xcc
 80043ae:	21b7      	movs	r1, #183	; 0xb7
 80043b0:	4808      	ldr	r0, [pc, #32]	; (80043d4 <ToplevelMenu_DrawInputMenu+0x3ac>)
 80043b2:	f00c facd 	bl	8010950 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("    ",	173, 	222, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80043b6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80043ba:	9301      	str	r3, [sp, #4]
 80043bc:	2302      	movs	r3, #2
 80043be:	9300      	str	r3, [sp, #0]
 80043c0:	2300      	movs	r3, #0
 80043c2:	22de      	movs	r2, #222	; 0xde
 80043c4:	21ad      	movs	r1, #173	; 0xad
 80043c6:	4804      	ldr	r0, [pc, #16]	; (80043d8 <ToplevelMenu_DrawInputMenu+0x3b0>)
 80043c8:	f00c fac2 	bl	8010950 <ILI9341_Draw_Text>
}
 80043cc:	bf00      	nop
 80043ce:	3718      	adds	r7, #24
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}
 80043d4:	08015d74 	.word	0x08015d74
 80043d8:	08015ca4 	.word	0x08015ca4

080043dc <BiasMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuEntryHandler()
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("BiasMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 80043e0:	f7fd f9ee 	bl	80017c0 <DM_RefreshScreen>

	//_setBiasMenuStatus(ENABLE_BIAS_MENU);

	ENCODER_TIMER->ARR = BIAS_MAX;
 80043e4:	4b07      	ldr	r3, [pc, #28]	; (8004404 <BiasMenuEntryHandler+0x28>)
 80043e6:	f44f 7248 	mov.w	r2, #800	; 0x320
 80043ea:	62da      	str	r2, [r3, #44]	; 0x2c
	ENCODER_TIMER->CNT = BO_GetDcBiasEncoderValue();
 80043ec:	f001 f8f2 	bl	80055d4 <BO_GetDcBiasEncoderValue>
 80043f0:	4603      	mov	r3, r0
 80043f2:	461a      	mov	r2, r3
 80043f4:	4b03      	ldr	r3, [pc, #12]	; (8004404 <BiasMenuEntryHandler+0x28>)
 80043f6:	625a      	str	r2, [r3, #36]	; 0x24

	eNewEvent = evIdle;
 80043f8:	4b03      	ldr	r3, [pc, #12]	; (8004408 <BiasMenuEntryHandler+0x2c>)
 80043fa:	2200      	movs	r2, #0
 80043fc:	701a      	strb	r2, [r3, #0]
	return Bias_Menu_State;
 80043fe:	230f      	movs	r3, #15
}
 8004400:	4618      	mov	r0, r3
 8004402:	bd80      	pop	{r7, pc}
 8004404:	40012c00 	.word	0x40012c00
 8004408:	200020d2 	.word	0x200020d2

0800440c <BiasMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuInputHandler(eSystemEvent pEvent)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b082      	sub	sp, #8
 8004410:	af00      	add	r7, sp, #0
 8004412:	4603      	mov	r3, r0
 8004414:	71fb      	strb	r3, [r7, #7]
	#ifdef EVENT_MENU_DEBUG
		printf("BiasMenuInputHandler Event captured\n");
	#endif


	switch(pEvent)
 8004416:	79fb      	ldrb	r3, [r7, #7]
 8004418:	3b01      	subs	r3, #1
 800441a:	2b04      	cmp	r3, #4
 800441c:	d82d      	bhi.n	800447a <BiasMenuInputHandler+0x6e>
 800441e:	a201      	add	r2, pc, #4	; (adr r2, 8004424 <BiasMenuInputHandler+0x18>)
 8004420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004424:	08004449 	.word	0x08004449
 8004428:	0800445b 	.word	0x0800445b
 800442c:	08004469 	.word	0x08004469
 8004430:	0800447b 	.word	0x0800447b
 8004434:	08004439 	.word	0x08004439
	{
		case evEncoderSet:
			BO_MapEncoderPositionToSignalOutput(SM_GetEncoderValue(ENCODER_NORMAL));
 8004438:	2000      	movs	r0, #0
 800443a:	f002 fd33 	bl	8006ea4 <SM_GetEncoderValue>
 800443e:	4603      	mov	r3, r0
 8004440:	4618      	mov	r0, r3
 8004442:	f001 f8d3 	bl	80055ec <BO_MapEncoderPositionToSignalOutput>
			break;
 8004446:	e019      	b.n	800447c <BiasMenuInputHandler+0x70>
		case evBlueBtn:
			BO_MapEncoderPositionToSignalOutput(BIAS_MAX);
 8004448:	f44f 7048 	mov.w	r0, #800	; 0x320
 800444c:	f001 f8ce 	bl	80055ec <BO_MapEncoderPositionToSignalOutput>
			ENCODER_TIMER->CNT = BIAS_MAX;
 8004450:	4b0e      	ldr	r3, [pc, #56]	; (800448c <BiasMenuInputHandler+0x80>)
 8004452:	f44f 7248 	mov.w	r2, #800	; 0x320
 8004456:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 8004458:	e010      	b.n	800447c <BiasMenuInputHandler+0x70>
		case evGreenBtn:
			BO_MapEncoderPositionToSignalOutput(10);
 800445a:	200a      	movs	r0, #10
 800445c:	f001 f8c6 	bl	80055ec <BO_MapEncoderPositionToSignalOutput>
			ENCODER_TIMER->CNT = 10;
 8004460:	4b0a      	ldr	r3, [pc, #40]	; (800448c <BiasMenuInputHandler+0x80>)
 8004462:	220a      	movs	r2, #10
 8004464:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 8004466:	e009      	b.n	800447c <BiasMenuInputHandler+0x70>
		case evYellowBtn:
			// jump to zero crossing point
			BO_MapEncoderPositionToSignalOutput(BIAS_CENTER);
 8004468:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800446c:	f001 f8be 	bl	80055ec <BO_MapEncoderPositionToSignalOutput>
			ENCODER_TIMER->CNT = BIAS_CENTER;
 8004470:	4b06      	ldr	r3, [pc, #24]	; (800448c <BiasMenuInputHandler+0x80>)
 8004472:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8004476:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 8004478:	e000      	b.n	800447c <BiasMenuInputHandler+0x70>

		default:
			break;
 800447a:	bf00      	nop
	}


	eNewEvent = evIdle;
 800447c:	4b04      	ldr	r3, [pc, #16]	; (8004490 <BiasMenuInputHandler+0x84>)
 800447e:	2200      	movs	r2, #0
 8004480:	701a      	strb	r2, [r3, #0]
	return Bias_Menu_State;
 8004482:	230f      	movs	r3, #15
}
 8004484:	4618      	mov	r0, r3
 8004486:	3708      	adds	r7, #8
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}
 800448c:	40012c00 	.word	0x40012c00
 8004490:	200020d2 	.word	0x200020d2

08004494 <BiasMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuExitHandler()
{
 8004494:	b580      	push	{r7, lr}
 8004496:	af00      	add	r7, sp, #0
	#endif

	// disable the menu
	//_setBiasMenuStatus(DISABLE_BIAS_MENU);

	DM_RefreshScreen();
 8004498:	f7fd f992 	bl	80017c0 <DM_RefreshScreen>

	#ifdef EVENT_MENU_DEBUG
		  printf("returning to Idle State\n");
	#endif

	eNewEvent = evIdle;
 800449c:	4b02      	ldr	r3, [pc, #8]	; (80044a8 <BiasMenuExitHandler+0x14>)
 800449e:	2200      	movs	r2, #0
 80044a0:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 80044a2:	2301      	movs	r3, #1
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	200020d2 	.word	0x200020d2

080044ac <EM_ProcessEvent>:
 *	@param None
 *	@retval None
 *
 */
void EM_ProcessEvent()
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	af00      	add	r7, sp, #0

	switch(eNextState)
 80044b0:	4b2b      	ldr	r3, [pc, #172]	; (8004560 <EM_ProcessEvent+0xb4>)
 80044b2:	781b      	ldrb	r3, [r3, #0]
 80044b4:	2b0f      	cmp	r3, #15
 80044b6:	d850      	bhi.n	800455a <EM_ProcessEvent+0xae>
 80044b8:	a201      	add	r2, pc, #4	; (adr r2, 80044c0 <EM_ProcessEvent+0x14>)
 80044ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044be:	bf00      	nop
 80044c0:	08004501 	.word	0x08004501
 80044c4:	08004507 	.word	0x08004507
 80044c8:	0800450d 	.word	0x0800450d
 80044cc:	08004513 	.word	0x08004513
 80044d0:	08004519 	.word	0x08004519
 80044d4:	0800451f 	.word	0x0800451f
 80044d8:	08004525 	.word	0x08004525
 80044dc:	0800452b 	.word	0x0800452b
 80044e0:	08004531 	.word	0x08004531
 80044e4:	0800455b 	.word	0x0800455b
 80044e8:	08004537 	.word	0x08004537
 80044ec:	0800453d 	.word	0x0800453d
 80044f0:	08004543 	.word	0x08004543
 80044f4:	0800454f 	.word	0x0800454f
 80044f8:	08004549 	.word	0x08004549
 80044fc:	08004555 	.word	0x08004555
	{

// MAIN MENU
		case Idle_State:

			_ProcessIdleStateEvents();
 8004500:	f000 f830 	bl	8004564 <_ProcessIdleStateEvents>
			break;
 8004504:	e02a      	b.n	800455c <EM_ProcessEvent+0xb0>

		case Toplevel_Output_Menu_State:

			_ProcessTopLevelOutputMenuStateEvents();
 8004506:	f000 f849 	bl	800459c <_ProcessTopLevelOutputMenuStateEvents>
			break;
 800450a:	e027      	b.n	800455c <EM_ProcessEvent+0xb0>

		case Toplevel_Input_Menu_State:

			_ProcessTopLevelInputMenuStateEvents();
 800450c:	f000 f880 	bl	8004610 <_ProcessTopLevelInputMenuStateEvents>
			break;
 8004510:	e024      	b.n	800455c <EM_ProcessEvent+0xb0>

// FUNC MENUS

		case Func_Main_Menu_State:

			_ProcessFuncMainMenuStateEvents();
 8004512:	f000 f8a9 	bl	8004668 <_ProcessFuncMainMenuStateEvents>
			break;
 8004516:	e021      	b.n	800455c <EM_ProcessEvent+0xb0>

		case Func_Signal_Menu_State:

			_ProcessFuncSignalMenuStateEvents();
 8004518:	f000 f8cc 	bl	80046b4 <_ProcessFuncSignalMenuStateEvents>
			break;
 800451c:	e01e      	b.n	800455c <EM_ProcessEvent+0xb0>

		case Func_Aux_Menu_State:

			_ProcessFuncAuxMenuStateEvents();
 800451e:	f000 f8e5 	bl	80046ec <_ProcessFuncAuxMenuStateEvents>
			break;
 8004522:	e01b      	b.n	800455c <EM_ProcessEvent+0xb0>

// GAIN MENUS

		case Gain_Main_Menu_State:

			_ProcessGainMainMenuStateEvents();
 8004524:	f000 f908 	bl	8004738 <_ProcessGainMainMenuStateEvents>
			break;
 8004528:	e018      	b.n	800455c <EM_ProcessEvent+0xb0>

		case Gain_Signal_Menu_State:

			_ProcessGainSignalMenuStateEvents();
 800452a:	f000 f939 	bl	80047a0 <_ProcessGainSignalMenuStateEvents>
			break;
 800452e:	e015      	b.n	800455c <EM_ProcessEvent+0xb0>

		case Gain_Aux_Menu_State:

			_ProcessGainAuxMenuStateEvents();
 8004530:	f000 f980 	bl	8004834 <_ProcessGainAuxMenuStateEvents>
			break;
 8004534:	e012      	b.n	800455c <EM_ProcessEvent+0xb0>

// FREQ MENUS

		case Freq_Main_Menu_State:

			_ProcessFreqMainMenuStateEvents();
 8004536:	f000 f999 	bl	800486c <_ProcessFreqMainMenuStateEvents>
			break;
 800453a:	e00f      	b.n	800455c <EM_ProcessEvent+0xb0>

		case Freq_Preset_Menu_State:

			_ProcessFreqPresetMenuStateEvents();
 800453c:	f000 f9d0 	bl	80048e0 <_ProcessFreqPresetMenuStateEvents>
			break;
 8004540:	e00c      	b.n	800455c <EM_ProcessEvent+0xb0>

		case Freq_Adjust_Menu_State:

			_ProcessFreqAdjustMenuState();
 8004542:	f000 f9e9 	bl	8004918 <_ProcessFreqAdjustMenuState>
			break;
 8004546:	e009      	b.n	800455c <EM_ProcessEvent+0xb0>

		case Freq_Prescaler_Menu_State:

			_ProcessFreqPrescalerMenuStateEvents();
 8004548:	f000 fa02 	bl	8004950 <_ProcessFreqPrescalerMenuStateEvents>
			break;
 800454c:	e006      	b.n	800455c <EM_ProcessEvent+0xb0>


		case Freq_Sweep_Menu_State:

			_ProcessFreqSweepMenuStateEvents();
 800454e:	f000 fa1b 	bl	8004988 <_ProcessFreqSweepMenuStateEvents>
			break;
 8004552:	e003      	b.n	800455c <EM_ProcessEvent+0xb0>

// BIAS MENUS

		case Bias_Menu_State:

			_ProcessBiasMainMenuEvents();
 8004554:	f000 fa62 	bl	8004a1c <_ProcessBiasMainMenuEvents>
			break;
 8004558:	e000      	b.n	800455c <EM_ProcessEvent+0xb0>

		default:
			break;
 800455a:	bf00      	nop
	}

}
 800455c:	bf00      	nop
 800455e:	bd80      	pop	{r7, pc}
 8004560:	200020d1 	.word	0x200020d1

08004564 <_ProcessIdleStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessIdleStateEvents()
{
 8004564:	b580      	push	{r7, lr}
 8004566:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
	  printf("Idle_State\n");
	#endif

	if(eNewEvent == evBlueBtn)
 8004568:	4b0a      	ldr	r3, [pc, #40]	; (8004594 <_ProcessIdleStateEvents+0x30>)
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	2b01      	cmp	r3, #1
 800456e:	d105      	bne.n	800457c <_ProcessIdleStateEvents+0x18>
	{
		eNextState = ToplevelOutputMenuEntryHandler();
 8004570:	f000 fe64 	bl	800523c <ToplevelOutputMenuEntryHandler>
 8004574:	4603      	mov	r3, r0
 8004576:	461a      	mov	r2, r3
 8004578:	4b07      	ldr	r3, [pc, #28]	; (8004598 <_ProcessIdleStateEvents+0x34>)
 800457a:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evGreenBtn)
 800457c:	4b05      	ldr	r3, [pc, #20]	; (8004594 <_ProcessIdleStateEvents+0x30>)
 800457e:	781b      	ldrb	r3, [r3, #0]
 8004580:	2b02      	cmp	r3, #2
 8004582:	d105      	bne.n	8004590 <_ProcessIdleStateEvents+0x2c>
	{
		eNextState = ToplevelInputMenuEntryHandler();
 8004584:	f000 fe72 	bl	800526c <ToplevelInputMenuEntryHandler>
 8004588:	4603      	mov	r3, r0
 800458a:	461a      	mov	r2, r3
 800458c:	4b02      	ldr	r3, [pc, #8]	; (8004598 <_ProcessIdleStateEvents+0x34>)
 800458e:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evRedBtn)
	{
		// no menu action
	}
}
 8004590:	bf00      	nop
 8004592:	bd80      	pop	{r7, pc}
 8004594:	200020d2 	.word	0x200020d2
 8004598:	200020d1 	.word	0x200020d1

0800459c <_ProcessTopLevelOutputMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessTopLevelOutputMenuStateEvents()
{
 800459c:	b580      	push	{r7, lr}
 800459e:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
	  printf("Toplevel_Output_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderPush)
 80045a0:	4b19      	ldr	r3, [pc, #100]	; (8004608 <_ProcessTopLevelOutputMenuStateEvents+0x6c>)
 80045a2:	781b      	ldrb	r3, [r3, #0]
 80045a4:	2b06      	cmp	r3, #6
 80045a6:	d105      	bne.n	80045b4 <_ProcessTopLevelOutputMenuStateEvents+0x18>
	{
		eNextState = ToplevelOutputMenuExitHandler();
 80045a8:	f000 fe54 	bl	8005254 <ToplevelOutputMenuExitHandler>
 80045ac:	4603      	mov	r3, r0
 80045ae:	461a      	mov	r2, r3
 80045b0:	4b16      	ldr	r3, [pc, #88]	; (800460c <_ProcessTopLevelOutputMenuStateEvents+0x70>)
 80045b2:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evBlueBtn)
 80045b4:	4b14      	ldr	r3, [pc, #80]	; (8004608 <_ProcessTopLevelOutputMenuStateEvents+0x6c>)
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d105      	bne.n	80045c8 <_ProcessTopLevelOutputMenuStateEvents+0x2c>
	{
		//ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
		eNextState = FuncMainMenuEntryHandler();
 80045bc:	f000 fc8c 	bl	8004ed8 <FuncMainMenuEntryHandler>
 80045c0:	4603      	mov	r3, r0
 80045c2:	461a      	mov	r2, r3
 80045c4:	4b11      	ldr	r3, [pc, #68]	; (800460c <_ProcessTopLevelOutputMenuStateEvents+0x70>)
 80045c6:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evGreenBtn)
 80045c8:	4b0f      	ldr	r3, [pc, #60]	; (8004608 <_ProcessTopLevelOutputMenuStateEvents+0x6c>)
 80045ca:	781b      	ldrb	r3, [r3, #0]
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	d105      	bne.n	80045dc <_ProcessTopLevelOutputMenuStateEvents+0x40>
	{
		//ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
		eNextState = FreqMainMenuEntryHandler();
 80045d0:	f000 fbc0 	bl	8004d54 <FreqMainMenuEntryHandler>
 80045d4:	4603      	mov	r3, r0
 80045d6:	461a      	mov	r2, r3
 80045d8:	4b0c      	ldr	r3, [pc, #48]	; (800460c <_ProcessTopLevelOutputMenuStateEvents+0x70>)
 80045da:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evYellowBtn)
 80045dc:	4b0a      	ldr	r3, [pc, #40]	; (8004608 <_ProcessTopLevelOutputMenuStateEvents+0x6c>)
 80045de:	781b      	ldrb	r3, [r3, #0]
 80045e0:	2b03      	cmp	r3, #3
 80045e2:	d105      	bne.n	80045f0 <_ProcessTopLevelOutputMenuStateEvents+0x54>
	{
		//ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
		eNextState = GainMainMenuEntryHandler();
 80045e4:	f000 fd3c 	bl	8005060 <GainMainMenuEntryHandler>
 80045e8:	4603      	mov	r3, r0
 80045ea:	461a      	mov	r2, r3
 80045ec:	4b07      	ldr	r3, [pc, #28]	; (800460c <_ProcessTopLevelOutputMenuStateEvents+0x70>)
 80045ee:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evRedBtn)
 80045f0:	4b05      	ldr	r3, [pc, #20]	; (8004608 <_ProcessTopLevelOutputMenuStateEvents+0x6c>)
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	2b04      	cmp	r3, #4
 80045f6:	d105      	bne.n	8004604 <_ProcessTopLevelOutputMenuStateEvents+0x68>
	{
		//ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
		eNextState = BiasMenuEntryHandler();
 80045f8:	f7ff fef0 	bl	80043dc <BiasMenuEntryHandler>
 80045fc:	4603      	mov	r3, r0
 80045fe:	461a      	mov	r2, r3
 8004600:	4b02      	ldr	r3, [pc, #8]	; (800460c <_ProcessTopLevelOutputMenuStateEvents+0x70>)
 8004602:	701a      	strb	r2, [r3, #0]
	}
}
 8004604:	bf00      	nop
 8004606:	bd80      	pop	{r7, pc}
 8004608:	200020d2 	.word	0x200020d2
 800460c:	200020d1 	.word	0x200020d1

08004610 <_ProcessTopLevelInputMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessTopLevelInputMenuStateEvents()
{
 8004610:	b580      	push	{r7, lr}
 8004612:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
	  printf("Toplevel_Input_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderPush)
 8004614:	4b12      	ldr	r3, [pc, #72]	; (8004660 <_ProcessTopLevelInputMenuStateEvents+0x50>)
 8004616:	781b      	ldrb	r3, [r3, #0]
 8004618:	2b06      	cmp	r3, #6
 800461a:	d105      	bne.n	8004628 <_ProcessTopLevelInputMenuStateEvents+0x18>
	{
		eNextState = ToplevelInputMenuExitHandler();
 800461c:	f000 fe54 	bl	80052c8 <ToplevelInputMenuExitHandler>
 8004620:	4603      	mov	r3, r0
 8004622:	461a      	mov	r2, r3
 8004624:	4b0f      	ldr	r3, [pc, #60]	; (8004664 <_ProcessTopLevelInputMenuStateEvents+0x54>)
 8004626:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evBlueBtn)
 8004628:	4b0d      	ldr	r3, [pc, #52]	; (8004660 <_ProcessTopLevelInputMenuStateEvents+0x50>)
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	2b01      	cmp	r3, #1
 800462e:	d108      	bne.n	8004642 <_ProcessTopLevelInputMenuStateEvents+0x32>
	{
		eNextState = ToplevelInputMenuInputHandler(eNewEvent);
 8004630:	4b0b      	ldr	r3, [pc, #44]	; (8004660 <_ProcessTopLevelInputMenuStateEvents+0x50>)
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	4618      	mov	r0, r3
 8004636:	f000 fe25 	bl	8005284 <ToplevelInputMenuInputHandler>
 800463a:	4603      	mov	r3, r0
 800463c:	461a      	mov	r2, r3
 800463e:	4b09      	ldr	r3, [pc, #36]	; (8004664 <_ProcessTopLevelInputMenuStateEvents+0x54>)
 8004640:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evGreenBtn)
 8004642:	4b07      	ldr	r3, [pc, #28]	; (8004660 <_ProcessTopLevelInputMenuStateEvents+0x50>)
 8004644:	781b      	ldrb	r3, [r3, #0]
 8004646:	2b02      	cmp	r3, #2
 8004648:	d108      	bne.n	800465c <_ProcessTopLevelInputMenuStateEvents+0x4c>
	{

		eNextState = ToplevelInputMenuInputHandler(eNewEvent);
 800464a:	4b05      	ldr	r3, [pc, #20]	; (8004660 <_ProcessTopLevelInputMenuStateEvents+0x50>)
 800464c:	781b      	ldrb	r3, [r3, #0]
 800464e:	4618      	mov	r0, r3
 8004650:	f000 fe18 	bl	8005284 <ToplevelInputMenuInputHandler>
 8004654:	4603      	mov	r3, r0
 8004656:	461a      	mov	r2, r3
 8004658:	4b02      	ldr	r3, [pc, #8]	; (8004664 <_ProcessTopLevelInputMenuStateEvents+0x54>)
 800465a:	701a      	strb	r2, [r3, #0]
	}
}
 800465c:	bf00      	nop
 800465e:	bd80      	pop	{r7, pc}
 8004660:	200020d2 	.word	0x200020d2
 8004664:	200020d1 	.word	0x200020d1

08004668 <_ProcessFuncMainMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessFuncMainMenuStateEvents()
{
 8004668:	b580      	push	{r7, lr}
 800466a:	af00      	add	r7, sp, #0

	if(eNewEvent == evEncoderSet)
	{
		// No menu action
	}
	if(eNewEvent == evEncoderPush)
 800466c:	4b0f      	ldr	r3, [pc, #60]	; (80046ac <_ProcessFuncMainMenuStateEvents+0x44>)
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	2b06      	cmp	r3, #6
 8004672:	d105      	bne.n	8004680 <_ProcessFuncMainMenuStateEvents+0x18>
	{
		eNextState = FuncMainMenuExitHandler();
 8004674:	f000 fc3c 	bl	8004ef0 <FuncMainMenuExitHandler>
 8004678:	4603      	mov	r3, r0
 800467a:	461a      	mov	r2, r3
 800467c:	4b0c      	ldr	r3, [pc, #48]	; (80046b0 <_ProcessFuncMainMenuStateEvents+0x48>)
 800467e:	701a      	strb	r2, [r3, #0]

	}
	if(eNewEvent == evBlueBtn)
 8004680:	4b0a      	ldr	r3, [pc, #40]	; (80046ac <_ProcessFuncMainMenuStateEvents+0x44>)
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	2b01      	cmp	r3, #1
 8004686:	d105      	bne.n	8004694 <_ProcessFuncMainMenuStateEvents+0x2c>
	{
		eNextState = FuncSignalMenuEntryHandler();
 8004688:	f000 fc3e 	bl	8004f08 <FuncSignalMenuEntryHandler>
 800468c:	4603      	mov	r3, r0
 800468e:	461a      	mov	r2, r3
 8004690:	4b07      	ldr	r3, [pc, #28]	; (80046b0 <_ProcessFuncMainMenuStateEvents+0x48>)
 8004692:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evGreenBtn)
 8004694:	4b05      	ldr	r3, [pc, #20]	; (80046ac <_ProcessFuncMainMenuStateEvents+0x44>)
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	2b02      	cmp	r3, #2
 800469a:	d105      	bne.n	80046a8 <_ProcessFuncMainMenuStateEvents+0x40>
	{
		eNextState = FuncAuxMenuEntryHandler();
 800469c:	f000 fc6c 	bl	8004f78 <FuncAuxMenuEntryHandler>
 80046a0:	4603      	mov	r3, r0
 80046a2:	461a      	mov	r2, r3
 80046a4:	4b02      	ldr	r3, [pc, #8]	; (80046b0 <_ProcessFuncMainMenuStateEvents+0x48>)
 80046a6:	701a      	strb	r2, [r3, #0]
	}
}
 80046a8:	bf00      	nop
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	200020d2 	.word	0x200020d2
 80046b0:	200020d1 	.word	0x200020d1

080046b4 <_ProcessFuncSignalMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessFuncSignalMenuStateEvents()
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Func_Signal_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderSet)
 80046b8:	4b0a      	ldr	r3, [pc, #40]	; (80046e4 <_ProcessFuncSignalMenuStateEvents+0x30>)
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	2b05      	cmp	r3, #5
 80046be:	d105      	bne.n	80046cc <_ProcessFuncSignalMenuStateEvents+0x18>
	{
		eNextState = FuncSignalMenuInputHandler();
 80046c0:	f000 fc3a 	bl	8004f38 <FuncSignalMenuInputHandler>
 80046c4:	4603      	mov	r3, r0
 80046c6:	461a      	mov	r2, r3
 80046c8:	4b07      	ldr	r3, [pc, #28]	; (80046e8 <_ProcessFuncSignalMenuStateEvents+0x34>)
 80046ca:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderPush)
 80046cc:	4b05      	ldr	r3, [pc, #20]	; (80046e4 <_ProcessFuncSignalMenuStateEvents+0x30>)
 80046ce:	781b      	ldrb	r3, [r3, #0]
 80046d0:	2b06      	cmp	r3, #6
 80046d2:	d105      	bne.n	80046e0 <_ProcessFuncSignalMenuStateEvents+0x2c>
	{
		eNextState = FuncSignalMenuExitHandler();
 80046d4:	f000 fc42 	bl	8004f5c <FuncSignalMenuExitHandler>
 80046d8:	4603      	mov	r3, r0
 80046da:	461a      	mov	r2, r3
 80046dc:	4b02      	ldr	r3, [pc, #8]	; (80046e8 <_ProcessFuncSignalMenuStateEvents+0x34>)
 80046de:	701a      	strb	r2, [r3, #0]
	}
}
 80046e0:	bf00      	nop
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	200020d2 	.word	0x200020d2
 80046e8:	200020d1 	.word	0x200020d1

080046ec <_ProcessFuncAuxMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessFuncAuxMenuStateEvents()
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Func_Aux_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderSet)
 80046f0:	4b0f      	ldr	r3, [pc, #60]	; (8004730 <_ProcessFuncAuxMenuStateEvents+0x44>)
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	2b05      	cmp	r3, #5
 80046f6:	d105      	bne.n	8004704 <_ProcessFuncAuxMenuStateEvents+0x18>
	{
		eNextState = FuncAuxMenuInputHandler();
 80046f8:	f000 fc56 	bl	8004fa8 <FuncAuxMenuInputHandler>
 80046fc:	4603      	mov	r3, r0
 80046fe:	461a      	mov	r2, r3
 8004700:	4b0c      	ldr	r3, [pc, #48]	; (8004734 <_ProcessFuncAuxMenuStateEvents+0x48>)
 8004702:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderPush)
 8004704:	4b0a      	ldr	r3, [pc, #40]	; (8004730 <_ProcessFuncAuxMenuStateEvents+0x44>)
 8004706:	781b      	ldrb	r3, [r3, #0]
 8004708:	2b06      	cmp	r3, #6
 800470a:	d105      	bne.n	8004718 <_ProcessFuncAuxMenuStateEvents+0x2c>
	{
		eNextState = FuncAuxMenuExitHandler();
 800470c:	f000 fc9a 	bl	8005044 <FuncAuxMenuExitHandler>
 8004710:	4603      	mov	r3, r0
 8004712:	461a      	mov	r2, r3
 8004714:	4b07      	ldr	r3, [pc, #28]	; (8004734 <_ProcessFuncAuxMenuStateEvents+0x48>)
 8004716:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evYellowBtn)
 8004718:	4b05      	ldr	r3, [pc, #20]	; (8004730 <_ProcessFuncAuxMenuStateEvents+0x44>)
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	2b03      	cmp	r3, #3
 800471e:	d105      	bne.n	800472c <_ProcessFuncAuxMenuStateEvents+0x40>
	{
		eNextState = FuncAuxToggleDutyMode();
 8004720:	f000 fc7e 	bl	8005020 <FuncAuxToggleDutyMode>
 8004724:	4603      	mov	r3, r0
 8004726:	461a      	mov	r2, r3
 8004728:	4b02      	ldr	r3, [pc, #8]	; (8004734 <_ProcessFuncAuxMenuStateEvents+0x48>)
 800472a:	701a      	strb	r2, [r3, #0]
	}

}
 800472c:	bf00      	nop
 800472e:	bd80      	pop	{r7, pc}
 8004730:	200020d2 	.word	0x200020d2
 8004734:	200020d1 	.word	0x200020d1

08004738 <_ProcessGainMainMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessGainMainMenuStateEvents()
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b082      	sub	sp, #8
 800473c:	af00      	add	r7, sp, #0
	#endif
	if(eNewEvent == evEncoderSet)
	{
		// No menu action
	}
	if(eNewEvent == evEncoderPush)
 800473e:	4b16      	ldr	r3, [pc, #88]	; (8004798 <_ProcessGainMainMenuStateEvents+0x60>)
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	2b06      	cmp	r3, #6
 8004744:	d105      	bne.n	8004752 <_ProcessGainMainMenuStateEvents+0x1a>
	{
		eNextState = GainMainMenuExitHandler();
 8004746:	f000 fc97 	bl	8005078 <GainMainMenuExitHandler>
 800474a:	4603      	mov	r3, r0
 800474c:	461a      	mov	r2, r3
 800474e:	4b13      	ldr	r3, [pc, #76]	; (800479c <_ProcessGainMainMenuStateEvents+0x64>)
 8004750:	701a      	strb	r2, [r3, #0]
		//ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
	}
	if(eNewEvent == evBlueBtn)
 8004752:	4b11      	ldr	r3, [pc, #68]	; (8004798 <_ProcessGainMainMenuStateEvents+0x60>)
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	2b01      	cmp	r3, #1
 8004758:	d105      	bne.n	8004766 <_ProcessGainMainMenuStateEvents+0x2e>
	{
		eNextState = GainSignalMenuEntryHandler();
 800475a:	f000 fc99 	bl	8005090 <GainSignalMenuEntryHandler>
 800475e:	4603      	mov	r3, r0
 8004760:	461a      	mov	r2, r3
 8004762:	4b0e      	ldr	r3, [pc, #56]	; (800479c <_ProcessGainMainMenuStateEvents+0x64>)
 8004764:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evGreenBtn)
 8004766:	4b0c      	ldr	r3, [pc, #48]	; (8004798 <_ProcessGainMainMenuStateEvents+0x60>)
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	2b02      	cmp	r3, #2
 800476c:	d110      	bne.n	8004790 <_ProcessGainMainMenuStateEvents+0x58>
	{
		eOutput_mode aux_output_func = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 800476e:	2001      	movs	r0, #1
 8004770:	f002 f91c 	bl	80069ac <SM_GetOutputChannel>
 8004774:	4603      	mov	r3, r0
 8004776:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 800477a:	781b      	ldrb	r3, [r3, #0]
 800477c:	71fb      	strb	r3, [r7, #7]
		if(aux_output_func != PWM_FUNC_MODE)
 800477e:	79fb      	ldrb	r3, [r7, #7]
 8004780:	2b06      	cmp	r3, #6
 8004782:	d005      	beq.n	8004790 <_ProcessGainMainMenuStateEvents+0x58>
			eNextState = GainAuxMenuEntryHandler();
 8004784:	f000 fd10 	bl	80051a8 <GainAuxMenuEntryHandler>
 8004788:	4603      	mov	r3, r0
 800478a:	461a      	mov	r2, r3
 800478c:	4b03      	ldr	r3, [pc, #12]	; (800479c <_ProcessGainMainMenuStateEvents+0x64>)
 800478e:	701a      	strb	r2, [r3, #0]
	}
}
 8004790:	bf00      	nop
 8004792:	3708      	adds	r7, #8
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}
 8004798:	200020d2 	.word	0x200020d2
 800479c:	200020d1 	.word	0x200020d1

080047a0 <_ProcessGainSignalMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessGainSignalMenuStateEvents()
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Gain_Signal_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderSet)
 80047a4:	4b21      	ldr	r3, [pc, #132]	; (800482c <_ProcessGainSignalMenuStateEvents+0x8c>)
 80047a6:	781b      	ldrb	r3, [r3, #0]
 80047a8:	2b05      	cmp	r3, #5
 80047aa:	d106      	bne.n	80047ba <_ProcessGainSignalMenuStateEvents+0x1a>
	{
		eNextState = GainSignalMenuInputHandler(evEncoderSet);
 80047ac:	2005      	movs	r0, #5
 80047ae:	f000 fc9d 	bl	80050ec <GainSignalMenuInputHandler>
 80047b2:	4603      	mov	r3, r0
 80047b4:	461a      	mov	r2, r3
 80047b6:	4b1e      	ldr	r3, [pc, #120]	; (8004830 <_ProcessGainSignalMenuStateEvents+0x90>)
 80047b8:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderPush)
 80047ba:	4b1c      	ldr	r3, [pc, #112]	; (800482c <_ProcessGainSignalMenuStateEvents+0x8c>)
 80047bc:	781b      	ldrb	r3, [r3, #0]
 80047be:	2b06      	cmp	r3, #6
 80047c0:	d105      	bne.n	80047ce <_ProcessGainSignalMenuStateEvents+0x2e>
	{
		eNextState = GainSignalMenuExitHandler();
 80047c2:	f000 fce5 	bl	8005190 <GainSignalMenuExitHandler>
 80047c6:	4603      	mov	r3, r0
 80047c8:	461a      	mov	r2, r3
 80047ca:	4b19      	ldr	r3, [pc, #100]	; (8004830 <_ProcessGainSignalMenuStateEvents+0x90>)
 80047cc:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evBlueBtn)
 80047ce:	4b17      	ldr	r3, [pc, #92]	; (800482c <_ProcessGainSignalMenuStateEvents+0x8c>)
 80047d0:	781b      	ldrb	r3, [r3, #0]
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d106      	bne.n	80047e4 <_ProcessGainSignalMenuStateEvents+0x44>
	{
		eNextState = GainSignalMenuInputHandler(evBlueBtn);
 80047d6:	2001      	movs	r0, #1
 80047d8:	f000 fc88 	bl	80050ec <GainSignalMenuInputHandler>
 80047dc:	4603      	mov	r3, r0
 80047de:	461a      	mov	r2, r3
 80047e0:	4b13      	ldr	r3, [pc, #76]	; (8004830 <_ProcessGainSignalMenuStateEvents+0x90>)
 80047e2:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evGreenBtn)
 80047e4:	4b11      	ldr	r3, [pc, #68]	; (800482c <_ProcessGainSignalMenuStateEvents+0x8c>)
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	2b02      	cmp	r3, #2
 80047ea:	d106      	bne.n	80047fa <_ProcessGainSignalMenuStateEvents+0x5a>
	{
		eNextState = GainSignalMenuInputHandler(evGreenBtn);
 80047ec:	2002      	movs	r0, #2
 80047ee:	f000 fc7d 	bl	80050ec <GainSignalMenuInputHandler>
 80047f2:	4603      	mov	r3, r0
 80047f4:	461a      	mov	r2, r3
 80047f6:	4b0e      	ldr	r3, [pc, #56]	; (8004830 <_ProcessGainSignalMenuStateEvents+0x90>)
 80047f8:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evYellowBtn)
 80047fa:	4b0c      	ldr	r3, [pc, #48]	; (800482c <_ProcessGainSignalMenuStateEvents+0x8c>)
 80047fc:	781b      	ldrb	r3, [r3, #0]
 80047fe:	2b03      	cmp	r3, #3
 8004800:	d106      	bne.n	8004810 <_ProcessGainSignalMenuStateEvents+0x70>
	{
		eNextState = GainSignalMenuInputHandler(evYellowBtn);
 8004802:	2003      	movs	r0, #3
 8004804:	f000 fc72 	bl	80050ec <GainSignalMenuInputHandler>
 8004808:	4603      	mov	r3, r0
 800480a:	461a      	mov	r2, r3
 800480c:	4b08      	ldr	r3, [pc, #32]	; (8004830 <_ProcessGainSignalMenuStateEvents+0x90>)
 800480e:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evRedBtn)
 8004810:	4b06      	ldr	r3, [pc, #24]	; (800482c <_ProcessGainSignalMenuStateEvents+0x8c>)
 8004812:	781b      	ldrb	r3, [r3, #0]
 8004814:	2b04      	cmp	r3, #4
 8004816:	d106      	bne.n	8004826 <_ProcessGainSignalMenuStateEvents+0x86>
	{
		eNextState = GainSignalMenuInputHandler(evRedBtn);
 8004818:	2004      	movs	r0, #4
 800481a:	f000 fc67 	bl	80050ec <GainSignalMenuInputHandler>
 800481e:	4603      	mov	r3, r0
 8004820:	461a      	mov	r2, r3
 8004822:	4b03      	ldr	r3, [pc, #12]	; (8004830 <_ProcessGainSignalMenuStateEvents+0x90>)
 8004824:	701a      	strb	r2, [r3, #0]
	}

}
 8004826:	bf00      	nop
 8004828:	bd80      	pop	{r7, pc}
 800482a:	bf00      	nop
 800482c:	200020d2 	.word	0x200020d2
 8004830:	200020d1 	.word	0x200020d1

08004834 <_ProcessGainAuxMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessGainAuxMenuStateEvents()
{
 8004834:	b580      	push	{r7, lr}
 8004836:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Gain_Aux_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderSet)
 8004838:	4b0a      	ldr	r3, [pc, #40]	; (8004864 <_ProcessGainAuxMenuStateEvents+0x30>)
 800483a:	781b      	ldrb	r3, [r3, #0]
 800483c:	2b05      	cmp	r3, #5
 800483e:	d105      	bne.n	800484c <_ProcessGainAuxMenuStateEvents+0x18>
	{
		eNextState = GainAuxMenuInputHandler();
 8004840:	f000 fcde 	bl	8005200 <GainAuxMenuInputHandler>
 8004844:	4603      	mov	r3, r0
 8004846:	461a      	mov	r2, r3
 8004848:	4b07      	ldr	r3, [pc, #28]	; (8004868 <_ProcessGainAuxMenuStateEvents+0x34>)
 800484a:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderPush)
 800484c:	4b05      	ldr	r3, [pc, #20]	; (8004864 <_ProcessGainAuxMenuStateEvents+0x30>)
 800484e:	781b      	ldrb	r3, [r3, #0]
 8004850:	2b06      	cmp	r3, #6
 8004852:	d105      	bne.n	8004860 <_ProcessGainAuxMenuStateEvents+0x2c>
	{
		eNextState = GainAuxMenuExitHandler();
 8004854:	f000 fce6 	bl	8005224 <GainAuxMenuExitHandler>
 8004858:	4603      	mov	r3, r0
 800485a:	461a      	mov	r2, r3
 800485c:	4b02      	ldr	r3, [pc, #8]	; (8004868 <_ProcessGainAuxMenuStateEvents+0x34>)
 800485e:	701a      	strb	r2, [r3, #0]
	}
}
 8004860:	bf00      	nop
 8004862:	bd80      	pop	{r7, pc}
 8004864:	200020d2 	.word	0x200020d2
 8004868:	200020d1 	.word	0x200020d1

0800486c <_ProcessFreqMainMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessFreqMainMenuStateEvents()
{
 800486c:	b580      	push	{r7, lr}
 800486e:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Freq_Main_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderPush)
 8004870:	4b19      	ldr	r3, [pc, #100]	; (80048d8 <_ProcessFreqMainMenuStateEvents+0x6c>)
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	2b06      	cmp	r3, #6
 8004876:	d105      	bne.n	8004884 <_ProcessFreqMainMenuStateEvents+0x18>
	{
		eNextState = FreqMainMenuExitHandler();
 8004878:	f000 fa78 	bl	8004d6c <FreqMainMenuExitHandler>
 800487c:	4603      	mov	r3, r0
 800487e:	461a      	mov	r2, r3
 8004880:	4b16      	ldr	r3, [pc, #88]	; (80048dc <_ProcessFreqMainMenuStateEvents+0x70>)
 8004882:	701a      	strb	r2, [r3, #0]
		//ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
	}
	if(eNewEvent == evBlueBtn)
 8004884:	4b14      	ldr	r3, [pc, #80]	; (80048d8 <_ProcessFreqMainMenuStateEvents+0x6c>)
 8004886:	781b      	ldrb	r3, [r3, #0]
 8004888:	2b01      	cmp	r3, #1
 800488a:	d105      	bne.n	8004898 <_ProcessFreqMainMenuStateEvents+0x2c>
	{
		eNextState = FreqPresetMenuEntryHandler();
 800488c:	f000 fa80 	bl	8004d90 <FreqPresetMenuEntryHandler>
 8004890:	4603      	mov	r3, r0
 8004892:	461a      	mov	r2, r3
 8004894:	4b11      	ldr	r3, [pc, #68]	; (80048dc <_ProcessFreqMainMenuStateEvents+0x70>)
 8004896:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evGreenBtn)
 8004898:	4b0f      	ldr	r3, [pc, #60]	; (80048d8 <_ProcessFreqMainMenuStateEvents+0x6c>)
 800489a:	781b      	ldrb	r3, [r3, #0]
 800489c:	2b02      	cmp	r3, #2
 800489e:	d105      	bne.n	80048ac <_ProcessFreqMainMenuStateEvents+0x40>
	{
		eNextState = FreqAdjustMenuEntryHandler();
 80048a0:	f000 fabc 	bl	8004e1c <FreqAdjustMenuEntryHandler>
 80048a4:	4603      	mov	r3, r0
 80048a6:	461a      	mov	r2, r3
 80048a8:	4b0c      	ldr	r3, [pc, #48]	; (80048dc <_ProcessFreqMainMenuStateEvents+0x70>)
 80048aa:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evYellowBtn)
 80048ac:	4b0a      	ldr	r3, [pc, #40]	; (80048d8 <_ProcessFreqMainMenuStateEvents+0x6c>)
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	2b03      	cmp	r3, #3
 80048b2:	d105      	bne.n	80048c0 <_ProcessFreqMainMenuStateEvents+0x54>
	{
		eNextState = FreqSweepMenuEntryHandler();
 80048b4:	f000 f90c 	bl	8004ad0 <FreqSweepMenuEntryHandler>
 80048b8:	4603      	mov	r3, r0
 80048ba:	461a      	mov	r2, r3
 80048bc:	4b07      	ldr	r3, [pc, #28]	; (80048dc <_ProcessFreqMainMenuStateEvents+0x70>)
 80048be:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evRedBtn)
 80048c0:	4b05      	ldr	r3, [pc, #20]	; (80048d8 <_ProcessFreqMainMenuStateEvents+0x6c>)
 80048c2:	781b      	ldrb	r3, [r3, #0]
 80048c4:	2b04      	cmp	r3, #4
 80048c6:	d105      	bne.n	80048d4 <_ProcessFreqMainMenuStateEvents+0x68>
	{
		eNextState = FreqPrescalerMenuEntryHandler();
 80048c8:	f000 fad8 	bl	8004e7c <FreqPrescalerMenuEntryHandler>
 80048cc:	4603      	mov	r3, r0
 80048ce:	461a      	mov	r2, r3
 80048d0:	4b02      	ldr	r3, [pc, #8]	; (80048dc <_ProcessFreqMainMenuStateEvents+0x70>)
 80048d2:	701a      	strb	r2, [r3, #0]
	}
}
 80048d4:	bf00      	nop
 80048d6:	bd80      	pop	{r7, pc}
 80048d8:	200020d2 	.word	0x200020d2
 80048dc:	200020d1 	.word	0x200020d1

080048e0 <_ProcessFreqPresetMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessFreqPresetMenuStateEvents()
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Freq_Preset_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderSet)
 80048e4:	4b0a      	ldr	r3, [pc, #40]	; (8004910 <_ProcessFreqPresetMenuStateEvents+0x30>)
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	2b05      	cmp	r3, #5
 80048ea:	d105      	bne.n	80048f8 <_ProcessFreqPresetMenuStateEvents+0x18>
	{
		eNextState = FreqPresetMenuInputHandler();
 80048ec:	f000 fa78 	bl	8004de0 <FreqPresetMenuInputHandler>
 80048f0:	4603      	mov	r3, r0
 80048f2:	461a      	mov	r2, r3
 80048f4:	4b07      	ldr	r3, [pc, #28]	; (8004914 <_ProcessFreqPresetMenuStateEvents+0x34>)
 80048f6:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderPush)
 80048f8:	4b05      	ldr	r3, [pc, #20]	; (8004910 <_ProcessFreqPresetMenuStateEvents+0x30>)
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	2b06      	cmp	r3, #6
 80048fe:	d105      	bne.n	800490c <_ProcessFreqPresetMenuStateEvents+0x2c>
	{
		eNextState = FreqPresetMenuExitHandler();
 8004900:	f000 fa80 	bl	8004e04 <FreqPresetMenuExitHandler>
 8004904:	4603      	mov	r3, r0
 8004906:	461a      	mov	r2, r3
 8004908:	4b02      	ldr	r3, [pc, #8]	; (8004914 <_ProcessFreqPresetMenuStateEvents+0x34>)
 800490a:	701a      	strb	r2, [r3, #0]
	}
}
 800490c:	bf00      	nop
 800490e:	bd80      	pop	{r7, pc}
 8004910:	200020d2 	.word	0x200020d2
 8004914:	200020d1 	.word	0x200020d1

08004918 <_ProcessFreqAdjustMenuState>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessFreqAdjustMenuState()
{
 8004918:	b580      	push	{r7, lr}
 800491a:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Freq_Adjust_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderSet)
 800491c:	4b0a      	ldr	r3, [pc, #40]	; (8004948 <_ProcessFreqAdjustMenuState+0x30>)
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	2b05      	cmp	r3, #5
 8004922:	d105      	bne.n	8004930 <_ProcessFreqAdjustMenuState+0x18>
	{
		eNextState = FreqAdjustMenuInputHandler();
 8004924:	f000 fa92 	bl	8004e4c <FreqAdjustMenuInputHandler>
 8004928:	4603      	mov	r3, r0
 800492a:	461a      	mov	r2, r3
 800492c:	4b07      	ldr	r3, [pc, #28]	; (800494c <_ProcessFreqAdjustMenuState+0x34>)
 800492e:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderPush)
 8004930:	4b05      	ldr	r3, [pc, #20]	; (8004948 <_ProcessFreqAdjustMenuState+0x30>)
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	2b06      	cmp	r3, #6
 8004936:	d105      	bne.n	8004944 <_ProcessFreqAdjustMenuState+0x2c>
	{
		eNextState = FreqAdjustMenuExitHandler();
 8004938:	f000 fa94 	bl	8004e64 <FreqAdjustMenuExitHandler>
 800493c:	4603      	mov	r3, r0
 800493e:	461a      	mov	r2, r3
 8004940:	4b02      	ldr	r3, [pc, #8]	; (800494c <_ProcessFreqAdjustMenuState+0x34>)
 8004942:	701a      	strb	r2, [r3, #0]
	}
}
 8004944:	bf00      	nop
 8004946:	bd80      	pop	{r7, pc}
 8004948:	200020d2 	.word	0x200020d2
 800494c:	200020d1 	.word	0x200020d1

08004950 <_ProcessFreqPrescalerMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessFreqPrescalerMenuStateEvents()
{
 8004950:	b580      	push	{r7, lr}
 8004952:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Freq_Prescaler_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderSet)
 8004954:	4b0a      	ldr	r3, [pc, #40]	; (8004980 <_ProcessFreqPrescalerMenuStateEvents+0x30>)
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	2b05      	cmp	r3, #5
 800495a:	d105      	bne.n	8004968 <_ProcessFreqPrescalerMenuStateEvents+0x18>
	{
		eNextState = FreqPrescalerMenuInputHandler();
 800495c:	f000 faa4 	bl	8004ea8 <FreqPrescalerMenuInputHandler>
 8004960:	4603      	mov	r3, r0
 8004962:	461a      	mov	r2, r3
 8004964:	4b07      	ldr	r3, [pc, #28]	; (8004984 <_ProcessFreqPrescalerMenuStateEvents+0x34>)
 8004966:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderPush)
 8004968:	4b05      	ldr	r3, [pc, #20]	; (8004980 <_ProcessFreqPrescalerMenuStateEvents+0x30>)
 800496a:	781b      	ldrb	r3, [r3, #0]
 800496c:	2b06      	cmp	r3, #6
 800496e:	d105      	bne.n	800497c <_ProcessFreqPrescalerMenuStateEvents+0x2c>
	{
		eNextState = FreqPrescalerMenuExitHandler();
 8004970:	f000 faa6 	bl	8004ec0 <FreqPrescalerMenuExitHandler>
 8004974:	4603      	mov	r3, r0
 8004976:	461a      	mov	r2, r3
 8004978:	4b02      	ldr	r3, [pc, #8]	; (8004984 <_ProcessFreqPrescalerMenuStateEvents+0x34>)
 800497a:	701a      	strb	r2, [r3, #0]
	}
}
 800497c:	bf00      	nop
 800497e:	bd80      	pop	{r7, pc}
 8004980:	200020d2 	.word	0x200020d2
 8004984:	200020d1 	.word	0x200020d1

08004988 <_ProcessFreqSweepMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessFreqSweepMenuStateEvents()
{
 8004988:	b580      	push	{r7, lr}
 800498a:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Freq_Sweep_Menu_State\n");
	#endif

	if(eNewEvent == evBlueBtn)
 800498c:	4b21      	ldr	r3, [pc, #132]	; (8004a14 <_ProcessFreqSweepMenuStateEvents+0x8c>)
 800498e:	781b      	ldrb	r3, [r3, #0]
 8004990:	2b01      	cmp	r3, #1
 8004992:	d106      	bne.n	80049a2 <_ProcessFreqSweepMenuStateEvents+0x1a>
	{
		// enable
		eNextState = FreqSweepMenuInputHandler(evSweepEnableBtn);
 8004994:	2007      	movs	r0, #7
 8004996:	f000 f8ed 	bl	8004b74 <FreqSweepMenuInputHandler>
 800499a:	4603      	mov	r3, r0
 800499c:	461a      	mov	r2, r3
 800499e:	4b1e      	ldr	r3, [pc, #120]	; (8004a18 <_ProcessFreqSweepMenuStateEvents+0x90>)
 80049a0:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evGreenBtn)
 80049a2:	4b1c      	ldr	r3, [pc, #112]	; (8004a14 <_ProcessFreqSweepMenuStateEvents+0x8c>)
 80049a4:	781b      	ldrb	r3, [r3, #0]
 80049a6:	2b02      	cmp	r3, #2
 80049a8:	d106      	bne.n	80049b8 <_ProcessFreqSweepMenuStateEvents+0x30>
	{
		// direction
		eNextState = FreqSweepMenuInputHandler(evSweepModeBtn);
 80049aa:	2008      	movs	r0, #8
 80049ac:	f000 f8e2 	bl	8004b74 <FreqSweepMenuInputHandler>
 80049b0:	4603      	mov	r3, r0
 80049b2:	461a      	mov	r2, r3
 80049b4:	4b18      	ldr	r3, [pc, #96]	; (8004a18 <_ProcessFreqSweepMenuStateEvents+0x90>)
 80049b6:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evYellowBtn)
 80049b8:	4b16      	ldr	r3, [pc, #88]	; (8004a14 <_ProcessFreqSweepMenuStateEvents+0x8c>)
 80049ba:	781b      	ldrb	r3, [r3, #0]
 80049bc:	2b03      	cmp	r3, #3
 80049be:	d106      	bne.n	80049ce <_ProcessFreqSweepMenuStateEvents+0x46>
	{
		// set sweep speed
		eNextState = FreqSweepMenuInputHandler(evSweepSpeedBtn);
 80049c0:	2009      	movs	r0, #9
 80049c2:	f000 f8d7 	bl	8004b74 <FreqSweepMenuInputHandler>
 80049c6:	4603      	mov	r3, r0
 80049c8:	461a      	mov	r2, r3
 80049ca:	4b13      	ldr	r3, [pc, #76]	; (8004a18 <_ProcessFreqSweepMenuStateEvents+0x90>)
 80049cc:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evRedBtn)
 80049ce:	4b11      	ldr	r3, [pc, #68]	; (8004a14 <_ProcessFreqSweepMenuStateEvents+0x8c>)
 80049d0:	781b      	ldrb	r3, [r3, #0]
 80049d2:	2b04      	cmp	r3, #4
 80049d4:	d106      	bne.n	80049e4 <_ProcessFreqSweepMenuStateEvents+0x5c>
	{
		// set lower/upper sweep limit
		eNextState = FreqSweepMenuInputHandler(evSweepLimitBtn);
 80049d6:	200a      	movs	r0, #10
 80049d8:	f000 f8cc 	bl	8004b74 <FreqSweepMenuInputHandler>
 80049dc:	4603      	mov	r3, r0
 80049de:	461a      	mov	r2, r3
 80049e0:	4b0d      	ldr	r3, [pc, #52]	; (8004a18 <_ProcessFreqSweepMenuStateEvents+0x90>)
 80049e2:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderSet)
 80049e4:	4b0b      	ldr	r3, [pc, #44]	; (8004a14 <_ProcessFreqSweepMenuStateEvents+0x8c>)
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	2b05      	cmp	r3, #5
 80049ea:	d106      	bne.n	80049fa <_ProcessFreqSweepMenuStateEvents+0x72>
	{
		eNextState = FreqSweepMenuInputHandler(evEncoderSweep);
 80049ec:	200b      	movs	r0, #11
 80049ee:	f000 f8c1 	bl	8004b74 <FreqSweepMenuInputHandler>
 80049f2:	4603      	mov	r3, r0
 80049f4:	461a      	mov	r2, r3
 80049f6:	4b08      	ldr	r3, [pc, #32]	; (8004a18 <_ProcessFreqSweepMenuStateEvents+0x90>)
 80049f8:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderPush)
 80049fa:	4b06      	ldr	r3, [pc, #24]	; (8004a14 <_ProcessFreqSweepMenuStateEvents+0x8c>)
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	2b06      	cmp	r3, #6
 8004a00:	d105      	bne.n	8004a0e <_ProcessFreqSweepMenuStateEvents+0x86>
	{
		eNextState = FreqSweepMenuExitHandler();
 8004a02:	f000 f98d 	bl	8004d20 <FreqSweepMenuExitHandler>
 8004a06:	4603      	mov	r3, r0
 8004a08:	461a      	mov	r2, r3
 8004a0a:	4b03      	ldr	r3, [pc, #12]	; (8004a18 <_ProcessFreqSweepMenuStateEvents+0x90>)
 8004a0c:	701a      	strb	r2, [r3, #0]
	}

}
 8004a0e:	bf00      	nop
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	200020d2 	.word	0x200020d2
 8004a18:	200020d1 	.word	0x200020d1

08004a1c <_ProcessBiasMainMenuEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessBiasMainMenuEvents()
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Bias_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderSet)
 8004a20:	4b1b      	ldr	r3, [pc, #108]	; (8004a90 <_ProcessBiasMainMenuEvents+0x74>)
 8004a22:	781b      	ldrb	r3, [r3, #0]
 8004a24:	2b05      	cmp	r3, #5
 8004a26:	d106      	bne.n	8004a36 <_ProcessBiasMainMenuEvents+0x1a>
	{
		eNextState = BiasMenuInputHandler(evEncoderSet);
 8004a28:	2005      	movs	r0, #5
 8004a2a:	f7ff fcef 	bl	800440c <BiasMenuInputHandler>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	461a      	mov	r2, r3
 8004a32:	4b18      	ldr	r3, [pc, #96]	; (8004a94 <_ProcessBiasMainMenuEvents+0x78>)
 8004a34:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderPush)
 8004a36:	4b16      	ldr	r3, [pc, #88]	; (8004a90 <_ProcessBiasMainMenuEvents+0x74>)
 8004a38:	781b      	ldrb	r3, [r3, #0]
 8004a3a:	2b06      	cmp	r3, #6
 8004a3c:	d105      	bne.n	8004a4a <_ProcessBiasMainMenuEvents+0x2e>
	{
		eNextState = BiasMenuExitHandler();
 8004a3e:	f7ff fd29 	bl	8004494 <BiasMenuExitHandler>
 8004a42:	4603      	mov	r3, r0
 8004a44:	461a      	mov	r2, r3
 8004a46:	4b13      	ldr	r3, [pc, #76]	; (8004a94 <_ProcessBiasMainMenuEvents+0x78>)
 8004a48:	701a      	strb	r2, [r3, #0]
		//ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
	}
	if(eNewEvent == evBlueBtn)
 8004a4a:	4b11      	ldr	r3, [pc, #68]	; (8004a90 <_ProcessBiasMainMenuEvents+0x74>)
 8004a4c:	781b      	ldrb	r3, [r3, #0]
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d106      	bne.n	8004a60 <_ProcessBiasMainMenuEvents+0x44>
	{
		// enable
		eNextState = BiasMenuInputHandler(evBlueBtn);
 8004a52:	2001      	movs	r0, #1
 8004a54:	f7ff fcda 	bl	800440c <BiasMenuInputHandler>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	461a      	mov	r2, r3
 8004a5c:	4b0d      	ldr	r3, [pc, #52]	; (8004a94 <_ProcessBiasMainMenuEvents+0x78>)
 8004a5e:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evGreenBtn)
 8004a60:	4b0b      	ldr	r3, [pc, #44]	; (8004a90 <_ProcessBiasMainMenuEvents+0x74>)
 8004a62:	781b      	ldrb	r3, [r3, #0]
 8004a64:	2b02      	cmp	r3, #2
 8004a66:	d106      	bne.n	8004a76 <_ProcessBiasMainMenuEvents+0x5a>
	{
		// direction
		eNextState = BiasMenuInputHandler(evGreenBtn);
 8004a68:	2002      	movs	r0, #2
 8004a6a:	f7ff fccf 	bl	800440c <BiasMenuInputHandler>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	461a      	mov	r2, r3
 8004a72:	4b08      	ldr	r3, [pc, #32]	; (8004a94 <_ProcessBiasMainMenuEvents+0x78>)
 8004a74:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evYellowBtn)
 8004a76:	4b06      	ldr	r3, [pc, #24]	; (8004a90 <_ProcessBiasMainMenuEvents+0x74>)
 8004a78:	781b      	ldrb	r3, [r3, #0]
 8004a7a:	2b03      	cmp	r3, #3
 8004a7c:	d106      	bne.n	8004a8c <_ProcessBiasMainMenuEvents+0x70>
	{
		// set sweep speed
		eNextState = BiasMenuInputHandler(evYellowBtn);
 8004a7e:	2003      	movs	r0, #3
 8004a80:	f7ff fcc4 	bl	800440c <BiasMenuInputHandler>
 8004a84:	4603      	mov	r3, r0
 8004a86:	461a      	mov	r2, r3
 8004a88:	4b02      	ldr	r3, [pc, #8]	; (8004a94 <_ProcessBiasMainMenuEvents+0x78>)
 8004a8a:	701a      	strb	r2, [r3, #0]
	}
}
 8004a8c:	bf00      	nop
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	200020d2 	.word	0x200020d2
 8004a94:	200020d1 	.word	0x200020d1

08004a98 <EM_SetNewEvent>:
 *	@param None
 *	@retval None
 *
 */
void EM_SetNewEvent(eSystemEvent pEvent)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b083      	sub	sp, #12
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	71fb      	strb	r3, [r7, #7]
	eNewEvent = pEvent;
 8004aa2:	4a04      	ldr	r2, [pc, #16]	; (8004ab4 <EM_SetNewEvent+0x1c>)
 8004aa4:	79fb      	ldrb	r3, [r7, #7]
 8004aa6:	7013      	strb	r3, [r2, #0]
}
 8004aa8:	bf00      	nop
 8004aaa:	370c      	adds	r7, #12
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr
 8004ab4:	200020d2 	.word	0x200020d2

08004ab8 <EM_GetSystemState>:
 *	@param None
 *	@retval None
 *
 */
eSystemState EM_GetSystemState()
{
 8004ab8:	b480      	push	{r7}
 8004aba:	af00      	add	r7, sp, #0
	return eNextState;
 8004abc:	4b03      	ldr	r3, [pc, #12]	; (8004acc <EM_GetSystemState+0x14>)
 8004abe:	781b      	ldrb	r3, [r3, #0]
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr
 8004aca:	bf00      	nop
 8004acc:	200020d1 	.word	0x200020d1

08004ad0 <FreqSweepMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqSweepMenuEntryHandler()
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqSweepMenuEntryHandler captured\n");
	#endif

	DM_RefreshScreen();
 8004ad4:	f7fc fe74 	bl	80017c0 <DM_RefreshScreen>

	if( sweep_upper_bounds_longest_output_arr != OUTPUT_TIMER->ARR)
 8004ad8:	4b21      	ldr	r3, [pc, #132]	; (8004b60 <FreqSweepMenuEntryHandler+0x90>)
 8004ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004adc:	ee07 3a90 	vmov	s15, r3
 8004ae0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004ae4:	4b1f      	ldr	r3, [pc, #124]	; (8004b64 <FreqSweepMenuEntryHandler+0x94>)
 8004ae6:	edd3 7a00 	vldr	s15, [r3]
 8004aea:	eeb4 7a67 	vcmp.f32	s14, s15
 8004aee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004af2:	d008      	beq.n	8004b06 <FreqSweepMenuEntryHandler+0x36>
		sweep_upper_bounds_longest_output_arr  = OUTPUT_TIMER->ARR;
 8004af4:	4b1a      	ldr	r3, [pc, #104]	; (8004b60 <FreqSweepMenuEntryHandler+0x90>)
 8004af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af8:	ee07 3a90 	vmov	s15, r3
 8004afc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b00:	4b18      	ldr	r3, [pc, #96]	; (8004b64 <FreqSweepMenuEntryHandler+0x94>)
 8004b02:	edc3 7a00 	vstr	s15, [r3]

	if( sweep_upper_bounds_longest_output_arr == MIN_OUTPUT_ARR)
 8004b06:	4b17      	ldr	r3, [pc, #92]	; (8004b64 <FreqSweepMenuEntryHandler+0x94>)
 8004b08:	edd3 7a00 	vldr	s15, [r3]
 8004b0c:	eeb2 7a0a 	vmov.f32	s14, #42	; 0x41500000  13.0
 8004b10:	eef4 7a47 	vcmp.f32	s15, s14
 8004b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b18:	d101      	bne.n	8004b1e <FreqSweepMenuEntryHandler+0x4e>
	{
		FS_SetSweepModeDown();
 8004b1a:	f000 ffb9 	bl	8005a90 <FS_SetSweepModeDown>
	}

	FS_SetEncoderControlMode(ENCODER_SWEEP_SPEED_FUNCTION);
 8004b1e:	2000      	movs	r0, #0
 8004b20:	f001 f810 	bl	8005b44 <FS_SetEncoderControlMode>
	FS_SetSweepTimerAutoReloadForEncoderControl(ENCODER_SWEEP_SPEED_FUNCTION);
 8004b24:	2000      	movs	r0, #0
 8004b26:	f001 f86b 	bl	8005c00 <FS_SetSweepTimerAutoReloadForEncoderControl>
	calculated_sweep_in_hertz = FS_GetCalculatedSweepFrequencyInHertz();
 8004b2a:	f001 f8a5 	bl	8005c78 <FS_GetCalculatedSweepFrequencyInHertz>
 8004b2e:	eef0 7a40 	vmov.f32	s15, s0
 8004b32:	4b0d      	ldr	r3, [pc, #52]	; (8004b68 <FreqSweepMenuEntryHandler+0x98>)
 8004b34:	edc3 7a00 	vstr	s15, [r3]

	// reset sweep start value
	SWEEP_TIMER->CNT = 0;
 8004b38:	4b0c      	ldr	r3, [pc, #48]	; (8004b6c <FreqSweepMenuEntryHandler+0x9c>)
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	625a      	str	r2, [r3, #36]	; 0x24

	// set default mode to sweep speed control
	FreqSweepMenuInputHandler(evSweepSpeedBtn);
 8004b3e:	2009      	movs	r0, #9
 8004b40:	f000 f818 	bl	8004b74 <FreqSweepMenuInputHandler>

	// sweep start speed
	SWEEP_TIMER->ARR = MIN_SWEEP_ARR;
 8004b44:	4b09      	ldr	r3, [pc, #36]	; (8004b6c <FreqSweepMenuEntryHandler+0x9c>)
 8004b46:	f244 12a0 	movw	r2, #16800	; 0x41a0
 8004b4a:	62da      	str	r2, [r3, #44]	; 0x2c
	SWEEP_TIMER->PSC = 0;
 8004b4c:	4b07      	ldr	r3, [pc, #28]	; (8004b6c <FreqSweepMenuEntryHandler+0x9c>)
 8004b4e:	2200      	movs	r2, #0
 8004b50:	629a      	str	r2, [r3, #40]	; 0x28

	// stay in this state
	eNewEvent = evIdle;
 8004b52:	4b07      	ldr	r3, [pc, #28]	; (8004b70 <FreqSweepMenuEntryHandler+0xa0>)
 8004b54:	2200      	movs	r2, #0
 8004b56:	701a      	strb	r2, [r3, #0]
	return Freq_Sweep_Menu_State;
 8004b58:	230d      	movs	r3, #13
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	bd80      	pop	{r7, pc}
 8004b5e:	bf00      	nop
 8004b60:	40013400 	.word	0x40013400
 8004b64:	20000124 	.word	0x20000124
 8004b68:	20002168 	.word	0x20002168
 8004b6c:	40000c00 	.word	0x40000c00
 8004b70:	200020d2 	.word	0x200020d2

08004b74 <FreqSweepMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqSweepMenuInputHandler(eSystemEvent pEvent)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b082      	sub	sp, #8
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	71fb      	strb	r3, [r7, #7]
		printf("FreqAdjustMenuInputHandler Event captured\n");
	#endif



	switch(pEvent)
 8004b7e:	79fb      	ldrb	r3, [r7, #7]
 8004b80:	3b07      	subs	r3, #7
 8004b82:	2b04      	cmp	r3, #4
 8004b84:	f200 80b2 	bhi.w	8004cec <FreqSweepMenuInputHandler+0x178>
 8004b88:	a201      	add	r2, pc, #4	; (adr r2, 8004b90 <FreqSweepMenuInputHandler+0x1c>)
 8004b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b8e:	bf00      	nop
 8004b90:	08004ba5 	.word	0x08004ba5
 8004b94:	08004bbf 	.word	0x08004bbf
 8004b98:	08004cdd 	.word	0x08004cdd
 8004b9c:	08004ce5 	.word	0x08004ce5
 8004ba0:	08004bf9 	.word	0x08004bf9
			#ifdef EVENT_MENU_DEBUG
				printf("evSweepEnable captured\n");
			#endif

			// toggle enable/disable
			SWEEP_TIMER->DIER 	^= TIM_DIER_UIE;
 8004ba4:	4b56      	ldr	r3, [pc, #344]	; (8004d00 <FreqSweepMenuInputHandler+0x18c>)
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	4a55      	ldr	r2, [pc, #340]	; (8004d00 <FreqSweepMenuInputHandler+0x18c>)
 8004baa:	f083 0301 	eor.w	r3, r3, #1
 8004bae:	60d3      	str	r3, [r2, #12]
			SWEEP_TIMER->CR1	^= TIM_CR1_CEN;
 8004bb0:	4b53      	ldr	r3, [pc, #332]	; (8004d00 <FreqSweepMenuInputHandler+0x18c>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a52      	ldr	r2, [pc, #328]	; (8004d00 <FreqSweepMenuInputHandler+0x18c>)
 8004bb6:	f083 0301 	eor.w	r3, r3, #1
 8004bba:	6013      	str	r3, [r2, #0]
			break;
 8004bbc:	e097      	b.n	8004cee <FreqSweepMenuInputHandler+0x17a>
			#ifdef EVENT_MENU_DEBUG
				printf("evSweepMode captured\n");
			#endif

			// flip between 0:Upcounter and 1:Downcounter
			active_sweep_mode ^= 1U;
 8004bbe:	4b51      	ldr	r3, [pc, #324]	; (8004d04 <FreqSweepMenuInputHandler+0x190>)
 8004bc0:	781b      	ldrb	r3, [r3, #0]
 8004bc2:	f083 0301 	eor.w	r3, r3, #1
 8004bc6:	b2da      	uxtb	r2, r3
 8004bc8:	4b4e      	ldr	r3, [pc, #312]	; (8004d04 <FreqSweepMenuInputHandler+0x190>)
 8004bca:	701a      	strb	r2, [r3, #0]

			switch(active_sweep_mode)
 8004bcc:	4b4d      	ldr	r3, [pc, #308]	; (8004d04 <FreqSweepMenuInputHandler+0x190>)
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d004      	beq.n	8004bde <FreqSweepMenuInputHandler+0x6a>
 8004bd4:	2b02      	cmp	r3, #2
 8004bd6:	d008      	beq.n	8004bea <FreqSweepMenuInputHandler+0x76>
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d003      	beq.n	8004be4 <FreqSweepMenuInputHandler+0x70>
 8004bdc:	e006      	b.n	8004bec <FreqSweepMenuInputHandler+0x78>
			{
				case SWEEP_MODE_DOWN:
					FS_SetSweepModeDown();
 8004bde:	f000 ff57 	bl	8005a90 <FS_SetSweepModeDown>
					break;
 8004be2:	e003      	b.n	8004bec <FreqSweepMenuInputHandler+0x78>

				case SWEEP_MODE_UP:
					FS_SetSweepModeUp();
 8004be4:	f000 ff84 	bl	8005af0 <FS_SetSweepModeUp>
					break;
 8004be8:	e000      	b.n	8004bec <FreqSweepMenuInputHandler+0x78>

				case SWEEP_MODE_BIDIR:	// not used
					//SWEEP_TIMER->CR1 |= (TIM_CR1_CMS_0);
					break;
 8004bea:	bf00      	nop
			}
			// switch(active_sweep_mode)
			// TODO
			FS_SetEncoderControlMode(theCurrentEncoderSweepFunction);
 8004bec:	4b46      	ldr	r3, [pc, #280]	; (8004d08 <FreqSweepMenuInputHandler+0x194>)
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f000 ffa7 	bl	8005b44 <FS_SetEncoderControlMode>

			break;
 8004bf6:	e07a      	b.n	8004cee <FreqSweepMenuInputHandler+0x17a>

			#ifdef EVENT_MENU_DEBUG
				printf("evEncoderSweep captured\n");
			#endif

			switch(theCurrentEncoderSweepFunction)
 8004bf8:	4b43      	ldr	r3, [pc, #268]	; (8004d08 <FreqSweepMenuInputHandler+0x194>)
 8004bfa:	781b      	ldrb	r3, [r3, #0]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d002      	beq.n	8004c06 <FreqSweepMenuInputHandler+0x92>
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d00b      	beq.n	8004c1c <FreqSweepMenuInputHandler+0xa8>
					break;

			}
			// switch(theCurrentEncoderSweepFunction)

			break;
 8004c04:	e073      	b.n	8004cee <FreqSweepMenuInputHandler+0x17a>
					FS_SetSweepTimerAutoReloadForEncoderControl(ENCODER_SWEEP_SPEED_FUNCTION);
 8004c06:	2000      	movs	r0, #0
 8004c08:	f000 fffa 	bl	8005c00 <FS_SetSweepTimerAutoReloadForEncoderControl>
					calculated_sweep_in_hertz = FS_GetCalculatedSweepFrequencyInHertz();
 8004c0c:	f001 f834 	bl	8005c78 <FS_GetCalculatedSweepFrequencyInHertz>
 8004c10:	eef0 7a40 	vmov.f32	s15, s0
 8004c14:	4b3d      	ldr	r3, [pc, #244]	; (8004d0c <FreqSweepMenuInputHandler+0x198>)
 8004c16:	edc3 7a00 	vstr	s15, [r3]
					break;
 8004c1a:	e05e      	b.n	8004cda <FreqSweepMenuInputHandler+0x166>
					switch(active_sweep_mode)
 8004c1c:	4b39      	ldr	r3, [pc, #228]	; (8004d04 <FreqSweepMenuInputHandler+0x190>)
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d002      	beq.n	8004c2a <FreqSweepMenuInputHandler+0xb6>
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d02a      	beq.n	8004c7e <FreqSweepMenuInputHandler+0x10a>
							break;
 8004c28:	e056      	b.n	8004cd8 <FreqSweepMenuInputHandler+0x164>
							if(ENCODER_TIMER->CNT < MIN_OUTPUT_ARR)
 8004c2a:	4b39      	ldr	r3, [pc, #228]	; (8004d10 <FreqSweepMenuInputHandler+0x19c>)
 8004c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2e:	2b0c      	cmp	r3, #12
 8004c30:	d803      	bhi.n	8004c3a <FreqSweepMenuInputHandler+0xc6>
								ENCODER_TIMER->CNT = MIN_OUTPUT_ARR;
 8004c32:	4b37      	ldr	r3, [pc, #220]	; (8004d10 <FreqSweepMenuInputHandler+0x19c>)
 8004c34:	220d      	movs	r2, #13
 8004c36:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 8004c38:	e04e      	b.n	8004cd8 <FreqSweepMenuInputHandler+0x164>
							else if (ENCODER_TIMER->CNT > sweep_upper_bounds_longest_output_arr)
 8004c3a:	4b35      	ldr	r3, [pc, #212]	; (8004d10 <FreqSweepMenuInputHandler+0x19c>)
 8004c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3e:	ee07 3a90 	vmov	s15, r3
 8004c42:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004c46:	4b33      	ldr	r3, [pc, #204]	; (8004d14 <FreqSweepMenuInputHandler+0x1a0>)
 8004c48:	edd3 7a00 	vldr	s15, [r3]
 8004c4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004c50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c54:	dd09      	ble.n	8004c6a <FreqSweepMenuInputHandler+0xf6>
								ENCODER_TIMER->CNT = sweep_upper_bounds_longest_output_arr;
 8004c56:	4b2f      	ldr	r3, [pc, #188]	; (8004d14 <FreqSweepMenuInputHandler+0x1a0>)
 8004c58:	edd3 7a00 	vldr	s15, [r3]
 8004c5c:	4b2c      	ldr	r3, [pc, #176]	; (8004d10 <FreqSweepMenuInputHandler+0x19c>)
 8004c5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c62:	ee17 2a90 	vmov	r2, s15
 8004c66:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 8004c68:	e036      	b.n	8004cd8 <FreqSweepMenuInputHandler+0x164>
								sweep_lower_bounds_shortest_output_arr = ENCODER_TIMER->CNT;
 8004c6a:	4b29      	ldr	r3, [pc, #164]	; (8004d10 <FreqSweepMenuInputHandler+0x19c>)
 8004c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c6e:	ee07 3a90 	vmov	s15, r3
 8004c72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c76:	4b28      	ldr	r3, [pc, #160]	; (8004d18 <FreqSweepMenuInputHandler+0x1a4>)
 8004c78:	edc3 7a00 	vstr	s15, [r3]
							break;
 8004c7c:	e02c      	b.n	8004cd8 <FreqSweepMenuInputHandler+0x164>
							if(ENCODER_TIMER->CNT >= MAX_OUTPUT_ARR)
 8004c7e:	4b24      	ldr	r3, [pc, #144]	; (8004d10 <FreqSweepMenuInputHandler+0x19c>)
 8004c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c82:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d904      	bls.n	8004c94 <FreqSweepMenuInputHandler+0x120>
								ENCODER_TIMER->CNT = MAX_OUTPUT_ARR;
 8004c8a:	4b21      	ldr	r3, [pc, #132]	; (8004d10 <FreqSweepMenuInputHandler+0x19c>)
 8004c8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004c90:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 8004c92:	e020      	b.n	8004cd6 <FreqSweepMenuInputHandler+0x162>
							else if (ENCODER_TIMER->CNT < sweep_lower_bounds_shortest_output_arr)
 8004c94:	4b1e      	ldr	r3, [pc, #120]	; (8004d10 <FreqSweepMenuInputHandler+0x19c>)
 8004c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c98:	ee07 3a90 	vmov	s15, r3
 8004c9c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004ca0:	4b1d      	ldr	r3, [pc, #116]	; (8004d18 <FreqSweepMenuInputHandler+0x1a4>)
 8004ca2:	edd3 7a00 	vldr	s15, [r3]
 8004ca6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004caa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cae:	d509      	bpl.n	8004cc4 <FreqSweepMenuInputHandler+0x150>
								ENCODER_TIMER->CNT = sweep_lower_bounds_shortest_output_arr;
 8004cb0:	4b19      	ldr	r3, [pc, #100]	; (8004d18 <FreqSweepMenuInputHandler+0x1a4>)
 8004cb2:	edd3 7a00 	vldr	s15, [r3]
 8004cb6:	4b16      	ldr	r3, [pc, #88]	; (8004d10 <FreqSweepMenuInputHandler+0x19c>)
 8004cb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cbc:	ee17 2a90 	vmov	r2, s15
 8004cc0:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 8004cc2:	e008      	b.n	8004cd6 <FreqSweepMenuInputHandler+0x162>
								sweep_upper_bounds_longest_output_arr = ENCODER_TIMER->CNT;
 8004cc4:	4b12      	ldr	r3, [pc, #72]	; (8004d10 <FreqSweepMenuInputHandler+0x19c>)
 8004cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc8:	ee07 3a90 	vmov	s15, r3
 8004ccc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cd0:	4b10      	ldr	r3, [pc, #64]	; (8004d14 <FreqSweepMenuInputHandler+0x1a0>)
 8004cd2:	edc3 7a00 	vstr	s15, [r3]
							break;
 8004cd6:	bf00      	nop
					break;
 8004cd8:	bf00      	nop
			break;
 8004cda:	e008      	b.n	8004cee <FreqSweepMenuInputHandler+0x17a>

		// set sweep speed button
		case evSweepSpeedBtn:
			FS_SetEncoderControlMode(ENCODER_SWEEP_SPEED_FUNCTION);
 8004cdc:	2000      	movs	r0, #0
 8004cde:	f000 ff31 	bl	8005b44 <FS_SetEncoderControlMode>

			break;
 8004ce2:	e004      	b.n	8004cee <FreqSweepMenuInputHandler+0x17a>

		// set sweep limit button
		case evSweepLimitBtn:
			FS_SetEncoderControlMode(ENCODER_SWEEP_LIMIT_FUNCTION);
 8004ce4:	2001      	movs	r0, #1
 8004ce6:	f000 ff2d 	bl	8005b44 <FS_SetEncoderControlMode>

			break;
 8004cea:	e000      	b.n	8004cee <FreqSweepMenuInputHandler+0x17a>

		default:
			break;
 8004cec:	bf00      	nop
	}
	// switch(pEvent)


	// stay in this state
	eNewEvent = evIdle;
 8004cee:	4b0b      	ldr	r3, [pc, #44]	; (8004d1c <FreqSweepMenuInputHandler+0x1a8>)
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	701a      	strb	r2, [r3, #0]
	return Freq_Sweep_Menu_State;
 8004cf4:	230d      	movs	r3, #13
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3708      	adds	r7, #8
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	bf00      	nop
 8004d00:	40000c00 	.word	0x40000c00
 8004d04:	200020d3 	.word	0x200020d3
 8004d08:	200020d4 	.word	0x200020d4
 8004d0c:	20002168 	.word	0x20002168
 8004d10:	40012c00 	.word	0x40012c00
 8004d14:	20000124 	.word	0x20000124
 8004d18:	20000120 	.word	0x20000120
 8004d1c:	200020d2 	.word	0x200020d2

08004d20 <FreqSweepMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqSweepMenuExitHandler()
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqSweepMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004d24:	f7fc fd4c 	bl	80017c0 <DM_RefreshScreen>

	// disable sweep timer and interrupts
	SWEEP_TIMER->DIER 	&= ~(TIM_DIER_UIE);
 8004d28:	4b08      	ldr	r3, [pc, #32]	; (8004d4c <FreqSweepMenuExitHandler+0x2c>)
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	4a07      	ldr	r2, [pc, #28]	; (8004d4c <FreqSweepMenuExitHandler+0x2c>)
 8004d2e:	f023 0301 	bic.w	r3, r3, #1
 8004d32:	60d3      	str	r3, [r2, #12]
	SWEEP_TIMER->CR1 	&= ~(TIM_CR1_CEN);
 8004d34:	4b05      	ldr	r3, [pc, #20]	; (8004d4c <FreqSweepMenuExitHandler+0x2c>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a04      	ldr	r2, [pc, #16]	; (8004d4c <FreqSweepMenuExitHandler+0x2c>)
 8004d3a:	f023 0301 	bic.w	r3, r3, #1
 8004d3e:	6013      	str	r3, [r2, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 8004d40:	4b03      	ldr	r3, [pc, #12]	; (8004d50 <FreqSweepMenuExitHandler+0x30>)
 8004d42:	2200      	movs	r2, #0
 8004d44:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8004d46:	230a      	movs	r3, #10
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	bd80      	pop	{r7, pc}
 8004d4c:	40000c00 	.word	0x40000c00
 8004d50:	200020d2 	.word	0x200020d2

08004d54 <FreqMainMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqMainMenuEntryHandler()
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqMainMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004d58:	f7fc fd32 	bl	80017c0 <DM_RefreshScreen>

	// stay in this state
	eNewEvent = evIdle;
 8004d5c:	4b02      	ldr	r3, [pc, #8]	; (8004d68 <FreqMainMenuEntryHandler+0x14>)
 8004d5e:	2200      	movs	r2, #0
 8004d60:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8004d62:	230a      	movs	r3, #10
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	bd80      	pop	{r7, pc}
 8004d68:	200020d2 	.word	0x200020d2

08004d6c <FreqMainMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqMainMenuExitHandler()
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqMainMenuExitHandler Event captured\n");
	#endif

	ENCODER_TIMER->ARR = 1024;
 8004d70:	4b05      	ldr	r3, [pc, #20]	; (8004d88 <FreqMainMenuExitHandler+0x1c>)
 8004d72:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d76:	62da      	str	r2, [r3, #44]	; 0x2c

	DM_RefreshScreen();
 8004d78:	f7fc fd22 	bl	80017c0 <DM_RefreshScreen>

	#ifdef EVENT_MENU_DEBUG
		  printf("returning to Idle State\n");
	#endif

	eNewEvent = evIdle;
 8004d7c:	4b03      	ldr	r3, [pc, #12]	; (8004d8c <FreqMainMenuExitHandler+0x20>)
 8004d7e:	2200      	movs	r2, #0
 8004d80:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 8004d82:	2301      	movs	r3, #1
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	bd80      	pop	{r7, pc}
 8004d88:	40012c00 	.word	0x40012c00
 8004d8c:	200020d2 	.word	0x200020d2

08004d90 <FreqPresetMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuEntryHandler()
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b082      	sub	sp, #8
 8004d94:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqPresetMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004d96:	f7fc fd13 	bl	80017c0 <DM_RefreshScreen>
	FreqO_ResetLastEncoderValue();
 8004d9a:	f000 fe6d 	bl	8005a78 <FreqO_ResetLastEncoderValue>

	FreqProfile_t *pFreqPresetTmp =  FreqO_GetFPresetObject();
 8004d9e:	f000 fe1d 	bl	80059dc <FreqO_GetFPresetObject>
 8004da2:	6078      	str	r0, [r7, #4]
	if(pFreqPresetTmp)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d008      	beq.n	8004dbc <FreqPresetMenuEntryHandler+0x2c>
	{
		// set rotary encoder limit to full scale and set centre starting position
		ENCODER_TIMER->CNT = 32768;
 8004daa:	4b0a      	ldr	r3, [pc, #40]	; (8004dd4 <FreqPresetMenuEntryHandler+0x44>)
 8004dac:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004db0:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = 65535;
 8004db2:	4b08      	ldr	r3, [pc, #32]	; (8004dd4 <FreqPresetMenuEntryHandler+0x44>)
 8004db4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004db8:	62da      	str	r2, [r3, #44]	; 0x2c
 8004dba:	e002      	b.n	8004dc2 <FreqPresetMenuEntryHandler+0x32>
	}
	else
	{
		DM_SetErrorDebugMsg("_FreqPresetMenuEntryHandler: pFreqPresetTmp null pointer");
 8004dbc:	4806      	ldr	r0, [pc, #24]	; (8004dd8 <FreqPresetMenuEntryHandler+0x48>)
 8004dbe:	f7fc fd45 	bl	800184c <DM_SetErrorDebugMsg>
	}


	// stay in this state
	eNewEvent = evIdle;
 8004dc2:	4b06      	ldr	r3, [pc, #24]	; (8004ddc <FreqPresetMenuEntryHandler+0x4c>)
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	701a      	strb	r2, [r3, #0]
	return Freq_Preset_Menu_State;
 8004dc8:	230b      	movs	r3, #11
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3708      	adds	r7, #8
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	bf00      	nop
 8004dd4:	40012c00 	.word	0x40012c00
 8004dd8:	08015d78 	.word	0x08015d78
 8004ddc:	200020d2 	.word	0x200020d2

08004de0 <FreqPresetMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuInputHandler()
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqPresetMenuInputHandler Event captured\n");
	#endif

	FreqO_MapEncoderPositionCoarse(SM_GetEncoderValue(ENCODER_NORMAL));
 8004de4:	2000      	movs	r0, #0
 8004de6:	f002 f85d 	bl	8006ea4 <SM_GetEncoderValue>
 8004dea:	4603      	mov	r3, r0
 8004dec:	4618      	mov	r0, r3
 8004dee:	f000 fcd1 	bl	8005794 <FreqO_MapEncoderPositionCoarse>

	// stay in this state
	eNewEvent = evIdle;
 8004df2:	4b03      	ldr	r3, [pc, #12]	; (8004e00 <FreqPresetMenuInputHandler+0x20>)
 8004df4:	2200      	movs	r2, #0
 8004df6:	701a      	strb	r2, [r3, #0]
	return Freq_Preset_Menu_State;
 8004df8:	230b      	movs	r3, #11
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	200020d2 	.word	0x200020d2

08004e04 <FreqPresetMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuExitHandler()
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqPresetMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004e08:	f7fc fcda 	bl	80017c0 <DM_RefreshScreen>

	// back to main freq menu
	eNewEvent = evIdle;
 8004e0c:	4b02      	ldr	r3, [pc, #8]	; (8004e18 <FreqPresetMenuExitHandler+0x14>)
 8004e0e:	2200      	movs	r2, #0
 8004e10:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8004e12:	230a      	movs	r3, #10
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	bd80      	pop	{r7, pc}
 8004e18:	200020d2 	.word	0x200020d2

08004e1c <FreqAdjustMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuEntryHandler()
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqAdjustMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004e20:	f7fc fcce 	bl	80017c0 <DM_RefreshScreen>

	// set rotary encoder limit to full scale and set OUTPUT_TIMER "TOP" starting position
	ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
 8004e24:	4b06      	ldr	r3, [pc, #24]	; (8004e40 <FreqAdjustMenuEntryHandler+0x24>)
 8004e26:	4a07      	ldr	r2, [pc, #28]	; (8004e44 <FreqAdjustMenuEntryHandler+0x28>)
 8004e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e2a:	6253      	str	r3, [r2, #36]	; 0x24
	ENCODER_TIMER->ARR = 65535;
 8004e2c:	4b05      	ldr	r3, [pc, #20]	; (8004e44 <FreqAdjustMenuEntryHandler+0x28>)
 8004e2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e32:	62da      	str	r2, [r3, #44]	; 0x2c

	// stay in this state
	eNewEvent = evIdle;
 8004e34:	4b04      	ldr	r3, [pc, #16]	; (8004e48 <FreqAdjustMenuEntryHandler+0x2c>)
 8004e36:	2200      	movs	r2, #0
 8004e38:	701a      	strb	r2, [r3, #0]
	return Freq_Adjust_Menu_State;
 8004e3a:	230c      	movs	r3, #12
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	bd80      	pop	{r7, pc}
 8004e40:	40013400 	.word	0x40013400
 8004e44:	40012c00 	.word	0x40012c00
 8004e48:	200020d2 	.word	0x200020d2

08004e4c <FreqAdjustMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuInputHandler()
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqAdjustMenuInputHandler Event captured\n");
	#endif

	FreqO_AdjustFreq();
 8004e50:	f000 fd70 	bl	8005934 <FreqO_AdjustFreq>

	// stay in this state
	eNewEvent = evIdle;
 8004e54:	4b02      	ldr	r3, [pc, #8]	; (8004e60 <FreqAdjustMenuInputHandler+0x14>)
 8004e56:	2200      	movs	r2, #0
 8004e58:	701a      	strb	r2, [r3, #0]
	return Freq_Adjust_Menu_State;
 8004e5a:	230c      	movs	r3, #12
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	bd80      	pop	{r7, pc}
 8004e60:	200020d2 	.word	0x200020d2

08004e64 <FreqAdjustMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuExitHandler()
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqAdjustMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004e68:	f7fc fcaa 	bl	80017c0 <DM_RefreshScreen>

	// back to main freq menu
	eNewEvent = evIdle;
 8004e6c:	4b02      	ldr	r3, [pc, #8]	; (8004e78 <FreqAdjustMenuExitHandler+0x14>)
 8004e6e:	2200      	movs	r2, #0
 8004e70:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8004e72:	230a      	movs	r3, #10
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	200020d2 	.word	0x200020d2

08004e7c <FreqPrescalerMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPrescalerMenuEntryHandler()
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqPrescalerMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004e80:	f7fc fc9e 	bl	80017c0 <DM_RefreshScreen>

	// set rotary encoder limit to full scale and midway starting position
	ENCODER_TIMER->CNT = 32768;
 8004e84:	4b06      	ldr	r3, [pc, #24]	; (8004ea0 <FreqPrescalerMenuEntryHandler+0x24>)
 8004e86:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004e8a:	625a      	str	r2, [r3, #36]	; 0x24
	ENCODER_TIMER->ARR = 65535;
 8004e8c:	4b04      	ldr	r3, [pc, #16]	; (8004ea0 <FreqPrescalerMenuEntryHandler+0x24>)
 8004e8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e92:	62da      	str	r2, [r3, #44]	; 0x2c

	// stay in this state
	eNewEvent = evIdle;
 8004e94:	4b03      	ldr	r3, [pc, #12]	; (8004ea4 <FreqPrescalerMenuEntryHandler+0x28>)
 8004e96:	2200      	movs	r2, #0
 8004e98:	701a      	strb	r2, [r3, #0]
	return Freq_Prescaler_Menu_State;
 8004e9a:	230e      	movs	r3, #14
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	bd80      	pop	{r7, pc}
 8004ea0:	40012c00 	.word	0x40012c00
 8004ea4:	200020d2 	.word	0x200020d2

08004ea8 <FreqPrescalerMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPrescalerMenuInputHandler()
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqPrescalerMenuInputHandler Event captured\n");
	#endif

	FreqO_AdjustPrescaler();
 8004eac:	f000 fd6e 	bl	800598c <FreqO_AdjustPrescaler>

	// stay in this state
	eNewEvent = evIdle;
 8004eb0:	4b02      	ldr	r3, [pc, #8]	; (8004ebc <FreqPrescalerMenuInputHandler+0x14>)
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	701a      	strb	r2, [r3, #0]
	return Freq_Prescaler_Menu_State;
 8004eb6:	230e      	movs	r3, #14
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	200020d2 	.word	0x200020d2

08004ec0 <FreqPrescalerMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPrescalerMenuExitHandler()
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqPrescalerMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004ec4:	f7fc fc7c 	bl	80017c0 <DM_RefreshScreen>

	// back to main freq menu
	eNewEvent = evIdle;
 8004ec8:	4b02      	ldr	r3, [pc, #8]	; (8004ed4 <FreqPrescalerMenuExitHandler+0x14>)
 8004eca:	2200      	movs	r2, #0
 8004ecc:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8004ece:	230a      	movs	r3, #10
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	bd80      	pop	{r7, pc}
 8004ed4:	200020d2 	.word	0x200020d2

08004ed8 <FuncMainMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncMainMenuEntryHandler(void)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncMainMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004edc:	f7fc fc70 	bl	80017c0 <DM_RefreshScreen>

	//_setFuncMenuStatus(ENABLE_FUNC_MAIN_MENU);

	eNewEvent = evIdle;
 8004ee0:	4b02      	ldr	r3, [pc, #8]	; (8004eec <FuncMainMenuEntryHandler+0x14>)
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 8004ee6:	2303      	movs	r3, #3
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	bd80      	pop	{r7, pc}
 8004eec:	200020d2 	.word	0x200020d2

08004ef0 <FuncMainMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncMainMenuExitHandler()
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncMainMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004ef4:	f7fc fc64 	bl	80017c0 <DM_RefreshScreen>

	#ifdef EVENT_MENU_DEBUG
		  printf("returning to Idle State\n");
	#endif

	eNewEvent = evIdle;
 8004ef8:	4b02      	ldr	r3, [pc, #8]	; (8004f04 <FuncMainMenuExitHandler+0x14>)
 8004efa:	2200      	movs	r2, #0
 8004efc:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 8004efe:	2301      	movs	r3, #1
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	bd80      	pop	{r7, pc}
 8004f04:	200020d2 	.word	0x200020d2

08004f08 <FuncSignalMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuEntryHandler(void)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncSignalMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004f0c:	f7fc fc58 	bl	80017c0 <DM_RefreshScreen>
	FuncO_ResetLastEncoderValue();
 8004f10:	f000 fee0 	bl	8005cd4 <FuncO_ResetLastEncoderValue>

	ENCODER_TIMER->CNT = 32768;
 8004f14:	4b06      	ldr	r3, [pc, #24]	; (8004f30 <FuncSignalMenuEntryHandler+0x28>)
 8004f16:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004f1a:	625a      	str	r2, [r3, #36]	; 0x24
	ENCODER_TIMER->ARR = 65535;
 8004f1c:	4b04      	ldr	r3, [pc, #16]	; (8004f30 <FuncSignalMenuEntryHandler+0x28>)
 8004f1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004f22:	62da      	str	r2, [r3, #44]	; 0x2c

	eNewEvent = evIdle;
 8004f24:	4b03      	ldr	r3, [pc, #12]	; (8004f34 <FuncSignalMenuEntryHandler+0x2c>)
 8004f26:	2200      	movs	r2, #0
 8004f28:	701a      	strb	r2, [r3, #0]
	return Func_Signal_Menu_State;
 8004f2a:	2304      	movs	r3, #4
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	bd80      	pop	{r7, pc}
 8004f30:	40012c00 	.word	0x40012c00
 8004f34:	200020d2 	.word	0x200020d2

08004f38 <FuncSignalMenuInputHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuInputHandler(void)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncSignalMenuInputHandler Event captured\n");
	#endif

	FuncO_MapEncoderPositionToSignalOutput(SM_GetEncoderValue(ENCODER_NORMAL));
 8004f3c:	2000      	movs	r0, #0
 8004f3e:	f001 ffb1 	bl	8006ea4 <SM_GetEncoderValue>
 8004f42:	4603      	mov	r3, r0
 8004f44:	4618      	mov	r0, r3
 8004f46:	f000 fed1 	bl	8005cec <FuncO_MapEncoderPositionToSignalOutput>

	eNewEvent = evIdle;
 8004f4a:	4b03      	ldr	r3, [pc, #12]	; (8004f58 <FuncSignalMenuInputHandler+0x20>)
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	701a      	strb	r2, [r3, #0]
	return Func_Signal_Menu_State;
 8004f50:	2304      	movs	r3, #4
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	bf00      	nop
 8004f58:	200020d2 	.word	0x200020d2

08004f5c <FuncSignalMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuExitHandler()
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncSignalMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004f60:	f7fc fc2e 	bl	80017c0 <DM_RefreshScreen>
	SM_ResetFuncPwmDutyMode();
 8004f64:	f002 f840 	bl	8006fe8 <SM_ResetFuncPwmDutyMode>
	eNewEvent = evIdle;
 8004f68:	4b02      	ldr	r3, [pc, #8]	; (8004f74 <FuncSignalMenuExitHandler+0x18>)
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 8004f6e:	2303      	movs	r3, #3
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	bd80      	pop	{r7, pc}
 8004f74:	200020d2 	.word	0x200020d2

08004f78 <FuncAuxMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncAuxMenuEntryHandler(void)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncAuxMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004f7c:	f7fc fc20 	bl	80017c0 <DM_RefreshScreen>
	FuncO_ResetLastEncoderValue();
 8004f80:	f000 fea8 	bl	8005cd4 <FuncO_ResetLastEncoderValue>

	ENCODER_TIMER->CNT = 32768;
 8004f84:	4b06      	ldr	r3, [pc, #24]	; (8004fa0 <FuncAuxMenuEntryHandler+0x28>)
 8004f86:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004f8a:	625a      	str	r2, [r3, #36]	; 0x24
	ENCODER_TIMER->ARR = 65535;
 8004f8c:	4b04      	ldr	r3, [pc, #16]	; (8004fa0 <FuncAuxMenuEntryHandler+0x28>)
 8004f8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004f92:	62da      	str	r2, [r3, #44]	; 0x2c

	eNewEvent = evIdle;
 8004f94:	4b03      	ldr	r3, [pc, #12]	; (8004fa4 <FuncAuxMenuEntryHandler+0x2c>)
 8004f96:	2200      	movs	r2, #0
 8004f98:	701a      	strb	r2, [r3, #0]
	return Func_Aux_Menu_State;
 8004f9a:	2305      	movs	r3, #5
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	40012c00 	.word	0x40012c00
 8004fa4:	200020d2 	.word	0x200020d2

08004fa8 <FuncAuxMenuInputHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncAuxMenuInputHandler(void)
{
 8004fa8:	b590      	push	{r4, r7, lr}
 8004faa:	b083      	sub	sp, #12
 8004fac:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncAuxMenuInputHandler Event captured\n");
	#endif

	// PWM ADJUST
	if(SM_IsFuncPwmDutyMode())
 8004fae:	f001 ffff 	bl	8006fb0 <SM_IsFuncPwmDutyMode>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d01a      	beq.n	8004fee <FuncAuxMenuInputHandler+0x46>
	{
		uint16_t enc_value = SM_GetEncoderValue(ENCODER_NORMAL);
 8004fb8:	2000      	movs	r0, #0
 8004fba:	f001 ff73 	bl	8006ea4 <SM_GetEncoderValue>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	80fb      	strh	r3, [r7, #6]
		PWM_AUX_OUT_TIM->CCR1 = (pow(enc_value, 2));
 8004fc2:	88fb      	ldrh	r3, [r7, #6]
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f7fb fac5 	bl	8000554 <__aeabi_ui2d>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	460c      	mov	r4, r1
 8004fce:	ed9f 1b10 	vldr	d1, [pc, #64]	; 8005010 <FuncAuxMenuInputHandler+0x68>
 8004fd2:	ec44 3b10 	vmov	d0, r3, r4
 8004fd6:	f00f f987 	bl	80142e8 <pow>
 8004fda:	ec53 2b10 	vmov	r2, r3, d0
 8004fde:	4c0e      	ldr	r4, [pc, #56]	; (8005018 <FuncAuxMenuInputHandler+0x70>)
 8004fe0:	4610      	mov	r0, r2
 8004fe2:	4619      	mov	r1, r3
 8004fe4:	f7fb fe08 	bl	8000bf8 <__aeabi_d2uiz>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	6363      	str	r3, [r4, #52]	; 0x34
 8004fec:	e006      	b.n	8004ffc <FuncAuxMenuInputHandler+0x54>
	}
	else
	{
		FuncO_MapEncoderPositionToAuxOutput(SM_GetEncoderValue(ENCODER_NORMAL));
 8004fee:	2000      	movs	r0, #0
 8004ff0:	f001 ff58 	bl	8006ea4 <SM_GetEncoderValue>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f000 feb2 	bl	8005d60 <FuncO_MapEncoderPositionToAuxOutput>
	}

	eNewEvent = evIdle;
 8004ffc:	4b07      	ldr	r3, [pc, #28]	; (800501c <FuncAuxMenuInputHandler+0x74>)
 8004ffe:	2200      	movs	r2, #0
 8005000:	701a      	strb	r2, [r3, #0]
	return Func_Aux_Menu_State;
 8005002:	2305      	movs	r3, #5
}
 8005004:	4618      	mov	r0, r3
 8005006:	370c      	adds	r7, #12
 8005008:	46bd      	mov	sp, r7
 800500a:	bd90      	pop	{r4, r7, pc}
 800500c:	f3af 8000 	nop.w
 8005010:	00000000 	.word	0x00000000
 8005014:	40000000 	.word	0x40000000
 8005018:	40000400 	.word	0x40000400
 800501c:	200020d2 	.word	0x200020d2

08005020 <FuncAuxToggleDutyMode>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FuncAuxToggleDutyMode()
{
 8005020:	b580      	push	{r7, lr}
 8005022:	af00      	add	r7, sp, #0
	SM_ToggleFuncPwmDutyMode();
 8005024:	f001 ffd0 	bl	8006fc8 <SM_ToggleFuncPwmDutyMode>
	ENCODER_TIMER->ARR = 16384;
 8005028:	4b04      	ldr	r3, [pc, #16]	; (800503c <FuncAuxToggleDutyMode+0x1c>)
 800502a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800502e:	62da      	str	r2, [r3, #44]	; 0x2c
	eNewEvent = evIdle;
 8005030:	4b03      	ldr	r3, [pc, #12]	; (8005040 <FuncAuxToggleDutyMode+0x20>)
 8005032:	2200      	movs	r2, #0
 8005034:	701a      	strb	r2, [r3, #0]
	return Func_Aux_Menu_State;
 8005036:	2305      	movs	r3, #5
}
 8005038:	4618      	mov	r0, r3
 800503a:	bd80      	pop	{r7, pc}
 800503c:	40012c00 	.word	0x40012c00
 8005040:	200020d2 	.word	0x200020d2

08005044 <FuncAuxMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncAuxMenuExitHandler()
{
 8005044:	b580      	push	{r7, lr}
 8005046:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncAuxMenuExitHandler Event captured\n");
	#endif

	SM_ResetFuncPwmDutyMode();
 8005048:	f001 ffce 	bl	8006fe8 <SM_ResetFuncPwmDutyMode>
	DM_RefreshScreen();
 800504c:	f7fc fbb8 	bl	80017c0 <DM_RefreshScreen>

	eNewEvent = evIdle;
 8005050:	4b02      	ldr	r3, [pc, #8]	; (800505c <FuncAuxMenuExitHandler+0x18>)
 8005052:	2200      	movs	r2, #0
 8005054:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 8005056:	2303      	movs	r3, #3
}
 8005058:	4618      	mov	r0, r3
 800505a:	bd80      	pop	{r7, pc}
 800505c:	200020d2 	.word	0x200020d2

08005060 <GainMainMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainMainMenuEntryHandler()
{
 8005060:	b580      	push	{r7, lr}
 8005062:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainMainMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8005064:	f7fc fbac 	bl	80017c0 <DM_RefreshScreen>

	eNewEvent = evIdle;
 8005068:	4b02      	ldr	r3, [pc, #8]	; (8005074 <GainMainMenuEntryHandler+0x14>)
 800506a:	2200      	movs	r2, #0
 800506c:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 800506e:	2306      	movs	r3, #6
}
 8005070:	4618      	mov	r0, r3
 8005072:	bd80      	pop	{r7, pc}
 8005074:	200020d2 	.word	0x200020d2

08005078 <GainMainMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainMainMenuExitHandler()
{
 8005078:	b580      	push	{r7, lr}
 800507a:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainMainMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 800507c:	f7fc fba0 	bl	80017c0 <DM_RefreshScreen>

	#ifdef EVENT_MENU_DEBUG
		  printf("returning to Idle State\n");
	#endif

	eNewEvent = evIdle;
 8005080:	4b02      	ldr	r3, [pc, #8]	; (800508c <GainMainMenuExitHandler+0x14>)
 8005082:	2200      	movs	r2, #0
 8005084:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 8005086:	2301      	movs	r3, #1
}
 8005088:	4618      	mov	r0, r3
 800508a:	bd80      	pop	{r7, pc}
 800508c:	200020d2 	.word	0x200020d2

08005090 <GainSignalMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuEntryHandler()
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b082      	sub	sp, #8
 8005094:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainSignalMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8005096:	f7fc fb93 	bl	80017c0 <DM_RefreshScreen>
	GO_ResetLastEncoderValue();
 800509a:	f001 f851 	bl	8006140 <GO_ResetLastEncoderValue>
	VPP_ResetLastEncoderValue();
 800509e:	f001 ffaf 	bl	8007000 <VPP_ResetLastEncoderValue>

	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile;
 80050a2:	2000      	movs	r0, #0
 80050a4:	f001 fc82 	bl	80069ac <SM_GetOutputChannel>
 80050a8:	4603      	mov	r3, r0
 80050aa:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 80050ae:	607b      	str	r3, [r7, #4]

	if(pTmpVppPreset)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d008      	beq.n	80050c8 <GainSignalMenuEntryHandler+0x38>
	{
		// set to full range and mid starting position
		ENCODER_TIMER->CNT = 32768;
 80050b6:	4b0a      	ldr	r3, [pc, #40]	; (80050e0 <GainSignalMenuEntryHandler+0x50>)
 80050b8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80050bc:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = 65535;
 80050be:	4b08      	ldr	r3, [pc, #32]	; (80050e0 <GainSignalMenuEntryHandler+0x50>)
 80050c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80050c4:	62da      	str	r2, [r3, #44]	; 0x2c
 80050c6:	e002      	b.n	80050ce <GainSignalMenuEntryHandler+0x3e>
	}
	else
	{
		DM_SetErrorDebugMsg("GainMainMenuEntryHandler: pVppPresetTmp null pointer");
 80050c8:	4806      	ldr	r0, [pc, #24]	; (80050e4 <GainSignalMenuEntryHandler+0x54>)
 80050ca:	f7fc fbbf 	bl	800184c <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 80050ce:	4b06      	ldr	r3, [pc, #24]	; (80050e8 <GainSignalMenuEntryHandler+0x58>)
 80050d0:	2200      	movs	r2, #0
 80050d2:	701a      	strb	r2, [r3, #0]
	return Gain_Signal_Menu_State;
 80050d4:	2307      	movs	r3, #7
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3708      	adds	r7, #8
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	bf00      	nop
 80050e0:	40012c00 	.word	0x40012c00
 80050e4:	08015db4 	.word	0x08015db4
 80050e8:	200020d2 	.word	0x200020d2

080050ec <GainSignalMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuInputHandler(eSystemEvent pEvent)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b084      	sub	sp, #16
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	4603      	mov	r3, r0
 80050f4:	71fb      	strb	r3, [r7, #7]
	#ifdef EVENT_MENU_DEBUG
		printf("GainSignalMenuInputHandler Event captured\n");
	#endif


	FunctionProfile_t *tmpFuncProfile = SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile;
 80050f6:	2000      	movs	r0, #0
 80050f8:	f001 fc58 	bl	80069ac <SM_GetOutputChannel>
 80050fc:	4603      	mov	r3, r0
 80050fe:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8005102:	60fb      	str	r3, [r7, #12]

	switch(pEvent)
 8005104:	79fb      	ldrb	r3, [r7, #7]
 8005106:	3b01      	subs	r3, #1
 8005108:	2b04      	cmp	r3, #4
 800510a:	d834      	bhi.n	8005176 <GainSignalMenuInputHandler+0x8a>
 800510c:	a201      	add	r2, pc, #4	; (adr r2, 8005114 <GainSignalMenuInputHandler+0x28>)
 800510e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005112:	bf00      	nop
 8005114:	08005157 	.word	0x08005157
 8005118:	0800515f 	.word	0x0800515f
 800511c:	08005167 	.word	0x08005167
 8005120:	0800516f 	.word	0x0800516f
 8005124:	08005129 	.word	0x08005129
	{
		case evEncoderSet:

			if(tmpFuncProfile)
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d025      	beq.n	800517a <GainSignalMenuInputHandler+0x8e>
			{
				if(tmpFuncProfile->func == PWM_FUNC_MODE)
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	781b      	ldrb	r3, [r3, #0]
 8005132:	2b06      	cmp	r3, #6
 8005134:	d107      	bne.n	8005146 <GainSignalMenuInputHandler+0x5a>
				{
					GO_MapEncoderPositionToSignalOutput(SM_GetEncoderValue(ENCODER_INVERSE));
 8005136:	2001      	movs	r0, #1
 8005138:	f001 feb4 	bl	8006ea4 <SM_GetEncoderValue>
 800513c:	4603      	mov	r3, r0
 800513e:	4618      	mov	r0, r3
 8005140:	f001 f80a 	bl	8006158 <GO_MapEncoderPositionToSignalOutput>
				else
				{
					VPP_MapEncoderPositionToSignalOutput(SM_GetEncoderValue(ENCODER_NORMAL));
				}
			}
			break;
 8005144:	e019      	b.n	800517a <GainSignalMenuInputHandler+0x8e>
					VPP_MapEncoderPositionToSignalOutput(SM_GetEncoderValue(ENCODER_NORMAL));
 8005146:	2000      	movs	r0, #0
 8005148:	f001 feac 	bl	8006ea4 <SM_GetEncoderValue>
 800514c:	4603      	mov	r3, r0
 800514e:	4618      	mov	r0, r3
 8005150:	f002 f8c8 	bl	80072e4 <VPP_MapEncoderPositionToSignalOutput>
			break;
 8005154:	e011      	b.n	800517a <GainSignalMenuInputHandler+0x8e>

		case evBlueBtn:
			VPP_ApplyProfileToSignal(VPP18);
 8005156:	2011      	movs	r0, #17
 8005158:	f001 ff5e 	bl	8007018 <VPP_ApplyProfileToSignal>
			break;
 800515c:	e00e      	b.n	800517c <GainSignalMenuInputHandler+0x90>

		case evGreenBtn:
			VPP_ApplyProfileToSignal(VPP33);
 800515e:	2020      	movs	r0, #32
 8005160:	f001 ff5a 	bl	8007018 <VPP_ApplyProfileToSignal>
			break;
 8005164:	e00a      	b.n	800517c <GainSignalMenuInputHandler+0x90>

		case evYellowBtn:
			VPP_ApplyProfileToSignal(VPP50);
 8005166:	2031      	movs	r0, #49	; 0x31
 8005168:	f001 ff56 	bl	8007018 <VPP_ApplyProfileToSignal>
			break;
 800516c:	e006      	b.n	800517c <GainSignalMenuInputHandler+0x90>

		case evRedBtn:
			VPP_ApplyProfileToSignal(VPP90);
 800516e:	2059      	movs	r0, #89	; 0x59
 8005170:	f001 ff52 	bl	8007018 <VPP_ApplyProfileToSignal>
			break;
 8005174:	e002      	b.n	800517c <GainSignalMenuInputHandler+0x90>

		default:
			break;
 8005176:	bf00      	nop
 8005178:	e000      	b.n	800517c <GainSignalMenuInputHandler+0x90>
			break;
 800517a:	bf00      	nop
	}

	eNewEvent = evIdle;
 800517c:	4b03      	ldr	r3, [pc, #12]	; (800518c <GainSignalMenuInputHandler+0xa0>)
 800517e:	2200      	movs	r2, #0
 8005180:	701a      	strb	r2, [r3, #0]
	return Gain_Signal_Menu_State;
 8005182:	2307      	movs	r3, #7
}
 8005184:	4618      	mov	r0, r3
 8005186:	3710      	adds	r7, #16
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}
 800518c:	200020d2 	.word	0x200020d2

08005190 <GainSignalMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuExitHandler()
{
 8005190:	b580      	push	{r7, lr}
 8005192:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainSignalMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8005194:	f7fc fb14 	bl	80017c0 <DM_RefreshScreen>

	eNewEvent = evIdle;
 8005198:	4b02      	ldr	r3, [pc, #8]	; (80051a4 <GainSignalMenuExitHandler+0x14>)
 800519a:	2200      	movs	r2, #0
 800519c:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 800519e:	2306      	movs	r3, #6
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	bd80      	pop	{r7, pc}
 80051a4:	200020d2 	.word	0x200020d2

080051a8 <GainAuxMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainAuxMenuEntryHandler()
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b082      	sub	sp, #8
 80051ac:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainAuxMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 80051ae:	f7fc fb07 	bl	80017c0 <DM_RefreshScreen>
	VPP_ResetLastEncoderValue();
 80051b2:	f001 ff25 	bl	8007000 <VPP_ResetLastEncoderValue>

	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(AUX_CHANNEL)->amp_profile;
 80051b6:	2001      	movs	r0, #1
 80051b8:	f001 fbf8 	bl	80069ac <SM_GetOutputChannel>
 80051bc:	4603      	mov	r3, r0
 80051be:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 80051c2:	607b      	str	r3, [r7, #4]

	if(pTmpVppPreset)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d008      	beq.n	80051dc <GainAuxMenuEntryHandler+0x34>
	{
		// set to full range and mid starting position
		ENCODER_TIMER->CNT = 32768;
 80051ca:	4b0a      	ldr	r3, [pc, #40]	; (80051f4 <GainAuxMenuEntryHandler+0x4c>)
 80051cc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80051d0:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = 65535;
 80051d2:	4b08      	ldr	r3, [pc, #32]	; (80051f4 <GainAuxMenuEntryHandler+0x4c>)
 80051d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80051d8:	62da      	str	r2, [r3, #44]	; 0x2c
 80051da:	e002      	b.n	80051e2 <GainAuxMenuEntryHandler+0x3a>
	}
	else
	{
		DM_SetErrorDebugMsg("GainMainMenuEntryHandler: pVppPresetTmp null pointer");
 80051dc:	4806      	ldr	r0, [pc, #24]	; (80051f8 <GainAuxMenuEntryHandler+0x50>)
 80051de:	f7fc fb35 	bl	800184c <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 80051e2:	4b06      	ldr	r3, [pc, #24]	; (80051fc <GainAuxMenuEntryHandler+0x54>)
 80051e4:	2200      	movs	r2, #0
 80051e6:	701a      	strb	r2, [r3, #0]
	return Gain_Aux_Menu_State;
 80051e8:	2308      	movs	r3, #8
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3708      	adds	r7, #8
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}
 80051f2:	bf00      	nop
 80051f4:	40012c00 	.word	0x40012c00
 80051f8:	08015db4 	.word	0x08015db4
 80051fc:	200020d2 	.word	0x200020d2

08005200 <GainAuxMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainAuxMenuInputHandler()
{
 8005200:	b580      	push	{r7, lr}
 8005202:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainAuxMenuInputHandler Event captured\n");
	#endif

	VPP_MapEncoderPositionToAuxOutput(SM_GetEncoderValue(ENCODER_NORMAL));
 8005204:	2000      	movs	r0, #0
 8005206:	f001 fe4d 	bl	8006ea4 <SM_GetEncoderValue>
 800520a:	4603      	mov	r3, r0
 800520c:	4618      	mov	r0, r3
 800520e:	f002 f8a3 	bl	8007358 <VPP_MapEncoderPositionToAuxOutput>

	eNewEvent = evYellowBtn;
 8005212:	4b03      	ldr	r3, [pc, #12]	; (8005220 <GainAuxMenuInputHandler+0x20>)
 8005214:	2203      	movs	r2, #3
 8005216:	701a      	strb	r2, [r3, #0]
	return Gain_Aux_Menu_State;
 8005218:	2308      	movs	r3, #8
}
 800521a:	4618      	mov	r0, r3
 800521c:	bd80      	pop	{r7, pc}
 800521e:	bf00      	nop
 8005220:	200020d2 	.word	0x200020d2

08005224 <GainAuxMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainAuxMenuExitHandler()
{
 8005224:	b580      	push	{r7, lr}
 8005226:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainAuxMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8005228:	f7fc faca 	bl	80017c0 <DM_RefreshScreen>

	eNewEvent = evIdle;
 800522c:	4b02      	ldr	r3, [pc, #8]	; (8005238 <GainAuxMenuExitHandler+0x14>)
 800522e:	2200      	movs	r2, #0
 8005230:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 8005232:	2306      	movs	r3, #6
}
 8005234:	4618      	mov	r0, r3
 8005236:	bd80      	pop	{r7, pc}
 8005238:	200020d2 	.word	0x200020d2

0800523c <ToplevelOutputMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelOutputMenuEntryHandler()
{
 800523c:	b580      	push	{r7, lr}
 800523e:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("ToplevelOutputMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8005240:	f7fc fabe 	bl	80017c0 <DM_RefreshScreen>

	// stay in this state
	eNewEvent = evIdle;
 8005244:	4b02      	ldr	r3, [pc, #8]	; (8005250 <ToplevelOutputMenuEntryHandler+0x14>)
 8005246:	2200      	movs	r2, #0
 8005248:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 800524a:	2301      	movs	r3, #1
}
 800524c:	4618      	mov	r0, r3
 800524e:	bd80      	pop	{r7, pc}
 8005250:	200020d2 	.word	0x200020d2

08005254 <ToplevelOutputMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelOutputMenuExitHandler()
{
 8005254:	b580      	push	{r7, lr}
 8005256:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("ToplevelOutputMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8005258:	f7fc fab2 	bl	80017c0 <DM_RefreshScreen>

	// back to main freq menu
	eNewEvent = evIdle;
 800525c:	4b02      	ldr	r3, [pc, #8]	; (8005268 <ToplevelOutputMenuExitHandler+0x14>)
 800525e:	2200      	movs	r2, #0
 8005260:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8005262:	2300      	movs	r3, #0
}
 8005264:	4618      	mov	r0, r3
 8005266:	bd80      	pop	{r7, pc}
 8005268:	200020d2 	.word	0x200020d2

0800526c <ToplevelInputMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelInputMenuEntryHandler()
{
 800526c:	b580      	push	{r7, lr}
 800526e:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("ToplevelInputMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8005270:	f7fc faa6 	bl	80017c0 <DM_RefreshScreen>

	// stay in this state
	eNewEvent = evIdle;
 8005274:	4b02      	ldr	r3, [pc, #8]	; (8005280 <ToplevelInputMenuEntryHandler+0x14>)
 8005276:	2200      	movs	r2, #0
 8005278:	701a      	strb	r2, [r3, #0]
	return Toplevel_Input_Menu_State;
 800527a:	2302      	movs	r3, #2
}
 800527c:	4618      	mov	r0, r3
 800527e:	bd80      	pop	{r7, pc}
 8005280:	200020d2 	.word	0x200020d2

08005284 <ToplevelInputMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelInputMenuInputHandler(eSystemEvent pEvent)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b082      	sub	sp, #8
 8005288:	af00      	add	r7, sp, #0
 800528a:	4603      	mov	r3, r0
 800528c:	71fb      	strb	r3, [r7, #7]
	#ifdef EVENT_MENU_DEBUG
		printf("ToplevelInputMenuInputHandler Event captured\n");
	#endif


		switch(pEvent)
 800528e:	79fb      	ldrb	r3, [r7, #7]
 8005290:	2b01      	cmp	r3, #1
 8005292:	d002      	beq.n	800529a <ToplevelInputMenuInputHandler+0x16>
 8005294:	2b02      	cmp	r3, #2
 8005296:	d003      	beq.n	80052a0 <ToplevelInputMenuInputHandler+0x1c>
				// re-enable the trigger input for new mode
				ToplevelInputMenuInputHandler(evBlueBtn);
				break;

			default:
				break;
 8005298:	e00b      	b.n	80052b2 <ToplevelInputMenuInputHandler+0x2e>
				IT_ArbitrateInputTrigger();
 800529a:	f001 f849 	bl	8006330 <IT_ArbitrateInputTrigger>
				break;
 800529e:	e008      	b.n	80052b2 <ToplevelInputMenuInputHandler+0x2e>
				IT_CycleInputTriggerMode();
 80052a0:	f001 f8fc 	bl	800649c <IT_CycleInputTriggerMode>
				ToplevelInputMenuInputHandler(evBlueBtn);
 80052a4:	2001      	movs	r0, #1
 80052a6:	f7ff ffed 	bl	8005284 <ToplevelInputMenuInputHandler>
				ToplevelInputMenuInputHandler(evBlueBtn);
 80052aa:	2001      	movs	r0, #1
 80052ac:	f7ff ffea 	bl	8005284 <ToplevelInputMenuInputHandler>
				break;
 80052b0:	bf00      	nop
		}
	// stay in this menu state
	eNewEvent = evIdle;
 80052b2:	4b04      	ldr	r3, [pc, #16]	; (80052c4 <ToplevelInputMenuInputHandler+0x40>)
 80052b4:	2200      	movs	r2, #0
 80052b6:	701a      	strb	r2, [r3, #0]
	return Toplevel_Input_Menu_State;
 80052b8:	2302      	movs	r3, #2
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3708      	adds	r7, #8
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop
 80052c4:	200020d2 	.word	0x200020d2

080052c8 <ToplevelInputMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelInputMenuExitHandler()
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("ToplevelInputMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 80052cc:	f7fc fa78 	bl	80017c0 <DM_RefreshScreen>

	// back to main freq menu
	eNewEvent = evIdle;
 80052d0:	4b02      	ldr	r3, [pc, #8]	; (80052dc <ToplevelInputMenuExitHandler+0x14>)
 80052d2:	2200      	movs	r2, #0
 80052d4:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 80052d6:	2300      	movs	r3, #0
}
 80052d8:	4618      	mov	r0, r3
 80052da:	bd80      	pop	{r7, pc}
 80052dc:	200020d2 	.word	0x200020d2

080052e0 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b083      	sub	sp, #12
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 80052e8:	4b07      	ldr	r3, [pc, #28]	; (8005308 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 80052ea:	695a      	ldr	r2, [r3, #20]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	4013      	ands	r3, r2
 80052f0:	687a      	ldr	r2, [r7, #4]
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d101      	bne.n	80052fa <LL_EXTI_IsActiveFlag_0_31+0x1a>
 80052f6:	2301      	movs	r3, #1
 80052f8:	e000      	b.n	80052fc <LL_EXTI_IsActiveFlag_0_31+0x1c>
 80052fa:	2300      	movs	r3, #0
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	370c      	adds	r7, #12
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr
 8005308:	40010400 	.word	0x40010400

0800530c <IM_Init>:
uint16_t encbtn_last_interrupt_time = 0;
uint16_t encpos_last_interrupt_time = 0;


void IM_Init()
{
 800530c:	b480      	push	{r7}
 800530e:	af00      	add	r7, sp, #0
	  // debounce timer
	  DEBOUNCE_TIMER->CR1 |= TIM_CR1_CEN;
 8005310:	4b05      	ldr	r3, [pc, #20]	; (8005328 <IM_Init+0x1c>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a04      	ldr	r2, [pc, #16]	; (8005328 <IM_Init+0x1c>)
 8005316:	f043 0301 	orr.w	r3, r3, #1
 800531a:	6013      	str	r3, [r2, #0]



}
 800531c:	bf00      	nop
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr
 8005326:	bf00      	nop
 8005328:	40014400 	.word	0x40014400

0800532c <IM_SWEEP_UPDATE_TIM_IRQHandler>:
 *	@param None
 *	@retval None
 *
 */
void IM_SWEEP_UPDATE_TIM_IRQHandler()
{
 800532c:	b480      	push	{r7}
 800532e:	af00      	add	r7, sp, #0
	#ifdef ENABLE_PWM_SWEEP
		eOutput_mode tmpOut = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
	#endif	//ENABLE_PWM_SWEEP

		// upcounter (decreasing freq)
	if((SWEEP_TIMER->CR1 & TIM_CR1_DIR) == TIM_CR1_DIR)
 8005330:	4b26      	ldr	r3, [pc, #152]	; (80053cc <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa0>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f003 0310 	and.w	r3, r3, #16
 8005338:	2b10      	cmp	r3, #16
 800533a:	d11c      	bne.n	8005376 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x4a>
	{
		// if we reach lower freq limit for sweep, reset to highest freq limit
		if(OUTPUT_TIMER->ARR >= sweep_upper_bounds_longest_output_arr)
 800533c:	4b24      	ldr	r3, [pc, #144]	; (80053d0 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 800533e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005340:	ee07 3a90 	vmov	s15, r3
 8005344:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005348:	4b22      	ldr	r3, [pc, #136]	; (80053d4 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa8>)
 800534a:	edd3 7a00 	vldr	s15, [r3]
 800534e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005356:	db09      	blt.n	800536c <IM_SWEEP_UPDATE_TIM_IRQHandler+0x40>
		{
			OUTPUT_TIMER->ARR = sweep_lower_bounds_shortest_output_arr;
 8005358:	4b1f      	ldr	r3, [pc, #124]	; (80053d8 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xac>)
 800535a:	edd3 7a00 	vldr	s15, [r3]
 800535e:	4b1c      	ldr	r3, [pc, #112]	; (80053d0 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8005360:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005364:	ee17 2a90 	vmov	r2, s15
 8005368:	62da      	str	r2, [r3, #44]	; 0x2c
			}
		}
	}

	//SWEEP_TIMER->ARR--;
}
 800536a:	e029      	b.n	80053c0 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x94>
			OUTPUT_TIMER->ARR++;
 800536c:	4b18      	ldr	r3, [pc, #96]	; (80053d0 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 800536e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005370:	3201      	adds	r2, #1
 8005372:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005374:	e024      	b.n	80053c0 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x94>
		if(OUTPUT_TIMER->ARR == 0x1U)
 8005376:	4b16      	ldr	r3, [pc, #88]	; (80053d0 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8005378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800537a:	2b01      	cmp	r3, #1
 800537c:	d104      	bne.n	8005388 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x5c>
			OUTPUT_TIMER->ARR = MAX_OUTPUT_ARR;
 800537e:	4b14      	ldr	r3, [pc, #80]	; (80053d0 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8005380:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005384:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005386:	e01b      	b.n	80053c0 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x94>
			if(OUTPUT_TIMER->ARR <= sweep_lower_bounds_shortest_output_arr)
 8005388:	4b11      	ldr	r3, [pc, #68]	; (80053d0 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 800538a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800538c:	ee07 3a90 	vmov	s15, r3
 8005390:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005394:	4b10      	ldr	r3, [pc, #64]	; (80053d8 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xac>)
 8005396:	edd3 7a00 	vldr	s15, [r3]
 800539a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800539e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053a2:	d809      	bhi.n	80053b8 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x8c>
				OUTPUT_TIMER->ARR = sweep_upper_bounds_longest_output_arr;
 80053a4:	4b0b      	ldr	r3, [pc, #44]	; (80053d4 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa8>)
 80053a6:	edd3 7a00 	vldr	s15, [r3]
 80053aa:	4b09      	ldr	r3, [pc, #36]	; (80053d0 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 80053ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053b0:	ee17 2a90 	vmov	r2, s15
 80053b4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80053b6:	e003      	b.n	80053c0 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x94>
				OUTPUT_TIMER->ARR--;
 80053b8:	4b05      	ldr	r3, [pc, #20]	; (80053d0 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 80053ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053bc:	3a01      	subs	r2, #1
 80053be:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80053c0:	bf00      	nop
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr
 80053ca:	bf00      	nop
 80053cc:	40000c00 	.word	0x40000c00
 80053d0:	40013400 	.word	0x40013400
 80053d4:	20000124 	.word	0x20000124
 80053d8:	20000120 	.word	0x20000120

080053dc <IM_BTN1_EXTI14_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN1_EXTI14_Handler()
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b082      	sub	sp, #8
 80053e0:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 80053e2:	4b0f      	ldr	r3, [pc, #60]	; (8005420 <IM_BTN1_EXTI14_Handler+0x44>)
 80053e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e6:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn1_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 80053e8:	88fb      	ldrh	r3, [r7, #6]
 80053ea:	4a0e      	ldr	r2, [pc, #56]	; (8005424 <IM_BTN1_EXTI14_Handler+0x48>)
 80053ec:	8812      	ldrh	r2, [r2, #0]
 80053ee:	1a9b      	subs	r3, r3, r2
 80053f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80053f4:	dd0c      	ble.n	8005410 <IM_BTN1_EXTI14_Handler+0x34>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14))
 80053f6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80053fa:	f7ff ff71 	bl	80052e0 <LL_EXTI_IsActiveFlag_0_31>
 80053fe:	4603      	mov	r3, r0
 8005400:	2b00      	cmp	r3, #0
 8005402:	d005      	beq.n	8005410 <IM_BTN1_EXTI14_Handler+0x34>
		{

			EM_SetNewEvent(evBlueBtn);
 8005404:	2001      	movs	r0, #1
 8005406:	f7ff fb47 	bl	8004a98 <EM_SetNewEvent>
			printf("'Blue' BTN1_EXTI14_Pin\n");
 800540a:	4807      	ldr	r0, [pc, #28]	; (8005428 <IM_BTN1_EXTI14_Handler+0x4c>)
 800540c:	f00c fe54 	bl	80120b8 <puts>
		}
	}
	btn1_last_interrupt_time = interrupt_time;
 8005410:	4a04      	ldr	r2, [pc, #16]	; (8005424 <IM_BTN1_EXTI14_Handler+0x48>)
 8005412:	88fb      	ldrh	r3, [r7, #6]
 8005414:	8013      	strh	r3, [r2, #0]


}
 8005416:	bf00      	nop
 8005418:	3708      	adds	r7, #8
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}
 800541e:	bf00      	nop
 8005420:	40014400 	.word	0x40014400
 8005424:	200020d6 	.word	0x200020d6
 8005428:	08015dec 	.word	0x08015dec

0800542c <IM_BTN2_EXTI15_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN2_EXTI15_Handler()
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b082      	sub	sp, #8
 8005430:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8005432:	4b0f      	ldr	r3, [pc, #60]	; (8005470 <IM_BTN2_EXTI15_Handler+0x44>)
 8005434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005436:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn2_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 8005438:	88fb      	ldrh	r3, [r7, #6]
 800543a:	4a0e      	ldr	r2, [pc, #56]	; (8005474 <IM_BTN2_EXTI15_Handler+0x48>)
 800543c:	8812      	ldrh	r2, [r2, #0]
 800543e:	1a9b      	subs	r3, r3, r2
 8005440:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005444:	dd0c      	ble.n	8005460 <IM_BTN2_EXTI15_Handler+0x34>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15))
 8005446:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800544a:	f7ff ff49 	bl	80052e0 <LL_EXTI_IsActiveFlag_0_31>
 800544e:	4603      	mov	r3, r0
 8005450:	2b00      	cmp	r3, #0
 8005452:	d005      	beq.n	8005460 <IM_BTN2_EXTI15_Handler+0x34>
		{
			EM_SetNewEvent(evYellowBtn);
 8005454:	2003      	movs	r0, #3
 8005456:	f7ff fb1f 	bl	8004a98 <EM_SetNewEvent>
			printf("'Yellow' BTN2_EXTI15_Pin\n");
 800545a:	4807      	ldr	r0, [pc, #28]	; (8005478 <IM_BTN2_EXTI15_Handler+0x4c>)
 800545c:	f00c fe2c 	bl	80120b8 <puts>
		}
	}
	btn2_last_interrupt_time = interrupt_time;
 8005460:	4a04      	ldr	r2, [pc, #16]	; (8005474 <IM_BTN2_EXTI15_Handler+0x48>)
 8005462:	88fb      	ldrh	r3, [r7, #6]
 8005464:	8013      	strh	r3, [r2, #0]


}
 8005466:	bf00      	nop
 8005468:	3708      	adds	r7, #8
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}
 800546e:	bf00      	nop
 8005470:	40014400 	.word	0x40014400
 8005474:	200020d8 	.word	0x200020d8
 8005478:	08015e04 	.word	0x08015e04

0800547c <IM_BTN3_EXTI0_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN3_EXTI0_Handler()
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b082      	sub	sp, #8
 8005480:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8005482:	4b0e      	ldr	r3, [pc, #56]	; (80054bc <IM_BTN3_EXTI0_Handler+0x40>)
 8005484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005486:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn3_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 8005488:	88fb      	ldrh	r3, [r7, #6]
 800548a:	4a0d      	ldr	r2, [pc, #52]	; (80054c0 <IM_BTN3_EXTI0_Handler+0x44>)
 800548c:	8812      	ldrh	r2, [r2, #0]
 800548e:	1a9b      	subs	r3, r3, r2
 8005490:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005494:	dd0b      	ble.n	80054ae <IM_BTN3_EXTI0_Handler+0x32>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0))
 8005496:	2001      	movs	r0, #1
 8005498:	f7ff ff22 	bl	80052e0 <LL_EXTI_IsActiveFlag_0_31>
 800549c:	4603      	mov	r3, r0
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d005      	beq.n	80054ae <IM_BTN3_EXTI0_Handler+0x32>
		{
			EM_SetNewEvent(evRedBtn);
 80054a2:	2004      	movs	r0, #4
 80054a4:	f7ff faf8 	bl	8004a98 <EM_SetNewEvent>
			printf("'Red' BTN3_EXTI0_Pin\n");
 80054a8:	4806      	ldr	r0, [pc, #24]	; (80054c4 <IM_BTN3_EXTI0_Handler+0x48>)
 80054aa:	f00c fe05 	bl	80120b8 <puts>
		}
	}
	btn3_last_interrupt_time = interrupt_time;
 80054ae:	4a04      	ldr	r2, [pc, #16]	; (80054c0 <IM_BTN3_EXTI0_Handler+0x44>)
 80054b0:	88fb      	ldrh	r3, [r7, #6]
 80054b2:	8013      	strh	r3, [r2, #0]


}
 80054b4:	bf00      	nop
 80054b6:	3708      	adds	r7, #8
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}
 80054bc:	40014400 	.word	0x40014400
 80054c0:	200020da 	.word	0x200020da
 80054c4:	08015e20 	.word	0x08015e20

080054c8 <IM_BTN4_EXTI1_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN4_EXTI1_Handler()
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b082      	sub	sp, #8
 80054cc:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 80054ce:	4b0e      	ldr	r3, [pc, #56]	; (8005508 <IM_BTN4_EXTI1_Handler+0x40>)
 80054d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d2:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn4_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 80054d4:	88fb      	ldrh	r3, [r7, #6]
 80054d6:	4a0d      	ldr	r2, [pc, #52]	; (800550c <IM_BTN4_EXTI1_Handler+0x44>)
 80054d8:	8812      	ldrh	r2, [r2, #0]
 80054da:	1a9b      	subs	r3, r3, r2
 80054dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80054e0:	dd0b      	ble.n	80054fa <IM_BTN4_EXTI1_Handler+0x32>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1))
 80054e2:	2002      	movs	r0, #2
 80054e4:	f7ff fefc 	bl	80052e0 <LL_EXTI_IsActiveFlag_0_31>
 80054e8:	4603      	mov	r3, r0
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d005      	beq.n	80054fa <IM_BTN4_EXTI1_Handler+0x32>
		{
			EM_SetNewEvent(evGreenBtn);
 80054ee:	2002      	movs	r0, #2
 80054f0:	f7ff fad2 	bl	8004a98 <EM_SetNewEvent>
			printf("'Green' BTN4_EXTI1_Pin\n");
 80054f4:	4806      	ldr	r0, [pc, #24]	; (8005510 <IM_BTN4_EXTI1_Handler+0x48>)
 80054f6:	f00c fddf 	bl	80120b8 <puts>
		}
	}
	btn4_last_interrupt_time = interrupt_time;
 80054fa:	4a04      	ldr	r2, [pc, #16]	; (800550c <IM_BTN4_EXTI1_Handler+0x44>)
 80054fc:	88fb      	ldrh	r3, [r7, #6]
 80054fe:	8013      	strh	r3, [r2, #0]


}
 8005500:	bf00      	nop
 8005502:	3708      	adds	r7, #8
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}
 8005508:	40014400 	.word	0x40014400
 800550c:	200020dc 	.word	0x200020dc
 8005510:	08015e38 	.word	0x08015e38

08005514 <IM_ENC_EXTI2_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_ENC_EXTI2_Handler()
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b082      	sub	sp, #8
 8005518:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 800551a:	4b0e      	ldr	r3, [pc, #56]	; (8005554 <IM_ENC_EXTI2_Handler+0x40>)
 800551c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551e:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - encbtn_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 8005520:	88fb      	ldrh	r3, [r7, #6]
 8005522:	4a0d      	ldr	r2, [pc, #52]	; (8005558 <IM_ENC_EXTI2_Handler+0x44>)
 8005524:	8812      	ldrh	r2, [r2, #0]
 8005526:	1a9b      	subs	r3, r3, r2
 8005528:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800552c:	dd0b      	ble.n	8005546 <IM_ENC_EXTI2_Handler+0x32>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2))
 800552e:	2004      	movs	r0, #4
 8005530:	f7ff fed6 	bl	80052e0 <LL_EXTI_IsActiveFlag_0_31>
 8005534:	4603      	mov	r3, r0
 8005536:	2b00      	cmp	r3, #0
 8005538:	d005      	beq.n	8005546 <IM_ENC_EXTI2_Handler+0x32>
		{
			EM_SetNewEvent(evEncoderPush);
 800553a:	2006      	movs	r0, #6
 800553c:	f7ff faac 	bl	8004a98 <EM_SetNewEvent>
			printf("'EncoderPush' ENC_EXTI2_Pin\n");
 8005540:	4806      	ldr	r0, [pc, #24]	; (800555c <IM_ENC_EXTI2_Handler+0x48>)
 8005542:	f00c fdb9 	bl	80120b8 <puts>
		}
	}
	encbtn_last_interrupt_time = interrupt_time;
 8005546:	4a04      	ldr	r2, [pc, #16]	; (8005558 <IM_ENC_EXTI2_Handler+0x44>)
 8005548:	88fb      	ldrh	r3, [r7, #6]
 800554a:	8013      	strh	r3, [r2, #0]


}
 800554c:	bf00      	nop
 800554e:	3708      	adds	r7, #8
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}
 8005554:	40014400 	.word	0x40014400
 8005558:	200020de 	.word	0x200020de
 800555c:	08015e50 	.word	0x08015e50

08005560 <IM_ENC_DIRF_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_ENC_DIRF_Handler()
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b082      	sub	sp, #8
 8005564:	af00      	add	r7, sp, #0

	if((TIM1->SR & TIM_SR_DIRF) == TIM_SR_DIRF)
 8005566:	4b11      	ldr	r3, [pc, #68]	; (80055ac <IM_ENC_DIRF_Handler+0x4c>)
 8005568:	691b      	ldr	r3, [r3, #16]
 800556a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800556e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005572:	d117      	bne.n	80055a4 <IM_ENC_DIRF_Handler+0x44>
	{
		uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8005574:	4b0e      	ldr	r3, [pc, #56]	; (80055b0 <IM_ENC_DIRF_Handler+0x50>)
 8005576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005578:	80fb      	strh	r3, [r7, #6]
		if ((interrupt_time - encpos_last_interrupt_time) > 0)
 800557a:	88fb      	ldrh	r3, [r7, #6]
 800557c:	4a0d      	ldr	r2, [pc, #52]	; (80055b4 <IM_ENC_DIRF_Handler+0x54>)
 800557e:	8812      	ldrh	r2, [r2, #0]
 8005580:	1a9b      	subs	r3, r3, r2
 8005582:	2b00      	cmp	r3, #0
 8005584:	dd0b      	ble.n	800559e <IM_ENC_DIRF_Handler+0x3e>
		{
			EM_SetNewEvent(evEncoderSet);
 8005586:	2005      	movs	r0, #5
 8005588:	f7ff fa86 	bl	8004a98 <EM_SetNewEvent>
			printf("Encoder new direction\n");
 800558c:	480a      	ldr	r0, [pc, #40]	; (80055b8 <IM_ENC_DIRF_Handler+0x58>)
 800558e:	f00c fd93 	bl	80120b8 <puts>
			TIM1->SR &= ~(TIM_SR_DIRF);
 8005592:	4b06      	ldr	r3, [pc, #24]	; (80055ac <IM_ENC_DIRF_Handler+0x4c>)
 8005594:	691b      	ldr	r3, [r3, #16]
 8005596:	4a05      	ldr	r2, [pc, #20]	; (80055ac <IM_ENC_DIRF_Handler+0x4c>)
 8005598:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800559c:	6113      	str	r3, [r2, #16]
		}
		encpos_last_interrupt_time = interrupt_time;
 800559e:	4a05      	ldr	r2, [pc, #20]	; (80055b4 <IM_ENC_DIRF_Handler+0x54>)
 80055a0:	88fb      	ldrh	r3, [r7, #6]
 80055a2:	8013      	strh	r3, [r2, #0]


	}


}
 80055a4:	bf00      	nop
 80055a6:	3708      	adds	r7, #8
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}
 80055ac:	40012c00 	.word	0x40012c00
 80055b0:	40014400 	.word	0x40014400
 80055b4:	200020e0 	.word	0x200020e0
 80055b8:	08015e6c 	.word	0x08015e6c

080055bc <BO_GetBiasPolarity>:
 *	@param None
 *	@retval None
 *
 */
eBias_Polarity BO_GetBiasPolarity()
{
 80055bc:	b480      	push	{r7}
 80055be:	af00      	add	r7, sp, #0
	return eBiasPolarity;
 80055c0:	4b03      	ldr	r3, [pc, #12]	; (80055d0 <BO_GetBiasPolarity+0x14>)
 80055c2:	781b      	ldrb	r3, [r3, #0]
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr
 80055ce:	bf00      	nop
 80055d0:	20000001 	.word	0x20000001

080055d4 <BO_GetDcBiasEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
uint16_t BO_GetDcBiasEncoderValue()
{
 80055d4:	b480      	push	{r7}
 80055d6:	af00      	add	r7, sp, #0
	return dc_bias_encoder_value;
 80055d8:	4b03      	ldr	r3, [pc, #12]	; (80055e8 <BO_GetDcBiasEncoderValue+0x14>)
 80055da:	881b      	ldrh	r3, [r3, #0]
}
 80055dc:	4618      	mov	r0, r3
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr
 80055e6:	bf00      	nop
 80055e8:	20000002 	.word	0x20000002

080055ec <BO_MapEncoderPositionToSignalOutput>:
 *	@param None
 *	@retval None
 *
 */
void BO_MapEncoderPositionToSignalOutput(uint16_t pEncoderValue)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b082      	sub	sp, #8
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	4603      	mov	r3, r0
 80055f4:	80fb      	strh	r3, [r7, #6]
	// pEncoderValue is reversed for correct rotary encoder operation.
	// However, we want to retain the forward direction value to prevent polarity flip!
	dc_bias_encoder_value = SM_GetEncoderValue(ENCODER_NORMAL);
 80055f6:	2000      	movs	r0, #0
 80055f8:	f001 fc54 	bl	8006ea4 <SM_GetEncoderValue>
 80055fc:	4603      	mov	r3, r0
 80055fe:	461a      	mov	r2, r3
 8005600:	4b1b      	ldr	r3, [pc, #108]	; (8005670 <BO_MapEncoderPositionToSignalOutput+0x84>)
 8005602:	801a      	strh	r2, [r3, #0]

	// apply negative dc bias
	if(pEncoderValue < BIAS_CENTER) {
 8005604:	88fb      	ldrh	r3, [r7, #6]
 8005606:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800560a:	d214      	bcs.n	8005636 <BO_MapEncoderPositionToSignalOutput+0x4a>

		eBiasPolarity = INVERSEBIAS;
 800560c:	4b19      	ldr	r3, [pc, #100]	; (8005674 <BO_MapEncoderPositionToSignalOutput+0x88>)
 800560e:	2200      	movs	r2, #0
 8005610:	701a      	strb	r2, [r3, #0]


		HAL_DAC_SetValue(	&hdac1,
							DAC1_CHANNEL_2,
							DAC_ALIGN_12B_R,
							((BIAS_CENTER - pEncoderValue) * BIAS_MAG));
 8005612:	88fb      	ldrh	r3, [r7, #6]
 8005614:	f5c3 72c8 	rsb	r2, r3, #400	; 0x190
 8005618:	4613      	mov	r3, r2
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	4413      	add	r3, r2
 800561e:	005b      	lsls	r3, r3, #1
		HAL_DAC_SetValue(	&hdac1,
 8005620:	2200      	movs	r2, #0
 8005622:	2110      	movs	r1, #16
 8005624:	4814      	ldr	r0, [pc, #80]	; (8005678 <BO_MapEncoderPositionToSignalOutput+0x8c>)
 8005626:	f005 ffcb 	bl	800b5c0 <HAL_DAC_SetValue>

		HAL_GPIO_WritePin(	OFFSET_ENABLE_GPIO_Port,
 800562a:	2201      	movs	r2, #1
 800562c:	2108      	movs	r1, #8
 800562e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005632:	f006 ffed 	bl	800c610 <HAL_GPIO_WritePin>
							OFFSET_ENABLE_Pin,
							GPIO_PIN_SET);
	}
	// apply positive dc bias
	if(pEncoderValue >= BIAS_CENTER) {
 8005636:	88fb      	ldrh	r3, [r7, #6]
 8005638:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800563c:	d314      	bcc.n	8005668 <BO_MapEncoderPositionToSignalOutput+0x7c>

		eBiasPolarity = NORMALBIAS;
 800563e:	4b0d      	ldr	r3, [pc, #52]	; (8005674 <BO_MapEncoderPositionToSignalOutput+0x88>)
 8005640:	2201      	movs	r2, #1
 8005642:	701a      	strb	r2, [r3, #0]
		//TIM1->CNT = pEncoderValue;

		HAL_DAC_SetValue(	&hdac1,
							DAC1_CHANNEL_2,
							DAC_ALIGN_12B_R,
							((pEncoderValue - BIAS_CENTER) * BIAS_MAG));
 8005644:	88fb      	ldrh	r3, [r7, #6]
 8005646:	f5a3 72c8 	sub.w	r2, r3, #400	; 0x190
 800564a:	4613      	mov	r3, r2
 800564c:	009b      	lsls	r3, r3, #2
 800564e:	4413      	add	r3, r2
 8005650:	005b      	lsls	r3, r3, #1
		HAL_DAC_SetValue(	&hdac1,
 8005652:	2200      	movs	r2, #0
 8005654:	2110      	movs	r1, #16
 8005656:	4808      	ldr	r0, [pc, #32]	; (8005678 <BO_MapEncoderPositionToSignalOutput+0x8c>)
 8005658:	f005 ffb2 	bl	800b5c0 <HAL_DAC_SetValue>

		HAL_GPIO_WritePin(	OFFSET_ENABLE_GPIO_Port,
 800565c:	2200      	movs	r2, #0
 800565e:	2108      	movs	r1, #8
 8005660:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005664:	f006 ffd4 	bl	800c610 <HAL_GPIO_WritePin>
							OFFSET_ENABLE_Pin,
							GPIO_PIN_RESET);
	}
}
 8005668:	bf00      	nop
 800566a:	3708      	adds	r7, #8
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}
 8005670:	20000002 	.word	0x20000002
 8005674:	20000001 	.word	0x20000001
 8005678:	2000292c 	.word	0x2000292c

0800567c <BO_GetOutputBias>:
 *	@param None
 *	@retval None
 *
 */
uint32_t BO_GetOutputBias()
{
 800567c:	b580      	push	{r7, lr}
 800567e:	af00      	add	r7, sp, #0
	return HAL_DAC_GetValue(&hdac1, DAC1_CHANNEL_2);
 8005680:	2110      	movs	r1, #16
 8005682:	4803      	ldr	r0, [pc, #12]	; (8005690 <BO_GetOutputBias+0x14>)
 8005684:	f005 ffe2 	bl	800b64c <HAL_DAC_GetValue>
 8005688:	4603      	mov	r3, r0
}
 800568a:	4618      	mov	r0, r3
 800568c:	bd80      	pop	{r7, pc}
 800568e:	bf00      	nop
 8005690:	2000292c 	.word	0x2000292c

08005694 <FreqO_InitFreqProfiles>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_InitFreqProfiles()
{
 8005694:	b480      	push	{r7}
 8005696:	b083      	sub	sp, #12
 8005698:	af00      	add	r7, sp, #0
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++)
 800569a:	2300      	movs	r3, #0
 800569c:	607b      	str	r3, [r7, #4]
 800569e:	e06b      	b.n	8005778 <FreqO_InitFreqProfiles+0xe4>
	{
		// prevent divide by zero (prescaler)
		if(theFreqProfiles[i].psc == 0)
 80056a0:	493a      	ldr	r1, [pc, #232]	; (800578c <FreqO_InitFreqProfiles+0xf8>)
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	4613      	mov	r3, r2
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	4413      	add	r3, r2
 80056aa:	009b      	lsls	r3, r3, #2
 80056ac:	440b      	add	r3, r1
 80056ae:	3308      	adds	r3, #8
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d129      	bne.n	800570a <FreqO_InitFreqProfiles+0x76>
			theFreqProfiles[i].arr = ((SM_MCLK / theFreqProfiles[i].hertz) / SM_FSAMP) * theFreqProfiles[i].error;
 80056b6:	4935      	ldr	r1, [pc, #212]	; (800578c <FreqO_InitFreqProfiles+0xf8>)
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	4613      	mov	r3, r2
 80056bc:	009b      	lsls	r3, r3, #2
 80056be:	4413      	add	r3, r2
 80056c0:	009b      	lsls	r3, r3, #2
 80056c2:	440b      	add	r3, r1
 80056c4:	3304      	adds	r3, #4
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a31      	ldr	r2, [pc, #196]	; (8005790 <FreqO_InitFreqProfiles+0xfc>)
 80056ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80056ce:	ee07 3a90 	vmov	s15, r3
 80056d2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80056d6:	492d      	ldr	r1, [pc, #180]	; (800578c <FreqO_InitFreqProfiles+0xf8>)
 80056d8:	687a      	ldr	r2, [r7, #4]
 80056da:	4613      	mov	r3, r2
 80056dc:	009b      	lsls	r3, r3, #2
 80056de:	4413      	add	r3, r2
 80056e0:	009b      	lsls	r3, r3, #2
 80056e2:	440b      	add	r3, r1
 80056e4:	3310      	adds	r3, #16
 80056e6:	edd3 7a00 	vldr	s15, [r3]
 80056ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056f2:	ee17 0a90 	vmov	r0, s15
 80056f6:	4925      	ldr	r1, [pc, #148]	; (800578c <FreqO_InitFreqProfiles+0xf8>)
 80056f8:	687a      	ldr	r2, [r7, #4]
 80056fa:	4613      	mov	r3, r2
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	4413      	add	r3, r2
 8005700:	009b      	lsls	r3, r3, #2
 8005702:	440b      	add	r3, r1
 8005704:	330c      	adds	r3, #12
 8005706:	6018      	str	r0, [r3, #0]
 8005708:	e033      	b.n	8005772 <FreqO_InitFreqProfiles+0xde>
		else
			theFreqProfiles[i].arr = (((SM_MCLK / theFreqProfiles[i].hertz) / theFreqProfiles[i].psc) / SM_FSAMP) * theFreqProfiles[i].error;
 800570a:	4920      	ldr	r1, [pc, #128]	; (800578c <FreqO_InitFreqProfiles+0xf8>)
 800570c:	687a      	ldr	r2, [r7, #4]
 800570e:	4613      	mov	r3, r2
 8005710:	009b      	lsls	r3, r3, #2
 8005712:	4413      	add	r3, r2
 8005714:	009b      	lsls	r3, r3, #2
 8005716:	440b      	add	r3, r1
 8005718:	3304      	adds	r3, #4
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a1c      	ldr	r2, [pc, #112]	; (8005790 <FreqO_InitFreqProfiles+0xfc>)
 800571e:	fbb2 f1f3 	udiv	r1, r2, r3
 8005722:	481a      	ldr	r0, [pc, #104]	; (800578c <FreqO_InitFreqProfiles+0xf8>)
 8005724:	687a      	ldr	r2, [r7, #4]
 8005726:	4613      	mov	r3, r2
 8005728:	009b      	lsls	r3, r3, #2
 800572a:	4413      	add	r3, r2
 800572c:	009b      	lsls	r3, r3, #2
 800572e:	4403      	add	r3, r0
 8005730:	3308      	adds	r3, #8
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	fbb1 f3f3 	udiv	r3, r1, r3
 8005738:	ee07 3a90 	vmov	s15, r3
 800573c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005740:	4912      	ldr	r1, [pc, #72]	; (800578c <FreqO_InitFreqProfiles+0xf8>)
 8005742:	687a      	ldr	r2, [r7, #4]
 8005744:	4613      	mov	r3, r2
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	4413      	add	r3, r2
 800574a:	009b      	lsls	r3, r3, #2
 800574c:	440b      	add	r3, r1
 800574e:	3310      	adds	r3, #16
 8005750:	edd3 7a00 	vldr	s15, [r3]
 8005754:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005758:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800575c:	ee17 0a90 	vmov	r0, s15
 8005760:	490a      	ldr	r1, [pc, #40]	; (800578c <FreqO_InitFreqProfiles+0xf8>)
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	4613      	mov	r3, r2
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	4413      	add	r3, r2
 800576a:	009b      	lsls	r3, r3, #2
 800576c:	440b      	add	r3, r1
 800576e:	330c      	adds	r3, #12
 8005770:	6018      	str	r0, [r3, #0]
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	3301      	adds	r3, #1
 8005776:	607b      	str	r3, [r7, #4]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2b0d      	cmp	r3, #13
 800577c:	dd90      	ble.n	80056a0 <FreqO_InitFreqProfiles+0xc>
	}
}
 800577e:	bf00      	nop
 8005780:	370c      	adds	r7, #12
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr
 800578a:	bf00      	nop
 800578c:	20000004 	.word	0x20000004
 8005790:	00155cc0 	.word	0x00155cc0

08005794 <FreqO_MapEncoderPositionCoarse>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_MapEncoderPositionCoarse(uint16_t pEncValue)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b084      	sub	sp, #16
 8005798:	af00      	add	r7, sp, #0
 800579a:	4603      	mov	r3, r0
 800579c:	80fb      	strh	r3, [r7, #6]

	uint32_t tmpFreqIndex = freq_profile->index;
 800579e:	4b1b      	ldr	r3, [pc, #108]	; (800580c <FreqO_MapEncoderPositionCoarse+0x78>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	781b      	ldrb	r3, [r3, #0]
 80057a4:	60fb      	str	r3, [r7, #12]
	if(pEncValue > freq_last_encoder_value)
 80057a6:	4b1a      	ldr	r3, [pc, #104]	; (8005810 <FreqO_MapEncoderPositionCoarse+0x7c>)
 80057a8:	881b      	ldrh	r3, [r3, #0]
 80057aa:	88fa      	ldrh	r2, [r7, #6]
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d910      	bls.n	80057d2 <FreqO_MapEncoderPositionCoarse+0x3e>
	{
		tmpFreqIndex++;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	3301      	adds	r3, #1
 80057b4:	60fb      	str	r3, [r7, #12]
		if(tmpFreqIndex > MAX_NUM_FREQ_PRESETS-1) tmpFreqIndex = MAX_NUM_FREQ_PRESETS-1;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2b0d      	cmp	r3, #13
 80057ba:	d901      	bls.n	80057c0 <FreqO_MapEncoderPositionCoarse+0x2c>
 80057bc:	230d      	movs	r3, #13
 80057be:	60fb      	str	r3, [r7, #12]
		FreqO_ApplyProfile( FreqO_GetProfileByIndex(tmpFreqIndex)->hertz );
 80057c0:	68f8      	ldr	r0, [r7, #12]
 80057c2:	f000 f945 	bl	8005a50 <FreqO_GetProfileByIndex>
 80057c6:	4603      	mov	r3, r0
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	4618      	mov	r0, r3
 80057cc:	f000 f872 	bl	80058b4 <FreqO_ApplyProfile>
 80057d0:	e014      	b.n	80057fc <FreqO_MapEncoderPositionCoarse+0x68>
	}
	else if (pEncValue < freq_last_encoder_value)
 80057d2:	4b0f      	ldr	r3, [pc, #60]	; (8005810 <FreqO_MapEncoderPositionCoarse+0x7c>)
 80057d4:	881b      	ldrh	r3, [r3, #0]
 80057d6:	88fa      	ldrh	r2, [r7, #6]
 80057d8:	429a      	cmp	r2, r3
 80057da:	d20f      	bcs.n	80057fc <FreqO_MapEncoderPositionCoarse+0x68>
	{
		tmpFreqIndex--;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	3b01      	subs	r3, #1
 80057e0:	60fb      	str	r3, [r7, #12]
		if(tmpFreqIndex > MAX_NUM_FREQ_PRESETS-1) tmpFreqIndex = 0;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2b0d      	cmp	r3, #13
 80057e6:	d901      	bls.n	80057ec <FreqO_MapEncoderPositionCoarse+0x58>
 80057e8:	2300      	movs	r3, #0
 80057ea:	60fb      	str	r3, [r7, #12]
		FreqO_ApplyProfile( FreqO_GetProfileByIndex(tmpFreqIndex)->hertz );
 80057ec:	68f8      	ldr	r0, [r7, #12]
 80057ee:	f000 f92f 	bl	8005a50 <FreqO_GetProfileByIndex>
 80057f2:	4603      	mov	r3, r0
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	4618      	mov	r0, r3
 80057f8:	f000 f85c 	bl	80058b4 <FreqO_ApplyProfile>
	}
	freq_last_encoder_value = pEncValue;
 80057fc:	4a04      	ldr	r2, [pc, #16]	; (8005810 <FreqO_MapEncoderPositionCoarse+0x7c>)
 80057fe:	88fb      	ldrh	r3, [r7, #6]
 8005800:	8013      	strh	r3, [r2, #0]

}
 8005802:	bf00      	nop
 8005804:	3710      	adds	r7, #16
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}
 800580a:	bf00      	nop
 800580c:	2000011c 	.word	0x2000011c
 8005810:	200020e2 	.word	0x200020e2

08005814 <FreqO_MapEncoderPositionFine>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_MapEncoderPositionFine(uint16_t pEncValue)
{
 8005814:	b480      	push	{r7}
 8005816:	b083      	sub	sp, #12
 8005818:	af00      	add	r7, sp, #0
 800581a:	4603      	mov	r3, r0
 800581c:	80fb      	strh	r3, [r7, #6]

//	uint32_t tmpFreqIndex = freq_profile->index;
	if(pEncValue > freq_last_encoder_value)
 800581e:	4b0e      	ldr	r3, [pc, #56]	; (8005858 <FreqO_MapEncoderPositionFine+0x44>)
 8005820:	881b      	ldrh	r3, [r3, #0]
 8005822:	88fa      	ldrh	r2, [r7, #6]
 8005824:	429a      	cmp	r2, r3
 8005826:	d904      	bls.n	8005832 <FreqO_MapEncoderPositionFine+0x1e>
	{
		OUTPUT_TIMER->ARR++;
 8005828:	4b0c      	ldr	r3, [pc, #48]	; (800585c <FreqO_MapEncoderPositionFine+0x48>)
 800582a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800582c:	3201      	adds	r2, #1
 800582e:	62da      	str	r2, [r3, #44]	; 0x2c
 8005830:	e008      	b.n	8005844 <FreqO_MapEncoderPositionFine+0x30>
//		tmpFreqIndex++;
//		if(tmpFreqIndex > MAX_NUM_FREQ_PRESETS-1) tmpFreqIndex = MAX_NUM_FREQ_PRESETS-1;
//		FreqO_ApplyProfile( FreqO_GetProfileByIndex(tmpFreqIndex)->hertz );
	}
	else if (pEncValue < freq_last_encoder_value)
 8005832:	4b09      	ldr	r3, [pc, #36]	; (8005858 <FreqO_MapEncoderPositionFine+0x44>)
 8005834:	881b      	ldrh	r3, [r3, #0]
 8005836:	88fa      	ldrh	r2, [r7, #6]
 8005838:	429a      	cmp	r2, r3
 800583a:	d203      	bcs.n	8005844 <FreqO_MapEncoderPositionFine+0x30>
	{
		OUTPUT_TIMER->ARR--;
 800583c:	4b07      	ldr	r3, [pc, #28]	; (800585c <FreqO_MapEncoderPositionFine+0x48>)
 800583e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005840:	3a01      	subs	r2, #1
 8005842:	62da      	str	r2, [r3, #44]	; 0x2c
//		tmpFreqIndex--;
//		if(tmpFreqIndex > MAX_NUM_FREQ_PRESETS-1) tmpFreqIndex = 0;
//		FreqO_ApplyProfile( FreqO_GetProfileByIndex(tmpFreqIndex)->hertz );
	}
	freq_last_encoder_value = pEncValue;
 8005844:	4a04      	ldr	r2, [pc, #16]	; (8005858 <FreqO_MapEncoderPositionFine+0x44>)
 8005846:	88fb      	ldrh	r3, [r7, #6]
 8005848:	8013      	strh	r3, [r2, #0]

}
 800584a:	bf00      	nop
 800584c:	370c      	adds	r7, #12
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr
 8005856:	bf00      	nop
 8005858:	200020e2 	.word	0x200020e2
 800585c:	40013400 	.word	0x40013400

08005860 <FreqO_MapEncoderPositionToPrescaler>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_MapEncoderPositionToPrescaler(uint16_t pEncValue)
{
 8005860:	b480      	push	{r7}
 8005862:	b083      	sub	sp, #12
 8005864:	af00      	add	r7, sp, #0
 8005866:	4603      	mov	r3, r0
 8005868:	80fb      	strh	r3, [r7, #6]

//	uint32_t tmpFreqIndex = freq_profile->index;
	if(pEncValue > freq_last_encoder_value)
 800586a:	4b10      	ldr	r3, [pc, #64]	; (80058ac <FreqO_MapEncoderPositionToPrescaler+0x4c>)
 800586c:	881b      	ldrh	r3, [r3, #0]
 800586e:	88fa      	ldrh	r2, [r7, #6]
 8005870:	429a      	cmp	r2, r3
 8005872:	d904      	bls.n	800587e <FreqO_MapEncoderPositionToPrescaler+0x1e>
	{
		OUTPUT_TIMER->PSC++;
 8005874:	4b0e      	ldr	r3, [pc, #56]	; (80058b0 <FreqO_MapEncoderPositionToPrescaler+0x50>)
 8005876:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005878:	3201      	adds	r2, #1
 800587a:	629a      	str	r2, [r3, #40]	; 0x28
 800587c:	e00c      	b.n	8005898 <FreqO_MapEncoderPositionToPrescaler+0x38>

	}
	else if (pEncValue < freq_last_encoder_value)
 800587e:	4b0b      	ldr	r3, [pc, #44]	; (80058ac <FreqO_MapEncoderPositionToPrescaler+0x4c>)
 8005880:	881b      	ldrh	r3, [r3, #0]
 8005882:	88fa      	ldrh	r2, [r7, #6]
 8005884:	429a      	cmp	r2, r3
 8005886:	d207      	bcs.n	8005898 <FreqO_MapEncoderPositionToPrescaler+0x38>
	{
		if(OUTPUT_TIMER->PSC > 0)
 8005888:	4b09      	ldr	r3, [pc, #36]	; (80058b0 <FreqO_MapEncoderPositionToPrescaler+0x50>)
 800588a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800588c:	2b00      	cmp	r3, #0
 800588e:	d003      	beq.n	8005898 <FreqO_MapEncoderPositionToPrescaler+0x38>
			OUTPUT_TIMER->PSC--;
 8005890:	4b07      	ldr	r3, [pc, #28]	; (80058b0 <FreqO_MapEncoderPositionToPrescaler+0x50>)
 8005892:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005894:	3a01      	subs	r2, #1
 8005896:	629a      	str	r2, [r3, #40]	; 0x28
//		tmpFreqIndex--;
//		if(tmpFreqIndex > MAX_NUM_FREQ_PRESETS-1) tmpFreqIndex = 0;
//		FreqO_ApplyProfile( FreqO_GetProfileByIndex(tmpFreqIndex)->hertz );
	}
	freq_last_encoder_value = pEncValue;
 8005898:	4a04      	ldr	r2, [pc, #16]	; (80058ac <FreqO_MapEncoderPositionToPrescaler+0x4c>)
 800589a:	88fb      	ldrh	r3, [r7, #6]
 800589c:	8013      	strh	r3, [r2, #0]

}
 800589e:	bf00      	nop
 80058a0:	370c      	adds	r7, #12
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr
 80058aa:	bf00      	nop
 80058ac:	200020e2 	.word	0x200020e2
 80058b0:	40013400 	.word	0x40013400

080058b4 <FreqO_ApplyProfile>:
 *	@retval None
 *
 */

void FreqO_ApplyProfile(eFreqSettings_t pPresetEnum)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b084      	sub	sp, #16
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
//	DacTimeReg_t* tmpDT = DT_GetRegisterByEnum(pPresetEnum);
	FreqProfile_t* tmpFreqProfile = FreqO_FindFPresetObject(pPresetEnum);
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f000 f899 	bl	80059f4 <FreqO_FindFPresetObject>
 80058c2:	60f8      	str	r0, [r7, #12]
	if(tmpFreqProfile)
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d024      	beq.n	8005914 <FreqO_ApplyProfile+0x60>
	{

		OUTPUT_TIMER->PSC = tmpFreqProfile->psc;
 80058ca:	4a16      	ldr	r2, [pc, #88]	; (8005924 <FreqO_ApplyProfile+0x70>)
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	6293      	str	r3, [r2, #40]	; 0x28
		OUTPUT_TIMER->ARR = tmpFreqProfile->arr;
 80058d2:	4a14      	ldr	r2, [pc, #80]	; (8005924 <FreqO_ApplyProfile+0x70>)
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	62d3      	str	r3, [r2, #44]	; 0x2c

		eOutput_mode tmpOut = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 80058da:	2001      	movs	r0, #1
 80058dc:	f001 f866 	bl	80069ac <SM_GetOutputChannel>
 80058e0:	4603      	mov	r3, r0
 80058e2:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	72fb      	strb	r3, [r7, #11]
		if(tmpOut == PWM_FUNC_MODE)
 80058ea:	7afb      	ldrb	r3, [r7, #11]
 80058ec:	2b06      	cmp	r3, #6
 80058ee:	d10d      	bne.n	800590c <FreqO_ApplyProfile+0x58>
		{
			// duty cycle of PWM require slower settings to get the
			// same frequency as normal output functions
			PWM_AUX_OUT_TIM->PSC = 256;
 80058f0:	4b0d      	ldr	r3, [pc, #52]	; (8005928 <FreqO_ApplyProfile+0x74>)
 80058f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80058f6:	629a      	str	r2, [r3, #40]	; 0x28
			PWM_AUX_OUT_TIM->ARR = tmpFreqProfile->arr/2;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	4a0a      	ldr	r2, [pc, #40]	; (8005928 <FreqO_ApplyProfile+0x74>)
 80058fe:	085b      	lsrs	r3, r3, #1
 8005900:	62d3      	str	r3, [r2, #44]	; 0x2c
			PWM_AUX_OUT_TIM->CCR1 = PWM_AUX_OUT_TIM->ARR/2;
 8005902:	4b09      	ldr	r3, [pc, #36]	; (8005928 <FreqO_ApplyProfile+0x74>)
 8005904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005906:	4a08      	ldr	r2, [pc, #32]	; (8005928 <FreqO_ApplyProfile+0x74>)
 8005908:	085b      	lsrs	r3, r3, #1
 800590a:	6353      	str	r3, [r2, #52]	; 0x34
		}

		freq_profile = tmpFreqProfile;
 800590c:	4a07      	ldr	r2, [pc, #28]	; (800592c <FreqO_ApplyProfile+0x78>)
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	6013      	str	r3, [r2, #0]
	}
	else
	{
		DM_SetErrorDebugMsg("FreqO_ApplyProfile() null pointer error");
	}
}
 8005912:	e002      	b.n	800591a <FreqO_ApplyProfile+0x66>
		DM_SetErrorDebugMsg("FreqO_ApplyProfile() null pointer error");
 8005914:	4806      	ldr	r0, [pc, #24]	; (8005930 <FreqO_ApplyProfile+0x7c>)
 8005916:	f7fb ff99 	bl	800184c <DM_SetErrorDebugMsg>
}
 800591a:	bf00      	nop
 800591c:	3710      	adds	r7, #16
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}
 8005922:	bf00      	nop
 8005924:	40013400 	.word	0x40013400
 8005928:	40000400 	.word	0x40000400
 800592c:	2000011c 	.word	0x2000011c
 8005930:	08015e84 	.word	0x08015e84

08005934 <FreqO_AdjustFreq>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_AdjustFreq()
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b082      	sub	sp, #8
 8005938:	af00      	add	r7, sp, #0
	FreqO_MapEncoderPositionFine(SM_GetEncoderValue(ENCODER_NORMAL));
 800593a:	2000      	movs	r0, #0
 800593c:	f001 fab2 	bl	8006ea4 <SM_GetEncoderValue>
 8005940:	4603      	mov	r3, r0
 8005942:	4618      	mov	r0, r3
 8005944:	f7ff ff66 	bl	8005814 <FreqO_MapEncoderPositionFine>


	eOutput_mode tmpOut = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 8005948:	2001      	movs	r0, #1
 800594a:	f001 f82f 	bl	80069ac <SM_GetOutputChannel>
 800594e:	4603      	mov	r3, r0
 8005950:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8005954:	781b      	ldrb	r3, [r3, #0]
 8005956:	71fb      	strb	r3, [r7, #7]
	if(tmpOut == PWM_FUNC_MODE)
 8005958:	79fb      	ldrb	r3, [r7, #7]
 800595a:	2b06      	cmp	r3, #6
 800595c:	d110      	bne.n	8005980 <FreqO_AdjustFreq+0x4c>
	{
		// duty cycle of PWM require slower settings to get the
		// same frequency as normal output functions
		PWM_AUX_OUT_TIM->PSC = 256;
 800595e:	4b0a      	ldr	r3, [pc, #40]	; (8005988 <FreqO_AdjustFreq+0x54>)
 8005960:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005964:	629a      	str	r2, [r3, #40]	; 0x28
		PWM_AUX_OUT_TIM->ARR = SM_GetEncoderValue(ENCODER_NORMAL)/2;
 8005966:	2000      	movs	r0, #0
 8005968:	f001 fa9c 	bl	8006ea4 <SM_GetEncoderValue>
 800596c:	4603      	mov	r3, r0
 800596e:	085b      	lsrs	r3, r3, #1
 8005970:	b29a      	uxth	r2, r3
 8005972:	4b05      	ldr	r3, [pc, #20]	; (8005988 <FreqO_AdjustFreq+0x54>)
 8005974:	62da      	str	r2, [r3, #44]	; 0x2c
		PWM_AUX_OUT_TIM->CCR1 = PWM_AUX_OUT_TIM->ARR/2;
 8005976:	4b04      	ldr	r3, [pc, #16]	; (8005988 <FreqO_AdjustFreq+0x54>)
 8005978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800597a:	4a03      	ldr	r2, [pc, #12]	; (8005988 <FreqO_AdjustFreq+0x54>)
 800597c:	085b      	lsrs	r3, r3, #1
 800597e:	6353      	str	r3, [r2, #52]	; 0x34

	}
}
 8005980:	bf00      	nop
 8005982:	3708      	adds	r7, #8
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}
 8005988:	40000400 	.word	0x40000400

0800598c <FreqO_AdjustPrescaler>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_AdjustPrescaler()
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b082      	sub	sp, #8
 8005990:	af00      	add	r7, sp, #0
	FreqO_MapEncoderPositionToPrescaler(SM_GetEncoderValue(ENCODER_NORMAL));
 8005992:	2000      	movs	r0, #0
 8005994:	f001 fa86 	bl	8006ea4 <SM_GetEncoderValue>
 8005998:	4603      	mov	r3, r0
 800599a:	4618      	mov	r0, r3
 800599c:	f7ff ff60 	bl	8005860 <FreqO_MapEncoderPositionToPrescaler>

	// not sure about this code?!?!
	eOutput_mode tmpOut = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 80059a0:	2001      	movs	r0, #1
 80059a2:	f001 f803 	bl	80069ac <SM_GetOutputChannel>
 80059a6:	4603      	mov	r3, r0
 80059a8:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 80059ac:	781b      	ldrb	r3, [r3, #0]
 80059ae:	71fb      	strb	r3, [r7, #7]
	if(tmpOut == PWM_FUNC_MODE)
 80059b0:	79fb      	ldrb	r3, [r7, #7]
 80059b2:	2b06      	cmp	r3, #6
 80059b4:	d10c      	bne.n	80059d0 <FreqO_AdjustPrescaler+0x44>
	{
		// duty cycle of PWM require slower settings to get the
		// same frequency as normal output functions
		//PWM_AUX_OUT_TIM->PSC = 256;
		PWM_AUX_OUT_TIM->ARR = SM_GetEncoderValue(ENCODER_NORMAL)/2;
 80059b6:	2000      	movs	r0, #0
 80059b8:	f001 fa74 	bl	8006ea4 <SM_GetEncoderValue>
 80059bc:	4603      	mov	r3, r0
 80059be:	085b      	lsrs	r3, r3, #1
 80059c0:	b29a      	uxth	r2, r3
 80059c2:	4b05      	ldr	r3, [pc, #20]	; (80059d8 <FreqO_AdjustPrescaler+0x4c>)
 80059c4:	62da      	str	r2, [r3, #44]	; 0x2c
		PWM_AUX_OUT_TIM->CCR1 = PWM_AUX_OUT_TIM->ARR/2;
 80059c6:	4b04      	ldr	r3, [pc, #16]	; (80059d8 <FreqO_AdjustPrescaler+0x4c>)
 80059c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ca:	4a03      	ldr	r2, [pc, #12]	; (80059d8 <FreqO_AdjustPrescaler+0x4c>)
 80059cc:	085b      	lsrs	r3, r3, #1
 80059ce:	6353      	str	r3, [r2, #52]	; 0x34

	}
}
 80059d0:	bf00      	nop
 80059d2:	3708      	adds	r7, #8
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}
 80059d8:	40000400 	.word	0x40000400

080059dc <FreqO_GetFPresetObject>:
 *	@param None
 *	@retval pointer to FreqProfile_t struct
 *
 */
FreqProfile_t * FreqO_GetFPresetObject()
{
 80059dc:	b480      	push	{r7}
 80059de:	af00      	add	r7, sp, #0
	return freq_profile;
 80059e0:	4b03      	ldr	r3, [pc, #12]	; (80059f0 <FreqO_GetFPresetObject+0x14>)
 80059e2:	681b      	ldr	r3, [r3, #0]
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr
 80059ee:	bf00      	nop
 80059f0:	2000011c 	.word	0x2000011c

080059f4 <FreqO_FindFPresetObject>:

 *	@retval pointer to FreqProfile_t struct
 *
 */
FreqProfile_t * FreqO_FindFPresetObject(eFreqSettings_t pEnum)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b084      	sub	sp, #16
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++ )
 80059fc:	2300      	movs	r3, #0
 80059fe:	60fb      	str	r3, [r7, #12]
 8005a00:	e016      	b.n	8005a30 <FreqO_FindFPresetObject+0x3c>
	{
		if(theFreqProfiles[i].hertz == pEnum)
 8005a02:	4911      	ldr	r1, [pc, #68]	; (8005a48 <FreqO_FindFPresetObject+0x54>)
 8005a04:	68fa      	ldr	r2, [r7, #12]
 8005a06:	4613      	mov	r3, r2
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	4413      	add	r3, r2
 8005a0c:	009b      	lsls	r3, r3, #2
 8005a0e:	440b      	add	r3, r1
 8005a10:	3304      	adds	r3, #4
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	687a      	ldr	r2, [r7, #4]
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d107      	bne.n	8005a2a <FreqO_FindFPresetObject+0x36>
		{
			return &theFreqProfiles[i];
 8005a1a:	68fa      	ldr	r2, [r7, #12]
 8005a1c:	4613      	mov	r3, r2
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	4413      	add	r3, r2
 8005a22:	009b      	lsls	r3, r3, #2
 8005a24:	4a08      	ldr	r2, [pc, #32]	; (8005a48 <FreqO_FindFPresetObject+0x54>)
 8005a26:	4413      	add	r3, r2
 8005a28:	e009      	b.n	8005a3e <FreqO_FindFPresetObject+0x4a>
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++ )
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	3301      	adds	r3, #1
 8005a2e:	60fb      	str	r3, [r7, #12]
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2b0d      	cmp	r3, #13
 8005a34:	dde5      	ble.n	8005a02 <FreqO_FindFPresetObject+0xe>
		}
	}
	// error!
	DM_SetErrorDebugMsg("FreqO_FindFPresetObject(): no FPreset obj found");
 8005a36:	4805      	ldr	r0, [pc, #20]	; (8005a4c <FreqO_FindFPresetObject+0x58>)
 8005a38:	f7fb ff08 	bl	800184c <DM_SetErrorDebugMsg>
	return 0;
 8005a3c:	2300      	movs	r3, #0
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3710      	adds	r7, #16
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}
 8005a46:	bf00      	nop
 8005a48:	20000004 	.word	0x20000004
 8005a4c:	08015eac 	.word	0x08015eac

08005a50 <FreqO_GetProfileByIndex>:
 *	@param pIndex
 *	@retval pointer to FreqProfile_t object
 *
 */
FreqProfile_t* FreqO_GetProfileByIndex(uint32_t pIndex)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b083      	sub	sp, #12
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
	return &theFreqProfiles[pIndex];
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	4613      	mov	r3, r2
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	4413      	add	r3, r2
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	4a04      	ldr	r2, [pc, #16]	; (8005a74 <FreqO_GetProfileByIndex+0x24>)
 8005a64:	4413      	add	r3, r2
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	370c      	adds	r7, #12
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr
 8005a72:	bf00      	nop
 8005a74:	20000004 	.word	0x20000004

08005a78 <FreqO_ResetLastEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_ResetLastEncoderValue()
{
 8005a78:	b480      	push	{r7}
 8005a7a:	af00      	add	r7, sp, #0
	freq_last_encoder_value = 0;
 8005a7c:	4b03      	ldr	r3, [pc, #12]	; (8005a8c <FreqO_ResetLastEncoderValue+0x14>)
 8005a7e:	2200      	movs	r2, #0
 8005a80:	801a      	strh	r2, [r3, #0]
}
 8005a82:	bf00      	nop
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr
 8005a8c:	200020e2 	.word	0x200020e2

08005a90 <FS_SetSweepModeDown>:
 *	@param None
 *	@retval None
 *
 */
void FS_SetSweepModeDown()
{
 8005a90:	b480      	push	{r7}
 8005a92:	af00      	add	r7, sp, #0
	// "Center-aligned" mode sets direction register to readonly,
	// so disable "Center-aligned" mode first
	SWEEP_TIMER->CR1 &= ~((TIM_CR1_CMS_0) | (TIM_CR1_CMS_1));
 8005a94:	4b10      	ldr	r3, [pc, #64]	; (8005ad8 <FS_SetSweepModeDown+0x48>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a0f      	ldr	r2, [pc, #60]	; (8005ad8 <FS_SetSweepModeDown+0x48>)
 8005a9a:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8005a9e:	6013      	str	r3, [r2, #0]

	// 0: Counter used as upcounter
	SWEEP_TIMER->CR1 |= (TIM_CR1_DIR);
 8005aa0:	4b0d      	ldr	r3, [pc, #52]	; (8005ad8 <FS_SetSweepModeDown+0x48>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a0c      	ldr	r2, [pc, #48]	; (8005ad8 <FS_SetSweepModeDown+0x48>)
 8005aa6:	f043 0310 	orr.w	r3, r3, #16
 8005aaa:	6013      	str	r3, [r2, #0]

	sweep_lower_bounds_shortest_output_arr  = OUTPUT_TIMER->ARR;
 8005aac:	4b0b      	ldr	r3, [pc, #44]	; (8005adc <FS_SetSweepModeDown+0x4c>)
 8005aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab0:	ee07 3a90 	vmov	s15, r3
 8005ab4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ab8:	4b09      	ldr	r3, [pc, #36]	; (8005ae0 <FS_SetSweepModeDown+0x50>)
 8005aba:	edc3 7a00 	vstr	s15, [r3]
	sweep_upper_bounds_longest_output_arr  = MAX_OUTPUT_ARR;
 8005abe:	4b09      	ldr	r3, [pc, #36]	; (8005ae4 <FS_SetSweepModeDown+0x54>)
 8005ac0:	4a09      	ldr	r2, [pc, #36]	; (8005ae8 <FS_SetSweepModeDown+0x58>)
 8005ac2:	601a      	str	r2, [r3, #0]
	ENCODER_TIMER->CNT = MAX_OUTPUT_ARR;
 8005ac4:	4b09      	ldr	r3, [pc, #36]	; (8005aec <FS_SetSweepModeDown+0x5c>)
 8005ac6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005aca:	625a      	str	r2, [r3, #36]	; 0x24

}
 8005acc:	bf00      	nop
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad4:	4770      	bx	lr
 8005ad6:	bf00      	nop
 8005ad8:	40000c00 	.word	0x40000c00
 8005adc:	40013400 	.word	0x40013400
 8005ae0:	20000120 	.word	0x20000120
 8005ae4:	20000124 	.word	0x20000124
 8005ae8:	477fff00 	.word	0x477fff00
 8005aec:	40012c00 	.word	0x40012c00

08005af0 <FS_SetSweepModeUp>:
 *	@param None
 *	@retval None
 *
 */
void FS_SetSweepModeUp()
{
 8005af0:	b480      	push	{r7}
 8005af2:	af00      	add	r7, sp, #0

	// "Center-aligned" mode sets direction register to readonly,
	// so disable "Center-aligned" mode first
	SWEEP_TIMER->CR1 &= ~((TIM_CR1_CMS_0) | (TIM_CR1_CMS_1));
 8005af4:	4b0e      	ldr	r3, [pc, #56]	; (8005b30 <FS_SetSweepModeUp+0x40>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a0d      	ldr	r2, [pc, #52]	; (8005b30 <FS_SetSweepModeUp+0x40>)
 8005afa:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8005afe:	6013      	str	r3, [r2, #0]

	// 1: Counter used as downcounter
	SWEEP_TIMER->CR1 &= ~(TIM_CR1_DIR);
 8005b00:	4b0b      	ldr	r3, [pc, #44]	; (8005b30 <FS_SetSweepModeUp+0x40>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a0a      	ldr	r2, [pc, #40]	; (8005b30 <FS_SetSweepModeUp+0x40>)
 8005b06:	f023 0310 	bic.w	r3, r3, #16
 8005b0a:	6013      	str	r3, [r2, #0]

	sweep_upper_bounds_longest_output_arr  = OUTPUT_TIMER->ARR;
 8005b0c:	4b09      	ldr	r3, [pc, #36]	; (8005b34 <FS_SetSweepModeUp+0x44>)
 8005b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b10:	ee07 3a90 	vmov	s15, r3
 8005b14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b18:	4b07      	ldr	r3, [pc, #28]	; (8005b38 <FS_SetSweepModeUp+0x48>)
 8005b1a:	edc3 7a00 	vstr	s15, [r3]
	sweep_lower_bounds_shortest_output_arr  = MIN_OUTPUT_ARR;
 8005b1e:	4b07      	ldr	r3, [pc, #28]	; (8005b3c <FS_SetSweepModeUp+0x4c>)
 8005b20:	4a07      	ldr	r2, [pc, #28]	; (8005b40 <FS_SetSweepModeUp+0x50>)
 8005b22:	601a      	str	r2, [r3, #0]


}
 8005b24:	bf00      	nop
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr
 8005b2e:	bf00      	nop
 8005b30:	40000c00 	.word	0x40000c00
 8005b34:	40013400 	.word	0x40013400
 8005b38:	20000124 	.word	0x20000124
 8005b3c:	20000120 	.word	0x20000120
 8005b40:	41500000 	.word	0x41500000

08005b44 <FS_SetEncoderControlMode>:
 *	@param None
 *	@retval None
 *
 */
void FS_SetEncoderControlMode(eEncoderSweepFunctions pFunction)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b083      	sub	sp, #12
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	71fb      	strb	r3, [r7, #7]
	if(pFunction)
 8005b4e:	79fb      	ldrb	r3, [r7, #7]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d038      	beq.n	8005bc6 <FS_SetEncoderControlMode+0x82>
	{
		//	ENCODER_SWEEP_LIMIT_FUNCTION
		theCurrentEncoderSweepFunction = pFunction;
 8005b54:	4a24      	ldr	r2, [pc, #144]	; (8005be8 <FS_SetEncoderControlMode+0xa4>)
 8005b56:	79fb      	ldrb	r3, [r7, #7]
 8005b58:	7013      	strb	r3, [r2, #0]
		ENCODER_TIMER->CNT = MIN_OUTPUT_ARR;
 8005b5a:	4b24      	ldr	r3, [pc, #144]	; (8005bec <FS_SetEncoderControlMode+0xa8>)
 8005b5c:	220d      	movs	r2, #13
 8005b5e:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = MAX_OUTPUT_ARR;
 8005b60:	4b22      	ldr	r3, [pc, #136]	; (8005bec <FS_SetEncoderControlMode+0xa8>)
 8005b62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b66:	62da      	str	r2, [r3, #44]	; 0x2c

		switch(active_sweep_mode)
 8005b68:	4b21      	ldr	r3, [pc, #132]	; (8005bf0 <FS_SetEncoderControlMode+0xac>)
 8005b6a:	781b      	ldrb	r3, [r3, #0]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d002      	beq.n	8005b76 <FS_SetEncoderControlMode+0x32>
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d014      	beq.n	8005b9e <FS_SetEncoderControlMode+0x5a>
					// if encoder position is below the lower bounds set it above it
					if(ENCODER_TIMER->CNT < sweep_lower_bounds_shortest_output_arr)
						ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
				break;
			default:
				break;
 8005b74:	e031      	b.n	8005bda <FS_SetEncoderControlMode+0x96>
					if(ENCODER_TIMER->CNT > sweep_upper_bounds_longest_output_arr)
 8005b76:	4b1d      	ldr	r3, [pc, #116]	; (8005bec <FS_SetEncoderControlMode+0xa8>)
 8005b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7a:	ee07 3a90 	vmov	s15, r3
 8005b7e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005b82:	4b1c      	ldr	r3, [pc, #112]	; (8005bf4 <FS_SetEncoderControlMode+0xb0>)
 8005b84:	edd3 7a00 	vldr	s15, [r3]
 8005b88:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b90:	dc00      	bgt.n	8005b94 <FS_SetEncoderControlMode+0x50>
				break;
 8005b92:	e022      	b.n	8005bda <FS_SetEncoderControlMode+0x96>
						 ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
 8005b94:	4b18      	ldr	r3, [pc, #96]	; (8005bf8 <FS_SetEncoderControlMode+0xb4>)
 8005b96:	4a15      	ldr	r2, [pc, #84]	; (8005bec <FS_SetEncoderControlMode+0xa8>)
 8005b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b9a:	6253      	str	r3, [r2, #36]	; 0x24
				break;
 8005b9c:	e01d      	b.n	8005bda <FS_SetEncoderControlMode+0x96>
					if(ENCODER_TIMER->CNT < sweep_lower_bounds_shortest_output_arr)
 8005b9e:	4b13      	ldr	r3, [pc, #76]	; (8005bec <FS_SetEncoderControlMode+0xa8>)
 8005ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba2:	ee07 3a90 	vmov	s15, r3
 8005ba6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005baa:	4b14      	ldr	r3, [pc, #80]	; (8005bfc <FS_SetEncoderControlMode+0xb8>)
 8005bac:	edd3 7a00 	vldr	s15, [r3]
 8005bb0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005bb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bb8:	d400      	bmi.n	8005bbc <FS_SetEncoderControlMode+0x78>
				break;
 8005bba:	e00e      	b.n	8005bda <FS_SetEncoderControlMode+0x96>
						ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
 8005bbc:	4b0e      	ldr	r3, [pc, #56]	; (8005bf8 <FS_SetEncoderControlMode+0xb4>)
 8005bbe:	4a0b      	ldr	r2, [pc, #44]	; (8005bec <FS_SetEncoderControlMode+0xa8>)
 8005bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc2:	6253      	str	r3, [r2, #36]	; 0x24
				break;
 8005bc4:	e009      	b.n	8005bda <FS_SetEncoderControlMode+0x96>
		// switch(active_sweep_mode)
	}
	else
	{
		// ENCODER_SWEEP_SPEED_FUNCTION
		theCurrentEncoderSweepFunction = pFunction;
 8005bc6:	4a08      	ldr	r2, [pc, #32]	; (8005be8 <FS_SetEncoderControlMode+0xa4>)
 8005bc8:	79fb      	ldrb	r3, [r7, #7]
 8005bca:	7013      	strb	r3, [r2, #0]
		// encoder start value
		ENCODER_TIMER->CNT = 1;
 8005bcc:	4b07      	ldr	r3, [pc, #28]	; (8005bec <FS_SetEncoderControlMode+0xa8>)
 8005bce:	2201      	movs	r2, #1
 8005bd0:	625a      	str	r2, [r3, #36]	; 0x24
		// encoder limit for default (set speed)
		ENCODER_TIMER->ARR = 1600;
 8005bd2:	4b06      	ldr	r3, [pc, #24]	; (8005bec <FS_SetEncoderControlMode+0xa8>)
 8005bd4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8005bd8:	62da      	str	r2, [r3, #44]	; 0x2c
	}

}
 8005bda:	bf00      	nop
 8005bdc:	370c      	adds	r7, #12
 8005bde:	46bd      	mov	sp, r7
 8005be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be4:	4770      	bx	lr
 8005be6:	bf00      	nop
 8005be8:	200020d4 	.word	0x200020d4
 8005bec:	40012c00 	.word	0x40012c00
 8005bf0:	200020d3 	.word	0x200020d3
 8005bf4:	20000124 	.word	0x20000124
 8005bf8:	40013400 	.word	0x40013400
 8005bfc:	20000120 	.word	0x20000120

08005c00 <FS_SetSweepTimerAutoReloadForEncoderControl>:
 *	@param None
 *	@retval None
 *
 */
void FS_SetSweepTimerAutoReloadForEncoderControl(eEncoderSweepFunctions pFunction)
{
 8005c00:	b590      	push	{r4, r7, lr}
 8005c02:	b085      	sub	sp, #20
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	4603      	mov	r3, r0
 8005c08:	71fb      	strb	r3, [r7, #7]
	uint32_t next_sweep_tim_arr;

	if(pFunction)
 8005c0a:	79fb      	ldrb	r3, [r7, #7]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d122      	bne.n	8005c56 <FS_SetSweepTimerAutoReloadForEncoderControl+0x56>

	}
	else
	{
		// get logarithmic curve to speed up turns at low end
		next_sweep_tim_arr = MIN_SWEEP_ARR + (pow(ENCODER_TIMER->CNT, 3));
 8005c10:	4b17      	ldr	r3, [pc, #92]	; (8005c70 <FS_SetSweepTimerAutoReloadForEncoderControl+0x70>)
 8005c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c14:	4618      	mov	r0, r3
 8005c16:	f7fa fc9d 	bl	8000554 <__aeabi_ui2d>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	460c      	mov	r4, r1
 8005c1e:	ed9f 1b10 	vldr	d1, [pc, #64]	; 8005c60 <FS_SetSweepTimerAutoReloadForEncoderControl+0x60>
 8005c22:	ec44 3b10 	vmov	d0, r3, r4
 8005c26:	f00e fb5f 	bl	80142e8 <pow>
 8005c2a:	ec51 0b10 	vmov	r0, r1, d0
 8005c2e:	a30e      	add	r3, pc, #56	; (adr r3, 8005c68 <FS_SetSweepTimerAutoReloadForEncoderControl+0x68>)
 8005c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c34:	f7fa fb52 	bl	80002dc <__adddf3>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	460c      	mov	r4, r1
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	4621      	mov	r1, r4
 8005c40:	f7fa ffda 	bl	8000bf8 <__aeabi_d2uiz>
 8005c44:	4603      	mov	r3, r0
 8005c46:	60fb      	str	r3, [r7, #12]

		if(next_sweep_tim_arr < 0xFFFFFFFF)
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c4e:	d002      	beq.n	8005c56 <FS_SetSweepTimerAutoReloadForEncoderControl+0x56>
		{
			SWEEP_TIMER->ARR = next_sweep_tim_arr;
 8005c50:	4a08      	ldr	r2, [pc, #32]	; (8005c74 <FS_SetSweepTimerAutoReloadForEncoderControl+0x74>)
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	62d3      	str	r3, [r2, #44]	; 0x2c

		}
	}
}
 8005c56:	bf00      	nop
 8005c58:	3714      	adds	r7, #20
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd90      	pop	{r4, r7, pc}
 8005c5e:	bf00      	nop
 8005c60:	00000000 	.word	0x00000000
 8005c64:	40080000 	.word	0x40080000
 8005c68:	00000000 	.word	0x00000000
 8005c6c:	40d06800 	.word	0x40d06800
 8005c70:	40012c00 	.word	0x40012c00
 8005c74:	40000c00 	.word	0x40000c00

08005c78 <FS_GetCalculatedSweepFrequencyInHertz>:
 *	@param None
 *	@retval None
 *
 */
float FS_GetCalculatedSweepFrequencyInHertz()
{
 8005c78:	b480      	push	{r7}
 8005c7a:	af00      	add	r7, sp, #0
	if(SWEEP_TIMER->PSC == 0)
 8005c7c:	4b13      	ldr	r3, [pc, #76]	; (8005ccc <FS_GetCalculatedSweepFrequencyInHertz+0x54>)
 8005c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d10a      	bne.n	8005c9a <FS_GetCalculatedSweepFrequencyInHertz+0x22>
	{
		return (float)SM_MCLK / ((float)1 * (float)SWEEP_TIMER->ARR);
 8005c84:	4b11      	ldr	r3, [pc, #68]	; (8005ccc <FS_GetCalculatedSweepFrequencyInHertz+0x54>)
 8005c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c88:	ee07 3a90 	vmov	s15, r3
 8005c8c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005c90:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8005cd0 <FS_GetCalculatedSweepFrequencyInHertz+0x58>
 8005c94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c98:	e011      	b.n	8005cbe <FS_GetCalculatedSweepFrequencyInHertz+0x46>
	}
	else
	{
		return (float)SM_MCLK / ((float)SWEEP_TIMER->PSC * (float)SWEEP_TIMER->ARR);
 8005c9a:	4b0c      	ldr	r3, [pc, #48]	; (8005ccc <FS_GetCalculatedSweepFrequencyInHertz+0x54>)
 8005c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c9e:	ee07 3a90 	vmov	s15, r3
 8005ca2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005ca6:	4b09      	ldr	r3, [pc, #36]	; (8005ccc <FS_GetCalculatedSweepFrequencyInHertz+0x54>)
 8005ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005caa:	ee07 3a90 	vmov	s15, r3
 8005cae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cb2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005cb6:	eddf 6a06 	vldr	s13, [pc, #24]	; 8005cd0 <FS_GetCalculatedSweepFrequencyInHertz+0x58>
 8005cba:	eec6 7a87 	vdiv.f32	s15, s13, s14
	}

}
 8005cbe:	eeb0 0a67 	vmov.f32	s0, s15
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc8:	4770      	bx	lr
 8005cca:	bf00      	nop
 8005ccc:	40000c00 	.word	0x40000c00
 8005cd0:	4d2037a0 	.word	0x4d2037a0

08005cd4 <FuncO_ResetLastEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
void FuncO_ResetLastEncoderValue()
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	af00      	add	r7, sp, #0
	func_last_encoder_value = 0;
 8005cd8:	4b03      	ldr	r3, [pc, #12]	; (8005ce8 <FuncO_ResetLastEncoderValue+0x14>)
 8005cda:	2200      	movs	r2, #0
 8005cdc:	801a      	strh	r2, [r3, #0]
}
 8005cde:	bf00      	nop
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr
 8005ce8:	2000210e 	.word	0x2000210e

08005cec <FuncO_MapEncoderPositionToSignalOutput>:
 *	@param pEncoderValue rotary encoder value
 *	@retval None
 *
 */
void FuncO_MapEncoderPositionToSignalOutput(uint16_t pEncoderValue)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b084      	sub	sp, #16
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	80fb      	strh	r3, [r7, #6]
	eOutput_mode tmpFunc = SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile->func;
 8005cf6:	2000      	movs	r0, #0
 8005cf8:	f000 fe58 	bl	80069ac <SM_GetOutputChannel>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8005d02:	781b      	ldrb	r3, [r3, #0]
 8005d04:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > func_last_encoder_value)
 8005d06:	4b15      	ldr	r3, [pc, #84]	; (8005d5c <FuncO_MapEncoderPositionToSignalOutput+0x70>)
 8005d08:	881b      	ldrh	r3, [r3, #0]
 8005d0a:	88fa      	ldrh	r2, [r7, #6]
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d90c      	bls.n	8005d2a <FuncO_MapEncoderPositionToSignalOutput+0x3e>
	{
		tmpFunc++;
 8005d10:	7bfb      	ldrb	r3, [r7, #15]
 8005d12:	3301      	adds	r3, #1
 8005d14:	73fb      	strb	r3, [r7, #15]
		if(tmpFunc > MAX_NUM_FUNC_PRESETS-2) tmpFunc = IMPULSE_FUNC_MODE;
 8005d16:	7bfb      	ldrb	r3, [r7, #15]
 8005d18:	2b05      	cmp	r3, #5
 8005d1a:	d901      	bls.n	8005d20 <FuncO_MapEncoderPositionToSignalOutput+0x34>
 8005d1c:	2305      	movs	r3, #5
 8005d1e:	73fb      	strb	r3, [r7, #15]
		FuncO_ApplyProfileToSignal(tmpFunc);
 8005d20:	7bfb      	ldrb	r3, [r7, #15]
 8005d22:	4618      	mov	r0, r3
 8005d24:	f000 f856 	bl	8005dd4 <FuncO_ApplyProfileToSignal>
 8005d28:	e010      	b.n	8005d4c <FuncO_MapEncoderPositionToSignalOutput+0x60>
	}
	else if (pEncoderValue < func_last_encoder_value)
 8005d2a:	4b0c      	ldr	r3, [pc, #48]	; (8005d5c <FuncO_MapEncoderPositionToSignalOutput+0x70>)
 8005d2c:	881b      	ldrh	r3, [r3, #0]
 8005d2e:	88fa      	ldrh	r2, [r7, #6]
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d20b      	bcs.n	8005d4c <FuncO_MapEncoderPositionToSignalOutput+0x60>
	{
		tmpFunc--;
 8005d34:	7bfb      	ldrb	r3, [r7, #15]
 8005d36:	3b01      	subs	r3, #1
 8005d38:	73fb      	strb	r3, [r7, #15]
		if(tmpFunc > MAX_NUM_FUNC_PRESETS-1) tmpFunc = SINE_FUNC_MODE;
 8005d3a:	7bfb      	ldrb	r3, [r7, #15]
 8005d3c:	2b06      	cmp	r3, #6
 8005d3e:	d901      	bls.n	8005d44 <FuncO_MapEncoderPositionToSignalOutput+0x58>
 8005d40:	2300      	movs	r3, #0
 8005d42:	73fb      	strb	r3, [r7, #15]
		FuncO_ApplyProfileToSignal(tmpFunc);
 8005d44:	7bfb      	ldrb	r3, [r7, #15]
 8005d46:	4618      	mov	r0, r3
 8005d48:	f000 f844 	bl	8005dd4 <FuncO_ApplyProfileToSignal>
	}
	func_last_encoder_value = pEncoderValue;
 8005d4c:	4a03      	ldr	r2, [pc, #12]	; (8005d5c <FuncO_MapEncoderPositionToSignalOutput+0x70>)
 8005d4e:	88fb      	ldrh	r3, [r7, #6]
 8005d50:	8013      	strh	r3, [r2, #0]
}
 8005d52:	bf00      	nop
 8005d54:	3710      	adds	r7, #16
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}
 8005d5a:	bf00      	nop
 8005d5c:	2000210e 	.word	0x2000210e

08005d60 <FuncO_MapEncoderPositionToAuxOutput>:
 *	@param pEncoderValue rotary encoder value
 *	@retval None
 *
 */
void FuncO_MapEncoderPositionToAuxOutput(uint16_t pEncoderValue)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b084      	sub	sp, #16
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	4603      	mov	r3, r0
 8005d68:	80fb      	strh	r3, [r7, #6]
	eOutput_mode tmpFunc = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 8005d6a:	2001      	movs	r0, #1
 8005d6c:	f000 fe1e 	bl	80069ac <SM_GetOutputChannel>
 8005d70:	4603      	mov	r3, r0
 8005d72:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8005d76:	781b      	ldrb	r3, [r3, #0]
 8005d78:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > func_last_encoder_value)
 8005d7a:	4b15      	ldr	r3, [pc, #84]	; (8005dd0 <FuncO_MapEncoderPositionToAuxOutput+0x70>)
 8005d7c:	881b      	ldrh	r3, [r3, #0]
 8005d7e:	88fa      	ldrh	r2, [r7, #6]
 8005d80:	429a      	cmp	r2, r3
 8005d82:	d90c      	bls.n	8005d9e <FuncO_MapEncoderPositionToAuxOutput+0x3e>
	{
		tmpFunc++;
 8005d84:	7bfb      	ldrb	r3, [r7, #15]
 8005d86:	3301      	adds	r3, #1
 8005d88:	73fb      	strb	r3, [r7, #15]
		if(tmpFunc > MAX_NUM_FUNC_PRESETS-1) tmpFunc = PWM_FUNC_MODE;
 8005d8a:	7bfb      	ldrb	r3, [r7, #15]
 8005d8c:	2b06      	cmp	r3, #6
 8005d8e:	d901      	bls.n	8005d94 <FuncO_MapEncoderPositionToAuxOutput+0x34>
 8005d90:	2306      	movs	r3, #6
 8005d92:	73fb      	strb	r3, [r7, #15]
		FuncO_ApplyProfileToAux(tmpFunc);
 8005d94:	7bfb      	ldrb	r3, [r7, #15]
 8005d96:	4618      	mov	r0, r3
 8005d98:	f000 f87a 	bl	8005e90 <FuncO_ApplyProfileToAux>
 8005d9c:	e010      	b.n	8005dc0 <FuncO_MapEncoderPositionToAuxOutput+0x60>
	}
	else if (pEncoderValue < func_last_encoder_value)
 8005d9e:	4b0c      	ldr	r3, [pc, #48]	; (8005dd0 <FuncO_MapEncoderPositionToAuxOutput+0x70>)
 8005da0:	881b      	ldrh	r3, [r3, #0]
 8005da2:	88fa      	ldrh	r2, [r7, #6]
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d20b      	bcs.n	8005dc0 <FuncO_MapEncoderPositionToAuxOutput+0x60>
	{
		tmpFunc--;
 8005da8:	7bfb      	ldrb	r3, [r7, #15]
 8005daa:	3b01      	subs	r3, #1
 8005dac:	73fb      	strb	r3, [r7, #15]
		if(tmpFunc > MAX_NUM_FUNC_PRESETS-1) tmpFunc = SINE_FUNC_MODE;
 8005dae:	7bfb      	ldrb	r3, [r7, #15]
 8005db0:	2b06      	cmp	r3, #6
 8005db2:	d901      	bls.n	8005db8 <FuncO_MapEncoderPositionToAuxOutput+0x58>
 8005db4:	2300      	movs	r3, #0
 8005db6:	73fb      	strb	r3, [r7, #15]
		FuncO_ApplyProfileToAux(tmpFunc);
 8005db8:	7bfb      	ldrb	r3, [r7, #15]
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f000 f868 	bl	8005e90 <FuncO_ApplyProfileToAux>
//		if(tmpFunc == SINE_FUNC_MODE)
//			ENCODER_TIMER->CNT = 20;
	}
	func_last_encoder_value = pEncoderValue;
 8005dc0:	4a03      	ldr	r2, [pc, #12]	; (8005dd0 <FuncO_MapEncoderPositionToAuxOutput+0x70>)
 8005dc2:	88fb      	ldrh	r3, [r7, #6]
 8005dc4:	8013      	strh	r3, [r2, #0]
}
 8005dc6:	bf00      	nop
 8005dc8:	3710      	adds	r7, #16
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
 8005dce:	bf00      	nop
 8005dd0:	2000210e 	.word	0x2000210e

08005dd4 <FuncO_ApplyProfileToSignal>:

 *	@retval None
 *
 */
void FuncO_ApplyProfileToSignal(eOutput_mode pPresetEnum)
{
 8005dd4:	b590      	push	{r4, r7, lr}
 8005dd6:	b087      	sub	sp, #28
 8005dd8:	af02      	add	r7, sp, #8
 8005dda:	4603      	mov	r3, r0
 8005ddc:	71fb      	strb	r3, [r7, #7]

		// set the next function output
		SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile = &theFuncProfiles[pPresetEnum];
 8005dde:	79fc      	ldrb	r4, [r7, #7]
 8005de0:	2000      	movs	r0, #0
 8005de2:	f000 fde3 	bl	80069ac <SM_GetOutputChannel>
 8005de6:	4601      	mov	r1, r0
 8005de8:	00e3      	lsls	r3, r4, #3
 8005dea:	4a24      	ldr	r2, [pc, #144]	; (8005e7c <FuncO_ApplyProfileToSignal+0xa8>)
 8005dec:	4413      	add	r3, r2
 8005dee:	f8c1 31e8 	str.w	r3, [r1, #488]	; 0x1e8


		// copy the lookup table for the next output function in to SignalChannel object
		printf("SM_GetOutputChannel\n");
 8005df2:	4823      	ldr	r0, [pc, #140]	; (8005e80 <FuncO_ApplyProfileToSignal+0xac>)
 8005df4:	f00c f960 	bl	80120b8 <puts>
		SM_GetOutputChannel(SIGNAL_CHANNEL)->ref_lut_data = theFuncProfiles[pPresetEnum].lookup_table_data;
 8005df8:	79fc      	ldrb	r4, [r7, #7]
 8005dfa:	2000      	movs	r0, #0
 8005dfc:	f000 fdd6 	bl	80069ac <SM_GetOutputChannel>
 8005e00:	4601      	mov	r1, r0
 8005e02:	4a1e      	ldr	r2, [pc, #120]	; (8005e7c <FuncO_ApplyProfileToSignal+0xa8>)
 8005e04:	00e3      	lsls	r3, r4, #3
 8005e06:	4413      	add	r3, r2
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	604b      	str	r3, [r1, #4]

		// set preset for PGA gain and dsp amplitude adjustment
		eAmpSettings_t eTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile->amp_setting;
 8005e0c:	2000      	movs	r0, #0
 8005e0e:	f000 fdcd 	bl	80069ac <SM_GetOutputChannel>
 8005e12:	4603      	mov	r3, r0
 8005e14:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8005e18:	781b      	ldrb	r3, [r3, #0]
 8005e1a:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToSignal(eTmpVppPreset);
 8005e1c:	7bfb      	ldrb	r3, [r7, #15]
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f001 f8fa 	bl	8007018 <VPP_ApplyProfileToSignal>

		// pause timer to reAux both outputs
		//OUTPUT_TIMER->CR1 &= ~(TIM_CR1_CEN);
		HAL_TIM_Base_Stop(&htim8);
 8005e24:	4817      	ldr	r0, [pc, #92]	; (8005e84 <FuncO_ApplyProfileToSignal+0xb0>)
 8005e26:	f007 fd1b 	bl	800d860 <HAL_TIM_Base_Stop>

		// restart the DAC with the new data
		HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8005e2a:	2100      	movs	r1, #0
 8005e2c:	4816      	ldr	r0, [pc, #88]	; (8005e88 <FuncO_ApplyProfileToSignal+0xb4>)
 8005e2e:	f005 fb71 	bl	800b514 <HAL_DAC_Stop_DMA>
		HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8005e32:	2000      	movs	r0, #0
 8005e34:	f000 fdba 	bl	80069ac <SM_GetOutputChannel>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	f103 0208 	add.w	r2, r3, #8
 8005e3e:	2300      	movs	r3, #0
 8005e40:	9300      	str	r3, [sp, #0]
 8005e42:	2378      	movs	r3, #120	; 0x78
 8005e44:	2100      	movs	r1, #0
 8005e46:	4810      	ldr	r0, [pc, #64]	; (8005e88 <FuncO_ApplyProfileToSignal+0xb4>)
 8005e48:	f005 faa2 	bl	800b390 <HAL_DAC_Start_DMA>

		// restart the the other DAC
		HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1);
 8005e4c:	2100      	movs	r1, #0
 8005e4e:	480f      	ldr	r0, [pc, #60]	; (8005e8c <FuncO_ApplyProfileToSignal+0xb8>)
 8005e50:	f005 fb60 	bl	800b514 <HAL_DAC_Stop_DMA>
		HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(AUX_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8005e54:	2001      	movs	r0, #1
 8005e56:	f000 fda9 	bl	80069ac <SM_GetOutputChannel>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	f103 0208 	add.w	r2, r3, #8
 8005e60:	2300      	movs	r3, #0
 8005e62:	9300      	str	r3, [sp, #0]
 8005e64:	2378      	movs	r3, #120	; 0x78
 8005e66:	2100      	movs	r1, #0
 8005e68:	4808      	ldr	r0, [pc, #32]	; (8005e8c <FuncO_ApplyProfileToSignal+0xb8>)
 8005e6a:	f005 fa91 	bl	800b390 <HAL_DAC_Start_DMA>

		// resume timer to reAux both outputs
		HAL_TIM_Base_Start(&htim8);
 8005e6e:	4805      	ldr	r0, [pc, #20]	; (8005e84 <FuncO_ApplyProfileToSignal+0xb0>)
 8005e70:	f007 fcc8 	bl	800d804 <HAL_TIM_Base_Start>
		//OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);



}
 8005e74:	bf00      	nop
 8005e76:	3714      	adds	r7, #20
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd90      	pop	{r4, r7, pc}
 8005e7c:	20000128 	.word	0x20000128
 8005e80:	08015edc 	.word	0x08015edc
 8005e84:	20002a64 	.word	0x20002a64
 8005e88:	2000292c 	.word	0x2000292c
 8005e8c:	20002918 	.word	0x20002918

08005e90 <FuncO_ApplyProfileToAux>:

 *	@retval None
 *
 */
void FuncO_ApplyProfileToAux(eOutput_mode pPresetEnum)
{
 8005e90:	b590      	push	{r4, r7, lr}
 8005e92:	b087      	sub	sp, #28
 8005e94:	af02      	add	r7, sp, #8
 8005e96:	4603      	mov	r3, r0
 8005e98:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef res;

	// set the next output function
	SM_GetOutputChannel(AUX_CHANNEL)->func_profile = &theFuncProfiles[pPresetEnum];
 8005e9a:	79fc      	ldrb	r4, [r7, #7]
 8005e9c:	2001      	movs	r0, #1
 8005e9e:	f000 fd85 	bl	80069ac <SM_GetOutputChannel>
 8005ea2:	4601      	mov	r1, r0
 8005ea4:	00e3      	lsls	r3, r4, #3
 8005ea6:	4a96      	ldr	r2, [pc, #600]	; (8006100 <FuncO_ApplyProfileToAux+0x270>)
 8005ea8:	4413      	add	r3, r2
 8005eaa:	f8c1 31e8 	str.w	r3, [r1, #488]	; 0x1e8


	if(pPresetEnum == PWM_FUNC_MODE)
 8005eae:	79fb      	ldrb	r3, [r7, #7]
 8005eb0:	2b06      	cmp	r3, #6
 8005eb2:	d10a      	bne.n	8005eca <FuncO_ApplyProfileToAux+0x3a>
	{
		printf("FuncO_ApplyProfileToAux PWM_FUNC_MODE\n");
 8005eb4:	4893      	ldr	r0, [pc, #588]	; (8006104 <FuncO_ApplyProfileToAux+0x274>)
 8005eb6:	f00c f8ff 	bl	80120b8 <puts>
		// switch output signal from DAC to PWM

		SM_DisableDacToAux();
 8005eba:	f000 ffdf 	bl	8006e7c <SM_DisableDacToAux>
		SM_EnablePwmToAux();
 8005ebe:	f000 fd8b 	bl	80069d8 <SM_EnablePwmToAux>

		last_output_mode_was_pwm = 1;
 8005ec2:	4b91      	ldr	r3, [pc, #580]	; (8006108 <FuncO_ApplyProfileToAux+0x278>)
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	701a      	strb	r2, [r3, #0]
		res = HAL_TIM_Base_Start(&htim8);
		printf("Result:%u\n",res);
		//OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
	}

}
 8005ec8:	e115      	b.n	80060f6 <FuncO_ApplyProfileToAux+0x266>
	else if(last_output_mode_was_pwm)
 8005eca:	4b8f      	ldr	r3, [pc, #572]	; (8006108 <FuncO_ApplyProfileToAux+0x278>)
 8005ecc:	781b      	ldrb	r3, [r3, #0]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	f000 808e 	beq.w	8005ff0 <FuncO_ApplyProfileToAux+0x160>
		printf("FuncO_ApplyProfileToAux NOT PWM_FUNC_MODE\n");
 8005ed4:	488d      	ldr	r0, [pc, #564]	; (800610c <FuncO_ApplyProfileToAux+0x27c>)
 8005ed6:	f00c f8ef 	bl	80120b8 <puts>
		SM_DisablePwmToAux();
 8005eda:	f000 feb9 	bl	8006c50 <SM_DisablePwmToAux>
		SM_EnableDacToAux();
 8005ede:	f000 fef3 	bl	8006cc8 <SM_EnableDacToAux>
		printf("FuncO_ApplyProfileToAux SM_GetOutputChannel\n");
 8005ee2:	488b      	ldr	r0, [pc, #556]	; (8006110 <FuncO_ApplyProfileToAux+0x280>)
 8005ee4:	f00c f8e8 	bl	80120b8 <puts>
		SM_GetOutputChannel(AUX_CHANNEL)->ref_lut_data = theFuncProfiles[pPresetEnum].lookup_table_data;
 8005ee8:	79fc      	ldrb	r4, [r7, #7]
 8005eea:	2001      	movs	r0, #1
 8005eec:	f000 fd5e 	bl	80069ac <SM_GetOutputChannel>
 8005ef0:	4601      	mov	r1, r0
 8005ef2:	4a83      	ldr	r2, [pc, #524]	; (8006100 <FuncO_ApplyProfileToAux+0x270>)
 8005ef4:	00e3      	lsls	r3, r4, #3
 8005ef6:	4413      	add	r3, r2
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	604b      	str	r3, [r1, #4]
		printf("FuncO_ApplyProfileToAux SM_GetOutputChannel\n");
 8005efc:	4884      	ldr	r0, [pc, #528]	; (8006110 <FuncO_ApplyProfileToAux+0x280>)
 8005efe:	f00c f8db 	bl	80120b8 <puts>
		eAmpSettings_t eTmpVppPreset = SM_GetOutputChannel(AUX_CHANNEL)->amp_profile->amp_setting;
 8005f02:	2001      	movs	r0, #1
 8005f04:	f000 fd52 	bl	80069ac <SM_GetOutputChannel>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8005f0e:	781b      	ldrb	r3, [r3, #0]
 8005f10:	737b      	strb	r3, [r7, #13]
		printf("VPP_ApplyProfileToAux");
 8005f12:	4880      	ldr	r0, [pc, #512]	; (8006114 <FuncO_ApplyProfileToAux+0x284>)
 8005f14:	f00c f85c 	bl	8011fd0 <iprintf>
		VPP_ApplyProfileToAux(eTmpVppPreset);
 8005f18:	7b7b      	ldrb	r3, [r7, #13]
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f001 f8aa 	bl	8007074 <VPP_ApplyProfileToAux>
		printf("FuncO_ApplyProfileToAux HAL_TIM_Base_Stop(&htim2)\n");
 8005f20:	487d      	ldr	r0, [pc, #500]	; (8006118 <FuncO_ApplyProfileToAux+0x288>)
 8005f22:	f00c f8c9 	bl	80120b8 <puts>
		res = HAL_TIM_Base_Stop(&htim8);
 8005f26:	487d      	ldr	r0, [pc, #500]	; (800611c <FuncO_ApplyProfileToAux+0x28c>)
 8005f28:	f007 fc9a 	bl	800d860 <HAL_TIM_Base_Stop>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005f30:	7bbb      	ldrb	r3, [r7, #14]
 8005f32:	4619      	mov	r1, r3
 8005f34:	487a      	ldr	r0, [pc, #488]	; (8006120 <FuncO_ApplyProfileToAux+0x290>)
 8005f36:	f00c f84b 	bl	8011fd0 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1)\n");
 8005f3a:	487a      	ldr	r0, [pc, #488]	; (8006124 <FuncO_ApplyProfileToAux+0x294>)
 8005f3c:	f00c f8bc 	bl	80120b8 <puts>
		res = HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1);
 8005f40:	2100      	movs	r1, #0
 8005f42:	4879      	ldr	r0, [pc, #484]	; (8006128 <FuncO_ApplyProfileToAux+0x298>)
 8005f44:	f005 fae6 	bl	800b514 <HAL_DAC_Stop_DMA>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005f4c:	7bbb      	ldrb	r3, [r7, #14]
 8005f4e:	4619      	mov	r1, r3
 8005f50:	4873      	ldr	r0, [pc, #460]	; (8006120 <FuncO_ApplyProfileToAux+0x290>)
 8005f52:	f00c f83d 	bl	8011fd0 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1)\n");
 8005f56:	4875      	ldr	r0, [pc, #468]	; (800612c <FuncO_ApplyProfileToAux+0x29c>)
 8005f58:	f00c f8ae 	bl	80120b8 <puts>
		res = HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(AUX_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8005f5c:	2001      	movs	r0, #1
 8005f5e:	f000 fd25 	bl	80069ac <SM_GetOutputChannel>
 8005f62:	4603      	mov	r3, r0
 8005f64:	f103 0208 	add.w	r2, r3, #8
 8005f68:	2300      	movs	r3, #0
 8005f6a:	9300      	str	r3, [sp, #0]
 8005f6c:	2378      	movs	r3, #120	; 0x78
 8005f6e:	2100      	movs	r1, #0
 8005f70:	486d      	ldr	r0, [pc, #436]	; (8006128 <FuncO_ApplyProfileToAux+0x298>)
 8005f72:	f005 fa0d 	bl	800b390 <HAL_DAC_Start_DMA>
 8005f76:	4603      	mov	r3, r0
 8005f78:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005f7a:	7bbb      	ldrb	r3, [r7, #14]
 8005f7c:	4619      	mov	r1, r3
 8005f7e:	4868      	ldr	r0, [pc, #416]	; (8006120 <FuncO_ApplyProfileToAux+0x290>)
 8005f80:	f00c f826 	bl	8011fd0 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1)\n");
 8005f84:	486a      	ldr	r0, [pc, #424]	; (8006130 <FuncO_ApplyProfileToAux+0x2a0>)
 8005f86:	f00c f897 	bl	80120b8 <puts>
		res = HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8005f8a:	2100      	movs	r1, #0
 8005f8c:	4869      	ldr	r0, [pc, #420]	; (8006134 <FuncO_ApplyProfileToAux+0x2a4>)
 8005f8e:	f005 fac1 	bl	800b514 <HAL_DAC_Stop_DMA>
 8005f92:	4603      	mov	r3, r0
 8005f94:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005f96:	7bbb      	ldrb	r3, [r7, #14]
 8005f98:	4619      	mov	r1, r3
 8005f9a:	4861      	ldr	r0, [pc, #388]	; (8006120 <FuncO_ApplyProfileToAux+0x290>)
 8005f9c:	f00c f818 	bl	8011fd0 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1)\n");
 8005fa0:	4865      	ldr	r0, [pc, #404]	; (8006138 <FuncO_ApplyProfileToAux+0x2a8>)
 8005fa2:	f00c f889 	bl	80120b8 <puts>
		res = HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8005fa6:	2000      	movs	r0, #0
 8005fa8:	f000 fd00 	bl	80069ac <SM_GetOutputChannel>
 8005fac:	4603      	mov	r3, r0
 8005fae:	f103 0208 	add.w	r2, r3, #8
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	9300      	str	r3, [sp, #0]
 8005fb6:	2378      	movs	r3, #120	; 0x78
 8005fb8:	2100      	movs	r1, #0
 8005fba:	485e      	ldr	r0, [pc, #376]	; (8006134 <FuncO_ApplyProfileToAux+0x2a4>)
 8005fbc:	f005 f9e8 	bl	800b390 <HAL_DAC_Start_DMA>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005fc4:	7bbb      	ldrb	r3, [r7, #14]
 8005fc6:	4619      	mov	r1, r3
 8005fc8:	4855      	ldr	r0, [pc, #340]	; (8006120 <FuncO_ApplyProfileToAux+0x290>)
 8005fca:	f00c f801 	bl	8011fd0 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_TIM_Base_Start(&htim2)\n");
 8005fce:	485b      	ldr	r0, [pc, #364]	; (800613c <FuncO_ApplyProfileToAux+0x2ac>)
 8005fd0:	f00c f872 	bl	80120b8 <puts>
		res = HAL_TIM_Base_Start(&htim8);
 8005fd4:	4851      	ldr	r0, [pc, #324]	; (800611c <FuncO_ApplyProfileToAux+0x28c>)
 8005fd6:	f007 fc15 	bl	800d804 <HAL_TIM_Base_Start>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005fde:	7bbb      	ldrb	r3, [r7, #14]
 8005fe0:	4619      	mov	r1, r3
 8005fe2:	484f      	ldr	r0, [pc, #316]	; (8006120 <FuncO_ApplyProfileToAux+0x290>)
 8005fe4:	f00b fff4 	bl	8011fd0 <iprintf>
		last_output_mode_was_pwm = 0;
 8005fe8:	4b47      	ldr	r3, [pc, #284]	; (8006108 <FuncO_ApplyProfileToAux+0x278>)
 8005fea:	2200      	movs	r2, #0
 8005fec:	701a      	strb	r2, [r3, #0]
}
 8005fee:	e082      	b.n	80060f6 <FuncO_ApplyProfileToAux+0x266>
		printf("FuncO_ApplyProfileToAux SM_GetOutputChannel\n");
 8005ff0:	4847      	ldr	r0, [pc, #284]	; (8006110 <FuncO_ApplyProfileToAux+0x280>)
 8005ff2:	f00c f861 	bl	80120b8 <puts>
		SM_GetOutputChannel(AUX_CHANNEL)->ref_lut_data = theFuncProfiles[pPresetEnum].lookup_table_data;
 8005ff6:	79fc      	ldrb	r4, [r7, #7]
 8005ff8:	2001      	movs	r0, #1
 8005ffa:	f000 fcd7 	bl	80069ac <SM_GetOutputChannel>
 8005ffe:	4601      	mov	r1, r0
 8006000:	4a3f      	ldr	r2, [pc, #252]	; (8006100 <FuncO_ApplyProfileToAux+0x270>)
 8006002:	00e3      	lsls	r3, r4, #3
 8006004:	4413      	add	r3, r2
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	604b      	str	r3, [r1, #4]
		printf("FuncO_ApplyProfileToAux SM_GetOutputChannel\n");
 800600a:	4841      	ldr	r0, [pc, #260]	; (8006110 <FuncO_ApplyProfileToAux+0x280>)
 800600c:	f00c f854 	bl	80120b8 <puts>
		eAmpSettings_t eTmpVppPreset = SM_GetOutputChannel(AUX_CHANNEL)->amp_profile->amp_setting;
 8006010:	2001      	movs	r0, #1
 8006012:	f000 fccb 	bl	80069ac <SM_GetOutputChannel>
 8006016:	4603      	mov	r3, r0
 8006018:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	73fb      	strb	r3, [r7, #15]
		printf("VPP_ApplyProfileToAux");
 8006020:	483c      	ldr	r0, [pc, #240]	; (8006114 <FuncO_ApplyProfileToAux+0x284>)
 8006022:	f00b ffd5 	bl	8011fd0 <iprintf>
		VPP_ApplyProfileToAux(eTmpVppPreset);
 8006026:	7bfb      	ldrb	r3, [r7, #15]
 8006028:	4618      	mov	r0, r3
 800602a:	f001 f823 	bl	8007074 <VPP_ApplyProfileToAux>
		printf("FuncO_ApplyProfileToAux HAL_TIM_Base_Stop(&htim2)\n");
 800602e:	483a      	ldr	r0, [pc, #232]	; (8006118 <FuncO_ApplyProfileToAux+0x288>)
 8006030:	f00c f842 	bl	80120b8 <puts>
		res = HAL_TIM_Base_Stop(&htim8);
 8006034:	4839      	ldr	r0, [pc, #228]	; (800611c <FuncO_ApplyProfileToAux+0x28c>)
 8006036:	f007 fc13 	bl	800d860 <HAL_TIM_Base_Stop>
 800603a:	4603      	mov	r3, r0
 800603c:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 800603e:	7bbb      	ldrb	r3, [r7, #14]
 8006040:	4619      	mov	r1, r3
 8006042:	4837      	ldr	r0, [pc, #220]	; (8006120 <FuncO_ApplyProfileToAux+0x290>)
 8006044:	f00b ffc4 	bl	8011fd0 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1)\n");
 8006048:	4836      	ldr	r0, [pc, #216]	; (8006124 <FuncO_ApplyProfileToAux+0x294>)
 800604a:	f00c f835 	bl	80120b8 <puts>
		res = HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1);
 800604e:	2100      	movs	r1, #0
 8006050:	4835      	ldr	r0, [pc, #212]	; (8006128 <FuncO_ApplyProfileToAux+0x298>)
 8006052:	f005 fa5f 	bl	800b514 <HAL_DAC_Stop_DMA>
 8006056:	4603      	mov	r3, r0
 8006058:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 800605a:	7bbb      	ldrb	r3, [r7, #14]
 800605c:	4619      	mov	r1, r3
 800605e:	4830      	ldr	r0, [pc, #192]	; (8006120 <FuncO_ApplyProfileToAux+0x290>)
 8006060:	f00b ffb6 	bl	8011fd0 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1)\n");
 8006064:	4831      	ldr	r0, [pc, #196]	; (800612c <FuncO_ApplyProfileToAux+0x29c>)
 8006066:	f00c f827 	bl	80120b8 <puts>
		res = HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(AUX_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 800606a:	2001      	movs	r0, #1
 800606c:	f000 fc9e 	bl	80069ac <SM_GetOutputChannel>
 8006070:	4603      	mov	r3, r0
 8006072:	f103 0208 	add.w	r2, r3, #8
 8006076:	2300      	movs	r3, #0
 8006078:	9300      	str	r3, [sp, #0]
 800607a:	2378      	movs	r3, #120	; 0x78
 800607c:	2100      	movs	r1, #0
 800607e:	482a      	ldr	r0, [pc, #168]	; (8006128 <FuncO_ApplyProfileToAux+0x298>)
 8006080:	f005 f986 	bl	800b390 <HAL_DAC_Start_DMA>
 8006084:	4603      	mov	r3, r0
 8006086:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8006088:	7bbb      	ldrb	r3, [r7, #14]
 800608a:	4619      	mov	r1, r3
 800608c:	4824      	ldr	r0, [pc, #144]	; (8006120 <FuncO_ApplyProfileToAux+0x290>)
 800608e:	f00b ff9f 	bl	8011fd0 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1)\n");
 8006092:	4827      	ldr	r0, [pc, #156]	; (8006130 <FuncO_ApplyProfileToAux+0x2a0>)
 8006094:	f00c f810 	bl	80120b8 <puts>
		res = HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8006098:	2100      	movs	r1, #0
 800609a:	4826      	ldr	r0, [pc, #152]	; (8006134 <FuncO_ApplyProfileToAux+0x2a4>)
 800609c:	f005 fa3a 	bl	800b514 <HAL_DAC_Stop_DMA>
 80060a0:	4603      	mov	r3, r0
 80060a2:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 80060a4:	7bbb      	ldrb	r3, [r7, #14]
 80060a6:	4619      	mov	r1, r3
 80060a8:	481d      	ldr	r0, [pc, #116]	; (8006120 <FuncO_ApplyProfileToAux+0x290>)
 80060aa:	f00b ff91 	bl	8011fd0 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1)\n");
 80060ae:	4822      	ldr	r0, [pc, #136]	; (8006138 <FuncO_ApplyProfileToAux+0x2a8>)
 80060b0:	f00c f802 	bl	80120b8 <puts>
		res = HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 80060b4:	2000      	movs	r0, #0
 80060b6:	f000 fc79 	bl	80069ac <SM_GetOutputChannel>
 80060ba:	4603      	mov	r3, r0
 80060bc:	f103 0208 	add.w	r2, r3, #8
 80060c0:	2300      	movs	r3, #0
 80060c2:	9300      	str	r3, [sp, #0]
 80060c4:	2378      	movs	r3, #120	; 0x78
 80060c6:	2100      	movs	r1, #0
 80060c8:	481a      	ldr	r0, [pc, #104]	; (8006134 <FuncO_ApplyProfileToAux+0x2a4>)
 80060ca:	f005 f961 	bl	800b390 <HAL_DAC_Start_DMA>
 80060ce:	4603      	mov	r3, r0
 80060d0:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 80060d2:	7bbb      	ldrb	r3, [r7, #14]
 80060d4:	4619      	mov	r1, r3
 80060d6:	4812      	ldr	r0, [pc, #72]	; (8006120 <FuncO_ApplyProfileToAux+0x290>)
 80060d8:	f00b ff7a 	bl	8011fd0 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_TIM_Base_Start(&htim2)\n");
 80060dc:	4817      	ldr	r0, [pc, #92]	; (800613c <FuncO_ApplyProfileToAux+0x2ac>)
 80060de:	f00b ffeb 	bl	80120b8 <puts>
		res = HAL_TIM_Base_Start(&htim8);
 80060e2:	480e      	ldr	r0, [pc, #56]	; (800611c <FuncO_ApplyProfileToAux+0x28c>)
 80060e4:	f007 fb8e 	bl	800d804 <HAL_TIM_Base_Start>
 80060e8:	4603      	mov	r3, r0
 80060ea:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 80060ec:	7bbb      	ldrb	r3, [r7, #14]
 80060ee:	4619      	mov	r1, r3
 80060f0:	480b      	ldr	r0, [pc, #44]	; (8006120 <FuncO_ApplyProfileToAux+0x290>)
 80060f2:	f00b ff6d 	bl	8011fd0 <iprintf>
}
 80060f6:	bf00      	nop
 80060f8:	3714      	adds	r7, #20
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd90      	pop	{r4, r7, pc}
 80060fe:	bf00      	nop
 8006100:	20000128 	.word	0x20000128
 8006104:	08015ef0 	.word	0x08015ef0
 8006108:	2000210c 	.word	0x2000210c
 800610c:	08015f18 	.word	0x08015f18
 8006110:	08015f44 	.word	0x08015f44
 8006114:	08015f70 	.word	0x08015f70
 8006118:	08015f88 	.word	0x08015f88
 800611c:	20002a64 	.word	0x20002a64
 8006120:	08015fbc 	.word	0x08015fbc
 8006124:	08015fc8 	.word	0x08015fc8
 8006128:	20002918 	.word	0x20002918
 800612c:	0801600c 	.word	0x0801600c
 8006130:	08016050 	.word	0x08016050
 8006134:	2000292c 	.word	0x2000292c
 8006138:	08016094 	.word	0x08016094
 800613c:	080160d8 	.word	0x080160d8

08006140 <GO_ResetLastEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
void GO_ResetLastEncoderValue()
{
 8006140:	b480      	push	{r7}
 8006142:	af00      	add	r7, sp, #0
	gain_last_encoder_value = 0;
 8006144:	4b03      	ldr	r3, [pc, #12]	; (8006154 <GO_ResetLastEncoderValue+0x14>)
 8006146:	2200      	movs	r2, #0
 8006148:	801a      	strh	r2, [r3, #0]
}
 800614a:	bf00      	nop
 800614c:	46bd      	mov	sp, r7
 800614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006152:	4770      	bx	lr
 8006154:	20002110 	.word	0x20002110

08006158 <GO_MapEncoderPositionToSignalOutput>:
 *	@param None
 *	@retval None
 *
 */
void GO_MapEncoderPositionToSignalOutput(uint16_t pEncoderValue)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b084      	sub	sp, #16
 800615c:	af00      	add	r7, sp, #0
 800615e:	4603      	mov	r3, r0
 8006160:	80fb      	strh	r3, [r7, #6]
	eGainSettings_t temp_gain = SM_GetOutputChannel(SIGNAL_CHANNEL)->gain_profile->gain;
 8006162:	2000      	movs	r0, #0
 8006164:	f000 fc22 	bl	80069ac <SM_GetOutputChannel>
 8006168:	4603      	mov	r3, r0
 800616a:	f8d3 31f0 	ldr.w	r3, [r3, #496]	; 0x1f0
 800616e:	781b      	ldrb	r3, [r3, #0]
 8006170:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > gain_last_encoder_value)
 8006172:	4b15      	ldr	r3, [pc, #84]	; (80061c8 <GO_MapEncoderPositionToSignalOutput+0x70>)
 8006174:	881b      	ldrh	r3, [r3, #0]
 8006176:	88fa      	ldrh	r2, [r7, #6]
 8006178:	429a      	cmp	r2, r3
 800617a:	d90c      	bls.n	8006196 <GO_MapEncoderPositionToSignalOutput+0x3e>
	{
		temp_gain++;
 800617c:	7bfb      	ldrb	r3, [r7, #15]
 800617e:	3301      	adds	r3, #1
 8006180:	73fb      	strb	r3, [r7, #15]
		if(temp_gain > MAX_NUM_GAIN_PRESETS-1) temp_gain = SEVEN_GAIN;
 8006182:	7bfb      	ldrb	r3, [r7, #15]
 8006184:	2b07      	cmp	r3, #7
 8006186:	d901      	bls.n	800618c <GO_MapEncoderPositionToSignalOutput+0x34>
 8006188:	2307      	movs	r3, #7
 800618a:	73fb      	strb	r3, [r7, #15]
		GO_ApplyPresetToSignal(temp_gain);
 800618c:	7bfb      	ldrb	r3, [r7, #15]
 800618e:	4618      	mov	r0, r3
 8006190:	f000 f81c 	bl	80061cc <GO_ApplyPresetToSignal>
 8006194:	e010      	b.n	80061b8 <GO_MapEncoderPositionToSignalOutput+0x60>

	}
	else if (pEncoderValue < gain_last_encoder_value)
 8006196:	4b0c      	ldr	r3, [pc, #48]	; (80061c8 <GO_MapEncoderPositionToSignalOutput+0x70>)
 8006198:	881b      	ldrh	r3, [r3, #0]
 800619a:	88fa      	ldrh	r2, [r7, #6]
 800619c:	429a      	cmp	r2, r3
 800619e:	d20b      	bcs.n	80061b8 <GO_MapEncoderPositionToSignalOutput+0x60>
	{
		temp_gain--;
 80061a0:	7bfb      	ldrb	r3, [r7, #15]
 80061a2:	3b01      	subs	r3, #1
 80061a4:	73fb      	strb	r3, [r7, #15]
		if(temp_gain > MAX_NUM_GAIN_PRESETS-1) temp_gain = ZERO_GAIN;
 80061a6:	7bfb      	ldrb	r3, [r7, #15]
 80061a8:	2b07      	cmp	r3, #7
 80061aa:	d901      	bls.n	80061b0 <GO_MapEncoderPositionToSignalOutput+0x58>
 80061ac:	2300      	movs	r3, #0
 80061ae:	73fb      	strb	r3, [r7, #15]
		GO_ApplyPresetToSignal(temp_gain);
 80061b0:	7bfb      	ldrb	r3, [r7, #15]
 80061b2:	4618      	mov	r0, r3
 80061b4:	f000 f80a 	bl	80061cc <GO_ApplyPresetToSignal>
	}
	gain_last_encoder_value = pEncoderValue;
 80061b8:	4a03      	ldr	r2, [pc, #12]	; (80061c8 <GO_MapEncoderPositionToSignalOutput+0x70>)
 80061ba:	88fb      	ldrh	r3, [r7, #6]
 80061bc:	8013      	strh	r3, [r2, #0]

	// artifically offset PWM signal above DC
	//BO_SetPwmSignalOffsetForGain(temp_gain);

}
 80061be:	bf00      	nop
 80061c0:	3710      	adds	r7, #16
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}
 80061c6:	bf00      	nop
 80061c8:	20002110 	.word	0x20002110

080061cc <GO_ApplyPresetToSignal>:
 *	@param None
 *	@retval None
 *
 */
void GO_ApplyPresetToSignal(eGainSettings_t pPresetEnum)
{
 80061cc:	b590      	push	{r4, r7, lr}
 80061ce:	b083      	sub	sp, #12
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	4603      	mov	r3, r0
 80061d4:	71fb      	strb	r3, [r7, #7]




	SM_GetOutputChannel(SIGNAL_CHANNEL)->gain_profile = &theGainProfiles[pPresetEnum];
 80061d6:	79fc      	ldrb	r4, [r7, #7]
 80061d8:	2000      	movs	r0, #0
 80061da:	f000 fbe7 	bl	80069ac <SM_GetOutputChannel>
 80061de:	4601      	mov	r1, r0
 80061e0:	4623      	mov	r3, r4
 80061e2:	005b      	lsls	r3, r3, #1
 80061e4:	4423      	add	r3, r4
 80061e6:	4a4f      	ldr	r2, [pc, #316]	; (8006324 <GO_ApplyPresetToSignal+0x158>)
 80061e8:	4413      	add	r3, r2
 80061ea:	f8c1 31f0 	str.w	r3, [r1, #496]	; 0x1f0

	switch(pPresetEnum)
 80061ee:	79fb      	ldrb	r3, [r7, #7]
 80061f0:	2b07      	cmp	r3, #7
 80061f2:	f200 8093 	bhi.w	800631c <GO_ApplyPresetToSignal+0x150>
 80061f6:	a201      	add	r2, pc, #4	; (adr r2, 80061fc <GO_ApplyPresetToSignal+0x30>)
 80061f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061fc:	0800621d 	.word	0x0800621d
 8006200:	0800623d 	.word	0x0800623d
 8006204:	0800625d 	.word	0x0800625d
 8006208:	0800627d 	.word	0x0800627d
 800620c:	0800629d 	.word	0x0800629d
 8006210:	080062bd 	.word	0x080062bd
 8006214:	080062dd 	.word	0x080062dd
 8006218:	080062fd 	.word	0x080062fd
	{
		case ZERO_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_RESET);
 800621c:	2200      	movs	r2, #0
 800621e:	2101      	movs	r1, #1
 8006220:	4841      	ldr	r0, [pc, #260]	; (8006328 <GO_ApplyPresetToSignal+0x15c>)
 8006222:	f006 f9f5 	bl	800c610 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_RESET);
 8006226:	2200      	movs	r2, #0
 8006228:	2120      	movs	r1, #32
 800622a:	4840      	ldr	r0, [pc, #256]	; (800632c <GO_ApplyPresetToSignal+0x160>)
 800622c:	f006 f9f0 	bl	800c610 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_RESET);
 8006230:	2200      	movs	r2, #0
 8006232:	2110      	movs	r1, #16
 8006234:	483d      	ldr	r0, [pc, #244]	; (800632c <GO_ApplyPresetToSignal+0x160>)
 8006236:	f006 f9eb 	bl	800c610 <HAL_GPIO_WritePin>
			break;
 800623a:	e06f      	b.n	800631c <GO_ApplyPresetToSignal+0x150>

		case ONE_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_SET);
 800623c:	2201      	movs	r2, #1
 800623e:	2101      	movs	r1, #1
 8006240:	4839      	ldr	r0, [pc, #228]	; (8006328 <GO_ApplyPresetToSignal+0x15c>)
 8006242:	f006 f9e5 	bl	800c610 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_RESET);
 8006246:	2200      	movs	r2, #0
 8006248:	2120      	movs	r1, #32
 800624a:	4838      	ldr	r0, [pc, #224]	; (800632c <GO_ApplyPresetToSignal+0x160>)
 800624c:	f006 f9e0 	bl	800c610 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_RESET);
 8006250:	2200      	movs	r2, #0
 8006252:	2110      	movs	r1, #16
 8006254:	4835      	ldr	r0, [pc, #212]	; (800632c <GO_ApplyPresetToSignal+0x160>)
 8006256:	f006 f9db 	bl	800c610 <HAL_GPIO_WritePin>
			break;
 800625a:	e05f      	b.n	800631c <GO_ApplyPresetToSignal+0x150>

		case TWO_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_RESET);
 800625c:	2200      	movs	r2, #0
 800625e:	2101      	movs	r1, #1
 8006260:	4831      	ldr	r0, [pc, #196]	; (8006328 <GO_ApplyPresetToSignal+0x15c>)
 8006262:	f006 f9d5 	bl	800c610 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_SET);
 8006266:	2201      	movs	r2, #1
 8006268:	2120      	movs	r1, #32
 800626a:	4830      	ldr	r0, [pc, #192]	; (800632c <GO_ApplyPresetToSignal+0x160>)
 800626c:	f006 f9d0 	bl	800c610 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_RESET);
 8006270:	2200      	movs	r2, #0
 8006272:	2110      	movs	r1, #16
 8006274:	482d      	ldr	r0, [pc, #180]	; (800632c <GO_ApplyPresetToSignal+0x160>)
 8006276:	f006 f9cb 	bl	800c610 <HAL_GPIO_WritePin>
			break;
 800627a:	e04f      	b.n	800631c <GO_ApplyPresetToSignal+0x150>

		case THREE_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_SET);
 800627c:	2201      	movs	r2, #1
 800627e:	2101      	movs	r1, #1
 8006280:	4829      	ldr	r0, [pc, #164]	; (8006328 <GO_ApplyPresetToSignal+0x15c>)
 8006282:	f006 f9c5 	bl	800c610 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_SET);
 8006286:	2201      	movs	r2, #1
 8006288:	2120      	movs	r1, #32
 800628a:	4828      	ldr	r0, [pc, #160]	; (800632c <GO_ApplyPresetToSignal+0x160>)
 800628c:	f006 f9c0 	bl	800c610 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_RESET);
 8006290:	2200      	movs	r2, #0
 8006292:	2110      	movs	r1, #16
 8006294:	4825      	ldr	r0, [pc, #148]	; (800632c <GO_ApplyPresetToSignal+0x160>)
 8006296:	f006 f9bb 	bl	800c610 <HAL_GPIO_WritePin>
			break;
 800629a:	e03f      	b.n	800631c <GO_ApplyPresetToSignal+0x150>

		case FOUR_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_RESET);
 800629c:	2200      	movs	r2, #0
 800629e:	2101      	movs	r1, #1
 80062a0:	4821      	ldr	r0, [pc, #132]	; (8006328 <GO_ApplyPresetToSignal+0x15c>)
 80062a2:	f006 f9b5 	bl	800c610 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_RESET);
 80062a6:	2200      	movs	r2, #0
 80062a8:	2120      	movs	r1, #32
 80062aa:	4820      	ldr	r0, [pc, #128]	; (800632c <GO_ApplyPresetToSignal+0x160>)
 80062ac:	f006 f9b0 	bl	800c610 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_SET);
 80062b0:	2201      	movs	r2, #1
 80062b2:	2110      	movs	r1, #16
 80062b4:	481d      	ldr	r0, [pc, #116]	; (800632c <GO_ApplyPresetToSignal+0x160>)
 80062b6:	f006 f9ab 	bl	800c610 <HAL_GPIO_WritePin>
			break;
 80062ba:	e02f      	b.n	800631c <GO_ApplyPresetToSignal+0x150>

		case FIVE_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_SET);
 80062bc:	2201      	movs	r2, #1
 80062be:	2101      	movs	r1, #1
 80062c0:	4819      	ldr	r0, [pc, #100]	; (8006328 <GO_ApplyPresetToSignal+0x15c>)
 80062c2:	f006 f9a5 	bl	800c610 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_RESET);
 80062c6:	2200      	movs	r2, #0
 80062c8:	2120      	movs	r1, #32
 80062ca:	4818      	ldr	r0, [pc, #96]	; (800632c <GO_ApplyPresetToSignal+0x160>)
 80062cc:	f006 f9a0 	bl	800c610 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_SET);
 80062d0:	2201      	movs	r2, #1
 80062d2:	2110      	movs	r1, #16
 80062d4:	4815      	ldr	r0, [pc, #84]	; (800632c <GO_ApplyPresetToSignal+0x160>)
 80062d6:	f006 f99b 	bl	800c610 <HAL_GPIO_WritePin>
			break;
 80062da:	e01f      	b.n	800631c <GO_ApplyPresetToSignal+0x150>

		case SIX_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_RESET);
 80062dc:	2200      	movs	r2, #0
 80062de:	2101      	movs	r1, #1
 80062e0:	4811      	ldr	r0, [pc, #68]	; (8006328 <GO_ApplyPresetToSignal+0x15c>)
 80062e2:	f006 f995 	bl	800c610 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_SET);
 80062e6:	2201      	movs	r2, #1
 80062e8:	2120      	movs	r1, #32
 80062ea:	4810      	ldr	r0, [pc, #64]	; (800632c <GO_ApplyPresetToSignal+0x160>)
 80062ec:	f006 f990 	bl	800c610 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_SET);
 80062f0:	2201      	movs	r2, #1
 80062f2:	2110      	movs	r1, #16
 80062f4:	480d      	ldr	r0, [pc, #52]	; (800632c <GO_ApplyPresetToSignal+0x160>)
 80062f6:	f006 f98b 	bl	800c610 <HAL_GPIO_WritePin>
			break;
 80062fa:	e00f      	b.n	800631c <GO_ApplyPresetToSignal+0x150>

		case SEVEN_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_SET);
 80062fc:	2201      	movs	r2, #1
 80062fe:	2101      	movs	r1, #1
 8006300:	4809      	ldr	r0, [pc, #36]	; (8006328 <GO_ApplyPresetToSignal+0x15c>)
 8006302:	f006 f985 	bl	800c610 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_SET);
 8006306:	2201      	movs	r2, #1
 8006308:	2120      	movs	r1, #32
 800630a:	4808      	ldr	r0, [pc, #32]	; (800632c <GO_ApplyPresetToSignal+0x160>)
 800630c:	f006 f980 	bl	800c610 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_SET);
 8006310:	2201      	movs	r2, #1
 8006312:	2110      	movs	r1, #16
 8006314:	4805      	ldr	r0, [pc, #20]	; (800632c <GO_ApplyPresetToSignal+0x160>)
 8006316:	f006 f97b 	bl	800c610 <HAL_GPIO_WritePin>
			break;
 800631a:	bf00      	nop
	}

}
 800631c:	bf00      	nop
 800631e:	370c      	adds	r7, #12
 8006320:	46bd      	mov	sp, r7
 8006322:	bd90      	pop	{r4, r7, pc}
 8006324:	20000160 	.word	0x20000160
 8006328:	48000400 	.word	0x48000400
 800632c:	48000800 	.word	0x48000800

08006330 <IT_ArbitrateInputTrigger>:
 *	@param None
 *	@retval None
 *
 */
void IT_ArbitrateInputTrigger()
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b082      	sub	sp, #8
 8006334:	af02      	add	r7, sp, #8
	if(IT_GetTriggerStatus())
 8006336:	f000 fa09 	bl	800674c <IT_GetTriggerStatus>
 800633a:	4603      	mov	r3, r0
 800633c:	2b00      	cmp	r3, #0
 800633e:	d020      	beq.n	8006382 <IT_ArbitrateInputTrigger+0x52>
		OUTPUT_TIMER->SMCR &= ~(TIM_SMCR_SMS_2);
		// set status to disabled
*/

		// disable freq count timer
		HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_1);
 8006340:	2100      	movs	r1, #0
 8006342:	484e      	ldr	r0, [pc, #312]	; (800647c <IT_ArbitrateInputTrigger+0x14c>)
 8006344:	f007 fee0 	bl	800e108 <HAL_TIM_IC_Stop_DMA>

		// disable the comparator
		HAL_COMP_Stop(&hcomp1);
 8006348:	484d      	ldr	r0, [pc, #308]	; (8006480 <IT_ArbitrateInputTrigger+0x150>)
 800634a:	f004 fdb7 	bl	800aebc <HAL_COMP_Stop>

		// stop the ADC
		HAL_ADC_Stop_DMA(&hadc1);
 800634e:	484d      	ldr	r0, [pc, #308]	; (8006484 <IT_ArbitrateInputTrigger+0x154>)
 8006350:	f003 fb5a 	bl	8009a08 <HAL_ADC_Stop_DMA>

		GPIOA->AFR[0] &= ~(GPIO_AF1_TIM2);
 8006354:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006358:	6a1b      	ldr	r3, [r3, #32]
 800635a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800635e:	f023 0301 	bic.w	r3, r3, #1
 8006362:	6213      	str	r3, [r2, #32]
		GPIOA->AFR[0] &= ~(GPIO_AF8_COMP1);
 8006364:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006368:	6a1b      	ldr	r3, [r3, #32]
 800636a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800636e:	f023 0308 	bic.w	r3, r3, #8
 8006372:	6213      	str	r3, [r2, #32]


		IT_SetTriggerStatus(DISABLE_TRIGGER);
 8006374:	2000      	movs	r0, #0
 8006376:	f000 f9f5 	bl	8006764 <IT_SetTriggerStatus>

		FuncO_ApplyProfileToSignal(eDefaultFuncPreset);
 800637a:	2000      	movs	r0, #0
 800637c:	f7ff fd2a 	bl	8005dd4 <FuncO_ApplyProfileToSignal>
		}
		// set status to enabled
		IT_SetTriggerStatus(ENABLE_TRIGGER);
	}

}
 8006380:	e079      	b.n	8006476 <IT_ArbitrateInputTrigger+0x146>
		switch(IT_GetActiveTriggerMode())
 8006382:	f000 f9c7 	bl	8006714 <IT_GetActiveTriggerMode>
 8006386:	4603      	mov	r3, r0
 8006388:	2b01      	cmp	r3, #1
 800638a:	d037      	beq.n	80063fc <IT_ArbitrateInputTrigger+0xcc>
 800638c:	2b02      	cmp	r3, #2
 800638e:	d042      	beq.n	8006416 <IT_ArbitrateInputTrigger+0xe6>
 8006390:	2b00      	cmp	r3, #0
 8006392:	d000      	beq.n	8006396 <IT_ArbitrateInputTrigger+0x66>
				break;
 8006394:	e06c      	b.n	8006470 <IT_ArbitrateInputTrigger+0x140>
				HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_SET);		// TS5A3357 Pin6
 8006396:	2201      	movs	r2, #1
 8006398:	f44f 7180 	mov.w	r1, #256	; 0x100
 800639c:	483a      	ldr	r0, [pc, #232]	; (8006488 <IT_ArbitrateInputTrigger+0x158>)
 800639e:	f006 f937 	bl	800c610 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET); 	// TS5A3357 Pin5
 80063a2:	2200      	movs	r2, #0
 80063a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80063a8:	4837      	ldr	r0, [pc, #220]	; (8006488 <IT_ArbitrateInputTrigger+0x158>)
 80063aa:	f006 f931 	bl	800c610 <HAL_GPIO_WritePin>
				HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_1, freq_count_store, MAX_FREQ_COUNT_STORE);
 80063ae:	2308      	movs	r3, #8
 80063b0:	4a36      	ldr	r2, [pc, #216]	; (800648c <IT_ArbitrateInputTrigger+0x15c>)
 80063b2:	2100      	movs	r1, #0
 80063b4:	4831      	ldr	r0, [pc, #196]	; (800647c <IT_ArbitrateInputTrigger+0x14c>)
 80063b6:	f007 fd19 	bl	800ddec <HAL_TIM_IC_Start_DMA>
				GPIOA->MODER &= ~(GPIO_MODER_MODE0_0 | GPIO_MODER_MODE0_1);	// reset mode registers
 80063ba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80063c4:	f023 0303 	bic.w	r3, r3, #3
 80063c8:	6013      	str	r3, [r2, #0]
				GPIOA->MODER |= (GPIO_MODER_MODE0_1);	// set port mode to AF
 80063ca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80063d4:	f043 0302 	orr.w	r3, r3, #2
 80063d8:	6013      	str	r3, [r2, #0]
				GPIOA->AFR[0] &= ~((1 << 0x04) | (1 << 0x03) | (1 << 0x02) | (1 << 0x01));	// reset AF registers - See Table 13 "Alternate Functions" in STM32G474 datasheet
 80063da:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80063de:	6a1b      	ldr	r3, [r3, #32]
 80063e0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80063e4:	f023 031e 	bic.w	r3, r3, #30
 80063e8:	6213      	str	r3, [r2, #32]
				GPIOA->AFR[0] |= GPIO_AF1_TIM2;		// set AF to TIM2_CH1
 80063ea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80063ee:	6a1b      	ldr	r3, [r3, #32]
 80063f0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80063f4:	f043 0301 	orr.w	r3, r3, #1
 80063f8:	6213      	str	r3, [r2, #32]
				break;
 80063fa:	e039      	b.n	8006470 <IT_ArbitrateInputTrigger+0x140>
				HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin6
 80063fc:	2200      	movs	r2, #0
 80063fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006402:	4821      	ldr	r0, [pc, #132]	; (8006488 <IT_ArbitrateInputTrigger+0x158>)
 8006404:	f006 f904 	bl	800c610 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_SET); 		// TS5A3357 Pin5
 8006408:	2201      	movs	r2, #1
 800640a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800640e:	481e      	ldr	r0, [pc, #120]	; (8006488 <IT_ArbitrateInputTrigger+0x158>)
 8006410:	f006 f8fe 	bl	800c610 <HAL_GPIO_WritePin>
				break;
 8006414:	e02c      	b.n	8006470 <IT_ArbitrateInputTrigger+0x140>
				HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_SET);		// TS5A3357 Pin6
 8006416:	2201      	movs	r2, #1
 8006418:	f44f 7180 	mov.w	r1, #256	; 0x100
 800641c:	481a      	ldr	r0, [pc, #104]	; (8006488 <IT_ArbitrateInputTrigger+0x158>)
 800641e:	f006 f8f7 	bl	800c610 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_SET);		// TS5A3357 Pin5
 8006422:	2201      	movs	r2, #1
 8006424:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006428:	4817      	ldr	r0, [pc, #92]	; (8006488 <IT_ArbitrateInputTrigger+0x158>)
 800642a:	f006 f8f1 	bl	800c610 <HAL_GPIO_WritePin>
				HAL_ADC_Start_DMA(&hadc1, adcsteps_measure_store, MAX_ADCSTEPS_MEASURE_STORE);
 800642e:	2210      	movs	r2, #16
 8006430:	4917      	ldr	r1, [pc, #92]	; (8006490 <IT_ArbitrateInputTrigger+0x160>)
 8006432:	4814      	ldr	r0, [pc, #80]	; (8006484 <IT_ArbitrateInputTrigger+0x154>)
 8006434:	f003 fa1a 	bl	800986c <HAL_ADC_Start_DMA>
				OUTPUT_TIMER->CR1 &= ~(TIM_CR1_CEN);
 8006438:	4b16      	ldr	r3, [pc, #88]	; (8006494 <IT_ArbitrateInputTrigger+0x164>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a15      	ldr	r2, [pc, #84]	; (8006494 <IT_ArbitrateInputTrigger+0x164>)
 800643e:	f023 0301 	bic.w	r3, r3, #1
 8006442:	6013      	str	r3, [r2, #0]
				HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8006444:	2100      	movs	r1, #0
 8006446:	4814      	ldr	r0, [pc, #80]	; (8006498 <IT_ArbitrateInputTrigger+0x168>)
 8006448:	f005 f864 	bl	800b514 <HAL_DAC_Stop_DMA>
				HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, adcsteps_measure_store, MAX_ADCSTEPS_MEASURE_STORE, DAC_ALIGN_12B_R);
 800644c:	2300      	movs	r3, #0
 800644e:	9300      	str	r3, [sp, #0]
 8006450:	2310      	movs	r3, #16
 8006452:	4a0f      	ldr	r2, [pc, #60]	; (8006490 <IT_ArbitrateInputTrigger+0x160>)
 8006454:	2100      	movs	r1, #0
 8006456:	4810      	ldr	r0, [pc, #64]	; (8006498 <IT_ArbitrateInputTrigger+0x168>)
 8006458:	f004 ff9a 	bl	800b390 <HAL_DAC_Start_DMA>
				OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
 800645c:	4b0d      	ldr	r3, [pc, #52]	; (8006494 <IT_ArbitrateInputTrigger+0x164>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a0c      	ldr	r2, [pc, #48]	; (8006494 <IT_ArbitrateInputTrigger+0x164>)
 8006462:	f043 0301 	orr.w	r3, r3, #1
 8006466:	6013      	str	r3, [r2, #0]
				FuncO_ApplyProfileToSignal(eDefaultFuncPreset);
 8006468:	2000      	movs	r0, #0
 800646a:	f7ff fcb3 	bl	8005dd4 <FuncO_ApplyProfileToSignal>
				break;
 800646e:	bf00      	nop
		IT_SetTriggerStatus(ENABLE_TRIGGER);
 8006470:	2001      	movs	r0, #1
 8006472:	f000 f977 	bl	8006764 <IT_SetTriggerStatus>
}
 8006476:	bf00      	nop
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}
 800647c:	20002be0 	.word	0x20002be0
 8006480:	200028f4 	.word	0x200028f4
 8006484:	20002828 	.word	0x20002828
 8006488:	48000800 	.word	0x48000800
 800648c:	20002234 	.word	0x20002234
 8006490:	20002114 	.word	0x20002114
 8006494:	40013400 	.word	0x40013400
 8006498:	2000292c 	.word	0x2000292c

0800649c <IT_CycleInputTriggerMode>:
 *	@param None
 *	@retval None
 *
 */
void IT_CycleInputTriggerMode()
{
 800649c:	b580      	push	{r7, lr}
 800649e:	af00      	add	r7, sp, #0
	// change the trigger input mode
	switch(IT_GetActiveTriggerMode())
 80064a0:	f000 f938 	bl	8006714 <IT_GetActiveTriggerMode>
 80064a4:	4603      	mov	r3, r0
 80064a6:	2b01      	cmp	r3, #1
 80064a8:	d008      	beq.n	80064bc <IT_CycleInputTriggerMode+0x20>
 80064aa:	2b02      	cmp	r3, #2
 80064ac:	d00a      	beq.n	80064c4 <IT_CycleInputTriggerMode+0x28>
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d000      	beq.n	80064b4 <IT_CycleInputTriggerMode+0x18>
		case INPUT_TIMER_ADC:
			IT_SetActiveTriggerMode(INPUT_TIMER_TIM);
			break;

		default:
			break;
 80064b2:	e00b      	b.n	80064cc <IT_CycleInputTriggerMode+0x30>
			IT_SetActiveTriggerMode(INPUT_TIMER_COMP);
 80064b4:	2001      	movs	r0, #1
 80064b6:	f000 f939 	bl	800672c <IT_SetActiveTriggerMode>
			break;
 80064ba:	e007      	b.n	80064cc <IT_CycleInputTriggerMode+0x30>
			IT_SetActiveTriggerMode(INPUT_TIMER_ADC);
 80064bc:	2002      	movs	r0, #2
 80064be:	f000 f935 	bl	800672c <IT_SetActiveTriggerMode>
			break;
 80064c2:	e003      	b.n	80064cc <IT_CycleInputTriggerMode+0x30>
			IT_SetActiveTriggerMode(INPUT_TIMER_TIM);
 80064c4:	2000      	movs	r0, #0
 80064c6:	f000 f931 	bl	800672c <IT_SetActiveTriggerMode>
			break;
 80064ca:	bf00      	nop
	}
}
 80064cc:	bf00      	nop
 80064ce:	bd80      	pop	{r7, pc}

080064d0 <HAL_COMP_TriggerCallback>:
 *	@param None
 *	@retval None
 *
 */
void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b082      	sub	sp, #8
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
	if(HAL_COMP_GetOutputLevel(&hcomp1))
 80064d8:	4808      	ldr	r0, [pc, #32]	; (80064fc <HAL_COMP_TriggerCallback+0x2c>)
 80064da:	f004 fd95 	bl	800b008 <HAL_COMP_GetOutputLevel>
 80064de:	4603      	mov	r3, r0
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d004      	beq.n	80064ee <HAL_COMP_TriggerCallback+0x1e>
	{
		comp1_output_value[0] = 4095;
 80064e4:	4b06      	ldr	r3, [pc, #24]	; (8006500 <HAL_COMP_TriggerCallback+0x30>)
 80064e6:	f640 72ff 	movw	r2, #4095	; 0xfff
 80064ea:	601a      	str	r2, [r3, #0]
	}
	else
	{
		comp1_output_value[0] = 0;
	}
}
 80064ec:	e002      	b.n	80064f4 <HAL_COMP_TriggerCallback+0x24>
		comp1_output_value[0] = 0;
 80064ee:	4b04      	ldr	r3, [pc, #16]	; (8006500 <HAL_COMP_TriggerCallback+0x30>)
 80064f0:	2200      	movs	r2, #0
 80064f2:	601a      	str	r2, [r3, #0]
}
 80064f4:	bf00      	nop
 80064f6:	3708      	adds	r7, #8
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}
 80064fc:	200028f4 	.word	0x200028f4
 8006500:	20002228 	.word	0x20002228
 8006504:	00000000 	.word	0x00000000

08006508 <HAL_ADC_ConvCpltCallback>:
 *	@param None
 *	@retval None
 *
 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006508:	b590      	push	{r4, r7, lr}
 800650a:	b085      	sub	sp, #20
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
	// mean average the DMA data set
	avg_adcsteps_measure = 0;
 8006510:	4b29      	ldr	r3, [pc, #164]	; (80065b8 <HAL_ADC_ConvCpltCallback+0xb0>)
 8006512:	f04f 0200 	mov.w	r2, #0
 8006516:	601a      	str	r2, [r3, #0]
	for(int x = 0; x < MAX_ADCSTEPS_MEASURE_STORE; x++)
 8006518:	2300      	movs	r3, #0
 800651a:	60fb      	str	r3, [r7, #12]
 800651c:	e012      	b.n	8006544 <HAL_ADC_ConvCpltCallback+0x3c>
	{
		avg_adcsteps_measure += adcsteps_measure_store[x];
 800651e:	4a27      	ldr	r2, [pc, #156]	; (80065bc <HAL_ADC_ConvCpltCallback+0xb4>)
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006526:	ee07 3a90 	vmov	s15, r3
 800652a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800652e:	4b22      	ldr	r3, [pc, #136]	; (80065b8 <HAL_ADC_ConvCpltCallback+0xb0>)
 8006530:	edd3 7a00 	vldr	s15, [r3]
 8006534:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006538:	4b1f      	ldr	r3, [pc, #124]	; (80065b8 <HAL_ADC_ConvCpltCallback+0xb0>)
 800653a:	edc3 7a00 	vstr	s15, [r3]
	for(int x = 0; x < MAX_ADCSTEPS_MEASURE_STORE; x++)
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	3301      	adds	r3, #1
 8006542:	60fb      	str	r3, [r7, #12]
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2b0f      	cmp	r3, #15
 8006548:	dde9      	ble.n	800651e <HAL_ADC_ConvCpltCallback+0x16>
	}
	avg_adcsteps_measure = avg_adcsteps_measure / MAX_ADCSTEPS_MEASURE_STORE;
 800654a:	4b1b      	ldr	r3, [pc, #108]	; (80065b8 <HAL_ADC_ConvCpltCallback+0xb0>)
 800654c:	ed93 7a00 	vldr	s14, [r3]
 8006550:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8006554:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006558:	4b17      	ldr	r3, [pc, #92]	; (80065b8 <HAL_ADC_ConvCpltCallback+0xb0>)
 800655a:	edc3 7a00 	vstr	s15, [r3]

	// convert ADC steps into voltage
	avg_volt_measure = avg_adcsteps_measure * VOLT_ADC_RESOLUTION;
 800655e:	4b16      	ldr	r3, [pc, #88]	; (80065b8 <HAL_ADC_ConvCpltCallback+0xb0>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4618      	mov	r0, r3
 8006564:	f7fa f818 	bl	8000598 <__aeabi_f2d>
 8006568:	a311      	add	r3, pc, #68	; (adr r3, 80065b0 <HAL_ADC_ConvCpltCallback+0xa8>)
 800656a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800656e:	f7fa f86b 	bl	8000648 <__aeabi_dmul>
 8006572:	4603      	mov	r3, r0
 8006574:	460c      	mov	r4, r1
 8006576:	4618      	mov	r0, r3
 8006578:	4621      	mov	r1, r4
 800657a:	f7fa fb5d 	bl	8000c38 <__aeabi_d2f>
 800657e:	4602      	mov	r2, r0
 8006580:	4b0f      	ldr	r3, [pc, #60]	; (80065c0 <HAL_ADC_ConvCpltCallback+0xb8>)
 8006582:	601a      	str	r2, [r3, #0]

	// find nearest freq in ref table
	uint16_t new_output_period = _GetNearestPeriodToVolts(avg_volt_measure);
 8006584:	4b0e      	ldr	r3, [pc, #56]	; (80065c0 <HAL_ADC_ConvCpltCallback+0xb8>)
 8006586:	edd3 7a00 	vldr	s15, [r3]
 800658a:	eeb0 0a67 	vmov.f32	s0, s15
 800658e:	f000 f87f 	bl	8006690 <_GetNearestPeriodToVolts>
 8006592:	4603      	mov	r3, r0
 8006594:	817b      	strh	r3, [r7, #10]
	if(new_output_period > 0)
 8006596:	897b      	ldrh	r3, [r7, #10]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d005      	beq.n	80065a8 <HAL_ADC_ConvCpltCallback+0xa0>
	{
		// set the output timer to new period
		OUTPUT_TIMER->ARR = new_output_period;
 800659c:	4a09      	ldr	r2, [pc, #36]	; (80065c4 <HAL_ADC_ConvCpltCallback+0xbc>)
 800659e:	897b      	ldrh	r3, [r7, #10]
 80065a0:	62d3      	str	r3, [r2, #44]	; 0x2c
		OUTPUT_TIMER->PSC = 1;
 80065a2:	4b08      	ldr	r3, [pc, #32]	; (80065c4 <HAL_ADC_ConvCpltCallback+0xbc>)
 80065a4:	2201      	movs	r2, #1
 80065a6:	629a      	str	r2, [r3, #40]	; 0x28
	}

}
 80065a8:	bf00      	nop
 80065aa:	3714      	adds	r7, #20
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd90      	pop	{r4, r7, pc}
 80065b0:	51ef8352 	.word	0x51ef8352
 80065b4:	3f4a680d 	.word	0x3f4a680d
 80065b8:	2000225c 	.word	0x2000225c
 80065bc:	20002114 	.word	0x20002114
 80065c0:	20002230 	.word	0x20002230
 80065c4:	40013400 	.word	0x40013400

080065c8 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b085      	sub	sp, #20
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]

	// mean average the DMA data set
	avg_freq_count_period = 0;
 80065d0:	4b29      	ldr	r3, [pc, #164]	; (8006678 <HAL_TIM_IC_CaptureCallback+0xb0>)
 80065d2:	2200      	movs	r2, #0
 80065d4:	601a      	str	r2, [r3, #0]
	for(int x = 0; x < MAX_FREQ_COUNT_STORE; x++)
 80065d6:	2300      	movs	r3, #0
 80065d8:	60fb      	str	r3, [r7, #12]
 80065da:	e00b      	b.n	80065f4 <HAL_TIM_IC_CaptureCallback+0x2c>
	{
		avg_freq_count_period += freq_count_store[x];
 80065dc:	4a27      	ldr	r2, [pc, #156]	; (800667c <HAL_TIM_IC_CaptureCallback+0xb4>)
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80065e4:	4b24      	ldr	r3, [pc, #144]	; (8006678 <HAL_TIM_IC_CaptureCallback+0xb0>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4413      	add	r3, r2
 80065ea:	4a23      	ldr	r2, [pc, #140]	; (8006678 <HAL_TIM_IC_CaptureCallback+0xb0>)
 80065ec:	6013      	str	r3, [r2, #0]
	for(int x = 0; x < MAX_FREQ_COUNT_STORE; x++)
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	3301      	adds	r3, #1
 80065f2:	60fb      	str	r3, [r7, #12]
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2b07      	cmp	r3, #7
 80065f8:	ddf0      	ble.n	80065dc <HAL_TIM_IC_CaptureCallback+0x14>
	}
	avg_freq_count_period /= MAX_FREQ_COUNT_STORE;
 80065fa:	4b1f      	ldr	r3, [pc, #124]	; (8006678 <HAL_TIM_IC_CaptureCallback+0xb0>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	08db      	lsrs	r3, r3, #3
 8006600:	4a1d      	ldr	r2, [pc, #116]	; (8006678 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8006602:	6013      	str	r3, [r2, #0]

	// convert period to hertz
	avg_freq_count_hertz = (float)SM_MCLK / ((float)INPUT_TIMER->PSC * (float)avg_freq_count_period);
 8006604:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800660a:	ee07 3a90 	vmov	s15, r3
 800660e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006612:	4b19      	ldr	r3, [pc, #100]	; (8006678 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	ee07 3a90 	vmov	s15, r3
 800661a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800661e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006622:	eddf 6a17 	vldr	s13, [pc, #92]	; 8006680 <HAL_TIM_IC_CaptureCallback+0xb8>
 8006626:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800662a:	4b16      	ldr	r3, [pc, #88]	; (8006684 <HAL_TIM_IC_CaptureCallback+0xbc>)
 800662c:	edc3 7a00 	vstr	s15, [r3]

	// sync the output timer (DAC) with the input timer
	OUTPUT_TIMER->ARR = avg_freq_count_period;
 8006630:	4a15      	ldr	r2, [pc, #84]	; (8006688 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8006632:	4b11      	ldr	r3, [pc, #68]	; (8006678 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	62d3      	str	r3, [r2, #44]	; 0x2c

	// auto toggle "LF" mode
	if(avg_freq_count_hertz < 50)
 8006638:	4b12      	ldr	r3, [pc, #72]	; (8006684 <HAL_TIM_IC_CaptureCallback+0xbc>)
 800663a:	edd3 7a00 	vldr	s15, [r3]
 800663e:	ed9f 7a13 	vldr	s14, [pc, #76]	; 800668c <HAL_TIM_IC_CaptureCallback+0xc4>
 8006642:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800664a:	d508      	bpl.n	800665e <HAL_TIM_IC_CaptureCallback+0x96>
	{
		INPUT_TIMER->PSC = 8000;
 800664c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006650:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8006654:	629a      	str	r2, [r3, #40]	; 0x28
		OUTPUT_TIMER->PSC = 48;
 8006656:	4b0c      	ldr	r3, [pc, #48]	; (8006688 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8006658:	2230      	movs	r2, #48	; 0x30
 800665a:	629a      	str	r2, [r3, #40]	; 0x28
		OUTPUT_TIMER->PSC = 0;
	}

	//printf("ARR %lu = %4.2fHz\n",avg_freq_count_period, avg_freq_count_hertz);

}
 800665c:	e006      	b.n	800666c <HAL_TIM_IC_CaptureCallback+0xa4>
		INPUT_TIMER->PSC = 128;
 800665e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006662:	2280      	movs	r2, #128	; 0x80
 8006664:	629a      	str	r2, [r3, #40]	; 0x28
		OUTPUT_TIMER->PSC = 0;
 8006666:	4b08      	ldr	r3, [pc, #32]	; (8006688 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8006668:	2200      	movs	r2, #0
 800666a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800666c:	bf00      	nop
 800666e:	3714      	adds	r7, #20
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr
 8006678:	20002254 	.word	0x20002254
 800667c:	20002234 	.word	0x20002234
 8006680:	4d2037a0 	.word	0x4d2037a0
 8006684:	20002258 	.word	0x20002258
 8006688:	40013400 	.word	0x40013400
 800668c:	42480000 	.word	0x42480000

08006690 <_GetNearestPeriodToVolts>:
	}
	return 0.0f;
}

uint16_t _GetNearestPeriodToVolts(float volts)
{
 8006690:	b480      	push	{r7}
 8006692:	b085      	sub	sp, #20
 8006694:	af00      	add	r7, sp, #0
 8006696:	ed87 0a01 	vstr	s0, [r7, #4]
	float error_margin = 0.05;
 800669a:	4b15      	ldr	r3, [pc, #84]	; (80066f0 <_GetNearestPeriodToVolts+0x60>)
 800669c:	60bb      	str	r3, [r7, #8]
	for(int x = 0; x < MAX_VOLTS_PER_OCTAVE_INDEX; x++)
 800669e:	2300      	movs	r3, #0
 80066a0:	60fb      	str	r3, [r7, #12]
 80066a2:	e01b      	b.n	80066dc <_GetNearestPeriodToVolts+0x4c>
	{
		if((volts - theVoltsPerOctaveTable[x].volts) < error_margin)
 80066a4:	4a13      	ldr	r2, [pc, #76]	; (80066f4 <_GetNearestPeriodToVolts+0x64>)
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	011b      	lsls	r3, r3, #4
 80066aa:	4413      	add	r3, r2
 80066ac:	3304      	adds	r3, #4
 80066ae:	edd3 7a00 	vldr	s15, [r3]
 80066b2:	ed97 7a01 	vldr	s14, [r7, #4]
 80066b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80066ba:	ed97 7a02 	vldr	s14, [r7, #8]
 80066be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80066c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066c6:	dd06      	ble.n	80066d6 <_GetNearestPeriodToVolts+0x46>
		{
			return theVoltsPerOctaveTable[x].period;
 80066c8:	4a0a      	ldr	r2, [pc, #40]	; (80066f4 <_GetNearestPeriodToVolts+0x64>)
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	011b      	lsls	r3, r3, #4
 80066ce:	4413      	add	r3, r2
 80066d0:	330c      	adds	r3, #12
 80066d2:	881b      	ldrh	r3, [r3, #0]
 80066d4:	e006      	b.n	80066e4 <_GetNearestPeriodToVolts+0x54>
	for(int x = 0; x < MAX_VOLTS_PER_OCTAVE_INDEX; x++)
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	3301      	adds	r3, #1
 80066da:	60fb      	str	r3, [r7, #12]
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2b27      	cmp	r3, #39	; 0x27
 80066e0:	dde0      	ble.n	80066a4 <_GetNearestPeriodToVolts+0x14>
		}

	}
	return 0.0f;
 80066e2:	2300      	movs	r3, #0
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	3714      	adds	r7, #20
 80066e8:	46bd      	mov	sp, r7
 80066ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ee:	4770      	bx	lr
 80066f0:	3d4ccccd 	.word	0x3d4ccccd
 80066f4:	20000178 	.word	0x20000178

080066f8 <IT_GetAverageFreqCountHertz>:
 *	@param None
 *	@retval None
 *
 */
float IT_GetAverageFreqCountHertz()
{
 80066f8:	b480      	push	{r7}
 80066fa:	af00      	add	r7, sp, #0
	return avg_freq_count_hertz;
 80066fc:	4b04      	ldr	r3, [pc, #16]	; (8006710 <IT_GetAverageFreqCountHertz+0x18>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	ee07 3a90 	vmov	s15, r3
}
 8006704:	eeb0 0a67 	vmov.f32	s0, s15
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr
 8006710:	20002258 	.word	0x20002258

08006714 <IT_GetActiveTriggerMode>:
 *	@param None
 *	@retval None
 *
 */
eTriggerInputMode IT_GetActiveTriggerMode()
{
 8006714:	b480      	push	{r7}
 8006716:	af00      	add	r7, sp, #0
	return activeInputerTriggerMode;
 8006718:	4b03      	ldr	r3, [pc, #12]	; (8006728 <IT_GetActiveTriggerMode+0x14>)
 800671a:	781b      	ldrb	r3, [r3, #0]
}
 800671c:	4618      	mov	r0, r3
 800671e:	46bd      	mov	sp, r7
 8006720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006724:	4770      	bx	lr
 8006726:	bf00      	nop
 8006728:	20002112 	.word	0x20002112

0800672c <IT_SetActiveTriggerMode>:
 *	@param None
 *	@retval None
 *
 */
void IT_SetActiveTriggerMode(eTriggerInputMode newTriggerMode)
{
 800672c:	b480      	push	{r7}
 800672e:	b083      	sub	sp, #12
 8006730:	af00      	add	r7, sp, #0
 8006732:	4603      	mov	r3, r0
 8006734:	71fb      	strb	r3, [r7, #7]
	activeInputerTriggerMode = newTriggerMode;
 8006736:	4a04      	ldr	r2, [pc, #16]	; (8006748 <IT_SetActiveTriggerMode+0x1c>)
 8006738:	79fb      	ldrb	r3, [r7, #7]
 800673a:	7013      	strb	r3, [r2, #0]
}
 800673c:	bf00      	nop
 800673e:	370c      	adds	r7, #12
 8006740:	46bd      	mov	sp, r7
 8006742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006746:	4770      	bx	lr
 8006748:	20002112 	.word	0x20002112

0800674c <IT_GetTriggerStatus>:
 *	@param None
 *	@retval None
 *
 */
eTriggerInput IT_GetTriggerStatus()
{
 800674c:	b480      	push	{r7}
 800674e:	af00      	add	r7, sp, #0
	return isTriggerInputEnabled;
 8006750:	4b03      	ldr	r3, [pc, #12]	; (8006760 <IT_GetTriggerStatus+0x14>)
 8006752:	781b      	ldrb	r3, [r3, #0]
}
 8006754:	4618      	mov	r0, r3
 8006756:	46bd      	mov	sp, r7
 8006758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675c:	4770      	bx	lr
 800675e:	bf00      	nop
 8006760:	20002113 	.word	0x20002113

08006764 <IT_SetTriggerStatus>:
 *	@param None
 *	@retval None
 *
 */
void IT_SetTriggerStatus(eTriggerInput newTriggerStatus)
{
 8006764:	b480      	push	{r7}
 8006766:	b083      	sub	sp, #12
 8006768:	af00      	add	r7, sp, #0
 800676a:	4603      	mov	r3, r0
 800676c:	71fb      	strb	r3, [r7, #7]
	isTriggerInputEnabled = newTriggerStatus;
 800676e:	4a04      	ldr	r2, [pc, #16]	; (8006780 <IT_SetTriggerStatus+0x1c>)
 8006770:	79fb      	ldrb	r3, [r7, #7]
 8006772:	7013      	strb	r3, [r2, #0]
}
 8006774:	bf00      	nop
 8006776:	370c      	adds	r7, #12
 8006778:	46bd      	mov	sp, r7
 800677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677e:	4770      	bx	lr
 8006780:	20002113 	.word	0x20002113

08006784 <SM_Init>:
void _InitOutputChannels();
void _InitAmpProfiles();
void _InitGainInDecibels();

void SM_Init()
{
 8006784:	b580      	push	{r7, lr}
 8006786:	af00      	add	r7, sp, #0

	FreqO_InitFreqProfiles();
 8006788:	f7fe ff84 	bl	8005694 <FreqO_InitFreqProfiles>

	_InitOutputChannels();
 800678c:	f000 f8ae 	bl	80068ec <_InitOutputChannels>
	_InitAmpProfiles();
 8006790:	f000 f824 	bl	80067dc <_InitAmpProfiles>

	// Start OFFSET DAC and set to positive
	HAL_DAC_Start(&hdac1, DAC1_CHANNEL_2);
 8006794:	2110      	movs	r1, #16
 8006796:	480f      	ldr	r0, [pc, #60]	; (80067d4 <SM_Init+0x50>)
 8006798:	f004 fda7 	bl	800b2ea <HAL_DAC_Start>
	HAL_GPIO_WritePin(OFFSET_ENABLE_GPIO_Port, OFFSET_ENABLE_Pin, GPIO_PIN_SET);
 800679c:	2201      	movs	r2, #1
 800679e:	2108      	movs	r1, #8
 80067a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80067a4:	f005 ff34 	bl	800c610 <HAL_GPIO_WritePin>

	// send trigger input out to dac
	//HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, volt_measure_store, MAX_VOLT_MEASURE_STORE, DAC_ALIGN_12B_R);

	// Start DAC trigger timer
	OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
 80067a8:	4b0b      	ldr	r3, [pc, #44]	; (80067d8 <SM_Init+0x54>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a0a      	ldr	r2, [pc, #40]	; (80067d8 <SM_Init+0x54>)
 80067ae:	f043 0301 	orr.w	r3, r3, #1
 80067b2:	6013      	str	r3, [r2, #0]

	// Set the SIGNAL function and amplitude
	FuncO_ApplyProfileToSignal(eDefaultFuncPreset);
 80067b4:	2000      	movs	r0, #0
 80067b6:	f7ff fb0d 	bl	8005dd4 <FuncO_ApplyProfileToSignal>
	VPP_ApplyProfileToSignal(eDefaultVppPreset);
 80067ba:	2059      	movs	r0, #89	; 0x59
 80067bc:	f000 fc2c 	bl	8007018 <VPP_ApplyProfileToSignal>

	// set the AUX function
	FuncO_ApplyProfileToAux(eDefaultFuncPreset);
 80067c0:	2000      	movs	r0, #0
 80067c2:	f7ff fb65 	bl	8005e90 <FuncO_ApplyProfileToAux>

	// set freq for both SIGNAL and AUX
	FreqO_ApplyProfile(eDefaultFreqPreset);
 80067c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80067ca:	f7ff f873 	bl	80058b4 <FreqO_ApplyProfile>

}
 80067ce:	bf00      	nop
 80067d0:	bd80      	pop	{r7, pc}
 80067d2:	bf00      	nop
 80067d4:	2000292c 	.word	0x2000292c
 80067d8:	40013400 	.word	0x40013400

080067dc <_InitAmpProfiles>:

void _InitAmpProfiles()
{
 80067dc:	b590      	push	{r4, r7, lr}
 80067de:	b08b      	sub	sp, #44	; 0x2c
 80067e0:	af00      	add	r7, sp, #0

	// =(TARGETVPP/LUTVPP)/GAIN
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 80067e2:	2300      	movs	r3, #0
 80067e4:	627b      	str	r3, [r7, #36]	; 0x24
 80067e6:	e033      	b.n	8006850 <_InitAmpProfiles+0x74>
	{
		float this_amp_value = theAmpProfiles[i].amp_value;
 80067e8:	493c      	ldr	r1, [pc, #240]	; (80068dc <_InitAmpProfiles+0x100>)
 80067ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067ec:	4613      	mov	r3, r2
 80067ee:	00db      	lsls	r3, r3, #3
 80067f0:	1a9b      	subs	r3, r3, r2
 80067f2:	009b      	lsls	r3, r3, #2
 80067f4:	440b      	add	r3, r1
 80067f6:	3304      	adds	r3, #4
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	613b      	str	r3, [r7, #16]
		float this_lut_vpp = LUT_VPP;
 80067fc:	4b38      	ldr	r3, [pc, #224]	; (80068e0 <_InitAmpProfiles+0x104>)
 80067fe:	60fb      	str	r3, [r7, #12]
		float this_gain_preset = (float)theAmpProfiles[i].gain_preset;
 8006800:	4936      	ldr	r1, [pc, #216]	; (80068dc <_InitAmpProfiles+0x100>)
 8006802:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006804:	4613      	mov	r3, r2
 8006806:	00db      	lsls	r3, r3, #3
 8006808:	1a9b      	subs	r3, r3, r2
 800680a:	009b      	lsls	r3, r3, #2
 800680c:	440b      	add	r3, r1
 800680e:	3308      	adds	r3, #8
 8006810:	781b      	ldrb	r3, [r3, #0]
 8006812:	ee07 3a90 	vmov	s15, r3
 8006816:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800681a:	edc7 7a02 	vstr	s15, [r7, #8]
		float new_ngc = ( (this_amp_value / this_lut_vpp) / this_gain_preset);
 800681e:	ed97 7a04 	vldr	s14, [r7, #16]
 8006822:	edd7 7a03 	vldr	s15, [r7, #12]
 8006826:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800682a:	ed97 7a02 	vldr	s14, [r7, #8]
 800682e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006832:	edc7 7a01 	vstr	s15, [r7, #4]
		theAmpProfiles[i].neg_gain_coeff = new_ngc;
 8006836:	4929      	ldr	r1, [pc, #164]	; (80068dc <_InitAmpProfiles+0x100>)
 8006838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800683a:	4613      	mov	r3, r2
 800683c:	00db      	lsls	r3, r3, #3
 800683e:	1a9b      	subs	r3, r3, r2
 8006840:	009b      	lsls	r3, r3, #2
 8006842:	440b      	add	r3, r1
 8006844:	3310      	adds	r3, #16
 8006846:	687a      	ldr	r2, [r7, #4]
 8006848:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 800684a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800684c:	3301      	adds	r3, #1
 800684e:	627b      	str	r3, [r7, #36]	; 0x24
 8006850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006852:	2b61      	cmp	r3, #97	; 0x61
 8006854:	ddc8      	ble.n	80067e8 <_InitAmpProfiles+0xc>
	}

	// =20*LOG10(TARGETVPP/0.001)
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 8006856:	2300      	movs	r3, #0
 8006858:	623b      	str	r3, [r7, #32]
 800685a:	e037      	b.n	80068cc <_InitAmpProfiles+0xf0>
	{
		float decibel_mvolt_ref = 0.001;
 800685c:	4b21      	ldr	r3, [pc, #132]	; (80068e4 <_InitAmpProfiles+0x108>)
 800685e:	61fb      	str	r3, [r7, #28]
		float this_amp_value = theAmpProfiles[i].amp_value;
 8006860:	491e      	ldr	r1, [pc, #120]	; (80068dc <_InitAmpProfiles+0x100>)
 8006862:	6a3a      	ldr	r2, [r7, #32]
 8006864:	4613      	mov	r3, r2
 8006866:	00db      	lsls	r3, r3, #3
 8006868:	1a9b      	subs	r3, r3, r2
 800686a:	009b      	lsls	r3, r3, #2
 800686c:	440b      	add	r3, r1
 800686e:	3304      	adds	r3, #4
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	61bb      	str	r3, [r7, #24]
		float new_gain_decibels = 20 * log10( this_amp_value / decibel_mvolt_ref );
 8006874:	ed97 7a06 	vldr	s14, [r7, #24]
 8006878:	edd7 7a07 	vldr	s15, [r7, #28]
 800687c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006880:	ee16 0a90 	vmov	r0, s13
 8006884:	f7f9 fe88 	bl	8000598 <__aeabi_f2d>
 8006888:	4603      	mov	r3, r0
 800688a:	460c      	mov	r4, r1
 800688c:	ec44 3b10 	vmov	d0, r3, r4
 8006890:	f00d fcaa 	bl	80141e8 <log10>
 8006894:	ec51 0b10 	vmov	r0, r1, d0
 8006898:	f04f 0200 	mov.w	r2, #0
 800689c:	4b12      	ldr	r3, [pc, #72]	; (80068e8 <_InitAmpProfiles+0x10c>)
 800689e:	f7f9 fed3 	bl	8000648 <__aeabi_dmul>
 80068a2:	4603      	mov	r3, r0
 80068a4:	460c      	mov	r4, r1
 80068a6:	4618      	mov	r0, r3
 80068a8:	4621      	mov	r1, r4
 80068aa:	f7fa f9c5 	bl	8000c38 <__aeabi_d2f>
 80068ae:	4603      	mov	r3, r0
 80068b0:	617b      	str	r3, [r7, #20]
		theAmpProfiles[i].gain_decibels = new_gain_decibels;
 80068b2:	490a      	ldr	r1, [pc, #40]	; (80068dc <_InitAmpProfiles+0x100>)
 80068b4:	6a3a      	ldr	r2, [r7, #32]
 80068b6:	4613      	mov	r3, r2
 80068b8:	00db      	lsls	r3, r3, #3
 80068ba:	1a9b      	subs	r3, r3, r2
 80068bc:	009b      	lsls	r3, r3, #2
 80068be:	440b      	add	r3, r1
 80068c0:	330c      	adds	r3, #12
 80068c2:	697a      	ldr	r2, [r7, #20]
 80068c4:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 80068c6:	6a3b      	ldr	r3, [r7, #32]
 80068c8:	3301      	adds	r3, #1
 80068ca:	623b      	str	r3, [r7, #32]
 80068cc:	6a3b      	ldr	r3, [r7, #32]
 80068ce:	2b61      	cmp	r3, #97	; 0x61
 80068d0:	ddc4      	ble.n	800685c <_InitAmpProfiles+0x80>

	}
}
 80068d2:	bf00      	nop
 80068d4:	372c      	adds	r7, #44	; 0x2c
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd90      	pop	{r4, r7, pc}
 80068da:	bf00      	nop
 80068dc:	200003f8 	.word	0x200003f8
 80068e0:	402ccccd 	.word	0x402ccccd
 80068e4:	3a83126f 	.word	0x3a83126f
 80068e8:	40340000 	.word	0x40340000

080068ec <_InitOutputChannels>:

void _InitOutputChannels()
{
 80068ec:	b480      	push	{r7}
 80068ee:	b083      	sub	sp, #12
 80068f0:	af00      	add	r7, sp, #0
	// initialise the SIGNAL output channel
	SignalChannel.channel = SIGNAL_CHANNEL;
 80068f2:	4b28      	ldr	r3, [pc, #160]	; (8006994 <_InitOutputChannels+0xa8>)
 80068f4:	2200      	movs	r2, #0
 80068f6:	701a      	strb	r2, [r3, #0]
	SignalChannel.ref_lut_data = theFuncProfiles[SINE_FUNC_MODE].lookup_table_data;
 80068f8:	4b27      	ldr	r3, [pc, #156]	; (8006998 <_InitOutputChannels+0xac>)
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	4a25      	ldr	r2, [pc, #148]	; (8006994 <_InitOutputChannels+0xa8>)
 80068fe:	6053      	str	r3, [r2, #4]
	SignalChannel.func_profile = &theFuncProfiles[eDefaultFuncPreset];
 8006900:	4b24      	ldr	r3, [pc, #144]	; (8006994 <_InitOutputChannels+0xa8>)
 8006902:	4a25      	ldr	r2, [pc, #148]	; (8006998 <_InitOutputChannels+0xac>)
 8006904:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8

	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006908:	2300      	movs	r3, #0
 800690a:	607b      	str	r3, [r7, #4]
 800690c:	e00b      	b.n	8006926 <_InitOutputChannels+0x3a>
		SignalChannel.dsp_lut_data[i] = sine_data_table_3600[i];
 800690e:	4a23      	ldr	r2, [pc, #140]	; (800699c <_InitOutputChannels+0xb0>)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006916:	491f      	ldr	r1, [pc, #124]	; (8006994 <_InitOutputChannels+0xa8>)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	3302      	adds	r3, #2
 800691c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	3301      	adds	r3, #1
 8006924:	607b      	str	r3, [r7, #4]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2b77      	cmp	r3, #119	; 0x77
 800692a:	ddf0      	ble.n	800690e <_InitOutputChannels+0x22>

	SignalChannel.amp_profile = &theAmpProfiles[eDefaultVppPreset];
 800692c:	4b19      	ldr	r3, [pc, #100]	; (8006994 <_InitOutputChannels+0xa8>)
 800692e:	4a1c      	ldr	r2, [pc, #112]	; (80069a0 <_InitOutputChannels+0xb4>)
 8006930:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
	SignalChannel.gain_profile = &theGainProfiles[eDefaultGainPreset];
 8006934:	4b17      	ldr	r3, [pc, #92]	; (8006994 <_InitOutputChannels+0xa8>)
 8006936:	4a1b      	ldr	r2, [pc, #108]	; (80069a4 <_InitOutputChannels+0xb8>)
 8006938:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0

	// initialise the Aux output channel
	AuxChannel.channel = AUX_CHANNEL;
 800693c:	4b1a      	ldr	r3, [pc, #104]	; (80069a8 <_InitOutputChannels+0xbc>)
 800693e:	2201      	movs	r2, #1
 8006940:	701a      	strb	r2, [r3, #0]
	AuxChannel.ref_lut_data = theFuncProfiles[SINE_FUNC_MODE].lookup_table_data;
 8006942:	4b15      	ldr	r3, [pc, #84]	; (8006998 <_InitOutputChannels+0xac>)
 8006944:	685b      	ldr	r3, [r3, #4]
 8006946:	4a18      	ldr	r2, [pc, #96]	; (80069a8 <_InitOutputChannels+0xbc>)
 8006948:	6053      	str	r3, [r2, #4]
	AuxChannel.func_profile = &theFuncProfiles[eDefaultFuncPreset];
 800694a:	4b17      	ldr	r3, [pc, #92]	; (80069a8 <_InitOutputChannels+0xbc>)
 800694c:	4a12      	ldr	r2, [pc, #72]	; (8006998 <_InitOutputChannels+0xac>)
 800694e:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8

	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006952:	2300      	movs	r3, #0
 8006954:	603b      	str	r3, [r7, #0]
 8006956:	e00b      	b.n	8006970 <_InitOutputChannels+0x84>
		AuxChannel.dsp_lut_data[i] = sine_data_table_3600[i];
 8006958:	4a10      	ldr	r2, [pc, #64]	; (800699c <_InitOutputChannels+0xb0>)
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006960:	4911      	ldr	r1, [pc, #68]	; (80069a8 <_InitOutputChannels+0xbc>)
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	3302      	adds	r3, #2
 8006966:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	3301      	adds	r3, #1
 800696e:	603b      	str	r3, [r7, #0]
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	2b77      	cmp	r3, #119	; 0x77
 8006974:	ddf0      	ble.n	8006958 <_InitOutputChannels+0x6c>

	AuxChannel.amp_profile = &theAmpProfiles[eDefaultVppPreset];
 8006976:	4b0c      	ldr	r3, [pc, #48]	; (80069a8 <_InitOutputChannels+0xbc>)
 8006978:	4a09      	ldr	r2, [pc, #36]	; (80069a0 <_InitOutputChannels+0xb4>)
 800697a:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
	AuxChannel.gain_profile = &theGainProfiles[eDefaultGainPreset];
 800697e:	4b0a      	ldr	r3, [pc, #40]	; (80069a8 <_InitOutputChannels+0xbc>)
 8006980:	4a08      	ldr	r2, [pc, #32]	; (80069a4 <_InitOutputChannels+0xb8>)
 8006982:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0


}
 8006986:	bf00      	nop
 8006988:	370c      	adds	r7, #12
 800698a:	46bd      	mov	sp, r7
 800698c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006990:	4770      	bx	lr
 8006992:	bf00      	nop
 8006994:	20002260 	.word	0x20002260
 8006998:	20000128 	.word	0x20000128
 800699c:	20001734 	.word	0x20001734
 80069a0:	20000db4 	.word	0x20000db4
 80069a4:	20000175 	.word	0x20000175
 80069a8:	20002454 	.word	0x20002454

080069ac <SM_GetOutputChannel>:

sOutputChannel_t * SM_GetOutputChannel(eOutputChannel_t pChannel)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b083      	sub	sp, #12
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	4603      	mov	r3, r0
 80069b4:	71fb      	strb	r3, [r7, #7]

	if(!pChannel)
 80069b6:	79fb      	ldrb	r3, [r7, #7]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d101      	bne.n	80069c0 <SM_GetOutputChannel+0x14>
		return &SignalChannel;
 80069bc:	4b04      	ldr	r3, [pc, #16]	; (80069d0 <SM_GetOutputChannel+0x24>)
 80069be:	e000      	b.n	80069c2 <SM_GetOutputChannel+0x16>
	else
		return &AuxChannel;
 80069c0:	4b04      	ldr	r3, [pc, #16]	; (80069d4 <SM_GetOutputChannel+0x28>)
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	370c      	adds	r7, #12
 80069c6:	46bd      	mov	sp, r7
 80069c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069cc:	4770      	bx	lr
 80069ce:	bf00      	nop
 80069d0:	20002260 	.word	0x20002260
 80069d4:	20002454 	.word	0x20002454

080069d8 <SM_EnablePwmToAux>:
 *	@param None
 *	@retval None
 *
 */
void SM_EnablePwmToAux()
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b096      	sub	sp, #88	; 0x58
 80069dc:	af00      	add	r7, sp, #0
	printf("SM_EnablePwmToAux\n");
 80069de:	4889      	ldr	r0, [pc, #548]	; (8006c04 <SM_EnablePwmToAux+0x22c>)
 80069e0:	f00b fb6a 	bl	80120b8 <puts>

	HAL_StatusTypeDef res = 0;
 80069e4:	2300      	movs	r3, #0
 80069e6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80069ea:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80069ee:	2200      	movs	r2, #0
 80069f0:	601a      	str	r2, [r3, #0]
 80069f2:	605a      	str	r2, [r3, #4]
 80069f4:	609a      	str	r2, [r3, #8]
 80069f6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80069f8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80069fc:	2200      	movs	r2, #0
 80069fe:	601a      	str	r2, [r3, #0]
 8006a00:	605a      	str	r2, [r3, #4]
 8006a02:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8006a04:	f107 031c 	add.w	r3, r7, #28
 8006a08:	2200      	movs	r2, #0
 8006a0a:	601a      	str	r2, [r3, #0]
 8006a0c:	605a      	str	r2, [r3, #4]
 8006a0e:	609a      	str	r2, [r3, #8]
 8006a10:	60da      	str	r2, [r3, #12]
 8006a12:	611a      	str	r2, [r3, #16]
 8006a14:	615a      	str	r2, [r3, #20]
 8006a16:	619a      	str	r2, [r3, #24]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a18:	f107 0308 	add.w	r3, r7, #8
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	601a      	str	r2, [r3, #0]
 8006a20:	605a      	str	r2, [r3, #4]
 8006a22:	609a      	str	r2, [r3, #8]
 8006a24:	60da      	str	r2, [r3, #12]
 8006a26:	611a      	str	r2, [r3, #16]


	htim3.Instance = PWM_AUX_OUT_TIM;
 8006a28:	4b77      	ldr	r3, [pc, #476]	; (8006c08 <SM_EnablePwmToAux+0x230>)
 8006a2a:	4a78      	ldr	r2, [pc, #480]	; (8006c0c <SM_EnablePwmToAux+0x234>)
 8006a2c:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8006a2e:	4b76      	ldr	r3, [pc, #472]	; (8006c08 <SM_EnablePwmToAux+0x230>)
 8006a30:	2200      	movs	r2, #0
 8006a32:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8006a34:	4b74      	ldr	r3, [pc, #464]	; (8006c08 <SM_EnablePwmToAux+0x230>)
 8006a36:	2210      	movs	r2, #16
 8006a38:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 1;
 8006a3a:	4b73      	ldr	r3, [pc, #460]	; (8006c08 <SM_EnablePwmToAux+0x230>)
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8006a40:	4b71      	ldr	r3, [pc, #452]	; (8006c08 <SM_EnablePwmToAux+0x230>)
 8006a42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a46:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006a48:	4b6f      	ldr	r3, [pc, #444]	; (8006c08 <SM_EnablePwmToAux+0x230>)
 8006a4a:	2280      	movs	r2, #128	; 0x80
 8006a4c:	619a      	str	r2, [r3, #24]
	if ((res == HAL_TIM_Base_Init(&htim3)) != HAL_OK)
 8006a4e:	486e      	ldr	r0, [pc, #440]	; (8006c08 <SM_EnablePwmToAux+0x230>)
 8006a50:	f006 fe80 	bl	800d754 <HAL_TIM_Base_Init>
 8006a54:	4603      	mov	r3, r0
 8006a56:	461a      	mov	r2, r3
 8006a58:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d107      	bne.n	8006a70 <SM_EnablePwmToAux+0x98>
	{
		printf("SM_EnablePwmToAux HAL_TIM_Base_Init() Result:%u\n",res);
 8006a60:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006a64:	4619      	mov	r1, r3
 8006a66:	486a      	ldr	r0, [pc, #424]	; (8006c10 <SM_EnablePwmToAux+0x238>)
 8006a68:	f00b fab2 	bl	8011fd0 <iprintf>
		Error_Handler();
 8006a6c:	f001 fb9a 	bl	80081a4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006a70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006a74:	647b      	str	r3, [r7, #68]	; 0x44
	if ((res == HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig)) != HAL_OK)
 8006a76:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006a7a:	4619      	mov	r1, r3
 8006a7c:	4862      	ldr	r0, [pc, #392]	; (8006c08 <SM_EnablePwmToAux+0x230>)
 8006a7e:	f007 ffd9 	bl	800ea34 <HAL_TIM_ConfigClockSource>
 8006a82:	4603      	mov	r3, r0
 8006a84:	461a      	mov	r2, r3
 8006a86:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d107      	bne.n	8006a9e <SM_EnablePwmToAux+0xc6>
	{
		printf("SM_EnablePwmToAux HAL_TIM_ConfigClockSource() Result:%u\n",res);
 8006a8e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006a92:	4619      	mov	r1, r3
 8006a94:	485f      	ldr	r0, [pc, #380]	; (8006c14 <SM_EnablePwmToAux+0x23c>)
 8006a96:	f00b fa9b 	bl	8011fd0 <iprintf>
		Error_Handler();
 8006a9a:	f001 fb83 	bl	80081a4 <Error_Handler>
	}
	if ((res == HAL_TIM_PWM_Init(&htim3)) != HAL_OK)
 8006a9e:	485a      	ldr	r0, [pc, #360]	; (8006c08 <SM_EnablePwmToAux+0x230>)
 8006aa0:	f006 ff6b 	bl	800d97a <HAL_TIM_PWM_Init>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	461a      	mov	r2, r3
 8006aa8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d107      	bne.n	8006ac0 <SM_EnablePwmToAux+0xe8>
	{
		printf("SM_EnablePwmToAux HAL_TIM_PWM_Init() Result:%u\n",res);
 8006ab0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006ab4:	4619      	mov	r1, r3
 8006ab6:	4858      	ldr	r0, [pc, #352]	; (8006c18 <SM_EnablePwmToAux+0x240>)
 8006ab8:	f00b fa8a 	bl	8011fd0 <iprintf>
		Error_Handler();
 8006abc:	f001 fb72 	bl	80081a4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8006ac0:	2320      	movs	r3, #32
 8006ac2:	63bb      	str	r3, [r7, #56]	; 0x38
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	643b      	str	r3, [r7, #64]	; 0x40
	if ((res == HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)) != HAL_OK)
 8006ac8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006acc:	4619      	mov	r1, r3
 8006ace:	484e      	ldr	r0, [pc, #312]	; (8006c08 <SM_EnablePwmToAux+0x230>)
 8006ad0:	f009 f87a 	bl	800fbc8 <HAL_TIMEx_MasterConfigSynchronization>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	461a      	mov	r2, r3
 8006ad8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d107      	bne.n	8006af0 <SM_EnablePwmToAux+0x118>
	{
		printf("SM_EnablePwmToAux HAL_TIMEx_MasterConfigSynchronization() Result:%u\n",res);
 8006ae0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006ae4:	4619      	mov	r1, r3
 8006ae6:	484d      	ldr	r0, [pc, #308]	; (8006c1c <SM_EnablePwmToAux+0x244>)
 8006ae8:	f00b fa72 	bl	8011fd0 <iprintf>
		Error_Handler();
 8006aec:	f001 fb5a 	bl	80081a4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006af0:	2360      	movs	r3, #96	; 0x60
 8006af2:	61fb      	str	r3, [r7, #28]
	sConfigOC.Pulse = 0;
 8006af4:	2300      	movs	r3, #0
 8006af6:	623b      	str	r3, [r7, #32]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006af8:	2300      	movs	r3, #0
 8006afa:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006afc:	2300      	movs	r3, #0
 8006afe:	62fb      	str	r3, [r7, #44]	; 0x2c
	if ((res == HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)) != HAL_OK)
 8006b00:	f107 031c 	add.w	r3, r7, #28
 8006b04:	2200      	movs	r2, #0
 8006b06:	4619      	mov	r1, r3
 8006b08:	483f      	ldr	r0, [pc, #252]	; (8006c08 <SM_EnablePwmToAux+0x230>)
 8006b0a:	f007 fe83 	bl	800e814 <HAL_TIM_PWM_ConfigChannel>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	461a      	mov	r2, r3
 8006b12:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d107      	bne.n	8006b2a <SM_EnablePwmToAux+0x152>
	{
		printf("SM_EnablePwmToAux HAL_TIM_PWM_ConfigChannel() Result:%u\n",res);
 8006b1a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006b1e:	4619      	mov	r1, r3
 8006b20:	483f      	ldr	r0, [pc, #252]	; (8006c20 <SM_EnablePwmToAux+0x248>)
 8006b22:	f00b fa55 	bl	8011fd0 <iprintf>
		Error_Handler();
 8006b26:	f001 fb3d 	bl	80081a4 <Error_Handler>
	}


	// Timer Post Initialization
	printf("SM_EnablePwmToAux: __HAL_RCC_GPIOA_CLK_ENABLE\n");
 8006b2a:	483e      	ldr	r0, [pc, #248]	; (8006c24 <SM_EnablePwmToAux+0x24c>)
 8006b2c:	f00b fac4 	bl	80120b8 <puts>
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8006b30:	4b3d      	ldr	r3, [pc, #244]	; (8006c28 <SM_EnablePwmToAux+0x250>)
 8006b32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b34:	4a3c      	ldr	r2, [pc, #240]	; (8006c28 <SM_EnablePwmToAux+0x250>)
 8006b36:	f043 0301 	orr.w	r3, r3, #1
 8006b3a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006b3c:	4b3a      	ldr	r3, [pc, #232]	; (8006c28 <SM_EnablePwmToAux+0x250>)
 8006b3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b40:	f003 0301 	and.w	r3, r3, #1
 8006b44:	607b      	str	r3, [r7, #4]
 8006b46:	687b      	ldr	r3, [r7, #4]
	/**PWM_AUX_OUT_TIM GPIO Configuration
	PA4     ------> PWM_AUX_OUT_TIM_CH2
	*/
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006b48:	2340      	movs	r3, #64	; 0x40
 8006b4a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b4c:	2302      	movs	r3, #2
 8006b4e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b50:	2300      	movs	r3, #0
 8006b52:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b54:	2300      	movs	r3, #0
 8006b56:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006b58:	2302      	movs	r3, #2
 8006b5a:	61bb      	str	r3, [r7, #24]
	printf("SM_EnablePwmToAux: HAL_GPIO_Init\n");
 8006b5c:	4833      	ldr	r0, [pc, #204]	; (8006c2c <SM_EnablePwmToAux+0x254>)
 8006b5e:	f00b faab 	bl	80120b8 <puts>
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b62:	f107 0308 	add.w	r3, r7, #8
 8006b66:	4619      	mov	r1, r3
 8006b68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006b6c:	f005 faec 	bl	800c148 <HAL_GPIO_Init>


	// PWM_AUX_OUT_TIM_MspInit 0

	/* PWM_AUX_OUT_TIM clock enable */
	printf("SM_EnablePwmToAux: __HAL_RCC_PWM_AUX_OUT_TIM_CLK_ENABLE\n");
 8006b70:	482f      	ldr	r0, [pc, #188]	; (8006c30 <SM_EnablePwmToAux+0x258>)
 8006b72:	f00b faa1 	bl	80120b8 <puts>
	__HAL_RCC_TIM3_CLK_ENABLE();
 8006b76:	4b2c      	ldr	r3, [pc, #176]	; (8006c28 <SM_EnablePwmToAux+0x250>)
 8006b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b7a:	4a2b      	ldr	r2, [pc, #172]	; (8006c28 <SM_EnablePwmToAux+0x250>)
 8006b7c:	f043 0302 	orr.w	r3, r3, #2
 8006b80:	6593      	str	r3, [r2, #88]	; 0x58
 8006b82:	4b29      	ldr	r3, [pc, #164]	; (8006c28 <SM_EnablePwmToAux+0x250>)
 8006b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b86:	f003 0302 	and.w	r3, r3, #2
 8006b8a:	603b      	str	r3, [r7, #0]
 8006b8c:	683b      	ldr	r3, [r7, #0]

	/* PWM_AUX_OUT_TIM interrupt Init */
	printf("SM_EnablePwmToAux: HAL_NVIC_SetPriority\n");
 8006b8e:	4829      	ldr	r0, [pc, #164]	; (8006c34 <SM_EnablePwmToAux+0x25c>)
 8006b90:	f00b fa92 	bl	80120b8 <puts>
	HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8006b94:	2200      	movs	r2, #0
 8006b96:	2100      	movs	r1, #0
 8006b98:	201d      	movs	r0, #29
 8006b9a:	f004 fb42 	bl	800b222 <HAL_NVIC_SetPriority>
	printf("SM_EnablePwmToAux: HAL_NVIC_EnableIRQ\n");
 8006b9e:	4826      	ldr	r0, [pc, #152]	; (8006c38 <SM_EnablePwmToAux+0x260>)
 8006ba0:	f00b fa8a 	bl	80120b8 <puts>
	HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8006ba4:	201d      	movs	r0, #29
 8006ba6:	f004 fb56 	bl	800b256 <HAL_NVIC_EnableIRQ>
	/* USER CODE BEGIN PWM_AUX_OUT_TIM_MspInit 1 */

	/* USER CODE END PWM_AUX_OUT_TIM_MspInit 1 */
	printf("SM_EnablePwmToAux: HAL_TIM_PWM_Start\n");
 8006baa:	4824      	ldr	r0, [pc, #144]	; (8006c3c <SM_EnablePwmToAux+0x264>)
 8006bac:	f00b fa84 	bl	80120b8 <puts>
	if ((res == HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1)) != HAL_OK)
 8006bb0:	2100      	movs	r1, #0
 8006bb2:	4815      	ldr	r0, [pc, #84]	; (8006c08 <SM_EnablePwmToAux+0x230>)
 8006bb4:	f006 ff42 	bl	800da3c <HAL_TIM_PWM_Start>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	461a      	mov	r2, r3
 8006bbc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d107      	bne.n	8006bd4 <SM_EnablePwmToAux+0x1fc>
	{
		printf("SM_EnablePwmToAux HAL_TIM_PWM_Start() Result:%u\n",res);
 8006bc4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006bc8:	4619      	mov	r1, r3
 8006bca:	481d      	ldr	r0, [pc, #116]	; (8006c40 <SM_EnablePwmToAux+0x268>)
 8006bcc:	f00b fa00 	bl	8011fd0 <iprintf>
		Error_Handler();
 8006bd0:	f001 fae8 	bl	80081a4 <Error_Handler>
	}

	printf("SM_EnablePwmToAux: GO_ApplyPresetToSignal\n");
 8006bd4:	481b      	ldr	r0, [pc, #108]	; (8006c44 <SM_EnablePwmToAux+0x26c>)
 8006bd6:	f00b fa6f 	bl	80120b8 <puts>
	GO_ApplyPresetToSignal(eDefaultGainPreset);
 8006bda:	2007      	movs	r0, #7
 8006bdc:	f7ff faf6 	bl	80061cc <GO_ApplyPresetToSignal>

	// 50% duty cycle
	printf("SM_EnablePwmToAux: PWM_AUX_OUT_TIM->CCR1 = 32768\n");
 8006be0:	4819      	ldr	r0, [pc, #100]	; (8006c48 <SM_EnablePwmToAux+0x270>)
 8006be2:	f00b fa69 	bl	80120b8 <puts>
	PWM_AUX_OUT_TIM->CCR1 = 32768;
 8006be6:	4b09      	ldr	r3, [pc, #36]	; (8006c0c <SM_EnablePwmToAux+0x234>)
 8006be8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006bec:	635a      	str	r2, [r3, #52]	; 0x34
	printf("SM_EnablePwmToAux: PWM_AUX_OUT_TIM->ARR = 65535\n");
 8006bee:	4817      	ldr	r0, [pc, #92]	; (8006c4c <SM_EnablePwmToAux+0x274>)
 8006bf0:	f00b fa62 	bl	80120b8 <puts>
	PWM_AUX_OUT_TIM->ARR = 65535;
 8006bf4:	4b05      	ldr	r3, [pc, #20]	; (8006c0c <SM_EnablePwmToAux+0x234>)
 8006bf6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006bfa:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006bfc:	bf00      	nop
 8006bfe:	3758      	adds	r7, #88	; 0x58
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}
 8006c04:	08016184 	.word	0x08016184
 8006c08:	200021d8 	.word	0x200021d8
 8006c0c:	40000400 	.word	0x40000400
 8006c10:	08016198 	.word	0x08016198
 8006c14:	080161cc 	.word	0x080161cc
 8006c18:	08016208 	.word	0x08016208
 8006c1c:	08016238 	.word	0x08016238
 8006c20:	08016280 	.word	0x08016280
 8006c24:	080162bc 	.word	0x080162bc
 8006c28:	40021000 	.word	0x40021000
 8006c2c:	080162ec 	.word	0x080162ec
 8006c30:	08016310 	.word	0x08016310
 8006c34:	08016348 	.word	0x08016348
 8006c38:	08016370 	.word	0x08016370
 8006c3c:	08016398 	.word	0x08016398
 8006c40:	080163c0 	.word	0x080163c0
 8006c44:	080163f4 	.word	0x080163f4
 8006c48:	08016420 	.word	0x08016420
 8006c4c:	08016454 	.word	0x08016454

08006c50 <SM_DisablePwmToAux>:
 *	@param None
 *	@retval None
 *
 */
void SM_DisablePwmToAux()
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b082      	sub	sp, #8
 8006c54:	af00      	add	r7, sp, #0
	printf("SM_DisablePwmToAux");
 8006c56:	4815      	ldr	r0, [pc, #84]	; (8006cac <SM_DisablePwmToAux+0x5c>)
 8006c58:	f00b f9ba 	bl	8011fd0 <iprintf>

	HAL_StatusTypeDef res = 0;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	71fb      	strb	r3, [r7, #7]


	/* USER CODE BEGIN PWM_AUX_OUT_TIM_MspDeInit 0 */
	printf("SM_DisablePwmToAux: HAL_TIM_PWM_Stop\n");
 8006c60:	4813      	ldr	r0, [pc, #76]	; (8006cb0 <SM_DisablePwmToAux+0x60>)
 8006c62:	f00b fa29 	bl	80120b8 <puts>
	if ((res == HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1)) != HAL_OK)
 8006c66:	2100      	movs	r1, #0
 8006c68:	4812      	ldr	r0, [pc, #72]	; (8006cb4 <SM_DisablePwmToAux+0x64>)
 8006c6a:	f006 ffc1 	bl	800dbf0 <HAL_TIM_PWM_Stop>
 8006c6e:	4603      	mov	r3, r0
 8006c70:	461a      	mov	r2, r3
 8006c72:	79fb      	ldrb	r3, [r7, #7]
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d106      	bne.n	8006c86 <SM_DisablePwmToAux+0x36>
	{
		printf("SM_DisablePwmToAux HAL_TIM_PWM_Stop() Result:%u\n",res);
 8006c78:	79fb      	ldrb	r3, [r7, #7]
 8006c7a:	4619      	mov	r1, r3
 8006c7c:	480e      	ldr	r0, [pc, #56]	; (8006cb8 <SM_DisablePwmToAux+0x68>)
 8006c7e:	f00b f9a7 	bl	8011fd0 <iprintf>
		Error_Handler();
 8006c82:	f001 fa8f 	bl	80081a4 <Error_Handler>
	}
	/* USER CODE END PWM_AUX_OUT_TIM_MspDeInit 0 */
	/* Peripheral clock disable */
	printf("SM_DisablePwmToAux __HAL_RCC_PWM_AUX_OUT_TIM_CLK_DISABLE\n");
 8006c86:	480d      	ldr	r0, [pc, #52]	; (8006cbc <SM_DisablePwmToAux+0x6c>)
 8006c88:	f00b fa16 	bl	80120b8 <puts>
	__HAL_RCC_TIM3_CLK_DISABLE();
 8006c8c:	4b0c      	ldr	r3, [pc, #48]	; (8006cc0 <SM_DisablePwmToAux+0x70>)
 8006c8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c90:	4a0b      	ldr	r2, [pc, #44]	; (8006cc0 <SM_DisablePwmToAux+0x70>)
 8006c92:	f023 0302 	bic.w	r3, r3, #2
 8006c96:	6593      	str	r3, [r2, #88]	; 0x58

	/* PWM_AUX_OUT_TIM interrupt Deinit */
	printf("SM_DisablePwmToAux HAL_NVIC_DisableIRQ\n");
 8006c98:	480a      	ldr	r0, [pc, #40]	; (8006cc4 <SM_DisablePwmToAux+0x74>)
 8006c9a:	f00b fa0d 	bl	80120b8 <puts>
	HAL_NVIC_DisableIRQ(TIM3_IRQn);
 8006c9e:	201d      	movs	r0, #29
 8006ca0:	f004 fae7 	bl	800b272 <HAL_NVIC_DisableIRQ>
	/* USER CODE BEGIN PWM_AUX_OUT_TIM_MspDeInit 1 */

	/* USER CODE END PWM_AUX_OUT_TIM_MspDeInit 1 */
}
 8006ca4:	bf00      	nop
 8006ca6:	3708      	adds	r7, #8
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}
 8006cac:	08016484 	.word	0x08016484
 8006cb0:	08016498 	.word	0x08016498
 8006cb4:	200021d8 	.word	0x200021d8
 8006cb8:	080164c0 	.word	0x080164c0
 8006cbc:	080164f4 	.word	0x080164f4
 8006cc0:	40021000 	.word	0x40021000
 8006cc4:	08016530 	.word	0x08016530

08006cc8 <SM_EnableDacToAux>:
 *	@param None
 *	@retval None
 *
 */
void SM_EnableDacToAux()
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b0b2      	sub	sp, #200	; 0xc8
 8006ccc:	af00      	add	r7, sp, #0
	printf("SM_EnableDacToAux");
 8006cce:	4860      	ldr	r0, [pc, #384]	; (8006e50 <SM_EnableDacToAux+0x188>)
 8006cd0:	f00b f97e 	bl	8011fd0 <iprintf>

	HAL_StatusTypeDef res = 0;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
	DAC_ChannelConfTypeDef sConfig = {0};
 8006cda:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006cde:	2230      	movs	r2, #48	; 0x30
 8006ce0:	2100      	movs	r1, #0
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	f00a fd10 	bl	8011708 <memset>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ce8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006cec:	2200      	movs	r2, #0
 8006cee:	601a      	str	r2, [r3, #0]
 8006cf0:	605a      	str	r2, [r3, #4]
 8006cf2:	609a      	str	r2, [r3, #8]
 8006cf4:	60da      	str	r2, [r3, #12]
 8006cf6:	611a      	str	r2, [r3, #16]
	DAC_HandleTypeDef hdac2;
	DMA_HandleTypeDef hdma_dac2_ch1;
	/** DAC Initialization
	*/
	hdac2.Instance = DAC2;
 8006cf8:	4b56      	ldr	r3, [pc, #344]	; (8006e54 <SM_EnableDacToAux+0x18c>)
 8006cfa:	66fb      	str	r3, [r7, #108]	; 0x6c
	if ((res == HAL_DAC_Init(&hdac2)) != HAL_OK)
 8006cfc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006d00:	4618      	mov	r0, r3
 8006d02:	f004 fad0 	bl	800b2a6 <HAL_DAC_Init>
 8006d06:	4603      	mov	r3, r0
 8006d08:	461a      	mov	r2, r3
 8006d0a:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d107      	bne.n	8006d22 <SM_EnableDacToAux+0x5a>
	{
		printf("SM_EnableDacToAux HAL_DAC_Init() Result:%u\n",res);
 8006d12:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8006d16:	4619      	mov	r1, r3
 8006d18:	484f      	ldr	r0, [pc, #316]	; (8006e58 <SM_EnableDacToAux+0x190>)
 8006d1a:	f00b f959 	bl	8011fd0 <iprintf>
		Error_Handler();
 8006d1e:	f001 fa41 	bl	80081a4 <Error_Handler>
	}
	/** DAC channel OUT1 config
	*/
	sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8006d22:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006d26:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	sConfig.DAC_DMADoubleDataMode = DISABLE;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
	sConfig.DAC_SignedFormat = DISABLE;
 8006d30:	2300      	movs	r3, #0
 8006d32:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
	sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8006d36:	2300      	movs	r3, #0
 8006d38:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 8006d3c:	2306      	movs	r3, #6
 8006d3e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8006d42:	2300      	movs	r3, #0
 8006d44:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8006d48:	2300      	movs	r3, #0
 8006d4a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8006d54:	2300      	movs	r3, #0
 8006d56:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	if ((res == HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1)) != HAL_OK)
 8006d5a:	f107 0194 	add.w	r1, r7, #148	; 0x94
 8006d5e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006d62:	2200      	movs	r2, #0
 8006d64:	4618      	mov	r0, r3
 8006d66:	f004 fc87 	bl	800b678 <HAL_DAC_ConfigChannel>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	461a      	mov	r2, r3
 8006d6e:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d107      	bne.n	8006d86 <SM_EnableDacToAux+0xbe>
	{
		printf("SM_EnableDacToAux HAL_DAC_ConfigChannel() Result:%u\n",res);
 8006d76:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8006d7a:	4619      	mov	r1, r3
 8006d7c:	4837      	ldr	r0, [pc, #220]	; (8006e5c <SM_EnableDacToAux+0x194>)
 8006d7e:	f00b f927 	bl	8011fd0 <iprintf>
		Error_Handler();
 8006d82:	f001 fa0f 	bl	80081a4 <Error_Handler>

	/* USER CODE BEGIN DAC2_MspInit 0 */

	/* USER CODE END DAC2_MspInit 0 */
	/* DAC2 clock enable */
	printf("SM_EnableDacToAux __HAL_RCC_DAC2_CLK_ENABLE()\n");
 8006d86:	4836      	ldr	r0, [pc, #216]	; (8006e60 <SM_EnableDacToAux+0x198>)
 8006d88:	f00b f996 	bl	80120b8 <puts>
	__HAL_RCC_DAC2_CLK_ENABLE();
 8006d8c:	4b35      	ldr	r3, [pc, #212]	; (8006e64 <SM_EnableDacToAux+0x19c>)
 8006d8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d90:	4a34      	ldr	r2, [pc, #208]	; (8006e64 <SM_EnableDacToAux+0x19c>)
 8006d92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d96:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006d98:	4b32      	ldr	r3, [pc, #200]	; (8006e64 <SM_EnableDacToAux+0x19c>)
 8006d9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006da0:	60bb      	str	r3, [r7, #8]
 8006da2:	68bb      	ldr	r3, [r7, #8]

	printf("SM_EnableDacToAux __HAL_RCC_GPIOA_CLK_ENABLE()\n");
 8006da4:	4830      	ldr	r0, [pc, #192]	; (8006e68 <SM_EnableDacToAux+0x1a0>)
 8006da6:	f00b f987 	bl	80120b8 <puts>
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8006daa:	4b2e      	ldr	r3, [pc, #184]	; (8006e64 <SM_EnableDacToAux+0x19c>)
 8006dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dae:	4a2d      	ldr	r2, [pc, #180]	; (8006e64 <SM_EnableDacToAux+0x19c>)
 8006db0:	f043 0301 	orr.w	r3, r3, #1
 8006db4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006db6:	4b2b      	ldr	r3, [pc, #172]	; (8006e64 <SM_EnableDacToAux+0x19c>)
 8006db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dba:	f003 0301 	and.w	r3, r3, #1
 8006dbe:	607b      	str	r3, [r7, #4]
 8006dc0:	687b      	ldr	r3, [r7, #4]
	/**DAC2 GPIO Configuration
	PA6     ------> DAC2_OUT1
	*/
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006dc2:	2340      	movs	r3, #64	; 0x40
 8006dc4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006dc8:	2303      	movs	r3, #3
 8006dca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	printf("SM_EnableDacToAux HAL_GPIO_Init()\n");
 8006dd4:	4825      	ldr	r0, [pc, #148]	; (8006e6c <SM_EnableDacToAux+0x1a4>)
 8006dd6:	f00b f96f 	bl	80120b8 <puts>
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006dda:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006dde:	4619      	mov	r1, r3
 8006de0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006de4:	f005 f9b0 	bl	800c148 <HAL_GPIO_Init>

	/* DAC2 DMA Init */
	/* DAC2_CH1 Init */
	hdma_dac2_ch1.Instance = DMA1_Channel3;
 8006de8:	4b21      	ldr	r3, [pc, #132]	; (8006e70 <SM_EnableDacToAux+0x1a8>)
 8006dea:	60fb      	str	r3, [r7, #12]
	hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 8006dec:	2329      	movs	r3, #41	; 0x29
 8006dee:	613b      	str	r3, [r7, #16]
	hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006df0:	2310      	movs	r3, #16
 8006df2:	617b      	str	r3, [r7, #20]
	hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006df4:	2300      	movs	r3, #0
 8006df6:	61bb      	str	r3, [r7, #24]
	hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8006df8:	2380      	movs	r3, #128	; 0x80
 8006dfa:	61fb      	str	r3, [r7, #28]
	hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006dfc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e00:	623b      	str	r3, [r7, #32]
	hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006e02:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006e06:	627b      	str	r3, [r7, #36]	; 0x24
	hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 8006e08:	2320      	movs	r3, #32
 8006e0a:	62bb      	str	r3, [r7, #40]	; 0x28
	hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
	if ((res == HAL_DMA_Init(&hdma_dac2_ch1)) != HAL_OK)
 8006e10:	f107 030c 	add.w	r3, r7, #12
 8006e14:	4618      	mov	r0, r3
 8006e16:	f004 fe65 	bl	800bae4 <HAL_DMA_Init>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	461a      	mov	r2, r3
 8006e1e:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d107      	bne.n	8006e36 <SM_EnableDacToAux+0x16e>
	{
		printf("SM_EnableDacToAux HAL_DMA_Init() Result:%u\n",res);
 8006e26:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8006e2a:	4619      	mov	r1, r3
 8006e2c:	4811      	ldr	r0, [pc, #68]	; (8006e74 <SM_EnableDacToAux+0x1ac>)
 8006e2e:	f00b f8cf 	bl	8011fd0 <iprintf>
		Error_Handler();
 8006e32:	f001 f9b7 	bl	80081a4 <Error_Handler>
	}

	printf("SM_EnableDacToAux __HAL_LINKDMA()\n");
 8006e36:	4810      	ldr	r0, [pc, #64]	; (8006e78 <SM_EnableDacToAux+0x1b0>)
 8006e38:	f00b f93e 	bl	80120b8 <puts>
	__HAL_LINKDMA(&hdac2,DMA_Handle1,hdma_dac2_ch1);
 8006e3c:	f107 030c 	add.w	r3, r7, #12
 8006e40:	677b      	str	r3, [r7, #116]	; 0x74
 8006e42:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006e46:	637b      	str	r3, [r7, #52]	; 0x34

    //GO_ApplyPresetToAux(eDefaultGainPreset);
}
 8006e48:	bf00      	nop
 8006e4a:	37c8      	adds	r7, #200	; 0xc8
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}
 8006e50:	08016558 	.word	0x08016558
 8006e54:	50000c00 	.word	0x50000c00
 8006e58:	0801656c 	.word	0x0801656c
 8006e5c:	08016598 	.word	0x08016598
 8006e60:	080165d0 	.word	0x080165d0
 8006e64:	40021000 	.word	0x40021000
 8006e68:	08016600 	.word	0x08016600
 8006e6c:	08016630 	.word	0x08016630
 8006e70:	40020030 	.word	0x40020030
 8006e74:	08016654 	.word	0x08016654
 8006e78:	08016680 	.word	0x08016680

08006e7c <SM_DisableDacToAux>:
 *	@param None
 *	@retval None
 *
 */
void SM_DisableDacToAux()
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	af00      	add	r7, sp, #0


	printf("SM_DisableDacToAux\n");
 8006e80:	4806      	ldr	r0, [pc, #24]	; (8006e9c <SM_DisableDacToAux+0x20>)
 8006e82:	f00b f919 	bl	80120b8 <puts>
    //__HAL_RCC_DAC2_CLK_DISABLE();

    /**DAC2 GPIO Configuration
    PA6     ------> DAC2_OUT1
    */
	printf("SM_DisableDacToAux HAL_GPIO_DeInit\n");
 8006e86:	4806      	ldr	r0, [pc, #24]	; (8006ea0 <SM_DisableDacToAux+0x24>)
 8006e88:	f00b f916 	bl	80120b8 <puts>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_6);
 8006e8c:	2140      	movs	r1, #64	; 0x40
 8006e8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006e92:	f005 fadb 	bl	800c44c <HAL_GPIO_DeInit>

}
 8006e96:	bf00      	nop
 8006e98:	bd80      	pop	{r7, pc}
 8006e9a:	bf00      	nop
 8006e9c:	080166a4 	.word	0x080166a4
 8006ea0:	080166b8 	.word	0x080166b8

08006ea4 <SM_GetEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
uint16_t SM_GetEncoderValue(eEncoder_Inversion direction)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b083      	sub	sp, #12
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	4603      	mov	r3, r0
 8006eac:	71fb      	strb	r3, [r7, #7]
	if(direction)
 8006eae:	79fb      	ldrb	r3, [r7, #7]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d008      	beq.n	8006ec6 <SM_GetEncoderValue+0x22>
	{
		return ENCODER_TIMER->ARR - ENCODER_TIMER->CNT;
 8006eb4:	4b08      	ldr	r3, [pc, #32]	; (8006ed8 <SM_GetEncoderValue+0x34>)
 8006eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eb8:	b29a      	uxth	r2, r3
 8006eba:	4b07      	ldr	r3, [pc, #28]	; (8006ed8 <SM_GetEncoderValue+0x34>)
 8006ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ebe:	b29b      	uxth	r3, r3
 8006ec0:	1ad3      	subs	r3, r2, r3
 8006ec2:	b29b      	uxth	r3, r3
 8006ec4:	e002      	b.n	8006ecc <SM_GetEncoderValue+0x28>
	}
	else
	{
		return ENCODER_TIMER->CNT;
 8006ec6:	4b04      	ldr	r3, [pc, #16]	; (8006ed8 <SM_GetEncoderValue+0x34>)
 8006ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eca:	b29b      	uxth	r3, r3
	}
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	370c      	adds	r7, #12
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed6:	4770      	bx	lr
 8006ed8:	40012c00 	.word	0x40012c00

08006edc <SM_GetOutputInHertz>:
 *	@param None
 *	@retval None
 *
 */
float SM_GetOutputInHertz()
{
 8006edc:	b480      	push	{r7}
 8006ede:	b085      	sub	sp, #20
 8006ee0:	af00      	add	r7, sp, #0
	volatile float output_tm_psc;
	volatile float output_tm_arr;

	// safe-guard against divide by zero
	(OUTPUT_TIMER->PSC == 0) ? (output_tm_psc = 1) : (output_tm_psc = OUTPUT_TIMER->PSC);
 8006ee2:	4b1d      	ldr	r3, [pc, #116]	; (8006f58 <SM_GetOutputInHertz+0x7c>)
 8006ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d103      	bne.n	8006ef2 <SM_GetOutputInHertz+0x16>
 8006eea:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8006eee:	60bb      	str	r3, [r7, #8]
 8006ef0:	e007      	b.n	8006f02 <SM_GetOutputInHertz+0x26>
 8006ef2:	4b19      	ldr	r3, [pc, #100]	; (8006f58 <SM_GetOutputInHertz+0x7c>)
 8006ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ef6:	ee07 3a90 	vmov	s15, r3
 8006efa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006efe:	edc7 7a02 	vstr	s15, [r7, #8]
	(OUTPUT_TIMER->ARR == 0) ? (output_tm_arr = 1) : (output_tm_arr = OUTPUT_TIMER->ARR);
 8006f02:	4b15      	ldr	r3, [pc, #84]	; (8006f58 <SM_GetOutputInHertz+0x7c>)
 8006f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d103      	bne.n	8006f12 <SM_GetOutputInHertz+0x36>
 8006f0a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8006f0e:	607b      	str	r3, [r7, #4]
 8006f10:	e007      	b.n	8006f22 <SM_GetOutputInHertz+0x46>
 8006f12:	4b11      	ldr	r3, [pc, #68]	; (8006f58 <SM_GetOutputInHertz+0x7c>)
 8006f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f16:	ee07 3a90 	vmov	s15, r3
 8006f1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f1e:	edc7 7a01 	vstr	s15, [r7, #4]

	float output_tm_freq = SM_MCLK / (output_tm_psc * output_tm_arr);
 8006f22:	ed97 7a02 	vldr	s14, [r7, #8]
 8006f26:	edd7 7a01 	vldr	s15, [r7, #4]
 8006f2a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006f2e:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8006f5c <SM_GetOutputInHertz+0x80>
 8006f32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f36:	edc7 7a03 	vstr	s15, [r7, #12]


	return output_tm_freq / SM_FSAMP;
 8006f3a:	edd7 7a03 	vldr	s15, [r7, #12]
 8006f3e:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8006f60 <SM_GetOutputInHertz+0x84>
 8006f42:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006f46:	eef0 7a66 	vmov.f32	s15, s13
}
 8006f4a:	eeb0 0a67 	vmov.f32	s0, s15
 8006f4e:	3714      	adds	r7, #20
 8006f50:	46bd      	mov	sp, r7
 8006f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f56:	4770      	bx	lr
 8006f58:	40013400 	.word	0x40013400
 8006f5c:	4d2037a0 	.word	0x4d2037a0
 8006f60:	42f00000 	.word	0x42f00000

08006f64 <SM_ConvertPeriodToHertz>:


float SM_ConvertPeriodToHertz(uint32_t period, uint16_t psc)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b083      	sub	sp, #12
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	460b      	mov	r3, r1
 8006f6e:	807b      	strh	r3, [r7, #2]
	(psc == 0) ? (psc = 1) : psc;
 8006f70:	887b      	ldrh	r3, [r7, #2]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d101      	bne.n	8006f7a <SM_ConvertPeriodToHertz+0x16>
 8006f76:	2301      	movs	r3, #1
 8006f78:	807b      	strh	r3, [r7, #2]

	return (float)SM_MCLK / ( (float)psc * (float)period );
 8006f7a:	887b      	ldrh	r3, [r7, #2]
 8006f7c:	ee07 3a90 	vmov	s15, r3
 8006f80:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	ee07 3a90 	vmov	s15, r3
 8006f8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f92:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8006fac <SM_ConvertPeriodToHertz+0x48>
 8006f96:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006f9a:	eef0 7a66 	vmov.f32	s15, s13
}
 8006f9e:	eeb0 0a67 	vmov.f32	s0, s15
 8006fa2:	370c      	adds	r7, #12
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006faa:	4770      	bx	lr
 8006fac:	4d2037a0 	.word	0x4d2037a0

08006fb0 <SM_IsFuncPwmDutyMode>:
	return (SM_MCLK / hertz) / psc;
}


uint8_t SM_IsFuncPwmDutyMode()
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	af00      	add	r7, sp, #0
	return duty_adjust_mode;
 8006fb4:	4b03      	ldr	r3, [pc, #12]	; (8006fc4 <SM_IsFuncPwmDutyMode+0x14>)
 8006fb6:	781b      	ldrb	r3, [r3, #0]
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc0:	4770      	bx	lr
 8006fc2:	bf00      	nop
 8006fc4:	20002154 	.word	0x20002154

08006fc8 <SM_ToggleFuncPwmDutyMode>:

void SM_ToggleFuncPwmDutyMode()
{
 8006fc8:	b480      	push	{r7}
 8006fca:	af00      	add	r7, sp, #0
	duty_adjust_mode ^= 1;
 8006fcc:	4b05      	ldr	r3, [pc, #20]	; (8006fe4 <SM_ToggleFuncPwmDutyMode+0x1c>)
 8006fce:	781b      	ldrb	r3, [r3, #0]
 8006fd0:	f083 0301 	eor.w	r3, r3, #1
 8006fd4:	b2da      	uxtb	r2, r3
 8006fd6:	4b03      	ldr	r3, [pc, #12]	; (8006fe4 <SM_ToggleFuncPwmDutyMode+0x1c>)
 8006fd8:	701a      	strb	r2, [r3, #0]
}
 8006fda:	bf00      	nop
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe2:	4770      	bx	lr
 8006fe4:	20002154 	.word	0x20002154

08006fe8 <SM_ResetFuncPwmDutyMode>:

void SM_ResetFuncPwmDutyMode()
{
 8006fe8:	b480      	push	{r7}
 8006fea:	af00      	add	r7, sp, #0
	duty_adjust_mode = 0;
 8006fec:	4b03      	ldr	r3, [pc, #12]	; (8006ffc <SM_ResetFuncPwmDutyMode+0x14>)
 8006fee:	2200      	movs	r2, #0
 8006ff0:	701a      	strb	r2, [r3, #0]

}
 8006ff2:	bf00      	nop
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffa:	4770      	bx	lr
 8006ffc:	20002154 	.word	0x20002154

08007000 <VPP_ResetLastEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
void VPP_ResetLastEncoderValue()
{
 8007000:	b480      	push	{r7}
 8007002:	af00      	add	r7, sp, #0
	amp_last_encoder_value = 0;
 8007004:	4b03      	ldr	r3, [pc, #12]	; (8007014 <VPP_ResetLastEncoderValue+0x14>)
 8007006:	2200      	movs	r2, #0
 8007008:	801a      	strh	r2, [r3, #0]
}
 800700a:	bf00      	nop
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr
 8007014:	20002156 	.word	0x20002156

08007018 <VPP_ApplyProfileToSignal>:
 *	@param None
 *	@retval None
 *
 */
void VPP_ApplyProfileToSignal(eAmpSettings_t pPresetEnum)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b084      	sub	sp, #16
 800701c:	af00      	add	r7, sp, #0
 800701e:	4603      	mov	r3, r0
 8007020:	71fb      	strb	r3, [r7, #7]
	// retrieve the next preset
	AmplitudeProfile_t* pNextEncPreset = &theAmpProfiles[pPresetEnum];
 8007022:	79fa      	ldrb	r2, [r7, #7]
 8007024:	4613      	mov	r3, r2
 8007026:	00db      	lsls	r3, r3, #3
 8007028:	1a9b      	subs	r3, r3, r2
 800702a:	009b      	lsls	r3, r3, #2
 800702c:	4a10      	ldr	r2, [pc, #64]	; (8007070 <VPP_ApplyProfileToSignal+0x58>)
 800702e:	4413      	add	r3, r2
 8007030:	60fb      	str	r3, [r7, #12]

	// Set the new  amp profile to the SignalChannel object
	SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile = pNextEncPreset;
 8007032:	2000      	movs	r0, #0
 8007034:	f7ff fcba 	bl	80069ac <SM_GetOutputChannel>
 8007038:	4602      	mov	r2, r0
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	f8c2 31ec 	str.w	r3, [r2, #492]	; 0x1ec

    // set the gain preset
	GO_ApplyPresetToSignal(pNextEncPreset->gain_preset);
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	7a1b      	ldrb	r3, [r3, #8]
 8007044:	4618      	mov	r0, r3
 8007046:	f7ff f8c1 	bl	80061cc <GO_ApplyPresetToSignal>

    // Apply the next amplitude setting to the SignalChannel object
    _ProcessSignalDataTable(pNextEncPreset->neg_gain_coeff, pNextEncPreset->amp_offset , pNextEncPreset->epos);
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	edd3 7a04 	vldr	s15, [r3, #16]
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	ed93 7a05 	vldr	s14, [r3, #20]
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	8b1b      	ldrh	r3, [r3, #24]
 800705a:	4618      	mov	r0, r3
 800705c:	eef0 0a47 	vmov.f32	s1, s14
 8007060:	eeb0 0a67 	vmov.f32	s0, s15
 8007064:	f000 f830 	bl	80070c8 <_ProcessSignalDataTable>


}
 8007068:	bf00      	nop
 800706a:	3710      	adds	r7, #16
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}
 8007070:	200003f8 	.word	0x200003f8

08007074 <VPP_ApplyProfileToAux>:
 *	@param None
 *	@retval None
 *
 */
void VPP_ApplyProfileToAux(eAmpSettings_t pPresetEnum)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b084      	sub	sp, #16
 8007078:	af00      	add	r7, sp, #0
 800707a:	4603      	mov	r3, r0
 800707c:	71fb      	strb	r3, [r7, #7]

	// retrieve the next preset
	AmplitudeProfile_t* pNextEncPreset = &theAmpProfiles[pPresetEnum];
 800707e:	79fa      	ldrb	r2, [r7, #7]
 8007080:	4613      	mov	r3, r2
 8007082:	00db      	lsls	r3, r3, #3
 8007084:	1a9b      	subs	r3, r3, r2
 8007086:	009b      	lsls	r3, r3, #2
 8007088:	4a0e      	ldr	r2, [pc, #56]	; (80070c4 <VPP_ApplyProfileToAux+0x50>)
 800708a:	4413      	add	r3, r2
 800708c:	60fb      	str	r3, [r7, #12]

	// Set the new VPP Preset to the AuxChannel object
	SM_GetOutputChannel(AUX_CHANNEL)->amp_profile = pNextEncPreset;
 800708e:	2001      	movs	r0, #1
 8007090:	f7ff fc8c 	bl	80069ac <SM_GetOutputChannel>
 8007094:	4602      	mov	r2, r0
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	f8c2 31ec 	str.w	r3, [r2, #492]	; 0x1ec

	 // set the gain preset
	//GO_ApplyPresetToAux(pNextEncPreset->gain_preset);

	// Apply the next amplitude setting to the AuxChannel object
	_ProcessAuxDataTable(pNextEncPreset->neg_gain_coeff, pNextEncPreset->amp_offset , pNextEncPreset->epos);
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	edd3 7a04 	vldr	s15, [r3, #16]
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	ed93 7a05 	vldr	s14, [r3, #20]
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	8b1b      	ldrh	r3, [r3, #24]
 80070ac:	4618      	mov	r0, r3
 80070ae:	eef0 0a47 	vmov.f32	s1, s14
 80070b2:	eeb0 0a67 	vmov.f32	s0, s15
 80070b6:	f000 f88d 	bl	80071d4 <_ProcessAuxDataTable>



}
 80070ba:	bf00      	nop
 80070bc:	3710      	adds	r7, #16
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}
 80070c2:	bf00      	nop
 80070c4:	200003f8 	.word	0x200003f8

080070c8 <_ProcessSignalDataTable>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessSignalDataTable(float _neg_gain_coeff, float amp_offset, uint16_t _encoder_value)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b08a      	sub	sp, #40	; 0x28
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	ed87 0a03 	vstr	s0, [r7, #12]
 80070d2:	edc7 0a02 	vstr	s1, [r7, #8]
 80070d6:	4603      	mov	r3, r0
 80070d8:	80fb      	strh	r3, [r7, #6]
	sOutputChannel_t * pTmpOutputChannel = SM_GetOutputChannel(SIGNAL_CHANNEL);
 80070da:	2000      	movs	r0, #0
 80070dc:	f7ff fc66 	bl	80069ac <SM_GetOutputChannel>
 80070e0:	6178      	str	r0, [r7, #20]
	if(pTmpOutputChannel->func_profile->func != PWM_FUNC_MODE)
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 80070e8:	781b      	ldrb	r3, [r3, #0]
 80070ea:	2b06      	cmp	r3, #6
 80070ec:	d06b      	beq.n	80071c6 <_ProcessSignalDataTable+0xfe>
	{
		// copy refer lookup datat table from SignalChannel object
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 80070ee:	2300      	movs	r3, #0
 80070f0:	627b      	str	r3, [r7, #36]	; 0x24
 80070f2:	e00c      	b.n	800710e <_ProcessSignalDataTable+0x46>
		{
			tmpDataTable[i] = pTmpOutputChannel->ref_lut_data[i];
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	685a      	ldr	r2, [r3, #4]
 80070f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070fa:	009b      	lsls	r3, r3, #2
 80070fc:	4413      	add	r3, r2
 80070fe:	681a      	ldr	r2, [r3, #0]
 8007100:	4933      	ldr	r1, [pc, #204]	; (80071d0 <_ProcessSignalDataTable+0x108>)
 8007102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007104:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8007108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800710a:	3301      	adds	r3, #1
 800710c:	627b      	str	r3, [r7, #36]	; 0x24
 800710e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007110:	2b77      	cmp	r3, #119	; 0x77
 8007112:	ddef      	ble.n	80070f4 <_ProcessSignalDataTable+0x2c>
		}

		// calculate positive offset coefficient from encoder position
		float pos_offset_coeff = 1;
 8007114:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8007118:	623b      	str	r3, [r7, #32]
		if(_encoder_value)
 800711a:	88fb      	ldrh	r3, [r7, #6]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d008      	beq.n	8007132 <_ProcessSignalDataTable+0x6a>
		{
			pos_offset_coeff = (_encoder_value/4);
 8007120:	88fb      	ldrh	r3, [r7, #6]
 8007122:	089b      	lsrs	r3, r3, #2
 8007124:	b29b      	uxth	r3, r3
 8007126:	ee07 3a90 	vmov	s15, r3
 800712a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800712e:	edc7 7a08 	vstr	s15, [r7, #32]
		}

		// adjust amplitude and offset of lookup table copy
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8007132:	2300      	movs	r3, #0
 8007134:	61fb      	str	r3, [r7, #28]
 8007136:	e02e      	b.n	8007196 <_ProcessSignalDataTable+0xce>
		{
			tmpDataTable[i] = tmpDataTable[i] * (_neg_gain_coeff);
 8007138:	4a25      	ldr	r2, [pc, #148]	; (80071d0 <_ProcessSignalDataTable+0x108>)
 800713a:	69fb      	ldr	r3, [r7, #28]
 800713c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007140:	ee07 3a90 	vmov	s15, r3
 8007144:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007148:	edd7 7a03 	vldr	s15, [r7, #12]
 800714c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007150:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007154:	ee17 1a90 	vmov	r1, s15
 8007158:	4a1d      	ldr	r2, [pc, #116]	; (80071d0 <_ProcessSignalDataTable+0x108>)
 800715a:	69fb      	ldr	r3, [r7, #28]
 800715c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			tmpDataTable[i] = tmpDataTable[i] + (AMP_OFFSET * pos_offset_coeff);
 8007160:	4a1b      	ldr	r2, [pc, #108]	; (80071d0 <_ProcessSignalDataTable+0x108>)
 8007162:	69fb      	ldr	r3, [r7, #28]
 8007164:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007168:	ee07 3a90 	vmov	s15, r3
 800716c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007170:	edd7 7a08 	vldr	s15, [r7, #32]
 8007174:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8007178:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800717c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007180:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007184:	ee17 1a90 	vmov	r1, s15
 8007188:	4a11      	ldr	r2, [pc, #68]	; (80071d0 <_ProcessSignalDataTable+0x108>)
 800718a:	69fb      	ldr	r3, [r7, #28]
 800718c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8007190:	69fb      	ldr	r3, [r7, #28]
 8007192:	3301      	adds	r3, #1
 8007194:	61fb      	str	r3, [r7, #28]
 8007196:	69fb      	ldr	r3, [r7, #28]
 8007198:	2b77      	cmp	r3, #119	; 0x77
 800719a:	ddcd      	ble.n	8007138 <_ProcessSignalDataTable+0x70>
		}

		// restore lookup table copy to active lookup table in SignalChannel object
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 800719c:	2300      	movs	r3, #0
 800719e:	61bb      	str	r3, [r7, #24]
 80071a0:	e00e      	b.n	80071c0 <_ProcessSignalDataTable+0xf8>
		{
			SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data[i] = tmpDataTable[i];
 80071a2:	2000      	movs	r0, #0
 80071a4:	f7ff fc02 	bl	80069ac <SM_GetOutputChannel>
 80071a8:	4601      	mov	r1, r0
 80071aa:	4a09      	ldr	r2, [pc, #36]	; (80071d0 <_ProcessSignalDataTable+0x108>)
 80071ac:	69bb      	ldr	r3, [r7, #24]
 80071ae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80071b2:	69bb      	ldr	r3, [r7, #24]
 80071b4:	3302      	adds	r3, #2
 80071b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 80071ba:	69bb      	ldr	r3, [r7, #24]
 80071bc:	3301      	adds	r3, #1
 80071be:	61bb      	str	r3, [r7, #24]
 80071c0:	69bb      	ldr	r3, [r7, #24]
 80071c2:	2b77      	cmp	r3, #119	; 0x77
 80071c4:	dded      	ble.n	80071a2 <_ProcessSignalDataTable+0xda>
		}
	}

}
 80071c6:	bf00      	nop
 80071c8:	3728      	adds	r7, #40	; 0x28
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}
 80071ce:	bf00      	nop
 80071d0:	20002648 	.word	0x20002648

080071d4 <_ProcessAuxDataTable>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessAuxDataTable(float _neg_gain_coeff, float amp_offset, uint16_t _encoder_value)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b088      	sub	sp, #32
 80071d8:	af00      	add	r7, sp, #0
 80071da:	ed87 0a03 	vstr	s0, [r7, #12]
 80071de:	edc7 0a02 	vstr	s1, [r7, #8]
 80071e2:	4603      	mov	r3, r0
 80071e4:	80fb      	strh	r3, [r7, #6]
	if(SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func != PWM_FUNC_MODE)
 80071e6:	2001      	movs	r0, #1
 80071e8:	f7ff fbe0 	bl	80069ac <SM_GetOutputChannel>
 80071ec:	4603      	mov	r3, r0
 80071ee:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 80071f2:	781b      	ldrb	r3, [r3, #0]
 80071f4:	2b06      	cmp	r3, #6
 80071f6:	d059      	beq.n	80072ac <_ProcessAuxDataTable+0xd8>
	{
		// copy refer lookup datat table from AuxChannel object
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 80071f8:	2300      	movs	r3, #0
 80071fa:	61fb      	str	r3, [r7, #28]
 80071fc:	e00f      	b.n	800721e <_ProcessAuxDataTable+0x4a>
		{
			tmpDataTable[i] = SM_GetOutputChannel(AUX_CHANNEL)->ref_lut_data[i];
 80071fe:	2001      	movs	r0, #1
 8007200:	f7ff fbd4 	bl	80069ac <SM_GetOutputChannel>
 8007204:	4603      	mov	r3, r0
 8007206:	685a      	ldr	r2, [r3, #4]
 8007208:	69fb      	ldr	r3, [r7, #28]
 800720a:	009b      	lsls	r3, r3, #2
 800720c:	4413      	add	r3, r2
 800720e:	681a      	ldr	r2, [r3, #0]
 8007210:	4933      	ldr	r1, [pc, #204]	; (80072e0 <_ProcessAuxDataTable+0x10c>)
 8007212:	69fb      	ldr	r3, [r7, #28]
 8007214:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8007218:	69fb      	ldr	r3, [r7, #28]
 800721a:	3301      	adds	r3, #1
 800721c:	61fb      	str	r3, [r7, #28]
 800721e:	69fb      	ldr	r3, [r7, #28]
 8007220:	2b77      	cmp	r3, #119	; 0x77
 8007222:	ddec      	ble.n	80071fe <_ProcessAuxDataTable+0x2a>
		}

		// calculate positive offset coefficient from encoder position
		float pos_offset_coeff = 1;
 8007224:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8007228:	61bb      	str	r3, [r7, #24]
		if(_encoder_value)
 800722a:	88fb      	ldrh	r3, [r7, #6]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d008      	beq.n	8007242 <_ProcessAuxDataTable+0x6e>
		{
			pos_offset_coeff = (_encoder_value/4);
 8007230:	88fb      	ldrh	r3, [r7, #6]
 8007232:	089b      	lsrs	r3, r3, #2
 8007234:	b29b      	uxth	r3, r3
 8007236:	ee07 3a90 	vmov	s15, r3
 800723a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800723e:	edc7 7a06 	vstr	s15, [r7, #24]
		}

		// adjust amplitude and offset of lookup table copy
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8007242:	2300      	movs	r3, #0
 8007244:	617b      	str	r3, [r7, #20]
 8007246:	e02e      	b.n	80072a6 <_ProcessAuxDataTable+0xd2>
		{

			tmpDataTable[i] = tmpDataTable[i] * (_neg_gain_coeff);
 8007248:	4a25      	ldr	r2, [pc, #148]	; (80072e0 <_ProcessAuxDataTable+0x10c>)
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007250:	ee07 3a90 	vmov	s15, r3
 8007254:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007258:	edd7 7a03 	vldr	s15, [r7, #12]
 800725c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007260:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007264:	ee17 1a90 	vmov	r1, s15
 8007268:	4a1d      	ldr	r2, [pc, #116]	; (80072e0 <_ProcessAuxDataTable+0x10c>)
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			tmpDataTable[i] = tmpDataTable[i] + (AMP_OFFSET * pos_offset_coeff);
 8007270:	4a1b      	ldr	r2, [pc, #108]	; (80072e0 <_ProcessAuxDataTable+0x10c>)
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007278:	ee07 3a90 	vmov	s15, r3
 800727c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007280:	edd7 7a06 	vldr	s15, [r7, #24]
 8007284:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8007288:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800728c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007290:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007294:	ee17 1a90 	vmov	r1, s15
 8007298:	4a11      	ldr	r2, [pc, #68]	; (80072e0 <_ProcessAuxDataTable+0x10c>)
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	3301      	adds	r3, #1
 80072a4:	617b      	str	r3, [r7, #20]
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	2b77      	cmp	r3, #119	; 0x77
 80072aa:	ddcd      	ble.n	8007248 <_ProcessAuxDataTable+0x74>
		}
	}


	// restore lookup table copy to active lookup table in SignalChannel object
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 80072ac:	2300      	movs	r3, #0
 80072ae:	613b      	str	r3, [r7, #16]
 80072b0:	e00e      	b.n	80072d0 <_ProcessAuxDataTable+0xfc>
	{
		SM_GetOutputChannel(AUX_CHANNEL)->dsp_lut_data[i] = tmpDataTable[i];
 80072b2:	2001      	movs	r0, #1
 80072b4:	f7ff fb7a 	bl	80069ac <SM_GetOutputChannel>
 80072b8:	4601      	mov	r1, r0
 80072ba:	4a09      	ldr	r2, [pc, #36]	; (80072e0 <_ProcessAuxDataTable+0x10c>)
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	3302      	adds	r3, #2
 80072c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	3301      	adds	r3, #1
 80072ce:	613b      	str	r3, [r7, #16]
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	2b77      	cmp	r3, #119	; 0x77
 80072d4:	dded      	ble.n	80072b2 <_ProcessAuxDataTable+0xde>
	}
}
 80072d6:	bf00      	nop
 80072d8:	3720      	adds	r7, #32
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}
 80072de:	bf00      	nop
 80072e0:	20002648 	.word	0x20002648

080072e4 <VPP_MapEncoderPositionToSignalOutput>:
 *
 *	@retval None
 *
 */
void VPP_MapEncoderPositionToSignalOutput(uint16_t pEncoderValue)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b084      	sub	sp, #16
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	4603      	mov	r3, r0
 80072ec:	80fb      	strh	r3, [r7, #6]
	eAmpSettings_t tmpAmp = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile->amp_setting;
 80072ee:	2000      	movs	r0, #0
 80072f0:	f7ff fb5c 	bl	80069ac <SM_GetOutputChannel>
 80072f4:	4603      	mov	r3, r0
 80072f6:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 80072fa:	781b      	ldrb	r3, [r3, #0]
 80072fc:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > amp_last_encoder_value)
 80072fe:	4b15      	ldr	r3, [pc, #84]	; (8007354 <VPP_MapEncoderPositionToSignalOutput+0x70>)
 8007300:	881b      	ldrh	r3, [r3, #0]
 8007302:	88fa      	ldrh	r2, [r7, #6]
 8007304:	429a      	cmp	r2, r3
 8007306:	d90c      	bls.n	8007322 <VPP_MapEncoderPositionToSignalOutput+0x3e>
	{
		tmpAmp++;
 8007308:	7bfb      	ldrb	r3, [r7, #15]
 800730a:	3301      	adds	r3, #1
 800730c:	73fb      	strb	r3, [r7, #15]
		if(tmpAmp > MAX_VPP_PRESETS-1) tmpAmp = VPP98;
 800730e:	7bfb      	ldrb	r3, [r7, #15]
 8007310:	2b61      	cmp	r3, #97	; 0x61
 8007312:	d901      	bls.n	8007318 <VPP_MapEncoderPositionToSignalOutput+0x34>
 8007314:	2361      	movs	r3, #97	; 0x61
 8007316:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToSignal(tmpAmp);
 8007318:	7bfb      	ldrb	r3, [r7, #15]
 800731a:	4618      	mov	r0, r3
 800731c:	f7ff fe7c 	bl	8007018 <VPP_ApplyProfileToSignal>
 8007320:	e010      	b.n	8007344 <VPP_MapEncoderPositionToSignalOutput+0x60>
	}
	else if (pEncoderValue < amp_last_encoder_value)
 8007322:	4b0c      	ldr	r3, [pc, #48]	; (8007354 <VPP_MapEncoderPositionToSignalOutput+0x70>)
 8007324:	881b      	ldrh	r3, [r3, #0]
 8007326:	88fa      	ldrh	r2, [r7, #6]
 8007328:	429a      	cmp	r2, r3
 800732a:	d20b      	bcs.n	8007344 <VPP_MapEncoderPositionToSignalOutput+0x60>
	{
		tmpAmp--;
 800732c:	7bfb      	ldrb	r3, [r7, #15]
 800732e:	3b01      	subs	r3, #1
 8007330:	73fb      	strb	r3, [r7, #15]
		if(tmpAmp > MAX_VPP_PRESETS-1) tmpAmp = VPP01;
 8007332:	7bfb      	ldrb	r3, [r7, #15]
 8007334:	2b61      	cmp	r3, #97	; 0x61
 8007336:	d901      	bls.n	800733c <VPP_MapEncoderPositionToSignalOutput+0x58>
 8007338:	2300      	movs	r3, #0
 800733a:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToSignal(tmpAmp);
 800733c:	7bfb      	ldrb	r3, [r7, #15]
 800733e:	4618      	mov	r0, r3
 8007340:	f7ff fe6a 	bl	8007018 <VPP_ApplyProfileToSignal>
	}
	amp_last_encoder_value = pEncoderValue;
 8007344:	4a03      	ldr	r2, [pc, #12]	; (8007354 <VPP_MapEncoderPositionToSignalOutput+0x70>)
 8007346:	88fb      	ldrh	r3, [r7, #6]
 8007348:	8013      	strh	r3, [r2, #0]

}
 800734a:	bf00      	nop
 800734c:	3710      	adds	r7, #16
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}
 8007352:	bf00      	nop
 8007354:	20002156 	.word	0x20002156

08007358 <VPP_MapEncoderPositionToAuxOutput>:
 *
 *	@retval None
 *
 */
void VPP_MapEncoderPositionToAuxOutput(uint16_t pEncoderValue)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b084      	sub	sp, #16
 800735c:	af00      	add	r7, sp, #0
 800735e:	4603      	mov	r3, r0
 8007360:	80fb      	strh	r3, [r7, #6]

	eAmpSettings_t tmpAmp = SM_GetOutputChannel(AUX_CHANNEL)->amp_profile->amp_setting;
 8007362:	2001      	movs	r0, #1
 8007364:	f7ff fb22 	bl	80069ac <SM_GetOutputChannel>
 8007368:	4603      	mov	r3, r0
 800736a:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 800736e:	781b      	ldrb	r3, [r3, #0]
 8007370:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > amp_last_encoder_value)
 8007372:	4b15      	ldr	r3, [pc, #84]	; (80073c8 <VPP_MapEncoderPositionToAuxOutput+0x70>)
 8007374:	881b      	ldrh	r3, [r3, #0]
 8007376:	88fa      	ldrh	r2, [r7, #6]
 8007378:	429a      	cmp	r2, r3
 800737a:	d90c      	bls.n	8007396 <VPP_MapEncoderPositionToAuxOutput+0x3e>
	{
		tmpAmp++;
 800737c:	7bfb      	ldrb	r3, [r7, #15]
 800737e:	3301      	adds	r3, #1
 8007380:	73fb      	strb	r3, [r7, #15]
		if(tmpAmp > MAX_VPP_PRESETS-1) tmpAmp = VPP98;
 8007382:	7bfb      	ldrb	r3, [r7, #15]
 8007384:	2b61      	cmp	r3, #97	; 0x61
 8007386:	d901      	bls.n	800738c <VPP_MapEncoderPositionToAuxOutput+0x34>
 8007388:	2361      	movs	r3, #97	; 0x61
 800738a:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToAux(tmpAmp);
 800738c:	7bfb      	ldrb	r3, [r7, #15]
 800738e:	4618      	mov	r0, r3
 8007390:	f7ff fe70 	bl	8007074 <VPP_ApplyProfileToAux>
 8007394:	e010      	b.n	80073b8 <VPP_MapEncoderPositionToAuxOutput+0x60>
	}
	else if (pEncoderValue < amp_last_encoder_value)
 8007396:	4b0c      	ldr	r3, [pc, #48]	; (80073c8 <VPP_MapEncoderPositionToAuxOutput+0x70>)
 8007398:	881b      	ldrh	r3, [r3, #0]
 800739a:	88fa      	ldrh	r2, [r7, #6]
 800739c:	429a      	cmp	r2, r3
 800739e:	d20b      	bcs.n	80073b8 <VPP_MapEncoderPositionToAuxOutput+0x60>
	{
		tmpAmp--;
 80073a0:	7bfb      	ldrb	r3, [r7, #15]
 80073a2:	3b01      	subs	r3, #1
 80073a4:	73fb      	strb	r3, [r7, #15]
		if(tmpAmp > MAX_VPP_PRESETS-1) tmpAmp = VPP01;
 80073a6:	7bfb      	ldrb	r3, [r7, #15]
 80073a8:	2b61      	cmp	r3, #97	; 0x61
 80073aa:	d901      	bls.n	80073b0 <VPP_MapEncoderPositionToAuxOutput+0x58>
 80073ac:	2300      	movs	r3, #0
 80073ae:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToAux(tmpAmp);
 80073b0:	7bfb      	ldrb	r3, [r7, #15]
 80073b2:	4618      	mov	r0, r3
 80073b4:	f7ff fe5e 	bl	8007074 <VPP_ApplyProfileToAux>
	}
	amp_last_encoder_value = pEncoderValue;
 80073b8:	4a03      	ldr	r2, [pc, #12]	; (80073c8 <VPP_MapEncoderPositionToAuxOutput+0x70>)
 80073ba:	88fb      	ldrh	r3, [r7, #6]
 80073bc:	8013      	strh	r3, [r2, #0]

}
 80073be:	bf00      	nop
 80073c0:	3710      	adds	r7, #16
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}
 80073c6:	bf00      	nop
 80073c8:	20002156 	.word	0x20002156

080073cc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b08c      	sub	sp, #48	; 0x30
 80073d0:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 80073d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80073d6:	2200      	movs	r2, #0
 80073d8:	601a      	str	r2, [r3, #0]
 80073da:	605a      	str	r2, [r3, #4]
 80073dc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80073de:	1d3b      	adds	r3, r7, #4
 80073e0:	2220      	movs	r2, #32
 80073e2:	2100      	movs	r1, #0
 80073e4:	4618      	mov	r0, r3
 80073e6:	f00a f98f 	bl	8011708 <memset>

  /** Common config 
  */
  hadc1.Instance = ADC1;
 80073ea:	4b32      	ldr	r3, [pc, #200]	; (80074b4 <MX_ADC1_Init+0xe8>)
 80073ec:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80073f0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80073f2:	4b30      	ldr	r3, [pc, #192]	; (80074b4 <MX_ADC1_Init+0xe8>)
 80073f4:	2200      	movs	r2, #0
 80073f6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80073f8:	4b2e      	ldr	r3, [pc, #184]	; (80074b4 <MX_ADC1_Init+0xe8>)
 80073fa:	2200      	movs	r2, #0
 80073fc:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80073fe:	4b2d      	ldr	r3, [pc, #180]	; (80074b4 <MX_ADC1_Init+0xe8>)
 8007400:	2200      	movs	r2, #0
 8007402:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8007404:	4b2b      	ldr	r3, [pc, #172]	; (80074b4 <MX_ADC1_Init+0xe8>)
 8007406:	2200      	movs	r2, #0
 8007408:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800740a:	4b2a      	ldr	r3, [pc, #168]	; (80074b4 <MX_ADC1_Init+0xe8>)
 800740c:	2200      	movs	r2, #0
 800740e:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8007410:	4b28      	ldr	r3, [pc, #160]	; (80074b4 <MX_ADC1_Init+0xe8>)
 8007412:	2204      	movs	r2, #4
 8007414:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8007416:	4b27      	ldr	r3, [pc, #156]	; (80074b4 <MX_ADC1_Init+0xe8>)
 8007418:	2200      	movs	r2, #0
 800741a:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800741c:	4b25      	ldr	r3, [pc, #148]	; (80074b4 <MX_ADC1_Init+0xe8>)
 800741e:	2201      	movs	r2, #1
 8007420:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8007422:	4b24      	ldr	r3, [pc, #144]	; (80074b4 <MX_ADC1_Init+0xe8>)
 8007424:	2201      	movs	r2, #1
 8007426:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8007428:	4b22      	ldr	r3, [pc, #136]	; (80074b4 <MX_ADC1_Init+0xe8>)
 800742a:	2200      	movs	r2, #0
 800742c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007430:	4b20      	ldr	r3, [pc, #128]	; (80074b4 <MX_ADC1_Init+0xe8>)
 8007432:	2200      	movs	r2, #0
 8007434:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8007436:	4b1f      	ldr	r3, [pc, #124]	; (80074b4 <MX_ADC1_Init+0xe8>)
 8007438:	2200      	movs	r2, #0
 800743a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800743c:	4b1d      	ldr	r3, [pc, #116]	; (80074b4 <MX_ADC1_Init+0xe8>)
 800743e:	2201      	movs	r2, #1
 8007440:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8007444:	4b1b      	ldr	r3, [pc, #108]	; (80074b4 <MX_ADC1_Init+0xe8>)
 8007446:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800744a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800744c:	4b19      	ldr	r3, [pc, #100]	; (80074b4 <MX_ADC1_Init+0xe8>)
 800744e:	2200      	movs	r2, #0
 8007450:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8007454:	4817      	ldr	r0, [pc, #92]	; (80074b4 <MX_ADC1_Init+0xe8>)
 8007456:	f002 f849 	bl	80094ec <HAL_ADC_Init>
 800745a:	4603      	mov	r3, r0
 800745c:	2b00      	cmp	r3, #0
 800745e:	d001      	beq.n	8007464 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8007460:	f000 fea0 	bl	80081a4 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8007464:	2300      	movs	r3, #0
 8007466:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8007468:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800746c:	4619      	mov	r1, r3
 800746e:	4811      	ldr	r0, [pc, #68]	; (80074b4 <MX_ADC1_Init+0xe8>)
 8007470:	f003 f910 	bl	800a694 <HAL_ADCEx_MultiModeConfigChannel>
 8007474:	4603      	mov	r3, r0
 8007476:	2b00      	cmp	r3, #0
 8007478:	d001      	beq.n	800747e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800747a:	f000 fe93 	bl	80081a4 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800747e:	4b0e      	ldr	r3, [pc, #56]	; (80074b8 <MX_ADC1_Init+0xec>)
 8007480:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8007482:	2306      	movs	r3, #6
 8007484:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8007486:	2300      	movs	r3, #0
 8007488:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800748a:	237f      	movs	r3, #127	; 0x7f
 800748c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800748e:	2304      	movs	r3, #4
 8007490:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8007492:	2300      	movs	r3, #0
 8007494:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007496:	1d3b      	adds	r3, r7, #4
 8007498:	4619      	mov	r1, r3
 800749a:	4806      	ldr	r0, [pc, #24]	; (80074b4 <MX_ADC1_Init+0xe8>)
 800749c:	f002 fb2a 	bl	8009af4 <HAL_ADC_ConfigChannel>
 80074a0:	4603      	mov	r3, r0
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d001      	beq.n	80074aa <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80074a6:	f000 fe7d 	bl	80081a4 <Error_Handler>
  }

}
 80074aa:	bf00      	nop
 80074ac:	3730      	adds	r7, #48	; 0x30
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}
 80074b2:	bf00      	nop
 80074b4:	20002828 	.word	0x20002828
 80074b8:	0c900008 	.word	0x0c900008

080074bc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b08a      	sub	sp, #40	; 0x28
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80074c4:	f107 0314 	add.w	r3, r7, #20
 80074c8:	2200      	movs	r2, #0
 80074ca:	601a      	str	r2, [r3, #0]
 80074cc:	605a      	str	r2, [r3, #4]
 80074ce:	609a      	str	r2, [r3, #8]
 80074d0:	60da      	str	r2, [r3, #12]
 80074d2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80074dc:	d14f      	bne.n	800757e <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80074de:	4b2a      	ldr	r3, [pc, #168]	; (8007588 <HAL_ADC_MspInit+0xcc>)
 80074e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074e2:	4a29      	ldr	r2, [pc, #164]	; (8007588 <HAL_ADC_MspInit+0xcc>)
 80074e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80074e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80074ea:	4b27      	ldr	r3, [pc, #156]	; (8007588 <HAL_ADC_MspInit+0xcc>)
 80074ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80074f2:	613b      	str	r3, [r7, #16]
 80074f4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80074f6:	4b24      	ldr	r3, [pc, #144]	; (8007588 <HAL_ADC_MspInit+0xcc>)
 80074f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074fa:	4a23      	ldr	r2, [pc, #140]	; (8007588 <HAL_ADC_MspInit+0xcc>)
 80074fc:	f043 0301 	orr.w	r3, r3, #1
 8007500:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007502:	4b21      	ldr	r3, [pc, #132]	; (8007588 <HAL_ADC_MspInit+0xcc>)
 8007504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007506:	f003 0301 	and.w	r3, r3, #1
 800750a:	60fb      	str	r3, [r7, #12]
 800750c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA2     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800750e:	2304      	movs	r3, #4
 8007510:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007512:	2303      	movs	r3, #3
 8007514:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007516:	2300      	movs	r3, #0
 8007518:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800751a:	f107 0314 	add.w	r3, r7, #20
 800751e:	4619      	mov	r1, r3
 8007520:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007524:	f004 fe10 	bl	800c148 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8007528:	4b18      	ldr	r3, [pc, #96]	; (800758c <HAL_ADC_MspInit+0xd0>)
 800752a:	4a19      	ldr	r2, [pc, #100]	; (8007590 <HAL_ADC_MspInit+0xd4>)
 800752c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800752e:	4b17      	ldr	r3, [pc, #92]	; (800758c <HAL_ADC_MspInit+0xd0>)
 8007530:	2205      	movs	r2, #5
 8007532:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007534:	4b15      	ldr	r3, [pc, #84]	; (800758c <HAL_ADC_MspInit+0xd0>)
 8007536:	2200      	movs	r2, #0
 8007538:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800753a:	4b14      	ldr	r3, [pc, #80]	; (800758c <HAL_ADC_MspInit+0xd0>)
 800753c:	2200      	movs	r2, #0
 800753e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8007540:	4b12      	ldr	r3, [pc, #72]	; (800758c <HAL_ADC_MspInit+0xd0>)
 8007542:	2280      	movs	r2, #128	; 0x80
 8007544:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007546:	4b11      	ldr	r3, [pc, #68]	; (800758c <HAL_ADC_MspInit+0xd0>)
 8007548:	f44f 7200 	mov.w	r2, #512	; 0x200
 800754c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800754e:	4b0f      	ldr	r3, [pc, #60]	; (800758c <HAL_ADC_MspInit+0xd0>)
 8007550:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007554:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8007556:	4b0d      	ldr	r3, [pc, #52]	; (800758c <HAL_ADC_MspInit+0xd0>)
 8007558:	2220      	movs	r2, #32
 800755a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800755c:	4b0b      	ldr	r3, [pc, #44]	; (800758c <HAL_ADC_MspInit+0xd0>)
 800755e:	2200      	movs	r2, #0
 8007560:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8007562:	480a      	ldr	r0, [pc, #40]	; (800758c <HAL_ADC_MspInit+0xd0>)
 8007564:	f004 fabe 	bl	800bae4 <HAL_DMA_Init>
 8007568:	4603      	mov	r3, r0
 800756a:	2b00      	cmp	r3, #0
 800756c:	d001      	beq.n	8007572 <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 800756e:	f000 fe19 	bl	80081a4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	4a05      	ldr	r2, [pc, #20]	; (800758c <HAL_ADC_MspInit+0xd0>)
 8007576:	655a      	str	r2, [r3, #84]	; 0x54
 8007578:	4a04      	ldr	r2, [pc, #16]	; (800758c <HAL_ADC_MspInit+0xd0>)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800757e:	bf00      	nop
 8007580:	3728      	adds	r7, #40	; 0x28
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}
 8007586:	bf00      	nop
 8007588:	40021000 	.word	0x40021000
 800758c:	20002894 	.word	0x20002894
 8007590:	40020008 	.word	0x40020008

08007594 <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	af00      	add	r7, sp, #0

  hcomp1.Instance = COMP1;
 8007598:	4b0f      	ldr	r3, [pc, #60]	; (80075d8 <MX_COMP1_Init+0x44>)
 800759a:	4a10      	ldr	r2, [pc, #64]	; (80075dc <MX_COMP1_Init+0x48>)
 800759c:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 800759e:	4b0e      	ldr	r3, [pc, #56]	; (80075d8 <MX_COMP1_Init+0x44>)
 80075a0:	2200      	movs	r2, #0
 80075a2:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 80075a4:	4b0c      	ldr	r3, [pc, #48]	; (80075d8 <MX_COMP1_Init+0x44>)
 80075a6:	4a0e      	ldr	r2, [pc, #56]	; (80075e0 <MX_COMP1_Init+0x4c>)
 80075a8:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80075aa:	4b0b      	ldr	r3, [pc, #44]	; (80075d8 <MX_COMP1_Init+0x44>)
 80075ac:	2200      	movs	r2, #0
 80075ae:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_HIGH;
 80075b0:	4b09      	ldr	r3, [pc, #36]	; (80075d8 <MX_COMP1_Init+0x44>)
 80075b2:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80075b6:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 80075b8:	4b07      	ldr	r3, [pc, #28]	; (80075d8 <MX_COMP1_Init+0x44>)
 80075ba:	2200      	movs	r2, #0
 80075bc:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING_FALLING;
 80075be:	4b06      	ldr	r3, [pc, #24]	; (80075d8 <MX_COMP1_Init+0x44>)
 80075c0:	2231      	movs	r2, #49	; 0x31
 80075c2:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 80075c4:	4804      	ldr	r0, [pc, #16]	; (80075d8 <MX_COMP1_Init+0x44>)
 80075c6:	f003 fae5 	bl	800ab94 <HAL_COMP_Init>
 80075ca:	4603      	mov	r3, r0
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d001      	beq.n	80075d4 <MX_COMP1_Init+0x40>
  {
    Error_Handler();
 80075d0:	f000 fde8 	bl	80081a4 <Error_Handler>
  }

}
 80075d4:	bf00      	nop
 80075d6:	bd80      	pop	{r7, pc}
 80075d8:	200028f4 	.word	0x200028f4
 80075dc:	40010200 	.word	0x40010200
 80075e0:	00800030 	.word	0x00800030

080075e4 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b088      	sub	sp, #32
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80075ec:	f107 030c 	add.w	r3, r7, #12
 80075f0:	2200      	movs	r2, #0
 80075f2:	601a      	str	r2, [r3, #0]
 80075f4:	605a      	str	r2, [r3, #4]
 80075f6:	609a      	str	r2, [r3, #8]
 80075f8:	60da      	str	r2, [r3, #12]
 80075fa:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a13      	ldr	r2, [pc, #76]	; (8007650 <HAL_COMP_MspInit+0x6c>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d120      	bne.n	8007648 <HAL_COMP_MspInit+0x64>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007606:	4b13      	ldr	r3, [pc, #76]	; (8007654 <HAL_COMP_MspInit+0x70>)
 8007608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800760a:	4a12      	ldr	r2, [pc, #72]	; (8007654 <HAL_COMP_MspInit+0x70>)
 800760c:	f043 0301 	orr.w	r3, r3, #1
 8007610:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007612:	4b10      	ldr	r3, [pc, #64]	; (8007654 <HAL_COMP_MspInit+0x70>)
 8007614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007616:	f003 0301 	and.w	r3, r3, #1
 800761a:	60bb      	str	r3, [r7, #8]
 800761c:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration    
    PA1     ------> COMP1_INP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800761e:	2302      	movs	r3, #2
 8007620:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007622:	2303      	movs	r3, #3
 8007624:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007626:	2300      	movs	r3, #0
 8007628:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800762a:	f107 030c 	add.w	r3, r7, #12
 800762e:	4619      	mov	r1, r3
 8007630:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007634:	f004 fd88 	bl	800c148 <HAL_GPIO_Init>

    /* COMP1 interrupt Init */
    HAL_NVIC_SetPriority(COMP1_2_3_IRQn, 0, 0);
 8007638:	2200      	movs	r2, #0
 800763a:	2100      	movs	r1, #0
 800763c:	2040      	movs	r0, #64	; 0x40
 800763e:	f003 fdf0 	bl	800b222 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP1_2_3_IRQn);
 8007642:	2040      	movs	r0, #64	; 0x40
 8007644:	f003 fe07 	bl	800b256 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 8007648:	bf00      	nop
 800764a:	3720      	adds	r7, #32
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}
 8007650:	40010200 	.word	0x40010200
 8007654:	40021000 	.word	0x40021000

08007658 <MX_DAC1_Init>:
DMA_HandleTypeDef hdma_dac1_ch1;
DMA_HandleTypeDef hdma_dac2_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b08c      	sub	sp, #48	; 0x30
 800765c:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 800765e:	463b      	mov	r3, r7
 8007660:	2230      	movs	r2, #48	; 0x30
 8007662:	2100      	movs	r1, #0
 8007664:	4618      	mov	r0, r3
 8007666:	f00a f84f 	bl	8011708 <memset>

  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 800766a:	4b1e      	ldr	r3, [pc, #120]	; (80076e4 <MX_DAC1_Init+0x8c>)
 800766c:	4a1e      	ldr	r2, [pc, #120]	; (80076e8 <MX_DAC1_Init+0x90>)
 800766e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8007670:	481c      	ldr	r0, [pc, #112]	; (80076e4 <MX_DAC1_Init+0x8c>)
 8007672:	f003 fe18 	bl	800b2a6 <HAL_DAC_Init>
 8007676:	4603      	mov	r3, r0
 8007678:	2b00      	cmp	r3, #0
 800767a:	d001      	beq.n	8007680 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800767c:	f000 fd92 	bl	80081a4 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8007680:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007684:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8007686:	2300      	movs	r3, #0
 8007688:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 800768a:	2300      	movs	r3, #0
 800768c:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800768e:	2300      	movs	r3, #0
 8007690:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 8007692:	2306      	movs	r3, #6
 8007694:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8007696:	2300      	movs	r3, #0
 8007698:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800769a:	2300      	movs	r3, #0
 800769c:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800769e:	2301      	movs	r3, #1
 80076a0:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80076a2:	2300      	movs	r3, #0
 80076a4:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80076a6:	463b      	mov	r3, r7
 80076a8:	2200      	movs	r2, #0
 80076aa:	4619      	mov	r1, r3
 80076ac:	480d      	ldr	r0, [pc, #52]	; (80076e4 <MX_DAC1_Init+0x8c>)
 80076ae:	f003 ffe3 	bl	800b678 <HAL_DAC_ConfigChannel>
 80076b2:	4603      	mov	r3, r0
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d001      	beq.n	80076bc <MX_DAC1_Init+0x64>
  {
    Error_Handler();
 80076b8:	f000 fd74 	bl	80081a4 <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80076bc:	2300      	movs	r3, #0
 80076be:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80076c0:	2301      	movs	r3, #1
 80076c2:	61bb      	str	r3, [r7, #24]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80076c4:	463b      	mov	r3, r7
 80076c6:	2210      	movs	r2, #16
 80076c8:	4619      	mov	r1, r3
 80076ca:	4806      	ldr	r0, [pc, #24]	; (80076e4 <MX_DAC1_Init+0x8c>)
 80076cc:	f003 ffd4 	bl	800b678 <HAL_DAC_ConfigChannel>
 80076d0:	4603      	mov	r3, r0
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d001      	beq.n	80076da <MX_DAC1_Init+0x82>
  {
    Error_Handler();
 80076d6:	f000 fd65 	bl	80081a4 <Error_Handler>
  }

}
 80076da:	bf00      	nop
 80076dc:	3730      	adds	r7, #48	; 0x30
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}
 80076e2:	bf00      	nop
 80076e4:	2000292c 	.word	0x2000292c
 80076e8:	50000800 	.word	0x50000800

080076ec <MX_DAC2_Init>:
/* DAC2 init function */
void MX_DAC2_Init(void)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b08c      	sub	sp, #48	; 0x30
 80076f0:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 80076f2:	463b      	mov	r3, r7
 80076f4:	2230      	movs	r2, #48	; 0x30
 80076f6:	2100      	movs	r1, #0
 80076f8:	4618      	mov	r0, r3
 80076fa:	f00a f805 	bl	8011708 <memset>

  /** DAC Initialization 
  */
  hdac2.Instance = DAC2;
 80076fe:	4b16      	ldr	r3, [pc, #88]	; (8007758 <MX_DAC2_Init+0x6c>)
 8007700:	4a16      	ldr	r2, [pc, #88]	; (800775c <MX_DAC2_Init+0x70>)
 8007702:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8007704:	4814      	ldr	r0, [pc, #80]	; (8007758 <MX_DAC2_Init+0x6c>)
 8007706:	f003 fdce 	bl	800b2a6 <HAL_DAC_Init>
 800770a:	4603      	mov	r3, r0
 800770c:	2b00      	cmp	r3, #0
 800770e:	d001      	beq.n	8007714 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8007710:	f000 fd48 	bl	80081a4 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8007714:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007718:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 800771a:	2300      	movs	r3, #0
 800771c:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 800771e:	2300      	movs	r3, #0
 8007720:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8007722:	2300      	movs	r3, #0
 8007724:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 8007726:	2306      	movs	r3, #6
 8007728:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 800772a:	2300      	movs	r3, #0
 800772c:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800772e:	2300      	movs	r3, #0
 8007730:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8007732:	2301      	movs	r3, #1
 8007734:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8007736:	2300      	movs	r3, #0
 8007738:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800773a:	463b      	mov	r3, r7
 800773c:	2200      	movs	r2, #0
 800773e:	4619      	mov	r1, r3
 8007740:	4805      	ldr	r0, [pc, #20]	; (8007758 <MX_DAC2_Init+0x6c>)
 8007742:	f003 ff99 	bl	800b678 <HAL_DAC_ConfigChannel>
 8007746:	4603      	mov	r3, r0
 8007748:	2b00      	cmp	r3, #0
 800774a:	d001      	beq.n	8007750 <MX_DAC2_Init+0x64>
  {
    Error_Handler();
 800774c:	f000 fd2a 	bl	80081a4 <Error_Handler>
  }

}
 8007750:	bf00      	nop
 8007752:	3730      	adds	r7, #48	; 0x30
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}
 8007758:	20002918 	.word	0x20002918
 800775c:	50000c00 	.word	0x50000c00

08007760 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b08c      	sub	sp, #48	; 0x30
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007768:	f107 031c 	add.w	r3, r7, #28
 800776c:	2200      	movs	r2, #0
 800776e:	601a      	str	r2, [r3, #0]
 8007770:	605a      	str	r2, [r3, #4]
 8007772:	609a      	str	r2, [r3, #8]
 8007774:	60da      	str	r2, [r3, #12]
 8007776:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4a56      	ldr	r2, [pc, #344]	; (80078d8 <HAL_DAC_MspInit+0x178>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d150      	bne.n	8007824 <HAL_DAC_MspInit+0xc4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8007782:	4b56      	ldr	r3, [pc, #344]	; (80078dc <HAL_DAC_MspInit+0x17c>)
 8007784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007786:	4a55      	ldr	r2, [pc, #340]	; (80078dc <HAL_DAC_MspInit+0x17c>)
 8007788:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800778c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800778e:	4b53      	ldr	r3, [pc, #332]	; (80078dc <HAL_DAC_MspInit+0x17c>)
 8007790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007792:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007796:	61bb      	str	r3, [r7, #24]
 8007798:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800779a:	4b50      	ldr	r3, [pc, #320]	; (80078dc <HAL_DAC_MspInit+0x17c>)
 800779c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800779e:	4a4f      	ldr	r2, [pc, #316]	; (80078dc <HAL_DAC_MspInit+0x17c>)
 80077a0:	f043 0301 	orr.w	r3, r3, #1
 80077a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80077a6:	4b4d      	ldr	r3, [pc, #308]	; (80078dc <HAL_DAC_MspInit+0x17c>)
 80077a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077aa:	f003 0301 	and.w	r3, r3, #1
 80077ae:	617b      	str	r3, [r7, #20]
 80077b0:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80077b2:	2330      	movs	r3, #48	; 0x30
 80077b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80077b6:	2303      	movs	r3, #3
 80077b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077ba:	2300      	movs	r3, #0
 80077bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80077be:	f107 031c 	add.w	r3, r7, #28
 80077c2:	4619      	mov	r1, r3
 80077c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80077c8:	f004 fcbe 	bl	800c148 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel2;
 80077cc:	4b44      	ldr	r3, [pc, #272]	; (80078e0 <HAL_DAC_MspInit+0x180>)
 80077ce:	4a45      	ldr	r2, [pc, #276]	; (80078e4 <HAL_DAC_MspInit+0x184>)
 80077d0:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 80077d2:	4b43      	ldr	r3, [pc, #268]	; (80078e0 <HAL_DAC_MspInit+0x180>)
 80077d4:	2206      	movs	r2, #6
 80077d6:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80077d8:	4b41      	ldr	r3, [pc, #260]	; (80078e0 <HAL_DAC_MspInit+0x180>)
 80077da:	2210      	movs	r2, #16
 80077dc:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80077de:	4b40      	ldr	r3, [pc, #256]	; (80078e0 <HAL_DAC_MspInit+0x180>)
 80077e0:	2200      	movs	r2, #0
 80077e2:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80077e4:	4b3e      	ldr	r3, [pc, #248]	; (80078e0 <HAL_DAC_MspInit+0x180>)
 80077e6:	2280      	movs	r2, #128	; 0x80
 80077e8:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80077ea:	4b3d      	ldr	r3, [pc, #244]	; (80078e0 <HAL_DAC_MspInit+0x180>)
 80077ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80077f0:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80077f2:	4b3b      	ldr	r3, [pc, #236]	; (80078e0 <HAL_DAC_MspInit+0x180>)
 80077f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80077f8:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 80077fa:	4b39      	ldr	r3, [pc, #228]	; (80078e0 <HAL_DAC_MspInit+0x180>)
 80077fc:	2220      	movs	r2, #32
 80077fe:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8007800:	4b37      	ldr	r3, [pc, #220]	; (80078e0 <HAL_DAC_MspInit+0x180>)
 8007802:	2200      	movs	r2, #0
 8007804:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8007806:	4836      	ldr	r0, [pc, #216]	; (80078e0 <HAL_DAC_MspInit+0x180>)
 8007808:	f004 f96c 	bl	800bae4 <HAL_DMA_Init>
 800780c:	4603      	mov	r3, r0
 800780e:	2b00      	cmp	r3, #0
 8007810:	d001      	beq.n	8007816 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8007812:	f000 fcc7 	bl	80081a4 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	4a31      	ldr	r2, [pc, #196]	; (80078e0 <HAL_DAC_MspInit+0x180>)
 800781a:	609a      	str	r2, [r3, #8]
 800781c:	4a30      	ldr	r2, [pc, #192]	; (80078e0 <HAL_DAC_MspInit+0x180>)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }
}
 8007822:	e054      	b.n	80078ce <HAL_DAC_MspInit+0x16e>
  else if(dacHandle->Instance==DAC2)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	4a2f      	ldr	r2, [pc, #188]	; (80078e8 <HAL_DAC_MspInit+0x188>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d14f      	bne.n	80078ce <HAL_DAC_MspInit+0x16e>
    __HAL_RCC_DAC2_CLK_ENABLE();
 800782e:	4b2b      	ldr	r3, [pc, #172]	; (80078dc <HAL_DAC_MspInit+0x17c>)
 8007830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007832:	4a2a      	ldr	r2, [pc, #168]	; (80078dc <HAL_DAC_MspInit+0x17c>)
 8007834:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007838:	64d3      	str	r3, [r2, #76]	; 0x4c
 800783a:	4b28      	ldr	r3, [pc, #160]	; (80078dc <HAL_DAC_MspInit+0x17c>)
 800783c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800783e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007842:	613b      	str	r3, [r7, #16]
 8007844:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007846:	4b25      	ldr	r3, [pc, #148]	; (80078dc <HAL_DAC_MspInit+0x17c>)
 8007848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800784a:	4a24      	ldr	r2, [pc, #144]	; (80078dc <HAL_DAC_MspInit+0x17c>)
 800784c:	f043 0301 	orr.w	r3, r3, #1
 8007850:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007852:	4b22      	ldr	r3, [pc, #136]	; (80078dc <HAL_DAC_MspInit+0x17c>)
 8007854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007856:	f003 0301 	and.w	r3, r3, #1
 800785a:	60fb      	str	r3, [r7, #12]
 800785c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800785e:	2340      	movs	r3, #64	; 0x40
 8007860:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007862:	2303      	movs	r3, #3
 8007864:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007866:	2300      	movs	r3, #0
 8007868:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800786a:	f107 031c 	add.w	r3, r7, #28
 800786e:	4619      	mov	r1, r3
 8007870:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007874:	f004 fc68 	bl	800c148 <HAL_GPIO_Init>
    hdma_dac2_ch1.Instance = DMA1_Channel3;
 8007878:	4b1c      	ldr	r3, [pc, #112]	; (80078ec <HAL_DAC_MspInit+0x18c>)
 800787a:	4a1d      	ldr	r2, [pc, #116]	; (80078f0 <HAL_DAC_MspInit+0x190>)
 800787c:	601a      	str	r2, [r3, #0]
    hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 800787e:	4b1b      	ldr	r3, [pc, #108]	; (80078ec <HAL_DAC_MspInit+0x18c>)
 8007880:	2229      	movs	r2, #41	; 0x29
 8007882:	605a      	str	r2, [r3, #4]
    hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007884:	4b19      	ldr	r3, [pc, #100]	; (80078ec <HAL_DAC_MspInit+0x18c>)
 8007886:	2210      	movs	r2, #16
 8007888:	609a      	str	r2, [r3, #8]
    hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800788a:	4b18      	ldr	r3, [pc, #96]	; (80078ec <HAL_DAC_MspInit+0x18c>)
 800788c:	2200      	movs	r2, #0
 800788e:	60da      	str	r2, [r3, #12]
    hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8007890:	4b16      	ldr	r3, [pc, #88]	; (80078ec <HAL_DAC_MspInit+0x18c>)
 8007892:	2280      	movs	r2, #128	; 0x80
 8007894:	611a      	str	r2, [r3, #16]
    hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007896:	4b15      	ldr	r3, [pc, #84]	; (80078ec <HAL_DAC_MspInit+0x18c>)
 8007898:	f44f 7200 	mov.w	r2, #512	; 0x200
 800789c:	615a      	str	r2, [r3, #20]
    hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800789e:	4b13      	ldr	r3, [pc, #76]	; (80078ec <HAL_DAC_MspInit+0x18c>)
 80078a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80078a4:	619a      	str	r2, [r3, #24]
    hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 80078a6:	4b11      	ldr	r3, [pc, #68]	; (80078ec <HAL_DAC_MspInit+0x18c>)
 80078a8:	2220      	movs	r2, #32
 80078aa:	61da      	str	r2, [r3, #28]
    hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80078ac:	4b0f      	ldr	r3, [pc, #60]	; (80078ec <HAL_DAC_MspInit+0x18c>)
 80078ae:	2200      	movs	r2, #0
 80078b0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac2_ch1) != HAL_OK)
 80078b2:	480e      	ldr	r0, [pc, #56]	; (80078ec <HAL_DAC_MspInit+0x18c>)
 80078b4:	f004 f916 	bl	800bae4 <HAL_DMA_Init>
 80078b8:	4603      	mov	r3, r0
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d001      	beq.n	80078c2 <HAL_DAC_MspInit+0x162>
      Error_Handler();
 80078be:	f000 fc71 	bl	80081a4 <Error_Handler>
    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac2_ch1);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	4a09      	ldr	r2, [pc, #36]	; (80078ec <HAL_DAC_MspInit+0x18c>)
 80078c6:	609a      	str	r2, [r3, #8]
 80078c8:	4a08      	ldr	r2, [pc, #32]	; (80078ec <HAL_DAC_MspInit+0x18c>)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6293      	str	r3, [r2, #40]	; 0x28
}
 80078ce:	bf00      	nop
 80078d0:	3730      	adds	r7, #48	; 0x30
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}
 80078d6:	bf00      	nop
 80078d8:	50000800 	.word	0x50000800
 80078dc:	40021000 	.word	0x40021000
 80078e0:	2000216c 	.word	0x2000216c
 80078e4:	4002001c 	.word	0x4002001c
 80078e8:	50000c00 	.word	0x50000c00
 80078ec:	20002940 	.word	0x20002940
 80078f0:	40020030 	.word	0x40020030

080078f4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b082      	sub	sp, #8
 80078f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80078fa:	4b1e      	ldr	r3, [pc, #120]	; (8007974 <MX_DMA_Init+0x80>)
 80078fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078fe:	4a1d      	ldr	r2, [pc, #116]	; (8007974 <MX_DMA_Init+0x80>)
 8007900:	f043 0304 	orr.w	r3, r3, #4
 8007904:	6493      	str	r3, [r2, #72]	; 0x48
 8007906:	4b1b      	ldr	r3, [pc, #108]	; (8007974 <MX_DMA_Init+0x80>)
 8007908:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800790a:	f003 0304 	and.w	r3, r3, #4
 800790e:	607b      	str	r3, [r7, #4]
 8007910:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8007912:	4b18      	ldr	r3, [pc, #96]	; (8007974 <MX_DMA_Init+0x80>)
 8007914:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007916:	4a17      	ldr	r2, [pc, #92]	; (8007974 <MX_DMA_Init+0x80>)
 8007918:	f043 0301 	orr.w	r3, r3, #1
 800791c:	6493      	str	r3, [r2, #72]	; 0x48
 800791e:	4b15      	ldr	r3, [pc, #84]	; (8007974 <MX_DMA_Init+0x80>)
 8007920:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007922:	f003 0301 	and.w	r3, r3, #1
 8007926:	603b      	str	r3, [r7, #0]
 8007928:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 800792a:	2200      	movs	r2, #0
 800792c:	2101      	movs	r1, #1
 800792e:	200b      	movs	r0, #11
 8007930:	f003 fc77 	bl	800b222 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8007934:	200b      	movs	r0, #11
 8007936:	f003 fc8e 	bl	800b256 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800793a:	2200      	movs	r2, #0
 800793c:	2100      	movs	r1, #0
 800793e:	200c      	movs	r0, #12
 8007940:	f003 fc6f 	bl	800b222 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8007944:	200c      	movs	r0, #12
 8007946:	f003 fc86 	bl	800b256 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800794a:	2200      	movs	r2, #0
 800794c:	2100      	movs	r1, #0
 800794e:	200d      	movs	r0, #13
 8007950:	f003 fc67 	bl	800b222 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8007954:	200d      	movs	r0, #13
 8007956:	f003 fc7e 	bl	800b256 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800795a:	2200      	movs	r2, #0
 800795c:	2100      	movs	r1, #0
 800795e:	200e      	movs	r0, #14
 8007960:	f003 fc5f 	bl	800b222 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8007964:	200e      	movs	r0, #14
 8007966:	f003 fc76 	bl	800b256 <HAL_NVIC_EnableIRQ>

}
 800796a:	bf00      	nop
 800796c:	3708      	adds	r7, #8
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}
 8007972:	bf00      	nop
 8007974:	40021000 	.word	0x40021000

08007978 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007978:	b480      	push	{r7}
 800797a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800797c:	4b04      	ldr	r3, [pc, #16]	; (8007990 <__NVIC_GetPriorityGrouping+0x18>)
 800797e:	68db      	ldr	r3, [r3, #12]
 8007980:	0a1b      	lsrs	r3, r3, #8
 8007982:	f003 0307 	and.w	r3, r3, #7
}
 8007986:	4618      	mov	r0, r3
 8007988:	46bd      	mov	sp, r7
 800798a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798e:	4770      	bx	lr
 8007990:	e000ed00 	.word	0xe000ed00

08007994 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007994:	b480      	push	{r7}
 8007996:	b083      	sub	sp, #12
 8007998:	af00      	add	r7, sp, #0
 800799a:	4603      	mov	r3, r0
 800799c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800799e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	db0b      	blt.n	80079be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80079a6:	79fb      	ldrb	r3, [r7, #7]
 80079a8:	f003 021f 	and.w	r2, r3, #31
 80079ac:	4907      	ldr	r1, [pc, #28]	; (80079cc <__NVIC_EnableIRQ+0x38>)
 80079ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079b2:	095b      	lsrs	r3, r3, #5
 80079b4:	2001      	movs	r0, #1
 80079b6:	fa00 f202 	lsl.w	r2, r0, r2
 80079ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80079be:	bf00      	nop
 80079c0:	370c      	adds	r7, #12
 80079c2:	46bd      	mov	sp, r7
 80079c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c8:	4770      	bx	lr
 80079ca:	bf00      	nop
 80079cc:	e000e100 	.word	0xe000e100

080079d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80079d0:	b480      	push	{r7}
 80079d2:	b083      	sub	sp, #12
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	4603      	mov	r3, r0
 80079d8:	6039      	str	r1, [r7, #0]
 80079da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80079dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	db0a      	blt.n	80079fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	b2da      	uxtb	r2, r3
 80079e8:	490c      	ldr	r1, [pc, #48]	; (8007a1c <__NVIC_SetPriority+0x4c>)
 80079ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079ee:	0112      	lsls	r2, r2, #4
 80079f0:	b2d2      	uxtb	r2, r2
 80079f2:	440b      	add	r3, r1
 80079f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80079f8:	e00a      	b.n	8007a10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	b2da      	uxtb	r2, r3
 80079fe:	4908      	ldr	r1, [pc, #32]	; (8007a20 <__NVIC_SetPriority+0x50>)
 8007a00:	79fb      	ldrb	r3, [r7, #7]
 8007a02:	f003 030f 	and.w	r3, r3, #15
 8007a06:	3b04      	subs	r3, #4
 8007a08:	0112      	lsls	r2, r2, #4
 8007a0a:	b2d2      	uxtb	r2, r2
 8007a0c:	440b      	add	r3, r1
 8007a0e:	761a      	strb	r2, [r3, #24]
}
 8007a10:	bf00      	nop
 8007a12:	370c      	adds	r7, #12
 8007a14:	46bd      	mov	sp, r7
 8007a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1a:	4770      	bx	lr
 8007a1c:	e000e100 	.word	0xe000e100
 8007a20:	e000ed00 	.word	0xe000ed00

08007a24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007a24:	b480      	push	{r7}
 8007a26:	b089      	sub	sp, #36	; 0x24
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	60f8      	str	r0, [r7, #12]
 8007a2c:	60b9      	str	r1, [r7, #8]
 8007a2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	f003 0307 	and.w	r3, r3, #7
 8007a36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007a38:	69fb      	ldr	r3, [r7, #28]
 8007a3a:	f1c3 0307 	rsb	r3, r3, #7
 8007a3e:	2b04      	cmp	r3, #4
 8007a40:	bf28      	it	cs
 8007a42:	2304      	movcs	r3, #4
 8007a44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007a46:	69fb      	ldr	r3, [r7, #28]
 8007a48:	3304      	adds	r3, #4
 8007a4a:	2b06      	cmp	r3, #6
 8007a4c:	d902      	bls.n	8007a54 <NVIC_EncodePriority+0x30>
 8007a4e:	69fb      	ldr	r3, [r7, #28]
 8007a50:	3b03      	subs	r3, #3
 8007a52:	e000      	b.n	8007a56 <NVIC_EncodePriority+0x32>
 8007a54:	2300      	movs	r3, #0
 8007a56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007a58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007a5c:	69bb      	ldr	r3, [r7, #24]
 8007a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a62:	43da      	mvns	r2, r3
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	401a      	ands	r2, r3
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007a6c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007a70:	697b      	ldr	r3, [r7, #20]
 8007a72:	fa01 f303 	lsl.w	r3, r1, r3
 8007a76:	43d9      	mvns	r1, r3
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007a7c:	4313      	orrs	r3, r2
         );
}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	3724      	adds	r7, #36	; 0x24
 8007a82:	46bd      	mov	sp, r7
 8007a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a88:	4770      	bx	lr
	...

08007a8c <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b085      	sub	sp, #20
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16U), Port << (POSITION_VAL((Line >> 16U)) & 0x1FU) );
 8007a96:	4a14      	ldr	r2, [pc, #80]	; (8007ae8 <LL_SYSCFG_SetEXTISource+0x5c>)
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	f003 0303 	and.w	r3, r3, #3
 8007a9e:	3302      	adds	r3, #2
 8007aa0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	0c1b      	lsrs	r3, r3, #16
 8007aa8:	43db      	mvns	r3, r3
 8007aaa:	ea02 0103 	and.w	r1, r2, r3
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	0c1b      	lsrs	r3, r3, #16
 8007ab2:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	fa93 f3a3 	rbit	r3, r3
 8007aba:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	fab3 f383 	clz	r3, r3
 8007ac2:	b2db      	uxtb	r3, r3
 8007ac4:	f003 031f 	and.w	r3, r3, #31
 8007ac8:	687a      	ldr	r2, [r7, #4]
 8007aca:	409a      	lsls	r2, r3
 8007acc:	4806      	ldr	r0, [pc, #24]	; (8007ae8 <LL_SYSCFG_SetEXTISource+0x5c>)
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	f003 0303 	and.w	r3, r3, #3
 8007ad4:	430a      	orrs	r2, r1
 8007ad6:	3302      	adds	r3, #2
 8007ad8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8007adc:	bf00      	nop
 8007ade:	3714      	adds	r7, #20
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae6:	4770      	bx	lr
 8007ae8:	40010000 	.word	0x40010000

08007aec <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8007aec:	b480      	push	{r7}
 8007aee:	b089      	sub	sp, #36	; 0x24
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	60f8      	str	r0, [r7, #12]
 8007af4:	60b9      	str	r1, [r7, #8]
 8007af6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681a      	ldr	r2, [r3, #0]
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	fa93 f3a3 	rbit	r3, r3
 8007b06:	613b      	str	r3, [r7, #16]
  return result;
 8007b08:	693b      	ldr	r3, [r7, #16]
 8007b0a:	fab3 f383 	clz	r3, r3
 8007b0e:	b2db      	uxtb	r3, r3
 8007b10:	005b      	lsls	r3, r3, #1
 8007b12:	2103      	movs	r1, #3
 8007b14:	fa01 f303 	lsl.w	r3, r1, r3
 8007b18:	43db      	mvns	r3, r3
 8007b1a:	401a      	ands	r2, r3
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b20:	69fb      	ldr	r3, [r7, #28]
 8007b22:	fa93 f3a3 	rbit	r3, r3
 8007b26:	61bb      	str	r3, [r7, #24]
  return result;
 8007b28:	69bb      	ldr	r3, [r7, #24]
 8007b2a:	fab3 f383 	clz	r3, r3
 8007b2e:	b2db      	uxtb	r3, r3
 8007b30:	005b      	lsls	r3, r3, #1
 8007b32:	6879      	ldr	r1, [r7, #4]
 8007b34:	fa01 f303 	lsl.w	r3, r1, r3
 8007b38:	431a      	orrs	r2, r3
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	601a      	str	r2, [r3, #0]
}
 8007b3e:	bf00      	nop
 8007b40:	3724      	adds	r7, #36	; 0x24
 8007b42:	46bd      	mov	sp, r7
 8007b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b48:	4770      	bx	lr

08007b4a <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8007b4a:	b480      	push	{r7}
 8007b4c:	b089      	sub	sp, #36	; 0x24
 8007b4e:	af00      	add	r7, sp, #0
 8007b50:	60f8      	str	r0, [r7, #12]
 8007b52:	60b9      	str	r1, [r7, #8]
 8007b54:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	68da      	ldr	r2, [r3, #12]
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b5e:	697b      	ldr	r3, [r7, #20]
 8007b60:	fa93 f3a3 	rbit	r3, r3
 8007b64:	613b      	str	r3, [r7, #16]
  return result;
 8007b66:	693b      	ldr	r3, [r7, #16]
 8007b68:	fab3 f383 	clz	r3, r3
 8007b6c:	b2db      	uxtb	r3, r3
 8007b6e:	005b      	lsls	r3, r3, #1
 8007b70:	2103      	movs	r1, #3
 8007b72:	fa01 f303 	lsl.w	r3, r1, r3
 8007b76:	43db      	mvns	r3, r3
 8007b78:	401a      	ands	r2, r3
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b7e:	69fb      	ldr	r3, [r7, #28]
 8007b80:	fa93 f3a3 	rbit	r3, r3
 8007b84:	61bb      	str	r3, [r7, #24]
  return result;
 8007b86:	69bb      	ldr	r3, [r7, #24]
 8007b88:	fab3 f383 	clz	r3, r3
 8007b8c:	b2db      	uxtb	r3, r3
 8007b8e:	005b      	lsls	r3, r3, #1
 8007b90:	6879      	ldr	r1, [r7, #4]
 8007b92:	fa01 f303 	lsl.w	r3, r1, r3
 8007b96:	431a      	orrs	r2, r3
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	60da      	str	r2, [r3, #12]
}
 8007b9c:	bf00      	nop
 8007b9e:	3724      	adds	r7, #36	; 0x24
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba6:	4770      	bx	lr

08007ba8 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8007ba8:	b480      	push	{r7}
 8007baa:	b083      	sub	sp, #12
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
 8007bb0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	683a      	ldr	r2, [r7, #0]
 8007bb6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007bb8:	bf00      	nop
 8007bba:	370c      	adds	r7, #12
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc2:	4770      	bx	lr

08007bc4 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b085      	sub	sp, #20
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8007bcc:	4b08      	ldr	r3, [pc, #32]	; (8007bf0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007bce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007bd0:	4907      	ldr	r1, [pc, #28]	; (8007bf0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	4313      	orrs	r3, r2
 8007bd6:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8007bd8:	4b05      	ldr	r3, [pc, #20]	; (8007bf0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007bda:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	4013      	ands	r3, r2
 8007be0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007be2:	68fb      	ldr	r3, [r7, #12]
}
 8007be4:	bf00      	nop
 8007be6:	3714      	adds	r7, #20
 8007be8:	46bd      	mov	sp, r7
 8007bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bee:	4770      	bx	lr
 8007bf0:	40021000 	.word	0x40021000

08007bf4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b08a      	sub	sp, #40	; 0x28
 8007bf8:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8007bfa:	f107 031c 	add.w	r3, r7, #28
 8007bfe:	2200      	movs	r2, #0
 8007c00:	601a      	str	r2, [r3, #0]
 8007c02:	605a      	str	r2, [r3, #4]
 8007c04:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c06:	1d3b      	adds	r3, r7, #4
 8007c08:	2200      	movs	r2, #0
 8007c0a:	601a      	str	r2, [r3, #0]
 8007c0c:	605a      	str	r2, [r3, #4]
 8007c0e:	609a      	str	r2, [r3, #8]
 8007c10:	60da      	str	r2, [r3, #12]
 8007c12:	611a      	str	r2, [r3, #16]
 8007c14:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8007c16:	2004      	movs	r0, #4
 8007c18:	f7ff ffd4 	bl	8007bc4 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 8007c1c:	2020      	movs	r0, #32
 8007c1e:	f7ff ffd1 	bl	8007bc4 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8007c22:	2001      	movs	r0, #1
 8007c24:	f7ff ffce 	bl	8007bc4 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8007c28:	2002      	movs	r0, #2
 8007c2a:	f7ff ffcb 	bl	8007bc4 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMODE_GPIO_Port, TRIGMODE_Pin);
 8007c2e:	2108      	movs	r1, #8
 8007c30:	48d3      	ldr	r0, [pc, #844]	; (8007f80 <MX_GPIO_Init+0x38c>)
 8007c32:	f7ff ffb9 	bl	8007ba8 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(OFFSET_ENABLE_GPIO_Port, OFFSET_ENABLE_Pin);
 8007c36:	2108      	movs	r1, #8
 8007c38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007c3c:	f7ff ffb4 	bl	8007ba8 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin);
 8007c40:	2110      	movs	r1, #16
 8007c42:	48cf      	ldr	r0, [pc, #828]	; (8007f80 <MX_GPIO_Init+0x38c>)
 8007c44:	f7ff ffb0 	bl	8007ba8 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin);
 8007c48:	2120      	movs	r1, #32
 8007c4a:	48cd      	ldr	r0, [pc, #820]	; (8007f80 <MX_GPIO_Init+0x38c>)
 8007c4c:	f7ff ffac 	bl	8007ba8 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin);
 8007c50:	2101      	movs	r1, #1
 8007c52:	48cc      	ldr	r0, [pc, #816]	; (8007f84 <MX_GPIO_Init+0x390>)
 8007c54:	f7ff ffa8 	bl	8007ba8 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin);
 8007c58:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007c5c:	48c8      	ldr	r0, [pc, #800]	; (8007f80 <MX_GPIO_Init+0x38c>)
 8007c5e:	f7ff ffa3 	bl	8007ba8 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin);
 8007c62:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007c66:	48c6      	ldr	r0, [pc, #792]	; (8007f80 <MX_GPIO_Init+0x38c>)
 8007c68:	f7ff ff9e 	bl	8007ba8 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DC_GPIO_Port, DC_Pin);
 8007c6c:	2140      	movs	r1, #64	; 0x40
 8007c6e:	48c5      	ldr	r0, [pc, #788]	; (8007f84 <MX_GPIO_Init+0x390>)
 8007c70:	f7ff ff9a 	bl	8007ba8 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CS_GPIO_Port, CS_Pin);
 8007c74:	2180      	movs	r1, #128	; 0x80
 8007c76:	48c3      	ldr	r0, [pc, #780]	; (8007f84 <MX_GPIO_Init+0x390>)
 8007c78:	f7ff ff96 	bl	8007ba8 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(RST_GPIO_Port, RST_Pin);
 8007c7c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007c80:	48c0      	ldr	r0, [pc, #768]	; (8007f84 <MX_GPIO_Init+0x390>)
 8007c82:	f7ff ff91 	bl	8007ba8 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE14);
 8007c86:	49c0      	ldr	r1, [pc, #768]	; (8007f88 <MX_GPIO_Init+0x394>)
 8007c88:	2002      	movs	r0, #2
 8007c8a:	f7ff feff 	bl	8007a8c <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE15);
 8007c8e:	49bf      	ldr	r1, [pc, #764]	; (8007f8c <MX_GPIO_Init+0x398>)
 8007c90:	2002      	movs	r0, #2
 8007c92:	f7ff fefb 	bl	8007a8c <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE0);
 8007c96:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8007c9a:	2005      	movs	r0, #5
 8007c9c:	f7ff fef6 	bl	8007a8c <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE1);
 8007ca0:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
 8007ca4:	2005      	movs	r0, #5
 8007ca6:	f7ff fef1 	bl	8007a8c <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE2);
 8007caa:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8007cae:	2002      	movs	r0, #2
 8007cb0:	f7ff feec 	bl	8007a8c <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 8007cb4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007cb8:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8007cba:	2301      	movs	r3, #1
 8007cbc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8007cc6:	2302      	movs	r3, #2
 8007cc8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8007ccc:	f107 031c 	add.w	r3, r7, #28
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f008 fa37 	bl	8010144 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 8007cd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007cda:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8007cdc:	2301      	movs	r3, #1
 8007cde:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8007ce8:	2302      	movs	r3, #2
 8007cea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8007cee:	f107 031c 	add.w	r3, r7, #28
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f008 fa26 	bl	8010144 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8007d02:	2300      	movs	r3, #0
 8007d04:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8007d08:	2302      	movs	r3, #2
 8007d0a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8007d0e:	f107 031c 	add.w	r3, r7, #28
 8007d12:	4618      	mov	r0, r3
 8007d14:	f008 fa16 	bl	8010144 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 8007d18:	2302      	movs	r3, #2
 8007d1a:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8007d1c:	2301      	movs	r3, #1
 8007d1e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8007d22:	2300      	movs	r3, #0
 8007d24:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8007d28:	2302      	movs	r3, #2
 8007d2a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8007d2e:	f107 031c 	add.w	r3, r7, #28
 8007d32:	4618      	mov	r0, r3
 8007d34:	f008 fa06 	bl	8010144 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_2;
 8007d38:	2304      	movs	r3, #4
 8007d3a:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8007d42:	2300      	movs	r3, #0
 8007d44:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8007d48:	2302      	movs	r3, #2
 8007d4a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8007d4e:	f107 031c 	add.w	r3, r7, #28
 8007d52:	4618      	mov	r0, r3
 8007d54:	f008 f9f6 	bl	8010144 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_PULL_UP);
 8007d58:	2201      	movs	r2, #1
 8007d5a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007d5e:	4888      	ldr	r0, [pc, #544]	; (8007f80 <MX_GPIO_Init+0x38c>)
 8007d60:	f7ff fef3 	bl	8007b4a <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_PULL_UP);
 8007d64:	2201      	movs	r2, #1
 8007d66:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007d6a:	4885      	ldr	r0, [pc, #532]	; (8007f80 <MX_GPIO_Init+0x38c>)
 8007d6c:	f7ff feed 	bl	8007b4a <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_PULL_UP);
 8007d70:	2201      	movs	r2, #1
 8007d72:	2101      	movs	r1, #1
 8007d74:	4886      	ldr	r0, [pc, #536]	; (8007f90 <MX_GPIO_Init+0x39c>)
 8007d76:	f7ff fee8 	bl	8007b4a <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_PULL_UP);
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	2102      	movs	r1, #2
 8007d7e:	4884      	ldr	r0, [pc, #528]	; (8007f90 <MX_GPIO_Init+0x39c>)
 8007d80:	f7ff fee3 	bl	8007b4a <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(ENC_SW_GPIO_Port, ENC_SW_Pin, LL_GPIO_PULL_UP);
 8007d84:	2201      	movs	r2, #1
 8007d86:	2104      	movs	r1, #4
 8007d88:	487d      	ldr	r0, [pc, #500]	; (8007f80 <MX_GPIO_Init+0x38c>)
 8007d8a:	f7ff fede 	bl	8007b4a <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_MODE_INPUT);
 8007d8e:	2200      	movs	r2, #0
 8007d90:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007d94:	487a      	ldr	r0, [pc, #488]	; (8007f80 <MX_GPIO_Init+0x38c>)
 8007d96:	f7ff fea9 	bl	8007aec <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_MODE_INPUT);
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007da0:	4877      	ldr	r0, [pc, #476]	; (8007f80 <MX_GPIO_Init+0x38c>)
 8007da2:	f7ff fea3 	bl	8007aec <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_MODE_INPUT);
 8007da6:	2200      	movs	r2, #0
 8007da8:	2101      	movs	r1, #1
 8007daa:	4879      	ldr	r0, [pc, #484]	; (8007f90 <MX_GPIO_Init+0x39c>)
 8007dac:	f7ff fe9e 	bl	8007aec <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_MODE_INPUT);
 8007db0:	2200      	movs	r2, #0
 8007db2:	2102      	movs	r1, #2
 8007db4:	4876      	ldr	r0, [pc, #472]	; (8007f90 <MX_GPIO_Init+0x39c>)
 8007db6:	f7ff fe99 	bl	8007aec <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(ENC_SW_GPIO_Port, ENC_SW_Pin, LL_GPIO_MODE_INPUT);
 8007dba:	2200      	movs	r2, #0
 8007dbc:	2104      	movs	r1, #4
 8007dbe:	4870      	ldr	r0, [pc, #448]	; (8007f80 <MX_GPIO_Init+0x38c>)
 8007dc0:	f7ff fe94 	bl	8007aec <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = TRIGMODE_Pin;
 8007dc4:	2308      	movs	r3, #8
 8007dc6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007dc8:	2301      	movs	r3, #1
 8007dca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007dcc:	2300      	movs	r3, #0
 8007dce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8007dd4:	2302      	movs	r3, #2
 8007dd6:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMODE_GPIO_Port, &GPIO_InitStruct);
 8007dd8:	1d3b      	adds	r3, r7, #4
 8007dda:	4619      	mov	r1, r3
 8007ddc:	4868      	ldr	r0, [pc, #416]	; (8007f80 <MX_GPIO_Init+0x38c>)
 8007dde:	f008 fba4 	bl	801052a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = OFFSET_ENABLE_Pin;
 8007de2:	2308      	movs	r3, #8
 8007de4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007de6:	2301      	movs	r3, #1
 8007de8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007dea:	2300      	movs	r3, #0
 8007dec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007dee:	2300      	movs	r3, #0
 8007df0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007df2:	2300      	movs	r3, #0
 8007df4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(OFFSET_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8007df6:	1d3b      	adds	r3, r7, #4
 8007df8:	4619      	mov	r1, r3
 8007dfa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007dfe:	f008 fb94 	bl	801052a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CH1_GAIN_C_Pin;
 8007e02:	2310      	movs	r3, #16
 8007e04:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007e06:	2301      	movs	r3, #1
 8007e08:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007e12:	2300      	movs	r3, #0
 8007e14:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CH1_GAIN_C_GPIO_Port, &GPIO_InitStruct);
 8007e16:	1d3b      	adds	r3, r7, #4
 8007e18:	4619      	mov	r1, r3
 8007e1a:	4859      	ldr	r0, [pc, #356]	; (8007f80 <MX_GPIO_Init+0x38c>)
 8007e1c:	f008 fb85 	bl	801052a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CH1_GAIN_B_Pin;
 8007e20:	2320      	movs	r3, #32
 8007e22:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007e24:	2301      	movs	r3, #1
 8007e26:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007e28:	2300      	movs	r3, #0
 8007e2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007e30:	2300      	movs	r3, #0
 8007e32:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CH1_GAIN_B_GPIO_Port, &GPIO_InitStruct);
 8007e34:	1d3b      	adds	r3, r7, #4
 8007e36:	4619      	mov	r1, r3
 8007e38:	4851      	ldr	r0, [pc, #324]	; (8007f80 <MX_GPIO_Init+0x38c>)
 8007e3a:	f008 fb76 	bl	801052a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CH1_GAIN_A_Pin;
 8007e3e:	2301      	movs	r3, #1
 8007e40:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007e42:	2301      	movs	r3, #1
 8007e44:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007e46:	2300      	movs	r3, #0
 8007e48:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CH1_GAIN_A_GPIO_Port, &GPIO_InitStruct);
 8007e52:	1d3b      	adds	r3, r7, #4
 8007e54:	4619      	mov	r1, r3
 8007e56:	484b      	ldr	r0, [pc, #300]	; (8007f84 <MX_GPIO_Init+0x390>)
 8007e58:	f008 fb67 	bl	801052a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX1_Pin;
 8007e5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007e60:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007e62:	2301      	movs	r3, #1
 8007e64:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007e66:	2300      	movs	r3, #0
 8007e68:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX1_GPIO_Port, &GPIO_InitStruct);
 8007e72:	1d3b      	adds	r3, r7, #4
 8007e74:	4619      	mov	r1, r3
 8007e76:	4842      	ldr	r0, [pc, #264]	; (8007f80 <MX_GPIO_Init+0x38c>)
 8007e78:	f008 fb57 	bl	801052a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX2_Pin;
 8007e7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e80:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007e82:	2301      	movs	r3, #1
 8007e84:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007e86:	2300      	movs	r3, #0
 8007e88:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX2_GPIO_Port, &GPIO_InitStruct);
 8007e92:	1d3b      	adds	r3, r7, #4
 8007e94:	4619      	mov	r1, r3
 8007e96:	483a      	ldr	r0, [pc, #232]	; (8007f80 <MX_GPIO_Init+0x38c>)
 8007e98:	f008 fb47 	bl	801052a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DC_Pin;
 8007e9c:	2340      	movs	r3, #64	; 0x40
 8007e9e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8007ea4:	2303      	movs	r3, #3
 8007ea6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007eac:	2300      	movs	r3, #0
 8007eae:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DC_GPIO_Port, &GPIO_InitStruct);
 8007eb0:	1d3b      	adds	r3, r7, #4
 8007eb2:	4619      	mov	r1, r3
 8007eb4:	4833      	ldr	r0, [pc, #204]	; (8007f84 <MX_GPIO_Init+0x390>)
 8007eb6:	f008 fb38 	bl	801052a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CS_Pin;
 8007eba:	2380      	movs	r3, #128	; 0x80
 8007ebc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8007ec2:	2303      	movs	r3, #3
 8007ec4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8007ece:	1d3b      	adds	r3, r7, #4
 8007ed0:	4619      	mov	r1, r3
 8007ed2:	482c      	ldr	r0, [pc, #176]	; (8007f84 <MX_GPIO_Init+0x390>)
 8007ed4:	f008 fb29 	bl	801052a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = RST_Pin;
 8007ed8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007edc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007ede:	2301      	movs	r3, #1
 8007ee0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8007ee2:	2303      	movs	r3, #3
 8007ee4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007eea:	2300      	movs	r3, #0
 8007eec:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8007eee:	1d3b      	adds	r3, r7, #4
 8007ef0:	4619      	mov	r1, r3
 8007ef2:	4824      	ldr	r0, [pc, #144]	; (8007f84 <MX_GPIO_Init+0x390>)
 8007ef4:	f008 fb19 	bl	801052a <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8007ef8:	f7ff fd3e 	bl	8007978 <__NVIC_GetPriorityGrouping>
 8007efc:	4603      	mov	r3, r0
 8007efe:	2200      	movs	r2, #0
 8007f00:	2100      	movs	r1, #0
 8007f02:	4618      	mov	r0, r3
 8007f04:	f7ff fd8e 	bl	8007a24 <NVIC_EncodePriority>
 8007f08:	4603      	mov	r3, r0
 8007f0a:	4619      	mov	r1, r3
 8007f0c:	2006      	movs	r0, #6
 8007f0e:	f7ff fd5f 	bl	80079d0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI0_IRQn);
 8007f12:	2006      	movs	r0, #6
 8007f14:	f7ff fd3e 	bl	8007994 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8007f18:	f7ff fd2e 	bl	8007978 <__NVIC_GetPriorityGrouping>
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	2200      	movs	r2, #0
 8007f20:	2100      	movs	r1, #0
 8007f22:	4618      	mov	r0, r3
 8007f24:	f7ff fd7e 	bl	8007a24 <NVIC_EncodePriority>
 8007f28:	4603      	mov	r3, r0
 8007f2a:	4619      	mov	r1, r3
 8007f2c:	2007      	movs	r0, #7
 8007f2e:	f7ff fd4f 	bl	80079d0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI1_IRQn);
 8007f32:	2007      	movs	r0, #7
 8007f34:	f7ff fd2e 	bl	8007994 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8007f38:	f7ff fd1e 	bl	8007978 <__NVIC_GetPriorityGrouping>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	2200      	movs	r2, #0
 8007f40:	2100      	movs	r1, #0
 8007f42:	4618      	mov	r0, r3
 8007f44:	f7ff fd6e 	bl	8007a24 <NVIC_EncodePriority>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	4619      	mov	r1, r3
 8007f4c:	2008      	movs	r0, #8
 8007f4e:	f7ff fd3f 	bl	80079d0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI2_IRQn);
 8007f52:	2008      	movs	r0, #8
 8007f54:	f7ff fd1e 	bl	8007994 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8007f58:	f7ff fd0e 	bl	8007978 <__NVIC_GetPriorityGrouping>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	2200      	movs	r2, #0
 8007f60:	2100      	movs	r1, #0
 8007f62:	4618      	mov	r0, r3
 8007f64:	f7ff fd5e 	bl	8007a24 <NVIC_EncodePriority>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	4619      	mov	r1, r3
 8007f6c:	2028      	movs	r0, #40	; 0x28
 8007f6e:	f7ff fd2f 	bl	80079d0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 8007f72:	2028      	movs	r0, #40	; 0x28
 8007f74:	f7ff fd0e 	bl	8007994 <__NVIC_EnableIRQ>

}
 8007f78:	bf00      	nop
 8007f7a:	3728      	adds	r7, #40	; 0x28
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	e009      	b.n	8007f94 <MX_GPIO_Init+0x3a0>
 8007f80:	48000800 	.word	0x48000800
 8007f84:	48000400 	.word	0x48000400
 8007f88:	0f000003 	.word	0x0f000003
 8007f8c:	f0000003 	.word	0xf0000003
 8007f90:	48001400 	.word	0x48001400
 8007f94:	bd80      	pop	{r7, pc}
 8007f96:	bf00      	nop

08007f98 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b083      	sub	sp, #12
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8007fa0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8007fa4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8007fa8:	f003 0301 	and.w	r3, r3, #1
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d013      	beq.n	8007fd8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8007fb0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8007fb4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8007fb8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d00b      	beq.n	8007fd8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8007fc0:	e000      	b.n	8007fc4 <ITM_SendChar+0x2c>
    {
      __NOP();
 8007fc2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8007fc4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d0f9      	beq.n	8007fc2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8007fce:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8007fd2:	687a      	ldr	r2, [r7, #4]
 8007fd4:	b2d2      	uxtb	r2, r2
 8007fd6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8007fd8:	687b      	ldr	r3, [r7, #4]
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	370c      	adds	r7, #12
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe4:	4770      	bx	lr

08007fe6 <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// redirect printf to SWV
int _write(int file, char *ptr, int len)
{
 8007fe6:	b580      	push	{r7, lr}
 8007fe8:	b086      	sub	sp, #24
 8007fea:	af00      	add	r7, sp, #0
 8007fec:	60f8      	str	r0, [r7, #12]
 8007fee:	60b9      	str	r1, [r7, #8]
 8007ff0:	607a      	str	r2, [r7, #4]
  int i=0;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	617b      	str	r3, [r7, #20]
 8007ffa:	e009      	b.n	8008010 <_write+0x2a>
    ITM_SendChar((*ptr++));
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	1c5a      	adds	r2, r3, #1
 8008000:	60ba      	str	r2, [r7, #8]
 8008002:	781b      	ldrb	r3, [r3, #0]
 8008004:	4618      	mov	r0, r3
 8008006:	f7ff ffc7 	bl	8007f98 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 800800a:	697b      	ldr	r3, [r7, #20]
 800800c:	3301      	adds	r3, #1
 800800e:	617b      	str	r3, [r7, #20]
 8008010:	697a      	ldr	r2, [r7, #20]
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	429a      	cmp	r2, r3
 8008016:	dbf1      	blt.n	8007ffc <_write+0x16>
  return len;
 8008018:	687b      	ldr	r3, [r7, #4]
}
 800801a:	4618      	mov	r0, r3
 800801c:	3718      	adds	r7, #24
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}
	...

08008024 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008028:	f000 ff73 	bl	8008f12 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800802c:	f000 f84c 	bl	80080c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008030:	f7ff fde0 	bl	8007bf4 <MX_GPIO_Init>
  MX_DMA_Init();
 8008034:	f7ff fc5e 	bl	80078f4 <MX_DMA_Init>
  MX_DAC1_Init();
 8008038:	f7ff fb0e 	bl	8007658 <MX_DAC1_Init>
  MX_ADC1_Init();
 800803c:	f7ff f9c6 	bl	80073cc <MX_ADC1_Init>
  MX_COMP1_Init();
 8008040:	f7ff faa8 	bl	8007594 <MX_COMP1_Init>
  MX_SPI3_Init();
 8008044:	f000 f8ec 	bl	8008220 <MX_SPI3_Init>
  MX_RNG_Init();
 8008048:	f000 f8dc 	bl	8008204 <MX_RNG_Init>
  MX_TIM1_Init();
 800804c:	f000 fb50 	bl	80086f0 <MX_TIM1_Init>
  MX_TIM8_Init();
 8008050:	f000 fcd0 	bl	80089f4 <MX_TIM8_Init>
  MX_TIM16_Init();
 8008054:	f000 fd88 	bl	8008b68 <MX_TIM16_Init>
  MX_TIM15_Init();
 8008058:	f000 fd34 	bl	8008ac4 <MX_TIM15_Init>
  MX_TIM5_Init();
 800805c:	f000 fc7c 	bl	8008958 <MX_TIM5_Init>
  MX_TIM3_Init();
 8008060:	f000 fc2c 	bl	80088bc <MX_TIM3_Init>
  MX_DAC2_Init();
 8008064:	f7ff fb42 	bl	80076ec <MX_DAC2_Init>
  MX_TIM17_Init();
 8008068:	f000 fda6 	bl	8008bb8 <MX_TIM17_Init>
  MX_TIM2_Init();
 800806c:	f000 fbb0 	bl	80087d0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  SM_Init();
 8008070:	f7fe fb88 	bl	8006784 <SM_Init>

  HAL_TIM_Base_Start_IT(&htim17);
 8008074:	4810      	ldr	r0, [pc, #64]	; (80080b8 <main+0x94>)
 8008076:	f005 fc1b 	bl	800d8b0 <HAL_TIM_Base_Start_IT>

  // http://www.ti.com/lit/ds/symlink/ts5a3357.pdf
  HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin6
 800807a:	2200      	movs	r2, #0
 800807c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008080:	480e      	ldr	r0, [pc, #56]	; (80080bc <main+0x98>)
 8008082:	f004 fac5 	bl	800c610 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin5
 8008086:	2200      	movs	r2, #0
 8008088:	f44f 7100 	mov.w	r1, #512	; 0x200
 800808c:	480b      	ldr	r0, [pc, #44]	; (80080bc <main+0x98>)
 800808e:	f004 fabf 	bl	800c610 <HAL_GPIO_WritePin>

#ifndef DISABLE_ALL_TIMERS
  // encoder input
  HAL_TIM_Base_Start(&htim1);		// enable encoder timer
 8008092:	480b      	ldr	r0, [pc, #44]	; (80080c0 <main+0x9c>)
 8008094:	f005 fbb6 	bl	800d804 <HAL_TIM_Base_Start>
  //TIM1->DIER |= TIM_DIER_IDXIE;		// enable index interrupts

#endif	//DISABLE_ALL_TIMERS

  TIM6->PSC = 65535;
 8008098:	4b0a      	ldr	r3, [pc, #40]	; (80080c4 <main+0xa0>)
 800809a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800809e:	629a      	str	r2, [r3, #40]	; 0x28
  TIM6->ARR = 65535;
 80080a0:	4b08      	ldr	r3, [pc, #32]	; (80080c4 <main+0xa0>)
 80080a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80080a6:	62da      	str	r2, [r3, #44]	; 0x2c


  // TFT lib enable
  DM_Init();
 80080a8:	f7f8 fe62 	bl	8000d70 <DM_Init>
  DM_PostInit();
 80080ac:	f7f8 fe6e 	bl	8000d8c <DM_PostInit>

  // Intialise interrupt manager
  IM_Init();
 80080b0:	f7fd f92c 	bl	800530c <IM_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80080b4:	e7fe      	b.n	80080b4 <main+0x90>
 80080b6:	bf00      	nop
 80080b8:	20002afc 	.word	0x20002afc
 80080bc:	48000800 	.word	0x48000800
 80080c0:	20002b94 	.word	0x20002b94
 80080c4:	40001000 	.word	0x40001000

080080c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b0a8      	sub	sp, #160	; 0xa0
 80080cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80080ce:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80080d2:	2238      	movs	r2, #56	; 0x38
 80080d4:	2100      	movs	r1, #0
 80080d6:	4618      	mov	r0, r3
 80080d8:	f009 fb16 	bl	8011708 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80080dc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80080e0:	2200      	movs	r2, #0
 80080e2:	601a      	str	r2, [r3, #0]
 80080e4:	605a      	str	r2, [r3, #4]
 80080e6:	609a      	str	r2, [r3, #8]
 80080e8:	60da      	str	r2, [r3, #12]
 80080ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80080ec:	463b      	mov	r3, r7
 80080ee:	2254      	movs	r2, #84	; 0x54
 80080f0:	2100      	movs	r1, #0
 80080f2:	4618      	mov	r0, r3
 80080f4:	f009 fb08 	bl	8011708 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80080f8:	2000      	movs	r0, #0
 80080fa:	f004 faa1 	bl	800c640 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 80080fe:	2322      	movs	r3, #34	; 0x22
 8008100:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008102:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008106:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8008108:	2340      	movs	r3, #64	; 0x40
 800810a:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800810c:	2301      	movs	r3, #1
 800810e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008112:	2302      	movs	r3, #2
 8008114:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8008118:	2302      	movs	r3, #2
 800811a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 800811e:	2302      	movs	r3, #2
 8008120:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 42;
 8008124:	232a      	movs	r3, #42	; 0x2a
 8008126:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800812a:	2302      	movs	r3, #2
 800812c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8008130:	2304      	movs	r3, #4
 8008132:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8008136:	2302      	movs	r3, #2
 8008138:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800813c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8008140:	4618      	mov	r0, r3
 8008142:	f004 fb21 	bl	800c788 <HAL_RCC_OscConfig>
 8008146:	4603      	mov	r3, r0
 8008148:	2b00      	cmp	r3, #0
 800814a:	d001      	beq.n	8008150 <SystemClock_Config+0x88>
  {
    Error_Handler();
 800814c:	f000 f82a 	bl	80081a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008150:	230f      	movs	r3, #15
 8008152:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008154:	2303      	movs	r3, #3
 8008156:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008158:	2300      	movs	r3, #0
 800815a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800815c:	2300      	movs	r3, #0
 800815e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008160:	2300      	movs	r3, #0
 8008162:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 8008164:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8008168:	2108      	movs	r1, #8
 800816a:	4618      	mov	r0, r3
 800816c:	f004 fe24 	bl	800cdb8 <HAL_RCC_ClockConfig>
 8008170:	4603      	mov	r3, r0
 8008172:	2b00      	cmp	r3, #0
 8008174:	d001      	beq.n	800817a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8008176:	f000 f815 	bl	80081a4 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_ADC12;
 800817a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800817e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8008180:	2300      	movs	r3, #0
 8008182:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8008184:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008188:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800818a:	463b      	mov	r3, r7
 800818c:	4618      	mov	r0, r3
 800818e:	f005 f803 	bl	800d198 <HAL_RCCEx_PeriphCLKConfig>
 8008192:	4603      	mov	r3, r0
 8008194:	2b00      	cmp	r3, #0
 8008196:	d001      	beq.n	800819c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8008198:	f000 f804 	bl	80081a4 <Error_Handler>
  }
}
 800819c:	bf00      	nop
 800819e:	37a0      	adds	r7, #160	; 0xa0
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}

080081a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80081a4:	b480      	push	{r7}
 80081a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80081a8:	bf00      	nop
 80081aa:	46bd      	mov	sp, r7
 80081ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b0:	4770      	bx	lr

080081b2 <LL_RNG_Enable>:
  * @rmtoll CR           RNGEN         LL_RNG_Enable
  * @param  RNGx RNG Instance
  * @retval None
  */
__STATIC_INLINE void LL_RNG_Enable(RNG_TypeDef *RNGx)
{
 80081b2:	b480      	push	{r7}
 80081b4:	b083      	sub	sp, #12
 80081b6:	af00      	add	r7, sp, #0
 80081b8:	6078      	str	r0, [r7, #4]
  SET_BIT(RNGx->CR, RNG_CR_RNGEN);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f043 0204 	orr.w	r2, r3, #4
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	601a      	str	r2, [r3, #0]
}
 80081c6:	bf00      	nop
 80081c8:	370c      	adds	r7, #12
 80081ca:	46bd      	mov	sp, r7
 80081cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d0:	4770      	bx	lr
	...

080081d4 <LL_AHB2_GRP1_EnableClock>:
{
 80081d4:	b480      	push	{r7}
 80081d6:	b085      	sub	sp, #20
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80081dc:	4b08      	ldr	r3, [pc, #32]	; (8008200 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80081de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80081e0:	4907      	ldr	r1, [pc, #28]	; (8008200 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	4313      	orrs	r3, r2
 80081e6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80081e8:	4b05      	ldr	r3, [pc, #20]	; (8008200 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80081ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	4013      	ands	r3, r2
 80081f0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80081f2:	68fb      	ldr	r3, [r7, #12]
}
 80081f4:	bf00      	nop
 80081f6:	3714      	adds	r7, #20
 80081f8:	46bd      	mov	sp, r7
 80081fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fe:	4770      	bx	lr
 8008200:	40021000 	.word	0x40021000

08008204 <MX_RNG_Init>:

/* USER CODE END 0 */

/* RNG init function */
void MX_RNG_Init(void)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	af00      	add	r7, sp, #0

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_RNG);
 8008208:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800820c:	f7ff ffe2 	bl	80081d4 <LL_AHB2_GRP1_EnableClock>

  LL_RNG_Enable(RNG);
 8008210:	4802      	ldr	r0, [pc, #8]	; (800821c <MX_RNG_Init+0x18>)
 8008212:	f7ff ffce 	bl	80081b2 <LL_RNG_Enable>

}
 8008216:	bf00      	nop
 8008218:	bd80      	pop	{r7, pc}
 800821a:	bf00      	nop
 800821c:	50060800 	.word	0x50060800

08008220 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8008224:	4b1b      	ldr	r3, [pc, #108]	; (8008294 <MX_SPI3_Init+0x74>)
 8008226:	4a1c      	ldr	r2, [pc, #112]	; (8008298 <MX_SPI3_Init+0x78>)
 8008228:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800822a:	4b1a      	ldr	r3, [pc, #104]	; (8008294 <MX_SPI3_Init+0x74>)
 800822c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008230:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8008232:	4b18      	ldr	r3, [pc, #96]	; (8008294 <MX_SPI3_Init+0x74>)
 8008234:	2200      	movs	r2, #0
 8008236:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8008238:	4b16      	ldr	r3, [pc, #88]	; (8008294 <MX_SPI3_Init+0x74>)
 800823a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800823e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008240:	4b14      	ldr	r3, [pc, #80]	; (8008294 <MX_SPI3_Init+0x74>)
 8008242:	2200      	movs	r2, #0
 8008244:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008246:	4b13      	ldr	r3, [pc, #76]	; (8008294 <MX_SPI3_Init+0x74>)
 8008248:	2200      	movs	r2, #0
 800824a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800824c:	4b11      	ldr	r3, [pc, #68]	; (8008294 <MX_SPI3_Init+0x74>)
 800824e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008252:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8008254:	4b0f      	ldr	r3, [pc, #60]	; (8008294 <MX_SPI3_Init+0x74>)
 8008256:	2210      	movs	r2, #16
 8008258:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800825a:	4b0e      	ldr	r3, [pc, #56]	; (8008294 <MX_SPI3_Init+0x74>)
 800825c:	2200      	movs	r2, #0
 800825e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8008260:	4b0c      	ldr	r3, [pc, #48]	; (8008294 <MX_SPI3_Init+0x74>)
 8008262:	2200      	movs	r2, #0
 8008264:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008266:	4b0b      	ldr	r3, [pc, #44]	; (8008294 <MX_SPI3_Init+0x74>)
 8008268:	2200      	movs	r2, #0
 800826a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800826c:	4b09      	ldr	r3, [pc, #36]	; (8008294 <MX_SPI3_Init+0x74>)
 800826e:	2207      	movs	r2, #7
 8008270:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8008272:	4b08      	ldr	r3, [pc, #32]	; (8008294 <MX_SPI3_Init+0x74>)
 8008274:	2200      	movs	r2, #0
 8008276:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8008278:	4b06      	ldr	r3, [pc, #24]	; (8008294 <MX_SPI3_Init+0x74>)
 800827a:	2208      	movs	r2, #8
 800827c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800827e:	4805      	ldr	r0, [pc, #20]	; (8008294 <MX_SPI3_Init+0x74>)
 8008280:	f005 f9d6 	bl	800d630 <HAL_SPI_Init>
 8008284:	4603      	mov	r3, r0
 8008286:	2b00      	cmp	r3, #0
 8008288:	d001      	beq.n	800828e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800828a:	f7ff ff8b 	bl	80081a4 <Error_Handler>
  }

}
 800828e:	bf00      	nop
 8008290:	bd80      	pop	{r7, pc}
 8008292:	bf00      	nop
 8008294:	200029a0 	.word	0x200029a0
 8008298:	40003c00 	.word	0x40003c00

0800829c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b08a      	sub	sp, #40	; 0x28
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80082a4:	f107 0314 	add.w	r3, r7, #20
 80082a8:	2200      	movs	r2, #0
 80082aa:	601a      	str	r2, [r3, #0]
 80082ac:	605a      	str	r2, [r3, #4]
 80082ae:	609a      	str	r2, [r3, #8]
 80082b0:	60da      	str	r2, [r3, #12]
 80082b2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	4a17      	ldr	r2, [pc, #92]	; (8008318 <HAL_SPI_MspInit+0x7c>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d128      	bne.n	8008310 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80082be:	4b17      	ldr	r3, [pc, #92]	; (800831c <HAL_SPI_MspInit+0x80>)
 80082c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082c2:	4a16      	ldr	r2, [pc, #88]	; (800831c <HAL_SPI_MspInit+0x80>)
 80082c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082c8:	6593      	str	r3, [r2, #88]	; 0x58
 80082ca:	4b14      	ldr	r3, [pc, #80]	; (800831c <HAL_SPI_MspInit+0x80>)
 80082cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80082d2:	613b      	str	r3, [r7, #16]
 80082d4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80082d6:	4b11      	ldr	r3, [pc, #68]	; (800831c <HAL_SPI_MspInit+0x80>)
 80082d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082da:	4a10      	ldr	r2, [pc, #64]	; (800831c <HAL_SPI_MspInit+0x80>)
 80082dc:	f043 0304 	orr.w	r3, r3, #4
 80082e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80082e2:	4b0e      	ldr	r3, [pc, #56]	; (800831c <HAL_SPI_MspInit+0x80>)
 80082e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082e6:	f003 0304 	and.w	r3, r3, #4
 80082ea:	60fb      	str	r3, [r7, #12]
 80082ec:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80082ee:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80082f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80082f4:	2302      	movs	r3, #2
 80082f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082f8:	2300      	movs	r3, #0
 80082fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80082fc:	2300      	movs	r3, #0
 80082fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8008300:	2306      	movs	r3, #6
 8008302:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008304:	f107 0314 	add.w	r3, r7, #20
 8008308:	4619      	mov	r1, r3
 800830a:	4805      	ldr	r0, [pc, #20]	; (8008320 <HAL_SPI_MspInit+0x84>)
 800830c:	f003 ff1c 	bl	800c148 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8008310:	bf00      	nop
 8008312:	3728      	adds	r7, #40	; 0x28
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}
 8008318:	40003c00 	.word	0x40003c00
 800831c:	40021000 	.word	0x40021000
 8008320:	48000800 	.word	0x48000800

08008324 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 8008324:	b480      	push	{r7}
 8008326:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8008328:	4b05      	ldr	r3, [pc, #20]	; (8008340 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 800832a:	689b      	ldr	r3, [r3, #8]
 800832c:	4a04      	ldr	r2, [pc, #16]	; (8008340 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 800832e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008332:	6093      	str	r3, [r2, #8]
}
 8008334:	bf00      	nop
 8008336:	46bd      	mov	sp, r7
 8008338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833c:	4770      	bx	lr
 800833e:	bf00      	nop
 8008340:	40007000 	.word	0x40007000

08008344 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b082      	sub	sp, #8
 8008348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800834a:	4b0f      	ldr	r3, [pc, #60]	; (8008388 <HAL_MspInit+0x44>)
 800834c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800834e:	4a0e      	ldr	r2, [pc, #56]	; (8008388 <HAL_MspInit+0x44>)
 8008350:	f043 0301 	orr.w	r3, r3, #1
 8008354:	6613      	str	r3, [r2, #96]	; 0x60
 8008356:	4b0c      	ldr	r3, [pc, #48]	; (8008388 <HAL_MspInit+0x44>)
 8008358:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800835a:	f003 0301 	and.w	r3, r3, #1
 800835e:	607b      	str	r3, [r7, #4]
 8008360:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008362:	4b09      	ldr	r3, [pc, #36]	; (8008388 <HAL_MspInit+0x44>)
 8008364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008366:	4a08      	ldr	r2, [pc, #32]	; (8008388 <HAL_MspInit+0x44>)
 8008368:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800836c:	6593      	str	r3, [r2, #88]	; 0x58
 800836e:	4b06      	ldr	r3, [pc, #24]	; (8008388 <HAL_MspInit+0x44>)
 8008370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008376:	603b      	str	r3, [r7, #0]
 8008378:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 800837a:	f7ff ffd3 	bl	8008324 <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800837e:	bf00      	nop
 8008380:	3708      	adds	r7, #8
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}
 8008386:	bf00      	nop
 8008388:	40021000 	.word	0x40021000

0800838c <LL_EXTI_IsActiveFlag_0_31>:
{
 800838c:	b480      	push	{r7}
 800838e:	b083      	sub	sp, #12
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8008394:	4b07      	ldr	r3, [pc, #28]	; (80083b4 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8008396:	695a      	ldr	r2, [r3, #20]
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	4013      	ands	r3, r2
 800839c:	687a      	ldr	r2, [r7, #4]
 800839e:	429a      	cmp	r2, r3
 80083a0:	d101      	bne.n	80083a6 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 80083a2:	2301      	movs	r3, #1
 80083a4:	e000      	b.n	80083a8 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 80083a6:	2300      	movs	r3, #0
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	370c      	adds	r7, #12
 80083ac:	46bd      	mov	sp, r7
 80083ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b2:	4770      	bx	lr
 80083b4:	40010400 	.word	0x40010400

080083b8 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80083b8:	b480      	push	{r7}
 80083ba:	b083      	sub	sp, #12
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 80083c0:	4a04      	ldr	r2, [pc, #16]	; (80083d4 <LL_EXTI_ClearFlag_0_31+0x1c>)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6153      	str	r3, [r2, #20]
}
 80083c6:	bf00      	nop
 80083c8:	370c      	adds	r7, #12
 80083ca:	46bd      	mov	sp, r7
 80083cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d0:	4770      	bx	lr
 80083d2:	bf00      	nop
 80083d4:	40010400 	.word	0x40010400

080083d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80083d8:	b480      	push	{r7}
 80083da:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80083dc:	bf00      	nop
 80083de:	46bd      	mov	sp, r7
 80083e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e4:	4770      	bx	lr
	...

080083e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	DM_SetErrorDebugMsg("HARD FAULT");
 80083ec:	4801      	ldr	r0, [pc, #4]	; (80083f4 <HardFault_Handler+0xc>)
 80083ee:	f7f9 fa2d 	bl	800184c <DM_SetErrorDebugMsg>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80083f2:	e7fe      	b.n	80083f2 <HardFault_Handler+0xa>
 80083f4:	080166dc 	.word	0x080166dc

080083f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	DM_SetErrorDebugMsg("MEMMANAGE FAULT");
 80083fc:	4801      	ldr	r0, [pc, #4]	; (8008404 <MemManage_Handler+0xc>)
 80083fe:	f7f9 fa25 	bl	800184c <DM_SetErrorDebugMsg>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008402:	e7fe      	b.n	8008402 <MemManage_Handler+0xa>
 8008404:	080166e8 	.word	0x080166e8

08008408 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
	DM_SetErrorDebugMsg("BUS FAULT");
 800840c:	4801      	ldr	r0, [pc, #4]	; (8008414 <BusFault_Handler+0xc>)
 800840e:	f7f9 fa1d 	bl	800184c <DM_SetErrorDebugMsg>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008412:	e7fe      	b.n	8008412 <BusFault_Handler+0xa>
 8008414:	080166f8 	.word	0x080166f8

08008418 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
	DM_SetErrorDebugMsg("USAGE FAULT");
 800841c:	4801      	ldr	r0, [pc, #4]	; (8008424 <UsageFault_Handler+0xc>)
 800841e:	f7f9 fa15 	bl	800184c <DM_SetErrorDebugMsg>
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008422:	e7fe      	b.n	8008422 <UsageFault_Handler+0xa>
 8008424:	08016704 	.word	0x08016704

08008428 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008428:	b480      	push	{r7}
 800842a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800842c:	bf00      	nop
 800842e:	46bd      	mov	sp, r7
 8008430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008434:	4770      	bx	lr

08008436 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008436:	b480      	push	{r7}
 8008438:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800843a:	bf00      	nop
 800843c:	46bd      	mov	sp, r7
 800843e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008442:	4770      	bx	lr

08008444 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008444:	b480      	push	{r7}
 8008446:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008448:	bf00      	nop
 800844a:	46bd      	mov	sp, r7
 800844c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008450:	4770      	bx	lr

08008452 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008452:	b580      	push	{r7, lr}
 8008454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008456:	f000 fdaf 	bl	8008fb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800845a:	bf00      	nop
 800845c:	bd80      	pop	{r7, pc}

0800845e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800845e:	b580      	push	{r7, lr}
 8008460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

	IM_BTN3_EXTI0_Handler();
 8008462:	f7fd f80b 	bl	800547c <IM_BTN3_EXTI0_Handler>

  /* USER CODE END EXTI0_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 8008466:	2001      	movs	r0, #1
 8008468:	f7ff ff90 	bl	800838c <LL_EXTI_IsActiveFlag_0_31>
 800846c:	4603      	mov	r3, r0
 800846e:	2b00      	cmp	r3, #0
 8008470:	d002      	beq.n	8008478 <EXTI0_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 8008472:	2001      	movs	r0, #1
 8008474:	f7ff ffa0 	bl	80083b8 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_0 */
  }
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8008478:	bf00      	nop
 800847a:	bd80      	pop	{r7, pc}

0800847c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

	IM_BTN4_EXTI1_Handler();
 8008480:	f7fd f822 	bl	80054c8 <IM_BTN4_EXTI1_Handler>

  /* USER CODE END EXTI1_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1) != RESET)
 8008484:	2002      	movs	r0, #2
 8008486:	f7ff ff81 	bl	800838c <LL_EXTI_IsActiveFlag_0_31>
 800848a:	4603      	mov	r3, r0
 800848c:	2b00      	cmp	r3, #0
 800848e:	d002      	beq.n	8008496 <EXTI1_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_1);
 8008490:	2002      	movs	r0, #2
 8008492:	f7ff ff91 	bl	80083b8 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_1 */
  }
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8008496:	bf00      	nop
 8008498:	bd80      	pop	{r7, pc}

0800849a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800849a:	b580      	push	{r7, lr}
 800849c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

	IM_ENC_EXTI2_Handler();
 800849e:	f7fd f839 	bl	8005514 <IM_ENC_EXTI2_Handler>

  /* USER CODE END EXTI2_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2) != RESET)
 80084a2:	2004      	movs	r0, #4
 80084a4:	f7ff ff72 	bl	800838c <LL_EXTI_IsActiveFlag_0_31>
 80084a8:	4603      	mov	r3, r0
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d002      	beq.n	80084b4 <EXTI2_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_2);
 80084ae:	2004      	movs	r0, #4
 80084b0:	f7ff ff82 	bl	80083b8 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_2 */
  }
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80084b4:	bf00      	nop
 80084b6:	bd80      	pop	{r7, pc}

080084b8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80084bc:	4802      	ldr	r0, [pc, #8]	; (80084c8 <DMA1_Channel1_IRQHandler+0x10>)
 80084be:	f003 fcf4 	bl	800beaa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80084c2:	bf00      	nop
 80084c4:	bd80      	pop	{r7, pc}
 80084c6:	bf00      	nop
 80084c8:	20002894 	.word	0x20002894

080084cc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80084d0:	4802      	ldr	r0, [pc, #8]	; (80084dc <DMA1_Channel2_IRQHandler+0x10>)
 80084d2:	f003 fcea 	bl	800beaa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80084d6:	bf00      	nop
 80084d8:	bd80      	pop	{r7, pc}
 80084da:	bf00      	nop
 80084dc:	2000216c 	.word	0x2000216c

080084e0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2_ch1);
 80084e4:	4802      	ldr	r0, [pc, #8]	; (80084f0 <DMA1_Channel3_IRQHandler+0x10>)
 80084e6:	f003 fce0 	bl	800beaa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80084ea:	bf00      	nop
 80084ec:	bd80      	pop	{r7, pc}
 80084ee:	bf00      	nop
 80084f0:	20002940 	.word	0x20002940

080084f4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 80084f8:	4802      	ldr	r0, [pc, #8]	; (8008504 <DMA1_Channel4_IRQHandler+0x10>)
 80084fa:	f003 fcd6 	bl	800beaa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80084fe:	bf00      	nop
 8008500:	bd80      	pop	{r7, pc}
 8008502:	bf00      	nop
 8008504:	20002a04 	.word	0x20002a04

08008508 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

	DM_UpdateDisplay();
 800850c:	f7f8 fc58 	bl	8000dc0 <DM_UpdateDisplay>


	IM_ENC_DIRF_Handler();
 8008510:	f7fd f826 	bl	8005560 <IM_ENC_DIRF_Handler>

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8008514:	4803      	ldr	r0, [pc, #12]	; (8008524 <TIM1_BRK_TIM15_IRQHandler+0x1c>)
 8008516:	f005 ff69 	bl	800e3ec <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 800851a:	4803      	ldr	r0, [pc, #12]	; (8008528 <TIM1_BRK_TIM15_IRQHandler+0x20>)
 800851c:	f005 ff66 	bl	800e3ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8008520:	bf00      	nop
 8008522:	bd80      	pop	{r7, pc}
 8008524:	20002b94 	.word	0x20002b94
 8008528:	20002ab0 	.word	0x20002ab0

0800852c <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */
	EM_ProcessEvent();
 8008530:	f7fb ffbc 	bl	80044ac <EM_ProcessEvent>
  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8008534:	4803      	ldr	r0, [pc, #12]	; (8008544 <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 8008536:	f005 ff59 	bl	800e3ec <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 800853a:	4803      	ldr	r0, [pc, #12]	; (8008548 <TIM1_TRG_COM_TIM17_IRQHandler+0x1c>)
 800853c:	f005 ff56 	bl	800e3ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8008540:	bf00      	nop
 8008542:	bd80      	pop	{r7, pc}
 8008544:	20002b94 	.word	0x20002b94
 8008548:	20002afc 	.word	0x20002afc

0800854c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8008550:	4802      	ldr	r0, [pc, #8]	; (800855c <TIM3_IRQHandler+0x10>)
 8008552:	f005 ff4b 	bl	800e3ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8008556:	bf00      	nop
 8008558:	bd80      	pop	{r7, pc}
 800855a:	bf00      	nop
 800855c:	200021d8 	.word	0x200021d8

08008560 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	IM_BTN1_EXTI14_Handler();
 8008564:	f7fc ff3a 	bl	80053dc <IM_BTN1_EXTI14_Handler>
	IM_BTN2_EXTI15_Handler();
 8008568:	f7fc ff60 	bl	800542c <IM_BTN2_EXTI15_Handler>

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14) != RESET)
 800856c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8008570:	f7ff ff0c 	bl	800838c <LL_EXTI_IsActiveFlag_0_31>
 8008574:	4603      	mov	r3, r0
 8008576:	2b00      	cmp	r3, #0
 8008578:	d003      	beq.n	8008582 <EXTI15_10_IRQHandler+0x22>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_14);
 800857a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800857e:	f7ff ff1b 	bl	80083b8 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_14 */
    
    /* USER CODE END LL_EXTI_LINE_14 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15) != RESET)
 8008582:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8008586:	f7ff ff01 	bl	800838c <LL_EXTI_IsActiveFlag_0_31>
 800858a:	4603      	mov	r3, r0
 800858c:	2b00      	cmp	r3, #0
 800858e:	d003      	beq.n	8008598 <EXTI15_10_IRQHandler+0x38>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_15);
 8008590:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8008594:	f7ff ff10 	bl	80083b8 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_15 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8008598:	bf00      	nop
 800859a:	bd80      	pop	{r7, pc}

0800859c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	IM_SWEEP_UPDATE_TIM_IRQHandler();
 80085a0:	f7fc fec4 	bl	800532c <IM_SWEEP_UPDATE_TIM_IRQHandler>
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80085a4:	4802      	ldr	r0, [pc, #8]	; (80085b0 <TIM5_IRQHandler+0x14>)
 80085a6:	f005 ff21 	bl	800e3ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80085aa:	bf00      	nop
 80085ac:	bd80      	pop	{r7, pc}
 80085ae:	bf00      	nop
 80085b0:	20002b48 	.word	0x20002b48

080085b4 <COMP1_2_3_IRQHandler>:

/**
  * @brief This function handles COMP1, COMP2 and COMP3 interrupts through EXTI lines 21, 22 and 29.
  */
void COMP1_2_3_IRQHandler(void)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP1_2_3_IRQn 0 */

  /* USER CODE END COMP1_2_3_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp1);
 80085b8:	4802      	ldr	r0, [pc, #8]	; (80085c4 <COMP1_2_3_IRQHandler+0x10>)
 80085ba:	f002 fcb1 	bl	800af20 <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP1_2_3_IRQn 1 */

  /* USER CODE END COMP1_2_3_IRQn 1 */
}
 80085be:	bf00      	nop
 80085c0:	bd80      	pop	{r7, pc}
 80085c2:	bf00      	nop
 80085c4:	200028f4 	.word	0x200028f4

080085c8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b086      	sub	sp, #24
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	60f8      	str	r0, [r7, #12]
 80085d0:	60b9      	str	r1, [r7, #8]
 80085d2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80085d4:	2300      	movs	r3, #0
 80085d6:	617b      	str	r3, [r7, #20]
 80085d8:	e00a      	b.n	80085f0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80085da:	f3af 8000 	nop.w
 80085de:	4601      	mov	r1, r0
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	1c5a      	adds	r2, r3, #1
 80085e4:	60ba      	str	r2, [r7, #8]
 80085e6:	b2ca      	uxtb	r2, r1
 80085e8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80085ea:	697b      	ldr	r3, [r7, #20]
 80085ec:	3301      	adds	r3, #1
 80085ee:	617b      	str	r3, [r7, #20]
 80085f0:	697a      	ldr	r2, [r7, #20]
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	429a      	cmp	r2, r3
 80085f6:	dbf0      	blt.n	80085da <_read+0x12>
	}

return len;
 80085f8:	687b      	ldr	r3, [r7, #4]
}
 80085fa:	4618      	mov	r0, r3
 80085fc:	3718      	adds	r7, #24
 80085fe:	46bd      	mov	sp, r7
 8008600:	bd80      	pop	{r7, pc}

08008602 <_close>:
	}
	return len;
}

int _close(int file)
{
 8008602:	b480      	push	{r7}
 8008604:	b083      	sub	sp, #12
 8008606:	af00      	add	r7, sp, #0
 8008608:	6078      	str	r0, [r7, #4]
	return -1;
 800860a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800860e:	4618      	mov	r0, r3
 8008610:	370c      	adds	r7, #12
 8008612:	46bd      	mov	sp, r7
 8008614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008618:	4770      	bx	lr

0800861a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800861a:	b480      	push	{r7}
 800861c:	b083      	sub	sp, #12
 800861e:	af00      	add	r7, sp, #0
 8008620:	6078      	str	r0, [r7, #4]
 8008622:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800862a:	605a      	str	r2, [r3, #4]
	return 0;
 800862c:	2300      	movs	r3, #0
}
 800862e:	4618      	mov	r0, r3
 8008630:	370c      	adds	r7, #12
 8008632:	46bd      	mov	sp, r7
 8008634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008638:	4770      	bx	lr

0800863a <_isatty>:

int _isatty(int file)
{
 800863a:	b480      	push	{r7}
 800863c:	b083      	sub	sp, #12
 800863e:	af00      	add	r7, sp, #0
 8008640:	6078      	str	r0, [r7, #4]
	return 1;
 8008642:	2301      	movs	r3, #1
}
 8008644:	4618      	mov	r0, r3
 8008646:	370c      	adds	r7, #12
 8008648:	46bd      	mov	sp, r7
 800864a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864e:	4770      	bx	lr

08008650 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008650:	b480      	push	{r7}
 8008652:	b085      	sub	sp, #20
 8008654:	af00      	add	r7, sp, #0
 8008656:	60f8      	str	r0, [r7, #12]
 8008658:	60b9      	str	r1, [r7, #8]
 800865a:	607a      	str	r2, [r7, #4]
	return 0;
 800865c:	2300      	movs	r3, #0
}
 800865e:	4618      	mov	r0, r3
 8008660:	3714      	adds	r7, #20
 8008662:	46bd      	mov	sp, r7
 8008664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008668:	4770      	bx	lr
	...

0800866c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b084      	sub	sp, #16
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8008674:	4b11      	ldr	r3, [pc, #68]	; (80086bc <_sbrk+0x50>)
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d102      	bne.n	8008682 <_sbrk+0x16>
		heap_end = &end;
 800867c:	4b0f      	ldr	r3, [pc, #60]	; (80086bc <_sbrk+0x50>)
 800867e:	4a10      	ldr	r2, [pc, #64]	; (80086c0 <_sbrk+0x54>)
 8008680:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8008682:	4b0e      	ldr	r3, [pc, #56]	; (80086bc <_sbrk+0x50>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8008688:	4b0c      	ldr	r3, [pc, #48]	; (80086bc <_sbrk+0x50>)
 800868a:	681a      	ldr	r2, [r3, #0]
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	4413      	add	r3, r2
 8008690:	466a      	mov	r2, sp
 8008692:	4293      	cmp	r3, r2
 8008694:	d907      	bls.n	80086a6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8008696:	f009 f80d 	bl	80116b4 <__errno>
 800869a:	4602      	mov	r2, r0
 800869c:	230c      	movs	r3, #12
 800869e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80086a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80086a4:	e006      	b.n	80086b4 <_sbrk+0x48>
	}

	heap_end += incr;
 80086a6:	4b05      	ldr	r3, [pc, #20]	; (80086bc <_sbrk+0x50>)
 80086a8:	681a      	ldr	r2, [r3, #0]
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	4413      	add	r3, r2
 80086ae:	4a03      	ldr	r2, [pc, #12]	; (80086bc <_sbrk+0x50>)
 80086b0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80086b2:	68fb      	ldr	r3, [r7, #12]
}
 80086b4:	4618      	mov	r0, r3
 80086b6:	3710      	adds	r7, #16
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}
 80086bc:	20002158 	.word	0x20002158
 80086c0:	20002c80 	.word	0x20002c80

080086c4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80086c4:	b480      	push	{r7}
 80086c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80086c8:	4b08      	ldr	r3, [pc, #32]	; (80086ec <SystemInit+0x28>)
 80086ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086ce:	4a07      	ldr	r2, [pc, #28]	; (80086ec <SystemInit+0x28>)
 80086d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80086d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80086d8:	4b04      	ldr	r3, [pc, #16]	; (80086ec <SystemInit+0x28>)
 80086da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80086de:	609a      	str	r2, [r3, #8]
#endif
}
 80086e0:	bf00      	nop
 80086e2:	46bd      	mov	sp, r7
 80086e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e8:	4770      	bx	lr
 80086ea:	bf00      	nop
 80086ec:	e000ed00 	.word	0xe000ed00

080086f0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim17;
DMA_HandleTypeDef hdma_tim2_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b09a      	sub	sp, #104	; 0x68
 80086f4:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 80086f6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80086fa:	2224      	movs	r2, #36	; 0x24
 80086fc:	2100      	movs	r1, #0
 80086fe:	4618      	mov	r0, r3
 8008700:	f009 f802 	bl	8011708 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008704:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008708:	2200      	movs	r2, #0
 800870a:	601a      	str	r2, [r3, #0]
 800870c:	605a      	str	r2, [r3, #4]
 800870e:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8008710:	1d3b      	adds	r3, r7, #4
 8008712:	2234      	movs	r2, #52	; 0x34
 8008714:	2100      	movs	r1, #0
 8008716:	4618      	mov	r0, r3
 8008718:	f008 fff6 	bl	8011708 <memset>

  htim1.Instance = TIM1;
 800871c:	4b2a      	ldr	r3, [pc, #168]	; (80087c8 <MX_TIM1_Init+0xd8>)
 800871e:	4a2b      	ldr	r2, [pc, #172]	; (80087cc <MX_TIM1_Init+0xdc>)
 8008720:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8008722:	4b29      	ldr	r3, [pc, #164]	; (80087c8 <MX_TIM1_Init+0xd8>)
 8008724:	2200      	movs	r2, #0
 8008726:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 8008728:	4b27      	ldr	r3, [pc, #156]	; (80087c8 <MX_TIM1_Init+0xd8>)
 800872a:	2260      	movs	r2, #96	; 0x60
 800872c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024;
 800872e:	4b26      	ldr	r3, [pc, #152]	; (80087c8 <MX_TIM1_Init+0xd8>)
 8008730:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008734:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008736:	4b24      	ldr	r3, [pc, #144]	; (80087c8 <MX_TIM1_Init+0xd8>)
 8008738:	2200      	movs	r2, #0
 800873a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800873c:	4b22      	ldr	r3, [pc, #136]	; (80087c8 <MX_TIM1_Init+0xd8>)
 800873e:	2200      	movs	r2, #0
 8008740:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8008742:	4b21      	ldr	r3, [pc, #132]	; (80087c8 <MX_TIM1_Init+0xd8>)
 8008744:	2280      	movs	r2, #128	; 0x80
 8008746:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI2;
 8008748:	2302      	movs	r3, #2
 800874a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800874c:	2300      	movs	r3, #0
 800874e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8008750:	2301      	movs	r3, #1
 8008752:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8008754:	2300      	movs	r3, #0
 8008756:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8008758:	2300      	movs	r3, #0
 800875a:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800875c:	2300      	movs	r3, #0
 800875e:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8008760:	2301      	movs	r3, #1
 8008762:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8008764:	2300      	movs	r3, #0
 8008766:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8008768:	2300      	movs	r3, #0
 800876a:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800876c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008770:	4619      	mov	r1, r3
 8008772:	4815      	ldr	r0, [pc, #84]	; (80087c8 <MX_TIM1_Init+0xd8>)
 8008774:	f005 fd94 	bl	800e2a0 <HAL_TIM_Encoder_Init>
 8008778:	4603      	mov	r3, r0
 800877a:	2b00      	cmp	r3, #0
 800877c:	d001      	beq.n	8008782 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800877e:	f7ff fd11 	bl	80081a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8008782:	2320      	movs	r3, #32
 8008784:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8008786:	2300      	movs	r3, #0
 8008788:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800878a:	2300      	movs	r3, #0
 800878c:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800878e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008792:	4619      	mov	r1, r3
 8008794:	480c      	ldr	r0, [pc, #48]	; (80087c8 <MX_TIM1_Init+0xd8>)
 8008796:	f007 fa17 	bl	800fbc8 <HAL_TIMEx_MasterConfigSynchronization>
 800879a:	4603      	mov	r3, r0
 800879c:	2b00      	cmp	r3, #0
 800879e:	d001      	beq.n	80087a4 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 80087a0:	f7ff fd00 	bl	80081a4 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80087a4:	2300      	movs	r3, #0
 80087a6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80087a8:	2300      	movs	r3, #0
 80087aa:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80087ac:	1d3b      	adds	r3, r7, #4
 80087ae:	4619      	mov	r1, r3
 80087b0:	4805      	ldr	r0, [pc, #20]	; (80087c8 <MX_TIM1_Init+0xd8>)
 80087b2:	f007 fa9f 	bl	800fcf4 <HAL_TIMEx_ConfigBreakDeadTime>
 80087b6:	4603      	mov	r3, r0
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d001      	beq.n	80087c0 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 80087bc:	f7ff fcf2 	bl	80081a4 <Error_Handler>
  }

}
 80087c0:	bf00      	nop
 80087c2:	3768      	adds	r7, #104	; 0x68
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}
 80087c8:	20002b94 	.word	0x20002b94
 80087cc:	40012c00 	.word	0x40012c00

080087d0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b08c      	sub	sp, #48	; 0x30
 80087d4:	af00      	add	r7, sp, #0
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80087d6:	f107 031c 	add.w	r3, r7, #28
 80087da:	2200      	movs	r2, #0
 80087dc:	601a      	str	r2, [r3, #0]
 80087de:	605a      	str	r2, [r3, #4]
 80087e0:	609a      	str	r2, [r3, #8]
 80087e2:	60da      	str	r2, [r3, #12]
 80087e4:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80087e6:	f107 0310 	add.w	r3, r7, #16
 80087ea:	2200      	movs	r2, #0
 80087ec:	601a      	str	r2, [r3, #0]
 80087ee:	605a      	str	r2, [r3, #4]
 80087f0:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80087f2:	463b      	mov	r3, r7
 80087f4:	2200      	movs	r2, #0
 80087f6:	601a      	str	r2, [r3, #0]
 80087f8:	605a      	str	r2, [r3, #4]
 80087fa:	609a      	str	r2, [r3, #8]
 80087fc:	60da      	str	r2, [r3, #12]

  htim2.Instance = TIM2;
 80087fe:	4b2e      	ldr	r3, [pc, #184]	; (80088b8 <MX_TIM2_Init+0xe8>)
 8008800:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8008804:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 128;
 8008806:	4b2c      	ldr	r3, [pc, #176]	; (80088b8 <MX_TIM2_Init+0xe8>)
 8008808:	2280      	movs	r2, #128	; 0x80
 800880a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800880c:	4b2a      	ldr	r3, [pc, #168]	; (80088b8 <MX_TIM2_Init+0xe8>)
 800880e:	2200      	movs	r2, #0
 8008810:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8008812:	4b29      	ldr	r3, [pc, #164]	; (80088b8 <MX_TIM2_Init+0xe8>)
 8008814:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008818:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800881a:	4b27      	ldr	r3, [pc, #156]	; (80088b8 <MX_TIM2_Init+0xe8>)
 800881c:	2200      	movs	r2, #0
 800881e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8008820:	4b25      	ldr	r3, [pc, #148]	; (80088b8 <MX_TIM2_Init+0xe8>)
 8008822:	2280      	movs	r2, #128	; 0x80
 8008824:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8008826:	4824      	ldr	r0, [pc, #144]	; (80088b8 <MX_TIM2_Init+0xe8>)
 8008828:	f004 ff94 	bl	800d754 <HAL_TIM_Base_Init>
 800882c:	4603      	mov	r3, r0
 800882e:	2b00      	cmp	r3, #0
 8008830:	d001      	beq.n	8008836 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8008832:	f7ff fcb7 	bl	80081a4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8008836:	4820      	ldr	r0, [pc, #128]	; (80088b8 <MX_TIM2_Init+0xe8>)
 8008838:	f005 fa76 	bl	800dd28 <HAL_TIM_IC_Init>
 800883c:	4603      	mov	r3, r0
 800883e:	2b00      	cmp	r3, #0
 8008840:	d001      	beq.n	8008846 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8008842:	f7ff fcaf 	bl	80081a4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8008846:	2304      	movs	r3, #4
 8008848:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 800884a:	2350      	movs	r3, #80	; 0x50
 800884c:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800884e:	2300      	movs	r3, #0
 8008850:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 8008852:	2300      	movs	r3, #0
 8008854:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8008856:	f107 031c 	add.w	r3, r7, #28
 800885a:	4619      	mov	r1, r3
 800885c:	4816      	ldr	r0, [pc, #88]	; (80088b8 <MX_TIM2_Init+0xe8>)
 800885e:	f006 f9d9 	bl	800ec14 <HAL_TIM_SlaveConfigSynchro>
 8008862:	4603      	mov	r3, r0
 8008864:	2b00      	cmp	r3, #0
 8008866:	d001      	beq.n	800886c <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8008868:	f7ff fc9c 	bl	80081a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800886c:	2320      	movs	r3, #32
 800886e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008870:	2300      	movs	r3, #0
 8008872:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8008874:	f107 0310 	add.w	r3, r7, #16
 8008878:	4619      	mov	r1, r3
 800887a:	480f      	ldr	r0, [pc, #60]	; (80088b8 <MX_TIM2_Init+0xe8>)
 800887c:	f007 f9a4 	bl	800fbc8 <HAL_TIMEx_MasterConfigSynchronization>
 8008880:	4603      	mov	r3, r0
 8008882:	2b00      	cmp	r3, #0
 8008884:	d001      	beq.n	800888a <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8008886:	f7ff fc8d 	bl	80081a4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800888a:	2300      	movs	r3, #0
 800888c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800888e:	2301      	movs	r3, #1
 8008890:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8008892:	2300      	movs	r3, #0
 8008894:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8008896:	2300      	movs	r3, #0
 8008898:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800889a:	463b      	mov	r3, r7
 800889c:	2200      	movs	r2, #0
 800889e:	4619      	mov	r1, r3
 80088a0:	4805      	ldr	r0, [pc, #20]	; (80088b8 <MX_TIM2_Init+0xe8>)
 80088a2:	f005 ff22 	bl	800e6ea <HAL_TIM_IC_ConfigChannel>
 80088a6:	4603      	mov	r3, r0
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d001      	beq.n	80088b0 <MX_TIM2_Init+0xe0>
  {
    Error_Handler();
 80088ac:	f7ff fc7a 	bl	80081a4 <Error_Handler>
  }

}
 80088b0:	bf00      	nop
 80088b2:	3730      	adds	r7, #48	; 0x30
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}
 80088b8:	20002be0 	.word	0x20002be0

080088bc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b088      	sub	sp, #32
 80088c0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80088c2:	f107 0310 	add.w	r3, r7, #16
 80088c6:	2200      	movs	r2, #0
 80088c8:	601a      	str	r2, [r3, #0]
 80088ca:	605a      	str	r2, [r3, #4]
 80088cc:	609a      	str	r2, [r3, #8]
 80088ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80088d0:	1d3b      	adds	r3, r7, #4
 80088d2:	2200      	movs	r2, #0
 80088d4:	601a      	str	r2, [r3, #0]
 80088d6:	605a      	str	r2, [r3, #4]
 80088d8:	609a      	str	r2, [r3, #8]

  htim3.Instance = TIM3;
 80088da:	4b1d      	ldr	r3, [pc, #116]	; (8008950 <MX_TIM3_Init+0x94>)
 80088dc:	4a1d      	ldr	r2, [pc, #116]	; (8008954 <MX_TIM3_Init+0x98>)
 80088de:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80088e0:	4b1b      	ldr	r3, [pc, #108]	; (8008950 <MX_TIM3_Init+0x94>)
 80088e2:	2200      	movs	r2, #0
 80088e4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80088e6:	4b1a      	ldr	r3, [pc, #104]	; (8008950 <MX_TIM3_Init+0x94>)
 80088e8:	2210      	movs	r2, #16
 80088ea:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1;
 80088ec:	4b18      	ldr	r3, [pc, #96]	; (8008950 <MX_TIM3_Init+0x94>)
 80088ee:	2201      	movs	r2, #1
 80088f0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80088f2:	4b17      	ldr	r3, [pc, #92]	; (8008950 <MX_TIM3_Init+0x94>)
 80088f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80088f8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80088fa:	4b15      	ldr	r3, [pc, #84]	; (8008950 <MX_TIM3_Init+0x94>)
 80088fc:	2280      	movs	r2, #128	; 0x80
 80088fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8008900:	4813      	ldr	r0, [pc, #76]	; (8008950 <MX_TIM3_Init+0x94>)
 8008902:	f004 ff27 	bl	800d754 <HAL_TIM_Base_Init>
 8008906:	4603      	mov	r3, r0
 8008908:	2b00      	cmp	r3, #0
 800890a:	d001      	beq.n	8008910 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800890c:	f7ff fc4a 	bl	80081a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008910:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008914:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8008916:	f107 0310 	add.w	r3, r7, #16
 800891a:	4619      	mov	r1, r3
 800891c:	480c      	ldr	r0, [pc, #48]	; (8008950 <MX_TIM3_Init+0x94>)
 800891e:	f006 f889 	bl	800ea34 <HAL_TIM_ConfigClockSource>
 8008922:	4603      	mov	r3, r0
 8008924:	2b00      	cmp	r3, #0
 8008926:	d001      	beq.n	800892c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8008928:	f7ff fc3c 	bl	80081a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800892c:	2320      	movs	r3, #32
 800892e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008930:	2300      	movs	r3, #0
 8008932:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8008934:	1d3b      	adds	r3, r7, #4
 8008936:	4619      	mov	r1, r3
 8008938:	4805      	ldr	r0, [pc, #20]	; (8008950 <MX_TIM3_Init+0x94>)
 800893a:	f007 f945 	bl	800fbc8 <HAL_TIMEx_MasterConfigSynchronization>
 800893e:	4603      	mov	r3, r0
 8008940:	2b00      	cmp	r3, #0
 8008942:	d001      	beq.n	8008948 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8008944:	f7ff fc2e 	bl	80081a4 <Error_Handler>
  }

}
 8008948:	bf00      	nop
 800894a:	3720      	adds	r7, #32
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}
 8008950:	200021d8 	.word	0x200021d8
 8008954:	40000400 	.word	0x40000400

08008958 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b088      	sub	sp, #32
 800895c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800895e:	f107 0310 	add.w	r3, r7, #16
 8008962:	2200      	movs	r2, #0
 8008964:	601a      	str	r2, [r3, #0]
 8008966:	605a      	str	r2, [r3, #4]
 8008968:	609a      	str	r2, [r3, #8]
 800896a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800896c:	1d3b      	adds	r3, r7, #4
 800896e:	2200      	movs	r2, #0
 8008970:	601a      	str	r2, [r3, #0]
 8008972:	605a      	str	r2, [r3, #4]
 8008974:	609a      	str	r2, [r3, #8]

  htim5.Instance = TIM5;
 8008976:	4b1d      	ldr	r3, [pc, #116]	; (80089ec <MX_TIM5_Init+0x94>)
 8008978:	4a1d      	ldr	r2, [pc, #116]	; (80089f0 <MX_TIM5_Init+0x98>)
 800897a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800897c:	4b1b      	ldr	r3, [pc, #108]	; (80089ec <MX_TIM5_Init+0x94>)
 800897e:	2200      	movs	r2, #0
 8008980:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008982:	4b1a      	ldr	r3, [pc, #104]	; (80089ec <MX_TIM5_Init+0x94>)
 8008984:	2200      	movs	r2, #0
 8008986:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1024;
 8008988:	4b18      	ldr	r3, [pc, #96]	; (80089ec <MX_TIM5_Init+0x94>)
 800898a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800898e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008990:	4b16      	ldr	r3, [pc, #88]	; (80089ec <MX_TIM5_Init+0x94>)
 8008992:	2200      	movs	r2, #0
 8008994:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008996:	4b15      	ldr	r3, [pc, #84]	; (80089ec <MX_TIM5_Init+0x94>)
 8008998:	2200      	movs	r2, #0
 800899a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800899c:	4813      	ldr	r0, [pc, #76]	; (80089ec <MX_TIM5_Init+0x94>)
 800899e:	f004 fed9 	bl	800d754 <HAL_TIM_Base_Init>
 80089a2:	4603      	mov	r3, r0
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d001      	beq.n	80089ac <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80089a8:	f7ff fbfc 	bl	80081a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80089ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80089b0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80089b2:	f107 0310 	add.w	r3, r7, #16
 80089b6:	4619      	mov	r1, r3
 80089b8:	480c      	ldr	r0, [pc, #48]	; (80089ec <MX_TIM5_Init+0x94>)
 80089ba:	f006 f83b 	bl	800ea34 <HAL_TIM_ConfigClockSource>
 80089be:	4603      	mov	r3, r0
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d001      	beq.n	80089c8 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80089c4:	f7ff fbee 	bl	80081a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80089c8:	2300      	movs	r3, #0
 80089ca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80089cc:	2300      	movs	r3, #0
 80089ce:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80089d0:	1d3b      	adds	r3, r7, #4
 80089d2:	4619      	mov	r1, r3
 80089d4:	4805      	ldr	r0, [pc, #20]	; (80089ec <MX_TIM5_Init+0x94>)
 80089d6:	f007 f8f7 	bl	800fbc8 <HAL_TIMEx_MasterConfigSynchronization>
 80089da:	4603      	mov	r3, r0
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d001      	beq.n	80089e4 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80089e0:	f7ff fbe0 	bl	80081a4 <Error_Handler>
  }

}
 80089e4:	bf00      	nop
 80089e6:	3720      	adds	r7, #32
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}
 80089ec:	20002b48 	.word	0x20002b48
 80089f0:	40000c00 	.word	0x40000c00

080089f4 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b094      	sub	sp, #80	; 0x50
 80089f8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80089fa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80089fe:	2200      	movs	r2, #0
 8008a00:	601a      	str	r2, [r3, #0]
 8008a02:	605a      	str	r2, [r3, #4]
 8008a04:	609a      	str	r2, [r3, #8]
 8008a06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008a08:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	601a      	str	r2, [r3, #0]
 8008a10:	605a      	str	r2, [r3, #4]
 8008a12:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8008a14:	463b      	mov	r3, r7
 8008a16:	2234      	movs	r2, #52	; 0x34
 8008a18:	2100      	movs	r1, #0
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	f008 fe74 	bl	8011708 <memset>

  htim8.Instance = TIM8;
 8008a20:	4b26      	ldr	r3, [pc, #152]	; (8008abc <MX_TIM8_Init+0xc8>)
 8008a22:	4a27      	ldr	r2, [pc, #156]	; (8008ac0 <MX_TIM8_Init+0xcc>)
 8008a24:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8008a26:	4b25      	ldr	r3, [pc, #148]	; (8008abc <MX_TIM8_Init+0xc8>)
 8008a28:	2200      	movs	r2, #0
 8008a2a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008a2c:	4b23      	ldr	r3, [pc, #140]	; (8008abc <MX_TIM8_Init+0xc8>)
 8008a2e:	2200      	movs	r2, #0
 8008a30:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1;
 8008a32:	4b22      	ldr	r3, [pc, #136]	; (8008abc <MX_TIM8_Init+0xc8>)
 8008a34:	2201      	movs	r2, #1
 8008a36:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008a38:	4b20      	ldr	r3, [pc, #128]	; (8008abc <MX_TIM8_Init+0xc8>)
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8008a3e:	4b1f      	ldr	r3, [pc, #124]	; (8008abc <MX_TIM8_Init+0xc8>)
 8008a40:	2200      	movs	r2, #0
 8008a42:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8008a44:	4b1d      	ldr	r3, [pc, #116]	; (8008abc <MX_TIM8_Init+0xc8>)
 8008a46:	2280      	movs	r2, #128	; 0x80
 8008a48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8008a4a:	481c      	ldr	r0, [pc, #112]	; (8008abc <MX_TIM8_Init+0xc8>)
 8008a4c:	f004 fe82 	bl	800d754 <HAL_TIM_Base_Init>
 8008a50:	4603      	mov	r3, r0
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d001      	beq.n	8008a5a <MX_TIM8_Init+0x66>
  {
    Error_Handler();
 8008a56:	f7ff fba5 	bl	80081a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008a5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008a5e:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8008a60:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008a64:	4619      	mov	r1, r3
 8008a66:	4815      	ldr	r0, [pc, #84]	; (8008abc <MX_TIM8_Init+0xc8>)
 8008a68:	f005 ffe4 	bl	800ea34 <HAL_TIM_ConfigClockSource>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d001      	beq.n	8008a76 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8008a72:	f7ff fb97 	bl	80081a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8008a76:	2320      	movs	r3, #32
 8008a78:	637b      	str	r3, [r7, #52]	; 0x34
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008a7e:	2300      	movs	r3, #0
 8008a80:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8008a82:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008a86:	4619      	mov	r1, r3
 8008a88:	480c      	ldr	r0, [pc, #48]	; (8008abc <MX_TIM8_Init+0xc8>)
 8008a8a:	f007 f89d 	bl	800fbc8 <HAL_TIMEx_MasterConfigSynchronization>
 8008a8e:	4603      	mov	r3, r0
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d001      	beq.n	8008a98 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8008a94:	f7ff fb86 	bl	80081a4 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8008a98:	2300      	movs	r3, #0
 8008a9a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8008aa0:	463b      	mov	r3, r7
 8008aa2:	4619      	mov	r1, r3
 8008aa4:	4805      	ldr	r0, [pc, #20]	; (8008abc <MX_TIM8_Init+0xc8>)
 8008aa6:	f007 f925 	bl	800fcf4 <HAL_TIMEx_ConfigBreakDeadTime>
 8008aaa:	4603      	mov	r3, r0
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d001      	beq.n	8008ab4 <MX_TIM8_Init+0xc0>
  {
    Error_Handler();
 8008ab0:	f7ff fb78 	bl	80081a4 <Error_Handler>
  }

}
 8008ab4:	bf00      	nop
 8008ab6:	3750      	adds	r7, #80	; 0x50
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}
 8008abc:	20002a64 	.word	0x20002a64
 8008ac0:	40013400 	.word	0x40013400

08008ac4 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b088      	sub	sp, #32
 8008ac8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008aca:	f107 0310 	add.w	r3, r7, #16
 8008ace:	2200      	movs	r2, #0
 8008ad0:	601a      	str	r2, [r3, #0]
 8008ad2:	605a      	str	r2, [r3, #4]
 8008ad4:	609a      	str	r2, [r3, #8]
 8008ad6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008ad8:	1d3b      	adds	r3, r7, #4
 8008ada:	2200      	movs	r2, #0
 8008adc:	601a      	str	r2, [r3, #0]
 8008ade:	605a      	str	r2, [r3, #4]
 8008ae0:	609a      	str	r2, [r3, #8]

  htim15.Instance = TIM15;
 8008ae2:	4b1f      	ldr	r3, [pc, #124]	; (8008b60 <MX_TIM15_Init+0x9c>)
 8008ae4:	4a1f      	ldr	r2, [pc, #124]	; (8008b64 <MX_TIM15_Init+0xa0>)
 8008ae6:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 1024;
 8008ae8:	4b1d      	ldr	r3, [pc, #116]	; (8008b60 <MX_TIM15_Init+0x9c>)
 8008aea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008aee:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008af0:	4b1b      	ldr	r3, [pc, #108]	; (8008b60 <MX_TIM15_Init+0x9c>)
 8008af2:	2200      	movs	r2, #0
 8008af4:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1024;
 8008af6:	4b1a      	ldr	r3, [pc, #104]	; (8008b60 <MX_TIM15_Init+0x9c>)
 8008af8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008afc:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008afe:	4b18      	ldr	r3, [pc, #96]	; (8008b60 <MX_TIM15_Init+0x9c>)
 8008b00:	2200      	movs	r2, #0
 8008b02:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8008b04:	4b16      	ldr	r3, [pc, #88]	; (8008b60 <MX_TIM15_Init+0x9c>)
 8008b06:	2200      	movs	r2, #0
 8008b08:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008b0a:	4b15      	ldr	r3, [pc, #84]	; (8008b60 <MX_TIM15_Init+0x9c>)
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8008b10:	4813      	ldr	r0, [pc, #76]	; (8008b60 <MX_TIM15_Init+0x9c>)
 8008b12:	f004 fe1f 	bl	800d754 <HAL_TIM_Base_Init>
 8008b16:	4603      	mov	r3, r0
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d001      	beq.n	8008b20 <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 8008b1c:	f7ff fb42 	bl	80081a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008b20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008b24:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8008b26:	f107 0310 	add.w	r3, r7, #16
 8008b2a:	4619      	mov	r1, r3
 8008b2c:	480c      	ldr	r0, [pc, #48]	; (8008b60 <MX_TIM15_Init+0x9c>)
 8008b2e:	f005 ff81 	bl	800ea34 <HAL_TIM_ConfigClockSource>
 8008b32:	4603      	mov	r3, r0
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d001      	beq.n	8008b3c <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8008b38:	f7ff fb34 	bl	80081a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008b40:	2300      	movs	r3, #0
 8008b42:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8008b44:	1d3b      	adds	r3, r7, #4
 8008b46:	4619      	mov	r1, r3
 8008b48:	4805      	ldr	r0, [pc, #20]	; (8008b60 <MX_TIM15_Init+0x9c>)
 8008b4a:	f007 f83d 	bl	800fbc8 <HAL_TIMEx_MasterConfigSynchronization>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d001      	beq.n	8008b58 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8008b54:	f7ff fb26 	bl	80081a4 <Error_Handler>
  }

}
 8008b58:	bf00      	nop
 8008b5a:	3720      	adds	r7, #32
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bd80      	pop	{r7, pc}
 8008b60:	20002ab0 	.word	0x20002ab0
 8008b64:	40014000 	.word	0x40014000

08008b68 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 8008b6c:	4b10      	ldr	r3, [pc, #64]	; (8008bb0 <MX_TIM16_Init+0x48>)
 8008b6e:	4a11      	ldr	r2, [pc, #68]	; (8008bb4 <MX_TIM16_Init+0x4c>)
 8008b70:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 65535;
 8008b72:	4b0f      	ldr	r3, [pc, #60]	; (8008bb0 <MX_TIM16_Init+0x48>)
 8008b74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008b78:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008b7a:	4b0d      	ldr	r3, [pc, #52]	; (8008bb0 <MX_TIM16_Init+0x48>)
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8008b80:	4b0b      	ldr	r3, [pc, #44]	; (8008bb0 <MX_TIM16_Init+0x48>)
 8008b82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008b86:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008b88:	4b09      	ldr	r3, [pc, #36]	; (8008bb0 <MX_TIM16_Init+0x48>)
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8008b8e:	4b08      	ldr	r3, [pc, #32]	; (8008bb0 <MX_TIM16_Init+0x48>)
 8008b90:	2200      	movs	r2, #0
 8008b92:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008b94:	4b06      	ldr	r3, [pc, #24]	; (8008bb0 <MX_TIM16_Init+0x48>)
 8008b96:	2200      	movs	r2, #0
 8008b98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8008b9a:	4805      	ldr	r0, [pc, #20]	; (8008bb0 <MX_TIM16_Init+0x48>)
 8008b9c:	f004 fdda 	bl	800d754 <HAL_TIM_Base_Init>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d001      	beq.n	8008baa <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8008ba6:	f7ff fafd 	bl	80081a4 <Error_Handler>
  }

}
 8008baa:	bf00      	nop
 8008bac:	bd80      	pop	{r7, pc}
 8008bae:	bf00      	nop
 8008bb0:	20002c2c 	.word	0x20002c2c
 8008bb4:	40014400 	.word	0x40014400

08008bb8 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	af00      	add	r7, sp, #0

  htim17.Instance = TIM17;
 8008bbc:	4b10      	ldr	r3, [pc, #64]	; (8008c00 <MX_TIM17_Init+0x48>)
 8008bbe:	4a11      	ldr	r2, [pc, #68]	; (8008c04 <MX_TIM17_Init+0x4c>)
 8008bc0:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 1024;
 8008bc2:	4b0f      	ldr	r3, [pc, #60]	; (8008c00 <MX_TIM17_Init+0x48>)
 8008bc4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008bc8:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008bca:	4b0d      	ldr	r3, [pc, #52]	; (8008c00 <MX_TIM17_Init+0x48>)
 8008bcc:	2200      	movs	r2, #0
 8008bce:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1024;
 8008bd0:	4b0b      	ldr	r3, [pc, #44]	; (8008c00 <MX_TIM17_Init+0x48>)
 8008bd2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008bd6:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008bd8:	4b09      	ldr	r3, [pc, #36]	; (8008c00 <MX_TIM17_Init+0x48>)
 8008bda:	2200      	movs	r2, #0
 8008bdc:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8008bde:	4b08      	ldr	r3, [pc, #32]	; (8008c00 <MX_TIM17_Init+0x48>)
 8008be0:	2200      	movs	r2, #0
 8008be2:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008be4:	4b06      	ldr	r3, [pc, #24]	; (8008c00 <MX_TIM17_Init+0x48>)
 8008be6:	2200      	movs	r2, #0
 8008be8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8008bea:	4805      	ldr	r0, [pc, #20]	; (8008c00 <MX_TIM17_Init+0x48>)
 8008bec:	f004 fdb2 	bl	800d754 <HAL_TIM_Base_Init>
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d001      	beq.n	8008bfa <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 8008bf6:	f7ff fad5 	bl	80081a4 <Error_Handler>
  }

}
 8008bfa:	bf00      	nop
 8008bfc:	bd80      	pop	{r7, pc}
 8008bfe:	bf00      	nop
 8008c00:	20002afc 	.word	0x20002afc
 8008c04:	40014800 	.word	0x40014800

08008c08 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b08a      	sub	sp, #40	; 0x28
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008c10:	f107 0314 	add.w	r3, r7, #20
 8008c14:	2200      	movs	r2, #0
 8008c16:	601a      	str	r2, [r3, #0]
 8008c18:	605a      	str	r2, [r3, #4]
 8008c1a:	609a      	str	r2, [r3, #8]
 8008c1c:	60da      	str	r2, [r3, #12]
 8008c1e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	4a1f      	ldr	r2, [pc, #124]	; (8008ca4 <HAL_TIM_Encoder_MspInit+0x9c>)
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d137      	bne.n	8008c9a <HAL_TIM_Encoder_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8008c2a:	4b1f      	ldr	r3, [pc, #124]	; (8008ca8 <HAL_TIM_Encoder_MspInit+0xa0>)
 8008c2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c2e:	4a1e      	ldr	r2, [pc, #120]	; (8008ca8 <HAL_TIM_Encoder_MspInit+0xa0>)
 8008c30:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008c34:	6613      	str	r3, [r2, #96]	; 0x60
 8008c36:	4b1c      	ldr	r3, [pc, #112]	; (8008ca8 <HAL_TIM_Encoder_MspInit+0xa0>)
 8008c38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008c3e:	613b      	str	r3, [r7, #16]
 8008c40:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008c42:	4b19      	ldr	r3, [pc, #100]	; (8008ca8 <HAL_TIM_Encoder_MspInit+0xa0>)
 8008c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c46:	4a18      	ldr	r2, [pc, #96]	; (8008ca8 <HAL_TIM_Encoder_MspInit+0xa0>)
 8008c48:	f043 0304 	orr.w	r3, r3, #4
 8008c4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008c4e:	4b16      	ldr	r3, [pc, #88]	; (8008ca8 <HAL_TIM_Encoder_MspInit+0xa0>)
 8008c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c52:	f003 0304 	and.w	r3, r3, #4
 8008c56:	60fb      	str	r3, [r7, #12]
 8008c58:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8008c5a:	2303      	movs	r3, #3
 8008c5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c5e:	2302      	movs	r3, #2
 8008c60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c62:	2300      	movs	r3, #0
 8008c64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008c66:	2300      	movs	r3, #0
 8008c68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8008c6a:	2302      	movs	r3, #2
 8008c6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008c6e:	f107 0314 	add.w	r3, r7, #20
 8008c72:	4619      	mov	r1, r3
 8008c74:	480d      	ldr	r0, [pc, #52]	; (8008cac <HAL_TIM_Encoder_MspInit+0xa4>)
 8008c76:	f003 fa67 	bl	800c148 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	2100      	movs	r1, #0
 8008c7e:	2018      	movs	r0, #24
 8008c80:	f002 facf 	bl	800b222 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8008c84:	2018      	movs	r0, #24
 8008c86:	f002 fae6 	bl	800b256 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	2100      	movs	r1, #0
 8008c8e:	201a      	movs	r0, #26
 8008c90:	f002 fac7 	bl	800b222 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8008c94:	201a      	movs	r0, #26
 8008c96:	f002 fade 	bl	800b256 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8008c9a:	bf00      	nop
 8008c9c:	3728      	adds	r7, #40	; 0x28
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}
 8008ca2:	bf00      	nop
 8008ca4:	40012c00 	.word	0x40012c00
 8008ca8:	40021000 	.word	0x40021000
 8008cac:	48000800 	.word	0x48000800

08008cb0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b090      	sub	sp, #64	; 0x40
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008cb8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	601a      	str	r2, [r3, #0]
 8008cc0:	605a      	str	r2, [r3, #4]
 8008cc2:	609a      	str	r2, [r3, #8]
 8008cc4:	60da      	str	r2, [r3, #12]
 8008cc6:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cd0:	d154      	bne.n	8008d7c <HAL_TIM_Base_MspInit+0xcc>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8008cd2:	4b72      	ldr	r3, [pc, #456]	; (8008e9c <HAL_TIM_Base_MspInit+0x1ec>)
 8008cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cd6:	4a71      	ldr	r2, [pc, #452]	; (8008e9c <HAL_TIM_Base_MspInit+0x1ec>)
 8008cd8:	f043 0301 	orr.w	r3, r3, #1
 8008cdc:	6593      	str	r3, [r2, #88]	; 0x58
 8008cde:	4b6f      	ldr	r3, [pc, #444]	; (8008e9c <HAL_TIM_Base_MspInit+0x1ec>)
 8008ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ce2:	f003 0301 	and.w	r3, r3, #1
 8008ce6:	62bb      	str	r3, [r7, #40]	; 0x28
 8008ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008cea:	4b6c      	ldr	r3, [pc, #432]	; (8008e9c <HAL_TIM_Base_MspInit+0x1ec>)
 8008cec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cee:	4a6b      	ldr	r2, [pc, #428]	; (8008e9c <HAL_TIM_Base_MspInit+0x1ec>)
 8008cf0:	f043 0301 	orr.w	r3, r3, #1
 8008cf4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008cf6:	4b69      	ldr	r3, [pc, #420]	; (8008e9c <HAL_TIM_Base_MspInit+0x1ec>)
 8008cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cfa:	f003 0301 	and.w	r3, r3, #1
 8008cfe:	627b      	str	r3, [r7, #36]	; 0x24
 8008d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8008d02:	2301      	movs	r3, #1
 8008d04:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d06:	2302      	movs	r3, #2
 8008d08:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008d0e:	2300      	movs	r3, #0
 8008d10:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8008d12:	2301      	movs	r3, #1
 8008d14:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008d16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008d1a:	4619      	mov	r1, r3
 8008d1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008d20:	f003 fa12 	bl	800c148 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel4;
 8008d24:	4b5e      	ldr	r3, [pc, #376]	; (8008ea0 <HAL_TIM_Base_MspInit+0x1f0>)
 8008d26:	4a5f      	ldr	r2, [pc, #380]	; (8008ea4 <HAL_TIM_Base_MspInit+0x1f4>)
 8008d28:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_TIM2_CH1;
 8008d2a:	4b5d      	ldr	r3, [pc, #372]	; (8008ea0 <HAL_TIM_Base_MspInit+0x1f0>)
 8008d2c:	2238      	movs	r2, #56	; 0x38
 8008d2e:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008d30:	4b5b      	ldr	r3, [pc, #364]	; (8008ea0 <HAL_TIM_Base_MspInit+0x1f0>)
 8008d32:	2200      	movs	r2, #0
 8008d34:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8008d36:	4b5a      	ldr	r3, [pc, #360]	; (8008ea0 <HAL_TIM_Base_MspInit+0x1f0>)
 8008d38:	2200      	movs	r2, #0
 8008d3a:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8008d3c:	4b58      	ldr	r3, [pc, #352]	; (8008ea0 <HAL_TIM_Base_MspInit+0x1f0>)
 8008d3e:	2280      	movs	r2, #128	; 0x80
 8008d40:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8008d42:	4b57      	ldr	r3, [pc, #348]	; (8008ea0 <HAL_TIM_Base_MspInit+0x1f0>)
 8008d44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008d48:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8008d4a:	4b55      	ldr	r3, [pc, #340]	; (8008ea0 <HAL_TIM_Base_MspInit+0x1f0>)
 8008d4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008d50:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8008d52:	4b53      	ldr	r3, [pc, #332]	; (8008ea0 <HAL_TIM_Base_MspInit+0x1f0>)
 8008d54:	2220      	movs	r2, #32
 8008d56:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8008d58:	4b51      	ldr	r3, [pc, #324]	; (8008ea0 <HAL_TIM_Base_MspInit+0x1f0>)
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8008d5e:	4850      	ldr	r0, [pc, #320]	; (8008ea0 <HAL_TIM_Base_MspInit+0x1f0>)
 8008d60:	f002 fec0 	bl	800bae4 <HAL_DMA_Init>
 8008d64:	4603      	mov	r3, r0
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d001      	beq.n	8008d6e <HAL_TIM_Base_MspInit+0xbe>
    {
      Error_Handler();
 8008d6a:	f7ff fa1b 	bl	80081a4 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	4a4b      	ldr	r2, [pc, #300]	; (8008ea0 <HAL_TIM_Base_MspInit+0x1f0>)
 8008d72:	625a      	str	r2, [r3, #36]	; 0x24
 8008d74:	4a4a      	ldr	r2, [pc, #296]	; (8008ea0 <HAL_TIM_Base_MspInit+0x1f0>)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8008d7a:	e08a      	b.n	8008e92 <HAL_TIM_Base_MspInit+0x1e2>
  else if(tim_baseHandle->Instance==TIM3)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	4a49      	ldr	r2, [pc, #292]	; (8008ea8 <HAL_TIM_Base_MspInit+0x1f8>)
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d114      	bne.n	8008db0 <HAL_TIM_Base_MspInit+0x100>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8008d86:	4b45      	ldr	r3, [pc, #276]	; (8008e9c <HAL_TIM_Base_MspInit+0x1ec>)
 8008d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d8a:	4a44      	ldr	r2, [pc, #272]	; (8008e9c <HAL_TIM_Base_MspInit+0x1ec>)
 8008d8c:	f043 0302 	orr.w	r3, r3, #2
 8008d90:	6593      	str	r3, [r2, #88]	; 0x58
 8008d92:	4b42      	ldr	r3, [pc, #264]	; (8008e9c <HAL_TIM_Base_MspInit+0x1ec>)
 8008d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d96:	f003 0302 	and.w	r3, r3, #2
 8008d9a:	623b      	str	r3, [r7, #32]
 8008d9c:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8008d9e:	2200      	movs	r2, #0
 8008da0:	2100      	movs	r1, #0
 8008da2:	201d      	movs	r0, #29
 8008da4:	f002 fa3d 	bl	800b222 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8008da8:	201d      	movs	r0, #29
 8008daa:	f002 fa54 	bl	800b256 <HAL_NVIC_EnableIRQ>
}
 8008dae:	e070      	b.n	8008e92 <HAL_TIM_Base_MspInit+0x1e2>
  else if(tim_baseHandle->Instance==TIM5)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	4a3d      	ldr	r2, [pc, #244]	; (8008eac <HAL_TIM_Base_MspInit+0x1fc>)
 8008db6:	4293      	cmp	r3, r2
 8008db8:	d114      	bne.n	8008de4 <HAL_TIM_Base_MspInit+0x134>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8008dba:	4b38      	ldr	r3, [pc, #224]	; (8008e9c <HAL_TIM_Base_MspInit+0x1ec>)
 8008dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dbe:	4a37      	ldr	r2, [pc, #220]	; (8008e9c <HAL_TIM_Base_MspInit+0x1ec>)
 8008dc0:	f043 0308 	orr.w	r3, r3, #8
 8008dc4:	6593      	str	r3, [r2, #88]	; 0x58
 8008dc6:	4b35      	ldr	r3, [pc, #212]	; (8008e9c <HAL_TIM_Base_MspInit+0x1ec>)
 8008dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dca:	f003 0308 	and.w	r3, r3, #8
 8008dce:	61fb      	str	r3, [r7, #28]
 8008dd0:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM5_IRQn, 2, 0);
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	2102      	movs	r1, #2
 8008dd6:	2032      	movs	r0, #50	; 0x32
 8008dd8:	f002 fa23 	bl	800b222 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8008ddc:	2032      	movs	r0, #50	; 0x32
 8008dde:	f002 fa3a 	bl	800b256 <HAL_NVIC_EnableIRQ>
}
 8008de2:	e056      	b.n	8008e92 <HAL_TIM_Base_MspInit+0x1e2>
  else if(tim_baseHandle->Instance==TIM8)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	4a31      	ldr	r2, [pc, #196]	; (8008eb0 <HAL_TIM_Base_MspInit+0x200>)
 8008dea:	4293      	cmp	r3, r2
 8008dec:	d10c      	bne.n	8008e08 <HAL_TIM_Base_MspInit+0x158>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8008dee:	4b2b      	ldr	r3, [pc, #172]	; (8008e9c <HAL_TIM_Base_MspInit+0x1ec>)
 8008df0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008df2:	4a2a      	ldr	r2, [pc, #168]	; (8008e9c <HAL_TIM_Base_MspInit+0x1ec>)
 8008df4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008df8:	6613      	str	r3, [r2, #96]	; 0x60
 8008dfa:	4b28      	ldr	r3, [pc, #160]	; (8008e9c <HAL_TIM_Base_MspInit+0x1ec>)
 8008dfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008dfe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008e02:	61bb      	str	r3, [r7, #24]
 8008e04:	69bb      	ldr	r3, [r7, #24]
}
 8008e06:	e044      	b.n	8008e92 <HAL_TIM_Base_MspInit+0x1e2>
  else if(tim_baseHandle->Instance==TIM15)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	4a29      	ldr	r2, [pc, #164]	; (8008eb4 <HAL_TIM_Base_MspInit+0x204>)
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	d114      	bne.n	8008e3c <HAL_TIM_Base_MspInit+0x18c>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8008e12:	4b22      	ldr	r3, [pc, #136]	; (8008e9c <HAL_TIM_Base_MspInit+0x1ec>)
 8008e14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e16:	4a21      	ldr	r2, [pc, #132]	; (8008e9c <HAL_TIM_Base_MspInit+0x1ec>)
 8008e18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e1c:	6613      	str	r3, [r2, #96]	; 0x60
 8008e1e:	4b1f      	ldr	r3, [pc, #124]	; (8008e9c <HAL_TIM_Base_MspInit+0x1ec>)
 8008e20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008e26:	617b      	str	r3, [r7, #20]
 8008e28:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	2100      	movs	r1, #0
 8008e2e:	2018      	movs	r0, #24
 8008e30:	f002 f9f7 	bl	800b222 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8008e34:	2018      	movs	r0, #24
 8008e36:	f002 fa0e 	bl	800b256 <HAL_NVIC_EnableIRQ>
}
 8008e3a:	e02a      	b.n	8008e92 <HAL_TIM_Base_MspInit+0x1e2>
  else if(tim_baseHandle->Instance==TIM16)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	4a1d      	ldr	r2, [pc, #116]	; (8008eb8 <HAL_TIM_Base_MspInit+0x208>)
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d10c      	bne.n	8008e60 <HAL_TIM_Base_MspInit+0x1b0>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8008e46:	4b15      	ldr	r3, [pc, #84]	; (8008e9c <HAL_TIM_Base_MspInit+0x1ec>)
 8008e48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e4a:	4a14      	ldr	r2, [pc, #80]	; (8008e9c <HAL_TIM_Base_MspInit+0x1ec>)
 8008e4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e50:	6613      	str	r3, [r2, #96]	; 0x60
 8008e52:	4b12      	ldr	r3, [pc, #72]	; (8008e9c <HAL_TIM_Base_MspInit+0x1ec>)
 8008e54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e5a:	613b      	str	r3, [r7, #16]
 8008e5c:	693b      	ldr	r3, [r7, #16]
}
 8008e5e:	e018      	b.n	8008e92 <HAL_TIM_Base_MspInit+0x1e2>
  else if(tim_baseHandle->Instance==TIM17)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	4a15      	ldr	r2, [pc, #84]	; (8008ebc <HAL_TIM_Base_MspInit+0x20c>)
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d113      	bne.n	8008e92 <HAL_TIM_Base_MspInit+0x1e2>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8008e6a:	4b0c      	ldr	r3, [pc, #48]	; (8008e9c <HAL_TIM_Base_MspInit+0x1ec>)
 8008e6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e6e:	4a0b      	ldr	r2, [pc, #44]	; (8008e9c <HAL_TIM_Base_MspInit+0x1ec>)
 8008e70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008e74:	6613      	str	r3, [r2, #96]	; 0x60
 8008e76:	4b09      	ldr	r3, [pc, #36]	; (8008e9c <HAL_TIM_Base_MspInit+0x1ec>)
 8008e78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008e7e:	60fb      	str	r3, [r7, #12]
 8008e80:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8008e82:	2200      	movs	r2, #0
 8008e84:	2100      	movs	r1, #0
 8008e86:	201a      	movs	r0, #26
 8008e88:	f002 f9cb 	bl	800b222 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8008e8c:	201a      	movs	r0, #26
 8008e8e:	f002 f9e2 	bl	800b256 <HAL_NVIC_EnableIRQ>
}
 8008e92:	bf00      	nop
 8008e94:	3740      	adds	r7, #64	; 0x40
 8008e96:	46bd      	mov	sp, r7
 8008e98:	bd80      	pop	{r7, pc}
 8008e9a:	bf00      	nop
 8008e9c:	40021000 	.word	0x40021000
 8008ea0:	20002a04 	.word	0x20002a04
 8008ea4:	40020044 	.word	0x40020044
 8008ea8:	40000400 	.word	0x40000400
 8008eac:	40000c00 	.word	0x40000c00
 8008eb0:	40013400 	.word	0x40013400
 8008eb4:	40014000 	.word	0x40014000
 8008eb8:	40014400 	.word	0x40014400
 8008ebc:	40014800 	.word	0x40014800

08008ec0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8008ec0:	480d      	ldr	r0, [pc, #52]	; (8008ef8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8008ec2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008ec4:	480d      	ldr	r0, [pc, #52]	; (8008efc <LoopForever+0x6>)
  ldr r1, =_edata
 8008ec6:	490e      	ldr	r1, [pc, #56]	; (8008f00 <LoopForever+0xa>)
  ldr r2, =_sidata
 8008ec8:	4a0e      	ldr	r2, [pc, #56]	; (8008f04 <LoopForever+0xe>)
  movs r3, #0
 8008eca:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8008ecc:	e002      	b.n	8008ed4 <LoopCopyDataInit>

08008ece <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008ece:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008ed0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008ed2:	3304      	adds	r3, #4

08008ed4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008ed4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008ed6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008ed8:	d3f9      	bcc.n	8008ece <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008eda:	4a0b      	ldr	r2, [pc, #44]	; (8008f08 <LoopForever+0x12>)
  ldr r4, =_ebss
 8008edc:	4c0b      	ldr	r4, [pc, #44]	; (8008f0c <LoopForever+0x16>)
  movs r3, #0
 8008ede:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008ee0:	e001      	b.n	8008ee6 <LoopFillZerobss>

08008ee2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008ee2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008ee4:	3204      	adds	r2, #4

08008ee6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008ee6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008ee8:	d3fb      	bcc.n	8008ee2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8008eea:	f7ff fbeb 	bl	80086c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008eee:	f008 fbe7 	bl	80116c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8008ef2:	f7ff f897 	bl	8008024 <main>

08008ef6 <LoopForever>:

LoopForever:
    b LoopForever
 8008ef6:	e7fe      	b.n	8008ef6 <LoopForever>
  ldr   r0, =_estack
 8008ef8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8008efc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008f00:	20002088 	.word	0x20002088
  ldr r2, =_sidata
 8008f04:	08016c78 	.word	0x08016c78
  ldr r2, =_sbss
 8008f08:	20002088 	.word	0x20002088
  ldr r4, =_ebss
 8008f0c:	20002c80 	.word	0x20002c80

08008f10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8008f10:	e7fe      	b.n	8008f10 <ADC1_2_IRQHandler>

08008f12 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008f12:	b580      	push	{r7, lr}
 8008f14:	b082      	sub	sp, #8
 8008f16:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8008f18:	2300      	movs	r3, #0
 8008f1a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008f1c:	2003      	movs	r0, #3
 8008f1e:	f002 f975 	bl	800b20c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008f22:	2000      	movs	r0, #0
 8008f24:	f000 f80e 	bl	8008f44 <HAL_InitTick>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d002      	beq.n	8008f34 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8008f2e:	2301      	movs	r3, #1
 8008f30:	71fb      	strb	r3, [r7, #7]
 8008f32:	e001      	b.n	8008f38 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8008f34:	f7ff fa06 	bl	8008344 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8008f38:	79fb      	ldrb	r3, [r7, #7]

}
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	3708      	adds	r7, #8
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bd80      	pop	{r7, pc}
	...

08008f44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b084      	sub	sp, #16
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8008f50:	4b16      	ldr	r3, [pc, #88]	; (8008fac <HAL_InitTick+0x68>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d022      	beq.n	8008f9e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8008f58:	4b15      	ldr	r3, [pc, #84]	; (8008fb0 <HAL_InitTick+0x6c>)
 8008f5a:	681a      	ldr	r2, [r3, #0]
 8008f5c:	4b13      	ldr	r3, [pc, #76]	; (8008fac <HAL_InitTick+0x68>)
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008f64:	fbb1 f3f3 	udiv	r3, r1, r3
 8008f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	f002 f98e 	bl	800b28e <HAL_SYSTICK_Config>
 8008f72:	4603      	mov	r3, r0
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d10f      	bne.n	8008f98 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2b0f      	cmp	r3, #15
 8008f7c:	d809      	bhi.n	8008f92 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008f7e:	2200      	movs	r2, #0
 8008f80:	6879      	ldr	r1, [r7, #4]
 8008f82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f86:	f002 f94c 	bl	800b222 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8008f8a:	4a0a      	ldr	r2, [pc, #40]	; (8008fb4 <HAL_InitTick+0x70>)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	6013      	str	r3, [r2, #0]
 8008f90:	e007      	b.n	8008fa2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8008f92:	2301      	movs	r3, #1
 8008f94:	73fb      	strb	r3, [r7, #15]
 8008f96:	e004      	b.n	8008fa2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8008f98:	2301      	movs	r3, #1
 8008f9a:	73fb      	strb	r3, [r7, #15]
 8008f9c:	e001      	b.n	8008fa2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8008f9e:	2301      	movs	r3, #1
 8008fa0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8008fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	3710      	adds	r7, #16
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}
 8008fac:	20000eb8 	.word	0x20000eb8
 8008fb0:	20000eb0 	.word	0x20000eb0
 8008fb4:	20000eb4 	.word	0x20000eb4

08008fb8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008fb8:	b480      	push	{r7}
 8008fba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008fbc:	4b05      	ldr	r3, [pc, #20]	; (8008fd4 <HAL_IncTick+0x1c>)
 8008fbe:	681a      	ldr	r2, [r3, #0]
 8008fc0:	4b05      	ldr	r3, [pc, #20]	; (8008fd8 <HAL_IncTick+0x20>)
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	4413      	add	r3, r2
 8008fc6:	4a03      	ldr	r2, [pc, #12]	; (8008fd4 <HAL_IncTick+0x1c>)
 8008fc8:	6013      	str	r3, [r2, #0]
}
 8008fca:	bf00      	nop
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd2:	4770      	bx	lr
 8008fd4:	20002c78 	.word	0x20002c78
 8008fd8:	20000eb8 	.word	0x20000eb8

08008fdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008fdc:	b480      	push	{r7}
 8008fde:	af00      	add	r7, sp, #0
  return uwTick;
 8008fe0:	4b03      	ldr	r3, [pc, #12]	; (8008ff0 <HAL_GetTick+0x14>)
 8008fe2:	681b      	ldr	r3, [r3, #0]
}
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fec:	4770      	bx	lr
 8008fee:	bf00      	nop
 8008ff0:	20002c78 	.word	0x20002c78

08008ff4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b084      	sub	sp, #16
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008ffc:	f7ff ffee 	bl	8008fdc <HAL_GetTick>
 8009000:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800900c:	d004      	beq.n	8009018 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800900e:	4b09      	ldr	r3, [pc, #36]	; (8009034 <HAL_Delay+0x40>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	68fa      	ldr	r2, [r7, #12]
 8009014:	4413      	add	r3, r2
 8009016:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8009018:	bf00      	nop
 800901a:	f7ff ffdf 	bl	8008fdc <HAL_GetTick>
 800901e:	4602      	mov	r2, r0
 8009020:	68bb      	ldr	r3, [r7, #8]
 8009022:	1ad3      	subs	r3, r2, r3
 8009024:	68fa      	ldr	r2, [r7, #12]
 8009026:	429a      	cmp	r2, r3
 8009028:	d8f7      	bhi.n	800901a <HAL_Delay+0x26>
  {
  }
}
 800902a:	bf00      	nop
 800902c:	3710      	adds	r7, #16
 800902e:	46bd      	mov	sp, r7
 8009030:	bd80      	pop	{r7, pc}
 8009032:	bf00      	nop
 8009034:	20000eb8 	.word	0x20000eb8

08009038 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8009038:	b480      	push	{r7}
 800903a:	b083      	sub	sp, #12
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
 8009040:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	689b      	ldr	r3, [r3, #8]
 8009046:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	431a      	orrs	r2, r3
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	609a      	str	r2, [r3, #8]
}
 8009052:	bf00      	nop
 8009054:	370c      	adds	r7, #12
 8009056:	46bd      	mov	sp, r7
 8009058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905c:	4770      	bx	lr

0800905e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800905e:	b480      	push	{r7}
 8009060:	b083      	sub	sp, #12
 8009062:	af00      	add	r7, sp, #0
 8009064:	6078      	str	r0, [r7, #4]
 8009066:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	689b      	ldr	r3, [r3, #8]
 800906c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	431a      	orrs	r2, r3
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	609a      	str	r2, [r3, #8]
}
 8009078:	bf00      	nop
 800907a:	370c      	adds	r7, #12
 800907c:	46bd      	mov	sp, r7
 800907e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009082:	4770      	bx	lr

08009084 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8009084:	b480      	push	{r7}
 8009086:	b083      	sub	sp, #12
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	689b      	ldr	r3, [r3, #8]
 8009090:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8009094:	4618      	mov	r0, r3
 8009096:	370c      	adds	r7, #12
 8009098:	46bd      	mov	sp, r7
 800909a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909e:	4770      	bx	lr

080090a0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80090a0:	b490      	push	{r4, r7}
 80090a2:	b084      	sub	sp, #16
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	60f8      	str	r0, [r7, #12]
 80090a8:	60b9      	str	r1, [r7, #8]
 80090aa:	607a      	str	r2, [r7, #4]
 80090ac:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	3360      	adds	r3, #96	; 0x60
 80090b2:	461a      	mov	r2, r3
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	009b      	lsls	r3, r3, #2
 80090b8:	4413      	add	r3, r2
 80090ba:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80090bc:	6822      	ldr	r2, [r4, #0]
 80090be:	4b08      	ldr	r3, [pc, #32]	; (80090e0 <LL_ADC_SetOffset+0x40>)
 80090c0:	4013      	ands	r3, r2
 80090c2:	687a      	ldr	r2, [r7, #4]
 80090c4:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80090c8:	683a      	ldr	r2, [r7, #0]
 80090ca:	430a      	orrs	r2, r1
 80090cc:	4313      	orrs	r3, r2
 80090ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80090d2:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80090d4:	bf00      	nop
 80090d6:	3710      	adds	r7, #16
 80090d8:	46bd      	mov	sp, r7
 80090da:	bc90      	pop	{r4, r7}
 80090dc:	4770      	bx	lr
 80090de:	bf00      	nop
 80090e0:	03fff000 	.word	0x03fff000

080090e4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80090e4:	b490      	push	{r4, r7}
 80090e6:	b082      	sub	sp, #8
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
 80090ec:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	3360      	adds	r3, #96	; 0x60
 80090f2:	461a      	mov	r2, r3
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	009b      	lsls	r3, r3, #2
 80090f8:	4413      	add	r3, r2
 80090fa:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80090fc:	6823      	ldr	r3, [r4, #0]
 80090fe:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8009102:	4618      	mov	r0, r3
 8009104:	3708      	adds	r7, #8
 8009106:	46bd      	mov	sp, r7
 8009108:	bc90      	pop	{r4, r7}
 800910a:	4770      	bx	lr

0800910c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800910c:	b490      	push	{r4, r7}
 800910e:	b084      	sub	sp, #16
 8009110:	af00      	add	r7, sp, #0
 8009112:	60f8      	str	r0, [r7, #12]
 8009114:	60b9      	str	r1, [r7, #8]
 8009116:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	3360      	adds	r3, #96	; 0x60
 800911c:	461a      	mov	r2, r3
 800911e:	68bb      	ldr	r3, [r7, #8]
 8009120:	009b      	lsls	r3, r3, #2
 8009122:	4413      	add	r3, r2
 8009124:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8009126:	6823      	ldr	r3, [r4, #0]
 8009128:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	4313      	orrs	r3, r2
 8009130:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8009132:	bf00      	nop
 8009134:	3710      	adds	r7, #16
 8009136:	46bd      	mov	sp, r7
 8009138:	bc90      	pop	{r4, r7}
 800913a:	4770      	bx	lr

0800913c <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800913c:	b490      	push	{r4, r7}
 800913e:	b084      	sub	sp, #16
 8009140:	af00      	add	r7, sp, #0
 8009142:	60f8      	str	r0, [r7, #12]
 8009144:	60b9      	str	r1, [r7, #8]
 8009146:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	3360      	adds	r3, #96	; 0x60
 800914c:	461a      	mov	r2, r3
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	009b      	lsls	r3, r3, #2
 8009152:	4413      	add	r3, r2
 8009154:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8009156:	6823      	ldr	r3, [r4, #0]
 8009158:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	4313      	orrs	r3, r2
 8009160:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8009162:	bf00      	nop
 8009164:	3710      	adds	r7, #16
 8009166:	46bd      	mov	sp, r7
 8009168:	bc90      	pop	{r4, r7}
 800916a:	4770      	bx	lr

0800916c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800916c:	b490      	push	{r4, r7}
 800916e:	b084      	sub	sp, #16
 8009170:	af00      	add	r7, sp, #0
 8009172:	60f8      	str	r0, [r7, #12]
 8009174:	60b9      	str	r1, [r7, #8]
 8009176:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	3360      	adds	r3, #96	; 0x60
 800917c:	461a      	mov	r2, r3
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	009b      	lsls	r3, r3, #2
 8009182:	4413      	add	r3, r2
 8009184:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8009186:	6823      	ldr	r3, [r4, #0]
 8009188:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	4313      	orrs	r3, r2
 8009190:	6023      	str	r3, [r4, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8009192:	bf00      	nop
 8009194:	3710      	adds	r7, #16
 8009196:	46bd      	mov	sp, r7
 8009198:	bc90      	pop	{r4, r7}
 800919a:	4770      	bx	lr

0800919c <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800919c:	b480      	push	{r7}
 800919e:	b083      	sub	sp, #12
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
 80091a4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	695b      	ldr	r3, [r3, #20]
 80091aa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	431a      	orrs	r2, r3
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	615a      	str	r2, [r3, #20]
}
 80091b6:	bf00      	nop
 80091b8:	370c      	adds	r7, #12
 80091ba:	46bd      	mov	sp, r7
 80091bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c0:	4770      	bx	lr

080091c2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80091c2:	b480      	push	{r7}
 80091c4:	b083      	sub	sp, #12
 80091c6:	af00      	add	r7, sp, #0
 80091c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	68db      	ldr	r3, [r3, #12]
 80091ce:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d101      	bne.n	80091da <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80091d6:	2301      	movs	r3, #1
 80091d8:	e000      	b.n	80091dc <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80091da:	2300      	movs	r3, #0
}
 80091dc:	4618      	mov	r0, r3
 80091de:	370c      	adds	r7, #12
 80091e0:	46bd      	mov	sp, r7
 80091e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e6:	4770      	bx	lr

080091e8 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80091e8:	b490      	push	{r4, r7}
 80091ea:	b084      	sub	sp, #16
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	60f8      	str	r0, [r7, #12]
 80091f0:	60b9      	str	r1, [r7, #8]
 80091f2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	3330      	adds	r3, #48	; 0x30
 80091f8:	461a      	mov	r2, r3
 80091fa:	68bb      	ldr	r3, [r7, #8]
 80091fc:	0a1b      	lsrs	r3, r3, #8
 80091fe:	009b      	lsls	r3, r3, #2
 8009200:	f003 030c 	and.w	r3, r3, #12
 8009204:	4413      	add	r3, r2
 8009206:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8009208:	6822      	ldr	r2, [r4, #0]
 800920a:	68bb      	ldr	r3, [r7, #8]
 800920c:	f003 031f 	and.w	r3, r3, #31
 8009210:	211f      	movs	r1, #31
 8009212:	fa01 f303 	lsl.w	r3, r1, r3
 8009216:	43db      	mvns	r3, r3
 8009218:	401a      	ands	r2, r3
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	0e9b      	lsrs	r3, r3, #26
 800921e:	f003 011f 	and.w	r1, r3, #31
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	f003 031f 	and.w	r3, r3, #31
 8009228:	fa01 f303 	lsl.w	r3, r1, r3
 800922c:	4313      	orrs	r3, r2
 800922e:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8009230:	bf00      	nop
 8009232:	3710      	adds	r7, #16
 8009234:	46bd      	mov	sp, r7
 8009236:	bc90      	pop	{r4, r7}
 8009238:	4770      	bx	lr

0800923a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800923a:	b490      	push	{r4, r7}
 800923c:	b084      	sub	sp, #16
 800923e:	af00      	add	r7, sp, #0
 8009240:	60f8      	str	r0, [r7, #12]
 8009242:	60b9      	str	r1, [r7, #8]
 8009244:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	3314      	adds	r3, #20
 800924a:	461a      	mov	r2, r3
 800924c:	68bb      	ldr	r3, [r7, #8]
 800924e:	0e5b      	lsrs	r3, r3, #25
 8009250:	009b      	lsls	r3, r3, #2
 8009252:	f003 0304 	and.w	r3, r3, #4
 8009256:	4413      	add	r3, r2
 8009258:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800925a:	6822      	ldr	r2, [r4, #0]
 800925c:	68bb      	ldr	r3, [r7, #8]
 800925e:	0d1b      	lsrs	r3, r3, #20
 8009260:	f003 031f 	and.w	r3, r3, #31
 8009264:	2107      	movs	r1, #7
 8009266:	fa01 f303 	lsl.w	r3, r1, r3
 800926a:	43db      	mvns	r3, r3
 800926c:	401a      	ands	r2, r3
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	0d1b      	lsrs	r3, r3, #20
 8009272:	f003 031f 	and.w	r3, r3, #31
 8009276:	6879      	ldr	r1, [r7, #4]
 8009278:	fa01 f303 	lsl.w	r3, r1, r3
 800927c:	4313      	orrs	r3, r2
 800927e:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8009280:	bf00      	nop
 8009282:	3710      	adds	r7, #16
 8009284:	46bd      	mov	sp, r7
 8009286:	bc90      	pop	{r4, r7}
 8009288:	4770      	bx	lr
	...

0800928c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800928c:	b480      	push	{r7}
 800928e:	b085      	sub	sp, #20
 8009290:	af00      	add	r7, sp, #0
 8009292:	60f8      	str	r0, [r7, #12]
 8009294:	60b9      	str	r1, [r7, #8]
 8009296:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800929e:	68bb      	ldr	r3, [r7, #8]
 80092a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80092a4:	43db      	mvns	r3, r3
 80092a6:	401a      	ands	r2, r3
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f003 0318 	and.w	r3, r3, #24
 80092ae:	4908      	ldr	r1, [pc, #32]	; (80092d0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80092b0:	40d9      	lsrs	r1, r3
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	400b      	ands	r3, r1
 80092b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80092ba:	431a      	orrs	r2, r3
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80092c2:	bf00      	nop
 80092c4:	3714      	adds	r7, #20
 80092c6:	46bd      	mov	sp, r7
 80092c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092cc:	4770      	bx	lr
 80092ce:	bf00      	nop
 80092d0:	0007ffff 	.word	0x0007ffff

080092d4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80092d4:	b480      	push	{r7}
 80092d6:	b083      	sub	sp, #12
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	689b      	ldr	r3, [r3, #8]
 80092e0:	f003 031f 	and.w	r3, r3, #31
}
 80092e4:	4618      	mov	r0, r3
 80092e6:	370c      	adds	r7, #12
 80092e8:	46bd      	mov	sp, r7
 80092ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ee:	4770      	bx	lr

080092f0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80092f0:	b480      	push	{r7}
 80092f2:	b083      	sub	sp, #12
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	689b      	ldr	r3, [r3, #8]
 80092fc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8009300:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8009304:	687a      	ldr	r2, [r7, #4]
 8009306:	6093      	str	r3, [r2, #8]
}
 8009308:	bf00      	nop
 800930a:	370c      	adds	r7, #12
 800930c:	46bd      	mov	sp, r7
 800930e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009312:	4770      	bx	lr

08009314 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8009314:	b480      	push	{r7}
 8009316:	b083      	sub	sp, #12
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	689b      	ldr	r3, [r3, #8]
 8009320:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009324:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009328:	d101      	bne.n	800932e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800932a:	2301      	movs	r3, #1
 800932c:	e000      	b.n	8009330 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800932e:	2300      	movs	r3, #0
}
 8009330:	4618      	mov	r0, r3
 8009332:	370c      	adds	r7, #12
 8009334:	46bd      	mov	sp, r7
 8009336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933a:	4770      	bx	lr

0800933c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800933c:	b480      	push	{r7}
 800933e:	b083      	sub	sp, #12
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	689b      	ldr	r3, [r3, #8]
 8009348:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800934c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8009350:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8009358:	bf00      	nop
 800935a:	370c      	adds	r7, #12
 800935c:	46bd      	mov	sp, r7
 800935e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009362:	4770      	bx	lr

08009364 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8009364:	b480      	push	{r7}
 8009366:	b083      	sub	sp, #12
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	689b      	ldr	r3, [r3, #8]
 8009370:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009374:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009378:	d101      	bne.n	800937e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800937a:	2301      	movs	r3, #1
 800937c:	e000      	b.n	8009380 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800937e:	2300      	movs	r3, #0
}
 8009380:	4618      	mov	r0, r3
 8009382:	370c      	adds	r7, #12
 8009384:	46bd      	mov	sp, r7
 8009386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938a:	4770      	bx	lr

0800938c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800938c:	b480      	push	{r7}
 800938e:	b083      	sub	sp, #12
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	689b      	ldr	r3, [r3, #8]
 8009398:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800939c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80093a0:	f043 0201 	orr.w	r2, r3, #1
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80093a8:	bf00      	nop
 80093aa:	370c      	adds	r7, #12
 80093ac:	46bd      	mov	sp, r7
 80093ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b2:	4770      	bx	lr

080093b4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80093b4:	b480      	push	{r7}
 80093b6:	b083      	sub	sp, #12
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	689b      	ldr	r3, [r3, #8]
 80093c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80093c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80093c8:	f043 0202 	orr.w	r2, r3, #2
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80093d0:	bf00      	nop
 80093d2:	370c      	adds	r7, #12
 80093d4:	46bd      	mov	sp, r7
 80093d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093da:	4770      	bx	lr

080093dc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80093dc:	b480      	push	{r7}
 80093de:	b083      	sub	sp, #12
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	689b      	ldr	r3, [r3, #8]
 80093e8:	f003 0301 	and.w	r3, r3, #1
 80093ec:	2b01      	cmp	r3, #1
 80093ee:	d101      	bne.n	80093f4 <LL_ADC_IsEnabled+0x18>
 80093f0:	2301      	movs	r3, #1
 80093f2:	e000      	b.n	80093f6 <LL_ADC_IsEnabled+0x1a>
 80093f4:	2300      	movs	r3, #0
}
 80093f6:	4618      	mov	r0, r3
 80093f8:	370c      	adds	r7, #12
 80093fa:	46bd      	mov	sp, r7
 80093fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009400:	4770      	bx	lr

08009402 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8009402:	b480      	push	{r7}
 8009404:	b083      	sub	sp, #12
 8009406:	af00      	add	r7, sp, #0
 8009408:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	689b      	ldr	r3, [r3, #8]
 800940e:	f003 0302 	and.w	r3, r3, #2
 8009412:	2b02      	cmp	r3, #2
 8009414:	d101      	bne.n	800941a <LL_ADC_IsDisableOngoing+0x18>
 8009416:	2301      	movs	r3, #1
 8009418:	e000      	b.n	800941c <LL_ADC_IsDisableOngoing+0x1a>
 800941a:	2300      	movs	r3, #0
}
 800941c:	4618      	mov	r0, r3
 800941e:	370c      	adds	r7, #12
 8009420:	46bd      	mov	sp, r7
 8009422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009426:	4770      	bx	lr

08009428 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8009428:	b480      	push	{r7}
 800942a:	b083      	sub	sp, #12
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	689b      	ldr	r3, [r3, #8]
 8009434:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009438:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800943c:	f043 0204 	orr.w	r2, r3, #4
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8009444:	bf00      	nop
 8009446:	370c      	adds	r7, #12
 8009448:	46bd      	mov	sp, r7
 800944a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944e:	4770      	bx	lr

08009450 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8009450:	b480      	push	{r7}
 8009452:	b083      	sub	sp, #12
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	689b      	ldr	r3, [r3, #8]
 800945c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009460:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8009464:	f043 0210 	orr.w	r2, r3, #16
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800946c:	bf00      	nop
 800946e:	370c      	adds	r7, #12
 8009470:	46bd      	mov	sp, r7
 8009472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009476:	4770      	bx	lr

08009478 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8009478:	b480      	push	{r7}
 800947a:	b083      	sub	sp, #12
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	689b      	ldr	r3, [r3, #8]
 8009484:	f003 0304 	and.w	r3, r3, #4
 8009488:	2b04      	cmp	r3, #4
 800948a:	d101      	bne.n	8009490 <LL_ADC_REG_IsConversionOngoing+0x18>
 800948c:	2301      	movs	r3, #1
 800948e:	e000      	b.n	8009492 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8009490:	2300      	movs	r3, #0
}
 8009492:	4618      	mov	r0, r3
 8009494:	370c      	adds	r7, #12
 8009496:	46bd      	mov	sp, r7
 8009498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949c:	4770      	bx	lr

0800949e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800949e:	b480      	push	{r7}
 80094a0:	b083      	sub	sp, #12
 80094a2:	af00      	add	r7, sp, #0
 80094a4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	689b      	ldr	r3, [r3, #8]
 80094aa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80094ae:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80094b2:	f043 0220 	orr.w	r2, r3, #32
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80094ba:	bf00      	nop
 80094bc:	370c      	adds	r7, #12
 80094be:	46bd      	mov	sp, r7
 80094c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c4:	4770      	bx	lr

080094c6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80094c6:	b480      	push	{r7}
 80094c8:	b083      	sub	sp, #12
 80094ca:	af00      	add	r7, sp, #0
 80094cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	689b      	ldr	r3, [r3, #8]
 80094d2:	f003 0308 	and.w	r3, r3, #8
 80094d6:	2b08      	cmp	r3, #8
 80094d8:	d101      	bne.n	80094de <LL_ADC_INJ_IsConversionOngoing+0x18>
 80094da:	2301      	movs	r3, #1
 80094dc:	e000      	b.n	80094e0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80094de:	2300      	movs	r3, #0
}
 80094e0:	4618      	mov	r0, r3
 80094e2:	370c      	adds	r7, #12
 80094e4:	46bd      	mov	sp, r7
 80094e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ea:	4770      	bx	lr

080094ec <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80094ec:	b590      	push	{r4, r7, lr}
 80094ee:	b089      	sub	sp, #36	; 0x24
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80094f4:	2300      	movs	r3, #0
 80094f6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80094f8:	2300      	movs	r3, #0
 80094fa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d101      	bne.n	8009506 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8009502:	2301      	movs	r3, #1
 8009504:	e1ad      	b.n	8009862 <HAL_ADC_Init+0x376>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	695b      	ldr	r3, [r3, #20]
 800950a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009510:	2b00      	cmp	r3, #0
 8009512:	d109      	bne.n	8009528 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8009514:	6878      	ldr	r0, [r7, #4]
 8009516:	f7fd ffd1 	bl	80074bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2200      	movs	r2, #0
 800951e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2200      	movs	r2, #0
 8009524:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	4618      	mov	r0, r3
 800952e:	f7ff fef1 	bl	8009314 <LL_ADC_IsDeepPowerDownEnabled>
 8009532:	4603      	mov	r3, r0
 8009534:	2b00      	cmp	r3, #0
 8009536:	d004      	beq.n	8009542 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	4618      	mov	r0, r3
 800953e:	f7ff fed7 	bl	80092f0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	4618      	mov	r0, r3
 8009548:	f7ff ff0c 	bl	8009364 <LL_ADC_IsInternalRegulatorEnabled>
 800954c:	4603      	mov	r3, r0
 800954e:	2b00      	cmp	r3, #0
 8009550:	d113      	bne.n	800957a <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	4618      	mov	r0, r3
 8009558:	f7ff fef0 	bl	800933c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800955c:	4b9e      	ldr	r3, [pc, #632]	; (80097d8 <HAL_ADC_Init+0x2ec>)
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	099b      	lsrs	r3, r3, #6
 8009562:	4a9e      	ldr	r2, [pc, #632]	; (80097dc <HAL_ADC_Init+0x2f0>)
 8009564:	fba2 2303 	umull	r2, r3, r2, r3
 8009568:	099b      	lsrs	r3, r3, #6
 800956a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800956c:	e002      	b.n	8009574 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 800956e:	68bb      	ldr	r3, [r7, #8]
 8009570:	3b01      	subs	r3, #1
 8009572:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8009574:	68bb      	ldr	r3, [r7, #8]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d1f9      	bne.n	800956e <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	4618      	mov	r0, r3
 8009580:	f7ff fef0 	bl	8009364 <LL_ADC_IsInternalRegulatorEnabled>
 8009584:	4603      	mov	r3, r0
 8009586:	2b00      	cmp	r3, #0
 8009588:	d10d      	bne.n	80095a6 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800958e:	f043 0210 	orr.w	r2, r3, #16
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800959a:	f043 0201 	orr.w	r2, r3, #1
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80095a2:	2301      	movs	r3, #1
 80095a4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	4618      	mov	r0, r3
 80095ac:	f7ff ff64 	bl	8009478 <LL_ADC_REG_IsConversionOngoing>
 80095b0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80095b6:	f003 0310 	and.w	r3, r3, #16
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	f040 8148 	bne.w	8009850 <HAL_ADC_Init+0x364>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80095c0:	697b      	ldr	r3, [r7, #20]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	f040 8144 	bne.w	8009850 <HAL_ADC_Init+0x364>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80095cc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80095d0:	f043 0202 	orr.w	r2, r3, #2
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	4618      	mov	r0, r3
 80095de:	f7ff fefd 	bl	80093dc <LL_ADC_IsEnabled>
 80095e2:	4603      	mov	r3, r0
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d141      	bne.n	800966c <HAL_ADC_Init+0x180>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80095f0:	d004      	beq.n	80095fc <HAL_ADC_Init+0x110>
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	4a7a      	ldr	r2, [pc, #488]	; (80097e0 <HAL_ADC_Init+0x2f4>)
 80095f8:	4293      	cmp	r3, r2
 80095fa:	d10f      	bne.n	800961c <HAL_ADC_Init+0x130>
 80095fc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8009600:	f7ff feec 	bl	80093dc <LL_ADC_IsEnabled>
 8009604:	4604      	mov	r4, r0
 8009606:	4876      	ldr	r0, [pc, #472]	; (80097e0 <HAL_ADC_Init+0x2f4>)
 8009608:	f7ff fee8 	bl	80093dc <LL_ADC_IsEnabled>
 800960c:	4603      	mov	r3, r0
 800960e:	4323      	orrs	r3, r4
 8009610:	2b00      	cmp	r3, #0
 8009612:	bf0c      	ite	eq
 8009614:	2301      	moveq	r3, #1
 8009616:	2300      	movne	r3, #0
 8009618:	b2db      	uxtb	r3, r3
 800961a:	e012      	b.n	8009642 <HAL_ADC_Init+0x156>
 800961c:	4871      	ldr	r0, [pc, #452]	; (80097e4 <HAL_ADC_Init+0x2f8>)
 800961e:	f7ff fedd 	bl	80093dc <LL_ADC_IsEnabled>
 8009622:	4604      	mov	r4, r0
 8009624:	4870      	ldr	r0, [pc, #448]	; (80097e8 <HAL_ADC_Init+0x2fc>)
 8009626:	f7ff fed9 	bl	80093dc <LL_ADC_IsEnabled>
 800962a:	4603      	mov	r3, r0
 800962c:	431c      	orrs	r4, r3
 800962e:	486f      	ldr	r0, [pc, #444]	; (80097ec <HAL_ADC_Init+0x300>)
 8009630:	f7ff fed4 	bl	80093dc <LL_ADC_IsEnabled>
 8009634:	4603      	mov	r3, r0
 8009636:	4323      	orrs	r3, r4
 8009638:	2b00      	cmp	r3, #0
 800963a:	bf0c      	ite	eq
 800963c:	2301      	moveq	r3, #1
 800963e:	2300      	movne	r3, #0
 8009640:	b2db      	uxtb	r3, r3
 8009642:	2b00      	cmp	r3, #0
 8009644:	d012      	beq.n	800966c <HAL_ADC_Init+0x180>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800964e:	d004      	beq.n	800965a <HAL_ADC_Init+0x16e>
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	4a62      	ldr	r2, [pc, #392]	; (80097e0 <HAL_ADC_Init+0x2f4>)
 8009656:	4293      	cmp	r3, r2
 8009658:	d101      	bne.n	800965e <HAL_ADC_Init+0x172>
 800965a:	4a65      	ldr	r2, [pc, #404]	; (80097f0 <HAL_ADC_Init+0x304>)
 800965c:	e000      	b.n	8009660 <HAL_ADC_Init+0x174>
 800965e:	4a65      	ldr	r2, [pc, #404]	; (80097f4 <HAL_ADC_Init+0x308>)
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	685b      	ldr	r3, [r3, #4]
 8009664:	4619      	mov	r1, r3
 8009666:	4610      	mov	r0, r2
 8009668:	f7ff fce6 	bl	8009038 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	7f5b      	ldrb	r3, [r3, #29]
 8009670:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8009676:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800967c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8009682:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800968a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800968c:	4313      	orrs	r3, r2
 800968e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009696:	2b01      	cmp	r3, #1
 8009698:	d106      	bne.n	80096a8 <HAL_ADC_Init+0x1bc>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800969e:	3b01      	subs	r3, #1
 80096a0:	045b      	lsls	r3, r3, #17
 80096a2:	69ba      	ldr	r2, [r7, #24]
 80096a4:	4313      	orrs	r3, r2
 80096a6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d009      	beq.n	80096c4 <HAL_ADC_Init+0x1d8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096b4:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096bc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80096be:	69ba      	ldr	r2, [r7, #24]
 80096c0:	4313      	orrs	r3, r2
 80096c2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	68da      	ldr	r2, [r3, #12]
 80096ca:	4b4b      	ldr	r3, [pc, #300]	; (80097f8 <HAL_ADC_Init+0x30c>)
 80096cc:	4013      	ands	r3, r2
 80096ce:	687a      	ldr	r2, [r7, #4]
 80096d0:	6812      	ldr	r2, [r2, #0]
 80096d2:	69b9      	ldr	r1, [r7, #24]
 80096d4:	430b      	orrs	r3, r1
 80096d6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	691b      	ldr	r3, [r3, #16]
 80096de:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	430a      	orrs	r2, r1
 80096ec:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	4618      	mov	r0, r3
 80096f4:	f7ff fec0 	bl	8009478 <LL_ADC_REG_IsConversionOngoing>
 80096f8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	4618      	mov	r0, r3
 8009700:	f7ff fee1 	bl	80094c6 <LL_ADC_INJ_IsConversionOngoing>
 8009704:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8009706:	693b      	ldr	r3, [r7, #16]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d17f      	bne.n	800980c <HAL_ADC_Init+0x320>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d17c      	bne.n	800980c <HAL_ADC_Init+0x320>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8009716:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800971e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8009720:	4313      	orrs	r3, r2
 8009722:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	68db      	ldr	r3, [r3, #12]
 800972a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800972e:	f023 0302 	bic.w	r3, r3, #2
 8009732:	687a      	ldr	r2, [r7, #4]
 8009734:	6812      	ldr	r2, [r2, #0]
 8009736:	69b9      	ldr	r1, [r7, #24]
 8009738:	430b      	orrs	r3, r1
 800973a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	691b      	ldr	r3, [r3, #16]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d017      	beq.n	8009774 <HAL_ADC_Init+0x288>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	691a      	ldr	r2, [r3, #16]
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8009752:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800975c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8009760:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8009764:	687a      	ldr	r2, [r7, #4]
 8009766:	6911      	ldr	r1, [r2, #16]
 8009768:	687a      	ldr	r2, [r7, #4]
 800976a:	6812      	ldr	r2, [r2, #0]
 800976c:	430b      	orrs	r3, r1
 800976e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8009772:	e013      	b.n	800979c <HAL_ADC_Init+0x2b0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	691a      	ldr	r2, [r3, #16]
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009782:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800978c:	687a      	ldr	r2, [r7, #4]
 800978e:	6812      	ldr	r2, [r2, #0]
 8009790:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8009794:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8009798:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80097a2:	2b01      	cmp	r3, #1
 80097a4:	d12a      	bne.n	80097fc <HAL_ADC_Init+0x310>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	691b      	ldr	r3, [r3, #16]
 80097ac:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80097b0:	f023 0304 	bic.w	r3, r3, #4
 80097b4:	687a      	ldr	r2, [r7, #4]
 80097b6:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80097b8:	687a      	ldr	r2, [r7, #4]
 80097ba:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80097bc:	4311      	orrs	r1, r2
 80097be:	687a      	ldr	r2, [r7, #4]
 80097c0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80097c2:	4311      	orrs	r1, r2
 80097c4:	687a      	ldr	r2, [r7, #4]
 80097c6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80097c8:	430a      	orrs	r2, r1
 80097ca:	431a      	orrs	r2, r3
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f042 0201 	orr.w	r2, r2, #1
 80097d4:	611a      	str	r2, [r3, #16]
 80097d6:	e019      	b.n	800980c <HAL_ADC_Init+0x320>
 80097d8:	20000eb0 	.word	0x20000eb0
 80097dc:	053e2d63 	.word	0x053e2d63
 80097e0:	50000100 	.word	0x50000100
 80097e4:	50000400 	.word	0x50000400
 80097e8:	50000500 	.word	0x50000500
 80097ec:	50000600 	.word	0x50000600
 80097f0:	50000300 	.word	0x50000300
 80097f4:	50000700 	.word	0x50000700
 80097f8:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	691a      	ldr	r2, [r3, #16]
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	f022 0201 	bic.w	r2, r2, #1
 800980a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	695b      	ldr	r3, [r3, #20]
 8009810:	2b01      	cmp	r3, #1
 8009812:	d10c      	bne.n	800982e <HAL_ADC_Init+0x342>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800981a:	f023 010f 	bic.w	r1, r3, #15
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	6a1b      	ldr	r3, [r3, #32]
 8009822:	1e5a      	subs	r2, r3, #1
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	430a      	orrs	r2, r1
 800982a:	631a      	str	r2, [r3, #48]	; 0x30
 800982c:	e007      	b.n	800983e <HAL_ADC_Init+0x352>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	f022 020f 	bic.w	r2, r2, #15
 800983c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009842:	f023 0303 	bic.w	r3, r3, #3
 8009846:	f043 0201 	orr.w	r2, r3, #1
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	65da      	str	r2, [r3, #92]	; 0x5c
 800984e:	e007      	b.n	8009860 <HAL_ADC_Init+0x374>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009854:	f043 0210 	orr.w	r2, r3, #16
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800985c:	2301      	movs	r3, #1
 800985e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8009860:	7ffb      	ldrb	r3, [r7, #31]
}
 8009862:	4618      	mov	r0, r3
 8009864:	3724      	adds	r7, #36	; 0x24
 8009866:	46bd      	mov	sp, r7
 8009868:	bd90      	pop	{r4, r7, pc}
 800986a:	bf00      	nop

0800986c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b086      	sub	sp, #24
 8009870:	af00      	add	r7, sp, #0
 8009872:	60f8      	str	r0, [r7, #12]
 8009874:	60b9      	str	r1, [r7, #8]
 8009876:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009880:	d004      	beq.n	800988c <HAL_ADC_Start_DMA+0x20>
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	4a58      	ldr	r2, [pc, #352]	; (80099e8 <HAL_ADC_Start_DMA+0x17c>)
 8009888:	4293      	cmp	r3, r2
 800988a:	d101      	bne.n	8009890 <HAL_ADC_Start_DMA+0x24>
 800988c:	4b57      	ldr	r3, [pc, #348]	; (80099ec <HAL_ADC_Start_DMA+0x180>)
 800988e:	e000      	b.n	8009892 <HAL_ADC_Start_DMA+0x26>
 8009890:	4b57      	ldr	r3, [pc, #348]	; (80099f0 <HAL_ADC_Start_DMA+0x184>)
 8009892:	4618      	mov	r0, r3
 8009894:	f7ff fd1e 	bl	80092d4 <LL_ADC_GetMultimode>
 8009898:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	4618      	mov	r0, r3
 80098a0:	f7ff fdea 	bl	8009478 <LL_ADC_REG_IsConversionOngoing>
 80098a4:	4603      	mov	r3, r0
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	f040 8096 	bne.w	80099d8 <HAL_ADC_Start_DMA+0x16c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80098b2:	2b01      	cmp	r3, #1
 80098b4:	d101      	bne.n	80098ba <HAL_ADC_Start_DMA+0x4e>
 80098b6:	2302      	movs	r3, #2
 80098b8:	e091      	b.n	80099de <HAL_ADC_Start_DMA+0x172>
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	2201      	movs	r2, #1
 80098be:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80098c2:	693b      	ldr	r3, [r7, #16]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d005      	beq.n	80098d4 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80098c8:	693b      	ldr	r3, [r7, #16]
 80098ca:	2b05      	cmp	r3, #5
 80098cc:	d002      	beq.n	80098d4 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80098ce:	693b      	ldr	r3, [r7, #16]
 80098d0:	2b09      	cmp	r3, #9
 80098d2:	d17a      	bne.n	80099ca <HAL_ADC_Start_DMA+0x15e>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80098d4:	68f8      	ldr	r0, [r7, #12]
 80098d6:	f000 fd71 	bl	800a3bc <ADC_Enable>
 80098da:	4603      	mov	r3, r0
 80098dc:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80098de:	7dfb      	ldrb	r3, [r7, #23]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d16d      	bne.n	80099c0 <HAL_ADC_Start_DMA+0x154>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80098e8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80098ec:	f023 0301 	bic.w	r3, r3, #1
 80098f0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	4a3a      	ldr	r2, [pc, #232]	; (80099e8 <HAL_ADC_Start_DMA+0x17c>)
 80098fe:	4293      	cmp	r3, r2
 8009900:	d009      	beq.n	8009916 <HAL_ADC_Start_DMA+0xaa>
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	4a3b      	ldr	r2, [pc, #236]	; (80099f4 <HAL_ADC_Start_DMA+0x188>)
 8009908:	4293      	cmp	r3, r2
 800990a:	d002      	beq.n	8009912 <HAL_ADC_Start_DMA+0xa6>
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	e003      	b.n	800991a <HAL_ADC_Start_DMA+0xae>
 8009912:	4b39      	ldr	r3, [pc, #228]	; (80099f8 <HAL_ADC_Start_DMA+0x18c>)
 8009914:	e001      	b.n	800991a <HAL_ADC_Start_DMA+0xae>
 8009916:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800991a:	68fa      	ldr	r2, [r7, #12]
 800991c:	6812      	ldr	r2, [r2, #0]
 800991e:	4293      	cmp	r3, r2
 8009920:	d002      	beq.n	8009928 <HAL_ADC_Start_DMA+0xbc>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8009922:	693b      	ldr	r3, [r7, #16]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d105      	bne.n	8009934 <HAL_ADC_Start_DMA+0xc8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800992c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009938:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800993c:	2b00      	cmp	r3, #0
 800993e:	d006      	beq.n	800994e <HAL_ADC_Start_DMA+0xe2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009944:	f023 0206 	bic.w	r2, r3, #6
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	661a      	str	r2, [r3, #96]	; 0x60
 800994c:	e002      	b.n	8009954 <HAL_ADC_Start_DMA+0xe8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	2200      	movs	r2, #0
 8009952:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009958:	4a28      	ldr	r2, [pc, #160]	; (80099fc <HAL_ADC_Start_DMA+0x190>)
 800995a:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009960:	4a27      	ldr	r2, [pc, #156]	; (8009a00 <HAL_ADC_Start_DMA+0x194>)
 8009962:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009968:	4a26      	ldr	r2, [pc, #152]	; (8009a04 <HAL_ADC_Start_DMA+0x198>)
 800996a:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	221c      	movs	r2, #28
 8009972:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	2200      	movs	r2, #0
 8009978:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	685a      	ldr	r2, [r3, #4]
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	f042 0210 	orr.w	r2, r2, #16
 800998a:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	68da      	ldr	r2, [r3, #12]
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	f042 0201 	orr.w	r2, r2, #1
 800999a:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	3340      	adds	r3, #64	; 0x40
 80099a6:	4619      	mov	r1, r3
 80099a8:	68ba      	ldr	r2, [r7, #8]
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	f002 f942 	bl	800bc34 <HAL_DMA_Start_IT>
 80099b0:	4603      	mov	r3, r0
 80099b2:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	4618      	mov	r0, r3
 80099ba:	f7ff fd35 	bl	8009428 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80099be:	e00d      	b.n	80099dc <HAL_ADC_Start_DMA+0x170>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	2200      	movs	r2, #0
 80099c4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 80099c8:	e008      	b.n	80099dc <HAL_ADC_Start_DMA+0x170>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80099ca:	2301      	movs	r3, #1
 80099cc:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	2200      	movs	r2, #0
 80099d2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80099d6:	e001      	b.n	80099dc <HAL_ADC_Start_DMA+0x170>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80099d8:	2302      	movs	r3, #2
 80099da:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80099dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80099de:	4618      	mov	r0, r3
 80099e0:	3718      	adds	r7, #24
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}
 80099e6:	bf00      	nop
 80099e8:	50000100 	.word	0x50000100
 80099ec:	50000300 	.word	0x50000300
 80099f0:	50000700 	.word	0x50000700
 80099f4:	50000500 	.word	0x50000500
 80099f8:	50000400 	.word	0x50000400
 80099fc:	0800a521 	.word	0x0800a521
 8009a00:	0800a5f9 	.word	0x0800a5f9
 8009a04:	0800a615 	.word	0x0800a615

08009a08 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b084      	sub	sp, #16
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8009a16:	2b01      	cmp	r3, #1
 8009a18:	d101      	bne.n	8009a1e <HAL_ADC_Stop_DMA+0x16>
 8009a1a:	2302      	movs	r3, #2
 8009a1c:	e051      	b.n	8009ac2 <HAL_ADC_Stop_DMA+0xba>
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	2201      	movs	r2, #1
 8009a22:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8009a26:	2103      	movs	r1, #3
 8009a28:	6878      	ldr	r0, [r7, #4]
 8009a2a:	f000 fc13 	bl	800a254 <ADC_ConversionStop>
 8009a2e:	4603      	mov	r3, r0
 8009a30:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8009a32:	7bfb      	ldrb	r3, [r7, #15]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d13f      	bne.n	8009ab8 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	68da      	ldr	r2, [r3, #12]
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	f022 0201 	bic.w	r2, r2, #1
 8009a46:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a4c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009a50:	b2db      	uxtb	r3, r3
 8009a52:	2b02      	cmp	r3, #2
 8009a54:	d10f      	bne.n	8009a76 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	f002 f965 	bl	800bd2a <HAL_DMA_Abort>
 8009a60:	4603      	mov	r3, r0
 8009a62:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8009a64:	7bfb      	ldrb	r3, [r7, #15]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d005      	beq.n	8009a76 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a6e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	685a      	ldr	r2, [r3, #4]
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	f022 0210 	bic.w	r2, r2, #16
 8009a84:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8009a86:	7bfb      	ldrb	r3, [r7, #15]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d105      	bne.n	8009a98 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f000 fcef 	bl	800a470 <ADC_Disable>
 8009a92:	4603      	mov	r3, r0
 8009a94:	73fb      	strb	r3, [r7, #15]
 8009a96:	e002      	b.n	8009a9e <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8009a98:	6878      	ldr	r0, [r7, #4]
 8009a9a:	f000 fce9 	bl	800a470 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8009a9e:	7bfb      	ldrb	r3, [r7, #15]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d109      	bne.n	8009ab8 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009aa8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8009aac:	f023 0301 	bic.w	r3, r3, #1
 8009ab0:	f043 0201 	orr.w	r2, r3, #1
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2200      	movs	r2, #0
 8009abc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8009ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	3710      	adds	r7, #16
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	bd80      	pop	{r7, pc}

08009aca <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8009aca:	b480      	push	{r7}
 8009acc:	b083      	sub	sp, #12
 8009ace:	af00      	add	r7, sp, #0
 8009ad0:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8009ad2:	bf00      	nop
 8009ad4:	370c      	adds	r7, #12
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009adc:	4770      	bx	lr

08009ade <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8009ade:	b480      	push	{r7}
 8009ae0:	b083      	sub	sp, #12
 8009ae2:	af00      	add	r7, sp, #0
 8009ae4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8009ae6:	bf00      	nop
 8009ae8:	370c      	adds	r7, #12
 8009aea:	46bd      	mov	sp, r7
 8009aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af0:	4770      	bx	lr
	...

08009af4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b0a6      	sub	sp, #152	; 0x98
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
 8009afc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009afe:	2300      	movs	r3, #0
 8009b00:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8009b04:	2300      	movs	r3, #0
 8009b06:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8009b0e:	2b01      	cmp	r3, #1
 8009b10:	d101      	bne.n	8009b16 <HAL_ADC_ConfigChannel+0x22>
 8009b12:	2302      	movs	r3, #2
 8009b14:	e38e      	b.n	800a234 <HAL_ADC_ConfigChannel+0x740>
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2201      	movs	r2, #1
 8009b1a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	4618      	mov	r0, r3
 8009b24:	f7ff fca8 	bl	8009478 <LL_ADC_REG_IsConversionOngoing>
 8009b28:	4603      	mov	r3, r0
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	f040 836f 	bne.w	800a20e <HAL_ADC_ConfigChannel+0x71a>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	6818      	ldr	r0, [r3, #0]
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	6859      	ldr	r1, [r3, #4]
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	461a      	mov	r2, r3
 8009b3e:	f7ff fb53 	bl	80091e8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	4618      	mov	r0, r3
 8009b48:	f7ff fc96 	bl	8009478 <LL_ADC_REG_IsConversionOngoing>
 8009b4c:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	4618      	mov	r0, r3
 8009b56:	f7ff fcb6 	bl	80094c6 <LL_ADC_INJ_IsConversionOngoing>
 8009b5a:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8009b5e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	f040 817b 	bne.w	8009e5e <HAL_ADC_ConfigChannel+0x36a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8009b68:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	f040 8176 	bne.w	8009e5e <HAL_ADC_ConfigChannel+0x36a>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	689b      	ldr	r3, [r3, #8]
 8009b76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009b7a:	d10f      	bne.n	8009b9c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	6818      	ldr	r0, [r3, #0]
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	2200      	movs	r2, #0
 8009b86:	4619      	mov	r1, r3
 8009b88:	f7ff fb57 	bl	800923a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8009b94:	4618      	mov	r0, r3
 8009b96:	f7ff fb01 	bl	800919c <LL_ADC_SetSamplingTimeCommonConfig>
 8009b9a:	e00e      	b.n	8009bba <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	6818      	ldr	r0, [r3, #0]
 8009ba0:	683b      	ldr	r3, [r7, #0]
 8009ba2:	6819      	ldr	r1, [r3, #0]
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	689b      	ldr	r3, [r3, #8]
 8009ba8:	461a      	mov	r2, r3
 8009baa:	f7ff fb46 	bl	800923a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	2100      	movs	r1, #0
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	f7ff faf1 	bl	800919c <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8009bba:	683b      	ldr	r3, [r7, #0]
 8009bbc:	695a      	ldr	r2, [r3, #20]
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	68db      	ldr	r3, [r3, #12]
 8009bc4:	08db      	lsrs	r3, r3, #3
 8009bc6:	f003 0303 	and.w	r3, r3, #3
 8009bca:	005b      	lsls	r3, r3, #1
 8009bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8009bd0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	691b      	ldr	r3, [r3, #16]
 8009bd8:	2b04      	cmp	r3, #4
 8009bda:	d022      	beq.n	8009c22 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	6818      	ldr	r0, [r3, #0]
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	6919      	ldr	r1, [r3, #16]
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	681a      	ldr	r2, [r3, #0]
 8009be8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009bec:	f7ff fa58 	bl	80090a0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	6818      	ldr	r0, [r3, #0]
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	6919      	ldr	r1, [r3, #16]
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	699b      	ldr	r3, [r3, #24]
 8009bfc:	461a      	mov	r2, r3
 8009bfe:	f7ff fa9d 	bl	800913c <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	6818      	ldr	r0, [r3, #0]
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	6919      	ldr	r1, [r3, #16]
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	7f1b      	ldrb	r3, [r3, #28]
 8009c0e:	2b01      	cmp	r3, #1
 8009c10:	d102      	bne.n	8009c18 <HAL_ADC_ConfigChannel+0x124>
 8009c12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009c16:	e000      	b.n	8009c1a <HAL_ADC_ConfigChannel+0x126>
 8009c18:	2300      	movs	r3, #0
 8009c1a:	461a      	mov	r2, r3
 8009c1c:	f7ff faa6 	bl	800916c <LL_ADC_SetOffsetSaturation>
 8009c20:	e11d      	b.n	8009e5e <HAL_ADC_ConfigChannel+0x36a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	2100      	movs	r1, #0
 8009c28:	4618      	mov	r0, r3
 8009c2a:	f7ff fa5b 	bl	80090e4 <LL_ADC_GetOffsetChannel>
 8009c2e:	4603      	mov	r3, r0
 8009c30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d10a      	bne.n	8009c4e <HAL_ADC_ConfigChannel+0x15a>
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	2100      	movs	r1, #0
 8009c3e:	4618      	mov	r0, r3
 8009c40:	f7ff fa50 	bl	80090e4 <LL_ADC_GetOffsetChannel>
 8009c44:	4603      	mov	r3, r0
 8009c46:	0e9b      	lsrs	r3, r3, #26
 8009c48:	f003 021f 	and.w	r2, r3, #31
 8009c4c:	e012      	b.n	8009c74 <HAL_ADC_ConfigChannel+0x180>
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	2100      	movs	r1, #0
 8009c54:	4618      	mov	r0, r3
 8009c56:	f7ff fa45 	bl	80090e4 <LL_ADC_GetOffsetChannel>
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c60:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009c64:	fa93 f3a3 	rbit	r3, r3
 8009c68:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8009c6a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009c6c:	fab3 f383 	clz	r3, r3
 8009c70:	b2db      	uxtb	r3, r3
 8009c72:	461a      	mov	r2, r3
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d105      	bne.n	8009c8c <HAL_ADC_ConfigChannel+0x198>
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	0e9b      	lsrs	r3, r3, #26
 8009c86:	f003 031f 	and.w	r3, r3, #31
 8009c8a:	e00a      	b.n	8009ca2 <HAL_ADC_ConfigChannel+0x1ae>
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c94:	fa93 f3a3 	rbit	r3, r3
 8009c98:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8009c9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c9c:	fab3 f383 	clz	r3, r3
 8009ca0:	b2db      	uxtb	r3, r3
 8009ca2:	429a      	cmp	r2, r3
 8009ca4:	d106      	bne.n	8009cb4 <HAL_ADC_ConfigChannel+0x1c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	2200      	movs	r2, #0
 8009cac:	2100      	movs	r1, #0
 8009cae:	4618      	mov	r0, r3
 8009cb0:	f7ff fa2c 	bl	800910c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	2101      	movs	r1, #1
 8009cba:	4618      	mov	r0, r3
 8009cbc:	f7ff fa12 	bl	80090e4 <LL_ADC_GetOffsetChannel>
 8009cc0:	4603      	mov	r3, r0
 8009cc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d10a      	bne.n	8009ce0 <HAL_ADC_ConfigChannel+0x1ec>
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	2101      	movs	r1, #1
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	f7ff fa07 	bl	80090e4 <LL_ADC_GetOffsetChannel>
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	0e9b      	lsrs	r3, r3, #26
 8009cda:	f003 021f 	and.w	r2, r3, #31
 8009cde:	e010      	b.n	8009d02 <HAL_ADC_ConfigChannel+0x20e>
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	2101      	movs	r1, #1
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	f7ff f9fc 	bl	80090e4 <LL_ADC_GetOffsetChannel>
 8009cec:	4603      	mov	r3, r0
 8009cee:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009cf0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009cf2:	fa93 f3a3 	rbit	r3, r3
 8009cf6:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8009cf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009cfa:	fab3 f383 	clz	r3, r3
 8009cfe:	b2db      	uxtb	r3, r3
 8009d00:	461a      	mov	r2, r3
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d105      	bne.n	8009d1a <HAL_ADC_ConfigChannel+0x226>
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	0e9b      	lsrs	r3, r3, #26
 8009d14:	f003 031f 	and.w	r3, r3, #31
 8009d18:	e00a      	b.n	8009d30 <HAL_ADC_ConfigChannel+0x23c>
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009d20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009d22:	fa93 f3a3 	rbit	r3, r3
 8009d26:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8009d28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009d2a:	fab3 f383 	clz	r3, r3
 8009d2e:	b2db      	uxtb	r3, r3
 8009d30:	429a      	cmp	r2, r3
 8009d32:	d106      	bne.n	8009d42 <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	2200      	movs	r2, #0
 8009d3a:	2101      	movs	r1, #1
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	f7ff f9e5 	bl	800910c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	2102      	movs	r1, #2
 8009d48:	4618      	mov	r0, r3
 8009d4a:	f7ff f9cb 	bl	80090e4 <LL_ADC_GetOffsetChannel>
 8009d4e:	4603      	mov	r3, r0
 8009d50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d10a      	bne.n	8009d6e <HAL_ADC_ConfigChannel+0x27a>
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	2102      	movs	r1, #2
 8009d5e:	4618      	mov	r0, r3
 8009d60:	f7ff f9c0 	bl	80090e4 <LL_ADC_GetOffsetChannel>
 8009d64:	4603      	mov	r3, r0
 8009d66:	0e9b      	lsrs	r3, r3, #26
 8009d68:	f003 021f 	and.w	r2, r3, #31
 8009d6c:	e010      	b.n	8009d90 <HAL_ADC_ConfigChannel+0x29c>
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	2102      	movs	r1, #2
 8009d74:	4618      	mov	r0, r3
 8009d76:	f7ff f9b5 	bl	80090e4 <LL_ADC_GetOffsetChannel>
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009d7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009d80:	fa93 f3a3 	rbit	r3, r3
 8009d84:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8009d86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009d88:	fab3 f383 	clz	r3, r3
 8009d8c:	b2db      	uxtb	r3, r3
 8009d8e:	461a      	mov	r2, r3
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d105      	bne.n	8009da8 <HAL_ADC_ConfigChannel+0x2b4>
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	0e9b      	lsrs	r3, r3, #26
 8009da2:	f003 031f 	and.w	r3, r3, #31
 8009da6:	e00a      	b.n	8009dbe <HAL_ADC_ConfigChannel+0x2ca>
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009dae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009db0:	fa93 f3a3 	rbit	r3, r3
 8009db4:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8009db6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009db8:	fab3 f383 	clz	r3, r3
 8009dbc:	b2db      	uxtb	r3, r3
 8009dbe:	429a      	cmp	r2, r3
 8009dc0:	d106      	bne.n	8009dd0 <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	2102      	movs	r1, #2
 8009dca:	4618      	mov	r0, r3
 8009dcc:	f7ff f99e 	bl	800910c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	2103      	movs	r1, #3
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	f7ff f984 	bl	80090e4 <LL_ADC_GetOffsetChannel>
 8009ddc:	4603      	mov	r3, r0
 8009dde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d10a      	bne.n	8009dfc <HAL_ADC_ConfigChannel+0x308>
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	2103      	movs	r1, #3
 8009dec:	4618      	mov	r0, r3
 8009dee:	f7ff f979 	bl	80090e4 <LL_ADC_GetOffsetChannel>
 8009df2:	4603      	mov	r3, r0
 8009df4:	0e9b      	lsrs	r3, r3, #26
 8009df6:	f003 021f 	and.w	r2, r3, #31
 8009dfa:	e010      	b.n	8009e1e <HAL_ADC_ConfigChannel+0x32a>
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	2103      	movs	r1, #3
 8009e02:	4618      	mov	r0, r3
 8009e04:	f7ff f96e 	bl	80090e4 <LL_ADC_GetOffsetChannel>
 8009e08:	4603      	mov	r3, r0
 8009e0a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009e0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e0e:	fa93 f3a3 	rbit	r3, r3
 8009e12:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8009e14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e16:	fab3 f383 	clz	r3, r3
 8009e1a:	b2db      	uxtb	r3, r3
 8009e1c:	461a      	mov	r2, r3
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d105      	bne.n	8009e36 <HAL_ADC_ConfigChannel+0x342>
 8009e2a:	683b      	ldr	r3, [r7, #0]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	0e9b      	lsrs	r3, r3, #26
 8009e30:	f003 031f 	and.w	r3, r3, #31
 8009e34:	e00a      	b.n	8009e4c <HAL_ADC_ConfigChannel+0x358>
 8009e36:	683b      	ldr	r3, [r7, #0]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009e3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009e3e:	fa93 f3a3 	rbit	r3, r3
 8009e42:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8009e44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e46:	fab3 f383 	clz	r3, r3
 8009e4a:	b2db      	uxtb	r3, r3
 8009e4c:	429a      	cmp	r2, r3
 8009e4e:	d106      	bne.n	8009e5e <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	2200      	movs	r2, #0
 8009e56:	2103      	movs	r1, #3
 8009e58:	4618      	mov	r0, r3
 8009e5a:	f7ff f957 	bl	800910c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	4618      	mov	r0, r3
 8009e64:	f7ff faba 	bl	80093dc <LL_ADC_IsEnabled>
 8009e68:	4603      	mov	r3, r0
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	f040 810c 	bne.w	800a088 <HAL_ADC_ConfigChannel+0x594>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	6818      	ldr	r0, [r3, #0]
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	6819      	ldr	r1, [r3, #0]
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	68db      	ldr	r3, [r3, #12]
 8009e7c:	461a      	mov	r2, r3
 8009e7e:	f7ff fa05 	bl	800928c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8009e82:	683b      	ldr	r3, [r7, #0]
 8009e84:	68db      	ldr	r3, [r3, #12]
 8009e86:	4aaf      	ldr	r2, [pc, #700]	; (800a144 <HAL_ADC_ConfigChannel+0x650>)
 8009e88:	4293      	cmp	r3, r2
 8009e8a:	f040 80fd 	bne.w	800a088 <HAL_ADC_ConfigChannel+0x594>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8009e92:	683b      	ldr	r3, [r7, #0]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d10b      	bne.n	8009eb6 <HAL_ADC_ConfigChannel+0x3c2>
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	0e9b      	lsrs	r3, r3, #26
 8009ea4:	3301      	adds	r3, #1
 8009ea6:	f003 031f 	and.w	r3, r3, #31
 8009eaa:	2b09      	cmp	r3, #9
 8009eac:	bf94      	ite	ls
 8009eae:	2301      	movls	r3, #1
 8009eb0:	2300      	movhi	r3, #0
 8009eb2:	b2db      	uxtb	r3, r3
 8009eb4:	e012      	b.n	8009edc <HAL_ADC_ConfigChannel+0x3e8>
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009ebc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ebe:	fa93 f3a3 	rbit	r3, r3
 8009ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8009ec4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ec6:	fab3 f383 	clz	r3, r3
 8009eca:	b2db      	uxtb	r3, r3
 8009ecc:	3301      	adds	r3, #1
 8009ece:	f003 031f 	and.w	r3, r3, #31
 8009ed2:	2b09      	cmp	r3, #9
 8009ed4:	bf94      	ite	ls
 8009ed6:	2301      	movls	r3, #1
 8009ed8:	2300      	movhi	r3, #0
 8009eda:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d064      	beq.n	8009faa <HAL_ADC_ConfigChannel+0x4b6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d107      	bne.n	8009efc <HAL_ADC_ConfigChannel+0x408>
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	0e9b      	lsrs	r3, r3, #26
 8009ef2:	3301      	adds	r3, #1
 8009ef4:	069b      	lsls	r3, r3, #26
 8009ef6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8009efa:	e00e      	b.n	8009f1a <HAL_ADC_ConfigChannel+0x426>
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f04:	fa93 f3a3 	rbit	r3, r3
 8009f08:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8009f0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f0c:	fab3 f383 	clz	r3, r3
 8009f10:	b2db      	uxtb	r3, r3
 8009f12:	3301      	adds	r3, #1
 8009f14:	069b      	lsls	r3, r3, #26
 8009f16:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8009f1a:	683b      	ldr	r3, [r7, #0]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d109      	bne.n	8009f3a <HAL_ADC_ConfigChannel+0x446>
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	0e9b      	lsrs	r3, r3, #26
 8009f2c:	3301      	adds	r3, #1
 8009f2e:	f003 031f 	and.w	r3, r3, #31
 8009f32:	2101      	movs	r1, #1
 8009f34:	fa01 f303 	lsl.w	r3, r1, r3
 8009f38:	e010      	b.n	8009f5c <HAL_ADC_ConfigChannel+0x468>
 8009f3a:	683b      	ldr	r3, [r7, #0]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f42:	fa93 f3a3 	rbit	r3, r3
 8009f46:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8009f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f4a:	fab3 f383 	clz	r3, r3
 8009f4e:	b2db      	uxtb	r3, r3
 8009f50:	3301      	adds	r3, #1
 8009f52:	f003 031f 	and.w	r3, r3, #31
 8009f56:	2101      	movs	r1, #1
 8009f58:	fa01 f303 	lsl.w	r3, r1, r3
 8009f5c:	ea42 0103 	orr.w	r1, r2, r3
 8009f60:	683b      	ldr	r3, [r7, #0]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d10a      	bne.n	8009f82 <HAL_ADC_ConfigChannel+0x48e>
 8009f6c:	683b      	ldr	r3, [r7, #0]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	0e9b      	lsrs	r3, r3, #26
 8009f72:	3301      	adds	r3, #1
 8009f74:	f003 021f 	and.w	r2, r3, #31
 8009f78:	4613      	mov	r3, r2
 8009f7a:	005b      	lsls	r3, r3, #1
 8009f7c:	4413      	add	r3, r2
 8009f7e:	051b      	lsls	r3, r3, #20
 8009f80:	e011      	b.n	8009fa6 <HAL_ADC_ConfigChannel+0x4b2>
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f8a:	fa93 f3a3 	rbit	r3, r3
 8009f8e:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8009f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f92:	fab3 f383 	clz	r3, r3
 8009f96:	b2db      	uxtb	r3, r3
 8009f98:	3301      	adds	r3, #1
 8009f9a:	f003 021f 	and.w	r2, r3, #31
 8009f9e:	4613      	mov	r3, r2
 8009fa0:	005b      	lsls	r3, r3, #1
 8009fa2:	4413      	add	r3, r2
 8009fa4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009fa6:	430b      	orrs	r3, r1
 8009fa8:	e069      	b.n	800a07e <HAL_ADC_ConfigChannel+0x58a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d107      	bne.n	8009fc6 <HAL_ADC_ConfigChannel+0x4d2>
 8009fb6:	683b      	ldr	r3, [r7, #0]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	0e9b      	lsrs	r3, r3, #26
 8009fbc:	3301      	adds	r3, #1
 8009fbe:	069b      	lsls	r3, r3, #26
 8009fc0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8009fc4:	e00e      	b.n	8009fe4 <HAL_ADC_ConfigChannel+0x4f0>
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009fcc:	6a3b      	ldr	r3, [r7, #32]
 8009fce:	fa93 f3a3 	rbit	r3, r3
 8009fd2:	61fb      	str	r3, [r7, #28]
  return result;
 8009fd4:	69fb      	ldr	r3, [r7, #28]
 8009fd6:	fab3 f383 	clz	r3, r3
 8009fda:	b2db      	uxtb	r3, r3
 8009fdc:	3301      	adds	r3, #1
 8009fde:	069b      	lsls	r3, r3, #26
 8009fe0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d109      	bne.n	800a004 <HAL_ADC_ConfigChannel+0x510>
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	0e9b      	lsrs	r3, r3, #26
 8009ff6:	3301      	adds	r3, #1
 8009ff8:	f003 031f 	and.w	r3, r3, #31
 8009ffc:	2101      	movs	r1, #1
 8009ffe:	fa01 f303 	lsl.w	r3, r1, r3
 800a002:	e010      	b.n	800a026 <HAL_ADC_ConfigChannel+0x532>
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a00a:	69bb      	ldr	r3, [r7, #24]
 800a00c:	fa93 f3a3 	rbit	r3, r3
 800a010:	617b      	str	r3, [r7, #20]
  return result;
 800a012:	697b      	ldr	r3, [r7, #20]
 800a014:	fab3 f383 	clz	r3, r3
 800a018:	b2db      	uxtb	r3, r3
 800a01a:	3301      	adds	r3, #1
 800a01c:	f003 031f 	and.w	r3, r3, #31
 800a020:	2101      	movs	r1, #1
 800a022:	fa01 f303 	lsl.w	r3, r1, r3
 800a026:	ea42 0103 	orr.w	r1, r2, r3
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a032:	2b00      	cmp	r3, #0
 800a034:	d10d      	bne.n	800a052 <HAL_ADC_ConfigChannel+0x55e>
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	0e9b      	lsrs	r3, r3, #26
 800a03c:	3301      	adds	r3, #1
 800a03e:	f003 021f 	and.w	r2, r3, #31
 800a042:	4613      	mov	r3, r2
 800a044:	005b      	lsls	r3, r3, #1
 800a046:	4413      	add	r3, r2
 800a048:	3b1e      	subs	r3, #30
 800a04a:	051b      	lsls	r3, r3, #20
 800a04c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a050:	e014      	b.n	800a07c <HAL_ADC_ConfigChannel+0x588>
 800a052:	683b      	ldr	r3, [r7, #0]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a058:	693b      	ldr	r3, [r7, #16]
 800a05a:	fa93 f3a3 	rbit	r3, r3
 800a05e:	60fb      	str	r3, [r7, #12]
  return result;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	fab3 f383 	clz	r3, r3
 800a066:	b2db      	uxtb	r3, r3
 800a068:	3301      	adds	r3, #1
 800a06a:	f003 021f 	and.w	r2, r3, #31
 800a06e:	4613      	mov	r3, r2
 800a070:	005b      	lsls	r3, r3, #1
 800a072:	4413      	add	r3, r2
 800a074:	3b1e      	subs	r3, #30
 800a076:	051b      	lsls	r3, r3, #20
 800a078:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800a07c:	430b      	orrs	r3, r1
 800a07e:	683a      	ldr	r2, [r7, #0]
 800a080:	6892      	ldr	r2, [r2, #8]
 800a082:	4619      	mov	r1, r3
 800a084:	f7ff f8d9 	bl	800923a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	681a      	ldr	r2, [r3, #0]
 800a08c:	4b2e      	ldr	r3, [pc, #184]	; (800a148 <HAL_ADC_ConfigChannel+0x654>)
 800a08e:	4013      	ands	r3, r2
 800a090:	2b00      	cmp	r3, #0
 800a092:	f000 80c9 	beq.w	800a228 <HAL_ADC_ConfigChannel+0x734>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a09e:	d004      	beq.n	800a0aa <HAL_ADC_ConfigChannel+0x5b6>
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	4a29      	ldr	r2, [pc, #164]	; (800a14c <HAL_ADC_ConfigChannel+0x658>)
 800a0a6:	4293      	cmp	r3, r2
 800a0a8:	d101      	bne.n	800a0ae <HAL_ADC_ConfigChannel+0x5ba>
 800a0aa:	4b29      	ldr	r3, [pc, #164]	; (800a150 <HAL_ADC_ConfigChannel+0x65c>)
 800a0ac:	e000      	b.n	800a0b0 <HAL_ADC_ConfigChannel+0x5bc>
 800a0ae:	4b29      	ldr	r3, [pc, #164]	; (800a154 <HAL_ADC_ConfigChannel+0x660>)
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	f7fe ffe7 	bl	8009084 <LL_ADC_GetCommonPathInternalCh>
 800a0b6:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	4a26      	ldr	r2, [pc, #152]	; (800a158 <HAL_ADC_ConfigChannel+0x664>)
 800a0c0:	4293      	cmp	r3, r2
 800a0c2:	d004      	beq.n	800a0ce <HAL_ADC_ConfigChannel+0x5da>
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	4a24      	ldr	r2, [pc, #144]	; (800a15c <HAL_ADC_ConfigChannel+0x668>)
 800a0ca:	4293      	cmp	r3, r2
 800a0cc:	d14e      	bne.n	800a16c <HAL_ADC_ConfigChannel+0x678>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800a0ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a0d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d148      	bne.n	800a16c <HAL_ADC_ConfigChannel+0x678>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a0e2:	d005      	beq.n	800a0f0 <HAL_ADC_ConfigChannel+0x5fc>
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	4a1d      	ldr	r2, [pc, #116]	; (800a160 <HAL_ADC_ConfigChannel+0x66c>)
 800a0ea:	4293      	cmp	r3, r2
 800a0ec:	f040 8099 	bne.w	800a222 <HAL_ADC_ConfigChannel+0x72e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a0f8:	d004      	beq.n	800a104 <HAL_ADC_ConfigChannel+0x610>
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	4a13      	ldr	r2, [pc, #76]	; (800a14c <HAL_ADC_ConfigChannel+0x658>)
 800a100:	4293      	cmp	r3, r2
 800a102:	d101      	bne.n	800a108 <HAL_ADC_ConfigChannel+0x614>
 800a104:	4a12      	ldr	r2, [pc, #72]	; (800a150 <HAL_ADC_ConfigChannel+0x65c>)
 800a106:	e000      	b.n	800a10a <HAL_ADC_ConfigChannel+0x616>
 800a108:	4a12      	ldr	r2, [pc, #72]	; (800a154 <HAL_ADC_ConfigChannel+0x660>)
 800a10a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a10e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a112:	4619      	mov	r1, r3
 800a114:	4610      	mov	r0, r2
 800a116:	f7fe ffa2 	bl	800905e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800a11a:	4b12      	ldr	r3, [pc, #72]	; (800a164 <HAL_ADC_ConfigChannel+0x670>)
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	099b      	lsrs	r3, r3, #6
 800a120:	4a11      	ldr	r2, [pc, #68]	; (800a168 <HAL_ADC_ConfigChannel+0x674>)
 800a122:	fba2 2303 	umull	r2, r3, r2, r3
 800a126:	099a      	lsrs	r2, r3, #6
 800a128:	4613      	mov	r3, r2
 800a12a:	005b      	lsls	r3, r3, #1
 800a12c:	4413      	add	r3, r2
 800a12e:	009b      	lsls	r3, r3, #2
 800a130:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800a132:	e002      	b.n	800a13a <HAL_ADC_ConfigChannel+0x646>
          {
            wait_loop_index--;
 800a134:	68bb      	ldr	r3, [r7, #8]
 800a136:	3b01      	subs	r3, #1
 800a138:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800a13a:	68bb      	ldr	r3, [r7, #8]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d1f9      	bne.n	800a134 <HAL_ADC_ConfigChannel+0x640>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800a140:	e06f      	b.n	800a222 <HAL_ADC_ConfigChannel+0x72e>
 800a142:	bf00      	nop
 800a144:	407f0000 	.word	0x407f0000
 800a148:	80080000 	.word	0x80080000
 800a14c:	50000100 	.word	0x50000100
 800a150:	50000300 	.word	0x50000300
 800a154:	50000700 	.word	0x50000700
 800a158:	c3210000 	.word	0xc3210000
 800a15c:	90c00010 	.word	0x90c00010
 800a160:	50000600 	.word	0x50000600
 800a164:	20000eb0 	.word	0x20000eb0
 800a168:	053e2d63 	.word	0x053e2d63
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800a16c:	683b      	ldr	r3, [r7, #0]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	4a32      	ldr	r2, [pc, #200]	; (800a23c <HAL_ADC_ConfigChannel+0x748>)
 800a172:	4293      	cmp	r3, r2
 800a174:	d125      	bne.n	800a1c2 <HAL_ADC_ConfigChannel+0x6ce>
 800a176:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a17a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d11f      	bne.n	800a1c2 <HAL_ADC_ConfigChannel+0x6ce>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	4a2e      	ldr	r2, [pc, #184]	; (800a240 <HAL_ADC_ConfigChannel+0x74c>)
 800a188:	4293      	cmp	r3, r2
 800a18a:	d104      	bne.n	800a196 <HAL_ADC_ConfigChannel+0x6a2>
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	4a2c      	ldr	r2, [pc, #176]	; (800a244 <HAL_ADC_ConfigChannel+0x750>)
 800a192:	4293      	cmp	r3, r2
 800a194:	d047      	beq.n	800a226 <HAL_ADC_ConfigChannel+0x732>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a19e:	d004      	beq.n	800a1aa <HAL_ADC_ConfigChannel+0x6b6>
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	4a26      	ldr	r2, [pc, #152]	; (800a240 <HAL_ADC_ConfigChannel+0x74c>)
 800a1a6:	4293      	cmp	r3, r2
 800a1a8:	d101      	bne.n	800a1ae <HAL_ADC_ConfigChannel+0x6ba>
 800a1aa:	4a27      	ldr	r2, [pc, #156]	; (800a248 <HAL_ADC_ConfigChannel+0x754>)
 800a1ac:	e000      	b.n	800a1b0 <HAL_ADC_ConfigChannel+0x6bc>
 800a1ae:	4a27      	ldr	r2, [pc, #156]	; (800a24c <HAL_ADC_ConfigChannel+0x758>)
 800a1b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a1b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a1b8:	4619      	mov	r1, r3
 800a1ba:	4610      	mov	r0, r2
 800a1bc:	f7fe ff4f 	bl	800905e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800a1c0:	e031      	b.n	800a226 <HAL_ADC_ConfigChannel+0x732>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	4a22      	ldr	r2, [pc, #136]	; (800a250 <HAL_ADC_ConfigChannel+0x75c>)
 800a1c8:	4293      	cmp	r3, r2
 800a1ca:	d12d      	bne.n	800a228 <HAL_ADC_ConfigChannel+0x734>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800a1cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a1d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d127      	bne.n	800a228 <HAL_ADC_ConfigChannel+0x734>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	4a18      	ldr	r2, [pc, #96]	; (800a240 <HAL_ADC_ConfigChannel+0x74c>)
 800a1de:	4293      	cmp	r3, r2
 800a1e0:	d022      	beq.n	800a228 <HAL_ADC_ConfigChannel+0x734>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a1ea:	d004      	beq.n	800a1f6 <HAL_ADC_ConfigChannel+0x702>
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	4a13      	ldr	r2, [pc, #76]	; (800a240 <HAL_ADC_ConfigChannel+0x74c>)
 800a1f2:	4293      	cmp	r3, r2
 800a1f4:	d101      	bne.n	800a1fa <HAL_ADC_ConfigChannel+0x706>
 800a1f6:	4a14      	ldr	r2, [pc, #80]	; (800a248 <HAL_ADC_ConfigChannel+0x754>)
 800a1f8:	e000      	b.n	800a1fc <HAL_ADC_ConfigChannel+0x708>
 800a1fa:	4a14      	ldr	r2, [pc, #80]	; (800a24c <HAL_ADC_ConfigChannel+0x758>)
 800a1fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a200:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a204:	4619      	mov	r1, r3
 800a206:	4610      	mov	r0, r2
 800a208:	f7fe ff29 	bl	800905e <LL_ADC_SetCommonPathInternalCh>
 800a20c:	e00c      	b.n	800a228 <HAL_ADC_ConfigChannel+0x734>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a212:	f043 0220 	orr.w	r2, r3, #32
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800a21a:	2301      	movs	r3, #1
 800a21c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800a220:	e002      	b.n	800a228 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800a222:	bf00      	nop
 800a224:	e000      	b.n	800a228 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800a226:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2200      	movs	r2, #0
 800a22c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800a230:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 800a234:	4618      	mov	r0, r3
 800a236:	3798      	adds	r7, #152	; 0x98
 800a238:	46bd      	mov	sp, r7
 800a23a:	bd80      	pop	{r7, pc}
 800a23c:	c7520000 	.word	0xc7520000
 800a240:	50000100 	.word	0x50000100
 800a244:	50000500 	.word	0x50000500
 800a248:	50000300 	.word	0x50000300
 800a24c:	50000700 	.word	0x50000700
 800a250:	cb840000 	.word	0xcb840000

0800a254 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b088      	sub	sp, #32
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
 800a25c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800a25e:	2300      	movs	r3, #0
 800a260:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	4618      	mov	r0, r3
 800a26c:	f7ff f904 	bl	8009478 <LL_ADC_REG_IsConversionOngoing>
 800a270:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	4618      	mov	r0, r3
 800a278:	f7ff f925 	bl	80094c6 <LL_ADC_INJ_IsConversionOngoing>
 800a27c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800a27e:	693b      	ldr	r3, [r7, #16]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d103      	bne.n	800a28c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	2b00      	cmp	r3, #0
 800a288:	f000 8090 	beq.w	800a3ac <ADC_ConversionStop+0x158>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	68db      	ldr	r3, [r3, #12]
 800a292:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a296:	2b00      	cmp	r3, #0
 800a298:	d02a      	beq.n	800a2f0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	7f5b      	ldrb	r3, [r3, #29]
 800a29e:	2b01      	cmp	r3, #1
 800a2a0:	d126      	bne.n	800a2f0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	7f1b      	ldrb	r3, [r3, #28]
 800a2a6:	2b01      	cmp	r3, #1
 800a2a8:	d122      	bne.n	800a2f0 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800a2aa:	2301      	movs	r3, #1
 800a2ac:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800a2ae:	e014      	b.n	800a2da <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800a2b0:	69fb      	ldr	r3, [r7, #28]
 800a2b2:	4a41      	ldr	r2, [pc, #260]	; (800a3b8 <ADC_ConversionStop+0x164>)
 800a2b4:	4293      	cmp	r3, r2
 800a2b6:	d90d      	bls.n	800a2d4 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a2bc:	f043 0210 	orr.w	r2, r3, #16
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a2c8:	f043 0201 	orr.w	r2, r3, #1
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800a2d0:	2301      	movs	r3, #1
 800a2d2:	e06c      	b.n	800a3ae <ADC_ConversionStop+0x15a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800a2d4:	69fb      	ldr	r3, [r7, #28]
 800a2d6:	3301      	adds	r3, #1
 800a2d8:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2e4:	2b40      	cmp	r3, #64	; 0x40
 800a2e6:	d1e3      	bne.n	800a2b0 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	2240      	movs	r2, #64	; 0x40
 800a2ee:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800a2f0:	69bb      	ldr	r3, [r7, #24]
 800a2f2:	2b02      	cmp	r3, #2
 800a2f4:	d014      	beq.n	800a320 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	f7ff f8bc 	bl	8009478 <LL_ADC_REG_IsConversionOngoing>
 800a300:	4603      	mov	r3, r0
 800a302:	2b00      	cmp	r3, #0
 800a304:	d00c      	beq.n	800a320 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	4618      	mov	r0, r3
 800a30c:	f7ff f879 	bl	8009402 <LL_ADC_IsDisableOngoing>
 800a310:	4603      	mov	r3, r0
 800a312:	2b00      	cmp	r3, #0
 800a314:	d104      	bne.n	800a320 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	4618      	mov	r0, r3
 800a31c:	f7ff f898 	bl	8009450 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800a320:	69bb      	ldr	r3, [r7, #24]
 800a322:	2b01      	cmp	r3, #1
 800a324:	d014      	beq.n	800a350 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	4618      	mov	r0, r3
 800a32c:	f7ff f8cb 	bl	80094c6 <LL_ADC_INJ_IsConversionOngoing>
 800a330:	4603      	mov	r3, r0
 800a332:	2b00      	cmp	r3, #0
 800a334:	d00c      	beq.n	800a350 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	4618      	mov	r0, r3
 800a33c:	f7ff f861 	bl	8009402 <LL_ADC_IsDisableOngoing>
 800a340:	4603      	mov	r3, r0
 800a342:	2b00      	cmp	r3, #0
 800a344:	d104      	bne.n	800a350 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	4618      	mov	r0, r3
 800a34c:	f7ff f8a7 	bl	800949e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800a350:	69bb      	ldr	r3, [r7, #24]
 800a352:	2b02      	cmp	r3, #2
 800a354:	d004      	beq.n	800a360 <ADC_ConversionStop+0x10c>
 800a356:	2b03      	cmp	r3, #3
 800a358:	d105      	bne.n	800a366 <ADC_ConversionStop+0x112>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800a35a:	230c      	movs	r3, #12
 800a35c:	617b      	str	r3, [r7, #20]
        break;
 800a35e:	e005      	b.n	800a36c <ADC_ConversionStop+0x118>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800a360:	2308      	movs	r3, #8
 800a362:	617b      	str	r3, [r7, #20]
        break;
 800a364:	e002      	b.n	800a36c <ADC_ConversionStop+0x118>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800a366:	2304      	movs	r3, #4
 800a368:	617b      	str	r3, [r7, #20]
        break;
 800a36a:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800a36c:	f7fe fe36 	bl	8008fdc <HAL_GetTick>
 800a370:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800a372:	e014      	b.n	800a39e <ADC_ConversionStop+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800a374:	f7fe fe32 	bl	8008fdc <HAL_GetTick>
 800a378:	4602      	mov	r2, r0
 800a37a:	68bb      	ldr	r3, [r7, #8]
 800a37c:	1ad3      	subs	r3, r2, r3
 800a37e:	2b05      	cmp	r3, #5
 800a380:	d90d      	bls.n	800a39e <ADC_ConversionStop+0x14a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a386:	f043 0210 	orr.w	r2, r3, #16
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a392:	f043 0201 	orr.w	r2, r3, #1
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800a39a:	2301      	movs	r3, #1
 800a39c:	e007      	b.n	800a3ae <ADC_ConversionStop+0x15a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	689a      	ldr	r2, [r3, #8]
 800a3a4:	697b      	ldr	r3, [r7, #20]
 800a3a6:	4013      	ands	r3, r2
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d1e3      	bne.n	800a374 <ADC_ConversionStop+0x120>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800a3ac:	2300      	movs	r3, #0
}
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	3720      	adds	r7, #32
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	bd80      	pop	{r7, pc}
 800a3b6:	bf00      	nop
 800a3b8:	a33fffff 	.word	0xa33fffff

0800a3bc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b084      	sub	sp, #16
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	f7ff f807 	bl	80093dc <LL_ADC_IsEnabled>
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d146      	bne.n	800a462 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	689a      	ldr	r2, [r3, #8]
 800a3da:	4b24      	ldr	r3, [pc, #144]	; (800a46c <ADC_Enable+0xb0>)
 800a3dc:	4013      	ands	r3, r2
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d00d      	beq.n	800a3fe <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a3e6:	f043 0210 	orr.w	r2, r3, #16
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a3f2:	f043 0201 	orr.w	r2, r3, #1
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800a3fa:	2301      	movs	r3, #1
 800a3fc:	e032      	b.n	800a464 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	4618      	mov	r0, r3
 800a404:	f7fe ffc2 	bl	800938c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800a408:	f7fe fde8 	bl	8008fdc <HAL_GetTick>
 800a40c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800a40e:	e021      	b.n	800a454 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	4618      	mov	r0, r3
 800a416:	f7fe ffe1 	bl	80093dc <LL_ADC_IsEnabled>
 800a41a:	4603      	mov	r3, r0
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d104      	bne.n	800a42a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	4618      	mov	r0, r3
 800a426:	f7fe ffb1 	bl	800938c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800a42a:	f7fe fdd7 	bl	8008fdc <HAL_GetTick>
 800a42e:	4602      	mov	r2, r0
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	1ad3      	subs	r3, r2, r3
 800a434:	2b02      	cmp	r3, #2
 800a436:	d90d      	bls.n	800a454 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a43c:	f043 0210 	orr.w	r2, r3, #16
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a448:	f043 0201 	orr.w	r2, r3, #1
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800a450:	2301      	movs	r3, #1
 800a452:	e007      	b.n	800a464 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	f003 0301 	and.w	r3, r3, #1
 800a45e:	2b01      	cmp	r3, #1
 800a460:	d1d6      	bne.n	800a410 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800a462:	2300      	movs	r3, #0
}
 800a464:	4618      	mov	r0, r3
 800a466:	3710      	adds	r7, #16
 800a468:	46bd      	mov	sp, r7
 800a46a:	bd80      	pop	{r7, pc}
 800a46c:	8000003f 	.word	0x8000003f

0800a470 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b084      	sub	sp, #16
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	4618      	mov	r0, r3
 800a47e:	f7fe ffc0 	bl	8009402 <LL_ADC_IsDisableOngoing>
 800a482:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	4618      	mov	r0, r3
 800a48a:	f7fe ffa7 	bl	80093dc <LL_ADC_IsEnabled>
 800a48e:	4603      	mov	r3, r0
 800a490:	2b00      	cmp	r3, #0
 800a492:	d040      	beq.n	800a516 <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d13d      	bne.n	800a516 <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	689b      	ldr	r3, [r3, #8]
 800a4a0:	f003 030d 	and.w	r3, r3, #13
 800a4a4:	2b01      	cmp	r3, #1
 800a4a6:	d10c      	bne.n	800a4c2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	f7fe ff81 	bl	80093b4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	2203      	movs	r2, #3
 800a4b8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800a4ba:	f7fe fd8f 	bl	8008fdc <HAL_GetTick>
 800a4be:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800a4c0:	e022      	b.n	800a508 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a4c6:	f043 0210 	orr.w	r2, r3, #16
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a4d2:	f043 0201 	orr.w	r2, r3, #1
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 800a4da:	2301      	movs	r3, #1
 800a4dc:	e01c      	b.n	800a518 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800a4de:	f7fe fd7d 	bl	8008fdc <HAL_GetTick>
 800a4e2:	4602      	mov	r2, r0
 800a4e4:	68bb      	ldr	r3, [r7, #8]
 800a4e6:	1ad3      	subs	r3, r2, r3
 800a4e8:	2b02      	cmp	r3, #2
 800a4ea:	d90d      	bls.n	800a508 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a4f0:	f043 0210 	orr.w	r2, r3, #16
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a4fc:	f043 0201 	orr.w	r2, r3, #1
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800a504:	2301      	movs	r3, #1
 800a506:	e007      	b.n	800a518 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	689b      	ldr	r3, [r3, #8]
 800a50e:	f003 0301 	and.w	r3, r3, #1
 800a512:	2b00      	cmp	r3, #0
 800a514:	d1e3      	bne.n	800a4de <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800a516:	2300      	movs	r3, #0
}
 800a518:	4618      	mov	r0, r3
 800a51a:	3710      	adds	r7, #16
 800a51c:	46bd      	mov	sp, r7
 800a51e:	bd80      	pop	{r7, pc}

0800a520 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b084      	sub	sp, #16
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a52c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a532:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a536:	2b00      	cmp	r3, #0
 800a538:	d14b      	bne.n	800a5d2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a53e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	f003 0308 	and.w	r3, r3, #8
 800a550:	2b00      	cmp	r3, #0
 800a552:	d021      	beq.n	800a598 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	4618      	mov	r0, r3
 800a55a:	f7fe fe32 	bl	80091c2 <LL_ADC_REG_IsTriggerSourceSWStart>
 800a55e:	4603      	mov	r3, r0
 800a560:	2b00      	cmp	r3, #0
 800a562:	d032      	beq.n	800a5ca <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	68db      	ldr	r3, [r3, #12]
 800a56a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d12b      	bne.n	800a5ca <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a576:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a582:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a586:	2b00      	cmp	r3, #0
 800a588:	d11f      	bne.n	800a5ca <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a58e:	f043 0201 	orr.w	r2, r3, #1
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	65da      	str	r2, [r3, #92]	; 0x5c
 800a596:	e018      	b.n	800a5ca <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	68db      	ldr	r3, [r3, #12]
 800a59e:	f003 0302 	and.w	r3, r3, #2
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d111      	bne.n	800a5ca <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a5aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a5b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d105      	bne.n	800a5ca <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a5c2:	f043 0201 	orr.w	r2, r3, #1
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800a5ca:	68f8      	ldr	r0, [r7, #12]
 800a5cc:	f7fb ff9c 	bl	8006508 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800a5d0:	e00e      	b.n	800a5f0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a5d6:	f003 0310 	and.w	r3, r3, #16
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d003      	beq.n	800a5e6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800a5de:	68f8      	ldr	r0, [r7, #12]
 800a5e0:	f7ff fa7d 	bl	8009ade <HAL_ADC_ErrorCallback>
}
 800a5e4:	e004      	b.n	800a5f0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5ec:	6878      	ldr	r0, [r7, #4]
 800a5ee:	4798      	blx	r3
}
 800a5f0:	bf00      	nop
 800a5f2:	3710      	adds	r7, #16
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	bd80      	pop	{r7, pc}

0800a5f8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b084      	sub	sp, #16
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a604:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800a606:	68f8      	ldr	r0, [r7, #12]
 800a608:	f7ff fa5f 	bl	8009aca <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a60c:	bf00      	nop
 800a60e:	3710      	adds	r7, #16
 800a610:	46bd      	mov	sp, r7
 800a612:	bd80      	pop	{r7, pc}

0800a614 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b084      	sub	sp, #16
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a620:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a626:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a632:	f043 0204 	orr.w	r2, r3, #4
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800a63a:	68f8      	ldr	r0, [r7, #12]
 800a63c:	f7ff fa4f 	bl	8009ade <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a640:	bf00      	nop
 800a642:	3710      	adds	r7, #16
 800a644:	46bd      	mov	sp, r7
 800a646:	bd80      	pop	{r7, pc}

0800a648 <LL_ADC_IsEnabled>:
{
 800a648:	b480      	push	{r7}
 800a64a:	b083      	sub	sp, #12
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	689b      	ldr	r3, [r3, #8]
 800a654:	f003 0301 	and.w	r3, r3, #1
 800a658:	2b01      	cmp	r3, #1
 800a65a:	d101      	bne.n	800a660 <LL_ADC_IsEnabled+0x18>
 800a65c:	2301      	movs	r3, #1
 800a65e:	e000      	b.n	800a662 <LL_ADC_IsEnabled+0x1a>
 800a660:	2300      	movs	r3, #0
}
 800a662:	4618      	mov	r0, r3
 800a664:	370c      	adds	r7, #12
 800a666:	46bd      	mov	sp, r7
 800a668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66c:	4770      	bx	lr

0800a66e <LL_ADC_REG_IsConversionOngoing>:
{
 800a66e:	b480      	push	{r7}
 800a670:	b083      	sub	sp, #12
 800a672:	af00      	add	r7, sp, #0
 800a674:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	689b      	ldr	r3, [r3, #8]
 800a67a:	f003 0304 	and.w	r3, r3, #4
 800a67e:	2b04      	cmp	r3, #4
 800a680:	d101      	bne.n	800a686 <LL_ADC_REG_IsConversionOngoing+0x18>
 800a682:	2301      	movs	r3, #1
 800a684:	e000      	b.n	800a688 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800a686:	2300      	movs	r3, #0
}
 800a688:	4618      	mov	r0, r3
 800a68a:	370c      	adds	r7, #12
 800a68c:	46bd      	mov	sp, r7
 800a68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a692:	4770      	bx	lr

0800a694 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800a694:	b590      	push	{r4, r7, lr}
 800a696:	b0a1      	sub	sp, #132	; 0x84
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
 800a69c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a69e:	2300      	movs	r3, #0
 800a6a0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800a6aa:	2b01      	cmp	r3, #1
 800a6ac:	d101      	bne.n	800a6b2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800a6ae:	2302      	movs	r3, #2
 800a6b0:	e0e3      	b.n	800a87a <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	2201      	movs	r2, #1
 800a6b6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a6c2:	d102      	bne.n	800a6ca <HAL_ADCEx_MultiModeConfigChannel+0x36>
 800a6c4:	4b6f      	ldr	r3, [pc, #444]	; (800a884 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800a6c6:	60bb      	str	r3, [r7, #8]
 800a6c8:	e009      	b.n	800a6de <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	4a6e      	ldr	r2, [pc, #440]	; (800a888 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 800a6d0:	4293      	cmp	r3, r2
 800a6d2:	d102      	bne.n	800a6da <HAL_ADCEx_MultiModeConfigChannel+0x46>
 800a6d4:	4b6d      	ldr	r3, [pc, #436]	; (800a88c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800a6d6:	60bb      	str	r3, [r7, #8]
 800a6d8:	e001      	b.n	800a6de <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 800a6da:	2300      	movs	r3, #0
 800a6dc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800a6de:	68bb      	ldr	r3, [r7, #8]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d10b      	bne.n	800a6fc <HAL_ADCEx_MultiModeConfigChannel+0x68>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a6e8:	f043 0220 	orr.w	r2, r3, #32
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 800a6f8:	2301      	movs	r3, #1
 800a6fa:	e0be      	b.n	800a87a <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800a6fc:	68bb      	ldr	r3, [r7, #8]
 800a6fe:	4618      	mov	r0, r3
 800a700:	f7ff ffb5 	bl	800a66e <LL_ADC_REG_IsConversionOngoing>
 800a704:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	4618      	mov	r0, r3
 800a70c:	f7ff ffaf 	bl	800a66e <LL_ADC_REG_IsConversionOngoing>
 800a710:	4603      	mov	r3, r0
 800a712:	2b00      	cmp	r3, #0
 800a714:	f040 80a0 	bne.w	800a858 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800a718:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	f040 809c 	bne.w	800a858 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a728:	d004      	beq.n	800a734 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	4a55      	ldr	r2, [pc, #340]	; (800a884 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800a730:	4293      	cmp	r3, r2
 800a732:	d101      	bne.n	800a738 <HAL_ADCEx_MultiModeConfigChannel+0xa4>
 800a734:	4b56      	ldr	r3, [pc, #344]	; (800a890 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800a736:	e000      	b.n	800a73a <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 800a738:	4b56      	ldr	r3, [pc, #344]	; (800a894 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800a73a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d04b      	beq.n	800a7dc <HAL_ADCEx_MultiModeConfigChannel+0x148>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800a744:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a746:	689b      	ldr	r3, [r3, #8]
 800a748:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a74c:	683b      	ldr	r3, [r7, #0]
 800a74e:	6859      	ldr	r1, [r3, #4]
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a756:	035b      	lsls	r3, r3, #13
 800a758:	430b      	orrs	r3, r1
 800a75a:	431a      	orrs	r2, r3
 800a75c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a75e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a768:	d004      	beq.n	800a774 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	4a45      	ldr	r2, [pc, #276]	; (800a884 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800a770:	4293      	cmp	r3, r2
 800a772:	d10f      	bne.n	800a794 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 800a774:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800a778:	f7ff ff66 	bl	800a648 <LL_ADC_IsEnabled>
 800a77c:	4604      	mov	r4, r0
 800a77e:	4841      	ldr	r0, [pc, #260]	; (800a884 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800a780:	f7ff ff62 	bl	800a648 <LL_ADC_IsEnabled>
 800a784:	4603      	mov	r3, r0
 800a786:	4323      	orrs	r3, r4
 800a788:	2b00      	cmp	r3, #0
 800a78a:	bf0c      	ite	eq
 800a78c:	2301      	moveq	r3, #1
 800a78e:	2300      	movne	r3, #0
 800a790:	b2db      	uxtb	r3, r3
 800a792:	e012      	b.n	800a7ba <HAL_ADCEx_MultiModeConfigChannel+0x126>
 800a794:	483c      	ldr	r0, [pc, #240]	; (800a888 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 800a796:	f7ff ff57 	bl	800a648 <LL_ADC_IsEnabled>
 800a79a:	4604      	mov	r4, r0
 800a79c:	483b      	ldr	r0, [pc, #236]	; (800a88c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800a79e:	f7ff ff53 	bl	800a648 <LL_ADC_IsEnabled>
 800a7a2:	4603      	mov	r3, r0
 800a7a4:	431c      	orrs	r4, r3
 800a7a6:	483c      	ldr	r0, [pc, #240]	; (800a898 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800a7a8:	f7ff ff4e 	bl	800a648 <LL_ADC_IsEnabled>
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	4323      	orrs	r3, r4
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	bf0c      	ite	eq
 800a7b4:	2301      	moveq	r3, #1
 800a7b6:	2300      	movne	r3, #0
 800a7b8:	b2db      	uxtb	r3, r3
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d056      	beq.n	800a86c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800a7be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a7c0:	689b      	ldr	r3, [r3, #8]
 800a7c2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800a7c6:	f023 030f 	bic.w	r3, r3, #15
 800a7ca:	683a      	ldr	r2, [r7, #0]
 800a7cc:	6811      	ldr	r1, [r2, #0]
 800a7ce:	683a      	ldr	r2, [r7, #0]
 800a7d0:	6892      	ldr	r2, [r2, #8]
 800a7d2:	430a      	orrs	r2, r1
 800a7d4:	431a      	orrs	r2, r3
 800a7d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a7d8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800a7da:	e047      	b.n	800a86c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800a7dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a7de:	689b      	ldr	r3, [r3, #8]
 800a7e0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a7e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a7e6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a7f0:	d004      	beq.n	800a7fc <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	4a23      	ldr	r2, [pc, #140]	; (800a884 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800a7f8:	4293      	cmp	r3, r2
 800a7fa:	d10f      	bne.n	800a81c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 800a7fc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800a800:	f7ff ff22 	bl	800a648 <LL_ADC_IsEnabled>
 800a804:	4604      	mov	r4, r0
 800a806:	481f      	ldr	r0, [pc, #124]	; (800a884 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800a808:	f7ff ff1e 	bl	800a648 <LL_ADC_IsEnabled>
 800a80c:	4603      	mov	r3, r0
 800a80e:	4323      	orrs	r3, r4
 800a810:	2b00      	cmp	r3, #0
 800a812:	bf0c      	ite	eq
 800a814:	2301      	moveq	r3, #1
 800a816:	2300      	movne	r3, #0
 800a818:	b2db      	uxtb	r3, r3
 800a81a:	e012      	b.n	800a842 <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
 800a81c:	481a      	ldr	r0, [pc, #104]	; (800a888 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 800a81e:	f7ff ff13 	bl	800a648 <LL_ADC_IsEnabled>
 800a822:	4604      	mov	r4, r0
 800a824:	4819      	ldr	r0, [pc, #100]	; (800a88c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800a826:	f7ff ff0f 	bl	800a648 <LL_ADC_IsEnabled>
 800a82a:	4603      	mov	r3, r0
 800a82c:	431c      	orrs	r4, r3
 800a82e:	481a      	ldr	r0, [pc, #104]	; (800a898 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800a830:	f7ff ff0a 	bl	800a648 <LL_ADC_IsEnabled>
 800a834:	4603      	mov	r3, r0
 800a836:	4323      	orrs	r3, r4
 800a838:	2b00      	cmp	r3, #0
 800a83a:	bf0c      	ite	eq
 800a83c:	2301      	moveq	r3, #1
 800a83e:	2300      	movne	r3, #0
 800a840:	b2db      	uxtb	r3, r3
 800a842:	2b00      	cmp	r3, #0
 800a844:	d012      	beq.n	800a86c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800a846:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a848:	689b      	ldr	r3, [r3, #8]
 800a84a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800a84e:	f023 030f 	bic.w	r3, r3, #15
 800a852:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a854:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800a856:	e009      	b.n	800a86c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a85c:	f043 0220 	orr.w	r2, r3, #32
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800a864:	2301      	movs	r3, #1
 800a866:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800a86a:	e000      	b.n	800a86e <HAL_ADCEx_MultiModeConfigChannel+0x1da>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800a86c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	2200      	movs	r2, #0
 800a872:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800a876:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800a87a:	4618      	mov	r0, r3
 800a87c:	3784      	adds	r7, #132	; 0x84
 800a87e:	46bd      	mov	sp, r7
 800a880:	bd90      	pop	{r4, r7, pc}
 800a882:	bf00      	nop
 800a884:	50000100 	.word	0x50000100
 800a888:	50000400 	.word	0x50000400
 800a88c:	50000500 	.word	0x50000500
 800a890:	50000300 	.word	0x50000300
 800a894:	50000700 	.word	0x50000700
 800a898:	50000600 	.word	0x50000600

0800a89c <LL_EXTI_EnableIT_0_31>:
{
 800a89c:	b480      	push	{r7}
 800a89e:	b083      	sub	sp, #12
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800a8a4:	4b05      	ldr	r3, [pc, #20]	; (800a8bc <LL_EXTI_EnableIT_0_31+0x20>)
 800a8a6:	681a      	ldr	r2, [r3, #0]
 800a8a8:	4904      	ldr	r1, [pc, #16]	; (800a8bc <LL_EXTI_EnableIT_0_31+0x20>)
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	4313      	orrs	r3, r2
 800a8ae:	600b      	str	r3, [r1, #0]
}
 800a8b0:	bf00      	nop
 800a8b2:	370c      	adds	r7, #12
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ba:	4770      	bx	lr
 800a8bc:	40010400 	.word	0x40010400

0800a8c0 <LL_EXTI_EnableIT_32_63>:
{
 800a8c0:	b480      	push	{r7}
 800a8c2:	b083      	sub	sp, #12
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800a8c8:	4b05      	ldr	r3, [pc, #20]	; (800a8e0 <LL_EXTI_EnableIT_32_63+0x20>)
 800a8ca:	6a1a      	ldr	r2, [r3, #32]
 800a8cc:	4904      	ldr	r1, [pc, #16]	; (800a8e0 <LL_EXTI_EnableIT_32_63+0x20>)
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	4313      	orrs	r3, r2
 800a8d2:	620b      	str	r3, [r1, #32]
}
 800a8d4:	bf00      	nop
 800a8d6:	370c      	adds	r7, #12
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8de:	4770      	bx	lr
 800a8e0:	40010400 	.word	0x40010400

0800a8e4 <LL_EXTI_DisableIT_0_31>:
{
 800a8e4:	b480      	push	{r7}
 800a8e6:	b083      	sub	sp, #12
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800a8ec:	4b06      	ldr	r3, [pc, #24]	; (800a908 <LL_EXTI_DisableIT_0_31+0x24>)
 800a8ee:	681a      	ldr	r2, [r3, #0]
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	43db      	mvns	r3, r3
 800a8f4:	4904      	ldr	r1, [pc, #16]	; (800a908 <LL_EXTI_DisableIT_0_31+0x24>)
 800a8f6:	4013      	ands	r3, r2
 800a8f8:	600b      	str	r3, [r1, #0]
}
 800a8fa:	bf00      	nop
 800a8fc:	370c      	adds	r7, #12
 800a8fe:	46bd      	mov	sp, r7
 800a900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a904:	4770      	bx	lr
 800a906:	bf00      	nop
 800a908:	40010400 	.word	0x40010400

0800a90c <LL_EXTI_DisableIT_32_63>:
{
 800a90c:	b480      	push	{r7}
 800a90e:	b083      	sub	sp, #12
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 800a914:	4b06      	ldr	r3, [pc, #24]	; (800a930 <LL_EXTI_DisableIT_32_63+0x24>)
 800a916:	6a1a      	ldr	r2, [r3, #32]
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	43db      	mvns	r3, r3
 800a91c:	4904      	ldr	r1, [pc, #16]	; (800a930 <LL_EXTI_DisableIT_32_63+0x24>)
 800a91e:	4013      	ands	r3, r2
 800a920:	620b      	str	r3, [r1, #32]
}
 800a922:	bf00      	nop
 800a924:	370c      	adds	r7, #12
 800a926:	46bd      	mov	sp, r7
 800a928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92c:	4770      	bx	lr
 800a92e:	bf00      	nop
 800a930:	40010400 	.word	0x40010400

0800a934 <LL_EXTI_EnableEvent_0_31>:
{
 800a934:	b480      	push	{r7}
 800a936:	b083      	sub	sp, #12
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 800a93c:	4b05      	ldr	r3, [pc, #20]	; (800a954 <LL_EXTI_EnableEvent_0_31+0x20>)
 800a93e:	685a      	ldr	r2, [r3, #4]
 800a940:	4904      	ldr	r1, [pc, #16]	; (800a954 <LL_EXTI_EnableEvent_0_31+0x20>)
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	4313      	orrs	r3, r2
 800a946:	604b      	str	r3, [r1, #4]
}
 800a948:	bf00      	nop
 800a94a:	370c      	adds	r7, #12
 800a94c:	46bd      	mov	sp, r7
 800a94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a952:	4770      	bx	lr
 800a954:	40010400 	.word	0x40010400

0800a958 <LL_EXTI_EnableEvent_32_63>:
{
 800a958:	b480      	push	{r7}
 800a95a:	b083      	sub	sp, #12
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 800a960:	4b05      	ldr	r3, [pc, #20]	; (800a978 <LL_EXTI_EnableEvent_32_63+0x20>)
 800a962:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a964:	4904      	ldr	r1, [pc, #16]	; (800a978 <LL_EXTI_EnableEvent_32_63+0x20>)
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	4313      	orrs	r3, r2
 800a96a:	624b      	str	r3, [r1, #36]	; 0x24
}
 800a96c:	bf00      	nop
 800a96e:	370c      	adds	r7, #12
 800a970:	46bd      	mov	sp, r7
 800a972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a976:	4770      	bx	lr
 800a978:	40010400 	.word	0x40010400

0800a97c <LL_EXTI_DisableEvent_0_31>:
{
 800a97c:	b480      	push	{r7}
 800a97e:	b083      	sub	sp, #12
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800a984:	4b06      	ldr	r3, [pc, #24]	; (800a9a0 <LL_EXTI_DisableEvent_0_31+0x24>)
 800a986:	685a      	ldr	r2, [r3, #4]
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	43db      	mvns	r3, r3
 800a98c:	4904      	ldr	r1, [pc, #16]	; (800a9a0 <LL_EXTI_DisableEvent_0_31+0x24>)
 800a98e:	4013      	ands	r3, r2
 800a990:	604b      	str	r3, [r1, #4]
}
 800a992:	bf00      	nop
 800a994:	370c      	adds	r7, #12
 800a996:	46bd      	mov	sp, r7
 800a998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99c:	4770      	bx	lr
 800a99e:	bf00      	nop
 800a9a0:	40010400 	.word	0x40010400

0800a9a4 <LL_EXTI_DisableEvent_32_63>:
{
 800a9a4:	b480      	push	{r7}
 800a9a6:	b083      	sub	sp, #12
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 800a9ac:	4b06      	ldr	r3, [pc, #24]	; (800a9c8 <LL_EXTI_DisableEvent_32_63+0x24>)
 800a9ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	43db      	mvns	r3, r3
 800a9b4:	4904      	ldr	r1, [pc, #16]	; (800a9c8 <LL_EXTI_DisableEvent_32_63+0x24>)
 800a9b6:	4013      	ands	r3, r2
 800a9b8:	624b      	str	r3, [r1, #36]	; 0x24
}
 800a9ba:	bf00      	nop
 800a9bc:	370c      	adds	r7, #12
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c4:	4770      	bx	lr
 800a9c6:	bf00      	nop
 800a9c8:	40010400 	.word	0x40010400

0800a9cc <LL_EXTI_EnableRisingTrig_0_31>:
{
 800a9cc:	b480      	push	{r7}
 800a9ce:	b083      	sub	sp, #12
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800a9d4:	4b05      	ldr	r3, [pc, #20]	; (800a9ec <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800a9d6:	689a      	ldr	r2, [r3, #8]
 800a9d8:	4904      	ldr	r1, [pc, #16]	; (800a9ec <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	4313      	orrs	r3, r2
 800a9de:	608b      	str	r3, [r1, #8]
}
 800a9e0:	bf00      	nop
 800a9e2:	370c      	adds	r7, #12
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ea:	4770      	bx	lr
 800a9ec:	40010400 	.word	0x40010400

0800a9f0 <LL_EXTI_EnableRisingTrig_32_63>:
{
 800a9f0:	b480      	push	{r7}
 800a9f2:	b083      	sub	sp, #12
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800a9f8:	4b05      	ldr	r3, [pc, #20]	; (800aa10 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800a9fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a9fc:	4904      	ldr	r1, [pc, #16]	; (800aa10 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	4313      	orrs	r3, r2
 800aa02:	628b      	str	r3, [r1, #40]	; 0x28
}
 800aa04:	bf00      	nop
 800aa06:	370c      	adds	r7, #12
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0e:	4770      	bx	lr
 800aa10:	40010400 	.word	0x40010400

0800aa14 <LL_EXTI_DisableRisingTrig_0_31>:
{
 800aa14:	b480      	push	{r7}
 800aa16:	b083      	sub	sp, #12
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800aa1c:	4b06      	ldr	r3, [pc, #24]	; (800aa38 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800aa1e:	689a      	ldr	r2, [r3, #8]
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	43db      	mvns	r3, r3
 800aa24:	4904      	ldr	r1, [pc, #16]	; (800aa38 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800aa26:	4013      	ands	r3, r2
 800aa28:	608b      	str	r3, [r1, #8]
}
 800aa2a:	bf00      	nop
 800aa2c:	370c      	adds	r7, #12
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa34:	4770      	bx	lr
 800aa36:	bf00      	nop
 800aa38:	40010400 	.word	0x40010400

0800aa3c <LL_EXTI_DisableRisingTrig_32_63>:
{
 800aa3c:	b480      	push	{r7}
 800aa3e:	b083      	sub	sp, #12
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 800aa44:	4b06      	ldr	r3, [pc, #24]	; (800aa60 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800aa46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	43db      	mvns	r3, r3
 800aa4c:	4904      	ldr	r1, [pc, #16]	; (800aa60 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800aa4e:	4013      	ands	r3, r2
 800aa50:	628b      	str	r3, [r1, #40]	; 0x28
}
 800aa52:	bf00      	nop
 800aa54:	370c      	adds	r7, #12
 800aa56:	46bd      	mov	sp, r7
 800aa58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5c:	4770      	bx	lr
 800aa5e:	bf00      	nop
 800aa60:	40010400 	.word	0x40010400

0800aa64 <LL_EXTI_EnableFallingTrig_0_31>:
{
 800aa64:	b480      	push	{r7}
 800aa66:	b083      	sub	sp, #12
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800aa6c:	4b05      	ldr	r3, [pc, #20]	; (800aa84 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800aa6e:	68da      	ldr	r2, [r3, #12]
 800aa70:	4904      	ldr	r1, [pc, #16]	; (800aa84 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	4313      	orrs	r3, r2
 800aa76:	60cb      	str	r3, [r1, #12]
}
 800aa78:	bf00      	nop
 800aa7a:	370c      	adds	r7, #12
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa82:	4770      	bx	lr
 800aa84:	40010400 	.word	0x40010400

0800aa88 <LL_EXTI_EnableFallingTrig_32_63>:
{
 800aa88:	b480      	push	{r7}
 800aa8a:	b083      	sub	sp, #12
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 800aa90:	4b05      	ldr	r3, [pc, #20]	; (800aaa8 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800aa92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa94:	4904      	ldr	r1, [pc, #16]	; (800aaa8 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	4313      	orrs	r3, r2
 800aa9a:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800aa9c:	bf00      	nop
 800aa9e:	370c      	adds	r7, #12
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa6:	4770      	bx	lr
 800aaa8:	40010400 	.word	0x40010400

0800aaac <LL_EXTI_DisableFallingTrig_0_31>:
{
 800aaac:	b480      	push	{r7}
 800aaae:	b083      	sub	sp, #12
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800aab4:	4b06      	ldr	r3, [pc, #24]	; (800aad0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800aab6:	68da      	ldr	r2, [r3, #12]
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	43db      	mvns	r3, r3
 800aabc:	4904      	ldr	r1, [pc, #16]	; (800aad0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800aabe:	4013      	ands	r3, r2
 800aac0:	60cb      	str	r3, [r1, #12]
}
 800aac2:	bf00      	nop
 800aac4:	370c      	adds	r7, #12
 800aac6:	46bd      	mov	sp, r7
 800aac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aacc:	4770      	bx	lr
 800aace:	bf00      	nop
 800aad0:	40010400 	.word	0x40010400

0800aad4 <LL_EXTI_DisableFallingTrig_32_63>:
{
 800aad4:	b480      	push	{r7}
 800aad6:	b083      	sub	sp, #12
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 800aadc:	4b06      	ldr	r3, [pc, #24]	; (800aaf8 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800aade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	43db      	mvns	r3, r3
 800aae4:	4904      	ldr	r1, [pc, #16]	; (800aaf8 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800aae6:	4013      	ands	r3, r2
 800aae8:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800aaea:	bf00      	nop
 800aaec:	370c      	adds	r7, #12
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf4:	4770      	bx	lr
 800aaf6:	bf00      	nop
 800aaf8:	40010400 	.word	0x40010400

0800aafc <LL_EXTI_IsActiveFlag_0_31>:
{
 800aafc:	b480      	push	{r7}
 800aafe:	b083      	sub	sp, #12
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 800ab04:	4b07      	ldr	r3, [pc, #28]	; (800ab24 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 800ab06:	695a      	ldr	r2, [r3, #20]
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	4013      	ands	r3, r2
 800ab0c:	687a      	ldr	r2, [r7, #4]
 800ab0e:	429a      	cmp	r2, r3
 800ab10:	d101      	bne.n	800ab16 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 800ab12:	2301      	movs	r3, #1
 800ab14:	e000      	b.n	800ab18 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 800ab16:	2300      	movs	r3, #0
}
 800ab18:	4618      	mov	r0, r3
 800ab1a:	370c      	adds	r7, #12
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab22:	4770      	bx	lr
 800ab24:	40010400 	.word	0x40010400

0800ab28 <LL_EXTI_IsActiveFlag_32_63>:
{
 800ab28:	b480      	push	{r7}
 800ab2a:	b083      	sub	sp, #12
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR2, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 800ab30:	4b07      	ldr	r3, [pc, #28]	; (800ab50 <LL_EXTI_IsActiveFlag_32_63+0x28>)
 800ab32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	4013      	ands	r3, r2
 800ab38:	687a      	ldr	r2, [r7, #4]
 800ab3a:	429a      	cmp	r2, r3
 800ab3c:	d101      	bne.n	800ab42 <LL_EXTI_IsActiveFlag_32_63+0x1a>
 800ab3e:	2301      	movs	r3, #1
 800ab40:	e000      	b.n	800ab44 <LL_EXTI_IsActiveFlag_32_63+0x1c>
 800ab42:	2300      	movs	r3, #0
}
 800ab44:	4618      	mov	r0, r3
 800ab46:	370c      	adds	r7, #12
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4e:	4770      	bx	lr
 800ab50:	40010400 	.word	0x40010400

0800ab54 <LL_EXTI_ClearFlag_0_31>:
{
 800ab54:	b480      	push	{r7}
 800ab56:	b083      	sub	sp, #12
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 800ab5c:	4a04      	ldr	r2, [pc, #16]	; (800ab70 <LL_EXTI_ClearFlag_0_31+0x1c>)
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	6153      	str	r3, [r2, #20]
}
 800ab62:	bf00      	nop
 800ab64:	370c      	adds	r7, #12
 800ab66:	46bd      	mov	sp, r7
 800ab68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6c:	4770      	bx	lr
 800ab6e:	bf00      	nop
 800ab70:	40010400 	.word	0x40010400

0800ab74 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 800ab74:	b480      	push	{r7}
 800ab76:	b083      	sub	sp, #12
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 800ab7c:	4a04      	ldr	r2, [pc, #16]	; (800ab90 <LL_EXTI_ClearFlag_32_63+0x1c>)
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	6353      	str	r3, [r2, #52]	; 0x34
}
 800ab82:	bf00      	nop
 800ab84:	370c      	adds	r7, #12
 800ab86:	46bd      	mov	sp, r7
 800ab88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8c:	4770      	bx	lr
 800ab8e:	bf00      	nop
 800ab90:	40010400 	.word	0x40010400

0800ab94 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b088      	sub	sp, #32
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800aba0:	2300      	movs	r3, #0
 800aba2:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d102      	bne.n	800abb0 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 800abaa:	2301      	movs	r3, #1
 800abac:	77fb      	strb	r3, [r7, #31]
 800abae:	e180      	b.n	800aeb2 <HAL_COMP_Init+0x31e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800abba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800abbe:	d102      	bne.n	800abc6 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 800abc0:	2301      	movs	r3, #1
 800abc2:	77fb      	strb	r3, [r7, #31]
 800abc4:	e175      	b.n	800aeb2 <HAL_COMP_Init+0x31e>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	7f5b      	ldrb	r3, [r3, #29]
 800abca:	b2db      	uxtb	r3, r3
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d108      	bne.n	800abe2 <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	2200      	movs	r2, #0
 800abd4:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	2200      	movs	r2, #0
 800abda:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 800abdc:	6878      	ldr	r0, [r7, #4]
 800abde:	f7fc fd01 	bl	80075e4 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800abec:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	685b      	ldr	r3, [r3, #4]
 800abf6:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	695b      	ldr	r3, [r3, #20]
 800abfc:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	68db      	ldr	r3, [r3, #12]
 800ac02:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (  hcomp->Init.InputMinus
 800ac08:	4313      	orrs	r3, r2
 800ac0a:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	681a      	ldr	r2, [r3, #0]
 800ac12:	4b98      	ldr	r3, [pc, #608]	; (800ae74 <HAL_COMP_Init+0x2e0>)
 800ac14:	4013      	ands	r3, r2
 800ac16:	687a      	ldr	r2, [r7, #4]
 800ac18:	6812      	ldr	r2, [r2, #0]
 800ac1a:	6979      	ldr	r1, [r7, #20]
 800ac1c:	430b      	orrs	r3, r1
 800ac1e:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d015      	beq.n	800ac5a <HAL_COMP_Init+0xc6>
 800ac2e:	69bb      	ldr	r3, [r7, #24]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d112      	bne.n	800ac5a <HAL_COMP_Init+0xc6>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800ac34:	4b90      	ldr	r3, [pc, #576]	; (800ae78 <HAL_COMP_Init+0x2e4>)
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	099b      	lsrs	r3, r3, #6
 800ac3a:	4a90      	ldr	r2, [pc, #576]	; (800ae7c <HAL_COMP_Init+0x2e8>)
 800ac3c:	fba2 2303 	umull	r2, r3, r2, r3
 800ac40:	099a      	lsrs	r2, r3, #6
 800ac42:	4613      	mov	r3, r2
 800ac44:	009b      	lsls	r3, r3, #2
 800ac46:	4413      	add	r3, r2
 800ac48:	009b      	lsls	r3, r3, #2
 800ac4a:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 800ac4c:	e002      	b.n	800ac54 <HAL_COMP_Init+0xc0>
      {
        wait_loop_index--;
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	3b01      	subs	r3, #1
 800ac52:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d1f9      	bne.n	800ac4e <HAL_COMP_Init+0xba>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	4a88      	ldr	r2, [pc, #544]	; (800ae80 <HAL_COMP_Init+0x2ec>)
 800ac60:	4293      	cmp	r3, r2
 800ac62:	d028      	beq.n	800acb6 <HAL_COMP_Init+0x122>
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	4a86      	ldr	r2, [pc, #536]	; (800ae84 <HAL_COMP_Init+0x2f0>)
 800ac6a:	4293      	cmp	r3, r2
 800ac6c:	d020      	beq.n	800acb0 <HAL_COMP_Init+0x11c>
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	4a85      	ldr	r2, [pc, #532]	; (800ae88 <HAL_COMP_Init+0x2f4>)
 800ac74:	4293      	cmp	r3, r2
 800ac76:	d018      	beq.n	800acaa <HAL_COMP_Init+0x116>
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	4a83      	ldr	r2, [pc, #524]	; (800ae8c <HAL_COMP_Init+0x2f8>)
 800ac7e:	4293      	cmp	r3, r2
 800ac80:	d010      	beq.n	800aca4 <HAL_COMP_Init+0x110>
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	4a82      	ldr	r2, [pc, #520]	; (800ae90 <HAL_COMP_Init+0x2fc>)
 800ac88:	4293      	cmp	r3, r2
 800ac8a:	d008      	beq.n	800ac9e <HAL_COMP_Init+0x10a>
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	4a80      	ldr	r2, [pc, #512]	; (800ae94 <HAL_COMP_Init+0x300>)
 800ac92:	4293      	cmp	r3, r2
 800ac94:	d101      	bne.n	800ac9a <HAL_COMP_Init+0x106>
 800ac96:	2301      	movs	r3, #1
 800ac98:	e00f      	b.n	800acba <HAL_COMP_Init+0x126>
 800ac9a:	2302      	movs	r3, #2
 800ac9c:	e00d      	b.n	800acba <HAL_COMP_Init+0x126>
 800ac9e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800aca2:	e00a      	b.n	800acba <HAL_COMP_Init+0x126>
 800aca4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800aca8:	e007      	b.n	800acba <HAL_COMP_Init+0x126>
 800acaa:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800acae:	e004      	b.n	800acba <HAL_COMP_Init+0x126>
 800acb0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800acb4:	e001      	b.n	800acba <HAL_COMP_Init+0x126>
 800acb6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800acba:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	699b      	ldr	r3, [r3, #24]
 800acc0:	f003 0303 	and.w	r3, r3, #3
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	f000 80b6 	beq.w	800ae36 <HAL_COMP_Init+0x2a2>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	699b      	ldr	r3, [r3, #24]
 800acce:	f003 0310 	and.w	r3, r3, #16
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d011      	beq.n	800acfa <HAL_COMP_Init+0x166>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	4a6e      	ldr	r2, [pc, #440]	; (800ae94 <HAL_COMP_Init+0x300>)
 800acdc:	4293      	cmp	r3, r2
 800acde:	d004      	beq.n	800acea <HAL_COMP_Init+0x156>
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	4a6c      	ldr	r2, [pc, #432]	; (800ae98 <HAL_COMP_Init+0x304>)
 800ace6:	4293      	cmp	r3, r2
 800ace8:	d103      	bne.n	800acf2 <HAL_COMP_Init+0x15e>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 800acea:	6938      	ldr	r0, [r7, #16]
 800acec:	f7ff fe80 	bl	800a9f0 <LL_EXTI_EnableRisingTrig_32_63>
 800acf0:	e014      	b.n	800ad1c <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 800acf2:	6938      	ldr	r0, [r7, #16]
 800acf4:	f7ff fe6a 	bl	800a9cc <LL_EXTI_EnableRisingTrig_0_31>
 800acf8:	e010      	b.n	800ad1c <HAL_COMP_Init+0x188>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	4a65      	ldr	r2, [pc, #404]	; (800ae94 <HAL_COMP_Init+0x300>)
 800ad00:	4293      	cmp	r3, r2
 800ad02:	d004      	beq.n	800ad0e <HAL_COMP_Init+0x17a>
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	4a63      	ldr	r2, [pc, #396]	; (800ae98 <HAL_COMP_Init+0x304>)
 800ad0a:	4293      	cmp	r3, r2
 800ad0c:	d103      	bne.n	800ad16 <HAL_COMP_Init+0x182>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 800ad0e:	6938      	ldr	r0, [r7, #16]
 800ad10:	f7ff fe94 	bl	800aa3c <LL_EXTI_DisableRisingTrig_32_63>
 800ad14:	e002      	b.n	800ad1c <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 800ad16:	6938      	ldr	r0, [r7, #16]
 800ad18:	f7ff fe7c 	bl	800aa14 <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	699b      	ldr	r3, [r3, #24]
 800ad20:	f003 0320 	and.w	r3, r3, #32
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d011      	beq.n	800ad4c <HAL_COMP_Init+0x1b8>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	4a59      	ldr	r2, [pc, #356]	; (800ae94 <HAL_COMP_Init+0x300>)
 800ad2e:	4293      	cmp	r3, r2
 800ad30:	d004      	beq.n	800ad3c <HAL_COMP_Init+0x1a8>
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	4a58      	ldr	r2, [pc, #352]	; (800ae98 <HAL_COMP_Init+0x304>)
 800ad38:	4293      	cmp	r3, r2
 800ad3a:	d103      	bne.n	800ad44 <HAL_COMP_Init+0x1b0>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 800ad3c:	6938      	ldr	r0, [r7, #16]
 800ad3e:	f7ff fea3 	bl	800aa88 <LL_EXTI_EnableFallingTrig_32_63>
 800ad42:	e014      	b.n	800ad6e <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 800ad44:	6938      	ldr	r0, [r7, #16]
 800ad46:	f7ff fe8d 	bl	800aa64 <LL_EXTI_EnableFallingTrig_0_31>
 800ad4a:	e010      	b.n	800ad6e <HAL_COMP_Init+0x1da>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	4a50      	ldr	r2, [pc, #320]	; (800ae94 <HAL_COMP_Init+0x300>)
 800ad52:	4293      	cmp	r3, r2
 800ad54:	d004      	beq.n	800ad60 <HAL_COMP_Init+0x1cc>
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	4a4f      	ldr	r2, [pc, #316]	; (800ae98 <HAL_COMP_Init+0x304>)
 800ad5c:	4293      	cmp	r3, r2
 800ad5e:	d103      	bne.n	800ad68 <HAL_COMP_Init+0x1d4>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 800ad60:	6938      	ldr	r0, [r7, #16]
 800ad62:	f7ff feb7 	bl	800aad4 <LL_EXTI_DisableFallingTrig_32_63>
 800ad66:	e002      	b.n	800ad6e <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 800ad68:	6938      	ldr	r0, [r7, #16]
 800ad6a:	f7ff fe9f 	bl	800aaac <LL_EXTI_DisableFallingTrig_0_31>
#endif
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	4a48      	ldr	r2, [pc, #288]	; (800ae94 <HAL_COMP_Init+0x300>)
 800ad74:	4293      	cmp	r3, r2
 800ad76:	d004      	beq.n	800ad82 <HAL_COMP_Init+0x1ee>
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	4a46      	ldr	r2, [pc, #280]	; (800ae98 <HAL_COMP_Init+0x304>)
 800ad7e:	4293      	cmp	r3, r2
 800ad80:	d103      	bne.n	800ad8a <HAL_COMP_Init+0x1f6>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 800ad82:	6938      	ldr	r0, [r7, #16]
 800ad84:	f7ff fef6 	bl	800ab74 <LL_EXTI_ClearFlag_32_63>
 800ad88:	e002      	b.n	800ad90 <HAL_COMP_Init+0x1fc>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 800ad8a:	6938      	ldr	r0, [r7, #16]
 800ad8c:	f7ff fee2 	bl	800ab54 <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	699b      	ldr	r3, [r3, #24]
 800ad94:	f003 0302 	and.w	r3, r3, #2
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d011      	beq.n	800adc0 <HAL_COMP_Init+0x22c>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	4a3c      	ldr	r2, [pc, #240]	; (800ae94 <HAL_COMP_Init+0x300>)
 800ada2:	4293      	cmp	r3, r2
 800ada4:	d004      	beq.n	800adb0 <HAL_COMP_Init+0x21c>
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	4a3b      	ldr	r2, [pc, #236]	; (800ae98 <HAL_COMP_Init+0x304>)
 800adac:	4293      	cmp	r3, r2
 800adae:	d103      	bne.n	800adb8 <HAL_COMP_Init+0x224>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 800adb0:	6938      	ldr	r0, [r7, #16]
 800adb2:	f7ff fdd1 	bl	800a958 <LL_EXTI_EnableEvent_32_63>
 800adb6:	e014      	b.n	800ade2 <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 800adb8:	6938      	ldr	r0, [r7, #16]
 800adba:	f7ff fdbb 	bl	800a934 <LL_EXTI_EnableEvent_0_31>
 800adbe:	e010      	b.n	800ade2 <HAL_COMP_Init+0x24e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	4a33      	ldr	r2, [pc, #204]	; (800ae94 <HAL_COMP_Init+0x300>)
 800adc6:	4293      	cmp	r3, r2
 800adc8:	d004      	beq.n	800add4 <HAL_COMP_Init+0x240>
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	4a32      	ldr	r2, [pc, #200]	; (800ae98 <HAL_COMP_Init+0x304>)
 800add0:	4293      	cmp	r3, r2
 800add2:	d103      	bne.n	800addc <HAL_COMP_Init+0x248>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 800add4:	6938      	ldr	r0, [r7, #16]
 800add6:	f7ff fde5 	bl	800a9a4 <LL_EXTI_DisableEvent_32_63>
 800adda:	e002      	b.n	800ade2 <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 800addc:	6938      	ldr	r0, [r7, #16]
 800adde:	f7ff fdcd 	bl	800a97c <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	699b      	ldr	r3, [r3, #24]
 800ade6:	f003 0301 	and.w	r3, r3, #1
 800adea:	2b00      	cmp	r3, #0
 800adec:	d011      	beq.n	800ae12 <HAL_COMP_Init+0x27e>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	4a28      	ldr	r2, [pc, #160]	; (800ae94 <HAL_COMP_Init+0x300>)
 800adf4:	4293      	cmp	r3, r2
 800adf6:	d004      	beq.n	800ae02 <HAL_COMP_Init+0x26e>
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	4a26      	ldr	r2, [pc, #152]	; (800ae98 <HAL_COMP_Init+0x304>)
 800adfe:	4293      	cmp	r3, r2
 800ae00:	d103      	bne.n	800ae0a <HAL_COMP_Init+0x276>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 800ae02:	6938      	ldr	r0, [r7, #16]
 800ae04:	f7ff fd5c 	bl	800a8c0 <LL_EXTI_EnableIT_32_63>
 800ae08:	e04b      	b.n	800aea2 <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 800ae0a:	6938      	ldr	r0, [r7, #16]
 800ae0c:	f7ff fd46 	bl	800a89c <LL_EXTI_EnableIT_0_31>
 800ae10:	e047      	b.n	800aea2 <HAL_COMP_Init+0x30e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	4a1f      	ldr	r2, [pc, #124]	; (800ae94 <HAL_COMP_Init+0x300>)
 800ae18:	4293      	cmp	r3, r2
 800ae1a:	d004      	beq.n	800ae26 <HAL_COMP_Init+0x292>
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	4a1d      	ldr	r2, [pc, #116]	; (800ae98 <HAL_COMP_Init+0x304>)
 800ae22:	4293      	cmp	r3, r2
 800ae24:	d103      	bne.n	800ae2e <HAL_COMP_Init+0x29a>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 800ae26:	6938      	ldr	r0, [r7, #16]
 800ae28:	f7ff fd70 	bl	800a90c <LL_EXTI_DisableIT_32_63>
 800ae2c:	e039      	b.n	800aea2 <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 800ae2e:	6938      	ldr	r0, [r7, #16]
 800ae30:	f7ff fd58 	bl	800a8e4 <LL_EXTI_DisableIT_0_31>
 800ae34:	e035      	b.n	800aea2 <HAL_COMP_Init+0x30e>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	4a16      	ldr	r2, [pc, #88]	; (800ae94 <HAL_COMP_Init+0x300>)
 800ae3c:	4293      	cmp	r3, r2
 800ae3e:	d004      	beq.n	800ae4a <HAL_COMP_Init+0x2b6>
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	4a14      	ldr	r2, [pc, #80]	; (800ae98 <HAL_COMP_Init+0x304>)
 800ae46:	4293      	cmp	r3, r2
 800ae48:	d103      	bne.n	800ae52 <HAL_COMP_Init+0x2be>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 800ae4a:	6938      	ldr	r0, [r7, #16]
 800ae4c:	f7ff fdaa 	bl	800a9a4 <LL_EXTI_DisableEvent_32_63>
 800ae50:	e002      	b.n	800ae58 <HAL_COMP_Init+0x2c4>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 800ae52:	6938      	ldr	r0, [r7, #16]
 800ae54:	f7ff fd92 	bl	800a97c <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif

      /* Disable EXTI interrupt mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	4a0d      	ldr	r2, [pc, #52]	; (800ae94 <HAL_COMP_Init+0x300>)
 800ae5e:	4293      	cmp	r3, r2
 800ae60:	d004      	beq.n	800ae6c <HAL_COMP_Init+0x2d8>
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	4a0c      	ldr	r2, [pc, #48]	; (800ae98 <HAL_COMP_Init+0x304>)
 800ae68:	4293      	cmp	r3, r2
 800ae6a:	d117      	bne.n	800ae9c <HAL_COMP_Init+0x308>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 800ae6c:	6938      	ldr	r0, [r7, #16]
 800ae6e:	f7ff fd4d 	bl	800a90c <LL_EXTI_DisableIT_32_63>
 800ae72:	e016      	b.n	800aea2 <HAL_COMP_Init+0x30e>
 800ae74:	ff007e0f 	.word	0xff007e0f
 800ae78:	20000eb0 	.word	0x20000eb0
 800ae7c:	053e2d63 	.word	0x053e2d63
 800ae80:	40010200 	.word	0x40010200
 800ae84:	40010204 	.word	0x40010204
 800ae88:	40010208 	.word	0x40010208
 800ae8c:	4001020c 	.word	0x4001020c
 800ae90:	40010210 	.word	0x40010210
 800ae94:	40010214 	.word	0x40010214
 800ae98:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 800ae9c:	6938      	ldr	r0, [r7, #16]
 800ae9e:	f7ff fd21 	bl	800a8e4 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	7f5b      	ldrb	r3, [r3, #29]
 800aea6:	b2db      	uxtb	r3, r3
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d102      	bne.n	800aeb2 <HAL_COMP_Init+0x31e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	2201      	movs	r2, #1
 800aeb0:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 800aeb2:	7ffb      	ldrb	r3, [r7, #31]
}
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	3720      	adds	r7, #32
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	bd80      	pop	{r7, pc}

0800aebc <HAL_COMP_Stop>:
  * @brief  Stop the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Stop(COMP_HandleTypeDef *hcomp)
{
 800aebc:	b480      	push	{r7}
 800aebe:	b085      	sub	sp, #20
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aec4:	2300      	movs	r3, #0
 800aec6:	73fb      	strb	r3, [r7, #15]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d102      	bne.n	800aed4 <HAL_COMP_Stop+0x18>
  {
    status = HAL_ERROR;
 800aece:	2301      	movs	r3, #1
 800aed0:	73fb      	strb	r3, [r7, #15]
 800aed2:	e01d      	b.n	800af10 <HAL_COMP_Stop+0x54>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aede:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aee2:	d102      	bne.n	800aeea <HAL_COMP_Stop+0x2e>
  {
    status = HAL_ERROR;
 800aee4:	2301      	movs	r3, #1
 800aee6:	73fb      	strb	r3, [r7, #15]
 800aee8:	e012      	b.n	800af10 <HAL_COMP_Stop+0x54>
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    /* Check compliant states: HAL_COMP_STATE_READY or HAL_COMP_STATE_BUSY    */
    /* (all states except HAL_COMP_STATE_RESET and except locked status.      */
    if(hcomp->State != HAL_COMP_STATE_RESET)
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	7f5b      	ldrb	r3, [r3, #29]
 800aeee:	b2db      	uxtb	r3, r3
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d00b      	beq.n	800af0c <HAL_COMP_Stop+0x50>
    {
      /* Disable the selected comparator */
      CLEAR_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	681a      	ldr	r2, [r3, #0]
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	f022 0201 	bic.w	r2, r2, #1
 800af02:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_READY;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2201      	movs	r2, #1
 800af08:	775a      	strb	r2, [r3, #29]
 800af0a:	e001      	b.n	800af10 <HAL_COMP_Stop+0x54>
    }
    else
    {
      status = HAL_ERROR;
 800af0c:	2301      	movs	r3, #1
 800af0e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800af10:	7bfb      	ldrb	r3, [r7, #15]
}
 800af12:	4618      	mov	r0, r3
 800af14:	3714      	adds	r7, #20
 800af16:	46bd      	mov	sp, r7
 800af18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af1c:	4770      	bx	lr
	...

0800af20 <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ handler.
  * @param  hcomp  COMP handle
  * @retval None
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 800af20:	b580      	push	{r7, lr}
 800af22:	b084      	sub	sp, #16
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
  /* Get the EXTI line corresponding to the selected COMP instance */
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	4a2f      	ldr	r2, [pc, #188]	; (800afec <HAL_COMP_IRQHandler+0xcc>)
 800af2e:	4293      	cmp	r3, r2
 800af30:	d028      	beq.n	800af84 <HAL_COMP_IRQHandler+0x64>
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	4a2e      	ldr	r2, [pc, #184]	; (800aff0 <HAL_COMP_IRQHandler+0xd0>)
 800af38:	4293      	cmp	r3, r2
 800af3a:	d020      	beq.n	800af7e <HAL_COMP_IRQHandler+0x5e>
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	4a2c      	ldr	r2, [pc, #176]	; (800aff4 <HAL_COMP_IRQHandler+0xd4>)
 800af42:	4293      	cmp	r3, r2
 800af44:	d018      	beq.n	800af78 <HAL_COMP_IRQHandler+0x58>
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	4a2b      	ldr	r2, [pc, #172]	; (800aff8 <HAL_COMP_IRQHandler+0xd8>)
 800af4c:	4293      	cmp	r3, r2
 800af4e:	d010      	beq.n	800af72 <HAL_COMP_IRQHandler+0x52>
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	4a29      	ldr	r2, [pc, #164]	; (800affc <HAL_COMP_IRQHandler+0xdc>)
 800af56:	4293      	cmp	r3, r2
 800af58:	d008      	beq.n	800af6c <HAL_COMP_IRQHandler+0x4c>
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	4a28      	ldr	r2, [pc, #160]	; (800b000 <HAL_COMP_IRQHandler+0xe0>)
 800af60:	4293      	cmp	r3, r2
 800af62:	d101      	bne.n	800af68 <HAL_COMP_IRQHandler+0x48>
 800af64:	2301      	movs	r3, #1
 800af66:	e00f      	b.n	800af88 <HAL_COMP_IRQHandler+0x68>
 800af68:	2302      	movs	r3, #2
 800af6a:	e00d      	b.n	800af88 <HAL_COMP_IRQHandler+0x68>
 800af6c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800af70:	e00a      	b.n	800af88 <HAL_COMP_IRQHandler+0x68>
 800af72:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800af76:	e007      	b.n	800af88 <HAL_COMP_IRQHandler+0x68>
 800af78:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800af7c:	e004      	b.n	800af88 <HAL_COMP_IRQHandler+0x68>
 800af7e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800af82:	e001      	b.n	800af88 <HAL_COMP_IRQHandler+0x68>
 800af84:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800af88:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_comp_exti_flag_set = 0UL;
 800af8a:	2300      	movs	r3, #0
 800af8c:	60fb      	str	r3, [r7, #12]

  /* Check COMP EXTI flag */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
  if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	4a1b      	ldr	r2, [pc, #108]	; (800b000 <HAL_COMP_IRQHandler+0xe0>)
 800af94:	4293      	cmp	r3, r2
 800af96:	d004      	beq.n	800afa2 <HAL_COMP_IRQHandler+0x82>
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	4a19      	ldr	r2, [pc, #100]	; (800b004 <HAL_COMP_IRQHandler+0xe4>)
 800af9e:	4293      	cmp	r3, r2
 800afa0:	d108      	bne.n	800afb4 <HAL_COMP_IRQHandler+0x94>
  {
    if(LL_EXTI_IsActiveFlag_32_63(exti_line) != 0UL)
 800afa2:	68b8      	ldr	r0, [r7, #8]
 800afa4:	f7ff fdc0 	bl	800ab28 <LL_EXTI_IsActiveFlag_32_63>
 800afa8:	4603      	mov	r3, r0
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d00a      	beq.n	800afc4 <HAL_COMP_IRQHandler+0xa4>
    {
      tmp_comp_exti_flag_set = 2UL;
 800afae:	2302      	movs	r3, #2
 800afb0:	60fb      	str	r3, [r7, #12]
    if(LL_EXTI_IsActiveFlag_32_63(exti_line) != 0UL)
 800afb2:	e007      	b.n	800afc4 <HAL_COMP_IRQHandler+0xa4>
    }
  }
  else
  {
    if(LL_EXTI_IsActiveFlag_0_31(exti_line) != 0UL)
 800afb4:	68b8      	ldr	r0, [r7, #8]
 800afb6:	f7ff fda1 	bl	800aafc <LL_EXTI_IsActiveFlag_0_31>
 800afba:	4603      	mov	r3, r0
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d001      	beq.n	800afc4 <HAL_COMP_IRQHandler+0xa4>
    {
      tmp_comp_exti_flag_set = 1UL;
 800afc0:	2301      	movs	r3, #1
 800afc2:	60fb      	str	r3, [r7, #12]
  {
    tmp_comp_exti_flag_set = 1UL;
  }
#endif

  if(tmp_comp_exti_flag_set != 0UL)
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d00c      	beq.n	800afe4 <HAL_COMP_IRQHandler+0xc4>
  {
      /* Clear COMP EXTI line pending bit */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if(tmp_comp_exti_flag_set == 2UL)
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	2b02      	cmp	r3, #2
 800afce:	d103      	bne.n	800afd8 <HAL_COMP_IRQHandler+0xb8>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 800afd0:	68b8      	ldr	r0, [r7, #8]
 800afd2:	f7ff fdcf 	bl	800ab74 <LL_EXTI_ClearFlag_32_63>
 800afd6:	e002      	b.n	800afde <HAL_COMP_IRQHandler+0xbe>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 800afd8:	68b8      	ldr	r0, [r7, #8]
 800afda:	f7ff fdbb 	bl	800ab54 <LL_EXTI_ClearFlag_0_31>

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 800afde:	6878      	ldr	r0, [r7, #4]
 800afe0:	f7fb fa76 	bl	80064d0 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
  }
}
 800afe4:	bf00      	nop
 800afe6:	3710      	adds	r7, #16
 800afe8:	46bd      	mov	sp, r7
 800afea:	bd80      	pop	{r7, pc}
 800afec:	40010200 	.word	0x40010200
 800aff0:	40010204 	.word	0x40010204
 800aff4:	40010208 	.word	0x40010208
 800aff8:	4001020c 	.word	0x4001020c
 800affc:	40010210 	.word	0x40010210
 800b000:	40010214 	.word	0x40010214
 800b004:	40010218 	.word	0x40010218

0800b008 <HAL_COMP_GetOutputLevel>:
  *         @arg COMP_OUTPUT_LEVEL_LOW
  *         @arg COMP_OUTPUT_LEVEL_HIGH
  *
  */
uint32_t HAL_COMP_GetOutputLevel(COMP_HandleTypeDef *hcomp)
{
 800b008:	b480      	push	{r7}
 800b00a:	b083      	sub	sp, #12
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

  return (uint32_t)(READ_BIT(hcomp->Instance->CSR, COMP_CSR_VALUE)
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	0f9b      	lsrs	r3, r3, #30
 800b018:	f003 0301 	and.w	r3, r3, #1
                    >> COMP_OUTPUT_LEVEL_BITOFFSET_POS);
}
 800b01c:	4618      	mov	r0, r3
 800b01e:	370c      	adds	r7, #12
 800b020:	46bd      	mov	sp, r7
 800b022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b026:	4770      	bx	lr

0800b028 <__NVIC_SetPriorityGrouping>:
{
 800b028:	b480      	push	{r7}
 800b02a:	b085      	sub	sp, #20
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	f003 0307 	and.w	r3, r3, #7
 800b036:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b038:	4b0c      	ldr	r3, [pc, #48]	; (800b06c <__NVIC_SetPriorityGrouping+0x44>)
 800b03a:	68db      	ldr	r3, [r3, #12]
 800b03c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b03e:	68ba      	ldr	r2, [r7, #8]
 800b040:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800b044:	4013      	ands	r3, r2
 800b046:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b04c:	68bb      	ldr	r3, [r7, #8]
 800b04e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800b050:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800b054:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b058:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b05a:	4a04      	ldr	r2, [pc, #16]	; (800b06c <__NVIC_SetPriorityGrouping+0x44>)
 800b05c:	68bb      	ldr	r3, [r7, #8]
 800b05e:	60d3      	str	r3, [r2, #12]
}
 800b060:	bf00      	nop
 800b062:	3714      	adds	r7, #20
 800b064:	46bd      	mov	sp, r7
 800b066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06a:	4770      	bx	lr
 800b06c:	e000ed00 	.word	0xe000ed00

0800b070 <__NVIC_GetPriorityGrouping>:
{
 800b070:	b480      	push	{r7}
 800b072:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b074:	4b04      	ldr	r3, [pc, #16]	; (800b088 <__NVIC_GetPriorityGrouping+0x18>)
 800b076:	68db      	ldr	r3, [r3, #12]
 800b078:	0a1b      	lsrs	r3, r3, #8
 800b07a:	f003 0307 	and.w	r3, r3, #7
}
 800b07e:	4618      	mov	r0, r3
 800b080:	46bd      	mov	sp, r7
 800b082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b086:	4770      	bx	lr
 800b088:	e000ed00 	.word	0xe000ed00

0800b08c <__NVIC_EnableIRQ>:
{
 800b08c:	b480      	push	{r7}
 800b08e:	b083      	sub	sp, #12
 800b090:	af00      	add	r7, sp, #0
 800b092:	4603      	mov	r3, r0
 800b094:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	db0b      	blt.n	800b0b6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b09e:	79fb      	ldrb	r3, [r7, #7]
 800b0a0:	f003 021f 	and.w	r2, r3, #31
 800b0a4:	4907      	ldr	r1, [pc, #28]	; (800b0c4 <__NVIC_EnableIRQ+0x38>)
 800b0a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b0aa:	095b      	lsrs	r3, r3, #5
 800b0ac:	2001      	movs	r0, #1
 800b0ae:	fa00 f202 	lsl.w	r2, r0, r2
 800b0b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800b0b6:	bf00      	nop
 800b0b8:	370c      	adds	r7, #12
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c0:	4770      	bx	lr
 800b0c2:	bf00      	nop
 800b0c4:	e000e100 	.word	0xe000e100

0800b0c8 <__NVIC_DisableIRQ>:
{
 800b0c8:	b480      	push	{r7}
 800b0ca:	b083      	sub	sp, #12
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	4603      	mov	r3, r0
 800b0d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b0d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	db10      	blt.n	800b0fc <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b0da:	79fb      	ldrb	r3, [r7, #7]
 800b0dc:	f003 021f 	and.w	r2, r3, #31
 800b0e0:	4909      	ldr	r1, [pc, #36]	; (800b108 <__NVIC_DisableIRQ+0x40>)
 800b0e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b0e6:	095b      	lsrs	r3, r3, #5
 800b0e8:	2001      	movs	r0, #1
 800b0ea:	fa00 f202 	lsl.w	r2, r0, r2
 800b0ee:	3320      	adds	r3, #32
 800b0f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800b0f4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800b0f8:	f3bf 8f6f 	isb	sy
}
 800b0fc:	bf00      	nop
 800b0fe:	370c      	adds	r7, #12
 800b100:	46bd      	mov	sp, r7
 800b102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b106:	4770      	bx	lr
 800b108:	e000e100 	.word	0xe000e100

0800b10c <__NVIC_SetPriority>:
{
 800b10c:	b480      	push	{r7}
 800b10e:	b083      	sub	sp, #12
 800b110:	af00      	add	r7, sp, #0
 800b112:	4603      	mov	r3, r0
 800b114:	6039      	str	r1, [r7, #0]
 800b116:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b118:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	db0a      	blt.n	800b136 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b120:	683b      	ldr	r3, [r7, #0]
 800b122:	b2da      	uxtb	r2, r3
 800b124:	490c      	ldr	r1, [pc, #48]	; (800b158 <__NVIC_SetPriority+0x4c>)
 800b126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b12a:	0112      	lsls	r2, r2, #4
 800b12c:	b2d2      	uxtb	r2, r2
 800b12e:	440b      	add	r3, r1
 800b130:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800b134:	e00a      	b.n	800b14c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b136:	683b      	ldr	r3, [r7, #0]
 800b138:	b2da      	uxtb	r2, r3
 800b13a:	4908      	ldr	r1, [pc, #32]	; (800b15c <__NVIC_SetPriority+0x50>)
 800b13c:	79fb      	ldrb	r3, [r7, #7]
 800b13e:	f003 030f 	and.w	r3, r3, #15
 800b142:	3b04      	subs	r3, #4
 800b144:	0112      	lsls	r2, r2, #4
 800b146:	b2d2      	uxtb	r2, r2
 800b148:	440b      	add	r3, r1
 800b14a:	761a      	strb	r2, [r3, #24]
}
 800b14c:	bf00      	nop
 800b14e:	370c      	adds	r7, #12
 800b150:	46bd      	mov	sp, r7
 800b152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b156:	4770      	bx	lr
 800b158:	e000e100 	.word	0xe000e100
 800b15c:	e000ed00 	.word	0xe000ed00

0800b160 <NVIC_EncodePriority>:
{
 800b160:	b480      	push	{r7}
 800b162:	b089      	sub	sp, #36	; 0x24
 800b164:	af00      	add	r7, sp, #0
 800b166:	60f8      	str	r0, [r7, #12]
 800b168:	60b9      	str	r1, [r7, #8]
 800b16a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	f003 0307 	and.w	r3, r3, #7
 800b172:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b174:	69fb      	ldr	r3, [r7, #28]
 800b176:	f1c3 0307 	rsb	r3, r3, #7
 800b17a:	2b04      	cmp	r3, #4
 800b17c:	bf28      	it	cs
 800b17e:	2304      	movcs	r3, #4
 800b180:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b182:	69fb      	ldr	r3, [r7, #28]
 800b184:	3304      	adds	r3, #4
 800b186:	2b06      	cmp	r3, #6
 800b188:	d902      	bls.n	800b190 <NVIC_EncodePriority+0x30>
 800b18a:	69fb      	ldr	r3, [r7, #28]
 800b18c:	3b03      	subs	r3, #3
 800b18e:	e000      	b.n	800b192 <NVIC_EncodePriority+0x32>
 800b190:	2300      	movs	r3, #0
 800b192:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b194:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b198:	69bb      	ldr	r3, [r7, #24]
 800b19a:	fa02 f303 	lsl.w	r3, r2, r3
 800b19e:	43da      	mvns	r2, r3
 800b1a0:	68bb      	ldr	r3, [r7, #8]
 800b1a2:	401a      	ands	r2, r3
 800b1a4:	697b      	ldr	r3, [r7, #20]
 800b1a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b1a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800b1ac:	697b      	ldr	r3, [r7, #20]
 800b1ae:	fa01 f303 	lsl.w	r3, r1, r3
 800b1b2:	43d9      	mvns	r1, r3
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b1b8:	4313      	orrs	r3, r2
}
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	3724      	adds	r7, #36	; 0x24
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c4:	4770      	bx	lr
	...

0800b1c8 <SysTick_Config>:
{
 800b1c8:	b580      	push	{r7, lr}
 800b1ca:	b082      	sub	sp, #8
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	3b01      	subs	r3, #1
 800b1d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b1d8:	d301      	bcc.n	800b1de <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800b1da:	2301      	movs	r3, #1
 800b1dc:	e00f      	b.n	800b1fe <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800b1de:	4a0a      	ldr	r2, [pc, #40]	; (800b208 <SysTick_Config+0x40>)
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	3b01      	subs	r3, #1
 800b1e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800b1e6:	210f      	movs	r1, #15
 800b1e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b1ec:	f7ff ff8e 	bl	800b10c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800b1f0:	4b05      	ldr	r3, [pc, #20]	; (800b208 <SysTick_Config+0x40>)
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800b1f6:	4b04      	ldr	r3, [pc, #16]	; (800b208 <SysTick_Config+0x40>)
 800b1f8:	2207      	movs	r2, #7
 800b1fa:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800b1fc:	2300      	movs	r3, #0
}
 800b1fe:	4618      	mov	r0, r3
 800b200:	3708      	adds	r7, #8
 800b202:	46bd      	mov	sp, r7
 800b204:	bd80      	pop	{r7, pc}
 800b206:	bf00      	nop
 800b208:	e000e010 	.word	0xe000e010

0800b20c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b082      	sub	sp, #8
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b214:	6878      	ldr	r0, [r7, #4]
 800b216:	f7ff ff07 	bl	800b028 <__NVIC_SetPriorityGrouping>
}
 800b21a:	bf00      	nop
 800b21c:	3708      	adds	r7, #8
 800b21e:	46bd      	mov	sp, r7
 800b220:	bd80      	pop	{r7, pc}

0800b222 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b222:	b580      	push	{r7, lr}
 800b224:	b086      	sub	sp, #24
 800b226:	af00      	add	r7, sp, #0
 800b228:	4603      	mov	r3, r0
 800b22a:	60b9      	str	r1, [r7, #8]
 800b22c:	607a      	str	r2, [r7, #4]
 800b22e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800b230:	f7ff ff1e 	bl	800b070 <__NVIC_GetPriorityGrouping>
 800b234:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b236:	687a      	ldr	r2, [r7, #4]
 800b238:	68b9      	ldr	r1, [r7, #8]
 800b23a:	6978      	ldr	r0, [r7, #20]
 800b23c:	f7ff ff90 	bl	800b160 <NVIC_EncodePriority>
 800b240:	4602      	mov	r2, r0
 800b242:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b246:	4611      	mov	r1, r2
 800b248:	4618      	mov	r0, r3
 800b24a:	f7ff ff5f 	bl	800b10c <__NVIC_SetPriority>
}
 800b24e:	bf00      	nop
 800b250:	3718      	adds	r7, #24
 800b252:	46bd      	mov	sp, r7
 800b254:	bd80      	pop	{r7, pc}

0800b256 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b256:	b580      	push	{r7, lr}
 800b258:	b082      	sub	sp, #8
 800b25a:	af00      	add	r7, sp, #0
 800b25c:	4603      	mov	r3, r0
 800b25e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b260:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b264:	4618      	mov	r0, r3
 800b266:	f7ff ff11 	bl	800b08c <__NVIC_EnableIRQ>
}
 800b26a:	bf00      	nop
 800b26c:	3708      	adds	r7, #8
 800b26e:	46bd      	mov	sp, r7
 800b270:	bd80      	pop	{r7, pc}

0800b272 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800b272:	b580      	push	{r7, lr}
 800b274:	b082      	sub	sp, #8
 800b276:	af00      	add	r7, sp, #0
 800b278:	4603      	mov	r3, r0
 800b27a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800b27c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b280:	4618      	mov	r0, r3
 800b282:	f7ff ff21 	bl	800b0c8 <__NVIC_DisableIRQ>
}
 800b286:	bf00      	nop
 800b288:	3708      	adds	r7, #8
 800b28a:	46bd      	mov	sp, r7
 800b28c:	bd80      	pop	{r7, pc}

0800b28e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800b28e:	b580      	push	{r7, lr}
 800b290:	b082      	sub	sp, #8
 800b292:	af00      	add	r7, sp, #0
 800b294:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800b296:	6878      	ldr	r0, [r7, #4]
 800b298:	f7ff ff96 	bl	800b1c8 <SysTick_Config>
 800b29c:	4603      	mov	r3, r0
}
 800b29e:	4618      	mov	r0, r3
 800b2a0:	3708      	adds	r7, #8
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	bd80      	pop	{r7, pc}

0800b2a6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800b2a6:	b580      	push	{r7, lr}
 800b2a8:	b082      	sub	sp, #8
 800b2aa:	af00      	add	r7, sp, #0
 800b2ac:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d101      	bne.n	800b2b8 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800b2b4:	2301      	movs	r3, #1
 800b2b6:	e014      	b.n	800b2e2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	791b      	ldrb	r3, [r3, #4]
 800b2bc:	b2db      	uxtb	r3, r3
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d105      	bne.n	800b2ce <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800b2c8:	6878      	ldr	r0, [r7, #4]
 800b2ca:	f7fc fa49 	bl	8007760 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	2202      	movs	r2, #2
 800b2d2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	2200      	movs	r2, #0
 800b2d8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	2201      	movs	r2, #1
 800b2de:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800b2e0:	2300      	movs	r3, #0
}
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	3708      	adds	r7, #8
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	bd80      	pop	{r7, pc}

0800b2ea <HAL_DAC_Start>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800b2ea:	b580      	push	{r7, lr}
 800b2ec:	b082      	sub	sp, #8
 800b2ee:	af00      	add	r7, sp, #0
 800b2f0:	6078      	str	r0, [r7, #4]
 800b2f2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	795b      	ldrb	r3, [r3, #5]
 800b2f8:	2b01      	cmp	r3, #1
 800b2fa:	d101      	bne.n	800b300 <HAL_DAC_Start+0x16>
 800b2fc:	2302      	movs	r3, #2
 800b2fe:	e043      	b.n	800b388 <HAL_DAC_Start+0x9e>
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	2201      	movs	r2, #1
 800b304:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	2202      	movs	r2, #2
 800b30a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	6819      	ldr	r1, [r3, #0]
 800b312:	683b      	ldr	r3, [r7, #0]
 800b314:	f003 0310 	and.w	r3, r3, #16
 800b318:	2201      	movs	r2, #1
 800b31a:	409a      	lsls	r2, r3
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	430a      	orrs	r2, r1
 800b322:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 800b324:	2001      	movs	r0, #1
 800b326:	f7fd fe65 	bl	8008ff4 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 800b32a:	683b      	ldr	r3, [r7, #0]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d10f      	bne.n	800b350 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800b33a:	2b02      	cmp	r3, #2
 800b33c:	d11d      	bne.n	800b37a <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	685a      	ldr	r2, [r3, #4]
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	f042 0201 	orr.w	r2, r2, #1
 800b34c:	605a      	str	r2, [r3, #4]
 800b34e:	e014      	b.n	800b37a <HAL_DAC_Start+0x90>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800b35a:	683b      	ldr	r3, [r7, #0]
 800b35c:	f003 0310 	and.w	r3, r3, #16
 800b360:	2102      	movs	r1, #2
 800b362:	fa01 f303 	lsl.w	r3, r1, r3
 800b366:	429a      	cmp	r2, r3
 800b368:	d107      	bne.n	800b37a <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	685a      	ldr	r2, [r3, #4]
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	f042 0202 	orr.w	r2, r2, #2
 800b378:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	2201      	movs	r2, #1
 800b37e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	2200      	movs	r2, #0
 800b384:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800b386:	2300      	movs	r3, #0
}
 800b388:	4618      	mov	r0, r3
 800b38a:	3708      	adds	r7, #8
 800b38c:	46bd      	mov	sp, r7
 800b38e:	bd80      	pop	{r7, pc}

0800b390 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 800b390:	b580      	push	{r7, lr}
 800b392:	b086      	sub	sp, #24
 800b394:	af00      	add	r7, sp, #0
 800b396:	60f8      	str	r0, [r7, #12]
 800b398:	60b9      	str	r1, [r7, #8]
 800b39a:	607a      	str	r2, [r7, #4]
 800b39c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 800b39e:	2300      	movs	r3, #0
 800b3a0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	795b      	ldrb	r3, [r3, #5]
 800b3a6:	2b01      	cmp	r3, #1
 800b3a8:	d101      	bne.n	800b3ae <HAL_DAC_Start_DMA+0x1e>
 800b3aa:	2302      	movs	r3, #2
 800b3ac:	e0a1      	b.n	800b4f2 <HAL_DAC_Start_DMA+0x162>
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	2201      	movs	r2, #1
 800b3b2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	2202      	movs	r2, #2
 800b3b8:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800b3ba:	68bb      	ldr	r3, [r7, #8]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d12a      	bne.n	800b416 <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	689b      	ldr	r3, [r3, #8]
 800b3c4:	4a4d      	ldr	r2, [pc, #308]	; (800b4fc <HAL_DAC_Start_DMA+0x16c>)
 800b3c6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	689b      	ldr	r3, [r3, #8]
 800b3cc:	4a4c      	ldr	r2, [pc, #304]	; (800b500 <HAL_DAC_Start_DMA+0x170>)
 800b3ce:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	689b      	ldr	r3, [r3, #8]
 800b3d4:	4a4b      	ldr	r2, [pc, #300]	; (800b504 <HAL_DAC_Start_DMA+0x174>)
 800b3d6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	681a      	ldr	r2, [r3, #0]
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b3e6:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800b3e8:	6a3b      	ldr	r3, [r7, #32]
 800b3ea:	2b04      	cmp	r3, #4
 800b3ec:	d009      	beq.n	800b402 <HAL_DAC_Start_DMA+0x72>
 800b3ee:	2b08      	cmp	r3, #8
 800b3f0:	d00c      	beq.n	800b40c <HAL_DAC_Start_DMA+0x7c>
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d000      	beq.n	800b3f8 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 800b3f6:	e039      	b.n	800b46c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	3308      	adds	r3, #8
 800b3fe:	613b      	str	r3, [r7, #16]
        break;
 800b400:	e034      	b.n	800b46c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	330c      	adds	r3, #12
 800b408:	613b      	str	r3, [r7, #16]
        break;
 800b40a:	e02f      	b.n	800b46c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	3310      	adds	r3, #16
 800b412:	613b      	str	r3, [r7, #16]
        break;
 800b414:	e02a      	b.n	800b46c <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	68db      	ldr	r3, [r3, #12]
 800b41a:	4a3b      	ldr	r2, [pc, #236]	; (800b508 <HAL_DAC_Start_DMA+0x178>)
 800b41c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	68db      	ldr	r3, [r3, #12]
 800b422:	4a3a      	ldr	r2, [pc, #232]	; (800b50c <HAL_DAC_Start_DMA+0x17c>)
 800b424:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	68db      	ldr	r3, [r3, #12]
 800b42a:	4a39      	ldr	r2, [pc, #228]	; (800b510 <HAL_DAC_Start_DMA+0x180>)
 800b42c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	681a      	ldr	r2, [r3, #0]
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800b43c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800b43e:	6a3b      	ldr	r3, [r7, #32]
 800b440:	2b04      	cmp	r3, #4
 800b442:	d009      	beq.n	800b458 <HAL_DAC_Start_DMA+0xc8>
 800b444:	2b08      	cmp	r3, #8
 800b446:	d00c      	beq.n	800b462 <HAL_DAC_Start_DMA+0xd2>
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d000      	beq.n	800b44e <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 800b44c:	e00e      	b.n	800b46c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	3314      	adds	r3, #20
 800b454:	613b      	str	r3, [r7, #16]
        break;
 800b456:	e009      	b.n	800b46c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	3318      	adds	r3, #24
 800b45e:	613b      	str	r3, [r7, #16]
        break;
 800b460:	e004      	b.n	800b46c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	331c      	adds	r3, #28
 800b468:	613b      	str	r3, [r7, #16]
        break;
 800b46a:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 800b46c:	68bb      	ldr	r3, [r7, #8]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d111      	bne.n	800b496 <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	681a      	ldr	r2, [r3, #0]
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b480:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	6898      	ldr	r0, [r3, #8]
 800b486:	6879      	ldr	r1, [r7, #4]
 800b488:	683b      	ldr	r3, [r7, #0]
 800b48a:	693a      	ldr	r2, [r7, #16]
 800b48c:	f000 fbd2 	bl	800bc34 <HAL_DMA_Start_IT>
 800b490:	4603      	mov	r3, r0
 800b492:	75fb      	strb	r3, [r7, #23]
 800b494:	e010      	b.n	800b4b8 <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	681a      	ldr	r2, [r3, #0]
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800b4a4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	68d8      	ldr	r0, [r3, #12]
 800b4aa:	6879      	ldr	r1, [r7, #4]
 800b4ac:	683b      	ldr	r3, [r7, #0]
 800b4ae:	693a      	ldr	r2, [r7, #16]
 800b4b0:	f000 fbc0 	bl	800bc34 <HAL_DMA_Start_IT>
 800b4b4:	4603      	mov	r3, r0
 800b4b6:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 800b4be:	7dfb      	ldrb	r3, [r7, #23]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d10f      	bne.n	800b4e4 <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	6819      	ldr	r1, [r3, #0]
 800b4ca:	68bb      	ldr	r3, [r7, #8]
 800b4cc:	f003 0310 	and.w	r3, r3, #16
 800b4d0:	2201      	movs	r2, #1
 800b4d2:	409a      	lsls	r2, r3
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	430a      	orrs	r2, r1
 800b4da:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 800b4dc:	2001      	movs	r0, #1
 800b4de:	f7fd fd89 	bl	8008ff4 <HAL_Delay>
 800b4e2:	e005      	b.n	800b4f0 <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	691b      	ldr	r3, [r3, #16]
 800b4e8:	f043 0204 	orr.w	r2, r3, #4
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 800b4f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	3718      	adds	r7, #24
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	bd80      	pop	{r7, pc}
 800b4fa:	bf00      	nop
 800b4fc:	0800b9d1 	.word	0x0800b9d1
 800b500:	0800b9f3 	.word	0x0800b9f3
 800b504:	0800ba0f 	.word	0x0800ba0f
 800b508:	0800ba79 	.word	0x0800ba79
 800b50c:	0800ba9b 	.word	0x0800ba9b
 800b510:	0800bab7 	.word	0x0800bab7

0800b514 <HAL_DAC_Stop_DMA>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800b514:	b580      	push	{r7, lr}
 800b516:	b084      	sub	sp, #16
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
 800b51c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	6819      	ldr	r1, [r3, #0]
 800b524:	683b      	ldr	r3, [r7, #0]
 800b526:	f003 0310 	and.w	r3, r3, #16
 800b52a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b52e:	fa02 f303 	lsl.w	r3, r2, r3
 800b532:	43da      	mvns	r2, r3
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	400a      	ands	r2, r1
 800b53a:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	6819      	ldr	r1, [r3, #0]
 800b542:	683b      	ldr	r3, [r7, #0]
 800b544:	f003 0310 	and.w	r3, r3, #16
 800b548:	2201      	movs	r2, #1
 800b54a:	fa02 f303 	lsl.w	r3, r2, r3
 800b54e:	43da      	mvns	r2, r3
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	400a      	ands	r2, r1
 800b556:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before enabling peripheral after disabling it */
  HAL_Delay(1);
 800b558:	2001      	movs	r0, #1
 800b55a:	f7fd fd4b 	bl	8008ff4 <HAL_Delay>

  /* Disable the DMA channel */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 800b55e:	683b      	ldr	r3, [r7, #0]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d10f      	bne.n	800b584 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	689b      	ldr	r3, [r3, #8]
 800b568:	4618      	mov	r0, r3
 800b56a:	f000 fbde 	bl	800bd2a <HAL_DMA_Abort>
 800b56e:	4603      	mov	r3, r0
 800b570:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	681a      	ldr	r2, [r3, #0]
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b580:	601a      	str	r2, [r3, #0]
 800b582:	e00e      	b.n	800b5a2 <HAL_DAC_Stop_DMA+0x8e>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle2);
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	68db      	ldr	r3, [r3, #12]
 800b588:	4618      	mov	r0, r3
 800b58a:	f000 fbce 	bl	800bd2a <HAL_DMA_Abort>
 800b58e:	4603      	mov	r3, r0
 800b590:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	681a      	ldr	r2, [r3, #0]
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800b5a0:	601a      	str	r2, [r3, #0]
  }

  /* Check if DMA Channel effectively disabled */
  if (status != HAL_OK)
 800b5a2:	7bfb      	ldrb	r3, [r7, #15]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d003      	beq.n	800b5b0 <HAL_DAC_Stop_DMA+0x9c>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	2204      	movs	r2, #4
 800b5ac:	711a      	strb	r2, [r3, #4]
 800b5ae:	e002      	b.n	800b5b6 <HAL_DAC_Stop_DMA+0xa2>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	2201      	movs	r2, #1
 800b5b4:	711a      	strb	r2, [r3, #4]
  }

  /* Return function status */
  return status;
 800b5b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	3710      	adds	r7, #16
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	bd80      	pop	{r7, pc}

0800b5c0 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800b5c0:	b480      	push	{r7}
 800b5c2:	b087      	sub	sp, #28
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	60f8      	str	r0, [r7, #12]
 800b5c8:	60b9      	str	r1, [r7, #8]
 800b5ca:	607a      	str	r2, [r7, #4]
 800b5cc:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800b5de:	68bb      	ldr	r3, [r7, #8]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d105      	bne.n	800b5f0 <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800b5e4:	697a      	ldr	r2, [r7, #20]
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	4413      	add	r3, r2
 800b5ea:	3308      	adds	r3, #8
 800b5ec:	617b      	str	r3, [r7, #20]
 800b5ee:	e004      	b.n	800b5fa <HAL_DAC_SetValue+0x3a>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800b5f0:	697a      	ldr	r2, [r7, #20]
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	4413      	add	r3, r2
 800b5f6:	3314      	adds	r3, #20
 800b5f8:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800b5fa:	697b      	ldr	r3, [r7, #20]
 800b5fc:	461a      	mov	r2, r3
 800b5fe:	683b      	ldr	r3, [r7, #0]
 800b600:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800b602:	2300      	movs	r3, #0
}
 800b604:	4618      	mov	r0, r3
 800b606:	371c      	adds	r7, #28
 800b608:	46bd      	mov	sp, r7
 800b60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60e:	4770      	bx	lr

0800b610 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800b610:	b480      	push	{r7}
 800b612:	b083      	sub	sp, #12
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800b618:	bf00      	nop
 800b61a:	370c      	adds	r7, #12
 800b61c:	46bd      	mov	sp, r7
 800b61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b622:	4770      	bx	lr

0800b624 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800b624:	b480      	push	{r7}
 800b626:	b083      	sub	sp, #12
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800b62c:	bf00      	nop
 800b62e:	370c      	adds	r7, #12
 800b630:	46bd      	mov	sp, r7
 800b632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b636:	4770      	bx	lr

0800b638 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800b638:	b480      	push	{r7}
 800b63a:	b083      	sub	sp, #12
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800b640:	bf00      	nop
 800b642:	370c      	adds	r7, #12
 800b644:	46bd      	mov	sp, r7
 800b646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64a:	4770      	bx	lr

0800b64c <HAL_DAC_GetValue>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval The selected DAC channel data output value.
  */
uint32_t HAL_DAC_GetValue(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800b64c:	b480      	push	{r7}
 800b64e:	b083      	sub	sp, #12
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
 800b654:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Returns the DAC channel data output register value */
  if (Channel == DAC_CHANNEL_1)
 800b656:	683b      	ldr	r3, [r7, #0]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d103      	bne.n	800b664 <HAL_DAC_GetValue+0x18>
  {
    return hdac->Instance->DOR1;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b662:	e002      	b.n	800b66a <HAL_DAC_GetValue+0x1e>
  }
  else
  {
    return hdac->Instance->DOR2;
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  }
}
 800b66a:	4618      	mov	r0, r3
 800b66c:	370c      	adds	r7, #12
 800b66e:	46bd      	mov	sp, r7
 800b670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b674:	4770      	bx	lr
	...

0800b678 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800b678:	b580      	push	{r7, lr}
 800b67a:	b08a      	sub	sp, #40	; 0x28
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	60f8      	str	r0, [r7, #12]
 800b680:	60b9      	str	r1, [r7, #8]
 800b682:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 800b684:	2300      	movs	r3, #0
 800b686:	61fb      	str	r3, [r7, #28]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	795b      	ldrb	r3, [r3, #5]
 800b68c:	2b01      	cmp	r3, #1
 800b68e:	d101      	bne.n	800b694 <HAL_DAC_ConfigChannel+0x1c>
 800b690:	2302      	movs	r3, #2
 800b692:	e194      	b.n	800b9be <HAL_DAC_ConfigChannel+0x346>
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	2201      	movs	r2, #1
 800b698:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	2202      	movs	r2, #2
 800b69e:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800b6a0:	68bb      	ldr	r3, [r7, #8]
 800b6a2:	689b      	ldr	r3, [r3, #8]
 800b6a4:	2b04      	cmp	r3, #4
 800b6a6:	d174      	bne.n	800b792 <HAL_DAC_ConfigChannel+0x11a>
    /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d137      	bne.n	800b71e <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 800b6ae:	f7fd fc95 	bl	8008fdc <HAL_GetTick>
 800b6b2:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800b6b4:	e011      	b.n	800b6da <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800b6b6:	f7fd fc91 	bl	8008fdc <HAL_GetTick>
 800b6ba:	4602      	mov	r2, r0
 800b6bc:	69fb      	ldr	r3, [r7, #28]
 800b6be:	1ad3      	subs	r3, r2, r3
 800b6c0:	2b01      	cmp	r3, #1
 800b6c2:	d90a      	bls.n	800b6da <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	691b      	ldr	r3, [r3, #16]
 800b6c8:	f043 0208 	orr.w	r2, r3, #8
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	2203      	movs	r2, #3
 800b6d4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800b6d6:	2303      	movs	r3, #3
 800b6d8:	e171      	b.n	800b9be <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d1e6      	bne.n	800b6b6 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 800b6e8:	2001      	movs	r0, #1
 800b6ea:	f7fd fc83 	bl	8008ff4 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	68ba      	ldr	r2, [r7, #8]
 800b6f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b6f6:	641a      	str	r2, [r3, #64]	; 0x40
 800b6f8:	e01e      	b.n	800b738 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800b6fa:	f7fd fc6f 	bl	8008fdc <HAL_GetTick>
 800b6fe:	4602      	mov	r2, r0
 800b700:	69fb      	ldr	r3, [r7, #28]
 800b702:	1ad3      	subs	r3, r2, r3
 800b704:	2b01      	cmp	r3, #1
 800b706:	d90a      	bls.n	800b71e <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	691b      	ldr	r3, [r3, #16]
 800b70c:	f043 0208 	orr.w	r2, r3, #8
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	2203      	movs	r2, #3
 800b718:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800b71a:	2303      	movs	r3, #3
 800b71c:	e14f      	b.n	800b9be <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b724:	2b00      	cmp	r3, #0
 800b726:	dbe8      	blt.n	800b6fa <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 800b728:	2001      	movs	r0, #1
 800b72a:	f7fd fc63 	bl	8008ff4 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	68ba      	ldr	r2, [r7, #8]
 800b734:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b736:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	f003 0310 	and.w	r3, r3, #16
 800b744:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800b748:	fa01 f303 	lsl.w	r3, r1, r3
 800b74c:	43db      	mvns	r3, r3
 800b74e:	ea02 0103 	and.w	r1, r2, r3
 800b752:	68bb      	ldr	r3, [r7, #8]
 800b754:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	f003 0310 	and.w	r3, r3, #16
 800b75c:	409a      	lsls	r2, r3
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	430a      	orrs	r2, r1
 800b764:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	f003 0310 	and.w	r3, r3, #16
 800b772:	21ff      	movs	r1, #255	; 0xff
 800b774:	fa01 f303 	lsl.w	r3, r1, r3
 800b778:	43db      	mvns	r3, r3
 800b77a:	ea02 0103 	and.w	r1, r2, r3
 800b77e:	68bb      	ldr	r3, [r7, #8]
 800b780:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	f003 0310 	and.w	r3, r3, #16
 800b788:	409a      	lsls	r2, r3
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	430a      	orrs	r2, r1
 800b790:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800b792:	68bb      	ldr	r3, [r7, #8]
 800b794:	69db      	ldr	r3, [r3, #28]
 800b796:	2b01      	cmp	r3, #1
 800b798:	d11d      	bne.n	800b7d6 <HAL_DAC_ConfigChannel+0x15e>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7a0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	f003 0310 	and.w	r3, r3, #16
 800b7a8:	221f      	movs	r2, #31
 800b7aa:	fa02 f303 	lsl.w	r3, r2, r3
 800b7ae:	43db      	mvns	r3, r3
 800b7b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b7b2:	4013      	ands	r3, r2
 800b7b4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800b7b6:	68bb      	ldr	r3, [r7, #8]
 800b7b8:	6a1b      	ldr	r3, [r3, #32]
 800b7ba:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	f003 0310 	and.w	r3, r3, #16
 800b7c2:	69ba      	ldr	r2, [r7, #24]
 800b7c4:	fa02 f303 	lsl.w	r3, r2, r3
 800b7c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b7ca:	4313      	orrs	r3, r2
 800b7cc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b7d4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7dc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	f003 0310 	and.w	r3, r3, #16
 800b7e4:	2207      	movs	r2, #7
 800b7e6:	fa02 f303 	lsl.w	r3, r2, r3
 800b7ea:	43db      	mvns	r3, r3
 800b7ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b7ee:	4013      	ands	r3, r2
 800b7f0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_EXTERNAL) == DAC_CHIPCONNECT_EXTERNAL)
 800b7f2:	68bb      	ldr	r3, [r7, #8]
 800b7f4:	699b      	ldr	r3, [r3, #24]
 800b7f6:	f003 0301 	and.w	r3, r3, #1
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d002      	beq.n	800b804 <HAL_DAC_ConfigChannel+0x18c>
  {
    connectOnChip = 0x00000000UL;
 800b7fe:	2300      	movs	r3, #0
 800b800:	623b      	str	r3, [r7, #32]
 800b802:	e011      	b.n	800b828 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_INTERNAL) == DAC_CHIPCONNECT_INTERNAL)
 800b804:	68bb      	ldr	r3, [r7, #8]
 800b806:	699b      	ldr	r3, [r3, #24]
 800b808:	f003 0302 	and.w	r3, r3, #2
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d002      	beq.n	800b816 <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800b810:	2301      	movs	r3, #1
 800b812:	623b      	str	r3, [r7, #32]
 800b814:	e008      	b.n	800b828 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_BOTH) == DAC_CHIPCONNECT_BOTH */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800b816:	68bb      	ldr	r3, [r7, #8]
 800b818:	695b      	ldr	r3, [r3, #20]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d102      	bne.n	800b824 <HAL_DAC_ConfigChannel+0x1ac>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800b81e:	2301      	movs	r3, #1
 800b820:	623b      	str	r3, [r7, #32]
 800b822:	e001      	b.n	800b828 <HAL_DAC_ConfigChannel+0x1b0>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800b824:	2300      	movs	r3, #0
 800b826:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800b828:	68bb      	ldr	r3, [r7, #8]
 800b82a:	689a      	ldr	r2, [r3, #8]
 800b82c:	68bb      	ldr	r3, [r7, #8]
 800b82e:	695b      	ldr	r3, [r3, #20]
 800b830:	4313      	orrs	r3, r2
 800b832:	6a3a      	ldr	r2, [r7, #32]
 800b834:	4313      	orrs	r3, r2
 800b836:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	f003 0310 	and.w	r3, r3, #16
 800b83e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b842:	fa02 f303 	lsl.w	r3, r2, r3
 800b846:	43db      	mvns	r3, r3
 800b848:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b84a:	4013      	ands	r3, r2
 800b84c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800b84e:	68bb      	ldr	r3, [r7, #8]
 800b850:	791b      	ldrb	r3, [r3, #4]
 800b852:	2b01      	cmp	r3, #1
 800b854:	d102      	bne.n	800b85c <HAL_DAC_ConfigChannel+0x1e4>
 800b856:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b85a:	e000      	b.n	800b85e <HAL_DAC_ConfigChannel+0x1e6>
 800b85c:	2300      	movs	r3, #0
 800b85e:	69ba      	ldr	r2, [r7, #24]
 800b860:	4313      	orrs	r3, r2
 800b862:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	f003 0310 	and.w	r3, r3, #16
 800b86a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b86e:	fa02 f303 	lsl.w	r3, r2, r3
 800b872:	43db      	mvns	r3, r3
 800b874:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b876:	4013      	ands	r3, r2
 800b878:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800b87a:	68bb      	ldr	r3, [r7, #8]
 800b87c:	795b      	ldrb	r3, [r3, #5]
 800b87e:	2b01      	cmp	r3, #1
 800b880:	d102      	bne.n	800b888 <HAL_DAC_ConfigChannel+0x210>
 800b882:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b886:	e000      	b.n	800b88a <HAL_DAC_ConfigChannel+0x212>
 800b888:	2300      	movs	r3, #0
 800b88a:	69ba      	ldr	r2, [r7, #24]
 800b88c:	4313      	orrs	r3, r2
 800b88e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 800b890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b892:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800b896:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 800b898:	68bb      	ldr	r3, [r7, #8]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	2b02      	cmp	r3, #2
 800b89e:	d114      	bne.n	800b8ca <HAL_DAC_ConfigChannel+0x252>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 800b8a0:	f001 fc28 	bl	800d0f4 <HAL_RCC_GetHCLKFreq>
 800b8a4:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 800b8a6:	697b      	ldr	r3, [r7, #20]
 800b8a8:	4a47      	ldr	r2, [pc, #284]	; (800b9c8 <HAL_DAC_ConfigChannel+0x350>)
 800b8aa:	4293      	cmp	r3, r2
 800b8ac:	d904      	bls.n	800b8b8 <HAL_DAC_ConfigChannel+0x240>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800b8ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b8b4:	627b      	str	r3, [r7, #36]	; 0x24
 800b8b6:	e00d      	b.n	800b8d4 <HAL_DAC_ConfigChannel+0x25c>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 800b8b8:	697b      	ldr	r3, [r7, #20]
 800b8ba:	4a44      	ldr	r2, [pc, #272]	; (800b9cc <HAL_DAC_ConfigChannel+0x354>)
 800b8bc:	4293      	cmp	r3, r2
 800b8be:	d909      	bls.n	800b8d4 <HAL_DAC_ConfigChannel+0x25c>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800b8c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b8c6:	627b      	str	r3, [r7, #36]	; 0x24
 800b8c8:	e004      	b.n	800b8d4 <HAL_DAC_ConfigChannel+0x25c>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800b8ca:	68bb      	ldr	r3, [r7, #8]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8d0:	4313      	orrs	r3, r2
 800b8d2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	f003 0310 	and.w	r3, r3, #16
 800b8da:	69ba      	ldr	r2, [r7, #24]
 800b8dc:	fa02 f303 	lsl.w	r3, r2, r3
 800b8e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8e2:	4313      	orrs	r3, r2
 800b8e4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	6819      	ldr	r1, [r3, #0]
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	f003 0310 	and.w	r3, r3, #16
 800b8fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b8fe:	fa02 f303 	lsl.w	r3, r2, r3
 800b902:	43da      	mvns	r2, r3
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	400a      	ands	r2, r1
 800b90a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	f003 0310 	and.w	r3, r3, #16
 800b91a:	f640 72fe 	movw	r2, #4094	; 0xffe
 800b91e:	fa02 f303 	lsl.w	r3, r2, r3
 800b922:	43db      	mvns	r3, r3
 800b924:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b926:	4013      	ands	r3, r2
 800b928:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800b92a:	68bb      	ldr	r3, [r7, #8]
 800b92c:	68db      	ldr	r3, [r3, #12]
 800b92e:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	f003 0310 	and.w	r3, r3, #16
 800b936:	69ba      	ldr	r2, [r7, #24]
 800b938:	fa02 f303 	lsl.w	r3, r2, r3
 800b93c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b93e:	4313      	orrs	r3, r2
 800b940:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b948:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	6819      	ldr	r1, [r3, #0]
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	f003 0310 	and.w	r3, r3, #16
 800b956:	22c0      	movs	r2, #192	; 0xc0
 800b958:	fa02 f303 	lsl.w	r3, r2, r3
 800b95c:	43da      	mvns	r2, r3
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	400a      	ands	r2, r1
 800b964:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800b966:	68bb      	ldr	r3, [r7, #8]
 800b968:	68db      	ldr	r3, [r3, #12]
 800b96a:	089b      	lsrs	r3, r3, #2
 800b96c:	f003 030f 	and.w	r3, r3, #15
 800b970:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800b972:	68bb      	ldr	r3, [r7, #8]
 800b974:	691b      	ldr	r3, [r3, #16]
 800b976:	089b      	lsrs	r3, r3, #2
 800b978:	021b      	lsls	r3, r3, #8
 800b97a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800b97e:	69ba      	ldr	r2, [r7, #24]
 800b980:	4313      	orrs	r3, r2
 800b982:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	f003 0310 	and.w	r3, r3, #16
 800b990:	f640 710f 	movw	r1, #3855	; 0xf0f
 800b994:	fa01 f303 	lsl.w	r3, r1, r3
 800b998:	43db      	mvns	r3, r3
 800b99a:	ea02 0103 	and.w	r1, r2, r3
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	f003 0310 	and.w	r3, r3, #16
 800b9a4:	69ba      	ldr	r2, [r7, #24]
 800b9a6:	409a      	lsls	r2, r3
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	430a      	orrs	r2, r1
 800b9ae:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	2201      	movs	r2, #1
 800b9b4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	2200      	movs	r2, #0
 800b9ba:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800b9bc:	2300      	movs	r3, #0
}
 800b9be:	4618      	mov	r0, r3
 800b9c0:	3728      	adds	r7, #40	; 0x28
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	bd80      	pop	{r7, pc}
 800b9c6:	bf00      	nop
 800b9c8:	09896800 	.word	0x09896800
 800b9cc:	04c4b400 	.word	0x04c4b400

0800b9d0 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	b084      	sub	sp, #16
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9dc:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800b9de:	68f8      	ldr	r0, [r7, #12]
 800b9e0:	f7ff fe16 	bl	800b610 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	2201      	movs	r2, #1
 800b9e8:	711a      	strb	r2, [r3, #4]
}
 800b9ea:	bf00      	nop
 800b9ec:	3710      	adds	r7, #16
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	bd80      	pop	{r7, pc}

0800b9f2 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800b9f2:	b580      	push	{r7, lr}
 800b9f4:	b084      	sub	sp, #16
 800b9f6:	af00      	add	r7, sp, #0
 800b9f8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9fe:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800ba00:	68f8      	ldr	r0, [r7, #12]
 800ba02:	f7ff fe0f 	bl	800b624 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800ba06:	bf00      	nop
 800ba08:	3710      	adds	r7, #16
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	bd80      	pop	{r7, pc}

0800ba0e <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800ba0e:	b580      	push	{r7, lr}
 800ba10:	b084      	sub	sp, #16
 800ba12:	af00      	add	r7, sp, #0
 800ba14:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba1a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	691b      	ldr	r3, [r3, #16]
 800ba20:	f043 0204 	orr.w	r2, r3, #4
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800ba28:	68f8      	ldr	r0, [r7, #12]
 800ba2a:	f7ff fe05 	bl	800b638 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	2201      	movs	r2, #1
 800ba32:	711a      	strb	r2, [r3, #4]
}
 800ba34:	bf00      	nop
 800ba36:	3710      	adds	r7, #16
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	bd80      	pop	{r7, pc}

0800ba3c <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800ba3c:	b480      	push	{r7}
 800ba3e:	b083      	sub	sp, #12
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800ba44:	bf00      	nop
 800ba46:	370c      	adds	r7, #12
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba4e:	4770      	bx	lr

0800ba50 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800ba50:	b480      	push	{r7}
 800ba52:	b083      	sub	sp, #12
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800ba58:	bf00      	nop
 800ba5a:	370c      	adds	r7, #12
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba62:	4770      	bx	lr

0800ba64 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800ba64:	b480      	push	{r7}
 800ba66:	b083      	sub	sp, #12
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800ba6c:	bf00      	nop
 800ba6e:	370c      	adds	r7, #12
 800ba70:	46bd      	mov	sp, r7
 800ba72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba76:	4770      	bx	lr

0800ba78 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b084      	sub	sp, #16
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba84:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800ba86:	68f8      	ldr	r0, [r7, #12]
 800ba88:	f7ff ffd8 	bl	800ba3c <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	2201      	movs	r2, #1
 800ba90:	711a      	strb	r2, [r3, #4]
}
 800ba92:	bf00      	nop
 800ba94:	3710      	adds	r7, #16
 800ba96:	46bd      	mov	sp, r7
 800ba98:	bd80      	pop	{r7, pc}

0800ba9a <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800ba9a:	b580      	push	{r7, lr}
 800ba9c:	b084      	sub	sp, #16
 800ba9e:	af00      	add	r7, sp, #0
 800baa0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800baa6:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800baa8:	68f8      	ldr	r0, [r7, #12]
 800baaa:	f7ff ffd1 	bl	800ba50 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800baae:	bf00      	nop
 800bab0:	3710      	adds	r7, #16
 800bab2:	46bd      	mov	sp, r7
 800bab4:	bd80      	pop	{r7, pc}

0800bab6 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800bab6:	b580      	push	{r7, lr}
 800bab8:	b084      	sub	sp, #16
 800baba:	af00      	add	r7, sp, #0
 800babc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bac2:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	691b      	ldr	r3, [r3, #16]
 800bac8:	f043 0204 	orr.w	r2, r3, #4
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800bad0:	68f8      	ldr	r0, [r7, #12]
 800bad2:	f7ff ffc7 	bl	800ba64 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	2201      	movs	r2, #1
 800bada:	711a      	strb	r2, [r3, #4]
}
 800badc:	bf00      	nop
 800bade:	3710      	adds	r7, #16
 800bae0:	46bd      	mov	sp, r7
 800bae2:	bd80      	pop	{r7, pc}

0800bae4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800bae4:	b580      	push	{r7, lr}
 800bae6:	b084      	sub	sp, #16
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d101      	bne.n	800baf6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800baf2:	2301      	movs	r3, #1
 800baf4:	e08d      	b.n	800bc12 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	461a      	mov	r2, r3
 800bafc:	4b47      	ldr	r3, [pc, #284]	; (800bc1c <HAL_DMA_Init+0x138>)
 800bafe:	429a      	cmp	r2, r3
 800bb00:	d80f      	bhi.n	800bb22 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	461a      	mov	r2, r3
 800bb08:	4b45      	ldr	r3, [pc, #276]	; (800bc20 <HAL_DMA_Init+0x13c>)
 800bb0a:	4413      	add	r3, r2
 800bb0c:	4a45      	ldr	r2, [pc, #276]	; (800bc24 <HAL_DMA_Init+0x140>)
 800bb0e:	fba2 2303 	umull	r2, r3, r2, r3
 800bb12:	091b      	lsrs	r3, r3, #4
 800bb14:	009a      	lsls	r2, r3, #2
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	4a42      	ldr	r2, [pc, #264]	; (800bc28 <HAL_DMA_Init+0x144>)
 800bb1e:	641a      	str	r2, [r3, #64]	; 0x40
 800bb20:	e00e      	b.n	800bb40 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	461a      	mov	r2, r3
 800bb28:	4b40      	ldr	r3, [pc, #256]	; (800bc2c <HAL_DMA_Init+0x148>)
 800bb2a:	4413      	add	r3, r2
 800bb2c:	4a3d      	ldr	r2, [pc, #244]	; (800bc24 <HAL_DMA_Init+0x140>)
 800bb2e:	fba2 2303 	umull	r2, r3, r2, r3
 800bb32:	091b      	lsrs	r3, r3, #4
 800bb34:	009a      	lsls	r2, r3, #2
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	4a3c      	ldr	r2, [pc, #240]	; (800bc30 <HAL_DMA_Init+0x14c>)
 800bb3e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	2202      	movs	r2, #2
 800bb44:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800bb56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb5a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800bb64:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	691b      	ldr	r3, [r3, #16]
 800bb6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800bb70:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	699b      	ldr	r3, [r3, #24]
 800bb76:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800bb7c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	6a1b      	ldr	r3, [r3, #32]
 800bb82:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800bb84:	68fa      	ldr	r2, [r7, #12]
 800bb86:	4313      	orrs	r3, r2
 800bb88:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	68fa      	ldr	r2, [r7, #12]
 800bb90:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800bb92:	6878      	ldr	r0, [r7, #4]
 800bb94:	f000 fa76 	bl	800c084 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	689b      	ldr	r3, [r3, #8]
 800bb9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bba0:	d102      	bne.n	800bba8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	2200      	movs	r2, #0
 800bba6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	685a      	ldr	r2, [r3, #4]
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bbb0:	b2d2      	uxtb	r2, r2
 800bbb2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bbb8:	687a      	ldr	r2, [r7, #4]
 800bbba:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800bbbc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	685b      	ldr	r3, [r3, #4]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d010      	beq.n	800bbe8 <HAL_DMA_Init+0x104>
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	685b      	ldr	r3, [r3, #4]
 800bbca:	2b04      	cmp	r3, #4
 800bbcc:	d80c      	bhi.n	800bbe8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800bbce:	6878      	ldr	r0, [r7, #4]
 800bbd0:	f000 fa96 	bl	800c100 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbd8:	2200      	movs	r2, #0
 800bbda:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bbe0:	687a      	ldr	r2, [r7, #4]
 800bbe2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800bbe4:	605a      	str	r2, [r3, #4]
 800bbe6:	e008      	b.n	800bbfa <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	2200      	movs	r2, #0
 800bbec:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	2200      	movs	r2, #0
 800bbf8:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	2200      	movs	r2, #0
 800bbfe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	2201      	movs	r2, #1
 800bc04:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800bc10:	2300      	movs	r3, #0
}
 800bc12:	4618      	mov	r0, r3
 800bc14:	3710      	adds	r7, #16
 800bc16:	46bd      	mov	sp, r7
 800bc18:	bd80      	pop	{r7, pc}
 800bc1a:	bf00      	nop
 800bc1c:	40020407 	.word	0x40020407
 800bc20:	bffdfff8 	.word	0xbffdfff8
 800bc24:	cccccccd 	.word	0xcccccccd
 800bc28:	40020000 	.word	0x40020000
 800bc2c:	bffdfbf8 	.word	0xbffdfbf8
 800bc30:	40020400 	.word	0x40020400

0800bc34 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800bc34:	b580      	push	{r7, lr}
 800bc36:	b086      	sub	sp, #24
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	60f8      	str	r0, [r7, #12]
 800bc3c:	60b9      	str	r1, [r7, #8]
 800bc3e:	607a      	str	r2, [r7, #4]
 800bc40:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bc42:	2300      	movs	r3, #0
 800bc44:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800bc4c:	2b01      	cmp	r3, #1
 800bc4e:	d101      	bne.n	800bc54 <HAL_DMA_Start_IT+0x20>
 800bc50:	2302      	movs	r3, #2
 800bc52:	e066      	b.n	800bd22 <HAL_DMA_Start_IT+0xee>
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	2201      	movs	r2, #1
 800bc58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800bc62:	b2db      	uxtb	r3, r3
 800bc64:	2b01      	cmp	r3, #1
 800bc66:	d155      	bne.n	800bd14 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	2202      	movs	r2, #2
 800bc6c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	2200      	movs	r2, #0
 800bc74:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	681a      	ldr	r2, [r3, #0]
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	f022 0201 	bic.w	r2, r2, #1
 800bc84:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800bc86:	683b      	ldr	r3, [r7, #0]
 800bc88:	687a      	ldr	r2, [r7, #4]
 800bc8a:	68b9      	ldr	r1, [r7, #8]
 800bc8c:	68f8      	ldr	r0, [r7, #12]
 800bc8e:	f000 f9bb 	bl	800c008 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d008      	beq.n	800bcac <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	681a      	ldr	r2, [r3, #0]
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	f042 020e 	orr.w	r2, r2, #14
 800bca8:	601a      	str	r2, [r3, #0]
 800bcaa:	e00f      	b.n	800bccc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	681a      	ldr	r2, [r3, #0]
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	f022 0204 	bic.w	r2, r2, #4
 800bcba:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	681a      	ldr	r2, [r3, #0]
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	f042 020a 	orr.w	r2, r2, #10
 800bcca:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d007      	beq.n	800bcea <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bcde:	681a      	ldr	r2, [r3, #0]
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bce4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bce8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d007      	beq.n	800bd02 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bcf6:	681a      	ldr	r2, [r3, #0]
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bcfc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bd00:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	681a      	ldr	r2, [r3, #0]
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	f042 0201 	orr.w	r2, r2, #1
 800bd10:	601a      	str	r2, [r3, #0]
 800bd12:	e005      	b.n	800bd20 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	2200      	movs	r2, #0
 800bd18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800bd1c:	2302      	movs	r3, #2
 800bd1e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800bd20:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd22:	4618      	mov	r0, r3
 800bd24:	3718      	adds	r7, #24
 800bd26:	46bd      	mov	sp, r7
 800bd28:	bd80      	pop	{r7, pc}

0800bd2a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800bd2a:	b480      	push	{r7}
 800bd2c:	b085      	sub	sp, #20
 800bd2e:	af00      	add	r7, sp, #0
 800bd30:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bd32:	2300      	movs	r3, #0
 800bd34:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800bd3c:	b2db      	uxtb	r3, r3
 800bd3e:	2b02      	cmp	r3, #2
 800bd40:	d005      	beq.n	800bd4e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	2204      	movs	r2, #4
 800bd46:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800bd48:	2301      	movs	r3, #1
 800bd4a:	73fb      	strb	r3, [r7, #15]
 800bd4c:	e037      	b.n	800bdbe <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	681a      	ldr	r2, [r3, #0]
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	f022 020e 	bic.w	r2, r2, #14
 800bd5c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bd62:	681a      	ldr	r2, [r3, #0]
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bd68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bd6c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	681a      	ldr	r2, [r3, #0]
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	f022 0201 	bic.w	r2, r2, #1
 800bd7c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd82:	f003 021f 	and.w	r2, r3, #31
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd8a:	2101      	movs	r1, #1
 800bd8c:	fa01 f202 	lsl.w	r2, r1, r2
 800bd90:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd96:	687a      	ldr	r2, [r7, #4]
 800bd98:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800bd9a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d00c      	beq.n	800bdbe <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bda8:	681a      	ldr	r2, [r3, #0]
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bdae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bdb2:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bdb8:	687a      	ldr	r2, [r7, #4]
 800bdba:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800bdbc:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	2201      	movs	r2, #1
 800bdc2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	2200      	movs	r2, #0
 800bdca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800bdce:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	3714      	adds	r7, #20
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdda:	4770      	bx	lr

0800bddc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b084      	sub	sp, #16
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bde4:	2300      	movs	r3, #0
 800bde6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800bdee:	b2db      	uxtb	r3, r3
 800bdf0:	2b02      	cmp	r3, #2
 800bdf2:	d00d      	beq.n	800be10 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	2204      	movs	r2, #4
 800bdf8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	2201      	movs	r2, #1
 800bdfe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	2200      	movs	r2, #0
 800be06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800be0a:	2301      	movs	r3, #1
 800be0c:	73fb      	strb	r3, [r7, #15]
 800be0e:	e047      	b.n	800bea0 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	681a      	ldr	r2, [r3, #0]
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	f022 020e 	bic.w	r2, r2, #14
 800be1e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	681a      	ldr	r2, [r3, #0]
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	f022 0201 	bic.w	r2, r2, #1
 800be2e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800be34:	681a      	ldr	r2, [r3, #0]
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800be3a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800be3e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be44:	f003 021f 	and.w	r2, r3, #31
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be4c:	2101      	movs	r1, #1
 800be4e:	fa01 f202 	lsl.w	r2, r1, r2
 800be52:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be58:	687a      	ldr	r2, [r7, #4]
 800be5a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800be5c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be62:	2b00      	cmp	r3, #0
 800be64:	d00c      	beq.n	800be80 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be6a:	681a      	ldr	r2, [r3, #0]
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be70:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800be74:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be7a:	687a      	ldr	r2, [r7, #4]
 800be7c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800be7e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	2201      	movs	r2, #1
 800be84:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	2200      	movs	r2, #0
 800be8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be94:	2b00      	cmp	r3, #0
 800be96:	d003      	beq.n	800bea0 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be9c:	6878      	ldr	r0, [r7, #4]
 800be9e:	4798      	blx	r3
    }
  }
  return status;
 800bea0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bea2:	4618      	mov	r0, r3
 800bea4:	3710      	adds	r7, #16
 800bea6:	46bd      	mov	sp, r7
 800bea8:	bd80      	pop	{r7, pc}

0800beaa <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800beaa:	b580      	push	{r7, lr}
 800beac:	b084      	sub	sp, #16
 800beae:	af00      	add	r7, sp, #0
 800beb0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bec6:	f003 031f 	and.w	r3, r3, #31
 800beca:	2204      	movs	r2, #4
 800becc:	409a      	lsls	r2, r3
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	4013      	ands	r3, r2
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d026      	beq.n	800bf24 <HAL_DMA_IRQHandler+0x7a>
 800bed6:	68bb      	ldr	r3, [r7, #8]
 800bed8:	f003 0304 	and.w	r3, r3, #4
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d021      	beq.n	800bf24 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	f003 0320 	and.w	r3, r3, #32
 800beea:	2b00      	cmp	r3, #0
 800beec:	d107      	bne.n	800befe <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	681a      	ldr	r2, [r3, #0]
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	f022 0204 	bic.w	r2, r2, #4
 800befc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf02:	f003 021f 	and.w	r2, r3, #31
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf0a:	2104      	movs	r1, #4
 800bf0c:	fa01 f202 	lsl.w	r2, r1, r2
 800bf10:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d071      	beq.n	800bffe <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf1e:	6878      	ldr	r0, [r7, #4]
 800bf20:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800bf22:	e06c      	b.n	800bffe <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf28:	f003 031f 	and.w	r3, r3, #31
 800bf2c:	2202      	movs	r2, #2
 800bf2e:	409a      	lsls	r2, r3
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	4013      	ands	r3, r2
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d02e      	beq.n	800bf96 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800bf38:	68bb      	ldr	r3, [r7, #8]
 800bf3a:	f003 0302 	and.w	r3, r3, #2
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d029      	beq.n	800bf96 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	f003 0320 	and.w	r3, r3, #32
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d10b      	bne.n	800bf68 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	681a      	ldr	r2, [r3, #0]
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	f022 020a 	bic.w	r2, r2, #10
 800bf5e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	2201      	movs	r2, #1
 800bf64:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf6c:	f003 021f 	and.w	r2, r3, #31
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf74:	2102      	movs	r1, #2
 800bf76:	fa01 f202 	lsl.w	r2, r1, r2
 800bf7a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	2200      	movs	r2, #0
 800bf80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d038      	beq.n	800bffe <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf90:	6878      	ldr	r0, [r7, #4]
 800bf92:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800bf94:	e033      	b.n	800bffe <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf9a:	f003 031f 	and.w	r3, r3, #31
 800bf9e:	2208      	movs	r2, #8
 800bfa0:	409a      	lsls	r2, r3
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	4013      	ands	r3, r2
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d02a      	beq.n	800c000 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800bfaa:	68bb      	ldr	r3, [r7, #8]
 800bfac:	f003 0308 	and.w	r3, r3, #8
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d025      	beq.n	800c000 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	681a      	ldr	r2, [r3, #0]
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	f022 020e 	bic.w	r2, r2, #14
 800bfc2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bfc8:	f003 021f 	and.w	r2, r3, #31
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfd0:	2101      	movs	r1, #1
 800bfd2:	fa01 f202 	lsl.w	r2, r1, r2
 800bfd6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	2201      	movs	r2, #1
 800bfdc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	2201      	movs	r2, #1
 800bfe2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	2200      	movs	r2, #0
 800bfea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d004      	beq.n	800c000 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bffa:	6878      	ldr	r0, [r7, #4]
 800bffc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800bffe:	bf00      	nop
 800c000:	bf00      	nop
}
 800c002:	3710      	adds	r7, #16
 800c004:	46bd      	mov	sp, r7
 800c006:	bd80      	pop	{r7, pc}

0800c008 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800c008:	b480      	push	{r7}
 800c00a:	b085      	sub	sp, #20
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	60f8      	str	r0, [r7, #12]
 800c010:	60b9      	str	r1, [r7, #8]
 800c012:	607a      	str	r2, [r7, #4]
 800c014:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c01a:	68fa      	ldr	r2, [r7, #12]
 800c01c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800c01e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c024:	2b00      	cmp	r3, #0
 800c026:	d004      	beq.n	800c032 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c02c:	68fa      	ldr	r2, [r7, #12]
 800c02e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800c030:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c036:	f003 021f 	and.w	r2, r3, #31
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c03e:	2101      	movs	r1, #1
 800c040:	fa01 f202 	lsl.w	r2, r1, r2
 800c044:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	683a      	ldr	r2, [r7, #0]
 800c04c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	689b      	ldr	r3, [r3, #8]
 800c052:	2b10      	cmp	r3, #16
 800c054:	d108      	bne.n	800c068 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	687a      	ldr	r2, [r7, #4]
 800c05c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	68ba      	ldr	r2, [r7, #8]
 800c064:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800c066:	e007      	b.n	800c078 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	68ba      	ldr	r2, [r7, #8]
 800c06e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	687a      	ldr	r2, [r7, #4]
 800c076:	60da      	str	r2, [r3, #12]
}
 800c078:	bf00      	nop
 800c07a:	3714      	adds	r7, #20
 800c07c:	46bd      	mov	sp, r7
 800c07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c082:	4770      	bx	lr

0800c084 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800c084:	b480      	push	{r7}
 800c086:	b087      	sub	sp, #28
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	461a      	mov	r2, r3
 800c092:	4b16      	ldr	r3, [pc, #88]	; (800c0ec <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800c094:	429a      	cmp	r2, r3
 800c096:	d802      	bhi.n	800c09e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800c098:	4b15      	ldr	r3, [pc, #84]	; (800c0f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800c09a:	617b      	str	r3, [r7, #20]
 800c09c:	e001      	b.n	800c0a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800c09e:	4b15      	ldr	r3, [pc, #84]	; (800c0f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800c0a0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800c0a2:	697b      	ldr	r3, [r7, #20]
 800c0a4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	b2db      	uxtb	r3, r3
 800c0ac:	3b08      	subs	r3, #8
 800c0ae:	4a12      	ldr	r2, [pc, #72]	; (800c0f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800c0b0:	fba2 2303 	umull	r2, r3, r2, r3
 800c0b4:	091b      	lsrs	r3, r3, #4
 800c0b6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0bc:	089b      	lsrs	r3, r3, #2
 800c0be:	009a      	lsls	r2, r3, #2
 800c0c0:	693b      	ldr	r3, [r7, #16]
 800c0c2:	4413      	add	r3, r2
 800c0c4:	461a      	mov	r2, r3
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	4a0b      	ldr	r2, [pc, #44]	; (800c0fc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800c0ce:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	f003 031f 	and.w	r3, r3, #31
 800c0d6:	2201      	movs	r2, #1
 800c0d8:	409a      	lsls	r2, r3
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	651a      	str	r2, [r3, #80]	; 0x50
}
 800c0de:	bf00      	nop
 800c0e0:	371c      	adds	r7, #28
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e8:	4770      	bx	lr
 800c0ea:	bf00      	nop
 800c0ec:	40020407 	.word	0x40020407
 800c0f0:	40020800 	.word	0x40020800
 800c0f4:	40020820 	.word	0x40020820
 800c0f8:	cccccccd 	.word	0xcccccccd
 800c0fc:	40020880 	.word	0x40020880

0800c100 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800c100:	b480      	push	{r7}
 800c102:	b085      	sub	sp, #20
 800c104:	af00      	add	r7, sp, #0
 800c106:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	685b      	ldr	r3, [r3, #4]
 800c10c:	b2db      	uxtb	r3, r3
 800c10e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800c110:	68fa      	ldr	r2, [r7, #12]
 800c112:	4b0b      	ldr	r3, [pc, #44]	; (800c140 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800c114:	4413      	add	r3, r2
 800c116:	009b      	lsls	r3, r3, #2
 800c118:	461a      	mov	r2, r3
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	4a08      	ldr	r2, [pc, #32]	; (800c144 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800c122:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	3b01      	subs	r3, #1
 800c128:	f003 031f 	and.w	r3, r3, #31
 800c12c:	2201      	movs	r2, #1
 800c12e:	409a      	lsls	r2, r3
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800c134:	bf00      	nop
 800c136:	3714      	adds	r7, #20
 800c138:	46bd      	mov	sp, r7
 800c13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c13e:	4770      	bx	lr
 800c140:	1000823f 	.word	0x1000823f
 800c144:	40020940 	.word	0x40020940

0800c148 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800c148:	b480      	push	{r7}
 800c14a:	b087      	sub	sp, #28
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	6078      	str	r0, [r7, #4]
 800c150:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800c152:	2300      	movs	r3, #0
 800c154:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800c156:	e15a      	b.n	800c40e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800c158:	683b      	ldr	r3, [r7, #0]
 800c15a:	681a      	ldr	r2, [r3, #0]
 800c15c:	2101      	movs	r1, #1
 800c15e:	697b      	ldr	r3, [r7, #20]
 800c160:	fa01 f303 	lsl.w	r3, r1, r3
 800c164:	4013      	ands	r3, r2
 800c166:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	f000 814c 	beq.w	800c408 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800c170:	683b      	ldr	r3, [r7, #0]
 800c172:	685b      	ldr	r3, [r3, #4]
 800c174:	2b01      	cmp	r3, #1
 800c176:	d00b      	beq.n	800c190 <HAL_GPIO_Init+0x48>
 800c178:	683b      	ldr	r3, [r7, #0]
 800c17a:	685b      	ldr	r3, [r3, #4]
 800c17c:	2b02      	cmp	r3, #2
 800c17e:	d007      	beq.n	800c190 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c180:	683b      	ldr	r3, [r7, #0]
 800c182:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800c184:	2b11      	cmp	r3, #17
 800c186:	d003      	beq.n	800c190 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c188:	683b      	ldr	r3, [r7, #0]
 800c18a:	685b      	ldr	r3, [r3, #4]
 800c18c:	2b12      	cmp	r3, #18
 800c18e:	d130      	bne.n	800c1f2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	689b      	ldr	r3, [r3, #8]
 800c194:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800c196:	697b      	ldr	r3, [r7, #20]
 800c198:	005b      	lsls	r3, r3, #1
 800c19a:	2203      	movs	r2, #3
 800c19c:	fa02 f303 	lsl.w	r3, r2, r3
 800c1a0:	43db      	mvns	r3, r3
 800c1a2:	693a      	ldr	r2, [r7, #16]
 800c1a4:	4013      	ands	r3, r2
 800c1a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800c1a8:	683b      	ldr	r3, [r7, #0]
 800c1aa:	68da      	ldr	r2, [r3, #12]
 800c1ac:	697b      	ldr	r3, [r7, #20]
 800c1ae:	005b      	lsls	r3, r3, #1
 800c1b0:	fa02 f303 	lsl.w	r3, r2, r3
 800c1b4:	693a      	ldr	r2, [r7, #16]
 800c1b6:	4313      	orrs	r3, r2
 800c1b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	693a      	ldr	r2, [r7, #16]
 800c1be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	685b      	ldr	r3, [r3, #4]
 800c1c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800c1c6:	2201      	movs	r2, #1
 800c1c8:	697b      	ldr	r3, [r7, #20]
 800c1ca:	fa02 f303 	lsl.w	r3, r2, r3
 800c1ce:	43db      	mvns	r3, r3
 800c1d0:	693a      	ldr	r2, [r7, #16]
 800c1d2:	4013      	ands	r3, r2
 800c1d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800c1d6:	683b      	ldr	r3, [r7, #0]
 800c1d8:	685b      	ldr	r3, [r3, #4]
 800c1da:	091b      	lsrs	r3, r3, #4
 800c1dc:	f003 0201 	and.w	r2, r3, #1
 800c1e0:	697b      	ldr	r3, [r7, #20]
 800c1e2:	fa02 f303 	lsl.w	r3, r2, r3
 800c1e6:	693a      	ldr	r2, [r7, #16]
 800c1e8:	4313      	orrs	r3, r2
 800c1ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	693a      	ldr	r2, [r7, #16]
 800c1f0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	68db      	ldr	r3, [r3, #12]
 800c1f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800c1f8:	697b      	ldr	r3, [r7, #20]
 800c1fa:	005b      	lsls	r3, r3, #1
 800c1fc:	2203      	movs	r2, #3
 800c1fe:	fa02 f303 	lsl.w	r3, r2, r3
 800c202:	43db      	mvns	r3, r3
 800c204:	693a      	ldr	r2, [r7, #16]
 800c206:	4013      	ands	r3, r2
 800c208:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800c20a:	683b      	ldr	r3, [r7, #0]
 800c20c:	689a      	ldr	r2, [r3, #8]
 800c20e:	697b      	ldr	r3, [r7, #20]
 800c210:	005b      	lsls	r3, r3, #1
 800c212:	fa02 f303 	lsl.w	r3, r2, r3
 800c216:	693a      	ldr	r2, [r7, #16]
 800c218:	4313      	orrs	r3, r2
 800c21a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	693a      	ldr	r2, [r7, #16]
 800c220:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c222:	683b      	ldr	r3, [r7, #0]
 800c224:	685b      	ldr	r3, [r3, #4]
 800c226:	2b02      	cmp	r3, #2
 800c228:	d003      	beq.n	800c232 <HAL_GPIO_Init+0xea>
 800c22a:	683b      	ldr	r3, [r7, #0]
 800c22c:	685b      	ldr	r3, [r3, #4]
 800c22e:	2b12      	cmp	r3, #18
 800c230:	d123      	bne.n	800c27a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800c232:	697b      	ldr	r3, [r7, #20]
 800c234:	08da      	lsrs	r2, r3, #3
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	3208      	adds	r2, #8
 800c23a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c23e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800c240:	697b      	ldr	r3, [r7, #20]
 800c242:	f003 0307 	and.w	r3, r3, #7
 800c246:	009b      	lsls	r3, r3, #2
 800c248:	220f      	movs	r2, #15
 800c24a:	fa02 f303 	lsl.w	r3, r2, r3
 800c24e:	43db      	mvns	r3, r3
 800c250:	693a      	ldr	r2, [r7, #16]
 800c252:	4013      	ands	r3, r2
 800c254:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800c256:	683b      	ldr	r3, [r7, #0]
 800c258:	691a      	ldr	r2, [r3, #16]
 800c25a:	697b      	ldr	r3, [r7, #20]
 800c25c:	f003 0307 	and.w	r3, r3, #7
 800c260:	009b      	lsls	r3, r3, #2
 800c262:	fa02 f303 	lsl.w	r3, r2, r3
 800c266:	693a      	ldr	r2, [r7, #16]
 800c268:	4313      	orrs	r3, r2
 800c26a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800c26c:	697b      	ldr	r3, [r7, #20]
 800c26e:	08da      	lsrs	r2, r3, #3
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	3208      	adds	r2, #8
 800c274:	6939      	ldr	r1, [r7, #16]
 800c276:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800c280:	697b      	ldr	r3, [r7, #20]
 800c282:	005b      	lsls	r3, r3, #1
 800c284:	2203      	movs	r2, #3
 800c286:	fa02 f303 	lsl.w	r3, r2, r3
 800c28a:	43db      	mvns	r3, r3
 800c28c:	693a      	ldr	r2, [r7, #16]
 800c28e:	4013      	ands	r3, r2
 800c290:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800c292:	683b      	ldr	r3, [r7, #0]
 800c294:	685b      	ldr	r3, [r3, #4]
 800c296:	f003 0203 	and.w	r2, r3, #3
 800c29a:	697b      	ldr	r3, [r7, #20]
 800c29c:	005b      	lsls	r3, r3, #1
 800c29e:	fa02 f303 	lsl.w	r3, r2, r3
 800c2a2:	693a      	ldr	r2, [r7, #16]
 800c2a4:	4313      	orrs	r3, r2
 800c2a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	693a      	ldr	r2, [r7, #16]
 800c2ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800c2ae:	683b      	ldr	r3, [r7, #0]
 800c2b0:	685b      	ldr	r3, [r3, #4]
 800c2b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	f000 80a6 	beq.w	800c408 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c2bc:	4b5b      	ldr	r3, [pc, #364]	; (800c42c <HAL_GPIO_Init+0x2e4>)
 800c2be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c2c0:	4a5a      	ldr	r2, [pc, #360]	; (800c42c <HAL_GPIO_Init+0x2e4>)
 800c2c2:	f043 0301 	orr.w	r3, r3, #1
 800c2c6:	6613      	str	r3, [r2, #96]	; 0x60
 800c2c8:	4b58      	ldr	r3, [pc, #352]	; (800c42c <HAL_GPIO_Init+0x2e4>)
 800c2ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c2cc:	f003 0301 	and.w	r3, r3, #1
 800c2d0:	60bb      	str	r3, [r7, #8]
 800c2d2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800c2d4:	4a56      	ldr	r2, [pc, #344]	; (800c430 <HAL_GPIO_Init+0x2e8>)
 800c2d6:	697b      	ldr	r3, [r7, #20]
 800c2d8:	089b      	lsrs	r3, r3, #2
 800c2da:	3302      	adds	r3, #2
 800c2dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c2e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800c2e2:	697b      	ldr	r3, [r7, #20]
 800c2e4:	f003 0303 	and.w	r3, r3, #3
 800c2e8:	009b      	lsls	r3, r3, #2
 800c2ea:	220f      	movs	r2, #15
 800c2ec:	fa02 f303 	lsl.w	r3, r2, r3
 800c2f0:	43db      	mvns	r3, r3
 800c2f2:	693a      	ldr	r2, [r7, #16]
 800c2f4:	4013      	ands	r3, r2
 800c2f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800c2fe:	d01f      	beq.n	800c340 <HAL_GPIO_Init+0x1f8>
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	4a4c      	ldr	r2, [pc, #304]	; (800c434 <HAL_GPIO_Init+0x2ec>)
 800c304:	4293      	cmp	r3, r2
 800c306:	d019      	beq.n	800c33c <HAL_GPIO_Init+0x1f4>
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	4a4b      	ldr	r2, [pc, #300]	; (800c438 <HAL_GPIO_Init+0x2f0>)
 800c30c:	4293      	cmp	r3, r2
 800c30e:	d013      	beq.n	800c338 <HAL_GPIO_Init+0x1f0>
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	4a4a      	ldr	r2, [pc, #296]	; (800c43c <HAL_GPIO_Init+0x2f4>)
 800c314:	4293      	cmp	r3, r2
 800c316:	d00d      	beq.n	800c334 <HAL_GPIO_Init+0x1ec>
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	4a49      	ldr	r2, [pc, #292]	; (800c440 <HAL_GPIO_Init+0x2f8>)
 800c31c:	4293      	cmp	r3, r2
 800c31e:	d007      	beq.n	800c330 <HAL_GPIO_Init+0x1e8>
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	4a48      	ldr	r2, [pc, #288]	; (800c444 <HAL_GPIO_Init+0x2fc>)
 800c324:	4293      	cmp	r3, r2
 800c326:	d101      	bne.n	800c32c <HAL_GPIO_Init+0x1e4>
 800c328:	2305      	movs	r3, #5
 800c32a:	e00a      	b.n	800c342 <HAL_GPIO_Init+0x1fa>
 800c32c:	2306      	movs	r3, #6
 800c32e:	e008      	b.n	800c342 <HAL_GPIO_Init+0x1fa>
 800c330:	2304      	movs	r3, #4
 800c332:	e006      	b.n	800c342 <HAL_GPIO_Init+0x1fa>
 800c334:	2303      	movs	r3, #3
 800c336:	e004      	b.n	800c342 <HAL_GPIO_Init+0x1fa>
 800c338:	2302      	movs	r3, #2
 800c33a:	e002      	b.n	800c342 <HAL_GPIO_Init+0x1fa>
 800c33c:	2301      	movs	r3, #1
 800c33e:	e000      	b.n	800c342 <HAL_GPIO_Init+0x1fa>
 800c340:	2300      	movs	r3, #0
 800c342:	697a      	ldr	r2, [r7, #20]
 800c344:	f002 0203 	and.w	r2, r2, #3
 800c348:	0092      	lsls	r2, r2, #2
 800c34a:	4093      	lsls	r3, r2
 800c34c:	693a      	ldr	r2, [r7, #16]
 800c34e:	4313      	orrs	r3, r2
 800c350:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800c352:	4937      	ldr	r1, [pc, #220]	; (800c430 <HAL_GPIO_Init+0x2e8>)
 800c354:	697b      	ldr	r3, [r7, #20]
 800c356:	089b      	lsrs	r3, r3, #2
 800c358:	3302      	adds	r3, #2
 800c35a:	693a      	ldr	r2, [r7, #16]
 800c35c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800c360:	4b39      	ldr	r3, [pc, #228]	; (800c448 <HAL_GPIO_Init+0x300>)
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	43db      	mvns	r3, r3
 800c36a:	693a      	ldr	r2, [r7, #16]
 800c36c:	4013      	ands	r3, r2
 800c36e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800c370:	683b      	ldr	r3, [r7, #0]
 800c372:	685b      	ldr	r3, [r3, #4]
 800c374:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d003      	beq.n	800c384 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800c37c:	693a      	ldr	r2, [r7, #16]
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	4313      	orrs	r3, r2
 800c382:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800c384:	4a30      	ldr	r2, [pc, #192]	; (800c448 <HAL_GPIO_Init+0x300>)
 800c386:	693b      	ldr	r3, [r7, #16]
 800c388:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800c38a:	4b2f      	ldr	r3, [pc, #188]	; (800c448 <HAL_GPIO_Init+0x300>)
 800c38c:	685b      	ldr	r3, [r3, #4]
 800c38e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	43db      	mvns	r3, r3
 800c394:	693a      	ldr	r2, [r7, #16]
 800c396:	4013      	ands	r3, r2
 800c398:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800c39a:	683b      	ldr	r3, [r7, #0]
 800c39c:	685b      	ldr	r3, [r3, #4]
 800c39e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d003      	beq.n	800c3ae <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800c3a6:	693a      	ldr	r2, [r7, #16]
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	4313      	orrs	r3, r2
 800c3ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800c3ae:	4a26      	ldr	r2, [pc, #152]	; (800c448 <HAL_GPIO_Init+0x300>)
 800c3b0:	693b      	ldr	r3, [r7, #16]
 800c3b2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800c3b4:	4b24      	ldr	r3, [pc, #144]	; (800c448 <HAL_GPIO_Init+0x300>)
 800c3b6:	689b      	ldr	r3, [r3, #8]
 800c3b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	43db      	mvns	r3, r3
 800c3be:	693a      	ldr	r2, [r7, #16]
 800c3c0:	4013      	ands	r3, r2
 800c3c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800c3c4:	683b      	ldr	r3, [r7, #0]
 800c3c6:	685b      	ldr	r3, [r3, #4]
 800c3c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d003      	beq.n	800c3d8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800c3d0:	693a      	ldr	r2, [r7, #16]
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	4313      	orrs	r3, r2
 800c3d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800c3d8:	4a1b      	ldr	r2, [pc, #108]	; (800c448 <HAL_GPIO_Init+0x300>)
 800c3da:	693b      	ldr	r3, [r7, #16]
 800c3dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800c3de:	4b1a      	ldr	r3, [pc, #104]	; (800c448 <HAL_GPIO_Init+0x300>)
 800c3e0:	68db      	ldr	r3, [r3, #12]
 800c3e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	43db      	mvns	r3, r3
 800c3e8:	693a      	ldr	r2, [r7, #16]
 800c3ea:	4013      	ands	r3, r2
 800c3ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800c3ee:	683b      	ldr	r3, [r7, #0]
 800c3f0:	685b      	ldr	r3, [r3, #4]
 800c3f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d003      	beq.n	800c402 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800c3fa:	693a      	ldr	r2, [r7, #16]
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	4313      	orrs	r3, r2
 800c400:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800c402:	4a11      	ldr	r2, [pc, #68]	; (800c448 <HAL_GPIO_Init+0x300>)
 800c404:	693b      	ldr	r3, [r7, #16]
 800c406:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800c408:	697b      	ldr	r3, [r7, #20]
 800c40a:	3301      	adds	r3, #1
 800c40c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800c40e:	683b      	ldr	r3, [r7, #0]
 800c410:	681a      	ldr	r2, [r3, #0]
 800c412:	697b      	ldr	r3, [r7, #20]
 800c414:	fa22 f303 	lsr.w	r3, r2, r3
 800c418:	2b00      	cmp	r3, #0
 800c41a:	f47f ae9d 	bne.w	800c158 <HAL_GPIO_Init+0x10>
  }
}
 800c41e:	bf00      	nop
 800c420:	371c      	adds	r7, #28
 800c422:	46bd      	mov	sp, r7
 800c424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c428:	4770      	bx	lr
 800c42a:	bf00      	nop
 800c42c:	40021000 	.word	0x40021000
 800c430:	40010000 	.word	0x40010000
 800c434:	48000400 	.word	0x48000400
 800c438:	48000800 	.word	0x48000800
 800c43c:	48000c00 	.word	0x48000c00
 800c440:	48001000 	.word	0x48001000
 800c444:	48001400 	.word	0x48001400
 800c448:	40010400 	.word	0x40010400

0800c44c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800c44c:	b480      	push	{r7}
 800c44e:	b087      	sub	sp, #28
 800c450:	af00      	add	r7, sp, #0
 800c452:	6078      	str	r0, [r7, #4]
 800c454:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800c456:	2300      	movs	r3, #0
 800c458:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 800c45a:	e0bd      	b.n	800c5d8 <HAL_GPIO_DeInit+0x18c>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 800c45c:	2201      	movs	r2, #1
 800c45e:	697b      	ldr	r3, [r7, #20]
 800c460:	fa02 f303 	lsl.w	r3, r2, r3
 800c464:	683a      	ldr	r2, [r7, #0]
 800c466:	4013      	ands	r3, r2
 800c468:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800c46a:	693b      	ldr	r3, [r7, #16]
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	f000 80b0 	beq.w	800c5d2 <HAL_GPIO_DeInit+0x186>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 800c472:	4a60      	ldr	r2, [pc, #384]	; (800c5f4 <HAL_GPIO_DeInit+0x1a8>)
 800c474:	697b      	ldr	r3, [r7, #20]
 800c476:	089b      	lsrs	r3, r3, #2
 800c478:	3302      	adds	r3, #2
 800c47a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c47e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800c480:	697b      	ldr	r3, [r7, #20]
 800c482:	f003 0303 	and.w	r3, r3, #3
 800c486:	009b      	lsls	r3, r3, #2
 800c488:	220f      	movs	r2, #15
 800c48a:	fa02 f303 	lsl.w	r3, r2, r3
 800c48e:	68fa      	ldr	r2, [r7, #12]
 800c490:	4013      	ands	r3, r2
 800c492:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800c49a:	d01f      	beq.n	800c4dc <HAL_GPIO_DeInit+0x90>
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	4a56      	ldr	r2, [pc, #344]	; (800c5f8 <HAL_GPIO_DeInit+0x1ac>)
 800c4a0:	4293      	cmp	r3, r2
 800c4a2:	d019      	beq.n	800c4d8 <HAL_GPIO_DeInit+0x8c>
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	4a55      	ldr	r2, [pc, #340]	; (800c5fc <HAL_GPIO_DeInit+0x1b0>)
 800c4a8:	4293      	cmp	r3, r2
 800c4aa:	d013      	beq.n	800c4d4 <HAL_GPIO_DeInit+0x88>
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	4a54      	ldr	r2, [pc, #336]	; (800c600 <HAL_GPIO_DeInit+0x1b4>)
 800c4b0:	4293      	cmp	r3, r2
 800c4b2:	d00d      	beq.n	800c4d0 <HAL_GPIO_DeInit+0x84>
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	4a53      	ldr	r2, [pc, #332]	; (800c604 <HAL_GPIO_DeInit+0x1b8>)
 800c4b8:	4293      	cmp	r3, r2
 800c4ba:	d007      	beq.n	800c4cc <HAL_GPIO_DeInit+0x80>
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	4a52      	ldr	r2, [pc, #328]	; (800c608 <HAL_GPIO_DeInit+0x1bc>)
 800c4c0:	4293      	cmp	r3, r2
 800c4c2:	d101      	bne.n	800c4c8 <HAL_GPIO_DeInit+0x7c>
 800c4c4:	2305      	movs	r3, #5
 800c4c6:	e00a      	b.n	800c4de <HAL_GPIO_DeInit+0x92>
 800c4c8:	2306      	movs	r3, #6
 800c4ca:	e008      	b.n	800c4de <HAL_GPIO_DeInit+0x92>
 800c4cc:	2304      	movs	r3, #4
 800c4ce:	e006      	b.n	800c4de <HAL_GPIO_DeInit+0x92>
 800c4d0:	2303      	movs	r3, #3
 800c4d2:	e004      	b.n	800c4de <HAL_GPIO_DeInit+0x92>
 800c4d4:	2302      	movs	r3, #2
 800c4d6:	e002      	b.n	800c4de <HAL_GPIO_DeInit+0x92>
 800c4d8:	2301      	movs	r3, #1
 800c4da:	e000      	b.n	800c4de <HAL_GPIO_DeInit+0x92>
 800c4dc:	2300      	movs	r3, #0
 800c4de:	697a      	ldr	r2, [r7, #20]
 800c4e0:	f002 0203 	and.w	r2, r2, #3
 800c4e4:	0092      	lsls	r2, r2, #2
 800c4e6:	4093      	lsls	r3, r2
 800c4e8:	68fa      	ldr	r2, [r7, #12]
 800c4ea:	429a      	cmp	r2, r3
 800c4ec:	d132      	bne.n	800c554 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800c4ee:	4b47      	ldr	r3, [pc, #284]	; (800c60c <HAL_GPIO_DeInit+0x1c0>)
 800c4f0:	681a      	ldr	r2, [r3, #0]
 800c4f2:	693b      	ldr	r3, [r7, #16]
 800c4f4:	43db      	mvns	r3, r3
 800c4f6:	4945      	ldr	r1, [pc, #276]	; (800c60c <HAL_GPIO_DeInit+0x1c0>)
 800c4f8:	4013      	ands	r3, r2
 800c4fa:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800c4fc:	4b43      	ldr	r3, [pc, #268]	; (800c60c <HAL_GPIO_DeInit+0x1c0>)
 800c4fe:	685a      	ldr	r2, [r3, #4]
 800c500:	693b      	ldr	r3, [r7, #16]
 800c502:	43db      	mvns	r3, r3
 800c504:	4941      	ldr	r1, [pc, #260]	; (800c60c <HAL_GPIO_DeInit+0x1c0>)
 800c506:	4013      	ands	r3, r2
 800c508:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800c50a:	4b40      	ldr	r3, [pc, #256]	; (800c60c <HAL_GPIO_DeInit+0x1c0>)
 800c50c:	689a      	ldr	r2, [r3, #8]
 800c50e:	693b      	ldr	r3, [r7, #16]
 800c510:	43db      	mvns	r3, r3
 800c512:	493e      	ldr	r1, [pc, #248]	; (800c60c <HAL_GPIO_DeInit+0x1c0>)
 800c514:	4013      	ands	r3, r2
 800c516:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 800c518:	4b3c      	ldr	r3, [pc, #240]	; (800c60c <HAL_GPIO_DeInit+0x1c0>)
 800c51a:	68da      	ldr	r2, [r3, #12]
 800c51c:	693b      	ldr	r3, [r7, #16]
 800c51e:	43db      	mvns	r3, r3
 800c520:	493a      	ldr	r1, [pc, #232]	; (800c60c <HAL_GPIO_DeInit+0x1c0>)
 800c522:	4013      	ands	r3, r2
 800c524:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800c526:	697b      	ldr	r3, [r7, #20]
 800c528:	f003 0303 	and.w	r3, r3, #3
 800c52c:	009b      	lsls	r3, r3, #2
 800c52e:	220f      	movs	r2, #15
 800c530:	fa02 f303 	lsl.w	r3, r2, r3
 800c534:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800c536:	4a2f      	ldr	r2, [pc, #188]	; (800c5f4 <HAL_GPIO_DeInit+0x1a8>)
 800c538:	697b      	ldr	r3, [r7, #20]
 800c53a:	089b      	lsrs	r3, r3, #2
 800c53c:	3302      	adds	r3, #2
 800c53e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	43da      	mvns	r2, r3
 800c546:	482b      	ldr	r0, [pc, #172]	; (800c5f4 <HAL_GPIO_DeInit+0x1a8>)
 800c548:	697b      	ldr	r3, [r7, #20]
 800c54a:	089b      	lsrs	r3, r3, #2
 800c54c:	400a      	ands	r2, r1
 800c54e:	3302      	adds	r3, #2
 800c550:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	681a      	ldr	r2, [r3, #0]
 800c558:	697b      	ldr	r3, [r7, #20]
 800c55a:	005b      	lsls	r3, r3, #1
 800c55c:	2103      	movs	r1, #3
 800c55e:	fa01 f303 	lsl.w	r3, r1, r3
 800c562:	431a      	orrs	r2, r3
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 800c568:	697b      	ldr	r3, [r7, #20]
 800c56a:	08da      	lsrs	r2, r3, #3
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	3208      	adds	r2, #8
 800c570:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c574:	697b      	ldr	r3, [r7, #20]
 800c576:	f003 0307 	and.w	r3, r3, #7
 800c57a:	009b      	lsls	r3, r3, #2
 800c57c:	220f      	movs	r2, #15
 800c57e:	fa02 f303 	lsl.w	r3, r2, r3
 800c582:	43db      	mvns	r3, r3
 800c584:	697a      	ldr	r2, [r7, #20]
 800c586:	08d2      	lsrs	r2, r2, #3
 800c588:	4019      	ands	r1, r3
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	3208      	adds	r2, #8
 800c58e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	68da      	ldr	r2, [r3, #12]
 800c596:	697b      	ldr	r3, [r7, #20]
 800c598:	005b      	lsls	r3, r3, #1
 800c59a:	2103      	movs	r1, #3
 800c59c:	fa01 f303 	lsl.w	r3, r1, r3
 800c5a0:	43db      	mvns	r3, r3
 800c5a2:	401a      	ands	r2, r3
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	685a      	ldr	r2, [r3, #4]
 800c5ac:	2101      	movs	r1, #1
 800c5ae:	697b      	ldr	r3, [r7, #20]
 800c5b0:	fa01 f303 	lsl.w	r3, r1, r3
 800c5b4:	43db      	mvns	r3, r3
 800c5b6:	401a      	ands	r2, r3
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	689a      	ldr	r2, [r3, #8]
 800c5c0:	697b      	ldr	r3, [r7, #20]
 800c5c2:	005b      	lsls	r3, r3, #1
 800c5c4:	2103      	movs	r1, #3
 800c5c6:	fa01 f303 	lsl.w	r3, r1, r3
 800c5ca:	43db      	mvns	r3, r3
 800c5cc:	401a      	ands	r2, r3
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	609a      	str	r2, [r3, #8]
    }

    position++;
 800c5d2:	697b      	ldr	r3, [r7, #20]
 800c5d4:	3301      	adds	r3, #1
 800c5d6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 800c5d8:	683a      	ldr	r2, [r7, #0]
 800c5da:	697b      	ldr	r3, [r7, #20]
 800c5dc:	fa22 f303 	lsr.w	r3, r2, r3
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	f47f af3b 	bne.w	800c45c <HAL_GPIO_DeInit+0x10>
  }
}
 800c5e6:	bf00      	nop
 800c5e8:	371c      	adds	r7, #28
 800c5ea:	46bd      	mov	sp, r7
 800c5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f0:	4770      	bx	lr
 800c5f2:	bf00      	nop
 800c5f4:	40010000 	.word	0x40010000
 800c5f8:	48000400 	.word	0x48000400
 800c5fc:	48000800 	.word	0x48000800
 800c600:	48000c00 	.word	0x48000c00
 800c604:	48001000 	.word	0x48001000
 800c608:	48001400 	.word	0x48001400
 800c60c:	40010400 	.word	0x40010400

0800c610 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c610:	b480      	push	{r7}
 800c612:	b083      	sub	sp, #12
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
 800c618:	460b      	mov	r3, r1
 800c61a:	807b      	strh	r3, [r7, #2]
 800c61c:	4613      	mov	r3, r2
 800c61e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800c620:	787b      	ldrb	r3, [r7, #1]
 800c622:	2b00      	cmp	r3, #0
 800c624:	d003      	beq.n	800c62e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800c626:	887a      	ldrh	r2, [r7, #2]
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800c62c:	e002      	b.n	800c634 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800c62e:	887a      	ldrh	r2, [r7, #2]
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	629a      	str	r2, [r3, #40]	; 0x28
}
 800c634:	bf00      	nop
 800c636:	370c      	adds	r7, #12
 800c638:	46bd      	mov	sp, r7
 800c63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c63e:	4770      	bx	lr

0800c640 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800c640:	b480      	push	{r7}
 800c642:	b085      	sub	sp, #20
 800c644:	af00      	add	r7, sp, #0
 800c646:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d141      	bne.n	800c6d2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800c64e:	4b4b      	ldr	r3, [pc, #300]	; (800c77c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c656:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c65a:	d131      	bne.n	800c6c0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c65c:	4b47      	ldr	r3, [pc, #284]	; (800c77c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c65e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c662:	4a46      	ldr	r2, [pc, #280]	; (800c77c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c664:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c668:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800c66c:	4b43      	ldr	r3, [pc, #268]	; (800c77c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800c674:	4a41      	ldr	r2, [pc, #260]	; (800c77c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c676:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c67a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800c67c:	4b40      	ldr	r3, [pc, #256]	; (800c780 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	2232      	movs	r2, #50	; 0x32
 800c682:	fb02 f303 	mul.w	r3, r2, r3
 800c686:	4a3f      	ldr	r2, [pc, #252]	; (800c784 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800c688:	fba2 2303 	umull	r2, r3, r2, r3
 800c68c:	0c9b      	lsrs	r3, r3, #18
 800c68e:	3301      	adds	r3, #1
 800c690:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c692:	e002      	b.n	800c69a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	3b01      	subs	r3, #1
 800c698:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c69a:	4b38      	ldr	r3, [pc, #224]	; (800c77c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c69c:	695b      	ldr	r3, [r3, #20]
 800c69e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c6a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c6a6:	d102      	bne.n	800c6ae <HAL_PWREx_ControlVoltageScaling+0x6e>
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d1f2      	bne.n	800c694 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800c6ae:	4b33      	ldr	r3, [pc, #204]	; (800c77c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c6b0:	695b      	ldr	r3, [r3, #20]
 800c6b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c6b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c6ba:	d158      	bne.n	800c76e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800c6bc:	2303      	movs	r3, #3
 800c6be:	e057      	b.n	800c770 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c6c0:	4b2e      	ldr	r3, [pc, #184]	; (800c77c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c6c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c6c6:	4a2d      	ldr	r2, [pc, #180]	; (800c77c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c6c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c6cc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800c6d0:	e04d      	b.n	800c76e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c6d8:	d141      	bne.n	800c75e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800c6da:	4b28      	ldr	r3, [pc, #160]	; (800c77c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c6e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c6e6:	d131      	bne.n	800c74c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c6e8:	4b24      	ldr	r3, [pc, #144]	; (800c77c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c6ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c6ee:	4a23      	ldr	r2, [pc, #140]	; (800c77c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c6f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c6f4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800c6f8:	4b20      	ldr	r3, [pc, #128]	; (800c77c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800c700:	4a1e      	ldr	r2, [pc, #120]	; (800c77c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c702:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c706:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800c708:	4b1d      	ldr	r3, [pc, #116]	; (800c780 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	2232      	movs	r2, #50	; 0x32
 800c70e:	fb02 f303 	mul.w	r3, r2, r3
 800c712:	4a1c      	ldr	r2, [pc, #112]	; (800c784 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800c714:	fba2 2303 	umull	r2, r3, r2, r3
 800c718:	0c9b      	lsrs	r3, r3, #18
 800c71a:	3301      	adds	r3, #1
 800c71c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c71e:	e002      	b.n	800c726 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	3b01      	subs	r3, #1
 800c724:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c726:	4b15      	ldr	r3, [pc, #84]	; (800c77c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c728:	695b      	ldr	r3, [r3, #20]
 800c72a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c72e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c732:	d102      	bne.n	800c73a <HAL_PWREx_ControlVoltageScaling+0xfa>
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	2b00      	cmp	r3, #0
 800c738:	d1f2      	bne.n	800c720 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800c73a:	4b10      	ldr	r3, [pc, #64]	; (800c77c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c73c:	695b      	ldr	r3, [r3, #20]
 800c73e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c742:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c746:	d112      	bne.n	800c76e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800c748:	2303      	movs	r3, #3
 800c74a:	e011      	b.n	800c770 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c74c:	4b0b      	ldr	r3, [pc, #44]	; (800c77c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c74e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c752:	4a0a      	ldr	r2, [pc, #40]	; (800c77c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c754:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c758:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800c75c:	e007      	b.n	800c76e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800c75e:	4b07      	ldr	r3, [pc, #28]	; (800c77c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800c766:	4a05      	ldr	r2, [pc, #20]	; (800c77c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c768:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c76c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800c76e:	2300      	movs	r3, #0
}
 800c770:	4618      	mov	r0, r3
 800c772:	3714      	adds	r7, #20
 800c774:	46bd      	mov	sp, r7
 800c776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c77a:	4770      	bx	lr
 800c77c:	40007000 	.word	0x40007000
 800c780:	20000eb0 	.word	0x20000eb0
 800c784:	431bde83 	.word	0x431bde83

0800c788 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c788:	b580      	push	{r7, lr}
 800c78a:	b088      	sub	sp, #32
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	2b00      	cmp	r3, #0
 800c794:	d101      	bne.n	800c79a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c796:	2301      	movs	r3, #1
 800c798:	e308      	b.n	800cdac <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	f003 0301 	and.w	r3, r3, #1
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d075      	beq.n	800c892 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c7a6:	4ba3      	ldr	r3, [pc, #652]	; (800ca34 <HAL_RCC_OscConfig+0x2ac>)
 800c7a8:	689b      	ldr	r3, [r3, #8]
 800c7aa:	f003 030c 	and.w	r3, r3, #12
 800c7ae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c7b0:	4ba0      	ldr	r3, [pc, #640]	; (800ca34 <HAL_RCC_OscConfig+0x2ac>)
 800c7b2:	68db      	ldr	r3, [r3, #12]
 800c7b4:	f003 0303 	and.w	r3, r3, #3
 800c7b8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800c7ba:	69bb      	ldr	r3, [r7, #24]
 800c7bc:	2b0c      	cmp	r3, #12
 800c7be:	d102      	bne.n	800c7c6 <HAL_RCC_OscConfig+0x3e>
 800c7c0:	697b      	ldr	r3, [r7, #20]
 800c7c2:	2b03      	cmp	r3, #3
 800c7c4:	d002      	beq.n	800c7cc <HAL_RCC_OscConfig+0x44>
 800c7c6:	69bb      	ldr	r3, [r7, #24]
 800c7c8:	2b08      	cmp	r3, #8
 800c7ca:	d10b      	bne.n	800c7e4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c7cc:	4b99      	ldr	r3, [pc, #612]	; (800ca34 <HAL_RCC_OscConfig+0x2ac>)
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d05b      	beq.n	800c890 <HAL_RCC_OscConfig+0x108>
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	685b      	ldr	r3, [r3, #4]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d157      	bne.n	800c890 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800c7e0:	2301      	movs	r3, #1
 800c7e2:	e2e3      	b.n	800cdac <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	685b      	ldr	r3, [r3, #4]
 800c7e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c7ec:	d106      	bne.n	800c7fc <HAL_RCC_OscConfig+0x74>
 800c7ee:	4b91      	ldr	r3, [pc, #580]	; (800ca34 <HAL_RCC_OscConfig+0x2ac>)
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	4a90      	ldr	r2, [pc, #576]	; (800ca34 <HAL_RCC_OscConfig+0x2ac>)
 800c7f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c7f8:	6013      	str	r3, [r2, #0]
 800c7fa:	e01d      	b.n	800c838 <HAL_RCC_OscConfig+0xb0>
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	685b      	ldr	r3, [r3, #4]
 800c800:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c804:	d10c      	bne.n	800c820 <HAL_RCC_OscConfig+0x98>
 800c806:	4b8b      	ldr	r3, [pc, #556]	; (800ca34 <HAL_RCC_OscConfig+0x2ac>)
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	4a8a      	ldr	r2, [pc, #552]	; (800ca34 <HAL_RCC_OscConfig+0x2ac>)
 800c80c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c810:	6013      	str	r3, [r2, #0]
 800c812:	4b88      	ldr	r3, [pc, #544]	; (800ca34 <HAL_RCC_OscConfig+0x2ac>)
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	4a87      	ldr	r2, [pc, #540]	; (800ca34 <HAL_RCC_OscConfig+0x2ac>)
 800c818:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c81c:	6013      	str	r3, [r2, #0]
 800c81e:	e00b      	b.n	800c838 <HAL_RCC_OscConfig+0xb0>
 800c820:	4b84      	ldr	r3, [pc, #528]	; (800ca34 <HAL_RCC_OscConfig+0x2ac>)
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	4a83      	ldr	r2, [pc, #524]	; (800ca34 <HAL_RCC_OscConfig+0x2ac>)
 800c826:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c82a:	6013      	str	r3, [r2, #0]
 800c82c:	4b81      	ldr	r3, [pc, #516]	; (800ca34 <HAL_RCC_OscConfig+0x2ac>)
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	4a80      	ldr	r2, [pc, #512]	; (800ca34 <HAL_RCC_OscConfig+0x2ac>)
 800c832:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c836:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	685b      	ldr	r3, [r3, #4]
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d013      	beq.n	800c868 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c840:	f7fc fbcc 	bl	8008fdc <HAL_GetTick>
 800c844:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c846:	e008      	b.n	800c85a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c848:	f7fc fbc8 	bl	8008fdc <HAL_GetTick>
 800c84c:	4602      	mov	r2, r0
 800c84e:	693b      	ldr	r3, [r7, #16]
 800c850:	1ad3      	subs	r3, r2, r3
 800c852:	2b64      	cmp	r3, #100	; 0x64
 800c854:	d901      	bls.n	800c85a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800c856:	2303      	movs	r3, #3
 800c858:	e2a8      	b.n	800cdac <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c85a:	4b76      	ldr	r3, [pc, #472]	; (800ca34 <HAL_RCC_OscConfig+0x2ac>)
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c862:	2b00      	cmp	r3, #0
 800c864:	d0f0      	beq.n	800c848 <HAL_RCC_OscConfig+0xc0>
 800c866:	e014      	b.n	800c892 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c868:	f7fc fbb8 	bl	8008fdc <HAL_GetTick>
 800c86c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c86e:	e008      	b.n	800c882 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c870:	f7fc fbb4 	bl	8008fdc <HAL_GetTick>
 800c874:	4602      	mov	r2, r0
 800c876:	693b      	ldr	r3, [r7, #16]
 800c878:	1ad3      	subs	r3, r2, r3
 800c87a:	2b64      	cmp	r3, #100	; 0x64
 800c87c:	d901      	bls.n	800c882 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c87e:	2303      	movs	r3, #3
 800c880:	e294      	b.n	800cdac <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c882:	4b6c      	ldr	r3, [pc, #432]	; (800ca34 <HAL_RCC_OscConfig+0x2ac>)
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d1f0      	bne.n	800c870 <HAL_RCC_OscConfig+0xe8>
 800c88e:	e000      	b.n	800c892 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c890:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	f003 0302 	and.w	r3, r3, #2
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d075      	beq.n	800c98a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c89e:	4b65      	ldr	r3, [pc, #404]	; (800ca34 <HAL_RCC_OscConfig+0x2ac>)
 800c8a0:	689b      	ldr	r3, [r3, #8]
 800c8a2:	f003 030c 	and.w	r3, r3, #12
 800c8a6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c8a8:	4b62      	ldr	r3, [pc, #392]	; (800ca34 <HAL_RCC_OscConfig+0x2ac>)
 800c8aa:	68db      	ldr	r3, [r3, #12]
 800c8ac:	f003 0303 	and.w	r3, r3, #3
 800c8b0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800c8b2:	69bb      	ldr	r3, [r7, #24]
 800c8b4:	2b0c      	cmp	r3, #12
 800c8b6:	d102      	bne.n	800c8be <HAL_RCC_OscConfig+0x136>
 800c8b8:	697b      	ldr	r3, [r7, #20]
 800c8ba:	2b02      	cmp	r3, #2
 800c8bc:	d002      	beq.n	800c8c4 <HAL_RCC_OscConfig+0x13c>
 800c8be:	69bb      	ldr	r3, [r7, #24]
 800c8c0:	2b04      	cmp	r3, #4
 800c8c2:	d11f      	bne.n	800c904 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c8c4:	4b5b      	ldr	r3, [pc, #364]	; (800ca34 <HAL_RCC_OscConfig+0x2ac>)
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d005      	beq.n	800c8dc <HAL_RCC_OscConfig+0x154>
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	68db      	ldr	r3, [r3, #12]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d101      	bne.n	800c8dc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800c8d8:	2301      	movs	r3, #1
 800c8da:	e267      	b.n	800cdac <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c8dc:	4b55      	ldr	r3, [pc, #340]	; (800ca34 <HAL_RCC_OscConfig+0x2ac>)
 800c8de:	685b      	ldr	r3, [r3, #4]
 800c8e0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	691b      	ldr	r3, [r3, #16]
 800c8e8:	061b      	lsls	r3, r3, #24
 800c8ea:	4952      	ldr	r1, [pc, #328]	; (800ca34 <HAL_RCC_OscConfig+0x2ac>)
 800c8ec:	4313      	orrs	r3, r2
 800c8ee:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800c8f0:	4b51      	ldr	r3, [pc, #324]	; (800ca38 <HAL_RCC_OscConfig+0x2b0>)
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	f7fc fb25 	bl	8008f44 <HAL_InitTick>
 800c8fa:	4603      	mov	r3, r0
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d043      	beq.n	800c988 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800c900:	2301      	movs	r3, #1
 800c902:	e253      	b.n	800cdac <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	68db      	ldr	r3, [r3, #12]
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d023      	beq.n	800c954 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c90c:	4b49      	ldr	r3, [pc, #292]	; (800ca34 <HAL_RCC_OscConfig+0x2ac>)
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	4a48      	ldr	r2, [pc, #288]	; (800ca34 <HAL_RCC_OscConfig+0x2ac>)
 800c912:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c916:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c918:	f7fc fb60 	bl	8008fdc <HAL_GetTick>
 800c91c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c91e:	e008      	b.n	800c932 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c920:	f7fc fb5c 	bl	8008fdc <HAL_GetTick>
 800c924:	4602      	mov	r2, r0
 800c926:	693b      	ldr	r3, [r7, #16]
 800c928:	1ad3      	subs	r3, r2, r3
 800c92a:	2b02      	cmp	r3, #2
 800c92c:	d901      	bls.n	800c932 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800c92e:	2303      	movs	r3, #3
 800c930:	e23c      	b.n	800cdac <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c932:	4b40      	ldr	r3, [pc, #256]	; (800ca34 <HAL_RCC_OscConfig+0x2ac>)
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d0f0      	beq.n	800c920 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c93e:	4b3d      	ldr	r3, [pc, #244]	; (800ca34 <HAL_RCC_OscConfig+0x2ac>)
 800c940:	685b      	ldr	r3, [r3, #4]
 800c942:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	691b      	ldr	r3, [r3, #16]
 800c94a:	061b      	lsls	r3, r3, #24
 800c94c:	4939      	ldr	r1, [pc, #228]	; (800ca34 <HAL_RCC_OscConfig+0x2ac>)
 800c94e:	4313      	orrs	r3, r2
 800c950:	604b      	str	r3, [r1, #4]
 800c952:	e01a      	b.n	800c98a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c954:	4b37      	ldr	r3, [pc, #220]	; (800ca34 <HAL_RCC_OscConfig+0x2ac>)
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	4a36      	ldr	r2, [pc, #216]	; (800ca34 <HAL_RCC_OscConfig+0x2ac>)
 800c95a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c95e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c960:	f7fc fb3c 	bl	8008fdc <HAL_GetTick>
 800c964:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c966:	e008      	b.n	800c97a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c968:	f7fc fb38 	bl	8008fdc <HAL_GetTick>
 800c96c:	4602      	mov	r2, r0
 800c96e:	693b      	ldr	r3, [r7, #16]
 800c970:	1ad3      	subs	r3, r2, r3
 800c972:	2b02      	cmp	r3, #2
 800c974:	d901      	bls.n	800c97a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800c976:	2303      	movs	r3, #3
 800c978:	e218      	b.n	800cdac <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c97a:	4b2e      	ldr	r3, [pc, #184]	; (800ca34 <HAL_RCC_OscConfig+0x2ac>)
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c982:	2b00      	cmp	r3, #0
 800c984:	d1f0      	bne.n	800c968 <HAL_RCC_OscConfig+0x1e0>
 800c986:	e000      	b.n	800c98a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c988:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	f003 0308 	and.w	r3, r3, #8
 800c992:	2b00      	cmp	r3, #0
 800c994:	d03c      	beq.n	800ca10 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	695b      	ldr	r3, [r3, #20]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d01c      	beq.n	800c9d8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c99e:	4b25      	ldr	r3, [pc, #148]	; (800ca34 <HAL_RCC_OscConfig+0x2ac>)
 800c9a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c9a4:	4a23      	ldr	r2, [pc, #140]	; (800ca34 <HAL_RCC_OscConfig+0x2ac>)
 800c9a6:	f043 0301 	orr.w	r3, r3, #1
 800c9aa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c9ae:	f7fc fb15 	bl	8008fdc <HAL_GetTick>
 800c9b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800c9b4:	e008      	b.n	800c9c8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c9b6:	f7fc fb11 	bl	8008fdc <HAL_GetTick>
 800c9ba:	4602      	mov	r2, r0
 800c9bc:	693b      	ldr	r3, [r7, #16]
 800c9be:	1ad3      	subs	r3, r2, r3
 800c9c0:	2b02      	cmp	r3, #2
 800c9c2:	d901      	bls.n	800c9c8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800c9c4:	2303      	movs	r3, #3
 800c9c6:	e1f1      	b.n	800cdac <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800c9c8:	4b1a      	ldr	r3, [pc, #104]	; (800ca34 <HAL_RCC_OscConfig+0x2ac>)
 800c9ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c9ce:	f003 0302 	and.w	r3, r3, #2
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d0ef      	beq.n	800c9b6 <HAL_RCC_OscConfig+0x22e>
 800c9d6:	e01b      	b.n	800ca10 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c9d8:	4b16      	ldr	r3, [pc, #88]	; (800ca34 <HAL_RCC_OscConfig+0x2ac>)
 800c9da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c9de:	4a15      	ldr	r2, [pc, #84]	; (800ca34 <HAL_RCC_OscConfig+0x2ac>)
 800c9e0:	f023 0301 	bic.w	r3, r3, #1
 800c9e4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c9e8:	f7fc faf8 	bl	8008fdc <HAL_GetTick>
 800c9ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800c9ee:	e008      	b.n	800ca02 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c9f0:	f7fc faf4 	bl	8008fdc <HAL_GetTick>
 800c9f4:	4602      	mov	r2, r0
 800c9f6:	693b      	ldr	r3, [r7, #16]
 800c9f8:	1ad3      	subs	r3, r2, r3
 800c9fa:	2b02      	cmp	r3, #2
 800c9fc:	d901      	bls.n	800ca02 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800c9fe:	2303      	movs	r3, #3
 800ca00:	e1d4      	b.n	800cdac <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800ca02:	4b0c      	ldr	r3, [pc, #48]	; (800ca34 <HAL_RCC_OscConfig+0x2ac>)
 800ca04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ca08:	f003 0302 	and.w	r3, r3, #2
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d1ef      	bne.n	800c9f0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	f003 0304 	and.w	r3, r3, #4
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	f000 80ab 	beq.w	800cb74 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ca1e:	2300      	movs	r3, #0
 800ca20:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800ca22:	4b04      	ldr	r3, [pc, #16]	; (800ca34 <HAL_RCC_OscConfig+0x2ac>)
 800ca24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d106      	bne.n	800ca3c <HAL_RCC_OscConfig+0x2b4>
 800ca2e:	2301      	movs	r3, #1
 800ca30:	e005      	b.n	800ca3e <HAL_RCC_OscConfig+0x2b6>
 800ca32:	bf00      	nop
 800ca34:	40021000 	.word	0x40021000
 800ca38:	20000eb4 	.word	0x20000eb4
 800ca3c:	2300      	movs	r3, #0
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d00d      	beq.n	800ca5e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ca42:	4baf      	ldr	r3, [pc, #700]	; (800cd00 <HAL_RCC_OscConfig+0x578>)
 800ca44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca46:	4aae      	ldr	r2, [pc, #696]	; (800cd00 <HAL_RCC_OscConfig+0x578>)
 800ca48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ca4c:	6593      	str	r3, [r2, #88]	; 0x58
 800ca4e:	4bac      	ldr	r3, [pc, #688]	; (800cd00 <HAL_RCC_OscConfig+0x578>)
 800ca50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ca56:	60fb      	str	r3, [r7, #12]
 800ca58:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800ca5a:	2301      	movs	r3, #1
 800ca5c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ca5e:	4ba9      	ldr	r3, [pc, #676]	; (800cd04 <HAL_RCC_OscConfig+0x57c>)
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d118      	bne.n	800ca9c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ca6a:	4ba6      	ldr	r3, [pc, #664]	; (800cd04 <HAL_RCC_OscConfig+0x57c>)
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	4aa5      	ldr	r2, [pc, #660]	; (800cd04 <HAL_RCC_OscConfig+0x57c>)
 800ca70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ca74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ca76:	f7fc fab1 	bl	8008fdc <HAL_GetTick>
 800ca7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ca7c:	e008      	b.n	800ca90 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ca7e:	f7fc faad 	bl	8008fdc <HAL_GetTick>
 800ca82:	4602      	mov	r2, r0
 800ca84:	693b      	ldr	r3, [r7, #16]
 800ca86:	1ad3      	subs	r3, r2, r3
 800ca88:	2b02      	cmp	r3, #2
 800ca8a:	d901      	bls.n	800ca90 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800ca8c:	2303      	movs	r3, #3
 800ca8e:	e18d      	b.n	800cdac <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ca90:	4b9c      	ldr	r3, [pc, #624]	; (800cd04 <HAL_RCC_OscConfig+0x57c>)
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d0f0      	beq.n	800ca7e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	689b      	ldr	r3, [r3, #8]
 800caa0:	2b01      	cmp	r3, #1
 800caa2:	d108      	bne.n	800cab6 <HAL_RCC_OscConfig+0x32e>
 800caa4:	4b96      	ldr	r3, [pc, #600]	; (800cd00 <HAL_RCC_OscConfig+0x578>)
 800caa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800caaa:	4a95      	ldr	r2, [pc, #596]	; (800cd00 <HAL_RCC_OscConfig+0x578>)
 800caac:	f043 0301 	orr.w	r3, r3, #1
 800cab0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800cab4:	e024      	b.n	800cb00 <HAL_RCC_OscConfig+0x378>
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	689b      	ldr	r3, [r3, #8]
 800caba:	2b05      	cmp	r3, #5
 800cabc:	d110      	bne.n	800cae0 <HAL_RCC_OscConfig+0x358>
 800cabe:	4b90      	ldr	r3, [pc, #576]	; (800cd00 <HAL_RCC_OscConfig+0x578>)
 800cac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cac4:	4a8e      	ldr	r2, [pc, #568]	; (800cd00 <HAL_RCC_OscConfig+0x578>)
 800cac6:	f043 0304 	orr.w	r3, r3, #4
 800caca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800cace:	4b8c      	ldr	r3, [pc, #560]	; (800cd00 <HAL_RCC_OscConfig+0x578>)
 800cad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cad4:	4a8a      	ldr	r2, [pc, #552]	; (800cd00 <HAL_RCC_OscConfig+0x578>)
 800cad6:	f043 0301 	orr.w	r3, r3, #1
 800cada:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800cade:	e00f      	b.n	800cb00 <HAL_RCC_OscConfig+0x378>
 800cae0:	4b87      	ldr	r3, [pc, #540]	; (800cd00 <HAL_RCC_OscConfig+0x578>)
 800cae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cae6:	4a86      	ldr	r2, [pc, #536]	; (800cd00 <HAL_RCC_OscConfig+0x578>)
 800cae8:	f023 0301 	bic.w	r3, r3, #1
 800caec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800caf0:	4b83      	ldr	r3, [pc, #524]	; (800cd00 <HAL_RCC_OscConfig+0x578>)
 800caf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800caf6:	4a82      	ldr	r2, [pc, #520]	; (800cd00 <HAL_RCC_OscConfig+0x578>)
 800caf8:	f023 0304 	bic.w	r3, r3, #4
 800cafc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	689b      	ldr	r3, [r3, #8]
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d016      	beq.n	800cb36 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cb08:	f7fc fa68 	bl	8008fdc <HAL_GetTick>
 800cb0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800cb0e:	e00a      	b.n	800cb26 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cb10:	f7fc fa64 	bl	8008fdc <HAL_GetTick>
 800cb14:	4602      	mov	r2, r0
 800cb16:	693b      	ldr	r3, [r7, #16]
 800cb18:	1ad3      	subs	r3, r2, r3
 800cb1a:	f241 3288 	movw	r2, #5000	; 0x1388
 800cb1e:	4293      	cmp	r3, r2
 800cb20:	d901      	bls.n	800cb26 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800cb22:	2303      	movs	r3, #3
 800cb24:	e142      	b.n	800cdac <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800cb26:	4b76      	ldr	r3, [pc, #472]	; (800cd00 <HAL_RCC_OscConfig+0x578>)
 800cb28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cb2c:	f003 0302 	and.w	r3, r3, #2
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d0ed      	beq.n	800cb10 <HAL_RCC_OscConfig+0x388>
 800cb34:	e015      	b.n	800cb62 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cb36:	f7fc fa51 	bl	8008fdc <HAL_GetTick>
 800cb3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800cb3c:	e00a      	b.n	800cb54 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cb3e:	f7fc fa4d 	bl	8008fdc <HAL_GetTick>
 800cb42:	4602      	mov	r2, r0
 800cb44:	693b      	ldr	r3, [r7, #16]
 800cb46:	1ad3      	subs	r3, r2, r3
 800cb48:	f241 3288 	movw	r2, #5000	; 0x1388
 800cb4c:	4293      	cmp	r3, r2
 800cb4e:	d901      	bls.n	800cb54 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800cb50:	2303      	movs	r3, #3
 800cb52:	e12b      	b.n	800cdac <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800cb54:	4b6a      	ldr	r3, [pc, #424]	; (800cd00 <HAL_RCC_OscConfig+0x578>)
 800cb56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cb5a:	f003 0302 	and.w	r3, r3, #2
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d1ed      	bne.n	800cb3e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800cb62:	7ffb      	ldrb	r3, [r7, #31]
 800cb64:	2b01      	cmp	r3, #1
 800cb66:	d105      	bne.n	800cb74 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800cb68:	4b65      	ldr	r3, [pc, #404]	; (800cd00 <HAL_RCC_OscConfig+0x578>)
 800cb6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb6c:	4a64      	ldr	r2, [pc, #400]	; (800cd00 <HAL_RCC_OscConfig+0x578>)
 800cb6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cb72:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	f003 0320 	and.w	r3, r3, #32
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d03c      	beq.n	800cbfa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	699b      	ldr	r3, [r3, #24]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d01c      	beq.n	800cbc2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800cb88:	4b5d      	ldr	r3, [pc, #372]	; (800cd00 <HAL_RCC_OscConfig+0x578>)
 800cb8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800cb8e:	4a5c      	ldr	r2, [pc, #368]	; (800cd00 <HAL_RCC_OscConfig+0x578>)
 800cb90:	f043 0301 	orr.w	r3, r3, #1
 800cb94:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cb98:	f7fc fa20 	bl	8008fdc <HAL_GetTick>
 800cb9c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800cb9e:	e008      	b.n	800cbb2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800cba0:	f7fc fa1c 	bl	8008fdc <HAL_GetTick>
 800cba4:	4602      	mov	r2, r0
 800cba6:	693b      	ldr	r3, [r7, #16]
 800cba8:	1ad3      	subs	r3, r2, r3
 800cbaa:	2b02      	cmp	r3, #2
 800cbac:	d901      	bls.n	800cbb2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800cbae:	2303      	movs	r3, #3
 800cbb0:	e0fc      	b.n	800cdac <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800cbb2:	4b53      	ldr	r3, [pc, #332]	; (800cd00 <HAL_RCC_OscConfig+0x578>)
 800cbb4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800cbb8:	f003 0302 	and.w	r3, r3, #2
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d0ef      	beq.n	800cba0 <HAL_RCC_OscConfig+0x418>
 800cbc0:	e01b      	b.n	800cbfa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800cbc2:	4b4f      	ldr	r3, [pc, #316]	; (800cd00 <HAL_RCC_OscConfig+0x578>)
 800cbc4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800cbc8:	4a4d      	ldr	r2, [pc, #308]	; (800cd00 <HAL_RCC_OscConfig+0x578>)
 800cbca:	f023 0301 	bic.w	r3, r3, #1
 800cbce:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cbd2:	f7fc fa03 	bl	8008fdc <HAL_GetTick>
 800cbd6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800cbd8:	e008      	b.n	800cbec <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800cbda:	f7fc f9ff 	bl	8008fdc <HAL_GetTick>
 800cbde:	4602      	mov	r2, r0
 800cbe0:	693b      	ldr	r3, [r7, #16]
 800cbe2:	1ad3      	subs	r3, r2, r3
 800cbe4:	2b02      	cmp	r3, #2
 800cbe6:	d901      	bls.n	800cbec <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800cbe8:	2303      	movs	r3, #3
 800cbea:	e0df      	b.n	800cdac <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800cbec:	4b44      	ldr	r3, [pc, #272]	; (800cd00 <HAL_RCC_OscConfig+0x578>)
 800cbee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800cbf2:	f003 0302 	and.w	r3, r3, #2
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d1ef      	bne.n	800cbda <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	69db      	ldr	r3, [r3, #28]
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	f000 80d3 	beq.w	800cdaa <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800cc04:	4b3e      	ldr	r3, [pc, #248]	; (800cd00 <HAL_RCC_OscConfig+0x578>)
 800cc06:	689b      	ldr	r3, [r3, #8]
 800cc08:	f003 030c 	and.w	r3, r3, #12
 800cc0c:	2b0c      	cmp	r3, #12
 800cc0e:	f000 808d 	beq.w	800cd2c <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	69db      	ldr	r3, [r3, #28]
 800cc16:	2b02      	cmp	r3, #2
 800cc18:	d15a      	bne.n	800ccd0 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cc1a:	4b39      	ldr	r3, [pc, #228]	; (800cd00 <HAL_RCC_OscConfig+0x578>)
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	4a38      	ldr	r2, [pc, #224]	; (800cd00 <HAL_RCC_OscConfig+0x578>)
 800cc20:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800cc24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cc26:	f7fc f9d9 	bl	8008fdc <HAL_GetTick>
 800cc2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800cc2c:	e008      	b.n	800cc40 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cc2e:	f7fc f9d5 	bl	8008fdc <HAL_GetTick>
 800cc32:	4602      	mov	r2, r0
 800cc34:	693b      	ldr	r3, [r7, #16]
 800cc36:	1ad3      	subs	r3, r2, r3
 800cc38:	2b02      	cmp	r3, #2
 800cc3a:	d901      	bls.n	800cc40 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 800cc3c:	2303      	movs	r3, #3
 800cc3e:	e0b5      	b.n	800cdac <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800cc40:	4b2f      	ldr	r3, [pc, #188]	; (800cd00 <HAL_RCC_OscConfig+0x578>)
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d1f0      	bne.n	800cc2e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800cc4c:	4b2c      	ldr	r3, [pc, #176]	; (800cd00 <HAL_RCC_OscConfig+0x578>)
 800cc4e:	68da      	ldr	r2, [r3, #12]
 800cc50:	4b2d      	ldr	r3, [pc, #180]	; (800cd08 <HAL_RCC_OscConfig+0x580>)
 800cc52:	4013      	ands	r3, r2
 800cc54:	687a      	ldr	r2, [r7, #4]
 800cc56:	6a11      	ldr	r1, [r2, #32]
 800cc58:	687a      	ldr	r2, [r7, #4]
 800cc5a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800cc5c:	3a01      	subs	r2, #1
 800cc5e:	0112      	lsls	r2, r2, #4
 800cc60:	4311      	orrs	r1, r2
 800cc62:	687a      	ldr	r2, [r7, #4]
 800cc64:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800cc66:	0212      	lsls	r2, r2, #8
 800cc68:	4311      	orrs	r1, r2
 800cc6a:	687a      	ldr	r2, [r7, #4]
 800cc6c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800cc6e:	0852      	lsrs	r2, r2, #1
 800cc70:	3a01      	subs	r2, #1
 800cc72:	0552      	lsls	r2, r2, #21
 800cc74:	4311      	orrs	r1, r2
 800cc76:	687a      	ldr	r2, [r7, #4]
 800cc78:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800cc7a:	0852      	lsrs	r2, r2, #1
 800cc7c:	3a01      	subs	r2, #1
 800cc7e:	0652      	lsls	r2, r2, #25
 800cc80:	4311      	orrs	r1, r2
 800cc82:	687a      	ldr	r2, [r7, #4]
 800cc84:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800cc86:	06d2      	lsls	r2, r2, #27
 800cc88:	430a      	orrs	r2, r1
 800cc8a:	491d      	ldr	r1, [pc, #116]	; (800cd00 <HAL_RCC_OscConfig+0x578>)
 800cc8c:	4313      	orrs	r3, r2
 800cc8e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800cc90:	4b1b      	ldr	r3, [pc, #108]	; (800cd00 <HAL_RCC_OscConfig+0x578>)
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	4a1a      	ldr	r2, [pc, #104]	; (800cd00 <HAL_RCC_OscConfig+0x578>)
 800cc96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cc9a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800cc9c:	4b18      	ldr	r3, [pc, #96]	; (800cd00 <HAL_RCC_OscConfig+0x578>)
 800cc9e:	68db      	ldr	r3, [r3, #12]
 800cca0:	4a17      	ldr	r2, [pc, #92]	; (800cd00 <HAL_RCC_OscConfig+0x578>)
 800cca2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cca6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cca8:	f7fc f998 	bl	8008fdc <HAL_GetTick>
 800ccac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ccae:	e008      	b.n	800ccc2 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ccb0:	f7fc f994 	bl	8008fdc <HAL_GetTick>
 800ccb4:	4602      	mov	r2, r0
 800ccb6:	693b      	ldr	r3, [r7, #16]
 800ccb8:	1ad3      	subs	r3, r2, r3
 800ccba:	2b02      	cmp	r3, #2
 800ccbc:	d901      	bls.n	800ccc2 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800ccbe:	2303      	movs	r3, #3
 800ccc0:	e074      	b.n	800cdac <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ccc2:	4b0f      	ldr	r3, [pc, #60]	; (800cd00 <HAL_RCC_OscConfig+0x578>)
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d0f0      	beq.n	800ccb0 <HAL_RCC_OscConfig+0x528>
 800ccce:	e06c      	b.n	800cdaa <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ccd0:	4b0b      	ldr	r3, [pc, #44]	; (800cd00 <HAL_RCC_OscConfig+0x578>)
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	4a0a      	ldr	r2, [pc, #40]	; (800cd00 <HAL_RCC_OscConfig+0x578>)
 800ccd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ccda:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800ccdc:	4b08      	ldr	r3, [pc, #32]	; (800cd00 <HAL_RCC_OscConfig+0x578>)
 800ccde:	68db      	ldr	r3, [r3, #12]
 800cce0:	4a07      	ldr	r2, [pc, #28]	; (800cd00 <HAL_RCC_OscConfig+0x578>)
 800cce2:	f023 0303 	bic.w	r3, r3, #3
 800cce6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800cce8:	4b05      	ldr	r3, [pc, #20]	; (800cd00 <HAL_RCC_OscConfig+0x578>)
 800ccea:	68db      	ldr	r3, [r3, #12]
 800ccec:	4a04      	ldr	r2, [pc, #16]	; (800cd00 <HAL_RCC_OscConfig+0x578>)
 800ccee:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800ccf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ccf6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ccf8:	f7fc f970 	bl	8008fdc <HAL_GetTick>
 800ccfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ccfe:	e00e      	b.n	800cd1e <HAL_RCC_OscConfig+0x596>
 800cd00:	40021000 	.word	0x40021000
 800cd04:	40007000 	.word	0x40007000
 800cd08:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cd0c:	f7fc f966 	bl	8008fdc <HAL_GetTick>
 800cd10:	4602      	mov	r2, r0
 800cd12:	693b      	ldr	r3, [r7, #16]
 800cd14:	1ad3      	subs	r3, r2, r3
 800cd16:	2b02      	cmp	r3, #2
 800cd18:	d901      	bls.n	800cd1e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800cd1a:	2303      	movs	r3, #3
 800cd1c:	e046      	b.n	800cdac <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800cd1e:	4b25      	ldr	r3, [pc, #148]	; (800cdb4 <HAL_RCC_OscConfig+0x62c>)
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d1f0      	bne.n	800cd0c <HAL_RCC_OscConfig+0x584>
 800cd2a:	e03e      	b.n	800cdaa <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	69db      	ldr	r3, [r3, #28]
 800cd30:	2b01      	cmp	r3, #1
 800cd32:	d101      	bne.n	800cd38 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 800cd34:	2301      	movs	r3, #1
 800cd36:	e039      	b.n	800cdac <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800cd38:	4b1e      	ldr	r3, [pc, #120]	; (800cdb4 <HAL_RCC_OscConfig+0x62c>)
 800cd3a:	68db      	ldr	r3, [r3, #12]
 800cd3c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cd3e:	697b      	ldr	r3, [r7, #20]
 800cd40:	f003 0203 	and.w	r2, r3, #3
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	6a1b      	ldr	r3, [r3, #32]
 800cd48:	429a      	cmp	r2, r3
 800cd4a:	d12c      	bne.n	800cda6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800cd4c:	697b      	ldr	r3, [r7, #20]
 800cd4e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd56:	3b01      	subs	r3, #1
 800cd58:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cd5a:	429a      	cmp	r2, r3
 800cd5c:	d123      	bne.n	800cda6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800cd5e:	697b      	ldr	r3, [r7, #20]
 800cd60:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd68:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800cd6a:	429a      	cmp	r2, r3
 800cd6c:	d11b      	bne.n	800cda6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800cd6e:	697b      	ldr	r3, [r7, #20]
 800cd70:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd78:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800cd7a:	429a      	cmp	r2, r3
 800cd7c:	d113      	bne.n	800cda6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800cd7e:	697b      	ldr	r3, [r7, #20]
 800cd80:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd88:	085b      	lsrs	r3, r3, #1
 800cd8a:	3b01      	subs	r3, #1
 800cd8c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800cd8e:	429a      	cmp	r2, r3
 800cd90:	d109      	bne.n	800cda6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800cd92:	697b      	ldr	r3, [r7, #20]
 800cd94:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd9c:	085b      	lsrs	r3, r3, #1
 800cd9e:	3b01      	subs	r3, #1
 800cda0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800cda2:	429a      	cmp	r2, r3
 800cda4:	d001      	beq.n	800cdaa <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800cda6:	2301      	movs	r3, #1
 800cda8:	e000      	b.n	800cdac <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800cdaa:	2300      	movs	r3, #0
}
 800cdac:	4618      	mov	r0, r3
 800cdae:	3720      	adds	r7, #32
 800cdb0:	46bd      	mov	sp, r7
 800cdb2:	bd80      	pop	{r7, pc}
 800cdb4:	40021000 	.word	0x40021000

0800cdb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800cdb8:	b580      	push	{r7, lr}
 800cdba:	b086      	sub	sp, #24
 800cdbc:	af00      	add	r7, sp, #0
 800cdbe:	6078      	str	r0, [r7, #4]
 800cdc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800cdc2:	2300      	movs	r3, #0
 800cdc4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d101      	bne.n	800cdd0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800cdcc:	2301      	movs	r3, #1
 800cdce:	e11e      	b.n	800d00e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800cdd0:	4b91      	ldr	r3, [pc, #580]	; (800d018 <HAL_RCC_ClockConfig+0x260>)
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	f003 030f 	and.w	r3, r3, #15
 800cdd8:	683a      	ldr	r2, [r7, #0]
 800cdda:	429a      	cmp	r2, r3
 800cddc:	d910      	bls.n	800ce00 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cdde:	4b8e      	ldr	r3, [pc, #568]	; (800d018 <HAL_RCC_ClockConfig+0x260>)
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	f023 020f 	bic.w	r2, r3, #15
 800cde6:	498c      	ldr	r1, [pc, #560]	; (800d018 <HAL_RCC_ClockConfig+0x260>)
 800cde8:	683b      	ldr	r3, [r7, #0]
 800cdea:	4313      	orrs	r3, r2
 800cdec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cdee:	4b8a      	ldr	r3, [pc, #552]	; (800d018 <HAL_RCC_ClockConfig+0x260>)
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	f003 030f 	and.w	r3, r3, #15
 800cdf6:	683a      	ldr	r2, [r7, #0]
 800cdf8:	429a      	cmp	r2, r3
 800cdfa:	d001      	beq.n	800ce00 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800cdfc:	2301      	movs	r3, #1
 800cdfe:	e106      	b.n	800d00e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	f003 0301 	and.w	r3, r3, #1
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d073      	beq.n	800cef4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	685b      	ldr	r3, [r3, #4]
 800ce10:	2b03      	cmp	r3, #3
 800ce12:	d129      	bne.n	800ce68 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ce14:	4b81      	ldr	r3, [pc, #516]	; (800d01c <HAL_RCC_ClockConfig+0x264>)
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d101      	bne.n	800ce24 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800ce20:	2301      	movs	r3, #1
 800ce22:	e0f4      	b.n	800d00e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800ce24:	f000 f972 	bl	800d10c <RCC_GetSysClockFreqFromPLLSource>
 800ce28:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800ce2a:	693b      	ldr	r3, [r7, #16]
 800ce2c:	4a7c      	ldr	r2, [pc, #496]	; (800d020 <HAL_RCC_ClockConfig+0x268>)
 800ce2e:	4293      	cmp	r3, r2
 800ce30:	d93f      	bls.n	800ceb2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800ce32:	4b7a      	ldr	r3, [pc, #488]	; (800d01c <HAL_RCC_ClockConfig+0x264>)
 800ce34:	689b      	ldr	r3, [r3, #8]
 800ce36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d009      	beq.n	800ce52 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d033      	beq.n	800ceb2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d12f      	bne.n	800ceb2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800ce52:	4b72      	ldr	r3, [pc, #456]	; (800d01c <HAL_RCC_ClockConfig+0x264>)
 800ce54:	689b      	ldr	r3, [r3, #8]
 800ce56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ce5a:	4a70      	ldr	r2, [pc, #448]	; (800d01c <HAL_RCC_ClockConfig+0x264>)
 800ce5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce60:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800ce62:	2380      	movs	r3, #128	; 0x80
 800ce64:	617b      	str	r3, [r7, #20]
 800ce66:	e024      	b.n	800ceb2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	685b      	ldr	r3, [r3, #4]
 800ce6c:	2b02      	cmp	r3, #2
 800ce6e:	d107      	bne.n	800ce80 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800ce70:	4b6a      	ldr	r3, [pc, #424]	; (800d01c <HAL_RCC_ClockConfig+0x264>)
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d109      	bne.n	800ce90 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800ce7c:	2301      	movs	r3, #1
 800ce7e:	e0c6      	b.n	800d00e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ce80:	4b66      	ldr	r3, [pc, #408]	; (800d01c <HAL_RCC_ClockConfig+0x264>)
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d101      	bne.n	800ce90 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800ce8c:	2301      	movs	r3, #1
 800ce8e:	e0be      	b.n	800d00e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800ce90:	f000 f8ce 	bl	800d030 <HAL_RCC_GetSysClockFreq>
 800ce94:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800ce96:	693b      	ldr	r3, [r7, #16]
 800ce98:	4a61      	ldr	r2, [pc, #388]	; (800d020 <HAL_RCC_ClockConfig+0x268>)
 800ce9a:	4293      	cmp	r3, r2
 800ce9c:	d909      	bls.n	800ceb2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800ce9e:	4b5f      	ldr	r3, [pc, #380]	; (800d01c <HAL_RCC_ClockConfig+0x264>)
 800cea0:	689b      	ldr	r3, [r3, #8]
 800cea2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cea6:	4a5d      	ldr	r2, [pc, #372]	; (800d01c <HAL_RCC_ClockConfig+0x264>)
 800cea8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ceac:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800ceae:	2380      	movs	r3, #128	; 0x80
 800ceb0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800ceb2:	4b5a      	ldr	r3, [pc, #360]	; (800d01c <HAL_RCC_ClockConfig+0x264>)
 800ceb4:	689b      	ldr	r3, [r3, #8]
 800ceb6:	f023 0203 	bic.w	r2, r3, #3
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	685b      	ldr	r3, [r3, #4]
 800cebe:	4957      	ldr	r1, [pc, #348]	; (800d01c <HAL_RCC_ClockConfig+0x264>)
 800cec0:	4313      	orrs	r3, r2
 800cec2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cec4:	f7fc f88a 	bl	8008fdc <HAL_GetTick>
 800cec8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ceca:	e00a      	b.n	800cee2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cecc:	f7fc f886 	bl	8008fdc <HAL_GetTick>
 800ced0:	4602      	mov	r2, r0
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	1ad3      	subs	r3, r2, r3
 800ced6:	f241 3288 	movw	r2, #5000	; 0x1388
 800ceda:	4293      	cmp	r3, r2
 800cedc:	d901      	bls.n	800cee2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800cede:	2303      	movs	r3, #3
 800cee0:	e095      	b.n	800d00e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cee2:	4b4e      	ldr	r3, [pc, #312]	; (800d01c <HAL_RCC_ClockConfig+0x264>)
 800cee4:	689b      	ldr	r3, [r3, #8]
 800cee6:	f003 020c 	and.w	r2, r3, #12
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	685b      	ldr	r3, [r3, #4]
 800ceee:	009b      	lsls	r3, r3, #2
 800cef0:	429a      	cmp	r2, r3
 800cef2:	d1eb      	bne.n	800cecc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	f003 0302 	and.w	r3, r3, #2
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d023      	beq.n	800cf48 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	f003 0304 	and.w	r3, r3, #4
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d005      	beq.n	800cf18 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800cf0c:	4b43      	ldr	r3, [pc, #268]	; (800d01c <HAL_RCC_ClockConfig+0x264>)
 800cf0e:	689b      	ldr	r3, [r3, #8]
 800cf10:	4a42      	ldr	r2, [pc, #264]	; (800d01c <HAL_RCC_ClockConfig+0x264>)
 800cf12:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800cf16:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	f003 0308 	and.w	r3, r3, #8
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d007      	beq.n	800cf34 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800cf24:	4b3d      	ldr	r3, [pc, #244]	; (800d01c <HAL_RCC_ClockConfig+0x264>)
 800cf26:	689b      	ldr	r3, [r3, #8]
 800cf28:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800cf2c:	4a3b      	ldr	r2, [pc, #236]	; (800d01c <HAL_RCC_ClockConfig+0x264>)
 800cf2e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800cf32:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800cf34:	4b39      	ldr	r3, [pc, #228]	; (800d01c <HAL_RCC_ClockConfig+0x264>)
 800cf36:	689b      	ldr	r3, [r3, #8]
 800cf38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	689b      	ldr	r3, [r3, #8]
 800cf40:	4936      	ldr	r1, [pc, #216]	; (800d01c <HAL_RCC_ClockConfig+0x264>)
 800cf42:	4313      	orrs	r3, r2
 800cf44:	608b      	str	r3, [r1, #8]
 800cf46:	e008      	b.n	800cf5a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800cf48:	697b      	ldr	r3, [r7, #20]
 800cf4a:	2b80      	cmp	r3, #128	; 0x80
 800cf4c:	d105      	bne.n	800cf5a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800cf4e:	4b33      	ldr	r3, [pc, #204]	; (800d01c <HAL_RCC_ClockConfig+0x264>)
 800cf50:	689b      	ldr	r3, [r3, #8]
 800cf52:	4a32      	ldr	r2, [pc, #200]	; (800d01c <HAL_RCC_ClockConfig+0x264>)
 800cf54:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cf58:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800cf5a:	4b2f      	ldr	r3, [pc, #188]	; (800d018 <HAL_RCC_ClockConfig+0x260>)
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	f003 030f 	and.w	r3, r3, #15
 800cf62:	683a      	ldr	r2, [r7, #0]
 800cf64:	429a      	cmp	r2, r3
 800cf66:	d21d      	bcs.n	800cfa4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cf68:	4b2b      	ldr	r3, [pc, #172]	; (800d018 <HAL_RCC_ClockConfig+0x260>)
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	f023 020f 	bic.w	r2, r3, #15
 800cf70:	4929      	ldr	r1, [pc, #164]	; (800d018 <HAL_RCC_ClockConfig+0x260>)
 800cf72:	683b      	ldr	r3, [r7, #0]
 800cf74:	4313      	orrs	r3, r2
 800cf76:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800cf78:	f7fc f830 	bl	8008fdc <HAL_GetTick>
 800cf7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cf7e:	e00a      	b.n	800cf96 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cf80:	f7fc f82c 	bl	8008fdc <HAL_GetTick>
 800cf84:	4602      	mov	r2, r0
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	1ad3      	subs	r3, r2, r3
 800cf8a:	f241 3288 	movw	r2, #5000	; 0x1388
 800cf8e:	4293      	cmp	r3, r2
 800cf90:	d901      	bls.n	800cf96 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800cf92:	2303      	movs	r3, #3
 800cf94:	e03b      	b.n	800d00e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cf96:	4b20      	ldr	r3, [pc, #128]	; (800d018 <HAL_RCC_ClockConfig+0x260>)
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	f003 030f 	and.w	r3, r3, #15
 800cf9e:	683a      	ldr	r2, [r7, #0]
 800cfa0:	429a      	cmp	r2, r3
 800cfa2:	d1ed      	bne.n	800cf80 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	f003 0304 	and.w	r3, r3, #4
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d008      	beq.n	800cfc2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800cfb0:	4b1a      	ldr	r3, [pc, #104]	; (800d01c <HAL_RCC_ClockConfig+0x264>)
 800cfb2:	689b      	ldr	r3, [r3, #8]
 800cfb4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	68db      	ldr	r3, [r3, #12]
 800cfbc:	4917      	ldr	r1, [pc, #92]	; (800d01c <HAL_RCC_ClockConfig+0x264>)
 800cfbe:	4313      	orrs	r3, r2
 800cfc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	f003 0308 	and.w	r3, r3, #8
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d009      	beq.n	800cfe2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800cfce:	4b13      	ldr	r3, [pc, #76]	; (800d01c <HAL_RCC_ClockConfig+0x264>)
 800cfd0:	689b      	ldr	r3, [r3, #8]
 800cfd2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	691b      	ldr	r3, [r3, #16]
 800cfda:	00db      	lsls	r3, r3, #3
 800cfdc:	490f      	ldr	r1, [pc, #60]	; (800d01c <HAL_RCC_ClockConfig+0x264>)
 800cfde:	4313      	orrs	r3, r2
 800cfe0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800cfe2:	f000 f825 	bl	800d030 <HAL_RCC_GetSysClockFreq>
 800cfe6:	4601      	mov	r1, r0
 800cfe8:	4b0c      	ldr	r3, [pc, #48]	; (800d01c <HAL_RCC_ClockConfig+0x264>)
 800cfea:	689b      	ldr	r3, [r3, #8]
 800cfec:	091b      	lsrs	r3, r3, #4
 800cfee:	f003 030f 	and.w	r3, r3, #15
 800cff2:	4a0c      	ldr	r2, [pc, #48]	; (800d024 <HAL_RCC_ClockConfig+0x26c>)
 800cff4:	5cd3      	ldrb	r3, [r2, r3]
 800cff6:	f003 031f 	and.w	r3, r3, #31
 800cffa:	fa21 f303 	lsr.w	r3, r1, r3
 800cffe:	4a0a      	ldr	r2, [pc, #40]	; (800d028 <HAL_RCC_ClockConfig+0x270>)
 800d000:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800d002:	4b0a      	ldr	r3, [pc, #40]	; (800d02c <HAL_RCC_ClockConfig+0x274>)
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	4618      	mov	r0, r3
 800d008:	f7fb ff9c 	bl	8008f44 <HAL_InitTick>
 800d00c:	4603      	mov	r3, r0
}
 800d00e:	4618      	mov	r0, r3
 800d010:	3718      	adds	r7, #24
 800d012:	46bd      	mov	sp, r7
 800d014:	bd80      	pop	{r7, pc}
 800d016:	bf00      	nop
 800d018:	40022000 	.word	0x40022000
 800d01c:	40021000 	.word	0x40021000
 800d020:	04c4b400 	.word	0x04c4b400
 800d024:	08016710 	.word	0x08016710
 800d028:	20000eb0 	.word	0x20000eb0
 800d02c:	20000eb4 	.word	0x20000eb4

0800d030 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d030:	b480      	push	{r7}
 800d032:	b087      	sub	sp, #28
 800d034:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800d036:	4b2c      	ldr	r3, [pc, #176]	; (800d0e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d038:	689b      	ldr	r3, [r3, #8]
 800d03a:	f003 030c 	and.w	r3, r3, #12
 800d03e:	2b04      	cmp	r3, #4
 800d040:	d102      	bne.n	800d048 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800d042:	4b2a      	ldr	r3, [pc, #168]	; (800d0ec <HAL_RCC_GetSysClockFreq+0xbc>)
 800d044:	613b      	str	r3, [r7, #16]
 800d046:	e047      	b.n	800d0d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800d048:	4b27      	ldr	r3, [pc, #156]	; (800d0e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d04a:	689b      	ldr	r3, [r3, #8]
 800d04c:	f003 030c 	and.w	r3, r3, #12
 800d050:	2b08      	cmp	r3, #8
 800d052:	d102      	bne.n	800d05a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800d054:	4b26      	ldr	r3, [pc, #152]	; (800d0f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800d056:	613b      	str	r3, [r7, #16]
 800d058:	e03e      	b.n	800d0d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800d05a:	4b23      	ldr	r3, [pc, #140]	; (800d0e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d05c:	689b      	ldr	r3, [r3, #8]
 800d05e:	f003 030c 	and.w	r3, r3, #12
 800d062:	2b0c      	cmp	r3, #12
 800d064:	d136      	bne.n	800d0d4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800d066:	4b20      	ldr	r3, [pc, #128]	; (800d0e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d068:	68db      	ldr	r3, [r3, #12]
 800d06a:	f003 0303 	and.w	r3, r3, #3
 800d06e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800d070:	4b1d      	ldr	r3, [pc, #116]	; (800d0e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d072:	68db      	ldr	r3, [r3, #12]
 800d074:	091b      	lsrs	r3, r3, #4
 800d076:	f003 030f 	and.w	r3, r3, #15
 800d07a:	3301      	adds	r3, #1
 800d07c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	2b03      	cmp	r3, #3
 800d082:	d10c      	bne.n	800d09e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800d084:	4a1a      	ldr	r2, [pc, #104]	; (800d0f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800d086:	68bb      	ldr	r3, [r7, #8]
 800d088:	fbb2 f3f3 	udiv	r3, r2, r3
 800d08c:	4a16      	ldr	r2, [pc, #88]	; (800d0e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d08e:	68d2      	ldr	r2, [r2, #12]
 800d090:	0a12      	lsrs	r2, r2, #8
 800d092:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d096:	fb02 f303 	mul.w	r3, r2, r3
 800d09a:	617b      	str	r3, [r7, #20]
      break;
 800d09c:	e00c      	b.n	800d0b8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800d09e:	4a13      	ldr	r2, [pc, #76]	; (800d0ec <HAL_RCC_GetSysClockFreq+0xbc>)
 800d0a0:	68bb      	ldr	r3, [r7, #8]
 800d0a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800d0a6:	4a10      	ldr	r2, [pc, #64]	; (800d0e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d0a8:	68d2      	ldr	r2, [r2, #12]
 800d0aa:	0a12      	lsrs	r2, r2, #8
 800d0ac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d0b0:	fb02 f303 	mul.w	r3, r2, r3
 800d0b4:	617b      	str	r3, [r7, #20]
      break;
 800d0b6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800d0b8:	4b0b      	ldr	r3, [pc, #44]	; (800d0e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d0ba:	68db      	ldr	r3, [r3, #12]
 800d0bc:	0e5b      	lsrs	r3, r3, #25
 800d0be:	f003 0303 	and.w	r3, r3, #3
 800d0c2:	3301      	adds	r3, #1
 800d0c4:	005b      	lsls	r3, r3, #1
 800d0c6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800d0c8:	697a      	ldr	r2, [r7, #20]
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	fbb2 f3f3 	udiv	r3, r2, r3
 800d0d0:	613b      	str	r3, [r7, #16]
 800d0d2:	e001      	b.n	800d0d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800d0d4:	2300      	movs	r3, #0
 800d0d6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800d0d8:	693b      	ldr	r3, [r7, #16]
}
 800d0da:	4618      	mov	r0, r3
 800d0dc:	371c      	adds	r7, #28
 800d0de:	46bd      	mov	sp, r7
 800d0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e4:	4770      	bx	lr
 800d0e6:	bf00      	nop
 800d0e8:	40021000 	.word	0x40021000
 800d0ec:	00f42400 	.word	0x00f42400
 800d0f0:	007a1200 	.word	0x007a1200

0800d0f4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d0f4:	b480      	push	{r7}
 800d0f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800d0f8:	4b03      	ldr	r3, [pc, #12]	; (800d108 <HAL_RCC_GetHCLKFreq+0x14>)
 800d0fa:	681b      	ldr	r3, [r3, #0]
}
 800d0fc:	4618      	mov	r0, r3
 800d0fe:	46bd      	mov	sp, r7
 800d100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d104:	4770      	bx	lr
 800d106:	bf00      	nop
 800d108:	20000eb0 	.word	0x20000eb0

0800d10c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800d10c:	b480      	push	{r7}
 800d10e:	b087      	sub	sp, #28
 800d110:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800d112:	4b1e      	ldr	r3, [pc, #120]	; (800d18c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d114:	68db      	ldr	r3, [r3, #12]
 800d116:	f003 0303 	and.w	r3, r3, #3
 800d11a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800d11c:	4b1b      	ldr	r3, [pc, #108]	; (800d18c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d11e:	68db      	ldr	r3, [r3, #12]
 800d120:	091b      	lsrs	r3, r3, #4
 800d122:	f003 030f 	and.w	r3, r3, #15
 800d126:	3301      	adds	r3, #1
 800d128:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800d12a:	693b      	ldr	r3, [r7, #16]
 800d12c:	2b03      	cmp	r3, #3
 800d12e:	d10c      	bne.n	800d14a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800d130:	4a17      	ldr	r2, [pc, #92]	; (800d190 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	fbb2 f3f3 	udiv	r3, r2, r3
 800d138:	4a14      	ldr	r2, [pc, #80]	; (800d18c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d13a:	68d2      	ldr	r2, [r2, #12]
 800d13c:	0a12      	lsrs	r2, r2, #8
 800d13e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d142:	fb02 f303 	mul.w	r3, r2, r3
 800d146:	617b      	str	r3, [r7, #20]
    break;
 800d148:	e00c      	b.n	800d164 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800d14a:	4a12      	ldr	r2, [pc, #72]	; (800d194 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d152:	4a0e      	ldr	r2, [pc, #56]	; (800d18c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d154:	68d2      	ldr	r2, [r2, #12]
 800d156:	0a12      	lsrs	r2, r2, #8
 800d158:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d15c:	fb02 f303 	mul.w	r3, r2, r3
 800d160:	617b      	str	r3, [r7, #20]
    break;
 800d162:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800d164:	4b09      	ldr	r3, [pc, #36]	; (800d18c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d166:	68db      	ldr	r3, [r3, #12]
 800d168:	0e5b      	lsrs	r3, r3, #25
 800d16a:	f003 0303 	and.w	r3, r3, #3
 800d16e:	3301      	adds	r3, #1
 800d170:	005b      	lsls	r3, r3, #1
 800d172:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800d174:	697a      	ldr	r2, [r7, #20]
 800d176:	68bb      	ldr	r3, [r7, #8]
 800d178:	fbb2 f3f3 	udiv	r3, r2, r3
 800d17c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800d17e:	687b      	ldr	r3, [r7, #4]
}
 800d180:	4618      	mov	r0, r3
 800d182:	371c      	adds	r7, #28
 800d184:	46bd      	mov	sp, r7
 800d186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d18a:	4770      	bx	lr
 800d18c:	40021000 	.word	0x40021000
 800d190:	007a1200 	.word	0x007a1200
 800d194:	00f42400 	.word	0x00f42400

0800d198 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800d198:	b580      	push	{r7, lr}
 800d19a:	b086      	sub	sp, #24
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	f000 8098 	beq.w	800d2e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d1ba:	4b43      	ldr	r3, [pc, #268]	; (800d2c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d1bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d1be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d10d      	bne.n	800d1e2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d1c6:	4b40      	ldr	r3, [pc, #256]	; (800d2c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d1c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d1ca:	4a3f      	ldr	r2, [pc, #252]	; (800d2c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d1cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d1d0:	6593      	str	r3, [r2, #88]	; 0x58
 800d1d2:	4b3d      	ldr	r3, [pc, #244]	; (800d2c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d1d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d1d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d1da:	60bb      	str	r3, [r7, #8]
 800d1dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d1de:	2301      	movs	r3, #1
 800d1e0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d1e2:	4b3a      	ldr	r3, [pc, #232]	; (800d2cc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	4a39      	ldr	r2, [pc, #228]	; (800d2cc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800d1e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d1ec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d1ee:	f7fb fef5 	bl	8008fdc <HAL_GetTick>
 800d1f2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d1f4:	e009      	b.n	800d20a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d1f6:	f7fb fef1 	bl	8008fdc <HAL_GetTick>
 800d1fa:	4602      	mov	r2, r0
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	1ad3      	subs	r3, r2, r3
 800d200:	2b02      	cmp	r3, #2
 800d202:	d902      	bls.n	800d20a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800d204:	2303      	movs	r3, #3
 800d206:	74fb      	strb	r3, [r7, #19]
        break;
 800d208:	e005      	b.n	800d216 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d20a:	4b30      	ldr	r3, [pc, #192]	; (800d2cc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d212:	2b00      	cmp	r3, #0
 800d214:	d0ef      	beq.n	800d1f6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800d216:	7cfb      	ldrb	r3, [r7, #19]
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d159      	bne.n	800d2d0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800d21c:	4b2a      	ldr	r3, [pc, #168]	; (800d2c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d21e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d222:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d226:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800d228:	697b      	ldr	r3, [r7, #20]
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d01e      	beq.n	800d26c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d232:	697a      	ldr	r2, [r7, #20]
 800d234:	429a      	cmp	r2, r3
 800d236:	d019      	beq.n	800d26c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800d238:	4b23      	ldr	r3, [pc, #140]	; (800d2c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d23a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d23e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d242:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800d244:	4b20      	ldr	r3, [pc, #128]	; (800d2c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d246:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d24a:	4a1f      	ldr	r2, [pc, #124]	; (800d2c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d24c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d250:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800d254:	4b1c      	ldr	r3, [pc, #112]	; (800d2c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d256:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d25a:	4a1b      	ldr	r2, [pc, #108]	; (800d2c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d25c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d260:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800d264:	4a18      	ldr	r2, [pc, #96]	; (800d2c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d266:	697b      	ldr	r3, [r7, #20]
 800d268:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800d26c:	697b      	ldr	r3, [r7, #20]
 800d26e:	f003 0301 	and.w	r3, r3, #1
 800d272:	2b00      	cmp	r3, #0
 800d274:	d016      	beq.n	800d2a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d276:	f7fb feb1 	bl	8008fdc <HAL_GetTick>
 800d27a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d27c:	e00b      	b.n	800d296 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d27e:	f7fb fead 	bl	8008fdc <HAL_GetTick>
 800d282:	4602      	mov	r2, r0
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	1ad3      	subs	r3, r2, r3
 800d288:	f241 3288 	movw	r2, #5000	; 0x1388
 800d28c:	4293      	cmp	r3, r2
 800d28e:	d902      	bls.n	800d296 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800d290:	2303      	movs	r3, #3
 800d292:	74fb      	strb	r3, [r7, #19]
            break;
 800d294:	e006      	b.n	800d2a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d296:	4b0c      	ldr	r3, [pc, #48]	; (800d2c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d298:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d29c:	f003 0302 	and.w	r3, r3, #2
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d0ec      	beq.n	800d27e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800d2a4:	7cfb      	ldrb	r3, [r7, #19]
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d10b      	bne.n	800d2c2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d2aa:	4b07      	ldr	r3, [pc, #28]	; (800d2c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d2ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d2b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d2b8:	4903      	ldr	r1, [pc, #12]	; (800d2c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d2ba:	4313      	orrs	r3, r2
 800d2bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800d2c0:	e008      	b.n	800d2d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800d2c2:	7cfb      	ldrb	r3, [r7, #19]
 800d2c4:	74bb      	strb	r3, [r7, #18]
 800d2c6:	e005      	b.n	800d2d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800d2c8:	40021000 	.word	0x40021000
 800d2cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d2d0:	7cfb      	ldrb	r3, [r7, #19]
 800d2d2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800d2d4:	7c7b      	ldrb	r3, [r7, #17]
 800d2d6:	2b01      	cmp	r3, #1
 800d2d8:	d105      	bne.n	800d2e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d2da:	4baf      	ldr	r3, [pc, #700]	; (800d598 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d2dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d2de:	4aae      	ldr	r2, [pc, #696]	; (800d598 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d2e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d2e4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	f003 0301 	and.w	r3, r3, #1
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d00a      	beq.n	800d308 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800d2f2:	4ba9      	ldr	r3, [pc, #676]	; (800d598 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d2f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d2f8:	f023 0203 	bic.w	r2, r3, #3
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	685b      	ldr	r3, [r3, #4]
 800d300:	49a5      	ldr	r1, [pc, #660]	; (800d598 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d302:	4313      	orrs	r3, r2
 800d304:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	f003 0302 	and.w	r3, r3, #2
 800d310:	2b00      	cmp	r3, #0
 800d312:	d00a      	beq.n	800d32a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800d314:	4ba0      	ldr	r3, [pc, #640]	; (800d598 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d31a:	f023 020c 	bic.w	r2, r3, #12
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	689b      	ldr	r3, [r3, #8]
 800d322:	499d      	ldr	r1, [pc, #628]	; (800d598 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d324:	4313      	orrs	r3, r2
 800d326:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	f003 0304 	and.w	r3, r3, #4
 800d332:	2b00      	cmp	r3, #0
 800d334:	d00a      	beq.n	800d34c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800d336:	4b98      	ldr	r3, [pc, #608]	; (800d598 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d338:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d33c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	68db      	ldr	r3, [r3, #12]
 800d344:	4994      	ldr	r1, [pc, #592]	; (800d598 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d346:	4313      	orrs	r3, r2
 800d348:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	f003 0308 	and.w	r3, r3, #8
 800d354:	2b00      	cmp	r3, #0
 800d356:	d00a      	beq.n	800d36e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800d358:	4b8f      	ldr	r3, [pc, #572]	; (800d598 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d35a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d35e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	691b      	ldr	r3, [r3, #16]
 800d366:	498c      	ldr	r1, [pc, #560]	; (800d598 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d368:	4313      	orrs	r3, r2
 800d36a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	f003 0310 	and.w	r3, r3, #16
 800d376:	2b00      	cmp	r3, #0
 800d378:	d00a      	beq.n	800d390 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800d37a:	4b87      	ldr	r3, [pc, #540]	; (800d598 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d37c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d380:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	695b      	ldr	r3, [r3, #20]
 800d388:	4983      	ldr	r1, [pc, #524]	; (800d598 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d38a:	4313      	orrs	r3, r2
 800d38c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	f003 0320 	and.w	r3, r3, #32
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d00a      	beq.n	800d3b2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800d39c:	4b7e      	ldr	r3, [pc, #504]	; (800d598 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d39e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d3a2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	699b      	ldr	r3, [r3, #24]
 800d3aa:	497b      	ldr	r1, [pc, #492]	; (800d598 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d3ac:	4313      	orrs	r3, r2
 800d3ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d00a      	beq.n	800d3d4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800d3be:	4b76      	ldr	r3, [pc, #472]	; (800d598 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d3c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d3c4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	69db      	ldr	r3, [r3, #28]
 800d3cc:	4972      	ldr	r1, [pc, #456]	; (800d598 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d3ce:	4313      	orrs	r3, r2
 800d3d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d00a      	beq.n	800d3f6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800d3e0:	4b6d      	ldr	r3, [pc, #436]	; (800d598 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d3e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d3e6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	6a1b      	ldr	r3, [r3, #32]
 800d3ee:	496a      	ldr	r1, [pc, #424]	; (800d598 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d3f0:	4313      	orrs	r3, r2
 800d3f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d00a      	beq.n	800d418 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800d402:	4b65      	ldr	r3, [pc, #404]	; (800d598 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d404:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d408:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d410:	4961      	ldr	r1, [pc, #388]	; (800d598 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d412:	4313      	orrs	r3, r2
 800d414:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d420:	2b00      	cmp	r3, #0
 800d422:	d00a      	beq.n	800d43a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800d424:	4b5c      	ldr	r3, [pc, #368]	; (800d598 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d426:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d42a:	f023 0203 	bic.w	r2, r3, #3
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d432:	4959      	ldr	r1, [pc, #356]	; (800d598 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d434:	4313      	orrs	r3, r2
 800d436:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d442:	2b00      	cmp	r3, #0
 800d444:	d00a      	beq.n	800d45c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d446:	4b54      	ldr	r3, [pc, #336]	; (800d598 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d44c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d454:	4950      	ldr	r1, [pc, #320]	; (800d598 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d456:	4313      	orrs	r3, r2
 800d458:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d464:	2b00      	cmp	r3, #0
 800d466:	d015      	beq.n	800d494 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800d468:	4b4b      	ldr	r3, [pc, #300]	; (800d598 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d46a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d46e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d476:	4948      	ldr	r1, [pc, #288]	; (800d598 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d478:	4313      	orrs	r3, r2
 800d47a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d482:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d486:	d105      	bne.n	800d494 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d488:	4b43      	ldr	r3, [pc, #268]	; (800d598 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d48a:	68db      	ldr	r3, [r3, #12]
 800d48c:	4a42      	ldr	r2, [pc, #264]	; (800d598 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d48e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d492:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d015      	beq.n	800d4cc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800d4a0:	4b3d      	ldr	r3, [pc, #244]	; (800d598 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d4a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d4a6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4ae:	493a      	ldr	r1, [pc, #232]	; (800d598 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d4b0:	4313      	orrs	r3, r2
 800d4b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d4be:	d105      	bne.n	800d4cc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d4c0:	4b35      	ldr	r3, [pc, #212]	; (800d598 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d4c2:	68db      	ldr	r3, [r3, #12]
 800d4c4:	4a34      	ldr	r2, [pc, #208]	; (800d598 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d4c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d4ca:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d015      	beq.n	800d504 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800d4d8:	4b2f      	ldr	r3, [pc, #188]	; (800d598 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d4da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d4de:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4e6:	492c      	ldr	r1, [pc, #176]	; (800d598 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d4e8:	4313      	orrs	r3, r2
 800d4ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4f2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d4f6:	d105      	bne.n	800d504 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d4f8:	4b27      	ldr	r3, [pc, #156]	; (800d598 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d4fa:	68db      	ldr	r3, [r3, #12]
 800d4fc:	4a26      	ldr	r2, [pc, #152]	; (800d598 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d4fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d502:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d015      	beq.n	800d53c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d510:	4b21      	ldr	r3, [pc, #132]	; (800d598 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d516:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d51e:	491e      	ldr	r1, [pc, #120]	; (800d598 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d520:	4313      	orrs	r3, r2
 800d522:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d52a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d52e:	d105      	bne.n	800d53c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d530:	4b19      	ldr	r3, [pc, #100]	; (800d598 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d532:	68db      	ldr	r3, [r3, #12]
 800d534:	4a18      	ldr	r2, [pc, #96]	; (800d598 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d536:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d53a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d544:	2b00      	cmp	r3, #0
 800d546:	d015      	beq.n	800d574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d548:	4b13      	ldr	r3, [pc, #76]	; (800d598 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d54a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d54e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d556:	4910      	ldr	r1, [pc, #64]	; (800d598 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d558:	4313      	orrs	r3, r2
 800d55a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d562:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d566:	d105      	bne.n	800d574 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d568:	4b0b      	ldr	r3, [pc, #44]	; (800d598 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d56a:	68db      	ldr	r3, [r3, #12]
 800d56c:	4a0a      	ldr	r2, [pc, #40]	; (800d598 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d56e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d572:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d018      	beq.n	800d5b2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800d580:	4b05      	ldr	r3, [pc, #20]	; (800d598 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d586:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d58e:	4902      	ldr	r1, [pc, #8]	; (800d598 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d590:	4313      	orrs	r3, r2
 800d592:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800d596:	e001      	b.n	800d59c <HAL_RCCEx_PeriphCLKConfig+0x404>
 800d598:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d5a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d5a4:	d105      	bne.n	800d5b2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800d5a6:	4b21      	ldr	r3, [pc, #132]	; (800d62c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800d5a8:	68db      	ldr	r3, [r3, #12]
 800d5aa:	4a20      	ldr	r2, [pc, #128]	; (800d62c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800d5ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d5b0:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d015      	beq.n	800d5ea <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800d5be:	4b1b      	ldr	r3, [pc, #108]	; (800d62c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800d5c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d5c4:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d5cc:	4917      	ldr	r1, [pc, #92]	; (800d62c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800d5ce:	4313      	orrs	r3, r2
 800d5d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d5d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d5dc:	d105      	bne.n	800d5ea <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800d5de:	4b13      	ldr	r3, [pc, #76]	; (800d62c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800d5e0:	68db      	ldr	r3, [r3, #12]
 800d5e2:	4a12      	ldr	r2, [pc, #72]	; (800d62c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800d5e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d5e8:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d015      	beq.n	800d622 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800d5f6:	4b0d      	ldr	r3, [pc, #52]	; (800d62c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800d5f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d5fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d604:	4909      	ldr	r1, [pc, #36]	; (800d62c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800d606:	4313      	orrs	r3, r2
 800d608:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d610:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d614:	d105      	bne.n	800d622 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d616:	4b05      	ldr	r3, [pc, #20]	; (800d62c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800d618:	68db      	ldr	r3, [r3, #12]
 800d61a:	4a04      	ldr	r2, [pc, #16]	; (800d62c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800d61c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d620:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800d622:	7cbb      	ldrb	r3, [r7, #18]
}
 800d624:	4618      	mov	r0, r3
 800d626:	3718      	adds	r7, #24
 800d628:	46bd      	mov	sp, r7
 800d62a:	bd80      	pop	{r7, pc}
 800d62c:	40021000 	.word	0x40021000

0800d630 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d630:	b580      	push	{r7, lr}
 800d632:	b084      	sub	sp, #16
 800d634:	af00      	add	r7, sp, #0
 800d636:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d101      	bne.n	800d642 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d63e:	2301      	movs	r3, #1
 800d640:	e084      	b.n	800d74c <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	2200      	movs	r2, #0
 800d646:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d64e:	b2db      	uxtb	r3, r3
 800d650:	2b00      	cmp	r3, #0
 800d652:	d106      	bne.n	800d662 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	2200      	movs	r2, #0
 800d658:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d65c:	6878      	ldr	r0, [r7, #4]
 800d65e:	f7fa fe1d 	bl	800829c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	2202      	movs	r2, #2
 800d666:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	681a      	ldr	r2, [r3, #0]
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d678:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	68db      	ldr	r3, [r3, #12]
 800d67e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d682:	d902      	bls.n	800d68a <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800d684:	2300      	movs	r3, #0
 800d686:	60fb      	str	r3, [r7, #12]
 800d688:	e002      	b.n	800d690 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800d68a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d68e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	68db      	ldr	r3, [r3, #12]
 800d694:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800d698:	d007      	beq.n	800d6aa <HAL_SPI_Init+0x7a>
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	68db      	ldr	r3, [r3, #12]
 800d69e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d6a2:	d002      	beq.n	800d6aa <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	2200      	movs	r2, #0
 800d6a8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d10b      	bne.n	800d6ca <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	68db      	ldr	r3, [r3, #12]
 800d6b6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d6ba:	d903      	bls.n	800d6c4 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	2202      	movs	r2, #2
 800d6c0:	631a      	str	r2, [r3, #48]	; 0x30
 800d6c2:	e002      	b.n	800d6ca <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	2201      	movs	r2, #1
 800d6c8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	685a      	ldr	r2, [r3, #4]
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	689b      	ldr	r3, [r3, #8]
 800d6d2:	431a      	orrs	r2, r3
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	691b      	ldr	r3, [r3, #16]
 800d6d8:	431a      	orrs	r2, r3
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	695b      	ldr	r3, [r3, #20]
 800d6de:	431a      	orrs	r2, r3
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	699b      	ldr	r3, [r3, #24]
 800d6e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d6e8:	431a      	orrs	r2, r3
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	69db      	ldr	r3, [r3, #28]
 800d6ee:	431a      	orrs	r2, r3
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	6a1b      	ldr	r3, [r3, #32]
 800d6f4:	ea42 0103 	orr.w	r1, r2, r3
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	430a      	orrs	r2, r1
 800d702:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	699b      	ldr	r3, [r3, #24]
 800d708:	0c1b      	lsrs	r3, r3, #16
 800d70a:	f003 0204 	and.w	r2, r3, #4
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d712:	431a      	orrs	r2, r3
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d718:	431a      	orrs	r2, r3
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	68db      	ldr	r3, [r3, #12]
 800d71e:	ea42 0103 	orr.w	r1, r2, r3
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	68fa      	ldr	r2, [r7, #12]
 800d728:	430a      	orrs	r2, r1
 800d72a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	69da      	ldr	r2, [r3, #28]
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d73a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	2200      	movs	r2, #0
 800d740:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	2201      	movs	r2, #1
 800d746:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800d74a:	2300      	movs	r3, #0
}
 800d74c:	4618      	mov	r0, r3
 800d74e:	3710      	adds	r7, #16
 800d750:	46bd      	mov	sp, r7
 800d752:	bd80      	pop	{r7, pc}

0800d754 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d754:	b580      	push	{r7, lr}
 800d756:	b082      	sub	sp, #8
 800d758:	af00      	add	r7, sp, #0
 800d75a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d101      	bne.n	800d766 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d762:	2301      	movs	r3, #1
 800d764:	e049      	b.n	800d7fa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d76c:	b2db      	uxtb	r3, r3
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d106      	bne.n	800d780 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	2200      	movs	r2, #0
 800d776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d77a:	6878      	ldr	r0, [r7, #4]
 800d77c:	f7fb fa98 	bl	8008cb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	2202      	movs	r2, #2
 800d784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	681a      	ldr	r2, [r3, #0]
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	3304      	adds	r3, #4
 800d790:	4619      	mov	r1, r3
 800d792:	4610      	mov	r0, r2
 800d794:	f001 fb9e 	bl	800eed4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	2201      	movs	r2, #1
 800d79c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	2201      	movs	r2, #1
 800d7a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	2201      	movs	r2, #1
 800d7ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	2201      	movs	r2, #1
 800d7b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	2201      	movs	r2, #1
 800d7bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	2201      	movs	r2, #1
 800d7c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	2201      	movs	r2, #1
 800d7cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	2201      	movs	r2, #1
 800d7d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	2201      	movs	r2, #1
 800d7dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	2201      	movs	r2, #1
 800d7e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	2201      	movs	r2, #1
 800d7ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	2201      	movs	r2, #1
 800d7f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d7f8:	2300      	movs	r3, #0
}
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	3708      	adds	r7, #8
 800d7fe:	46bd      	mov	sp, r7
 800d800:	bd80      	pop	{r7, pc}
	...

0800d804 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800d804:	b480      	push	{r7}
 800d806:	b085      	sub	sp, #20
 800d808:	af00      	add	r7, sp, #0
 800d80a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d812:	b2db      	uxtb	r3, r3
 800d814:	2b01      	cmp	r3, #1
 800d816:	d001      	beq.n	800d81c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800d818:	2301      	movs	r3, #1
 800d81a:	e019      	b.n	800d850 <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	2202      	movs	r2, #2
 800d820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	689a      	ldr	r2, [r3, #8]
 800d82a:	4b0c      	ldr	r3, [pc, #48]	; (800d85c <HAL_TIM_Base_Start+0x58>)
 800d82c:	4013      	ands	r3, r2
 800d82e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	2b06      	cmp	r3, #6
 800d834:	d00b      	beq.n	800d84e <HAL_TIM_Base_Start+0x4a>
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d83c:	d007      	beq.n	800d84e <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	681a      	ldr	r2, [r3, #0]
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	f042 0201 	orr.w	r2, r2, #1
 800d84c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d84e:	2300      	movs	r3, #0
}
 800d850:	4618      	mov	r0, r3
 800d852:	3714      	adds	r7, #20
 800d854:	46bd      	mov	sp, r7
 800d856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d85a:	4770      	bx	lr
 800d85c:	00010007 	.word	0x00010007

0800d860 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800d860:	b480      	push	{r7}
 800d862:	b083      	sub	sp, #12
 800d864:	af00      	add	r7, sp, #0
 800d866:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	6a1a      	ldr	r2, [r3, #32]
 800d86e:	f241 1311 	movw	r3, #4369	; 0x1111
 800d872:	4013      	ands	r3, r2
 800d874:	2b00      	cmp	r3, #0
 800d876:	d10f      	bne.n	800d898 <HAL_TIM_Base_Stop+0x38>
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	6a1a      	ldr	r2, [r3, #32]
 800d87e:	f244 4344 	movw	r3, #17476	; 0x4444
 800d882:	4013      	ands	r3, r2
 800d884:	2b00      	cmp	r3, #0
 800d886:	d107      	bne.n	800d898 <HAL_TIM_Base_Stop+0x38>
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	681a      	ldr	r2, [r3, #0]
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	f022 0201 	bic.w	r2, r2, #1
 800d896:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	2201      	movs	r2, #1
 800d89c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800d8a0:	2300      	movs	r3, #0
}
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	370c      	adds	r7, #12
 800d8a6:	46bd      	mov	sp, r7
 800d8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ac:	4770      	bx	lr
	...

0800d8b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d8b0:	b480      	push	{r7}
 800d8b2:	b085      	sub	sp, #20
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d8be:	b2db      	uxtb	r3, r3
 800d8c0:	2b01      	cmp	r3, #1
 800d8c2:	d001      	beq.n	800d8c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d8c4:	2301      	movs	r3, #1
 800d8c6:	e021      	b.n	800d90c <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	2202      	movs	r2, #2
 800d8cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	68da      	ldr	r2, [r3, #12]
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	f042 0201 	orr.w	r2, r2, #1
 800d8de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	689a      	ldr	r2, [r3, #8]
 800d8e6:	4b0c      	ldr	r3, [pc, #48]	; (800d918 <HAL_TIM_Base_Start_IT+0x68>)
 800d8e8:	4013      	ands	r3, r2
 800d8ea:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	2b06      	cmp	r3, #6
 800d8f0:	d00b      	beq.n	800d90a <HAL_TIM_Base_Start_IT+0x5a>
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d8f8:	d007      	beq.n	800d90a <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	681a      	ldr	r2, [r3, #0]
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	f042 0201 	orr.w	r2, r2, #1
 800d908:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d90a:	2300      	movs	r3, #0
}
 800d90c:	4618      	mov	r0, r3
 800d90e:	3714      	adds	r7, #20
 800d910:	46bd      	mov	sp, r7
 800d912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d916:	4770      	bx	lr
 800d918:	00010007 	.word	0x00010007

0800d91c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800d91c:	b480      	push	{r7}
 800d91e:	b083      	sub	sp, #12
 800d920:	af00      	add	r7, sp, #0
 800d922:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	68da      	ldr	r2, [r3, #12]
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	f022 0201 	bic.w	r2, r2, #1
 800d932:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	6a1a      	ldr	r2, [r3, #32]
 800d93a:	f241 1311 	movw	r3, #4369	; 0x1111
 800d93e:	4013      	ands	r3, r2
 800d940:	2b00      	cmp	r3, #0
 800d942:	d10f      	bne.n	800d964 <HAL_TIM_Base_Stop_IT+0x48>
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	6a1a      	ldr	r2, [r3, #32]
 800d94a:	f244 4344 	movw	r3, #17476	; 0x4444
 800d94e:	4013      	ands	r3, r2
 800d950:	2b00      	cmp	r3, #0
 800d952:	d107      	bne.n	800d964 <HAL_TIM_Base_Stop_IT+0x48>
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	681a      	ldr	r2, [r3, #0]
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	f022 0201 	bic.w	r2, r2, #1
 800d962:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	2201      	movs	r2, #1
 800d968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800d96c:	2300      	movs	r3, #0
}
 800d96e:	4618      	mov	r0, r3
 800d970:	370c      	adds	r7, #12
 800d972:	46bd      	mov	sp, r7
 800d974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d978:	4770      	bx	lr

0800d97a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d97a:	b580      	push	{r7, lr}
 800d97c:	b082      	sub	sp, #8
 800d97e:	af00      	add	r7, sp, #0
 800d980:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	2b00      	cmp	r3, #0
 800d986:	d101      	bne.n	800d98c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d988:	2301      	movs	r3, #1
 800d98a:	e049      	b.n	800da20 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d992:	b2db      	uxtb	r3, r3
 800d994:	2b00      	cmp	r3, #0
 800d996:	d106      	bne.n	800d9a6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	2200      	movs	r2, #0
 800d99c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d9a0:	6878      	ldr	r0, [r7, #4]
 800d9a2:	f000 f841 	bl	800da28 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	2202      	movs	r2, #2
 800d9aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	681a      	ldr	r2, [r3, #0]
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	3304      	adds	r3, #4
 800d9b6:	4619      	mov	r1, r3
 800d9b8:	4610      	mov	r0, r2
 800d9ba:	f001 fa8b 	bl	800eed4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	2201      	movs	r2, #1
 800d9c2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	2201      	movs	r2, #1
 800d9ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	2201      	movs	r2, #1
 800d9d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	2201      	movs	r2, #1
 800d9da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	2201      	movs	r2, #1
 800d9e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	2201      	movs	r2, #1
 800d9ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	2201      	movs	r2, #1
 800d9f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	2201      	movs	r2, #1
 800d9fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	2201      	movs	r2, #1
 800da02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	2201      	movs	r2, #1
 800da0a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	2201      	movs	r2, #1
 800da12:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	2201      	movs	r2, #1
 800da1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800da1e:	2300      	movs	r3, #0
}
 800da20:	4618      	mov	r0, r3
 800da22:	3708      	adds	r7, #8
 800da24:	46bd      	mov	sp, r7
 800da26:	bd80      	pop	{r7, pc}

0800da28 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800da28:	b480      	push	{r7}
 800da2a:	b083      	sub	sp, #12
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800da30:	bf00      	nop
 800da32:	370c      	adds	r7, #12
 800da34:	46bd      	mov	sp, r7
 800da36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da3a:	4770      	bx	lr

0800da3c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800da3c:	b580      	push	{r7, lr}
 800da3e:	b084      	sub	sp, #16
 800da40:	af00      	add	r7, sp, #0
 800da42:	6078      	str	r0, [r7, #4]
 800da44:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800da46:	683b      	ldr	r3, [r7, #0]
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d109      	bne.n	800da60 <HAL_TIM_PWM_Start+0x24>
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800da52:	b2db      	uxtb	r3, r3
 800da54:	2b01      	cmp	r3, #1
 800da56:	bf14      	ite	ne
 800da58:	2301      	movne	r3, #1
 800da5a:	2300      	moveq	r3, #0
 800da5c:	b2db      	uxtb	r3, r3
 800da5e:	e03c      	b.n	800dada <HAL_TIM_PWM_Start+0x9e>
 800da60:	683b      	ldr	r3, [r7, #0]
 800da62:	2b04      	cmp	r3, #4
 800da64:	d109      	bne.n	800da7a <HAL_TIM_PWM_Start+0x3e>
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800da6c:	b2db      	uxtb	r3, r3
 800da6e:	2b01      	cmp	r3, #1
 800da70:	bf14      	ite	ne
 800da72:	2301      	movne	r3, #1
 800da74:	2300      	moveq	r3, #0
 800da76:	b2db      	uxtb	r3, r3
 800da78:	e02f      	b.n	800dada <HAL_TIM_PWM_Start+0x9e>
 800da7a:	683b      	ldr	r3, [r7, #0]
 800da7c:	2b08      	cmp	r3, #8
 800da7e:	d109      	bne.n	800da94 <HAL_TIM_PWM_Start+0x58>
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800da86:	b2db      	uxtb	r3, r3
 800da88:	2b01      	cmp	r3, #1
 800da8a:	bf14      	ite	ne
 800da8c:	2301      	movne	r3, #1
 800da8e:	2300      	moveq	r3, #0
 800da90:	b2db      	uxtb	r3, r3
 800da92:	e022      	b.n	800dada <HAL_TIM_PWM_Start+0x9e>
 800da94:	683b      	ldr	r3, [r7, #0]
 800da96:	2b0c      	cmp	r3, #12
 800da98:	d109      	bne.n	800daae <HAL_TIM_PWM_Start+0x72>
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800daa0:	b2db      	uxtb	r3, r3
 800daa2:	2b01      	cmp	r3, #1
 800daa4:	bf14      	ite	ne
 800daa6:	2301      	movne	r3, #1
 800daa8:	2300      	moveq	r3, #0
 800daaa:	b2db      	uxtb	r3, r3
 800daac:	e015      	b.n	800dada <HAL_TIM_PWM_Start+0x9e>
 800daae:	683b      	ldr	r3, [r7, #0]
 800dab0:	2b10      	cmp	r3, #16
 800dab2:	d109      	bne.n	800dac8 <HAL_TIM_PWM_Start+0x8c>
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800daba:	b2db      	uxtb	r3, r3
 800dabc:	2b01      	cmp	r3, #1
 800dabe:	bf14      	ite	ne
 800dac0:	2301      	movne	r3, #1
 800dac2:	2300      	moveq	r3, #0
 800dac4:	b2db      	uxtb	r3, r3
 800dac6:	e008      	b.n	800dada <HAL_TIM_PWM_Start+0x9e>
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800dace:	b2db      	uxtb	r3, r3
 800dad0:	2b01      	cmp	r3, #1
 800dad2:	bf14      	ite	ne
 800dad4:	2301      	movne	r3, #1
 800dad6:	2300      	moveq	r3, #0
 800dad8:	b2db      	uxtb	r3, r3
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d001      	beq.n	800dae2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800dade:	2301      	movs	r3, #1
 800dae0:	e073      	b.n	800dbca <HAL_TIM_PWM_Start+0x18e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800dae2:	683b      	ldr	r3, [r7, #0]
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d104      	bne.n	800daf2 <HAL_TIM_PWM_Start+0xb6>
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	2202      	movs	r2, #2
 800daec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800daf0:	e023      	b.n	800db3a <HAL_TIM_PWM_Start+0xfe>
 800daf2:	683b      	ldr	r3, [r7, #0]
 800daf4:	2b04      	cmp	r3, #4
 800daf6:	d104      	bne.n	800db02 <HAL_TIM_PWM_Start+0xc6>
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	2202      	movs	r2, #2
 800dafc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800db00:	e01b      	b.n	800db3a <HAL_TIM_PWM_Start+0xfe>
 800db02:	683b      	ldr	r3, [r7, #0]
 800db04:	2b08      	cmp	r3, #8
 800db06:	d104      	bne.n	800db12 <HAL_TIM_PWM_Start+0xd6>
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	2202      	movs	r2, #2
 800db0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800db10:	e013      	b.n	800db3a <HAL_TIM_PWM_Start+0xfe>
 800db12:	683b      	ldr	r3, [r7, #0]
 800db14:	2b0c      	cmp	r3, #12
 800db16:	d104      	bne.n	800db22 <HAL_TIM_PWM_Start+0xe6>
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	2202      	movs	r2, #2
 800db1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800db20:	e00b      	b.n	800db3a <HAL_TIM_PWM_Start+0xfe>
 800db22:	683b      	ldr	r3, [r7, #0]
 800db24:	2b10      	cmp	r3, #16
 800db26:	d104      	bne.n	800db32 <HAL_TIM_PWM_Start+0xf6>
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	2202      	movs	r2, #2
 800db2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800db30:	e003      	b.n	800db3a <HAL_TIM_PWM_Start+0xfe>
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	2202      	movs	r2, #2
 800db36:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	2201      	movs	r2, #1
 800db40:	6839      	ldr	r1, [r7, #0]
 800db42:	4618      	mov	r0, r3
 800db44:	f002 f81a 	bl	800fb7c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	4a21      	ldr	r2, [pc, #132]	; (800dbd4 <HAL_TIM_PWM_Start+0x198>)
 800db4e:	4293      	cmp	r3, r2
 800db50:	d018      	beq.n	800db84 <HAL_TIM_PWM_Start+0x148>
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	4a20      	ldr	r2, [pc, #128]	; (800dbd8 <HAL_TIM_PWM_Start+0x19c>)
 800db58:	4293      	cmp	r3, r2
 800db5a:	d013      	beq.n	800db84 <HAL_TIM_PWM_Start+0x148>
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	4a1e      	ldr	r2, [pc, #120]	; (800dbdc <HAL_TIM_PWM_Start+0x1a0>)
 800db62:	4293      	cmp	r3, r2
 800db64:	d00e      	beq.n	800db84 <HAL_TIM_PWM_Start+0x148>
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	4a1d      	ldr	r2, [pc, #116]	; (800dbe0 <HAL_TIM_PWM_Start+0x1a4>)
 800db6c:	4293      	cmp	r3, r2
 800db6e:	d009      	beq.n	800db84 <HAL_TIM_PWM_Start+0x148>
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	4a1b      	ldr	r2, [pc, #108]	; (800dbe4 <HAL_TIM_PWM_Start+0x1a8>)
 800db76:	4293      	cmp	r3, r2
 800db78:	d004      	beq.n	800db84 <HAL_TIM_PWM_Start+0x148>
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	4a1a      	ldr	r2, [pc, #104]	; (800dbe8 <HAL_TIM_PWM_Start+0x1ac>)
 800db80:	4293      	cmp	r3, r2
 800db82:	d101      	bne.n	800db88 <HAL_TIM_PWM_Start+0x14c>
 800db84:	2301      	movs	r3, #1
 800db86:	e000      	b.n	800db8a <HAL_TIM_PWM_Start+0x14e>
 800db88:	2300      	movs	r3, #0
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d007      	beq.n	800db9e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800db9c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	689a      	ldr	r2, [r3, #8]
 800dba4:	4b11      	ldr	r3, [pc, #68]	; (800dbec <HAL_TIM_PWM_Start+0x1b0>)
 800dba6:	4013      	ands	r3, r2
 800dba8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	2b06      	cmp	r3, #6
 800dbae:	d00b      	beq.n	800dbc8 <HAL_TIM_PWM_Start+0x18c>
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dbb6:	d007      	beq.n	800dbc8 <HAL_TIM_PWM_Start+0x18c>
  {
    __HAL_TIM_ENABLE(htim);
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	681a      	ldr	r2, [r3, #0]
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	f042 0201 	orr.w	r2, r2, #1
 800dbc6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800dbc8:	2300      	movs	r3, #0
}
 800dbca:	4618      	mov	r0, r3
 800dbcc:	3710      	adds	r7, #16
 800dbce:	46bd      	mov	sp, r7
 800dbd0:	bd80      	pop	{r7, pc}
 800dbd2:	bf00      	nop
 800dbd4:	40012c00 	.word	0x40012c00
 800dbd8:	40013400 	.word	0x40013400
 800dbdc:	40014000 	.word	0x40014000
 800dbe0:	40014400 	.word	0x40014400
 800dbe4:	40014800 	.word	0x40014800
 800dbe8:	40015000 	.word	0x40015000
 800dbec:	00010007 	.word	0x00010007

0800dbf0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800dbf0:	b580      	push	{r7, lr}
 800dbf2:	b082      	sub	sp, #8
 800dbf4:	af00      	add	r7, sp, #0
 800dbf6:	6078      	str	r0, [r7, #4]
 800dbf8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	2200      	movs	r2, #0
 800dc00:	6839      	ldr	r1, [r7, #0]
 800dc02:	4618      	mov	r0, r3
 800dc04:	f001 ffba 	bl	800fb7c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	4a40      	ldr	r2, [pc, #256]	; (800dd10 <HAL_TIM_PWM_Stop+0x120>)
 800dc0e:	4293      	cmp	r3, r2
 800dc10:	d018      	beq.n	800dc44 <HAL_TIM_PWM_Stop+0x54>
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	4a3f      	ldr	r2, [pc, #252]	; (800dd14 <HAL_TIM_PWM_Stop+0x124>)
 800dc18:	4293      	cmp	r3, r2
 800dc1a:	d013      	beq.n	800dc44 <HAL_TIM_PWM_Stop+0x54>
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	4a3d      	ldr	r2, [pc, #244]	; (800dd18 <HAL_TIM_PWM_Stop+0x128>)
 800dc22:	4293      	cmp	r3, r2
 800dc24:	d00e      	beq.n	800dc44 <HAL_TIM_PWM_Stop+0x54>
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	4a3c      	ldr	r2, [pc, #240]	; (800dd1c <HAL_TIM_PWM_Stop+0x12c>)
 800dc2c:	4293      	cmp	r3, r2
 800dc2e:	d009      	beq.n	800dc44 <HAL_TIM_PWM_Stop+0x54>
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	4a3a      	ldr	r2, [pc, #232]	; (800dd20 <HAL_TIM_PWM_Stop+0x130>)
 800dc36:	4293      	cmp	r3, r2
 800dc38:	d004      	beq.n	800dc44 <HAL_TIM_PWM_Stop+0x54>
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	4a39      	ldr	r2, [pc, #228]	; (800dd24 <HAL_TIM_PWM_Stop+0x134>)
 800dc40:	4293      	cmp	r3, r2
 800dc42:	d101      	bne.n	800dc48 <HAL_TIM_PWM_Stop+0x58>
 800dc44:	2301      	movs	r3, #1
 800dc46:	e000      	b.n	800dc4a <HAL_TIM_PWM_Stop+0x5a>
 800dc48:	2300      	movs	r3, #0
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d017      	beq.n	800dc7e <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	6a1a      	ldr	r2, [r3, #32]
 800dc54:	f241 1311 	movw	r3, #4369	; 0x1111
 800dc58:	4013      	ands	r3, r2
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d10f      	bne.n	800dc7e <HAL_TIM_PWM_Stop+0x8e>
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	6a1a      	ldr	r2, [r3, #32]
 800dc64:	f244 4344 	movw	r3, #17476	; 0x4444
 800dc68:	4013      	ands	r3, r2
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d107      	bne.n	800dc7e <HAL_TIM_PWM_Stop+0x8e>
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800dc7c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	6a1a      	ldr	r2, [r3, #32]
 800dc84:	f241 1311 	movw	r3, #4369	; 0x1111
 800dc88:	4013      	ands	r3, r2
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d10f      	bne.n	800dcae <HAL_TIM_PWM_Stop+0xbe>
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	6a1a      	ldr	r2, [r3, #32]
 800dc94:	f244 4344 	movw	r3, #17476	; 0x4444
 800dc98:	4013      	ands	r3, r2
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d107      	bne.n	800dcae <HAL_TIM_PWM_Stop+0xbe>
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	681a      	ldr	r2, [r3, #0]
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	f022 0201 	bic.w	r2, r2, #1
 800dcac:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800dcae:	683b      	ldr	r3, [r7, #0]
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d104      	bne.n	800dcbe <HAL_TIM_PWM_Stop+0xce>
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	2201      	movs	r2, #1
 800dcb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800dcbc:	e023      	b.n	800dd06 <HAL_TIM_PWM_Stop+0x116>
 800dcbe:	683b      	ldr	r3, [r7, #0]
 800dcc0:	2b04      	cmp	r3, #4
 800dcc2:	d104      	bne.n	800dcce <HAL_TIM_PWM_Stop+0xde>
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	2201      	movs	r2, #1
 800dcc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800dccc:	e01b      	b.n	800dd06 <HAL_TIM_PWM_Stop+0x116>
 800dcce:	683b      	ldr	r3, [r7, #0]
 800dcd0:	2b08      	cmp	r3, #8
 800dcd2:	d104      	bne.n	800dcde <HAL_TIM_PWM_Stop+0xee>
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	2201      	movs	r2, #1
 800dcd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800dcdc:	e013      	b.n	800dd06 <HAL_TIM_PWM_Stop+0x116>
 800dcde:	683b      	ldr	r3, [r7, #0]
 800dce0:	2b0c      	cmp	r3, #12
 800dce2:	d104      	bne.n	800dcee <HAL_TIM_PWM_Stop+0xfe>
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	2201      	movs	r2, #1
 800dce8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800dcec:	e00b      	b.n	800dd06 <HAL_TIM_PWM_Stop+0x116>
 800dcee:	683b      	ldr	r3, [r7, #0]
 800dcf0:	2b10      	cmp	r3, #16
 800dcf2:	d104      	bne.n	800dcfe <HAL_TIM_PWM_Stop+0x10e>
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	2201      	movs	r2, #1
 800dcf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800dcfc:	e003      	b.n	800dd06 <HAL_TIM_PWM_Stop+0x116>
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	2201      	movs	r2, #1
 800dd02:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800dd06:	2300      	movs	r3, #0
}
 800dd08:	4618      	mov	r0, r3
 800dd0a:	3708      	adds	r7, #8
 800dd0c:	46bd      	mov	sp, r7
 800dd0e:	bd80      	pop	{r7, pc}
 800dd10:	40012c00 	.word	0x40012c00
 800dd14:	40013400 	.word	0x40013400
 800dd18:	40014000 	.word	0x40014000
 800dd1c:	40014400 	.word	0x40014400
 800dd20:	40014800 	.word	0x40014800
 800dd24:	40015000 	.word	0x40015000

0800dd28 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800dd28:	b580      	push	{r7, lr}
 800dd2a:	b082      	sub	sp, #8
 800dd2c:	af00      	add	r7, sp, #0
 800dd2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d101      	bne.n	800dd3a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800dd36:	2301      	movs	r3, #1
 800dd38:	e049      	b.n	800ddce <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dd40:	b2db      	uxtb	r3, r3
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d106      	bne.n	800dd54 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	2200      	movs	r2, #0
 800dd4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800dd4e:	6878      	ldr	r0, [r7, #4]
 800dd50:	f000 f841 	bl	800ddd6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	2202      	movs	r2, #2
 800dd58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	681a      	ldr	r2, [r3, #0]
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	3304      	adds	r3, #4
 800dd64:	4619      	mov	r1, r3
 800dd66:	4610      	mov	r0, r2
 800dd68:	f001 f8b4 	bl	800eed4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	2201      	movs	r2, #1
 800dd70:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	2201      	movs	r2, #1
 800dd78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	2201      	movs	r2, #1
 800dd80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	2201      	movs	r2, #1
 800dd88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	2201      	movs	r2, #1
 800dd90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	2201      	movs	r2, #1
 800dd98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	2201      	movs	r2, #1
 800dda0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	2201      	movs	r2, #1
 800dda8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	2201      	movs	r2, #1
 800ddb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	2201      	movs	r2, #1
 800ddb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	2201      	movs	r2, #1
 800ddc0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	2201      	movs	r2, #1
 800ddc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ddcc:	2300      	movs	r3, #0
}
 800ddce:	4618      	mov	r0, r3
 800ddd0:	3708      	adds	r7, #8
 800ddd2:	46bd      	mov	sp, r7
 800ddd4:	bd80      	pop	{r7, pc}

0800ddd6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800ddd6:	b480      	push	{r7}
 800ddd8:	b083      	sub	sp, #12
 800ddda:	af00      	add	r7, sp, #0
 800dddc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800ddde:	bf00      	nop
 800dde0:	370c      	adds	r7, #12
 800dde2:	46bd      	mov	sp, r7
 800dde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde8:	4770      	bx	lr
	...

0800ddec <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 800ddec:	b580      	push	{r7, lr}
 800ddee:	b086      	sub	sp, #24
 800ddf0:	af00      	add	r7, sp, #0
 800ddf2:	60f8      	str	r0, [r7, #12]
 800ddf4:	60b9      	str	r1, [r7, #8]
 800ddf6:	607a      	str	r2, [r7, #4]
 800ddf8:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800ddfa:	68bb      	ldr	r3, [r7, #8]
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d104      	bne.n	800de0a <HAL_TIM_IC_Start_DMA+0x1e>
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800de06:	b2db      	uxtb	r3, r3
 800de08:	e023      	b.n	800de52 <HAL_TIM_IC_Start_DMA+0x66>
 800de0a:	68bb      	ldr	r3, [r7, #8]
 800de0c:	2b04      	cmp	r3, #4
 800de0e:	d104      	bne.n	800de1a <HAL_TIM_IC_Start_DMA+0x2e>
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800de16:	b2db      	uxtb	r3, r3
 800de18:	e01b      	b.n	800de52 <HAL_TIM_IC_Start_DMA+0x66>
 800de1a:	68bb      	ldr	r3, [r7, #8]
 800de1c:	2b08      	cmp	r3, #8
 800de1e:	d104      	bne.n	800de2a <HAL_TIM_IC_Start_DMA+0x3e>
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800de26:	b2db      	uxtb	r3, r3
 800de28:	e013      	b.n	800de52 <HAL_TIM_IC_Start_DMA+0x66>
 800de2a:	68bb      	ldr	r3, [r7, #8]
 800de2c:	2b0c      	cmp	r3, #12
 800de2e:	d104      	bne.n	800de3a <HAL_TIM_IC_Start_DMA+0x4e>
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800de36:	b2db      	uxtb	r3, r3
 800de38:	e00b      	b.n	800de52 <HAL_TIM_IC_Start_DMA+0x66>
 800de3a:	68bb      	ldr	r3, [r7, #8]
 800de3c:	2b10      	cmp	r3, #16
 800de3e:	d104      	bne.n	800de4a <HAL_TIM_IC_Start_DMA+0x5e>
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800de46:	b2db      	uxtb	r3, r3
 800de48:	e003      	b.n	800de52 <HAL_TIM_IC_Start_DMA+0x66>
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800de50:	b2db      	uxtb	r3, r3
 800de52:	75fb      	strb	r3, [r7, #23]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800de54:	68bb      	ldr	r3, [r7, #8]
 800de56:	2b00      	cmp	r3, #0
 800de58:	d104      	bne.n	800de64 <HAL_TIM_IC_Start_DMA+0x78>
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800de60:	b2db      	uxtb	r3, r3
 800de62:	e013      	b.n	800de8c <HAL_TIM_IC_Start_DMA+0xa0>
 800de64:	68bb      	ldr	r3, [r7, #8]
 800de66:	2b04      	cmp	r3, #4
 800de68:	d104      	bne.n	800de74 <HAL_TIM_IC_Start_DMA+0x88>
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800de70:	b2db      	uxtb	r3, r3
 800de72:	e00b      	b.n	800de8c <HAL_TIM_IC_Start_DMA+0xa0>
 800de74:	68bb      	ldr	r3, [r7, #8]
 800de76:	2b08      	cmp	r3, #8
 800de78:	d104      	bne.n	800de84 <HAL_TIM_IC_Start_DMA+0x98>
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800de80:	b2db      	uxtb	r3, r3
 800de82:	e003      	b.n	800de8c <HAL_TIM_IC_Start_DMA+0xa0>
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800de8a:	b2db      	uxtb	r3, r3
 800de8c:	75bb      	strb	r3, [r7, #22]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 800de8e:	7dfb      	ldrb	r3, [r7, #23]
 800de90:	2b02      	cmp	r3, #2
 800de92:	d002      	beq.n	800de9a <HAL_TIM_IC_Start_DMA+0xae>
   || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 800de94:	7dbb      	ldrb	r3, [r7, #22]
 800de96:	2b02      	cmp	r3, #2
 800de98:	d101      	bne.n	800de9e <HAL_TIM_IC_Start_DMA+0xb2>
  {
    return HAL_BUSY;
 800de9a:	2302      	movs	r3, #2
 800de9c:	e128      	b.n	800e0f0 <HAL_TIM_IC_Start_DMA+0x304>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 800de9e:	7dfb      	ldrb	r3, [r7, #23]
 800dea0:	2b01      	cmp	r3, #1
 800dea2:	d153      	bne.n	800df4c <HAL_TIM_IC_Start_DMA+0x160>
        && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 800dea4:	7dbb      	ldrb	r3, [r7, #22]
 800dea6:	2b01      	cmp	r3, #1
 800dea8:	d150      	bne.n	800df4c <HAL_TIM_IC_Start_DMA+0x160>
  {
    if ((pData == NULL) && (Length > 0U))
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	2b00      	cmp	r3, #0
 800deae:	d104      	bne.n	800deba <HAL_TIM_IC_Start_DMA+0xce>
 800deb0:	887b      	ldrh	r3, [r7, #2]
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d001      	beq.n	800deba <HAL_TIM_IC_Start_DMA+0xce>
    {
      return HAL_ERROR;
 800deb6:	2301      	movs	r3, #1
 800deb8:	e11a      	b.n	800e0f0 <HAL_TIM_IC_Start_DMA+0x304>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800deba:	68bb      	ldr	r3, [r7, #8]
 800debc:	2b00      	cmp	r3, #0
 800debe:	d104      	bne.n	800deca <HAL_TIM_IC_Start_DMA+0xde>
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	2202      	movs	r2, #2
 800dec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800dec8:	e023      	b.n	800df12 <HAL_TIM_IC_Start_DMA+0x126>
 800deca:	68bb      	ldr	r3, [r7, #8]
 800decc:	2b04      	cmp	r3, #4
 800dece:	d104      	bne.n	800deda <HAL_TIM_IC_Start_DMA+0xee>
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	2202      	movs	r2, #2
 800ded4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ded8:	e01b      	b.n	800df12 <HAL_TIM_IC_Start_DMA+0x126>
 800deda:	68bb      	ldr	r3, [r7, #8]
 800dedc:	2b08      	cmp	r3, #8
 800dede:	d104      	bne.n	800deea <HAL_TIM_IC_Start_DMA+0xfe>
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	2202      	movs	r2, #2
 800dee4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800dee8:	e013      	b.n	800df12 <HAL_TIM_IC_Start_DMA+0x126>
 800deea:	68bb      	ldr	r3, [r7, #8]
 800deec:	2b0c      	cmp	r3, #12
 800deee:	d104      	bne.n	800defa <HAL_TIM_IC_Start_DMA+0x10e>
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	2202      	movs	r2, #2
 800def4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800def8:	e00b      	b.n	800df12 <HAL_TIM_IC_Start_DMA+0x126>
 800defa:	68bb      	ldr	r3, [r7, #8]
 800defc:	2b10      	cmp	r3, #16
 800defe:	d104      	bne.n	800df0a <HAL_TIM_IC_Start_DMA+0x11e>
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	2202      	movs	r2, #2
 800df04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800df08:	e003      	b.n	800df12 <HAL_TIM_IC_Start_DMA+0x126>
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	2202      	movs	r2, #2
 800df0e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800df12:	68bb      	ldr	r3, [r7, #8]
 800df14:	2b00      	cmp	r3, #0
 800df16:	d104      	bne.n	800df22 <HAL_TIM_IC_Start_DMA+0x136>
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	2202      	movs	r2, #2
 800df1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    if ((pData == NULL) && (Length > 0U))
 800df20:	e016      	b.n	800df50 <HAL_TIM_IC_Start_DMA+0x164>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800df22:	68bb      	ldr	r3, [r7, #8]
 800df24:	2b04      	cmp	r3, #4
 800df26:	d104      	bne.n	800df32 <HAL_TIM_IC_Start_DMA+0x146>
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	2202      	movs	r2, #2
 800df2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ((pData == NULL) && (Length > 0U))
 800df30:	e00e      	b.n	800df50 <HAL_TIM_IC_Start_DMA+0x164>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800df32:	68bb      	ldr	r3, [r7, #8]
 800df34:	2b08      	cmp	r3, #8
 800df36:	d104      	bne.n	800df42 <HAL_TIM_IC_Start_DMA+0x156>
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	2202      	movs	r2, #2
 800df3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
    if ((pData == NULL) && (Length > 0U))
 800df40:	e006      	b.n	800df50 <HAL_TIM_IC_Start_DMA+0x164>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	2202      	movs	r2, #2
 800df46:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    if ((pData == NULL) && (Length > 0U))
 800df4a:	e001      	b.n	800df50 <HAL_TIM_IC_Start_DMA+0x164>
    }
  }
  else
  {
    return HAL_ERROR;
 800df4c:	2301      	movs	r3, #1
 800df4e:	e0cf      	b.n	800e0f0 <HAL_TIM_IC_Start_DMA+0x304>
  }

  switch (Channel)
 800df50:	68bb      	ldr	r3, [r7, #8]
 800df52:	2b0c      	cmp	r3, #12
 800df54:	f200 80ae 	bhi.w	800e0b4 <HAL_TIM_IC_Start_DMA+0x2c8>
 800df58:	a201      	add	r2, pc, #4	; (adr r2, 800df60 <HAL_TIM_IC_Start_DMA+0x174>)
 800df5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df5e:	bf00      	nop
 800df60:	0800df95 	.word	0x0800df95
 800df64:	0800e0b5 	.word	0x0800e0b5
 800df68:	0800e0b5 	.word	0x0800e0b5
 800df6c:	0800e0b5 	.word	0x0800e0b5
 800df70:	0800dfdd 	.word	0x0800dfdd
 800df74:	0800e0b5 	.word	0x0800e0b5
 800df78:	0800e0b5 	.word	0x0800e0b5
 800df7c:	0800e0b5 	.word	0x0800e0b5
 800df80:	0800e025 	.word	0x0800e025
 800df84:	0800e0b5 	.word	0x0800e0b5
 800df88:	0800e0b5 	.word	0x0800e0b5
 800df8c:	0800e0b5 	.word	0x0800e0b5
 800df90:	0800e06d 	.word	0x0800e06d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df98:	4a57      	ldr	r2, [pc, #348]	; (800e0f8 <HAL_TIM_IC_Start_DMA+0x30c>)
 800df9a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfa0:	4a56      	ldr	r2, [pc, #344]	; (800e0fc <HAL_TIM_IC_Start_DMA+0x310>)
 800dfa2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfa8:	4a55      	ldr	r2, [pc, #340]	; (800e100 <HAL_TIM_IC_Start_DMA+0x314>)
 800dfaa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length) != HAL_OK)
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	3334      	adds	r3, #52	; 0x34
 800dfb6:	4619      	mov	r1, r3
 800dfb8:	687a      	ldr	r2, [r7, #4]
 800dfba:	887b      	ldrh	r3, [r7, #2]
 800dfbc:	f7fd fe3a 	bl	800bc34 <HAL_DMA_Start_IT>
 800dfc0:	4603      	mov	r3, r0
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d001      	beq.n	800dfca <HAL_TIM_IC_Start_DMA+0x1de>
      {
        return HAL_ERROR;
 800dfc6:	2301      	movs	r3, #1
 800dfc8:	e092      	b.n	800e0f0 <HAL_TIM_IC_Start_DMA+0x304>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	68da      	ldr	r2, [r3, #12]
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dfd8:	60da      	str	r2, [r3, #12]
      break;
 800dfda:	e06c      	b.n	800e0b6 <HAL_TIM_IC_Start_DMA+0x2ca>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfe0:	4a45      	ldr	r2, [pc, #276]	; (800e0f8 <HAL_TIM_IC_Start_DMA+0x30c>)
 800dfe2:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfe8:	4a44      	ldr	r2, [pc, #272]	; (800e0fc <HAL_TIM_IC_Start_DMA+0x310>)
 800dfea:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dff0:	4a43      	ldr	r2, [pc, #268]	; (800e100 <HAL_TIM_IC_Start_DMA+0x314>)
 800dff2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData, Length) != HAL_OK)
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	3338      	adds	r3, #56	; 0x38
 800dffe:	4619      	mov	r1, r3
 800e000:	687a      	ldr	r2, [r7, #4]
 800e002:	887b      	ldrh	r3, [r7, #2]
 800e004:	f7fd fe16 	bl	800bc34 <HAL_DMA_Start_IT>
 800e008:	4603      	mov	r3, r0
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d001      	beq.n	800e012 <HAL_TIM_IC_Start_DMA+0x226>
      {
        return HAL_ERROR;
 800e00e:	2301      	movs	r3, #1
 800e010:	e06e      	b.n	800e0f0 <HAL_TIM_IC_Start_DMA+0x304>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	68da      	ldr	r2, [r3, #12]
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e020:	60da      	str	r2, [r3, #12]
      break;
 800e022:	e048      	b.n	800e0b6 <HAL_TIM_IC_Start_DMA+0x2ca>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e028:	4a33      	ldr	r2, [pc, #204]	; (800e0f8 <HAL_TIM_IC_Start_DMA+0x30c>)
 800e02a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e030:	4a32      	ldr	r2, [pc, #200]	; (800e0fc <HAL_TIM_IC_Start_DMA+0x310>)
 800e032:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e038:	4a31      	ldr	r2, [pc, #196]	; (800e100 <HAL_TIM_IC_Start_DMA+0x314>)
 800e03a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData, Length) != HAL_OK)
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	333c      	adds	r3, #60	; 0x3c
 800e046:	4619      	mov	r1, r3
 800e048:	687a      	ldr	r2, [r7, #4]
 800e04a:	887b      	ldrh	r3, [r7, #2]
 800e04c:	f7fd fdf2 	bl	800bc34 <HAL_DMA_Start_IT>
 800e050:	4603      	mov	r3, r0
 800e052:	2b00      	cmp	r3, #0
 800e054:	d001      	beq.n	800e05a <HAL_TIM_IC_Start_DMA+0x26e>
      {
        return HAL_ERROR;
 800e056:	2301      	movs	r3, #1
 800e058:	e04a      	b.n	800e0f0 <HAL_TIM_IC_Start_DMA+0x304>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	68da      	ldr	r2, [r3, #12]
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e068:	60da      	str	r2, [r3, #12]
      break;
 800e06a:	e024      	b.n	800e0b6 <HAL_TIM_IC_Start_DMA+0x2ca>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e070:	4a21      	ldr	r2, [pc, #132]	; (800e0f8 <HAL_TIM_IC_Start_DMA+0x30c>)
 800e072:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e078:	4a20      	ldr	r2, [pc, #128]	; (800e0fc <HAL_TIM_IC_Start_DMA+0x310>)
 800e07a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e080:	4a1f      	ldr	r2, [pc, #124]	; (800e100 <HAL_TIM_IC_Start_DMA+0x314>)
 800e082:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData, Length) != HAL_OK)
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	3340      	adds	r3, #64	; 0x40
 800e08e:	4619      	mov	r1, r3
 800e090:	687a      	ldr	r2, [r7, #4]
 800e092:	887b      	ldrh	r3, [r7, #2]
 800e094:	f7fd fdce 	bl	800bc34 <HAL_DMA_Start_IT>
 800e098:	4603      	mov	r3, r0
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d001      	beq.n	800e0a2 <HAL_TIM_IC_Start_DMA+0x2b6>
      {
        return HAL_ERROR;
 800e09e:	2301      	movs	r3, #1
 800e0a0:	e026      	b.n	800e0f0 <HAL_TIM_IC_Start_DMA+0x304>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	68da      	ldr	r2, [r3, #12]
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e0b0:	60da      	str	r2, [r3, #12]
      break;
 800e0b2:	e000      	b.n	800e0b6 <HAL_TIM_IC_Start_DMA+0x2ca>
    }

    default:
      break;
 800e0b4:	bf00      	nop
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	2201      	movs	r2, #1
 800e0bc:	68b9      	ldr	r1, [r7, #8]
 800e0be:	4618      	mov	r0, r3
 800e0c0:	f001 fd5c 	bl	800fb7c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	689a      	ldr	r2, [r3, #8]
 800e0ca:	4b0e      	ldr	r3, [pc, #56]	; (800e104 <HAL_TIM_IC_Start_DMA+0x318>)
 800e0cc:	4013      	ands	r3, r2
 800e0ce:	613b      	str	r3, [r7, #16]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e0d0:	693b      	ldr	r3, [r7, #16]
 800e0d2:	2b06      	cmp	r3, #6
 800e0d4:	d00b      	beq.n	800e0ee <HAL_TIM_IC_Start_DMA+0x302>
 800e0d6:	693b      	ldr	r3, [r7, #16]
 800e0d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e0dc:	d007      	beq.n	800e0ee <HAL_TIM_IC_Start_DMA+0x302>
  {
    __HAL_TIM_ENABLE(htim);
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	681a      	ldr	r2, [r3, #0]
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	f042 0201 	orr.w	r2, r2, #1
 800e0ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e0ee:	2300      	movs	r3, #0
}
 800e0f0:	4618      	mov	r0, r3
 800e0f2:	3718      	adds	r7, #24
 800e0f4:	46bd      	mov	sp, r7
 800e0f6:	bd80      	pop	{r7, pc}
 800e0f8:	0800eda3 	.word	0x0800eda3
 800e0fc:	0800ee6b 	.word	0x0800ee6b
 800e100:	0800ed11 	.word	0x0800ed11
 800e104:	00010007 	.word	0x00010007

0800e108 <HAL_TIM_IC_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e108:	b580      	push	{r7, lr}
 800e10a:	b082      	sub	sp, #8
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	6078      	str	r0, [r7, #4]
 800e110:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  switch (Channel)
 800e112:	683b      	ldr	r3, [r7, #0]
 800e114:	2b0c      	cmp	r3, #12
 800e116:	d855      	bhi.n	800e1c4 <HAL_TIM_IC_Stop_DMA+0xbc>
 800e118:	a201      	add	r2, pc, #4	; (adr r2, 800e120 <HAL_TIM_IC_Stop_DMA+0x18>)
 800e11a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e11e:	bf00      	nop
 800e120:	0800e155 	.word	0x0800e155
 800e124:	0800e1c5 	.word	0x0800e1c5
 800e128:	0800e1c5 	.word	0x0800e1c5
 800e12c:	0800e1c5 	.word	0x0800e1c5
 800e130:	0800e171 	.word	0x0800e171
 800e134:	0800e1c5 	.word	0x0800e1c5
 800e138:	0800e1c5 	.word	0x0800e1c5
 800e13c:	0800e1c5 	.word	0x0800e1c5
 800e140:	0800e18d 	.word	0x0800e18d
 800e144:	0800e1c5 	.word	0x0800e1c5
 800e148:	0800e1c5 	.word	0x0800e1c5
 800e14c:	0800e1c5 	.word	0x0800e1c5
 800e150:	0800e1a9 	.word	0x0800e1a9
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	68da      	ldr	r2, [r3, #12]
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800e162:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e168:	4618      	mov	r0, r3
 800e16a:	f7fd fe37 	bl	800bddc <HAL_DMA_Abort_IT>
      break;
 800e16e:	e02a      	b.n	800e1c6 <HAL_TIM_IC_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	68da      	ldr	r2, [r3, #12]
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e17e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e184:	4618      	mov	r0, r3
 800e186:	f7fd fe29 	bl	800bddc <HAL_DMA_Abort_IT>
      break;
 800e18a:	e01c      	b.n	800e1c6 <HAL_TIM_IC_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	68da      	ldr	r2, [r3, #12]
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e19a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	f7fd fe1b 	bl	800bddc <HAL_DMA_Abort_IT>
      break;
 800e1a6:	e00e      	b.n	800e1c6 <HAL_TIM_IC_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	68da      	ldr	r2, [r3, #12]
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800e1b6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1bc:	4618      	mov	r0, r3
 800e1be:	f7fd fe0d 	bl	800bddc <HAL_DMA_Abort_IT>
      break;
 800e1c2:	e000      	b.n	800e1c6 <HAL_TIM_IC_Stop_DMA+0xbe>
    }

    default:
      break;
 800e1c4:	bf00      	nop
  }

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	2200      	movs	r2, #0
 800e1cc:	6839      	ldr	r1, [r7, #0]
 800e1ce:	4618      	mov	r0, r3
 800e1d0:	f001 fcd4 	bl	800fb7c <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	6a1a      	ldr	r2, [r3, #32]
 800e1da:	f241 1311 	movw	r3, #4369	; 0x1111
 800e1de:	4013      	ands	r3, r2
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d10f      	bne.n	800e204 <HAL_TIM_IC_Stop_DMA+0xfc>
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	6a1a      	ldr	r2, [r3, #32]
 800e1ea:	f244 4344 	movw	r3, #17476	; 0x4444
 800e1ee:	4013      	ands	r3, r2
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d107      	bne.n	800e204 <HAL_TIM_IC_Stop_DMA+0xfc>
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	681a      	ldr	r2, [r3, #0]
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	f022 0201 	bic.w	r2, r2, #1
 800e202:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800e204:	683b      	ldr	r3, [r7, #0]
 800e206:	2b00      	cmp	r3, #0
 800e208:	d104      	bne.n	800e214 <HAL_TIM_IC_Stop_DMA+0x10c>
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	2201      	movs	r2, #1
 800e20e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e212:	e023      	b.n	800e25c <HAL_TIM_IC_Stop_DMA+0x154>
 800e214:	683b      	ldr	r3, [r7, #0]
 800e216:	2b04      	cmp	r3, #4
 800e218:	d104      	bne.n	800e224 <HAL_TIM_IC_Stop_DMA+0x11c>
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	2201      	movs	r2, #1
 800e21e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e222:	e01b      	b.n	800e25c <HAL_TIM_IC_Stop_DMA+0x154>
 800e224:	683b      	ldr	r3, [r7, #0]
 800e226:	2b08      	cmp	r3, #8
 800e228:	d104      	bne.n	800e234 <HAL_TIM_IC_Stop_DMA+0x12c>
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	2201      	movs	r2, #1
 800e22e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e232:	e013      	b.n	800e25c <HAL_TIM_IC_Stop_DMA+0x154>
 800e234:	683b      	ldr	r3, [r7, #0]
 800e236:	2b0c      	cmp	r3, #12
 800e238:	d104      	bne.n	800e244 <HAL_TIM_IC_Stop_DMA+0x13c>
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	2201      	movs	r2, #1
 800e23e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e242:	e00b      	b.n	800e25c <HAL_TIM_IC_Stop_DMA+0x154>
 800e244:	683b      	ldr	r3, [r7, #0]
 800e246:	2b10      	cmp	r3, #16
 800e248:	d104      	bne.n	800e254 <HAL_TIM_IC_Stop_DMA+0x14c>
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	2201      	movs	r2, #1
 800e24e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e252:	e003      	b.n	800e25c <HAL_TIM_IC_Stop_DMA+0x154>
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	2201      	movs	r2, #1
 800e258:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800e25c:	683b      	ldr	r3, [r7, #0]
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d104      	bne.n	800e26c <HAL_TIM_IC_Stop_DMA+0x164>
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	2201      	movs	r2, #1
 800e266:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e26a:	e013      	b.n	800e294 <HAL_TIM_IC_Stop_DMA+0x18c>
 800e26c:	683b      	ldr	r3, [r7, #0]
 800e26e:	2b04      	cmp	r3, #4
 800e270:	d104      	bne.n	800e27c <HAL_TIM_IC_Stop_DMA+0x174>
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	2201      	movs	r2, #1
 800e276:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e27a:	e00b      	b.n	800e294 <HAL_TIM_IC_Stop_DMA+0x18c>
 800e27c:	683b      	ldr	r3, [r7, #0]
 800e27e:	2b08      	cmp	r3, #8
 800e280:	d104      	bne.n	800e28c <HAL_TIM_IC_Stop_DMA+0x184>
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	2201      	movs	r2, #1
 800e286:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e28a:	e003      	b.n	800e294 <HAL_TIM_IC_Stop_DMA+0x18c>
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	2201      	movs	r2, #1
 800e290:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 800e294:	2300      	movs	r3, #0
}
 800e296:	4618      	mov	r0, r3
 800e298:	3708      	adds	r7, #8
 800e29a:	46bd      	mov	sp, r7
 800e29c:	bd80      	pop	{r7, pc}
 800e29e:	bf00      	nop

0800e2a0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800e2a0:	b580      	push	{r7, lr}
 800e2a2:	b086      	sub	sp, #24
 800e2a4:	af00      	add	r7, sp, #0
 800e2a6:	6078      	str	r0, [r7, #4]
 800e2a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d101      	bne.n	800e2b4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800e2b0:	2301      	movs	r3, #1
 800e2b2:	e097      	b.n	800e3e4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e2ba:	b2db      	uxtb	r3, r3
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d106      	bne.n	800e2ce <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	2200      	movs	r2, #0
 800e2c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800e2c8:	6878      	ldr	r0, [r7, #4]
 800e2ca:	f7fa fc9d 	bl	8008c08 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	2202      	movs	r2, #2
 800e2d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	689b      	ldr	r3, [r3, #8]
 800e2dc:	687a      	ldr	r2, [r7, #4]
 800e2de:	6812      	ldr	r2, [r2, #0]
 800e2e0:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800e2e4:	f023 0307 	bic.w	r3, r3, #7
 800e2e8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	681a      	ldr	r2, [r3, #0]
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	3304      	adds	r3, #4
 800e2f2:	4619      	mov	r1, r3
 800e2f4:	4610      	mov	r0, r2
 800e2f6:	f000 fded 	bl	800eed4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	689b      	ldr	r3, [r3, #8]
 800e300:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	699b      	ldr	r3, [r3, #24]
 800e308:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	6a1b      	ldr	r3, [r3, #32]
 800e310:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800e312:	683b      	ldr	r3, [r7, #0]
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	697a      	ldr	r2, [r7, #20]
 800e318:	4313      	orrs	r3, r2
 800e31a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800e31c:	693b      	ldr	r3, [r7, #16]
 800e31e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e322:	f023 0303 	bic.w	r3, r3, #3
 800e326:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800e328:	683b      	ldr	r3, [r7, #0]
 800e32a:	689a      	ldr	r2, [r3, #8]
 800e32c:	683b      	ldr	r3, [r7, #0]
 800e32e:	699b      	ldr	r3, [r3, #24]
 800e330:	021b      	lsls	r3, r3, #8
 800e332:	4313      	orrs	r3, r2
 800e334:	693a      	ldr	r2, [r7, #16]
 800e336:	4313      	orrs	r3, r2
 800e338:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800e33a:	693b      	ldr	r3, [r7, #16]
 800e33c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800e340:	f023 030c 	bic.w	r3, r3, #12
 800e344:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800e346:	693b      	ldr	r3, [r7, #16]
 800e348:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e34c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e350:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800e352:	683b      	ldr	r3, [r7, #0]
 800e354:	68da      	ldr	r2, [r3, #12]
 800e356:	683b      	ldr	r3, [r7, #0]
 800e358:	69db      	ldr	r3, [r3, #28]
 800e35a:	021b      	lsls	r3, r3, #8
 800e35c:	4313      	orrs	r3, r2
 800e35e:	693a      	ldr	r2, [r7, #16]
 800e360:	4313      	orrs	r3, r2
 800e362:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800e364:	683b      	ldr	r3, [r7, #0]
 800e366:	691b      	ldr	r3, [r3, #16]
 800e368:	011a      	lsls	r2, r3, #4
 800e36a:	683b      	ldr	r3, [r7, #0]
 800e36c:	6a1b      	ldr	r3, [r3, #32]
 800e36e:	031b      	lsls	r3, r3, #12
 800e370:	4313      	orrs	r3, r2
 800e372:	693a      	ldr	r2, [r7, #16]
 800e374:	4313      	orrs	r3, r2
 800e376:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800e37e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800e386:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800e388:	683b      	ldr	r3, [r7, #0]
 800e38a:	685a      	ldr	r2, [r3, #4]
 800e38c:	683b      	ldr	r3, [r7, #0]
 800e38e:	695b      	ldr	r3, [r3, #20]
 800e390:	011b      	lsls	r3, r3, #4
 800e392:	4313      	orrs	r3, r2
 800e394:	68fa      	ldr	r2, [r7, #12]
 800e396:	4313      	orrs	r3, r2
 800e398:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	697a      	ldr	r2, [r7, #20]
 800e3a0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	693a      	ldr	r2, [r7, #16]
 800e3a8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	68fa      	ldr	r2, [r7, #12]
 800e3b0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	2201      	movs	r2, #1
 800e3b6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	2201      	movs	r2, #1
 800e3be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	2201      	movs	r2, #1
 800e3c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	2201      	movs	r2, #1
 800e3ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	2201      	movs	r2, #1
 800e3d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	2201      	movs	r2, #1
 800e3de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e3e2:	2300      	movs	r3, #0
}
 800e3e4:	4618      	mov	r0, r3
 800e3e6:	3718      	adds	r7, #24
 800e3e8:	46bd      	mov	sp, r7
 800e3ea:	bd80      	pop	{r7, pc}

0800e3ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e3ec:	b580      	push	{r7, lr}
 800e3ee:	b082      	sub	sp, #8
 800e3f0:	af00      	add	r7, sp, #0
 800e3f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	691b      	ldr	r3, [r3, #16]
 800e3fa:	f003 0302 	and.w	r3, r3, #2
 800e3fe:	2b02      	cmp	r3, #2
 800e400:	d122      	bne.n	800e448 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	68db      	ldr	r3, [r3, #12]
 800e408:	f003 0302 	and.w	r3, r3, #2
 800e40c:	2b02      	cmp	r3, #2
 800e40e:	d11b      	bne.n	800e448 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	f06f 0202 	mvn.w	r2, #2
 800e418:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	2201      	movs	r2, #1
 800e41e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	699b      	ldr	r3, [r3, #24]
 800e426:	f003 0303 	and.w	r3, r3, #3
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d003      	beq.n	800e436 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e42e:	6878      	ldr	r0, [r7, #4]
 800e430:	f7f8 f8ca 	bl	80065c8 <HAL_TIM_IC_CaptureCallback>
 800e434:	e005      	b.n	800e442 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e436:	6878      	ldr	r0, [r7, #4]
 800e438:	f000 fc38 	bl	800ecac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e43c:	6878      	ldr	r0, [r7, #4]
 800e43e:	f000 fc49 	bl	800ecd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	2200      	movs	r2, #0
 800e446:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	691b      	ldr	r3, [r3, #16]
 800e44e:	f003 0304 	and.w	r3, r3, #4
 800e452:	2b04      	cmp	r3, #4
 800e454:	d122      	bne.n	800e49c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	68db      	ldr	r3, [r3, #12]
 800e45c:	f003 0304 	and.w	r3, r3, #4
 800e460:	2b04      	cmp	r3, #4
 800e462:	d11b      	bne.n	800e49c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	f06f 0204 	mvn.w	r2, #4
 800e46c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	2202      	movs	r2, #2
 800e472:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	699b      	ldr	r3, [r3, #24]
 800e47a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d003      	beq.n	800e48a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e482:	6878      	ldr	r0, [r7, #4]
 800e484:	f7f8 f8a0 	bl	80065c8 <HAL_TIM_IC_CaptureCallback>
 800e488:	e005      	b.n	800e496 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e48a:	6878      	ldr	r0, [r7, #4]
 800e48c:	f000 fc0e 	bl	800ecac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e490:	6878      	ldr	r0, [r7, #4]
 800e492:	f000 fc1f 	bl	800ecd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	2200      	movs	r2, #0
 800e49a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	691b      	ldr	r3, [r3, #16]
 800e4a2:	f003 0308 	and.w	r3, r3, #8
 800e4a6:	2b08      	cmp	r3, #8
 800e4a8:	d122      	bne.n	800e4f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	68db      	ldr	r3, [r3, #12]
 800e4b0:	f003 0308 	and.w	r3, r3, #8
 800e4b4:	2b08      	cmp	r3, #8
 800e4b6:	d11b      	bne.n	800e4f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	f06f 0208 	mvn.w	r2, #8
 800e4c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	2204      	movs	r2, #4
 800e4c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	69db      	ldr	r3, [r3, #28]
 800e4ce:	f003 0303 	and.w	r3, r3, #3
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d003      	beq.n	800e4de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e4d6:	6878      	ldr	r0, [r7, #4]
 800e4d8:	f7f8 f876 	bl	80065c8 <HAL_TIM_IC_CaptureCallback>
 800e4dc:	e005      	b.n	800e4ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e4de:	6878      	ldr	r0, [r7, #4]
 800e4e0:	f000 fbe4 	bl	800ecac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e4e4:	6878      	ldr	r0, [r7, #4]
 800e4e6:	f000 fbf5 	bl	800ecd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	2200      	movs	r2, #0
 800e4ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	691b      	ldr	r3, [r3, #16]
 800e4f6:	f003 0310 	and.w	r3, r3, #16
 800e4fa:	2b10      	cmp	r3, #16
 800e4fc:	d122      	bne.n	800e544 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	68db      	ldr	r3, [r3, #12]
 800e504:	f003 0310 	and.w	r3, r3, #16
 800e508:	2b10      	cmp	r3, #16
 800e50a:	d11b      	bne.n	800e544 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	f06f 0210 	mvn.w	r2, #16
 800e514:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	2208      	movs	r2, #8
 800e51a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	69db      	ldr	r3, [r3, #28]
 800e522:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e526:	2b00      	cmp	r3, #0
 800e528:	d003      	beq.n	800e532 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e52a:	6878      	ldr	r0, [r7, #4]
 800e52c:	f7f8 f84c 	bl	80065c8 <HAL_TIM_IC_CaptureCallback>
 800e530:	e005      	b.n	800e53e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e532:	6878      	ldr	r0, [r7, #4]
 800e534:	f000 fbba 	bl	800ecac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e538:	6878      	ldr	r0, [r7, #4]
 800e53a:	f000 fbcb 	bl	800ecd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	2200      	movs	r2, #0
 800e542:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	691b      	ldr	r3, [r3, #16]
 800e54a:	f003 0301 	and.w	r3, r3, #1
 800e54e:	2b01      	cmp	r3, #1
 800e550:	d10e      	bne.n	800e570 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	68db      	ldr	r3, [r3, #12]
 800e558:	f003 0301 	and.w	r3, r3, #1
 800e55c:	2b01      	cmp	r3, #1
 800e55e:	d107      	bne.n	800e570 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	f06f 0201 	mvn.w	r2, #1
 800e568:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e56a:	6878      	ldr	r0, [r7, #4]
 800e56c:	f000 fb94 	bl	800ec98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	691b      	ldr	r3, [r3, #16]
 800e576:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e57a:	2b80      	cmp	r3, #128	; 0x80
 800e57c:	d10e      	bne.n	800e59c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	68db      	ldr	r3, [r3, #12]
 800e584:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e588:	2b80      	cmp	r3, #128	; 0x80
 800e58a:	d107      	bne.n	800e59c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e594:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e596:	6878      	ldr	r0, [r7, #4]
 800e598:	f001 fc68 	bl	800fe6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	691b      	ldr	r3, [r3, #16]
 800e5a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e5a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e5aa:	d10e      	bne.n	800e5ca <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	68db      	ldr	r3, [r3, #12]
 800e5b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e5b6:	2b80      	cmp	r3, #128	; 0x80
 800e5b8:	d107      	bne.n	800e5ca <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800e5c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e5c4:	6878      	ldr	r0, [r7, #4]
 800e5c6:	f001 fc5b 	bl	800fe80 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	691b      	ldr	r3, [r3, #16]
 800e5d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e5d4:	2b40      	cmp	r3, #64	; 0x40
 800e5d6:	d10e      	bne.n	800e5f6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	68db      	ldr	r3, [r3, #12]
 800e5de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e5e2:	2b40      	cmp	r3, #64	; 0x40
 800e5e4:	d107      	bne.n	800e5f6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e5ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e5f0:	6878      	ldr	r0, [r7, #4]
 800e5f2:	f000 fb79 	bl	800ece8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	691b      	ldr	r3, [r3, #16]
 800e5fc:	f003 0320 	and.w	r3, r3, #32
 800e600:	2b20      	cmp	r3, #32
 800e602:	d10e      	bne.n	800e622 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	68db      	ldr	r3, [r3, #12]
 800e60a:	f003 0320 	and.w	r3, r3, #32
 800e60e:	2b20      	cmp	r3, #32
 800e610:	d107      	bne.n	800e622 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	f06f 0220 	mvn.w	r2, #32
 800e61a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e61c:	6878      	ldr	r0, [r7, #4]
 800e61e:	f001 fc1b 	bl	800fe58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	691b      	ldr	r3, [r3, #16]
 800e628:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e62c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e630:	d10f      	bne.n	800e652 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	68db      	ldr	r3, [r3, #12]
 800e638:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e63c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e640:	d107      	bne.n	800e652 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800e64a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800e64c:	6878      	ldr	r0, [r7, #4]
 800e64e:	f001 fc21 	bl	800fe94 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	691b      	ldr	r3, [r3, #16]
 800e658:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e65c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e660:	d10f      	bne.n	800e682 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	68db      	ldr	r3, [r3, #12]
 800e668:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e66c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e670:	d107      	bne.n	800e682 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800e67a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800e67c:	6878      	ldr	r0, [r7, #4]
 800e67e:	f001 fc13 	bl	800fea8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	691b      	ldr	r3, [r3, #16]
 800e688:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e68c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e690:	d10f      	bne.n	800e6b2 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	68db      	ldr	r3, [r3, #12]
 800e698:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e69c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e6a0:	d107      	bne.n	800e6b2 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800e6aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800e6ac:	6878      	ldr	r0, [r7, #4]
 800e6ae:	f001 fc05 	bl	800febc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	691b      	ldr	r3, [r3, #16]
 800e6b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e6bc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e6c0:	d10f      	bne.n	800e6e2 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	68db      	ldr	r3, [r3, #12]
 800e6c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e6cc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e6d0:	d107      	bne.n	800e6e2 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800e6da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800e6dc:	6878      	ldr	r0, [r7, #4]
 800e6de:	f001 fbf7 	bl	800fed0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e6e2:	bf00      	nop
 800e6e4:	3708      	adds	r7, #8
 800e6e6:	46bd      	mov	sp, r7
 800e6e8:	bd80      	pop	{r7, pc}

0800e6ea <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800e6ea:	b580      	push	{r7, lr}
 800e6ec:	b084      	sub	sp, #16
 800e6ee:	af00      	add	r7, sp, #0
 800e6f0:	60f8      	str	r0, [r7, #12]
 800e6f2:	60b9      	str	r1, [r7, #8]
 800e6f4:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e6fc:	2b01      	cmp	r3, #1
 800e6fe:	d101      	bne.n	800e704 <HAL_TIM_IC_ConfigChannel+0x1a>
 800e700:	2302      	movs	r3, #2
 800e702:	e082      	b.n	800e80a <HAL_TIM_IC_ConfigChannel+0x120>
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	2201      	movs	r2, #1
 800e708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d11b      	bne.n	800e74a <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	6818      	ldr	r0, [r3, #0]
 800e716:	68bb      	ldr	r3, [r7, #8]
 800e718:	6819      	ldr	r1, [r3, #0]
 800e71a:	68bb      	ldr	r3, [r7, #8]
 800e71c:	685a      	ldr	r2, [r3, #4]
 800e71e:	68bb      	ldr	r3, [r7, #8]
 800e720:	68db      	ldr	r3, [r3, #12]
 800e722:	f001 f865 	bl	800f7f0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	699a      	ldr	r2, [r3, #24]
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	f022 020c 	bic.w	r2, r2, #12
 800e734:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	6999      	ldr	r1, [r3, #24]
 800e73c:	68bb      	ldr	r3, [r7, #8]
 800e73e:	689a      	ldr	r2, [r3, #8]
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	430a      	orrs	r2, r1
 800e746:	619a      	str	r2, [r3, #24]
 800e748:	e05a      	b.n	800e800 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	2b04      	cmp	r3, #4
 800e74e:	d11c      	bne.n	800e78a <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	6818      	ldr	r0, [r3, #0]
 800e754:	68bb      	ldr	r3, [r7, #8]
 800e756:	6819      	ldr	r1, [r3, #0]
 800e758:	68bb      	ldr	r3, [r7, #8]
 800e75a:	685a      	ldr	r2, [r3, #4]
 800e75c:	68bb      	ldr	r3, [r7, #8]
 800e75e:	68db      	ldr	r3, [r3, #12]
 800e760:	f001 f8e9 	bl	800f936 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	699a      	ldr	r2, [r3, #24]
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800e772:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	6999      	ldr	r1, [r3, #24]
 800e77a:	68bb      	ldr	r3, [r7, #8]
 800e77c:	689b      	ldr	r3, [r3, #8]
 800e77e:	021a      	lsls	r2, r3, #8
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	430a      	orrs	r2, r1
 800e786:	619a      	str	r2, [r3, #24]
 800e788:	e03a      	b.n	800e800 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	2b08      	cmp	r3, #8
 800e78e:	d11b      	bne.n	800e7c8 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	6818      	ldr	r0, [r3, #0]
 800e794:	68bb      	ldr	r3, [r7, #8]
 800e796:	6819      	ldr	r1, [r3, #0]
 800e798:	68bb      	ldr	r3, [r7, #8]
 800e79a:	685a      	ldr	r2, [r3, #4]
 800e79c:	68bb      	ldr	r3, [r7, #8]
 800e79e:	68db      	ldr	r3, [r3, #12]
 800e7a0:	f001 f936 	bl	800fa10 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	69da      	ldr	r2, [r3, #28]
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	f022 020c 	bic.w	r2, r2, #12
 800e7b2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	69d9      	ldr	r1, [r3, #28]
 800e7ba:	68bb      	ldr	r3, [r7, #8]
 800e7bc:	689a      	ldr	r2, [r3, #8]
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	430a      	orrs	r2, r1
 800e7c4:	61da      	str	r2, [r3, #28]
 800e7c6:	e01b      	b.n	800e800 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	6818      	ldr	r0, [r3, #0]
 800e7cc:	68bb      	ldr	r3, [r7, #8]
 800e7ce:	6819      	ldr	r1, [r3, #0]
 800e7d0:	68bb      	ldr	r3, [r7, #8]
 800e7d2:	685a      	ldr	r2, [r3, #4]
 800e7d4:	68bb      	ldr	r3, [r7, #8]
 800e7d6:	68db      	ldr	r3, [r3, #12]
 800e7d8:	f001 f956 	bl	800fa88 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	69da      	ldr	r2, [r3, #28]
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800e7ea:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	69d9      	ldr	r1, [r3, #28]
 800e7f2:	68bb      	ldr	r3, [r7, #8]
 800e7f4:	689b      	ldr	r3, [r3, #8]
 800e7f6:	021a      	lsls	r2, r3, #8
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	430a      	orrs	r2, r1
 800e7fe:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	2200      	movs	r2, #0
 800e804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e808:	2300      	movs	r3, #0
}
 800e80a:	4618      	mov	r0, r3
 800e80c:	3710      	adds	r7, #16
 800e80e:	46bd      	mov	sp, r7
 800e810:	bd80      	pop	{r7, pc}
	...

0800e814 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e814:	b580      	push	{r7, lr}
 800e816:	b084      	sub	sp, #16
 800e818:	af00      	add	r7, sp, #0
 800e81a:	60f8      	str	r0, [r7, #12]
 800e81c:	60b9      	str	r1, [r7, #8]
 800e81e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e826:	2b01      	cmp	r3, #1
 800e828:	d101      	bne.n	800e82e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800e82a:	2302      	movs	r3, #2
 800e82c:	e0fd      	b.n	800ea2a <HAL_TIM_PWM_ConfigChannel+0x216>
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	2201      	movs	r2, #1
 800e832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	2b14      	cmp	r3, #20
 800e83a:	f200 80f0 	bhi.w	800ea1e <HAL_TIM_PWM_ConfigChannel+0x20a>
 800e83e:	a201      	add	r2, pc, #4	; (adr r2, 800e844 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800e840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e844:	0800e899 	.word	0x0800e899
 800e848:	0800ea1f 	.word	0x0800ea1f
 800e84c:	0800ea1f 	.word	0x0800ea1f
 800e850:	0800ea1f 	.word	0x0800ea1f
 800e854:	0800e8d9 	.word	0x0800e8d9
 800e858:	0800ea1f 	.word	0x0800ea1f
 800e85c:	0800ea1f 	.word	0x0800ea1f
 800e860:	0800ea1f 	.word	0x0800ea1f
 800e864:	0800e91b 	.word	0x0800e91b
 800e868:	0800ea1f 	.word	0x0800ea1f
 800e86c:	0800ea1f 	.word	0x0800ea1f
 800e870:	0800ea1f 	.word	0x0800ea1f
 800e874:	0800e95b 	.word	0x0800e95b
 800e878:	0800ea1f 	.word	0x0800ea1f
 800e87c:	0800ea1f 	.word	0x0800ea1f
 800e880:	0800ea1f 	.word	0x0800ea1f
 800e884:	0800e99d 	.word	0x0800e99d
 800e888:	0800ea1f 	.word	0x0800ea1f
 800e88c:	0800ea1f 	.word	0x0800ea1f
 800e890:	0800ea1f 	.word	0x0800ea1f
 800e894:	0800e9dd 	.word	0x0800e9dd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	68b9      	ldr	r1, [r7, #8]
 800e89e:	4618      	mov	r0, r3
 800e8a0:	f000 fbc0 	bl	800f024 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	699a      	ldr	r2, [r3, #24]
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	f042 0208 	orr.w	r2, r2, #8
 800e8b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	699a      	ldr	r2, [r3, #24]
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	f022 0204 	bic.w	r2, r2, #4
 800e8c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	6999      	ldr	r1, [r3, #24]
 800e8ca:	68bb      	ldr	r3, [r7, #8]
 800e8cc:	691a      	ldr	r2, [r3, #16]
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	430a      	orrs	r2, r1
 800e8d4:	619a      	str	r2, [r3, #24]
      break;
 800e8d6:	e0a3      	b.n	800ea20 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	68b9      	ldr	r1, [r7, #8]
 800e8de:	4618      	mov	r0, r3
 800e8e0:	f000 fc3a 	bl	800f158 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	699a      	ldr	r2, [r3, #24]
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e8f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	699a      	ldr	r2, [r3, #24]
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e902:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	6999      	ldr	r1, [r3, #24]
 800e90a:	68bb      	ldr	r3, [r7, #8]
 800e90c:	691b      	ldr	r3, [r3, #16]
 800e90e:	021a      	lsls	r2, r3, #8
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	430a      	orrs	r2, r1
 800e916:	619a      	str	r2, [r3, #24]
      break;
 800e918:	e082      	b.n	800ea20 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	68b9      	ldr	r1, [r7, #8]
 800e920:	4618      	mov	r0, r3
 800e922:	f000 fcad 	bl	800f280 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	69da      	ldr	r2, [r3, #28]
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	f042 0208 	orr.w	r2, r2, #8
 800e934:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	69da      	ldr	r2, [r3, #28]
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	f022 0204 	bic.w	r2, r2, #4
 800e944:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	69d9      	ldr	r1, [r3, #28]
 800e94c:	68bb      	ldr	r3, [r7, #8]
 800e94e:	691a      	ldr	r2, [r3, #16]
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	430a      	orrs	r2, r1
 800e956:	61da      	str	r2, [r3, #28]
      break;
 800e958:	e062      	b.n	800ea20 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	68b9      	ldr	r1, [r7, #8]
 800e960:	4618      	mov	r0, r3
 800e962:	f000 fd1f 	bl	800f3a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	69da      	ldr	r2, [r3, #28]
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e974:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	69da      	ldr	r2, [r3, #28]
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e984:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	69d9      	ldr	r1, [r3, #28]
 800e98c:	68bb      	ldr	r3, [r7, #8]
 800e98e:	691b      	ldr	r3, [r3, #16]
 800e990:	021a      	lsls	r2, r3, #8
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	430a      	orrs	r2, r1
 800e998:	61da      	str	r2, [r3, #28]
      break;
 800e99a:	e041      	b.n	800ea20 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	68b9      	ldr	r1, [r7, #8]
 800e9a2:	4618      	mov	r0, r3
 800e9a4:	f000 fd92 	bl	800f4cc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	f042 0208 	orr.w	r2, r2, #8
 800e9b6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	f022 0204 	bic.w	r2, r2, #4
 800e9c6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800e9ce:	68bb      	ldr	r3, [r7, #8]
 800e9d0:	691a      	ldr	r2, [r3, #16]
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	430a      	orrs	r2, r1
 800e9d8:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800e9da:	e021      	b.n	800ea20 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	68b9      	ldr	r1, [r7, #8]
 800e9e2:	4618      	mov	r0, r3
 800e9e4:	f000 fddc 	bl	800f5a0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e9f6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ea06:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800ea0e:	68bb      	ldr	r3, [r7, #8]
 800ea10:	691b      	ldr	r3, [r3, #16]
 800ea12:	021a      	lsls	r2, r3, #8
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	430a      	orrs	r2, r1
 800ea1a:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800ea1c:	e000      	b.n	800ea20 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800ea1e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	2200      	movs	r2, #0
 800ea24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ea28:	2300      	movs	r3, #0
}
 800ea2a:	4618      	mov	r0, r3
 800ea2c:	3710      	adds	r7, #16
 800ea2e:	46bd      	mov	sp, r7
 800ea30:	bd80      	pop	{r7, pc}
 800ea32:	bf00      	nop

0800ea34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ea34:	b580      	push	{r7, lr}
 800ea36:	b084      	sub	sp, #16
 800ea38:	af00      	add	r7, sp, #0
 800ea3a:	6078      	str	r0, [r7, #4]
 800ea3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ea44:	2b01      	cmp	r3, #1
 800ea46:	d101      	bne.n	800ea4c <HAL_TIM_ConfigClockSource+0x18>
 800ea48:	2302      	movs	r3, #2
 800ea4a:	e0d2      	b.n	800ebf2 <HAL_TIM_ConfigClockSource+0x1be>
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	2201      	movs	r2, #1
 800ea50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	2202      	movs	r2, #2
 800ea58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	689b      	ldr	r3, [r3, #8]
 800ea62:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800ea6a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800ea6e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ea76:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	68fa      	ldr	r2, [r7, #12]
 800ea7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ea80:	683b      	ldr	r3, [r7, #0]
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ea88:	f000 80a9 	beq.w	800ebde <HAL_TIM_ConfigClockSource+0x1aa>
 800ea8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ea90:	d81a      	bhi.n	800eac8 <HAL_TIM_ConfigClockSource+0x94>
 800ea92:	2b30      	cmp	r3, #48	; 0x30
 800ea94:	f000 809a 	beq.w	800ebcc <HAL_TIM_ConfigClockSource+0x198>
 800ea98:	2b30      	cmp	r3, #48	; 0x30
 800ea9a:	d809      	bhi.n	800eab0 <HAL_TIM_ConfigClockSource+0x7c>
 800ea9c:	2b10      	cmp	r3, #16
 800ea9e:	f000 8095 	beq.w	800ebcc <HAL_TIM_ConfigClockSource+0x198>
 800eaa2:	2b20      	cmp	r3, #32
 800eaa4:	f000 8092 	beq.w	800ebcc <HAL_TIM_ConfigClockSource+0x198>
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	f000 808f 	beq.w	800ebcc <HAL_TIM_ConfigClockSource+0x198>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800eaae:	e097      	b.n	800ebe0 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800eab0:	2b50      	cmp	r3, #80	; 0x50
 800eab2:	d05b      	beq.n	800eb6c <HAL_TIM_ConfigClockSource+0x138>
 800eab4:	2b50      	cmp	r3, #80	; 0x50
 800eab6:	d802      	bhi.n	800eabe <HAL_TIM_ConfigClockSource+0x8a>
 800eab8:	2b40      	cmp	r3, #64	; 0x40
 800eaba:	d077      	beq.n	800ebac <HAL_TIM_ConfigClockSource+0x178>
      break;
 800eabc:	e090      	b.n	800ebe0 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800eabe:	2b60      	cmp	r3, #96	; 0x60
 800eac0:	d064      	beq.n	800eb8c <HAL_TIM_ConfigClockSource+0x158>
 800eac2:	2b70      	cmp	r3, #112	; 0x70
 800eac4:	d028      	beq.n	800eb18 <HAL_TIM_ConfigClockSource+0xe4>
      break;
 800eac6:	e08b      	b.n	800ebe0 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800eac8:	4a4c      	ldr	r2, [pc, #304]	; (800ebfc <HAL_TIM_ConfigClockSource+0x1c8>)
 800eaca:	4293      	cmp	r3, r2
 800eacc:	d07e      	beq.n	800ebcc <HAL_TIM_ConfigClockSource+0x198>
 800eace:	4a4b      	ldr	r2, [pc, #300]	; (800ebfc <HAL_TIM_ConfigClockSource+0x1c8>)
 800ead0:	4293      	cmp	r3, r2
 800ead2:	d810      	bhi.n	800eaf6 <HAL_TIM_ConfigClockSource+0xc2>
 800ead4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ead8:	d078      	beq.n	800ebcc <HAL_TIM_ConfigClockSource+0x198>
 800eada:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800eade:	d803      	bhi.n	800eae8 <HAL_TIM_ConfigClockSource+0xb4>
 800eae0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800eae4:	d02f      	beq.n	800eb46 <HAL_TIM_ConfigClockSource+0x112>
      break;
 800eae6:	e07b      	b.n	800ebe0 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800eae8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800eaec:	d06e      	beq.n	800ebcc <HAL_TIM_ConfigClockSource+0x198>
 800eaee:	4a44      	ldr	r2, [pc, #272]	; (800ec00 <HAL_TIM_ConfigClockSource+0x1cc>)
 800eaf0:	4293      	cmp	r3, r2
 800eaf2:	d06b      	beq.n	800ebcc <HAL_TIM_ConfigClockSource+0x198>
      break;
 800eaf4:	e074      	b.n	800ebe0 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800eaf6:	4a43      	ldr	r2, [pc, #268]	; (800ec04 <HAL_TIM_ConfigClockSource+0x1d0>)
 800eaf8:	4293      	cmp	r3, r2
 800eafa:	d067      	beq.n	800ebcc <HAL_TIM_ConfigClockSource+0x198>
 800eafc:	4a41      	ldr	r2, [pc, #260]	; (800ec04 <HAL_TIM_ConfigClockSource+0x1d0>)
 800eafe:	4293      	cmp	r3, r2
 800eb00:	d803      	bhi.n	800eb0a <HAL_TIM_ConfigClockSource+0xd6>
 800eb02:	4a41      	ldr	r2, [pc, #260]	; (800ec08 <HAL_TIM_ConfigClockSource+0x1d4>)
 800eb04:	4293      	cmp	r3, r2
 800eb06:	d061      	beq.n	800ebcc <HAL_TIM_ConfigClockSource+0x198>
      break;
 800eb08:	e06a      	b.n	800ebe0 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800eb0a:	4a40      	ldr	r2, [pc, #256]	; (800ec0c <HAL_TIM_ConfigClockSource+0x1d8>)
 800eb0c:	4293      	cmp	r3, r2
 800eb0e:	d05d      	beq.n	800ebcc <HAL_TIM_ConfigClockSource+0x198>
 800eb10:	4a3f      	ldr	r2, [pc, #252]	; (800ec10 <HAL_TIM_ConfigClockSource+0x1dc>)
 800eb12:	4293      	cmp	r3, r2
 800eb14:	d05a      	beq.n	800ebcc <HAL_TIM_ConfigClockSource+0x198>
      break;
 800eb16:	e063      	b.n	800ebe0 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	6818      	ldr	r0, [r3, #0]
 800eb1c:	683b      	ldr	r3, [r7, #0]
 800eb1e:	6899      	ldr	r1, [r3, #8]
 800eb20:	683b      	ldr	r3, [r7, #0]
 800eb22:	685a      	ldr	r2, [r3, #4]
 800eb24:	683b      	ldr	r3, [r7, #0]
 800eb26:	68db      	ldr	r3, [r3, #12]
 800eb28:	f001 f808 	bl	800fb3c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	689b      	ldr	r3, [r3, #8]
 800eb32:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800eb3a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	68fa      	ldr	r2, [r7, #12]
 800eb42:	609a      	str	r2, [r3, #8]
      break;
 800eb44:	e04c      	b.n	800ebe0 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	6818      	ldr	r0, [r3, #0]
 800eb4a:	683b      	ldr	r3, [r7, #0]
 800eb4c:	6899      	ldr	r1, [r3, #8]
 800eb4e:	683b      	ldr	r3, [r7, #0]
 800eb50:	685a      	ldr	r2, [r3, #4]
 800eb52:	683b      	ldr	r3, [r7, #0]
 800eb54:	68db      	ldr	r3, [r3, #12]
 800eb56:	f000 fff1 	bl	800fb3c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	689a      	ldr	r2, [r3, #8]
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800eb68:	609a      	str	r2, [r3, #8]
      break;
 800eb6a:	e039      	b.n	800ebe0 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	6818      	ldr	r0, [r3, #0]
 800eb70:	683b      	ldr	r3, [r7, #0]
 800eb72:	6859      	ldr	r1, [r3, #4]
 800eb74:	683b      	ldr	r3, [r7, #0]
 800eb76:	68db      	ldr	r3, [r3, #12]
 800eb78:	461a      	mov	r2, r3
 800eb7a:	f000 fead 	bl	800f8d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	2150      	movs	r1, #80	; 0x50
 800eb84:	4618      	mov	r0, r3
 800eb86:	f000 ffbc 	bl	800fb02 <TIM_ITRx_SetConfig>
      break;
 800eb8a:	e029      	b.n	800ebe0 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	6818      	ldr	r0, [r3, #0]
 800eb90:	683b      	ldr	r3, [r7, #0]
 800eb92:	6859      	ldr	r1, [r3, #4]
 800eb94:	683b      	ldr	r3, [r7, #0]
 800eb96:	68db      	ldr	r3, [r3, #12]
 800eb98:	461a      	mov	r2, r3
 800eb9a:	f000 ff09 	bl	800f9b0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	2160      	movs	r1, #96	; 0x60
 800eba4:	4618      	mov	r0, r3
 800eba6:	f000 ffac 	bl	800fb02 <TIM_ITRx_SetConfig>
      break;
 800ebaa:	e019      	b.n	800ebe0 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	6818      	ldr	r0, [r3, #0]
 800ebb0:	683b      	ldr	r3, [r7, #0]
 800ebb2:	6859      	ldr	r1, [r3, #4]
 800ebb4:	683b      	ldr	r3, [r7, #0]
 800ebb6:	68db      	ldr	r3, [r3, #12]
 800ebb8:	461a      	mov	r2, r3
 800ebba:	f000 fe8d 	bl	800f8d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	2140      	movs	r1, #64	; 0x40
 800ebc4:	4618      	mov	r0, r3
 800ebc6:	f000 ff9c 	bl	800fb02 <TIM_ITRx_SetConfig>
      break;
 800ebca:	e009      	b.n	800ebe0 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	681a      	ldr	r2, [r3, #0]
 800ebd0:	683b      	ldr	r3, [r7, #0]
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	4619      	mov	r1, r3
 800ebd6:	4610      	mov	r0, r2
 800ebd8:	f000 ff93 	bl	800fb02 <TIM_ITRx_SetConfig>
      break;
 800ebdc:	e000      	b.n	800ebe0 <HAL_TIM_ConfigClockSource+0x1ac>
      break;
 800ebde:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	2201      	movs	r2, #1
 800ebe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	2200      	movs	r2, #0
 800ebec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ebf0:	2300      	movs	r3, #0
}
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	3710      	adds	r7, #16
 800ebf6:	46bd      	mov	sp, r7
 800ebf8:	bd80      	pop	{r7, pc}
 800ebfa:	bf00      	nop
 800ebfc:	00100030 	.word	0x00100030
 800ec00:	00100020 	.word	0x00100020
 800ec04:	00100050 	.word	0x00100050
 800ec08:	00100040 	.word	0x00100040
 800ec0c:	00100060 	.word	0x00100060
 800ec10:	00100070 	.word	0x00100070

0800ec14 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800ec14:	b580      	push	{r7, lr}
 800ec16:	b082      	sub	sp, #8
 800ec18:	af00      	add	r7, sp, #0
 800ec1a:	6078      	str	r0, [r7, #4]
 800ec1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ec24:	2b01      	cmp	r3, #1
 800ec26:	d101      	bne.n	800ec2c <HAL_TIM_SlaveConfigSynchro+0x18>
 800ec28:	2302      	movs	r3, #2
 800ec2a:	e031      	b.n	800ec90 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	2201      	movs	r2, #1
 800ec30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	2202      	movs	r2, #2
 800ec38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800ec3c:	6839      	ldr	r1, [r7, #0]
 800ec3e:	6878      	ldr	r0, [r7, #4]
 800ec40:	f000 fd1a 	bl	800f678 <TIM_SlaveTimer_SetConfig>
 800ec44:	4603      	mov	r3, r0
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d009      	beq.n	800ec5e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	2201      	movs	r2, #1
 800ec4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	2200      	movs	r2, #0
 800ec56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800ec5a:	2301      	movs	r3, #1
 800ec5c:	e018      	b.n	800ec90 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	68da      	ldr	r2, [r3, #12]
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ec6c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	68da      	ldr	r2, [r3, #12]
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ec7c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	2201      	movs	r2, #1
 800ec82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	2200      	movs	r2, #0
 800ec8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ec8e:	2300      	movs	r3, #0
}
 800ec90:	4618      	mov	r0, r3
 800ec92:	3708      	adds	r7, #8
 800ec94:	46bd      	mov	sp, r7
 800ec96:	bd80      	pop	{r7, pc}

0800ec98 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ec98:	b480      	push	{r7}
 800ec9a:	b083      	sub	sp, #12
 800ec9c:	af00      	add	r7, sp, #0
 800ec9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800eca0:	bf00      	nop
 800eca2:	370c      	adds	r7, #12
 800eca4:	46bd      	mov	sp, r7
 800eca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecaa:	4770      	bx	lr

0800ecac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ecac:	b480      	push	{r7}
 800ecae:	b083      	sub	sp, #12
 800ecb0:	af00      	add	r7, sp, #0
 800ecb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ecb4:	bf00      	nop
 800ecb6:	370c      	adds	r7, #12
 800ecb8:	46bd      	mov	sp, r7
 800ecba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecbe:	4770      	bx	lr

0800ecc0 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800ecc0:	b480      	push	{r7}
 800ecc2:	b083      	sub	sp, #12
 800ecc4:	af00      	add	r7, sp, #0
 800ecc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800ecc8:	bf00      	nop
 800ecca:	370c      	adds	r7, #12
 800eccc:	46bd      	mov	sp, r7
 800ecce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecd2:	4770      	bx	lr

0800ecd4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ecd4:	b480      	push	{r7}
 800ecd6:	b083      	sub	sp, #12
 800ecd8:	af00      	add	r7, sp, #0
 800ecda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ecdc:	bf00      	nop
 800ecde:	370c      	adds	r7, #12
 800ece0:	46bd      	mov	sp, r7
 800ece2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ece6:	4770      	bx	lr

0800ece8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ece8:	b480      	push	{r7}
 800ecea:	b083      	sub	sp, #12
 800ecec:	af00      	add	r7, sp, #0
 800ecee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ecf0:	bf00      	nop
 800ecf2:	370c      	adds	r7, #12
 800ecf4:	46bd      	mov	sp, r7
 800ecf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecfa:	4770      	bx	lr

0800ecfc <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800ecfc:	b480      	push	{r7}
 800ecfe:	b083      	sub	sp, #12
 800ed00:	af00      	add	r7, sp, #0
 800ed02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800ed04:	bf00      	nop
 800ed06:	370c      	adds	r7, #12
 800ed08:	46bd      	mov	sp, r7
 800ed0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed0e:	4770      	bx	lr

0800ed10 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800ed10:	b580      	push	{r7, lr}
 800ed12:	b084      	sub	sp, #16
 800ed14:	af00      	add	r7, sp, #0
 800ed16:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed1c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed22:	687a      	ldr	r2, [r7, #4]
 800ed24:	429a      	cmp	r2, r3
 800ed26:	d107      	bne.n	800ed38 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	2201      	movs	r2, #1
 800ed2c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	2201      	movs	r2, #1
 800ed32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ed36:	e02a      	b.n	800ed8e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed3c:	687a      	ldr	r2, [r7, #4]
 800ed3e:	429a      	cmp	r2, r3
 800ed40:	d107      	bne.n	800ed52 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	2202      	movs	r2, #2
 800ed46:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	2201      	movs	r2, #1
 800ed4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ed50:	e01d      	b.n	800ed8e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed56:	687a      	ldr	r2, [r7, #4]
 800ed58:	429a      	cmp	r2, r3
 800ed5a:	d107      	bne.n	800ed6c <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	2204      	movs	r2, #4
 800ed60:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	2201      	movs	r2, #1
 800ed66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ed6a:	e010      	b.n	800ed8e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed70:	687a      	ldr	r2, [r7, #4]
 800ed72:	429a      	cmp	r2, r3
 800ed74:	d107      	bne.n	800ed86 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	2208      	movs	r2, #8
 800ed7a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	2201      	movs	r2, #1
 800ed80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ed84:	e003      	b.n	800ed8e <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	2201      	movs	r2, #1
 800ed8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800ed8e:	68f8      	ldr	r0, [r7, #12]
 800ed90:	f7ff ffb4 	bl	800ecfc <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	2200      	movs	r2, #0
 800ed98:	771a      	strb	r2, [r3, #28]
}
 800ed9a:	bf00      	nop
 800ed9c:	3710      	adds	r7, #16
 800ed9e:	46bd      	mov	sp, r7
 800eda0:	bd80      	pop	{r7, pc}

0800eda2 <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 800eda2:	b580      	push	{r7, lr}
 800eda4:	b084      	sub	sp, #16
 800eda6:	af00      	add	r7, sp, #0
 800eda8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800edae:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edb4:	687a      	ldr	r2, [r7, #4]
 800edb6:	429a      	cmp	r2, r3
 800edb8:	d10f      	bne.n	800edda <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	2201      	movs	r2, #1
 800edbe:	771a      	strb	r2, [r3, #28]
    
    if (hdma->Init.Mode == DMA_NORMAL)
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	69db      	ldr	r3, [r3, #28]
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d146      	bne.n	800ee56 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	2201      	movs	r2, #1
 800edcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	2201      	movs	r2, #1
 800edd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800edd8:	e03d      	b.n	800ee56 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800edde:	687a      	ldr	r2, [r7, #4]
 800ede0:	429a      	cmp	r2, r3
 800ede2:	d10f      	bne.n	800ee04 <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ede4:	68fb      	ldr	r3, [r7, #12]
 800ede6:	2202      	movs	r2, #2
 800ede8:	771a      	strb	r2, [r3, #28]
    
    if (hdma->Init.Mode == DMA_NORMAL)
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	69db      	ldr	r3, [r3, #28]
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d131      	bne.n	800ee56 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	2201      	movs	r2, #1
 800edf6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	2201      	movs	r2, #1
 800edfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ee02:	e028      	b.n	800ee56 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee08:	687a      	ldr	r2, [r7, #4]
 800ee0a:	429a      	cmp	r2, r3
 800ee0c:	d10f      	bne.n	800ee2e <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	2204      	movs	r2, #4
 800ee12:	771a      	strb	r2, [r3, #28]
    
    if (hdma->Init.Mode == DMA_NORMAL)
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	69db      	ldr	r3, [r3, #28]
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d11c      	bne.n	800ee56 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	2201      	movs	r2, #1
 800ee20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	2201      	movs	r2, #1
 800ee28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ee2c:	e013      	b.n	800ee56 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee32:	687a      	ldr	r2, [r7, #4]
 800ee34:	429a      	cmp	r2, r3
 800ee36:	d10e      	bne.n	800ee56 <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	2208      	movs	r2, #8
 800ee3c:	771a      	strb	r2, [r3, #28]
    
    if (hdma->Init.Mode == DMA_NORMAL)
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	69db      	ldr	r3, [r3, #28]
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d107      	bne.n	800ee56 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	2201      	movs	r2, #1
 800ee4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	2201      	movs	r2, #1
 800ee52:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 800ee56:	68f8      	ldr	r0, [r7, #12]
 800ee58:	f7f7 fbb6 	bl	80065c8 <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	2200      	movs	r2, #0
 800ee60:	771a      	strb	r2, [r3, #28]
}
 800ee62:	bf00      	nop
 800ee64:	3710      	adds	r7, #16
 800ee66:	46bd      	mov	sp, r7
 800ee68:	bd80      	pop	{r7, pc}

0800ee6a <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ee6a:	b580      	push	{r7, lr}
 800ee6c:	b084      	sub	sp, #16
 800ee6e:	af00      	add	r7, sp, #0
 800ee70:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee76:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee7c:	687a      	ldr	r2, [r7, #4]
 800ee7e:	429a      	cmp	r2, r3
 800ee80:	d103      	bne.n	800ee8a <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	2201      	movs	r2, #1
 800ee86:	771a      	strb	r2, [r3, #28]
 800ee88:	e019      	b.n	800eebe <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee8e:	687a      	ldr	r2, [r7, #4]
 800ee90:	429a      	cmp	r2, r3
 800ee92:	d103      	bne.n	800ee9c <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	2202      	movs	r2, #2
 800ee98:	771a      	strb	r2, [r3, #28]
 800ee9a:	e010      	b.n	800eebe <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800ee9c:	68fb      	ldr	r3, [r7, #12]
 800ee9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eea0:	687a      	ldr	r2, [r7, #4]
 800eea2:	429a      	cmp	r2, r3
 800eea4:	d103      	bne.n	800eeae <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	2204      	movs	r2, #4
 800eeaa:	771a      	strb	r2, [r3, #28]
 800eeac:	e007      	b.n	800eebe <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eeb2:	687a      	ldr	r2, [r7, #4]
 800eeb4:	429a      	cmp	r2, r3
 800eeb6:	d102      	bne.n	800eebe <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	2208      	movs	r2, #8
 800eebc:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800eebe:	68f8      	ldr	r0, [r7, #12]
 800eec0:	f7ff fefe 	bl	800ecc0 <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	2200      	movs	r2, #0
 800eec8:	771a      	strb	r2, [r3, #28]
}
 800eeca:	bf00      	nop
 800eecc:	3710      	adds	r7, #16
 800eece:	46bd      	mov	sp, r7
 800eed0:	bd80      	pop	{r7, pc}
	...

0800eed4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800eed4:	b480      	push	{r7}
 800eed6:	b085      	sub	sp, #20
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	6078      	str	r0, [r7, #4]
 800eedc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	4a46      	ldr	r2, [pc, #280]	; (800f000 <TIM_Base_SetConfig+0x12c>)
 800eee8:	4293      	cmp	r3, r2
 800eeea:	d017      	beq.n	800ef1c <TIM_Base_SetConfig+0x48>
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eef2:	d013      	beq.n	800ef1c <TIM_Base_SetConfig+0x48>
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	4a43      	ldr	r2, [pc, #268]	; (800f004 <TIM_Base_SetConfig+0x130>)
 800eef8:	4293      	cmp	r3, r2
 800eefa:	d00f      	beq.n	800ef1c <TIM_Base_SetConfig+0x48>
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	4a42      	ldr	r2, [pc, #264]	; (800f008 <TIM_Base_SetConfig+0x134>)
 800ef00:	4293      	cmp	r3, r2
 800ef02:	d00b      	beq.n	800ef1c <TIM_Base_SetConfig+0x48>
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	4a41      	ldr	r2, [pc, #260]	; (800f00c <TIM_Base_SetConfig+0x138>)
 800ef08:	4293      	cmp	r3, r2
 800ef0a:	d007      	beq.n	800ef1c <TIM_Base_SetConfig+0x48>
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	4a40      	ldr	r2, [pc, #256]	; (800f010 <TIM_Base_SetConfig+0x13c>)
 800ef10:	4293      	cmp	r3, r2
 800ef12:	d003      	beq.n	800ef1c <TIM_Base_SetConfig+0x48>
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	4a3f      	ldr	r2, [pc, #252]	; (800f014 <TIM_Base_SetConfig+0x140>)
 800ef18:	4293      	cmp	r3, r2
 800ef1a:	d108      	bne.n	800ef2e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ef22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ef24:	683b      	ldr	r3, [r7, #0]
 800ef26:	685b      	ldr	r3, [r3, #4]
 800ef28:	68fa      	ldr	r2, [r7, #12]
 800ef2a:	4313      	orrs	r3, r2
 800ef2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	4a33      	ldr	r2, [pc, #204]	; (800f000 <TIM_Base_SetConfig+0x12c>)
 800ef32:	4293      	cmp	r3, r2
 800ef34:	d023      	beq.n	800ef7e <TIM_Base_SetConfig+0xaa>
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ef3c:	d01f      	beq.n	800ef7e <TIM_Base_SetConfig+0xaa>
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	4a30      	ldr	r2, [pc, #192]	; (800f004 <TIM_Base_SetConfig+0x130>)
 800ef42:	4293      	cmp	r3, r2
 800ef44:	d01b      	beq.n	800ef7e <TIM_Base_SetConfig+0xaa>
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	4a2f      	ldr	r2, [pc, #188]	; (800f008 <TIM_Base_SetConfig+0x134>)
 800ef4a:	4293      	cmp	r3, r2
 800ef4c:	d017      	beq.n	800ef7e <TIM_Base_SetConfig+0xaa>
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	4a2e      	ldr	r2, [pc, #184]	; (800f00c <TIM_Base_SetConfig+0x138>)
 800ef52:	4293      	cmp	r3, r2
 800ef54:	d013      	beq.n	800ef7e <TIM_Base_SetConfig+0xaa>
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	4a2d      	ldr	r2, [pc, #180]	; (800f010 <TIM_Base_SetConfig+0x13c>)
 800ef5a:	4293      	cmp	r3, r2
 800ef5c:	d00f      	beq.n	800ef7e <TIM_Base_SetConfig+0xaa>
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	4a2d      	ldr	r2, [pc, #180]	; (800f018 <TIM_Base_SetConfig+0x144>)
 800ef62:	4293      	cmp	r3, r2
 800ef64:	d00b      	beq.n	800ef7e <TIM_Base_SetConfig+0xaa>
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	4a2c      	ldr	r2, [pc, #176]	; (800f01c <TIM_Base_SetConfig+0x148>)
 800ef6a:	4293      	cmp	r3, r2
 800ef6c:	d007      	beq.n	800ef7e <TIM_Base_SetConfig+0xaa>
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	4a2b      	ldr	r2, [pc, #172]	; (800f020 <TIM_Base_SetConfig+0x14c>)
 800ef72:	4293      	cmp	r3, r2
 800ef74:	d003      	beq.n	800ef7e <TIM_Base_SetConfig+0xaa>
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	4a26      	ldr	r2, [pc, #152]	; (800f014 <TIM_Base_SetConfig+0x140>)
 800ef7a:	4293      	cmp	r3, r2
 800ef7c:	d108      	bne.n	800ef90 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ef84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ef86:	683b      	ldr	r3, [r7, #0]
 800ef88:	68db      	ldr	r3, [r3, #12]
 800ef8a:	68fa      	ldr	r2, [r7, #12]
 800ef8c:	4313      	orrs	r3, r2
 800ef8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ef96:	683b      	ldr	r3, [r7, #0]
 800ef98:	695b      	ldr	r3, [r3, #20]
 800ef9a:	4313      	orrs	r3, r2
 800ef9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	68fa      	ldr	r2, [r7, #12]
 800efa2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800efa4:	683b      	ldr	r3, [r7, #0]
 800efa6:	689a      	ldr	r2, [r3, #8]
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800efac:	683b      	ldr	r3, [r7, #0]
 800efae:	681a      	ldr	r2, [r3, #0]
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	4a12      	ldr	r2, [pc, #72]	; (800f000 <TIM_Base_SetConfig+0x12c>)
 800efb8:	4293      	cmp	r3, r2
 800efba:	d013      	beq.n	800efe4 <TIM_Base_SetConfig+0x110>
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	4a14      	ldr	r2, [pc, #80]	; (800f010 <TIM_Base_SetConfig+0x13c>)
 800efc0:	4293      	cmp	r3, r2
 800efc2:	d00f      	beq.n	800efe4 <TIM_Base_SetConfig+0x110>
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	4a14      	ldr	r2, [pc, #80]	; (800f018 <TIM_Base_SetConfig+0x144>)
 800efc8:	4293      	cmp	r3, r2
 800efca:	d00b      	beq.n	800efe4 <TIM_Base_SetConfig+0x110>
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	4a13      	ldr	r2, [pc, #76]	; (800f01c <TIM_Base_SetConfig+0x148>)
 800efd0:	4293      	cmp	r3, r2
 800efd2:	d007      	beq.n	800efe4 <TIM_Base_SetConfig+0x110>
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	4a12      	ldr	r2, [pc, #72]	; (800f020 <TIM_Base_SetConfig+0x14c>)
 800efd8:	4293      	cmp	r3, r2
 800efda:	d003      	beq.n	800efe4 <TIM_Base_SetConfig+0x110>
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	4a0d      	ldr	r2, [pc, #52]	; (800f014 <TIM_Base_SetConfig+0x140>)
 800efe0:	4293      	cmp	r3, r2
 800efe2:	d103      	bne.n	800efec <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800efe4:	683b      	ldr	r3, [r7, #0]
 800efe6:	691a      	ldr	r2, [r3, #16]
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	2201      	movs	r2, #1
 800eff0:	615a      	str	r2, [r3, #20]
}
 800eff2:	bf00      	nop
 800eff4:	3714      	adds	r7, #20
 800eff6:	46bd      	mov	sp, r7
 800eff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800effc:	4770      	bx	lr
 800effe:	bf00      	nop
 800f000:	40012c00 	.word	0x40012c00
 800f004:	40000400 	.word	0x40000400
 800f008:	40000800 	.word	0x40000800
 800f00c:	40000c00 	.word	0x40000c00
 800f010:	40013400 	.word	0x40013400
 800f014:	40015000 	.word	0x40015000
 800f018:	40014000 	.word	0x40014000
 800f01c:	40014400 	.word	0x40014400
 800f020:	40014800 	.word	0x40014800

0800f024 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f024:	b480      	push	{r7}
 800f026:	b087      	sub	sp, #28
 800f028:	af00      	add	r7, sp, #0
 800f02a:	6078      	str	r0, [r7, #4]
 800f02c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	6a1b      	ldr	r3, [r3, #32]
 800f032:	f023 0201 	bic.w	r2, r3, #1
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	6a1b      	ldr	r3, [r3, #32]
 800f03e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	685b      	ldr	r3, [r3, #4]
 800f044:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	699b      	ldr	r3, [r3, #24]
 800f04a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f056:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	f023 0303 	bic.w	r3, r3, #3
 800f05e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f060:	683b      	ldr	r3, [r7, #0]
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	68fa      	ldr	r2, [r7, #12]
 800f066:	4313      	orrs	r3, r2
 800f068:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f06a:	697b      	ldr	r3, [r7, #20]
 800f06c:	f023 0302 	bic.w	r3, r3, #2
 800f070:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f072:	683b      	ldr	r3, [r7, #0]
 800f074:	689b      	ldr	r3, [r3, #8]
 800f076:	697a      	ldr	r2, [r7, #20]
 800f078:	4313      	orrs	r3, r2
 800f07a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	4a30      	ldr	r2, [pc, #192]	; (800f140 <TIM_OC1_SetConfig+0x11c>)
 800f080:	4293      	cmp	r3, r2
 800f082:	d013      	beq.n	800f0ac <TIM_OC1_SetConfig+0x88>
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	4a2f      	ldr	r2, [pc, #188]	; (800f144 <TIM_OC1_SetConfig+0x120>)
 800f088:	4293      	cmp	r3, r2
 800f08a:	d00f      	beq.n	800f0ac <TIM_OC1_SetConfig+0x88>
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	4a2e      	ldr	r2, [pc, #184]	; (800f148 <TIM_OC1_SetConfig+0x124>)
 800f090:	4293      	cmp	r3, r2
 800f092:	d00b      	beq.n	800f0ac <TIM_OC1_SetConfig+0x88>
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	4a2d      	ldr	r2, [pc, #180]	; (800f14c <TIM_OC1_SetConfig+0x128>)
 800f098:	4293      	cmp	r3, r2
 800f09a:	d007      	beq.n	800f0ac <TIM_OC1_SetConfig+0x88>
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	4a2c      	ldr	r2, [pc, #176]	; (800f150 <TIM_OC1_SetConfig+0x12c>)
 800f0a0:	4293      	cmp	r3, r2
 800f0a2:	d003      	beq.n	800f0ac <TIM_OC1_SetConfig+0x88>
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	4a2b      	ldr	r2, [pc, #172]	; (800f154 <TIM_OC1_SetConfig+0x130>)
 800f0a8:	4293      	cmp	r3, r2
 800f0aa:	d10c      	bne.n	800f0c6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f0ac:	697b      	ldr	r3, [r7, #20]
 800f0ae:	f023 0308 	bic.w	r3, r3, #8
 800f0b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f0b4:	683b      	ldr	r3, [r7, #0]
 800f0b6:	68db      	ldr	r3, [r3, #12]
 800f0b8:	697a      	ldr	r2, [r7, #20]
 800f0ba:	4313      	orrs	r3, r2
 800f0bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f0be:	697b      	ldr	r3, [r7, #20]
 800f0c0:	f023 0304 	bic.w	r3, r3, #4
 800f0c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	4a1d      	ldr	r2, [pc, #116]	; (800f140 <TIM_OC1_SetConfig+0x11c>)
 800f0ca:	4293      	cmp	r3, r2
 800f0cc:	d013      	beq.n	800f0f6 <TIM_OC1_SetConfig+0xd2>
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	4a1c      	ldr	r2, [pc, #112]	; (800f144 <TIM_OC1_SetConfig+0x120>)
 800f0d2:	4293      	cmp	r3, r2
 800f0d4:	d00f      	beq.n	800f0f6 <TIM_OC1_SetConfig+0xd2>
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	4a1b      	ldr	r2, [pc, #108]	; (800f148 <TIM_OC1_SetConfig+0x124>)
 800f0da:	4293      	cmp	r3, r2
 800f0dc:	d00b      	beq.n	800f0f6 <TIM_OC1_SetConfig+0xd2>
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	4a1a      	ldr	r2, [pc, #104]	; (800f14c <TIM_OC1_SetConfig+0x128>)
 800f0e2:	4293      	cmp	r3, r2
 800f0e4:	d007      	beq.n	800f0f6 <TIM_OC1_SetConfig+0xd2>
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	4a19      	ldr	r2, [pc, #100]	; (800f150 <TIM_OC1_SetConfig+0x12c>)
 800f0ea:	4293      	cmp	r3, r2
 800f0ec:	d003      	beq.n	800f0f6 <TIM_OC1_SetConfig+0xd2>
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	4a18      	ldr	r2, [pc, #96]	; (800f154 <TIM_OC1_SetConfig+0x130>)
 800f0f2:	4293      	cmp	r3, r2
 800f0f4:	d111      	bne.n	800f11a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f0f6:	693b      	ldr	r3, [r7, #16]
 800f0f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f0fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f0fe:	693b      	ldr	r3, [r7, #16]
 800f100:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f104:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f106:	683b      	ldr	r3, [r7, #0]
 800f108:	695b      	ldr	r3, [r3, #20]
 800f10a:	693a      	ldr	r2, [r7, #16]
 800f10c:	4313      	orrs	r3, r2
 800f10e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f110:	683b      	ldr	r3, [r7, #0]
 800f112:	699b      	ldr	r3, [r3, #24]
 800f114:	693a      	ldr	r2, [r7, #16]
 800f116:	4313      	orrs	r3, r2
 800f118:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	693a      	ldr	r2, [r7, #16]
 800f11e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	68fa      	ldr	r2, [r7, #12]
 800f124:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f126:	683b      	ldr	r3, [r7, #0]
 800f128:	685a      	ldr	r2, [r3, #4]
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	697a      	ldr	r2, [r7, #20]
 800f132:	621a      	str	r2, [r3, #32]
}
 800f134:	bf00      	nop
 800f136:	371c      	adds	r7, #28
 800f138:	46bd      	mov	sp, r7
 800f13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f13e:	4770      	bx	lr
 800f140:	40012c00 	.word	0x40012c00
 800f144:	40013400 	.word	0x40013400
 800f148:	40014000 	.word	0x40014000
 800f14c:	40014400 	.word	0x40014400
 800f150:	40014800 	.word	0x40014800
 800f154:	40015000 	.word	0x40015000

0800f158 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f158:	b480      	push	{r7}
 800f15a:	b087      	sub	sp, #28
 800f15c:	af00      	add	r7, sp, #0
 800f15e:	6078      	str	r0, [r7, #4]
 800f160:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	6a1b      	ldr	r3, [r3, #32]
 800f166:	f023 0210 	bic.w	r2, r3, #16
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	6a1b      	ldr	r3, [r3, #32]
 800f172:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	685b      	ldr	r3, [r3, #4]
 800f178:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	699b      	ldr	r3, [r3, #24]
 800f17e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800f186:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f18a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f192:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f194:	683b      	ldr	r3, [r7, #0]
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	021b      	lsls	r3, r3, #8
 800f19a:	68fa      	ldr	r2, [r7, #12]
 800f19c:	4313      	orrs	r3, r2
 800f19e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f1a0:	697b      	ldr	r3, [r7, #20]
 800f1a2:	f023 0320 	bic.w	r3, r3, #32
 800f1a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f1a8:	683b      	ldr	r3, [r7, #0]
 800f1aa:	689b      	ldr	r3, [r3, #8]
 800f1ac:	011b      	lsls	r3, r3, #4
 800f1ae:	697a      	ldr	r2, [r7, #20]
 800f1b0:	4313      	orrs	r3, r2
 800f1b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	4a2c      	ldr	r2, [pc, #176]	; (800f268 <TIM_OC2_SetConfig+0x110>)
 800f1b8:	4293      	cmp	r3, r2
 800f1ba:	d007      	beq.n	800f1cc <TIM_OC2_SetConfig+0x74>
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	4a2b      	ldr	r2, [pc, #172]	; (800f26c <TIM_OC2_SetConfig+0x114>)
 800f1c0:	4293      	cmp	r3, r2
 800f1c2:	d003      	beq.n	800f1cc <TIM_OC2_SetConfig+0x74>
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	4a2a      	ldr	r2, [pc, #168]	; (800f270 <TIM_OC2_SetConfig+0x118>)
 800f1c8:	4293      	cmp	r3, r2
 800f1ca:	d10d      	bne.n	800f1e8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f1cc:	697b      	ldr	r3, [r7, #20]
 800f1ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f1d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f1d4:	683b      	ldr	r3, [r7, #0]
 800f1d6:	68db      	ldr	r3, [r3, #12]
 800f1d8:	011b      	lsls	r3, r3, #4
 800f1da:	697a      	ldr	r2, [r7, #20]
 800f1dc:	4313      	orrs	r3, r2
 800f1de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f1e0:	697b      	ldr	r3, [r7, #20]
 800f1e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f1e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	4a1f      	ldr	r2, [pc, #124]	; (800f268 <TIM_OC2_SetConfig+0x110>)
 800f1ec:	4293      	cmp	r3, r2
 800f1ee:	d013      	beq.n	800f218 <TIM_OC2_SetConfig+0xc0>
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	4a1e      	ldr	r2, [pc, #120]	; (800f26c <TIM_OC2_SetConfig+0x114>)
 800f1f4:	4293      	cmp	r3, r2
 800f1f6:	d00f      	beq.n	800f218 <TIM_OC2_SetConfig+0xc0>
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	4a1e      	ldr	r2, [pc, #120]	; (800f274 <TIM_OC2_SetConfig+0x11c>)
 800f1fc:	4293      	cmp	r3, r2
 800f1fe:	d00b      	beq.n	800f218 <TIM_OC2_SetConfig+0xc0>
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	4a1d      	ldr	r2, [pc, #116]	; (800f278 <TIM_OC2_SetConfig+0x120>)
 800f204:	4293      	cmp	r3, r2
 800f206:	d007      	beq.n	800f218 <TIM_OC2_SetConfig+0xc0>
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	4a1c      	ldr	r2, [pc, #112]	; (800f27c <TIM_OC2_SetConfig+0x124>)
 800f20c:	4293      	cmp	r3, r2
 800f20e:	d003      	beq.n	800f218 <TIM_OC2_SetConfig+0xc0>
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	4a17      	ldr	r2, [pc, #92]	; (800f270 <TIM_OC2_SetConfig+0x118>)
 800f214:	4293      	cmp	r3, r2
 800f216:	d113      	bne.n	800f240 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f218:	693b      	ldr	r3, [r7, #16]
 800f21a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f21e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f220:	693b      	ldr	r3, [r7, #16]
 800f222:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f226:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f228:	683b      	ldr	r3, [r7, #0]
 800f22a:	695b      	ldr	r3, [r3, #20]
 800f22c:	009b      	lsls	r3, r3, #2
 800f22e:	693a      	ldr	r2, [r7, #16]
 800f230:	4313      	orrs	r3, r2
 800f232:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f234:	683b      	ldr	r3, [r7, #0]
 800f236:	699b      	ldr	r3, [r3, #24]
 800f238:	009b      	lsls	r3, r3, #2
 800f23a:	693a      	ldr	r2, [r7, #16]
 800f23c:	4313      	orrs	r3, r2
 800f23e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	693a      	ldr	r2, [r7, #16]
 800f244:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	68fa      	ldr	r2, [r7, #12]
 800f24a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f24c:	683b      	ldr	r3, [r7, #0]
 800f24e:	685a      	ldr	r2, [r3, #4]
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	697a      	ldr	r2, [r7, #20]
 800f258:	621a      	str	r2, [r3, #32]
}
 800f25a:	bf00      	nop
 800f25c:	371c      	adds	r7, #28
 800f25e:	46bd      	mov	sp, r7
 800f260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f264:	4770      	bx	lr
 800f266:	bf00      	nop
 800f268:	40012c00 	.word	0x40012c00
 800f26c:	40013400 	.word	0x40013400
 800f270:	40015000 	.word	0x40015000
 800f274:	40014000 	.word	0x40014000
 800f278:	40014400 	.word	0x40014400
 800f27c:	40014800 	.word	0x40014800

0800f280 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f280:	b480      	push	{r7}
 800f282:	b087      	sub	sp, #28
 800f284:	af00      	add	r7, sp, #0
 800f286:	6078      	str	r0, [r7, #4]
 800f288:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	6a1b      	ldr	r3, [r3, #32]
 800f28e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	6a1b      	ldr	r3, [r3, #32]
 800f29a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	685b      	ldr	r3, [r3, #4]
 800f2a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	69db      	ldr	r3, [r3, #28]
 800f2a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f2ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f2b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f2b4:	68fb      	ldr	r3, [r7, #12]
 800f2b6:	f023 0303 	bic.w	r3, r3, #3
 800f2ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f2bc:	683b      	ldr	r3, [r7, #0]
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	68fa      	ldr	r2, [r7, #12]
 800f2c2:	4313      	orrs	r3, r2
 800f2c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f2c6:	697b      	ldr	r3, [r7, #20]
 800f2c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f2cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f2ce:	683b      	ldr	r3, [r7, #0]
 800f2d0:	689b      	ldr	r3, [r3, #8]
 800f2d2:	021b      	lsls	r3, r3, #8
 800f2d4:	697a      	ldr	r2, [r7, #20]
 800f2d6:	4313      	orrs	r3, r2
 800f2d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	4a2b      	ldr	r2, [pc, #172]	; (800f38c <TIM_OC3_SetConfig+0x10c>)
 800f2de:	4293      	cmp	r3, r2
 800f2e0:	d007      	beq.n	800f2f2 <TIM_OC3_SetConfig+0x72>
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	4a2a      	ldr	r2, [pc, #168]	; (800f390 <TIM_OC3_SetConfig+0x110>)
 800f2e6:	4293      	cmp	r3, r2
 800f2e8:	d003      	beq.n	800f2f2 <TIM_OC3_SetConfig+0x72>
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	4a29      	ldr	r2, [pc, #164]	; (800f394 <TIM_OC3_SetConfig+0x114>)
 800f2ee:	4293      	cmp	r3, r2
 800f2f0:	d10d      	bne.n	800f30e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f2f2:	697b      	ldr	r3, [r7, #20]
 800f2f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f2f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f2fa:	683b      	ldr	r3, [r7, #0]
 800f2fc:	68db      	ldr	r3, [r3, #12]
 800f2fe:	021b      	lsls	r3, r3, #8
 800f300:	697a      	ldr	r2, [r7, #20]
 800f302:	4313      	orrs	r3, r2
 800f304:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f306:	697b      	ldr	r3, [r7, #20]
 800f308:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f30c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	4a1e      	ldr	r2, [pc, #120]	; (800f38c <TIM_OC3_SetConfig+0x10c>)
 800f312:	4293      	cmp	r3, r2
 800f314:	d013      	beq.n	800f33e <TIM_OC3_SetConfig+0xbe>
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	4a1d      	ldr	r2, [pc, #116]	; (800f390 <TIM_OC3_SetConfig+0x110>)
 800f31a:	4293      	cmp	r3, r2
 800f31c:	d00f      	beq.n	800f33e <TIM_OC3_SetConfig+0xbe>
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	4a1d      	ldr	r2, [pc, #116]	; (800f398 <TIM_OC3_SetConfig+0x118>)
 800f322:	4293      	cmp	r3, r2
 800f324:	d00b      	beq.n	800f33e <TIM_OC3_SetConfig+0xbe>
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	4a1c      	ldr	r2, [pc, #112]	; (800f39c <TIM_OC3_SetConfig+0x11c>)
 800f32a:	4293      	cmp	r3, r2
 800f32c:	d007      	beq.n	800f33e <TIM_OC3_SetConfig+0xbe>
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	4a1b      	ldr	r2, [pc, #108]	; (800f3a0 <TIM_OC3_SetConfig+0x120>)
 800f332:	4293      	cmp	r3, r2
 800f334:	d003      	beq.n	800f33e <TIM_OC3_SetConfig+0xbe>
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	4a16      	ldr	r2, [pc, #88]	; (800f394 <TIM_OC3_SetConfig+0x114>)
 800f33a:	4293      	cmp	r3, r2
 800f33c:	d113      	bne.n	800f366 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f33e:	693b      	ldr	r3, [r7, #16]
 800f340:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f344:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f346:	693b      	ldr	r3, [r7, #16]
 800f348:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f34c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f34e:	683b      	ldr	r3, [r7, #0]
 800f350:	695b      	ldr	r3, [r3, #20]
 800f352:	011b      	lsls	r3, r3, #4
 800f354:	693a      	ldr	r2, [r7, #16]
 800f356:	4313      	orrs	r3, r2
 800f358:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f35a:	683b      	ldr	r3, [r7, #0]
 800f35c:	699b      	ldr	r3, [r3, #24]
 800f35e:	011b      	lsls	r3, r3, #4
 800f360:	693a      	ldr	r2, [r7, #16]
 800f362:	4313      	orrs	r3, r2
 800f364:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	693a      	ldr	r2, [r7, #16]
 800f36a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	68fa      	ldr	r2, [r7, #12]
 800f370:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f372:	683b      	ldr	r3, [r7, #0]
 800f374:	685a      	ldr	r2, [r3, #4]
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	697a      	ldr	r2, [r7, #20]
 800f37e:	621a      	str	r2, [r3, #32]
}
 800f380:	bf00      	nop
 800f382:	371c      	adds	r7, #28
 800f384:	46bd      	mov	sp, r7
 800f386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f38a:	4770      	bx	lr
 800f38c:	40012c00 	.word	0x40012c00
 800f390:	40013400 	.word	0x40013400
 800f394:	40015000 	.word	0x40015000
 800f398:	40014000 	.word	0x40014000
 800f39c:	40014400 	.word	0x40014400
 800f3a0:	40014800 	.word	0x40014800

0800f3a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f3a4:	b480      	push	{r7}
 800f3a6:	b087      	sub	sp, #28
 800f3a8:	af00      	add	r7, sp, #0
 800f3aa:	6078      	str	r0, [r7, #4]
 800f3ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	6a1b      	ldr	r3, [r3, #32]
 800f3b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	6a1b      	ldr	r3, [r3, #32]
 800f3be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	685b      	ldr	r3, [r3, #4]
 800f3c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	69db      	ldr	r3, [r3, #28]
 800f3ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800f3d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f3d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f3de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f3e0:	683b      	ldr	r3, [r7, #0]
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	021b      	lsls	r3, r3, #8
 800f3e6:	68fa      	ldr	r2, [r7, #12]
 800f3e8:	4313      	orrs	r3, r2
 800f3ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f3ec:	697b      	ldr	r3, [r7, #20]
 800f3ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f3f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f3f4:	683b      	ldr	r3, [r7, #0]
 800f3f6:	689b      	ldr	r3, [r3, #8]
 800f3f8:	031b      	lsls	r3, r3, #12
 800f3fa:	697a      	ldr	r2, [r7, #20]
 800f3fc:	4313      	orrs	r3, r2
 800f3fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	4a2c      	ldr	r2, [pc, #176]	; (800f4b4 <TIM_OC4_SetConfig+0x110>)
 800f404:	4293      	cmp	r3, r2
 800f406:	d007      	beq.n	800f418 <TIM_OC4_SetConfig+0x74>
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	4a2b      	ldr	r2, [pc, #172]	; (800f4b8 <TIM_OC4_SetConfig+0x114>)
 800f40c:	4293      	cmp	r3, r2
 800f40e:	d003      	beq.n	800f418 <TIM_OC4_SetConfig+0x74>
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	4a2a      	ldr	r2, [pc, #168]	; (800f4bc <TIM_OC4_SetConfig+0x118>)
 800f414:	4293      	cmp	r3, r2
 800f416:	d10d      	bne.n	800f434 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800f418:	697b      	ldr	r3, [r7, #20]
 800f41a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800f41e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800f420:	683b      	ldr	r3, [r7, #0]
 800f422:	68db      	ldr	r3, [r3, #12]
 800f424:	031b      	lsls	r3, r3, #12
 800f426:	697a      	ldr	r2, [r7, #20]
 800f428:	4313      	orrs	r3, r2
 800f42a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800f42c:	697b      	ldr	r3, [r7, #20]
 800f42e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f432:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	4a1f      	ldr	r2, [pc, #124]	; (800f4b4 <TIM_OC4_SetConfig+0x110>)
 800f438:	4293      	cmp	r3, r2
 800f43a:	d013      	beq.n	800f464 <TIM_OC4_SetConfig+0xc0>
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	4a1e      	ldr	r2, [pc, #120]	; (800f4b8 <TIM_OC4_SetConfig+0x114>)
 800f440:	4293      	cmp	r3, r2
 800f442:	d00f      	beq.n	800f464 <TIM_OC4_SetConfig+0xc0>
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	4a1e      	ldr	r2, [pc, #120]	; (800f4c0 <TIM_OC4_SetConfig+0x11c>)
 800f448:	4293      	cmp	r3, r2
 800f44a:	d00b      	beq.n	800f464 <TIM_OC4_SetConfig+0xc0>
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	4a1d      	ldr	r2, [pc, #116]	; (800f4c4 <TIM_OC4_SetConfig+0x120>)
 800f450:	4293      	cmp	r3, r2
 800f452:	d007      	beq.n	800f464 <TIM_OC4_SetConfig+0xc0>
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	4a1c      	ldr	r2, [pc, #112]	; (800f4c8 <TIM_OC4_SetConfig+0x124>)
 800f458:	4293      	cmp	r3, r2
 800f45a:	d003      	beq.n	800f464 <TIM_OC4_SetConfig+0xc0>
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	4a17      	ldr	r2, [pc, #92]	; (800f4bc <TIM_OC4_SetConfig+0x118>)
 800f460:	4293      	cmp	r3, r2
 800f462:	d113      	bne.n	800f48c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f464:	693b      	ldr	r3, [r7, #16]
 800f466:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f46a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800f46c:	693b      	ldr	r3, [r7, #16]
 800f46e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800f472:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f474:	683b      	ldr	r3, [r7, #0]
 800f476:	695b      	ldr	r3, [r3, #20]
 800f478:	019b      	lsls	r3, r3, #6
 800f47a:	693a      	ldr	r2, [r7, #16]
 800f47c:	4313      	orrs	r3, r2
 800f47e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800f480:	683b      	ldr	r3, [r7, #0]
 800f482:	699b      	ldr	r3, [r3, #24]
 800f484:	019b      	lsls	r3, r3, #6
 800f486:	693a      	ldr	r2, [r7, #16]
 800f488:	4313      	orrs	r3, r2
 800f48a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	693a      	ldr	r2, [r7, #16]
 800f490:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	68fa      	ldr	r2, [r7, #12]
 800f496:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f498:	683b      	ldr	r3, [r7, #0]
 800f49a:	685a      	ldr	r2, [r3, #4]
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	697a      	ldr	r2, [r7, #20]
 800f4a4:	621a      	str	r2, [r3, #32]
}
 800f4a6:	bf00      	nop
 800f4a8:	371c      	adds	r7, #28
 800f4aa:	46bd      	mov	sp, r7
 800f4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4b0:	4770      	bx	lr
 800f4b2:	bf00      	nop
 800f4b4:	40012c00 	.word	0x40012c00
 800f4b8:	40013400 	.word	0x40013400
 800f4bc:	40015000 	.word	0x40015000
 800f4c0:	40014000 	.word	0x40014000
 800f4c4:	40014400 	.word	0x40014400
 800f4c8:	40014800 	.word	0x40014800

0800f4cc <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800f4cc:	b480      	push	{r7}
 800f4ce:	b087      	sub	sp, #28
 800f4d0:	af00      	add	r7, sp, #0
 800f4d2:	6078      	str	r0, [r7, #4]
 800f4d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	6a1b      	ldr	r3, [r3, #32]
 800f4da:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	6a1b      	ldr	r3, [r3, #32]
 800f4e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	685b      	ldr	r3, [r3, #4]
 800f4ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f4f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f4fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f4fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f500:	683b      	ldr	r3, [r7, #0]
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	68fa      	ldr	r2, [r7, #12]
 800f506:	4313      	orrs	r3, r2
 800f508:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800f50a:	693b      	ldr	r3, [r7, #16]
 800f50c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800f510:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800f512:	683b      	ldr	r3, [r7, #0]
 800f514:	689b      	ldr	r3, [r3, #8]
 800f516:	041b      	lsls	r3, r3, #16
 800f518:	693a      	ldr	r2, [r7, #16]
 800f51a:	4313      	orrs	r3, r2
 800f51c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	4a19      	ldr	r2, [pc, #100]	; (800f588 <TIM_OC5_SetConfig+0xbc>)
 800f522:	4293      	cmp	r3, r2
 800f524:	d013      	beq.n	800f54e <TIM_OC5_SetConfig+0x82>
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	4a18      	ldr	r2, [pc, #96]	; (800f58c <TIM_OC5_SetConfig+0xc0>)
 800f52a:	4293      	cmp	r3, r2
 800f52c:	d00f      	beq.n	800f54e <TIM_OC5_SetConfig+0x82>
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	4a17      	ldr	r2, [pc, #92]	; (800f590 <TIM_OC5_SetConfig+0xc4>)
 800f532:	4293      	cmp	r3, r2
 800f534:	d00b      	beq.n	800f54e <TIM_OC5_SetConfig+0x82>
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	4a16      	ldr	r2, [pc, #88]	; (800f594 <TIM_OC5_SetConfig+0xc8>)
 800f53a:	4293      	cmp	r3, r2
 800f53c:	d007      	beq.n	800f54e <TIM_OC5_SetConfig+0x82>
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	4a15      	ldr	r2, [pc, #84]	; (800f598 <TIM_OC5_SetConfig+0xcc>)
 800f542:	4293      	cmp	r3, r2
 800f544:	d003      	beq.n	800f54e <TIM_OC5_SetConfig+0x82>
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	4a14      	ldr	r2, [pc, #80]	; (800f59c <TIM_OC5_SetConfig+0xd0>)
 800f54a:	4293      	cmp	r3, r2
 800f54c:	d109      	bne.n	800f562 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800f54e:	697b      	ldr	r3, [r7, #20]
 800f550:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f554:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800f556:	683b      	ldr	r3, [r7, #0]
 800f558:	695b      	ldr	r3, [r3, #20]
 800f55a:	021b      	lsls	r3, r3, #8
 800f55c:	697a      	ldr	r2, [r7, #20]
 800f55e:	4313      	orrs	r3, r2
 800f560:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	697a      	ldr	r2, [r7, #20]
 800f566:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	68fa      	ldr	r2, [r7, #12]
 800f56c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800f56e:	683b      	ldr	r3, [r7, #0]
 800f570:	685a      	ldr	r2, [r3, #4]
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	693a      	ldr	r2, [r7, #16]
 800f57a:	621a      	str	r2, [r3, #32]
}
 800f57c:	bf00      	nop
 800f57e:	371c      	adds	r7, #28
 800f580:	46bd      	mov	sp, r7
 800f582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f586:	4770      	bx	lr
 800f588:	40012c00 	.word	0x40012c00
 800f58c:	40013400 	.word	0x40013400
 800f590:	40014000 	.word	0x40014000
 800f594:	40014400 	.word	0x40014400
 800f598:	40014800 	.word	0x40014800
 800f59c:	40015000 	.word	0x40015000

0800f5a0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800f5a0:	b480      	push	{r7}
 800f5a2:	b087      	sub	sp, #28
 800f5a4:	af00      	add	r7, sp, #0
 800f5a6:	6078      	str	r0, [r7, #4]
 800f5a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	6a1b      	ldr	r3, [r3, #32]
 800f5ae:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	6a1b      	ldr	r3, [r3, #32]
 800f5ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	685b      	ldr	r3, [r3, #4]
 800f5c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f5c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800f5ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f5d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f5d4:	683b      	ldr	r3, [r7, #0]
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	021b      	lsls	r3, r3, #8
 800f5da:	68fa      	ldr	r2, [r7, #12]
 800f5dc:	4313      	orrs	r3, r2
 800f5de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800f5e0:	693b      	ldr	r3, [r7, #16]
 800f5e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f5e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800f5e8:	683b      	ldr	r3, [r7, #0]
 800f5ea:	689b      	ldr	r3, [r3, #8]
 800f5ec:	051b      	lsls	r3, r3, #20
 800f5ee:	693a      	ldr	r2, [r7, #16]
 800f5f0:	4313      	orrs	r3, r2
 800f5f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	4a1a      	ldr	r2, [pc, #104]	; (800f660 <TIM_OC6_SetConfig+0xc0>)
 800f5f8:	4293      	cmp	r3, r2
 800f5fa:	d013      	beq.n	800f624 <TIM_OC6_SetConfig+0x84>
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	4a19      	ldr	r2, [pc, #100]	; (800f664 <TIM_OC6_SetConfig+0xc4>)
 800f600:	4293      	cmp	r3, r2
 800f602:	d00f      	beq.n	800f624 <TIM_OC6_SetConfig+0x84>
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	4a18      	ldr	r2, [pc, #96]	; (800f668 <TIM_OC6_SetConfig+0xc8>)
 800f608:	4293      	cmp	r3, r2
 800f60a:	d00b      	beq.n	800f624 <TIM_OC6_SetConfig+0x84>
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	4a17      	ldr	r2, [pc, #92]	; (800f66c <TIM_OC6_SetConfig+0xcc>)
 800f610:	4293      	cmp	r3, r2
 800f612:	d007      	beq.n	800f624 <TIM_OC6_SetConfig+0x84>
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	4a16      	ldr	r2, [pc, #88]	; (800f670 <TIM_OC6_SetConfig+0xd0>)
 800f618:	4293      	cmp	r3, r2
 800f61a:	d003      	beq.n	800f624 <TIM_OC6_SetConfig+0x84>
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	4a15      	ldr	r2, [pc, #84]	; (800f674 <TIM_OC6_SetConfig+0xd4>)
 800f620:	4293      	cmp	r3, r2
 800f622:	d109      	bne.n	800f638 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800f624:	697b      	ldr	r3, [r7, #20]
 800f626:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f62a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800f62c:	683b      	ldr	r3, [r7, #0]
 800f62e:	695b      	ldr	r3, [r3, #20]
 800f630:	029b      	lsls	r3, r3, #10
 800f632:	697a      	ldr	r2, [r7, #20]
 800f634:	4313      	orrs	r3, r2
 800f636:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	697a      	ldr	r2, [r7, #20]
 800f63c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	68fa      	ldr	r2, [r7, #12]
 800f642:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800f644:	683b      	ldr	r3, [r7, #0]
 800f646:	685a      	ldr	r2, [r3, #4]
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	693a      	ldr	r2, [r7, #16]
 800f650:	621a      	str	r2, [r3, #32]
}
 800f652:	bf00      	nop
 800f654:	371c      	adds	r7, #28
 800f656:	46bd      	mov	sp, r7
 800f658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f65c:	4770      	bx	lr
 800f65e:	bf00      	nop
 800f660:	40012c00 	.word	0x40012c00
 800f664:	40013400 	.word	0x40013400
 800f668:	40014000 	.word	0x40014000
 800f66c:	40014400 	.word	0x40014400
 800f670:	40014800 	.word	0x40014800
 800f674:	40015000 	.word	0x40015000

0800f678 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800f678:	b580      	push	{r7, lr}
 800f67a:	b086      	sub	sp, #24
 800f67c:	af00      	add	r7, sp, #0
 800f67e:	6078      	str	r0, [r7, #4]
 800f680:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	689b      	ldr	r3, [r3, #8]
 800f688:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f68a:	697b      	ldr	r3, [r7, #20]
 800f68c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800f690:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f694:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800f696:	683b      	ldr	r3, [r7, #0]
 800f698:	685b      	ldr	r3, [r3, #4]
 800f69a:	697a      	ldr	r2, [r7, #20]
 800f69c:	4313      	orrs	r3, r2
 800f69e:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800f6a0:	697b      	ldr	r3, [r7, #20]
 800f6a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f6a6:	f023 0307 	bic.w	r3, r3, #7
 800f6aa:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800f6ac:	683b      	ldr	r3, [r7, #0]
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	697a      	ldr	r2, [r7, #20]
 800f6b2:	4313      	orrs	r3, r2
 800f6b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	697a      	ldr	r2, [r7, #20]
 800f6bc:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800f6be:	683b      	ldr	r3, [r7, #0]
 800f6c0:	685b      	ldr	r3, [r3, #4]
 800f6c2:	2b70      	cmp	r3, #112	; 0x70
 800f6c4:	d034      	beq.n	800f730 <TIM_SlaveTimer_SetConfig+0xb8>
 800f6c6:	2b70      	cmp	r3, #112	; 0x70
 800f6c8:	d811      	bhi.n	800f6ee <TIM_SlaveTimer_SetConfig+0x76>
 800f6ca:	2b30      	cmp	r3, #48	; 0x30
 800f6cc:	d07d      	beq.n	800f7ca <TIM_SlaveTimer_SetConfig+0x152>
 800f6ce:	2b30      	cmp	r3, #48	; 0x30
 800f6d0:	d806      	bhi.n	800f6e0 <TIM_SlaveTimer_SetConfig+0x68>
 800f6d2:	2b10      	cmp	r3, #16
 800f6d4:	d079      	beq.n	800f7ca <TIM_SlaveTimer_SetConfig+0x152>
 800f6d6:	2b20      	cmp	r3, #32
 800f6d8:	d077      	beq.n	800f7ca <TIM_SlaveTimer_SetConfig+0x152>
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d075      	beq.n	800f7ca <TIM_SlaveTimer_SetConfig+0x152>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      break;
 800f6de:	e075      	b.n	800f7cc <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 800f6e0:	2b50      	cmp	r3, #80	; 0x50
 800f6e2:	d05e      	beq.n	800f7a2 <TIM_SlaveTimer_SetConfig+0x12a>
 800f6e4:	2b60      	cmp	r3, #96	; 0x60
 800f6e6:	d066      	beq.n	800f7b6 <TIM_SlaveTimer_SetConfig+0x13e>
 800f6e8:	2b40      	cmp	r3, #64	; 0x40
 800f6ea:	d02c      	beq.n	800f746 <TIM_SlaveTimer_SetConfig+0xce>
      break;
 800f6ec:	e06e      	b.n	800f7cc <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 800f6ee:	4a3a      	ldr	r2, [pc, #232]	; (800f7d8 <TIM_SlaveTimer_SetConfig+0x160>)
 800f6f0:	4293      	cmp	r3, r2
 800f6f2:	d06a      	beq.n	800f7ca <TIM_SlaveTimer_SetConfig+0x152>
 800f6f4:	4a38      	ldr	r2, [pc, #224]	; (800f7d8 <TIM_SlaveTimer_SetConfig+0x160>)
 800f6f6:	4293      	cmp	r3, r2
 800f6f8:	d809      	bhi.n	800f70e <TIM_SlaveTimer_SetConfig+0x96>
 800f6fa:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800f6fe:	d064      	beq.n	800f7ca <TIM_SlaveTimer_SetConfig+0x152>
 800f700:	4a36      	ldr	r2, [pc, #216]	; (800f7dc <TIM_SlaveTimer_SetConfig+0x164>)
 800f702:	4293      	cmp	r3, r2
 800f704:	d061      	beq.n	800f7ca <TIM_SlaveTimer_SetConfig+0x152>
 800f706:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f70a:	d05e      	beq.n	800f7ca <TIM_SlaveTimer_SetConfig+0x152>
      break;
 800f70c:	e05e      	b.n	800f7cc <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 800f70e:	4a34      	ldr	r2, [pc, #208]	; (800f7e0 <TIM_SlaveTimer_SetConfig+0x168>)
 800f710:	4293      	cmp	r3, r2
 800f712:	d05a      	beq.n	800f7ca <TIM_SlaveTimer_SetConfig+0x152>
 800f714:	4a32      	ldr	r2, [pc, #200]	; (800f7e0 <TIM_SlaveTimer_SetConfig+0x168>)
 800f716:	4293      	cmp	r3, r2
 800f718:	d803      	bhi.n	800f722 <TIM_SlaveTimer_SetConfig+0xaa>
 800f71a:	4a32      	ldr	r2, [pc, #200]	; (800f7e4 <TIM_SlaveTimer_SetConfig+0x16c>)
 800f71c:	4293      	cmp	r3, r2
 800f71e:	d054      	beq.n	800f7ca <TIM_SlaveTimer_SetConfig+0x152>
      break;
 800f720:	e054      	b.n	800f7cc <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 800f722:	4a31      	ldr	r2, [pc, #196]	; (800f7e8 <TIM_SlaveTimer_SetConfig+0x170>)
 800f724:	4293      	cmp	r3, r2
 800f726:	d050      	beq.n	800f7ca <TIM_SlaveTimer_SetConfig+0x152>
 800f728:	4a30      	ldr	r2, [pc, #192]	; (800f7ec <TIM_SlaveTimer_SetConfig+0x174>)
 800f72a:	4293      	cmp	r3, r2
 800f72c:	d04d      	beq.n	800f7ca <TIM_SlaveTimer_SetConfig+0x152>
      break;
 800f72e:	e04d      	b.n	800f7cc <TIM_SlaveTimer_SetConfig+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	6818      	ldr	r0, [r3, #0]
 800f734:	683b      	ldr	r3, [r7, #0]
 800f736:	68d9      	ldr	r1, [r3, #12]
 800f738:	683b      	ldr	r3, [r7, #0]
 800f73a:	689a      	ldr	r2, [r3, #8]
 800f73c:	683b      	ldr	r3, [r7, #0]
 800f73e:	691b      	ldr	r3, [r3, #16]
 800f740:	f000 f9fc 	bl	800fb3c <TIM_ETR_SetConfig>
      break;
 800f744:	e042      	b.n	800f7cc <TIM_SlaveTimer_SetConfig+0x154>
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 800f746:	683b      	ldr	r3, [r7, #0]
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	2b05      	cmp	r3, #5
 800f74c:	d004      	beq.n	800f758 <TIM_SlaveTimer_SetConfig+0xe0>
 800f74e:	683b      	ldr	r3, [r7, #0]
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 800f756:	d101      	bne.n	800f75c <TIM_SlaveTimer_SetConfig+0xe4>
        return HAL_ERROR;
 800f758:	2301      	movs	r3, #1
 800f75a:	e038      	b.n	800f7ce <TIM_SlaveTimer_SetConfig+0x156>
      tmpccer = htim->Instance->CCER;
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	6a1b      	ldr	r3, [r3, #32]
 800f762:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	681b      	ldr	r3, [r3, #0]
 800f768:	6a1a      	ldr	r2, [r3, #32]
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	681b      	ldr	r3, [r3, #0]
 800f76e:	f022 0201 	bic.w	r2, r2, #1
 800f772:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	699b      	ldr	r3, [r3, #24]
 800f77a:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f77c:	68fb      	ldr	r3, [r7, #12]
 800f77e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f782:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800f784:	683b      	ldr	r3, [r7, #0]
 800f786:	691b      	ldr	r3, [r3, #16]
 800f788:	011b      	lsls	r3, r3, #4
 800f78a:	68fa      	ldr	r2, [r7, #12]
 800f78c:	4313      	orrs	r3, r2
 800f78e:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	68fa      	ldr	r2, [r7, #12]
 800f796:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	693a      	ldr	r2, [r7, #16]
 800f79e:	621a      	str	r2, [r3, #32]
      break;
 800f7a0:	e014      	b.n	800f7cc <TIM_SlaveTimer_SetConfig+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	6818      	ldr	r0, [r3, #0]
 800f7a6:	683b      	ldr	r3, [r7, #0]
 800f7a8:	6899      	ldr	r1, [r3, #8]
 800f7aa:	683b      	ldr	r3, [r7, #0]
 800f7ac:	691b      	ldr	r3, [r3, #16]
 800f7ae:	461a      	mov	r2, r3
 800f7b0:	f000 f892 	bl	800f8d8 <TIM_TI1_ConfigInputStage>
      break;
 800f7b4:	e00a      	b.n	800f7cc <TIM_SlaveTimer_SetConfig+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	6818      	ldr	r0, [r3, #0]
 800f7ba:	683b      	ldr	r3, [r7, #0]
 800f7bc:	6899      	ldr	r1, [r3, #8]
 800f7be:	683b      	ldr	r3, [r7, #0]
 800f7c0:	691b      	ldr	r3, [r3, #16]
 800f7c2:	461a      	mov	r2, r3
 800f7c4:	f000 f8f4 	bl	800f9b0 <TIM_TI2_ConfigInputStage>
      break;
 800f7c8:	e000      	b.n	800f7cc <TIM_SlaveTimer_SetConfig+0x154>
      break;
 800f7ca:	bf00      	nop
  }
  return HAL_OK;
 800f7cc:	2300      	movs	r3, #0
}
 800f7ce:	4618      	mov	r0, r3
 800f7d0:	3718      	adds	r7, #24
 800f7d2:	46bd      	mov	sp, r7
 800f7d4:	bd80      	pop	{r7, pc}
 800f7d6:	bf00      	nop
 800f7d8:	00100030 	.word	0x00100030
 800f7dc:	00100020 	.word	0x00100020
 800f7e0:	00100050 	.word	0x00100050
 800f7e4:	00100040 	.word	0x00100040
 800f7e8:	00100060 	.word	0x00100060
 800f7ec:	00100070 	.word	0x00100070

0800f7f0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800f7f0:	b480      	push	{r7}
 800f7f2:	b087      	sub	sp, #28
 800f7f4:	af00      	add	r7, sp, #0
 800f7f6:	60f8      	str	r0, [r7, #12]
 800f7f8:	60b9      	str	r1, [r7, #8]
 800f7fa:	607a      	str	r2, [r7, #4]
 800f7fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	6a1b      	ldr	r3, [r3, #32]
 800f802:	f023 0201 	bic.w	r2, r3, #1
 800f806:	68fb      	ldr	r3, [r7, #12]
 800f808:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	699b      	ldr	r3, [r3, #24]
 800f80e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800f810:	68fb      	ldr	r3, [r7, #12]
 800f812:	6a1b      	ldr	r3, [r3, #32]
 800f814:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	4a28      	ldr	r2, [pc, #160]	; (800f8bc <TIM_TI1_SetConfig+0xcc>)
 800f81a:	4293      	cmp	r3, r2
 800f81c:	d01b      	beq.n	800f856 <TIM_TI1_SetConfig+0x66>
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f824:	d017      	beq.n	800f856 <TIM_TI1_SetConfig+0x66>
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	4a25      	ldr	r2, [pc, #148]	; (800f8c0 <TIM_TI1_SetConfig+0xd0>)
 800f82a:	4293      	cmp	r3, r2
 800f82c:	d013      	beq.n	800f856 <TIM_TI1_SetConfig+0x66>
 800f82e:	68fb      	ldr	r3, [r7, #12]
 800f830:	4a24      	ldr	r2, [pc, #144]	; (800f8c4 <TIM_TI1_SetConfig+0xd4>)
 800f832:	4293      	cmp	r3, r2
 800f834:	d00f      	beq.n	800f856 <TIM_TI1_SetConfig+0x66>
 800f836:	68fb      	ldr	r3, [r7, #12]
 800f838:	4a23      	ldr	r2, [pc, #140]	; (800f8c8 <TIM_TI1_SetConfig+0xd8>)
 800f83a:	4293      	cmp	r3, r2
 800f83c:	d00b      	beq.n	800f856 <TIM_TI1_SetConfig+0x66>
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	4a22      	ldr	r2, [pc, #136]	; (800f8cc <TIM_TI1_SetConfig+0xdc>)
 800f842:	4293      	cmp	r3, r2
 800f844:	d007      	beq.n	800f856 <TIM_TI1_SetConfig+0x66>
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	4a21      	ldr	r2, [pc, #132]	; (800f8d0 <TIM_TI1_SetConfig+0xe0>)
 800f84a:	4293      	cmp	r3, r2
 800f84c:	d003      	beq.n	800f856 <TIM_TI1_SetConfig+0x66>
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	4a20      	ldr	r2, [pc, #128]	; (800f8d4 <TIM_TI1_SetConfig+0xe4>)
 800f852:	4293      	cmp	r3, r2
 800f854:	d101      	bne.n	800f85a <TIM_TI1_SetConfig+0x6a>
 800f856:	2301      	movs	r3, #1
 800f858:	e000      	b.n	800f85c <TIM_TI1_SetConfig+0x6c>
 800f85a:	2300      	movs	r3, #0
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d008      	beq.n	800f872 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800f860:	697b      	ldr	r3, [r7, #20]
 800f862:	f023 0303 	bic.w	r3, r3, #3
 800f866:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800f868:	697a      	ldr	r2, [r7, #20]
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	4313      	orrs	r3, r2
 800f86e:	617b      	str	r3, [r7, #20]
 800f870:	e003      	b.n	800f87a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800f872:	697b      	ldr	r3, [r7, #20]
 800f874:	f043 0301 	orr.w	r3, r3, #1
 800f878:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f87a:	697b      	ldr	r3, [r7, #20]
 800f87c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f880:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800f882:	683b      	ldr	r3, [r7, #0]
 800f884:	011b      	lsls	r3, r3, #4
 800f886:	b2db      	uxtb	r3, r3
 800f888:	697a      	ldr	r2, [r7, #20]
 800f88a:	4313      	orrs	r3, r2
 800f88c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f88e:	693b      	ldr	r3, [r7, #16]
 800f890:	f023 030a 	bic.w	r3, r3, #10
 800f894:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800f896:	68bb      	ldr	r3, [r7, #8]
 800f898:	f003 030a 	and.w	r3, r3, #10
 800f89c:	693a      	ldr	r2, [r7, #16]
 800f89e:	4313      	orrs	r3, r2
 800f8a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f8a2:	68fb      	ldr	r3, [r7, #12]
 800f8a4:	697a      	ldr	r2, [r7, #20]
 800f8a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f8a8:	68fb      	ldr	r3, [r7, #12]
 800f8aa:	693a      	ldr	r2, [r7, #16]
 800f8ac:	621a      	str	r2, [r3, #32]
}
 800f8ae:	bf00      	nop
 800f8b0:	371c      	adds	r7, #28
 800f8b2:	46bd      	mov	sp, r7
 800f8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8b8:	4770      	bx	lr
 800f8ba:	bf00      	nop
 800f8bc:	40012c00 	.word	0x40012c00
 800f8c0:	40000400 	.word	0x40000400
 800f8c4:	40000800 	.word	0x40000800
 800f8c8:	40000c00 	.word	0x40000c00
 800f8cc:	40013400 	.word	0x40013400
 800f8d0:	40014000 	.word	0x40014000
 800f8d4:	40015000 	.word	0x40015000

0800f8d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f8d8:	b480      	push	{r7}
 800f8da:	b087      	sub	sp, #28
 800f8dc:	af00      	add	r7, sp, #0
 800f8de:	60f8      	str	r0, [r7, #12]
 800f8e0:	60b9      	str	r1, [r7, #8]
 800f8e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f8e4:	68fb      	ldr	r3, [r7, #12]
 800f8e6:	6a1b      	ldr	r3, [r3, #32]
 800f8e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f8ea:	68fb      	ldr	r3, [r7, #12]
 800f8ec:	6a1b      	ldr	r3, [r3, #32]
 800f8ee:	f023 0201 	bic.w	r2, r3, #1
 800f8f2:	68fb      	ldr	r3, [r7, #12]
 800f8f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f8f6:	68fb      	ldr	r3, [r7, #12]
 800f8f8:	699b      	ldr	r3, [r3, #24]
 800f8fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f8fc:	693b      	ldr	r3, [r7, #16]
 800f8fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f902:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	011b      	lsls	r3, r3, #4
 800f908:	693a      	ldr	r2, [r7, #16]
 800f90a:	4313      	orrs	r3, r2
 800f90c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f90e:	697b      	ldr	r3, [r7, #20]
 800f910:	f023 030a 	bic.w	r3, r3, #10
 800f914:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f916:	697a      	ldr	r2, [r7, #20]
 800f918:	68bb      	ldr	r3, [r7, #8]
 800f91a:	4313      	orrs	r3, r2
 800f91c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	693a      	ldr	r2, [r7, #16]
 800f922:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f924:	68fb      	ldr	r3, [r7, #12]
 800f926:	697a      	ldr	r2, [r7, #20]
 800f928:	621a      	str	r2, [r3, #32]
}
 800f92a:	bf00      	nop
 800f92c:	371c      	adds	r7, #28
 800f92e:	46bd      	mov	sp, r7
 800f930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f934:	4770      	bx	lr

0800f936 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800f936:	b480      	push	{r7}
 800f938:	b087      	sub	sp, #28
 800f93a:	af00      	add	r7, sp, #0
 800f93c:	60f8      	str	r0, [r7, #12]
 800f93e:	60b9      	str	r1, [r7, #8]
 800f940:	607a      	str	r2, [r7, #4]
 800f942:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f944:	68fb      	ldr	r3, [r7, #12]
 800f946:	6a1b      	ldr	r3, [r3, #32]
 800f948:	f023 0210 	bic.w	r2, r3, #16
 800f94c:	68fb      	ldr	r3, [r7, #12]
 800f94e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	699b      	ldr	r3, [r3, #24]
 800f954:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	6a1b      	ldr	r3, [r3, #32]
 800f95a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800f95c:	697b      	ldr	r3, [r7, #20]
 800f95e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f962:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	021b      	lsls	r3, r3, #8
 800f968:	697a      	ldr	r2, [r7, #20]
 800f96a:	4313      	orrs	r3, r2
 800f96c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f96e:	697b      	ldr	r3, [r7, #20]
 800f970:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f974:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800f976:	683b      	ldr	r3, [r7, #0]
 800f978:	031b      	lsls	r3, r3, #12
 800f97a:	b29b      	uxth	r3, r3
 800f97c:	697a      	ldr	r2, [r7, #20]
 800f97e:	4313      	orrs	r3, r2
 800f980:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f982:	693b      	ldr	r3, [r7, #16]
 800f984:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800f988:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800f98a:	68bb      	ldr	r3, [r7, #8]
 800f98c:	011b      	lsls	r3, r3, #4
 800f98e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800f992:	693a      	ldr	r2, [r7, #16]
 800f994:	4313      	orrs	r3, r2
 800f996:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f998:	68fb      	ldr	r3, [r7, #12]
 800f99a:	697a      	ldr	r2, [r7, #20]
 800f99c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f99e:	68fb      	ldr	r3, [r7, #12]
 800f9a0:	693a      	ldr	r2, [r7, #16]
 800f9a2:	621a      	str	r2, [r3, #32]
}
 800f9a4:	bf00      	nop
 800f9a6:	371c      	adds	r7, #28
 800f9a8:	46bd      	mov	sp, r7
 800f9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ae:	4770      	bx	lr

0800f9b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f9b0:	b480      	push	{r7}
 800f9b2:	b087      	sub	sp, #28
 800f9b4:	af00      	add	r7, sp, #0
 800f9b6:	60f8      	str	r0, [r7, #12]
 800f9b8:	60b9      	str	r1, [r7, #8]
 800f9ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f9bc:	68fb      	ldr	r3, [r7, #12]
 800f9be:	6a1b      	ldr	r3, [r3, #32]
 800f9c0:	f023 0210 	bic.w	r2, r3, #16
 800f9c4:	68fb      	ldr	r3, [r7, #12]
 800f9c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f9c8:	68fb      	ldr	r3, [r7, #12]
 800f9ca:	699b      	ldr	r3, [r3, #24]
 800f9cc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800f9ce:	68fb      	ldr	r3, [r7, #12]
 800f9d0:	6a1b      	ldr	r3, [r3, #32]
 800f9d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f9d4:	697b      	ldr	r3, [r7, #20]
 800f9d6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f9da:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	031b      	lsls	r3, r3, #12
 800f9e0:	697a      	ldr	r2, [r7, #20]
 800f9e2:	4313      	orrs	r3, r2
 800f9e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f9e6:	693b      	ldr	r3, [r7, #16]
 800f9e8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800f9ec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f9ee:	68bb      	ldr	r3, [r7, #8]
 800f9f0:	011b      	lsls	r3, r3, #4
 800f9f2:	693a      	ldr	r2, [r7, #16]
 800f9f4:	4313      	orrs	r3, r2
 800f9f6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f9f8:	68fb      	ldr	r3, [r7, #12]
 800f9fa:	697a      	ldr	r2, [r7, #20]
 800f9fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f9fe:	68fb      	ldr	r3, [r7, #12]
 800fa00:	693a      	ldr	r2, [r7, #16]
 800fa02:	621a      	str	r2, [r3, #32]
}
 800fa04:	bf00      	nop
 800fa06:	371c      	adds	r7, #28
 800fa08:	46bd      	mov	sp, r7
 800fa0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa0e:	4770      	bx	lr

0800fa10 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800fa10:	b480      	push	{r7}
 800fa12:	b087      	sub	sp, #28
 800fa14:	af00      	add	r7, sp, #0
 800fa16:	60f8      	str	r0, [r7, #12]
 800fa18:	60b9      	str	r1, [r7, #8]
 800fa1a:	607a      	str	r2, [r7, #4]
 800fa1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	6a1b      	ldr	r3, [r3, #32]
 800fa22:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800fa2a:	68fb      	ldr	r3, [r7, #12]
 800fa2c:	69db      	ldr	r3, [r3, #28]
 800fa2e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800fa30:	68fb      	ldr	r3, [r7, #12]
 800fa32:	6a1b      	ldr	r3, [r3, #32]
 800fa34:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800fa36:	697b      	ldr	r3, [r7, #20]
 800fa38:	f023 0303 	bic.w	r3, r3, #3
 800fa3c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800fa3e:	697a      	ldr	r2, [r7, #20]
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	4313      	orrs	r3, r2
 800fa44:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800fa46:	697b      	ldr	r3, [r7, #20]
 800fa48:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800fa4c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800fa4e:	683b      	ldr	r3, [r7, #0]
 800fa50:	011b      	lsls	r3, r3, #4
 800fa52:	b2db      	uxtb	r3, r3
 800fa54:	697a      	ldr	r2, [r7, #20]
 800fa56:	4313      	orrs	r3, r2
 800fa58:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800fa5a:	693b      	ldr	r3, [r7, #16]
 800fa5c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800fa60:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800fa62:	68bb      	ldr	r3, [r7, #8]
 800fa64:	021b      	lsls	r3, r3, #8
 800fa66:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800fa6a:	693a      	ldr	r2, [r7, #16]
 800fa6c:	4313      	orrs	r3, r2
 800fa6e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	697a      	ldr	r2, [r7, #20]
 800fa74:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800fa76:	68fb      	ldr	r3, [r7, #12]
 800fa78:	693a      	ldr	r2, [r7, #16]
 800fa7a:	621a      	str	r2, [r3, #32]
}
 800fa7c:	bf00      	nop
 800fa7e:	371c      	adds	r7, #28
 800fa80:	46bd      	mov	sp, r7
 800fa82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa86:	4770      	bx	lr

0800fa88 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800fa88:	b480      	push	{r7}
 800fa8a:	b087      	sub	sp, #28
 800fa8c:	af00      	add	r7, sp, #0
 800fa8e:	60f8      	str	r0, [r7, #12]
 800fa90:	60b9      	str	r1, [r7, #8]
 800fa92:	607a      	str	r2, [r7, #4]
 800fa94:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	6a1b      	ldr	r3, [r3, #32]
 800fa9a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800faa2:	68fb      	ldr	r3, [r7, #12]
 800faa4:	69db      	ldr	r3, [r3, #28]
 800faa6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	6a1b      	ldr	r3, [r3, #32]
 800faac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800faae:	697b      	ldr	r3, [r7, #20]
 800fab0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fab4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	021b      	lsls	r3, r3, #8
 800faba:	697a      	ldr	r2, [r7, #20]
 800fabc:	4313      	orrs	r3, r2
 800fabe:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800fac0:	697b      	ldr	r3, [r7, #20]
 800fac2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800fac6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800fac8:	683b      	ldr	r3, [r7, #0]
 800faca:	031b      	lsls	r3, r3, #12
 800facc:	b29b      	uxth	r3, r3
 800face:	697a      	ldr	r2, [r7, #20]
 800fad0:	4313      	orrs	r3, r2
 800fad2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800fad4:	693b      	ldr	r3, [r7, #16]
 800fad6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800fada:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800fadc:	68bb      	ldr	r3, [r7, #8]
 800fade:	031b      	lsls	r3, r3, #12
 800fae0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800fae4:	693a      	ldr	r2, [r7, #16]
 800fae6:	4313      	orrs	r3, r2
 800fae8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	697a      	ldr	r2, [r7, #20]
 800faee:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800faf0:	68fb      	ldr	r3, [r7, #12]
 800faf2:	693a      	ldr	r2, [r7, #16]
 800faf4:	621a      	str	r2, [r3, #32]
}
 800faf6:	bf00      	nop
 800faf8:	371c      	adds	r7, #28
 800fafa:	46bd      	mov	sp, r7
 800fafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb00:	4770      	bx	lr

0800fb02 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800fb02:	b480      	push	{r7}
 800fb04:	b085      	sub	sp, #20
 800fb06:	af00      	add	r7, sp, #0
 800fb08:	6078      	str	r0, [r7, #4]
 800fb0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	689b      	ldr	r3, [r3, #8]
 800fb10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800fb12:	68fb      	ldr	r3, [r7, #12]
 800fb14:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800fb18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fb1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800fb1e:	683a      	ldr	r2, [r7, #0]
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	4313      	orrs	r3, r2
 800fb24:	f043 0307 	orr.w	r3, r3, #7
 800fb28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	68fa      	ldr	r2, [r7, #12]
 800fb2e:	609a      	str	r2, [r3, #8]
}
 800fb30:	bf00      	nop
 800fb32:	3714      	adds	r7, #20
 800fb34:	46bd      	mov	sp, r7
 800fb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb3a:	4770      	bx	lr

0800fb3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800fb3c:	b480      	push	{r7}
 800fb3e:	b087      	sub	sp, #28
 800fb40:	af00      	add	r7, sp, #0
 800fb42:	60f8      	str	r0, [r7, #12]
 800fb44:	60b9      	str	r1, [r7, #8]
 800fb46:	607a      	str	r2, [r7, #4]
 800fb48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800fb4a:	68fb      	ldr	r3, [r7, #12]
 800fb4c:	689b      	ldr	r3, [r3, #8]
 800fb4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fb50:	697b      	ldr	r3, [r7, #20]
 800fb52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800fb56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800fb58:	683b      	ldr	r3, [r7, #0]
 800fb5a:	021a      	lsls	r2, r3, #8
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	431a      	orrs	r2, r3
 800fb60:	68bb      	ldr	r3, [r7, #8]
 800fb62:	4313      	orrs	r3, r2
 800fb64:	697a      	ldr	r2, [r7, #20]
 800fb66:	4313      	orrs	r3, r2
 800fb68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fb6a:	68fb      	ldr	r3, [r7, #12]
 800fb6c:	697a      	ldr	r2, [r7, #20]
 800fb6e:	609a      	str	r2, [r3, #8]
}
 800fb70:	bf00      	nop
 800fb72:	371c      	adds	r7, #28
 800fb74:	46bd      	mov	sp, r7
 800fb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb7a:	4770      	bx	lr

0800fb7c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800fb7c:	b480      	push	{r7}
 800fb7e:	b087      	sub	sp, #28
 800fb80:	af00      	add	r7, sp, #0
 800fb82:	60f8      	str	r0, [r7, #12]
 800fb84:	60b9      	str	r1, [r7, #8]
 800fb86:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800fb88:	68bb      	ldr	r3, [r7, #8]
 800fb8a:	f003 031f 	and.w	r3, r3, #31
 800fb8e:	2201      	movs	r2, #1
 800fb90:	fa02 f303 	lsl.w	r3, r2, r3
 800fb94:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800fb96:	68fb      	ldr	r3, [r7, #12]
 800fb98:	6a1a      	ldr	r2, [r3, #32]
 800fb9a:	697b      	ldr	r3, [r7, #20]
 800fb9c:	43db      	mvns	r3, r3
 800fb9e:	401a      	ands	r2, r3
 800fba0:	68fb      	ldr	r3, [r7, #12]
 800fba2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800fba4:	68fb      	ldr	r3, [r7, #12]
 800fba6:	6a1a      	ldr	r2, [r3, #32]
 800fba8:	68bb      	ldr	r3, [r7, #8]
 800fbaa:	f003 031f 	and.w	r3, r3, #31
 800fbae:	6879      	ldr	r1, [r7, #4]
 800fbb0:	fa01 f303 	lsl.w	r3, r1, r3
 800fbb4:	431a      	orrs	r2, r3
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	621a      	str	r2, [r3, #32]
}
 800fbba:	bf00      	nop
 800fbbc:	371c      	adds	r7, #28
 800fbbe:	46bd      	mov	sp, r7
 800fbc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbc4:	4770      	bx	lr
	...

0800fbc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800fbc8:	b480      	push	{r7}
 800fbca:	b085      	sub	sp, #20
 800fbcc:	af00      	add	r7, sp, #0
 800fbce:	6078      	str	r0, [r7, #4]
 800fbd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fbd8:	2b01      	cmp	r3, #1
 800fbda:	d101      	bne.n	800fbe0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fbdc:	2302      	movs	r3, #2
 800fbde:	e074      	b.n	800fcca <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	2201      	movs	r2, #1
 800fbe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	2202      	movs	r2, #2
 800fbec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	685b      	ldr	r3, [r3, #4]
 800fbf6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	681b      	ldr	r3, [r3, #0]
 800fbfc:	689b      	ldr	r3, [r3, #8]
 800fbfe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	4a34      	ldr	r2, [pc, #208]	; (800fcd8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800fc06:	4293      	cmp	r3, r2
 800fc08:	d009      	beq.n	800fc1e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	4a33      	ldr	r2, [pc, #204]	; (800fcdc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800fc10:	4293      	cmp	r3, r2
 800fc12:	d004      	beq.n	800fc1e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	4a31      	ldr	r2, [pc, #196]	; (800fce0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800fc1a:	4293      	cmp	r3, r2
 800fc1c:	d108      	bne.n	800fc30 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800fc1e:	68fb      	ldr	r3, [r7, #12]
 800fc20:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800fc24:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800fc26:	683b      	ldr	r3, [r7, #0]
 800fc28:	685b      	ldr	r3, [r3, #4]
 800fc2a:	68fa      	ldr	r2, [r7, #12]
 800fc2c:	4313      	orrs	r3, r2
 800fc2e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800fc36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fc3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fc3c:	683b      	ldr	r3, [r7, #0]
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	68fa      	ldr	r2, [r7, #12]
 800fc42:	4313      	orrs	r3, r2
 800fc44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	68fa      	ldr	r2, [r7, #12]
 800fc4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	681b      	ldr	r3, [r3, #0]
 800fc52:	4a21      	ldr	r2, [pc, #132]	; (800fcd8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800fc54:	4293      	cmp	r3, r2
 800fc56:	d022      	beq.n	800fc9e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fc60:	d01d      	beq.n	800fc9e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	681b      	ldr	r3, [r3, #0]
 800fc66:	4a1f      	ldr	r2, [pc, #124]	; (800fce4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800fc68:	4293      	cmp	r3, r2
 800fc6a:	d018      	beq.n	800fc9e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	681b      	ldr	r3, [r3, #0]
 800fc70:	4a1d      	ldr	r2, [pc, #116]	; (800fce8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800fc72:	4293      	cmp	r3, r2
 800fc74:	d013      	beq.n	800fc9e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	4a1c      	ldr	r2, [pc, #112]	; (800fcec <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800fc7c:	4293      	cmp	r3, r2
 800fc7e:	d00e      	beq.n	800fc9e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	681b      	ldr	r3, [r3, #0]
 800fc84:	4a15      	ldr	r2, [pc, #84]	; (800fcdc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800fc86:	4293      	cmp	r3, r2
 800fc88:	d009      	beq.n	800fc9e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	4a18      	ldr	r2, [pc, #96]	; (800fcf0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800fc90:	4293      	cmp	r3, r2
 800fc92:	d004      	beq.n	800fc9e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	681b      	ldr	r3, [r3, #0]
 800fc98:	4a11      	ldr	r2, [pc, #68]	; (800fce0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800fc9a:	4293      	cmp	r3, r2
 800fc9c:	d10c      	bne.n	800fcb8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800fc9e:	68bb      	ldr	r3, [r7, #8]
 800fca0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fca4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800fca6:	683b      	ldr	r3, [r7, #0]
 800fca8:	689b      	ldr	r3, [r3, #8]
 800fcaa:	68ba      	ldr	r2, [r7, #8]
 800fcac:	4313      	orrs	r3, r2
 800fcae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	68ba      	ldr	r2, [r7, #8]
 800fcb6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	2201      	movs	r2, #1
 800fcbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	2200      	movs	r2, #0
 800fcc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fcc8:	2300      	movs	r3, #0
}
 800fcca:	4618      	mov	r0, r3
 800fccc:	3714      	adds	r7, #20
 800fcce:	46bd      	mov	sp, r7
 800fcd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcd4:	4770      	bx	lr
 800fcd6:	bf00      	nop
 800fcd8:	40012c00 	.word	0x40012c00
 800fcdc:	40013400 	.word	0x40013400
 800fce0:	40015000 	.word	0x40015000
 800fce4:	40000400 	.word	0x40000400
 800fce8:	40000800 	.word	0x40000800
 800fcec:	40000c00 	.word	0x40000c00
 800fcf0:	40014000 	.word	0x40014000

0800fcf4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800fcf4:	b480      	push	{r7}
 800fcf6:	b085      	sub	sp, #20
 800fcf8:	af00      	add	r7, sp, #0
 800fcfa:	6078      	str	r0, [r7, #4]
 800fcfc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800fcfe:	2300      	movs	r3, #0
 800fd00:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fd08:	2b01      	cmp	r3, #1
 800fd0a:	d101      	bne.n	800fd10 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800fd0c:	2302      	movs	r3, #2
 800fd0e:	e096      	b.n	800fe3e <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	2201      	movs	r2, #1
 800fd14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800fd1e:	683b      	ldr	r3, [r7, #0]
 800fd20:	68db      	ldr	r3, [r3, #12]
 800fd22:	4313      	orrs	r3, r2
 800fd24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800fd26:	68fb      	ldr	r3, [r7, #12]
 800fd28:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800fd2c:	683b      	ldr	r3, [r7, #0]
 800fd2e:	689b      	ldr	r3, [r3, #8]
 800fd30:	4313      	orrs	r3, r2
 800fd32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800fd34:	68fb      	ldr	r3, [r7, #12]
 800fd36:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800fd3a:	683b      	ldr	r3, [r7, #0]
 800fd3c:	685b      	ldr	r3, [r3, #4]
 800fd3e:	4313      	orrs	r3, r2
 800fd40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800fd42:	68fb      	ldr	r3, [r7, #12]
 800fd44:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800fd48:	683b      	ldr	r3, [r7, #0]
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	4313      	orrs	r3, r2
 800fd4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800fd50:	68fb      	ldr	r3, [r7, #12]
 800fd52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fd56:	683b      	ldr	r3, [r7, #0]
 800fd58:	691b      	ldr	r3, [r3, #16]
 800fd5a:	4313      	orrs	r3, r2
 800fd5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800fd5e:	68fb      	ldr	r3, [r7, #12]
 800fd60:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800fd64:	683b      	ldr	r3, [r7, #0]
 800fd66:	695b      	ldr	r3, [r3, #20]
 800fd68:	4313      	orrs	r3, r2
 800fd6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800fd72:	683b      	ldr	r3, [r7, #0]
 800fd74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd76:	4313      	orrs	r3, r2
 800fd78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800fd7a:	68fb      	ldr	r3, [r7, #12]
 800fd7c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800fd80:	683b      	ldr	r3, [r7, #0]
 800fd82:	699b      	ldr	r3, [r3, #24]
 800fd84:	041b      	lsls	r3, r3, #16
 800fd86:	4313      	orrs	r3, r2
 800fd88:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	4a2f      	ldr	r2, [pc, #188]	; (800fe4c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800fd90:	4293      	cmp	r3, r2
 800fd92:	d009      	beq.n	800fda8 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	681b      	ldr	r3, [r3, #0]
 800fd98:	4a2d      	ldr	r2, [pc, #180]	; (800fe50 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800fd9a:	4293      	cmp	r3, r2
 800fd9c:	d004      	beq.n	800fda8 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	4a2c      	ldr	r2, [pc, #176]	; (800fe54 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800fda4:	4293      	cmp	r3, r2
 800fda6:	d106      	bne.n	800fdb6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800fda8:	68fb      	ldr	r3, [r7, #12]
 800fdaa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800fdae:	683b      	ldr	r3, [r7, #0]
 800fdb0:	69db      	ldr	r3, [r3, #28]
 800fdb2:	4313      	orrs	r3, r2
 800fdb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	4a24      	ldr	r2, [pc, #144]	; (800fe4c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800fdbc:	4293      	cmp	r3, r2
 800fdbe:	d009      	beq.n	800fdd4 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	4a22      	ldr	r2, [pc, #136]	; (800fe50 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800fdc6:	4293      	cmp	r3, r2
 800fdc8:	d004      	beq.n	800fdd4 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	681b      	ldr	r3, [r3, #0]
 800fdce:	4a21      	ldr	r2, [pc, #132]	; (800fe54 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800fdd0:	4293      	cmp	r3, r2
 800fdd2:	d12b      	bne.n	800fe2c <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800fdd4:	68fb      	ldr	r3, [r7, #12]
 800fdd6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800fdda:	683b      	ldr	r3, [r7, #0]
 800fddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fdde:	051b      	lsls	r3, r3, #20
 800fde0:	4313      	orrs	r3, r2
 800fde2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800fde4:	68fb      	ldr	r3, [r7, #12]
 800fde6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800fdea:	683b      	ldr	r3, [r7, #0]
 800fdec:	6a1b      	ldr	r3, [r3, #32]
 800fdee:	4313      	orrs	r3, r2
 800fdf0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800fdf8:	683b      	ldr	r3, [r7, #0]
 800fdfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdfc:	4313      	orrs	r3, r2
 800fdfe:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	681b      	ldr	r3, [r3, #0]
 800fe04:	4a11      	ldr	r2, [pc, #68]	; (800fe4c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800fe06:	4293      	cmp	r3, r2
 800fe08:	d009      	beq.n	800fe1e <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	4a10      	ldr	r2, [pc, #64]	; (800fe50 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800fe10:	4293      	cmp	r3, r2
 800fe12:	d004      	beq.n	800fe1e <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	681b      	ldr	r3, [r3, #0]
 800fe18:	4a0e      	ldr	r2, [pc, #56]	; (800fe54 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800fe1a:	4293      	cmp	r3, r2
 800fe1c:	d106      	bne.n	800fe2c <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800fe1e:	68fb      	ldr	r3, [r7, #12]
 800fe20:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800fe24:	683b      	ldr	r3, [r7, #0]
 800fe26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe28:	4313      	orrs	r3, r2
 800fe2a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	68fa      	ldr	r2, [r7, #12]
 800fe32:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	2200      	movs	r2, #0
 800fe38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fe3c:	2300      	movs	r3, #0
}
 800fe3e:	4618      	mov	r0, r3
 800fe40:	3714      	adds	r7, #20
 800fe42:	46bd      	mov	sp, r7
 800fe44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe48:	4770      	bx	lr
 800fe4a:	bf00      	nop
 800fe4c:	40012c00 	.word	0x40012c00
 800fe50:	40013400 	.word	0x40013400
 800fe54:	40015000 	.word	0x40015000

0800fe58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800fe58:	b480      	push	{r7}
 800fe5a:	b083      	sub	sp, #12
 800fe5c:	af00      	add	r7, sp, #0
 800fe5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800fe60:	bf00      	nop
 800fe62:	370c      	adds	r7, #12
 800fe64:	46bd      	mov	sp, r7
 800fe66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe6a:	4770      	bx	lr

0800fe6c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800fe6c:	b480      	push	{r7}
 800fe6e:	b083      	sub	sp, #12
 800fe70:	af00      	add	r7, sp, #0
 800fe72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800fe74:	bf00      	nop
 800fe76:	370c      	adds	r7, #12
 800fe78:	46bd      	mov	sp, r7
 800fe7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe7e:	4770      	bx	lr

0800fe80 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800fe80:	b480      	push	{r7}
 800fe82:	b083      	sub	sp, #12
 800fe84:	af00      	add	r7, sp, #0
 800fe86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800fe88:	bf00      	nop
 800fe8a:	370c      	adds	r7, #12
 800fe8c:	46bd      	mov	sp, r7
 800fe8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe92:	4770      	bx	lr

0800fe94 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800fe94:	b480      	push	{r7}
 800fe96:	b083      	sub	sp, #12
 800fe98:	af00      	add	r7, sp, #0
 800fe9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800fe9c:	bf00      	nop
 800fe9e:	370c      	adds	r7, #12
 800fea0:	46bd      	mov	sp, r7
 800fea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fea6:	4770      	bx	lr

0800fea8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800fea8:	b480      	push	{r7}
 800feaa:	b083      	sub	sp, #12
 800feac:	af00      	add	r7, sp, #0
 800feae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800feb0:	bf00      	nop
 800feb2:	370c      	adds	r7, #12
 800feb4:	46bd      	mov	sp, r7
 800feb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feba:	4770      	bx	lr

0800febc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800febc:	b480      	push	{r7}
 800febe:	b083      	sub	sp, #12
 800fec0:	af00      	add	r7, sp, #0
 800fec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800fec4:	bf00      	nop
 800fec6:	370c      	adds	r7, #12
 800fec8:	46bd      	mov	sp, r7
 800feca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fece:	4770      	bx	lr

0800fed0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800fed0:	b480      	push	{r7}
 800fed2:	b083      	sub	sp, #12
 800fed4:	af00      	add	r7, sp, #0
 800fed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800fed8:	bf00      	nop
 800feda:	370c      	adds	r7, #12
 800fedc:	46bd      	mov	sp, r7
 800fede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fee2:	4770      	bx	lr

0800fee4 <LL_EXTI_EnableIT_0_31>:
{
 800fee4:	b480      	push	{r7}
 800fee6:	b083      	sub	sp, #12
 800fee8:	af00      	add	r7, sp, #0
 800feea:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800feec:	4b05      	ldr	r3, [pc, #20]	; (800ff04 <LL_EXTI_EnableIT_0_31+0x20>)
 800feee:	681a      	ldr	r2, [r3, #0]
 800fef0:	4904      	ldr	r1, [pc, #16]	; (800ff04 <LL_EXTI_EnableIT_0_31+0x20>)
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	4313      	orrs	r3, r2
 800fef6:	600b      	str	r3, [r1, #0]
}
 800fef8:	bf00      	nop
 800fefa:	370c      	adds	r7, #12
 800fefc:	46bd      	mov	sp, r7
 800fefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff02:	4770      	bx	lr
 800ff04:	40010400 	.word	0x40010400

0800ff08 <LL_EXTI_EnableIT_32_63>:
{
 800ff08:	b480      	push	{r7}
 800ff0a:	b083      	sub	sp, #12
 800ff0c:	af00      	add	r7, sp, #0
 800ff0e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800ff10:	4b05      	ldr	r3, [pc, #20]	; (800ff28 <LL_EXTI_EnableIT_32_63+0x20>)
 800ff12:	6a1a      	ldr	r2, [r3, #32]
 800ff14:	4904      	ldr	r1, [pc, #16]	; (800ff28 <LL_EXTI_EnableIT_32_63+0x20>)
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	4313      	orrs	r3, r2
 800ff1a:	620b      	str	r3, [r1, #32]
}
 800ff1c:	bf00      	nop
 800ff1e:	370c      	adds	r7, #12
 800ff20:	46bd      	mov	sp, r7
 800ff22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff26:	4770      	bx	lr
 800ff28:	40010400 	.word	0x40010400

0800ff2c <LL_EXTI_DisableIT_0_31>:
{
 800ff2c:	b480      	push	{r7}
 800ff2e:	b083      	sub	sp, #12
 800ff30:	af00      	add	r7, sp, #0
 800ff32:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800ff34:	4b06      	ldr	r3, [pc, #24]	; (800ff50 <LL_EXTI_DisableIT_0_31+0x24>)
 800ff36:	681a      	ldr	r2, [r3, #0]
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	43db      	mvns	r3, r3
 800ff3c:	4904      	ldr	r1, [pc, #16]	; (800ff50 <LL_EXTI_DisableIT_0_31+0x24>)
 800ff3e:	4013      	ands	r3, r2
 800ff40:	600b      	str	r3, [r1, #0]
}
 800ff42:	bf00      	nop
 800ff44:	370c      	adds	r7, #12
 800ff46:	46bd      	mov	sp, r7
 800ff48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff4c:	4770      	bx	lr
 800ff4e:	bf00      	nop
 800ff50:	40010400 	.word	0x40010400

0800ff54 <LL_EXTI_DisableIT_32_63>:
{
 800ff54:	b480      	push	{r7}
 800ff56:	b083      	sub	sp, #12
 800ff58:	af00      	add	r7, sp, #0
 800ff5a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 800ff5c:	4b06      	ldr	r3, [pc, #24]	; (800ff78 <LL_EXTI_DisableIT_32_63+0x24>)
 800ff5e:	6a1a      	ldr	r2, [r3, #32]
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	43db      	mvns	r3, r3
 800ff64:	4904      	ldr	r1, [pc, #16]	; (800ff78 <LL_EXTI_DisableIT_32_63+0x24>)
 800ff66:	4013      	ands	r3, r2
 800ff68:	620b      	str	r3, [r1, #32]
}
 800ff6a:	bf00      	nop
 800ff6c:	370c      	adds	r7, #12
 800ff6e:	46bd      	mov	sp, r7
 800ff70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff74:	4770      	bx	lr
 800ff76:	bf00      	nop
 800ff78:	40010400 	.word	0x40010400

0800ff7c <LL_EXTI_EnableEvent_0_31>:
{
 800ff7c:	b480      	push	{r7}
 800ff7e:	b083      	sub	sp, #12
 800ff80:	af00      	add	r7, sp, #0
 800ff82:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 800ff84:	4b05      	ldr	r3, [pc, #20]	; (800ff9c <LL_EXTI_EnableEvent_0_31+0x20>)
 800ff86:	685a      	ldr	r2, [r3, #4]
 800ff88:	4904      	ldr	r1, [pc, #16]	; (800ff9c <LL_EXTI_EnableEvent_0_31+0x20>)
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	4313      	orrs	r3, r2
 800ff8e:	604b      	str	r3, [r1, #4]
}
 800ff90:	bf00      	nop
 800ff92:	370c      	adds	r7, #12
 800ff94:	46bd      	mov	sp, r7
 800ff96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff9a:	4770      	bx	lr
 800ff9c:	40010400 	.word	0x40010400

0800ffa0 <LL_EXTI_EnableEvent_32_63>:
{
 800ffa0:	b480      	push	{r7}
 800ffa2:	b083      	sub	sp, #12
 800ffa4:	af00      	add	r7, sp, #0
 800ffa6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 800ffa8:	4b05      	ldr	r3, [pc, #20]	; (800ffc0 <LL_EXTI_EnableEvent_32_63+0x20>)
 800ffaa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ffac:	4904      	ldr	r1, [pc, #16]	; (800ffc0 <LL_EXTI_EnableEvent_32_63+0x20>)
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	4313      	orrs	r3, r2
 800ffb2:	624b      	str	r3, [r1, #36]	; 0x24
}
 800ffb4:	bf00      	nop
 800ffb6:	370c      	adds	r7, #12
 800ffb8:	46bd      	mov	sp, r7
 800ffba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffbe:	4770      	bx	lr
 800ffc0:	40010400 	.word	0x40010400

0800ffc4 <LL_EXTI_DisableEvent_0_31>:
{
 800ffc4:	b480      	push	{r7}
 800ffc6:	b083      	sub	sp, #12
 800ffc8:	af00      	add	r7, sp, #0
 800ffca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800ffcc:	4b06      	ldr	r3, [pc, #24]	; (800ffe8 <LL_EXTI_DisableEvent_0_31+0x24>)
 800ffce:	685a      	ldr	r2, [r3, #4]
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	43db      	mvns	r3, r3
 800ffd4:	4904      	ldr	r1, [pc, #16]	; (800ffe8 <LL_EXTI_DisableEvent_0_31+0x24>)
 800ffd6:	4013      	ands	r3, r2
 800ffd8:	604b      	str	r3, [r1, #4]
}
 800ffda:	bf00      	nop
 800ffdc:	370c      	adds	r7, #12
 800ffde:	46bd      	mov	sp, r7
 800ffe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffe4:	4770      	bx	lr
 800ffe6:	bf00      	nop
 800ffe8:	40010400 	.word	0x40010400

0800ffec <LL_EXTI_DisableEvent_32_63>:
{
 800ffec:	b480      	push	{r7}
 800ffee:	b083      	sub	sp, #12
 800fff0:	af00      	add	r7, sp, #0
 800fff2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 800fff4:	4b06      	ldr	r3, [pc, #24]	; (8010010 <LL_EXTI_DisableEvent_32_63+0x24>)
 800fff6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	43db      	mvns	r3, r3
 800fffc:	4904      	ldr	r1, [pc, #16]	; (8010010 <LL_EXTI_DisableEvent_32_63+0x24>)
 800fffe:	4013      	ands	r3, r2
 8010000:	624b      	str	r3, [r1, #36]	; 0x24
}
 8010002:	bf00      	nop
 8010004:	370c      	adds	r7, #12
 8010006:	46bd      	mov	sp, r7
 8010008:	f85d 7b04 	ldr.w	r7, [sp], #4
 801000c:	4770      	bx	lr
 801000e:	bf00      	nop
 8010010:	40010400 	.word	0x40010400

08010014 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8010014:	b480      	push	{r7}
 8010016:	b083      	sub	sp, #12
 8010018:	af00      	add	r7, sp, #0
 801001a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 801001c:	4b05      	ldr	r3, [pc, #20]	; (8010034 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 801001e:	689a      	ldr	r2, [r3, #8]
 8010020:	4904      	ldr	r1, [pc, #16]	; (8010034 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	4313      	orrs	r3, r2
 8010026:	608b      	str	r3, [r1, #8]
}
 8010028:	bf00      	nop
 801002a:	370c      	adds	r7, #12
 801002c:	46bd      	mov	sp, r7
 801002e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010032:	4770      	bx	lr
 8010034:	40010400 	.word	0x40010400

08010038 <LL_EXTI_EnableRisingTrig_32_63>:
{
 8010038:	b480      	push	{r7}
 801003a:	b083      	sub	sp, #12
 801003c:	af00      	add	r7, sp, #0
 801003e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8010040:	4b05      	ldr	r3, [pc, #20]	; (8010058 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8010042:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010044:	4904      	ldr	r1, [pc, #16]	; (8010058 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	4313      	orrs	r3, r2
 801004a:	628b      	str	r3, [r1, #40]	; 0x28
}
 801004c:	bf00      	nop
 801004e:	370c      	adds	r7, #12
 8010050:	46bd      	mov	sp, r7
 8010052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010056:	4770      	bx	lr
 8010058:	40010400 	.word	0x40010400

0801005c <LL_EXTI_DisableRisingTrig_0_31>:
{
 801005c:	b480      	push	{r7}
 801005e:	b083      	sub	sp, #12
 8010060:	af00      	add	r7, sp, #0
 8010062:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8010064:	4b06      	ldr	r3, [pc, #24]	; (8010080 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8010066:	689a      	ldr	r2, [r3, #8]
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	43db      	mvns	r3, r3
 801006c:	4904      	ldr	r1, [pc, #16]	; (8010080 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 801006e:	4013      	ands	r3, r2
 8010070:	608b      	str	r3, [r1, #8]
}
 8010072:	bf00      	nop
 8010074:	370c      	adds	r7, #12
 8010076:	46bd      	mov	sp, r7
 8010078:	f85d 7b04 	ldr.w	r7, [sp], #4
 801007c:	4770      	bx	lr
 801007e:	bf00      	nop
 8010080:	40010400 	.word	0x40010400

08010084 <LL_EXTI_DisableRisingTrig_32_63>:
{
 8010084:	b480      	push	{r7}
 8010086:	b083      	sub	sp, #12
 8010088:	af00      	add	r7, sp, #0
 801008a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 801008c:	4b06      	ldr	r3, [pc, #24]	; (80100a8 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 801008e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	43db      	mvns	r3, r3
 8010094:	4904      	ldr	r1, [pc, #16]	; (80100a8 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8010096:	4013      	ands	r3, r2
 8010098:	628b      	str	r3, [r1, #40]	; 0x28
}
 801009a:	bf00      	nop
 801009c:	370c      	adds	r7, #12
 801009e:	46bd      	mov	sp, r7
 80100a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100a4:	4770      	bx	lr
 80100a6:	bf00      	nop
 80100a8:	40010400 	.word	0x40010400

080100ac <LL_EXTI_EnableFallingTrig_0_31>:
{
 80100ac:	b480      	push	{r7}
 80100ae:	b083      	sub	sp, #12
 80100b0:	af00      	add	r7, sp, #0
 80100b2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80100b4:	4b05      	ldr	r3, [pc, #20]	; (80100cc <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80100b6:	68da      	ldr	r2, [r3, #12]
 80100b8:	4904      	ldr	r1, [pc, #16]	; (80100cc <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	4313      	orrs	r3, r2
 80100be:	60cb      	str	r3, [r1, #12]
}
 80100c0:	bf00      	nop
 80100c2:	370c      	adds	r7, #12
 80100c4:	46bd      	mov	sp, r7
 80100c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ca:	4770      	bx	lr
 80100cc:	40010400 	.word	0x40010400

080100d0 <LL_EXTI_EnableFallingTrig_32_63>:
{
 80100d0:	b480      	push	{r7}
 80100d2:	b083      	sub	sp, #12
 80100d4:	af00      	add	r7, sp, #0
 80100d6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 80100d8:	4b05      	ldr	r3, [pc, #20]	; (80100f0 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80100da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80100dc:	4904      	ldr	r1, [pc, #16]	; (80100f0 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	4313      	orrs	r3, r2
 80100e2:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80100e4:	bf00      	nop
 80100e6:	370c      	adds	r7, #12
 80100e8:	46bd      	mov	sp, r7
 80100ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ee:	4770      	bx	lr
 80100f0:	40010400 	.word	0x40010400

080100f4 <LL_EXTI_DisableFallingTrig_0_31>:
{
 80100f4:	b480      	push	{r7}
 80100f6:	b083      	sub	sp, #12
 80100f8:	af00      	add	r7, sp, #0
 80100fa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80100fc:	4b06      	ldr	r3, [pc, #24]	; (8010118 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80100fe:	68da      	ldr	r2, [r3, #12]
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	43db      	mvns	r3, r3
 8010104:	4904      	ldr	r1, [pc, #16]	; (8010118 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8010106:	4013      	ands	r3, r2
 8010108:	60cb      	str	r3, [r1, #12]
}
 801010a:	bf00      	nop
 801010c:	370c      	adds	r7, #12
 801010e:	46bd      	mov	sp, r7
 8010110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010114:	4770      	bx	lr
 8010116:	bf00      	nop
 8010118:	40010400 	.word	0x40010400

0801011c <LL_EXTI_DisableFallingTrig_32_63>:
{
 801011c:	b480      	push	{r7}
 801011e:	b083      	sub	sp, #12
 8010120:	af00      	add	r7, sp, #0
 8010122:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8010124:	4b06      	ldr	r3, [pc, #24]	; (8010140 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8010126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	43db      	mvns	r3, r3
 801012c:	4904      	ldr	r1, [pc, #16]	; (8010140 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 801012e:	4013      	ands	r3, r2
 8010130:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8010132:	bf00      	nop
 8010134:	370c      	adds	r7, #12
 8010136:	46bd      	mov	sp, r7
 8010138:	f85d 7b04 	ldr.w	r7, [sp], #4
 801013c:	4770      	bx	lr
 801013e:	bf00      	nop
 8010140:	40010400 	.word	0x40010400

08010144 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other calue : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8010144:	b580      	push	{r7, lr}
 8010146:	b084      	sub	sp, #16
 8010148:	af00      	add	r7, sp, #0
 801014a:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 801014c:	2300      	movs	r3, #0
 801014e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	7a1b      	ldrb	r3, [r3, #8]
 8010154:	2b00      	cmp	r3, #0
 8010156:	f000 80c8 	beq.w	80102ea <LL_EXTI_Init+0x1a6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	2b00      	cmp	r3, #0
 8010160:	d05d      	beq.n	801021e <LL_EXTI_Init+0xda>
    {
      switch (EXTI_InitStruct->Mode)
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	7a5b      	ldrb	r3, [r3, #9]
 8010166:	2b01      	cmp	r3, #1
 8010168:	d00e      	beq.n	8010188 <LL_EXTI_Init+0x44>
 801016a:	2b02      	cmp	r3, #2
 801016c:	d017      	beq.n	801019e <LL_EXTI_Init+0x5a>
 801016e:	2b00      	cmp	r3, #0
 8010170:	d120      	bne.n	80101b4 <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	681b      	ldr	r3, [r3, #0]
 8010176:	4618      	mov	r0, r3
 8010178:	f7ff ff24 	bl	800ffc4 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	4618      	mov	r0, r3
 8010182:	f7ff feaf 	bl	800fee4 <LL_EXTI_EnableIT_0_31>
          break;
 8010186:	e018      	b.n	80101ba <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	4618      	mov	r0, r3
 801018e:	f7ff fecd 	bl	800ff2c <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	681b      	ldr	r3, [r3, #0]
 8010196:	4618      	mov	r0, r3
 8010198:	f7ff fef0 	bl	800ff7c <LL_EXTI_EnableEvent_0_31>
          break;
 801019c:	e00d      	b.n	80101ba <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	681b      	ldr	r3, [r3, #0]
 80101a2:	4618      	mov	r0, r3
 80101a4:	f7ff fe9e 	bl	800fee4 <LL_EXTI_EnableIT_0_31>
          /* Directly Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	4618      	mov	r0, r3
 80101ae:	f7ff fee5 	bl	800ff7c <LL_EXTI_EnableEvent_0_31>
          break;
 80101b2:	e002      	b.n	80101ba <LL_EXTI_Init+0x76>
        default:
          status = 0x01u;
 80101b4:	2301      	movs	r3, #1
 80101b6:	60fb      	str	r3, [r7, #12]
          break;
 80101b8:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	7a9b      	ldrb	r3, [r3, #10]
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d02d      	beq.n	801021e <LL_EXTI_Init+0xda>
      {
        switch (EXTI_InitStruct->Trigger)
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	7a9b      	ldrb	r3, [r3, #10]
 80101c6:	2b02      	cmp	r3, #2
 80101c8:	d00e      	beq.n	80101e8 <LL_EXTI_Init+0xa4>
 80101ca:	2b03      	cmp	r3, #3
 80101cc:	d017      	beq.n	80101fe <LL_EXTI_Init+0xba>
 80101ce:	2b01      	cmp	r3, #1
 80101d0:	d120      	bne.n	8010214 <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	681b      	ldr	r3, [r3, #0]
 80101d6:	4618      	mov	r0, r3
 80101d8:	f7ff ff8c 	bl	80100f4 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	681b      	ldr	r3, [r3, #0]
 80101e0:	4618      	mov	r0, r3
 80101e2:	f7ff ff17 	bl	8010014 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 80101e6:	e01b      	b.n	8010220 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	681b      	ldr	r3, [r3, #0]
 80101ec:	4618      	mov	r0, r3
 80101ee:	f7ff ff35 	bl	801005c <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	681b      	ldr	r3, [r3, #0]
 80101f6:	4618      	mov	r0, r3
 80101f8:	f7ff ff58 	bl	80100ac <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80101fc:	e010      	b.n	8010220 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	4618      	mov	r0, r3
 8010204:	f7ff ff06 	bl	8010014 <LL_EXTI_EnableRisingTrig_0_31>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	681b      	ldr	r3, [r3, #0]
 801020c:	4618      	mov	r0, r3
 801020e:	f7ff ff4d 	bl	80100ac <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8010212:	e005      	b.n	8010220 <LL_EXTI_Init+0xdc>
          default:
            status |= 0x02u;
 8010214:	68fb      	ldr	r3, [r7, #12]
 8010216:	f043 0302 	orr.w	r3, r3, #2
 801021a:	60fb      	str	r3, [r7, #12]
            break;
 801021c:	e000      	b.n	8010220 <LL_EXTI_Init+0xdc>
        }
      }
 801021e:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	685b      	ldr	r3, [r3, #4]
 8010224:	2b00      	cmp	r3, #0
 8010226:	d075      	beq.n	8010314 <LL_EXTI_Init+0x1d0>
    {
      switch (EXTI_InitStruct->Mode)
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	7a5b      	ldrb	r3, [r3, #9]
 801022c:	2b01      	cmp	r3, #1
 801022e:	d00e      	beq.n	801024e <LL_EXTI_Init+0x10a>
 8010230:	2b02      	cmp	r3, #2
 8010232:	d017      	beq.n	8010264 <LL_EXTI_Init+0x120>
 8010234:	2b00      	cmp	r3, #0
 8010236:	d120      	bne.n	801027a <LL_EXTI_Init+0x136>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	685b      	ldr	r3, [r3, #4]
 801023c:	4618      	mov	r0, r3
 801023e:	f7ff fed5 	bl	800ffec <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	685b      	ldr	r3, [r3, #4]
 8010246:	4618      	mov	r0, r3
 8010248:	f7ff fe5e 	bl	800ff08 <LL_EXTI_EnableIT_32_63>
          break;
 801024c:	e01a      	b.n	8010284 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	685b      	ldr	r3, [r3, #4]
 8010252:	4618      	mov	r0, r3
 8010254:	f7ff fe7e 	bl	800ff54 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	685b      	ldr	r3, [r3, #4]
 801025c:	4618      	mov	r0, r3
 801025e:	f7ff fe9f 	bl	800ffa0 <LL_EXTI_EnableEvent_32_63>
          break;
 8010262:	e00f      	b.n	8010284 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	685b      	ldr	r3, [r3, #4]
 8010268:	4618      	mov	r0, r3
 801026a:	f7ff fe4d 	bl	800ff08 <LL_EXTI_EnableIT_32_63>
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	685b      	ldr	r3, [r3, #4]
 8010272:	4618      	mov	r0, r3
 8010274:	f7ff fe94 	bl	800ffa0 <LL_EXTI_EnableEvent_32_63>
          break;
 8010278:	e004      	b.n	8010284 <LL_EXTI_Init+0x140>
        default:
          status |= 0x04u;
 801027a:	68fb      	ldr	r3, [r7, #12]
 801027c:	f043 0304 	orr.w	r3, r3, #4
 8010280:	60fb      	str	r3, [r7, #12]
          break;
 8010282:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	7a9b      	ldrb	r3, [r3, #10]
 8010288:	2b00      	cmp	r3, #0
 801028a:	d043      	beq.n	8010314 <LL_EXTI_Init+0x1d0>
      {
        switch (EXTI_InitStruct->Trigger)
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	7a9b      	ldrb	r3, [r3, #10]
 8010290:	2b02      	cmp	r3, #2
 8010292:	d00e      	beq.n	80102b2 <LL_EXTI_Init+0x16e>
 8010294:	2b03      	cmp	r3, #3
 8010296:	d017      	beq.n	80102c8 <LL_EXTI_Init+0x184>
 8010298:	2b01      	cmp	r3, #1
 801029a:	d120      	bne.n	80102de <LL_EXTI_Init+0x19a>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	685b      	ldr	r3, [r3, #4]
 80102a0:	4618      	mov	r0, r3
 80102a2:	f7ff ff3b 	bl	801011c <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	685b      	ldr	r3, [r3, #4]
 80102aa:	4618      	mov	r0, r3
 80102ac:	f7ff fec4 	bl	8010038 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 80102b0:	e031      	b.n	8010316 <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	685b      	ldr	r3, [r3, #4]
 80102b6:	4618      	mov	r0, r3
 80102b8:	f7ff fee4 	bl	8010084 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	685b      	ldr	r3, [r3, #4]
 80102c0:	4618      	mov	r0, r3
 80102c2:	f7ff ff05 	bl	80100d0 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 80102c6:	e026      	b.n	8010316 <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	685b      	ldr	r3, [r3, #4]
 80102cc:	4618      	mov	r0, r3
 80102ce:	f7ff feb3 	bl	8010038 <LL_EXTI_EnableRisingTrig_32_63>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	685b      	ldr	r3, [r3, #4]
 80102d6:	4618      	mov	r0, r3
 80102d8:	f7ff fefa 	bl	80100d0 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 80102dc:	e01b      	b.n	8010316 <LL_EXTI_Init+0x1d2>
          default:
            status |= 0x05u;
 80102de:	68fb      	ldr	r3, [r7, #12]
 80102e0:	f043 0305 	orr.w	r3, r3, #5
 80102e4:	60fb      	str	r3, [r7, #12]
            break;
 80102e6:	bf00      	nop
 80102e8:	e015      	b.n	8010316 <LL_EXTI_Init+0x1d2>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure IT EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	681b      	ldr	r3, [r3, #0]
 80102ee:	4618      	mov	r0, r3
 80102f0:	f7ff fe1c 	bl	800ff2c <LL_EXTI_DisableIT_0_31>
    /* De-configure Event EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	681b      	ldr	r3, [r3, #0]
 80102f8:	4618      	mov	r0, r3
 80102fa:	f7ff fe63 	bl	800ffc4 <LL_EXTI_DisableEvent_0_31>
    /* De-configure IT EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	685b      	ldr	r3, [r3, #4]
 8010302:	4618      	mov	r0, r3
 8010304:	f7ff fe26 	bl	800ff54 <LL_EXTI_DisableIT_32_63>
    /* De-configure Event EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	685b      	ldr	r3, [r3, #4]
 801030c:	4618      	mov	r0, r3
 801030e:	f7ff fe6d 	bl	800ffec <LL_EXTI_DisableEvent_32_63>
 8010312:	e000      	b.n	8010316 <LL_EXTI_Init+0x1d2>
      }
 8010314:	bf00      	nop
  }

  return status;
 8010316:	68fb      	ldr	r3, [r7, #12]
}
 8010318:	4618      	mov	r0, r3
 801031a:	3710      	adds	r7, #16
 801031c:	46bd      	mov	sp, r7
 801031e:	bd80      	pop	{r7, pc}

08010320 <LL_GPIO_SetPinMode>:
{
 8010320:	b480      	push	{r7}
 8010322:	b089      	sub	sp, #36	; 0x24
 8010324:	af00      	add	r7, sp, #0
 8010326:	60f8      	str	r0, [r7, #12]
 8010328:	60b9      	str	r1, [r7, #8]
 801032a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 801032c:	68fb      	ldr	r3, [r7, #12]
 801032e:	681a      	ldr	r2, [r3, #0]
 8010330:	68bb      	ldr	r3, [r7, #8]
 8010332:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010334:	697b      	ldr	r3, [r7, #20]
 8010336:	fa93 f3a3 	rbit	r3, r3
 801033a:	613b      	str	r3, [r7, #16]
  return result;
 801033c:	693b      	ldr	r3, [r7, #16]
 801033e:	fab3 f383 	clz	r3, r3
 8010342:	b2db      	uxtb	r3, r3
 8010344:	005b      	lsls	r3, r3, #1
 8010346:	2103      	movs	r1, #3
 8010348:	fa01 f303 	lsl.w	r3, r1, r3
 801034c:	43db      	mvns	r3, r3
 801034e:	401a      	ands	r2, r3
 8010350:	68bb      	ldr	r3, [r7, #8]
 8010352:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010354:	69fb      	ldr	r3, [r7, #28]
 8010356:	fa93 f3a3 	rbit	r3, r3
 801035a:	61bb      	str	r3, [r7, #24]
  return result;
 801035c:	69bb      	ldr	r3, [r7, #24]
 801035e:	fab3 f383 	clz	r3, r3
 8010362:	b2db      	uxtb	r3, r3
 8010364:	005b      	lsls	r3, r3, #1
 8010366:	6879      	ldr	r1, [r7, #4]
 8010368:	fa01 f303 	lsl.w	r3, r1, r3
 801036c:	431a      	orrs	r2, r3
 801036e:	68fb      	ldr	r3, [r7, #12]
 8010370:	601a      	str	r2, [r3, #0]
}
 8010372:	bf00      	nop
 8010374:	3724      	adds	r7, #36	; 0x24
 8010376:	46bd      	mov	sp, r7
 8010378:	f85d 7b04 	ldr.w	r7, [sp], #4
 801037c:	4770      	bx	lr

0801037e <LL_GPIO_SetPinOutputType>:
{
 801037e:	b480      	push	{r7}
 8010380:	b085      	sub	sp, #20
 8010382:	af00      	add	r7, sp, #0
 8010384:	60f8      	str	r0, [r7, #12]
 8010386:	60b9      	str	r1, [r7, #8]
 8010388:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 801038a:	68fb      	ldr	r3, [r7, #12]
 801038c:	685a      	ldr	r2, [r3, #4]
 801038e:	68bb      	ldr	r3, [r7, #8]
 8010390:	43db      	mvns	r3, r3
 8010392:	401a      	ands	r2, r3
 8010394:	68bb      	ldr	r3, [r7, #8]
 8010396:	6879      	ldr	r1, [r7, #4]
 8010398:	fb01 f303 	mul.w	r3, r1, r3
 801039c:	431a      	orrs	r2, r3
 801039e:	68fb      	ldr	r3, [r7, #12]
 80103a0:	605a      	str	r2, [r3, #4]
}
 80103a2:	bf00      	nop
 80103a4:	3714      	adds	r7, #20
 80103a6:	46bd      	mov	sp, r7
 80103a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ac:	4770      	bx	lr

080103ae <LL_GPIO_SetPinSpeed>:
{
 80103ae:	b480      	push	{r7}
 80103b0:	b089      	sub	sp, #36	; 0x24
 80103b2:	af00      	add	r7, sp, #0
 80103b4:	60f8      	str	r0, [r7, #12]
 80103b6:	60b9      	str	r1, [r7, #8]
 80103b8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	689a      	ldr	r2, [r3, #8]
 80103be:	68bb      	ldr	r3, [r7, #8]
 80103c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80103c2:	697b      	ldr	r3, [r7, #20]
 80103c4:	fa93 f3a3 	rbit	r3, r3
 80103c8:	613b      	str	r3, [r7, #16]
  return result;
 80103ca:	693b      	ldr	r3, [r7, #16]
 80103cc:	fab3 f383 	clz	r3, r3
 80103d0:	b2db      	uxtb	r3, r3
 80103d2:	005b      	lsls	r3, r3, #1
 80103d4:	2103      	movs	r1, #3
 80103d6:	fa01 f303 	lsl.w	r3, r1, r3
 80103da:	43db      	mvns	r3, r3
 80103dc:	401a      	ands	r2, r3
 80103de:	68bb      	ldr	r3, [r7, #8]
 80103e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80103e2:	69fb      	ldr	r3, [r7, #28]
 80103e4:	fa93 f3a3 	rbit	r3, r3
 80103e8:	61bb      	str	r3, [r7, #24]
  return result;
 80103ea:	69bb      	ldr	r3, [r7, #24]
 80103ec:	fab3 f383 	clz	r3, r3
 80103f0:	b2db      	uxtb	r3, r3
 80103f2:	005b      	lsls	r3, r3, #1
 80103f4:	6879      	ldr	r1, [r7, #4]
 80103f6:	fa01 f303 	lsl.w	r3, r1, r3
 80103fa:	431a      	orrs	r2, r3
 80103fc:	68fb      	ldr	r3, [r7, #12]
 80103fe:	609a      	str	r2, [r3, #8]
}
 8010400:	bf00      	nop
 8010402:	3724      	adds	r7, #36	; 0x24
 8010404:	46bd      	mov	sp, r7
 8010406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801040a:	4770      	bx	lr

0801040c <LL_GPIO_SetPinPull>:
{
 801040c:	b480      	push	{r7}
 801040e:	b089      	sub	sp, #36	; 0x24
 8010410:	af00      	add	r7, sp, #0
 8010412:	60f8      	str	r0, [r7, #12]
 8010414:	60b9      	str	r1, [r7, #8]
 8010416:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8010418:	68fb      	ldr	r3, [r7, #12]
 801041a:	68da      	ldr	r2, [r3, #12]
 801041c:	68bb      	ldr	r3, [r7, #8]
 801041e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010420:	697b      	ldr	r3, [r7, #20]
 8010422:	fa93 f3a3 	rbit	r3, r3
 8010426:	613b      	str	r3, [r7, #16]
  return result;
 8010428:	693b      	ldr	r3, [r7, #16]
 801042a:	fab3 f383 	clz	r3, r3
 801042e:	b2db      	uxtb	r3, r3
 8010430:	005b      	lsls	r3, r3, #1
 8010432:	2103      	movs	r1, #3
 8010434:	fa01 f303 	lsl.w	r3, r1, r3
 8010438:	43db      	mvns	r3, r3
 801043a:	401a      	ands	r2, r3
 801043c:	68bb      	ldr	r3, [r7, #8]
 801043e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010440:	69fb      	ldr	r3, [r7, #28]
 8010442:	fa93 f3a3 	rbit	r3, r3
 8010446:	61bb      	str	r3, [r7, #24]
  return result;
 8010448:	69bb      	ldr	r3, [r7, #24]
 801044a:	fab3 f383 	clz	r3, r3
 801044e:	b2db      	uxtb	r3, r3
 8010450:	005b      	lsls	r3, r3, #1
 8010452:	6879      	ldr	r1, [r7, #4]
 8010454:	fa01 f303 	lsl.w	r3, r1, r3
 8010458:	431a      	orrs	r2, r3
 801045a:	68fb      	ldr	r3, [r7, #12]
 801045c:	60da      	str	r2, [r3, #12]
}
 801045e:	bf00      	nop
 8010460:	3724      	adds	r7, #36	; 0x24
 8010462:	46bd      	mov	sp, r7
 8010464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010468:	4770      	bx	lr

0801046a <LL_GPIO_SetAFPin_0_7>:
{
 801046a:	b480      	push	{r7}
 801046c:	b089      	sub	sp, #36	; 0x24
 801046e:	af00      	add	r7, sp, #0
 8010470:	60f8      	str	r0, [r7, #12]
 8010472:	60b9      	str	r1, [r7, #8]
 8010474:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8010476:	68fb      	ldr	r3, [r7, #12]
 8010478:	6a1a      	ldr	r2, [r3, #32]
 801047a:	68bb      	ldr	r3, [r7, #8]
 801047c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801047e:	697b      	ldr	r3, [r7, #20]
 8010480:	fa93 f3a3 	rbit	r3, r3
 8010484:	613b      	str	r3, [r7, #16]
  return result;
 8010486:	693b      	ldr	r3, [r7, #16]
 8010488:	fab3 f383 	clz	r3, r3
 801048c:	b2db      	uxtb	r3, r3
 801048e:	009b      	lsls	r3, r3, #2
 8010490:	210f      	movs	r1, #15
 8010492:	fa01 f303 	lsl.w	r3, r1, r3
 8010496:	43db      	mvns	r3, r3
 8010498:	401a      	ands	r2, r3
 801049a:	68bb      	ldr	r3, [r7, #8]
 801049c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801049e:	69fb      	ldr	r3, [r7, #28]
 80104a0:	fa93 f3a3 	rbit	r3, r3
 80104a4:	61bb      	str	r3, [r7, #24]
  return result;
 80104a6:	69bb      	ldr	r3, [r7, #24]
 80104a8:	fab3 f383 	clz	r3, r3
 80104ac:	b2db      	uxtb	r3, r3
 80104ae:	009b      	lsls	r3, r3, #2
 80104b0:	6879      	ldr	r1, [r7, #4]
 80104b2:	fa01 f303 	lsl.w	r3, r1, r3
 80104b6:	431a      	orrs	r2, r3
 80104b8:	68fb      	ldr	r3, [r7, #12]
 80104ba:	621a      	str	r2, [r3, #32]
}
 80104bc:	bf00      	nop
 80104be:	3724      	adds	r7, #36	; 0x24
 80104c0:	46bd      	mov	sp, r7
 80104c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104c6:	4770      	bx	lr

080104c8 <LL_GPIO_SetAFPin_8_15>:
{
 80104c8:	b480      	push	{r7}
 80104ca:	b089      	sub	sp, #36	; 0x24
 80104cc:	af00      	add	r7, sp, #0
 80104ce:	60f8      	str	r0, [r7, #12]
 80104d0:	60b9      	str	r1, [r7, #8]
 80104d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80104d4:	68fb      	ldr	r3, [r7, #12]
 80104d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80104d8:	68bb      	ldr	r3, [r7, #8]
 80104da:	0a1b      	lsrs	r3, r3, #8
 80104dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80104de:	697b      	ldr	r3, [r7, #20]
 80104e0:	fa93 f3a3 	rbit	r3, r3
 80104e4:	613b      	str	r3, [r7, #16]
  return result;
 80104e6:	693b      	ldr	r3, [r7, #16]
 80104e8:	fab3 f383 	clz	r3, r3
 80104ec:	b2db      	uxtb	r3, r3
 80104ee:	009b      	lsls	r3, r3, #2
 80104f0:	210f      	movs	r1, #15
 80104f2:	fa01 f303 	lsl.w	r3, r1, r3
 80104f6:	43db      	mvns	r3, r3
 80104f8:	401a      	ands	r2, r3
 80104fa:	68bb      	ldr	r3, [r7, #8]
 80104fc:	0a1b      	lsrs	r3, r3, #8
 80104fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010500:	69fb      	ldr	r3, [r7, #28]
 8010502:	fa93 f3a3 	rbit	r3, r3
 8010506:	61bb      	str	r3, [r7, #24]
  return result;
 8010508:	69bb      	ldr	r3, [r7, #24]
 801050a:	fab3 f383 	clz	r3, r3
 801050e:	b2db      	uxtb	r3, r3
 8010510:	009b      	lsls	r3, r3, #2
 8010512:	6879      	ldr	r1, [r7, #4]
 8010514:	fa01 f303 	lsl.w	r3, r1, r3
 8010518:	431a      	orrs	r2, r3
 801051a:	68fb      	ldr	r3, [r7, #12]
 801051c:	625a      	str	r2, [r3, #36]	; 0x24
}
 801051e:	bf00      	nop
 8010520:	3724      	adds	r7, #36	; 0x24
 8010522:	46bd      	mov	sp, r7
 8010524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010528:	4770      	bx	lr

0801052a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 801052a:	b580      	push	{r7, lr}
 801052c:	b086      	sub	sp, #24
 801052e:	af00      	add	r7, sp, #0
 8010530:	6078      	str	r0, [r7, #4]
 8010532:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8010534:	683b      	ldr	r3, [r7, #0]
 8010536:	681b      	ldr	r3, [r3, #0]
 8010538:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801053a:	68fb      	ldr	r3, [r7, #12]
 801053c:	fa93 f3a3 	rbit	r3, r3
 8010540:	60bb      	str	r3, [r7, #8]
  return result;
 8010542:	68bb      	ldr	r3, [r7, #8]
 8010544:	fab3 f383 	clz	r3, r3
 8010548:	b2db      	uxtb	r3, r3
 801054a:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 801054c:	e040      	b.n	80105d0 <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 801054e:	683b      	ldr	r3, [r7, #0]
 8010550:	681a      	ldr	r2, [r3, #0]
 8010552:	2101      	movs	r1, #1
 8010554:	697b      	ldr	r3, [r7, #20]
 8010556:	fa01 f303 	lsl.w	r3, r1, r3
 801055a:	4013      	ands	r3, r2
 801055c:	613b      	str	r3, [r7, #16]

    if (currentpin != 0x00u)
 801055e:	693b      	ldr	r3, [r7, #16]
 8010560:	2b00      	cmp	r3, #0
 8010562:	d032      	beq.n	80105ca <LL_GPIO_Init+0xa0>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8010564:	683b      	ldr	r3, [r7, #0]
 8010566:	685b      	ldr	r3, [r3, #4]
 8010568:	461a      	mov	r2, r3
 801056a:	6939      	ldr	r1, [r7, #16]
 801056c:	6878      	ldr	r0, [r7, #4]
 801056e:	f7ff fed7 	bl	8010320 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8010572:	683b      	ldr	r3, [r7, #0]
 8010574:	685b      	ldr	r3, [r3, #4]
 8010576:	2b01      	cmp	r3, #1
 8010578:	d003      	beq.n	8010582 <LL_GPIO_Init+0x58>
 801057a:	683b      	ldr	r3, [r7, #0]
 801057c:	685b      	ldr	r3, [r3, #4]
 801057e:	2b02      	cmp	r3, #2
 8010580:	d106      	bne.n	8010590 <LL_GPIO_Init+0x66>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8010582:	683b      	ldr	r3, [r7, #0]
 8010584:	689b      	ldr	r3, [r3, #8]
 8010586:	461a      	mov	r2, r3
 8010588:	6939      	ldr	r1, [r7, #16]
 801058a:	6878      	ldr	r0, [r7, #4]
 801058c:	f7ff ff0f 	bl	80103ae <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8010590:	683b      	ldr	r3, [r7, #0]
 8010592:	691b      	ldr	r3, [r3, #16]
 8010594:	461a      	mov	r2, r3
 8010596:	6939      	ldr	r1, [r7, #16]
 8010598:	6878      	ldr	r0, [r7, #4]
 801059a:	f7ff ff37 	bl	801040c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 801059e:	683b      	ldr	r3, [r7, #0]
 80105a0:	685b      	ldr	r3, [r3, #4]
 80105a2:	2b02      	cmp	r3, #2
 80105a4:	d111      	bne.n	80105ca <LL_GPIO_Init+0xa0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80105a6:	693b      	ldr	r3, [r7, #16]
 80105a8:	2bff      	cmp	r3, #255	; 0xff
 80105aa:	d807      	bhi.n	80105bc <LL_GPIO_Init+0x92>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80105ac:	683b      	ldr	r3, [r7, #0]
 80105ae:	695b      	ldr	r3, [r3, #20]
 80105b0:	461a      	mov	r2, r3
 80105b2:	6939      	ldr	r1, [r7, #16]
 80105b4:	6878      	ldr	r0, [r7, #4]
 80105b6:	f7ff ff58 	bl	801046a <LL_GPIO_SetAFPin_0_7>
 80105ba:	e006      	b.n	80105ca <LL_GPIO_Init+0xa0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80105bc:	683b      	ldr	r3, [r7, #0]
 80105be:	695b      	ldr	r3, [r3, #20]
 80105c0:	461a      	mov	r2, r3
 80105c2:	6939      	ldr	r1, [r7, #16]
 80105c4:	6878      	ldr	r0, [r7, #4]
 80105c6:	f7ff ff7f 	bl	80104c8 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 80105ca:	697b      	ldr	r3, [r7, #20]
 80105cc:	3301      	adds	r3, #1
 80105ce:	617b      	str	r3, [r7, #20]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80105d0:	683b      	ldr	r3, [r7, #0]
 80105d2:	681a      	ldr	r2, [r3, #0]
 80105d4:	697b      	ldr	r3, [r7, #20]
 80105d6:	fa22 f303 	lsr.w	r3, r2, r3
 80105da:	2b00      	cmp	r3, #0
 80105dc:	d1b7      	bne.n	801054e <LL_GPIO_Init+0x24>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80105de:	683b      	ldr	r3, [r7, #0]
 80105e0:	685b      	ldr	r3, [r3, #4]
 80105e2:	2b01      	cmp	r3, #1
 80105e4:	d003      	beq.n	80105ee <LL_GPIO_Init+0xc4>
 80105e6:	683b      	ldr	r3, [r7, #0]
 80105e8:	685b      	ldr	r3, [r3, #4]
 80105ea:	2b02      	cmp	r3, #2
 80105ec:	d107      	bne.n	80105fe <LL_GPIO_Init+0xd4>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80105ee:	683b      	ldr	r3, [r7, #0]
 80105f0:	6819      	ldr	r1, [r3, #0]
 80105f2:	683b      	ldr	r3, [r7, #0]
 80105f4:	68db      	ldr	r3, [r3, #12]
 80105f6:	461a      	mov	r2, r3
 80105f8:	6878      	ldr	r0, [r7, #4]
 80105fa:	f7ff fec0 	bl	801037e <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 80105fe:	2300      	movs	r3, #0
}
 8010600:	4618      	mov	r0, r3
 8010602:	3718      	adds	r7, #24
 8010604:	46bd      	mov	sp, r7
 8010606:	bd80      	pop	{r7, pc}

08010608 <ILI9341_Draw_Wave>:

 extern uint16_t BURST_MAX_SIZE;


void ILI9341_Draw_Wave(uint16_t x, uint16_t y, uint8_t weight, uint16_t colour, uint8_t scale, uint32_t* data_table, uint16_t data_table_size)
{
 8010608:	b590      	push	{r4, r7, lr}
 801060a:	b085      	sub	sp, #20
 801060c:	af00      	add	r7, sp, #0
 801060e:	4604      	mov	r4, r0
 8010610:	4608      	mov	r0, r1
 8010612:	4611      	mov	r1, r2
 8010614:	461a      	mov	r2, r3
 8010616:	4623      	mov	r3, r4
 8010618:	80fb      	strh	r3, [r7, #6]
 801061a:	4603      	mov	r3, r0
 801061c:	80bb      	strh	r3, [r7, #4]
 801061e:	460b      	mov	r3, r1
 8010620:	70fb      	strb	r3, [r7, #3]
 8010622:	4613      	mov	r3, r2
 8010624:	803b      	strh	r3, [r7, #0]
	for(int w = 0; w < weight; w++ )
 8010626:	2300      	movs	r3, #0
 8010628:	60fb      	str	r3, [r7, #12]
 801062a:	e026      	b.n	801067a <ILI9341_Draw_Wave+0x72>
	{
		for(int i = 0; i < data_table_size; i++)
 801062c:	2300      	movs	r3, #0
 801062e:	60bb      	str	r3, [r7, #8]
 8010630:	e01c      	b.n	801066c <ILI9341_Draw_Wave+0x64>
		{
			ILI9341_Draw_Pixel(	x + i,	(y + data_table[i] / scale) + w, colour);
 8010632:	68bb      	ldr	r3, [r7, #8]
 8010634:	b29a      	uxth	r2, r3
 8010636:	88fb      	ldrh	r3, [r7, #6]
 8010638:	4413      	add	r3, r2
 801063a:	b298      	uxth	r0, r3
 801063c:	68bb      	ldr	r3, [r7, #8]
 801063e:	009b      	lsls	r3, r3, #2
 8010640:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010642:	4413      	add	r3, r2
 8010644:	681a      	ldr	r2, [r3, #0]
 8010646:	f897 3020 	ldrb.w	r3, [r7, #32]
 801064a:	fbb2 f3f3 	udiv	r3, r2, r3
 801064e:	b29a      	uxth	r2, r3
 8010650:	88bb      	ldrh	r3, [r7, #4]
 8010652:	4413      	add	r3, r2
 8010654:	b29a      	uxth	r2, r3
 8010656:	68fb      	ldr	r3, [r7, #12]
 8010658:	b29b      	uxth	r3, r3
 801065a:	4413      	add	r3, r2
 801065c:	b29b      	uxth	r3, r3
 801065e:	883a      	ldrh	r2, [r7, #0]
 8010660:	4619      	mov	r1, r3
 8010662:	f000 fc1f 	bl	8010ea4 <ILI9341_Draw_Pixel>
		for(int i = 0; i < data_table_size; i++)
 8010666:	68bb      	ldr	r3, [r7, #8]
 8010668:	3301      	adds	r3, #1
 801066a:	60bb      	str	r3, [r7, #8]
 801066c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801066e:	68ba      	ldr	r2, [r7, #8]
 8010670:	429a      	cmp	r2, r3
 8010672:	dbde      	blt.n	8010632 <ILI9341_Draw_Wave+0x2a>
	for(int w = 0; w < weight; w++ )
 8010674:	68fb      	ldr	r3, [r7, #12]
 8010676:	3301      	adds	r3, #1
 8010678:	60fb      	str	r3, [r7, #12]
 801067a:	78fb      	ldrb	r3, [r7, #3]
 801067c:	68fa      	ldr	r2, [r7, #12]
 801067e:	429a      	cmp	r2, r3
 8010680:	dbd4      	blt.n	801062c <ILI9341_Draw_Wave+0x24>

		}
	}

}
 8010682:	bf00      	nop
 8010684:	3714      	adds	r7, #20
 8010686:	46bd      	mov	sp, r7
 8010688:	bd90      	pop	{r4, r7, pc}

0801068a <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>:
 *
 *
 *
 */
void ILI9341_Draw_Bordered_Filled_Rectangle_Coord(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t inner_colour, uint8_t border_weight, uint16_t border_colour)
{
 801068a:	b590      	push	{r4, r7, lr}
 801068c:	b087      	sub	sp, #28
 801068e:	af02      	add	r7, sp, #8
 8010690:	4604      	mov	r4, r0
 8010692:	4608      	mov	r0, r1
 8010694:	4611      	mov	r1, r2
 8010696:	461a      	mov	r2, r3
 8010698:	4623      	mov	r3, r4
 801069a:	80fb      	strh	r3, [r7, #6]
 801069c:	4603      	mov	r3, r0
 801069e:	80bb      	strh	r3, [r7, #4]
 80106a0:	460b      	mov	r3, r1
 80106a2:	807b      	strh	r3, [r7, #2]
 80106a4:	4613      	mov	r3, r2
 80106a6:	803b      	strh	r3, [r7, #0]

	// Draw inwards (and shorter) for each level of border weight
	for(uint8_t b = 0; ; b++)
 80106a8:	2300      	movs	r3, #0
 80106aa:	73fb      	strb	r3, [r7, #15]
	{


		if(b > border_weight)
 80106ac:	7bfa      	ldrb	r2, [r7, #15]
 80106ae:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80106b2:	429a      	cmp	r2, r3
 80106b4:	d939      	bls.n	801072a <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0xa0>
		{

			// stop before the inner space reaches zero! (hard fault)
			if( ((y + b) == ((y + h) - b)) || ((x + b) == ((x + w) - b)) )
 80106b6:	88ba      	ldrh	r2, [r7, #4]
 80106b8:	7bfb      	ldrb	r3, [r7, #15]
 80106ba:	441a      	add	r2, r3
 80106bc:	88b9      	ldrh	r1, [r7, #4]
 80106be:	883b      	ldrh	r3, [r7, #0]
 80106c0:	4419      	add	r1, r3
 80106c2:	7bfb      	ldrb	r3, [r7, #15]
 80106c4:	1acb      	subs	r3, r1, r3
 80106c6:	429a      	cmp	r2, r3
 80106c8:	f000 8089 	beq.w	80107de <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x154>
 80106cc:	88fa      	ldrh	r2, [r7, #6]
 80106ce:	7bfb      	ldrb	r3, [r7, #15]
 80106d0:	441a      	add	r2, r3
 80106d2:	88f9      	ldrh	r1, [r7, #6]
 80106d4:	887b      	ldrh	r3, [r7, #2]
 80106d6:	4419      	add	r1, r3
 80106d8:	7bfb      	ldrb	r3, [r7, #15]
 80106da:	1acb      	subs	r3, r1, r3
 80106dc:	429a      	cmp	r2, r3
 80106de:	d07e      	beq.n	80107de <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x154>
				// add final line?
				goto finish;
			}
			else
			{
				ILI9341_Draw_Rectangle(x + b, y + b, (w - (2*b)) + 1, (h - (2*b)) + 1, inner_colour, AREA_CHUNK);
 80106e0:	7bfb      	ldrb	r3, [r7, #15]
 80106e2:	b29a      	uxth	r2, r3
 80106e4:	88fb      	ldrh	r3, [r7, #6]
 80106e6:	4413      	add	r3, r2
 80106e8:	b298      	uxth	r0, r3
 80106ea:	7bfb      	ldrb	r3, [r7, #15]
 80106ec:	b29a      	uxth	r2, r3
 80106ee:	88bb      	ldrh	r3, [r7, #4]
 80106f0:	4413      	add	r3, r2
 80106f2:	b299      	uxth	r1, r3
 80106f4:	7bfb      	ldrb	r3, [r7, #15]
 80106f6:	b29b      	uxth	r3, r3
 80106f8:	005b      	lsls	r3, r3, #1
 80106fa:	b29b      	uxth	r3, r3
 80106fc:	887a      	ldrh	r2, [r7, #2]
 80106fe:	1ad3      	subs	r3, r2, r3
 8010700:	b29b      	uxth	r3, r3
 8010702:	3301      	adds	r3, #1
 8010704:	b29c      	uxth	r4, r3
 8010706:	7bfb      	ldrb	r3, [r7, #15]
 8010708:	b29b      	uxth	r3, r3
 801070a:	005b      	lsls	r3, r3, #1
 801070c:	b29b      	uxth	r3, r3
 801070e:	883a      	ldrh	r2, [r7, #0]
 8010710:	1ad3      	subs	r3, r2, r3
 8010712:	b29b      	uxth	r3, r3
 8010714:	3301      	adds	r3, #1
 8010716:	b29a      	uxth	r2, r3
 8010718:	2304      	movs	r3, #4
 801071a:	9301      	str	r3, [sp, #4]
 801071c:	8c3b      	ldrh	r3, [r7, #32]
 801071e:	9300      	str	r3, [sp, #0]
 8010720:	4613      	mov	r3, r2
 8010722:	4622      	mov	r2, r4
 8010724:	f000 fd18 	bl	8011158 <ILI9341_Draw_Rectangle>
				goto finish;
 8010728:	e05a      	b.n	80107e0 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x156>
			}
		}

		// Horizontal line - Top
		ILI9341_Draw_Horizontal_Line(	x + b,
 801072a:	7bfb      	ldrb	r3, [r7, #15]
 801072c:	b29a      	uxth	r2, r3
 801072e:	88fb      	ldrh	r3, [r7, #6]
 8010730:	4413      	add	r3, r2
 8010732:	b298      	uxth	r0, r3
 8010734:	7bfb      	ldrb	r3, [r7, #15]
 8010736:	b29a      	uxth	r2, r3
 8010738:	88bb      	ldrh	r3, [r7, #4]
 801073a:	4413      	add	r3, r2
 801073c:	b299      	uxth	r1, r3
										y + b,
										(w - b)+1,
 801073e:	7bfb      	ldrb	r3, [r7, #15]
 8010740:	b29b      	uxth	r3, r3
 8010742:	887a      	ldrh	r2, [r7, #2]
 8010744:	1ad3      	subs	r3, r2, r3
 8010746:	b29b      	uxth	r3, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 8010748:	3301      	adds	r3, #1
 801074a:	b29a      	uxth	r2, r3
 801074c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801074e:	f000 fa6b 	bl	8010c28 <ILI9341_Draw_Horizontal_Line>
										border_colour);
		// Horizontal line - Bottom
		ILI9341_Draw_Horizontal_Line(	x + b,
 8010752:	7bfb      	ldrb	r3, [r7, #15]
 8010754:	b29a      	uxth	r2, r3
 8010756:	88fb      	ldrh	r3, [r7, #6]
 8010758:	4413      	add	r3, r2
 801075a:	b298      	uxth	r0, r3
										(y + h) - b,
 801075c:	88ba      	ldrh	r2, [r7, #4]
 801075e:	883b      	ldrh	r3, [r7, #0]
 8010760:	4413      	add	r3, r2
 8010762:	b29a      	uxth	r2, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 8010764:	7bfb      	ldrb	r3, [r7, #15]
 8010766:	b29b      	uxth	r3, r3
 8010768:	1ad3      	subs	r3, r2, r3
 801076a:	b299      	uxth	r1, r3
										(w - b)+1,
 801076c:	7bfb      	ldrb	r3, [r7, #15]
 801076e:	b29b      	uxth	r3, r3
 8010770:	887a      	ldrh	r2, [r7, #2]
 8010772:	1ad3      	subs	r3, r2, r3
 8010774:	b29b      	uxth	r3, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 8010776:	3301      	adds	r3, #1
 8010778:	b29a      	uxth	r2, r3
 801077a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801077c:	f000 fa54 	bl	8010c28 <ILI9341_Draw_Horizontal_Line>
										border_colour);


		// Vertical line - left
		ILI9341_Draw_Vertical_Line(		x + b,
 8010780:	7bfb      	ldrb	r3, [r7, #15]
 8010782:	b29a      	uxth	r2, r3
 8010784:	88fb      	ldrh	r3, [r7, #6]
 8010786:	4413      	add	r3, r2
 8010788:	b298      	uxth	r0, r3
 801078a:	7bfb      	ldrb	r3, [r7, #15]
 801078c:	b29a      	uxth	r2, r3
 801078e:	88bb      	ldrh	r3, [r7, #4]
 8010790:	4413      	add	r3, r2
 8010792:	b299      	uxth	r1, r3
 8010794:	7bfb      	ldrb	r3, [r7, #15]
 8010796:	b29b      	uxth	r3, r3
 8010798:	005b      	lsls	r3, r3, #1
 801079a:	b29b      	uxth	r3, r3
 801079c:	883a      	ldrh	r2, [r7, #0]
 801079e:	1ad3      	subs	r3, r2, r3
 80107a0:	b29a      	uxth	r2, r3
 80107a2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80107a4:	f000 faa4 	bl	8010cf0 <ILI9341_Draw_Vertical_Line>
										y + b,
										h - (2*b),
										border_colour);
		// Vertical line - right
		ILI9341_Draw_Vertical_Line(		((x + w)) - (b),
 80107a8:	88fa      	ldrh	r2, [r7, #6]
 80107aa:	887b      	ldrh	r3, [r7, #2]
 80107ac:	4413      	add	r3, r2
 80107ae:	b29a      	uxth	r2, r3
 80107b0:	7bfb      	ldrb	r3, [r7, #15]
 80107b2:	b29b      	uxth	r3, r3
 80107b4:	1ad3      	subs	r3, r2, r3
 80107b6:	b298      	uxth	r0, r3
 80107b8:	7bfb      	ldrb	r3, [r7, #15]
 80107ba:	b29a      	uxth	r2, r3
 80107bc:	88bb      	ldrh	r3, [r7, #4]
 80107be:	4413      	add	r3, r2
 80107c0:	b299      	uxth	r1, r3
 80107c2:	7bfb      	ldrb	r3, [r7, #15]
 80107c4:	b29b      	uxth	r3, r3
 80107c6:	005b      	lsls	r3, r3, #1
 80107c8:	b29b      	uxth	r3, r3
 80107ca:	883a      	ldrh	r2, [r7, #0]
 80107cc:	1ad3      	subs	r3, r2, r3
 80107ce:	b29a      	uxth	r2, r3
 80107d0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80107d2:	f000 fa8d 	bl	8010cf0 <ILI9341_Draw_Vertical_Line>
	for(uint8_t b = 0; ; b++)
 80107d6:	7bfb      	ldrb	r3, [r7, #15]
 80107d8:	3301      	adds	r3, #1
 80107da:	73fb      	strb	r3, [r7, #15]
		if(b > border_weight)
 80107dc:	e766      	b.n	80106ac <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x22>
										h - (2*b),
										border_colour);

	}

	finish:
 80107de:	bf00      	nop
	// done
	return;
 80107e0:	bf00      	nop
}
 80107e2:	3714      	adds	r7, #20
 80107e4:	46bd      	mov	sp, r7
 80107e6:	bd90      	pop	{r4, r7, pc}

080107e8 <ILI9341_Draw_Char>:
 *	@retval None
 *
 */

void ILI9341_Draw_Char(char character, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 80107e8:	b590      	push	{r4, r7, lr}
 80107ea:	b089      	sub	sp, #36	; 0x24
 80107ec:	af02      	add	r7, sp, #8
 80107ee:	4604      	mov	r4, r0
 80107f0:	4608      	mov	r0, r1
 80107f2:	4611      	mov	r1, r2
 80107f4:	461a      	mov	r2, r3
 80107f6:	4623      	mov	r3, r4
 80107f8:	71fb      	strb	r3, [r7, #7]
 80107fa:	4603      	mov	r3, r0
 80107fc:	80bb      	strh	r3, [r7, #4]
 80107fe:	460b      	mov	r3, r1
 8010800:	807b      	strh	r3, [r7, #2]
 8010802:	4613      	mov	r3, r2
 8010804:	803b      	strh	r3, [r7, #0]
    uint8_t 	i,j;
		



	function_char = character;
 8010806:	79fb      	ldrb	r3, [r7, #7]
 8010808:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ')
 801080a:	7dfb      	ldrb	r3, [r7, #23]
 801080c:	2b1f      	cmp	r3, #31
 801080e:	d802      	bhi.n	8010816 <ILI9341_Draw_Char+0x2e>
    {
        character = 0;
 8010810:	2300      	movs	r3, #0
 8010812:	71fb      	strb	r3, [r7, #7]
 8010814:	e002      	b.n	801081c <ILI9341_Draw_Char+0x34>
    }
    else
    {
    	function_char -= 32;
 8010816:	7dfb      	ldrb	r3, [r7, #23]
 8010818:	3b20      	subs	r3, #32
 801081a:	75fb      	strb	r3, [r7, #23]
	}
   	
	char temp[CHAR_WIDTH];

	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 801081c:	2300      	movs	r3, #0
 801081e:	753b      	strb	r3, [r7, #20]
 8010820:	e012      	b.n	8010848 <ILI9341_Draw_Char+0x60>
	{
		temp[k] = font[function_char][k];
 8010822:	7dfa      	ldrb	r2, [r7, #23]
 8010824:	7d38      	ldrb	r0, [r7, #20]
 8010826:	7d39      	ldrb	r1, [r7, #20]
 8010828:	4c48      	ldr	r4, [pc, #288]	; (801094c <ILI9341_Draw_Char+0x164>)
 801082a:	4613      	mov	r3, r2
 801082c:	005b      	lsls	r3, r3, #1
 801082e:	4413      	add	r3, r2
 8010830:	005b      	lsls	r3, r3, #1
 8010832:	4423      	add	r3, r4
 8010834:	4403      	add	r3, r0
 8010836:	781a      	ldrb	r2, [r3, #0]
 8010838:	f107 0318 	add.w	r3, r7, #24
 801083c:	440b      	add	r3, r1
 801083e:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8010842:	7d3b      	ldrb	r3, [r7, #20]
 8010844:	3301      	adds	r3, #1
 8010846:	753b      	strb	r3, [r7, #20]
 8010848:	7d3b      	ldrb	r3, [r7, #20]
 801084a:	2b05      	cmp	r3, #5
 801084c:	d9e9      	bls.n	8010822 <ILI9341_Draw_Char+0x3a>
	}
		
    // Draw pixels
	//ILI9341_Draw_Rectangle(x, Y, CHAR_WIDTH*size, CHAR_HEIGHT*size, bgcolour);
    for (j=0; j<CHAR_WIDTH; j++)
 801084e:	2300      	movs	r3, #0
 8010850:	757b      	strb	r3, [r7, #21]
 8010852:	e074      	b.n	801093e <ILI9341_Draw_Char+0x156>
    {
        for (i=0; i<CHAR_HEIGHT; i++)
 8010854:	2300      	movs	r3, #0
 8010856:	75bb      	strb	r3, [r7, #22]
 8010858:	e06b      	b.n	8010932 <ILI9341_Draw_Char+0x14a>
        {
            if (temp[j] & (1<<i))
 801085a:	7d7b      	ldrb	r3, [r7, #21]
 801085c:	f107 0218 	add.w	r2, r7, #24
 8010860:	4413      	add	r3, r2
 8010862:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8010866:	461a      	mov	r2, r3
 8010868:	7dbb      	ldrb	r3, [r7, #22]
 801086a:	fa42 f303 	asr.w	r3, r2, r3
 801086e:	f003 0301 	and.w	r3, r3, #1
 8010872:	2b00      	cmp	r3, #0
 8010874:	d02d      	beq.n	80108d2 <ILI9341_Draw_Char+0xea>
            {
            	if(size == 1)
 8010876:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010878:	2b01      	cmp	r3, #1
 801087a:	d10e      	bne.n	801089a <ILI9341_Draw_Char+0xb2>
				{
            		ILI9341_Draw_Pixel(x+j, y+i, colour);
 801087c:	7d7b      	ldrb	r3, [r7, #21]
 801087e:	b29a      	uxth	r2, r3
 8010880:	88bb      	ldrh	r3, [r7, #4]
 8010882:	4413      	add	r3, r2
 8010884:	b298      	uxth	r0, r3
 8010886:	7dbb      	ldrb	r3, [r7, #22]
 8010888:	b29a      	uxth	r2, r3
 801088a:	887b      	ldrh	r3, [r7, #2]
 801088c:	4413      	add	r3, r2
 801088e:	b29b      	uxth	r3, r3
 8010890:	883a      	ldrh	r2, [r7, #0]
 8010892:	4619      	mov	r1, r3
 8010894:	f000 fb06 	bl	8010ea4 <ILI9341_Draw_Pixel>
 8010898:	e048      	b.n	801092c <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, colour, TEXT_CHUNK);
 801089a:	7d7b      	ldrb	r3, [r7, #21]
 801089c:	b29b      	uxth	r3, r3
 801089e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80108a0:	fb12 f303 	smulbb	r3, r2, r3
 80108a4:	b29a      	uxth	r2, r3
 80108a6:	88bb      	ldrh	r3, [r7, #4]
 80108a8:	4413      	add	r3, r2
 80108aa:	b298      	uxth	r0, r3
 80108ac:	7dbb      	ldrb	r3, [r7, #22]
 80108ae:	b29b      	uxth	r3, r3
 80108b0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80108b2:	fb12 f303 	smulbb	r3, r2, r3
 80108b6:	b29a      	uxth	r2, r3
 80108b8:	887b      	ldrh	r3, [r7, #2]
 80108ba:	4413      	add	r3, r2
 80108bc:	b299      	uxth	r1, r3
 80108be:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 80108c0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80108c2:	2301      	movs	r3, #1
 80108c4:	9301      	str	r3, [sp, #4]
 80108c6:	883b      	ldrh	r3, [r7, #0]
 80108c8:	9300      	str	r3, [sp, #0]
 80108ca:	4623      	mov	r3, r4
 80108cc:	f000 fc44 	bl	8011158 <ILI9341_Draw_Rectangle>
 80108d0:	e02c      	b.n	801092c <ILI9341_Draw_Char+0x144>
				}
            }
            else
            {
               	if(size == 1)
 80108d2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80108d4:	2b01      	cmp	r3, #1
 80108d6:	d10e      	bne.n	80108f6 <ILI9341_Draw_Char+0x10e>
				{
					ILI9341_Draw_Pixel(x+j, y+i, bgcolour);
 80108d8:	7d7b      	ldrb	r3, [r7, #21]
 80108da:	b29a      	uxth	r2, r3
 80108dc:	88bb      	ldrh	r3, [r7, #4]
 80108de:	4413      	add	r3, r2
 80108e0:	b298      	uxth	r0, r3
 80108e2:	7dbb      	ldrb	r3, [r7, #22]
 80108e4:	b29a      	uxth	r2, r3
 80108e6:	887b      	ldrh	r3, [r7, #2]
 80108e8:	4413      	add	r3, r2
 80108ea:	b29b      	uxth	r3, r3
 80108ec:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80108ee:	4619      	mov	r1, r3
 80108f0:	f000 fad8 	bl	8010ea4 <ILI9341_Draw_Pixel>
 80108f4:	e01a      	b.n	801092c <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, bgcolour, TEXT_CHUNK);
 80108f6:	7d7b      	ldrb	r3, [r7, #21]
 80108f8:	b29b      	uxth	r3, r3
 80108fa:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80108fc:	fb12 f303 	smulbb	r3, r2, r3
 8010900:	b29a      	uxth	r2, r3
 8010902:	88bb      	ldrh	r3, [r7, #4]
 8010904:	4413      	add	r3, r2
 8010906:	b298      	uxth	r0, r3
 8010908:	7dbb      	ldrb	r3, [r7, #22]
 801090a:	b29b      	uxth	r3, r3
 801090c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 801090e:	fb12 f303 	smulbb	r3, r2, r3
 8010912:	b29a      	uxth	r2, r3
 8010914:	887b      	ldrh	r3, [r7, #2]
 8010916:	4413      	add	r3, r2
 8010918:	b299      	uxth	r1, r3
 801091a:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 801091c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 801091e:	2301      	movs	r3, #1
 8010920:	9301      	str	r3, [sp, #4]
 8010922:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010924:	9300      	str	r3, [sp, #0]
 8010926:	4623      	mov	r3, r4
 8010928:	f000 fc16 	bl	8011158 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++)
 801092c:	7dbb      	ldrb	r3, [r7, #22]
 801092e:	3301      	adds	r3, #1
 8010930:	75bb      	strb	r3, [r7, #22]
 8010932:	7dbb      	ldrb	r3, [r7, #22]
 8010934:	2b07      	cmp	r3, #7
 8010936:	d990      	bls.n	801085a <ILI9341_Draw_Char+0x72>
    for (j=0; j<CHAR_WIDTH; j++)
 8010938:	7d7b      	ldrb	r3, [r7, #21]
 801093a:	3301      	adds	r3, #1
 801093c:	757b      	strb	r3, [r7, #21]
 801093e:	7d7b      	ldrb	r3, [r7, #21]
 8010940:	2b05      	cmp	r3, #5
 8010942:	d987      	bls.n	8010854 <ILI9341_Draw_Char+0x6c>
				}
            }
        }
    }
}
 8010944:	bf00      	nop
 8010946:	371c      	adds	r7, #28
 8010948:	46bd      	mov	sp, r7
 801094a:	bd90      	pop	{r4, r7, pc}
 801094c:	08016720 	.word	0x08016720

08010950 <ILI9341_Draw_Text>:
 *	@param None
 *	@retval None
 *
 */
void ILI9341_Draw_Text(const char* Text, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 8010950:	b590      	push	{r4, r7, lr}
 8010952:	b087      	sub	sp, #28
 8010954:	af02      	add	r7, sp, #8
 8010956:	60f8      	str	r0, [r7, #12]
 8010958:	4608      	mov	r0, r1
 801095a:	4611      	mov	r1, r2
 801095c:	461a      	mov	r2, r3
 801095e:	4603      	mov	r3, r0
 8010960:	817b      	strh	r3, [r7, #10]
 8010962:	460b      	mov	r3, r1
 8010964:	813b      	strh	r3, [r7, #8]
 8010966:	4613      	mov	r3, r2
 8010968:	80fb      	strh	r3, [r7, #6]
	ILI9341_Draw_Vertical_Line(x-1, y, CHAR_HEIGHT*size, bgcolour);
 801096a:	897b      	ldrh	r3, [r7, #10]
 801096c:	3b01      	subs	r3, #1
 801096e:	b298      	uxth	r0, r3
 8010970:	8c3b      	ldrh	r3, [r7, #32]
 8010972:	00db      	lsls	r3, r3, #3
 8010974:	b29a      	uxth	r2, r3
 8010976:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010978:	8939      	ldrh	r1, [r7, #8]
 801097a:	f000 f9b9 	bl	8010cf0 <ILI9341_Draw_Vertical_Line>
    ILI9341_Draw_Vertical_Line(x-2, y, CHAR_HEIGHT*size, bgcolour);
 801097e:	897b      	ldrh	r3, [r7, #10]
 8010980:	3b02      	subs	r3, #2
 8010982:	b298      	uxth	r0, r3
 8010984:	8c3b      	ldrh	r3, [r7, #32]
 8010986:	00db      	lsls	r3, r3, #3
 8010988:	b29a      	uxth	r2, r3
 801098a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801098c:	8939      	ldrh	r1, [r7, #8]
 801098e:	f000 f9af 	bl	8010cf0 <ILI9341_Draw_Vertical_Line>

    while (*Text) {
 8010992:	e016      	b.n	80109c2 <ILI9341_Draw_Text+0x72>
        ILI9341_Draw_Char(*Text++, x, y, colour, size, bgcolour);
 8010994:	68fb      	ldr	r3, [r7, #12]
 8010996:	1c5a      	adds	r2, r3, #1
 8010998:	60fa      	str	r2, [r7, #12]
 801099a:	7818      	ldrb	r0, [r3, #0]
 801099c:	88fc      	ldrh	r4, [r7, #6]
 801099e:	893a      	ldrh	r2, [r7, #8]
 80109a0:	8979      	ldrh	r1, [r7, #10]
 80109a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80109a4:	9301      	str	r3, [sp, #4]
 80109a6:	8c3b      	ldrh	r3, [r7, #32]
 80109a8:	9300      	str	r3, [sp, #0]
 80109aa:	4623      	mov	r3, r4
 80109ac:	f7ff ff1c 	bl	80107e8 <ILI9341_Draw_Char>
        x += CHAR_WIDTH*size;
 80109b0:	8c3b      	ldrh	r3, [r7, #32]
 80109b2:	461a      	mov	r2, r3
 80109b4:	0052      	lsls	r2, r2, #1
 80109b6:	4413      	add	r3, r2
 80109b8:	005b      	lsls	r3, r3, #1
 80109ba:	b29a      	uxth	r2, r3
 80109bc:	897b      	ldrh	r3, [r7, #10]
 80109be:	4413      	add	r3, r2
 80109c0:	817b      	strh	r3, [r7, #10]
    while (*Text) {
 80109c2:	68fb      	ldr	r3, [r7, #12]
 80109c4:	781b      	ldrb	r3, [r3, #0]
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d1e4      	bne.n	8010994 <ILI9341_Draw_Text+0x44>
    }


}
 80109ca:	bf00      	nop
 80109cc:	3714      	adds	r7, #20
 80109ce:	46bd      	mov	sp, r7
 80109d0:	bd90      	pop	{r4, r7, pc}

080109d2 <ILI9341_Init>:
 *
 * Initialize LCD display
 *
 */
void ILI9341_Init(void)
{
 80109d2:	b580      	push	{r7, lr}
 80109d4:	af00      	add	r7, sp, #0

	_LCD_Enable();
 80109d6:	f000 fca3 	bl	8011320 <_LCD_Enable>
	ILI9341_SPI_Init();
 80109da:	f000 f907 	bl	8010bec <ILI9341_SPI_Init>
	_LCD_Reset();
 80109de:	f000 fcaf 	bl	8011340 <_LCD_Reset>

	//SOFTWARE RESET
	_LCD_SendCommand(0x01);
 80109e2:	2001      	movs	r0, #1
 80109e4:	f000 fd7a 	bl	80114dc <_LCD_SendCommand>
	HAL_Delay(2000);
 80109e8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80109ec:	f7f8 fb02 	bl	8008ff4 <HAL_Delay>

	//POWER CONTROL A
	_LCD_SendCommand(0xCB);
 80109f0:	20cb      	movs	r0, #203	; 0xcb
 80109f2:	f000 fd73 	bl	80114dc <_LCD_SendCommand>
	_LCD_SendData(0x39);
 80109f6:	2039      	movs	r0, #57	; 0x39
 80109f8:	f000 fda2 	bl	8011540 <_LCD_SendData>
	_LCD_SendData(0x2C);
 80109fc:	202c      	movs	r0, #44	; 0x2c
 80109fe:	f000 fd9f 	bl	8011540 <_LCD_SendData>
	_LCD_SendData(0x00);
 8010a02:	2000      	movs	r0, #0
 8010a04:	f000 fd9c 	bl	8011540 <_LCD_SendData>
	_LCD_SendData(0x34);
 8010a08:	2034      	movs	r0, #52	; 0x34
 8010a0a:	f000 fd99 	bl	8011540 <_LCD_SendData>
	_LCD_SendData(0x02);
 8010a0e:	2002      	movs	r0, #2
 8010a10:	f000 fd96 	bl	8011540 <_LCD_SendData>

	//POWER CONTROL B
	_LCD_SendCommand(0xCF);
 8010a14:	20cf      	movs	r0, #207	; 0xcf
 8010a16:	f000 fd61 	bl	80114dc <_LCD_SendCommand>
	_LCD_SendData(0x00);
 8010a1a:	2000      	movs	r0, #0
 8010a1c:	f000 fd90 	bl	8011540 <_LCD_SendData>
	_LCD_SendData(0xC1);
 8010a20:	20c1      	movs	r0, #193	; 0xc1
 8010a22:	f000 fd8d 	bl	8011540 <_LCD_SendData>
	_LCD_SendData(0x30);
 8010a26:	2030      	movs	r0, #48	; 0x30
 8010a28:	f000 fd8a 	bl	8011540 <_LCD_SendData>

	//DRIVER TIMING CONTROL A
	_LCD_SendCommand(0xE8);
 8010a2c:	20e8      	movs	r0, #232	; 0xe8
 8010a2e:	f000 fd55 	bl	80114dc <_LCD_SendCommand>
	_LCD_SendData(0x85);
 8010a32:	2085      	movs	r0, #133	; 0x85
 8010a34:	f000 fd84 	bl	8011540 <_LCD_SendData>
	_LCD_SendData(0x00);
 8010a38:	2000      	movs	r0, #0
 8010a3a:	f000 fd81 	bl	8011540 <_LCD_SendData>
	_LCD_SendData(0x78);
 8010a3e:	2078      	movs	r0, #120	; 0x78
 8010a40:	f000 fd7e 	bl	8011540 <_LCD_SendData>

	//DRIVER TIMING CONTROL B
	_LCD_SendCommand(0xEA);
 8010a44:	20ea      	movs	r0, #234	; 0xea
 8010a46:	f000 fd49 	bl	80114dc <_LCD_SendCommand>
	_LCD_SendData(0x00);
 8010a4a:	2000      	movs	r0, #0
 8010a4c:	f000 fd78 	bl	8011540 <_LCD_SendData>
	_LCD_SendData(0x00);
 8010a50:	2000      	movs	r0, #0
 8010a52:	f000 fd75 	bl	8011540 <_LCD_SendData>

	//POWER ON SEQUENCE CONTROL
	_LCD_SendCommand(0xED);
 8010a56:	20ed      	movs	r0, #237	; 0xed
 8010a58:	f000 fd40 	bl	80114dc <_LCD_SendCommand>
	_LCD_SendData(0x64);
 8010a5c:	2064      	movs	r0, #100	; 0x64
 8010a5e:	f000 fd6f 	bl	8011540 <_LCD_SendData>
	_LCD_SendData(0x03);
 8010a62:	2003      	movs	r0, #3
 8010a64:	f000 fd6c 	bl	8011540 <_LCD_SendData>
	_LCD_SendData(0x12);
 8010a68:	2012      	movs	r0, #18
 8010a6a:	f000 fd69 	bl	8011540 <_LCD_SendData>
	_LCD_SendData(0x81);
 8010a6e:	2081      	movs	r0, #129	; 0x81
 8010a70:	f000 fd66 	bl	8011540 <_LCD_SendData>

	//PUMP RATIO CONTROL
	_LCD_SendCommand(0xF7);
 8010a74:	20f7      	movs	r0, #247	; 0xf7
 8010a76:	f000 fd31 	bl	80114dc <_LCD_SendCommand>
	_LCD_SendData(0x20);
 8010a7a:	2020      	movs	r0, #32
 8010a7c:	f000 fd60 	bl	8011540 <_LCD_SendData>

	//POWER CONTROL,VRH[5:0]
	_LCD_SendCommand(0xC0);
 8010a80:	20c0      	movs	r0, #192	; 0xc0
 8010a82:	f000 fd2b 	bl	80114dc <_LCD_SendCommand>
	_LCD_SendData(0x23);
 8010a86:	2023      	movs	r0, #35	; 0x23
 8010a88:	f000 fd5a 	bl	8011540 <_LCD_SendData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	_LCD_SendCommand(0xC1);
 8010a8c:	20c1      	movs	r0, #193	; 0xc1
 8010a8e:	f000 fd25 	bl	80114dc <_LCD_SendCommand>
	_LCD_SendData(0x10);
 8010a92:	2010      	movs	r0, #16
 8010a94:	f000 fd54 	bl	8011540 <_LCD_SendData>

	//VCM CONTROL
	_LCD_SendCommand(0xC5);
 8010a98:	20c5      	movs	r0, #197	; 0xc5
 8010a9a:	f000 fd1f 	bl	80114dc <_LCD_SendCommand>
	_LCD_SendData(0x3E);
 8010a9e:	203e      	movs	r0, #62	; 0x3e
 8010aa0:	f000 fd4e 	bl	8011540 <_LCD_SendData>
	_LCD_SendData(0x28);
 8010aa4:	2028      	movs	r0, #40	; 0x28
 8010aa6:	f000 fd4b 	bl	8011540 <_LCD_SendData>

	//VCM CONTROL 2
	_LCD_SendCommand(0xC7);
 8010aaa:	20c7      	movs	r0, #199	; 0xc7
 8010aac:	f000 fd16 	bl	80114dc <_LCD_SendCommand>
	_LCD_SendData(0x86);
 8010ab0:	2086      	movs	r0, #134	; 0x86
 8010ab2:	f000 fd45 	bl	8011540 <_LCD_SendData>

	//MEMORY ACCESS CONTROL
	_LCD_SendCommand(0x36);
 8010ab6:	2036      	movs	r0, #54	; 0x36
 8010ab8:	f000 fd10 	bl	80114dc <_LCD_SendCommand>
	_LCD_SendData(0x48);
 8010abc:	2048      	movs	r0, #72	; 0x48
 8010abe:	f000 fd3f 	bl	8011540 <_LCD_SendData>


	//PIXEL FORMAT
	_LCD_SendCommand(0x3A);
 8010ac2:	203a      	movs	r0, #58	; 0x3a
 8010ac4:	f000 fd0a 	bl	80114dc <_LCD_SendCommand>
	_LCD_SendData(0x55);
 8010ac8:	2055      	movs	r0, #85	; 0x55
 8010aca:	f000 fd39 	bl	8011540 <_LCD_SendData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	_LCD_SendCommand(0xB1);
 8010ace:	20b1      	movs	r0, #177	; 0xb1
 8010ad0:	f000 fd04 	bl	80114dc <_LCD_SendCommand>
	_LCD_SendData(0x00);
 8010ad4:	2000      	movs	r0, #0
 8010ad6:	f000 fd33 	bl	8011540 <_LCD_SendData>
	_LCD_SendData(0x18);
 8010ada:	2018      	movs	r0, #24
 8010adc:	f000 fd30 	bl	8011540 <_LCD_SendData>

	//DISPLAY FUNCTION CONTROL
	_LCD_SendCommand(0xB6);
 8010ae0:	20b6      	movs	r0, #182	; 0xb6
 8010ae2:	f000 fcfb 	bl	80114dc <_LCD_SendCommand>
	_LCD_SendData(0x08);
 8010ae6:	2008      	movs	r0, #8
 8010ae8:	f000 fd2a 	bl	8011540 <_LCD_SendData>
	_LCD_SendData(0x82);
 8010aec:	2082      	movs	r0, #130	; 0x82
 8010aee:	f000 fd27 	bl	8011540 <_LCD_SendData>
	_LCD_SendData(0x27);
 8010af2:	2027      	movs	r0, #39	; 0x27
 8010af4:	f000 fd24 	bl	8011540 <_LCD_SendData>


	//3GAMMA FUNCTION DISABLE
	_LCD_SendCommand(0xF2);
 8010af8:	20f2      	movs	r0, #242	; 0xf2
 8010afa:	f000 fcef 	bl	80114dc <_LCD_SendCommand>
	_LCD_SendData(0x00);
 8010afe:	2000      	movs	r0, #0
 8010b00:	f000 fd1e 	bl	8011540 <_LCD_SendData>

	//GAMMA CURVE SELECTED
	_LCD_SendCommand(0x26);
 8010b04:	2026      	movs	r0, #38	; 0x26
 8010b06:	f000 fce9 	bl	80114dc <_LCD_SendCommand>
	_LCD_SendData(0x01);
 8010b0a:	2001      	movs	r0, #1
 8010b0c:	f000 fd18 	bl	8011540 <_LCD_SendData>

	//POSITIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE0);
 8010b10:	20e0      	movs	r0, #224	; 0xe0
 8010b12:	f000 fce3 	bl	80114dc <_LCD_SendCommand>
	_LCD_SendData(0x0F);
 8010b16:	200f      	movs	r0, #15
 8010b18:	f000 fd12 	bl	8011540 <_LCD_SendData>
	_LCD_SendData(0x31);
 8010b1c:	2031      	movs	r0, #49	; 0x31
 8010b1e:	f000 fd0f 	bl	8011540 <_LCD_SendData>
	_LCD_SendData(0x2B);
 8010b22:	202b      	movs	r0, #43	; 0x2b
 8010b24:	f000 fd0c 	bl	8011540 <_LCD_SendData>
	_LCD_SendData(0x0C);
 8010b28:	200c      	movs	r0, #12
 8010b2a:	f000 fd09 	bl	8011540 <_LCD_SendData>
	_LCD_SendData(0x0E);
 8010b2e:	200e      	movs	r0, #14
 8010b30:	f000 fd06 	bl	8011540 <_LCD_SendData>
	_LCD_SendData(0x08);
 8010b34:	2008      	movs	r0, #8
 8010b36:	f000 fd03 	bl	8011540 <_LCD_SendData>
	_LCD_SendData(0x4E);
 8010b3a:	204e      	movs	r0, #78	; 0x4e
 8010b3c:	f000 fd00 	bl	8011540 <_LCD_SendData>
	_LCD_SendData(0xF1);
 8010b40:	20f1      	movs	r0, #241	; 0xf1
 8010b42:	f000 fcfd 	bl	8011540 <_LCD_SendData>
	_LCD_SendData(0x37);
 8010b46:	2037      	movs	r0, #55	; 0x37
 8010b48:	f000 fcfa 	bl	8011540 <_LCD_SendData>
	_LCD_SendData(0x07);
 8010b4c:	2007      	movs	r0, #7
 8010b4e:	f000 fcf7 	bl	8011540 <_LCD_SendData>
	_LCD_SendData(0x10);
 8010b52:	2010      	movs	r0, #16
 8010b54:	f000 fcf4 	bl	8011540 <_LCD_SendData>
	_LCD_SendData(0x03);
 8010b58:	2003      	movs	r0, #3
 8010b5a:	f000 fcf1 	bl	8011540 <_LCD_SendData>
	_LCD_SendData(0x0E);
 8010b5e:	200e      	movs	r0, #14
 8010b60:	f000 fcee 	bl	8011540 <_LCD_SendData>
	_LCD_SendData(0x09);
 8010b64:	2009      	movs	r0, #9
 8010b66:	f000 fceb 	bl	8011540 <_LCD_SendData>
	_LCD_SendData(0x00);
 8010b6a:	2000      	movs	r0, #0
 8010b6c:	f000 fce8 	bl	8011540 <_LCD_SendData>

	//NEGATIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE1);
 8010b70:	20e1      	movs	r0, #225	; 0xe1
 8010b72:	f000 fcb3 	bl	80114dc <_LCD_SendCommand>
	_LCD_SendData(0x00);
 8010b76:	2000      	movs	r0, #0
 8010b78:	f000 fce2 	bl	8011540 <_LCD_SendData>
	_LCD_SendData(0x0E);
 8010b7c:	200e      	movs	r0, #14
 8010b7e:	f000 fcdf 	bl	8011540 <_LCD_SendData>
	_LCD_SendData(0x14);
 8010b82:	2014      	movs	r0, #20
 8010b84:	f000 fcdc 	bl	8011540 <_LCD_SendData>
	_LCD_SendData(0x03);
 8010b88:	2003      	movs	r0, #3
 8010b8a:	f000 fcd9 	bl	8011540 <_LCD_SendData>
	_LCD_SendData(0x11);
 8010b8e:	2011      	movs	r0, #17
 8010b90:	f000 fcd6 	bl	8011540 <_LCD_SendData>
	_LCD_SendData(0x07);
 8010b94:	2007      	movs	r0, #7
 8010b96:	f000 fcd3 	bl	8011540 <_LCD_SendData>
	_LCD_SendData(0x31);
 8010b9a:	2031      	movs	r0, #49	; 0x31
 8010b9c:	f000 fcd0 	bl	8011540 <_LCD_SendData>
	_LCD_SendData(0xC1);
 8010ba0:	20c1      	movs	r0, #193	; 0xc1
 8010ba2:	f000 fccd 	bl	8011540 <_LCD_SendData>
	_LCD_SendData(0x48);
 8010ba6:	2048      	movs	r0, #72	; 0x48
 8010ba8:	f000 fcca 	bl	8011540 <_LCD_SendData>
	_LCD_SendData(0x08);
 8010bac:	2008      	movs	r0, #8
 8010bae:	f000 fcc7 	bl	8011540 <_LCD_SendData>
	_LCD_SendData(0x0F);
 8010bb2:	200f      	movs	r0, #15
 8010bb4:	f000 fcc4 	bl	8011540 <_LCD_SendData>
	_LCD_SendData(0x0C);
 8010bb8:	200c      	movs	r0, #12
 8010bba:	f000 fcc1 	bl	8011540 <_LCD_SendData>
	_LCD_SendData(0x31);
 8010bbe:	2031      	movs	r0, #49	; 0x31
 8010bc0:	f000 fcbe 	bl	8011540 <_LCD_SendData>
	_LCD_SendData(0x36);
 8010bc4:	2036      	movs	r0, #54	; 0x36
 8010bc6:	f000 fcbb 	bl	8011540 <_LCD_SendData>
	_LCD_SendData(0x0F);
 8010bca:	200f      	movs	r0, #15
 8010bcc:	f000 fcb8 	bl	8011540 <_LCD_SendData>

	//EXIT SLEEP
	_LCD_SendCommand(0x11);
 8010bd0:	2011      	movs	r0, #17
 8010bd2:	f000 fc83 	bl	80114dc <_LCD_SendCommand>
	HAL_Delay(240);
 8010bd6:	20f0      	movs	r0, #240	; 0xf0
 8010bd8:	f7f8 fa0c 	bl	8008ff4 <HAL_Delay>

	//TURN ON DISPLAY
	_LCD_SendCommand(0x29);
 8010bdc:	2029      	movs	r0, #41	; 0x29
 8010bde:	f000 fc7d 	bl	80114dc <_LCD_SendCommand>

	//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8010be2:	2000      	movs	r0, #0
 8010be4:	f000 fb4e 	bl	8011284 <ILI9341_Set_Rotation>
}
 8010be8:	bf00      	nop
 8010bea:	bd80      	pop	{r7, pc}

08010bec <ILI9341_SPI_Init>:
 *
 * 	Initialise SPI peripheral
 *
 */
void ILI9341_SPI_Init(void)
{
 8010bec:	b480      	push	{r7}
 8010bee:	af00      	add	r7, sp, #0

   	// check SPI enabled
	if ((SPI_PERIPH->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8010bf0:	4b0b      	ldr	r3, [pc, #44]	; (8010c20 <ILI9341_SPI_Init+0x34>)
 8010bf2:	681b      	ldr	r3, [r3, #0]
 8010bf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010bf8:	2b40      	cmp	r3, #64	; 0x40
 8010bfa:	d005      	beq.n	8010c08 <ILI9341_SPI_Init+0x1c>
	{
		SPI_PERIPH->CR1 |= SPI_CR1_SPE;
 8010bfc:	4b08      	ldr	r3, [pc, #32]	; (8010c20 <ILI9341_SPI_Init+0x34>)
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	4a07      	ldr	r2, [pc, #28]	; (8010c20 <ILI9341_SPI_Init+0x34>)
 8010c02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010c06:	6013      	str	r3, [r2, #0]
	}

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8010c08:	4b06      	ldr	r3, [pc, #24]	; (8010c24 <ILI9341_SPI_Init+0x38>)
 8010c0a:	695b      	ldr	r3, [r3, #20]
 8010c0c:	4a05      	ldr	r2, [pc, #20]	; (8010c24 <ILI9341_SPI_Init+0x38>)
 8010c0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010c12:	6153      	str	r3, [r2, #20]
}
 8010c14:	bf00      	nop
 8010c16:	46bd      	mov	sp, r7
 8010c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c1c:	4770      	bx	lr
 8010c1e:	bf00      	nop
 8010c20:	40003c00 	.word	0x40003c00
 8010c24:	48000400 	.word	0x48000400

08010c28 <ILI9341_Draw_Horizontal_Line>:
 *	Draw horizontal line
 *
 */

void ILI9341_Draw_Horizontal_Line(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t colour)
{
 8010c28:	b590      	push	{r4, r7, lr}
 8010c2a:	b087      	sub	sp, #28
 8010c2c:	af02      	add	r7, sp, #8
 8010c2e:	4604      	mov	r4, r0
 8010c30:	4608      	mov	r0, r1
 8010c32:	4611      	mov	r1, r2
 8010c34:	461a      	mov	r2, r3
 8010c36:	4623      	mov	r3, r4
 8010c38:	80fb      	strh	r3, [r7, #6]
 8010c3a:	4603      	mov	r3, r0
 8010c3c:	80bb      	strh	r3, [r7, #4]
 8010c3e:	460b      	mov	r3, r1
 8010c40:	807b      	strh	r3, [r7, #2]
 8010c42:	4613      	mov	r3, r2
 8010c44:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 8010c46:	4b28      	ldr	r3, [pc, #160]	; (8010ce8 <ILI9341_Draw_Horizontal_Line+0xc0>)
 8010c48:	881b      	ldrh	r3, [r3, #0]
 8010c4a:	b29b      	uxth	r3, r3
 8010c4c:	88fa      	ldrh	r2, [r7, #6]
 8010c4e:	429a      	cmp	r2, r3
 8010c50:	d246      	bcs.n	8010ce0 <ILI9341_Draw_Horizontal_Line+0xb8>
 8010c52:	4b26      	ldr	r3, [pc, #152]	; (8010cec <ILI9341_Draw_Horizontal_Line+0xc4>)
 8010c54:	881b      	ldrh	r3, [r3, #0]
 8010c56:	b29b      	uxth	r3, r3
 8010c58:	88ba      	ldrh	r2, [r7, #4]
 8010c5a:	429a      	cmp	r2, r3
 8010c5c:	d240      	bcs.n	8010ce0 <ILI9341_Draw_Horizontal_Line+0xb8>
	if(((xpos + width) - 1 ) >= LCD_WIDTH)
 8010c5e:	88fa      	ldrh	r2, [r7, #6]
 8010c60:	887b      	ldrh	r3, [r7, #2]
 8010c62:	4413      	add	r3, r2
 8010c64:	3b01      	subs	r3, #1
 8010c66:	4a20      	ldr	r2, [pc, #128]	; (8010ce8 <ILI9341_Draw_Horizontal_Line+0xc0>)
 8010c68:	8812      	ldrh	r2, [r2, #0]
 8010c6a:	b292      	uxth	r2, r2
 8010c6c:	4293      	cmp	r3, r2
 8010c6e:	db05      	blt.n	8010c7c <ILI9341_Draw_Horizontal_Line+0x54>
		{
			width= LCD_WIDTH - xpos;
 8010c70:	4b1d      	ldr	r3, [pc, #116]	; (8010ce8 <ILI9341_Draw_Horizontal_Line+0xc0>)
 8010c72:	881b      	ldrh	r3, [r3, #0]
 8010c74:	b29a      	uxth	r2, r3
 8010c76:	88fb      	ldrh	r3, [r7, #6]
 8010c78:	1ad3      	subs	r3, r2, r3
 8010c7a:	807b      	strh	r3, [r7, #2]
		}
	ILI9341_Set_Frame(	xpos,
							ypos,
							(xpos + width) - 1,
 8010c7c:	88fa      	ldrh	r2, [r7, #6]
 8010c7e:	887b      	ldrh	r3, [r7, #2]
 8010c80:	4413      	add	r3, r2
 8010c82:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 8010c84:	3b01      	subs	r3, #1
 8010c86:	b29a      	uxth	r2, r3
 8010c88:	88bb      	ldrh	r3, [r7, #4]
 8010c8a:	88b9      	ldrh	r1, [r7, #4]
 8010c8c:	88f8      	ldrh	r0, [r7, #6]
 8010c8e:	f000 f893 	bl	8010db8 <ILI9341_Set_Frame>
	// to keep _LCD_Write_Frame() happy.

	// Note, truncated pixel will be needed at function end.


	uint8_t truncated = 0;
 8010c92:	2300      	movs	r3, #0
 8010c94:	73fb      	strb	r3, [r7, #15]

	if((width & 1) && (width > 1))		// don't round down to zero!
 8010c96:	887b      	ldrh	r3, [r7, #2]
 8010c98:	f003 0301 	and.w	r3, r3, #1
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d009      	beq.n	8010cb4 <ILI9341_Draw_Horizontal_Line+0x8c>
 8010ca0:	887b      	ldrh	r3, [r7, #2]
 8010ca2:	2b01      	cmp	r3, #1
 8010ca4:	d906      	bls.n	8010cb4 <ILI9341_Draw_Horizontal_Line+0x8c>
	{
		truncated = 1;
 8010ca6:	2301      	movs	r3, #1
 8010ca8:	73fb      	strb	r3, [r7, #15]
		width = ((width >> 1) * 2);
 8010caa:	887b      	ldrh	r3, [r7, #2]
 8010cac:	085b      	lsrs	r3, r3, #1
 8010cae:	b29b      	uxth	r3, r3
 8010cb0:	005b      	lsls	r3, r3, #1
 8010cb2:	807b      	strh	r3, [r7, #2]
	}
	_LCD_Write_Frame(xpos, ypos, colour, width, LINE_CHUNK);
 8010cb4:	887c      	ldrh	r4, [r7, #2]
 8010cb6:	883a      	ldrh	r2, [r7, #0]
 8010cb8:	88b9      	ldrh	r1, [r7, #4]
 8010cba:	88f8      	ldrh	r0, [r7, #6]
 8010cbc:	2303      	movs	r3, #3
 8010cbe:	9300      	str	r3, [sp, #0]
 8010cc0:	4623      	mov	r3, r4
 8010cc2:	f000 fb5b 	bl	801137c <_LCD_Write_Frame>
	//
//TODO
	// add the truncated pixel now
	if(truncated)
 8010cc6:	7bfb      	ldrb	r3, [r7, #15]
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	d00a      	beq.n	8010ce2 <ILI9341_Draw_Horizontal_Line+0xba>
	{
		ILI9341_Draw_Pixel(	(xpos + width),
 8010ccc:	88fa      	ldrh	r2, [r7, #6]
 8010cce:	887b      	ldrh	r3, [r7, #2]
 8010cd0:	4413      	add	r3, r2
 8010cd2:	b29b      	uxth	r3, r3
 8010cd4:	883a      	ldrh	r2, [r7, #0]
 8010cd6:	88b9      	ldrh	r1, [r7, #4]
 8010cd8:	4618      	mov	r0, r3
 8010cda:	f000 f8e3 	bl	8010ea4 <ILI9341_Draw_Pixel>
 8010cde:	e000      	b.n	8010ce2 <ILI9341_Draw_Horizontal_Line+0xba>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 8010ce0:	bf00      	nop
							(ypos),
							colour);
	}


}
 8010ce2:	3714      	adds	r7, #20
 8010ce4:	46bd      	mov	sp, r7
 8010ce6:	bd90      	pop	{r4, r7, pc}
 8010ce8:	20000ebe 	.word	0x20000ebe
 8010cec:	20000ebc 	.word	0x20000ebc

08010cf0 <ILI9341_Draw_Vertical_Line>:
 *
 *  Draw vertical line
 *
 */
void ILI9341_Draw_Vertical_Line(uint16_t xpos, uint16_t ypos, uint16_t height, uint16_t colour)
{
 8010cf0:	b590      	push	{r4, r7, lr}
 8010cf2:	b087      	sub	sp, #28
 8010cf4:	af02      	add	r7, sp, #8
 8010cf6:	4604      	mov	r4, r0
 8010cf8:	4608      	mov	r0, r1
 8010cfa:	4611      	mov	r1, r2
 8010cfc:	461a      	mov	r2, r3
 8010cfe:	4623      	mov	r3, r4
 8010d00:	80fb      	strh	r3, [r7, #6]
 8010d02:	4603      	mov	r3, r0
 8010d04:	80bb      	strh	r3, [r7, #4]
 8010d06:	460b      	mov	r3, r1
 8010d08:	807b      	strh	r3, [r7, #2]
 8010d0a:	4613      	mov	r3, r2
 8010d0c:	803b      	strh	r3, [r7, #0]
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 8010d0e:	4b28      	ldr	r3, [pc, #160]	; (8010db0 <ILI9341_Draw_Vertical_Line+0xc0>)
 8010d10:	881b      	ldrh	r3, [r3, #0]
 8010d12:	b29b      	uxth	r3, r3
 8010d14:	88fa      	ldrh	r2, [r7, #6]
 8010d16:	429a      	cmp	r2, r3
 8010d18:	d246      	bcs.n	8010da8 <ILI9341_Draw_Vertical_Line+0xb8>
 8010d1a:	4b26      	ldr	r3, [pc, #152]	; (8010db4 <ILI9341_Draw_Vertical_Line+0xc4>)
 8010d1c:	881b      	ldrh	r3, [r3, #0]
 8010d1e:	b29b      	uxth	r3, r3
 8010d20:	88ba      	ldrh	r2, [r7, #4]
 8010d22:	429a      	cmp	r2, r3
 8010d24:	d240      	bcs.n	8010da8 <ILI9341_Draw_Vertical_Line+0xb8>
	if(((ypos + height) - 1) >= LCD_HEIGHT)
 8010d26:	88ba      	ldrh	r2, [r7, #4]
 8010d28:	887b      	ldrh	r3, [r7, #2]
 8010d2a:	4413      	add	r3, r2
 8010d2c:	3b01      	subs	r3, #1
 8010d2e:	4a21      	ldr	r2, [pc, #132]	; (8010db4 <ILI9341_Draw_Vertical_Line+0xc4>)
 8010d30:	8812      	ldrh	r2, [r2, #0]
 8010d32:	b292      	uxth	r2, r2
 8010d34:	4293      	cmp	r3, r2
 8010d36:	db05      	blt.n	8010d44 <ILI9341_Draw_Vertical_Line+0x54>
	{
		height= LCD_HEIGHT - ypos;
 8010d38:	4b1e      	ldr	r3, [pc, #120]	; (8010db4 <ILI9341_Draw_Vertical_Line+0xc4>)
 8010d3a:	881b      	ldrh	r3, [r3, #0]
 8010d3c:	b29a      	uxth	r2, r3
 8010d3e:	88bb      	ldrh	r3, [r7, #4]
 8010d40:	1ad3      	subs	r3, r2, r3
 8010d42:	807b      	strh	r3, [r7, #2]
	}

	ILI9341_Set_Frame(xpos, ypos, xpos, (ypos + height) - 1);
 8010d44:	88ba      	ldrh	r2, [r7, #4]
 8010d46:	887b      	ldrh	r3, [r7, #2]
 8010d48:	4413      	add	r3, r2
 8010d4a:	b29b      	uxth	r3, r3
 8010d4c:	3b01      	subs	r3, #1
 8010d4e:	b29b      	uxth	r3, r3
 8010d50:	88fa      	ldrh	r2, [r7, #6]
 8010d52:	88b9      	ldrh	r1, [r7, #4]
 8010d54:	88f8      	ldrh	r0, [r7, #6]
 8010d56:	f000 f82f 	bl	8010db8 <ILI9341_Set_Frame>

	uint8_t truncated = 0;
 8010d5a:	2300      	movs	r3, #0
 8010d5c:	73fb      	strb	r3, [r7, #15]

	if((height & 1) && (height > 1))		// don't round down to zero!
 8010d5e:	887b      	ldrh	r3, [r7, #2]
 8010d60:	f003 0301 	and.w	r3, r3, #1
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	d009      	beq.n	8010d7c <ILI9341_Draw_Vertical_Line+0x8c>
 8010d68:	887b      	ldrh	r3, [r7, #2]
 8010d6a:	2b01      	cmp	r3, #1
 8010d6c:	d906      	bls.n	8010d7c <ILI9341_Draw_Vertical_Line+0x8c>
	{
		truncated = 1;
 8010d6e:	2301      	movs	r3, #1
 8010d70:	73fb      	strb	r3, [r7, #15]
		height = ((height >> 1) * 2);
 8010d72:	887b      	ldrh	r3, [r7, #2]
 8010d74:	085b      	lsrs	r3, r3, #1
 8010d76:	b29b      	uxth	r3, r3
 8010d78:	005b      	lsls	r3, r3, #1
 8010d7a:	807b      	strh	r3, [r7, #2]
//TODO


	//

	if(truncated)
 8010d7c:	7bfb      	ldrb	r3, [r7, #15]
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	d008      	beq.n	8010d94 <ILI9341_Draw_Vertical_Line+0xa4>
	{
		ILI9341_Draw_Pixel(	(xpos),
 8010d82:	88ba      	ldrh	r2, [r7, #4]
 8010d84:	887b      	ldrh	r3, [r7, #2]
 8010d86:	4413      	add	r3, r2
 8010d88:	b299      	uxth	r1, r3
 8010d8a:	883a      	ldrh	r2, [r7, #0]
 8010d8c:	88fb      	ldrh	r3, [r7, #6]
 8010d8e:	4618      	mov	r0, r3
 8010d90:	f000 f888 	bl	8010ea4 <ILI9341_Draw_Pixel>
							(ypos + height),
							colour);
	}

	_LCD_Write_Frame(xpos, ypos, colour, height, LINE_CHUNK);
 8010d94:	887c      	ldrh	r4, [r7, #2]
 8010d96:	883a      	ldrh	r2, [r7, #0]
 8010d98:	88b9      	ldrh	r1, [r7, #4]
 8010d9a:	88f8      	ldrh	r0, [r7, #6]
 8010d9c:	2303      	movs	r3, #3
 8010d9e:	9300      	str	r3, [sp, #0]
 8010da0:	4623      	mov	r3, r4
 8010da2:	f000 faeb 	bl	801137c <_LCD_Write_Frame>
 8010da6:	e000      	b.n	8010daa <ILI9341_Draw_Vertical_Line+0xba>
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 8010da8:	bf00      	nop
}
 8010daa:	3714      	adds	r7, #20
 8010dac:	46bd      	mov	sp, r7
 8010dae:	bd90      	pop	{r4, r7, pc}
 8010db0:	20000ebe 	.word	0x20000ebe
 8010db4:	20000ebc 	.word	0x20000ebc

08010db8 <ILI9341_Set_Frame>:
 *	bottom right of area (ec, ep):
 *	ec 	- 	"end column"
 *	ep	- 	"end page"
 */
void ILI9341_Set_Frame(uint16_t sc, uint16_t sp, uint16_t ec, uint16_t ep)
{
 8010db8:	b590      	push	{r4, r7, lr}
 8010dba:	b083      	sub	sp, #12
 8010dbc:	af00      	add	r7, sp, #0
 8010dbe:	4604      	mov	r4, r0
 8010dc0:	4608      	mov	r0, r1
 8010dc2:	4611      	mov	r1, r2
 8010dc4:	461a      	mov	r2, r3
 8010dc6:	4623      	mov	r3, r4
 8010dc8:	80fb      	strh	r3, [r7, #6]
 8010dca:	4603      	mov	r3, r0
 8010dcc:	80bb      	strh	r3, [r7, #4]
 8010dce:	460b      	mov	r3, r1
 8010dd0:	807b      	strh	r3, [r7, #2]
 8010dd2:	4613      	mov	r3, r2
 8010dd4:	803b      	strh	r3, [r7, #0]
	// send "Column Address Set" command
	_LCD_SendCommand(0x2A);
 8010dd6:	202a      	movs	r0, #42	; 0x2a
 8010dd8:	f000 fb80 	bl	80114dc <_LCD_SendCommand>
	_LCD_SendData(sc >> 8);
 8010ddc:	88fb      	ldrh	r3, [r7, #6]
 8010dde:	0a1b      	lsrs	r3, r3, #8
 8010de0:	b29b      	uxth	r3, r3
 8010de2:	b2db      	uxtb	r3, r3
 8010de4:	4618      	mov	r0, r3
 8010de6:	f000 fbab 	bl	8011540 <_LCD_SendData>
	_LCD_SendData(sc);
 8010dea:	88fb      	ldrh	r3, [r7, #6]
 8010dec:	b2db      	uxtb	r3, r3
 8010dee:	4618      	mov	r0, r3
 8010df0:	f000 fba6 	bl	8011540 <_LCD_SendData>
	_LCD_SendData(ec >> 8);
 8010df4:	887b      	ldrh	r3, [r7, #2]
 8010df6:	0a1b      	lsrs	r3, r3, #8
 8010df8:	b29b      	uxth	r3, r3
 8010dfa:	b2db      	uxtb	r3, r3
 8010dfc:	4618      	mov	r0, r3
 8010dfe:	f000 fb9f 	bl	8011540 <_LCD_SendData>
	_LCD_SendData(ec);
 8010e02:	887b      	ldrh	r3, [r7, #2]
 8010e04:	b2db      	uxtb	r3, r3
 8010e06:	4618      	mov	r0, r3
 8010e08:	f000 fb9a 	bl	8011540 <_LCD_SendData>

	// send "Page Address Set" command
	_LCD_SendCommand(0x2B);
 8010e0c:	202b      	movs	r0, #43	; 0x2b
 8010e0e:	f000 fb65 	bl	80114dc <_LCD_SendCommand>
	_LCD_SendData(sp >> 8);
 8010e12:	88bb      	ldrh	r3, [r7, #4]
 8010e14:	0a1b      	lsrs	r3, r3, #8
 8010e16:	b29b      	uxth	r3, r3
 8010e18:	b2db      	uxtb	r3, r3
 8010e1a:	4618      	mov	r0, r3
 8010e1c:	f000 fb90 	bl	8011540 <_LCD_SendData>
	_LCD_SendData(sp);
 8010e20:	88bb      	ldrh	r3, [r7, #4]
 8010e22:	b2db      	uxtb	r3, r3
 8010e24:	4618      	mov	r0, r3
 8010e26:	f000 fb8b 	bl	8011540 <_LCD_SendData>
	_LCD_SendData(ep >> 8);
 8010e2a:	883b      	ldrh	r3, [r7, #0]
 8010e2c:	0a1b      	lsrs	r3, r3, #8
 8010e2e:	b29b      	uxth	r3, r3
 8010e30:	b2db      	uxtb	r3, r3
 8010e32:	4618      	mov	r0, r3
 8010e34:	f000 fb84 	bl	8011540 <_LCD_SendData>
	_LCD_SendData(ep);
 8010e38:	883b      	ldrh	r3, [r7, #0]
 8010e3a:	b2db      	uxtb	r3, r3
 8010e3c:	4618      	mov	r0, r3
 8010e3e:	f000 fb7f 	bl	8011540 <_LCD_SendData>

	_LCD_SendCommand(0x2C);
 8010e42:	202c      	movs	r0, #44	; 0x2c
 8010e44:	f000 fb4a 	bl	80114dc <_LCD_SendCommand>
}
 8010e48:	bf00      	nop
 8010e4a:	370c      	adds	r7, #12
 8010e4c:	46bd      	mov	sp, r7
 8010e4e:	bd90      	pop	{r4, r7, pc}

08010e50 <ILI9341_Fill_Screen>:
 *
 * 	Sets address (entire screen) and Sends height*width ammount of colour information to LCD
 *
 */
void ILI9341_Fill_Screen(uint16_t colour)
{
 8010e50:	b580      	push	{r7, lr}
 8010e52:	b084      	sub	sp, #16
 8010e54:	af02      	add	r7, sp, #8
 8010e56:	4603      	mov	r3, r0
 8010e58:	80fb      	strh	r3, [r7, #6]
	ILI9341_Set_Frame(0,0,LCD_WIDTH,LCD_HEIGHT);
 8010e5a:	4b10      	ldr	r3, [pc, #64]	; (8010e9c <ILI9341_Fill_Screen+0x4c>)
 8010e5c:	881b      	ldrh	r3, [r3, #0]
 8010e5e:	b29a      	uxth	r2, r3
 8010e60:	4b0f      	ldr	r3, [pc, #60]	; (8010ea0 <ILI9341_Fill_Screen+0x50>)
 8010e62:	881b      	ldrh	r3, [r3, #0]
 8010e64:	b29b      	uxth	r3, r3
 8010e66:	2100      	movs	r1, #0
 8010e68:	2000      	movs	r0, #0
 8010e6a:	f7ff ffa5 	bl	8010db8 <ILI9341_Set_Frame>
	_LCD_Write_Frame(0, 0, colour, LCD_WIDTH*LCD_HEIGHT, AREA_CHUNK);
 8010e6e:	4b0b      	ldr	r3, [pc, #44]	; (8010e9c <ILI9341_Fill_Screen+0x4c>)
 8010e70:	881b      	ldrh	r3, [r3, #0]
 8010e72:	b29b      	uxth	r3, r3
 8010e74:	461a      	mov	r2, r3
 8010e76:	4b0a      	ldr	r3, [pc, #40]	; (8010ea0 <ILI9341_Fill_Screen+0x50>)
 8010e78:	881b      	ldrh	r3, [r3, #0]
 8010e7a:	b29b      	uxth	r3, r3
 8010e7c:	fb03 f302 	mul.w	r3, r3, r2
 8010e80:	4619      	mov	r1, r3
 8010e82:	88fa      	ldrh	r2, [r7, #6]
 8010e84:	2304      	movs	r3, #4
 8010e86:	9300      	str	r3, [sp, #0]
 8010e88:	460b      	mov	r3, r1
 8010e8a:	2100      	movs	r1, #0
 8010e8c:	2000      	movs	r0, #0
 8010e8e:	f000 fa75 	bl	801137c <_LCD_Write_Frame>
}
 8010e92:	bf00      	nop
 8010e94:	3708      	adds	r7, #8
 8010e96:	46bd      	mov	sp, r7
 8010e98:	bd80      	pop	{r7, pc}
 8010e9a:	bf00      	nop
 8010e9c:	20000ebe 	.word	0x20000ebe
 8010ea0:	20000ebc 	.word	0x20000ebc

08010ea4 <ILI9341_Draw_Pixel>:
 * 	Using pixels to draw big simple structures is not recommended as it is really slow
 * 	Try using either rectangles or lines if possible
 *
 */
void ILI9341_Draw_Pixel(uint16_t x,uint16_t y,uint16_t colour)
{
 8010ea4:	b580      	push	{r7, lr}
 8010ea6:	b08e      	sub	sp, #56	; 0x38
 8010ea8:	af00      	add	r7, sp, #0
 8010eaa:	4603      	mov	r3, r0
 8010eac:	80fb      	strh	r3, [r7, #6]
 8010eae:	460b      	mov	r3, r1
 8010eb0:	80bb      	strh	r3, [r7, #4]
 8010eb2:	4613      	mov	r3, r2
 8010eb4:	807b      	strh	r3, [r7, #2]
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8010eb6:	4b98      	ldr	r3, [pc, #608]	; (8011118 <ILI9341_Draw_Pixel+0x274>)
 8010eb8:	881b      	ldrh	r3, [r3, #0]
 8010eba:	b29b      	uxth	r3, r3
 8010ebc:	88fa      	ldrh	r2, [r7, #6]
 8010ebe:	429a      	cmp	r2, r3
 8010ec0:	f080 8143 	bcs.w	801114a <ILI9341_Draw_Pixel+0x2a6>
 8010ec4:	4b95      	ldr	r3, [pc, #596]	; (801111c <ILI9341_Draw_Pixel+0x278>)
 8010ec6:	881b      	ldrh	r3, [r3, #0]
 8010ec8:	b29b      	uxth	r3, r3
 8010eca:	88ba      	ldrh	r2, [r7, #4]
 8010ecc:	429a      	cmp	r2, r3
 8010ece:	f080 813c 	bcs.w	801114a <ILI9341_Draw_Pixel+0x2a6>

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 8010ed2:	4b93      	ldr	r3, [pc, #588]	; (8011120 <ILI9341_Draw_Pixel+0x27c>)
 8010ed4:	695b      	ldr	r3, [r3, #20]
 8010ed6:	4a92      	ldr	r2, [pc, #584]	; (8011120 <ILI9341_Draw_Pixel+0x27c>)
 8010ed8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010edc:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8010ede:	4b90      	ldr	r3, [pc, #576]	; (8011120 <ILI9341_Draw_Pixel+0x27c>)
 8010ee0:	695b      	ldr	r3, [r3, #20]
 8010ee2:	4a8f      	ldr	r2, [pc, #572]	; (8011120 <ILI9341_Draw_Pixel+0x27c>)
 8010ee4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010ee8:	6153      	str	r3, [r2, #20]
	_SPI_SendByte(0x2A, 0, 10);
 8010eea:	220a      	movs	r2, #10
 8010eec:	2100      	movs	r1, #0
 8010eee:	202a      	movs	r0, #42	; 0x2a
 8010ef0:	f000 fb58 	bl	80115a4 <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8010ef4:	2300      	movs	r3, #0
 8010ef6:	637b      	str	r3, [r7, #52]	; 0x34
 8010ef8:	e008      	b.n	8010f0c <ILI9341_Draw_Pixel+0x68>
 8010efa:	4b89      	ldr	r3, [pc, #548]	; (8011120 <ILI9341_Draw_Pixel+0x27c>)
 8010efc:	695b      	ldr	r3, [r3, #20]
 8010efe:	4a88      	ldr	r2, [pc, #544]	; (8011120 <ILI9341_Draw_Pixel+0x27c>)
 8010f00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010f04:	6153      	str	r3, [r2, #20]
 8010f06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f08:	3301      	adds	r3, #1
 8010f0a:	637b      	str	r3, [r7, #52]	; 0x34
 8010f0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f0e:	2b02      	cmp	r3, #2
 8010f10:	ddf3      	ble.n	8010efa <ILI9341_Draw_Pixel+0x56>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8010f12:	4b83      	ldr	r3, [pc, #524]	; (8011120 <ILI9341_Draw_Pixel+0x27c>)
 8010f14:	695b      	ldr	r3, [r3, #20]
 8010f16:	4a82      	ldr	r2, [pc, #520]	; (8011120 <ILI9341_Draw_Pixel+0x27c>)
 8010f18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010f1c:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8010f1e:	4b80      	ldr	r3, [pc, #512]	; (8011120 <ILI9341_Draw_Pixel+0x27c>)
 8010f20:	695b      	ldr	r3, [r3, #20]
 8010f22:	4a7f      	ldr	r2, [pc, #508]	; (8011120 <ILI9341_Draw_Pixel+0x27c>)
 8010f24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010f28:	6153      	str	r3, [r2, #20]

	//XDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8010f2a:	4b7d      	ldr	r3, [pc, #500]	; (8011120 <ILI9341_Draw_Pixel+0x27c>)
 8010f2c:	695b      	ldr	r3, [r3, #20]
 8010f2e:	4a7c      	ldr	r2, [pc, #496]	; (8011120 <ILI9341_Draw_Pixel+0x27c>)
 8010f30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010f34:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer[4] = { x >> 8, x, (x + 1) >> 8, (x + 1) };
 8010f36:	88fb      	ldrh	r3, [r7, #6]
 8010f38:	0a1b      	lsrs	r3, r3, #8
 8010f3a:	b29b      	uxth	r3, r3
 8010f3c:	b2db      	uxtb	r3, r3
 8010f3e:	753b      	strb	r3, [r7, #20]
 8010f40:	88fb      	ldrh	r3, [r7, #6]
 8010f42:	b2db      	uxtb	r3, r3
 8010f44:	757b      	strb	r3, [r7, #21]
 8010f46:	88fb      	ldrh	r3, [r7, #6]
 8010f48:	3301      	adds	r3, #1
 8010f4a:	121b      	asrs	r3, r3, #8
 8010f4c:	b2db      	uxtb	r3, r3
 8010f4e:	75bb      	strb	r3, [r7, #22]
 8010f50:	88fb      	ldrh	r3, [r7, #6]
 8010f52:	b2db      	uxtb	r3, r3
 8010f54:	3301      	adds	r3, #1
 8010f56:	b2db      	uxtb	r3, r3
 8010f58:	75fb      	strb	r3, [r7, #23]
	_SPI_SendByteMultiByte(Temp_Buffer, 4, 0, 10);
 8010f5a:	f107 0014 	add.w	r0, r7, #20
 8010f5e:	230a      	movs	r3, #10
 8010f60:	2200      	movs	r2, #0
 8010f62:	2104      	movs	r1, #4
 8010f64:	f000 fb50 	bl	8011608 <_SPI_SendByteMultiByte>
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1 );
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8010f68:	2300      	movs	r3, #0
 8010f6a:	633b      	str	r3, [r7, #48]	; 0x30
 8010f6c:	e008      	b.n	8010f80 <ILI9341_Draw_Pixel+0xdc>
 8010f6e:	4b6c      	ldr	r3, [pc, #432]	; (8011120 <ILI9341_Draw_Pixel+0x27c>)
 8010f70:	695b      	ldr	r3, [r3, #20]
 8010f72:	4a6b      	ldr	r2, [pc, #428]	; (8011120 <ILI9341_Draw_Pixel+0x27c>)
 8010f74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010f78:	6153      	str	r3, [r2, #20]
 8010f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f7c:	3301      	adds	r3, #1
 8010f7e:	633b      	str	r3, [r7, #48]	; 0x30
 8010f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f82:	2b02      	cmp	r3, #2
 8010f84:	ddf3      	ble.n	8010f6e <ILI9341_Draw_Pixel+0xca>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8010f86:	4b66      	ldr	r3, [pc, #408]	; (8011120 <ILI9341_Draw_Pixel+0x27c>)
 8010f88:	695b      	ldr	r3, [r3, #20]
 8010f8a:	4a65      	ldr	r2, [pc, #404]	; (8011120 <ILI9341_Draw_Pixel+0x27c>)
 8010f8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010f90:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 8010f92:	4b63      	ldr	r3, [pc, #396]	; (8011120 <ILI9341_Draw_Pixel+0x27c>)
 8010f94:	695b      	ldr	r3, [r3, #20]
 8010f96:	4a62      	ldr	r2, [pc, #392]	; (8011120 <ILI9341_Draw_Pixel+0x27c>)
 8010f98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010f9c:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8010f9e:	4b60      	ldr	r3, [pc, #384]	; (8011120 <ILI9341_Draw_Pixel+0x27c>)
 8010fa0:	695b      	ldr	r3, [r3, #20]
 8010fa2:	4a5f      	ldr	r2, [pc, #380]	; (8011120 <ILI9341_Draw_Pixel+0x27c>)
 8010fa4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010fa8:	6153      	str	r3, [r2, #20]
	_SPI_SendByte(0x2B, 0, 10);
 8010faa:	220a      	movs	r2, #10
 8010fac:	2100      	movs	r1, #0
 8010fae:	202b      	movs	r0, #43	; 0x2b
 8010fb0:	f000 faf8 	bl	80115a4 <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8010fb4:	2300      	movs	r3, #0
 8010fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010fb8:	e008      	b.n	8010fcc <ILI9341_Draw_Pixel+0x128>
 8010fba:	4b59      	ldr	r3, [pc, #356]	; (8011120 <ILI9341_Draw_Pixel+0x27c>)
 8010fbc:	695b      	ldr	r3, [r3, #20]
 8010fbe:	4a58      	ldr	r2, [pc, #352]	; (8011120 <ILI9341_Draw_Pixel+0x27c>)
 8010fc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010fc4:	6153      	str	r3, [r2, #20]
 8010fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fc8:	3301      	adds	r3, #1
 8010fca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fce:	2b02      	cmp	r3, #2
 8010fd0:	ddf3      	ble.n	8010fba <ILI9341_Draw_Pixel+0x116>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8010fd2:	4b53      	ldr	r3, [pc, #332]	; (8011120 <ILI9341_Draw_Pixel+0x27c>)
 8010fd4:	695b      	ldr	r3, [r3, #20]
 8010fd6:	4a52      	ldr	r2, [pc, #328]	; (8011120 <ILI9341_Draw_Pixel+0x27c>)
 8010fd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010fdc:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8010fde:	4b50      	ldr	r3, [pc, #320]	; (8011120 <ILI9341_Draw_Pixel+0x27c>)
 8010fe0:	695b      	ldr	r3, [r3, #20]
 8010fe2:	4a4f      	ldr	r2, [pc, #316]	; (8011120 <ILI9341_Draw_Pixel+0x27c>)
 8010fe4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010fe8:	6153      	str	r3, [r2, #20]

	//YDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8010fea:	4b4d      	ldr	r3, [pc, #308]	; (8011120 <ILI9341_Draw_Pixel+0x27c>)
 8010fec:	695b      	ldr	r3, [r3, #20]
 8010fee:	4a4c      	ldr	r2, [pc, #304]	; (8011120 <ILI9341_Draw_Pixel+0x27c>)
 8010ff0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010ff4:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer1[4] = { y >> 8, y, (y + 1) >> 8, (y + 1) };
 8010ff6:	88bb      	ldrh	r3, [r7, #4]
 8010ff8:	0a1b      	lsrs	r3, r3, #8
 8010ffa:	b29b      	uxth	r3, r3
 8010ffc:	b2db      	uxtb	r3, r3
 8010ffe:	743b      	strb	r3, [r7, #16]
 8011000:	88bb      	ldrh	r3, [r7, #4]
 8011002:	b2db      	uxtb	r3, r3
 8011004:	747b      	strb	r3, [r7, #17]
 8011006:	88bb      	ldrh	r3, [r7, #4]
 8011008:	3301      	adds	r3, #1
 801100a:	121b      	asrs	r3, r3, #8
 801100c:	b2db      	uxtb	r3, r3
 801100e:	74bb      	strb	r3, [r7, #18]
 8011010:	88bb      	ldrh	r3, [r7, #4]
 8011012:	b2db      	uxtb	r3, r3
 8011014:	3301      	adds	r3, #1
 8011016:	b2db      	uxtb	r3, r3
 8011018:	74fb      	strb	r3, [r7, #19]
	_SPI_SendByteMultiByte(Temp_Buffer1, 4, 0, 10);
 801101a:	f107 0010 	add.w	r0, r7, #16
 801101e:	230a      	movs	r3, #10
 8011020:	2200      	movs	r2, #0
 8011022:	2104      	movs	r1, #4
 8011024:	f000 faf0 	bl	8011608 <_SPI_SendByteMultiByte>
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1 );
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8011028:	2300      	movs	r3, #0
 801102a:	62bb      	str	r3, [r7, #40]	; 0x28
 801102c:	e008      	b.n	8011040 <ILI9341_Draw_Pixel+0x19c>
 801102e:	4b3c      	ldr	r3, [pc, #240]	; (8011120 <ILI9341_Draw_Pixel+0x27c>)
 8011030:	695b      	ldr	r3, [r3, #20]
 8011032:	4a3b      	ldr	r2, [pc, #236]	; (8011120 <ILI9341_Draw_Pixel+0x27c>)
 8011034:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011038:	6153      	str	r3, [r2, #20]
 801103a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801103c:	3301      	adds	r3, #1
 801103e:	62bb      	str	r3, [r7, #40]	; 0x28
 8011040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011042:	2b02      	cmp	r3, #2
 8011044:	ddf3      	ble.n	801102e <ILI9341_Draw_Pixel+0x18a>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8011046:	4b36      	ldr	r3, [pc, #216]	; (8011120 <ILI9341_Draw_Pixel+0x27c>)
 8011048:	695b      	ldr	r3, [r3, #20]
 801104a:	4a35      	ldr	r2, [pc, #212]	; (8011120 <ILI9341_Draw_Pixel+0x27c>)
 801104c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011050:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 8011052:	4b33      	ldr	r3, [pc, #204]	; (8011120 <ILI9341_Draw_Pixel+0x27c>)
 8011054:	695b      	ldr	r3, [r3, #20]
 8011056:	4a32      	ldr	r2, [pc, #200]	; (8011120 <ILI9341_Draw_Pixel+0x27c>)
 8011058:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801105c:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 801105e:	4b30      	ldr	r3, [pc, #192]	; (8011120 <ILI9341_Draw_Pixel+0x27c>)
 8011060:	695b      	ldr	r3, [r3, #20]
 8011062:	4a2f      	ldr	r2, [pc, #188]	; (8011120 <ILI9341_Draw_Pixel+0x27c>)
 8011064:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011068:	6153      	str	r3, [r2, #20]
	_SPI_SendByte(0x2C, 0, 10);
 801106a:	220a      	movs	r2, #10
 801106c:	2100      	movs	r1, #0
 801106e:	202c      	movs	r0, #44	; 0x2c
 8011070:	f000 fa98 	bl	80115a4 <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8011074:	2300      	movs	r3, #0
 8011076:	627b      	str	r3, [r7, #36]	; 0x24
 8011078:	e008      	b.n	801108c <ILI9341_Draw_Pixel+0x1e8>
 801107a:	4b29      	ldr	r3, [pc, #164]	; (8011120 <ILI9341_Draw_Pixel+0x27c>)
 801107c:	695b      	ldr	r3, [r3, #20]
 801107e:	4a28      	ldr	r2, [pc, #160]	; (8011120 <ILI9341_Draw_Pixel+0x27c>)
 8011080:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011084:	6153      	str	r3, [r2, #20]
 8011086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011088:	3301      	adds	r3, #1
 801108a:	627b      	str	r3, [r7, #36]	; 0x24
 801108c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801108e:	2b02      	cmp	r3, #2
 8011090:	ddf3      	ble.n	801107a <ILI9341_Draw_Pixel+0x1d6>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8011092:	4b23      	ldr	r3, [pc, #140]	; (8011120 <ILI9341_Draw_Pixel+0x27c>)
 8011094:	695b      	ldr	r3, [r3, #20]
 8011096:	4a22      	ldr	r2, [pc, #136]	; (8011120 <ILI9341_Draw_Pixel+0x27c>)
 8011098:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801109c:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 801109e:	4b20      	ldr	r3, [pc, #128]	; (8011120 <ILI9341_Draw_Pixel+0x27c>)
 80110a0:	695b      	ldr	r3, [r3, #20]
 80110a2:	4a1f      	ldr	r2, [pc, #124]	; (8011120 <ILI9341_Draw_Pixel+0x27c>)
 80110a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80110a8:	6153      	str	r3, [r2, #20]

	//COLOUR
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80110aa:	4b1d      	ldr	r3, [pc, #116]	; (8011120 <ILI9341_Draw_Pixel+0x27c>)
 80110ac:	695b      	ldr	r3, [r3, #20]
 80110ae:	4a1c      	ldr	r2, [pc, #112]	; (8011120 <ILI9341_Draw_Pixel+0x27c>)
 80110b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80110b4:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer2[2] = {colour>>8, colour};
 80110b6:	887b      	ldrh	r3, [r7, #2]
 80110b8:	0a1b      	lsrs	r3, r3, #8
 80110ba:	b29b      	uxth	r3, r3
 80110bc:	b2db      	uxtb	r3, r3
 80110be:	733b      	strb	r3, [r7, #12]
 80110c0:	887b      	ldrh	r3, [r7, #2]
 80110c2:	b2db      	uxtb	r3, r3
 80110c4:	737b      	strb	r3, [r7, #13]
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1 );
	_SPI_SendByteMultiByte(Temp_Buffer2, 2, 0, 1);
 80110c6:	f107 000c 	add.w	r0, r7, #12
 80110ca:	2301      	movs	r3, #1
 80110cc:	2200      	movs	r2, #0
 80110ce:	2102      	movs	r1, #2
 80110d0:	f000 fa9a 	bl	8011608 <_SPI_SendByteMultiByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80110d4:	2300      	movs	r3, #0
 80110d6:	623b      	str	r3, [r7, #32]
 80110d8:	e008      	b.n	80110ec <ILI9341_Draw_Pixel+0x248>
 80110da:	4b11      	ldr	r3, [pc, #68]	; (8011120 <ILI9341_Draw_Pixel+0x27c>)
 80110dc:	695b      	ldr	r3, [r3, #20]
 80110de:	4a10      	ldr	r2, [pc, #64]	; (8011120 <ILI9341_Draw_Pixel+0x27c>)
 80110e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80110e4:	6153      	str	r3, [r2, #20]
 80110e6:	6a3b      	ldr	r3, [r7, #32]
 80110e8:	3301      	adds	r3, #1
 80110ea:	623b      	str	r3, [r7, #32]
 80110ec:	6a3b      	ldr	r3, [r7, #32]
 80110ee:	2b02      	cmp	r3, #2
 80110f0:	ddf3      	ble.n	80110da <ILI9341_Draw_Pixel+0x236>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80110f2:	2300      	movs	r3, #0
 80110f4:	61fb      	str	r3, [r7, #28]
 80110f6:	e008      	b.n	801110a <ILI9341_Draw_Pixel+0x266>
 80110f8:	4b09      	ldr	r3, [pc, #36]	; (8011120 <ILI9341_Draw_Pixel+0x27c>)
 80110fa:	695b      	ldr	r3, [r3, #20]
 80110fc:	4a08      	ldr	r2, [pc, #32]	; (8011120 <ILI9341_Draw_Pixel+0x27c>)
 80110fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011102:	6153      	str	r3, [r2, #20]
 8011104:	69fb      	ldr	r3, [r7, #28]
 8011106:	3301      	adds	r3, #1
 8011108:	61fb      	str	r3, [r7, #28]
 801110a:	69fb      	ldr	r3, [r7, #28]
 801110c:	2b02      	cmp	r3, #2
 801110e:	ddf3      	ble.n	80110f8 <ILI9341_Draw_Pixel+0x254>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8011110:	2300      	movs	r3, #0
 8011112:	61bb      	str	r3, [r7, #24]
 8011114:	e00f      	b.n	8011136 <ILI9341_Draw_Pixel+0x292>
 8011116:	bf00      	nop
 8011118:	20000ebe 	.word	0x20000ebe
 801111c:	20000ebc 	.word	0x20000ebc
 8011120:	48000400 	.word	0x48000400
 8011124:	4b0b      	ldr	r3, [pc, #44]	; (8011154 <ILI9341_Draw_Pixel+0x2b0>)
 8011126:	695b      	ldr	r3, [r3, #20]
 8011128:	4a0a      	ldr	r2, [pc, #40]	; (8011154 <ILI9341_Draw_Pixel+0x2b0>)
 801112a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801112e:	6153      	str	r3, [r2, #20]
 8011130:	69bb      	ldr	r3, [r7, #24]
 8011132:	3301      	adds	r3, #1
 8011134:	61bb      	str	r3, [r7, #24]
 8011136:	69bb      	ldr	r3, [r7, #24]
 8011138:	2b02      	cmp	r3, #2
 801113a:	ddf3      	ble.n	8011124 <ILI9341_Draw_Pixel+0x280>


	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 801113c:	4b05      	ldr	r3, [pc, #20]	; (8011154 <ILI9341_Draw_Pixel+0x2b0>)
 801113e:	695b      	ldr	r3, [r3, #20]
 8011140:	4a04      	ldr	r2, [pc, #16]	; (8011154 <ILI9341_Draw_Pixel+0x2b0>)
 8011142:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011146:	6153      	str	r3, [r2, #20]
 8011148:	e000      	b.n	801114c <ILI9341_Draw_Pixel+0x2a8>
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 801114a:	bf00      	nop


}
 801114c:	3738      	adds	r7, #56	; 0x38
 801114e:	46bd      	mov	sp, r7
 8011150:	bd80      	pop	{r7, pc}
 8011152:	bf00      	nop
 8011154:	48000400 	.word	0x48000400

08011158 <ILI9341_Draw_Rectangle>:
 *
 *
 */

void ILI9341_Draw_Rectangle(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t height, uint16_t colour, CHUNK_Type chunk_type)
{
 8011158:	b590      	push	{r4, r7, lr}
 801115a:	b087      	sub	sp, #28
 801115c:	af02      	add	r7, sp, #8
 801115e:	4604      	mov	r4, r0
 8011160:	4608      	mov	r0, r1
 8011162:	4611      	mov	r1, r2
 8011164:	461a      	mov	r2, r3
 8011166:	4623      	mov	r3, r4
 8011168:	80fb      	strh	r3, [r7, #6]
 801116a:	4603      	mov	r3, r0
 801116c:	80bb      	strh	r3, [r7, #4]
 801116e:	460b      	mov	r3, r1
 8011170:	807b      	strh	r3, [r7, #2]
 8011172:	4613      	mov	r3, r2
 8011174:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 8011176:	4b41      	ldr	r3, [pc, #260]	; (801127c <ILI9341_Draw_Rectangle+0x124>)
 8011178:	881b      	ldrh	r3, [r3, #0]
 801117a:	b29b      	uxth	r3, r3
 801117c:	88fa      	ldrh	r2, [r7, #6]
 801117e:	429a      	cmp	r2, r3
 8011180:	d278      	bcs.n	8011274 <ILI9341_Draw_Rectangle+0x11c>
 8011182:	4b3f      	ldr	r3, [pc, #252]	; (8011280 <ILI9341_Draw_Rectangle+0x128>)
 8011184:	881b      	ldrh	r3, [r3, #0]
 8011186:	b29b      	uxth	r3, r3
 8011188:	88ba      	ldrh	r2, [r7, #4]
 801118a:	429a      	cmp	r2, r3
 801118c:	d272      	bcs.n	8011274 <ILI9341_Draw_Rectangle+0x11c>
	if((xpos+width-1)>=LCD_WIDTH)
 801118e:	88fa      	ldrh	r2, [r7, #6]
 8011190:	887b      	ldrh	r3, [r7, #2]
 8011192:	4413      	add	r3, r2
 8011194:	3b01      	subs	r3, #1
 8011196:	4a39      	ldr	r2, [pc, #228]	; (801127c <ILI9341_Draw_Rectangle+0x124>)
 8011198:	8812      	ldrh	r2, [r2, #0]
 801119a:	b292      	uxth	r2, r2
 801119c:	4293      	cmp	r3, r2
 801119e:	db05      	blt.n	80111ac <ILI9341_Draw_Rectangle+0x54>
		{
			width=LCD_WIDTH-xpos;
 80111a0:	4b36      	ldr	r3, [pc, #216]	; (801127c <ILI9341_Draw_Rectangle+0x124>)
 80111a2:	881b      	ldrh	r3, [r3, #0]
 80111a4:	b29a      	uxth	r2, r3
 80111a6:	88fb      	ldrh	r3, [r7, #6]
 80111a8:	1ad3      	subs	r3, r2, r3
 80111aa:	807b      	strh	r3, [r7, #2]
		}
	if((ypos+height-1)>=LCD_HEIGHT)
 80111ac:	88ba      	ldrh	r2, [r7, #4]
 80111ae:	883b      	ldrh	r3, [r7, #0]
 80111b0:	4413      	add	r3, r2
 80111b2:	3b01      	subs	r3, #1
 80111b4:	4a32      	ldr	r2, [pc, #200]	; (8011280 <ILI9341_Draw_Rectangle+0x128>)
 80111b6:	8812      	ldrh	r2, [r2, #0]
 80111b8:	b292      	uxth	r2, r2
 80111ba:	4293      	cmp	r3, r2
 80111bc:	db05      	blt.n	80111ca <ILI9341_Draw_Rectangle+0x72>
		{
			height=LCD_HEIGHT-ypos;
 80111be:	4b30      	ldr	r3, [pc, #192]	; (8011280 <ILI9341_Draw_Rectangle+0x128>)
 80111c0:	881b      	ldrh	r3, [r3, #0]
 80111c2:	b29a      	uxth	r2, r3
 80111c4:	88bb      	ldrh	r3, [r7, #4]
 80111c6:	1ad3      	subs	r3, r2, r3
 80111c8:	803b      	strh	r3, [r7, #0]
		}
	ILI9341_Set_Frame(	xpos,
						ypos,
						(xpos + width) - 1,
 80111ca:	88fa      	ldrh	r2, [r7, #6]
 80111cc:	887b      	ldrh	r3, [r7, #2]
 80111ce:	4413      	add	r3, r2
 80111d0:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 80111d2:	3b01      	subs	r3, #1
 80111d4:	b29c      	uxth	r4, r3
						(ypos + height) - 1);
 80111d6:	88ba      	ldrh	r2, [r7, #4]
 80111d8:	883b      	ldrh	r3, [r7, #0]
 80111da:	4413      	add	r3, r2
 80111dc:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 80111de:	3b01      	subs	r3, #1
 80111e0:	b29b      	uxth	r3, r3
 80111e2:	88b9      	ldrh	r1, [r7, #4]
 80111e4:	88f8      	ldrh	r0, [r7, #6]
 80111e6:	4622      	mov	r2, r4
 80111e8:	f7ff fde6 	bl	8010db8 <ILI9341_Set_Frame>
	// if odd numbered rect area is requested, we round down to nearest even number
	// to keep _LCD_Write_Frame() happy.

	// Note, truncated pixel will be needed at function end.

	uint16_t size = height*width;
 80111ec:	883a      	ldrh	r2, [r7, #0]
 80111ee:	887b      	ldrh	r3, [r7, #2]
 80111f0:	fb12 f303 	smulbb	r3, r2, r3
 80111f4:	81fb      	strh	r3, [r7, #14]
	uint8_t truncated = 0;
 80111f6:	2300      	movs	r3, #0
 80111f8:	737b      	strb	r3, [r7, #13]

	if((size & 1) && (size > 1))		// don't round down to zero!
 80111fa:	89fb      	ldrh	r3, [r7, #14]
 80111fc:	f003 0301 	and.w	r3, r3, #1
 8011200:	2b00      	cmp	r3, #0
 8011202:	d009      	beq.n	8011218 <ILI9341_Draw_Rectangle+0xc0>
 8011204:	89fb      	ldrh	r3, [r7, #14]
 8011206:	2b01      	cmp	r3, #1
 8011208:	d906      	bls.n	8011218 <ILI9341_Draw_Rectangle+0xc0>
	{
		truncated = 1;
 801120a:	2301      	movs	r3, #1
 801120c:	737b      	strb	r3, [r7, #13]
	 	size = ((size >> 1) * 2);
 801120e:	89fb      	ldrh	r3, [r7, #14]
 8011210:	085b      	lsrs	r3, r3, #1
 8011212:	b29b      	uxth	r3, r3
 8011214:	005b      	lsls	r3, r3, #1
 8011216:	81fb      	strh	r3, [r7, #14]
	}

	_LCD_Write_Frame(	xpos,
 8011218:	89fc      	ldrh	r4, [r7, #14]
 801121a:	8c3a      	ldrh	r2, [r7, #32]
 801121c:	88b9      	ldrh	r1, [r7, #4]
 801121e:	88f8      	ldrh	r0, [r7, #6]
 8011220:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011224:	9300      	str	r3, [sp, #0]
 8011226:	4623      	mov	r3, r4
 8011228:	f000 f8a8 	bl	801137c <_LCD_Write_Frame>
						colour,
						size,
						chunk_type);

	// add the truncated pixel now
	if(truncated)
 801122c:	7b7b      	ldrb	r3, [r7, #13]
 801122e:	2b00      	cmp	r3, #0
 8011230:	d021      	beq.n	8011276 <ILI9341_Draw_Rectangle+0x11e>
	{
		ILI9341_Draw_Pixel(	(xpos + width) - 2,
 8011232:	88fa      	ldrh	r2, [r7, #6]
 8011234:	887b      	ldrh	r3, [r7, #2]
 8011236:	4413      	add	r3, r2
 8011238:	b29b      	uxth	r3, r3
 801123a:	3b02      	subs	r3, #2
 801123c:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 801123e:	88ba      	ldrh	r2, [r7, #4]
 8011240:	883b      	ldrh	r3, [r7, #0]
 8011242:	4413      	add	r3, r2
 8011244:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 2,
 8011246:	3b01      	subs	r3, #1
 8011248:	b29b      	uxth	r3, r3
 801124a:	8c3a      	ldrh	r2, [r7, #32]
 801124c:	4619      	mov	r1, r3
 801124e:	f7ff fe29 	bl	8010ea4 <ILI9341_Draw_Pixel>
							colour);
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 8011252:	88fa      	ldrh	r2, [r7, #6]
 8011254:	887b      	ldrh	r3, [r7, #2]
 8011256:	4413      	add	r3, r2
 8011258:	b29b      	uxth	r3, r3
 801125a:	3b01      	subs	r3, #1
 801125c:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 801125e:	88ba      	ldrh	r2, [r7, #4]
 8011260:	883b      	ldrh	r3, [r7, #0]
 8011262:	4413      	add	r3, r2
 8011264:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 8011266:	3b01      	subs	r3, #1
 8011268:	b29b      	uxth	r3, r3
 801126a:	8c3a      	ldrh	r2, [r7, #32]
 801126c:	4619      	mov	r1, r3
 801126e:	f7ff fe19 	bl	8010ea4 <ILI9341_Draw_Pixel>
 8011272:	e000      	b.n	8011276 <ILI9341_Draw_Rectangle+0x11e>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 8011274:	bf00      	nop
							colour);
	}
}
 8011276:	3714      	adds	r7, #20
 8011278:	46bd      	mov	sp, r7
 801127a:	bd90      	pop	{r4, r7, pc}
 801127c:	20000ebe 	.word	0x20000ebe
 8011280:	20000ebc 	.word	0x20000ebc

08011284 <ILI9341_Set_Rotation>:
 *
 * 	Set LCD orientation
 *
 */
void ILI9341_Set_Rotation(uint8_t rotation)
{
 8011284:	b580      	push	{r7, lr}
 8011286:	b084      	sub	sp, #16
 8011288:	af00      	add	r7, sp, #0
 801128a:	4603      	mov	r3, r0
 801128c:	71fb      	strb	r3, [r7, #7]

	uint8_t screen_rotation = rotation;
 801128e:	79fb      	ldrb	r3, [r7, #7]
 8011290:	73fb      	strb	r3, [r7, #15]

	_LCD_SendCommand(0x36);
 8011292:	2036      	movs	r0, #54	; 0x36
 8011294:	f000 f922 	bl	80114dc <_LCD_SendCommand>
	//HAL_Delay(1);

	switch(screen_rotation)
 8011298:	7bfb      	ldrb	r3, [r7, #15]
 801129a:	2b03      	cmp	r3, #3
 801129c:	d836      	bhi.n	801130c <ILI9341_Set_Rotation+0x88>
 801129e:	a201      	add	r2, pc, #4	; (adr r2, 80112a4 <ILI9341_Set_Rotation+0x20>)
 80112a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112a4:	080112b5 	.word	0x080112b5
 80112a8:	080112cb 	.word	0x080112cb
 80112ac:	080112e1 	.word	0x080112e1
 80112b0:	080112f7 	.word	0x080112f7
	{
		case SCREEN_VERTICAL_1:
			_LCD_SendData(0x40|0x08);
 80112b4:	2048      	movs	r0, #72	; 0x48
 80112b6:	f000 f943 	bl	8011540 <_LCD_SendData>
			LCD_WIDTH = 240;
 80112ba:	4b17      	ldr	r3, [pc, #92]	; (8011318 <ILI9341_Set_Rotation+0x94>)
 80112bc:	22f0      	movs	r2, #240	; 0xf0
 80112be:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 80112c0:	4b16      	ldr	r3, [pc, #88]	; (801131c <ILI9341_Set_Rotation+0x98>)
 80112c2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80112c6:	801a      	strh	r2, [r3, #0]
			break;
 80112c8:	e021      	b.n	801130e <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_1:
			_LCD_SendData(0x20|0x08);
 80112ca:	2028      	movs	r0, #40	; 0x28
 80112cc:	f000 f938 	bl	8011540 <_LCD_SendData>
			LCD_WIDTH  = 320;
 80112d0:	4b11      	ldr	r3, [pc, #68]	; (8011318 <ILI9341_Set_Rotation+0x94>)
 80112d2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80112d6:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 80112d8:	4b10      	ldr	r3, [pc, #64]	; (801131c <ILI9341_Set_Rotation+0x98>)
 80112da:	22f0      	movs	r2, #240	; 0xf0
 80112dc:	801a      	strh	r2, [r3, #0]
			break;
 80112de:	e016      	b.n	801130e <ILI9341_Set_Rotation+0x8a>
		case SCREEN_VERTICAL_2:
			_LCD_SendData(0x80|0x08);
 80112e0:	2088      	movs	r0, #136	; 0x88
 80112e2:	f000 f92d 	bl	8011540 <_LCD_SendData>
			LCD_WIDTH  = 240;
 80112e6:	4b0c      	ldr	r3, [pc, #48]	; (8011318 <ILI9341_Set_Rotation+0x94>)
 80112e8:	22f0      	movs	r2, #240	; 0xf0
 80112ea:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 80112ec:	4b0b      	ldr	r3, [pc, #44]	; (801131c <ILI9341_Set_Rotation+0x98>)
 80112ee:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80112f2:	801a      	strh	r2, [r3, #0]
			break;
 80112f4:	e00b      	b.n	801130e <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_2:
			_LCD_SendData(0x40|0x80|0x20|0x08);
 80112f6:	20e8      	movs	r0, #232	; 0xe8
 80112f8:	f000 f922 	bl	8011540 <_LCD_SendData>
			LCD_WIDTH  = 320;
 80112fc:	4b06      	ldr	r3, [pc, #24]	; (8011318 <ILI9341_Set_Rotation+0x94>)
 80112fe:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8011302:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8011304:	4b05      	ldr	r3, [pc, #20]	; (801131c <ILI9341_Set_Rotation+0x98>)
 8011306:	22f0      	movs	r2, #240	; 0xf0
 8011308:	801a      	strh	r2, [r3, #0]
			break;
 801130a:	e000      	b.n	801130e <ILI9341_Set_Rotation+0x8a>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 801130c:	bf00      	nop
	}
}
 801130e:	bf00      	nop
 8011310:	3710      	adds	r7, #16
 8011312:	46bd      	mov	sp, r7
 8011314:	bd80      	pop	{r7, pc}
 8011316:	bf00      	nop
 8011318:	20000ebe 	.word	0x20000ebe
 801131c:	20000ebc 	.word	0x20000ebc

08011320 <_LCD_Enable>:
 *
 * Enable LCD display
 *
 */
void _LCD_Enable()
{
 8011320:	b480      	push	{r7}
 8011322:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 8011324:	4b05      	ldr	r3, [pc, #20]	; (801133c <_LCD_Enable+0x1c>)
 8011326:	695b      	ldr	r3, [r3, #20]
 8011328:	4a04      	ldr	r2, [pc, #16]	; (801133c <_LCD_Enable+0x1c>)
 801132a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801132e:	6153      	str	r3, [r2, #20]
}
 8011330:	bf00      	nop
 8011332:	46bd      	mov	sp, r7
 8011334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011338:	4770      	bx	lr
 801133a:	bf00      	nop
 801133c:	48000400 	.word	0x48000400

08011340 <_LCD_Reset>:
 *
 * 	Reset LCD
 *
 */
void _LCD_Reset()
{
 8011340:	b580      	push	{r7, lr}
 8011342:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR &= ~(LCD_RST_PIN);
 8011344:	4b0c      	ldr	r3, [pc, #48]	; (8011378 <_LCD_Reset+0x38>)
 8011346:	695b      	ldr	r3, [r3, #20]
 8011348:	4a0b      	ldr	r2, [pc, #44]	; (8011378 <_LCD_Reset+0x38>)
 801134a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801134e:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 8011350:	20c8      	movs	r0, #200	; 0xc8
 8011352:	f7f7 fe4f 	bl	8008ff4 <HAL_Delay>
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8011356:	4b08      	ldr	r3, [pc, #32]	; (8011378 <_LCD_Reset+0x38>)
 8011358:	695b      	ldr	r3, [r3, #20]
 801135a:	4a07      	ldr	r2, [pc, #28]	; (8011378 <_LCD_Reset+0x38>)
 801135c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011360:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 8011362:	20c8      	movs	r0, #200	; 0xc8
 8011364:	f7f7 fe46 	bl	8008ff4 <HAL_Delay>
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 8011368:	4b03      	ldr	r3, [pc, #12]	; (8011378 <_LCD_Reset+0x38>)
 801136a:	695b      	ldr	r3, [r3, #20]
 801136c:	4a02      	ldr	r2, [pc, #8]	; (8011378 <_LCD_Reset+0x38>)
 801136e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8011372:	6153      	str	r3, [r2, #20]
}
 8011374:	bf00      	nop
 8011376:	bd80      	pop	{r7, pc}
 8011378:	48000400 	.word	0x48000400

0801137c <_LCD_Write_Frame>:
 *
 *	entire data sent to this function is a CHUNK < BURST_MAX_SIZE
 *	each CHUNK is broken down into smaller BLOCKS
 */
void _LCD_Write_Frame(uint16_t chunk_xpos, uint16_t chunk_ypos, uint16_t colour, uint32_t chunk_size, CHUNK_Type chunk_type)
{
 801137c:	b5b0      	push	{r4, r5, r7, lr}
 801137e:	b08e      	sub	sp, #56	; 0x38
 8011380:	af00      	add	r7, sp, #0
 8011382:	607b      	str	r3, [r7, #4]
 8011384:	4603      	mov	r3, r0
 8011386:	81fb      	strh	r3, [r7, #14]
 8011388:	460b      	mov	r3, r1
 801138a:	81bb      	strh	r3, [r7, #12]
 801138c:	4613      	mov	r3, r2
 801138e:	817b      	strh	r3, [r7, #10]
 8011390:	466b      	mov	r3, sp
 8011392:	461d      	mov	r5, r3

	uint32_t buffer_size = 0;
 8011394:	2300      	movs	r3, #0
 8011396:	62fb      	str	r3, [r7, #44]	; 0x2c
	if((chunk_size*2) < BURST_MAX_SIZE)
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	005b      	lsls	r3, r3, #1
 801139c:	4a4d      	ldr	r2, [pc, #308]	; (80114d4 <_LCD_Write_Frame+0x158>)
 801139e:	8812      	ldrh	r2, [r2, #0]
 80113a0:	4293      	cmp	r3, r2
 80113a2:	d202      	bcs.n	80113aa <_LCD_Write_Frame+0x2e>
	{
		buffer_size = chunk_size;
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80113a8:	e002      	b.n	80113b0 <_LCD_Write_Frame+0x34>
	}
	else
	{
		buffer_size = BURST_MAX_SIZE;
 80113aa:	4b4a      	ldr	r3, [pc, #296]	; (80114d4 <_LCD_Write_Frame+0x158>)
 80113ac:	881b      	ldrh	r3, [r3, #0]
 80113ae:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	unsigned char chifted = 	colour>>8;;
 80113b0:	897b      	ldrh	r3, [r7, #10]
 80113b2:	0a1b      	lsrs	r3, r3, #8
 80113b4:	b29b      	uxth	r3, r3
 80113b6:	77fb      	strb	r3, [r7, #31]
	unsigned char burst_buffer[buffer_size];
 80113b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80113ba:	4603      	mov	r3, r0
 80113bc:	3b01      	subs	r3, #1
 80113be:	61bb      	str	r3, [r7, #24]
 80113c0:	4601      	mov	r1, r0
 80113c2:	f04f 0200 	mov.w	r2, #0
 80113c6:	f04f 0300 	mov.w	r3, #0
 80113ca:	f04f 0400 	mov.w	r4, #0
 80113ce:	00d4      	lsls	r4, r2, #3
 80113d0:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80113d4:	00cb      	lsls	r3, r1, #3
 80113d6:	4601      	mov	r1, r0
 80113d8:	f04f 0200 	mov.w	r2, #0
 80113dc:	f04f 0300 	mov.w	r3, #0
 80113e0:	f04f 0400 	mov.w	r4, #0
 80113e4:	00d4      	lsls	r4, r2, #3
 80113e6:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80113ea:	00cb      	lsls	r3, r1, #3
 80113ec:	1dc3      	adds	r3, r0, #7
 80113ee:	08db      	lsrs	r3, r3, #3
 80113f0:	00db      	lsls	r3, r3, #3
 80113f2:	ebad 0d03 	sub.w	sp, sp, r3
 80113f6:	466b      	mov	r3, sp
 80113f8:	3300      	adds	r3, #0
 80113fa:	617b      	str	r3, [r7, #20]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 80113fc:	2300      	movs	r3, #0
 80113fe:	633b      	str	r3, [r7, #48]	; 0x30
 8011400:	e00d      	b.n	801141e <_LCD_Write_Frame+0xa2>
	{
			burst_buffer[j] = 	chifted;
 8011402:	697a      	ldr	r2, [r7, #20]
 8011404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011406:	4413      	add	r3, r2
 8011408:	7ffa      	ldrb	r2, [r7, #31]
 801140a:	701a      	strb	r2, [r3, #0]
			burst_buffer[j+1] = colour;
 801140c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801140e:	3301      	adds	r3, #1
 8011410:	897a      	ldrh	r2, [r7, #10]
 8011412:	b2d1      	uxtb	r1, r2
 8011414:	697a      	ldr	r2, [r7, #20]
 8011416:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 8011418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801141a:	3302      	adds	r3, #2
 801141c:	633b      	str	r3, [r7, #48]	; 0x30
 801141e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011422:	429a      	cmp	r2, r3
 8011424:	d3ed      	bcc.n	8011402 <_LCD_Write_Frame+0x86>
	}
	
	uint32_t Sending_size = chunk_size*2;
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	005b      	lsls	r3, r3, #1
 801142a:	613b      	str	r3, [r7, #16]

	// make sure we don't divide by size=0
	uint32_t Sending_in_Block = 1;
 801142c:	2301      	movs	r3, #1
 801142e:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t Remainder_from_block = 0;
 8011430:	2300      	movs	r3, #0
 8011432:	62bb      	str	r3, [r7, #40]	; 0x28
	if(chunk_size > 0)
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	2b00      	cmp	r3, #0
 8011438:	d00d      	beq.n	8011456 <_LCD_Write_Frame+0xda>
	{
			Sending_in_Block 		= Sending_size/buffer_size;
 801143a:	693a      	ldr	r2, [r7, #16]
 801143c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801143e:	fbb2 f3f3 	udiv	r3, r2, r3
 8011442:	637b      	str	r3, [r7, #52]	; 0x34
			Remainder_from_block 	= Sending_size%buffer_size;
 8011444:	693b      	ldr	r3, [r7, #16]
 8011446:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011448:	fbb3 f2f2 	udiv	r2, r3, r2
 801144c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801144e:	fb01 f202 	mul.w	r2, r1, r2
 8011452:	1a9b      	subs	r3, r3, r2
 8011454:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	// send blocks
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8011456:	4b20      	ldr	r3, [pc, #128]	; (80114d8 <_LCD_Write_Frame+0x15c>)
 8011458:	695b      	ldr	r3, [r3, #20]
 801145a:	4a1f      	ldr	r2, [pc, #124]	; (80114d8 <_LCD_Write_Frame+0x15c>)
 801145c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011460:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8011462:	4b1d      	ldr	r3, [pc, #116]	; (80114d8 <_LCD_Write_Frame+0x15c>)
 8011464:	695b      	ldr	r3, [r3, #20]
 8011466:	4a1c      	ldr	r2, [pc, #112]	; (80114d8 <_LCD_Write_Frame+0x15c>)
 8011468:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801146c:	6153      	str	r3, [r2, #20]
//TODO
	if(Sending_in_Block != 0)
 801146e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011470:	2b00      	cmp	r3, #0
 8011472:	d00f      	beq.n	8011494 <_LCD_Write_Frame+0x118>
	{
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8011474:	2300      	movs	r3, #0
 8011476:	627b      	str	r3, [r7, #36]	; 0x24
 8011478:	e008      	b.n	801148c <_LCD_Write_Frame+0x110>
		{
			_SPI_SendByteMultiByte(burst_buffer, buffer_size, 0, 10);
 801147a:	6978      	ldr	r0, [r7, #20]
 801147c:	230a      	movs	r3, #10
 801147e:	2200      	movs	r2, #0
 8011480:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011482:	f000 f8c1 	bl	8011608 <_SPI_SendByteMultiByte>
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8011486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011488:	3301      	adds	r3, #1
 801148a:	627b      	str	r3, [r7, #36]	; 0x24
 801148c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801148e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011490:	429a      	cmp	r2, r3
 8011492:	d3f2      	bcc.n	801147a <_LCD_Write_Frame+0xfe>
		}
	}

	_SPI_SendByteMultiByte(burst_buffer, Remainder_from_block, 0, 10);
 8011494:	6978      	ldr	r0, [r7, #20]
 8011496:	230a      	movs	r3, #10
 8011498:	2200      	movs	r2, #0
 801149a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801149c:	f000 f8b4 	bl	8011608 <_SPI_SendByteMultiByte>


	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 80114a0:	2300      	movs	r3, #0
 80114a2:	623b      	str	r3, [r7, #32]
 80114a4:	e008      	b.n	80114b8 <_LCD_Write_Frame+0x13c>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80114a6:	4b0c      	ldr	r3, [pc, #48]	; (80114d8 <_LCD_Write_Frame+0x15c>)
 80114a8:	695b      	ldr	r3, [r3, #20]
 80114aa:	4a0b      	ldr	r2, [pc, #44]	; (80114d8 <_LCD_Write_Frame+0x15c>)
 80114ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80114b0:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 80114b2:	6a3b      	ldr	r3, [r7, #32]
 80114b4:	3301      	adds	r3, #1
 80114b6:	623b      	str	r3, [r7, #32]
 80114b8:	6a3b      	ldr	r3, [r7, #32]
 80114ba:	2b02      	cmp	r3, #2
 80114bc:	ddf3      	ble.n	80114a6 <_LCD_Write_Frame+0x12a>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 80114be:	4b06      	ldr	r3, [pc, #24]	; (80114d8 <_LCD_Write_Frame+0x15c>)
 80114c0:	695b      	ldr	r3, [r3, #20]
 80114c2:	4a05      	ldr	r2, [pc, #20]	; (80114d8 <_LCD_Write_Frame+0x15c>)
 80114c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80114c8:	6153      	str	r3, [r2, #20]
 80114ca:	46ad      	mov	sp, r5

}
 80114cc:	bf00      	nop
 80114ce:	3738      	adds	r7, #56	; 0x38
 80114d0:	46bd      	mov	sp, r7
 80114d2:	bdb0      	pop	{r4, r5, r7, pc}
 80114d4:	20000ec0 	.word	0x20000ec0
 80114d8:	48000400 	.word	0x48000400

080114dc <_LCD_SendCommand>:
 *
 * 	Send command to LCD
 *
 */
void _LCD_SendCommand(uint8_t command)
{
 80114dc:	b580      	push	{r7, lr}
 80114de:	b084      	sub	sp, #16
 80114e0:	af00      	add	r7, sp, #0
 80114e2:	4603      	mov	r3, r0
 80114e4:	71fb      	strb	r3, [r7, #7]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80114e6:	4b15      	ldr	r3, [pc, #84]	; (801153c <_LCD_SendCommand+0x60>)
 80114e8:	695b      	ldr	r3, [r3, #20]
 80114ea:	4a14      	ldr	r2, [pc, #80]	; (801153c <_LCD_SendCommand+0x60>)
 80114ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80114f0:	6153      	str	r3, [r2, #20]
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 80114f2:	4b12      	ldr	r3, [pc, #72]	; (801153c <_LCD_SendCommand+0x60>)
 80114f4:	695b      	ldr	r3, [r3, #20]
 80114f6:	4a11      	ldr	r2, [pc, #68]	; (801153c <_LCD_SendCommand+0x60>)
 80114f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80114fc:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(command, 0 , 0);
 80114fe:	79fb      	ldrb	r3, [r7, #7]
 8011500:	2200      	movs	r2, #0
 8011502:	2100      	movs	r1, #0
 8011504:	4618      	mov	r0, r3
 8011506:	f000 f84d 	bl	80115a4 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 801150a:	2300      	movs	r3, #0
 801150c:	60fb      	str	r3, [r7, #12]
 801150e:	e008      	b.n	8011522 <_LCD_SendCommand+0x46>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8011510:	4b0a      	ldr	r3, [pc, #40]	; (801153c <_LCD_SendCommand+0x60>)
 8011512:	695b      	ldr	r3, [r3, #20]
 8011514:	4a09      	ldr	r2, [pc, #36]	; (801153c <_LCD_SendCommand+0x60>)
 8011516:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801151a:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 801151c:	68fb      	ldr	r3, [r7, #12]
 801151e:	3301      	adds	r3, #1
 8011520:	60fb      	str	r3, [r7, #12]
 8011522:	68fb      	ldr	r3, [r7, #12]
 8011524:	2b02      	cmp	r3, #2
 8011526:	ddf3      	ble.n	8011510 <_LCD_SendCommand+0x34>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8011528:	4b04      	ldr	r3, [pc, #16]	; (801153c <_LCD_SendCommand+0x60>)
 801152a:	695b      	ldr	r3, [r3, #20]
 801152c:	4a03      	ldr	r2, [pc, #12]	; (801153c <_LCD_SendCommand+0x60>)
 801152e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011532:	6153      	str	r3, [r2, #20]
}
 8011534:	bf00      	nop
 8011536:	3710      	adds	r7, #16
 8011538:	46bd      	mov	sp, r7
 801153a:	bd80      	pop	{r7, pc}
 801153c:	48000400 	.word	0x48000400

08011540 <_LCD_SendData>:
 *
 * 	Send Data to LCD
 *
 */
void _LCD_SendData(uint8_t data)
{
 8011540:	b580      	push	{r7, lr}
 8011542:	b084      	sub	sp, #16
 8011544:	af00      	add	r7, sp, #0
 8011546:	4603      	mov	r3, r0
 8011548:	71fb      	strb	r3, [r7, #7]
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 801154a:	4b15      	ldr	r3, [pc, #84]	; (80115a0 <_LCD_SendData+0x60>)
 801154c:	695b      	ldr	r3, [r3, #20]
 801154e:	4a14      	ldr	r2, [pc, #80]	; (80115a0 <_LCD_SendData+0x60>)
 8011550:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011554:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8011556:	4b12      	ldr	r3, [pc, #72]	; (80115a0 <_LCD_SendData+0x60>)
 8011558:	695b      	ldr	r3, [r3, #20]
 801155a:	4a11      	ldr	r2, [pc, #68]	; (80115a0 <_LCD_SendData+0x60>)
 801155c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011560:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(data, 0 , 0);
 8011562:	79fb      	ldrb	r3, [r7, #7]
 8011564:	2200      	movs	r2, #0
 8011566:	2100      	movs	r1, #0
 8011568:	4618      	mov	r0, r3
 801156a:	f000 f81b 	bl	80115a4 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 801156e:	2300      	movs	r3, #0
 8011570:	60fb      	str	r3, [r7, #12]
 8011572:	e008      	b.n	8011586 <_LCD_SendData+0x46>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8011574:	4b0a      	ldr	r3, [pc, #40]	; (80115a0 <_LCD_SendData+0x60>)
 8011576:	695b      	ldr	r3, [r3, #20]
 8011578:	4a09      	ldr	r2, [pc, #36]	; (80115a0 <_LCD_SendData+0x60>)
 801157a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801157e:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 8011580:	68fb      	ldr	r3, [r7, #12]
 8011582:	3301      	adds	r3, #1
 8011584:	60fb      	str	r3, [r7, #12]
 8011586:	68fb      	ldr	r3, [r7, #12]
 8011588:	2b02      	cmp	r3, #2
 801158a:	ddf3      	ble.n	8011574 <_LCD_SendData+0x34>

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 801158c:	4b04      	ldr	r3, [pc, #16]	; (80115a0 <_LCD_SendData+0x60>)
 801158e:	695b      	ldr	r3, [r3, #20]
 8011590:	4a03      	ldr	r2, [pc, #12]	; (80115a0 <_LCD_SendData+0x60>)
 8011592:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011596:	6153      	str	r3, [r2, #20]
}
 8011598:	bf00      	nop
 801159a:	3710      	adds	r7, #16
 801159c:	46bd      	mov	sp, r7
 801159e:	bd80      	pop	{r7, pc}
 80115a0:	48000400 	.word	0x48000400

080115a4 <_SPI_SendByte>:
 *
 * 	Send single byte over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByte(unsigned char data_buffer, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 80115a4:	b480      	push	{r7}
 80115a6:	b085      	sub	sp, #20
 80115a8:	af00      	add	r7, sp, #0
 80115aa:	4603      	mov	r3, r0
 80115ac:	71fb      	strb	r3, [r7, #7]
 80115ae:	460b      	mov	r3, r1
 80115b0:	71bb      	strb	r3, [r7, #6]
 80115b2:	4613      	mov	r3, r2
 80115b4:	717b      	strb	r3, [r7, #5]
#endif

#ifdef USE_BARE_SPI

    // pre frame delay
   	for(int d = 0; d < pre_frame_delay ; d++)
 80115b6:	2300      	movs	r3, #0
 80115b8:	60fb      	str	r3, [r7, #12]
 80115ba:	e003      	b.n	80115c4 <_SPI_SendByte+0x20>
   		asm("nop");
 80115bc:	bf00      	nop
   	for(int d = 0; d < pre_frame_delay ; d++)
 80115be:	68fb      	ldr	r3, [r7, #12]
 80115c0:	3301      	adds	r3, #1
 80115c2:	60fb      	str	r3, [r7, #12]
 80115c4:	79bb      	ldrb	r3, [r7, #6]
 80115c6:	68fa      	ldr	r2, [r7, #12]
 80115c8:	429a      	cmp	r2, r3
 80115ca:	dbf7      	blt.n	80115bc <_SPI_SendByte+0x18>

	// check transmit buffer empty
	if((SPI_PERIPH->SR & SPI_SR_TXE) == SPI_SR_TXE)
 80115cc:	4b0c      	ldr	r3, [pc, #48]	; (8011600 <_SPI_SendByte+0x5c>)
 80115ce:	689b      	ldr	r3, [r3, #8]
 80115d0:	f003 0302 	and.w	r3, r3, #2
 80115d4:	2b02      	cmp	r3, #2
 80115d6:	d102      	bne.n	80115de <_SPI_SendByte+0x3a>
	{
		*(volatile uint8_t *)&SPI_PERIPH->DR = data_buffer;
 80115d8:	4a0a      	ldr	r2, [pc, #40]	; (8011604 <_SPI_SendByte+0x60>)
 80115da:	79fb      	ldrb	r3, [r7, #7]
 80115dc:	7013      	strb	r3, [r2, #0]
	}

    // post frame delay
   	for(int d = 0; d < post_frame_delay ; d++)
 80115de:	2300      	movs	r3, #0
 80115e0:	60bb      	str	r3, [r7, #8]
 80115e2:	e003      	b.n	80115ec <_SPI_SendByte+0x48>
   		asm("nop");
 80115e4:	bf00      	nop
   	for(int d = 0; d < post_frame_delay ; d++)
 80115e6:	68bb      	ldr	r3, [r7, #8]
 80115e8:	3301      	adds	r3, #1
 80115ea:	60bb      	str	r3, [r7, #8]
 80115ec:	797b      	ldrb	r3, [r7, #5]
 80115ee:	68ba      	ldr	r2, [r7, #8]
 80115f0:	429a      	cmp	r2, r3
 80115f2:	dbf7      	blt.n	80115e4 <_SPI_SendByte+0x40>

#endif

}
 80115f4:	bf00      	nop
 80115f6:	3714      	adds	r7, #20
 80115f8:	46bd      	mov	sp, r7
 80115fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115fe:	4770      	bx	lr
 8011600:	40003c00 	.word	0x40003c00
 8011604:	40003c0c 	.word	0x40003c0c

08011608 <_SPI_SendByteMultiByte>:
 *
 * 	Send multiple bytes over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByteMultiByte(unsigned char *data_buffer, uint32_t buffer_size, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 8011608:	b480      	push	{r7}
 801160a:	b089      	sub	sp, #36	; 0x24
 801160c:	af00      	add	r7, sp, #0
 801160e:	60f8      	str	r0, [r7, #12]
 8011610:	60b9      	str	r1, [r7, #8]
 8011612:	4611      	mov	r1, r2
 8011614:	461a      	mov	r2, r3
 8011616:	460b      	mov	r3, r1
 8011618:	71fb      	strb	r3, [r7, #7]
 801161a:	4613      	mov	r3, r2
 801161c:	71bb      	strb	r3, [r7, #6]
#endif

#ifdef USE_BARE_SPI

    // pre frame delay
   	for(int d = 0; d < pre_frame_delay ; d++)
 801161e:	2300      	movs	r3, #0
 8011620:	61fb      	str	r3, [r7, #28]
 8011622:	e003      	b.n	801162c <_SPI_SendByteMultiByte+0x24>
   		asm("nop");
 8011624:	bf00      	nop
   	for(int d = 0; d < pre_frame_delay ; d++)
 8011626:	69fb      	ldr	r3, [r7, #28]
 8011628:	3301      	adds	r3, #1
 801162a:	61fb      	str	r3, [r7, #28]
 801162c:	79fb      	ldrb	r3, [r7, #7]
 801162e:	69fa      	ldr	r2, [r7, #28]
 8011630:	429a      	cmp	r2, r3
 8011632:	dbf7      	blt.n	8011624 <_SPI_SendByteMultiByte+0x1c>

	uint8_t *p_data_buffer = (uint8_t *)data_buffer;
 8011634:	68fb      	ldr	r3, [r7, #12]
 8011636:	61bb      	str	r3, [r7, #24]
	//volatile uint16_t TxXferCount = (uint16_t)buffer_size;

	while (buffer_size > 0U)
 8011638:	e01d      	b.n	8011676 <_SPI_SendByteMultiByte+0x6e>
	{
		// check transmit buffer empty
		if ((SPI_PERIPH->SR & SPI_SR_TXE) == SPI_SR_TXE)
 801163a:	4b1c      	ldr	r3, [pc, #112]	; (80116ac <_SPI_SendByteMultiByte+0xa4>)
 801163c:	689b      	ldr	r3, [r3, #8]
 801163e:	f003 0302 	and.w	r3, r3, #2
 8011642:	2b02      	cmp	r3, #2
 8011644:	d117      	bne.n	8011676 <_SPI_SendByteMultiByte+0x6e>
		{
			if (buffer_size > 1U)
 8011646:	68bb      	ldr	r3, [r7, #8]
 8011648:	2b01      	cmp	r3, #1
 801164a:	d90a      	bls.n	8011662 <_SPI_SendByteMultiByte+0x5a>
			{
				// write on the data register in packing mode
				SPI_PERIPH->DR = *((uint16_t *)p_data_buffer);
 801164c:	69bb      	ldr	r3, [r7, #24]
 801164e:	881a      	ldrh	r2, [r3, #0]
 8011650:	4b16      	ldr	r3, [pc, #88]	; (80116ac <_SPI_SendByteMultiByte+0xa4>)
 8011652:	60da      	str	r2, [r3, #12]
				p_data_buffer += sizeof(uint16_t);
 8011654:	69bb      	ldr	r3, [r7, #24]
 8011656:	3302      	adds	r3, #2
 8011658:	61bb      	str	r3, [r7, #24]
				buffer_size -= 2U;
 801165a:	68bb      	ldr	r3, [r7, #8]
 801165c:	3b02      	subs	r3, #2
 801165e:	60bb      	str	r3, [r7, #8]
 8011660:	e009      	b.n	8011676 <_SPI_SendByteMultiByte+0x6e>
			}
			else
			{
				*((volatile uint8_t *)&SPI_PERIPH->DR) = (*p_data_buffer);
 8011662:	4a13      	ldr	r2, [pc, #76]	; (80116b0 <_SPI_SendByteMultiByte+0xa8>)
 8011664:	69bb      	ldr	r3, [r7, #24]
 8011666:	781b      	ldrb	r3, [r3, #0]
 8011668:	7013      	strb	r3, [r2, #0]
				p_data_buffer++;
 801166a:	69bb      	ldr	r3, [r7, #24]
 801166c:	3301      	adds	r3, #1
 801166e:	61bb      	str	r3, [r7, #24]
				buffer_size--;
 8011670:	68bb      	ldr	r3, [r7, #8]
 8011672:	3b01      	subs	r3, #1
 8011674:	60bb      	str	r3, [r7, #8]
	while (buffer_size > 0U)
 8011676:	68bb      	ldr	r3, [r7, #8]
 8011678:	2b00      	cmp	r3, #0
 801167a:	d1de      	bne.n	801163a <_SPI_SendByteMultiByte+0x32>
			}
		}
	}

	// clear SPI overrun flag
	SPI_PERIPH->SR &= ~(SPI_SR_OVR);
 801167c:	4b0b      	ldr	r3, [pc, #44]	; (80116ac <_SPI_SendByteMultiByte+0xa4>)
 801167e:	689b      	ldr	r3, [r3, #8]
 8011680:	4a0a      	ldr	r2, [pc, #40]	; (80116ac <_SPI_SendByteMultiByte+0xa4>)
 8011682:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011686:	6093      	str	r3, [r2, #8]

    // post frame delay
   	for(int d = 0; d < post_frame_delay ; d++)
 8011688:	2300      	movs	r3, #0
 801168a:	617b      	str	r3, [r7, #20]
 801168c:	e003      	b.n	8011696 <_SPI_SendByteMultiByte+0x8e>
   		asm("nop");
 801168e:	bf00      	nop
   	for(int d = 0; d < post_frame_delay ; d++)
 8011690:	697b      	ldr	r3, [r7, #20]
 8011692:	3301      	adds	r3, #1
 8011694:	617b      	str	r3, [r7, #20]
 8011696:	79bb      	ldrb	r3, [r7, #6]
 8011698:	697a      	ldr	r2, [r7, #20]
 801169a:	429a      	cmp	r2, r3
 801169c:	dbf7      	blt.n	801168e <_SPI_SendByteMultiByte+0x86>

#endif

}
 801169e:	bf00      	nop
 80116a0:	3724      	adds	r7, #36	; 0x24
 80116a2:	46bd      	mov	sp, r7
 80116a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116a8:	4770      	bx	lr
 80116aa:	bf00      	nop
 80116ac:	40003c00 	.word	0x40003c00
 80116b0:	40003c0c 	.word	0x40003c0c

080116b4 <__errno>:
 80116b4:	4b01      	ldr	r3, [pc, #4]	; (80116bc <__errno+0x8>)
 80116b6:	6818      	ldr	r0, [r3, #0]
 80116b8:	4770      	bx	lr
 80116ba:	bf00      	nop
 80116bc:	20001eb4 	.word	0x20001eb4

080116c0 <__libc_init_array>:
 80116c0:	b570      	push	{r4, r5, r6, lr}
 80116c2:	4e0d      	ldr	r6, [pc, #52]	; (80116f8 <__libc_init_array+0x38>)
 80116c4:	4c0d      	ldr	r4, [pc, #52]	; (80116fc <__libc_init_array+0x3c>)
 80116c6:	1ba4      	subs	r4, r4, r6
 80116c8:	10a4      	asrs	r4, r4, #2
 80116ca:	2500      	movs	r5, #0
 80116cc:	42a5      	cmp	r5, r4
 80116ce:	d109      	bne.n	80116e4 <__libc_init_array+0x24>
 80116d0:	4e0b      	ldr	r6, [pc, #44]	; (8011700 <__libc_init_array+0x40>)
 80116d2:	4c0c      	ldr	r4, [pc, #48]	; (8011704 <__libc_init_array+0x44>)
 80116d4:	f004 f89e 	bl	8015814 <_init>
 80116d8:	1ba4      	subs	r4, r4, r6
 80116da:	10a4      	asrs	r4, r4, #2
 80116dc:	2500      	movs	r5, #0
 80116de:	42a5      	cmp	r5, r4
 80116e0:	d105      	bne.n	80116ee <__libc_init_array+0x2e>
 80116e2:	bd70      	pop	{r4, r5, r6, pc}
 80116e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80116e8:	4798      	blx	r3
 80116ea:	3501      	adds	r5, #1
 80116ec:	e7ee      	b.n	80116cc <__libc_init_array+0xc>
 80116ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80116f2:	4798      	blx	r3
 80116f4:	3501      	adds	r5, #1
 80116f6:	e7f2      	b.n	80116de <__libc_init_array+0x1e>
 80116f8:	08016c70 	.word	0x08016c70
 80116fc:	08016c70 	.word	0x08016c70
 8011700:	08016c70 	.word	0x08016c70
 8011704:	08016c74 	.word	0x08016c74

08011708 <memset>:
 8011708:	4402      	add	r2, r0
 801170a:	4603      	mov	r3, r0
 801170c:	4293      	cmp	r3, r2
 801170e:	d100      	bne.n	8011712 <memset+0xa>
 8011710:	4770      	bx	lr
 8011712:	f803 1b01 	strb.w	r1, [r3], #1
 8011716:	e7f9      	b.n	801170c <memset+0x4>

08011718 <__cvt>:
 8011718:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801171c:	ec55 4b10 	vmov	r4, r5, d0
 8011720:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8011722:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8011726:	2d00      	cmp	r5, #0
 8011728:	460e      	mov	r6, r1
 801172a:	4691      	mov	r9, r2
 801172c:	4619      	mov	r1, r3
 801172e:	bfb8      	it	lt
 8011730:	4622      	movlt	r2, r4
 8011732:	462b      	mov	r3, r5
 8011734:	f027 0720 	bic.w	r7, r7, #32
 8011738:	bfbb      	ittet	lt
 801173a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801173e:	461d      	movlt	r5, r3
 8011740:	2300      	movge	r3, #0
 8011742:	232d      	movlt	r3, #45	; 0x2d
 8011744:	bfb8      	it	lt
 8011746:	4614      	movlt	r4, r2
 8011748:	2f46      	cmp	r7, #70	; 0x46
 801174a:	700b      	strb	r3, [r1, #0]
 801174c:	d004      	beq.n	8011758 <__cvt+0x40>
 801174e:	2f45      	cmp	r7, #69	; 0x45
 8011750:	d100      	bne.n	8011754 <__cvt+0x3c>
 8011752:	3601      	adds	r6, #1
 8011754:	2102      	movs	r1, #2
 8011756:	e000      	b.n	801175a <__cvt+0x42>
 8011758:	2103      	movs	r1, #3
 801175a:	ab03      	add	r3, sp, #12
 801175c:	9301      	str	r3, [sp, #4]
 801175e:	ab02      	add	r3, sp, #8
 8011760:	9300      	str	r3, [sp, #0]
 8011762:	4632      	mov	r2, r6
 8011764:	4653      	mov	r3, sl
 8011766:	ec45 4b10 	vmov	d0, r4, r5
 801176a:	f000 fe3d 	bl	80123e8 <_dtoa_r>
 801176e:	2f47      	cmp	r7, #71	; 0x47
 8011770:	4680      	mov	r8, r0
 8011772:	d102      	bne.n	801177a <__cvt+0x62>
 8011774:	f019 0f01 	tst.w	r9, #1
 8011778:	d026      	beq.n	80117c8 <__cvt+0xb0>
 801177a:	2f46      	cmp	r7, #70	; 0x46
 801177c:	eb08 0906 	add.w	r9, r8, r6
 8011780:	d111      	bne.n	80117a6 <__cvt+0x8e>
 8011782:	f898 3000 	ldrb.w	r3, [r8]
 8011786:	2b30      	cmp	r3, #48	; 0x30
 8011788:	d10a      	bne.n	80117a0 <__cvt+0x88>
 801178a:	2200      	movs	r2, #0
 801178c:	2300      	movs	r3, #0
 801178e:	4620      	mov	r0, r4
 8011790:	4629      	mov	r1, r5
 8011792:	f7ef f9c1 	bl	8000b18 <__aeabi_dcmpeq>
 8011796:	b918      	cbnz	r0, 80117a0 <__cvt+0x88>
 8011798:	f1c6 0601 	rsb	r6, r6, #1
 801179c:	f8ca 6000 	str.w	r6, [sl]
 80117a0:	f8da 3000 	ldr.w	r3, [sl]
 80117a4:	4499      	add	r9, r3
 80117a6:	2200      	movs	r2, #0
 80117a8:	2300      	movs	r3, #0
 80117aa:	4620      	mov	r0, r4
 80117ac:	4629      	mov	r1, r5
 80117ae:	f7ef f9b3 	bl	8000b18 <__aeabi_dcmpeq>
 80117b2:	b938      	cbnz	r0, 80117c4 <__cvt+0xac>
 80117b4:	2230      	movs	r2, #48	; 0x30
 80117b6:	9b03      	ldr	r3, [sp, #12]
 80117b8:	454b      	cmp	r3, r9
 80117ba:	d205      	bcs.n	80117c8 <__cvt+0xb0>
 80117bc:	1c59      	adds	r1, r3, #1
 80117be:	9103      	str	r1, [sp, #12]
 80117c0:	701a      	strb	r2, [r3, #0]
 80117c2:	e7f8      	b.n	80117b6 <__cvt+0x9e>
 80117c4:	f8cd 900c 	str.w	r9, [sp, #12]
 80117c8:	9b03      	ldr	r3, [sp, #12]
 80117ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80117cc:	eba3 0308 	sub.w	r3, r3, r8
 80117d0:	4640      	mov	r0, r8
 80117d2:	6013      	str	r3, [r2, #0]
 80117d4:	b004      	add	sp, #16
 80117d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080117da <__exponent>:
 80117da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80117dc:	2900      	cmp	r1, #0
 80117de:	4604      	mov	r4, r0
 80117e0:	bfba      	itte	lt
 80117e2:	4249      	neglt	r1, r1
 80117e4:	232d      	movlt	r3, #45	; 0x2d
 80117e6:	232b      	movge	r3, #43	; 0x2b
 80117e8:	2909      	cmp	r1, #9
 80117ea:	f804 2b02 	strb.w	r2, [r4], #2
 80117ee:	7043      	strb	r3, [r0, #1]
 80117f0:	dd20      	ble.n	8011834 <__exponent+0x5a>
 80117f2:	f10d 0307 	add.w	r3, sp, #7
 80117f6:	461f      	mov	r7, r3
 80117f8:	260a      	movs	r6, #10
 80117fa:	fb91 f5f6 	sdiv	r5, r1, r6
 80117fe:	fb06 1115 	mls	r1, r6, r5, r1
 8011802:	3130      	adds	r1, #48	; 0x30
 8011804:	2d09      	cmp	r5, #9
 8011806:	f803 1c01 	strb.w	r1, [r3, #-1]
 801180a:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 801180e:	4629      	mov	r1, r5
 8011810:	dc09      	bgt.n	8011826 <__exponent+0x4c>
 8011812:	3130      	adds	r1, #48	; 0x30
 8011814:	3b02      	subs	r3, #2
 8011816:	f802 1c01 	strb.w	r1, [r2, #-1]
 801181a:	42bb      	cmp	r3, r7
 801181c:	4622      	mov	r2, r4
 801181e:	d304      	bcc.n	801182a <__exponent+0x50>
 8011820:	1a10      	subs	r0, r2, r0
 8011822:	b003      	add	sp, #12
 8011824:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011826:	4613      	mov	r3, r2
 8011828:	e7e7      	b.n	80117fa <__exponent+0x20>
 801182a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801182e:	f804 2b01 	strb.w	r2, [r4], #1
 8011832:	e7f2      	b.n	801181a <__exponent+0x40>
 8011834:	2330      	movs	r3, #48	; 0x30
 8011836:	4419      	add	r1, r3
 8011838:	7083      	strb	r3, [r0, #2]
 801183a:	1d02      	adds	r2, r0, #4
 801183c:	70c1      	strb	r1, [r0, #3]
 801183e:	e7ef      	b.n	8011820 <__exponent+0x46>

08011840 <_printf_float>:
 8011840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011844:	b08d      	sub	sp, #52	; 0x34
 8011846:	460c      	mov	r4, r1
 8011848:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801184c:	4616      	mov	r6, r2
 801184e:	461f      	mov	r7, r3
 8011850:	4605      	mov	r5, r0
 8011852:	f001 fcfb 	bl	801324c <_localeconv_r>
 8011856:	6803      	ldr	r3, [r0, #0]
 8011858:	9304      	str	r3, [sp, #16]
 801185a:	4618      	mov	r0, r3
 801185c:	f7ee fce0 	bl	8000220 <strlen>
 8011860:	2300      	movs	r3, #0
 8011862:	930a      	str	r3, [sp, #40]	; 0x28
 8011864:	f8d8 3000 	ldr.w	r3, [r8]
 8011868:	9005      	str	r0, [sp, #20]
 801186a:	3307      	adds	r3, #7
 801186c:	f023 0307 	bic.w	r3, r3, #7
 8011870:	f103 0208 	add.w	r2, r3, #8
 8011874:	f894 a018 	ldrb.w	sl, [r4, #24]
 8011878:	f8d4 b000 	ldr.w	fp, [r4]
 801187c:	f8c8 2000 	str.w	r2, [r8]
 8011880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011884:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8011888:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801188c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8011890:	9307      	str	r3, [sp, #28]
 8011892:	f8cd 8018 	str.w	r8, [sp, #24]
 8011896:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801189a:	4ba7      	ldr	r3, [pc, #668]	; (8011b38 <_printf_float+0x2f8>)
 801189c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80118a0:	f7ef f96c 	bl	8000b7c <__aeabi_dcmpun>
 80118a4:	bb70      	cbnz	r0, 8011904 <_printf_float+0xc4>
 80118a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80118aa:	4ba3      	ldr	r3, [pc, #652]	; (8011b38 <_printf_float+0x2f8>)
 80118ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80118b0:	f7ef f946 	bl	8000b40 <__aeabi_dcmple>
 80118b4:	bb30      	cbnz	r0, 8011904 <_printf_float+0xc4>
 80118b6:	2200      	movs	r2, #0
 80118b8:	2300      	movs	r3, #0
 80118ba:	4640      	mov	r0, r8
 80118bc:	4649      	mov	r1, r9
 80118be:	f7ef f935 	bl	8000b2c <__aeabi_dcmplt>
 80118c2:	b110      	cbz	r0, 80118ca <_printf_float+0x8a>
 80118c4:	232d      	movs	r3, #45	; 0x2d
 80118c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80118ca:	4a9c      	ldr	r2, [pc, #624]	; (8011b3c <_printf_float+0x2fc>)
 80118cc:	4b9c      	ldr	r3, [pc, #624]	; (8011b40 <_printf_float+0x300>)
 80118ce:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80118d2:	bf8c      	ite	hi
 80118d4:	4690      	movhi	r8, r2
 80118d6:	4698      	movls	r8, r3
 80118d8:	2303      	movs	r3, #3
 80118da:	f02b 0204 	bic.w	r2, fp, #4
 80118de:	6123      	str	r3, [r4, #16]
 80118e0:	6022      	str	r2, [r4, #0]
 80118e2:	f04f 0900 	mov.w	r9, #0
 80118e6:	9700      	str	r7, [sp, #0]
 80118e8:	4633      	mov	r3, r6
 80118ea:	aa0b      	add	r2, sp, #44	; 0x2c
 80118ec:	4621      	mov	r1, r4
 80118ee:	4628      	mov	r0, r5
 80118f0:	f000 f9e6 	bl	8011cc0 <_printf_common>
 80118f4:	3001      	adds	r0, #1
 80118f6:	f040 808d 	bne.w	8011a14 <_printf_float+0x1d4>
 80118fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80118fe:	b00d      	add	sp, #52	; 0x34
 8011900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011904:	4642      	mov	r2, r8
 8011906:	464b      	mov	r3, r9
 8011908:	4640      	mov	r0, r8
 801190a:	4649      	mov	r1, r9
 801190c:	f7ef f936 	bl	8000b7c <__aeabi_dcmpun>
 8011910:	b110      	cbz	r0, 8011918 <_printf_float+0xd8>
 8011912:	4a8c      	ldr	r2, [pc, #560]	; (8011b44 <_printf_float+0x304>)
 8011914:	4b8c      	ldr	r3, [pc, #560]	; (8011b48 <_printf_float+0x308>)
 8011916:	e7da      	b.n	80118ce <_printf_float+0x8e>
 8011918:	6861      	ldr	r1, [r4, #4]
 801191a:	1c4b      	adds	r3, r1, #1
 801191c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8011920:	a80a      	add	r0, sp, #40	; 0x28
 8011922:	d13e      	bne.n	80119a2 <_printf_float+0x162>
 8011924:	2306      	movs	r3, #6
 8011926:	6063      	str	r3, [r4, #4]
 8011928:	2300      	movs	r3, #0
 801192a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801192e:	ab09      	add	r3, sp, #36	; 0x24
 8011930:	9300      	str	r3, [sp, #0]
 8011932:	ec49 8b10 	vmov	d0, r8, r9
 8011936:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801193a:	6022      	str	r2, [r4, #0]
 801193c:	f8cd a004 	str.w	sl, [sp, #4]
 8011940:	6861      	ldr	r1, [r4, #4]
 8011942:	4628      	mov	r0, r5
 8011944:	f7ff fee8 	bl	8011718 <__cvt>
 8011948:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 801194c:	2b47      	cmp	r3, #71	; 0x47
 801194e:	4680      	mov	r8, r0
 8011950:	d109      	bne.n	8011966 <_printf_float+0x126>
 8011952:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011954:	1cd8      	adds	r0, r3, #3
 8011956:	db02      	blt.n	801195e <_printf_float+0x11e>
 8011958:	6862      	ldr	r2, [r4, #4]
 801195a:	4293      	cmp	r3, r2
 801195c:	dd47      	ble.n	80119ee <_printf_float+0x1ae>
 801195e:	f1aa 0a02 	sub.w	sl, sl, #2
 8011962:	fa5f fa8a 	uxtb.w	sl, sl
 8011966:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801196a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801196c:	d824      	bhi.n	80119b8 <_printf_float+0x178>
 801196e:	3901      	subs	r1, #1
 8011970:	4652      	mov	r2, sl
 8011972:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8011976:	9109      	str	r1, [sp, #36]	; 0x24
 8011978:	f7ff ff2f 	bl	80117da <__exponent>
 801197c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801197e:	1813      	adds	r3, r2, r0
 8011980:	2a01      	cmp	r2, #1
 8011982:	4681      	mov	r9, r0
 8011984:	6123      	str	r3, [r4, #16]
 8011986:	dc02      	bgt.n	801198e <_printf_float+0x14e>
 8011988:	6822      	ldr	r2, [r4, #0]
 801198a:	07d1      	lsls	r1, r2, #31
 801198c:	d501      	bpl.n	8011992 <_printf_float+0x152>
 801198e:	3301      	adds	r3, #1
 8011990:	6123      	str	r3, [r4, #16]
 8011992:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8011996:	2b00      	cmp	r3, #0
 8011998:	d0a5      	beq.n	80118e6 <_printf_float+0xa6>
 801199a:	232d      	movs	r3, #45	; 0x2d
 801199c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80119a0:	e7a1      	b.n	80118e6 <_printf_float+0xa6>
 80119a2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80119a6:	f000 8177 	beq.w	8011c98 <_printf_float+0x458>
 80119aa:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80119ae:	d1bb      	bne.n	8011928 <_printf_float+0xe8>
 80119b0:	2900      	cmp	r1, #0
 80119b2:	d1b9      	bne.n	8011928 <_printf_float+0xe8>
 80119b4:	2301      	movs	r3, #1
 80119b6:	e7b6      	b.n	8011926 <_printf_float+0xe6>
 80119b8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80119bc:	d119      	bne.n	80119f2 <_printf_float+0x1b2>
 80119be:	2900      	cmp	r1, #0
 80119c0:	6863      	ldr	r3, [r4, #4]
 80119c2:	dd0c      	ble.n	80119de <_printf_float+0x19e>
 80119c4:	6121      	str	r1, [r4, #16]
 80119c6:	b913      	cbnz	r3, 80119ce <_printf_float+0x18e>
 80119c8:	6822      	ldr	r2, [r4, #0]
 80119ca:	07d2      	lsls	r2, r2, #31
 80119cc:	d502      	bpl.n	80119d4 <_printf_float+0x194>
 80119ce:	3301      	adds	r3, #1
 80119d0:	440b      	add	r3, r1
 80119d2:	6123      	str	r3, [r4, #16]
 80119d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80119d6:	65a3      	str	r3, [r4, #88]	; 0x58
 80119d8:	f04f 0900 	mov.w	r9, #0
 80119dc:	e7d9      	b.n	8011992 <_printf_float+0x152>
 80119de:	b913      	cbnz	r3, 80119e6 <_printf_float+0x1a6>
 80119e0:	6822      	ldr	r2, [r4, #0]
 80119e2:	07d0      	lsls	r0, r2, #31
 80119e4:	d501      	bpl.n	80119ea <_printf_float+0x1aa>
 80119e6:	3302      	adds	r3, #2
 80119e8:	e7f3      	b.n	80119d2 <_printf_float+0x192>
 80119ea:	2301      	movs	r3, #1
 80119ec:	e7f1      	b.n	80119d2 <_printf_float+0x192>
 80119ee:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80119f2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80119f6:	4293      	cmp	r3, r2
 80119f8:	db05      	blt.n	8011a06 <_printf_float+0x1c6>
 80119fa:	6822      	ldr	r2, [r4, #0]
 80119fc:	6123      	str	r3, [r4, #16]
 80119fe:	07d1      	lsls	r1, r2, #31
 8011a00:	d5e8      	bpl.n	80119d4 <_printf_float+0x194>
 8011a02:	3301      	adds	r3, #1
 8011a04:	e7e5      	b.n	80119d2 <_printf_float+0x192>
 8011a06:	2b00      	cmp	r3, #0
 8011a08:	bfd4      	ite	le
 8011a0a:	f1c3 0302 	rsble	r3, r3, #2
 8011a0e:	2301      	movgt	r3, #1
 8011a10:	4413      	add	r3, r2
 8011a12:	e7de      	b.n	80119d2 <_printf_float+0x192>
 8011a14:	6823      	ldr	r3, [r4, #0]
 8011a16:	055a      	lsls	r2, r3, #21
 8011a18:	d407      	bmi.n	8011a2a <_printf_float+0x1ea>
 8011a1a:	6923      	ldr	r3, [r4, #16]
 8011a1c:	4642      	mov	r2, r8
 8011a1e:	4631      	mov	r1, r6
 8011a20:	4628      	mov	r0, r5
 8011a22:	47b8      	blx	r7
 8011a24:	3001      	adds	r0, #1
 8011a26:	d12b      	bne.n	8011a80 <_printf_float+0x240>
 8011a28:	e767      	b.n	80118fa <_printf_float+0xba>
 8011a2a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8011a2e:	f240 80dc 	bls.w	8011bea <_printf_float+0x3aa>
 8011a32:	2200      	movs	r2, #0
 8011a34:	2300      	movs	r3, #0
 8011a36:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011a3a:	f7ef f86d 	bl	8000b18 <__aeabi_dcmpeq>
 8011a3e:	2800      	cmp	r0, #0
 8011a40:	d033      	beq.n	8011aaa <_printf_float+0x26a>
 8011a42:	2301      	movs	r3, #1
 8011a44:	4a41      	ldr	r2, [pc, #260]	; (8011b4c <_printf_float+0x30c>)
 8011a46:	4631      	mov	r1, r6
 8011a48:	4628      	mov	r0, r5
 8011a4a:	47b8      	blx	r7
 8011a4c:	3001      	adds	r0, #1
 8011a4e:	f43f af54 	beq.w	80118fa <_printf_float+0xba>
 8011a52:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011a56:	429a      	cmp	r2, r3
 8011a58:	db02      	blt.n	8011a60 <_printf_float+0x220>
 8011a5a:	6823      	ldr	r3, [r4, #0]
 8011a5c:	07d8      	lsls	r0, r3, #31
 8011a5e:	d50f      	bpl.n	8011a80 <_printf_float+0x240>
 8011a60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011a64:	4631      	mov	r1, r6
 8011a66:	4628      	mov	r0, r5
 8011a68:	47b8      	blx	r7
 8011a6a:	3001      	adds	r0, #1
 8011a6c:	f43f af45 	beq.w	80118fa <_printf_float+0xba>
 8011a70:	f04f 0800 	mov.w	r8, #0
 8011a74:	f104 091a 	add.w	r9, r4, #26
 8011a78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011a7a:	3b01      	subs	r3, #1
 8011a7c:	4543      	cmp	r3, r8
 8011a7e:	dc09      	bgt.n	8011a94 <_printf_float+0x254>
 8011a80:	6823      	ldr	r3, [r4, #0]
 8011a82:	079b      	lsls	r3, r3, #30
 8011a84:	f100 8103 	bmi.w	8011c8e <_printf_float+0x44e>
 8011a88:	68e0      	ldr	r0, [r4, #12]
 8011a8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011a8c:	4298      	cmp	r0, r3
 8011a8e:	bfb8      	it	lt
 8011a90:	4618      	movlt	r0, r3
 8011a92:	e734      	b.n	80118fe <_printf_float+0xbe>
 8011a94:	2301      	movs	r3, #1
 8011a96:	464a      	mov	r2, r9
 8011a98:	4631      	mov	r1, r6
 8011a9a:	4628      	mov	r0, r5
 8011a9c:	47b8      	blx	r7
 8011a9e:	3001      	adds	r0, #1
 8011aa0:	f43f af2b 	beq.w	80118fa <_printf_float+0xba>
 8011aa4:	f108 0801 	add.w	r8, r8, #1
 8011aa8:	e7e6      	b.n	8011a78 <_printf_float+0x238>
 8011aaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	dc2b      	bgt.n	8011b08 <_printf_float+0x2c8>
 8011ab0:	2301      	movs	r3, #1
 8011ab2:	4a26      	ldr	r2, [pc, #152]	; (8011b4c <_printf_float+0x30c>)
 8011ab4:	4631      	mov	r1, r6
 8011ab6:	4628      	mov	r0, r5
 8011ab8:	47b8      	blx	r7
 8011aba:	3001      	adds	r0, #1
 8011abc:	f43f af1d 	beq.w	80118fa <_printf_float+0xba>
 8011ac0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011ac2:	b923      	cbnz	r3, 8011ace <_printf_float+0x28e>
 8011ac4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011ac6:	b913      	cbnz	r3, 8011ace <_printf_float+0x28e>
 8011ac8:	6823      	ldr	r3, [r4, #0]
 8011aca:	07d9      	lsls	r1, r3, #31
 8011acc:	d5d8      	bpl.n	8011a80 <_printf_float+0x240>
 8011ace:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011ad2:	4631      	mov	r1, r6
 8011ad4:	4628      	mov	r0, r5
 8011ad6:	47b8      	blx	r7
 8011ad8:	3001      	adds	r0, #1
 8011ada:	f43f af0e 	beq.w	80118fa <_printf_float+0xba>
 8011ade:	f04f 0900 	mov.w	r9, #0
 8011ae2:	f104 0a1a 	add.w	sl, r4, #26
 8011ae6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011ae8:	425b      	negs	r3, r3
 8011aea:	454b      	cmp	r3, r9
 8011aec:	dc01      	bgt.n	8011af2 <_printf_float+0x2b2>
 8011aee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011af0:	e794      	b.n	8011a1c <_printf_float+0x1dc>
 8011af2:	2301      	movs	r3, #1
 8011af4:	4652      	mov	r2, sl
 8011af6:	4631      	mov	r1, r6
 8011af8:	4628      	mov	r0, r5
 8011afa:	47b8      	blx	r7
 8011afc:	3001      	adds	r0, #1
 8011afe:	f43f aefc 	beq.w	80118fa <_printf_float+0xba>
 8011b02:	f109 0901 	add.w	r9, r9, #1
 8011b06:	e7ee      	b.n	8011ae6 <_printf_float+0x2a6>
 8011b08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011b0a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011b0c:	429a      	cmp	r2, r3
 8011b0e:	bfa8      	it	ge
 8011b10:	461a      	movge	r2, r3
 8011b12:	2a00      	cmp	r2, #0
 8011b14:	4691      	mov	r9, r2
 8011b16:	dd07      	ble.n	8011b28 <_printf_float+0x2e8>
 8011b18:	4613      	mov	r3, r2
 8011b1a:	4631      	mov	r1, r6
 8011b1c:	4642      	mov	r2, r8
 8011b1e:	4628      	mov	r0, r5
 8011b20:	47b8      	blx	r7
 8011b22:	3001      	adds	r0, #1
 8011b24:	f43f aee9 	beq.w	80118fa <_printf_float+0xba>
 8011b28:	f104 031a 	add.w	r3, r4, #26
 8011b2c:	f04f 0b00 	mov.w	fp, #0
 8011b30:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011b34:	9306      	str	r3, [sp, #24]
 8011b36:	e015      	b.n	8011b64 <_printf_float+0x324>
 8011b38:	7fefffff 	.word	0x7fefffff
 8011b3c:	08016968 	.word	0x08016968
 8011b40:	08016964 	.word	0x08016964
 8011b44:	08016970 	.word	0x08016970
 8011b48:	0801696c 	.word	0x0801696c
 8011b4c:	08016c24 	.word	0x08016c24
 8011b50:	2301      	movs	r3, #1
 8011b52:	9a06      	ldr	r2, [sp, #24]
 8011b54:	4631      	mov	r1, r6
 8011b56:	4628      	mov	r0, r5
 8011b58:	47b8      	blx	r7
 8011b5a:	3001      	adds	r0, #1
 8011b5c:	f43f aecd 	beq.w	80118fa <_printf_float+0xba>
 8011b60:	f10b 0b01 	add.w	fp, fp, #1
 8011b64:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8011b68:	ebaa 0309 	sub.w	r3, sl, r9
 8011b6c:	455b      	cmp	r3, fp
 8011b6e:	dcef      	bgt.n	8011b50 <_printf_float+0x310>
 8011b70:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011b74:	429a      	cmp	r2, r3
 8011b76:	44d0      	add	r8, sl
 8011b78:	db15      	blt.n	8011ba6 <_printf_float+0x366>
 8011b7a:	6823      	ldr	r3, [r4, #0]
 8011b7c:	07da      	lsls	r2, r3, #31
 8011b7e:	d412      	bmi.n	8011ba6 <_printf_float+0x366>
 8011b80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011b82:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011b84:	eba3 020a 	sub.w	r2, r3, sl
 8011b88:	eba3 0a01 	sub.w	sl, r3, r1
 8011b8c:	4592      	cmp	sl, r2
 8011b8e:	bfa8      	it	ge
 8011b90:	4692      	movge	sl, r2
 8011b92:	f1ba 0f00 	cmp.w	sl, #0
 8011b96:	dc0e      	bgt.n	8011bb6 <_printf_float+0x376>
 8011b98:	f04f 0800 	mov.w	r8, #0
 8011b9c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011ba0:	f104 091a 	add.w	r9, r4, #26
 8011ba4:	e019      	b.n	8011bda <_printf_float+0x39a>
 8011ba6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011baa:	4631      	mov	r1, r6
 8011bac:	4628      	mov	r0, r5
 8011bae:	47b8      	blx	r7
 8011bb0:	3001      	adds	r0, #1
 8011bb2:	d1e5      	bne.n	8011b80 <_printf_float+0x340>
 8011bb4:	e6a1      	b.n	80118fa <_printf_float+0xba>
 8011bb6:	4653      	mov	r3, sl
 8011bb8:	4642      	mov	r2, r8
 8011bba:	4631      	mov	r1, r6
 8011bbc:	4628      	mov	r0, r5
 8011bbe:	47b8      	blx	r7
 8011bc0:	3001      	adds	r0, #1
 8011bc2:	d1e9      	bne.n	8011b98 <_printf_float+0x358>
 8011bc4:	e699      	b.n	80118fa <_printf_float+0xba>
 8011bc6:	2301      	movs	r3, #1
 8011bc8:	464a      	mov	r2, r9
 8011bca:	4631      	mov	r1, r6
 8011bcc:	4628      	mov	r0, r5
 8011bce:	47b8      	blx	r7
 8011bd0:	3001      	adds	r0, #1
 8011bd2:	f43f ae92 	beq.w	80118fa <_printf_float+0xba>
 8011bd6:	f108 0801 	add.w	r8, r8, #1
 8011bda:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011bde:	1a9b      	subs	r3, r3, r2
 8011be0:	eba3 030a 	sub.w	r3, r3, sl
 8011be4:	4543      	cmp	r3, r8
 8011be6:	dcee      	bgt.n	8011bc6 <_printf_float+0x386>
 8011be8:	e74a      	b.n	8011a80 <_printf_float+0x240>
 8011bea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011bec:	2a01      	cmp	r2, #1
 8011bee:	dc01      	bgt.n	8011bf4 <_printf_float+0x3b4>
 8011bf0:	07db      	lsls	r3, r3, #31
 8011bf2:	d53a      	bpl.n	8011c6a <_printf_float+0x42a>
 8011bf4:	2301      	movs	r3, #1
 8011bf6:	4642      	mov	r2, r8
 8011bf8:	4631      	mov	r1, r6
 8011bfa:	4628      	mov	r0, r5
 8011bfc:	47b8      	blx	r7
 8011bfe:	3001      	adds	r0, #1
 8011c00:	f43f ae7b 	beq.w	80118fa <_printf_float+0xba>
 8011c04:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011c08:	4631      	mov	r1, r6
 8011c0a:	4628      	mov	r0, r5
 8011c0c:	47b8      	blx	r7
 8011c0e:	3001      	adds	r0, #1
 8011c10:	f108 0801 	add.w	r8, r8, #1
 8011c14:	f43f ae71 	beq.w	80118fa <_printf_float+0xba>
 8011c18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011c1a:	2200      	movs	r2, #0
 8011c1c:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8011c20:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011c24:	2300      	movs	r3, #0
 8011c26:	f7ee ff77 	bl	8000b18 <__aeabi_dcmpeq>
 8011c2a:	b9c8      	cbnz	r0, 8011c60 <_printf_float+0x420>
 8011c2c:	4653      	mov	r3, sl
 8011c2e:	4642      	mov	r2, r8
 8011c30:	4631      	mov	r1, r6
 8011c32:	4628      	mov	r0, r5
 8011c34:	47b8      	blx	r7
 8011c36:	3001      	adds	r0, #1
 8011c38:	d10e      	bne.n	8011c58 <_printf_float+0x418>
 8011c3a:	e65e      	b.n	80118fa <_printf_float+0xba>
 8011c3c:	2301      	movs	r3, #1
 8011c3e:	4652      	mov	r2, sl
 8011c40:	4631      	mov	r1, r6
 8011c42:	4628      	mov	r0, r5
 8011c44:	47b8      	blx	r7
 8011c46:	3001      	adds	r0, #1
 8011c48:	f43f ae57 	beq.w	80118fa <_printf_float+0xba>
 8011c4c:	f108 0801 	add.w	r8, r8, #1
 8011c50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011c52:	3b01      	subs	r3, #1
 8011c54:	4543      	cmp	r3, r8
 8011c56:	dcf1      	bgt.n	8011c3c <_printf_float+0x3fc>
 8011c58:	464b      	mov	r3, r9
 8011c5a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011c5e:	e6de      	b.n	8011a1e <_printf_float+0x1de>
 8011c60:	f04f 0800 	mov.w	r8, #0
 8011c64:	f104 0a1a 	add.w	sl, r4, #26
 8011c68:	e7f2      	b.n	8011c50 <_printf_float+0x410>
 8011c6a:	2301      	movs	r3, #1
 8011c6c:	e7df      	b.n	8011c2e <_printf_float+0x3ee>
 8011c6e:	2301      	movs	r3, #1
 8011c70:	464a      	mov	r2, r9
 8011c72:	4631      	mov	r1, r6
 8011c74:	4628      	mov	r0, r5
 8011c76:	47b8      	blx	r7
 8011c78:	3001      	adds	r0, #1
 8011c7a:	f43f ae3e 	beq.w	80118fa <_printf_float+0xba>
 8011c7e:	f108 0801 	add.w	r8, r8, #1
 8011c82:	68e3      	ldr	r3, [r4, #12]
 8011c84:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011c86:	1a9b      	subs	r3, r3, r2
 8011c88:	4543      	cmp	r3, r8
 8011c8a:	dcf0      	bgt.n	8011c6e <_printf_float+0x42e>
 8011c8c:	e6fc      	b.n	8011a88 <_printf_float+0x248>
 8011c8e:	f04f 0800 	mov.w	r8, #0
 8011c92:	f104 0919 	add.w	r9, r4, #25
 8011c96:	e7f4      	b.n	8011c82 <_printf_float+0x442>
 8011c98:	2900      	cmp	r1, #0
 8011c9a:	f43f ae8b 	beq.w	80119b4 <_printf_float+0x174>
 8011c9e:	2300      	movs	r3, #0
 8011ca0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8011ca4:	ab09      	add	r3, sp, #36	; 0x24
 8011ca6:	9300      	str	r3, [sp, #0]
 8011ca8:	ec49 8b10 	vmov	d0, r8, r9
 8011cac:	6022      	str	r2, [r4, #0]
 8011cae:	f8cd a004 	str.w	sl, [sp, #4]
 8011cb2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8011cb6:	4628      	mov	r0, r5
 8011cb8:	f7ff fd2e 	bl	8011718 <__cvt>
 8011cbc:	4680      	mov	r8, r0
 8011cbe:	e648      	b.n	8011952 <_printf_float+0x112>

08011cc0 <_printf_common>:
 8011cc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011cc4:	4691      	mov	r9, r2
 8011cc6:	461f      	mov	r7, r3
 8011cc8:	688a      	ldr	r2, [r1, #8]
 8011cca:	690b      	ldr	r3, [r1, #16]
 8011ccc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011cd0:	4293      	cmp	r3, r2
 8011cd2:	bfb8      	it	lt
 8011cd4:	4613      	movlt	r3, r2
 8011cd6:	f8c9 3000 	str.w	r3, [r9]
 8011cda:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011cde:	4606      	mov	r6, r0
 8011ce0:	460c      	mov	r4, r1
 8011ce2:	b112      	cbz	r2, 8011cea <_printf_common+0x2a>
 8011ce4:	3301      	adds	r3, #1
 8011ce6:	f8c9 3000 	str.w	r3, [r9]
 8011cea:	6823      	ldr	r3, [r4, #0]
 8011cec:	0699      	lsls	r1, r3, #26
 8011cee:	bf42      	ittt	mi
 8011cf0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8011cf4:	3302      	addmi	r3, #2
 8011cf6:	f8c9 3000 	strmi.w	r3, [r9]
 8011cfa:	6825      	ldr	r5, [r4, #0]
 8011cfc:	f015 0506 	ands.w	r5, r5, #6
 8011d00:	d107      	bne.n	8011d12 <_printf_common+0x52>
 8011d02:	f104 0a19 	add.w	sl, r4, #25
 8011d06:	68e3      	ldr	r3, [r4, #12]
 8011d08:	f8d9 2000 	ldr.w	r2, [r9]
 8011d0c:	1a9b      	subs	r3, r3, r2
 8011d0e:	42ab      	cmp	r3, r5
 8011d10:	dc28      	bgt.n	8011d64 <_printf_common+0xa4>
 8011d12:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8011d16:	6822      	ldr	r2, [r4, #0]
 8011d18:	3300      	adds	r3, #0
 8011d1a:	bf18      	it	ne
 8011d1c:	2301      	movne	r3, #1
 8011d1e:	0692      	lsls	r2, r2, #26
 8011d20:	d42d      	bmi.n	8011d7e <_printf_common+0xbe>
 8011d22:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011d26:	4639      	mov	r1, r7
 8011d28:	4630      	mov	r0, r6
 8011d2a:	47c0      	blx	r8
 8011d2c:	3001      	adds	r0, #1
 8011d2e:	d020      	beq.n	8011d72 <_printf_common+0xb2>
 8011d30:	6823      	ldr	r3, [r4, #0]
 8011d32:	68e5      	ldr	r5, [r4, #12]
 8011d34:	f8d9 2000 	ldr.w	r2, [r9]
 8011d38:	f003 0306 	and.w	r3, r3, #6
 8011d3c:	2b04      	cmp	r3, #4
 8011d3e:	bf08      	it	eq
 8011d40:	1aad      	subeq	r5, r5, r2
 8011d42:	68a3      	ldr	r3, [r4, #8]
 8011d44:	6922      	ldr	r2, [r4, #16]
 8011d46:	bf0c      	ite	eq
 8011d48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011d4c:	2500      	movne	r5, #0
 8011d4e:	4293      	cmp	r3, r2
 8011d50:	bfc4      	itt	gt
 8011d52:	1a9b      	subgt	r3, r3, r2
 8011d54:	18ed      	addgt	r5, r5, r3
 8011d56:	f04f 0900 	mov.w	r9, #0
 8011d5a:	341a      	adds	r4, #26
 8011d5c:	454d      	cmp	r5, r9
 8011d5e:	d11a      	bne.n	8011d96 <_printf_common+0xd6>
 8011d60:	2000      	movs	r0, #0
 8011d62:	e008      	b.n	8011d76 <_printf_common+0xb6>
 8011d64:	2301      	movs	r3, #1
 8011d66:	4652      	mov	r2, sl
 8011d68:	4639      	mov	r1, r7
 8011d6a:	4630      	mov	r0, r6
 8011d6c:	47c0      	blx	r8
 8011d6e:	3001      	adds	r0, #1
 8011d70:	d103      	bne.n	8011d7a <_printf_common+0xba>
 8011d72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011d7a:	3501      	adds	r5, #1
 8011d7c:	e7c3      	b.n	8011d06 <_printf_common+0x46>
 8011d7e:	18e1      	adds	r1, r4, r3
 8011d80:	1c5a      	adds	r2, r3, #1
 8011d82:	2030      	movs	r0, #48	; 0x30
 8011d84:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011d88:	4422      	add	r2, r4
 8011d8a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011d8e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011d92:	3302      	adds	r3, #2
 8011d94:	e7c5      	b.n	8011d22 <_printf_common+0x62>
 8011d96:	2301      	movs	r3, #1
 8011d98:	4622      	mov	r2, r4
 8011d9a:	4639      	mov	r1, r7
 8011d9c:	4630      	mov	r0, r6
 8011d9e:	47c0      	blx	r8
 8011da0:	3001      	adds	r0, #1
 8011da2:	d0e6      	beq.n	8011d72 <_printf_common+0xb2>
 8011da4:	f109 0901 	add.w	r9, r9, #1
 8011da8:	e7d8      	b.n	8011d5c <_printf_common+0x9c>
	...

08011dac <_printf_i>:
 8011dac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011db0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8011db4:	460c      	mov	r4, r1
 8011db6:	7e09      	ldrb	r1, [r1, #24]
 8011db8:	b085      	sub	sp, #20
 8011dba:	296e      	cmp	r1, #110	; 0x6e
 8011dbc:	4617      	mov	r7, r2
 8011dbe:	4606      	mov	r6, r0
 8011dc0:	4698      	mov	r8, r3
 8011dc2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011dc4:	f000 80b3 	beq.w	8011f2e <_printf_i+0x182>
 8011dc8:	d822      	bhi.n	8011e10 <_printf_i+0x64>
 8011dca:	2963      	cmp	r1, #99	; 0x63
 8011dcc:	d036      	beq.n	8011e3c <_printf_i+0x90>
 8011dce:	d80a      	bhi.n	8011de6 <_printf_i+0x3a>
 8011dd0:	2900      	cmp	r1, #0
 8011dd2:	f000 80b9 	beq.w	8011f48 <_printf_i+0x19c>
 8011dd6:	2958      	cmp	r1, #88	; 0x58
 8011dd8:	f000 8083 	beq.w	8011ee2 <_printf_i+0x136>
 8011ddc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011de0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8011de4:	e032      	b.n	8011e4c <_printf_i+0xa0>
 8011de6:	2964      	cmp	r1, #100	; 0x64
 8011de8:	d001      	beq.n	8011dee <_printf_i+0x42>
 8011dea:	2969      	cmp	r1, #105	; 0x69
 8011dec:	d1f6      	bne.n	8011ddc <_printf_i+0x30>
 8011dee:	6820      	ldr	r0, [r4, #0]
 8011df0:	6813      	ldr	r3, [r2, #0]
 8011df2:	0605      	lsls	r5, r0, #24
 8011df4:	f103 0104 	add.w	r1, r3, #4
 8011df8:	d52a      	bpl.n	8011e50 <_printf_i+0xa4>
 8011dfa:	681b      	ldr	r3, [r3, #0]
 8011dfc:	6011      	str	r1, [r2, #0]
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	da03      	bge.n	8011e0a <_printf_i+0x5e>
 8011e02:	222d      	movs	r2, #45	; 0x2d
 8011e04:	425b      	negs	r3, r3
 8011e06:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8011e0a:	486f      	ldr	r0, [pc, #444]	; (8011fc8 <_printf_i+0x21c>)
 8011e0c:	220a      	movs	r2, #10
 8011e0e:	e039      	b.n	8011e84 <_printf_i+0xd8>
 8011e10:	2973      	cmp	r1, #115	; 0x73
 8011e12:	f000 809d 	beq.w	8011f50 <_printf_i+0x1a4>
 8011e16:	d808      	bhi.n	8011e2a <_printf_i+0x7e>
 8011e18:	296f      	cmp	r1, #111	; 0x6f
 8011e1a:	d020      	beq.n	8011e5e <_printf_i+0xb2>
 8011e1c:	2970      	cmp	r1, #112	; 0x70
 8011e1e:	d1dd      	bne.n	8011ddc <_printf_i+0x30>
 8011e20:	6823      	ldr	r3, [r4, #0]
 8011e22:	f043 0320 	orr.w	r3, r3, #32
 8011e26:	6023      	str	r3, [r4, #0]
 8011e28:	e003      	b.n	8011e32 <_printf_i+0x86>
 8011e2a:	2975      	cmp	r1, #117	; 0x75
 8011e2c:	d017      	beq.n	8011e5e <_printf_i+0xb2>
 8011e2e:	2978      	cmp	r1, #120	; 0x78
 8011e30:	d1d4      	bne.n	8011ddc <_printf_i+0x30>
 8011e32:	2378      	movs	r3, #120	; 0x78
 8011e34:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011e38:	4864      	ldr	r0, [pc, #400]	; (8011fcc <_printf_i+0x220>)
 8011e3a:	e055      	b.n	8011ee8 <_printf_i+0x13c>
 8011e3c:	6813      	ldr	r3, [r2, #0]
 8011e3e:	1d19      	adds	r1, r3, #4
 8011e40:	681b      	ldr	r3, [r3, #0]
 8011e42:	6011      	str	r1, [r2, #0]
 8011e44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011e48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011e4c:	2301      	movs	r3, #1
 8011e4e:	e08c      	b.n	8011f6a <_printf_i+0x1be>
 8011e50:	681b      	ldr	r3, [r3, #0]
 8011e52:	6011      	str	r1, [r2, #0]
 8011e54:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011e58:	bf18      	it	ne
 8011e5a:	b21b      	sxthne	r3, r3
 8011e5c:	e7cf      	b.n	8011dfe <_printf_i+0x52>
 8011e5e:	6813      	ldr	r3, [r2, #0]
 8011e60:	6825      	ldr	r5, [r4, #0]
 8011e62:	1d18      	adds	r0, r3, #4
 8011e64:	6010      	str	r0, [r2, #0]
 8011e66:	0628      	lsls	r0, r5, #24
 8011e68:	d501      	bpl.n	8011e6e <_printf_i+0xc2>
 8011e6a:	681b      	ldr	r3, [r3, #0]
 8011e6c:	e002      	b.n	8011e74 <_printf_i+0xc8>
 8011e6e:	0668      	lsls	r0, r5, #25
 8011e70:	d5fb      	bpl.n	8011e6a <_printf_i+0xbe>
 8011e72:	881b      	ldrh	r3, [r3, #0]
 8011e74:	4854      	ldr	r0, [pc, #336]	; (8011fc8 <_printf_i+0x21c>)
 8011e76:	296f      	cmp	r1, #111	; 0x6f
 8011e78:	bf14      	ite	ne
 8011e7a:	220a      	movne	r2, #10
 8011e7c:	2208      	moveq	r2, #8
 8011e7e:	2100      	movs	r1, #0
 8011e80:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011e84:	6865      	ldr	r5, [r4, #4]
 8011e86:	60a5      	str	r5, [r4, #8]
 8011e88:	2d00      	cmp	r5, #0
 8011e8a:	f2c0 8095 	blt.w	8011fb8 <_printf_i+0x20c>
 8011e8e:	6821      	ldr	r1, [r4, #0]
 8011e90:	f021 0104 	bic.w	r1, r1, #4
 8011e94:	6021      	str	r1, [r4, #0]
 8011e96:	2b00      	cmp	r3, #0
 8011e98:	d13d      	bne.n	8011f16 <_printf_i+0x16a>
 8011e9a:	2d00      	cmp	r5, #0
 8011e9c:	f040 808e 	bne.w	8011fbc <_printf_i+0x210>
 8011ea0:	4665      	mov	r5, ip
 8011ea2:	2a08      	cmp	r2, #8
 8011ea4:	d10b      	bne.n	8011ebe <_printf_i+0x112>
 8011ea6:	6823      	ldr	r3, [r4, #0]
 8011ea8:	07db      	lsls	r3, r3, #31
 8011eaa:	d508      	bpl.n	8011ebe <_printf_i+0x112>
 8011eac:	6923      	ldr	r3, [r4, #16]
 8011eae:	6862      	ldr	r2, [r4, #4]
 8011eb0:	429a      	cmp	r2, r3
 8011eb2:	bfde      	ittt	le
 8011eb4:	2330      	movle	r3, #48	; 0x30
 8011eb6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011eba:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8011ebe:	ebac 0305 	sub.w	r3, ip, r5
 8011ec2:	6123      	str	r3, [r4, #16]
 8011ec4:	f8cd 8000 	str.w	r8, [sp]
 8011ec8:	463b      	mov	r3, r7
 8011eca:	aa03      	add	r2, sp, #12
 8011ecc:	4621      	mov	r1, r4
 8011ece:	4630      	mov	r0, r6
 8011ed0:	f7ff fef6 	bl	8011cc0 <_printf_common>
 8011ed4:	3001      	adds	r0, #1
 8011ed6:	d14d      	bne.n	8011f74 <_printf_i+0x1c8>
 8011ed8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011edc:	b005      	add	sp, #20
 8011ede:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011ee2:	4839      	ldr	r0, [pc, #228]	; (8011fc8 <_printf_i+0x21c>)
 8011ee4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8011ee8:	6813      	ldr	r3, [r2, #0]
 8011eea:	6821      	ldr	r1, [r4, #0]
 8011eec:	1d1d      	adds	r5, r3, #4
 8011eee:	681b      	ldr	r3, [r3, #0]
 8011ef0:	6015      	str	r5, [r2, #0]
 8011ef2:	060a      	lsls	r2, r1, #24
 8011ef4:	d50b      	bpl.n	8011f0e <_printf_i+0x162>
 8011ef6:	07ca      	lsls	r2, r1, #31
 8011ef8:	bf44      	itt	mi
 8011efa:	f041 0120 	orrmi.w	r1, r1, #32
 8011efe:	6021      	strmi	r1, [r4, #0]
 8011f00:	b91b      	cbnz	r3, 8011f0a <_printf_i+0x15e>
 8011f02:	6822      	ldr	r2, [r4, #0]
 8011f04:	f022 0220 	bic.w	r2, r2, #32
 8011f08:	6022      	str	r2, [r4, #0]
 8011f0a:	2210      	movs	r2, #16
 8011f0c:	e7b7      	b.n	8011e7e <_printf_i+0xd2>
 8011f0e:	064d      	lsls	r5, r1, #25
 8011f10:	bf48      	it	mi
 8011f12:	b29b      	uxthmi	r3, r3
 8011f14:	e7ef      	b.n	8011ef6 <_printf_i+0x14a>
 8011f16:	4665      	mov	r5, ip
 8011f18:	fbb3 f1f2 	udiv	r1, r3, r2
 8011f1c:	fb02 3311 	mls	r3, r2, r1, r3
 8011f20:	5cc3      	ldrb	r3, [r0, r3]
 8011f22:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8011f26:	460b      	mov	r3, r1
 8011f28:	2900      	cmp	r1, #0
 8011f2a:	d1f5      	bne.n	8011f18 <_printf_i+0x16c>
 8011f2c:	e7b9      	b.n	8011ea2 <_printf_i+0xf6>
 8011f2e:	6813      	ldr	r3, [r2, #0]
 8011f30:	6825      	ldr	r5, [r4, #0]
 8011f32:	6961      	ldr	r1, [r4, #20]
 8011f34:	1d18      	adds	r0, r3, #4
 8011f36:	6010      	str	r0, [r2, #0]
 8011f38:	0628      	lsls	r0, r5, #24
 8011f3a:	681b      	ldr	r3, [r3, #0]
 8011f3c:	d501      	bpl.n	8011f42 <_printf_i+0x196>
 8011f3e:	6019      	str	r1, [r3, #0]
 8011f40:	e002      	b.n	8011f48 <_printf_i+0x19c>
 8011f42:	066a      	lsls	r2, r5, #25
 8011f44:	d5fb      	bpl.n	8011f3e <_printf_i+0x192>
 8011f46:	8019      	strh	r1, [r3, #0]
 8011f48:	2300      	movs	r3, #0
 8011f4a:	6123      	str	r3, [r4, #16]
 8011f4c:	4665      	mov	r5, ip
 8011f4e:	e7b9      	b.n	8011ec4 <_printf_i+0x118>
 8011f50:	6813      	ldr	r3, [r2, #0]
 8011f52:	1d19      	adds	r1, r3, #4
 8011f54:	6011      	str	r1, [r2, #0]
 8011f56:	681d      	ldr	r5, [r3, #0]
 8011f58:	6862      	ldr	r2, [r4, #4]
 8011f5a:	2100      	movs	r1, #0
 8011f5c:	4628      	mov	r0, r5
 8011f5e:	f7ee f967 	bl	8000230 <memchr>
 8011f62:	b108      	cbz	r0, 8011f68 <_printf_i+0x1bc>
 8011f64:	1b40      	subs	r0, r0, r5
 8011f66:	6060      	str	r0, [r4, #4]
 8011f68:	6863      	ldr	r3, [r4, #4]
 8011f6a:	6123      	str	r3, [r4, #16]
 8011f6c:	2300      	movs	r3, #0
 8011f6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011f72:	e7a7      	b.n	8011ec4 <_printf_i+0x118>
 8011f74:	6923      	ldr	r3, [r4, #16]
 8011f76:	462a      	mov	r2, r5
 8011f78:	4639      	mov	r1, r7
 8011f7a:	4630      	mov	r0, r6
 8011f7c:	47c0      	blx	r8
 8011f7e:	3001      	adds	r0, #1
 8011f80:	d0aa      	beq.n	8011ed8 <_printf_i+0x12c>
 8011f82:	6823      	ldr	r3, [r4, #0]
 8011f84:	079b      	lsls	r3, r3, #30
 8011f86:	d413      	bmi.n	8011fb0 <_printf_i+0x204>
 8011f88:	68e0      	ldr	r0, [r4, #12]
 8011f8a:	9b03      	ldr	r3, [sp, #12]
 8011f8c:	4298      	cmp	r0, r3
 8011f8e:	bfb8      	it	lt
 8011f90:	4618      	movlt	r0, r3
 8011f92:	e7a3      	b.n	8011edc <_printf_i+0x130>
 8011f94:	2301      	movs	r3, #1
 8011f96:	464a      	mov	r2, r9
 8011f98:	4639      	mov	r1, r7
 8011f9a:	4630      	mov	r0, r6
 8011f9c:	47c0      	blx	r8
 8011f9e:	3001      	adds	r0, #1
 8011fa0:	d09a      	beq.n	8011ed8 <_printf_i+0x12c>
 8011fa2:	3501      	adds	r5, #1
 8011fa4:	68e3      	ldr	r3, [r4, #12]
 8011fa6:	9a03      	ldr	r2, [sp, #12]
 8011fa8:	1a9b      	subs	r3, r3, r2
 8011faa:	42ab      	cmp	r3, r5
 8011fac:	dcf2      	bgt.n	8011f94 <_printf_i+0x1e8>
 8011fae:	e7eb      	b.n	8011f88 <_printf_i+0x1dc>
 8011fb0:	2500      	movs	r5, #0
 8011fb2:	f104 0919 	add.w	r9, r4, #25
 8011fb6:	e7f5      	b.n	8011fa4 <_printf_i+0x1f8>
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	d1ac      	bne.n	8011f16 <_printf_i+0x16a>
 8011fbc:	7803      	ldrb	r3, [r0, #0]
 8011fbe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011fc2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011fc6:	e76c      	b.n	8011ea2 <_printf_i+0xf6>
 8011fc8:	08016974 	.word	0x08016974
 8011fcc:	08016985 	.word	0x08016985

08011fd0 <iprintf>:
 8011fd0:	b40f      	push	{r0, r1, r2, r3}
 8011fd2:	4b0a      	ldr	r3, [pc, #40]	; (8011ffc <iprintf+0x2c>)
 8011fd4:	b513      	push	{r0, r1, r4, lr}
 8011fd6:	681c      	ldr	r4, [r3, #0]
 8011fd8:	b124      	cbz	r4, 8011fe4 <iprintf+0x14>
 8011fda:	69a3      	ldr	r3, [r4, #24]
 8011fdc:	b913      	cbnz	r3, 8011fe4 <iprintf+0x14>
 8011fde:	4620      	mov	r0, r4
 8011fe0:	f001 f8aa 	bl	8013138 <__sinit>
 8011fe4:	ab05      	add	r3, sp, #20
 8011fe6:	9a04      	ldr	r2, [sp, #16]
 8011fe8:	68a1      	ldr	r1, [r4, #8]
 8011fea:	9301      	str	r3, [sp, #4]
 8011fec:	4620      	mov	r0, r4
 8011fee:	f001 febf 	bl	8013d70 <_vfiprintf_r>
 8011ff2:	b002      	add	sp, #8
 8011ff4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011ff8:	b004      	add	sp, #16
 8011ffa:	4770      	bx	lr
 8011ffc:	20001eb4 	.word	0x20001eb4

08012000 <_puts_r>:
 8012000:	b570      	push	{r4, r5, r6, lr}
 8012002:	460e      	mov	r6, r1
 8012004:	4605      	mov	r5, r0
 8012006:	b118      	cbz	r0, 8012010 <_puts_r+0x10>
 8012008:	6983      	ldr	r3, [r0, #24]
 801200a:	b90b      	cbnz	r3, 8012010 <_puts_r+0x10>
 801200c:	f001 f894 	bl	8013138 <__sinit>
 8012010:	69ab      	ldr	r3, [r5, #24]
 8012012:	68ac      	ldr	r4, [r5, #8]
 8012014:	b913      	cbnz	r3, 801201c <_puts_r+0x1c>
 8012016:	4628      	mov	r0, r5
 8012018:	f001 f88e 	bl	8013138 <__sinit>
 801201c:	4b23      	ldr	r3, [pc, #140]	; (80120ac <_puts_r+0xac>)
 801201e:	429c      	cmp	r4, r3
 8012020:	d117      	bne.n	8012052 <_puts_r+0x52>
 8012022:	686c      	ldr	r4, [r5, #4]
 8012024:	89a3      	ldrh	r3, [r4, #12]
 8012026:	071b      	lsls	r3, r3, #28
 8012028:	d51d      	bpl.n	8012066 <_puts_r+0x66>
 801202a:	6923      	ldr	r3, [r4, #16]
 801202c:	b1db      	cbz	r3, 8012066 <_puts_r+0x66>
 801202e:	3e01      	subs	r6, #1
 8012030:	68a3      	ldr	r3, [r4, #8]
 8012032:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8012036:	3b01      	subs	r3, #1
 8012038:	60a3      	str	r3, [r4, #8]
 801203a:	b9e9      	cbnz	r1, 8012078 <_puts_r+0x78>
 801203c:	2b00      	cmp	r3, #0
 801203e:	da2e      	bge.n	801209e <_puts_r+0x9e>
 8012040:	4622      	mov	r2, r4
 8012042:	210a      	movs	r1, #10
 8012044:	4628      	mov	r0, r5
 8012046:	f000 f883 	bl	8012150 <__swbuf_r>
 801204a:	3001      	adds	r0, #1
 801204c:	d011      	beq.n	8012072 <_puts_r+0x72>
 801204e:	200a      	movs	r0, #10
 8012050:	e011      	b.n	8012076 <_puts_r+0x76>
 8012052:	4b17      	ldr	r3, [pc, #92]	; (80120b0 <_puts_r+0xb0>)
 8012054:	429c      	cmp	r4, r3
 8012056:	d101      	bne.n	801205c <_puts_r+0x5c>
 8012058:	68ac      	ldr	r4, [r5, #8]
 801205a:	e7e3      	b.n	8012024 <_puts_r+0x24>
 801205c:	4b15      	ldr	r3, [pc, #84]	; (80120b4 <_puts_r+0xb4>)
 801205e:	429c      	cmp	r4, r3
 8012060:	bf08      	it	eq
 8012062:	68ec      	ldreq	r4, [r5, #12]
 8012064:	e7de      	b.n	8012024 <_puts_r+0x24>
 8012066:	4621      	mov	r1, r4
 8012068:	4628      	mov	r0, r5
 801206a:	f000 f8c3 	bl	80121f4 <__swsetup_r>
 801206e:	2800      	cmp	r0, #0
 8012070:	d0dd      	beq.n	801202e <_puts_r+0x2e>
 8012072:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012076:	bd70      	pop	{r4, r5, r6, pc}
 8012078:	2b00      	cmp	r3, #0
 801207a:	da04      	bge.n	8012086 <_puts_r+0x86>
 801207c:	69a2      	ldr	r2, [r4, #24]
 801207e:	429a      	cmp	r2, r3
 8012080:	dc06      	bgt.n	8012090 <_puts_r+0x90>
 8012082:	290a      	cmp	r1, #10
 8012084:	d004      	beq.n	8012090 <_puts_r+0x90>
 8012086:	6823      	ldr	r3, [r4, #0]
 8012088:	1c5a      	adds	r2, r3, #1
 801208a:	6022      	str	r2, [r4, #0]
 801208c:	7019      	strb	r1, [r3, #0]
 801208e:	e7cf      	b.n	8012030 <_puts_r+0x30>
 8012090:	4622      	mov	r2, r4
 8012092:	4628      	mov	r0, r5
 8012094:	f000 f85c 	bl	8012150 <__swbuf_r>
 8012098:	3001      	adds	r0, #1
 801209a:	d1c9      	bne.n	8012030 <_puts_r+0x30>
 801209c:	e7e9      	b.n	8012072 <_puts_r+0x72>
 801209e:	6823      	ldr	r3, [r4, #0]
 80120a0:	200a      	movs	r0, #10
 80120a2:	1c5a      	adds	r2, r3, #1
 80120a4:	6022      	str	r2, [r4, #0]
 80120a6:	7018      	strb	r0, [r3, #0]
 80120a8:	e7e5      	b.n	8012076 <_puts_r+0x76>
 80120aa:	bf00      	nop
 80120ac:	080169c4 	.word	0x080169c4
 80120b0:	080169e4 	.word	0x080169e4
 80120b4:	080169a4 	.word	0x080169a4

080120b8 <puts>:
 80120b8:	4b02      	ldr	r3, [pc, #8]	; (80120c4 <puts+0xc>)
 80120ba:	4601      	mov	r1, r0
 80120bc:	6818      	ldr	r0, [r3, #0]
 80120be:	f7ff bf9f 	b.w	8012000 <_puts_r>
 80120c2:	bf00      	nop
 80120c4:	20001eb4 	.word	0x20001eb4

080120c8 <sniprintf>:
 80120c8:	b40c      	push	{r2, r3}
 80120ca:	b530      	push	{r4, r5, lr}
 80120cc:	4b17      	ldr	r3, [pc, #92]	; (801212c <sniprintf+0x64>)
 80120ce:	1e0c      	subs	r4, r1, #0
 80120d0:	b09d      	sub	sp, #116	; 0x74
 80120d2:	681d      	ldr	r5, [r3, #0]
 80120d4:	da08      	bge.n	80120e8 <sniprintf+0x20>
 80120d6:	238b      	movs	r3, #139	; 0x8b
 80120d8:	602b      	str	r3, [r5, #0]
 80120da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80120de:	b01d      	add	sp, #116	; 0x74
 80120e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80120e4:	b002      	add	sp, #8
 80120e6:	4770      	bx	lr
 80120e8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80120ec:	f8ad 3014 	strh.w	r3, [sp, #20]
 80120f0:	bf14      	ite	ne
 80120f2:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80120f6:	4623      	moveq	r3, r4
 80120f8:	9304      	str	r3, [sp, #16]
 80120fa:	9307      	str	r3, [sp, #28]
 80120fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012100:	9002      	str	r0, [sp, #8]
 8012102:	9006      	str	r0, [sp, #24]
 8012104:	f8ad 3016 	strh.w	r3, [sp, #22]
 8012108:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801210a:	ab21      	add	r3, sp, #132	; 0x84
 801210c:	a902      	add	r1, sp, #8
 801210e:	4628      	mov	r0, r5
 8012110:	9301      	str	r3, [sp, #4]
 8012112:	f001 fd0b 	bl	8013b2c <_svfiprintf_r>
 8012116:	1c43      	adds	r3, r0, #1
 8012118:	bfbc      	itt	lt
 801211a:	238b      	movlt	r3, #139	; 0x8b
 801211c:	602b      	strlt	r3, [r5, #0]
 801211e:	2c00      	cmp	r4, #0
 8012120:	d0dd      	beq.n	80120de <sniprintf+0x16>
 8012122:	9b02      	ldr	r3, [sp, #8]
 8012124:	2200      	movs	r2, #0
 8012126:	701a      	strb	r2, [r3, #0]
 8012128:	e7d9      	b.n	80120de <sniprintf+0x16>
 801212a:	bf00      	nop
 801212c:	20001eb4 	.word	0x20001eb4

08012130 <strcat>:
 8012130:	b510      	push	{r4, lr}
 8012132:	4603      	mov	r3, r0
 8012134:	781a      	ldrb	r2, [r3, #0]
 8012136:	1c5c      	adds	r4, r3, #1
 8012138:	b93a      	cbnz	r2, 801214a <strcat+0x1a>
 801213a:	3b01      	subs	r3, #1
 801213c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012140:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012144:	2a00      	cmp	r2, #0
 8012146:	d1f9      	bne.n	801213c <strcat+0xc>
 8012148:	bd10      	pop	{r4, pc}
 801214a:	4623      	mov	r3, r4
 801214c:	e7f2      	b.n	8012134 <strcat+0x4>
	...

08012150 <__swbuf_r>:
 8012150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012152:	460e      	mov	r6, r1
 8012154:	4614      	mov	r4, r2
 8012156:	4605      	mov	r5, r0
 8012158:	b118      	cbz	r0, 8012162 <__swbuf_r+0x12>
 801215a:	6983      	ldr	r3, [r0, #24]
 801215c:	b90b      	cbnz	r3, 8012162 <__swbuf_r+0x12>
 801215e:	f000 ffeb 	bl	8013138 <__sinit>
 8012162:	4b21      	ldr	r3, [pc, #132]	; (80121e8 <__swbuf_r+0x98>)
 8012164:	429c      	cmp	r4, r3
 8012166:	d12a      	bne.n	80121be <__swbuf_r+0x6e>
 8012168:	686c      	ldr	r4, [r5, #4]
 801216a:	69a3      	ldr	r3, [r4, #24]
 801216c:	60a3      	str	r3, [r4, #8]
 801216e:	89a3      	ldrh	r3, [r4, #12]
 8012170:	071a      	lsls	r2, r3, #28
 8012172:	d52e      	bpl.n	80121d2 <__swbuf_r+0x82>
 8012174:	6923      	ldr	r3, [r4, #16]
 8012176:	b363      	cbz	r3, 80121d2 <__swbuf_r+0x82>
 8012178:	6923      	ldr	r3, [r4, #16]
 801217a:	6820      	ldr	r0, [r4, #0]
 801217c:	1ac0      	subs	r0, r0, r3
 801217e:	6963      	ldr	r3, [r4, #20]
 8012180:	b2f6      	uxtb	r6, r6
 8012182:	4283      	cmp	r3, r0
 8012184:	4637      	mov	r7, r6
 8012186:	dc04      	bgt.n	8012192 <__swbuf_r+0x42>
 8012188:	4621      	mov	r1, r4
 801218a:	4628      	mov	r0, r5
 801218c:	f000 ff6a 	bl	8013064 <_fflush_r>
 8012190:	bb28      	cbnz	r0, 80121de <__swbuf_r+0x8e>
 8012192:	68a3      	ldr	r3, [r4, #8]
 8012194:	3b01      	subs	r3, #1
 8012196:	60a3      	str	r3, [r4, #8]
 8012198:	6823      	ldr	r3, [r4, #0]
 801219a:	1c5a      	adds	r2, r3, #1
 801219c:	6022      	str	r2, [r4, #0]
 801219e:	701e      	strb	r6, [r3, #0]
 80121a0:	6963      	ldr	r3, [r4, #20]
 80121a2:	3001      	adds	r0, #1
 80121a4:	4283      	cmp	r3, r0
 80121a6:	d004      	beq.n	80121b2 <__swbuf_r+0x62>
 80121a8:	89a3      	ldrh	r3, [r4, #12]
 80121aa:	07db      	lsls	r3, r3, #31
 80121ac:	d519      	bpl.n	80121e2 <__swbuf_r+0x92>
 80121ae:	2e0a      	cmp	r6, #10
 80121b0:	d117      	bne.n	80121e2 <__swbuf_r+0x92>
 80121b2:	4621      	mov	r1, r4
 80121b4:	4628      	mov	r0, r5
 80121b6:	f000 ff55 	bl	8013064 <_fflush_r>
 80121ba:	b190      	cbz	r0, 80121e2 <__swbuf_r+0x92>
 80121bc:	e00f      	b.n	80121de <__swbuf_r+0x8e>
 80121be:	4b0b      	ldr	r3, [pc, #44]	; (80121ec <__swbuf_r+0x9c>)
 80121c0:	429c      	cmp	r4, r3
 80121c2:	d101      	bne.n	80121c8 <__swbuf_r+0x78>
 80121c4:	68ac      	ldr	r4, [r5, #8]
 80121c6:	e7d0      	b.n	801216a <__swbuf_r+0x1a>
 80121c8:	4b09      	ldr	r3, [pc, #36]	; (80121f0 <__swbuf_r+0xa0>)
 80121ca:	429c      	cmp	r4, r3
 80121cc:	bf08      	it	eq
 80121ce:	68ec      	ldreq	r4, [r5, #12]
 80121d0:	e7cb      	b.n	801216a <__swbuf_r+0x1a>
 80121d2:	4621      	mov	r1, r4
 80121d4:	4628      	mov	r0, r5
 80121d6:	f000 f80d 	bl	80121f4 <__swsetup_r>
 80121da:	2800      	cmp	r0, #0
 80121dc:	d0cc      	beq.n	8012178 <__swbuf_r+0x28>
 80121de:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80121e2:	4638      	mov	r0, r7
 80121e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80121e6:	bf00      	nop
 80121e8:	080169c4 	.word	0x080169c4
 80121ec:	080169e4 	.word	0x080169e4
 80121f0:	080169a4 	.word	0x080169a4

080121f4 <__swsetup_r>:
 80121f4:	4b32      	ldr	r3, [pc, #200]	; (80122c0 <__swsetup_r+0xcc>)
 80121f6:	b570      	push	{r4, r5, r6, lr}
 80121f8:	681d      	ldr	r5, [r3, #0]
 80121fa:	4606      	mov	r6, r0
 80121fc:	460c      	mov	r4, r1
 80121fe:	b125      	cbz	r5, 801220a <__swsetup_r+0x16>
 8012200:	69ab      	ldr	r3, [r5, #24]
 8012202:	b913      	cbnz	r3, 801220a <__swsetup_r+0x16>
 8012204:	4628      	mov	r0, r5
 8012206:	f000 ff97 	bl	8013138 <__sinit>
 801220a:	4b2e      	ldr	r3, [pc, #184]	; (80122c4 <__swsetup_r+0xd0>)
 801220c:	429c      	cmp	r4, r3
 801220e:	d10f      	bne.n	8012230 <__swsetup_r+0x3c>
 8012210:	686c      	ldr	r4, [r5, #4]
 8012212:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012216:	b29a      	uxth	r2, r3
 8012218:	0715      	lsls	r5, r2, #28
 801221a:	d42c      	bmi.n	8012276 <__swsetup_r+0x82>
 801221c:	06d0      	lsls	r0, r2, #27
 801221e:	d411      	bmi.n	8012244 <__swsetup_r+0x50>
 8012220:	2209      	movs	r2, #9
 8012222:	6032      	str	r2, [r6, #0]
 8012224:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012228:	81a3      	strh	r3, [r4, #12]
 801222a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801222e:	e03e      	b.n	80122ae <__swsetup_r+0xba>
 8012230:	4b25      	ldr	r3, [pc, #148]	; (80122c8 <__swsetup_r+0xd4>)
 8012232:	429c      	cmp	r4, r3
 8012234:	d101      	bne.n	801223a <__swsetup_r+0x46>
 8012236:	68ac      	ldr	r4, [r5, #8]
 8012238:	e7eb      	b.n	8012212 <__swsetup_r+0x1e>
 801223a:	4b24      	ldr	r3, [pc, #144]	; (80122cc <__swsetup_r+0xd8>)
 801223c:	429c      	cmp	r4, r3
 801223e:	bf08      	it	eq
 8012240:	68ec      	ldreq	r4, [r5, #12]
 8012242:	e7e6      	b.n	8012212 <__swsetup_r+0x1e>
 8012244:	0751      	lsls	r1, r2, #29
 8012246:	d512      	bpl.n	801226e <__swsetup_r+0x7a>
 8012248:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801224a:	b141      	cbz	r1, 801225e <__swsetup_r+0x6a>
 801224c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012250:	4299      	cmp	r1, r3
 8012252:	d002      	beq.n	801225a <__swsetup_r+0x66>
 8012254:	4630      	mov	r0, r6
 8012256:	f001 fb67 	bl	8013928 <_free_r>
 801225a:	2300      	movs	r3, #0
 801225c:	6363      	str	r3, [r4, #52]	; 0x34
 801225e:	89a3      	ldrh	r3, [r4, #12]
 8012260:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012264:	81a3      	strh	r3, [r4, #12]
 8012266:	2300      	movs	r3, #0
 8012268:	6063      	str	r3, [r4, #4]
 801226a:	6923      	ldr	r3, [r4, #16]
 801226c:	6023      	str	r3, [r4, #0]
 801226e:	89a3      	ldrh	r3, [r4, #12]
 8012270:	f043 0308 	orr.w	r3, r3, #8
 8012274:	81a3      	strh	r3, [r4, #12]
 8012276:	6923      	ldr	r3, [r4, #16]
 8012278:	b94b      	cbnz	r3, 801228e <__swsetup_r+0x9a>
 801227a:	89a3      	ldrh	r3, [r4, #12]
 801227c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012280:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012284:	d003      	beq.n	801228e <__swsetup_r+0x9a>
 8012286:	4621      	mov	r1, r4
 8012288:	4630      	mov	r0, r6
 801228a:	f001 f811 	bl	80132b0 <__smakebuf_r>
 801228e:	89a2      	ldrh	r2, [r4, #12]
 8012290:	f012 0301 	ands.w	r3, r2, #1
 8012294:	d00c      	beq.n	80122b0 <__swsetup_r+0xbc>
 8012296:	2300      	movs	r3, #0
 8012298:	60a3      	str	r3, [r4, #8]
 801229a:	6963      	ldr	r3, [r4, #20]
 801229c:	425b      	negs	r3, r3
 801229e:	61a3      	str	r3, [r4, #24]
 80122a0:	6923      	ldr	r3, [r4, #16]
 80122a2:	b953      	cbnz	r3, 80122ba <__swsetup_r+0xc6>
 80122a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80122a8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80122ac:	d1ba      	bne.n	8012224 <__swsetup_r+0x30>
 80122ae:	bd70      	pop	{r4, r5, r6, pc}
 80122b0:	0792      	lsls	r2, r2, #30
 80122b2:	bf58      	it	pl
 80122b4:	6963      	ldrpl	r3, [r4, #20]
 80122b6:	60a3      	str	r3, [r4, #8]
 80122b8:	e7f2      	b.n	80122a0 <__swsetup_r+0xac>
 80122ba:	2000      	movs	r0, #0
 80122bc:	e7f7      	b.n	80122ae <__swsetup_r+0xba>
 80122be:	bf00      	nop
 80122c0:	20001eb4 	.word	0x20001eb4
 80122c4:	080169c4 	.word	0x080169c4
 80122c8:	080169e4 	.word	0x080169e4
 80122cc:	080169a4 	.word	0x080169a4

080122d0 <quorem>:
 80122d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122d4:	6903      	ldr	r3, [r0, #16]
 80122d6:	690c      	ldr	r4, [r1, #16]
 80122d8:	42a3      	cmp	r3, r4
 80122da:	4680      	mov	r8, r0
 80122dc:	f2c0 8082 	blt.w	80123e4 <quorem+0x114>
 80122e0:	3c01      	subs	r4, #1
 80122e2:	f101 0714 	add.w	r7, r1, #20
 80122e6:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80122ea:	f100 0614 	add.w	r6, r0, #20
 80122ee:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80122f2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80122f6:	eb06 030c 	add.w	r3, r6, ip
 80122fa:	3501      	adds	r5, #1
 80122fc:	eb07 090c 	add.w	r9, r7, ip
 8012300:	9301      	str	r3, [sp, #4]
 8012302:	fbb0 f5f5 	udiv	r5, r0, r5
 8012306:	b395      	cbz	r5, 801236e <quorem+0x9e>
 8012308:	f04f 0a00 	mov.w	sl, #0
 801230c:	4638      	mov	r0, r7
 801230e:	46b6      	mov	lr, r6
 8012310:	46d3      	mov	fp, sl
 8012312:	f850 2b04 	ldr.w	r2, [r0], #4
 8012316:	b293      	uxth	r3, r2
 8012318:	fb05 a303 	mla	r3, r5, r3, sl
 801231c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012320:	b29b      	uxth	r3, r3
 8012322:	ebab 0303 	sub.w	r3, fp, r3
 8012326:	0c12      	lsrs	r2, r2, #16
 8012328:	f8de b000 	ldr.w	fp, [lr]
 801232c:	fb05 a202 	mla	r2, r5, r2, sl
 8012330:	fa13 f38b 	uxtah	r3, r3, fp
 8012334:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8012338:	fa1f fb82 	uxth.w	fp, r2
 801233c:	f8de 2000 	ldr.w	r2, [lr]
 8012340:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8012344:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012348:	b29b      	uxth	r3, r3
 801234a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801234e:	4581      	cmp	r9, r0
 8012350:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8012354:	f84e 3b04 	str.w	r3, [lr], #4
 8012358:	d2db      	bcs.n	8012312 <quorem+0x42>
 801235a:	f856 300c 	ldr.w	r3, [r6, ip]
 801235e:	b933      	cbnz	r3, 801236e <quorem+0x9e>
 8012360:	9b01      	ldr	r3, [sp, #4]
 8012362:	3b04      	subs	r3, #4
 8012364:	429e      	cmp	r6, r3
 8012366:	461a      	mov	r2, r3
 8012368:	d330      	bcc.n	80123cc <quorem+0xfc>
 801236a:	f8c8 4010 	str.w	r4, [r8, #16]
 801236e:	4640      	mov	r0, r8
 8012370:	f001 fa06 	bl	8013780 <__mcmp>
 8012374:	2800      	cmp	r0, #0
 8012376:	db25      	blt.n	80123c4 <quorem+0xf4>
 8012378:	3501      	adds	r5, #1
 801237a:	4630      	mov	r0, r6
 801237c:	f04f 0c00 	mov.w	ip, #0
 8012380:	f857 2b04 	ldr.w	r2, [r7], #4
 8012384:	f8d0 e000 	ldr.w	lr, [r0]
 8012388:	b293      	uxth	r3, r2
 801238a:	ebac 0303 	sub.w	r3, ip, r3
 801238e:	0c12      	lsrs	r2, r2, #16
 8012390:	fa13 f38e 	uxtah	r3, r3, lr
 8012394:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8012398:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801239c:	b29b      	uxth	r3, r3
 801239e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80123a2:	45b9      	cmp	r9, r7
 80123a4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80123a8:	f840 3b04 	str.w	r3, [r0], #4
 80123ac:	d2e8      	bcs.n	8012380 <quorem+0xb0>
 80123ae:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80123b2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80123b6:	b92a      	cbnz	r2, 80123c4 <quorem+0xf4>
 80123b8:	3b04      	subs	r3, #4
 80123ba:	429e      	cmp	r6, r3
 80123bc:	461a      	mov	r2, r3
 80123be:	d30b      	bcc.n	80123d8 <quorem+0x108>
 80123c0:	f8c8 4010 	str.w	r4, [r8, #16]
 80123c4:	4628      	mov	r0, r5
 80123c6:	b003      	add	sp, #12
 80123c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123cc:	6812      	ldr	r2, [r2, #0]
 80123ce:	3b04      	subs	r3, #4
 80123d0:	2a00      	cmp	r2, #0
 80123d2:	d1ca      	bne.n	801236a <quorem+0x9a>
 80123d4:	3c01      	subs	r4, #1
 80123d6:	e7c5      	b.n	8012364 <quorem+0x94>
 80123d8:	6812      	ldr	r2, [r2, #0]
 80123da:	3b04      	subs	r3, #4
 80123dc:	2a00      	cmp	r2, #0
 80123de:	d1ef      	bne.n	80123c0 <quorem+0xf0>
 80123e0:	3c01      	subs	r4, #1
 80123e2:	e7ea      	b.n	80123ba <quorem+0xea>
 80123e4:	2000      	movs	r0, #0
 80123e6:	e7ee      	b.n	80123c6 <quorem+0xf6>

080123e8 <_dtoa_r>:
 80123e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123ec:	ec57 6b10 	vmov	r6, r7, d0
 80123f0:	b097      	sub	sp, #92	; 0x5c
 80123f2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80123f4:	9106      	str	r1, [sp, #24]
 80123f6:	4604      	mov	r4, r0
 80123f8:	920b      	str	r2, [sp, #44]	; 0x2c
 80123fa:	9312      	str	r3, [sp, #72]	; 0x48
 80123fc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8012400:	e9cd 6700 	strd	r6, r7, [sp]
 8012404:	b93d      	cbnz	r5, 8012416 <_dtoa_r+0x2e>
 8012406:	2010      	movs	r0, #16
 8012408:	f000 ff92 	bl	8013330 <malloc>
 801240c:	6260      	str	r0, [r4, #36]	; 0x24
 801240e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8012412:	6005      	str	r5, [r0, #0]
 8012414:	60c5      	str	r5, [r0, #12]
 8012416:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012418:	6819      	ldr	r1, [r3, #0]
 801241a:	b151      	cbz	r1, 8012432 <_dtoa_r+0x4a>
 801241c:	685a      	ldr	r2, [r3, #4]
 801241e:	604a      	str	r2, [r1, #4]
 8012420:	2301      	movs	r3, #1
 8012422:	4093      	lsls	r3, r2
 8012424:	608b      	str	r3, [r1, #8]
 8012426:	4620      	mov	r0, r4
 8012428:	f000 ffc9 	bl	80133be <_Bfree>
 801242c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801242e:	2200      	movs	r2, #0
 8012430:	601a      	str	r2, [r3, #0]
 8012432:	1e3b      	subs	r3, r7, #0
 8012434:	bfbb      	ittet	lt
 8012436:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801243a:	9301      	strlt	r3, [sp, #4]
 801243c:	2300      	movge	r3, #0
 801243e:	2201      	movlt	r2, #1
 8012440:	bfac      	ite	ge
 8012442:	f8c8 3000 	strge.w	r3, [r8]
 8012446:	f8c8 2000 	strlt.w	r2, [r8]
 801244a:	4baf      	ldr	r3, [pc, #700]	; (8012708 <_dtoa_r+0x320>)
 801244c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012450:	ea33 0308 	bics.w	r3, r3, r8
 8012454:	d114      	bne.n	8012480 <_dtoa_r+0x98>
 8012456:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012458:	f242 730f 	movw	r3, #9999	; 0x270f
 801245c:	6013      	str	r3, [r2, #0]
 801245e:	9b00      	ldr	r3, [sp, #0]
 8012460:	b923      	cbnz	r3, 801246c <_dtoa_r+0x84>
 8012462:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8012466:	2800      	cmp	r0, #0
 8012468:	f000 8542 	beq.w	8012ef0 <_dtoa_r+0xb08>
 801246c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801246e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 801271c <_dtoa_r+0x334>
 8012472:	2b00      	cmp	r3, #0
 8012474:	f000 8544 	beq.w	8012f00 <_dtoa_r+0xb18>
 8012478:	f10b 0303 	add.w	r3, fp, #3
 801247c:	f000 bd3e 	b.w	8012efc <_dtoa_r+0xb14>
 8012480:	e9dd 6700 	ldrd	r6, r7, [sp]
 8012484:	2200      	movs	r2, #0
 8012486:	2300      	movs	r3, #0
 8012488:	4630      	mov	r0, r6
 801248a:	4639      	mov	r1, r7
 801248c:	f7ee fb44 	bl	8000b18 <__aeabi_dcmpeq>
 8012490:	4681      	mov	r9, r0
 8012492:	b168      	cbz	r0, 80124b0 <_dtoa_r+0xc8>
 8012494:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012496:	2301      	movs	r3, #1
 8012498:	6013      	str	r3, [r2, #0]
 801249a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801249c:	2b00      	cmp	r3, #0
 801249e:	f000 8524 	beq.w	8012eea <_dtoa_r+0xb02>
 80124a2:	4b9a      	ldr	r3, [pc, #616]	; (801270c <_dtoa_r+0x324>)
 80124a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80124a6:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 80124aa:	6013      	str	r3, [r2, #0]
 80124ac:	f000 bd28 	b.w	8012f00 <_dtoa_r+0xb18>
 80124b0:	aa14      	add	r2, sp, #80	; 0x50
 80124b2:	a915      	add	r1, sp, #84	; 0x54
 80124b4:	ec47 6b10 	vmov	d0, r6, r7
 80124b8:	4620      	mov	r0, r4
 80124ba:	f001 f9d8 	bl	801386e <__d2b>
 80124be:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80124c2:	9004      	str	r0, [sp, #16]
 80124c4:	2d00      	cmp	r5, #0
 80124c6:	d07c      	beq.n	80125c2 <_dtoa_r+0x1da>
 80124c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80124cc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80124d0:	46b2      	mov	sl, r6
 80124d2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80124d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80124da:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80124de:	2200      	movs	r2, #0
 80124e0:	4b8b      	ldr	r3, [pc, #556]	; (8012710 <_dtoa_r+0x328>)
 80124e2:	4650      	mov	r0, sl
 80124e4:	4659      	mov	r1, fp
 80124e6:	f7ed fef7 	bl	80002d8 <__aeabi_dsub>
 80124ea:	a381      	add	r3, pc, #516	; (adr r3, 80126f0 <_dtoa_r+0x308>)
 80124ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124f0:	f7ee f8aa 	bl	8000648 <__aeabi_dmul>
 80124f4:	a380      	add	r3, pc, #512	; (adr r3, 80126f8 <_dtoa_r+0x310>)
 80124f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124fa:	f7ed feef 	bl	80002dc <__adddf3>
 80124fe:	4606      	mov	r6, r0
 8012500:	4628      	mov	r0, r5
 8012502:	460f      	mov	r7, r1
 8012504:	f7ee f836 	bl	8000574 <__aeabi_i2d>
 8012508:	a37d      	add	r3, pc, #500	; (adr r3, 8012700 <_dtoa_r+0x318>)
 801250a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801250e:	f7ee f89b 	bl	8000648 <__aeabi_dmul>
 8012512:	4602      	mov	r2, r0
 8012514:	460b      	mov	r3, r1
 8012516:	4630      	mov	r0, r6
 8012518:	4639      	mov	r1, r7
 801251a:	f7ed fedf 	bl	80002dc <__adddf3>
 801251e:	4606      	mov	r6, r0
 8012520:	460f      	mov	r7, r1
 8012522:	f7ee fb41 	bl	8000ba8 <__aeabi_d2iz>
 8012526:	2200      	movs	r2, #0
 8012528:	4682      	mov	sl, r0
 801252a:	2300      	movs	r3, #0
 801252c:	4630      	mov	r0, r6
 801252e:	4639      	mov	r1, r7
 8012530:	f7ee fafc 	bl	8000b2c <__aeabi_dcmplt>
 8012534:	b148      	cbz	r0, 801254a <_dtoa_r+0x162>
 8012536:	4650      	mov	r0, sl
 8012538:	f7ee f81c 	bl	8000574 <__aeabi_i2d>
 801253c:	4632      	mov	r2, r6
 801253e:	463b      	mov	r3, r7
 8012540:	f7ee faea 	bl	8000b18 <__aeabi_dcmpeq>
 8012544:	b908      	cbnz	r0, 801254a <_dtoa_r+0x162>
 8012546:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801254a:	f1ba 0f16 	cmp.w	sl, #22
 801254e:	d859      	bhi.n	8012604 <_dtoa_r+0x21c>
 8012550:	4970      	ldr	r1, [pc, #448]	; (8012714 <_dtoa_r+0x32c>)
 8012552:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8012556:	e9dd 2300 	ldrd	r2, r3, [sp]
 801255a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801255e:	f7ee fb03 	bl	8000b68 <__aeabi_dcmpgt>
 8012562:	2800      	cmp	r0, #0
 8012564:	d050      	beq.n	8012608 <_dtoa_r+0x220>
 8012566:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801256a:	2300      	movs	r3, #0
 801256c:	930f      	str	r3, [sp, #60]	; 0x3c
 801256e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012570:	1b5d      	subs	r5, r3, r5
 8012572:	f1b5 0801 	subs.w	r8, r5, #1
 8012576:	bf49      	itett	mi
 8012578:	f1c5 0301 	rsbmi	r3, r5, #1
 801257c:	2300      	movpl	r3, #0
 801257e:	9305      	strmi	r3, [sp, #20]
 8012580:	f04f 0800 	movmi.w	r8, #0
 8012584:	bf58      	it	pl
 8012586:	9305      	strpl	r3, [sp, #20]
 8012588:	f1ba 0f00 	cmp.w	sl, #0
 801258c:	db3e      	blt.n	801260c <_dtoa_r+0x224>
 801258e:	2300      	movs	r3, #0
 8012590:	44d0      	add	r8, sl
 8012592:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8012596:	9307      	str	r3, [sp, #28]
 8012598:	9b06      	ldr	r3, [sp, #24]
 801259a:	2b09      	cmp	r3, #9
 801259c:	f200 8090 	bhi.w	80126c0 <_dtoa_r+0x2d8>
 80125a0:	2b05      	cmp	r3, #5
 80125a2:	bfc4      	itt	gt
 80125a4:	3b04      	subgt	r3, #4
 80125a6:	9306      	strgt	r3, [sp, #24]
 80125a8:	9b06      	ldr	r3, [sp, #24]
 80125aa:	f1a3 0302 	sub.w	r3, r3, #2
 80125ae:	bfcc      	ite	gt
 80125b0:	2500      	movgt	r5, #0
 80125b2:	2501      	movle	r5, #1
 80125b4:	2b03      	cmp	r3, #3
 80125b6:	f200 808f 	bhi.w	80126d8 <_dtoa_r+0x2f0>
 80125ba:	e8df f003 	tbb	[pc, r3]
 80125be:	7f7d      	.short	0x7f7d
 80125c0:	7131      	.short	0x7131
 80125c2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80125c6:	441d      	add	r5, r3
 80125c8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80125cc:	2820      	cmp	r0, #32
 80125ce:	dd13      	ble.n	80125f8 <_dtoa_r+0x210>
 80125d0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80125d4:	9b00      	ldr	r3, [sp, #0]
 80125d6:	fa08 f800 	lsl.w	r8, r8, r0
 80125da:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80125de:	fa23 f000 	lsr.w	r0, r3, r0
 80125e2:	ea48 0000 	orr.w	r0, r8, r0
 80125e6:	f7ed ffb5 	bl	8000554 <__aeabi_ui2d>
 80125ea:	2301      	movs	r3, #1
 80125ec:	4682      	mov	sl, r0
 80125ee:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80125f2:	3d01      	subs	r5, #1
 80125f4:	9313      	str	r3, [sp, #76]	; 0x4c
 80125f6:	e772      	b.n	80124de <_dtoa_r+0xf6>
 80125f8:	9b00      	ldr	r3, [sp, #0]
 80125fa:	f1c0 0020 	rsb	r0, r0, #32
 80125fe:	fa03 f000 	lsl.w	r0, r3, r0
 8012602:	e7f0      	b.n	80125e6 <_dtoa_r+0x1fe>
 8012604:	2301      	movs	r3, #1
 8012606:	e7b1      	b.n	801256c <_dtoa_r+0x184>
 8012608:	900f      	str	r0, [sp, #60]	; 0x3c
 801260a:	e7b0      	b.n	801256e <_dtoa_r+0x186>
 801260c:	9b05      	ldr	r3, [sp, #20]
 801260e:	eba3 030a 	sub.w	r3, r3, sl
 8012612:	9305      	str	r3, [sp, #20]
 8012614:	f1ca 0300 	rsb	r3, sl, #0
 8012618:	9307      	str	r3, [sp, #28]
 801261a:	2300      	movs	r3, #0
 801261c:	930e      	str	r3, [sp, #56]	; 0x38
 801261e:	e7bb      	b.n	8012598 <_dtoa_r+0x1b0>
 8012620:	2301      	movs	r3, #1
 8012622:	930a      	str	r3, [sp, #40]	; 0x28
 8012624:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012626:	2b00      	cmp	r3, #0
 8012628:	dd59      	ble.n	80126de <_dtoa_r+0x2f6>
 801262a:	9302      	str	r3, [sp, #8]
 801262c:	4699      	mov	r9, r3
 801262e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012630:	2200      	movs	r2, #0
 8012632:	6072      	str	r2, [r6, #4]
 8012634:	2204      	movs	r2, #4
 8012636:	f102 0014 	add.w	r0, r2, #20
 801263a:	4298      	cmp	r0, r3
 801263c:	6871      	ldr	r1, [r6, #4]
 801263e:	d953      	bls.n	80126e8 <_dtoa_r+0x300>
 8012640:	4620      	mov	r0, r4
 8012642:	f000 fe88 	bl	8013356 <_Balloc>
 8012646:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012648:	6030      	str	r0, [r6, #0]
 801264a:	f1b9 0f0e 	cmp.w	r9, #14
 801264e:	f8d3 b000 	ldr.w	fp, [r3]
 8012652:	f200 80e6 	bhi.w	8012822 <_dtoa_r+0x43a>
 8012656:	2d00      	cmp	r5, #0
 8012658:	f000 80e3 	beq.w	8012822 <_dtoa_r+0x43a>
 801265c:	ed9d 7b00 	vldr	d7, [sp]
 8012660:	f1ba 0f00 	cmp.w	sl, #0
 8012664:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8012668:	dd74      	ble.n	8012754 <_dtoa_r+0x36c>
 801266a:	4a2a      	ldr	r2, [pc, #168]	; (8012714 <_dtoa_r+0x32c>)
 801266c:	f00a 030f 	and.w	r3, sl, #15
 8012670:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012674:	ed93 7b00 	vldr	d7, [r3]
 8012678:	ea4f 162a 	mov.w	r6, sl, asr #4
 801267c:	06f0      	lsls	r0, r6, #27
 801267e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8012682:	d565      	bpl.n	8012750 <_dtoa_r+0x368>
 8012684:	4b24      	ldr	r3, [pc, #144]	; (8012718 <_dtoa_r+0x330>)
 8012686:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801268a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801268e:	f7ee f905 	bl	800089c <__aeabi_ddiv>
 8012692:	e9cd 0100 	strd	r0, r1, [sp]
 8012696:	f006 060f 	and.w	r6, r6, #15
 801269a:	2503      	movs	r5, #3
 801269c:	4f1e      	ldr	r7, [pc, #120]	; (8012718 <_dtoa_r+0x330>)
 801269e:	e04c      	b.n	801273a <_dtoa_r+0x352>
 80126a0:	2301      	movs	r3, #1
 80126a2:	930a      	str	r3, [sp, #40]	; 0x28
 80126a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80126a6:	4453      	add	r3, sl
 80126a8:	f103 0901 	add.w	r9, r3, #1
 80126ac:	9302      	str	r3, [sp, #8]
 80126ae:	464b      	mov	r3, r9
 80126b0:	2b01      	cmp	r3, #1
 80126b2:	bfb8      	it	lt
 80126b4:	2301      	movlt	r3, #1
 80126b6:	e7ba      	b.n	801262e <_dtoa_r+0x246>
 80126b8:	2300      	movs	r3, #0
 80126ba:	e7b2      	b.n	8012622 <_dtoa_r+0x23a>
 80126bc:	2300      	movs	r3, #0
 80126be:	e7f0      	b.n	80126a2 <_dtoa_r+0x2ba>
 80126c0:	2501      	movs	r5, #1
 80126c2:	2300      	movs	r3, #0
 80126c4:	9306      	str	r3, [sp, #24]
 80126c6:	950a      	str	r5, [sp, #40]	; 0x28
 80126c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80126cc:	9302      	str	r3, [sp, #8]
 80126ce:	4699      	mov	r9, r3
 80126d0:	2200      	movs	r2, #0
 80126d2:	2312      	movs	r3, #18
 80126d4:	920b      	str	r2, [sp, #44]	; 0x2c
 80126d6:	e7aa      	b.n	801262e <_dtoa_r+0x246>
 80126d8:	2301      	movs	r3, #1
 80126da:	930a      	str	r3, [sp, #40]	; 0x28
 80126dc:	e7f4      	b.n	80126c8 <_dtoa_r+0x2e0>
 80126de:	2301      	movs	r3, #1
 80126e0:	9302      	str	r3, [sp, #8]
 80126e2:	4699      	mov	r9, r3
 80126e4:	461a      	mov	r2, r3
 80126e6:	e7f5      	b.n	80126d4 <_dtoa_r+0x2ec>
 80126e8:	3101      	adds	r1, #1
 80126ea:	6071      	str	r1, [r6, #4]
 80126ec:	0052      	lsls	r2, r2, #1
 80126ee:	e7a2      	b.n	8012636 <_dtoa_r+0x24e>
 80126f0:	636f4361 	.word	0x636f4361
 80126f4:	3fd287a7 	.word	0x3fd287a7
 80126f8:	8b60c8b3 	.word	0x8b60c8b3
 80126fc:	3fc68a28 	.word	0x3fc68a28
 8012700:	509f79fb 	.word	0x509f79fb
 8012704:	3fd34413 	.word	0x3fd34413
 8012708:	7ff00000 	.word	0x7ff00000
 801270c:	08016c25 	.word	0x08016c25
 8012710:	3ff80000 	.word	0x3ff80000
 8012714:	08016a30 	.word	0x08016a30
 8012718:	08016a08 	.word	0x08016a08
 801271c:	0801699f 	.word	0x0801699f
 8012720:	07f1      	lsls	r1, r6, #31
 8012722:	d508      	bpl.n	8012736 <_dtoa_r+0x34e>
 8012724:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8012728:	e9d7 2300 	ldrd	r2, r3, [r7]
 801272c:	f7ed ff8c 	bl	8000648 <__aeabi_dmul>
 8012730:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8012734:	3501      	adds	r5, #1
 8012736:	1076      	asrs	r6, r6, #1
 8012738:	3708      	adds	r7, #8
 801273a:	2e00      	cmp	r6, #0
 801273c:	d1f0      	bne.n	8012720 <_dtoa_r+0x338>
 801273e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8012742:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012746:	f7ee f8a9 	bl	800089c <__aeabi_ddiv>
 801274a:	e9cd 0100 	strd	r0, r1, [sp]
 801274e:	e01a      	b.n	8012786 <_dtoa_r+0x39e>
 8012750:	2502      	movs	r5, #2
 8012752:	e7a3      	b.n	801269c <_dtoa_r+0x2b4>
 8012754:	f000 80a0 	beq.w	8012898 <_dtoa_r+0x4b0>
 8012758:	f1ca 0600 	rsb	r6, sl, #0
 801275c:	4b9f      	ldr	r3, [pc, #636]	; (80129dc <_dtoa_r+0x5f4>)
 801275e:	4fa0      	ldr	r7, [pc, #640]	; (80129e0 <_dtoa_r+0x5f8>)
 8012760:	f006 020f 	and.w	r2, r6, #15
 8012764:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012768:	e9d3 2300 	ldrd	r2, r3, [r3]
 801276c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8012770:	f7ed ff6a 	bl	8000648 <__aeabi_dmul>
 8012774:	e9cd 0100 	strd	r0, r1, [sp]
 8012778:	1136      	asrs	r6, r6, #4
 801277a:	2300      	movs	r3, #0
 801277c:	2502      	movs	r5, #2
 801277e:	2e00      	cmp	r6, #0
 8012780:	d17f      	bne.n	8012882 <_dtoa_r+0x49a>
 8012782:	2b00      	cmp	r3, #0
 8012784:	d1e1      	bne.n	801274a <_dtoa_r+0x362>
 8012786:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012788:	2b00      	cmp	r3, #0
 801278a:	f000 8087 	beq.w	801289c <_dtoa_r+0x4b4>
 801278e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8012792:	2200      	movs	r2, #0
 8012794:	4b93      	ldr	r3, [pc, #588]	; (80129e4 <_dtoa_r+0x5fc>)
 8012796:	4630      	mov	r0, r6
 8012798:	4639      	mov	r1, r7
 801279a:	f7ee f9c7 	bl	8000b2c <__aeabi_dcmplt>
 801279e:	2800      	cmp	r0, #0
 80127a0:	d07c      	beq.n	801289c <_dtoa_r+0x4b4>
 80127a2:	f1b9 0f00 	cmp.w	r9, #0
 80127a6:	d079      	beq.n	801289c <_dtoa_r+0x4b4>
 80127a8:	9b02      	ldr	r3, [sp, #8]
 80127aa:	2b00      	cmp	r3, #0
 80127ac:	dd35      	ble.n	801281a <_dtoa_r+0x432>
 80127ae:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80127b2:	9308      	str	r3, [sp, #32]
 80127b4:	4639      	mov	r1, r7
 80127b6:	2200      	movs	r2, #0
 80127b8:	4b8b      	ldr	r3, [pc, #556]	; (80129e8 <_dtoa_r+0x600>)
 80127ba:	4630      	mov	r0, r6
 80127bc:	f7ed ff44 	bl	8000648 <__aeabi_dmul>
 80127c0:	e9cd 0100 	strd	r0, r1, [sp]
 80127c4:	9f02      	ldr	r7, [sp, #8]
 80127c6:	3501      	adds	r5, #1
 80127c8:	4628      	mov	r0, r5
 80127ca:	f7ed fed3 	bl	8000574 <__aeabi_i2d>
 80127ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 80127d2:	f7ed ff39 	bl	8000648 <__aeabi_dmul>
 80127d6:	2200      	movs	r2, #0
 80127d8:	4b84      	ldr	r3, [pc, #528]	; (80129ec <_dtoa_r+0x604>)
 80127da:	f7ed fd7f 	bl	80002dc <__adddf3>
 80127de:	4605      	mov	r5, r0
 80127e0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80127e4:	2f00      	cmp	r7, #0
 80127e6:	d15d      	bne.n	80128a4 <_dtoa_r+0x4bc>
 80127e8:	2200      	movs	r2, #0
 80127ea:	4b81      	ldr	r3, [pc, #516]	; (80129f0 <_dtoa_r+0x608>)
 80127ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 80127f0:	f7ed fd72 	bl	80002d8 <__aeabi_dsub>
 80127f4:	462a      	mov	r2, r5
 80127f6:	4633      	mov	r3, r6
 80127f8:	e9cd 0100 	strd	r0, r1, [sp]
 80127fc:	f7ee f9b4 	bl	8000b68 <__aeabi_dcmpgt>
 8012800:	2800      	cmp	r0, #0
 8012802:	f040 8288 	bne.w	8012d16 <_dtoa_r+0x92e>
 8012806:	462a      	mov	r2, r5
 8012808:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801280c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012810:	f7ee f98c 	bl	8000b2c <__aeabi_dcmplt>
 8012814:	2800      	cmp	r0, #0
 8012816:	f040 827c 	bne.w	8012d12 <_dtoa_r+0x92a>
 801281a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801281e:	e9cd 2300 	strd	r2, r3, [sp]
 8012822:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012824:	2b00      	cmp	r3, #0
 8012826:	f2c0 8150 	blt.w	8012aca <_dtoa_r+0x6e2>
 801282a:	f1ba 0f0e 	cmp.w	sl, #14
 801282e:	f300 814c 	bgt.w	8012aca <_dtoa_r+0x6e2>
 8012832:	4b6a      	ldr	r3, [pc, #424]	; (80129dc <_dtoa_r+0x5f4>)
 8012834:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012838:	ed93 7b00 	vldr	d7, [r3]
 801283c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801283e:	2b00      	cmp	r3, #0
 8012840:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012844:	f280 80d8 	bge.w	80129f8 <_dtoa_r+0x610>
 8012848:	f1b9 0f00 	cmp.w	r9, #0
 801284c:	f300 80d4 	bgt.w	80129f8 <_dtoa_r+0x610>
 8012850:	f040 825e 	bne.w	8012d10 <_dtoa_r+0x928>
 8012854:	2200      	movs	r2, #0
 8012856:	4b66      	ldr	r3, [pc, #408]	; (80129f0 <_dtoa_r+0x608>)
 8012858:	ec51 0b17 	vmov	r0, r1, d7
 801285c:	f7ed fef4 	bl	8000648 <__aeabi_dmul>
 8012860:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012864:	f7ee f976 	bl	8000b54 <__aeabi_dcmpge>
 8012868:	464f      	mov	r7, r9
 801286a:	464e      	mov	r6, r9
 801286c:	2800      	cmp	r0, #0
 801286e:	f040 8234 	bne.w	8012cda <_dtoa_r+0x8f2>
 8012872:	2331      	movs	r3, #49	; 0x31
 8012874:	f10b 0501 	add.w	r5, fp, #1
 8012878:	f88b 3000 	strb.w	r3, [fp]
 801287c:	f10a 0a01 	add.w	sl, sl, #1
 8012880:	e22f      	b.n	8012ce2 <_dtoa_r+0x8fa>
 8012882:	07f2      	lsls	r2, r6, #31
 8012884:	d505      	bpl.n	8012892 <_dtoa_r+0x4aa>
 8012886:	e9d7 2300 	ldrd	r2, r3, [r7]
 801288a:	f7ed fedd 	bl	8000648 <__aeabi_dmul>
 801288e:	3501      	adds	r5, #1
 8012890:	2301      	movs	r3, #1
 8012892:	1076      	asrs	r6, r6, #1
 8012894:	3708      	adds	r7, #8
 8012896:	e772      	b.n	801277e <_dtoa_r+0x396>
 8012898:	2502      	movs	r5, #2
 801289a:	e774      	b.n	8012786 <_dtoa_r+0x39e>
 801289c:	f8cd a020 	str.w	sl, [sp, #32]
 80128a0:	464f      	mov	r7, r9
 80128a2:	e791      	b.n	80127c8 <_dtoa_r+0x3e0>
 80128a4:	4b4d      	ldr	r3, [pc, #308]	; (80129dc <_dtoa_r+0x5f4>)
 80128a6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80128aa:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80128ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80128b0:	2b00      	cmp	r3, #0
 80128b2:	d047      	beq.n	8012944 <_dtoa_r+0x55c>
 80128b4:	4602      	mov	r2, r0
 80128b6:	460b      	mov	r3, r1
 80128b8:	2000      	movs	r0, #0
 80128ba:	494e      	ldr	r1, [pc, #312]	; (80129f4 <_dtoa_r+0x60c>)
 80128bc:	f7ed ffee 	bl	800089c <__aeabi_ddiv>
 80128c0:	462a      	mov	r2, r5
 80128c2:	4633      	mov	r3, r6
 80128c4:	f7ed fd08 	bl	80002d8 <__aeabi_dsub>
 80128c8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80128cc:	465d      	mov	r5, fp
 80128ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 80128d2:	f7ee f969 	bl	8000ba8 <__aeabi_d2iz>
 80128d6:	4606      	mov	r6, r0
 80128d8:	f7ed fe4c 	bl	8000574 <__aeabi_i2d>
 80128dc:	4602      	mov	r2, r0
 80128de:	460b      	mov	r3, r1
 80128e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80128e4:	f7ed fcf8 	bl	80002d8 <__aeabi_dsub>
 80128e8:	3630      	adds	r6, #48	; 0x30
 80128ea:	f805 6b01 	strb.w	r6, [r5], #1
 80128ee:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80128f2:	e9cd 0100 	strd	r0, r1, [sp]
 80128f6:	f7ee f919 	bl	8000b2c <__aeabi_dcmplt>
 80128fa:	2800      	cmp	r0, #0
 80128fc:	d163      	bne.n	80129c6 <_dtoa_r+0x5de>
 80128fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012902:	2000      	movs	r0, #0
 8012904:	4937      	ldr	r1, [pc, #220]	; (80129e4 <_dtoa_r+0x5fc>)
 8012906:	f7ed fce7 	bl	80002d8 <__aeabi_dsub>
 801290a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801290e:	f7ee f90d 	bl	8000b2c <__aeabi_dcmplt>
 8012912:	2800      	cmp	r0, #0
 8012914:	f040 80b7 	bne.w	8012a86 <_dtoa_r+0x69e>
 8012918:	eba5 030b 	sub.w	r3, r5, fp
 801291c:	429f      	cmp	r7, r3
 801291e:	f77f af7c 	ble.w	801281a <_dtoa_r+0x432>
 8012922:	2200      	movs	r2, #0
 8012924:	4b30      	ldr	r3, [pc, #192]	; (80129e8 <_dtoa_r+0x600>)
 8012926:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801292a:	f7ed fe8d 	bl	8000648 <__aeabi_dmul>
 801292e:	2200      	movs	r2, #0
 8012930:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8012934:	4b2c      	ldr	r3, [pc, #176]	; (80129e8 <_dtoa_r+0x600>)
 8012936:	e9dd 0100 	ldrd	r0, r1, [sp]
 801293a:	f7ed fe85 	bl	8000648 <__aeabi_dmul>
 801293e:	e9cd 0100 	strd	r0, r1, [sp]
 8012942:	e7c4      	b.n	80128ce <_dtoa_r+0x4e6>
 8012944:	462a      	mov	r2, r5
 8012946:	4633      	mov	r3, r6
 8012948:	f7ed fe7e 	bl	8000648 <__aeabi_dmul>
 801294c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8012950:	eb0b 0507 	add.w	r5, fp, r7
 8012954:	465e      	mov	r6, fp
 8012956:	e9dd 0100 	ldrd	r0, r1, [sp]
 801295a:	f7ee f925 	bl	8000ba8 <__aeabi_d2iz>
 801295e:	4607      	mov	r7, r0
 8012960:	f7ed fe08 	bl	8000574 <__aeabi_i2d>
 8012964:	3730      	adds	r7, #48	; 0x30
 8012966:	4602      	mov	r2, r0
 8012968:	460b      	mov	r3, r1
 801296a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801296e:	f7ed fcb3 	bl	80002d8 <__aeabi_dsub>
 8012972:	f806 7b01 	strb.w	r7, [r6], #1
 8012976:	42ae      	cmp	r6, r5
 8012978:	e9cd 0100 	strd	r0, r1, [sp]
 801297c:	f04f 0200 	mov.w	r2, #0
 8012980:	d126      	bne.n	80129d0 <_dtoa_r+0x5e8>
 8012982:	4b1c      	ldr	r3, [pc, #112]	; (80129f4 <_dtoa_r+0x60c>)
 8012984:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012988:	f7ed fca8 	bl	80002dc <__adddf3>
 801298c:	4602      	mov	r2, r0
 801298e:	460b      	mov	r3, r1
 8012990:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012994:	f7ee f8e8 	bl	8000b68 <__aeabi_dcmpgt>
 8012998:	2800      	cmp	r0, #0
 801299a:	d174      	bne.n	8012a86 <_dtoa_r+0x69e>
 801299c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80129a0:	2000      	movs	r0, #0
 80129a2:	4914      	ldr	r1, [pc, #80]	; (80129f4 <_dtoa_r+0x60c>)
 80129a4:	f7ed fc98 	bl	80002d8 <__aeabi_dsub>
 80129a8:	4602      	mov	r2, r0
 80129aa:	460b      	mov	r3, r1
 80129ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80129b0:	f7ee f8bc 	bl	8000b2c <__aeabi_dcmplt>
 80129b4:	2800      	cmp	r0, #0
 80129b6:	f43f af30 	beq.w	801281a <_dtoa_r+0x432>
 80129ba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80129be:	2b30      	cmp	r3, #48	; 0x30
 80129c0:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80129c4:	d002      	beq.n	80129cc <_dtoa_r+0x5e4>
 80129c6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80129ca:	e04a      	b.n	8012a62 <_dtoa_r+0x67a>
 80129cc:	4615      	mov	r5, r2
 80129ce:	e7f4      	b.n	80129ba <_dtoa_r+0x5d2>
 80129d0:	4b05      	ldr	r3, [pc, #20]	; (80129e8 <_dtoa_r+0x600>)
 80129d2:	f7ed fe39 	bl	8000648 <__aeabi_dmul>
 80129d6:	e9cd 0100 	strd	r0, r1, [sp]
 80129da:	e7bc      	b.n	8012956 <_dtoa_r+0x56e>
 80129dc:	08016a30 	.word	0x08016a30
 80129e0:	08016a08 	.word	0x08016a08
 80129e4:	3ff00000 	.word	0x3ff00000
 80129e8:	40240000 	.word	0x40240000
 80129ec:	401c0000 	.word	0x401c0000
 80129f0:	40140000 	.word	0x40140000
 80129f4:	3fe00000 	.word	0x3fe00000
 80129f8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80129fc:	465d      	mov	r5, fp
 80129fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012a02:	4630      	mov	r0, r6
 8012a04:	4639      	mov	r1, r7
 8012a06:	f7ed ff49 	bl	800089c <__aeabi_ddiv>
 8012a0a:	f7ee f8cd 	bl	8000ba8 <__aeabi_d2iz>
 8012a0e:	4680      	mov	r8, r0
 8012a10:	f7ed fdb0 	bl	8000574 <__aeabi_i2d>
 8012a14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012a18:	f7ed fe16 	bl	8000648 <__aeabi_dmul>
 8012a1c:	4602      	mov	r2, r0
 8012a1e:	460b      	mov	r3, r1
 8012a20:	4630      	mov	r0, r6
 8012a22:	4639      	mov	r1, r7
 8012a24:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8012a28:	f7ed fc56 	bl	80002d8 <__aeabi_dsub>
 8012a2c:	f805 6b01 	strb.w	r6, [r5], #1
 8012a30:	eba5 060b 	sub.w	r6, r5, fp
 8012a34:	45b1      	cmp	r9, r6
 8012a36:	4602      	mov	r2, r0
 8012a38:	460b      	mov	r3, r1
 8012a3a:	d139      	bne.n	8012ab0 <_dtoa_r+0x6c8>
 8012a3c:	f7ed fc4e 	bl	80002dc <__adddf3>
 8012a40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012a44:	4606      	mov	r6, r0
 8012a46:	460f      	mov	r7, r1
 8012a48:	f7ee f88e 	bl	8000b68 <__aeabi_dcmpgt>
 8012a4c:	b9c8      	cbnz	r0, 8012a82 <_dtoa_r+0x69a>
 8012a4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012a52:	4630      	mov	r0, r6
 8012a54:	4639      	mov	r1, r7
 8012a56:	f7ee f85f 	bl	8000b18 <__aeabi_dcmpeq>
 8012a5a:	b110      	cbz	r0, 8012a62 <_dtoa_r+0x67a>
 8012a5c:	f018 0f01 	tst.w	r8, #1
 8012a60:	d10f      	bne.n	8012a82 <_dtoa_r+0x69a>
 8012a62:	9904      	ldr	r1, [sp, #16]
 8012a64:	4620      	mov	r0, r4
 8012a66:	f000 fcaa 	bl	80133be <_Bfree>
 8012a6a:	2300      	movs	r3, #0
 8012a6c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012a6e:	702b      	strb	r3, [r5, #0]
 8012a70:	f10a 0301 	add.w	r3, sl, #1
 8012a74:	6013      	str	r3, [r2, #0]
 8012a76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	f000 8241 	beq.w	8012f00 <_dtoa_r+0xb18>
 8012a7e:	601d      	str	r5, [r3, #0]
 8012a80:	e23e      	b.n	8012f00 <_dtoa_r+0xb18>
 8012a82:	f8cd a020 	str.w	sl, [sp, #32]
 8012a86:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8012a8a:	2a39      	cmp	r2, #57	; 0x39
 8012a8c:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8012a90:	d108      	bne.n	8012aa4 <_dtoa_r+0x6bc>
 8012a92:	459b      	cmp	fp, r3
 8012a94:	d10a      	bne.n	8012aac <_dtoa_r+0x6c4>
 8012a96:	9b08      	ldr	r3, [sp, #32]
 8012a98:	3301      	adds	r3, #1
 8012a9a:	9308      	str	r3, [sp, #32]
 8012a9c:	2330      	movs	r3, #48	; 0x30
 8012a9e:	f88b 3000 	strb.w	r3, [fp]
 8012aa2:	465b      	mov	r3, fp
 8012aa4:	781a      	ldrb	r2, [r3, #0]
 8012aa6:	3201      	adds	r2, #1
 8012aa8:	701a      	strb	r2, [r3, #0]
 8012aaa:	e78c      	b.n	80129c6 <_dtoa_r+0x5de>
 8012aac:	461d      	mov	r5, r3
 8012aae:	e7ea      	b.n	8012a86 <_dtoa_r+0x69e>
 8012ab0:	2200      	movs	r2, #0
 8012ab2:	4b9b      	ldr	r3, [pc, #620]	; (8012d20 <_dtoa_r+0x938>)
 8012ab4:	f7ed fdc8 	bl	8000648 <__aeabi_dmul>
 8012ab8:	2200      	movs	r2, #0
 8012aba:	2300      	movs	r3, #0
 8012abc:	4606      	mov	r6, r0
 8012abe:	460f      	mov	r7, r1
 8012ac0:	f7ee f82a 	bl	8000b18 <__aeabi_dcmpeq>
 8012ac4:	2800      	cmp	r0, #0
 8012ac6:	d09a      	beq.n	80129fe <_dtoa_r+0x616>
 8012ac8:	e7cb      	b.n	8012a62 <_dtoa_r+0x67a>
 8012aca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012acc:	2a00      	cmp	r2, #0
 8012ace:	f000 808b 	beq.w	8012be8 <_dtoa_r+0x800>
 8012ad2:	9a06      	ldr	r2, [sp, #24]
 8012ad4:	2a01      	cmp	r2, #1
 8012ad6:	dc6e      	bgt.n	8012bb6 <_dtoa_r+0x7ce>
 8012ad8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8012ada:	2a00      	cmp	r2, #0
 8012adc:	d067      	beq.n	8012bae <_dtoa_r+0x7c6>
 8012ade:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8012ae2:	9f07      	ldr	r7, [sp, #28]
 8012ae4:	9d05      	ldr	r5, [sp, #20]
 8012ae6:	9a05      	ldr	r2, [sp, #20]
 8012ae8:	2101      	movs	r1, #1
 8012aea:	441a      	add	r2, r3
 8012aec:	4620      	mov	r0, r4
 8012aee:	9205      	str	r2, [sp, #20]
 8012af0:	4498      	add	r8, r3
 8012af2:	f000 fd04 	bl	80134fe <__i2b>
 8012af6:	4606      	mov	r6, r0
 8012af8:	2d00      	cmp	r5, #0
 8012afa:	dd0c      	ble.n	8012b16 <_dtoa_r+0x72e>
 8012afc:	f1b8 0f00 	cmp.w	r8, #0
 8012b00:	dd09      	ble.n	8012b16 <_dtoa_r+0x72e>
 8012b02:	4545      	cmp	r5, r8
 8012b04:	9a05      	ldr	r2, [sp, #20]
 8012b06:	462b      	mov	r3, r5
 8012b08:	bfa8      	it	ge
 8012b0a:	4643      	movge	r3, r8
 8012b0c:	1ad2      	subs	r2, r2, r3
 8012b0e:	9205      	str	r2, [sp, #20]
 8012b10:	1aed      	subs	r5, r5, r3
 8012b12:	eba8 0803 	sub.w	r8, r8, r3
 8012b16:	9b07      	ldr	r3, [sp, #28]
 8012b18:	b1eb      	cbz	r3, 8012b56 <_dtoa_r+0x76e>
 8012b1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012b1c:	2b00      	cmp	r3, #0
 8012b1e:	d067      	beq.n	8012bf0 <_dtoa_r+0x808>
 8012b20:	b18f      	cbz	r7, 8012b46 <_dtoa_r+0x75e>
 8012b22:	4631      	mov	r1, r6
 8012b24:	463a      	mov	r2, r7
 8012b26:	4620      	mov	r0, r4
 8012b28:	f000 fd88 	bl	801363c <__pow5mult>
 8012b2c:	9a04      	ldr	r2, [sp, #16]
 8012b2e:	4601      	mov	r1, r0
 8012b30:	4606      	mov	r6, r0
 8012b32:	4620      	mov	r0, r4
 8012b34:	f000 fcec 	bl	8013510 <__multiply>
 8012b38:	9904      	ldr	r1, [sp, #16]
 8012b3a:	9008      	str	r0, [sp, #32]
 8012b3c:	4620      	mov	r0, r4
 8012b3e:	f000 fc3e 	bl	80133be <_Bfree>
 8012b42:	9b08      	ldr	r3, [sp, #32]
 8012b44:	9304      	str	r3, [sp, #16]
 8012b46:	9b07      	ldr	r3, [sp, #28]
 8012b48:	1bda      	subs	r2, r3, r7
 8012b4a:	d004      	beq.n	8012b56 <_dtoa_r+0x76e>
 8012b4c:	9904      	ldr	r1, [sp, #16]
 8012b4e:	4620      	mov	r0, r4
 8012b50:	f000 fd74 	bl	801363c <__pow5mult>
 8012b54:	9004      	str	r0, [sp, #16]
 8012b56:	2101      	movs	r1, #1
 8012b58:	4620      	mov	r0, r4
 8012b5a:	f000 fcd0 	bl	80134fe <__i2b>
 8012b5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012b60:	4607      	mov	r7, r0
 8012b62:	2b00      	cmp	r3, #0
 8012b64:	f000 81d0 	beq.w	8012f08 <_dtoa_r+0xb20>
 8012b68:	461a      	mov	r2, r3
 8012b6a:	4601      	mov	r1, r0
 8012b6c:	4620      	mov	r0, r4
 8012b6e:	f000 fd65 	bl	801363c <__pow5mult>
 8012b72:	9b06      	ldr	r3, [sp, #24]
 8012b74:	2b01      	cmp	r3, #1
 8012b76:	4607      	mov	r7, r0
 8012b78:	dc40      	bgt.n	8012bfc <_dtoa_r+0x814>
 8012b7a:	9b00      	ldr	r3, [sp, #0]
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	d139      	bne.n	8012bf4 <_dtoa_r+0x80c>
 8012b80:	9b01      	ldr	r3, [sp, #4]
 8012b82:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012b86:	2b00      	cmp	r3, #0
 8012b88:	d136      	bne.n	8012bf8 <_dtoa_r+0x810>
 8012b8a:	9b01      	ldr	r3, [sp, #4]
 8012b8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012b90:	0d1b      	lsrs	r3, r3, #20
 8012b92:	051b      	lsls	r3, r3, #20
 8012b94:	b12b      	cbz	r3, 8012ba2 <_dtoa_r+0x7ba>
 8012b96:	9b05      	ldr	r3, [sp, #20]
 8012b98:	3301      	adds	r3, #1
 8012b9a:	9305      	str	r3, [sp, #20]
 8012b9c:	f108 0801 	add.w	r8, r8, #1
 8012ba0:	2301      	movs	r3, #1
 8012ba2:	9307      	str	r3, [sp, #28]
 8012ba4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012ba6:	2b00      	cmp	r3, #0
 8012ba8:	d12a      	bne.n	8012c00 <_dtoa_r+0x818>
 8012baa:	2001      	movs	r0, #1
 8012bac:	e030      	b.n	8012c10 <_dtoa_r+0x828>
 8012bae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012bb0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8012bb4:	e795      	b.n	8012ae2 <_dtoa_r+0x6fa>
 8012bb6:	9b07      	ldr	r3, [sp, #28]
 8012bb8:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 8012bbc:	42bb      	cmp	r3, r7
 8012bbe:	bfbf      	itttt	lt
 8012bc0:	9b07      	ldrlt	r3, [sp, #28]
 8012bc2:	9707      	strlt	r7, [sp, #28]
 8012bc4:	1afa      	sublt	r2, r7, r3
 8012bc6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8012bc8:	bfbb      	ittet	lt
 8012bca:	189b      	addlt	r3, r3, r2
 8012bcc:	930e      	strlt	r3, [sp, #56]	; 0x38
 8012bce:	1bdf      	subge	r7, r3, r7
 8012bd0:	2700      	movlt	r7, #0
 8012bd2:	f1b9 0f00 	cmp.w	r9, #0
 8012bd6:	bfb5      	itete	lt
 8012bd8:	9b05      	ldrlt	r3, [sp, #20]
 8012bda:	9d05      	ldrge	r5, [sp, #20]
 8012bdc:	eba3 0509 	sublt.w	r5, r3, r9
 8012be0:	464b      	movge	r3, r9
 8012be2:	bfb8      	it	lt
 8012be4:	2300      	movlt	r3, #0
 8012be6:	e77e      	b.n	8012ae6 <_dtoa_r+0x6fe>
 8012be8:	9f07      	ldr	r7, [sp, #28]
 8012bea:	9d05      	ldr	r5, [sp, #20]
 8012bec:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8012bee:	e783      	b.n	8012af8 <_dtoa_r+0x710>
 8012bf0:	9a07      	ldr	r2, [sp, #28]
 8012bf2:	e7ab      	b.n	8012b4c <_dtoa_r+0x764>
 8012bf4:	2300      	movs	r3, #0
 8012bf6:	e7d4      	b.n	8012ba2 <_dtoa_r+0x7ba>
 8012bf8:	9b00      	ldr	r3, [sp, #0]
 8012bfa:	e7d2      	b.n	8012ba2 <_dtoa_r+0x7ba>
 8012bfc:	2300      	movs	r3, #0
 8012bfe:	9307      	str	r3, [sp, #28]
 8012c00:	693b      	ldr	r3, [r7, #16]
 8012c02:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8012c06:	6918      	ldr	r0, [r3, #16]
 8012c08:	f000 fc2b 	bl	8013462 <__hi0bits>
 8012c0c:	f1c0 0020 	rsb	r0, r0, #32
 8012c10:	4440      	add	r0, r8
 8012c12:	f010 001f 	ands.w	r0, r0, #31
 8012c16:	d047      	beq.n	8012ca8 <_dtoa_r+0x8c0>
 8012c18:	f1c0 0320 	rsb	r3, r0, #32
 8012c1c:	2b04      	cmp	r3, #4
 8012c1e:	dd3b      	ble.n	8012c98 <_dtoa_r+0x8b0>
 8012c20:	9b05      	ldr	r3, [sp, #20]
 8012c22:	f1c0 001c 	rsb	r0, r0, #28
 8012c26:	4403      	add	r3, r0
 8012c28:	9305      	str	r3, [sp, #20]
 8012c2a:	4405      	add	r5, r0
 8012c2c:	4480      	add	r8, r0
 8012c2e:	9b05      	ldr	r3, [sp, #20]
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	dd05      	ble.n	8012c40 <_dtoa_r+0x858>
 8012c34:	461a      	mov	r2, r3
 8012c36:	9904      	ldr	r1, [sp, #16]
 8012c38:	4620      	mov	r0, r4
 8012c3a:	f000 fd4d 	bl	80136d8 <__lshift>
 8012c3e:	9004      	str	r0, [sp, #16]
 8012c40:	f1b8 0f00 	cmp.w	r8, #0
 8012c44:	dd05      	ble.n	8012c52 <_dtoa_r+0x86a>
 8012c46:	4639      	mov	r1, r7
 8012c48:	4642      	mov	r2, r8
 8012c4a:	4620      	mov	r0, r4
 8012c4c:	f000 fd44 	bl	80136d8 <__lshift>
 8012c50:	4607      	mov	r7, r0
 8012c52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012c54:	b353      	cbz	r3, 8012cac <_dtoa_r+0x8c4>
 8012c56:	4639      	mov	r1, r7
 8012c58:	9804      	ldr	r0, [sp, #16]
 8012c5a:	f000 fd91 	bl	8013780 <__mcmp>
 8012c5e:	2800      	cmp	r0, #0
 8012c60:	da24      	bge.n	8012cac <_dtoa_r+0x8c4>
 8012c62:	2300      	movs	r3, #0
 8012c64:	220a      	movs	r2, #10
 8012c66:	9904      	ldr	r1, [sp, #16]
 8012c68:	4620      	mov	r0, r4
 8012c6a:	f000 fbbf 	bl	80133ec <__multadd>
 8012c6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012c70:	9004      	str	r0, [sp, #16]
 8012c72:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8012c76:	2b00      	cmp	r3, #0
 8012c78:	f000 814d 	beq.w	8012f16 <_dtoa_r+0xb2e>
 8012c7c:	2300      	movs	r3, #0
 8012c7e:	4631      	mov	r1, r6
 8012c80:	220a      	movs	r2, #10
 8012c82:	4620      	mov	r0, r4
 8012c84:	f000 fbb2 	bl	80133ec <__multadd>
 8012c88:	9b02      	ldr	r3, [sp, #8]
 8012c8a:	2b00      	cmp	r3, #0
 8012c8c:	4606      	mov	r6, r0
 8012c8e:	dc4f      	bgt.n	8012d30 <_dtoa_r+0x948>
 8012c90:	9b06      	ldr	r3, [sp, #24]
 8012c92:	2b02      	cmp	r3, #2
 8012c94:	dd4c      	ble.n	8012d30 <_dtoa_r+0x948>
 8012c96:	e011      	b.n	8012cbc <_dtoa_r+0x8d4>
 8012c98:	d0c9      	beq.n	8012c2e <_dtoa_r+0x846>
 8012c9a:	9a05      	ldr	r2, [sp, #20]
 8012c9c:	331c      	adds	r3, #28
 8012c9e:	441a      	add	r2, r3
 8012ca0:	9205      	str	r2, [sp, #20]
 8012ca2:	441d      	add	r5, r3
 8012ca4:	4498      	add	r8, r3
 8012ca6:	e7c2      	b.n	8012c2e <_dtoa_r+0x846>
 8012ca8:	4603      	mov	r3, r0
 8012caa:	e7f6      	b.n	8012c9a <_dtoa_r+0x8b2>
 8012cac:	f1b9 0f00 	cmp.w	r9, #0
 8012cb0:	dc38      	bgt.n	8012d24 <_dtoa_r+0x93c>
 8012cb2:	9b06      	ldr	r3, [sp, #24]
 8012cb4:	2b02      	cmp	r3, #2
 8012cb6:	dd35      	ble.n	8012d24 <_dtoa_r+0x93c>
 8012cb8:	f8cd 9008 	str.w	r9, [sp, #8]
 8012cbc:	9b02      	ldr	r3, [sp, #8]
 8012cbe:	b963      	cbnz	r3, 8012cda <_dtoa_r+0x8f2>
 8012cc0:	4639      	mov	r1, r7
 8012cc2:	2205      	movs	r2, #5
 8012cc4:	4620      	mov	r0, r4
 8012cc6:	f000 fb91 	bl	80133ec <__multadd>
 8012cca:	4601      	mov	r1, r0
 8012ccc:	4607      	mov	r7, r0
 8012cce:	9804      	ldr	r0, [sp, #16]
 8012cd0:	f000 fd56 	bl	8013780 <__mcmp>
 8012cd4:	2800      	cmp	r0, #0
 8012cd6:	f73f adcc 	bgt.w	8012872 <_dtoa_r+0x48a>
 8012cda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012cdc:	465d      	mov	r5, fp
 8012cde:	ea6f 0a03 	mvn.w	sl, r3
 8012ce2:	f04f 0900 	mov.w	r9, #0
 8012ce6:	4639      	mov	r1, r7
 8012ce8:	4620      	mov	r0, r4
 8012cea:	f000 fb68 	bl	80133be <_Bfree>
 8012cee:	2e00      	cmp	r6, #0
 8012cf0:	f43f aeb7 	beq.w	8012a62 <_dtoa_r+0x67a>
 8012cf4:	f1b9 0f00 	cmp.w	r9, #0
 8012cf8:	d005      	beq.n	8012d06 <_dtoa_r+0x91e>
 8012cfa:	45b1      	cmp	r9, r6
 8012cfc:	d003      	beq.n	8012d06 <_dtoa_r+0x91e>
 8012cfe:	4649      	mov	r1, r9
 8012d00:	4620      	mov	r0, r4
 8012d02:	f000 fb5c 	bl	80133be <_Bfree>
 8012d06:	4631      	mov	r1, r6
 8012d08:	4620      	mov	r0, r4
 8012d0a:	f000 fb58 	bl	80133be <_Bfree>
 8012d0e:	e6a8      	b.n	8012a62 <_dtoa_r+0x67a>
 8012d10:	2700      	movs	r7, #0
 8012d12:	463e      	mov	r6, r7
 8012d14:	e7e1      	b.n	8012cda <_dtoa_r+0x8f2>
 8012d16:	f8dd a020 	ldr.w	sl, [sp, #32]
 8012d1a:	463e      	mov	r6, r7
 8012d1c:	e5a9      	b.n	8012872 <_dtoa_r+0x48a>
 8012d1e:	bf00      	nop
 8012d20:	40240000 	.word	0x40240000
 8012d24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012d26:	f8cd 9008 	str.w	r9, [sp, #8]
 8012d2a:	2b00      	cmp	r3, #0
 8012d2c:	f000 80fa 	beq.w	8012f24 <_dtoa_r+0xb3c>
 8012d30:	2d00      	cmp	r5, #0
 8012d32:	dd05      	ble.n	8012d40 <_dtoa_r+0x958>
 8012d34:	4631      	mov	r1, r6
 8012d36:	462a      	mov	r2, r5
 8012d38:	4620      	mov	r0, r4
 8012d3a:	f000 fccd 	bl	80136d8 <__lshift>
 8012d3e:	4606      	mov	r6, r0
 8012d40:	9b07      	ldr	r3, [sp, #28]
 8012d42:	2b00      	cmp	r3, #0
 8012d44:	d04c      	beq.n	8012de0 <_dtoa_r+0x9f8>
 8012d46:	6871      	ldr	r1, [r6, #4]
 8012d48:	4620      	mov	r0, r4
 8012d4a:	f000 fb04 	bl	8013356 <_Balloc>
 8012d4e:	6932      	ldr	r2, [r6, #16]
 8012d50:	3202      	adds	r2, #2
 8012d52:	4605      	mov	r5, r0
 8012d54:	0092      	lsls	r2, r2, #2
 8012d56:	f106 010c 	add.w	r1, r6, #12
 8012d5a:	300c      	adds	r0, #12
 8012d5c:	f000 faf0 	bl	8013340 <memcpy>
 8012d60:	2201      	movs	r2, #1
 8012d62:	4629      	mov	r1, r5
 8012d64:	4620      	mov	r0, r4
 8012d66:	f000 fcb7 	bl	80136d8 <__lshift>
 8012d6a:	9b00      	ldr	r3, [sp, #0]
 8012d6c:	f8cd b014 	str.w	fp, [sp, #20]
 8012d70:	f003 0301 	and.w	r3, r3, #1
 8012d74:	46b1      	mov	r9, r6
 8012d76:	9307      	str	r3, [sp, #28]
 8012d78:	4606      	mov	r6, r0
 8012d7a:	4639      	mov	r1, r7
 8012d7c:	9804      	ldr	r0, [sp, #16]
 8012d7e:	f7ff faa7 	bl	80122d0 <quorem>
 8012d82:	4649      	mov	r1, r9
 8012d84:	4605      	mov	r5, r0
 8012d86:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8012d8a:	9804      	ldr	r0, [sp, #16]
 8012d8c:	f000 fcf8 	bl	8013780 <__mcmp>
 8012d90:	4632      	mov	r2, r6
 8012d92:	9000      	str	r0, [sp, #0]
 8012d94:	4639      	mov	r1, r7
 8012d96:	4620      	mov	r0, r4
 8012d98:	f000 fd0c 	bl	80137b4 <__mdiff>
 8012d9c:	68c3      	ldr	r3, [r0, #12]
 8012d9e:	4602      	mov	r2, r0
 8012da0:	bb03      	cbnz	r3, 8012de4 <_dtoa_r+0x9fc>
 8012da2:	4601      	mov	r1, r0
 8012da4:	9008      	str	r0, [sp, #32]
 8012da6:	9804      	ldr	r0, [sp, #16]
 8012da8:	f000 fcea 	bl	8013780 <__mcmp>
 8012dac:	9a08      	ldr	r2, [sp, #32]
 8012dae:	4603      	mov	r3, r0
 8012db0:	4611      	mov	r1, r2
 8012db2:	4620      	mov	r0, r4
 8012db4:	9308      	str	r3, [sp, #32]
 8012db6:	f000 fb02 	bl	80133be <_Bfree>
 8012dba:	9b08      	ldr	r3, [sp, #32]
 8012dbc:	b9a3      	cbnz	r3, 8012de8 <_dtoa_r+0xa00>
 8012dbe:	9a06      	ldr	r2, [sp, #24]
 8012dc0:	b992      	cbnz	r2, 8012de8 <_dtoa_r+0xa00>
 8012dc2:	9a07      	ldr	r2, [sp, #28]
 8012dc4:	b982      	cbnz	r2, 8012de8 <_dtoa_r+0xa00>
 8012dc6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8012dca:	d029      	beq.n	8012e20 <_dtoa_r+0xa38>
 8012dcc:	9b00      	ldr	r3, [sp, #0]
 8012dce:	2b00      	cmp	r3, #0
 8012dd0:	dd01      	ble.n	8012dd6 <_dtoa_r+0x9ee>
 8012dd2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8012dd6:	9b05      	ldr	r3, [sp, #20]
 8012dd8:	1c5d      	adds	r5, r3, #1
 8012dda:	f883 8000 	strb.w	r8, [r3]
 8012dde:	e782      	b.n	8012ce6 <_dtoa_r+0x8fe>
 8012de0:	4630      	mov	r0, r6
 8012de2:	e7c2      	b.n	8012d6a <_dtoa_r+0x982>
 8012de4:	2301      	movs	r3, #1
 8012de6:	e7e3      	b.n	8012db0 <_dtoa_r+0x9c8>
 8012de8:	9a00      	ldr	r2, [sp, #0]
 8012dea:	2a00      	cmp	r2, #0
 8012dec:	db04      	blt.n	8012df8 <_dtoa_r+0xa10>
 8012dee:	d125      	bne.n	8012e3c <_dtoa_r+0xa54>
 8012df0:	9a06      	ldr	r2, [sp, #24]
 8012df2:	bb1a      	cbnz	r2, 8012e3c <_dtoa_r+0xa54>
 8012df4:	9a07      	ldr	r2, [sp, #28]
 8012df6:	bb0a      	cbnz	r2, 8012e3c <_dtoa_r+0xa54>
 8012df8:	2b00      	cmp	r3, #0
 8012dfa:	ddec      	ble.n	8012dd6 <_dtoa_r+0x9ee>
 8012dfc:	2201      	movs	r2, #1
 8012dfe:	9904      	ldr	r1, [sp, #16]
 8012e00:	4620      	mov	r0, r4
 8012e02:	f000 fc69 	bl	80136d8 <__lshift>
 8012e06:	4639      	mov	r1, r7
 8012e08:	9004      	str	r0, [sp, #16]
 8012e0a:	f000 fcb9 	bl	8013780 <__mcmp>
 8012e0e:	2800      	cmp	r0, #0
 8012e10:	dc03      	bgt.n	8012e1a <_dtoa_r+0xa32>
 8012e12:	d1e0      	bne.n	8012dd6 <_dtoa_r+0x9ee>
 8012e14:	f018 0f01 	tst.w	r8, #1
 8012e18:	d0dd      	beq.n	8012dd6 <_dtoa_r+0x9ee>
 8012e1a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8012e1e:	d1d8      	bne.n	8012dd2 <_dtoa_r+0x9ea>
 8012e20:	9b05      	ldr	r3, [sp, #20]
 8012e22:	9a05      	ldr	r2, [sp, #20]
 8012e24:	1c5d      	adds	r5, r3, #1
 8012e26:	2339      	movs	r3, #57	; 0x39
 8012e28:	7013      	strb	r3, [r2, #0]
 8012e2a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012e2e:	2b39      	cmp	r3, #57	; 0x39
 8012e30:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8012e34:	d04f      	beq.n	8012ed6 <_dtoa_r+0xaee>
 8012e36:	3301      	adds	r3, #1
 8012e38:	7013      	strb	r3, [r2, #0]
 8012e3a:	e754      	b.n	8012ce6 <_dtoa_r+0x8fe>
 8012e3c:	9a05      	ldr	r2, [sp, #20]
 8012e3e:	2b00      	cmp	r3, #0
 8012e40:	f102 0501 	add.w	r5, r2, #1
 8012e44:	dd06      	ble.n	8012e54 <_dtoa_r+0xa6c>
 8012e46:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8012e4a:	d0e9      	beq.n	8012e20 <_dtoa_r+0xa38>
 8012e4c:	f108 0801 	add.w	r8, r8, #1
 8012e50:	9b05      	ldr	r3, [sp, #20]
 8012e52:	e7c2      	b.n	8012dda <_dtoa_r+0x9f2>
 8012e54:	9a02      	ldr	r2, [sp, #8]
 8012e56:	f805 8c01 	strb.w	r8, [r5, #-1]
 8012e5a:	eba5 030b 	sub.w	r3, r5, fp
 8012e5e:	4293      	cmp	r3, r2
 8012e60:	d021      	beq.n	8012ea6 <_dtoa_r+0xabe>
 8012e62:	2300      	movs	r3, #0
 8012e64:	220a      	movs	r2, #10
 8012e66:	9904      	ldr	r1, [sp, #16]
 8012e68:	4620      	mov	r0, r4
 8012e6a:	f000 fabf 	bl	80133ec <__multadd>
 8012e6e:	45b1      	cmp	r9, r6
 8012e70:	9004      	str	r0, [sp, #16]
 8012e72:	f04f 0300 	mov.w	r3, #0
 8012e76:	f04f 020a 	mov.w	r2, #10
 8012e7a:	4649      	mov	r1, r9
 8012e7c:	4620      	mov	r0, r4
 8012e7e:	d105      	bne.n	8012e8c <_dtoa_r+0xaa4>
 8012e80:	f000 fab4 	bl	80133ec <__multadd>
 8012e84:	4681      	mov	r9, r0
 8012e86:	4606      	mov	r6, r0
 8012e88:	9505      	str	r5, [sp, #20]
 8012e8a:	e776      	b.n	8012d7a <_dtoa_r+0x992>
 8012e8c:	f000 faae 	bl	80133ec <__multadd>
 8012e90:	4631      	mov	r1, r6
 8012e92:	4681      	mov	r9, r0
 8012e94:	2300      	movs	r3, #0
 8012e96:	220a      	movs	r2, #10
 8012e98:	4620      	mov	r0, r4
 8012e9a:	f000 faa7 	bl	80133ec <__multadd>
 8012e9e:	4606      	mov	r6, r0
 8012ea0:	e7f2      	b.n	8012e88 <_dtoa_r+0xaa0>
 8012ea2:	f04f 0900 	mov.w	r9, #0
 8012ea6:	2201      	movs	r2, #1
 8012ea8:	9904      	ldr	r1, [sp, #16]
 8012eaa:	4620      	mov	r0, r4
 8012eac:	f000 fc14 	bl	80136d8 <__lshift>
 8012eb0:	4639      	mov	r1, r7
 8012eb2:	9004      	str	r0, [sp, #16]
 8012eb4:	f000 fc64 	bl	8013780 <__mcmp>
 8012eb8:	2800      	cmp	r0, #0
 8012eba:	dcb6      	bgt.n	8012e2a <_dtoa_r+0xa42>
 8012ebc:	d102      	bne.n	8012ec4 <_dtoa_r+0xadc>
 8012ebe:	f018 0f01 	tst.w	r8, #1
 8012ec2:	d1b2      	bne.n	8012e2a <_dtoa_r+0xa42>
 8012ec4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012ec8:	2b30      	cmp	r3, #48	; 0x30
 8012eca:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8012ece:	f47f af0a 	bne.w	8012ce6 <_dtoa_r+0x8fe>
 8012ed2:	4615      	mov	r5, r2
 8012ed4:	e7f6      	b.n	8012ec4 <_dtoa_r+0xadc>
 8012ed6:	4593      	cmp	fp, r2
 8012ed8:	d105      	bne.n	8012ee6 <_dtoa_r+0xafe>
 8012eda:	2331      	movs	r3, #49	; 0x31
 8012edc:	f10a 0a01 	add.w	sl, sl, #1
 8012ee0:	f88b 3000 	strb.w	r3, [fp]
 8012ee4:	e6ff      	b.n	8012ce6 <_dtoa_r+0x8fe>
 8012ee6:	4615      	mov	r5, r2
 8012ee8:	e79f      	b.n	8012e2a <_dtoa_r+0xa42>
 8012eea:	f8df b064 	ldr.w	fp, [pc, #100]	; 8012f50 <_dtoa_r+0xb68>
 8012eee:	e007      	b.n	8012f00 <_dtoa_r+0xb18>
 8012ef0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012ef2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8012f54 <_dtoa_r+0xb6c>
 8012ef6:	b11b      	cbz	r3, 8012f00 <_dtoa_r+0xb18>
 8012ef8:	f10b 0308 	add.w	r3, fp, #8
 8012efc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012efe:	6013      	str	r3, [r2, #0]
 8012f00:	4658      	mov	r0, fp
 8012f02:	b017      	add	sp, #92	; 0x5c
 8012f04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f08:	9b06      	ldr	r3, [sp, #24]
 8012f0a:	2b01      	cmp	r3, #1
 8012f0c:	f77f ae35 	ble.w	8012b7a <_dtoa_r+0x792>
 8012f10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012f12:	9307      	str	r3, [sp, #28]
 8012f14:	e649      	b.n	8012baa <_dtoa_r+0x7c2>
 8012f16:	9b02      	ldr	r3, [sp, #8]
 8012f18:	2b00      	cmp	r3, #0
 8012f1a:	dc03      	bgt.n	8012f24 <_dtoa_r+0xb3c>
 8012f1c:	9b06      	ldr	r3, [sp, #24]
 8012f1e:	2b02      	cmp	r3, #2
 8012f20:	f73f aecc 	bgt.w	8012cbc <_dtoa_r+0x8d4>
 8012f24:	465d      	mov	r5, fp
 8012f26:	4639      	mov	r1, r7
 8012f28:	9804      	ldr	r0, [sp, #16]
 8012f2a:	f7ff f9d1 	bl	80122d0 <quorem>
 8012f2e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8012f32:	f805 8b01 	strb.w	r8, [r5], #1
 8012f36:	9a02      	ldr	r2, [sp, #8]
 8012f38:	eba5 030b 	sub.w	r3, r5, fp
 8012f3c:	429a      	cmp	r2, r3
 8012f3e:	ddb0      	ble.n	8012ea2 <_dtoa_r+0xaba>
 8012f40:	2300      	movs	r3, #0
 8012f42:	220a      	movs	r2, #10
 8012f44:	9904      	ldr	r1, [sp, #16]
 8012f46:	4620      	mov	r0, r4
 8012f48:	f000 fa50 	bl	80133ec <__multadd>
 8012f4c:	9004      	str	r0, [sp, #16]
 8012f4e:	e7ea      	b.n	8012f26 <_dtoa_r+0xb3e>
 8012f50:	08016c24 	.word	0x08016c24
 8012f54:	08016996 	.word	0x08016996

08012f58 <__sflush_r>:
 8012f58:	898a      	ldrh	r2, [r1, #12]
 8012f5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f5e:	4605      	mov	r5, r0
 8012f60:	0710      	lsls	r0, r2, #28
 8012f62:	460c      	mov	r4, r1
 8012f64:	d458      	bmi.n	8013018 <__sflush_r+0xc0>
 8012f66:	684b      	ldr	r3, [r1, #4]
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	dc05      	bgt.n	8012f78 <__sflush_r+0x20>
 8012f6c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012f6e:	2b00      	cmp	r3, #0
 8012f70:	dc02      	bgt.n	8012f78 <__sflush_r+0x20>
 8012f72:	2000      	movs	r0, #0
 8012f74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012f7a:	2e00      	cmp	r6, #0
 8012f7c:	d0f9      	beq.n	8012f72 <__sflush_r+0x1a>
 8012f7e:	2300      	movs	r3, #0
 8012f80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012f84:	682f      	ldr	r7, [r5, #0]
 8012f86:	6a21      	ldr	r1, [r4, #32]
 8012f88:	602b      	str	r3, [r5, #0]
 8012f8a:	d032      	beq.n	8012ff2 <__sflush_r+0x9a>
 8012f8c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012f8e:	89a3      	ldrh	r3, [r4, #12]
 8012f90:	075a      	lsls	r2, r3, #29
 8012f92:	d505      	bpl.n	8012fa0 <__sflush_r+0x48>
 8012f94:	6863      	ldr	r3, [r4, #4]
 8012f96:	1ac0      	subs	r0, r0, r3
 8012f98:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012f9a:	b10b      	cbz	r3, 8012fa0 <__sflush_r+0x48>
 8012f9c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012f9e:	1ac0      	subs	r0, r0, r3
 8012fa0:	2300      	movs	r3, #0
 8012fa2:	4602      	mov	r2, r0
 8012fa4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012fa6:	6a21      	ldr	r1, [r4, #32]
 8012fa8:	4628      	mov	r0, r5
 8012faa:	47b0      	blx	r6
 8012fac:	1c43      	adds	r3, r0, #1
 8012fae:	89a3      	ldrh	r3, [r4, #12]
 8012fb0:	d106      	bne.n	8012fc0 <__sflush_r+0x68>
 8012fb2:	6829      	ldr	r1, [r5, #0]
 8012fb4:	291d      	cmp	r1, #29
 8012fb6:	d848      	bhi.n	801304a <__sflush_r+0xf2>
 8012fb8:	4a29      	ldr	r2, [pc, #164]	; (8013060 <__sflush_r+0x108>)
 8012fba:	40ca      	lsrs	r2, r1
 8012fbc:	07d6      	lsls	r6, r2, #31
 8012fbe:	d544      	bpl.n	801304a <__sflush_r+0xf2>
 8012fc0:	2200      	movs	r2, #0
 8012fc2:	6062      	str	r2, [r4, #4]
 8012fc4:	04d9      	lsls	r1, r3, #19
 8012fc6:	6922      	ldr	r2, [r4, #16]
 8012fc8:	6022      	str	r2, [r4, #0]
 8012fca:	d504      	bpl.n	8012fd6 <__sflush_r+0x7e>
 8012fcc:	1c42      	adds	r2, r0, #1
 8012fce:	d101      	bne.n	8012fd4 <__sflush_r+0x7c>
 8012fd0:	682b      	ldr	r3, [r5, #0]
 8012fd2:	b903      	cbnz	r3, 8012fd6 <__sflush_r+0x7e>
 8012fd4:	6560      	str	r0, [r4, #84]	; 0x54
 8012fd6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012fd8:	602f      	str	r7, [r5, #0]
 8012fda:	2900      	cmp	r1, #0
 8012fdc:	d0c9      	beq.n	8012f72 <__sflush_r+0x1a>
 8012fde:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012fe2:	4299      	cmp	r1, r3
 8012fe4:	d002      	beq.n	8012fec <__sflush_r+0x94>
 8012fe6:	4628      	mov	r0, r5
 8012fe8:	f000 fc9e 	bl	8013928 <_free_r>
 8012fec:	2000      	movs	r0, #0
 8012fee:	6360      	str	r0, [r4, #52]	; 0x34
 8012ff0:	e7c0      	b.n	8012f74 <__sflush_r+0x1c>
 8012ff2:	2301      	movs	r3, #1
 8012ff4:	4628      	mov	r0, r5
 8012ff6:	47b0      	blx	r6
 8012ff8:	1c41      	adds	r1, r0, #1
 8012ffa:	d1c8      	bne.n	8012f8e <__sflush_r+0x36>
 8012ffc:	682b      	ldr	r3, [r5, #0]
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	d0c5      	beq.n	8012f8e <__sflush_r+0x36>
 8013002:	2b1d      	cmp	r3, #29
 8013004:	d001      	beq.n	801300a <__sflush_r+0xb2>
 8013006:	2b16      	cmp	r3, #22
 8013008:	d101      	bne.n	801300e <__sflush_r+0xb6>
 801300a:	602f      	str	r7, [r5, #0]
 801300c:	e7b1      	b.n	8012f72 <__sflush_r+0x1a>
 801300e:	89a3      	ldrh	r3, [r4, #12]
 8013010:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013014:	81a3      	strh	r3, [r4, #12]
 8013016:	e7ad      	b.n	8012f74 <__sflush_r+0x1c>
 8013018:	690f      	ldr	r7, [r1, #16]
 801301a:	2f00      	cmp	r7, #0
 801301c:	d0a9      	beq.n	8012f72 <__sflush_r+0x1a>
 801301e:	0793      	lsls	r3, r2, #30
 8013020:	680e      	ldr	r6, [r1, #0]
 8013022:	bf08      	it	eq
 8013024:	694b      	ldreq	r3, [r1, #20]
 8013026:	600f      	str	r7, [r1, #0]
 8013028:	bf18      	it	ne
 801302a:	2300      	movne	r3, #0
 801302c:	eba6 0807 	sub.w	r8, r6, r7
 8013030:	608b      	str	r3, [r1, #8]
 8013032:	f1b8 0f00 	cmp.w	r8, #0
 8013036:	dd9c      	ble.n	8012f72 <__sflush_r+0x1a>
 8013038:	4643      	mov	r3, r8
 801303a:	463a      	mov	r2, r7
 801303c:	6a21      	ldr	r1, [r4, #32]
 801303e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013040:	4628      	mov	r0, r5
 8013042:	47b0      	blx	r6
 8013044:	2800      	cmp	r0, #0
 8013046:	dc06      	bgt.n	8013056 <__sflush_r+0xfe>
 8013048:	89a3      	ldrh	r3, [r4, #12]
 801304a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801304e:	81a3      	strh	r3, [r4, #12]
 8013050:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013054:	e78e      	b.n	8012f74 <__sflush_r+0x1c>
 8013056:	4407      	add	r7, r0
 8013058:	eba8 0800 	sub.w	r8, r8, r0
 801305c:	e7e9      	b.n	8013032 <__sflush_r+0xda>
 801305e:	bf00      	nop
 8013060:	20400001 	.word	0x20400001

08013064 <_fflush_r>:
 8013064:	b538      	push	{r3, r4, r5, lr}
 8013066:	690b      	ldr	r3, [r1, #16]
 8013068:	4605      	mov	r5, r0
 801306a:	460c      	mov	r4, r1
 801306c:	b1db      	cbz	r3, 80130a6 <_fflush_r+0x42>
 801306e:	b118      	cbz	r0, 8013078 <_fflush_r+0x14>
 8013070:	6983      	ldr	r3, [r0, #24]
 8013072:	b90b      	cbnz	r3, 8013078 <_fflush_r+0x14>
 8013074:	f000 f860 	bl	8013138 <__sinit>
 8013078:	4b0c      	ldr	r3, [pc, #48]	; (80130ac <_fflush_r+0x48>)
 801307a:	429c      	cmp	r4, r3
 801307c:	d109      	bne.n	8013092 <_fflush_r+0x2e>
 801307e:	686c      	ldr	r4, [r5, #4]
 8013080:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013084:	b17b      	cbz	r3, 80130a6 <_fflush_r+0x42>
 8013086:	4621      	mov	r1, r4
 8013088:	4628      	mov	r0, r5
 801308a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801308e:	f7ff bf63 	b.w	8012f58 <__sflush_r>
 8013092:	4b07      	ldr	r3, [pc, #28]	; (80130b0 <_fflush_r+0x4c>)
 8013094:	429c      	cmp	r4, r3
 8013096:	d101      	bne.n	801309c <_fflush_r+0x38>
 8013098:	68ac      	ldr	r4, [r5, #8]
 801309a:	e7f1      	b.n	8013080 <_fflush_r+0x1c>
 801309c:	4b05      	ldr	r3, [pc, #20]	; (80130b4 <_fflush_r+0x50>)
 801309e:	429c      	cmp	r4, r3
 80130a0:	bf08      	it	eq
 80130a2:	68ec      	ldreq	r4, [r5, #12]
 80130a4:	e7ec      	b.n	8013080 <_fflush_r+0x1c>
 80130a6:	2000      	movs	r0, #0
 80130a8:	bd38      	pop	{r3, r4, r5, pc}
 80130aa:	bf00      	nop
 80130ac:	080169c4 	.word	0x080169c4
 80130b0:	080169e4 	.word	0x080169e4
 80130b4:	080169a4 	.word	0x080169a4

080130b8 <std>:
 80130b8:	2300      	movs	r3, #0
 80130ba:	b510      	push	{r4, lr}
 80130bc:	4604      	mov	r4, r0
 80130be:	e9c0 3300 	strd	r3, r3, [r0]
 80130c2:	6083      	str	r3, [r0, #8]
 80130c4:	8181      	strh	r1, [r0, #12]
 80130c6:	6643      	str	r3, [r0, #100]	; 0x64
 80130c8:	81c2      	strh	r2, [r0, #14]
 80130ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80130ce:	6183      	str	r3, [r0, #24]
 80130d0:	4619      	mov	r1, r3
 80130d2:	2208      	movs	r2, #8
 80130d4:	305c      	adds	r0, #92	; 0x5c
 80130d6:	f7fe fb17 	bl	8011708 <memset>
 80130da:	4b05      	ldr	r3, [pc, #20]	; (80130f0 <std+0x38>)
 80130dc:	6263      	str	r3, [r4, #36]	; 0x24
 80130de:	4b05      	ldr	r3, [pc, #20]	; (80130f4 <std+0x3c>)
 80130e0:	62a3      	str	r3, [r4, #40]	; 0x28
 80130e2:	4b05      	ldr	r3, [pc, #20]	; (80130f8 <std+0x40>)
 80130e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80130e6:	4b05      	ldr	r3, [pc, #20]	; (80130fc <std+0x44>)
 80130e8:	6224      	str	r4, [r4, #32]
 80130ea:	6323      	str	r3, [r4, #48]	; 0x30
 80130ec:	bd10      	pop	{r4, pc}
 80130ee:	bf00      	nop
 80130f0:	08013fbd 	.word	0x08013fbd
 80130f4:	08013fdf 	.word	0x08013fdf
 80130f8:	08014017 	.word	0x08014017
 80130fc:	0801403b 	.word	0x0801403b

08013100 <_cleanup_r>:
 8013100:	4901      	ldr	r1, [pc, #4]	; (8013108 <_cleanup_r+0x8>)
 8013102:	f000 b885 	b.w	8013210 <_fwalk_reent>
 8013106:	bf00      	nop
 8013108:	08013065 	.word	0x08013065

0801310c <__sfmoreglue>:
 801310c:	b570      	push	{r4, r5, r6, lr}
 801310e:	1e4a      	subs	r2, r1, #1
 8013110:	2568      	movs	r5, #104	; 0x68
 8013112:	4355      	muls	r5, r2
 8013114:	460e      	mov	r6, r1
 8013116:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801311a:	f000 fc53 	bl	80139c4 <_malloc_r>
 801311e:	4604      	mov	r4, r0
 8013120:	b140      	cbz	r0, 8013134 <__sfmoreglue+0x28>
 8013122:	2100      	movs	r1, #0
 8013124:	e9c0 1600 	strd	r1, r6, [r0]
 8013128:	300c      	adds	r0, #12
 801312a:	60a0      	str	r0, [r4, #8]
 801312c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013130:	f7fe faea 	bl	8011708 <memset>
 8013134:	4620      	mov	r0, r4
 8013136:	bd70      	pop	{r4, r5, r6, pc}

08013138 <__sinit>:
 8013138:	6983      	ldr	r3, [r0, #24]
 801313a:	b510      	push	{r4, lr}
 801313c:	4604      	mov	r4, r0
 801313e:	bb33      	cbnz	r3, 801318e <__sinit+0x56>
 8013140:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8013144:	6503      	str	r3, [r0, #80]	; 0x50
 8013146:	4b12      	ldr	r3, [pc, #72]	; (8013190 <__sinit+0x58>)
 8013148:	4a12      	ldr	r2, [pc, #72]	; (8013194 <__sinit+0x5c>)
 801314a:	681b      	ldr	r3, [r3, #0]
 801314c:	6282      	str	r2, [r0, #40]	; 0x28
 801314e:	4298      	cmp	r0, r3
 8013150:	bf04      	itt	eq
 8013152:	2301      	moveq	r3, #1
 8013154:	6183      	streq	r3, [r0, #24]
 8013156:	f000 f81f 	bl	8013198 <__sfp>
 801315a:	6060      	str	r0, [r4, #4]
 801315c:	4620      	mov	r0, r4
 801315e:	f000 f81b 	bl	8013198 <__sfp>
 8013162:	60a0      	str	r0, [r4, #8]
 8013164:	4620      	mov	r0, r4
 8013166:	f000 f817 	bl	8013198 <__sfp>
 801316a:	2200      	movs	r2, #0
 801316c:	60e0      	str	r0, [r4, #12]
 801316e:	2104      	movs	r1, #4
 8013170:	6860      	ldr	r0, [r4, #4]
 8013172:	f7ff ffa1 	bl	80130b8 <std>
 8013176:	2201      	movs	r2, #1
 8013178:	2109      	movs	r1, #9
 801317a:	68a0      	ldr	r0, [r4, #8]
 801317c:	f7ff ff9c 	bl	80130b8 <std>
 8013180:	2202      	movs	r2, #2
 8013182:	2112      	movs	r1, #18
 8013184:	68e0      	ldr	r0, [r4, #12]
 8013186:	f7ff ff97 	bl	80130b8 <std>
 801318a:	2301      	movs	r3, #1
 801318c:	61a3      	str	r3, [r4, #24]
 801318e:	bd10      	pop	{r4, pc}
 8013190:	08016960 	.word	0x08016960
 8013194:	08013101 	.word	0x08013101

08013198 <__sfp>:
 8013198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801319a:	4b1b      	ldr	r3, [pc, #108]	; (8013208 <__sfp+0x70>)
 801319c:	681e      	ldr	r6, [r3, #0]
 801319e:	69b3      	ldr	r3, [r6, #24]
 80131a0:	4607      	mov	r7, r0
 80131a2:	b913      	cbnz	r3, 80131aa <__sfp+0x12>
 80131a4:	4630      	mov	r0, r6
 80131a6:	f7ff ffc7 	bl	8013138 <__sinit>
 80131aa:	3648      	adds	r6, #72	; 0x48
 80131ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80131b0:	3b01      	subs	r3, #1
 80131b2:	d503      	bpl.n	80131bc <__sfp+0x24>
 80131b4:	6833      	ldr	r3, [r6, #0]
 80131b6:	b133      	cbz	r3, 80131c6 <__sfp+0x2e>
 80131b8:	6836      	ldr	r6, [r6, #0]
 80131ba:	e7f7      	b.n	80131ac <__sfp+0x14>
 80131bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80131c0:	b16d      	cbz	r5, 80131de <__sfp+0x46>
 80131c2:	3468      	adds	r4, #104	; 0x68
 80131c4:	e7f4      	b.n	80131b0 <__sfp+0x18>
 80131c6:	2104      	movs	r1, #4
 80131c8:	4638      	mov	r0, r7
 80131ca:	f7ff ff9f 	bl	801310c <__sfmoreglue>
 80131ce:	6030      	str	r0, [r6, #0]
 80131d0:	2800      	cmp	r0, #0
 80131d2:	d1f1      	bne.n	80131b8 <__sfp+0x20>
 80131d4:	230c      	movs	r3, #12
 80131d6:	603b      	str	r3, [r7, #0]
 80131d8:	4604      	mov	r4, r0
 80131da:	4620      	mov	r0, r4
 80131dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80131de:	4b0b      	ldr	r3, [pc, #44]	; (801320c <__sfp+0x74>)
 80131e0:	6665      	str	r5, [r4, #100]	; 0x64
 80131e2:	e9c4 5500 	strd	r5, r5, [r4]
 80131e6:	60a5      	str	r5, [r4, #8]
 80131e8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80131ec:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80131f0:	2208      	movs	r2, #8
 80131f2:	4629      	mov	r1, r5
 80131f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80131f8:	f7fe fa86 	bl	8011708 <memset>
 80131fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013200:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013204:	e7e9      	b.n	80131da <__sfp+0x42>
 8013206:	bf00      	nop
 8013208:	08016960 	.word	0x08016960
 801320c:	ffff0001 	.word	0xffff0001

08013210 <_fwalk_reent>:
 8013210:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013214:	4680      	mov	r8, r0
 8013216:	4689      	mov	r9, r1
 8013218:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801321c:	2600      	movs	r6, #0
 801321e:	b914      	cbnz	r4, 8013226 <_fwalk_reent+0x16>
 8013220:	4630      	mov	r0, r6
 8013222:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013226:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801322a:	3f01      	subs	r7, #1
 801322c:	d501      	bpl.n	8013232 <_fwalk_reent+0x22>
 801322e:	6824      	ldr	r4, [r4, #0]
 8013230:	e7f5      	b.n	801321e <_fwalk_reent+0xe>
 8013232:	89ab      	ldrh	r3, [r5, #12]
 8013234:	2b01      	cmp	r3, #1
 8013236:	d907      	bls.n	8013248 <_fwalk_reent+0x38>
 8013238:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801323c:	3301      	adds	r3, #1
 801323e:	d003      	beq.n	8013248 <_fwalk_reent+0x38>
 8013240:	4629      	mov	r1, r5
 8013242:	4640      	mov	r0, r8
 8013244:	47c8      	blx	r9
 8013246:	4306      	orrs	r6, r0
 8013248:	3568      	adds	r5, #104	; 0x68
 801324a:	e7ee      	b.n	801322a <_fwalk_reent+0x1a>

0801324c <_localeconv_r>:
 801324c:	4b04      	ldr	r3, [pc, #16]	; (8013260 <_localeconv_r+0x14>)
 801324e:	681b      	ldr	r3, [r3, #0]
 8013250:	6a18      	ldr	r0, [r3, #32]
 8013252:	4b04      	ldr	r3, [pc, #16]	; (8013264 <_localeconv_r+0x18>)
 8013254:	2800      	cmp	r0, #0
 8013256:	bf08      	it	eq
 8013258:	4618      	moveq	r0, r3
 801325a:	30f0      	adds	r0, #240	; 0xf0
 801325c:	4770      	bx	lr
 801325e:	bf00      	nop
 8013260:	20001eb4 	.word	0x20001eb4
 8013264:	20001f18 	.word	0x20001f18

08013268 <__swhatbuf_r>:
 8013268:	b570      	push	{r4, r5, r6, lr}
 801326a:	460e      	mov	r6, r1
 801326c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013270:	2900      	cmp	r1, #0
 8013272:	b096      	sub	sp, #88	; 0x58
 8013274:	4614      	mov	r4, r2
 8013276:	461d      	mov	r5, r3
 8013278:	da07      	bge.n	801328a <__swhatbuf_r+0x22>
 801327a:	2300      	movs	r3, #0
 801327c:	602b      	str	r3, [r5, #0]
 801327e:	89b3      	ldrh	r3, [r6, #12]
 8013280:	061a      	lsls	r2, r3, #24
 8013282:	d410      	bmi.n	80132a6 <__swhatbuf_r+0x3e>
 8013284:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013288:	e00e      	b.n	80132a8 <__swhatbuf_r+0x40>
 801328a:	466a      	mov	r2, sp
 801328c:	f000 fefc 	bl	8014088 <_fstat_r>
 8013290:	2800      	cmp	r0, #0
 8013292:	dbf2      	blt.n	801327a <__swhatbuf_r+0x12>
 8013294:	9a01      	ldr	r2, [sp, #4]
 8013296:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801329a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801329e:	425a      	negs	r2, r3
 80132a0:	415a      	adcs	r2, r3
 80132a2:	602a      	str	r2, [r5, #0]
 80132a4:	e7ee      	b.n	8013284 <__swhatbuf_r+0x1c>
 80132a6:	2340      	movs	r3, #64	; 0x40
 80132a8:	2000      	movs	r0, #0
 80132aa:	6023      	str	r3, [r4, #0]
 80132ac:	b016      	add	sp, #88	; 0x58
 80132ae:	bd70      	pop	{r4, r5, r6, pc}

080132b0 <__smakebuf_r>:
 80132b0:	898b      	ldrh	r3, [r1, #12]
 80132b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80132b4:	079d      	lsls	r5, r3, #30
 80132b6:	4606      	mov	r6, r0
 80132b8:	460c      	mov	r4, r1
 80132ba:	d507      	bpl.n	80132cc <__smakebuf_r+0x1c>
 80132bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80132c0:	6023      	str	r3, [r4, #0]
 80132c2:	6123      	str	r3, [r4, #16]
 80132c4:	2301      	movs	r3, #1
 80132c6:	6163      	str	r3, [r4, #20]
 80132c8:	b002      	add	sp, #8
 80132ca:	bd70      	pop	{r4, r5, r6, pc}
 80132cc:	ab01      	add	r3, sp, #4
 80132ce:	466a      	mov	r2, sp
 80132d0:	f7ff ffca 	bl	8013268 <__swhatbuf_r>
 80132d4:	9900      	ldr	r1, [sp, #0]
 80132d6:	4605      	mov	r5, r0
 80132d8:	4630      	mov	r0, r6
 80132da:	f000 fb73 	bl	80139c4 <_malloc_r>
 80132de:	b948      	cbnz	r0, 80132f4 <__smakebuf_r+0x44>
 80132e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80132e4:	059a      	lsls	r2, r3, #22
 80132e6:	d4ef      	bmi.n	80132c8 <__smakebuf_r+0x18>
 80132e8:	f023 0303 	bic.w	r3, r3, #3
 80132ec:	f043 0302 	orr.w	r3, r3, #2
 80132f0:	81a3      	strh	r3, [r4, #12]
 80132f2:	e7e3      	b.n	80132bc <__smakebuf_r+0xc>
 80132f4:	4b0d      	ldr	r3, [pc, #52]	; (801332c <__smakebuf_r+0x7c>)
 80132f6:	62b3      	str	r3, [r6, #40]	; 0x28
 80132f8:	89a3      	ldrh	r3, [r4, #12]
 80132fa:	6020      	str	r0, [r4, #0]
 80132fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013300:	81a3      	strh	r3, [r4, #12]
 8013302:	9b00      	ldr	r3, [sp, #0]
 8013304:	6163      	str	r3, [r4, #20]
 8013306:	9b01      	ldr	r3, [sp, #4]
 8013308:	6120      	str	r0, [r4, #16]
 801330a:	b15b      	cbz	r3, 8013324 <__smakebuf_r+0x74>
 801330c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013310:	4630      	mov	r0, r6
 8013312:	f000 fecb 	bl	80140ac <_isatty_r>
 8013316:	b128      	cbz	r0, 8013324 <__smakebuf_r+0x74>
 8013318:	89a3      	ldrh	r3, [r4, #12]
 801331a:	f023 0303 	bic.w	r3, r3, #3
 801331e:	f043 0301 	orr.w	r3, r3, #1
 8013322:	81a3      	strh	r3, [r4, #12]
 8013324:	89a3      	ldrh	r3, [r4, #12]
 8013326:	431d      	orrs	r5, r3
 8013328:	81a5      	strh	r5, [r4, #12]
 801332a:	e7cd      	b.n	80132c8 <__smakebuf_r+0x18>
 801332c:	08013101 	.word	0x08013101

08013330 <malloc>:
 8013330:	4b02      	ldr	r3, [pc, #8]	; (801333c <malloc+0xc>)
 8013332:	4601      	mov	r1, r0
 8013334:	6818      	ldr	r0, [r3, #0]
 8013336:	f000 bb45 	b.w	80139c4 <_malloc_r>
 801333a:	bf00      	nop
 801333c:	20001eb4 	.word	0x20001eb4

08013340 <memcpy>:
 8013340:	b510      	push	{r4, lr}
 8013342:	1e43      	subs	r3, r0, #1
 8013344:	440a      	add	r2, r1
 8013346:	4291      	cmp	r1, r2
 8013348:	d100      	bne.n	801334c <memcpy+0xc>
 801334a:	bd10      	pop	{r4, pc}
 801334c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013350:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013354:	e7f7      	b.n	8013346 <memcpy+0x6>

08013356 <_Balloc>:
 8013356:	b570      	push	{r4, r5, r6, lr}
 8013358:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801335a:	4604      	mov	r4, r0
 801335c:	460e      	mov	r6, r1
 801335e:	b93d      	cbnz	r5, 8013370 <_Balloc+0x1a>
 8013360:	2010      	movs	r0, #16
 8013362:	f7ff ffe5 	bl	8013330 <malloc>
 8013366:	6260      	str	r0, [r4, #36]	; 0x24
 8013368:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801336c:	6005      	str	r5, [r0, #0]
 801336e:	60c5      	str	r5, [r0, #12]
 8013370:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8013372:	68eb      	ldr	r3, [r5, #12]
 8013374:	b183      	cbz	r3, 8013398 <_Balloc+0x42>
 8013376:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013378:	68db      	ldr	r3, [r3, #12]
 801337a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801337e:	b9b8      	cbnz	r0, 80133b0 <_Balloc+0x5a>
 8013380:	2101      	movs	r1, #1
 8013382:	fa01 f506 	lsl.w	r5, r1, r6
 8013386:	1d6a      	adds	r2, r5, #5
 8013388:	0092      	lsls	r2, r2, #2
 801338a:	4620      	mov	r0, r4
 801338c:	f000 fabe 	bl	801390c <_calloc_r>
 8013390:	b160      	cbz	r0, 80133ac <_Balloc+0x56>
 8013392:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8013396:	e00e      	b.n	80133b6 <_Balloc+0x60>
 8013398:	2221      	movs	r2, #33	; 0x21
 801339a:	2104      	movs	r1, #4
 801339c:	4620      	mov	r0, r4
 801339e:	f000 fab5 	bl	801390c <_calloc_r>
 80133a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80133a4:	60e8      	str	r0, [r5, #12]
 80133a6:	68db      	ldr	r3, [r3, #12]
 80133a8:	2b00      	cmp	r3, #0
 80133aa:	d1e4      	bne.n	8013376 <_Balloc+0x20>
 80133ac:	2000      	movs	r0, #0
 80133ae:	bd70      	pop	{r4, r5, r6, pc}
 80133b0:	6802      	ldr	r2, [r0, #0]
 80133b2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80133b6:	2300      	movs	r3, #0
 80133b8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80133bc:	e7f7      	b.n	80133ae <_Balloc+0x58>

080133be <_Bfree>:
 80133be:	b570      	push	{r4, r5, r6, lr}
 80133c0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80133c2:	4606      	mov	r6, r0
 80133c4:	460d      	mov	r5, r1
 80133c6:	b93c      	cbnz	r4, 80133d8 <_Bfree+0x1a>
 80133c8:	2010      	movs	r0, #16
 80133ca:	f7ff ffb1 	bl	8013330 <malloc>
 80133ce:	6270      	str	r0, [r6, #36]	; 0x24
 80133d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80133d4:	6004      	str	r4, [r0, #0]
 80133d6:	60c4      	str	r4, [r0, #12]
 80133d8:	b13d      	cbz	r5, 80133ea <_Bfree+0x2c>
 80133da:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80133dc:	686a      	ldr	r2, [r5, #4]
 80133de:	68db      	ldr	r3, [r3, #12]
 80133e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80133e4:	6029      	str	r1, [r5, #0]
 80133e6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80133ea:	bd70      	pop	{r4, r5, r6, pc}

080133ec <__multadd>:
 80133ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80133f0:	690d      	ldr	r5, [r1, #16]
 80133f2:	461f      	mov	r7, r3
 80133f4:	4606      	mov	r6, r0
 80133f6:	460c      	mov	r4, r1
 80133f8:	f101 0c14 	add.w	ip, r1, #20
 80133fc:	2300      	movs	r3, #0
 80133fe:	f8dc 0000 	ldr.w	r0, [ip]
 8013402:	b281      	uxth	r1, r0
 8013404:	fb02 7101 	mla	r1, r2, r1, r7
 8013408:	0c0f      	lsrs	r7, r1, #16
 801340a:	0c00      	lsrs	r0, r0, #16
 801340c:	fb02 7000 	mla	r0, r2, r0, r7
 8013410:	b289      	uxth	r1, r1
 8013412:	3301      	adds	r3, #1
 8013414:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8013418:	429d      	cmp	r5, r3
 801341a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 801341e:	f84c 1b04 	str.w	r1, [ip], #4
 8013422:	dcec      	bgt.n	80133fe <__multadd+0x12>
 8013424:	b1d7      	cbz	r7, 801345c <__multadd+0x70>
 8013426:	68a3      	ldr	r3, [r4, #8]
 8013428:	42ab      	cmp	r3, r5
 801342a:	dc12      	bgt.n	8013452 <__multadd+0x66>
 801342c:	6861      	ldr	r1, [r4, #4]
 801342e:	4630      	mov	r0, r6
 8013430:	3101      	adds	r1, #1
 8013432:	f7ff ff90 	bl	8013356 <_Balloc>
 8013436:	6922      	ldr	r2, [r4, #16]
 8013438:	3202      	adds	r2, #2
 801343a:	f104 010c 	add.w	r1, r4, #12
 801343e:	4680      	mov	r8, r0
 8013440:	0092      	lsls	r2, r2, #2
 8013442:	300c      	adds	r0, #12
 8013444:	f7ff ff7c 	bl	8013340 <memcpy>
 8013448:	4621      	mov	r1, r4
 801344a:	4630      	mov	r0, r6
 801344c:	f7ff ffb7 	bl	80133be <_Bfree>
 8013450:	4644      	mov	r4, r8
 8013452:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013456:	3501      	adds	r5, #1
 8013458:	615f      	str	r7, [r3, #20]
 801345a:	6125      	str	r5, [r4, #16]
 801345c:	4620      	mov	r0, r4
 801345e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013462 <__hi0bits>:
 8013462:	0c02      	lsrs	r2, r0, #16
 8013464:	0412      	lsls	r2, r2, #16
 8013466:	4603      	mov	r3, r0
 8013468:	b9b2      	cbnz	r2, 8013498 <__hi0bits+0x36>
 801346a:	0403      	lsls	r3, r0, #16
 801346c:	2010      	movs	r0, #16
 801346e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8013472:	bf04      	itt	eq
 8013474:	021b      	lsleq	r3, r3, #8
 8013476:	3008      	addeq	r0, #8
 8013478:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801347c:	bf04      	itt	eq
 801347e:	011b      	lsleq	r3, r3, #4
 8013480:	3004      	addeq	r0, #4
 8013482:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8013486:	bf04      	itt	eq
 8013488:	009b      	lsleq	r3, r3, #2
 801348a:	3002      	addeq	r0, #2
 801348c:	2b00      	cmp	r3, #0
 801348e:	db06      	blt.n	801349e <__hi0bits+0x3c>
 8013490:	005b      	lsls	r3, r3, #1
 8013492:	d503      	bpl.n	801349c <__hi0bits+0x3a>
 8013494:	3001      	adds	r0, #1
 8013496:	4770      	bx	lr
 8013498:	2000      	movs	r0, #0
 801349a:	e7e8      	b.n	801346e <__hi0bits+0xc>
 801349c:	2020      	movs	r0, #32
 801349e:	4770      	bx	lr

080134a0 <__lo0bits>:
 80134a0:	6803      	ldr	r3, [r0, #0]
 80134a2:	f013 0207 	ands.w	r2, r3, #7
 80134a6:	4601      	mov	r1, r0
 80134a8:	d00b      	beq.n	80134c2 <__lo0bits+0x22>
 80134aa:	07da      	lsls	r2, r3, #31
 80134ac:	d423      	bmi.n	80134f6 <__lo0bits+0x56>
 80134ae:	0798      	lsls	r0, r3, #30
 80134b0:	bf49      	itett	mi
 80134b2:	085b      	lsrmi	r3, r3, #1
 80134b4:	089b      	lsrpl	r3, r3, #2
 80134b6:	2001      	movmi	r0, #1
 80134b8:	600b      	strmi	r3, [r1, #0]
 80134ba:	bf5c      	itt	pl
 80134bc:	600b      	strpl	r3, [r1, #0]
 80134be:	2002      	movpl	r0, #2
 80134c0:	4770      	bx	lr
 80134c2:	b298      	uxth	r0, r3
 80134c4:	b9a8      	cbnz	r0, 80134f2 <__lo0bits+0x52>
 80134c6:	0c1b      	lsrs	r3, r3, #16
 80134c8:	2010      	movs	r0, #16
 80134ca:	f013 0fff 	tst.w	r3, #255	; 0xff
 80134ce:	bf04      	itt	eq
 80134d0:	0a1b      	lsreq	r3, r3, #8
 80134d2:	3008      	addeq	r0, #8
 80134d4:	071a      	lsls	r2, r3, #28
 80134d6:	bf04      	itt	eq
 80134d8:	091b      	lsreq	r3, r3, #4
 80134da:	3004      	addeq	r0, #4
 80134dc:	079a      	lsls	r2, r3, #30
 80134de:	bf04      	itt	eq
 80134e0:	089b      	lsreq	r3, r3, #2
 80134e2:	3002      	addeq	r0, #2
 80134e4:	07da      	lsls	r2, r3, #31
 80134e6:	d402      	bmi.n	80134ee <__lo0bits+0x4e>
 80134e8:	085b      	lsrs	r3, r3, #1
 80134ea:	d006      	beq.n	80134fa <__lo0bits+0x5a>
 80134ec:	3001      	adds	r0, #1
 80134ee:	600b      	str	r3, [r1, #0]
 80134f0:	4770      	bx	lr
 80134f2:	4610      	mov	r0, r2
 80134f4:	e7e9      	b.n	80134ca <__lo0bits+0x2a>
 80134f6:	2000      	movs	r0, #0
 80134f8:	4770      	bx	lr
 80134fa:	2020      	movs	r0, #32
 80134fc:	4770      	bx	lr

080134fe <__i2b>:
 80134fe:	b510      	push	{r4, lr}
 8013500:	460c      	mov	r4, r1
 8013502:	2101      	movs	r1, #1
 8013504:	f7ff ff27 	bl	8013356 <_Balloc>
 8013508:	2201      	movs	r2, #1
 801350a:	6144      	str	r4, [r0, #20]
 801350c:	6102      	str	r2, [r0, #16]
 801350e:	bd10      	pop	{r4, pc}

08013510 <__multiply>:
 8013510:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013514:	4614      	mov	r4, r2
 8013516:	690a      	ldr	r2, [r1, #16]
 8013518:	6923      	ldr	r3, [r4, #16]
 801351a:	429a      	cmp	r2, r3
 801351c:	bfb8      	it	lt
 801351e:	460b      	movlt	r3, r1
 8013520:	4688      	mov	r8, r1
 8013522:	bfbc      	itt	lt
 8013524:	46a0      	movlt	r8, r4
 8013526:	461c      	movlt	r4, r3
 8013528:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801352c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8013530:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013534:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8013538:	eb07 0609 	add.w	r6, r7, r9
 801353c:	42b3      	cmp	r3, r6
 801353e:	bfb8      	it	lt
 8013540:	3101      	addlt	r1, #1
 8013542:	f7ff ff08 	bl	8013356 <_Balloc>
 8013546:	f100 0514 	add.w	r5, r0, #20
 801354a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 801354e:	462b      	mov	r3, r5
 8013550:	2200      	movs	r2, #0
 8013552:	4573      	cmp	r3, lr
 8013554:	d316      	bcc.n	8013584 <__multiply+0x74>
 8013556:	f104 0214 	add.w	r2, r4, #20
 801355a:	f108 0114 	add.w	r1, r8, #20
 801355e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8013562:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8013566:	9300      	str	r3, [sp, #0]
 8013568:	9b00      	ldr	r3, [sp, #0]
 801356a:	9201      	str	r2, [sp, #4]
 801356c:	4293      	cmp	r3, r2
 801356e:	d80c      	bhi.n	801358a <__multiply+0x7a>
 8013570:	2e00      	cmp	r6, #0
 8013572:	dd03      	ble.n	801357c <__multiply+0x6c>
 8013574:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8013578:	2b00      	cmp	r3, #0
 801357a:	d05d      	beq.n	8013638 <__multiply+0x128>
 801357c:	6106      	str	r6, [r0, #16]
 801357e:	b003      	add	sp, #12
 8013580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013584:	f843 2b04 	str.w	r2, [r3], #4
 8013588:	e7e3      	b.n	8013552 <__multiply+0x42>
 801358a:	f8b2 b000 	ldrh.w	fp, [r2]
 801358e:	f1bb 0f00 	cmp.w	fp, #0
 8013592:	d023      	beq.n	80135dc <__multiply+0xcc>
 8013594:	4689      	mov	r9, r1
 8013596:	46ac      	mov	ip, r5
 8013598:	f04f 0800 	mov.w	r8, #0
 801359c:	f859 4b04 	ldr.w	r4, [r9], #4
 80135a0:	f8dc a000 	ldr.w	sl, [ip]
 80135a4:	b2a3      	uxth	r3, r4
 80135a6:	fa1f fa8a 	uxth.w	sl, sl
 80135aa:	fb0b a303 	mla	r3, fp, r3, sl
 80135ae:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80135b2:	f8dc 4000 	ldr.w	r4, [ip]
 80135b6:	4443      	add	r3, r8
 80135b8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80135bc:	fb0b 840a 	mla	r4, fp, sl, r8
 80135c0:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80135c4:	46e2      	mov	sl, ip
 80135c6:	b29b      	uxth	r3, r3
 80135c8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80135cc:	454f      	cmp	r7, r9
 80135ce:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80135d2:	f84a 3b04 	str.w	r3, [sl], #4
 80135d6:	d82b      	bhi.n	8013630 <__multiply+0x120>
 80135d8:	f8cc 8004 	str.w	r8, [ip, #4]
 80135dc:	9b01      	ldr	r3, [sp, #4]
 80135de:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80135e2:	3204      	adds	r2, #4
 80135e4:	f1ba 0f00 	cmp.w	sl, #0
 80135e8:	d020      	beq.n	801362c <__multiply+0x11c>
 80135ea:	682b      	ldr	r3, [r5, #0]
 80135ec:	4689      	mov	r9, r1
 80135ee:	46a8      	mov	r8, r5
 80135f0:	f04f 0b00 	mov.w	fp, #0
 80135f4:	f8b9 c000 	ldrh.w	ip, [r9]
 80135f8:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80135fc:	fb0a 440c 	mla	r4, sl, ip, r4
 8013600:	445c      	add	r4, fp
 8013602:	46c4      	mov	ip, r8
 8013604:	b29b      	uxth	r3, r3
 8013606:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801360a:	f84c 3b04 	str.w	r3, [ip], #4
 801360e:	f859 3b04 	ldr.w	r3, [r9], #4
 8013612:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8013616:	0c1b      	lsrs	r3, r3, #16
 8013618:	fb0a b303 	mla	r3, sl, r3, fp
 801361c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8013620:	454f      	cmp	r7, r9
 8013622:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8013626:	d805      	bhi.n	8013634 <__multiply+0x124>
 8013628:	f8c8 3004 	str.w	r3, [r8, #4]
 801362c:	3504      	adds	r5, #4
 801362e:	e79b      	b.n	8013568 <__multiply+0x58>
 8013630:	46d4      	mov	ip, sl
 8013632:	e7b3      	b.n	801359c <__multiply+0x8c>
 8013634:	46e0      	mov	r8, ip
 8013636:	e7dd      	b.n	80135f4 <__multiply+0xe4>
 8013638:	3e01      	subs	r6, #1
 801363a:	e799      	b.n	8013570 <__multiply+0x60>

0801363c <__pow5mult>:
 801363c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013640:	4615      	mov	r5, r2
 8013642:	f012 0203 	ands.w	r2, r2, #3
 8013646:	4606      	mov	r6, r0
 8013648:	460f      	mov	r7, r1
 801364a:	d007      	beq.n	801365c <__pow5mult+0x20>
 801364c:	3a01      	subs	r2, #1
 801364e:	4c21      	ldr	r4, [pc, #132]	; (80136d4 <__pow5mult+0x98>)
 8013650:	2300      	movs	r3, #0
 8013652:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013656:	f7ff fec9 	bl	80133ec <__multadd>
 801365a:	4607      	mov	r7, r0
 801365c:	10ad      	asrs	r5, r5, #2
 801365e:	d035      	beq.n	80136cc <__pow5mult+0x90>
 8013660:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8013662:	b93c      	cbnz	r4, 8013674 <__pow5mult+0x38>
 8013664:	2010      	movs	r0, #16
 8013666:	f7ff fe63 	bl	8013330 <malloc>
 801366a:	6270      	str	r0, [r6, #36]	; 0x24
 801366c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013670:	6004      	str	r4, [r0, #0]
 8013672:	60c4      	str	r4, [r0, #12]
 8013674:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8013678:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801367c:	b94c      	cbnz	r4, 8013692 <__pow5mult+0x56>
 801367e:	f240 2171 	movw	r1, #625	; 0x271
 8013682:	4630      	mov	r0, r6
 8013684:	f7ff ff3b 	bl	80134fe <__i2b>
 8013688:	2300      	movs	r3, #0
 801368a:	f8c8 0008 	str.w	r0, [r8, #8]
 801368e:	4604      	mov	r4, r0
 8013690:	6003      	str	r3, [r0, #0]
 8013692:	f04f 0800 	mov.w	r8, #0
 8013696:	07eb      	lsls	r3, r5, #31
 8013698:	d50a      	bpl.n	80136b0 <__pow5mult+0x74>
 801369a:	4639      	mov	r1, r7
 801369c:	4622      	mov	r2, r4
 801369e:	4630      	mov	r0, r6
 80136a0:	f7ff ff36 	bl	8013510 <__multiply>
 80136a4:	4639      	mov	r1, r7
 80136a6:	4681      	mov	r9, r0
 80136a8:	4630      	mov	r0, r6
 80136aa:	f7ff fe88 	bl	80133be <_Bfree>
 80136ae:	464f      	mov	r7, r9
 80136b0:	106d      	asrs	r5, r5, #1
 80136b2:	d00b      	beq.n	80136cc <__pow5mult+0x90>
 80136b4:	6820      	ldr	r0, [r4, #0]
 80136b6:	b938      	cbnz	r0, 80136c8 <__pow5mult+0x8c>
 80136b8:	4622      	mov	r2, r4
 80136ba:	4621      	mov	r1, r4
 80136bc:	4630      	mov	r0, r6
 80136be:	f7ff ff27 	bl	8013510 <__multiply>
 80136c2:	6020      	str	r0, [r4, #0]
 80136c4:	f8c0 8000 	str.w	r8, [r0]
 80136c8:	4604      	mov	r4, r0
 80136ca:	e7e4      	b.n	8013696 <__pow5mult+0x5a>
 80136cc:	4638      	mov	r0, r7
 80136ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80136d2:	bf00      	nop
 80136d4:	08016af8 	.word	0x08016af8

080136d8 <__lshift>:
 80136d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80136dc:	460c      	mov	r4, r1
 80136de:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80136e2:	6923      	ldr	r3, [r4, #16]
 80136e4:	6849      	ldr	r1, [r1, #4]
 80136e6:	eb0a 0903 	add.w	r9, sl, r3
 80136ea:	68a3      	ldr	r3, [r4, #8]
 80136ec:	4607      	mov	r7, r0
 80136ee:	4616      	mov	r6, r2
 80136f0:	f109 0501 	add.w	r5, r9, #1
 80136f4:	42ab      	cmp	r3, r5
 80136f6:	db32      	blt.n	801375e <__lshift+0x86>
 80136f8:	4638      	mov	r0, r7
 80136fa:	f7ff fe2c 	bl	8013356 <_Balloc>
 80136fe:	2300      	movs	r3, #0
 8013700:	4680      	mov	r8, r0
 8013702:	f100 0114 	add.w	r1, r0, #20
 8013706:	461a      	mov	r2, r3
 8013708:	4553      	cmp	r3, sl
 801370a:	db2b      	blt.n	8013764 <__lshift+0x8c>
 801370c:	6920      	ldr	r0, [r4, #16]
 801370e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013712:	f104 0314 	add.w	r3, r4, #20
 8013716:	f016 021f 	ands.w	r2, r6, #31
 801371a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801371e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013722:	d025      	beq.n	8013770 <__lshift+0x98>
 8013724:	f1c2 0e20 	rsb	lr, r2, #32
 8013728:	2000      	movs	r0, #0
 801372a:	681e      	ldr	r6, [r3, #0]
 801372c:	468a      	mov	sl, r1
 801372e:	4096      	lsls	r6, r2
 8013730:	4330      	orrs	r0, r6
 8013732:	f84a 0b04 	str.w	r0, [sl], #4
 8013736:	f853 0b04 	ldr.w	r0, [r3], #4
 801373a:	459c      	cmp	ip, r3
 801373c:	fa20 f00e 	lsr.w	r0, r0, lr
 8013740:	d814      	bhi.n	801376c <__lshift+0x94>
 8013742:	6048      	str	r0, [r1, #4]
 8013744:	b108      	cbz	r0, 801374a <__lshift+0x72>
 8013746:	f109 0502 	add.w	r5, r9, #2
 801374a:	3d01      	subs	r5, #1
 801374c:	4638      	mov	r0, r7
 801374e:	f8c8 5010 	str.w	r5, [r8, #16]
 8013752:	4621      	mov	r1, r4
 8013754:	f7ff fe33 	bl	80133be <_Bfree>
 8013758:	4640      	mov	r0, r8
 801375a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801375e:	3101      	adds	r1, #1
 8013760:	005b      	lsls	r3, r3, #1
 8013762:	e7c7      	b.n	80136f4 <__lshift+0x1c>
 8013764:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8013768:	3301      	adds	r3, #1
 801376a:	e7cd      	b.n	8013708 <__lshift+0x30>
 801376c:	4651      	mov	r1, sl
 801376e:	e7dc      	b.n	801372a <__lshift+0x52>
 8013770:	3904      	subs	r1, #4
 8013772:	f853 2b04 	ldr.w	r2, [r3], #4
 8013776:	f841 2f04 	str.w	r2, [r1, #4]!
 801377a:	459c      	cmp	ip, r3
 801377c:	d8f9      	bhi.n	8013772 <__lshift+0x9a>
 801377e:	e7e4      	b.n	801374a <__lshift+0x72>

08013780 <__mcmp>:
 8013780:	6903      	ldr	r3, [r0, #16]
 8013782:	690a      	ldr	r2, [r1, #16]
 8013784:	1a9b      	subs	r3, r3, r2
 8013786:	b530      	push	{r4, r5, lr}
 8013788:	d10c      	bne.n	80137a4 <__mcmp+0x24>
 801378a:	0092      	lsls	r2, r2, #2
 801378c:	3014      	adds	r0, #20
 801378e:	3114      	adds	r1, #20
 8013790:	1884      	adds	r4, r0, r2
 8013792:	4411      	add	r1, r2
 8013794:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8013798:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801379c:	4295      	cmp	r5, r2
 801379e:	d003      	beq.n	80137a8 <__mcmp+0x28>
 80137a0:	d305      	bcc.n	80137ae <__mcmp+0x2e>
 80137a2:	2301      	movs	r3, #1
 80137a4:	4618      	mov	r0, r3
 80137a6:	bd30      	pop	{r4, r5, pc}
 80137a8:	42a0      	cmp	r0, r4
 80137aa:	d3f3      	bcc.n	8013794 <__mcmp+0x14>
 80137ac:	e7fa      	b.n	80137a4 <__mcmp+0x24>
 80137ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80137b2:	e7f7      	b.n	80137a4 <__mcmp+0x24>

080137b4 <__mdiff>:
 80137b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80137b8:	460d      	mov	r5, r1
 80137ba:	4607      	mov	r7, r0
 80137bc:	4611      	mov	r1, r2
 80137be:	4628      	mov	r0, r5
 80137c0:	4614      	mov	r4, r2
 80137c2:	f7ff ffdd 	bl	8013780 <__mcmp>
 80137c6:	1e06      	subs	r6, r0, #0
 80137c8:	d108      	bne.n	80137dc <__mdiff+0x28>
 80137ca:	4631      	mov	r1, r6
 80137cc:	4638      	mov	r0, r7
 80137ce:	f7ff fdc2 	bl	8013356 <_Balloc>
 80137d2:	2301      	movs	r3, #1
 80137d4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80137d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80137dc:	bfa4      	itt	ge
 80137de:	4623      	movge	r3, r4
 80137e0:	462c      	movge	r4, r5
 80137e2:	4638      	mov	r0, r7
 80137e4:	6861      	ldr	r1, [r4, #4]
 80137e6:	bfa6      	itte	ge
 80137e8:	461d      	movge	r5, r3
 80137ea:	2600      	movge	r6, #0
 80137ec:	2601      	movlt	r6, #1
 80137ee:	f7ff fdb2 	bl	8013356 <_Balloc>
 80137f2:	692b      	ldr	r3, [r5, #16]
 80137f4:	60c6      	str	r6, [r0, #12]
 80137f6:	6926      	ldr	r6, [r4, #16]
 80137f8:	f105 0914 	add.w	r9, r5, #20
 80137fc:	f104 0214 	add.w	r2, r4, #20
 8013800:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8013804:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8013808:	f100 0514 	add.w	r5, r0, #20
 801380c:	f04f 0e00 	mov.w	lr, #0
 8013810:	f852 ab04 	ldr.w	sl, [r2], #4
 8013814:	f859 4b04 	ldr.w	r4, [r9], #4
 8013818:	fa1e f18a 	uxtah	r1, lr, sl
 801381c:	b2a3      	uxth	r3, r4
 801381e:	1ac9      	subs	r1, r1, r3
 8013820:	0c23      	lsrs	r3, r4, #16
 8013822:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8013826:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801382a:	b289      	uxth	r1, r1
 801382c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8013830:	45c8      	cmp	r8, r9
 8013832:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8013836:	4694      	mov	ip, r2
 8013838:	f845 3b04 	str.w	r3, [r5], #4
 801383c:	d8e8      	bhi.n	8013810 <__mdiff+0x5c>
 801383e:	45bc      	cmp	ip, r7
 8013840:	d304      	bcc.n	801384c <__mdiff+0x98>
 8013842:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8013846:	b183      	cbz	r3, 801386a <__mdiff+0xb6>
 8013848:	6106      	str	r6, [r0, #16]
 801384a:	e7c5      	b.n	80137d8 <__mdiff+0x24>
 801384c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8013850:	fa1e f381 	uxtah	r3, lr, r1
 8013854:	141a      	asrs	r2, r3, #16
 8013856:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801385a:	b29b      	uxth	r3, r3
 801385c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013860:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8013864:	f845 3b04 	str.w	r3, [r5], #4
 8013868:	e7e9      	b.n	801383e <__mdiff+0x8a>
 801386a:	3e01      	subs	r6, #1
 801386c:	e7e9      	b.n	8013842 <__mdiff+0x8e>

0801386e <__d2b>:
 801386e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013872:	460e      	mov	r6, r1
 8013874:	2101      	movs	r1, #1
 8013876:	ec59 8b10 	vmov	r8, r9, d0
 801387a:	4615      	mov	r5, r2
 801387c:	f7ff fd6b 	bl	8013356 <_Balloc>
 8013880:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8013884:	4607      	mov	r7, r0
 8013886:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801388a:	bb34      	cbnz	r4, 80138da <__d2b+0x6c>
 801388c:	9301      	str	r3, [sp, #4]
 801388e:	f1b8 0300 	subs.w	r3, r8, #0
 8013892:	d027      	beq.n	80138e4 <__d2b+0x76>
 8013894:	a802      	add	r0, sp, #8
 8013896:	f840 3d08 	str.w	r3, [r0, #-8]!
 801389a:	f7ff fe01 	bl	80134a0 <__lo0bits>
 801389e:	9900      	ldr	r1, [sp, #0]
 80138a0:	b1f0      	cbz	r0, 80138e0 <__d2b+0x72>
 80138a2:	9a01      	ldr	r2, [sp, #4]
 80138a4:	f1c0 0320 	rsb	r3, r0, #32
 80138a8:	fa02 f303 	lsl.w	r3, r2, r3
 80138ac:	430b      	orrs	r3, r1
 80138ae:	40c2      	lsrs	r2, r0
 80138b0:	617b      	str	r3, [r7, #20]
 80138b2:	9201      	str	r2, [sp, #4]
 80138b4:	9b01      	ldr	r3, [sp, #4]
 80138b6:	61bb      	str	r3, [r7, #24]
 80138b8:	2b00      	cmp	r3, #0
 80138ba:	bf14      	ite	ne
 80138bc:	2102      	movne	r1, #2
 80138be:	2101      	moveq	r1, #1
 80138c0:	6139      	str	r1, [r7, #16]
 80138c2:	b1c4      	cbz	r4, 80138f6 <__d2b+0x88>
 80138c4:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80138c8:	4404      	add	r4, r0
 80138ca:	6034      	str	r4, [r6, #0]
 80138cc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80138d0:	6028      	str	r0, [r5, #0]
 80138d2:	4638      	mov	r0, r7
 80138d4:	b003      	add	sp, #12
 80138d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80138da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80138de:	e7d5      	b.n	801388c <__d2b+0x1e>
 80138e0:	6179      	str	r1, [r7, #20]
 80138e2:	e7e7      	b.n	80138b4 <__d2b+0x46>
 80138e4:	a801      	add	r0, sp, #4
 80138e6:	f7ff fddb 	bl	80134a0 <__lo0bits>
 80138ea:	9b01      	ldr	r3, [sp, #4]
 80138ec:	617b      	str	r3, [r7, #20]
 80138ee:	2101      	movs	r1, #1
 80138f0:	6139      	str	r1, [r7, #16]
 80138f2:	3020      	adds	r0, #32
 80138f4:	e7e5      	b.n	80138c2 <__d2b+0x54>
 80138f6:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80138fa:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80138fe:	6030      	str	r0, [r6, #0]
 8013900:	6918      	ldr	r0, [r3, #16]
 8013902:	f7ff fdae 	bl	8013462 <__hi0bits>
 8013906:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 801390a:	e7e1      	b.n	80138d0 <__d2b+0x62>

0801390c <_calloc_r>:
 801390c:	b538      	push	{r3, r4, r5, lr}
 801390e:	fb02 f401 	mul.w	r4, r2, r1
 8013912:	4621      	mov	r1, r4
 8013914:	f000 f856 	bl	80139c4 <_malloc_r>
 8013918:	4605      	mov	r5, r0
 801391a:	b118      	cbz	r0, 8013924 <_calloc_r+0x18>
 801391c:	4622      	mov	r2, r4
 801391e:	2100      	movs	r1, #0
 8013920:	f7fd fef2 	bl	8011708 <memset>
 8013924:	4628      	mov	r0, r5
 8013926:	bd38      	pop	{r3, r4, r5, pc}

08013928 <_free_r>:
 8013928:	b538      	push	{r3, r4, r5, lr}
 801392a:	4605      	mov	r5, r0
 801392c:	2900      	cmp	r1, #0
 801392e:	d045      	beq.n	80139bc <_free_r+0x94>
 8013930:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013934:	1f0c      	subs	r4, r1, #4
 8013936:	2b00      	cmp	r3, #0
 8013938:	bfb8      	it	lt
 801393a:	18e4      	addlt	r4, r4, r3
 801393c:	f000 fc03 	bl	8014146 <__malloc_lock>
 8013940:	4a1f      	ldr	r2, [pc, #124]	; (80139c0 <_free_r+0x98>)
 8013942:	6813      	ldr	r3, [r2, #0]
 8013944:	4610      	mov	r0, r2
 8013946:	b933      	cbnz	r3, 8013956 <_free_r+0x2e>
 8013948:	6063      	str	r3, [r4, #4]
 801394a:	6014      	str	r4, [r2, #0]
 801394c:	4628      	mov	r0, r5
 801394e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013952:	f000 bbf9 	b.w	8014148 <__malloc_unlock>
 8013956:	42a3      	cmp	r3, r4
 8013958:	d90c      	bls.n	8013974 <_free_r+0x4c>
 801395a:	6821      	ldr	r1, [r4, #0]
 801395c:	1862      	adds	r2, r4, r1
 801395e:	4293      	cmp	r3, r2
 8013960:	bf04      	itt	eq
 8013962:	681a      	ldreq	r2, [r3, #0]
 8013964:	685b      	ldreq	r3, [r3, #4]
 8013966:	6063      	str	r3, [r4, #4]
 8013968:	bf04      	itt	eq
 801396a:	1852      	addeq	r2, r2, r1
 801396c:	6022      	streq	r2, [r4, #0]
 801396e:	6004      	str	r4, [r0, #0]
 8013970:	e7ec      	b.n	801394c <_free_r+0x24>
 8013972:	4613      	mov	r3, r2
 8013974:	685a      	ldr	r2, [r3, #4]
 8013976:	b10a      	cbz	r2, 801397c <_free_r+0x54>
 8013978:	42a2      	cmp	r2, r4
 801397a:	d9fa      	bls.n	8013972 <_free_r+0x4a>
 801397c:	6819      	ldr	r1, [r3, #0]
 801397e:	1858      	adds	r0, r3, r1
 8013980:	42a0      	cmp	r0, r4
 8013982:	d10b      	bne.n	801399c <_free_r+0x74>
 8013984:	6820      	ldr	r0, [r4, #0]
 8013986:	4401      	add	r1, r0
 8013988:	1858      	adds	r0, r3, r1
 801398a:	4282      	cmp	r2, r0
 801398c:	6019      	str	r1, [r3, #0]
 801398e:	d1dd      	bne.n	801394c <_free_r+0x24>
 8013990:	6810      	ldr	r0, [r2, #0]
 8013992:	6852      	ldr	r2, [r2, #4]
 8013994:	605a      	str	r2, [r3, #4]
 8013996:	4401      	add	r1, r0
 8013998:	6019      	str	r1, [r3, #0]
 801399a:	e7d7      	b.n	801394c <_free_r+0x24>
 801399c:	d902      	bls.n	80139a4 <_free_r+0x7c>
 801399e:	230c      	movs	r3, #12
 80139a0:	602b      	str	r3, [r5, #0]
 80139a2:	e7d3      	b.n	801394c <_free_r+0x24>
 80139a4:	6820      	ldr	r0, [r4, #0]
 80139a6:	1821      	adds	r1, r4, r0
 80139a8:	428a      	cmp	r2, r1
 80139aa:	bf04      	itt	eq
 80139ac:	6811      	ldreq	r1, [r2, #0]
 80139ae:	6852      	ldreq	r2, [r2, #4]
 80139b0:	6062      	str	r2, [r4, #4]
 80139b2:	bf04      	itt	eq
 80139b4:	1809      	addeq	r1, r1, r0
 80139b6:	6021      	streq	r1, [r4, #0]
 80139b8:	605c      	str	r4, [r3, #4]
 80139ba:	e7c7      	b.n	801394c <_free_r+0x24>
 80139bc:	bd38      	pop	{r3, r4, r5, pc}
 80139be:	bf00      	nop
 80139c0:	2000215c 	.word	0x2000215c

080139c4 <_malloc_r>:
 80139c4:	b570      	push	{r4, r5, r6, lr}
 80139c6:	1ccd      	adds	r5, r1, #3
 80139c8:	f025 0503 	bic.w	r5, r5, #3
 80139cc:	3508      	adds	r5, #8
 80139ce:	2d0c      	cmp	r5, #12
 80139d0:	bf38      	it	cc
 80139d2:	250c      	movcc	r5, #12
 80139d4:	2d00      	cmp	r5, #0
 80139d6:	4606      	mov	r6, r0
 80139d8:	db01      	blt.n	80139de <_malloc_r+0x1a>
 80139da:	42a9      	cmp	r1, r5
 80139dc:	d903      	bls.n	80139e6 <_malloc_r+0x22>
 80139de:	230c      	movs	r3, #12
 80139e0:	6033      	str	r3, [r6, #0]
 80139e2:	2000      	movs	r0, #0
 80139e4:	bd70      	pop	{r4, r5, r6, pc}
 80139e6:	f000 fbae 	bl	8014146 <__malloc_lock>
 80139ea:	4a21      	ldr	r2, [pc, #132]	; (8013a70 <_malloc_r+0xac>)
 80139ec:	6814      	ldr	r4, [r2, #0]
 80139ee:	4621      	mov	r1, r4
 80139f0:	b991      	cbnz	r1, 8013a18 <_malloc_r+0x54>
 80139f2:	4c20      	ldr	r4, [pc, #128]	; (8013a74 <_malloc_r+0xb0>)
 80139f4:	6823      	ldr	r3, [r4, #0]
 80139f6:	b91b      	cbnz	r3, 8013a00 <_malloc_r+0x3c>
 80139f8:	4630      	mov	r0, r6
 80139fa:	f000 facf 	bl	8013f9c <_sbrk_r>
 80139fe:	6020      	str	r0, [r4, #0]
 8013a00:	4629      	mov	r1, r5
 8013a02:	4630      	mov	r0, r6
 8013a04:	f000 faca 	bl	8013f9c <_sbrk_r>
 8013a08:	1c43      	adds	r3, r0, #1
 8013a0a:	d124      	bne.n	8013a56 <_malloc_r+0x92>
 8013a0c:	230c      	movs	r3, #12
 8013a0e:	6033      	str	r3, [r6, #0]
 8013a10:	4630      	mov	r0, r6
 8013a12:	f000 fb99 	bl	8014148 <__malloc_unlock>
 8013a16:	e7e4      	b.n	80139e2 <_malloc_r+0x1e>
 8013a18:	680b      	ldr	r3, [r1, #0]
 8013a1a:	1b5b      	subs	r3, r3, r5
 8013a1c:	d418      	bmi.n	8013a50 <_malloc_r+0x8c>
 8013a1e:	2b0b      	cmp	r3, #11
 8013a20:	d90f      	bls.n	8013a42 <_malloc_r+0x7e>
 8013a22:	600b      	str	r3, [r1, #0]
 8013a24:	50cd      	str	r5, [r1, r3]
 8013a26:	18cc      	adds	r4, r1, r3
 8013a28:	4630      	mov	r0, r6
 8013a2a:	f000 fb8d 	bl	8014148 <__malloc_unlock>
 8013a2e:	f104 000b 	add.w	r0, r4, #11
 8013a32:	1d23      	adds	r3, r4, #4
 8013a34:	f020 0007 	bic.w	r0, r0, #7
 8013a38:	1ac3      	subs	r3, r0, r3
 8013a3a:	d0d3      	beq.n	80139e4 <_malloc_r+0x20>
 8013a3c:	425a      	negs	r2, r3
 8013a3e:	50e2      	str	r2, [r4, r3]
 8013a40:	e7d0      	b.n	80139e4 <_malloc_r+0x20>
 8013a42:	428c      	cmp	r4, r1
 8013a44:	684b      	ldr	r3, [r1, #4]
 8013a46:	bf16      	itet	ne
 8013a48:	6063      	strne	r3, [r4, #4]
 8013a4a:	6013      	streq	r3, [r2, #0]
 8013a4c:	460c      	movne	r4, r1
 8013a4e:	e7eb      	b.n	8013a28 <_malloc_r+0x64>
 8013a50:	460c      	mov	r4, r1
 8013a52:	6849      	ldr	r1, [r1, #4]
 8013a54:	e7cc      	b.n	80139f0 <_malloc_r+0x2c>
 8013a56:	1cc4      	adds	r4, r0, #3
 8013a58:	f024 0403 	bic.w	r4, r4, #3
 8013a5c:	42a0      	cmp	r0, r4
 8013a5e:	d005      	beq.n	8013a6c <_malloc_r+0xa8>
 8013a60:	1a21      	subs	r1, r4, r0
 8013a62:	4630      	mov	r0, r6
 8013a64:	f000 fa9a 	bl	8013f9c <_sbrk_r>
 8013a68:	3001      	adds	r0, #1
 8013a6a:	d0cf      	beq.n	8013a0c <_malloc_r+0x48>
 8013a6c:	6025      	str	r5, [r4, #0]
 8013a6e:	e7db      	b.n	8013a28 <_malloc_r+0x64>
 8013a70:	2000215c 	.word	0x2000215c
 8013a74:	20002160 	.word	0x20002160

08013a78 <__ssputs_r>:
 8013a78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013a7c:	688e      	ldr	r6, [r1, #8]
 8013a7e:	429e      	cmp	r6, r3
 8013a80:	4682      	mov	sl, r0
 8013a82:	460c      	mov	r4, r1
 8013a84:	4690      	mov	r8, r2
 8013a86:	4699      	mov	r9, r3
 8013a88:	d837      	bhi.n	8013afa <__ssputs_r+0x82>
 8013a8a:	898a      	ldrh	r2, [r1, #12]
 8013a8c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013a90:	d031      	beq.n	8013af6 <__ssputs_r+0x7e>
 8013a92:	6825      	ldr	r5, [r4, #0]
 8013a94:	6909      	ldr	r1, [r1, #16]
 8013a96:	1a6f      	subs	r7, r5, r1
 8013a98:	6965      	ldr	r5, [r4, #20]
 8013a9a:	2302      	movs	r3, #2
 8013a9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013aa0:	fb95 f5f3 	sdiv	r5, r5, r3
 8013aa4:	f109 0301 	add.w	r3, r9, #1
 8013aa8:	443b      	add	r3, r7
 8013aaa:	429d      	cmp	r5, r3
 8013aac:	bf38      	it	cc
 8013aae:	461d      	movcc	r5, r3
 8013ab0:	0553      	lsls	r3, r2, #21
 8013ab2:	d530      	bpl.n	8013b16 <__ssputs_r+0x9e>
 8013ab4:	4629      	mov	r1, r5
 8013ab6:	f7ff ff85 	bl	80139c4 <_malloc_r>
 8013aba:	4606      	mov	r6, r0
 8013abc:	b950      	cbnz	r0, 8013ad4 <__ssputs_r+0x5c>
 8013abe:	230c      	movs	r3, #12
 8013ac0:	f8ca 3000 	str.w	r3, [sl]
 8013ac4:	89a3      	ldrh	r3, [r4, #12]
 8013ac6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013aca:	81a3      	strh	r3, [r4, #12]
 8013acc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013ad0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013ad4:	463a      	mov	r2, r7
 8013ad6:	6921      	ldr	r1, [r4, #16]
 8013ad8:	f7ff fc32 	bl	8013340 <memcpy>
 8013adc:	89a3      	ldrh	r3, [r4, #12]
 8013ade:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013ae2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013ae6:	81a3      	strh	r3, [r4, #12]
 8013ae8:	6126      	str	r6, [r4, #16]
 8013aea:	6165      	str	r5, [r4, #20]
 8013aec:	443e      	add	r6, r7
 8013aee:	1bed      	subs	r5, r5, r7
 8013af0:	6026      	str	r6, [r4, #0]
 8013af2:	60a5      	str	r5, [r4, #8]
 8013af4:	464e      	mov	r6, r9
 8013af6:	454e      	cmp	r6, r9
 8013af8:	d900      	bls.n	8013afc <__ssputs_r+0x84>
 8013afa:	464e      	mov	r6, r9
 8013afc:	4632      	mov	r2, r6
 8013afe:	4641      	mov	r1, r8
 8013b00:	6820      	ldr	r0, [r4, #0]
 8013b02:	f000 fb07 	bl	8014114 <memmove>
 8013b06:	68a3      	ldr	r3, [r4, #8]
 8013b08:	1b9b      	subs	r3, r3, r6
 8013b0a:	60a3      	str	r3, [r4, #8]
 8013b0c:	6823      	ldr	r3, [r4, #0]
 8013b0e:	441e      	add	r6, r3
 8013b10:	6026      	str	r6, [r4, #0]
 8013b12:	2000      	movs	r0, #0
 8013b14:	e7dc      	b.n	8013ad0 <__ssputs_r+0x58>
 8013b16:	462a      	mov	r2, r5
 8013b18:	f000 fb17 	bl	801414a <_realloc_r>
 8013b1c:	4606      	mov	r6, r0
 8013b1e:	2800      	cmp	r0, #0
 8013b20:	d1e2      	bne.n	8013ae8 <__ssputs_r+0x70>
 8013b22:	6921      	ldr	r1, [r4, #16]
 8013b24:	4650      	mov	r0, sl
 8013b26:	f7ff feff 	bl	8013928 <_free_r>
 8013b2a:	e7c8      	b.n	8013abe <__ssputs_r+0x46>

08013b2c <_svfiprintf_r>:
 8013b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b30:	461d      	mov	r5, r3
 8013b32:	898b      	ldrh	r3, [r1, #12]
 8013b34:	061f      	lsls	r7, r3, #24
 8013b36:	b09d      	sub	sp, #116	; 0x74
 8013b38:	4680      	mov	r8, r0
 8013b3a:	460c      	mov	r4, r1
 8013b3c:	4616      	mov	r6, r2
 8013b3e:	d50f      	bpl.n	8013b60 <_svfiprintf_r+0x34>
 8013b40:	690b      	ldr	r3, [r1, #16]
 8013b42:	b96b      	cbnz	r3, 8013b60 <_svfiprintf_r+0x34>
 8013b44:	2140      	movs	r1, #64	; 0x40
 8013b46:	f7ff ff3d 	bl	80139c4 <_malloc_r>
 8013b4a:	6020      	str	r0, [r4, #0]
 8013b4c:	6120      	str	r0, [r4, #16]
 8013b4e:	b928      	cbnz	r0, 8013b5c <_svfiprintf_r+0x30>
 8013b50:	230c      	movs	r3, #12
 8013b52:	f8c8 3000 	str.w	r3, [r8]
 8013b56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013b5a:	e0c8      	b.n	8013cee <_svfiprintf_r+0x1c2>
 8013b5c:	2340      	movs	r3, #64	; 0x40
 8013b5e:	6163      	str	r3, [r4, #20]
 8013b60:	2300      	movs	r3, #0
 8013b62:	9309      	str	r3, [sp, #36]	; 0x24
 8013b64:	2320      	movs	r3, #32
 8013b66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013b6a:	2330      	movs	r3, #48	; 0x30
 8013b6c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013b70:	9503      	str	r5, [sp, #12]
 8013b72:	f04f 0b01 	mov.w	fp, #1
 8013b76:	4637      	mov	r7, r6
 8013b78:	463d      	mov	r5, r7
 8013b7a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8013b7e:	b10b      	cbz	r3, 8013b84 <_svfiprintf_r+0x58>
 8013b80:	2b25      	cmp	r3, #37	; 0x25
 8013b82:	d13e      	bne.n	8013c02 <_svfiprintf_r+0xd6>
 8013b84:	ebb7 0a06 	subs.w	sl, r7, r6
 8013b88:	d00b      	beq.n	8013ba2 <_svfiprintf_r+0x76>
 8013b8a:	4653      	mov	r3, sl
 8013b8c:	4632      	mov	r2, r6
 8013b8e:	4621      	mov	r1, r4
 8013b90:	4640      	mov	r0, r8
 8013b92:	f7ff ff71 	bl	8013a78 <__ssputs_r>
 8013b96:	3001      	adds	r0, #1
 8013b98:	f000 80a4 	beq.w	8013ce4 <_svfiprintf_r+0x1b8>
 8013b9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013b9e:	4453      	add	r3, sl
 8013ba0:	9309      	str	r3, [sp, #36]	; 0x24
 8013ba2:	783b      	ldrb	r3, [r7, #0]
 8013ba4:	2b00      	cmp	r3, #0
 8013ba6:	f000 809d 	beq.w	8013ce4 <_svfiprintf_r+0x1b8>
 8013baa:	2300      	movs	r3, #0
 8013bac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013bb0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013bb4:	9304      	str	r3, [sp, #16]
 8013bb6:	9307      	str	r3, [sp, #28]
 8013bb8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013bbc:	931a      	str	r3, [sp, #104]	; 0x68
 8013bbe:	462f      	mov	r7, r5
 8013bc0:	2205      	movs	r2, #5
 8013bc2:	f817 1b01 	ldrb.w	r1, [r7], #1
 8013bc6:	4850      	ldr	r0, [pc, #320]	; (8013d08 <_svfiprintf_r+0x1dc>)
 8013bc8:	f7ec fb32 	bl	8000230 <memchr>
 8013bcc:	9b04      	ldr	r3, [sp, #16]
 8013bce:	b9d0      	cbnz	r0, 8013c06 <_svfiprintf_r+0xda>
 8013bd0:	06d9      	lsls	r1, r3, #27
 8013bd2:	bf44      	itt	mi
 8013bd4:	2220      	movmi	r2, #32
 8013bd6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8013bda:	071a      	lsls	r2, r3, #28
 8013bdc:	bf44      	itt	mi
 8013bde:	222b      	movmi	r2, #43	; 0x2b
 8013be0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8013be4:	782a      	ldrb	r2, [r5, #0]
 8013be6:	2a2a      	cmp	r2, #42	; 0x2a
 8013be8:	d015      	beq.n	8013c16 <_svfiprintf_r+0xea>
 8013bea:	9a07      	ldr	r2, [sp, #28]
 8013bec:	462f      	mov	r7, r5
 8013bee:	2000      	movs	r0, #0
 8013bf0:	250a      	movs	r5, #10
 8013bf2:	4639      	mov	r1, r7
 8013bf4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013bf8:	3b30      	subs	r3, #48	; 0x30
 8013bfa:	2b09      	cmp	r3, #9
 8013bfc:	d94d      	bls.n	8013c9a <_svfiprintf_r+0x16e>
 8013bfe:	b1b8      	cbz	r0, 8013c30 <_svfiprintf_r+0x104>
 8013c00:	e00f      	b.n	8013c22 <_svfiprintf_r+0xf6>
 8013c02:	462f      	mov	r7, r5
 8013c04:	e7b8      	b.n	8013b78 <_svfiprintf_r+0x4c>
 8013c06:	4a40      	ldr	r2, [pc, #256]	; (8013d08 <_svfiprintf_r+0x1dc>)
 8013c08:	1a80      	subs	r0, r0, r2
 8013c0a:	fa0b f000 	lsl.w	r0, fp, r0
 8013c0e:	4318      	orrs	r0, r3
 8013c10:	9004      	str	r0, [sp, #16]
 8013c12:	463d      	mov	r5, r7
 8013c14:	e7d3      	b.n	8013bbe <_svfiprintf_r+0x92>
 8013c16:	9a03      	ldr	r2, [sp, #12]
 8013c18:	1d11      	adds	r1, r2, #4
 8013c1a:	6812      	ldr	r2, [r2, #0]
 8013c1c:	9103      	str	r1, [sp, #12]
 8013c1e:	2a00      	cmp	r2, #0
 8013c20:	db01      	blt.n	8013c26 <_svfiprintf_r+0xfa>
 8013c22:	9207      	str	r2, [sp, #28]
 8013c24:	e004      	b.n	8013c30 <_svfiprintf_r+0x104>
 8013c26:	4252      	negs	r2, r2
 8013c28:	f043 0302 	orr.w	r3, r3, #2
 8013c2c:	9207      	str	r2, [sp, #28]
 8013c2e:	9304      	str	r3, [sp, #16]
 8013c30:	783b      	ldrb	r3, [r7, #0]
 8013c32:	2b2e      	cmp	r3, #46	; 0x2e
 8013c34:	d10c      	bne.n	8013c50 <_svfiprintf_r+0x124>
 8013c36:	787b      	ldrb	r3, [r7, #1]
 8013c38:	2b2a      	cmp	r3, #42	; 0x2a
 8013c3a:	d133      	bne.n	8013ca4 <_svfiprintf_r+0x178>
 8013c3c:	9b03      	ldr	r3, [sp, #12]
 8013c3e:	1d1a      	adds	r2, r3, #4
 8013c40:	681b      	ldr	r3, [r3, #0]
 8013c42:	9203      	str	r2, [sp, #12]
 8013c44:	2b00      	cmp	r3, #0
 8013c46:	bfb8      	it	lt
 8013c48:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8013c4c:	3702      	adds	r7, #2
 8013c4e:	9305      	str	r3, [sp, #20]
 8013c50:	4d2e      	ldr	r5, [pc, #184]	; (8013d0c <_svfiprintf_r+0x1e0>)
 8013c52:	7839      	ldrb	r1, [r7, #0]
 8013c54:	2203      	movs	r2, #3
 8013c56:	4628      	mov	r0, r5
 8013c58:	f7ec faea 	bl	8000230 <memchr>
 8013c5c:	b138      	cbz	r0, 8013c6e <_svfiprintf_r+0x142>
 8013c5e:	2340      	movs	r3, #64	; 0x40
 8013c60:	1b40      	subs	r0, r0, r5
 8013c62:	fa03 f000 	lsl.w	r0, r3, r0
 8013c66:	9b04      	ldr	r3, [sp, #16]
 8013c68:	4303      	orrs	r3, r0
 8013c6a:	3701      	adds	r7, #1
 8013c6c:	9304      	str	r3, [sp, #16]
 8013c6e:	7839      	ldrb	r1, [r7, #0]
 8013c70:	4827      	ldr	r0, [pc, #156]	; (8013d10 <_svfiprintf_r+0x1e4>)
 8013c72:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013c76:	2206      	movs	r2, #6
 8013c78:	1c7e      	adds	r6, r7, #1
 8013c7a:	f7ec fad9 	bl	8000230 <memchr>
 8013c7e:	2800      	cmp	r0, #0
 8013c80:	d038      	beq.n	8013cf4 <_svfiprintf_r+0x1c8>
 8013c82:	4b24      	ldr	r3, [pc, #144]	; (8013d14 <_svfiprintf_r+0x1e8>)
 8013c84:	bb13      	cbnz	r3, 8013ccc <_svfiprintf_r+0x1a0>
 8013c86:	9b03      	ldr	r3, [sp, #12]
 8013c88:	3307      	adds	r3, #7
 8013c8a:	f023 0307 	bic.w	r3, r3, #7
 8013c8e:	3308      	adds	r3, #8
 8013c90:	9303      	str	r3, [sp, #12]
 8013c92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013c94:	444b      	add	r3, r9
 8013c96:	9309      	str	r3, [sp, #36]	; 0x24
 8013c98:	e76d      	b.n	8013b76 <_svfiprintf_r+0x4a>
 8013c9a:	fb05 3202 	mla	r2, r5, r2, r3
 8013c9e:	2001      	movs	r0, #1
 8013ca0:	460f      	mov	r7, r1
 8013ca2:	e7a6      	b.n	8013bf2 <_svfiprintf_r+0xc6>
 8013ca4:	2300      	movs	r3, #0
 8013ca6:	3701      	adds	r7, #1
 8013ca8:	9305      	str	r3, [sp, #20]
 8013caa:	4619      	mov	r1, r3
 8013cac:	250a      	movs	r5, #10
 8013cae:	4638      	mov	r0, r7
 8013cb0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013cb4:	3a30      	subs	r2, #48	; 0x30
 8013cb6:	2a09      	cmp	r2, #9
 8013cb8:	d903      	bls.n	8013cc2 <_svfiprintf_r+0x196>
 8013cba:	2b00      	cmp	r3, #0
 8013cbc:	d0c8      	beq.n	8013c50 <_svfiprintf_r+0x124>
 8013cbe:	9105      	str	r1, [sp, #20]
 8013cc0:	e7c6      	b.n	8013c50 <_svfiprintf_r+0x124>
 8013cc2:	fb05 2101 	mla	r1, r5, r1, r2
 8013cc6:	2301      	movs	r3, #1
 8013cc8:	4607      	mov	r7, r0
 8013cca:	e7f0      	b.n	8013cae <_svfiprintf_r+0x182>
 8013ccc:	ab03      	add	r3, sp, #12
 8013cce:	9300      	str	r3, [sp, #0]
 8013cd0:	4622      	mov	r2, r4
 8013cd2:	4b11      	ldr	r3, [pc, #68]	; (8013d18 <_svfiprintf_r+0x1ec>)
 8013cd4:	a904      	add	r1, sp, #16
 8013cd6:	4640      	mov	r0, r8
 8013cd8:	f7fd fdb2 	bl	8011840 <_printf_float>
 8013cdc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8013ce0:	4681      	mov	r9, r0
 8013ce2:	d1d6      	bne.n	8013c92 <_svfiprintf_r+0x166>
 8013ce4:	89a3      	ldrh	r3, [r4, #12]
 8013ce6:	065b      	lsls	r3, r3, #25
 8013ce8:	f53f af35 	bmi.w	8013b56 <_svfiprintf_r+0x2a>
 8013cec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013cee:	b01d      	add	sp, #116	; 0x74
 8013cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013cf4:	ab03      	add	r3, sp, #12
 8013cf6:	9300      	str	r3, [sp, #0]
 8013cf8:	4622      	mov	r2, r4
 8013cfa:	4b07      	ldr	r3, [pc, #28]	; (8013d18 <_svfiprintf_r+0x1ec>)
 8013cfc:	a904      	add	r1, sp, #16
 8013cfe:	4640      	mov	r0, r8
 8013d00:	f7fe f854 	bl	8011dac <_printf_i>
 8013d04:	e7ea      	b.n	8013cdc <_svfiprintf_r+0x1b0>
 8013d06:	bf00      	nop
 8013d08:	08016b04 	.word	0x08016b04
 8013d0c:	08016b0a 	.word	0x08016b0a
 8013d10:	08016b0e 	.word	0x08016b0e
 8013d14:	08011841 	.word	0x08011841
 8013d18:	08013a79 	.word	0x08013a79

08013d1c <__sfputc_r>:
 8013d1c:	6893      	ldr	r3, [r2, #8]
 8013d1e:	3b01      	subs	r3, #1
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	b410      	push	{r4}
 8013d24:	6093      	str	r3, [r2, #8]
 8013d26:	da08      	bge.n	8013d3a <__sfputc_r+0x1e>
 8013d28:	6994      	ldr	r4, [r2, #24]
 8013d2a:	42a3      	cmp	r3, r4
 8013d2c:	db01      	blt.n	8013d32 <__sfputc_r+0x16>
 8013d2e:	290a      	cmp	r1, #10
 8013d30:	d103      	bne.n	8013d3a <__sfputc_r+0x1e>
 8013d32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013d36:	f7fe ba0b 	b.w	8012150 <__swbuf_r>
 8013d3a:	6813      	ldr	r3, [r2, #0]
 8013d3c:	1c58      	adds	r0, r3, #1
 8013d3e:	6010      	str	r0, [r2, #0]
 8013d40:	7019      	strb	r1, [r3, #0]
 8013d42:	4608      	mov	r0, r1
 8013d44:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013d48:	4770      	bx	lr

08013d4a <__sfputs_r>:
 8013d4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d4c:	4606      	mov	r6, r0
 8013d4e:	460f      	mov	r7, r1
 8013d50:	4614      	mov	r4, r2
 8013d52:	18d5      	adds	r5, r2, r3
 8013d54:	42ac      	cmp	r4, r5
 8013d56:	d101      	bne.n	8013d5c <__sfputs_r+0x12>
 8013d58:	2000      	movs	r0, #0
 8013d5a:	e007      	b.n	8013d6c <__sfputs_r+0x22>
 8013d5c:	463a      	mov	r2, r7
 8013d5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013d62:	4630      	mov	r0, r6
 8013d64:	f7ff ffda 	bl	8013d1c <__sfputc_r>
 8013d68:	1c43      	adds	r3, r0, #1
 8013d6a:	d1f3      	bne.n	8013d54 <__sfputs_r+0xa>
 8013d6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013d70 <_vfiprintf_r>:
 8013d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d74:	460c      	mov	r4, r1
 8013d76:	b09d      	sub	sp, #116	; 0x74
 8013d78:	4617      	mov	r7, r2
 8013d7a:	461d      	mov	r5, r3
 8013d7c:	4606      	mov	r6, r0
 8013d7e:	b118      	cbz	r0, 8013d88 <_vfiprintf_r+0x18>
 8013d80:	6983      	ldr	r3, [r0, #24]
 8013d82:	b90b      	cbnz	r3, 8013d88 <_vfiprintf_r+0x18>
 8013d84:	f7ff f9d8 	bl	8013138 <__sinit>
 8013d88:	4b7c      	ldr	r3, [pc, #496]	; (8013f7c <_vfiprintf_r+0x20c>)
 8013d8a:	429c      	cmp	r4, r3
 8013d8c:	d158      	bne.n	8013e40 <_vfiprintf_r+0xd0>
 8013d8e:	6874      	ldr	r4, [r6, #4]
 8013d90:	89a3      	ldrh	r3, [r4, #12]
 8013d92:	0718      	lsls	r0, r3, #28
 8013d94:	d55e      	bpl.n	8013e54 <_vfiprintf_r+0xe4>
 8013d96:	6923      	ldr	r3, [r4, #16]
 8013d98:	2b00      	cmp	r3, #0
 8013d9a:	d05b      	beq.n	8013e54 <_vfiprintf_r+0xe4>
 8013d9c:	2300      	movs	r3, #0
 8013d9e:	9309      	str	r3, [sp, #36]	; 0x24
 8013da0:	2320      	movs	r3, #32
 8013da2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013da6:	2330      	movs	r3, #48	; 0x30
 8013da8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013dac:	9503      	str	r5, [sp, #12]
 8013dae:	f04f 0b01 	mov.w	fp, #1
 8013db2:	46b8      	mov	r8, r7
 8013db4:	4645      	mov	r5, r8
 8013db6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8013dba:	b10b      	cbz	r3, 8013dc0 <_vfiprintf_r+0x50>
 8013dbc:	2b25      	cmp	r3, #37	; 0x25
 8013dbe:	d154      	bne.n	8013e6a <_vfiprintf_r+0xfa>
 8013dc0:	ebb8 0a07 	subs.w	sl, r8, r7
 8013dc4:	d00b      	beq.n	8013dde <_vfiprintf_r+0x6e>
 8013dc6:	4653      	mov	r3, sl
 8013dc8:	463a      	mov	r2, r7
 8013dca:	4621      	mov	r1, r4
 8013dcc:	4630      	mov	r0, r6
 8013dce:	f7ff ffbc 	bl	8013d4a <__sfputs_r>
 8013dd2:	3001      	adds	r0, #1
 8013dd4:	f000 80c2 	beq.w	8013f5c <_vfiprintf_r+0x1ec>
 8013dd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013dda:	4453      	add	r3, sl
 8013ddc:	9309      	str	r3, [sp, #36]	; 0x24
 8013dde:	f898 3000 	ldrb.w	r3, [r8]
 8013de2:	2b00      	cmp	r3, #0
 8013de4:	f000 80ba 	beq.w	8013f5c <_vfiprintf_r+0x1ec>
 8013de8:	2300      	movs	r3, #0
 8013dea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013dee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013df2:	9304      	str	r3, [sp, #16]
 8013df4:	9307      	str	r3, [sp, #28]
 8013df6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013dfa:	931a      	str	r3, [sp, #104]	; 0x68
 8013dfc:	46a8      	mov	r8, r5
 8013dfe:	2205      	movs	r2, #5
 8013e00:	f818 1b01 	ldrb.w	r1, [r8], #1
 8013e04:	485e      	ldr	r0, [pc, #376]	; (8013f80 <_vfiprintf_r+0x210>)
 8013e06:	f7ec fa13 	bl	8000230 <memchr>
 8013e0a:	9b04      	ldr	r3, [sp, #16]
 8013e0c:	bb78      	cbnz	r0, 8013e6e <_vfiprintf_r+0xfe>
 8013e0e:	06d9      	lsls	r1, r3, #27
 8013e10:	bf44      	itt	mi
 8013e12:	2220      	movmi	r2, #32
 8013e14:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8013e18:	071a      	lsls	r2, r3, #28
 8013e1a:	bf44      	itt	mi
 8013e1c:	222b      	movmi	r2, #43	; 0x2b
 8013e1e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8013e22:	782a      	ldrb	r2, [r5, #0]
 8013e24:	2a2a      	cmp	r2, #42	; 0x2a
 8013e26:	d02a      	beq.n	8013e7e <_vfiprintf_r+0x10e>
 8013e28:	9a07      	ldr	r2, [sp, #28]
 8013e2a:	46a8      	mov	r8, r5
 8013e2c:	2000      	movs	r0, #0
 8013e2e:	250a      	movs	r5, #10
 8013e30:	4641      	mov	r1, r8
 8013e32:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013e36:	3b30      	subs	r3, #48	; 0x30
 8013e38:	2b09      	cmp	r3, #9
 8013e3a:	d969      	bls.n	8013f10 <_vfiprintf_r+0x1a0>
 8013e3c:	b360      	cbz	r0, 8013e98 <_vfiprintf_r+0x128>
 8013e3e:	e024      	b.n	8013e8a <_vfiprintf_r+0x11a>
 8013e40:	4b50      	ldr	r3, [pc, #320]	; (8013f84 <_vfiprintf_r+0x214>)
 8013e42:	429c      	cmp	r4, r3
 8013e44:	d101      	bne.n	8013e4a <_vfiprintf_r+0xda>
 8013e46:	68b4      	ldr	r4, [r6, #8]
 8013e48:	e7a2      	b.n	8013d90 <_vfiprintf_r+0x20>
 8013e4a:	4b4f      	ldr	r3, [pc, #316]	; (8013f88 <_vfiprintf_r+0x218>)
 8013e4c:	429c      	cmp	r4, r3
 8013e4e:	bf08      	it	eq
 8013e50:	68f4      	ldreq	r4, [r6, #12]
 8013e52:	e79d      	b.n	8013d90 <_vfiprintf_r+0x20>
 8013e54:	4621      	mov	r1, r4
 8013e56:	4630      	mov	r0, r6
 8013e58:	f7fe f9cc 	bl	80121f4 <__swsetup_r>
 8013e5c:	2800      	cmp	r0, #0
 8013e5e:	d09d      	beq.n	8013d9c <_vfiprintf_r+0x2c>
 8013e60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013e64:	b01d      	add	sp, #116	; 0x74
 8013e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e6a:	46a8      	mov	r8, r5
 8013e6c:	e7a2      	b.n	8013db4 <_vfiprintf_r+0x44>
 8013e6e:	4a44      	ldr	r2, [pc, #272]	; (8013f80 <_vfiprintf_r+0x210>)
 8013e70:	1a80      	subs	r0, r0, r2
 8013e72:	fa0b f000 	lsl.w	r0, fp, r0
 8013e76:	4318      	orrs	r0, r3
 8013e78:	9004      	str	r0, [sp, #16]
 8013e7a:	4645      	mov	r5, r8
 8013e7c:	e7be      	b.n	8013dfc <_vfiprintf_r+0x8c>
 8013e7e:	9a03      	ldr	r2, [sp, #12]
 8013e80:	1d11      	adds	r1, r2, #4
 8013e82:	6812      	ldr	r2, [r2, #0]
 8013e84:	9103      	str	r1, [sp, #12]
 8013e86:	2a00      	cmp	r2, #0
 8013e88:	db01      	blt.n	8013e8e <_vfiprintf_r+0x11e>
 8013e8a:	9207      	str	r2, [sp, #28]
 8013e8c:	e004      	b.n	8013e98 <_vfiprintf_r+0x128>
 8013e8e:	4252      	negs	r2, r2
 8013e90:	f043 0302 	orr.w	r3, r3, #2
 8013e94:	9207      	str	r2, [sp, #28]
 8013e96:	9304      	str	r3, [sp, #16]
 8013e98:	f898 3000 	ldrb.w	r3, [r8]
 8013e9c:	2b2e      	cmp	r3, #46	; 0x2e
 8013e9e:	d10e      	bne.n	8013ebe <_vfiprintf_r+0x14e>
 8013ea0:	f898 3001 	ldrb.w	r3, [r8, #1]
 8013ea4:	2b2a      	cmp	r3, #42	; 0x2a
 8013ea6:	d138      	bne.n	8013f1a <_vfiprintf_r+0x1aa>
 8013ea8:	9b03      	ldr	r3, [sp, #12]
 8013eaa:	1d1a      	adds	r2, r3, #4
 8013eac:	681b      	ldr	r3, [r3, #0]
 8013eae:	9203      	str	r2, [sp, #12]
 8013eb0:	2b00      	cmp	r3, #0
 8013eb2:	bfb8      	it	lt
 8013eb4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8013eb8:	f108 0802 	add.w	r8, r8, #2
 8013ebc:	9305      	str	r3, [sp, #20]
 8013ebe:	4d33      	ldr	r5, [pc, #204]	; (8013f8c <_vfiprintf_r+0x21c>)
 8013ec0:	f898 1000 	ldrb.w	r1, [r8]
 8013ec4:	2203      	movs	r2, #3
 8013ec6:	4628      	mov	r0, r5
 8013ec8:	f7ec f9b2 	bl	8000230 <memchr>
 8013ecc:	b140      	cbz	r0, 8013ee0 <_vfiprintf_r+0x170>
 8013ece:	2340      	movs	r3, #64	; 0x40
 8013ed0:	1b40      	subs	r0, r0, r5
 8013ed2:	fa03 f000 	lsl.w	r0, r3, r0
 8013ed6:	9b04      	ldr	r3, [sp, #16]
 8013ed8:	4303      	orrs	r3, r0
 8013eda:	f108 0801 	add.w	r8, r8, #1
 8013ede:	9304      	str	r3, [sp, #16]
 8013ee0:	f898 1000 	ldrb.w	r1, [r8]
 8013ee4:	482a      	ldr	r0, [pc, #168]	; (8013f90 <_vfiprintf_r+0x220>)
 8013ee6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013eea:	2206      	movs	r2, #6
 8013eec:	f108 0701 	add.w	r7, r8, #1
 8013ef0:	f7ec f99e 	bl	8000230 <memchr>
 8013ef4:	2800      	cmp	r0, #0
 8013ef6:	d037      	beq.n	8013f68 <_vfiprintf_r+0x1f8>
 8013ef8:	4b26      	ldr	r3, [pc, #152]	; (8013f94 <_vfiprintf_r+0x224>)
 8013efa:	bb1b      	cbnz	r3, 8013f44 <_vfiprintf_r+0x1d4>
 8013efc:	9b03      	ldr	r3, [sp, #12]
 8013efe:	3307      	adds	r3, #7
 8013f00:	f023 0307 	bic.w	r3, r3, #7
 8013f04:	3308      	adds	r3, #8
 8013f06:	9303      	str	r3, [sp, #12]
 8013f08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013f0a:	444b      	add	r3, r9
 8013f0c:	9309      	str	r3, [sp, #36]	; 0x24
 8013f0e:	e750      	b.n	8013db2 <_vfiprintf_r+0x42>
 8013f10:	fb05 3202 	mla	r2, r5, r2, r3
 8013f14:	2001      	movs	r0, #1
 8013f16:	4688      	mov	r8, r1
 8013f18:	e78a      	b.n	8013e30 <_vfiprintf_r+0xc0>
 8013f1a:	2300      	movs	r3, #0
 8013f1c:	f108 0801 	add.w	r8, r8, #1
 8013f20:	9305      	str	r3, [sp, #20]
 8013f22:	4619      	mov	r1, r3
 8013f24:	250a      	movs	r5, #10
 8013f26:	4640      	mov	r0, r8
 8013f28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013f2c:	3a30      	subs	r2, #48	; 0x30
 8013f2e:	2a09      	cmp	r2, #9
 8013f30:	d903      	bls.n	8013f3a <_vfiprintf_r+0x1ca>
 8013f32:	2b00      	cmp	r3, #0
 8013f34:	d0c3      	beq.n	8013ebe <_vfiprintf_r+0x14e>
 8013f36:	9105      	str	r1, [sp, #20]
 8013f38:	e7c1      	b.n	8013ebe <_vfiprintf_r+0x14e>
 8013f3a:	fb05 2101 	mla	r1, r5, r1, r2
 8013f3e:	2301      	movs	r3, #1
 8013f40:	4680      	mov	r8, r0
 8013f42:	e7f0      	b.n	8013f26 <_vfiprintf_r+0x1b6>
 8013f44:	ab03      	add	r3, sp, #12
 8013f46:	9300      	str	r3, [sp, #0]
 8013f48:	4622      	mov	r2, r4
 8013f4a:	4b13      	ldr	r3, [pc, #76]	; (8013f98 <_vfiprintf_r+0x228>)
 8013f4c:	a904      	add	r1, sp, #16
 8013f4e:	4630      	mov	r0, r6
 8013f50:	f7fd fc76 	bl	8011840 <_printf_float>
 8013f54:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8013f58:	4681      	mov	r9, r0
 8013f5a:	d1d5      	bne.n	8013f08 <_vfiprintf_r+0x198>
 8013f5c:	89a3      	ldrh	r3, [r4, #12]
 8013f5e:	065b      	lsls	r3, r3, #25
 8013f60:	f53f af7e 	bmi.w	8013e60 <_vfiprintf_r+0xf0>
 8013f64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013f66:	e77d      	b.n	8013e64 <_vfiprintf_r+0xf4>
 8013f68:	ab03      	add	r3, sp, #12
 8013f6a:	9300      	str	r3, [sp, #0]
 8013f6c:	4622      	mov	r2, r4
 8013f6e:	4b0a      	ldr	r3, [pc, #40]	; (8013f98 <_vfiprintf_r+0x228>)
 8013f70:	a904      	add	r1, sp, #16
 8013f72:	4630      	mov	r0, r6
 8013f74:	f7fd ff1a 	bl	8011dac <_printf_i>
 8013f78:	e7ec      	b.n	8013f54 <_vfiprintf_r+0x1e4>
 8013f7a:	bf00      	nop
 8013f7c:	080169c4 	.word	0x080169c4
 8013f80:	08016b04 	.word	0x08016b04
 8013f84:	080169e4 	.word	0x080169e4
 8013f88:	080169a4 	.word	0x080169a4
 8013f8c:	08016b0a 	.word	0x08016b0a
 8013f90:	08016b0e 	.word	0x08016b0e
 8013f94:	08011841 	.word	0x08011841
 8013f98:	08013d4b 	.word	0x08013d4b

08013f9c <_sbrk_r>:
 8013f9c:	b538      	push	{r3, r4, r5, lr}
 8013f9e:	4c06      	ldr	r4, [pc, #24]	; (8013fb8 <_sbrk_r+0x1c>)
 8013fa0:	2300      	movs	r3, #0
 8013fa2:	4605      	mov	r5, r0
 8013fa4:	4608      	mov	r0, r1
 8013fa6:	6023      	str	r3, [r4, #0]
 8013fa8:	f7f4 fb60 	bl	800866c <_sbrk>
 8013fac:	1c43      	adds	r3, r0, #1
 8013fae:	d102      	bne.n	8013fb6 <_sbrk_r+0x1a>
 8013fb0:	6823      	ldr	r3, [r4, #0]
 8013fb2:	b103      	cbz	r3, 8013fb6 <_sbrk_r+0x1a>
 8013fb4:	602b      	str	r3, [r5, #0]
 8013fb6:	bd38      	pop	{r3, r4, r5, pc}
 8013fb8:	20002c7c 	.word	0x20002c7c

08013fbc <__sread>:
 8013fbc:	b510      	push	{r4, lr}
 8013fbe:	460c      	mov	r4, r1
 8013fc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013fc4:	f000 f8e8 	bl	8014198 <_read_r>
 8013fc8:	2800      	cmp	r0, #0
 8013fca:	bfab      	itete	ge
 8013fcc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013fce:	89a3      	ldrhlt	r3, [r4, #12]
 8013fd0:	181b      	addge	r3, r3, r0
 8013fd2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013fd6:	bfac      	ite	ge
 8013fd8:	6563      	strge	r3, [r4, #84]	; 0x54
 8013fda:	81a3      	strhlt	r3, [r4, #12]
 8013fdc:	bd10      	pop	{r4, pc}

08013fde <__swrite>:
 8013fde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013fe2:	461f      	mov	r7, r3
 8013fe4:	898b      	ldrh	r3, [r1, #12]
 8013fe6:	05db      	lsls	r3, r3, #23
 8013fe8:	4605      	mov	r5, r0
 8013fea:	460c      	mov	r4, r1
 8013fec:	4616      	mov	r6, r2
 8013fee:	d505      	bpl.n	8013ffc <__swrite+0x1e>
 8013ff0:	2302      	movs	r3, #2
 8013ff2:	2200      	movs	r2, #0
 8013ff4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013ff8:	f000 f868 	bl	80140cc <_lseek_r>
 8013ffc:	89a3      	ldrh	r3, [r4, #12]
 8013ffe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014002:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014006:	81a3      	strh	r3, [r4, #12]
 8014008:	4632      	mov	r2, r6
 801400a:	463b      	mov	r3, r7
 801400c:	4628      	mov	r0, r5
 801400e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014012:	f000 b817 	b.w	8014044 <_write_r>

08014016 <__sseek>:
 8014016:	b510      	push	{r4, lr}
 8014018:	460c      	mov	r4, r1
 801401a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801401e:	f000 f855 	bl	80140cc <_lseek_r>
 8014022:	1c43      	adds	r3, r0, #1
 8014024:	89a3      	ldrh	r3, [r4, #12]
 8014026:	bf15      	itete	ne
 8014028:	6560      	strne	r0, [r4, #84]	; 0x54
 801402a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801402e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014032:	81a3      	strheq	r3, [r4, #12]
 8014034:	bf18      	it	ne
 8014036:	81a3      	strhne	r3, [r4, #12]
 8014038:	bd10      	pop	{r4, pc}

0801403a <__sclose>:
 801403a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801403e:	f000 b813 	b.w	8014068 <_close_r>
	...

08014044 <_write_r>:
 8014044:	b538      	push	{r3, r4, r5, lr}
 8014046:	4c07      	ldr	r4, [pc, #28]	; (8014064 <_write_r+0x20>)
 8014048:	4605      	mov	r5, r0
 801404a:	4608      	mov	r0, r1
 801404c:	4611      	mov	r1, r2
 801404e:	2200      	movs	r2, #0
 8014050:	6022      	str	r2, [r4, #0]
 8014052:	461a      	mov	r2, r3
 8014054:	f7f3 ffc7 	bl	8007fe6 <_write>
 8014058:	1c43      	adds	r3, r0, #1
 801405a:	d102      	bne.n	8014062 <_write_r+0x1e>
 801405c:	6823      	ldr	r3, [r4, #0]
 801405e:	b103      	cbz	r3, 8014062 <_write_r+0x1e>
 8014060:	602b      	str	r3, [r5, #0]
 8014062:	bd38      	pop	{r3, r4, r5, pc}
 8014064:	20002c7c 	.word	0x20002c7c

08014068 <_close_r>:
 8014068:	b538      	push	{r3, r4, r5, lr}
 801406a:	4c06      	ldr	r4, [pc, #24]	; (8014084 <_close_r+0x1c>)
 801406c:	2300      	movs	r3, #0
 801406e:	4605      	mov	r5, r0
 8014070:	4608      	mov	r0, r1
 8014072:	6023      	str	r3, [r4, #0]
 8014074:	f7f4 fac5 	bl	8008602 <_close>
 8014078:	1c43      	adds	r3, r0, #1
 801407a:	d102      	bne.n	8014082 <_close_r+0x1a>
 801407c:	6823      	ldr	r3, [r4, #0]
 801407e:	b103      	cbz	r3, 8014082 <_close_r+0x1a>
 8014080:	602b      	str	r3, [r5, #0]
 8014082:	bd38      	pop	{r3, r4, r5, pc}
 8014084:	20002c7c 	.word	0x20002c7c

08014088 <_fstat_r>:
 8014088:	b538      	push	{r3, r4, r5, lr}
 801408a:	4c07      	ldr	r4, [pc, #28]	; (80140a8 <_fstat_r+0x20>)
 801408c:	2300      	movs	r3, #0
 801408e:	4605      	mov	r5, r0
 8014090:	4608      	mov	r0, r1
 8014092:	4611      	mov	r1, r2
 8014094:	6023      	str	r3, [r4, #0]
 8014096:	f7f4 fac0 	bl	800861a <_fstat>
 801409a:	1c43      	adds	r3, r0, #1
 801409c:	d102      	bne.n	80140a4 <_fstat_r+0x1c>
 801409e:	6823      	ldr	r3, [r4, #0]
 80140a0:	b103      	cbz	r3, 80140a4 <_fstat_r+0x1c>
 80140a2:	602b      	str	r3, [r5, #0]
 80140a4:	bd38      	pop	{r3, r4, r5, pc}
 80140a6:	bf00      	nop
 80140a8:	20002c7c 	.word	0x20002c7c

080140ac <_isatty_r>:
 80140ac:	b538      	push	{r3, r4, r5, lr}
 80140ae:	4c06      	ldr	r4, [pc, #24]	; (80140c8 <_isatty_r+0x1c>)
 80140b0:	2300      	movs	r3, #0
 80140b2:	4605      	mov	r5, r0
 80140b4:	4608      	mov	r0, r1
 80140b6:	6023      	str	r3, [r4, #0]
 80140b8:	f7f4 fabf 	bl	800863a <_isatty>
 80140bc:	1c43      	adds	r3, r0, #1
 80140be:	d102      	bne.n	80140c6 <_isatty_r+0x1a>
 80140c0:	6823      	ldr	r3, [r4, #0]
 80140c2:	b103      	cbz	r3, 80140c6 <_isatty_r+0x1a>
 80140c4:	602b      	str	r3, [r5, #0]
 80140c6:	bd38      	pop	{r3, r4, r5, pc}
 80140c8:	20002c7c 	.word	0x20002c7c

080140cc <_lseek_r>:
 80140cc:	b538      	push	{r3, r4, r5, lr}
 80140ce:	4c07      	ldr	r4, [pc, #28]	; (80140ec <_lseek_r+0x20>)
 80140d0:	4605      	mov	r5, r0
 80140d2:	4608      	mov	r0, r1
 80140d4:	4611      	mov	r1, r2
 80140d6:	2200      	movs	r2, #0
 80140d8:	6022      	str	r2, [r4, #0]
 80140da:	461a      	mov	r2, r3
 80140dc:	f7f4 fab8 	bl	8008650 <_lseek>
 80140e0:	1c43      	adds	r3, r0, #1
 80140e2:	d102      	bne.n	80140ea <_lseek_r+0x1e>
 80140e4:	6823      	ldr	r3, [r4, #0]
 80140e6:	b103      	cbz	r3, 80140ea <_lseek_r+0x1e>
 80140e8:	602b      	str	r3, [r5, #0]
 80140ea:	bd38      	pop	{r3, r4, r5, pc}
 80140ec:	20002c7c 	.word	0x20002c7c

080140f0 <__ascii_mbtowc>:
 80140f0:	b082      	sub	sp, #8
 80140f2:	b901      	cbnz	r1, 80140f6 <__ascii_mbtowc+0x6>
 80140f4:	a901      	add	r1, sp, #4
 80140f6:	b142      	cbz	r2, 801410a <__ascii_mbtowc+0x1a>
 80140f8:	b14b      	cbz	r3, 801410e <__ascii_mbtowc+0x1e>
 80140fa:	7813      	ldrb	r3, [r2, #0]
 80140fc:	600b      	str	r3, [r1, #0]
 80140fe:	7812      	ldrb	r2, [r2, #0]
 8014100:	1c10      	adds	r0, r2, #0
 8014102:	bf18      	it	ne
 8014104:	2001      	movne	r0, #1
 8014106:	b002      	add	sp, #8
 8014108:	4770      	bx	lr
 801410a:	4610      	mov	r0, r2
 801410c:	e7fb      	b.n	8014106 <__ascii_mbtowc+0x16>
 801410e:	f06f 0001 	mvn.w	r0, #1
 8014112:	e7f8      	b.n	8014106 <__ascii_mbtowc+0x16>

08014114 <memmove>:
 8014114:	4288      	cmp	r0, r1
 8014116:	b510      	push	{r4, lr}
 8014118:	eb01 0302 	add.w	r3, r1, r2
 801411c:	d807      	bhi.n	801412e <memmove+0x1a>
 801411e:	1e42      	subs	r2, r0, #1
 8014120:	4299      	cmp	r1, r3
 8014122:	d00a      	beq.n	801413a <memmove+0x26>
 8014124:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014128:	f802 4f01 	strb.w	r4, [r2, #1]!
 801412c:	e7f8      	b.n	8014120 <memmove+0xc>
 801412e:	4283      	cmp	r3, r0
 8014130:	d9f5      	bls.n	801411e <memmove+0xa>
 8014132:	1881      	adds	r1, r0, r2
 8014134:	1ad2      	subs	r2, r2, r3
 8014136:	42d3      	cmn	r3, r2
 8014138:	d100      	bne.n	801413c <memmove+0x28>
 801413a:	bd10      	pop	{r4, pc}
 801413c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014140:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8014144:	e7f7      	b.n	8014136 <memmove+0x22>

08014146 <__malloc_lock>:
 8014146:	4770      	bx	lr

08014148 <__malloc_unlock>:
 8014148:	4770      	bx	lr

0801414a <_realloc_r>:
 801414a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801414c:	4607      	mov	r7, r0
 801414e:	4614      	mov	r4, r2
 8014150:	460e      	mov	r6, r1
 8014152:	b921      	cbnz	r1, 801415e <_realloc_r+0x14>
 8014154:	4611      	mov	r1, r2
 8014156:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801415a:	f7ff bc33 	b.w	80139c4 <_malloc_r>
 801415e:	b922      	cbnz	r2, 801416a <_realloc_r+0x20>
 8014160:	f7ff fbe2 	bl	8013928 <_free_r>
 8014164:	4625      	mov	r5, r4
 8014166:	4628      	mov	r0, r5
 8014168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801416a:	f000 f834 	bl	80141d6 <_malloc_usable_size_r>
 801416e:	42a0      	cmp	r0, r4
 8014170:	d20f      	bcs.n	8014192 <_realloc_r+0x48>
 8014172:	4621      	mov	r1, r4
 8014174:	4638      	mov	r0, r7
 8014176:	f7ff fc25 	bl	80139c4 <_malloc_r>
 801417a:	4605      	mov	r5, r0
 801417c:	2800      	cmp	r0, #0
 801417e:	d0f2      	beq.n	8014166 <_realloc_r+0x1c>
 8014180:	4631      	mov	r1, r6
 8014182:	4622      	mov	r2, r4
 8014184:	f7ff f8dc 	bl	8013340 <memcpy>
 8014188:	4631      	mov	r1, r6
 801418a:	4638      	mov	r0, r7
 801418c:	f7ff fbcc 	bl	8013928 <_free_r>
 8014190:	e7e9      	b.n	8014166 <_realloc_r+0x1c>
 8014192:	4635      	mov	r5, r6
 8014194:	e7e7      	b.n	8014166 <_realloc_r+0x1c>
	...

08014198 <_read_r>:
 8014198:	b538      	push	{r3, r4, r5, lr}
 801419a:	4c07      	ldr	r4, [pc, #28]	; (80141b8 <_read_r+0x20>)
 801419c:	4605      	mov	r5, r0
 801419e:	4608      	mov	r0, r1
 80141a0:	4611      	mov	r1, r2
 80141a2:	2200      	movs	r2, #0
 80141a4:	6022      	str	r2, [r4, #0]
 80141a6:	461a      	mov	r2, r3
 80141a8:	f7f4 fa0e 	bl	80085c8 <_read>
 80141ac:	1c43      	adds	r3, r0, #1
 80141ae:	d102      	bne.n	80141b6 <_read_r+0x1e>
 80141b0:	6823      	ldr	r3, [r4, #0]
 80141b2:	b103      	cbz	r3, 80141b6 <_read_r+0x1e>
 80141b4:	602b      	str	r3, [r5, #0]
 80141b6:	bd38      	pop	{r3, r4, r5, pc}
 80141b8:	20002c7c 	.word	0x20002c7c

080141bc <__ascii_wctomb>:
 80141bc:	b149      	cbz	r1, 80141d2 <__ascii_wctomb+0x16>
 80141be:	2aff      	cmp	r2, #255	; 0xff
 80141c0:	bf85      	ittet	hi
 80141c2:	238a      	movhi	r3, #138	; 0x8a
 80141c4:	6003      	strhi	r3, [r0, #0]
 80141c6:	700a      	strbls	r2, [r1, #0]
 80141c8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80141cc:	bf98      	it	ls
 80141ce:	2001      	movls	r0, #1
 80141d0:	4770      	bx	lr
 80141d2:	4608      	mov	r0, r1
 80141d4:	4770      	bx	lr

080141d6 <_malloc_usable_size_r>:
 80141d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80141da:	1f18      	subs	r0, r3, #4
 80141dc:	2b00      	cmp	r3, #0
 80141de:	bfbc      	itt	lt
 80141e0:	580b      	ldrlt	r3, [r1, r0]
 80141e2:	18c0      	addlt	r0, r0, r3
 80141e4:	4770      	bx	lr
	...

080141e8 <log10>:
 80141e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80141ea:	ed2d 8b02 	vpush	{d8}
 80141ee:	b08b      	sub	sp, #44	; 0x2c
 80141f0:	ec55 4b10 	vmov	r4, r5, d0
 80141f4:	f000 f9e8 	bl	80145c8 <__ieee754_log10>
 80141f8:	4b36      	ldr	r3, [pc, #216]	; (80142d4 <log10+0xec>)
 80141fa:	eeb0 8a40 	vmov.f32	s16, s0
 80141fe:	eef0 8a60 	vmov.f32	s17, s1
 8014202:	f993 6000 	ldrsb.w	r6, [r3]
 8014206:	1c73      	adds	r3, r6, #1
 8014208:	d05c      	beq.n	80142c4 <log10+0xdc>
 801420a:	4622      	mov	r2, r4
 801420c:	462b      	mov	r3, r5
 801420e:	4620      	mov	r0, r4
 8014210:	4629      	mov	r1, r5
 8014212:	f7ec fcb3 	bl	8000b7c <__aeabi_dcmpun>
 8014216:	4607      	mov	r7, r0
 8014218:	2800      	cmp	r0, #0
 801421a:	d153      	bne.n	80142c4 <log10+0xdc>
 801421c:	2200      	movs	r2, #0
 801421e:	2300      	movs	r3, #0
 8014220:	4620      	mov	r0, r4
 8014222:	4629      	mov	r1, r5
 8014224:	f7ec fc8c 	bl	8000b40 <__aeabi_dcmple>
 8014228:	2800      	cmp	r0, #0
 801422a:	d04b      	beq.n	80142c4 <log10+0xdc>
 801422c:	4b2a      	ldr	r3, [pc, #168]	; (80142d8 <log10+0xf0>)
 801422e:	9301      	str	r3, [sp, #4]
 8014230:	9708      	str	r7, [sp, #32]
 8014232:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8014236:	e9cd 4504 	strd	r4, r5, [sp, #16]
 801423a:	b9a6      	cbnz	r6, 8014266 <log10+0x7e>
 801423c:	4b27      	ldr	r3, [pc, #156]	; (80142dc <log10+0xf4>)
 801423e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8014242:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8014246:	4620      	mov	r0, r4
 8014248:	2200      	movs	r2, #0
 801424a:	2300      	movs	r3, #0
 801424c:	4629      	mov	r1, r5
 801424e:	f7ec fc63 	bl	8000b18 <__aeabi_dcmpeq>
 8014252:	bb40      	cbnz	r0, 80142a6 <log10+0xbe>
 8014254:	2301      	movs	r3, #1
 8014256:	2e02      	cmp	r6, #2
 8014258:	9300      	str	r3, [sp, #0]
 801425a:	d119      	bne.n	8014290 <log10+0xa8>
 801425c:	f7fd fa2a 	bl	80116b4 <__errno>
 8014260:	2321      	movs	r3, #33	; 0x21
 8014262:	6003      	str	r3, [r0, #0]
 8014264:	e019      	b.n	801429a <log10+0xb2>
 8014266:	4b1e      	ldr	r3, [pc, #120]	; (80142e0 <log10+0xf8>)
 8014268:	2200      	movs	r2, #0
 801426a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801426e:	4620      	mov	r0, r4
 8014270:	2200      	movs	r2, #0
 8014272:	2300      	movs	r3, #0
 8014274:	4629      	mov	r1, r5
 8014276:	f7ec fc4f 	bl	8000b18 <__aeabi_dcmpeq>
 801427a:	2800      	cmp	r0, #0
 801427c:	d0ea      	beq.n	8014254 <log10+0x6c>
 801427e:	2302      	movs	r3, #2
 8014280:	429e      	cmp	r6, r3
 8014282:	9300      	str	r3, [sp, #0]
 8014284:	d111      	bne.n	80142aa <log10+0xc2>
 8014286:	f7fd fa15 	bl	80116b4 <__errno>
 801428a:	2322      	movs	r3, #34	; 0x22
 801428c:	6003      	str	r3, [r0, #0]
 801428e:	e011      	b.n	80142b4 <log10+0xcc>
 8014290:	4668      	mov	r0, sp
 8014292:	f000 fff4 	bl	801527e <matherr>
 8014296:	2800      	cmp	r0, #0
 8014298:	d0e0      	beq.n	801425c <log10+0x74>
 801429a:	4812      	ldr	r0, [pc, #72]	; (80142e4 <log10+0xfc>)
 801429c:	f000 fff4 	bl	8015288 <nan>
 80142a0:	ed8d 0b06 	vstr	d0, [sp, #24]
 80142a4:	e006      	b.n	80142b4 <log10+0xcc>
 80142a6:	2302      	movs	r3, #2
 80142a8:	9300      	str	r3, [sp, #0]
 80142aa:	4668      	mov	r0, sp
 80142ac:	f000 ffe7 	bl	801527e <matherr>
 80142b0:	2800      	cmp	r0, #0
 80142b2:	d0e8      	beq.n	8014286 <log10+0x9e>
 80142b4:	9b08      	ldr	r3, [sp, #32]
 80142b6:	b11b      	cbz	r3, 80142c0 <log10+0xd8>
 80142b8:	f7fd f9fc 	bl	80116b4 <__errno>
 80142bc:	9b08      	ldr	r3, [sp, #32]
 80142be:	6003      	str	r3, [r0, #0]
 80142c0:	ed9d 8b06 	vldr	d8, [sp, #24]
 80142c4:	eeb0 0a48 	vmov.f32	s0, s16
 80142c8:	eef0 0a68 	vmov.f32	s1, s17
 80142cc:	b00b      	add	sp, #44	; 0x2c
 80142ce:	ecbd 8b02 	vpop	{d8}
 80142d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80142d4:	20002084 	.word	0x20002084
 80142d8:	08016c20 	.word	0x08016c20
 80142dc:	c7efffff 	.word	0xc7efffff
 80142e0:	fff00000 	.word	0xfff00000
 80142e4:	08016b09 	.word	0x08016b09

080142e8 <pow>:
 80142e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142ec:	ed2d 8b04 	vpush	{d8-d9}
 80142f0:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 80145c4 <pow+0x2dc>
 80142f4:	b08d      	sub	sp, #52	; 0x34
 80142f6:	ec57 6b10 	vmov	r6, r7, d0
 80142fa:	ec55 4b11 	vmov	r4, r5, d1
 80142fe:	f000 f9ef 	bl	80146e0 <__ieee754_pow>
 8014302:	f999 3000 	ldrsb.w	r3, [r9]
 8014306:	9300      	str	r3, [sp, #0]
 8014308:	3301      	adds	r3, #1
 801430a:	eeb0 8a40 	vmov.f32	s16, s0
 801430e:	eef0 8a60 	vmov.f32	s17, s1
 8014312:	46c8      	mov	r8, r9
 8014314:	d05f      	beq.n	80143d6 <pow+0xee>
 8014316:	4622      	mov	r2, r4
 8014318:	462b      	mov	r3, r5
 801431a:	4620      	mov	r0, r4
 801431c:	4629      	mov	r1, r5
 801431e:	f7ec fc2d 	bl	8000b7c <__aeabi_dcmpun>
 8014322:	4683      	mov	fp, r0
 8014324:	2800      	cmp	r0, #0
 8014326:	d156      	bne.n	80143d6 <pow+0xee>
 8014328:	4632      	mov	r2, r6
 801432a:	463b      	mov	r3, r7
 801432c:	4630      	mov	r0, r6
 801432e:	4639      	mov	r1, r7
 8014330:	f7ec fc24 	bl	8000b7c <__aeabi_dcmpun>
 8014334:	9001      	str	r0, [sp, #4]
 8014336:	b1e8      	cbz	r0, 8014374 <pow+0x8c>
 8014338:	2200      	movs	r2, #0
 801433a:	2300      	movs	r3, #0
 801433c:	4620      	mov	r0, r4
 801433e:	4629      	mov	r1, r5
 8014340:	f7ec fbea 	bl	8000b18 <__aeabi_dcmpeq>
 8014344:	2800      	cmp	r0, #0
 8014346:	d046      	beq.n	80143d6 <pow+0xee>
 8014348:	2301      	movs	r3, #1
 801434a:	9302      	str	r3, [sp, #8]
 801434c:	4b96      	ldr	r3, [pc, #600]	; (80145a8 <pow+0x2c0>)
 801434e:	9303      	str	r3, [sp, #12]
 8014350:	4b96      	ldr	r3, [pc, #600]	; (80145ac <pow+0x2c4>)
 8014352:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8014356:	2200      	movs	r2, #0
 8014358:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801435c:	9b00      	ldr	r3, [sp, #0]
 801435e:	2b02      	cmp	r3, #2
 8014360:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8014364:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8014368:	d033      	beq.n	80143d2 <pow+0xea>
 801436a:	a802      	add	r0, sp, #8
 801436c:	f000 ff87 	bl	801527e <matherr>
 8014370:	bb48      	cbnz	r0, 80143c6 <pow+0xde>
 8014372:	e05d      	b.n	8014430 <pow+0x148>
 8014374:	f04f 0a00 	mov.w	sl, #0
 8014378:	f04f 0b00 	mov.w	fp, #0
 801437c:	4652      	mov	r2, sl
 801437e:	465b      	mov	r3, fp
 8014380:	4630      	mov	r0, r6
 8014382:	4639      	mov	r1, r7
 8014384:	f7ec fbc8 	bl	8000b18 <__aeabi_dcmpeq>
 8014388:	ec4b ab19 	vmov	d9, sl, fp
 801438c:	2800      	cmp	r0, #0
 801438e:	d054      	beq.n	801443a <pow+0x152>
 8014390:	4652      	mov	r2, sl
 8014392:	465b      	mov	r3, fp
 8014394:	4620      	mov	r0, r4
 8014396:	4629      	mov	r1, r5
 8014398:	f7ec fbbe 	bl	8000b18 <__aeabi_dcmpeq>
 801439c:	4680      	mov	r8, r0
 801439e:	b318      	cbz	r0, 80143e8 <pow+0x100>
 80143a0:	2301      	movs	r3, #1
 80143a2:	9302      	str	r3, [sp, #8]
 80143a4:	4b80      	ldr	r3, [pc, #512]	; (80145a8 <pow+0x2c0>)
 80143a6:	9303      	str	r3, [sp, #12]
 80143a8:	9b01      	ldr	r3, [sp, #4]
 80143aa:	930a      	str	r3, [sp, #40]	; 0x28
 80143ac:	9b00      	ldr	r3, [sp, #0]
 80143ae:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80143b2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80143b6:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80143ba:	2b00      	cmp	r3, #0
 80143bc:	d0d5      	beq.n	801436a <pow+0x82>
 80143be:	4b7b      	ldr	r3, [pc, #492]	; (80145ac <pow+0x2c4>)
 80143c0:	2200      	movs	r2, #0
 80143c2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80143c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80143c8:	b11b      	cbz	r3, 80143d2 <pow+0xea>
 80143ca:	f7fd f973 	bl	80116b4 <__errno>
 80143ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80143d0:	6003      	str	r3, [r0, #0]
 80143d2:	ed9d 8b08 	vldr	d8, [sp, #32]
 80143d6:	eeb0 0a48 	vmov.f32	s0, s16
 80143da:	eef0 0a68 	vmov.f32	s1, s17
 80143de:	b00d      	add	sp, #52	; 0x34
 80143e0:	ecbd 8b04 	vpop	{d8-d9}
 80143e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80143e8:	ec45 4b10 	vmov	d0, r4, r5
 80143ec:	f000 ff3f 	bl	801526e <finite>
 80143f0:	2800      	cmp	r0, #0
 80143f2:	d0f0      	beq.n	80143d6 <pow+0xee>
 80143f4:	4652      	mov	r2, sl
 80143f6:	465b      	mov	r3, fp
 80143f8:	4620      	mov	r0, r4
 80143fa:	4629      	mov	r1, r5
 80143fc:	f7ec fb96 	bl	8000b2c <__aeabi_dcmplt>
 8014400:	2800      	cmp	r0, #0
 8014402:	d0e8      	beq.n	80143d6 <pow+0xee>
 8014404:	2301      	movs	r3, #1
 8014406:	9302      	str	r3, [sp, #8]
 8014408:	4b67      	ldr	r3, [pc, #412]	; (80145a8 <pow+0x2c0>)
 801440a:	9303      	str	r3, [sp, #12]
 801440c:	f999 3000 	ldrsb.w	r3, [r9]
 8014410:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8014414:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8014418:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801441c:	b913      	cbnz	r3, 8014424 <pow+0x13c>
 801441e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8014422:	e7a2      	b.n	801436a <pow+0x82>
 8014424:	4962      	ldr	r1, [pc, #392]	; (80145b0 <pow+0x2c8>)
 8014426:	2000      	movs	r0, #0
 8014428:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801442c:	2b02      	cmp	r3, #2
 801442e:	d19c      	bne.n	801436a <pow+0x82>
 8014430:	f7fd f940 	bl	80116b4 <__errno>
 8014434:	2321      	movs	r3, #33	; 0x21
 8014436:	6003      	str	r3, [r0, #0]
 8014438:	e7c5      	b.n	80143c6 <pow+0xde>
 801443a:	eeb0 0a48 	vmov.f32	s0, s16
 801443e:	eef0 0a68 	vmov.f32	s1, s17
 8014442:	f000 ff14 	bl	801526e <finite>
 8014446:	9000      	str	r0, [sp, #0]
 8014448:	2800      	cmp	r0, #0
 801444a:	f040 8081 	bne.w	8014550 <pow+0x268>
 801444e:	ec47 6b10 	vmov	d0, r6, r7
 8014452:	f000 ff0c 	bl	801526e <finite>
 8014456:	2800      	cmp	r0, #0
 8014458:	d07a      	beq.n	8014550 <pow+0x268>
 801445a:	ec45 4b10 	vmov	d0, r4, r5
 801445e:	f000 ff06 	bl	801526e <finite>
 8014462:	2800      	cmp	r0, #0
 8014464:	d074      	beq.n	8014550 <pow+0x268>
 8014466:	ec53 2b18 	vmov	r2, r3, d8
 801446a:	ee18 0a10 	vmov	r0, s16
 801446e:	4619      	mov	r1, r3
 8014470:	f7ec fb84 	bl	8000b7c <__aeabi_dcmpun>
 8014474:	f999 9000 	ldrsb.w	r9, [r9]
 8014478:	4b4b      	ldr	r3, [pc, #300]	; (80145a8 <pow+0x2c0>)
 801447a:	b1b0      	cbz	r0, 80144aa <pow+0x1c2>
 801447c:	2201      	movs	r2, #1
 801447e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8014482:	9b00      	ldr	r3, [sp, #0]
 8014484:	930a      	str	r3, [sp, #40]	; 0x28
 8014486:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801448a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801448e:	f1b9 0f00 	cmp.w	r9, #0
 8014492:	d0c4      	beq.n	801441e <pow+0x136>
 8014494:	4652      	mov	r2, sl
 8014496:	465b      	mov	r3, fp
 8014498:	4650      	mov	r0, sl
 801449a:	4659      	mov	r1, fp
 801449c:	f7ec f9fe 	bl	800089c <__aeabi_ddiv>
 80144a0:	f1b9 0f02 	cmp.w	r9, #2
 80144a4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80144a8:	e7c1      	b.n	801442e <pow+0x146>
 80144aa:	2203      	movs	r2, #3
 80144ac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80144b0:	900a      	str	r0, [sp, #40]	; 0x28
 80144b2:	4629      	mov	r1, r5
 80144b4:	4620      	mov	r0, r4
 80144b6:	2200      	movs	r2, #0
 80144b8:	4b3e      	ldr	r3, [pc, #248]	; (80145b4 <pow+0x2cc>)
 80144ba:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80144be:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80144c2:	f7ec f8c1 	bl	8000648 <__aeabi_dmul>
 80144c6:	4604      	mov	r4, r0
 80144c8:	460d      	mov	r5, r1
 80144ca:	f1b9 0f00 	cmp.w	r9, #0
 80144ce:	d124      	bne.n	801451a <pow+0x232>
 80144d0:	4b39      	ldr	r3, [pc, #228]	; (80145b8 <pow+0x2d0>)
 80144d2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80144d6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80144da:	4630      	mov	r0, r6
 80144dc:	4652      	mov	r2, sl
 80144de:	465b      	mov	r3, fp
 80144e0:	4639      	mov	r1, r7
 80144e2:	f7ec fb23 	bl	8000b2c <__aeabi_dcmplt>
 80144e6:	2800      	cmp	r0, #0
 80144e8:	d056      	beq.n	8014598 <pow+0x2b0>
 80144ea:	ec45 4b10 	vmov	d0, r4, r5
 80144ee:	f000 fed3 	bl	8015298 <rint>
 80144f2:	4622      	mov	r2, r4
 80144f4:	462b      	mov	r3, r5
 80144f6:	ec51 0b10 	vmov	r0, r1, d0
 80144fa:	f7ec fb0d 	bl	8000b18 <__aeabi_dcmpeq>
 80144fe:	b920      	cbnz	r0, 801450a <pow+0x222>
 8014500:	4b2e      	ldr	r3, [pc, #184]	; (80145bc <pow+0x2d4>)
 8014502:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8014506:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801450a:	f998 3000 	ldrsb.w	r3, [r8]
 801450e:	2b02      	cmp	r3, #2
 8014510:	d142      	bne.n	8014598 <pow+0x2b0>
 8014512:	f7fd f8cf 	bl	80116b4 <__errno>
 8014516:	2322      	movs	r3, #34	; 0x22
 8014518:	e78d      	b.n	8014436 <pow+0x14e>
 801451a:	4b29      	ldr	r3, [pc, #164]	; (80145c0 <pow+0x2d8>)
 801451c:	2200      	movs	r2, #0
 801451e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014522:	4630      	mov	r0, r6
 8014524:	4652      	mov	r2, sl
 8014526:	465b      	mov	r3, fp
 8014528:	4639      	mov	r1, r7
 801452a:	f7ec faff 	bl	8000b2c <__aeabi_dcmplt>
 801452e:	2800      	cmp	r0, #0
 8014530:	d0eb      	beq.n	801450a <pow+0x222>
 8014532:	ec45 4b10 	vmov	d0, r4, r5
 8014536:	f000 feaf 	bl	8015298 <rint>
 801453a:	4622      	mov	r2, r4
 801453c:	462b      	mov	r3, r5
 801453e:	ec51 0b10 	vmov	r0, r1, d0
 8014542:	f7ec fae9 	bl	8000b18 <__aeabi_dcmpeq>
 8014546:	2800      	cmp	r0, #0
 8014548:	d1df      	bne.n	801450a <pow+0x222>
 801454a:	2200      	movs	r2, #0
 801454c:	4b18      	ldr	r3, [pc, #96]	; (80145b0 <pow+0x2c8>)
 801454e:	e7da      	b.n	8014506 <pow+0x21e>
 8014550:	2200      	movs	r2, #0
 8014552:	2300      	movs	r3, #0
 8014554:	ec51 0b18 	vmov	r0, r1, d8
 8014558:	f7ec fade 	bl	8000b18 <__aeabi_dcmpeq>
 801455c:	2800      	cmp	r0, #0
 801455e:	f43f af3a 	beq.w	80143d6 <pow+0xee>
 8014562:	ec47 6b10 	vmov	d0, r6, r7
 8014566:	f000 fe82 	bl	801526e <finite>
 801456a:	2800      	cmp	r0, #0
 801456c:	f43f af33 	beq.w	80143d6 <pow+0xee>
 8014570:	ec45 4b10 	vmov	d0, r4, r5
 8014574:	f000 fe7b 	bl	801526e <finite>
 8014578:	2800      	cmp	r0, #0
 801457a:	f43f af2c 	beq.w	80143d6 <pow+0xee>
 801457e:	2304      	movs	r3, #4
 8014580:	9302      	str	r3, [sp, #8]
 8014582:	4b09      	ldr	r3, [pc, #36]	; (80145a8 <pow+0x2c0>)
 8014584:	9303      	str	r3, [sp, #12]
 8014586:	2300      	movs	r3, #0
 8014588:	930a      	str	r3, [sp, #40]	; 0x28
 801458a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801458e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8014592:	ed8d 9b08 	vstr	d9, [sp, #32]
 8014596:	e7b8      	b.n	801450a <pow+0x222>
 8014598:	a802      	add	r0, sp, #8
 801459a:	f000 fe70 	bl	801527e <matherr>
 801459e:	2800      	cmp	r0, #0
 80145a0:	f47f af11 	bne.w	80143c6 <pow+0xde>
 80145a4:	e7b5      	b.n	8014512 <pow+0x22a>
 80145a6:	bf00      	nop
 80145a8:	08016c26 	.word	0x08016c26
 80145ac:	3ff00000 	.word	0x3ff00000
 80145b0:	fff00000 	.word	0xfff00000
 80145b4:	3fe00000 	.word	0x3fe00000
 80145b8:	47efffff 	.word	0x47efffff
 80145bc:	c7efffff 	.word	0xc7efffff
 80145c0:	7ff00000 	.word	0x7ff00000
 80145c4:	20002084 	.word	0x20002084

080145c8 <__ieee754_log10>:
 80145c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80145cc:	ec55 4b10 	vmov	r4, r5, d0
 80145d0:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 80145d4:	462b      	mov	r3, r5
 80145d6:	da2f      	bge.n	8014638 <__ieee754_log10+0x70>
 80145d8:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 80145dc:	4322      	orrs	r2, r4
 80145de:	d10a      	bne.n	80145f6 <__ieee754_log10+0x2e>
 80145e0:	493b      	ldr	r1, [pc, #236]	; (80146d0 <__ieee754_log10+0x108>)
 80145e2:	2200      	movs	r2, #0
 80145e4:	2300      	movs	r3, #0
 80145e6:	2000      	movs	r0, #0
 80145e8:	f7ec f958 	bl	800089c <__aeabi_ddiv>
 80145ec:	ec41 0b10 	vmov	d0, r0, r1
 80145f0:	b003      	add	sp, #12
 80145f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80145f6:	2d00      	cmp	r5, #0
 80145f8:	da08      	bge.n	801460c <__ieee754_log10+0x44>
 80145fa:	ee10 2a10 	vmov	r2, s0
 80145fe:	4620      	mov	r0, r4
 8014600:	4629      	mov	r1, r5
 8014602:	f7eb fe69 	bl	80002d8 <__aeabi_dsub>
 8014606:	2200      	movs	r2, #0
 8014608:	2300      	movs	r3, #0
 801460a:	e7ed      	b.n	80145e8 <__ieee754_log10+0x20>
 801460c:	2200      	movs	r2, #0
 801460e:	4b31      	ldr	r3, [pc, #196]	; (80146d4 <__ieee754_log10+0x10c>)
 8014610:	4629      	mov	r1, r5
 8014612:	ee10 0a10 	vmov	r0, s0
 8014616:	f7ec f817 	bl	8000648 <__aeabi_dmul>
 801461a:	f06f 0235 	mvn.w	r2, #53	; 0x35
 801461e:	4604      	mov	r4, r0
 8014620:	460d      	mov	r5, r1
 8014622:	460b      	mov	r3, r1
 8014624:	492c      	ldr	r1, [pc, #176]	; (80146d8 <__ieee754_log10+0x110>)
 8014626:	428b      	cmp	r3, r1
 8014628:	dd08      	ble.n	801463c <__ieee754_log10+0x74>
 801462a:	4622      	mov	r2, r4
 801462c:	462b      	mov	r3, r5
 801462e:	4620      	mov	r0, r4
 8014630:	4629      	mov	r1, r5
 8014632:	f7eb fe53 	bl	80002dc <__adddf3>
 8014636:	e7d9      	b.n	80145ec <__ieee754_log10+0x24>
 8014638:	2200      	movs	r2, #0
 801463a:	e7f3      	b.n	8014624 <__ieee754_log10+0x5c>
 801463c:	1518      	asrs	r0, r3, #20
 801463e:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8014642:	4410      	add	r0, r2
 8014644:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 8014648:	4448      	add	r0, r9
 801464a:	f3c3 0813 	ubfx	r8, r3, #0, #20
 801464e:	f7eb ff91 	bl	8000574 <__aeabi_i2d>
 8014652:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 8014656:	3303      	adds	r3, #3
 8014658:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 801465c:	ec45 4b10 	vmov	d0, r4, r5
 8014660:	4606      	mov	r6, r0
 8014662:	460f      	mov	r7, r1
 8014664:	f000 ff14 	bl	8015490 <__ieee754_log>
 8014668:	a313      	add	r3, pc, #76	; (adr r3, 80146b8 <__ieee754_log10+0xf0>)
 801466a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801466e:	4630      	mov	r0, r6
 8014670:	4639      	mov	r1, r7
 8014672:	ed8d 0b00 	vstr	d0, [sp]
 8014676:	f7eb ffe7 	bl	8000648 <__aeabi_dmul>
 801467a:	ed9d 0b00 	vldr	d0, [sp]
 801467e:	4604      	mov	r4, r0
 8014680:	460d      	mov	r5, r1
 8014682:	a30f      	add	r3, pc, #60	; (adr r3, 80146c0 <__ieee754_log10+0xf8>)
 8014684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014688:	ec51 0b10 	vmov	r0, r1, d0
 801468c:	f7eb ffdc 	bl	8000648 <__aeabi_dmul>
 8014690:	4602      	mov	r2, r0
 8014692:	460b      	mov	r3, r1
 8014694:	4620      	mov	r0, r4
 8014696:	4629      	mov	r1, r5
 8014698:	f7eb fe20 	bl	80002dc <__adddf3>
 801469c:	a30a      	add	r3, pc, #40	; (adr r3, 80146c8 <__ieee754_log10+0x100>)
 801469e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146a2:	4604      	mov	r4, r0
 80146a4:	460d      	mov	r5, r1
 80146a6:	4630      	mov	r0, r6
 80146a8:	4639      	mov	r1, r7
 80146aa:	f7eb ffcd 	bl	8000648 <__aeabi_dmul>
 80146ae:	4602      	mov	r2, r0
 80146b0:	460b      	mov	r3, r1
 80146b2:	4620      	mov	r0, r4
 80146b4:	4629      	mov	r1, r5
 80146b6:	e7bc      	b.n	8014632 <__ieee754_log10+0x6a>
 80146b8:	11f12b36 	.word	0x11f12b36
 80146bc:	3d59fef3 	.word	0x3d59fef3
 80146c0:	1526e50e 	.word	0x1526e50e
 80146c4:	3fdbcb7b 	.word	0x3fdbcb7b
 80146c8:	509f6000 	.word	0x509f6000
 80146cc:	3fd34413 	.word	0x3fd34413
 80146d0:	c3500000 	.word	0xc3500000
 80146d4:	43500000 	.word	0x43500000
 80146d8:	7fefffff 	.word	0x7fefffff
 80146dc:	00000000 	.word	0x00000000

080146e0 <__ieee754_pow>:
 80146e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80146e4:	b091      	sub	sp, #68	; 0x44
 80146e6:	ed8d 1b00 	vstr	d1, [sp]
 80146ea:	e9dd 2900 	ldrd	r2, r9, [sp]
 80146ee:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80146f2:	ea58 0302 	orrs.w	r3, r8, r2
 80146f6:	ec57 6b10 	vmov	r6, r7, d0
 80146fa:	f000 84be 	beq.w	801507a <__ieee754_pow+0x99a>
 80146fe:	4b7a      	ldr	r3, [pc, #488]	; (80148e8 <__ieee754_pow+0x208>)
 8014700:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8014704:	429c      	cmp	r4, r3
 8014706:	463d      	mov	r5, r7
 8014708:	ee10 aa10 	vmov	sl, s0
 801470c:	dc09      	bgt.n	8014722 <__ieee754_pow+0x42>
 801470e:	d103      	bne.n	8014718 <__ieee754_pow+0x38>
 8014710:	b93e      	cbnz	r6, 8014722 <__ieee754_pow+0x42>
 8014712:	45a0      	cmp	r8, r4
 8014714:	dc0d      	bgt.n	8014732 <__ieee754_pow+0x52>
 8014716:	e001      	b.n	801471c <__ieee754_pow+0x3c>
 8014718:	4598      	cmp	r8, r3
 801471a:	dc02      	bgt.n	8014722 <__ieee754_pow+0x42>
 801471c:	4598      	cmp	r8, r3
 801471e:	d10e      	bne.n	801473e <__ieee754_pow+0x5e>
 8014720:	b16a      	cbz	r2, 801473e <__ieee754_pow+0x5e>
 8014722:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8014726:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801472a:	ea54 030a 	orrs.w	r3, r4, sl
 801472e:	f000 84a4 	beq.w	801507a <__ieee754_pow+0x99a>
 8014732:	486e      	ldr	r0, [pc, #440]	; (80148ec <__ieee754_pow+0x20c>)
 8014734:	b011      	add	sp, #68	; 0x44
 8014736:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801473a:	f000 bda5 	b.w	8015288 <nan>
 801473e:	2d00      	cmp	r5, #0
 8014740:	da53      	bge.n	80147ea <__ieee754_pow+0x10a>
 8014742:	4b6b      	ldr	r3, [pc, #428]	; (80148f0 <__ieee754_pow+0x210>)
 8014744:	4598      	cmp	r8, r3
 8014746:	dc4d      	bgt.n	80147e4 <__ieee754_pow+0x104>
 8014748:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801474c:	4598      	cmp	r8, r3
 801474e:	dd4c      	ble.n	80147ea <__ieee754_pow+0x10a>
 8014750:	ea4f 5328 	mov.w	r3, r8, asr #20
 8014754:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8014758:	2b14      	cmp	r3, #20
 801475a:	dd26      	ble.n	80147aa <__ieee754_pow+0xca>
 801475c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8014760:	fa22 f103 	lsr.w	r1, r2, r3
 8014764:	fa01 f303 	lsl.w	r3, r1, r3
 8014768:	4293      	cmp	r3, r2
 801476a:	d13e      	bne.n	80147ea <__ieee754_pow+0x10a>
 801476c:	f001 0101 	and.w	r1, r1, #1
 8014770:	f1c1 0b02 	rsb	fp, r1, #2
 8014774:	2a00      	cmp	r2, #0
 8014776:	d15b      	bne.n	8014830 <__ieee754_pow+0x150>
 8014778:	4b5b      	ldr	r3, [pc, #364]	; (80148e8 <__ieee754_pow+0x208>)
 801477a:	4598      	cmp	r8, r3
 801477c:	d124      	bne.n	80147c8 <__ieee754_pow+0xe8>
 801477e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8014782:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8014786:	ea53 030a 	orrs.w	r3, r3, sl
 801478a:	f000 8476 	beq.w	801507a <__ieee754_pow+0x99a>
 801478e:	4b59      	ldr	r3, [pc, #356]	; (80148f4 <__ieee754_pow+0x214>)
 8014790:	429c      	cmp	r4, r3
 8014792:	dd2d      	ble.n	80147f0 <__ieee754_pow+0x110>
 8014794:	f1b9 0f00 	cmp.w	r9, #0
 8014798:	f280 8473 	bge.w	8015082 <__ieee754_pow+0x9a2>
 801479c:	2000      	movs	r0, #0
 801479e:	2100      	movs	r1, #0
 80147a0:	ec41 0b10 	vmov	d0, r0, r1
 80147a4:	b011      	add	sp, #68	; 0x44
 80147a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80147aa:	2a00      	cmp	r2, #0
 80147ac:	d13e      	bne.n	801482c <__ieee754_pow+0x14c>
 80147ae:	f1c3 0314 	rsb	r3, r3, #20
 80147b2:	fa48 f103 	asr.w	r1, r8, r3
 80147b6:	fa01 f303 	lsl.w	r3, r1, r3
 80147ba:	4543      	cmp	r3, r8
 80147bc:	f040 8469 	bne.w	8015092 <__ieee754_pow+0x9b2>
 80147c0:	f001 0101 	and.w	r1, r1, #1
 80147c4:	f1c1 0b02 	rsb	fp, r1, #2
 80147c8:	4b4b      	ldr	r3, [pc, #300]	; (80148f8 <__ieee754_pow+0x218>)
 80147ca:	4598      	cmp	r8, r3
 80147cc:	d118      	bne.n	8014800 <__ieee754_pow+0x120>
 80147ce:	f1b9 0f00 	cmp.w	r9, #0
 80147d2:	f280 845a 	bge.w	801508a <__ieee754_pow+0x9aa>
 80147d6:	4948      	ldr	r1, [pc, #288]	; (80148f8 <__ieee754_pow+0x218>)
 80147d8:	4632      	mov	r2, r6
 80147da:	463b      	mov	r3, r7
 80147dc:	2000      	movs	r0, #0
 80147de:	f7ec f85d 	bl	800089c <__aeabi_ddiv>
 80147e2:	e7dd      	b.n	80147a0 <__ieee754_pow+0xc0>
 80147e4:	f04f 0b02 	mov.w	fp, #2
 80147e8:	e7c4      	b.n	8014774 <__ieee754_pow+0x94>
 80147ea:	f04f 0b00 	mov.w	fp, #0
 80147ee:	e7c1      	b.n	8014774 <__ieee754_pow+0x94>
 80147f0:	f1b9 0f00 	cmp.w	r9, #0
 80147f4:	dad2      	bge.n	801479c <__ieee754_pow+0xbc>
 80147f6:	e9dd 0300 	ldrd	r0, r3, [sp]
 80147fa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80147fe:	e7cf      	b.n	80147a0 <__ieee754_pow+0xc0>
 8014800:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8014804:	d106      	bne.n	8014814 <__ieee754_pow+0x134>
 8014806:	4632      	mov	r2, r6
 8014808:	463b      	mov	r3, r7
 801480a:	4610      	mov	r0, r2
 801480c:	4619      	mov	r1, r3
 801480e:	f7eb ff1b 	bl	8000648 <__aeabi_dmul>
 8014812:	e7c5      	b.n	80147a0 <__ieee754_pow+0xc0>
 8014814:	4b39      	ldr	r3, [pc, #228]	; (80148fc <__ieee754_pow+0x21c>)
 8014816:	4599      	cmp	r9, r3
 8014818:	d10a      	bne.n	8014830 <__ieee754_pow+0x150>
 801481a:	2d00      	cmp	r5, #0
 801481c:	db08      	blt.n	8014830 <__ieee754_pow+0x150>
 801481e:	ec47 6b10 	vmov	d0, r6, r7
 8014822:	b011      	add	sp, #68	; 0x44
 8014824:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014828:	f000 bc68 	b.w	80150fc <__ieee754_sqrt>
 801482c:	f04f 0b00 	mov.w	fp, #0
 8014830:	ec47 6b10 	vmov	d0, r6, r7
 8014834:	f000 fd12 	bl	801525c <fabs>
 8014838:	ec51 0b10 	vmov	r0, r1, d0
 801483c:	f1ba 0f00 	cmp.w	sl, #0
 8014840:	d127      	bne.n	8014892 <__ieee754_pow+0x1b2>
 8014842:	b124      	cbz	r4, 801484e <__ieee754_pow+0x16e>
 8014844:	4b2c      	ldr	r3, [pc, #176]	; (80148f8 <__ieee754_pow+0x218>)
 8014846:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801484a:	429a      	cmp	r2, r3
 801484c:	d121      	bne.n	8014892 <__ieee754_pow+0x1b2>
 801484e:	f1b9 0f00 	cmp.w	r9, #0
 8014852:	da05      	bge.n	8014860 <__ieee754_pow+0x180>
 8014854:	4602      	mov	r2, r0
 8014856:	460b      	mov	r3, r1
 8014858:	2000      	movs	r0, #0
 801485a:	4927      	ldr	r1, [pc, #156]	; (80148f8 <__ieee754_pow+0x218>)
 801485c:	f7ec f81e 	bl	800089c <__aeabi_ddiv>
 8014860:	2d00      	cmp	r5, #0
 8014862:	da9d      	bge.n	80147a0 <__ieee754_pow+0xc0>
 8014864:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8014868:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801486c:	ea54 030b 	orrs.w	r3, r4, fp
 8014870:	d108      	bne.n	8014884 <__ieee754_pow+0x1a4>
 8014872:	4602      	mov	r2, r0
 8014874:	460b      	mov	r3, r1
 8014876:	4610      	mov	r0, r2
 8014878:	4619      	mov	r1, r3
 801487a:	f7eb fd2d 	bl	80002d8 <__aeabi_dsub>
 801487e:	4602      	mov	r2, r0
 8014880:	460b      	mov	r3, r1
 8014882:	e7ac      	b.n	80147de <__ieee754_pow+0xfe>
 8014884:	f1bb 0f01 	cmp.w	fp, #1
 8014888:	d18a      	bne.n	80147a0 <__ieee754_pow+0xc0>
 801488a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801488e:	4619      	mov	r1, r3
 8014890:	e786      	b.n	80147a0 <__ieee754_pow+0xc0>
 8014892:	0fed      	lsrs	r5, r5, #31
 8014894:	1e6b      	subs	r3, r5, #1
 8014896:	930d      	str	r3, [sp, #52]	; 0x34
 8014898:	ea5b 0303 	orrs.w	r3, fp, r3
 801489c:	d102      	bne.n	80148a4 <__ieee754_pow+0x1c4>
 801489e:	4632      	mov	r2, r6
 80148a0:	463b      	mov	r3, r7
 80148a2:	e7e8      	b.n	8014876 <__ieee754_pow+0x196>
 80148a4:	4b16      	ldr	r3, [pc, #88]	; (8014900 <__ieee754_pow+0x220>)
 80148a6:	4598      	cmp	r8, r3
 80148a8:	f340 80fe 	ble.w	8014aa8 <__ieee754_pow+0x3c8>
 80148ac:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80148b0:	4598      	cmp	r8, r3
 80148b2:	dd0a      	ble.n	80148ca <__ieee754_pow+0x1ea>
 80148b4:	4b0f      	ldr	r3, [pc, #60]	; (80148f4 <__ieee754_pow+0x214>)
 80148b6:	429c      	cmp	r4, r3
 80148b8:	dc0d      	bgt.n	80148d6 <__ieee754_pow+0x1f6>
 80148ba:	f1b9 0f00 	cmp.w	r9, #0
 80148be:	f6bf af6d 	bge.w	801479c <__ieee754_pow+0xbc>
 80148c2:	a307      	add	r3, pc, #28	; (adr r3, 80148e0 <__ieee754_pow+0x200>)
 80148c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148c8:	e79f      	b.n	801480a <__ieee754_pow+0x12a>
 80148ca:	4b0e      	ldr	r3, [pc, #56]	; (8014904 <__ieee754_pow+0x224>)
 80148cc:	429c      	cmp	r4, r3
 80148ce:	ddf4      	ble.n	80148ba <__ieee754_pow+0x1da>
 80148d0:	4b09      	ldr	r3, [pc, #36]	; (80148f8 <__ieee754_pow+0x218>)
 80148d2:	429c      	cmp	r4, r3
 80148d4:	dd18      	ble.n	8014908 <__ieee754_pow+0x228>
 80148d6:	f1b9 0f00 	cmp.w	r9, #0
 80148da:	dcf2      	bgt.n	80148c2 <__ieee754_pow+0x1e2>
 80148dc:	e75e      	b.n	801479c <__ieee754_pow+0xbc>
 80148de:	bf00      	nop
 80148e0:	8800759c 	.word	0x8800759c
 80148e4:	7e37e43c 	.word	0x7e37e43c
 80148e8:	7ff00000 	.word	0x7ff00000
 80148ec:	08016b09 	.word	0x08016b09
 80148f0:	433fffff 	.word	0x433fffff
 80148f4:	3fefffff 	.word	0x3fefffff
 80148f8:	3ff00000 	.word	0x3ff00000
 80148fc:	3fe00000 	.word	0x3fe00000
 8014900:	41e00000 	.word	0x41e00000
 8014904:	3feffffe 	.word	0x3feffffe
 8014908:	2200      	movs	r2, #0
 801490a:	4b63      	ldr	r3, [pc, #396]	; (8014a98 <__ieee754_pow+0x3b8>)
 801490c:	f7eb fce4 	bl	80002d8 <__aeabi_dsub>
 8014910:	a355      	add	r3, pc, #340	; (adr r3, 8014a68 <__ieee754_pow+0x388>)
 8014912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014916:	4604      	mov	r4, r0
 8014918:	460d      	mov	r5, r1
 801491a:	f7eb fe95 	bl	8000648 <__aeabi_dmul>
 801491e:	a354      	add	r3, pc, #336	; (adr r3, 8014a70 <__ieee754_pow+0x390>)
 8014920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014924:	4606      	mov	r6, r0
 8014926:	460f      	mov	r7, r1
 8014928:	4620      	mov	r0, r4
 801492a:	4629      	mov	r1, r5
 801492c:	f7eb fe8c 	bl	8000648 <__aeabi_dmul>
 8014930:	2200      	movs	r2, #0
 8014932:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014936:	4b59      	ldr	r3, [pc, #356]	; (8014a9c <__ieee754_pow+0x3bc>)
 8014938:	4620      	mov	r0, r4
 801493a:	4629      	mov	r1, r5
 801493c:	f7eb fe84 	bl	8000648 <__aeabi_dmul>
 8014940:	4602      	mov	r2, r0
 8014942:	460b      	mov	r3, r1
 8014944:	a14c      	add	r1, pc, #304	; (adr r1, 8014a78 <__ieee754_pow+0x398>)
 8014946:	e9d1 0100 	ldrd	r0, r1, [r1]
 801494a:	f7eb fcc5 	bl	80002d8 <__aeabi_dsub>
 801494e:	4622      	mov	r2, r4
 8014950:	462b      	mov	r3, r5
 8014952:	f7eb fe79 	bl	8000648 <__aeabi_dmul>
 8014956:	4602      	mov	r2, r0
 8014958:	460b      	mov	r3, r1
 801495a:	2000      	movs	r0, #0
 801495c:	4950      	ldr	r1, [pc, #320]	; (8014aa0 <__ieee754_pow+0x3c0>)
 801495e:	f7eb fcbb 	bl	80002d8 <__aeabi_dsub>
 8014962:	4622      	mov	r2, r4
 8014964:	462b      	mov	r3, r5
 8014966:	4680      	mov	r8, r0
 8014968:	4689      	mov	r9, r1
 801496a:	4620      	mov	r0, r4
 801496c:	4629      	mov	r1, r5
 801496e:	f7eb fe6b 	bl	8000648 <__aeabi_dmul>
 8014972:	4602      	mov	r2, r0
 8014974:	460b      	mov	r3, r1
 8014976:	4640      	mov	r0, r8
 8014978:	4649      	mov	r1, r9
 801497a:	f7eb fe65 	bl	8000648 <__aeabi_dmul>
 801497e:	a340      	add	r3, pc, #256	; (adr r3, 8014a80 <__ieee754_pow+0x3a0>)
 8014980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014984:	f7eb fe60 	bl	8000648 <__aeabi_dmul>
 8014988:	4602      	mov	r2, r0
 801498a:	460b      	mov	r3, r1
 801498c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014990:	f7eb fca2 	bl	80002d8 <__aeabi_dsub>
 8014994:	4602      	mov	r2, r0
 8014996:	460b      	mov	r3, r1
 8014998:	4604      	mov	r4, r0
 801499a:	460d      	mov	r5, r1
 801499c:	4630      	mov	r0, r6
 801499e:	4639      	mov	r1, r7
 80149a0:	f7eb fc9c 	bl	80002dc <__adddf3>
 80149a4:	2000      	movs	r0, #0
 80149a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80149aa:	4632      	mov	r2, r6
 80149ac:	463b      	mov	r3, r7
 80149ae:	f7eb fc93 	bl	80002d8 <__aeabi_dsub>
 80149b2:	4602      	mov	r2, r0
 80149b4:	460b      	mov	r3, r1
 80149b6:	4620      	mov	r0, r4
 80149b8:	4629      	mov	r1, r5
 80149ba:	f7eb fc8d 	bl	80002d8 <__aeabi_dsub>
 80149be:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80149c0:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 80149c4:	4313      	orrs	r3, r2
 80149c6:	4606      	mov	r6, r0
 80149c8:	460f      	mov	r7, r1
 80149ca:	f040 81eb 	bne.w	8014da4 <__ieee754_pow+0x6c4>
 80149ce:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8014a88 <__ieee754_pow+0x3a8>
 80149d2:	e9dd 4500 	ldrd	r4, r5, [sp]
 80149d6:	2400      	movs	r4, #0
 80149d8:	4622      	mov	r2, r4
 80149da:	462b      	mov	r3, r5
 80149dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80149e0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80149e4:	f7eb fc78 	bl	80002d8 <__aeabi_dsub>
 80149e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80149ec:	f7eb fe2c 	bl	8000648 <__aeabi_dmul>
 80149f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80149f4:	4680      	mov	r8, r0
 80149f6:	4689      	mov	r9, r1
 80149f8:	4630      	mov	r0, r6
 80149fa:	4639      	mov	r1, r7
 80149fc:	f7eb fe24 	bl	8000648 <__aeabi_dmul>
 8014a00:	4602      	mov	r2, r0
 8014a02:	460b      	mov	r3, r1
 8014a04:	4640      	mov	r0, r8
 8014a06:	4649      	mov	r1, r9
 8014a08:	f7eb fc68 	bl	80002dc <__adddf3>
 8014a0c:	4622      	mov	r2, r4
 8014a0e:	462b      	mov	r3, r5
 8014a10:	4680      	mov	r8, r0
 8014a12:	4689      	mov	r9, r1
 8014a14:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014a18:	f7eb fe16 	bl	8000648 <__aeabi_dmul>
 8014a1c:	460b      	mov	r3, r1
 8014a1e:	4604      	mov	r4, r0
 8014a20:	460d      	mov	r5, r1
 8014a22:	4602      	mov	r2, r0
 8014a24:	4649      	mov	r1, r9
 8014a26:	4640      	mov	r0, r8
 8014a28:	e9cd 4500 	strd	r4, r5, [sp]
 8014a2c:	f7eb fc56 	bl	80002dc <__adddf3>
 8014a30:	4b1c      	ldr	r3, [pc, #112]	; (8014aa4 <__ieee754_pow+0x3c4>)
 8014a32:	4299      	cmp	r1, r3
 8014a34:	4606      	mov	r6, r0
 8014a36:	460f      	mov	r7, r1
 8014a38:	468b      	mov	fp, r1
 8014a3a:	f340 82f7 	ble.w	801502c <__ieee754_pow+0x94c>
 8014a3e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8014a42:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8014a46:	4303      	orrs	r3, r0
 8014a48:	f000 81ea 	beq.w	8014e20 <__ieee754_pow+0x740>
 8014a4c:	a310      	add	r3, pc, #64	; (adr r3, 8014a90 <__ieee754_pow+0x3b0>)
 8014a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014a56:	f7eb fdf7 	bl	8000648 <__aeabi_dmul>
 8014a5a:	a30d      	add	r3, pc, #52	; (adr r3, 8014a90 <__ieee754_pow+0x3b0>)
 8014a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a60:	e6d5      	b.n	801480e <__ieee754_pow+0x12e>
 8014a62:	bf00      	nop
 8014a64:	f3af 8000 	nop.w
 8014a68:	60000000 	.word	0x60000000
 8014a6c:	3ff71547 	.word	0x3ff71547
 8014a70:	f85ddf44 	.word	0xf85ddf44
 8014a74:	3e54ae0b 	.word	0x3e54ae0b
 8014a78:	55555555 	.word	0x55555555
 8014a7c:	3fd55555 	.word	0x3fd55555
 8014a80:	652b82fe 	.word	0x652b82fe
 8014a84:	3ff71547 	.word	0x3ff71547
 8014a88:	00000000 	.word	0x00000000
 8014a8c:	bff00000 	.word	0xbff00000
 8014a90:	8800759c 	.word	0x8800759c
 8014a94:	7e37e43c 	.word	0x7e37e43c
 8014a98:	3ff00000 	.word	0x3ff00000
 8014a9c:	3fd00000 	.word	0x3fd00000
 8014aa0:	3fe00000 	.word	0x3fe00000
 8014aa4:	408fffff 	.word	0x408fffff
 8014aa8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8014aac:	f04f 0200 	mov.w	r2, #0
 8014ab0:	da05      	bge.n	8014abe <__ieee754_pow+0x3de>
 8014ab2:	4bd3      	ldr	r3, [pc, #844]	; (8014e00 <__ieee754_pow+0x720>)
 8014ab4:	f7eb fdc8 	bl	8000648 <__aeabi_dmul>
 8014ab8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8014abc:	460c      	mov	r4, r1
 8014abe:	1523      	asrs	r3, r4, #20
 8014ac0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8014ac4:	4413      	add	r3, r2
 8014ac6:	9309      	str	r3, [sp, #36]	; 0x24
 8014ac8:	4bce      	ldr	r3, [pc, #824]	; (8014e04 <__ieee754_pow+0x724>)
 8014aca:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8014ace:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8014ad2:	429c      	cmp	r4, r3
 8014ad4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8014ad8:	dd08      	ble.n	8014aec <__ieee754_pow+0x40c>
 8014ada:	4bcb      	ldr	r3, [pc, #812]	; (8014e08 <__ieee754_pow+0x728>)
 8014adc:	429c      	cmp	r4, r3
 8014ade:	f340 815e 	ble.w	8014d9e <__ieee754_pow+0x6be>
 8014ae2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014ae4:	3301      	adds	r3, #1
 8014ae6:	9309      	str	r3, [sp, #36]	; 0x24
 8014ae8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8014aec:	f04f 0a00 	mov.w	sl, #0
 8014af0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8014af4:	930c      	str	r3, [sp, #48]	; 0x30
 8014af6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014af8:	4bc4      	ldr	r3, [pc, #784]	; (8014e0c <__ieee754_pow+0x72c>)
 8014afa:	4413      	add	r3, r2
 8014afc:	ed93 7b00 	vldr	d7, [r3]
 8014b00:	4629      	mov	r1, r5
 8014b02:	ec53 2b17 	vmov	r2, r3, d7
 8014b06:	ed8d 7b06 	vstr	d7, [sp, #24]
 8014b0a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8014b0e:	f7eb fbe3 	bl	80002d8 <__aeabi_dsub>
 8014b12:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8014b16:	4606      	mov	r6, r0
 8014b18:	460f      	mov	r7, r1
 8014b1a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014b1e:	f7eb fbdd 	bl	80002dc <__adddf3>
 8014b22:	4602      	mov	r2, r0
 8014b24:	460b      	mov	r3, r1
 8014b26:	2000      	movs	r0, #0
 8014b28:	49b9      	ldr	r1, [pc, #740]	; (8014e10 <__ieee754_pow+0x730>)
 8014b2a:	f7eb feb7 	bl	800089c <__aeabi_ddiv>
 8014b2e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8014b32:	4602      	mov	r2, r0
 8014b34:	460b      	mov	r3, r1
 8014b36:	4630      	mov	r0, r6
 8014b38:	4639      	mov	r1, r7
 8014b3a:	f7eb fd85 	bl	8000648 <__aeabi_dmul>
 8014b3e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014b42:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8014b46:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8014b4a:	2300      	movs	r3, #0
 8014b4c:	9302      	str	r3, [sp, #8]
 8014b4e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8014b52:	106d      	asrs	r5, r5, #1
 8014b54:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8014b58:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8014b5c:	2200      	movs	r2, #0
 8014b5e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8014b62:	4640      	mov	r0, r8
 8014b64:	4649      	mov	r1, r9
 8014b66:	4614      	mov	r4, r2
 8014b68:	461d      	mov	r5, r3
 8014b6a:	f7eb fd6d 	bl	8000648 <__aeabi_dmul>
 8014b6e:	4602      	mov	r2, r0
 8014b70:	460b      	mov	r3, r1
 8014b72:	4630      	mov	r0, r6
 8014b74:	4639      	mov	r1, r7
 8014b76:	f7eb fbaf 	bl	80002d8 <__aeabi_dsub>
 8014b7a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014b7e:	4606      	mov	r6, r0
 8014b80:	460f      	mov	r7, r1
 8014b82:	4620      	mov	r0, r4
 8014b84:	4629      	mov	r1, r5
 8014b86:	f7eb fba7 	bl	80002d8 <__aeabi_dsub>
 8014b8a:	4602      	mov	r2, r0
 8014b8c:	460b      	mov	r3, r1
 8014b8e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014b92:	f7eb fba1 	bl	80002d8 <__aeabi_dsub>
 8014b96:	4642      	mov	r2, r8
 8014b98:	464b      	mov	r3, r9
 8014b9a:	f7eb fd55 	bl	8000648 <__aeabi_dmul>
 8014b9e:	4602      	mov	r2, r0
 8014ba0:	460b      	mov	r3, r1
 8014ba2:	4630      	mov	r0, r6
 8014ba4:	4639      	mov	r1, r7
 8014ba6:	f7eb fb97 	bl	80002d8 <__aeabi_dsub>
 8014baa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8014bae:	f7eb fd4b 	bl	8000648 <__aeabi_dmul>
 8014bb2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014bb6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8014bba:	4610      	mov	r0, r2
 8014bbc:	4619      	mov	r1, r3
 8014bbe:	f7eb fd43 	bl	8000648 <__aeabi_dmul>
 8014bc2:	a37b      	add	r3, pc, #492	; (adr r3, 8014db0 <__ieee754_pow+0x6d0>)
 8014bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014bc8:	4604      	mov	r4, r0
 8014bca:	460d      	mov	r5, r1
 8014bcc:	f7eb fd3c 	bl	8000648 <__aeabi_dmul>
 8014bd0:	a379      	add	r3, pc, #484	; (adr r3, 8014db8 <__ieee754_pow+0x6d8>)
 8014bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014bd6:	f7eb fb81 	bl	80002dc <__adddf3>
 8014bda:	4622      	mov	r2, r4
 8014bdc:	462b      	mov	r3, r5
 8014bde:	f7eb fd33 	bl	8000648 <__aeabi_dmul>
 8014be2:	a377      	add	r3, pc, #476	; (adr r3, 8014dc0 <__ieee754_pow+0x6e0>)
 8014be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014be8:	f7eb fb78 	bl	80002dc <__adddf3>
 8014bec:	4622      	mov	r2, r4
 8014bee:	462b      	mov	r3, r5
 8014bf0:	f7eb fd2a 	bl	8000648 <__aeabi_dmul>
 8014bf4:	a374      	add	r3, pc, #464	; (adr r3, 8014dc8 <__ieee754_pow+0x6e8>)
 8014bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014bfa:	f7eb fb6f 	bl	80002dc <__adddf3>
 8014bfe:	4622      	mov	r2, r4
 8014c00:	462b      	mov	r3, r5
 8014c02:	f7eb fd21 	bl	8000648 <__aeabi_dmul>
 8014c06:	a372      	add	r3, pc, #456	; (adr r3, 8014dd0 <__ieee754_pow+0x6f0>)
 8014c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c0c:	f7eb fb66 	bl	80002dc <__adddf3>
 8014c10:	4622      	mov	r2, r4
 8014c12:	462b      	mov	r3, r5
 8014c14:	f7eb fd18 	bl	8000648 <__aeabi_dmul>
 8014c18:	a36f      	add	r3, pc, #444	; (adr r3, 8014dd8 <__ieee754_pow+0x6f8>)
 8014c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c1e:	f7eb fb5d 	bl	80002dc <__adddf3>
 8014c22:	4622      	mov	r2, r4
 8014c24:	4606      	mov	r6, r0
 8014c26:	460f      	mov	r7, r1
 8014c28:	462b      	mov	r3, r5
 8014c2a:	4620      	mov	r0, r4
 8014c2c:	4629      	mov	r1, r5
 8014c2e:	f7eb fd0b 	bl	8000648 <__aeabi_dmul>
 8014c32:	4602      	mov	r2, r0
 8014c34:	460b      	mov	r3, r1
 8014c36:	4630      	mov	r0, r6
 8014c38:	4639      	mov	r1, r7
 8014c3a:	f7eb fd05 	bl	8000648 <__aeabi_dmul>
 8014c3e:	4642      	mov	r2, r8
 8014c40:	4604      	mov	r4, r0
 8014c42:	460d      	mov	r5, r1
 8014c44:	464b      	mov	r3, r9
 8014c46:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014c4a:	f7eb fb47 	bl	80002dc <__adddf3>
 8014c4e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014c52:	f7eb fcf9 	bl	8000648 <__aeabi_dmul>
 8014c56:	4622      	mov	r2, r4
 8014c58:	462b      	mov	r3, r5
 8014c5a:	f7eb fb3f 	bl	80002dc <__adddf3>
 8014c5e:	4642      	mov	r2, r8
 8014c60:	4606      	mov	r6, r0
 8014c62:	460f      	mov	r7, r1
 8014c64:	464b      	mov	r3, r9
 8014c66:	4640      	mov	r0, r8
 8014c68:	4649      	mov	r1, r9
 8014c6a:	f7eb fced 	bl	8000648 <__aeabi_dmul>
 8014c6e:	2200      	movs	r2, #0
 8014c70:	4b68      	ldr	r3, [pc, #416]	; (8014e14 <__ieee754_pow+0x734>)
 8014c72:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8014c76:	f7eb fb31 	bl	80002dc <__adddf3>
 8014c7a:	4632      	mov	r2, r6
 8014c7c:	463b      	mov	r3, r7
 8014c7e:	f7eb fb2d 	bl	80002dc <__adddf3>
 8014c82:	9802      	ldr	r0, [sp, #8]
 8014c84:	460d      	mov	r5, r1
 8014c86:	4604      	mov	r4, r0
 8014c88:	4602      	mov	r2, r0
 8014c8a:	460b      	mov	r3, r1
 8014c8c:	4640      	mov	r0, r8
 8014c8e:	4649      	mov	r1, r9
 8014c90:	f7eb fcda 	bl	8000648 <__aeabi_dmul>
 8014c94:	2200      	movs	r2, #0
 8014c96:	4680      	mov	r8, r0
 8014c98:	4689      	mov	r9, r1
 8014c9a:	4b5e      	ldr	r3, [pc, #376]	; (8014e14 <__ieee754_pow+0x734>)
 8014c9c:	4620      	mov	r0, r4
 8014c9e:	4629      	mov	r1, r5
 8014ca0:	f7eb fb1a 	bl	80002d8 <__aeabi_dsub>
 8014ca4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8014ca8:	f7eb fb16 	bl	80002d8 <__aeabi_dsub>
 8014cac:	4602      	mov	r2, r0
 8014cae:	460b      	mov	r3, r1
 8014cb0:	4630      	mov	r0, r6
 8014cb2:	4639      	mov	r1, r7
 8014cb4:	f7eb fb10 	bl	80002d8 <__aeabi_dsub>
 8014cb8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014cbc:	f7eb fcc4 	bl	8000648 <__aeabi_dmul>
 8014cc0:	4622      	mov	r2, r4
 8014cc2:	4606      	mov	r6, r0
 8014cc4:	460f      	mov	r7, r1
 8014cc6:	462b      	mov	r3, r5
 8014cc8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014ccc:	f7eb fcbc 	bl	8000648 <__aeabi_dmul>
 8014cd0:	4602      	mov	r2, r0
 8014cd2:	460b      	mov	r3, r1
 8014cd4:	4630      	mov	r0, r6
 8014cd6:	4639      	mov	r1, r7
 8014cd8:	f7eb fb00 	bl	80002dc <__adddf3>
 8014cdc:	4606      	mov	r6, r0
 8014cde:	460f      	mov	r7, r1
 8014ce0:	4602      	mov	r2, r0
 8014ce2:	460b      	mov	r3, r1
 8014ce4:	4640      	mov	r0, r8
 8014ce6:	4649      	mov	r1, r9
 8014ce8:	f7eb faf8 	bl	80002dc <__adddf3>
 8014cec:	9802      	ldr	r0, [sp, #8]
 8014cee:	a33c      	add	r3, pc, #240	; (adr r3, 8014de0 <__ieee754_pow+0x700>)
 8014cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cf4:	4604      	mov	r4, r0
 8014cf6:	460d      	mov	r5, r1
 8014cf8:	f7eb fca6 	bl	8000648 <__aeabi_dmul>
 8014cfc:	4642      	mov	r2, r8
 8014cfe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8014d02:	464b      	mov	r3, r9
 8014d04:	4620      	mov	r0, r4
 8014d06:	4629      	mov	r1, r5
 8014d08:	f7eb fae6 	bl	80002d8 <__aeabi_dsub>
 8014d0c:	4602      	mov	r2, r0
 8014d0e:	460b      	mov	r3, r1
 8014d10:	4630      	mov	r0, r6
 8014d12:	4639      	mov	r1, r7
 8014d14:	f7eb fae0 	bl	80002d8 <__aeabi_dsub>
 8014d18:	a333      	add	r3, pc, #204	; (adr r3, 8014de8 <__ieee754_pow+0x708>)
 8014d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d1e:	f7eb fc93 	bl	8000648 <__aeabi_dmul>
 8014d22:	a333      	add	r3, pc, #204	; (adr r3, 8014df0 <__ieee754_pow+0x710>)
 8014d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d28:	4606      	mov	r6, r0
 8014d2a:	460f      	mov	r7, r1
 8014d2c:	4620      	mov	r0, r4
 8014d2e:	4629      	mov	r1, r5
 8014d30:	f7eb fc8a 	bl	8000648 <__aeabi_dmul>
 8014d34:	4602      	mov	r2, r0
 8014d36:	460b      	mov	r3, r1
 8014d38:	4630      	mov	r0, r6
 8014d3a:	4639      	mov	r1, r7
 8014d3c:	f7eb face 	bl	80002dc <__adddf3>
 8014d40:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014d42:	4b35      	ldr	r3, [pc, #212]	; (8014e18 <__ieee754_pow+0x738>)
 8014d44:	4413      	add	r3, r2
 8014d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d4a:	f7eb fac7 	bl	80002dc <__adddf3>
 8014d4e:	4604      	mov	r4, r0
 8014d50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014d52:	460d      	mov	r5, r1
 8014d54:	f7eb fc0e 	bl	8000574 <__aeabi_i2d>
 8014d58:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014d5a:	4b30      	ldr	r3, [pc, #192]	; (8014e1c <__ieee754_pow+0x73c>)
 8014d5c:	4413      	add	r3, r2
 8014d5e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014d62:	4606      	mov	r6, r0
 8014d64:	460f      	mov	r7, r1
 8014d66:	4622      	mov	r2, r4
 8014d68:	462b      	mov	r3, r5
 8014d6a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014d6e:	f7eb fab5 	bl	80002dc <__adddf3>
 8014d72:	4642      	mov	r2, r8
 8014d74:	464b      	mov	r3, r9
 8014d76:	f7eb fab1 	bl	80002dc <__adddf3>
 8014d7a:	4632      	mov	r2, r6
 8014d7c:	463b      	mov	r3, r7
 8014d7e:	f7eb faad 	bl	80002dc <__adddf3>
 8014d82:	9802      	ldr	r0, [sp, #8]
 8014d84:	4632      	mov	r2, r6
 8014d86:	463b      	mov	r3, r7
 8014d88:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014d8c:	f7eb faa4 	bl	80002d8 <__aeabi_dsub>
 8014d90:	4642      	mov	r2, r8
 8014d92:	464b      	mov	r3, r9
 8014d94:	f7eb faa0 	bl	80002d8 <__aeabi_dsub>
 8014d98:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014d9c:	e607      	b.n	80149ae <__ieee754_pow+0x2ce>
 8014d9e:	f04f 0a01 	mov.w	sl, #1
 8014da2:	e6a5      	b.n	8014af0 <__ieee754_pow+0x410>
 8014da4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8014df8 <__ieee754_pow+0x718>
 8014da8:	e613      	b.n	80149d2 <__ieee754_pow+0x2f2>
 8014daa:	bf00      	nop
 8014dac:	f3af 8000 	nop.w
 8014db0:	4a454eef 	.word	0x4a454eef
 8014db4:	3fca7e28 	.word	0x3fca7e28
 8014db8:	93c9db65 	.word	0x93c9db65
 8014dbc:	3fcd864a 	.word	0x3fcd864a
 8014dc0:	a91d4101 	.word	0xa91d4101
 8014dc4:	3fd17460 	.word	0x3fd17460
 8014dc8:	518f264d 	.word	0x518f264d
 8014dcc:	3fd55555 	.word	0x3fd55555
 8014dd0:	db6fabff 	.word	0xdb6fabff
 8014dd4:	3fdb6db6 	.word	0x3fdb6db6
 8014dd8:	33333303 	.word	0x33333303
 8014ddc:	3fe33333 	.word	0x3fe33333
 8014de0:	e0000000 	.word	0xe0000000
 8014de4:	3feec709 	.word	0x3feec709
 8014de8:	dc3a03fd 	.word	0xdc3a03fd
 8014dec:	3feec709 	.word	0x3feec709
 8014df0:	145b01f5 	.word	0x145b01f5
 8014df4:	be3e2fe0 	.word	0xbe3e2fe0
 8014df8:	00000000 	.word	0x00000000
 8014dfc:	3ff00000 	.word	0x3ff00000
 8014e00:	43400000 	.word	0x43400000
 8014e04:	0003988e 	.word	0x0003988e
 8014e08:	000bb679 	.word	0x000bb679
 8014e0c:	08016c30 	.word	0x08016c30
 8014e10:	3ff00000 	.word	0x3ff00000
 8014e14:	40080000 	.word	0x40080000
 8014e18:	08016c50 	.word	0x08016c50
 8014e1c:	08016c40 	.word	0x08016c40
 8014e20:	a3b4      	add	r3, pc, #720	; (adr r3, 80150f4 <__ieee754_pow+0xa14>)
 8014e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e26:	4640      	mov	r0, r8
 8014e28:	4649      	mov	r1, r9
 8014e2a:	f7eb fa57 	bl	80002dc <__adddf3>
 8014e2e:	4622      	mov	r2, r4
 8014e30:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014e34:	462b      	mov	r3, r5
 8014e36:	4630      	mov	r0, r6
 8014e38:	4639      	mov	r1, r7
 8014e3a:	f7eb fa4d 	bl	80002d8 <__aeabi_dsub>
 8014e3e:	4602      	mov	r2, r0
 8014e40:	460b      	mov	r3, r1
 8014e42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014e46:	f7eb fe8f 	bl	8000b68 <__aeabi_dcmpgt>
 8014e4a:	2800      	cmp	r0, #0
 8014e4c:	f47f adfe 	bne.w	8014a4c <__ieee754_pow+0x36c>
 8014e50:	4aa3      	ldr	r2, [pc, #652]	; (80150e0 <__ieee754_pow+0xa00>)
 8014e52:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8014e56:	4293      	cmp	r3, r2
 8014e58:	f340 810a 	ble.w	8015070 <__ieee754_pow+0x990>
 8014e5c:	151b      	asrs	r3, r3, #20
 8014e5e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8014e62:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8014e66:	fa4a f303 	asr.w	r3, sl, r3
 8014e6a:	445b      	add	r3, fp
 8014e6c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8014e70:	4e9c      	ldr	r6, [pc, #624]	; (80150e4 <__ieee754_pow+0xa04>)
 8014e72:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8014e76:	4116      	asrs	r6, r2
 8014e78:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8014e7c:	2000      	movs	r0, #0
 8014e7e:	ea23 0106 	bic.w	r1, r3, r6
 8014e82:	f1c2 0214 	rsb	r2, r2, #20
 8014e86:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8014e8a:	fa4a fa02 	asr.w	sl, sl, r2
 8014e8e:	f1bb 0f00 	cmp.w	fp, #0
 8014e92:	4602      	mov	r2, r0
 8014e94:	460b      	mov	r3, r1
 8014e96:	4620      	mov	r0, r4
 8014e98:	4629      	mov	r1, r5
 8014e9a:	bfb8      	it	lt
 8014e9c:	f1ca 0a00 	rsblt	sl, sl, #0
 8014ea0:	f7eb fa1a 	bl	80002d8 <__aeabi_dsub>
 8014ea4:	e9cd 0100 	strd	r0, r1, [sp]
 8014ea8:	4642      	mov	r2, r8
 8014eaa:	464b      	mov	r3, r9
 8014eac:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014eb0:	f7eb fa14 	bl	80002dc <__adddf3>
 8014eb4:	2000      	movs	r0, #0
 8014eb6:	a378      	add	r3, pc, #480	; (adr r3, 8015098 <__ieee754_pow+0x9b8>)
 8014eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ebc:	4604      	mov	r4, r0
 8014ebe:	460d      	mov	r5, r1
 8014ec0:	f7eb fbc2 	bl	8000648 <__aeabi_dmul>
 8014ec4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014ec8:	4606      	mov	r6, r0
 8014eca:	460f      	mov	r7, r1
 8014ecc:	4620      	mov	r0, r4
 8014ece:	4629      	mov	r1, r5
 8014ed0:	f7eb fa02 	bl	80002d8 <__aeabi_dsub>
 8014ed4:	4602      	mov	r2, r0
 8014ed6:	460b      	mov	r3, r1
 8014ed8:	4640      	mov	r0, r8
 8014eda:	4649      	mov	r1, r9
 8014edc:	f7eb f9fc 	bl	80002d8 <__aeabi_dsub>
 8014ee0:	a36f      	add	r3, pc, #444	; (adr r3, 80150a0 <__ieee754_pow+0x9c0>)
 8014ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ee6:	f7eb fbaf 	bl	8000648 <__aeabi_dmul>
 8014eea:	a36f      	add	r3, pc, #444	; (adr r3, 80150a8 <__ieee754_pow+0x9c8>)
 8014eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ef0:	4680      	mov	r8, r0
 8014ef2:	4689      	mov	r9, r1
 8014ef4:	4620      	mov	r0, r4
 8014ef6:	4629      	mov	r1, r5
 8014ef8:	f7eb fba6 	bl	8000648 <__aeabi_dmul>
 8014efc:	4602      	mov	r2, r0
 8014efe:	460b      	mov	r3, r1
 8014f00:	4640      	mov	r0, r8
 8014f02:	4649      	mov	r1, r9
 8014f04:	f7eb f9ea 	bl	80002dc <__adddf3>
 8014f08:	4604      	mov	r4, r0
 8014f0a:	460d      	mov	r5, r1
 8014f0c:	4602      	mov	r2, r0
 8014f0e:	460b      	mov	r3, r1
 8014f10:	4630      	mov	r0, r6
 8014f12:	4639      	mov	r1, r7
 8014f14:	f7eb f9e2 	bl	80002dc <__adddf3>
 8014f18:	4632      	mov	r2, r6
 8014f1a:	463b      	mov	r3, r7
 8014f1c:	4680      	mov	r8, r0
 8014f1e:	4689      	mov	r9, r1
 8014f20:	f7eb f9da 	bl	80002d8 <__aeabi_dsub>
 8014f24:	4602      	mov	r2, r0
 8014f26:	460b      	mov	r3, r1
 8014f28:	4620      	mov	r0, r4
 8014f2a:	4629      	mov	r1, r5
 8014f2c:	f7eb f9d4 	bl	80002d8 <__aeabi_dsub>
 8014f30:	4642      	mov	r2, r8
 8014f32:	4606      	mov	r6, r0
 8014f34:	460f      	mov	r7, r1
 8014f36:	464b      	mov	r3, r9
 8014f38:	4640      	mov	r0, r8
 8014f3a:	4649      	mov	r1, r9
 8014f3c:	f7eb fb84 	bl	8000648 <__aeabi_dmul>
 8014f40:	a35b      	add	r3, pc, #364	; (adr r3, 80150b0 <__ieee754_pow+0x9d0>)
 8014f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f46:	4604      	mov	r4, r0
 8014f48:	460d      	mov	r5, r1
 8014f4a:	f7eb fb7d 	bl	8000648 <__aeabi_dmul>
 8014f4e:	a35a      	add	r3, pc, #360	; (adr r3, 80150b8 <__ieee754_pow+0x9d8>)
 8014f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f54:	f7eb f9c0 	bl	80002d8 <__aeabi_dsub>
 8014f58:	4622      	mov	r2, r4
 8014f5a:	462b      	mov	r3, r5
 8014f5c:	f7eb fb74 	bl	8000648 <__aeabi_dmul>
 8014f60:	a357      	add	r3, pc, #348	; (adr r3, 80150c0 <__ieee754_pow+0x9e0>)
 8014f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f66:	f7eb f9b9 	bl	80002dc <__adddf3>
 8014f6a:	4622      	mov	r2, r4
 8014f6c:	462b      	mov	r3, r5
 8014f6e:	f7eb fb6b 	bl	8000648 <__aeabi_dmul>
 8014f72:	a355      	add	r3, pc, #340	; (adr r3, 80150c8 <__ieee754_pow+0x9e8>)
 8014f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f78:	f7eb f9ae 	bl	80002d8 <__aeabi_dsub>
 8014f7c:	4622      	mov	r2, r4
 8014f7e:	462b      	mov	r3, r5
 8014f80:	f7eb fb62 	bl	8000648 <__aeabi_dmul>
 8014f84:	a352      	add	r3, pc, #328	; (adr r3, 80150d0 <__ieee754_pow+0x9f0>)
 8014f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f8a:	f7eb f9a7 	bl	80002dc <__adddf3>
 8014f8e:	4622      	mov	r2, r4
 8014f90:	462b      	mov	r3, r5
 8014f92:	f7eb fb59 	bl	8000648 <__aeabi_dmul>
 8014f96:	4602      	mov	r2, r0
 8014f98:	460b      	mov	r3, r1
 8014f9a:	4640      	mov	r0, r8
 8014f9c:	4649      	mov	r1, r9
 8014f9e:	f7eb f99b 	bl	80002d8 <__aeabi_dsub>
 8014fa2:	4604      	mov	r4, r0
 8014fa4:	460d      	mov	r5, r1
 8014fa6:	4602      	mov	r2, r0
 8014fa8:	460b      	mov	r3, r1
 8014faa:	4640      	mov	r0, r8
 8014fac:	4649      	mov	r1, r9
 8014fae:	f7eb fb4b 	bl	8000648 <__aeabi_dmul>
 8014fb2:	2200      	movs	r2, #0
 8014fb4:	e9cd 0100 	strd	r0, r1, [sp]
 8014fb8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014fbc:	4620      	mov	r0, r4
 8014fbe:	4629      	mov	r1, r5
 8014fc0:	f7eb f98a 	bl	80002d8 <__aeabi_dsub>
 8014fc4:	4602      	mov	r2, r0
 8014fc6:	460b      	mov	r3, r1
 8014fc8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014fcc:	f7eb fc66 	bl	800089c <__aeabi_ddiv>
 8014fd0:	4632      	mov	r2, r6
 8014fd2:	4604      	mov	r4, r0
 8014fd4:	460d      	mov	r5, r1
 8014fd6:	463b      	mov	r3, r7
 8014fd8:	4640      	mov	r0, r8
 8014fda:	4649      	mov	r1, r9
 8014fdc:	f7eb fb34 	bl	8000648 <__aeabi_dmul>
 8014fe0:	4632      	mov	r2, r6
 8014fe2:	463b      	mov	r3, r7
 8014fe4:	f7eb f97a 	bl	80002dc <__adddf3>
 8014fe8:	4602      	mov	r2, r0
 8014fea:	460b      	mov	r3, r1
 8014fec:	4620      	mov	r0, r4
 8014fee:	4629      	mov	r1, r5
 8014ff0:	f7eb f972 	bl	80002d8 <__aeabi_dsub>
 8014ff4:	4642      	mov	r2, r8
 8014ff6:	464b      	mov	r3, r9
 8014ff8:	f7eb f96e 	bl	80002d8 <__aeabi_dsub>
 8014ffc:	4602      	mov	r2, r0
 8014ffe:	460b      	mov	r3, r1
 8015000:	2000      	movs	r0, #0
 8015002:	4939      	ldr	r1, [pc, #228]	; (80150e8 <__ieee754_pow+0xa08>)
 8015004:	f7eb f968 	bl	80002d8 <__aeabi_dsub>
 8015008:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 801500c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8015010:	4602      	mov	r2, r0
 8015012:	460b      	mov	r3, r1
 8015014:	da2f      	bge.n	8015076 <__ieee754_pow+0x996>
 8015016:	4650      	mov	r0, sl
 8015018:	ec43 2b10 	vmov	d0, r2, r3
 801501c:	f000 f9c0 	bl	80153a0 <scalbn>
 8015020:	ec51 0b10 	vmov	r0, r1, d0
 8015024:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015028:	f7ff bbf1 	b.w	801480e <__ieee754_pow+0x12e>
 801502c:	4b2f      	ldr	r3, [pc, #188]	; (80150ec <__ieee754_pow+0xa0c>)
 801502e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8015032:	429e      	cmp	r6, r3
 8015034:	f77f af0c 	ble.w	8014e50 <__ieee754_pow+0x770>
 8015038:	4b2d      	ldr	r3, [pc, #180]	; (80150f0 <__ieee754_pow+0xa10>)
 801503a:	440b      	add	r3, r1
 801503c:	4303      	orrs	r3, r0
 801503e:	d00b      	beq.n	8015058 <__ieee754_pow+0x978>
 8015040:	a325      	add	r3, pc, #148	; (adr r3, 80150d8 <__ieee754_pow+0x9f8>)
 8015042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015046:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801504a:	f7eb fafd 	bl	8000648 <__aeabi_dmul>
 801504e:	a322      	add	r3, pc, #136	; (adr r3, 80150d8 <__ieee754_pow+0x9f8>)
 8015050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015054:	f7ff bbdb 	b.w	801480e <__ieee754_pow+0x12e>
 8015058:	4622      	mov	r2, r4
 801505a:	462b      	mov	r3, r5
 801505c:	f7eb f93c 	bl	80002d8 <__aeabi_dsub>
 8015060:	4642      	mov	r2, r8
 8015062:	464b      	mov	r3, r9
 8015064:	f7eb fd76 	bl	8000b54 <__aeabi_dcmpge>
 8015068:	2800      	cmp	r0, #0
 801506a:	f43f aef1 	beq.w	8014e50 <__ieee754_pow+0x770>
 801506e:	e7e7      	b.n	8015040 <__ieee754_pow+0x960>
 8015070:	f04f 0a00 	mov.w	sl, #0
 8015074:	e718      	b.n	8014ea8 <__ieee754_pow+0x7c8>
 8015076:	4621      	mov	r1, r4
 8015078:	e7d4      	b.n	8015024 <__ieee754_pow+0x944>
 801507a:	2000      	movs	r0, #0
 801507c:	491a      	ldr	r1, [pc, #104]	; (80150e8 <__ieee754_pow+0xa08>)
 801507e:	f7ff bb8f 	b.w	80147a0 <__ieee754_pow+0xc0>
 8015082:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015086:	f7ff bb8b 	b.w	80147a0 <__ieee754_pow+0xc0>
 801508a:	4630      	mov	r0, r6
 801508c:	4639      	mov	r1, r7
 801508e:	f7ff bb87 	b.w	80147a0 <__ieee754_pow+0xc0>
 8015092:	4693      	mov	fp, r2
 8015094:	f7ff bb98 	b.w	80147c8 <__ieee754_pow+0xe8>
 8015098:	00000000 	.word	0x00000000
 801509c:	3fe62e43 	.word	0x3fe62e43
 80150a0:	fefa39ef 	.word	0xfefa39ef
 80150a4:	3fe62e42 	.word	0x3fe62e42
 80150a8:	0ca86c39 	.word	0x0ca86c39
 80150ac:	be205c61 	.word	0xbe205c61
 80150b0:	72bea4d0 	.word	0x72bea4d0
 80150b4:	3e663769 	.word	0x3e663769
 80150b8:	c5d26bf1 	.word	0xc5d26bf1
 80150bc:	3ebbbd41 	.word	0x3ebbbd41
 80150c0:	af25de2c 	.word	0xaf25de2c
 80150c4:	3f11566a 	.word	0x3f11566a
 80150c8:	16bebd93 	.word	0x16bebd93
 80150cc:	3f66c16c 	.word	0x3f66c16c
 80150d0:	5555553e 	.word	0x5555553e
 80150d4:	3fc55555 	.word	0x3fc55555
 80150d8:	c2f8f359 	.word	0xc2f8f359
 80150dc:	01a56e1f 	.word	0x01a56e1f
 80150e0:	3fe00000 	.word	0x3fe00000
 80150e4:	000fffff 	.word	0x000fffff
 80150e8:	3ff00000 	.word	0x3ff00000
 80150ec:	4090cbff 	.word	0x4090cbff
 80150f0:	3f6f3400 	.word	0x3f6f3400
 80150f4:	652b82fe 	.word	0x652b82fe
 80150f8:	3c971547 	.word	0x3c971547

080150fc <__ieee754_sqrt>:
 80150fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015100:	4955      	ldr	r1, [pc, #340]	; (8015258 <__ieee754_sqrt+0x15c>)
 8015102:	ec55 4b10 	vmov	r4, r5, d0
 8015106:	43a9      	bics	r1, r5
 8015108:	462b      	mov	r3, r5
 801510a:	462a      	mov	r2, r5
 801510c:	d112      	bne.n	8015134 <__ieee754_sqrt+0x38>
 801510e:	ee10 2a10 	vmov	r2, s0
 8015112:	ee10 0a10 	vmov	r0, s0
 8015116:	4629      	mov	r1, r5
 8015118:	f7eb fa96 	bl	8000648 <__aeabi_dmul>
 801511c:	4602      	mov	r2, r0
 801511e:	460b      	mov	r3, r1
 8015120:	4620      	mov	r0, r4
 8015122:	4629      	mov	r1, r5
 8015124:	f7eb f8da 	bl	80002dc <__adddf3>
 8015128:	4604      	mov	r4, r0
 801512a:	460d      	mov	r5, r1
 801512c:	ec45 4b10 	vmov	d0, r4, r5
 8015130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015134:	2d00      	cmp	r5, #0
 8015136:	ee10 0a10 	vmov	r0, s0
 801513a:	4621      	mov	r1, r4
 801513c:	dc0f      	bgt.n	801515e <__ieee754_sqrt+0x62>
 801513e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8015142:	4330      	orrs	r0, r6
 8015144:	d0f2      	beq.n	801512c <__ieee754_sqrt+0x30>
 8015146:	b155      	cbz	r5, 801515e <__ieee754_sqrt+0x62>
 8015148:	ee10 2a10 	vmov	r2, s0
 801514c:	4620      	mov	r0, r4
 801514e:	4629      	mov	r1, r5
 8015150:	f7eb f8c2 	bl	80002d8 <__aeabi_dsub>
 8015154:	4602      	mov	r2, r0
 8015156:	460b      	mov	r3, r1
 8015158:	f7eb fba0 	bl	800089c <__aeabi_ddiv>
 801515c:	e7e4      	b.n	8015128 <__ieee754_sqrt+0x2c>
 801515e:	151b      	asrs	r3, r3, #20
 8015160:	d073      	beq.n	801524a <__ieee754_sqrt+0x14e>
 8015162:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8015166:	07dd      	lsls	r5, r3, #31
 8015168:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801516c:	bf48      	it	mi
 801516e:	0fc8      	lsrmi	r0, r1, #31
 8015170:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8015174:	bf44      	itt	mi
 8015176:	0049      	lslmi	r1, r1, #1
 8015178:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 801517c:	2500      	movs	r5, #0
 801517e:	1058      	asrs	r0, r3, #1
 8015180:	0fcb      	lsrs	r3, r1, #31
 8015182:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8015186:	0049      	lsls	r1, r1, #1
 8015188:	2316      	movs	r3, #22
 801518a:	462c      	mov	r4, r5
 801518c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8015190:	19a7      	adds	r7, r4, r6
 8015192:	4297      	cmp	r7, r2
 8015194:	bfde      	ittt	le
 8015196:	19bc      	addle	r4, r7, r6
 8015198:	1bd2      	suble	r2, r2, r7
 801519a:	19ad      	addle	r5, r5, r6
 801519c:	0fcf      	lsrs	r7, r1, #31
 801519e:	3b01      	subs	r3, #1
 80151a0:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 80151a4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80151a8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80151ac:	d1f0      	bne.n	8015190 <__ieee754_sqrt+0x94>
 80151ae:	f04f 0c20 	mov.w	ip, #32
 80151b2:	469e      	mov	lr, r3
 80151b4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80151b8:	42a2      	cmp	r2, r4
 80151ba:	eb06 070e 	add.w	r7, r6, lr
 80151be:	dc02      	bgt.n	80151c6 <__ieee754_sqrt+0xca>
 80151c0:	d112      	bne.n	80151e8 <__ieee754_sqrt+0xec>
 80151c2:	428f      	cmp	r7, r1
 80151c4:	d810      	bhi.n	80151e8 <__ieee754_sqrt+0xec>
 80151c6:	2f00      	cmp	r7, #0
 80151c8:	eb07 0e06 	add.w	lr, r7, r6
 80151cc:	da42      	bge.n	8015254 <__ieee754_sqrt+0x158>
 80151ce:	f1be 0f00 	cmp.w	lr, #0
 80151d2:	db3f      	blt.n	8015254 <__ieee754_sqrt+0x158>
 80151d4:	f104 0801 	add.w	r8, r4, #1
 80151d8:	1b12      	subs	r2, r2, r4
 80151da:	428f      	cmp	r7, r1
 80151dc:	bf88      	it	hi
 80151de:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 80151e2:	1bc9      	subs	r1, r1, r7
 80151e4:	4433      	add	r3, r6
 80151e6:	4644      	mov	r4, r8
 80151e8:	0052      	lsls	r2, r2, #1
 80151ea:	f1bc 0c01 	subs.w	ip, ip, #1
 80151ee:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 80151f2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80151f6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80151fa:	d1dd      	bne.n	80151b8 <__ieee754_sqrt+0xbc>
 80151fc:	430a      	orrs	r2, r1
 80151fe:	d006      	beq.n	801520e <__ieee754_sqrt+0x112>
 8015200:	1c5c      	adds	r4, r3, #1
 8015202:	bf13      	iteet	ne
 8015204:	3301      	addne	r3, #1
 8015206:	3501      	addeq	r5, #1
 8015208:	4663      	moveq	r3, ip
 801520a:	f023 0301 	bicne.w	r3, r3, #1
 801520e:	106a      	asrs	r2, r5, #1
 8015210:	085b      	lsrs	r3, r3, #1
 8015212:	07e9      	lsls	r1, r5, #31
 8015214:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8015218:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801521c:	bf48      	it	mi
 801521e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8015222:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8015226:	461c      	mov	r4, r3
 8015228:	e780      	b.n	801512c <__ieee754_sqrt+0x30>
 801522a:	0aca      	lsrs	r2, r1, #11
 801522c:	3815      	subs	r0, #21
 801522e:	0549      	lsls	r1, r1, #21
 8015230:	2a00      	cmp	r2, #0
 8015232:	d0fa      	beq.n	801522a <__ieee754_sqrt+0x12e>
 8015234:	02d6      	lsls	r6, r2, #11
 8015236:	d50a      	bpl.n	801524e <__ieee754_sqrt+0x152>
 8015238:	f1c3 0420 	rsb	r4, r3, #32
 801523c:	fa21 f404 	lsr.w	r4, r1, r4
 8015240:	1e5d      	subs	r5, r3, #1
 8015242:	4099      	lsls	r1, r3
 8015244:	4322      	orrs	r2, r4
 8015246:	1b43      	subs	r3, r0, r5
 8015248:	e78b      	b.n	8015162 <__ieee754_sqrt+0x66>
 801524a:	4618      	mov	r0, r3
 801524c:	e7f0      	b.n	8015230 <__ieee754_sqrt+0x134>
 801524e:	0052      	lsls	r2, r2, #1
 8015250:	3301      	adds	r3, #1
 8015252:	e7ef      	b.n	8015234 <__ieee754_sqrt+0x138>
 8015254:	46a0      	mov	r8, r4
 8015256:	e7bf      	b.n	80151d8 <__ieee754_sqrt+0xdc>
 8015258:	7ff00000 	.word	0x7ff00000

0801525c <fabs>:
 801525c:	ec51 0b10 	vmov	r0, r1, d0
 8015260:	ee10 2a10 	vmov	r2, s0
 8015264:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8015268:	ec43 2b10 	vmov	d0, r2, r3
 801526c:	4770      	bx	lr

0801526e <finite>:
 801526e:	ee10 3a90 	vmov	r3, s1
 8015272:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8015276:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801527a:	0fc0      	lsrs	r0, r0, #31
 801527c:	4770      	bx	lr

0801527e <matherr>:
 801527e:	2000      	movs	r0, #0
 8015280:	4770      	bx	lr
 8015282:	0000      	movs	r0, r0
 8015284:	0000      	movs	r0, r0
	...

08015288 <nan>:
 8015288:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8015290 <nan+0x8>
 801528c:	4770      	bx	lr
 801528e:	bf00      	nop
 8015290:	00000000 	.word	0x00000000
 8015294:	7ff80000 	.word	0x7ff80000

08015298 <rint>:
 8015298:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801529a:	ec51 0b10 	vmov	r0, r1, d0
 801529e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80152a2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80152a6:	2e13      	cmp	r6, #19
 80152a8:	460b      	mov	r3, r1
 80152aa:	ee10 4a10 	vmov	r4, s0
 80152ae:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80152b2:	dc56      	bgt.n	8015362 <rint+0xca>
 80152b4:	2e00      	cmp	r6, #0
 80152b6:	da2b      	bge.n	8015310 <rint+0x78>
 80152b8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80152bc:	4302      	orrs	r2, r0
 80152be:	d023      	beq.n	8015308 <rint+0x70>
 80152c0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80152c4:	4302      	orrs	r2, r0
 80152c6:	4254      	negs	r4, r2
 80152c8:	4314      	orrs	r4, r2
 80152ca:	0c4b      	lsrs	r3, r1, #17
 80152cc:	0b24      	lsrs	r4, r4, #12
 80152ce:	045b      	lsls	r3, r3, #17
 80152d0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 80152d4:	ea44 0103 	orr.w	r1, r4, r3
 80152d8:	460b      	mov	r3, r1
 80152da:	492f      	ldr	r1, [pc, #188]	; (8015398 <rint+0x100>)
 80152dc:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 80152e0:	e9d1 6700 	ldrd	r6, r7, [r1]
 80152e4:	4602      	mov	r2, r0
 80152e6:	4639      	mov	r1, r7
 80152e8:	4630      	mov	r0, r6
 80152ea:	f7ea fff7 	bl	80002dc <__adddf3>
 80152ee:	e9cd 0100 	strd	r0, r1, [sp]
 80152f2:	463b      	mov	r3, r7
 80152f4:	4632      	mov	r2, r6
 80152f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80152fa:	f7ea ffed 	bl	80002d8 <__aeabi_dsub>
 80152fe:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8015302:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8015306:	4639      	mov	r1, r7
 8015308:	ec41 0b10 	vmov	d0, r0, r1
 801530c:	b003      	add	sp, #12
 801530e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015310:	4a22      	ldr	r2, [pc, #136]	; (801539c <rint+0x104>)
 8015312:	4132      	asrs	r2, r6
 8015314:	ea01 0702 	and.w	r7, r1, r2
 8015318:	4307      	orrs	r7, r0
 801531a:	d0f5      	beq.n	8015308 <rint+0x70>
 801531c:	0852      	lsrs	r2, r2, #1
 801531e:	4011      	ands	r1, r2
 8015320:	430c      	orrs	r4, r1
 8015322:	d00b      	beq.n	801533c <rint+0xa4>
 8015324:	ea23 0202 	bic.w	r2, r3, r2
 8015328:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801532c:	2e13      	cmp	r6, #19
 801532e:	fa43 f306 	asr.w	r3, r3, r6
 8015332:	bf0c      	ite	eq
 8015334:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8015338:	2400      	movne	r4, #0
 801533a:	4313      	orrs	r3, r2
 801533c:	4916      	ldr	r1, [pc, #88]	; (8015398 <rint+0x100>)
 801533e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8015342:	4622      	mov	r2, r4
 8015344:	e9d5 4500 	ldrd	r4, r5, [r5]
 8015348:	4620      	mov	r0, r4
 801534a:	4629      	mov	r1, r5
 801534c:	f7ea ffc6 	bl	80002dc <__adddf3>
 8015350:	e9cd 0100 	strd	r0, r1, [sp]
 8015354:	4622      	mov	r2, r4
 8015356:	462b      	mov	r3, r5
 8015358:	e9dd 0100 	ldrd	r0, r1, [sp]
 801535c:	f7ea ffbc 	bl	80002d8 <__aeabi_dsub>
 8015360:	e7d2      	b.n	8015308 <rint+0x70>
 8015362:	2e33      	cmp	r6, #51	; 0x33
 8015364:	dd07      	ble.n	8015376 <rint+0xde>
 8015366:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801536a:	d1cd      	bne.n	8015308 <rint+0x70>
 801536c:	ee10 2a10 	vmov	r2, s0
 8015370:	f7ea ffb4 	bl	80002dc <__adddf3>
 8015374:	e7c8      	b.n	8015308 <rint+0x70>
 8015376:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 801537a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801537e:	40f2      	lsrs	r2, r6
 8015380:	4210      	tst	r0, r2
 8015382:	d0c1      	beq.n	8015308 <rint+0x70>
 8015384:	0852      	lsrs	r2, r2, #1
 8015386:	4210      	tst	r0, r2
 8015388:	bf1f      	itttt	ne
 801538a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 801538e:	ea20 0202 	bicne.w	r2, r0, r2
 8015392:	4134      	asrne	r4, r6
 8015394:	4314      	orrne	r4, r2
 8015396:	e7d1      	b.n	801533c <rint+0xa4>
 8015398:	08016c60 	.word	0x08016c60
 801539c:	000fffff 	.word	0x000fffff

080153a0 <scalbn>:
 80153a0:	b570      	push	{r4, r5, r6, lr}
 80153a2:	ec55 4b10 	vmov	r4, r5, d0
 80153a6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80153aa:	4606      	mov	r6, r0
 80153ac:	462b      	mov	r3, r5
 80153ae:	b9aa      	cbnz	r2, 80153dc <scalbn+0x3c>
 80153b0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80153b4:	4323      	orrs	r3, r4
 80153b6:	d03b      	beq.n	8015430 <scalbn+0x90>
 80153b8:	4b31      	ldr	r3, [pc, #196]	; (8015480 <scalbn+0xe0>)
 80153ba:	4629      	mov	r1, r5
 80153bc:	2200      	movs	r2, #0
 80153be:	ee10 0a10 	vmov	r0, s0
 80153c2:	f7eb f941 	bl	8000648 <__aeabi_dmul>
 80153c6:	4b2f      	ldr	r3, [pc, #188]	; (8015484 <scalbn+0xe4>)
 80153c8:	429e      	cmp	r6, r3
 80153ca:	4604      	mov	r4, r0
 80153cc:	460d      	mov	r5, r1
 80153ce:	da12      	bge.n	80153f6 <scalbn+0x56>
 80153d0:	a327      	add	r3, pc, #156	; (adr r3, 8015470 <scalbn+0xd0>)
 80153d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153d6:	f7eb f937 	bl	8000648 <__aeabi_dmul>
 80153da:	e009      	b.n	80153f0 <scalbn+0x50>
 80153dc:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80153e0:	428a      	cmp	r2, r1
 80153e2:	d10c      	bne.n	80153fe <scalbn+0x5e>
 80153e4:	ee10 2a10 	vmov	r2, s0
 80153e8:	4620      	mov	r0, r4
 80153ea:	4629      	mov	r1, r5
 80153ec:	f7ea ff76 	bl	80002dc <__adddf3>
 80153f0:	4604      	mov	r4, r0
 80153f2:	460d      	mov	r5, r1
 80153f4:	e01c      	b.n	8015430 <scalbn+0x90>
 80153f6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80153fa:	460b      	mov	r3, r1
 80153fc:	3a36      	subs	r2, #54	; 0x36
 80153fe:	4432      	add	r2, r6
 8015400:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8015404:	428a      	cmp	r2, r1
 8015406:	dd0b      	ble.n	8015420 <scalbn+0x80>
 8015408:	ec45 4b11 	vmov	d1, r4, r5
 801540c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8015478 <scalbn+0xd8>
 8015410:	f000 f9f0 	bl	80157f4 <copysign>
 8015414:	a318      	add	r3, pc, #96	; (adr r3, 8015478 <scalbn+0xd8>)
 8015416:	e9d3 2300 	ldrd	r2, r3, [r3]
 801541a:	ec51 0b10 	vmov	r0, r1, d0
 801541e:	e7da      	b.n	80153d6 <scalbn+0x36>
 8015420:	2a00      	cmp	r2, #0
 8015422:	dd08      	ble.n	8015436 <scalbn+0x96>
 8015424:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8015428:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801542c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8015430:	ec45 4b10 	vmov	d0, r4, r5
 8015434:	bd70      	pop	{r4, r5, r6, pc}
 8015436:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801543a:	da0d      	bge.n	8015458 <scalbn+0xb8>
 801543c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8015440:	429e      	cmp	r6, r3
 8015442:	ec45 4b11 	vmov	d1, r4, r5
 8015446:	dce1      	bgt.n	801540c <scalbn+0x6c>
 8015448:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8015470 <scalbn+0xd0>
 801544c:	f000 f9d2 	bl	80157f4 <copysign>
 8015450:	a307      	add	r3, pc, #28	; (adr r3, 8015470 <scalbn+0xd0>)
 8015452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015456:	e7e0      	b.n	801541a <scalbn+0x7a>
 8015458:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801545c:	3236      	adds	r2, #54	; 0x36
 801545e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8015462:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8015466:	4620      	mov	r0, r4
 8015468:	4629      	mov	r1, r5
 801546a:	2200      	movs	r2, #0
 801546c:	4b06      	ldr	r3, [pc, #24]	; (8015488 <scalbn+0xe8>)
 801546e:	e7b2      	b.n	80153d6 <scalbn+0x36>
 8015470:	c2f8f359 	.word	0xc2f8f359
 8015474:	01a56e1f 	.word	0x01a56e1f
 8015478:	8800759c 	.word	0x8800759c
 801547c:	7e37e43c 	.word	0x7e37e43c
 8015480:	43500000 	.word	0x43500000
 8015484:	ffff3cb0 	.word	0xffff3cb0
 8015488:	3c900000 	.word	0x3c900000
 801548c:	00000000 	.word	0x00000000

08015490 <__ieee754_log>:
 8015490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015494:	ec51 0b10 	vmov	r0, r1, d0
 8015498:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 801549c:	b087      	sub	sp, #28
 801549e:	460d      	mov	r5, r1
 80154a0:	da27      	bge.n	80154f2 <__ieee754_log+0x62>
 80154a2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80154a6:	4303      	orrs	r3, r0
 80154a8:	ee10 2a10 	vmov	r2, s0
 80154ac:	d10a      	bne.n	80154c4 <__ieee754_log+0x34>
 80154ae:	49cc      	ldr	r1, [pc, #816]	; (80157e0 <__ieee754_log+0x350>)
 80154b0:	2200      	movs	r2, #0
 80154b2:	2300      	movs	r3, #0
 80154b4:	2000      	movs	r0, #0
 80154b6:	f7eb f9f1 	bl	800089c <__aeabi_ddiv>
 80154ba:	ec41 0b10 	vmov	d0, r0, r1
 80154be:	b007      	add	sp, #28
 80154c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80154c4:	2900      	cmp	r1, #0
 80154c6:	da05      	bge.n	80154d4 <__ieee754_log+0x44>
 80154c8:	460b      	mov	r3, r1
 80154ca:	f7ea ff05 	bl	80002d8 <__aeabi_dsub>
 80154ce:	2200      	movs	r2, #0
 80154d0:	2300      	movs	r3, #0
 80154d2:	e7f0      	b.n	80154b6 <__ieee754_log+0x26>
 80154d4:	4bc3      	ldr	r3, [pc, #780]	; (80157e4 <__ieee754_log+0x354>)
 80154d6:	2200      	movs	r2, #0
 80154d8:	f7eb f8b6 	bl	8000648 <__aeabi_dmul>
 80154dc:	f06f 0335 	mvn.w	r3, #53	; 0x35
 80154e0:	460d      	mov	r5, r1
 80154e2:	4ac1      	ldr	r2, [pc, #772]	; (80157e8 <__ieee754_log+0x358>)
 80154e4:	4295      	cmp	r5, r2
 80154e6:	dd06      	ble.n	80154f6 <__ieee754_log+0x66>
 80154e8:	4602      	mov	r2, r0
 80154ea:	460b      	mov	r3, r1
 80154ec:	f7ea fef6 	bl	80002dc <__adddf3>
 80154f0:	e7e3      	b.n	80154ba <__ieee754_log+0x2a>
 80154f2:	2300      	movs	r3, #0
 80154f4:	e7f5      	b.n	80154e2 <__ieee754_log+0x52>
 80154f6:	152c      	asrs	r4, r5, #20
 80154f8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80154fc:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8015500:	441c      	add	r4, r3
 8015502:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8015506:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 801550a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801550e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8015512:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8015516:	ea42 0105 	orr.w	r1, r2, r5
 801551a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 801551e:	2200      	movs	r2, #0
 8015520:	4bb2      	ldr	r3, [pc, #712]	; (80157ec <__ieee754_log+0x35c>)
 8015522:	f7ea fed9 	bl	80002d8 <__aeabi_dsub>
 8015526:	1cab      	adds	r3, r5, #2
 8015528:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801552c:	2b02      	cmp	r3, #2
 801552e:	4682      	mov	sl, r0
 8015530:	468b      	mov	fp, r1
 8015532:	f04f 0200 	mov.w	r2, #0
 8015536:	dc53      	bgt.n	80155e0 <__ieee754_log+0x150>
 8015538:	2300      	movs	r3, #0
 801553a:	f7eb faed 	bl	8000b18 <__aeabi_dcmpeq>
 801553e:	b1d0      	cbz	r0, 8015576 <__ieee754_log+0xe6>
 8015540:	2c00      	cmp	r4, #0
 8015542:	f000 8120 	beq.w	8015786 <__ieee754_log+0x2f6>
 8015546:	4620      	mov	r0, r4
 8015548:	f7eb f814 	bl	8000574 <__aeabi_i2d>
 801554c:	a390      	add	r3, pc, #576	; (adr r3, 8015790 <__ieee754_log+0x300>)
 801554e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015552:	4606      	mov	r6, r0
 8015554:	460f      	mov	r7, r1
 8015556:	f7eb f877 	bl	8000648 <__aeabi_dmul>
 801555a:	a38f      	add	r3, pc, #572	; (adr r3, 8015798 <__ieee754_log+0x308>)
 801555c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015560:	4604      	mov	r4, r0
 8015562:	460d      	mov	r5, r1
 8015564:	4630      	mov	r0, r6
 8015566:	4639      	mov	r1, r7
 8015568:	f7eb f86e 	bl	8000648 <__aeabi_dmul>
 801556c:	4602      	mov	r2, r0
 801556e:	460b      	mov	r3, r1
 8015570:	4620      	mov	r0, r4
 8015572:	4629      	mov	r1, r5
 8015574:	e7ba      	b.n	80154ec <__ieee754_log+0x5c>
 8015576:	a38a      	add	r3, pc, #552	; (adr r3, 80157a0 <__ieee754_log+0x310>)
 8015578:	e9d3 2300 	ldrd	r2, r3, [r3]
 801557c:	4650      	mov	r0, sl
 801557e:	4659      	mov	r1, fp
 8015580:	f7eb f862 	bl	8000648 <__aeabi_dmul>
 8015584:	4602      	mov	r2, r0
 8015586:	460b      	mov	r3, r1
 8015588:	2000      	movs	r0, #0
 801558a:	4999      	ldr	r1, [pc, #612]	; (80157f0 <__ieee754_log+0x360>)
 801558c:	f7ea fea4 	bl	80002d8 <__aeabi_dsub>
 8015590:	4652      	mov	r2, sl
 8015592:	4606      	mov	r6, r0
 8015594:	460f      	mov	r7, r1
 8015596:	465b      	mov	r3, fp
 8015598:	4650      	mov	r0, sl
 801559a:	4659      	mov	r1, fp
 801559c:	f7eb f854 	bl	8000648 <__aeabi_dmul>
 80155a0:	4602      	mov	r2, r0
 80155a2:	460b      	mov	r3, r1
 80155a4:	4630      	mov	r0, r6
 80155a6:	4639      	mov	r1, r7
 80155a8:	f7eb f84e 	bl	8000648 <__aeabi_dmul>
 80155ac:	4606      	mov	r6, r0
 80155ae:	460f      	mov	r7, r1
 80155b0:	b914      	cbnz	r4, 80155b8 <__ieee754_log+0x128>
 80155b2:	4632      	mov	r2, r6
 80155b4:	463b      	mov	r3, r7
 80155b6:	e0a0      	b.n	80156fa <__ieee754_log+0x26a>
 80155b8:	4620      	mov	r0, r4
 80155ba:	f7ea ffdb 	bl	8000574 <__aeabi_i2d>
 80155be:	a374      	add	r3, pc, #464	; (adr r3, 8015790 <__ieee754_log+0x300>)
 80155c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155c4:	4680      	mov	r8, r0
 80155c6:	4689      	mov	r9, r1
 80155c8:	f7eb f83e 	bl	8000648 <__aeabi_dmul>
 80155cc:	a372      	add	r3, pc, #456	; (adr r3, 8015798 <__ieee754_log+0x308>)
 80155ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155d2:	4604      	mov	r4, r0
 80155d4:	460d      	mov	r5, r1
 80155d6:	4640      	mov	r0, r8
 80155d8:	4649      	mov	r1, r9
 80155da:	f7eb f835 	bl	8000648 <__aeabi_dmul>
 80155de:	e0a5      	b.n	801572c <__ieee754_log+0x29c>
 80155e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80155e4:	f7ea fe7a 	bl	80002dc <__adddf3>
 80155e8:	4602      	mov	r2, r0
 80155ea:	460b      	mov	r3, r1
 80155ec:	4650      	mov	r0, sl
 80155ee:	4659      	mov	r1, fp
 80155f0:	f7eb f954 	bl	800089c <__aeabi_ddiv>
 80155f4:	e9cd 0100 	strd	r0, r1, [sp]
 80155f8:	4620      	mov	r0, r4
 80155fa:	f7ea ffbb 	bl	8000574 <__aeabi_i2d>
 80155fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015602:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015606:	4610      	mov	r0, r2
 8015608:	4619      	mov	r1, r3
 801560a:	f7eb f81d 	bl	8000648 <__aeabi_dmul>
 801560e:	4602      	mov	r2, r0
 8015610:	460b      	mov	r3, r1
 8015612:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015616:	f7eb f817 	bl	8000648 <__aeabi_dmul>
 801561a:	a363      	add	r3, pc, #396	; (adr r3, 80157a8 <__ieee754_log+0x318>)
 801561c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015620:	4680      	mov	r8, r0
 8015622:	4689      	mov	r9, r1
 8015624:	f7eb f810 	bl	8000648 <__aeabi_dmul>
 8015628:	a361      	add	r3, pc, #388	; (adr r3, 80157b0 <__ieee754_log+0x320>)
 801562a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801562e:	f7ea fe55 	bl	80002dc <__adddf3>
 8015632:	4642      	mov	r2, r8
 8015634:	464b      	mov	r3, r9
 8015636:	f7eb f807 	bl	8000648 <__aeabi_dmul>
 801563a:	a35f      	add	r3, pc, #380	; (adr r3, 80157b8 <__ieee754_log+0x328>)
 801563c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015640:	f7ea fe4c 	bl	80002dc <__adddf3>
 8015644:	4642      	mov	r2, r8
 8015646:	464b      	mov	r3, r9
 8015648:	f7ea fffe 	bl	8000648 <__aeabi_dmul>
 801564c:	a35c      	add	r3, pc, #368	; (adr r3, 80157c0 <__ieee754_log+0x330>)
 801564e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015652:	f7ea fe43 	bl	80002dc <__adddf3>
 8015656:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801565a:	f7ea fff5 	bl	8000648 <__aeabi_dmul>
 801565e:	a35a      	add	r3, pc, #360	; (adr r3, 80157c8 <__ieee754_log+0x338>)
 8015660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015664:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015668:	4640      	mov	r0, r8
 801566a:	4649      	mov	r1, r9
 801566c:	f7ea ffec 	bl	8000648 <__aeabi_dmul>
 8015670:	a357      	add	r3, pc, #348	; (adr r3, 80157d0 <__ieee754_log+0x340>)
 8015672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015676:	f7ea fe31 	bl	80002dc <__adddf3>
 801567a:	4642      	mov	r2, r8
 801567c:	464b      	mov	r3, r9
 801567e:	f7ea ffe3 	bl	8000648 <__aeabi_dmul>
 8015682:	a355      	add	r3, pc, #340	; (adr r3, 80157d8 <__ieee754_log+0x348>)
 8015684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015688:	f7ea fe28 	bl	80002dc <__adddf3>
 801568c:	4642      	mov	r2, r8
 801568e:	464b      	mov	r3, r9
 8015690:	f7ea ffda 	bl	8000648 <__aeabi_dmul>
 8015694:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 8015698:	4602      	mov	r2, r0
 801569a:	460b      	mov	r3, r1
 801569c:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 80156a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80156a4:	f7ea fe1a 	bl	80002dc <__adddf3>
 80156a8:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 80156ac:	3551      	adds	r5, #81	; 0x51
 80156ae:	4335      	orrs	r5, r6
 80156b0:	2d00      	cmp	r5, #0
 80156b2:	4680      	mov	r8, r0
 80156b4:	4689      	mov	r9, r1
 80156b6:	dd48      	ble.n	801574a <__ieee754_log+0x2ba>
 80156b8:	2200      	movs	r2, #0
 80156ba:	4b4d      	ldr	r3, [pc, #308]	; (80157f0 <__ieee754_log+0x360>)
 80156bc:	4650      	mov	r0, sl
 80156be:	4659      	mov	r1, fp
 80156c0:	f7ea ffc2 	bl	8000648 <__aeabi_dmul>
 80156c4:	4652      	mov	r2, sl
 80156c6:	465b      	mov	r3, fp
 80156c8:	f7ea ffbe 	bl	8000648 <__aeabi_dmul>
 80156cc:	4602      	mov	r2, r0
 80156ce:	460b      	mov	r3, r1
 80156d0:	4606      	mov	r6, r0
 80156d2:	460f      	mov	r7, r1
 80156d4:	4640      	mov	r0, r8
 80156d6:	4649      	mov	r1, r9
 80156d8:	f7ea fe00 	bl	80002dc <__adddf3>
 80156dc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80156e0:	f7ea ffb2 	bl	8000648 <__aeabi_dmul>
 80156e4:	4680      	mov	r8, r0
 80156e6:	4689      	mov	r9, r1
 80156e8:	b964      	cbnz	r4, 8015704 <__ieee754_log+0x274>
 80156ea:	4602      	mov	r2, r0
 80156ec:	460b      	mov	r3, r1
 80156ee:	4630      	mov	r0, r6
 80156f0:	4639      	mov	r1, r7
 80156f2:	f7ea fdf1 	bl	80002d8 <__aeabi_dsub>
 80156f6:	4602      	mov	r2, r0
 80156f8:	460b      	mov	r3, r1
 80156fa:	4650      	mov	r0, sl
 80156fc:	4659      	mov	r1, fp
 80156fe:	f7ea fdeb 	bl	80002d8 <__aeabi_dsub>
 8015702:	e6da      	b.n	80154ba <__ieee754_log+0x2a>
 8015704:	a322      	add	r3, pc, #136	; (adr r3, 8015790 <__ieee754_log+0x300>)
 8015706:	e9d3 2300 	ldrd	r2, r3, [r3]
 801570a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801570e:	f7ea ff9b 	bl	8000648 <__aeabi_dmul>
 8015712:	a321      	add	r3, pc, #132	; (adr r3, 8015798 <__ieee754_log+0x308>)
 8015714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015718:	4604      	mov	r4, r0
 801571a:	460d      	mov	r5, r1
 801571c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015720:	f7ea ff92 	bl	8000648 <__aeabi_dmul>
 8015724:	4642      	mov	r2, r8
 8015726:	464b      	mov	r3, r9
 8015728:	f7ea fdd8 	bl	80002dc <__adddf3>
 801572c:	4602      	mov	r2, r0
 801572e:	460b      	mov	r3, r1
 8015730:	4630      	mov	r0, r6
 8015732:	4639      	mov	r1, r7
 8015734:	f7ea fdd0 	bl	80002d8 <__aeabi_dsub>
 8015738:	4652      	mov	r2, sl
 801573a:	465b      	mov	r3, fp
 801573c:	f7ea fdcc 	bl	80002d8 <__aeabi_dsub>
 8015740:	4602      	mov	r2, r0
 8015742:	460b      	mov	r3, r1
 8015744:	4620      	mov	r0, r4
 8015746:	4629      	mov	r1, r5
 8015748:	e7d9      	b.n	80156fe <__ieee754_log+0x26e>
 801574a:	4602      	mov	r2, r0
 801574c:	460b      	mov	r3, r1
 801574e:	4650      	mov	r0, sl
 8015750:	4659      	mov	r1, fp
 8015752:	f7ea fdc1 	bl	80002d8 <__aeabi_dsub>
 8015756:	e9dd 2300 	ldrd	r2, r3, [sp]
 801575a:	f7ea ff75 	bl	8000648 <__aeabi_dmul>
 801575e:	4606      	mov	r6, r0
 8015760:	460f      	mov	r7, r1
 8015762:	2c00      	cmp	r4, #0
 8015764:	f43f af25 	beq.w	80155b2 <__ieee754_log+0x122>
 8015768:	a309      	add	r3, pc, #36	; (adr r3, 8015790 <__ieee754_log+0x300>)
 801576a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801576e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015772:	f7ea ff69 	bl	8000648 <__aeabi_dmul>
 8015776:	a308      	add	r3, pc, #32	; (adr r3, 8015798 <__ieee754_log+0x308>)
 8015778:	e9d3 2300 	ldrd	r2, r3, [r3]
 801577c:	4604      	mov	r4, r0
 801577e:	460d      	mov	r5, r1
 8015780:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015784:	e729      	b.n	80155da <__ieee754_log+0x14a>
 8015786:	2000      	movs	r0, #0
 8015788:	2100      	movs	r1, #0
 801578a:	e696      	b.n	80154ba <__ieee754_log+0x2a>
 801578c:	f3af 8000 	nop.w
 8015790:	fee00000 	.word	0xfee00000
 8015794:	3fe62e42 	.word	0x3fe62e42
 8015798:	35793c76 	.word	0x35793c76
 801579c:	3dea39ef 	.word	0x3dea39ef
 80157a0:	55555555 	.word	0x55555555
 80157a4:	3fd55555 	.word	0x3fd55555
 80157a8:	df3e5244 	.word	0xdf3e5244
 80157ac:	3fc2f112 	.word	0x3fc2f112
 80157b0:	96cb03de 	.word	0x96cb03de
 80157b4:	3fc74664 	.word	0x3fc74664
 80157b8:	94229359 	.word	0x94229359
 80157bc:	3fd24924 	.word	0x3fd24924
 80157c0:	55555593 	.word	0x55555593
 80157c4:	3fe55555 	.word	0x3fe55555
 80157c8:	d078c69f 	.word	0xd078c69f
 80157cc:	3fc39a09 	.word	0x3fc39a09
 80157d0:	1d8e78af 	.word	0x1d8e78af
 80157d4:	3fcc71c5 	.word	0x3fcc71c5
 80157d8:	9997fa04 	.word	0x9997fa04
 80157dc:	3fd99999 	.word	0x3fd99999
 80157e0:	c3500000 	.word	0xc3500000
 80157e4:	43500000 	.word	0x43500000
 80157e8:	7fefffff 	.word	0x7fefffff
 80157ec:	3ff00000 	.word	0x3ff00000
 80157f0:	3fe00000 	.word	0x3fe00000

080157f4 <copysign>:
 80157f4:	ec51 0b10 	vmov	r0, r1, d0
 80157f8:	ee11 0a90 	vmov	r0, s3
 80157fc:	ee10 2a10 	vmov	r2, s0
 8015800:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8015804:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8015808:	ea41 0300 	orr.w	r3, r1, r0
 801580c:	ec43 2b10 	vmov	d0, r2, r3
 8015810:	4770      	bx	lr
	...

08015814 <_init>:
 8015814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015816:	bf00      	nop
 8015818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801581a:	bc08      	pop	{r3}
 801581c:	469e      	mov	lr, r3
 801581e:	4770      	bx	lr

08015820 <_fini>:
 8015820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015822:	bf00      	nop
 8015824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015826:	bc08      	pop	{r3}
 8015828:	469e      	mov	lr, r3
 801582a:	4770      	bx	lr
