
FunctionGeneratorCortexM4_SW_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e450  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000990  0800e630  0800e630  0001e630  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800efc0  0800efc0  000213d0  2**0
                  CONTENTS
  4 .ARM          00000000  0800efc0  0800efc0  000213d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800efc0  0800efc0  000213d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800efc0  0800efc0  0001efc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800efc4  0800efc4  0001efc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000013d0  20000000  0800efc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004a0  200013d0  08010398  000213d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001870  08010398  00021870  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000213d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b4d8  00000000  00000000  00021400  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005b06  00000000  00000000  0004c8d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001e70  00000000  00000000  000523e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001b10  00000000  00000000  00054250  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00030789  00000000  00000000  00055d60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002197d  00000000  00000000  000864e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00124a9c  00000000  00000000  000a7e66  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001cc902  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008844  00000000  00000000  001cc980  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200013d0 	.word	0x200013d0
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800e618 	.word	0x0800e618

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200013d4 	.word	0x200013d4
 800021c:	0800e618 	.word	0x0800e618

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800040e:	f1a4 0401 	sub.w	r4, r4, #1
 8000412:	d1e9      	bne.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <DM_Init>:
 *	@param None
 *	@retval None
 *
 */
void DM_Init()
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
	  ILI9341_Init();
 8000bfc:	f00a fb1a 	bl	800b234 <ILI9341_Init>
	  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8000c00:	2003      	movs	r0, #3
 8000c02:	f00a ff07 	bl	800ba14 <ILI9341_Set_Rotation>
	  ILI9341_Fill_Screen(WHITE);
 8000c06:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000c0a:	f00a fd1b 	bl	800b644 <ILI9341_Fill_Screen>

}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
	...

08000c14 <DM_PostInit>:
 *	@param None
 *	@retval None
 *
 */
void DM_PostInit()
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af02      	add	r7, sp, #8

	  ILI9341_Draw_Text("Initialising", 10, 10, BLACK, 1, WHITE);
 8000c1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c1e:	9301      	str	r3, [sp, #4]
 8000c20:	2301      	movs	r3, #1
 8000c22:	9300      	str	r3, [sp, #0]
 8000c24:	2300      	movs	r3, #0
 8000c26:	220a      	movs	r2, #10
 8000c28:	210a      	movs	r1, #10
 8000c2a:	4807      	ldr	r0, [pc, #28]	; (8000c48 <DM_PostInit+0x34>)
 8000c2c:	f00a fab0 	bl	800b190 <ILI9341_Draw_Text>
	  HAL_Delay(500);
 8000c30:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c34:	f004 fd9e 	bl	8005774 <HAL_Delay>

	  DM_RefreshBackgroundLayout();
 8000c38:	f000 fc24 	bl	8001484 <DM_RefreshBackgroundLayout>
	  printf("Init Completed\n");
 8000c3c:	4803      	ldr	r0, [pc, #12]	; (8000c4c <DM_PostInit+0x38>)
 8000c3e:	f00b fd91 	bl	800c764 <puts>
}
 8000c42:	bf00      	nop
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	0800e630 	.word	0x0800e630
 8000c4c:	0800e640 	.word	0x0800e640

08000c50 <DM_DisplayFormattedOutput>:
 *	@param None
 *	@retval None
 *
 */
void DM_DisplayFormattedOutput()
{
 8000c50:	b590      	push	{r4, r7, lr}
 8000c52:	b091      	sub	sp, #68	; 0x44
 8000c54:	af02      	add	r7, sp, #8
	char out_hertz[13] = "";
 8000c56:	2300      	movs	r3, #0
 8000c58:	61fb      	str	r3, [r7, #28]
 8000c5a:	f107 0320 	add.w	r3, r7, #32
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
 8000c62:	605a      	str	r2, [r3, #4]
 8000c64:	721a      	strb	r2, [r3, #8]
	uint8_t out_hertz_x = 70;
 8000c66:	2346      	movs	r3, #70	; 0x46
 8000c68:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t out_hertz_y = 50;
 8000c6c:	2332      	movs	r3, #50	; 0x32
 8000c6e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	char out_decibels[8] = "";
 8000c72:	2300      	movs	r3, #0
 8000c74:	617b      	str	r3, [r7, #20]
 8000c76:	2300      	movs	r3, #0
 8000c78:	61bb      	str	r3, [r7, #24]
	uint8_t out_decibels_x = 70;
 8000c7a:	2346      	movs	r3, #70	; 0x46
 8000c7c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	uint8_t out_decibels_y = 80;
 8000c80:	2350      	movs	r3, #80	; 0x50
 8000c82:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

	float volts_per_thou = 0.00075;
 8000c86:	4b6c      	ldr	r3, [pc, #432]	; (8000e38 <DM_DisplayFormattedOutput+0x1e8>)
 8000c88:	62fb      	str	r3, [r7, #44]	; 0x2c
	char out_dcvolts[10] = "";
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	60bb      	str	r3, [r7, #8]
 8000c8e:	f107 030c 	add.w	r3, r7, #12
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
 8000c96:	809a      	strh	r2, [r3, #4]
	uint8_t out_dcvolts_x = 70;
 8000c98:	2346      	movs	r3, #70	; 0x46
 8000c9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t out_dcvolts_y = 110;
 8000c9e:	236e      	movs	r3, #110	; 0x6e
 8000ca0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

	// display output in hertz
	snprintf(out_hertz, sizeof(out_hertz), "%4.2f Hz", SM_GetOutputInHertz());
 8000ca4:	f002 feb0 	bl	8003a08 <SM_GetOutputInHertz>
 8000ca8:	ee10 3a10 	vmov	r3, s0
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff fc73 	bl	8000598 <__aeabi_f2d>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	460c      	mov	r4, r1
 8000cb6:	f107 001c 	add.w	r0, r7, #28
 8000cba:	e9cd 3400 	strd	r3, r4, [sp]
 8000cbe:	4a5f      	ldr	r2, [pc, #380]	; (8000e3c <DM_DisplayFormattedOutput+0x1ec>)
 8000cc0:	210d      	movs	r1, #13
 8000cc2:	f00b fd57 	bl	800c774 <sniprintf>
	ILI9341_Draw_Text(out_hertz, out_hertz_x, out_hertz_y, BLACK, 3, WHITE);
 8000cc6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000cca:	b299      	uxth	r1, r3
 8000ccc:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8000cd0:	b29a      	uxth	r2, r3
 8000cd2:	f107 001c 	add.w	r0, r7, #28
 8000cd6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cda:	9301      	str	r3, [sp, #4]
 8000cdc:	2303      	movs	r3, #3
 8000cde:	9300      	str	r3, [sp, #0]
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	f00a fa55 	bl	800b190 <ILI9341_Draw_Text>

	// display output in decibels
	if(GO_GetGainInDecibels(GO_GetOutputGain()) < 0)
 8000ce6:	f002 fe67 	bl	80039b8 <GO_GetOutputGain>
 8000cea:	4603      	mov	r3, r0
 8000cec:	4618      	mov	r0, r3
 8000cee:	f002 fd65 	bl	80037bc <GO_GetGainInDecibels>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	da06      	bge.n	8000d06 <DM_DisplayFormattedOutput+0xb6>
		snprintf(out_decibels, sizeof(out_decibels), "AMP OFF");
 8000cf8:	4a51      	ldr	r2, [pc, #324]	; (8000e40 <DM_DisplayFormattedOutput+0x1f0>)
 8000cfa:	f107 0314 	add.w	r3, r7, #20
 8000cfe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d02:	e883 0003 	stmia.w	r3, {r0, r1}
	if(GO_GetGainInDecibels(GO_GetOutputGain()) == 0)
 8000d06:	f002 fe57 	bl	80039b8 <GO_GetOutputGain>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f002 fd55 	bl	80037bc <GO_GetGainInDecibels>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d10c      	bne.n	8000d32 <DM_DisplayFormattedOutput+0xe2>
		snprintf(out_decibels, sizeof(out_decibels), "  %2d dB", GO_GetGainInDecibels(GO_GetOutputGain()));
 8000d18:	f002 fe4e 	bl	80039b8 <GO_GetOutputGain>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f002 fd4c 	bl	80037bc <GO_GetGainInDecibels>
 8000d24:	4603      	mov	r3, r0
 8000d26:	f107 0014 	add.w	r0, r7, #20
 8000d2a:	4a46      	ldr	r2, [pc, #280]	; (8000e44 <DM_DisplayFormattedOutput+0x1f4>)
 8000d2c:	2108      	movs	r1, #8
 8000d2e:	f00b fd21 	bl	800c774 <sniprintf>
	if(GO_GetGainInDecibels(GO_GetOutputGain()) > 0)
 8000d32:	f002 fe41 	bl	80039b8 <GO_GetOutputGain>
 8000d36:	4603      	mov	r3, r0
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f002 fd3f 	bl	80037bc <GO_GetGainInDecibels>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	dd0c      	ble.n	8000d5e <DM_DisplayFormattedOutput+0x10e>
		snprintf(out_decibels, sizeof(out_decibels), " +%2d dB", GO_GetGainInDecibels(GO_GetOutputGain()));
 8000d44:	f002 fe38 	bl	80039b8 <GO_GetOutputGain>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f002 fd36 	bl	80037bc <GO_GetGainInDecibels>
 8000d50:	4603      	mov	r3, r0
 8000d52:	f107 0014 	add.w	r0, r7, #20
 8000d56:	4a3c      	ldr	r2, [pc, #240]	; (8000e48 <DM_DisplayFormattedOutput+0x1f8>)
 8000d58:	2108      	movs	r1, #8
 8000d5a:	f00b fd0b 	bl	800c774 <sniprintf>

	ILI9341_Draw_Text(out_decibels, out_decibels_x, out_decibels_y, BLACK, 3, WHITE);
 8000d5e:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8000d62:	b299      	uxth	r1, r3
 8000d64:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000d68:	b29a      	uxth	r2, r3
 8000d6a:	f107 0014 	add.w	r0, r7, #20
 8000d6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d72:	9301      	str	r3, [sp, #4]
 8000d74:	2303      	movs	r3, #3
 8000d76:	9300      	str	r3, [sp, #0]
 8000d78:	2300      	movs	r3, #0
 8000d7a:	f00a fa09 	bl	800b190 <ILI9341_Draw_Text>

	// display output bias in +/- Volts
	float dc_volts;
	(BO_GetOutputBias() == 0) ? (dc_volts = 0) : (dc_volts = volts_per_thou * (float)BO_GetOutputBias());
 8000d7e:	f002 fa69 	bl	8003254 <BO_GetOutputBias>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d103      	bne.n	8000d90 <DM_DisplayFormattedOutput+0x140>
 8000d88:	f04f 0300 	mov.w	r3, #0
 8000d8c:	637b      	str	r3, [r7, #52]	; 0x34
 8000d8e:	e00b      	b.n	8000da8 <DM_DisplayFormattedOutput+0x158>
 8000d90:	f002 fa60 	bl	8003254 <BO_GetOutputBias>
 8000d94:	ee07 0a90 	vmov	s15, r0
 8000d98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d9c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000da0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000da4:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	snprintf(out_dcvolts, sizeof(out_dcvolts), "%1.4f v", dc_volts);
 8000da8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000daa:	f7ff fbf5 	bl	8000598 <__aeabi_f2d>
 8000dae:	4603      	mov	r3, r0
 8000db0:	460c      	mov	r4, r1
 8000db2:	f107 0008 	add.w	r0, r7, #8
 8000db6:	e9cd 3400 	strd	r3, r4, [sp]
 8000dba:	4a24      	ldr	r2, [pc, #144]	; (8000e4c <DM_DisplayFormattedOutput+0x1fc>)
 8000dbc:	210a      	movs	r1, #10
 8000dbe:	f00b fcd9 	bl	800c774 <sniprintf>
	//if(DM_AddDigitPadding(dc_volts, out_dcvolts, sizeof(out_dcvolts)) == 0)
	//{
		if(BO_GetBiasPolarity())
 8000dc2:	f002 f9f5 	bl	80031b0 <BO_GetBiasPolarity>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d018      	beq.n	8000dfe <DM_DisplayFormattedOutput+0x1ae>
		{
			char symbol[2] = "+\0";
 8000dcc:	4b20      	ldr	r3, [pc, #128]	; (8000e50 <DM_DisplayFormattedOutput+0x200>)
 8000dce:	881b      	ldrh	r3, [r3, #0]
 8000dd0:	80bb      	strh	r3, [r7, #4]
			ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, BLACK, 3, WHITE);
 8000dd2:	f107 0208 	add.w	r2, r7, #8
 8000dd6:	1d3b      	adds	r3, r7, #4
 8000dd8:	4611      	mov	r1, r2
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f00b fcfe 	bl	800c7dc <strcat>
 8000de0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000de4:	b299      	uxth	r1, r3
 8000de6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000dea:	b29a      	uxth	r2, r3
 8000dec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000df0:	9301      	str	r3, [sp, #4]
 8000df2:	2303      	movs	r3, #3
 8000df4:	9300      	str	r3, [sp, #0]
 8000df6:	2300      	movs	r3, #0
 8000df8:	f00a f9ca 	bl	800b190 <ILI9341_Draw_Text>
		{
			char symbol[2] = "-\0";
			ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, BLACK, 3, WHITE);
		}
	//}
}
 8000dfc:	e017      	b.n	8000e2e <DM_DisplayFormattedOutput+0x1de>
			char symbol[2] = "-\0";
 8000dfe:	4b15      	ldr	r3, [pc, #84]	; (8000e54 <DM_DisplayFormattedOutput+0x204>)
 8000e00:	881b      	ldrh	r3, [r3, #0]
 8000e02:	803b      	strh	r3, [r7, #0]
			ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, BLACK, 3, WHITE);
 8000e04:	f107 0208 	add.w	r2, r7, #8
 8000e08:	463b      	mov	r3, r7
 8000e0a:	4611      	mov	r1, r2
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f00b fce5 	bl	800c7dc <strcat>
 8000e12:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000e16:	b299      	uxth	r1, r3
 8000e18:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000e1c:	b29a      	uxth	r2, r3
 8000e1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e22:	9301      	str	r3, [sp, #4]
 8000e24:	2303      	movs	r3, #3
 8000e26:	9300      	str	r3, [sp, #0]
 8000e28:	2300      	movs	r3, #0
 8000e2a:	f00a f9b1 	bl	800b190 <ILI9341_Draw_Text>
}
 8000e2e:	bf00      	nop
 8000e30:	373c      	adds	r7, #60	; 0x3c
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd90      	pop	{r4, r7, pc}
 8000e36:	bf00      	nop
 8000e38:	3a449ba6 	.word	0x3a449ba6
 8000e3c:	0800e650 	.word	0x0800e650
 8000e40:	0800e65c 	.word	0x0800e65c
 8000e44:	0800e664 	.word	0x0800e664
 8000e48:	0800e670 	.word	0x0800e670
 8000e4c:	0800e67c 	.word	0x0800e67c
 8000e50:	0800e684 	.word	0x0800e684
 8000e54:	0800e688 	.word	0x0800e688

08000e58 <DM_UpdateDisplay>:
 *	@param None
 *	@retval None
 *
 */
void DM_UpdateDisplay()
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af02      	add	r7, sp, #8


	if(eNextFuncMenuStatus)		//  == ENABLE_FUNCMENU
 8000e5e:	4b4c      	ldr	r3, [pc, #304]	; (8000f90 <DM_UpdateDisplay+0x138>)
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d002      	beq.n	8000e6c <DM_UpdateDisplay+0x14>
 		ILI9341_Draw_Text("    ", 10, 210, BLACK, 2, DARKCYAN);
		ILI9341_Draw_Text("    ", 100, 210, BLACK, 2, DARKGREEN);
		ILI9341_Draw_Text("    ", 175, 210, BLACK, 2, YELLOW);
		ILI9341_Draw_Text("    ", 260, 210, BLACK, 2, RED);
*/
		_DrawFuncSelectMenu();
 8000e66:	f000 f8b7 	bl	8000fd8 <_DrawFuncSelectMenu>
 8000e6a:	e071      	b.n	8000f50 <DM_UpdateDisplay+0xf8>
	}
	else if(eNextGainMenuStatus)		//  == ENABLE_GAINMENU
 8000e6c:	4b49      	ldr	r3, [pc, #292]	; (8000f94 <DM_UpdateDisplay+0x13c>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d004      	beq.n	8000e7e <DM_UpdateDisplay+0x26>
		ILI9341_Draw_Text("    ", 10, 210, BLACK, 2, DARKCYAN);
		ILI9341_Draw_Text("    ", 100, 210, BLACK, 2, DARKGREEN);
		ILI9341_Draw_Text("    ", 175, 210, BLACK, 2, YELLOW);
		ILI9341_Draw_Text("    ", 260, 210, BLACK, 2, RED);
*/
		DM_DisplayFormattedOutput();
 8000e74:	f7ff feec 	bl	8000c50 <DM_DisplayFormattedOutput>
		_DrawGainSelectMenu();
 8000e78:	f000 fa92 	bl	80013a0 <_DrawGainSelectMenu>
 8000e7c:	e068      	b.n	8000f50 <DM_UpdateDisplay+0xf8>
	}
	else if(eNextFreqMenuStatus)		//  frequency menu enabled
 8000e7e:	4b46      	ldr	r3, [pc, #280]	; (8000f98 <DM_UpdateDisplay+0x140>)
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d02a      	beq.n	8000edc <DM_UpdateDisplay+0x84>
	{

		ILI9341_Draw_Text("FREQUENCY MENU", 	30, 10, WHITE, 3, BLACK);
 8000e86:	2300      	movs	r3, #0
 8000e88:	9301      	str	r3, [sp, #4]
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	9300      	str	r3, [sp, #0]
 8000e8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e92:	220a      	movs	r2, #10
 8000e94:	211e      	movs	r1, #30
 8000e96:	4841      	ldr	r0, [pc, #260]	; (8000f9c <DM_UpdateDisplay+0x144>)
 8000e98:	f00a f97a 	bl	800b190 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("1Hz", 24, 210, BLACK, 2, DARKCYAN);
		ILI9341_Draw_Text("100Hz", 93, 210, BLACK, 2, DARKGREEN);
		ILI9341_Draw_Text("1KHz", 175, 210, BLACK, 2, YELLOW);
		ILI9341_Draw_Text("100KHz", 247, 210, BLACK, 2, RED);
*/
		switch(eNextFreqMenuStatus)
 8000e9c:	4b3e      	ldr	r3, [pc, #248]	; (8000f98 <DM_UpdateDisplay+0x140>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	3b01      	subs	r3, #1
 8000ea2:	2b03      	cmp	r3, #3
 8000ea4:	d853      	bhi.n	8000f4e <DM_UpdateDisplay+0xf6>
 8000ea6:	a201      	add	r2, pc, #4	; (adr r2, 8000eac <DM_UpdateDisplay+0x54>)
 8000ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eac:	08000ebd 	.word	0x08000ebd
 8000eb0:	08000ec7 	.word	0x08000ec7
 8000eb4:	08000ecd 	.word	0x08000ecd
 8000eb8:	08000ed7 	.word	0x08000ed7
		{
			case ENABLE_FREQ_MAIN_MENU:

				DM_DisplayFormattedOutput();
 8000ebc:	f7ff fec8 	bl	8000c50 <DM_DisplayFormattedOutput>

				FreqMenu_DrawFreqMainMenu();
 8000ec0:	f000 fb8c 	bl	80015dc <FreqMenu_DrawFreqMainMenu>

				break;
 8000ec4:	e044      	b.n	8000f50 <DM_UpdateDisplay+0xf8>

			case ENABLE_FREQ_PRESET_MENU:
				FreqMenu_DrawFreqPresetMenu();
 8000ec6:	f000 fbc3 	bl	8001650 <FreqMenu_DrawFreqPresetMenu>
				break;
 8000eca:	e041      	b.n	8000f50 <DM_UpdateDisplay+0xf8>

			case ENABLE_FREQ_ADJUST_MENU:

				DM_DisplayFormattedOutput();
 8000ecc:	f7ff fec0 	bl	8000c50 <DM_DisplayFormattedOutput>

				FreqMenu_DrawFreqAdjustMenu();
 8000ed0:	f001 fe44 	bl	8002b5c <FreqMenu_DrawFreqAdjustMenu>

				break;
 8000ed4:	e03c      	b.n	8000f50 <DM_UpdateDisplay+0xf8>

			case ENABLE_FREQ_SWEEP_MENU:
				FreqMenu_DrawFreqSweepMenu();
 8000ed6:	f001 fe71 	bl	8002bbc <FreqMenu_DrawFreqSweepMenu>
				break;
 8000eda:	e039      	b.n	8000f50 <DM_UpdateDisplay+0xf8>
			default:
				break;
		}

	}
	else if(eNextBiasMenuStatus)		//  == ENABLE_BIASMENU
 8000edc:	4b30      	ldr	r3, [pc, #192]	; (8000fa0 <DM_UpdateDisplay+0x148>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d004      	beq.n	8000eee <DM_UpdateDisplay+0x96>
		ILI9341_Draw_Text("    ", 10, 210, BLACK, 2, DARKCYAN);
		ILI9341_Draw_Text("    ", 100, 210, BLACK, 2, DARKGREEN);
		ILI9341_Draw_Text("    ", 175, 210, BLACK, 2, YELLOW);
		ILI9341_Draw_Text("    ", 260, 210, BLACK, 2, RED);
*/
		DM_DisplayFormattedOutput();
 8000ee4:	f7ff feb4 	bl	8000c50 <DM_DisplayFormattedOutput>
		_DrawBiasSelectMenu();
 8000ee8:	f000 fa8e 	bl	8001408 <_DrawBiasSelectMenu>
 8000eec:	e030      	b.n	8000f50 <DM_UpdateDisplay+0xf8>
	}
	else
	{
		DM_DisplayFormattedOutput();
 8000eee:	f7ff feaf 	bl	8000c50 <DM_DisplayFormattedOutput>

		ILI9341_Draw_Text("FUNC", 10, 210, BLACK, 2, DARKCYAN);
 8000ef2:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8000ef6:	9301      	str	r3, [sp, #4]
 8000ef8:	2302      	movs	r3, #2
 8000efa:	9300      	str	r3, [sp, #0]
 8000efc:	2300      	movs	r3, #0
 8000efe:	22d2      	movs	r2, #210	; 0xd2
 8000f00:	210a      	movs	r1, #10
 8000f02:	4828      	ldr	r0, [pc, #160]	; (8000fa4 <DM_UpdateDisplay+0x14c>)
 8000f04:	f00a f944 	bl	800b190 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("FREQ", 100, 210, BLACK, 2, DARKGREEN);
 8000f08:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8000f0c:	9301      	str	r3, [sp, #4]
 8000f0e:	2302      	movs	r3, #2
 8000f10:	9300      	str	r3, [sp, #0]
 8000f12:	2300      	movs	r3, #0
 8000f14:	22d2      	movs	r2, #210	; 0xd2
 8000f16:	2164      	movs	r1, #100	; 0x64
 8000f18:	4823      	ldr	r0, [pc, #140]	; (8000fa8 <DM_UpdateDisplay+0x150>)
 8000f1a:	f00a f939 	bl	800b190 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("GAIN", 175, 210, BLACK, 2, YELLOW);
 8000f1e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000f22:	9301      	str	r3, [sp, #4]
 8000f24:	2302      	movs	r3, #2
 8000f26:	9300      	str	r3, [sp, #0]
 8000f28:	2300      	movs	r3, #0
 8000f2a:	22d2      	movs	r2, #210	; 0xd2
 8000f2c:	21af      	movs	r1, #175	; 0xaf
 8000f2e:	481f      	ldr	r0, [pc, #124]	; (8000fac <DM_UpdateDisplay+0x154>)
 8000f30:	f00a f92e 	bl	800b190 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("BIAS", 260, 210, BLACK, 2, RED);
 8000f34:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000f38:	9301      	str	r3, [sp, #4]
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	9300      	str	r3, [sp, #0]
 8000f3e:	2300      	movs	r3, #0
 8000f40:	22d2      	movs	r2, #210	; 0xd2
 8000f42:	f44f 7182 	mov.w	r1, #260	; 0x104
 8000f46:	481a      	ldr	r0, [pc, #104]	; (8000fb0 <DM_UpdateDisplay+0x158>)
 8000f48:	f00a f922 	bl	800b190 <ILI9341_Draw_Text>
 8000f4c:	e000      	b.n	8000f50 <DM_UpdateDisplay+0xf8>
				break;
 8000f4e:	bf00      	nop
	}

#ifdef ENCODER_DEBUG
	char tim1tmp[5] = "";
 8000f50:	2300      	movs	r3, #0
 8000f52:	603b      	str	r3, [r7, #0]
 8000f54:	2300      	movs	r3, #0
 8000f56:	713b      	strb	r3, [r7, #4]
	//snprintf(tim1tmp, sizeof(tim1tmp), "%lu", ENCODER_TIMER->CNT);
	if(DM_AddDigitPadding(ENCODER_TIMER->CNT, tim1tmp, sizeof(tim1tmp)) == 0)
 8000f58:	4b16      	ldr	r3, [pc, #88]	; (8000fb4 <DM_UpdateDisplay+0x15c>)
 8000f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f5c:	b29b      	uxth	r3, r3
 8000f5e:	4639      	mov	r1, r7
 8000f60:	2205      	movs	r2, #5
 8000f62:	4618      	mov	r0, r3
 8000f64:	f000 fad0 	bl	8001508 <DM_AddDigitPadding>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d10b      	bne.n	8000f86 <DM_UpdateDisplay+0x12e>
		ILI9341_Draw_Text(tim1tmp, 260, 180, BLACK, 2, RED);
 8000f6e:	4638      	mov	r0, r7
 8000f70:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000f74:	9301      	str	r3, [sp, #4]
 8000f76:	2302      	movs	r3, #2
 8000f78:	9300      	str	r3, [sp, #0]
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	22b4      	movs	r2, #180	; 0xb4
 8000f7e:	f44f 7182 	mov.w	r1, #260	; 0x104
 8000f82:	f00a f905 	bl	800b190 <ILI9341_Draw_Text>
/*
	if((TIM1->SR & TIM_SR_IDXF) == TIM_SR_IDXF)
	{
		TIM1->SR &= ~(TIM_SR_IDXF);
	}*/
}
 8000f86:	bf00      	nop
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	200013ec 	.word	0x200013ec
 8000f94:	200013ed 	.word	0x200013ed
 8000f98:	200013ee 	.word	0x200013ee
 8000f9c:	0800e68c 	.word	0x0800e68c
 8000fa0:	200013ef 	.word	0x200013ef
 8000fa4:	0800e69c 	.word	0x0800e69c
 8000fa8:	0800e6a4 	.word	0x0800e6a4
 8000fac:	0800e6ac 	.word	0x0800e6ac
 8000fb0:	0800e6b4 	.word	0x0800e6b4
 8000fb4:	40012c00 	.word	0x40012c00

08000fb8 <DM_ShowFuncSelectMenu>:
 *	@param None
 *	@retval None
 *
 */
void DM_ShowFuncSelectMenu(eFuncMenu_Status pValue)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	eNextFuncMenuStatus = pValue;
 8000fc2:	4a04      	ldr	r2, [pc, #16]	; (8000fd4 <DM_ShowFuncSelectMenu+0x1c>)
 8000fc4:	79fb      	ldrb	r3, [r7, #7]
 8000fc6:	7013      	strb	r3, [r2, #0]
}
 8000fc8:	bf00      	nop
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	200013ec 	.word	0x200013ec

08000fd8 <_DrawFuncSelectMenu>:
 *	@param None
 *	@retval None
 *
 */
void _DrawFuncSelectMenu()
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("SELECT FUNCTION", 	10, 10, WHITE, 3, BLACK);
 8000fde:	2300      	movs	r3, #0
 8000fe0:	9301      	str	r3, [sp, #4]
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	9300      	str	r3, [sp, #0]
 8000fe6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fea:	220a      	movs	r2, #10
 8000fec:	210a      	movs	r1, #10
 8000fee:	48b4      	ldr	r0, [pc, #720]	; (80012c0 <_DrawFuncSelectMenu+0x2e8>)
 8000ff0:	f00a f8ce 	bl	800b190 <ILI9341_Draw_Text>

	switch(FuncO_GetOutputMode())
 8000ff4:	f002 fbd6 	bl	80037a4 <FuncO_GetOutputMode>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b05      	cmp	r3, #5
 8000ffc:	f200 81b1 	bhi.w	8001362 <_DrawFuncSelectMenu+0x38a>
 8001000:	a201      	add	r2, pc, #4	; (adr r2, 8001008 <_DrawFuncSelectMenu+0x30>)
 8001002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001006:	bf00      	nop
 8001008:	08001021 	.word	0x08001021
 800100c:	080010a7 	.word	0x080010a7
 8001010:	0800112d 	.word	0x0800112d
 8001014:	080011b3 	.word	0x080011b3
 8001018:	08001239 	.word	0x08001239
 800101c:	080012dd 	.word	0x080012dd
	{
		case Sine_Out_Mode:
			ILI9341_Draw_Text("- SINE", 	10, 50, WHITE, 2, BLACK);
 8001020:	2300      	movs	r3, #0
 8001022:	9301      	str	r3, [sp, #4]
 8001024:	2302      	movs	r3, #2
 8001026:	9300      	str	r3, [sp, #0]
 8001028:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800102c:	2232      	movs	r2, #50	; 0x32
 800102e:	210a      	movs	r1, #10
 8001030:	48a4      	ldr	r0, [pc, #656]	; (80012c4 <_DrawFuncSelectMenu+0x2ec>)
 8001032:	f00a f8ad 	bl	800b190 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SQUARE", 	10, 70, BLACK, 2, WHITE);
 8001036:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800103a:	9301      	str	r3, [sp, #4]
 800103c:	2302      	movs	r3, #2
 800103e:	9300      	str	r3, [sp, #0]
 8001040:	2300      	movs	r3, #0
 8001042:	2246      	movs	r2, #70	; 0x46
 8001044:	210a      	movs	r1, #10
 8001046:	48a0      	ldr	r0, [pc, #640]	; (80012c8 <_DrawFuncSelectMenu+0x2f0>)
 8001048:	f00a f8a2 	bl	800b190 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SAW", 		10, 90, BLACK, 2, WHITE);
 800104c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001050:	9301      	str	r3, [sp, #4]
 8001052:	2302      	movs	r3, #2
 8001054:	9300      	str	r3, [sp, #0]
 8001056:	2300      	movs	r3, #0
 8001058:	225a      	movs	r2, #90	; 0x5a
 800105a:	210a      	movs	r1, #10
 800105c:	489b      	ldr	r0, [pc, #620]	; (80012cc <_DrawFuncSelectMenu+0x2f4>)
 800105e:	f00a f897 	bl	800b190 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- REV SAW", 	10, 110, BLACK, 2, WHITE);
 8001062:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001066:	9301      	str	r3, [sp, #4]
 8001068:	2302      	movs	r3, #2
 800106a:	9300      	str	r3, [sp, #0]
 800106c:	2300      	movs	r3, #0
 800106e:	226e      	movs	r2, #110	; 0x6e
 8001070:	210a      	movs	r1, #10
 8001072:	4897      	ldr	r0, [pc, #604]	; (80012d0 <_DrawFuncSelectMenu+0x2f8>)
 8001074:	f00a f88c 	bl	800b190 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- TRIANGLE",	10, 130, BLACK, 2, WHITE);
 8001078:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800107c:	9301      	str	r3, [sp, #4]
 800107e:	2302      	movs	r3, #2
 8001080:	9300      	str	r3, [sp, #0]
 8001082:	2300      	movs	r3, #0
 8001084:	2282      	movs	r2, #130	; 0x82
 8001086:	210a      	movs	r1, #10
 8001088:	4892      	ldr	r0, [pc, #584]	; (80012d4 <_DrawFuncSelectMenu+0x2fc>)
 800108a:	f00a f881 	bl	800b190 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- UNIT", 	10, 150, BLACK, 2, WHITE);
 800108e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001092:	9301      	str	r3, [sp, #4]
 8001094:	2302      	movs	r3, #2
 8001096:	9300      	str	r3, [sp, #0]
 8001098:	2300      	movs	r3, #0
 800109a:	2296      	movs	r2, #150	; 0x96
 800109c:	210a      	movs	r1, #10
 800109e:	488e      	ldr	r0, [pc, #568]	; (80012d8 <_DrawFuncSelectMenu+0x300>)
 80010a0:	f00a f876 	bl	800b190 <ILI9341_Draw_Text>
			break;
 80010a4:	e15d      	b.n	8001362 <_DrawFuncSelectMenu+0x38a>
		case Square_Out_Mode:
			ILI9341_Draw_Text("- SINE", 	10, 50, BLACK, 2, WHITE);
 80010a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010aa:	9301      	str	r3, [sp, #4]
 80010ac:	2302      	movs	r3, #2
 80010ae:	9300      	str	r3, [sp, #0]
 80010b0:	2300      	movs	r3, #0
 80010b2:	2232      	movs	r2, #50	; 0x32
 80010b4:	210a      	movs	r1, #10
 80010b6:	4883      	ldr	r0, [pc, #524]	; (80012c4 <_DrawFuncSelectMenu+0x2ec>)
 80010b8:	f00a f86a 	bl	800b190 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SQUARE", 	10, 70, WHITE, 2, BLACK);
 80010bc:	2300      	movs	r3, #0
 80010be:	9301      	str	r3, [sp, #4]
 80010c0:	2302      	movs	r3, #2
 80010c2:	9300      	str	r3, [sp, #0]
 80010c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010c8:	2246      	movs	r2, #70	; 0x46
 80010ca:	210a      	movs	r1, #10
 80010cc:	487e      	ldr	r0, [pc, #504]	; (80012c8 <_DrawFuncSelectMenu+0x2f0>)
 80010ce:	f00a f85f 	bl	800b190 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SAW", 		10, 90, BLACK, 2, WHITE);
 80010d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010d6:	9301      	str	r3, [sp, #4]
 80010d8:	2302      	movs	r3, #2
 80010da:	9300      	str	r3, [sp, #0]
 80010dc:	2300      	movs	r3, #0
 80010de:	225a      	movs	r2, #90	; 0x5a
 80010e0:	210a      	movs	r1, #10
 80010e2:	487a      	ldr	r0, [pc, #488]	; (80012cc <_DrawFuncSelectMenu+0x2f4>)
 80010e4:	f00a f854 	bl	800b190 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- REV SAW", 	10, 110, BLACK, 2, WHITE);
 80010e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010ec:	9301      	str	r3, [sp, #4]
 80010ee:	2302      	movs	r3, #2
 80010f0:	9300      	str	r3, [sp, #0]
 80010f2:	2300      	movs	r3, #0
 80010f4:	226e      	movs	r2, #110	; 0x6e
 80010f6:	210a      	movs	r1, #10
 80010f8:	4875      	ldr	r0, [pc, #468]	; (80012d0 <_DrawFuncSelectMenu+0x2f8>)
 80010fa:	f00a f849 	bl	800b190 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- TRIANGLE",	10, 130, BLACK, 2, WHITE);
 80010fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001102:	9301      	str	r3, [sp, #4]
 8001104:	2302      	movs	r3, #2
 8001106:	9300      	str	r3, [sp, #0]
 8001108:	2300      	movs	r3, #0
 800110a:	2282      	movs	r2, #130	; 0x82
 800110c:	210a      	movs	r1, #10
 800110e:	4871      	ldr	r0, [pc, #452]	; (80012d4 <_DrawFuncSelectMenu+0x2fc>)
 8001110:	f00a f83e 	bl	800b190 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- UNIT", 	10, 150, BLACK, 2, WHITE);
 8001114:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001118:	9301      	str	r3, [sp, #4]
 800111a:	2302      	movs	r3, #2
 800111c:	9300      	str	r3, [sp, #0]
 800111e:	2300      	movs	r3, #0
 8001120:	2296      	movs	r2, #150	; 0x96
 8001122:	210a      	movs	r1, #10
 8001124:	486c      	ldr	r0, [pc, #432]	; (80012d8 <_DrawFuncSelectMenu+0x300>)
 8001126:	f00a f833 	bl	800b190 <ILI9341_Draw_Text>
			break;
 800112a:	e11a      	b.n	8001362 <_DrawFuncSelectMenu+0x38a>
		case Saw_Out_Mode:
			ILI9341_Draw_Text("- SINE", 	10, 50, BLACK, 2, WHITE);
 800112c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001130:	9301      	str	r3, [sp, #4]
 8001132:	2302      	movs	r3, #2
 8001134:	9300      	str	r3, [sp, #0]
 8001136:	2300      	movs	r3, #0
 8001138:	2232      	movs	r2, #50	; 0x32
 800113a:	210a      	movs	r1, #10
 800113c:	4861      	ldr	r0, [pc, #388]	; (80012c4 <_DrawFuncSelectMenu+0x2ec>)
 800113e:	f00a f827 	bl	800b190 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SQUARE", 	10, 70, BLACK, 2, WHITE);
 8001142:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001146:	9301      	str	r3, [sp, #4]
 8001148:	2302      	movs	r3, #2
 800114a:	9300      	str	r3, [sp, #0]
 800114c:	2300      	movs	r3, #0
 800114e:	2246      	movs	r2, #70	; 0x46
 8001150:	210a      	movs	r1, #10
 8001152:	485d      	ldr	r0, [pc, #372]	; (80012c8 <_DrawFuncSelectMenu+0x2f0>)
 8001154:	f00a f81c 	bl	800b190 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SAW", 		10, 90, WHITE, 2, BLACK);
 8001158:	2300      	movs	r3, #0
 800115a:	9301      	str	r3, [sp, #4]
 800115c:	2302      	movs	r3, #2
 800115e:	9300      	str	r3, [sp, #0]
 8001160:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001164:	225a      	movs	r2, #90	; 0x5a
 8001166:	210a      	movs	r1, #10
 8001168:	4858      	ldr	r0, [pc, #352]	; (80012cc <_DrawFuncSelectMenu+0x2f4>)
 800116a:	f00a f811 	bl	800b190 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- REV SAW", 	10, 110, BLACK, 2, WHITE);
 800116e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001172:	9301      	str	r3, [sp, #4]
 8001174:	2302      	movs	r3, #2
 8001176:	9300      	str	r3, [sp, #0]
 8001178:	2300      	movs	r3, #0
 800117a:	226e      	movs	r2, #110	; 0x6e
 800117c:	210a      	movs	r1, #10
 800117e:	4854      	ldr	r0, [pc, #336]	; (80012d0 <_DrawFuncSelectMenu+0x2f8>)
 8001180:	f00a f806 	bl	800b190 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- TRIANGLE",	10, 130, BLACK, 2, WHITE);
 8001184:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001188:	9301      	str	r3, [sp, #4]
 800118a:	2302      	movs	r3, #2
 800118c:	9300      	str	r3, [sp, #0]
 800118e:	2300      	movs	r3, #0
 8001190:	2282      	movs	r2, #130	; 0x82
 8001192:	210a      	movs	r1, #10
 8001194:	484f      	ldr	r0, [pc, #316]	; (80012d4 <_DrawFuncSelectMenu+0x2fc>)
 8001196:	f009 fffb 	bl	800b190 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- UNIT", 	10, 150, BLACK, 2, WHITE);
 800119a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800119e:	9301      	str	r3, [sp, #4]
 80011a0:	2302      	movs	r3, #2
 80011a2:	9300      	str	r3, [sp, #0]
 80011a4:	2300      	movs	r3, #0
 80011a6:	2296      	movs	r2, #150	; 0x96
 80011a8:	210a      	movs	r1, #10
 80011aa:	484b      	ldr	r0, [pc, #300]	; (80012d8 <_DrawFuncSelectMenu+0x300>)
 80011ac:	f009 fff0 	bl	800b190 <ILI9341_Draw_Text>
			break;
 80011b0:	e0d7      	b.n	8001362 <_DrawFuncSelectMenu+0x38a>
		case RevSaw_Out_Mode:
			ILI9341_Draw_Text("- SINE", 	10, 50, BLACK, 2, WHITE);
 80011b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011b6:	9301      	str	r3, [sp, #4]
 80011b8:	2302      	movs	r3, #2
 80011ba:	9300      	str	r3, [sp, #0]
 80011bc:	2300      	movs	r3, #0
 80011be:	2232      	movs	r2, #50	; 0x32
 80011c0:	210a      	movs	r1, #10
 80011c2:	4840      	ldr	r0, [pc, #256]	; (80012c4 <_DrawFuncSelectMenu+0x2ec>)
 80011c4:	f009 ffe4 	bl	800b190 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SQUARE", 	10, 70, BLACK, 2, WHITE);
 80011c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011cc:	9301      	str	r3, [sp, #4]
 80011ce:	2302      	movs	r3, #2
 80011d0:	9300      	str	r3, [sp, #0]
 80011d2:	2300      	movs	r3, #0
 80011d4:	2246      	movs	r2, #70	; 0x46
 80011d6:	210a      	movs	r1, #10
 80011d8:	483b      	ldr	r0, [pc, #236]	; (80012c8 <_DrawFuncSelectMenu+0x2f0>)
 80011da:	f009 ffd9 	bl	800b190 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SAW", 		10, 90, BLACK, 2, WHITE);
 80011de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011e2:	9301      	str	r3, [sp, #4]
 80011e4:	2302      	movs	r3, #2
 80011e6:	9300      	str	r3, [sp, #0]
 80011e8:	2300      	movs	r3, #0
 80011ea:	225a      	movs	r2, #90	; 0x5a
 80011ec:	210a      	movs	r1, #10
 80011ee:	4837      	ldr	r0, [pc, #220]	; (80012cc <_DrawFuncSelectMenu+0x2f4>)
 80011f0:	f009 ffce 	bl	800b190 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- REV SAW", 	10, 110, WHITE, 2, BLACK);
 80011f4:	2300      	movs	r3, #0
 80011f6:	9301      	str	r3, [sp, #4]
 80011f8:	2302      	movs	r3, #2
 80011fa:	9300      	str	r3, [sp, #0]
 80011fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001200:	226e      	movs	r2, #110	; 0x6e
 8001202:	210a      	movs	r1, #10
 8001204:	4832      	ldr	r0, [pc, #200]	; (80012d0 <_DrawFuncSelectMenu+0x2f8>)
 8001206:	f009 ffc3 	bl	800b190 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- TRIANGLE",	10, 130, BLACK, 2, WHITE);
 800120a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800120e:	9301      	str	r3, [sp, #4]
 8001210:	2302      	movs	r3, #2
 8001212:	9300      	str	r3, [sp, #0]
 8001214:	2300      	movs	r3, #0
 8001216:	2282      	movs	r2, #130	; 0x82
 8001218:	210a      	movs	r1, #10
 800121a:	482e      	ldr	r0, [pc, #184]	; (80012d4 <_DrawFuncSelectMenu+0x2fc>)
 800121c:	f009 ffb8 	bl	800b190 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- UNIT", 	10, 150, BLACK, 2, WHITE);
 8001220:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001224:	9301      	str	r3, [sp, #4]
 8001226:	2302      	movs	r3, #2
 8001228:	9300      	str	r3, [sp, #0]
 800122a:	2300      	movs	r3, #0
 800122c:	2296      	movs	r2, #150	; 0x96
 800122e:	210a      	movs	r1, #10
 8001230:	4829      	ldr	r0, [pc, #164]	; (80012d8 <_DrawFuncSelectMenu+0x300>)
 8001232:	f009 ffad 	bl	800b190 <ILI9341_Draw_Text>
			break;
 8001236:	e094      	b.n	8001362 <_DrawFuncSelectMenu+0x38a>
		case Triangle_Out_Mode:
			ILI9341_Draw_Text("- SINE", 	10, 50, BLACK, 2, WHITE);
 8001238:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800123c:	9301      	str	r3, [sp, #4]
 800123e:	2302      	movs	r3, #2
 8001240:	9300      	str	r3, [sp, #0]
 8001242:	2300      	movs	r3, #0
 8001244:	2232      	movs	r2, #50	; 0x32
 8001246:	210a      	movs	r1, #10
 8001248:	481e      	ldr	r0, [pc, #120]	; (80012c4 <_DrawFuncSelectMenu+0x2ec>)
 800124a:	f009 ffa1 	bl	800b190 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SQUARE", 	10, 70, BLACK, 2, WHITE);
 800124e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001252:	9301      	str	r3, [sp, #4]
 8001254:	2302      	movs	r3, #2
 8001256:	9300      	str	r3, [sp, #0]
 8001258:	2300      	movs	r3, #0
 800125a:	2246      	movs	r2, #70	; 0x46
 800125c:	210a      	movs	r1, #10
 800125e:	481a      	ldr	r0, [pc, #104]	; (80012c8 <_DrawFuncSelectMenu+0x2f0>)
 8001260:	f009 ff96 	bl	800b190 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SAW", 		10, 90, BLACK, 2, WHITE);
 8001264:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001268:	9301      	str	r3, [sp, #4]
 800126a:	2302      	movs	r3, #2
 800126c:	9300      	str	r3, [sp, #0]
 800126e:	2300      	movs	r3, #0
 8001270:	225a      	movs	r2, #90	; 0x5a
 8001272:	210a      	movs	r1, #10
 8001274:	4815      	ldr	r0, [pc, #84]	; (80012cc <_DrawFuncSelectMenu+0x2f4>)
 8001276:	f009 ff8b 	bl	800b190 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- REV SAW", 	10, 110, BLACK, 2, WHITE);
 800127a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800127e:	9301      	str	r3, [sp, #4]
 8001280:	2302      	movs	r3, #2
 8001282:	9300      	str	r3, [sp, #0]
 8001284:	2300      	movs	r3, #0
 8001286:	226e      	movs	r2, #110	; 0x6e
 8001288:	210a      	movs	r1, #10
 800128a:	4811      	ldr	r0, [pc, #68]	; (80012d0 <_DrawFuncSelectMenu+0x2f8>)
 800128c:	f009 ff80 	bl	800b190 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- TRIANGLE",	10, 130, WHITE, 2, BLACK);
 8001290:	2300      	movs	r3, #0
 8001292:	9301      	str	r3, [sp, #4]
 8001294:	2302      	movs	r3, #2
 8001296:	9300      	str	r3, [sp, #0]
 8001298:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800129c:	2282      	movs	r2, #130	; 0x82
 800129e:	210a      	movs	r1, #10
 80012a0:	480c      	ldr	r0, [pc, #48]	; (80012d4 <_DrawFuncSelectMenu+0x2fc>)
 80012a2:	f009 ff75 	bl	800b190 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- UNIT", 	10, 150, BLACK, 2, WHITE);
 80012a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012aa:	9301      	str	r3, [sp, #4]
 80012ac:	2302      	movs	r3, #2
 80012ae:	9300      	str	r3, [sp, #0]
 80012b0:	2300      	movs	r3, #0
 80012b2:	2296      	movs	r2, #150	; 0x96
 80012b4:	210a      	movs	r1, #10
 80012b6:	4808      	ldr	r0, [pc, #32]	; (80012d8 <_DrawFuncSelectMenu+0x300>)
 80012b8:	f009 ff6a 	bl	800b190 <ILI9341_Draw_Text>
			break;
 80012bc:	e051      	b.n	8001362 <_DrawFuncSelectMenu+0x38a>
 80012be:	bf00      	nop
 80012c0:	0800e6bc 	.word	0x0800e6bc
 80012c4:	0800e6cc 	.word	0x0800e6cc
 80012c8:	0800e6d4 	.word	0x0800e6d4
 80012cc:	0800e6e0 	.word	0x0800e6e0
 80012d0:	0800e6e8 	.word	0x0800e6e8
 80012d4:	0800e6f4 	.word	0x0800e6f4
 80012d8:	0800e700 	.word	0x0800e700
		case Impulse_Out_Mode:
			ILI9341_Draw_Text("- SINE", 	10, 50, BLACK, 2, WHITE);
 80012dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012e0:	9301      	str	r3, [sp, #4]
 80012e2:	2302      	movs	r3, #2
 80012e4:	9300      	str	r3, [sp, #0]
 80012e6:	2300      	movs	r3, #0
 80012e8:	2232      	movs	r2, #50	; 0x32
 80012ea:	210a      	movs	r1, #10
 80012ec:	481e      	ldr	r0, [pc, #120]	; (8001368 <_DrawFuncSelectMenu+0x390>)
 80012ee:	f009 ff4f 	bl	800b190 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SQUARE", 	10, 70, BLACK, 2, WHITE);
 80012f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012f6:	9301      	str	r3, [sp, #4]
 80012f8:	2302      	movs	r3, #2
 80012fa:	9300      	str	r3, [sp, #0]
 80012fc:	2300      	movs	r3, #0
 80012fe:	2246      	movs	r2, #70	; 0x46
 8001300:	210a      	movs	r1, #10
 8001302:	481a      	ldr	r0, [pc, #104]	; (800136c <_DrawFuncSelectMenu+0x394>)
 8001304:	f009 ff44 	bl	800b190 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SAW", 		10, 90, BLACK, 2, WHITE);
 8001308:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800130c:	9301      	str	r3, [sp, #4]
 800130e:	2302      	movs	r3, #2
 8001310:	9300      	str	r3, [sp, #0]
 8001312:	2300      	movs	r3, #0
 8001314:	225a      	movs	r2, #90	; 0x5a
 8001316:	210a      	movs	r1, #10
 8001318:	4815      	ldr	r0, [pc, #84]	; (8001370 <_DrawFuncSelectMenu+0x398>)
 800131a:	f009 ff39 	bl	800b190 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- REV SAW", 	10, 110, BLACK, 2, WHITE);
 800131e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001322:	9301      	str	r3, [sp, #4]
 8001324:	2302      	movs	r3, #2
 8001326:	9300      	str	r3, [sp, #0]
 8001328:	2300      	movs	r3, #0
 800132a:	226e      	movs	r2, #110	; 0x6e
 800132c:	210a      	movs	r1, #10
 800132e:	4811      	ldr	r0, [pc, #68]	; (8001374 <_DrawFuncSelectMenu+0x39c>)
 8001330:	f009 ff2e 	bl	800b190 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- TRIANGLE",	10, 130, BLACK, 2, WHITE);
 8001334:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001338:	9301      	str	r3, [sp, #4]
 800133a:	2302      	movs	r3, #2
 800133c:	9300      	str	r3, [sp, #0]
 800133e:	2300      	movs	r3, #0
 8001340:	2282      	movs	r2, #130	; 0x82
 8001342:	210a      	movs	r1, #10
 8001344:	480c      	ldr	r0, [pc, #48]	; (8001378 <_DrawFuncSelectMenu+0x3a0>)
 8001346:	f009 ff23 	bl	800b190 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- UNIT", 	10, 150, WHITE, 2, BLACK);
 800134a:	2300      	movs	r3, #0
 800134c:	9301      	str	r3, [sp, #4]
 800134e:	2302      	movs	r3, #2
 8001350:	9300      	str	r3, [sp, #0]
 8001352:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001356:	2296      	movs	r2, #150	; 0x96
 8001358:	210a      	movs	r1, #10
 800135a:	4808      	ldr	r0, [pc, #32]	; (800137c <_DrawFuncSelectMenu+0x3a4>)
 800135c:	f009 ff18 	bl	800b190 <ILI9341_Draw_Text>
			break;
 8001360:	bf00      	nop

	}

}
 8001362:	bf00      	nop
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	0800e6cc 	.word	0x0800e6cc
 800136c:	0800e6d4 	.word	0x0800e6d4
 8001370:	0800e6e0 	.word	0x0800e6e0
 8001374:	0800e6e8 	.word	0x0800e6e8
 8001378:	0800e6f4 	.word	0x0800e6f4
 800137c:	0800e700 	.word	0x0800e700

08001380 <DM_ShowGainSelectMenu>:
 *	@param None
 *	@retval None
 *
 */
void DM_ShowGainSelectMenu(eGainMenu_Status pValue)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	4603      	mov	r3, r0
 8001388:	71fb      	strb	r3, [r7, #7]
	eNextGainMenuStatus = pValue;
 800138a:	4a04      	ldr	r2, [pc, #16]	; (800139c <DM_ShowGainSelectMenu+0x1c>)
 800138c:	79fb      	ldrb	r3, [r7, #7]
 800138e:	7013      	strb	r3, [r2, #0]
}
 8001390:	bf00      	nop
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr
 800139c:	200013ed 	.word	0x200013ed

080013a0 <_DrawGainSelectMenu>:
 *	@param None
 *	@retval None
 *
 */
void _DrawGainSelectMenu()
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("ADJUST GAIN", 	40, 10, WHITE, 3, BLACK);
 80013a6:	2300      	movs	r3, #0
 80013a8:	9301      	str	r3, [sp, #4]
 80013aa:	2303      	movs	r3, #3
 80013ac:	9300      	str	r3, [sp, #0]
 80013ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013b2:	220a      	movs	r2, #10
 80013b4:	2128      	movs	r1, #40	; 0x28
 80013b6:	4803      	ldr	r0, [pc, #12]	; (80013c4 <_DrawGainSelectMenu+0x24>)
 80013b8:	f009 feea 	bl	800b190 <ILI9341_Draw_Text>
	char gain[4] = "";
	//snprintf(gain, sizeof(gain), "%u", GO_GetOutputGain());
	if(DM_AddDigitPadding((uint16_t)GO_GetOutputGain(), gain, sizeof(gain)) == 0)
		ILI9341_Draw_Text(gain, 250, 150, WHITE, 1, BLACK);
*/
}
 80013bc:	bf00      	nop
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	0800e708 	.word	0x0800e708

080013c8 <DM_ShowFreqMenu>:
 *	@param None
 *	@retval None
 *
 */
void DM_ShowFreqMenu(eFreqMenu_Status pValue)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	4603      	mov	r3, r0
 80013d0:	71fb      	strb	r3, [r7, #7]
	eNextFreqMenuStatus = pValue;
 80013d2:	4a04      	ldr	r2, [pc, #16]	; (80013e4 <DM_ShowFreqMenu+0x1c>)
 80013d4:	79fb      	ldrb	r3, [r7, #7]
 80013d6:	7013      	strb	r3, [r2, #0]
}
 80013d8:	bf00      	nop
 80013da:	370c      	adds	r7, #12
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr
 80013e4:	200013ee 	.word	0x200013ee

080013e8 <DM_ShowBiasSelectMenu>:
 *	@param None
 *	@retval None
 *
 */
void DM_ShowBiasSelectMenu(eBiasMenu_Status pValue)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	4603      	mov	r3, r0
 80013f0:	71fb      	strb	r3, [r7, #7]
	eNextBiasMenuStatus = pValue;
 80013f2:	4a04      	ldr	r2, [pc, #16]	; (8001404 <DM_ShowBiasSelectMenu+0x1c>)
 80013f4:	79fb      	ldrb	r3, [r7, #7]
 80013f6:	7013      	strb	r3, [r2, #0]
}
 80013f8:	bf00      	nop
 80013fa:	370c      	adds	r7, #12
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr
 8001404:	200013ef 	.word	0x200013ef

08001408 <_DrawBiasSelectMenu>:
 *	@param None
 *	@retval None
 *
 */
void _DrawBiasSelectMenu()
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("ADJUST DC BIAS", 	30, 10, WHITE, 3, BLACK);
 800140e:	2300      	movs	r3, #0
 8001410:	9301      	str	r3, [sp, #4]
 8001412:	2303      	movs	r3, #3
 8001414:	9300      	str	r3, [sp, #0]
 8001416:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800141a:	220a      	movs	r2, #10
 800141c:	211e      	movs	r1, #30
 800141e:	4803      	ldr	r0, [pc, #12]	; (800142c <_DrawBiasSelectMenu+0x24>)
 8001420:	f009 feb6 	bl	800b190 <ILI9341_Draw_Text>
			char symbol[2] = "-\0";
			ILI9341_Draw_Text(strcat(symbol, bias), 250, 150, WHITE, 1, BLACK);
		}
	}
*/
}
 8001424:	bf00      	nop
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	0800e714 	.word	0x0800e714

08001430 <DM_DigitCount>:
 *	@param None
 *	@retval None
 *
 */
int DM_DigitCount(int num)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
	if(num < 10)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2b09      	cmp	r3, #9
 800143c:	dc01      	bgt.n	8001442 <DM_DigitCount+0x12>
		return 1;
 800143e:	2301      	movs	r3, #1
 8001440:	e018      	b.n	8001474 <DM_DigitCount+0x44>
	if(num < 100)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2b63      	cmp	r3, #99	; 0x63
 8001446:	dc01      	bgt.n	800144c <DM_DigitCount+0x1c>
		return 2;
 8001448:	2302      	movs	r3, #2
 800144a:	e013      	b.n	8001474 <DM_DigitCount+0x44>
	if(num < 1000)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001452:	da01      	bge.n	8001458 <DM_DigitCount+0x28>
		return 3;
 8001454:	2303      	movs	r3, #3
 8001456:	e00d      	b.n	8001474 <DM_DigitCount+0x44>
	if(num < 10000)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	f242 720f 	movw	r2, #9999	; 0x270f
 800145e:	4293      	cmp	r3, r2
 8001460:	dc01      	bgt.n	8001466 <DM_DigitCount+0x36>
		return 4;
 8001462:	2304      	movs	r3, #4
 8001464:	e006      	b.n	8001474 <DM_DigitCount+0x44>
	if(num < 100000)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4a05      	ldr	r2, [pc, #20]	; (8001480 <DM_DigitCount+0x50>)
 800146a:	4293      	cmp	r3, r2
 800146c:	dc01      	bgt.n	8001472 <DM_DigitCount+0x42>
		return 5;
 800146e:	2305      	movs	r3, #5
 8001470:	e000      	b.n	8001474 <DM_DigitCount+0x44>
	else
		return 0;
 8001472:	2300      	movs	r3, #0
}
 8001474:	4618      	mov	r0, r3
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr
 8001480:	0001869f 	.word	0x0001869f

08001484 <DM_RefreshBackgroundLayout>:
 *	@param None
 *	@retval None
 *
 */
void DM_RefreshBackgroundLayout()
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af04      	add	r7, sp, #16


	//ILI9341_Fill_Screen(WHITE);
	ILI9341_FillScreenGradient();
 800148a:	f009 feaf 	bl	800b1ec <ILI9341_FillScreenGradient>

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[0],
 800148e:	4b1d      	ldr	r3, [pc, #116]	; (8001504 <DM_RefreshBackgroundLayout+0x80>)
 8001490:	8818      	ldrh	r0, [r3, #0]
 8001492:	2300      	movs	r3, #0
 8001494:	9302      	str	r3, [sp, #8]
 8001496:	2302      	movs	r3, #2
 8001498:	9301      	str	r3, [sp, #4]
 800149a:	f240 33ef 	movw	r3, #1007	; 0x3ef
 800149e:	9300      	str	r3, [sp, #0]
 80014a0:	2332      	movs	r3, #50	; 0x32
 80014a2:	2250      	movs	r2, #80	; 0x50
 80014a4:	21c8      	movs	r1, #200	; 0xc8
 80014a6:	f009 fd09 	bl	800aebc <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													DARKCYAN,
													BORDER_SIZE,
													BLACK);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[1],
 80014aa:	4b16      	ldr	r3, [pc, #88]	; (8001504 <DM_RefreshBackgroundLayout+0x80>)
 80014ac:	8858      	ldrh	r0, [r3, #2]
 80014ae:	2300      	movs	r3, #0
 80014b0:	9302      	str	r3, [sp, #8]
 80014b2:	2302      	movs	r3, #2
 80014b4:	9301      	str	r3, [sp, #4]
 80014b6:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 80014ba:	9300      	str	r3, [sp, #0]
 80014bc:	2332      	movs	r3, #50	; 0x32
 80014be:	2250      	movs	r2, #80	; 0x50
 80014c0:	21c8      	movs	r1, #200	; 0xc8
 80014c2:	f009 fcfb 	bl	800aebc <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													DARKGREEN,
													BORDER_SIZE,
													BLACK);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[2],
 80014c6:	4b0f      	ldr	r3, [pc, #60]	; (8001504 <DM_RefreshBackgroundLayout+0x80>)
 80014c8:	8898      	ldrh	r0, [r3, #4]
 80014ca:	2300      	movs	r3, #0
 80014cc:	9302      	str	r3, [sp, #8]
 80014ce:	2302      	movs	r3, #2
 80014d0:	9301      	str	r3, [sp, #4]
 80014d2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80014d6:	9300      	str	r3, [sp, #0]
 80014d8:	2332      	movs	r3, #50	; 0x32
 80014da:	2250      	movs	r2, #80	; 0x50
 80014dc:	21c8      	movs	r1, #200	; 0xc8
 80014de:	f009 fced 	bl	800aebc <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													YELLOW,
													BORDER_SIZE,
													BLACK);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[3],
 80014e2:	4b08      	ldr	r3, [pc, #32]	; (8001504 <DM_RefreshBackgroundLayout+0x80>)
 80014e4:	88d8      	ldrh	r0, [r3, #6]
 80014e6:	2300      	movs	r3, #0
 80014e8:	9302      	str	r3, [sp, #8]
 80014ea:	2302      	movs	r3, #2
 80014ec:	9301      	str	r3, [sp, #4]
 80014ee:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80014f2:	9300      	str	r3, [sp, #0]
 80014f4:	2332      	movs	r3, #50	; 0x32
 80014f6:	2250      	movs	r2, #80	; 0x50
 80014f8:	21c8      	movs	r1, #200	; 0xc8
 80014fa:	f009 fcdf 	bl	800aebc <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_WIDTH,
													BTN_HEIGHT,
													RED,
													BORDER_SIZE,
													BLACK);
}
 80014fe:	bf00      	nop
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	20000000 	.word	0x20000000

08001508 <DM_AddDigitPadding>:
 *			1 if buflen is invalid size
 *			2 unknown error
 *
 */
int DM_AddDigitPadding(uint16_t num, char *buffer, uint16_t buflen)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	4603      	mov	r3, r0
 8001510:	6039      	str	r1, [r7, #0]
 8001512:	80fb      	strh	r3, [r7, #6]
 8001514:	4613      	mov	r3, r2
 8001516:	80bb      	strh	r3, [r7, #4]
	if((buflen < 1) || (buflen > 6))
 8001518:	88bb      	ldrh	r3, [r7, #4]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d002      	beq.n	8001524 <DM_AddDigitPadding+0x1c>
 800151e:	88bb      	ldrh	r3, [r7, #4]
 8001520:	2b06      	cmp	r3, #6
 8001522:	d901      	bls.n	8001528 <DM_AddDigitPadding+0x20>
		return 1;
 8001524:	2301      	movs	r3, #1
 8001526:	e048      	b.n	80015ba <DM_AddDigitPadding+0xb2>

	//char* tmpbuf = malloc(sizeof(buffer) * buflen);

	uint16_t tmpcnt = num;
 8001528:	88fb      	ldrh	r3, [r7, #6]
 800152a:	81fb      	strh	r3, [r7, #14]
	switch(DM_DigitCount(tmpcnt))
 800152c:	89fb      	ldrh	r3, [r7, #14]
 800152e:	4618      	mov	r0, r3
 8001530:	f7ff ff7e 	bl	8001430 <DM_DigitCount>
 8001534:	4603      	mov	r3, r0
 8001536:	2b05      	cmp	r3, #5
 8001538:	d83e      	bhi.n	80015b8 <DM_AddDigitPadding+0xb0>
 800153a:	a201      	add	r2, pc, #4	; (adr r2, 8001540 <DM_AddDigitPadding+0x38>)
 800153c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001540:	08001559 	.word	0x08001559
 8001544:	08001569 	.word	0x08001569
 8001548:	08001579 	.word	0x08001579
 800154c:	08001589 	.word	0x08001589
 8001550:	08001599 	.word	0x08001599
 8001554:	080015a9 	.word	0x080015a9
	{

		case 0:
			snprintf(buffer,buflen, "     ");
 8001558:	88bb      	ldrh	r3, [r7, #4]
 800155a:	4a1a      	ldr	r2, [pc, #104]	; (80015c4 <DM_AddDigitPadding+0xbc>)
 800155c:	4619      	mov	r1, r3
 800155e:	6838      	ldr	r0, [r7, #0]
 8001560:	f00b f908 	bl	800c774 <sniprintf>
			return 0;
 8001564:	2300      	movs	r3, #0
 8001566:	e028      	b.n	80015ba <DM_AddDigitPadding+0xb2>
		case 1:
			snprintf(buffer, buflen, "%u    ", tmpcnt);
 8001568:	88b9      	ldrh	r1, [r7, #4]
 800156a:	89fb      	ldrh	r3, [r7, #14]
 800156c:	4a16      	ldr	r2, [pc, #88]	; (80015c8 <DM_AddDigitPadding+0xc0>)
 800156e:	6838      	ldr	r0, [r7, #0]
 8001570:	f00b f900 	bl	800c774 <sniprintf>
			return 0;
 8001574:	2300      	movs	r3, #0
 8001576:	e020      	b.n	80015ba <DM_AddDigitPadding+0xb2>
		case 2:
			snprintf(buffer, buflen, "%u   ", tmpcnt);
 8001578:	88b9      	ldrh	r1, [r7, #4]
 800157a:	89fb      	ldrh	r3, [r7, #14]
 800157c:	4a13      	ldr	r2, [pc, #76]	; (80015cc <DM_AddDigitPadding+0xc4>)
 800157e:	6838      	ldr	r0, [r7, #0]
 8001580:	f00b f8f8 	bl	800c774 <sniprintf>
			return 0;
 8001584:	2300      	movs	r3, #0
 8001586:	e018      	b.n	80015ba <DM_AddDigitPadding+0xb2>
		case 3:
			snprintf(buffer, buflen, "%u  ", tmpcnt);
 8001588:	88b9      	ldrh	r1, [r7, #4]
 800158a:	89fb      	ldrh	r3, [r7, #14]
 800158c:	4a10      	ldr	r2, [pc, #64]	; (80015d0 <DM_AddDigitPadding+0xc8>)
 800158e:	6838      	ldr	r0, [r7, #0]
 8001590:	f00b f8f0 	bl	800c774 <sniprintf>
			return 0;
 8001594:	2300      	movs	r3, #0
 8001596:	e010      	b.n	80015ba <DM_AddDigitPadding+0xb2>
		case 4:
			snprintf(buffer, buflen, "%u ", tmpcnt);
 8001598:	88b9      	ldrh	r1, [r7, #4]
 800159a:	89fb      	ldrh	r3, [r7, #14]
 800159c:	4a0d      	ldr	r2, [pc, #52]	; (80015d4 <DM_AddDigitPadding+0xcc>)
 800159e:	6838      	ldr	r0, [r7, #0]
 80015a0:	f00b f8e8 	bl	800c774 <sniprintf>
			return 0;
 80015a4:	2300      	movs	r3, #0
 80015a6:	e008      	b.n	80015ba <DM_AddDigitPadding+0xb2>
		case 5:
			snprintf(buffer, buflen, "%u", tmpcnt);
 80015a8:	88b9      	ldrh	r1, [r7, #4]
 80015aa:	89fb      	ldrh	r3, [r7, #14]
 80015ac:	4a0a      	ldr	r2, [pc, #40]	; (80015d8 <DM_AddDigitPadding+0xd0>)
 80015ae:	6838      	ldr	r0, [r7, #0]
 80015b0:	f00b f8e0 	bl	800c774 <sniprintf>
			return 0;
 80015b4:	2300      	movs	r3, #0
 80015b6:	e000      	b.n	80015ba <DM_AddDigitPadding+0xb2>

	}

	return 2;
 80015b8:	2302      	movs	r3, #2


}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3710      	adds	r7, #16
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	0800e75c 	.word	0x0800e75c
 80015c8:	0800e764 	.word	0x0800e764
 80015cc:	0800e76c 	.word	0x0800e76c
 80015d0:	0800e774 	.word	0x0800e774
 80015d4:	0800e77c 	.word	0x0800e77c
 80015d8:	0800e780 	.word	0x0800e780

080015dc <FreqMenu_DrawFreqMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawFreqMainMenu()
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af02      	add	r7, sp, #8
	// main
	ILI9341_Draw_Text("Select an option below", 	30, 150, BLACK, 2, WHITE);
 80015e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015e6:	9301      	str	r3, [sp, #4]
 80015e8:	2302      	movs	r3, #2
 80015ea:	9300      	str	r3, [sp, #0]
 80015ec:	2300      	movs	r3, #0
 80015ee:	2296      	movs	r2, #150	; 0x96
 80015f0:	211e      	movs	r1, #30
 80015f2:	4813      	ldr	r0, [pc, #76]	; (8001640 <FreqMenu_DrawFreqMainMenu+0x64>)
 80015f4:	f009 fdcc 	bl	800b190 <ILI9341_Draw_Text>

	// buttons
	ILI9341_Draw_Text("PRESET", 5, 210, BLACK, 2, DARKCYAN);
 80015f8:	f240 33ef 	movw	r3, #1007	; 0x3ef
 80015fc:	9301      	str	r3, [sp, #4]
 80015fe:	2302      	movs	r3, #2
 8001600:	9300      	str	r3, [sp, #0]
 8001602:	2300      	movs	r3, #0
 8001604:	22d2      	movs	r2, #210	; 0xd2
 8001606:	2105      	movs	r1, #5
 8001608:	480e      	ldr	r0, [pc, #56]	; (8001644 <FreqMenu_DrawFreqMainMenu+0x68>)
 800160a:	f009 fdc1 	bl	800b190 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("ADJUST", 87, 210, BLACK, 2, DARKGREEN);
 800160e:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8001612:	9301      	str	r3, [sp, #4]
 8001614:	2302      	movs	r3, #2
 8001616:	9300      	str	r3, [sp, #0]
 8001618:	2300      	movs	r3, #0
 800161a:	22d2      	movs	r2, #210	; 0xd2
 800161c:	2157      	movs	r1, #87	; 0x57
 800161e:	480a      	ldr	r0, [pc, #40]	; (8001648 <FreqMenu_DrawFreqMainMenu+0x6c>)
 8001620:	f009 fdb6 	bl	800b190 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SWEEP", 174, 210, BLACK, 2, YELLOW);
 8001624:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001628:	9301      	str	r3, [sp, #4]
 800162a:	2302      	movs	r3, #2
 800162c:	9300      	str	r3, [sp, #0]
 800162e:	2300      	movs	r3, #0
 8001630:	22d2      	movs	r2, #210	; 0xd2
 8001632:	21ae      	movs	r1, #174	; 0xae
 8001634:	4805      	ldr	r0, [pc, #20]	; (800164c <FreqMenu_DrawFreqMainMenu+0x70>)
 8001636:	f009 fdab 	bl	800b190 <ILI9341_Draw_Text>
	//ILI9341_Draw_Text("    ", 260, 210, BLACK, 2, RED);
}
 800163a:	bf00      	nop
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	0800e784 	.word	0x0800e784
 8001644:	0800e79c 	.word	0x0800e79c
 8001648:	0800e7a4 	.word	0x0800e7a4
 800164c:	0800e7ac 	.word	0x0800e7ac

08001650 <FreqMenu_DrawFreqPresetMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawFreqPresetMenu()
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b086      	sub	sp, #24
 8001654:	af02      	add	r7, sp, #8

	uint8_t menu_pos_y1 = 50;
 8001656:	2332      	movs	r3, #50	; 0x32
 8001658:	73fb      	strb	r3, [r7, #15]
	uint8_t menu_pos_y2 = 70;
 800165a:	2346      	movs	r3, #70	; 0x46
 800165c:	73bb      	strb	r3, [r7, #14]
	uint8_t menu_pos_y3 = 90;
 800165e:	235a      	movs	r3, #90	; 0x5a
 8001660:	737b      	strb	r3, [r7, #13]
	uint8_t menu_pos_y4 = 110;
 8001662:	236e      	movs	r3, #110	; 0x6e
 8001664:	733b      	strb	r3, [r7, #12]
	uint8_t menu_pos_y5 = 130;
 8001666:	2382      	movs	r3, #130	; 0x82
 8001668:	72fb      	strb	r3, [r7, #11]
	uint8_t menu_pos_y6 = 150;
 800166a:	2396      	movs	r3, #150	; 0x96
 800166c:	72bb      	strb	r3, [r7, #10]
	uint8_t menu_pos_y7 = 170;
 800166e:	23aa      	movs	r3, #170	; 0xaa
 8001670:	727b      	strb	r3, [r7, #9]
	Freq_Preset_Encoder_Pos_t *pFreqPresetTmp =  FreqO_GetFPresetObject();
 8001672:	f001 ff9f 	bl	80035b4 <FreqO_GetFPresetObject>
 8001676:	6078      	str	r0, [r7, #4]
	if(pFreqPresetTmp)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2b00      	cmp	r3, #0
 800167c:	f001 823f 	beq.w	8002afe <FreqMenu_DrawFreqPresetMenu+0x14ae>
	{
		switch(pFreqPresetTmp->hertz)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001688:	4293      	cmp	r3, r2
 800168a:	f000 8499 	beq.w	8001fc0 <FreqMenu_DrawFreqPresetMenu+0x970>
 800168e:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001692:	4293      	cmp	r3, r2
 8001694:	d817      	bhi.n	80016c6 <FreqMenu_DrawFreqPresetMenu+0x76>
 8001696:	2b32      	cmp	r3, #50	; 0x32
 8001698:	f000 81b2 	beq.w	8001a00 <FreqMenu_DrawFreqPresetMenu+0x3b0>
 800169c:	2b32      	cmp	r3, #50	; 0x32
 800169e:	d806      	bhi.n	80016ae <FreqMenu_DrawFreqPresetMenu+0x5e>
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d038      	beq.n	8001716 <FreqMenu_DrawFreqPresetMenu+0xc6>
 80016a4:	2b0a      	cmp	r3, #10
 80016a6:	f000 80e0 	beq.w	800186a <FreqMenu_DrawFreqPresetMenu+0x21a>
	else
	{
		ILI9341_Draw_Text("FreqMenus::FreqMenu_DrawFreqPresetMenu() Error", 		10, 180, RED, 1, BLACK);
	}

}
 80016aa:	f001 ba34 	b.w	8002b16 <FreqMenu_DrawFreqPresetMenu+0x14c6>
		switch(pFreqPresetTmp->hertz)
 80016ae:	2bfa      	cmp	r3, #250	; 0xfa
 80016b0:	f000 8316 	beq.w	8001ce0 <FreqMenu_DrawFreqPresetMenu+0x690>
 80016b4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80016b8:	f000 83bc 	beq.w	8001e34 <FreqMenu_DrawFreqPresetMenu+0x7e4>
 80016bc:	2b64      	cmp	r3, #100	; 0x64
 80016be:	f000 8249 	beq.w	8001b54 <FreqMenu_DrawFreqPresetMenu+0x504>
}
 80016c2:	f001 ba28 	b.w	8002b16 <FreqMenu_DrawFreqPresetMenu+0x14c6>
		switch(pFreqPresetTmp->hertz)
 80016c6:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80016ca:	4293      	cmp	r3, r2
 80016cc:	f000 8756 	beq.w	800257c <FreqMenu_DrawFreqPresetMenu+0xf2c>
 80016d0:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d80f      	bhi.n	80016f8 <FreqMenu_DrawFreqPresetMenu+0xa8>
 80016d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80016dc:	4293      	cmp	r3, r2
 80016de:	f000 85df 	beq.w	80022a0 <FreqMenu_DrawFreqPresetMenu+0xc50>
 80016e2:	f242 7210 	movw	r2, #10000	; 0x2710
 80016e6:	4293      	cmp	r3, r2
 80016e8:	f000 8683 	beq.w	80023f2 <FreqMenu_DrawFreqPresetMenu+0xda2>
 80016ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80016f0:	f000 8510 	beq.w	8002114 <FreqMenu_DrawFreqPresetMenu+0xac4>
}
 80016f4:	f001 ba0f 	b.w	8002b16 <FreqMenu_DrawFreqPresetMenu+0x14c6>
		switch(pFreqPresetTmp->hertz)
 80016f8:	4ab1      	ldr	r2, [pc, #708]	; (80019c0 <FreqMenu_DrawFreqPresetMenu+0x370>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	f001 80ac 	beq.w	8002858 <FreqMenu_DrawFreqPresetMenu+0x1208>
 8001700:	4ab0      	ldr	r2, [pc, #704]	; (80019c4 <FreqMenu_DrawFreqPresetMenu+0x374>)
 8001702:	4293      	cmp	r3, r2
 8001704:	f001 8151 	beq.w	80029aa <FreqMenu_DrawFreqPresetMenu+0x135a>
 8001708:	f24c 3250 	movw	r2, #50000	; 0xc350
 800170c:	4293      	cmp	r3, r2
 800170e:	f000 87de 	beq.w	80026ce <FreqMenu_DrawFreqPresetMenu+0x107e>
}
 8001712:	f001 ba00 	b.w	8002b16 <FreqMenu_DrawFreqPresetMenu+0x14c6>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, WHITE, 2, BLACK);
 8001716:	7bfb      	ldrb	r3, [r7, #15]
 8001718:	b29a      	uxth	r2, r3
 800171a:	2300      	movs	r3, #0
 800171c:	9301      	str	r3, [sp, #4]
 800171e:	2302      	movs	r3, #2
 8001720:	9300      	str	r3, [sp, #0]
 8001722:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001726:	210a      	movs	r1, #10
 8001728:	48a7      	ldr	r0, [pc, #668]	; (80019c8 <FreqMenu_DrawFreqPresetMenu+0x378>)
 800172a:	f009 fd31 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 800172e:	7bbb      	ldrb	r3, [r7, #14]
 8001730:	b29a      	uxth	r2, r3
 8001732:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001736:	9301      	str	r3, [sp, #4]
 8001738:	2302      	movs	r3, #2
 800173a:	9300      	str	r3, [sp, #0]
 800173c:	2300      	movs	r3, #0
 800173e:	210a      	movs	r1, #10
 8001740:	48a2      	ldr	r0, [pc, #648]	; (80019cc <FreqMenu_DrawFreqPresetMenu+0x37c>)
 8001742:	f009 fd25 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8001746:	7b7b      	ldrb	r3, [r7, #13]
 8001748:	b29a      	uxth	r2, r3
 800174a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800174e:	9301      	str	r3, [sp, #4]
 8001750:	2302      	movs	r3, #2
 8001752:	9300      	str	r3, [sp, #0]
 8001754:	2300      	movs	r3, #0
 8001756:	210a      	movs	r1, #10
 8001758:	489d      	ldr	r0, [pc, #628]	; (80019d0 <FreqMenu_DrawFreqPresetMenu+0x380>)
 800175a:	f009 fd19 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 800175e:	7b3b      	ldrb	r3, [r7, #12]
 8001760:	b29a      	uxth	r2, r3
 8001762:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001766:	9301      	str	r3, [sp, #4]
 8001768:	2302      	movs	r3, #2
 800176a:	9300      	str	r3, [sp, #0]
 800176c:	2300      	movs	r3, #0
 800176e:	210a      	movs	r1, #10
 8001770:	4898      	ldr	r0, [pc, #608]	; (80019d4 <FreqMenu_DrawFreqPresetMenu+0x384>)
 8001772:	f009 fd0d 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8001776:	7afb      	ldrb	r3, [r7, #11]
 8001778:	b29a      	uxth	r2, r3
 800177a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800177e:	9301      	str	r3, [sp, #4]
 8001780:	2302      	movs	r3, #2
 8001782:	9300      	str	r3, [sp, #0]
 8001784:	2300      	movs	r3, #0
 8001786:	210a      	movs	r1, #10
 8001788:	4893      	ldr	r0, [pc, #588]	; (80019d8 <FreqMenu_DrawFreqPresetMenu+0x388>)
 800178a:	f009 fd01 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 800178e:	7abb      	ldrb	r3, [r7, #10]
 8001790:	b29a      	uxth	r2, r3
 8001792:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001796:	9301      	str	r3, [sp, #4]
 8001798:	2302      	movs	r3, #2
 800179a:	9300      	str	r3, [sp, #0]
 800179c:	2300      	movs	r3, #0
 800179e:	210a      	movs	r1, #10
 80017a0:	488e      	ldr	r0, [pc, #568]	; (80019dc <FreqMenu_DrawFreqPresetMenu+0x38c>)
 80017a2:	f009 fcf5 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 80017a6:	7a7b      	ldrb	r3, [r7, #9]
 80017a8:	b29a      	uxth	r2, r3
 80017aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017ae:	9301      	str	r3, [sp, #4]
 80017b0:	2302      	movs	r3, #2
 80017b2:	9300      	str	r3, [sp, #0]
 80017b4:	2300      	movs	r3, #0
 80017b6:	210a      	movs	r1, #10
 80017b8:	4889      	ldr	r0, [pc, #548]	; (80019e0 <FreqMenu_DrawFreqPresetMenu+0x390>)
 80017ba:	f009 fce9 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 80017be:	7bfb      	ldrb	r3, [r7, #15]
 80017c0:	b29a      	uxth	r2, r3
 80017c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017c6:	9301      	str	r3, [sp, #4]
 80017c8:	2302      	movs	r3, #2
 80017ca:	9300      	str	r3, [sp, #0]
 80017cc:	2300      	movs	r3, #0
 80017ce:	2178      	movs	r1, #120	; 0x78
 80017d0:	4884      	ldr	r0, [pc, #528]	; (80019e4 <FreqMenu_DrawFreqPresetMenu+0x394>)
 80017d2:	f009 fcdd 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 80017d6:	7bbb      	ldrb	r3, [r7, #14]
 80017d8:	b29a      	uxth	r2, r3
 80017da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017de:	9301      	str	r3, [sp, #4]
 80017e0:	2302      	movs	r3, #2
 80017e2:	9300      	str	r3, [sp, #0]
 80017e4:	2300      	movs	r3, #0
 80017e6:	2178      	movs	r1, #120	; 0x78
 80017e8:	487f      	ldr	r0, [pc, #508]	; (80019e8 <FreqMenu_DrawFreqPresetMenu+0x398>)
 80017ea:	f009 fcd1 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 80017ee:	7b7b      	ldrb	r3, [r7, #13]
 80017f0:	b29a      	uxth	r2, r3
 80017f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017f6:	9301      	str	r3, [sp, #4]
 80017f8:	2302      	movs	r3, #2
 80017fa:	9300      	str	r3, [sp, #0]
 80017fc:	2300      	movs	r3, #0
 80017fe:	2178      	movs	r1, #120	; 0x78
 8001800:	487a      	ldr	r0, [pc, #488]	; (80019ec <FreqMenu_DrawFreqPresetMenu+0x39c>)
 8001802:	f009 fcc5 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8001806:	7b3b      	ldrb	r3, [r7, #12]
 8001808:	b29a      	uxth	r2, r3
 800180a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800180e:	9301      	str	r3, [sp, #4]
 8001810:	2302      	movs	r3, #2
 8001812:	9300      	str	r3, [sp, #0]
 8001814:	2300      	movs	r3, #0
 8001816:	2178      	movs	r1, #120	; 0x78
 8001818:	4875      	ldr	r0, [pc, #468]	; (80019f0 <FreqMenu_DrawFreqPresetMenu+0x3a0>)
 800181a:	f009 fcb9 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 800181e:	7afb      	ldrb	r3, [r7, #11]
 8001820:	b29a      	uxth	r2, r3
 8001822:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001826:	9301      	str	r3, [sp, #4]
 8001828:	2302      	movs	r3, #2
 800182a:	9300      	str	r3, [sp, #0]
 800182c:	2300      	movs	r3, #0
 800182e:	2178      	movs	r1, #120	; 0x78
 8001830:	4870      	ldr	r0, [pc, #448]	; (80019f4 <FreqMenu_DrawFreqPresetMenu+0x3a4>)
 8001832:	f009 fcad 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8001836:	7abb      	ldrb	r3, [r7, #10]
 8001838:	b29a      	uxth	r2, r3
 800183a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800183e:	9301      	str	r3, [sp, #4]
 8001840:	2302      	movs	r3, #2
 8001842:	9300      	str	r3, [sp, #0]
 8001844:	2300      	movs	r3, #0
 8001846:	2178      	movs	r1, #120	; 0x78
 8001848:	486b      	ldr	r0, [pc, #428]	; (80019f8 <FreqMenu_DrawFreqPresetMenu+0x3a8>)
 800184a:	f009 fca1 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 800184e:	7a7b      	ldrb	r3, [r7, #9]
 8001850:	b29a      	uxth	r2, r3
 8001852:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001856:	9301      	str	r3, [sp, #4]
 8001858:	2302      	movs	r3, #2
 800185a:	9300      	str	r3, [sp, #0]
 800185c:	2300      	movs	r3, #0
 800185e:	2178      	movs	r1, #120	; 0x78
 8001860:	4866      	ldr	r0, [pc, #408]	; (80019fc <FreqMenu_DrawFreqPresetMenu+0x3ac>)
 8001862:	f009 fc95 	bl	800b190 <ILI9341_Draw_Text>
				break;
 8001866:	f001 b956 	b.w	8002b16 <FreqMenu_DrawFreqPresetMenu+0x14c6>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 800186a:	7bfb      	ldrb	r3, [r7, #15]
 800186c:	b29a      	uxth	r2, r3
 800186e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001872:	9301      	str	r3, [sp, #4]
 8001874:	2302      	movs	r3, #2
 8001876:	9300      	str	r3, [sp, #0]
 8001878:	2300      	movs	r3, #0
 800187a:	210a      	movs	r1, #10
 800187c:	4852      	ldr	r0, [pc, #328]	; (80019c8 <FreqMenu_DrawFreqPresetMenu+0x378>)
 800187e:	f009 fc87 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, WHITE, 2, BLACK);
 8001882:	7bbb      	ldrb	r3, [r7, #14]
 8001884:	b29a      	uxth	r2, r3
 8001886:	2300      	movs	r3, #0
 8001888:	9301      	str	r3, [sp, #4]
 800188a:	2302      	movs	r3, #2
 800188c:	9300      	str	r3, [sp, #0]
 800188e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001892:	210a      	movs	r1, #10
 8001894:	484d      	ldr	r0, [pc, #308]	; (80019cc <FreqMenu_DrawFreqPresetMenu+0x37c>)
 8001896:	f009 fc7b 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 800189a:	7b7b      	ldrb	r3, [r7, #13]
 800189c:	b29a      	uxth	r2, r3
 800189e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018a2:	9301      	str	r3, [sp, #4]
 80018a4:	2302      	movs	r3, #2
 80018a6:	9300      	str	r3, [sp, #0]
 80018a8:	2300      	movs	r3, #0
 80018aa:	210a      	movs	r1, #10
 80018ac:	4848      	ldr	r0, [pc, #288]	; (80019d0 <FreqMenu_DrawFreqPresetMenu+0x380>)
 80018ae:	f009 fc6f 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 80018b2:	7b3b      	ldrb	r3, [r7, #12]
 80018b4:	b29a      	uxth	r2, r3
 80018b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018ba:	9301      	str	r3, [sp, #4]
 80018bc:	2302      	movs	r3, #2
 80018be:	9300      	str	r3, [sp, #0]
 80018c0:	2300      	movs	r3, #0
 80018c2:	210a      	movs	r1, #10
 80018c4:	4843      	ldr	r0, [pc, #268]	; (80019d4 <FreqMenu_DrawFreqPresetMenu+0x384>)
 80018c6:	f009 fc63 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 80018ca:	7afb      	ldrb	r3, [r7, #11]
 80018cc:	b29a      	uxth	r2, r3
 80018ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018d2:	9301      	str	r3, [sp, #4]
 80018d4:	2302      	movs	r3, #2
 80018d6:	9300      	str	r3, [sp, #0]
 80018d8:	2300      	movs	r3, #0
 80018da:	210a      	movs	r1, #10
 80018dc:	483e      	ldr	r0, [pc, #248]	; (80019d8 <FreqMenu_DrawFreqPresetMenu+0x388>)
 80018de:	f009 fc57 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 80018e2:	7abb      	ldrb	r3, [r7, #10]
 80018e4:	b29a      	uxth	r2, r3
 80018e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018ea:	9301      	str	r3, [sp, #4]
 80018ec:	2302      	movs	r3, #2
 80018ee:	9300      	str	r3, [sp, #0]
 80018f0:	2300      	movs	r3, #0
 80018f2:	210a      	movs	r1, #10
 80018f4:	4839      	ldr	r0, [pc, #228]	; (80019dc <FreqMenu_DrawFreqPresetMenu+0x38c>)
 80018f6:	f009 fc4b 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 80018fa:	7a7b      	ldrb	r3, [r7, #9]
 80018fc:	b29a      	uxth	r2, r3
 80018fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001902:	9301      	str	r3, [sp, #4]
 8001904:	2302      	movs	r3, #2
 8001906:	9300      	str	r3, [sp, #0]
 8001908:	2300      	movs	r3, #0
 800190a:	210a      	movs	r1, #10
 800190c:	4834      	ldr	r0, [pc, #208]	; (80019e0 <FreqMenu_DrawFreqPresetMenu+0x390>)
 800190e:	f009 fc3f 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8001912:	7bfb      	ldrb	r3, [r7, #15]
 8001914:	b29a      	uxth	r2, r3
 8001916:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800191a:	9301      	str	r3, [sp, #4]
 800191c:	2302      	movs	r3, #2
 800191e:	9300      	str	r3, [sp, #0]
 8001920:	2300      	movs	r3, #0
 8001922:	2178      	movs	r1, #120	; 0x78
 8001924:	482f      	ldr	r0, [pc, #188]	; (80019e4 <FreqMenu_DrawFreqPresetMenu+0x394>)
 8001926:	f009 fc33 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 800192a:	7bbb      	ldrb	r3, [r7, #14]
 800192c:	b29a      	uxth	r2, r3
 800192e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001932:	9301      	str	r3, [sp, #4]
 8001934:	2302      	movs	r3, #2
 8001936:	9300      	str	r3, [sp, #0]
 8001938:	2300      	movs	r3, #0
 800193a:	2178      	movs	r1, #120	; 0x78
 800193c:	482a      	ldr	r0, [pc, #168]	; (80019e8 <FreqMenu_DrawFreqPresetMenu+0x398>)
 800193e:	f009 fc27 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8001942:	7b7b      	ldrb	r3, [r7, #13]
 8001944:	b29a      	uxth	r2, r3
 8001946:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800194a:	9301      	str	r3, [sp, #4]
 800194c:	2302      	movs	r3, #2
 800194e:	9300      	str	r3, [sp, #0]
 8001950:	2300      	movs	r3, #0
 8001952:	2178      	movs	r1, #120	; 0x78
 8001954:	4825      	ldr	r0, [pc, #148]	; (80019ec <FreqMenu_DrawFreqPresetMenu+0x39c>)
 8001956:	f009 fc1b 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 800195a:	7b3b      	ldrb	r3, [r7, #12]
 800195c:	b29a      	uxth	r2, r3
 800195e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001962:	9301      	str	r3, [sp, #4]
 8001964:	2302      	movs	r3, #2
 8001966:	9300      	str	r3, [sp, #0]
 8001968:	2300      	movs	r3, #0
 800196a:	2178      	movs	r1, #120	; 0x78
 800196c:	4820      	ldr	r0, [pc, #128]	; (80019f0 <FreqMenu_DrawFreqPresetMenu+0x3a0>)
 800196e:	f009 fc0f 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8001972:	7afb      	ldrb	r3, [r7, #11]
 8001974:	b29a      	uxth	r2, r3
 8001976:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800197a:	9301      	str	r3, [sp, #4]
 800197c:	2302      	movs	r3, #2
 800197e:	9300      	str	r3, [sp, #0]
 8001980:	2300      	movs	r3, #0
 8001982:	2178      	movs	r1, #120	; 0x78
 8001984:	481b      	ldr	r0, [pc, #108]	; (80019f4 <FreqMenu_DrawFreqPresetMenu+0x3a4>)
 8001986:	f009 fc03 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 800198a:	7abb      	ldrb	r3, [r7, #10]
 800198c:	b29a      	uxth	r2, r3
 800198e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001992:	9301      	str	r3, [sp, #4]
 8001994:	2302      	movs	r3, #2
 8001996:	9300      	str	r3, [sp, #0]
 8001998:	2300      	movs	r3, #0
 800199a:	2178      	movs	r1, #120	; 0x78
 800199c:	4816      	ldr	r0, [pc, #88]	; (80019f8 <FreqMenu_DrawFreqPresetMenu+0x3a8>)
 800199e:	f009 fbf7 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 80019a2:	7a7b      	ldrb	r3, [r7, #9]
 80019a4:	b29a      	uxth	r2, r3
 80019a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019aa:	9301      	str	r3, [sp, #4]
 80019ac:	2302      	movs	r3, #2
 80019ae:	9300      	str	r3, [sp, #0]
 80019b0:	2300      	movs	r3, #0
 80019b2:	2178      	movs	r1, #120	; 0x78
 80019b4:	4811      	ldr	r0, [pc, #68]	; (80019fc <FreqMenu_DrawFreqPresetMenu+0x3ac>)
 80019b6:	f009 fbeb 	bl	800b190 <ILI9341_Draw_Text>
				break;
 80019ba:	f001 b8ac 	b.w	8002b16 <FreqMenu_DrawFreqPresetMenu+0x14c6>
 80019be:	bf00      	nop
 80019c0:	000124f8 	.word	0x000124f8
 80019c4:	000186a0 	.word	0x000186a0
 80019c8:	0800e7b4 	.word	0x0800e7b4
 80019cc:	0800e7bc 	.word	0x0800e7bc
 80019d0:	0800e7c4 	.word	0x0800e7c4
 80019d4:	0800e7cc 	.word	0x0800e7cc
 80019d8:	0800e7d4 	.word	0x0800e7d4
 80019dc:	0800e7dc 	.word	0x0800e7dc
 80019e0:	0800e7e4 	.word	0x0800e7e4
 80019e4:	0800e7ec 	.word	0x0800e7ec
 80019e8:	0800e7f4 	.word	0x0800e7f4
 80019ec:	0800e7fc 	.word	0x0800e7fc
 80019f0:	0800e804 	.word	0x0800e804
 80019f4:	0800e80c 	.word	0x0800e80c
 80019f8:	0800e814 	.word	0x0800e814
 80019fc:	0800e81c 	.word	0x0800e81c
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8001a00:	7bfb      	ldrb	r3, [r7, #15]
 8001a02:	b29a      	uxth	r2, r3
 8001a04:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a08:	9301      	str	r3, [sp, #4]
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	9300      	str	r3, [sp, #0]
 8001a0e:	2300      	movs	r3, #0
 8001a10:	210a      	movs	r1, #10
 8001a12:	48a5      	ldr	r0, [pc, #660]	; (8001ca8 <FreqMenu_DrawFreqPresetMenu+0x658>)
 8001a14:	f009 fbbc 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8001a18:	7bbb      	ldrb	r3, [r7, #14]
 8001a1a:	b29a      	uxth	r2, r3
 8001a1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a20:	9301      	str	r3, [sp, #4]
 8001a22:	2302      	movs	r3, #2
 8001a24:	9300      	str	r3, [sp, #0]
 8001a26:	2300      	movs	r3, #0
 8001a28:	210a      	movs	r1, #10
 8001a2a:	48a0      	ldr	r0, [pc, #640]	; (8001cac <FreqMenu_DrawFreqPresetMenu+0x65c>)
 8001a2c:	f009 fbb0 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, WHITE, 2, BLACK);
 8001a30:	7b7b      	ldrb	r3, [r7, #13]
 8001a32:	b29a      	uxth	r2, r3
 8001a34:	2300      	movs	r3, #0
 8001a36:	9301      	str	r3, [sp, #4]
 8001a38:	2302      	movs	r3, #2
 8001a3a:	9300      	str	r3, [sp, #0]
 8001a3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a40:	210a      	movs	r1, #10
 8001a42:	489b      	ldr	r0, [pc, #620]	; (8001cb0 <FreqMenu_DrawFreqPresetMenu+0x660>)
 8001a44:	f009 fba4 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8001a48:	7b3b      	ldrb	r3, [r7, #12]
 8001a4a:	b29a      	uxth	r2, r3
 8001a4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a50:	9301      	str	r3, [sp, #4]
 8001a52:	2302      	movs	r3, #2
 8001a54:	9300      	str	r3, [sp, #0]
 8001a56:	2300      	movs	r3, #0
 8001a58:	210a      	movs	r1, #10
 8001a5a:	4896      	ldr	r0, [pc, #600]	; (8001cb4 <FreqMenu_DrawFreqPresetMenu+0x664>)
 8001a5c:	f009 fb98 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8001a60:	7afb      	ldrb	r3, [r7, #11]
 8001a62:	b29a      	uxth	r2, r3
 8001a64:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a68:	9301      	str	r3, [sp, #4]
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	9300      	str	r3, [sp, #0]
 8001a6e:	2300      	movs	r3, #0
 8001a70:	210a      	movs	r1, #10
 8001a72:	4891      	ldr	r0, [pc, #580]	; (8001cb8 <FreqMenu_DrawFreqPresetMenu+0x668>)
 8001a74:	f009 fb8c 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 8001a78:	7abb      	ldrb	r3, [r7, #10]
 8001a7a:	b29a      	uxth	r2, r3
 8001a7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a80:	9301      	str	r3, [sp, #4]
 8001a82:	2302      	movs	r3, #2
 8001a84:	9300      	str	r3, [sp, #0]
 8001a86:	2300      	movs	r3, #0
 8001a88:	210a      	movs	r1, #10
 8001a8a:	488c      	ldr	r0, [pc, #560]	; (8001cbc <FreqMenu_DrawFreqPresetMenu+0x66c>)
 8001a8c:	f009 fb80 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8001a90:	7a7b      	ldrb	r3, [r7, #9]
 8001a92:	b29a      	uxth	r2, r3
 8001a94:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a98:	9301      	str	r3, [sp, #4]
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	9300      	str	r3, [sp, #0]
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	210a      	movs	r1, #10
 8001aa2:	4887      	ldr	r0, [pc, #540]	; (8001cc0 <FreqMenu_DrawFreqPresetMenu+0x670>)
 8001aa4:	f009 fb74 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8001aa8:	7bfb      	ldrb	r3, [r7, #15]
 8001aaa:	b29a      	uxth	r2, r3
 8001aac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ab0:	9301      	str	r3, [sp, #4]
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	9300      	str	r3, [sp, #0]
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	2178      	movs	r1, #120	; 0x78
 8001aba:	4882      	ldr	r0, [pc, #520]	; (8001cc4 <FreqMenu_DrawFreqPresetMenu+0x674>)
 8001abc:	f009 fb68 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 8001ac0:	7bbb      	ldrb	r3, [r7, #14]
 8001ac2:	b29a      	uxth	r2, r3
 8001ac4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ac8:	9301      	str	r3, [sp, #4]
 8001aca:	2302      	movs	r3, #2
 8001acc:	9300      	str	r3, [sp, #0]
 8001ace:	2300      	movs	r3, #0
 8001ad0:	2178      	movs	r1, #120	; 0x78
 8001ad2:	487d      	ldr	r0, [pc, #500]	; (8001cc8 <FreqMenu_DrawFreqPresetMenu+0x678>)
 8001ad4:	f009 fb5c 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8001ad8:	7b7b      	ldrb	r3, [r7, #13]
 8001ada:	b29a      	uxth	r2, r3
 8001adc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ae0:	9301      	str	r3, [sp, #4]
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	9300      	str	r3, [sp, #0]
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	2178      	movs	r1, #120	; 0x78
 8001aea:	4878      	ldr	r0, [pc, #480]	; (8001ccc <FreqMenu_DrawFreqPresetMenu+0x67c>)
 8001aec:	f009 fb50 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8001af0:	7b3b      	ldrb	r3, [r7, #12]
 8001af2:	b29a      	uxth	r2, r3
 8001af4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001af8:	9301      	str	r3, [sp, #4]
 8001afa:	2302      	movs	r3, #2
 8001afc:	9300      	str	r3, [sp, #0]
 8001afe:	2300      	movs	r3, #0
 8001b00:	2178      	movs	r1, #120	; 0x78
 8001b02:	4873      	ldr	r0, [pc, #460]	; (8001cd0 <FreqMenu_DrawFreqPresetMenu+0x680>)
 8001b04:	f009 fb44 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8001b08:	7afb      	ldrb	r3, [r7, #11]
 8001b0a:	b29a      	uxth	r2, r3
 8001b0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b10:	9301      	str	r3, [sp, #4]
 8001b12:	2302      	movs	r3, #2
 8001b14:	9300      	str	r3, [sp, #0]
 8001b16:	2300      	movs	r3, #0
 8001b18:	2178      	movs	r1, #120	; 0x78
 8001b1a:	486e      	ldr	r0, [pc, #440]	; (8001cd4 <FreqMenu_DrawFreqPresetMenu+0x684>)
 8001b1c:	f009 fb38 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8001b20:	7abb      	ldrb	r3, [r7, #10]
 8001b22:	b29a      	uxth	r2, r3
 8001b24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b28:	9301      	str	r3, [sp, #4]
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	9300      	str	r3, [sp, #0]
 8001b2e:	2300      	movs	r3, #0
 8001b30:	2178      	movs	r1, #120	; 0x78
 8001b32:	4869      	ldr	r0, [pc, #420]	; (8001cd8 <FreqMenu_DrawFreqPresetMenu+0x688>)
 8001b34:	f009 fb2c 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8001b38:	7a7b      	ldrb	r3, [r7, #9]
 8001b3a:	b29a      	uxth	r2, r3
 8001b3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b40:	9301      	str	r3, [sp, #4]
 8001b42:	2302      	movs	r3, #2
 8001b44:	9300      	str	r3, [sp, #0]
 8001b46:	2300      	movs	r3, #0
 8001b48:	2178      	movs	r1, #120	; 0x78
 8001b4a:	4864      	ldr	r0, [pc, #400]	; (8001cdc <FreqMenu_DrawFreqPresetMenu+0x68c>)
 8001b4c:	f009 fb20 	bl	800b190 <ILI9341_Draw_Text>
				break;
 8001b50:	f000 bfe1 	b.w	8002b16 <FreqMenu_DrawFreqPresetMenu+0x14c6>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8001b54:	7bfb      	ldrb	r3, [r7, #15]
 8001b56:	b29a      	uxth	r2, r3
 8001b58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b5c:	9301      	str	r3, [sp, #4]
 8001b5e:	2302      	movs	r3, #2
 8001b60:	9300      	str	r3, [sp, #0]
 8001b62:	2300      	movs	r3, #0
 8001b64:	210a      	movs	r1, #10
 8001b66:	4850      	ldr	r0, [pc, #320]	; (8001ca8 <FreqMenu_DrawFreqPresetMenu+0x658>)
 8001b68:	f009 fb12 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8001b6c:	7bbb      	ldrb	r3, [r7, #14]
 8001b6e:	b29a      	uxth	r2, r3
 8001b70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b74:	9301      	str	r3, [sp, #4]
 8001b76:	2302      	movs	r3, #2
 8001b78:	9300      	str	r3, [sp, #0]
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	210a      	movs	r1, #10
 8001b7e:	484b      	ldr	r0, [pc, #300]	; (8001cac <FreqMenu_DrawFreqPresetMenu+0x65c>)
 8001b80:	f009 fb06 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8001b84:	7b7b      	ldrb	r3, [r7, #13]
 8001b86:	b29a      	uxth	r2, r3
 8001b88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b8c:	9301      	str	r3, [sp, #4]
 8001b8e:	2302      	movs	r3, #2
 8001b90:	9300      	str	r3, [sp, #0]
 8001b92:	2300      	movs	r3, #0
 8001b94:	210a      	movs	r1, #10
 8001b96:	4846      	ldr	r0, [pc, #280]	; (8001cb0 <FreqMenu_DrawFreqPresetMenu+0x660>)
 8001b98:	f009 fafa 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, WHITE, 2, BLACK);
 8001b9c:	7b3b      	ldrb	r3, [r7, #12]
 8001b9e:	b29a      	uxth	r2, r3
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	9301      	str	r3, [sp, #4]
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	9300      	str	r3, [sp, #0]
 8001ba8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bac:	210a      	movs	r1, #10
 8001bae:	4841      	ldr	r0, [pc, #260]	; (8001cb4 <FreqMenu_DrawFreqPresetMenu+0x664>)
 8001bb0:	f009 faee 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8001bb4:	7afb      	ldrb	r3, [r7, #11]
 8001bb6:	b29a      	uxth	r2, r3
 8001bb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bbc:	9301      	str	r3, [sp, #4]
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	9300      	str	r3, [sp, #0]
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	210a      	movs	r1, #10
 8001bc6:	483c      	ldr	r0, [pc, #240]	; (8001cb8 <FreqMenu_DrawFreqPresetMenu+0x668>)
 8001bc8:	f009 fae2 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 8001bcc:	7abb      	ldrb	r3, [r7, #10]
 8001bce:	b29a      	uxth	r2, r3
 8001bd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bd4:	9301      	str	r3, [sp, #4]
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	9300      	str	r3, [sp, #0]
 8001bda:	2300      	movs	r3, #0
 8001bdc:	210a      	movs	r1, #10
 8001bde:	4837      	ldr	r0, [pc, #220]	; (8001cbc <FreqMenu_DrawFreqPresetMenu+0x66c>)
 8001be0:	f009 fad6 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8001be4:	7a7b      	ldrb	r3, [r7, #9]
 8001be6:	b29a      	uxth	r2, r3
 8001be8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bec:	9301      	str	r3, [sp, #4]
 8001bee:	2302      	movs	r3, #2
 8001bf0:	9300      	str	r3, [sp, #0]
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	210a      	movs	r1, #10
 8001bf6:	4832      	ldr	r0, [pc, #200]	; (8001cc0 <FreqMenu_DrawFreqPresetMenu+0x670>)
 8001bf8:	f009 faca 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8001bfc:	7bfb      	ldrb	r3, [r7, #15]
 8001bfe:	b29a      	uxth	r2, r3
 8001c00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c04:	9301      	str	r3, [sp, #4]
 8001c06:	2302      	movs	r3, #2
 8001c08:	9300      	str	r3, [sp, #0]
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	2178      	movs	r1, #120	; 0x78
 8001c0e:	482d      	ldr	r0, [pc, #180]	; (8001cc4 <FreqMenu_DrawFreqPresetMenu+0x674>)
 8001c10:	f009 fabe 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 8001c14:	7bbb      	ldrb	r3, [r7, #14]
 8001c16:	b29a      	uxth	r2, r3
 8001c18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c1c:	9301      	str	r3, [sp, #4]
 8001c1e:	2302      	movs	r3, #2
 8001c20:	9300      	str	r3, [sp, #0]
 8001c22:	2300      	movs	r3, #0
 8001c24:	2178      	movs	r1, #120	; 0x78
 8001c26:	4828      	ldr	r0, [pc, #160]	; (8001cc8 <FreqMenu_DrawFreqPresetMenu+0x678>)
 8001c28:	f009 fab2 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8001c2c:	7b7b      	ldrb	r3, [r7, #13]
 8001c2e:	b29a      	uxth	r2, r3
 8001c30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c34:	9301      	str	r3, [sp, #4]
 8001c36:	2302      	movs	r3, #2
 8001c38:	9300      	str	r3, [sp, #0]
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	2178      	movs	r1, #120	; 0x78
 8001c3e:	4823      	ldr	r0, [pc, #140]	; (8001ccc <FreqMenu_DrawFreqPresetMenu+0x67c>)
 8001c40:	f009 faa6 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8001c44:	7b3b      	ldrb	r3, [r7, #12]
 8001c46:	b29a      	uxth	r2, r3
 8001c48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c4c:	9301      	str	r3, [sp, #4]
 8001c4e:	2302      	movs	r3, #2
 8001c50:	9300      	str	r3, [sp, #0]
 8001c52:	2300      	movs	r3, #0
 8001c54:	2178      	movs	r1, #120	; 0x78
 8001c56:	481e      	ldr	r0, [pc, #120]	; (8001cd0 <FreqMenu_DrawFreqPresetMenu+0x680>)
 8001c58:	f009 fa9a 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8001c5c:	7afb      	ldrb	r3, [r7, #11]
 8001c5e:	b29a      	uxth	r2, r3
 8001c60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c64:	9301      	str	r3, [sp, #4]
 8001c66:	2302      	movs	r3, #2
 8001c68:	9300      	str	r3, [sp, #0]
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	2178      	movs	r1, #120	; 0x78
 8001c6e:	4819      	ldr	r0, [pc, #100]	; (8001cd4 <FreqMenu_DrawFreqPresetMenu+0x684>)
 8001c70:	f009 fa8e 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8001c74:	7abb      	ldrb	r3, [r7, #10]
 8001c76:	b29a      	uxth	r2, r3
 8001c78:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c7c:	9301      	str	r3, [sp, #4]
 8001c7e:	2302      	movs	r3, #2
 8001c80:	9300      	str	r3, [sp, #0]
 8001c82:	2300      	movs	r3, #0
 8001c84:	2178      	movs	r1, #120	; 0x78
 8001c86:	4814      	ldr	r0, [pc, #80]	; (8001cd8 <FreqMenu_DrawFreqPresetMenu+0x688>)
 8001c88:	f009 fa82 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8001c8c:	7a7b      	ldrb	r3, [r7, #9]
 8001c8e:	b29a      	uxth	r2, r3
 8001c90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c94:	9301      	str	r3, [sp, #4]
 8001c96:	2302      	movs	r3, #2
 8001c98:	9300      	str	r3, [sp, #0]
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	2178      	movs	r1, #120	; 0x78
 8001c9e:	480f      	ldr	r0, [pc, #60]	; (8001cdc <FreqMenu_DrawFreqPresetMenu+0x68c>)
 8001ca0:	f009 fa76 	bl	800b190 <ILI9341_Draw_Text>
				break;
 8001ca4:	f000 bf37 	b.w	8002b16 <FreqMenu_DrawFreqPresetMenu+0x14c6>
 8001ca8:	0800e7b4 	.word	0x0800e7b4
 8001cac:	0800e7bc 	.word	0x0800e7bc
 8001cb0:	0800e7c4 	.word	0x0800e7c4
 8001cb4:	0800e7cc 	.word	0x0800e7cc
 8001cb8:	0800e7d4 	.word	0x0800e7d4
 8001cbc:	0800e7dc 	.word	0x0800e7dc
 8001cc0:	0800e7e4 	.word	0x0800e7e4
 8001cc4:	0800e7ec 	.word	0x0800e7ec
 8001cc8:	0800e7f4 	.word	0x0800e7f4
 8001ccc:	0800e7fc 	.word	0x0800e7fc
 8001cd0:	0800e804 	.word	0x0800e804
 8001cd4:	0800e80c 	.word	0x0800e80c
 8001cd8:	0800e814 	.word	0x0800e814
 8001cdc:	0800e81c 	.word	0x0800e81c
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8001ce0:	7bfb      	ldrb	r3, [r7, #15]
 8001ce2:	b29a      	uxth	r2, r3
 8001ce4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ce8:	9301      	str	r3, [sp, #4]
 8001cea:	2302      	movs	r3, #2
 8001cec:	9300      	str	r3, [sp, #0]
 8001cee:	2300      	movs	r3, #0
 8001cf0:	210a      	movs	r1, #10
 8001cf2:	48a5      	ldr	r0, [pc, #660]	; (8001f88 <FreqMenu_DrawFreqPresetMenu+0x938>)
 8001cf4:	f009 fa4c 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8001cf8:	7bbb      	ldrb	r3, [r7, #14]
 8001cfa:	b29a      	uxth	r2, r3
 8001cfc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d00:	9301      	str	r3, [sp, #4]
 8001d02:	2302      	movs	r3, #2
 8001d04:	9300      	str	r3, [sp, #0]
 8001d06:	2300      	movs	r3, #0
 8001d08:	210a      	movs	r1, #10
 8001d0a:	48a0      	ldr	r0, [pc, #640]	; (8001f8c <FreqMenu_DrawFreqPresetMenu+0x93c>)
 8001d0c:	f009 fa40 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8001d10:	7b7b      	ldrb	r3, [r7, #13]
 8001d12:	b29a      	uxth	r2, r3
 8001d14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d18:	9301      	str	r3, [sp, #4]
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	9300      	str	r3, [sp, #0]
 8001d1e:	2300      	movs	r3, #0
 8001d20:	210a      	movs	r1, #10
 8001d22:	489b      	ldr	r0, [pc, #620]	; (8001f90 <FreqMenu_DrawFreqPresetMenu+0x940>)
 8001d24:	f009 fa34 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8001d28:	7b3b      	ldrb	r3, [r7, #12]
 8001d2a:	b29a      	uxth	r2, r3
 8001d2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d30:	9301      	str	r3, [sp, #4]
 8001d32:	2302      	movs	r3, #2
 8001d34:	9300      	str	r3, [sp, #0]
 8001d36:	2300      	movs	r3, #0
 8001d38:	210a      	movs	r1, #10
 8001d3a:	4896      	ldr	r0, [pc, #600]	; (8001f94 <FreqMenu_DrawFreqPresetMenu+0x944>)
 8001d3c:	f009 fa28 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, WHITE, 2, BLACK);
 8001d40:	7afb      	ldrb	r3, [r7, #11]
 8001d42:	b29a      	uxth	r2, r3
 8001d44:	2300      	movs	r3, #0
 8001d46:	9301      	str	r3, [sp, #4]
 8001d48:	2302      	movs	r3, #2
 8001d4a:	9300      	str	r3, [sp, #0]
 8001d4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d50:	210a      	movs	r1, #10
 8001d52:	4891      	ldr	r0, [pc, #580]	; (8001f98 <FreqMenu_DrawFreqPresetMenu+0x948>)
 8001d54:	f009 fa1c 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 8001d58:	7abb      	ldrb	r3, [r7, #10]
 8001d5a:	b29a      	uxth	r2, r3
 8001d5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d60:	9301      	str	r3, [sp, #4]
 8001d62:	2302      	movs	r3, #2
 8001d64:	9300      	str	r3, [sp, #0]
 8001d66:	2300      	movs	r3, #0
 8001d68:	210a      	movs	r1, #10
 8001d6a:	488c      	ldr	r0, [pc, #560]	; (8001f9c <FreqMenu_DrawFreqPresetMenu+0x94c>)
 8001d6c:	f009 fa10 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8001d70:	7a7b      	ldrb	r3, [r7, #9]
 8001d72:	b29a      	uxth	r2, r3
 8001d74:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d78:	9301      	str	r3, [sp, #4]
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	9300      	str	r3, [sp, #0]
 8001d7e:	2300      	movs	r3, #0
 8001d80:	210a      	movs	r1, #10
 8001d82:	4887      	ldr	r0, [pc, #540]	; (8001fa0 <FreqMenu_DrawFreqPresetMenu+0x950>)
 8001d84:	f009 fa04 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8001d88:	7bfb      	ldrb	r3, [r7, #15]
 8001d8a:	b29a      	uxth	r2, r3
 8001d8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d90:	9301      	str	r3, [sp, #4]
 8001d92:	2302      	movs	r3, #2
 8001d94:	9300      	str	r3, [sp, #0]
 8001d96:	2300      	movs	r3, #0
 8001d98:	2178      	movs	r1, #120	; 0x78
 8001d9a:	4882      	ldr	r0, [pc, #520]	; (8001fa4 <FreqMenu_DrawFreqPresetMenu+0x954>)
 8001d9c:	f009 f9f8 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 8001da0:	7bbb      	ldrb	r3, [r7, #14]
 8001da2:	b29a      	uxth	r2, r3
 8001da4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001da8:	9301      	str	r3, [sp, #4]
 8001daa:	2302      	movs	r3, #2
 8001dac:	9300      	str	r3, [sp, #0]
 8001dae:	2300      	movs	r3, #0
 8001db0:	2178      	movs	r1, #120	; 0x78
 8001db2:	487d      	ldr	r0, [pc, #500]	; (8001fa8 <FreqMenu_DrawFreqPresetMenu+0x958>)
 8001db4:	f009 f9ec 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8001db8:	7b7b      	ldrb	r3, [r7, #13]
 8001dba:	b29a      	uxth	r2, r3
 8001dbc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001dc0:	9301      	str	r3, [sp, #4]
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	9300      	str	r3, [sp, #0]
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	2178      	movs	r1, #120	; 0x78
 8001dca:	4878      	ldr	r0, [pc, #480]	; (8001fac <FreqMenu_DrawFreqPresetMenu+0x95c>)
 8001dcc:	f009 f9e0 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8001dd0:	7b3b      	ldrb	r3, [r7, #12]
 8001dd2:	b29a      	uxth	r2, r3
 8001dd4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001dd8:	9301      	str	r3, [sp, #4]
 8001dda:	2302      	movs	r3, #2
 8001ddc:	9300      	str	r3, [sp, #0]
 8001dde:	2300      	movs	r3, #0
 8001de0:	2178      	movs	r1, #120	; 0x78
 8001de2:	4873      	ldr	r0, [pc, #460]	; (8001fb0 <FreqMenu_DrawFreqPresetMenu+0x960>)
 8001de4:	f009 f9d4 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8001de8:	7afb      	ldrb	r3, [r7, #11]
 8001dea:	b29a      	uxth	r2, r3
 8001dec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001df0:	9301      	str	r3, [sp, #4]
 8001df2:	2302      	movs	r3, #2
 8001df4:	9300      	str	r3, [sp, #0]
 8001df6:	2300      	movs	r3, #0
 8001df8:	2178      	movs	r1, #120	; 0x78
 8001dfa:	486e      	ldr	r0, [pc, #440]	; (8001fb4 <FreqMenu_DrawFreqPresetMenu+0x964>)
 8001dfc:	f009 f9c8 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8001e00:	7abb      	ldrb	r3, [r7, #10]
 8001e02:	b29a      	uxth	r2, r3
 8001e04:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e08:	9301      	str	r3, [sp, #4]
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	9300      	str	r3, [sp, #0]
 8001e0e:	2300      	movs	r3, #0
 8001e10:	2178      	movs	r1, #120	; 0x78
 8001e12:	4869      	ldr	r0, [pc, #420]	; (8001fb8 <FreqMenu_DrawFreqPresetMenu+0x968>)
 8001e14:	f009 f9bc 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8001e18:	7a7b      	ldrb	r3, [r7, #9]
 8001e1a:	b29a      	uxth	r2, r3
 8001e1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e20:	9301      	str	r3, [sp, #4]
 8001e22:	2302      	movs	r3, #2
 8001e24:	9300      	str	r3, [sp, #0]
 8001e26:	2300      	movs	r3, #0
 8001e28:	2178      	movs	r1, #120	; 0x78
 8001e2a:	4864      	ldr	r0, [pc, #400]	; (8001fbc <FreqMenu_DrawFreqPresetMenu+0x96c>)
 8001e2c:	f009 f9b0 	bl	800b190 <ILI9341_Draw_Text>
				break;
 8001e30:	f000 be71 	b.w	8002b16 <FreqMenu_DrawFreqPresetMenu+0x14c6>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8001e34:	7bfb      	ldrb	r3, [r7, #15]
 8001e36:	b29a      	uxth	r2, r3
 8001e38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e3c:	9301      	str	r3, [sp, #4]
 8001e3e:	2302      	movs	r3, #2
 8001e40:	9300      	str	r3, [sp, #0]
 8001e42:	2300      	movs	r3, #0
 8001e44:	210a      	movs	r1, #10
 8001e46:	4850      	ldr	r0, [pc, #320]	; (8001f88 <FreqMenu_DrawFreqPresetMenu+0x938>)
 8001e48:	f009 f9a2 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8001e4c:	7bbb      	ldrb	r3, [r7, #14]
 8001e4e:	b29a      	uxth	r2, r3
 8001e50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e54:	9301      	str	r3, [sp, #4]
 8001e56:	2302      	movs	r3, #2
 8001e58:	9300      	str	r3, [sp, #0]
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	210a      	movs	r1, #10
 8001e5e:	484b      	ldr	r0, [pc, #300]	; (8001f8c <FreqMenu_DrawFreqPresetMenu+0x93c>)
 8001e60:	f009 f996 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8001e64:	7b7b      	ldrb	r3, [r7, #13]
 8001e66:	b29a      	uxth	r2, r3
 8001e68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e6c:	9301      	str	r3, [sp, #4]
 8001e6e:	2302      	movs	r3, #2
 8001e70:	9300      	str	r3, [sp, #0]
 8001e72:	2300      	movs	r3, #0
 8001e74:	210a      	movs	r1, #10
 8001e76:	4846      	ldr	r0, [pc, #280]	; (8001f90 <FreqMenu_DrawFreqPresetMenu+0x940>)
 8001e78:	f009 f98a 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8001e7c:	7b3b      	ldrb	r3, [r7, #12]
 8001e7e:	b29a      	uxth	r2, r3
 8001e80:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e84:	9301      	str	r3, [sp, #4]
 8001e86:	2302      	movs	r3, #2
 8001e88:	9300      	str	r3, [sp, #0]
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	210a      	movs	r1, #10
 8001e8e:	4841      	ldr	r0, [pc, #260]	; (8001f94 <FreqMenu_DrawFreqPresetMenu+0x944>)
 8001e90:	f009 f97e 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8001e94:	7afb      	ldrb	r3, [r7, #11]
 8001e96:	b29a      	uxth	r2, r3
 8001e98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e9c:	9301      	str	r3, [sp, #4]
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	9300      	str	r3, [sp, #0]
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	210a      	movs	r1, #10
 8001ea6:	483c      	ldr	r0, [pc, #240]	; (8001f98 <FreqMenu_DrawFreqPresetMenu+0x948>)
 8001ea8:	f009 f972 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, WHITE, 2, BLACK);
 8001eac:	7abb      	ldrb	r3, [r7, #10]
 8001eae:	b29a      	uxth	r2, r3
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	9301      	str	r3, [sp, #4]
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	9300      	str	r3, [sp, #0]
 8001eb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ebc:	210a      	movs	r1, #10
 8001ebe:	4837      	ldr	r0, [pc, #220]	; (8001f9c <FreqMenu_DrawFreqPresetMenu+0x94c>)
 8001ec0:	f009 f966 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8001ec4:	7a7b      	ldrb	r3, [r7, #9]
 8001ec6:	b29a      	uxth	r2, r3
 8001ec8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ecc:	9301      	str	r3, [sp, #4]
 8001ece:	2302      	movs	r3, #2
 8001ed0:	9300      	str	r3, [sp, #0]
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	210a      	movs	r1, #10
 8001ed6:	4832      	ldr	r0, [pc, #200]	; (8001fa0 <FreqMenu_DrawFreqPresetMenu+0x950>)
 8001ed8:	f009 f95a 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8001edc:	7bfb      	ldrb	r3, [r7, #15]
 8001ede:	b29a      	uxth	r2, r3
 8001ee0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ee4:	9301      	str	r3, [sp, #4]
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	9300      	str	r3, [sp, #0]
 8001eea:	2300      	movs	r3, #0
 8001eec:	2178      	movs	r1, #120	; 0x78
 8001eee:	482d      	ldr	r0, [pc, #180]	; (8001fa4 <FreqMenu_DrawFreqPresetMenu+0x954>)
 8001ef0:	f009 f94e 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 8001ef4:	7bbb      	ldrb	r3, [r7, #14]
 8001ef6:	b29a      	uxth	r2, r3
 8001ef8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001efc:	9301      	str	r3, [sp, #4]
 8001efe:	2302      	movs	r3, #2
 8001f00:	9300      	str	r3, [sp, #0]
 8001f02:	2300      	movs	r3, #0
 8001f04:	2178      	movs	r1, #120	; 0x78
 8001f06:	4828      	ldr	r0, [pc, #160]	; (8001fa8 <FreqMenu_DrawFreqPresetMenu+0x958>)
 8001f08:	f009 f942 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8001f0c:	7b7b      	ldrb	r3, [r7, #13]
 8001f0e:	b29a      	uxth	r2, r3
 8001f10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f14:	9301      	str	r3, [sp, #4]
 8001f16:	2302      	movs	r3, #2
 8001f18:	9300      	str	r3, [sp, #0]
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	2178      	movs	r1, #120	; 0x78
 8001f1e:	4823      	ldr	r0, [pc, #140]	; (8001fac <FreqMenu_DrawFreqPresetMenu+0x95c>)
 8001f20:	f009 f936 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8001f24:	7b3b      	ldrb	r3, [r7, #12]
 8001f26:	b29a      	uxth	r2, r3
 8001f28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f2c:	9301      	str	r3, [sp, #4]
 8001f2e:	2302      	movs	r3, #2
 8001f30:	9300      	str	r3, [sp, #0]
 8001f32:	2300      	movs	r3, #0
 8001f34:	2178      	movs	r1, #120	; 0x78
 8001f36:	481e      	ldr	r0, [pc, #120]	; (8001fb0 <FreqMenu_DrawFreqPresetMenu+0x960>)
 8001f38:	f009 f92a 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8001f3c:	7afb      	ldrb	r3, [r7, #11]
 8001f3e:	b29a      	uxth	r2, r3
 8001f40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f44:	9301      	str	r3, [sp, #4]
 8001f46:	2302      	movs	r3, #2
 8001f48:	9300      	str	r3, [sp, #0]
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	2178      	movs	r1, #120	; 0x78
 8001f4e:	4819      	ldr	r0, [pc, #100]	; (8001fb4 <FreqMenu_DrawFreqPresetMenu+0x964>)
 8001f50:	f009 f91e 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8001f54:	7abb      	ldrb	r3, [r7, #10]
 8001f56:	b29a      	uxth	r2, r3
 8001f58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f5c:	9301      	str	r3, [sp, #4]
 8001f5e:	2302      	movs	r3, #2
 8001f60:	9300      	str	r3, [sp, #0]
 8001f62:	2300      	movs	r3, #0
 8001f64:	2178      	movs	r1, #120	; 0x78
 8001f66:	4814      	ldr	r0, [pc, #80]	; (8001fb8 <FreqMenu_DrawFreqPresetMenu+0x968>)
 8001f68:	f009 f912 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8001f6c:	7a7b      	ldrb	r3, [r7, #9]
 8001f6e:	b29a      	uxth	r2, r3
 8001f70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f74:	9301      	str	r3, [sp, #4]
 8001f76:	2302      	movs	r3, #2
 8001f78:	9300      	str	r3, [sp, #0]
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	2178      	movs	r1, #120	; 0x78
 8001f7e:	480f      	ldr	r0, [pc, #60]	; (8001fbc <FreqMenu_DrawFreqPresetMenu+0x96c>)
 8001f80:	f009 f906 	bl	800b190 <ILI9341_Draw_Text>
				break;
 8001f84:	f000 bdc7 	b.w	8002b16 <FreqMenu_DrawFreqPresetMenu+0x14c6>
 8001f88:	0800e7b4 	.word	0x0800e7b4
 8001f8c:	0800e7bc 	.word	0x0800e7bc
 8001f90:	0800e7c4 	.word	0x0800e7c4
 8001f94:	0800e7cc 	.word	0x0800e7cc
 8001f98:	0800e7d4 	.word	0x0800e7d4
 8001f9c:	0800e7dc 	.word	0x0800e7dc
 8001fa0:	0800e7e4 	.word	0x0800e7e4
 8001fa4:	0800e7ec 	.word	0x0800e7ec
 8001fa8:	0800e7f4 	.word	0x0800e7f4
 8001fac:	0800e7fc 	.word	0x0800e7fc
 8001fb0:	0800e804 	.word	0x0800e804
 8001fb4:	0800e80c 	.word	0x0800e80c
 8001fb8:	0800e814 	.word	0x0800e814
 8001fbc:	0800e81c 	.word	0x0800e81c
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8001fc0:	7bfb      	ldrb	r3, [r7, #15]
 8001fc2:	b29a      	uxth	r2, r3
 8001fc4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fc8:	9301      	str	r3, [sp, #4]
 8001fca:	2302      	movs	r3, #2
 8001fcc:	9300      	str	r3, [sp, #0]
 8001fce:	2300      	movs	r3, #0
 8001fd0:	210a      	movs	r1, #10
 8001fd2:	48a5      	ldr	r0, [pc, #660]	; (8002268 <FreqMenu_DrawFreqPresetMenu+0xc18>)
 8001fd4:	f009 f8dc 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8001fd8:	7bbb      	ldrb	r3, [r7, #14]
 8001fda:	b29a      	uxth	r2, r3
 8001fdc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fe0:	9301      	str	r3, [sp, #4]
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	9300      	str	r3, [sp, #0]
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	210a      	movs	r1, #10
 8001fea:	48a0      	ldr	r0, [pc, #640]	; (800226c <FreqMenu_DrawFreqPresetMenu+0xc1c>)
 8001fec:	f009 f8d0 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8001ff0:	7b7b      	ldrb	r3, [r7, #13]
 8001ff2:	b29a      	uxth	r2, r3
 8001ff4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ff8:	9301      	str	r3, [sp, #4]
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	9300      	str	r3, [sp, #0]
 8001ffe:	2300      	movs	r3, #0
 8002000:	210a      	movs	r1, #10
 8002002:	489b      	ldr	r0, [pc, #620]	; (8002270 <FreqMenu_DrawFreqPresetMenu+0xc20>)
 8002004:	f009 f8c4 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8002008:	7b3b      	ldrb	r3, [r7, #12]
 800200a:	b29a      	uxth	r2, r3
 800200c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002010:	9301      	str	r3, [sp, #4]
 8002012:	2302      	movs	r3, #2
 8002014:	9300      	str	r3, [sp, #0]
 8002016:	2300      	movs	r3, #0
 8002018:	210a      	movs	r1, #10
 800201a:	4896      	ldr	r0, [pc, #600]	; (8002274 <FreqMenu_DrawFreqPresetMenu+0xc24>)
 800201c:	f009 f8b8 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8002020:	7afb      	ldrb	r3, [r7, #11]
 8002022:	b29a      	uxth	r2, r3
 8002024:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002028:	9301      	str	r3, [sp, #4]
 800202a:	2302      	movs	r3, #2
 800202c:	9300      	str	r3, [sp, #0]
 800202e:	2300      	movs	r3, #0
 8002030:	210a      	movs	r1, #10
 8002032:	4891      	ldr	r0, [pc, #580]	; (8002278 <FreqMenu_DrawFreqPresetMenu+0xc28>)
 8002034:	f009 f8ac 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 8002038:	7abb      	ldrb	r3, [r7, #10]
 800203a:	b29a      	uxth	r2, r3
 800203c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002040:	9301      	str	r3, [sp, #4]
 8002042:	2302      	movs	r3, #2
 8002044:	9300      	str	r3, [sp, #0]
 8002046:	2300      	movs	r3, #0
 8002048:	210a      	movs	r1, #10
 800204a:	488c      	ldr	r0, [pc, #560]	; (800227c <FreqMenu_DrawFreqPresetMenu+0xc2c>)
 800204c:	f009 f8a0 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, WHITE, 2, BLACK);
 8002050:	7a7b      	ldrb	r3, [r7, #9]
 8002052:	b29a      	uxth	r2, r3
 8002054:	2300      	movs	r3, #0
 8002056:	9301      	str	r3, [sp, #4]
 8002058:	2302      	movs	r3, #2
 800205a:	9300      	str	r3, [sp, #0]
 800205c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002060:	210a      	movs	r1, #10
 8002062:	4887      	ldr	r0, [pc, #540]	; (8002280 <FreqMenu_DrawFreqPresetMenu+0xc30>)
 8002064:	f009 f894 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8002068:	7bfb      	ldrb	r3, [r7, #15]
 800206a:	b29a      	uxth	r2, r3
 800206c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002070:	9301      	str	r3, [sp, #4]
 8002072:	2302      	movs	r3, #2
 8002074:	9300      	str	r3, [sp, #0]
 8002076:	2300      	movs	r3, #0
 8002078:	2178      	movs	r1, #120	; 0x78
 800207a:	4882      	ldr	r0, [pc, #520]	; (8002284 <FreqMenu_DrawFreqPresetMenu+0xc34>)
 800207c:	f009 f888 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 8002080:	7bbb      	ldrb	r3, [r7, #14]
 8002082:	b29a      	uxth	r2, r3
 8002084:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002088:	9301      	str	r3, [sp, #4]
 800208a:	2302      	movs	r3, #2
 800208c:	9300      	str	r3, [sp, #0]
 800208e:	2300      	movs	r3, #0
 8002090:	2178      	movs	r1, #120	; 0x78
 8002092:	487d      	ldr	r0, [pc, #500]	; (8002288 <FreqMenu_DrawFreqPresetMenu+0xc38>)
 8002094:	f009 f87c 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8002098:	7b7b      	ldrb	r3, [r7, #13]
 800209a:	b29a      	uxth	r2, r3
 800209c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020a0:	9301      	str	r3, [sp, #4]
 80020a2:	2302      	movs	r3, #2
 80020a4:	9300      	str	r3, [sp, #0]
 80020a6:	2300      	movs	r3, #0
 80020a8:	2178      	movs	r1, #120	; 0x78
 80020aa:	4878      	ldr	r0, [pc, #480]	; (800228c <FreqMenu_DrawFreqPresetMenu+0xc3c>)
 80020ac:	f009 f870 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 80020b0:	7b3b      	ldrb	r3, [r7, #12]
 80020b2:	b29a      	uxth	r2, r3
 80020b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020b8:	9301      	str	r3, [sp, #4]
 80020ba:	2302      	movs	r3, #2
 80020bc:	9300      	str	r3, [sp, #0]
 80020be:	2300      	movs	r3, #0
 80020c0:	2178      	movs	r1, #120	; 0x78
 80020c2:	4873      	ldr	r0, [pc, #460]	; (8002290 <FreqMenu_DrawFreqPresetMenu+0xc40>)
 80020c4:	f009 f864 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 80020c8:	7afb      	ldrb	r3, [r7, #11]
 80020ca:	b29a      	uxth	r2, r3
 80020cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020d0:	9301      	str	r3, [sp, #4]
 80020d2:	2302      	movs	r3, #2
 80020d4:	9300      	str	r3, [sp, #0]
 80020d6:	2300      	movs	r3, #0
 80020d8:	2178      	movs	r1, #120	; 0x78
 80020da:	486e      	ldr	r0, [pc, #440]	; (8002294 <FreqMenu_DrawFreqPresetMenu+0xc44>)
 80020dc:	f009 f858 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 80020e0:	7abb      	ldrb	r3, [r7, #10]
 80020e2:	b29a      	uxth	r2, r3
 80020e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020e8:	9301      	str	r3, [sp, #4]
 80020ea:	2302      	movs	r3, #2
 80020ec:	9300      	str	r3, [sp, #0]
 80020ee:	2300      	movs	r3, #0
 80020f0:	2178      	movs	r1, #120	; 0x78
 80020f2:	4869      	ldr	r0, [pc, #420]	; (8002298 <FreqMenu_DrawFreqPresetMenu+0xc48>)
 80020f4:	f009 f84c 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 80020f8:	7a7b      	ldrb	r3, [r7, #9]
 80020fa:	b29a      	uxth	r2, r3
 80020fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002100:	9301      	str	r3, [sp, #4]
 8002102:	2302      	movs	r3, #2
 8002104:	9300      	str	r3, [sp, #0]
 8002106:	2300      	movs	r3, #0
 8002108:	2178      	movs	r1, #120	; 0x78
 800210a:	4864      	ldr	r0, [pc, #400]	; (800229c <FreqMenu_DrawFreqPresetMenu+0xc4c>)
 800210c:	f009 f840 	bl	800b190 <ILI9341_Draw_Text>
				break;
 8002110:	f000 bd01 	b.w	8002b16 <FreqMenu_DrawFreqPresetMenu+0x14c6>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8002114:	7bfb      	ldrb	r3, [r7, #15]
 8002116:	b29a      	uxth	r2, r3
 8002118:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800211c:	9301      	str	r3, [sp, #4]
 800211e:	2302      	movs	r3, #2
 8002120:	9300      	str	r3, [sp, #0]
 8002122:	2300      	movs	r3, #0
 8002124:	210a      	movs	r1, #10
 8002126:	4850      	ldr	r0, [pc, #320]	; (8002268 <FreqMenu_DrawFreqPresetMenu+0xc18>)
 8002128:	f009 f832 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 800212c:	7bbb      	ldrb	r3, [r7, #14]
 800212e:	b29a      	uxth	r2, r3
 8002130:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002134:	9301      	str	r3, [sp, #4]
 8002136:	2302      	movs	r3, #2
 8002138:	9300      	str	r3, [sp, #0]
 800213a:	2300      	movs	r3, #0
 800213c:	210a      	movs	r1, #10
 800213e:	484b      	ldr	r0, [pc, #300]	; (800226c <FreqMenu_DrawFreqPresetMenu+0xc1c>)
 8002140:	f009 f826 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8002144:	7b7b      	ldrb	r3, [r7, #13]
 8002146:	b29a      	uxth	r2, r3
 8002148:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800214c:	9301      	str	r3, [sp, #4]
 800214e:	2302      	movs	r3, #2
 8002150:	9300      	str	r3, [sp, #0]
 8002152:	2300      	movs	r3, #0
 8002154:	210a      	movs	r1, #10
 8002156:	4846      	ldr	r0, [pc, #280]	; (8002270 <FreqMenu_DrawFreqPresetMenu+0xc20>)
 8002158:	f009 f81a 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 800215c:	7b3b      	ldrb	r3, [r7, #12]
 800215e:	b29a      	uxth	r2, r3
 8002160:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002164:	9301      	str	r3, [sp, #4]
 8002166:	2302      	movs	r3, #2
 8002168:	9300      	str	r3, [sp, #0]
 800216a:	2300      	movs	r3, #0
 800216c:	210a      	movs	r1, #10
 800216e:	4841      	ldr	r0, [pc, #260]	; (8002274 <FreqMenu_DrawFreqPresetMenu+0xc24>)
 8002170:	f009 f80e 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8002174:	7afb      	ldrb	r3, [r7, #11]
 8002176:	b29a      	uxth	r2, r3
 8002178:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800217c:	9301      	str	r3, [sp, #4]
 800217e:	2302      	movs	r3, #2
 8002180:	9300      	str	r3, [sp, #0]
 8002182:	2300      	movs	r3, #0
 8002184:	210a      	movs	r1, #10
 8002186:	483c      	ldr	r0, [pc, #240]	; (8002278 <FreqMenu_DrawFreqPresetMenu+0xc28>)
 8002188:	f009 f802 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 800218c:	7abb      	ldrb	r3, [r7, #10]
 800218e:	b29a      	uxth	r2, r3
 8002190:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002194:	9301      	str	r3, [sp, #4]
 8002196:	2302      	movs	r3, #2
 8002198:	9300      	str	r3, [sp, #0]
 800219a:	2300      	movs	r3, #0
 800219c:	210a      	movs	r1, #10
 800219e:	4837      	ldr	r0, [pc, #220]	; (800227c <FreqMenu_DrawFreqPresetMenu+0xc2c>)
 80021a0:	f008 fff6 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 80021a4:	7a7b      	ldrb	r3, [r7, #9]
 80021a6:	b29a      	uxth	r2, r3
 80021a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021ac:	9301      	str	r3, [sp, #4]
 80021ae:	2302      	movs	r3, #2
 80021b0:	9300      	str	r3, [sp, #0]
 80021b2:	2300      	movs	r3, #0
 80021b4:	210a      	movs	r1, #10
 80021b6:	4832      	ldr	r0, [pc, #200]	; (8002280 <FreqMenu_DrawFreqPresetMenu+0xc30>)
 80021b8:	f008 ffea 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, WHITE, 2, BLACK);
 80021bc:	7bfb      	ldrb	r3, [r7, #15]
 80021be:	b29a      	uxth	r2, r3
 80021c0:	2300      	movs	r3, #0
 80021c2:	9301      	str	r3, [sp, #4]
 80021c4:	2302      	movs	r3, #2
 80021c6:	9300      	str	r3, [sp, #0]
 80021c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021cc:	2178      	movs	r1, #120	; 0x78
 80021ce:	482d      	ldr	r0, [pc, #180]	; (8002284 <FreqMenu_DrawFreqPresetMenu+0xc34>)
 80021d0:	f008 ffde 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 80021d4:	7bbb      	ldrb	r3, [r7, #14]
 80021d6:	b29a      	uxth	r2, r3
 80021d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021dc:	9301      	str	r3, [sp, #4]
 80021de:	2302      	movs	r3, #2
 80021e0:	9300      	str	r3, [sp, #0]
 80021e2:	2300      	movs	r3, #0
 80021e4:	2178      	movs	r1, #120	; 0x78
 80021e6:	4828      	ldr	r0, [pc, #160]	; (8002288 <FreqMenu_DrawFreqPresetMenu+0xc38>)
 80021e8:	f008 ffd2 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 80021ec:	7b7b      	ldrb	r3, [r7, #13]
 80021ee:	b29a      	uxth	r2, r3
 80021f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021f4:	9301      	str	r3, [sp, #4]
 80021f6:	2302      	movs	r3, #2
 80021f8:	9300      	str	r3, [sp, #0]
 80021fa:	2300      	movs	r3, #0
 80021fc:	2178      	movs	r1, #120	; 0x78
 80021fe:	4823      	ldr	r0, [pc, #140]	; (800228c <FreqMenu_DrawFreqPresetMenu+0xc3c>)
 8002200:	f008 ffc6 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8002204:	7b3b      	ldrb	r3, [r7, #12]
 8002206:	b29a      	uxth	r2, r3
 8002208:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800220c:	9301      	str	r3, [sp, #4]
 800220e:	2302      	movs	r3, #2
 8002210:	9300      	str	r3, [sp, #0]
 8002212:	2300      	movs	r3, #0
 8002214:	2178      	movs	r1, #120	; 0x78
 8002216:	481e      	ldr	r0, [pc, #120]	; (8002290 <FreqMenu_DrawFreqPresetMenu+0xc40>)
 8002218:	f008 ffba 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 800221c:	7afb      	ldrb	r3, [r7, #11]
 800221e:	b29a      	uxth	r2, r3
 8002220:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002224:	9301      	str	r3, [sp, #4]
 8002226:	2302      	movs	r3, #2
 8002228:	9300      	str	r3, [sp, #0]
 800222a:	2300      	movs	r3, #0
 800222c:	2178      	movs	r1, #120	; 0x78
 800222e:	4819      	ldr	r0, [pc, #100]	; (8002294 <FreqMenu_DrawFreqPresetMenu+0xc44>)
 8002230:	f008 ffae 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8002234:	7abb      	ldrb	r3, [r7, #10]
 8002236:	b29a      	uxth	r2, r3
 8002238:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800223c:	9301      	str	r3, [sp, #4]
 800223e:	2302      	movs	r3, #2
 8002240:	9300      	str	r3, [sp, #0]
 8002242:	2300      	movs	r3, #0
 8002244:	2178      	movs	r1, #120	; 0x78
 8002246:	4814      	ldr	r0, [pc, #80]	; (8002298 <FreqMenu_DrawFreqPresetMenu+0xc48>)
 8002248:	f008 ffa2 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 800224c:	7a7b      	ldrb	r3, [r7, #9]
 800224e:	b29a      	uxth	r2, r3
 8002250:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002254:	9301      	str	r3, [sp, #4]
 8002256:	2302      	movs	r3, #2
 8002258:	9300      	str	r3, [sp, #0]
 800225a:	2300      	movs	r3, #0
 800225c:	2178      	movs	r1, #120	; 0x78
 800225e:	480f      	ldr	r0, [pc, #60]	; (800229c <FreqMenu_DrawFreqPresetMenu+0xc4c>)
 8002260:	f008 ff96 	bl	800b190 <ILI9341_Draw_Text>
				break;
 8002264:	f000 bc57 	b.w	8002b16 <FreqMenu_DrawFreqPresetMenu+0x14c6>
 8002268:	0800e7b4 	.word	0x0800e7b4
 800226c:	0800e7bc 	.word	0x0800e7bc
 8002270:	0800e7c4 	.word	0x0800e7c4
 8002274:	0800e7cc 	.word	0x0800e7cc
 8002278:	0800e7d4 	.word	0x0800e7d4
 800227c:	0800e7dc 	.word	0x0800e7dc
 8002280:	0800e7e4 	.word	0x0800e7e4
 8002284:	0800e7ec 	.word	0x0800e7ec
 8002288:	0800e7f4 	.word	0x0800e7f4
 800228c:	0800e7fc 	.word	0x0800e7fc
 8002290:	0800e804 	.word	0x0800e804
 8002294:	0800e80c 	.word	0x0800e80c
 8002298:	0800e814 	.word	0x0800e814
 800229c:	0800e81c 	.word	0x0800e81c
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 80022a0:	7bfb      	ldrb	r3, [r7, #15]
 80022a2:	b29a      	uxth	r2, r3
 80022a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022a8:	9301      	str	r3, [sp, #4]
 80022aa:	2302      	movs	r3, #2
 80022ac:	9300      	str	r3, [sp, #0]
 80022ae:	2300      	movs	r3, #0
 80022b0:	210a      	movs	r1, #10
 80022b2:	48a4      	ldr	r0, [pc, #656]	; (8002544 <FreqMenu_DrawFreqPresetMenu+0xef4>)
 80022b4:	f008 ff6c 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 80022b8:	7bbb      	ldrb	r3, [r7, #14]
 80022ba:	b29a      	uxth	r2, r3
 80022bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022c0:	9301      	str	r3, [sp, #4]
 80022c2:	2302      	movs	r3, #2
 80022c4:	9300      	str	r3, [sp, #0]
 80022c6:	2300      	movs	r3, #0
 80022c8:	210a      	movs	r1, #10
 80022ca:	489f      	ldr	r0, [pc, #636]	; (8002548 <FreqMenu_DrawFreqPresetMenu+0xef8>)
 80022cc:	f008 ff60 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 80022d0:	7b7b      	ldrb	r3, [r7, #13]
 80022d2:	b29a      	uxth	r2, r3
 80022d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022d8:	9301      	str	r3, [sp, #4]
 80022da:	2302      	movs	r3, #2
 80022dc:	9300      	str	r3, [sp, #0]
 80022de:	2300      	movs	r3, #0
 80022e0:	210a      	movs	r1, #10
 80022e2:	489a      	ldr	r0, [pc, #616]	; (800254c <FreqMenu_DrawFreqPresetMenu+0xefc>)
 80022e4:	f008 ff54 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 80022e8:	7b3b      	ldrb	r3, [r7, #12]
 80022ea:	b29a      	uxth	r2, r3
 80022ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022f0:	9301      	str	r3, [sp, #4]
 80022f2:	2302      	movs	r3, #2
 80022f4:	9300      	str	r3, [sp, #0]
 80022f6:	2300      	movs	r3, #0
 80022f8:	210a      	movs	r1, #10
 80022fa:	4895      	ldr	r0, [pc, #596]	; (8002550 <FreqMenu_DrawFreqPresetMenu+0xf00>)
 80022fc:	f008 ff48 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8002300:	7afb      	ldrb	r3, [r7, #11]
 8002302:	b29a      	uxth	r2, r3
 8002304:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002308:	9301      	str	r3, [sp, #4]
 800230a:	2302      	movs	r3, #2
 800230c:	9300      	str	r3, [sp, #0]
 800230e:	2300      	movs	r3, #0
 8002310:	210a      	movs	r1, #10
 8002312:	4890      	ldr	r0, [pc, #576]	; (8002554 <FreqMenu_DrawFreqPresetMenu+0xf04>)
 8002314:	f008 ff3c 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 8002318:	7abb      	ldrb	r3, [r7, #10]
 800231a:	b29a      	uxth	r2, r3
 800231c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002320:	9301      	str	r3, [sp, #4]
 8002322:	2302      	movs	r3, #2
 8002324:	9300      	str	r3, [sp, #0]
 8002326:	2300      	movs	r3, #0
 8002328:	210a      	movs	r1, #10
 800232a:	488b      	ldr	r0, [pc, #556]	; (8002558 <FreqMenu_DrawFreqPresetMenu+0xf08>)
 800232c:	f008 ff30 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8002330:	7a7b      	ldrb	r3, [r7, #9]
 8002332:	b29a      	uxth	r2, r3
 8002334:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002338:	9301      	str	r3, [sp, #4]
 800233a:	2302      	movs	r3, #2
 800233c:	9300      	str	r3, [sp, #0]
 800233e:	2300      	movs	r3, #0
 8002340:	210a      	movs	r1, #10
 8002342:	4886      	ldr	r0, [pc, #536]	; (800255c <FreqMenu_DrawFreqPresetMenu+0xf0c>)
 8002344:	f008 ff24 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8002348:	7bfb      	ldrb	r3, [r7, #15]
 800234a:	b29a      	uxth	r2, r3
 800234c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002350:	9301      	str	r3, [sp, #4]
 8002352:	2302      	movs	r3, #2
 8002354:	9300      	str	r3, [sp, #0]
 8002356:	2300      	movs	r3, #0
 8002358:	2178      	movs	r1, #120	; 0x78
 800235a:	4881      	ldr	r0, [pc, #516]	; (8002560 <FreqMenu_DrawFreqPresetMenu+0xf10>)
 800235c:	f008 ff18 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, WHITE, 2, BLACK);
 8002360:	7bbb      	ldrb	r3, [r7, #14]
 8002362:	b29a      	uxth	r2, r3
 8002364:	2300      	movs	r3, #0
 8002366:	9301      	str	r3, [sp, #4]
 8002368:	2302      	movs	r3, #2
 800236a:	9300      	str	r3, [sp, #0]
 800236c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002370:	2178      	movs	r1, #120	; 0x78
 8002372:	487c      	ldr	r0, [pc, #496]	; (8002564 <FreqMenu_DrawFreqPresetMenu+0xf14>)
 8002374:	f008 ff0c 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8002378:	7b7b      	ldrb	r3, [r7, #13]
 800237a:	b29a      	uxth	r2, r3
 800237c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002380:	9301      	str	r3, [sp, #4]
 8002382:	2302      	movs	r3, #2
 8002384:	9300      	str	r3, [sp, #0]
 8002386:	2300      	movs	r3, #0
 8002388:	2178      	movs	r1, #120	; 0x78
 800238a:	4877      	ldr	r0, [pc, #476]	; (8002568 <FreqMenu_DrawFreqPresetMenu+0xf18>)
 800238c:	f008 ff00 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8002390:	7b3b      	ldrb	r3, [r7, #12]
 8002392:	b29a      	uxth	r2, r3
 8002394:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002398:	9301      	str	r3, [sp, #4]
 800239a:	2302      	movs	r3, #2
 800239c:	9300      	str	r3, [sp, #0]
 800239e:	2300      	movs	r3, #0
 80023a0:	2178      	movs	r1, #120	; 0x78
 80023a2:	4872      	ldr	r0, [pc, #456]	; (800256c <FreqMenu_DrawFreqPresetMenu+0xf1c>)
 80023a4:	f008 fef4 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 80023a8:	7afb      	ldrb	r3, [r7, #11]
 80023aa:	b29a      	uxth	r2, r3
 80023ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023b0:	9301      	str	r3, [sp, #4]
 80023b2:	2302      	movs	r3, #2
 80023b4:	9300      	str	r3, [sp, #0]
 80023b6:	2300      	movs	r3, #0
 80023b8:	2178      	movs	r1, #120	; 0x78
 80023ba:	486d      	ldr	r0, [pc, #436]	; (8002570 <FreqMenu_DrawFreqPresetMenu+0xf20>)
 80023bc:	f008 fee8 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 80023c0:	7abb      	ldrb	r3, [r7, #10]
 80023c2:	b29a      	uxth	r2, r3
 80023c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023c8:	9301      	str	r3, [sp, #4]
 80023ca:	2302      	movs	r3, #2
 80023cc:	9300      	str	r3, [sp, #0]
 80023ce:	2300      	movs	r3, #0
 80023d0:	2178      	movs	r1, #120	; 0x78
 80023d2:	4868      	ldr	r0, [pc, #416]	; (8002574 <FreqMenu_DrawFreqPresetMenu+0xf24>)
 80023d4:	f008 fedc 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 80023d8:	7a7b      	ldrb	r3, [r7, #9]
 80023da:	b29a      	uxth	r2, r3
 80023dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023e0:	9301      	str	r3, [sp, #4]
 80023e2:	2302      	movs	r3, #2
 80023e4:	9300      	str	r3, [sp, #0]
 80023e6:	2300      	movs	r3, #0
 80023e8:	2178      	movs	r1, #120	; 0x78
 80023ea:	4863      	ldr	r0, [pc, #396]	; (8002578 <FreqMenu_DrawFreqPresetMenu+0xf28>)
 80023ec:	f008 fed0 	bl	800b190 <ILI9341_Draw_Text>
				break;
 80023f0:	e391      	b.n	8002b16 <FreqMenu_DrawFreqPresetMenu+0x14c6>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 80023f2:	7bfb      	ldrb	r3, [r7, #15]
 80023f4:	b29a      	uxth	r2, r3
 80023f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023fa:	9301      	str	r3, [sp, #4]
 80023fc:	2302      	movs	r3, #2
 80023fe:	9300      	str	r3, [sp, #0]
 8002400:	2300      	movs	r3, #0
 8002402:	210a      	movs	r1, #10
 8002404:	484f      	ldr	r0, [pc, #316]	; (8002544 <FreqMenu_DrawFreqPresetMenu+0xef4>)
 8002406:	f008 fec3 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 800240a:	7bbb      	ldrb	r3, [r7, #14]
 800240c:	b29a      	uxth	r2, r3
 800240e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002412:	9301      	str	r3, [sp, #4]
 8002414:	2302      	movs	r3, #2
 8002416:	9300      	str	r3, [sp, #0]
 8002418:	2300      	movs	r3, #0
 800241a:	210a      	movs	r1, #10
 800241c:	484a      	ldr	r0, [pc, #296]	; (8002548 <FreqMenu_DrawFreqPresetMenu+0xef8>)
 800241e:	f008 feb7 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8002422:	7b7b      	ldrb	r3, [r7, #13]
 8002424:	b29a      	uxth	r2, r3
 8002426:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800242a:	9301      	str	r3, [sp, #4]
 800242c:	2302      	movs	r3, #2
 800242e:	9300      	str	r3, [sp, #0]
 8002430:	2300      	movs	r3, #0
 8002432:	210a      	movs	r1, #10
 8002434:	4845      	ldr	r0, [pc, #276]	; (800254c <FreqMenu_DrawFreqPresetMenu+0xefc>)
 8002436:	f008 feab 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 800243a:	7b3b      	ldrb	r3, [r7, #12]
 800243c:	b29a      	uxth	r2, r3
 800243e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002442:	9301      	str	r3, [sp, #4]
 8002444:	2302      	movs	r3, #2
 8002446:	9300      	str	r3, [sp, #0]
 8002448:	2300      	movs	r3, #0
 800244a:	210a      	movs	r1, #10
 800244c:	4840      	ldr	r0, [pc, #256]	; (8002550 <FreqMenu_DrawFreqPresetMenu+0xf00>)
 800244e:	f008 fe9f 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8002452:	7afb      	ldrb	r3, [r7, #11]
 8002454:	b29a      	uxth	r2, r3
 8002456:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800245a:	9301      	str	r3, [sp, #4]
 800245c:	2302      	movs	r3, #2
 800245e:	9300      	str	r3, [sp, #0]
 8002460:	2300      	movs	r3, #0
 8002462:	210a      	movs	r1, #10
 8002464:	483b      	ldr	r0, [pc, #236]	; (8002554 <FreqMenu_DrawFreqPresetMenu+0xf04>)
 8002466:	f008 fe93 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 800246a:	7abb      	ldrb	r3, [r7, #10]
 800246c:	b29a      	uxth	r2, r3
 800246e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002472:	9301      	str	r3, [sp, #4]
 8002474:	2302      	movs	r3, #2
 8002476:	9300      	str	r3, [sp, #0]
 8002478:	2300      	movs	r3, #0
 800247a:	210a      	movs	r1, #10
 800247c:	4836      	ldr	r0, [pc, #216]	; (8002558 <FreqMenu_DrawFreqPresetMenu+0xf08>)
 800247e:	f008 fe87 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8002482:	7a7b      	ldrb	r3, [r7, #9]
 8002484:	b29a      	uxth	r2, r3
 8002486:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800248a:	9301      	str	r3, [sp, #4]
 800248c:	2302      	movs	r3, #2
 800248e:	9300      	str	r3, [sp, #0]
 8002490:	2300      	movs	r3, #0
 8002492:	210a      	movs	r1, #10
 8002494:	4831      	ldr	r0, [pc, #196]	; (800255c <FreqMenu_DrawFreqPresetMenu+0xf0c>)
 8002496:	f008 fe7b 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 800249a:	7bfb      	ldrb	r3, [r7, #15]
 800249c:	b29a      	uxth	r2, r3
 800249e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024a2:	9301      	str	r3, [sp, #4]
 80024a4:	2302      	movs	r3, #2
 80024a6:	9300      	str	r3, [sp, #0]
 80024a8:	2300      	movs	r3, #0
 80024aa:	2178      	movs	r1, #120	; 0x78
 80024ac:	482c      	ldr	r0, [pc, #176]	; (8002560 <FreqMenu_DrawFreqPresetMenu+0xf10>)
 80024ae:	f008 fe6f 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 80024b2:	7bbb      	ldrb	r3, [r7, #14]
 80024b4:	b29a      	uxth	r2, r3
 80024b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024ba:	9301      	str	r3, [sp, #4]
 80024bc:	2302      	movs	r3, #2
 80024be:	9300      	str	r3, [sp, #0]
 80024c0:	2300      	movs	r3, #0
 80024c2:	2178      	movs	r1, #120	; 0x78
 80024c4:	4827      	ldr	r0, [pc, #156]	; (8002564 <FreqMenu_DrawFreqPresetMenu+0xf14>)
 80024c6:	f008 fe63 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, WHITE, 2, BLACK);
 80024ca:	7b7b      	ldrb	r3, [r7, #13]
 80024cc:	b29a      	uxth	r2, r3
 80024ce:	2300      	movs	r3, #0
 80024d0:	9301      	str	r3, [sp, #4]
 80024d2:	2302      	movs	r3, #2
 80024d4:	9300      	str	r3, [sp, #0]
 80024d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024da:	2178      	movs	r1, #120	; 0x78
 80024dc:	4822      	ldr	r0, [pc, #136]	; (8002568 <FreqMenu_DrawFreqPresetMenu+0xf18>)
 80024de:	f008 fe57 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 80024e2:	7b3b      	ldrb	r3, [r7, #12]
 80024e4:	b29a      	uxth	r2, r3
 80024e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024ea:	9301      	str	r3, [sp, #4]
 80024ec:	2302      	movs	r3, #2
 80024ee:	9300      	str	r3, [sp, #0]
 80024f0:	2300      	movs	r3, #0
 80024f2:	2178      	movs	r1, #120	; 0x78
 80024f4:	481d      	ldr	r0, [pc, #116]	; (800256c <FreqMenu_DrawFreqPresetMenu+0xf1c>)
 80024f6:	f008 fe4b 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 80024fa:	7afb      	ldrb	r3, [r7, #11]
 80024fc:	b29a      	uxth	r2, r3
 80024fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002502:	9301      	str	r3, [sp, #4]
 8002504:	2302      	movs	r3, #2
 8002506:	9300      	str	r3, [sp, #0]
 8002508:	2300      	movs	r3, #0
 800250a:	2178      	movs	r1, #120	; 0x78
 800250c:	4818      	ldr	r0, [pc, #96]	; (8002570 <FreqMenu_DrawFreqPresetMenu+0xf20>)
 800250e:	f008 fe3f 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8002512:	7abb      	ldrb	r3, [r7, #10]
 8002514:	b29a      	uxth	r2, r3
 8002516:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800251a:	9301      	str	r3, [sp, #4]
 800251c:	2302      	movs	r3, #2
 800251e:	9300      	str	r3, [sp, #0]
 8002520:	2300      	movs	r3, #0
 8002522:	2178      	movs	r1, #120	; 0x78
 8002524:	4813      	ldr	r0, [pc, #76]	; (8002574 <FreqMenu_DrawFreqPresetMenu+0xf24>)
 8002526:	f008 fe33 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 800252a:	7a7b      	ldrb	r3, [r7, #9]
 800252c:	b29a      	uxth	r2, r3
 800252e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002532:	9301      	str	r3, [sp, #4]
 8002534:	2302      	movs	r3, #2
 8002536:	9300      	str	r3, [sp, #0]
 8002538:	2300      	movs	r3, #0
 800253a:	2178      	movs	r1, #120	; 0x78
 800253c:	480e      	ldr	r0, [pc, #56]	; (8002578 <FreqMenu_DrawFreqPresetMenu+0xf28>)
 800253e:	f008 fe27 	bl	800b190 <ILI9341_Draw_Text>
				break;
 8002542:	e2e8      	b.n	8002b16 <FreqMenu_DrawFreqPresetMenu+0x14c6>
 8002544:	0800e7b4 	.word	0x0800e7b4
 8002548:	0800e7bc 	.word	0x0800e7bc
 800254c:	0800e7c4 	.word	0x0800e7c4
 8002550:	0800e7cc 	.word	0x0800e7cc
 8002554:	0800e7d4 	.word	0x0800e7d4
 8002558:	0800e7dc 	.word	0x0800e7dc
 800255c:	0800e7e4 	.word	0x0800e7e4
 8002560:	0800e7ec 	.word	0x0800e7ec
 8002564:	0800e7f4 	.word	0x0800e7f4
 8002568:	0800e7fc 	.word	0x0800e7fc
 800256c:	0800e804 	.word	0x0800e804
 8002570:	0800e80c 	.word	0x0800e80c
 8002574:	0800e814 	.word	0x0800e814
 8002578:	0800e81c 	.word	0x0800e81c
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 800257c:	7bfb      	ldrb	r3, [r7, #15]
 800257e:	b29a      	uxth	r2, r3
 8002580:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002584:	9301      	str	r3, [sp, #4]
 8002586:	2302      	movs	r3, #2
 8002588:	9300      	str	r3, [sp, #0]
 800258a:	2300      	movs	r3, #0
 800258c:	210a      	movs	r1, #10
 800258e:	48a4      	ldr	r0, [pc, #656]	; (8002820 <FreqMenu_DrawFreqPresetMenu+0x11d0>)
 8002590:	f008 fdfe 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8002594:	7bbb      	ldrb	r3, [r7, #14]
 8002596:	b29a      	uxth	r2, r3
 8002598:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800259c:	9301      	str	r3, [sp, #4]
 800259e:	2302      	movs	r3, #2
 80025a0:	9300      	str	r3, [sp, #0]
 80025a2:	2300      	movs	r3, #0
 80025a4:	210a      	movs	r1, #10
 80025a6:	489f      	ldr	r0, [pc, #636]	; (8002824 <FreqMenu_DrawFreqPresetMenu+0x11d4>)
 80025a8:	f008 fdf2 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 80025ac:	7b7b      	ldrb	r3, [r7, #13]
 80025ae:	b29a      	uxth	r2, r3
 80025b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025b4:	9301      	str	r3, [sp, #4]
 80025b6:	2302      	movs	r3, #2
 80025b8:	9300      	str	r3, [sp, #0]
 80025ba:	2300      	movs	r3, #0
 80025bc:	210a      	movs	r1, #10
 80025be:	489a      	ldr	r0, [pc, #616]	; (8002828 <FreqMenu_DrawFreqPresetMenu+0x11d8>)
 80025c0:	f008 fde6 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 80025c4:	7b3b      	ldrb	r3, [r7, #12]
 80025c6:	b29a      	uxth	r2, r3
 80025c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025cc:	9301      	str	r3, [sp, #4]
 80025ce:	2302      	movs	r3, #2
 80025d0:	9300      	str	r3, [sp, #0]
 80025d2:	2300      	movs	r3, #0
 80025d4:	210a      	movs	r1, #10
 80025d6:	4895      	ldr	r0, [pc, #596]	; (800282c <FreqMenu_DrawFreqPresetMenu+0x11dc>)
 80025d8:	f008 fdda 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 80025dc:	7afb      	ldrb	r3, [r7, #11]
 80025de:	b29a      	uxth	r2, r3
 80025e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025e4:	9301      	str	r3, [sp, #4]
 80025e6:	2302      	movs	r3, #2
 80025e8:	9300      	str	r3, [sp, #0]
 80025ea:	2300      	movs	r3, #0
 80025ec:	210a      	movs	r1, #10
 80025ee:	4890      	ldr	r0, [pc, #576]	; (8002830 <FreqMenu_DrawFreqPresetMenu+0x11e0>)
 80025f0:	f008 fdce 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 80025f4:	7abb      	ldrb	r3, [r7, #10]
 80025f6:	b29a      	uxth	r2, r3
 80025f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025fc:	9301      	str	r3, [sp, #4]
 80025fe:	2302      	movs	r3, #2
 8002600:	9300      	str	r3, [sp, #0]
 8002602:	2300      	movs	r3, #0
 8002604:	210a      	movs	r1, #10
 8002606:	488b      	ldr	r0, [pc, #556]	; (8002834 <FreqMenu_DrawFreqPresetMenu+0x11e4>)
 8002608:	f008 fdc2 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 800260c:	7a7b      	ldrb	r3, [r7, #9]
 800260e:	b29a      	uxth	r2, r3
 8002610:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002614:	9301      	str	r3, [sp, #4]
 8002616:	2302      	movs	r3, #2
 8002618:	9300      	str	r3, [sp, #0]
 800261a:	2300      	movs	r3, #0
 800261c:	210a      	movs	r1, #10
 800261e:	4886      	ldr	r0, [pc, #536]	; (8002838 <FreqMenu_DrawFreqPresetMenu+0x11e8>)
 8002620:	f008 fdb6 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8002624:	7bfb      	ldrb	r3, [r7, #15]
 8002626:	b29a      	uxth	r2, r3
 8002628:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800262c:	9301      	str	r3, [sp, #4]
 800262e:	2302      	movs	r3, #2
 8002630:	9300      	str	r3, [sp, #0]
 8002632:	2300      	movs	r3, #0
 8002634:	2178      	movs	r1, #120	; 0x78
 8002636:	4881      	ldr	r0, [pc, #516]	; (800283c <FreqMenu_DrawFreqPresetMenu+0x11ec>)
 8002638:	f008 fdaa 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 800263c:	7bbb      	ldrb	r3, [r7, #14]
 800263e:	b29a      	uxth	r2, r3
 8002640:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002644:	9301      	str	r3, [sp, #4]
 8002646:	2302      	movs	r3, #2
 8002648:	9300      	str	r3, [sp, #0]
 800264a:	2300      	movs	r3, #0
 800264c:	2178      	movs	r1, #120	; 0x78
 800264e:	487c      	ldr	r0, [pc, #496]	; (8002840 <FreqMenu_DrawFreqPresetMenu+0x11f0>)
 8002650:	f008 fd9e 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8002654:	7b7b      	ldrb	r3, [r7, #13]
 8002656:	b29a      	uxth	r2, r3
 8002658:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800265c:	9301      	str	r3, [sp, #4]
 800265e:	2302      	movs	r3, #2
 8002660:	9300      	str	r3, [sp, #0]
 8002662:	2300      	movs	r3, #0
 8002664:	2178      	movs	r1, #120	; 0x78
 8002666:	4877      	ldr	r0, [pc, #476]	; (8002844 <FreqMenu_DrawFreqPresetMenu+0x11f4>)
 8002668:	f008 fd92 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, WHITE, 2, BLACK);
 800266c:	7b3b      	ldrb	r3, [r7, #12]
 800266e:	b29a      	uxth	r2, r3
 8002670:	2300      	movs	r3, #0
 8002672:	9301      	str	r3, [sp, #4]
 8002674:	2302      	movs	r3, #2
 8002676:	9300      	str	r3, [sp, #0]
 8002678:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800267c:	2178      	movs	r1, #120	; 0x78
 800267e:	4872      	ldr	r0, [pc, #456]	; (8002848 <FreqMenu_DrawFreqPresetMenu+0x11f8>)
 8002680:	f008 fd86 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8002684:	7afb      	ldrb	r3, [r7, #11]
 8002686:	b29a      	uxth	r2, r3
 8002688:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800268c:	9301      	str	r3, [sp, #4]
 800268e:	2302      	movs	r3, #2
 8002690:	9300      	str	r3, [sp, #0]
 8002692:	2300      	movs	r3, #0
 8002694:	2178      	movs	r1, #120	; 0x78
 8002696:	486d      	ldr	r0, [pc, #436]	; (800284c <FreqMenu_DrawFreqPresetMenu+0x11fc>)
 8002698:	f008 fd7a 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 800269c:	7abb      	ldrb	r3, [r7, #10]
 800269e:	b29a      	uxth	r2, r3
 80026a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026a4:	9301      	str	r3, [sp, #4]
 80026a6:	2302      	movs	r3, #2
 80026a8:	9300      	str	r3, [sp, #0]
 80026aa:	2300      	movs	r3, #0
 80026ac:	2178      	movs	r1, #120	; 0x78
 80026ae:	4868      	ldr	r0, [pc, #416]	; (8002850 <FreqMenu_DrawFreqPresetMenu+0x1200>)
 80026b0:	f008 fd6e 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 80026b4:	7a7b      	ldrb	r3, [r7, #9]
 80026b6:	b29a      	uxth	r2, r3
 80026b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026bc:	9301      	str	r3, [sp, #4]
 80026be:	2302      	movs	r3, #2
 80026c0:	9300      	str	r3, [sp, #0]
 80026c2:	2300      	movs	r3, #0
 80026c4:	2178      	movs	r1, #120	; 0x78
 80026c6:	4863      	ldr	r0, [pc, #396]	; (8002854 <FreqMenu_DrawFreqPresetMenu+0x1204>)
 80026c8:	f008 fd62 	bl	800b190 <ILI9341_Draw_Text>
				break;
 80026cc:	e223      	b.n	8002b16 <FreqMenu_DrawFreqPresetMenu+0x14c6>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 80026ce:	7bfb      	ldrb	r3, [r7, #15]
 80026d0:	b29a      	uxth	r2, r3
 80026d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026d6:	9301      	str	r3, [sp, #4]
 80026d8:	2302      	movs	r3, #2
 80026da:	9300      	str	r3, [sp, #0]
 80026dc:	2300      	movs	r3, #0
 80026de:	210a      	movs	r1, #10
 80026e0:	484f      	ldr	r0, [pc, #316]	; (8002820 <FreqMenu_DrawFreqPresetMenu+0x11d0>)
 80026e2:	f008 fd55 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 80026e6:	7bbb      	ldrb	r3, [r7, #14]
 80026e8:	b29a      	uxth	r2, r3
 80026ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026ee:	9301      	str	r3, [sp, #4]
 80026f0:	2302      	movs	r3, #2
 80026f2:	9300      	str	r3, [sp, #0]
 80026f4:	2300      	movs	r3, #0
 80026f6:	210a      	movs	r1, #10
 80026f8:	484a      	ldr	r0, [pc, #296]	; (8002824 <FreqMenu_DrawFreqPresetMenu+0x11d4>)
 80026fa:	f008 fd49 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 80026fe:	7b7b      	ldrb	r3, [r7, #13]
 8002700:	b29a      	uxth	r2, r3
 8002702:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002706:	9301      	str	r3, [sp, #4]
 8002708:	2302      	movs	r3, #2
 800270a:	9300      	str	r3, [sp, #0]
 800270c:	2300      	movs	r3, #0
 800270e:	210a      	movs	r1, #10
 8002710:	4845      	ldr	r0, [pc, #276]	; (8002828 <FreqMenu_DrawFreqPresetMenu+0x11d8>)
 8002712:	f008 fd3d 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8002716:	7b3b      	ldrb	r3, [r7, #12]
 8002718:	b29a      	uxth	r2, r3
 800271a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800271e:	9301      	str	r3, [sp, #4]
 8002720:	2302      	movs	r3, #2
 8002722:	9300      	str	r3, [sp, #0]
 8002724:	2300      	movs	r3, #0
 8002726:	210a      	movs	r1, #10
 8002728:	4840      	ldr	r0, [pc, #256]	; (800282c <FreqMenu_DrawFreqPresetMenu+0x11dc>)
 800272a:	f008 fd31 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 800272e:	7afb      	ldrb	r3, [r7, #11]
 8002730:	b29a      	uxth	r2, r3
 8002732:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002736:	9301      	str	r3, [sp, #4]
 8002738:	2302      	movs	r3, #2
 800273a:	9300      	str	r3, [sp, #0]
 800273c:	2300      	movs	r3, #0
 800273e:	210a      	movs	r1, #10
 8002740:	483b      	ldr	r0, [pc, #236]	; (8002830 <FreqMenu_DrawFreqPresetMenu+0x11e0>)
 8002742:	f008 fd25 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 8002746:	7abb      	ldrb	r3, [r7, #10]
 8002748:	b29a      	uxth	r2, r3
 800274a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800274e:	9301      	str	r3, [sp, #4]
 8002750:	2302      	movs	r3, #2
 8002752:	9300      	str	r3, [sp, #0]
 8002754:	2300      	movs	r3, #0
 8002756:	210a      	movs	r1, #10
 8002758:	4836      	ldr	r0, [pc, #216]	; (8002834 <FreqMenu_DrawFreqPresetMenu+0x11e4>)
 800275a:	f008 fd19 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 800275e:	7a7b      	ldrb	r3, [r7, #9]
 8002760:	b29a      	uxth	r2, r3
 8002762:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002766:	9301      	str	r3, [sp, #4]
 8002768:	2302      	movs	r3, #2
 800276a:	9300      	str	r3, [sp, #0]
 800276c:	2300      	movs	r3, #0
 800276e:	210a      	movs	r1, #10
 8002770:	4831      	ldr	r0, [pc, #196]	; (8002838 <FreqMenu_DrawFreqPresetMenu+0x11e8>)
 8002772:	f008 fd0d 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8002776:	7bfb      	ldrb	r3, [r7, #15]
 8002778:	b29a      	uxth	r2, r3
 800277a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800277e:	9301      	str	r3, [sp, #4]
 8002780:	2302      	movs	r3, #2
 8002782:	9300      	str	r3, [sp, #0]
 8002784:	2300      	movs	r3, #0
 8002786:	2178      	movs	r1, #120	; 0x78
 8002788:	482c      	ldr	r0, [pc, #176]	; (800283c <FreqMenu_DrawFreqPresetMenu+0x11ec>)
 800278a:	f008 fd01 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 800278e:	7bbb      	ldrb	r3, [r7, #14]
 8002790:	b29a      	uxth	r2, r3
 8002792:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002796:	9301      	str	r3, [sp, #4]
 8002798:	2302      	movs	r3, #2
 800279a:	9300      	str	r3, [sp, #0]
 800279c:	2300      	movs	r3, #0
 800279e:	2178      	movs	r1, #120	; 0x78
 80027a0:	4827      	ldr	r0, [pc, #156]	; (8002840 <FreqMenu_DrawFreqPresetMenu+0x11f0>)
 80027a2:	f008 fcf5 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 80027a6:	7b7b      	ldrb	r3, [r7, #13]
 80027a8:	b29a      	uxth	r2, r3
 80027aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027ae:	9301      	str	r3, [sp, #4]
 80027b0:	2302      	movs	r3, #2
 80027b2:	9300      	str	r3, [sp, #0]
 80027b4:	2300      	movs	r3, #0
 80027b6:	2178      	movs	r1, #120	; 0x78
 80027b8:	4822      	ldr	r0, [pc, #136]	; (8002844 <FreqMenu_DrawFreqPresetMenu+0x11f4>)
 80027ba:	f008 fce9 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 80027be:	7b3b      	ldrb	r3, [r7, #12]
 80027c0:	b29a      	uxth	r2, r3
 80027c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027c6:	9301      	str	r3, [sp, #4]
 80027c8:	2302      	movs	r3, #2
 80027ca:	9300      	str	r3, [sp, #0]
 80027cc:	2300      	movs	r3, #0
 80027ce:	2178      	movs	r1, #120	; 0x78
 80027d0:	481d      	ldr	r0, [pc, #116]	; (8002848 <FreqMenu_DrawFreqPresetMenu+0x11f8>)
 80027d2:	f008 fcdd 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, WHITE, 2, BLACK);
 80027d6:	7afb      	ldrb	r3, [r7, #11]
 80027d8:	b29a      	uxth	r2, r3
 80027da:	2300      	movs	r3, #0
 80027dc:	9301      	str	r3, [sp, #4]
 80027de:	2302      	movs	r3, #2
 80027e0:	9300      	str	r3, [sp, #0]
 80027e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027e6:	2178      	movs	r1, #120	; 0x78
 80027e8:	4818      	ldr	r0, [pc, #96]	; (800284c <FreqMenu_DrawFreqPresetMenu+0x11fc>)
 80027ea:	f008 fcd1 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 80027ee:	7abb      	ldrb	r3, [r7, #10]
 80027f0:	b29a      	uxth	r2, r3
 80027f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027f6:	9301      	str	r3, [sp, #4]
 80027f8:	2302      	movs	r3, #2
 80027fa:	9300      	str	r3, [sp, #0]
 80027fc:	2300      	movs	r3, #0
 80027fe:	2178      	movs	r1, #120	; 0x78
 8002800:	4813      	ldr	r0, [pc, #76]	; (8002850 <FreqMenu_DrawFreqPresetMenu+0x1200>)
 8002802:	f008 fcc5 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8002806:	7a7b      	ldrb	r3, [r7, #9]
 8002808:	b29a      	uxth	r2, r3
 800280a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800280e:	9301      	str	r3, [sp, #4]
 8002810:	2302      	movs	r3, #2
 8002812:	9300      	str	r3, [sp, #0]
 8002814:	2300      	movs	r3, #0
 8002816:	2178      	movs	r1, #120	; 0x78
 8002818:	480e      	ldr	r0, [pc, #56]	; (8002854 <FreqMenu_DrawFreqPresetMenu+0x1204>)
 800281a:	f008 fcb9 	bl	800b190 <ILI9341_Draw_Text>
			break;
 800281e:	e17a      	b.n	8002b16 <FreqMenu_DrawFreqPresetMenu+0x14c6>
 8002820:	0800e7b4 	.word	0x0800e7b4
 8002824:	0800e7bc 	.word	0x0800e7bc
 8002828:	0800e7c4 	.word	0x0800e7c4
 800282c:	0800e7cc 	.word	0x0800e7cc
 8002830:	0800e7d4 	.word	0x0800e7d4
 8002834:	0800e7dc 	.word	0x0800e7dc
 8002838:	0800e7e4 	.word	0x0800e7e4
 800283c:	0800e7ec 	.word	0x0800e7ec
 8002840:	0800e7f4 	.word	0x0800e7f4
 8002844:	0800e7fc 	.word	0x0800e7fc
 8002848:	0800e804 	.word	0x0800e804
 800284c:	0800e80c 	.word	0x0800e80c
 8002850:	0800e814 	.word	0x0800e814
 8002854:	0800e81c 	.word	0x0800e81c
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8002858:	7bfb      	ldrb	r3, [r7, #15]
 800285a:	b29a      	uxth	r2, r3
 800285c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002860:	9301      	str	r3, [sp, #4]
 8002862:	2302      	movs	r3, #2
 8002864:	9300      	str	r3, [sp, #0]
 8002866:	2300      	movs	r3, #0
 8002868:	210a      	movs	r1, #10
 800286a:	48ad      	ldr	r0, [pc, #692]	; (8002b20 <FreqMenu_DrawFreqPresetMenu+0x14d0>)
 800286c:	f008 fc90 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8002870:	7bbb      	ldrb	r3, [r7, #14]
 8002872:	b29a      	uxth	r2, r3
 8002874:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002878:	9301      	str	r3, [sp, #4]
 800287a:	2302      	movs	r3, #2
 800287c:	9300      	str	r3, [sp, #0]
 800287e:	2300      	movs	r3, #0
 8002880:	210a      	movs	r1, #10
 8002882:	48a8      	ldr	r0, [pc, #672]	; (8002b24 <FreqMenu_DrawFreqPresetMenu+0x14d4>)
 8002884:	f008 fc84 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8002888:	7b7b      	ldrb	r3, [r7, #13]
 800288a:	b29a      	uxth	r2, r3
 800288c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002890:	9301      	str	r3, [sp, #4]
 8002892:	2302      	movs	r3, #2
 8002894:	9300      	str	r3, [sp, #0]
 8002896:	2300      	movs	r3, #0
 8002898:	210a      	movs	r1, #10
 800289a:	48a3      	ldr	r0, [pc, #652]	; (8002b28 <FreqMenu_DrawFreqPresetMenu+0x14d8>)
 800289c:	f008 fc78 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 80028a0:	7b3b      	ldrb	r3, [r7, #12]
 80028a2:	b29a      	uxth	r2, r3
 80028a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028a8:	9301      	str	r3, [sp, #4]
 80028aa:	2302      	movs	r3, #2
 80028ac:	9300      	str	r3, [sp, #0]
 80028ae:	2300      	movs	r3, #0
 80028b0:	210a      	movs	r1, #10
 80028b2:	489e      	ldr	r0, [pc, #632]	; (8002b2c <FreqMenu_DrawFreqPresetMenu+0x14dc>)
 80028b4:	f008 fc6c 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 80028b8:	7afb      	ldrb	r3, [r7, #11]
 80028ba:	b29a      	uxth	r2, r3
 80028bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028c0:	9301      	str	r3, [sp, #4]
 80028c2:	2302      	movs	r3, #2
 80028c4:	9300      	str	r3, [sp, #0]
 80028c6:	2300      	movs	r3, #0
 80028c8:	210a      	movs	r1, #10
 80028ca:	4899      	ldr	r0, [pc, #612]	; (8002b30 <FreqMenu_DrawFreqPresetMenu+0x14e0>)
 80028cc:	f008 fc60 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 80028d0:	7abb      	ldrb	r3, [r7, #10]
 80028d2:	b29a      	uxth	r2, r3
 80028d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028d8:	9301      	str	r3, [sp, #4]
 80028da:	2302      	movs	r3, #2
 80028dc:	9300      	str	r3, [sp, #0]
 80028de:	2300      	movs	r3, #0
 80028e0:	210a      	movs	r1, #10
 80028e2:	4894      	ldr	r0, [pc, #592]	; (8002b34 <FreqMenu_DrawFreqPresetMenu+0x14e4>)
 80028e4:	f008 fc54 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 80028e8:	7a7b      	ldrb	r3, [r7, #9]
 80028ea:	b29a      	uxth	r2, r3
 80028ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028f0:	9301      	str	r3, [sp, #4]
 80028f2:	2302      	movs	r3, #2
 80028f4:	9300      	str	r3, [sp, #0]
 80028f6:	2300      	movs	r3, #0
 80028f8:	210a      	movs	r1, #10
 80028fa:	488f      	ldr	r0, [pc, #572]	; (8002b38 <FreqMenu_DrawFreqPresetMenu+0x14e8>)
 80028fc:	f008 fc48 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8002900:	7bfb      	ldrb	r3, [r7, #15]
 8002902:	b29a      	uxth	r2, r3
 8002904:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002908:	9301      	str	r3, [sp, #4]
 800290a:	2302      	movs	r3, #2
 800290c:	9300      	str	r3, [sp, #0]
 800290e:	2300      	movs	r3, #0
 8002910:	2178      	movs	r1, #120	; 0x78
 8002912:	488a      	ldr	r0, [pc, #552]	; (8002b3c <FreqMenu_DrawFreqPresetMenu+0x14ec>)
 8002914:	f008 fc3c 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 8002918:	7bbb      	ldrb	r3, [r7, #14]
 800291a:	b29a      	uxth	r2, r3
 800291c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002920:	9301      	str	r3, [sp, #4]
 8002922:	2302      	movs	r3, #2
 8002924:	9300      	str	r3, [sp, #0]
 8002926:	2300      	movs	r3, #0
 8002928:	2178      	movs	r1, #120	; 0x78
 800292a:	4885      	ldr	r0, [pc, #532]	; (8002b40 <FreqMenu_DrawFreqPresetMenu+0x14f0>)
 800292c:	f008 fc30 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8002930:	7b7b      	ldrb	r3, [r7, #13]
 8002932:	b29a      	uxth	r2, r3
 8002934:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002938:	9301      	str	r3, [sp, #4]
 800293a:	2302      	movs	r3, #2
 800293c:	9300      	str	r3, [sp, #0]
 800293e:	2300      	movs	r3, #0
 8002940:	2178      	movs	r1, #120	; 0x78
 8002942:	4880      	ldr	r0, [pc, #512]	; (8002b44 <FreqMenu_DrawFreqPresetMenu+0x14f4>)
 8002944:	f008 fc24 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8002948:	7b3b      	ldrb	r3, [r7, #12]
 800294a:	b29a      	uxth	r2, r3
 800294c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002950:	9301      	str	r3, [sp, #4]
 8002952:	2302      	movs	r3, #2
 8002954:	9300      	str	r3, [sp, #0]
 8002956:	2300      	movs	r3, #0
 8002958:	2178      	movs	r1, #120	; 0x78
 800295a:	487b      	ldr	r0, [pc, #492]	; (8002b48 <FreqMenu_DrawFreqPresetMenu+0x14f8>)
 800295c:	f008 fc18 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8002960:	7afb      	ldrb	r3, [r7, #11]
 8002962:	b29a      	uxth	r2, r3
 8002964:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002968:	9301      	str	r3, [sp, #4]
 800296a:	2302      	movs	r3, #2
 800296c:	9300      	str	r3, [sp, #0]
 800296e:	2300      	movs	r3, #0
 8002970:	2178      	movs	r1, #120	; 0x78
 8002972:	4876      	ldr	r0, [pc, #472]	; (8002b4c <FreqMenu_DrawFreqPresetMenu+0x14fc>)
 8002974:	f008 fc0c 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, WHITE, 2, BLACK);
 8002978:	7abb      	ldrb	r3, [r7, #10]
 800297a:	b29a      	uxth	r2, r3
 800297c:	2300      	movs	r3, #0
 800297e:	9301      	str	r3, [sp, #4]
 8002980:	2302      	movs	r3, #2
 8002982:	9300      	str	r3, [sp, #0]
 8002984:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002988:	2178      	movs	r1, #120	; 0x78
 800298a:	4871      	ldr	r0, [pc, #452]	; (8002b50 <FreqMenu_DrawFreqPresetMenu+0x1500>)
 800298c:	f008 fc00 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8002990:	7a7b      	ldrb	r3, [r7, #9]
 8002992:	b29a      	uxth	r2, r3
 8002994:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002998:	9301      	str	r3, [sp, #4]
 800299a:	2302      	movs	r3, #2
 800299c:	9300      	str	r3, [sp, #0]
 800299e:	2300      	movs	r3, #0
 80029a0:	2178      	movs	r1, #120	; 0x78
 80029a2:	486c      	ldr	r0, [pc, #432]	; (8002b54 <FreqMenu_DrawFreqPresetMenu+0x1504>)
 80029a4:	f008 fbf4 	bl	800b190 <ILI9341_Draw_Text>
			break;
 80029a8:	e0b5      	b.n	8002b16 <FreqMenu_DrawFreqPresetMenu+0x14c6>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 80029aa:	7bfb      	ldrb	r3, [r7, #15]
 80029ac:	b29a      	uxth	r2, r3
 80029ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029b2:	9301      	str	r3, [sp, #4]
 80029b4:	2302      	movs	r3, #2
 80029b6:	9300      	str	r3, [sp, #0]
 80029b8:	2300      	movs	r3, #0
 80029ba:	210a      	movs	r1, #10
 80029bc:	4858      	ldr	r0, [pc, #352]	; (8002b20 <FreqMenu_DrawFreqPresetMenu+0x14d0>)
 80029be:	f008 fbe7 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 80029c2:	7bbb      	ldrb	r3, [r7, #14]
 80029c4:	b29a      	uxth	r2, r3
 80029c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029ca:	9301      	str	r3, [sp, #4]
 80029cc:	2302      	movs	r3, #2
 80029ce:	9300      	str	r3, [sp, #0]
 80029d0:	2300      	movs	r3, #0
 80029d2:	210a      	movs	r1, #10
 80029d4:	4853      	ldr	r0, [pc, #332]	; (8002b24 <FreqMenu_DrawFreqPresetMenu+0x14d4>)
 80029d6:	f008 fbdb 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 80029da:	7b7b      	ldrb	r3, [r7, #13]
 80029dc:	b29a      	uxth	r2, r3
 80029de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029e2:	9301      	str	r3, [sp, #4]
 80029e4:	2302      	movs	r3, #2
 80029e6:	9300      	str	r3, [sp, #0]
 80029e8:	2300      	movs	r3, #0
 80029ea:	210a      	movs	r1, #10
 80029ec:	484e      	ldr	r0, [pc, #312]	; (8002b28 <FreqMenu_DrawFreqPresetMenu+0x14d8>)
 80029ee:	f008 fbcf 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 80029f2:	7b3b      	ldrb	r3, [r7, #12]
 80029f4:	b29a      	uxth	r2, r3
 80029f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029fa:	9301      	str	r3, [sp, #4]
 80029fc:	2302      	movs	r3, #2
 80029fe:	9300      	str	r3, [sp, #0]
 8002a00:	2300      	movs	r3, #0
 8002a02:	210a      	movs	r1, #10
 8002a04:	4849      	ldr	r0, [pc, #292]	; (8002b2c <FreqMenu_DrawFreqPresetMenu+0x14dc>)
 8002a06:	f008 fbc3 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8002a0a:	7afb      	ldrb	r3, [r7, #11]
 8002a0c:	b29a      	uxth	r2, r3
 8002a0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a12:	9301      	str	r3, [sp, #4]
 8002a14:	2302      	movs	r3, #2
 8002a16:	9300      	str	r3, [sp, #0]
 8002a18:	2300      	movs	r3, #0
 8002a1a:	210a      	movs	r1, #10
 8002a1c:	4844      	ldr	r0, [pc, #272]	; (8002b30 <FreqMenu_DrawFreqPresetMenu+0x14e0>)
 8002a1e:	f008 fbb7 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 8002a22:	7abb      	ldrb	r3, [r7, #10]
 8002a24:	b29a      	uxth	r2, r3
 8002a26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a2a:	9301      	str	r3, [sp, #4]
 8002a2c:	2302      	movs	r3, #2
 8002a2e:	9300      	str	r3, [sp, #0]
 8002a30:	2300      	movs	r3, #0
 8002a32:	210a      	movs	r1, #10
 8002a34:	483f      	ldr	r0, [pc, #252]	; (8002b34 <FreqMenu_DrawFreqPresetMenu+0x14e4>)
 8002a36:	f008 fbab 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8002a3a:	7a7b      	ldrb	r3, [r7, #9]
 8002a3c:	b29a      	uxth	r2, r3
 8002a3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a42:	9301      	str	r3, [sp, #4]
 8002a44:	2302      	movs	r3, #2
 8002a46:	9300      	str	r3, [sp, #0]
 8002a48:	2300      	movs	r3, #0
 8002a4a:	210a      	movs	r1, #10
 8002a4c:	483a      	ldr	r0, [pc, #232]	; (8002b38 <FreqMenu_DrawFreqPresetMenu+0x14e8>)
 8002a4e:	f008 fb9f 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8002a52:	7bfb      	ldrb	r3, [r7, #15]
 8002a54:	b29a      	uxth	r2, r3
 8002a56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a5a:	9301      	str	r3, [sp, #4]
 8002a5c:	2302      	movs	r3, #2
 8002a5e:	9300      	str	r3, [sp, #0]
 8002a60:	2300      	movs	r3, #0
 8002a62:	2178      	movs	r1, #120	; 0x78
 8002a64:	4835      	ldr	r0, [pc, #212]	; (8002b3c <FreqMenu_DrawFreqPresetMenu+0x14ec>)
 8002a66:	f008 fb93 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 8002a6a:	7bbb      	ldrb	r3, [r7, #14]
 8002a6c:	b29a      	uxth	r2, r3
 8002a6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a72:	9301      	str	r3, [sp, #4]
 8002a74:	2302      	movs	r3, #2
 8002a76:	9300      	str	r3, [sp, #0]
 8002a78:	2300      	movs	r3, #0
 8002a7a:	2178      	movs	r1, #120	; 0x78
 8002a7c:	4830      	ldr	r0, [pc, #192]	; (8002b40 <FreqMenu_DrawFreqPresetMenu+0x14f0>)
 8002a7e:	f008 fb87 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8002a82:	7b7b      	ldrb	r3, [r7, #13]
 8002a84:	b29a      	uxth	r2, r3
 8002a86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a8a:	9301      	str	r3, [sp, #4]
 8002a8c:	2302      	movs	r3, #2
 8002a8e:	9300      	str	r3, [sp, #0]
 8002a90:	2300      	movs	r3, #0
 8002a92:	2178      	movs	r1, #120	; 0x78
 8002a94:	482b      	ldr	r0, [pc, #172]	; (8002b44 <FreqMenu_DrawFreqPresetMenu+0x14f4>)
 8002a96:	f008 fb7b 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8002a9a:	7b3b      	ldrb	r3, [r7, #12]
 8002a9c:	b29a      	uxth	r2, r3
 8002a9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002aa2:	9301      	str	r3, [sp, #4]
 8002aa4:	2302      	movs	r3, #2
 8002aa6:	9300      	str	r3, [sp, #0]
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	2178      	movs	r1, #120	; 0x78
 8002aac:	4826      	ldr	r0, [pc, #152]	; (8002b48 <FreqMenu_DrawFreqPresetMenu+0x14f8>)
 8002aae:	f008 fb6f 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8002ab2:	7afb      	ldrb	r3, [r7, #11]
 8002ab4:	b29a      	uxth	r2, r3
 8002ab6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002aba:	9301      	str	r3, [sp, #4]
 8002abc:	2302      	movs	r3, #2
 8002abe:	9300      	str	r3, [sp, #0]
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	2178      	movs	r1, #120	; 0x78
 8002ac4:	4821      	ldr	r0, [pc, #132]	; (8002b4c <FreqMenu_DrawFreqPresetMenu+0x14fc>)
 8002ac6:	f008 fb63 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8002aca:	7abb      	ldrb	r3, [r7, #10]
 8002acc:	b29a      	uxth	r2, r3
 8002ace:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ad2:	9301      	str	r3, [sp, #4]
 8002ad4:	2302      	movs	r3, #2
 8002ad6:	9300      	str	r3, [sp, #0]
 8002ad8:	2300      	movs	r3, #0
 8002ada:	2178      	movs	r1, #120	; 0x78
 8002adc:	481c      	ldr	r0, [pc, #112]	; (8002b50 <FreqMenu_DrawFreqPresetMenu+0x1500>)
 8002ade:	f008 fb57 	bl	800b190 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, WHITE, 2, BLACK);
 8002ae2:	7a7b      	ldrb	r3, [r7, #9]
 8002ae4:	b29a      	uxth	r2, r3
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	9301      	str	r3, [sp, #4]
 8002aea:	2302      	movs	r3, #2
 8002aec:	9300      	str	r3, [sp, #0]
 8002aee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002af2:	2178      	movs	r1, #120	; 0x78
 8002af4:	4817      	ldr	r0, [pc, #92]	; (8002b54 <FreqMenu_DrawFreqPresetMenu+0x1504>)
 8002af6:	f008 fb4b 	bl	800b190 <ILI9341_Draw_Text>
			break;
 8002afa:	bf00      	nop
 8002afc:	e00b      	b.n	8002b16 <FreqMenu_DrawFreqPresetMenu+0x14c6>
		ILI9341_Draw_Text("FreqMenus::FreqMenu_DrawFreqPresetMenu() Error", 		10, 180, RED, 1, BLACK);
 8002afe:	2300      	movs	r3, #0
 8002b00:	9301      	str	r3, [sp, #4]
 8002b02:	2301      	movs	r3, #1
 8002b04:	9300      	str	r3, [sp, #0]
 8002b06:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002b0a:	22b4      	movs	r2, #180	; 0xb4
 8002b0c:	210a      	movs	r1, #10
 8002b0e:	4812      	ldr	r0, [pc, #72]	; (8002b58 <FreqMenu_DrawFreqPresetMenu+0x1508>)
 8002b10:	f008 fb3e 	bl	800b190 <ILI9341_Draw_Text>
}
 8002b14:	e7ff      	b.n	8002b16 <FreqMenu_DrawFreqPresetMenu+0x14c6>
 8002b16:	bf00      	nop
 8002b18:	3710      	adds	r7, #16
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	0800e7b4 	.word	0x0800e7b4
 8002b24:	0800e7bc 	.word	0x0800e7bc
 8002b28:	0800e7c4 	.word	0x0800e7c4
 8002b2c:	0800e7cc 	.word	0x0800e7cc
 8002b30:	0800e7d4 	.word	0x0800e7d4
 8002b34:	0800e7dc 	.word	0x0800e7dc
 8002b38:	0800e7e4 	.word	0x0800e7e4
 8002b3c:	0800e7ec 	.word	0x0800e7ec
 8002b40:	0800e7f4 	.word	0x0800e7f4
 8002b44:	0800e7fc 	.word	0x0800e7fc
 8002b48:	0800e804 	.word	0x0800e804
 8002b4c:	0800e80c 	.word	0x0800e80c
 8002b50:	0800e814 	.word	0x0800e814
 8002b54:	0800e81c 	.word	0x0800e81c
 8002b58:	0800e828 	.word	0x0800e828

08002b5c <FreqMenu_DrawFreqAdjustMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawFreqAdjustMenu()
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("Output Signal Freq: ", 	10, 150, BLACK, 1, WHITE);
 8002b62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b66:	9301      	str	r3, [sp, #4]
 8002b68:	2301      	movs	r3, #1
 8002b6a:	9300      	str	r3, [sp, #0]
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	2296      	movs	r2, #150	; 0x96
 8002b70:	210a      	movs	r1, #10
 8002b72:	4811      	ldr	r0, [pc, #68]	; (8002bb8 <FreqMenu_DrawFreqAdjustMenu+0x5c>)
 8002b74:	f008 fb0c 	bl	800b190 <ILI9341_Draw_Text>

	char freq[6] = "";
 8002b78:	2300      	movs	r3, #0
 8002b7a:	603b      	str	r3, [r7, #0]
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	80bb      	strh	r3, [r7, #4]
	//snprintf(freq, sizeof(freq), "%u", (uint8_t)FreqO_GetOutputFreq());
	if(DM_AddDigitPadding((uint16_t)FreqO_GetOutputFreq(), freq, sizeof(freq)) == 0)
 8002b80:	f000 fd52 	bl	8003628 <FreqO_GetOutputFreq>
 8002b84:	4603      	mov	r3, r0
 8002b86:	b29b      	uxth	r3, r3
 8002b88:	4639      	mov	r1, r7
 8002b8a:	2206      	movs	r2, #6
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f7fe fcbb 	bl	8001508 <DM_AddDigitPadding>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d10a      	bne.n	8002bae <FreqMenu_DrawFreqAdjustMenu+0x52>
		ILI9341_Draw_Text(freq, 250, 150, WHITE, 1, BLACK);
 8002b98:	4638      	mov	r0, r7
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	9301      	str	r3, [sp, #4]
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	9300      	str	r3, [sp, #0]
 8002ba2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ba6:	2296      	movs	r2, #150	; 0x96
 8002ba8:	21fa      	movs	r1, #250	; 0xfa
 8002baa:	f008 faf1 	bl	800b190 <ILI9341_Draw_Text>


}
 8002bae:	bf00      	nop
 8002bb0:	3708      	adds	r7, #8
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	0800e858 	.word	0x0800e858

08002bbc <FreqMenu_DrawFreqSweepMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawFreqSweepMenu()
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b082      	sub	sp, #8
 8002bc0:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("TODO: Freq Sweep Menu", 	10, 120, BLACK, 2, WHITE);
 8002bc2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002bc6:	9301      	str	r3, [sp, #4]
 8002bc8:	2302      	movs	r3, #2
 8002bca:	9300      	str	r3, [sp, #0]
 8002bcc:	2300      	movs	r3, #0
 8002bce:	2278      	movs	r2, #120	; 0x78
 8002bd0:	210a      	movs	r1, #10
 8002bd2:	4803      	ldr	r0, [pc, #12]	; (8002be0 <FreqMenu_DrawFreqSweepMenu+0x24>)
 8002bd4:	f008 fadc 	bl	800b190 <ILI9341_Draw_Text>




}
 8002bd8:	bf00      	nop
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	0800e870 	.word	0x0800e870

08002be4 <EM_ProcessEvent>:
 *	@param None
 *	@retval None
 *
 */
void EM_ProcessEvent()
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	af00      	add	r7, sp, #0

	switch(eNextState)
 8002be8:	4b79      	ldr	r3, [pc, #484]	; (8002dd0 <EM_ProcessEvent+0x1ec>)
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	2b07      	cmp	r3, #7
 8002bee:	f200 80db 	bhi.w	8002da8 <EM_ProcessEvent+0x1c4>
 8002bf2:	a201      	add	r2, pc, #4	; (adr r2, 8002bf8 <EM_ProcessEvent+0x14>)
 8002bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bf8:	08002c19 	.word	0x08002c19
 8002bfc:	08002c6d 	.word	0x08002c6d
 8002c00:	08002c99 	.word	0x08002c99
 8002c04:	08002cc3 	.word	0x08002cc3
 8002c08:	08002d15 	.word	0x08002d15
 8002c0c:	08002d3f 	.word	0x08002d3f
 8002c10:	08002d69 	.word	0x08002d69
 8002c14:	08002d7f 	.word	0x08002d7f
	{
		case Idle_State:

			if(eNewEvent == evBlueBtn)
 8002c18:	4b6e      	ldr	r3, [pc, #440]	; (8002dd4 <EM_ProcessEvent+0x1f0>)
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d105      	bne.n	8002c2c <EM_ProcessEvent+0x48>
			{
				eNextState = _FuncMenuEntryHandler();
 8002c20:	f000 f8da 	bl	8002dd8 <_FuncMenuEntryHandler>
 8002c24:	4603      	mov	r3, r0
 8002c26:	461a      	mov	r2, r3
 8002c28:	4b69      	ldr	r3, [pc, #420]	; (8002dd0 <EM_ProcessEvent+0x1ec>)
 8002c2a:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8002c2c:	4b69      	ldr	r3, [pc, #420]	; (8002dd4 <EM_ProcessEvent+0x1f0>)
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d105      	bne.n	8002c40 <EM_ProcessEvent+0x5c>
			{
				eNextState = _FreqMainMenuEntryHandler();
 8002c34:	f000 f9a6 	bl	8002f84 <_FreqMainMenuEntryHandler>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	4b64      	ldr	r3, [pc, #400]	; (8002dd0 <EM_ProcessEvent+0x1ec>)
 8002c3e:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evYellowBtn)
 8002c40:	4b64      	ldr	r3, [pc, #400]	; (8002dd4 <EM_ProcessEvent+0x1f0>)
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	2b03      	cmp	r3, #3
 8002c46:	d105      	bne.n	8002c54 <EM_ProcessEvent+0x70>
			{
				eNextState = _GainMenuEntryHandler();
 8002c48:	f000 f90a 	bl	8002e60 <_GainMenuEntryHandler>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	461a      	mov	r2, r3
 8002c50:	4b5f      	ldr	r3, [pc, #380]	; (8002dd0 <EM_ProcessEvent+0x1ec>)
 8002c52:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evRedBtn)
 8002c54:	4b5f      	ldr	r3, [pc, #380]	; (8002dd4 <EM_ProcessEvent+0x1f0>)
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	2b04      	cmp	r3, #4
 8002c5a:	f040 80a7 	bne.w	8002dac <EM_ProcessEvent+0x1c8>
			{
				eNextState = _BiasMenuEntryHandler();
 8002c5e:	f000 f94b 	bl	8002ef8 <_BiasMenuEntryHandler>
 8002c62:	4603      	mov	r3, r0
 8002c64:	461a      	mov	r2, r3
 8002c66:	4b5a      	ldr	r3, [pc, #360]	; (8002dd0 <EM_ProcessEvent+0x1ec>)
 8002c68:	701a      	strb	r2, [r3, #0]
			}

			break;
 8002c6a:	e09f      	b.n	8002dac <EM_ProcessEvent+0x1c8>

		case Func_Menu_State:

			if(eNewEvent == evEncoderSet)
 8002c6c:	4b59      	ldr	r3, [pc, #356]	; (8002dd4 <EM_ProcessEvent+0x1f0>)
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	2b05      	cmp	r3, #5
 8002c72:	d105      	bne.n	8002c80 <EM_ProcessEvent+0x9c>
			{
				eNextState = _FuncMenuInputHandler();
 8002c74:	f000 f8c8 	bl	8002e08 <_FuncMenuInputHandler>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	4b54      	ldr	r3, [pc, #336]	; (8002dd0 <EM_ProcessEvent+0x1ec>)
 8002c7e:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8002c80:	4b54      	ldr	r3, [pc, #336]	; (8002dd4 <EM_ProcessEvent+0x1f0>)
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	2b06      	cmp	r3, #6
 8002c86:	f040 8093 	bne.w	8002db0 <EM_ProcessEvent+0x1cc>
			{
				eNextState = _FuncMenuExitHandler();
 8002c8a:	f000 f8cf 	bl	8002e2c <_FuncMenuExitHandler>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	461a      	mov	r2, r3
 8002c92:	4b4f      	ldr	r3, [pc, #316]	; (8002dd0 <EM_ProcessEvent+0x1ec>)
 8002c94:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002c96:	e08b      	b.n	8002db0 <EM_ProcessEvent+0x1cc>

		case Gain_Menu_State:

			if(eNewEvent == evEncoderSet)
 8002c98:	4b4e      	ldr	r3, [pc, #312]	; (8002dd4 <EM_ProcessEvent+0x1f0>)
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	2b05      	cmp	r3, #5
 8002c9e:	d105      	bne.n	8002cac <EM_ProcessEvent+0xc8>
			{
				eNextState = _GainMenuInputHandler();
 8002ca0:	f000 f8f8 	bl	8002e94 <_GainMenuInputHandler>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	4b49      	ldr	r3, [pc, #292]	; (8002dd0 <EM_ProcessEvent+0x1ec>)
 8002caa:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8002cac:	4b49      	ldr	r3, [pc, #292]	; (8002dd4 <EM_ProcessEvent+0x1f0>)
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	2b06      	cmp	r3, #6
 8002cb2:	d17f      	bne.n	8002db4 <EM_ProcessEvent+0x1d0>
			{
				eNextState = _GainMenuExitHandler();
 8002cb4:	f000 f906 	bl	8002ec4 <_GainMenuExitHandler>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	461a      	mov	r2, r3
 8002cbc:	4b44      	ldr	r3, [pc, #272]	; (8002dd0 <EM_ProcessEvent+0x1ec>)
 8002cbe:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002cc0:	e078      	b.n	8002db4 <EM_ProcessEvent+0x1d0>

			if(eNewEvent == evEncoderSet)
			{
//				eNextState = _FreqMainMenuSetHandler();
			}
			if(eNewEvent == evEncoderPush)
 8002cc2:	4b44      	ldr	r3, [pc, #272]	; (8002dd4 <EM_ProcessEvent+0x1f0>)
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	2b06      	cmp	r3, #6
 8002cc8:	d105      	bne.n	8002cd6 <EM_ProcessEvent+0xf2>
			{
				eNextState = _FreqMainMenuExitHandler();
 8002cca:	f000 f96f 	bl	8002fac <_FreqMainMenuExitHandler>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	4b3f      	ldr	r3, [pc, #252]	; (8002dd0 <EM_ProcessEvent+0x1ec>)
 8002cd4:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evBlueBtn)
 8002cd6:	4b3f      	ldr	r3, [pc, #252]	; (8002dd4 <EM_ProcessEvent+0x1f0>)
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d105      	bne.n	8002cea <EM_ProcessEvent+0x106>
			{
//				FreqO_ApplyPreset(FPRESET_1HZ);
				eNextState = _FreqPresetMenuEntryHandler();
 8002cde:	f000 f97f 	bl	8002fe0 <_FreqPresetMenuEntryHandler>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	4b3a      	ldr	r3, [pc, #232]	; (8002dd0 <EM_ProcessEvent+0x1ec>)
 8002ce8:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8002cea:	4b3a      	ldr	r3, [pc, #232]	; (8002dd4 <EM_ProcessEvent+0x1f0>)
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d105      	bne.n	8002cfe <EM_ProcessEvent+0x11a>
			{
//				FreqO_ApplyPreset(FPRESET_100HZ);
				eNextState = _FreqAdjustMenuEntryHandler();
 8002cf2:	f000 f9c7 	bl	8003084 <_FreqAdjustMenuEntryHandler>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	4b35      	ldr	r3, [pc, #212]	; (8002dd0 <EM_ProcessEvent+0x1ec>)
 8002cfc:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evYellowBtn)
 8002cfe:	4b35      	ldr	r3, [pc, #212]	; (8002dd4 <EM_ProcessEvent+0x1f0>)
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	2b03      	cmp	r3, #3
 8002d04:	d158      	bne.n	8002db8 <EM_ProcessEvent+0x1d4>
			{
//				FreqO_ApplyPreset(FPRESET_1KHZ);
				eNextState = _FreqSweepMenuEntryHandler();
 8002d06:	f000 fa01 	bl	800310c <_FreqSweepMenuEntryHandler>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	4b30      	ldr	r3, [pc, #192]	; (8002dd0 <EM_ProcessEvent+0x1ec>)
 8002d10:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evRedBtn)
			{
				// No menu action
			}
			break;
 8002d12:	e051      	b.n	8002db8 <EM_ProcessEvent+0x1d4>

		case Freq_Preset_Menu_State:
			if(eNewEvent == evEncoderSet)
 8002d14:	4b2f      	ldr	r3, [pc, #188]	; (8002dd4 <EM_ProcessEvent+0x1f0>)
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	2b05      	cmp	r3, #5
 8002d1a:	d105      	bne.n	8002d28 <EM_ProcessEvent+0x144>
			{
				eNextState = _FreqPresetMenuInputHandler();
 8002d1c:	f000 f98a 	bl	8003034 <_FreqPresetMenuInputHandler>
 8002d20:	4603      	mov	r3, r0
 8002d22:	461a      	mov	r2, r3
 8002d24:	4b2a      	ldr	r3, [pc, #168]	; (8002dd0 <EM_ProcessEvent+0x1ec>)
 8002d26:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8002d28:	4b2a      	ldr	r3, [pc, #168]	; (8002dd4 <EM_ProcessEvent+0x1f0>)
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	2b06      	cmp	r3, #6
 8002d2e:	d145      	bne.n	8002dbc <EM_ProcessEvent+0x1d8>
			{
				eNextState = _FreqPresetMenuExitHandler();
 8002d30:	f000 f996 	bl	8003060 <_FreqPresetMenuExitHandler>
 8002d34:	4603      	mov	r3, r0
 8002d36:	461a      	mov	r2, r3
 8002d38:	4b25      	ldr	r3, [pc, #148]	; (8002dd0 <EM_ProcessEvent+0x1ec>)
 8002d3a:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002d3c:	e03e      	b.n	8002dbc <EM_ProcessEvent+0x1d8>

		case Freq_Adjust_Menu_State:
			if(eNewEvent == evEncoderSet)
 8002d3e:	4b25      	ldr	r3, [pc, #148]	; (8002dd4 <EM_ProcessEvent+0x1f0>)
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	2b05      	cmp	r3, #5
 8002d44:	d105      	bne.n	8002d52 <EM_ProcessEvent+0x16e>
			{
				eNextState = _FreqAdjustMenuInputHandler();
 8002d46:	f000 f9bd 	bl	80030c4 <_FreqAdjustMenuInputHandler>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	4b20      	ldr	r3, [pc, #128]	; (8002dd0 <EM_ProcessEvent+0x1ec>)
 8002d50:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8002d52:	4b20      	ldr	r3, [pc, #128]	; (8002dd4 <EM_ProcessEvent+0x1f0>)
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	2b06      	cmp	r3, #6
 8002d58:	d132      	bne.n	8002dc0 <EM_ProcessEvent+0x1dc>
			{
				eNextState = _FreqAdjustMenuExitHandler();
 8002d5a:	f000 f9c5 	bl	80030e8 <_FreqAdjustMenuExitHandler>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	461a      	mov	r2, r3
 8002d62:	4b1b      	ldr	r3, [pc, #108]	; (8002dd0 <EM_ProcessEvent+0x1ec>)
 8002d64:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002d66:	e02b      	b.n	8002dc0 <EM_ProcessEvent+0x1dc>
		case Freq_Sweep_Menu_State:
			if(eNewEvent == evEncoderSet)
			{
//				eNextState = _FreqMainMenuSetHandler();
			}
			if(eNewEvent == evEncoderPush)
 8002d68:	4b1a      	ldr	r3, [pc, #104]	; (8002dd4 <EM_ProcessEvent+0x1f0>)
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	2b06      	cmp	r3, #6
 8002d6e:	d129      	bne.n	8002dc4 <EM_ProcessEvent+0x1e0>
			{
				eNextState = _FreqSweepMenuExitHandler();
 8002d70:	f000 f9e8 	bl	8003144 <_FreqSweepMenuExitHandler>
 8002d74:	4603      	mov	r3, r0
 8002d76:	461a      	mov	r2, r3
 8002d78:	4b15      	ldr	r3, [pc, #84]	; (8002dd0 <EM_ProcessEvent+0x1ec>)
 8002d7a:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002d7c:	e022      	b.n	8002dc4 <EM_ProcessEvent+0x1e0>

		case Bias_Menu_State:
			if(eNewEvent == evEncoderSet)
 8002d7e:	4b15      	ldr	r3, [pc, #84]	; (8002dd4 <EM_ProcessEvent+0x1f0>)
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	2b05      	cmp	r3, #5
 8002d84:	d105      	bne.n	8002d92 <EM_ProcessEvent+0x1ae>
			{
				eNextState = _BiasMenuInputHandler();
 8002d86:	f000 f8d1 	bl	8002f2c <_BiasMenuInputHandler>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	4b10      	ldr	r3, [pc, #64]	; (8002dd0 <EM_ProcessEvent+0x1ec>)
 8002d90:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8002d92:	4b10      	ldr	r3, [pc, #64]	; (8002dd4 <EM_ProcessEvent+0x1f0>)
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	2b06      	cmp	r3, #6
 8002d98:	d116      	bne.n	8002dc8 <EM_ProcessEvent+0x1e4>
			{
				eNextState = _BiasMenuExitHandler();
 8002d9a:	f000 f8d9 	bl	8002f50 <_BiasMenuExitHandler>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	461a      	mov	r2, r3
 8002da2:	4b0b      	ldr	r3, [pc, #44]	; (8002dd0 <EM_ProcessEvent+0x1ec>)
 8002da4:	701a      	strb	r2, [r3, #0]
			}

			break;
 8002da6:	e00f      	b.n	8002dc8 <EM_ProcessEvent+0x1e4>

		default:
			break;
 8002da8:	bf00      	nop
 8002daa:	e00e      	b.n	8002dca <EM_ProcessEvent+0x1e6>
			break;
 8002dac:	bf00      	nop
 8002dae:	e00c      	b.n	8002dca <EM_ProcessEvent+0x1e6>
			break;
 8002db0:	bf00      	nop
 8002db2:	e00a      	b.n	8002dca <EM_ProcessEvent+0x1e6>
			break;
 8002db4:	bf00      	nop
 8002db6:	e008      	b.n	8002dca <EM_ProcessEvent+0x1e6>
			break;
 8002db8:	bf00      	nop
 8002dba:	e006      	b.n	8002dca <EM_ProcessEvent+0x1e6>
			break;
 8002dbc:	bf00      	nop
 8002dbe:	e004      	b.n	8002dca <EM_ProcessEvent+0x1e6>
			break;
 8002dc0:	bf00      	nop
 8002dc2:	e002      	b.n	8002dca <EM_ProcessEvent+0x1e6>
			break;
 8002dc4:	bf00      	nop
 8002dc6:	e000      	b.n	8002dca <EM_ProcessEvent+0x1e6>
			break;
 8002dc8:	bf00      	nop
	}

}
 8002dca:	bf00      	nop
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	200013f0 	.word	0x200013f0
 8002dd4:	200013f1 	.word	0x200013f1

08002dd8 <_FuncMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _FuncMenuEntryHandler(void)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("FunctionMenu Event captured\n");
 8002ddc:	4808      	ldr	r0, [pc, #32]	; (8002e00 <_FuncMenuEntryHandler+0x28>)
 8002dde:	f009 fcc1 	bl	800c764 <puts>
#endif

	_RefreshDisplay();
 8002de2:	f000 f9d7 	bl	8003194 <_RefreshDisplay>

	DM_ShowFuncSelectMenu(ENABLE_FUNCMENU);
 8002de6:	2001      	movs	r0, #1
 8002de8:	f7fe f8e6 	bl	8000fb8 <DM_ShowFuncSelectMenu>

	// set the rotary encoder limits to 0-20 for this menu
	ENCODER_TIMER->CNT = 20;
 8002dec:	4b05      	ldr	r3, [pc, #20]	; (8002e04 <_FuncMenuEntryHandler+0x2c>)
 8002dee:	2214      	movs	r2, #20
 8002df0:	625a      	str	r2, [r3, #36]	; 0x24
	ENCODER_TIMER->ARR = 20;
 8002df2:	4b04      	ldr	r3, [pc, #16]	; (8002e04 <_FuncMenuEntryHandler+0x2c>)
 8002df4:	2214      	movs	r2, #20
 8002df6:	62da      	str	r2, [r3, #44]	; 0x2c

	return Func_Menu_State;
 8002df8:	2301      	movs	r3, #1
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	0800e888 	.word	0x0800e888
 8002e04:	40012c00 	.word	0x40012c00

08002e08 <_FuncMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _FuncMenuInputHandler(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("FunctionAdjust Event captured\n");
 8002e0c:	4805      	ldr	r0, [pc, #20]	; (8002e24 <_FuncMenuInputHandler+0x1c>)
 8002e0e:	f009 fca9 	bl	800c764 <puts>
#endif


	FuncO_ModifyOutput();
 8002e12:	f000 fc15 	bl	8003640 <FuncO_ModifyOutput>
	eNewEvent = evBlueBtn;
 8002e16:	4b04      	ldr	r3, [pc, #16]	; (8002e28 <_FuncMenuInputHandler+0x20>)
 8002e18:	2201      	movs	r2, #1
 8002e1a:	701a      	strb	r2, [r3, #0]
	return Func_Menu_State;
 8002e1c:	2301      	movs	r3, #1
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	0800e8a4 	.word	0x0800e8a4
 8002e28:	200013f1 	.word	0x200013f1

08002e2c <_FuncMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _FuncMenuExitHandler()
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("ExitFuncMenu Event captured\n");
 8002e30:	4808      	ldr	r0, [pc, #32]	; (8002e54 <_FuncMenuExitHandler+0x28>)
 8002e32:	f009 fc97 	bl	800c764 <puts>
#endif

	// disable the menu

	DM_ShowFuncSelectMenu(DISABLE_FUNCMENU);
 8002e36:	2000      	movs	r0, #0
 8002e38:	f7fe f8be 	bl	8000fb8 <DM_ShowFuncSelectMenu>

	// reset the encoder range

	ENCODER_TIMER->ARR = 1024;
 8002e3c:	4b06      	ldr	r3, [pc, #24]	; (8002e58 <_FuncMenuExitHandler+0x2c>)
 8002e3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e42:	62da      	str	r2, [r3, #44]	; 0x2c

	_RefreshDisplay();
 8002e44:	f000 f9a6 	bl	8003194 <_RefreshDisplay>

	eNewEvent = evIdle;
 8002e48:	4b04      	ldr	r3, [pc, #16]	; (8002e5c <_FuncMenuExitHandler+0x30>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8002e4e:	2300      	movs	r3, #0
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	0800e8c4 	.word	0x0800e8c4
 8002e58:	40012c00 	.word	0x40012c00
 8002e5c:	200013f1 	.word	0x200013f1

08002e60 <_GainMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _GainMenuEntryHandler()
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("GainMenu Event captured\n");
 8002e64:	4809      	ldr	r0, [pc, #36]	; (8002e8c <_GainMenuEntryHandler+0x2c>)
 8002e66:	f009 fc7d 	bl	800c764 <puts>
#endif

	_RefreshDisplay();
 8002e6a:	f000 f993 	bl	8003194 <_RefreshDisplay>

	DM_ShowGainSelectMenu(ENABLE_GAINMENU);
 8002e6e:	2001      	movs	r0, #1
 8002e70:	f7fe fa86 	bl	8001380 <DM_ShowGainSelectMenu>

	// set the rotary encoder limits to 0-32 for this menu
	ENCODER_TIMER->CNT = GO_GetOutputGain();
 8002e74:	f000 fda0 	bl	80039b8 <GO_GetOutputGain>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	4b04      	ldr	r3, [pc, #16]	; (8002e90 <_GainMenuEntryHandler+0x30>)
 8002e7e:	625a      	str	r2, [r3, #36]	; 0x24
	ENCODER_TIMER->ARR = 32;
 8002e80:	4b03      	ldr	r3, [pc, #12]	; (8002e90 <_GainMenuEntryHandler+0x30>)
 8002e82:	2220      	movs	r2, #32
 8002e84:	62da      	str	r2, [r3, #44]	; 0x2c

	return Gain_Menu_State;
 8002e86:	2302      	movs	r3, #2
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	0800e8e0 	.word	0x0800e8e0
 8002e90:	40012c00 	.word	0x40012c00

08002e94 <_GainMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _GainMenuInputHandler()
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("GainSet Event captured\n");
 8002e98:	4808      	ldr	r0, [pc, #32]	; (8002ebc <_GainMenuInputHandler+0x28>)
 8002e9a:	f009 fc63 	bl	800c764 <puts>
#endif

	GO_SetOutputToEncoder(SM_GetEncoderValue(ENCODER_REVERSE));
 8002e9e:	2001      	movs	r0, #1
 8002ea0:	f000 fd96 	bl	80039d0 <SM_GetEncoderValue>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f000 fc97 	bl	80037dc <GO_SetOutputToEncoder>

	eNewEvent = evYellowBtn;
 8002eae:	4b04      	ldr	r3, [pc, #16]	; (8002ec0 <_GainMenuInputHandler+0x2c>)
 8002eb0:	2203      	movs	r2, #3
 8002eb2:	701a      	strb	r2, [r3, #0]
	return Gain_Menu_State;
 8002eb4:	2302      	movs	r3, #2
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	0800e8f8 	.word	0x0800e8f8
 8002ec0:	200013f1 	.word	0x200013f1

08002ec4 <_GainMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _GainMenuExitHandler()
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("ExitGainMenu Event captured\n");
 8002ec8:	4808      	ldr	r0, [pc, #32]	; (8002eec <_GainMenuExitHandler+0x28>)
 8002eca:	f009 fc4b 	bl	800c764 <puts>
#endif


	// disable the menu
	DM_ShowGainSelectMenu(DISABLE_GAINMENU);
 8002ece:	2000      	movs	r0, #0
 8002ed0:	f7fe fa56 	bl	8001380 <DM_ShowGainSelectMenu>

	// reset the encoder range

	ENCODER_TIMER->ARR = 1024;
 8002ed4:	4b06      	ldr	r3, [pc, #24]	; (8002ef0 <_GainMenuExitHandler+0x2c>)
 8002ed6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002eda:	62da      	str	r2, [r3, #44]	; 0x2c

	_RefreshDisplay();
 8002edc:	f000 f95a 	bl	8003194 <_RefreshDisplay>

	eNewEvent = evIdle;
 8002ee0:	4b04      	ldr	r3, [pc, #16]	; (8002ef4 <_GainMenuExitHandler+0x30>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8002ee6:	2300      	movs	r3, #0
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	0800e910 	.word	0x0800e910
 8002ef0:	40012c00 	.word	0x40012c00
 8002ef4:	200013f1 	.word	0x200013f1

08002ef8 <_BiasMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _BiasMenuEntryHandler()
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("BiasMenu Event captured\n");
 8002efc:	4809      	ldr	r0, [pc, #36]	; (8002f24 <_BiasMenuEntryHandler+0x2c>)
 8002efe:	f009 fc31 	bl	800c764 <puts>
#endif

	_RefreshDisplay();
 8002f02:	f000 f947 	bl	8003194 <_RefreshDisplay>

	DM_ShowBiasSelectMenu(ENABLE_BIASMENU);
 8002f06:	2001      	movs	r0, #1
 8002f08:	f7fe fa6e 	bl	80013e8 <DM_ShowBiasSelectMenu>

	// set the rotary encoder limits to 0-20 for this menu


	ENCODER_TIMER->ARR = BIAS_MAX;
 8002f0c:	4b06      	ldr	r3, [pc, #24]	; (8002f28 <_BiasMenuEntryHandler+0x30>)
 8002f0e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002f12:	62da      	str	r2, [r3, #44]	; 0x2c
	ENCODER_TIMER->CNT = BIAS_CENTER;
 8002f14:	4b04      	ldr	r3, [pc, #16]	; (8002f28 <_BiasMenuEntryHandler+0x30>)
 8002f16:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002f1a:	625a      	str	r2, [r3, #36]	; 0x24

	return Bias_Menu_State;
 8002f1c:	2307      	movs	r3, #7
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	0800e92c 	.word	0x0800e92c
 8002f28:	40012c00 	.word	0x40012c00

08002f2c <_BiasMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _BiasMenuInputHandler()
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("BiasSet Event captured\n");
 8002f30:	4805      	ldr	r0, [pc, #20]	; (8002f48 <_BiasMenuInputHandler+0x1c>)
 8002f32:	f009 fc17 	bl	800c764 <puts>
#endif

	BO_ModifyOutput();
 8002f36:	f000 f947 	bl	80031c8 <BO_ModifyOutput>

	eNewEvent = evRedBtn;
 8002f3a:	4b04      	ldr	r3, [pc, #16]	; (8002f4c <_BiasMenuInputHandler+0x20>)
 8002f3c:	2204      	movs	r2, #4
 8002f3e:	701a      	strb	r2, [r3, #0]
	return Bias_Menu_State;
 8002f40:	2307      	movs	r3, #7
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	0800e944 	.word	0x0800e944
 8002f4c:	200013f1 	.word	0x200013f1

08002f50 <_BiasMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _BiasMenuExitHandler()
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("ExitBiasMenu Event captured\n");
 8002f54:	4808      	ldr	r0, [pc, #32]	; (8002f78 <_BiasMenuExitHandler+0x28>)
 8002f56:	f009 fc05 	bl	800c764 <puts>
#endif


	// disable the menu
	DM_ShowBiasSelectMenu(DISABLE_BIASMENU);
 8002f5a:	2000      	movs	r0, #0
 8002f5c:	f7fe fa44 	bl	80013e8 <DM_ShowBiasSelectMenu>

	// reset the encoder range

	ENCODER_TIMER->ARR = 1024;
 8002f60:	4b06      	ldr	r3, [pc, #24]	; (8002f7c <_BiasMenuExitHandler+0x2c>)
 8002f62:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f66:	62da      	str	r2, [r3, #44]	; 0x2c

	_RefreshDisplay();
 8002f68:	f000 f914 	bl	8003194 <_RefreshDisplay>

	eNewEvent = evIdle;
 8002f6c:	4b04      	ldr	r3, [pc, #16]	; (8002f80 <_BiasMenuExitHandler+0x30>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8002f72:	2300      	movs	r3, #0
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	0800e95c 	.word	0x0800e95c
 8002f7c:	40012c00 	.word	0x40012c00
 8002f80:	200013f1 	.word	0x200013f1

08002f84 <_FreqMainMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _FreqMainMenuEntryHandler()
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("FreqMenu Event captured\n");
 8002f88:	4806      	ldr	r0, [pc, #24]	; (8002fa4 <_FreqMainMenuEntryHandler+0x20>)
 8002f8a:	f009 fbeb 	bl	800c764 <puts>
#endif

	_RefreshDisplay();
 8002f8e:	f000 f901 	bl	8003194 <_RefreshDisplay>

	DM_ShowFreqMenu(ENABLE_FREQ_MAIN_MENU);
 8002f92:	2001      	movs	r0, #1
 8002f94:	f7fe fa18 	bl	80013c8 <DM_ShowFreqMenu>
	// set the rotary encoder limits to 0-? for this menu
//	ENCODER_TIMER->CNT = 0;
//	ENCODER_TIMER->ARR = 56;

	// stay in this state
	eNewEvent = evIdle;
 8002f98:	4b03      	ldr	r3, [pc, #12]	; (8002fa8 <_FreqMainMenuEntryHandler+0x24>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8002f9e:	2303      	movs	r3, #3
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	0800e978 	.word	0x0800e978
 8002fa8:	200013f1 	.word	0x200013f1

08002fac <_FreqMainMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _FreqMainMenuExitHandler()
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("Exit Freq Main Menu Event captured\n");
 8002fb0:	4808      	ldr	r0, [pc, #32]	; (8002fd4 <_FreqMainMenuExitHandler+0x28>)
 8002fb2:	f009 fbd7 	bl	800c764 <puts>
#endif


	// disable the menu
	DM_ShowFreqMenu(DISABLE_FREQ_MENU);
 8002fb6:	2000      	movs	r0, #0
 8002fb8:	f7fe fa06 	bl	80013c8 <DM_ShowFreqMenu>

	// reset the encoder range

	ENCODER_TIMER->ARR = 1024;
 8002fbc:	4b06      	ldr	r3, [pc, #24]	; (8002fd8 <_FreqMainMenuExitHandler+0x2c>)
 8002fbe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002fc2:	62da      	str	r2, [r3, #44]	; 0x2c

	_RefreshDisplay();
 8002fc4:	f000 f8e6 	bl	8003194 <_RefreshDisplay>

	eNewEvent = evIdle;
 8002fc8:	4b04      	ldr	r3, [pc, #16]	; (8002fdc <_FreqMainMenuExitHandler+0x30>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8002fce:	2300      	movs	r3, #0
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	0800e9a8 	.word	0x0800e9a8
 8002fd8:	40012c00 	.word	0x40012c00
 8002fdc:	200013f1 	.word	0x200013f1

08002fe0 <_FreqPresetMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _FreqPresetMenuEntryHandler()
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("Freq Preset Menu Entry Event captured\n");
 8002fe6:	4810      	ldr	r0, [pc, #64]	; (8003028 <_FreqPresetMenuEntryHandler+0x48>)
 8002fe8:	f009 fbbc 	bl	800c764 <puts>
#endif

	_RefreshDisplay();
 8002fec:	f000 f8d2 	bl	8003194 <_RefreshDisplay>

	DM_ShowFreqMenu(ENABLE_FREQ_PRESET_MENU);
 8002ff0:	2002      	movs	r0, #2
 8002ff2:	f7fe f9e9 	bl	80013c8 <DM_ShowFreqMenu>

	Freq_Preset_Encoder_Pos_t *pFreqPresetTmp =  FreqO_GetFPresetObject();
 8002ff6:	f000 fadd 	bl	80035b4 <FreqO_GetFPresetObject>
 8002ffa:	6078      	str	r0, [r7, #4]
	if(pFreqPresetTmp)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d009      	beq.n	8003016 <_FreqPresetMenuEntryHandler+0x36>
	{
		ENCODER_TIMER->CNT = pFreqPresetTmp->epos;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	791a      	ldrb	r2, [r3, #4]
 8003006:	4b09      	ldr	r3, [pc, #36]	; (800302c <_FreqPresetMenuEntryHandler+0x4c>)
 8003008:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = FreqO_GetFreqPresetEncoderRange();
 800300a:	f000 fb01 	bl	8003610 <FreqO_GetFreqPresetEncoderRange>
 800300e:	4603      	mov	r3, r0
 8003010:	461a      	mov	r2, r3
 8003012:	4b06      	ldr	r3, [pc, #24]	; (800302c <_FreqPresetMenuEntryHandler+0x4c>)
 8003014:	62da      	str	r2, [r3, #44]	; 0x2c
	}


	// stay in this state
	eNewEvent = evIdle;
 8003016:	4b06      	ldr	r3, [pc, #24]	; (8003030 <_FreqPresetMenuEntryHandler+0x50>)
 8003018:	2200      	movs	r2, #0
 800301a:	701a      	strb	r2, [r3, #0]
	return Freq_Preset_Menu_State;
 800301c:	2304      	movs	r3, #4
}
 800301e:	4618      	mov	r0, r3
 8003020:	3708      	adds	r7, #8
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	0800e9cc 	.word	0x0800e9cc
 800302c:	40012c00 	.word	0x40012c00
 8003030:	200013f1 	.word	0x200013f1

08003034 <_FreqPresetMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _FreqPresetMenuInputHandler()
{
 8003034:	b580      	push	{r7, lr}
 8003036:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("FreqSet Event captured\n");
 8003038:	4807      	ldr	r0, [pc, #28]	; (8003058 <_FreqPresetMenuInputHandler+0x24>)
 800303a:	f009 fb93 	bl	800c764 <puts>
#endif

	FreqO_ModifyOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 800303e:	2001      	movs	r0, #1
 8003040:	f000 fcc6 	bl	80039d0 <SM_GetEncoderValue>
 8003044:	4603      	mov	r3, r0
 8003046:	4618      	mov	r0, r3
 8003048:	f000 f9c8 	bl	80033dc <FreqO_ModifyOutput>

	// stay in this state
	eNewEvent = evIdle;
 800304c:	4b03      	ldr	r3, [pc, #12]	; (800305c <_FreqPresetMenuInputHandler+0x28>)
 800304e:	2200      	movs	r2, #0
 8003050:	701a      	strb	r2, [r3, #0]
	return Freq_Preset_Menu_State;
 8003052:	2304      	movs	r3, #4
}
 8003054:	4618      	mov	r0, r3
 8003056:	bd80      	pop	{r7, pc}
 8003058:	0800e990 	.word	0x0800e990
 800305c:	200013f1 	.word	0x200013f1

08003060 <_FreqPresetMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _FreqPresetMenuExitHandler()
{
 8003060:	b580      	push	{r7, lr}
 8003062:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("Exit Freq Menu Event captured\n");
 8003064:	4805      	ldr	r0, [pc, #20]	; (800307c <_FreqPresetMenuExitHandler+0x1c>)
 8003066:	f009 fb7d 	bl	800c764 <puts>
#endif


	// disable the menu
	DM_ShowFreqMenu(DISABLE_FREQ_MENU);
 800306a:	2000      	movs	r0, #0
 800306c:	f7fe f9ac 	bl	80013c8 <DM_ShowFreqMenu>
	// reset the encoder range

	//ENCODER_TIMER->ARR = 1024;

	// back to main freq menu
	eNewEvent = evGreenBtn;
 8003070:	4b03      	ldr	r3, [pc, #12]	; (8003080 <_FreqPresetMenuExitHandler+0x20>)
 8003072:	2202      	movs	r2, #2
 8003074:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8003076:	2300      	movs	r3, #0
}
 8003078:	4618      	mov	r0, r3
 800307a:	bd80      	pop	{r7, pc}
 800307c:	0800e9f4 	.word	0x0800e9f4
 8003080:	200013f1 	.word	0x200013f1

08003084 <_FreqAdjustMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _FreqAdjustMenuEntryHandler()
{
 8003084:	b580      	push	{r7, lr}
 8003086:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("Freq Adjust Menu Event captured\n");
 8003088:	480a      	ldr	r0, [pc, #40]	; (80030b4 <_FreqAdjustMenuEntryHandler+0x30>)
 800308a:	f009 fb6b 	bl	800c764 <puts>
#endif

	_RefreshDisplay();
 800308e:	f000 f881 	bl	8003194 <_RefreshDisplay>

	DM_ShowFreqMenu(ENABLE_FREQ_ADJUST_MENU);
 8003092:	2003      	movs	r0, #3
 8003094:	f7fe f998 	bl	80013c8 <DM_ShowFreqMenu>

	// set the rotary encoder limits to 0-? for this menu
	ENCODER_TIMER->CNT = TIM8->ARR;
 8003098:	4b07      	ldr	r3, [pc, #28]	; (80030b8 <_FreqAdjustMenuEntryHandler+0x34>)
 800309a:	4a08      	ldr	r2, [pc, #32]	; (80030bc <_FreqAdjustMenuEntryHandler+0x38>)
 800309c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800309e:	6253      	str	r3, [r2, #36]	; 0x24
	ENCODER_TIMER->ARR = 65535;
 80030a0:	4b06      	ldr	r3, [pc, #24]	; (80030bc <_FreqAdjustMenuEntryHandler+0x38>)
 80030a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80030a6:	62da      	str	r2, [r3, #44]	; 0x2c

	// stay in this state
	eNewEvent = evIdle;
 80030a8:	4b05      	ldr	r3, [pc, #20]	; (80030c0 <_FreqAdjustMenuEntryHandler+0x3c>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	701a      	strb	r2, [r3, #0]
	return Freq_Adjust_Menu_State;
 80030ae:	2305      	movs	r3, #5
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	0800ea14 	.word	0x0800ea14
 80030b8:	40013400 	.word	0x40013400
 80030bc:	40012c00 	.word	0x40012c00
 80030c0:	200013f1 	.word	0x200013f1

080030c4 <_FreqAdjustMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _FreqAdjustMenuInputHandler()
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("FreqSet Event captured\n");
 80030c8:	4805      	ldr	r0, [pc, #20]	; (80030e0 <_FreqAdjustMenuInputHandler+0x1c>)
 80030ca:	f009 fb4b 	bl	800c764 <puts>
#endif

	FreqO_AdjustFreq();
 80030ce:	f000 f977 	bl	80033c0 <FreqO_AdjustFreq>

	// stay in this state
	eNewEvent = evIdle;
 80030d2:	4b04      	ldr	r3, [pc, #16]	; (80030e4 <_FreqAdjustMenuInputHandler+0x20>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	701a      	strb	r2, [r3, #0]
	return Freq_Adjust_Menu_State;
 80030d8:	2305      	movs	r3, #5
}
 80030da:	4618      	mov	r0, r3
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	0800e990 	.word	0x0800e990
 80030e4:	200013f1 	.word	0x200013f1

080030e8 <_FreqAdjustMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _FreqAdjustMenuExitHandler()
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("Exit Freq Adjust Menu Exit Event captured\n");
 80030ec:	4805      	ldr	r0, [pc, #20]	; (8003104 <_FreqAdjustMenuExitHandler+0x1c>)
 80030ee:	f009 fb39 	bl	800c764 <puts>
#endif


	// disable the menu
	DM_ShowFreqMenu(DISABLE_FREQ_MENU);
 80030f2:	2000      	movs	r0, #0
 80030f4:	f7fe f968 	bl	80013c8 <DM_ShowFreqMenu>
	// reset the encoder range

	//ENCODER_TIMER->ARR = 1024;

	// back to main freq menu
	eNewEvent = evGreenBtn;
 80030f8:	4b03      	ldr	r3, [pc, #12]	; (8003108 <_FreqAdjustMenuExitHandler+0x20>)
 80030fa:	2202      	movs	r2, #2
 80030fc:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 80030fe:	2300      	movs	r3, #0
}
 8003100:	4618      	mov	r0, r3
 8003102:	bd80      	pop	{r7, pc}
 8003104:	0800ea34 	.word	0x0800ea34
 8003108:	200013f1 	.word	0x200013f1

0800310c <_FreqSweepMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _FreqSweepMenuEntryHandler()
{
 800310c:	b580      	push	{r7, lr}
 800310e:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("Freq Sweep Menu Event captured\n");
 8003110:	4809      	ldr	r0, [pc, #36]	; (8003138 <_FreqSweepMenuEntryHandler+0x2c>)
 8003112:	f009 fb27 	bl	800c764 <puts>
#endif

	_RefreshDisplay();
 8003116:	f000 f83d 	bl	8003194 <_RefreshDisplay>

	DM_ShowFreqMenu(ENABLE_FREQ_SWEEP_MENU);
 800311a:	2004      	movs	r0, #4
 800311c:	f7fe f954 	bl	80013c8 <DM_ShowFreqMenu>

	// set the rotary encoder limits to 0-? for this menu
	ENCODER_TIMER->CNT = 0;
 8003120:	4b06      	ldr	r3, [pc, #24]	; (800313c <_FreqSweepMenuEntryHandler+0x30>)
 8003122:	2200      	movs	r2, #0
 8003124:	625a      	str	r2, [r3, #36]	; 0x24
	ENCODER_TIMER->ARR = 56;
 8003126:	4b05      	ldr	r3, [pc, #20]	; (800313c <_FreqSweepMenuEntryHandler+0x30>)
 8003128:	2238      	movs	r2, #56	; 0x38
 800312a:	62da      	str	r2, [r3, #44]	; 0x2c

	// stay in this state
	eNewEvent = evIdle;
 800312c:	4b04      	ldr	r3, [pc, #16]	; (8003140 <_FreqSweepMenuEntryHandler+0x34>)
 800312e:	2200      	movs	r2, #0
 8003130:	701a      	strb	r2, [r3, #0]
	return Freq_Sweep_Menu_State;
 8003132:	2306      	movs	r3, #6
}
 8003134:	4618      	mov	r0, r3
 8003136:	bd80      	pop	{r7, pc}
 8003138:	0800ea60 	.word	0x0800ea60
 800313c:	40012c00 	.word	0x40012c00
 8003140:	200013f1 	.word	0x200013f1

08003144 <_FreqSweepMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _FreqSweepMenuExitHandler()
{
 8003144:	b580      	push	{r7, lr}
 8003146:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("Exit Freq Sweep Menu Exit Event captured\n");
 8003148:	4807      	ldr	r0, [pc, #28]	; (8003168 <_FreqSweepMenuExitHandler+0x24>)
 800314a:	f009 fb0b 	bl	800c764 <puts>
#endif


	// disable the menu
	DM_ShowFreqMenu(DISABLE_FREQ_MENU);
 800314e:	2000      	movs	r0, #0
 8003150:	f7fe f93a 	bl	80013c8 <DM_ShowFreqMenu>

	// reset the encoder range

	ENCODER_TIMER->ARR = 1024;
 8003154:	4b05      	ldr	r3, [pc, #20]	; (800316c <_FreqSweepMenuExitHandler+0x28>)
 8003156:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800315a:	62da      	str	r2, [r3, #44]	; 0x2c

	// back to main freq menu
	eNewEvent = evGreenBtn;
 800315c:	4b04      	ldr	r3, [pc, #16]	; (8003170 <_FreqSweepMenuExitHandler+0x2c>)
 800315e:	2202      	movs	r2, #2
 8003160:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8003162:	2300      	movs	r3, #0
}
 8003164:	4618      	mov	r0, r3
 8003166:	bd80      	pop	{r7, pc}
 8003168:	0800ea80 	.word	0x0800ea80
 800316c:	40012c00 	.word	0x40012c00
 8003170:	200013f1 	.word	0x200013f1

08003174 <EM_SetNewEvent>:
 *	@param None
 *	@retval None
 *
 */
void EM_SetNewEvent(eSystemEvent pEvent)
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	4603      	mov	r3, r0
 800317c:	71fb      	strb	r3, [r7, #7]
	eNewEvent = pEvent;
 800317e:	4a04      	ldr	r2, [pc, #16]	; (8003190 <EM_SetNewEvent+0x1c>)
 8003180:	79fb      	ldrb	r3, [r7, #7]
 8003182:	7013      	strb	r3, [r2, #0]
}
 8003184:	bf00      	nop
 8003186:	370c      	adds	r7, #12
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr
 8003190:	200013f1 	.word	0x200013f1

08003194 <_RefreshDisplay>:
 *	@param None
 *	@retval None
 *
 */
void _RefreshDisplay()
{
 8003194:	b580      	push	{r7, lr}
 8003196:	af00      	add	r7, sp, #0
	// don't let the DisplayManager interrupt the LCD refresh
	HAL_TIM_Base_Stop_IT(&htim15);
 8003198:	4804      	ldr	r0, [pc, #16]	; (80031ac <_RefreshDisplay+0x18>)
 800319a:	f006 fbb7 	bl	800990c <HAL_TIM_Base_Stop_IT>
	{
		DM_RefreshBackgroundLayout();
 800319e:	f7fe f971 	bl	8001484 <DM_RefreshBackgroundLayout>
	}
	HAL_TIM_Base_Start_IT(&htim15);
 80031a2:	4802      	ldr	r0, [pc, #8]	; (80031ac <_RefreshDisplay+0x18>)
 80031a4:	f006 fb7c 	bl	80098a0 <HAL_TIM_Base_Start_IT>
}
 80031a8:	bf00      	nop
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	200016a0 	.word	0x200016a0

080031b0 <BO_GetBiasPolarity>:
 *	@param None
 *	@retval None
 *
 */
eBias_Polarity BO_GetBiasPolarity()
{
 80031b0:	b480      	push	{r7}
 80031b2:	af00      	add	r7, sp, #0
	return eBiasPolarity;
 80031b4:	4b03      	ldr	r3, [pc, #12]	; (80031c4 <BO_GetBiasPolarity+0x14>)
 80031b6:	781b      	ldrb	r3, [r3, #0]
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr
 80031c2:	bf00      	nop
 80031c4:	20000008 	.word	0x20000008

080031c8 <BO_ModifyOutput>:
 *	@param None
 *	@retval None
 *
 */
void BO_ModifyOutput()
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	af00      	add	r7, sp, #0
	// apply negative dc bias
	if(SM_GetEncoderValue(ENCODER_REVERSE) < BIAS_CENTER) {
 80031cc:	2001      	movs	r0, #1
 80031ce:	f000 fbff 	bl	80039d0 <SM_GetEncoderValue>
 80031d2:	4603      	mov	r3, r0
 80031d4:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80031d8:	d217      	bcs.n	800320a <BO_ModifyOutput+0x42>

		eBiasPolarity = INVERSEBIAS;
 80031da:	4b1c      	ldr	r3, [pc, #112]	; (800324c <BO_ModifyOutput+0x84>)
 80031dc:	2200      	movs	r2, #0
 80031de:	701a      	strb	r2, [r3, #0]

		HAL_DAC_SetValue(	&hdac1,
							DAC1_CHANNEL_2,
							DAC_ALIGN_12B_R,
							(BIAS_CENTER - SM_GetEncoderValue(ENCODER_REVERSE)) * BIAS_MAG);
 80031e0:	2001      	movs	r0, #1
 80031e2:	f000 fbf5 	bl	80039d0 <SM_GetEncoderValue>
 80031e6:	4603      	mov	r3, r0
 80031e8:	f5c3 72c8 	rsb	r2, r3, #400	; 0x190
 80031ec:	4613      	mov	r3, r2
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	4413      	add	r3, r2
 80031f2:	005b      	lsls	r3, r3, #1
		HAL_DAC_SetValue(	&hdac1,
 80031f4:	2200      	movs	r2, #0
 80031f6:	2110      	movs	r1, #16
 80031f8:	4815      	ldr	r0, [pc, #84]	; (8003250 <BO_ModifyOutput+0x88>)
 80031fa:	f004 f8b9 	bl	8007370 <HAL_DAC_SetValue>

		HAL_GPIO_WritePin(	DCBIAS_INVERT_GPIO_Port,
 80031fe:	2201      	movs	r2, #1
 8003200:	2108      	movs	r1, #8
 8003202:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003206:	f004 ffa1 	bl	800814c <HAL_GPIO_WritePin>
							DCBIAS_INVERT_Pin,
							GPIO_PIN_SET);
	}
	// apply positive dc bias
	if(SM_GetEncoderValue(ENCODER_REVERSE) >= BIAS_CENTER) {
 800320a:	2001      	movs	r0, #1
 800320c:	f000 fbe0 	bl	80039d0 <SM_GetEncoderValue>
 8003210:	4603      	mov	r3, r0
 8003212:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8003216:	d317      	bcc.n	8003248 <BO_ModifyOutput+0x80>

		eBiasPolarity = NORMALBIAS;
 8003218:	4b0c      	ldr	r3, [pc, #48]	; (800324c <BO_ModifyOutput+0x84>)
 800321a:	2201      	movs	r2, #1
 800321c:	701a      	strb	r2, [r3, #0]

		HAL_DAC_SetValue(	&hdac1,
							DAC1_CHANNEL_2,
							DAC_ALIGN_12B_R,
							(SM_GetEncoderValue(ENCODER_REVERSE) - BIAS_CENTER) * BIAS_MAG);
 800321e:	2001      	movs	r0, #1
 8003220:	f000 fbd6 	bl	80039d0 <SM_GetEncoderValue>
 8003224:	4603      	mov	r3, r0
 8003226:	f5a3 72c8 	sub.w	r2, r3, #400	; 0x190
 800322a:	4613      	mov	r3, r2
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	4413      	add	r3, r2
 8003230:	005b      	lsls	r3, r3, #1
		HAL_DAC_SetValue(	&hdac1,
 8003232:	2200      	movs	r2, #0
 8003234:	2110      	movs	r1, #16
 8003236:	4806      	ldr	r0, [pc, #24]	; (8003250 <BO_ModifyOutput+0x88>)
 8003238:	f004 f89a 	bl	8007370 <HAL_DAC_SetValue>

		HAL_GPIO_WritePin(	DCBIAS_INVERT_GPIO_Port,
 800323c:	2200      	movs	r2, #0
 800323e:	2108      	movs	r1, #8
 8003240:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003244:	f004 ff82 	bl	800814c <HAL_GPIO_WritePin>
							DCBIAS_INVERT_Pin,
							GPIO_PIN_RESET);
	}
}
 8003248:	bf00      	nop
 800324a:	bd80      	pop	{r7, pc}
 800324c:	20000008 	.word	0x20000008
 8003250:	2000151c 	.word	0x2000151c

08003254 <BO_GetOutputBias>:
 *	@param None
 *	@retval None
 *
 */
uint32_t BO_GetOutputBias()
{
 8003254:	b580      	push	{r7, lr}
 8003256:	af00      	add	r7, sp, #0
	return HAL_DAC_GetValue(&hdac1, DAC1_CHANNEL_2);
 8003258:	2110      	movs	r1, #16
 800325a:	4803      	ldr	r0, [pc, #12]	; (8003268 <BO_GetOutputBias+0x14>)
 800325c:	f004 f8c4 	bl	80073e8 <HAL_DAC_GetValue>
 8003260:	4603      	mov	r3, r0
}
 8003262:	4618      	mov	r0, r3
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	2000151c 	.word	0x2000151c

0800326c <DT_InitRegister>:
 *	@param None
 *	@retval None
 *
 */
void DT_InitRegister()
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
	for(int i = 0; i < MAX_DAC_TIMER_SETTINGS; i++)
 8003272:	2300      	movs	r3, #0
 8003274:	607b      	str	r3, [r7, #4]
 8003276:	e06b      	b.n	8003350 <DT_InitRegister+0xe4>
	{
		// prevent divide by zero (prescaler)
		if(DacTimerReg[i].psc == 0)
 8003278:	493a      	ldr	r1, [pc, #232]	; (8003364 <DT_InitRegister+0xf8>)
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	4613      	mov	r3, r2
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	4413      	add	r3, r2
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	440b      	add	r3, r1
 8003286:	3308      	adds	r3, #8
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d129      	bne.n	80032e2 <DT_InitRegister+0x76>
			DacTimerReg[i].arr = ((SM_MCLK / DacTimerReg[i].hertz) / SM_FSAMP) * DacTimerReg[i].error;
 800328e:	4935      	ldr	r1, [pc, #212]	; (8003364 <DT_InitRegister+0xf8>)
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	4613      	mov	r3, r2
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	4413      	add	r3, r2
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	440b      	add	r3, r1
 800329c:	3304      	adds	r3, #4
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a31      	ldr	r2, [pc, #196]	; (8003368 <DT_InitRegister+0xfc>)
 80032a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80032a6:	ee07 3a90 	vmov	s15, r3
 80032aa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80032ae:	492d      	ldr	r1, [pc, #180]	; (8003364 <DT_InitRegister+0xf8>)
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	4613      	mov	r3, r2
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	4413      	add	r3, r2
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	440b      	add	r3, r1
 80032bc:	3310      	adds	r3, #16
 80032be:	edd3 7a00 	vldr	s15, [r3]
 80032c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032ca:	ee17 0a90 	vmov	r0, s15
 80032ce:	4925      	ldr	r1, [pc, #148]	; (8003364 <DT_InitRegister+0xf8>)
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	4613      	mov	r3, r2
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	4413      	add	r3, r2
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	440b      	add	r3, r1
 80032dc:	330c      	adds	r3, #12
 80032de:	6018      	str	r0, [r3, #0]
 80032e0:	e033      	b.n	800334a <DT_InitRegister+0xde>
		else
			DacTimerReg[i].arr = (((SM_MCLK / DacTimerReg[i].hertz) / DacTimerReg[i].psc) / SM_FSAMP) * DacTimerReg[i].error;
 80032e2:	4920      	ldr	r1, [pc, #128]	; (8003364 <DT_InitRegister+0xf8>)
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	4613      	mov	r3, r2
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	4413      	add	r3, r2
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	440b      	add	r3, r1
 80032f0:	3304      	adds	r3, #4
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a1c      	ldr	r2, [pc, #112]	; (8003368 <DT_InitRegister+0xfc>)
 80032f6:	fbb2 f1f3 	udiv	r1, r2, r3
 80032fa:	481a      	ldr	r0, [pc, #104]	; (8003364 <DT_InitRegister+0xf8>)
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	4613      	mov	r3, r2
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	4413      	add	r3, r2
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	4403      	add	r3, r0
 8003308:	3308      	adds	r3, #8
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003310:	ee07 3a90 	vmov	s15, r3
 8003314:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003318:	4912      	ldr	r1, [pc, #72]	; (8003364 <DT_InitRegister+0xf8>)
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	4613      	mov	r3, r2
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	4413      	add	r3, r2
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	440b      	add	r3, r1
 8003326:	3310      	adds	r3, #16
 8003328:	edd3 7a00 	vldr	s15, [r3]
 800332c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003330:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003334:	ee17 0a90 	vmov	r0, s15
 8003338:	490a      	ldr	r1, [pc, #40]	; (8003364 <DT_InitRegister+0xf8>)
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	4613      	mov	r3, r2
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	4413      	add	r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	440b      	add	r3, r1
 8003346:	330c      	adds	r3, #12
 8003348:	6018      	str	r0, [r3, #0]
	for(int i = 0; i < MAX_DAC_TIMER_SETTINGS; i++)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	3301      	adds	r3, #1
 800334e:	607b      	str	r3, [r7, #4]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2b0d      	cmp	r3, #13
 8003354:	dd90      	ble.n	8003278 <DT_InitRegister+0xc>
	}
}
 8003356:	bf00      	nop
 8003358:	370c      	adds	r7, #12
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop
 8003364:	2000000c 	.word	0x2000000c
 8003368:	00155cc0 	.word	0x00155cc0

0800336c <DT_GetRegisterByEnum>:
 *	@param pEnum Enummeration (eFreq_Preset) search criteria. Not an index
 *	@retval Pointer to the found DacTimeReg_t struct. Null if no result!
 *
 */
DacTimeReg_t* DT_GetRegisterByEnum(eFreq_Preset pEnum)
{
 800336c:	b480      	push	{r7}
 800336e:	b085      	sub	sp, #20
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < MAX_DAC_TIMER_SETTINGS; i++)
 8003374:	2300      	movs	r3, #0
 8003376:	60fb      	str	r3, [r7, #12]
 8003378:	e016      	b.n	80033a8 <DT_GetRegisterByEnum+0x3c>
		if(DacTimerReg[i].hertz == pEnum)
 800337a:	4910      	ldr	r1, [pc, #64]	; (80033bc <DT_GetRegisterByEnum+0x50>)
 800337c:	68fa      	ldr	r2, [r7, #12]
 800337e:	4613      	mov	r3, r2
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	4413      	add	r3, r2
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	440b      	add	r3, r1
 8003388:	3304      	adds	r3, #4
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	429a      	cmp	r2, r3
 8003390:	d107      	bne.n	80033a2 <DT_GetRegisterByEnum+0x36>
			return &DacTimerReg[i];
 8003392:	68fa      	ldr	r2, [r7, #12]
 8003394:	4613      	mov	r3, r2
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	4413      	add	r3, r2
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	4a07      	ldr	r2, [pc, #28]	; (80033bc <DT_GetRegisterByEnum+0x50>)
 800339e:	4413      	add	r3, r2
 80033a0:	e006      	b.n	80033b0 <DT_GetRegisterByEnum+0x44>
	for(int i = 0; i < MAX_DAC_TIMER_SETTINGS; i++)
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	3301      	adds	r3, #1
 80033a6:	60fb      	str	r3, [r7, #12]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2b0d      	cmp	r3, #13
 80033ac:	dde5      	ble.n	800337a <DT_GetRegisterByEnum+0xe>

	return 0;
 80033ae:	2300      	movs	r3, #0
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3714      	adds	r7, #20
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr
 80033bc:	2000000c 	.word	0x2000000c

080033c0 <FreqO_AdjustFreq>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_AdjustFreq()
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	af00      	add	r7, sp, #0
		//TIM8->ARR = SM_GetEncoderValue(ENCODER_FORWARD) * FREQ_ENCODER_HIFREQ_MAG;
		TIM8->ARR = SM_GetEncoderValue(ENCODER_FORWARD); //* FREQ_ENCODER_MIDFREQ_MAG;
 80033c4:	2000      	movs	r0, #0
 80033c6:	f000 fb03 	bl	80039d0 <SM_GetEncoderValue>
 80033ca:	4603      	mov	r3, r0
 80033cc:	461a      	mov	r2, r3
 80033ce:	4b02      	ldr	r3, [pc, #8]	; (80033d8 <FreqO_AdjustFreq+0x18>)
 80033d0:	62da      	str	r2, [r3, #44]	; 0x2c
		//TIM8->ARR = SM_GetEncoderValue(ENCODER_FORWARD) * FREQ_ENCODER_LOFREQ_MAG;
}
 80033d2:	bf00      	nop
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	40013400 	.word	0x40013400

080033dc <FreqO_ModifyOutput>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_ModifyOutput(uint16_t pEncValue)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	4603      	mov	r3, r0
 80033e4:	80fb      	strh	r3, [r7, #6]

	switch(pEncValue)
 80033e6:	88fb      	ldrh	r3, [r7, #6]
 80033e8:	2b38      	cmp	r3, #56	; 0x38
 80033ea:	f200 80b4 	bhi.w	8003556 <FreqO_ModifyOutput+0x17a>
 80033ee:	a201      	add	r2, pc, #4	; (adr r2, 80033f4 <FreqO_ModifyOutput+0x18>)
 80033f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033f4:	080034d9 	.word	0x080034d9
 80033f8:	080034d9 	.word	0x080034d9
 80033fc:	080034d9 	.word	0x080034d9
 8003400:	080034d9 	.word	0x080034d9
 8003404:	080034e1 	.word	0x080034e1
 8003408:	080034e1 	.word	0x080034e1
 800340c:	080034e1 	.word	0x080034e1
 8003410:	080034e1 	.word	0x080034e1
 8003414:	080034e9 	.word	0x080034e9
 8003418:	080034e9 	.word	0x080034e9
 800341c:	080034e9 	.word	0x080034e9
 8003420:	080034e9 	.word	0x080034e9
 8003424:	080034f1 	.word	0x080034f1
 8003428:	080034f1 	.word	0x080034f1
 800342c:	080034f1 	.word	0x080034f1
 8003430:	080034f1 	.word	0x080034f1
 8003434:	080034f9 	.word	0x080034f9
 8003438:	080034f9 	.word	0x080034f9
 800343c:	080034f9 	.word	0x080034f9
 8003440:	080034f9 	.word	0x080034f9
 8003444:	08003501 	.word	0x08003501
 8003448:	08003501 	.word	0x08003501
 800344c:	08003501 	.word	0x08003501
 8003450:	08003501 	.word	0x08003501
 8003454:	0800350b 	.word	0x0800350b
 8003458:	0800350b 	.word	0x0800350b
 800345c:	0800350b 	.word	0x0800350b
 8003460:	0800350b 	.word	0x0800350b
 8003464:	08003515 	.word	0x08003515
 8003468:	08003515 	.word	0x08003515
 800346c:	08003515 	.word	0x08003515
 8003470:	08003557 	.word	0x08003557
 8003474:	08003515 	.word	0x08003515
 8003478:	0800351f 	.word	0x0800351f
 800347c:	0800351f 	.word	0x0800351f
 8003480:	0800351f 	.word	0x0800351f
 8003484:	0800351f 	.word	0x0800351f
 8003488:	08003529 	.word	0x08003529
 800348c:	08003529 	.word	0x08003529
 8003490:	08003529 	.word	0x08003529
 8003494:	08003529 	.word	0x08003529
 8003498:	08003533 	.word	0x08003533
 800349c:	08003533 	.word	0x08003533
 80034a0:	08003533 	.word	0x08003533
 80034a4:	08003533 	.word	0x08003533
 80034a8:	0800353d 	.word	0x0800353d
 80034ac:	0800353d 	.word	0x0800353d
 80034b0:	0800353d 	.word	0x0800353d
 80034b4:	0800353d 	.word	0x0800353d
 80034b8:	08003547 	.word	0x08003547
 80034bc:	08003547 	.word	0x08003547
 80034c0:	08003547 	.word	0x08003547
 80034c4:	08003547 	.word	0x08003547
 80034c8:	0800354f 	.word	0x0800354f
 80034cc:	0800354f 	.word	0x0800354f
 80034d0:	0800354f 	.word	0x0800354f
 80034d4:	0800354f 	.word	0x0800354f
	{
		case 0:
		case 1:
		case 2:
		case 3:
			FreqO_ApplyPreset(FPRESET_1HZ);
 80034d8:	2001      	movs	r0, #1
 80034da:	f000 f845 	bl	8003568 <FreqO_ApplyPreset>
			break;
 80034de:	e03a      	b.n	8003556 <FreqO_ModifyOutput+0x17a>
		case 4:
		case 5:
		case 6:
		case 7:
			FreqO_ApplyPreset(FPRESET_10HZ);
 80034e0:	200a      	movs	r0, #10
 80034e2:	f000 f841 	bl	8003568 <FreqO_ApplyPreset>
			break;
 80034e6:	e036      	b.n	8003556 <FreqO_ModifyOutput+0x17a>
		case 8:
		case 9:
		case 10:
		case 11:
			FreqO_ApplyPreset(FPRESET_50HZ);
 80034e8:	2032      	movs	r0, #50	; 0x32
 80034ea:	f000 f83d 	bl	8003568 <FreqO_ApplyPreset>
			break;
 80034ee:	e032      	b.n	8003556 <FreqO_ModifyOutput+0x17a>
		case 12:
		case 13:
		case 14:
		case 15:
			FreqO_ApplyPreset(FPRESET_100HZ);
 80034f0:	2064      	movs	r0, #100	; 0x64
 80034f2:	f000 f839 	bl	8003568 <FreqO_ApplyPreset>
			break;
 80034f6:	e02e      	b.n	8003556 <FreqO_ModifyOutput+0x17a>
		case 16:
		case 17:
		case 18:
		case 19:
			FreqO_ApplyPreset(FPRESET_250HZ);
 80034f8:	20fa      	movs	r0, #250	; 0xfa
 80034fa:	f000 f835 	bl	8003568 <FreqO_ApplyPreset>
			break;
 80034fe:	e02a      	b.n	8003556 <FreqO_ModifyOutput+0x17a>
		case 20:
		case 21:
		case 22:
		case 23:
			FreqO_ApplyPreset(FPRESET_500HZ);
 8003500:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003504:	f000 f830 	bl	8003568 <FreqO_ApplyPreset>
			break;
 8003508:	e025      	b.n	8003556 <FreqO_ModifyOutput+0x17a>
		case 24:
		case 25:
		case 26:
		case 27:
			FreqO_ApplyPreset(FPRESET_750HZ);
 800350a:	f240 20ee 	movw	r0, #750	; 0x2ee
 800350e:	f000 f82b 	bl	8003568 <FreqO_ApplyPreset>
			break;
 8003512:	e020      	b.n	8003556 <FreqO_ModifyOutput+0x17a>
		case 28:
		case 29:
		case 30:
		case 32:
			FreqO_ApplyPreset(FPRESET_1KHZ);
 8003514:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003518:	f000 f826 	bl	8003568 <FreqO_ApplyPreset>
			break;
 800351c:	e01b      	b.n	8003556 <FreqO_ModifyOutput+0x17a>
		case 33:
		case 34:
		case 35:
		case 36:
			FreqO_ApplyPreset(FPRESET_5KHZ);
 800351e:	f241 3088 	movw	r0, #5000	; 0x1388
 8003522:	f000 f821 	bl	8003568 <FreqO_ApplyPreset>
			break;
 8003526:	e016      	b.n	8003556 <FreqO_ModifyOutput+0x17a>
		case 37:
		case 38:
		case 39:
		case 40:
			FreqO_ApplyPreset(FPRESET_10KHZ);
 8003528:	f242 7010 	movw	r0, #10000	; 0x2710
 800352c:	f000 f81c 	bl	8003568 <FreqO_ApplyPreset>
			break;
 8003530:	e011      	b.n	8003556 <FreqO_ModifyOutput+0x17a>
		case 41:
		case 42:
		case 43:
		case 44:
			FreqO_ApplyPreset(FPRESET_25KHZ);
 8003532:	f246 10a8 	movw	r0, #25000	; 0x61a8
 8003536:	f000 f817 	bl	8003568 <FreqO_ApplyPreset>
			break;
 800353a:	e00c      	b.n	8003556 <FreqO_ModifyOutput+0x17a>
		case 45:
		case 46:
		case 47:
		case 48:
			FreqO_ApplyPreset(FPRESET_50KHZ);
 800353c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003540:	f000 f812 	bl	8003568 <FreqO_ApplyPreset>
			break;
 8003544:	e007      	b.n	8003556 <FreqO_ModifyOutput+0x17a>
		case 49:
		case 50:
		case 51:
		case 52:
			FreqO_ApplyPreset(FPRESET_75KHZ);
 8003546:	4806      	ldr	r0, [pc, #24]	; (8003560 <FreqO_ModifyOutput+0x184>)
 8003548:	f000 f80e 	bl	8003568 <FreqO_ApplyPreset>
			break;
 800354c:	e003      	b.n	8003556 <FreqO_ModifyOutput+0x17a>
		case 53:
		case 54:
		case 55:
		case 56:
			FreqO_ApplyPreset(FPRESET_100KHZ);
 800354e:	4805      	ldr	r0, [pc, #20]	; (8003564 <FreqO_ModifyOutput+0x188>)
 8003550:	f000 f80a 	bl	8003568 <FreqO_ApplyPreset>
			break;
 8003554:	bf00      	nop
	}

}
 8003556:	bf00      	nop
 8003558:	3708      	adds	r7, #8
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	000124f8 	.word	0x000124f8
 8003564:	000186a0 	.word	0x000186a0

08003568 <FreqO_ApplyPreset>:

 *	@retval None
 *
 */
void FreqO_ApplyPreset(eFreq_Preset pPresetEnum)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
	DacTimeReg_t* tmp = DT_GetRegisterByEnum(pPresetEnum);
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f7ff fefb 	bl	800336c <DT_GetRegisterByEnum>
 8003576:	60f8      	str	r0, [r7, #12]
	if(tmp)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d011      	beq.n	80035a2 <FreqO_ApplyPreset+0x3a>
	{
		TIM8->PSC = tmp->psc;
 800357e:	4a0b      	ldr	r2, [pc, #44]	; (80035ac <FreqO_ApplyPreset+0x44>)
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	6293      	str	r3, [r2, #40]	; 0x28
		TIM8->ARR = tmp->arr;
 8003586:	4a09      	ldr	r2, [pc, #36]	; (80035ac <FreqO_ApplyPreset+0x44>)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	62d3      	str	r3, [r2, #44]	; 0x2c
		//eNewFreqPreset = pPresetEnum;
		Freq_Preset_Encoder_Pos_t * tmp = FreqO_FindFPresetObject(pPresetEnum);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f000 f81c 	bl	80035cc <FreqO_FindFPresetObject>
 8003594:	60b8      	str	r0, [r7, #8]
		if(tmp)
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d002      	beq.n	80035a2 <FreqO_ApplyPreset+0x3a>
		{
			pNewFreqPresetEncoderPos = tmp;
 800359c:	4a04      	ldr	r2, [pc, #16]	; (80035b0 <FreqO_ApplyPreset+0x48>)
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	6013      	str	r3, [r2, #0]
		}

	}
}
 80035a2:	bf00      	nop
 80035a4:	3710      	adds	r7, #16
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	40013400 	.word	0x40013400
 80035b0:	20000198 	.word	0x20000198

080035b4 <FreqO_GetFPresetObject>:
 *	@param None
 *	@retval pointer to Freq_Preset_Encoder_Pos_t struct
 *
 */
Freq_Preset_Encoder_Pos_t * FreqO_GetFPresetObject()
{
 80035b4:	b480      	push	{r7}
 80035b6:	af00      	add	r7, sp, #0
	return pNewFreqPresetEncoderPos;
 80035b8:	4b03      	ldr	r3, [pc, #12]	; (80035c8 <FreqO_GetFPresetObject+0x14>)
 80035ba:	681b      	ldr	r3, [r3, #0]
}
 80035bc:	4618      	mov	r0, r3
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr
 80035c6:	bf00      	nop
 80035c8:	20000198 	.word	0x20000198

080035cc <FreqO_FindFPresetObject>:

 *	@retval pointer to Freq_Preset_Encoder_Pos_t struct
 *
 */
Freq_Preset_Encoder_Pos_t * FreqO_FindFPresetObject(eFreq_Preset pEnum)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b085      	sub	sp, #20
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < MAX_NUM_FPRESETS; i++ )
 80035d4:	2300      	movs	r3, #0
 80035d6:	60fb      	str	r3, [r7, #12]
 80035d8:	e00e      	b.n	80035f8 <FreqO_FindFPresetObject+0x2c>
	{
		if(aFreqPresetEncoderPos[i].hertz == pEnum)
 80035da:	4a0c      	ldr	r2, [pc, #48]	; (800360c <FreqO_FindFPresetObject+0x40>)
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d104      	bne.n	80035f2 <FreqO_FindFPresetObject+0x26>
		{
			return &aFreqPresetEncoderPos[i];
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	00db      	lsls	r3, r3, #3
 80035ec:	4a07      	ldr	r2, [pc, #28]	; (800360c <FreqO_FindFPresetObject+0x40>)
 80035ee:	4413      	add	r3, r2
 80035f0:	e006      	b.n	8003600 <FreqO_FindFPresetObject+0x34>
	for(int i = 0; i < MAX_NUM_FPRESETS; i++ )
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	3301      	adds	r3, #1
 80035f6:	60fb      	str	r3, [r7, #12]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2b0d      	cmp	r3, #13
 80035fc:	dded      	ble.n	80035da <FreqO_FindFPresetObject+0xe>
		}
	}
	// error!
	return 0;
 80035fe:	2300      	movs	r3, #0
}
 8003600:	4618      	mov	r0, r3
 8003602:	3714      	adds	r7, #20
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr
 800360c:	20000128 	.word	0x20000128

08003610 <FreqO_GetFreqPresetEncoderRange>:
 *	@param None
 *	@retval uint8_t
 *
 */
uint8_t FreqO_GetFreqPresetEncoderRange()
{
 8003610:	b480      	push	{r7}
 8003612:	af00      	add	r7, sp, #0
	return FreqPresetEncoderRange;
 8003614:	4b03      	ldr	r3, [pc, #12]	; (8003624 <FreqO_GetFreqPresetEncoderRange+0x14>)
 8003616:	781b      	ldrb	r3, [r3, #0]
}
 8003618:	4618      	mov	r0, r3
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr
 8003622:	bf00      	nop
 8003624:	20000124 	.word	0x20000124

08003628 <FreqO_GetOutputFreq>:
 *	@param None
 *	@retval uint32_t
 *
 */
uint32_t FreqO_GetOutputFreq()
{
 8003628:	b480      	push	{r7}
 800362a:	af00      	add	r7, sp, #0
	return TIM8->ARR;
 800362c:	4b03      	ldr	r3, [pc, #12]	; (800363c <FreqO_GetOutputFreq+0x14>)
 800362e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 8003630:	4618      	mov	r0, r3
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr
 800363a:	bf00      	nop
 800363c:	40013400 	.word	0x40013400

08003640 <FuncO_ModifyOutput>:
 *	@param None
 *	@retval None
 *
 */
void FuncO_ModifyOutput()
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b082      	sub	sp, #8
 8003644:	af02      	add	r7, sp, #8


	switch(SM_GetEncoderValue(ENCODER_REVERSE))
 8003646:	2001      	movs	r0, #1
 8003648:	f000 f9c2 	bl	80039d0 <SM_GetEncoderValue>
 800364c:	4603      	mov	r3, r0
 800364e:	2b17      	cmp	r3, #23
 8003650:	f200 8094 	bhi.w	800377c <FuncO_ModifyOutput+0x13c>
 8003654:	a201      	add	r2, pc, #4	; (adr r2, 800365c <FuncO_ModifyOutput+0x1c>)
 8003656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800365a:	bf00      	nop
 800365c:	080036bd 	.word	0x080036bd
 8003660:	080036bd 	.word	0x080036bd
 8003664:	080036bd 	.word	0x080036bd
 8003668:	080036dd 	.word	0x080036dd
 800366c:	080036dd 	.word	0x080036dd
 8003670:	080036dd 	.word	0x080036dd
 8003674:	080036dd 	.word	0x080036dd
 8003678:	080036fd 	.word	0x080036fd
 800367c:	080036fd 	.word	0x080036fd
 8003680:	080036fd 	.word	0x080036fd
 8003684:	080036fd 	.word	0x080036fd
 8003688:	0800371d 	.word	0x0800371d
 800368c:	0800371d 	.word	0x0800371d
 8003690:	0800371d 	.word	0x0800371d
 8003694:	0800371d 	.word	0x0800371d
 8003698:	0800373d 	.word	0x0800373d
 800369c:	0800373d 	.word	0x0800373d
 80036a0:	0800373d 	.word	0x0800373d
 80036a4:	0800373d 	.word	0x0800373d
 80036a8:	0800375d 	.word	0x0800375d
 80036ac:	0800375d 	.word	0x0800375d
 80036b0:	0800375d 	.word	0x0800375d
 80036b4:	0800375d 	.word	0x0800375d
 80036b8:	0800375d 	.word	0x0800375d
	{
		case 0:
		case 1:
		case 2:

			eNewOutMode = Sine_Out_Mode;
 80036bc:	4b31      	ldr	r3, [pc, #196]	; (8003784 <FuncO_ModifyOutput+0x144>)
 80036be:	2200      	movs	r2, #0
 80036c0:	701a      	strb	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 80036c2:	2100      	movs	r1, #0
 80036c4:	4830      	ldr	r0, [pc, #192]	; (8003788 <FuncO_ModifyOutput+0x148>)
 80036c6:	f003 fdfd 	bl	80072c4 <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, sine_data_table, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 80036ca:	2300      	movs	r3, #0
 80036cc:	9300      	str	r3, [sp, #0]
 80036ce:	2378      	movs	r3, #120	; 0x78
 80036d0:	4a2e      	ldr	r2, [pc, #184]	; (800378c <FuncO_ModifyOutput+0x14c>)
 80036d2:	2100      	movs	r1, #0
 80036d4:	482c      	ldr	r0, [pc, #176]	; (8003788 <FuncO_ModifyOutput+0x148>)
 80036d6:	f003 fd33 	bl	8007140 <HAL_DAC_Start_DMA>
			break;
 80036da:	e04f      	b.n	800377c <FuncO_ModifyOutput+0x13c>
		case 3:
		case 4:
		case 5:
		case 6:

			eNewOutMode = Square_Out_Mode;
 80036dc:	4b29      	ldr	r3, [pc, #164]	; (8003784 <FuncO_ModifyOutput+0x144>)
 80036de:	2201      	movs	r2, #1
 80036e0:	701a      	strb	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 80036e2:	2100      	movs	r1, #0
 80036e4:	4828      	ldr	r0, [pc, #160]	; (8003788 <FuncO_ModifyOutput+0x148>)
 80036e6:	f003 fded 	bl	80072c4 <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, square_data_table, SQUARE_DATA_SIZE, DAC_ALIGN_12B_R);
 80036ea:	2300      	movs	r3, #0
 80036ec:	9300      	str	r3, [sp, #0]
 80036ee:	2378      	movs	r3, #120	; 0x78
 80036f0:	4a27      	ldr	r2, [pc, #156]	; (8003790 <FuncO_ModifyOutput+0x150>)
 80036f2:	2100      	movs	r1, #0
 80036f4:	4824      	ldr	r0, [pc, #144]	; (8003788 <FuncO_ModifyOutput+0x148>)
 80036f6:	f003 fd23 	bl	8007140 <HAL_DAC_Start_DMA>

			break;
 80036fa:	e03f      	b.n	800377c <FuncO_ModifyOutput+0x13c>
		case 7:
		case 8:
		case 9:
		case 10:

			eNewOutMode = Saw_Out_Mode;
 80036fc:	4b21      	ldr	r3, [pc, #132]	; (8003784 <FuncO_ModifyOutput+0x144>)
 80036fe:	2202      	movs	r2, #2
 8003700:	701a      	strb	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8003702:	2100      	movs	r1, #0
 8003704:	4820      	ldr	r0, [pc, #128]	; (8003788 <FuncO_ModifyOutput+0x148>)
 8003706:	f003 fddd 	bl	80072c4 <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, saw_data_table, SAW_DATA_SIZE, DAC_ALIGN_12B_R);
 800370a:	2300      	movs	r3, #0
 800370c:	9300      	str	r3, [sp, #0]
 800370e:	2378      	movs	r3, #120	; 0x78
 8003710:	4a20      	ldr	r2, [pc, #128]	; (8003794 <FuncO_ModifyOutput+0x154>)
 8003712:	2100      	movs	r1, #0
 8003714:	481c      	ldr	r0, [pc, #112]	; (8003788 <FuncO_ModifyOutput+0x148>)
 8003716:	f003 fd13 	bl	8007140 <HAL_DAC_Start_DMA>
			break;
 800371a:	e02f      	b.n	800377c <FuncO_ModifyOutput+0x13c>
		case 11:
		case 12:
		case 13:
		case 14:

			eNewOutMode = RevSaw_Out_Mode;
 800371c:	4b19      	ldr	r3, [pc, #100]	; (8003784 <FuncO_ModifyOutput+0x144>)
 800371e:	2203      	movs	r2, #3
 8003720:	701a      	strb	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8003722:	2100      	movs	r1, #0
 8003724:	4818      	ldr	r0, [pc, #96]	; (8003788 <FuncO_ModifyOutput+0x148>)
 8003726:	f003 fdcd 	bl	80072c4 <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, saw_rev_data_table, SAW_REV_DATA_SIZE, DAC_ALIGN_12B_R);
 800372a:	2300      	movs	r3, #0
 800372c:	9300      	str	r3, [sp, #0]
 800372e:	2378      	movs	r3, #120	; 0x78
 8003730:	4a19      	ldr	r2, [pc, #100]	; (8003798 <FuncO_ModifyOutput+0x158>)
 8003732:	2100      	movs	r1, #0
 8003734:	4814      	ldr	r0, [pc, #80]	; (8003788 <FuncO_ModifyOutput+0x148>)
 8003736:	f003 fd03 	bl	8007140 <HAL_DAC_Start_DMA>
			break;
 800373a:	e01f      	b.n	800377c <FuncO_ModifyOutput+0x13c>
		case 15:
		case 16:
		case 17:
		case 18:

			eNewOutMode = Triangle_Out_Mode;
 800373c:	4b11      	ldr	r3, [pc, #68]	; (8003784 <FuncO_ModifyOutput+0x144>)
 800373e:	2204      	movs	r2, #4
 8003740:	701a      	strb	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8003742:	2100      	movs	r1, #0
 8003744:	4810      	ldr	r0, [pc, #64]	; (8003788 <FuncO_ModifyOutput+0x148>)
 8003746:	f003 fdbd 	bl	80072c4 <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, triangle_data_table, TRIANGLE_DATA_SIZE, DAC_ALIGN_12B_R);
 800374a:	2300      	movs	r3, #0
 800374c:	9300      	str	r3, [sp, #0]
 800374e:	2378      	movs	r3, #120	; 0x78
 8003750:	4a12      	ldr	r2, [pc, #72]	; (800379c <FuncO_ModifyOutput+0x15c>)
 8003752:	2100      	movs	r1, #0
 8003754:	480c      	ldr	r0, [pc, #48]	; (8003788 <FuncO_ModifyOutput+0x148>)
 8003756:	f003 fcf3 	bl	8007140 <HAL_DAC_Start_DMA>
			break;
 800375a:	e00f      	b.n	800377c <FuncO_ModifyOutput+0x13c>
		case 20:
		case 21:
		case 22:
		case 23:

			eNewOutMode = Impulse_Out_Mode;
 800375c:	4b09      	ldr	r3, [pc, #36]	; (8003784 <FuncO_ModifyOutput+0x144>)
 800375e:	2205      	movs	r2, #5
 8003760:	701a      	strb	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8003762:	2100      	movs	r1, #0
 8003764:	4808      	ldr	r0, [pc, #32]	; (8003788 <FuncO_ModifyOutput+0x148>)
 8003766:	f003 fdad 	bl	80072c4 <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, unitimpulse_data_table, UNITIMPULSE_DATA_SIZE, DAC_ALIGN_12B_R);
 800376a:	2300      	movs	r3, #0
 800376c:	9300      	str	r3, [sp, #0]
 800376e:	2378      	movs	r3, #120	; 0x78
 8003770:	4a0b      	ldr	r2, [pc, #44]	; (80037a0 <FuncO_ModifyOutput+0x160>)
 8003772:	2100      	movs	r1, #0
 8003774:	4804      	ldr	r0, [pc, #16]	; (8003788 <FuncO_ModifyOutput+0x148>)
 8003776:	f003 fce3 	bl	8007140 <HAL_DAC_Start_DMA>
			break;
 800377a:	bf00      	nop
	}
}
 800377c:	bf00      	nop
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	200013f2 	.word	0x200013f2
 8003788:	2000151c 	.word	0x2000151c
 800378c:	20000a80 	.word	0x20000a80
 8003790:	20000c60 	.word	0x20000c60
 8003794:	200006c0 	.word	0x200006c0
 8003798:	200008a0 	.word	0x200008a0
 800379c:	20000e40 	.word	0x20000e40
 80037a0:	20001020 	.word	0x20001020

080037a4 <FuncO_GetOutputMode>:
 *	@param None
 *	@retval None
 *
 */
eOutput_mode FuncO_GetOutputMode()
{
 80037a4:	b480      	push	{r7}
 80037a6:	af00      	add	r7, sp, #0
	return eNewOutMode;
 80037a8:	4b03      	ldr	r3, [pc, #12]	; (80037b8 <FuncO_GetOutputMode+0x14>)
 80037aa:	781b      	ldrb	r3, [r3, #0]
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop
 80037b8:	200013f2 	.word	0x200013f2

080037bc <GO_GetGainInDecibels>:
 *	@param None
 *	@retval None
 *
 */
int8_t GO_GetGainInDecibels(eOutput_gain pGain)
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	4603      	mov	r3, r0
 80037c4:	71fb      	strb	r3, [r7, #7]
	return gain_decibels[pGain];
 80037c6:	79fb      	ldrb	r3, [r7, #7]
 80037c8:	4a03      	ldr	r2, [pc, #12]	; (80037d8 <GO_GetGainInDecibels+0x1c>)
 80037ca:	56d3      	ldrsb	r3, [r2, r3]
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr
 80037d8:	2000019c 	.word	0x2000019c

080037dc <GO_SetOutputToEncoder>:
 *	@param None
 *	@retval None
 *
 */
void GO_SetOutputToEncoder(uint8_t pGain)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	4603      	mov	r3, r0
 80037e4:	71fb      	strb	r3, [r7, #7]

	// PGA Truth table for LTC6910:
	// https://www.analog.com/media/en/technical-documentation/data-sheets/6910fb.pdf
	switch(pGain)
 80037e6:	79fb      	ldrb	r3, [r7, #7]
 80037e8:	2b1f      	cmp	r3, #31
 80037ea:	f200 80db 	bhi.w	80039a4 <GO_SetOutputToEncoder+0x1c8>
 80037ee:	a201      	add	r2, pc, #4	; (adr r2, 80037f4 <GO_SetOutputToEncoder+0x18>)
 80037f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037f4:	08003875 	.word	0x08003875
 80037f8:	08003875 	.word	0x08003875
 80037fc:	08003875 	.word	0x08003875
 8003800:	08003875 	.word	0x08003875
 8003804:	0800389b 	.word	0x0800389b
 8003808:	0800389b 	.word	0x0800389b
 800380c:	0800389b 	.word	0x0800389b
 8003810:	0800389b 	.word	0x0800389b
 8003814:	080038c1 	.word	0x080038c1
 8003818:	080038c1 	.word	0x080038c1
 800381c:	080038c1 	.word	0x080038c1
 8003820:	080038c1 	.word	0x080038c1
 8003824:	080038e7 	.word	0x080038e7
 8003828:	080038e7 	.word	0x080038e7
 800382c:	080038e7 	.word	0x080038e7
 8003830:	080038e7 	.word	0x080038e7
 8003834:	0800390d 	.word	0x0800390d
 8003838:	0800390d 	.word	0x0800390d
 800383c:	0800390d 	.word	0x0800390d
 8003840:	0800390d 	.word	0x0800390d
 8003844:	08003933 	.word	0x08003933
 8003848:	08003933 	.word	0x08003933
 800384c:	08003933 	.word	0x08003933
 8003850:	08003933 	.word	0x08003933
 8003854:	08003959 	.word	0x08003959
 8003858:	08003959 	.word	0x08003959
 800385c:	08003959 	.word	0x08003959
 8003860:	08003959 	.word	0x08003959
 8003864:	0800397f 	.word	0x0800397f
 8003868:	0800397f 	.word	0x0800397f
 800386c:	0800397f 	.word	0x0800397f
 8003870:	0800397f 	.word	0x0800397f
	{
		case 0:
		case 1:
		case 2:
		case 3:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8003874:	2200      	movs	r2, #0
 8003876:	2101      	movs	r1, #1
 8003878:	484c      	ldr	r0, [pc, #304]	; (80039ac <GO_SetOutputToEncoder+0x1d0>)
 800387a:	f004 fc67 	bl	800814c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 800387e:	2200      	movs	r2, #0
 8003880:	2120      	movs	r1, #32
 8003882:	484b      	ldr	r0, [pc, #300]	; (80039b0 <GO_SetOutputToEncoder+0x1d4>)
 8003884:	f004 fc62 	bl	800814c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8003888:	2200      	movs	r2, #0
 800388a:	2110      	movs	r1, #16
 800388c:	4848      	ldr	r0, [pc, #288]	; (80039b0 <GO_SetOutputToEncoder+0x1d4>)
 800388e:	f004 fc5d 	bl	800814c <HAL_GPIO_WritePin>
			eNewOutGain = Zero_Gain;
 8003892:	4b48      	ldr	r3, [pc, #288]	; (80039b4 <GO_SetOutputToEncoder+0x1d8>)
 8003894:	2200      	movs	r2, #0
 8003896:	701a      	strb	r2, [r3, #0]
			break;
 8003898:	e084      	b.n	80039a4 <GO_SetOutputToEncoder+0x1c8>
		case 4:
		case 5:
		case 6:
		case 7:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 800389a:	2201      	movs	r2, #1
 800389c:	2101      	movs	r1, #1
 800389e:	4843      	ldr	r0, [pc, #268]	; (80039ac <GO_SetOutputToEncoder+0x1d0>)
 80038a0:	f004 fc54 	bl	800814c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 80038a4:	2200      	movs	r2, #0
 80038a6:	2120      	movs	r1, #32
 80038a8:	4841      	ldr	r0, [pc, #260]	; (80039b0 <GO_SetOutputToEncoder+0x1d4>)
 80038aa:	f004 fc4f 	bl	800814c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 80038ae:	2200      	movs	r2, #0
 80038b0:	2110      	movs	r1, #16
 80038b2:	483f      	ldr	r0, [pc, #252]	; (80039b0 <GO_SetOutputToEncoder+0x1d4>)
 80038b4:	f004 fc4a 	bl	800814c <HAL_GPIO_WritePin>
			eNewOutGain = One_Gain;
 80038b8:	4b3e      	ldr	r3, [pc, #248]	; (80039b4 <GO_SetOutputToEncoder+0x1d8>)
 80038ba:	2201      	movs	r2, #1
 80038bc:	701a      	strb	r2, [r3, #0]
			break;
 80038be:	e071      	b.n	80039a4 <GO_SetOutputToEncoder+0x1c8>
		case 8:
		case 9:
		case 10:
		case 11:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 80038c0:	2200      	movs	r2, #0
 80038c2:	2101      	movs	r1, #1
 80038c4:	4839      	ldr	r0, [pc, #228]	; (80039ac <GO_SetOutputToEncoder+0x1d0>)
 80038c6:	f004 fc41 	bl	800814c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 80038ca:	2201      	movs	r2, #1
 80038cc:	2120      	movs	r1, #32
 80038ce:	4838      	ldr	r0, [pc, #224]	; (80039b0 <GO_SetOutputToEncoder+0x1d4>)
 80038d0:	f004 fc3c 	bl	800814c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 80038d4:	2200      	movs	r2, #0
 80038d6:	2110      	movs	r1, #16
 80038d8:	4835      	ldr	r0, [pc, #212]	; (80039b0 <GO_SetOutputToEncoder+0x1d4>)
 80038da:	f004 fc37 	bl	800814c <HAL_GPIO_WritePin>
			eNewOutGain = Two_Gain;
 80038de:	4b35      	ldr	r3, [pc, #212]	; (80039b4 <GO_SetOutputToEncoder+0x1d8>)
 80038e0:	2202      	movs	r2, #2
 80038e2:	701a      	strb	r2, [r3, #0]
			break;
 80038e4:	e05e      	b.n	80039a4 <GO_SetOutputToEncoder+0x1c8>
		case 12:
		case 13:
		case 14:
		case 15:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 80038e6:	2201      	movs	r2, #1
 80038e8:	2101      	movs	r1, #1
 80038ea:	4830      	ldr	r0, [pc, #192]	; (80039ac <GO_SetOutputToEncoder+0x1d0>)
 80038ec:	f004 fc2e 	bl	800814c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 80038f0:	2201      	movs	r2, #1
 80038f2:	2120      	movs	r1, #32
 80038f4:	482e      	ldr	r0, [pc, #184]	; (80039b0 <GO_SetOutputToEncoder+0x1d4>)
 80038f6:	f004 fc29 	bl	800814c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 80038fa:	2200      	movs	r2, #0
 80038fc:	2110      	movs	r1, #16
 80038fe:	482c      	ldr	r0, [pc, #176]	; (80039b0 <GO_SetOutputToEncoder+0x1d4>)
 8003900:	f004 fc24 	bl	800814c <HAL_GPIO_WritePin>
			eNewOutGain = Three_Gain;
 8003904:	4b2b      	ldr	r3, [pc, #172]	; (80039b4 <GO_SetOutputToEncoder+0x1d8>)
 8003906:	2203      	movs	r2, #3
 8003908:	701a      	strb	r2, [r3, #0]
			break;
 800390a:	e04b      	b.n	80039a4 <GO_SetOutputToEncoder+0x1c8>
		case 16:
		case 17:
		case 18:
		case 19:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 800390c:	2200      	movs	r2, #0
 800390e:	2101      	movs	r1, #1
 8003910:	4826      	ldr	r0, [pc, #152]	; (80039ac <GO_SetOutputToEncoder+0x1d0>)
 8003912:	f004 fc1b 	bl	800814c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8003916:	2200      	movs	r2, #0
 8003918:	2120      	movs	r1, #32
 800391a:	4825      	ldr	r0, [pc, #148]	; (80039b0 <GO_SetOutputToEncoder+0x1d4>)
 800391c:	f004 fc16 	bl	800814c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8003920:	2201      	movs	r2, #1
 8003922:	2110      	movs	r1, #16
 8003924:	4822      	ldr	r0, [pc, #136]	; (80039b0 <GO_SetOutputToEncoder+0x1d4>)
 8003926:	f004 fc11 	bl	800814c <HAL_GPIO_WritePin>
			eNewOutGain = Four_Gain;
 800392a:	4b22      	ldr	r3, [pc, #136]	; (80039b4 <GO_SetOutputToEncoder+0x1d8>)
 800392c:	2204      	movs	r2, #4
 800392e:	701a      	strb	r2, [r3, #0]
			break;
 8003930:	e038      	b.n	80039a4 <GO_SetOutputToEncoder+0x1c8>
		case 20:
		case 21:
		case 22:
		case 23:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8003932:	2201      	movs	r2, #1
 8003934:	2101      	movs	r1, #1
 8003936:	481d      	ldr	r0, [pc, #116]	; (80039ac <GO_SetOutputToEncoder+0x1d0>)
 8003938:	f004 fc08 	bl	800814c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 800393c:	2200      	movs	r2, #0
 800393e:	2120      	movs	r1, #32
 8003940:	481b      	ldr	r0, [pc, #108]	; (80039b0 <GO_SetOutputToEncoder+0x1d4>)
 8003942:	f004 fc03 	bl	800814c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8003946:	2201      	movs	r2, #1
 8003948:	2110      	movs	r1, #16
 800394a:	4819      	ldr	r0, [pc, #100]	; (80039b0 <GO_SetOutputToEncoder+0x1d4>)
 800394c:	f004 fbfe 	bl	800814c <HAL_GPIO_WritePin>
			eNewOutGain = Five_Gain;
 8003950:	4b18      	ldr	r3, [pc, #96]	; (80039b4 <GO_SetOutputToEncoder+0x1d8>)
 8003952:	2205      	movs	r2, #5
 8003954:	701a      	strb	r2, [r3, #0]
			break;
 8003956:	e025      	b.n	80039a4 <GO_SetOutputToEncoder+0x1c8>
		case 24:
		case 25:
		case 26:
		case 27:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8003958:	2200      	movs	r2, #0
 800395a:	2101      	movs	r1, #1
 800395c:	4813      	ldr	r0, [pc, #76]	; (80039ac <GO_SetOutputToEncoder+0x1d0>)
 800395e:	f004 fbf5 	bl	800814c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8003962:	2201      	movs	r2, #1
 8003964:	2120      	movs	r1, #32
 8003966:	4812      	ldr	r0, [pc, #72]	; (80039b0 <GO_SetOutputToEncoder+0x1d4>)
 8003968:	f004 fbf0 	bl	800814c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 800396c:	2201      	movs	r2, #1
 800396e:	2110      	movs	r1, #16
 8003970:	480f      	ldr	r0, [pc, #60]	; (80039b0 <GO_SetOutputToEncoder+0x1d4>)
 8003972:	f004 fbeb 	bl	800814c <HAL_GPIO_WritePin>
			eNewOutGain = Six_Gain;
 8003976:	4b0f      	ldr	r3, [pc, #60]	; (80039b4 <GO_SetOutputToEncoder+0x1d8>)
 8003978:	2206      	movs	r2, #6
 800397a:	701a      	strb	r2, [r3, #0]
			break;
 800397c:	e012      	b.n	80039a4 <GO_SetOutputToEncoder+0x1c8>
		case 28:
		case 29:
		case 30:
		case 31:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 800397e:	2201      	movs	r2, #1
 8003980:	2101      	movs	r1, #1
 8003982:	480a      	ldr	r0, [pc, #40]	; (80039ac <GO_SetOutputToEncoder+0x1d0>)
 8003984:	f004 fbe2 	bl	800814c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8003988:	2201      	movs	r2, #1
 800398a:	2120      	movs	r1, #32
 800398c:	4808      	ldr	r0, [pc, #32]	; (80039b0 <GO_SetOutputToEncoder+0x1d4>)
 800398e:	f004 fbdd 	bl	800814c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8003992:	2201      	movs	r2, #1
 8003994:	2110      	movs	r1, #16
 8003996:	4806      	ldr	r0, [pc, #24]	; (80039b0 <GO_SetOutputToEncoder+0x1d4>)
 8003998:	f004 fbd8 	bl	800814c <HAL_GPIO_WritePin>
			eNewOutGain = Seven_Gain;
 800399c:	4b05      	ldr	r3, [pc, #20]	; (80039b4 <GO_SetOutputToEncoder+0x1d8>)
 800399e:	2207      	movs	r2, #7
 80039a0:	701a      	strb	r2, [r3, #0]
			break;
 80039a2:	bf00      	nop
	}

}
 80039a4:	bf00      	nop
 80039a6:	3708      	adds	r7, #8
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	48000400 	.word	0x48000400
 80039b0:	48000800 	.word	0x48000800
 80039b4:	200001a4 	.word	0x200001a4

080039b8 <GO_GetOutputGain>:
 *	@param None
 *	@retval None
 *
 */
uint8_t GO_GetOutputGain()
{
 80039b8:	b480      	push	{r7}
 80039ba:	af00      	add	r7, sp, #0
	return (uint8_t)eNewOutGain;
 80039bc:	4b03      	ldr	r3, [pc, #12]	; (80039cc <GO_GetOutputGain+0x14>)
 80039be:	781b      	ldrb	r3, [r3, #0]
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr
 80039ca:	bf00      	nop
 80039cc:	200001a4 	.word	0x200001a4

080039d0 <SM_GetEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
uint16_t SM_GetEncoderValue(eEncoder_Direction direction)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	4603      	mov	r3, r0
 80039d8:	71fb      	strb	r3, [r7, #7]
	if(direction)
 80039da:	79fb      	ldrb	r3, [r7, #7]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d008      	beq.n	80039f2 <SM_GetEncoderValue+0x22>
	{
		return ENCODER_TIMER->ARR - ENCODER_TIMER->CNT;
 80039e0:	4b08      	ldr	r3, [pc, #32]	; (8003a04 <SM_GetEncoderValue+0x34>)
 80039e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e4:	b29a      	uxth	r2, r3
 80039e6:	4b07      	ldr	r3, [pc, #28]	; (8003a04 <SM_GetEncoderValue+0x34>)
 80039e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	e002      	b.n	80039f8 <SM_GetEncoderValue+0x28>
	}
	else
	{
		return ENCODER_TIMER->CNT;
 80039f2:	4b04      	ldr	r3, [pc, #16]	; (8003a04 <SM_GetEncoderValue+0x34>)
 80039f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f6:	b29b      	uxth	r3, r3
	}
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	370c      	adds	r7, #12
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr
 8003a04:	40012c00 	.word	0x40012c00

08003a08 <SM_GetOutputInHertz>:
 *	@param None
 *	@retval None
 *
 */
float SM_GetOutputInHertz()
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b085      	sub	sp, #20
 8003a0c:	af00      	add	r7, sp, #0
	volatile float tim8_psc;
	volatile float tim8_arr;

	// safe-guard against divide by zero
	(TIM8->PSC == 0) ? (tim8_psc = 1) : (tim8_psc = TIM8->PSC);
 8003a0e:	4b1d      	ldr	r3, [pc, #116]	; (8003a84 <SM_GetOutputInHertz+0x7c>)
 8003a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d103      	bne.n	8003a1e <SM_GetOutputInHertz+0x16>
 8003a16:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003a1a:	60bb      	str	r3, [r7, #8]
 8003a1c:	e007      	b.n	8003a2e <SM_GetOutputInHertz+0x26>
 8003a1e:	4b19      	ldr	r3, [pc, #100]	; (8003a84 <SM_GetOutputInHertz+0x7c>)
 8003a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a22:	ee07 3a90 	vmov	s15, r3
 8003a26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a2a:	edc7 7a02 	vstr	s15, [r7, #8]
	(TIM8->ARR == 0) ? (tim8_arr = 1) : (tim8_arr = TIM8->ARR);
 8003a2e:	4b15      	ldr	r3, [pc, #84]	; (8003a84 <SM_GetOutputInHertz+0x7c>)
 8003a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d103      	bne.n	8003a3e <SM_GetOutputInHertz+0x36>
 8003a36:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003a3a:	607b      	str	r3, [r7, #4]
 8003a3c:	e007      	b.n	8003a4e <SM_GetOutputInHertz+0x46>
 8003a3e:	4b11      	ldr	r3, [pc, #68]	; (8003a84 <SM_GetOutputInHertz+0x7c>)
 8003a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a42:	ee07 3a90 	vmov	s15, r3
 8003a46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a4a:	edc7 7a01 	vstr	s15, [r7, #4]

	float tim8_freq = SM_MCLK / (tim8_psc * tim8_arr);
 8003a4e:	ed97 7a02 	vldr	s14, [r7, #8]
 8003a52:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a56:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a5a:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8003a88 <SM_GetOutputInHertz+0x80>
 8003a5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a62:	edc7 7a03 	vstr	s15, [r7, #12]


	return tim8_freq / SM_FSAMP;
 8003a66:	edd7 7a03 	vldr	s15, [r7, #12]
 8003a6a:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8003a8c <SM_GetOutputInHertz+0x84>
 8003a6e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003a72:	eef0 7a66 	vmov.f32	s15, s13
}
 8003a76:	eeb0 0a67 	vmov.f32	s0, s15
 8003a7a:	3714      	adds	r7, #20
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr
 8003a84:	40013400 	.word	0x40013400
 8003a88:	4d2037a0 	.word	0x4d2037a0
 8003a8c:	42f00000 	.word	0x42f00000

08003a90 <SM_GetDefaultFreqPreset>:

eFreq_Preset SM_GetDefaultFreqPreset()
{
 8003a90:	b480      	push	{r7}
 8003a92:	af00      	add	r7, sp, #0
	return eDefaultFreqPreset;
 8003a94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr
	...

08003aa4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b08c      	sub	sp, #48	; 0x30
 8003aa8:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 8003aaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003aae:	2200      	movs	r2, #0
 8003ab0:	601a      	str	r2, [r3, #0]
 8003ab2:	605a      	str	r2, [r3, #4]
 8003ab4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8003ab6:	1d3b      	adds	r3, r7, #4
 8003ab8:	2220      	movs	r2, #32
 8003aba:	2100      	movs	r1, #0
 8003abc:	4618      	mov	r0, r3
 8003abe:	f008 f991 	bl	800bde4 <memset>

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8003ac2:	4b32      	ldr	r3, [pc, #200]	; (8003b8c <MX_ADC1_Init+0xe8>)
 8003ac4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8003ac8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003aca:	4b30      	ldr	r3, [pc, #192]	; (8003b8c <MX_ADC1_Init+0xe8>)
 8003acc:	2200      	movs	r2, #0
 8003ace:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003ad0:	4b2e      	ldr	r3, [pc, #184]	; (8003b8c <MX_ADC1_Init+0xe8>)
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003ad6:	4b2d      	ldr	r3, [pc, #180]	; (8003b8c <MX_ADC1_Init+0xe8>)
 8003ad8:	2200      	movs	r2, #0
 8003ada:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8003adc:	4b2b      	ldr	r3, [pc, #172]	; (8003b8c <MX_ADC1_Init+0xe8>)
 8003ade:	2200      	movs	r2, #0
 8003ae0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003ae2:	4b2a      	ldr	r3, [pc, #168]	; (8003b8c <MX_ADC1_Init+0xe8>)
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003ae8:	4b28      	ldr	r3, [pc, #160]	; (8003b8c <MX_ADC1_Init+0xe8>)
 8003aea:	2204      	movs	r2, #4
 8003aec:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003aee:	4b27      	ldr	r3, [pc, #156]	; (8003b8c <MX_ADC1_Init+0xe8>)
 8003af0:	2200      	movs	r2, #0
 8003af2:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003af4:	4b25      	ldr	r3, [pc, #148]	; (8003b8c <MX_ADC1_Init+0xe8>)
 8003af6:	2201      	movs	r2, #1
 8003af8:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8003afa:	4b24      	ldr	r3, [pc, #144]	; (8003b8c <MX_ADC1_Init+0xe8>)
 8003afc:	2201      	movs	r2, #1
 8003afe:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003b00:	4b22      	ldr	r3, [pc, #136]	; (8003b8c <MX_ADC1_Init+0xe8>)
 8003b02:	2200      	movs	r2, #0
 8003b04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003b08:	4b20      	ldr	r3, [pc, #128]	; (8003b8c <MX_ADC1_Init+0xe8>)
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003b0e:	4b1f      	ldr	r3, [pc, #124]	; (8003b8c <MX_ADC1_Init+0xe8>)
 8003b10:	2200      	movs	r2, #0
 8003b12:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8003b14:	4b1d      	ldr	r3, [pc, #116]	; (8003b8c <MX_ADC1_Init+0xe8>)
 8003b16:	2201      	movs	r2, #1
 8003b18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8003b1c:	4b1b      	ldr	r3, [pc, #108]	; (8003b8c <MX_ADC1_Init+0xe8>)
 8003b1e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003b22:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8003b24:	4b19      	ldr	r3, [pc, #100]	; (8003b8c <MX_ADC1_Init+0xe8>)
 8003b26:	2200      	movs	r2, #0
 8003b28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003b2c:	4817      	ldr	r0, [pc, #92]	; (8003b8c <MX_ADC1_Init+0xe8>)
 8003b2e:	f002 f805 	bl	8005b3c <HAL_ADC_Init>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d001      	beq.n	8003b3c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8003b38:	f000 ff42 	bl	80049c0 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8003b40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b44:	4619      	mov	r1, r3
 8003b46:	4811      	ldr	r0, [pc, #68]	; (8003b8c <MX_ADC1_Init+0xe8>)
 8003b48:	f002 fd8e 	bl	8006668 <HAL_ADCEx_MultiModeConfigChannel>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d001      	beq.n	8003b56 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8003b52:	f000 ff35 	bl	80049c0 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8003b56:	4b0e      	ldr	r3, [pc, #56]	; (8003b90 <MX_ADC1_Init+0xec>)
 8003b58:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003b5a:	2306      	movs	r3, #6
 8003b5c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003b62:	237f      	movs	r3, #127	; 0x7f
 8003b64:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003b66:	2304      	movs	r3, #4
 8003b68:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003b6e:	1d3b      	adds	r3, r7, #4
 8003b70:	4619      	mov	r1, r3
 8003b72:	4806      	ldr	r0, [pc, #24]	; (8003b8c <MX_ADC1_Init+0xe8>)
 8003b74:	f002 f9a2 	bl	8005ebc <HAL_ADC_ConfigChannel>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d001      	beq.n	8003b82 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8003b7e:	f000 ff1f 	bl	80049c0 <Error_Handler>
  }

}
 8003b82:	bf00      	nop
 8003b84:	3730      	adds	r7, #48	; 0x30
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	20001418 	.word	0x20001418
 8003b90:	0c900008 	.word	0x0c900008

08003b94 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b08a      	sub	sp, #40	; 0x28
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b9c:	f107 0314 	add.w	r3, r7, #20
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	601a      	str	r2, [r3, #0]
 8003ba4:	605a      	str	r2, [r3, #4]
 8003ba6:	609a      	str	r2, [r3, #8]
 8003ba8:	60da      	str	r2, [r3, #12]
 8003baa:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003bb4:	d14f      	bne.n	8003c56 <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003bb6:	4b2a      	ldr	r3, [pc, #168]	; (8003c60 <HAL_ADC_MspInit+0xcc>)
 8003bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bba:	4a29      	ldr	r2, [pc, #164]	; (8003c60 <HAL_ADC_MspInit+0xcc>)
 8003bbc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003bc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003bc2:	4b27      	ldr	r3, [pc, #156]	; (8003c60 <HAL_ADC_MspInit+0xcc>)
 8003bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bc6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bca:	613b      	str	r3, [r7, #16]
 8003bcc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bce:	4b24      	ldr	r3, [pc, #144]	; (8003c60 <HAL_ADC_MspInit+0xcc>)
 8003bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bd2:	4a23      	ldr	r2, [pc, #140]	; (8003c60 <HAL_ADC_MspInit+0xcc>)
 8003bd4:	f043 0301 	orr.w	r3, r3, #1
 8003bd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003bda:	4b21      	ldr	r3, [pc, #132]	; (8003c60 <HAL_ADC_MspInit+0xcc>)
 8003bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bde:	f003 0301 	and.w	r3, r3, #1
 8003be2:	60fb      	str	r3, [r7, #12]
 8003be4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA2     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003be6:	2304      	movs	r3, #4
 8003be8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003bea:	2303      	movs	r3, #3
 8003bec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bf2:	f107 0314 	add.w	r3, r7, #20
 8003bf6:	4619      	mov	r1, r3
 8003bf8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003bfc:	f004 f90c 	bl	8007e18 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003c00:	4b18      	ldr	r3, [pc, #96]	; (8003c64 <HAL_ADC_MspInit+0xd0>)
 8003c02:	4a19      	ldr	r2, [pc, #100]	; (8003c68 <HAL_ADC_MspInit+0xd4>)
 8003c04:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8003c06:	4b17      	ldr	r3, [pc, #92]	; (8003c64 <HAL_ADC_MspInit+0xd0>)
 8003c08:	2205      	movs	r2, #5
 8003c0a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003c0c:	4b15      	ldr	r3, [pc, #84]	; (8003c64 <HAL_ADC_MspInit+0xd0>)
 8003c0e:	2200      	movs	r2, #0
 8003c10:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c12:	4b14      	ldr	r3, [pc, #80]	; (8003c64 <HAL_ADC_MspInit+0xd0>)
 8003c14:	2200      	movs	r2, #0
 8003c16:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003c18:	4b12      	ldr	r3, [pc, #72]	; (8003c64 <HAL_ADC_MspInit+0xd0>)
 8003c1a:	2280      	movs	r2, #128	; 0x80
 8003c1c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003c1e:	4b11      	ldr	r3, [pc, #68]	; (8003c64 <HAL_ADC_MspInit+0xd0>)
 8003c20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c24:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003c26:	4b0f      	ldr	r3, [pc, #60]	; (8003c64 <HAL_ADC_MspInit+0xd0>)
 8003c28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c2c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003c2e:	4b0d      	ldr	r3, [pc, #52]	; (8003c64 <HAL_ADC_MspInit+0xd0>)
 8003c30:	2220      	movs	r2, #32
 8003c32:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003c34:	4b0b      	ldr	r3, [pc, #44]	; (8003c64 <HAL_ADC_MspInit+0xd0>)
 8003c36:	2200      	movs	r2, #0
 8003c38:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003c3a:	480a      	ldr	r0, [pc, #40]	; (8003c64 <HAL_ADC_MspInit+0xd0>)
 8003c3c:	f003 fe20 	bl	8007880 <HAL_DMA_Init>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d001      	beq.n	8003c4a <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 8003c46:	f000 febb 	bl	80049c0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a05      	ldr	r2, [pc, #20]	; (8003c64 <HAL_ADC_MspInit+0xd0>)
 8003c4e:	655a      	str	r2, [r3, #84]	; 0x54
 8003c50:	4a04      	ldr	r2, [pc, #16]	; (8003c64 <HAL_ADC_MspInit+0xd0>)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8003c56:	bf00      	nop
 8003c58:	3728      	adds	r7, #40	; 0x28
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	40021000 	.word	0x40021000
 8003c64:	20001484 	.word	0x20001484
 8003c68:	40020008 	.word	0x40020008

08003c6c <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	af00      	add	r7, sp, #0

  hcomp1.Instance = COMP1;
 8003c70:	4b0f      	ldr	r3, [pc, #60]	; (8003cb0 <MX_COMP1_Init+0x44>)
 8003c72:	4a10      	ldr	r2, [pc, #64]	; (8003cb4 <MX_COMP1_Init+0x48>)
 8003c74:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8003c76:	4b0e      	ldr	r3, [pc, #56]	; (8003cb0 <MX_COMP1_Init+0x44>)
 8003c78:	2200      	movs	r2, #0
 8003c7a:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 8003c7c:	4b0c      	ldr	r3, [pc, #48]	; (8003cb0 <MX_COMP1_Init+0x44>)
 8003c7e:	4a0e      	ldr	r2, [pc, #56]	; (8003cb8 <MX_COMP1_Init+0x4c>)
 8003c80:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8003c82:	4b0b      	ldr	r3, [pc, #44]	; (8003cb0 <MX_COMP1_Init+0x44>)
 8003c84:	2200      	movs	r2, #0
 8003c86:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8003c88:	4b09      	ldr	r3, [pc, #36]	; (8003cb0 <MX_COMP1_Init+0x44>)
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8003c8e:	4b08      	ldr	r3, [pc, #32]	; (8003cb0 <MX_COMP1_Init+0x44>)
 8003c90:	2200      	movs	r2, #0
 8003c92:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8003c94:	4b06      	ldr	r3, [pc, #24]	; (8003cb0 <MX_COMP1_Init+0x44>)
 8003c96:	2200      	movs	r2, #0
 8003c98:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8003c9a:	4805      	ldr	r0, [pc, #20]	; (8003cb0 <MX_COMP1_Init+0x44>)
 8003c9c:	f002 ff38 	bl	8006b10 <HAL_COMP_Init>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d001      	beq.n	8003caa <MX_COMP1_Init+0x3e>
  {
    Error_Handler();
 8003ca6:	f000 fe8b 	bl	80049c0 <Error_Handler>
  }

}
 8003caa:	bf00      	nop
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	200014e4 	.word	0x200014e4
 8003cb4:	40010200 	.word	0x40010200
 8003cb8:	00800030 	.word	0x00800030

08003cbc <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b088      	sub	sp, #32
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cc4:	f107 030c 	add.w	r3, r7, #12
 8003cc8:	2200      	movs	r2, #0
 8003cca:	601a      	str	r2, [r3, #0]
 8003ccc:	605a      	str	r2, [r3, #4]
 8003cce:	609a      	str	r2, [r3, #8]
 8003cd0:	60da      	str	r2, [r3, #12]
 8003cd2:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a0f      	ldr	r2, [pc, #60]	; (8003d18 <HAL_COMP_MspInit+0x5c>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d118      	bne.n	8003d10 <HAL_COMP_MspInit+0x54>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cde:	4b0f      	ldr	r3, [pc, #60]	; (8003d1c <HAL_COMP_MspInit+0x60>)
 8003ce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ce2:	4a0e      	ldr	r2, [pc, #56]	; (8003d1c <HAL_COMP_MspInit+0x60>)
 8003ce4:	f043 0301 	orr.w	r3, r3, #1
 8003ce8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003cea:	4b0c      	ldr	r3, [pc, #48]	; (8003d1c <HAL_COMP_MspInit+0x60>)
 8003cec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cee:	f003 0301 	and.w	r3, r3, #1
 8003cf2:	60bb      	str	r3, [r7, #8]
 8003cf4:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration    
    PA1     ------> COMP1_INP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003cf6:	2302      	movs	r3, #2
 8003cf8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d02:	f107 030c 	add.w	r3, r7, #12
 8003d06:	4619      	mov	r1, r3
 8003d08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d0c:	f004 f884 	bl	8007e18 <HAL_GPIO_Init>

  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 8003d10:	bf00      	nop
 8003d12:	3720      	adds	r7, #32
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	40010200 	.word	0x40010200
 8003d1c:	40021000 	.word	0x40021000

08003d20 <MX_DAC1_Init>:
DMA_HandleTypeDef hdma_dac1_ch1;
DMA_HandleTypeDef hdma_dac2_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b08c      	sub	sp, #48	; 0x30
 8003d24:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8003d26:	463b      	mov	r3, r7
 8003d28:	2230      	movs	r2, #48	; 0x30
 8003d2a:	2100      	movs	r1, #0
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f008 f859 	bl	800bde4 <memset>

  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 8003d32:	4b1e      	ldr	r3, [pc, #120]	; (8003dac <MX_DAC1_Init+0x8c>)
 8003d34:	4a1e      	ldr	r2, [pc, #120]	; (8003db0 <MX_DAC1_Init+0x90>)
 8003d36:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8003d38:	481c      	ldr	r0, [pc, #112]	; (8003dac <MX_DAC1_Init+0x8c>)
 8003d3a:	f003 f98c 	bl	8007056 <HAL_DAC_Init>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d001      	beq.n	8003d48 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8003d44:	f000 fe3c 	bl	80049c0 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8003d48:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003d4c:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8003d52:	2300      	movs	r3, #0
 8003d54:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8003d56:	2300      	movs	r3, #0
 8003d58:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 8003d5a:	2306      	movs	r3, #6
 8003d5c:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8003d62:	2300      	movs	r3, #0
 8003d64:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8003d66:	2301      	movs	r3, #1
 8003d68:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8003d6e:	463b      	mov	r3, r7
 8003d70:	2200      	movs	r2, #0
 8003d72:	4619      	mov	r1, r3
 8003d74:	480d      	ldr	r0, [pc, #52]	; (8003dac <MX_DAC1_Init+0x8c>)
 8003d76:	f003 fb4d 	bl	8007414 <HAL_DAC_ConfigChannel>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d001      	beq.n	8003d84 <MX_DAC1_Init+0x64>
  {
    Error_Handler();
 8003d80:	f000 fe1e 	bl	80049c0 <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8003d84:	2300      	movs	r3, #0
 8003d86:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	61bb      	str	r3, [r7, #24]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8003d8c:	463b      	mov	r3, r7
 8003d8e:	2210      	movs	r2, #16
 8003d90:	4619      	mov	r1, r3
 8003d92:	4806      	ldr	r0, [pc, #24]	; (8003dac <MX_DAC1_Init+0x8c>)
 8003d94:	f003 fb3e 	bl	8007414 <HAL_DAC_ConfigChannel>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d001      	beq.n	8003da2 <MX_DAC1_Init+0x82>
  {
    Error_Handler();
 8003d9e:	f000 fe0f 	bl	80049c0 <Error_Handler>
  }

}
 8003da2:	bf00      	nop
 8003da4:	3730      	adds	r7, #48	; 0x30
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	bf00      	nop
 8003dac:	2000151c 	.word	0x2000151c
 8003db0:	50000800 	.word	0x50000800

08003db4 <MX_DAC2_Init>:
/* DAC2 init function */
void MX_DAC2_Init(void)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b08c      	sub	sp, #48	; 0x30
 8003db8:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8003dba:	463b      	mov	r3, r7
 8003dbc:	2230      	movs	r2, #48	; 0x30
 8003dbe:	2100      	movs	r1, #0
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f008 f80f 	bl	800bde4 <memset>

  /** DAC Initialization 
  */
  hdac2.Instance = DAC2;
 8003dc6:	4b16      	ldr	r3, [pc, #88]	; (8003e20 <MX_DAC2_Init+0x6c>)
 8003dc8:	4a16      	ldr	r2, [pc, #88]	; (8003e24 <MX_DAC2_Init+0x70>)
 8003dca:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8003dcc:	4814      	ldr	r0, [pc, #80]	; (8003e20 <MX_DAC2_Init+0x6c>)
 8003dce:	f003 f942 	bl	8007056 <HAL_DAC_Init>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d001      	beq.n	8003ddc <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8003dd8:	f000 fdf2 	bl	80049c0 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8003ddc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003de0:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8003de2:	2300      	movs	r3, #0
 8003de4:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8003de6:	2300      	movs	r3, #0
 8003de8:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8003dea:	2300      	movs	r3, #0
 8003dec:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 8003dee:	2306      	movs	r3, #6
 8003df0:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8003df2:	2300      	movs	r3, #0
 8003df4:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8003df6:	2300      	movs	r3, #0
 8003df8:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8003e02:	463b      	mov	r3, r7
 8003e04:	2200      	movs	r2, #0
 8003e06:	4619      	mov	r1, r3
 8003e08:	4805      	ldr	r0, [pc, #20]	; (8003e20 <MX_DAC2_Init+0x6c>)
 8003e0a:	f003 fb03 	bl	8007414 <HAL_DAC_ConfigChannel>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d001      	beq.n	8003e18 <MX_DAC2_Init+0x64>
  {
    Error_Handler();
 8003e14:	f000 fdd4 	bl	80049c0 <Error_Handler>
  }

}
 8003e18:	bf00      	nop
 8003e1a:	3730      	adds	r7, #48	; 0x30
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	20001508 	.word	0x20001508
 8003e24:	50000c00 	.word	0x50000c00

08003e28 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b08c      	sub	sp, #48	; 0x30
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e30:	f107 031c 	add.w	r3, r7, #28
 8003e34:	2200      	movs	r2, #0
 8003e36:	601a      	str	r2, [r3, #0]
 8003e38:	605a      	str	r2, [r3, #4]
 8003e3a:	609a      	str	r2, [r3, #8]
 8003e3c:	60da      	str	r2, [r3, #12]
 8003e3e:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a56      	ldr	r2, [pc, #344]	; (8003fa0 <HAL_DAC_MspInit+0x178>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d150      	bne.n	8003eec <HAL_DAC_MspInit+0xc4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8003e4a:	4b56      	ldr	r3, [pc, #344]	; (8003fa4 <HAL_DAC_MspInit+0x17c>)
 8003e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e4e:	4a55      	ldr	r2, [pc, #340]	; (8003fa4 <HAL_DAC_MspInit+0x17c>)
 8003e50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e56:	4b53      	ldr	r3, [pc, #332]	; (8003fa4 <HAL_DAC_MspInit+0x17c>)
 8003e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e5e:	61bb      	str	r3, [r7, #24]
 8003e60:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e62:	4b50      	ldr	r3, [pc, #320]	; (8003fa4 <HAL_DAC_MspInit+0x17c>)
 8003e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e66:	4a4f      	ldr	r2, [pc, #316]	; (8003fa4 <HAL_DAC_MspInit+0x17c>)
 8003e68:	f043 0301 	orr.w	r3, r3, #1
 8003e6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e6e:	4b4d      	ldr	r3, [pc, #308]	; (8003fa4 <HAL_DAC_MspInit+0x17c>)
 8003e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e72:	f003 0301 	and.w	r3, r3, #1
 8003e76:	617b      	str	r3, [r7, #20]
 8003e78:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003e7a:	2330      	movs	r3, #48	; 0x30
 8003e7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e82:	2300      	movs	r3, #0
 8003e84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e86:	f107 031c 	add.w	r3, r7, #28
 8003e8a:	4619      	mov	r1, r3
 8003e8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e90:	f003 ffc2 	bl	8007e18 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel2;
 8003e94:	4b44      	ldr	r3, [pc, #272]	; (8003fa8 <HAL_DAC_MspInit+0x180>)
 8003e96:	4a45      	ldr	r2, [pc, #276]	; (8003fac <HAL_DAC_MspInit+0x184>)
 8003e98:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 8003e9a:	4b43      	ldr	r3, [pc, #268]	; (8003fa8 <HAL_DAC_MspInit+0x180>)
 8003e9c:	2206      	movs	r2, #6
 8003e9e:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003ea0:	4b41      	ldr	r3, [pc, #260]	; (8003fa8 <HAL_DAC_MspInit+0x180>)
 8003ea2:	2210      	movs	r2, #16
 8003ea4:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ea6:	4b40      	ldr	r3, [pc, #256]	; (8003fa8 <HAL_DAC_MspInit+0x180>)
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003eac:	4b3e      	ldr	r3, [pc, #248]	; (8003fa8 <HAL_DAC_MspInit+0x180>)
 8003eae:	2280      	movs	r2, #128	; 0x80
 8003eb0:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003eb2:	4b3d      	ldr	r3, [pc, #244]	; (8003fa8 <HAL_DAC_MspInit+0x180>)
 8003eb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003eb8:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003eba:	4b3b      	ldr	r3, [pc, #236]	; (8003fa8 <HAL_DAC_MspInit+0x180>)
 8003ebc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ec0:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8003ec2:	4b39      	ldr	r3, [pc, #228]	; (8003fa8 <HAL_DAC_MspInit+0x180>)
 8003ec4:	2220      	movs	r2, #32
 8003ec6:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8003ec8:	4b37      	ldr	r3, [pc, #220]	; (8003fa8 <HAL_DAC_MspInit+0x180>)
 8003eca:	2200      	movs	r2, #0
 8003ecc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8003ece:	4836      	ldr	r0, [pc, #216]	; (8003fa8 <HAL_DAC_MspInit+0x180>)
 8003ed0:	f003 fcd6 	bl	8007880 <HAL_DMA_Init>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d001      	beq.n	8003ede <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8003eda:	f000 fd71 	bl	80049c0 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a31      	ldr	r2, [pc, #196]	; (8003fa8 <HAL_DAC_MspInit+0x180>)
 8003ee2:	609a      	str	r2, [r3, #8]
 8003ee4:	4a30      	ldr	r2, [pc, #192]	; (8003fa8 <HAL_DAC_MspInit+0x180>)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }
}
 8003eea:	e054      	b.n	8003f96 <HAL_DAC_MspInit+0x16e>
  else if(dacHandle->Instance==DAC2)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a2f      	ldr	r2, [pc, #188]	; (8003fb0 <HAL_DAC_MspInit+0x188>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d14f      	bne.n	8003f96 <HAL_DAC_MspInit+0x16e>
    __HAL_RCC_DAC2_CLK_ENABLE();
 8003ef6:	4b2b      	ldr	r3, [pc, #172]	; (8003fa4 <HAL_DAC_MspInit+0x17c>)
 8003ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003efa:	4a2a      	ldr	r2, [pc, #168]	; (8003fa4 <HAL_DAC_MspInit+0x17c>)
 8003efc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f02:	4b28      	ldr	r3, [pc, #160]	; (8003fa4 <HAL_DAC_MspInit+0x17c>)
 8003f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f0a:	613b      	str	r3, [r7, #16]
 8003f0c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f0e:	4b25      	ldr	r3, [pc, #148]	; (8003fa4 <HAL_DAC_MspInit+0x17c>)
 8003f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f12:	4a24      	ldr	r2, [pc, #144]	; (8003fa4 <HAL_DAC_MspInit+0x17c>)
 8003f14:	f043 0301 	orr.w	r3, r3, #1
 8003f18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f1a:	4b22      	ldr	r3, [pc, #136]	; (8003fa4 <HAL_DAC_MspInit+0x17c>)
 8003f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f1e:	f003 0301 	and.w	r3, r3, #1
 8003f22:	60fb      	str	r3, [r7, #12]
 8003f24:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003f26:	2340      	movs	r3, #64	; 0x40
 8003f28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f32:	f107 031c 	add.w	r3, r7, #28
 8003f36:	4619      	mov	r1, r3
 8003f38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f3c:	f003 ff6c 	bl	8007e18 <HAL_GPIO_Init>
    hdma_dac2_ch1.Instance = DMA1_Channel3;
 8003f40:	4b1c      	ldr	r3, [pc, #112]	; (8003fb4 <HAL_DAC_MspInit+0x18c>)
 8003f42:	4a1d      	ldr	r2, [pc, #116]	; (8003fb8 <HAL_DAC_MspInit+0x190>)
 8003f44:	601a      	str	r2, [r3, #0]
    hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 8003f46:	4b1b      	ldr	r3, [pc, #108]	; (8003fb4 <HAL_DAC_MspInit+0x18c>)
 8003f48:	2229      	movs	r2, #41	; 0x29
 8003f4a:	605a      	str	r2, [r3, #4]
    hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003f4c:	4b19      	ldr	r3, [pc, #100]	; (8003fb4 <HAL_DAC_MspInit+0x18c>)
 8003f4e:	2210      	movs	r2, #16
 8003f50:	609a      	str	r2, [r3, #8]
    hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f52:	4b18      	ldr	r3, [pc, #96]	; (8003fb4 <HAL_DAC_MspInit+0x18c>)
 8003f54:	2200      	movs	r2, #0
 8003f56:	60da      	str	r2, [r3, #12]
    hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003f58:	4b16      	ldr	r3, [pc, #88]	; (8003fb4 <HAL_DAC_MspInit+0x18c>)
 8003f5a:	2280      	movs	r2, #128	; 0x80
 8003f5c:	611a      	str	r2, [r3, #16]
    hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003f5e:	4b15      	ldr	r3, [pc, #84]	; (8003fb4 <HAL_DAC_MspInit+0x18c>)
 8003f60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f64:	615a      	str	r2, [r3, #20]
    hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003f66:	4b13      	ldr	r3, [pc, #76]	; (8003fb4 <HAL_DAC_MspInit+0x18c>)
 8003f68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f6c:	619a      	str	r2, [r3, #24]
    hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 8003f6e:	4b11      	ldr	r3, [pc, #68]	; (8003fb4 <HAL_DAC_MspInit+0x18c>)
 8003f70:	2220      	movs	r2, #32
 8003f72:	61da      	str	r2, [r3, #28]
    hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8003f74:	4b0f      	ldr	r3, [pc, #60]	; (8003fb4 <HAL_DAC_MspInit+0x18c>)
 8003f76:	2200      	movs	r2, #0
 8003f78:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac2_ch1) != HAL_OK)
 8003f7a:	480e      	ldr	r0, [pc, #56]	; (8003fb4 <HAL_DAC_MspInit+0x18c>)
 8003f7c:	f003 fc80 	bl	8007880 <HAL_DMA_Init>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d001      	beq.n	8003f8a <HAL_DAC_MspInit+0x162>
      Error_Handler();
 8003f86:	f000 fd1b 	bl	80049c0 <Error_Handler>
    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac2_ch1);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a09      	ldr	r2, [pc, #36]	; (8003fb4 <HAL_DAC_MspInit+0x18c>)
 8003f8e:	609a      	str	r2, [r3, #8]
 8003f90:	4a08      	ldr	r2, [pc, #32]	; (8003fb4 <HAL_DAC_MspInit+0x18c>)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6293      	str	r3, [r2, #40]	; 0x28
}
 8003f96:	bf00      	nop
 8003f98:	3730      	adds	r7, #48	; 0x30
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	50000800 	.word	0x50000800
 8003fa4:	40021000 	.word	0x40021000
 8003fa8:	20001530 	.word	0x20001530
 8003fac:	4002001c 	.word	0x4002001c
 8003fb0:	50000c00 	.word	0x50000c00
 8003fb4:	20001590 	.word	0x20001590
 8003fb8:	40020030 	.word	0x40020030

08003fbc <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b082      	sub	sp, #8
 8003fc0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8003fc2:	4b1a      	ldr	r3, [pc, #104]	; (800402c <MX_DMA_Init+0x70>)
 8003fc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fc6:	4a19      	ldr	r2, [pc, #100]	; (800402c <MX_DMA_Init+0x70>)
 8003fc8:	f043 0304 	orr.w	r3, r3, #4
 8003fcc:	6493      	str	r3, [r2, #72]	; 0x48
 8003fce:	4b17      	ldr	r3, [pc, #92]	; (800402c <MX_DMA_Init+0x70>)
 8003fd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fd2:	f003 0304 	and.w	r3, r3, #4
 8003fd6:	607b      	str	r3, [r7, #4]
 8003fd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003fda:	4b14      	ldr	r3, [pc, #80]	; (800402c <MX_DMA_Init+0x70>)
 8003fdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fde:	4a13      	ldr	r2, [pc, #76]	; (800402c <MX_DMA_Init+0x70>)
 8003fe0:	f043 0301 	orr.w	r3, r3, #1
 8003fe4:	6493      	str	r3, [r2, #72]	; 0x48
 8003fe6:	4b11      	ldr	r3, [pc, #68]	; (800402c <MX_DMA_Init+0x70>)
 8003fe8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fea:	f003 0301 	and.w	r3, r3, #1
 8003fee:	603b      	str	r3, [r7, #0]
 8003ff0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	2101      	movs	r1, #1
 8003ff6:	200b      	movs	r0, #11
 8003ff8:	f002 fff9 	bl	8006fee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003ffc:	200b      	movs	r0, #11
 8003ffe:	f003 f810 	bl	8007022 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8004002:	2200      	movs	r2, #0
 8004004:	2100      	movs	r1, #0
 8004006:	200c      	movs	r0, #12
 8004008:	f002 fff1 	bl	8006fee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800400c:	200c      	movs	r0, #12
 800400e:	f003 f808 	bl	8007022 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8004012:	2200      	movs	r2, #0
 8004014:	2100      	movs	r1, #0
 8004016:	200d      	movs	r0, #13
 8004018:	f002 ffe9 	bl	8006fee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800401c:	200d      	movs	r0, #13
 800401e:	f003 f800 	bl	8007022 <HAL_NVIC_EnableIRQ>

}
 8004022:	bf00      	nop
 8004024:	3708      	adds	r7, #8
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	40021000 	.word	0x40021000

08004030 <update_dc_bias_sweep>:
uint16_t dcbias = 0;
int dcbias_dir = 1;
int dcinverted = 0;

void update_dc_bias_sweep()
{
 8004030:	b580      	push	{r7, lr}
 8004032:	af00      	add	r7, sp, #0
	  // up=1, down=0
	  (dcbias_dir) ? (dcbias++) : (dcbias--);
 8004034:	4b20      	ldr	r3, [pc, #128]	; (80040b8 <update_dc_bias_sweep+0x88>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d006      	beq.n	800404a <update_dc_bias_sweep+0x1a>
 800403c:	4b1f      	ldr	r3, [pc, #124]	; (80040bc <update_dc_bias_sweep+0x8c>)
 800403e:	881b      	ldrh	r3, [r3, #0]
 8004040:	3301      	adds	r3, #1
 8004042:	b29a      	uxth	r2, r3
 8004044:	4b1d      	ldr	r3, [pc, #116]	; (80040bc <update_dc_bias_sweep+0x8c>)
 8004046:	801a      	strh	r2, [r3, #0]
 8004048:	e005      	b.n	8004056 <update_dc_bias_sweep+0x26>
 800404a:	4b1c      	ldr	r3, [pc, #112]	; (80040bc <update_dc_bias_sweep+0x8c>)
 800404c:	881b      	ldrh	r3, [r3, #0]
 800404e:	3b01      	subs	r3, #1
 8004050:	b29a      	uxth	r2, r3
 8004052:	4b1a      	ldr	r3, [pc, #104]	; (80040bc <update_dc_bias_sweep+0x8c>)
 8004054:	801a      	strh	r2, [r3, #0]

	  // invert the bias signal at zero crossing
	  if(dcbias < 1) {
 8004056:	4b19      	ldr	r3, [pc, #100]	; (80040bc <update_dc_bias_sweep+0x8c>)
 8004058:	881b      	ldrh	r3, [r3, #0]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d10a      	bne.n	8004074 <update_dc_bias_sweep+0x44>
		(dcinverted) ? (dcinverted=0) : (dcinverted=1);
 800405e:	4b18      	ldr	r3, [pc, #96]	; (80040c0 <update_dc_bias_sweep+0x90>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d003      	beq.n	800406e <update_dc_bias_sweep+0x3e>
 8004066:	4b16      	ldr	r3, [pc, #88]	; (80040c0 <update_dc_bias_sweep+0x90>)
 8004068:	2200      	movs	r2, #0
 800406a:	601a      	str	r2, [r3, #0]
 800406c:	e002      	b.n	8004074 <update_dc_bias_sweep+0x44>
 800406e:	4b14      	ldr	r3, [pc, #80]	; (80040c0 <update_dc_bias_sweep+0x90>)
 8004070:	2201      	movs	r2, #1
 8004072:	601a      	str	r2, [r3, #0]
	  }

	  // change direction if dac limits are reached
	  if(dcbias < 1) 	{ dcbias_dir = 1; }
 8004074:	4b11      	ldr	r3, [pc, #68]	; (80040bc <update_dc_bias_sweep+0x8c>)
 8004076:	881b      	ldrh	r3, [r3, #0]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d102      	bne.n	8004082 <update_dc_bias_sweep+0x52>
 800407c:	4b0e      	ldr	r3, [pc, #56]	; (80040b8 <update_dc_bias_sweep+0x88>)
 800407e:	2201      	movs	r2, #1
 8004080:	601a      	str	r2, [r3, #0]
	  if(dcbias > 4095) { dcbias_dir = 0; }
 8004082:	4b0e      	ldr	r3, [pc, #56]	; (80040bc <update_dc_bias_sweep+0x8c>)
 8004084:	881b      	ldrh	r3, [r3, #0]
 8004086:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800408a:	d302      	bcc.n	8004092 <update_dc_bias_sweep+0x62>
 800408c:	4b0a      	ldr	r3, [pc, #40]	; (80040b8 <update_dc_bias_sweep+0x88>)
 800408e:	2200      	movs	r2, #0
 8004090:	601a      	str	r2, [r3, #0]


	  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, dcinverted);
 8004092:	4b0b      	ldr	r3, [pc, #44]	; (80040c0 <update_dc_bias_sweep+0x90>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	b2db      	uxtb	r3, r3
 8004098:	461a      	mov	r2, r3
 800409a:	2108      	movs	r1, #8
 800409c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80040a0:	f004 f854 	bl	800814c <HAL_GPIO_WritePin>
	  HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_2, DAC_ALIGN_12B_R, dcbias);
 80040a4:	4b05      	ldr	r3, [pc, #20]	; (80040bc <update_dc_bias_sweep+0x8c>)
 80040a6:	881b      	ldrh	r3, [r3, #0]
 80040a8:	2200      	movs	r2, #0
 80040aa:	2110      	movs	r1, #16
 80040ac:	4805      	ldr	r0, [pc, #20]	; (80040c4 <update_dc_bias_sweep+0x94>)
 80040ae:	f003 f95f 	bl	8007370 <HAL_DAC_SetValue>
}
 80040b2:	bf00      	nop
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	200001a8 	.word	0x200001a8
 80040bc:	200013f4 	.word	0x200013f4
 80040c0:	200013f8 	.word	0x200013f8
 80040c4:	2000151c 	.word	0x2000151c

080040c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80040c8:	b480      	push	{r7}
 80040ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80040cc:	4b04      	ldr	r3, [pc, #16]	; (80040e0 <__NVIC_GetPriorityGrouping+0x18>)
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	0a1b      	lsrs	r3, r3, #8
 80040d2:	f003 0307 	and.w	r3, r3, #7
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr
 80040e0:	e000ed00 	.word	0xe000ed00

080040e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	4603      	mov	r3, r0
 80040ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	db0b      	blt.n	800410e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040f6:	79fb      	ldrb	r3, [r7, #7]
 80040f8:	f003 021f 	and.w	r2, r3, #31
 80040fc:	4907      	ldr	r1, [pc, #28]	; (800411c <__NVIC_EnableIRQ+0x38>)
 80040fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004102:	095b      	lsrs	r3, r3, #5
 8004104:	2001      	movs	r0, #1
 8004106:	fa00 f202 	lsl.w	r2, r0, r2
 800410a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800410e:	bf00      	nop
 8004110:	370c      	adds	r7, #12
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr
 800411a:	bf00      	nop
 800411c:	e000e100 	.word	0xe000e100

08004120 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	4603      	mov	r3, r0
 8004128:	6039      	str	r1, [r7, #0]
 800412a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800412c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004130:	2b00      	cmp	r3, #0
 8004132:	db0a      	blt.n	800414a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	b2da      	uxtb	r2, r3
 8004138:	490c      	ldr	r1, [pc, #48]	; (800416c <__NVIC_SetPriority+0x4c>)
 800413a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800413e:	0112      	lsls	r2, r2, #4
 8004140:	b2d2      	uxtb	r2, r2
 8004142:	440b      	add	r3, r1
 8004144:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004148:	e00a      	b.n	8004160 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	b2da      	uxtb	r2, r3
 800414e:	4908      	ldr	r1, [pc, #32]	; (8004170 <__NVIC_SetPriority+0x50>)
 8004150:	79fb      	ldrb	r3, [r7, #7]
 8004152:	f003 030f 	and.w	r3, r3, #15
 8004156:	3b04      	subs	r3, #4
 8004158:	0112      	lsls	r2, r2, #4
 800415a:	b2d2      	uxtb	r2, r2
 800415c:	440b      	add	r3, r1
 800415e:	761a      	strb	r2, [r3, #24]
}
 8004160:	bf00      	nop
 8004162:	370c      	adds	r7, #12
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr
 800416c:	e000e100 	.word	0xe000e100
 8004170:	e000ed00 	.word	0xe000ed00

08004174 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004174:	b480      	push	{r7}
 8004176:	b089      	sub	sp, #36	; 0x24
 8004178:	af00      	add	r7, sp, #0
 800417a:	60f8      	str	r0, [r7, #12]
 800417c:	60b9      	str	r1, [r7, #8]
 800417e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f003 0307 	and.w	r3, r3, #7
 8004186:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004188:	69fb      	ldr	r3, [r7, #28]
 800418a:	f1c3 0307 	rsb	r3, r3, #7
 800418e:	2b04      	cmp	r3, #4
 8004190:	bf28      	it	cs
 8004192:	2304      	movcs	r3, #4
 8004194:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004196:	69fb      	ldr	r3, [r7, #28]
 8004198:	3304      	adds	r3, #4
 800419a:	2b06      	cmp	r3, #6
 800419c:	d902      	bls.n	80041a4 <NVIC_EncodePriority+0x30>
 800419e:	69fb      	ldr	r3, [r7, #28]
 80041a0:	3b03      	subs	r3, #3
 80041a2:	e000      	b.n	80041a6 <NVIC_EncodePriority+0x32>
 80041a4:	2300      	movs	r3, #0
 80041a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80041ac:	69bb      	ldr	r3, [r7, #24]
 80041ae:	fa02 f303 	lsl.w	r3, r2, r3
 80041b2:	43da      	mvns	r2, r3
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	401a      	ands	r2, r3
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80041bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	fa01 f303 	lsl.w	r3, r1, r3
 80041c6:	43d9      	mvns	r1, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041cc:	4313      	orrs	r3, r2
         );
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3724      	adds	r7, #36	; 0x24
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr
	...

080041dc <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 80041dc:	b480      	push	{r7}
 80041de:	b085      	sub	sp, #20
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16U), Port << (POSITION_VAL((Line >> 16U)) & 0x1FU) );
 80041e6:	4a14      	ldr	r2, [pc, #80]	; (8004238 <LL_SYSCFG_SetEXTISource+0x5c>)
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	f003 0303 	and.w	r3, r3, #3
 80041ee:	3302      	adds	r3, #2
 80041f0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	0c1b      	lsrs	r3, r3, #16
 80041f8:	43db      	mvns	r3, r3
 80041fa:	ea02 0103 	and.w	r1, r2, r3
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	0c1b      	lsrs	r3, r3, #16
 8004202:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	fa93 f3a3 	rbit	r3, r3
 800420a:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	fab3 f383 	clz	r3, r3
 8004212:	b2db      	uxtb	r3, r3
 8004214:	f003 031f 	and.w	r3, r3, #31
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	409a      	lsls	r2, r3
 800421c:	4806      	ldr	r0, [pc, #24]	; (8004238 <LL_SYSCFG_SetEXTISource+0x5c>)
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	f003 0303 	and.w	r3, r3, #3
 8004224:	430a      	orrs	r2, r1
 8004226:	3302      	adds	r3, #2
 8004228:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 800422c:	bf00      	nop
 800422e:	3714      	adds	r7, #20
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr
 8004238:	40010000 	.word	0x40010000

0800423c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800423c:	b480      	push	{r7}
 800423e:	b089      	sub	sp, #36	; 0x24
 8004240:	af00      	add	r7, sp, #0
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	60b9      	str	r1, [r7, #8]
 8004246:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	fa93 f3a3 	rbit	r3, r3
 8004256:	613b      	str	r3, [r7, #16]
  return result;
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	fab3 f383 	clz	r3, r3
 800425e:	b2db      	uxtb	r3, r3
 8004260:	005b      	lsls	r3, r3, #1
 8004262:	2103      	movs	r1, #3
 8004264:	fa01 f303 	lsl.w	r3, r1, r3
 8004268:	43db      	mvns	r3, r3
 800426a:	401a      	ands	r2, r3
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	fa93 f3a3 	rbit	r3, r3
 8004276:	61bb      	str	r3, [r7, #24]
  return result;
 8004278:	69bb      	ldr	r3, [r7, #24]
 800427a:	fab3 f383 	clz	r3, r3
 800427e:	b2db      	uxtb	r3, r3
 8004280:	005b      	lsls	r3, r3, #1
 8004282:	6879      	ldr	r1, [r7, #4]
 8004284:	fa01 f303 	lsl.w	r3, r1, r3
 8004288:	431a      	orrs	r2, r3
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	601a      	str	r2, [r3, #0]
}
 800428e:	bf00      	nop
 8004290:	3724      	adds	r7, #36	; 0x24
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr

0800429a <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800429a:	b480      	push	{r7}
 800429c:	b089      	sub	sp, #36	; 0x24
 800429e:	af00      	add	r7, sp, #0
 80042a0:	60f8      	str	r0, [r7, #12]
 80042a2:	60b9      	str	r1, [r7, #8]
 80042a4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	68da      	ldr	r2, [r3, #12]
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	fa93 f3a3 	rbit	r3, r3
 80042b4:	613b      	str	r3, [r7, #16]
  return result;
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	fab3 f383 	clz	r3, r3
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	005b      	lsls	r3, r3, #1
 80042c0:	2103      	movs	r1, #3
 80042c2:	fa01 f303 	lsl.w	r3, r1, r3
 80042c6:	43db      	mvns	r3, r3
 80042c8:	401a      	ands	r2, r3
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	fa93 f3a3 	rbit	r3, r3
 80042d4:	61bb      	str	r3, [r7, #24]
  return result;
 80042d6:	69bb      	ldr	r3, [r7, #24]
 80042d8:	fab3 f383 	clz	r3, r3
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	005b      	lsls	r3, r3, #1
 80042e0:	6879      	ldr	r1, [r7, #4]
 80042e2:	fa01 f303 	lsl.w	r3, r1, r3
 80042e6:	431a      	orrs	r2, r3
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	60da      	str	r2, [r3, #12]
}
 80042ec:	bf00      	nop
 80042ee:	3724      	adds	r7, #36	; 0x24
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr

080042f8 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	683a      	ldr	r2, [r7, #0]
 8004306:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004308:	bf00      	nop
 800430a:	370c      	adds	r7, #12
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr

08004314 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8004314:	b480      	push	{r7}
 8004316:	b085      	sub	sp, #20
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800431c:	4b08      	ldr	r3, [pc, #32]	; (8004340 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800431e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004320:	4907      	ldr	r1, [pc, #28]	; (8004340 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4313      	orrs	r3, r2
 8004326:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004328:	4b05      	ldr	r3, [pc, #20]	; (8004340 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800432a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	4013      	ands	r3, r2
 8004330:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004332:	68fb      	ldr	r3, [r7, #12]
}
 8004334:	bf00      	nop
 8004336:	3714      	adds	r7, #20
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr
 8004340:	40021000 	.word	0x40021000

08004344 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b08a      	sub	sp, #40	; 0x28
 8004348:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 800434a:	f107 031c 	add.w	r3, r7, #28
 800434e:	2200      	movs	r2, #0
 8004350:	601a      	str	r2, [r3, #0]
 8004352:	605a      	str	r2, [r3, #4]
 8004354:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004356:	1d3b      	adds	r3, r7, #4
 8004358:	2200      	movs	r2, #0
 800435a:	601a      	str	r2, [r3, #0]
 800435c:	605a      	str	r2, [r3, #4]
 800435e:	609a      	str	r2, [r3, #8]
 8004360:	60da      	str	r2, [r3, #12]
 8004362:	611a      	str	r2, [r3, #16]
 8004364:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8004366:	2004      	movs	r0, #4
 8004368:	f7ff ffd4 	bl	8004314 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 800436c:	2020      	movs	r0, #32
 800436e:	f7ff ffd1 	bl	8004314 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8004372:	2001      	movs	r0, #1
 8004374:	f7ff ffce 	bl	8004314 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8004378:	2002      	movs	r0, #2
 800437a:	f7ff ffcb 	bl	8004314 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMODE_GPIO_Port, TRIGMODE_Pin);
 800437e:	2108      	movs	r1, #8
 8004380:	48d3      	ldr	r0, [pc, #844]	; (80046d0 <MX_GPIO_Init+0x38c>)
 8004382:	f7ff ffb9 	bl	80042f8 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin);
 8004386:	2108      	movs	r1, #8
 8004388:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800438c:	f7ff ffb4 	bl	80042f8 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG2_GPIO_Port, SG2_Pin);
 8004390:	2110      	movs	r1, #16
 8004392:	48cf      	ldr	r0, [pc, #828]	; (80046d0 <MX_GPIO_Init+0x38c>)
 8004394:	f7ff ffb0 	bl	80042f8 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG1_GPIO_Port, SG1_Pin);
 8004398:	2120      	movs	r1, #32
 800439a:	48cd      	ldr	r0, [pc, #820]	; (80046d0 <MX_GPIO_Init+0x38c>)
 800439c:	f7ff ffac 	bl	80042f8 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG0_GPIO_Port, SG0_Pin);
 80043a0:	2101      	movs	r1, #1
 80043a2:	48cc      	ldr	r0, [pc, #816]	; (80046d4 <MX_GPIO_Init+0x390>)
 80043a4:	f7ff ffa8 	bl	80042f8 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin);
 80043a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80043ac:	48c8      	ldr	r0, [pc, #800]	; (80046d0 <MX_GPIO_Init+0x38c>)
 80043ae:	f7ff ffa3 	bl	80042f8 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin);
 80043b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80043b6:	48c6      	ldr	r0, [pc, #792]	; (80046d0 <MX_GPIO_Init+0x38c>)
 80043b8:	f7ff ff9e 	bl	80042f8 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DC_GPIO_Port, DC_Pin);
 80043bc:	2140      	movs	r1, #64	; 0x40
 80043be:	48c5      	ldr	r0, [pc, #788]	; (80046d4 <MX_GPIO_Init+0x390>)
 80043c0:	f7ff ff9a 	bl	80042f8 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CS_GPIO_Port, CS_Pin);
 80043c4:	2180      	movs	r1, #128	; 0x80
 80043c6:	48c3      	ldr	r0, [pc, #780]	; (80046d4 <MX_GPIO_Init+0x390>)
 80043c8:	f7ff ff96 	bl	80042f8 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(RST_GPIO_Port, RST_Pin);
 80043cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80043d0:	48c0      	ldr	r0, [pc, #768]	; (80046d4 <MX_GPIO_Init+0x390>)
 80043d2:	f7ff ff91 	bl	80042f8 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE14);
 80043d6:	49c0      	ldr	r1, [pc, #768]	; (80046d8 <MX_GPIO_Init+0x394>)
 80043d8:	2002      	movs	r0, #2
 80043da:	f7ff feff 	bl	80041dc <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE15);
 80043de:	49bf      	ldr	r1, [pc, #764]	; (80046dc <MX_GPIO_Init+0x398>)
 80043e0:	2002      	movs	r0, #2
 80043e2:	f7ff fefb 	bl	80041dc <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE0);
 80043e6:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 80043ea:	2005      	movs	r0, #5
 80043ec:	f7ff fef6 	bl	80041dc <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE1);
 80043f0:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
 80043f4:	2005      	movs	r0, #5
 80043f6:	f7ff fef1 	bl	80041dc <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE2);
 80043fa:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 80043fe:	2002      	movs	r0, #2
 8004400:	f7ff feec 	bl	80041dc <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 8004404:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004408:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 800440a:	2301      	movs	r3, #1
 800440c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8004410:	2300      	movs	r3, #0
 8004412:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8004416:	2302      	movs	r3, #2
 8004418:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 800441c:	f107 031c 	add.w	r3, r7, #28
 8004420:	4618      	mov	r0, r3
 8004422:	f006 fae9 	bl	800a9f8 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 8004426:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800442a:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 800442c:	2301      	movs	r3, #1
 800442e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8004432:	2300      	movs	r3, #0
 8004434:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8004438:	2302      	movs	r3, #2
 800443a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 800443e:	f107 031c 	add.w	r3, r7, #28
 8004442:	4618      	mov	r0, r3
 8004444:	f006 fad8 	bl	800a9f8 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 8004448:	2301      	movs	r3, #1
 800444a:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 800444c:	2301      	movs	r3, #1
 800444e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8004452:	2300      	movs	r3, #0
 8004454:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8004458:	2302      	movs	r3, #2
 800445a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 800445e:	f107 031c 	add.w	r3, r7, #28
 8004462:	4618      	mov	r0, r3
 8004464:	f006 fac8 	bl	800a9f8 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 8004468:	2302      	movs	r3, #2
 800446a:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 800446c:	2301      	movs	r3, #1
 800446e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8004472:	2300      	movs	r3, #0
 8004474:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8004478:	2302      	movs	r3, #2
 800447a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 800447e:	f107 031c 	add.w	r3, r7, #28
 8004482:	4618      	mov	r0, r3
 8004484:	f006 fab8 	bl	800a9f8 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_2;
 8004488:	2304      	movs	r3, #4
 800448a:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 800448c:	2301      	movs	r3, #1
 800448e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8004492:	2300      	movs	r3, #0
 8004494:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8004498:	2302      	movs	r3, #2
 800449a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 800449e:	f107 031c 	add.w	r3, r7, #28
 80044a2:	4618      	mov	r0, r3
 80044a4:	f006 faa8 	bl	800a9f8 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_PULL_UP);
 80044a8:	2201      	movs	r2, #1
 80044aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80044ae:	4888      	ldr	r0, [pc, #544]	; (80046d0 <MX_GPIO_Init+0x38c>)
 80044b0:	f7ff fef3 	bl	800429a <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_PULL_UP);
 80044b4:	2201      	movs	r2, #1
 80044b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80044ba:	4885      	ldr	r0, [pc, #532]	; (80046d0 <MX_GPIO_Init+0x38c>)
 80044bc:	f7ff feed 	bl	800429a <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_PULL_UP);
 80044c0:	2201      	movs	r2, #1
 80044c2:	2101      	movs	r1, #1
 80044c4:	4886      	ldr	r0, [pc, #536]	; (80046e0 <MX_GPIO_Init+0x39c>)
 80044c6:	f7ff fee8 	bl	800429a <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_PULL_UP);
 80044ca:	2201      	movs	r2, #1
 80044cc:	2102      	movs	r1, #2
 80044ce:	4884      	ldr	r0, [pc, #528]	; (80046e0 <MX_GPIO_Init+0x39c>)
 80044d0:	f7ff fee3 	bl	800429a <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(ENC_EXTI2_GPIO_Port, ENC_EXTI2_Pin, LL_GPIO_PULL_UP);
 80044d4:	2201      	movs	r2, #1
 80044d6:	2104      	movs	r1, #4
 80044d8:	487d      	ldr	r0, [pc, #500]	; (80046d0 <MX_GPIO_Init+0x38c>)
 80044da:	f7ff fede 	bl	800429a <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_MODE_INPUT);
 80044de:	2200      	movs	r2, #0
 80044e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80044e4:	487a      	ldr	r0, [pc, #488]	; (80046d0 <MX_GPIO_Init+0x38c>)
 80044e6:	f7ff fea9 	bl	800423c <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_MODE_INPUT);
 80044ea:	2200      	movs	r2, #0
 80044ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80044f0:	4877      	ldr	r0, [pc, #476]	; (80046d0 <MX_GPIO_Init+0x38c>)
 80044f2:	f7ff fea3 	bl	800423c <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_MODE_INPUT);
 80044f6:	2200      	movs	r2, #0
 80044f8:	2101      	movs	r1, #1
 80044fa:	4879      	ldr	r0, [pc, #484]	; (80046e0 <MX_GPIO_Init+0x39c>)
 80044fc:	f7ff fe9e 	bl	800423c <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_MODE_INPUT);
 8004500:	2200      	movs	r2, #0
 8004502:	2102      	movs	r1, #2
 8004504:	4876      	ldr	r0, [pc, #472]	; (80046e0 <MX_GPIO_Init+0x39c>)
 8004506:	f7ff fe99 	bl	800423c <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(ENC_EXTI2_GPIO_Port, ENC_EXTI2_Pin, LL_GPIO_MODE_INPUT);
 800450a:	2200      	movs	r2, #0
 800450c:	2104      	movs	r1, #4
 800450e:	4870      	ldr	r0, [pc, #448]	; (80046d0 <MX_GPIO_Init+0x38c>)
 8004510:	f7ff fe94 	bl	800423c <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = TRIGMODE_Pin;
 8004514:	2308      	movs	r3, #8
 8004516:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8004518:	2301      	movs	r3, #1
 800451a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800451c:	2300      	movs	r3, #0
 800451e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004520:	2300      	movs	r3, #0
 8004522:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8004524:	2302      	movs	r3, #2
 8004526:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMODE_GPIO_Port, &GPIO_InitStruct);
 8004528:	1d3b      	adds	r3, r7, #4
 800452a:	4619      	mov	r1, r3
 800452c:	4868      	ldr	r0, [pc, #416]	; (80046d0 <MX_GPIO_Init+0x38c>)
 800452e:	f006 fc56 	bl	800adde <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DCBIAS_INVERT_Pin;
 8004532:	2308      	movs	r3, #8
 8004534:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8004536:	2301      	movs	r3, #1
 8004538:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800453a:	2300      	movs	r3, #0
 800453c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800453e:	2300      	movs	r3, #0
 8004540:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004542:	2300      	movs	r3, #0
 8004544:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DCBIAS_INVERT_GPIO_Port, &GPIO_InitStruct);
 8004546:	1d3b      	adds	r3, r7, #4
 8004548:	4619      	mov	r1, r3
 800454a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800454e:	f006 fc46 	bl	800adde <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG2_Pin;
 8004552:	2310      	movs	r3, #16
 8004554:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8004556:	2301      	movs	r3, #1
 8004558:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800455a:	2300      	movs	r3, #0
 800455c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800455e:	2300      	movs	r3, #0
 8004560:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004562:	2300      	movs	r3, #0
 8004564:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG2_GPIO_Port, &GPIO_InitStruct);
 8004566:	1d3b      	adds	r3, r7, #4
 8004568:	4619      	mov	r1, r3
 800456a:	4859      	ldr	r0, [pc, #356]	; (80046d0 <MX_GPIO_Init+0x38c>)
 800456c:	f006 fc37 	bl	800adde <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG1_Pin;
 8004570:	2320      	movs	r3, #32
 8004572:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8004574:	2301      	movs	r3, #1
 8004576:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004578:	2300      	movs	r3, #0
 800457a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800457c:	2300      	movs	r3, #0
 800457e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004580:	2300      	movs	r3, #0
 8004582:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG1_GPIO_Port, &GPIO_InitStruct);
 8004584:	1d3b      	adds	r3, r7, #4
 8004586:	4619      	mov	r1, r3
 8004588:	4851      	ldr	r0, [pc, #324]	; (80046d0 <MX_GPIO_Init+0x38c>)
 800458a:	f006 fc28 	bl	800adde <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG0_Pin;
 800458e:	2301      	movs	r3, #1
 8004590:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8004592:	2301      	movs	r3, #1
 8004594:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004596:	2300      	movs	r3, #0
 8004598:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800459a:	2300      	movs	r3, #0
 800459c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800459e:	2300      	movs	r3, #0
 80045a0:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG0_GPIO_Port, &GPIO_InitStruct);
 80045a2:	1d3b      	adds	r3, r7, #4
 80045a4:	4619      	mov	r1, r3
 80045a6:	484b      	ldr	r0, [pc, #300]	; (80046d4 <MX_GPIO_Init+0x390>)
 80045a8:	f006 fc19 	bl	800adde <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX1_Pin;
 80045ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80045b0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80045b2:	2301      	movs	r3, #1
 80045b4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80045b6:	2300      	movs	r3, #0
 80045b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80045ba:	2300      	movs	r3, #0
 80045bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80045be:	2300      	movs	r3, #0
 80045c0:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX1_GPIO_Port, &GPIO_InitStruct);
 80045c2:	1d3b      	adds	r3, r7, #4
 80045c4:	4619      	mov	r1, r3
 80045c6:	4842      	ldr	r0, [pc, #264]	; (80046d0 <MX_GPIO_Init+0x38c>)
 80045c8:	f006 fc09 	bl	800adde <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX2_Pin;
 80045cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80045d0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80045d2:	2301      	movs	r3, #1
 80045d4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80045d6:	2300      	movs	r3, #0
 80045d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80045da:	2300      	movs	r3, #0
 80045dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80045de:	2300      	movs	r3, #0
 80045e0:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX2_GPIO_Port, &GPIO_InitStruct);
 80045e2:	1d3b      	adds	r3, r7, #4
 80045e4:	4619      	mov	r1, r3
 80045e6:	483a      	ldr	r0, [pc, #232]	; (80046d0 <MX_GPIO_Init+0x38c>)
 80045e8:	f006 fbf9 	bl	800adde <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DC_Pin;
 80045ec:	2340      	movs	r3, #64	; 0x40
 80045ee:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80045f0:	2301      	movs	r3, #1
 80045f2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80045f4:	2303      	movs	r3, #3
 80045f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80045f8:	2300      	movs	r3, #0
 80045fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80045fc:	2300      	movs	r3, #0
 80045fe:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DC_GPIO_Port, &GPIO_InitStruct);
 8004600:	1d3b      	adds	r3, r7, #4
 8004602:	4619      	mov	r1, r3
 8004604:	4833      	ldr	r0, [pc, #204]	; (80046d4 <MX_GPIO_Init+0x390>)
 8004606:	f006 fbea 	bl	800adde <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CS_Pin;
 800460a:	2380      	movs	r3, #128	; 0x80
 800460c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800460e:	2301      	movs	r3, #1
 8004610:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8004612:	2303      	movs	r3, #3
 8004614:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004616:	2300      	movs	r3, #0
 8004618:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800461a:	2300      	movs	r3, #0
 800461c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 800461e:	1d3b      	adds	r3, r7, #4
 8004620:	4619      	mov	r1, r3
 8004622:	482c      	ldr	r0, [pc, #176]	; (80046d4 <MX_GPIO_Init+0x390>)
 8004624:	f006 fbdb 	bl	800adde <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = RST_Pin;
 8004628:	f44f 7300 	mov.w	r3, #512	; 0x200
 800462c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800462e:	2301      	movs	r3, #1
 8004630:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8004632:	2303      	movs	r3, #3
 8004634:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004636:	2300      	movs	r3, #0
 8004638:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800463a:	2300      	movs	r3, #0
 800463c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 800463e:	1d3b      	adds	r3, r7, #4
 8004640:	4619      	mov	r1, r3
 8004642:	4824      	ldr	r0, [pc, #144]	; (80046d4 <MX_GPIO_Init+0x390>)
 8004644:	f006 fbcb 	bl	800adde <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8004648:	f7ff fd3e 	bl	80040c8 <__NVIC_GetPriorityGrouping>
 800464c:	4603      	mov	r3, r0
 800464e:	2200      	movs	r2, #0
 8004650:	2100      	movs	r1, #0
 8004652:	4618      	mov	r0, r3
 8004654:	f7ff fd8e 	bl	8004174 <NVIC_EncodePriority>
 8004658:	4603      	mov	r3, r0
 800465a:	4619      	mov	r1, r3
 800465c:	2006      	movs	r0, #6
 800465e:	f7ff fd5f 	bl	8004120 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI0_IRQn);
 8004662:	2006      	movs	r0, #6
 8004664:	f7ff fd3e 	bl	80040e4 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8004668:	f7ff fd2e 	bl	80040c8 <__NVIC_GetPriorityGrouping>
 800466c:	4603      	mov	r3, r0
 800466e:	2200      	movs	r2, #0
 8004670:	2100      	movs	r1, #0
 8004672:	4618      	mov	r0, r3
 8004674:	f7ff fd7e 	bl	8004174 <NVIC_EncodePriority>
 8004678:	4603      	mov	r3, r0
 800467a:	4619      	mov	r1, r3
 800467c:	2007      	movs	r0, #7
 800467e:	f7ff fd4f 	bl	8004120 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI1_IRQn);
 8004682:	2007      	movs	r0, #7
 8004684:	f7ff fd2e 	bl	80040e4 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8004688:	f7ff fd1e 	bl	80040c8 <__NVIC_GetPriorityGrouping>
 800468c:	4603      	mov	r3, r0
 800468e:	2200      	movs	r2, #0
 8004690:	2100      	movs	r1, #0
 8004692:	4618      	mov	r0, r3
 8004694:	f7ff fd6e 	bl	8004174 <NVIC_EncodePriority>
 8004698:	4603      	mov	r3, r0
 800469a:	4619      	mov	r1, r3
 800469c:	2008      	movs	r0, #8
 800469e:	f7ff fd3f 	bl	8004120 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI2_IRQn);
 80046a2:	2008      	movs	r0, #8
 80046a4:	f7ff fd1e 	bl	80040e4 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80046a8:	f7ff fd0e 	bl	80040c8 <__NVIC_GetPriorityGrouping>
 80046ac:	4603      	mov	r3, r0
 80046ae:	2200      	movs	r2, #0
 80046b0:	2100      	movs	r1, #0
 80046b2:	4618      	mov	r0, r3
 80046b4:	f7ff fd5e 	bl	8004174 <NVIC_EncodePriority>
 80046b8:	4603      	mov	r3, r0
 80046ba:	4619      	mov	r1, r3
 80046bc:	2028      	movs	r0, #40	; 0x28
 80046be:	f7ff fd2f 	bl	8004120 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 80046c2:	2028      	movs	r0, #40	; 0x28
 80046c4:	f7ff fd0e 	bl	80040e4 <__NVIC_EnableIRQ>

}
 80046c8:	bf00      	nop
 80046ca:	3728      	adds	r7, #40	; 0x28
 80046cc:	46bd      	mov	sp, r7
 80046ce:	e009      	b.n	80046e4 <MX_GPIO_Init+0x3a0>
 80046d0:	48000800 	.word	0x48000800
 80046d4:	48000400 	.word	0x48000400
 80046d8:	0f000003 	.word	0x0f000003
 80046dc:	f0000003 	.word	0xf0000003
 80046e0:	48001400 	.word	0x48001400
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop

080046e8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b083      	sub	sp, #12
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80046f0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80046f4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80046f8:	f003 0301 	and.w	r3, r3, #1
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d013      	beq.n	8004728 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8004700:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004704:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8004708:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800470c:	2b00      	cmp	r3, #0
 800470e:	d00b      	beq.n	8004728 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8004710:	e000      	b.n	8004714 <ITM_SendChar+0x2c>
    {
      __NOP();
 8004712:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8004714:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d0f9      	beq.n	8004712 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800471e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	b2d2      	uxtb	r2, r2
 8004726:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8004728:	687b      	ldr	r3, [r7, #4]
}
 800472a:	4618      	mov	r0, r3
 800472c:	370c      	adds	r7, #12
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr

08004736 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8004736:	b580      	push	{r7, lr}
 8004738:	b086      	sub	sp, #24
 800473a:	af00      	add	r7, sp, #0
 800473c:	60f8      	str	r0, [r7, #12]
 800473e:	60b9      	str	r1, [r7, #8]
 8004740:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  int i=0;
 8004742:	2300      	movs	r3, #0
 8004744:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 8004746:	2300      	movs	r3, #0
 8004748:	617b      	str	r3, [r7, #20]
 800474a:	e009      	b.n	8004760 <_write+0x2a>
    ITM_SendChar((*ptr++));
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	1c5a      	adds	r2, r3, #1
 8004750:	60ba      	str	r2, [r7, #8]
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	4618      	mov	r0, r3
 8004756:	f7ff ffc7 	bl	80046e8 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	3301      	adds	r3, #1
 800475e:	617b      	str	r3, [r7, #20]
 8004760:	697a      	ldr	r2, [r7, #20]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	429a      	cmp	r2, r3
 8004766:	dbf1      	blt.n	800474c <_write+0x16>
  return len;
 8004768:	687b      	ldr	r3, [r7, #4]
}
 800476a:	4618      	mov	r0, r3
 800476c:	3718      	adds	r7, #24
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}

08004772 <HAL_DAC_ErrorCallbackCh1>:

void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004772:	b480      	push	{r7}
 8004774:	b083      	sub	sp, #12
 8004776:	af00      	add	r7, sp, #0
 8004778:	6078      	str	r0, [r7, #4]
	// do something
}
 800477a:	bf00      	nop
 800477c:	370c      	adds	r7, #12
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr
	...

08004788 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b082      	sub	sp, #8
 800478c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800478e:	f000 ff80 	bl	8005692 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004792:	f000 f8a7 	bl	80048e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004796:	f7ff fdd5 	bl	8004344 <MX_GPIO_Init>
  MX_DMA_Init();
 800479a:	f7ff fc0f 	bl	8003fbc <MX_DMA_Init>
  MX_DAC1_Init();
 800479e:	f7ff fabf 	bl	8003d20 <MX_DAC1_Init>
  MX_DAC2_Init();
 80047a2:	f7ff fb07 	bl	8003db4 <MX_DAC2_Init>
  MX_ADC1_Init();
 80047a6:	f7ff f97d 	bl	8003aa4 <MX_ADC1_Init>
  MX_COMP1_Init();
 80047aa:	f7ff fa5f 	bl	8003c6c <MX_COMP1_Init>
  MX_TIM2_Init();
 80047ae:	f000 fc67 	bl	8005080 <MX_TIM2_Init>
  MX_TIM17_Init();
 80047b2:	f000 fdff 	bl	80053b4 <MX_TIM17_Init>
  MX_SPI3_Init();
 80047b6:	f000 f941 	bl	8004a3c <MX_SPI3_Init>
  MX_RNG_Init();
 80047ba:	f000 f931 	bl	8004a20 <MX_RNG_Init>
  MX_TIM1_Init();
 80047be:	f000 fbef 	bl	8004fa0 <MX_TIM1_Init>
  MX_TIM8_Init();
 80047c2:	f000 fd17 	bl	80051f4 <MX_TIM8_Init>
  MX_TIM16_Init();
 80047c6:	f000 fdcf 	bl	8005368 <MX_TIM16_Init>
  MX_TIM15_Init();
 80047ca:	f000 fd7b 	bl	80052c4 <MX_TIM15_Init>
  MX_TIM5_Init();
 80047ce:	f000 fcc1 	bl	8005154 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  DT_InitRegister();
 80047d2:	f7fe fd4b 	bl	800326c <DT_InitRegister>

  // main signal function output (external)
  HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, sine_data_table, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 80047d6:	2300      	movs	r3, #0
 80047d8:	9300      	str	r3, [sp, #0]
 80047da:	2378      	movs	r3, #120	; 0x78
 80047dc:	4a35      	ldr	r2, [pc, #212]	; (80048b4 <main+0x12c>)
 80047de:	2100      	movs	r1, #0
 80047e0:	4835      	ldr	r0, [pc, #212]	; (80048b8 <main+0x130>)
 80047e2:	f002 fcad 	bl	8007140 <HAL_DAC_Start_DMA>
  //TIM8->ARR = sin1_max_arr;

  // DC bias output (internal)
  HAL_DAC_Start(&hdac1, DAC1_CHANNEL_2);
 80047e6:	2110      	movs	r1, #16
 80047e8:	4833      	ldr	r0, [pc, #204]	; (80048b8 <main+0x130>)
 80047ea:	f002 fc56 	bl	800709a <HAL_DAC_Start>
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, sine_data_table, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, square_data_table, SQUARE_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, unitimpulse_data_table, UNITIMPULSE_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, saw_data_table, SAW_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, saw_rev_data_table, SAW_REV_DATA_SIZE, DAC_ALIGN_12B_R);
  HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, triangle_data_table, TRIANGLE_DATA_SIZE, DAC_ALIGN_12B_R);
 80047ee:	2300      	movs	r3, #0
 80047f0:	9300      	str	r3, [sp, #0]
 80047f2:	2378      	movs	r3, #120	; 0x78
 80047f4:	4a31      	ldr	r2, [pc, #196]	; (80048bc <main+0x134>)
 80047f6:	2100      	movs	r1, #0
 80047f8:	4831      	ldr	r0, [pc, #196]	; (80048c0 <main+0x138>)
 80047fa:	f002 fca1 	bl	8007140 <HAL_DAC_Start_DMA>

  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, trigger_input, TRIGGER_DATA_SIZE, DAC_ALIGN_12B_R);
#ifndef DISABLE_ALL_TIMERS
  // single clock to run all DAC channels. TODO add independent clocks
  HAL_TIM_Base_Start(&htim8);
 80047fe:	4831      	ldr	r0, [pc, #196]	; (80048c4 <main+0x13c>)
 8004800:	f005 f820 	bl	8009844 <HAL_TIM_Base_Start>
  //TIM8->ARR = 14015;			// 100Hz
  FreqO_ApplyPreset(SM_GetDefaultFreqPreset());
 8004804:	f7ff f944 	bl	8003a90 <SM_GetDefaultFreqPreset>
 8004808:	4603      	mov	r3, r0
 800480a:	4618      	mov	r0, r3
 800480c:	f7fe feac 	bl	8003568 <FreqO_ApplyPreset>
  //TIM8->ARR = 65535;
#endif //DISABLE_ALL_TIMERS

  // DC bias inversion
  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, GPIO_PIN_SET);
 8004810:	2201      	movs	r2, #1
 8004812:	2108      	movs	r1, #8
 8004814:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004818:	f003 fc98 	bl	800814c <HAL_GPIO_WritePin>

  // PGA gain
  HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 800481c:	2201      	movs	r2, #1
 800481e:	2101      	movs	r1, #1
 8004820:	4829      	ldr	r0, [pc, #164]	; (80048c8 <main+0x140>)
 8004822:	f003 fc93 	bl	800814c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8004826:	2201      	movs	r2, #1
 8004828:	2120      	movs	r1, #32
 800482a:	4828      	ldr	r0, [pc, #160]	; (80048cc <main+0x144>)
 800482c:	f003 fc8e 	bl	800814c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8004830:	2201      	movs	r2, #1
 8004832:	2110      	movs	r1, #16
 8004834:	4825      	ldr	r0, [pc, #148]	; (80048cc <main+0x144>)
 8004836:	f003 fc89 	bl	800814c <HAL_GPIO_WritePin>
  //HAL_TIM_Base_Start_IT(&htim17);
#endif	//DISABLE_ALL_TIMERS


// http://www.ti.com/lit/ds/symlink/ts5a3357.pdf
  HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin6
 800483a:	2200      	movs	r2, #0
 800483c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004840:	4822      	ldr	r0, [pc, #136]	; (80048cc <main+0x144>)
 8004842:	f003 fc83 	bl	800814c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin5
 8004846:	2200      	movs	r2, #0
 8004848:	f44f 7100 	mov.w	r1, #512	; 0x200
 800484c:	481f      	ldr	r0, [pc, #124]	; (80048cc <main+0x144>)
 800484e:	f003 fc7d 	bl	800814c <HAL_GPIO_WritePin>

#ifdef TIM_TRIGGER_MODE
  // input capture on in TIM2 slave-mode TF1FP1

  // set HW switch to direct ext. trigger input to TIM pin
  HAL_GPIO_WritePin(TRIGMODE_GPIO_Port, TRIGMODE_Pin, GPIO_PIN_SET);
 8004852:	2201      	movs	r2, #1
 8004854:	2108      	movs	r1, #8
 8004856:	481d      	ldr	r0, [pc, #116]	; (80048cc <main+0x144>)
 8004858:	f003 fc78 	bl	800814c <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_SET);	// TS5A3357 Pin6
  //HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET); // TS5A3357 Pin5

  // clear slave mode select reg
  TIM2->SMCR &= ~(TIM_SMCR_SMS_0 | TIM_SMCR_SMS_1 | TIM_SMCR_SMS_2);
 800485c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004866:	f023 0307 	bic.w	r3, r3, #7
 800486a:	6093      	str	r3, [r2, #8]

  // slave mode
  //TIM2->SMCR |= TIM_SMCR_SMS_2;						// SLAVE MODE: RESET
  TIM2->SMCR |= TIM_SMCR_SMS_0 | TIM_SMCR_SMS_2;	// SLAVE MODE: GATED
 800486c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004876:	f043 0305 	orr.w	r3, r3, #5
 800487a:	6093      	str	r3, [r2, #8]
  //TIM2->SMCR |= TIM_SMCR_SMS_1 | TIM_SMCR_SMS_2;	// SLAVE MODE: TRIGGER

#ifndef DISABLE_ALL_TIMERS
  HAL_TIM_Base_Start_IT(&htim2);
 800487c:	4814      	ldr	r0, [pc, #80]	; (80048d0 <main+0x148>)
 800487e:	f005 f80f 	bl	80098a0 <HAL_TIM_Base_Start_IT>



#ifndef DISABLE_ALL_TIMERS
  // encoder input
  HAL_TIM_Base_Start(&htim1);		// enable encoder timer
 8004882:	4814      	ldr	r0, [pc, #80]	; (80048d4 <main+0x14c>)
 8004884:	f004 ffde 	bl	8009844 <HAL_TIM_Base_Start>
  //TIM1->DIER |= TIM_DIER_IDXIE;		// enable index interrupts

#endif	//DISABLE_ALL_TIMERS

  TIM6->PSC = 65535;
 8004888:	4b13      	ldr	r3, [pc, #76]	; (80048d8 <main+0x150>)
 800488a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800488e:	629a      	str	r2, [r3, #40]	; 0x28
  TIM6->ARR = 65535;
 8004890:	4b11      	ldr	r3, [pc, #68]	; (80048d8 <main+0x150>)
 8004892:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004896:	62da      	str	r2, [r3, #44]	; 0x2c



  // TFT lib enable
  DM_Init();
 8004898:	f7fc f9ae 	bl	8000bf8 <DM_Init>
  DM_PostInit();
 800489c:	f7fc f9ba 	bl	8000c14 <DM_PostInit>


  HAL_TIM_Base_Start_IT(&htim15);
 80048a0:	480e      	ldr	r0, [pc, #56]	; (80048dc <main+0x154>)
 80048a2:	f004 fffd 	bl	80098a0 <HAL_TIM_Base_Start_IT>

  // debounce timer
  HAL_TIM_Base_Start(&htim5);
 80048a6:	480e      	ldr	r0, [pc, #56]	; (80048e0 <main+0x158>)
 80048a8:	f004 ffcc 	bl	8009844 <HAL_TIM_Base_Start>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	EM_ProcessEvent();
 80048ac:	f7fe f99a 	bl	8002be4 <EM_ProcessEvent>
 80048b0:	e7fc      	b.n	80048ac <main+0x124>
 80048b2:	bf00      	nop
 80048b4:	20000a80 	.word	0x20000a80
 80048b8:	2000151c 	.word	0x2000151c
 80048bc:	20000e40 	.word	0x20000e40
 80048c0:	20001508 	.word	0x20001508
 80048c4:	20001654 	.word	0x20001654
 80048c8:	48000400 	.word	0x48000400
 80048cc:	48000800 	.word	0x48000800
 80048d0:	200017d0 	.word	0x200017d0
 80048d4:	20001784 	.word	0x20001784
 80048d8:	40001000 	.word	0x40001000
 80048dc:	200016a0 	.word	0x200016a0
 80048e0:	20001738 	.word	0x20001738

080048e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b0a8      	sub	sp, #160	; 0xa0
 80048e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80048ea:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80048ee:	2238      	movs	r2, #56	; 0x38
 80048f0:	2100      	movs	r1, #0
 80048f2:	4618      	mov	r0, r3
 80048f4:	f007 fa76 	bl	800bde4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80048f8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80048fc:	2200      	movs	r2, #0
 80048fe:	601a      	str	r2, [r3, #0]
 8004900:	605a      	str	r2, [r3, #4]
 8004902:	609a      	str	r2, [r3, #8]
 8004904:	60da      	str	r2, [r3, #12]
 8004906:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004908:	463b      	mov	r3, r7
 800490a:	2254      	movs	r2, #84	; 0x54
 800490c:	2100      	movs	r1, #0
 800490e:	4618      	mov	r0, r3
 8004910:	f007 fa68 	bl	800bde4 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8004914:	2000      	movs	r0, #0
 8004916:	f003 fc31 	bl	800817c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 800491a:	2322      	movs	r3, #34	; 0x22
 800491c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800491e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004922:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004924:	2340      	movs	r3, #64	; 0x40
 8004926:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8004928:	2301      	movs	r3, #1
 800492a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800492e:	2302      	movs	r3, #2
 8004930:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004934:	2302      	movs	r3, #2
 8004936:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 800493a:	2302      	movs	r3, #2
 800493c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 42;
 8004940:	232a      	movs	r3, #42	; 0x2a
 8004942:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004946:	2302      	movs	r3, #2
 8004948:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 800494c:	2304      	movs	r3, #4
 800494e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004952:	2302      	movs	r3, #2
 8004954:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004958:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800495c:	4618      	mov	r0, r3
 800495e:	f003 fcb1 	bl	80082c4 <HAL_RCC_OscConfig>
 8004962:	4603      	mov	r3, r0
 8004964:	2b00      	cmp	r3, #0
 8004966:	d001      	beq.n	800496c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8004968:	f000 f82a 	bl	80049c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800496c:	230f      	movs	r3, #15
 800496e:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004970:	2303      	movs	r3, #3
 8004972:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004974:	2300      	movs	r3, #0
 8004976:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004978:	2300      	movs	r3, #0
 800497a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800497c:	2300      	movs	r3, #0
 800497e:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 8004980:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004984:	2108      	movs	r1, #8
 8004986:	4618      	mov	r0, r3
 8004988:	f003 ffb4 	bl	80088f4 <HAL_RCC_ClockConfig>
 800498c:	4603      	mov	r3, r0
 800498e:	2b00      	cmp	r3, #0
 8004990:	d001      	beq.n	8004996 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8004992:	f000 f815 	bl	80049c0 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_ADC12;
 8004996:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800499a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 800499c:	2300      	movs	r3, #0
 800499e:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80049a0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80049a4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80049a6:	463b      	mov	r3, r7
 80049a8:	4618      	mov	r0, r3
 80049aa:	f004 f993 	bl	8008cd4 <HAL_RCCEx_PeriphCLKConfig>
 80049ae:	4603      	mov	r3, r0
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d001      	beq.n	80049b8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80049b4:	f000 f804 	bl	80049c0 <Error_Handler>
  }
}
 80049b8:	bf00      	nop
 80049ba:	37a0      	adds	r7, #160	; 0xa0
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}

080049c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80049c0:	b480      	push	{r7}
 80049c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80049c4:	bf00      	nop
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr

080049ce <LL_RNG_Enable>:
  * @rmtoll CR           RNGEN         LL_RNG_Enable
  * @param  RNGx RNG Instance
  * @retval None
  */
__STATIC_INLINE void LL_RNG_Enable(RNG_TypeDef *RNGx)
{
 80049ce:	b480      	push	{r7}
 80049d0:	b083      	sub	sp, #12
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	6078      	str	r0, [r7, #4]
  SET_BIT(RNGx->CR, RNG_CR_RNGEN);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f043 0204 	orr.w	r2, r3, #4
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	601a      	str	r2, [r3, #0]
}
 80049e2:	bf00      	nop
 80049e4:	370c      	adds	r7, #12
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr
	...

080049f0 <LL_AHB2_GRP1_EnableClock>:
{
 80049f0:	b480      	push	{r7}
 80049f2:	b085      	sub	sp, #20
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80049f8:	4b08      	ldr	r3, [pc, #32]	; (8004a1c <LL_AHB2_GRP1_EnableClock+0x2c>)
 80049fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80049fc:	4907      	ldr	r1, [pc, #28]	; (8004a1c <LL_AHB2_GRP1_EnableClock+0x2c>)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4313      	orrs	r3, r2
 8004a02:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004a04:	4b05      	ldr	r3, [pc, #20]	; (8004a1c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8004a06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
}
 8004a10:	bf00      	nop
 8004a12:	3714      	adds	r7, #20
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr
 8004a1c:	40021000 	.word	0x40021000

08004a20 <MX_RNG_Init>:

/* USER CODE END 0 */

/* RNG init function */
void MX_RNG_Init(void)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	af00      	add	r7, sp, #0

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_RNG);
 8004a24:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8004a28:	f7ff ffe2 	bl	80049f0 <LL_AHB2_GRP1_EnableClock>

  LL_RNG_Enable(RNG);
 8004a2c:	4802      	ldr	r0, [pc, #8]	; (8004a38 <MX_RNG_Init+0x18>)
 8004a2e:	f7ff ffce 	bl	80049ce <LL_RNG_Enable>

}
 8004a32:	bf00      	nop
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop
 8004a38:	50060800 	.word	0x50060800

08004a3c <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8004a40:	4b1b      	ldr	r3, [pc, #108]	; (8004ab0 <MX_SPI3_Init+0x74>)
 8004a42:	4a1c      	ldr	r2, [pc, #112]	; (8004ab4 <MX_SPI3_Init+0x78>)
 8004a44:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8004a46:	4b1a      	ldr	r3, [pc, #104]	; (8004ab0 <MX_SPI3_Init+0x74>)
 8004a48:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004a4c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8004a4e:	4b18      	ldr	r3, [pc, #96]	; (8004ab0 <MX_SPI3_Init+0x74>)
 8004a50:	2200      	movs	r2, #0
 8004a52:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8004a54:	4b16      	ldr	r3, [pc, #88]	; (8004ab0 <MX_SPI3_Init+0x74>)
 8004a56:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004a5a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a5c:	4b14      	ldr	r3, [pc, #80]	; (8004ab0 <MX_SPI3_Init+0x74>)
 8004a5e:	2200      	movs	r2, #0
 8004a60:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004a62:	4b13      	ldr	r3, [pc, #76]	; (8004ab0 <MX_SPI3_Init+0x74>)
 8004a64:	2200      	movs	r2, #0
 8004a66:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8004a68:	4b11      	ldr	r3, [pc, #68]	; (8004ab0 <MX_SPI3_Init+0x74>)
 8004a6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a6e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8004a70:	4b0f      	ldr	r3, [pc, #60]	; (8004ab0 <MX_SPI3_Init+0x74>)
 8004a72:	2210      	movs	r2, #16
 8004a74:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004a76:	4b0e      	ldr	r3, [pc, #56]	; (8004ab0 <MX_SPI3_Init+0x74>)
 8004a78:	2200      	movs	r2, #0
 8004a7a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8004a7c:	4b0c      	ldr	r3, [pc, #48]	; (8004ab0 <MX_SPI3_Init+0x74>)
 8004a7e:	2200      	movs	r2, #0
 8004a80:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a82:	4b0b      	ldr	r3, [pc, #44]	; (8004ab0 <MX_SPI3_Init+0x74>)
 8004a84:	2200      	movs	r2, #0
 8004a86:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8004a88:	4b09      	ldr	r3, [pc, #36]	; (8004ab0 <MX_SPI3_Init+0x74>)
 8004a8a:	2207      	movs	r2, #7
 8004a8c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004a8e:	4b08      	ldr	r3, [pc, #32]	; (8004ab0 <MX_SPI3_Init+0x74>)
 8004a90:	2200      	movs	r2, #0
 8004a92:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004a94:	4b06      	ldr	r3, [pc, #24]	; (8004ab0 <MX_SPI3_Init+0x74>)
 8004a96:	2208      	movs	r2, #8
 8004a98:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8004a9a:	4805      	ldr	r0, [pc, #20]	; (8004ab0 <MX_SPI3_Init+0x74>)
 8004a9c:	f004 fb66 	bl	800916c <HAL_SPI_Init>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d001      	beq.n	8004aaa <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8004aa6:	f7ff ff8b 	bl	80049c0 <Error_Handler>
  }

}
 8004aaa:	bf00      	nop
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	bf00      	nop
 8004ab0:	200015f0 	.word	0x200015f0
 8004ab4:	40003c00 	.word	0x40003c00

08004ab8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b08a      	sub	sp, #40	; 0x28
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ac0:	f107 0314 	add.w	r3, r7, #20
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	601a      	str	r2, [r3, #0]
 8004ac8:	605a      	str	r2, [r3, #4]
 8004aca:	609a      	str	r2, [r3, #8]
 8004acc:	60da      	str	r2, [r3, #12]
 8004ace:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a17      	ldr	r2, [pc, #92]	; (8004b34 <HAL_SPI_MspInit+0x7c>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d128      	bne.n	8004b2c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004ada:	4b17      	ldr	r3, [pc, #92]	; (8004b38 <HAL_SPI_MspInit+0x80>)
 8004adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ade:	4a16      	ldr	r2, [pc, #88]	; (8004b38 <HAL_SPI_MspInit+0x80>)
 8004ae0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ae4:	6593      	str	r3, [r2, #88]	; 0x58
 8004ae6:	4b14      	ldr	r3, [pc, #80]	; (8004b38 <HAL_SPI_MspInit+0x80>)
 8004ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004aee:	613b      	str	r3, [r7, #16]
 8004af0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004af2:	4b11      	ldr	r3, [pc, #68]	; (8004b38 <HAL_SPI_MspInit+0x80>)
 8004af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004af6:	4a10      	ldr	r2, [pc, #64]	; (8004b38 <HAL_SPI_MspInit+0x80>)
 8004af8:	f043 0304 	orr.w	r3, r3, #4
 8004afc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004afe:	4b0e      	ldr	r3, [pc, #56]	; (8004b38 <HAL_SPI_MspInit+0x80>)
 8004b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b02:	f003 0304 	and.w	r3, r3, #4
 8004b06:	60fb      	str	r3, [r7, #12]
 8004b08:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8004b0a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8004b0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b10:	2302      	movs	r3, #2
 8004b12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b14:	2300      	movs	r3, #0
 8004b16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004b1c:	2306      	movs	r3, #6
 8004b1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004b20:	f107 0314 	add.w	r3, r7, #20
 8004b24:	4619      	mov	r1, r3
 8004b26:	4805      	ldr	r0, [pc, #20]	; (8004b3c <HAL_SPI_MspInit+0x84>)
 8004b28:	f003 f976 	bl	8007e18 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8004b2c:	bf00      	nop
 8004b2e:	3728      	adds	r7, #40	; 0x28
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}
 8004b34:	40003c00 	.word	0x40003c00
 8004b38:	40021000 	.word	0x40021000
 8004b3c:	48000800 	.word	0x48000800

08004b40 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 8004b40:	b480      	push	{r7}
 8004b42:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004b44:	4b05      	ldr	r3, [pc, #20]	; (8004b5c <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	4a04      	ldr	r2, [pc, #16]	; (8004b5c <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8004b4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b4e:	6093      	str	r3, [r2, #8]
}
 8004b50:	bf00      	nop
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr
 8004b5a:	bf00      	nop
 8004b5c:	40007000 	.word	0x40007000

08004b60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b082      	sub	sp, #8
 8004b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b66:	4b0f      	ldr	r3, [pc, #60]	; (8004ba4 <HAL_MspInit+0x44>)
 8004b68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b6a:	4a0e      	ldr	r2, [pc, #56]	; (8004ba4 <HAL_MspInit+0x44>)
 8004b6c:	f043 0301 	orr.w	r3, r3, #1
 8004b70:	6613      	str	r3, [r2, #96]	; 0x60
 8004b72:	4b0c      	ldr	r3, [pc, #48]	; (8004ba4 <HAL_MspInit+0x44>)
 8004b74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b76:	f003 0301 	and.w	r3, r3, #1
 8004b7a:	607b      	str	r3, [r7, #4]
 8004b7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004b7e:	4b09      	ldr	r3, [pc, #36]	; (8004ba4 <HAL_MspInit+0x44>)
 8004b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b82:	4a08      	ldr	r2, [pc, #32]	; (8004ba4 <HAL_MspInit+0x44>)
 8004b84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b88:	6593      	str	r3, [r2, #88]	; 0x58
 8004b8a:	4b06      	ldr	r3, [pc, #24]	; (8004ba4 <HAL_MspInit+0x44>)
 8004b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b92:	603b      	str	r3, [r7, #0]
 8004b94:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 8004b96:	f7ff ffd3 	bl	8004b40 <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004b9a:	bf00      	nop
 8004b9c:	3708      	adds	r7, #8
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}
 8004ba2:	bf00      	nop
 8004ba4:	40021000 	.word	0x40021000

08004ba8 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b083      	sub	sp, #12
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8004bb0:	4b07      	ldr	r3, [pc, #28]	; (8004bd0 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8004bb2:	695a      	ldr	r2, [r3, #20]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	4013      	ands	r3, r2
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d101      	bne.n	8004bc2 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e000      	b.n	8004bc4 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8004bc2:	2300      	movs	r3, #0
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	370c      	adds	r7, #12
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr
 8004bd0:	40010400 	.word	0x40010400

08004bd4 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8004bdc:	4a04      	ldr	r2, [pc, #16]	; (8004bf0 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6153      	str	r3, [r2, #20]
}
 8004be2:	bf00      	nop
 8004be4:	370c      	adds	r7, #12
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr
 8004bee:	bf00      	nop
 8004bf0:	40010400 	.word	0x40010400

08004bf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004bf8:	bf00      	nop
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr

08004c02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004c02:	b480      	push	{r7}
 8004c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004c06:	e7fe      	b.n	8004c06 <HardFault_Handler+0x4>

08004c08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004c0c:	e7fe      	b.n	8004c0c <MemManage_Handler+0x4>

08004c0e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004c0e:	b480      	push	{r7}
 8004c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004c12:	e7fe      	b.n	8004c12 <BusFault_Handler+0x4>

08004c14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004c14:	b480      	push	{r7}
 8004c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004c18:	e7fe      	b.n	8004c18 <UsageFault_Handler+0x4>

08004c1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004c1a:	b480      	push	{r7}
 8004c1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004c1e:	bf00      	nop
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr

08004c28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004c2c:	bf00      	nop
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr

08004c36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004c36:	b480      	push	{r7}
 8004c38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004c3a:	bf00      	nop
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr

08004c44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004c48:	f000 fd76 	bl	8005738 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004c4c:	bf00      	nop
 8004c4e:	bd80      	pop	{r7, pc}

08004c50 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b082      	sub	sp, #8
 8004c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

	uint16_t interrupt_time = TIM5->CNT;
 8004c56:	4b0e      	ldr	r3, [pc, #56]	; (8004c90 <EXTI0_IRQHandler+0x40>)
 8004c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5a:	80fb      	strh	r3, [r7, #6]
	if (interrupt_time - last_interrupt_time > DEBOUNCE_DELAY)
 8004c5c:	88fb      	ldrh	r3, [r7, #6]
 8004c5e:	4a0d      	ldr	r2, [pc, #52]	; (8004c94 <EXTI0_IRQHandler+0x44>)
 8004c60:	8812      	ldrh	r2, [r2, #0]
 8004c62:	1a9b      	subs	r3, r3, r2
 8004c64:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004c68:	dd02      	ble.n	8004c70 <EXTI0_IRQHandler+0x20>
	{
		EM_SetNewEvent(evRedBtn);
 8004c6a:	2004      	movs	r0, #4
 8004c6c:	f7fe fa82 	bl	8003174 <EM_SetNewEvent>
	}
	last_interrupt_time = interrupt_time;
 8004c70:	4a08      	ldr	r2, [pc, #32]	; (8004c94 <EXTI0_IRQHandler+0x44>)
 8004c72:	88fb      	ldrh	r3, [r7, #6]
 8004c74:	8013      	strh	r3, [r2, #0]

  /* USER CODE END EXTI0_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 8004c76:	2001      	movs	r0, #1
 8004c78:	f7ff ff96 	bl	8004ba8 <LL_EXTI_IsActiveFlag_0_31>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d002      	beq.n	8004c88 <EXTI0_IRQHandler+0x38>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 8004c82:	2001      	movs	r0, #1
 8004c84:	f7ff ffa6 	bl	8004bd4 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_0 */
  }
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8004c88:	bf00      	nop
 8004c8a:	3708      	adds	r7, #8
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}
 8004c90:	40000c00 	.word	0x40000c00
 8004c94:	200013fe 	.word	0x200013fe

08004c98 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b082      	sub	sp, #8
 8004c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

	uint16_t interrupt_time = TIM5->CNT;
 8004c9e:	4b0e      	ldr	r3, [pc, #56]	; (8004cd8 <EXTI1_IRQHandler+0x40>)
 8004ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca2:	80fb      	strh	r3, [r7, #6]
	if (interrupt_time - last_interrupt_time > DEBOUNCE_DELAY)
 8004ca4:	88fb      	ldrh	r3, [r7, #6]
 8004ca6:	4a0d      	ldr	r2, [pc, #52]	; (8004cdc <EXTI1_IRQHandler+0x44>)
 8004ca8:	8812      	ldrh	r2, [r2, #0]
 8004caa:	1a9b      	subs	r3, r3, r2
 8004cac:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004cb0:	dd02      	ble.n	8004cb8 <EXTI1_IRQHandler+0x20>
	{
		EM_SetNewEvent(evGreenBtn);
 8004cb2:	2002      	movs	r0, #2
 8004cb4:	f7fe fa5e 	bl	8003174 <EM_SetNewEvent>
	}
	last_interrupt_time = interrupt_time;
 8004cb8:	4a08      	ldr	r2, [pc, #32]	; (8004cdc <EXTI1_IRQHandler+0x44>)
 8004cba:	88fb      	ldrh	r3, [r7, #6]
 8004cbc:	8013      	strh	r3, [r2, #0]

  /* USER CODE END EXTI1_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1) != RESET)
 8004cbe:	2002      	movs	r0, #2
 8004cc0:	f7ff ff72 	bl	8004ba8 <LL_EXTI_IsActiveFlag_0_31>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d002      	beq.n	8004cd0 <EXTI1_IRQHandler+0x38>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_1);
 8004cca:	2002      	movs	r0, #2
 8004ccc:	f7ff ff82 	bl	8004bd4 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_1 */
  }
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8004cd0:	bf00      	nop
 8004cd2:	3708      	adds	r7, #8
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}
 8004cd8:	40000c00 	.word	0x40000c00
 8004cdc:	200013fe 	.word	0x200013fe

08004ce0 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b082      	sub	sp, #8
 8004ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */


	uint16_t interrupt_time = TIM5->CNT;
 8004ce6:	4b0e      	ldr	r3, [pc, #56]	; (8004d20 <EXTI2_IRQHandler+0x40>)
 8004ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cea:	80fb      	strh	r3, [r7, #6]
	if (interrupt_time - last_interrupt_time > DEBOUNCE_DELAY)
 8004cec:	88fb      	ldrh	r3, [r7, #6]
 8004cee:	4a0d      	ldr	r2, [pc, #52]	; (8004d24 <EXTI2_IRQHandler+0x44>)
 8004cf0:	8812      	ldrh	r2, [r2, #0]
 8004cf2:	1a9b      	subs	r3, r3, r2
 8004cf4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004cf8:	dd02      	ble.n	8004d00 <EXTI2_IRQHandler+0x20>
	{
		EM_SetNewEvent(evEncoderPush);
 8004cfa:	2006      	movs	r0, #6
 8004cfc:	f7fe fa3a 	bl	8003174 <EM_SetNewEvent>
	}
	last_interrupt_time = interrupt_time;
 8004d00:	4a08      	ldr	r2, [pc, #32]	; (8004d24 <EXTI2_IRQHandler+0x44>)
 8004d02:	88fb      	ldrh	r3, [r7, #6]
 8004d04:	8013      	strh	r3, [r2, #0]


  /* USER CODE END EXTI2_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2) != RESET)
 8004d06:	2004      	movs	r0, #4
 8004d08:	f7ff ff4e 	bl	8004ba8 <LL_EXTI_IsActiveFlag_0_31>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d002      	beq.n	8004d18 <EXTI2_IRQHandler+0x38>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_2);
 8004d12:	2004      	movs	r0, #4
 8004d14:	f7ff ff5e 	bl	8004bd4 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_2 */
  }
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8004d18:	bf00      	nop
 8004d1a:	3708      	adds	r7, #8
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}
 8004d20:	40000c00 	.word	0x40000c00
 8004d24:	200013fe 	.word	0x200013fe

08004d28 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
	//printf("Test\n");
	//printf("%lu\n", trigger_input[0]);
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004d2c:	4802      	ldr	r0, [pc, #8]	; (8004d38 <DMA1_Channel1_IRQHandler+0x10>)
 8004d2e:	f002 ff23 	bl	8007b78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004d32:	bf00      	nop
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop
 8004d38:	20001484 	.word	0x20001484

08004d3c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8004d40:	4802      	ldr	r0, [pc, #8]	; (8004d4c <DMA1_Channel2_IRQHandler+0x10>)
 8004d42:	f002 ff19 	bl	8007b78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8004d46:	bf00      	nop
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	bf00      	nop
 8004d4c:	20001530 	.word	0x20001530

08004d50 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2_ch1);
 8004d54:	4802      	ldr	r0, [pc, #8]	; (8004d60 <DMA1_Channel3_IRQHandler+0x10>)
 8004d56:	f002 ff0f 	bl	8007b78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8004d5a:	bf00      	nop
 8004d5c:	bd80      	pop	{r7, pc}
 8004d5e:	bf00      	nop
 8004d60:	20001590 	.word	0x20001590

08004d64 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */
	DM_UpdateDisplay();
 8004d68:	f7fc f876 	bl	8000e58 <DM_UpdateDisplay>
	//DM_TestScreen();

	if((TIM1->CNT < last_enc_value) || (TIM1->CNT > last_enc_value))
 8004d6c:	4b0d      	ldr	r3, [pc, #52]	; (8004da4 <TIM1_BRK_TIM15_IRQHandler+0x40>)
 8004d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d70:	4a0d      	ldr	r2, [pc, #52]	; (8004da8 <TIM1_BRK_TIM15_IRQHandler+0x44>)
 8004d72:	8812      	ldrh	r2, [r2, #0]
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d305      	bcc.n	8004d84 <TIM1_BRK_TIM15_IRQHandler+0x20>
 8004d78:	4b0a      	ldr	r3, [pc, #40]	; (8004da4 <TIM1_BRK_TIM15_IRQHandler+0x40>)
 8004d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7c:	4a0a      	ldr	r2, [pc, #40]	; (8004da8 <TIM1_BRK_TIM15_IRQHandler+0x44>)
 8004d7e:	8812      	ldrh	r2, [r2, #0]
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d902      	bls.n	8004d8a <TIM1_BRK_TIM15_IRQHandler+0x26>
	{

		EM_SetNewEvent(evEncoderSet);
 8004d84:	2005      	movs	r0, #5
 8004d86:	f7fe f9f5 	bl	8003174 <EM_SetNewEvent>

	}
	last_enc_value = TIM1->CNT;
 8004d8a:	4b06      	ldr	r3, [pc, #24]	; (8004da4 <TIM1_BRK_TIM15_IRQHandler+0x40>)
 8004d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8e:	b29a      	uxth	r2, r3
 8004d90:	4b05      	ldr	r3, [pc, #20]	; (8004da8 <TIM1_BRK_TIM15_IRQHandler+0x44>)
 8004d92:	801a      	strh	r2, [r3, #0]

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004d94:	4805      	ldr	r0, [pc, #20]	; (8004dac <TIM1_BRK_TIM15_IRQHandler+0x48>)
 8004d96:	f004 fe8e 	bl	8009ab6 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8004d9a:	4805      	ldr	r0, [pc, #20]	; (8004db0 <TIM1_BRK_TIM15_IRQHandler+0x4c>)
 8004d9c:	f004 fe8b 	bl	8009ab6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8004da0:	bf00      	nop
 8004da2:	bd80      	pop	{r7, pc}
 8004da4:	40012c00 	.word	0x40012c00
 8004da8:	200013fc 	.word	0x200013fc
 8004dac:	20001784 	.word	0x20001784
 8004db0:	200016a0 	.word	0x200016a0

08004db4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
	snprintf(control_pressed, sizeof(control_pressed), " ");
 8004db8:	4a05      	ldr	r2, [pc, #20]	; (8004dd0 <TIM1_UP_TIM16_IRQHandler+0x1c>)
 8004dba:	4b06      	ldr	r3, [pc, #24]	; (8004dd4 <TIM1_UP_TIM16_IRQHandler+0x20>)
 8004dbc:	881b      	ldrh	r3, [r3, #0]
 8004dbe:	8013      	strh	r3, [r2, #0]
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004dc0:	4805      	ldr	r0, [pc, #20]	; (8004dd8 <TIM1_UP_TIM16_IRQHandler+0x24>)
 8004dc2:	f004 fe78 	bl	8009ab6 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8004dc6:	4805      	ldr	r0, [pc, #20]	; (8004ddc <TIM1_UP_TIM16_IRQHandler+0x28>)
 8004dc8:	f004 fe75 	bl	8009ab6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8004dcc:	bf00      	nop
 8004dce:	bd80      	pop	{r7, pc}
 8004dd0:	2000140c 	.word	0x2000140c
 8004dd4:	0800eaac 	.word	0x0800eaac
 8004dd8:	20001784 	.word	0x20001784
 8004ddc:	2000181c 	.word	0x2000181c

08004de0 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */
	update_dc_bias_sweep();
 8004de4:	f7ff f924 	bl	8004030 <update_dc_bias_sweep>




  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004de8:	4803      	ldr	r0, [pc, #12]	; (8004df8 <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 8004dea:	f004 fe64 	bl	8009ab6 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 8004dee:	4803      	ldr	r0, [pc, #12]	; (8004dfc <TIM1_TRG_COM_TIM17_IRQHandler+0x1c>)
 8004df0:	f004 fe61 	bl	8009ab6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8004df4:	bf00      	nop
 8004df6:	bd80      	pop	{r7, pc}
 8004df8:	20001784 	.word	0x20001784
 8004dfc:	200016ec 	.word	0x200016ec

08004e00 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004e04:	4802      	ldr	r0, [pc, #8]	; (8004e10 <TIM2_IRQHandler+0x10>)
 8004e06:	f004 fe56 	bl	8009ab6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004e0a:	bf00      	nop
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop
 8004e10:	200017d0 	.word	0x200017d0

08004e14 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	if(HAL_GPIO_ReadPin(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin))
 8004e18:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004e1c:	4815      	ldr	r0, [pc, #84]	; (8004e74 <EXTI15_10_IRQHandler+0x60>)
 8004e1e:	f003 f97d 	bl	800811c <HAL_GPIO_ReadPin>
 8004e22:	4603      	mov	r3, r0
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d002      	beq.n	8004e2e <EXTI15_10_IRQHandler+0x1a>
	{
//		uint16_t interrupt_time = TIM5->CNT;
//		if (interrupt_time - last_interrupt_time > DEBOUNCE_DELAY)
//		{
			EM_SetNewEvent(evYellowBtn);
 8004e28:	2003      	movs	r0, #3
 8004e2a:	f7fe f9a3 	bl	8003174 <EM_SetNewEvent>
//		}
//		last_interrupt_time = interrupt_time;
		//snprintf(control_pressed, sizeof(control_pressed), "BTN1");
		//printf("BTN1_EXTI14_Pin\n");
	}
	if(HAL_GPIO_ReadPin(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin))
 8004e2e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004e32:	4810      	ldr	r0, [pc, #64]	; (8004e74 <EXTI15_10_IRQHandler+0x60>)
 8004e34:	f003 f972 	bl	800811c <HAL_GPIO_ReadPin>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d002      	beq.n	8004e44 <EXTI15_10_IRQHandler+0x30>
	{
//		uint16_t interrupt_time = TIM5->CNT;
//		if (interrupt_time - last_interrupt_time > DEBOUNCE_DELAY)
//		{
			EM_SetNewEvent(evBlueBtn);
 8004e3e:	2001      	movs	r0, #1
 8004e40:	f7fe f998 	bl	8003174 <EM_SetNewEvent>
		//snprintf(control_pressed, sizeof(control_pressed), "BTN2");
		//printf("BTN2_EXTI15_Pin\n");
	}

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14) != RESET)
 8004e44:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004e48:	f7ff feae 	bl	8004ba8 <LL_EXTI_IsActiveFlag_0_31>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d003      	beq.n	8004e5a <EXTI15_10_IRQHandler+0x46>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_14);
 8004e52:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004e56:	f7ff febd 	bl	8004bd4 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_14 */
    
    /* USER CODE END LL_EXTI_LINE_14 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15) != RESET)
 8004e5a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004e5e:	f7ff fea3 	bl	8004ba8 <LL_EXTI_IsActiveFlag_0_31>
 8004e62:	4603      	mov	r3, r0
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d003      	beq.n	8004e70 <EXTI15_10_IRQHandler+0x5c>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_15);
 8004e68:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004e6c:	f7ff feb2 	bl	8004bd4 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_15 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004e70:	bf00      	nop
 8004e72:	bd80      	pop	{r7, pc}
 8004e74:	48000800 	.word	0x48000800

08004e78 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b086      	sub	sp, #24
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	60f8      	str	r0, [r7, #12]
 8004e80:	60b9      	str	r1, [r7, #8]
 8004e82:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e84:	2300      	movs	r3, #0
 8004e86:	617b      	str	r3, [r7, #20]
 8004e88:	e00a      	b.n	8004ea0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004e8a:	f3af 8000 	nop.w
 8004e8e:	4601      	mov	r1, r0
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	1c5a      	adds	r2, r3, #1
 8004e94:	60ba      	str	r2, [r7, #8]
 8004e96:	b2ca      	uxtb	r2, r1
 8004e98:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	3301      	adds	r3, #1
 8004e9e:	617b      	str	r3, [r7, #20]
 8004ea0:	697a      	ldr	r2, [r7, #20]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	dbf0      	blt.n	8004e8a <_read+0x12>
	}

return len;
 8004ea8:	687b      	ldr	r3, [r7, #4]
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3718      	adds	r7, #24
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}

08004eb2 <_close>:
	}
	return len;
}

int _close(int file)
{
 8004eb2:	b480      	push	{r7}
 8004eb4:	b083      	sub	sp, #12
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	6078      	str	r0, [r7, #4]
	return -1;
 8004eba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	370c      	adds	r7, #12
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr

08004eca <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004eca:	b480      	push	{r7}
 8004ecc:	b083      	sub	sp, #12
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	6078      	str	r0, [r7, #4]
 8004ed2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004eda:	605a      	str	r2, [r3, #4]
	return 0;
 8004edc:	2300      	movs	r3, #0
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	370c      	adds	r7, #12
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr

08004eea <_isatty>:

int _isatty(int file)
{
 8004eea:	b480      	push	{r7}
 8004eec:	b083      	sub	sp, #12
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	6078      	str	r0, [r7, #4]
	return 1;
 8004ef2:	2301      	movs	r3, #1
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	370c      	adds	r7, #12
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr

08004f00 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b085      	sub	sp, #20
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	60b9      	str	r1, [r7, #8]
 8004f0a:	607a      	str	r2, [r7, #4]
	return 0;
 8004f0c:	2300      	movs	r3, #0
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3714      	adds	r7, #20
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr
	...

08004f1c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b084      	sub	sp, #16
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004f24:	4b11      	ldr	r3, [pc, #68]	; (8004f6c <_sbrk+0x50>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d102      	bne.n	8004f32 <_sbrk+0x16>
		heap_end = &end;
 8004f2c:	4b0f      	ldr	r3, [pc, #60]	; (8004f6c <_sbrk+0x50>)
 8004f2e:	4a10      	ldr	r2, [pc, #64]	; (8004f70 <_sbrk+0x54>)
 8004f30:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8004f32:	4b0e      	ldr	r3, [pc, #56]	; (8004f6c <_sbrk+0x50>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004f38:	4b0c      	ldr	r3, [pc, #48]	; (8004f6c <_sbrk+0x50>)
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	4413      	add	r3, r2
 8004f40:	466a      	mov	r2, sp
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d907      	bls.n	8004f56 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8004f46:	f006 ff23 	bl	800bd90 <__errno>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	230c      	movs	r3, #12
 8004f4e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8004f50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004f54:	e006      	b.n	8004f64 <_sbrk+0x48>
	}

	heap_end += incr;
 8004f56:	4b05      	ldr	r3, [pc, #20]	; (8004f6c <_sbrk+0x50>)
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4413      	add	r3, r2
 8004f5e:	4a03      	ldr	r2, [pc, #12]	; (8004f6c <_sbrk+0x50>)
 8004f60:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8004f62:	68fb      	ldr	r3, [r7, #12]
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3710      	adds	r7, #16
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}
 8004f6c:	20001400 	.word	0x20001400
 8004f70:	20001870 	.word	0x20001870

08004f74 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004f74:	b480      	push	{r7}
 8004f76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004f78:	4b08      	ldr	r3, [pc, #32]	; (8004f9c <SystemInit+0x28>)
 8004f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f7e:	4a07      	ldr	r2, [pc, #28]	; (8004f9c <SystemInit+0x28>)
 8004f80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004f84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004f88:	4b04      	ldr	r3, [pc, #16]	; (8004f9c <SystemInit+0x28>)
 8004f8a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004f8e:	609a      	str	r2, [r3, #8]
#endif
}
 8004f90:	bf00      	nop
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr
 8004f9a:	bf00      	nop
 8004f9c:	e000ed00 	.word	0xe000ed00

08004fa0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b09a      	sub	sp, #104	; 0x68
 8004fa4:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8004fa6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004faa:	2224      	movs	r2, #36	; 0x24
 8004fac:	2100      	movs	r1, #0
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f006 ff18 	bl	800bde4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004fb4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004fb8:	2200      	movs	r2, #0
 8004fba:	601a      	str	r2, [r3, #0]
 8004fbc:	605a      	str	r2, [r3, #4]
 8004fbe:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004fc0:	1d3b      	adds	r3, r7, #4
 8004fc2:	2234      	movs	r2, #52	; 0x34
 8004fc4:	2100      	movs	r1, #0
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f006 ff0c 	bl	800bde4 <memset>

  htim1.Instance = TIM1;
 8004fcc:	4b2a      	ldr	r3, [pc, #168]	; (8005078 <MX_TIM1_Init+0xd8>)
 8004fce:	4a2b      	ldr	r2, [pc, #172]	; (800507c <MX_TIM1_Init+0xdc>)
 8004fd0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8004fd2:	4b29      	ldr	r3, [pc, #164]	; (8005078 <MX_TIM1_Init+0xd8>)
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 8004fd8:	4b27      	ldr	r3, [pc, #156]	; (8005078 <MX_TIM1_Init+0xd8>)
 8004fda:	2240      	movs	r2, #64	; 0x40
 8004fdc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024;
 8004fde:	4b26      	ldr	r3, [pc, #152]	; (8005078 <MX_TIM1_Init+0xd8>)
 8004fe0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004fe4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004fe6:	4b24      	ldr	r3, [pc, #144]	; (8005078 <MX_TIM1_Init+0xd8>)
 8004fe8:	2200      	movs	r2, #0
 8004fea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004fec:	4b22      	ldr	r3, [pc, #136]	; (8005078 <MX_TIM1_Init+0xd8>)
 8004fee:	2200      	movs	r2, #0
 8004ff0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004ff2:	4b21      	ldr	r3, [pc, #132]	; (8005078 <MX_TIM1_Init+0xd8>)
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004ff8:	2303      	movs	r3, #3
 8004ffa:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005000:	2301      	movs	r3, #1
 8005002:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005004:	2300      	movs	r3, #0
 8005006:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8005008:	2300      	movs	r3, #0
 800500a:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800500c:	2300      	movs	r3, #0
 800500e:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005010:	2301      	movs	r3, #1
 8005012:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005014:	2300      	movs	r3, #0
 8005016:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8005018:	2300      	movs	r3, #0
 800501a:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800501c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005020:	4619      	mov	r1, r3
 8005022:	4815      	ldr	r0, [pc, #84]	; (8005078 <MX_TIM1_Init+0xd8>)
 8005024:	f004 fca1 	bl	800996a <HAL_TIM_Encoder_Init>
 8005028:	4603      	mov	r3, r0
 800502a:	2b00      	cmp	r3, #0
 800502c:	d001      	beq.n	8005032 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800502e:	f7ff fcc7 	bl	80049c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005032:	2300      	movs	r3, #0
 8005034:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8005036:	2300      	movs	r3, #0
 8005038:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800503a:	2300      	movs	r3, #0
 800503c:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800503e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005042:	4619      	mov	r1, r3
 8005044:	480c      	ldr	r0, [pc, #48]	; (8005078 <MX_TIM1_Init+0xd8>)
 8005046:	f005 fa19 	bl	800a47c <HAL_TIMEx_MasterConfigSynchronization>
 800504a:	4603      	mov	r3, r0
 800504c:	2b00      	cmp	r3, #0
 800504e:	d001      	beq.n	8005054 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8005050:	f7ff fcb6 	bl	80049c0 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8005054:	2300      	movs	r3, #0
 8005056:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8005058:	2300      	movs	r3, #0
 800505a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800505c:	1d3b      	adds	r3, r7, #4
 800505e:	4619      	mov	r1, r3
 8005060:	4805      	ldr	r0, [pc, #20]	; (8005078 <MX_TIM1_Init+0xd8>)
 8005062:	f005 faa1 	bl	800a5a8 <HAL_TIMEx_ConfigBreakDeadTime>
 8005066:	4603      	mov	r3, r0
 8005068:	2b00      	cmp	r3, #0
 800506a:	d001      	beq.n	8005070 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 800506c:	f7ff fca8 	bl	80049c0 <Error_Handler>
  }

}
 8005070:	bf00      	nop
 8005072:	3768      	adds	r7, #104	; 0x68
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}
 8005078:	20001784 	.word	0x20001784
 800507c:	40012c00 	.word	0x40012c00

08005080 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b08c      	sub	sp, #48	; 0x30
 8005084:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005086:	f107 0320 	add.w	r3, r7, #32
 800508a:	2200      	movs	r2, #0
 800508c:	601a      	str	r2, [r3, #0]
 800508e:	605a      	str	r2, [r3, #4]
 8005090:	609a      	str	r2, [r3, #8]
 8005092:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8005094:	f107 030c 	add.w	r3, r7, #12
 8005098:	2200      	movs	r2, #0
 800509a:	601a      	str	r2, [r3, #0]
 800509c:	605a      	str	r2, [r3, #4]
 800509e:	609a      	str	r2, [r3, #8]
 80050a0:	60da      	str	r2, [r3, #12]
 80050a2:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80050a4:	463b      	mov	r3, r7
 80050a6:	2200      	movs	r2, #0
 80050a8:	601a      	str	r2, [r3, #0]
 80050aa:	605a      	str	r2, [r3, #4]
 80050ac:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 80050ae:	4b28      	ldr	r3, [pc, #160]	; (8005150 <MX_TIM2_Init+0xd0>)
 80050b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80050b4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2047;
 80050b6:	4b26      	ldr	r3, [pc, #152]	; (8005150 <MX_TIM2_Init+0xd0>)
 80050b8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80050bc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80050be:	4b24      	ldr	r3, [pc, #144]	; (8005150 <MX_TIM2_Init+0xd0>)
 80050c0:	2200      	movs	r2, #0
 80050c2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1024;
 80050c4:	4b22      	ldr	r3, [pc, #136]	; (8005150 <MX_TIM2_Init+0xd0>)
 80050c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80050ca:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80050cc:	4b20      	ldr	r3, [pc, #128]	; (8005150 <MX_TIM2_Init+0xd0>)
 80050ce:	2200      	movs	r2, #0
 80050d0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80050d2:	4b1f      	ldr	r3, [pc, #124]	; (8005150 <MX_TIM2_Init+0xd0>)
 80050d4:	2200      	movs	r2, #0
 80050d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80050d8:	481d      	ldr	r0, [pc, #116]	; (8005150 <MX_TIM2_Init+0xd0>)
 80050da:	f004 fb5c 	bl	8009796 <HAL_TIM_Base_Init>
 80050de:	4603      	mov	r3, r0
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d001      	beq.n	80050e8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80050e4:	f7ff fc6c 	bl	80049c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80050e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80050ec:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80050ee:	f107 0320 	add.w	r3, r7, #32
 80050f2:	4619      	mov	r1, r3
 80050f4:	4816      	ldr	r0, [pc, #88]	; (8005150 <MX_TIM2_Init+0xd0>)
 80050f6:	f004 fe5d 	bl	8009db4 <HAL_TIM_ConfigClockSource>
 80050fa:	4603      	mov	r3, r0
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d001      	beq.n	8005104 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8005100:	f7ff fc5e 	bl	80049c0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 8005104:	2305      	movs	r3, #5
 8005106:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8005108:	2350      	movs	r3, #80	; 0x50
 800510a:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 800510c:	2300      	movs	r3, #0
 800510e:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 0;
 8005110:	2300      	movs	r3, #0
 8005112:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8005114:	f107 030c 	add.w	r3, r7, #12
 8005118:	4619      	mov	r1, r3
 800511a:	480d      	ldr	r0, [pc, #52]	; (8005150 <MX_TIM2_Init+0xd0>)
 800511c:	f004 ff3a 	bl	8009f94 <HAL_TIM_SlaveConfigSynchro>
 8005120:	4603      	mov	r3, r0
 8005122:	2b00      	cmp	r3, #0
 8005124:	d001      	beq.n	800512a <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 8005126:	f7ff fc4b 	bl	80049c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800512a:	2300      	movs	r3, #0
 800512c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800512e:	2300      	movs	r3, #0
 8005130:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005132:	463b      	mov	r3, r7
 8005134:	4619      	mov	r1, r3
 8005136:	4806      	ldr	r0, [pc, #24]	; (8005150 <MX_TIM2_Init+0xd0>)
 8005138:	f005 f9a0 	bl	800a47c <HAL_TIMEx_MasterConfigSynchronization>
 800513c:	4603      	mov	r3, r0
 800513e:	2b00      	cmp	r3, #0
 8005140:	d001      	beq.n	8005146 <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 8005142:	f7ff fc3d 	bl	80049c0 <Error_Handler>
  }

}
 8005146:	bf00      	nop
 8005148:	3730      	adds	r7, #48	; 0x30
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
 800514e:	bf00      	nop
 8005150:	200017d0 	.word	0x200017d0

08005154 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b088      	sub	sp, #32
 8005158:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800515a:	f107 0310 	add.w	r3, r7, #16
 800515e:	2200      	movs	r2, #0
 8005160:	601a      	str	r2, [r3, #0]
 8005162:	605a      	str	r2, [r3, #4]
 8005164:	609a      	str	r2, [r3, #8]
 8005166:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005168:	1d3b      	adds	r3, r7, #4
 800516a:	2200      	movs	r2, #0
 800516c:	601a      	str	r2, [r3, #0]
 800516e:	605a      	str	r2, [r3, #4]
 8005170:	609a      	str	r2, [r3, #8]

  htim5.Instance = TIM5;
 8005172:	4b1e      	ldr	r3, [pc, #120]	; (80051ec <MX_TIM5_Init+0x98>)
 8005174:	4a1e      	ldr	r2, [pc, #120]	; (80051f0 <MX_TIM5_Init+0x9c>)
 8005176:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 65535;
 8005178:	4b1c      	ldr	r3, [pc, #112]	; (80051ec <MX_TIM5_Init+0x98>)
 800517a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800517e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005180:	4b1a      	ldr	r3, [pc, #104]	; (80051ec <MX_TIM5_Init+0x98>)
 8005182:	2200      	movs	r2, #0
 8005184:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8005186:	4b19      	ldr	r3, [pc, #100]	; (80051ec <MX_TIM5_Init+0x98>)
 8005188:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800518c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 800518e:	4b17      	ldr	r3, [pc, #92]	; (80051ec <MX_TIM5_Init+0x98>)
 8005190:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005194:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005196:	4b15      	ldr	r3, [pc, #84]	; (80051ec <MX_TIM5_Init+0x98>)
 8005198:	2200      	movs	r2, #0
 800519a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800519c:	4813      	ldr	r0, [pc, #76]	; (80051ec <MX_TIM5_Init+0x98>)
 800519e:	f004 fafa 	bl	8009796 <HAL_TIM_Base_Init>
 80051a2:	4603      	mov	r3, r0
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d001      	beq.n	80051ac <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 80051a8:	f7ff fc0a 	bl	80049c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80051ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80051b0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80051b2:	f107 0310 	add.w	r3, r7, #16
 80051b6:	4619      	mov	r1, r3
 80051b8:	480c      	ldr	r0, [pc, #48]	; (80051ec <MX_TIM5_Init+0x98>)
 80051ba:	f004 fdfb 	bl	8009db4 <HAL_TIM_ConfigClockSource>
 80051be:	4603      	mov	r3, r0
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d001      	beq.n	80051c8 <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 80051c4:	f7ff fbfc 	bl	80049c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80051c8:	2300      	movs	r3, #0
 80051ca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80051cc:	2300      	movs	r3, #0
 80051ce:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80051d0:	1d3b      	adds	r3, r7, #4
 80051d2:	4619      	mov	r1, r3
 80051d4:	4805      	ldr	r0, [pc, #20]	; (80051ec <MX_TIM5_Init+0x98>)
 80051d6:	f005 f951 	bl	800a47c <HAL_TIMEx_MasterConfigSynchronization>
 80051da:	4603      	mov	r3, r0
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d001      	beq.n	80051e4 <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 80051e0:	f7ff fbee 	bl	80049c0 <Error_Handler>
  }

}
 80051e4:	bf00      	nop
 80051e6:	3720      	adds	r7, #32
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}
 80051ec:	20001738 	.word	0x20001738
 80051f0:	40000c00 	.word	0x40000c00

080051f4 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b094      	sub	sp, #80	; 0x50
 80051f8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80051fa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80051fe:	2200      	movs	r2, #0
 8005200:	601a      	str	r2, [r3, #0]
 8005202:	605a      	str	r2, [r3, #4]
 8005204:	609a      	str	r2, [r3, #8]
 8005206:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005208:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800520c:	2200      	movs	r2, #0
 800520e:	601a      	str	r2, [r3, #0]
 8005210:	605a      	str	r2, [r3, #4]
 8005212:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005214:	463b      	mov	r3, r7
 8005216:	2234      	movs	r2, #52	; 0x34
 8005218:	2100      	movs	r1, #0
 800521a:	4618      	mov	r0, r3
 800521c:	f006 fde2 	bl	800bde4 <memset>

  htim8.Instance = TIM8;
 8005220:	4b26      	ldr	r3, [pc, #152]	; (80052bc <MX_TIM8_Init+0xc8>)
 8005222:	4a27      	ldr	r2, [pc, #156]	; (80052c0 <MX_TIM8_Init+0xcc>)
 8005224:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8005226:	4b25      	ldr	r3, [pc, #148]	; (80052bc <MX_TIM8_Init+0xc8>)
 8005228:	2200      	movs	r2, #0
 800522a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800522c:	4b23      	ldr	r3, [pc, #140]	; (80052bc <MX_TIM8_Init+0xc8>)
 800522e:	2200      	movs	r2, #0
 8005230:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1;
 8005232:	4b22      	ldr	r3, [pc, #136]	; (80052bc <MX_TIM8_Init+0xc8>)
 8005234:	2201      	movs	r2, #1
 8005236:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005238:	4b20      	ldr	r3, [pc, #128]	; (80052bc <MX_TIM8_Init+0xc8>)
 800523a:	2200      	movs	r2, #0
 800523c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800523e:	4b1f      	ldr	r3, [pc, #124]	; (80052bc <MX_TIM8_Init+0xc8>)
 8005240:	2200      	movs	r2, #0
 8005242:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005244:	4b1d      	ldr	r3, [pc, #116]	; (80052bc <MX_TIM8_Init+0xc8>)
 8005246:	2200      	movs	r2, #0
 8005248:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800524a:	481c      	ldr	r0, [pc, #112]	; (80052bc <MX_TIM8_Init+0xc8>)
 800524c:	f004 faa3 	bl	8009796 <HAL_TIM_Base_Init>
 8005250:	4603      	mov	r3, r0
 8005252:	2b00      	cmp	r3, #0
 8005254:	d001      	beq.n	800525a <MX_TIM8_Init+0x66>
  {
    Error_Handler();
 8005256:	f7ff fbb3 	bl	80049c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800525a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800525e:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8005260:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005264:	4619      	mov	r1, r3
 8005266:	4815      	ldr	r0, [pc, #84]	; (80052bc <MX_TIM8_Init+0xc8>)
 8005268:	f004 fda4 	bl	8009db4 <HAL_TIM_ConfigClockSource>
 800526c:	4603      	mov	r3, r0
 800526e:	2b00      	cmp	r3, #0
 8005270:	d001      	beq.n	8005276 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8005272:	f7ff fba5 	bl	80049c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8005276:	2320      	movs	r3, #32
 8005278:	637b      	str	r3, [r7, #52]	; 0x34
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800527a:	2300      	movs	r3, #0
 800527c:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800527e:	2300      	movs	r3, #0
 8005280:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8005282:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005286:	4619      	mov	r1, r3
 8005288:	480c      	ldr	r0, [pc, #48]	; (80052bc <MX_TIM8_Init+0xc8>)
 800528a:	f005 f8f7 	bl	800a47c <HAL_TIMEx_MasterConfigSynchronization>
 800528e:	4603      	mov	r3, r0
 8005290:	2b00      	cmp	r3, #0
 8005292:	d001      	beq.n	8005298 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8005294:	f7ff fb94 	bl	80049c0 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8005298:	2300      	movs	r3, #0
 800529a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800529c:	2300      	movs	r3, #0
 800529e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80052a0:	463b      	mov	r3, r7
 80052a2:	4619      	mov	r1, r3
 80052a4:	4805      	ldr	r0, [pc, #20]	; (80052bc <MX_TIM8_Init+0xc8>)
 80052a6:	f005 f97f 	bl	800a5a8 <HAL_TIMEx_ConfigBreakDeadTime>
 80052aa:	4603      	mov	r3, r0
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d001      	beq.n	80052b4 <MX_TIM8_Init+0xc0>
  {
    Error_Handler();
 80052b0:	f7ff fb86 	bl	80049c0 <Error_Handler>
  }

}
 80052b4:	bf00      	nop
 80052b6:	3750      	adds	r7, #80	; 0x50
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}
 80052bc:	20001654 	.word	0x20001654
 80052c0:	40013400 	.word	0x40013400

080052c4 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b088      	sub	sp, #32
 80052c8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80052ca:	f107 0310 	add.w	r3, r7, #16
 80052ce:	2200      	movs	r2, #0
 80052d0:	601a      	str	r2, [r3, #0]
 80052d2:	605a      	str	r2, [r3, #4]
 80052d4:	609a      	str	r2, [r3, #8]
 80052d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80052d8:	1d3b      	adds	r3, r7, #4
 80052da:	2200      	movs	r2, #0
 80052dc:	601a      	str	r2, [r3, #0]
 80052de:	605a      	str	r2, [r3, #4]
 80052e0:	609a      	str	r2, [r3, #8]

  htim15.Instance = TIM15;
 80052e2:	4b1f      	ldr	r3, [pc, #124]	; (8005360 <MX_TIM15_Init+0x9c>)
 80052e4:	4a1f      	ldr	r2, [pc, #124]	; (8005364 <MX_TIM15_Init+0xa0>)
 80052e6:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 1024;
 80052e8:	4b1d      	ldr	r3, [pc, #116]	; (8005360 <MX_TIM15_Init+0x9c>)
 80052ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80052ee:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80052f0:	4b1b      	ldr	r3, [pc, #108]	; (8005360 <MX_TIM15_Init+0x9c>)
 80052f2:	2200      	movs	r2, #0
 80052f4:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1024;
 80052f6:	4b1a      	ldr	r3, [pc, #104]	; (8005360 <MX_TIM15_Init+0x9c>)
 80052f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80052fc:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80052fe:	4b18      	ldr	r3, [pc, #96]	; (8005360 <MX_TIM15_Init+0x9c>)
 8005300:	2200      	movs	r2, #0
 8005302:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8005304:	4b16      	ldr	r3, [pc, #88]	; (8005360 <MX_TIM15_Init+0x9c>)
 8005306:	2200      	movs	r2, #0
 8005308:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800530a:	4b15      	ldr	r3, [pc, #84]	; (8005360 <MX_TIM15_Init+0x9c>)
 800530c:	2200      	movs	r2, #0
 800530e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8005310:	4813      	ldr	r0, [pc, #76]	; (8005360 <MX_TIM15_Init+0x9c>)
 8005312:	f004 fa40 	bl	8009796 <HAL_TIM_Base_Init>
 8005316:	4603      	mov	r3, r0
 8005318:	2b00      	cmp	r3, #0
 800531a:	d001      	beq.n	8005320 <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 800531c:	f7ff fb50 	bl	80049c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005320:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005324:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8005326:	f107 0310 	add.w	r3, r7, #16
 800532a:	4619      	mov	r1, r3
 800532c:	480c      	ldr	r0, [pc, #48]	; (8005360 <MX_TIM15_Init+0x9c>)
 800532e:	f004 fd41 	bl	8009db4 <HAL_TIM_ConfigClockSource>
 8005332:	4603      	mov	r3, r0
 8005334:	2b00      	cmp	r3, #0
 8005336:	d001      	beq.n	800533c <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8005338:	f7ff fb42 	bl	80049c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800533c:	2300      	movs	r3, #0
 800533e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005340:	2300      	movs	r3, #0
 8005342:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8005344:	1d3b      	adds	r3, r7, #4
 8005346:	4619      	mov	r1, r3
 8005348:	4805      	ldr	r0, [pc, #20]	; (8005360 <MX_TIM15_Init+0x9c>)
 800534a:	f005 f897 	bl	800a47c <HAL_TIMEx_MasterConfigSynchronization>
 800534e:	4603      	mov	r3, r0
 8005350:	2b00      	cmp	r3, #0
 8005352:	d001      	beq.n	8005358 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8005354:	f7ff fb34 	bl	80049c0 <Error_Handler>
  }

}
 8005358:	bf00      	nop
 800535a:	3720      	adds	r7, #32
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}
 8005360:	200016a0 	.word	0x200016a0
 8005364:	40014000 	.word	0x40014000

08005368 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 800536c:	4b0f      	ldr	r3, [pc, #60]	; (80053ac <MX_TIM16_Init+0x44>)
 800536e:	4a10      	ldr	r2, [pc, #64]	; (80053b0 <MX_TIM16_Init+0x48>)
 8005370:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8005372:	4b0e      	ldr	r3, [pc, #56]	; (80053ac <MX_TIM16_Init+0x44>)
 8005374:	2200      	movs	r2, #0
 8005376:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005378:	4b0c      	ldr	r3, [pc, #48]	; (80053ac <MX_TIM16_Init+0x44>)
 800537a:	2200      	movs	r2, #0
 800537c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 8191;
 800537e:	4b0b      	ldr	r3, [pc, #44]	; (80053ac <MX_TIM16_Init+0x44>)
 8005380:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8005384:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005386:	4b09      	ldr	r3, [pc, #36]	; (80053ac <MX_TIM16_Init+0x44>)
 8005388:	2200      	movs	r2, #0
 800538a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800538c:	4b07      	ldr	r3, [pc, #28]	; (80053ac <MX_TIM16_Init+0x44>)
 800538e:	2200      	movs	r2, #0
 8005390:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005392:	4b06      	ldr	r3, [pc, #24]	; (80053ac <MX_TIM16_Init+0x44>)
 8005394:	2200      	movs	r2, #0
 8005396:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8005398:	4804      	ldr	r0, [pc, #16]	; (80053ac <MX_TIM16_Init+0x44>)
 800539a:	f004 f9fc 	bl	8009796 <HAL_TIM_Base_Init>
 800539e:	4603      	mov	r3, r0
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d001      	beq.n	80053a8 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80053a4:	f7ff fb0c 	bl	80049c0 <Error_Handler>
  }

}
 80053a8:	bf00      	nop
 80053aa:	bd80      	pop	{r7, pc}
 80053ac:	2000181c 	.word	0x2000181c
 80053b0:	40014400 	.word	0x40014400

080053b4 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	af00      	add	r7, sp, #0

  htim17.Instance = TIM17;
 80053b8:	4b0f      	ldr	r3, [pc, #60]	; (80053f8 <MX_TIM17_Init+0x44>)
 80053ba:	4a10      	ldr	r2, [pc, #64]	; (80053fc <MX_TIM17_Init+0x48>)
 80053bc:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 1023;
 80053be:	4b0e      	ldr	r3, [pc, #56]	; (80053f8 <MX_TIM17_Init+0x44>)
 80053c0:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80053c4:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80053c6:	4b0c      	ldr	r3, [pc, #48]	; (80053f8 <MX_TIM17_Init+0x44>)
 80053c8:	2200      	movs	r2, #0
 80053ca:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 64;
 80053cc:	4b0a      	ldr	r3, [pc, #40]	; (80053f8 <MX_TIM17_Init+0x44>)
 80053ce:	2240      	movs	r2, #64	; 0x40
 80053d0:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80053d2:	4b09      	ldr	r3, [pc, #36]	; (80053f8 <MX_TIM17_Init+0x44>)
 80053d4:	2200      	movs	r2, #0
 80053d6:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80053d8:	4b07      	ldr	r3, [pc, #28]	; (80053f8 <MX_TIM17_Init+0x44>)
 80053da:	2200      	movs	r2, #0
 80053dc:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80053de:	4b06      	ldr	r3, [pc, #24]	; (80053f8 <MX_TIM17_Init+0x44>)
 80053e0:	2200      	movs	r2, #0
 80053e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80053e4:	4804      	ldr	r0, [pc, #16]	; (80053f8 <MX_TIM17_Init+0x44>)
 80053e6:	f004 f9d6 	bl	8009796 <HAL_TIM_Base_Init>
 80053ea:	4603      	mov	r3, r0
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d001      	beq.n	80053f4 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 80053f0:	f7ff fae6 	bl	80049c0 <Error_Handler>
  }

}
 80053f4:	bf00      	nop
 80053f6:	bd80      	pop	{r7, pc}
 80053f8:	200016ec 	.word	0x200016ec
 80053fc:	40014800 	.word	0x40014800

08005400 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b08a      	sub	sp, #40	; 0x28
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005408:	f107 0314 	add.w	r3, r7, #20
 800540c:	2200      	movs	r2, #0
 800540e:	601a      	str	r2, [r3, #0]
 8005410:	605a      	str	r2, [r3, #4]
 8005412:	609a      	str	r2, [r3, #8]
 8005414:	60da      	str	r2, [r3, #12]
 8005416:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a23      	ldr	r2, [pc, #140]	; (80054ac <HAL_TIM_Encoder_MspInit+0xac>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d13f      	bne.n	80054a2 <HAL_TIM_Encoder_MspInit+0xa2>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005422:	4b23      	ldr	r3, [pc, #140]	; (80054b0 <HAL_TIM_Encoder_MspInit+0xb0>)
 8005424:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005426:	4a22      	ldr	r2, [pc, #136]	; (80054b0 <HAL_TIM_Encoder_MspInit+0xb0>)
 8005428:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800542c:	6613      	str	r3, [r2, #96]	; 0x60
 800542e:	4b20      	ldr	r3, [pc, #128]	; (80054b0 <HAL_TIM_Encoder_MspInit+0xb0>)
 8005430:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005432:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005436:	613b      	str	r3, [r7, #16]
 8005438:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800543a:	4b1d      	ldr	r3, [pc, #116]	; (80054b0 <HAL_TIM_Encoder_MspInit+0xb0>)
 800543c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800543e:	4a1c      	ldr	r2, [pc, #112]	; (80054b0 <HAL_TIM_Encoder_MspInit+0xb0>)
 8005440:	f043 0304 	orr.w	r3, r3, #4
 8005444:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005446:	4b1a      	ldr	r3, [pc, #104]	; (80054b0 <HAL_TIM_Encoder_MspInit+0xb0>)
 8005448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800544a:	f003 0304 	and.w	r3, r3, #4
 800544e:	60fb      	str	r3, [r7, #12]
 8005450:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005452:	2303      	movs	r3, #3
 8005454:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005456:	2302      	movs	r3, #2
 8005458:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800545a:	2300      	movs	r3, #0
 800545c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800545e:	2300      	movs	r3, #0
 8005460:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8005462:	2302      	movs	r3, #2
 8005464:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005466:	f107 0314 	add.w	r3, r7, #20
 800546a:	4619      	mov	r1, r3
 800546c:	4811      	ldr	r0, [pc, #68]	; (80054b4 <HAL_TIM_Encoder_MspInit+0xb4>)
 800546e:	f002 fcd3 	bl	8007e18 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8005472:	2200      	movs	r2, #0
 8005474:	2100      	movs	r1, #0
 8005476:	2018      	movs	r0, #24
 8005478:	f001 fdb9 	bl	8006fee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800547c:	2018      	movs	r0, #24
 800547e:	f001 fdd0 	bl	8007022 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 8005482:	2200      	movs	r2, #0
 8005484:	2101      	movs	r1, #1
 8005486:	2019      	movs	r0, #25
 8005488:	f001 fdb1 	bl	8006fee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800548c:	2019      	movs	r0, #25
 800548e:	f001 fdc8 	bl	8007022 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 1, 0);
 8005492:	2200      	movs	r2, #0
 8005494:	2101      	movs	r1, #1
 8005496:	201a      	movs	r0, #26
 8005498:	f001 fda9 	bl	8006fee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 800549c:	201a      	movs	r0, #26
 800549e:	f001 fdc0 	bl	8007022 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80054a2:	bf00      	nop
 80054a4:	3728      	adds	r7, #40	; 0x28
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	bf00      	nop
 80054ac:	40012c00 	.word	0x40012c00
 80054b0:	40021000 	.word	0x40021000
 80054b4:	48000800 	.word	0x48000800

080054b8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b08e      	sub	sp, #56	; 0x38
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80054c4:	2200      	movs	r2, #0
 80054c6:	601a      	str	r2, [r3, #0]
 80054c8:	605a      	str	r2, [r3, #4]
 80054ca:	609a      	str	r2, [r3, #8]
 80054cc:	60da      	str	r2, [r3, #12]
 80054ce:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054d8:	d131      	bne.n	800553e <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80054da:	4b53      	ldr	r3, [pc, #332]	; (8005628 <HAL_TIM_Base_MspInit+0x170>)
 80054dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054de:	4a52      	ldr	r2, [pc, #328]	; (8005628 <HAL_TIM_Base_MspInit+0x170>)
 80054e0:	f043 0301 	orr.w	r3, r3, #1
 80054e4:	6593      	str	r3, [r2, #88]	; 0x58
 80054e6:	4b50      	ldr	r3, [pc, #320]	; (8005628 <HAL_TIM_Base_MspInit+0x170>)
 80054e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054ea:	f003 0301 	and.w	r3, r3, #1
 80054ee:	623b      	str	r3, [r7, #32]
 80054f0:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80054f2:	4b4d      	ldr	r3, [pc, #308]	; (8005628 <HAL_TIM_Base_MspInit+0x170>)
 80054f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054f6:	4a4c      	ldr	r2, [pc, #304]	; (8005628 <HAL_TIM_Base_MspInit+0x170>)
 80054f8:	f043 0301 	orr.w	r3, r3, #1
 80054fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80054fe:	4b4a      	ldr	r3, [pc, #296]	; (8005628 <HAL_TIM_Base_MspInit+0x170>)
 8005500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005502:	f003 0301 	and.w	r3, r3, #1
 8005506:	61fb      	str	r3, [r7, #28]
 8005508:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800550a:	2301      	movs	r3, #1
 800550c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800550e:	2302      	movs	r3, #2
 8005510:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005512:	2300      	movs	r3, #0
 8005514:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005516:	2300      	movs	r3, #0
 8005518:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800551a:	2301      	movs	r3, #1
 800551c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800551e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005522:	4619      	mov	r1, r3
 8005524:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005528:	f002 fc76 	bl	8007e18 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 800552c:	2200      	movs	r2, #0
 800552e:	2101      	movs	r1, #1
 8005530:	201c      	movs	r0, #28
 8005532:	f001 fd5c 	bl	8006fee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005536:	201c      	movs	r0, #28
 8005538:	f001 fd73 	bl	8007022 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 800553c:	e070      	b.n	8005620 <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM5)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a3a      	ldr	r2, [pc, #232]	; (800562c <HAL_TIM_Base_MspInit+0x174>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d10c      	bne.n	8005562 <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005548:	4b37      	ldr	r3, [pc, #220]	; (8005628 <HAL_TIM_Base_MspInit+0x170>)
 800554a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800554c:	4a36      	ldr	r2, [pc, #216]	; (8005628 <HAL_TIM_Base_MspInit+0x170>)
 800554e:	f043 0308 	orr.w	r3, r3, #8
 8005552:	6593      	str	r3, [r2, #88]	; 0x58
 8005554:	4b34      	ldr	r3, [pc, #208]	; (8005628 <HAL_TIM_Base_MspInit+0x170>)
 8005556:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005558:	f003 0308 	and.w	r3, r3, #8
 800555c:	61bb      	str	r3, [r7, #24]
 800555e:	69bb      	ldr	r3, [r7, #24]
}
 8005560:	e05e      	b.n	8005620 <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM8)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a32      	ldr	r2, [pc, #200]	; (8005630 <HAL_TIM_Base_MspInit+0x178>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d10c      	bne.n	8005586 <HAL_TIM_Base_MspInit+0xce>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800556c:	4b2e      	ldr	r3, [pc, #184]	; (8005628 <HAL_TIM_Base_MspInit+0x170>)
 800556e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005570:	4a2d      	ldr	r2, [pc, #180]	; (8005628 <HAL_TIM_Base_MspInit+0x170>)
 8005572:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005576:	6613      	str	r3, [r2, #96]	; 0x60
 8005578:	4b2b      	ldr	r3, [pc, #172]	; (8005628 <HAL_TIM_Base_MspInit+0x170>)
 800557a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800557c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005580:	617b      	str	r3, [r7, #20]
 8005582:	697b      	ldr	r3, [r7, #20]
}
 8005584:	e04c      	b.n	8005620 <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM15)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a2a      	ldr	r2, [pc, #168]	; (8005634 <HAL_TIM_Base_MspInit+0x17c>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d114      	bne.n	80055ba <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8005590:	4b25      	ldr	r3, [pc, #148]	; (8005628 <HAL_TIM_Base_MspInit+0x170>)
 8005592:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005594:	4a24      	ldr	r2, [pc, #144]	; (8005628 <HAL_TIM_Base_MspInit+0x170>)
 8005596:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800559a:	6613      	str	r3, [r2, #96]	; 0x60
 800559c:	4b22      	ldr	r3, [pc, #136]	; (8005628 <HAL_TIM_Base_MspInit+0x170>)
 800559e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055a4:	613b      	str	r3, [r7, #16]
 80055a6:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80055a8:	2200      	movs	r2, #0
 80055aa:	2100      	movs	r1, #0
 80055ac:	2018      	movs	r0, #24
 80055ae:	f001 fd1e 	bl	8006fee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80055b2:	2018      	movs	r0, #24
 80055b4:	f001 fd35 	bl	8007022 <HAL_NVIC_EnableIRQ>
}
 80055b8:	e032      	b.n	8005620 <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM16)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a1e      	ldr	r2, [pc, #120]	; (8005638 <HAL_TIM_Base_MspInit+0x180>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d114      	bne.n	80055ee <HAL_TIM_Base_MspInit+0x136>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80055c4:	4b18      	ldr	r3, [pc, #96]	; (8005628 <HAL_TIM_Base_MspInit+0x170>)
 80055c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055c8:	4a17      	ldr	r2, [pc, #92]	; (8005628 <HAL_TIM_Base_MspInit+0x170>)
 80055ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055ce:	6613      	str	r3, [r2, #96]	; 0x60
 80055d0:	4b15      	ldr	r3, [pc, #84]	; (8005628 <HAL_TIM_Base_MspInit+0x170>)
 80055d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055d8:	60fb      	str	r3, [r7, #12]
 80055da:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 80055dc:	2200      	movs	r2, #0
 80055de:	2101      	movs	r1, #1
 80055e0:	2019      	movs	r0, #25
 80055e2:	f001 fd04 	bl	8006fee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80055e6:	2019      	movs	r0, #25
 80055e8:	f001 fd1b 	bl	8007022 <HAL_NVIC_EnableIRQ>
}
 80055ec:	e018      	b.n	8005620 <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM17)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a12      	ldr	r2, [pc, #72]	; (800563c <HAL_TIM_Base_MspInit+0x184>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d113      	bne.n	8005620 <HAL_TIM_Base_MspInit+0x168>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80055f8:	4b0b      	ldr	r3, [pc, #44]	; (8005628 <HAL_TIM_Base_MspInit+0x170>)
 80055fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055fc:	4a0a      	ldr	r2, [pc, #40]	; (8005628 <HAL_TIM_Base_MspInit+0x170>)
 80055fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005602:	6613      	str	r3, [r2, #96]	; 0x60
 8005604:	4b08      	ldr	r3, [pc, #32]	; (8005628 <HAL_TIM_Base_MspInit+0x170>)
 8005606:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005608:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800560c:	60bb      	str	r3, [r7, #8]
 800560e:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 1, 0);
 8005610:	2200      	movs	r2, #0
 8005612:	2101      	movs	r1, #1
 8005614:	201a      	movs	r0, #26
 8005616:	f001 fcea 	bl	8006fee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 800561a:	201a      	movs	r0, #26
 800561c:	f001 fd01 	bl	8007022 <HAL_NVIC_EnableIRQ>
}
 8005620:	bf00      	nop
 8005622:	3738      	adds	r7, #56	; 0x38
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}
 8005628:	40021000 	.word	0x40021000
 800562c:	40000c00 	.word	0x40000c00
 8005630:	40013400 	.word	0x40013400
 8005634:	40014000 	.word	0x40014000
 8005638:	40014400 	.word	0x40014400
 800563c:	40014800 	.word	0x40014800

08005640 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005640:	480d      	ldr	r0, [pc, #52]	; (8005678 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005642:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005644:	480d      	ldr	r0, [pc, #52]	; (800567c <LoopForever+0x6>)
  ldr r1, =_edata
 8005646:	490e      	ldr	r1, [pc, #56]	; (8005680 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005648:	4a0e      	ldr	r2, [pc, #56]	; (8005684 <LoopForever+0xe>)
  movs r3, #0
 800564a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800564c:	e002      	b.n	8005654 <LoopCopyDataInit>

0800564e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800564e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005650:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005652:	3304      	adds	r3, #4

08005654 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005654:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005656:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005658:	d3f9      	bcc.n	800564e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800565a:	4a0b      	ldr	r2, [pc, #44]	; (8005688 <LoopForever+0x12>)
  ldr r4, =_ebss
 800565c:	4c0b      	ldr	r4, [pc, #44]	; (800568c <LoopForever+0x16>)
  movs r3, #0
 800565e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005660:	e001      	b.n	8005666 <LoopFillZerobss>

08005662 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005662:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005664:	3204      	adds	r2, #4

08005666 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005666:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005668:	d3fb      	bcc.n	8005662 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800566a:	f7ff fc83 	bl	8004f74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800566e:	f006 fb95 	bl	800bd9c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005672:	f7ff f889 	bl	8004788 <main>

08005676 <LoopForever>:

LoopForever:
    b LoopForever
 8005676:	e7fe      	b.n	8005676 <LoopForever>
  ldr   r0, =_estack
 8005678:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800567c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005680:	200013d0 	.word	0x200013d0
  ldr r2, =_sidata
 8005684:	0800efc8 	.word	0x0800efc8
  ldr r2, =_sbss
 8005688:	200013d0 	.word	0x200013d0
  ldr r4, =_ebss
 800568c:	20001870 	.word	0x20001870

08005690 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005690:	e7fe      	b.n	8005690 <ADC1_2_IRQHandler>

08005692 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005692:	b580      	push	{r7, lr}
 8005694:	b082      	sub	sp, #8
 8005696:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005698:	2300      	movs	r3, #0
 800569a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800569c:	2003      	movs	r0, #3
 800569e:	f001 fc9b 	bl	8006fd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80056a2:	2000      	movs	r0, #0
 80056a4:	f000 f80e 	bl	80056c4 <HAL_InitTick>
 80056a8:	4603      	mov	r3, r0
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d002      	beq.n	80056b4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	71fb      	strb	r3, [r7, #7]
 80056b2:	e001      	b.n	80056b8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80056b4:	f7ff fa54 	bl	8004b60 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80056b8:	79fb      	ldrb	r3, [r7, #7]

}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3708      	adds	r7, #8
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}
	...

080056c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b084      	sub	sp, #16
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80056cc:	2300      	movs	r3, #0
 80056ce:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80056d0:	4b16      	ldr	r3, [pc, #88]	; (800572c <HAL_InitTick+0x68>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d022      	beq.n	800571e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80056d8:	4b15      	ldr	r3, [pc, #84]	; (8005730 <HAL_InitTick+0x6c>)
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	4b13      	ldr	r3, [pc, #76]	; (800572c <HAL_InitTick+0x68>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80056e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80056e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80056ec:	4618      	mov	r0, r3
 80056ee:	f001 fca6 	bl	800703e <HAL_SYSTICK_Config>
 80056f2:	4603      	mov	r3, r0
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d10f      	bne.n	8005718 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2b0f      	cmp	r3, #15
 80056fc:	d809      	bhi.n	8005712 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80056fe:	2200      	movs	r2, #0
 8005700:	6879      	ldr	r1, [r7, #4]
 8005702:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005706:	f001 fc72 	bl	8006fee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800570a:	4a0a      	ldr	r2, [pc, #40]	; (8005734 <HAL_InitTick+0x70>)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6013      	str	r3, [r2, #0]
 8005710:	e007      	b.n	8005722 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	73fb      	strb	r3, [r7, #15]
 8005716:	e004      	b.n	8005722 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	73fb      	strb	r3, [r7, #15]
 800571c:	e001      	b.n	8005722 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800571e:	2301      	movs	r3, #1
 8005720:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005722:	7bfb      	ldrb	r3, [r7, #15]
}
 8005724:	4618      	mov	r0, r3
 8005726:	3710      	adds	r7, #16
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}
 800572c:	200001b4 	.word	0x200001b4
 8005730:	200001ac 	.word	0x200001ac
 8005734:	200001b0 	.word	0x200001b0

08005738 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005738:	b480      	push	{r7}
 800573a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800573c:	4b05      	ldr	r3, [pc, #20]	; (8005754 <HAL_IncTick+0x1c>)
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	4b05      	ldr	r3, [pc, #20]	; (8005758 <HAL_IncTick+0x20>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4413      	add	r3, r2
 8005746:	4a03      	ldr	r2, [pc, #12]	; (8005754 <HAL_IncTick+0x1c>)
 8005748:	6013      	str	r3, [r2, #0]
}
 800574a:	bf00      	nop
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr
 8005754:	20001868 	.word	0x20001868
 8005758:	200001b4 	.word	0x200001b4

0800575c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800575c:	b480      	push	{r7}
 800575e:	af00      	add	r7, sp, #0
  return uwTick;
 8005760:	4b03      	ldr	r3, [pc, #12]	; (8005770 <HAL_GetTick+0x14>)
 8005762:	681b      	ldr	r3, [r3, #0]
}
 8005764:	4618      	mov	r0, r3
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr
 800576e:	bf00      	nop
 8005770:	20001868 	.word	0x20001868

08005774 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b084      	sub	sp, #16
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800577c:	f7ff ffee 	bl	800575c <HAL_GetTick>
 8005780:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800578c:	d004      	beq.n	8005798 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800578e:	4b09      	ldr	r3, [pc, #36]	; (80057b4 <HAL_Delay+0x40>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	68fa      	ldr	r2, [r7, #12]
 8005794:	4413      	add	r3, r2
 8005796:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005798:	bf00      	nop
 800579a:	f7ff ffdf 	bl	800575c <HAL_GetTick>
 800579e:	4602      	mov	r2, r0
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	1ad3      	subs	r3, r2, r3
 80057a4:	68fa      	ldr	r2, [r7, #12]
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d8f7      	bhi.n	800579a <HAL_Delay+0x26>
  {
  }
}
 80057aa:	bf00      	nop
 80057ac:	3710      	adds	r7, #16
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}
 80057b2:	bf00      	nop
 80057b4:	200001b4 	.word	0x200001b4

080057b8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b083      	sub	sp, #12
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	431a      	orrs	r2, r3
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	609a      	str	r2, [r3, #8]
}
 80057d2:	bf00      	nop
 80057d4:	370c      	adds	r7, #12
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr

080057de <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80057de:	b480      	push	{r7}
 80057e0:	b083      	sub	sp, #12
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	6078      	str	r0, [r7, #4]
 80057e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	431a      	orrs	r2, r3
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	609a      	str	r2, [r3, #8]
}
 80057f8:	bf00      	nop
 80057fa:	370c      	adds	r7, #12
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr

08005804 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005804:	b480      	push	{r7}
 8005806:	b083      	sub	sp, #12
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8005814:	4618      	mov	r0, r3
 8005816:	370c      	adds	r7, #12
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr

08005820 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005820:	b490      	push	{r4, r7}
 8005822:	b084      	sub	sp, #16
 8005824:	af00      	add	r7, sp, #0
 8005826:	60f8      	str	r0, [r7, #12]
 8005828:	60b9      	str	r1, [r7, #8]
 800582a:	607a      	str	r2, [r7, #4]
 800582c:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	3360      	adds	r3, #96	; 0x60
 8005832:	461a      	mov	r2, r3
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	4413      	add	r3, r2
 800583a:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800583c:	6822      	ldr	r2, [r4, #0]
 800583e:	4b08      	ldr	r3, [pc, #32]	; (8005860 <LL_ADC_SetOffset+0x40>)
 8005840:	4013      	ands	r3, r2
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8005848:	683a      	ldr	r2, [r7, #0]
 800584a:	430a      	orrs	r2, r1
 800584c:	4313      	orrs	r3, r2
 800584e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005852:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8005854:	bf00      	nop
 8005856:	3710      	adds	r7, #16
 8005858:	46bd      	mov	sp, r7
 800585a:	bc90      	pop	{r4, r7}
 800585c:	4770      	bx	lr
 800585e:	bf00      	nop
 8005860:	03fff000 	.word	0x03fff000

08005864 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8005864:	b490      	push	{r4, r7}
 8005866:	b082      	sub	sp, #8
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	3360      	adds	r3, #96	; 0x60
 8005872:	461a      	mov	r2, r3
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	4413      	add	r3, r2
 800587a:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800587c:	6823      	ldr	r3, [r4, #0]
 800587e:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8005882:	4618      	mov	r0, r3
 8005884:	3708      	adds	r7, #8
 8005886:	46bd      	mov	sp, r7
 8005888:	bc90      	pop	{r4, r7}
 800588a:	4770      	bx	lr

0800588c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800588c:	b490      	push	{r4, r7}
 800588e:	b084      	sub	sp, #16
 8005890:	af00      	add	r7, sp, #0
 8005892:	60f8      	str	r0, [r7, #12]
 8005894:	60b9      	str	r1, [r7, #8]
 8005896:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	3360      	adds	r3, #96	; 0x60
 800589c:	461a      	mov	r2, r3
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	009b      	lsls	r3, r3, #2
 80058a2:	4413      	add	r3, r2
 80058a4:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80058a6:	6823      	ldr	r3, [r4, #0]
 80058a8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80058b2:	bf00      	nop
 80058b4:	3710      	adds	r7, #16
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bc90      	pop	{r4, r7}
 80058ba:	4770      	bx	lr

080058bc <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80058bc:	b490      	push	{r4, r7}
 80058be:	b084      	sub	sp, #16
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	60f8      	str	r0, [r7, #12]
 80058c4:	60b9      	str	r1, [r7, #8]
 80058c6:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	3360      	adds	r3, #96	; 0x60
 80058cc:	461a      	mov	r2, r3
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	4413      	add	r3, r2
 80058d4:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80058d6:	6823      	ldr	r3, [r4, #0]
 80058d8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	4313      	orrs	r3, r2
 80058e0:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80058e2:	bf00      	nop
 80058e4:	3710      	adds	r7, #16
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bc90      	pop	{r4, r7}
 80058ea:	4770      	bx	lr

080058ec <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80058ec:	b490      	push	{r4, r7}
 80058ee:	b084      	sub	sp, #16
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	60f8      	str	r0, [r7, #12]
 80058f4:	60b9      	str	r1, [r7, #8]
 80058f6:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	3360      	adds	r3, #96	; 0x60
 80058fc:	461a      	mov	r2, r3
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	009b      	lsls	r3, r3, #2
 8005902:	4413      	add	r3, r2
 8005904:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8005906:	6823      	ldr	r3, [r4, #0]
 8005908:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	4313      	orrs	r3, r2
 8005910:	6023      	str	r3, [r4, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8005912:	bf00      	nop
 8005914:	3710      	adds	r7, #16
 8005916:	46bd      	mov	sp, r7
 8005918:	bc90      	pop	{r4, r7}
 800591a:	4770      	bx	lr

0800591c <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800591c:	b480      	push	{r7}
 800591e:	b083      	sub	sp, #12
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	695b      	ldr	r3, [r3, #20]
 800592a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	431a      	orrs	r2, r3
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	615a      	str	r2, [r3, #20]
}
 8005936:	bf00      	nop
 8005938:	370c      	adds	r7, #12
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr

08005942 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005942:	b490      	push	{r4, r7}
 8005944:	b084      	sub	sp, #16
 8005946:	af00      	add	r7, sp, #0
 8005948:	60f8      	str	r0, [r7, #12]
 800594a:	60b9      	str	r1, [r7, #8]
 800594c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	3330      	adds	r3, #48	; 0x30
 8005952:	461a      	mov	r2, r3
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	0a1b      	lsrs	r3, r3, #8
 8005958:	009b      	lsls	r3, r3, #2
 800595a:	f003 030c 	and.w	r3, r3, #12
 800595e:	4413      	add	r3, r2
 8005960:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8005962:	6822      	ldr	r2, [r4, #0]
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	f003 031f 	and.w	r3, r3, #31
 800596a:	211f      	movs	r1, #31
 800596c:	fa01 f303 	lsl.w	r3, r1, r3
 8005970:	43db      	mvns	r3, r3
 8005972:	401a      	ands	r2, r3
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	0e9b      	lsrs	r3, r3, #26
 8005978:	f003 011f 	and.w	r1, r3, #31
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	f003 031f 	and.w	r3, r3, #31
 8005982:	fa01 f303 	lsl.w	r3, r1, r3
 8005986:	4313      	orrs	r3, r2
 8005988:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800598a:	bf00      	nop
 800598c:	3710      	adds	r7, #16
 800598e:	46bd      	mov	sp, r7
 8005990:	bc90      	pop	{r4, r7}
 8005992:	4770      	bx	lr

08005994 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005994:	b490      	push	{r4, r7}
 8005996:	b084      	sub	sp, #16
 8005998:	af00      	add	r7, sp, #0
 800599a:	60f8      	str	r0, [r7, #12]
 800599c:	60b9      	str	r1, [r7, #8]
 800599e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	3314      	adds	r3, #20
 80059a4:	461a      	mov	r2, r3
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	0e5b      	lsrs	r3, r3, #25
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	f003 0304 	and.w	r3, r3, #4
 80059b0:	4413      	add	r3, r2
 80059b2:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80059b4:	6822      	ldr	r2, [r4, #0]
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	0d1b      	lsrs	r3, r3, #20
 80059ba:	f003 031f 	and.w	r3, r3, #31
 80059be:	2107      	movs	r1, #7
 80059c0:	fa01 f303 	lsl.w	r3, r1, r3
 80059c4:	43db      	mvns	r3, r3
 80059c6:	401a      	ands	r2, r3
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	0d1b      	lsrs	r3, r3, #20
 80059cc:	f003 031f 	and.w	r3, r3, #31
 80059d0:	6879      	ldr	r1, [r7, #4]
 80059d2:	fa01 f303 	lsl.w	r3, r1, r3
 80059d6:	4313      	orrs	r3, r2
 80059d8:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80059da:	bf00      	nop
 80059dc:	3710      	adds	r7, #16
 80059de:	46bd      	mov	sp, r7
 80059e0:	bc90      	pop	{r4, r7}
 80059e2:	4770      	bx	lr

080059e4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b085      	sub	sp, #20
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	60f8      	str	r0, [r7, #12]
 80059ec:	60b9      	str	r1, [r7, #8]
 80059ee:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059fc:	43db      	mvns	r3, r3
 80059fe:	401a      	ands	r2, r3
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f003 0318 	and.w	r3, r3, #24
 8005a06:	4908      	ldr	r1, [pc, #32]	; (8005a28 <LL_ADC_SetChannelSingleDiff+0x44>)
 8005a08:	40d9      	lsrs	r1, r3
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	400b      	ands	r3, r1
 8005a0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a12:	431a      	orrs	r2, r3
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8005a1a:	bf00      	nop
 8005a1c:	3714      	adds	r7, #20
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr
 8005a26:	bf00      	nop
 8005a28:	0007ffff 	.word	0x0007ffff

08005a2c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b083      	sub	sp, #12
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8005a3c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005a40:	687a      	ldr	r2, [r7, #4]
 8005a42:	6093      	str	r3, [r2, #8]
}
 8005a44:	bf00      	nop
 8005a46:	370c      	adds	r7, #12
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr

08005a50 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b083      	sub	sp, #12
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a64:	d101      	bne.n	8005a6a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005a66:	2301      	movs	r3, #1
 8005a68:	e000      	b.n	8005a6c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005a6a:	2300      	movs	r3, #0
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	370c      	adds	r7, #12
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr

08005a78 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8005a88:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005a8c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005a94:	bf00      	nop
 8005a96:	370c      	adds	r7, #12
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr

08005aa0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b083      	sub	sp, #12
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ab0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ab4:	d101      	bne.n	8005aba <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e000      	b.n	8005abc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005aba:	2300      	movs	r3, #0
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	370c      	adds	r7, #12
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr

08005ac8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b083      	sub	sp, #12
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	f003 0301 	and.w	r3, r3, #1
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d101      	bne.n	8005ae0 <LL_ADC_IsEnabled+0x18>
 8005adc:	2301      	movs	r3, #1
 8005ade:	e000      	b.n	8005ae2 <LL_ADC_IsEnabled+0x1a>
 8005ae0:	2300      	movs	r3, #0
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	370c      	adds	r7, #12
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aec:	4770      	bx	lr

08005aee <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005aee:	b480      	push	{r7}
 8005af0:	b083      	sub	sp, #12
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	689b      	ldr	r3, [r3, #8]
 8005afa:	f003 0304 	and.w	r3, r3, #4
 8005afe:	2b04      	cmp	r3, #4
 8005b00:	d101      	bne.n	8005b06 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005b02:	2301      	movs	r3, #1
 8005b04:	e000      	b.n	8005b08 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005b06:	2300      	movs	r3, #0
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	370c      	adds	r7, #12
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b12:	4770      	bx	lr

08005b14 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b083      	sub	sp, #12
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	f003 0308 	and.w	r3, r3, #8
 8005b24:	2b08      	cmp	r3, #8
 8005b26:	d101      	bne.n	8005b2c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005b28:	2301      	movs	r3, #1
 8005b2a:	e000      	b.n	8005b2e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005b2c:	2300      	movs	r3, #0
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	370c      	adds	r7, #12
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr
	...

08005b3c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005b3c:	b590      	push	{r4, r7, lr}
 8005b3e:	b089      	sub	sp, #36	; 0x24
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005b44:	2300      	movs	r3, #0
 8005b46:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d101      	bne.n	8005b56 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	e1ad      	b.n	8005eb2 <HAL_ADC_Init+0x376>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	695b      	ldr	r3, [r3, #20]
 8005b5a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d109      	bne.n	8005b78 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f7fe f815 	bl	8003b94 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2200      	movs	r2, #0
 8005b74:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f7ff ff67 	bl	8005a50 <LL_ADC_IsDeepPowerDownEnabled>
 8005b82:	4603      	mov	r3, r0
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d004      	beq.n	8005b92 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f7ff ff4d 	bl	8005a2c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4618      	mov	r0, r3
 8005b98:	f7ff ff82 	bl	8005aa0 <LL_ADC_IsInternalRegulatorEnabled>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d113      	bne.n	8005bca <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f7ff ff66 	bl	8005a78 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8005bac:	4b9e      	ldr	r3, [pc, #632]	; (8005e28 <HAL_ADC_Init+0x2ec>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	099b      	lsrs	r3, r3, #6
 8005bb2:	4a9e      	ldr	r2, [pc, #632]	; (8005e2c <HAL_ADC_Init+0x2f0>)
 8005bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8005bb8:	099b      	lsrs	r3, r3, #6
 8005bba:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005bbc:	e002      	b.n	8005bc4 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	3b01      	subs	r3, #1
 8005bc2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d1f9      	bne.n	8005bbe <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f7ff ff66 	bl	8005aa0 <LL_ADC_IsInternalRegulatorEnabled>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d10d      	bne.n	8005bf6 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bde:	f043 0210 	orr.w	r2, r3, #16
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bea:	f043 0201 	orr.w	r2, r3, #1
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f7ff ff77 	bl	8005aee <LL_ADC_REG_IsConversionOngoing>
 8005c00:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c06:	f003 0310 	and.w	r3, r3, #16
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	f040 8148 	bne.w	8005ea0 <HAL_ADC_Init+0x364>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	f040 8144 	bne.w	8005ea0 <HAL_ADC_Init+0x364>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c1c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005c20:	f043 0202 	orr.w	r2, r3, #2
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f7ff ff4b 	bl	8005ac8 <LL_ADC_IsEnabled>
 8005c32:	4603      	mov	r3, r0
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d141      	bne.n	8005cbc <HAL_ADC_Init+0x180>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005c40:	d004      	beq.n	8005c4c <HAL_ADC_Init+0x110>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a7a      	ldr	r2, [pc, #488]	; (8005e30 <HAL_ADC_Init+0x2f4>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d10f      	bne.n	8005c6c <HAL_ADC_Init+0x130>
 8005c4c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005c50:	f7ff ff3a 	bl	8005ac8 <LL_ADC_IsEnabled>
 8005c54:	4604      	mov	r4, r0
 8005c56:	4876      	ldr	r0, [pc, #472]	; (8005e30 <HAL_ADC_Init+0x2f4>)
 8005c58:	f7ff ff36 	bl	8005ac8 <LL_ADC_IsEnabled>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	4323      	orrs	r3, r4
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	bf0c      	ite	eq
 8005c64:	2301      	moveq	r3, #1
 8005c66:	2300      	movne	r3, #0
 8005c68:	b2db      	uxtb	r3, r3
 8005c6a:	e012      	b.n	8005c92 <HAL_ADC_Init+0x156>
 8005c6c:	4871      	ldr	r0, [pc, #452]	; (8005e34 <HAL_ADC_Init+0x2f8>)
 8005c6e:	f7ff ff2b 	bl	8005ac8 <LL_ADC_IsEnabled>
 8005c72:	4604      	mov	r4, r0
 8005c74:	4870      	ldr	r0, [pc, #448]	; (8005e38 <HAL_ADC_Init+0x2fc>)
 8005c76:	f7ff ff27 	bl	8005ac8 <LL_ADC_IsEnabled>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	431c      	orrs	r4, r3
 8005c7e:	486f      	ldr	r0, [pc, #444]	; (8005e3c <HAL_ADC_Init+0x300>)
 8005c80:	f7ff ff22 	bl	8005ac8 <LL_ADC_IsEnabled>
 8005c84:	4603      	mov	r3, r0
 8005c86:	4323      	orrs	r3, r4
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	bf0c      	ite	eq
 8005c8c:	2301      	moveq	r3, #1
 8005c8e:	2300      	movne	r3, #0
 8005c90:	b2db      	uxtb	r3, r3
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d012      	beq.n	8005cbc <HAL_ADC_Init+0x180>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005c9e:	d004      	beq.n	8005caa <HAL_ADC_Init+0x16e>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a62      	ldr	r2, [pc, #392]	; (8005e30 <HAL_ADC_Init+0x2f4>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d101      	bne.n	8005cae <HAL_ADC_Init+0x172>
 8005caa:	4a65      	ldr	r2, [pc, #404]	; (8005e40 <HAL_ADC_Init+0x304>)
 8005cac:	e000      	b.n	8005cb0 <HAL_ADC_Init+0x174>
 8005cae:	4a65      	ldr	r2, [pc, #404]	; (8005e44 <HAL_ADC_Init+0x308>)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	4619      	mov	r1, r3
 8005cb6:	4610      	mov	r0, r2
 8005cb8:	f7ff fd7e 	bl	80057b8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	7f5b      	ldrb	r3, [r3, #29]
 8005cc0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005cc6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8005ccc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8005cd2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005cda:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005ce6:	2b01      	cmp	r3, #1
 8005ce8:	d106      	bne.n	8005cf8 <HAL_ADC_Init+0x1bc>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cee:	3b01      	subs	r3, #1
 8005cf0:	045b      	lsls	r3, r3, #17
 8005cf2:	69ba      	ldr	r2, [r7, #24]
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d009      	beq.n	8005d14 <HAL_ADC_Init+0x1d8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d04:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d0c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005d0e:	69ba      	ldr	r2, [r7, #24]
 8005d10:	4313      	orrs	r3, r2
 8005d12:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	68da      	ldr	r2, [r3, #12]
 8005d1a:	4b4b      	ldr	r3, [pc, #300]	; (8005e48 <HAL_ADC_Init+0x30c>)
 8005d1c:	4013      	ands	r3, r2
 8005d1e:	687a      	ldr	r2, [r7, #4]
 8005d20:	6812      	ldr	r2, [r2, #0]
 8005d22:	69b9      	ldr	r1, [r7, #24]
 8005d24:	430b      	orrs	r3, r1
 8005d26:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	691b      	ldr	r3, [r3, #16]
 8005d2e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	430a      	orrs	r2, r1
 8005d3c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4618      	mov	r0, r3
 8005d44:	f7ff fed3 	bl	8005aee <LL_ADC_REG_IsConversionOngoing>
 8005d48:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f7ff fee0 	bl	8005b14 <LL_ADC_INJ_IsConversionOngoing>
 8005d54:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d17f      	bne.n	8005e5c <HAL_ADC_Init+0x320>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d17c      	bne.n	8005e5c <HAL_ADC_Init+0x320>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005d66:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005d6e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005d70:	4313      	orrs	r3, r2
 8005d72:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	68db      	ldr	r3, [r3, #12]
 8005d7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d7e:	f023 0302 	bic.w	r3, r3, #2
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	6812      	ldr	r2, [r2, #0]
 8005d86:	69b9      	ldr	r1, [r7, #24]
 8005d88:	430b      	orrs	r3, r1
 8005d8a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	691b      	ldr	r3, [r3, #16]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d017      	beq.n	8005dc4 <HAL_ADC_Init+0x288>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	691a      	ldr	r2, [r3, #16]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005da2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005dac:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005db0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005db4:	687a      	ldr	r2, [r7, #4]
 8005db6:	6911      	ldr	r1, [r2, #16]
 8005db8:	687a      	ldr	r2, [r7, #4]
 8005dba:	6812      	ldr	r2, [r2, #0]
 8005dbc:	430b      	orrs	r3, r1
 8005dbe:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8005dc2:	e013      	b.n	8005dec <HAL_ADC_Init+0x2b0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	691a      	ldr	r2, [r3, #16]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005dd2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005ddc:	687a      	ldr	r2, [r7, #4]
 8005dde:	6812      	ldr	r2, [r2, #0]
 8005de0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005de4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005de8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d12a      	bne.n	8005e4c <HAL_ADC_Init+0x310>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	691b      	ldr	r3, [r3, #16]
 8005dfc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005e00:	f023 0304 	bic.w	r3, r3, #4
 8005e04:	687a      	ldr	r2, [r7, #4]
 8005e06:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005e0c:	4311      	orrs	r1, r2
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005e12:	4311      	orrs	r1, r2
 8005e14:	687a      	ldr	r2, [r7, #4]
 8005e16:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005e18:	430a      	orrs	r2, r1
 8005e1a:	431a      	orrs	r2, r3
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f042 0201 	orr.w	r2, r2, #1
 8005e24:	611a      	str	r2, [r3, #16]
 8005e26:	e019      	b.n	8005e5c <HAL_ADC_Init+0x320>
 8005e28:	200001ac 	.word	0x200001ac
 8005e2c:	053e2d63 	.word	0x053e2d63
 8005e30:	50000100 	.word	0x50000100
 8005e34:	50000400 	.word	0x50000400
 8005e38:	50000500 	.word	0x50000500
 8005e3c:	50000600 	.word	0x50000600
 8005e40:	50000300 	.word	0x50000300
 8005e44:	50000700 	.word	0x50000700
 8005e48:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	691a      	ldr	r2, [r3, #16]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f022 0201 	bic.w	r2, r2, #1
 8005e5a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	695b      	ldr	r3, [r3, #20]
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d10c      	bne.n	8005e7e <HAL_ADC_Init+0x342>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e6a:	f023 010f 	bic.w	r1, r3, #15
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6a1b      	ldr	r3, [r3, #32]
 8005e72:	1e5a      	subs	r2, r3, #1
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	430a      	orrs	r2, r1
 8005e7a:	631a      	str	r2, [r3, #48]	; 0x30
 8005e7c:	e007      	b.n	8005e8e <HAL_ADC_Init+0x352>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f022 020f 	bic.w	r2, r2, #15
 8005e8c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e92:	f023 0303 	bic.w	r3, r3, #3
 8005e96:	f043 0201 	orr.w	r2, r3, #1
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	65da      	str	r2, [r3, #92]	; 0x5c
 8005e9e:	e007      	b.n	8005eb0 <HAL_ADC_Init+0x374>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ea4:	f043 0210 	orr.w	r2, r3, #16
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005eac:	2301      	movs	r3, #1
 8005eae:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005eb0:	7ffb      	ldrb	r3, [r7, #31]
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3724      	adds	r7, #36	; 0x24
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd90      	pop	{r4, r7, pc}
 8005eba:	bf00      	nop

08005ebc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b0a6      	sub	sp, #152	; 0x98
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
 8005ec4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005ed6:	2b01      	cmp	r3, #1
 8005ed8:	d101      	bne.n	8005ede <HAL_ADC_ConfigChannel+0x22>
 8005eda:	2302      	movs	r3, #2
 8005edc:	e38e      	b.n	80065fc <HAL_ADC_ConfigChannel+0x740>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4618      	mov	r0, r3
 8005eec:	f7ff fdff 	bl	8005aee <LL_ADC_REG_IsConversionOngoing>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	f040 836f 	bne.w	80065d6 <HAL_ADC_ConfigChannel+0x71a>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6818      	ldr	r0, [r3, #0]
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	6859      	ldr	r1, [r3, #4]
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	461a      	mov	r2, r3
 8005f06:	f7ff fd1c 	bl	8005942 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f7ff fded 	bl	8005aee <LL_ADC_REG_IsConversionOngoing>
 8005f14:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f7ff fdf9 	bl	8005b14 <LL_ADC_INJ_IsConversionOngoing>
 8005f22:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005f26:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	f040 817b 	bne.w	8006226 <HAL_ADC_ConfigChannel+0x36a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005f30:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	f040 8176 	bne.w	8006226 <HAL_ADC_ConfigChannel+0x36a>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f42:	d10f      	bne.n	8005f64 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6818      	ldr	r0, [r3, #0]
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	4619      	mov	r1, r3
 8005f50:	f7ff fd20 	bl	8005994 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f7ff fcdd 	bl	800591c <LL_ADC_SetSamplingTimeCommonConfig>
 8005f62:	e00e      	b.n	8005f82 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6818      	ldr	r0, [r3, #0]
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	6819      	ldr	r1, [r3, #0]
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	461a      	mov	r2, r3
 8005f72:	f7ff fd0f 	bl	8005994 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	2100      	movs	r1, #0
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f7ff fccd 	bl	800591c <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	695a      	ldr	r2, [r3, #20]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	68db      	ldr	r3, [r3, #12]
 8005f8c:	08db      	lsrs	r3, r3, #3
 8005f8e:	f003 0303 	and.w	r3, r3, #3
 8005f92:	005b      	lsls	r3, r3, #1
 8005f94:	fa02 f303 	lsl.w	r3, r2, r3
 8005f98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	691b      	ldr	r3, [r3, #16]
 8005fa0:	2b04      	cmp	r3, #4
 8005fa2:	d022      	beq.n	8005fea <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6818      	ldr	r0, [r3, #0]
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	6919      	ldr	r1, [r3, #16]
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005fb4:	f7ff fc34 	bl	8005820 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6818      	ldr	r0, [r3, #0]
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	6919      	ldr	r1, [r3, #16]
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	699b      	ldr	r3, [r3, #24]
 8005fc4:	461a      	mov	r2, r3
 8005fc6:	f7ff fc79 	bl	80058bc <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6818      	ldr	r0, [r3, #0]
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	6919      	ldr	r1, [r3, #16]
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	7f1b      	ldrb	r3, [r3, #28]
 8005fd6:	2b01      	cmp	r3, #1
 8005fd8:	d102      	bne.n	8005fe0 <HAL_ADC_ConfigChannel+0x124>
 8005fda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005fde:	e000      	b.n	8005fe2 <HAL_ADC_ConfigChannel+0x126>
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	f7ff fc82 	bl	80058ec <LL_ADC_SetOffsetSaturation>
 8005fe8:	e11d      	b.n	8006226 <HAL_ADC_ConfigChannel+0x36a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	2100      	movs	r1, #0
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f7ff fc37 	bl	8005864 <LL_ADC_GetOffsetChannel>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d10a      	bne.n	8006016 <HAL_ADC_ConfigChannel+0x15a>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	2100      	movs	r1, #0
 8006006:	4618      	mov	r0, r3
 8006008:	f7ff fc2c 	bl	8005864 <LL_ADC_GetOffsetChannel>
 800600c:	4603      	mov	r3, r0
 800600e:	0e9b      	lsrs	r3, r3, #26
 8006010:	f003 021f 	and.w	r2, r3, #31
 8006014:	e012      	b.n	800603c <HAL_ADC_ConfigChannel+0x180>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	2100      	movs	r1, #0
 800601c:	4618      	mov	r0, r3
 800601e:	f7ff fc21 	bl	8005864 <LL_ADC_GetOffsetChannel>
 8006022:	4603      	mov	r3, r0
 8006024:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006028:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800602c:	fa93 f3a3 	rbit	r3, r3
 8006030:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8006032:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006034:	fab3 f383 	clz	r3, r3
 8006038:	b2db      	uxtb	r3, r3
 800603a:	461a      	mov	r2, r3
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006044:	2b00      	cmp	r3, #0
 8006046:	d105      	bne.n	8006054 <HAL_ADC_ConfigChannel+0x198>
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	0e9b      	lsrs	r3, r3, #26
 800604e:	f003 031f 	and.w	r3, r3, #31
 8006052:	e00a      	b.n	800606a <HAL_ADC_ConfigChannel+0x1ae>
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800605a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800605c:	fa93 f3a3 	rbit	r3, r3
 8006060:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8006062:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006064:	fab3 f383 	clz	r3, r3
 8006068:	b2db      	uxtb	r3, r3
 800606a:	429a      	cmp	r2, r3
 800606c:	d106      	bne.n	800607c <HAL_ADC_ConfigChannel+0x1c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	2200      	movs	r2, #0
 8006074:	2100      	movs	r1, #0
 8006076:	4618      	mov	r0, r3
 8006078:	f7ff fc08 	bl	800588c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	2101      	movs	r1, #1
 8006082:	4618      	mov	r0, r3
 8006084:	f7ff fbee 	bl	8005864 <LL_ADC_GetOffsetChannel>
 8006088:	4603      	mov	r3, r0
 800608a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800608e:	2b00      	cmp	r3, #0
 8006090:	d10a      	bne.n	80060a8 <HAL_ADC_ConfigChannel+0x1ec>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	2101      	movs	r1, #1
 8006098:	4618      	mov	r0, r3
 800609a:	f7ff fbe3 	bl	8005864 <LL_ADC_GetOffsetChannel>
 800609e:	4603      	mov	r3, r0
 80060a0:	0e9b      	lsrs	r3, r3, #26
 80060a2:	f003 021f 	and.w	r2, r3, #31
 80060a6:	e010      	b.n	80060ca <HAL_ADC_ConfigChannel+0x20e>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	2101      	movs	r1, #1
 80060ae:	4618      	mov	r0, r3
 80060b0:	f7ff fbd8 	bl	8005864 <LL_ADC_GetOffsetChannel>
 80060b4:	4603      	mov	r3, r0
 80060b6:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80060ba:	fa93 f3a3 	rbit	r3, r3
 80060be:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80060c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060c2:	fab3 f383 	clz	r3, r3
 80060c6:	b2db      	uxtb	r3, r3
 80060c8:	461a      	mov	r2, r3
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d105      	bne.n	80060e2 <HAL_ADC_ConfigChannel+0x226>
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	0e9b      	lsrs	r3, r3, #26
 80060dc:	f003 031f 	and.w	r3, r3, #31
 80060e0:	e00a      	b.n	80060f8 <HAL_ADC_ConfigChannel+0x23c>
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80060ea:	fa93 f3a3 	rbit	r3, r3
 80060ee:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80060f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060f2:	fab3 f383 	clz	r3, r3
 80060f6:	b2db      	uxtb	r3, r3
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d106      	bne.n	800610a <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	2200      	movs	r2, #0
 8006102:	2101      	movs	r1, #1
 8006104:	4618      	mov	r0, r3
 8006106:	f7ff fbc1 	bl	800588c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	2102      	movs	r1, #2
 8006110:	4618      	mov	r0, r3
 8006112:	f7ff fba7 	bl	8005864 <LL_ADC_GetOffsetChannel>
 8006116:	4603      	mov	r3, r0
 8006118:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800611c:	2b00      	cmp	r3, #0
 800611e:	d10a      	bne.n	8006136 <HAL_ADC_ConfigChannel+0x27a>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	2102      	movs	r1, #2
 8006126:	4618      	mov	r0, r3
 8006128:	f7ff fb9c 	bl	8005864 <LL_ADC_GetOffsetChannel>
 800612c:	4603      	mov	r3, r0
 800612e:	0e9b      	lsrs	r3, r3, #26
 8006130:	f003 021f 	and.w	r2, r3, #31
 8006134:	e010      	b.n	8006158 <HAL_ADC_ConfigChannel+0x29c>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	2102      	movs	r1, #2
 800613c:	4618      	mov	r0, r3
 800613e:	f7ff fb91 	bl	8005864 <LL_ADC_GetOffsetChannel>
 8006142:	4603      	mov	r3, r0
 8006144:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006146:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006148:	fa93 f3a3 	rbit	r3, r3
 800614c:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 800614e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006150:	fab3 f383 	clz	r3, r3
 8006154:	b2db      	uxtb	r3, r3
 8006156:	461a      	mov	r2, r3
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006160:	2b00      	cmp	r3, #0
 8006162:	d105      	bne.n	8006170 <HAL_ADC_ConfigChannel+0x2b4>
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	0e9b      	lsrs	r3, r3, #26
 800616a:	f003 031f 	and.w	r3, r3, #31
 800616e:	e00a      	b.n	8006186 <HAL_ADC_ConfigChannel+0x2ca>
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006176:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006178:	fa93 f3a3 	rbit	r3, r3
 800617c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800617e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006180:	fab3 f383 	clz	r3, r3
 8006184:	b2db      	uxtb	r3, r3
 8006186:	429a      	cmp	r2, r3
 8006188:	d106      	bne.n	8006198 <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	2200      	movs	r2, #0
 8006190:	2102      	movs	r1, #2
 8006192:	4618      	mov	r0, r3
 8006194:	f7ff fb7a 	bl	800588c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	2103      	movs	r1, #3
 800619e:	4618      	mov	r0, r3
 80061a0:	f7ff fb60 	bl	8005864 <LL_ADC_GetOffsetChannel>
 80061a4:	4603      	mov	r3, r0
 80061a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d10a      	bne.n	80061c4 <HAL_ADC_ConfigChannel+0x308>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	2103      	movs	r1, #3
 80061b4:	4618      	mov	r0, r3
 80061b6:	f7ff fb55 	bl	8005864 <LL_ADC_GetOffsetChannel>
 80061ba:	4603      	mov	r3, r0
 80061bc:	0e9b      	lsrs	r3, r3, #26
 80061be:	f003 021f 	and.w	r2, r3, #31
 80061c2:	e010      	b.n	80061e6 <HAL_ADC_ConfigChannel+0x32a>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	2103      	movs	r1, #3
 80061ca:	4618      	mov	r0, r3
 80061cc:	f7ff fb4a 	bl	8005864 <LL_ADC_GetOffsetChannel>
 80061d0:	4603      	mov	r3, r0
 80061d2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061d6:	fa93 f3a3 	rbit	r3, r3
 80061da:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80061dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061de:	fab3 f383 	clz	r3, r3
 80061e2:	b2db      	uxtb	r3, r3
 80061e4:	461a      	mov	r2, r3
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d105      	bne.n	80061fe <HAL_ADC_ConfigChannel+0x342>
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	0e9b      	lsrs	r3, r3, #26
 80061f8:	f003 031f 	and.w	r3, r3, #31
 80061fc:	e00a      	b.n	8006214 <HAL_ADC_ConfigChannel+0x358>
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006204:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006206:	fa93 f3a3 	rbit	r3, r3
 800620a:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 800620c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800620e:	fab3 f383 	clz	r3, r3
 8006212:	b2db      	uxtb	r3, r3
 8006214:	429a      	cmp	r2, r3
 8006216:	d106      	bne.n	8006226 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	2200      	movs	r2, #0
 800621e:	2103      	movs	r1, #3
 8006220:	4618      	mov	r0, r3
 8006222:	f7ff fb33 	bl	800588c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4618      	mov	r0, r3
 800622c:	f7ff fc4c 	bl	8005ac8 <LL_ADC_IsEnabled>
 8006230:	4603      	mov	r3, r0
 8006232:	2b00      	cmp	r3, #0
 8006234:	f040 810c 	bne.w	8006450 <HAL_ADC_ConfigChannel+0x594>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6818      	ldr	r0, [r3, #0]
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	6819      	ldr	r1, [r3, #0]
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	68db      	ldr	r3, [r3, #12]
 8006244:	461a      	mov	r2, r3
 8006246:	f7ff fbcd 	bl	80059e4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	68db      	ldr	r3, [r3, #12]
 800624e:	4aaf      	ldr	r2, [pc, #700]	; (800650c <HAL_ADC_ConfigChannel+0x650>)
 8006250:	4293      	cmp	r3, r2
 8006252:	f040 80fd 	bne.w	8006450 <HAL_ADC_ConfigChannel+0x594>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006262:	2b00      	cmp	r3, #0
 8006264:	d10b      	bne.n	800627e <HAL_ADC_ConfigChannel+0x3c2>
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	0e9b      	lsrs	r3, r3, #26
 800626c:	3301      	adds	r3, #1
 800626e:	f003 031f 	and.w	r3, r3, #31
 8006272:	2b09      	cmp	r3, #9
 8006274:	bf94      	ite	ls
 8006276:	2301      	movls	r3, #1
 8006278:	2300      	movhi	r3, #0
 800627a:	b2db      	uxtb	r3, r3
 800627c:	e012      	b.n	80062a4 <HAL_ADC_ConfigChannel+0x3e8>
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006284:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006286:	fa93 f3a3 	rbit	r3, r3
 800628a:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800628c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800628e:	fab3 f383 	clz	r3, r3
 8006292:	b2db      	uxtb	r3, r3
 8006294:	3301      	adds	r3, #1
 8006296:	f003 031f 	and.w	r3, r3, #31
 800629a:	2b09      	cmp	r3, #9
 800629c:	bf94      	ite	ls
 800629e:	2301      	movls	r3, #1
 80062a0:	2300      	movhi	r3, #0
 80062a2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d064      	beq.n	8006372 <HAL_ADC_ConfigChannel+0x4b6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d107      	bne.n	80062c4 <HAL_ADC_ConfigChannel+0x408>
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	0e9b      	lsrs	r3, r3, #26
 80062ba:	3301      	adds	r3, #1
 80062bc:	069b      	lsls	r3, r3, #26
 80062be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80062c2:	e00e      	b.n	80062e2 <HAL_ADC_ConfigChannel+0x426>
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062cc:	fa93 f3a3 	rbit	r3, r3
 80062d0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80062d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062d4:	fab3 f383 	clz	r3, r3
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	3301      	adds	r3, #1
 80062dc:	069b      	lsls	r3, r3, #26
 80062de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d109      	bne.n	8006302 <HAL_ADC_ConfigChannel+0x446>
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	0e9b      	lsrs	r3, r3, #26
 80062f4:	3301      	adds	r3, #1
 80062f6:	f003 031f 	and.w	r3, r3, #31
 80062fa:	2101      	movs	r1, #1
 80062fc:	fa01 f303 	lsl.w	r3, r1, r3
 8006300:	e010      	b.n	8006324 <HAL_ADC_ConfigChannel+0x468>
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800630a:	fa93 f3a3 	rbit	r3, r3
 800630e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006312:	fab3 f383 	clz	r3, r3
 8006316:	b2db      	uxtb	r3, r3
 8006318:	3301      	adds	r3, #1
 800631a:	f003 031f 	and.w	r3, r3, #31
 800631e:	2101      	movs	r1, #1
 8006320:	fa01 f303 	lsl.w	r3, r1, r3
 8006324:	ea42 0103 	orr.w	r1, r2, r3
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006330:	2b00      	cmp	r3, #0
 8006332:	d10a      	bne.n	800634a <HAL_ADC_ConfigChannel+0x48e>
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	0e9b      	lsrs	r3, r3, #26
 800633a:	3301      	adds	r3, #1
 800633c:	f003 021f 	and.w	r2, r3, #31
 8006340:	4613      	mov	r3, r2
 8006342:	005b      	lsls	r3, r3, #1
 8006344:	4413      	add	r3, r2
 8006346:	051b      	lsls	r3, r3, #20
 8006348:	e011      	b.n	800636e <HAL_ADC_ConfigChannel+0x4b2>
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006352:	fa93 f3a3 	rbit	r3, r3
 8006356:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8006358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800635a:	fab3 f383 	clz	r3, r3
 800635e:	b2db      	uxtb	r3, r3
 8006360:	3301      	adds	r3, #1
 8006362:	f003 021f 	and.w	r2, r3, #31
 8006366:	4613      	mov	r3, r2
 8006368:	005b      	lsls	r3, r3, #1
 800636a:	4413      	add	r3, r2
 800636c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800636e:	430b      	orrs	r3, r1
 8006370:	e069      	b.n	8006446 <HAL_ADC_ConfigChannel+0x58a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800637a:	2b00      	cmp	r3, #0
 800637c:	d107      	bne.n	800638e <HAL_ADC_ConfigChannel+0x4d2>
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	0e9b      	lsrs	r3, r3, #26
 8006384:	3301      	adds	r3, #1
 8006386:	069b      	lsls	r3, r3, #26
 8006388:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800638c:	e00e      	b.n	80063ac <HAL_ADC_ConfigChannel+0x4f0>
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006394:	6a3b      	ldr	r3, [r7, #32]
 8006396:	fa93 f3a3 	rbit	r3, r3
 800639a:	61fb      	str	r3, [r7, #28]
  return result;
 800639c:	69fb      	ldr	r3, [r7, #28]
 800639e:	fab3 f383 	clz	r3, r3
 80063a2:	b2db      	uxtb	r3, r3
 80063a4:	3301      	adds	r3, #1
 80063a6:	069b      	lsls	r3, r3, #26
 80063a8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d109      	bne.n	80063cc <HAL_ADC_ConfigChannel+0x510>
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	0e9b      	lsrs	r3, r3, #26
 80063be:	3301      	adds	r3, #1
 80063c0:	f003 031f 	and.w	r3, r3, #31
 80063c4:	2101      	movs	r1, #1
 80063c6:	fa01 f303 	lsl.w	r3, r1, r3
 80063ca:	e010      	b.n	80063ee <HAL_ADC_ConfigChannel+0x532>
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063d2:	69bb      	ldr	r3, [r7, #24]
 80063d4:	fa93 f3a3 	rbit	r3, r3
 80063d8:	617b      	str	r3, [r7, #20]
  return result;
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	fab3 f383 	clz	r3, r3
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	3301      	adds	r3, #1
 80063e4:	f003 031f 	and.w	r3, r3, #31
 80063e8:	2101      	movs	r1, #1
 80063ea:	fa01 f303 	lsl.w	r3, r1, r3
 80063ee:	ea42 0103 	orr.w	r1, r2, r3
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d10d      	bne.n	800641a <HAL_ADC_ConfigChannel+0x55e>
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	0e9b      	lsrs	r3, r3, #26
 8006404:	3301      	adds	r3, #1
 8006406:	f003 021f 	and.w	r2, r3, #31
 800640a:	4613      	mov	r3, r2
 800640c:	005b      	lsls	r3, r3, #1
 800640e:	4413      	add	r3, r2
 8006410:	3b1e      	subs	r3, #30
 8006412:	051b      	lsls	r3, r3, #20
 8006414:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006418:	e014      	b.n	8006444 <HAL_ADC_ConfigChannel+0x588>
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	fa93 f3a3 	rbit	r3, r3
 8006426:	60fb      	str	r3, [r7, #12]
  return result;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	fab3 f383 	clz	r3, r3
 800642e:	b2db      	uxtb	r3, r3
 8006430:	3301      	adds	r3, #1
 8006432:	f003 021f 	and.w	r2, r3, #31
 8006436:	4613      	mov	r3, r2
 8006438:	005b      	lsls	r3, r3, #1
 800643a:	4413      	add	r3, r2
 800643c:	3b1e      	subs	r3, #30
 800643e:	051b      	lsls	r3, r3, #20
 8006440:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006444:	430b      	orrs	r3, r1
 8006446:	683a      	ldr	r2, [r7, #0]
 8006448:	6892      	ldr	r2, [r2, #8]
 800644a:	4619      	mov	r1, r3
 800644c:	f7ff faa2 	bl	8005994 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	4b2e      	ldr	r3, [pc, #184]	; (8006510 <HAL_ADC_ConfigChannel+0x654>)
 8006456:	4013      	ands	r3, r2
 8006458:	2b00      	cmp	r3, #0
 800645a:	f000 80c9 	beq.w	80065f0 <HAL_ADC_ConfigChannel+0x734>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006466:	d004      	beq.n	8006472 <HAL_ADC_ConfigChannel+0x5b6>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a29      	ldr	r2, [pc, #164]	; (8006514 <HAL_ADC_ConfigChannel+0x658>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d101      	bne.n	8006476 <HAL_ADC_ConfigChannel+0x5ba>
 8006472:	4b29      	ldr	r3, [pc, #164]	; (8006518 <HAL_ADC_ConfigChannel+0x65c>)
 8006474:	e000      	b.n	8006478 <HAL_ADC_ConfigChannel+0x5bc>
 8006476:	4b29      	ldr	r3, [pc, #164]	; (800651c <HAL_ADC_ConfigChannel+0x660>)
 8006478:	4618      	mov	r0, r3
 800647a:	f7ff f9c3 	bl	8005804 <LL_ADC_GetCommonPathInternalCh>
 800647e:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a26      	ldr	r2, [pc, #152]	; (8006520 <HAL_ADC_ConfigChannel+0x664>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d004      	beq.n	8006496 <HAL_ADC_ConfigChannel+0x5da>
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a24      	ldr	r2, [pc, #144]	; (8006524 <HAL_ADC_ConfigChannel+0x668>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d14e      	bne.n	8006534 <HAL_ADC_ConfigChannel+0x678>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006496:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800649a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d148      	bne.n	8006534 <HAL_ADC_ConfigChannel+0x678>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80064aa:	d005      	beq.n	80064b8 <HAL_ADC_ConfigChannel+0x5fc>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a1d      	ldr	r2, [pc, #116]	; (8006528 <HAL_ADC_ConfigChannel+0x66c>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	f040 8099 	bne.w	80065ea <HAL_ADC_ConfigChannel+0x72e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80064c0:	d004      	beq.n	80064cc <HAL_ADC_ConfigChannel+0x610>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a13      	ldr	r2, [pc, #76]	; (8006514 <HAL_ADC_ConfigChannel+0x658>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d101      	bne.n	80064d0 <HAL_ADC_ConfigChannel+0x614>
 80064cc:	4a12      	ldr	r2, [pc, #72]	; (8006518 <HAL_ADC_ConfigChannel+0x65c>)
 80064ce:	e000      	b.n	80064d2 <HAL_ADC_ConfigChannel+0x616>
 80064d0:	4a12      	ldr	r2, [pc, #72]	; (800651c <HAL_ADC_ConfigChannel+0x660>)
 80064d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80064d6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80064da:	4619      	mov	r1, r3
 80064dc:	4610      	mov	r0, r2
 80064de:	f7ff f97e 	bl	80057de <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80064e2:	4b12      	ldr	r3, [pc, #72]	; (800652c <HAL_ADC_ConfigChannel+0x670>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	099b      	lsrs	r3, r3, #6
 80064e8:	4a11      	ldr	r2, [pc, #68]	; (8006530 <HAL_ADC_ConfigChannel+0x674>)
 80064ea:	fba2 2303 	umull	r2, r3, r2, r3
 80064ee:	099a      	lsrs	r2, r3, #6
 80064f0:	4613      	mov	r3, r2
 80064f2:	005b      	lsls	r3, r3, #1
 80064f4:	4413      	add	r3, r2
 80064f6:	009b      	lsls	r3, r3, #2
 80064f8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80064fa:	e002      	b.n	8006502 <HAL_ADC_ConfigChannel+0x646>
          {
            wait_loop_index--;
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	3b01      	subs	r3, #1
 8006500:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d1f9      	bne.n	80064fc <HAL_ADC_ConfigChannel+0x640>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006508:	e06f      	b.n	80065ea <HAL_ADC_ConfigChannel+0x72e>
 800650a:	bf00      	nop
 800650c:	407f0000 	.word	0x407f0000
 8006510:	80080000 	.word	0x80080000
 8006514:	50000100 	.word	0x50000100
 8006518:	50000300 	.word	0x50000300
 800651c:	50000700 	.word	0x50000700
 8006520:	c3210000 	.word	0xc3210000
 8006524:	90c00010 	.word	0x90c00010
 8006528:	50000600 	.word	0x50000600
 800652c:	200001ac 	.word	0x200001ac
 8006530:	053e2d63 	.word	0x053e2d63
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a32      	ldr	r2, [pc, #200]	; (8006604 <HAL_ADC_ConfigChannel+0x748>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d125      	bne.n	800658a <HAL_ADC_ConfigChannel+0x6ce>
 800653e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006542:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006546:	2b00      	cmp	r3, #0
 8006548:	d11f      	bne.n	800658a <HAL_ADC_ConfigChannel+0x6ce>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a2e      	ldr	r2, [pc, #184]	; (8006608 <HAL_ADC_ConfigChannel+0x74c>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d104      	bne.n	800655e <HAL_ADC_ConfigChannel+0x6a2>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a2c      	ldr	r2, [pc, #176]	; (800660c <HAL_ADC_ConfigChannel+0x750>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d047      	beq.n	80065ee <HAL_ADC_ConfigChannel+0x732>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006566:	d004      	beq.n	8006572 <HAL_ADC_ConfigChannel+0x6b6>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a26      	ldr	r2, [pc, #152]	; (8006608 <HAL_ADC_ConfigChannel+0x74c>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d101      	bne.n	8006576 <HAL_ADC_ConfigChannel+0x6ba>
 8006572:	4a27      	ldr	r2, [pc, #156]	; (8006610 <HAL_ADC_ConfigChannel+0x754>)
 8006574:	e000      	b.n	8006578 <HAL_ADC_ConfigChannel+0x6bc>
 8006576:	4a27      	ldr	r2, [pc, #156]	; (8006614 <HAL_ADC_ConfigChannel+0x758>)
 8006578:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800657c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006580:	4619      	mov	r1, r3
 8006582:	4610      	mov	r0, r2
 8006584:	f7ff f92b 	bl	80057de <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006588:	e031      	b.n	80065ee <HAL_ADC_ConfigChannel+0x732>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a22      	ldr	r2, [pc, #136]	; (8006618 <HAL_ADC_ConfigChannel+0x75c>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d12d      	bne.n	80065f0 <HAL_ADC_ConfigChannel+0x734>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006594:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006598:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800659c:	2b00      	cmp	r3, #0
 800659e:	d127      	bne.n	80065f0 <HAL_ADC_ConfigChannel+0x734>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a18      	ldr	r2, [pc, #96]	; (8006608 <HAL_ADC_ConfigChannel+0x74c>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d022      	beq.n	80065f0 <HAL_ADC_ConfigChannel+0x734>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80065b2:	d004      	beq.n	80065be <HAL_ADC_ConfigChannel+0x702>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a13      	ldr	r2, [pc, #76]	; (8006608 <HAL_ADC_ConfigChannel+0x74c>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d101      	bne.n	80065c2 <HAL_ADC_ConfigChannel+0x706>
 80065be:	4a14      	ldr	r2, [pc, #80]	; (8006610 <HAL_ADC_ConfigChannel+0x754>)
 80065c0:	e000      	b.n	80065c4 <HAL_ADC_ConfigChannel+0x708>
 80065c2:	4a14      	ldr	r2, [pc, #80]	; (8006614 <HAL_ADC_ConfigChannel+0x758>)
 80065c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80065c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80065cc:	4619      	mov	r1, r3
 80065ce:	4610      	mov	r0, r2
 80065d0:	f7ff f905 	bl	80057de <LL_ADC_SetCommonPathInternalCh>
 80065d4:	e00c      	b.n	80065f0 <HAL_ADC_ConfigChannel+0x734>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065da:	f043 0220 	orr.w	r2, r3, #32
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80065e2:	2301      	movs	r3, #1
 80065e4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80065e8:	e002      	b.n	80065f0 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80065ea:	bf00      	nop
 80065ec:	e000      	b.n	80065f0 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80065ee:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2200      	movs	r2, #0
 80065f4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80065f8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	3798      	adds	r7, #152	; 0x98
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}
 8006604:	c7520000 	.word	0xc7520000
 8006608:	50000100 	.word	0x50000100
 800660c:	50000500 	.word	0x50000500
 8006610:	50000300 	.word	0x50000300
 8006614:	50000700 	.word	0x50000700
 8006618:	cb840000 	.word	0xcb840000

0800661c <LL_ADC_IsEnabled>:
{
 800661c:	b480      	push	{r7}
 800661e:	b083      	sub	sp, #12
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	f003 0301 	and.w	r3, r3, #1
 800662c:	2b01      	cmp	r3, #1
 800662e:	d101      	bne.n	8006634 <LL_ADC_IsEnabled+0x18>
 8006630:	2301      	movs	r3, #1
 8006632:	e000      	b.n	8006636 <LL_ADC_IsEnabled+0x1a>
 8006634:	2300      	movs	r3, #0
}
 8006636:	4618      	mov	r0, r3
 8006638:	370c      	adds	r7, #12
 800663a:	46bd      	mov	sp, r7
 800663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006640:	4770      	bx	lr

08006642 <LL_ADC_REG_IsConversionOngoing>:
{
 8006642:	b480      	push	{r7}
 8006644:	b083      	sub	sp, #12
 8006646:	af00      	add	r7, sp, #0
 8006648:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	f003 0304 	and.w	r3, r3, #4
 8006652:	2b04      	cmp	r3, #4
 8006654:	d101      	bne.n	800665a <LL_ADC_REG_IsConversionOngoing+0x18>
 8006656:	2301      	movs	r3, #1
 8006658:	e000      	b.n	800665c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800665a:	2300      	movs	r3, #0
}
 800665c:	4618      	mov	r0, r3
 800665e:	370c      	adds	r7, #12
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr

08006668 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8006668:	b590      	push	{r4, r7, lr}
 800666a:	b0a1      	sub	sp, #132	; 0x84
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
 8006670:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006672:	2300      	movs	r3, #0
 8006674:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800667e:	2b01      	cmp	r3, #1
 8006680:	d101      	bne.n	8006686 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006682:	2302      	movs	r3, #2
 8006684:	e0e3      	b.n	800684e <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2201      	movs	r2, #1
 800668a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006696:	d102      	bne.n	800669e <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8006698:	4b6f      	ldr	r3, [pc, #444]	; (8006858 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800669a:	60bb      	str	r3, [r7, #8]
 800669c:	e009      	b.n	80066b2 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a6e      	ldr	r2, [pc, #440]	; (800685c <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d102      	bne.n	80066ae <HAL_ADCEx_MultiModeConfigChannel+0x46>
 80066a8:	4b6d      	ldr	r3, [pc, #436]	; (8006860 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80066aa:	60bb      	str	r3, [r7, #8]
 80066ac:	e001      	b.n	80066b2 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 80066ae:	2300      	movs	r3, #0
 80066b0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d10b      	bne.n	80066d0 <HAL_ADCEx_MultiModeConfigChannel+0x68>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066bc:	f043 0220 	orr.w	r2, r3, #32
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2200      	movs	r2, #0
 80066c8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80066cc:	2301      	movs	r3, #1
 80066ce:	e0be      	b.n	800684e <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	4618      	mov	r0, r3
 80066d4:	f7ff ffb5 	bl	8006642 <LL_ADC_REG_IsConversionOngoing>
 80066d8:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4618      	mov	r0, r3
 80066e0:	f7ff ffaf 	bl	8006642 <LL_ADC_REG_IsConversionOngoing>
 80066e4:	4603      	mov	r3, r0
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	f040 80a0 	bne.w	800682c <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80066ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	f040 809c 	bne.w	800682c <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80066fc:	d004      	beq.n	8006708 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4a55      	ldr	r2, [pc, #340]	; (8006858 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d101      	bne.n	800670c <HAL_ADCEx_MultiModeConfigChannel+0xa4>
 8006708:	4b56      	ldr	r3, [pc, #344]	; (8006864 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800670a:	e000      	b.n	800670e <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 800670c:	4b56      	ldr	r3, [pc, #344]	; (8006868 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800670e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d04b      	beq.n	80067b0 <HAL_ADCEx_MultiModeConfigChannel+0x148>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8006718:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800671a:	689b      	ldr	r3, [r3, #8]
 800671c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	6859      	ldr	r1, [r3, #4]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800672a:	035b      	lsls	r3, r3, #13
 800672c:	430b      	orrs	r3, r1
 800672e:	431a      	orrs	r2, r3
 8006730:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006732:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800673c:	d004      	beq.n	8006748 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a45      	ldr	r2, [pc, #276]	; (8006858 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d10f      	bne.n	8006768 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8006748:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800674c:	f7ff ff66 	bl	800661c <LL_ADC_IsEnabled>
 8006750:	4604      	mov	r4, r0
 8006752:	4841      	ldr	r0, [pc, #260]	; (8006858 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8006754:	f7ff ff62 	bl	800661c <LL_ADC_IsEnabled>
 8006758:	4603      	mov	r3, r0
 800675a:	4323      	orrs	r3, r4
 800675c:	2b00      	cmp	r3, #0
 800675e:	bf0c      	ite	eq
 8006760:	2301      	moveq	r3, #1
 8006762:	2300      	movne	r3, #0
 8006764:	b2db      	uxtb	r3, r3
 8006766:	e012      	b.n	800678e <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8006768:	483c      	ldr	r0, [pc, #240]	; (800685c <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 800676a:	f7ff ff57 	bl	800661c <LL_ADC_IsEnabled>
 800676e:	4604      	mov	r4, r0
 8006770:	483b      	ldr	r0, [pc, #236]	; (8006860 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006772:	f7ff ff53 	bl	800661c <LL_ADC_IsEnabled>
 8006776:	4603      	mov	r3, r0
 8006778:	431c      	orrs	r4, r3
 800677a:	483c      	ldr	r0, [pc, #240]	; (800686c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800677c:	f7ff ff4e 	bl	800661c <LL_ADC_IsEnabled>
 8006780:	4603      	mov	r3, r0
 8006782:	4323      	orrs	r3, r4
 8006784:	2b00      	cmp	r3, #0
 8006786:	bf0c      	ite	eq
 8006788:	2301      	moveq	r3, #1
 800678a:	2300      	movne	r3, #0
 800678c:	b2db      	uxtb	r3, r3
 800678e:	2b00      	cmp	r3, #0
 8006790:	d056      	beq.n	8006840 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8006792:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006794:	689b      	ldr	r3, [r3, #8]
 8006796:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800679a:	f023 030f 	bic.w	r3, r3, #15
 800679e:	683a      	ldr	r2, [r7, #0]
 80067a0:	6811      	ldr	r1, [r2, #0]
 80067a2:	683a      	ldr	r2, [r7, #0]
 80067a4:	6892      	ldr	r2, [r2, #8]
 80067a6:	430a      	orrs	r2, r1
 80067a8:	431a      	orrs	r2, r3
 80067aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067ac:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80067ae:	e047      	b.n	8006840 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80067b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067b2:	689b      	ldr	r3, [r3, #8]
 80067b4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80067b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067ba:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80067c4:	d004      	beq.n	80067d0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a23      	ldr	r2, [pc, #140]	; (8006858 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d10f      	bne.n	80067f0 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80067d0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80067d4:	f7ff ff22 	bl	800661c <LL_ADC_IsEnabled>
 80067d8:	4604      	mov	r4, r0
 80067da:	481f      	ldr	r0, [pc, #124]	; (8006858 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80067dc:	f7ff ff1e 	bl	800661c <LL_ADC_IsEnabled>
 80067e0:	4603      	mov	r3, r0
 80067e2:	4323      	orrs	r3, r4
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	bf0c      	ite	eq
 80067e8:	2301      	moveq	r3, #1
 80067ea:	2300      	movne	r3, #0
 80067ec:	b2db      	uxtb	r3, r3
 80067ee:	e012      	b.n	8006816 <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
 80067f0:	481a      	ldr	r0, [pc, #104]	; (800685c <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 80067f2:	f7ff ff13 	bl	800661c <LL_ADC_IsEnabled>
 80067f6:	4604      	mov	r4, r0
 80067f8:	4819      	ldr	r0, [pc, #100]	; (8006860 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80067fa:	f7ff ff0f 	bl	800661c <LL_ADC_IsEnabled>
 80067fe:	4603      	mov	r3, r0
 8006800:	431c      	orrs	r4, r3
 8006802:	481a      	ldr	r0, [pc, #104]	; (800686c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8006804:	f7ff ff0a 	bl	800661c <LL_ADC_IsEnabled>
 8006808:	4603      	mov	r3, r0
 800680a:	4323      	orrs	r3, r4
 800680c:	2b00      	cmp	r3, #0
 800680e:	bf0c      	ite	eq
 8006810:	2301      	moveq	r3, #1
 8006812:	2300      	movne	r3, #0
 8006814:	b2db      	uxtb	r3, r3
 8006816:	2b00      	cmp	r3, #0
 8006818:	d012      	beq.n	8006840 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800681a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800681c:	689b      	ldr	r3, [r3, #8]
 800681e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8006822:	f023 030f 	bic.w	r3, r3, #15
 8006826:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006828:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800682a:	e009      	b.n	8006840 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006830:	f043 0220 	orr.w	r2, r3, #32
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8006838:	2301      	movs	r3, #1
 800683a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800683e:	e000      	b.n	8006842 <HAL_ADCEx_MultiModeConfigChannel+0x1da>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006840:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2200      	movs	r2, #0
 8006846:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800684a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800684e:	4618      	mov	r0, r3
 8006850:	3784      	adds	r7, #132	; 0x84
 8006852:	46bd      	mov	sp, r7
 8006854:	bd90      	pop	{r4, r7, pc}
 8006856:	bf00      	nop
 8006858:	50000100 	.word	0x50000100
 800685c:	50000400 	.word	0x50000400
 8006860:	50000500 	.word	0x50000500
 8006864:	50000300 	.word	0x50000300
 8006868:	50000700 	.word	0x50000700
 800686c:	50000600 	.word	0x50000600

08006870 <LL_EXTI_EnableIT_0_31>:
{
 8006870:	b480      	push	{r7}
 8006872:	b083      	sub	sp, #12
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8006878:	4b05      	ldr	r3, [pc, #20]	; (8006890 <LL_EXTI_EnableIT_0_31+0x20>)
 800687a:	681a      	ldr	r2, [r3, #0]
 800687c:	4904      	ldr	r1, [pc, #16]	; (8006890 <LL_EXTI_EnableIT_0_31+0x20>)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	4313      	orrs	r3, r2
 8006882:	600b      	str	r3, [r1, #0]
}
 8006884:	bf00      	nop
 8006886:	370c      	adds	r7, #12
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr
 8006890:	40010400 	.word	0x40010400

08006894 <LL_EXTI_EnableIT_32_63>:
{
 8006894:	b480      	push	{r7}
 8006896:	b083      	sub	sp, #12
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800689c:	4b05      	ldr	r3, [pc, #20]	; (80068b4 <LL_EXTI_EnableIT_32_63+0x20>)
 800689e:	6a1a      	ldr	r2, [r3, #32]
 80068a0:	4904      	ldr	r1, [pc, #16]	; (80068b4 <LL_EXTI_EnableIT_32_63+0x20>)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	4313      	orrs	r3, r2
 80068a6:	620b      	str	r3, [r1, #32]
}
 80068a8:	bf00      	nop
 80068aa:	370c      	adds	r7, #12
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr
 80068b4:	40010400 	.word	0x40010400

080068b8 <LL_EXTI_DisableIT_0_31>:
{
 80068b8:	b480      	push	{r7}
 80068ba:	b083      	sub	sp, #12
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80068c0:	4b06      	ldr	r3, [pc, #24]	; (80068dc <LL_EXTI_DisableIT_0_31+0x24>)
 80068c2:	681a      	ldr	r2, [r3, #0]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	43db      	mvns	r3, r3
 80068c8:	4904      	ldr	r1, [pc, #16]	; (80068dc <LL_EXTI_DisableIT_0_31+0x24>)
 80068ca:	4013      	ands	r3, r2
 80068cc:	600b      	str	r3, [r1, #0]
}
 80068ce:	bf00      	nop
 80068d0:	370c      	adds	r7, #12
 80068d2:	46bd      	mov	sp, r7
 80068d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d8:	4770      	bx	lr
 80068da:	bf00      	nop
 80068dc:	40010400 	.word	0x40010400

080068e0 <LL_EXTI_DisableIT_32_63>:
{
 80068e0:	b480      	push	{r7}
 80068e2:	b083      	sub	sp, #12
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 80068e8:	4b06      	ldr	r3, [pc, #24]	; (8006904 <LL_EXTI_DisableIT_32_63+0x24>)
 80068ea:	6a1a      	ldr	r2, [r3, #32]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	43db      	mvns	r3, r3
 80068f0:	4904      	ldr	r1, [pc, #16]	; (8006904 <LL_EXTI_DisableIT_32_63+0x24>)
 80068f2:	4013      	ands	r3, r2
 80068f4:	620b      	str	r3, [r1, #32]
}
 80068f6:	bf00      	nop
 80068f8:	370c      	adds	r7, #12
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr
 8006902:	bf00      	nop
 8006904:	40010400 	.word	0x40010400

08006908 <LL_EXTI_EnableEvent_0_31>:
{
 8006908:	b480      	push	{r7}
 800690a:	b083      	sub	sp, #12
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8006910:	4b05      	ldr	r3, [pc, #20]	; (8006928 <LL_EXTI_EnableEvent_0_31+0x20>)
 8006912:	685a      	ldr	r2, [r3, #4]
 8006914:	4904      	ldr	r1, [pc, #16]	; (8006928 <LL_EXTI_EnableEvent_0_31+0x20>)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	4313      	orrs	r3, r2
 800691a:	604b      	str	r3, [r1, #4]
}
 800691c:	bf00      	nop
 800691e:	370c      	adds	r7, #12
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr
 8006928:	40010400 	.word	0x40010400

0800692c <LL_EXTI_EnableEvent_32_63>:
{
 800692c:	b480      	push	{r7}
 800692e:	b083      	sub	sp, #12
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8006934:	4b05      	ldr	r3, [pc, #20]	; (800694c <LL_EXTI_EnableEvent_32_63+0x20>)
 8006936:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006938:	4904      	ldr	r1, [pc, #16]	; (800694c <LL_EXTI_EnableEvent_32_63+0x20>)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	4313      	orrs	r3, r2
 800693e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8006940:	bf00      	nop
 8006942:	370c      	adds	r7, #12
 8006944:	46bd      	mov	sp, r7
 8006946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694a:	4770      	bx	lr
 800694c:	40010400 	.word	0x40010400

08006950 <LL_EXTI_DisableEvent_0_31>:
{
 8006950:	b480      	push	{r7}
 8006952:	b083      	sub	sp, #12
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8006958:	4b06      	ldr	r3, [pc, #24]	; (8006974 <LL_EXTI_DisableEvent_0_31+0x24>)
 800695a:	685a      	ldr	r2, [r3, #4]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	43db      	mvns	r3, r3
 8006960:	4904      	ldr	r1, [pc, #16]	; (8006974 <LL_EXTI_DisableEvent_0_31+0x24>)
 8006962:	4013      	ands	r3, r2
 8006964:	604b      	str	r3, [r1, #4]
}
 8006966:	bf00      	nop
 8006968:	370c      	adds	r7, #12
 800696a:	46bd      	mov	sp, r7
 800696c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006970:	4770      	bx	lr
 8006972:	bf00      	nop
 8006974:	40010400 	.word	0x40010400

08006978 <LL_EXTI_DisableEvent_32_63>:
{
 8006978:	b480      	push	{r7}
 800697a:	b083      	sub	sp, #12
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8006980:	4b06      	ldr	r3, [pc, #24]	; (800699c <LL_EXTI_DisableEvent_32_63+0x24>)
 8006982:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	43db      	mvns	r3, r3
 8006988:	4904      	ldr	r1, [pc, #16]	; (800699c <LL_EXTI_DisableEvent_32_63+0x24>)
 800698a:	4013      	ands	r3, r2
 800698c:	624b      	str	r3, [r1, #36]	; 0x24
}
 800698e:	bf00      	nop
 8006990:	370c      	adds	r7, #12
 8006992:	46bd      	mov	sp, r7
 8006994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006998:	4770      	bx	lr
 800699a:	bf00      	nop
 800699c:	40010400 	.word	0x40010400

080069a0 <LL_EXTI_EnableRisingTrig_0_31>:
{
 80069a0:	b480      	push	{r7}
 80069a2:	b083      	sub	sp, #12
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80069a8:	4b05      	ldr	r3, [pc, #20]	; (80069c0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80069aa:	689a      	ldr	r2, [r3, #8]
 80069ac:	4904      	ldr	r1, [pc, #16]	; (80069c0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	4313      	orrs	r3, r2
 80069b2:	608b      	str	r3, [r1, #8]
}
 80069b4:	bf00      	nop
 80069b6:	370c      	adds	r7, #12
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr
 80069c0:	40010400 	.word	0x40010400

080069c4 <LL_EXTI_EnableRisingTrig_32_63>:
{
 80069c4:	b480      	push	{r7}
 80069c6:	b083      	sub	sp, #12
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80069cc:	4b05      	ldr	r3, [pc, #20]	; (80069e4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80069ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80069d0:	4904      	ldr	r1, [pc, #16]	; (80069e4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	4313      	orrs	r3, r2
 80069d6:	628b      	str	r3, [r1, #40]	; 0x28
}
 80069d8:	bf00      	nop
 80069da:	370c      	adds	r7, #12
 80069dc:	46bd      	mov	sp, r7
 80069de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e2:	4770      	bx	lr
 80069e4:	40010400 	.word	0x40010400

080069e8 <LL_EXTI_DisableRisingTrig_0_31>:
{
 80069e8:	b480      	push	{r7}
 80069ea:	b083      	sub	sp, #12
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80069f0:	4b06      	ldr	r3, [pc, #24]	; (8006a0c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80069f2:	689a      	ldr	r2, [r3, #8]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	43db      	mvns	r3, r3
 80069f8:	4904      	ldr	r1, [pc, #16]	; (8006a0c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80069fa:	4013      	ands	r3, r2
 80069fc:	608b      	str	r3, [r1, #8]
}
 80069fe:	bf00      	nop
 8006a00:	370c      	adds	r7, #12
 8006a02:	46bd      	mov	sp, r7
 8006a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a08:	4770      	bx	lr
 8006a0a:	bf00      	nop
 8006a0c:	40010400 	.word	0x40010400

08006a10 <LL_EXTI_DisableRisingTrig_32_63>:
{
 8006a10:	b480      	push	{r7}
 8006a12:	b083      	sub	sp, #12
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8006a18:	4b06      	ldr	r3, [pc, #24]	; (8006a34 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8006a1a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	43db      	mvns	r3, r3
 8006a20:	4904      	ldr	r1, [pc, #16]	; (8006a34 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8006a22:	4013      	ands	r3, r2
 8006a24:	628b      	str	r3, [r1, #40]	; 0x28
}
 8006a26:	bf00      	nop
 8006a28:	370c      	adds	r7, #12
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a30:	4770      	bx	lr
 8006a32:	bf00      	nop
 8006a34:	40010400 	.word	0x40010400

08006a38 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b083      	sub	sp, #12
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8006a40:	4b05      	ldr	r3, [pc, #20]	; (8006a58 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8006a42:	68da      	ldr	r2, [r3, #12]
 8006a44:	4904      	ldr	r1, [pc, #16]	; (8006a58 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	60cb      	str	r3, [r1, #12]
}
 8006a4c:	bf00      	nop
 8006a4e:	370c      	adds	r7, #12
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr
 8006a58:	40010400 	.word	0x40010400

08006a5c <LL_EXTI_EnableFallingTrig_32_63>:
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b083      	sub	sp, #12
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8006a64:	4b05      	ldr	r3, [pc, #20]	; (8006a7c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8006a66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a68:	4904      	ldr	r1, [pc, #16]	; (8006a7c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8006a70:	bf00      	nop
 8006a72:	370c      	adds	r7, #12
 8006a74:	46bd      	mov	sp, r7
 8006a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7a:	4770      	bx	lr
 8006a7c:	40010400 	.word	0x40010400

08006a80 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8006a80:	b480      	push	{r7}
 8006a82:	b083      	sub	sp, #12
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8006a88:	4b06      	ldr	r3, [pc, #24]	; (8006aa4 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8006a8a:	68da      	ldr	r2, [r3, #12]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	43db      	mvns	r3, r3
 8006a90:	4904      	ldr	r1, [pc, #16]	; (8006aa4 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8006a92:	4013      	ands	r3, r2
 8006a94:	60cb      	str	r3, [r1, #12]
}
 8006a96:	bf00      	nop
 8006a98:	370c      	adds	r7, #12
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa0:	4770      	bx	lr
 8006aa2:	bf00      	nop
 8006aa4:	40010400 	.word	0x40010400

08006aa8 <LL_EXTI_DisableFallingTrig_32_63>:
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b083      	sub	sp, #12
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8006ab0:	4b06      	ldr	r3, [pc, #24]	; (8006acc <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8006ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	43db      	mvns	r3, r3
 8006ab8:	4904      	ldr	r1, [pc, #16]	; (8006acc <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8006aba:	4013      	ands	r3, r2
 8006abc:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8006abe:	bf00      	nop
 8006ac0:	370c      	adds	r7, #12
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac8:	4770      	bx	lr
 8006aca:	bf00      	nop
 8006acc:	40010400 	.word	0x40010400

08006ad0 <LL_EXTI_ClearFlag_0_31>:
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b083      	sub	sp, #12
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8006ad8:	4a04      	ldr	r2, [pc, #16]	; (8006aec <LL_EXTI_ClearFlag_0_31+0x1c>)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6153      	str	r3, [r2, #20]
}
 8006ade:	bf00      	nop
 8006ae0:	370c      	adds	r7, #12
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr
 8006aea:	bf00      	nop
 8006aec:	40010400 	.word	0x40010400

08006af0 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b083      	sub	sp, #12
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 8006af8:	4a04      	ldr	r2, [pc, #16]	; (8006b0c <LL_EXTI_ClearFlag_32_63+0x1c>)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6353      	str	r3, [r2, #52]	; 0x34
}
 8006afe:	bf00      	nop
 8006b00:	370c      	adds	r7, #12
 8006b02:	46bd      	mov	sp, r7
 8006b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b08:	4770      	bx	lr
 8006b0a:	bf00      	nop
 8006b0c:	40010400 	.word	0x40010400

08006b10 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b088      	sub	sp, #32
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d102      	bne.n	8006b2c <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8006b26:	2301      	movs	r3, #1
 8006b28:	77fb      	strb	r3, [r7, #31]
 8006b2a:	e180      	b.n	8006e2e <HAL_COMP_Init+0x31e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b3a:	d102      	bne.n	8006b42 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	77fb      	strb	r3, [r7, #31]
 8006b40:	e175      	b.n	8006e2e <HAL_COMP_Init+0x31e>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	7f5b      	ldrb	r3, [r3, #29]
 8006b46:	b2db      	uxtb	r3, r3
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d108      	bne.n	8006b5e <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2200      	movs	r2, #0
 8006b56:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f7fd f8af 	bl	8003cbc <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006b68:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	695b      	ldr	r3, [r3, #20]
 8006b78:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	68db      	ldr	r3, [r3, #12]
 8006b7e:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (  hcomp->Init.InputMinus
 8006b84:	4313      	orrs	r3, r2
 8006b86:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	681a      	ldr	r2, [r3, #0]
 8006b8e:	4b98      	ldr	r3, [pc, #608]	; (8006df0 <HAL_COMP_Init+0x2e0>)
 8006b90:	4013      	ands	r3, r2
 8006b92:	687a      	ldr	r2, [r7, #4]
 8006b94:	6812      	ldr	r2, [r2, #0]
 8006b96:	6979      	ldr	r1, [r7, #20]
 8006b98:	430b      	orrs	r3, r1
 8006b9a:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d015      	beq.n	8006bd6 <HAL_COMP_Init+0xc6>
 8006baa:	69bb      	ldr	r3, [r7, #24]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d112      	bne.n	8006bd6 <HAL_COMP_Init+0xc6>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8006bb0:	4b90      	ldr	r3, [pc, #576]	; (8006df4 <HAL_COMP_Init+0x2e4>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	099b      	lsrs	r3, r3, #6
 8006bb6:	4a90      	ldr	r2, [pc, #576]	; (8006df8 <HAL_COMP_Init+0x2e8>)
 8006bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8006bbc:	099a      	lsrs	r2, r3, #6
 8006bbe:	4613      	mov	r3, r2
 8006bc0:	009b      	lsls	r3, r3, #2
 8006bc2:	4413      	add	r3, r2
 8006bc4:	009b      	lsls	r3, r3, #2
 8006bc6:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8006bc8:	e002      	b.n	8006bd0 <HAL_COMP_Init+0xc0>
      {
        wait_loop_index--;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	3b01      	subs	r3, #1
 8006bce:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d1f9      	bne.n	8006bca <HAL_COMP_Init+0xba>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a88      	ldr	r2, [pc, #544]	; (8006dfc <HAL_COMP_Init+0x2ec>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d028      	beq.n	8006c32 <HAL_COMP_Init+0x122>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a86      	ldr	r2, [pc, #536]	; (8006e00 <HAL_COMP_Init+0x2f0>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d020      	beq.n	8006c2c <HAL_COMP_Init+0x11c>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a85      	ldr	r2, [pc, #532]	; (8006e04 <HAL_COMP_Init+0x2f4>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d018      	beq.n	8006c26 <HAL_COMP_Init+0x116>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a83      	ldr	r2, [pc, #524]	; (8006e08 <HAL_COMP_Init+0x2f8>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d010      	beq.n	8006c20 <HAL_COMP_Init+0x110>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a82      	ldr	r2, [pc, #520]	; (8006e0c <HAL_COMP_Init+0x2fc>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d008      	beq.n	8006c1a <HAL_COMP_Init+0x10a>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a80      	ldr	r2, [pc, #512]	; (8006e10 <HAL_COMP_Init+0x300>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d101      	bne.n	8006c16 <HAL_COMP_Init+0x106>
 8006c12:	2301      	movs	r3, #1
 8006c14:	e00f      	b.n	8006c36 <HAL_COMP_Init+0x126>
 8006c16:	2302      	movs	r3, #2
 8006c18:	e00d      	b.n	8006c36 <HAL_COMP_Init+0x126>
 8006c1a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006c1e:	e00a      	b.n	8006c36 <HAL_COMP_Init+0x126>
 8006c20:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006c24:	e007      	b.n	8006c36 <HAL_COMP_Init+0x126>
 8006c26:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8006c2a:	e004      	b.n	8006c36 <HAL_COMP_Init+0x126>
 8006c2c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006c30:	e001      	b.n	8006c36 <HAL_COMP_Init+0x126>
 8006c32:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006c36:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	699b      	ldr	r3, [r3, #24]
 8006c3c:	f003 0303 	and.w	r3, r3, #3
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	f000 80b6 	beq.w	8006db2 <HAL_COMP_Init+0x2a2>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	699b      	ldr	r3, [r3, #24]
 8006c4a:	f003 0310 	and.w	r3, r3, #16
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d011      	beq.n	8006c76 <HAL_COMP_Init+0x166>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a6e      	ldr	r2, [pc, #440]	; (8006e10 <HAL_COMP_Init+0x300>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d004      	beq.n	8006c66 <HAL_COMP_Init+0x156>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a6c      	ldr	r2, [pc, #432]	; (8006e14 <HAL_COMP_Init+0x304>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d103      	bne.n	8006c6e <HAL_COMP_Init+0x15e>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 8006c66:	6938      	ldr	r0, [r7, #16]
 8006c68:	f7ff feac 	bl	80069c4 <LL_EXTI_EnableRisingTrig_32_63>
 8006c6c:	e014      	b.n	8006c98 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8006c6e:	6938      	ldr	r0, [r7, #16]
 8006c70:	f7ff fe96 	bl	80069a0 <LL_EXTI_EnableRisingTrig_0_31>
 8006c74:	e010      	b.n	8006c98 <HAL_COMP_Init+0x188>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a65      	ldr	r2, [pc, #404]	; (8006e10 <HAL_COMP_Init+0x300>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d004      	beq.n	8006c8a <HAL_COMP_Init+0x17a>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a63      	ldr	r2, [pc, #396]	; (8006e14 <HAL_COMP_Init+0x304>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d103      	bne.n	8006c92 <HAL_COMP_Init+0x182>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 8006c8a:	6938      	ldr	r0, [r7, #16]
 8006c8c:	f7ff fec0 	bl	8006a10 <LL_EXTI_DisableRisingTrig_32_63>
 8006c90:	e002      	b.n	8006c98 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8006c92:	6938      	ldr	r0, [r7, #16]
 8006c94:	f7ff fea8 	bl	80069e8 <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	699b      	ldr	r3, [r3, #24]
 8006c9c:	f003 0320 	and.w	r3, r3, #32
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d011      	beq.n	8006cc8 <HAL_COMP_Init+0x1b8>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a59      	ldr	r2, [pc, #356]	; (8006e10 <HAL_COMP_Init+0x300>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d004      	beq.n	8006cb8 <HAL_COMP_Init+0x1a8>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a58      	ldr	r2, [pc, #352]	; (8006e14 <HAL_COMP_Init+0x304>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d103      	bne.n	8006cc0 <HAL_COMP_Init+0x1b0>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 8006cb8:	6938      	ldr	r0, [r7, #16]
 8006cba:	f7ff fecf 	bl	8006a5c <LL_EXTI_EnableFallingTrig_32_63>
 8006cbe:	e014      	b.n	8006cea <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8006cc0:	6938      	ldr	r0, [r7, #16]
 8006cc2:	f7ff feb9 	bl	8006a38 <LL_EXTI_EnableFallingTrig_0_31>
 8006cc6:	e010      	b.n	8006cea <HAL_COMP_Init+0x1da>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a50      	ldr	r2, [pc, #320]	; (8006e10 <HAL_COMP_Init+0x300>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d004      	beq.n	8006cdc <HAL_COMP_Init+0x1cc>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a4f      	ldr	r2, [pc, #316]	; (8006e14 <HAL_COMP_Init+0x304>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d103      	bne.n	8006ce4 <HAL_COMP_Init+0x1d4>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 8006cdc:	6938      	ldr	r0, [r7, #16]
 8006cde:	f7ff fee3 	bl	8006aa8 <LL_EXTI_DisableFallingTrig_32_63>
 8006ce2:	e002      	b.n	8006cea <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8006ce4:	6938      	ldr	r0, [r7, #16]
 8006ce6:	f7ff fecb 	bl	8006a80 <LL_EXTI_DisableFallingTrig_0_31>
#endif
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a48      	ldr	r2, [pc, #288]	; (8006e10 <HAL_COMP_Init+0x300>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d004      	beq.n	8006cfe <HAL_COMP_Init+0x1ee>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a46      	ldr	r2, [pc, #280]	; (8006e14 <HAL_COMP_Init+0x304>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d103      	bne.n	8006d06 <HAL_COMP_Init+0x1f6>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 8006cfe:	6938      	ldr	r0, [r7, #16]
 8006d00:	f7ff fef6 	bl	8006af0 <LL_EXTI_ClearFlag_32_63>
 8006d04:	e002      	b.n	8006d0c <HAL_COMP_Init+0x1fc>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 8006d06:	6938      	ldr	r0, [r7, #16]
 8006d08:	f7ff fee2 	bl	8006ad0 <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	699b      	ldr	r3, [r3, #24]
 8006d10:	f003 0302 	and.w	r3, r3, #2
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d011      	beq.n	8006d3c <HAL_COMP_Init+0x22c>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a3c      	ldr	r2, [pc, #240]	; (8006e10 <HAL_COMP_Init+0x300>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d004      	beq.n	8006d2c <HAL_COMP_Init+0x21c>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a3b      	ldr	r2, [pc, #236]	; (8006e14 <HAL_COMP_Init+0x304>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d103      	bne.n	8006d34 <HAL_COMP_Init+0x224>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 8006d2c:	6938      	ldr	r0, [r7, #16]
 8006d2e:	f7ff fdfd 	bl	800692c <LL_EXTI_EnableEvent_32_63>
 8006d32:	e014      	b.n	8006d5e <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 8006d34:	6938      	ldr	r0, [r7, #16]
 8006d36:	f7ff fde7 	bl	8006908 <LL_EXTI_EnableEvent_0_31>
 8006d3a:	e010      	b.n	8006d5e <HAL_COMP_Init+0x24e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a33      	ldr	r2, [pc, #204]	; (8006e10 <HAL_COMP_Init+0x300>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d004      	beq.n	8006d50 <HAL_COMP_Init+0x240>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a32      	ldr	r2, [pc, #200]	; (8006e14 <HAL_COMP_Init+0x304>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d103      	bne.n	8006d58 <HAL_COMP_Init+0x248>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 8006d50:	6938      	ldr	r0, [r7, #16]
 8006d52:	f7ff fe11 	bl	8006978 <LL_EXTI_DisableEvent_32_63>
 8006d56:	e002      	b.n	8006d5e <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 8006d58:	6938      	ldr	r0, [r7, #16]
 8006d5a:	f7ff fdf9 	bl	8006950 <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	699b      	ldr	r3, [r3, #24]
 8006d62:	f003 0301 	and.w	r3, r3, #1
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d011      	beq.n	8006d8e <HAL_COMP_Init+0x27e>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a28      	ldr	r2, [pc, #160]	; (8006e10 <HAL_COMP_Init+0x300>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d004      	beq.n	8006d7e <HAL_COMP_Init+0x26e>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a26      	ldr	r2, [pc, #152]	; (8006e14 <HAL_COMP_Init+0x304>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d103      	bne.n	8006d86 <HAL_COMP_Init+0x276>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 8006d7e:	6938      	ldr	r0, [r7, #16]
 8006d80:	f7ff fd88 	bl	8006894 <LL_EXTI_EnableIT_32_63>
 8006d84:	e04b      	b.n	8006e1e <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 8006d86:	6938      	ldr	r0, [r7, #16]
 8006d88:	f7ff fd72 	bl	8006870 <LL_EXTI_EnableIT_0_31>
 8006d8c:	e047      	b.n	8006e1e <HAL_COMP_Init+0x30e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a1f      	ldr	r2, [pc, #124]	; (8006e10 <HAL_COMP_Init+0x300>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d004      	beq.n	8006da2 <HAL_COMP_Init+0x292>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a1d      	ldr	r2, [pc, #116]	; (8006e14 <HAL_COMP_Init+0x304>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d103      	bne.n	8006daa <HAL_COMP_Init+0x29a>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 8006da2:	6938      	ldr	r0, [r7, #16]
 8006da4:	f7ff fd9c 	bl	80068e0 <LL_EXTI_DisableIT_32_63>
 8006da8:	e039      	b.n	8006e1e <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 8006daa:	6938      	ldr	r0, [r7, #16]
 8006dac:	f7ff fd84 	bl	80068b8 <LL_EXTI_DisableIT_0_31>
 8006db0:	e035      	b.n	8006e1e <HAL_COMP_Init+0x30e>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a16      	ldr	r2, [pc, #88]	; (8006e10 <HAL_COMP_Init+0x300>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d004      	beq.n	8006dc6 <HAL_COMP_Init+0x2b6>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a14      	ldr	r2, [pc, #80]	; (8006e14 <HAL_COMP_Init+0x304>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d103      	bne.n	8006dce <HAL_COMP_Init+0x2be>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 8006dc6:	6938      	ldr	r0, [r7, #16]
 8006dc8:	f7ff fdd6 	bl	8006978 <LL_EXTI_DisableEvent_32_63>
 8006dcc:	e002      	b.n	8006dd4 <HAL_COMP_Init+0x2c4>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8006dce:	6938      	ldr	r0, [r7, #16]
 8006dd0:	f7ff fdbe 	bl	8006950 <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif

      /* Disable EXTI interrupt mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a0d      	ldr	r2, [pc, #52]	; (8006e10 <HAL_COMP_Init+0x300>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d004      	beq.n	8006de8 <HAL_COMP_Init+0x2d8>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a0c      	ldr	r2, [pc, #48]	; (8006e14 <HAL_COMP_Init+0x304>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d117      	bne.n	8006e18 <HAL_COMP_Init+0x308>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 8006de8:	6938      	ldr	r0, [r7, #16]
 8006dea:	f7ff fd79 	bl	80068e0 <LL_EXTI_DisableIT_32_63>
 8006dee:	e016      	b.n	8006e1e <HAL_COMP_Init+0x30e>
 8006df0:	ff007e0f 	.word	0xff007e0f
 8006df4:	200001ac 	.word	0x200001ac
 8006df8:	053e2d63 	.word	0x053e2d63
 8006dfc:	40010200 	.word	0x40010200
 8006e00:	40010204 	.word	0x40010204
 8006e04:	40010208 	.word	0x40010208
 8006e08:	4001020c 	.word	0x4001020c
 8006e0c:	40010210 	.word	0x40010210
 8006e10:	40010214 	.word	0x40010214
 8006e14:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8006e18:	6938      	ldr	r0, [r7, #16]
 8006e1a:	f7ff fd4d 	bl	80068b8 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	7f5b      	ldrb	r3, [r3, #29]
 8006e22:	b2db      	uxtb	r3, r3
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d102      	bne.n	8006e2e <HAL_COMP_Init+0x31e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 8006e2e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	3720      	adds	r7, #32
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}

08006e38 <__NVIC_SetPriorityGrouping>:
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b085      	sub	sp, #20
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f003 0307 	and.w	r3, r3, #7
 8006e46:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006e48:	4b0c      	ldr	r3, [pc, #48]	; (8006e7c <__NVIC_SetPriorityGrouping+0x44>)
 8006e4a:	68db      	ldr	r3, [r3, #12]
 8006e4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006e4e:	68ba      	ldr	r2, [r7, #8]
 8006e50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006e54:	4013      	ands	r3, r2
 8006e56:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006e60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006e64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006e6a:	4a04      	ldr	r2, [pc, #16]	; (8006e7c <__NVIC_SetPriorityGrouping+0x44>)
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	60d3      	str	r3, [r2, #12]
}
 8006e70:	bf00      	nop
 8006e72:	3714      	adds	r7, #20
 8006e74:	46bd      	mov	sp, r7
 8006e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7a:	4770      	bx	lr
 8006e7c:	e000ed00 	.word	0xe000ed00

08006e80 <__NVIC_GetPriorityGrouping>:
{
 8006e80:	b480      	push	{r7}
 8006e82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006e84:	4b04      	ldr	r3, [pc, #16]	; (8006e98 <__NVIC_GetPriorityGrouping+0x18>)
 8006e86:	68db      	ldr	r3, [r3, #12]
 8006e88:	0a1b      	lsrs	r3, r3, #8
 8006e8a:	f003 0307 	and.w	r3, r3, #7
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	46bd      	mov	sp, r7
 8006e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e96:	4770      	bx	lr
 8006e98:	e000ed00 	.word	0xe000ed00

08006e9c <__NVIC_EnableIRQ>:
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b083      	sub	sp, #12
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	db0b      	blt.n	8006ec6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006eae:	79fb      	ldrb	r3, [r7, #7]
 8006eb0:	f003 021f 	and.w	r2, r3, #31
 8006eb4:	4907      	ldr	r1, [pc, #28]	; (8006ed4 <__NVIC_EnableIRQ+0x38>)
 8006eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006eba:	095b      	lsrs	r3, r3, #5
 8006ebc:	2001      	movs	r0, #1
 8006ebe:	fa00 f202 	lsl.w	r2, r0, r2
 8006ec2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006ec6:	bf00      	nop
 8006ec8:	370c      	adds	r7, #12
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed0:	4770      	bx	lr
 8006ed2:	bf00      	nop
 8006ed4:	e000e100 	.word	0xe000e100

08006ed8 <__NVIC_SetPriority>:
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b083      	sub	sp, #12
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	4603      	mov	r3, r0
 8006ee0:	6039      	str	r1, [r7, #0]
 8006ee2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	db0a      	blt.n	8006f02 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	b2da      	uxtb	r2, r3
 8006ef0:	490c      	ldr	r1, [pc, #48]	; (8006f24 <__NVIC_SetPriority+0x4c>)
 8006ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ef6:	0112      	lsls	r2, r2, #4
 8006ef8:	b2d2      	uxtb	r2, r2
 8006efa:	440b      	add	r3, r1
 8006efc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006f00:	e00a      	b.n	8006f18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	b2da      	uxtb	r2, r3
 8006f06:	4908      	ldr	r1, [pc, #32]	; (8006f28 <__NVIC_SetPriority+0x50>)
 8006f08:	79fb      	ldrb	r3, [r7, #7]
 8006f0a:	f003 030f 	and.w	r3, r3, #15
 8006f0e:	3b04      	subs	r3, #4
 8006f10:	0112      	lsls	r2, r2, #4
 8006f12:	b2d2      	uxtb	r2, r2
 8006f14:	440b      	add	r3, r1
 8006f16:	761a      	strb	r2, [r3, #24]
}
 8006f18:	bf00      	nop
 8006f1a:	370c      	adds	r7, #12
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr
 8006f24:	e000e100 	.word	0xe000e100
 8006f28:	e000ed00 	.word	0xe000ed00

08006f2c <NVIC_EncodePriority>:
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b089      	sub	sp, #36	; 0x24
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	60f8      	str	r0, [r7, #12]
 8006f34:	60b9      	str	r1, [r7, #8]
 8006f36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	f003 0307 	and.w	r3, r3, #7
 8006f3e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006f40:	69fb      	ldr	r3, [r7, #28]
 8006f42:	f1c3 0307 	rsb	r3, r3, #7
 8006f46:	2b04      	cmp	r3, #4
 8006f48:	bf28      	it	cs
 8006f4a:	2304      	movcs	r3, #4
 8006f4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006f4e:	69fb      	ldr	r3, [r7, #28]
 8006f50:	3304      	adds	r3, #4
 8006f52:	2b06      	cmp	r3, #6
 8006f54:	d902      	bls.n	8006f5c <NVIC_EncodePriority+0x30>
 8006f56:	69fb      	ldr	r3, [r7, #28]
 8006f58:	3b03      	subs	r3, #3
 8006f5a:	e000      	b.n	8006f5e <NVIC_EncodePriority+0x32>
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006f60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006f64:	69bb      	ldr	r3, [r7, #24]
 8006f66:	fa02 f303 	lsl.w	r3, r2, r3
 8006f6a:	43da      	mvns	r2, r3
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	401a      	ands	r2, r3
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006f74:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006f78:	697b      	ldr	r3, [r7, #20]
 8006f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8006f7e:	43d9      	mvns	r1, r3
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006f84:	4313      	orrs	r3, r2
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	3724      	adds	r7, #36	; 0x24
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f90:	4770      	bx	lr
	...

08006f94 <SysTick_Config>:
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b082      	sub	sp, #8
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	3b01      	subs	r3, #1
 8006fa0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006fa4:	d301      	bcc.n	8006faa <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	e00f      	b.n	8006fca <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006faa:	4a0a      	ldr	r2, [pc, #40]	; (8006fd4 <SysTick_Config+0x40>)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	3b01      	subs	r3, #1
 8006fb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006fb2:	210f      	movs	r1, #15
 8006fb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006fb8:	f7ff ff8e 	bl	8006ed8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006fbc:	4b05      	ldr	r3, [pc, #20]	; (8006fd4 <SysTick_Config+0x40>)
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006fc2:	4b04      	ldr	r3, [pc, #16]	; (8006fd4 <SysTick_Config+0x40>)
 8006fc4:	2207      	movs	r2, #7
 8006fc6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8006fc8:	2300      	movs	r3, #0
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3708      	adds	r7, #8
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}
 8006fd2:	bf00      	nop
 8006fd4:	e000e010 	.word	0xe000e010

08006fd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b082      	sub	sp, #8
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f7ff ff29 	bl	8006e38 <__NVIC_SetPriorityGrouping>
}
 8006fe6:	bf00      	nop
 8006fe8:	3708      	adds	r7, #8
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}

08006fee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006fee:	b580      	push	{r7, lr}
 8006ff0:	b086      	sub	sp, #24
 8006ff2:	af00      	add	r7, sp, #0
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	60b9      	str	r1, [r7, #8]
 8006ff8:	607a      	str	r2, [r7, #4]
 8006ffa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006ffc:	f7ff ff40 	bl	8006e80 <__NVIC_GetPriorityGrouping>
 8007000:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007002:	687a      	ldr	r2, [r7, #4]
 8007004:	68b9      	ldr	r1, [r7, #8]
 8007006:	6978      	ldr	r0, [r7, #20]
 8007008:	f7ff ff90 	bl	8006f2c <NVIC_EncodePriority>
 800700c:	4602      	mov	r2, r0
 800700e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007012:	4611      	mov	r1, r2
 8007014:	4618      	mov	r0, r3
 8007016:	f7ff ff5f 	bl	8006ed8 <__NVIC_SetPriority>
}
 800701a:	bf00      	nop
 800701c:	3718      	adds	r7, #24
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}

08007022 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007022:	b580      	push	{r7, lr}
 8007024:	b082      	sub	sp, #8
 8007026:	af00      	add	r7, sp, #0
 8007028:	4603      	mov	r3, r0
 800702a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800702c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007030:	4618      	mov	r0, r3
 8007032:	f7ff ff33 	bl	8006e9c <__NVIC_EnableIRQ>
}
 8007036:	bf00      	nop
 8007038:	3708      	adds	r7, #8
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}

0800703e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800703e:	b580      	push	{r7, lr}
 8007040:	b082      	sub	sp, #8
 8007042:	af00      	add	r7, sp, #0
 8007044:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f7ff ffa4 	bl	8006f94 <SysTick_Config>
 800704c:	4603      	mov	r3, r0
}
 800704e:	4618      	mov	r0, r3
 8007050:	3708      	adds	r7, #8
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}

08007056 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8007056:	b580      	push	{r7, lr}
 8007058:	b082      	sub	sp, #8
 800705a:	af00      	add	r7, sp, #0
 800705c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d101      	bne.n	8007068 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8007064:	2301      	movs	r3, #1
 8007066:	e014      	b.n	8007092 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	791b      	ldrb	r3, [r3, #4]
 800706c:	b2db      	uxtb	r3, r3
 800706e:	2b00      	cmp	r3, #0
 8007070:	d105      	bne.n	800707e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2200      	movs	r2, #0
 8007076:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f7fc fed5 	bl	8003e28 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2202      	movs	r2, #2
 8007082:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2200      	movs	r2, #0
 8007088:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2201      	movs	r2, #1
 800708e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8007090:	2300      	movs	r3, #0
}
 8007092:	4618      	mov	r0, r3
 8007094:	3708      	adds	r7, #8
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}

0800709a <HAL_DAC_Start>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800709a:	b580      	push	{r7, lr}
 800709c:	b082      	sub	sp, #8
 800709e:	af00      	add	r7, sp, #0
 80070a0:	6078      	str	r0, [r7, #4]
 80070a2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	795b      	ldrb	r3, [r3, #5]
 80070a8:	2b01      	cmp	r3, #1
 80070aa:	d101      	bne.n	80070b0 <HAL_DAC_Start+0x16>
 80070ac:	2302      	movs	r3, #2
 80070ae:	e043      	b.n	8007138 <HAL_DAC_Start+0x9e>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2201      	movs	r2, #1
 80070b4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2202      	movs	r2, #2
 80070ba:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	6819      	ldr	r1, [r3, #0]
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	f003 0310 	and.w	r3, r3, #16
 80070c8:	2201      	movs	r2, #1
 80070ca:	409a      	lsls	r2, r3
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	430a      	orrs	r2, r1
 80070d2:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 80070d4:	2001      	movs	r0, #1
 80070d6:	f7fe fb4d 	bl	8005774 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d10f      	bne.n	8007100 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80070ea:	2b02      	cmp	r3, #2
 80070ec:	d11d      	bne.n	800712a <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	685a      	ldr	r2, [r3, #4]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f042 0201 	orr.w	r2, r2, #1
 80070fc:	605a      	str	r2, [r3, #4]
 80070fe:	e014      	b.n	800712a <HAL_DAC_Start+0x90>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	f003 0310 	and.w	r3, r3, #16
 8007110:	2102      	movs	r1, #2
 8007112:	fa01 f303 	lsl.w	r3, r1, r3
 8007116:	429a      	cmp	r2, r3
 8007118:	d107      	bne.n	800712a <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	685a      	ldr	r2, [r3, #4]
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f042 0202 	orr.w	r2, r2, #2
 8007128:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2201      	movs	r2, #1
 800712e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2200      	movs	r2, #0
 8007134:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8007136:	2300      	movs	r3, #0
}
 8007138:	4618      	mov	r0, r3
 800713a:	3708      	adds	r7, #8
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}

08007140 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b086      	sub	sp, #24
 8007144:	af00      	add	r7, sp, #0
 8007146:	60f8      	str	r0, [r7, #12]
 8007148:	60b9      	str	r1, [r7, #8]
 800714a:	607a      	str	r2, [r7, #4]
 800714c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 800714e:	2300      	movs	r3, #0
 8007150:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	795b      	ldrb	r3, [r3, #5]
 8007156:	2b01      	cmp	r3, #1
 8007158:	d101      	bne.n	800715e <HAL_DAC_Start_DMA+0x1e>
 800715a:	2302      	movs	r3, #2
 800715c:	e0a1      	b.n	80072a2 <HAL_DAC_Start_DMA+0x162>
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2201      	movs	r2, #1
 8007162:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2202      	movs	r2, #2
 8007168:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d12a      	bne.n	80071c6 <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	689b      	ldr	r3, [r3, #8]
 8007174:	4a4d      	ldr	r2, [pc, #308]	; (80072ac <HAL_DAC_Start_DMA+0x16c>)
 8007176:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	689b      	ldr	r3, [r3, #8]
 800717c:	4a4c      	ldr	r2, [pc, #304]	; (80072b0 <HAL_DAC_Start_DMA+0x170>)
 800717e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	689b      	ldr	r3, [r3, #8]
 8007184:	4a4b      	ldr	r2, [pc, #300]	; (80072b4 <HAL_DAC_Start_DMA+0x174>)
 8007186:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	681a      	ldr	r2, [r3, #0]
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007196:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8007198:	6a3b      	ldr	r3, [r7, #32]
 800719a:	2b04      	cmp	r3, #4
 800719c:	d009      	beq.n	80071b2 <HAL_DAC_Start_DMA+0x72>
 800719e:	2b08      	cmp	r3, #8
 80071a0:	d00c      	beq.n	80071bc <HAL_DAC_Start_DMA+0x7c>
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d000      	beq.n	80071a8 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80071a6:	e039      	b.n	800721c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	3308      	adds	r3, #8
 80071ae:	613b      	str	r3, [r7, #16]
        break;
 80071b0:	e034      	b.n	800721c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	330c      	adds	r3, #12
 80071b8:	613b      	str	r3, [r7, #16]
        break;
 80071ba:	e02f      	b.n	800721c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	3310      	adds	r3, #16
 80071c2:	613b      	str	r3, [r7, #16]
        break;
 80071c4:	e02a      	b.n	800721c <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	68db      	ldr	r3, [r3, #12]
 80071ca:	4a3b      	ldr	r2, [pc, #236]	; (80072b8 <HAL_DAC_Start_DMA+0x178>)
 80071cc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	68db      	ldr	r3, [r3, #12]
 80071d2:	4a3a      	ldr	r2, [pc, #232]	; (80072bc <HAL_DAC_Start_DMA+0x17c>)
 80071d4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	68db      	ldr	r3, [r3, #12]
 80071da:	4a39      	ldr	r2, [pc, #228]	; (80072c0 <HAL_DAC_Start_DMA+0x180>)
 80071dc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	681a      	ldr	r2, [r3, #0]
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80071ec:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80071ee:	6a3b      	ldr	r3, [r7, #32]
 80071f0:	2b04      	cmp	r3, #4
 80071f2:	d009      	beq.n	8007208 <HAL_DAC_Start_DMA+0xc8>
 80071f4:	2b08      	cmp	r3, #8
 80071f6:	d00c      	beq.n	8007212 <HAL_DAC_Start_DMA+0xd2>
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d000      	beq.n	80071fe <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80071fc:	e00e      	b.n	800721c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	3314      	adds	r3, #20
 8007204:	613b      	str	r3, [r7, #16]
        break;
 8007206:	e009      	b.n	800721c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	3318      	adds	r3, #24
 800720e:	613b      	str	r3, [r7, #16]
        break;
 8007210:	e004      	b.n	800721c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	331c      	adds	r3, #28
 8007218:	613b      	str	r3, [r7, #16]
        break;
 800721a:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d111      	bne.n	8007246 <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	681a      	ldr	r2, [r3, #0]
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007230:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	6898      	ldr	r0, [r3, #8]
 8007236:	6879      	ldr	r1, [r7, #4]
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	693a      	ldr	r2, [r7, #16]
 800723c:	f000 fbc8 	bl	80079d0 <HAL_DMA_Start_IT>
 8007240:	4603      	mov	r3, r0
 8007242:	75fb      	strb	r3, [r7, #23]
 8007244:	e010      	b.n	8007268 <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	681a      	ldr	r2, [r3, #0]
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8007254:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	68d8      	ldr	r0, [r3, #12]
 800725a:	6879      	ldr	r1, [r7, #4]
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	693a      	ldr	r2, [r7, #16]
 8007260:	f000 fbb6 	bl	80079d0 <HAL_DMA_Start_IT>
 8007264:	4603      	mov	r3, r0
 8007266:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	2200      	movs	r2, #0
 800726c:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 800726e:	7dfb      	ldrb	r3, [r7, #23]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d10f      	bne.n	8007294 <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	6819      	ldr	r1, [r3, #0]
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	f003 0310 	and.w	r3, r3, #16
 8007280:	2201      	movs	r2, #1
 8007282:	409a      	lsls	r2, r3
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	430a      	orrs	r2, r1
 800728a:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 800728c:	2001      	movs	r0, #1
 800728e:	f7fe fa71 	bl	8005774 <HAL_Delay>
 8007292:	e005      	b.n	80072a0 <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	691b      	ldr	r3, [r3, #16]
 8007298:	f043 0204 	orr.w	r2, r3, #4
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80072a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	3718      	adds	r7, #24
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}
 80072aa:	bf00      	nop
 80072ac:	0800776d 	.word	0x0800776d
 80072b0:	0800778f 	.word	0x0800778f
 80072b4:	080077ab 	.word	0x080077ab
 80072b8:	08007815 	.word	0x08007815
 80072bc:	08007837 	.word	0x08007837
 80072c0:	08007853 	.word	0x08007853

080072c4 <HAL_DAC_Stop_DMA>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b084      	sub	sp, #16
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
 80072cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	6819      	ldr	r1, [r3, #0]
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	f003 0310 	and.w	r3, r3, #16
 80072da:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80072de:	fa02 f303 	lsl.w	r3, r2, r3
 80072e2:	43da      	mvns	r2, r3
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	400a      	ands	r2, r1
 80072ea:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	6819      	ldr	r1, [r3, #0]
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	f003 0310 	and.w	r3, r3, #16
 80072f8:	2201      	movs	r2, #1
 80072fa:	fa02 f303 	lsl.w	r3, r2, r3
 80072fe:	43da      	mvns	r2, r3
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	400a      	ands	r2, r1
 8007306:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before enabling peripheral after disabling it */
  HAL_Delay(1);
 8007308:	2001      	movs	r0, #1
 800730a:	f7fe fa33 	bl	8005774 <HAL_Delay>

  /* Disable the DMA channel */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d10f      	bne.n	8007334 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	689b      	ldr	r3, [r3, #8]
 8007318:	4618      	mov	r0, r3
 800731a:	f000 fbd4 	bl	8007ac6 <HAL_DMA_Abort>
 800731e:	4603      	mov	r3, r0
 8007320:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	681a      	ldr	r2, [r3, #0]
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007330:	601a      	str	r2, [r3, #0]
 8007332:	e00e      	b.n	8007352 <HAL_DAC_Stop_DMA+0x8e>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle2);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	68db      	ldr	r3, [r3, #12]
 8007338:	4618      	mov	r0, r3
 800733a:	f000 fbc4 	bl	8007ac6 <HAL_DMA_Abort>
 800733e:	4603      	mov	r3, r0
 8007340:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	681a      	ldr	r2, [r3, #0]
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8007350:	601a      	str	r2, [r3, #0]
  }

  /* Check if DMA Channel effectively disabled */
  if (status != HAL_OK)
 8007352:	7bfb      	ldrb	r3, [r7, #15]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d003      	beq.n	8007360 <HAL_DAC_Stop_DMA+0x9c>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2204      	movs	r2, #4
 800735c:	711a      	strb	r2, [r3, #4]
 800735e:	e002      	b.n	8007366 <HAL_DAC_Stop_DMA+0xa2>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2201      	movs	r2, #1
 8007364:	711a      	strb	r2, [r3, #4]
  }

  /* Return function status */
  return status;
 8007366:	7bfb      	ldrb	r3, [r7, #15]
}
 8007368:	4618      	mov	r0, r3
 800736a:	3710      	adds	r7, #16
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}

08007370 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8007370:	b480      	push	{r7}
 8007372:	b087      	sub	sp, #28
 8007374:	af00      	add	r7, sp, #0
 8007376:	60f8      	str	r0, [r7, #12]
 8007378:	60b9      	str	r1, [r7, #8]
 800737a:	607a      	str	r2, [r7, #4]
 800737c:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 800737e:	2300      	movs	r3, #0
 8007380:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d105      	bne.n	80073a0 <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8007394:	697a      	ldr	r2, [r7, #20]
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	4413      	add	r3, r2
 800739a:	3308      	adds	r3, #8
 800739c:	617b      	str	r3, [r7, #20]
 800739e:	e004      	b.n	80073aa <HAL_DAC_SetValue+0x3a>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80073a0:	697a      	ldr	r2, [r7, #20]
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	4413      	add	r3, r2
 80073a6:	3314      	adds	r3, #20
 80073a8:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	461a      	mov	r2, r3
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80073b2:	2300      	movs	r3, #0
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	371c      	adds	r7, #28
 80073b8:	46bd      	mov	sp, r7
 80073ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073be:	4770      	bx	lr

080073c0 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b083      	sub	sp, #12
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80073c8:	bf00      	nop
 80073ca:	370c      	adds	r7, #12
 80073cc:	46bd      	mov	sp, r7
 80073ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d2:	4770      	bx	lr

080073d4 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80073d4:	b480      	push	{r7}
 80073d6:	b083      	sub	sp, #12
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80073dc:	bf00      	nop
 80073de:	370c      	adds	r7, #12
 80073e0:	46bd      	mov	sp, r7
 80073e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e6:	4770      	bx	lr

080073e8 <HAL_DAC_GetValue>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval The selected DAC channel data output value.
  */
uint32_t HAL_DAC_GetValue(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b083      	sub	sp, #12
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
 80073f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Returns the DAC channel data output register value */
  if (Channel == DAC_CHANNEL_1)
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d103      	bne.n	8007400 <HAL_DAC_GetValue+0x18>
  {
    return hdac->Instance->DOR1;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073fe:	e002      	b.n	8007406 <HAL_DAC_GetValue+0x1e>
  }
  else
  {
    return hdac->Instance->DOR2;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  }
}
 8007406:	4618      	mov	r0, r3
 8007408:	370c      	adds	r7, #12
 800740a:	46bd      	mov	sp, r7
 800740c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007410:	4770      	bx	lr
	...

08007414 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b08a      	sub	sp, #40	; 0x28
 8007418:	af00      	add	r7, sp, #0
 800741a:	60f8      	str	r0, [r7, #12]
 800741c:	60b9      	str	r1, [r7, #8]
 800741e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8007420:	2300      	movs	r3, #0
 8007422:	61fb      	str	r3, [r7, #28]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	795b      	ldrb	r3, [r3, #5]
 8007428:	2b01      	cmp	r3, #1
 800742a:	d101      	bne.n	8007430 <HAL_DAC_ConfigChannel+0x1c>
 800742c:	2302      	movs	r3, #2
 800742e:	e194      	b.n	800775a <HAL_DAC_ConfigChannel+0x346>
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	2201      	movs	r2, #1
 8007434:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	2202      	movs	r2, #2
 800743a:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	689b      	ldr	r3, [r3, #8]
 8007440:	2b04      	cmp	r3, #4
 8007442:	d174      	bne.n	800752e <HAL_DAC_ConfigChannel+0x11a>
    /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d137      	bne.n	80074ba <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 800744a:	f7fe f987 	bl	800575c <HAL_GetTick>
 800744e:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8007450:	e011      	b.n	8007476 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8007452:	f7fe f983 	bl	800575c <HAL_GetTick>
 8007456:	4602      	mov	r2, r0
 8007458:	69fb      	ldr	r3, [r7, #28]
 800745a:	1ad3      	subs	r3, r2, r3
 800745c:	2b01      	cmp	r3, #1
 800745e:	d90a      	bls.n	8007476 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	691b      	ldr	r3, [r3, #16]
 8007464:	f043 0208 	orr.w	r2, r3, #8
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	2203      	movs	r2, #3
 8007470:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8007472:	2303      	movs	r3, #3
 8007474:	e171      	b.n	800775a <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800747c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007480:	2b00      	cmp	r3, #0
 8007482:	d1e6      	bne.n	8007452 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8007484:	2001      	movs	r0, #1
 8007486:	f7fe f975 	bl	8005774 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	68ba      	ldr	r2, [r7, #8]
 8007490:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007492:	641a      	str	r2, [r3, #64]	; 0x40
 8007494:	e01e      	b.n	80074d4 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8007496:	f7fe f961 	bl	800575c <HAL_GetTick>
 800749a:	4602      	mov	r2, r0
 800749c:	69fb      	ldr	r3, [r7, #28]
 800749e:	1ad3      	subs	r3, r2, r3
 80074a0:	2b01      	cmp	r3, #1
 80074a2:	d90a      	bls.n	80074ba <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	691b      	ldr	r3, [r3, #16]
 80074a8:	f043 0208 	orr.w	r2, r3, #8
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	2203      	movs	r2, #3
 80074b4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80074b6:	2303      	movs	r3, #3
 80074b8:	e14f      	b.n	800775a <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	dbe8      	blt.n	8007496 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 80074c4:	2001      	movs	r0, #1
 80074c6:	f7fe f955 	bl	8005774 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	68ba      	ldr	r2, [r7, #8]
 80074d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80074d2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f003 0310 	and.w	r3, r3, #16
 80074e0:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80074e4:	fa01 f303 	lsl.w	r3, r1, r3
 80074e8:	43db      	mvns	r3, r3
 80074ea:	ea02 0103 	and.w	r1, r2, r3
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f003 0310 	and.w	r3, r3, #16
 80074f8:	409a      	lsls	r2, r3
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	430a      	orrs	r2, r1
 8007500:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f003 0310 	and.w	r3, r3, #16
 800750e:	21ff      	movs	r1, #255	; 0xff
 8007510:	fa01 f303 	lsl.w	r3, r1, r3
 8007514:	43db      	mvns	r3, r3
 8007516:	ea02 0103 	and.w	r1, r2, r3
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f003 0310 	and.w	r3, r3, #16
 8007524:	409a      	lsls	r2, r3
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	430a      	orrs	r2, r1
 800752c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	69db      	ldr	r3, [r3, #28]
 8007532:	2b01      	cmp	r3, #1
 8007534:	d11d      	bne.n	8007572 <HAL_DAC_ConfigChannel+0x15e>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800753c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f003 0310 	and.w	r3, r3, #16
 8007544:	221f      	movs	r2, #31
 8007546:	fa02 f303 	lsl.w	r3, r2, r3
 800754a:	43db      	mvns	r3, r3
 800754c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800754e:	4013      	ands	r3, r2
 8007550:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	6a1b      	ldr	r3, [r3, #32]
 8007556:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f003 0310 	and.w	r3, r3, #16
 800755e:	69ba      	ldr	r2, [r7, #24]
 8007560:	fa02 f303 	lsl.w	r3, r2, r3
 8007564:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007566:	4313      	orrs	r3, r2
 8007568:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007570:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007578:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f003 0310 	and.w	r3, r3, #16
 8007580:	2207      	movs	r2, #7
 8007582:	fa02 f303 	lsl.w	r3, r2, r3
 8007586:	43db      	mvns	r3, r3
 8007588:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800758a:	4013      	ands	r3, r2
 800758c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_EXTERNAL) == DAC_CHIPCONNECT_EXTERNAL)
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	699b      	ldr	r3, [r3, #24]
 8007592:	f003 0301 	and.w	r3, r3, #1
 8007596:	2b00      	cmp	r3, #0
 8007598:	d002      	beq.n	80075a0 <HAL_DAC_ConfigChannel+0x18c>
  {
    connectOnChip = 0x00000000UL;
 800759a:	2300      	movs	r3, #0
 800759c:	623b      	str	r3, [r7, #32]
 800759e:	e011      	b.n	80075c4 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_INTERNAL) == DAC_CHIPCONNECT_INTERNAL)
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	699b      	ldr	r3, [r3, #24]
 80075a4:	f003 0302 	and.w	r3, r3, #2
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d002      	beq.n	80075b2 <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80075ac:	2301      	movs	r3, #1
 80075ae:	623b      	str	r3, [r7, #32]
 80075b0:	e008      	b.n	80075c4 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_BOTH) == DAC_CHIPCONNECT_BOTH */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	695b      	ldr	r3, [r3, #20]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d102      	bne.n	80075c0 <HAL_DAC_ConfigChannel+0x1ac>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80075ba:	2301      	movs	r3, #1
 80075bc:	623b      	str	r3, [r7, #32]
 80075be:	e001      	b.n	80075c4 <HAL_DAC_ConfigChannel+0x1b0>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80075c0:	2300      	movs	r3, #0
 80075c2:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	689a      	ldr	r2, [r3, #8]
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	695b      	ldr	r3, [r3, #20]
 80075cc:	4313      	orrs	r3, r2
 80075ce:	6a3a      	ldr	r2, [r7, #32]
 80075d0:	4313      	orrs	r3, r2
 80075d2:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f003 0310 	and.w	r3, r3, #16
 80075da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80075de:	fa02 f303 	lsl.w	r3, r2, r3
 80075e2:	43db      	mvns	r3, r3
 80075e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075e6:	4013      	ands	r3, r2
 80075e8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	791b      	ldrb	r3, [r3, #4]
 80075ee:	2b01      	cmp	r3, #1
 80075f0:	d102      	bne.n	80075f8 <HAL_DAC_ConfigChannel+0x1e4>
 80075f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80075f6:	e000      	b.n	80075fa <HAL_DAC_ConfigChannel+0x1e6>
 80075f8:	2300      	movs	r3, #0
 80075fa:	69ba      	ldr	r2, [r7, #24]
 80075fc:	4313      	orrs	r3, r2
 80075fe:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f003 0310 	and.w	r3, r3, #16
 8007606:	f44f 7200 	mov.w	r2, #512	; 0x200
 800760a:	fa02 f303 	lsl.w	r3, r2, r3
 800760e:	43db      	mvns	r3, r3
 8007610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007612:	4013      	ands	r3, r2
 8007614:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	795b      	ldrb	r3, [r3, #5]
 800761a:	2b01      	cmp	r3, #1
 800761c:	d102      	bne.n	8007624 <HAL_DAC_ConfigChannel+0x210>
 800761e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007622:	e000      	b.n	8007626 <HAL_DAC_ConfigChannel+0x212>
 8007624:	2300      	movs	r3, #0
 8007626:	69ba      	ldr	r2, [r7, #24]
 8007628:	4313      	orrs	r3, r2
 800762a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 800762c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800762e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8007632:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	2b02      	cmp	r3, #2
 800763a:	d114      	bne.n	8007666 <HAL_DAC_ConfigChannel+0x252>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 800763c:	f001 faf8 	bl	8008c30 <HAL_RCC_GetHCLKFreq>
 8007640:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	4a47      	ldr	r2, [pc, #284]	; (8007764 <HAL_DAC_ConfigChannel+0x350>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d904      	bls.n	8007654 <HAL_DAC_ConfigChannel+0x240>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800764a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800764c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007650:	627b      	str	r3, [r7, #36]	; 0x24
 8007652:	e00d      	b.n	8007670 <HAL_DAC_ConfigChannel+0x25c>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8007654:	697b      	ldr	r3, [r7, #20]
 8007656:	4a44      	ldr	r2, [pc, #272]	; (8007768 <HAL_DAC_ConfigChannel+0x354>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d909      	bls.n	8007670 <HAL_DAC_ConfigChannel+0x25c>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800765c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800765e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007662:	627b      	str	r3, [r7, #36]	; 0x24
 8007664:	e004      	b.n	8007670 <HAL_DAC_ConfigChannel+0x25c>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800766c:	4313      	orrs	r3, r2
 800766e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f003 0310 	and.w	r3, r3, #16
 8007676:	69ba      	ldr	r2, [r7, #24]
 8007678:	fa02 f303 	lsl.w	r3, r2, r3
 800767c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800767e:	4313      	orrs	r3, r2
 8007680:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007688:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	6819      	ldr	r1, [r3, #0]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f003 0310 	and.w	r3, r3, #16
 8007696:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800769a:	fa02 f303 	lsl.w	r3, r2, r3
 800769e:	43da      	mvns	r2, r3
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	400a      	ands	r2, r1
 80076a6:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f003 0310 	and.w	r3, r3, #16
 80076b6:	f640 72fe 	movw	r2, #4094	; 0xffe
 80076ba:	fa02 f303 	lsl.w	r3, r2, r3
 80076be:	43db      	mvns	r3, r3
 80076c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076c2:	4013      	ands	r3, r2
 80076c4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	68db      	ldr	r3, [r3, #12]
 80076ca:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f003 0310 	and.w	r3, r3, #16
 80076d2:	69ba      	ldr	r2, [r7, #24]
 80076d4:	fa02 f303 	lsl.w	r3, r2, r3
 80076d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076da:	4313      	orrs	r3, r2
 80076dc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076e4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	6819      	ldr	r1, [r3, #0]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f003 0310 	and.w	r3, r3, #16
 80076f2:	22c0      	movs	r2, #192	; 0xc0
 80076f4:	fa02 f303 	lsl.w	r3, r2, r3
 80076f8:	43da      	mvns	r2, r3
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	400a      	ands	r2, r1
 8007700:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	68db      	ldr	r3, [r3, #12]
 8007706:	089b      	lsrs	r3, r3, #2
 8007708:	f003 030f 	and.w	r3, r3, #15
 800770c:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	691b      	ldr	r3, [r3, #16]
 8007712:	089b      	lsrs	r3, r3, #2
 8007714:	021b      	lsls	r3, r3, #8
 8007716:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800771a:	69ba      	ldr	r2, [r7, #24]
 800771c:	4313      	orrs	r3, r2
 800771e:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f003 0310 	and.w	r3, r3, #16
 800772c:	f640 710f 	movw	r1, #3855	; 0xf0f
 8007730:	fa01 f303 	lsl.w	r3, r1, r3
 8007734:	43db      	mvns	r3, r3
 8007736:	ea02 0103 	and.w	r1, r2, r3
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f003 0310 	and.w	r3, r3, #16
 8007740:	69ba      	ldr	r2, [r7, #24]
 8007742:	409a      	lsls	r2, r3
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	430a      	orrs	r2, r1
 800774a:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	2201      	movs	r2, #1
 8007750:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	2200      	movs	r2, #0
 8007756:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8007758:	2300      	movs	r3, #0
}
 800775a:	4618      	mov	r0, r3
 800775c:	3728      	adds	r7, #40	; 0x28
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}
 8007762:	bf00      	nop
 8007764:	09896800 	.word	0x09896800
 8007768:	04c4b400 	.word	0x04c4b400

0800776c <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b084      	sub	sp, #16
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007778:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800777a:	68f8      	ldr	r0, [r7, #12]
 800777c:	f7ff fe20 	bl	80073c0 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2201      	movs	r2, #1
 8007784:	711a      	strb	r2, [r3, #4]
}
 8007786:	bf00      	nop
 8007788:	3710      	adds	r7, #16
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}

0800778e <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800778e:	b580      	push	{r7, lr}
 8007790:	b084      	sub	sp, #16
 8007792:	af00      	add	r7, sp, #0
 8007794:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800779a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800779c:	68f8      	ldr	r0, [r7, #12]
 800779e:	f7ff fe19 	bl	80073d4 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80077a2:	bf00      	nop
 80077a4:	3710      	adds	r7, #16
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}

080077aa <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80077aa:	b580      	push	{r7, lr}
 80077ac:	b084      	sub	sp, #16
 80077ae:	af00      	add	r7, sp, #0
 80077b0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077b6:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	691b      	ldr	r3, [r3, #16]
 80077bc:	f043 0204 	orr.w	r2, r3, #4
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80077c4:	68f8      	ldr	r0, [r7, #12]
 80077c6:	f7fc ffd4 	bl	8004772 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	2201      	movs	r2, #1
 80077ce:	711a      	strb	r2, [r3, #4]
}
 80077d0:	bf00      	nop
 80077d2:	3710      	adds	r7, #16
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}

080077d8 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80077d8:	b480      	push	{r7}
 80077da:	b083      	sub	sp, #12
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80077e0:	bf00      	nop
 80077e2:	370c      	adds	r7, #12
 80077e4:	46bd      	mov	sp, r7
 80077e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ea:	4770      	bx	lr

080077ec <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b083      	sub	sp, #12
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80077f4:	bf00      	nop
 80077f6:	370c      	adds	r7, #12
 80077f8:	46bd      	mov	sp, r7
 80077fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fe:	4770      	bx	lr

08007800 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8007800:	b480      	push	{r7}
 8007802:	b083      	sub	sp, #12
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8007808:	bf00      	nop
 800780a:	370c      	adds	r7, #12
 800780c:	46bd      	mov	sp, r7
 800780e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007812:	4770      	bx	lr

08007814 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b084      	sub	sp, #16
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007820:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8007822:	68f8      	ldr	r0, [r7, #12]
 8007824:	f7ff ffd8 	bl	80077d8 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	2201      	movs	r2, #1
 800782c:	711a      	strb	r2, [r3, #4]
}
 800782e:	bf00      	nop
 8007830:	3710      	adds	r7, #16
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}

08007836 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8007836:	b580      	push	{r7, lr}
 8007838:	b084      	sub	sp, #16
 800783a:	af00      	add	r7, sp, #0
 800783c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007842:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8007844:	68f8      	ldr	r0, [r7, #12]
 8007846:	f7ff ffd1 	bl	80077ec <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800784a:	bf00      	nop
 800784c:	3710      	adds	r7, #16
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}

08007852 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8007852:	b580      	push	{r7, lr}
 8007854:	b084      	sub	sp, #16
 8007856:	af00      	add	r7, sp, #0
 8007858:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800785e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	691b      	ldr	r3, [r3, #16]
 8007864:	f043 0204 	orr.w	r2, r3, #4
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800786c:	68f8      	ldr	r0, [r7, #12]
 800786e:	f7ff ffc7 	bl	8007800 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	2201      	movs	r2, #1
 8007876:	711a      	strb	r2, [r3, #4]
}
 8007878:	bf00      	nop
 800787a:	3710      	adds	r7, #16
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}

08007880 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b084      	sub	sp, #16
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d101      	bne.n	8007892 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800788e:	2301      	movs	r3, #1
 8007890:	e08d      	b.n	80079ae <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	461a      	mov	r2, r3
 8007898:	4b47      	ldr	r3, [pc, #284]	; (80079b8 <HAL_DMA_Init+0x138>)
 800789a:	429a      	cmp	r2, r3
 800789c:	d80f      	bhi.n	80078be <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	461a      	mov	r2, r3
 80078a4:	4b45      	ldr	r3, [pc, #276]	; (80079bc <HAL_DMA_Init+0x13c>)
 80078a6:	4413      	add	r3, r2
 80078a8:	4a45      	ldr	r2, [pc, #276]	; (80079c0 <HAL_DMA_Init+0x140>)
 80078aa:	fba2 2303 	umull	r2, r3, r2, r3
 80078ae:	091b      	lsrs	r3, r3, #4
 80078b0:	009a      	lsls	r2, r3, #2
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	4a42      	ldr	r2, [pc, #264]	; (80079c4 <HAL_DMA_Init+0x144>)
 80078ba:	641a      	str	r2, [r3, #64]	; 0x40
 80078bc:	e00e      	b.n	80078dc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	461a      	mov	r2, r3
 80078c4:	4b40      	ldr	r3, [pc, #256]	; (80079c8 <HAL_DMA_Init+0x148>)
 80078c6:	4413      	add	r3, r2
 80078c8:	4a3d      	ldr	r2, [pc, #244]	; (80079c0 <HAL_DMA_Init+0x140>)
 80078ca:	fba2 2303 	umull	r2, r3, r2, r3
 80078ce:	091b      	lsrs	r3, r3, #4
 80078d0:	009a      	lsls	r2, r3, #2
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	4a3c      	ldr	r2, [pc, #240]	; (80079cc <HAL_DMA_Init+0x14c>)
 80078da:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2202      	movs	r2, #2
 80078e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80078f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078f6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8007900:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	691b      	ldr	r3, [r3, #16]
 8007906:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800790c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	699b      	ldr	r3, [r3, #24]
 8007912:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007918:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6a1b      	ldr	r3, [r3, #32]
 800791e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007920:	68fa      	ldr	r2, [r7, #12]
 8007922:	4313      	orrs	r3, r2
 8007924:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	68fa      	ldr	r2, [r7, #12]
 800792c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f000 fa10 	bl	8007d54 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	689b      	ldr	r3, [r3, #8]
 8007938:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800793c:	d102      	bne.n	8007944 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2200      	movs	r2, #0
 8007942:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	685a      	ldr	r2, [r3, #4]
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800794c:	b2d2      	uxtb	r2, r2
 800794e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007954:	687a      	ldr	r2, [r7, #4]
 8007956:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007958:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	685b      	ldr	r3, [r3, #4]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d010      	beq.n	8007984 <HAL_DMA_Init+0x104>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	685b      	ldr	r3, [r3, #4]
 8007966:	2b04      	cmp	r3, #4
 8007968:	d80c      	bhi.n	8007984 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f000 fa30 	bl	8007dd0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007974:	2200      	movs	r2, #0
 8007976:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800797c:	687a      	ldr	r2, [r7, #4]
 800797e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007980:	605a      	str	r2, [r3, #4]
 8007982:	e008      	b.n	8007996 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2200      	movs	r2, #0
 8007988:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2200      	movs	r2, #0
 800798e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2200      	movs	r2, #0
 8007994:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2200      	movs	r2, #0
 800799a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2201      	movs	r2, #1
 80079a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2200      	movs	r2, #0
 80079a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80079ac:	2300      	movs	r3, #0
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3710      	adds	r7, #16
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}
 80079b6:	bf00      	nop
 80079b8:	40020407 	.word	0x40020407
 80079bc:	bffdfff8 	.word	0xbffdfff8
 80079c0:	cccccccd 	.word	0xcccccccd
 80079c4:	40020000 	.word	0x40020000
 80079c8:	bffdfbf8 	.word	0xbffdfbf8
 80079cc:	40020400 	.word	0x40020400

080079d0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b086      	sub	sp, #24
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	60f8      	str	r0, [r7, #12]
 80079d8:	60b9      	str	r1, [r7, #8]
 80079da:	607a      	str	r2, [r7, #4]
 80079dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80079de:	2300      	movs	r3, #0
 80079e0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80079e8:	2b01      	cmp	r3, #1
 80079ea:	d101      	bne.n	80079f0 <HAL_DMA_Start_IT+0x20>
 80079ec:	2302      	movs	r3, #2
 80079ee:	e066      	b.n	8007abe <HAL_DMA_Start_IT+0xee>
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	2201      	movs	r2, #1
 80079f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80079fe:	b2db      	uxtb	r3, r3
 8007a00:	2b01      	cmp	r3, #1
 8007a02:	d155      	bne.n	8007ab0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	2202      	movs	r2, #2
 8007a08:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	681a      	ldr	r2, [r3, #0]
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f022 0201 	bic.w	r2, r2, #1
 8007a20:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	687a      	ldr	r2, [r7, #4]
 8007a26:	68b9      	ldr	r1, [r7, #8]
 8007a28:	68f8      	ldr	r0, [r7, #12]
 8007a2a:	f000 f954 	bl	8007cd6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d008      	beq.n	8007a48 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	681a      	ldr	r2, [r3, #0]
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f042 020e 	orr.w	r2, r2, #14
 8007a44:	601a      	str	r2, [r3, #0]
 8007a46:	e00f      	b.n	8007a68 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	681a      	ldr	r2, [r3, #0]
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f022 0204 	bic.w	r2, r2, #4
 8007a56:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	681a      	ldr	r2, [r3, #0]
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f042 020a 	orr.w	r2, r2, #10
 8007a66:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d007      	beq.n	8007a86 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a7a:	681a      	ldr	r2, [r3, #0]
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007a84:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d007      	beq.n	8007a9e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a92:	681a      	ldr	r2, [r3, #0]
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007a9c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	681a      	ldr	r2, [r3, #0]
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f042 0201 	orr.w	r2, r2, #1
 8007aac:	601a      	str	r2, [r3, #0]
 8007aae:	e005      	b.n	8007abc <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8007ab8:	2302      	movs	r3, #2
 8007aba:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8007abc:	7dfb      	ldrb	r3, [r7, #23]
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	3718      	adds	r7, #24
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}

08007ac6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007ac6:	b480      	push	{r7}
 8007ac8:	b085      	sub	sp, #20
 8007aca:	af00      	add	r7, sp, #0
 8007acc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007ad8:	b2db      	uxtb	r3, r3
 8007ada:	2b02      	cmp	r3, #2
 8007adc:	d005      	beq.n	8007aea <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2204      	movs	r2, #4
 8007ae2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	73fb      	strb	r3, [r7, #15]
 8007ae8:	e037      	b.n	8007b5a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	681a      	ldr	r2, [r3, #0]
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f022 020e 	bic.w	r2, r2, #14
 8007af8:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007afe:	681a      	ldr	r2, [r3, #0]
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007b08:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	681a      	ldr	r2, [r3, #0]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f022 0201 	bic.w	r2, r2, #1
 8007b18:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b1e:	f003 021f 	and.w	r2, r3, #31
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b26:	2101      	movs	r1, #1
 8007b28:	fa01 f202 	lsl.w	r2, r1, r2
 8007b2c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b32:	687a      	ldr	r2, [r7, #4]
 8007b34:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007b36:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d00c      	beq.n	8007b5a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b44:	681a      	ldr	r2, [r3, #0]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b4a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007b4e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b54:	687a      	ldr	r2, [r7, #4]
 8007b56:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007b58:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2201      	movs	r2, #1
 8007b5e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2200      	movs	r2, #0
 8007b66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8007b6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3714      	adds	r7, #20
 8007b70:	46bd      	mov	sp, r7
 8007b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b76:	4770      	bx	lr

08007b78 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b084      	sub	sp, #16
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b94:	f003 031f 	and.w	r3, r3, #31
 8007b98:	2204      	movs	r2, #4
 8007b9a:	409a      	lsls	r2, r3
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	4013      	ands	r3, r2
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d026      	beq.n	8007bf2 <HAL_DMA_IRQHandler+0x7a>
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	f003 0304 	and.w	r3, r3, #4
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d021      	beq.n	8007bf2 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f003 0320 	and.w	r3, r3, #32
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d107      	bne.n	8007bcc <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	681a      	ldr	r2, [r3, #0]
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f022 0204 	bic.w	r2, r2, #4
 8007bca:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bd0:	f003 021f 	and.w	r2, r3, #31
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bd8:	2104      	movs	r1, #4
 8007bda:	fa01 f202 	lsl.w	r2, r1, r2
 8007bde:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d071      	beq.n	8007ccc <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8007bf0:	e06c      	b.n	8007ccc <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bf6:	f003 031f 	and.w	r3, r3, #31
 8007bfa:	2202      	movs	r2, #2
 8007bfc:	409a      	lsls	r2, r3
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	4013      	ands	r3, r2
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d02e      	beq.n	8007c64 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	f003 0302 	and.w	r3, r3, #2
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d029      	beq.n	8007c64 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f003 0320 	and.w	r3, r3, #32
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d10b      	bne.n	8007c36 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	681a      	ldr	r2, [r3, #0]
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f022 020a 	bic.w	r2, r2, #10
 8007c2c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2201      	movs	r2, #1
 8007c32:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c3a:	f003 021f 	and.w	r2, r3, #31
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c42:	2102      	movs	r1, #2
 8007c44:	fa01 f202 	lsl.w	r2, r1, r2
 8007c48:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d038      	beq.n	8007ccc <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8007c62:	e033      	b.n	8007ccc <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c68:	f003 031f 	and.w	r3, r3, #31
 8007c6c:	2208      	movs	r2, #8
 8007c6e:	409a      	lsls	r2, r3
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	4013      	ands	r3, r2
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d02a      	beq.n	8007cce <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	f003 0308 	and.w	r3, r3, #8
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d025      	beq.n	8007cce <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	681a      	ldr	r2, [r3, #0]
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f022 020e 	bic.w	r2, r2, #14
 8007c90:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c96:	f003 021f 	and.w	r2, r3, #31
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c9e:	2101      	movs	r1, #1
 8007ca0:	fa01 f202 	lsl.w	r2, r1, r2
 8007ca4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2201      	movs	r2, #1
 8007caa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2201      	movs	r2, #1
 8007cb0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d004      	beq.n	8007cce <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8007ccc:	bf00      	nop
 8007cce:	bf00      	nop
}
 8007cd0:	3710      	adds	r7, #16
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}

08007cd6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007cd6:	b480      	push	{r7}
 8007cd8:	b085      	sub	sp, #20
 8007cda:	af00      	add	r7, sp, #0
 8007cdc:	60f8      	str	r0, [r7, #12]
 8007cde:	60b9      	str	r1, [r7, #8]
 8007ce0:	607a      	str	r2, [r7, #4]
 8007ce2:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ce8:	68fa      	ldr	r2, [r7, #12]
 8007cea:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007cec:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d004      	beq.n	8007d00 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cfa:	68fa      	ldr	r2, [r7, #12]
 8007cfc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007cfe:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d04:	f003 021f 	and.w	r2, r3, #31
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d0c:	2101      	movs	r1, #1
 8007d0e:	fa01 f202 	lsl.w	r2, r1, r2
 8007d12:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	683a      	ldr	r2, [r7, #0]
 8007d1a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	689b      	ldr	r3, [r3, #8]
 8007d20:	2b10      	cmp	r3, #16
 8007d22:	d108      	bne.n	8007d36 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	687a      	ldr	r2, [r7, #4]
 8007d2a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	68ba      	ldr	r2, [r7, #8]
 8007d32:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007d34:	e007      	b.n	8007d46 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	68ba      	ldr	r2, [r7, #8]
 8007d3c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	687a      	ldr	r2, [r7, #4]
 8007d44:	60da      	str	r2, [r3, #12]
}
 8007d46:	bf00      	nop
 8007d48:	3714      	adds	r7, #20
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d50:	4770      	bx	lr
	...

08007d54 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007d54:	b480      	push	{r7}
 8007d56:	b087      	sub	sp, #28
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	461a      	mov	r2, r3
 8007d62:	4b16      	ldr	r3, [pc, #88]	; (8007dbc <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8007d64:	429a      	cmp	r2, r3
 8007d66:	d802      	bhi.n	8007d6e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8007d68:	4b15      	ldr	r3, [pc, #84]	; (8007dc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8007d6a:	617b      	str	r3, [r7, #20]
 8007d6c:	e001      	b.n	8007d72 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8007d6e:	4b15      	ldr	r3, [pc, #84]	; (8007dc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8007d70:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	b2db      	uxtb	r3, r3
 8007d7c:	3b08      	subs	r3, #8
 8007d7e:	4a12      	ldr	r2, [pc, #72]	; (8007dc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8007d80:	fba2 2303 	umull	r2, r3, r2, r3
 8007d84:	091b      	lsrs	r3, r3, #4
 8007d86:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d8c:	089b      	lsrs	r3, r3, #2
 8007d8e:	009a      	lsls	r2, r3, #2
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	4413      	add	r3, r2
 8007d94:	461a      	mov	r2, r3
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	4a0b      	ldr	r2, [pc, #44]	; (8007dcc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8007d9e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	f003 031f 	and.w	r3, r3, #31
 8007da6:	2201      	movs	r2, #1
 8007da8:	409a      	lsls	r2, r3
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007dae:	bf00      	nop
 8007db0:	371c      	adds	r7, #28
 8007db2:	46bd      	mov	sp, r7
 8007db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db8:	4770      	bx	lr
 8007dba:	bf00      	nop
 8007dbc:	40020407 	.word	0x40020407
 8007dc0:	40020800 	.word	0x40020800
 8007dc4:	40020820 	.word	0x40020820
 8007dc8:	cccccccd 	.word	0xcccccccd
 8007dcc:	40020880 	.word	0x40020880

08007dd0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b085      	sub	sp, #20
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	685b      	ldr	r3, [r3, #4]
 8007ddc:	b2db      	uxtb	r3, r3
 8007dde:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007de0:	68fa      	ldr	r2, [r7, #12]
 8007de2:	4b0b      	ldr	r3, [pc, #44]	; (8007e10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8007de4:	4413      	add	r3, r2
 8007de6:	009b      	lsls	r3, r3, #2
 8007de8:	461a      	mov	r2, r3
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	4a08      	ldr	r2, [pc, #32]	; (8007e14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8007df2:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	3b01      	subs	r3, #1
 8007df8:	f003 031f 	and.w	r3, r3, #31
 8007dfc:	2201      	movs	r2, #1
 8007dfe:	409a      	lsls	r2, r3
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8007e04:	bf00      	nop
 8007e06:	3714      	adds	r7, #20
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0e:	4770      	bx	lr
 8007e10:	1000823f 	.word	0x1000823f
 8007e14:	40020940 	.word	0x40020940

08007e18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b087      	sub	sp, #28
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
 8007e20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007e22:	2300      	movs	r3, #0
 8007e24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007e26:	e15a      	b.n	80080de <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	681a      	ldr	r2, [r3, #0]
 8007e2c:	2101      	movs	r1, #1
 8007e2e:	697b      	ldr	r3, [r7, #20]
 8007e30:	fa01 f303 	lsl.w	r3, r1, r3
 8007e34:	4013      	ands	r3, r2
 8007e36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	f000 814c 	beq.w	80080d8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	685b      	ldr	r3, [r3, #4]
 8007e44:	2b01      	cmp	r3, #1
 8007e46:	d00b      	beq.n	8007e60 <HAL_GPIO_Init+0x48>
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	685b      	ldr	r3, [r3, #4]
 8007e4c:	2b02      	cmp	r3, #2
 8007e4e:	d007      	beq.n	8007e60 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007e54:	2b11      	cmp	r3, #17
 8007e56:	d003      	beq.n	8007e60 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	685b      	ldr	r3, [r3, #4]
 8007e5c:	2b12      	cmp	r3, #18
 8007e5e:	d130      	bne.n	8007ec2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	689b      	ldr	r3, [r3, #8]
 8007e64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	005b      	lsls	r3, r3, #1
 8007e6a:	2203      	movs	r2, #3
 8007e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8007e70:	43db      	mvns	r3, r3
 8007e72:	693a      	ldr	r2, [r7, #16]
 8007e74:	4013      	ands	r3, r2
 8007e76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	68da      	ldr	r2, [r3, #12]
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	005b      	lsls	r3, r3, #1
 8007e80:	fa02 f303 	lsl.w	r3, r2, r3
 8007e84:	693a      	ldr	r2, [r7, #16]
 8007e86:	4313      	orrs	r3, r2
 8007e88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	693a      	ldr	r2, [r7, #16]
 8007e8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	685b      	ldr	r3, [r3, #4]
 8007e94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007e96:	2201      	movs	r2, #1
 8007e98:	697b      	ldr	r3, [r7, #20]
 8007e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e9e:	43db      	mvns	r3, r3
 8007ea0:	693a      	ldr	r2, [r7, #16]
 8007ea2:	4013      	ands	r3, r2
 8007ea4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	685b      	ldr	r3, [r3, #4]
 8007eaa:	091b      	lsrs	r3, r3, #4
 8007eac:	f003 0201 	and.w	r2, r3, #1
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8007eb6:	693a      	ldr	r2, [r7, #16]
 8007eb8:	4313      	orrs	r3, r2
 8007eba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	693a      	ldr	r2, [r7, #16]
 8007ec0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	68db      	ldr	r3, [r3, #12]
 8007ec6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007ec8:	697b      	ldr	r3, [r7, #20]
 8007eca:	005b      	lsls	r3, r3, #1
 8007ecc:	2203      	movs	r2, #3
 8007ece:	fa02 f303 	lsl.w	r3, r2, r3
 8007ed2:	43db      	mvns	r3, r3
 8007ed4:	693a      	ldr	r2, [r7, #16]
 8007ed6:	4013      	ands	r3, r2
 8007ed8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	689a      	ldr	r2, [r3, #8]
 8007ede:	697b      	ldr	r3, [r7, #20]
 8007ee0:	005b      	lsls	r3, r3, #1
 8007ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ee6:	693a      	ldr	r2, [r7, #16]
 8007ee8:	4313      	orrs	r3, r2
 8007eea:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	693a      	ldr	r2, [r7, #16]
 8007ef0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	685b      	ldr	r3, [r3, #4]
 8007ef6:	2b02      	cmp	r3, #2
 8007ef8:	d003      	beq.n	8007f02 <HAL_GPIO_Init+0xea>
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	685b      	ldr	r3, [r3, #4]
 8007efe:	2b12      	cmp	r3, #18
 8007f00:	d123      	bne.n	8007f4a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	08da      	lsrs	r2, r3, #3
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	3208      	adds	r2, #8
 8007f0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007f10:	697b      	ldr	r3, [r7, #20]
 8007f12:	f003 0307 	and.w	r3, r3, #7
 8007f16:	009b      	lsls	r3, r3, #2
 8007f18:	220f      	movs	r2, #15
 8007f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f1e:	43db      	mvns	r3, r3
 8007f20:	693a      	ldr	r2, [r7, #16]
 8007f22:	4013      	ands	r3, r2
 8007f24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	691a      	ldr	r2, [r3, #16]
 8007f2a:	697b      	ldr	r3, [r7, #20]
 8007f2c:	f003 0307 	and.w	r3, r3, #7
 8007f30:	009b      	lsls	r3, r3, #2
 8007f32:	fa02 f303 	lsl.w	r3, r2, r3
 8007f36:	693a      	ldr	r2, [r7, #16]
 8007f38:	4313      	orrs	r3, r2
 8007f3a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	08da      	lsrs	r2, r3, #3
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	3208      	adds	r2, #8
 8007f44:	6939      	ldr	r1, [r7, #16]
 8007f46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007f50:	697b      	ldr	r3, [r7, #20]
 8007f52:	005b      	lsls	r3, r3, #1
 8007f54:	2203      	movs	r2, #3
 8007f56:	fa02 f303 	lsl.w	r3, r2, r3
 8007f5a:	43db      	mvns	r3, r3
 8007f5c:	693a      	ldr	r2, [r7, #16]
 8007f5e:	4013      	ands	r3, r2
 8007f60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	685b      	ldr	r3, [r3, #4]
 8007f66:	f003 0203 	and.w	r2, r3, #3
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	005b      	lsls	r3, r3, #1
 8007f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8007f72:	693a      	ldr	r2, [r7, #16]
 8007f74:	4313      	orrs	r3, r2
 8007f76:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	693a      	ldr	r2, [r7, #16]
 8007f7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	685b      	ldr	r3, [r3, #4]
 8007f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	f000 80a6 	beq.w	80080d8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007f8c:	4b5b      	ldr	r3, [pc, #364]	; (80080fc <HAL_GPIO_Init+0x2e4>)
 8007f8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f90:	4a5a      	ldr	r2, [pc, #360]	; (80080fc <HAL_GPIO_Init+0x2e4>)
 8007f92:	f043 0301 	orr.w	r3, r3, #1
 8007f96:	6613      	str	r3, [r2, #96]	; 0x60
 8007f98:	4b58      	ldr	r3, [pc, #352]	; (80080fc <HAL_GPIO_Init+0x2e4>)
 8007f9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f9c:	f003 0301 	and.w	r3, r3, #1
 8007fa0:	60bb      	str	r3, [r7, #8]
 8007fa2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007fa4:	4a56      	ldr	r2, [pc, #344]	; (8008100 <HAL_GPIO_Init+0x2e8>)
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	089b      	lsrs	r3, r3, #2
 8007faa:	3302      	adds	r3, #2
 8007fac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007fb0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007fb2:	697b      	ldr	r3, [r7, #20]
 8007fb4:	f003 0303 	and.w	r3, r3, #3
 8007fb8:	009b      	lsls	r3, r3, #2
 8007fba:	220f      	movs	r2, #15
 8007fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8007fc0:	43db      	mvns	r3, r3
 8007fc2:	693a      	ldr	r2, [r7, #16]
 8007fc4:	4013      	ands	r3, r2
 8007fc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8007fce:	d01f      	beq.n	8008010 <HAL_GPIO_Init+0x1f8>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	4a4c      	ldr	r2, [pc, #304]	; (8008104 <HAL_GPIO_Init+0x2ec>)
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d019      	beq.n	800800c <HAL_GPIO_Init+0x1f4>
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	4a4b      	ldr	r2, [pc, #300]	; (8008108 <HAL_GPIO_Init+0x2f0>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d013      	beq.n	8008008 <HAL_GPIO_Init+0x1f0>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	4a4a      	ldr	r2, [pc, #296]	; (800810c <HAL_GPIO_Init+0x2f4>)
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d00d      	beq.n	8008004 <HAL_GPIO_Init+0x1ec>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	4a49      	ldr	r2, [pc, #292]	; (8008110 <HAL_GPIO_Init+0x2f8>)
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d007      	beq.n	8008000 <HAL_GPIO_Init+0x1e8>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	4a48      	ldr	r2, [pc, #288]	; (8008114 <HAL_GPIO_Init+0x2fc>)
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d101      	bne.n	8007ffc <HAL_GPIO_Init+0x1e4>
 8007ff8:	2305      	movs	r3, #5
 8007ffa:	e00a      	b.n	8008012 <HAL_GPIO_Init+0x1fa>
 8007ffc:	2306      	movs	r3, #6
 8007ffe:	e008      	b.n	8008012 <HAL_GPIO_Init+0x1fa>
 8008000:	2304      	movs	r3, #4
 8008002:	e006      	b.n	8008012 <HAL_GPIO_Init+0x1fa>
 8008004:	2303      	movs	r3, #3
 8008006:	e004      	b.n	8008012 <HAL_GPIO_Init+0x1fa>
 8008008:	2302      	movs	r3, #2
 800800a:	e002      	b.n	8008012 <HAL_GPIO_Init+0x1fa>
 800800c:	2301      	movs	r3, #1
 800800e:	e000      	b.n	8008012 <HAL_GPIO_Init+0x1fa>
 8008010:	2300      	movs	r3, #0
 8008012:	697a      	ldr	r2, [r7, #20]
 8008014:	f002 0203 	and.w	r2, r2, #3
 8008018:	0092      	lsls	r2, r2, #2
 800801a:	4093      	lsls	r3, r2
 800801c:	693a      	ldr	r2, [r7, #16]
 800801e:	4313      	orrs	r3, r2
 8008020:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008022:	4937      	ldr	r1, [pc, #220]	; (8008100 <HAL_GPIO_Init+0x2e8>)
 8008024:	697b      	ldr	r3, [r7, #20]
 8008026:	089b      	lsrs	r3, r3, #2
 8008028:	3302      	adds	r3, #2
 800802a:	693a      	ldr	r2, [r7, #16]
 800802c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8008030:	4b39      	ldr	r3, [pc, #228]	; (8008118 <HAL_GPIO_Init+0x300>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	43db      	mvns	r3, r3
 800803a:	693a      	ldr	r2, [r7, #16]
 800803c:	4013      	ands	r3, r2
 800803e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	685b      	ldr	r3, [r3, #4]
 8008044:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008048:	2b00      	cmp	r3, #0
 800804a:	d003      	beq.n	8008054 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800804c:	693a      	ldr	r2, [r7, #16]
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	4313      	orrs	r3, r2
 8008052:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008054:	4a30      	ldr	r2, [pc, #192]	; (8008118 <HAL_GPIO_Init+0x300>)
 8008056:	693b      	ldr	r3, [r7, #16]
 8008058:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800805a:	4b2f      	ldr	r3, [pc, #188]	; (8008118 <HAL_GPIO_Init+0x300>)
 800805c:	685b      	ldr	r3, [r3, #4]
 800805e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	43db      	mvns	r3, r3
 8008064:	693a      	ldr	r2, [r7, #16]
 8008066:	4013      	ands	r3, r2
 8008068:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	685b      	ldr	r3, [r3, #4]
 800806e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008072:	2b00      	cmp	r3, #0
 8008074:	d003      	beq.n	800807e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8008076:	693a      	ldr	r2, [r7, #16]
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	4313      	orrs	r3, r2
 800807c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800807e:	4a26      	ldr	r2, [pc, #152]	; (8008118 <HAL_GPIO_Init+0x300>)
 8008080:	693b      	ldr	r3, [r7, #16]
 8008082:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008084:	4b24      	ldr	r3, [pc, #144]	; (8008118 <HAL_GPIO_Init+0x300>)
 8008086:	689b      	ldr	r3, [r3, #8]
 8008088:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	43db      	mvns	r3, r3
 800808e:	693a      	ldr	r2, [r7, #16]
 8008090:	4013      	ands	r3, r2
 8008092:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	685b      	ldr	r3, [r3, #4]
 8008098:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800809c:	2b00      	cmp	r3, #0
 800809e:	d003      	beq.n	80080a8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80080a0:	693a      	ldr	r2, [r7, #16]
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	4313      	orrs	r3, r2
 80080a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80080a8:	4a1b      	ldr	r2, [pc, #108]	; (8008118 <HAL_GPIO_Init+0x300>)
 80080aa:	693b      	ldr	r3, [r7, #16]
 80080ac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80080ae:	4b1a      	ldr	r3, [pc, #104]	; (8008118 <HAL_GPIO_Init+0x300>)
 80080b0:	68db      	ldr	r3, [r3, #12]
 80080b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	43db      	mvns	r3, r3
 80080b8:	693a      	ldr	r2, [r7, #16]
 80080ba:	4013      	ands	r3, r2
 80080bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	685b      	ldr	r3, [r3, #4]
 80080c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d003      	beq.n	80080d2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80080ca:	693a      	ldr	r2, [r7, #16]
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	4313      	orrs	r3, r2
 80080d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80080d2:	4a11      	ldr	r2, [pc, #68]	; (8008118 <HAL_GPIO_Init+0x300>)
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80080d8:	697b      	ldr	r3, [r7, #20]
 80080da:	3301      	adds	r3, #1
 80080dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	681a      	ldr	r2, [r3, #0]
 80080e2:	697b      	ldr	r3, [r7, #20]
 80080e4:	fa22 f303 	lsr.w	r3, r2, r3
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	f47f ae9d 	bne.w	8007e28 <HAL_GPIO_Init+0x10>
  }
}
 80080ee:	bf00      	nop
 80080f0:	371c      	adds	r7, #28
 80080f2:	46bd      	mov	sp, r7
 80080f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f8:	4770      	bx	lr
 80080fa:	bf00      	nop
 80080fc:	40021000 	.word	0x40021000
 8008100:	40010000 	.word	0x40010000
 8008104:	48000400 	.word	0x48000400
 8008108:	48000800 	.word	0x48000800
 800810c:	48000c00 	.word	0x48000c00
 8008110:	48001000 	.word	0x48001000
 8008114:	48001400 	.word	0x48001400
 8008118:	40010400 	.word	0x40010400

0800811c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800811c:	b480      	push	{r7}
 800811e:	b085      	sub	sp, #20
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
 8008124:	460b      	mov	r3, r1
 8008126:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	691a      	ldr	r2, [r3, #16]
 800812c:	887b      	ldrh	r3, [r7, #2]
 800812e:	4013      	ands	r3, r2
 8008130:	2b00      	cmp	r3, #0
 8008132:	d002      	beq.n	800813a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008134:	2301      	movs	r3, #1
 8008136:	73fb      	strb	r3, [r7, #15]
 8008138:	e001      	b.n	800813e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800813a:	2300      	movs	r3, #0
 800813c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800813e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008140:	4618      	mov	r0, r3
 8008142:	3714      	adds	r7, #20
 8008144:	46bd      	mov	sp, r7
 8008146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814a:	4770      	bx	lr

0800814c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800814c:	b480      	push	{r7}
 800814e:	b083      	sub	sp, #12
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
 8008154:	460b      	mov	r3, r1
 8008156:	807b      	strh	r3, [r7, #2]
 8008158:	4613      	mov	r3, r2
 800815a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800815c:	787b      	ldrb	r3, [r7, #1]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d003      	beq.n	800816a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008162:	887a      	ldrh	r2, [r7, #2]
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008168:	e002      	b.n	8008170 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800816a:	887a      	ldrh	r2, [r7, #2]
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008170:	bf00      	nop
 8008172:	370c      	adds	r7, #12
 8008174:	46bd      	mov	sp, r7
 8008176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817a:	4770      	bx	lr

0800817c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800817c:	b480      	push	{r7}
 800817e:	b085      	sub	sp, #20
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d141      	bne.n	800820e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800818a:	4b4b      	ldr	r3, [pc, #300]	; (80082b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008192:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008196:	d131      	bne.n	80081fc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008198:	4b47      	ldr	r3, [pc, #284]	; (80082b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800819a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800819e:	4a46      	ldr	r2, [pc, #280]	; (80082b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80081a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80081a4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80081a8:	4b43      	ldr	r3, [pc, #268]	; (80082b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80081b0:	4a41      	ldr	r2, [pc, #260]	; (80082b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80081b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80081b6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80081b8:	4b40      	ldr	r3, [pc, #256]	; (80082bc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	2232      	movs	r2, #50	; 0x32
 80081be:	fb02 f303 	mul.w	r3, r2, r3
 80081c2:	4a3f      	ldr	r2, [pc, #252]	; (80082c0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80081c4:	fba2 2303 	umull	r2, r3, r2, r3
 80081c8:	0c9b      	lsrs	r3, r3, #18
 80081ca:	3301      	adds	r3, #1
 80081cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80081ce:	e002      	b.n	80081d6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	3b01      	subs	r3, #1
 80081d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80081d6:	4b38      	ldr	r3, [pc, #224]	; (80082b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80081d8:	695b      	ldr	r3, [r3, #20]
 80081da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80081de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081e2:	d102      	bne.n	80081ea <HAL_PWREx_ControlVoltageScaling+0x6e>
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d1f2      	bne.n	80081d0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80081ea:	4b33      	ldr	r3, [pc, #204]	; (80082b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80081ec:	695b      	ldr	r3, [r3, #20]
 80081ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80081f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081f6:	d158      	bne.n	80082aa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80081f8:	2303      	movs	r3, #3
 80081fa:	e057      	b.n	80082ac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80081fc:	4b2e      	ldr	r3, [pc, #184]	; (80082b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80081fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008202:	4a2d      	ldr	r2, [pc, #180]	; (80082b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008204:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008208:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800820c:	e04d      	b.n	80082aa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008214:	d141      	bne.n	800829a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008216:	4b28      	ldr	r3, [pc, #160]	; (80082b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800821e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008222:	d131      	bne.n	8008288 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008224:	4b24      	ldr	r3, [pc, #144]	; (80082b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008226:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800822a:	4a23      	ldr	r2, [pc, #140]	; (80082b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800822c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008230:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008234:	4b20      	ldr	r3, [pc, #128]	; (80082b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800823c:	4a1e      	ldr	r2, [pc, #120]	; (80082b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800823e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008242:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008244:	4b1d      	ldr	r3, [pc, #116]	; (80082bc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	2232      	movs	r2, #50	; 0x32
 800824a:	fb02 f303 	mul.w	r3, r2, r3
 800824e:	4a1c      	ldr	r2, [pc, #112]	; (80082c0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008250:	fba2 2303 	umull	r2, r3, r2, r3
 8008254:	0c9b      	lsrs	r3, r3, #18
 8008256:	3301      	adds	r3, #1
 8008258:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800825a:	e002      	b.n	8008262 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	3b01      	subs	r3, #1
 8008260:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008262:	4b15      	ldr	r3, [pc, #84]	; (80082b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008264:	695b      	ldr	r3, [r3, #20]
 8008266:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800826a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800826e:	d102      	bne.n	8008276 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d1f2      	bne.n	800825c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008276:	4b10      	ldr	r3, [pc, #64]	; (80082b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008278:	695b      	ldr	r3, [r3, #20]
 800827a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800827e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008282:	d112      	bne.n	80082aa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008284:	2303      	movs	r3, #3
 8008286:	e011      	b.n	80082ac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008288:	4b0b      	ldr	r3, [pc, #44]	; (80082b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800828a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800828e:	4a0a      	ldr	r2, [pc, #40]	; (80082b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008290:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008294:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8008298:	e007      	b.n	80082aa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800829a:	4b07      	ldr	r3, [pc, #28]	; (80082b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80082a2:	4a05      	ldr	r2, [pc, #20]	; (80082b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80082a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80082a8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80082aa:	2300      	movs	r3, #0
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	3714      	adds	r7, #20
 80082b0:	46bd      	mov	sp, r7
 80082b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b6:	4770      	bx	lr
 80082b8:	40007000 	.word	0x40007000
 80082bc:	200001ac 	.word	0x200001ac
 80082c0:	431bde83 	.word	0x431bde83

080082c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b088      	sub	sp, #32
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d101      	bne.n	80082d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80082d2:	2301      	movs	r3, #1
 80082d4:	e308      	b.n	80088e8 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f003 0301 	and.w	r3, r3, #1
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d075      	beq.n	80083ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80082e2:	4ba3      	ldr	r3, [pc, #652]	; (8008570 <HAL_RCC_OscConfig+0x2ac>)
 80082e4:	689b      	ldr	r3, [r3, #8]
 80082e6:	f003 030c 	and.w	r3, r3, #12
 80082ea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80082ec:	4ba0      	ldr	r3, [pc, #640]	; (8008570 <HAL_RCC_OscConfig+0x2ac>)
 80082ee:	68db      	ldr	r3, [r3, #12]
 80082f0:	f003 0303 	and.w	r3, r3, #3
 80082f4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80082f6:	69bb      	ldr	r3, [r7, #24]
 80082f8:	2b0c      	cmp	r3, #12
 80082fa:	d102      	bne.n	8008302 <HAL_RCC_OscConfig+0x3e>
 80082fc:	697b      	ldr	r3, [r7, #20]
 80082fe:	2b03      	cmp	r3, #3
 8008300:	d002      	beq.n	8008308 <HAL_RCC_OscConfig+0x44>
 8008302:	69bb      	ldr	r3, [r7, #24]
 8008304:	2b08      	cmp	r3, #8
 8008306:	d10b      	bne.n	8008320 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008308:	4b99      	ldr	r3, [pc, #612]	; (8008570 <HAL_RCC_OscConfig+0x2ac>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008310:	2b00      	cmp	r3, #0
 8008312:	d05b      	beq.n	80083cc <HAL_RCC_OscConfig+0x108>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	685b      	ldr	r3, [r3, #4]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d157      	bne.n	80083cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800831c:	2301      	movs	r3, #1
 800831e:	e2e3      	b.n	80088e8 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	685b      	ldr	r3, [r3, #4]
 8008324:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008328:	d106      	bne.n	8008338 <HAL_RCC_OscConfig+0x74>
 800832a:	4b91      	ldr	r3, [pc, #580]	; (8008570 <HAL_RCC_OscConfig+0x2ac>)
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	4a90      	ldr	r2, [pc, #576]	; (8008570 <HAL_RCC_OscConfig+0x2ac>)
 8008330:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008334:	6013      	str	r3, [r2, #0]
 8008336:	e01d      	b.n	8008374 <HAL_RCC_OscConfig+0xb0>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	685b      	ldr	r3, [r3, #4]
 800833c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008340:	d10c      	bne.n	800835c <HAL_RCC_OscConfig+0x98>
 8008342:	4b8b      	ldr	r3, [pc, #556]	; (8008570 <HAL_RCC_OscConfig+0x2ac>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	4a8a      	ldr	r2, [pc, #552]	; (8008570 <HAL_RCC_OscConfig+0x2ac>)
 8008348:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800834c:	6013      	str	r3, [r2, #0]
 800834e:	4b88      	ldr	r3, [pc, #544]	; (8008570 <HAL_RCC_OscConfig+0x2ac>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	4a87      	ldr	r2, [pc, #540]	; (8008570 <HAL_RCC_OscConfig+0x2ac>)
 8008354:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008358:	6013      	str	r3, [r2, #0]
 800835a:	e00b      	b.n	8008374 <HAL_RCC_OscConfig+0xb0>
 800835c:	4b84      	ldr	r3, [pc, #528]	; (8008570 <HAL_RCC_OscConfig+0x2ac>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4a83      	ldr	r2, [pc, #524]	; (8008570 <HAL_RCC_OscConfig+0x2ac>)
 8008362:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008366:	6013      	str	r3, [r2, #0]
 8008368:	4b81      	ldr	r3, [pc, #516]	; (8008570 <HAL_RCC_OscConfig+0x2ac>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	4a80      	ldr	r2, [pc, #512]	; (8008570 <HAL_RCC_OscConfig+0x2ac>)
 800836e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008372:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	685b      	ldr	r3, [r3, #4]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d013      	beq.n	80083a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800837c:	f7fd f9ee 	bl	800575c <HAL_GetTick>
 8008380:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008382:	e008      	b.n	8008396 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008384:	f7fd f9ea 	bl	800575c <HAL_GetTick>
 8008388:	4602      	mov	r2, r0
 800838a:	693b      	ldr	r3, [r7, #16]
 800838c:	1ad3      	subs	r3, r2, r3
 800838e:	2b64      	cmp	r3, #100	; 0x64
 8008390:	d901      	bls.n	8008396 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008392:	2303      	movs	r3, #3
 8008394:	e2a8      	b.n	80088e8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008396:	4b76      	ldr	r3, [pc, #472]	; (8008570 <HAL_RCC_OscConfig+0x2ac>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d0f0      	beq.n	8008384 <HAL_RCC_OscConfig+0xc0>
 80083a2:	e014      	b.n	80083ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083a4:	f7fd f9da 	bl	800575c <HAL_GetTick>
 80083a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80083aa:	e008      	b.n	80083be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80083ac:	f7fd f9d6 	bl	800575c <HAL_GetTick>
 80083b0:	4602      	mov	r2, r0
 80083b2:	693b      	ldr	r3, [r7, #16]
 80083b4:	1ad3      	subs	r3, r2, r3
 80083b6:	2b64      	cmp	r3, #100	; 0x64
 80083b8:	d901      	bls.n	80083be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80083ba:	2303      	movs	r3, #3
 80083bc:	e294      	b.n	80088e8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80083be:	4b6c      	ldr	r3, [pc, #432]	; (8008570 <HAL_RCC_OscConfig+0x2ac>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d1f0      	bne.n	80083ac <HAL_RCC_OscConfig+0xe8>
 80083ca:	e000      	b.n	80083ce <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80083cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f003 0302 	and.w	r3, r3, #2
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d075      	beq.n	80084c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80083da:	4b65      	ldr	r3, [pc, #404]	; (8008570 <HAL_RCC_OscConfig+0x2ac>)
 80083dc:	689b      	ldr	r3, [r3, #8]
 80083de:	f003 030c 	and.w	r3, r3, #12
 80083e2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80083e4:	4b62      	ldr	r3, [pc, #392]	; (8008570 <HAL_RCC_OscConfig+0x2ac>)
 80083e6:	68db      	ldr	r3, [r3, #12]
 80083e8:	f003 0303 	and.w	r3, r3, #3
 80083ec:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80083ee:	69bb      	ldr	r3, [r7, #24]
 80083f0:	2b0c      	cmp	r3, #12
 80083f2:	d102      	bne.n	80083fa <HAL_RCC_OscConfig+0x136>
 80083f4:	697b      	ldr	r3, [r7, #20]
 80083f6:	2b02      	cmp	r3, #2
 80083f8:	d002      	beq.n	8008400 <HAL_RCC_OscConfig+0x13c>
 80083fa:	69bb      	ldr	r3, [r7, #24]
 80083fc:	2b04      	cmp	r3, #4
 80083fe:	d11f      	bne.n	8008440 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008400:	4b5b      	ldr	r3, [pc, #364]	; (8008570 <HAL_RCC_OscConfig+0x2ac>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008408:	2b00      	cmp	r3, #0
 800840a:	d005      	beq.n	8008418 <HAL_RCC_OscConfig+0x154>
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	68db      	ldr	r3, [r3, #12]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d101      	bne.n	8008418 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8008414:	2301      	movs	r3, #1
 8008416:	e267      	b.n	80088e8 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008418:	4b55      	ldr	r3, [pc, #340]	; (8008570 <HAL_RCC_OscConfig+0x2ac>)
 800841a:	685b      	ldr	r3, [r3, #4]
 800841c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	691b      	ldr	r3, [r3, #16]
 8008424:	061b      	lsls	r3, r3, #24
 8008426:	4952      	ldr	r1, [pc, #328]	; (8008570 <HAL_RCC_OscConfig+0x2ac>)
 8008428:	4313      	orrs	r3, r2
 800842a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800842c:	4b51      	ldr	r3, [pc, #324]	; (8008574 <HAL_RCC_OscConfig+0x2b0>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4618      	mov	r0, r3
 8008432:	f7fd f947 	bl	80056c4 <HAL_InitTick>
 8008436:	4603      	mov	r3, r0
 8008438:	2b00      	cmp	r3, #0
 800843a:	d043      	beq.n	80084c4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800843c:	2301      	movs	r3, #1
 800843e:	e253      	b.n	80088e8 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	68db      	ldr	r3, [r3, #12]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d023      	beq.n	8008490 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008448:	4b49      	ldr	r3, [pc, #292]	; (8008570 <HAL_RCC_OscConfig+0x2ac>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	4a48      	ldr	r2, [pc, #288]	; (8008570 <HAL_RCC_OscConfig+0x2ac>)
 800844e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008452:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008454:	f7fd f982 	bl	800575c <HAL_GetTick>
 8008458:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800845a:	e008      	b.n	800846e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800845c:	f7fd f97e 	bl	800575c <HAL_GetTick>
 8008460:	4602      	mov	r2, r0
 8008462:	693b      	ldr	r3, [r7, #16]
 8008464:	1ad3      	subs	r3, r2, r3
 8008466:	2b02      	cmp	r3, #2
 8008468:	d901      	bls.n	800846e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800846a:	2303      	movs	r3, #3
 800846c:	e23c      	b.n	80088e8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800846e:	4b40      	ldr	r3, [pc, #256]	; (8008570 <HAL_RCC_OscConfig+0x2ac>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008476:	2b00      	cmp	r3, #0
 8008478:	d0f0      	beq.n	800845c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800847a:	4b3d      	ldr	r3, [pc, #244]	; (8008570 <HAL_RCC_OscConfig+0x2ac>)
 800847c:	685b      	ldr	r3, [r3, #4]
 800847e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	691b      	ldr	r3, [r3, #16]
 8008486:	061b      	lsls	r3, r3, #24
 8008488:	4939      	ldr	r1, [pc, #228]	; (8008570 <HAL_RCC_OscConfig+0x2ac>)
 800848a:	4313      	orrs	r3, r2
 800848c:	604b      	str	r3, [r1, #4]
 800848e:	e01a      	b.n	80084c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008490:	4b37      	ldr	r3, [pc, #220]	; (8008570 <HAL_RCC_OscConfig+0x2ac>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	4a36      	ldr	r2, [pc, #216]	; (8008570 <HAL_RCC_OscConfig+0x2ac>)
 8008496:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800849a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800849c:	f7fd f95e 	bl	800575c <HAL_GetTick>
 80084a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80084a2:	e008      	b.n	80084b6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80084a4:	f7fd f95a 	bl	800575c <HAL_GetTick>
 80084a8:	4602      	mov	r2, r0
 80084aa:	693b      	ldr	r3, [r7, #16]
 80084ac:	1ad3      	subs	r3, r2, r3
 80084ae:	2b02      	cmp	r3, #2
 80084b0:	d901      	bls.n	80084b6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80084b2:	2303      	movs	r3, #3
 80084b4:	e218      	b.n	80088e8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80084b6:	4b2e      	ldr	r3, [pc, #184]	; (8008570 <HAL_RCC_OscConfig+0x2ac>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d1f0      	bne.n	80084a4 <HAL_RCC_OscConfig+0x1e0>
 80084c2:	e000      	b.n	80084c6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80084c4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f003 0308 	and.w	r3, r3, #8
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d03c      	beq.n	800854c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	695b      	ldr	r3, [r3, #20]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d01c      	beq.n	8008514 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80084da:	4b25      	ldr	r3, [pc, #148]	; (8008570 <HAL_RCC_OscConfig+0x2ac>)
 80084dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80084e0:	4a23      	ldr	r2, [pc, #140]	; (8008570 <HAL_RCC_OscConfig+0x2ac>)
 80084e2:	f043 0301 	orr.w	r3, r3, #1
 80084e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084ea:	f7fd f937 	bl	800575c <HAL_GetTick>
 80084ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80084f0:	e008      	b.n	8008504 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80084f2:	f7fd f933 	bl	800575c <HAL_GetTick>
 80084f6:	4602      	mov	r2, r0
 80084f8:	693b      	ldr	r3, [r7, #16]
 80084fa:	1ad3      	subs	r3, r2, r3
 80084fc:	2b02      	cmp	r3, #2
 80084fe:	d901      	bls.n	8008504 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008500:	2303      	movs	r3, #3
 8008502:	e1f1      	b.n	80088e8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008504:	4b1a      	ldr	r3, [pc, #104]	; (8008570 <HAL_RCC_OscConfig+0x2ac>)
 8008506:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800850a:	f003 0302 	and.w	r3, r3, #2
 800850e:	2b00      	cmp	r3, #0
 8008510:	d0ef      	beq.n	80084f2 <HAL_RCC_OscConfig+0x22e>
 8008512:	e01b      	b.n	800854c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008514:	4b16      	ldr	r3, [pc, #88]	; (8008570 <HAL_RCC_OscConfig+0x2ac>)
 8008516:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800851a:	4a15      	ldr	r2, [pc, #84]	; (8008570 <HAL_RCC_OscConfig+0x2ac>)
 800851c:	f023 0301 	bic.w	r3, r3, #1
 8008520:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008524:	f7fd f91a 	bl	800575c <HAL_GetTick>
 8008528:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800852a:	e008      	b.n	800853e <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800852c:	f7fd f916 	bl	800575c <HAL_GetTick>
 8008530:	4602      	mov	r2, r0
 8008532:	693b      	ldr	r3, [r7, #16]
 8008534:	1ad3      	subs	r3, r2, r3
 8008536:	2b02      	cmp	r3, #2
 8008538:	d901      	bls.n	800853e <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800853a:	2303      	movs	r3, #3
 800853c:	e1d4      	b.n	80088e8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800853e:	4b0c      	ldr	r3, [pc, #48]	; (8008570 <HAL_RCC_OscConfig+0x2ac>)
 8008540:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008544:	f003 0302 	and.w	r3, r3, #2
 8008548:	2b00      	cmp	r3, #0
 800854a:	d1ef      	bne.n	800852c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f003 0304 	and.w	r3, r3, #4
 8008554:	2b00      	cmp	r3, #0
 8008556:	f000 80ab 	beq.w	80086b0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800855a:	2300      	movs	r3, #0
 800855c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800855e:	4b04      	ldr	r3, [pc, #16]	; (8008570 <HAL_RCC_OscConfig+0x2ac>)
 8008560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008566:	2b00      	cmp	r3, #0
 8008568:	d106      	bne.n	8008578 <HAL_RCC_OscConfig+0x2b4>
 800856a:	2301      	movs	r3, #1
 800856c:	e005      	b.n	800857a <HAL_RCC_OscConfig+0x2b6>
 800856e:	bf00      	nop
 8008570:	40021000 	.word	0x40021000
 8008574:	200001b0 	.word	0x200001b0
 8008578:	2300      	movs	r3, #0
 800857a:	2b00      	cmp	r3, #0
 800857c:	d00d      	beq.n	800859a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800857e:	4baf      	ldr	r3, [pc, #700]	; (800883c <HAL_RCC_OscConfig+0x578>)
 8008580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008582:	4aae      	ldr	r2, [pc, #696]	; (800883c <HAL_RCC_OscConfig+0x578>)
 8008584:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008588:	6593      	str	r3, [r2, #88]	; 0x58
 800858a:	4bac      	ldr	r3, [pc, #688]	; (800883c <HAL_RCC_OscConfig+0x578>)
 800858c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800858e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008592:	60fb      	str	r3, [r7, #12]
 8008594:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008596:	2301      	movs	r3, #1
 8008598:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800859a:	4ba9      	ldr	r3, [pc, #676]	; (8008840 <HAL_RCC_OscConfig+0x57c>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d118      	bne.n	80085d8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80085a6:	4ba6      	ldr	r3, [pc, #664]	; (8008840 <HAL_RCC_OscConfig+0x57c>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4aa5      	ldr	r2, [pc, #660]	; (8008840 <HAL_RCC_OscConfig+0x57c>)
 80085ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80085b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80085b2:	f7fd f8d3 	bl	800575c <HAL_GetTick>
 80085b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80085b8:	e008      	b.n	80085cc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80085ba:	f7fd f8cf 	bl	800575c <HAL_GetTick>
 80085be:	4602      	mov	r2, r0
 80085c0:	693b      	ldr	r3, [r7, #16]
 80085c2:	1ad3      	subs	r3, r2, r3
 80085c4:	2b02      	cmp	r3, #2
 80085c6:	d901      	bls.n	80085cc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80085c8:	2303      	movs	r3, #3
 80085ca:	e18d      	b.n	80088e8 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80085cc:	4b9c      	ldr	r3, [pc, #624]	; (8008840 <HAL_RCC_OscConfig+0x57c>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d0f0      	beq.n	80085ba <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	689b      	ldr	r3, [r3, #8]
 80085dc:	2b01      	cmp	r3, #1
 80085de:	d108      	bne.n	80085f2 <HAL_RCC_OscConfig+0x32e>
 80085e0:	4b96      	ldr	r3, [pc, #600]	; (800883c <HAL_RCC_OscConfig+0x578>)
 80085e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085e6:	4a95      	ldr	r2, [pc, #596]	; (800883c <HAL_RCC_OscConfig+0x578>)
 80085e8:	f043 0301 	orr.w	r3, r3, #1
 80085ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80085f0:	e024      	b.n	800863c <HAL_RCC_OscConfig+0x378>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	689b      	ldr	r3, [r3, #8]
 80085f6:	2b05      	cmp	r3, #5
 80085f8:	d110      	bne.n	800861c <HAL_RCC_OscConfig+0x358>
 80085fa:	4b90      	ldr	r3, [pc, #576]	; (800883c <HAL_RCC_OscConfig+0x578>)
 80085fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008600:	4a8e      	ldr	r2, [pc, #568]	; (800883c <HAL_RCC_OscConfig+0x578>)
 8008602:	f043 0304 	orr.w	r3, r3, #4
 8008606:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800860a:	4b8c      	ldr	r3, [pc, #560]	; (800883c <HAL_RCC_OscConfig+0x578>)
 800860c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008610:	4a8a      	ldr	r2, [pc, #552]	; (800883c <HAL_RCC_OscConfig+0x578>)
 8008612:	f043 0301 	orr.w	r3, r3, #1
 8008616:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800861a:	e00f      	b.n	800863c <HAL_RCC_OscConfig+0x378>
 800861c:	4b87      	ldr	r3, [pc, #540]	; (800883c <HAL_RCC_OscConfig+0x578>)
 800861e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008622:	4a86      	ldr	r2, [pc, #536]	; (800883c <HAL_RCC_OscConfig+0x578>)
 8008624:	f023 0301 	bic.w	r3, r3, #1
 8008628:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800862c:	4b83      	ldr	r3, [pc, #524]	; (800883c <HAL_RCC_OscConfig+0x578>)
 800862e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008632:	4a82      	ldr	r2, [pc, #520]	; (800883c <HAL_RCC_OscConfig+0x578>)
 8008634:	f023 0304 	bic.w	r3, r3, #4
 8008638:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	689b      	ldr	r3, [r3, #8]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d016      	beq.n	8008672 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008644:	f7fd f88a 	bl	800575c <HAL_GetTick>
 8008648:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800864a:	e00a      	b.n	8008662 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800864c:	f7fd f886 	bl	800575c <HAL_GetTick>
 8008650:	4602      	mov	r2, r0
 8008652:	693b      	ldr	r3, [r7, #16]
 8008654:	1ad3      	subs	r3, r2, r3
 8008656:	f241 3288 	movw	r2, #5000	; 0x1388
 800865a:	4293      	cmp	r3, r2
 800865c:	d901      	bls.n	8008662 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800865e:	2303      	movs	r3, #3
 8008660:	e142      	b.n	80088e8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008662:	4b76      	ldr	r3, [pc, #472]	; (800883c <HAL_RCC_OscConfig+0x578>)
 8008664:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008668:	f003 0302 	and.w	r3, r3, #2
 800866c:	2b00      	cmp	r3, #0
 800866e:	d0ed      	beq.n	800864c <HAL_RCC_OscConfig+0x388>
 8008670:	e015      	b.n	800869e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008672:	f7fd f873 	bl	800575c <HAL_GetTick>
 8008676:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008678:	e00a      	b.n	8008690 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800867a:	f7fd f86f 	bl	800575c <HAL_GetTick>
 800867e:	4602      	mov	r2, r0
 8008680:	693b      	ldr	r3, [r7, #16]
 8008682:	1ad3      	subs	r3, r2, r3
 8008684:	f241 3288 	movw	r2, #5000	; 0x1388
 8008688:	4293      	cmp	r3, r2
 800868a:	d901      	bls.n	8008690 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800868c:	2303      	movs	r3, #3
 800868e:	e12b      	b.n	80088e8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008690:	4b6a      	ldr	r3, [pc, #424]	; (800883c <HAL_RCC_OscConfig+0x578>)
 8008692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008696:	f003 0302 	and.w	r3, r3, #2
 800869a:	2b00      	cmp	r3, #0
 800869c:	d1ed      	bne.n	800867a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800869e:	7ffb      	ldrb	r3, [r7, #31]
 80086a0:	2b01      	cmp	r3, #1
 80086a2:	d105      	bne.n	80086b0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80086a4:	4b65      	ldr	r3, [pc, #404]	; (800883c <HAL_RCC_OscConfig+0x578>)
 80086a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086a8:	4a64      	ldr	r2, [pc, #400]	; (800883c <HAL_RCC_OscConfig+0x578>)
 80086aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80086ae:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f003 0320 	and.w	r3, r3, #32
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d03c      	beq.n	8008736 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	699b      	ldr	r3, [r3, #24]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d01c      	beq.n	80086fe <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80086c4:	4b5d      	ldr	r3, [pc, #372]	; (800883c <HAL_RCC_OscConfig+0x578>)
 80086c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80086ca:	4a5c      	ldr	r2, [pc, #368]	; (800883c <HAL_RCC_OscConfig+0x578>)
 80086cc:	f043 0301 	orr.w	r3, r3, #1
 80086d0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086d4:	f7fd f842 	bl	800575c <HAL_GetTick>
 80086d8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80086da:	e008      	b.n	80086ee <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80086dc:	f7fd f83e 	bl	800575c <HAL_GetTick>
 80086e0:	4602      	mov	r2, r0
 80086e2:	693b      	ldr	r3, [r7, #16]
 80086e4:	1ad3      	subs	r3, r2, r3
 80086e6:	2b02      	cmp	r3, #2
 80086e8:	d901      	bls.n	80086ee <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80086ea:	2303      	movs	r3, #3
 80086ec:	e0fc      	b.n	80088e8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80086ee:	4b53      	ldr	r3, [pc, #332]	; (800883c <HAL_RCC_OscConfig+0x578>)
 80086f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80086f4:	f003 0302 	and.w	r3, r3, #2
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d0ef      	beq.n	80086dc <HAL_RCC_OscConfig+0x418>
 80086fc:	e01b      	b.n	8008736 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80086fe:	4b4f      	ldr	r3, [pc, #316]	; (800883c <HAL_RCC_OscConfig+0x578>)
 8008700:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008704:	4a4d      	ldr	r2, [pc, #308]	; (800883c <HAL_RCC_OscConfig+0x578>)
 8008706:	f023 0301 	bic.w	r3, r3, #1
 800870a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800870e:	f7fd f825 	bl	800575c <HAL_GetTick>
 8008712:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008714:	e008      	b.n	8008728 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008716:	f7fd f821 	bl	800575c <HAL_GetTick>
 800871a:	4602      	mov	r2, r0
 800871c:	693b      	ldr	r3, [r7, #16]
 800871e:	1ad3      	subs	r3, r2, r3
 8008720:	2b02      	cmp	r3, #2
 8008722:	d901      	bls.n	8008728 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8008724:	2303      	movs	r3, #3
 8008726:	e0df      	b.n	80088e8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008728:	4b44      	ldr	r3, [pc, #272]	; (800883c <HAL_RCC_OscConfig+0x578>)
 800872a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800872e:	f003 0302 	and.w	r3, r3, #2
 8008732:	2b00      	cmp	r3, #0
 8008734:	d1ef      	bne.n	8008716 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	69db      	ldr	r3, [r3, #28]
 800873a:	2b00      	cmp	r3, #0
 800873c:	f000 80d3 	beq.w	80088e6 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008740:	4b3e      	ldr	r3, [pc, #248]	; (800883c <HAL_RCC_OscConfig+0x578>)
 8008742:	689b      	ldr	r3, [r3, #8]
 8008744:	f003 030c 	and.w	r3, r3, #12
 8008748:	2b0c      	cmp	r3, #12
 800874a:	f000 808d 	beq.w	8008868 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	69db      	ldr	r3, [r3, #28]
 8008752:	2b02      	cmp	r3, #2
 8008754:	d15a      	bne.n	800880c <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008756:	4b39      	ldr	r3, [pc, #228]	; (800883c <HAL_RCC_OscConfig+0x578>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	4a38      	ldr	r2, [pc, #224]	; (800883c <HAL_RCC_OscConfig+0x578>)
 800875c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008760:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008762:	f7fc fffb 	bl	800575c <HAL_GetTick>
 8008766:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008768:	e008      	b.n	800877c <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800876a:	f7fc fff7 	bl	800575c <HAL_GetTick>
 800876e:	4602      	mov	r2, r0
 8008770:	693b      	ldr	r3, [r7, #16]
 8008772:	1ad3      	subs	r3, r2, r3
 8008774:	2b02      	cmp	r3, #2
 8008776:	d901      	bls.n	800877c <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8008778:	2303      	movs	r3, #3
 800877a:	e0b5      	b.n	80088e8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800877c:	4b2f      	ldr	r3, [pc, #188]	; (800883c <HAL_RCC_OscConfig+0x578>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008784:	2b00      	cmp	r3, #0
 8008786:	d1f0      	bne.n	800876a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008788:	4b2c      	ldr	r3, [pc, #176]	; (800883c <HAL_RCC_OscConfig+0x578>)
 800878a:	68da      	ldr	r2, [r3, #12]
 800878c:	4b2d      	ldr	r3, [pc, #180]	; (8008844 <HAL_RCC_OscConfig+0x580>)
 800878e:	4013      	ands	r3, r2
 8008790:	687a      	ldr	r2, [r7, #4]
 8008792:	6a11      	ldr	r1, [r2, #32]
 8008794:	687a      	ldr	r2, [r7, #4]
 8008796:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008798:	3a01      	subs	r2, #1
 800879a:	0112      	lsls	r2, r2, #4
 800879c:	4311      	orrs	r1, r2
 800879e:	687a      	ldr	r2, [r7, #4]
 80087a0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80087a2:	0212      	lsls	r2, r2, #8
 80087a4:	4311      	orrs	r1, r2
 80087a6:	687a      	ldr	r2, [r7, #4]
 80087a8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80087aa:	0852      	lsrs	r2, r2, #1
 80087ac:	3a01      	subs	r2, #1
 80087ae:	0552      	lsls	r2, r2, #21
 80087b0:	4311      	orrs	r1, r2
 80087b2:	687a      	ldr	r2, [r7, #4]
 80087b4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80087b6:	0852      	lsrs	r2, r2, #1
 80087b8:	3a01      	subs	r2, #1
 80087ba:	0652      	lsls	r2, r2, #25
 80087bc:	4311      	orrs	r1, r2
 80087be:	687a      	ldr	r2, [r7, #4]
 80087c0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80087c2:	06d2      	lsls	r2, r2, #27
 80087c4:	430a      	orrs	r2, r1
 80087c6:	491d      	ldr	r1, [pc, #116]	; (800883c <HAL_RCC_OscConfig+0x578>)
 80087c8:	4313      	orrs	r3, r2
 80087ca:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80087cc:	4b1b      	ldr	r3, [pc, #108]	; (800883c <HAL_RCC_OscConfig+0x578>)
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	4a1a      	ldr	r2, [pc, #104]	; (800883c <HAL_RCC_OscConfig+0x578>)
 80087d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80087d6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80087d8:	4b18      	ldr	r3, [pc, #96]	; (800883c <HAL_RCC_OscConfig+0x578>)
 80087da:	68db      	ldr	r3, [r3, #12]
 80087dc:	4a17      	ldr	r2, [pc, #92]	; (800883c <HAL_RCC_OscConfig+0x578>)
 80087de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80087e2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087e4:	f7fc ffba 	bl	800575c <HAL_GetTick>
 80087e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80087ea:	e008      	b.n	80087fe <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80087ec:	f7fc ffb6 	bl	800575c <HAL_GetTick>
 80087f0:	4602      	mov	r2, r0
 80087f2:	693b      	ldr	r3, [r7, #16]
 80087f4:	1ad3      	subs	r3, r2, r3
 80087f6:	2b02      	cmp	r3, #2
 80087f8:	d901      	bls.n	80087fe <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80087fa:	2303      	movs	r3, #3
 80087fc:	e074      	b.n	80088e8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80087fe:	4b0f      	ldr	r3, [pc, #60]	; (800883c <HAL_RCC_OscConfig+0x578>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008806:	2b00      	cmp	r3, #0
 8008808:	d0f0      	beq.n	80087ec <HAL_RCC_OscConfig+0x528>
 800880a:	e06c      	b.n	80088e6 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800880c:	4b0b      	ldr	r3, [pc, #44]	; (800883c <HAL_RCC_OscConfig+0x578>)
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	4a0a      	ldr	r2, [pc, #40]	; (800883c <HAL_RCC_OscConfig+0x578>)
 8008812:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008816:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8008818:	4b08      	ldr	r3, [pc, #32]	; (800883c <HAL_RCC_OscConfig+0x578>)
 800881a:	68db      	ldr	r3, [r3, #12]
 800881c:	4a07      	ldr	r2, [pc, #28]	; (800883c <HAL_RCC_OscConfig+0x578>)
 800881e:	f023 0303 	bic.w	r3, r3, #3
 8008822:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8008824:	4b05      	ldr	r3, [pc, #20]	; (800883c <HAL_RCC_OscConfig+0x578>)
 8008826:	68db      	ldr	r3, [r3, #12]
 8008828:	4a04      	ldr	r2, [pc, #16]	; (800883c <HAL_RCC_OscConfig+0x578>)
 800882a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800882e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008832:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008834:	f7fc ff92 	bl	800575c <HAL_GetTick>
 8008838:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800883a:	e00e      	b.n	800885a <HAL_RCC_OscConfig+0x596>
 800883c:	40021000 	.word	0x40021000
 8008840:	40007000 	.word	0x40007000
 8008844:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008848:	f7fc ff88 	bl	800575c <HAL_GetTick>
 800884c:	4602      	mov	r2, r0
 800884e:	693b      	ldr	r3, [r7, #16]
 8008850:	1ad3      	subs	r3, r2, r3
 8008852:	2b02      	cmp	r3, #2
 8008854:	d901      	bls.n	800885a <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8008856:	2303      	movs	r3, #3
 8008858:	e046      	b.n	80088e8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800885a:	4b25      	ldr	r3, [pc, #148]	; (80088f0 <HAL_RCC_OscConfig+0x62c>)
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008862:	2b00      	cmp	r3, #0
 8008864:	d1f0      	bne.n	8008848 <HAL_RCC_OscConfig+0x584>
 8008866:	e03e      	b.n	80088e6 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	69db      	ldr	r3, [r3, #28]
 800886c:	2b01      	cmp	r3, #1
 800886e:	d101      	bne.n	8008874 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8008870:	2301      	movs	r3, #1
 8008872:	e039      	b.n	80088e8 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8008874:	4b1e      	ldr	r3, [pc, #120]	; (80088f0 <HAL_RCC_OscConfig+0x62c>)
 8008876:	68db      	ldr	r3, [r3, #12]
 8008878:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800887a:	697b      	ldr	r3, [r7, #20]
 800887c:	f003 0203 	and.w	r2, r3, #3
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	6a1b      	ldr	r3, [r3, #32]
 8008884:	429a      	cmp	r2, r3
 8008886:	d12c      	bne.n	80088e2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008888:	697b      	ldr	r3, [r7, #20]
 800888a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008892:	3b01      	subs	r3, #1
 8008894:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008896:	429a      	cmp	r2, r3
 8008898:	d123      	bne.n	80088e2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800889a:	697b      	ldr	r3, [r7, #20]
 800889c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088a4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80088a6:	429a      	cmp	r2, r3
 80088a8:	d11b      	bne.n	80088e2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088b4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80088b6:	429a      	cmp	r2, r3
 80088b8:	d113      	bne.n	80088e2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80088ba:	697b      	ldr	r3, [r7, #20]
 80088bc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088c4:	085b      	lsrs	r3, r3, #1
 80088c6:	3b01      	subs	r3, #1
 80088c8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80088ca:	429a      	cmp	r2, r3
 80088cc:	d109      	bne.n	80088e2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80088ce:	697b      	ldr	r3, [r7, #20]
 80088d0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088d8:	085b      	lsrs	r3, r3, #1
 80088da:	3b01      	subs	r3, #1
 80088dc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80088de:	429a      	cmp	r2, r3
 80088e0:	d001      	beq.n	80088e6 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80088e2:	2301      	movs	r3, #1
 80088e4:	e000      	b.n	80088e8 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80088e6:	2300      	movs	r3, #0
}
 80088e8:	4618      	mov	r0, r3
 80088ea:	3720      	adds	r7, #32
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}
 80088f0:	40021000 	.word	0x40021000

080088f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b086      	sub	sp, #24
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
 80088fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80088fe:	2300      	movs	r3, #0
 8008900:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d101      	bne.n	800890c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008908:	2301      	movs	r3, #1
 800890a:	e11e      	b.n	8008b4a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800890c:	4b91      	ldr	r3, [pc, #580]	; (8008b54 <HAL_RCC_ClockConfig+0x260>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f003 030f 	and.w	r3, r3, #15
 8008914:	683a      	ldr	r2, [r7, #0]
 8008916:	429a      	cmp	r2, r3
 8008918:	d910      	bls.n	800893c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800891a:	4b8e      	ldr	r3, [pc, #568]	; (8008b54 <HAL_RCC_ClockConfig+0x260>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f023 020f 	bic.w	r2, r3, #15
 8008922:	498c      	ldr	r1, [pc, #560]	; (8008b54 <HAL_RCC_ClockConfig+0x260>)
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	4313      	orrs	r3, r2
 8008928:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800892a:	4b8a      	ldr	r3, [pc, #552]	; (8008b54 <HAL_RCC_ClockConfig+0x260>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f003 030f 	and.w	r3, r3, #15
 8008932:	683a      	ldr	r2, [r7, #0]
 8008934:	429a      	cmp	r2, r3
 8008936:	d001      	beq.n	800893c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008938:	2301      	movs	r3, #1
 800893a:	e106      	b.n	8008b4a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f003 0301 	and.w	r3, r3, #1
 8008944:	2b00      	cmp	r3, #0
 8008946:	d073      	beq.n	8008a30 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	685b      	ldr	r3, [r3, #4]
 800894c:	2b03      	cmp	r3, #3
 800894e:	d129      	bne.n	80089a4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008950:	4b81      	ldr	r3, [pc, #516]	; (8008b58 <HAL_RCC_ClockConfig+0x264>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008958:	2b00      	cmp	r3, #0
 800895a:	d101      	bne.n	8008960 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800895c:	2301      	movs	r3, #1
 800895e:	e0f4      	b.n	8008b4a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8008960:	f000 f972 	bl	8008c48 <RCC_GetSysClockFreqFromPLLSource>
 8008964:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8008966:	693b      	ldr	r3, [r7, #16]
 8008968:	4a7c      	ldr	r2, [pc, #496]	; (8008b5c <HAL_RCC_ClockConfig+0x268>)
 800896a:	4293      	cmp	r3, r2
 800896c:	d93f      	bls.n	80089ee <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800896e:	4b7a      	ldr	r3, [pc, #488]	; (8008b58 <HAL_RCC_ClockConfig+0x264>)
 8008970:	689b      	ldr	r3, [r3, #8]
 8008972:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008976:	2b00      	cmp	r3, #0
 8008978:	d009      	beq.n	800898e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008982:	2b00      	cmp	r3, #0
 8008984:	d033      	beq.n	80089ee <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800898a:	2b00      	cmp	r3, #0
 800898c:	d12f      	bne.n	80089ee <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800898e:	4b72      	ldr	r3, [pc, #456]	; (8008b58 <HAL_RCC_ClockConfig+0x264>)
 8008990:	689b      	ldr	r3, [r3, #8]
 8008992:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008996:	4a70      	ldr	r2, [pc, #448]	; (8008b58 <HAL_RCC_ClockConfig+0x264>)
 8008998:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800899c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800899e:	2380      	movs	r3, #128	; 0x80
 80089a0:	617b      	str	r3, [r7, #20]
 80089a2:	e024      	b.n	80089ee <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	685b      	ldr	r3, [r3, #4]
 80089a8:	2b02      	cmp	r3, #2
 80089aa:	d107      	bne.n	80089bc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80089ac:	4b6a      	ldr	r3, [pc, #424]	; (8008b58 <HAL_RCC_ClockConfig+0x264>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d109      	bne.n	80089cc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80089b8:	2301      	movs	r3, #1
 80089ba:	e0c6      	b.n	8008b4a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80089bc:	4b66      	ldr	r3, [pc, #408]	; (8008b58 <HAL_RCC_ClockConfig+0x264>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d101      	bne.n	80089cc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80089c8:	2301      	movs	r3, #1
 80089ca:	e0be      	b.n	8008b4a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80089cc:	f000 f8ce 	bl	8008b6c <HAL_RCC_GetSysClockFreq>
 80089d0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80089d2:	693b      	ldr	r3, [r7, #16]
 80089d4:	4a61      	ldr	r2, [pc, #388]	; (8008b5c <HAL_RCC_ClockConfig+0x268>)
 80089d6:	4293      	cmp	r3, r2
 80089d8:	d909      	bls.n	80089ee <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80089da:	4b5f      	ldr	r3, [pc, #380]	; (8008b58 <HAL_RCC_ClockConfig+0x264>)
 80089dc:	689b      	ldr	r3, [r3, #8]
 80089de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80089e2:	4a5d      	ldr	r2, [pc, #372]	; (8008b58 <HAL_RCC_ClockConfig+0x264>)
 80089e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089e8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80089ea:	2380      	movs	r3, #128	; 0x80
 80089ec:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80089ee:	4b5a      	ldr	r3, [pc, #360]	; (8008b58 <HAL_RCC_ClockConfig+0x264>)
 80089f0:	689b      	ldr	r3, [r3, #8]
 80089f2:	f023 0203 	bic.w	r2, r3, #3
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	685b      	ldr	r3, [r3, #4]
 80089fa:	4957      	ldr	r1, [pc, #348]	; (8008b58 <HAL_RCC_ClockConfig+0x264>)
 80089fc:	4313      	orrs	r3, r2
 80089fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a00:	f7fc feac 	bl	800575c <HAL_GetTick>
 8008a04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a06:	e00a      	b.n	8008a1e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008a08:	f7fc fea8 	bl	800575c <HAL_GetTick>
 8008a0c:	4602      	mov	r2, r0
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	1ad3      	subs	r3, r2, r3
 8008a12:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d901      	bls.n	8008a1e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8008a1a:	2303      	movs	r3, #3
 8008a1c:	e095      	b.n	8008b4a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a1e:	4b4e      	ldr	r3, [pc, #312]	; (8008b58 <HAL_RCC_ClockConfig+0x264>)
 8008a20:	689b      	ldr	r3, [r3, #8]
 8008a22:	f003 020c 	and.w	r2, r3, #12
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	685b      	ldr	r3, [r3, #4]
 8008a2a:	009b      	lsls	r3, r3, #2
 8008a2c:	429a      	cmp	r2, r3
 8008a2e:	d1eb      	bne.n	8008a08 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f003 0302 	and.w	r3, r3, #2
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d023      	beq.n	8008a84 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f003 0304 	and.w	r3, r3, #4
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d005      	beq.n	8008a54 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008a48:	4b43      	ldr	r3, [pc, #268]	; (8008b58 <HAL_RCC_ClockConfig+0x264>)
 8008a4a:	689b      	ldr	r3, [r3, #8]
 8008a4c:	4a42      	ldr	r2, [pc, #264]	; (8008b58 <HAL_RCC_ClockConfig+0x264>)
 8008a4e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8008a52:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f003 0308 	and.w	r3, r3, #8
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d007      	beq.n	8008a70 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8008a60:	4b3d      	ldr	r3, [pc, #244]	; (8008b58 <HAL_RCC_ClockConfig+0x264>)
 8008a62:	689b      	ldr	r3, [r3, #8]
 8008a64:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008a68:	4a3b      	ldr	r2, [pc, #236]	; (8008b58 <HAL_RCC_ClockConfig+0x264>)
 8008a6a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8008a6e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008a70:	4b39      	ldr	r3, [pc, #228]	; (8008b58 <HAL_RCC_ClockConfig+0x264>)
 8008a72:	689b      	ldr	r3, [r3, #8]
 8008a74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	689b      	ldr	r3, [r3, #8]
 8008a7c:	4936      	ldr	r1, [pc, #216]	; (8008b58 <HAL_RCC_ClockConfig+0x264>)
 8008a7e:	4313      	orrs	r3, r2
 8008a80:	608b      	str	r3, [r1, #8]
 8008a82:	e008      	b.n	8008a96 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8008a84:	697b      	ldr	r3, [r7, #20]
 8008a86:	2b80      	cmp	r3, #128	; 0x80
 8008a88:	d105      	bne.n	8008a96 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8008a8a:	4b33      	ldr	r3, [pc, #204]	; (8008b58 <HAL_RCC_ClockConfig+0x264>)
 8008a8c:	689b      	ldr	r3, [r3, #8]
 8008a8e:	4a32      	ldr	r2, [pc, #200]	; (8008b58 <HAL_RCC_ClockConfig+0x264>)
 8008a90:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008a94:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008a96:	4b2f      	ldr	r3, [pc, #188]	; (8008b54 <HAL_RCC_ClockConfig+0x260>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f003 030f 	and.w	r3, r3, #15
 8008a9e:	683a      	ldr	r2, [r7, #0]
 8008aa0:	429a      	cmp	r2, r3
 8008aa2:	d21d      	bcs.n	8008ae0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008aa4:	4b2b      	ldr	r3, [pc, #172]	; (8008b54 <HAL_RCC_ClockConfig+0x260>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f023 020f 	bic.w	r2, r3, #15
 8008aac:	4929      	ldr	r1, [pc, #164]	; (8008b54 <HAL_RCC_ClockConfig+0x260>)
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	4313      	orrs	r3, r2
 8008ab2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008ab4:	f7fc fe52 	bl	800575c <HAL_GetTick>
 8008ab8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008aba:	e00a      	b.n	8008ad2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008abc:	f7fc fe4e 	bl	800575c <HAL_GetTick>
 8008ac0:	4602      	mov	r2, r0
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	1ad3      	subs	r3, r2, r3
 8008ac6:	f241 3288 	movw	r2, #5000	; 0x1388
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d901      	bls.n	8008ad2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8008ace:	2303      	movs	r3, #3
 8008ad0:	e03b      	b.n	8008b4a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008ad2:	4b20      	ldr	r3, [pc, #128]	; (8008b54 <HAL_RCC_ClockConfig+0x260>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f003 030f 	and.w	r3, r3, #15
 8008ada:	683a      	ldr	r2, [r7, #0]
 8008adc:	429a      	cmp	r2, r3
 8008ade:	d1ed      	bne.n	8008abc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f003 0304 	and.w	r3, r3, #4
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d008      	beq.n	8008afe <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008aec:	4b1a      	ldr	r3, [pc, #104]	; (8008b58 <HAL_RCC_ClockConfig+0x264>)
 8008aee:	689b      	ldr	r3, [r3, #8]
 8008af0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	68db      	ldr	r3, [r3, #12]
 8008af8:	4917      	ldr	r1, [pc, #92]	; (8008b58 <HAL_RCC_ClockConfig+0x264>)
 8008afa:	4313      	orrs	r3, r2
 8008afc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f003 0308 	and.w	r3, r3, #8
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d009      	beq.n	8008b1e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008b0a:	4b13      	ldr	r3, [pc, #76]	; (8008b58 <HAL_RCC_ClockConfig+0x264>)
 8008b0c:	689b      	ldr	r3, [r3, #8]
 8008b0e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	691b      	ldr	r3, [r3, #16]
 8008b16:	00db      	lsls	r3, r3, #3
 8008b18:	490f      	ldr	r1, [pc, #60]	; (8008b58 <HAL_RCC_ClockConfig+0x264>)
 8008b1a:	4313      	orrs	r3, r2
 8008b1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008b1e:	f000 f825 	bl	8008b6c <HAL_RCC_GetSysClockFreq>
 8008b22:	4601      	mov	r1, r0
 8008b24:	4b0c      	ldr	r3, [pc, #48]	; (8008b58 <HAL_RCC_ClockConfig+0x264>)
 8008b26:	689b      	ldr	r3, [r3, #8]
 8008b28:	091b      	lsrs	r3, r3, #4
 8008b2a:	f003 030f 	and.w	r3, r3, #15
 8008b2e:	4a0c      	ldr	r2, [pc, #48]	; (8008b60 <HAL_RCC_ClockConfig+0x26c>)
 8008b30:	5cd3      	ldrb	r3, [r2, r3]
 8008b32:	f003 031f 	and.w	r3, r3, #31
 8008b36:	fa21 f303 	lsr.w	r3, r1, r3
 8008b3a:	4a0a      	ldr	r2, [pc, #40]	; (8008b64 <HAL_RCC_ClockConfig+0x270>)
 8008b3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8008b3e:	4b0a      	ldr	r3, [pc, #40]	; (8008b68 <HAL_RCC_ClockConfig+0x274>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	4618      	mov	r0, r3
 8008b44:	f7fc fdbe 	bl	80056c4 <HAL_InitTick>
 8008b48:	4603      	mov	r3, r0
}
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	3718      	adds	r7, #24
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}
 8008b52:	bf00      	nop
 8008b54:	40022000 	.word	0x40022000
 8008b58:	40021000 	.word	0x40021000
 8008b5c:	04c4b400 	.word	0x04c4b400
 8008b60:	0800eab0 	.word	0x0800eab0
 8008b64:	200001ac 	.word	0x200001ac
 8008b68:	200001b0 	.word	0x200001b0

08008b6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b087      	sub	sp, #28
 8008b70:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8008b72:	4b2c      	ldr	r3, [pc, #176]	; (8008c24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008b74:	689b      	ldr	r3, [r3, #8]
 8008b76:	f003 030c 	and.w	r3, r3, #12
 8008b7a:	2b04      	cmp	r3, #4
 8008b7c:	d102      	bne.n	8008b84 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008b7e:	4b2a      	ldr	r3, [pc, #168]	; (8008c28 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008b80:	613b      	str	r3, [r7, #16]
 8008b82:	e047      	b.n	8008c14 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8008b84:	4b27      	ldr	r3, [pc, #156]	; (8008c24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008b86:	689b      	ldr	r3, [r3, #8]
 8008b88:	f003 030c 	and.w	r3, r3, #12
 8008b8c:	2b08      	cmp	r3, #8
 8008b8e:	d102      	bne.n	8008b96 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008b90:	4b26      	ldr	r3, [pc, #152]	; (8008c2c <HAL_RCC_GetSysClockFreq+0xc0>)
 8008b92:	613b      	str	r3, [r7, #16]
 8008b94:	e03e      	b.n	8008c14 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8008b96:	4b23      	ldr	r3, [pc, #140]	; (8008c24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008b98:	689b      	ldr	r3, [r3, #8]
 8008b9a:	f003 030c 	and.w	r3, r3, #12
 8008b9e:	2b0c      	cmp	r3, #12
 8008ba0:	d136      	bne.n	8008c10 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008ba2:	4b20      	ldr	r3, [pc, #128]	; (8008c24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008ba4:	68db      	ldr	r3, [r3, #12]
 8008ba6:	f003 0303 	and.w	r3, r3, #3
 8008baa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008bac:	4b1d      	ldr	r3, [pc, #116]	; (8008c24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008bae:	68db      	ldr	r3, [r3, #12]
 8008bb0:	091b      	lsrs	r3, r3, #4
 8008bb2:	f003 030f 	and.w	r3, r3, #15
 8008bb6:	3301      	adds	r3, #1
 8008bb8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	2b03      	cmp	r3, #3
 8008bbe:	d10c      	bne.n	8008bda <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008bc0:	4a1a      	ldr	r2, [pc, #104]	; (8008c2c <HAL_RCC_GetSysClockFreq+0xc0>)
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bc8:	4a16      	ldr	r2, [pc, #88]	; (8008c24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008bca:	68d2      	ldr	r2, [r2, #12]
 8008bcc:	0a12      	lsrs	r2, r2, #8
 8008bce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008bd2:	fb02 f303 	mul.w	r3, r2, r3
 8008bd6:	617b      	str	r3, [r7, #20]
      break;
 8008bd8:	e00c      	b.n	8008bf4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008bda:	4a13      	ldr	r2, [pc, #76]	; (8008c28 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8008be2:	4a10      	ldr	r2, [pc, #64]	; (8008c24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008be4:	68d2      	ldr	r2, [r2, #12]
 8008be6:	0a12      	lsrs	r2, r2, #8
 8008be8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008bec:	fb02 f303 	mul.w	r3, r2, r3
 8008bf0:	617b      	str	r3, [r7, #20]
      break;
 8008bf2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008bf4:	4b0b      	ldr	r3, [pc, #44]	; (8008c24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008bf6:	68db      	ldr	r3, [r3, #12]
 8008bf8:	0e5b      	lsrs	r3, r3, #25
 8008bfa:	f003 0303 	and.w	r3, r3, #3
 8008bfe:	3301      	adds	r3, #1
 8008c00:	005b      	lsls	r3, r3, #1
 8008c02:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8008c04:	697a      	ldr	r2, [r7, #20]
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c0c:	613b      	str	r3, [r7, #16]
 8008c0e:	e001      	b.n	8008c14 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8008c10:	2300      	movs	r3, #0
 8008c12:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8008c14:	693b      	ldr	r3, [r7, #16]
}
 8008c16:	4618      	mov	r0, r3
 8008c18:	371c      	adds	r7, #28
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c20:	4770      	bx	lr
 8008c22:	bf00      	nop
 8008c24:	40021000 	.word	0x40021000
 8008c28:	00f42400 	.word	0x00f42400
 8008c2c:	007a1200 	.word	0x007a1200

08008c30 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008c30:	b480      	push	{r7}
 8008c32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008c34:	4b03      	ldr	r3, [pc, #12]	; (8008c44 <HAL_RCC_GetHCLKFreq+0x14>)
 8008c36:	681b      	ldr	r3, [r3, #0]
}
 8008c38:	4618      	mov	r0, r3
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c40:	4770      	bx	lr
 8008c42:	bf00      	nop
 8008c44:	200001ac 	.word	0x200001ac

08008c48 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b087      	sub	sp, #28
 8008c4c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008c4e:	4b1e      	ldr	r3, [pc, #120]	; (8008cc8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008c50:	68db      	ldr	r3, [r3, #12]
 8008c52:	f003 0303 	and.w	r3, r3, #3
 8008c56:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008c58:	4b1b      	ldr	r3, [pc, #108]	; (8008cc8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008c5a:	68db      	ldr	r3, [r3, #12]
 8008c5c:	091b      	lsrs	r3, r3, #4
 8008c5e:	f003 030f 	and.w	r3, r3, #15
 8008c62:	3301      	adds	r3, #1
 8008c64:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8008c66:	693b      	ldr	r3, [r7, #16]
 8008c68:	2b03      	cmp	r3, #3
 8008c6a:	d10c      	bne.n	8008c86 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008c6c:	4a17      	ldr	r2, [pc, #92]	; (8008ccc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c74:	4a14      	ldr	r2, [pc, #80]	; (8008cc8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008c76:	68d2      	ldr	r2, [r2, #12]
 8008c78:	0a12      	lsrs	r2, r2, #8
 8008c7a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008c7e:	fb02 f303 	mul.w	r3, r2, r3
 8008c82:	617b      	str	r3, [r7, #20]
    break;
 8008c84:	e00c      	b.n	8008ca0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008c86:	4a12      	ldr	r2, [pc, #72]	; (8008cd0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c8e:	4a0e      	ldr	r2, [pc, #56]	; (8008cc8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008c90:	68d2      	ldr	r2, [r2, #12]
 8008c92:	0a12      	lsrs	r2, r2, #8
 8008c94:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008c98:	fb02 f303 	mul.w	r3, r2, r3
 8008c9c:	617b      	str	r3, [r7, #20]
    break;
 8008c9e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008ca0:	4b09      	ldr	r3, [pc, #36]	; (8008cc8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008ca2:	68db      	ldr	r3, [r3, #12]
 8008ca4:	0e5b      	lsrs	r3, r3, #25
 8008ca6:	f003 0303 	and.w	r3, r3, #3
 8008caa:	3301      	adds	r3, #1
 8008cac:	005b      	lsls	r3, r3, #1
 8008cae:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8008cb0:	697a      	ldr	r2, [r7, #20]
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cb8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8008cba:	687b      	ldr	r3, [r7, #4]
}
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	371c      	adds	r7, #28
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc6:	4770      	bx	lr
 8008cc8:	40021000 	.word	0x40021000
 8008ccc:	007a1200 	.word	0x007a1200
 8008cd0:	00f42400 	.word	0x00f42400

08008cd4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b086      	sub	sp, #24
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008cdc:	2300      	movs	r3, #0
 8008cde:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	f000 8098 	beq.w	8008e22 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008cf6:	4b43      	ldr	r3, [pc, #268]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d10d      	bne.n	8008d1e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008d02:	4b40      	ldr	r3, [pc, #256]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d06:	4a3f      	ldr	r2, [pc, #252]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008d08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d0c:	6593      	str	r3, [r2, #88]	; 0x58
 8008d0e:	4b3d      	ldr	r3, [pc, #244]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d16:	60bb      	str	r3, [r7, #8]
 8008d18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008d1e:	4b3a      	ldr	r3, [pc, #232]	; (8008e08 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	4a39      	ldr	r2, [pc, #228]	; (8008e08 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008d24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d28:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008d2a:	f7fc fd17 	bl	800575c <HAL_GetTick>
 8008d2e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008d30:	e009      	b.n	8008d46 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008d32:	f7fc fd13 	bl	800575c <HAL_GetTick>
 8008d36:	4602      	mov	r2, r0
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	1ad3      	subs	r3, r2, r3
 8008d3c:	2b02      	cmp	r3, #2
 8008d3e:	d902      	bls.n	8008d46 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8008d40:	2303      	movs	r3, #3
 8008d42:	74fb      	strb	r3, [r7, #19]
        break;
 8008d44:	e005      	b.n	8008d52 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008d46:	4b30      	ldr	r3, [pc, #192]	; (8008e08 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d0ef      	beq.n	8008d32 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8008d52:	7cfb      	ldrb	r3, [r7, #19]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d159      	bne.n	8008e0c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008d58:	4b2a      	ldr	r3, [pc, #168]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d62:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008d64:	697b      	ldr	r3, [r7, #20]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d01e      	beq.n	8008da8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d6e:	697a      	ldr	r2, [r7, #20]
 8008d70:	429a      	cmp	r2, r3
 8008d72:	d019      	beq.n	8008da8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008d74:	4b23      	ldr	r3, [pc, #140]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d7e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008d80:	4b20      	ldr	r3, [pc, #128]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d86:	4a1f      	ldr	r2, [pc, #124]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008d88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008d90:	4b1c      	ldr	r3, [pc, #112]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d96:	4a1b      	ldr	r2, [pc, #108]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008d98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008da0:	4a18      	ldr	r2, [pc, #96]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008da2:	697b      	ldr	r3, [r7, #20]
 8008da4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008da8:	697b      	ldr	r3, [r7, #20]
 8008daa:	f003 0301 	and.w	r3, r3, #1
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d016      	beq.n	8008de0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008db2:	f7fc fcd3 	bl	800575c <HAL_GetTick>
 8008db6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008db8:	e00b      	b.n	8008dd2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008dba:	f7fc fccf 	bl	800575c <HAL_GetTick>
 8008dbe:	4602      	mov	r2, r0
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	1ad3      	subs	r3, r2, r3
 8008dc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8008dc8:	4293      	cmp	r3, r2
 8008dca:	d902      	bls.n	8008dd2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8008dcc:	2303      	movs	r3, #3
 8008dce:	74fb      	strb	r3, [r7, #19]
            break;
 8008dd0:	e006      	b.n	8008de0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008dd2:	4b0c      	ldr	r3, [pc, #48]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008dd8:	f003 0302 	and.w	r3, r3, #2
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d0ec      	beq.n	8008dba <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8008de0:	7cfb      	ldrb	r3, [r7, #19]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d10b      	bne.n	8008dfe <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008de6:	4b07      	ldr	r3, [pc, #28]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008dec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008df4:	4903      	ldr	r1, [pc, #12]	; (8008e04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008df6:	4313      	orrs	r3, r2
 8008df8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8008dfc:	e008      	b.n	8008e10 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008dfe:	7cfb      	ldrb	r3, [r7, #19]
 8008e00:	74bb      	strb	r3, [r7, #18]
 8008e02:	e005      	b.n	8008e10 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008e04:	40021000 	.word	0x40021000
 8008e08:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e0c:	7cfb      	ldrb	r3, [r7, #19]
 8008e0e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008e10:	7c7b      	ldrb	r3, [r7, #17]
 8008e12:	2b01      	cmp	r3, #1
 8008e14:	d105      	bne.n	8008e22 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008e16:	4baf      	ldr	r3, [pc, #700]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e1a:	4aae      	ldr	r2, [pc, #696]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008e1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008e20:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f003 0301 	and.w	r3, r3, #1
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d00a      	beq.n	8008e44 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008e2e:	4ba9      	ldr	r3, [pc, #676]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e34:	f023 0203 	bic.w	r2, r3, #3
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	685b      	ldr	r3, [r3, #4]
 8008e3c:	49a5      	ldr	r1, [pc, #660]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008e3e:	4313      	orrs	r3, r2
 8008e40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f003 0302 	and.w	r3, r3, #2
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d00a      	beq.n	8008e66 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008e50:	4ba0      	ldr	r3, [pc, #640]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e56:	f023 020c 	bic.w	r2, r3, #12
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	689b      	ldr	r3, [r3, #8]
 8008e5e:	499d      	ldr	r1, [pc, #628]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008e60:	4313      	orrs	r3, r2
 8008e62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f003 0304 	and.w	r3, r3, #4
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d00a      	beq.n	8008e88 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008e72:	4b98      	ldr	r3, [pc, #608]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e78:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	68db      	ldr	r3, [r3, #12]
 8008e80:	4994      	ldr	r1, [pc, #592]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008e82:	4313      	orrs	r3, r2
 8008e84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f003 0308 	and.w	r3, r3, #8
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d00a      	beq.n	8008eaa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008e94:	4b8f      	ldr	r3, [pc, #572]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e9a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	691b      	ldr	r3, [r3, #16]
 8008ea2:	498c      	ldr	r1, [pc, #560]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008ea4:	4313      	orrs	r3, r2
 8008ea6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	f003 0310 	and.w	r3, r3, #16
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d00a      	beq.n	8008ecc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008eb6:	4b87      	ldr	r3, [pc, #540]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ebc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	695b      	ldr	r3, [r3, #20]
 8008ec4:	4983      	ldr	r1, [pc, #524]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008ec6:	4313      	orrs	r3, r2
 8008ec8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f003 0320 	and.w	r3, r3, #32
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d00a      	beq.n	8008eee <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008ed8:	4b7e      	ldr	r3, [pc, #504]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ede:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	699b      	ldr	r3, [r3, #24]
 8008ee6:	497b      	ldr	r1, [pc, #492]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008ee8:	4313      	orrs	r3, r2
 8008eea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d00a      	beq.n	8008f10 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008efa:	4b76      	ldr	r3, [pc, #472]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f00:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	69db      	ldr	r3, [r3, #28]
 8008f08:	4972      	ldr	r1, [pc, #456]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008f0a:	4313      	orrs	r3, r2
 8008f0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d00a      	beq.n	8008f32 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008f1c:	4b6d      	ldr	r3, [pc, #436]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f22:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6a1b      	ldr	r3, [r3, #32]
 8008f2a:	496a      	ldr	r1, [pc, #424]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008f2c:	4313      	orrs	r3, r2
 8008f2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d00a      	beq.n	8008f54 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008f3e:	4b65      	ldr	r3, [pc, #404]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f44:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f4c:	4961      	ldr	r1, [pc, #388]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008f4e:	4313      	orrs	r3, r2
 8008f50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d00a      	beq.n	8008f76 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008f60:	4b5c      	ldr	r3, [pc, #368]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008f62:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008f66:	f023 0203 	bic.w	r2, r3, #3
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f6e:	4959      	ldr	r1, [pc, #356]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008f70:	4313      	orrs	r3, r2
 8008f72:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d00a      	beq.n	8008f98 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008f82:	4b54      	ldr	r3, [pc, #336]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f88:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f90:	4950      	ldr	r1, [pc, #320]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008f92:	4313      	orrs	r3, r2
 8008f94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d015      	beq.n	8008fd0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008fa4:	4b4b      	ldr	r3, [pc, #300]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008faa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fb2:	4948      	ldr	r1, [pc, #288]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008fb4:	4313      	orrs	r3, r2
 8008fb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008fc2:	d105      	bne.n	8008fd0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008fc4:	4b43      	ldr	r3, [pc, #268]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008fc6:	68db      	ldr	r3, [r3, #12]
 8008fc8:	4a42      	ldr	r2, [pc, #264]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008fca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008fce:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d015      	beq.n	8009008 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008fdc:	4b3d      	ldr	r3, [pc, #244]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fe2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fea:	493a      	ldr	r1, [pc, #232]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008fec:	4313      	orrs	r3, r2
 8008fee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ff6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008ffa:	d105      	bne.n	8009008 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008ffc:	4b35      	ldr	r3, [pc, #212]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008ffe:	68db      	ldr	r3, [r3, #12]
 8009000:	4a34      	ldr	r2, [pc, #208]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009002:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009006:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009010:	2b00      	cmp	r3, #0
 8009012:	d015      	beq.n	8009040 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009014:	4b2f      	ldr	r3, [pc, #188]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009016:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800901a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009022:	492c      	ldr	r1, [pc, #176]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009024:	4313      	orrs	r3, r2
 8009026:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800902e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009032:	d105      	bne.n	8009040 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009034:	4b27      	ldr	r3, [pc, #156]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009036:	68db      	ldr	r3, [r3, #12]
 8009038:	4a26      	ldr	r2, [pc, #152]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800903a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800903e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009048:	2b00      	cmp	r3, #0
 800904a:	d015      	beq.n	8009078 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800904c:	4b21      	ldr	r3, [pc, #132]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800904e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009052:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800905a:	491e      	ldr	r1, [pc, #120]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800905c:	4313      	orrs	r3, r2
 800905e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009066:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800906a:	d105      	bne.n	8009078 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800906c:	4b19      	ldr	r3, [pc, #100]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800906e:	68db      	ldr	r3, [r3, #12]
 8009070:	4a18      	ldr	r2, [pc, #96]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009072:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009076:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009080:	2b00      	cmp	r3, #0
 8009082:	d015      	beq.n	80090b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009084:	4b13      	ldr	r3, [pc, #76]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800908a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009092:	4910      	ldr	r1, [pc, #64]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009094:	4313      	orrs	r3, r2
 8009096:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800909e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80090a2:	d105      	bne.n	80090b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80090a4:	4b0b      	ldr	r3, [pc, #44]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80090a6:	68db      	ldr	r3, [r3, #12]
 80090a8:	4a0a      	ldr	r2, [pc, #40]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80090aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80090ae:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d018      	beq.n	80090ee <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80090bc:	4b05      	ldr	r3, [pc, #20]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80090be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090c2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090ca:	4902      	ldr	r1, [pc, #8]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80090cc:	4313      	orrs	r3, r2
 80090ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80090d2:	e001      	b.n	80090d8 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80090d4:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80090e0:	d105      	bne.n	80090ee <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80090e2:	4b21      	ldr	r3, [pc, #132]	; (8009168 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80090e4:	68db      	ldr	r3, [r3, #12]
 80090e6:	4a20      	ldr	r2, [pc, #128]	; (8009168 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80090e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80090ec:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d015      	beq.n	8009126 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80090fa:	4b1b      	ldr	r3, [pc, #108]	; (8009168 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80090fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009100:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009108:	4917      	ldr	r1, [pc, #92]	; (8009168 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800910a:	4313      	orrs	r3, r2
 800910c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009114:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009118:	d105      	bne.n	8009126 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800911a:	4b13      	ldr	r3, [pc, #76]	; (8009168 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800911c:	68db      	ldr	r3, [r3, #12]
 800911e:	4a12      	ldr	r2, [pc, #72]	; (8009168 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8009120:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009124:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800912e:	2b00      	cmp	r3, #0
 8009130:	d015      	beq.n	800915e <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009132:	4b0d      	ldr	r3, [pc, #52]	; (8009168 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8009134:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009138:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009140:	4909      	ldr	r1, [pc, #36]	; (8009168 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8009142:	4313      	orrs	r3, r2
 8009144:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800914c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009150:	d105      	bne.n	800915e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009152:	4b05      	ldr	r3, [pc, #20]	; (8009168 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8009154:	68db      	ldr	r3, [r3, #12]
 8009156:	4a04      	ldr	r2, [pc, #16]	; (8009168 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8009158:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800915c:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800915e:	7cbb      	ldrb	r3, [r7, #18]
}
 8009160:	4618      	mov	r0, r3
 8009162:	3718      	adds	r7, #24
 8009164:	46bd      	mov	sp, r7
 8009166:	bd80      	pop	{r7, pc}
 8009168:	40021000 	.word	0x40021000

0800916c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b084      	sub	sp, #16
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d101      	bne.n	800917e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800917a:	2301      	movs	r3, #1
 800917c:	e084      	b.n	8009288 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2200      	movs	r2, #0
 8009182:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800918a:	b2db      	uxtb	r3, r3
 800918c:	2b00      	cmp	r3, #0
 800918e:	d106      	bne.n	800919e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2200      	movs	r2, #0
 8009194:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009198:	6878      	ldr	r0, [r7, #4]
 800919a:	f7fb fc8d 	bl	8004ab8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2202      	movs	r2, #2
 80091a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	681a      	ldr	r2, [r3, #0]
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80091b4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	68db      	ldr	r3, [r3, #12]
 80091ba:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80091be:	d902      	bls.n	80091c6 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80091c0:	2300      	movs	r3, #0
 80091c2:	60fb      	str	r3, [r7, #12]
 80091c4:	e002      	b.n	80091cc <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80091c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80091ca:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	68db      	ldr	r3, [r3, #12]
 80091d0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80091d4:	d007      	beq.n	80091e6 <HAL_SPI_Init+0x7a>
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	68db      	ldr	r3, [r3, #12]
 80091da:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80091de:	d002      	beq.n	80091e6 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2200      	movs	r2, #0
 80091e4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d10b      	bne.n	8009206 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	68db      	ldr	r3, [r3, #12]
 80091f2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80091f6:	d903      	bls.n	8009200 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2202      	movs	r2, #2
 80091fc:	631a      	str	r2, [r3, #48]	; 0x30
 80091fe:	e002      	b.n	8009206 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2201      	movs	r2, #1
 8009204:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	685a      	ldr	r2, [r3, #4]
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	689b      	ldr	r3, [r3, #8]
 800920e:	431a      	orrs	r2, r3
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	691b      	ldr	r3, [r3, #16]
 8009214:	431a      	orrs	r2, r3
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	695b      	ldr	r3, [r3, #20]
 800921a:	431a      	orrs	r2, r3
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	699b      	ldr	r3, [r3, #24]
 8009220:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009224:	431a      	orrs	r2, r3
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	69db      	ldr	r3, [r3, #28]
 800922a:	431a      	orrs	r2, r3
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	6a1b      	ldr	r3, [r3, #32]
 8009230:	ea42 0103 	orr.w	r1, r2, r3
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	430a      	orrs	r2, r1
 800923e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	699b      	ldr	r3, [r3, #24]
 8009244:	0c1b      	lsrs	r3, r3, #16
 8009246:	f003 0204 	and.w	r2, r3, #4
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800924e:	431a      	orrs	r2, r3
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009254:	431a      	orrs	r2, r3
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	68db      	ldr	r3, [r3, #12]
 800925a:	ea42 0103 	orr.w	r1, r2, r3
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	68fa      	ldr	r2, [r7, #12]
 8009264:	430a      	orrs	r2, r1
 8009266:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	69da      	ldr	r2, [r3, #28]
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009276:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2200      	movs	r2, #0
 800927c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2201      	movs	r2, #1
 8009282:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8009286:	2300      	movs	r3, #0
}
 8009288:	4618      	mov	r0, r3
 800928a:	3710      	adds	r7, #16
 800928c:	46bd      	mov	sp, r7
 800928e:	bd80      	pop	{r7, pc}

08009290 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b088      	sub	sp, #32
 8009294:	af00      	add	r7, sp, #0
 8009296:	60f8      	str	r0, [r7, #12]
 8009298:	60b9      	str	r1, [r7, #8]
 800929a:	603b      	str	r3, [r7, #0]
 800929c:	4613      	mov	r3, r2
 800929e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80092a0:	2300      	movs	r3, #0
 80092a2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80092aa:	2b01      	cmp	r3, #1
 80092ac:	d101      	bne.n	80092b2 <HAL_SPI_Transmit+0x22>
 80092ae:	2302      	movs	r3, #2
 80092b0:	e150      	b.n	8009554 <HAL_SPI_Transmit+0x2c4>
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	2201      	movs	r2, #1
 80092b6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80092ba:	f7fc fa4f 	bl	800575c <HAL_GetTick>
 80092be:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80092c0:	88fb      	ldrh	r3, [r7, #6]
 80092c2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80092ca:	b2db      	uxtb	r3, r3
 80092cc:	2b01      	cmp	r3, #1
 80092ce:	d002      	beq.n	80092d6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80092d0:	2302      	movs	r3, #2
 80092d2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80092d4:	e135      	b.n	8009542 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d002      	beq.n	80092e2 <HAL_SPI_Transmit+0x52>
 80092dc:	88fb      	ldrh	r3, [r7, #6]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d102      	bne.n	80092e8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80092e2:	2301      	movs	r3, #1
 80092e4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80092e6:	e12c      	b.n	8009542 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	2203      	movs	r2, #3
 80092ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	2200      	movs	r2, #0
 80092f4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	68ba      	ldr	r2, [r7, #8]
 80092fa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	88fa      	ldrh	r2, [r7, #6]
 8009300:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	88fa      	ldrh	r2, [r7, #6]
 8009306:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	2200      	movs	r2, #0
 800930c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	2200      	movs	r2, #0
 8009312:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	2200      	movs	r2, #0
 800931a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	2200      	movs	r2, #0
 8009322:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	2200      	movs	r2, #0
 8009328:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	689b      	ldr	r3, [r3, #8]
 800932e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009332:	d107      	bne.n	8009344 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	681a      	ldr	r2, [r3, #0]
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009342:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800934e:	2b40      	cmp	r3, #64	; 0x40
 8009350:	d007      	beq.n	8009362 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	681a      	ldr	r2, [r3, #0]
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009360:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	68db      	ldr	r3, [r3, #12]
 8009366:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800936a:	d94b      	bls.n	8009404 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	685b      	ldr	r3, [r3, #4]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d002      	beq.n	800937a <HAL_SPI_Transmit+0xea>
 8009374:	8afb      	ldrh	r3, [r7, #22]
 8009376:	2b01      	cmp	r3, #1
 8009378:	d13e      	bne.n	80093f8 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800937e:	881a      	ldrh	r2, [r3, #0]
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800938a:	1c9a      	adds	r2, r3, #2
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009394:	b29b      	uxth	r3, r3
 8009396:	3b01      	subs	r3, #1
 8009398:	b29a      	uxth	r2, r3
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800939e:	e02b      	b.n	80093f8 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	689b      	ldr	r3, [r3, #8]
 80093a6:	f003 0302 	and.w	r3, r3, #2
 80093aa:	2b02      	cmp	r3, #2
 80093ac:	d112      	bne.n	80093d4 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093b2:	881a      	ldrh	r2, [r3, #0]
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093be:	1c9a      	adds	r2, r3, #2
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80093c8:	b29b      	uxth	r3, r3
 80093ca:	3b01      	subs	r3, #1
 80093cc:	b29a      	uxth	r2, r3
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80093d2:	e011      	b.n	80093f8 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80093d4:	f7fc f9c2 	bl	800575c <HAL_GetTick>
 80093d8:	4602      	mov	r2, r0
 80093da:	69bb      	ldr	r3, [r7, #24]
 80093dc:	1ad3      	subs	r3, r2, r3
 80093de:	683a      	ldr	r2, [r7, #0]
 80093e0:	429a      	cmp	r2, r3
 80093e2:	d803      	bhi.n	80093ec <HAL_SPI_Transmit+0x15c>
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80093ea:	d102      	bne.n	80093f2 <HAL_SPI_Transmit+0x162>
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d102      	bne.n	80093f8 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 80093f2:	2303      	movs	r3, #3
 80093f4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80093f6:	e0a4      	b.n	8009542 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80093fc:	b29b      	uxth	r3, r3
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d1ce      	bne.n	80093a0 <HAL_SPI_Transmit+0x110>
 8009402:	e07c      	b.n	80094fe <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	685b      	ldr	r3, [r3, #4]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d002      	beq.n	8009412 <HAL_SPI_Transmit+0x182>
 800940c:	8afb      	ldrh	r3, [r7, #22]
 800940e:	2b01      	cmp	r3, #1
 8009410:	d170      	bne.n	80094f4 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009416:	b29b      	uxth	r3, r3
 8009418:	2b01      	cmp	r3, #1
 800941a:	d912      	bls.n	8009442 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009420:	881a      	ldrh	r2, [r3, #0]
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800942c:	1c9a      	adds	r2, r3, #2
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009436:	b29b      	uxth	r3, r3
 8009438:	3b02      	subs	r3, #2
 800943a:	b29a      	uxth	r2, r3
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009440:	e058      	b.n	80094f4 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	330c      	adds	r3, #12
 800944c:	7812      	ldrb	r2, [r2, #0]
 800944e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009454:	1c5a      	adds	r2, r3, #1
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800945e:	b29b      	uxth	r3, r3
 8009460:	3b01      	subs	r3, #1
 8009462:	b29a      	uxth	r2, r3
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8009468:	e044      	b.n	80094f4 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	689b      	ldr	r3, [r3, #8]
 8009470:	f003 0302 	and.w	r3, r3, #2
 8009474:	2b02      	cmp	r3, #2
 8009476:	d12b      	bne.n	80094d0 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800947c:	b29b      	uxth	r3, r3
 800947e:	2b01      	cmp	r3, #1
 8009480:	d912      	bls.n	80094a8 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009486:	881a      	ldrh	r2, [r3, #0]
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009492:	1c9a      	adds	r2, r3, #2
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800949c:	b29b      	uxth	r3, r3
 800949e:	3b02      	subs	r3, #2
 80094a0:	b29a      	uxth	r2, r3
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80094a6:	e025      	b.n	80094f4 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	330c      	adds	r3, #12
 80094b2:	7812      	ldrb	r2, [r2, #0]
 80094b4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094ba:	1c5a      	adds	r2, r3, #1
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80094c4:	b29b      	uxth	r3, r3
 80094c6:	3b01      	subs	r3, #1
 80094c8:	b29a      	uxth	r2, r3
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80094ce:	e011      	b.n	80094f4 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80094d0:	f7fc f944 	bl	800575c <HAL_GetTick>
 80094d4:	4602      	mov	r2, r0
 80094d6:	69bb      	ldr	r3, [r7, #24]
 80094d8:	1ad3      	subs	r3, r2, r3
 80094da:	683a      	ldr	r2, [r7, #0]
 80094dc:	429a      	cmp	r2, r3
 80094de:	d803      	bhi.n	80094e8 <HAL_SPI_Transmit+0x258>
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80094e6:	d102      	bne.n	80094ee <HAL_SPI_Transmit+0x25e>
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d102      	bne.n	80094f4 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 80094ee:	2303      	movs	r3, #3
 80094f0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80094f2:	e026      	b.n	8009542 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80094f8:	b29b      	uxth	r3, r3
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d1b5      	bne.n	800946a <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80094fe:	69ba      	ldr	r2, [r7, #24]
 8009500:	6839      	ldr	r1, [r7, #0]
 8009502:	68f8      	ldr	r0, [r7, #12]
 8009504:	f000 f901 	bl	800970a <SPI_EndRxTxTransaction>
 8009508:	4603      	mov	r3, r0
 800950a:	2b00      	cmp	r3, #0
 800950c:	d002      	beq.n	8009514 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	2220      	movs	r2, #32
 8009512:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	689b      	ldr	r3, [r3, #8]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d10a      	bne.n	8009532 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800951c:	2300      	movs	r3, #0
 800951e:	613b      	str	r3, [r7, #16]
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	68db      	ldr	r3, [r3, #12]
 8009526:	613b      	str	r3, [r7, #16]
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	689b      	ldr	r3, [r3, #8]
 800952e:	613b      	str	r3, [r7, #16]
 8009530:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009536:	2b00      	cmp	r3, #0
 8009538:	d002      	beq.n	8009540 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 800953a:	2301      	movs	r3, #1
 800953c:	77fb      	strb	r3, [r7, #31]
 800953e:	e000      	b.n	8009542 <HAL_SPI_Transmit+0x2b2>
  }

error:
 8009540:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	2201      	movs	r2, #1
 8009546:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	2200      	movs	r2, #0
 800954e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009552:	7ffb      	ldrb	r3, [r7, #31]
}
 8009554:	4618      	mov	r0, r3
 8009556:	3720      	adds	r7, #32
 8009558:	46bd      	mov	sp, r7
 800955a:	bd80      	pop	{r7, pc}

0800955c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b084      	sub	sp, #16
 8009560:	af00      	add	r7, sp, #0
 8009562:	60f8      	str	r0, [r7, #12]
 8009564:	60b9      	str	r1, [r7, #8]
 8009566:	603b      	str	r3, [r7, #0]
 8009568:	4613      	mov	r3, r2
 800956a:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800956c:	e04c      	b.n	8009608 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009574:	d048      	beq.n	8009608 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8009576:	f7fc f8f1 	bl	800575c <HAL_GetTick>
 800957a:	4602      	mov	r2, r0
 800957c:	69bb      	ldr	r3, [r7, #24]
 800957e:	1ad3      	subs	r3, r2, r3
 8009580:	683a      	ldr	r2, [r7, #0]
 8009582:	429a      	cmp	r2, r3
 8009584:	d902      	bls.n	800958c <SPI_WaitFlagStateUntilTimeout+0x30>
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d13d      	bne.n	8009608 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	685a      	ldr	r2, [r3, #4]
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800959a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	685b      	ldr	r3, [r3, #4]
 80095a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80095a4:	d111      	bne.n	80095ca <SPI_WaitFlagStateUntilTimeout+0x6e>
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	689b      	ldr	r3, [r3, #8]
 80095aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80095ae:	d004      	beq.n	80095ba <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	689b      	ldr	r3, [r3, #8]
 80095b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80095b8:	d107      	bne.n	80095ca <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	681a      	ldr	r2, [r3, #0]
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80095c8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80095d2:	d10f      	bne.n	80095f4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	681a      	ldr	r2, [r3, #0]
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80095e2:	601a      	str	r2, [r3, #0]
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	681a      	ldr	r2, [r3, #0]
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80095f2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	2201      	movs	r2, #1
 80095f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	2200      	movs	r2, #0
 8009600:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009604:	2303      	movs	r3, #3
 8009606:	e00f      	b.n	8009628 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	689a      	ldr	r2, [r3, #8]
 800960e:	68bb      	ldr	r3, [r7, #8]
 8009610:	4013      	ands	r3, r2
 8009612:	68ba      	ldr	r2, [r7, #8]
 8009614:	429a      	cmp	r2, r3
 8009616:	bf0c      	ite	eq
 8009618:	2301      	moveq	r3, #1
 800961a:	2300      	movne	r3, #0
 800961c:	b2db      	uxtb	r3, r3
 800961e:	461a      	mov	r2, r3
 8009620:	79fb      	ldrb	r3, [r7, #7]
 8009622:	429a      	cmp	r2, r3
 8009624:	d1a3      	bne.n	800956e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8009626:	2300      	movs	r3, #0
}
 8009628:	4618      	mov	r0, r3
 800962a:	3710      	adds	r7, #16
 800962c:	46bd      	mov	sp, r7
 800962e:	bd80      	pop	{r7, pc}

08009630 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b084      	sub	sp, #16
 8009634:	af00      	add	r7, sp, #0
 8009636:	60f8      	str	r0, [r7, #12]
 8009638:	60b9      	str	r1, [r7, #8]
 800963a:	607a      	str	r2, [r7, #4]
 800963c:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800963e:	e057      	b.n	80096f0 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009646:	d106      	bne.n	8009656 <SPI_WaitFifoStateUntilTimeout+0x26>
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d103      	bne.n	8009656 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	330c      	adds	r3, #12
 8009654:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800965c:	d048      	beq.n	80096f0 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800965e:	f7fc f87d 	bl	800575c <HAL_GetTick>
 8009662:	4602      	mov	r2, r0
 8009664:	69bb      	ldr	r3, [r7, #24]
 8009666:	1ad3      	subs	r3, r2, r3
 8009668:	683a      	ldr	r2, [r7, #0]
 800966a:	429a      	cmp	r2, r3
 800966c:	d902      	bls.n	8009674 <SPI_WaitFifoStateUntilTimeout+0x44>
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d13d      	bne.n	80096f0 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	685a      	ldr	r2, [r3, #4]
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009682:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	685b      	ldr	r3, [r3, #4]
 8009688:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800968c:	d111      	bne.n	80096b2 <SPI_WaitFifoStateUntilTimeout+0x82>
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	689b      	ldr	r3, [r3, #8]
 8009692:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009696:	d004      	beq.n	80096a2 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	689b      	ldr	r3, [r3, #8]
 800969c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80096a0:	d107      	bne.n	80096b2 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	681a      	ldr	r2, [r3, #0]
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80096b0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80096ba:	d10f      	bne.n	80096dc <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	681a      	ldr	r2, [r3, #0]
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80096ca:	601a      	str	r2, [r3, #0]
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	681a      	ldr	r2, [r3, #0]
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80096da:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	2201      	movs	r2, #1
 80096e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	2200      	movs	r2, #0
 80096e8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80096ec:	2303      	movs	r3, #3
 80096ee:	e008      	b.n	8009702 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	689a      	ldr	r2, [r3, #8]
 80096f6:	68bb      	ldr	r3, [r7, #8]
 80096f8:	4013      	ands	r3, r2
 80096fa:	687a      	ldr	r2, [r7, #4]
 80096fc:	429a      	cmp	r2, r3
 80096fe:	d19f      	bne.n	8009640 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8009700:	2300      	movs	r3, #0
}
 8009702:	4618      	mov	r0, r3
 8009704:	3710      	adds	r7, #16
 8009706:	46bd      	mov	sp, r7
 8009708:	bd80      	pop	{r7, pc}

0800970a <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800970a:	b580      	push	{r7, lr}
 800970c:	b086      	sub	sp, #24
 800970e:	af02      	add	r7, sp, #8
 8009710:	60f8      	str	r0, [r7, #12]
 8009712:	60b9      	str	r1, [r7, #8]
 8009714:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	9300      	str	r3, [sp, #0]
 800971a:	68bb      	ldr	r3, [r7, #8]
 800971c:	2200      	movs	r2, #0
 800971e:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8009722:	68f8      	ldr	r0, [r7, #12]
 8009724:	f7ff ff84 	bl	8009630 <SPI_WaitFifoStateUntilTimeout>
 8009728:	4603      	mov	r3, r0
 800972a:	2b00      	cmp	r3, #0
 800972c:	d007      	beq.n	800973e <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009732:	f043 0220 	orr.w	r2, r3, #32
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800973a:	2303      	movs	r3, #3
 800973c:	e027      	b.n	800978e <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	9300      	str	r3, [sp, #0]
 8009742:	68bb      	ldr	r3, [r7, #8]
 8009744:	2200      	movs	r2, #0
 8009746:	2180      	movs	r1, #128	; 0x80
 8009748:	68f8      	ldr	r0, [r7, #12]
 800974a:	f7ff ff07 	bl	800955c <SPI_WaitFlagStateUntilTimeout>
 800974e:	4603      	mov	r3, r0
 8009750:	2b00      	cmp	r3, #0
 8009752:	d007      	beq.n	8009764 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009758:	f043 0220 	orr.w	r2, r3, #32
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009760:	2303      	movs	r3, #3
 8009762:	e014      	b.n	800978e <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	9300      	str	r3, [sp, #0]
 8009768:	68bb      	ldr	r3, [r7, #8]
 800976a:	2200      	movs	r2, #0
 800976c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009770:	68f8      	ldr	r0, [r7, #12]
 8009772:	f7ff ff5d 	bl	8009630 <SPI_WaitFifoStateUntilTimeout>
 8009776:	4603      	mov	r3, r0
 8009778:	2b00      	cmp	r3, #0
 800977a:	d007      	beq.n	800978c <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009780:	f043 0220 	orr.w	r2, r3, #32
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009788:	2303      	movs	r3, #3
 800978a:	e000      	b.n	800978e <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800978c:	2300      	movs	r3, #0
}
 800978e:	4618      	mov	r0, r3
 8009790:	3710      	adds	r7, #16
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}

08009796 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009796:	b580      	push	{r7, lr}
 8009798:	b082      	sub	sp, #8
 800979a:	af00      	add	r7, sp, #0
 800979c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d101      	bne.n	80097a8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80097a4:	2301      	movs	r3, #1
 80097a6:	e049      	b.n	800983c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097ae:	b2db      	uxtb	r3, r3
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d106      	bne.n	80097c2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2200      	movs	r2, #0
 80097b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80097bc:	6878      	ldr	r0, [r7, #4]
 80097be:	f7fb fe7b 	bl	80054b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2202      	movs	r2, #2
 80097c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681a      	ldr	r2, [r3, #0]
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	3304      	adds	r3, #4
 80097d2:	4619      	mov	r1, r3
 80097d4:	4610      	mov	r0, r2
 80097d6:	f000 fc51 	bl	800a07c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	2201      	movs	r2, #1
 80097de:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2201      	movs	r2, #1
 80097e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	2201      	movs	r2, #1
 80097ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	2201      	movs	r2, #1
 80097f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2201      	movs	r2, #1
 80097fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	2201      	movs	r2, #1
 8009806:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	2201      	movs	r2, #1
 800980e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2201      	movs	r2, #1
 8009816:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	2201      	movs	r2, #1
 800981e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2201      	movs	r2, #1
 8009826:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	2201      	movs	r2, #1
 800982e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	2201      	movs	r2, #1
 8009836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800983a:	2300      	movs	r3, #0
}
 800983c:	4618      	mov	r0, r3
 800983e:	3708      	adds	r7, #8
 8009840:	46bd      	mov	sp, r7
 8009842:	bd80      	pop	{r7, pc}

08009844 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009844:	b480      	push	{r7}
 8009846:	b085      	sub	sp, #20
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009852:	b2db      	uxtb	r3, r3
 8009854:	2b01      	cmp	r3, #1
 8009856:	d001      	beq.n	800985c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009858:	2301      	movs	r3, #1
 800985a:	e019      	b.n	8009890 <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2202      	movs	r2, #2
 8009860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	689a      	ldr	r2, [r3, #8]
 800986a:	4b0c      	ldr	r3, [pc, #48]	; (800989c <HAL_TIM_Base_Start+0x58>)
 800986c:	4013      	ands	r3, r2
 800986e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	2b06      	cmp	r3, #6
 8009874:	d00b      	beq.n	800988e <HAL_TIM_Base_Start+0x4a>
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800987c:	d007      	beq.n	800988e <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	681a      	ldr	r2, [r3, #0]
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	f042 0201 	orr.w	r2, r2, #1
 800988c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800988e:	2300      	movs	r3, #0
}
 8009890:	4618      	mov	r0, r3
 8009892:	3714      	adds	r7, #20
 8009894:	46bd      	mov	sp, r7
 8009896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989a:	4770      	bx	lr
 800989c:	00010007 	.word	0x00010007

080098a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80098a0:	b480      	push	{r7}
 80098a2:	b085      	sub	sp, #20
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098ae:	b2db      	uxtb	r3, r3
 80098b0:	2b01      	cmp	r3, #1
 80098b2:	d001      	beq.n	80098b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80098b4:	2301      	movs	r3, #1
 80098b6:	e021      	b.n	80098fc <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2202      	movs	r2, #2
 80098bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	68da      	ldr	r2, [r3, #12]
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	f042 0201 	orr.w	r2, r2, #1
 80098ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	689a      	ldr	r2, [r3, #8]
 80098d6:	4b0c      	ldr	r3, [pc, #48]	; (8009908 <HAL_TIM_Base_Start_IT+0x68>)
 80098d8:	4013      	ands	r3, r2
 80098da:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	2b06      	cmp	r3, #6
 80098e0:	d00b      	beq.n	80098fa <HAL_TIM_Base_Start_IT+0x5a>
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80098e8:	d007      	beq.n	80098fa <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	681a      	ldr	r2, [r3, #0]
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f042 0201 	orr.w	r2, r2, #1
 80098f8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80098fa:	2300      	movs	r3, #0
}
 80098fc:	4618      	mov	r0, r3
 80098fe:	3714      	adds	r7, #20
 8009900:	46bd      	mov	sp, r7
 8009902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009906:	4770      	bx	lr
 8009908:	00010007 	.word	0x00010007

0800990c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800990c:	b480      	push	{r7}
 800990e:	b083      	sub	sp, #12
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	68da      	ldr	r2, [r3, #12]
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	f022 0201 	bic.w	r2, r2, #1
 8009922:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	6a1a      	ldr	r2, [r3, #32]
 800992a:	f241 1311 	movw	r3, #4369	; 0x1111
 800992e:	4013      	ands	r3, r2
 8009930:	2b00      	cmp	r3, #0
 8009932:	d10f      	bne.n	8009954 <HAL_TIM_Base_Stop_IT+0x48>
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	6a1a      	ldr	r2, [r3, #32]
 800993a:	f244 4344 	movw	r3, #17476	; 0x4444
 800993e:	4013      	ands	r3, r2
 8009940:	2b00      	cmp	r3, #0
 8009942:	d107      	bne.n	8009954 <HAL_TIM_Base_Stop_IT+0x48>
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	681a      	ldr	r2, [r3, #0]
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	f022 0201 	bic.w	r2, r2, #1
 8009952:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2201      	movs	r2, #1
 8009958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800995c:	2300      	movs	r3, #0
}
 800995e:	4618      	mov	r0, r3
 8009960:	370c      	adds	r7, #12
 8009962:	46bd      	mov	sp, r7
 8009964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009968:	4770      	bx	lr

0800996a <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800996a:	b580      	push	{r7, lr}
 800996c:	b086      	sub	sp, #24
 800996e:	af00      	add	r7, sp, #0
 8009970:	6078      	str	r0, [r7, #4]
 8009972:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d101      	bne.n	800997e <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800997a:	2301      	movs	r3, #1
 800997c:	e097      	b.n	8009aae <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009984:	b2db      	uxtb	r3, r3
 8009986:	2b00      	cmp	r3, #0
 8009988:	d106      	bne.n	8009998 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2200      	movs	r2, #0
 800998e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f7fb fd34 	bl	8005400 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2202      	movs	r2, #2
 800999c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	689b      	ldr	r3, [r3, #8]
 80099a6:	687a      	ldr	r2, [r7, #4]
 80099a8:	6812      	ldr	r2, [r2, #0]
 80099aa:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80099ae:	f023 0307 	bic.w	r3, r3, #7
 80099b2:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681a      	ldr	r2, [r3, #0]
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	3304      	adds	r3, #4
 80099bc:	4619      	mov	r1, r3
 80099be:	4610      	mov	r0, r2
 80099c0:	f000 fb5c 	bl	800a07c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	689b      	ldr	r3, [r3, #8]
 80099ca:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	699b      	ldr	r3, [r3, #24]
 80099d2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	6a1b      	ldr	r3, [r3, #32]
 80099da:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	697a      	ldr	r2, [r7, #20]
 80099e2:	4313      	orrs	r3, r2
 80099e4:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80099e6:	693b      	ldr	r3, [r7, #16]
 80099e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80099ec:	f023 0303 	bic.w	r3, r3, #3
 80099f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	689a      	ldr	r2, [r3, #8]
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	699b      	ldr	r3, [r3, #24]
 80099fa:	021b      	lsls	r3, r3, #8
 80099fc:	4313      	orrs	r3, r2
 80099fe:	693a      	ldr	r2, [r7, #16]
 8009a00:	4313      	orrs	r3, r2
 8009a02:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009a04:	693b      	ldr	r3, [r7, #16]
 8009a06:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8009a0a:	f023 030c 	bic.w	r3, r3, #12
 8009a0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009a10:	693b      	ldr	r3, [r7, #16]
 8009a12:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009a16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009a1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	68da      	ldr	r2, [r3, #12]
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	69db      	ldr	r3, [r3, #28]
 8009a24:	021b      	lsls	r3, r3, #8
 8009a26:	4313      	orrs	r3, r2
 8009a28:	693a      	ldr	r2, [r7, #16]
 8009a2a:	4313      	orrs	r3, r2
 8009a2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009a2e:	683b      	ldr	r3, [r7, #0]
 8009a30:	691b      	ldr	r3, [r3, #16]
 8009a32:	011a      	lsls	r2, r3, #4
 8009a34:	683b      	ldr	r3, [r7, #0]
 8009a36:	6a1b      	ldr	r3, [r3, #32]
 8009a38:	031b      	lsls	r3, r3, #12
 8009a3a:	4313      	orrs	r3, r2
 8009a3c:	693a      	ldr	r2, [r7, #16]
 8009a3e:	4313      	orrs	r3, r2
 8009a40:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8009a48:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8009a50:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	685a      	ldr	r2, [r3, #4]
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	695b      	ldr	r3, [r3, #20]
 8009a5a:	011b      	lsls	r3, r3, #4
 8009a5c:	4313      	orrs	r3, r2
 8009a5e:	68fa      	ldr	r2, [r7, #12]
 8009a60:	4313      	orrs	r3, r2
 8009a62:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	697a      	ldr	r2, [r7, #20]
 8009a6a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	693a      	ldr	r2, [r7, #16]
 8009a72:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	68fa      	ldr	r2, [r7, #12]
 8009a7a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2201      	movs	r2, #1
 8009a80:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2201      	movs	r2, #1
 8009a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2201      	movs	r2, #1
 8009a90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2201      	movs	r2, #1
 8009a98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2201      	movs	r2, #1
 8009aa0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2201      	movs	r2, #1
 8009aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009aac:	2300      	movs	r3, #0
}
 8009aae:	4618      	mov	r0, r3
 8009ab0:	3718      	adds	r7, #24
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	bd80      	pop	{r7, pc}

08009ab6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009ab6:	b580      	push	{r7, lr}
 8009ab8:	b082      	sub	sp, #8
 8009aba:	af00      	add	r7, sp, #0
 8009abc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	691b      	ldr	r3, [r3, #16]
 8009ac4:	f003 0302 	and.w	r3, r3, #2
 8009ac8:	2b02      	cmp	r3, #2
 8009aca:	d122      	bne.n	8009b12 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	68db      	ldr	r3, [r3, #12]
 8009ad2:	f003 0302 	and.w	r3, r3, #2
 8009ad6:	2b02      	cmp	r3, #2
 8009ad8:	d11b      	bne.n	8009b12 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f06f 0202 	mvn.w	r2, #2
 8009ae2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2201      	movs	r2, #1
 8009ae8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	699b      	ldr	r3, [r3, #24]
 8009af0:	f003 0303 	and.w	r3, r3, #3
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d003      	beq.n	8009b00 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009af8:	6878      	ldr	r0, [r7, #4]
 8009afa:	f000 faa1 	bl	800a040 <HAL_TIM_IC_CaptureCallback>
 8009afe:	e005      	b.n	8009b0c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b00:	6878      	ldr	r0, [r7, #4]
 8009b02:	f000 fa93 	bl	800a02c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b06:	6878      	ldr	r0, [r7, #4]
 8009b08:	f000 faa4 	bl	800a054 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2200      	movs	r2, #0
 8009b10:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	691b      	ldr	r3, [r3, #16]
 8009b18:	f003 0304 	and.w	r3, r3, #4
 8009b1c:	2b04      	cmp	r3, #4
 8009b1e:	d122      	bne.n	8009b66 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	68db      	ldr	r3, [r3, #12]
 8009b26:	f003 0304 	and.w	r3, r3, #4
 8009b2a:	2b04      	cmp	r3, #4
 8009b2c:	d11b      	bne.n	8009b66 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	f06f 0204 	mvn.w	r2, #4
 8009b36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2202      	movs	r2, #2
 8009b3c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	699b      	ldr	r3, [r3, #24]
 8009b44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d003      	beq.n	8009b54 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b4c:	6878      	ldr	r0, [r7, #4]
 8009b4e:	f000 fa77 	bl	800a040 <HAL_TIM_IC_CaptureCallback>
 8009b52:	e005      	b.n	8009b60 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b54:	6878      	ldr	r0, [r7, #4]
 8009b56:	f000 fa69 	bl	800a02c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b5a:	6878      	ldr	r0, [r7, #4]
 8009b5c:	f000 fa7a 	bl	800a054 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2200      	movs	r2, #0
 8009b64:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	691b      	ldr	r3, [r3, #16]
 8009b6c:	f003 0308 	and.w	r3, r3, #8
 8009b70:	2b08      	cmp	r3, #8
 8009b72:	d122      	bne.n	8009bba <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	68db      	ldr	r3, [r3, #12]
 8009b7a:	f003 0308 	and.w	r3, r3, #8
 8009b7e:	2b08      	cmp	r3, #8
 8009b80:	d11b      	bne.n	8009bba <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	f06f 0208 	mvn.w	r2, #8
 8009b8a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2204      	movs	r2, #4
 8009b90:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	69db      	ldr	r3, [r3, #28]
 8009b98:	f003 0303 	and.w	r3, r3, #3
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d003      	beq.n	8009ba8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009ba0:	6878      	ldr	r0, [r7, #4]
 8009ba2:	f000 fa4d 	bl	800a040 <HAL_TIM_IC_CaptureCallback>
 8009ba6:	e005      	b.n	8009bb4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ba8:	6878      	ldr	r0, [r7, #4]
 8009baa:	f000 fa3f 	bl	800a02c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009bae:	6878      	ldr	r0, [r7, #4]
 8009bb0:	f000 fa50 	bl	800a054 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	691b      	ldr	r3, [r3, #16]
 8009bc0:	f003 0310 	and.w	r3, r3, #16
 8009bc4:	2b10      	cmp	r3, #16
 8009bc6:	d122      	bne.n	8009c0e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	68db      	ldr	r3, [r3, #12]
 8009bce:	f003 0310 	and.w	r3, r3, #16
 8009bd2:	2b10      	cmp	r3, #16
 8009bd4:	d11b      	bne.n	8009c0e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	f06f 0210 	mvn.w	r2, #16
 8009bde:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2208      	movs	r2, #8
 8009be4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	69db      	ldr	r3, [r3, #28]
 8009bec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d003      	beq.n	8009bfc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009bf4:	6878      	ldr	r0, [r7, #4]
 8009bf6:	f000 fa23 	bl	800a040 <HAL_TIM_IC_CaptureCallback>
 8009bfa:	e005      	b.n	8009c08 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009bfc:	6878      	ldr	r0, [r7, #4]
 8009bfe:	f000 fa15 	bl	800a02c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f000 fa26 	bl	800a054 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	691b      	ldr	r3, [r3, #16]
 8009c14:	f003 0301 	and.w	r3, r3, #1
 8009c18:	2b01      	cmp	r3, #1
 8009c1a:	d10e      	bne.n	8009c3a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	68db      	ldr	r3, [r3, #12]
 8009c22:	f003 0301 	and.w	r3, r3, #1
 8009c26:	2b01      	cmp	r3, #1
 8009c28:	d107      	bne.n	8009c3a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	f06f 0201 	mvn.w	r2, #1
 8009c32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009c34:	6878      	ldr	r0, [r7, #4]
 8009c36:	f000 f9ef 	bl	800a018 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	691b      	ldr	r3, [r3, #16]
 8009c40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c44:	2b80      	cmp	r3, #128	; 0x80
 8009c46:	d10e      	bne.n	8009c66 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	68db      	ldr	r3, [r3, #12]
 8009c4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c52:	2b80      	cmp	r3, #128	; 0x80
 8009c54:	d107      	bne.n	8009c66 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009c5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009c60:	6878      	ldr	r0, [r7, #4]
 8009c62:	f000 fd5d 	bl	800a720 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	691b      	ldr	r3, [r3, #16]
 8009c6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c74:	d10e      	bne.n	8009c94 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	68db      	ldr	r3, [r3, #12]
 8009c7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c80:	2b80      	cmp	r3, #128	; 0x80
 8009c82:	d107      	bne.n	8009c94 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009c8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009c8e:	6878      	ldr	r0, [r7, #4]
 8009c90:	f000 fd50 	bl	800a734 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	691b      	ldr	r3, [r3, #16]
 8009c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c9e:	2b40      	cmp	r3, #64	; 0x40
 8009ca0:	d10e      	bne.n	8009cc0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	68db      	ldr	r3, [r3, #12]
 8009ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cac:	2b40      	cmp	r3, #64	; 0x40
 8009cae:	d107      	bne.n	8009cc0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009cb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009cba:	6878      	ldr	r0, [r7, #4]
 8009cbc:	f000 f9d4 	bl	800a068 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	691b      	ldr	r3, [r3, #16]
 8009cc6:	f003 0320 	and.w	r3, r3, #32
 8009cca:	2b20      	cmp	r3, #32
 8009ccc:	d10e      	bne.n	8009cec <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	68db      	ldr	r3, [r3, #12]
 8009cd4:	f003 0320 	and.w	r3, r3, #32
 8009cd8:	2b20      	cmp	r3, #32
 8009cda:	d107      	bne.n	8009cec <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	f06f 0220 	mvn.w	r2, #32
 8009ce4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009ce6:	6878      	ldr	r0, [r7, #4]
 8009ce8:	f000 fd10 	bl	800a70c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	691b      	ldr	r3, [r3, #16]
 8009cf2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009cf6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009cfa:	d10f      	bne.n	8009d1c <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	68db      	ldr	r3, [r3, #12]
 8009d02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009d06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009d0a:	d107      	bne.n	8009d1c <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8009d14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8009d16:	6878      	ldr	r0, [r7, #4]
 8009d18:	f000 fd16 	bl	800a748 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	691b      	ldr	r3, [r3, #16]
 8009d22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009d26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009d2a:	d10f      	bne.n	8009d4c <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	68db      	ldr	r3, [r3, #12]
 8009d32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009d36:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009d3a:	d107      	bne.n	8009d4c <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8009d44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8009d46:	6878      	ldr	r0, [r7, #4]
 8009d48:	f000 fd08 	bl	800a75c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	691b      	ldr	r3, [r3, #16]
 8009d52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009d56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009d5a:	d10f      	bne.n	8009d7c <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	68db      	ldr	r3, [r3, #12]
 8009d62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009d66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009d6a:	d107      	bne.n	8009d7c <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8009d74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	f000 fcfa 	bl	800a770 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	691b      	ldr	r3, [r3, #16]
 8009d82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009d86:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009d8a:	d10f      	bne.n	8009dac <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	68db      	ldr	r3, [r3, #12]
 8009d92:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009d96:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009d9a:	d107      	bne.n	8009dac <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8009da4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8009da6:	6878      	ldr	r0, [r7, #4]
 8009da8:	f000 fcec 	bl	800a784 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009dac:	bf00      	nop
 8009dae:	3708      	adds	r7, #8
 8009db0:	46bd      	mov	sp, r7
 8009db2:	bd80      	pop	{r7, pc}

08009db4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b084      	sub	sp, #16
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
 8009dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009dc4:	2b01      	cmp	r3, #1
 8009dc6:	d101      	bne.n	8009dcc <HAL_TIM_ConfigClockSource+0x18>
 8009dc8:	2302      	movs	r3, #2
 8009dca:	e0d2      	b.n	8009f72 <HAL_TIM_ConfigClockSource+0x1be>
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2201      	movs	r2, #1
 8009dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2202      	movs	r2, #2
 8009dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	689b      	ldr	r3, [r3, #8]
 8009de2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8009dea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009dee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009df6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	68fa      	ldr	r2, [r7, #12]
 8009dfe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e08:	f000 80a9 	beq.w	8009f5e <HAL_TIM_ConfigClockSource+0x1aa>
 8009e0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e10:	d81a      	bhi.n	8009e48 <HAL_TIM_ConfigClockSource+0x94>
 8009e12:	2b30      	cmp	r3, #48	; 0x30
 8009e14:	f000 809a 	beq.w	8009f4c <HAL_TIM_ConfigClockSource+0x198>
 8009e18:	2b30      	cmp	r3, #48	; 0x30
 8009e1a:	d809      	bhi.n	8009e30 <HAL_TIM_ConfigClockSource+0x7c>
 8009e1c:	2b10      	cmp	r3, #16
 8009e1e:	f000 8095 	beq.w	8009f4c <HAL_TIM_ConfigClockSource+0x198>
 8009e22:	2b20      	cmp	r3, #32
 8009e24:	f000 8092 	beq.w	8009f4c <HAL_TIM_ConfigClockSource+0x198>
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	f000 808f 	beq.w	8009f4c <HAL_TIM_ConfigClockSource+0x198>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8009e2e:	e097      	b.n	8009f60 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8009e30:	2b50      	cmp	r3, #80	; 0x50
 8009e32:	d05b      	beq.n	8009eec <HAL_TIM_ConfigClockSource+0x138>
 8009e34:	2b50      	cmp	r3, #80	; 0x50
 8009e36:	d802      	bhi.n	8009e3e <HAL_TIM_ConfigClockSource+0x8a>
 8009e38:	2b40      	cmp	r3, #64	; 0x40
 8009e3a:	d077      	beq.n	8009f2c <HAL_TIM_ConfigClockSource+0x178>
      break;
 8009e3c:	e090      	b.n	8009f60 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8009e3e:	2b60      	cmp	r3, #96	; 0x60
 8009e40:	d064      	beq.n	8009f0c <HAL_TIM_ConfigClockSource+0x158>
 8009e42:	2b70      	cmp	r3, #112	; 0x70
 8009e44:	d028      	beq.n	8009e98 <HAL_TIM_ConfigClockSource+0xe4>
      break;
 8009e46:	e08b      	b.n	8009f60 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8009e48:	4a4c      	ldr	r2, [pc, #304]	; (8009f7c <HAL_TIM_ConfigClockSource+0x1c8>)
 8009e4a:	4293      	cmp	r3, r2
 8009e4c:	d07e      	beq.n	8009f4c <HAL_TIM_ConfigClockSource+0x198>
 8009e4e:	4a4b      	ldr	r2, [pc, #300]	; (8009f7c <HAL_TIM_ConfigClockSource+0x1c8>)
 8009e50:	4293      	cmp	r3, r2
 8009e52:	d810      	bhi.n	8009e76 <HAL_TIM_ConfigClockSource+0xc2>
 8009e54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e58:	d078      	beq.n	8009f4c <HAL_TIM_ConfigClockSource+0x198>
 8009e5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e5e:	d803      	bhi.n	8009e68 <HAL_TIM_ConfigClockSource+0xb4>
 8009e60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e64:	d02f      	beq.n	8009ec6 <HAL_TIM_ConfigClockSource+0x112>
      break;
 8009e66:	e07b      	b.n	8009f60 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8009e68:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009e6c:	d06e      	beq.n	8009f4c <HAL_TIM_ConfigClockSource+0x198>
 8009e6e:	4a44      	ldr	r2, [pc, #272]	; (8009f80 <HAL_TIM_ConfigClockSource+0x1cc>)
 8009e70:	4293      	cmp	r3, r2
 8009e72:	d06b      	beq.n	8009f4c <HAL_TIM_ConfigClockSource+0x198>
      break;
 8009e74:	e074      	b.n	8009f60 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8009e76:	4a43      	ldr	r2, [pc, #268]	; (8009f84 <HAL_TIM_ConfigClockSource+0x1d0>)
 8009e78:	4293      	cmp	r3, r2
 8009e7a:	d067      	beq.n	8009f4c <HAL_TIM_ConfigClockSource+0x198>
 8009e7c:	4a41      	ldr	r2, [pc, #260]	; (8009f84 <HAL_TIM_ConfigClockSource+0x1d0>)
 8009e7e:	4293      	cmp	r3, r2
 8009e80:	d803      	bhi.n	8009e8a <HAL_TIM_ConfigClockSource+0xd6>
 8009e82:	4a41      	ldr	r2, [pc, #260]	; (8009f88 <HAL_TIM_ConfigClockSource+0x1d4>)
 8009e84:	4293      	cmp	r3, r2
 8009e86:	d061      	beq.n	8009f4c <HAL_TIM_ConfigClockSource+0x198>
      break;
 8009e88:	e06a      	b.n	8009f60 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8009e8a:	4a40      	ldr	r2, [pc, #256]	; (8009f8c <HAL_TIM_ConfigClockSource+0x1d8>)
 8009e8c:	4293      	cmp	r3, r2
 8009e8e:	d05d      	beq.n	8009f4c <HAL_TIM_ConfigClockSource+0x198>
 8009e90:	4a3f      	ldr	r2, [pc, #252]	; (8009f90 <HAL_TIM_ConfigClockSource+0x1dc>)
 8009e92:	4293      	cmp	r3, r2
 8009e94:	d05a      	beq.n	8009f4c <HAL_TIM_ConfigClockSource+0x198>
      break;
 8009e96:	e063      	b.n	8009f60 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	6818      	ldr	r0, [r3, #0]
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	6899      	ldr	r1, [r3, #8]
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	685a      	ldr	r2, [r3, #4]
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	68db      	ldr	r3, [r3, #12]
 8009ea8:	f000 fac8 	bl	800a43c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	689b      	ldr	r3, [r3, #8]
 8009eb2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009eba:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	68fa      	ldr	r2, [r7, #12]
 8009ec2:	609a      	str	r2, [r3, #8]
      break;
 8009ec4:	e04c      	b.n	8009f60 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	6818      	ldr	r0, [r3, #0]
 8009eca:	683b      	ldr	r3, [r7, #0]
 8009ecc:	6899      	ldr	r1, [r3, #8]
 8009ece:	683b      	ldr	r3, [r7, #0]
 8009ed0:	685a      	ldr	r2, [r3, #4]
 8009ed2:	683b      	ldr	r3, [r7, #0]
 8009ed4:	68db      	ldr	r3, [r3, #12]
 8009ed6:	f000 fab1 	bl	800a43c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	689a      	ldr	r2, [r3, #8]
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009ee8:	609a      	str	r2, [r3, #8]
      break;
 8009eea:	e039      	b.n	8009f60 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	6818      	ldr	r0, [r3, #0]
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	6859      	ldr	r1, [r3, #4]
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	68db      	ldr	r3, [r3, #12]
 8009ef8:	461a      	mov	r2, r3
 8009efa:	f000 fa23 	bl	800a344 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	2150      	movs	r1, #80	; 0x50
 8009f04:	4618      	mov	r0, r3
 8009f06:	f000 fa7c 	bl	800a402 <TIM_ITRx_SetConfig>
      break;
 8009f0a:	e029      	b.n	8009f60 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	6818      	ldr	r0, [r3, #0]
 8009f10:	683b      	ldr	r3, [r7, #0]
 8009f12:	6859      	ldr	r1, [r3, #4]
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	68db      	ldr	r3, [r3, #12]
 8009f18:	461a      	mov	r2, r3
 8009f1a:	f000 fa42 	bl	800a3a2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	2160      	movs	r1, #96	; 0x60
 8009f24:	4618      	mov	r0, r3
 8009f26:	f000 fa6c 	bl	800a402 <TIM_ITRx_SetConfig>
      break;
 8009f2a:	e019      	b.n	8009f60 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	6818      	ldr	r0, [r3, #0]
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	6859      	ldr	r1, [r3, #4]
 8009f34:	683b      	ldr	r3, [r7, #0]
 8009f36:	68db      	ldr	r3, [r3, #12]
 8009f38:	461a      	mov	r2, r3
 8009f3a:	f000 fa03 	bl	800a344 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	2140      	movs	r1, #64	; 0x40
 8009f44:	4618      	mov	r0, r3
 8009f46:	f000 fa5c 	bl	800a402 <TIM_ITRx_SetConfig>
      break;
 8009f4a:	e009      	b.n	8009f60 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681a      	ldr	r2, [r3, #0]
 8009f50:	683b      	ldr	r3, [r7, #0]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	4619      	mov	r1, r3
 8009f56:	4610      	mov	r0, r2
 8009f58:	f000 fa53 	bl	800a402 <TIM_ITRx_SetConfig>
      break;
 8009f5c:	e000      	b.n	8009f60 <HAL_TIM_ConfigClockSource+0x1ac>
      break;
 8009f5e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2201      	movs	r2, #1
 8009f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009f70:	2300      	movs	r3, #0
}
 8009f72:	4618      	mov	r0, r3
 8009f74:	3710      	adds	r7, #16
 8009f76:	46bd      	mov	sp, r7
 8009f78:	bd80      	pop	{r7, pc}
 8009f7a:	bf00      	nop
 8009f7c:	00100030 	.word	0x00100030
 8009f80:	00100020 	.word	0x00100020
 8009f84:	00100050 	.word	0x00100050
 8009f88:	00100040 	.word	0x00100040
 8009f8c:	00100060 	.word	0x00100060
 8009f90:	00100070 	.word	0x00100070

08009f94 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b082      	sub	sp, #8
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
 8009f9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009fa4:	2b01      	cmp	r3, #1
 8009fa6:	d101      	bne.n	8009fac <HAL_TIM_SlaveConfigSynchro+0x18>
 8009fa8:	2302      	movs	r3, #2
 8009faa:	e031      	b.n	800a010 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2201      	movs	r2, #1
 8009fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2202      	movs	r2, #2
 8009fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8009fbc:	6839      	ldr	r1, [r7, #0]
 8009fbe:	6878      	ldr	r0, [r7, #4]
 8009fc0:	f000 f904 	bl	800a1cc <TIM_SlaveTimer_SetConfig>
 8009fc4:	4603      	mov	r3, r0
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d009      	beq.n	8009fde <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	2201      	movs	r2, #1
 8009fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8009fda:	2301      	movs	r3, #1
 8009fdc:	e018      	b.n	800a010 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	68da      	ldr	r2, [r3, #12]
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009fec:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	68da      	ldr	r2, [r3, #12]
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009ffc:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	2201      	movs	r2, #1
 800a002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	2200      	movs	r2, #0
 800a00a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a00e:	2300      	movs	r3, #0
}
 800a010:	4618      	mov	r0, r3
 800a012:	3708      	adds	r7, #8
 800a014:	46bd      	mov	sp, r7
 800a016:	bd80      	pop	{r7, pc}

0800a018 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a018:	b480      	push	{r7}
 800a01a:	b083      	sub	sp, #12
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800a020:	bf00      	nop
 800a022:	370c      	adds	r7, #12
 800a024:	46bd      	mov	sp, r7
 800a026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02a:	4770      	bx	lr

0800a02c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a02c:	b480      	push	{r7}
 800a02e:	b083      	sub	sp, #12
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a034:	bf00      	nop
 800a036:	370c      	adds	r7, #12
 800a038:	46bd      	mov	sp, r7
 800a03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03e:	4770      	bx	lr

0800a040 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a040:	b480      	push	{r7}
 800a042:	b083      	sub	sp, #12
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a048:	bf00      	nop
 800a04a:	370c      	adds	r7, #12
 800a04c:	46bd      	mov	sp, r7
 800a04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a052:	4770      	bx	lr

0800a054 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a054:	b480      	push	{r7}
 800a056:	b083      	sub	sp, #12
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a05c:	bf00      	nop
 800a05e:	370c      	adds	r7, #12
 800a060:	46bd      	mov	sp, r7
 800a062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a066:	4770      	bx	lr

0800a068 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a068:	b480      	push	{r7}
 800a06a:	b083      	sub	sp, #12
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a070:	bf00      	nop
 800a072:	370c      	adds	r7, #12
 800a074:	46bd      	mov	sp, r7
 800a076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07a:	4770      	bx	lr

0800a07c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a07c:	b480      	push	{r7}
 800a07e:	b085      	sub	sp, #20
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]
 800a084:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	4a46      	ldr	r2, [pc, #280]	; (800a1a8 <TIM_Base_SetConfig+0x12c>)
 800a090:	4293      	cmp	r3, r2
 800a092:	d017      	beq.n	800a0c4 <TIM_Base_SetConfig+0x48>
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a09a:	d013      	beq.n	800a0c4 <TIM_Base_SetConfig+0x48>
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	4a43      	ldr	r2, [pc, #268]	; (800a1ac <TIM_Base_SetConfig+0x130>)
 800a0a0:	4293      	cmp	r3, r2
 800a0a2:	d00f      	beq.n	800a0c4 <TIM_Base_SetConfig+0x48>
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	4a42      	ldr	r2, [pc, #264]	; (800a1b0 <TIM_Base_SetConfig+0x134>)
 800a0a8:	4293      	cmp	r3, r2
 800a0aa:	d00b      	beq.n	800a0c4 <TIM_Base_SetConfig+0x48>
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	4a41      	ldr	r2, [pc, #260]	; (800a1b4 <TIM_Base_SetConfig+0x138>)
 800a0b0:	4293      	cmp	r3, r2
 800a0b2:	d007      	beq.n	800a0c4 <TIM_Base_SetConfig+0x48>
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	4a40      	ldr	r2, [pc, #256]	; (800a1b8 <TIM_Base_SetConfig+0x13c>)
 800a0b8:	4293      	cmp	r3, r2
 800a0ba:	d003      	beq.n	800a0c4 <TIM_Base_SetConfig+0x48>
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	4a3f      	ldr	r2, [pc, #252]	; (800a1bc <TIM_Base_SetConfig+0x140>)
 800a0c0:	4293      	cmp	r3, r2
 800a0c2:	d108      	bne.n	800a0d6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	685b      	ldr	r3, [r3, #4]
 800a0d0:	68fa      	ldr	r2, [r7, #12]
 800a0d2:	4313      	orrs	r3, r2
 800a0d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	4a33      	ldr	r2, [pc, #204]	; (800a1a8 <TIM_Base_SetConfig+0x12c>)
 800a0da:	4293      	cmp	r3, r2
 800a0dc:	d023      	beq.n	800a126 <TIM_Base_SetConfig+0xaa>
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a0e4:	d01f      	beq.n	800a126 <TIM_Base_SetConfig+0xaa>
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	4a30      	ldr	r2, [pc, #192]	; (800a1ac <TIM_Base_SetConfig+0x130>)
 800a0ea:	4293      	cmp	r3, r2
 800a0ec:	d01b      	beq.n	800a126 <TIM_Base_SetConfig+0xaa>
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	4a2f      	ldr	r2, [pc, #188]	; (800a1b0 <TIM_Base_SetConfig+0x134>)
 800a0f2:	4293      	cmp	r3, r2
 800a0f4:	d017      	beq.n	800a126 <TIM_Base_SetConfig+0xaa>
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	4a2e      	ldr	r2, [pc, #184]	; (800a1b4 <TIM_Base_SetConfig+0x138>)
 800a0fa:	4293      	cmp	r3, r2
 800a0fc:	d013      	beq.n	800a126 <TIM_Base_SetConfig+0xaa>
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	4a2d      	ldr	r2, [pc, #180]	; (800a1b8 <TIM_Base_SetConfig+0x13c>)
 800a102:	4293      	cmp	r3, r2
 800a104:	d00f      	beq.n	800a126 <TIM_Base_SetConfig+0xaa>
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	4a2d      	ldr	r2, [pc, #180]	; (800a1c0 <TIM_Base_SetConfig+0x144>)
 800a10a:	4293      	cmp	r3, r2
 800a10c:	d00b      	beq.n	800a126 <TIM_Base_SetConfig+0xaa>
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	4a2c      	ldr	r2, [pc, #176]	; (800a1c4 <TIM_Base_SetConfig+0x148>)
 800a112:	4293      	cmp	r3, r2
 800a114:	d007      	beq.n	800a126 <TIM_Base_SetConfig+0xaa>
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	4a2b      	ldr	r2, [pc, #172]	; (800a1c8 <TIM_Base_SetConfig+0x14c>)
 800a11a:	4293      	cmp	r3, r2
 800a11c:	d003      	beq.n	800a126 <TIM_Base_SetConfig+0xaa>
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	4a26      	ldr	r2, [pc, #152]	; (800a1bc <TIM_Base_SetConfig+0x140>)
 800a122:	4293      	cmp	r3, r2
 800a124:	d108      	bne.n	800a138 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a12c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	68db      	ldr	r3, [r3, #12]
 800a132:	68fa      	ldr	r2, [r7, #12]
 800a134:	4313      	orrs	r3, r2
 800a136:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	695b      	ldr	r3, [r3, #20]
 800a142:	4313      	orrs	r3, r2
 800a144:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	68fa      	ldr	r2, [r7, #12]
 800a14a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	689a      	ldr	r2, [r3, #8]
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a154:	683b      	ldr	r3, [r7, #0]
 800a156:	681a      	ldr	r2, [r3, #0]
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	4a12      	ldr	r2, [pc, #72]	; (800a1a8 <TIM_Base_SetConfig+0x12c>)
 800a160:	4293      	cmp	r3, r2
 800a162:	d013      	beq.n	800a18c <TIM_Base_SetConfig+0x110>
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	4a14      	ldr	r2, [pc, #80]	; (800a1b8 <TIM_Base_SetConfig+0x13c>)
 800a168:	4293      	cmp	r3, r2
 800a16a:	d00f      	beq.n	800a18c <TIM_Base_SetConfig+0x110>
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	4a14      	ldr	r2, [pc, #80]	; (800a1c0 <TIM_Base_SetConfig+0x144>)
 800a170:	4293      	cmp	r3, r2
 800a172:	d00b      	beq.n	800a18c <TIM_Base_SetConfig+0x110>
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	4a13      	ldr	r2, [pc, #76]	; (800a1c4 <TIM_Base_SetConfig+0x148>)
 800a178:	4293      	cmp	r3, r2
 800a17a:	d007      	beq.n	800a18c <TIM_Base_SetConfig+0x110>
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	4a12      	ldr	r2, [pc, #72]	; (800a1c8 <TIM_Base_SetConfig+0x14c>)
 800a180:	4293      	cmp	r3, r2
 800a182:	d003      	beq.n	800a18c <TIM_Base_SetConfig+0x110>
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	4a0d      	ldr	r2, [pc, #52]	; (800a1bc <TIM_Base_SetConfig+0x140>)
 800a188:	4293      	cmp	r3, r2
 800a18a:	d103      	bne.n	800a194 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	691a      	ldr	r2, [r3, #16]
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2201      	movs	r2, #1
 800a198:	615a      	str	r2, [r3, #20]
}
 800a19a:	bf00      	nop
 800a19c:	3714      	adds	r7, #20
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a4:	4770      	bx	lr
 800a1a6:	bf00      	nop
 800a1a8:	40012c00 	.word	0x40012c00
 800a1ac:	40000400 	.word	0x40000400
 800a1b0:	40000800 	.word	0x40000800
 800a1b4:	40000c00 	.word	0x40000c00
 800a1b8:	40013400 	.word	0x40013400
 800a1bc:	40015000 	.word	0x40015000
 800a1c0:	40014000 	.word	0x40014000
 800a1c4:	40014400 	.word	0x40014400
 800a1c8:	40014800 	.word	0x40014800

0800a1cc <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b086      	sub	sp, #24
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
 800a1d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	689b      	ldr	r3, [r3, #8]
 800a1dc:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a1de:	697b      	ldr	r3, [r7, #20]
 800a1e0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800a1e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1e8:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800a1ea:	683b      	ldr	r3, [r7, #0]
 800a1ec:	685b      	ldr	r3, [r3, #4]
 800a1ee:	697a      	ldr	r2, [r7, #20]
 800a1f0:	4313      	orrs	r3, r2
 800a1f2:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800a1f4:	697b      	ldr	r3, [r7, #20]
 800a1f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a1fa:	f023 0307 	bic.w	r3, r3, #7
 800a1fe:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800a200:	683b      	ldr	r3, [r7, #0]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	697a      	ldr	r2, [r7, #20]
 800a206:	4313      	orrs	r3, r2
 800a208:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	697a      	ldr	r2, [r7, #20]
 800a210:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	685b      	ldr	r3, [r3, #4]
 800a216:	2b70      	cmp	r3, #112	; 0x70
 800a218:	d034      	beq.n	800a284 <TIM_SlaveTimer_SetConfig+0xb8>
 800a21a:	2b70      	cmp	r3, #112	; 0x70
 800a21c:	d811      	bhi.n	800a242 <TIM_SlaveTimer_SetConfig+0x76>
 800a21e:	2b30      	cmp	r3, #48	; 0x30
 800a220:	d07d      	beq.n	800a31e <TIM_SlaveTimer_SetConfig+0x152>
 800a222:	2b30      	cmp	r3, #48	; 0x30
 800a224:	d806      	bhi.n	800a234 <TIM_SlaveTimer_SetConfig+0x68>
 800a226:	2b10      	cmp	r3, #16
 800a228:	d079      	beq.n	800a31e <TIM_SlaveTimer_SetConfig+0x152>
 800a22a:	2b20      	cmp	r3, #32
 800a22c:	d077      	beq.n	800a31e <TIM_SlaveTimer_SetConfig+0x152>
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d075      	beq.n	800a31e <TIM_SlaveTimer_SetConfig+0x152>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      break;
 800a232:	e075      	b.n	800a320 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 800a234:	2b50      	cmp	r3, #80	; 0x50
 800a236:	d05e      	beq.n	800a2f6 <TIM_SlaveTimer_SetConfig+0x12a>
 800a238:	2b60      	cmp	r3, #96	; 0x60
 800a23a:	d066      	beq.n	800a30a <TIM_SlaveTimer_SetConfig+0x13e>
 800a23c:	2b40      	cmp	r3, #64	; 0x40
 800a23e:	d02c      	beq.n	800a29a <TIM_SlaveTimer_SetConfig+0xce>
      break;
 800a240:	e06e      	b.n	800a320 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 800a242:	4a3a      	ldr	r2, [pc, #232]	; (800a32c <TIM_SlaveTimer_SetConfig+0x160>)
 800a244:	4293      	cmp	r3, r2
 800a246:	d06a      	beq.n	800a31e <TIM_SlaveTimer_SetConfig+0x152>
 800a248:	4a38      	ldr	r2, [pc, #224]	; (800a32c <TIM_SlaveTimer_SetConfig+0x160>)
 800a24a:	4293      	cmp	r3, r2
 800a24c:	d809      	bhi.n	800a262 <TIM_SlaveTimer_SetConfig+0x96>
 800a24e:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a252:	d064      	beq.n	800a31e <TIM_SlaveTimer_SetConfig+0x152>
 800a254:	4a36      	ldr	r2, [pc, #216]	; (800a330 <TIM_SlaveTimer_SetConfig+0x164>)
 800a256:	4293      	cmp	r3, r2
 800a258:	d061      	beq.n	800a31e <TIM_SlaveTimer_SetConfig+0x152>
 800a25a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a25e:	d05e      	beq.n	800a31e <TIM_SlaveTimer_SetConfig+0x152>
      break;
 800a260:	e05e      	b.n	800a320 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 800a262:	4a34      	ldr	r2, [pc, #208]	; (800a334 <TIM_SlaveTimer_SetConfig+0x168>)
 800a264:	4293      	cmp	r3, r2
 800a266:	d05a      	beq.n	800a31e <TIM_SlaveTimer_SetConfig+0x152>
 800a268:	4a32      	ldr	r2, [pc, #200]	; (800a334 <TIM_SlaveTimer_SetConfig+0x168>)
 800a26a:	4293      	cmp	r3, r2
 800a26c:	d803      	bhi.n	800a276 <TIM_SlaveTimer_SetConfig+0xaa>
 800a26e:	4a32      	ldr	r2, [pc, #200]	; (800a338 <TIM_SlaveTimer_SetConfig+0x16c>)
 800a270:	4293      	cmp	r3, r2
 800a272:	d054      	beq.n	800a31e <TIM_SlaveTimer_SetConfig+0x152>
      break;
 800a274:	e054      	b.n	800a320 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 800a276:	4a31      	ldr	r2, [pc, #196]	; (800a33c <TIM_SlaveTimer_SetConfig+0x170>)
 800a278:	4293      	cmp	r3, r2
 800a27a:	d050      	beq.n	800a31e <TIM_SlaveTimer_SetConfig+0x152>
 800a27c:	4a30      	ldr	r2, [pc, #192]	; (800a340 <TIM_SlaveTimer_SetConfig+0x174>)
 800a27e:	4293      	cmp	r3, r2
 800a280:	d04d      	beq.n	800a31e <TIM_SlaveTimer_SetConfig+0x152>
      break;
 800a282:	e04d      	b.n	800a320 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	6818      	ldr	r0, [r3, #0]
 800a288:	683b      	ldr	r3, [r7, #0]
 800a28a:	68d9      	ldr	r1, [r3, #12]
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	689a      	ldr	r2, [r3, #8]
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	691b      	ldr	r3, [r3, #16]
 800a294:	f000 f8d2 	bl	800a43c <TIM_ETR_SetConfig>
      break;
 800a298:	e042      	b.n	800a320 <TIM_SlaveTimer_SetConfig+0x154>
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	2b05      	cmp	r3, #5
 800a2a0:	d004      	beq.n	800a2ac <TIM_SlaveTimer_SetConfig+0xe0>
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 800a2aa:	d101      	bne.n	800a2b0 <TIM_SlaveTimer_SetConfig+0xe4>
        return HAL_ERROR;
 800a2ac:	2301      	movs	r3, #1
 800a2ae:	e038      	b.n	800a322 <TIM_SlaveTimer_SetConfig+0x156>
      tmpccer = htim->Instance->CCER;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	6a1b      	ldr	r3, [r3, #32]
 800a2b6:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	6a1a      	ldr	r2, [r3, #32]
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	f022 0201 	bic.w	r2, r2, #1
 800a2c6:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	699b      	ldr	r3, [r3, #24]
 800a2ce:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a2d6:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	691b      	ldr	r3, [r3, #16]
 800a2dc:	011b      	lsls	r3, r3, #4
 800a2de:	68fa      	ldr	r2, [r7, #12]
 800a2e0:	4313      	orrs	r3, r2
 800a2e2:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	68fa      	ldr	r2, [r7, #12]
 800a2ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	693a      	ldr	r2, [r7, #16]
 800a2f2:	621a      	str	r2, [r3, #32]
      break;
 800a2f4:	e014      	b.n	800a320 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	6818      	ldr	r0, [r3, #0]
 800a2fa:	683b      	ldr	r3, [r7, #0]
 800a2fc:	6899      	ldr	r1, [r3, #8]
 800a2fe:	683b      	ldr	r3, [r7, #0]
 800a300:	691b      	ldr	r3, [r3, #16]
 800a302:	461a      	mov	r2, r3
 800a304:	f000 f81e 	bl	800a344 <TIM_TI1_ConfigInputStage>
      break;
 800a308:	e00a      	b.n	800a320 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	6818      	ldr	r0, [r3, #0]
 800a30e:	683b      	ldr	r3, [r7, #0]
 800a310:	6899      	ldr	r1, [r3, #8]
 800a312:	683b      	ldr	r3, [r7, #0]
 800a314:	691b      	ldr	r3, [r3, #16]
 800a316:	461a      	mov	r2, r3
 800a318:	f000 f843 	bl	800a3a2 <TIM_TI2_ConfigInputStage>
      break;
 800a31c:	e000      	b.n	800a320 <TIM_SlaveTimer_SetConfig+0x154>
      break;
 800a31e:	bf00      	nop
  }
  return HAL_OK;
 800a320:	2300      	movs	r3, #0
}
 800a322:	4618      	mov	r0, r3
 800a324:	3718      	adds	r7, #24
 800a326:	46bd      	mov	sp, r7
 800a328:	bd80      	pop	{r7, pc}
 800a32a:	bf00      	nop
 800a32c:	00100030 	.word	0x00100030
 800a330:	00100020 	.word	0x00100020
 800a334:	00100050 	.word	0x00100050
 800a338:	00100040 	.word	0x00100040
 800a33c:	00100060 	.word	0x00100060
 800a340:	00100070 	.word	0x00100070

0800a344 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a344:	b480      	push	{r7}
 800a346:	b087      	sub	sp, #28
 800a348:	af00      	add	r7, sp, #0
 800a34a:	60f8      	str	r0, [r7, #12]
 800a34c:	60b9      	str	r1, [r7, #8]
 800a34e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	6a1b      	ldr	r3, [r3, #32]
 800a354:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	6a1b      	ldr	r3, [r3, #32]
 800a35a:	f023 0201 	bic.w	r2, r3, #1
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	699b      	ldr	r3, [r3, #24]
 800a366:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a368:	693b      	ldr	r3, [r7, #16]
 800a36a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a36e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	011b      	lsls	r3, r3, #4
 800a374:	693a      	ldr	r2, [r7, #16]
 800a376:	4313      	orrs	r3, r2
 800a378:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a37a:	697b      	ldr	r3, [r7, #20]
 800a37c:	f023 030a 	bic.w	r3, r3, #10
 800a380:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a382:	697a      	ldr	r2, [r7, #20]
 800a384:	68bb      	ldr	r3, [r7, #8]
 800a386:	4313      	orrs	r3, r2
 800a388:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	693a      	ldr	r2, [r7, #16]
 800a38e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	697a      	ldr	r2, [r7, #20]
 800a394:	621a      	str	r2, [r3, #32]
}
 800a396:	bf00      	nop
 800a398:	371c      	adds	r7, #28
 800a39a:	46bd      	mov	sp, r7
 800a39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a0:	4770      	bx	lr

0800a3a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a3a2:	b480      	push	{r7}
 800a3a4:	b087      	sub	sp, #28
 800a3a6:	af00      	add	r7, sp, #0
 800a3a8:	60f8      	str	r0, [r7, #12]
 800a3aa:	60b9      	str	r1, [r7, #8]
 800a3ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	6a1b      	ldr	r3, [r3, #32]
 800a3b2:	f023 0210 	bic.w	r2, r3, #16
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	699b      	ldr	r3, [r3, #24]
 800a3be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	6a1b      	ldr	r3, [r3, #32]
 800a3c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a3c6:	697b      	ldr	r3, [r7, #20]
 800a3c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a3cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	031b      	lsls	r3, r3, #12
 800a3d2:	697a      	ldr	r2, [r7, #20]
 800a3d4:	4313      	orrs	r3, r2
 800a3d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a3d8:	693b      	ldr	r3, [r7, #16]
 800a3da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a3de:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a3e0:	68bb      	ldr	r3, [r7, #8]
 800a3e2:	011b      	lsls	r3, r3, #4
 800a3e4:	693a      	ldr	r2, [r7, #16]
 800a3e6:	4313      	orrs	r3, r2
 800a3e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	697a      	ldr	r2, [r7, #20]
 800a3ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	693a      	ldr	r2, [r7, #16]
 800a3f4:	621a      	str	r2, [r3, #32]
}
 800a3f6:	bf00      	nop
 800a3f8:	371c      	adds	r7, #28
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a400:	4770      	bx	lr

0800a402 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a402:	b480      	push	{r7}
 800a404:	b085      	sub	sp, #20
 800a406:	af00      	add	r7, sp, #0
 800a408:	6078      	str	r0, [r7, #4]
 800a40a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	689b      	ldr	r3, [r3, #8]
 800a410:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800a418:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a41c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a41e:	683a      	ldr	r2, [r7, #0]
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	4313      	orrs	r3, r2
 800a424:	f043 0307 	orr.w	r3, r3, #7
 800a428:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	68fa      	ldr	r2, [r7, #12]
 800a42e:	609a      	str	r2, [r3, #8]
}
 800a430:	bf00      	nop
 800a432:	3714      	adds	r7, #20
 800a434:	46bd      	mov	sp, r7
 800a436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43a:	4770      	bx	lr

0800a43c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a43c:	b480      	push	{r7}
 800a43e:	b087      	sub	sp, #28
 800a440:	af00      	add	r7, sp, #0
 800a442:	60f8      	str	r0, [r7, #12]
 800a444:	60b9      	str	r1, [r7, #8]
 800a446:	607a      	str	r2, [r7, #4]
 800a448:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	689b      	ldr	r3, [r3, #8]
 800a44e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a450:	697b      	ldr	r3, [r7, #20]
 800a452:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a456:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	021a      	lsls	r2, r3, #8
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	431a      	orrs	r2, r3
 800a460:	68bb      	ldr	r3, [r7, #8]
 800a462:	4313      	orrs	r3, r2
 800a464:	697a      	ldr	r2, [r7, #20]
 800a466:	4313      	orrs	r3, r2
 800a468:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	697a      	ldr	r2, [r7, #20]
 800a46e:	609a      	str	r2, [r3, #8]
}
 800a470:	bf00      	nop
 800a472:	371c      	adds	r7, #28
 800a474:	46bd      	mov	sp, r7
 800a476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47a:	4770      	bx	lr

0800a47c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a47c:	b480      	push	{r7}
 800a47e:	b085      	sub	sp, #20
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
 800a484:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a48c:	2b01      	cmp	r3, #1
 800a48e:	d101      	bne.n	800a494 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a490:	2302      	movs	r3, #2
 800a492:	e074      	b.n	800a57e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2201      	movs	r2, #1
 800a498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2202      	movs	r2, #2
 800a4a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	685b      	ldr	r3, [r3, #4]
 800a4aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	689b      	ldr	r3, [r3, #8]
 800a4b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	4a34      	ldr	r2, [pc, #208]	; (800a58c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a4ba:	4293      	cmp	r3, r2
 800a4bc:	d009      	beq.n	800a4d2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	4a33      	ldr	r2, [pc, #204]	; (800a590 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a4c4:	4293      	cmp	r3, r2
 800a4c6:	d004      	beq.n	800a4d2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	4a31      	ldr	r2, [pc, #196]	; (800a594 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a4ce:	4293      	cmp	r3, r2
 800a4d0:	d108      	bne.n	800a4e4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a4d8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a4da:	683b      	ldr	r3, [r7, #0]
 800a4dc:	685b      	ldr	r3, [r3, #4]
 800a4de:	68fa      	ldr	r2, [r7, #12]
 800a4e0:	4313      	orrs	r3, r2
 800a4e2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800a4ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a4f0:	683b      	ldr	r3, [r7, #0]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	68fa      	ldr	r2, [r7, #12]
 800a4f6:	4313      	orrs	r3, r2
 800a4f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	68fa      	ldr	r2, [r7, #12]
 800a500:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	4a21      	ldr	r2, [pc, #132]	; (800a58c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a508:	4293      	cmp	r3, r2
 800a50a:	d022      	beq.n	800a552 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a514:	d01d      	beq.n	800a552 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	4a1f      	ldr	r2, [pc, #124]	; (800a598 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800a51c:	4293      	cmp	r3, r2
 800a51e:	d018      	beq.n	800a552 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	4a1d      	ldr	r2, [pc, #116]	; (800a59c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800a526:	4293      	cmp	r3, r2
 800a528:	d013      	beq.n	800a552 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	4a1c      	ldr	r2, [pc, #112]	; (800a5a0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800a530:	4293      	cmp	r3, r2
 800a532:	d00e      	beq.n	800a552 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	4a15      	ldr	r2, [pc, #84]	; (800a590 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a53a:	4293      	cmp	r3, r2
 800a53c:	d009      	beq.n	800a552 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	4a18      	ldr	r2, [pc, #96]	; (800a5a4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800a544:	4293      	cmp	r3, r2
 800a546:	d004      	beq.n	800a552 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	4a11      	ldr	r2, [pc, #68]	; (800a594 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a54e:	4293      	cmp	r3, r2
 800a550:	d10c      	bne.n	800a56c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a552:	68bb      	ldr	r3, [r7, #8]
 800a554:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a558:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a55a:	683b      	ldr	r3, [r7, #0]
 800a55c:	689b      	ldr	r3, [r3, #8]
 800a55e:	68ba      	ldr	r2, [r7, #8]
 800a560:	4313      	orrs	r3, r2
 800a562:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	68ba      	ldr	r2, [r7, #8]
 800a56a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2201      	movs	r2, #1
 800a570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2200      	movs	r2, #0
 800a578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a57c:	2300      	movs	r3, #0
}
 800a57e:	4618      	mov	r0, r3
 800a580:	3714      	adds	r7, #20
 800a582:	46bd      	mov	sp, r7
 800a584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a588:	4770      	bx	lr
 800a58a:	bf00      	nop
 800a58c:	40012c00 	.word	0x40012c00
 800a590:	40013400 	.word	0x40013400
 800a594:	40015000 	.word	0x40015000
 800a598:	40000400 	.word	0x40000400
 800a59c:	40000800 	.word	0x40000800
 800a5a0:	40000c00 	.word	0x40000c00
 800a5a4:	40014000 	.word	0x40014000

0800a5a8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a5a8:	b480      	push	{r7}
 800a5aa:	b085      	sub	sp, #20
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
 800a5b0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a5bc:	2b01      	cmp	r3, #1
 800a5be:	d101      	bne.n	800a5c4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a5c0:	2302      	movs	r3, #2
 800a5c2:	e096      	b.n	800a6f2 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	2201      	movs	r2, #1
 800a5c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a5d2:	683b      	ldr	r3, [r7, #0]
 800a5d4:	68db      	ldr	r3, [r3, #12]
 800a5d6:	4313      	orrs	r3, r2
 800a5d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a5e0:	683b      	ldr	r3, [r7, #0]
 800a5e2:	689b      	ldr	r3, [r3, #8]
 800a5e4:	4313      	orrs	r3, r2
 800a5e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a5ee:	683b      	ldr	r3, [r7, #0]
 800a5f0:	685b      	ldr	r3, [r3, #4]
 800a5f2:	4313      	orrs	r3, r2
 800a5f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	4313      	orrs	r3, r2
 800a602:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a60a:	683b      	ldr	r3, [r7, #0]
 800a60c:	691b      	ldr	r3, [r3, #16]
 800a60e:	4313      	orrs	r3, r2
 800a610:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a618:	683b      	ldr	r3, [r7, #0]
 800a61a:	695b      	ldr	r3, [r3, #20]
 800a61c:	4313      	orrs	r3, r2
 800a61e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a626:	683b      	ldr	r3, [r7, #0]
 800a628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a62a:	4313      	orrs	r3, r2
 800a62c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a634:	683b      	ldr	r3, [r7, #0]
 800a636:	699b      	ldr	r3, [r3, #24]
 800a638:	041b      	lsls	r3, r3, #16
 800a63a:	4313      	orrs	r3, r2
 800a63c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	4a2f      	ldr	r2, [pc, #188]	; (800a700 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800a644:	4293      	cmp	r3, r2
 800a646:	d009      	beq.n	800a65c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	4a2d      	ldr	r2, [pc, #180]	; (800a704 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800a64e:	4293      	cmp	r3, r2
 800a650:	d004      	beq.n	800a65c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	4a2c      	ldr	r2, [pc, #176]	; (800a708 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800a658:	4293      	cmp	r3, r2
 800a65a:	d106      	bne.n	800a66a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800a662:	683b      	ldr	r3, [r7, #0]
 800a664:	69db      	ldr	r3, [r3, #28]
 800a666:	4313      	orrs	r3, r2
 800a668:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	4a24      	ldr	r2, [pc, #144]	; (800a700 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800a670:	4293      	cmp	r3, r2
 800a672:	d009      	beq.n	800a688 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	4a22      	ldr	r2, [pc, #136]	; (800a704 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800a67a:	4293      	cmp	r3, r2
 800a67c:	d004      	beq.n	800a688 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	4a21      	ldr	r2, [pc, #132]	; (800a708 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800a684:	4293      	cmp	r3, r2
 800a686:	d12b      	bne.n	800a6e0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a68e:	683b      	ldr	r3, [r7, #0]
 800a690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a692:	051b      	lsls	r3, r3, #20
 800a694:	4313      	orrs	r3, r2
 800a696:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a69e:	683b      	ldr	r3, [r7, #0]
 800a6a0:	6a1b      	ldr	r3, [r3, #32]
 800a6a2:	4313      	orrs	r3, r2
 800a6a4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a6ac:	683b      	ldr	r3, [r7, #0]
 800a6ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6b0:	4313      	orrs	r3, r2
 800a6b2:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	4a11      	ldr	r2, [pc, #68]	; (800a700 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800a6ba:	4293      	cmp	r3, r2
 800a6bc:	d009      	beq.n	800a6d2 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	4a10      	ldr	r2, [pc, #64]	; (800a704 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800a6c4:	4293      	cmp	r3, r2
 800a6c6:	d004      	beq.n	800a6d2 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	4a0e      	ldr	r2, [pc, #56]	; (800a708 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800a6ce:	4293      	cmp	r3, r2
 800a6d0:	d106      	bne.n	800a6e0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800a6d8:	683b      	ldr	r3, [r7, #0]
 800a6da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6dc:	4313      	orrs	r3, r2
 800a6de:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	68fa      	ldr	r2, [r7, #12]
 800a6e6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a6f0:	2300      	movs	r3, #0
}
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	3714      	adds	r7, #20
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fc:	4770      	bx	lr
 800a6fe:	bf00      	nop
 800a700:	40012c00 	.word	0x40012c00
 800a704:	40013400 	.word	0x40013400
 800a708:	40015000 	.word	0x40015000

0800a70c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a70c:	b480      	push	{r7}
 800a70e:	b083      	sub	sp, #12
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a714:	bf00      	nop
 800a716:	370c      	adds	r7, #12
 800a718:	46bd      	mov	sp, r7
 800a71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71e:	4770      	bx	lr

0800a720 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a720:	b480      	push	{r7}
 800a722:	b083      	sub	sp, #12
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a728:	bf00      	nop
 800a72a:	370c      	adds	r7, #12
 800a72c:	46bd      	mov	sp, r7
 800a72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a732:	4770      	bx	lr

0800a734 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a734:	b480      	push	{r7}
 800a736:	b083      	sub	sp, #12
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a73c:	bf00      	nop
 800a73e:	370c      	adds	r7, #12
 800a740:	46bd      	mov	sp, r7
 800a742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a746:	4770      	bx	lr

0800a748 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800a748:	b480      	push	{r7}
 800a74a:	b083      	sub	sp, #12
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800a750:	bf00      	nop
 800a752:	370c      	adds	r7, #12
 800a754:	46bd      	mov	sp, r7
 800a756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75a:	4770      	bx	lr

0800a75c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800a75c:	b480      	push	{r7}
 800a75e:	b083      	sub	sp, #12
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800a764:	bf00      	nop
 800a766:	370c      	adds	r7, #12
 800a768:	46bd      	mov	sp, r7
 800a76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76e:	4770      	bx	lr

0800a770 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800a770:	b480      	push	{r7}
 800a772:	b083      	sub	sp, #12
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800a778:	bf00      	nop
 800a77a:	370c      	adds	r7, #12
 800a77c:	46bd      	mov	sp, r7
 800a77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a782:	4770      	bx	lr

0800a784 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800a784:	b480      	push	{r7}
 800a786:	b083      	sub	sp, #12
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800a78c:	bf00      	nop
 800a78e:	370c      	adds	r7, #12
 800a790:	46bd      	mov	sp, r7
 800a792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a796:	4770      	bx	lr

0800a798 <LL_EXTI_EnableIT_0_31>:
{
 800a798:	b480      	push	{r7}
 800a79a:	b083      	sub	sp, #12
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800a7a0:	4b05      	ldr	r3, [pc, #20]	; (800a7b8 <LL_EXTI_EnableIT_0_31+0x20>)
 800a7a2:	681a      	ldr	r2, [r3, #0]
 800a7a4:	4904      	ldr	r1, [pc, #16]	; (800a7b8 <LL_EXTI_EnableIT_0_31+0x20>)
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	4313      	orrs	r3, r2
 800a7aa:	600b      	str	r3, [r1, #0]
}
 800a7ac:	bf00      	nop
 800a7ae:	370c      	adds	r7, #12
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b6:	4770      	bx	lr
 800a7b8:	40010400 	.word	0x40010400

0800a7bc <LL_EXTI_EnableIT_32_63>:
{
 800a7bc:	b480      	push	{r7}
 800a7be:	b083      	sub	sp, #12
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800a7c4:	4b05      	ldr	r3, [pc, #20]	; (800a7dc <LL_EXTI_EnableIT_32_63+0x20>)
 800a7c6:	6a1a      	ldr	r2, [r3, #32]
 800a7c8:	4904      	ldr	r1, [pc, #16]	; (800a7dc <LL_EXTI_EnableIT_32_63+0x20>)
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	4313      	orrs	r3, r2
 800a7ce:	620b      	str	r3, [r1, #32]
}
 800a7d0:	bf00      	nop
 800a7d2:	370c      	adds	r7, #12
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7da:	4770      	bx	lr
 800a7dc:	40010400 	.word	0x40010400

0800a7e0 <LL_EXTI_DisableIT_0_31>:
{
 800a7e0:	b480      	push	{r7}
 800a7e2:	b083      	sub	sp, #12
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800a7e8:	4b06      	ldr	r3, [pc, #24]	; (800a804 <LL_EXTI_DisableIT_0_31+0x24>)
 800a7ea:	681a      	ldr	r2, [r3, #0]
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	43db      	mvns	r3, r3
 800a7f0:	4904      	ldr	r1, [pc, #16]	; (800a804 <LL_EXTI_DisableIT_0_31+0x24>)
 800a7f2:	4013      	ands	r3, r2
 800a7f4:	600b      	str	r3, [r1, #0]
}
 800a7f6:	bf00      	nop
 800a7f8:	370c      	adds	r7, #12
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a800:	4770      	bx	lr
 800a802:	bf00      	nop
 800a804:	40010400 	.word	0x40010400

0800a808 <LL_EXTI_DisableIT_32_63>:
{
 800a808:	b480      	push	{r7}
 800a80a:	b083      	sub	sp, #12
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 800a810:	4b06      	ldr	r3, [pc, #24]	; (800a82c <LL_EXTI_DisableIT_32_63+0x24>)
 800a812:	6a1a      	ldr	r2, [r3, #32]
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	43db      	mvns	r3, r3
 800a818:	4904      	ldr	r1, [pc, #16]	; (800a82c <LL_EXTI_DisableIT_32_63+0x24>)
 800a81a:	4013      	ands	r3, r2
 800a81c:	620b      	str	r3, [r1, #32]
}
 800a81e:	bf00      	nop
 800a820:	370c      	adds	r7, #12
 800a822:	46bd      	mov	sp, r7
 800a824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a828:	4770      	bx	lr
 800a82a:	bf00      	nop
 800a82c:	40010400 	.word	0x40010400

0800a830 <LL_EXTI_EnableEvent_0_31>:
{
 800a830:	b480      	push	{r7}
 800a832:	b083      	sub	sp, #12
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 800a838:	4b05      	ldr	r3, [pc, #20]	; (800a850 <LL_EXTI_EnableEvent_0_31+0x20>)
 800a83a:	685a      	ldr	r2, [r3, #4]
 800a83c:	4904      	ldr	r1, [pc, #16]	; (800a850 <LL_EXTI_EnableEvent_0_31+0x20>)
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	4313      	orrs	r3, r2
 800a842:	604b      	str	r3, [r1, #4]
}
 800a844:	bf00      	nop
 800a846:	370c      	adds	r7, #12
 800a848:	46bd      	mov	sp, r7
 800a84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84e:	4770      	bx	lr
 800a850:	40010400 	.word	0x40010400

0800a854 <LL_EXTI_EnableEvent_32_63>:
{
 800a854:	b480      	push	{r7}
 800a856:	b083      	sub	sp, #12
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 800a85c:	4b05      	ldr	r3, [pc, #20]	; (800a874 <LL_EXTI_EnableEvent_32_63+0x20>)
 800a85e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a860:	4904      	ldr	r1, [pc, #16]	; (800a874 <LL_EXTI_EnableEvent_32_63+0x20>)
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	4313      	orrs	r3, r2
 800a866:	624b      	str	r3, [r1, #36]	; 0x24
}
 800a868:	bf00      	nop
 800a86a:	370c      	adds	r7, #12
 800a86c:	46bd      	mov	sp, r7
 800a86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a872:	4770      	bx	lr
 800a874:	40010400 	.word	0x40010400

0800a878 <LL_EXTI_DisableEvent_0_31>:
{
 800a878:	b480      	push	{r7}
 800a87a:	b083      	sub	sp, #12
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800a880:	4b06      	ldr	r3, [pc, #24]	; (800a89c <LL_EXTI_DisableEvent_0_31+0x24>)
 800a882:	685a      	ldr	r2, [r3, #4]
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	43db      	mvns	r3, r3
 800a888:	4904      	ldr	r1, [pc, #16]	; (800a89c <LL_EXTI_DisableEvent_0_31+0x24>)
 800a88a:	4013      	ands	r3, r2
 800a88c:	604b      	str	r3, [r1, #4]
}
 800a88e:	bf00      	nop
 800a890:	370c      	adds	r7, #12
 800a892:	46bd      	mov	sp, r7
 800a894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a898:	4770      	bx	lr
 800a89a:	bf00      	nop
 800a89c:	40010400 	.word	0x40010400

0800a8a0 <LL_EXTI_DisableEvent_32_63>:
{
 800a8a0:	b480      	push	{r7}
 800a8a2:	b083      	sub	sp, #12
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 800a8a8:	4b06      	ldr	r3, [pc, #24]	; (800a8c4 <LL_EXTI_DisableEvent_32_63+0x24>)
 800a8aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	43db      	mvns	r3, r3
 800a8b0:	4904      	ldr	r1, [pc, #16]	; (800a8c4 <LL_EXTI_DisableEvent_32_63+0x24>)
 800a8b2:	4013      	ands	r3, r2
 800a8b4:	624b      	str	r3, [r1, #36]	; 0x24
}
 800a8b6:	bf00      	nop
 800a8b8:	370c      	adds	r7, #12
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c0:	4770      	bx	lr
 800a8c2:	bf00      	nop
 800a8c4:	40010400 	.word	0x40010400

0800a8c8 <LL_EXTI_EnableRisingTrig_0_31>:
{
 800a8c8:	b480      	push	{r7}
 800a8ca:	b083      	sub	sp, #12
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800a8d0:	4b05      	ldr	r3, [pc, #20]	; (800a8e8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800a8d2:	689a      	ldr	r2, [r3, #8]
 800a8d4:	4904      	ldr	r1, [pc, #16]	; (800a8e8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	4313      	orrs	r3, r2
 800a8da:	608b      	str	r3, [r1, #8]
}
 800a8dc:	bf00      	nop
 800a8de:	370c      	adds	r7, #12
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e6:	4770      	bx	lr
 800a8e8:	40010400 	.word	0x40010400

0800a8ec <LL_EXTI_EnableRisingTrig_32_63>:
{
 800a8ec:	b480      	push	{r7}
 800a8ee:	b083      	sub	sp, #12
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800a8f4:	4b05      	ldr	r3, [pc, #20]	; (800a90c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800a8f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a8f8:	4904      	ldr	r1, [pc, #16]	; (800a90c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	4313      	orrs	r3, r2
 800a8fe:	628b      	str	r3, [r1, #40]	; 0x28
}
 800a900:	bf00      	nop
 800a902:	370c      	adds	r7, #12
 800a904:	46bd      	mov	sp, r7
 800a906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90a:	4770      	bx	lr
 800a90c:	40010400 	.word	0x40010400

0800a910 <LL_EXTI_DisableRisingTrig_0_31>:
{
 800a910:	b480      	push	{r7}
 800a912:	b083      	sub	sp, #12
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800a918:	4b06      	ldr	r3, [pc, #24]	; (800a934 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800a91a:	689a      	ldr	r2, [r3, #8]
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	43db      	mvns	r3, r3
 800a920:	4904      	ldr	r1, [pc, #16]	; (800a934 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800a922:	4013      	ands	r3, r2
 800a924:	608b      	str	r3, [r1, #8]
}
 800a926:	bf00      	nop
 800a928:	370c      	adds	r7, #12
 800a92a:	46bd      	mov	sp, r7
 800a92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a930:	4770      	bx	lr
 800a932:	bf00      	nop
 800a934:	40010400 	.word	0x40010400

0800a938 <LL_EXTI_DisableRisingTrig_32_63>:
{
 800a938:	b480      	push	{r7}
 800a93a:	b083      	sub	sp, #12
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 800a940:	4b06      	ldr	r3, [pc, #24]	; (800a95c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800a942:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	43db      	mvns	r3, r3
 800a948:	4904      	ldr	r1, [pc, #16]	; (800a95c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800a94a:	4013      	ands	r3, r2
 800a94c:	628b      	str	r3, [r1, #40]	; 0x28
}
 800a94e:	bf00      	nop
 800a950:	370c      	adds	r7, #12
 800a952:	46bd      	mov	sp, r7
 800a954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a958:	4770      	bx	lr
 800a95a:	bf00      	nop
 800a95c:	40010400 	.word	0x40010400

0800a960 <LL_EXTI_EnableFallingTrig_0_31>:
{
 800a960:	b480      	push	{r7}
 800a962:	b083      	sub	sp, #12
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800a968:	4b05      	ldr	r3, [pc, #20]	; (800a980 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800a96a:	68da      	ldr	r2, [r3, #12]
 800a96c:	4904      	ldr	r1, [pc, #16]	; (800a980 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	4313      	orrs	r3, r2
 800a972:	60cb      	str	r3, [r1, #12]
}
 800a974:	bf00      	nop
 800a976:	370c      	adds	r7, #12
 800a978:	46bd      	mov	sp, r7
 800a97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97e:	4770      	bx	lr
 800a980:	40010400 	.word	0x40010400

0800a984 <LL_EXTI_EnableFallingTrig_32_63>:
{
 800a984:	b480      	push	{r7}
 800a986:	b083      	sub	sp, #12
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 800a98c:	4b05      	ldr	r3, [pc, #20]	; (800a9a4 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800a98e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a990:	4904      	ldr	r1, [pc, #16]	; (800a9a4 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	4313      	orrs	r3, r2
 800a996:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800a998:	bf00      	nop
 800a99a:	370c      	adds	r7, #12
 800a99c:	46bd      	mov	sp, r7
 800a99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a2:	4770      	bx	lr
 800a9a4:	40010400 	.word	0x40010400

0800a9a8 <LL_EXTI_DisableFallingTrig_0_31>:
{
 800a9a8:	b480      	push	{r7}
 800a9aa:	b083      	sub	sp, #12
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800a9b0:	4b06      	ldr	r3, [pc, #24]	; (800a9cc <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800a9b2:	68da      	ldr	r2, [r3, #12]
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	43db      	mvns	r3, r3
 800a9b8:	4904      	ldr	r1, [pc, #16]	; (800a9cc <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800a9ba:	4013      	ands	r3, r2
 800a9bc:	60cb      	str	r3, [r1, #12]
}
 800a9be:	bf00      	nop
 800a9c0:	370c      	adds	r7, #12
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c8:	4770      	bx	lr
 800a9ca:	bf00      	nop
 800a9cc:	40010400 	.word	0x40010400

0800a9d0 <LL_EXTI_DisableFallingTrig_32_63>:
{
 800a9d0:	b480      	push	{r7}
 800a9d2:	b083      	sub	sp, #12
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 800a9d8:	4b06      	ldr	r3, [pc, #24]	; (800a9f4 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800a9da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	43db      	mvns	r3, r3
 800a9e0:	4904      	ldr	r1, [pc, #16]	; (800a9f4 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800a9e2:	4013      	ands	r3, r2
 800a9e4:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800a9e6:	bf00      	nop
 800a9e8:	370c      	adds	r7, #12
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f0:	4770      	bx	lr
 800a9f2:	bf00      	nop
 800a9f4:	40010400 	.word	0x40010400

0800a9f8 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other calue : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b084      	sub	sp, #16
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 800aa00:	2300      	movs	r3, #0
 800aa02:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	7a1b      	ldrb	r3, [r3, #8]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	f000 80c8 	beq.w	800ab9e <LL_EXTI_Init+0x1a6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d05d      	beq.n	800aad2 <LL_EXTI_Init+0xda>
    {
      switch (EXTI_InitStruct->Mode)
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	7a5b      	ldrb	r3, [r3, #9]
 800aa1a:	2b01      	cmp	r3, #1
 800aa1c:	d00e      	beq.n	800aa3c <LL_EXTI_Init+0x44>
 800aa1e:	2b02      	cmp	r3, #2
 800aa20:	d017      	beq.n	800aa52 <LL_EXTI_Init+0x5a>
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d120      	bne.n	800aa68 <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	f7ff ff24 	bl	800a878 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	4618      	mov	r0, r3
 800aa36:	f7ff feaf 	bl	800a798 <LL_EXTI_EnableIT_0_31>
          break;
 800aa3a:	e018      	b.n	800aa6e <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	4618      	mov	r0, r3
 800aa42:	f7ff fecd 	bl	800a7e0 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	f7ff fef0 	bl	800a830 <LL_EXTI_EnableEvent_0_31>
          break;
 800aa50:	e00d      	b.n	800aa6e <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	4618      	mov	r0, r3
 800aa58:	f7ff fe9e 	bl	800a798 <LL_EXTI_EnableIT_0_31>
          /* Directly Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	4618      	mov	r0, r3
 800aa62:	f7ff fee5 	bl	800a830 <LL_EXTI_EnableEvent_0_31>
          break;
 800aa66:	e002      	b.n	800aa6e <LL_EXTI_Init+0x76>
        default:
          status = 0x01u;
 800aa68:	2301      	movs	r3, #1
 800aa6a:	60fb      	str	r3, [r7, #12]
          break;
 800aa6c:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	7a9b      	ldrb	r3, [r3, #10]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d02d      	beq.n	800aad2 <LL_EXTI_Init+0xda>
      {
        switch (EXTI_InitStruct->Trigger)
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	7a9b      	ldrb	r3, [r3, #10]
 800aa7a:	2b02      	cmp	r3, #2
 800aa7c:	d00e      	beq.n	800aa9c <LL_EXTI_Init+0xa4>
 800aa7e:	2b03      	cmp	r3, #3
 800aa80:	d017      	beq.n	800aab2 <LL_EXTI_Init+0xba>
 800aa82:	2b01      	cmp	r3, #1
 800aa84:	d120      	bne.n	800aac8 <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	f7ff ff8c 	bl	800a9a8 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	4618      	mov	r0, r3
 800aa96:	f7ff ff17 	bl	800a8c8 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 800aa9a:	e01b      	b.n	800aad4 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	f7ff ff35 	bl	800a910 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	4618      	mov	r0, r3
 800aaac:	f7ff ff58 	bl	800a960 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800aab0:	e010      	b.n	800aad4 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	4618      	mov	r0, r3
 800aab8:	f7ff ff06 	bl	800a8c8 <LL_EXTI_EnableRisingTrig_0_31>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	4618      	mov	r0, r3
 800aac2:	f7ff ff4d 	bl	800a960 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800aac6:	e005      	b.n	800aad4 <LL_EXTI_Init+0xdc>
          default:
            status |= 0x02u;
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	f043 0302 	orr.w	r3, r3, #2
 800aace:	60fb      	str	r3, [r7, #12]
            break;
 800aad0:	e000      	b.n	800aad4 <LL_EXTI_Init+0xdc>
        }
      }
 800aad2:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	685b      	ldr	r3, [r3, #4]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d075      	beq.n	800abc8 <LL_EXTI_Init+0x1d0>
    {
      switch (EXTI_InitStruct->Mode)
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	7a5b      	ldrb	r3, [r3, #9]
 800aae0:	2b01      	cmp	r3, #1
 800aae2:	d00e      	beq.n	800ab02 <LL_EXTI_Init+0x10a>
 800aae4:	2b02      	cmp	r3, #2
 800aae6:	d017      	beq.n	800ab18 <LL_EXTI_Init+0x120>
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d120      	bne.n	800ab2e <LL_EXTI_Init+0x136>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	685b      	ldr	r3, [r3, #4]
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	f7ff fed5 	bl	800a8a0 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	685b      	ldr	r3, [r3, #4]
 800aafa:	4618      	mov	r0, r3
 800aafc:	f7ff fe5e 	bl	800a7bc <LL_EXTI_EnableIT_32_63>
          break;
 800ab00:	e01a      	b.n	800ab38 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	685b      	ldr	r3, [r3, #4]
 800ab06:	4618      	mov	r0, r3
 800ab08:	f7ff fe7e 	bl	800a808 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	685b      	ldr	r3, [r3, #4]
 800ab10:	4618      	mov	r0, r3
 800ab12:	f7ff fe9f 	bl	800a854 <LL_EXTI_EnableEvent_32_63>
          break;
 800ab16:	e00f      	b.n	800ab38 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	685b      	ldr	r3, [r3, #4]
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	f7ff fe4d 	bl	800a7bc <LL_EXTI_EnableIT_32_63>
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	685b      	ldr	r3, [r3, #4]
 800ab26:	4618      	mov	r0, r3
 800ab28:	f7ff fe94 	bl	800a854 <LL_EXTI_EnableEvent_32_63>
          break;
 800ab2c:	e004      	b.n	800ab38 <LL_EXTI_Init+0x140>
        default:
          status |= 0x04u;
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	f043 0304 	orr.w	r3, r3, #4
 800ab34:	60fb      	str	r3, [r7, #12]
          break;
 800ab36:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	7a9b      	ldrb	r3, [r3, #10]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d043      	beq.n	800abc8 <LL_EXTI_Init+0x1d0>
      {
        switch (EXTI_InitStruct->Trigger)
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	7a9b      	ldrb	r3, [r3, #10]
 800ab44:	2b02      	cmp	r3, #2
 800ab46:	d00e      	beq.n	800ab66 <LL_EXTI_Init+0x16e>
 800ab48:	2b03      	cmp	r3, #3
 800ab4a:	d017      	beq.n	800ab7c <LL_EXTI_Init+0x184>
 800ab4c:	2b01      	cmp	r3, #1
 800ab4e:	d120      	bne.n	800ab92 <LL_EXTI_Init+0x19a>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	685b      	ldr	r3, [r3, #4]
 800ab54:	4618      	mov	r0, r3
 800ab56:	f7ff ff3b 	bl	800a9d0 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	685b      	ldr	r3, [r3, #4]
 800ab5e:	4618      	mov	r0, r3
 800ab60:	f7ff fec4 	bl	800a8ec <LL_EXTI_EnableRisingTrig_32_63>
            break;
 800ab64:	e031      	b.n	800abca <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	685b      	ldr	r3, [r3, #4]
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	f7ff fee4 	bl	800a938 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	685b      	ldr	r3, [r3, #4]
 800ab74:	4618      	mov	r0, r3
 800ab76:	f7ff ff05 	bl	800a984 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800ab7a:	e026      	b.n	800abca <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	685b      	ldr	r3, [r3, #4]
 800ab80:	4618      	mov	r0, r3
 800ab82:	f7ff feb3 	bl	800a8ec <LL_EXTI_EnableRisingTrig_32_63>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	685b      	ldr	r3, [r3, #4]
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	f7ff fefa 	bl	800a984 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800ab90:	e01b      	b.n	800abca <LL_EXTI_Init+0x1d2>
          default:
            status |= 0x05u;
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	f043 0305 	orr.w	r3, r3, #5
 800ab98:	60fb      	str	r3, [r7, #12]
            break;
 800ab9a:	bf00      	nop
 800ab9c:	e015      	b.n	800abca <LL_EXTI_Init+0x1d2>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure IT EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	4618      	mov	r0, r3
 800aba4:	f7ff fe1c 	bl	800a7e0 <LL_EXTI_DisableIT_0_31>
    /* De-configure Event EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	4618      	mov	r0, r3
 800abae:	f7ff fe63 	bl	800a878 <LL_EXTI_DisableEvent_0_31>
    /* De-configure IT EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	685b      	ldr	r3, [r3, #4]
 800abb6:	4618      	mov	r0, r3
 800abb8:	f7ff fe26 	bl	800a808 <LL_EXTI_DisableIT_32_63>
    /* De-configure Event EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	685b      	ldr	r3, [r3, #4]
 800abc0:	4618      	mov	r0, r3
 800abc2:	f7ff fe6d 	bl	800a8a0 <LL_EXTI_DisableEvent_32_63>
 800abc6:	e000      	b.n	800abca <LL_EXTI_Init+0x1d2>
      }
 800abc8:	bf00      	nop
  }

  return status;
 800abca:	68fb      	ldr	r3, [r7, #12]
}
 800abcc:	4618      	mov	r0, r3
 800abce:	3710      	adds	r7, #16
 800abd0:	46bd      	mov	sp, r7
 800abd2:	bd80      	pop	{r7, pc}

0800abd4 <LL_GPIO_SetPinMode>:
{
 800abd4:	b480      	push	{r7}
 800abd6:	b089      	sub	sp, #36	; 0x24
 800abd8:	af00      	add	r7, sp, #0
 800abda:	60f8      	str	r0, [r7, #12]
 800abdc:	60b9      	str	r1, [r7, #8]
 800abde:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	681a      	ldr	r2, [r3, #0]
 800abe4:	68bb      	ldr	r3, [r7, #8]
 800abe6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800abe8:	697b      	ldr	r3, [r7, #20]
 800abea:	fa93 f3a3 	rbit	r3, r3
 800abee:	613b      	str	r3, [r7, #16]
  return result;
 800abf0:	693b      	ldr	r3, [r7, #16]
 800abf2:	fab3 f383 	clz	r3, r3
 800abf6:	b2db      	uxtb	r3, r3
 800abf8:	005b      	lsls	r3, r3, #1
 800abfa:	2103      	movs	r1, #3
 800abfc:	fa01 f303 	lsl.w	r3, r1, r3
 800ac00:	43db      	mvns	r3, r3
 800ac02:	401a      	ands	r2, r3
 800ac04:	68bb      	ldr	r3, [r7, #8]
 800ac06:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ac08:	69fb      	ldr	r3, [r7, #28]
 800ac0a:	fa93 f3a3 	rbit	r3, r3
 800ac0e:	61bb      	str	r3, [r7, #24]
  return result;
 800ac10:	69bb      	ldr	r3, [r7, #24]
 800ac12:	fab3 f383 	clz	r3, r3
 800ac16:	b2db      	uxtb	r3, r3
 800ac18:	005b      	lsls	r3, r3, #1
 800ac1a:	6879      	ldr	r1, [r7, #4]
 800ac1c:	fa01 f303 	lsl.w	r3, r1, r3
 800ac20:	431a      	orrs	r2, r3
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	601a      	str	r2, [r3, #0]
}
 800ac26:	bf00      	nop
 800ac28:	3724      	adds	r7, #36	; 0x24
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac30:	4770      	bx	lr

0800ac32 <LL_GPIO_SetPinOutputType>:
{
 800ac32:	b480      	push	{r7}
 800ac34:	b085      	sub	sp, #20
 800ac36:	af00      	add	r7, sp, #0
 800ac38:	60f8      	str	r0, [r7, #12]
 800ac3a:	60b9      	str	r1, [r7, #8]
 800ac3c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	685a      	ldr	r2, [r3, #4]
 800ac42:	68bb      	ldr	r3, [r7, #8]
 800ac44:	43db      	mvns	r3, r3
 800ac46:	401a      	ands	r2, r3
 800ac48:	68bb      	ldr	r3, [r7, #8]
 800ac4a:	6879      	ldr	r1, [r7, #4]
 800ac4c:	fb01 f303 	mul.w	r3, r1, r3
 800ac50:	431a      	orrs	r2, r3
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	605a      	str	r2, [r3, #4]
}
 800ac56:	bf00      	nop
 800ac58:	3714      	adds	r7, #20
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac60:	4770      	bx	lr

0800ac62 <LL_GPIO_SetPinSpeed>:
{
 800ac62:	b480      	push	{r7}
 800ac64:	b089      	sub	sp, #36	; 0x24
 800ac66:	af00      	add	r7, sp, #0
 800ac68:	60f8      	str	r0, [r7, #12]
 800ac6a:	60b9      	str	r1, [r7, #8]
 800ac6c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	689a      	ldr	r2, [r3, #8]
 800ac72:	68bb      	ldr	r3, [r7, #8]
 800ac74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ac76:	697b      	ldr	r3, [r7, #20]
 800ac78:	fa93 f3a3 	rbit	r3, r3
 800ac7c:	613b      	str	r3, [r7, #16]
  return result;
 800ac7e:	693b      	ldr	r3, [r7, #16]
 800ac80:	fab3 f383 	clz	r3, r3
 800ac84:	b2db      	uxtb	r3, r3
 800ac86:	005b      	lsls	r3, r3, #1
 800ac88:	2103      	movs	r1, #3
 800ac8a:	fa01 f303 	lsl.w	r3, r1, r3
 800ac8e:	43db      	mvns	r3, r3
 800ac90:	401a      	ands	r2, r3
 800ac92:	68bb      	ldr	r3, [r7, #8]
 800ac94:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ac96:	69fb      	ldr	r3, [r7, #28]
 800ac98:	fa93 f3a3 	rbit	r3, r3
 800ac9c:	61bb      	str	r3, [r7, #24]
  return result;
 800ac9e:	69bb      	ldr	r3, [r7, #24]
 800aca0:	fab3 f383 	clz	r3, r3
 800aca4:	b2db      	uxtb	r3, r3
 800aca6:	005b      	lsls	r3, r3, #1
 800aca8:	6879      	ldr	r1, [r7, #4]
 800acaa:	fa01 f303 	lsl.w	r3, r1, r3
 800acae:	431a      	orrs	r2, r3
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	609a      	str	r2, [r3, #8]
}
 800acb4:	bf00      	nop
 800acb6:	3724      	adds	r7, #36	; 0x24
 800acb8:	46bd      	mov	sp, r7
 800acba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acbe:	4770      	bx	lr

0800acc0 <LL_GPIO_SetPinPull>:
{
 800acc0:	b480      	push	{r7}
 800acc2:	b089      	sub	sp, #36	; 0x24
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	60f8      	str	r0, [r7, #12]
 800acc8:	60b9      	str	r1, [r7, #8]
 800acca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	68da      	ldr	r2, [r3, #12]
 800acd0:	68bb      	ldr	r3, [r7, #8]
 800acd2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800acd4:	697b      	ldr	r3, [r7, #20]
 800acd6:	fa93 f3a3 	rbit	r3, r3
 800acda:	613b      	str	r3, [r7, #16]
  return result;
 800acdc:	693b      	ldr	r3, [r7, #16]
 800acde:	fab3 f383 	clz	r3, r3
 800ace2:	b2db      	uxtb	r3, r3
 800ace4:	005b      	lsls	r3, r3, #1
 800ace6:	2103      	movs	r1, #3
 800ace8:	fa01 f303 	lsl.w	r3, r1, r3
 800acec:	43db      	mvns	r3, r3
 800acee:	401a      	ands	r2, r3
 800acf0:	68bb      	ldr	r3, [r7, #8]
 800acf2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800acf4:	69fb      	ldr	r3, [r7, #28]
 800acf6:	fa93 f3a3 	rbit	r3, r3
 800acfa:	61bb      	str	r3, [r7, #24]
  return result;
 800acfc:	69bb      	ldr	r3, [r7, #24]
 800acfe:	fab3 f383 	clz	r3, r3
 800ad02:	b2db      	uxtb	r3, r3
 800ad04:	005b      	lsls	r3, r3, #1
 800ad06:	6879      	ldr	r1, [r7, #4]
 800ad08:	fa01 f303 	lsl.w	r3, r1, r3
 800ad0c:	431a      	orrs	r2, r3
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	60da      	str	r2, [r3, #12]
}
 800ad12:	bf00      	nop
 800ad14:	3724      	adds	r7, #36	; 0x24
 800ad16:	46bd      	mov	sp, r7
 800ad18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1c:	4770      	bx	lr

0800ad1e <LL_GPIO_SetAFPin_0_7>:
{
 800ad1e:	b480      	push	{r7}
 800ad20:	b089      	sub	sp, #36	; 0x24
 800ad22:	af00      	add	r7, sp, #0
 800ad24:	60f8      	str	r0, [r7, #12]
 800ad26:	60b9      	str	r1, [r7, #8]
 800ad28:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	6a1a      	ldr	r2, [r3, #32]
 800ad2e:	68bb      	ldr	r3, [r7, #8]
 800ad30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ad32:	697b      	ldr	r3, [r7, #20]
 800ad34:	fa93 f3a3 	rbit	r3, r3
 800ad38:	613b      	str	r3, [r7, #16]
  return result;
 800ad3a:	693b      	ldr	r3, [r7, #16]
 800ad3c:	fab3 f383 	clz	r3, r3
 800ad40:	b2db      	uxtb	r3, r3
 800ad42:	009b      	lsls	r3, r3, #2
 800ad44:	210f      	movs	r1, #15
 800ad46:	fa01 f303 	lsl.w	r3, r1, r3
 800ad4a:	43db      	mvns	r3, r3
 800ad4c:	401a      	ands	r2, r3
 800ad4e:	68bb      	ldr	r3, [r7, #8]
 800ad50:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ad52:	69fb      	ldr	r3, [r7, #28]
 800ad54:	fa93 f3a3 	rbit	r3, r3
 800ad58:	61bb      	str	r3, [r7, #24]
  return result;
 800ad5a:	69bb      	ldr	r3, [r7, #24]
 800ad5c:	fab3 f383 	clz	r3, r3
 800ad60:	b2db      	uxtb	r3, r3
 800ad62:	009b      	lsls	r3, r3, #2
 800ad64:	6879      	ldr	r1, [r7, #4]
 800ad66:	fa01 f303 	lsl.w	r3, r1, r3
 800ad6a:	431a      	orrs	r2, r3
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	621a      	str	r2, [r3, #32]
}
 800ad70:	bf00      	nop
 800ad72:	3724      	adds	r7, #36	; 0x24
 800ad74:	46bd      	mov	sp, r7
 800ad76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7a:	4770      	bx	lr

0800ad7c <LL_GPIO_SetAFPin_8_15>:
{
 800ad7c:	b480      	push	{r7}
 800ad7e:	b089      	sub	sp, #36	; 0x24
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	60f8      	str	r0, [r7, #12]
 800ad84:	60b9      	str	r1, [r7, #8]
 800ad86:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ad8c:	68bb      	ldr	r3, [r7, #8]
 800ad8e:	0a1b      	lsrs	r3, r3, #8
 800ad90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ad92:	697b      	ldr	r3, [r7, #20]
 800ad94:	fa93 f3a3 	rbit	r3, r3
 800ad98:	613b      	str	r3, [r7, #16]
  return result;
 800ad9a:	693b      	ldr	r3, [r7, #16]
 800ad9c:	fab3 f383 	clz	r3, r3
 800ada0:	b2db      	uxtb	r3, r3
 800ada2:	009b      	lsls	r3, r3, #2
 800ada4:	210f      	movs	r1, #15
 800ada6:	fa01 f303 	lsl.w	r3, r1, r3
 800adaa:	43db      	mvns	r3, r3
 800adac:	401a      	ands	r2, r3
 800adae:	68bb      	ldr	r3, [r7, #8]
 800adb0:	0a1b      	lsrs	r3, r3, #8
 800adb2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800adb4:	69fb      	ldr	r3, [r7, #28]
 800adb6:	fa93 f3a3 	rbit	r3, r3
 800adba:	61bb      	str	r3, [r7, #24]
  return result;
 800adbc:	69bb      	ldr	r3, [r7, #24]
 800adbe:	fab3 f383 	clz	r3, r3
 800adc2:	b2db      	uxtb	r3, r3
 800adc4:	009b      	lsls	r3, r3, #2
 800adc6:	6879      	ldr	r1, [r7, #4]
 800adc8:	fa01 f303 	lsl.w	r3, r1, r3
 800adcc:	431a      	orrs	r2, r3
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	625a      	str	r2, [r3, #36]	; 0x24
}
 800add2:	bf00      	nop
 800add4:	3724      	adds	r7, #36	; 0x24
 800add6:	46bd      	mov	sp, r7
 800add8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800addc:	4770      	bx	lr

0800adde <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800adde:	b580      	push	{r7, lr}
 800ade0:	b086      	sub	sp, #24
 800ade2:	af00      	add	r7, sp, #0
 800ade4:	6078      	str	r0, [r7, #4]
 800ade6:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800ade8:	683b      	ldr	r3, [r7, #0]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	fa93 f3a3 	rbit	r3, r3
 800adf4:	60bb      	str	r3, [r7, #8]
  return result;
 800adf6:	68bb      	ldr	r3, [r7, #8]
 800adf8:	fab3 f383 	clz	r3, r3
 800adfc:	b2db      	uxtb	r3, r3
 800adfe:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800ae00:	e040      	b.n	800ae84 <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	681a      	ldr	r2, [r3, #0]
 800ae06:	2101      	movs	r1, #1
 800ae08:	697b      	ldr	r3, [r7, #20]
 800ae0a:	fa01 f303 	lsl.w	r3, r1, r3
 800ae0e:	4013      	ands	r3, r2
 800ae10:	613b      	str	r3, [r7, #16]

    if (currentpin != 0x00u)
 800ae12:	693b      	ldr	r3, [r7, #16]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d032      	beq.n	800ae7e <LL_GPIO_Init+0xa0>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800ae18:	683b      	ldr	r3, [r7, #0]
 800ae1a:	685b      	ldr	r3, [r3, #4]
 800ae1c:	461a      	mov	r2, r3
 800ae1e:	6939      	ldr	r1, [r7, #16]
 800ae20:	6878      	ldr	r0, [r7, #4]
 800ae22:	f7ff fed7 	bl	800abd4 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800ae26:	683b      	ldr	r3, [r7, #0]
 800ae28:	685b      	ldr	r3, [r3, #4]
 800ae2a:	2b01      	cmp	r3, #1
 800ae2c:	d003      	beq.n	800ae36 <LL_GPIO_Init+0x58>
 800ae2e:	683b      	ldr	r3, [r7, #0]
 800ae30:	685b      	ldr	r3, [r3, #4]
 800ae32:	2b02      	cmp	r3, #2
 800ae34:	d106      	bne.n	800ae44 <LL_GPIO_Init+0x66>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800ae36:	683b      	ldr	r3, [r7, #0]
 800ae38:	689b      	ldr	r3, [r3, #8]
 800ae3a:	461a      	mov	r2, r3
 800ae3c:	6939      	ldr	r1, [r7, #16]
 800ae3e:	6878      	ldr	r0, [r7, #4]
 800ae40:	f7ff ff0f 	bl	800ac62 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800ae44:	683b      	ldr	r3, [r7, #0]
 800ae46:	691b      	ldr	r3, [r3, #16]
 800ae48:	461a      	mov	r2, r3
 800ae4a:	6939      	ldr	r1, [r7, #16]
 800ae4c:	6878      	ldr	r0, [r7, #4]
 800ae4e:	f7ff ff37 	bl	800acc0 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800ae52:	683b      	ldr	r3, [r7, #0]
 800ae54:	685b      	ldr	r3, [r3, #4]
 800ae56:	2b02      	cmp	r3, #2
 800ae58:	d111      	bne.n	800ae7e <LL_GPIO_Init+0xa0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800ae5a:	693b      	ldr	r3, [r7, #16]
 800ae5c:	2bff      	cmp	r3, #255	; 0xff
 800ae5e:	d807      	bhi.n	800ae70 <LL_GPIO_Init+0x92>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800ae60:	683b      	ldr	r3, [r7, #0]
 800ae62:	695b      	ldr	r3, [r3, #20]
 800ae64:	461a      	mov	r2, r3
 800ae66:	6939      	ldr	r1, [r7, #16]
 800ae68:	6878      	ldr	r0, [r7, #4]
 800ae6a:	f7ff ff58 	bl	800ad1e <LL_GPIO_SetAFPin_0_7>
 800ae6e:	e006      	b.n	800ae7e <LL_GPIO_Init+0xa0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800ae70:	683b      	ldr	r3, [r7, #0]
 800ae72:	695b      	ldr	r3, [r3, #20]
 800ae74:	461a      	mov	r2, r3
 800ae76:	6939      	ldr	r1, [r7, #16]
 800ae78:	6878      	ldr	r0, [r7, #4]
 800ae7a:	f7ff ff7f 	bl	800ad7c <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 800ae7e:	697b      	ldr	r3, [r7, #20]
 800ae80:	3301      	adds	r3, #1
 800ae82:	617b      	str	r3, [r7, #20]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800ae84:	683b      	ldr	r3, [r7, #0]
 800ae86:	681a      	ldr	r2, [r3, #0]
 800ae88:	697b      	ldr	r3, [r7, #20]
 800ae8a:	fa22 f303 	lsr.w	r3, r2, r3
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d1b7      	bne.n	800ae02 <LL_GPIO_Init+0x24>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800ae92:	683b      	ldr	r3, [r7, #0]
 800ae94:	685b      	ldr	r3, [r3, #4]
 800ae96:	2b01      	cmp	r3, #1
 800ae98:	d003      	beq.n	800aea2 <LL_GPIO_Init+0xc4>
 800ae9a:	683b      	ldr	r3, [r7, #0]
 800ae9c:	685b      	ldr	r3, [r3, #4]
 800ae9e:	2b02      	cmp	r3, #2
 800aea0:	d107      	bne.n	800aeb2 <LL_GPIO_Init+0xd4>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800aea2:	683b      	ldr	r3, [r7, #0]
 800aea4:	6819      	ldr	r1, [r3, #0]
 800aea6:	683b      	ldr	r3, [r7, #0]
 800aea8:	68db      	ldr	r3, [r3, #12]
 800aeaa:	461a      	mov	r2, r3
 800aeac:	6878      	ldr	r0, [r7, #4]
 800aeae:	f7ff fec0 	bl	800ac32 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 800aeb2:	2300      	movs	r3, #0
}
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	3718      	adds	r7, #24
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	bd80      	pop	{r7, pc}

0800aebc <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>:
 *
 *
 */

void ILI9341_Draw_Bordered_Filled_Rectangle_Coord(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t inner_colour, uint8_t border_weight, uint8_t border_colour)
{
 800aebc:	b590      	push	{r4, r7, lr}
 800aebe:	b087      	sub	sp, #28
 800aec0:	af02      	add	r7, sp, #8
 800aec2:	4604      	mov	r4, r0
 800aec4:	4608      	mov	r0, r1
 800aec6:	4611      	mov	r1, r2
 800aec8:	461a      	mov	r2, r3
 800aeca:	4623      	mov	r3, r4
 800aecc:	80fb      	strh	r3, [r7, #6]
 800aece:	4603      	mov	r3, r0
 800aed0:	80bb      	strh	r3, [r7, #4]
 800aed2:	460b      	mov	r3, r1
 800aed4:	807b      	strh	r3, [r7, #2]
 800aed6:	4613      	mov	r3, r2
 800aed8:	803b      	strh	r3, [r7, #0]

	// Draw inwards (and shorter) for each level of border weight
	for(uint8_t b = 0; ; b++)
 800aeda:	2300      	movs	r3, #0
 800aedc:	73fb      	strb	r3, [r7, #15]
	{


		if(b > border_weight)
 800aede:	7bfa      	ldrb	r2, [r7, #15]
 800aee0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800aee4:	429a      	cmp	r2, r3
 800aee6:	d93a      	bls.n	800af5e <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0xa2>
		{

			// stop before the inner space reaches zero! (hard fault)
			if( ((y + b) == ((y + h) - b)) || ((x + b) == ((x + w) - b)) )
 800aee8:	88ba      	ldrh	r2, [r7, #4]
 800aeea:	7bfb      	ldrb	r3, [r7, #15]
 800aeec:	441a      	add	r2, r3
 800aeee:	88b9      	ldrh	r1, [r7, #4]
 800aef0:	883b      	ldrh	r3, [r7, #0]
 800aef2:	4419      	add	r1, r3
 800aef4:	7bfb      	ldrb	r3, [r7, #15]
 800aef6:	1acb      	subs	r3, r1, r3
 800aef8:	429a      	cmp	r2, r3
 800aefa:	f000 8090 	beq.w	800b01e <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x162>
 800aefe:	88fa      	ldrh	r2, [r7, #6]
 800af00:	7bfb      	ldrb	r3, [r7, #15]
 800af02:	441a      	add	r2, r3
 800af04:	88f9      	ldrh	r1, [r7, #6]
 800af06:	887b      	ldrh	r3, [r7, #2]
 800af08:	4419      	add	r1, r3
 800af0a:	7bfb      	ldrb	r3, [r7, #15]
 800af0c:	1acb      	subs	r3, r1, r3
 800af0e:	429a      	cmp	r2, r3
 800af10:	f000 8085 	beq.w	800b01e <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x162>
				// add final line?
				goto finish;
			}
			else
			{
				ILI9341_Draw_Rectangle(x + b, y + b, (w - (2*b)) + 1, (h - (2*b)) + 1, inner_colour, AREA_CHUNK);
 800af14:	7bfb      	ldrb	r3, [r7, #15]
 800af16:	b29a      	uxth	r2, r3
 800af18:	88fb      	ldrh	r3, [r7, #6]
 800af1a:	4413      	add	r3, r2
 800af1c:	b298      	uxth	r0, r3
 800af1e:	7bfb      	ldrb	r3, [r7, #15]
 800af20:	b29a      	uxth	r2, r3
 800af22:	88bb      	ldrh	r3, [r7, #4]
 800af24:	4413      	add	r3, r2
 800af26:	b299      	uxth	r1, r3
 800af28:	7bfb      	ldrb	r3, [r7, #15]
 800af2a:	b29b      	uxth	r3, r3
 800af2c:	005b      	lsls	r3, r3, #1
 800af2e:	b29b      	uxth	r3, r3
 800af30:	887a      	ldrh	r2, [r7, #2]
 800af32:	1ad3      	subs	r3, r2, r3
 800af34:	b29b      	uxth	r3, r3
 800af36:	3301      	adds	r3, #1
 800af38:	b29c      	uxth	r4, r3
 800af3a:	7bfb      	ldrb	r3, [r7, #15]
 800af3c:	b29b      	uxth	r3, r3
 800af3e:	005b      	lsls	r3, r3, #1
 800af40:	b29b      	uxth	r3, r3
 800af42:	883a      	ldrh	r2, [r7, #0]
 800af44:	1ad3      	subs	r3, r2, r3
 800af46:	b29b      	uxth	r3, r3
 800af48:	3301      	adds	r3, #1
 800af4a:	b29a      	uxth	r2, r3
 800af4c:	2304      	movs	r3, #4
 800af4e:	9301      	str	r3, [sp, #4]
 800af50:	8c3b      	ldrh	r3, [r7, #32]
 800af52:	9300      	str	r3, [sp, #0]
 800af54:	4613      	mov	r3, r2
 800af56:	4622      	mov	r2, r4
 800af58:	f000 fcd6 	bl	800b908 <ILI9341_Draw_Rectangle>
				goto finish;
 800af5c:	e060      	b.n	800b020 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x164>
			}
		}

		// Horizontal lines
		ILI9341_Draw_Horizontal_Line(	x + b,
 800af5e:	7bfb      	ldrb	r3, [r7, #15]
 800af60:	b29a      	uxth	r2, r3
 800af62:	88fb      	ldrh	r3, [r7, #6]
 800af64:	4413      	add	r3, r2
 800af66:	b298      	uxth	r0, r3
 800af68:	7bfb      	ldrb	r3, [r7, #15]
 800af6a:	b29a      	uxth	r2, r3
 800af6c:	88bb      	ldrh	r3, [r7, #4]
 800af6e:	4413      	add	r3, r2
 800af70:	b299      	uxth	r1, r3
 800af72:	7bfb      	ldrb	r3, [r7, #15]
 800af74:	b29b      	uxth	r3, r3
 800af76:	005b      	lsls	r3, r3, #1
 800af78:	b29b      	uxth	r3, r3
 800af7a:	887a      	ldrh	r2, [r7, #2]
 800af7c:	1ad3      	subs	r3, r2, r3
 800af7e:	b29a      	uxth	r2, r3
 800af80:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800af84:	b29b      	uxth	r3, r3
 800af86:	f000 fa81 	bl	800b48c <ILI9341_Draw_Horizontal_Line>
										y + b,
										w - (2*b),
										border_colour);

		ILI9341_Draw_Horizontal_Line(	x + b,
 800af8a:	7bfb      	ldrb	r3, [r7, #15]
 800af8c:	b29a      	uxth	r2, r3
 800af8e:	88fb      	ldrh	r3, [r7, #6]
 800af90:	4413      	add	r3, r2
 800af92:	b298      	uxth	r0, r3
										(y + h) - b,
 800af94:	88ba      	ldrh	r2, [r7, #4]
 800af96:	883b      	ldrh	r3, [r7, #0]
 800af98:	4413      	add	r3, r2
 800af9a:	b29a      	uxth	r2, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 800af9c:	7bfb      	ldrb	r3, [r7, #15]
 800af9e:	b29b      	uxth	r3, r3
 800afa0:	1ad3      	subs	r3, r2, r3
 800afa2:	b299      	uxth	r1, r3
 800afa4:	7bfb      	ldrb	r3, [r7, #15]
 800afa6:	b29b      	uxth	r3, r3
 800afa8:	887a      	ldrh	r2, [r7, #2]
 800afaa:	1ad3      	subs	r3, r2, r3
 800afac:	b29a      	uxth	r2, r3
 800afae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800afb2:	b29b      	uxth	r3, r3
 800afb4:	f000 fa6a 	bl	800b48c <ILI9341_Draw_Horizontal_Line>
										w - (b),
										border_colour);


		// Vertical lines
		ILI9341_Draw_Vertical_Line(		x + b,
 800afb8:	7bfb      	ldrb	r3, [r7, #15]
 800afba:	b29a      	uxth	r2, r3
 800afbc:	88fb      	ldrh	r3, [r7, #6]
 800afbe:	4413      	add	r3, r2
 800afc0:	b298      	uxth	r0, r3
 800afc2:	7bfb      	ldrb	r3, [r7, #15]
 800afc4:	b29a      	uxth	r2, r3
 800afc6:	88bb      	ldrh	r3, [r7, #4]
 800afc8:	4413      	add	r3, r2
 800afca:	b299      	uxth	r1, r3
 800afcc:	7bfb      	ldrb	r3, [r7, #15]
 800afce:	b29b      	uxth	r3, r3
 800afd0:	005b      	lsls	r3, r3, #1
 800afd2:	b29b      	uxth	r3, r3
 800afd4:	883a      	ldrh	r2, [r7, #0]
 800afd6:	1ad3      	subs	r3, r2, r3
 800afd8:	b29a      	uxth	r2, r3
 800afda:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800afde:	b29b      	uxth	r3, r3
 800afe0:	f000 fa9c 	bl	800b51c <ILI9341_Draw_Vertical_Line>
										y + b,
										h - (2*b),
										border_colour);

		ILI9341_Draw_Vertical_Line(		(x + w) - b,
 800afe4:	88fa      	ldrh	r2, [r7, #6]
 800afe6:	887b      	ldrh	r3, [r7, #2]
 800afe8:	4413      	add	r3, r2
 800afea:	b29a      	uxth	r2, r3
 800afec:	7bfb      	ldrb	r3, [r7, #15]
 800afee:	b29b      	uxth	r3, r3
 800aff0:	1ad3      	subs	r3, r2, r3
 800aff2:	b298      	uxth	r0, r3
 800aff4:	7bfb      	ldrb	r3, [r7, #15]
 800aff6:	b29a      	uxth	r2, r3
 800aff8:	88bb      	ldrh	r3, [r7, #4]
 800affa:	4413      	add	r3, r2
 800affc:	b299      	uxth	r1, r3
 800affe:	7bfb      	ldrb	r3, [r7, #15]
 800b000:	b29b      	uxth	r3, r3
 800b002:	005b      	lsls	r3, r3, #1
 800b004:	b29b      	uxth	r3, r3
 800b006:	883a      	ldrh	r2, [r7, #0]
 800b008:	1ad3      	subs	r3, r2, r3
 800b00a:	b29a      	uxth	r2, r3
 800b00c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b010:	b29b      	uxth	r3, r3
 800b012:	f000 fa83 	bl	800b51c <ILI9341_Draw_Vertical_Line>
	for(uint8_t b = 0; ; b++)
 800b016:	7bfb      	ldrb	r3, [r7, #15]
 800b018:	3301      	adds	r3, #1
 800b01a:	73fb      	strb	r3, [r7, #15]
		if(b > border_weight)
 800b01c:	e75f      	b.n	800aede <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x22>
										h - (2*b),
										border_colour);

	}

	finish:
 800b01e:	bf00      	nop
	// done
	return;
 800b020:	bf00      	nop
}
 800b022:	3714      	adds	r7, #20
 800b024:	46bd      	mov	sp, r7
 800b026:	bd90      	pop	{r4, r7, pc}

0800b028 <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at x,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char character, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 800b028:	b590      	push	{r4, r7, lr}
 800b02a:	b089      	sub	sp, #36	; 0x24
 800b02c:	af02      	add	r7, sp, #8
 800b02e:	4604      	mov	r4, r0
 800b030:	4608      	mov	r0, r1
 800b032:	4611      	mov	r1, r2
 800b034:	461a      	mov	r2, r3
 800b036:	4623      	mov	r3, r4
 800b038:	71fb      	strb	r3, [r7, #7]
 800b03a:	4603      	mov	r3, r0
 800b03c:	80bb      	strh	r3, [r7, #4]
 800b03e:	460b      	mov	r3, r1
 800b040:	807b      	strh	r3, [r7, #2]
 800b042:	4613      	mov	r3, r2
 800b044:	803b      	strh	r3, [r7, #0]
    uint8_t 	i,j;
		



	function_char = character;
 800b046:	79fb      	ldrb	r3, [r7, #7]
 800b048:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ')
 800b04a:	7dfb      	ldrb	r3, [r7, #23]
 800b04c:	2b1f      	cmp	r3, #31
 800b04e:	d802      	bhi.n	800b056 <ILI9341_Draw_Char+0x2e>
    {
        character = 0;
 800b050:	2300      	movs	r3, #0
 800b052:	71fb      	strb	r3, [r7, #7]
 800b054:	e002      	b.n	800b05c <ILI9341_Draw_Char+0x34>
    }
    else
    {
    	function_char -= 32;
 800b056:	7dfb      	ldrb	r3, [r7, #23]
 800b058:	3b20      	subs	r3, #32
 800b05a:	75fb      	strb	r3, [r7, #23]
	}
   	
	char temp[CHAR_WIDTH];

	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800b05c:	2300      	movs	r3, #0
 800b05e:	753b      	strb	r3, [r7, #20]
 800b060:	e012      	b.n	800b088 <ILI9341_Draw_Char+0x60>
	{
		temp[k] = font[function_char][k];
 800b062:	7dfa      	ldrb	r2, [r7, #23]
 800b064:	7d38      	ldrb	r0, [r7, #20]
 800b066:	7d39      	ldrb	r1, [r7, #20]
 800b068:	4c48      	ldr	r4, [pc, #288]	; (800b18c <ILI9341_Draw_Char+0x164>)
 800b06a:	4613      	mov	r3, r2
 800b06c:	005b      	lsls	r3, r3, #1
 800b06e:	4413      	add	r3, r2
 800b070:	005b      	lsls	r3, r3, #1
 800b072:	4423      	add	r3, r4
 800b074:	4403      	add	r3, r0
 800b076:	781a      	ldrb	r2, [r3, #0]
 800b078:	f107 0318 	add.w	r3, r7, #24
 800b07c:	440b      	add	r3, r1
 800b07e:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800b082:	7d3b      	ldrb	r3, [r7, #20]
 800b084:	3301      	adds	r3, #1
 800b086:	753b      	strb	r3, [r7, #20]
 800b088:	7d3b      	ldrb	r3, [r7, #20]
 800b08a:	2b05      	cmp	r3, #5
 800b08c:	d9e9      	bls.n	800b062 <ILI9341_Draw_Char+0x3a>
	}
		
    // Draw pixels
	//ILI9341_Draw_Rectangle(x, Y, CHAR_WIDTH*size, CHAR_HEIGHT*size, bgcolour);
    for (j=0; j<CHAR_WIDTH; j++)
 800b08e:	2300      	movs	r3, #0
 800b090:	757b      	strb	r3, [r7, #21]
 800b092:	e074      	b.n	800b17e <ILI9341_Draw_Char+0x156>
    {
        for (i=0; i<CHAR_HEIGHT; i++)
 800b094:	2300      	movs	r3, #0
 800b096:	75bb      	strb	r3, [r7, #22]
 800b098:	e06b      	b.n	800b172 <ILI9341_Draw_Char+0x14a>
        {
            if (temp[j] & (1<<i))
 800b09a:	7d7b      	ldrb	r3, [r7, #21]
 800b09c:	f107 0218 	add.w	r2, r7, #24
 800b0a0:	4413      	add	r3, r2
 800b0a2:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800b0a6:	461a      	mov	r2, r3
 800b0a8:	7dbb      	ldrb	r3, [r7, #22]
 800b0aa:	fa42 f303 	asr.w	r3, r2, r3
 800b0ae:	f003 0301 	and.w	r3, r3, #1
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d02d      	beq.n	800b112 <ILI9341_Draw_Char+0xea>
            {
            	if(size == 1)
 800b0b6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b0b8:	2b01      	cmp	r3, #1
 800b0ba:	d10e      	bne.n	800b0da <ILI9341_Draw_Char+0xb2>
				{
            		ILI9341_Draw_Pixel(x+j, y+i, colour);
 800b0bc:	7d7b      	ldrb	r3, [r7, #21]
 800b0be:	b29a      	uxth	r2, r3
 800b0c0:	88bb      	ldrh	r3, [r7, #4]
 800b0c2:	4413      	add	r3, r2
 800b0c4:	b298      	uxth	r0, r3
 800b0c6:	7dbb      	ldrb	r3, [r7, #22]
 800b0c8:	b29a      	uxth	r2, r3
 800b0ca:	887b      	ldrh	r3, [r7, #2]
 800b0cc:	4413      	add	r3, r2
 800b0ce:	b29b      	uxth	r3, r3
 800b0d0:	883a      	ldrh	r2, [r7, #0]
 800b0d2:	4619      	mov	r1, r3
 800b0d4:	f000 fae0 	bl	800b698 <ILI9341_Draw_Pixel>
 800b0d8:	e048      	b.n	800b16c <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, colour, TEXT_CHUNK);
 800b0da:	7d7b      	ldrb	r3, [r7, #21]
 800b0dc:	b29b      	uxth	r3, r3
 800b0de:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800b0e0:	fb12 f303 	smulbb	r3, r2, r3
 800b0e4:	b29a      	uxth	r2, r3
 800b0e6:	88bb      	ldrh	r3, [r7, #4]
 800b0e8:	4413      	add	r3, r2
 800b0ea:	b298      	uxth	r0, r3
 800b0ec:	7dbb      	ldrb	r3, [r7, #22]
 800b0ee:	b29b      	uxth	r3, r3
 800b0f0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800b0f2:	fb12 f303 	smulbb	r3, r2, r3
 800b0f6:	b29a      	uxth	r2, r3
 800b0f8:	887b      	ldrh	r3, [r7, #2]
 800b0fa:	4413      	add	r3, r2
 800b0fc:	b299      	uxth	r1, r3
 800b0fe:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 800b100:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800b102:	2301      	movs	r3, #1
 800b104:	9301      	str	r3, [sp, #4]
 800b106:	883b      	ldrh	r3, [r7, #0]
 800b108:	9300      	str	r3, [sp, #0]
 800b10a:	4623      	mov	r3, r4
 800b10c:	f000 fbfc 	bl	800b908 <ILI9341_Draw_Rectangle>
 800b110:	e02c      	b.n	800b16c <ILI9341_Draw_Char+0x144>
				}
            }
            else
            {
               	if(size == 1)
 800b112:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b114:	2b01      	cmp	r3, #1
 800b116:	d10e      	bne.n	800b136 <ILI9341_Draw_Char+0x10e>
				{
					ILI9341_Draw_Pixel(x+j, y+i, bgcolour);
 800b118:	7d7b      	ldrb	r3, [r7, #21]
 800b11a:	b29a      	uxth	r2, r3
 800b11c:	88bb      	ldrh	r3, [r7, #4]
 800b11e:	4413      	add	r3, r2
 800b120:	b298      	uxth	r0, r3
 800b122:	7dbb      	ldrb	r3, [r7, #22]
 800b124:	b29a      	uxth	r2, r3
 800b126:	887b      	ldrh	r3, [r7, #2]
 800b128:	4413      	add	r3, r2
 800b12a:	b29b      	uxth	r3, r3
 800b12c:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800b12e:	4619      	mov	r1, r3
 800b130:	f000 fab2 	bl	800b698 <ILI9341_Draw_Pixel>
 800b134:	e01a      	b.n	800b16c <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, bgcolour, TEXT_CHUNK);
 800b136:	7d7b      	ldrb	r3, [r7, #21]
 800b138:	b29b      	uxth	r3, r3
 800b13a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800b13c:	fb12 f303 	smulbb	r3, r2, r3
 800b140:	b29a      	uxth	r2, r3
 800b142:	88bb      	ldrh	r3, [r7, #4]
 800b144:	4413      	add	r3, r2
 800b146:	b298      	uxth	r0, r3
 800b148:	7dbb      	ldrb	r3, [r7, #22]
 800b14a:	b29b      	uxth	r3, r3
 800b14c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800b14e:	fb12 f303 	smulbb	r3, r2, r3
 800b152:	b29a      	uxth	r2, r3
 800b154:	887b      	ldrh	r3, [r7, #2]
 800b156:	4413      	add	r3, r2
 800b158:	b299      	uxth	r1, r3
 800b15a:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 800b15c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800b15e:	2301      	movs	r3, #1
 800b160:	9301      	str	r3, [sp, #4]
 800b162:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b164:	9300      	str	r3, [sp, #0]
 800b166:	4623      	mov	r3, r4
 800b168:	f000 fbce 	bl	800b908 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++)
 800b16c:	7dbb      	ldrb	r3, [r7, #22]
 800b16e:	3301      	adds	r3, #1
 800b170:	75bb      	strb	r3, [r7, #22]
 800b172:	7dbb      	ldrb	r3, [r7, #22]
 800b174:	2b07      	cmp	r3, #7
 800b176:	d990      	bls.n	800b09a <ILI9341_Draw_Char+0x72>
    for (j=0; j<CHAR_WIDTH; j++)
 800b178:	7d7b      	ldrb	r3, [r7, #21]
 800b17a:	3301      	adds	r3, #1
 800b17c:	757b      	strb	r3, [r7, #21]
 800b17e:	7d7b      	ldrb	r3, [r7, #21]
 800b180:	2b05      	cmp	r3, #5
 800b182:	d987      	bls.n	800b094 <ILI9341_Draw_Char+0x6c>
				}
            }
        }
    }
}
 800b184:	bf00      	nop
 800b186:	371c      	adds	r7, #28
 800b188:	46bd      	mov	sp, r7
 800b18a:	bd90      	pop	{r4, r7, pc}
 800b18c:	0800eac0 	.word	0x0800eac0

0800b190 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at x,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 800b190:	b590      	push	{r4, r7, lr}
 800b192:	b087      	sub	sp, #28
 800b194:	af02      	add	r7, sp, #8
 800b196:	60f8      	str	r0, [r7, #12]
 800b198:	4608      	mov	r0, r1
 800b19a:	4611      	mov	r1, r2
 800b19c:	461a      	mov	r2, r3
 800b19e:	4603      	mov	r3, r0
 800b1a0:	817b      	strh	r3, [r7, #10]
 800b1a2:	460b      	mov	r3, r1
 800b1a4:	813b      	strh	r3, [r7, #8]
 800b1a6:	4613      	mov	r3, r2
 800b1a8:	80fb      	strh	r3, [r7, #6]
    /*if(size & 1)
    {
    	size = ((size >> 1) * 2);
    }*/

    while (*Text) {
 800b1aa:	e016      	b.n	800b1da <ILI9341_Draw_Text+0x4a>
        ILI9341_Draw_Char(*Text++, x, y, colour, size, bgcolour);
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	1c5a      	adds	r2, r3, #1
 800b1b0:	60fa      	str	r2, [r7, #12]
 800b1b2:	7818      	ldrb	r0, [r3, #0]
 800b1b4:	88fc      	ldrh	r4, [r7, #6]
 800b1b6:	893a      	ldrh	r2, [r7, #8]
 800b1b8:	8979      	ldrh	r1, [r7, #10]
 800b1ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b1bc:	9301      	str	r3, [sp, #4]
 800b1be:	8c3b      	ldrh	r3, [r7, #32]
 800b1c0:	9300      	str	r3, [sp, #0]
 800b1c2:	4623      	mov	r3, r4
 800b1c4:	f7ff ff30 	bl	800b028 <ILI9341_Draw_Char>
        x += CHAR_WIDTH*size;
 800b1c8:	8c3b      	ldrh	r3, [r7, #32]
 800b1ca:	461a      	mov	r2, r3
 800b1cc:	0052      	lsls	r2, r2, #1
 800b1ce:	4413      	add	r3, r2
 800b1d0:	005b      	lsls	r3, r3, #1
 800b1d2:	b29a      	uxth	r2, r3
 800b1d4:	897b      	ldrh	r3, [r7, #10]
 800b1d6:	4413      	add	r3, r2
 800b1d8:	817b      	strh	r3, [r7, #10]
    while (*Text) {
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	781b      	ldrb	r3, [r3, #0]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d1e4      	bne.n	800b1ac <ILI9341_Draw_Text+0x1c>
    }


}
 800b1e2:	bf00      	nop
 800b1e4:	3714      	adds	r7, #20
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	bd90      	pop	{r4, r7, pc}
	...

0800b1ec <ILI9341_FillScreenGradient>:
		GPIOC->ODR |= CS_Pin;
	}
}

void ILI9341_FillScreenGradient()
{
 800b1ec:	b580      	push	{r7, lr}
 800b1ee:	b084      	sub	sp, #16
 800b1f0:	af02      	add	r7, sp, #8
	uint16_t x = 0;
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	80bb      	strh	r3, [r7, #4]
	//ILI9341_Draw_Text("Colour gradient", 10, 10, BLACK, 1, WHITE);
	//ILI9341_Draw_Text("Grayscale", 10, 20, BLACK, 1, WHITE);



	for(uint16_t i = 0; i <= (320); i++)
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	80fb      	strh	r3, [r7, #6]
 800b1fa:	e010      	b.n	800b21e <ILI9341_FillScreenGradient+0x32>

		uint16_t RGB_color = Red + Green + Blue;
		ILI9341_Draw_Rectangle(i, x, 1, 240, RGB_color, AREA_CHUNK);
*/

	ILI9341_Draw_Rectangle(i, x, 1, 240, (uint16_t)fade_log_seq_data_table[i], AREA_CHUNK);
 800b1fc:	88fb      	ldrh	r3, [r7, #6]
 800b1fe:	4a0c      	ldr	r2, [pc, #48]	; (800b230 <ILI9341_FillScreenGradient+0x44>)
 800b200:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b204:	b29b      	uxth	r3, r3
 800b206:	88b9      	ldrh	r1, [r7, #4]
 800b208:	88f8      	ldrh	r0, [r7, #6]
 800b20a:	2204      	movs	r2, #4
 800b20c:	9201      	str	r2, [sp, #4]
 800b20e:	9300      	str	r3, [sp, #0]
 800b210:	23f0      	movs	r3, #240	; 0xf0
 800b212:	2201      	movs	r2, #1
 800b214:	f000 fb78 	bl	800b908 <ILI9341_Draw_Rectangle>
	for(uint16_t i = 0; i <= (320); i++)
 800b218:	88fb      	ldrh	r3, [r7, #6]
 800b21a:	3301      	adds	r3, #1
 800b21c:	80fb      	strh	r3, [r7, #6]
 800b21e:	88fb      	ldrh	r3, [r7, #6]
 800b220:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800b224:	d9ea      	bls.n	800b1fc <ILI9341_FillScreenGradient+0x10>

	}
}
 800b226:	bf00      	nop
 800b228:	3708      	adds	r7, #8
 800b22a:	46bd      	mov	sp, r7
 800b22c:	bd80      	pop	{r7, pc}
 800b22e:	bf00      	nop
 800b230:	200001c0 	.word	0x200001c0

0800b234 <ILI9341_Init>:
 *
 * Initialize LCD display
 *
 */
void ILI9341_Init(void)
{
 800b234:	b580      	push	{r7, lr}
 800b236:	af00      	add	r7, sp, #0

	_LCD_Enable();
 800b238:	f000 fc3a 	bl	800bab0 <_LCD_Enable>
	ILI9341_SPI_Init();
 800b23c:	f000 f908 	bl	800b450 <ILI9341_SPI_Init>
	_LCD_Reset();
 800b240:	f000 fc46 	bl	800bad0 <_LCD_Reset>

	//SOFTWARE RESET
	_LCD_SendCommand(0x01);
 800b244:	2001      	movs	r0, #1
 800b246:	f000 fd11 	bl	800bc6c <_LCD_SendCommand>
	HAL_Delay(2000);
 800b24a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b24e:	f7fa fa91 	bl	8005774 <HAL_Delay>

	//POWER CONTROL A
	_LCD_SendCommand(0xCB);
 800b252:	20cb      	movs	r0, #203	; 0xcb
 800b254:	f000 fd0a 	bl	800bc6c <_LCD_SendCommand>
	_LCD_SendData(0x39);
 800b258:	2039      	movs	r0, #57	; 0x39
 800b25a:	f000 fd39 	bl	800bcd0 <_LCD_SendData>
	_LCD_SendData(0x2C);
 800b25e:	202c      	movs	r0, #44	; 0x2c
 800b260:	f000 fd36 	bl	800bcd0 <_LCD_SendData>
	_LCD_SendData(0x00);
 800b264:	2000      	movs	r0, #0
 800b266:	f000 fd33 	bl	800bcd0 <_LCD_SendData>
	_LCD_SendData(0x34);
 800b26a:	2034      	movs	r0, #52	; 0x34
 800b26c:	f000 fd30 	bl	800bcd0 <_LCD_SendData>
	_LCD_SendData(0x02);
 800b270:	2002      	movs	r0, #2
 800b272:	f000 fd2d 	bl	800bcd0 <_LCD_SendData>

	//POWER CONTROL B
	_LCD_SendCommand(0xCF);
 800b276:	20cf      	movs	r0, #207	; 0xcf
 800b278:	f000 fcf8 	bl	800bc6c <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800b27c:	2000      	movs	r0, #0
 800b27e:	f000 fd27 	bl	800bcd0 <_LCD_SendData>
	_LCD_SendData(0xC1);
 800b282:	20c1      	movs	r0, #193	; 0xc1
 800b284:	f000 fd24 	bl	800bcd0 <_LCD_SendData>
	_LCD_SendData(0x30);
 800b288:	2030      	movs	r0, #48	; 0x30
 800b28a:	f000 fd21 	bl	800bcd0 <_LCD_SendData>

	//DRIVER TIMING CONTROL A
	_LCD_SendCommand(0xE8);
 800b28e:	20e8      	movs	r0, #232	; 0xe8
 800b290:	f000 fcec 	bl	800bc6c <_LCD_SendCommand>
	_LCD_SendData(0x85);
 800b294:	2085      	movs	r0, #133	; 0x85
 800b296:	f000 fd1b 	bl	800bcd0 <_LCD_SendData>
	_LCD_SendData(0x00);
 800b29a:	2000      	movs	r0, #0
 800b29c:	f000 fd18 	bl	800bcd0 <_LCD_SendData>
	_LCD_SendData(0x78);
 800b2a0:	2078      	movs	r0, #120	; 0x78
 800b2a2:	f000 fd15 	bl	800bcd0 <_LCD_SendData>

	//DRIVER TIMING CONTROL B
	_LCD_SendCommand(0xEA);
 800b2a6:	20ea      	movs	r0, #234	; 0xea
 800b2a8:	f000 fce0 	bl	800bc6c <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800b2ac:	2000      	movs	r0, #0
 800b2ae:	f000 fd0f 	bl	800bcd0 <_LCD_SendData>
	_LCD_SendData(0x00);
 800b2b2:	2000      	movs	r0, #0
 800b2b4:	f000 fd0c 	bl	800bcd0 <_LCD_SendData>

	//POWER ON SEQUENCE CONTROL
	_LCD_SendCommand(0xED);
 800b2b8:	20ed      	movs	r0, #237	; 0xed
 800b2ba:	f000 fcd7 	bl	800bc6c <_LCD_SendCommand>
	_LCD_SendData(0x64);
 800b2be:	2064      	movs	r0, #100	; 0x64
 800b2c0:	f000 fd06 	bl	800bcd0 <_LCD_SendData>
	_LCD_SendData(0x03);
 800b2c4:	2003      	movs	r0, #3
 800b2c6:	f000 fd03 	bl	800bcd0 <_LCD_SendData>
	_LCD_SendData(0x12);
 800b2ca:	2012      	movs	r0, #18
 800b2cc:	f000 fd00 	bl	800bcd0 <_LCD_SendData>
	_LCD_SendData(0x81);
 800b2d0:	2081      	movs	r0, #129	; 0x81
 800b2d2:	f000 fcfd 	bl	800bcd0 <_LCD_SendData>

	//PUMP RATIO CONTROL
	_LCD_SendCommand(0xF7);
 800b2d6:	20f7      	movs	r0, #247	; 0xf7
 800b2d8:	f000 fcc8 	bl	800bc6c <_LCD_SendCommand>
	_LCD_SendData(0x20);
 800b2dc:	2020      	movs	r0, #32
 800b2de:	f000 fcf7 	bl	800bcd0 <_LCD_SendData>

	//POWER CONTROL,VRH[5:0]
	_LCD_SendCommand(0xC0);
 800b2e2:	20c0      	movs	r0, #192	; 0xc0
 800b2e4:	f000 fcc2 	bl	800bc6c <_LCD_SendCommand>
	_LCD_SendData(0x23);
 800b2e8:	2023      	movs	r0, #35	; 0x23
 800b2ea:	f000 fcf1 	bl	800bcd0 <_LCD_SendData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	_LCD_SendCommand(0xC1);
 800b2ee:	20c1      	movs	r0, #193	; 0xc1
 800b2f0:	f000 fcbc 	bl	800bc6c <_LCD_SendCommand>
	_LCD_SendData(0x10);
 800b2f4:	2010      	movs	r0, #16
 800b2f6:	f000 fceb 	bl	800bcd0 <_LCD_SendData>

	//VCM CONTROL
	_LCD_SendCommand(0xC5);
 800b2fa:	20c5      	movs	r0, #197	; 0xc5
 800b2fc:	f000 fcb6 	bl	800bc6c <_LCD_SendCommand>
	_LCD_SendData(0x3E);
 800b300:	203e      	movs	r0, #62	; 0x3e
 800b302:	f000 fce5 	bl	800bcd0 <_LCD_SendData>
	_LCD_SendData(0x28);
 800b306:	2028      	movs	r0, #40	; 0x28
 800b308:	f000 fce2 	bl	800bcd0 <_LCD_SendData>

	//VCM CONTROL 2
	_LCD_SendCommand(0xC7);
 800b30c:	20c7      	movs	r0, #199	; 0xc7
 800b30e:	f000 fcad 	bl	800bc6c <_LCD_SendCommand>
	_LCD_SendData(0x86);
 800b312:	2086      	movs	r0, #134	; 0x86
 800b314:	f000 fcdc 	bl	800bcd0 <_LCD_SendData>

	//MEMORY ACCESS CONTROL
	_LCD_SendCommand(0x36);
 800b318:	2036      	movs	r0, #54	; 0x36
 800b31a:	f000 fca7 	bl	800bc6c <_LCD_SendCommand>
	_LCD_SendData(0x48);
 800b31e:	2048      	movs	r0, #72	; 0x48
 800b320:	f000 fcd6 	bl	800bcd0 <_LCD_SendData>


	//PIXEL FORMAT
	_LCD_SendCommand(0x3A);
 800b324:	203a      	movs	r0, #58	; 0x3a
 800b326:	f000 fca1 	bl	800bc6c <_LCD_SendCommand>
	_LCD_SendData(0x55);
 800b32a:	2055      	movs	r0, #85	; 0x55
 800b32c:	f000 fcd0 	bl	800bcd0 <_LCD_SendData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	_LCD_SendCommand(0xB1);
 800b330:	20b1      	movs	r0, #177	; 0xb1
 800b332:	f000 fc9b 	bl	800bc6c <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800b336:	2000      	movs	r0, #0
 800b338:	f000 fcca 	bl	800bcd0 <_LCD_SendData>
	_LCD_SendData(0x18);
 800b33c:	2018      	movs	r0, #24
 800b33e:	f000 fcc7 	bl	800bcd0 <_LCD_SendData>

	//DISPLAY FUNCTION CONTROL
	_LCD_SendCommand(0xB6);
 800b342:	20b6      	movs	r0, #182	; 0xb6
 800b344:	f000 fc92 	bl	800bc6c <_LCD_SendCommand>
	_LCD_SendData(0x08);
 800b348:	2008      	movs	r0, #8
 800b34a:	f000 fcc1 	bl	800bcd0 <_LCD_SendData>
	_LCD_SendData(0x82);
 800b34e:	2082      	movs	r0, #130	; 0x82
 800b350:	f000 fcbe 	bl	800bcd0 <_LCD_SendData>
	_LCD_SendData(0x27);
 800b354:	2027      	movs	r0, #39	; 0x27
 800b356:	f000 fcbb 	bl	800bcd0 <_LCD_SendData>


	//3GAMMA FUNCTION DISABLE
	_LCD_SendCommand(0xF2);
 800b35a:	20f2      	movs	r0, #242	; 0xf2
 800b35c:	f000 fc86 	bl	800bc6c <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800b360:	2000      	movs	r0, #0
 800b362:	f000 fcb5 	bl	800bcd0 <_LCD_SendData>

	//GAMMA CURVE SELECTED
	_LCD_SendCommand(0x26);
 800b366:	2026      	movs	r0, #38	; 0x26
 800b368:	f000 fc80 	bl	800bc6c <_LCD_SendCommand>
	_LCD_SendData(0x01);
 800b36c:	2001      	movs	r0, #1
 800b36e:	f000 fcaf 	bl	800bcd0 <_LCD_SendData>

	//POSITIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE0);
 800b372:	20e0      	movs	r0, #224	; 0xe0
 800b374:	f000 fc7a 	bl	800bc6c <_LCD_SendCommand>
	_LCD_SendData(0x0F);
 800b378:	200f      	movs	r0, #15
 800b37a:	f000 fca9 	bl	800bcd0 <_LCD_SendData>
	_LCD_SendData(0x31);
 800b37e:	2031      	movs	r0, #49	; 0x31
 800b380:	f000 fca6 	bl	800bcd0 <_LCD_SendData>
	_LCD_SendData(0x2B);
 800b384:	202b      	movs	r0, #43	; 0x2b
 800b386:	f000 fca3 	bl	800bcd0 <_LCD_SendData>
	_LCD_SendData(0x0C);
 800b38a:	200c      	movs	r0, #12
 800b38c:	f000 fca0 	bl	800bcd0 <_LCD_SendData>
	_LCD_SendData(0x0E);
 800b390:	200e      	movs	r0, #14
 800b392:	f000 fc9d 	bl	800bcd0 <_LCD_SendData>
	_LCD_SendData(0x08);
 800b396:	2008      	movs	r0, #8
 800b398:	f000 fc9a 	bl	800bcd0 <_LCD_SendData>
	_LCD_SendData(0x4E);
 800b39c:	204e      	movs	r0, #78	; 0x4e
 800b39e:	f000 fc97 	bl	800bcd0 <_LCD_SendData>
	_LCD_SendData(0xF1);
 800b3a2:	20f1      	movs	r0, #241	; 0xf1
 800b3a4:	f000 fc94 	bl	800bcd0 <_LCD_SendData>
	_LCD_SendData(0x37);
 800b3a8:	2037      	movs	r0, #55	; 0x37
 800b3aa:	f000 fc91 	bl	800bcd0 <_LCD_SendData>
	_LCD_SendData(0x07);
 800b3ae:	2007      	movs	r0, #7
 800b3b0:	f000 fc8e 	bl	800bcd0 <_LCD_SendData>
	_LCD_SendData(0x10);
 800b3b4:	2010      	movs	r0, #16
 800b3b6:	f000 fc8b 	bl	800bcd0 <_LCD_SendData>
	_LCD_SendData(0x03);
 800b3ba:	2003      	movs	r0, #3
 800b3bc:	f000 fc88 	bl	800bcd0 <_LCD_SendData>
	_LCD_SendData(0x0E);
 800b3c0:	200e      	movs	r0, #14
 800b3c2:	f000 fc85 	bl	800bcd0 <_LCD_SendData>
	_LCD_SendData(0x09);
 800b3c6:	2009      	movs	r0, #9
 800b3c8:	f000 fc82 	bl	800bcd0 <_LCD_SendData>
	_LCD_SendData(0x00);
 800b3cc:	2000      	movs	r0, #0
 800b3ce:	f000 fc7f 	bl	800bcd0 <_LCD_SendData>

	//NEGATIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE1);
 800b3d2:	20e1      	movs	r0, #225	; 0xe1
 800b3d4:	f000 fc4a 	bl	800bc6c <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800b3d8:	2000      	movs	r0, #0
 800b3da:	f000 fc79 	bl	800bcd0 <_LCD_SendData>
	_LCD_SendData(0x0E);
 800b3de:	200e      	movs	r0, #14
 800b3e0:	f000 fc76 	bl	800bcd0 <_LCD_SendData>
	_LCD_SendData(0x14);
 800b3e4:	2014      	movs	r0, #20
 800b3e6:	f000 fc73 	bl	800bcd0 <_LCD_SendData>
	_LCD_SendData(0x03);
 800b3ea:	2003      	movs	r0, #3
 800b3ec:	f000 fc70 	bl	800bcd0 <_LCD_SendData>
	_LCD_SendData(0x11);
 800b3f0:	2011      	movs	r0, #17
 800b3f2:	f000 fc6d 	bl	800bcd0 <_LCD_SendData>
	_LCD_SendData(0x07);
 800b3f6:	2007      	movs	r0, #7
 800b3f8:	f000 fc6a 	bl	800bcd0 <_LCD_SendData>
	_LCD_SendData(0x31);
 800b3fc:	2031      	movs	r0, #49	; 0x31
 800b3fe:	f000 fc67 	bl	800bcd0 <_LCD_SendData>
	_LCD_SendData(0xC1);
 800b402:	20c1      	movs	r0, #193	; 0xc1
 800b404:	f000 fc64 	bl	800bcd0 <_LCD_SendData>
	_LCD_SendData(0x48);
 800b408:	2048      	movs	r0, #72	; 0x48
 800b40a:	f000 fc61 	bl	800bcd0 <_LCD_SendData>
	_LCD_SendData(0x08);
 800b40e:	2008      	movs	r0, #8
 800b410:	f000 fc5e 	bl	800bcd0 <_LCD_SendData>
	_LCD_SendData(0x0F);
 800b414:	200f      	movs	r0, #15
 800b416:	f000 fc5b 	bl	800bcd0 <_LCD_SendData>
	_LCD_SendData(0x0C);
 800b41a:	200c      	movs	r0, #12
 800b41c:	f000 fc58 	bl	800bcd0 <_LCD_SendData>
	_LCD_SendData(0x31);
 800b420:	2031      	movs	r0, #49	; 0x31
 800b422:	f000 fc55 	bl	800bcd0 <_LCD_SendData>
	_LCD_SendData(0x36);
 800b426:	2036      	movs	r0, #54	; 0x36
 800b428:	f000 fc52 	bl	800bcd0 <_LCD_SendData>
	_LCD_SendData(0x0F);
 800b42c:	200f      	movs	r0, #15
 800b42e:	f000 fc4f 	bl	800bcd0 <_LCD_SendData>

	//EXIT SLEEP
	_LCD_SendCommand(0x11);
 800b432:	2011      	movs	r0, #17
 800b434:	f000 fc1a 	bl	800bc6c <_LCD_SendCommand>
	HAL_Delay(240);
 800b438:	20f0      	movs	r0, #240	; 0xf0
 800b43a:	f7fa f99b 	bl	8005774 <HAL_Delay>

	//TURN ON DISPLAY
	_LCD_SendCommand(0x29);
 800b43e:	2029      	movs	r0, #41	; 0x29
 800b440:	f000 fc14 	bl	800bc6c <_LCD_SendCommand>

	//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 800b444:	2000      	movs	r0, #0
 800b446:	f000 fae5 	bl	800ba14 <ILI9341_Set_Rotation>
}
 800b44a:	bf00      	nop
 800b44c:	bd80      	pop	{r7, pc}
	...

0800b450 <ILI9341_SPI_Init>:
 *
 * 	Initialise SPI peripheral
 *
 */
void ILI9341_SPI_Init(void)
{
 800b450:	b480      	push	{r7}
 800b452:	af00      	add	r7, sp, #0

   	// check SPI enabled
	if ((SPI_PERIPH->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b454:	4b0b      	ldr	r3, [pc, #44]	; (800b484 <ILI9341_SPI_Init+0x34>)
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b45c:	2b40      	cmp	r3, #64	; 0x40
 800b45e:	d005      	beq.n	800b46c <ILI9341_SPI_Init+0x1c>
	{
		SPI_PERIPH->CR1 |= SPI_CR1_SPE;
 800b460:	4b08      	ldr	r3, [pc, #32]	; (800b484 <ILI9341_SPI_Init+0x34>)
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	4a07      	ldr	r2, [pc, #28]	; (800b484 <ILI9341_SPI_Init+0x34>)
 800b466:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b46a:	6013      	str	r3, [r2, #0]
	}

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800b46c:	4b06      	ldr	r3, [pc, #24]	; (800b488 <ILI9341_SPI_Init+0x38>)
 800b46e:	695b      	ldr	r3, [r3, #20]
 800b470:	4a05      	ldr	r2, [pc, #20]	; (800b488 <ILI9341_SPI_Init+0x38>)
 800b472:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b476:	6153      	str	r3, [r2, #20]
}
 800b478:	bf00      	nop
 800b47a:	46bd      	mov	sp, r7
 800b47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b480:	4770      	bx	lr
 800b482:	bf00      	nop
 800b484:	40003c00 	.word	0x40003c00
 800b488:	48000400 	.word	0x48000400

0800b48c <ILI9341_Draw_Horizontal_Line>:
 *	Draw horizontal line
 *
 */

void ILI9341_Draw_Horizontal_Line(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t colour)
{
 800b48c:	b590      	push	{r4, r7, lr}
 800b48e:	b085      	sub	sp, #20
 800b490:	af02      	add	r7, sp, #8
 800b492:	4604      	mov	r4, r0
 800b494:	4608      	mov	r0, r1
 800b496:	4611      	mov	r1, r2
 800b498:	461a      	mov	r2, r3
 800b49a:	4623      	mov	r3, r4
 800b49c:	80fb      	strh	r3, [r7, #6]
 800b49e:	4603      	mov	r3, r0
 800b4a0:	80bb      	strh	r3, [r7, #4]
 800b4a2:	460b      	mov	r3, r1
 800b4a4:	807b      	strh	r3, [r7, #2]
 800b4a6:	4613      	mov	r3, r2
 800b4a8:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800b4aa:	4b1a      	ldr	r3, [pc, #104]	; (800b514 <ILI9341_Draw_Horizontal_Line+0x88>)
 800b4ac:	881b      	ldrh	r3, [r3, #0]
 800b4ae:	b29b      	uxth	r3, r3
 800b4b0:	88fa      	ldrh	r2, [r7, #6]
 800b4b2:	429a      	cmp	r2, r3
 800b4b4:	d229      	bcs.n	800b50a <ILI9341_Draw_Horizontal_Line+0x7e>
 800b4b6:	4b18      	ldr	r3, [pc, #96]	; (800b518 <ILI9341_Draw_Horizontal_Line+0x8c>)
 800b4b8:	881b      	ldrh	r3, [r3, #0]
 800b4ba:	b29b      	uxth	r3, r3
 800b4bc:	88ba      	ldrh	r2, [r7, #4]
 800b4be:	429a      	cmp	r2, r3
 800b4c0:	d223      	bcs.n	800b50a <ILI9341_Draw_Horizontal_Line+0x7e>
	if(((xpos + width) - 1 ) >= LCD_WIDTH)
 800b4c2:	88fa      	ldrh	r2, [r7, #6]
 800b4c4:	887b      	ldrh	r3, [r7, #2]
 800b4c6:	4413      	add	r3, r2
 800b4c8:	3b01      	subs	r3, #1
 800b4ca:	4a12      	ldr	r2, [pc, #72]	; (800b514 <ILI9341_Draw_Horizontal_Line+0x88>)
 800b4cc:	8812      	ldrh	r2, [r2, #0]
 800b4ce:	b292      	uxth	r2, r2
 800b4d0:	4293      	cmp	r3, r2
 800b4d2:	db05      	blt.n	800b4e0 <ILI9341_Draw_Horizontal_Line+0x54>
		{
			width= LCD_WIDTH - xpos;
 800b4d4:	4b0f      	ldr	r3, [pc, #60]	; (800b514 <ILI9341_Draw_Horizontal_Line+0x88>)
 800b4d6:	881b      	ldrh	r3, [r3, #0]
 800b4d8:	b29a      	uxth	r2, r3
 800b4da:	88fb      	ldrh	r3, [r7, #6]
 800b4dc:	1ad3      	subs	r3, r2, r3
 800b4de:	807b      	strh	r3, [r7, #2]
		}
	ILI9341_Set_Frame(	xpos,
							ypos,
							(xpos + width) - 1,
 800b4e0:	88fa      	ldrh	r2, [r7, #6]
 800b4e2:	887b      	ldrh	r3, [r7, #2]
 800b4e4:	4413      	add	r3, r2
 800b4e6:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800b4e8:	3b01      	subs	r3, #1
 800b4ea:	b29a      	uxth	r2, r3
 800b4ec:	88bb      	ldrh	r3, [r7, #4]
 800b4ee:	88b9      	ldrh	r1, [r7, #4]
 800b4f0:	88f8      	ldrh	r0, [r7, #6]
 800b4f2:	f000 f85b 	bl	800b5ac <ILI9341_Set_Frame>
							ypos);

	_LCD_Write_Frame(xpos, ypos, colour, width, LINE_CHUNK);
 800b4f6:	887c      	ldrh	r4, [r7, #2]
 800b4f8:	883a      	ldrh	r2, [r7, #0]
 800b4fa:	88b9      	ldrh	r1, [r7, #4]
 800b4fc:	88f8      	ldrh	r0, [r7, #6]
 800b4fe:	2303      	movs	r3, #3
 800b500:	9300      	str	r3, [sp, #0]
 800b502:	4623      	mov	r3, r4
 800b504:	f000 fb02 	bl	800bb0c <_LCD_Write_Frame>
 800b508:	e000      	b.n	800b50c <ILI9341_Draw_Horizontal_Line+0x80>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800b50a:	bf00      	nop
}
 800b50c:	370c      	adds	r7, #12
 800b50e:	46bd      	mov	sp, r7
 800b510:	bd90      	pop	{r4, r7, pc}
 800b512:	bf00      	nop
 800b514:	200001ba 	.word	0x200001ba
 800b518:	200001b8 	.word	0x200001b8

0800b51c <ILI9341_Draw_Vertical_Line>:
 *
 *  Draw vertical line
 *
 */
void ILI9341_Draw_Vertical_Line(uint16_t xpos, uint16_t ypos, uint16_t height, uint16_t colour)
{
 800b51c:	b590      	push	{r4, r7, lr}
 800b51e:	b085      	sub	sp, #20
 800b520:	af02      	add	r7, sp, #8
 800b522:	4604      	mov	r4, r0
 800b524:	4608      	mov	r0, r1
 800b526:	4611      	mov	r1, r2
 800b528:	461a      	mov	r2, r3
 800b52a:	4623      	mov	r3, r4
 800b52c:	80fb      	strh	r3, [r7, #6]
 800b52e:	4603      	mov	r3, r0
 800b530:	80bb      	strh	r3, [r7, #4]
 800b532:	460b      	mov	r3, r1
 800b534:	807b      	strh	r3, [r7, #2]
 800b536:	4613      	mov	r3, r2
 800b538:	803b      	strh	r3, [r7, #0]
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 800b53a:	4b1a      	ldr	r3, [pc, #104]	; (800b5a4 <ILI9341_Draw_Vertical_Line+0x88>)
 800b53c:	881b      	ldrh	r3, [r3, #0]
 800b53e:	b29b      	uxth	r3, r3
 800b540:	88fa      	ldrh	r2, [r7, #6]
 800b542:	429a      	cmp	r2, r3
 800b544:	d229      	bcs.n	800b59a <ILI9341_Draw_Vertical_Line+0x7e>
 800b546:	4b18      	ldr	r3, [pc, #96]	; (800b5a8 <ILI9341_Draw_Vertical_Line+0x8c>)
 800b548:	881b      	ldrh	r3, [r3, #0]
 800b54a:	b29b      	uxth	r3, r3
 800b54c:	88ba      	ldrh	r2, [r7, #4]
 800b54e:	429a      	cmp	r2, r3
 800b550:	d223      	bcs.n	800b59a <ILI9341_Draw_Vertical_Line+0x7e>
	if(((ypos + height) - 1) >= LCD_HEIGHT)
 800b552:	88ba      	ldrh	r2, [r7, #4]
 800b554:	887b      	ldrh	r3, [r7, #2]
 800b556:	4413      	add	r3, r2
 800b558:	3b01      	subs	r3, #1
 800b55a:	4a13      	ldr	r2, [pc, #76]	; (800b5a8 <ILI9341_Draw_Vertical_Line+0x8c>)
 800b55c:	8812      	ldrh	r2, [r2, #0]
 800b55e:	b292      	uxth	r2, r2
 800b560:	4293      	cmp	r3, r2
 800b562:	db05      	blt.n	800b570 <ILI9341_Draw_Vertical_Line+0x54>
		{
			height= LCD_HEIGHT - ypos;
 800b564:	4b10      	ldr	r3, [pc, #64]	; (800b5a8 <ILI9341_Draw_Vertical_Line+0x8c>)
 800b566:	881b      	ldrh	r3, [r3, #0]
 800b568:	b29a      	uxth	r2, r3
 800b56a:	88bb      	ldrh	r3, [r7, #4]
 800b56c:	1ad3      	subs	r3, r2, r3
 800b56e:	807b      	strh	r3, [r7, #2]
		}
	ILI9341_Set_Frame(xpos, ypos, xpos, (ypos + height) - 1);
 800b570:	88ba      	ldrh	r2, [r7, #4]
 800b572:	887b      	ldrh	r3, [r7, #2]
 800b574:	4413      	add	r3, r2
 800b576:	b29b      	uxth	r3, r3
 800b578:	3b01      	subs	r3, #1
 800b57a:	b29b      	uxth	r3, r3
 800b57c:	88fa      	ldrh	r2, [r7, #6]
 800b57e:	88b9      	ldrh	r1, [r7, #4]
 800b580:	88f8      	ldrh	r0, [r7, #6]
 800b582:	f000 f813 	bl	800b5ac <ILI9341_Set_Frame>
	_LCD_Write_Frame(xpos, ypos, colour, height, LINE_CHUNK);
 800b586:	887c      	ldrh	r4, [r7, #2]
 800b588:	883a      	ldrh	r2, [r7, #0]
 800b58a:	88b9      	ldrh	r1, [r7, #4]
 800b58c:	88f8      	ldrh	r0, [r7, #6]
 800b58e:	2303      	movs	r3, #3
 800b590:	9300      	str	r3, [sp, #0]
 800b592:	4623      	mov	r3, r4
 800b594:	f000 faba 	bl	800bb0c <_LCD_Write_Frame>
 800b598:	e000      	b.n	800b59c <ILI9341_Draw_Vertical_Line+0x80>
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 800b59a:	bf00      	nop
}
 800b59c:	370c      	adds	r7, #12
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	bd90      	pop	{r4, r7, pc}
 800b5a2:	bf00      	nop
 800b5a4:	200001ba 	.word	0x200001ba
 800b5a8:	200001b8 	.word	0x200001b8

0800b5ac <ILI9341_Set_Frame>:
 *	bottom right of area (ec, ep):
 *	ec 	- 	"end column"
 *	ep	- 	"end page"
 */
void ILI9341_Set_Frame(uint16_t sc, uint16_t sp, uint16_t ec, uint16_t ep)
{
 800b5ac:	b590      	push	{r4, r7, lr}
 800b5ae:	b083      	sub	sp, #12
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	4604      	mov	r4, r0
 800b5b4:	4608      	mov	r0, r1
 800b5b6:	4611      	mov	r1, r2
 800b5b8:	461a      	mov	r2, r3
 800b5ba:	4623      	mov	r3, r4
 800b5bc:	80fb      	strh	r3, [r7, #6]
 800b5be:	4603      	mov	r3, r0
 800b5c0:	80bb      	strh	r3, [r7, #4]
 800b5c2:	460b      	mov	r3, r1
 800b5c4:	807b      	strh	r3, [r7, #2]
 800b5c6:	4613      	mov	r3, r2
 800b5c8:	803b      	strh	r3, [r7, #0]
	// send "Column Address Set" command
	_LCD_SendCommand(0x2A);
 800b5ca:	202a      	movs	r0, #42	; 0x2a
 800b5cc:	f000 fb4e 	bl	800bc6c <_LCD_SendCommand>
	_LCD_SendData(sc >> 8);
 800b5d0:	88fb      	ldrh	r3, [r7, #6]
 800b5d2:	0a1b      	lsrs	r3, r3, #8
 800b5d4:	b29b      	uxth	r3, r3
 800b5d6:	b2db      	uxtb	r3, r3
 800b5d8:	4618      	mov	r0, r3
 800b5da:	f000 fb79 	bl	800bcd0 <_LCD_SendData>
	_LCD_SendData(sc);
 800b5de:	88fb      	ldrh	r3, [r7, #6]
 800b5e0:	b2db      	uxtb	r3, r3
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	f000 fb74 	bl	800bcd0 <_LCD_SendData>
	_LCD_SendData(ec >> 8);
 800b5e8:	887b      	ldrh	r3, [r7, #2]
 800b5ea:	0a1b      	lsrs	r3, r3, #8
 800b5ec:	b29b      	uxth	r3, r3
 800b5ee:	b2db      	uxtb	r3, r3
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	f000 fb6d 	bl	800bcd0 <_LCD_SendData>
	_LCD_SendData(ec);
 800b5f6:	887b      	ldrh	r3, [r7, #2]
 800b5f8:	b2db      	uxtb	r3, r3
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	f000 fb68 	bl	800bcd0 <_LCD_SendData>

	// send "Page Address Set" command
	_LCD_SendCommand(0x2B);
 800b600:	202b      	movs	r0, #43	; 0x2b
 800b602:	f000 fb33 	bl	800bc6c <_LCD_SendCommand>
	_LCD_SendData(sp >> 8);
 800b606:	88bb      	ldrh	r3, [r7, #4]
 800b608:	0a1b      	lsrs	r3, r3, #8
 800b60a:	b29b      	uxth	r3, r3
 800b60c:	b2db      	uxtb	r3, r3
 800b60e:	4618      	mov	r0, r3
 800b610:	f000 fb5e 	bl	800bcd0 <_LCD_SendData>
	_LCD_SendData(sp);
 800b614:	88bb      	ldrh	r3, [r7, #4]
 800b616:	b2db      	uxtb	r3, r3
 800b618:	4618      	mov	r0, r3
 800b61a:	f000 fb59 	bl	800bcd0 <_LCD_SendData>
	_LCD_SendData(ep >> 8);
 800b61e:	883b      	ldrh	r3, [r7, #0]
 800b620:	0a1b      	lsrs	r3, r3, #8
 800b622:	b29b      	uxth	r3, r3
 800b624:	b2db      	uxtb	r3, r3
 800b626:	4618      	mov	r0, r3
 800b628:	f000 fb52 	bl	800bcd0 <_LCD_SendData>
	_LCD_SendData(ep);
 800b62c:	883b      	ldrh	r3, [r7, #0]
 800b62e:	b2db      	uxtb	r3, r3
 800b630:	4618      	mov	r0, r3
 800b632:	f000 fb4d 	bl	800bcd0 <_LCD_SendData>

	_LCD_SendCommand(0x2C);
 800b636:	202c      	movs	r0, #44	; 0x2c
 800b638:	f000 fb18 	bl	800bc6c <_LCD_SendCommand>
}
 800b63c:	bf00      	nop
 800b63e:	370c      	adds	r7, #12
 800b640:	46bd      	mov	sp, r7
 800b642:	bd90      	pop	{r4, r7, pc}

0800b644 <ILI9341_Fill_Screen>:
 *
 * 	Sets address (entire screen) and Sends height*width ammount of colour information to LCD
 *
 */
void ILI9341_Fill_Screen(uint16_t colour)
{
 800b644:	b580      	push	{r7, lr}
 800b646:	b084      	sub	sp, #16
 800b648:	af02      	add	r7, sp, #8
 800b64a:	4603      	mov	r3, r0
 800b64c:	80fb      	strh	r3, [r7, #6]
	ILI9341_Set_Frame(0,0,LCD_WIDTH,LCD_HEIGHT);
 800b64e:	4b10      	ldr	r3, [pc, #64]	; (800b690 <ILI9341_Fill_Screen+0x4c>)
 800b650:	881b      	ldrh	r3, [r3, #0]
 800b652:	b29a      	uxth	r2, r3
 800b654:	4b0f      	ldr	r3, [pc, #60]	; (800b694 <ILI9341_Fill_Screen+0x50>)
 800b656:	881b      	ldrh	r3, [r3, #0]
 800b658:	b29b      	uxth	r3, r3
 800b65a:	2100      	movs	r1, #0
 800b65c:	2000      	movs	r0, #0
 800b65e:	f7ff ffa5 	bl	800b5ac <ILI9341_Set_Frame>
	_LCD_Write_Frame(0, 0, colour, LCD_WIDTH*LCD_HEIGHT, AREA_CHUNK);
 800b662:	4b0b      	ldr	r3, [pc, #44]	; (800b690 <ILI9341_Fill_Screen+0x4c>)
 800b664:	881b      	ldrh	r3, [r3, #0]
 800b666:	b29b      	uxth	r3, r3
 800b668:	461a      	mov	r2, r3
 800b66a:	4b0a      	ldr	r3, [pc, #40]	; (800b694 <ILI9341_Fill_Screen+0x50>)
 800b66c:	881b      	ldrh	r3, [r3, #0]
 800b66e:	b29b      	uxth	r3, r3
 800b670:	fb03 f302 	mul.w	r3, r3, r2
 800b674:	4619      	mov	r1, r3
 800b676:	88fa      	ldrh	r2, [r7, #6]
 800b678:	2304      	movs	r3, #4
 800b67a:	9300      	str	r3, [sp, #0]
 800b67c:	460b      	mov	r3, r1
 800b67e:	2100      	movs	r1, #0
 800b680:	2000      	movs	r0, #0
 800b682:	f000 fa43 	bl	800bb0c <_LCD_Write_Frame>
}
 800b686:	bf00      	nop
 800b688:	3708      	adds	r7, #8
 800b68a:	46bd      	mov	sp, r7
 800b68c:	bd80      	pop	{r7, pc}
 800b68e:	bf00      	nop
 800b690:	200001ba 	.word	0x200001ba
 800b694:	200001b8 	.word	0x200001b8

0800b698 <ILI9341_Draw_Pixel>:
 * 	Using pixels to draw big simple structures is not recommended as it is really slow
 * 	Try using either rectangles or lines if possible
 *
 */
void ILI9341_Draw_Pixel(uint16_t x,uint16_t y,uint16_t colour)
{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b08c      	sub	sp, #48	; 0x30
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	4603      	mov	r3, r0
 800b6a0:	80fb      	strh	r3, [r7, #6]
 800b6a2:	460b      	mov	r3, r1
 800b6a4:	80bb      	strh	r3, [r7, #4]
 800b6a6:	4613      	mov	r3, r2
 800b6a8:	807b      	strh	r3, [r7, #2]
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800b6aa:	4b94      	ldr	r3, [pc, #592]	; (800b8fc <ILI9341_Draw_Pixel+0x264>)
 800b6ac:	881b      	ldrh	r3, [r3, #0]
 800b6ae:	b29b      	uxth	r3, r3
 800b6b0:	88fa      	ldrh	r2, [r7, #6]
 800b6b2:	429a      	cmp	r2, r3
 800b6b4:	f080 811e 	bcs.w	800b8f4 <ILI9341_Draw_Pixel+0x25c>
 800b6b8:	4b91      	ldr	r3, [pc, #580]	; (800b900 <ILI9341_Draw_Pixel+0x268>)
 800b6ba:	881b      	ldrh	r3, [r3, #0]
 800b6bc:	b29b      	uxth	r3, r3
 800b6be:	88ba      	ldrh	r2, [r7, #4]
 800b6c0:	429a      	cmp	r2, r3
 800b6c2:	f080 8117 	bcs.w	800b8f4 <ILI9341_Draw_Pixel+0x25c>

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800b6c6:	4b8f      	ldr	r3, [pc, #572]	; (800b904 <ILI9341_Draw_Pixel+0x26c>)
 800b6c8:	695b      	ldr	r3, [r3, #20]
 800b6ca:	4a8e      	ldr	r2, [pc, #568]	; (800b904 <ILI9341_Draw_Pixel+0x26c>)
 800b6cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b6d0:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800b6d2:	4b8c      	ldr	r3, [pc, #560]	; (800b904 <ILI9341_Draw_Pixel+0x26c>)
 800b6d4:	695b      	ldr	r3, [r3, #20]
 800b6d6:	4a8b      	ldr	r2, [pc, #556]	; (800b904 <ILI9341_Draw_Pixel+0x26c>)
 800b6d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b6dc:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(0x2A, 0, 0);
 800b6de:	2200      	movs	r2, #0
 800b6e0:	2100      	movs	r1, #0
 800b6e2:	202a      	movs	r0, #42	; 0x2a
 800b6e4:	f000 fb26 	bl	800bd34 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b6ec:	e008      	b.n	800b700 <ILI9341_Draw_Pixel+0x68>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800b6ee:	4b85      	ldr	r3, [pc, #532]	; (800b904 <ILI9341_Draw_Pixel+0x26c>)
 800b6f0:	695b      	ldr	r3, [r3, #20]
 800b6f2:	4a84      	ldr	r2, [pc, #528]	; (800b904 <ILI9341_Draw_Pixel+0x26c>)
 800b6f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b6f8:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800b6fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6fc:	3301      	adds	r3, #1
 800b6fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b702:	2b02      	cmp	r3, #2
 800b704:	ddf3      	ble.n	800b6ee <ILI9341_Draw_Pixel+0x56>

	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800b706:	4b7f      	ldr	r3, [pc, #508]	; (800b904 <ILI9341_Draw_Pixel+0x26c>)
 800b708:	695b      	ldr	r3, [r3, #20]
 800b70a:	4a7e      	ldr	r2, [pc, #504]	; (800b904 <ILI9341_Draw_Pixel+0x26c>)
 800b70c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b710:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800b712:	4b7c      	ldr	r3, [pc, #496]	; (800b904 <ILI9341_Draw_Pixel+0x26c>)
 800b714:	695b      	ldr	r3, [r3, #20]
 800b716:	4a7b      	ldr	r2, [pc, #492]	; (800b904 <ILI9341_Draw_Pixel+0x26c>)
 800b718:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b71c:	6153      	str	r3, [r2, #20]

	//XDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800b71e:	4b79      	ldr	r3, [pc, #484]	; (800b904 <ILI9341_Draw_Pixel+0x26c>)
 800b720:	695b      	ldr	r3, [r3, #20]
 800b722:	4a78      	ldr	r2, [pc, #480]	; (800b904 <ILI9341_Draw_Pixel+0x26c>)
 800b724:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b728:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer[4] =
 800b72a:	88fb      	ldrh	r3, [r7, #6]
 800b72c:	0a1b      	lsrs	r3, r3, #8
 800b72e:	b29b      	uxth	r3, r3
 800b730:	b2db      	uxtb	r3, r3
 800b732:	753b      	strb	r3, [r7, #20]
 800b734:	88fb      	ldrh	r3, [r7, #6]
 800b736:	b2db      	uxtb	r3, r3
 800b738:	757b      	strb	r3, [r7, #21]
	{
			x >> 8,
			x,
			(x + 1) >> 8,
 800b73a:	88fb      	ldrh	r3, [r7, #6]
 800b73c:	3301      	adds	r3, #1
 800b73e:	121b      	asrs	r3, r3, #8
	unsigned char Temp_Buffer[4] =
 800b740:	b2db      	uxtb	r3, r3
 800b742:	75bb      	strb	r3, [r7, #22]
			(x + 1)
 800b744:	88fb      	ldrh	r3, [r7, #6]
 800b746:	b2db      	uxtb	r3, r3
 800b748:	3301      	adds	r3, #1
 800b74a:	b2db      	uxtb	r3, r3
	unsigned char Temp_Buffer[4] =
 800b74c:	75fb      	strb	r3, [r7, #23]
	};

	_SPI_SendByteMultiByte(Temp_Buffer, 4, 0, 9);
 800b74e:	f107 0014 	add.w	r0, r7, #20
 800b752:	2309      	movs	r3, #9
 800b754:	2200      	movs	r2, #0
 800b756:	2104      	movs	r1, #4
 800b758:	f000 fb02 	bl	800bd60 <_SPI_SendByteMultiByte>
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1 );

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800b75c:	2300      	movs	r3, #0
 800b75e:	62bb      	str	r3, [r7, #40]	; 0x28
 800b760:	e008      	b.n	800b774 <ILI9341_Draw_Pixel+0xdc>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800b762:	4b68      	ldr	r3, [pc, #416]	; (800b904 <ILI9341_Draw_Pixel+0x26c>)
 800b764:	695b      	ldr	r3, [r3, #20]
 800b766:	4a67      	ldr	r2, [pc, #412]	; (800b904 <ILI9341_Draw_Pixel+0x26c>)
 800b768:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b76c:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800b76e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b770:	3301      	adds	r3, #1
 800b772:	62bb      	str	r3, [r7, #40]	; 0x28
 800b774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b776:	2b02      	cmp	r3, #2
 800b778:	ddf3      	ble.n	800b762 <ILI9341_Draw_Pixel+0xca>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800b77a:	4b62      	ldr	r3, [pc, #392]	; (800b904 <ILI9341_Draw_Pixel+0x26c>)
 800b77c:	695b      	ldr	r3, [r3, #20]
 800b77e:	4a61      	ldr	r2, [pc, #388]	; (800b904 <ILI9341_Draw_Pixel+0x26c>)
 800b780:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b784:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800b786:	4b5f      	ldr	r3, [pc, #380]	; (800b904 <ILI9341_Draw_Pixel+0x26c>)
 800b788:	695b      	ldr	r3, [r3, #20]
 800b78a:	4a5e      	ldr	r2, [pc, #376]	; (800b904 <ILI9341_Draw_Pixel+0x26c>)
 800b78c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b790:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800b792:	4b5c      	ldr	r3, [pc, #368]	; (800b904 <ILI9341_Draw_Pixel+0x26c>)
 800b794:	695b      	ldr	r3, [r3, #20]
 800b796:	4a5b      	ldr	r2, [pc, #364]	; (800b904 <ILI9341_Draw_Pixel+0x26c>)
 800b798:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b79c:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(0x2B, 0, 0);
 800b79e:	2200      	movs	r2, #0
 800b7a0:	2100      	movs	r1, #0
 800b7a2:	202b      	movs	r0, #43	; 0x2b
 800b7a4:	f000 fac6 	bl	800bd34 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	627b      	str	r3, [r7, #36]	; 0x24
 800b7ac:	e008      	b.n	800b7c0 <ILI9341_Draw_Pixel+0x128>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800b7ae:	4b55      	ldr	r3, [pc, #340]	; (800b904 <ILI9341_Draw_Pixel+0x26c>)
 800b7b0:	695b      	ldr	r3, [r3, #20]
 800b7b2:	4a54      	ldr	r2, [pc, #336]	; (800b904 <ILI9341_Draw_Pixel+0x26c>)
 800b7b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b7b8:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800b7ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7bc:	3301      	adds	r3, #1
 800b7be:	627b      	str	r3, [r7, #36]	; 0x24
 800b7c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7c2:	2b02      	cmp	r3, #2
 800b7c4:	ddf3      	ble.n	800b7ae <ILI9341_Draw_Pixel+0x116>

	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800b7c6:	4b4f      	ldr	r3, [pc, #316]	; (800b904 <ILI9341_Draw_Pixel+0x26c>)
 800b7c8:	695b      	ldr	r3, [r3, #20]
 800b7ca:	4a4e      	ldr	r2, [pc, #312]	; (800b904 <ILI9341_Draw_Pixel+0x26c>)
 800b7cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7d0:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800b7d2:	4b4c      	ldr	r3, [pc, #304]	; (800b904 <ILI9341_Draw_Pixel+0x26c>)
 800b7d4:	695b      	ldr	r3, [r3, #20]
 800b7d6:	4a4b      	ldr	r2, [pc, #300]	; (800b904 <ILI9341_Draw_Pixel+0x26c>)
 800b7d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b7dc:	6153      	str	r3, [r2, #20]

	//YDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800b7de:	4b49      	ldr	r3, [pc, #292]	; (800b904 <ILI9341_Draw_Pixel+0x26c>)
 800b7e0:	695b      	ldr	r3, [r3, #20]
 800b7e2:	4a48      	ldr	r2, [pc, #288]	; (800b904 <ILI9341_Draw_Pixel+0x26c>)
 800b7e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b7e8:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer1[4] =
 800b7ea:	88bb      	ldrh	r3, [r7, #4]
 800b7ec:	0a1b      	lsrs	r3, r3, #8
 800b7ee:	b29b      	uxth	r3, r3
 800b7f0:	b2db      	uxtb	r3, r3
 800b7f2:	743b      	strb	r3, [r7, #16]
 800b7f4:	88bb      	ldrh	r3, [r7, #4]
 800b7f6:	b2db      	uxtb	r3, r3
 800b7f8:	747b      	strb	r3, [r7, #17]
	{
			y >> 8,
			y,
			(y + 1) >> 8,
 800b7fa:	88bb      	ldrh	r3, [r7, #4]
 800b7fc:	3301      	adds	r3, #1
 800b7fe:	121b      	asrs	r3, r3, #8
	unsigned char Temp_Buffer1[4] =
 800b800:	b2db      	uxtb	r3, r3
 800b802:	74bb      	strb	r3, [r7, #18]
			(y + 1)
 800b804:	88bb      	ldrh	r3, [r7, #4]
 800b806:	b2db      	uxtb	r3, r3
 800b808:	3301      	adds	r3, #1
 800b80a:	b2db      	uxtb	r3, r3
	unsigned char Temp_Buffer1[4] =
 800b80c:	74fb      	strb	r3, [r7, #19]
	};

	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1 );
	_SPI_SendByteMultiByte(Temp_Buffer1, 4, 0, 9);
 800b80e:	f107 0010 	add.w	r0, r7, #16
 800b812:	2309      	movs	r3, #9
 800b814:	2200      	movs	r2, #0
 800b816:	2104      	movs	r1, #4
 800b818:	f000 faa2 	bl	800bd60 <_SPI_SendByteMultiByte>

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800b81c:	2300      	movs	r3, #0
 800b81e:	623b      	str	r3, [r7, #32]
 800b820:	e008      	b.n	800b834 <ILI9341_Draw_Pixel+0x19c>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800b822:	4b38      	ldr	r3, [pc, #224]	; (800b904 <ILI9341_Draw_Pixel+0x26c>)
 800b824:	695b      	ldr	r3, [r3, #20]
 800b826:	4a37      	ldr	r2, [pc, #220]	; (800b904 <ILI9341_Draw_Pixel+0x26c>)
 800b828:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b82c:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800b82e:	6a3b      	ldr	r3, [r7, #32]
 800b830:	3301      	adds	r3, #1
 800b832:	623b      	str	r3, [r7, #32]
 800b834:	6a3b      	ldr	r3, [r7, #32]
 800b836:	2b02      	cmp	r3, #2
 800b838:	ddf3      	ble.n	800b822 <ILI9341_Draw_Pixel+0x18a>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800b83a:	4b32      	ldr	r3, [pc, #200]	; (800b904 <ILI9341_Draw_Pixel+0x26c>)
 800b83c:	695b      	ldr	r3, [r3, #20]
 800b83e:	4a31      	ldr	r2, [pc, #196]	; (800b904 <ILI9341_Draw_Pixel+0x26c>)
 800b840:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b844:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800b846:	4b2f      	ldr	r3, [pc, #188]	; (800b904 <ILI9341_Draw_Pixel+0x26c>)
 800b848:	695b      	ldr	r3, [r3, #20]
 800b84a:	4a2e      	ldr	r2, [pc, #184]	; (800b904 <ILI9341_Draw_Pixel+0x26c>)
 800b84c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b850:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800b852:	4b2c      	ldr	r3, [pc, #176]	; (800b904 <ILI9341_Draw_Pixel+0x26c>)
 800b854:	695b      	ldr	r3, [r3, #20]
 800b856:	4a2b      	ldr	r2, [pc, #172]	; (800b904 <ILI9341_Draw_Pixel+0x26c>)
 800b858:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b85c:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(0x2C, 0, 0);
 800b85e:	2200      	movs	r2, #0
 800b860:	2100      	movs	r1, #0
 800b862:	202c      	movs	r0, #44	; 0x2c
 800b864:	f000 fa66 	bl	800bd34 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800b868:	2300      	movs	r3, #0
 800b86a:	61fb      	str	r3, [r7, #28]
 800b86c:	e008      	b.n	800b880 <ILI9341_Draw_Pixel+0x1e8>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800b86e:	4b25      	ldr	r3, [pc, #148]	; (800b904 <ILI9341_Draw_Pixel+0x26c>)
 800b870:	695b      	ldr	r3, [r3, #20]
 800b872:	4a24      	ldr	r2, [pc, #144]	; (800b904 <ILI9341_Draw_Pixel+0x26c>)
 800b874:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b878:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800b87a:	69fb      	ldr	r3, [r7, #28]
 800b87c:	3301      	adds	r3, #1
 800b87e:	61fb      	str	r3, [r7, #28]
 800b880:	69fb      	ldr	r3, [r7, #28]
 800b882:	2b02      	cmp	r3, #2
 800b884:	ddf3      	ble.n	800b86e <ILI9341_Draw_Pixel+0x1d6>

	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800b886:	4b1f      	ldr	r3, [pc, #124]	; (800b904 <ILI9341_Draw_Pixel+0x26c>)
 800b888:	695b      	ldr	r3, [r3, #20]
 800b88a:	4a1e      	ldr	r2, [pc, #120]	; (800b904 <ILI9341_Draw_Pixel+0x26c>)
 800b88c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b890:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800b892:	4b1c      	ldr	r3, [pc, #112]	; (800b904 <ILI9341_Draw_Pixel+0x26c>)
 800b894:	695b      	ldr	r3, [r3, #20]
 800b896:	4a1b      	ldr	r2, [pc, #108]	; (800b904 <ILI9341_Draw_Pixel+0x26c>)
 800b898:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b89c:	6153      	str	r3, [r2, #20]

	//COLOUR
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800b89e:	4b19      	ldr	r3, [pc, #100]	; (800b904 <ILI9341_Draw_Pixel+0x26c>)
 800b8a0:	695b      	ldr	r3, [r3, #20]
 800b8a2:	4a18      	ldr	r2, [pc, #96]	; (800b904 <ILI9341_Draw_Pixel+0x26c>)
 800b8a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b8a8:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer2[2] = {colour>>8, colour};
 800b8aa:	887b      	ldrh	r3, [r7, #2]
 800b8ac:	0a1b      	lsrs	r3, r3, #8
 800b8ae:	b29b      	uxth	r3, r3
 800b8b0:	b2db      	uxtb	r3, r3
 800b8b2:	733b      	strb	r3, [r7, #12]
 800b8b4:	887b      	ldrh	r3, [r7, #2]
 800b8b6:	b2db      	uxtb	r3, r3
 800b8b8:	737b      	strb	r3, [r7, #13]

	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1 );
	_SPI_SendByteMultiByte(Temp_Buffer2, 4, 0, 9);
 800b8ba:	f107 000c 	add.w	r0, r7, #12
 800b8be:	2309      	movs	r3, #9
 800b8c0:	2200      	movs	r2, #0
 800b8c2:	2104      	movs	r1, #4
 800b8c4:	f000 fa4c 	bl	800bd60 <_SPI_SendByteMultiByte>

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	61bb      	str	r3, [r7, #24]
 800b8cc:	e008      	b.n	800b8e0 <ILI9341_Draw_Pixel+0x248>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800b8ce:	4b0d      	ldr	r3, [pc, #52]	; (800b904 <ILI9341_Draw_Pixel+0x26c>)
 800b8d0:	695b      	ldr	r3, [r3, #20]
 800b8d2:	4a0c      	ldr	r2, [pc, #48]	; (800b904 <ILI9341_Draw_Pixel+0x26c>)
 800b8d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b8d8:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800b8da:	69bb      	ldr	r3, [r7, #24]
 800b8dc:	3301      	adds	r3, #1
 800b8de:	61bb      	str	r3, [r7, #24]
 800b8e0:	69bb      	ldr	r3, [r7, #24]
 800b8e2:	2b02      	cmp	r3, #2
 800b8e4:	ddf3      	ble.n	800b8ce <ILI9341_Draw_Pixel+0x236>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800b8e6:	4b07      	ldr	r3, [pc, #28]	; (800b904 <ILI9341_Draw_Pixel+0x26c>)
 800b8e8:	695b      	ldr	r3, [r3, #20]
 800b8ea:	4a06      	ldr	r2, [pc, #24]	; (800b904 <ILI9341_Draw_Pixel+0x26c>)
 800b8ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b8f0:	6153      	str	r3, [r2, #20]
 800b8f2:	e000      	b.n	800b8f6 <ILI9341_Draw_Pixel+0x25e>
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800b8f4:	bf00      	nop


}
 800b8f6:	3730      	adds	r7, #48	; 0x30
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	bd80      	pop	{r7, pc}
 800b8fc:	200001ba 	.word	0x200001ba
 800b900:	200001b8 	.word	0x200001b8
 800b904:	48000400 	.word	0x48000400

0800b908 <ILI9341_Draw_Rectangle>:
 *
 *
 */

void ILI9341_Draw_Rectangle(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t height, uint16_t colour, CHUNK_Type chunk_type)
{
 800b908:	b590      	push	{r4, r7, lr}
 800b90a:	b087      	sub	sp, #28
 800b90c:	af02      	add	r7, sp, #8
 800b90e:	4604      	mov	r4, r0
 800b910:	4608      	mov	r0, r1
 800b912:	4611      	mov	r1, r2
 800b914:	461a      	mov	r2, r3
 800b916:	4623      	mov	r3, r4
 800b918:	80fb      	strh	r3, [r7, #6]
 800b91a:	4603      	mov	r3, r0
 800b91c:	80bb      	strh	r3, [r7, #4]
 800b91e:	460b      	mov	r3, r1
 800b920:	807b      	strh	r3, [r7, #2]
 800b922:	4613      	mov	r3, r2
 800b924:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800b926:	4b39      	ldr	r3, [pc, #228]	; (800ba0c <ILI9341_Draw_Rectangle+0x104>)
 800b928:	881b      	ldrh	r3, [r3, #0]
 800b92a:	b29b      	uxth	r3, r3
 800b92c:	88fa      	ldrh	r2, [r7, #6]
 800b92e:	429a      	cmp	r2, r3
 800b930:	d268      	bcs.n	800ba04 <ILI9341_Draw_Rectangle+0xfc>
 800b932:	4b37      	ldr	r3, [pc, #220]	; (800ba10 <ILI9341_Draw_Rectangle+0x108>)
 800b934:	881b      	ldrh	r3, [r3, #0]
 800b936:	b29b      	uxth	r3, r3
 800b938:	88ba      	ldrh	r2, [r7, #4]
 800b93a:	429a      	cmp	r2, r3
 800b93c:	d262      	bcs.n	800ba04 <ILI9341_Draw_Rectangle+0xfc>
	if((xpos+width-1)>=LCD_WIDTH)
 800b93e:	88fa      	ldrh	r2, [r7, #6]
 800b940:	887b      	ldrh	r3, [r7, #2]
 800b942:	4413      	add	r3, r2
 800b944:	3b01      	subs	r3, #1
 800b946:	4a31      	ldr	r2, [pc, #196]	; (800ba0c <ILI9341_Draw_Rectangle+0x104>)
 800b948:	8812      	ldrh	r2, [r2, #0]
 800b94a:	b292      	uxth	r2, r2
 800b94c:	4293      	cmp	r3, r2
 800b94e:	db05      	blt.n	800b95c <ILI9341_Draw_Rectangle+0x54>
		{
			width=LCD_WIDTH-xpos;
 800b950:	4b2e      	ldr	r3, [pc, #184]	; (800ba0c <ILI9341_Draw_Rectangle+0x104>)
 800b952:	881b      	ldrh	r3, [r3, #0]
 800b954:	b29a      	uxth	r2, r3
 800b956:	88fb      	ldrh	r3, [r7, #6]
 800b958:	1ad3      	subs	r3, r2, r3
 800b95a:	807b      	strh	r3, [r7, #2]
		}
	if((ypos+height-1)>=LCD_HEIGHT)
 800b95c:	88ba      	ldrh	r2, [r7, #4]
 800b95e:	883b      	ldrh	r3, [r7, #0]
 800b960:	4413      	add	r3, r2
 800b962:	3b01      	subs	r3, #1
 800b964:	4a2a      	ldr	r2, [pc, #168]	; (800ba10 <ILI9341_Draw_Rectangle+0x108>)
 800b966:	8812      	ldrh	r2, [r2, #0]
 800b968:	b292      	uxth	r2, r2
 800b96a:	4293      	cmp	r3, r2
 800b96c:	db05      	blt.n	800b97a <ILI9341_Draw_Rectangle+0x72>
		{
			height=LCD_HEIGHT-ypos;
 800b96e:	4b28      	ldr	r3, [pc, #160]	; (800ba10 <ILI9341_Draw_Rectangle+0x108>)
 800b970:	881b      	ldrh	r3, [r3, #0]
 800b972:	b29a      	uxth	r2, r3
 800b974:	88bb      	ldrh	r3, [r7, #4]
 800b976:	1ad3      	subs	r3, r2, r3
 800b978:	803b      	strh	r3, [r7, #0]
		}
	ILI9341_Set_Frame(	xpos,
						ypos,
						(xpos + width) - 1,
 800b97a:	88fa      	ldrh	r2, [r7, #6]
 800b97c:	887b      	ldrh	r3, [r7, #2]
 800b97e:	4413      	add	r3, r2
 800b980:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800b982:	3b01      	subs	r3, #1
 800b984:	b29c      	uxth	r4, r3
						(ypos + height) - 1);
 800b986:	88ba      	ldrh	r2, [r7, #4]
 800b988:	883b      	ldrh	r3, [r7, #0]
 800b98a:	4413      	add	r3, r2
 800b98c:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800b98e:	3b01      	subs	r3, #1
 800b990:	b29b      	uxth	r3, r3
 800b992:	88b9      	ldrh	r1, [r7, #4]
 800b994:	88f8      	ldrh	r0, [r7, #6]
 800b996:	4622      	mov	r2, r4
 800b998:	f7ff fe08 	bl	800b5ac <ILI9341_Set_Frame>
	// if odd numbered rect area is requested, we round down to nearest even number
	// to keep _LCD_Write_Frame() happy.

	// Note, truncated pixel will be needed at function end.

	uint16_t size = height*width;
 800b99c:	883a      	ldrh	r2, [r7, #0]
 800b99e:	887b      	ldrh	r3, [r7, #2]
 800b9a0:	fb12 f303 	smulbb	r3, r2, r3
 800b9a4:	81fb      	strh	r3, [r7, #14]
	uint8_t truncated = 0;
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	737b      	strb	r3, [r7, #13]

	if((size & 1) && (size > 1))		// don't round down to zero!
 800b9aa:	89fb      	ldrh	r3, [r7, #14]
 800b9ac:	f003 0301 	and.w	r3, r3, #1
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d009      	beq.n	800b9c8 <ILI9341_Draw_Rectangle+0xc0>
 800b9b4:	89fb      	ldrh	r3, [r7, #14]
 800b9b6:	2b01      	cmp	r3, #1
 800b9b8:	d906      	bls.n	800b9c8 <ILI9341_Draw_Rectangle+0xc0>
	{
		truncated = 1;
 800b9ba:	2301      	movs	r3, #1
 800b9bc:	737b      	strb	r3, [r7, #13]
	 	size = ((size >> 1) * 2);
 800b9be:	89fb      	ldrh	r3, [r7, #14]
 800b9c0:	085b      	lsrs	r3, r3, #1
 800b9c2:	b29b      	uxth	r3, r3
 800b9c4:	005b      	lsls	r3, r3, #1
 800b9c6:	81fb      	strh	r3, [r7, #14]
	}

	_LCD_Write_Frame(	xpos,
 800b9c8:	89fc      	ldrh	r4, [r7, #14]
 800b9ca:	8c3a      	ldrh	r2, [r7, #32]
 800b9cc:	88b9      	ldrh	r1, [r7, #4]
 800b9ce:	88f8      	ldrh	r0, [r7, #6]
 800b9d0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b9d4:	9300      	str	r3, [sp, #0]
 800b9d6:	4623      	mov	r3, r4
 800b9d8:	f000 f898 	bl	800bb0c <_LCD_Write_Frame>
						colour,
						size,
						chunk_type);

	// add the truncated pixel now
	if(truncated)
 800b9dc:	7b7b      	ldrb	r3, [r7, #13]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d011      	beq.n	800ba06 <ILI9341_Draw_Rectangle+0xfe>
	{
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 800b9e2:	88fa      	ldrh	r2, [r7, #6]
 800b9e4:	887b      	ldrh	r3, [r7, #2]
 800b9e6:	4413      	add	r3, r2
 800b9e8:	b29b      	uxth	r3, r3
 800b9ea:	3b01      	subs	r3, #1
 800b9ec:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 800b9ee:	88ba      	ldrh	r2, [r7, #4]
 800b9f0:	883b      	ldrh	r3, [r7, #0]
 800b9f2:	4413      	add	r3, r2
 800b9f4:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 800b9f6:	3b01      	subs	r3, #1
 800b9f8:	b29b      	uxth	r3, r3
 800b9fa:	8c3a      	ldrh	r2, [r7, #32]
 800b9fc:	4619      	mov	r1, r3
 800b9fe:	f7ff fe4b 	bl	800b698 <ILI9341_Draw_Pixel>
 800ba02:	e000      	b.n	800ba06 <ILI9341_Draw_Rectangle+0xfe>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800ba04:	bf00      	nop
							colour);
	}
}
 800ba06:	3714      	adds	r7, #20
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	bd90      	pop	{r4, r7, pc}
 800ba0c:	200001ba 	.word	0x200001ba
 800ba10:	200001b8 	.word	0x200001b8

0800ba14 <ILI9341_Set_Rotation>:
 *
 * 	Set LCD orientation
 *
 */
void ILI9341_Set_Rotation(uint8_t rotation)
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b084      	sub	sp, #16
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	4603      	mov	r3, r0
 800ba1c:	71fb      	strb	r3, [r7, #7]

	uint8_t screen_rotation = rotation;
 800ba1e:	79fb      	ldrb	r3, [r7, #7]
 800ba20:	73fb      	strb	r3, [r7, #15]

	_LCD_SendCommand(0x36);
 800ba22:	2036      	movs	r0, #54	; 0x36
 800ba24:	f000 f922 	bl	800bc6c <_LCD_SendCommand>
	//HAL_Delay(1);

	switch(screen_rotation)
 800ba28:	7bfb      	ldrb	r3, [r7, #15]
 800ba2a:	2b03      	cmp	r3, #3
 800ba2c:	d836      	bhi.n	800ba9c <ILI9341_Set_Rotation+0x88>
 800ba2e:	a201      	add	r2, pc, #4	; (adr r2, 800ba34 <ILI9341_Set_Rotation+0x20>)
 800ba30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba34:	0800ba45 	.word	0x0800ba45
 800ba38:	0800ba5b 	.word	0x0800ba5b
 800ba3c:	0800ba71 	.word	0x0800ba71
 800ba40:	0800ba87 	.word	0x0800ba87
	{
		case SCREEN_VERTICAL_1:
			_LCD_SendData(0x40|0x08);
 800ba44:	2048      	movs	r0, #72	; 0x48
 800ba46:	f000 f943 	bl	800bcd0 <_LCD_SendData>
			LCD_WIDTH = 240;
 800ba4a:	4b17      	ldr	r3, [pc, #92]	; (800baa8 <ILI9341_Set_Rotation+0x94>)
 800ba4c:	22f0      	movs	r2, #240	; 0xf0
 800ba4e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800ba50:	4b16      	ldr	r3, [pc, #88]	; (800baac <ILI9341_Set_Rotation+0x98>)
 800ba52:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800ba56:	801a      	strh	r2, [r3, #0]
			break;
 800ba58:	e021      	b.n	800ba9e <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_1:
			_LCD_SendData(0x20|0x08);
 800ba5a:	2028      	movs	r0, #40	; 0x28
 800ba5c:	f000 f938 	bl	800bcd0 <_LCD_SendData>
			LCD_WIDTH  = 320;
 800ba60:	4b11      	ldr	r3, [pc, #68]	; (800baa8 <ILI9341_Set_Rotation+0x94>)
 800ba62:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800ba66:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 800ba68:	4b10      	ldr	r3, [pc, #64]	; (800baac <ILI9341_Set_Rotation+0x98>)
 800ba6a:	22f0      	movs	r2, #240	; 0xf0
 800ba6c:	801a      	strh	r2, [r3, #0]
			break;
 800ba6e:	e016      	b.n	800ba9e <ILI9341_Set_Rotation+0x8a>
		case SCREEN_VERTICAL_2:
			_LCD_SendData(0x80|0x08);
 800ba70:	2088      	movs	r0, #136	; 0x88
 800ba72:	f000 f92d 	bl	800bcd0 <_LCD_SendData>
			LCD_WIDTH  = 240;
 800ba76:	4b0c      	ldr	r3, [pc, #48]	; (800baa8 <ILI9341_Set_Rotation+0x94>)
 800ba78:	22f0      	movs	r2, #240	; 0xf0
 800ba7a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800ba7c:	4b0b      	ldr	r3, [pc, #44]	; (800baac <ILI9341_Set_Rotation+0x98>)
 800ba7e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800ba82:	801a      	strh	r2, [r3, #0]
			break;
 800ba84:	e00b      	b.n	800ba9e <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_2:
			_LCD_SendData(0x40|0x80|0x20|0x08);
 800ba86:	20e8      	movs	r0, #232	; 0xe8
 800ba88:	f000 f922 	bl	800bcd0 <_LCD_SendData>
			LCD_WIDTH  = 320;
 800ba8c:	4b06      	ldr	r3, [pc, #24]	; (800baa8 <ILI9341_Set_Rotation+0x94>)
 800ba8e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800ba92:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 800ba94:	4b05      	ldr	r3, [pc, #20]	; (800baac <ILI9341_Set_Rotation+0x98>)
 800ba96:	22f0      	movs	r2, #240	; 0xf0
 800ba98:	801a      	strh	r2, [r3, #0]
			break;
 800ba9a:	e000      	b.n	800ba9e <ILI9341_Set_Rotation+0x8a>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 800ba9c:	bf00      	nop
	}
}
 800ba9e:	bf00      	nop
 800baa0:	3710      	adds	r7, #16
 800baa2:	46bd      	mov	sp, r7
 800baa4:	bd80      	pop	{r7, pc}
 800baa6:	bf00      	nop
 800baa8:	200001ba 	.word	0x200001ba
 800baac:	200001b8 	.word	0x200001b8

0800bab0 <_LCD_Enable>:
 *
 * Enable LCD display
 *
 */
void _LCD_Enable()
{
 800bab0:	b480      	push	{r7}
 800bab2:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 800bab4:	4b05      	ldr	r3, [pc, #20]	; (800bacc <_LCD_Enable+0x1c>)
 800bab6:	695b      	ldr	r3, [r3, #20]
 800bab8:	4a04      	ldr	r2, [pc, #16]	; (800bacc <_LCD_Enable+0x1c>)
 800baba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800babe:	6153      	str	r3, [r2, #20]
}
 800bac0:	bf00      	nop
 800bac2:	46bd      	mov	sp, r7
 800bac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac8:	4770      	bx	lr
 800baca:	bf00      	nop
 800bacc:	48000400 	.word	0x48000400

0800bad0 <_LCD_Reset>:
 *
 * 	Reset LCD
 *
 */
void _LCD_Reset()
{
 800bad0:	b580      	push	{r7, lr}
 800bad2:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR &= ~(LCD_RST_PIN);
 800bad4:	4b0c      	ldr	r3, [pc, #48]	; (800bb08 <_LCD_Reset+0x38>)
 800bad6:	695b      	ldr	r3, [r3, #20]
 800bad8:	4a0b      	ldr	r2, [pc, #44]	; (800bb08 <_LCD_Reset+0x38>)
 800bada:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bade:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 800bae0:	20c8      	movs	r0, #200	; 0xc8
 800bae2:	f7f9 fe47 	bl	8005774 <HAL_Delay>
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800bae6:	4b08      	ldr	r3, [pc, #32]	; (800bb08 <_LCD_Reset+0x38>)
 800bae8:	695b      	ldr	r3, [r3, #20]
 800baea:	4a07      	ldr	r2, [pc, #28]	; (800bb08 <_LCD_Reset+0x38>)
 800baec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800baf0:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 800baf2:	20c8      	movs	r0, #200	; 0xc8
 800baf4:	f7f9 fe3e 	bl	8005774 <HAL_Delay>
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 800baf8:	4b03      	ldr	r3, [pc, #12]	; (800bb08 <_LCD_Reset+0x38>)
 800bafa:	695b      	ldr	r3, [r3, #20]
 800bafc:	4a02      	ldr	r2, [pc, #8]	; (800bb08 <_LCD_Reset+0x38>)
 800bafe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bb02:	6153      	str	r3, [r2, #20]
}
 800bb04:	bf00      	nop
 800bb06:	bd80      	pop	{r7, pc}
 800bb08:	48000400 	.word	0x48000400

0800bb0c <_LCD_Write_Frame>:
 *
 *	entire data sent to this function is a CHUNK < BURST_MAX_SIZE
 *	each CHUNK is broken down into smaller BLOCKS
 */
void _LCD_Write_Frame(uint16_t chunk_xpos, uint16_t chunk_ypos, uint16_t colour, uint32_t chunk_size, CHUNK_Type chunk_type)
{
 800bb0c:	b5b0      	push	{r4, r5, r7, lr}
 800bb0e:	b08e      	sub	sp, #56	; 0x38
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	607b      	str	r3, [r7, #4]
 800bb14:	4603      	mov	r3, r0
 800bb16:	81fb      	strh	r3, [r7, #14]
 800bb18:	460b      	mov	r3, r1
 800bb1a:	81bb      	strh	r3, [r7, #12]
 800bb1c:	4613      	mov	r3, r2
 800bb1e:	817b      	strh	r3, [r7, #10]
 800bb20:	466b      	mov	r3, sp
 800bb22:	461d      	mov	r5, r3

	uint32_t buffer_size = 0;
 800bb24:	2300      	movs	r3, #0
 800bb26:	62fb      	str	r3, [r7, #44]	; 0x2c
	if((chunk_size*2) < BURST_MAX_SIZE)
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	005b      	lsls	r3, r3, #1
 800bb2c:	4a4d      	ldr	r2, [pc, #308]	; (800bc64 <_LCD_Write_Frame+0x158>)
 800bb2e:	8812      	ldrh	r2, [r2, #0]
 800bb30:	4293      	cmp	r3, r2
 800bb32:	d202      	bcs.n	800bb3a <_LCD_Write_Frame+0x2e>
	{
		buffer_size = chunk_size;
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bb38:	e002      	b.n	800bb40 <_LCD_Write_Frame+0x34>
	}
	else
	{
		buffer_size = BURST_MAX_SIZE;
 800bb3a:	4b4a      	ldr	r3, [pc, #296]	; (800bc64 <_LCD_Write_Frame+0x158>)
 800bb3c:	881b      	ldrh	r3, [r3, #0]
 800bb3e:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	unsigned char chifted = 	colour>>8;;
 800bb40:	897b      	ldrh	r3, [r7, #10]
 800bb42:	0a1b      	lsrs	r3, r3, #8
 800bb44:	b29b      	uxth	r3, r3
 800bb46:	77fb      	strb	r3, [r7, #31]
	unsigned char burst_buffer[buffer_size];
 800bb48:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bb4a:	4603      	mov	r3, r0
 800bb4c:	3b01      	subs	r3, #1
 800bb4e:	61bb      	str	r3, [r7, #24]
 800bb50:	4601      	mov	r1, r0
 800bb52:	f04f 0200 	mov.w	r2, #0
 800bb56:	f04f 0300 	mov.w	r3, #0
 800bb5a:	f04f 0400 	mov.w	r4, #0
 800bb5e:	00d4      	lsls	r4, r2, #3
 800bb60:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800bb64:	00cb      	lsls	r3, r1, #3
 800bb66:	4601      	mov	r1, r0
 800bb68:	f04f 0200 	mov.w	r2, #0
 800bb6c:	f04f 0300 	mov.w	r3, #0
 800bb70:	f04f 0400 	mov.w	r4, #0
 800bb74:	00d4      	lsls	r4, r2, #3
 800bb76:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800bb7a:	00cb      	lsls	r3, r1, #3
 800bb7c:	1dc3      	adds	r3, r0, #7
 800bb7e:	08db      	lsrs	r3, r3, #3
 800bb80:	00db      	lsls	r3, r3, #3
 800bb82:	ebad 0d03 	sub.w	sp, sp, r3
 800bb86:	466b      	mov	r3, sp
 800bb88:	3300      	adds	r3, #0
 800bb8a:	617b      	str	r3, [r7, #20]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	633b      	str	r3, [r7, #48]	; 0x30
 800bb90:	e00d      	b.n	800bbae <_LCD_Write_Frame+0xa2>
	{
			burst_buffer[j] = 	chifted;
 800bb92:	697a      	ldr	r2, [r7, #20]
 800bb94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb96:	4413      	add	r3, r2
 800bb98:	7ffa      	ldrb	r2, [r7, #31]
 800bb9a:	701a      	strb	r2, [r3, #0]
			burst_buffer[j+1] = colour;
 800bb9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb9e:	3301      	adds	r3, #1
 800bba0:	897a      	ldrh	r2, [r7, #10]
 800bba2:	b2d1      	uxtb	r1, r2
 800bba4:	697a      	ldr	r2, [r7, #20]
 800bba6:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 800bba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbaa:	3302      	adds	r3, #2
 800bbac:	633b      	str	r3, [r7, #48]	; 0x30
 800bbae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bbb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbb2:	429a      	cmp	r2, r3
 800bbb4:	d3ed      	bcc.n	800bb92 <_LCD_Write_Frame+0x86>
	}
	
	uint32_t Sending_size = chunk_size*2;
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	005b      	lsls	r3, r3, #1
 800bbba:	613b      	str	r3, [r7, #16]

	// make sure we don't divide by size=0
	uint32_t Sending_in_Block = 1;
 800bbbc:	2301      	movs	r3, #1
 800bbbe:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t Remainder_from_block = 0;
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	62bb      	str	r3, [r7, #40]	; 0x28
	if(chunk_size > 0)
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d00d      	beq.n	800bbe6 <_LCD_Write_Frame+0xda>
	{
			Sending_in_Block 		= Sending_size/buffer_size;
 800bbca:	693a      	ldr	r2, [r7, #16]
 800bbcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbce:	fbb2 f3f3 	udiv	r3, r2, r3
 800bbd2:	637b      	str	r3, [r7, #52]	; 0x34
			Remainder_from_block 	= Sending_size%buffer_size;
 800bbd4:	693b      	ldr	r3, [r7, #16]
 800bbd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bbd8:	fbb3 f2f2 	udiv	r2, r3, r2
 800bbdc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bbde:	fb01 f202 	mul.w	r2, r1, r2
 800bbe2:	1a9b      	subs	r3, r3, r2
 800bbe4:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	// send blocks
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800bbe6:	4b20      	ldr	r3, [pc, #128]	; (800bc68 <_LCD_Write_Frame+0x15c>)
 800bbe8:	695b      	ldr	r3, [r3, #20]
 800bbea:	4a1f      	ldr	r2, [pc, #124]	; (800bc68 <_LCD_Write_Frame+0x15c>)
 800bbec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bbf0:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800bbf2:	4b1d      	ldr	r3, [pc, #116]	; (800bc68 <_LCD_Write_Frame+0x15c>)
 800bbf4:	695b      	ldr	r3, [r3, #20]
 800bbf6:	4a1c      	ldr	r2, [pc, #112]	; (800bc68 <_LCD_Write_Frame+0x15c>)
 800bbf8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bbfc:	6153      	str	r3, [r2, #20]

	if(Sending_in_Block != 0)
 800bbfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d00f      	beq.n	800bc24 <_LCD_Write_Frame+0x118>
	{
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800bc04:	2300      	movs	r3, #0
 800bc06:	627b      	str	r3, [r7, #36]	; 0x24
 800bc08:	e008      	b.n	800bc1c <_LCD_Write_Frame+0x110>
		{
			_SPI_SendByteMultiByte(burst_buffer, buffer_size, 0, 9);
 800bc0a:	6978      	ldr	r0, [r7, #20]
 800bc0c:	2309      	movs	r3, #9
 800bc0e:	2200      	movs	r2, #0
 800bc10:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bc12:	f000 f8a5 	bl	800bd60 <_SPI_SendByteMultiByte>
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800bc16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc18:	3301      	adds	r3, #1
 800bc1a:	627b      	str	r3, [r7, #36]	; 0x24
 800bc1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc20:	429a      	cmp	r2, r3
 800bc22:	d3f2      	bcc.n	800bc0a <_LCD_Write_Frame+0xfe>
		}
	}

	_SPI_SendByteMultiByte(burst_buffer, Remainder_from_block, 0, 9);
 800bc24:	6978      	ldr	r0, [r7, #20]
 800bc26:	2309      	movs	r3, #9
 800bc28:	2200      	movs	r2, #0
 800bc2a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bc2c:	f000 f898 	bl	800bd60 <_SPI_SendByteMultiByte>


	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800bc30:	2300      	movs	r3, #0
 800bc32:	623b      	str	r3, [r7, #32]
 800bc34:	e008      	b.n	800bc48 <_LCD_Write_Frame+0x13c>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800bc36:	4b0c      	ldr	r3, [pc, #48]	; (800bc68 <_LCD_Write_Frame+0x15c>)
 800bc38:	695b      	ldr	r3, [r3, #20]
 800bc3a:	4a0b      	ldr	r2, [pc, #44]	; (800bc68 <_LCD_Write_Frame+0x15c>)
 800bc3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bc40:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800bc42:	6a3b      	ldr	r3, [r7, #32]
 800bc44:	3301      	adds	r3, #1
 800bc46:	623b      	str	r3, [r7, #32]
 800bc48:	6a3b      	ldr	r3, [r7, #32]
 800bc4a:	2b02      	cmp	r3, #2
 800bc4c:	ddf3      	ble.n	800bc36 <_LCD_Write_Frame+0x12a>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800bc4e:	4b06      	ldr	r3, [pc, #24]	; (800bc68 <_LCD_Write_Frame+0x15c>)
 800bc50:	695b      	ldr	r3, [r3, #20]
 800bc52:	4a05      	ldr	r2, [pc, #20]	; (800bc68 <_LCD_Write_Frame+0x15c>)
 800bc54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc58:	6153      	str	r3, [r2, #20]
 800bc5a:	46ad      	mov	sp, r5

}
 800bc5c:	bf00      	nop
 800bc5e:	3738      	adds	r7, #56	; 0x38
 800bc60:	46bd      	mov	sp, r7
 800bc62:	bdb0      	pop	{r4, r5, r7, pc}
 800bc64:	200001bc 	.word	0x200001bc
 800bc68:	48000400 	.word	0x48000400

0800bc6c <_LCD_SendCommand>:
 *
 * 	Send command to LCD
 *
 */
void _LCD_SendCommand(uint8_t command)
{
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b084      	sub	sp, #16
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	4603      	mov	r3, r0
 800bc74:	71fb      	strb	r3, [r7, #7]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800bc76:	4b15      	ldr	r3, [pc, #84]	; (800bccc <_LCD_SendCommand+0x60>)
 800bc78:	695b      	ldr	r3, [r3, #20]
 800bc7a:	4a14      	ldr	r2, [pc, #80]	; (800bccc <_LCD_SendCommand+0x60>)
 800bc7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bc80:	6153      	str	r3, [r2, #20]
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800bc82:	4b12      	ldr	r3, [pc, #72]	; (800bccc <_LCD_SendCommand+0x60>)
 800bc84:	695b      	ldr	r3, [r3, #20]
 800bc86:	4a11      	ldr	r2, [pc, #68]	; (800bccc <_LCD_SendCommand+0x60>)
 800bc88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bc8c:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(command, 0 , 0);
 800bc8e:	79fb      	ldrb	r3, [r7, #7]
 800bc90:	2200      	movs	r2, #0
 800bc92:	2100      	movs	r1, #0
 800bc94:	4618      	mov	r0, r3
 800bc96:	f000 f84d 	bl	800bd34 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	60fb      	str	r3, [r7, #12]
 800bc9e:	e008      	b.n	800bcb2 <_LCD_SendCommand+0x46>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800bca0:	4b0a      	ldr	r3, [pc, #40]	; (800bccc <_LCD_SendCommand+0x60>)
 800bca2:	695b      	ldr	r3, [r3, #20]
 800bca4:	4a09      	ldr	r2, [pc, #36]	; (800bccc <_LCD_SendCommand+0x60>)
 800bca6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bcaa:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	3301      	adds	r3, #1
 800bcb0:	60fb      	str	r3, [r7, #12]
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	2b02      	cmp	r3, #2
 800bcb6:	ddf3      	ble.n	800bca0 <_LCD_SendCommand+0x34>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800bcb8:	4b04      	ldr	r3, [pc, #16]	; (800bccc <_LCD_SendCommand+0x60>)
 800bcba:	695b      	ldr	r3, [r3, #20]
 800bcbc:	4a03      	ldr	r2, [pc, #12]	; (800bccc <_LCD_SendCommand+0x60>)
 800bcbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bcc2:	6153      	str	r3, [r2, #20]
}
 800bcc4:	bf00      	nop
 800bcc6:	3710      	adds	r7, #16
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	bd80      	pop	{r7, pc}
 800bccc:	48000400 	.word	0x48000400

0800bcd0 <_LCD_SendData>:
 *
 * 	Send Data to LCD
 *
 */
void _LCD_SendData(uint8_t data)
{
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b084      	sub	sp, #16
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	4603      	mov	r3, r0
 800bcd8:	71fb      	strb	r3, [r7, #7]
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800bcda:	4b15      	ldr	r3, [pc, #84]	; (800bd30 <_LCD_SendData+0x60>)
 800bcdc:	695b      	ldr	r3, [r3, #20]
 800bcde:	4a14      	ldr	r2, [pc, #80]	; (800bd30 <_LCD_SendData+0x60>)
 800bce0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bce4:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800bce6:	4b12      	ldr	r3, [pc, #72]	; (800bd30 <_LCD_SendData+0x60>)
 800bce8:	695b      	ldr	r3, [r3, #20]
 800bcea:	4a11      	ldr	r2, [pc, #68]	; (800bd30 <_LCD_SendData+0x60>)
 800bcec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bcf0:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(data, 0 , 0);
 800bcf2:	79fb      	ldrb	r3, [r7, #7]
 800bcf4:	2200      	movs	r2, #0
 800bcf6:	2100      	movs	r1, #0
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	f000 f81b 	bl	800bd34 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800bcfe:	2300      	movs	r3, #0
 800bd00:	60fb      	str	r3, [r7, #12]
 800bd02:	e008      	b.n	800bd16 <_LCD_SendData+0x46>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800bd04:	4b0a      	ldr	r3, [pc, #40]	; (800bd30 <_LCD_SendData+0x60>)
 800bd06:	695b      	ldr	r3, [r3, #20]
 800bd08:	4a09      	ldr	r2, [pc, #36]	; (800bd30 <_LCD_SendData+0x60>)
 800bd0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bd0e:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	3301      	adds	r3, #1
 800bd14:	60fb      	str	r3, [r7, #12]
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	2b02      	cmp	r3, #2
 800bd1a:	ddf3      	ble.n	800bd04 <_LCD_SendData+0x34>

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800bd1c:	4b04      	ldr	r3, [pc, #16]	; (800bd30 <_LCD_SendData+0x60>)
 800bd1e:	695b      	ldr	r3, [r3, #20]
 800bd20:	4a03      	ldr	r2, [pc, #12]	; (800bd30 <_LCD_SendData+0x60>)
 800bd22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bd26:	6153      	str	r3, [r2, #20]
}
 800bd28:	bf00      	nop
 800bd2a:	3710      	adds	r7, #16
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	bd80      	pop	{r7, pc}
 800bd30:	48000400 	.word	0x48000400

0800bd34 <_SPI_SendByte>:
 *
 * 	Send single byte over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByte(unsigned char data_buffer, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 800bd34:	b580      	push	{r7, lr}
 800bd36:	b082      	sub	sp, #8
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	4603      	mov	r3, r0
 800bd3c:	71fb      	strb	r3, [r7, #7]
 800bd3e:	460b      	mov	r3, r1
 800bd40:	71bb      	strb	r3, [r7, #6]
 800bd42:	4613      	mov	r3, r2
 800bd44:	717b      	strb	r3, [r7, #5]

#ifdef USE_HAL_SPI
	HAL_SPI_Transmit(HSPI_INSTANCE, &data_buffer, 1, 1);
 800bd46:	1df9      	adds	r1, r7, #7
 800bd48:	2301      	movs	r3, #1
 800bd4a:	2201      	movs	r2, #1
 800bd4c:	4803      	ldr	r0, [pc, #12]	; (800bd5c <_SPI_SendByte+0x28>)
 800bd4e:	f7fd fa9f 	bl	8009290 <HAL_SPI_Transmit>
   	for(int d = 0; d < post_frame_delay ; d++)
   		asm("nop");

#endif

}
 800bd52:	bf00      	nop
 800bd54:	3708      	adds	r7, #8
 800bd56:	46bd      	mov	sp, r7
 800bd58:	bd80      	pop	{r7, pc}
 800bd5a:	bf00      	nop
 800bd5c:	200015f0 	.word	0x200015f0

0800bd60 <_SPI_SendByteMultiByte>:
 *
 * 	Send multiple bytes over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByteMultiByte(unsigned char *data_buffer, uint32_t buffer_size, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 800bd60:	b580      	push	{r7, lr}
 800bd62:	b084      	sub	sp, #16
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	60f8      	str	r0, [r7, #12]
 800bd68:	60b9      	str	r1, [r7, #8]
 800bd6a:	4611      	mov	r1, r2
 800bd6c:	461a      	mov	r2, r3
 800bd6e:	460b      	mov	r3, r1
 800bd70:	71fb      	strb	r3, [r7, #7]
 800bd72:	4613      	mov	r3, r2
 800bd74:	71bb      	strb	r3, [r7, #6]

#ifdef USE_HAL_SPI
	HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)data_buffer, buffer_size, 2 );
 800bd76:	68bb      	ldr	r3, [r7, #8]
 800bd78:	b29a      	uxth	r2, r3
 800bd7a:	2302      	movs	r3, #2
 800bd7c:	68f9      	ldr	r1, [r7, #12]
 800bd7e:	4803      	ldr	r0, [pc, #12]	; (800bd8c <_SPI_SendByteMultiByte+0x2c>)
 800bd80:	f7fd fa86 	bl	8009290 <HAL_SPI_Transmit>
   	for(int d = 0; d < post_frame_delay ; d++)
   		asm("nop");

#endif

}
 800bd84:	bf00      	nop
 800bd86:	3710      	adds	r7, #16
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	bd80      	pop	{r7, pc}
 800bd8c:	200015f0 	.word	0x200015f0

0800bd90 <__errno>:
 800bd90:	4b01      	ldr	r3, [pc, #4]	; (800bd98 <__errno+0x8>)
 800bd92:	6818      	ldr	r0, [r3, #0]
 800bd94:	4770      	bx	lr
 800bd96:	bf00      	nop
 800bd98:	20001200 	.word	0x20001200

0800bd9c <__libc_init_array>:
 800bd9c:	b570      	push	{r4, r5, r6, lr}
 800bd9e:	4e0d      	ldr	r6, [pc, #52]	; (800bdd4 <__libc_init_array+0x38>)
 800bda0:	4c0d      	ldr	r4, [pc, #52]	; (800bdd8 <__libc_init_array+0x3c>)
 800bda2:	1ba4      	subs	r4, r4, r6
 800bda4:	10a4      	asrs	r4, r4, #2
 800bda6:	2500      	movs	r5, #0
 800bda8:	42a5      	cmp	r5, r4
 800bdaa:	d109      	bne.n	800bdc0 <__libc_init_array+0x24>
 800bdac:	4e0b      	ldr	r6, [pc, #44]	; (800bddc <__libc_init_array+0x40>)
 800bdae:	4c0c      	ldr	r4, [pc, #48]	; (800bde0 <__libc_init_array+0x44>)
 800bdb0:	f002 fc32 	bl	800e618 <_init>
 800bdb4:	1ba4      	subs	r4, r4, r6
 800bdb6:	10a4      	asrs	r4, r4, #2
 800bdb8:	2500      	movs	r5, #0
 800bdba:	42a5      	cmp	r5, r4
 800bdbc:	d105      	bne.n	800bdca <__libc_init_array+0x2e>
 800bdbe:	bd70      	pop	{r4, r5, r6, pc}
 800bdc0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bdc4:	4798      	blx	r3
 800bdc6:	3501      	adds	r5, #1
 800bdc8:	e7ee      	b.n	800bda8 <__libc_init_array+0xc>
 800bdca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bdce:	4798      	blx	r3
 800bdd0:	3501      	adds	r5, #1
 800bdd2:	e7f2      	b.n	800bdba <__libc_init_array+0x1e>
 800bdd4:	0800efc0 	.word	0x0800efc0
 800bdd8:	0800efc0 	.word	0x0800efc0
 800bddc:	0800efc0 	.word	0x0800efc0
 800bde0:	0800efc4 	.word	0x0800efc4

0800bde4 <memset>:
 800bde4:	4402      	add	r2, r0
 800bde6:	4603      	mov	r3, r0
 800bde8:	4293      	cmp	r3, r2
 800bdea:	d100      	bne.n	800bdee <memset+0xa>
 800bdec:	4770      	bx	lr
 800bdee:	f803 1b01 	strb.w	r1, [r3], #1
 800bdf2:	e7f9      	b.n	800bde8 <memset+0x4>

0800bdf4 <__cvt>:
 800bdf4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bdf8:	ec55 4b10 	vmov	r4, r5, d0
 800bdfc:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800bdfe:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800be02:	2d00      	cmp	r5, #0
 800be04:	460e      	mov	r6, r1
 800be06:	4691      	mov	r9, r2
 800be08:	4619      	mov	r1, r3
 800be0a:	bfb8      	it	lt
 800be0c:	4622      	movlt	r2, r4
 800be0e:	462b      	mov	r3, r5
 800be10:	f027 0720 	bic.w	r7, r7, #32
 800be14:	bfbb      	ittet	lt
 800be16:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800be1a:	461d      	movlt	r5, r3
 800be1c:	2300      	movge	r3, #0
 800be1e:	232d      	movlt	r3, #45	; 0x2d
 800be20:	bfb8      	it	lt
 800be22:	4614      	movlt	r4, r2
 800be24:	2f46      	cmp	r7, #70	; 0x46
 800be26:	700b      	strb	r3, [r1, #0]
 800be28:	d004      	beq.n	800be34 <__cvt+0x40>
 800be2a:	2f45      	cmp	r7, #69	; 0x45
 800be2c:	d100      	bne.n	800be30 <__cvt+0x3c>
 800be2e:	3601      	adds	r6, #1
 800be30:	2102      	movs	r1, #2
 800be32:	e000      	b.n	800be36 <__cvt+0x42>
 800be34:	2103      	movs	r1, #3
 800be36:	ab03      	add	r3, sp, #12
 800be38:	9301      	str	r3, [sp, #4]
 800be3a:	ab02      	add	r3, sp, #8
 800be3c:	9300      	str	r3, [sp, #0]
 800be3e:	4632      	mov	r2, r6
 800be40:	4653      	mov	r3, sl
 800be42:	ec45 4b10 	vmov	d0, r4, r5
 800be46:	f000 fe27 	bl	800ca98 <_dtoa_r>
 800be4a:	2f47      	cmp	r7, #71	; 0x47
 800be4c:	4680      	mov	r8, r0
 800be4e:	d102      	bne.n	800be56 <__cvt+0x62>
 800be50:	f019 0f01 	tst.w	r9, #1
 800be54:	d026      	beq.n	800bea4 <__cvt+0xb0>
 800be56:	2f46      	cmp	r7, #70	; 0x46
 800be58:	eb08 0906 	add.w	r9, r8, r6
 800be5c:	d111      	bne.n	800be82 <__cvt+0x8e>
 800be5e:	f898 3000 	ldrb.w	r3, [r8]
 800be62:	2b30      	cmp	r3, #48	; 0x30
 800be64:	d10a      	bne.n	800be7c <__cvt+0x88>
 800be66:	2200      	movs	r2, #0
 800be68:	2300      	movs	r3, #0
 800be6a:	4620      	mov	r0, r4
 800be6c:	4629      	mov	r1, r5
 800be6e:	f7f4 fe53 	bl	8000b18 <__aeabi_dcmpeq>
 800be72:	b918      	cbnz	r0, 800be7c <__cvt+0x88>
 800be74:	f1c6 0601 	rsb	r6, r6, #1
 800be78:	f8ca 6000 	str.w	r6, [sl]
 800be7c:	f8da 3000 	ldr.w	r3, [sl]
 800be80:	4499      	add	r9, r3
 800be82:	2200      	movs	r2, #0
 800be84:	2300      	movs	r3, #0
 800be86:	4620      	mov	r0, r4
 800be88:	4629      	mov	r1, r5
 800be8a:	f7f4 fe45 	bl	8000b18 <__aeabi_dcmpeq>
 800be8e:	b938      	cbnz	r0, 800bea0 <__cvt+0xac>
 800be90:	2230      	movs	r2, #48	; 0x30
 800be92:	9b03      	ldr	r3, [sp, #12]
 800be94:	454b      	cmp	r3, r9
 800be96:	d205      	bcs.n	800bea4 <__cvt+0xb0>
 800be98:	1c59      	adds	r1, r3, #1
 800be9a:	9103      	str	r1, [sp, #12]
 800be9c:	701a      	strb	r2, [r3, #0]
 800be9e:	e7f8      	b.n	800be92 <__cvt+0x9e>
 800bea0:	f8cd 900c 	str.w	r9, [sp, #12]
 800bea4:	9b03      	ldr	r3, [sp, #12]
 800bea6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bea8:	eba3 0308 	sub.w	r3, r3, r8
 800beac:	4640      	mov	r0, r8
 800beae:	6013      	str	r3, [r2, #0]
 800beb0:	b004      	add	sp, #16
 800beb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800beb6 <__exponent>:
 800beb6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800beb8:	2900      	cmp	r1, #0
 800beba:	4604      	mov	r4, r0
 800bebc:	bfba      	itte	lt
 800bebe:	4249      	neglt	r1, r1
 800bec0:	232d      	movlt	r3, #45	; 0x2d
 800bec2:	232b      	movge	r3, #43	; 0x2b
 800bec4:	2909      	cmp	r1, #9
 800bec6:	f804 2b02 	strb.w	r2, [r4], #2
 800beca:	7043      	strb	r3, [r0, #1]
 800becc:	dd20      	ble.n	800bf10 <__exponent+0x5a>
 800bece:	f10d 0307 	add.w	r3, sp, #7
 800bed2:	461f      	mov	r7, r3
 800bed4:	260a      	movs	r6, #10
 800bed6:	fb91 f5f6 	sdiv	r5, r1, r6
 800beda:	fb06 1115 	mls	r1, r6, r5, r1
 800bede:	3130      	adds	r1, #48	; 0x30
 800bee0:	2d09      	cmp	r5, #9
 800bee2:	f803 1c01 	strb.w	r1, [r3, #-1]
 800bee6:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800beea:	4629      	mov	r1, r5
 800beec:	dc09      	bgt.n	800bf02 <__exponent+0x4c>
 800beee:	3130      	adds	r1, #48	; 0x30
 800bef0:	3b02      	subs	r3, #2
 800bef2:	f802 1c01 	strb.w	r1, [r2, #-1]
 800bef6:	42bb      	cmp	r3, r7
 800bef8:	4622      	mov	r2, r4
 800befa:	d304      	bcc.n	800bf06 <__exponent+0x50>
 800befc:	1a10      	subs	r0, r2, r0
 800befe:	b003      	add	sp, #12
 800bf00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf02:	4613      	mov	r3, r2
 800bf04:	e7e7      	b.n	800bed6 <__exponent+0x20>
 800bf06:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bf0a:	f804 2b01 	strb.w	r2, [r4], #1
 800bf0e:	e7f2      	b.n	800bef6 <__exponent+0x40>
 800bf10:	2330      	movs	r3, #48	; 0x30
 800bf12:	4419      	add	r1, r3
 800bf14:	7083      	strb	r3, [r0, #2]
 800bf16:	1d02      	adds	r2, r0, #4
 800bf18:	70c1      	strb	r1, [r0, #3]
 800bf1a:	e7ef      	b.n	800befc <__exponent+0x46>

0800bf1c <_printf_float>:
 800bf1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf20:	b08d      	sub	sp, #52	; 0x34
 800bf22:	460c      	mov	r4, r1
 800bf24:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800bf28:	4616      	mov	r6, r2
 800bf2a:	461f      	mov	r7, r3
 800bf2c:	4605      	mov	r5, r0
 800bf2e:	f001 fce5 	bl	800d8fc <_localeconv_r>
 800bf32:	6803      	ldr	r3, [r0, #0]
 800bf34:	9304      	str	r3, [sp, #16]
 800bf36:	4618      	mov	r0, r3
 800bf38:	f7f4 f972 	bl	8000220 <strlen>
 800bf3c:	2300      	movs	r3, #0
 800bf3e:	930a      	str	r3, [sp, #40]	; 0x28
 800bf40:	f8d8 3000 	ldr.w	r3, [r8]
 800bf44:	9005      	str	r0, [sp, #20]
 800bf46:	3307      	adds	r3, #7
 800bf48:	f023 0307 	bic.w	r3, r3, #7
 800bf4c:	f103 0208 	add.w	r2, r3, #8
 800bf50:	f894 a018 	ldrb.w	sl, [r4, #24]
 800bf54:	f8d4 b000 	ldr.w	fp, [r4]
 800bf58:	f8c8 2000 	str.w	r2, [r8]
 800bf5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf60:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800bf64:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800bf68:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bf6c:	9307      	str	r3, [sp, #28]
 800bf6e:	f8cd 8018 	str.w	r8, [sp, #24]
 800bf72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bf76:	4ba7      	ldr	r3, [pc, #668]	; (800c214 <_printf_float+0x2f8>)
 800bf78:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bf7c:	f7f4 fdfe 	bl	8000b7c <__aeabi_dcmpun>
 800bf80:	bb70      	cbnz	r0, 800bfe0 <_printf_float+0xc4>
 800bf82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bf86:	4ba3      	ldr	r3, [pc, #652]	; (800c214 <_printf_float+0x2f8>)
 800bf88:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bf8c:	f7f4 fdd8 	bl	8000b40 <__aeabi_dcmple>
 800bf90:	bb30      	cbnz	r0, 800bfe0 <_printf_float+0xc4>
 800bf92:	2200      	movs	r2, #0
 800bf94:	2300      	movs	r3, #0
 800bf96:	4640      	mov	r0, r8
 800bf98:	4649      	mov	r1, r9
 800bf9a:	f7f4 fdc7 	bl	8000b2c <__aeabi_dcmplt>
 800bf9e:	b110      	cbz	r0, 800bfa6 <_printf_float+0x8a>
 800bfa0:	232d      	movs	r3, #45	; 0x2d
 800bfa2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bfa6:	4a9c      	ldr	r2, [pc, #624]	; (800c218 <_printf_float+0x2fc>)
 800bfa8:	4b9c      	ldr	r3, [pc, #624]	; (800c21c <_printf_float+0x300>)
 800bfaa:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800bfae:	bf8c      	ite	hi
 800bfb0:	4690      	movhi	r8, r2
 800bfb2:	4698      	movls	r8, r3
 800bfb4:	2303      	movs	r3, #3
 800bfb6:	f02b 0204 	bic.w	r2, fp, #4
 800bfba:	6123      	str	r3, [r4, #16]
 800bfbc:	6022      	str	r2, [r4, #0]
 800bfbe:	f04f 0900 	mov.w	r9, #0
 800bfc2:	9700      	str	r7, [sp, #0]
 800bfc4:	4633      	mov	r3, r6
 800bfc6:	aa0b      	add	r2, sp, #44	; 0x2c
 800bfc8:	4621      	mov	r1, r4
 800bfca:	4628      	mov	r0, r5
 800bfcc:	f000 f9e6 	bl	800c39c <_printf_common>
 800bfd0:	3001      	adds	r0, #1
 800bfd2:	f040 808d 	bne.w	800c0f0 <_printf_float+0x1d4>
 800bfd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bfda:	b00d      	add	sp, #52	; 0x34
 800bfdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfe0:	4642      	mov	r2, r8
 800bfe2:	464b      	mov	r3, r9
 800bfe4:	4640      	mov	r0, r8
 800bfe6:	4649      	mov	r1, r9
 800bfe8:	f7f4 fdc8 	bl	8000b7c <__aeabi_dcmpun>
 800bfec:	b110      	cbz	r0, 800bff4 <_printf_float+0xd8>
 800bfee:	4a8c      	ldr	r2, [pc, #560]	; (800c220 <_printf_float+0x304>)
 800bff0:	4b8c      	ldr	r3, [pc, #560]	; (800c224 <_printf_float+0x308>)
 800bff2:	e7da      	b.n	800bfaa <_printf_float+0x8e>
 800bff4:	6861      	ldr	r1, [r4, #4]
 800bff6:	1c4b      	adds	r3, r1, #1
 800bff8:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800bffc:	a80a      	add	r0, sp, #40	; 0x28
 800bffe:	d13e      	bne.n	800c07e <_printf_float+0x162>
 800c000:	2306      	movs	r3, #6
 800c002:	6063      	str	r3, [r4, #4]
 800c004:	2300      	movs	r3, #0
 800c006:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800c00a:	ab09      	add	r3, sp, #36	; 0x24
 800c00c:	9300      	str	r3, [sp, #0]
 800c00e:	ec49 8b10 	vmov	d0, r8, r9
 800c012:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c016:	6022      	str	r2, [r4, #0]
 800c018:	f8cd a004 	str.w	sl, [sp, #4]
 800c01c:	6861      	ldr	r1, [r4, #4]
 800c01e:	4628      	mov	r0, r5
 800c020:	f7ff fee8 	bl	800bdf4 <__cvt>
 800c024:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800c028:	2b47      	cmp	r3, #71	; 0x47
 800c02a:	4680      	mov	r8, r0
 800c02c:	d109      	bne.n	800c042 <_printf_float+0x126>
 800c02e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c030:	1cd8      	adds	r0, r3, #3
 800c032:	db02      	blt.n	800c03a <_printf_float+0x11e>
 800c034:	6862      	ldr	r2, [r4, #4]
 800c036:	4293      	cmp	r3, r2
 800c038:	dd47      	ble.n	800c0ca <_printf_float+0x1ae>
 800c03a:	f1aa 0a02 	sub.w	sl, sl, #2
 800c03e:	fa5f fa8a 	uxtb.w	sl, sl
 800c042:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800c046:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c048:	d824      	bhi.n	800c094 <_printf_float+0x178>
 800c04a:	3901      	subs	r1, #1
 800c04c:	4652      	mov	r2, sl
 800c04e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c052:	9109      	str	r1, [sp, #36]	; 0x24
 800c054:	f7ff ff2f 	bl	800beb6 <__exponent>
 800c058:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c05a:	1813      	adds	r3, r2, r0
 800c05c:	2a01      	cmp	r2, #1
 800c05e:	4681      	mov	r9, r0
 800c060:	6123      	str	r3, [r4, #16]
 800c062:	dc02      	bgt.n	800c06a <_printf_float+0x14e>
 800c064:	6822      	ldr	r2, [r4, #0]
 800c066:	07d1      	lsls	r1, r2, #31
 800c068:	d501      	bpl.n	800c06e <_printf_float+0x152>
 800c06a:	3301      	adds	r3, #1
 800c06c:	6123      	str	r3, [r4, #16]
 800c06e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c072:	2b00      	cmp	r3, #0
 800c074:	d0a5      	beq.n	800bfc2 <_printf_float+0xa6>
 800c076:	232d      	movs	r3, #45	; 0x2d
 800c078:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c07c:	e7a1      	b.n	800bfc2 <_printf_float+0xa6>
 800c07e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800c082:	f000 8177 	beq.w	800c374 <_printf_float+0x458>
 800c086:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800c08a:	d1bb      	bne.n	800c004 <_printf_float+0xe8>
 800c08c:	2900      	cmp	r1, #0
 800c08e:	d1b9      	bne.n	800c004 <_printf_float+0xe8>
 800c090:	2301      	movs	r3, #1
 800c092:	e7b6      	b.n	800c002 <_printf_float+0xe6>
 800c094:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800c098:	d119      	bne.n	800c0ce <_printf_float+0x1b2>
 800c09a:	2900      	cmp	r1, #0
 800c09c:	6863      	ldr	r3, [r4, #4]
 800c09e:	dd0c      	ble.n	800c0ba <_printf_float+0x19e>
 800c0a0:	6121      	str	r1, [r4, #16]
 800c0a2:	b913      	cbnz	r3, 800c0aa <_printf_float+0x18e>
 800c0a4:	6822      	ldr	r2, [r4, #0]
 800c0a6:	07d2      	lsls	r2, r2, #31
 800c0a8:	d502      	bpl.n	800c0b0 <_printf_float+0x194>
 800c0aa:	3301      	adds	r3, #1
 800c0ac:	440b      	add	r3, r1
 800c0ae:	6123      	str	r3, [r4, #16]
 800c0b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0b2:	65a3      	str	r3, [r4, #88]	; 0x58
 800c0b4:	f04f 0900 	mov.w	r9, #0
 800c0b8:	e7d9      	b.n	800c06e <_printf_float+0x152>
 800c0ba:	b913      	cbnz	r3, 800c0c2 <_printf_float+0x1a6>
 800c0bc:	6822      	ldr	r2, [r4, #0]
 800c0be:	07d0      	lsls	r0, r2, #31
 800c0c0:	d501      	bpl.n	800c0c6 <_printf_float+0x1aa>
 800c0c2:	3302      	adds	r3, #2
 800c0c4:	e7f3      	b.n	800c0ae <_printf_float+0x192>
 800c0c6:	2301      	movs	r3, #1
 800c0c8:	e7f1      	b.n	800c0ae <_printf_float+0x192>
 800c0ca:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800c0ce:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800c0d2:	4293      	cmp	r3, r2
 800c0d4:	db05      	blt.n	800c0e2 <_printf_float+0x1c6>
 800c0d6:	6822      	ldr	r2, [r4, #0]
 800c0d8:	6123      	str	r3, [r4, #16]
 800c0da:	07d1      	lsls	r1, r2, #31
 800c0dc:	d5e8      	bpl.n	800c0b0 <_printf_float+0x194>
 800c0de:	3301      	adds	r3, #1
 800c0e0:	e7e5      	b.n	800c0ae <_printf_float+0x192>
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	bfd4      	ite	le
 800c0e6:	f1c3 0302 	rsble	r3, r3, #2
 800c0ea:	2301      	movgt	r3, #1
 800c0ec:	4413      	add	r3, r2
 800c0ee:	e7de      	b.n	800c0ae <_printf_float+0x192>
 800c0f0:	6823      	ldr	r3, [r4, #0]
 800c0f2:	055a      	lsls	r2, r3, #21
 800c0f4:	d407      	bmi.n	800c106 <_printf_float+0x1ea>
 800c0f6:	6923      	ldr	r3, [r4, #16]
 800c0f8:	4642      	mov	r2, r8
 800c0fa:	4631      	mov	r1, r6
 800c0fc:	4628      	mov	r0, r5
 800c0fe:	47b8      	blx	r7
 800c100:	3001      	adds	r0, #1
 800c102:	d12b      	bne.n	800c15c <_printf_float+0x240>
 800c104:	e767      	b.n	800bfd6 <_printf_float+0xba>
 800c106:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800c10a:	f240 80dc 	bls.w	800c2c6 <_printf_float+0x3aa>
 800c10e:	2200      	movs	r2, #0
 800c110:	2300      	movs	r3, #0
 800c112:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c116:	f7f4 fcff 	bl	8000b18 <__aeabi_dcmpeq>
 800c11a:	2800      	cmp	r0, #0
 800c11c:	d033      	beq.n	800c186 <_printf_float+0x26a>
 800c11e:	2301      	movs	r3, #1
 800c120:	4a41      	ldr	r2, [pc, #260]	; (800c228 <_printf_float+0x30c>)
 800c122:	4631      	mov	r1, r6
 800c124:	4628      	mov	r0, r5
 800c126:	47b8      	blx	r7
 800c128:	3001      	adds	r0, #1
 800c12a:	f43f af54 	beq.w	800bfd6 <_printf_float+0xba>
 800c12e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c132:	429a      	cmp	r2, r3
 800c134:	db02      	blt.n	800c13c <_printf_float+0x220>
 800c136:	6823      	ldr	r3, [r4, #0]
 800c138:	07d8      	lsls	r0, r3, #31
 800c13a:	d50f      	bpl.n	800c15c <_printf_float+0x240>
 800c13c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c140:	4631      	mov	r1, r6
 800c142:	4628      	mov	r0, r5
 800c144:	47b8      	blx	r7
 800c146:	3001      	adds	r0, #1
 800c148:	f43f af45 	beq.w	800bfd6 <_printf_float+0xba>
 800c14c:	f04f 0800 	mov.w	r8, #0
 800c150:	f104 091a 	add.w	r9, r4, #26
 800c154:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c156:	3b01      	subs	r3, #1
 800c158:	4543      	cmp	r3, r8
 800c15a:	dc09      	bgt.n	800c170 <_printf_float+0x254>
 800c15c:	6823      	ldr	r3, [r4, #0]
 800c15e:	079b      	lsls	r3, r3, #30
 800c160:	f100 8103 	bmi.w	800c36a <_printf_float+0x44e>
 800c164:	68e0      	ldr	r0, [r4, #12]
 800c166:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c168:	4298      	cmp	r0, r3
 800c16a:	bfb8      	it	lt
 800c16c:	4618      	movlt	r0, r3
 800c16e:	e734      	b.n	800bfda <_printf_float+0xbe>
 800c170:	2301      	movs	r3, #1
 800c172:	464a      	mov	r2, r9
 800c174:	4631      	mov	r1, r6
 800c176:	4628      	mov	r0, r5
 800c178:	47b8      	blx	r7
 800c17a:	3001      	adds	r0, #1
 800c17c:	f43f af2b 	beq.w	800bfd6 <_printf_float+0xba>
 800c180:	f108 0801 	add.w	r8, r8, #1
 800c184:	e7e6      	b.n	800c154 <_printf_float+0x238>
 800c186:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c188:	2b00      	cmp	r3, #0
 800c18a:	dc2b      	bgt.n	800c1e4 <_printf_float+0x2c8>
 800c18c:	2301      	movs	r3, #1
 800c18e:	4a26      	ldr	r2, [pc, #152]	; (800c228 <_printf_float+0x30c>)
 800c190:	4631      	mov	r1, r6
 800c192:	4628      	mov	r0, r5
 800c194:	47b8      	blx	r7
 800c196:	3001      	adds	r0, #1
 800c198:	f43f af1d 	beq.w	800bfd6 <_printf_float+0xba>
 800c19c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c19e:	b923      	cbnz	r3, 800c1aa <_printf_float+0x28e>
 800c1a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c1a2:	b913      	cbnz	r3, 800c1aa <_printf_float+0x28e>
 800c1a4:	6823      	ldr	r3, [r4, #0]
 800c1a6:	07d9      	lsls	r1, r3, #31
 800c1a8:	d5d8      	bpl.n	800c15c <_printf_float+0x240>
 800c1aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c1ae:	4631      	mov	r1, r6
 800c1b0:	4628      	mov	r0, r5
 800c1b2:	47b8      	blx	r7
 800c1b4:	3001      	adds	r0, #1
 800c1b6:	f43f af0e 	beq.w	800bfd6 <_printf_float+0xba>
 800c1ba:	f04f 0900 	mov.w	r9, #0
 800c1be:	f104 0a1a 	add.w	sl, r4, #26
 800c1c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1c4:	425b      	negs	r3, r3
 800c1c6:	454b      	cmp	r3, r9
 800c1c8:	dc01      	bgt.n	800c1ce <_printf_float+0x2b2>
 800c1ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c1cc:	e794      	b.n	800c0f8 <_printf_float+0x1dc>
 800c1ce:	2301      	movs	r3, #1
 800c1d0:	4652      	mov	r2, sl
 800c1d2:	4631      	mov	r1, r6
 800c1d4:	4628      	mov	r0, r5
 800c1d6:	47b8      	blx	r7
 800c1d8:	3001      	adds	r0, #1
 800c1da:	f43f aefc 	beq.w	800bfd6 <_printf_float+0xba>
 800c1de:	f109 0901 	add.w	r9, r9, #1
 800c1e2:	e7ee      	b.n	800c1c2 <_printf_float+0x2a6>
 800c1e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c1e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c1e8:	429a      	cmp	r2, r3
 800c1ea:	bfa8      	it	ge
 800c1ec:	461a      	movge	r2, r3
 800c1ee:	2a00      	cmp	r2, #0
 800c1f0:	4691      	mov	r9, r2
 800c1f2:	dd07      	ble.n	800c204 <_printf_float+0x2e8>
 800c1f4:	4613      	mov	r3, r2
 800c1f6:	4631      	mov	r1, r6
 800c1f8:	4642      	mov	r2, r8
 800c1fa:	4628      	mov	r0, r5
 800c1fc:	47b8      	blx	r7
 800c1fe:	3001      	adds	r0, #1
 800c200:	f43f aee9 	beq.w	800bfd6 <_printf_float+0xba>
 800c204:	f104 031a 	add.w	r3, r4, #26
 800c208:	f04f 0b00 	mov.w	fp, #0
 800c20c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c210:	9306      	str	r3, [sp, #24]
 800c212:	e015      	b.n	800c240 <_printf_float+0x324>
 800c214:	7fefffff 	.word	0x7fefffff
 800c218:	0800ed08 	.word	0x0800ed08
 800c21c:	0800ed04 	.word	0x0800ed04
 800c220:	0800ed10 	.word	0x0800ed10
 800c224:	0800ed0c 	.word	0x0800ed0c
 800c228:	0800ed14 	.word	0x0800ed14
 800c22c:	2301      	movs	r3, #1
 800c22e:	9a06      	ldr	r2, [sp, #24]
 800c230:	4631      	mov	r1, r6
 800c232:	4628      	mov	r0, r5
 800c234:	47b8      	blx	r7
 800c236:	3001      	adds	r0, #1
 800c238:	f43f aecd 	beq.w	800bfd6 <_printf_float+0xba>
 800c23c:	f10b 0b01 	add.w	fp, fp, #1
 800c240:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800c244:	ebaa 0309 	sub.w	r3, sl, r9
 800c248:	455b      	cmp	r3, fp
 800c24a:	dcef      	bgt.n	800c22c <_printf_float+0x310>
 800c24c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c250:	429a      	cmp	r2, r3
 800c252:	44d0      	add	r8, sl
 800c254:	db15      	blt.n	800c282 <_printf_float+0x366>
 800c256:	6823      	ldr	r3, [r4, #0]
 800c258:	07da      	lsls	r2, r3, #31
 800c25a:	d412      	bmi.n	800c282 <_printf_float+0x366>
 800c25c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c25e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c260:	eba3 020a 	sub.w	r2, r3, sl
 800c264:	eba3 0a01 	sub.w	sl, r3, r1
 800c268:	4592      	cmp	sl, r2
 800c26a:	bfa8      	it	ge
 800c26c:	4692      	movge	sl, r2
 800c26e:	f1ba 0f00 	cmp.w	sl, #0
 800c272:	dc0e      	bgt.n	800c292 <_printf_float+0x376>
 800c274:	f04f 0800 	mov.w	r8, #0
 800c278:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c27c:	f104 091a 	add.w	r9, r4, #26
 800c280:	e019      	b.n	800c2b6 <_printf_float+0x39a>
 800c282:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c286:	4631      	mov	r1, r6
 800c288:	4628      	mov	r0, r5
 800c28a:	47b8      	blx	r7
 800c28c:	3001      	adds	r0, #1
 800c28e:	d1e5      	bne.n	800c25c <_printf_float+0x340>
 800c290:	e6a1      	b.n	800bfd6 <_printf_float+0xba>
 800c292:	4653      	mov	r3, sl
 800c294:	4642      	mov	r2, r8
 800c296:	4631      	mov	r1, r6
 800c298:	4628      	mov	r0, r5
 800c29a:	47b8      	blx	r7
 800c29c:	3001      	adds	r0, #1
 800c29e:	d1e9      	bne.n	800c274 <_printf_float+0x358>
 800c2a0:	e699      	b.n	800bfd6 <_printf_float+0xba>
 800c2a2:	2301      	movs	r3, #1
 800c2a4:	464a      	mov	r2, r9
 800c2a6:	4631      	mov	r1, r6
 800c2a8:	4628      	mov	r0, r5
 800c2aa:	47b8      	blx	r7
 800c2ac:	3001      	adds	r0, #1
 800c2ae:	f43f ae92 	beq.w	800bfd6 <_printf_float+0xba>
 800c2b2:	f108 0801 	add.w	r8, r8, #1
 800c2b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c2ba:	1a9b      	subs	r3, r3, r2
 800c2bc:	eba3 030a 	sub.w	r3, r3, sl
 800c2c0:	4543      	cmp	r3, r8
 800c2c2:	dcee      	bgt.n	800c2a2 <_printf_float+0x386>
 800c2c4:	e74a      	b.n	800c15c <_printf_float+0x240>
 800c2c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c2c8:	2a01      	cmp	r2, #1
 800c2ca:	dc01      	bgt.n	800c2d0 <_printf_float+0x3b4>
 800c2cc:	07db      	lsls	r3, r3, #31
 800c2ce:	d53a      	bpl.n	800c346 <_printf_float+0x42a>
 800c2d0:	2301      	movs	r3, #1
 800c2d2:	4642      	mov	r2, r8
 800c2d4:	4631      	mov	r1, r6
 800c2d6:	4628      	mov	r0, r5
 800c2d8:	47b8      	blx	r7
 800c2da:	3001      	adds	r0, #1
 800c2dc:	f43f ae7b 	beq.w	800bfd6 <_printf_float+0xba>
 800c2e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c2e4:	4631      	mov	r1, r6
 800c2e6:	4628      	mov	r0, r5
 800c2e8:	47b8      	blx	r7
 800c2ea:	3001      	adds	r0, #1
 800c2ec:	f108 0801 	add.w	r8, r8, #1
 800c2f0:	f43f ae71 	beq.w	800bfd6 <_printf_float+0xba>
 800c2f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 800c2fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c300:	2300      	movs	r3, #0
 800c302:	f7f4 fc09 	bl	8000b18 <__aeabi_dcmpeq>
 800c306:	b9c8      	cbnz	r0, 800c33c <_printf_float+0x420>
 800c308:	4653      	mov	r3, sl
 800c30a:	4642      	mov	r2, r8
 800c30c:	4631      	mov	r1, r6
 800c30e:	4628      	mov	r0, r5
 800c310:	47b8      	blx	r7
 800c312:	3001      	adds	r0, #1
 800c314:	d10e      	bne.n	800c334 <_printf_float+0x418>
 800c316:	e65e      	b.n	800bfd6 <_printf_float+0xba>
 800c318:	2301      	movs	r3, #1
 800c31a:	4652      	mov	r2, sl
 800c31c:	4631      	mov	r1, r6
 800c31e:	4628      	mov	r0, r5
 800c320:	47b8      	blx	r7
 800c322:	3001      	adds	r0, #1
 800c324:	f43f ae57 	beq.w	800bfd6 <_printf_float+0xba>
 800c328:	f108 0801 	add.w	r8, r8, #1
 800c32c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c32e:	3b01      	subs	r3, #1
 800c330:	4543      	cmp	r3, r8
 800c332:	dcf1      	bgt.n	800c318 <_printf_float+0x3fc>
 800c334:	464b      	mov	r3, r9
 800c336:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c33a:	e6de      	b.n	800c0fa <_printf_float+0x1de>
 800c33c:	f04f 0800 	mov.w	r8, #0
 800c340:	f104 0a1a 	add.w	sl, r4, #26
 800c344:	e7f2      	b.n	800c32c <_printf_float+0x410>
 800c346:	2301      	movs	r3, #1
 800c348:	e7df      	b.n	800c30a <_printf_float+0x3ee>
 800c34a:	2301      	movs	r3, #1
 800c34c:	464a      	mov	r2, r9
 800c34e:	4631      	mov	r1, r6
 800c350:	4628      	mov	r0, r5
 800c352:	47b8      	blx	r7
 800c354:	3001      	adds	r0, #1
 800c356:	f43f ae3e 	beq.w	800bfd6 <_printf_float+0xba>
 800c35a:	f108 0801 	add.w	r8, r8, #1
 800c35e:	68e3      	ldr	r3, [r4, #12]
 800c360:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c362:	1a9b      	subs	r3, r3, r2
 800c364:	4543      	cmp	r3, r8
 800c366:	dcf0      	bgt.n	800c34a <_printf_float+0x42e>
 800c368:	e6fc      	b.n	800c164 <_printf_float+0x248>
 800c36a:	f04f 0800 	mov.w	r8, #0
 800c36e:	f104 0919 	add.w	r9, r4, #25
 800c372:	e7f4      	b.n	800c35e <_printf_float+0x442>
 800c374:	2900      	cmp	r1, #0
 800c376:	f43f ae8b 	beq.w	800c090 <_printf_float+0x174>
 800c37a:	2300      	movs	r3, #0
 800c37c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800c380:	ab09      	add	r3, sp, #36	; 0x24
 800c382:	9300      	str	r3, [sp, #0]
 800c384:	ec49 8b10 	vmov	d0, r8, r9
 800c388:	6022      	str	r2, [r4, #0]
 800c38a:	f8cd a004 	str.w	sl, [sp, #4]
 800c38e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c392:	4628      	mov	r0, r5
 800c394:	f7ff fd2e 	bl	800bdf4 <__cvt>
 800c398:	4680      	mov	r8, r0
 800c39a:	e648      	b.n	800c02e <_printf_float+0x112>

0800c39c <_printf_common>:
 800c39c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c3a0:	4691      	mov	r9, r2
 800c3a2:	461f      	mov	r7, r3
 800c3a4:	688a      	ldr	r2, [r1, #8]
 800c3a6:	690b      	ldr	r3, [r1, #16]
 800c3a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c3ac:	4293      	cmp	r3, r2
 800c3ae:	bfb8      	it	lt
 800c3b0:	4613      	movlt	r3, r2
 800c3b2:	f8c9 3000 	str.w	r3, [r9]
 800c3b6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c3ba:	4606      	mov	r6, r0
 800c3bc:	460c      	mov	r4, r1
 800c3be:	b112      	cbz	r2, 800c3c6 <_printf_common+0x2a>
 800c3c0:	3301      	adds	r3, #1
 800c3c2:	f8c9 3000 	str.w	r3, [r9]
 800c3c6:	6823      	ldr	r3, [r4, #0]
 800c3c8:	0699      	lsls	r1, r3, #26
 800c3ca:	bf42      	ittt	mi
 800c3cc:	f8d9 3000 	ldrmi.w	r3, [r9]
 800c3d0:	3302      	addmi	r3, #2
 800c3d2:	f8c9 3000 	strmi.w	r3, [r9]
 800c3d6:	6825      	ldr	r5, [r4, #0]
 800c3d8:	f015 0506 	ands.w	r5, r5, #6
 800c3dc:	d107      	bne.n	800c3ee <_printf_common+0x52>
 800c3de:	f104 0a19 	add.w	sl, r4, #25
 800c3e2:	68e3      	ldr	r3, [r4, #12]
 800c3e4:	f8d9 2000 	ldr.w	r2, [r9]
 800c3e8:	1a9b      	subs	r3, r3, r2
 800c3ea:	42ab      	cmp	r3, r5
 800c3ec:	dc28      	bgt.n	800c440 <_printf_common+0xa4>
 800c3ee:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800c3f2:	6822      	ldr	r2, [r4, #0]
 800c3f4:	3300      	adds	r3, #0
 800c3f6:	bf18      	it	ne
 800c3f8:	2301      	movne	r3, #1
 800c3fa:	0692      	lsls	r2, r2, #26
 800c3fc:	d42d      	bmi.n	800c45a <_printf_common+0xbe>
 800c3fe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c402:	4639      	mov	r1, r7
 800c404:	4630      	mov	r0, r6
 800c406:	47c0      	blx	r8
 800c408:	3001      	adds	r0, #1
 800c40a:	d020      	beq.n	800c44e <_printf_common+0xb2>
 800c40c:	6823      	ldr	r3, [r4, #0]
 800c40e:	68e5      	ldr	r5, [r4, #12]
 800c410:	f8d9 2000 	ldr.w	r2, [r9]
 800c414:	f003 0306 	and.w	r3, r3, #6
 800c418:	2b04      	cmp	r3, #4
 800c41a:	bf08      	it	eq
 800c41c:	1aad      	subeq	r5, r5, r2
 800c41e:	68a3      	ldr	r3, [r4, #8]
 800c420:	6922      	ldr	r2, [r4, #16]
 800c422:	bf0c      	ite	eq
 800c424:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c428:	2500      	movne	r5, #0
 800c42a:	4293      	cmp	r3, r2
 800c42c:	bfc4      	itt	gt
 800c42e:	1a9b      	subgt	r3, r3, r2
 800c430:	18ed      	addgt	r5, r5, r3
 800c432:	f04f 0900 	mov.w	r9, #0
 800c436:	341a      	adds	r4, #26
 800c438:	454d      	cmp	r5, r9
 800c43a:	d11a      	bne.n	800c472 <_printf_common+0xd6>
 800c43c:	2000      	movs	r0, #0
 800c43e:	e008      	b.n	800c452 <_printf_common+0xb6>
 800c440:	2301      	movs	r3, #1
 800c442:	4652      	mov	r2, sl
 800c444:	4639      	mov	r1, r7
 800c446:	4630      	mov	r0, r6
 800c448:	47c0      	blx	r8
 800c44a:	3001      	adds	r0, #1
 800c44c:	d103      	bne.n	800c456 <_printf_common+0xba>
 800c44e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c456:	3501      	adds	r5, #1
 800c458:	e7c3      	b.n	800c3e2 <_printf_common+0x46>
 800c45a:	18e1      	adds	r1, r4, r3
 800c45c:	1c5a      	adds	r2, r3, #1
 800c45e:	2030      	movs	r0, #48	; 0x30
 800c460:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c464:	4422      	add	r2, r4
 800c466:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c46a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c46e:	3302      	adds	r3, #2
 800c470:	e7c5      	b.n	800c3fe <_printf_common+0x62>
 800c472:	2301      	movs	r3, #1
 800c474:	4622      	mov	r2, r4
 800c476:	4639      	mov	r1, r7
 800c478:	4630      	mov	r0, r6
 800c47a:	47c0      	blx	r8
 800c47c:	3001      	adds	r0, #1
 800c47e:	d0e6      	beq.n	800c44e <_printf_common+0xb2>
 800c480:	f109 0901 	add.w	r9, r9, #1
 800c484:	e7d8      	b.n	800c438 <_printf_common+0x9c>
	...

0800c488 <_printf_i>:
 800c488:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c48c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800c490:	460c      	mov	r4, r1
 800c492:	7e09      	ldrb	r1, [r1, #24]
 800c494:	b085      	sub	sp, #20
 800c496:	296e      	cmp	r1, #110	; 0x6e
 800c498:	4617      	mov	r7, r2
 800c49a:	4606      	mov	r6, r0
 800c49c:	4698      	mov	r8, r3
 800c49e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c4a0:	f000 80b3 	beq.w	800c60a <_printf_i+0x182>
 800c4a4:	d822      	bhi.n	800c4ec <_printf_i+0x64>
 800c4a6:	2963      	cmp	r1, #99	; 0x63
 800c4a8:	d036      	beq.n	800c518 <_printf_i+0x90>
 800c4aa:	d80a      	bhi.n	800c4c2 <_printf_i+0x3a>
 800c4ac:	2900      	cmp	r1, #0
 800c4ae:	f000 80b9 	beq.w	800c624 <_printf_i+0x19c>
 800c4b2:	2958      	cmp	r1, #88	; 0x58
 800c4b4:	f000 8083 	beq.w	800c5be <_printf_i+0x136>
 800c4b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c4bc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800c4c0:	e032      	b.n	800c528 <_printf_i+0xa0>
 800c4c2:	2964      	cmp	r1, #100	; 0x64
 800c4c4:	d001      	beq.n	800c4ca <_printf_i+0x42>
 800c4c6:	2969      	cmp	r1, #105	; 0x69
 800c4c8:	d1f6      	bne.n	800c4b8 <_printf_i+0x30>
 800c4ca:	6820      	ldr	r0, [r4, #0]
 800c4cc:	6813      	ldr	r3, [r2, #0]
 800c4ce:	0605      	lsls	r5, r0, #24
 800c4d0:	f103 0104 	add.w	r1, r3, #4
 800c4d4:	d52a      	bpl.n	800c52c <_printf_i+0xa4>
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	6011      	str	r1, [r2, #0]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	da03      	bge.n	800c4e6 <_printf_i+0x5e>
 800c4de:	222d      	movs	r2, #45	; 0x2d
 800c4e0:	425b      	negs	r3, r3
 800c4e2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800c4e6:	486f      	ldr	r0, [pc, #444]	; (800c6a4 <_printf_i+0x21c>)
 800c4e8:	220a      	movs	r2, #10
 800c4ea:	e039      	b.n	800c560 <_printf_i+0xd8>
 800c4ec:	2973      	cmp	r1, #115	; 0x73
 800c4ee:	f000 809d 	beq.w	800c62c <_printf_i+0x1a4>
 800c4f2:	d808      	bhi.n	800c506 <_printf_i+0x7e>
 800c4f4:	296f      	cmp	r1, #111	; 0x6f
 800c4f6:	d020      	beq.n	800c53a <_printf_i+0xb2>
 800c4f8:	2970      	cmp	r1, #112	; 0x70
 800c4fa:	d1dd      	bne.n	800c4b8 <_printf_i+0x30>
 800c4fc:	6823      	ldr	r3, [r4, #0]
 800c4fe:	f043 0320 	orr.w	r3, r3, #32
 800c502:	6023      	str	r3, [r4, #0]
 800c504:	e003      	b.n	800c50e <_printf_i+0x86>
 800c506:	2975      	cmp	r1, #117	; 0x75
 800c508:	d017      	beq.n	800c53a <_printf_i+0xb2>
 800c50a:	2978      	cmp	r1, #120	; 0x78
 800c50c:	d1d4      	bne.n	800c4b8 <_printf_i+0x30>
 800c50e:	2378      	movs	r3, #120	; 0x78
 800c510:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c514:	4864      	ldr	r0, [pc, #400]	; (800c6a8 <_printf_i+0x220>)
 800c516:	e055      	b.n	800c5c4 <_printf_i+0x13c>
 800c518:	6813      	ldr	r3, [r2, #0]
 800c51a:	1d19      	adds	r1, r3, #4
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	6011      	str	r1, [r2, #0]
 800c520:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c524:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c528:	2301      	movs	r3, #1
 800c52a:	e08c      	b.n	800c646 <_printf_i+0x1be>
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	6011      	str	r1, [r2, #0]
 800c530:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c534:	bf18      	it	ne
 800c536:	b21b      	sxthne	r3, r3
 800c538:	e7cf      	b.n	800c4da <_printf_i+0x52>
 800c53a:	6813      	ldr	r3, [r2, #0]
 800c53c:	6825      	ldr	r5, [r4, #0]
 800c53e:	1d18      	adds	r0, r3, #4
 800c540:	6010      	str	r0, [r2, #0]
 800c542:	0628      	lsls	r0, r5, #24
 800c544:	d501      	bpl.n	800c54a <_printf_i+0xc2>
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	e002      	b.n	800c550 <_printf_i+0xc8>
 800c54a:	0668      	lsls	r0, r5, #25
 800c54c:	d5fb      	bpl.n	800c546 <_printf_i+0xbe>
 800c54e:	881b      	ldrh	r3, [r3, #0]
 800c550:	4854      	ldr	r0, [pc, #336]	; (800c6a4 <_printf_i+0x21c>)
 800c552:	296f      	cmp	r1, #111	; 0x6f
 800c554:	bf14      	ite	ne
 800c556:	220a      	movne	r2, #10
 800c558:	2208      	moveq	r2, #8
 800c55a:	2100      	movs	r1, #0
 800c55c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c560:	6865      	ldr	r5, [r4, #4]
 800c562:	60a5      	str	r5, [r4, #8]
 800c564:	2d00      	cmp	r5, #0
 800c566:	f2c0 8095 	blt.w	800c694 <_printf_i+0x20c>
 800c56a:	6821      	ldr	r1, [r4, #0]
 800c56c:	f021 0104 	bic.w	r1, r1, #4
 800c570:	6021      	str	r1, [r4, #0]
 800c572:	2b00      	cmp	r3, #0
 800c574:	d13d      	bne.n	800c5f2 <_printf_i+0x16a>
 800c576:	2d00      	cmp	r5, #0
 800c578:	f040 808e 	bne.w	800c698 <_printf_i+0x210>
 800c57c:	4665      	mov	r5, ip
 800c57e:	2a08      	cmp	r2, #8
 800c580:	d10b      	bne.n	800c59a <_printf_i+0x112>
 800c582:	6823      	ldr	r3, [r4, #0]
 800c584:	07db      	lsls	r3, r3, #31
 800c586:	d508      	bpl.n	800c59a <_printf_i+0x112>
 800c588:	6923      	ldr	r3, [r4, #16]
 800c58a:	6862      	ldr	r2, [r4, #4]
 800c58c:	429a      	cmp	r2, r3
 800c58e:	bfde      	ittt	le
 800c590:	2330      	movle	r3, #48	; 0x30
 800c592:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c596:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800c59a:	ebac 0305 	sub.w	r3, ip, r5
 800c59e:	6123      	str	r3, [r4, #16]
 800c5a0:	f8cd 8000 	str.w	r8, [sp]
 800c5a4:	463b      	mov	r3, r7
 800c5a6:	aa03      	add	r2, sp, #12
 800c5a8:	4621      	mov	r1, r4
 800c5aa:	4630      	mov	r0, r6
 800c5ac:	f7ff fef6 	bl	800c39c <_printf_common>
 800c5b0:	3001      	adds	r0, #1
 800c5b2:	d14d      	bne.n	800c650 <_printf_i+0x1c8>
 800c5b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c5b8:	b005      	add	sp, #20
 800c5ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c5be:	4839      	ldr	r0, [pc, #228]	; (800c6a4 <_printf_i+0x21c>)
 800c5c0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800c5c4:	6813      	ldr	r3, [r2, #0]
 800c5c6:	6821      	ldr	r1, [r4, #0]
 800c5c8:	1d1d      	adds	r5, r3, #4
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	6015      	str	r5, [r2, #0]
 800c5ce:	060a      	lsls	r2, r1, #24
 800c5d0:	d50b      	bpl.n	800c5ea <_printf_i+0x162>
 800c5d2:	07ca      	lsls	r2, r1, #31
 800c5d4:	bf44      	itt	mi
 800c5d6:	f041 0120 	orrmi.w	r1, r1, #32
 800c5da:	6021      	strmi	r1, [r4, #0]
 800c5dc:	b91b      	cbnz	r3, 800c5e6 <_printf_i+0x15e>
 800c5de:	6822      	ldr	r2, [r4, #0]
 800c5e0:	f022 0220 	bic.w	r2, r2, #32
 800c5e4:	6022      	str	r2, [r4, #0]
 800c5e6:	2210      	movs	r2, #16
 800c5e8:	e7b7      	b.n	800c55a <_printf_i+0xd2>
 800c5ea:	064d      	lsls	r5, r1, #25
 800c5ec:	bf48      	it	mi
 800c5ee:	b29b      	uxthmi	r3, r3
 800c5f0:	e7ef      	b.n	800c5d2 <_printf_i+0x14a>
 800c5f2:	4665      	mov	r5, ip
 800c5f4:	fbb3 f1f2 	udiv	r1, r3, r2
 800c5f8:	fb02 3311 	mls	r3, r2, r1, r3
 800c5fc:	5cc3      	ldrb	r3, [r0, r3]
 800c5fe:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800c602:	460b      	mov	r3, r1
 800c604:	2900      	cmp	r1, #0
 800c606:	d1f5      	bne.n	800c5f4 <_printf_i+0x16c>
 800c608:	e7b9      	b.n	800c57e <_printf_i+0xf6>
 800c60a:	6813      	ldr	r3, [r2, #0]
 800c60c:	6825      	ldr	r5, [r4, #0]
 800c60e:	6961      	ldr	r1, [r4, #20]
 800c610:	1d18      	adds	r0, r3, #4
 800c612:	6010      	str	r0, [r2, #0]
 800c614:	0628      	lsls	r0, r5, #24
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	d501      	bpl.n	800c61e <_printf_i+0x196>
 800c61a:	6019      	str	r1, [r3, #0]
 800c61c:	e002      	b.n	800c624 <_printf_i+0x19c>
 800c61e:	066a      	lsls	r2, r5, #25
 800c620:	d5fb      	bpl.n	800c61a <_printf_i+0x192>
 800c622:	8019      	strh	r1, [r3, #0]
 800c624:	2300      	movs	r3, #0
 800c626:	6123      	str	r3, [r4, #16]
 800c628:	4665      	mov	r5, ip
 800c62a:	e7b9      	b.n	800c5a0 <_printf_i+0x118>
 800c62c:	6813      	ldr	r3, [r2, #0]
 800c62e:	1d19      	adds	r1, r3, #4
 800c630:	6011      	str	r1, [r2, #0]
 800c632:	681d      	ldr	r5, [r3, #0]
 800c634:	6862      	ldr	r2, [r4, #4]
 800c636:	2100      	movs	r1, #0
 800c638:	4628      	mov	r0, r5
 800c63a:	f7f3 fdf9 	bl	8000230 <memchr>
 800c63e:	b108      	cbz	r0, 800c644 <_printf_i+0x1bc>
 800c640:	1b40      	subs	r0, r0, r5
 800c642:	6060      	str	r0, [r4, #4]
 800c644:	6863      	ldr	r3, [r4, #4]
 800c646:	6123      	str	r3, [r4, #16]
 800c648:	2300      	movs	r3, #0
 800c64a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c64e:	e7a7      	b.n	800c5a0 <_printf_i+0x118>
 800c650:	6923      	ldr	r3, [r4, #16]
 800c652:	462a      	mov	r2, r5
 800c654:	4639      	mov	r1, r7
 800c656:	4630      	mov	r0, r6
 800c658:	47c0      	blx	r8
 800c65a:	3001      	adds	r0, #1
 800c65c:	d0aa      	beq.n	800c5b4 <_printf_i+0x12c>
 800c65e:	6823      	ldr	r3, [r4, #0]
 800c660:	079b      	lsls	r3, r3, #30
 800c662:	d413      	bmi.n	800c68c <_printf_i+0x204>
 800c664:	68e0      	ldr	r0, [r4, #12]
 800c666:	9b03      	ldr	r3, [sp, #12]
 800c668:	4298      	cmp	r0, r3
 800c66a:	bfb8      	it	lt
 800c66c:	4618      	movlt	r0, r3
 800c66e:	e7a3      	b.n	800c5b8 <_printf_i+0x130>
 800c670:	2301      	movs	r3, #1
 800c672:	464a      	mov	r2, r9
 800c674:	4639      	mov	r1, r7
 800c676:	4630      	mov	r0, r6
 800c678:	47c0      	blx	r8
 800c67a:	3001      	adds	r0, #1
 800c67c:	d09a      	beq.n	800c5b4 <_printf_i+0x12c>
 800c67e:	3501      	adds	r5, #1
 800c680:	68e3      	ldr	r3, [r4, #12]
 800c682:	9a03      	ldr	r2, [sp, #12]
 800c684:	1a9b      	subs	r3, r3, r2
 800c686:	42ab      	cmp	r3, r5
 800c688:	dcf2      	bgt.n	800c670 <_printf_i+0x1e8>
 800c68a:	e7eb      	b.n	800c664 <_printf_i+0x1dc>
 800c68c:	2500      	movs	r5, #0
 800c68e:	f104 0919 	add.w	r9, r4, #25
 800c692:	e7f5      	b.n	800c680 <_printf_i+0x1f8>
 800c694:	2b00      	cmp	r3, #0
 800c696:	d1ac      	bne.n	800c5f2 <_printf_i+0x16a>
 800c698:	7803      	ldrb	r3, [r0, #0]
 800c69a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c69e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c6a2:	e76c      	b.n	800c57e <_printf_i+0xf6>
 800c6a4:	0800ed16 	.word	0x0800ed16
 800c6a8:	0800ed27 	.word	0x0800ed27

0800c6ac <_puts_r>:
 800c6ac:	b570      	push	{r4, r5, r6, lr}
 800c6ae:	460e      	mov	r6, r1
 800c6b0:	4605      	mov	r5, r0
 800c6b2:	b118      	cbz	r0, 800c6bc <_puts_r+0x10>
 800c6b4:	6983      	ldr	r3, [r0, #24]
 800c6b6:	b90b      	cbnz	r3, 800c6bc <_puts_r+0x10>
 800c6b8:	f001 f896 	bl	800d7e8 <__sinit>
 800c6bc:	69ab      	ldr	r3, [r5, #24]
 800c6be:	68ac      	ldr	r4, [r5, #8]
 800c6c0:	b913      	cbnz	r3, 800c6c8 <_puts_r+0x1c>
 800c6c2:	4628      	mov	r0, r5
 800c6c4:	f001 f890 	bl	800d7e8 <__sinit>
 800c6c8:	4b23      	ldr	r3, [pc, #140]	; (800c758 <_puts_r+0xac>)
 800c6ca:	429c      	cmp	r4, r3
 800c6cc:	d117      	bne.n	800c6fe <_puts_r+0x52>
 800c6ce:	686c      	ldr	r4, [r5, #4]
 800c6d0:	89a3      	ldrh	r3, [r4, #12]
 800c6d2:	071b      	lsls	r3, r3, #28
 800c6d4:	d51d      	bpl.n	800c712 <_puts_r+0x66>
 800c6d6:	6923      	ldr	r3, [r4, #16]
 800c6d8:	b1db      	cbz	r3, 800c712 <_puts_r+0x66>
 800c6da:	3e01      	subs	r6, #1
 800c6dc:	68a3      	ldr	r3, [r4, #8]
 800c6de:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c6e2:	3b01      	subs	r3, #1
 800c6e4:	60a3      	str	r3, [r4, #8]
 800c6e6:	b9e9      	cbnz	r1, 800c724 <_puts_r+0x78>
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	da2e      	bge.n	800c74a <_puts_r+0x9e>
 800c6ec:	4622      	mov	r2, r4
 800c6ee:	210a      	movs	r1, #10
 800c6f0:	4628      	mov	r0, r5
 800c6f2:	f000 f883 	bl	800c7fc <__swbuf_r>
 800c6f6:	3001      	adds	r0, #1
 800c6f8:	d011      	beq.n	800c71e <_puts_r+0x72>
 800c6fa:	200a      	movs	r0, #10
 800c6fc:	e011      	b.n	800c722 <_puts_r+0x76>
 800c6fe:	4b17      	ldr	r3, [pc, #92]	; (800c75c <_puts_r+0xb0>)
 800c700:	429c      	cmp	r4, r3
 800c702:	d101      	bne.n	800c708 <_puts_r+0x5c>
 800c704:	68ac      	ldr	r4, [r5, #8]
 800c706:	e7e3      	b.n	800c6d0 <_puts_r+0x24>
 800c708:	4b15      	ldr	r3, [pc, #84]	; (800c760 <_puts_r+0xb4>)
 800c70a:	429c      	cmp	r4, r3
 800c70c:	bf08      	it	eq
 800c70e:	68ec      	ldreq	r4, [r5, #12]
 800c710:	e7de      	b.n	800c6d0 <_puts_r+0x24>
 800c712:	4621      	mov	r1, r4
 800c714:	4628      	mov	r0, r5
 800c716:	f000 f8c3 	bl	800c8a0 <__swsetup_r>
 800c71a:	2800      	cmp	r0, #0
 800c71c:	d0dd      	beq.n	800c6da <_puts_r+0x2e>
 800c71e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c722:	bd70      	pop	{r4, r5, r6, pc}
 800c724:	2b00      	cmp	r3, #0
 800c726:	da04      	bge.n	800c732 <_puts_r+0x86>
 800c728:	69a2      	ldr	r2, [r4, #24]
 800c72a:	429a      	cmp	r2, r3
 800c72c:	dc06      	bgt.n	800c73c <_puts_r+0x90>
 800c72e:	290a      	cmp	r1, #10
 800c730:	d004      	beq.n	800c73c <_puts_r+0x90>
 800c732:	6823      	ldr	r3, [r4, #0]
 800c734:	1c5a      	adds	r2, r3, #1
 800c736:	6022      	str	r2, [r4, #0]
 800c738:	7019      	strb	r1, [r3, #0]
 800c73a:	e7cf      	b.n	800c6dc <_puts_r+0x30>
 800c73c:	4622      	mov	r2, r4
 800c73e:	4628      	mov	r0, r5
 800c740:	f000 f85c 	bl	800c7fc <__swbuf_r>
 800c744:	3001      	adds	r0, #1
 800c746:	d1c9      	bne.n	800c6dc <_puts_r+0x30>
 800c748:	e7e9      	b.n	800c71e <_puts_r+0x72>
 800c74a:	6823      	ldr	r3, [r4, #0]
 800c74c:	200a      	movs	r0, #10
 800c74e:	1c5a      	adds	r2, r3, #1
 800c750:	6022      	str	r2, [r4, #0]
 800c752:	7018      	strb	r0, [r3, #0]
 800c754:	e7e5      	b.n	800c722 <_puts_r+0x76>
 800c756:	bf00      	nop
 800c758:	0800ed68 	.word	0x0800ed68
 800c75c:	0800ed88 	.word	0x0800ed88
 800c760:	0800ed48 	.word	0x0800ed48

0800c764 <puts>:
 800c764:	4b02      	ldr	r3, [pc, #8]	; (800c770 <puts+0xc>)
 800c766:	4601      	mov	r1, r0
 800c768:	6818      	ldr	r0, [r3, #0]
 800c76a:	f7ff bf9f 	b.w	800c6ac <_puts_r>
 800c76e:	bf00      	nop
 800c770:	20001200 	.word	0x20001200

0800c774 <sniprintf>:
 800c774:	b40c      	push	{r2, r3}
 800c776:	b530      	push	{r4, r5, lr}
 800c778:	4b17      	ldr	r3, [pc, #92]	; (800c7d8 <sniprintf+0x64>)
 800c77a:	1e0c      	subs	r4, r1, #0
 800c77c:	b09d      	sub	sp, #116	; 0x74
 800c77e:	681d      	ldr	r5, [r3, #0]
 800c780:	da08      	bge.n	800c794 <sniprintf+0x20>
 800c782:	238b      	movs	r3, #139	; 0x8b
 800c784:	602b      	str	r3, [r5, #0]
 800c786:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c78a:	b01d      	add	sp, #116	; 0x74
 800c78c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c790:	b002      	add	sp, #8
 800c792:	4770      	bx	lr
 800c794:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c798:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c79c:	bf14      	ite	ne
 800c79e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800c7a2:	4623      	moveq	r3, r4
 800c7a4:	9304      	str	r3, [sp, #16]
 800c7a6:	9307      	str	r3, [sp, #28]
 800c7a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c7ac:	9002      	str	r0, [sp, #8]
 800c7ae:	9006      	str	r0, [sp, #24]
 800c7b0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c7b4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c7b6:	ab21      	add	r3, sp, #132	; 0x84
 800c7b8:	a902      	add	r1, sp, #8
 800c7ba:	4628      	mov	r0, r5
 800c7bc:	9301      	str	r3, [sp, #4]
 800c7be:	f001 fd0d 	bl	800e1dc <_svfiprintf_r>
 800c7c2:	1c43      	adds	r3, r0, #1
 800c7c4:	bfbc      	itt	lt
 800c7c6:	238b      	movlt	r3, #139	; 0x8b
 800c7c8:	602b      	strlt	r3, [r5, #0]
 800c7ca:	2c00      	cmp	r4, #0
 800c7cc:	d0dd      	beq.n	800c78a <sniprintf+0x16>
 800c7ce:	9b02      	ldr	r3, [sp, #8]
 800c7d0:	2200      	movs	r2, #0
 800c7d2:	701a      	strb	r2, [r3, #0]
 800c7d4:	e7d9      	b.n	800c78a <sniprintf+0x16>
 800c7d6:	bf00      	nop
 800c7d8:	20001200 	.word	0x20001200

0800c7dc <strcat>:
 800c7dc:	b510      	push	{r4, lr}
 800c7de:	4603      	mov	r3, r0
 800c7e0:	781a      	ldrb	r2, [r3, #0]
 800c7e2:	1c5c      	adds	r4, r3, #1
 800c7e4:	b93a      	cbnz	r2, 800c7f6 <strcat+0x1a>
 800c7e6:	3b01      	subs	r3, #1
 800c7e8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c7ec:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c7f0:	2a00      	cmp	r2, #0
 800c7f2:	d1f9      	bne.n	800c7e8 <strcat+0xc>
 800c7f4:	bd10      	pop	{r4, pc}
 800c7f6:	4623      	mov	r3, r4
 800c7f8:	e7f2      	b.n	800c7e0 <strcat+0x4>
	...

0800c7fc <__swbuf_r>:
 800c7fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7fe:	460e      	mov	r6, r1
 800c800:	4614      	mov	r4, r2
 800c802:	4605      	mov	r5, r0
 800c804:	b118      	cbz	r0, 800c80e <__swbuf_r+0x12>
 800c806:	6983      	ldr	r3, [r0, #24]
 800c808:	b90b      	cbnz	r3, 800c80e <__swbuf_r+0x12>
 800c80a:	f000 ffed 	bl	800d7e8 <__sinit>
 800c80e:	4b21      	ldr	r3, [pc, #132]	; (800c894 <__swbuf_r+0x98>)
 800c810:	429c      	cmp	r4, r3
 800c812:	d12a      	bne.n	800c86a <__swbuf_r+0x6e>
 800c814:	686c      	ldr	r4, [r5, #4]
 800c816:	69a3      	ldr	r3, [r4, #24]
 800c818:	60a3      	str	r3, [r4, #8]
 800c81a:	89a3      	ldrh	r3, [r4, #12]
 800c81c:	071a      	lsls	r2, r3, #28
 800c81e:	d52e      	bpl.n	800c87e <__swbuf_r+0x82>
 800c820:	6923      	ldr	r3, [r4, #16]
 800c822:	b363      	cbz	r3, 800c87e <__swbuf_r+0x82>
 800c824:	6923      	ldr	r3, [r4, #16]
 800c826:	6820      	ldr	r0, [r4, #0]
 800c828:	1ac0      	subs	r0, r0, r3
 800c82a:	6963      	ldr	r3, [r4, #20]
 800c82c:	b2f6      	uxtb	r6, r6
 800c82e:	4283      	cmp	r3, r0
 800c830:	4637      	mov	r7, r6
 800c832:	dc04      	bgt.n	800c83e <__swbuf_r+0x42>
 800c834:	4621      	mov	r1, r4
 800c836:	4628      	mov	r0, r5
 800c838:	f000 ff6c 	bl	800d714 <_fflush_r>
 800c83c:	bb28      	cbnz	r0, 800c88a <__swbuf_r+0x8e>
 800c83e:	68a3      	ldr	r3, [r4, #8]
 800c840:	3b01      	subs	r3, #1
 800c842:	60a3      	str	r3, [r4, #8]
 800c844:	6823      	ldr	r3, [r4, #0]
 800c846:	1c5a      	adds	r2, r3, #1
 800c848:	6022      	str	r2, [r4, #0]
 800c84a:	701e      	strb	r6, [r3, #0]
 800c84c:	6963      	ldr	r3, [r4, #20]
 800c84e:	3001      	adds	r0, #1
 800c850:	4283      	cmp	r3, r0
 800c852:	d004      	beq.n	800c85e <__swbuf_r+0x62>
 800c854:	89a3      	ldrh	r3, [r4, #12]
 800c856:	07db      	lsls	r3, r3, #31
 800c858:	d519      	bpl.n	800c88e <__swbuf_r+0x92>
 800c85a:	2e0a      	cmp	r6, #10
 800c85c:	d117      	bne.n	800c88e <__swbuf_r+0x92>
 800c85e:	4621      	mov	r1, r4
 800c860:	4628      	mov	r0, r5
 800c862:	f000 ff57 	bl	800d714 <_fflush_r>
 800c866:	b190      	cbz	r0, 800c88e <__swbuf_r+0x92>
 800c868:	e00f      	b.n	800c88a <__swbuf_r+0x8e>
 800c86a:	4b0b      	ldr	r3, [pc, #44]	; (800c898 <__swbuf_r+0x9c>)
 800c86c:	429c      	cmp	r4, r3
 800c86e:	d101      	bne.n	800c874 <__swbuf_r+0x78>
 800c870:	68ac      	ldr	r4, [r5, #8]
 800c872:	e7d0      	b.n	800c816 <__swbuf_r+0x1a>
 800c874:	4b09      	ldr	r3, [pc, #36]	; (800c89c <__swbuf_r+0xa0>)
 800c876:	429c      	cmp	r4, r3
 800c878:	bf08      	it	eq
 800c87a:	68ec      	ldreq	r4, [r5, #12]
 800c87c:	e7cb      	b.n	800c816 <__swbuf_r+0x1a>
 800c87e:	4621      	mov	r1, r4
 800c880:	4628      	mov	r0, r5
 800c882:	f000 f80d 	bl	800c8a0 <__swsetup_r>
 800c886:	2800      	cmp	r0, #0
 800c888:	d0cc      	beq.n	800c824 <__swbuf_r+0x28>
 800c88a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800c88e:	4638      	mov	r0, r7
 800c890:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c892:	bf00      	nop
 800c894:	0800ed68 	.word	0x0800ed68
 800c898:	0800ed88 	.word	0x0800ed88
 800c89c:	0800ed48 	.word	0x0800ed48

0800c8a0 <__swsetup_r>:
 800c8a0:	4b32      	ldr	r3, [pc, #200]	; (800c96c <__swsetup_r+0xcc>)
 800c8a2:	b570      	push	{r4, r5, r6, lr}
 800c8a4:	681d      	ldr	r5, [r3, #0]
 800c8a6:	4606      	mov	r6, r0
 800c8a8:	460c      	mov	r4, r1
 800c8aa:	b125      	cbz	r5, 800c8b6 <__swsetup_r+0x16>
 800c8ac:	69ab      	ldr	r3, [r5, #24]
 800c8ae:	b913      	cbnz	r3, 800c8b6 <__swsetup_r+0x16>
 800c8b0:	4628      	mov	r0, r5
 800c8b2:	f000 ff99 	bl	800d7e8 <__sinit>
 800c8b6:	4b2e      	ldr	r3, [pc, #184]	; (800c970 <__swsetup_r+0xd0>)
 800c8b8:	429c      	cmp	r4, r3
 800c8ba:	d10f      	bne.n	800c8dc <__swsetup_r+0x3c>
 800c8bc:	686c      	ldr	r4, [r5, #4]
 800c8be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c8c2:	b29a      	uxth	r2, r3
 800c8c4:	0715      	lsls	r5, r2, #28
 800c8c6:	d42c      	bmi.n	800c922 <__swsetup_r+0x82>
 800c8c8:	06d0      	lsls	r0, r2, #27
 800c8ca:	d411      	bmi.n	800c8f0 <__swsetup_r+0x50>
 800c8cc:	2209      	movs	r2, #9
 800c8ce:	6032      	str	r2, [r6, #0]
 800c8d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c8d4:	81a3      	strh	r3, [r4, #12]
 800c8d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c8da:	e03e      	b.n	800c95a <__swsetup_r+0xba>
 800c8dc:	4b25      	ldr	r3, [pc, #148]	; (800c974 <__swsetup_r+0xd4>)
 800c8de:	429c      	cmp	r4, r3
 800c8e0:	d101      	bne.n	800c8e6 <__swsetup_r+0x46>
 800c8e2:	68ac      	ldr	r4, [r5, #8]
 800c8e4:	e7eb      	b.n	800c8be <__swsetup_r+0x1e>
 800c8e6:	4b24      	ldr	r3, [pc, #144]	; (800c978 <__swsetup_r+0xd8>)
 800c8e8:	429c      	cmp	r4, r3
 800c8ea:	bf08      	it	eq
 800c8ec:	68ec      	ldreq	r4, [r5, #12]
 800c8ee:	e7e6      	b.n	800c8be <__swsetup_r+0x1e>
 800c8f0:	0751      	lsls	r1, r2, #29
 800c8f2:	d512      	bpl.n	800c91a <__swsetup_r+0x7a>
 800c8f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c8f6:	b141      	cbz	r1, 800c90a <__swsetup_r+0x6a>
 800c8f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c8fc:	4299      	cmp	r1, r3
 800c8fe:	d002      	beq.n	800c906 <__swsetup_r+0x66>
 800c900:	4630      	mov	r0, r6
 800c902:	f001 fb69 	bl	800dfd8 <_free_r>
 800c906:	2300      	movs	r3, #0
 800c908:	6363      	str	r3, [r4, #52]	; 0x34
 800c90a:	89a3      	ldrh	r3, [r4, #12]
 800c90c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c910:	81a3      	strh	r3, [r4, #12]
 800c912:	2300      	movs	r3, #0
 800c914:	6063      	str	r3, [r4, #4]
 800c916:	6923      	ldr	r3, [r4, #16]
 800c918:	6023      	str	r3, [r4, #0]
 800c91a:	89a3      	ldrh	r3, [r4, #12]
 800c91c:	f043 0308 	orr.w	r3, r3, #8
 800c920:	81a3      	strh	r3, [r4, #12]
 800c922:	6923      	ldr	r3, [r4, #16]
 800c924:	b94b      	cbnz	r3, 800c93a <__swsetup_r+0x9a>
 800c926:	89a3      	ldrh	r3, [r4, #12]
 800c928:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c92c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c930:	d003      	beq.n	800c93a <__swsetup_r+0x9a>
 800c932:	4621      	mov	r1, r4
 800c934:	4630      	mov	r0, r6
 800c936:	f001 f813 	bl	800d960 <__smakebuf_r>
 800c93a:	89a2      	ldrh	r2, [r4, #12]
 800c93c:	f012 0301 	ands.w	r3, r2, #1
 800c940:	d00c      	beq.n	800c95c <__swsetup_r+0xbc>
 800c942:	2300      	movs	r3, #0
 800c944:	60a3      	str	r3, [r4, #8]
 800c946:	6963      	ldr	r3, [r4, #20]
 800c948:	425b      	negs	r3, r3
 800c94a:	61a3      	str	r3, [r4, #24]
 800c94c:	6923      	ldr	r3, [r4, #16]
 800c94e:	b953      	cbnz	r3, 800c966 <__swsetup_r+0xc6>
 800c950:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c954:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800c958:	d1ba      	bne.n	800c8d0 <__swsetup_r+0x30>
 800c95a:	bd70      	pop	{r4, r5, r6, pc}
 800c95c:	0792      	lsls	r2, r2, #30
 800c95e:	bf58      	it	pl
 800c960:	6963      	ldrpl	r3, [r4, #20]
 800c962:	60a3      	str	r3, [r4, #8]
 800c964:	e7f2      	b.n	800c94c <__swsetup_r+0xac>
 800c966:	2000      	movs	r0, #0
 800c968:	e7f7      	b.n	800c95a <__swsetup_r+0xba>
 800c96a:	bf00      	nop
 800c96c:	20001200 	.word	0x20001200
 800c970:	0800ed68 	.word	0x0800ed68
 800c974:	0800ed88 	.word	0x0800ed88
 800c978:	0800ed48 	.word	0x0800ed48

0800c97c <quorem>:
 800c97c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c980:	6903      	ldr	r3, [r0, #16]
 800c982:	690c      	ldr	r4, [r1, #16]
 800c984:	42a3      	cmp	r3, r4
 800c986:	4680      	mov	r8, r0
 800c988:	f2c0 8082 	blt.w	800ca90 <quorem+0x114>
 800c98c:	3c01      	subs	r4, #1
 800c98e:	f101 0714 	add.w	r7, r1, #20
 800c992:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800c996:	f100 0614 	add.w	r6, r0, #20
 800c99a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800c99e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800c9a2:	eb06 030c 	add.w	r3, r6, ip
 800c9a6:	3501      	adds	r5, #1
 800c9a8:	eb07 090c 	add.w	r9, r7, ip
 800c9ac:	9301      	str	r3, [sp, #4]
 800c9ae:	fbb0 f5f5 	udiv	r5, r0, r5
 800c9b2:	b395      	cbz	r5, 800ca1a <quorem+0x9e>
 800c9b4:	f04f 0a00 	mov.w	sl, #0
 800c9b8:	4638      	mov	r0, r7
 800c9ba:	46b6      	mov	lr, r6
 800c9bc:	46d3      	mov	fp, sl
 800c9be:	f850 2b04 	ldr.w	r2, [r0], #4
 800c9c2:	b293      	uxth	r3, r2
 800c9c4:	fb05 a303 	mla	r3, r5, r3, sl
 800c9c8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c9cc:	b29b      	uxth	r3, r3
 800c9ce:	ebab 0303 	sub.w	r3, fp, r3
 800c9d2:	0c12      	lsrs	r2, r2, #16
 800c9d4:	f8de b000 	ldr.w	fp, [lr]
 800c9d8:	fb05 a202 	mla	r2, r5, r2, sl
 800c9dc:	fa13 f38b 	uxtah	r3, r3, fp
 800c9e0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800c9e4:	fa1f fb82 	uxth.w	fp, r2
 800c9e8:	f8de 2000 	ldr.w	r2, [lr]
 800c9ec:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800c9f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c9f4:	b29b      	uxth	r3, r3
 800c9f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c9fa:	4581      	cmp	r9, r0
 800c9fc:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800ca00:	f84e 3b04 	str.w	r3, [lr], #4
 800ca04:	d2db      	bcs.n	800c9be <quorem+0x42>
 800ca06:	f856 300c 	ldr.w	r3, [r6, ip]
 800ca0a:	b933      	cbnz	r3, 800ca1a <quorem+0x9e>
 800ca0c:	9b01      	ldr	r3, [sp, #4]
 800ca0e:	3b04      	subs	r3, #4
 800ca10:	429e      	cmp	r6, r3
 800ca12:	461a      	mov	r2, r3
 800ca14:	d330      	bcc.n	800ca78 <quorem+0xfc>
 800ca16:	f8c8 4010 	str.w	r4, [r8, #16]
 800ca1a:	4640      	mov	r0, r8
 800ca1c:	f001 fa08 	bl	800de30 <__mcmp>
 800ca20:	2800      	cmp	r0, #0
 800ca22:	db25      	blt.n	800ca70 <quorem+0xf4>
 800ca24:	3501      	adds	r5, #1
 800ca26:	4630      	mov	r0, r6
 800ca28:	f04f 0c00 	mov.w	ip, #0
 800ca2c:	f857 2b04 	ldr.w	r2, [r7], #4
 800ca30:	f8d0 e000 	ldr.w	lr, [r0]
 800ca34:	b293      	uxth	r3, r2
 800ca36:	ebac 0303 	sub.w	r3, ip, r3
 800ca3a:	0c12      	lsrs	r2, r2, #16
 800ca3c:	fa13 f38e 	uxtah	r3, r3, lr
 800ca40:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ca44:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ca48:	b29b      	uxth	r3, r3
 800ca4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ca4e:	45b9      	cmp	r9, r7
 800ca50:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ca54:	f840 3b04 	str.w	r3, [r0], #4
 800ca58:	d2e8      	bcs.n	800ca2c <quorem+0xb0>
 800ca5a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800ca5e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800ca62:	b92a      	cbnz	r2, 800ca70 <quorem+0xf4>
 800ca64:	3b04      	subs	r3, #4
 800ca66:	429e      	cmp	r6, r3
 800ca68:	461a      	mov	r2, r3
 800ca6a:	d30b      	bcc.n	800ca84 <quorem+0x108>
 800ca6c:	f8c8 4010 	str.w	r4, [r8, #16]
 800ca70:	4628      	mov	r0, r5
 800ca72:	b003      	add	sp, #12
 800ca74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca78:	6812      	ldr	r2, [r2, #0]
 800ca7a:	3b04      	subs	r3, #4
 800ca7c:	2a00      	cmp	r2, #0
 800ca7e:	d1ca      	bne.n	800ca16 <quorem+0x9a>
 800ca80:	3c01      	subs	r4, #1
 800ca82:	e7c5      	b.n	800ca10 <quorem+0x94>
 800ca84:	6812      	ldr	r2, [r2, #0]
 800ca86:	3b04      	subs	r3, #4
 800ca88:	2a00      	cmp	r2, #0
 800ca8a:	d1ef      	bne.n	800ca6c <quorem+0xf0>
 800ca8c:	3c01      	subs	r4, #1
 800ca8e:	e7ea      	b.n	800ca66 <quorem+0xea>
 800ca90:	2000      	movs	r0, #0
 800ca92:	e7ee      	b.n	800ca72 <quorem+0xf6>
 800ca94:	0000      	movs	r0, r0
	...

0800ca98 <_dtoa_r>:
 800ca98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca9c:	ec57 6b10 	vmov	r6, r7, d0
 800caa0:	b097      	sub	sp, #92	; 0x5c
 800caa2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800caa4:	9106      	str	r1, [sp, #24]
 800caa6:	4604      	mov	r4, r0
 800caa8:	920b      	str	r2, [sp, #44]	; 0x2c
 800caaa:	9312      	str	r3, [sp, #72]	; 0x48
 800caac:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800cab0:	e9cd 6700 	strd	r6, r7, [sp]
 800cab4:	b93d      	cbnz	r5, 800cac6 <_dtoa_r+0x2e>
 800cab6:	2010      	movs	r0, #16
 800cab8:	f000 ff92 	bl	800d9e0 <malloc>
 800cabc:	6260      	str	r0, [r4, #36]	; 0x24
 800cabe:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800cac2:	6005      	str	r5, [r0, #0]
 800cac4:	60c5      	str	r5, [r0, #12]
 800cac6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cac8:	6819      	ldr	r1, [r3, #0]
 800caca:	b151      	cbz	r1, 800cae2 <_dtoa_r+0x4a>
 800cacc:	685a      	ldr	r2, [r3, #4]
 800cace:	604a      	str	r2, [r1, #4]
 800cad0:	2301      	movs	r3, #1
 800cad2:	4093      	lsls	r3, r2
 800cad4:	608b      	str	r3, [r1, #8]
 800cad6:	4620      	mov	r0, r4
 800cad8:	f000 ffc9 	bl	800da6e <_Bfree>
 800cadc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cade:	2200      	movs	r2, #0
 800cae0:	601a      	str	r2, [r3, #0]
 800cae2:	1e3b      	subs	r3, r7, #0
 800cae4:	bfbb      	ittet	lt
 800cae6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800caea:	9301      	strlt	r3, [sp, #4]
 800caec:	2300      	movge	r3, #0
 800caee:	2201      	movlt	r2, #1
 800caf0:	bfac      	ite	ge
 800caf2:	f8c8 3000 	strge.w	r3, [r8]
 800caf6:	f8c8 2000 	strlt.w	r2, [r8]
 800cafa:	4baf      	ldr	r3, [pc, #700]	; (800cdb8 <_dtoa_r+0x320>)
 800cafc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800cb00:	ea33 0308 	bics.w	r3, r3, r8
 800cb04:	d114      	bne.n	800cb30 <_dtoa_r+0x98>
 800cb06:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cb08:	f242 730f 	movw	r3, #9999	; 0x270f
 800cb0c:	6013      	str	r3, [r2, #0]
 800cb0e:	9b00      	ldr	r3, [sp, #0]
 800cb10:	b923      	cbnz	r3, 800cb1c <_dtoa_r+0x84>
 800cb12:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800cb16:	2800      	cmp	r0, #0
 800cb18:	f000 8542 	beq.w	800d5a0 <_dtoa_r+0xb08>
 800cb1c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cb1e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800cdcc <_dtoa_r+0x334>
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	f000 8544 	beq.w	800d5b0 <_dtoa_r+0xb18>
 800cb28:	f10b 0303 	add.w	r3, fp, #3
 800cb2c:	f000 bd3e 	b.w	800d5ac <_dtoa_r+0xb14>
 800cb30:	e9dd 6700 	ldrd	r6, r7, [sp]
 800cb34:	2200      	movs	r2, #0
 800cb36:	2300      	movs	r3, #0
 800cb38:	4630      	mov	r0, r6
 800cb3a:	4639      	mov	r1, r7
 800cb3c:	f7f3 ffec 	bl	8000b18 <__aeabi_dcmpeq>
 800cb40:	4681      	mov	r9, r0
 800cb42:	b168      	cbz	r0, 800cb60 <_dtoa_r+0xc8>
 800cb44:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cb46:	2301      	movs	r3, #1
 800cb48:	6013      	str	r3, [r2, #0]
 800cb4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	f000 8524 	beq.w	800d59a <_dtoa_r+0xb02>
 800cb52:	4b9a      	ldr	r3, [pc, #616]	; (800cdbc <_dtoa_r+0x324>)
 800cb54:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800cb56:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 800cb5a:	6013      	str	r3, [r2, #0]
 800cb5c:	f000 bd28 	b.w	800d5b0 <_dtoa_r+0xb18>
 800cb60:	aa14      	add	r2, sp, #80	; 0x50
 800cb62:	a915      	add	r1, sp, #84	; 0x54
 800cb64:	ec47 6b10 	vmov	d0, r6, r7
 800cb68:	4620      	mov	r0, r4
 800cb6a:	f001 f9d8 	bl	800df1e <__d2b>
 800cb6e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800cb72:	9004      	str	r0, [sp, #16]
 800cb74:	2d00      	cmp	r5, #0
 800cb76:	d07c      	beq.n	800cc72 <_dtoa_r+0x1da>
 800cb78:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cb7c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800cb80:	46b2      	mov	sl, r6
 800cb82:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800cb86:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800cb8a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800cb8e:	2200      	movs	r2, #0
 800cb90:	4b8b      	ldr	r3, [pc, #556]	; (800cdc0 <_dtoa_r+0x328>)
 800cb92:	4650      	mov	r0, sl
 800cb94:	4659      	mov	r1, fp
 800cb96:	f7f3 fb9f 	bl	80002d8 <__aeabi_dsub>
 800cb9a:	a381      	add	r3, pc, #516	; (adr r3, 800cda0 <_dtoa_r+0x308>)
 800cb9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cba0:	f7f3 fd52 	bl	8000648 <__aeabi_dmul>
 800cba4:	a380      	add	r3, pc, #512	; (adr r3, 800cda8 <_dtoa_r+0x310>)
 800cba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbaa:	f7f3 fb97 	bl	80002dc <__adddf3>
 800cbae:	4606      	mov	r6, r0
 800cbb0:	4628      	mov	r0, r5
 800cbb2:	460f      	mov	r7, r1
 800cbb4:	f7f3 fcde 	bl	8000574 <__aeabi_i2d>
 800cbb8:	a37d      	add	r3, pc, #500	; (adr r3, 800cdb0 <_dtoa_r+0x318>)
 800cbba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbbe:	f7f3 fd43 	bl	8000648 <__aeabi_dmul>
 800cbc2:	4602      	mov	r2, r0
 800cbc4:	460b      	mov	r3, r1
 800cbc6:	4630      	mov	r0, r6
 800cbc8:	4639      	mov	r1, r7
 800cbca:	f7f3 fb87 	bl	80002dc <__adddf3>
 800cbce:	4606      	mov	r6, r0
 800cbd0:	460f      	mov	r7, r1
 800cbd2:	f7f3 ffe9 	bl	8000ba8 <__aeabi_d2iz>
 800cbd6:	2200      	movs	r2, #0
 800cbd8:	4682      	mov	sl, r0
 800cbda:	2300      	movs	r3, #0
 800cbdc:	4630      	mov	r0, r6
 800cbde:	4639      	mov	r1, r7
 800cbe0:	f7f3 ffa4 	bl	8000b2c <__aeabi_dcmplt>
 800cbe4:	b148      	cbz	r0, 800cbfa <_dtoa_r+0x162>
 800cbe6:	4650      	mov	r0, sl
 800cbe8:	f7f3 fcc4 	bl	8000574 <__aeabi_i2d>
 800cbec:	4632      	mov	r2, r6
 800cbee:	463b      	mov	r3, r7
 800cbf0:	f7f3 ff92 	bl	8000b18 <__aeabi_dcmpeq>
 800cbf4:	b908      	cbnz	r0, 800cbfa <_dtoa_r+0x162>
 800cbf6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800cbfa:	f1ba 0f16 	cmp.w	sl, #22
 800cbfe:	d859      	bhi.n	800ccb4 <_dtoa_r+0x21c>
 800cc00:	4970      	ldr	r1, [pc, #448]	; (800cdc4 <_dtoa_r+0x32c>)
 800cc02:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800cc06:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cc0a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cc0e:	f7f3 ffab 	bl	8000b68 <__aeabi_dcmpgt>
 800cc12:	2800      	cmp	r0, #0
 800cc14:	d050      	beq.n	800ccb8 <_dtoa_r+0x220>
 800cc16:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	930f      	str	r3, [sp, #60]	; 0x3c
 800cc1e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cc20:	1b5d      	subs	r5, r3, r5
 800cc22:	f1b5 0801 	subs.w	r8, r5, #1
 800cc26:	bf49      	itett	mi
 800cc28:	f1c5 0301 	rsbmi	r3, r5, #1
 800cc2c:	2300      	movpl	r3, #0
 800cc2e:	9305      	strmi	r3, [sp, #20]
 800cc30:	f04f 0800 	movmi.w	r8, #0
 800cc34:	bf58      	it	pl
 800cc36:	9305      	strpl	r3, [sp, #20]
 800cc38:	f1ba 0f00 	cmp.w	sl, #0
 800cc3c:	db3e      	blt.n	800ccbc <_dtoa_r+0x224>
 800cc3e:	2300      	movs	r3, #0
 800cc40:	44d0      	add	r8, sl
 800cc42:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800cc46:	9307      	str	r3, [sp, #28]
 800cc48:	9b06      	ldr	r3, [sp, #24]
 800cc4a:	2b09      	cmp	r3, #9
 800cc4c:	f200 8090 	bhi.w	800cd70 <_dtoa_r+0x2d8>
 800cc50:	2b05      	cmp	r3, #5
 800cc52:	bfc4      	itt	gt
 800cc54:	3b04      	subgt	r3, #4
 800cc56:	9306      	strgt	r3, [sp, #24]
 800cc58:	9b06      	ldr	r3, [sp, #24]
 800cc5a:	f1a3 0302 	sub.w	r3, r3, #2
 800cc5e:	bfcc      	ite	gt
 800cc60:	2500      	movgt	r5, #0
 800cc62:	2501      	movle	r5, #1
 800cc64:	2b03      	cmp	r3, #3
 800cc66:	f200 808f 	bhi.w	800cd88 <_dtoa_r+0x2f0>
 800cc6a:	e8df f003 	tbb	[pc, r3]
 800cc6e:	7f7d      	.short	0x7f7d
 800cc70:	7131      	.short	0x7131
 800cc72:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800cc76:	441d      	add	r5, r3
 800cc78:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800cc7c:	2820      	cmp	r0, #32
 800cc7e:	dd13      	ble.n	800cca8 <_dtoa_r+0x210>
 800cc80:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800cc84:	9b00      	ldr	r3, [sp, #0]
 800cc86:	fa08 f800 	lsl.w	r8, r8, r0
 800cc8a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800cc8e:	fa23 f000 	lsr.w	r0, r3, r0
 800cc92:	ea48 0000 	orr.w	r0, r8, r0
 800cc96:	f7f3 fc5d 	bl	8000554 <__aeabi_ui2d>
 800cc9a:	2301      	movs	r3, #1
 800cc9c:	4682      	mov	sl, r0
 800cc9e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800cca2:	3d01      	subs	r5, #1
 800cca4:	9313      	str	r3, [sp, #76]	; 0x4c
 800cca6:	e772      	b.n	800cb8e <_dtoa_r+0xf6>
 800cca8:	9b00      	ldr	r3, [sp, #0]
 800ccaa:	f1c0 0020 	rsb	r0, r0, #32
 800ccae:	fa03 f000 	lsl.w	r0, r3, r0
 800ccb2:	e7f0      	b.n	800cc96 <_dtoa_r+0x1fe>
 800ccb4:	2301      	movs	r3, #1
 800ccb6:	e7b1      	b.n	800cc1c <_dtoa_r+0x184>
 800ccb8:	900f      	str	r0, [sp, #60]	; 0x3c
 800ccba:	e7b0      	b.n	800cc1e <_dtoa_r+0x186>
 800ccbc:	9b05      	ldr	r3, [sp, #20]
 800ccbe:	eba3 030a 	sub.w	r3, r3, sl
 800ccc2:	9305      	str	r3, [sp, #20]
 800ccc4:	f1ca 0300 	rsb	r3, sl, #0
 800ccc8:	9307      	str	r3, [sp, #28]
 800ccca:	2300      	movs	r3, #0
 800cccc:	930e      	str	r3, [sp, #56]	; 0x38
 800ccce:	e7bb      	b.n	800cc48 <_dtoa_r+0x1b0>
 800ccd0:	2301      	movs	r3, #1
 800ccd2:	930a      	str	r3, [sp, #40]	; 0x28
 800ccd4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	dd59      	ble.n	800cd8e <_dtoa_r+0x2f6>
 800ccda:	9302      	str	r3, [sp, #8]
 800ccdc:	4699      	mov	r9, r3
 800ccde:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800cce0:	2200      	movs	r2, #0
 800cce2:	6072      	str	r2, [r6, #4]
 800cce4:	2204      	movs	r2, #4
 800cce6:	f102 0014 	add.w	r0, r2, #20
 800ccea:	4298      	cmp	r0, r3
 800ccec:	6871      	ldr	r1, [r6, #4]
 800ccee:	d953      	bls.n	800cd98 <_dtoa_r+0x300>
 800ccf0:	4620      	mov	r0, r4
 800ccf2:	f000 fe88 	bl	800da06 <_Balloc>
 800ccf6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ccf8:	6030      	str	r0, [r6, #0]
 800ccfa:	f1b9 0f0e 	cmp.w	r9, #14
 800ccfe:	f8d3 b000 	ldr.w	fp, [r3]
 800cd02:	f200 80e6 	bhi.w	800ced2 <_dtoa_r+0x43a>
 800cd06:	2d00      	cmp	r5, #0
 800cd08:	f000 80e3 	beq.w	800ced2 <_dtoa_r+0x43a>
 800cd0c:	ed9d 7b00 	vldr	d7, [sp]
 800cd10:	f1ba 0f00 	cmp.w	sl, #0
 800cd14:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800cd18:	dd74      	ble.n	800ce04 <_dtoa_r+0x36c>
 800cd1a:	4a2a      	ldr	r2, [pc, #168]	; (800cdc4 <_dtoa_r+0x32c>)
 800cd1c:	f00a 030f 	and.w	r3, sl, #15
 800cd20:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800cd24:	ed93 7b00 	vldr	d7, [r3]
 800cd28:	ea4f 162a 	mov.w	r6, sl, asr #4
 800cd2c:	06f0      	lsls	r0, r6, #27
 800cd2e:	ed8d 7b08 	vstr	d7, [sp, #32]
 800cd32:	d565      	bpl.n	800ce00 <_dtoa_r+0x368>
 800cd34:	4b24      	ldr	r3, [pc, #144]	; (800cdc8 <_dtoa_r+0x330>)
 800cd36:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800cd3a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cd3e:	f7f3 fdad 	bl	800089c <__aeabi_ddiv>
 800cd42:	e9cd 0100 	strd	r0, r1, [sp]
 800cd46:	f006 060f 	and.w	r6, r6, #15
 800cd4a:	2503      	movs	r5, #3
 800cd4c:	4f1e      	ldr	r7, [pc, #120]	; (800cdc8 <_dtoa_r+0x330>)
 800cd4e:	e04c      	b.n	800cdea <_dtoa_r+0x352>
 800cd50:	2301      	movs	r3, #1
 800cd52:	930a      	str	r3, [sp, #40]	; 0x28
 800cd54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cd56:	4453      	add	r3, sl
 800cd58:	f103 0901 	add.w	r9, r3, #1
 800cd5c:	9302      	str	r3, [sp, #8]
 800cd5e:	464b      	mov	r3, r9
 800cd60:	2b01      	cmp	r3, #1
 800cd62:	bfb8      	it	lt
 800cd64:	2301      	movlt	r3, #1
 800cd66:	e7ba      	b.n	800ccde <_dtoa_r+0x246>
 800cd68:	2300      	movs	r3, #0
 800cd6a:	e7b2      	b.n	800ccd2 <_dtoa_r+0x23a>
 800cd6c:	2300      	movs	r3, #0
 800cd6e:	e7f0      	b.n	800cd52 <_dtoa_r+0x2ba>
 800cd70:	2501      	movs	r5, #1
 800cd72:	2300      	movs	r3, #0
 800cd74:	9306      	str	r3, [sp, #24]
 800cd76:	950a      	str	r5, [sp, #40]	; 0x28
 800cd78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cd7c:	9302      	str	r3, [sp, #8]
 800cd7e:	4699      	mov	r9, r3
 800cd80:	2200      	movs	r2, #0
 800cd82:	2312      	movs	r3, #18
 800cd84:	920b      	str	r2, [sp, #44]	; 0x2c
 800cd86:	e7aa      	b.n	800ccde <_dtoa_r+0x246>
 800cd88:	2301      	movs	r3, #1
 800cd8a:	930a      	str	r3, [sp, #40]	; 0x28
 800cd8c:	e7f4      	b.n	800cd78 <_dtoa_r+0x2e0>
 800cd8e:	2301      	movs	r3, #1
 800cd90:	9302      	str	r3, [sp, #8]
 800cd92:	4699      	mov	r9, r3
 800cd94:	461a      	mov	r2, r3
 800cd96:	e7f5      	b.n	800cd84 <_dtoa_r+0x2ec>
 800cd98:	3101      	adds	r1, #1
 800cd9a:	6071      	str	r1, [r6, #4]
 800cd9c:	0052      	lsls	r2, r2, #1
 800cd9e:	e7a2      	b.n	800cce6 <_dtoa_r+0x24e>
 800cda0:	636f4361 	.word	0x636f4361
 800cda4:	3fd287a7 	.word	0x3fd287a7
 800cda8:	8b60c8b3 	.word	0x8b60c8b3
 800cdac:	3fc68a28 	.word	0x3fc68a28
 800cdb0:	509f79fb 	.word	0x509f79fb
 800cdb4:	3fd34413 	.word	0x3fd34413
 800cdb8:	7ff00000 	.word	0x7ff00000
 800cdbc:	0800ed15 	.word	0x0800ed15
 800cdc0:	3ff80000 	.word	0x3ff80000
 800cdc4:	0800edd0 	.word	0x0800edd0
 800cdc8:	0800eda8 	.word	0x0800eda8
 800cdcc:	0800ed41 	.word	0x0800ed41
 800cdd0:	07f1      	lsls	r1, r6, #31
 800cdd2:	d508      	bpl.n	800cde6 <_dtoa_r+0x34e>
 800cdd4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800cdd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cddc:	f7f3 fc34 	bl	8000648 <__aeabi_dmul>
 800cde0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800cde4:	3501      	adds	r5, #1
 800cde6:	1076      	asrs	r6, r6, #1
 800cde8:	3708      	adds	r7, #8
 800cdea:	2e00      	cmp	r6, #0
 800cdec:	d1f0      	bne.n	800cdd0 <_dtoa_r+0x338>
 800cdee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800cdf2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cdf6:	f7f3 fd51 	bl	800089c <__aeabi_ddiv>
 800cdfa:	e9cd 0100 	strd	r0, r1, [sp]
 800cdfe:	e01a      	b.n	800ce36 <_dtoa_r+0x39e>
 800ce00:	2502      	movs	r5, #2
 800ce02:	e7a3      	b.n	800cd4c <_dtoa_r+0x2b4>
 800ce04:	f000 80a0 	beq.w	800cf48 <_dtoa_r+0x4b0>
 800ce08:	f1ca 0600 	rsb	r6, sl, #0
 800ce0c:	4b9f      	ldr	r3, [pc, #636]	; (800d08c <_dtoa_r+0x5f4>)
 800ce0e:	4fa0      	ldr	r7, [pc, #640]	; (800d090 <_dtoa_r+0x5f8>)
 800ce10:	f006 020f 	and.w	r2, r6, #15
 800ce14:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ce18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce1c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ce20:	f7f3 fc12 	bl	8000648 <__aeabi_dmul>
 800ce24:	e9cd 0100 	strd	r0, r1, [sp]
 800ce28:	1136      	asrs	r6, r6, #4
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	2502      	movs	r5, #2
 800ce2e:	2e00      	cmp	r6, #0
 800ce30:	d17f      	bne.n	800cf32 <_dtoa_r+0x49a>
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d1e1      	bne.n	800cdfa <_dtoa_r+0x362>
 800ce36:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	f000 8087 	beq.w	800cf4c <_dtoa_r+0x4b4>
 800ce3e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ce42:	2200      	movs	r2, #0
 800ce44:	4b93      	ldr	r3, [pc, #588]	; (800d094 <_dtoa_r+0x5fc>)
 800ce46:	4630      	mov	r0, r6
 800ce48:	4639      	mov	r1, r7
 800ce4a:	f7f3 fe6f 	bl	8000b2c <__aeabi_dcmplt>
 800ce4e:	2800      	cmp	r0, #0
 800ce50:	d07c      	beq.n	800cf4c <_dtoa_r+0x4b4>
 800ce52:	f1b9 0f00 	cmp.w	r9, #0
 800ce56:	d079      	beq.n	800cf4c <_dtoa_r+0x4b4>
 800ce58:	9b02      	ldr	r3, [sp, #8]
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	dd35      	ble.n	800ceca <_dtoa_r+0x432>
 800ce5e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800ce62:	9308      	str	r3, [sp, #32]
 800ce64:	4639      	mov	r1, r7
 800ce66:	2200      	movs	r2, #0
 800ce68:	4b8b      	ldr	r3, [pc, #556]	; (800d098 <_dtoa_r+0x600>)
 800ce6a:	4630      	mov	r0, r6
 800ce6c:	f7f3 fbec 	bl	8000648 <__aeabi_dmul>
 800ce70:	e9cd 0100 	strd	r0, r1, [sp]
 800ce74:	9f02      	ldr	r7, [sp, #8]
 800ce76:	3501      	adds	r5, #1
 800ce78:	4628      	mov	r0, r5
 800ce7a:	f7f3 fb7b 	bl	8000574 <__aeabi_i2d>
 800ce7e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ce82:	f7f3 fbe1 	bl	8000648 <__aeabi_dmul>
 800ce86:	2200      	movs	r2, #0
 800ce88:	4b84      	ldr	r3, [pc, #528]	; (800d09c <_dtoa_r+0x604>)
 800ce8a:	f7f3 fa27 	bl	80002dc <__adddf3>
 800ce8e:	4605      	mov	r5, r0
 800ce90:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800ce94:	2f00      	cmp	r7, #0
 800ce96:	d15d      	bne.n	800cf54 <_dtoa_r+0x4bc>
 800ce98:	2200      	movs	r2, #0
 800ce9a:	4b81      	ldr	r3, [pc, #516]	; (800d0a0 <_dtoa_r+0x608>)
 800ce9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cea0:	f7f3 fa1a 	bl	80002d8 <__aeabi_dsub>
 800cea4:	462a      	mov	r2, r5
 800cea6:	4633      	mov	r3, r6
 800cea8:	e9cd 0100 	strd	r0, r1, [sp]
 800ceac:	f7f3 fe5c 	bl	8000b68 <__aeabi_dcmpgt>
 800ceb0:	2800      	cmp	r0, #0
 800ceb2:	f040 8288 	bne.w	800d3c6 <_dtoa_r+0x92e>
 800ceb6:	462a      	mov	r2, r5
 800ceb8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800cebc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cec0:	f7f3 fe34 	bl	8000b2c <__aeabi_dcmplt>
 800cec4:	2800      	cmp	r0, #0
 800cec6:	f040 827c 	bne.w	800d3c2 <_dtoa_r+0x92a>
 800ceca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800cece:	e9cd 2300 	strd	r2, r3, [sp]
 800ced2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	f2c0 8150 	blt.w	800d17a <_dtoa_r+0x6e2>
 800ceda:	f1ba 0f0e 	cmp.w	sl, #14
 800cede:	f300 814c 	bgt.w	800d17a <_dtoa_r+0x6e2>
 800cee2:	4b6a      	ldr	r3, [pc, #424]	; (800d08c <_dtoa_r+0x5f4>)
 800cee4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800cee8:	ed93 7b00 	vldr	d7, [r3]
 800ceec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cef4:	f280 80d8 	bge.w	800d0a8 <_dtoa_r+0x610>
 800cef8:	f1b9 0f00 	cmp.w	r9, #0
 800cefc:	f300 80d4 	bgt.w	800d0a8 <_dtoa_r+0x610>
 800cf00:	f040 825e 	bne.w	800d3c0 <_dtoa_r+0x928>
 800cf04:	2200      	movs	r2, #0
 800cf06:	4b66      	ldr	r3, [pc, #408]	; (800d0a0 <_dtoa_r+0x608>)
 800cf08:	ec51 0b17 	vmov	r0, r1, d7
 800cf0c:	f7f3 fb9c 	bl	8000648 <__aeabi_dmul>
 800cf10:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cf14:	f7f3 fe1e 	bl	8000b54 <__aeabi_dcmpge>
 800cf18:	464f      	mov	r7, r9
 800cf1a:	464e      	mov	r6, r9
 800cf1c:	2800      	cmp	r0, #0
 800cf1e:	f040 8234 	bne.w	800d38a <_dtoa_r+0x8f2>
 800cf22:	2331      	movs	r3, #49	; 0x31
 800cf24:	f10b 0501 	add.w	r5, fp, #1
 800cf28:	f88b 3000 	strb.w	r3, [fp]
 800cf2c:	f10a 0a01 	add.w	sl, sl, #1
 800cf30:	e22f      	b.n	800d392 <_dtoa_r+0x8fa>
 800cf32:	07f2      	lsls	r2, r6, #31
 800cf34:	d505      	bpl.n	800cf42 <_dtoa_r+0x4aa>
 800cf36:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cf3a:	f7f3 fb85 	bl	8000648 <__aeabi_dmul>
 800cf3e:	3501      	adds	r5, #1
 800cf40:	2301      	movs	r3, #1
 800cf42:	1076      	asrs	r6, r6, #1
 800cf44:	3708      	adds	r7, #8
 800cf46:	e772      	b.n	800ce2e <_dtoa_r+0x396>
 800cf48:	2502      	movs	r5, #2
 800cf4a:	e774      	b.n	800ce36 <_dtoa_r+0x39e>
 800cf4c:	f8cd a020 	str.w	sl, [sp, #32]
 800cf50:	464f      	mov	r7, r9
 800cf52:	e791      	b.n	800ce78 <_dtoa_r+0x3e0>
 800cf54:	4b4d      	ldr	r3, [pc, #308]	; (800d08c <_dtoa_r+0x5f4>)
 800cf56:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800cf5a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800cf5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d047      	beq.n	800cff4 <_dtoa_r+0x55c>
 800cf64:	4602      	mov	r2, r0
 800cf66:	460b      	mov	r3, r1
 800cf68:	2000      	movs	r0, #0
 800cf6a:	494e      	ldr	r1, [pc, #312]	; (800d0a4 <_dtoa_r+0x60c>)
 800cf6c:	f7f3 fc96 	bl	800089c <__aeabi_ddiv>
 800cf70:	462a      	mov	r2, r5
 800cf72:	4633      	mov	r3, r6
 800cf74:	f7f3 f9b0 	bl	80002d8 <__aeabi_dsub>
 800cf78:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800cf7c:	465d      	mov	r5, fp
 800cf7e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cf82:	f7f3 fe11 	bl	8000ba8 <__aeabi_d2iz>
 800cf86:	4606      	mov	r6, r0
 800cf88:	f7f3 faf4 	bl	8000574 <__aeabi_i2d>
 800cf8c:	4602      	mov	r2, r0
 800cf8e:	460b      	mov	r3, r1
 800cf90:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cf94:	f7f3 f9a0 	bl	80002d8 <__aeabi_dsub>
 800cf98:	3630      	adds	r6, #48	; 0x30
 800cf9a:	f805 6b01 	strb.w	r6, [r5], #1
 800cf9e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800cfa2:	e9cd 0100 	strd	r0, r1, [sp]
 800cfa6:	f7f3 fdc1 	bl	8000b2c <__aeabi_dcmplt>
 800cfaa:	2800      	cmp	r0, #0
 800cfac:	d163      	bne.n	800d076 <_dtoa_r+0x5de>
 800cfae:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cfb2:	2000      	movs	r0, #0
 800cfb4:	4937      	ldr	r1, [pc, #220]	; (800d094 <_dtoa_r+0x5fc>)
 800cfb6:	f7f3 f98f 	bl	80002d8 <__aeabi_dsub>
 800cfba:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800cfbe:	f7f3 fdb5 	bl	8000b2c <__aeabi_dcmplt>
 800cfc2:	2800      	cmp	r0, #0
 800cfc4:	f040 80b7 	bne.w	800d136 <_dtoa_r+0x69e>
 800cfc8:	eba5 030b 	sub.w	r3, r5, fp
 800cfcc:	429f      	cmp	r7, r3
 800cfce:	f77f af7c 	ble.w	800ceca <_dtoa_r+0x432>
 800cfd2:	2200      	movs	r2, #0
 800cfd4:	4b30      	ldr	r3, [pc, #192]	; (800d098 <_dtoa_r+0x600>)
 800cfd6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800cfda:	f7f3 fb35 	bl	8000648 <__aeabi_dmul>
 800cfde:	2200      	movs	r2, #0
 800cfe0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800cfe4:	4b2c      	ldr	r3, [pc, #176]	; (800d098 <_dtoa_r+0x600>)
 800cfe6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cfea:	f7f3 fb2d 	bl	8000648 <__aeabi_dmul>
 800cfee:	e9cd 0100 	strd	r0, r1, [sp]
 800cff2:	e7c4      	b.n	800cf7e <_dtoa_r+0x4e6>
 800cff4:	462a      	mov	r2, r5
 800cff6:	4633      	mov	r3, r6
 800cff8:	f7f3 fb26 	bl	8000648 <__aeabi_dmul>
 800cffc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d000:	eb0b 0507 	add.w	r5, fp, r7
 800d004:	465e      	mov	r6, fp
 800d006:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d00a:	f7f3 fdcd 	bl	8000ba8 <__aeabi_d2iz>
 800d00e:	4607      	mov	r7, r0
 800d010:	f7f3 fab0 	bl	8000574 <__aeabi_i2d>
 800d014:	3730      	adds	r7, #48	; 0x30
 800d016:	4602      	mov	r2, r0
 800d018:	460b      	mov	r3, r1
 800d01a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d01e:	f7f3 f95b 	bl	80002d8 <__aeabi_dsub>
 800d022:	f806 7b01 	strb.w	r7, [r6], #1
 800d026:	42ae      	cmp	r6, r5
 800d028:	e9cd 0100 	strd	r0, r1, [sp]
 800d02c:	f04f 0200 	mov.w	r2, #0
 800d030:	d126      	bne.n	800d080 <_dtoa_r+0x5e8>
 800d032:	4b1c      	ldr	r3, [pc, #112]	; (800d0a4 <_dtoa_r+0x60c>)
 800d034:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d038:	f7f3 f950 	bl	80002dc <__adddf3>
 800d03c:	4602      	mov	r2, r0
 800d03e:	460b      	mov	r3, r1
 800d040:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d044:	f7f3 fd90 	bl	8000b68 <__aeabi_dcmpgt>
 800d048:	2800      	cmp	r0, #0
 800d04a:	d174      	bne.n	800d136 <_dtoa_r+0x69e>
 800d04c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d050:	2000      	movs	r0, #0
 800d052:	4914      	ldr	r1, [pc, #80]	; (800d0a4 <_dtoa_r+0x60c>)
 800d054:	f7f3 f940 	bl	80002d8 <__aeabi_dsub>
 800d058:	4602      	mov	r2, r0
 800d05a:	460b      	mov	r3, r1
 800d05c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d060:	f7f3 fd64 	bl	8000b2c <__aeabi_dcmplt>
 800d064:	2800      	cmp	r0, #0
 800d066:	f43f af30 	beq.w	800ceca <_dtoa_r+0x432>
 800d06a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d06e:	2b30      	cmp	r3, #48	; 0x30
 800d070:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800d074:	d002      	beq.n	800d07c <_dtoa_r+0x5e4>
 800d076:	f8dd a020 	ldr.w	sl, [sp, #32]
 800d07a:	e04a      	b.n	800d112 <_dtoa_r+0x67a>
 800d07c:	4615      	mov	r5, r2
 800d07e:	e7f4      	b.n	800d06a <_dtoa_r+0x5d2>
 800d080:	4b05      	ldr	r3, [pc, #20]	; (800d098 <_dtoa_r+0x600>)
 800d082:	f7f3 fae1 	bl	8000648 <__aeabi_dmul>
 800d086:	e9cd 0100 	strd	r0, r1, [sp]
 800d08a:	e7bc      	b.n	800d006 <_dtoa_r+0x56e>
 800d08c:	0800edd0 	.word	0x0800edd0
 800d090:	0800eda8 	.word	0x0800eda8
 800d094:	3ff00000 	.word	0x3ff00000
 800d098:	40240000 	.word	0x40240000
 800d09c:	401c0000 	.word	0x401c0000
 800d0a0:	40140000 	.word	0x40140000
 800d0a4:	3fe00000 	.word	0x3fe00000
 800d0a8:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d0ac:	465d      	mov	r5, fp
 800d0ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d0b2:	4630      	mov	r0, r6
 800d0b4:	4639      	mov	r1, r7
 800d0b6:	f7f3 fbf1 	bl	800089c <__aeabi_ddiv>
 800d0ba:	f7f3 fd75 	bl	8000ba8 <__aeabi_d2iz>
 800d0be:	4680      	mov	r8, r0
 800d0c0:	f7f3 fa58 	bl	8000574 <__aeabi_i2d>
 800d0c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d0c8:	f7f3 fabe 	bl	8000648 <__aeabi_dmul>
 800d0cc:	4602      	mov	r2, r0
 800d0ce:	460b      	mov	r3, r1
 800d0d0:	4630      	mov	r0, r6
 800d0d2:	4639      	mov	r1, r7
 800d0d4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800d0d8:	f7f3 f8fe 	bl	80002d8 <__aeabi_dsub>
 800d0dc:	f805 6b01 	strb.w	r6, [r5], #1
 800d0e0:	eba5 060b 	sub.w	r6, r5, fp
 800d0e4:	45b1      	cmp	r9, r6
 800d0e6:	4602      	mov	r2, r0
 800d0e8:	460b      	mov	r3, r1
 800d0ea:	d139      	bne.n	800d160 <_dtoa_r+0x6c8>
 800d0ec:	f7f3 f8f6 	bl	80002dc <__adddf3>
 800d0f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d0f4:	4606      	mov	r6, r0
 800d0f6:	460f      	mov	r7, r1
 800d0f8:	f7f3 fd36 	bl	8000b68 <__aeabi_dcmpgt>
 800d0fc:	b9c8      	cbnz	r0, 800d132 <_dtoa_r+0x69a>
 800d0fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d102:	4630      	mov	r0, r6
 800d104:	4639      	mov	r1, r7
 800d106:	f7f3 fd07 	bl	8000b18 <__aeabi_dcmpeq>
 800d10a:	b110      	cbz	r0, 800d112 <_dtoa_r+0x67a>
 800d10c:	f018 0f01 	tst.w	r8, #1
 800d110:	d10f      	bne.n	800d132 <_dtoa_r+0x69a>
 800d112:	9904      	ldr	r1, [sp, #16]
 800d114:	4620      	mov	r0, r4
 800d116:	f000 fcaa 	bl	800da6e <_Bfree>
 800d11a:	2300      	movs	r3, #0
 800d11c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d11e:	702b      	strb	r3, [r5, #0]
 800d120:	f10a 0301 	add.w	r3, sl, #1
 800d124:	6013      	str	r3, [r2, #0]
 800d126:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d128:	2b00      	cmp	r3, #0
 800d12a:	f000 8241 	beq.w	800d5b0 <_dtoa_r+0xb18>
 800d12e:	601d      	str	r5, [r3, #0]
 800d130:	e23e      	b.n	800d5b0 <_dtoa_r+0xb18>
 800d132:	f8cd a020 	str.w	sl, [sp, #32]
 800d136:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d13a:	2a39      	cmp	r2, #57	; 0x39
 800d13c:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 800d140:	d108      	bne.n	800d154 <_dtoa_r+0x6bc>
 800d142:	459b      	cmp	fp, r3
 800d144:	d10a      	bne.n	800d15c <_dtoa_r+0x6c4>
 800d146:	9b08      	ldr	r3, [sp, #32]
 800d148:	3301      	adds	r3, #1
 800d14a:	9308      	str	r3, [sp, #32]
 800d14c:	2330      	movs	r3, #48	; 0x30
 800d14e:	f88b 3000 	strb.w	r3, [fp]
 800d152:	465b      	mov	r3, fp
 800d154:	781a      	ldrb	r2, [r3, #0]
 800d156:	3201      	adds	r2, #1
 800d158:	701a      	strb	r2, [r3, #0]
 800d15a:	e78c      	b.n	800d076 <_dtoa_r+0x5de>
 800d15c:	461d      	mov	r5, r3
 800d15e:	e7ea      	b.n	800d136 <_dtoa_r+0x69e>
 800d160:	2200      	movs	r2, #0
 800d162:	4b9b      	ldr	r3, [pc, #620]	; (800d3d0 <_dtoa_r+0x938>)
 800d164:	f7f3 fa70 	bl	8000648 <__aeabi_dmul>
 800d168:	2200      	movs	r2, #0
 800d16a:	2300      	movs	r3, #0
 800d16c:	4606      	mov	r6, r0
 800d16e:	460f      	mov	r7, r1
 800d170:	f7f3 fcd2 	bl	8000b18 <__aeabi_dcmpeq>
 800d174:	2800      	cmp	r0, #0
 800d176:	d09a      	beq.n	800d0ae <_dtoa_r+0x616>
 800d178:	e7cb      	b.n	800d112 <_dtoa_r+0x67a>
 800d17a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d17c:	2a00      	cmp	r2, #0
 800d17e:	f000 808b 	beq.w	800d298 <_dtoa_r+0x800>
 800d182:	9a06      	ldr	r2, [sp, #24]
 800d184:	2a01      	cmp	r2, #1
 800d186:	dc6e      	bgt.n	800d266 <_dtoa_r+0x7ce>
 800d188:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d18a:	2a00      	cmp	r2, #0
 800d18c:	d067      	beq.n	800d25e <_dtoa_r+0x7c6>
 800d18e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d192:	9f07      	ldr	r7, [sp, #28]
 800d194:	9d05      	ldr	r5, [sp, #20]
 800d196:	9a05      	ldr	r2, [sp, #20]
 800d198:	2101      	movs	r1, #1
 800d19a:	441a      	add	r2, r3
 800d19c:	4620      	mov	r0, r4
 800d19e:	9205      	str	r2, [sp, #20]
 800d1a0:	4498      	add	r8, r3
 800d1a2:	f000 fd04 	bl	800dbae <__i2b>
 800d1a6:	4606      	mov	r6, r0
 800d1a8:	2d00      	cmp	r5, #0
 800d1aa:	dd0c      	ble.n	800d1c6 <_dtoa_r+0x72e>
 800d1ac:	f1b8 0f00 	cmp.w	r8, #0
 800d1b0:	dd09      	ble.n	800d1c6 <_dtoa_r+0x72e>
 800d1b2:	4545      	cmp	r5, r8
 800d1b4:	9a05      	ldr	r2, [sp, #20]
 800d1b6:	462b      	mov	r3, r5
 800d1b8:	bfa8      	it	ge
 800d1ba:	4643      	movge	r3, r8
 800d1bc:	1ad2      	subs	r2, r2, r3
 800d1be:	9205      	str	r2, [sp, #20]
 800d1c0:	1aed      	subs	r5, r5, r3
 800d1c2:	eba8 0803 	sub.w	r8, r8, r3
 800d1c6:	9b07      	ldr	r3, [sp, #28]
 800d1c8:	b1eb      	cbz	r3, 800d206 <_dtoa_r+0x76e>
 800d1ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d067      	beq.n	800d2a0 <_dtoa_r+0x808>
 800d1d0:	b18f      	cbz	r7, 800d1f6 <_dtoa_r+0x75e>
 800d1d2:	4631      	mov	r1, r6
 800d1d4:	463a      	mov	r2, r7
 800d1d6:	4620      	mov	r0, r4
 800d1d8:	f000 fd88 	bl	800dcec <__pow5mult>
 800d1dc:	9a04      	ldr	r2, [sp, #16]
 800d1de:	4601      	mov	r1, r0
 800d1e0:	4606      	mov	r6, r0
 800d1e2:	4620      	mov	r0, r4
 800d1e4:	f000 fcec 	bl	800dbc0 <__multiply>
 800d1e8:	9904      	ldr	r1, [sp, #16]
 800d1ea:	9008      	str	r0, [sp, #32]
 800d1ec:	4620      	mov	r0, r4
 800d1ee:	f000 fc3e 	bl	800da6e <_Bfree>
 800d1f2:	9b08      	ldr	r3, [sp, #32]
 800d1f4:	9304      	str	r3, [sp, #16]
 800d1f6:	9b07      	ldr	r3, [sp, #28]
 800d1f8:	1bda      	subs	r2, r3, r7
 800d1fa:	d004      	beq.n	800d206 <_dtoa_r+0x76e>
 800d1fc:	9904      	ldr	r1, [sp, #16]
 800d1fe:	4620      	mov	r0, r4
 800d200:	f000 fd74 	bl	800dcec <__pow5mult>
 800d204:	9004      	str	r0, [sp, #16]
 800d206:	2101      	movs	r1, #1
 800d208:	4620      	mov	r0, r4
 800d20a:	f000 fcd0 	bl	800dbae <__i2b>
 800d20e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d210:	4607      	mov	r7, r0
 800d212:	2b00      	cmp	r3, #0
 800d214:	f000 81d0 	beq.w	800d5b8 <_dtoa_r+0xb20>
 800d218:	461a      	mov	r2, r3
 800d21a:	4601      	mov	r1, r0
 800d21c:	4620      	mov	r0, r4
 800d21e:	f000 fd65 	bl	800dcec <__pow5mult>
 800d222:	9b06      	ldr	r3, [sp, #24]
 800d224:	2b01      	cmp	r3, #1
 800d226:	4607      	mov	r7, r0
 800d228:	dc40      	bgt.n	800d2ac <_dtoa_r+0x814>
 800d22a:	9b00      	ldr	r3, [sp, #0]
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d139      	bne.n	800d2a4 <_dtoa_r+0x80c>
 800d230:	9b01      	ldr	r3, [sp, #4]
 800d232:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d236:	2b00      	cmp	r3, #0
 800d238:	d136      	bne.n	800d2a8 <_dtoa_r+0x810>
 800d23a:	9b01      	ldr	r3, [sp, #4]
 800d23c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d240:	0d1b      	lsrs	r3, r3, #20
 800d242:	051b      	lsls	r3, r3, #20
 800d244:	b12b      	cbz	r3, 800d252 <_dtoa_r+0x7ba>
 800d246:	9b05      	ldr	r3, [sp, #20]
 800d248:	3301      	adds	r3, #1
 800d24a:	9305      	str	r3, [sp, #20]
 800d24c:	f108 0801 	add.w	r8, r8, #1
 800d250:	2301      	movs	r3, #1
 800d252:	9307      	str	r3, [sp, #28]
 800d254:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d256:	2b00      	cmp	r3, #0
 800d258:	d12a      	bne.n	800d2b0 <_dtoa_r+0x818>
 800d25a:	2001      	movs	r0, #1
 800d25c:	e030      	b.n	800d2c0 <_dtoa_r+0x828>
 800d25e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d260:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d264:	e795      	b.n	800d192 <_dtoa_r+0x6fa>
 800d266:	9b07      	ldr	r3, [sp, #28]
 800d268:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 800d26c:	42bb      	cmp	r3, r7
 800d26e:	bfbf      	itttt	lt
 800d270:	9b07      	ldrlt	r3, [sp, #28]
 800d272:	9707      	strlt	r7, [sp, #28]
 800d274:	1afa      	sublt	r2, r7, r3
 800d276:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800d278:	bfbb      	ittet	lt
 800d27a:	189b      	addlt	r3, r3, r2
 800d27c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800d27e:	1bdf      	subge	r7, r3, r7
 800d280:	2700      	movlt	r7, #0
 800d282:	f1b9 0f00 	cmp.w	r9, #0
 800d286:	bfb5      	itete	lt
 800d288:	9b05      	ldrlt	r3, [sp, #20]
 800d28a:	9d05      	ldrge	r5, [sp, #20]
 800d28c:	eba3 0509 	sublt.w	r5, r3, r9
 800d290:	464b      	movge	r3, r9
 800d292:	bfb8      	it	lt
 800d294:	2300      	movlt	r3, #0
 800d296:	e77e      	b.n	800d196 <_dtoa_r+0x6fe>
 800d298:	9f07      	ldr	r7, [sp, #28]
 800d29a:	9d05      	ldr	r5, [sp, #20]
 800d29c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800d29e:	e783      	b.n	800d1a8 <_dtoa_r+0x710>
 800d2a0:	9a07      	ldr	r2, [sp, #28]
 800d2a2:	e7ab      	b.n	800d1fc <_dtoa_r+0x764>
 800d2a4:	2300      	movs	r3, #0
 800d2a6:	e7d4      	b.n	800d252 <_dtoa_r+0x7ba>
 800d2a8:	9b00      	ldr	r3, [sp, #0]
 800d2aa:	e7d2      	b.n	800d252 <_dtoa_r+0x7ba>
 800d2ac:	2300      	movs	r3, #0
 800d2ae:	9307      	str	r3, [sp, #28]
 800d2b0:	693b      	ldr	r3, [r7, #16]
 800d2b2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800d2b6:	6918      	ldr	r0, [r3, #16]
 800d2b8:	f000 fc2b 	bl	800db12 <__hi0bits>
 800d2bc:	f1c0 0020 	rsb	r0, r0, #32
 800d2c0:	4440      	add	r0, r8
 800d2c2:	f010 001f 	ands.w	r0, r0, #31
 800d2c6:	d047      	beq.n	800d358 <_dtoa_r+0x8c0>
 800d2c8:	f1c0 0320 	rsb	r3, r0, #32
 800d2cc:	2b04      	cmp	r3, #4
 800d2ce:	dd3b      	ble.n	800d348 <_dtoa_r+0x8b0>
 800d2d0:	9b05      	ldr	r3, [sp, #20]
 800d2d2:	f1c0 001c 	rsb	r0, r0, #28
 800d2d6:	4403      	add	r3, r0
 800d2d8:	9305      	str	r3, [sp, #20]
 800d2da:	4405      	add	r5, r0
 800d2dc:	4480      	add	r8, r0
 800d2de:	9b05      	ldr	r3, [sp, #20]
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	dd05      	ble.n	800d2f0 <_dtoa_r+0x858>
 800d2e4:	461a      	mov	r2, r3
 800d2e6:	9904      	ldr	r1, [sp, #16]
 800d2e8:	4620      	mov	r0, r4
 800d2ea:	f000 fd4d 	bl	800dd88 <__lshift>
 800d2ee:	9004      	str	r0, [sp, #16]
 800d2f0:	f1b8 0f00 	cmp.w	r8, #0
 800d2f4:	dd05      	ble.n	800d302 <_dtoa_r+0x86a>
 800d2f6:	4639      	mov	r1, r7
 800d2f8:	4642      	mov	r2, r8
 800d2fa:	4620      	mov	r0, r4
 800d2fc:	f000 fd44 	bl	800dd88 <__lshift>
 800d300:	4607      	mov	r7, r0
 800d302:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d304:	b353      	cbz	r3, 800d35c <_dtoa_r+0x8c4>
 800d306:	4639      	mov	r1, r7
 800d308:	9804      	ldr	r0, [sp, #16]
 800d30a:	f000 fd91 	bl	800de30 <__mcmp>
 800d30e:	2800      	cmp	r0, #0
 800d310:	da24      	bge.n	800d35c <_dtoa_r+0x8c4>
 800d312:	2300      	movs	r3, #0
 800d314:	220a      	movs	r2, #10
 800d316:	9904      	ldr	r1, [sp, #16]
 800d318:	4620      	mov	r0, r4
 800d31a:	f000 fbbf 	bl	800da9c <__multadd>
 800d31e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d320:	9004      	str	r0, [sp, #16]
 800d322:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800d326:	2b00      	cmp	r3, #0
 800d328:	f000 814d 	beq.w	800d5c6 <_dtoa_r+0xb2e>
 800d32c:	2300      	movs	r3, #0
 800d32e:	4631      	mov	r1, r6
 800d330:	220a      	movs	r2, #10
 800d332:	4620      	mov	r0, r4
 800d334:	f000 fbb2 	bl	800da9c <__multadd>
 800d338:	9b02      	ldr	r3, [sp, #8]
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	4606      	mov	r6, r0
 800d33e:	dc4f      	bgt.n	800d3e0 <_dtoa_r+0x948>
 800d340:	9b06      	ldr	r3, [sp, #24]
 800d342:	2b02      	cmp	r3, #2
 800d344:	dd4c      	ble.n	800d3e0 <_dtoa_r+0x948>
 800d346:	e011      	b.n	800d36c <_dtoa_r+0x8d4>
 800d348:	d0c9      	beq.n	800d2de <_dtoa_r+0x846>
 800d34a:	9a05      	ldr	r2, [sp, #20]
 800d34c:	331c      	adds	r3, #28
 800d34e:	441a      	add	r2, r3
 800d350:	9205      	str	r2, [sp, #20]
 800d352:	441d      	add	r5, r3
 800d354:	4498      	add	r8, r3
 800d356:	e7c2      	b.n	800d2de <_dtoa_r+0x846>
 800d358:	4603      	mov	r3, r0
 800d35a:	e7f6      	b.n	800d34a <_dtoa_r+0x8b2>
 800d35c:	f1b9 0f00 	cmp.w	r9, #0
 800d360:	dc38      	bgt.n	800d3d4 <_dtoa_r+0x93c>
 800d362:	9b06      	ldr	r3, [sp, #24]
 800d364:	2b02      	cmp	r3, #2
 800d366:	dd35      	ble.n	800d3d4 <_dtoa_r+0x93c>
 800d368:	f8cd 9008 	str.w	r9, [sp, #8]
 800d36c:	9b02      	ldr	r3, [sp, #8]
 800d36e:	b963      	cbnz	r3, 800d38a <_dtoa_r+0x8f2>
 800d370:	4639      	mov	r1, r7
 800d372:	2205      	movs	r2, #5
 800d374:	4620      	mov	r0, r4
 800d376:	f000 fb91 	bl	800da9c <__multadd>
 800d37a:	4601      	mov	r1, r0
 800d37c:	4607      	mov	r7, r0
 800d37e:	9804      	ldr	r0, [sp, #16]
 800d380:	f000 fd56 	bl	800de30 <__mcmp>
 800d384:	2800      	cmp	r0, #0
 800d386:	f73f adcc 	bgt.w	800cf22 <_dtoa_r+0x48a>
 800d38a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d38c:	465d      	mov	r5, fp
 800d38e:	ea6f 0a03 	mvn.w	sl, r3
 800d392:	f04f 0900 	mov.w	r9, #0
 800d396:	4639      	mov	r1, r7
 800d398:	4620      	mov	r0, r4
 800d39a:	f000 fb68 	bl	800da6e <_Bfree>
 800d39e:	2e00      	cmp	r6, #0
 800d3a0:	f43f aeb7 	beq.w	800d112 <_dtoa_r+0x67a>
 800d3a4:	f1b9 0f00 	cmp.w	r9, #0
 800d3a8:	d005      	beq.n	800d3b6 <_dtoa_r+0x91e>
 800d3aa:	45b1      	cmp	r9, r6
 800d3ac:	d003      	beq.n	800d3b6 <_dtoa_r+0x91e>
 800d3ae:	4649      	mov	r1, r9
 800d3b0:	4620      	mov	r0, r4
 800d3b2:	f000 fb5c 	bl	800da6e <_Bfree>
 800d3b6:	4631      	mov	r1, r6
 800d3b8:	4620      	mov	r0, r4
 800d3ba:	f000 fb58 	bl	800da6e <_Bfree>
 800d3be:	e6a8      	b.n	800d112 <_dtoa_r+0x67a>
 800d3c0:	2700      	movs	r7, #0
 800d3c2:	463e      	mov	r6, r7
 800d3c4:	e7e1      	b.n	800d38a <_dtoa_r+0x8f2>
 800d3c6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800d3ca:	463e      	mov	r6, r7
 800d3cc:	e5a9      	b.n	800cf22 <_dtoa_r+0x48a>
 800d3ce:	bf00      	nop
 800d3d0:	40240000 	.word	0x40240000
 800d3d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d3d6:	f8cd 9008 	str.w	r9, [sp, #8]
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	f000 80fa 	beq.w	800d5d4 <_dtoa_r+0xb3c>
 800d3e0:	2d00      	cmp	r5, #0
 800d3e2:	dd05      	ble.n	800d3f0 <_dtoa_r+0x958>
 800d3e4:	4631      	mov	r1, r6
 800d3e6:	462a      	mov	r2, r5
 800d3e8:	4620      	mov	r0, r4
 800d3ea:	f000 fccd 	bl	800dd88 <__lshift>
 800d3ee:	4606      	mov	r6, r0
 800d3f0:	9b07      	ldr	r3, [sp, #28]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d04c      	beq.n	800d490 <_dtoa_r+0x9f8>
 800d3f6:	6871      	ldr	r1, [r6, #4]
 800d3f8:	4620      	mov	r0, r4
 800d3fa:	f000 fb04 	bl	800da06 <_Balloc>
 800d3fe:	6932      	ldr	r2, [r6, #16]
 800d400:	3202      	adds	r2, #2
 800d402:	4605      	mov	r5, r0
 800d404:	0092      	lsls	r2, r2, #2
 800d406:	f106 010c 	add.w	r1, r6, #12
 800d40a:	300c      	adds	r0, #12
 800d40c:	f000 faf0 	bl	800d9f0 <memcpy>
 800d410:	2201      	movs	r2, #1
 800d412:	4629      	mov	r1, r5
 800d414:	4620      	mov	r0, r4
 800d416:	f000 fcb7 	bl	800dd88 <__lshift>
 800d41a:	9b00      	ldr	r3, [sp, #0]
 800d41c:	f8cd b014 	str.w	fp, [sp, #20]
 800d420:	f003 0301 	and.w	r3, r3, #1
 800d424:	46b1      	mov	r9, r6
 800d426:	9307      	str	r3, [sp, #28]
 800d428:	4606      	mov	r6, r0
 800d42a:	4639      	mov	r1, r7
 800d42c:	9804      	ldr	r0, [sp, #16]
 800d42e:	f7ff faa5 	bl	800c97c <quorem>
 800d432:	4649      	mov	r1, r9
 800d434:	4605      	mov	r5, r0
 800d436:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800d43a:	9804      	ldr	r0, [sp, #16]
 800d43c:	f000 fcf8 	bl	800de30 <__mcmp>
 800d440:	4632      	mov	r2, r6
 800d442:	9000      	str	r0, [sp, #0]
 800d444:	4639      	mov	r1, r7
 800d446:	4620      	mov	r0, r4
 800d448:	f000 fd0c 	bl	800de64 <__mdiff>
 800d44c:	68c3      	ldr	r3, [r0, #12]
 800d44e:	4602      	mov	r2, r0
 800d450:	bb03      	cbnz	r3, 800d494 <_dtoa_r+0x9fc>
 800d452:	4601      	mov	r1, r0
 800d454:	9008      	str	r0, [sp, #32]
 800d456:	9804      	ldr	r0, [sp, #16]
 800d458:	f000 fcea 	bl	800de30 <__mcmp>
 800d45c:	9a08      	ldr	r2, [sp, #32]
 800d45e:	4603      	mov	r3, r0
 800d460:	4611      	mov	r1, r2
 800d462:	4620      	mov	r0, r4
 800d464:	9308      	str	r3, [sp, #32]
 800d466:	f000 fb02 	bl	800da6e <_Bfree>
 800d46a:	9b08      	ldr	r3, [sp, #32]
 800d46c:	b9a3      	cbnz	r3, 800d498 <_dtoa_r+0xa00>
 800d46e:	9a06      	ldr	r2, [sp, #24]
 800d470:	b992      	cbnz	r2, 800d498 <_dtoa_r+0xa00>
 800d472:	9a07      	ldr	r2, [sp, #28]
 800d474:	b982      	cbnz	r2, 800d498 <_dtoa_r+0xa00>
 800d476:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d47a:	d029      	beq.n	800d4d0 <_dtoa_r+0xa38>
 800d47c:	9b00      	ldr	r3, [sp, #0]
 800d47e:	2b00      	cmp	r3, #0
 800d480:	dd01      	ble.n	800d486 <_dtoa_r+0x9ee>
 800d482:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800d486:	9b05      	ldr	r3, [sp, #20]
 800d488:	1c5d      	adds	r5, r3, #1
 800d48a:	f883 8000 	strb.w	r8, [r3]
 800d48e:	e782      	b.n	800d396 <_dtoa_r+0x8fe>
 800d490:	4630      	mov	r0, r6
 800d492:	e7c2      	b.n	800d41a <_dtoa_r+0x982>
 800d494:	2301      	movs	r3, #1
 800d496:	e7e3      	b.n	800d460 <_dtoa_r+0x9c8>
 800d498:	9a00      	ldr	r2, [sp, #0]
 800d49a:	2a00      	cmp	r2, #0
 800d49c:	db04      	blt.n	800d4a8 <_dtoa_r+0xa10>
 800d49e:	d125      	bne.n	800d4ec <_dtoa_r+0xa54>
 800d4a0:	9a06      	ldr	r2, [sp, #24]
 800d4a2:	bb1a      	cbnz	r2, 800d4ec <_dtoa_r+0xa54>
 800d4a4:	9a07      	ldr	r2, [sp, #28]
 800d4a6:	bb0a      	cbnz	r2, 800d4ec <_dtoa_r+0xa54>
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	ddec      	ble.n	800d486 <_dtoa_r+0x9ee>
 800d4ac:	2201      	movs	r2, #1
 800d4ae:	9904      	ldr	r1, [sp, #16]
 800d4b0:	4620      	mov	r0, r4
 800d4b2:	f000 fc69 	bl	800dd88 <__lshift>
 800d4b6:	4639      	mov	r1, r7
 800d4b8:	9004      	str	r0, [sp, #16]
 800d4ba:	f000 fcb9 	bl	800de30 <__mcmp>
 800d4be:	2800      	cmp	r0, #0
 800d4c0:	dc03      	bgt.n	800d4ca <_dtoa_r+0xa32>
 800d4c2:	d1e0      	bne.n	800d486 <_dtoa_r+0x9ee>
 800d4c4:	f018 0f01 	tst.w	r8, #1
 800d4c8:	d0dd      	beq.n	800d486 <_dtoa_r+0x9ee>
 800d4ca:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d4ce:	d1d8      	bne.n	800d482 <_dtoa_r+0x9ea>
 800d4d0:	9b05      	ldr	r3, [sp, #20]
 800d4d2:	9a05      	ldr	r2, [sp, #20]
 800d4d4:	1c5d      	adds	r5, r3, #1
 800d4d6:	2339      	movs	r3, #57	; 0x39
 800d4d8:	7013      	strb	r3, [r2, #0]
 800d4da:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d4de:	2b39      	cmp	r3, #57	; 0x39
 800d4e0:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800d4e4:	d04f      	beq.n	800d586 <_dtoa_r+0xaee>
 800d4e6:	3301      	adds	r3, #1
 800d4e8:	7013      	strb	r3, [r2, #0]
 800d4ea:	e754      	b.n	800d396 <_dtoa_r+0x8fe>
 800d4ec:	9a05      	ldr	r2, [sp, #20]
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	f102 0501 	add.w	r5, r2, #1
 800d4f4:	dd06      	ble.n	800d504 <_dtoa_r+0xa6c>
 800d4f6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d4fa:	d0e9      	beq.n	800d4d0 <_dtoa_r+0xa38>
 800d4fc:	f108 0801 	add.w	r8, r8, #1
 800d500:	9b05      	ldr	r3, [sp, #20]
 800d502:	e7c2      	b.n	800d48a <_dtoa_r+0x9f2>
 800d504:	9a02      	ldr	r2, [sp, #8]
 800d506:	f805 8c01 	strb.w	r8, [r5, #-1]
 800d50a:	eba5 030b 	sub.w	r3, r5, fp
 800d50e:	4293      	cmp	r3, r2
 800d510:	d021      	beq.n	800d556 <_dtoa_r+0xabe>
 800d512:	2300      	movs	r3, #0
 800d514:	220a      	movs	r2, #10
 800d516:	9904      	ldr	r1, [sp, #16]
 800d518:	4620      	mov	r0, r4
 800d51a:	f000 fabf 	bl	800da9c <__multadd>
 800d51e:	45b1      	cmp	r9, r6
 800d520:	9004      	str	r0, [sp, #16]
 800d522:	f04f 0300 	mov.w	r3, #0
 800d526:	f04f 020a 	mov.w	r2, #10
 800d52a:	4649      	mov	r1, r9
 800d52c:	4620      	mov	r0, r4
 800d52e:	d105      	bne.n	800d53c <_dtoa_r+0xaa4>
 800d530:	f000 fab4 	bl	800da9c <__multadd>
 800d534:	4681      	mov	r9, r0
 800d536:	4606      	mov	r6, r0
 800d538:	9505      	str	r5, [sp, #20]
 800d53a:	e776      	b.n	800d42a <_dtoa_r+0x992>
 800d53c:	f000 faae 	bl	800da9c <__multadd>
 800d540:	4631      	mov	r1, r6
 800d542:	4681      	mov	r9, r0
 800d544:	2300      	movs	r3, #0
 800d546:	220a      	movs	r2, #10
 800d548:	4620      	mov	r0, r4
 800d54a:	f000 faa7 	bl	800da9c <__multadd>
 800d54e:	4606      	mov	r6, r0
 800d550:	e7f2      	b.n	800d538 <_dtoa_r+0xaa0>
 800d552:	f04f 0900 	mov.w	r9, #0
 800d556:	2201      	movs	r2, #1
 800d558:	9904      	ldr	r1, [sp, #16]
 800d55a:	4620      	mov	r0, r4
 800d55c:	f000 fc14 	bl	800dd88 <__lshift>
 800d560:	4639      	mov	r1, r7
 800d562:	9004      	str	r0, [sp, #16]
 800d564:	f000 fc64 	bl	800de30 <__mcmp>
 800d568:	2800      	cmp	r0, #0
 800d56a:	dcb6      	bgt.n	800d4da <_dtoa_r+0xa42>
 800d56c:	d102      	bne.n	800d574 <_dtoa_r+0xadc>
 800d56e:	f018 0f01 	tst.w	r8, #1
 800d572:	d1b2      	bne.n	800d4da <_dtoa_r+0xa42>
 800d574:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d578:	2b30      	cmp	r3, #48	; 0x30
 800d57a:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800d57e:	f47f af0a 	bne.w	800d396 <_dtoa_r+0x8fe>
 800d582:	4615      	mov	r5, r2
 800d584:	e7f6      	b.n	800d574 <_dtoa_r+0xadc>
 800d586:	4593      	cmp	fp, r2
 800d588:	d105      	bne.n	800d596 <_dtoa_r+0xafe>
 800d58a:	2331      	movs	r3, #49	; 0x31
 800d58c:	f10a 0a01 	add.w	sl, sl, #1
 800d590:	f88b 3000 	strb.w	r3, [fp]
 800d594:	e6ff      	b.n	800d396 <_dtoa_r+0x8fe>
 800d596:	4615      	mov	r5, r2
 800d598:	e79f      	b.n	800d4da <_dtoa_r+0xa42>
 800d59a:	f8df b064 	ldr.w	fp, [pc, #100]	; 800d600 <_dtoa_r+0xb68>
 800d59e:	e007      	b.n	800d5b0 <_dtoa_r+0xb18>
 800d5a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d5a2:	f8df b060 	ldr.w	fp, [pc, #96]	; 800d604 <_dtoa_r+0xb6c>
 800d5a6:	b11b      	cbz	r3, 800d5b0 <_dtoa_r+0xb18>
 800d5a8:	f10b 0308 	add.w	r3, fp, #8
 800d5ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d5ae:	6013      	str	r3, [r2, #0]
 800d5b0:	4658      	mov	r0, fp
 800d5b2:	b017      	add	sp, #92	; 0x5c
 800d5b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5b8:	9b06      	ldr	r3, [sp, #24]
 800d5ba:	2b01      	cmp	r3, #1
 800d5bc:	f77f ae35 	ble.w	800d22a <_dtoa_r+0x792>
 800d5c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d5c2:	9307      	str	r3, [sp, #28]
 800d5c4:	e649      	b.n	800d25a <_dtoa_r+0x7c2>
 800d5c6:	9b02      	ldr	r3, [sp, #8]
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	dc03      	bgt.n	800d5d4 <_dtoa_r+0xb3c>
 800d5cc:	9b06      	ldr	r3, [sp, #24]
 800d5ce:	2b02      	cmp	r3, #2
 800d5d0:	f73f aecc 	bgt.w	800d36c <_dtoa_r+0x8d4>
 800d5d4:	465d      	mov	r5, fp
 800d5d6:	4639      	mov	r1, r7
 800d5d8:	9804      	ldr	r0, [sp, #16]
 800d5da:	f7ff f9cf 	bl	800c97c <quorem>
 800d5de:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800d5e2:	f805 8b01 	strb.w	r8, [r5], #1
 800d5e6:	9a02      	ldr	r2, [sp, #8]
 800d5e8:	eba5 030b 	sub.w	r3, r5, fp
 800d5ec:	429a      	cmp	r2, r3
 800d5ee:	ddb0      	ble.n	800d552 <_dtoa_r+0xaba>
 800d5f0:	2300      	movs	r3, #0
 800d5f2:	220a      	movs	r2, #10
 800d5f4:	9904      	ldr	r1, [sp, #16]
 800d5f6:	4620      	mov	r0, r4
 800d5f8:	f000 fa50 	bl	800da9c <__multadd>
 800d5fc:	9004      	str	r0, [sp, #16]
 800d5fe:	e7ea      	b.n	800d5d6 <_dtoa_r+0xb3e>
 800d600:	0800ed14 	.word	0x0800ed14
 800d604:	0800ed38 	.word	0x0800ed38

0800d608 <__sflush_r>:
 800d608:	898a      	ldrh	r2, [r1, #12]
 800d60a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d60e:	4605      	mov	r5, r0
 800d610:	0710      	lsls	r0, r2, #28
 800d612:	460c      	mov	r4, r1
 800d614:	d458      	bmi.n	800d6c8 <__sflush_r+0xc0>
 800d616:	684b      	ldr	r3, [r1, #4]
 800d618:	2b00      	cmp	r3, #0
 800d61a:	dc05      	bgt.n	800d628 <__sflush_r+0x20>
 800d61c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d61e:	2b00      	cmp	r3, #0
 800d620:	dc02      	bgt.n	800d628 <__sflush_r+0x20>
 800d622:	2000      	movs	r0, #0
 800d624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d628:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d62a:	2e00      	cmp	r6, #0
 800d62c:	d0f9      	beq.n	800d622 <__sflush_r+0x1a>
 800d62e:	2300      	movs	r3, #0
 800d630:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d634:	682f      	ldr	r7, [r5, #0]
 800d636:	6a21      	ldr	r1, [r4, #32]
 800d638:	602b      	str	r3, [r5, #0]
 800d63a:	d032      	beq.n	800d6a2 <__sflush_r+0x9a>
 800d63c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d63e:	89a3      	ldrh	r3, [r4, #12]
 800d640:	075a      	lsls	r2, r3, #29
 800d642:	d505      	bpl.n	800d650 <__sflush_r+0x48>
 800d644:	6863      	ldr	r3, [r4, #4]
 800d646:	1ac0      	subs	r0, r0, r3
 800d648:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d64a:	b10b      	cbz	r3, 800d650 <__sflush_r+0x48>
 800d64c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d64e:	1ac0      	subs	r0, r0, r3
 800d650:	2300      	movs	r3, #0
 800d652:	4602      	mov	r2, r0
 800d654:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d656:	6a21      	ldr	r1, [r4, #32]
 800d658:	4628      	mov	r0, r5
 800d65a:	47b0      	blx	r6
 800d65c:	1c43      	adds	r3, r0, #1
 800d65e:	89a3      	ldrh	r3, [r4, #12]
 800d660:	d106      	bne.n	800d670 <__sflush_r+0x68>
 800d662:	6829      	ldr	r1, [r5, #0]
 800d664:	291d      	cmp	r1, #29
 800d666:	d848      	bhi.n	800d6fa <__sflush_r+0xf2>
 800d668:	4a29      	ldr	r2, [pc, #164]	; (800d710 <__sflush_r+0x108>)
 800d66a:	40ca      	lsrs	r2, r1
 800d66c:	07d6      	lsls	r6, r2, #31
 800d66e:	d544      	bpl.n	800d6fa <__sflush_r+0xf2>
 800d670:	2200      	movs	r2, #0
 800d672:	6062      	str	r2, [r4, #4]
 800d674:	04d9      	lsls	r1, r3, #19
 800d676:	6922      	ldr	r2, [r4, #16]
 800d678:	6022      	str	r2, [r4, #0]
 800d67a:	d504      	bpl.n	800d686 <__sflush_r+0x7e>
 800d67c:	1c42      	adds	r2, r0, #1
 800d67e:	d101      	bne.n	800d684 <__sflush_r+0x7c>
 800d680:	682b      	ldr	r3, [r5, #0]
 800d682:	b903      	cbnz	r3, 800d686 <__sflush_r+0x7e>
 800d684:	6560      	str	r0, [r4, #84]	; 0x54
 800d686:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d688:	602f      	str	r7, [r5, #0]
 800d68a:	2900      	cmp	r1, #0
 800d68c:	d0c9      	beq.n	800d622 <__sflush_r+0x1a>
 800d68e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d692:	4299      	cmp	r1, r3
 800d694:	d002      	beq.n	800d69c <__sflush_r+0x94>
 800d696:	4628      	mov	r0, r5
 800d698:	f000 fc9e 	bl	800dfd8 <_free_r>
 800d69c:	2000      	movs	r0, #0
 800d69e:	6360      	str	r0, [r4, #52]	; 0x34
 800d6a0:	e7c0      	b.n	800d624 <__sflush_r+0x1c>
 800d6a2:	2301      	movs	r3, #1
 800d6a4:	4628      	mov	r0, r5
 800d6a6:	47b0      	blx	r6
 800d6a8:	1c41      	adds	r1, r0, #1
 800d6aa:	d1c8      	bne.n	800d63e <__sflush_r+0x36>
 800d6ac:	682b      	ldr	r3, [r5, #0]
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d0c5      	beq.n	800d63e <__sflush_r+0x36>
 800d6b2:	2b1d      	cmp	r3, #29
 800d6b4:	d001      	beq.n	800d6ba <__sflush_r+0xb2>
 800d6b6:	2b16      	cmp	r3, #22
 800d6b8:	d101      	bne.n	800d6be <__sflush_r+0xb6>
 800d6ba:	602f      	str	r7, [r5, #0]
 800d6bc:	e7b1      	b.n	800d622 <__sflush_r+0x1a>
 800d6be:	89a3      	ldrh	r3, [r4, #12]
 800d6c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d6c4:	81a3      	strh	r3, [r4, #12]
 800d6c6:	e7ad      	b.n	800d624 <__sflush_r+0x1c>
 800d6c8:	690f      	ldr	r7, [r1, #16]
 800d6ca:	2f00      	cmp	r7, #0
 800d6cc:	d0a9      	beq.n	800d622 <__sflush_r+0x1a>
 800d6ce:	0793      	lsls	r3, r2, #30
 800d6d0:	680e      	ldr	r6, [r1, #0]
 800d6d2:	bf08      	it	eq
 800d6d4:	694b      	ldreq	r3, [r1, #20]
 800d6d6:	600f      	str	r7, [r1, #0]
 800d6d8:	bf18      	it	ne
 800d6da:	2300      	movne	r3, #0
 800d6dc:	eba6 0807 	sub.w	r8, r6, r7
 800d6e0:	608b      	str	r3, [r1, #8]
 800d6e2:	f1b8 0f00 	cmp.w	r8, #0
 800d6e6:	dd9c      	ble.n	800d622 <__sflush_r+0x1a>
 800d6e8:	4643      	mov	r3, r8
 800d6ea:	463a      	mov	r2, r7
 800d6ec:	6a21      	ldr	r1, [r4, #32]
 800d6ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d6f0:	4628      	mov	r0, r5
 800d6f2:	47b0      	blx	r6
 800d6f4:	2800      	cmp	r0, #0
 800d6f6:	dc06      	bgt.n	800d706 <__sflush_r+0xfe>
 800d6f8:	89a3      	ldrh	r3, [r4, #12]
 800d6fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d6fe:	81a3      	strh	r3, [r4, #12]
 800d700:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d704:	e78e      	b.n	800d624 <__sflush_r+0x1c>
 800d706:	4407      	add	r7, r0
 800d708:	eba8 0800 	sub.w	r8, r8, r0
 800d70c:	e7e9      	b.n	800d6e2 <__sflush_r+0xda>
 800d70e:	bf00      	nop
 800d710:	20400001 	.word	0x20400001

0800d714 <_fflush_r>:
 800d714:	b538      	push	{r3, r4, r5, lr}
 800d716:	690b      	ldr	r3, [r1, #16]
 800d718:	4605      	mov	r5, r0
 800d71a:	460c      	mov	r4, r1
 800d71c:	b1db      	cbz	r3, 800d756 <_fflush_r+0x42>
 800d71e:	b118      	cbz	r0, 800d728 <_fflush_r+0x14>
 800d720:	6983      	ldr	r3, [r0, #24]
 800d722:	b90b      	cbnz	r3, 800d728 <_fflush_r+0x14>
 800d724:	f000 f860 	bl	800d7e8 <__sinit>
 800d728:	4b0c      	ldr	r3, [pc, #48]	; (800d75c <_fflush_r+0x48>)
 800d72a:	429c      	cmp	r4, r3
 800d72c:	d109      	bne.n	800d742 <_fflush_r+0x2e>
 800d72e:	686c      	ldr	r4, [r5, #4]
 800d730:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d734:	b17b      	cbz	r3, 800d756 <_fflush_r+0x42>
 800d736:	4621      	mov	r1, r4
 800d738:	4628      	mov	r0, r5
 800d73a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d73e:	f7ff bf63 	b.w	800d608 <__sflush_r>
 800d742:	4b07      	ldr	r3, [pc, #28]	; (800d760 <_fflush_r+0x4c>)
 800d744:	429c      	cmp	r4, r3
 800d746:	d101      	bne.n	800d74c <_fflush_r+0x38>
 800d748:	68ac      	ldr	r4, [r5, #8]
 800d74a:	e7f1      	b.n	800d730 <_fflush_r+0x1c>
 800d74c:	4b05      	ldr	r3, [pc, #20]	; (800d764 <_fflush_r+0x50>)
 800d74e:	429c      	cmp	r4, r3
 800d750:	bf08      	it	eq
 800d752:	68ec      	ldreq	r4, [r5, #12]
 800d754:	e7ec      	b.n	800d730 <_fflush_r+0x1c>
 800d756:	2000      	movs	r0, #0
 800d758:	bd38      	pop	{r3, r4, r5, pc}
 800d75a:	bf00      	nop
 800d75c:	0800ed68 	.word	0x0800ed68
 800d760:	0800ed88 	.word	0x0800ed88
 800d764:	0800ed48 	.word	0x0800ed48

0800d768 <std>:
 800d768:	2300      	movs	r3, #0
 800d76a:	b510      	push	{r4, lr}
 800d76c:	4604      	mov	r4, r0
 800d76e:	e9c0 3300 	strd	r3, r3, [r0]
 800d772:	6083      	str	r3, [r0, #8]
 800d774:	8181      	strh	r1, [r0, #12]
 800d776:	6643      	str	r3, [r0, #100]	; 0x64
 800d778:	81c2      	strh	r2, [r0, #14]
 800d77a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d77e:	6183      	str	r3, [r0, #24]
 800d780:	4619      	mov	r1, r3
 800d782:	2208      	movs	r2, #8
 800d784:	305c      	adds	r0, #92	; 0x5c
 800d786:	f7fe fb2d 	bl	800bde4 <memset>
 800d78a:	4b05      	ldr	r3, [pc, #20]	; (800d7a0 <std+0x38>)
 800d78c:	6263      	str	r3, [r4, #36]	; 0x24
 800d78e:	4b05      	ldr	r3, [pc, #20]	; (800d7a4 <std+0x3c>)
 800d790:	62a3      	str	r3, [r4, #40]	; 0x28
 800d792:	4b05      	ldr	r3, [pc, #20]	; (800d7a8 <std+0x40>)
 800d794:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d796:	4b05      	ldr	r3, [pc, #20]	; (800d7ac <std+0x44>)
 800d798:	6224      	str	r4, [r4, #32]
 800d79a:	6323      	str	r3, [r4, #48]	; 0x30
 800d79c:	bd10      	pop	{r4, pc}
 800d79e:	bf00      	nop
 800d7a0:	0800e3ed 	.word	0x0800e3ed
 800d7a4:	0800e40f 	.word	0x0800e40f
 800d7a8:	0800e447 	.word	0x0800e447
 800d7ac:	0800e46b 	.word	0x0800e46b

0800d7b0 <_cleanup_r>:
 800d7b0:	4901      	ldr	r1, [pc, #4]	; (800d7b8 <_cleanup_r+0x8>)
 800d7b2:	f000 b885 	b.w	800d8c0 <_fwalk_reent>
 800d7b6:	bf00      	nop
 800d7b8:	0800d715 	.word	0x0800d715

0800d7bc <__sfmoreglue>:
 800d7bc:	b570      	push	{r4, r5, r6, lr}
 800d7be:	1e4a      	subs	r2, r1, #1
 800d7c0:	2568      	movs	r5, #104	; 0x68
 800d7c2:	4355      	muls	r5, r2
 800d7c4:	460e      	mov	r6, r1
 800d7c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d7ca:	f000 fc53 	bl	800e074 <_malloc_r>
 800d7ce:	4604      	mov	r4, r0
 800d7d0:	b140      	cbz	r0, 800d7e4 <__sfmoreglue+0x28>
 800d7d2:	2100      	movs	r1, #0
 800d7d4:	e9c0 1600 	strd	r1, r6, [r0]
 800d7d8:	300c      	adds	r0, #12
 800d7da:	60a0      	str	r0, [r4, #8]
 800d7dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d7e0:	f7fe fb00 	bl	800bde4 <memset>
 800d7e4:	4620      	mov	r0, r4
 800d7e6:	bd70      	pop	{r4, r5, r6, pc}

0800d7e8 <__sinit>:
 800d7e8:	6983      	ldr	r3, [r0, #24]
 800d7ea:	b510      	push	{r4, lr}
 800d7ec:	4604      	mov	r4, r0
 800d7ee:	bb33      	cbnz	r3, 800d83e <__sinit+0x56>
 800d7f0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800d7f4:	6503      	str	r3, [r0, #80]	; 0x50
 800d7f6:	4b12      	ldr	r3, [pc, #72]	; (800d840 <__sinit+0x58>)
 800d7f8:	4a12      	ldr	r2, [pc, #72]	; (800d844 <__sinit+0x5c>)
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	6282      	str	r2, [r0, #40]	; 0x28
 800d7fe:	4298      	cmp	r0, r3
 800d800:	bf04      	itt	eq
 800d802:	2301      	moveq	r3, #1
 800d804:	6183      	streq	r3, [r0, #24]
 800d806:	f000 f81f 	bl	800d848 <__sfp>
 800d80a:	6060      	str	r0, [r4, #4]
 800d80c:	4620      	mov	r0, r4
 800d80e:	f000 f81b 	bl	800d848 <__sfp>
 800d812:	60a0      	str	r0, [r4, #8]
 800d814:	4620      	mov	r0, r4
 800d816:	f000 f817 	bl	800d848 <__sfp>
 800d81a:	2200      	movs	r2, #0
 800d81c:	60e0      	str	r0, [r4, #12]
 800d81e:	2104      	movs	r1, #4
 800d820:	6860      	ldr	r0, [r4, #4]
 800d822:	f7ff ffa1 	bl	800d768 <std>
 800d826:	2201      	movs	r2, #1
 800d828:	2109      	movs	r1, #9
 800d82a:	68a0      	ldr	r0, [r4, #8]
 800d82c:	f7ff ff9c 	bl	800d768 <std>
 800d830:	2202      	movs	r2, #2
 800d832:	2112      	movs	r1, #18
 800d834:	68e0      	ldr	r0, [r4, #12]
 800d836:	f7ff ff97 	bl	800d768 <std>
 800d83a:	2301      	movs	r3, #1
 800d83c:	61a3      	str	r3, [r4, #24]
 800d83e:	bd10      	pop	{r4, pc}
 800d840:	0800ed00 	.word	0x0800ed00
 800d844:	0800d7b1 	.word	0x0800d7b1

0800d848 <__sfp>:
 800d848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d84a:	4b1b      	ldr	r3, [pc, #108]	; (800d8b8 <__sfp+0x70>)
 800d84c:	681e      	ldr	r6, [r3, #0]
 800d84e:	69b3      	ldr	r3, [r6, #24]
 800d850:	4607      	mov	r7, r0
 800d852:	b913      	cbnz	r3, 800d85a <__sfp+0x12>
 800d854:	4630      	mov	r0, r6
 800d856:	f7ff ffc7 	bl	800d7e8 <__sinit>
 800d85a:	3648      	adds	r6, #72	; 0x48
 800d85c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d860:	3b01      	subs	r3, #1
 800d862:	d503      	bpl.n	800d86c <__sfp+0x24>
 800d864:	6833      	ldr	r3, [r6, #0]
 800d866:	b133      	cbz	r3, 800d876 <__sfp+0x2e>
 800d868:	6836      	ldr	r6, [r6, #0]
 800d86a:	e7f7      	b.n	800d85c <__sfp+0x14>
 800d86c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d870:	b16d      	cbz	r5, 800d88e <__sfp+0x46>
 800d872:	3468      	adds	r4, #104	; 0x68
 800d874:	e7f4      	b.n	800d860 <__sfp+0x18>
 800d876:	2104      	movs	r1, #4
 800d878:	4638      	mov	r0, r7
 800d87a:	f7ff ff9f 	bl	800d7bc <__sfmoreglue>
 800d87e:	6030      	str	r0, [r6, #0]
 800d880:	2800      	cmp	r0, #0
 800d882:	d1f1      	bne.n	800d868 <__sfp+0x20>
 800d884:	230c      	movs	r3, #12
 800d886:	603b      	str	r3, [r7, #0]
 800d888:	4604      	mov	r4, r0
 800d88a:	4620      	mov	r0, r4
 800d88c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d88e:	4b0b      	ldr	r3, [pc, #44]	; (800d8bc <__sfp+0x74>)
 800d890:	6665      	str	r5, [r4, #100]	; 0x64
 800d892:	e9c4 5500 	strd	r5, r5, [r4]
 800d896:	60a5      	str	r5, [r4, #8]
 800d898:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800d89c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800d8a0:	2208      	movs	r2, #8
 800d8a2:	4629      	mov	r1, r5
 800d8a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d8a8:	f7fe fa9c 	bl	800bde4 <memset>
 800d8ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d8b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d8b4:	e7e9      	b.n	800d88a <__sfp+0x42>
 800d8b6:	bf00      	nop
 800d8b8:	0800ed00 	.word	0x0800ed00
 800d8bc:	ffff0001 	.word	0xffff0001

0800d8c0 <_fwalk_reent>:
 800d8c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d8c4:	4680      	mov	r8, r0
 800d8c6:	4689      	mov	r9, r1
 800d8c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d8cc:	2600      	movs	r6, #0
 800d8ce:	b914      	cbnz	r4, 800d8d6 <_fwalk_reent+0x16>
 800d8d0:	4630      	mov	r0, r6
 800d8d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d8d6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800d8da:	3f01      	subs	r7, #1
 800d8dc:	d501      	bpl.n	800d8e2 <_fwalk_reent+0x22>
 800d8de:	6824      	ldr	r4, [r4, #0]
 800d8e0:	e7f5      	b.n	800d8ce <_fwalk_reent+0xe>
 800d8e2:	89ab      	ldrh	r3, [r5, #12]
 800d8e4:	2b01      	cmp	r3, #1
 800d8e6:	d907      	bls.n	800d8f8 <_fwalk_reent+0x38>
 800d8e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d8ec:	3301      	adds	r3, #1
 800d8ee:	d003      	beq.n	800d8f8 <_fwalk_reent+0x38>
 800d8f0:	4629      	mov	r1, r5
 800d8f2:	4640      	mov	r0, r8
 800d8f4:	47c8      	blx	r9
 800d8f6:	4306      	orrs	r6, r0
 800d8f8:	3568      	adds	r5, #104	; 0x68
 800d8fa:	e7ee      	b.n	800d8da <_fwalk_reent+0x1a>

0800d8fc <_localeconv_r>:
 800d8fc:	4b04      	ldr	r3, [pc, #16]	; (800d910 <_localeconv_r+0x14>)
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	6a18      	ldr	r0, [r3, #32]
 800d902:	4b04      	ldr	r3, [pc, #16]	; (800d914 <_localeconv_r+0x18>)
 800d904:	2800      	cmp	r0, #0
 800d906:	bf08      	it	eq
 800d908:	4618      	moveq	r0, r3
 800d90a:	30f0      	adds	r0, #240	; 0xf0
 800d90c:	4770      	bx	lr
 800d90e:	bf00      	nop
 800d910:	20001200 	.word	0x20001200
 800d914:	20001264 	.word	0x20001264

0800d918 <__swhatbuf_r>:
 800d918:	b570      	push	{r4, r5, r6, lr}
 800d91a:	460e      	mov	r6, r1
 800d91c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d920:	2900      	cmp	r1, #0
 800d922:	b096      	sub	sp, #88	; 0x58
 800d924:	4614      	mov	r4, r2
 800d926:	461d      	mov	r5, r3
 800d928:	da07      	bge.n	800d93a <__swhatbuf_r+0x22>
 800d92a:	2300      	movs	r3, #0
 800d92c:	602b      	str	r3, [r5, #0]
 800d92e:	89b3      	ldrh	r3, [r6, #12]
 800d930:	061a      	lsls	r2, r3, #24
 800d932:	d410      	bmi.n	800d956 <__swhatbuf_r+0x3e>
 800d934:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d938:	e00e      	b.n	800d958 <__swhatbuf_r+0x40>
 800d93a:	466a      	mov	r2, sp
 800d93c:	f000 fdbc 	bl	800e4b8 <_fstat_r>
 800d940:	2800      	cmp	r0, #0
 800d942:	dbf2      	blt.n	800d92a <__swhatbuf_r+0x12>
 800d944:	9a01      	ldr	r2, [sp, #4]
 800d946:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d94a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d94e:	425a      	negs	r2, r3
 800d950:	415a      	adcs	r2, r3
 800d952:	602a      	str	r2, [r5, #0]
 800d954:	e7ee      	b.n	800d934 <__swhatbuf_r+0x1c>
 800d956:	2340      	movs	r3, #64	; 0x40
 800d958:	2000      	movs	r0, #0
 800d95a:	6023      	str	r3, [r4, #0]
 800d95c:	b016      	add	sp, #88	; 0x58
 800d95e:	bd70      	pop	{r4, r5, r6, pc}

0800d960 <__smakebuf_r>:
 800d960:	898b      	ldrh	r3, [r1, #12]
 800d962:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d964:	079d      	lsls	r5, r3, #30
 800d966:	4606      	mov	r6, r0
 800d968:	460c      	mov	r4, r1
 800d96a:	d507      	bpl.n	800d97c <__smakebuf_r+0x1c>
 800d96c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d970:	6023      	str	r3, [r4, #0]
 800d972:	6123      	str	r3, [r4, #16]
 800d974:	2301      	movs	r3, #1
 800d976:	6163      	str	r3, [r4, #20]
 800d978:	b002      	add	sp, #8
 800d97a:	bd70      	pop	{r4, r5, r6, pc}
 800d97c:	ab01      	add	r3, sp, #4
 800d97e:	466a      	mov	r2, sp
 800d980:	f7ff ffca 	bl	800d918 <__swhatbuf_r>
 800d984:	9900      	ldr	r1, [sp, #0]
 800d986:	4605      	mov	r5, r0
 800d988:	4630      	mov	r0, r6
 800d98a:	f000 fb73 	bl	800e074 <_malloc_r>
 800d98e:	b948      	cbnz	r0, 800d9a4 <__smakebuf_r+0x44>
 800d990:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d994:	059a      	lsls	r2, r3, #22
 800d996:	d4ef      	bmi.n	800d978 <__smakebuf_r+0x18>
 800d998:	f023 0303 	bic.w	r3, r3, #3
 800d99c:	f043 0302 	orr.w	r3, r3, #2
 800d9a0:	81a3      	strh	r3, [r4, #12]
 800d9a2:	e7e3      	b.n	800d96c <__smakebuf_r+0xc>
 800d9a4:	4b0d      	ldr	r3, [pc, #52]	; (800d9dc <__smakebuf_r+0x7c>)
 800d9a6:	62b3      	str	r3, [r6, #40]	; 0x28
 800d9a8:	89a3      	ldrh	r3, [r4, #12]
 800d9aa:	6020      	str	r0, [r4, #0]
 800d9ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d9b0:	81a3      	strh	r3, [r4, #12]
 800d9b2:	9b00      	ldr	r3, [sp, #0]
 800d9b4:	6163      	str	r3, [r4, #20]
 800d9b6:	9b01      	ldr	r3, [sp, #4]
 800d9b8:	6120      	str	r0, [r4, #16]
 800d9ba:	b15b      	cbz	r3, 800d9d4 <__smakebuf_r+0x74>
 800d9bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d9c0:	4630      	mov	r0, r6
 800d9c2:	f000 fd8b 	bl	800e4dc <_isatty_r>
 800d9c6:	b128      	cbz	r0, 800d9d4 <__smakebuf_r+0x74>
 800d9c8:	89a3      	ldrh	r3, [r4, #12]
 800d9ca:	f023 0303 	bic.w	r3, r3, #3
 800d9ce:	f043 0301 	orr.w	r3, r3, #1
 800d9d2:	81a3      	strh	r3, [r4, #12]
 800d9d4:	89a3      	ldrh	r3, [r4, #12]
 800d9d6:	431d      	orrs	r5, r3
 800d9d8:	81a5      	strh	r5, [r4, #12]
 800d9da:	e7cd      	b.n	800d978 <__smakebuf_r+0x18>
 800d9dc:	0800d7b1 	.word	0x0800d7b1

0800d9e0 <malloc>:
 800d9e0:	4b02      	ldr	r3, [pc, #8]	; (800d9ec <malloc+0xc>)
 800d9e2:	4601      	mov	r1, r0
 800d9e4:	6818      	ldr	r0, [r3, #0]
 800d9e6:	f000 bb45 	b.w	800e074 <_malloc_r>
 800d9ea:	bf00      	nop
 800d9ec:	20001200 	.word	0x20001200

0800d9f0 <memcpy>:
 800d9f0:	b510      	push	{r4, lr}
 800d9f2:	1e43      	subs	r3, r0, #1
 800d9f4:	440a      	add	r2, r1
 800d9f6:	4291      	cmp	r1, r2
 800d9f8:	d100      	bne.n	800d9fc <memcpy+0xc>
 800d9fa:	bd10      	pop	{r4, pc}
 800d9fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800da00:	f803 4f01 	strb.w	r4, [r3, #1]!
 800da04:	e7f7      	b.n	800d9f6 <memcpy+0x6>

0800da06 <_Balloc>:
 800da06:	b570      	push	{r4, r5, r6, lr}
 800da08:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800da0a:	4604      	mov	r4, r0
 800da0c:	460e      	mov	r6, r1
 800da0e:	b93d      	cbnz	r5, 800da20 <_Balloc+0x1a>
 800da10:	2010      	movs	r0, #16
 800da12:	f7ff ffe5 	bl	800d9e0 <malloc>
 800da16:	6260      	str	r0, [r4, #36]	; 0x24
 800da18:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800da1c:	6005      	str	r5, [r0, #0]
 800da1e:	60c5      	str	r5, [r0, #12]
 800da20:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800da22:	68eb      	ldr	r3, [r5, #12]
 800da24:	b183      	cbz	r3, 800da48 <_Balloc+0x42>
 800da26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800da28:	68db      	ldr	r3, [r3, #12]
 800da2a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800da2e:	b9b8      	cbnz	r0, 800da60 <_Balloc+0x5a>
 800da30:	2101      	movs	r1, #1
 800da32:	fa01 f506 	lsl.w	r5, r1, r6
 800da36:	1d6a      	adds	r2, r5, #5
 800da38:	0092      	lsls	r2, r2, #2
 800da3a:	4620      	mov	r0, r4
 800da3c:	f000 fabe 	bl	800dfbc <_calloc_r>
 800da40:	b160      	cbz	r0, 800da5c <_Balloc+0x56>
 800da42:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800da46:	e00e      	b.n	800da66 <_Balloc+0x60>
 800da48:	2221      	movs	r2, #33	; 0x21
 800da4a:	2104      	movs	r1, #4
 800da4c:	4620      	mov	r0, r4
 800da4e:	f000 fab5 	bl	800dfbc <_calloc_r>
 800da52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800da54:	60e8      	str	r0, [r5, #12]
 800da56:	68db      	ldr	r3, [r3, #12]
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d1e4      	bne.n	800da26 <_Balloc+0x20>
 800da5c:	2000      	movs	r0, #0
 800da5e:	bd70      	pop	{r4, r5, r6, pc}
 800da60:	6802      	ldr	r2, [r0, #0]
 800da62:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800da66:	2300      	movs	r3, #0
 800da68:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800da6c:	e7f7      	b.n	800da5e <_Balloc+0x58>

0800da6e <_Bfree>:
 800da6e:	b570      	push	{r4, r5, r6, lr}
 800da70:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800da72:	4606      	mov	r6, r0
 800da74:	460d      	mov	r5, r1
 800da76:	b93c      	cbnz	r4, 800da88 <_Bfree+0x1a>
 800da78:	2010      	movs	r0, #16
 800da7a:	f7ff ffb1 	bl	800d9e0 <malloc>
 800da7e:	6270      	str	r0, [r6, #36]	; 0x24
 800da80:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800da84:	6004      	str	r4, [r0, #0]
 800da86:	60c4      	str	r4, [r0, #12]
 800da88:	b13d      	cbz	r5, 800da9a <_Bfree+0x2c>
 800da8a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800da8c:	686a      	ldr	r2, [r5, #4]
 800da8e:	68db      	ldr	r3, [r3, #12]
 800da90:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800da94:	6029      	str	r1, [r5, #0]
 800da96:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800da9a:	bd70      	pop	{r4, r5, r6, pc}

0800da9c <__multadd>:
 800da9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800daa0:	690d      	ldr	r5, [r1, #16]
 800daa2:	461f      	mov	r7, r3
 800daa4:	4606      	mov	r6, r0
 800daa6:	460c      	mov	r4, r1
 800daa8:	f101 0c14 	add.w	ip, r1, #20
 800daac:	2300      	movs	r3, #0
 800daae:	f8dc 0000 	ldr.w	r0, [ip]
 800dab2:	b281      	uxth	r1, r0
 800dab4:	fb02 7101 	mla	r1, r2, r1, r7
 800dab8:	0c0f      	lsrs	r7, r1, #16
 800daba:	0c00      	lsrs	r0, r0, #16
 800dabc:	fb02 7000 	mla	r0, r2, r0, r7
 800dac0:	b289      	uxth	r1, r1
 800dac2:	3301      	adds	r3, #1
 800dac4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800dac8:	429d      	cmp	r5, r3
 800daca:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800dace:	f84c 1b04 	str.w	r1, [ip], #4
 800dad2:	dcec      	bgt.n	800daae <__multadd+0x12>
 800dad4:	b1d7      	cbz	r7, 800db0c <__multadd+0x70>
 800dad6:	68a3      	ldr	r3, [r4, #8]
 800dad8:	42ab      	cmp	r3, r5
 800dada:	dc12      	bgt.n	800db02 <__multadd+0x66>
 800dadc:	6861      	ldr	r1, [r4, #4]
 800dade:	4630      	mov	r0, r6
 800dae0:	3101      	adds	r1, #1
 800dae2:	f7ff ff90 	bl	800da06 <_Balloc>
 800dae6:	6922      	ldr	r2, [r4, #16]
 800dae8:	3202      	adds	r2, #2
 800daea:	f104 010c 	add.w	r1, r4, #12
 800daee:	4680      	mov	r8, r0
 800daf0:	0092      	lsls	r2, r2, #2
 800daf2:	300c      	adds	r0, #12
 800daf4:	f7ff ff7c 	bl	800d9f0 <memcpy>
 800daf8:	4621      	mov	r1, r4
 800dafa:	4630      	mov	r0, r6
 800dafc:	f7ff ffb7 	bl	800da6e <_Bfree>
 800db00:	4644      	mov	r4, r8
 800db02:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800db06:	3501      	adds	r5, #1
 800db08:	615f      	str	r7, [r3, #20]
 800db0a:	6125      	str	r5, [r4, #16]
 800db0c:	4620      	mov	r0, r4
 800db0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800db12 <__hi0bits>:
 800db12:	0c02      	lsrs	r2, r0, #16
 800db14:	0412      	lsls	r2, r2, #16
 800db16:	4603      	mov	r3, r0
 800db18:	b9b2      	cbnz	r2, 800db48 <__hi0bits+0x36>
 800db1a:	0403      	lsls	r3, r0, #16
 800db1c:	2010      	movs	r0, #16
 800db1e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800db22:	bf04      	itt	eq
 800db24:	021b      	lsleq	r3, r3, #8
 800db26:	3008      	addeq	r0, #8
 800db28:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800db2c:	bf04      	itt	eq
 800db2e:	011b      	lsleq	r3, r3, #4
 800db30:	3004      	addeq	r0, #4
 800db32:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800db36:	bf04      	itt	eq
 800db38:	009b      	lsleq	r3, r3, #2
 800db3a:	3002      	addeq	r0, #2
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	db06      	blt.n	800db4e <__hi0bits+0x3c>
 800db40:	005b      	lsls	r3, r3, #1
 800db42:	d503      	bpl.n	800db4c <__hi0bits+0x3a>
 800db44:	3001      	adds	r0, #1
 800db46:	4770      	bx	lr
 800db48:	2000      	movs	r0, #0
 800db4a:	e7e8      	b.n	800db1e <__hi0bits+0xc>
 800db4c:	2020      	movs	r0, #32
 800db4e:	4770      	bx	lr

0800db50 <__lo0bits>:
 800db50:	6803      	ldr	r3, [r0, #0]
 800db52:	f013 0207 	ands.w	r2, r3, #7
 800db56:	4601      	mov	r1, r0
 800db58:	d00b      	beq.n	800db72 <__lo0bits+0x22>
 800db5a:	07da      	lsls	r2, r3, #31
 800db5c:	d423      	bmi.n	800dba6 <__lo0bits+0x56>
 800db5e:	0798      	lsls	r0, r3, #30
 800db60:	bf49      	itett	mi
 800db62:	085b      	lsrmi	r3, r3, #1
 800db64:	089b      	lsrpl	r3, r3, #2
 800db66:	2001      	movmi	r0, #1
 800db68:	600b      	strmi	r3, [r1, #0]
 800db6a:	bf5c      	itt	pl
 800db6c:	600b      	strpl	r3, [r1, #0]
 800db6e:	2002      	movpl	r0, #2
 800db70:	4770      	bx	lr
 800db72:	b298      	uxth	r0, r3
 800db74:	b9a8      	cbnz	r0, 800dba2 <__lo0bits+0x52>
 800db76:	0c1b      	lsrs	r3, r3, #16
 800db78:	2010      	movs	r0, #16
 800db7a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800db7e:	bf04      	itt	eq
 800db80:	0a1b      	lsreq	r3, r3, #8
 800db82:	3008      	addeq	r0, #8
 800db84:	071a      	lsls	r2, r3, #28
 800db86:	bf04      	itt	eq
 800db88:	091b      	lsreq	r3, r3, #4
 800db8a:	3004      	addeq	r0, #4
 800db8c:	079a      	lsls	r2, r3, #30
 800db8e:	bf04      	itt	eq
 800db90:	089b      	lsreq	r3, r3, #2
 800db92:	3002      	addeq	r0, #2
 800db94:	07da      	lsls	r2, r3, #31
 800db96:	d402      	bmi.n	800db9e <__lo0bits+0x4e>
 800db98:	085b      	lsrs	r3, r3, #1
 800db9a:	d006      	beq.n	800dbaa <__lo0bits+0x5a>
 800db9c:	3001      	adds	r0, #1
 800db9e:	600b      	str	r3, [r1, #0]
 800dba0:	4770      	bx	lr
 800dba2:	4610      	mov	r0, r2
 800dba4:	e7e9      	b.n	800db7a <__lo0bits+0x2a>
 800dba6:	2000      	movs	r0, #0
 800dba8:	4770      	bx	lr
 800dbaa:	2020      	movs	r0, #32
 800dbac:	4770      	bx	lr

0800dbae <__i2b>:
 800dbae:	b510      	push	{r4, lr}
 800dbb0:	460c      	mov	r4, r1
 800dbb2:	2101      	movs	r1, #1
 800dbb4:	f7ff ff27 	bl	800da06 <_Balloc>
 800dbb8:	2201      	movs	r2, #1
 800dbba:	6144      	str	r4, [r0, #20]
 800dbbc:	6102      	str	r2, [r0, #16]
 800dbbe:	bd10      	pop	{r4, pc}

0800dbc0 <__multiply>:
 800dbc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbc4:	4614      	mov	r4, r2
 800dbc6:	690a      	ldr	r2, [r1, #16]
 800dbc8:	6923      	ldr	r3, [r4, #16]
 800dbca:	429a      	cmp	r2, r3
 800dbcc:	bfb8      	it	lt
 800dbce:	460b      	movlt	r3, r1
 800dbd0:	4688      	mov	r8, r1
 800dbd2:	bfbc      	itt	lt
 800dbd4:	46a0      	movlt	r8, r4
 800dbd6:	461c      	movlt	r4, r3
 800dbd8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800dbdc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800dbe0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dbe4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800dbe8:	eb07 0609 	add.w	r6, r7, r9
 800dbec:	42b3      	cmp	r3, r6
 800dbee:	bfb8      	it	lt
 800dbf0:	3101      	addlt	r1, #1
 800dbf2:	f7ff ff08 	bl	800da06 <_Balloc>
 800dbf6:	f100 0514 	add.w	r5, r0, #20
 800dbfa:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800dbfe:	462b      	mov	r3, r5
 800dc00:	2200      	movs	r2, #0
 800dc02:	4573      	cmp	r3, lr
 800dc04:	d316      	bcc.n	800dc34 <__multiply+0x74>
 800dc06:	f104 0214 	add.w	r2, r4, #20
 800dc0a:	f108 0114 	add.w	r1, r8, #20
 800dc0e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800dc12:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800dc16:	9300      	str	r3, [sp, #0]
 800dc18:	9b00      	ldr	r3, [sp, #0]
 800dc1a:	9201      	str	r2, [sp, #4]
 800dc1c:	4293      	cmp	r3, r2
 800dc1e:	d80c      	bhi.n	800dc3a <__multiply+0x7a>
 800dc20:	2e00      	cmp	r6, #0
 800dc22:	dd03      	ble.n	800dc2c <__multiply+0x6c>
 800dc24:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d05d      	beq.n	800dce8 <__multiply+0x128>
 800dc2c:	6106      	str	r6, [r0, #16]
 800dc2e:	b003      	add	sp, #12
 800dc30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc34:	f843 2b04 	str.w	r2, [r3], #4
 800dc38:	e7e3      	b.n	800dc02 <__multiply+0x42>
 800dc3a:	f8b2 b000 	ldrh.w	fp, [r2]
 800dc3e:	f1bb 0f00 	cmp.w	fp, #0
 800dc42:	d023      	beq.n	800dc8c <__multiply+0xcc>
 800dc44:	4689      	mov	r9, r1
 800dc46:	46ac      	mov	ip, r5
 800dc48:	f04f 0800 	mov.w	r8, #0
 800dc4c:	f859 4b04 	ldr.w	r4, [r9], #4
 800dc50:	f8dc a000 	ldr.w	sl, [ip]
 800dc54:	b2a3      	uxth	r3, r4
 800dc56:	fa1f fa8a 	uxth.w	sl, sl
 800dc5a:	fb0b a303 	mla	r3, fp, r3, sl
 800dc5e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800dc62:	f8dc 4000 	ldr.w	r4, [ip]
 800dc66:	4443      	add	r3, r8
 800dc68:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800dc6c:	fb0b 840a 	mla	r4, fp, sl, r8
 800dc70:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800dc74:	46e2      	mov	sl, ip
 800dc76:	b29b      	uxth	r3, r3
 800dc78:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800dc7c:	454f      	cmp	r7, r9
 800dc7e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800dc82:	f84a 3b04 	str.w	r3, [sl], #4
 800dc86:	d82b      	bhi.n	800dce0 <__multiply+0x120>
 800dc88:	f8cc 8004 	str.w	r8, [ip, #4]
 800dc8c:	9b01      	ldr	r3, [sp, #4]
 800dc8e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800dc92:	3204      	adds	r2, #4
 800dc94:	f1ba 0f00 	cmp.w	sl, #0
 800dc98:	d020      	beq.n	800dcdc <__multiply+0x11c>
 800dc9a:	682b      	ldr	r3, [r5, #0]
 800dc9c:	4689      	mov	r9, r1
 800dc9e:	46a8      	mov	r8, r5
 800dca0:	f04f 0b00 	mov.w	fp, #0
 800dca4:	f8b9 c000 	ldrh.w	ip, [r9]
 800dca8:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800dcac:	fb0a 440c 	mla	r4, sl, ip, r4
 800dcb0:	445c      	add	r4, fp
 800dcb2:	46c4      	mov	ip, r8
 800dcb4:	b29b      	uxth	r3, r3
 800dcb6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800dcba:	f84c 3b04 	str.w	r3, [ip], #4
 800dcbe:	f859 3b04 	ldr.w	r3, [r9], #4
 800dcc2:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800dcc6:	0c1b      	lsrs	r3, r3, #16
 800dcc8:	fb0a b303 	mla	r3, sl, r3, fp
 800dccc:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800dcd0:	454f      	cmp	r7, r9
 800dcd2:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800dcd6:	d805      	bhi.n	800dce4 <__multiply+0x124>
 800dcd8:	f8c8 3004 	str.w	r3, [r8, #4]
 800dcdc:	3504      	adds	r5, #4
 800dcde:	e79b      	b.n	800dc18 <__multiply+0x58>
 800dce0:	46d4      	mov	ip, sl
 800dce2:	e7b3      	b.n	800dc4c <__multiply+0x8c>
 800dce4:	46e0      	mov	r8, ip
 800dce6:	e7dd      	b.n	800dca4 <__multiply+0xe4>
 800dce8:	3e01      	subs	r6, #1
 800dcea:	e799      	b.n	800dc20 <__multiply+0x60>

0800dcec <__pow5mult>:
 800dcec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dcf0:	4615      	mov	r5, r2
 800dcf2:	f012 0203 	ands.w	r2, r2, #3
 800dcf6:	4606      	mov	r6, r0
 800dcf8:	460f      	mov	r7, r1
 800dcfa:	d007      	beq.n	800dd0c <__pow5mult+0x20>
 800dcfc:	3a01      	subs	r2, #1
 800dcfe:	4c21      	ldr	r4, [pc, #132]	; (800dd84 <__pow5mult+0x98>)
 800dd00:	2300      	movs	r3, #0
 800dd02:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800dd06:	f7ff fec9 	bl	800da9c <__multadd>
 800dd0a:	4607      	mov	r7, r0
 800dd0c:	10ad      	asrs	r5, r5, #2
 800dd0e:	d035      	beq.n	800dd7c <__pow5mult+0x90>
 800dd10:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800dd12:	b93c      	cbnz	r4, 800dd24 <__pow5mult+0x38>
 800dd14:	2010      	movs	r0, #16
 800dd16:	f7ff fe63 	bl	800d9e0 <malloc>
 800dd1a:	6270      	str	r0, [r6, #36]	; 0x24
 800dd1c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800dd20:	6004      	str	r4, [r0, #0]
 800dd22:	60c4      	str	r4, [r0, #12]
 800dd24:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800dd28:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800dd2c:	b94c      	cbnz	r4, 800dd42 <__pow5mult+0x56>
 800dd2e:	f240 2171 	movw	r1, #625	; 0x271
 800dd32:	4630      	mov	r0, r6
 800dd34:	f7ff ff3b 	bl	800dbae <__i2b>
 800dd38:	2300      	movs	r3, #0
 800dd3a:	f8c8 0008 	str.w	r0, [r8, #8]
 800dd3e:	4604      	mov	r4, r0
 800dd40:	6003      	str	r3, [r0, #0]
 800dd42:	f04f 0800 	mov.w	r8, #0
 800dd46:	07eb      	lsls	r3, r5, #31
 800dd48:	d50a      	bpl.n	800dd60 <__pow5mult+0x74>
 800dd4a:	4639      	mov	r1, r7
 800dd4c:	4622      	mov	r2, r4
 800dd4e:	4630      	mov	r0, r6
 800dd50:	f7ff ff36 	bl	800dbc0 <__multiply>
 800dd54:	4639      	mov	r1, r7
 800dd56:	4681      	mov	r9, r0
 800dd58:	4630      	mov	r0, r6
 800dd5a:	f7ff fe88 	bl	800da6e <_Bfree>
 800dd5e:	464f      	mov	r7, r9
 800dd60:	106d      	asrs	r5, r5, #1
 800dd62:	d00b      	beq.n	800dd7c <__pow5mult+0x90>
 800dd64:	6820      	ldr	r0, [r4, #0]
 800dd66:	b938      	cbnz	r0, 800dd78 <__pow5mult+0x8c>
 800dd68:	4622      	mov	r2, r4
 800dd6a:	4621      	mov	r1, r4
 800dd6c:	4630      	mov	r0, r6
 800dd6e:	f7ff ff27 	bl	800dbc0 <__multiply>
 800dd72:	6020      	str	r0, [r4, #0]
 800dd74:	f8c0 8000 	str.w	r8, [r0]
 800dd78:	4604      	mov	r4, r0
 800dd7a:	e7e4      	b.n	800dd46 <__pow5mult+0x5a>
 800dd7c:	4638      	mov	r0, r7
 800dd7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd82:	bf00      	nop
 800dd84:	0800ee98 	.word	0x0800ee98

0800dd88 <__lshift>:
 800dd88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd8c:	460c      	mov	r4, r1
 800dd8e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800dd92:	6923      	ldr	r3, [r4, #16]
 800dd94:	6849      	ldr	r1, [r1, #4]
 800dd96:	eb0a 0903 	add.w	r9, sl, r3
 800dd9a:	68a3      	ldr	r3, [r4, #8]
 800dd9c:	4607      	mov	r7, r0
 800dd9e:	4616      	mov	r6, r2
 800dda0:	f109 0501 	add.w	r5, r9, #1
 800dda4:	42ab      	cmp	r3, r5
 800dda6:	db32      	blt.n	800de0e <__lshift+0x86>
 800dda8:	4638      	mov	r0, r7
 800ddaa:	f7ff fe2c 	bl	800da06 <_Balloc>
 800ddae:	2300      	movs	r3, #0
 800ddb0:	4680      	mov	r8, r0
 800ddb2:	f100 0114 	add.w	r1, r0, #20
 800ddb6:	461a      	mov	r2, r3
 800ddb8:	4553      	cmp	r3, sl
 800ddba:	db2b      	blt.n	800de14 <__lshift+0x8c>
 800ddbc:	6920      	ldr	r0, [r4, #16]
 800ddbe:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ddc2:	f104 0314 	add.w	r3, r4, #20
 800ddc6:	f016 021f 	ands.w	r2, r6, #31
 800ddca:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ddce:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ddd2:	d025      	beq.n	800de20 <__lshift+0x98>
 800ddd4:	f1c2 0e20 	rsb	lr, r2, #32
 800ddd8:	2000      	movs	r0, #0
 800ddda:	681e      	ldr	r6, [r3, #0]
 800dddc:	468a      	mov	sl, r1
 800ddde:	4096      	lsls	r6, r2
 800dde0:	4330      	orrs	r0, r6
 800dde2:	f84a 0b04 	str.w	r0, [sl], #4
 800dde6:	f853 0b04 	ldr.w	r0, [r3], #4
 800ddea:	459c      	cmp	ip, r3
 800ddec:	fa20 f00e 	lsr.w	r0, r0, lr
 800ddf0:	d814      	bhi.n	800de1c <__lshift+0x94>
 800ddf2:	6048      	str	r0, [r1, #4]
 800ddf4:	b108      	cbz	r0, 800ddfa <__lshift+0x72>
 800ddf6:	f109 0502 	add.w	r5, r9, #2
 800ddfa:	3d01      	subs	r5, #1
 800ddfc:	4638      	mov	r0, r7
 800ddfe:	f8c8 5010 	str.w	r5, [r8, #16]
 800de02:	4621      	mov	r1, r4
 800de04:	f7ff fe33 	bl	800da6e <_Bfree>
 800de08:	4640      	mov	r0, r8
 800de0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de0e:	3101      	adds	r1, #1
 800de10:	005b      	lsls	r3, r3, #1
 800de12:	e7c7      	b.n	800dda4 <__lshift+0x1c>
 800de14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800de18:	3301      	adds	r3, #1
 800de1a:	e7cd      	b.n	800ddb8 <__lshift+0x30>
 800de1c:	4651      	mov	r1, sl
 800de1e:	e7dc      	b.n	800ddda <__lshift+0x52>
 800de20:	3904      	subs	r1, #4
 800de22:	f853 2b04 	ldr.w	r2, [r3], #4
 800de26:	f841 2f04 	str.w	r2, [r1, #4]!
 800de2a:	459c      	cmp	ip, r3
 800de2c:	d8f9      	bhi.n	800de22 <__lshift+0x9a>
 800de2e:	e7e4      	b.n	800ddfa <__lshift+0x72>

0800de30 <__mcmp>:
 800de30:	6903      	ldr	r3, [r0, #16]
 800de32:	690a      	ldr	r2, [r1, #16]
 800de34:	1a9b      	subs	r3, r3, r2
 800de36:	b530      	push	{r4, r5, lr}
 800de38:	d10c      	bne.n	800de54 <__mcmp+0x24>
 800de3a:	0092      	lsls	r2, r2, #2
 800de3c:	3014      	adds	r0, #20
 800de3e:	3114      	adds	r1, #20
 800de40:	1884      	adds	r4, r0, r2
 800de42:	4411      	add	r1, r2
 800de44:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800de48:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800de4c:	4295      	cmp	r5, r2
 800de4e:	d003      	beq.n	800de58 <__mcmp+0x28>
 800de50:	d305      	bcc.n	800de5e <__mcmp+0x2e>
 800de52:	2301      	movs	r3, #1
 800de54:	4618      	mov	r0, r3
 800de56:	bd30      	pop	{r4, r5, pc}
 800de58:	42a0      	cmp	r0, r4
 800de5a:	d3f3      	bcc.n	800de44 <__mcmp+0x14>
 800de5c:	e7fa      	b.n	800de54 <__mcmp+0x24>
 800de5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800de62:	e7f7      	b.n	800de54 <__mcmp+0x24>

0800de64 <__mdiff>:
 800de64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de68:	460d      	mov	r5, r1
 800de6a:	4607      	mov	r7, r0
 800de6c:	4611      	mov	r1, r2
 800de6e:	4628      	mov	r0, r5
 800de70:	4614      	mov	r4, r2
 800de72:	f7ff ffdd 	bl	800de30 <__mcmp>
 800de76:	1e06      	subs	r6, r0, #0
 800de78:	d108      	bne.n	800de8c <__mdiff+0x28>
 800de7a:	4631      	mov	r1, r6
 800de7c:	4638      	mov	r0, r7
 800de7e:	f7ff fdc2 	bl	800da06 <_Balloc>
 800de82:	2301      	movs	r3, #1
 800de84:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800de88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de8c:	bfa4      	itt	ge
 800de8e:	4623      	movge	r3, r4
 800de90:	462c      	movge	r4, r5
 800de92:	4638      	mov	r0, r7
 800de94:	6861      	ldr	r1, [r4, #4]
 800de96:	bfa6      	itte	ge
 800de98:	461d      	movge	r5, r3
 800de9a:	2600      	movge	r6, #0
 800de9c:	2601      	movlt	r6, #1
 800de9e:	f7ff fdb2 	bl	800da06 <_Balloc>
 800dea2:	692b      	ldr	r3, [r5, #16]
 800dea4:	60c6      	str	r6, [r0, #12]
 800dea6:	6926      	ldr	r6, [r4, #16]
 800dea8:	f105 0914 	add.w	r9, r5, #20
 800deac:	f104 0214 	add.w	r2, r4, #20
 800deb0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800deb4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800deb8:	f100 0514 	add.w	r5, r0, #20
 800debc:	f04f 0e00 	mov.w	lr, #0
 800dec0:	f852 ab04 	ldr.w	sl, [r2], #4
 800dec4:	f859 4b04 	ldr.w	r4, [r9], #4
 800dec8:	fa1e f18a 	uxtah	r1, lr, sl
 800decc:	b2a3      	uxth	r3, r4
 800dece:	1ac9      	subs	r1, r1, r3
 800ded0:	0c23      	lsrs	r3, r4, #16
 800ded2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800ded6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800deda:	b289      	uxth	r1, r1
 800dedc:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800dee0:	45c8      	cmp	r8, r9
 800dee2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800dee6:	4694      	mov	ip, r2
 800dee8:	f845 3b04 	str.w	r3, [r5], #4
 800deec:	d8e8      	bhi.n	800dec0 <__mdiff+0x5c>
 800deee:	45bc      	cmp	ip, r7
 800def0:	d304      	bcc.n	800defc <__mdiff+0x98>
 800def2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800def6:	b183      	cbz	r3, 800df1a <__mdiff+0xb6>
 800def8:	6106      	str	r6, [r0, #16]
 800defa:	e7c5      	b.n	800de88 <__mdiff+0x24>
 800defc:	f85c 1b04 	ldr.w	r1, [ip], #4
 800df00:	fa1e f381 	uxtah	r3, lr, r1
 800df04:	141a      	asrs	r2, r3, #16
 800df06:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800df0a:	b29b      	uxth	r3, r3
 800df0c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800df10:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800df14:	f845 3b04 	str.w	r3, [r5], #4
 800df18:	e7e9      	b.n	800deee <__mdiff+0x8a>
 800df1a:	3e01      	subs	r6, #1
 800df1c:	e7e9      	b.n	800def2 <__mdiff+0x8e>

0800df1e <__d2b>:
 800df1e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800df22:	460e      	mov	r6, r1
 800df24:	2101      	movs	r1, #1
 800df26:	ec59 8b10 	vmov	r8, r9, d0
 800df2a:	4615      	mov	r5, r2
 800df2c:	f7ff fd6b 	bl	800da06 <_Balloc>
 800df30:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800df34:	4607      	mov	r7, r0
 800df36:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800df3a:	bb34      	cbnz	r4, 800df8a <__d2b+0x6c>
 800df3c:	9301      	str	r3, [sp, #4]
 800df3e:	f1b8 0300 	subs.w	r3, r8, #0
 800df42:	d027      	beq.n	800df94 <__d2b+0x76>
 800df44:	a802      	add	r0, sp, #8
 800df46:	f840 3d08 	str.w	r3, [r0, #-8]!
 800df4a:	f7ff fe01 	bl	800db50 <__lo0bits>
 800df4e:	9900      	ldr	r1, [sp, #0]
 800df50:	b1f0      	cbz	r0, 800df90 <__d2b+0x72>
 800df52:	9a01      	ldr	r2, [sp, #4]
 800df54:	f1c0 0320 	rsb	r3, r0, #32
 800df58:	fa02 f303 	lsl.w	r3, r2, r3
 800df5c:	430b      	orrs	r3, r1
 800df5e:	40c2      	lsrs	r2, r0
 800df60:	617b      	str	r3, [r7, #20]
 800df62:	9201      	str	r2, [sp, #4]
 800df64:	9b01      	ldr	r3, [sp, #4]
 800df66:	61bb      	str	r3, [r7, #24]
 800df68:	2b00      	cmp	r3, #0
 800df6a:	bf14      	ite	ne
 800df6c:	2102      	movne	r1, #2
 800df6e:	2101      	moveq	r1, #1
 800df70:	6139      	str	r1, [r7, #16]
 800df72:	b1c4      	cbz	r4, 800dfa6 <__d2b+0x88>
 800df74:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800df78:	4404      	add	r4, r0
 800df7a:	6034      	str	r4, [r6, #0]
 800df7c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800df80:	6028      	str	r0, [r5, #0]
 800df82:	4638      	mov	r0, r7
 800df84:	b003      	add	sp, #12
 800df86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800df8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800df8e:	e7d5      	b.n	800df3c <__d2b+0x1e>
 800df90:	6179      	str	r1, [r7, #20]
 800df92:	e7e7      	b.n	800df64 <__d2b+0x46>
 800df94:	a801      	add	r0, sp, #4
 800df96:	f7ff fddb 	bl	800db50 <__lo0bits>
 800df9a:	9b01      	ldr	r3, [sp, #4]
 800df9c:	617b      	str	r3, [r7, #20]
 800df9e:	2101      	movs	r1, #1
 800dfa0:	6139      	str	r1, [r7, #16]
 800dfa2:	3020      	adds	r0, #32
 800dfa4:	e7e5      	b.n	800df72 <__d2b+0x54>
 800dfa6:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800dfaa:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800dfae:	6030      	str	r0, [r6, #0]
 800dfb0:	6918      	ldr	r0, [r3, #16]
 800dfb2:	f7ff fdae 	bl	800db12 <__hi0bits>
 800dfb6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800dfba:	e7e1      	b.n	800df80 <__d2b+0x62>

0800dfbc <_calloc_r>:
 800dfbc:	b538      	push	{r3, r4, r5, lr}
 800dfbe:	fb02 f401 	mul.w	r4, r2, r1
 800dfc2:	4621      	mov	r1, r4
 800dfc4:	f000 f856 	bl	800e074 <_malloc_r>
 800dfc8:	4605      	mov	r5, r0
 800dfca:	b118      	cbz	r0, 800dfd4 <_calloc_r+0x18>
 800dfcc:	4622      	mov	r2, r4
 800dfce:	2100      	movs	r1, #0
 800dfd0:	f7fd ff08 	bl	800bde4 <memset>
 800dfd4:	4628      	mov	r0, r5
 800dfd6:	bd38      	pop	{r3, r4, r5, pc}

0800dfd8 <_free_r>:
 800dfd8:	b538      	push	{r3, r4, r5, lr}
 800dfda:	4605      	mov	r5, r0
 800dfdc:	2900      	cmp	r1, #0
 800dfde:	d045      	beq.n	800e06c <_free_r+0x94>
 800dfe0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dfe4:	1f0c      	subs	r4, r1, #4
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	bfb8      	it	lt
 800dfea:	18e4      	addlt	r4, r4, r3
 800dfec:	f000 fac3 	bl	800e576 <__malloc_lock>
 800dff0:	4a1f      	ldr	r2, [pc, #124]	; (800e070 <_free_r+0x98>)
 800dff2:	6813      	ldr	r3, [r2, #0]
 800dff4:	4610      	mov	r0, r2
 800dff6:	b933      	cbnz	r3, 800e006 <_free_r+0x2e>
 800dff8:	6063      	str	r3, [r4, #4]
 800dffa:	6014      	str	r4, [r2, #0]
 800dffc:	4628      	mov	r0, r5
 800dffe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e002:	f000 bab9 	b.w	800e578 <__malloc_unlock>
 800e006:	42a3      	cmp	r3, r4
 800e008:	d90c      	bls.n	800e024 <_free_r+0x4c>
 800e00a:	6821      	ldr	r1, [r4, #0]
 800e00c:	1862      	adds	r2, r4, r1
 800e00e:	4293      	cmp	r3, r2
 800e010:	bf04      	itt	eq
 800e012:	681a      	ldreq	r2, [r3, #0]
 800e014:	685b      	ldreq	r3, [r3, #4]
 800e016:	6063      	str	r3, [r4, #4]
 800e018:	bf04      	itt	eq
 800e01a:	1852      	addeq	r2, r2, r1
 800e01c:	6022      	streq	r2, [r4, #0]
 800e01e:	6004      	str	r4, [r0, #0]
 800e020:	e7ec      	b.n	800dffc <_free_r+0x24>
 800e022:	4613      	mov	r3, r2
 800e024:	685a      	ldr	r2, [r3, #4]
 800e026:	b10a      	cbz	r2, 800e02c <_free_r+0x54>
 800e028:	42a2      	cmp	r2, r4
 800e02a:	d9fa      	bls.n	800e022 <_free_r+0x4a>
 800e02c:	6819      	ldr	r1, [r3, #0]
 800e02e:	1858      	adds	r0, r3, r1
 800e030:	42a0      	cmp	r0, r4
 800e032:	d10b      	bne.n	800e04c <_free_r+0x74>
 800e034:	6820      	ldr	r0, [r4, #0]
 800e036:	4401      	add	r1, r0
 800e038:	1858      	adds	r0, r3, r1
 800e03a:	4282      	cmp	r2, r0
 800e03c:	6019      	str	r1, [r3, #0]
 800e03e:	d1dd      	bne.n	800dffc <_free_r+0x24>
 800e040:	6810      	ldr	r0, [r2, #0]
 800e042:	6852      	ldr	r2, [r2, #4]
 800e044:	605a      	str	r2, [r3, #4]
 800e046:	4401      	add	r1, r0
 800e048:	6019      	str	r1, [r3, #0]
 800e04a:	e7d7      	b.n	800dffc <_free_r+0x24>
 800e04c:	d902      	bls.n	800e054 <_free_r+0x7c>
 800e04e:	230c      	movs	r3, #12
 800e050:	602b      	str	r3, [r5, #0]
 800e052:	e7d3      	b.n	800dffc <_free_r+0x24>
 800e054:	6820      	ldr	r0, [r4, #0]
 800e056:	1821      	adds	r1, r4, r0
 800e058:	428a      	cmp	r2, r1
 800e05a:	bf04      	itt	eq
 800e05c:	6811      	ldreq	r1, [r2, #0]
 800e05e:	6852      	ldreq	r2, [r2, #4]
 800e060:	6062      	str	r2, [r4, #4]
 800e062:	bf04      	itt	eq
 800e064:	1809      	addeq	r1, r1, r0
 800e066:	6021      	streq	r1, [r4, #0]
 800e068:	605c      	str	r4, [r3, #4]
 800e06a:	e7c7      	b.n	800dffc <_free_r+0x24>
 800e06c:	bd38      	pop	{r3, r4, r5, pc}
 800e06e:	bf00      	nop
 800e070:	20001404 	.word	0x20001404

0800e074 <_malloc_r>:
 800e074:	b570      	push	{r4, r5, r6, lr}
 800e076:	1ccd      	adds	r5, r1, #3
 800e078:	f025 0503 	bic.w	r5, r5, #3
 800e07c:	3508      	adds	r5, #8
 800e07e:	2d0c      	cmp	r5, #12
 800e080:	bf38      	it	cc
 800e082:	250c      	movcc	r5, #12
 800e084:	2d00      	cmp	r5, #0
 800e086:	4606      	mov	r6, r0
 800e088:	db01      	blt.n	800e08e <_malloc_r+0x1a>
 800e08a:	42a9      	cmp	r1, r5
 800e08c:	d903      	bls.n	800e096 <_malloc_r+0x22>
 800e08e:	230c      	movs	r3, #12
 800e090:	6033      	str	r3, [r6, #0]
 800e092:	2000      	movs	r0, #0
 800e094:	bd70      	pop	{r4, r5, r6, pc}
 800e096:	f000 fa6e 	bl	800e576 <__malloc_lock>
 800e09a:	4a21      	ldr	r2, [pc, #132]	; (800e120 <_malloc_r+0xac>)
 800e09c:	6814      	ldr	r4, [r2, #0]
 800e09e:	4621      	mov	r1, r4
 800e0a0:	b991      	cbnz	r1, 800e0c8 <_malloc_r+0x54>
 800e0a2:	4c20      	ldr	r4, [pc, #128]	; (800e124 <_malloc_r+0xb0>)
 800e0a4:	6823      	ldr	r3, [r4, #0]
 800e0a6:	b91b      	cbnz	r3, 800e0b0 <_malloc_r+0x3c>
 800e0a8:	4630      	mov	r0, r6
 800e0aa:	f000 f98f 	bl	800e3cc <_sbrk_r>
 800e0ae:	6020      	str	r0, [r4, #0]
 800e0b0:	4629      	mov	r1, r5
 800e0b2:	4630      	mov	r0, r6
 800e0b4:	f000 f98a 	bl	800e3cc <_sbrk_r>
 800e0b8:	1c43      	adds	r3, r0, #1
 800e0ba:	d124      	bne.n	800e106 <_malloc_r+0x92>
 800e0bc:	230c      	movs	r3, #12
 800e0be:	6033      	str	r3, [r6, #0]
 800e0c0:	4630      	mov	r0, r6
 800e0c2:	f000 fa59 	bl	800e578 <__malloc_unlock>
 800e0c6:	e7e4      	b.n	800e092 <_malloc_r+0x1e>
 800e0c8:	680b      	ldr	r3, [r1, #0]
 800e0ca:	1b5b      	subs	r3, r3, r5
 800e0cc:	d418      	bmi.n	800e100 <_malloc_r+0x8c>
 800e0ce:	2b0b      	cmp	r3, #11
 800e0d0:	d90f      	bls.n	800e0f2 <_malloc_r+0x7e>
 800e0d2:	600b      	str	r3, [r1, #0]
 800e0d4:	50cd      	str	r5, [r1, r3]
 800e0d6:	18cc      	adds	r4, r1, r3
 800e0d8:	4630      	mov	r0, r6
 800e0da:	f000 fa4d 	bl	800e578 <__malloc_unlock>
 800e0de:	f104 000b 	add.w	r0, r4, #11
 800e0e2:	1d23      	adds	r3, r4, #4
 800e0e4:	f020 0007 	bic.w	r0, r0, #7
 800e0e8:	1ac3      	subs	r3, r0, r3
 800e0ea:	d0d3      	beq.n	800e094 <_malloc_r+0x20>
 800e0ec:	425a      	negs	r2, r3
 800e0ee:	50e2      	str	r2, [r4, r3]
 800e0f0:	e7d0      	b.n	800e094 <_malloc_r+0x20>
 800e0f2:	428c      	cmp	r4, r1
 800e0f4:	684b      	ldr	r3, [r1, #4]
 800e0f6:	bf16      	itet	ne
 800e0f8:	6063      	strne	r3, [r4, #4]
 800e0fa:	6013      	streq	r3, [r2, #0]
 800e0fc:	460c      	movne	r4, r1
 800e0fe:	e7eb      	b.n	800e0d8 <_malloc_r+0x64>
 800e100:	460c      	mov	r4, r1
 800e102:	6849      	ldr	r1, [r1, #4]
 800e104:	e7cc      	b.n	800e0a0 <_malloc_r+0x2c>
 800e106:	1cc4      	adds	r4, r0, #3
 800e108:	f024 0403 	bic.w	r4, r4, #3
 800e10c:	42a0      	cmp	r0, r4
 800e10e:	d005      	beq.n	800e11c <_malloc_r+0xa8>
 800e110:	1a21      	subs	r1, r4, r0
 800e112:	4630      	mov	r0, r6
 800e114:	f000 f95a 	bl	800e3cc <_sbrk_r>
 800e118:	3001      	adds	r0, #1
 800e11a:	d0cf      	beq.n	800e0bc <_malloc_r+0x48>
 800e11c:	6025      	str	r5, [r4, #0]
 800e11e:	e7db      	b.n	800e0d8 <_malloc_r+0x64>
 800e120:	20001404 	.word	0x20001404
 800e124:	20001408 	.word	0x20001408

0800e128 <__ssputs_r>:
 800e128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e12c:	688e      	ldr	r6, [r1, #8]
 800e12e:	429e      	cmp	r6, r3
 800e130:	4682      	mov	sl, r0
 800e132:	460c      	mov	r4, r1
 800e134:	4690      	mov	r8, r2
 800e136:	4699      	mov	r9, r3
 800e138:	d837      	bhi.n	800e1aa <__ssputs_r+0x82>
 800e13a:	898a      	ldrh	r2, [r1, #12]
 800e13c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e140:	d031      	beq.n	800e1a6 <__ssputs_r+0x7e>
 800e142:	6825      	ldr	r5, [r4, #0]
 800e144:	6909      	ldr	r1, [r1, #16]
 800e146:	1a6f      	subs	r7, r5, r1
 800e148:	6965      	ldr	r5, [r4, #20]
 800e14a:	2302      	movs	r3, #2
 800e14c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e150:	fb95 f5f3 	sdiv	r5, r5, r3
 800e154:	f109 0301 	add.w	r3, r9, #1
 800e158:	443b      	add	r3, r7
 800e15a:	429d      	cmp	r5, r3
 800e15c:	bf38      	it	cc
 800e15e:	461d      	movcc	r5, r3
 800e160:	0553      	lsls	r3, r2, #21
 800e162:	d530      	bpl.n	800e1c6 <__ssputs_r+0x9e>
 800e164:	4629      	mov	r1, r5
 800e166:	f7ff ff85 	bl	800e074 <_malloc_r>
 800e16a:	4606      	mov	r6, r0
 800e16c:	b950      	cbnz	r0, 800e184 <__ssputs_r+0x5c>
 800e16e:	230c      	movs	r3, #12
 800e170:	f8ca 3000 	str.w	r3, [sl]
 800e174:	89a3      	ldrh	r3, [r4, #12]
 800e176:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e17a:	81a3      	strh	r3, [r4, #12]
 800e17c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e180:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e184:	463a      	mov	r2, r7
 800e186:	6921      	ldr	r1, [r4, #16]
 800e188:	f7ff fc32 	bl	800d9f0 <memcpy>
 800e18c:	89a3      	ldrh	r3, [r4, #12]
 800e18e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e192:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e196:	81a3      	strh	r3, [r4, #12]
 800e198:	6126      	str	r6, [r4, #16]
 800e19a:	6165      	str	r5, [r4, #20]
 800e19c:	443e      	add	r6, r7
 800e19e:	1bed      	subs	r5, r5, r7
 800e1a0:	6026      	str	r6, [r4, #0]
 800e1a2:	60a5      	str	r5, [r4, #8]
 800e1a4:	464e      	mov	r6, r9
 800e1a6:	454e      	cmp	r6, r9
 800e1a8:	d900      	bls.n	800e1ac <__ssputs_r+0x84>
 800e1aa:	464e      	mov	r6, r9
 800e1ac:	4632      	mov	r2, r6
 800e1ae:	4641      	mov	r1, r8
 800e1b0:	6820      	ldr	r0, [r4, #0]
 800e1b2:	f000 f9c7 	bl	800e544 <memmove>
 800e1b6:	68a3      	ldr	r3, [r4, #8]
 800e1b8:	1b9b      	subs	r3, r3, r6
 800e1ba:	60a3      	str	r3, [r4, #8]
 800e1bc:	6823      	ldr	r3, [r4, #0]
 800e1be:	441e      	add	r6, r3
 800e1c0:	6026      	str	r6, [r4, #0]
 800e1c2:	2000      	movs	r0, #0
 800e1c4:	e7dc      	b.n	800e180 <__ssputs_r+0x58>
 800e1c6:	462a      	mov	r2, r5
 800e1c8:	f000 f9d7 	bl	800e57a <_realloc_r>
 800e1cc:	4606      	mov	r6, r0
 800e1ce:	2800      	cmp	r0, #0
 800e1d0:	d1e2      	bne.n	800e198 <__ssputs_r+0x70>
 800e1d2:	6921      	ldr	r1, [r4, #16]
 800e1d4:	4650      	mov	r0, sl
 800e1d6:	f7ff feff 	bl	800dfd8 <_free_r>
 800e1da:	e7c8      	b.n	800e16e <__ssputs_r+0x46>

0800e1dc <_svfiprintf_r>:
 800e1dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1e0:	461d      	mov	r5, r3
 800e1e2:	898b      	ldrh	r3, [r1, #12]
 800e1e4:	061f      	lsls	r7, r3, #24
 800e1e6:	b09d      	sub	sp, #116	; 0x74
 800e1e8:	4680      	mov	r8, r0
 800e1ea:	460c      	mov	r4, r1
 800e1ec:	4616      	mov	r6, r2
 800e1ee:	d50f      	bpl.n	800e210 <_svfiprintf_r+0x34>
 800e1f0:	690b      	ldr	r3, [r1, #16]
 800e1f2:	b96b      	cbnz	r3, 800e210 <_svfiprintf_r+0x34>
 800e1f4:	2140      	movs	r1, #64	; 0x40
 800e1f6:	f7ff ff3d 	bl	800e074 <_malloc_r>
 800e1fa:	6020      	str	r0, [r4, #0]
 800e1fc:	6120      	str	r0, [r4, #16]
 800e1fe:	b928      	cbnz	r0, 800e20c <_svfiprintf_r+0x30>
 800e200:	230c      	movs	r3, #12
 800e202:	f8c8 3000 	str.w	r3, [r8]
 800e206:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e20a:	e0c8      	b.n	800e39e <_svfiprintf_r+0x1c2>
 800e20c:	2340      	movs	r3, #64	; 0x40
 800e20e:	6163      	str	r3, [r4, #20]
 800e210:	2300      	movs	r3, #0
 800e212:	9309      	str	r3, [sp, #36]	; 0x24
 800e214:	2320      	movs	r3, #32
 800e216:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e21a:	2330      	movs	r3, #48	; 0x30
 800e21c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e220:	9503      	str	r5, [sp, #12]
 800e222:	f04f 0b01 	mov.w	fp, #1
 800e226:	4637      	mov	r7, r6
 800e228:	463d      	mov	r5, r7
 800e22a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e22e:	b10b      	cbz	r3, 800e234 <_svfiprintf_r+0x58>
 800e230:	2b25      	cmp	r3, #37	; 0x25
 800e232:	d13e      	bne.n	800e2b2 <_svfiprintf_r+0xd6>
 800e234:	ebb7 0a06 	subs.w	sl, r7, r6
 800e238:	d00b      	beq.n	800e252 <_svfiprintf_r+0x76>
 800e23a:	4653      	mov	r3, sl
 800e23c:	4632      	mov	r2, r6
 800e23e:	4621      	mov	r1, r4
 800e240:	4640      	mov	r0, r8
 800e242:	f7ff ff71 	bl	800e128 <__ssputs_r>
 800e246:	3001      	adds	r0, #1
 800e248:	f000 80a4 	beq.w	800e394 <_svfiprintf_r+0x1b8>
 800e24c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e24e:	4453      	add	r3, sl
 800e250:	9309      	str	r3, [sp, #36]	; 0x24
 800e252:	783b      	ldrb	r3, [r7, #0]
 800e254:	2b00      	cmp	r3, #0
 800e256:	f000 809d 	beq.w	800e394 <_svfiprintf_r+0x1b8>
 800e25a:	2300      	movs	r3, #0
 800e25c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e260:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e264:	9304      	str	r3, [sp, #16]
 800e266:	9307      	str	r3, [sp, #28]
 800e268:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e26c:	931a      	str	r3, [sp, #104]	; 0x68
 800e26e:	462f      	mov	r7, r5
 800e270:	2205      	movs	r2, #5
 800e272:	f817 1b01 	ldrb.w	r1, [r7], #1
 800e276:	4850      	ldr	r0, [pc, #320]	; (800e3b8 <_svfiprintf_r+0x1dc>)
 800e278:	f7f1 ffda 	bl	8000230 <memchr>
 800e27c:	9b04      	ldr	r3, [sp, #16]
 800e27e:	b9d0      	cbnz	r0, 800e2b6 <_svfiprintf_r+0xda>
 800e280:	06d9      	lsls	r1, r3, #27
 800e282:	bf44      	itt	mi
 800e284:	2220      	movmi	r2, #32
 800e286:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e28a:	071a      	lsls	r2, r3, #28
 800e28c:	bf44      	itt	mi
 800e28e:	222b      	movmi	r2, #43	; 0x2b
 800e290:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e294:	782a      	ldrb	r2, [r5, #0]
 800e296:	2a2a      	cmp	r2, #42	; 0x2a
 800e298:	d015      	beq.n	800e2c6 <_svfiprintf_r+0xea>
 800e29a:	9a07      	ldr	r2, [sp, #28]
 800e29c:	462f      	mov	r7, r5
 800e29e:	2000      	movs	r0, #0
 800e2a0:	250a      	movs	r5, #10
 800e2a2:	4639      	mov	r1, r7
 800e2a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e2a8:	3b30      	subs	r3, #48	; 0x30
 800e2aa:	2b09      	cmp	r3, #9
 800e2ac:	d94d      	bls.n	800e34a <_svfiprintf_r+0x16e>
 800e2ae:	b1b8      	cbz	r0, 800e2e0 <_svfiprintf_r+0x104>
 800e2b0:	e00f      	b.n	800e2d2 <_svfiprintf_r+0xf6>
 800e2b2:	462f      	mov	r7, r5
 800e2b4:	e7b8      	b.n	800e228 <_svfiprintf_r+0x4c>
 800e2b6:	4a40      	ldr	r2, [pc, #256]	; (800e3b8 <_svfiprintf_r+0x1dc>)
 800e2b8:	1a80      	subs	r0, r0, r2
 800e2ba:	fa0b f000 	lsl.w	r0, fp, r0
 800e2be:	4318      	orrs	r0, r3
 800e2c0:	9004      	str	r0, [sp, #16]
 800e2c2:	463d      	mov	r5, r7
 800e2c4:	e7d3      	b.n	800e26e <_svfiprintf_r+0x92>
 800e2c6:	9a03      	ldr	r2, [sp, #12]
 800e2c8:	1d11      	adds	r1, r2, #4
 800e2ca:	6812      	ldr	r2, [r2, #0]
 800e2cc:	9103      	str	r1, [sp, #12]
 800e2ce:	2a00      	cmp	r2, #0
 800e2d0:	db01      	blt.n	800e2d6 <_svfiprintf_r+0xfa>
 800e2d2:	9207      	str	r2, [sp, #28]
 800e2d4:	e004      	b.n	800e2e0 <_svfiprintf_r+0x104>
 800e2d6:	4252      	negs	r2, r2
 800e2d8:	f043 0302 	orr.w	r3, r3, #2
 800e2dc:	9207      	str	r2, [sp, #28]
 800e2de:	9304      	str	r3, [sp, #16]
 800e2e0:	783b      	ldrb	r3, [r7, #0]
 800e2e2:	2b2e      	cmp	r3, #46	; 0x2e
 800e2e4:	d10c      	bne.n	800e300 <_svfiprintf_r+0x124>
 800e2e6:	787b      	ldrb	r3, [r7, #1]
 800e2e8:	2b2a      	cmp	r3, #42	; 0x2a
 800e2ea:	d133      	bne.n	800e354 <_svfiprintf_r+0x178>
 800e2ec:	9b03      	ldr	r3, [sp, #12]
 800e2ee:	1d1a      	adds	r2, r3, #4
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	9203      	str	r2, [sp, #12]
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	bfb8      	it	lt
 800e2f8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800e2fc:	3702      	adds	r7, #2
 800e2fe:	9305      	str	r3, [sp, #20]
 800e300:	4d2e      	ldr	r5, [pc, #184]	; (800e3bc <_svfiprintf_r+0x1e0>)
 800e302:	7839      	ldrb	r1, [r7, #0]
 800e304:	2203      	movs	r2, #3
 800e306:	4628      	mov	r0, r5
 800e308:	f7f1 ff92 	bl	8000230 <memchr>
 800e30c:	b138      	cbz	r0, 800e31e <_svfiprintf_r+0x142>
 800e30e:	2340      	movs	r3, #64	; 0x40
 800e310:	1b40      	subs	r0, r0, r5
 800e312:	fa03 f000 	lsl.w	r0, r3, r0
 800e316:	9b04      	ldr	r3, [sp, #16]
 800e318:	4303      	orrs	r3, r0
 800e31a:	3701      	adds	r7, #1
 800e31c:	9304      	str	r3, [sp, #16]
 800e31e:	7839      	ldrb	r1, [r7, #0]
 800e320:	4827      	ldr	r0, [pc, #156]	; (800e3c0 <_svfiprintf_r+0x1e4>)
 800e322:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e326:	2206      	movs	r2, #6
 800e328:	1c7e      	adds	r6, r7, #1
 800e32a:	f7f1 ff81 	bl	8000230 <memchr>
 800e32e:	2800      	cmp	r0, #0
 800e330:	d038      	beq.n	800e3a4 <_svfiprintf_r+0x1c8>
 800e332:	4b24      	ldr	r3, [pc, #144]	; (800e3c4 <_svfiprintf_r+0x1e8>)
 800e334:	bb13      	cbnz	r3, 800e37c <_svfiprintf_r+0x1a0>
 800e336:	9b03      	ldr	r3, [sp, #12]
 800e338:	3307      	adds	r3, #7
 800e33a:	f023 0307 	bic.w	r3, r3, #7
 800e33e:	3308      	adds	r3, #8
 800e340:	9303      	str	r3, [sp, #12]
 800e342:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e344:	444b      	add	r3, r9
 800e346:	9309      	str	r3, [sp, #36]	; 0x24
 800e348:	e76d      	b.n	800e226 <_svfiprintf_r+0x4a>
 800e34a:	fb05 3202 	mla	r2, r5, r2, r3
 800e34e:	2001      	movs	r0, #1
 800e350:	460f      	mov	r7, r1
 800e352:	e7a6      	b.n	800e2a2 <_svfiprintf_r+0xc6>
 800e354:	2300      	movs	r3, #0
 800e356:	3701      	adds	r7, #1
 800e358:	9305      	str	r3, [sp, #20]
 800e35a:	4619      	mov	r1, r3
 800e35c:	250a      	movs	r5, #10
 800e35e:	4638      	mov	r0, r7
 800e360:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e364:	3a30      	subs	r2, #48	; 0x30
 800e366:	2a09      	cmp	r2, #9
 800e368:	d903      	bls.n	800e372 <_svfiprintf_r+0x196>
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d0c8      	beq.n	800e300 <_svfiprintf_r+0x124>
 800e36e:	9105      	str	r1, [sp, #20]
 800e370:	e7c6      	b.n	800e300 <_svfiprintf_r+0x124>
 800e372:	fb05 2101 	mla	r1, r5, r1, r2
 800e376:	2301      	movs	r3, #1
 800e378:	4607      	mov	r7, r0
 800e37a:	e7f0      	b.n	800e35e <_svfiprintf_r+0x182>
 800e37c:	ab03      	add	r3, sp, #12
 800e37e:	9300      	str	r3, [sp, #0]
 800e380:	4622      	mov	r2, r4
 800e382:	4b11      	ldr	r3, [pc, #68]	; (800e3c8 <_svfiprintf_r+0x1ec>)
 800e384:	a904      	add	r1, sp, #16
 800e386:	4640      	mov	r0, r8
 800e388:	f7fd fdc8 	bl	800bf1c <_printf_float>
 800e38c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800e390:	4681      	mov	r9, r0
 800e392:	d1d6      	bne.n	800e342 <_svfiprintf_r+0x166>
 800e394:	89a3      	ldrh	r3, [r4, #12]
 800e396:	065b      	lsls	r3, r3, #25
 800e398:	f53f af35 	bmi.w	800e206 <_svfiprintf_r+0x2a>
 800e39c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e39e:	b01d      	add	sp, #116	; 0x74
 800e3a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3a4:	ab03      	add	r3, sp, #12
 800e3a6:	9300      	str	r3, [sp, #0]
 800e3a8:	4622      	mov	r2, r4
 800e3aa:	4b07      	ldr	r3, [pc, #28]	; (800e3c8 <_svfiprintf_r+0x1ec>)
 800e3ac:	a904      	add	r1, sp, #16
 800e3ae:	4640      	mov	r0, r8
 800e3b0:	f7fe f86a 	bl	800c488 <_printf_i>
 800e3b4:	e7ea      	b.n	800e38c <_svfiprintf_r+0x1b0>
 800e3b6:	bf00      	nop
 800e3b8:	0800eea4 	.word	0x0800eea4
 800e3bc:	0800eeaa 	.word	0x0800eeaa
 800e3c0:	0800eeae 	.word	0x0800eeae
 800e3c4:	0800bf1d 	.word	0x0800bf1d
 800e3c8:	0800e129 	.word	0x0800e129

0800e3cc <_sbrk_r>:
 800e3cc:	b538      	push	{r3, r4, r5, lr}
 800e3ce:	4c06      	ldr	r4, [pc, #24]	; (800e3e8 <_sbrk_r+0x1c>)
 800e3d0:	2300      	movs	r3, #0
 800e3d2:	4605      	mov	r5, r0
 800e3d4:	4608      	mov	r0, r1
 800e3d6:	6023      	str	r3, [r4, #0]
 800e3d8:	f7f6 fda0 	bl	8004f1c <_sbrk>
 800e3dc:	1c43      	adds	r3, r0, #1
 800e3de:	d102      	bne.n	800e3e6 <_sbrk_r+0x1a>
 800e3e0:	6823      	ldr	r3, [r4, #0]
 800e3e2:	b103      	cbz	r3, 800e3e6 <_sbrk_r+0x1a>
 800e3e4:	602b      	str	r3, [r5, #0]
 800e3e6:	bd38      	pop	{r3, r4, r5, pc}
 800e3e8:	2000186c 	.word	0x2000186c

0800e3ec <__sread>:
 800e3ec:	b510      	push	{r4, lr}
 800e3ee:	460c      	mov	r4, r1
 800e3f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e3f4:	f000 f8e8 	bl	800e5c8 <_read_r>
 800e3f8:	2800      	cmp	r0, #0
 800e3fa:	bfab      	itete	ge
 800e3fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e3fe:	89a3      	ldrhlt	r3, [r4, #12]
 800e400:	181b      	addge	r3, r3, r0
 800e402:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e406:	bfac      	ite	ge
 800e408:	6563      	strge	r3, [r4, #84]	; 0x54
 800e40a:	81a3      	strhlt	r3, [r4, #12]
 800e40c:	bd10      	pop	{r4, pc}

0800e40e <__swrite>:
 800e40e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e412:	461f      	mov	r7, r3
 800e414:	898b      	ldrh	r3, [r1, #12]
 800e416:	05db      	lsls	r3, r3, #23
 800e418:	4605      	mov	r5, r0
 800e41a:	460c      	mov	r4, r1
 800e41c:	4616      	mov	r6, r2
 800e41e:	d505      	bpl.n	800e42c <__swrite+0x1e>
 800e420:	2302      	movs	r3, #2
 800e422:	2200      	movs	r2, #0
 800e424:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e428:	f000 f868 	bl	800e4fc <_lseek_r>
 800e42c:	89a3      	ldrh	r3, [r4, #12]
 800e42e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e432:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e436:	81a3      	strh	r3, [r4, #12]
 800e438:	4632      	mov	r2, r6
 800e43a:	463b      	mov	r3, r7
 800e43c:	4628      	mov	r0, r5
 800e43e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e442:	f000 b817 	b.w	800e474 <_write_r>

0800e446 <__sseek>:
 800e446:	b510      	push	{r4, lr}
 800e448:	460c      	mov	r4, r1
 800e44a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e44e:	f000 f855 	bl	800e4fc <_lseek_r>
 800e452:	1c43      	adds	r3, r0, #1
 800e454:	89a3      	ldrh	r3, [r4, #12]
 800e456:	bf15      	itete	ne
 800e458:	6560      	strne	r0, [r4, #84]	; 0x54
 800e45a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e45e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e462:	81a3      	strheq	r3, [r4, #12]
 800e464:	bf18      	it	ne
 800e466:	81a3      	strhne	r3, [r4, #12]
 800e468:	bd10      	pop	{r4, pc}

0800e46a <__sclose>:
 800e46a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e46e:	f000 b813 	b.w	800e498 <_close_r>
	...

0800e474 <_write_r>:
 800e474:	b538      	push	{r3, r4, r5, lr}
 800e476:	4c07      	ldr	r4, [pc, #28]	; (800e494 <_write_r+0x20>)
 800e478:	4605      	mov	r5, r0
 800e47a:	4608      	mov	r0, r1
 800e47c:	4611      	mov	r1, r2
 800e47e:	2200      	movs	r2, #0
 800e480:	6022      	str	r2, [r4, #0]
 800e482:	461a      	mov	r2, r3
 800e484:	f7f6 f957 	bl	8004736 <_write>
 800e488:	1c43      	adds	r3, r0, #1
 800e48a:	d102      	bne.n	800e492 <_write_r+0x1e>
 800e48c:	6823      	ldr	r3, [r4, #0]
 800e48e:	b103      	cbz	r3, 800e492 <_write_r+0x1e>
 800e490:	602b      	str	r3, [r5, #0]
 800e492:	bd38      	pop	{r3, r4, r5, pc}
 800e494:	2000186c 	.word	0x2000186c

0800e498 <_close_r>:
 800e498:	b538      	push	{r3, r4, r5, lr}
 800e49a:	4c06      	ldr	r4, [pc, #24]	; (800e4b4 <_close_r+0x1c>)
 800e49c:	2300      	movs	r3, #0
 800e49e:	4605      	mov	r5, r0
 800e4a0:	4608      	mov	r0, r1
 800e4a2:	6023      	str	r3, [r4, #0]
 800e4a4:	f7f6 fd05 	bl	8004eb2 <_close>
 800e4a8:	1c43      	adds	r3, r0, #1
 800e4aa:	d102      	bne.n	800e4b2 <_close_r+0x1a>
 800e4ac:	6823      	ldr	r3, [r4, #0]
 800e4ae:	b103      	cbz	r3, 800e4b2 <_close_r+0x1a>
 800e4b0:	602b      	str	r3, [r5, #0]
 800e4b2:	bd38      	pop	{r3, r4, r5, pc}
 800e4b4:	2000186c 	.word	0x2000186c

0800e4b8 <_fstat_r>:
 800e4b8:	b538      	push	{r3, r4, r5, lr}
 800e4ba:	4c07      	ldr	r4, [pc, #28]	; (800e4d8 <_fstat_r+0x20>)
 800e4bc:	2300      	movs	r3, #0
 800e4be:	4605      	mov	r5, r0
 800e4c0:	4608      	mov	r0, r1
 800e4c2:	4611      	mov	r1, r2
 800e4c4:	6023      	str	r3, [r4, #0]
 800e4c6:	f7f6 fd00 	bl	8004eca <_fstat>
 800e4ca:	1c43      	adds	r3, r0, #1
 800e4cc:	d102      	bne.n	800e4d4 <_fstat_r+0x1c>
 800e4ce:	6823      	ldr	r3, [r4, #0]
 800e4d0:	b103      	cbz	r3, 800e4d4 <_fstat_r+0x1c>
 800e4d2:	602b      	str	r3, [r5, #0]
 800e4d4:	bd38      	pop	{r3, r4, r5, pc}
 800e4d6:	bf00      	nop
 800e4d8:	2000186c 	.word	0x2000186c

0800e4dc <_isatty_r>:
 800e4dc:	b538      	push	{r3, r4, r5, lr}
 800e4de:	4c06      	ldr	r4, [pc, #24]	; (800e4f8 <_isatty_r+0x1c>)
 800e4e0:	2300      	movs	r3, #0
 800e4e2:	4605      	mov	r5, r0
 800e4e4:	4608      	mov	r0, r1
 800e4e6:	6023      	str	r3, [r4, #0]
 800e4e8:	f7f6 fcff 	bl	8004eea <_isatty>
 800e4ec:	1c43      	adds	r3, r0, #1
 800e4ee:	d102      	bne.n	800e4f6 <_isatty_r+0x1a>
 800e4f0:	6823      	ldr	r3, [r4, #0]
 800e4f2:	b103      	cbz	r3, 800e4f6 <_isatty_r+0x1a>
 800e4f4:	602b      	str	r3, [r5, #0]
 800e4f6:	bd38      	pop	{r3, r4, r5, pc}
 800e4f8:	2000186c 	.word	0x2000186c

0800e4fc <_lseek_r>:
 800e4fc:	b538      	push	{r3, r4, r5, lr}
 800e4fe:	4c07      	ldr	r4, [pc, #28]	; (800e51c <_lseek_r+0x20>)
 800e500:	4605      	mov	r5, r0
 800e502:	4608      	mov	r0, r1
 800e504:	4611      	mov	r1, r2
 800e506:	2200      	movs	r2, #0
 800e508:	6022      	str	r2, [r4, #0]
 800e50a:	461a      	mov	r2, r3
 800e50c:	f7f6 fcf8 	bl	8004f00 <_lseek>
 800e510:	1c43      	adds	r3, r0, #1
 800e512:	d102      	bne.n	800e51a <_lseek_r+0x1e>
 800e514:	6823      	ldr	r3, [r4, #0]
 800e516:	b103      	cbz	r3, 800e51a <_lseek_r+0x1e>
 800e518:	602b      	str	r3, [r5, #0]
 800e51a:	bd38      	pop	{r3, r4, r5, pc}
 800e51c:	2000186c 	.word	0x2000186c

0800e520 <__ascii_mbtowc>:
 800e520:	b082      	sub	sp, #8
 800e522:	b901      	cbnz	r1, 800e526 <__ascii_mbtowc+0x6>
 800e524:	a901      	add	r1, sp, #4
 800e526:	b142      	cbz	r2, 800e53a <__ascii_mbtowc+0x1a>
 800e528:	b14b      	cbz	r3, 800e53e <__ascii_mbtowc+0x1e>
 800e52a:	7813      	ldrb	r3, [r2, #0]
 800e52c:	600b      	str	r3, [r1, #0]
 800e52e:	7812      	ldrb	r2, [r2, #0]
 800e530:	1c10      	adds	r0, r2, #0
 800e532:	bf18      	it	ne
 800e534:	2001      	movne	r0, #1
 800e536:	b002      	add	sp, #8
 800e538:	4770      	bx	lr
 800e53a:	4610      	mov	r0, r2
 800e53c:	e7fb      	b.n	800e536 <__ascii_mbtowc+0x16>
 800e53e:	f06f 0001 	mvn.w	r0, #1
 800e542:	e7f8      	b.n	800e536 <__ascii_mbtowc+0x16>

0800e544 <memmove>:
 800e544:	4288      	cmp	r0, r1
 800e546:	b510      	push	{r4, lr}
 800e548:	eb01 0302 	add.w	r3, r1, r2
 800e54c:	d807      	bhi.n	800e55e <memmove+0x1a>
 800e54e:	1e42      	subs	r2, r0, #1
 800e550:	4299      	cmp	r1, r3
 800e552:	d00a      	beq.n	800e56a <memmove+0x26>
 800e554:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e558:	f802 4f01 	strb.w	r4, [r2, #1]!
 800e55c:	e7f8      	b.n	800e550 <memmove+0xc>
 800e55e:	4283      	cmp	r3, r0
 800e560:	d9f5      	bls.n	800e54e <memmove+0xa>
 800e562:	1881      	adds	r1, r0, r2
 800e564:	1ad2      	subs	r2, r2, r3
 800e566:	42d3      	cmn	r3, r2
 800e568:	d100      	bne.n	800e56c <memmove+0x28>
 800e56a:	bd10      	pop	{r4, pc}
 800e56c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e570:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800e574:	e7f7      	b.n	800e566 <memmove+0x22>

0800e576 <__malloc_lock>:
 800e576:	4770      	bx	lr

0800e578 <__malloc_unlock>:
 800e578:	4770      	bx	lr

0800e57a <_realloc_r>:
 800e57a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e57c:	4607      	mov	r7, r0
 800e57e:	4614      	mov	r4, r2
 800e580:	460e      	mov	r6, r1
 800e582:	b921      	cbnz	r1, 800e58e <_realloc_r+0x14>
 800e584:	4611      	mov	r1, r2
 800e586:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e58a:	f7ff bd73 	b.w	800e074 <_malloc_r>
 800e58e:	b922      	cbnz	r2, 800e59a <_realloc_r+0x20>
 800e590:	f7ff fd22 	bl	800dfd8 <_free_r>
 800e594:	4625      	mov	r5, r4
 800e596:	4628      	mov	r0, r5
 800e598:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e59a:	f000 f834 	bl	800e606 <_malloc_usable_size_r>
 800e59e:	42a0      	cmp	r0, r4
 800e5a0:	d20f      	bcs.n	800e5c2 <_realloc_r+0x48>
 800e5a2:	4621      	mov	r1, r4
 800e5a4:	4638      	mov	r0, r7
 800e5a6:	f7ff fd65 	bl	800e074 <_malloc_r>
 800e5aa:	4605      	mov	r5, r0
 800e5ac:	2800      	cmp	r0, #0
 800e5ae:	d0f2      	beq.n	800e596 <_realloc_r+0x1c>
 800e5b0:	4631      	mov	r1, r6
 800e5b2:	4622      	mov	r2, r4
 800e5b4:	f7ff fa1c 	bl	800d9f0 <memcpy>
 800e5b8:	4631      	mov	r1, r6
 800e5ba:	4638      	mov	r0, r7
 800e5bc:	f7ff fd0c 	bl	800dfd8 <_free_r>
 800e5c0:	e7e9      	b.n	800e596 <_realloc_r+0x1c>
 800e5c2:	4635      	mov	r5, r6
 800e5c4:	e7e7      	b.n	800e596 <_realloc_r+0x1c>
	...

0800e5c8 <_read_r>:
 800e5c8:	b538      	push	{r3, r4, r5, lr}
 800e5ca:	4c07      	ldr	r4, [pc, #28]	; (800e5e8 <_read_r+0x20>)
 800e5cc:	4605      	mov	r5, r0
 800e5ce:	4608      	mov	r0, r1
 800e5d0:	4611      	mov	r1, r2
 800e5d2:	2200      	movs	r2, #0
 800e5d4:	6022      	str	r2, [r4, #0]
 800e5d6:	461a      	mov	r2, r3
 800e5d8:	f7f6 fc4e 	bl	8004e78 <_read>
 800e5dc:	1c43      	adds	r3, r0, #1
 800e5de:	d102      	bne.n	800e5e6 <_read_r+0x1e>
 800e5e0:	6823      	ldr	r3, [r4, #0]
 800e5e2:	b103      	cbz	r3, 800e5e6 <_read_r+0x1e>
 800e5e4:	602b      	str	r3, [r5, #0]
 800e5e6:	bd38      	pop	{r3, r4, r5, pc}
 800e5e8:	2000186c 	.word	0x2000186c

0800e5ec <__ascii_wctomb>:
 800e5ec:	b149      	cbz	r1, 800e602 <__ascii_wctomb+0x16>
 800e5ee:	2aff      	cmp	r2, #255	; 0xff
 800e5f0:	bf85      	ittet	hi
 800e5f2:	238a      	movhi	r3, #138	; 0x8a
 800e5f4:	6003      	strhi	r3, [r0, #0]
 800e5f6:	700a      	strbls	r2, [r1, #0]
 800e5f8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800e5fc:	bf98      	it	ls
 800e5fe:	2001      	movls	r0, #1
 800e600:	4770      	bx	lr
 800e602:	4608      	mov	r0, r1
 800e604:	4770      	bx	lr

0800e606 <_malloc_usable_size_r>:
 800e606:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e60a:	1f18      	subs	r0, r3, #4
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	bfbc      	itt	lt
 800e610:	580b      	ldrlt	r3, [r1, r0]
 800e612:	18c0      	addlt	r0, r0, r3
 800e614:	4770      	bx	lr
	...

0800e618 <_init>:
 800e618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e61a:	bf00      	nop
 800e61c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e61e:	bc08      	pop	{r3}
 800e620:	469e      	mov	lr, r3
 800e622:	4770      	bx	lr

0800e624 <_fini>:
 800e624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e626:	bf00      	nop
 800e628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e62a:	bc08      	pop	{r3}
 800e62c:	469e      	mov	lr, r3
 800e62e:	4770      	bx	lr
