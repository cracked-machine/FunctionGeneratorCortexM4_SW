
FunctionGeneratorCortexM4_SW_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000155ec  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001418  080157d0  080157d0  000257d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016be8  08016be8  00032088  2**0
                  CONTENTS
  4 .ARM          00000000  08016be8  08016be8  00032088  2**0
                  CONTENTS
  5 .preinit_array 00000000  08016be8  08016be8  00032088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016be8  08016be8  00026be8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016bec  08016bec  00026bec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00002088  20000000  08016bf0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bf8  20002088  08018c78  00032088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002c80  08018c78  00032c80  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00032088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004a36b  00000000  00000000  000320b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007e3f  00000000  00000000  0007c423  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000023a8  00000000  00000000  00084268  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001f38  00000000  00000000  00086610  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00035c12  00000000  00000000  00088548  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000303fa  00000000  00000000  000be15a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00126c0c  00000000  00000000  000ee554  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00215160  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009d2c  00000000  00000000  002151dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20002088 	.word	0x20002088
 80001fc:	00000000 	.word	0x00000000
 8000200:	080157b4 	.word	0x080157b4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000208c 	.word	0x2000208c
 800021c:	080157b4 	.word	0x080157b4

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800040e:	f1a4 0401 	sub.w	r4, r4, #1
 8000412:	d1e9      	bne.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <BiasMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void BiasMenu_DrawMenu(eSystemState pMenu)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	2b0f      	cmp	r3, #15
 8000ce6:	d000      	beq.n	8000cea <BiasMenu_DrawMenu+0x12>
		case Bias_Menu_State:
			BiasMenu_DrawMainMenu();
			break;

		default:
			break;
 8000ce8:	e002      	b.n	8000cf0 <BiasMenu_DrawMenu+0x18>
			BiasMenu_DrawMainMenu();
 8000cea:	f000 f805 	bl	8000cf8 <BiasMenu_DrawMainMenu>
			break;
 8000cee:	bf00      	nop

	}
}
 8000cf0:	bf00      	nop
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <BiasMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void BiasMenu_DrawMainMenu()
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->BIAS", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8000cfe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d02:	9301      	str	r3, [sp, #4]
 8000d04:	2302      	movs	r3, #2
 8000d06:	9300      	str	r3, [sp, #0]
 8000d08:	2300      	movs	r3, #0
 8000d0a:	220a      	movs	r2, #10
 8000d0c:	210a      	movs	r1, #10
 8000d0e:	4814      	ldr	r0, [pc, #80]	; (8000d60 <BiasMenu_DrawMainMenu+0x68>)
 8000d10:	f00f fdee 	bl	80108f0 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8000d14:	f000 f8a0 	bl	8000e58 <DM_DisplayFormattedOutput>

	ILI9341_Draw_Text("POS", 15,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8000d18:	f240 23fd 	movw	r3, #765	; 0x2fd
 8000d1c:	9301      	str	r3, [sp, #4]
 8000d1e:	2302      	movs	r3, #2
 8000d20:	9300      	str	r3, [sp, #0]
 8000d22:	2300      	movs	r3, #0
 8000d24:	22d2      	movs	r2, #210	; 0xd2
 8000d26:	210f      	movs	r1, #15
 8000d28:	480e      	ldr	r0, [pc, #56]	; (8000d64 <BiasMenu_DrawMainMenu+0x6c>)
 8000d2a:	f00f fde1 	bl	80108f0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("NEG", 97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8000d2e:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8000d32:	9301      	str	r3, [sp, #4]
 8000d34:	2302      	movs	r3, #2
 8000d36:	9300      	str	r3, [sp, #0]
 8000d38:	2300      	movs	r3, #0
 8000d3a:	22d2      	movs	r2, #210	; 0xd2
 8000d3c:	2161      	movs	r1, #97	; 0x61
 8000d3e:	480a      	ldr	r0, [pc, #40]	; (8000d68 <BiasMenu_DrawMainMenu+0x70>)
 8000d40:	f00f fdd6 	bl	80108f0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("GND",  190, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8000d44:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000d48:	9301      	str	r3, [sp, #4]
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	9300      	str	r3, [sp, #0]
 8000d4e:	2300      	movs	r3, #0
 8000d50:	22d2      	movs	r2, #210	; 0xd2
 8000d52:	21be      	movs	r1, #190	; 0xbe
 8000d54:	4805      	ldr	r0, [pc, #20]	; (8000d6c <BiasMenu_DrawMainMenu+0x74>)
 8000d56:	f00f fdcb 	bl	80108f0 <ILI9341_Draw_Text>

}
 8000d5a:	bf00      	nop
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	080157d0 	.word	0x080157d0
 8000d64:	080157dc 	.word	0x080157dc
 8000d68:	080157e0 	.word	0x080157e0
 8000d6c:	080157e4 	.word	0x080157e4

08000d70 <DM_Init>:
 *	@param None
 *	@retval None
 *
 */
void DM_Init()
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
	  ILI9341_Init();
 8000d74:	f00f fdfd 	bl	8010972 <ILI9341_Init>
	  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8000d78:	2003      	movs	r0, #3
 8000d7a:	f010 fa53 	bl	8011224 <ILI9341_Set_Rotation>
	  ILI9341_Fill_Screen(WHITE);
 8000d7e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000d82:	f010 f835 	bl	8010df0 <ILI9341_Fill_Screen>

}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
	...

08000d8c <DM_PostInit>:
 *	@param None
 *	@retval None
 *
 */
void DM_PostInit()
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("Initialising", 10, 10, NORMAL_TEXT_FGCOLOUR, 1, NORMAL_TEXT_BGCOLOUR);
 8000d92:	2300      	movs	r3, #0
 8000d94:	9301      	str	r3, [sp, #4]
 8000d96:	2301      	movs	r3, #1
 8000d98:	9300      	str	r3, [sp, #0]
 8000d9a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8000d9e:	220a      	movs	r2, #10
 8000da0:	210a      	movs	r1, #10
 8000da2:	4806      	ldr	r0, [pc, #24]	; (8000dbc <DM_PostInit+0x30>)
 8000da4:	f00f fda4 	bl	80108f0 <ILI9341_Draw_Text>
	HAL_Delay(500);
 8000da8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000dac:	f008 f8f2 	bl	8008f94 <HAL_Delay>

	DM_RefreshScreen();
 8000db0:	f000 fd38 	bl	8001824 <DM_RefreshScreen>
	#ifdef EVENT_MENU_DEBUG
		  printf("Init Completed\n");
	#endif


}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	080157e8 	.word	0x080157e8

08000dc0 <DM_UpdateDisplay>:
 *	@param None
 *	@retval None
 *
 */
void DM_UpdateDisplay()
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0

	eSystemState tempState = EM_GetSystemState();
 8000dc6:	f003 fe43 	bl	8004a50 <EM_GetSystemState>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	71fb      	strb	r3, [r7, #7]
	switch(tempState)
 8000dce:	79fb      	ldrb	r3, [r7, #7]
 8000dd0:	2b0f      	cmp	r3, #15
 8000dd2:	d83c      	bhi.n	8000e4e <DM_UpdateDisplay+0x8e>
 8000dd4:	a201      	add	r2, pc, #4	; (adr r2, 8000ddc <DM_UpdateDisplay+0x1c>)
 8000dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dda:	bf00      	nop
 8000ddc:	08000e1d 	.word	0x08000e1d
 8000de0:	08000e1d 	.word	0x08000e1d
 8000de4:	08000e1d 	.word	0x08000e1d
 8000de8:	08000e27 	.word	0x08000e27
 8000dec:	08000e27 	.word	0x08000e27
 8000df0:	08000e27 	.word	0x08000e27
 8000df4:	08000e31 	.word	0x08000e31
 8000df8:	08000e31 	.word	0x08000e31
 8000dfc:	08000e31 	.word	0x08000e31
 8000e00:	08000e4f 	.word	0x08000e4f
 8000e04:	08000e3b 	.word	0x08000e3b
 8000e08:	08000e3b 	.word	0x08000e3b
 8000e0c:	08000e3b 	.word	0x08000e3b
 8000e10:	08000e3b 	.word	0x08000e3b
 8000e14:	08000e3b 	.word	0x08000e3b
 8000e18:	08000e45 	.word	0x08000e45
	{
		case Toplevel_Main_Menu_State:
		case Toplevel_Output_Menu_State:
		case Toplevel_Input_Menu_State:
			ToplevelMenu_DrawMenu(tempState);
 8000e1c:	79fb      	ldrb	r3, [r7, #7]
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f003 f82e 	bl	8003e80 <ToplevelMenu_DrawMenu>
			break;
 8000e24:	e014      	b.n	8000e50 <DM_UpdateDisplay+0x90>

		case Func_Main_Menu_State:
		case Func_Signal_Menu_State:
		case Func_Aux_Menu_State:
			FuncMenu_DrawMenu(tempState);
 8000e26:	79fb      	ldrb	r3, [r7, #7]
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f002 fa7b 	bl	8003324 <FuncMenu_DrawMenu>
			break;
 8000e2e:	e00f      	b.n	8000e50 <DM_UpdateDisplay+0x90>

		case Gain_Main_Menu_State:
		case Gain_Signal_Menu_State:
		case Gain_Aux_Menu_State:
			GainMenu_DrawMenu(tempState);
 8000e30:	79fb      	ldrb	r3, [r7, #7]
 8000e32:	4618      	mov	r0, r3
 8000e34:	f002 ff4a 	bl	8003ccc <GainMenu_DrawMenu>
			break;
 8000e38:	e00a      	b.n	8000e50 <DM_UpdateDisplay+0x90>
		case Freq_Main_Menu_State:
		case Freq_Preset_Menu_State:
		case Freq_Adjust_Menu_State:
		case Freq_Sweep_Menu_State:
		case Freq_Prescaler_Menu_State:
			FreqMenu_DrawMenu(tempState);
 8000e3a:	79fb      	ldrb	r3, [r7, #7]
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f000 fd55 	bl	80018ec <FreqMenu_DrawMenu>
			break;
 8000e42:	e005      	b.n	8000e50 <DM_UpdateDisplay+0x90>

		case Bias_Menu_State:
			BiasMenu_DrawMenu(tempState);
 8000e44:	79fb      	ldrb	r3, [r7, #7]
 8000e46:	4618      	mov	r0, r3
 8000e48:	f7ff ff46 	bl	8000cd8 <BiasMenu_DrawMenu>
			break;
 8000e4c:	e000      	b.n	8000e50 <DM_UpdateDisplay+0x90>

		default:
			break;
 8000e4e:	bf00      	nop
		ILI9341_Draw_Text(encoder_value, 220, 20, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
	#endif //ENCODER_DEBUG



}
 8000e50:	bf00      	nop
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <DM_DisplayFormattedOutput>:
 *	@param None
 *	@retval None
 *
 */
void DM_DisplayFormattedOutput()
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0

	_DisplayOutputSignalHertz(140, 45);
 8000e5c:	212d      	movs	r1, #45	; 0x2d
 8000e5e:	208c      	movs	r0, #140	; 0x8c
 8000e60:	f000 f95c 	bl	800111c <_DisplayOutputSignalHertz>
	_DisplayOutputSignalVpp(175, 70);
 8000e64:	2146      	movs	r1, #70	; 0x46
 8000e66:	20af      	movs	r0, #175	; 0xaf
 8000e68:	f000 fa1c 	bl	80012a4 <_DisplayOutputSignalVpp>
	_DisplayOutputSignalDecibels(138, 95);
 8000e6c:	215f      	movs	r1, #95	; 0x5f
 8000e6e:	208a      	movs	r0, #138	; 0x8a
 8000e70:	f000 fa76 	bl	8001360 <_DisplayOutputSignalDecibels>
	_DisplayOutputSignalOffset(161, 120);
 8000e74:	2178      	movs	r1, #120	; 0x78
 8000e76:	20a1      	movs	r0, #161	; 0xa1
 8000e78:	f000 fae6 	bl	8001448 <_DisplayOutputSignalOffset>
	_DisplayOutputWaveformIcons(80, 160, 245, 160);
 8000e7c:	23a0      	movs	r3, #160	; 0xa0
 8000e7e:	22f5      	movs	r2, #245	; 0xf5
 8000e80:	21a0      	movs	r1, #160	; 0xa0
 8000e82:	2050      	movs	r0, #80	; 0x50
 8000e84:	f000 fb80 	bl	8001588 <_DisplayOutputWaveformIcons>

	DM_DisplayInputTriggerStatus();
 8000e88:	f000 f806 	bl	8000e98 <DM_DisplayInputTriggerStatus>
	DM_DisplayInputTriggerTimerHertz(200, 17);
 8000e8c:	2111      	movs	r1, #17
 8000e8e:	20c8      	movs	r0, #200	; 0xc8
 8000e90:	f000 f888 	bl	8000fa4 <DM_DisplayInputTriggerTimerHertz>

}
 8000e94:	bf00      	nop
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <DM_DisplayInputTriggerStatus>:
 *	@param None
 *	@retval None
 *
 */
void DM_DisplayInputTriggerStatus()
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af02      	add	r7, sp, #8

	uint16_t text_x_pos = 240;
 8000e9e:	23f0      	movs	r3, #240	; 0xf0
 8000ea0:	80fb      	strh	r3, [r7, #6]
	uint16_t text_y_pos = 1;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	80bb      	strh	r3, [r7, #4]
	// eTriggerInputMode
	switch(IT_GetActiveTriggerMode())
 8000ea6:	f005 fc05 	bl	80066b4 <IT_GetActiveTriggerMode>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	d027      	beq.n	8000f00 <DM_DisplayInputTriggerStatus+0x68>
 8000eb0:	2b02      	cmp	r3, #2
 8000eb2:	d048      	beq.n	8000f46 <DM_DisplayInputTriggerStatus+0xae>
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d000      	beq.n	8000eba <DM_DisplayInputTriggerStatus+0x22>
			else
				ILI9341_Draw_Text("T:ADC ", text_x_pos, text_y_pos, HIGHLIGHT_TEXT_BGCOLOUR , text_size, HIGHLIGHT_TEXT_FGCOLOUR);
			break;

	}
}
 8000eb8:	e068      	b.n	8000f8c <DM_DisplayInputTriggerStatus+0xf4>
			if(IT_GetTriggerStatus())
 8000eba:	f005 fc17 	bl	80066ec <IT_GetTriggerStatus>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d00e      	beq.n	8000ee2 <DM_DisplayInputTriggerStatus+0x4a>
				ILI9341_Draw_Text("T:TIM ", text_x_pos, text_y_pos, HIGHLIGHT_TEXT_FGCOLOUR , text_size, HIGHLIGHT_TEXT_BGCOLOUR);
 8000ec4:	4b33      	ldr	r3, [pc, #204]	; (8000f94 <DM_DisplayInputTriggerStatus+0xfc>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	b29b      	uxth	r3, r3
 8000eca:	88b8      	ldrh	r0, [r7, #4]
 8000ecc:	88f9      	ldrh	r1, [r7, #6]
 8000ece:	f644 42f6 	movw	r2, #19702	; 0x4cf6
 8000ed2:	9201      	str	r2, [sp, #4]
 8000ed4:	9300      	str	r3, [sp, #0]
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	4602      	mov	r2, r0
 8000eda:	482f      	ldr	r0, [pc, #188]	; (8000f98 <DM_DisplayInputTriggerStatus+0x100>)
 8000edc:	f00f fd08 	bl	80108f0 <ILI9341_Draw_Text>
			break;
 8000ee0:	e054      	b.n	8000f8c <DM_DisplayInputTriggerStatus+0xf4>
				ILI9341_Draw_Text("T:TIM ", text_x_pos, text_y_pos, HIGHLIGHT_TEXT_BGCOLOUR , text_size, HIGHLIGHT_TEXT_FGCOLOUR);
 8000ee2:	4b2c      	ldr	r3, [pc, #176]	; (8000f94 <DM_DisplayInputTriggerStatus+0xfc>)
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	b29b      	uxth	r3, r3
 8000ee8:	88b8      	ldrh	r0, [r7, #4]
 8000eea:	88f9      	ldrh	r1, [r7, #6]
 8000eec:	2200      	movs	r2, #0
 8000eee:	9201      	str	r2, [sp, #4]
 8000ef0:	9300      	str	r3, [sp, #0]
 8000ef2:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8000ef6:	4602      	mov	r2, r0
 8000ef8:	4827      	ldr	r0, [pc, #156]	; (8000f98 <DM_DisplayInputTriggerStatus+0x100>)
 8000efa:	f00f fcf9 	bl	80108f0 <ILI9341_Draw_Text>
			break;
 8000efe:	e045      	b.n	8000f8c <DM_DisplayInputTriggerStatus+0xf4>
			if(IT_GetTriggerStatus())
 8000f00:	f005 fbf4 	bl	80066ec <IT_GetTriggerStatus>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d00e      	beq.n	8000f28 <DM_DisplayInputTriggerStatus+0x90>
				ILI9341_Draw_Text("T:COMP", text_x_pos, text_y_pos, HIGHLIGHT_TEXT_FGCOLOUR , text_size, HIGHLIGHT_TEXT_BGCOLOUR);
 8000f0a:	4b22      	ldr	r3, [pc, #136]	; (8000f94 <DM_DisplayInputTriggerStatus+0xfc>)
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	b29b      	uxth	r3, r3
 8000f10:	88b8      	ldrh	r0, [r7, #4]
 8000f12:	88f9      	ldrh	r1, [r7, #6]
 8000f14:	f644 42f6 	movw	r2, #19702	; 0x4cf6
 8000f18:	9201      	str	r2, [sp, #4]
 8000f1a:	9300      	str	r3, [sp, #0]
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	4602      	mov	r2, r0
 8000f20:	481e      	ldr	r0, [pc, #120]	; (8000f9c <DM_DisplayInputTriggerStatus+0x104>)
 8000f22:	f00f fce5 	bl	80108f0 <ILI9341_Draw_Text>
			break;
 8000f26:	e031      	b.n	8000f8c <DM_DisplayInputTriggerStatus+0xf4>
				ILI9341_Draw_Text("T:COMP", text_x_pos, text_y_pos, HIGHLIGHT_TEXT_BGCOLOUR , text_size, HIGHLIGHT_TEXT_FGCOLOUR);
 8000f28:	4b1a      	ldr	r3, [pc, #104]	; (8000f94 <DM_DisplayInputTriggerStatus+0xfc>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	b29b      	uxth	r3, r3
 8000f2e:	88b8      	ldrh	r0, [r7, #4]
 8000f30:	88f9      	ldrh	r1, [r7, #6]
 8000f32:	2200      	movs	r2, #0
 8000f34:	9201      	str	r2, [sp, #4]
 8000f36:	9300      	str	r3, [sp, #0]
 8000f38:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	4817      	ldr	r0, [pc, #92]	; (8000f9c <DM_DisplayInputTriggerStatus+0x104>)
 8000f40:	f00f fcd6 	bl	80108f0 <ILI9341_Draw_Text>
			break;
 8000f44:	e022      	b.n	8000f8c <DM_DisplayInputTriggerStatus+0xf4>
			if(IT_GetTriggerStatus())
 8000f46:	f005 fbd1 	bl	80066ec <IT_GetTriggerStatus>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d00e      	beq.n	8000f6e <DM_DisplayInputTriggerStatus+0xd6>
				ILI9341_Draw_Text("T:ADC ", text_x_pos, text_y_pos, HIGHLIGHT_TEXT_FGCOLOUR , text_size, HIGHLIGHT_TEXT_BGCOLOUR);
 8000f50:	4b10      	ldr	r3, [pc, #64]	; (8000f94 <DM_DisplayInputTriggerStatus+0xfc>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	b29b      	uxth	r3, r3
 8000f56:	88b8      	ldrh	r0, [r7, #4]
 8000f58:	88f9      	ldrh	r1, [r7, #6]
 8000f5a:	f644 42f6 	movw	r2, #19702	; 0x4cf6
 8000f5e:	9201      	str	r2, [sp, #4]
 8000f60:	9300      	str	r3, [sp, #0]
 8000f62:	2300      	movs	r3, #0
 8000f64:	4602      	mov	r2, r0
 8000f66:	480e      	ldr	r0, [pc, #56]	; (8000fa0 <DM_DisplayInputTriggerStatus+0x108>)
 8000f68:	f00f fcc2 	bl	80108f0 <ILI9341_Draw_Text>
			break;
 8000f6c:	e00d      	b.n	8000f8a <DM_DisplayInputTriggerStatus+0xf2>
				ILI9341_Draw_Text("T:ADC ", text_x_pos, text_y_pos, HIGHLIGHT_TEXT_BGCOLOUR , text_size, HIGHLIGHT_TEXT_FGCOLOUR);
 8000f6e:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <DM_DisplayInputTriggerStatus+0xfc>)
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	b29b      	uxth	r3, r3
 8000f74:	88b8      	ldrh	r0, [r7, #4]
 8000f76:	88f9      	ldrh	r1, [r7, #6]
 8000f78:	2200      	movs	r2, #0
 8000f7a:	9201      	str	r2, [sp, #4]
 8000f7c:	9300      	str	r3, [sp, #0]
 8000f7e:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8000f82:	4602      	mov	r2, r0
 8000f84:	4806      	ldr	r0, [pc, #24]	; (8000fa0 <DM_DisplayInputTriggerStatus+0x108>)
 8000f86:	f00f fcb3 	bl	80108f0 <ILI9341_Draw_Text>
			break;
 8000f8a:	bf00      	nop
}
 8000f8c:	bf00      	nop
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20000000 	.word	0x20000000
 8000f98:	080157f8 	.word	0x080157f8
 8000f9c:	08015800 	.word	0x08015800
 8000fa0:	08015808 	.word	0x08015808

08000fa4 <DM_DisplayInputTriggerTimerHertz>:
 *	@param None
 *	@retval None
 *
 */
void DM_DisplayInputTriggerTimerHertz(uint16_t xpos, uint16_t ypos)
{
 8000fa4:	b590      	push	{r4, r7, lr}
 8000fa6:	b089      	sub	sp, #36	; 0x24
 8000fa8:	af02      	add	r7, sp, #8
 8000faa:	4603      	mov	r3, r0
 8000fac:	460a      	mov	r2, r1
 8000fae:	80fb      	strh	r3, [r7, #6]
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	80bb      	strh	r3, [r7, #4]
	if(IT_GetTriggerStatus())
 8000fb4:	f005 fb9a 	bl	80066ec <IT_GetTriggerStatus>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	f000 808e 	beq.w	80010dc <DM_DisplayInputTriggerTimerHertz+0x138>
	{
		char avg_freq_count_hertz[13] = {};
 8000fc0:	f107 0308 	add.w	r3, r7, #8
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	609a      	str	r2, [r3, #8]
 8000fcc:	731a      	strb	r2, [r3, #12]

		if(IT_GetAverageFreqCountHertz() < 1000)
 8000fce:	f005 fb63 	bl	8006698 <IT_GetAverageFreqCountHertz>
 8000fd2:	eeb0 7a40 	vmov.f32	s14, s0
 8000fd6:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8001100 <DM_DisplayInputTriggerTimerHertz+0x15c>
 8000fda:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fe2:	d511      	bpl.n	8001008 <DM_DisplayInputTriggerTimerHertz+0x64>
		{
			snprintf(avg_freq_count_hertz, sizeof(avg_freq_count_hertz), "%7.1f Hz", IT_GetAverageFreqCountHertz());
 8000fe4:	f005 fb58 	bl	8006698 <IT_GetAverageFreqCountHertz>
 8000fe8:	ee10 3a10 	vmov	r3, s0
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff fad3 	bl	8000598 <__aeabi_f2d>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	460c      	mov	r4, r1
 8000ff6:	f107 0008 	add.w	r0, r7, #8
 8000ffa:	e9cd 3400 	strd	r3, r4, [sp]
 8000ffe:	4a41      	ldr	r2, [pc, #260]	; (8001104 <DM_DisplayInputTriggerTimerHertz+0x160>)
 8001000:	210d      	movs	r1, #13
 8001002:	f011 f831 	bl	8012068 <sniprintf>
 8001006:	e059      	b.n	80010bc <DM_DisplayInputTriggerTimerHertz+0x118>
		}
		else if(IT_GetAverageFreqCountHertz() < 10000)
 8001008:	f005 fb46 	bl	8006698 <IT_GetAverageFreqCountHertz>
 800100c:	eeb0 7a40 	vmov.f32	s14, s0
 8001010:	eddf 7a3d 	vldr	s15, [pc, #244]	; 8001108 <DM_DisplayInputTriggerTimerHertz+0x164>
 8001014:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800101c:	d516      	bpl.n	800104c <DM_DisplayInputTriggerTimerHertz+0xa8>
		{
			snprintf(avg_freq_count_hertz, sizeof(avg_freq_count_hertz), "%6.1f KHz", IT_GetAverageFreqCountHertz() / 1000);
 800101e:	f005 fb3b 	bl	8006698 <IT_GetAverageFreqCountHertz>
 8001022:	eeb0 7a40 	vmov.f32	s14, s0
 8001026:	eddf 7a36 	vldr	s15, [pc, #216]	; 8001100 <DM_DisplayInputTriggerTimerHertz+0x15c>
 800102a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800102e:	ee16 0a90 	vmov	r0, s13
 8001032:	f7ff fab1 	bl	8000598 <__aeabi_f2d>
 8001036:	4603      	mov	r3, r0
 8001038:	460c      	mov	r4, r1
 800103a:	f107 0008 	add.w	r0, r7, #8
 800103e:	e9cd 3400 	strd	r3, r4, [sp]
 8001042:	4a32      	ldr	r2, [pc, #200]	; (800110c <DM_DisplayInputTriggerTimerHertz+0x168>)
 8001044:	210d      	movs	r1, #13
 8001046:	f011 f80f 	bl	8012068 <sniprintf>
 800104a:	e037      	b.n	80010bc <DM_DisplayInputTriggerTimerHertz+0x118>
		}
		else if(IT_GetAverageFreqCountHertz() < 100000)
 800104c:	f005 fb24 	bl	8006698 <IT_GetAverageFreqCountHertz>
 8001050:	eeb0 7a40 	vmov.f32	s14, s0
 8001054:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8001110 <DM_DisplayInputTriggerTimerHertz+0x16c>
 8001058:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800105c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001060:	d516      	bpl.n	8001090 <DM_DisplayInputTriggerTimerHertz+0xec>
		{
			snprintf(avg_freq_count_hertz, sizeof(avg_freq_count_hertz), "%6.1f KHz", IT_GetAverageFreqCountHertz()  / 1000);
 8001062:	f005 fb19 	bl	8006698 <IT_GetAverageFreqCountHertz>
 8001066:	eeb0 7a40 	vmov.f32	s14, s0
 800106a:	eddf 7a25 	vldr	s15, [pc, #148]	; 8001100 <DM_DisplayInputTriggerTimerHertz+0x15c>
 800106e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001072:	ee16 0a90 	vmov	r0, s13
 8001076:	f7ff fa8f 	bl	8000598 <__aeabi_f2d>
 800107a:	4603      	mov	r3, r0
 800107c:	460c      	mov	r4, r1
 800107e:	f107 0008 	add.w	r0, r7, #8
 8001082:	e9cd 3400 	strd	r3, r4, [sp]
 8001086:	4a21      	ldr	r2, [pc, #132]	; (800110c <DM_DisplayInputTriggerTimerHertz+0x168>)
 8001088:	210d      	movs	r1, #13
 800108a:	f010 ffed 	bl	8012068 <sniprintf>
 800108e:	e015      	b.n	80010bc <DM_DisplayInputTriggerTimerHertz+0x118>
		}
		else
		{
			snprintf(avg_freq_count_hertz, sizeof(avg_freq_count_hertz), "%6.1f KHz", IT_GetAverageFreqCountHertz()  / 1000);
 8001090:	f005 fb02 	bl	8006698 <IT_GetAverageFreqCountHertz>
 8001094:	eeb0 7a40 	vmov.f32	s14, s0
 8001098:	eddf 7a19 	vldr	s15, [pc, #100]	; 8001100 <DM_DisplayInputTriggerTimerHertz+0x15c>
 800109c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80010a0:	ee16 0a90 	vmov	r0, s13
 80010a4:	f7ff fa78 	bl	8000598 <__aeabi_f2d>
 80010a8:	4603      	mov	r3, r0
 80010aa:	460c      	mov	r4, r1
 80010ac:	f107 0008 	add.w	r0, r7, #8
 80010b0:	e9cd 3400 	strd	r3, r4, [sp]
 80010b4:	4a15      	ldr	r2, [pc, #84]	; (800110c <DM_DisplayInputTriggerTimerHertz+0x168>)
 80010b6:	210d      	movs	r1, #13
 80010b8:	f010 ffd6 	bl	8012068 <sniprintf>
		}

		ILI9341_Draw_Text(avg_freq_count_hertz, xpos, ypos, NORMAL_TEXT_FGCOLOUR , text_size, NORMAL_TEXT_BGCOLOUR);
 80010bc:	4b15      	ldr	r3, [pc, #84]	; (8001114 <DM_DisplayInputTriggerTimerHertz+0x170>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	b29b      	uxth	r3, r3
 80010c2:	88bc      	ldrh	r4, [r7, #4]
 80010c4:	88f9      	ldrh	r1, [r7, #6]
 80010c6:	f107 0008 	add.w	r0, r7, #8
 80010ca:	2200      	movs	r2, #0
 80010cc:	9201      	str	r2, [sp, #4]
 80010ce:	9300      	str	r3, [sp, #0]
 80010d0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80010d4:	4622      	mov	r2, r4
 80010d6:	f00f fc0b 	bl	80108f0 <ILI9341_Draw_Text>
	}
	else
	{
		ILI9341_Draw_Text("                   ", xpos, ypos, NORMAL_TEXT_FGCOLOUR , text_size, NORMAL_TEXT_BGCOLOUR);
	}
}
 80010da:	e00d      	b.n	80010f8 <DM_DisplayInputTriggerTimerHertz+0x154>
		ILI9341_Draw_Text("                   ", xpos, ypos, NORMAL_TEXT_FGCOLOUR , text_size, NORMAL_TEXT_BGCOLOUR);
 80010dc:	4b0d      	ldr	r3, [pc, #52]	; (8001114 <DM_DisplayInputTriggerTimerHertz+0x170>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	b29b      	uxth	r3, r3
 80010e2:	88b8      	ldrh	r0, [r7, #4]
 80010e4:	88f9      	ldrh	r1, [r7, #6]
 80010e6:	2200      	movs	r2, #0
 80010e8:	9201      	str	r2, [sp, #4]
 80010ea:	9300      	str	r3, [sp, #0]
 80010ec:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80010f0:	4602      	mov	r2, r0
 80010f2:	4809      	ldr	r0, [pc, #36]	; (8001118 <DM_DisplayInputTriggerTimerHertz+0x174>)
 80010f4:	f00f fbfc 	bl	80108f0 <ILI9341_Draw_Text>
}
 80010f8:	bf00      	nop
 80010fa:	371c      	adds	r7, #28
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd90      	pop	{r4, r7, pc}
 8001100:	447a0000 	.word	0x447a0000
 8001104:	08015810 	.word	0x08015810
 8001108:	461c4000 	.word	0x461c4000
 800110c:	0801581c 	.word	0x0801581c
 8001110:	47c35000 	.word	0x47c35000
 8001114:	20000000 	.word	0x20000000
 8001118:	08015828 	.word	0x08015828

0800111c <_DisplayOutputSignalHertz>:
 *	@param None
 *	@retval None
 *
 */
void _DisplayOutputSignalHertz(uint16_t xpos, uint16_t ypos)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af02      	add	r7, sp, #8
 8001122:	4603      	mov	r3, r0
 8001124:	460a      	mov	r2, r1
 8001126:	80fb      	strh	r3, [r7, #6]
 8001128:	4613      	mov	r3, r2
 800112a:	80bb      	strh	r3, [r7, #4]


	// draw row header
	ILI9341_Draw_Text("FREQ   ....", 2, ypos , NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 800112c:	4b0e      	ldr	r3, [pc, #56]	; (8001168 <_DisplayOutputSignalHertz+0x4c>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	b29b      	uxth	r3, r3
 8001132:	88b9      	ldrh	r1, [r7, #4]
 8001134:	2200      	movs	r2, #0
 8001136:	9201      	str	r2, [sp, #4]
 8001138:	9300      	str	r3, [sp, #0]
 800113a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800113e:	460a      	mov	r2, r1
 8001140:	2102      	movs	r1, #2
 8001142:	480a      	ldr	r0, [pc, #40]	; (800116c <_DisplayOutputSignalHertz+0x50>)
 8001144:	f00f fbd4 	bl	80108f0 <ILI9341_Draw_Text>

	// display output in hertz
	DM_DrawGenericHertzValue(xpos, ypos, SM_GetOutputInHertz());
 8001148:	f005 fe98 	bl	8006e7c <SM_GetOutputInHertz>
 800114c:	eef0 7a40 	vmov.f32	s15, s0
 8001150:	88ba      	ldrh	r2, [r7, #4]
 8001152:	88fb      	ldrh	r3, [r7, #6]
 8001154:	eeb0 0a67 	vmov.f32	s0, s15
 8001158:	4611      	mov	r1, r2
 800115a:	4618      	mov	r0, r3
 800115c:	f000 f808 	bl	8001170 <DM_DrawGenericHertzValue>
}
 8001160:	bf00      	nop
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	20000000 	.word	0x20000000
 800116c:	0801583c 	.word	0x0801583c

08001170 <DM_DrawGenericHertzValue>:

void DM_DrawGenericHertzValue(uint16_t xpos, uint16_t ypos, float output_hertz_value)
{
 8001170:	b590      	push	{r4, r7, lr}
 8001172:	b08b      	sub	sp, #44	; 0x2c
 8001174:	af02      	add	r7, sp, #8
 8001176:	4603      	mov	r3, r0
 8001178:	460a      	mov	r2, r1
 800117a:	ed87 0a00 	vstr	s0, [r7]
 800117e:	80fb      	strh	r3, [r7, #6]
 8001180:	4613      	mov	r3, r2
 8001182:	80bb      	strh	r3, [r7, #4]
	char out_hertz[20] = "";
 8001184:	2300      	movs	r3, #0
 8001186:	60fb      	str	r3, [r7, #12]
 8001188:	f107 0310 	add.w	r3, r7, #16
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	609a      	str	r2, [r3, #8]
 8001194:	60da      	str	r2, [r3, #12]
	if(output_hertz_value < 1000)
 8001196:	edd7 7a00 	vldr	s15, [r7]
 800119a:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 800128c <DM_DrawGenericHertzValue+0x11c>
 800119e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011a6:	d50d      	bpl.n	80011c4 <DM_DrawGenericHertzValue+0x54>
	{
		snprintf(out_hertz, sizeof(out_hertz), " %7.2f  Hz ", output_hertz_value);
 80011a8:	6838      	ldr	r0, [r7, #0]
 80011aa:	f7ff f9f5 	bl	8000598 <__aeabi_f2d>
 80011ae:	4603      	mov	r3, r0
 80011b0:	460c      	mov	r4, r1
 80011b2:	f107 000c 	add.w	r0, r7, #12
 80011b6:	e9cd 3400 	strd	r3, r4, [sp]
 80011ba:	4a35      	ldr	r2, [pc, #212]	; (8001290 <DM_DrawGenericHertzValue+0x120>)
 80011bc:	2114      	movs	r1, #20
 80011be:	f010 ff53 	bl	8012068 <sniprintf>
 80011c2:	e04f      	b.n	8001264 <DM_DrawGenericHertzValue+0xf4>
	}
	else if(output_hertz_value < 10000)
 80011c4:	edd7 7a00 	vldr	s15, [r7]
 80011c8:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8001294 <DM_DrawGenericHertzValue+0x124>
 80011cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011d4:	d514      	bpl.n	8001200 <DM_DrawGenericHertzValue+0x90>
	{
		snprintf(out_hertz, sizeof(out_hertz), " %7.2f  KHz ", output_hertz_value /1000);
 80011d6:	edd7 7a00 	vldr	s15, [r7]
 80011da:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800128c <DM_DrawGenericHertzValue+0x11c>
 80011de:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80011e2:	ee16 0a90 	vmov	r0, s13
 80011e6:	f7ff f9d7 	bl	8000598 <__aeabi_f2d>
 80011ea:	4603      	mov	r3, r0
 80011ec:	460c      	mov	r4, r1
 80011ee:	f107 000c 	add.w	r0, r7, #12
 80011f2:	e9cd 3400 	strd	r3, r4, [sp]
 80011f6:	4a28      	ldr	r2, [pc, #160]	; (8001298 <DM_DrawGenericHertzValue+0x128>)
 80011f8:	2114      	movs	r1, #20
 80011fa:	f010 ff35 	bl	8012068 <sniprintf>
 80011fe:	e031      	b.n	8001264 <DM_DrawGenericHertzValue+0xf4>
	}
	else if(output_hertz_value < 100000)
 8001200:	edd7 7a00 	vldr	s15, [r7]
 8001204:	ed9f 7a25 	vldr	s14, [pc, #148]	; 800129c <DM_DrawGenericHertzValue+0x12c>
 8001208:	eef4 7ac7 	vcmpe.f32	s15, s14
 800120c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001210:	d514      	bpl.n	800123c <DM_DrawGenericHertzValue+0xcc>
	{
		snprintf(out_hertz, sizeof(out_hertz), " %7.2f  KHz ", output_hertz_value /1000);
 8001212:	edd7 7a00 	vldr	s15, [r7]
 8001216:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800128c <DM_DrawGenericHertzValue+0x11c>
 800121a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800121e:	ee16 0a90 	vmov	r0, s13
 8001222:	f7ff f9b9 	bl	8000598 <__aeabi_f2d>
 8001226:	4603      	mov	r3, r0
 8001228:	460c      	mov	r4, r1
 800122a:	f107 000c 	add.w	r0, r7, #12
 800122e:	e9cd 3400 	strd	r3, r4, [sp]
 8001232:	4a19      	ldr	r2, [pc, #100]	; (8001298 <DM_DrawGenericHertzValue+0x128>)
 8001234:	2114      	movs	r1, #20
 8001236:	f010 ff17 	bl	8012068 <sniprintf>
 800123a:	e013      	b.n	8001264 <DM_DrawGenericHertzValue+0xf4>
	}
	else
	{
		snprintf(out_hertz, sizeof(out_hertz), " %7.2f  KHz ", output_hertz_value /1000);
 800123c:	edd7 7a00 	vldr	s15, [r7]
 8001240:	ed9f 7a12 	vldr	s14, [pc, #72]	; 800128c <DM_DrawGenericHertzValue+0x11c>
 8001244:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001248:	ee16 0a90 	vmov	r0, s13
 800124c:	f7ff f9a4 	bl	8000598 <__aeabi_f2d>
 8001250:	4603      	mov	r3, r0
 8001252:	460c      	mov	r4, r1
 8001254:	f107 000c 	add.w	r0, r7, #12
 8001258:	e9cd 3400 	strd	r3, r4, [sp]
 800125c:	4a0e      	ldr	r2, [pc, #56]	; (8001298 <DM_DrawGenericHertzValue+0x128>)
 800125e:	2114      	movs	r1, #20
 8001260:	f010 ff02 	bl	8012068 <sniprintf>
	}

	ILI9341_Draw_Text(out_hertz, xpos, ypos, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001264:	4b0e      	ldr	r3, [pc, #56]	; (80012a0 <DM_DrawGenericHertzValue+0x130>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	b29b      	uxth	r3, r3
 800126a:	88bc      	ldrh	r4, [r7, #4]
 800126c:	88f9      	ldrh	r1, [r7, #6]
 800126e:	f107 000c 	add.w	r0, r7, #12
 8001272:	2200      	movs	r2, #0
 8001274:	9201      	str	r2, [sp, #4]
 8001276:	9300      	str	r3, [sp, #0]
 8001278:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800127c:	4622      	mov	r2, r4
 800127e:	f00f fb37 	bl	80108f0 <ILI9341_Draw_Text>
}
 8001282:	bf00      	nop
 8001284:	3724      	adds	r7, #36	; 0x24
 8001286:	46bd      	mov	sp, r7
 8001288:	bd90      	pop	{r4, r7, pc}
 800128a:	bf00      	nop
 800128c:	447a0000 	.word	0x447a0000
 8001290:	08015848 	.word	0x08015848
 8001294:	461c4000 	.word	0x461c4000
 8001298:	08015854 	.word	0x08015854
 800129c:	47c35000 	.word	0x47c35000
 80012a0:	20000000 	.word	0x20000000

080012a4 <_DisplayOutputSignalVpp>:
 *	@param None
 *	@retval None
 *
 */
void _DisplayOutputSignalVpp(uint16_t xpos, uint16_t ypos)
{
 80012a4:	b590      	push	{r4, r7, lr}
 80012a6:	b08d      	sub	sp, #52	; 0x34
 80012a8:	af02      	add	r7, sp, #8
 80012aa:	4603      	mov	r3, r0
 80012ac:	460a      	mov	r2, r1
 80012ae:	80fb      	strh	r3, [r7, #6]
 80012b0:	4613      	mov	r3, r2
 80012b2:	80bb      	strh	r3, [r7, #4]
	char out_vpp[18] = "";
 80012b4:	2300      	movs	r3, #0
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	f107 0310 	add.w	r3, r7, #16
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	609a      	str	r2, [r3, #8]
 80012c4:	819a      	strh	r2, [r3, #12]
	uint8_t out_vpp_x = xpos;
 80012c6:	88fb      	ldrh	r3, [r7, #6]
 80012c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t out_vpp_y = ypos;
 80012cc:	88bb      	ldrh	r3, [r7, #4]
 80012ce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	// draw row header
	ILI9341_Draw_Text("VPP    ....", 2, out_vpp_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 80012d2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80012d6:	b299      	uxth	r1, r3
 80012d8:	4b1e      	ldr	r3, [pc, #120]	; (8001354 <_DisplayOutputSignalVpp+0xb0>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	b29b      	uxth	r3, r3
 80012de:	2200      	movs	r2, #0
 80012e0:	9201      	str	r2, [sp, #4]
 80012e2:	9300      	str	r3, [sp, #0]
 80012e4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80012e8:	460a      	mov	r2, r1
 80012ea:	2102      	movs	r1, #2
 80012ec:	481a      	ldr	r0, [pc, #104]	; (8001358 <_DisplayOutputSignalVpp+0xb4>)
 80012ee:	f00f faff 	bl	80108f0 <ILI9341_Draw_Text>

	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile;
 80012f2:	2000      	movs	r0, #0
 80012f4:	f005 fb2a 	bl	800694c <SM_GetOutputChannel>
 80012f8:	4603      	mov	r3, r0
 80012fa:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 80012fe:	623b      	str	r3, [r7, #32]

	if(pTmpVppPreset)
 8001300:	6a3b      	ldr	r3, [r7, #32]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d00e      	beq.n	8001324 <_DisplayOutputSignalVpp+0x80>
	{
		snprintf(out_vpp, sizeof(out_vpp), " %2.2f   V ", pTmpVppPreset->amp_value);
 8001306:	6a3b      	ldr	r3, [r7, #32]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff f944 	bl	8000598 <__aeabi_f2d>
 8001310:	4603      	mov	r3, r0
 8001312:	460c      	mov	r4, r1
 8001314:	f107 000c 	add.w	r0, r7, #12
 8001318:	e9cd 3400 	strd	r3, r4, [sp]
 800131c:	4a0f      	ldr	r2, [pc, #60]	; (800135c <_DisplayOutputSignalVpp+0xb8>)
 800131e:	2112      	movs	r1, #18
 8001320:	f010 fea2 	bl	8012068 <sniprintf>
	}

	ILI9341_Draw_Text(out_vpp, out_vpp_x, out_vpp_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001324:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001328:	b299      	uxth	r1, r3
 800132a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800132e:	b29c      	uxth	r4, r3
 8001330:	4b08      	ldr	r3, [pc, #32]	; (8001354 <_DisplayOutputSignalVpp+0xb0>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	b29b      	uxth	r3, r3
 8001336:	f107 000c 	add.w	r0, r7, #12
 800133a:	2200      	movs	r2, #0
 800133c:	9201      	str	r2, [sp, #4]
 800133e:	9300      	str	r3, [sp, #0]
 8001340:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001344:	4622      	mov	r2, r4
 8001346:	f00f fad3 	bl	80108f0 <ILI9341_Draw_Text>
}
 800134a:	bf00      	nop
 800134c:	372c      	adds	r7, #44	; 0x2c
 800134e:	46bd      	mov	sp, r7
 8001350:	bd90      	pop	{r4, r7, pc}
 8001352:	bf00      	nop
 8001354:	20000000 	.word	0x20000000
 8001358:	08015864 	.word	0x08015864
 800135c:	08015870 	.word	0x08015870

08001360 <_DisplayOutputSignalDecibels>:
 *	@param None
 *	@retval None
 *
 */
void _DisplayOutputSignalDecibels(uint16_t xpos, uint16_t ypos)
{
 8001360:	b590      	push	{r4, r7, lr}
 8001362:	b08d      	sub	sp, #52	; 0x34
 8001364:	af02      	add	r7, sp, #8
 8001366:	4603      	mov	r3, r0
 8001368:	460a      	mov	r2, r1
 800136a:	80fb      	strh	r3, [r7, #6]
 800136c:	4613      	mov	r3, r2
 800136e:	80bb      	strh	r3, [r7, #4]
	char out_decibels[20] = "";
 8001370:	2300      	movs	r3, #0
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	f107 0310 	add.w	r3, r7, #16
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	605a      	str	r2, [r3, #4]
 800137e:	609a      	str	r2, [r3, #8]
 8001380:	60da      	str	r2, [r3, #12]
	uint8_t out_decibels_x = xpos;
 8001382:	88fb      	ldrh	r3, [r7, #6]
 8001384:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t out_decibels_y = ypos;
 8001388:	88bb      	ldrh	r3, [r7, #4]
 800138a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	// draw row header
	ILI9341_Draw_Text("GAIN   ....", 2, out_decibels_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 800138e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001392:	b299      	uxth	r1, r3
 8001394:	4b28      	ldr	r3, [pc, #160]	; (8001438 <_DisplayOutputSignalDecibels+0xd8>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	b29b      	uxth	r3, r3
 800139a:	2200      	movs	r2, #0
 800139c:	9201      	str	r2, [sp, #4]
 800139e:	9300      	str	r3, [sp, #0]
 80013a0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80013a4:	460a      	mov	r2, r1
 80013a6:	2102      	movs	r1, #2
 80013a8:	4824      	ldr	r0, [pc, #144]	; (800143c <_DisplayOutputSignalDecibels+0xdc>)
 80013aa:	f00f faa1 	bl	80108f0 <ILI9341_Draw_Text>

	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile;
 80013ae:	2000      	movs	r0, #0
 80013b0:	f005 facc 	bl	800694c <SM_GetOutputChannel>
 80013b4:	4603      	mov	r3, r0
 80013b6:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 80013ba:	623b      	str	r3, [r7, #32]
	if(pTmpVppPreset)
 80013bc:	6a3b      	ldr	r3, [r7, #32]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d00e      	beq.n	80013e0 <_DisplayOutputSignalDecibels+0x80>
	{
		snprintf(out_decibels, sizeof(out_decibels), " %+7.2f ", pTmpVppPreset->gain_decibels);
 80013c2:	6a3b      	ldr	r3, [r7, #32]
 80013c4:	68db      	ldr	r3, [r3, #12]
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff f8e6 	bl	8000598 <__aeabi_f2d>
 80013cc:	4603      	mov	r3, r0
 80013ce:	460c      	mov	r4, r1
 80013d0:	f107 000c 	add.w	r0, r7, #12
 80013d4:	e9cd 3400 	strd	r3, r4, [sp]
 80013d8:	4a19      	ldr	r2, [pc, #100]	; (8001440 <_DisplayOutputSignalDecibels+0xe0>)
 80013da:	2114      	movs	r1, #20
 80013dc:	f010 fe44 	bl	8012068 <sniprintf>
	}

	ILI9341_Draw_Text(out_decibels, out_decibels_x, out_decibels_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 80013e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80013e4:	b299      	uxth	r1, r3
 80013e6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80013ea:	b29c      	uxth	r4, r3
 80013ec:	4b12      	ldr	r3, [pc, #72]	; (8001438 <_DisplayOutputSignalDecibels+0xd8>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	b29b      	uxth	r3, r3
 80013f2:	f107 000c 	add.w	r0, r7, #12
 80013f6:	2200      	movs	r2, #0
 80013f8:	9201      	str	r2, [sp, #4]
 80013fa:	9300      	str	r3, [sp, #0]
 80013fc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001400:	4622      	mov	r2, r4
 8001402:	f00f fa75 	bl	80108f0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("dBmV", out_decibels_x + 128, out_decibels_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001406:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800140a:	b29b      	uxth	r3, r3
 800140c:	3380      	adds	r3, #128	; 0x80
 800140e:	b299      	uxth	r1, r3
 8001410:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001414:	b298      	uxth	r0, r3
 8001416:	4b08      	ldr	r3, [pc, #32]	; (8001438 <_DisplayOutputSignalDecibels+0xd8>)
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	b29b      	uxth	r3, r3
 800141c:	2200      	movs	r2, #0
 800141e:	9201      	str	r2, [sp, #4]
 8001420:	9300      	str	r3, [sp, #0]
 8001422:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001426:	4602      	mov	r2, r0
 8001428:	4806      	ldr	r0, [pc, #24]	; (8001444 <_DisplayOutputSignalDecibels+0xe4>)
 800142a:	f00f fa61 	bl	80108f0 <ILI9341_Draw_Text>

}
 800142e:	bf00      	nop
 8001430:	372c      	adds	r7, #44	; 0x2c
 8001432:	46bd      	mov	sp, r7
 8001434:	bd90      	pop	{r4, r7, pc}
 8001436:	bf00      	nop
 8001438:	20000000 	.word	0x20000000
 800143c:	0801587c 	.word	0x0801587c
 8001440:	08015888 	.word	0x08015888
 8001444:	08015894 	.word	0x08015894

08001448 <_DisplayOutputSignalOffset>:
 *	@param None
 *	@retval None
 *
 */
void _DisplayOutputSignalOffset(uint16_t xpos, uint16_t ypos)
{
 8001448:	b590      	push	{r4, r7, lr}
 800144a:	b08d      	sub	sp, #52	; 0x34
 800144c:	af02      	add	r7, sp, #8
 800144e:	4603      	mov	r3, r0
 8001450:	460a      	mov	r2, r1
 8001452:	80fb      	strh	r3, [r7, #6]
 8001454:	4613      	mov	r3, r2
 8001456:	80bb      	strh	r3, [r7, #4]
	float volts_per_thou = 0.00075;
 8001458:	4b45      	ldr	r3, [pc, #276]	; (8001570 <_DisplayOutputSignalOffset+0x128>)
 800145a:	623b      	str	r3, [r7, #32]
	char out_dcvolts[12] = "";
 800145c:	2300      	movs	r3, #0
 800145e:	613b      	str	r3, [r7, #16]
 8001460:	f107 0314 	add.w	r3, r7, #20
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
	uint8_t out_dcvolts_x = xpos;
 800146a:	88fb      	ldrh	r3, [r7, #6]
 800146c:	77fb      	strb	r3, [r7, #31]
	uint8_t out_dcvolts_y = ypos;
 800146e:	88bb      	ldrh	r3, [r7, #4]
 8001470:	77bb      	strb	r3, [r7, #30]

	ILI9341_Draw_Text("OFFSET ....", 2, out_dcvolts_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001472:	7fbb      	ldrb	r3, [r7, #30]
 8001474:	b299      	uxth	r1, r3
 8001476:	4b3f      	ldr	r3, [pc, #252]	; (8001574 <_DisplayOutputSignalOffset+0x12c>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	b29b      	uxth	r3, r3
 800147c:	2200      	movs	r2, #0
 800147e:	9201      	str	r2, [sp, #4]
 8001480:	9300      	str	r3, [sp, #0]
 8001482:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001486:	460a      	mov	r2, r1
 8001488:	2102      	movs	r1, #2
 800148a:	483b      	ldr	r0, [pc, #236]	; (8001578 <_DisplayOutputSignalOffset+0x130>)
 800148c:	f00f fa30 	bl	80108f0 <ILI9341_Draw_Text>

	// display output bias in +/- Volts
	float dc_volts;
	(BO_GetOutputBias() == 0) ? (dc_volts = 0) : (dc_volts = volts_per_thou * (float)BO_GetOutputBias());
 8001490:	f004 f8c0 	bl	8005614 <BO_GetOutputBias>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d103      	bne.n	80014a2 <_DisplayOutputSignalOffset+0x5a>
 800149a:	f04f 0300 	mov.w	r3, #0
 800149e:	627b      	str	r3, [r7, #36]	; 0x24
 80014a0:	e00b      	b.n	80014ba <_DisplayOutputSignalOffset+0x72>
 80014a2:	f004 f8b7 	bl	8005614 <BO_GetOutputBias>
 80014a6:	ee07 0a90 	vmov	s15, r0
 80014aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014ae:	ed97 7a08 	vldr	s14, [r7, #32]
 80014b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014b6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	snprintf(out_dcvolts, sizeof(out_dcvolts), "%05.2f   v ", dc_volts);
 80014ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80014bc:	f7ff f86c 	bl	8000598 <__aeabi_f2d>
 80014c0:	4603      	mov	r3, r0
 80014c2:	460c      	mov	r4, r1
 80014c4:	f107 0010 	add.w	r0, r7, #16
 80014c8:	e9cd 3400 	strd	r3, r4, [sp]
 80014cc:	4a2b      	ldr	r2, [pc, #172]	; (800157c <_DisplayOutputSignalOffset+0x134>)
 80014ce:	210c      	movs	r1, #12
 80014d0:	f010 fdca 	bl	8012068 <sniprintf>
	if(BO_GetBiasPolarity())
 80014d4:	f004 f83e 	bl	8005554 <BO_GetBiasPolarity>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d022      	beq.n	8001524 <_DisplayOutputSignalOffset+0xdc>
	{
		char symbol[3] = "+\0";
 80014de:	4a28      	ldr	r2, [pc, #160]	; (8001580 <_DisplayOutputSignalOffset+0x138>)
 80014e0:	f107 030c 	add.w	r3, r7, #12
 80014e4:	6812      	ldr	r2, [r2, #0]
 80014e6:	4611      	mov	r1, r2
 80014e8:	8019      	strh	r1, [r3, #0]
 80014ea:	3302      	adds	r3, #2
 80014ec:	0c12      	lsrs	r2, r2, #16
 80014ee:	701a      	strb	r2, [r3, #0]
		ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 80014f0:	f107 0210 	add.w	r2, r7, #16
 80014f4:	f107 030c 	add.w	r3, r7, #12
 80014f8:	4611      	mov	r1, r2
 80014fa:	4618      	mov	r0, r3
 80014fc:	f010 fde8 	bl	80120d0 <strcat>
 8001500:	4604      	mov	r4, r0
 8001502:	7ffb      	ldrb	r3, [r7, #31]
 8001504:	b299      	uxth	r1, r3
 8001506:	7fbb      	ldrb	r3, [r7, #30]
 8001508:	b298      	uxth	r0, r3
 800150a:	4b1a      	ldr	r3, [pc, #104]	; (8001574 <_DisplayOutputSignalOffset+0x12c>)
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	b29b      	uxth	r3, r3
 8001510:	2200      	movs	r2, #0
 8001512:	9201      	str	r2, [sp, #4]
 8001514:	9300      	str	r3, [sp, #0]
 8001516:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800151a:	4602      	mov	r2, r0
 800151c:	4620      	mov	r0, r4
 800151e:	f00f f9e7 	bl	80108f0 <ILI9341_Draw_Text>
	{
		char symbol[3] = "-\0";
		ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
	}

}
 8001522:	e021      	b.n	8001568 <_DisplayOutputSignalOffset+0x120>
		char symbol[3] = "-\0";
 8001524:	4a17      	ldr	r2, [pc, #92]	; (8001584 <_DisplayOutputSignalOffset+0x13c>)
 8001526:	f107 0308 	add.w	r3, r7, #8
 800152a:	6812      	ldr	r2, [r2, #0]
 800152c:	4611      	mov	r1, r2
 800152e:	8019      	strh	r1, [r3, #0]
 8001530:	3302      	adds	r3, #2
 8001532:	0c12      	lsrs	r2, r2, #16
 8001534:	701a      	strb	r2, [r3, #0]
		ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001536:	f107 0210 	add.w	r2, r7, #16
 800153a:	f107 0308 	add.w	r3, r7, #8
 800153e:	4611      	mov	r1, r2
 8001540:	4618      	mov	r0, r3
 8001542:	f010 fdc5 	bl	80120d0 <strcat>
 8001546:	4604      	mov	r4, r0
 8001548:	7ffb      	ldrb	r3, [r7, #31]
 800154a:	b299      	uxth	r1, r3
 800154c:	7fbb      	ldrb	r3, [r7, #30]
 800154e:	b298      	uxth	r0, r3
 8001550:	4b08      	ldr	r3, [pc, #32]	; (8001574 <_DisplayOutputSignalOffset+0x12c>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	b29b      	uxth	r3, r3
 8001556:	2200      	movs	r2, #0
 8001558:	9201      	str	r2, [sp, #4]
 800155a:	9300      	str	r3, [sp, #0]
 800155c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001560:	4602      	mov	r2, r0
 8001562:	4620      	mov	r0, r4
 8001564:	f00f f9c4 	bl	80108f0 <ILI9341_Draw_Text>
}
 8001568:	bf00      	nop
 800156a:	372c      	adds	r7, #44	; 0x2c
 800156c:	46bd      	mov	sp, r7
 800156e:	bd90      	pop	{r4, r7, pc}
 8001570:	3a449ba6 	.word	0x3a449ba6
 8001574:	20000000 	.word	0x20000000
 8001578:	0801589c 	.word	0x0801589c
 800157c:	080158a8 	.word	0x080158a8
 8001580:	080158b4 	.word	0x080158b4
 8001584:	080158b8 	.word	0x080158b8

08001588 <_DisplayOutputWaveformIcons>:
 *	@param None
 *	@retval None
 *
 */
void _DisplayOutputWaveformIcons(uint16_t main_xpos, uint16_t main_ypos, uint16_t aux_xpos, uint16_t aux_ypos)
{
 8001588:	b590      	push	{r4, r7, lr}
 800158a:	b089      	sub	sp, #36	; 0x24
 800158c:	af04      	add	r7, sp, #16
 800158e:	4604      	mov	r4, r0
 8001590:	4608      	mov	r0, r1
 8001592:	4611      	mov	r1, r2
 8001594:	461a      	mov	r2, r3
 8001596:	4623      	mov	r3, r4
 8001598:	80fb      	strh	r3, [r7, #6]
 800159a:	4603      	mov	r3, r0
 800159c:	80bb      	strh	r3, [r7, #4]
 800159e:	460b      	mov	r3, r1
 80015a0:	807b      	strh	r3, [r7, #2]
 80015a2:	4613      	mov	r3, r2
 80015a4:	803b      	strh	r3, [r7, #0]

	ILI9341_Draw_Text(" OUT:", 1, main_ypos+10, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 80015a6:	88bb      	ldrh	r3, [r7, #4]
 80015a8:	330a      	adds	r3, #10
 80015aa:	b299      	uxth	r1, r3
 80015ac:	4b94      	ldr	r3, [pc, #592]	; (8001800 <_DisplayOutputWaveformIcons+0x278>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	b29b      	uxth	r3, r3
 80015b2:	2200      	movs	r2, #0
 80015b4:	9201      	str	r2, [sp, #4]
 80015b6:	9300      	str	r3, [sp, #0]
 80015b8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80015bc:	460a      	mov	r2, r1
 80015be:	2101      	movs	r1, #1
 80015c0:	4890      	ldr	r0, [pc, #576]	; (8001804 <_DisplayOutputWaveformIcons+0x27c>)
 80015c2:	f00f f995 	bl	80108f0 <ILI9341_Draw_Text>
	eOutput_mode signal_output_func = SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile->func;
 80015c6:	2000      	movs	r0, #0
 80015c8:	f005 f9c0 	bl	800694c <SM_GetOutputChannel>
 80015cc:	4603      	mov	r3, r0
 80015ce:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	73fb      	strb	r3, [r7, #15]
	switch(signal_output_func)
 80015d6:	7bfb      	ldrb	r3, [r7, #15]
 80015d8:	2b06      	cmp	r3, #6
 80015da:	d878      	bhi.n	80016ce <_DisplayOutputWaveformIcons+0x146>
 80015dc:	a201      	add	r2, pc, #4	; (adr r2, 80015e4 <_DisplayOutputWaveformIcons+0x5c>)
 80015de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015e2:	bf00      	nop
 80015e4:	08001601 	.word	0x08001601
 80015e8:	08001621 	.word	0x08001621
 80015ec:	0800163d 	.word	0x0800163d
 80015f0:	08001659 	.word	0x08001659
 80015f4:	08001675 	.word	0x08001675
 80015f8:	08001691 	.word	0x08001691
 80015fc:	080016ad 	.word	0x080016ad
	{
		case SINE_FUNC_MODE:
			ILI9341_Draw_Wave(main_xpos, main_ypos-20, 3, SIGNAL_OUTPUT_ICON, 100, sineicon_data_table_1300, SINEICON_DATA_SIZE);
 8001600:	88bb      	ldrh	r3, [r7, #4]
 8001602:	3b14      	subs	r3, #20
 8001604:	b299      	uxth	r1, r3
 8001606:	88f8      	ldrh	r0, [r7, #6]
 8001608:	233c      	movs	r3, #60	; 0x3c
 800160a:	9302      	str	r3, [sp, #8]
 800160c:	4b7e      	ldr	r3, [pc, #504]	; (8001808 <_DisplayOutputWaveformIcons+0x280>)
 800160e:	9301      	str	r3, [sp, #4]
 8001610:	2364      	movs	r3, #100	; 0x64
 8001612:	9300      	str	r3, [sp, #0]
 8001614:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001618:	2203      	movs	r2, #3
 800161a:	f00e ffc5 	bl	80105a8 <ILI9341_Draw_Wave>
			break;
 800161e:	e056      	b.n	80016ce <_DisplayOutputWaveformIcons+0x146>
		case SQUARE_FUNC_MODE:
			ILI9341_Draw_Wave(main_xpos, main_ypos, 3, SIGNAL_OUTPUT_ICON, 200, squareicon_data_table_3600, SQUAREICON_DATA_SIZE);
 8001620:	88b9      	ldrh	r1, [r7, #4]
 8001622:	88f8      	ldrh	r0, [r7, #6]
 8001624:	233c      	movs	r3, #60	; 0x3c
 8001626:	9302      	str	r3, [sp, #8]
 8001628:	4b78      	ldr	r3, [pc, #480]	; (800180c <_DisplayOutputWaveformIcons+0x284>)
 800162a:	9301      	str	r3, [sp, #4]
 800162c:	23c8      	movs	r3, #200	; 0xc8
 800162e:	9300      	str	r3, [sp, #0]
 8001630:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001634:	2203      	movs	r2, #3
 8001636:	f00e ffb7 	bl	80105a8 <ILI9341_Draw_Wave>
			break;
 800163a:	e048      	b.n	80016ce <_DisplayOutputWaveformIcons+0x146>
		case SAW_FUNC_MODE:
			ILI9341_Draw_Wave(main_xpos, main_ypos, 3, SIGNAL_OUTPUT_ICON, 200, sawicon_data_table_3600, SAWICON_DATA_SIZE);
 800163c:	88b9      	ldrh	r1, [r7, #4]
 800163e:	88f8      	ldrh	r0, [r7, #6]
 8001640:	233c      	movs	r3, #60	; 0x3c
 8001642:	9302      	str	r3, [sp, #8]
 8001644:	4b72      	ldr	r3, [pc, #456]	; (8001810 <_DisplayOutputWaveformIcons+0x288>)
 8001646:	9301      	str	r3, [sp, #4]
 8001648:	23c8      	movs	r3, #200	; 0xc8
 800164a:	9300      	str	r3, [sp, #0]
 800164c:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001650:	2203      	movs	r2, #3
 8001652:	f00e ffa9 	bl	80105a8 <ILI9341_Draw_Wave>
			break;
 8001656:	e03a      	b.n	80016ce <_DisplayOutputWaveformIcons+0x146>
		case REV_SAW_FUNC_MODE:
			ILI9341_Draw_Wave(main_xpos, main_ypos, 3, SIGNAL_OUTPUT_ICON, 200, sawicon_rev_data_table_3600, SAWICON_REV_DATA_SIZE);
 8001658:	88b9      	ldrh	r1, [r7, #4]
 800165a:	88f8      	ldrh	r0, [r7, #6]
 800165c:	233c      	movs	r3, #60	; 0x3c
 800165e:	9302      	str	r3, [sp, #8]
 8001660:	4b6c      	ldr	r3, [pc, #432]	; (8001814 <_DisplayOutputWaveformIcons+0x28c>)
 8001662:	9301      	str	r3, [sp, #4]
 8001664:	23c8      	movs	r3, #200	; 0xc8
 8001666:	9300      	str	r3, [sp, #0]
 8001668:	f240 23fd 	movw	r3, #765	; 0x2fd
 800166c:	2203      	movs	r2, #3
 800166e:	f00e ff9b 	bl	80105a8 <ILI9341_Draw_Wave>
			break;
 8001672:	e02c      	b.n	80016ce <_DisplayOutputWaveformIcons+0x146>
		case TRIANGLE_FUNC_MODE:
			ILI9341_Draw_Wave(main_xpos, main_ypos, 3, SIGNAL_OUTPUT_ICON, 200, triangleicon_data_table_3600, TRIANGLEICON_DATA_SIZE);
 8001674:	88b9      	ldrh	r1, [r7, #4]
 8001676:	88f8      	ldrh	r0, [r7, #6]
 8001678:	233c      	movs	r3, #60	; 0x3c
 800167a:	9302      	str	r3, [sp, #8]
 800167c:	4b66      	ldr	r3, [pc, #408]	; (8001818 <_DisplayOutputWaveformIcons+0x290>)
 800167e:	9301      	str	r3, [sp, #4]
 8001680:	23c8      	movs	r3, #200	; 0xc8
 8001682:	9300      	str	r3, [sp, #0]
 8001684:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001688:	2203      	movs	r2, #3
 800168a:	f00e ff8d 	bl	80105a8 <ILI9341_Draw_Wave>
			break;
 800168e:	e01e      	b.n	80016ce <_DisplayOutputWaveformIcons+0x146>
		case IMPULSE_FUNC_MODE:
			ILI9341_Draw_Wave(main_xpos, main_ypos, 3, SIGNAL_OUTPUT_ICON, 200, triangleicon_data_table_3600, TRIANGLEICON_DATA_SIZE);
 8001690:	88b9      	ldrh	r1, [r7, #4]
 8001692:	88f8      	ldrh	r0, [r7, #6]
 8001694:	233c      	movs	r3, #60	; 0x3c
 8001696:	9302      	str	r3, [sp, #8]
 8001698:	4b5f      	ldr	r3, [pc, #380]	; (8001818 <_DisplayOutputWaveformIcons+0x290>)
 800169a:	9301      	str	r3, [sp, #4]
 800169c:	23c8      	movs	r3, #200	; 0xc8
 800169e:	9300      	str	r3, [sp, #0]
 80016a0:	f240 23fd 	movw	r3, #765	; 0x2fd
 80016a4:	2203      	movs	r2, #3
 80016a6:	f00e ff7f 	bl	80105a8 <ILI9341_Draw_Wave>
			break;
 80016aa:	e010      	b.n	80016ce <_DisplayOutputWaveformIcons+0x146>
		case PWM_FUNC_MODE:
			ILI9341_Draw_Text("PWM", main_xpos, main_ypos+10, SIGNAL_OUTPUT_ICON, text_size, NORMAL_TEXT_BGCOLOUR);
 80016ac:	88bb      	ldrh	r3, [r7, #4]
 80016ae:	330a      	adds	r3, #10
 80016b0:	b298      	uxth	r0, r3
 80016b2:	4b53      	ldr	r3, [pc, #332]	; (8001800 <_DisplayOutputWaveformIcons+0x278>)
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	b29b      	uxth	r3, r3
 80016b8:	88f9      	ldrh	r1, [r7, #6]
 80016ba:	2200      	movs	r2, #0
 80016bc:	9201      	str	r2, [sp, #4]
 80016be:	9300      	str	r3, [sp, #0]
 80016c0:	f240 23fd 	movw	r3, #765	; 0x2fd
 80016c4:	4602      	mov	r2, r0
 80016c6:	4855      	ldr	r0, [pc, #340]	; (800181c <_DisplayOutputWaveformIcons+0x294>)
 80016c8:	f00f f912 	bl	80108f0 <ILI9341_Draw_Text>
			break;
 80016cc:	bf00      	nop
	}

	ILI9341_Draw_Text("AUX:", 170, aux_ypos+10, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 80016ce:	883b      	ldrh	r3, [r7, #0]
 80016d0:	330a      	adds	r3, #10
 80016d2:	b299      	uxth	r1, r3
 80016d4:	4b4a      	ldr	r3, [pc, #296]	; (8001800 <_DisplayOutputWaveformIcons+0x278>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	b29b      	uxth	r3, r3
 80016da:	2200      	movs	r2, #0
 80016dc:	9201      	str	r2, [sp, #4]
 80016de:	9300      	str	r3, [sp, #0]
 80016e0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80016e4:	460a      	mov	r2, r1
 80016e6:	21aa      	movs	r1, #170	; 0xaa
 80016e8:	484d      	ldr	r0, [pc, #308]	; (8001820 <_DisplayOutputWaveformIcons+0x298>)
 80016ea:	f00f f901 	bl	80108f0 <ILI9341_Draw_Text>
	eOutput_mode Aux_output_func = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 80016ee:	2001      	movs	r0, #1
 80016f0:	f005 f92c 	bl	800694c <SM_GetOutputChannel>
 80016f4:	4603      	mov	r3, r0
 80016f6:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	73bb      	strb	r3, [r7, #14]
	switch(Aux_output_func)
 80016fe:	7bbb      	ldrb	r3, [r7, #14]
 8001700:	2b06      	cmp	r3, #6
 8001702:	d878      	bhi.n	80017f6 <_DisplayOutputWaveformIcons+0x26e>
 8001704:	a201      	add	r2, pc, #4	; (adr r2, 800170c <_DisplayOutputWaveformIcons+0x184>)
 8001706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800170a:	bf00      	nop
 800170c:	08001729 	.word	0x08001729
 8001710:	08001749 	.word	0x08001749
 8001714:	08001765 	.word	0x08001765
 8001718:	08001781 	.word	0x08001781
 800171c:	0800179d 	.word	0x0800179d
 8001720:	080017b9 	.word	0x080017b9
 8001724:	080017d5 	.word	0x080017d5
	{
		case SINE_FUNC_MODE:

			ILI9341_Draw_Wave(aux_xpos, aux_ypos-20, 3, Aux_OUTPUT_ICON, 100, sineicon_data_table_1300, SINEICON_DATA_SIZE);
 8001728:	883b      	ldrh	r3, [r7, #0]
 800172a:	3b14      	subs	r3, #20
 800172c:	b299      	uxth	r1, r3
 800172e:	8878      	ldrh	r0, [r7, #2]
 8001730:	233c      	movs	r3, #60	; 0x3c
 8001732:	9302      	str	r3, [sp, #8]
 8001734:	4b34      	ldr	r3, [pc, #208]	; (8001808 <_DisplayOutputWaveformIcons+0x280>)
 8001736:	9301      	str	r3, [sp, #4]
 8001738:	2364      	movs	r3, #100	; 0x64
 800173a:	9300      	str	r3, [sp, #0]
 800173c:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8001740:	2203      	movs	r2, #3
 8001742:	f00e ff31 	bl	80105a8 <ILI9341_Draw_Wave>
			break;
 8001746:	e056      	b.n	80017f6 <_DisplayOutputWaveformIcons+0x26e>
		case SQUARE_FUNC_MODE:
			ILI9341_Draw_Wave(aux_xpos, aux_ypos, 3, Aux_OUTPUT_ICON, 200, squareicon_data_table_3600, SQUAREICON_DATA_SIZE);
 8001748:	8839      	ldrh	r1, [r7, #0]
 800174a:	8878      	ldrh	r0, [r7, #2]
 800174c:	233c      	movs	r3, #60	; 0x3c
 800174e:	9302      	str	r3, [sp, #8]
 8001750:	4b2e      	ldr	r3, [pc, #184]	; (800180c <_DisplayOutputWaveformIcons+0x284>)
 8001752:	9301      	str	r3, [sp, #4]
 8001754:	23c8      	movs	r3, #200	; 0xc8
 8001756:	9300      	str	r3, [sp, #0]
 8001758:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800175c:	2203      	movs	r2, #3
 800175e:	f00e ff23 	bl	80105a8 <ILI9341_Draw_Wave>
			break;
 8001762:	e048      	b.n	80017f6 <_DisplayOutputWaveformIcons+0x26e>
		case SAW_FUNC_MODE:
			ILI9341_Draw_Wave(aux_xpos, aux_ypos, 3, Aux_OUTPUT_ICON, 200, sawicon_data_table_3600, SAWICON_DATA_SIZE);
 8001764:	8839      	ldrh	r1, [r7, #0]
 8001766:	8878      	ldrh	r0, [r7, #2]
 8001768:	233c      	movs	r3, #60	; 0x3c
 800176a:	9302      	str	r3, [sp, #8]
 800176c:	4b28      	ldr	r3, [pc, #160]	; (8001810 <_DisplayOutputWaveformIcons+0x288>)
 800176e:	9301      	str	r3, [sp, #4]
 8001770:	23c8      	movs	r3, #200	; 0xc8
 8001772:	9300      	str	r3, [sp, #0]
 8001774:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8001778:	2203      	movs	r2, #3
 800177a:	f00e ff15 	bl	80105a8 <ILI9341_Draw_Wave>
			break;
 800177e:	e03a      	b.n	80017f6 <_DisplayOutputWaveformIcons+0x26e>
		case REV_SAW_FUNC_MODE:
			ILI9341_Draw_Wave(aux_xpos, aux_ypos, 3, Aux_OUTPUT_ICON, 200, sawicon_rev_data_table_3600, SAWICON_REV_DATA_SIZE);
 8001780:	8839      	ldrh	r1, [r7, #0]
 8001782:	8878      	ldrh	r0, [r7, #2]
 8001784:	233c      	movs	r3, #60	; 0x3c
 8001786:	9302      	str	r3, [sp, #8]
 8001788:	4b22      	ldr	r3, [pc, #136]	; (8001814 <_DisplayOutputWaveformIcons+0x28c>)
 800178a:	9301      	str	r3, [sp, #4]
 800178c:	23c8      	movs	r3, #200	; 0xc8
 800178e:	9300      	str	r3, [sp, #0]
 8001790:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8001794:	2203      	movs	r2, #3
 8001796:	f00e ff07 	bl	80105a8 <ILI9341_Draw_Wave>
			break;
 800179a:	e02c      	b.n	80017f6 <_DisplayOutputWaveformIcons+0x26e>
		case TRIANGLE_FUNC_MODE:
			ILI9341_Draw_Wave(aux_xpos, aux_ypos, 3, Aux_OUTPUT_ICON, 200, triangleicon_data_table_3600, TRIANGLEICON_DATA_SIZE);
 800179c:	8839      	ldrh	r1, [r7, #0]
 800179e:	8878      	ldrh	r0, [r7, #2]
 80017a0:	233c      	movs	r3, #60	; 0x3c
 80017a2:	9302      	str	r3, [sp, #8]
 80017a4:	4b1c      	ldr	r3, [pc, #112]	; (8001818 <_DisplayOutputWaveformIcons+0x290>)
 80017a6:	9301      	str	r3, [sp, #4]
 80017a8:	23c8      	movs	r3, #200	; 0xc8
 80017aa:	9300      	str	r3, [sp, #0]
 80017ac:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80017b0:	2203      	movs	r2, #3
 80017b2:	f00e fef9 	bl	80105a8 <ILI9341_Draw_Wave>
			break;
 80017b6:	e01e      	b.n	80017f6 <_DisplayOutputWaveformIcons+0x26e>
		case IMPULSE_FUNC_MODE:
			ILI9341_Draw_Wave(aux_xpos, aux_ypos, 3, Aux_OUTPUT_ICON, 200, triangleicon_data_table_3600, TRIANGLEICON_DATA_SIZE);
 80017b8:	8839      	ldrh	r1, [r7, #0]
 80017ba:	8878      	ldrh	r0, [r7, #2]
 80017bc:	233c      	movs	r3, #60	; 0x3c
 80017be:	9302      	str	r3, [sp, #8]
 80017c0:	4b15      	ldr	r3, [pc, #84]	; (8001818 <_DisplayOutputWaveformIcons+0x290>)
 80017c2:	9301      	str	r3, [sp, #4]
 80017c4:	23c8      	movs	r3, #200	; 0xc8
 80017c6:	9300      	str	r3, [sp, #0]
 80017c8:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80017cc:	2203      	movs	r2, #3
 80017ce:	f00e feeb 	bl	80105a8 <ILI9341_Draw_Wave>
			break;
 80017d2:	e010      	b.n	80017f6 <_DisplayOutputWaveformIcons+0x26e>
		case PWM_FUNC_MODE:
			ILI9341_Draw_Text("PWM", aux_xpos, aux_ypos+10, Aux_OUTPUT_ICON, text_size, NORMAL_TEXT_BGCOLOUR);
 80017d4:	883b      	ldrh	r3, [r7, #0]
 80017d6:	330a      	adds	r3, #10
 80017d8:	b298      	uxth	r0, r3
 80017da:	4b09      	ldr	r3, [pc, #36]	; (8001800 <_DisplayOutputWaveformIcons+0x278>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	b29b      	uxth	r3, r3
 80017e0:	8879      	ldrh	r1, [r7, #2]
 80017e2:	2200      	movs	r2, #0
 80017e4:	9201      	str	r2, [sp, #4]
 80017e6:	9300      	str	r3, [sp, #0]
 80017e8:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80017ec:	4602      	mov	r2, r0
 80017ee:	480b      	ldr	r0, [pc, #44]	; (800181c <_DisplayOutputWaveformIcons+0x294>)
 80017f0:	f00f f87e 	bl	80108f0 <ILI9341_Draw_Text>
			break;
 80017f4:	bf00      	nop
	}
}
 80017f6:	bf00      	nop
 80017f8:	3714      	adds	r7, #20
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd90      	pop	{r4, r7, pc}
 80017fe:	bf00      	nop
 8001800:	20000000 	.word	0x20000000
 8001804:	080158bc 	.word	0x080158bc
 8001808:	200010a4 	.word	0x200010a4
 800180c:	20001194 	.word	0x20001194
 8001810:	20000ec4 	.word	0x20000ec4
 8001814:	20000fb4 	.word	0x20000fb4
 8001818:	20001284 	.word	0x20001284
 800181c:	080158c4 	.word	0x080158c4
 8001820:	080158c8 	.word	0x080158c8

08001824 <DM_RefreshScreen>:
 *	@param None
 *	@retval None
 *
 */
void DM_RefreshScreen()
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af04      	add	r7, sp, #16



	// pause display interrupts
	HAL_TIM_Base_Stop_IT(&htim15);
 800182a:	4820      	ldr	r0, [pc, #128]	; (80018ac <DM_RefreshScreen+0x88>)
 800182c:	f00c f846 	bl	800d8bc <HAL_TIM_Base_Stop_IT>


	ILI9341_Fill_Screen(SCREEN_BGCOLOUR);
 8001830:	2000      	movs	r0, #0
 8001832:	f00f fadd 	bl	8010df0 <ILI9341_Fill_Screen>
	GUI_DrawPolygon(Points, 3, RED);
	GUI_FillPolygon(Points2, 3, BLUE);
	GUI_DrawEllipse(250, 110, 20, 30, GREEN);
	GUI_FillEllipse(250, 110, 20, 30, WHITE);
*/
	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	0,
 8001836:	2300      	movs	r3, #0
 8001838:	9302      	str	r3, [sp, #8]
 800183a:	2302      	movs	r3, #2
 800183c:	9301      	str	r3, [sp, #4]
 800183e:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001842:	9300      	str	r3, [sp, #0]
 8001844:	2328      	movs	r3, #40	; 0x28
 8001846:	2250      	movs	r2, #80	; 0x50
 8001848:	21c8      	movs	r1, #200	; 0xc8
 800184a:	2000      	movs	r0, #0
 800184c:	f00e feed 	bl	801062a <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													BTN1_FILL_COLOUR,
													BTN1_BORDER_WEIGHT,
													BTN1_BORDER_COLOUR);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	BTN_WIDTH,
 8001850:	2300      	movs	r3, #0
 8001852:	9302      	str	r3, [sp, #8]
 8001854:	2302      	movs	r3, #2
 8001856:	9301      	str	r3, [sp, #4]
 8001858:	f241 43a2 	movw	r3, #5282	; 0x14a2
 800185c:	9300      	str	r3, [sp, #0]
 800185e:	2328      	movs	r3, #40	; 0x28
 8001860:	2250      	movs	r2, #80	; 0x50
 8001862:	21c8      	movs	r1, #200	; 0xc8
 8001864:	2050      	movs	r0, #80	; 0x50
 8001866:	f00e fee0 	bl	801062a <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													BTN2_FILL_COLOUR,
													BTN2_BORDER_WEIGHT,
													BTN2_BORDER_COLOUR);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	BTN_WIDTH*2,
 800186a:	2300      	movs	r3, #0
 800186c:	9302      	str	r3, [sp, #8]
 800186e:	2302      	movs	r3, #2
 8001870:	9301      	str	r3, [sp, #4]
 8001872:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001876:	9300      	str	r3, [sp, #0]
 8001878:	2328      	movs	r3, #40	; 0x28
 800187a:	2250      	movs	r2, #80	; 0x50
 800187c:	21c8      	movs	r1, #200	; 0xc8
 800187e:	20a0      	movs	r0, #160	; 0xa0
 8001880:	f00e fed3 	bl	801062a <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													BTN3_FILL_COLOUR,
													BTN3_BORDER_WEIGHT,
													BTN3_BORDER_COLOUR);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	BTN_WIDTH*3,
 8001884:	2300      	movs	r3, #0
 8001886:	9302      	str	r3, [sp, #8]
 8001888:	2302      	movs	r3, #2
 800188a:	9301      	str	r3, [sp, #4]
 800188c:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8001890:	9300      	str	r3, [sp, #0]
 8001892:	2328      	movs	r3, #40	; 0x28
 8001894:	2250      	movs	r2, #80	; 0x50
 8001896:	21c8      	movs	r1, #200	; 0xc8
 8001898:	20f0      	movs	r0, #240	; 0xf0
 800189a:	f00e fec6 	bl	801062a <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN4_FILL_COLOUR,
													BTN4_BORDER_WEIGHT,
													BTN4_BORDER_COLOUR);

	// resume diaplay interrupts
	HAL_TIM_Base_Start_IT(&htim15);
 800189e:	4803      	ldr	r0, [pc, #12]	; (80018ac <DM_RefreshScreen+0x88>)
 80018a0:	f00b ffd6 	bl	800d850 <HAL_TIM_Base_Start_IT>


}
 80018a4:	bf00      	nop
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	20002ab0 	.word	0x20002ab0

080018b0 <DM_SetErrorDebugMsg>:
	ILI9341_Draw_Text("- SINE", 	10, 30, WHITE, 2, BLACK);
	*/
}

void DM_SetErrorDebugMsg(char* msg)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af02      	add	r7, sp, #8
 80018b6:	6078      	str	r0, [r7, #4]
	snprintf(ErrorDebugMsg, sizeof(ErrorDebugMsg), "%s", msg);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	4a0a      	ldr	r2, [pc, #40]	; (80018e4 <DM_SetErrorDebugMsg+0x34>)
 80018bc:	212d      	movs	r1, #45	; 0x2d
 80018be:	480a      	ldr	r0, [pc, #40]	; (80018e8 <DM_SetErrorDebugMsg+0x38>)
 80018c0:	f010 fbd2 	bl	8012068 <sniprintf>
	ILI9341_Draw_Text(ErrorDebugMsg, 10, 190, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 80018c4:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80018c8:	9301      	str	r3, [sp, #4]
 80018ca:	2301      	movs	r3, #1
 80018cc:	9300      	str	r3, [sp, #0]
 80018ce:	2300      	movs	r3, #0
 80018d0:	22be      	movs	r2, #190	; 0xbe
 80018d2:	210a      	movs	r1, #10
 80018d4:	4804      	ldr	r0, [pc, #16]	; (80018e8 <DM_SetErrorDebugMsg+0x38>)
 80018d6:	f00f f80b 	bl	80108f0 <ILI9341_Draw_Text>
}
 80018da:	bf00      	nop
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	0801594c 	.word	0x0801594c
 80018e8:	200020a4 	.word	0x200020a4

080018ec <FreqMenu_DrawMenu>:
			Freq_Prescaler_Menu_State,
 *	@retval None
 *
 */
void FreqMenu_DrawMenu(eSystemState pMenu)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	4603      	mov	r3, r0
 80018f4:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 80018f6:	79fb      	ldrb	r3, [r7, #7]
 80018f8:	3b0a      	subs	r3, #10
 80018fa:	2b04      	cmp	r3, #4
 80018fc:	d81b      	bhi.n	8001936 <FreqMenu_DrawMenu+0x4a>
 80018fe:	a201      	add	r2, pc, #4	; (adr r2, 8001904 <FreqMenu_DrawMenu+0x18>)
 8001900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001904:	08001919 	.word	0x08001919
 8001908:	0800191f 	.word	0x0800191f
 800190c:	08001925 	.word	0x08001925
 8001910:	0800192b 	.word	0x0800192b
 8001914:	08001931 	.word	0x08001931
	{
		case Freq_Main_Menu_State:
			FreqMenu_DrawMainMenu();
 8001918:	f000 f812 	bl	8001940 <FreqMenu_DrawMainMenu>
			break;
 800191c:	e00c      	b.n	8001938 <FreqMenu_DrawMenu+0x4c>
		case Freq_Preset_Menu_State:
			FreqMenu_DrawPresetMenu();
 800191e:	f000 f859 	bl	80019d4 <FreqMenu_DrawPresetMenu>
			break;
 8001922:	e009      	b.n	8001938 <FreqMenu_DrawMenu+0x4c>
		case Freq_Adjust_Menu_State:
			FreqMenu_DrawAdjustMenu();
 8001924:	f001 fb06 	bl	8002f34 <FreqMenu_DrawAdjustMenu>
			break;
 8001928:	e006      	b.n	8001938 <FreqMenu_DrawMenu+0x4c>
		case Freq_Sweep_Menu_State:
			FreqMenu_DrawSweepMenu();
 800192a:	f001 fb19 	bl	8002f60 <FreqMenu_DrawSweepMenu>
			break;
 800192e:	e003      	b.n	8001938 <FreqMenu_DrawMenu+0x4c>
		case Freq_Prescaler_Menu_State:
			FreqMenu_DrawPrescalerMenu();
 8001930:	f001 fce2 	bl	80032f8 <FreqMenu_DrawPrescalerMenu>
			break;
 8001934:	e000      	b.n	8001938 <FreqMenu_DrawMenu+0x4c>
		default:
			break;
 8001936:	bf00      	nop

	}
}
 8001938:	bf00      	nop
 800193a:	3708      	adds	r7, #8
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}

08001940 <FreqMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawMainMenu()
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af02      	add	r7, sp, #8
	// main
	ILI9341_Draw_Text("OUT->FREQ", 	5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8001946:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800194a:	9301      	str	r3, [sp, #4]
 800194c:	2302      	movs	r3, #2
 800194e:	9300      	str	r3, [sp, #0]
 8001950:	2300      	movs	r3, #0
 8001952:	220a      	movs	r2, #10
 8001954:	2105      	movs	r1, #5
 8001956:	481a      	ldr	r0, [pc, #104]	; (80019c0 <FreqMenu_DrawMainMenu+0x80>)
 8001958:	f00e ffca 	bl	80108f0 <ILI9341_Draw_Text>
//	ILI9341_Draw_Text("Select an option below", 	30, 165, BLACK, 2, WHITE);

	DM_DisplayFormattedOutput();
 800195c:	f7ff fa7c 	bl	8000e58 <DM_DisplayFormattedOutput>

	// buttons
	ILI9341_Draw_Text("COARSE", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8001960:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001964:	9301      	str	r3, [sp, #4]
 8001966:	2302      	movs	r3, #2
 8001968:	9300      	str	r3, [sp, #0]
 800196a:	2300      	movs	r3, #0
 800196c:	22d2      	movs	r2, #210	; 0xd2
 800196e:	2105      	movs	r1, #5
 8001970:	4814      	ldr	r0, [pc, #80]	; (80019c4 <FreqMenu_DrawMainMenu+0x84>)
 8001972:	f00e ffbd 	bl	80108f0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("FINE", 97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8001976:	f241 43a2 	movw	r3, #5282	; 0x14a2
 800197a:	9301      	str	r3, [sp, #4]
 800197c:	2302      	movs	r3, #2
 800197e:	9300      	str	r3, [sp, #0]
 8001980:	2300      	movs	r3, #0
 8001982:	22d2      	movs	r2, #210	; 0xd2
 8001984:	2161      	movs	r1, #97	; 0x61
 8001986:	4810      	ldr	r0, [pc, #64]	; (80019c8 <FreqMenu_DrawMainMenu+0x88>)
 8001988:	f00e ffb2 	bl	80108f0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SWEEP",  172, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 800198c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001990:	9301      	str	r3, [sp, #4]
 8001992:	2302      	movs	r3, #2
 8001994:	9300      	str	r3, [sp, #0]
 8001996:	2300      	movs	r3, #0
 8001998:	22d2      	movs	r2, #210	; 0xd2
 800199a:	21ac      	movs	r1, #172	; 0xac
 800199c:	480b      	ldr	r0, [pc, #44]	; (80019cc <FreqMenu_DrawMainMenu+0x8c>)
 800199e:	f00e ffa7 	bl	80108f0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("PSC", 260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 80019a2:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80019a6:	9301      	str	r3, [sp, #4]
 80019a8:	2302      	movs	r3, #2
 80019aa:	9300      	str	r3, [sp, #0]
 80019ac:	2300      	movs	r3, #0
 80019ae:	22d2      	movs	r2, #210	; 0xd2
 80019b0:	f44f 7182 	mov.w	r1, #260	; 0x104
 80019b4:	4806      	ldr	r0, [pc, #24]	; (80019d0 <FreqMenu_DrawMainMenu+0x90>)
 80019b6:	f00e ff9b 	bl	80108f0 <ILI9341_Draw_Text>
}
 80019ba:	bf00      	nop
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	08015950 	.word	0x08015950
 80019c4:	0801595c 	.word	0x0801595c
 80019c8:	08015964 	.word	0x08015964
 80019cc:	0801596c 	.word	0x0801596c
 80019d0:	08015974 	.word	0x08015974

080019d4 <FreqMenu_DrawPresetMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawPresetMenu()
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af02      	add	r7, sp, #8



	ILI9341_Draw_Text("OUT->FREQ->PRESET", 	5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 80019da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019de:	9301      	str	r3, [sp, #4]
 80019e0:	2302      	movs	r3, #2
 80019e2:	9300      	str	r3, [sp, #0]
 80019e4:	2300      	movs	r3, #0
 80019e6:	220a      	movs	r2, #10
 80019e8:	2105      	movs	r1, #5
 80019ea:	4887      	ldr	r0, [pc, #540]	; (8001c08 <FreqMenu_DrawPresetMenu+0x234>)
 80019ec:	f00e ff80 	bl	80108f0 <ILI9341_Draw_Text>

	DM_DisplayInputTriggerStatus();
 80019f0:	f7ff fa52 	bl	8000e98 <DM_DisplayInputTriggerStatus>

	uint8_t menu_pos_y1 = 40;
 80019f4:	2328      	movs	r3, #40	; 0x28
 80019f6:	73fb      	strb	r3, [r7, #15]
	uint8_t menu_pos_y2 = 60;
 80019f8:	233c      	movs	r3, #60	; 0x3c
 80019fa:	73bb      	strb	r3, [r7, #14]
	uint8_t menu_pos_y3 = 80;
 80019fc:	2350      	movs	r3, #80	; 0x50
 80019fe:	737b      	strb	r3, [r7, #13]
	uint8_t menu_pos_y4 = 100;
 8001a00:	2364      	movs	r3, #100	; 0x64
 8001a02:	733b      	strb	r3, [r7, #12]
	uint8_t menu_pos_y5 = 120;
 8001a04:	2378      	movs	r3, #120	; 0x78
 8001a06:	72fb      	strb	r3, [r7, #11]
	uint8_t menu_pos_y6 = 140;
 8001a08:	238c      	movs	r3, #140	; 0x8c
 8001a0a:	72bb      	strb	r3, [r7, #10]
	uint8_t menu_pos_y7 = 160;
 8001a0c:	23a0      	movs	r3, #160	; 0xa0
 8001a0e:	727b      	strb	r3, [r7, #9]
	FreqProfile_t *pFreqPresetTmp =  FreqO_GetFPresetObject();
 8001a10:	f003 ffb0 	bl	8005974 <FreqO_GetFPresetObject>
 8001a14:	6078      	str	r0, [r7, #4]
	if(pFreqPresetTmp)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	f001 825d 	beq.w	8002ed8 <FreqMenu_DrawPresetMenu+0x1504>
	{
		switch(pFreqPresetTmp->hertz)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001a26:	4293      	cmp	r3, r2
 8001a28:	f000 849a 	beq.w	8002360 <FreqMenu_DrawPresetMenu+0x98c>
 8001a2c:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d817      	bhi.n	8001a64 <FreqMenu_DrawPresetMenu+0x90>
 8001a34:	2b32      	cmp	r3, #50	; 0x32
 8001a36:	f000 81b3 	beq.w	8001da0 <FreqMenu_DrawPresetMenu+0x3cc>
 8001a3a:	2b32      	cmp	r3, #50	; 0x32
 8001a3c:	d806      	bhi.n	8001a4c <FreqMenu_DrawPresetMenu+0x78>
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d038      	beq.n	8001ab4 <FreqMenu_DrawPresetMenu+0xe0>
 8001a42:	2b0a      	cmp	r3, #10
 8001a44:	f000 8102 	beq.w	8001c4c <FreqMenu_DrawPresetMenu+0x278>
	else
	{
		ILI9341_Draw_Text("FreqMenus::FreqMenu_DrawFreqPresetMenu() Error", 		5, 180, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
	}

}
 8001a48:	f001 ba52 	b.w	8002ef0 <FreqMenu_DrawPresetMenu+0x151c>
		switch(pFreqPresetTmp->hertz)
 8001a4c:	2bfa      	cmp	r3, #250	; 0xfa
 8001a4e:	f000 8317 	beq.w	8002080 <FreqMenu_DrawPresetMenu+0x6ac>
 8001a52:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001a56:	f000 83d9 	beq.w	800220c <FreqMenu_DrawPresetMenu+0x838>
 8001a5a:	2b64      	cmp	r3, #100	; 0x64
 8001a5c:	f000 8266 	beq.w	8001f2c <FreqMenu_DrawPresetMenu+0x558>
}
 8001a60:	f001 ba46 	b.w	8002ef0 <FreqMenu_DrawPresetMenu+0x151c>
		switch(pFreqPresetTmp->hertz)
 8001a64:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	f000 8758 	beq.w	800291e <FreqMenu_DrawPresetMenu+0xf4a>
 8001a6e:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d80f      	bhi.n	8001a96 <FreqMenu_DrawPresetMenu+0xc2>
 8001a76:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	f000 85e0 	beq.w	8002640 <FreqMenu_DrawPresetMenu+0xc6c>
 8001a80:	f242 7210 	movw	r2, #10000	; 0x2710
 8001a84:	4293      	cmp	r3, r2
 8001a86:	f000 86a1 	beq.w	80027cc <FreqMenu_DrawPresetMenu+0xdf8>
 8001a8a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a8e:	f000 852d 	beq.w	80024ec <FreqMenu_DrawPresetMenu+0xb18>
}
 8001a92:	f001 ba2d 	b.w	8002ef0 <FreqMenu_DrawPresetMenu+0x151c>
		switch(pFreqPresetTmp->hertz)
 8001a96:	4a5d      	ldr	r2, [pc, #372]	; (8001c0c <FreqMenu_DrawPresetMenu+0x238>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	f001 80ae 	beq.w	8002bfa <FreqMenu_DrawPresetMenu+0x1226>
 8001a9e:	4a5c      	ldr	r2, [pc, #368]	; (8001c10 <FreqMenu_DrawPresetMenu+0x23c>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	f001 816f 	beq.w	8002d84 <FreqMenu_DrawPresetMenu+0x13b0>
 8001aa6:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	f000 87fc 	beq.w	8002aa8 <FreqMenu_DrawPresetMenu+0x10d4>
}
 8001ab0:	f001 ba1e 	b.w	8002ef0 <FreqMenu_DrawPresetMenu+0x151c>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001ab4:	7bfb      	ldrb	r3, [r7, #15]
 8001ab6:	b29a      	uxth	r2, r3
 8001ab8:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001abc:	9301      	str	r3, [sp, #4]
 8001abe:	2302      	movs	r3, #2
 8001ac0:	9300      	str	r3, [sp, #0]
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	2105      	movs	r1, #5
 8001ac6:	4853      	ldr	r0, [pc, #332]	; (8001c14 <FreqMenu_DrawPresetMenu+0x240>)
 8001ac8:	f00e ff12 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001acc:	7bbb      	ldrb	r3, [r7, #14]
 8001ace:	b29a      	uxth	r2, r3
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	9301      	str	r3, [sp, #4]
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	9300      	str	r3, [sp, #0]
 8001ad8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001adc:	2105      	movs	r1, #5
 8001ade:	484e      	ldr	r0, [pc, #312]	; (8001c18 <FreqMenu_DrawPresetMenu+0x244>)
 8001ae0:	f00e ff06 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ae4:	7b7b      	ldrb	r3, [r7, #13]
 8001ae6:	b29a      	uxth	r2, r3
 8001ae8:	2300      	movs	r3, #0
 8001aea:	9301      	str	r3, [sp, #4]
 8001aec:	2302      	movs	r3, #2
 8001aee:	9300      	str	r3, [sp, #0]
 8001af0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001af4:	2105      	movs	r1, #5
 8001af6:	4849      	ldr	r0, [pc, #292]	; (8001c1c <FreqMenu_DrawPresetMenu+0x248>)
 8001af8:	f00e fefa 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001afc:	7b3b      	ldrb	r3, [r7, #12]
 8001afe:	b29a      	uxth	r2, r3
 8001b00:	2300      	movs	r3, #0
 8001b02:	9301      	str	r3, [sp, #4]
 8001b04:	2302      	movs	r3, #2
 8001b06:	9300      	str	r3, [sp, #0]
 8001b08:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b0c:	2105      	movs	r1, #5
 8001b0e:	4844      	ldr	r0, [pc, #272]	; (8001c20 <FreqMenu_DrawPresetMenu+0x24c>)
 8001b10:	f00e feee 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b14:	7afb      	ldrb	r3, [r7, #11]
 8001b16:	b29a      	uxth	r2, r3
 8001b18:	2300      	movs	r3, #0
 8001b1a:	9301      	str	r3, [sp, #4]
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	9300      	str	r3, [sp, #0]
 8001b20:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b24:	2105      	movs	r1, #5
 8001b26:	483f      	ldr	r0, [pc, #252]	; (8001c24 <FreqMenu_DrawPresetMenu+0x250>)
 8001b28:	f00e fee2 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b2c:	7abb      	ldrb	r3, [r7, #10]
 8001b2e:	b29a      	uxth	r2, r3
 8001b30:	2300      	movs	r3, #0
 8001b32:	9301      	str	r3, [sp, #4]
 8001b34:	2302      	movs	r3, #2
 8001b36:	9300      	str	r3, [sp, #0]
 8001b38:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b3c:	2105      	movs	r1, #5
 8001b3e:	483a      	ldr	r0, [pc, #232]	; (8001c28 <FreqMenu_DrawPresetMenu+0x254>)
 8001b40:	f00e fed6 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b44:	7a7b      	ldrb	r3, [r7, #9]
 8001b46:	b29a      	uxth	r2, r3
 8001b48:	2300      	movs	r3, #0
 8001b4a:	9301      	str	r3, [sp, #4]
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	9300      	str	r3, [sp, #0]
 8001b50:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b54:	2105      	movs	r1, #5
 8001b56:	4835      	ldr	r0, [pc, #212]	; (8001c2c <FreqMenu_DrawPresetMenu+0x258>)
 8001b58:	f00e feca 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b5c:	7bfb      	ldrb	r3, [r7, #15]
 8001b5e:	b29a      	uxth	r2, r3
 8001b60:	2300      	movs	r3, #0
 8001b62:	9301      	str	r3, [sp, #4]
 8001b64:	2302      	movs	r3, #2
 8001b66:	9300      	str	r3, [sp, #0]
 8001b68:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b6c:	2178      	movs	r1, #120	; 0x78
 8001b6e:	4830      	ldr	r0, [pc, #192]	; (8001c30 <FreqMenu_DrawPresetMenu+0x25c>)
 8001b70:	f00e febe 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b74:	7bbb      	ldrb	r3, [r7, #14]
 8001b76:	b29a      	uxth	r2, r3
 8001b78:	2300      	movs	r3, #0
 8001b7a:	9301      	str	r3, [sp, #4]
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	9300      	str	r3, [sp, #0]
 8001b80:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b84:	2178      	movs	r1, #120	; 0x78
 8001b86:	482b      	ldr	r0, [pc, #172]	; (8001c34 <FreqMenu_DrawPresetMenu+0x260>)
 8001b88:	f00e feb2 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b8c:	7b7b      	ldrb	r3, [r7, #13]
 8001b8e:	b29a      	uxth	r2, r3
 8001b90:	2300      	movs	r3, #0
 8001b92:	9301      	str	r3, [sp, #4]
 8001b94:	2302      	movs	r3, #2
 8001b96:	9300      	str	r3, [sp, #0]
 8001b98:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b9c:	2178      	movs	r1, #120	; 0x78
 8001b9e:	4826      	ldr	r0, [pc, #152]	; (8001c38 <FreqMenu_DrawPresetMenu+0x264>)
 8001ba0:	f00e fea6 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ba4:	7b3b      	ldrb	r3, [r7, #12]
 8001ba6:	b29a      	uxth	r2, r3
 8001ba8:	2300      	movs	r3, #0
 8001baa:	9301      	str	r3, [sp, #4]
 8001bac:	2302      	movs	r3, #2
 8001bae:	9300      	str	r3, [sp, #0]
 8001bb0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001bb4:	2178      	movs	r1, #120	; 0x78
 8001bb6:	4821      	ldr	r0, [pc, #132]	; (8001c3c <FreqMenu_DrawPresetMenu+0x268>)
 8001bb8:	f00e fe9a 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001bbc:	7afb      	ldrb	r3, [r7, #11]
 8001bbe:	b29a      	uxth	r2, r3
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	9301      	str	r3, [sp, #4]
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	9300      	str	r3, [sp, #0]
 8001bc8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001bcc:	2178      	movs	r1, #120	; 0x78
 8001bce:	481c      	ldr	r0, [pc, #112]	; (8001c40 <FreqMenu_DrawPresetMenu+0x26c>)
 8001bd0:	f00e fe8e 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001bd4:	7abb      	ldrb	r3, [r7, #10]
 8001bd6:	b29a      	uxth	r2, r3
 8001bd8:	2300      	movs	r3, #0
 8001bda:	9301      	str	r3, [sp, #4]
 8001bdc:	2302      	movs	r3, #2
 8001bde:	9300      	str	r3, [sp, #0]
 8001be0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001be4:	2178      	movs	r1, #120	; 0x78
 8001be6:	4817      	ldr	r0, [pc, #92]	; (8001c44 <FreqMenu_DrawPresetMenu+0x270>)
 8001be8:	f00e fe82 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001bec:	7a7b      	ldrb	r3, [r7, #9]
 8001bee:	b29a      	uxth	r2, r3
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	9301      	str	r3, [sp, #4]
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	9300      	str	r3, [sp, #0]
 8001bf8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001bfc:	2178      	movs	r1, #120	; 0x78
 8001bfe:	4812      	ldr	r0, [pc, #72]	; (8001c48 <FreqMenu_DrawPresetMenu+0x274>)
 8001c00:	f00e fe76 	bl	80108f0 <ILI9341_Draw_Text>
				break;
 8001c04:	f001 b974 	b.w	8002ef0 <FreqMenu_DrawPresetMenu+0x151c>
 8001c08:	08015978 	.word	0x08015978
 8001c0c:	000124f8 	.word	0x000124f8
 8001c10:	000186a0 	.word	0x000186a0
 8001c14:	0801598c 	.word	0x0801598c
 8001c18:	08015994 	.word	0x08015994
 8001c1c:	0801599c 	.word	0x0801599c
 8001c20:	080159a4 	.word	0x080159a4
 8001c24:	080159ac 	.word	0x080159ac
 8001c28:	080159b4 	.word	0x080159b4
 8001c2c:	080159bc 	.word	0x080159bc
 8001c30:	080159c4 	.word	0x080159c4
 8001c34:	080159cc 	.word	0x080159cc
 8001c38:	080159d4 	.word	0x080159d4
 8001c3c:	080159dc 	.word	0x080159dc
 8001c40:	080159e4 	.word	0x080159e4
 8001c44:	080159ec 	.word	0x080159ec
 8001c48:	080159f4 	.word	0x080159f4
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c4c:	7bfb      	ldrb	r3, [r7, #15]
 8001c4e:	b29a      	uxth	r2, r3
 8001c50:	2300      	movs	r3, #0
 8001c52:	9301      	str	r3, [sp, #4]
 8001c54:	2302      	movs	r3, #2
 8001c56:	9300      	str	r3, [sp, #0]
 8001c58:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c5c:	2105      	movs	r1, #5
 8001c5e:	48a5      	ldr	r0, [pc, #660]	; (8001ef4 <FreqMenu_DrawPresetMenu+0x520>)
 8001c60:	f00e fe46 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001c64:	7bbb      	ldrb	r3, [r7, #14]
 8001c66:	b29a      	uxth	r2, r3
 8001c68:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001c6c:	9301      	str	r3, [sp, #4]
 8001c6e:	2302      	movs	r3, #2
 8001c70:	9300      	str	r3, [sp, #0]
 8001c72:	2300      	movs	r3, #0
 8001c74:	2105      	movs	r1, #5
 8001c76:	48a0      	ldr	r0, [pc, #640]	; (8001ef8 <FreqMenu_DrawPresetMenu+0x524>)
 8001c78:	f00e fe3a 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c7c:	7b7b      	ldrb	r3, [r7, #13]
 8001c7e:	b29a      	uxth	r2, r3
 8001c80:	2300      	movs	r3, #0
 8001c82:	9301      	str	r3, [sp, #4]
 8001c84:	2302      	movs	r3, #2
 8001c86:	9300      	str	r3, [sp, #0]
 8001c88:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c8c:	2105      	movs	r1, #5
 8001c8e:	489b      	ldr	r0, [pc, #620]	; (8001efc <FreqMenu_DrawPresetMenu+0x528>)
 8001c90:	f00e fe2e 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c94:	7b3b      	ldrb	r3, [r7, #12]
 8001c96:	b29a      	uxth	r2, r3
 8001c98:	2300      	movs	r3, #0
 8001c9a:	9301      	str	r3, [sp, #4]
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	9300      	str	r3, [sp, #0]
 8001ca0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ca4:	2105      	movs	r1, #5
 8001ca6:	4896      	ldr	r0, [pc, #600]	; (8001f00 <FreqMenu_DrawPresetMenu+0x52c>)
 8001ca8:	f00e fe22 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001cac:	7afb      	ldrb	r3, [r7, #11]
 8001cae:	b29a      	uxth	r2, r3
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	9301      	str	r3, [sp, #4]
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	9300      	str	r3, [sp, #0]
 8001cb8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001cbc:	2105      	movs	r1, #5
 8001cbe:	4891      	ldr	r0, [pc, #580]	; (8001f04 <FreqMenu_DrawPresetMenu+0x530>)
 8001cc0:	f00e fe16 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001cc4:	7abb      	ldrb	r3, [r7, #10]
 8001cc6:	b29a      	uxth	r2, r3
 8001cc8:	2300      	movs	r3, #0
 8001cca:	9301      	str	r3, [sp, #4]
 8001ccc:	2302      	movs	r3, #2
 8001cce:	9300      	str	r3, [sp, #0]
 8001cd0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001cd4:	2105      	movs	r1, #5
 8001cd6:	488c      	ldr	r0, [pc, #560]	; (8001f08 <FreqMenu_DrawPresetMenu+0x534>)
 8001cd8:	f00e fe0a 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001cdc:	7a7b      	ldrb	r3, [r7, #9]
 8001cde:	b29a      	uxth	r2, r3
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	9301      	str	r3, [sp, #4]
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	9300      	str	r3, [sp, #0]
 8001ce8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001cec:	2105      	movs	r1, #5
 8001cee:	4887      	ldr	r0, [pc, #540]	; (8001f0c <FreqMenu_DrawPresetMenu+0x538>)
 8001cf0:	f00e fdfe 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001cf4:	7bfb      	ldrb	r3, [r7, #15]
 8001cf6:	b29a      	uxth	r2, r3
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	9301      	str	r3, [sp, #4]
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	9300      	str	r3, [sp, #0]
 8001d00:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d04:	2178      	movs	r1, #120	; 0x78
 8001d06:	4882      	ldr	r0, [pc, #520]	; (8001f10 <FreqMenu_DrawPresetMenu+0x53c>)
 8001d08:	f00e fdf2 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d0c:	7bbb      	ldrb	r3, [r7, #14]
 8001d0e:	b29a      	uxth	r2, r3
 8001d10:	2300      	movs	r3, #0
 8001d12:	9301      	str	r3, [sp, #4]
 8001d14:	2302      	movs	r3, #2
 8001d16:	9300      	str	r3, [sp, #0]
 8001d18:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d1c:	2178      	movs	r1, #120	; 0x78
 8001d1e:	487d      	ldr	r0, [pc, #500]	; (8001f14 <FreqMenu_DrawPresetMenu+0x540>)
 8001d20:	f00e fde6 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d24:	7b7b      	ldrb	r3, [r7, #13]
 8001d26:	b29a      	uxth	r2, r3
 8001d28:	2300      	movs	r3, #0
 8001d2a:	9301      	str	r3, [sp, #4]
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	9300      	str	r3, [sp, #0]
 8001d30:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d34:	2178      	movs	r1, #120	; 0x78
 8001d36:	4878      	ldr	r0, [pc, #480]	; (8001f18 <FreqMenu_DrawPresetMenu+0x544>)
 8001d38:	f00e fdda 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d3c:	7b3b      	ldrb	r3, [r7, #12]
 8001d3e:	b29a      	uxth	r2, r3
 8001d40:	2300      	movs	r3, #0
 8001d42:	9301      	str	r3, [sp, #4]
 8001d44:	2302      	movs	r3, #2
 8001d46:	9300      	str	r3, [sp, #0]
 8001d48:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d4c:	2178      	movs	r1, #120	; 0x78
 8001d4e:	4873      	ldr	r0, [pc, #460]	; (8001f1c <FreqMenu_DrawPresetMenu+0x548>)
 8001d50:	f00e fdce 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d54:	7afb      	ldrb	r3, [r7, #11]
 8001d56:	b29a      	uxth	r2, r3
 8001d58:	2300      	movs	r3, #0
 8001d5a:	9301      	str	r3, [sp, #4]
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	9300      	str	r3, [sp, #0]
 8001d60:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d64:	2178      	movs	r1, #120	; 0x78
 8001d66:	486e      	ldr	r0, [pc, #440]	; (8001f20 <FreqMenu_DrawPresetMenu+0x54c>)
 8001d68:	f00e fdc2 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d6c:	7abb      	ldrb	r3, [r7, #10]
 8001d6e:	b29a      	uxth	r2, r3
 8001d70:	2300      	movs	r3, #0
 8001d72:	9301      	str	r3, [sp, #4]
 8001d74:	2302      	movs	r3, #2
 8001d76:	9300      	str	r3, [sp, #0]
 8001d78:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d7c:	2178      	movs	r1, #120	; 0x78
 8001d7e:	4869      	ldr	r0, [pc, #420]	; (8001f24 <FreqMenu_DrawPresetMenu+0x550>)
 8001d80:	f00e fdb6 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d84:	7a7b      	ldrb	r3, [r7, #9]
 8001d86:	b29a      	uxth	r2, r3
 8001d88:	2300      	movs	r3, #0
 8001d8a:	9301      	str	r3, [sp, #4]
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	9300      	str	r3, [sp, #0]
 8001d90:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d94:	2178      	movs	r1, #120	; 0x78
 8001d96:	4864      	ldr	r0, [pc, #400]	; (8001f28 <FreqMenu_DrawPresetMenu+0x554>)
 8001d98:	f00e fdaa 	bl	80108f0 <ILI9341_Draw_Text>
				break;
 8001d9c:	f001 b8a8 	b.w	8002ef0 <FreqMenu_DrawPresetMenu+0x151c>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001da0:	7bfb      	ldrb	r3, [r7, #15]
 8001da2:	b29a      	uxth	r2, r3
 8001da4:	2300      	movs	r3, #0
 8001da6:	9301      	str	r3, [sp, #4]
 8001da8:	2302      	movs	r3, #2
 8001daa:	9300      	str	r3, [sp, #0]
 8001dac:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001db0:	2105      	movs	r1, #5
 8001db2:	4850      	ldr	r0, [pc, #320]	; (8001ef4 <FreqMenu_DrawPresetMenu+0x520>)
 8001db4:	f00e fd9c 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001db8:	7bbb      	ldrb	r3, [r7, #14]
 8001dba:	b29a      	uxth	r2, r3
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	9301      	str	r3, [sp, #4]
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	9300      	str	r3, [sp, #0]
 8001dc4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001dc8:	2105      	movs	r1, #5
 8001dca:	484b      	ldr	r0, [pc, #300]	; (8001ef8 <FreqMenu_DrawPresetMenu+0x524>)
 8001dcc:	f00e fd90 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001dd0:	7b7b      	ldrb	r3, [r7, #13]
 8001dd2:	b29a      	uxth	r2, r3
 8001dd4:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001dd8:	9301      	str	r3, [sp, #4]
 8001dda:	2302      	movs	r3, #2
 8001ddc:	9300      	str	r3, [sp, #0]
 8001dde:	2300      	movs	r3, #0
 8001de0:	2105      	movs	r1, #5
 8001de2:	4846      	ldr	r0, [pc, #280]	; (8001efc <FreqMenu_DrawPresetMenu+0x528>)
 8001de4:	f00e fd84 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001de8:	7b3b      	ldrb	r3, [r7, #12]
 8001dea:	b29a      	uxth	r2, r3
 8001dec:	2300      	movs	r3, #0
 8001dee:	9301      	str	r3, [sp, #4]
 8001df0:	2302      	movs	r3, #2
 8001df2:	9300      	str	r3, [sp, #0]
 8001df4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001df8:	2105      	movs	r1, #5
 8001dfa:	4841      	ldr	r0, [pc, #260]	; (8001f00 <FreqMenu_DrawPresetMenu+0x52c>)
 8001dfc:	f00e fd78 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e00:	7afb      	ldrb	r3, [r7, #11]
 8001e02:	b29a      	uxth	r2, r3
 8001e04:	2300      	movs	r3, #0
 8001e06:	9301      	str	r3, [sp, #4]
 8001e08:	2302      	movs	r3, #2
 8001e0a:	9300      	str	r3, [sp, #0]
 8001e0c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e10:	2105      	movs	r1, #5
 8001e12:	483c      	ldr	r0, [pc, #240]	; (8001f04 <FreqMenu_DrawPresetMenu+0x530>)
 8001e14:	f00e fd6c 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e18:	7abb      	ldrb	r3, [r7, #10]
 8001e1a:	b29a      	uxth	r2, r3
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	9301      	str	r3, [sp, #4]
 8001e20:	2302      	movs	r3, #2
 8001e22:	9300      	str	r3, [sp, #0]
 8001e24:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e28:	2105      	movs	r1, #5
 8001e2a:	4837      	ldr	r0, [pc, #220]	; (8001f08 <FreqMenu_DrawPresetMenu+0x534>)
 8001e2c:	f00e fd60 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e30:	7a7b      	ldrb	r3, [r7, #9]
 8001e32:	b29a      	uxth	r2, r3
 8001e34:	2300      	movs	r3, #0
 8001e36:	9301      	str	r3, [sp, #4]
 8001e38:	2302      	movs	r3, #2
 8001e3a:	9300      	str	r3, [sp, #0]
 8001e3c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e40:	2105      	movs	r1, #5
 8001e42:	4832      	ldr	r0, [pc, #200]	; (8001f0c <FreqMenu_DrawPresetMenu+0x538>)
 8001e44:	f00e fd54 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e48:	7bfb      	ldrb	r3, [r7, #15]
 8001e4a:	b29a      	uxth	r2, r3
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	9301      	str	r3, [sp, #4]
 8001e50:	2302      	movs	r3, #2
 8001e52:	9300      	str	r3, [sp, #0]
 8001e54:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e58:	2178      	movs	r1, #120	; 0x78
 8001e5a:	482d      	ldr	r0, [pc, #180]	; (8001f10 <FreqMenu_DrawPresetMenu+0x53c>)
 8001e5c:	f00e fd48 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e60:	7bbb      	ldrb	r3, [r7, #14]
 8001e62:	b29a      	uxth	r2, r3
 8001e64:	2300      	movs	r3, #0
 8001e66:	9301      	str	r3, [sp, #4]
 8001e68:	2302      	movs	r3, #2
 8001e6a:	9300      	str	r3, [sp, #0]
 8001e6c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e70:	2178      	movs	r1, #120	; 0x78
 8001e72:	4828      	ldr	r0, [pc, #160]	; (8001f14 <FreqMenu_DrawPresetMenu+0x540>)
 8001e74:	f00e fd3c 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e78:	7b7b      	ldrb	r3, [r7, #13]
 8001e7a:	b29a      	uxth	r2, r3
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	9301      	str	r3, [sp, #4]
 8001e80:	2302      	movs	r3, #2
 8001e82:	9300      	str	r3, [sp, #0]
 8001e84:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e88:	2178      	movs	r1, #120	; 0x78
 8001e8a:	4823      	ldr	r0, [pc, #140]	; (8001f18 <FreqMenu_DrawPresetMenu+0x544>)
 8001e8c:	f00e fd30 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e90:	7b3b      	ldrb	r3, [r7, #12]
 8001e92:	b29a      	uxth	r2, r3
 8001e94:	2300      	movs	r3, #0
 8001e96:	9301      	str	r3, [sp, #4]
 8001e98:	2302      	movs	r3, #2
 8001e9a:	9300      	str	r3, [sp, #0]
 8001e9c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ea0:	2178      	movs	r1, #120	; 0x78
 8001ea2:	481e      	ldr	r0, [pc, #120]	; (8001f1c <FreqMenu_DrawPresetMenu+0x548>)
 8001ea4:	f00e fd24 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ea8:	7afb      	ldrb	r3, [r7, #11]
 8001eaa:	b29a      	uxth	r2, r3
 8001eac:	2300      	movs	r3, #0
 8001eae:	9301      	str	r3, [sp, #4]
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	9300      	str	r3, [sp, #0]
 8001eb4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001eb8:	2178      	movs	r1, #120	; 0x78
 8001eba:	4819      	ldr	r0, [pc, #100]	; (8001f20 <FreqMenu_DrawPresetMenu+0x54c>)
 8001ebc:	f00e fd18 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ec0:	7abb      	ldrb	r3, [r7, #10]
 8001ec2:	b29a      	uxth	r2, r3
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	9301      	str	r3, [sp, #4]
 8001ec8:	2302      	movs	r3, #2
 8001eca:	9300      	str	r3, [sp, #0]
 8001ecc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ed0:	2178      	movs	r1, #120	; 0x78
 8001ed2:	4814      	ldr	r0, [pc, #80]	; (8001f24 <FreqMenu_DrawPresetMenu+0x550>)
 8001ed4:	f00e fd0c 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ed8:	7a7b      	ldrb	r3, [r7, #9]
 8001eda:	b29a      	uxth	r2, r3
 8001edc:	2300      	movs	r3, #0
 8001ede:	9301      	str	r3, [sp, #4]
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	9300      	str	r3, [sp, #0]
 8001ee4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ee8:	2178      	movs	r1, #120	; 0x78
 8001eea:	480f      	ldr	r0, [pc, #60]	; (8001f28 <FreqMenu_DrawPresetMenu+0x554>)
 8001eec:	f00e fd00 	bl	80108f0 <ILI9341_Draw_Text>
				break;
 8001ef0:	f000 bffe 	b.w	8002ef0 <FreqMenu_DrawPresetMenu+0x151c>
 8001ef4:	0801598c 	.word	0x0801598c
 8001ef8:	08015994 	.word	0x08015994
 8001efc:	0801599c 	.word	0x0801599c
 8001f00:	080159a4 	.word	0x080159a4
 8001f04:	080159ac 	.word	0x080159ac
 8001f08:	080159b4 	.word	0x080159b4
 8001f0c:	080159bc 	.word	0x080159bc
 8001f10:	080159c4 	.word	0x080159c4
 8001f14:	080159cc 	.word	0x080159cc
 8001f18:	080159d4 	.word	0x080159d4
 8001f1c:	080159dc 	.word	0x080159dc
 8001f20:	080159e4 	.word	0x080159e4
 8001f24:	080159ec 	.word	0x080159ec
 8001f28:	080159f4 	.word	0x080159f4
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f2c:	7bfb      	ldrb	r3, [r7, #15]
 8001f2e:	b29a      	uxth	r2, r3
 8001f30:	2300      	movs	r3, #0
 8001f32:	9301      	str	r3, [sp, #4]
 8001f34:	2302      	movs	r3, #2
 8001f36:	9300      	str	r3, [sp, #0]
 8001f38:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f3c:	2105      	movs	r1, #5
 8001f3e:	48a5      	ldr	r0, [pc, #660]	; (80021d4 <FreqMenu_DrawPresetMenu+0x800>)
 8001f40:	f00e fcd6 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f44:	7bbb      	ldrb	r3, [r7, #14]
 8001f46:	b29a      	uxth	r2, r3
 8001f48:	2300      	movs	r3, #0
 8001f4a:	9301      	str	r3, [sp, #4]
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	9300      	str	r3, [sp, #0]
 8001f50:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f54:	2105      	movs	r1, #5
 8001f56:	48a0      	ldr	r0, [pc, #640]	; (80021d8 <FreqMenu_DrawPresetMenu+0x804>)
 8001f58:	f00e fcca 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f5c:	7b7b      	ldrb	r3, [r7, #13]
 8001f5e:	b29a      	uxth	r2, r3
 8001f60:	2300      	movs	r3, #0
 8001f62:	9301      	str	r3, [sp, #4]
 8001f64:	2302      	movs	r3, #2
 8001f66:	9300      	str	r3, [sp, #0]
 8001f68:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f6c:	2105      	movs	r1, #5
 8001f6e:	489b      	ldr	r0, [pc, #620]	; (80021dc <FreqMenu_DrawPresetMenu+0x808>)
 8001f70:	f00e fcbe 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001f74:	7b3b      	ldrb	r3, [r7, #12]
 8001f76:	b29a      	uxth	r2, r3
 8001f78:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001f7c:	9301      	str	r3, [sp, #4]
 8001f7e:	2302      	movs	r3, #2
 8001f80:	9300      	str	r3, [sp, #0]
 8001f82:	2300      	movs	r3, #0
 8001f84:	2105      	movs	r1, #5
 8001f86:	4896      	ldr	r0, [pc, #600]	; (80021e0 <FreqMenu_DrawPresetMenu+0x80c>)
 8001f88:	f00e fcb2 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f8c:	7afb      	ldrb	r3, [r7, #11]
 8001f8e:	b29a      	uxth	r2, r3
 8001f90:	2300      	movs	r3, #0
 8001f92:	9301      	str	r3, [sp, #4]
 8001f94:	2302      	movs	r3, #2
 8001f96:	9300      	str	r3, [sp, #0]
 8001f98:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f9c:	2105      	movs	r1, #5
 8001f9e:	4891      	ldr	r0, [pc, #580]	; (80021e4 <FreqMenu_DrawPresetMenu+0x810>)
 8001fa0:	f00e fca6 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001fa4:	7abb      	ldrb	r3, [r7, #10]
 8001fa6:	b29a      	uxth	r2, r3
 8001fa8:	2300      	movs	r3, #0
 8001faa:	9301      	str	r3, [sp, #4]
 8001fac:	2302      	movs	r3, #2
 8001fae:	9300      	str	r3, [sp, #0]
 8001fb0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001fb4:	2105      	movs	r1, #5
 8001fb6:	488c      	ldr	r0, [pc, #560]	; (80021e8 <FreqMenu_DrawPresetMenu+0x814>)
 8001fb8:	f00e fc9a 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001fbc:	7a7b      	ldrb	r3, [r7, #9]
 8001fbe:	b29a      	uxth	r2, r3
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	9301      	str	r3, [sp, #4]
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	9300      	str	r3, [sp, #0]
 8001fc8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001fcc:	2105      	movs	r1, #5
 8001fce:	4887      	ldr	r0, [pc, #540]	; (80021ec <FreqMenu_DrawPresetMenu+0x818>)
 8001fd0:	f00e fc8e 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001fd4:	7bfb      	ldrb	r3, [r7, #15]
 8001fd6:	b29a      	uxth	r2, r3
 8001fd8:	2300      	movs	r3, #0
 8001fda:	9301      	str	r3, [sp, #4]
 8001fdc:	2302      	movs	r3, #2
 8001fde:	9300      	str	r3, [sp, #0]
 8001fe0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001fe4:	2178      	movs	r1, #120	; 0x78
 8001fe6:	4882      	ldr	r0, [pc, #520]	; (80021f0 <FreqMenu_DrawPresetMenu+0x81c>)
 8001fe8:	f00e fc82 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001fec:	7bbb      	ldrb	r3, [r7, #14]
 8001fee:	b29a      	uxth	r2, r3
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	9301      	str	r3, [sp, #4]
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	9300      	str	r3, [sp, #0]
 8001ff8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ffc:	2178      	movs	r1, #120	; 0x78
 8001ffe:	487d      	ldr	r0, [pc, #500]	; (80021f4 <FreqMenu_DrawPresetMenu+0x820>)
 8002000:	f00e fc76 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002004:	7b7b      	ldrb	r3, [r7, #13]
 8002006:	b29a      	uxth	r2, r3
 8002008:	2300      	movs	r3, #0
 800200a:	9301      	str	r3, [sp, #4]
 800200c:	2302      	movs	r3, #2
 800200e:	9300      	str	r3, [sp, #0]
 8002010:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002014:	2178      	movs	r1, #120	; 0x78
 8002016:	4878      	ldr	r0, [pc, #480]	; (80021f8 <FreqMenu_DrawPresetMenu+0x824>)
 8002018:	f00e fc6a 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800201c:	7b3b      	ldrb	r3, [r7, #12]
 800201e:	b29a      	uxth	r2, r3
 8002020:	2300      	movs	r3, #0
 8002022:	9301      	str	r3, [sp, #4]
 8002024:	2302      	movs	r3, #2
 8002026:	9300      	str	r3, [sp, #0]
 8002028:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800202c:	2178      	movs	r1, #120	; 0x78
 800202e:	4873      	ldr	r0, [pc, #460]	; (80021fc <FreqMenu_DrawPresetMenu+0x828>)
 8002030:	f00e fc5e 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002034:	7afb      	ldrb	r3, [r7, #11]
 8002036:	b29a      	uxth	r2, r3
 8002038:	2300      	movs	r3, #0
 800203a:	9301      	str	r3, [sp, #4]
 800203c:	2302      	movs	r3, #2
 800203e:	9300      	str	r3, [sp, #0]
 8002040:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002044:	2178      	movs	r1, #120	; 0x78
 8002046:	486e      	ldr	r0, [pc, #440]	; (8002200 <FreqMenu_DrawPresetMenu+0x82c>)
 8002048:	f00e fc52 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800204c:	7abb      	ldrb	r3, [r7, #10]
 800204e:	b29a      	uxth	r2, r3
 8002050:	2300      	movs	r3, #0
 8002052:	9301      	str	r3, [sp, #4]
 8002054:	2302      	movs	r3, #2
 8002056:	9300      	str	r3, [sp, #0]
 8002058:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800205c:	2178      	movs	r1, #120	; 0x78
 800205e:	4869      	ldr	r0, [pc, #420]	; (8002204 <FreqMenu_DrawPresetMenu+0x830>)
 8002060:	f00e fc46 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002064:	7a7b      	ldrb	r3, [r7, #9]
 8002066:	b29a      	uxth	r2, r3
 8002068:	2300      	movs	r3, #0
 800206a:	9301      	str	r3, [sp, #4]
 800206c:	2302      	movs	r3, #2
 800206e:	9300      	str	r3, [sp, #0]
 8002070:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002074:	2178      	movs	r1, #120	; 0x78
 8002076:	4864      	ldr	r0, [pc, #400]	; (8002208 <FreqMenu_DrawPresetMenu+0x834>)
 8002078:	f00e fc3a 	bl	80108f0 <ILI9341_Draw_Text>
				break;
 800207c:	f000 bf38 	b.w	8002ef0 <FreqMenu_DrawPresetMenu+0x151c>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002080:	7bfb      	ldrb	r3, [r7, #15]
 8002082:	b29a      	uxth	r2, r3
 8002084:	2300      	movs	r3, #0
 8002086:	9301      	str	r3, [sp, #4]
 8002088:	2302      	movs	r3, #2
 800208a:	9300      	str	r3, [sp, #0]
 800208c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002090:	2105      	movs	r1, #5
 8002092:	4850      	ldr	r0, [pc, #320]	; (80021d4 <FreqMenu_DrawPresetMenu+0x800>)
 8002094:	f00e fc2c 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002098:	7bbb      	ldrb	r3, [r7, #14]
 800209a:	b29a      	uxth	r2, r3
 800209c:	2300      	movs	r3, #0
 800209e:	9301      	str	r3, [sp, #4]
 80020a0:	2302      	movs	r3, #2
 80020a2:	9300      	str	r3, [sp, #0]
 80020a4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80020a8:	2105      	movs	r1, #5
 80020aa:	484b      	ldr	r0, [pc, #300]	; (80021d8 <FreqMenu_DrawPresetMenu+0x804>)
 80020ac:	f00e fc20 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80020b0:	7b7b      	ldrb	r3, [r7, #13]
 80020b2:	b29a      	uxth	r2, r3
 80020b4:	2300      	movs	r3, #0
 80020b6:	9301      	str	r3, [sp, #4]
 80020b8:	2302      	movs	r3, #2
 80020ba:	9300      	str	r3, [sp, #0]
 80020bc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80020c0:	2105      	movs	r1, #5
 80020c2:	4846      	ldr	r0, [pc, #280]	; (80021dc <FreqMenu_DrawPresetMenu+0x808>)
 80020c4:	f00e fc14 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80020c8:	7b3b      	ldrb	r3, [r7, #12]
 80020ca:	b29a      	uxth	r2, r3
 80020cc:	2300      	movs	r3, #0
 80020ce:	9301      	str	r3, [sp, #4]
 80020d0:	2302      	movs	r3, #2
 80020d2:	9300      	str	r3, [sp, #0]
 80020d4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80020d8:	2105      	movs	r1, #5
 80020da:	4841      	ldr	r0, [pc, #260]	; (80021e0 <FreqMenu_DrawPresetMenu+0x80c>)
 80020dc:	f00e fc08 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80020e0:	7afb      	ldrb	r3, [r7, #11]
 80020e2:	b29a      	uxth	r2, r3
 80020e4:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80020e8:	9301      	str	r3, [sp, #4]
 80020ea:	2302      	movs	r3, #2
 80020ec:	9300      	str	r3, [sp, #0]
 80020ee:	2300      	movs	r3, #0
 80020f0:	2105      	movs	r1, #5
 80020f2:	483c      	ldr	r0, [pc, #240]	; (80021e4 <FreqMenu_DrawPresetMenu+0x810>)
 80020f4:	f00e fbfc 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80020f8:	7abb      	ldrb	r3, [r7, #10]
 80020fa:	b29a      	uxth	r2, r3
 80020fc:	2300      	movs	r3, #0
 80020fe:	9301      	str	r3, [sp, #4]
 8002100:	2302      	movs	r3, #2
 8002102:	9300      	str	r3, [sp, #0]
 8002104:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002108:	2105      	movs	r1, #5
 800210a:	4837      	ldr	r0, [pc, #220]	; (80021e8 <FreqMenu_DrawPresetMenu+0x814>)
 800210c:	f00e fbf0 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002110:	7a7b      	ldrb	r3, [r7, #9]
 8002112:	b29a      	uxth	r2, r3
 8002114:	2300      	movs	r3, #0
 8002116:	9301      	str	r3, [sp, #4]
 8002118:	2302      	movs	r3, #2
 800211a:	9300      	str	r3, [sp, #0]
 800211c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002120:	2105      	movs	r1, #5
 8002122:	4832      	ldr	r0, [pc, #200]	; (80021ec <FreqMenu_DrawPresetMenu+0x818>)
 8002124:	f00e fbe4 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002128:	7bfb      	ldrb	r3, [r7, #15]
 800212a:	b29a      	uxth	r2, r3
 800212c:	2300      	movs	r3, #0
 800212e:	9301      	str	r3, [sp, #4]
 8002130:	2302      	movs	r3, #2
 8002132:	9300      	str	r3, [sp, #0]
 8002134:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002138:	2178      	movs	r1, #120	; 0x78
 800213a:	482d      	ldr	r0, [pc, #180]	; (80021f0 <FreqMenu_DrawPresetMenu+0x81c>)
 800213c:	f00e fbd8 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002140:	7bbb      	ldrb	r3, [r7, #14]
 8002142:	b29a      	uxth	r2, r3
 8002144:	2300      	movs	r3, #0
 8002146:	9301      	str	r3, [sp, #4]
 8002148:	2302      	movs	r3, #2
 800214a:	9300      	str	r3, [sp, #0]
 800214c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002150:	2178      	movs	r1, #120	; 0x78
 8002152:	4828      	ldr	r0, [pc, #160]	; (80021f4 <FreqMenu_DrawPresetMenu+0x820>)
 8002154:	f00e fbcc 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002158:	7b7b      	ldrb	r3, [r7, #13]
 800215a:	b29a      	uxth	r2, r3
 800215c:	2300      	movs	r3, #0
 800215e:	9301      	str	r3, [sp, #4]
 8002160:	2302      	movs	r3, #2
 8002162:	9300      	str	r3, [sp, #0]
 8002164:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002168:	2178      	movs	r1, #120	; 0x78
 800216a:	4823      	ldr	r0, [pc, #140]	; (80021f8 <FreqMenu_DrawPresetMenu+0x824>)
 800216c:	f00e fbc0 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002170:	7b3b      	ldrb	r3, [r7, #12]
 8002172:	b29a      	uxth	r2, r3
 8002174:	2300      	movs	r3, #0
 8002176:	9301      	str	r3, [sp, #4]
 8002178:	2302      	movs	r3, #2
 800217a:	9300      	str	r3, [sp, #0]
 800217c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002180:	2178      	movs	r1, #120	; 0x78
 8002182:	481e      	ldr	r0, [pc, #120]	; (80021fc <FreqMenu_DrawPresetMenu+0x828>)
 8002184:	f00e fbb4 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002188:	7afb      	ldrb	r3, [r7, #11]
 800218a:	b29a      	uxth	r2, r3
 800218c:	2300      	movs	r3, #0
 800218e:	9301      	str	r3, [sp, #4]
 8002190:	2302      	movs	r3, #2
 8002192:	9300      	str	r3, [sp, #0]
 8002194:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002198:	2178      	movs	r1, #120	; 0x78
 800219a:	4819      	ldr	r0, [pc, #100]	; (8002200 <FreqMenu_DrawPresetMenu+0x82c>)
 800219c:	f00e fba8 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80021a0:	7abb      	ldrb	r3, [r7, #10]
 80021a2:	b29a      	uxth	r2, r3
 80021a4:	2300      	movs	r3, #0
 80021a6:	9301      	str	r3, [sp, #4]
 80021a8:	2302      	movs	r3, #2
 80021aa:	9300      	str	r3, [sp, #0]
 80021ac:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80021b0:	2178      	movs	r1, #120	; 0x78
 80021b2:	4814      	ldr	r0, [pc, #80]	; (8002204 <FreqMenu_DrawPresetMenu+0x830>)
 80021b4:	f00e fb9c 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80021b8:	7a7b      	ldrb	r3, [r7, #9]
 80021ba:	b29a      	uxth	r2, r3
 80021bc:	2300      	movs	r3, #0
 80021be:	9301      	str	r3, [sp, #4]
 80021c0:	2302      	movs	r3, #2
 80021c2:	9300      	str	r3, [sp, #0]
 80021c4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80021c8:	2178      	movs	r1, #120	; 0x78
 80021ca:	480f      	ldr	r0, [pc, #60]	; (8002208 <FreqMenu_DrawPresetMenu+0x834>)
 80021cc:	f00e fb90 	bl	80108f0 <ILI9341_Draw_Text>
				break;
 80021d0:	f000 be8e 	b.w	8002ef0 <FreqMenu_DrawPresetMenu+0x151c>
 80021d4:	0801598c 	.word	0x0801598c
 80021d8:	08015994 	.word	0x08015994
 80021dc:	0801599c 	.word	0x0801599c
 80021e0:	080159a4 	.word	0x080159a4
 80021e4:	080159ac 	.word	0x080159ac
 80021e8:	080159b4 	.word	0x080159b4
 80021ec:	080159bc 	.word	0x080159bc
 80021f0:	080159c4 	.word	0x080159c4
 80021f4:	080159cc 	.word	0x080159cc
 80021f8:	080159d4 	.word	0x080159d4
 80021fc:	080159dc 	.word	0x080159dc
 8002200:	080159e4 	.word	0x080159e4
 8002204:	080159ec 	.word	0x080159ec
 8002208:	080159f4 	.word	0x080159f4
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800220c:	7bfb      	ldrb	r3, [r7, #15]
 800220e:	b29a      	uxth	r2, r3
 8002210:	2300      	movs	r3, #0
 8002212:	9301      	str	r3, [sp, #4]
 8002214:	2302      	movs	r3, #2
 8002216:	9300      	str	r3, [sp, #0]
 8002218:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800221c:	2105      	movs	r1, #5
 800221e:	48a5      	ldr	r0, [pc, #660]	; (80024b4 <FreqMenu_DrawPresetMenu+0xae0>)
 8002220:	f00e fb66 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002224:	7bbb      	ldrb	r3, [r7, #14]
 8002226:	b29a      	uxth	r2, r3
 8002228:	2300      	movs	r3, #0
 800222a:	9301      	str	r3, [sp, #4]
 800222c:	2302      	movs	r3, #2
 800222e:	9300      	str	r3, [sp, #0]
 8002230:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002234:	2105      	movs	r1, #5
 8002236:	48a0      	ldr	r0, [pc, #640]	; (80024b8 <FreqMenu_DrawPresetMenu+0xae4>)
 8002238:	f00e fb5a 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800223c:	7b7b      	ldrb	r3, [r7, #13]
 800223e:	b29a      	uxth	r2, r3
 8002240:	2300      	movs	r3, #0
 8002242:	9301      	str	r3, [sp, #4]
 8002244:	2302      	movs	r3, #2
 8002246:	9300      	str	r3, [sp, #0]
 8002248:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800224c:	2105      	movs	r1, #5
 800224e:	489b      	ldr	r0, [pc, #620]	; (80024bc <FreqMenu_DrawPresetMenu+0xae8>)
 8002250:	f00e fb4e 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002254:	7b3b      	ldrb	r3, [r7, #12]
 8002256:	b29a      	uxth	r2, r3
 8002258:	2300      	movs	r3, #0
 800225a:	9301      	str	r3, [sp, #4]
 800225c:	2302      	movs	r3, #2
 800225e:	9300      	str	r3, [sp, #0]
 8002260:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002264:	2105      	movs	r1, #5
 8002266:	4896      	ldr	r0, [pc, #600]	; (80024c0 <FreqMenu_DrawPresetMenu+0xaec>)
 8002268:	f00e fb42 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800226c:	7afb      	ldrb	r3, [r7, #11]
 800226e:	b29a      	uxth	r2, r3
 8002270:	2300      	movs	r3, #0
 8002272:	9301      	str	r3, [sp, #4]
 8002274:	2302      	movs	r3, #2
 8002276:	9300      	str	r3, [sp, #0]
 8002278:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800227c:	2105      	movs	r1, #5
 800227e:	4891      	ldr	r0, [pc, #580]	; (80024c4 <FreqMenu_DrawPresetMenu+0xaf0>)
 8002280:	f00e fb36 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002284:	7abb      	ldrb	r3, [r7, #10]
 8002286:	b29a      	uxth	r2, r3
 8002288:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 800228c:	9301      	str	r3, [sp, #4]
 800228e:	2302      	movs	r3, #2
 8002290:	9300      	str	r3, [sp, #0]
 8002292:	2300      	movs	r3, #0
 8002294:	2105      	movs	r1, #5
 8002296:	488c      	ldr	r0, [pc, #560]	; (80024c8 <FreqMenu_DrawPresetMenu+0xaf4>)
 8002298:	f00e fb2a 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800229c:	7a7b      	ldrb	r3, [r7, #9]
 800229e:	b29a      	uxth	r2, r3
 80022a0:	2300      	movs	r3, #0
 80022a2:	9301      	str	r3, [sp, #4]
 80022a4:	2302      	movs	r3, #2
 80022a6:	9300      	str	r3, [sp, #0]
 80022a8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022ac:	2105      	movs	r1, #5
 80022ae:	4887      	ldr	r0, [pc, #540]	; (80024cc <FreqMenu_DrawPresetMenu+0xaf8>)
 80022b0:	f00e fb1e 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80022b4:	7bfb      	ldrb	r3, [r7, #15]
 80022b6:	b29a      	uxth	r2, r3
 80022b8:	2300      	movs	r3, #0
 80022ba:	9301      	str	r3, [sp, #4]
 80022bc:	2302      	movs	r3, #2
 80022be:	9300      	str	r3, [sp, #0]
 80022c0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022c4:	2178      	movs	r1, #120	; 0x78
 80022c6:	4882      	ldr	r0, [pc, #520]	; (80024d0 <FreqMenu_DrawPresetMenu+0xafc>)
 80022c8:	f00e fb12 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80022cc:	7bbb      	ldrb	r3, [r7, #14]
 80022ce:	b29a      	uxth	r2, r3
 80022d0:	2300      	movs	r3, #0
 80022d2:	9301      	str	r3, [sp, #4]
 80022d4:	2302      	movs	r3, #2
 80022d6:	9300      	str	r3, [sp, #0]
 80022d8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022dc:	2178      	movs	r1, #120	; 0x78
 80022de:	487d      	ldr	r0, [pc, #500]	; (80024d4 <FreqMenu_DrawPresetMenu+0xb00>)
 80022e0:	f00e fb06 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80022e4:	7b7b      	ldrb	r3, [r7, #13]
 80022e6:	b29a      	uxth	r2, r3
 80022e8:	2300      	movs	r3, #0
 80022ea:	9301      	str	r3, [sp, #4]
 80022ec:	2302      	movs	r3, #2
 80022ee:	9300      	str	r3, [sp, #0]
 80022f0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022f4:	2178      	movs	r1, #120	; 0x78
 80022f6:	4878      	ldr	r0, [pc, #480]	; (80024d8 <FreqMenu_DrawPresetMenu+0xb04>)
 80022f8:	f00e fafa 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80022fc:	7b3b      	ldrb	r3, [r7, #12]
 80022fe:	b29a      	uxth	r2, r3
 8002300:	2300      	movs	r3, #0
 8002302:	9301      	str	r3, [sp, #4]
 8002304:	2302      	movs	r3, #2
 8002306:	9300      	str	r3, [sp, #0]
 8002308:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800230c:	2178      	movs	r1, #120	; 0x78
 800230e:	4873      	ldr	r0, [pc, #460]	; (80024dc <FreqMenu_DrawPresetMenu+0xb08>)
 8002310:	f00e faee 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002314:	7afb      	ldrb	r3, [r7, #11]
 8002316:	b29a      	uxth	r2, r3
 8002318:	2300      	movs	r3, #0
 800231a:	9301      	str	r3, [sp, #4]
 800231c:	2302      	movs	r3, #2
 800231e:	9300      	str	r3, [sp, #0]
 8002320:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002324:	2178      	movs	r1, #120	; 0x78
 8002326:	486e      	ldr	r0, [pc, #440]	; (80024e0 <FreqMenu_DrawPresetMenu+0xb0c>)
 8002328:	f00e fae2 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800232c:	7abb      	ldrb	r3, [r7, #10]
 800232e:	b29a      	uxth	r2, r3
 8002330:	2300      	movs	r3, #0
 8002332:	9301      	str	r3, [sp, #4]
 8002334:	2302      	movs	r3, #2
 8002336:	9300      	str	r3, [sp, #0]
 8002338:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800233c:	2178      	movs	r1, #120	; 0x78
 800233e:	4869      	ldr	r0, [pc, #420]	; (80024e4 <FreqMenu_DrawPresetMenu+0xb10>)
 8002340:	f00e fad6 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002344:	7a7b      	ldrb	r3, [r7, #9]
 8002346:	b29a      	uxth	r2, r3
 8002348:	2300      	movs	r3, #0
 800234a:	9301      	str	r3, [sp, #4]
 800234c:	2302      	movs	r3, #2
 800234e:	9300      	str	r3, [sp, #0]
 8002350:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002354:	2178      	movs	r1, #120	; 0x78
 8002356:	4864      	ldr	r0, [pc, #400]	; (80024e8 <FreqMenu_DrawPresetMenu+0xb14>)
 8002358:	f00e faca 	bl	80108f0 <ILI9341_Draw_Text>
				break;
 800235c:	f000 bdc8 	b.w	8002ef0 <FreqMenu_DrawPresetMenu+0x151c>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002360:	7bfb      	ldrb	r3, [r7, #15]
 8002362:	b29a      	uxth	r2, r3
 8002364:	2300      	movs	r3, #0
 8002366:	9301      	str	r3, [sp, #4]
 8002368:	2302      	movs	r3, #2
 800236a:	9300      	str	r3, [sp, #0]
 800236c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002370:	2105      	movs	r1, #5
 8002372:	4850      	ldr	r0, [pc, #320]	; (80024b4 <FreqMenu_DrawPresetMenu+0xae0>)
 8002374:	f00e fabc 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002378:	7bbb      	ldrb	r3, [r7, #14]
 800237a:	b29a      	uxth	r2, r3
 800237c:	2300      	movs	r3, #0
 800237e:	9301      	str	r3, [sp, #4]
 8002380:	2302      	movs	r3, #2
 8002382:	9300      	str	r3, [sp, #0]
 8002384:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002388:	2105      	movs	r1, #5
 800238a:	484b      	ldr	r0, [pc, #300]	; (80024b8 <FreqMenu_DrawPresetMenu+0xae4>)
 800238c:	f00e fab0 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002390:	7b7b      	ldrb	r3, [r7, #13]
 8002392:	b29a      	uxth	r2, r3
 8002394:	2300      	movs	r3, #0
 8002396:	9301      	str	r3, [sp, #4]
 8002398:	2302      	movs	r3, #2
 800239a:	9300      	str	r3, [sp, #0]
 800239c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80023a0:	2105      	movs	r1, #5
 80023a2:	4846      	ldr	r0, [pc, #280]	; (80024bc <FreqMenu_DrawPresetMenu+0xae8>)
 80023a4:	f00e faa4 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80023a8:	7b3b      	ldrb	r3, [r7, #12]
 80023aa:	b29a      	uxth	r2, r3
 80023ac:	2300      	movs	r3, #0
 80023ae:	9301      	str	r3, [sp, #4]
 80023b0:	2302      	movs	r3, #2
 80023b2:	9300      	str	r3, [sp, #0]
 80023b4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80023b8:	2105      	movs	r1, #5
 80023ba:	4841      	ldr	r0, [pc, #260]	; (80024c0 <FreqMenu_DrawPresetMenu+0xaec>)
 80023bc:	f00e fa98 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80023c0:	7afb      	ldrb	r3, [r7, #11]
 80023c2:	b29a      	uxth	r2, r3
 80023c4:	2300      	movs	r3, #0
 80023c6:	9301      	str	r3, [sp, #4]
 80023c8:	2302      	movs	r3, #2
 80023ca:	9300      	str	r3, [sp, #0]
 80023cc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80023d0:	2105      	movs	r1, #5
 80023d2:	483c      	ldr	r0, [pc, #240]	; (80024c4 <FreqMenu_DrawPresetMenu+0xaf0>)
 80023d4:	f00e fa8c 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80023d8:	7abb      	ldrb	r3, [r7, #10]
 80023da:	b29a      	uxth	r2, r3
 80023dc:	2300      	movs	r3, #0
 80023de:	9301      	str	r3, [sp, #4]
 80023e0:	2302      	movs	r3, #2
 80023e2:	9300      	str	r3, [sp, #0]
 80023e4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80023e8:	2105      	movs	r1, #5
 80023ea:	4837      	ldr	r0, [pc, #220]	; (80024c8 <FreqMenu_DrawPresetMenu+0xaf4>)
 80023ec:	f00e fa80 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80023f0:	7a7b      	ldrb	r3, [r7, #9]
 80023f2:	b29a      	uxth	r2, r3
 80023f4:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80023f8:	9301      	str	r3, [sp, #4]
 80023fa:	2302      	movs	r3, #2
 80023fc:	9300      	str	r3, [sp, #0]
 80023fe:	2300      	movs	r3, #0
 8002400:	2105      	movs	r1, #5
 8002402:	4832      	ldr	r0, [pc, #200]	; (80024cc <FreqMenu_DrawPresetMenu+0xaf8>)
 8002404:	f00e fa74 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002408:	7bfb      	ldrb	r3, [r7, #15]
 800240a:	b29a      	uxth	r2, r3
 800240c:	2300      	movs	r3, #0
 800240e:	9301      	str	r3, [sp, #4]
 8002410:	2302      	movs	r3, #2
 8002412:	9300      	str	r3, [sp, #0]
 8002414:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002418:	2178      	movs	r1, #120	; 0x78
 800241a:	482d      	ldr	r0, [pc, #180]	; (80024d0 <FreqMenu_DrawPresetMenu+0xafc>)
 800241c:	f00e fa68 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002420:	7bbb      	ldrb	r3, [r7, #14]
 8002422:	b29a      	uxth	r2, r3
 8002424:	2300      	movs	r3, #0
 8002426:	9301      	str	r3, [sp, #4]
 8002428:	2302      	movs	r3, #2
 800242a:	9300      	str	r3, [sp, #0]
 800242c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002430:	2178      	movs	r1, #120	; 0x78
 8002432:	4828      	ldr	r0, [pc, #160]	; (80024d4 <FreqMenu_DrawPresetMenu+0xb00>)
 8002434:	f00e fa5c 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002438:	7b7b      	ldrb	r3, [r7, #13]
 800243a:	b29a      	uxth	r2, r3
 800243c:	2300      	movs	r3, #0
 800243e:	9301      	str	r3, [sp, #4]
 8002440:	2302      	movs	r3, #2
 8002442:	9300      	str	r3, [sp, #0]
 8002444:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002448:	2178      	movs	r1, #120	; 0x78
 800244a:	4823      	ldr	r0, [pc, #140]	; (80024d8 <FreqMenu_DrawPresetMenu+0xb04>)
 800244c:	f00e fa50 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002450:	7b3b      	ldrb	r3, [r7, #12]
 8002452:	b29a      	uxth	r2, r3
 8002454:	2300      	movs	r3, #0
 8002456:	9301      	str	r3, [sp, #4]
 8002458:	2302      	movs	r3, #2
 800245a:	9300      	str	r3, [sp, #0]
 800245c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002460:	2178      	movs	r1, #120	; 0x78
 8002462:	481e      	ldr	r0, [pc, #120]	; (80024dc <FreqMenu_DrawPresetMenu+0xb08>)
 8002464:	f00e fa44 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002468:	7afb      	ldrb	r3, [r7, #11]
 800246a:	b29a      	uxth	r2, r3
 800246c:	2300      	movs	r3, #0
 800246e:	9301      	str	r3, [sp, #4]
 8002470:	2302      	movs	r3, #2
 8002472:	9300      	str	r3, [sp, #0]
 8002474:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002478:	2178      	movs	r1, #120	; 0x78
 800247a:	4819      	ldr	r0, [pc, #100]	; (80024e0 <FreqMenu_DrawPresetMenu+0xb0c>)
 800247c:	f00e fa38 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002480:	7abb      	ldrb	r3, [r7, #10]
 8002482:	b29a      	uxth	r2, r3
 8002484:	2300      	movs	r3, #0
 8002486:	9301      	str	r3, [sp, #4]
 8002488:	2302      	movs	r3, #2
 800248a:	9300      	str	r3, [sp, #0]
 800248c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002490:	2178      	movs	r1, #120	; 0x78
 8002492:	4814      	ldr	r0, [pc, #80]	; (80024e4 <FreqMenu_DrawPresetMenu+0xb10>)
 8002494:	f00e fa2c 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002498:	7a7b      	ldrb	r3, [r7, #9]
 800249a:	b29a      	uxth	r2, r3
 800249c:	2300      	movs	r3, #0
 800249e:	9301      	str	r3, [sp, #4]
 80024a0:	2302      	movs	r3, #2
 80024a2:	9300      	str	r3, [sp, #0]
 80024a4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80024a8:	2178      	movs	r1, #120	; 0x78
 80024aa:	480f      	ldr	r0, [pc, #60]	; (80024e8 <FreqMenu_DrawPresetMenu+0xb14>)
 80024ac:	f00e fa20 	bl	80108f0 <ILI9341_Draw_Text>
				break;
 80024b0:	f000 bd1e 	b.w	8002ef0 <FreqMenu_DrawPresetMenu+0x151c>
 80024b4:	0801598c 	.word	0x0801598c
 80024b8:	08015994 	.word	0x08015994
 80024bc:	0801599c 	.word	0x0801599c
 80024c0:	080159a4 	.word	0x080159a4
 80024c4:	080159ac 	.word	0x080159ac
 80024c8:	080159b4 	.word	0x080159b4
 80024cc:	080159bc 	.word	0x080159bc
 80024d0:	080159c4 	.word	0x080159c4
 80024d4:	080159cc 	.word	0x080159cc
 80024d8:	080159d4 	.word	0x080159d4
 80024dc:	080159dc 	.word	0x080159dc
 80024e0:	080159e4 	.word	0x080159e4
 80024e4:	080159ec 	.word	0x080159ec
 80024e8:	080159f4 	.word	0x080159f4
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80024ec:	7bfb      	ldrb	r3, [r7, #15]
 80024ee:	b29a      	uxth	r2, r3
 80024f0:	2300      	movs	r3, #0
 80024f2:	9301      	str	r3, [sp, #4]
 80024f4:	2302      	movs	r3, #2
 80024f6:	9300      	str	r3, [sp, #0]
 80024f8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80024fc:	2105      	movs	r1, #5
 80024fe:	48a5      	ldr	r0, [pc, #660]	; (8002794 <FreqMenu_DrawPresetMenu+0xdc0>)
 8002500:	f00e f9f6 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002504:	7bbb      	ldrb	r3, [r7, #14]
 8002506:	b29a      	uxth	r2, r3
 8002508:	2300      	movs	r3, #0
 800250a:	9301      	str	r3, [sp, #4]
 800250c:	2302      	movs	r3, #2
 800250e:	9300      	str	r3, [sp, #0]
 8002510:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002514:	2105      	movs	r1, #5
 8002516:	48a0      	ldr	r0, [pc, #640]	; (8002798 <FreqMenu_DrawPresetMenu+0xdc4>)
 8002518:	f00e f9ea 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800251c:	7b7b      	ldrb	r3, [r7, #13]
 800251e:	b29a      	uxth	r2, r3
 8002520:	2300      	movs	r3, #0
 8002522:	9301      	str	r3, [sp, #4]
 8002524:	2302      	movs	r3, #2
 8002526:	9300      	str	r3, [sp, #0]
 8002528:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800252c:	2105      	movs	r1, #5
 800252e:	489b      	ldr	r0, [pc, #620]	; (800279c <FreqMenu_DrawPresetMenu+0xdc8>)
 8002530:	f00e f9de 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002534:	7b3b      	ldrb	r3, [r7, #12]
 8002536:	b29a      	uxth	r2, r3
 8002538:	2300      	movs	r3, #0
 800253a:	9301      	str	r3, [sp, #4]
 800253c:	2302      	movs	r3, #2
 800253e:	9300      	str	r3, [sp, #0]
 8002540:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002544:	2105      	movs	r1, #5
 8002546:	4896      	ldr	r0, [pc, #600]	; (80027a0 <FreqMenu_DrawPresetMenu+0xdcc>)
 8002548:	f00e f9d2 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800254c:	7afb      	ldrb	r3, [r7, #11]
 800254e:	b29a      	uxth	r2, r3
 8002550:	2300      	movs	r3, #0
 8002552:	9301      	str	r3, [sp, #4]
 8002554:	2302      	movs	r3, #2
 8002556:	9300      	str	r3, [sp, #0]
 8002558:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800255c:	2105      	movs	r1, #5
 800255e:	4891      	ldr	r0, [pc, #580]	; (80027a4 <FreqMenu_DrawPresetMenu+0xdd0>)
 8002560:	f00e f9c6 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002564:	7abb      	ldrb	r3, [r7, #10]
 8002566:	b29a      	uxth	r2, r3
 8002568:	2300      	movs	r3, #0
 800256a:	9301      	str	r3, [sp, #4]
 800256c:	2302      	movs	r3, #2
 800256e:	9300      	str	r3, [sp, #0]
 8002570:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002574:	2105      	movs	r1, #5
 8002576:	488c      	ldr	r0, [pc, #560]	; (80027a8 <FreqMenu_DrawPresetMenu+0xdd4>)
 8002578:	f00e f9ba 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800257c:	7a7b      	ldrb	r3, [r7, #9]
 800257e:	b29a      	uxth	r2, r3
 8002580:	2300      	movs	r3, #0
 8002582:	9301      	str	r3, [sp, #4]
 8002584:	2302      	movs	r3, #2
 8002586:	9300      	str	r3, [sp, #0]
 8002588:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800258c:	2105      	movs	r1, #5
 800258e:	4887      	ldr	r0, [pc, #540]	; (80027ac <FreqMenu_DrawPresetMenu+0xdd8>)
 8002590:	f00e f9ae 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002594:	7bfb      	ldrb	r3, [r7, #15]
 8002596:	b29a      	uxth	r2, r3
 8002598:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 800259c:	9301      	str	r3, [sp, #4]
 800259e:	2302      	movs	r3, #2
 80025a0:	9300      	str	r3, [sp, #0]
 80025a2:	2300      	movs	r3, #0
 80025a4:	2178      	movs	r1, #120	; 0x78
 80025a6:	4882      	ldr	r0, [pc, #520]	; (80027b0 <FreqMenu_DrawPresetMenu+0xddc>)
 80025a8:	f00e f9a2 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025ac:	7bbb      	ldrb	r3, [r7, #14]
 80025ae:	b29a      	uxth	r2, r3
 80025b0:	2300      	movs	r3, #0
 80025b2:	9301      	str	r3, [sp, #4]
 80025b4:	2302      	movs	r3, #2
 80025b6:	9300      	str	r3, [sp, #0]
 80025b8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025bc:	2178      	movs	r1, #120	; 0x78
 80025be:	487d      	ldr	r0, [pc, #500]	; (80027b4 <FreqMenu_DrawPresetMenu+0xde0>)
 80025c0:	f00e f996 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025c4:	7b7b      	ldrb	r3, [r7, #13]
 80025c6:	b29a      	uxth	r2, r3
 80025c8:	2300      	movs	r3, #0
 80025ca:	9301      	str	r3, [sp, #4]
 80025cc:	2302      	movs	r3, #2
 80025ce:	9300      	str	r3, [sp, #0]
 80025d0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025d4:	2178      	movs	r1, #120	; 0x78
 80025d6:	4878      	ldr	r0, [pc, #480]	; (80027b8 <FreqMenu_DrawPresetMenu+0xde4>)
 80025d8:	f00e f98a 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025dc:	7b3b      	ldrb	r3, [r7, #12]
 80025de:	b29a      	uxth	r2, r3
 80025e0:	2300      	movs	r3, #0
 80025e2:	9301      	str	r3, [sp, #4]
 80025e4:	2302      	movs	r3, #2
 80025e6:	9300      	str	r3, [sp, #0]
 80025e8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025ec:	2178      	movs	r1, #120	; 0x78
 80025ee:	4873      	ldr	r0, [pc, #460]	; (80027bc <FreqMenu_DrawPresetMenu+0xde8>)
 80025f0:	f00e f97e 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025f4:	7afb      	ldrb	r3, [r7, #11]
 80025f6:	b29a      	uxth	r2, r3
 80025f8:	2300      	movs	r3, #0
 80025fa:	9301      	str	r3, [sp, #4]
 80025fc:	2302      	movs	r3, #2
 80025fe:	9300      	str	r3, [sp, #0]
 8002600:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002604:	2178      	movs	r1, #120	; 0x78
 8002606:	486e      	ldr	r0, [pc, #440]	; (80027c0 <FreqMenu_DrawPresetMenu+0xdec>)
 8002608:	f00e f972 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800260c:	7abb      	ldrb	r3, [r7, #10]
 800260e:	b29a      	uxth	r2, r3
 8002610:	2300      	movs	r3, #0
 8002612:	9301      	str	r3, [sp, #4]
 8002614:	2302      	movs	r3, #2
 8002616:	9300      	str	r3, [sp, #0]
 8002618:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800261c:	2178      	movs	r1, #120	; 0x78
 800261e:	4869      	ldr	r0, [pc, #420]	; (80027c4 <FreqMenu_DrawPresetMenu+0xdf0>)
 8002620:	f00e f966 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002624:	7a7b      	ldrb	r3, [r7, #9]
 8002626:	b29a      	uxth	r2, r3
 8002628:	2300      	movs	r3, #0
 800262a:	9301      	str	r3, [sp, #4]
 800262c:	2302      	movs	r3, #2
 800262e:	9300      	str	r3, [sp, #0]
 8002630:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002634:	2178      	movs	r1, #120	; 0x78
 8002636:	4864      	ldr	r0, [pc, #400]	; (80027c8 <FreqMenu_DrawPresetMenu+0xdf4>)
 8002638:	f00e f95a 	bl	80108f0 <ILI9341_Draw_Text>
				break;
 800263c:	f000 bc58 	b.w	8002ef0 <FreqMenu_DrawPresetMenu+0x151c>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002640:	7bfb      	ldrb	r3, [r7, #15]
 8002642:	b29a      	uxth	r2, r3
 8002644:	2300      	movs	r3, #0
 8002646:	9301      	str	r3, [sp, #4]
 8002648:	2302      	movs	r3, #2
 800264a:	9300      	str	r3, [sp, #0]
 800264c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002650:	2105      	movs	r1, #5
 8002652:	4850      	ldr	r0, [pc, #320]	; (8002794 <FreqMenu_DrawPresetMenu+0xdc0>)
 8002654:	f00e f94c 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002658:	7bbb      	ldrb	r3, [r7, #14]
 800265a:	b29a      	uxth	r2, r3
 800265c:	2300      	movs	r3, #0
 800265e:	9301      	str	r3, [sp, #4]
 8002660:	2302      	movs	r3, #2
 8002662:	9300      	str	r3, [sp, #0]
 8002664:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002668:	2105      	movs	r1, #5
 800266a:	484b      	ldr	r0, [pc, #300]	; (8002798 <FreqMenu_DrawPresetMenu+0xdc4>)
 800266c:	f00e f940 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002670:	7b7b      	ldrb	r3, [r7, #13]
 8002672:	b29a      	uxth	r2, r3
 8002674:	2300      	movs	r3, #0
 8002676:	9301      	str	r3, [sp, #4]
 8002678:	2302      	movs	r3, #2
 800267a:	9300      	str	r3, [sp, #0]
 800267c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002680:	2105      	movs	r1, #5
 8002682:	4846      	ldr	r0, [pc, #280]	; (800279c <FreqMenu_DrawPresetMenu+0xdc8>)
 8002684:	f00e f934 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002688:	7b3b      	ldrb	r3, [r7, #12]
 800268a:	b29a      	uxth	r2, r3
 800268c:	2300      	movs	r3, #0
 800268e:	9301      	str	r3, [sp, #4]
 8002690:	2302      	movs	r3, #2
 8002692:	9300      	str	r3, [sp, #0]
 8002694:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002698:	2105      	movs	r1, #5
 800269a:	4841      	ldr	r0, [pc, #260]	; (80027a0 <FreqMenu_DrawPresetMenu+0xdcc>)
 800269c:	f00e f928 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80026a0:	7afb      	ldrb	r3, [r7, #11]
 80026a2:	b29a      	uxth	r2, r3
 80026a4:	2300      	movs	r3, #0
 80026a6:	9301      	str	r3, [sp, #4]
 80026a8:	2302      	movs	r3, #2
 80026aa:	9300      	str	r3, [sp, #0]
 80026ac:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80026b0:	2105      	movs	r1, #5
 80026b2:	483c      	ldr	r0, [pc, #240]	; (80027a4 <FreqMenu_DrawPresetMenu+0xdd0>)
 80026b4:	f00e f91c 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80026b8:	7abb      	ldrb	r3, [r7, #10]
 80026ba:	b29a      	uxth	r2, r3
 80026bc:	2300      	movs	r3, #0
 80026be:	9301      	str	r3, [sp, #4]
 80026c0:	2302      	movs	r3, #2
 80026c2:	9300      	str	r3, [sp, #0]
 80026c4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80026c8:	2105      	movs	r1, #5
 80026ca:	4837      	ldr	r0, [pc, #220]	; (80027a8 <FreqMenu_DrawPresetMenu+0xdd4>)
 80026cc:	f00e f910 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80026d0:	7a7b      	ldrb	r3, [r7, #9]
 80026d2:	b29a      	uxth	r2, r3
 80026d4:	2300      	movs	r3, #0
 80026d6:	9301      	str	r3, [sp, #4]
 80026d8:	2302      	movs	r3, #2
 80026da:	9300      	str	r3, [sp, #0]
 80026dc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80026e0:	2105      	movs	r1, #5
 80026e2:	4832      	ldr	r0, [pc, #200]	; (80027ac <FreqMenu_DrawPresetMenu+0xdd8>)
 80026e4:	f00e f904 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80026e8:	7bfb      	ldrb	r3, [r7, #15]
 80026ea:	b29a      	uxth	r2, r3
 80026ec:	2300      	movs	r3, #0
 80026ee:	9301      	str	r3, [sp, #4]
 80026f0:	2302      	movs	r3, #2
 80026f2:	9300      	str	r3, [sp, #0]
 80026f4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80026f8:	2178      	movs	r1, #120	; 0x78
 80026fa:	482d      	ldr	r0, [pc, #180]	; (80027b0 <FreqMenu_DrawPresetMenu+0xddc>)
 80026fc:	f00e f8f8 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002700:	7bbb      	ldrb	r3, [r7, #14]
 8002702:	b29a      	uxth	r2, r3
 8002704:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002708:	9301      	str	r3, [sp, #4]
 800270a:	2302      	movs	r3, #2
 800270c:	9300      	str	r3, [sp, #0]
 800270e:	2300      	movs	r3, #0
 8002710:	2178      	movs	r1, #120	; 0x78
 8002712:	4828      	ldr	r0, [pc, #160]	; (80027b4 <FreqMenu_DrawPresetMenu+0xde0>)
 8002714:	f00e f8ec 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002718:	7b7b      	ldrb	r3, [r7, #13]
 800271a:	b29a      	uxth	r2, r3
 800271c:	2300      	movs	r3, #0
 800271e:	9301      	str	r3, [sp, #4]
 8002720:	2302      	movs	r3, #2
 8002722:	9300      	str	r3, [sp, #0]
 8002724:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002728:	2178      	movs	r1, #120	; 0x78
 800272a:	4823      	ldr	r0, [pc, #140]	; (80027b8 <FreqMenu_DrawPresetMenu+0xde4>)
 800272c:	f00e f8e0 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002730:	7b3b      	ldrb	r3, [r7, #12]
 8002732:	b29a      	uxth	r2, r3
 8002734:	2300      	movs	r3, #0
 8002736:	9301      	str	r3, [sp, #4]
 8002738:	2302      	movs	r3, #2
 800273a:	9300      	str	r3, [sp, #0]
 800273c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002740:	2178      	movs	r1, #120	; 0x78
 8002742:	481e      	ldr	r0, [pc, #120]	; (80027bc <FreqMenu_DrawPresetMenu+0xde8>)
 8002744:	f00e f8d4 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002748:	7afb      	ldrb	r3, [r7, #11]
 800274a:	b29a      	uxth	r2, r3
 800274c:	2300      	movs	r3, #0
 800274e:	9301      	str	r3, [sp, #4]
 8002750:	2302      	movs	r3, #2
 8002752:	9300      	str	r3, [sp, #0]
 8002754:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002758:	2178      	movs	r1, #120	; 0x78
 800275a:	4819      	ldr	r0, [pc, #100]	; (80027c0 <FreqMenu_DrawPresetMenu+0xdec>)
 800275c:	f00e f8c8 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002760:	7abb      	ldrb	r3, [r7, #10]
 8002762:	b29a      	uxth	r2, r3
 8002764:	2300      	movs	r3, #0
 8002766:	9301      	str	r3, [sp, #4]
 8002768:	2302      	movs	r3, #2
 800276a:	9300      	str	r3, [sp, #0]
 800276c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002770:	2178      	movs	r1, #120	; 0x78
 8002772:	4814      	ldr	r0, [pc, #80]	; (80027c4 <FreqMenu_DrawPresetMenu+0xdf0>)
 8002774:	f00e f8bc 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002778:	7a7b      	ldrb	r3, [r7, #9]
 800277a:	b29a      	uxth	r2, r3
 800277c:	2300      	movs	r3, #0
 800277e:	9301      	str	r3, [sp, #4]
 8002780:	2302      	movs	r3, #2
 8002782:	9300      	str	r3, [sp, #0]
 8002784:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002788:	2178      	movs	r1, #120	; 0x78
 800278a:	480f      	ldr	r0, [pc, #60]	; (80027c8 <FreqMenu_DrawPresetMenu+0xdf4>)
 800278c:	f00e f8b0 	bl	80108f0 <ILI9341_Draw_Text>
				break;
 8002790:	e3ae      	b.n	8002ef0 <FreqMenu_DrawPresetMenu+0x151c>
 8002792:	bf00      	nop
 8002794:	0801598c 	.word	0x0801598c
 8002798:	08015994 	.word	0x08015994
 800279c:	0801599c 	.word	0x0801599c
 80027a0:	080159a4 	.word	0x080159a4
 80027a4:	080159ac 	.word	0x080159ac
 80027a8:	080159b4 	.word	0x080159b4
 80027ac:	080159bc 	.word	0x080159bc
 80027b0:	080159c4 	.word	0x080159c4
 80027b4:	080159cc 	.word	0x080159cc
 80027b8:	080159d4 	.word	0x080159d4
 80027bc:	080159dc 	.word	0x080159dc
 80027c0:	080159e4 	.word	0x080159e4
 80027c4:	080159ec 	.word	0x080159ec
 80027c8:	080159f4 	.word	0x080159f4
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80027cc:	7bfb      	ldrb	r3, [r7, #15]
 80027ce:	b29a      	uxth	r2, r3
 80027d0:	2300      	movs	r3, #0
 80027d2:	9301      	str	r3, [sp, #4]
 80027d4:	2302      	movs	r3, #2
 80027d6:	9300      	str	r3, [sp, #0]
 80027d8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80027dc:	2105      	movs	r1, #5
 80027de:	48a4      	ldr	r0, [pc, #656]	; (8002a70 <FreqMenu_DrawPresetMenu+0x109c>)
 80027e0:	f00e f886 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80027e4:	7bbb      	ldrb	r3, [r7, #14]
 80027e6:	b29a      	uxth	r2, r3
 80027e8:	2300      	movs	r3, #0
 80027ea:	9301      	str	r3, [sp, #4]
 80027ec:	2302      	movs	r3, #2
 80027ee:	9300      	str	r3, [sp, #0]
 80027f0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80027f4:	2105      	movs	r1, #5
 80027f6:	489f      	ldr	r0, [pc, #636]	; (8002a74 <FreqMenu_DrawPresetMenu+0x10a0>)
 80027f8:	f00e f87a 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80027fc:	7b7b      	ldrb	r3, [r7, #13]
 80027fe:	b29a      	uxth	r2, r3
 8002800:	2300      	movs	r3, #0
 8002802:	9301      	str	r3, [sp, #4]
 8002804:	2302      	movs	r3, #2
 8002806:	9300      	str	r3, [sp, #0]
 8002808:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800280c:	2105      	movs	r1, #5
 800280e:	489a      	ldr	r0, [pc, #616]	; (8002a78 <FreqMenu_DrawPresetMenu+0x10a4>)
 8002810:	f00e f86e 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002814:	7b3b      	ldrb	r3, [r7, #12]
 8002816:	b29a      	uxth	r2, r3
 8002818:	2300      	movs	r3, #0
 800281a:	9301      	str	r3, [sp, #4]
 800281c:	2302      	movs	r3, #2
 800281e:	9300      	str	r3, [sp, #0]
 8002820:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002824:	2105      	movs	r1, #5
 8002826:	4895      	ldr	r0, [pc, #596]	; (8002a7c <FreqMenu_DrawPresetMenu+0x10a8>)
 8002828:	f00e f862 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800282c:	7afb      	ldrb	r3, [r7, #11]
 800282e:	b29a      	uxth	r2, r3
 8002830:	2300      	movs	r3, #0
 8002832:	9301      	str	r3, [sp, #4]
 8002834:	2302      	movs	r3, #2
 8002836:	9300      	str	r3, [sp, #0]
 8002838:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800283c:	2105      	movs	r1, #5
 800283e:	4890      	ldr	r0, [pc, #576]	; (8002a80 <FreqMenu_DrawPresetMenu+0x10ac>)
 8002840:	f00e f856 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002844:	7abb      	ldrb	r3, [r7, #10]
 8002846:	b29a      	uxth	r2, r3
 8002848:	2300      	movs	r3, #0
 800284a:	9301      	str	r3, [sp, #4]
 800284c:	2302      	movs	r3, #2
 800284e:	9300      	str	r3, [sp, #0]
 8002850:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002854:	2105      	movs	r1, #5
 8002856:	488b      	ldr	r0, [pc, #556]	; (8002a84 <FreqMenu_DrawPresetMenu+0x10b0>)
 8002858:	f00e f84a 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800285c:	7a7b      	ldrb	r3, [r7, #9]
 800285e:	b29a      	uxth	r2, r3
 8002860:	2300      	movs	r3, #0
 8002862:	9301      	str	r3, [sp, #4]
 8002864:	2302      	movs	r3, #2
 8002866:	9300      	str	r3, [sp, #0]
 8002868:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800286c:	2105      	movs	r1, #5
 800286e:	4886      	ldr	r0, [pc, #536]	; (8002a88 <FreqMenu_DrawPresetMenu+0x10b4>)
 8002870:	f00e f83e 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002874:	7bfb      	ldrb	r3, [r7, #15]
 8002876:	b29a      	uxth	r2, r3
 8002878:	2300      	movs	r3, #0
 800287a:	9301      	str	r3, [sp, #4]
 800287c:	2302      	movs	r3, #2
 800287e:	9300      	str	r3, [sp, #0]
 8002880:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002884:	2178      	movs	r1, #120	; 0x78
 8002886:	4881      	ldr	r0, [pc, #516]	; (8002a8c <FreqMenu_DrawPresetMenu+0x10b8>)
 8002888:	f00e f832 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800288c:	7bbb      	ldrb	r3, [r7, #14]
 800288e:	b29a      	uxth	r2, r3
 8002890:	2300      	movs	r3, #0
 8002892:	9301      	str	r3, [sp, #4]
 8002894:	2302      	movs	r3, #2
 8002896:	9300      	str	r3, [sp, #0]
 8002898:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800289c:	2178      	movs	r1, #120	; 0x78
 800289e:	487c      	ldr	r0, [pc, #496]	; (8002a90 <FreqMenu_DrawPresetMenu+0x10bc>)
 80028a0:	f00e f826 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80028a4:	7b7b      	ldrb	r3, [r7, #13]
 80028a6:	b29a      	uxth	r2, r3
 80028a8:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80028ac:	9301      	str	r3, [sp, #4]
 80028ae:	2302      	movs	r3, #2
 80028b0:	9300      	str	r3, [sp, #0]
 80028b2:	2300      	movs	r3, #0
 80028b4:	2178      	movs	r1, #120	; 0x78
 80028b6:	4877      	ldr	r0, [pc, #476]	; (8002a94 <FreqMenu_DrawPresetMenu+0x10c0>)
 80028b8:	f00e f81a 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80028bc:	7b3b      	ldrb	r3, [r7, #12]
 80028be:	b29a      	uxth	r2, r3
 80028c0:	2300      	movs	r3, #0
 80028c2:	9301      	str	r3, [sp, #4]
 80028c4:	2302      	movs	r3, #2
 80028c6:	9300      	str	r3, [sp, #0]
 80028c8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80028cc:	2178      	movs	r1, #120	; 0x78
 80028ce:	4872      	ldr	r0, [pc, #456]	; (8002a98 <FreqMenu_DrawPresetMenu+0x10c4>)
 80028d0:	f00e f80e 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80028d4:	7afb      	ldrb	r3, [r7, #11]
 80028d6:	b29a      	uxth	r2, r3
 80028d8:	2300      	movs	r3, #0
 80028da:	9301      	str	r3, [sp, #4]
 80028dc:	2302      	movs	r3, #2
 80028de:	9300      	str	r3, [sp, #0]
 80028e0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80028e4:	2178      	movs	r1, #120	; 0x78
 80028e6:	486d      	ldr	r0, [pc, #436]	; (8002a9c <FreqMenu_DrawPresetMenu+0x10c8>)
 80028e8:	f00e f802 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80028ec:	7abb      	ldrb	r3, [r7, #10]
 80028ee:	b29a      	uxth	r2, r3
 80028f0:	2300      	movs	r3, #0
 80028f2:	9301      	str	r3, [sp, #4]
 80028f4:	2302      	movs	r3, #2
 80028f6:	9300      	str	r3, [sp, #0]
 80028f8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80028fc:	2178      	movs	r1, #120	; 0x78
 80028fe:	4868      	ldr	r0, [pc, #416]	; (8002aa0 <FreqMenu_DrawPresetMenu+0x10cc>)
 8002900:	f00d fff6 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002904:	7a7b      	ldrb	r3, [r7, #9]
 8002906:	b29a      	uxth	r2, r3
 8002908:	2300      	movs	r3, #0
 800290a:	9301      	str	r3, [sp, #4]
 800290c:	2302      	movs	r3, #2
 800290e:	9300      	str	r3, [sp, #0]
 8002910:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002914:	2178      	movs	r1, #120	; 0x78
 8002916:	4863      	ldr	r0, [pc, #396]	; (8002aa4 <FreqMenu_DrawPresetMenu+0x10d0>)
 8002918:	f00d ffea 	bl	80108f0 <ILI9341_Draw_Text>
				break;
 800291c:	e2e8      	b.n	8002ef0 <FreqMenu_DrawPresetMenu+0x151c>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800291e:	7bfb      	ldrb	r3, [r7, #15]
 8002920:	b29a      	uxth	r2, r3
 8002922:	2300      	movs	r3, #0
 8002924:	9301      	str	r3, [sp, #4]
 8002926:	2302      	movs	r3, #2
 8002928:	9300      	str	r3, [sp, #0]
 800292a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800292e:	2105      	movs	r1, #5
 8002930:	484f      	ldr	r0, [pc, #316]	; (8002a70 <FreqMenu_DrawPresetMenu+0x109c>)
 8002932:	f00d ffdd 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002936:	7bbb      	ldrb	r3, [r7, #14]
 8002938:	b29a      	uxth	r2, r3
 800293a:	2300      	movs	r3, #0
 800293c:	9301      	str	r3, [sp, #4]
 800293e:	2302      	movs	r3, #2
 8002940:	9300      	str	r3, [sp, #0]
 8002942:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002946:	2105      	movs	r1, #5
 8002948:	484a      	ldr	r0, [pc, #296]	; (8002a74 <FreqMenu_DrawPresetMenu+0x10a0>)
 800294a:	f00d ffd1 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800294e:	7b7b      	ldrb	r3, [r7, #13]
 8002950:	b29a      	uxth	r2, r3
 8002952:	2300      	movs	r3, #0
 8002954:	9301      	str	r3, [sp, #4]
 8002956:	2302      	movs	r3, #2
 8002958:	9300      	str	r3, [sp, #0]
 800295a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800295e:	2105      	movs	r1, #5
 8002960:	4845      	ldr	r0, [pc, #276]	; (8002a78 <FreqMenu_DrawPresetMenu+0x10a4>)
 8002962:	f00d ffc5 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002966:	7b3b      	ldrb	r3, [r7, #12]
 8002968:	b29a      	uxth	r2, r3
 800296a:	2300      	movs	r3, #0
 800296c:	9301      	str	r3, [sp, #4]
 800296e:	2302      	movs	r3, #2
 8002970:	9300      	str	r3, [sp, #0]
 8002972:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002976:	2105      	movs	r1, #5
 8002978:	4840      	ldr	r0, [pc, #256]	; (8002a7c <FreqMenu_DrawPresetMenu+0x10a8>)
 800297a:	f00d ffb9 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800297e:	7afb      	ldrb	r3, [r7, #11]
 8002980:	b29a      	uxth	r2, r3
 8002982:	2300      	movs	r3, #0
 8002984:	9301      	str	r3, [sp, #4]
 8002986:	2302      	movs	r3, #2
 8002988:	9300      	str	r3, [sp, #0]
 800298a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800298e:	2105      	movs	r1, #5
 8002990:	483b      	ldr	r0, [pc, #236]	; (8002a80 <FreqMenu_DrawPresetMenu+0x10ac>)
 8002992:	f00d ffad 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002996:	7abb      	ldrb	r3, [r7, #10]
 8002998:	b29a      	uxth	r2, r3
 800299a:	2300      	movs	r3, #0
 800299c:	9301      	str	r3, [sp, #4]
 800299e:	2302      	movs	r3, #2
 80029a0:	9300      	str	r3, [sp, #0]
 80029a2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80029a6:	2105      	movs	r1, #5
 80029a8:	4836      	ldr	r0, [pc, #216]	; (8002a84 <FreqMenu_DrawPresetMenu+0x10b0>)
 80029aa:	f00d ffa1 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80029ae:	7a7b      	ldrb	r3, [r7, #9]
 80029b0:	b29a      	uxth	r2, r3
 80029b2:	2300      	movs	r3, #0
 80029b4:	9301      	str	r3, [sp, #4]
 80029b6:	2302      	movs	r3, #2
 80029b8:	9300      	str	r3, [sp, #0]
 80029ba:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80029be:	2105      	movs	r1, #5
 80029c0:	4831      	ldr	r0, [pc, #196]	; (8002a88 <FreqMenu_DrawPresetMenu+0x10b4>)
 80029c2:	f00d ff95 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80029c6:	7bfb      	ldrb	r3, [r7, #15]
 80029c8:	b29a      	uxth	r2, r3
 80029ca:	2300      	movs	r3, #0
 80029cc:	9301      	str	r3, [sp, #4]
 80029ce:	2302      	movs	r3, #2
 80029d0:	9300      	str	r3, [sp, #0]
 80029d2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80029d6:	2178      	movs	r1, #120	; 0x78
 80029d8:	482c      	ldr	r0, [pc, #176]	; (8002a8c <FreqMenu_DrawPresetMenu+0x10b8>)
 80029da:	f00d ff89 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80029de:	7bbb      	ldrb	r3, [r7, #14]
 80029e0:	b29a      	uxth	r2, r3
 80029e2:	2300      	movs	r3, #0
 80029e4:	9301      	str	r3, [sp, #4]
 80029e6:	2302      	movs	r3, #2
 80029e8:	9300      	str	r3, [sp, #0]
 80029ea:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80029ee:	2178      	movs	r1, #120	; 0x78
 80029f0:	4827      	ldr	r0, [pc, #156]	; (8002a90 <FreqMenu_DrawPresetMenu+0x10bc>)
 80029f2:	f00d ff7d 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80029f6:	7b7b      	ldrb	r3, [r7, #13]
 80029f8:	b29a      	uxth	r2, r3
 80029fa:	2300      	movs	r3, #0
 80029fc:	9301      	str	r3, [sp, #4]
 80029fe:	2302      	movs	r3, #2
 8002a00:	9300      	str	r3, [sp, #0]
 8002a02:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a06:	2178      	movs	r1, #120	; 0x78
 8002a08:	4822      	ldr	r0, [pc, #136]	; (8002a94 <FreqMenu_DrawPresetMenu+0x10c0>)
 8002a0a:	f00d ff71 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002a0e:	7b3b      	ldrb	r3, [r7, #12]
 8002a10:	b29a      	uxth	r2, r3
 8002a12:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002a16:	9301      	str	r3, [sp, #4]
 8002a18:	2302      	movs	r3, #2
 8002a1a:	9300      	str	r3, [sp, #0]
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	2178      	movs	r1, #120	; 0x78
 8002a20:	481d      	ldr	r0, [pc, #116]	; (8002a98 <FreqMenu_DrawPresetMenu+0x10c4>)
 8002a22:	f00d ff65 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a26:	7afb      	ldrb	r3, [r7, #11]
 8002a28:	b29a      	uxth	r2, r3
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	9301      	str	r3, [sp, #4]
 8002a2e:	2302      	movs	r3, #2
 8002a30:	9300      	str	r3, [sp, #0]
 8002a32:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a36:	2178      	movs	r1, #120	; 0x78
 8002a38:	4818      	ldr	r0, [pc, #96]	; (8002a9c <FreqMenu_DrawPresetMenu+0x10c8>)
 8002a3a:	f00d ff59 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a3e:	7abb      	ldrb	r3, [r7, #10]
 8002a40:	b29a      	uxth	r2, r3
 8002a42:	2300      	movs	r3, #0
 8002a44:	9301      	str	r3, [sp, #4]
 8002a46:	2302      	movs	r3, #2
 8002a48:	9300      	str	r3, [sp, #0]
 8002a4a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a4e:	2178      	movs	r1, #120	; 0x78
 8002a50:	4813      	ldr	r0, [pc, #76]	; (8002aa0 <FreqMenu_DrawPresetMenu+0x10cc>)
 8002a52:	f00d ff4d 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a56:	7a7b      	ldrb	r3, [r7, #9]
 8002a58:	b29a      	uxth	r2, r3
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	9301      	str	r3, [sp, #4]
 8002a5e:	2302      	movs	r3, #2
 8002a60:	9300      	str	r3, [sp, #0]
 8002a62:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a66:	2178      	movs	r1, #120	; 0x78
 8002a68:	480e      	ldr	r0, [pc, #56]	; (8002aa4 <FreqMenu_DrawPresetMenu+0x10d0>)
 8002a6a:	f00d ff41 	bl	80108f0 <ILI9341_Draw_Text>
				break;
 8002a6e:	e23f      	b.n	8002ef0 <FreqMenu_DrawPresetMenu+0x151c>
 8002a70:	0801598c 	.word	0x0801598c
 8002a74:	08015994 	.word	0x08015994
 8002a78:	0801599c 	.word	0x0801599c
 8002a7c:	080159a4 	.word	0x080159a4
 8002a80:	080159ac 	.word	0x080159ac
 8002a84:	080159b4 	.word	0x080159b4
 8002a88:	080159bc 	.word	0x080159bc
 8002a8c:	080159c4 	.word	0x080159c4
 8002a90:	080159cc 	.word	0x080159cc
 8002a94:	080159d4 	.word	0x080159d4
 8002a98:	080159dc 	.word	0x080159dc
 8002a9c:	080159e4 	.word	0x080159e4
 8002aa0:	080159ec 	.word	0x080159ec
 8002aa4:	080159f4 	.word	0x080159f4
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002aa8:	7bfb      	ldrb	r3, [r7, #15]
 8002aaa:	b29a      	uxth	r2, r3
 8002aac:	2300      	movs	r3, #0
 8002aae:	9301      	str	r3, [sp, #4]
 8002ab0:	2302      	movs	r3, #2
 8002ab2:	9300      	str	r3, [sp, #0]
 8002ab4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002ab8:	2105      	movs	r1, #5
 8002aba:	48a4      	ldr	r0, [pc, #656]	; (8002d4c <FreqMenu_DrawPresetMenu+0x1378>)
 8002abc:	f00d ff18 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002ac0:	7bbb      	ldrb	r3, [r7, #14]
 8002ac2:	b29a      	uxth	r2, r3
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	9301      	str	r3, [sp, #4]
 8002ac8:	2302      	movs	r3, #2
 8002aca:	9300      	str	r3, [sp, #0]
 8002acc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002ad0:	2105      	movs	r1, #5
 8002ad2:	489f      	ldr	r0, [pc, #636]	; (8002d50 <FreqMenu_DrawPresetMenu+0x137c>)
 8002ad4:	f00d ff0c 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002ad8:	7b7b      	ldrb	r3, [r7, #13]
 8002ada:	b29a      	uxth	r2, r3
 8002adc:	2300      	movs	r3, #0
 8002ade:	9301      	str	r3, [sp, #4]
 8002ae0:	2302      	movs	r3, #2
 8002ae2:	9300      	str	r3, [sp, #0]
 8002ae4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002ae8:	2105      	movs	r1, #5
 8002aea:	489a      	ldr	r0, [pc, #616]	; (8002d54 <FreqMenu_DrawPresetMenu+0x1380>)
 8002aec:	f00d ff00 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002af0:	7b3b      	ldrb	r3, [r7, #12]
 8002af2:	b29a      	uxth	r2, r3
 8002af4:	2300      	movs	r3, #0
 8002af6:	9301      	str	r3, [sp, #4]
 8002af8:	2302      	movs	r3, #2
 8002afa:	9300      	str	r3, [sp, #0]
 8002afc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002b00:	2105      	movs	r1, #5
 8002b02:	4895      	ldr	r0, [pc, #596]	; (8002d58 <FreqMenu_DrawPresetMenu+0x1384>)
 8002b04:	f00d fef4 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002b08:	7afb      	ldrb	r3, [r7, #11]
 8002b0a:	b29a      	uxth	r2, r3
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	9301      	str	r3, [sp, #4]
 8002b10:	2302      	movs	r3, #2
 8002b12:	9300      	str	r3, [sp, #0]
 8002b14:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002b18:	2105      	movs	r1, #5
 8002b1a:	4890      	ldr	r0, [pc, #576]	; (8002d5c <FreqMenu_DrawPresetMenu+0x1388>)
 8002b1c:	f00d fee8 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002b20:	7abb      	ldrb	r3, [r7, #10]
 8002b22:	b29a      	uxth	r2, r3
 8002b24:	2300      	movs	r3, #0
 8002b26:	9301      	str	r3, [sp, #4]
 8002b28:	2302      	movs	r3, #2
 8002b2a:	9300      	str	r3, [sp, #0]
 8002b2c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002b30:	2105      	movs	r1, #5
 8002b32:	488b      	ldr	r0, [pc, #556]	; (8002d60 <FreqMenu_DrawPresetMenu+0x138c>)
 8002b34:	f00d fedc 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002b38:	7a7b      	ldrb	r3, [r7, #9]
 8002b3a:	b29a      	uxth	r2, r3
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	9301      	str	r3, [sp, #4]
 8002b40:	2302      	movs	r3, #2
 8002b42:	9300      	str	r3, [sp, #0]
 8002b44:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002b48:	2105      	movs	r1, #5
 8002b4a:	4886      	ldr	r0, [pc, #536]	; (8002d64 <FreqMenu_DrawPresetMenu+0x1390>)
 8002b4c:	f00d fed0 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002b50:	7bfb      	ldrb	r3, [r7, #15]
 8002b52:	b29a      	uxth	r2, r3
 8002b54:	2300      	movs	r3, #0
 8002b56:	9301      	str	r3, [sp, #4]
 8002b58:	2302      	movs	r3, #2
 8002b5a:	9300      	str	r3, [sp, #0]
 8002b5c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002b60:	2178      	movs	r1, #120	; 0x78
 8002b62:	4881      	ldr	r0, [pc, #516]	; (8002d68 <FreqMenu_DrawPresetMenu+0x1394>)
 8002b64:	f00d fec4 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002b68:	7bbb      	ldrb	r3, [r7, #14]
 8002b6a:	b29a      	uxth	r2, r3
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	9301      	str	r3, [sp, #4]
 8002b70:	2302      	movs	r3, #2
 8002b72:	9300      	str	r3, [sp, #0]
 8002b74:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002b78:	2178      	movs	r1, #120	; 0x78
 8002b7a:	487c      	ldr	r0, [pc, #496]	; (8002d6c <FreqMenu_DrawPresetMenu+0x1398>)
 8002b7c:	f00d feb8 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002b80:	7b7b      	ldrb	r3, [r7, #13]
 8002b82:	b29a      	uxth	r2, r3
 8002b84:	2300      	movs	r3, #0
 8002b86:	9301      	str	r3, [sp, #4]
 8002b88:	2302      	movs	r3, #2
 8002b8a:	9300      	str	r3, [sp, #0]
 8002b8c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002b90:	2178      	movs	r1, #120	; 0x78
 8002b92:	4877      	ldr	r0, [pc, #476]	; (8002d70 <FreqMenu_DrawPresetMenu+0x139c>)
 8002b94:	f00d feac 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002b98:	7b3b      	ldrb	r3, [r7, #12]
 8002b9a:	b29a      	uxth	r2, r3
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	9301      	str	r3, [sp, #4]
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	9300      	str	r3, [sp, #0]
 8002ba4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002ba8:	2178      	movs	r1, #120	; 0x78
 8002baa:	4872      	ldr	r0, [pc, #456]	; (8002d74 <FreqMenu_DrawPresetMenu+0x13a0>)
 8002bac:	f00d fea0 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002bb0:	7afb      	ldrb	r3, [r7, #11]
 8002bb2:	b29a      	uxth	r2, r3
 8002bb4:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002bb8:	9301      	str	r3, [sp, #4]
 8002bba:	2302      	movs	r3, #2
 8002bbc:	9300      	str	r3, [sp, #0]
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	2178      	movs	r1, #120	; 0x78
 8002bc2:	486d      	ldr	r0, [pc, #436]	; (8002d78 <FreqMenu_DrawPresetMenu+0x13a4>)
 8002bc4:	f00d fe94 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002bc8:	7abb      	ldrb	r3, [r7, #10]
 8002bca:	b29a      	uxth	r2, r3
 8002bcc:	2300      	movs	r3, #0
 8002bce:	9301      	str	r3, [sp, #4]
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	9300      	str	r3, [sp, #0]
 8002bd4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002bd8:	2178      	movs	r1, #120	; 0x78
 8002bda:	4868      	ldr	r0, [pc, #416]	; (8002d7c <FreqMenu_DrawPresetMenu+0x13a8>)
 8002bdc:	f00d fe88 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002be0:	7a7b      	ldrb	r3, [r7, #9]
 8002be2:	b29a      	uxth	r2, r3
 8002be4:	2300      	movs	r3, #0
 8002be6:	9301      	str	r3, [sp, #4]
 8002be8:	2302      	movs	r3, #2
 8002bea:	9300      	str	r3, [sp, #0]
 8002bec:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002bf0:	2178      	movs	r1, #120	; 0x78
 8002bf2:	4863      	ldr	r0, [pc, #396]	; (8002d80 <FreqMenu_DrawPresetMenu+0x13ac>)
 8002bf4:	f00d fe7c 	bl	80108f0 <ILI9341_Draw_Text>
			break;
 8002bf8:	e17a      	b.n	8002ef0 <FreqMenu_DrawPresetMenu+0x151c>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002bfa:	7bfb      	ldrb	r3, [r7, #15]
 8002bfc:	b29a      	uxth	r2, r3
 8002bfe:	2300      	movs	r3, #0
 8002c00:	9301      	str	r3, [sp, #4]
 8002c02:	2302      	movs	r3, #2
 8002c04:	9300      	str	r3, [sp, #0]
 8002c06:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002c0a:	2105      	movs	r1, #5
 8002c0c:	484f      	ldr	r0, [pc, #316]	; (8002d4c <FreqMenu_DrawPresetMenu+0x1378>)
 8002c0e:	f00d fe6f 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002c12:	7bbb      	ldrb	r3, [r7, #14]
 8002c14:	b29a      	uxth	r2, r3
 8002c16:	2300      	movs	r3, #0
 8002c18:	9301      	str	r3, [sp, #4]
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	9300      	str	r3, [sp, #0]
 8002c1e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002c22:	2105      	movs	r1, #5
 8002c24:	484a      	ldr	r0, [pc, #296]	; (8002d50 <FreqMenu_DrawPresetMenu+0x137c>)
 8002c26:	f00d fe63 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002c2a:	7b7b      	ldrb	r3, [r7, #13]
 8002c2c:	b29a      	uxth	r2, r3
 8002c2e:	2300      	movs	r3, #0
 8002c30:	9301      	str	r3, [sp, #4]
 8002c32:	2302      	movs	r3, #2
 8002c34:	9300      	str	r3, [sp, #0]
 8002c36:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002c3a:	2105      	movs	r1, #5
 8002c3c:	4845      	ldr	r0, [pc, #276]	; (8002d54 <FreqMenu_DrawPresetMenu+0x1380>)
 8002c3e:	f00d fe57 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002c42:	7b3b      	ldrb	r3, [r7, #12]
 8002c44:	b29a      	uxth	r2, r3
 8002c46:	2300      	movs	r3, #0
 8002c48:	9301      	str	r3, [sp, #4]
 8002c4a:	2302      	movs	r3, #2
 8002c4c:	9300      	str	r3, [sp, #0]
 8002c4e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002c52:	2105      	movs	r1, #5
 8002c54:	4840      	ldr	r0, [pc, #256]	; (8002d58 <FreqMenu_DrawPresetMenu+0x1384>)
 8002c56:	f00d fe4b 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002c5a:	7afb      	ldrb	r3, [r7, #11]
 8002c5c:	b29a      	uxth	r2, r3
 8002c5e:	2300      	movs	r3, #0
 8002c60:	9301      	str	r3, [sp, #4]
 8002c62:	2302      	movs	r3, #2
 8002c64:	9300      	str	r3, [sp, #0]
 8002c66:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002c6a:	2105      	movs	r1, #5
 8002c6c:	483b      	ldr	r0, [pc, #236]	; (8002d5c <FreqMenu_DrawPresetMenu+0x1388>)
 8002c6e:	f00d fe3f 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002c72:	7abb      	ldrb	r3, [r7, #10]
 8002c74:	b29a      	uxth	r2, r3
 8002c76:	2300      	movs	r3, #0
 8002c78:	9301      	str	r3, [sp, #4]
 8002c7a:	2302      	movs	r3, #2
 8002c7c:	9300      	str	r3, [sp, #0]
 8002c7e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002c82:	2105      	movs	r1, #5
 8002c84:	4836      	ldr	r0, [pc, #216]	; (8002d60 <FreqMenu_DrawPresetMenu+0x138c>)
 8002c86:	f00d fe33 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002c8a:	7a7b      	ldrb	r3, [r7, #9]
 8002c8c:	b29a      	uxth	r2, r3
 8002c8e:	2300      	movs	r3, #0
 8002c90:	9301      	str	r3, [sp, #4]
 8002c92:	2302      	movs	r3, #2
 8002c94:	9300      	str	r3, [sp, #0]
 8002c96:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002c9a:	2105      	movs	r1, #5
 8002c9c:	4831      	ldr	r0, [pc, #196]	; (8002d64 <FreqMenu_DrawPresetMenu+0x1390>)
 8002c9e:	f00d fe27 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002ca2:	7bfb      	ldrb	r3, [r7, #15]
 8002ca4:	b29a      	uxth	r2, r3
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	9301      	str	r3, [sp, #4]
 8002caa:	2302      	movs	r3, #2
 8002cac:	9300      	str	r3, [sp, #0]
 8002cae:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002cb2:	2178      	movs	r1, #120	; 0x78
 8002cb4:	482c      	ldr	r0, [pc, #176]	; (8002d68 <FreqMenu_DrawPresetMenu+0x1394>)
 8002cb6:	f00d fe1b 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002cba:	7bbb      	ldrb	r3, [r7, #14]
 8002cbc:	b29a      	uxth	r2, r3
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	9301      	str	r3, [sp, #4]
 8002cc2:	2302      	movs	r3, #2
 8002cc4:	9300      	str	r3, [sp, #0]
 8002cc6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002cca:	2178      	movs	r1, #120	; 0x78
 8002ccc:	4827      	ldr	r0, [pc, #156]	; (8002d6c <FreqMenu_DrawPresetMenu+0x1398>)
 8002cce:	f00d fe0f 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002cd2:	7b7b      	ldrb	r3, [r7, #13]
 8002cd4:	b29a      	uxth	r2, r3
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	9301      	str	r3, [sp, #4]
 8002cda:	2302      	movs	r3, #2
 8002cdc:	9300      	str	r3, [sp, #0]
 8002cde:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002ce2:	2178      	movs	r1, #120	; 0x78
 8002ce4:	4822      	ldr	r0, [pc, #136]	; (8002d70 <FreqMenu_DrawPresetMenu+0x139c>)
 8002ce6:	f00d fe03 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002cea:	7b3b      	ldrb	r3, [r7, #12]
 8002cec:	b29a      	uxth	r2, r3
 8002cee:	2300      	movs	r3, #0
 8002cf0:	9301      	str	r3, [sp, #4]
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	9300      	str	r3, [sp, #0]
 8002cf6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002cfa:	2178      	movs	r1, #120	; 0x78
 8002cfc:	481d      	ldr	r0, [pc, #116]	; (8002d74 <FreqMenu_DrawPresetMenu+0x13a0>)
 8002cfe:	f00d fdf7 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002d02:	7afb      	ldrb	r3, [r7, #11]
 8002d04:	b29a      	uxth	r2, r3
 8002d06:	2300      	movs	r3, #0
 8002d08:	9301      	str	r3, [sp, #4]
 8002d0a:	2302      	movs	r3, #2
 8002d0c:	9300      	str	r3, [sp, #0]
 8002d0e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002d12:	2178      	movs	r1, #120	; 0x78
 8002d14:	4818      	ldr	r0, [pc, #96]	; (8002d78 <FreqMenu_DrawPresetMenu+0x13a4>)
 8002d16:	f00d fdeb 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002d1a:	7abb      	ldrb	r3, [r7, #10]
 8002d1c:	b29a      	uxth	r2, r3
 8002d1e:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002d22:	9301      	str	r3, [sp, #4]
 8002d24:	2302      	movs	r3, #2
 8002d26:	9300      	str	r3, [sp, #0]
 8002d28:	2300      	movs	r3, #0
 8002d2a:	2178      	movs	r1, #120	; 0x78
 8002d2c:	4813      	ldr	r0, [pc, #76]	; (8002d7c <FreqMenu_DrawPresetMenu+0x13a8>)
 8002d2e:	f00d fddf 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002d32:	7a7b      	ldrb	r3, [r7, #9]
 8002d34:	b29a      	uxth	r2, r3
 8002d36:	2300      	movs	r3, #0
 8002d38:	9301      	str	r3, [sp, #4]
 8002d3a:	2302      	movs	r3, #2
 8002d3c:	9300      	str	r3, [sp, #0]
 8002d3e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002d42:	2178      	movs	r1, #120	; 0x78
 8002d44:	480e      	ldr	r0, [pc, #56]	; (8002d80 <FreqMenu_DrawPresetMenu+0x13ac>)
 8002d46:	f00d fdd3 	bl	80108f0 <ILI9341_Draw_Text>
			break;
 8002d4a:	e0d1      	b.n	8002ef0 <FreqMenu_DrawPresetMenu+0x151c>
 8002d4c:	0801598c 	.word	0x0801598c
 8002d50:	08015994 	.word	0x08015994
 8002d54:	0801599c 	.word	0x0801599c
 8002d58:	080159a4 	.word	0x080159a4
 8002d5c:	080159ac 	.word	0x080159ac
 8002d60:	080159b4 	.word	0x080159b4
 8002d64:	080159bc 	.word	0x080159bc
 8002d68:	080159c4 	.word	0x080159c4
 8002d6c:	080159cc 	.word	0x080159cc
 8002d70:	080159d4 	.word	0x080159d4
 8002d74:	080159dc 	.word	0x080159dc
 8002d78:	080159e4 	.word	0x080159e4
 8002d7c:	080159ec 	.word	0x080159ec
 8002d80:	080159f4 	.word	0x080159f4
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002d84:	7bfb      	ldrb	r3, [r7, #15]
 8002d86:	b29a      	uxth	r2, r3
 8002d88:	2300      	movs	r3, #0
 8002d8a:	9301      	str	r3, [sp, #4]
 8002d8c:	2302      	movs	r3, #2
 8002d8e:	9300      	str	r3, [sp, #0]
 8002d90:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002d94:	2105      	movs	r1, #5
 8002d96:	4858      	ldr	r0, [pc, #352]	; (8002ef8 <FreqMenu_DrawPresetMenu+0x1524>)
 8002d98:	f00d fdaa 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002d9c:	7bbb      	ldrb	r3, [r7, #14]
 8002d9e:	b29a      	uxth	r2, r3
 8002da0:	2300      	movs	r3, #0
 8002da2:	9301      	str	r3, [sp, #4]
 8002da4:	2302      	movs	r3, #2
 8002da6:	9300      	str	r3, [sp, #0]
 8002da8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002dac:	2105      	movs	r1, #5
 8002dae:	4853      	ldr	r0, [pc, #332]	; (8002efc <FreqMenu_DrawPresetMenu+0x1528>)
 8002db0:	f00d fd9e 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002db4:	7b7b      	ldrb	r3, [r7, #13]
 8002db6:	b29a      	uxth	r2, r3
 8002db8:	2300      	movs	r3, #0
 8002dba:	9301      	str	r3, [sp, #4]
 8002dbc:	2302      	movs	r3, #2
 8002dbe:	9300      	str	r3, [sp, #0]
 8002dc0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002dc4:	2105      	movs	r1, #5
 8002dc6:	484e      	ldr	r0, [pc, #312]	; (8002f00 <FreqMenu_DrawPresetMenu+0x152c>)
 8002dc8:	f00d fd92 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002dcc:	7b3b      	ldrb	r3, [r7, #12]
 8002dce:	b29a      	uxth	r2, r3
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	9301      	str	r3, [sp, #4]
 8002dd4:	2302      	movs	r3, #2
 8002dd6:	9300      	str	r3, [sp, #0]
 8002dd8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002ddc:	2105      	movs	r1, #5
 8002dde:	4849      	ldr	r0, [pc, #292]	; (8002f04 <FreqMenu_DrawPresetMenu+0x1530>)
 8002de0:	f00d fd86 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002de4:	7afb      	ldrb	r3, [r7, #11]
 8002de6:	b29a      	uxth	r2, r3
 8002de8:	2300      	movs	r3, #0
 8002dea:	9301      	str	r3, [sp, #4]
 8002dec:	2302      	movs	r3, #2
 8002dee:	9300      	str	r3, [sp, #0]
 8002df0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002df4:	2105      	movs	r1, #5
 8002df6:	4844      	ldr	r0, [pc, #272]	; (8002f08 <FreqMenu_DrawPresetMenu+0x1534>)
 8002df8:	f00d fd7a 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002dfc:	7abb      	ldrb	r3, [r7, #10]
 8002dfe:	b29a      	uxth	r2, r3
 8002e00:	2300      	movs	r3, #0
 8002e02:	9301      	str	r3, [sp, #4]
 8002e04:	2302      	movs	r3, #2
 8002e06:	9300      	str	r3, [sp, #0]
 8002e08:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002e0c:	2105      	movs	r1, #5
 8002e0e:	483f      	ldr	r0, [pc, #252]	; (8002f0c <FreqMenu_DrawPresetMenu+0x1538>)
 8002e10:	f00d fd6e 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002e14:	7a7b      	ldrb	r3, [r7, #9]
 8002e16:	b29a      	uxth	r2, r3
 8002e18:	2300      	movs	r3, #0
 8002e1a:	9301      	str	r3, [sp, #4]
 8002e1c:	2302      	movs	r3, #2
 8002e1e:	9300      	str	r3, [sp, #0]
 8002e20:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002e24:	2105      	movs	r1, #5
 8002e26:	483a      	ldr	r0, [pc, #232]	; (8002f10 <FreqMenu_DrawPresetMenu+0x153c>)
 8002e28:	f00d fd62 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002e2c:	7bfb      	ldrb	r3, [r7, #15]
 8002e2e:	b29a      	uxth	r2, r3
 8002e30:	2300      	movs	r3, #0
 8002e32:	9301      	str	r3, [sp, #4]
 8002e34:	2302      	movs	r3, #2
 8002e36:	9300      	str	r3, [sp, #0]
 8002e38:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002e3c:	2178      	movs	r1, #120	; 0x78
 8002e3e:	4835      	ldr	r0, [pc, #212]	; (8002f14 <FreqMenu_DrawPresetMenu+0x1540>)
 8002e40:	f00d fd56 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002e44:	7bbb      	ldrb	r3, [r7, #14]
 8002e46:	b29a      	uxth	r2, r3
 8002e48:	2300      	movs	r3, #0
 8002e4a:	9301      	str	r3, [sp, #4]
 8002e4c:	2302      	movs	r3, #2
 8002e4e:	9300      	str	r3, [sp, #0]
 8002e50:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002e54:	2178      	movs	r1, #120	; 0x78
 8002e56:	4830      	ldr	r0, [pc, #192]	; (8002f18 <FreqMenu_DrawPresetMenu+0x1544>)
 8002e58:	f00d fd4a 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002e5c:	7b7b      	ldrb	r3, [r7, #13]
 8002e5e:	b29a      	uxth	r2, r3
 8002e60:	2300      	movs	r3, #0
 8002e62:	9301      	str	r3, [sp, #4]
 8002e64:	2302      	movs	r3, #2
 8002e66:	9300      	str	r3, [sp, #0]
 8002e68:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002e6c:	2178      	movs	r1, #120	; 0x78
 8002e6e:	482b      	ldr	r0, [pc, #172]	; (8002f1c <FreqMenu_DrawPresetMenu+0x1548>)
 8002e70:	f00d fd3e 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002e74:	7b3b      	ldrb	r3, [r7, #12]
 8002e76:	b29a      	uxth	r2, r3
 8002e78:	2300      	movs	r3, #0
 8002e7a:	9301      	str	r3, [sp, #4]
 8002e7c:	2302      	movs	r3, #2
 8002e7e:	9300      	str	r3, [sp, #0]
 8002e80:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002e84:	2178      	movs	r1, #120	; 0x78
 8002e86:	4826      	ldr	r0, [pc, #152]	; (8002f20 <FreqMenu_DrawPresetMenu+0x154c>)
 8002e88:	f00d fd32 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002e8c:	7afb      	ldrb	r3, [r7, #11]
 8002e8e:	b29a      	uxth	r2, r3
 8002e90:	2300      	movs	r3, #0
 8002e92:	9301      	str	r3, [sp, #4]
 8002e94:	2302      	movs	r3, #2
 8002e96:	9300      	str	r3, [sp, #0]
 8002e98:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002e9c:	2178      	movs	r1, #120	; 0x78
 8002e9e:	4821      	ldr	r0, [pc, #132]	; (8002f24 <FreqMenu_DrawPresetMenu+0x1550>)
 8002ea0:	f00d fd26 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002ea4:	7abb      	ldrb	r3, [r7, #10]
 8002ea6:	b29a      	uxth	r2, r3
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	9301      	str	r3, [sp, #4]
 8002eac:	2302      	movs	r3, #2
 8002eae:	9300      	str	r3, [sp, #0]
 8002eb0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002eb4:	2178      	movs	r1, #120	; 0x78
 8002eb6:	481c      	ldr	r0, [pc, #112]	; (8002f28 <FreqMenu_DrawPresetMenu+0x1554>)
 8002eb8:	f00d fd1a 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002ebc:	7a7b      	ldrb	r3, [r7, #9]
 8002ebe:	b29a      	uxth	r2, r3
 8002ec0:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002ec4:	9301      	str	r3, [sp, #4]
 8002ec6:	2302      	movs	r3, #2
 8002ec8:	9300      	str	r3, [sp, #0]
 8002eca:	2300      	movs	r3, #0
 8002ecc:	2178      	movs	r1, #120	; 0x78
 8002ece:	4817      	ldr	r0, [pc, #92]	; (8002f2c <FreqMenu_DrawPresetMenu+0x1558>)
 8002ed0:	f00d fd0e 	bl	80108f0 <ILI9341_Draw_Text>
			break;
 8002ed4:	bf00      	nop
 8002ed6:	e00b      	b.n	8002ef0 <FreqMenu_DrawPresetMenu+0x151c>
		ILI9341_Draw_Text("FreqMenus::FreqMenu_DrawFreqPresetMenu() Error", 		5, 180, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 8002ed8:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8002edc:	9301      	str	r3, [sp, #4]
 8002ede:	2301      	movs	r3, #1
 8002ee0:	9300      	str	r3, [sp, #0]
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	22b4      	movs	r2, #180	; 0xb4
 8002ee6:	2105      	movs	r1, #5
 8002ee8:	4811      	ldr	r0, [pc, #68]	; (8002f30 <FreqMenu_DrawPresetMenu+0x155c>)
 8002eea:	f00d fd01 	bl	80108f0 <ILI9341_Draw_Text>
}
 8002eee:	e7ff      	b.n	8002ef0 <FreqMenu_DrawPresetMenu+0x151c>
 8002ef0:	bf00      	nop
 8002ef2:	3710      	adds	r7, #16
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	0801598c 	.word	0x0801598c
 8002efc:	08015994 	.word	0x08015994
 8002f00:	0801599c 	.word	0x0801599c
 8002f04:	080159a4 	.word	0x080159a4
 8002f08:	080159ac 	.word	0x080159ac
 8002f0c:	080159b4 	.word	0x080159b4
 8002f10:	080159bc 	.word	0x080159bc
 8002f14:	080159c4 	.word	0x080159c4
 8002f18:	080159cc 	.word	0x080159cc
 8002f1c:	080159d4 	.word	0x080159d4
 8002f20:	080159dc 	.word	0x080159dc
 8002f24:	080159e4 	.word	0x080159e4
 8002f28:	080159ec 	.word	0x080159ec
 8002f2c:	080159f4 	.word	0x080159f4
 8002f30:	08015a00 	.word	0x08015a00

08002f34 <FreqMenu_DrawAdjustMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawAdjustMenu()
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FREQ->ADJUST", 5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8002f3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f3e:	9301      	str	r3, [sp, #4]
 8002f40:	2302      	movs	r3, #2
 8002f42:	9300      	str	r3, [sp, #0]
 8002f44:	2300      	movs	r3, #0
 8002f46:	220a      	movs	r2, #10
 8002f48:	2105      	movs	r1, #5
 8002f4a:	4804      	ldr	r0, [pc, #16]	; (8002f5c <FreqMenu_DrawAdjustMenu+0x28>)
 8002f4c:	f00d fcd0 	bl	80108f0 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8002f50:	f7fd ff82 	bl	8000e58 <DM_DisplayFormattedOutput>
	//snprintf(freq, sizeof(freq), "%u", (uint8_t)FreqO_GetOutputFreq());
	if(DM_AddDigitPadding((uint16_t)FreqO_GetOutputFreq(), freq, sizeof(freq)) == 0)
		ILI9341_Draw_Text(freq, 250, 150, WHITE, 1, BLACK);
*/

}
 8002f54:	bf00      	nop
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	08015a30 	.word	0x08015a30

08002f60 <FreqMenu_DrawSweepMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawSweepMenu()
{
 8002f60:	b5b0      	push	{r4, r5, r7, lr}
 8002f62:	b08e      	sub	sp, #56	; 0x38
 8002f64:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FREQ->SWEEP", 	5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8002f66:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f6a:	9301      	str	r3, [sp, #4]
 8002f6c:	2302      	movs	r3, #2
 8002f6e:	9300      	str	r3, [sp, #0]
 8002f70:	2300      	movs	r3, #0
 8002f72:	220a      	movs	r2, #10
 8002f74:	2105      	movs	r1, #5
 8002f76:	489f      	ldr	r0, [pc, #636]	; (80031f4 <FreqMenu_DrawSweepMenu+0x294>)
 8002f78:	f00d fcba 	bl	80108f0 <ILI9341_Draw_Text>
	DM_DisplayInputTriggerStatus();
 8002f7c:	f7fd ff8c 	bl	8000e98 <DM_DisplayInputTriggerStatus>

	// draw enabled status


	char enabled_text[20] = "";
 8002f80:	2300      	movs	r3, #0
 8002f82:	61fb      	str	r3, [r7, #28]
 8002f84:	f107 0320 	add.w	r3, r7, #32
 8002f88:	2200      	movs	r2, #0
 8002f8a:	601a      	str	r2, [r3, #0]
 8002f8c:	605a      	str	r2, [r3, #4]
 8002f8e:	609a      	str	r2, [r3, #8]
 8002f90:	60da      	str	r2, [r3, #12]
	if((SWEEP_TIMER->CR1 & TIM_CR1_CEN) == TIM_CR1_CEN)
 8002f92:	4b99      	ldr	r3, [pc, #612]	; (80031f8 <FreqMenu_DrawSweepMenu+0x298>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0301 	and.w	r3, r3, #1
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d109      	bne.n	8002fb2 <FreqMenu_DrawSweepMenu+0x52>
	{
		snprintf(enabled_text, sizeof(enabled_text), "STATUS:  RUNNING");
 8002f9e:	f107 031c 	add.w	r3, r7, #28
 8002fa2:	4a96      	ldr	r2, [pc, #600]	; (80031fc <FreqMenu_DrawSweepMenu+0x29c>)
 8002fa4:	461c      	mov	r4, r3
 8002fa6:	4615      	mov	r5, r2
 8002fa8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002faa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002fac:	682b      	ldr	r3, [r5, #0]
 8002fae:	7023      	strb	r3, [r4, #0]
 8002fb0:	e008      	b.n	8002fc4 <FreqMenu_DrawSweepMenu+0x64>
	}
	else
	{
		snprintf(enabled_text, sizeof(enabled_text), "STATUS:  STOPPED");
 8002fb2:	f107 031c 	add.w	r3, r7, #28
 8002fb6:	4a92      	ldr	r2, [pc, #584]	; (8003200 <FreqMenu_DrawSweepMenu+0x2a0>)
 8002fb8:	461c      	mov	r4, r3
 8002fba:	4615      	mov	r5, r2
 8002fbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002fbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002fc0:	682b      	ldr	r3, [r5, #0]
 8002fc2:	7023      	strb	r3, [r4, #0]
	}

	ILI9341_Draw_Text(enabled_text, 5, 40, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002fc4:	f107 001c 	add.w	r0, r7, #28
 8002fc8:	2300      	movs	r3, #0
 8002fca:	9301      	str	r3, [sp, #4]
 8002fcc:	2302      	movs	r3, #2
 8002fce:	9300      	str	r3, [sp, #0]
 8002fd0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002fd4:	2228      	movs	r2, #40	; 0x28
 8002fd6:	2105      	movs	r1, #5
 8002fd8:	f00d fc8a 	bl	80108f0 <ILI9341_Draw_Text>

	// draw output freq status
	char out_hertz[25] = "";
 8002fdc:	2300      	movs	r3, #0
 8002fde:	603b      	str	r3, [r7, #0]
 8002fe0:	1d3b      	adds	r3, r7, #4
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	601a      	str	r2, [r3, #0]
 8002fe6:	605a      	str	r2, [r3, #4]
 8002fe8:	609a      	str	r2, [r3, #8]
 8002fea:	60da      	str	r2, [r3, #12]
 8002fec:	611a      	str	r2, [r3, #16]
 8002fee:	751a      	strb	r2, [r3, #20]
	snprintf(out_hertz, sizeof(out_hertz), "OUTPUT:");
 8002ff0:	463b      	mov	r3, r7
 8002ff2:	4a84      	ldr	r2, [pc, #528]	; (8003204 <FreqMenu_DrawSweepMenu+0x2a4>)
 8002ff4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002ff8:	e883 0003 	stmia.w	r3, {r0, r1}
	ILI9341_Draw_Text(out_hertz, 5, 60, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002ffc:	4638      	mov	r0, r7
 8002ffe:	2300      	movs	r3, #0
 8003000:	9301      	str	r3, [sp, #4]
 8003002:	2302      	movs	r3, #2
 8003004:	9300      	str	r3, [sp, #0]
 8003006:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800300a:	223c      	movs	r2, #60	; 0x3c
 800300c:	2105      	movs	r1, #5
 800300e:	f00d fc6f 	bl	80108f0 <ILI9341_Draw_Text>

	DM_DrawGenericHertzValue(80, 60, SM_GetOutputInHertz());
 8003012:	f003 ff33 	bl	8006e7c <SM_GetOutputInHertz>
 8003016:	eef0 7a40 	vmov.f32	s15, s0
 800301a:	eeb0 0a67 	vmov.f32	s0, s15
 800301e:	213c      	movs	r1, #60	; 0x3c
 8003020:	2050      	movs	r0, #80	; 0x50
 8003022:	f7fe f8a5 	bl	8001170 <DM_DrawGenericHertzValue>



	ILI9341_Draw_Text("SWEEP MODE:", 5, 100, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003026:	2300      	movs	r3, #0
 8003028:	9301      	str	r3, [sp, #4]
 800302a:	2302      	movs	r3, #2
 800302c:	9300      	str	r3, [sp, #0]
 800302e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003032:	2264      	movs	r2, #100	; 0x64
 8003034:	2105      	movs	r1, #5
 8003036:	4874      	ldr	r0, [pc, #464]	; (8003208 <FreqMenu_DrawSweepMenu+0x2a8>)
 8003038:	f00d fc5a 	bl	80108f0 <ILI9341_Draw_Text>

	// get direction
	if((SWEEP_TIMER->CR1 & TIM_CR1_DIR) == TIM_CR1_DIR)
 800303c:	4b6e      	ldr	r3, [pc, #440]	; (80031f8 <FreqMenu_DrawSweepMenu+0x298>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0310 	and.w	r3, r3, #16
 8003044:	2b10      	cmp	r3, #16
 8003046:	d117      	bne.n	8003078 <FreqMenu_DrawSweepMenu+0x118>
	{
		ILI9341_Draw_Text("UP", 235, 100, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003048:	2300      	movs	r3, #0
 800304a:	9301      	str	r3, [sp, #4]
 800304c:	2302      	movs	r3, #2
 800304e:	9300      	str	r3, [sp, #0]
 8003050:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003054:	2264      	movs	r2, #100	; 0x64
 8003056:	21eb      	movs	r1, #235	; 0xeb
 8003058:	486c      	ldr	r0, [pc, #432]	; (800320c <FreqMenu_DrawSweepMenu+0x2ac>)
 800305a:	f00d fc49 	bl	80108f0 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("DOWN", 265, 100, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 800305e:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003062:	9301      	str	r3, [sp, #4]
 8003064:	2302      	movs	r3, #2
 8003066:	9300      	str	r3, [sp, #0]
 8003068:	2300      	movs	r3, #0
 800306a:	2264      	movs	r2, #100	; 0x64
 800306c:	f240 1109 	movw	r1, #265	; 0x109
 8003070:	4867      	ldr	r0, [pc, #412]	; (8003210 <FreqMenu_DrawSweepMenu+0x2b0>)
 8003072:	f00d fc3d 	bl	80108f0 <ILI9341_Draw_Text>
 8003076:	e016      	b.n	80030a6 <FreqMenu_DrawSweepMenu+0x146>
	}
	else
	{
		ILI9341_Draw_Text("DOWN", 265, 100, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003078:	2300      	movs	r3, #0
 800307a:	9301      	str	r3, [sp, #4]
 800307c:	2302      	movs	r3, #2
 800307e:	9300      	str	r3, [sp, #0]
 8003080:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003084:	2264      	movs	r2, #100	; 0x64
 8003086:	f240 1109 	movw	r1, #265	; 0x109
 800308a:	4861      	ldr	r0, [pc, #388]	; (8003210 <FreqMenu_DrawSweepMenu+0x2b0>)
 800308c:	f00d fc30 	bl	80108f0 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("UP", 235, 100, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003090:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003094:	9301      	str	r3, [sp, #4]
 8003096:	2302      	movs	r3, #2
 8003098:	9300      	str	r3, [sp, #0]
 800309a:	2300      	movs	r3, #0
 800309c:	2264      	movs	r2, #100	; 0x64
 800309e:	21eb      	movs	r1, #235	; 0xeb
 80030a0:	485a      	ldr	r0, [pc, #360]	; (800320c <FreqMenu_DrawSweepMenu+0x2ac>)
 80030a2:	f00d fc25 	bl	80108f0 <ILI9341_Draw_Text>




	// draw rate status
	if(theCurrentEncoderSweepFunction == ENCODER_SWEEP_SPEED_FUNCTION)
 80030a6:	4b5b      	ldr	r3, [pc, #364]	; (8003214 <FreqMenu_DrawSweepMenu+0x2b4>)
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d10b      	bne.n	80030c6 <FreqMenu_DrawSweepMenu+0x166>
	{
		ILI9341_Draw_Text("SWEEP SPEED:", 5, 120, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80030ae:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80030b2:	9301      	str	r3, [sp, #4]
 80030b4:	2302      	movs	r3, #2
 80030b6:	9300      	str	r3, [sp, #0]
 80030b8:	2300      	movs	r3, #0
 80030ba:	2278      	movs	r2, #120	; 0x78
 80030bc:	2105      	movs	r1, #5
 80030be:	4856      	ldr	r0, [pc, #344]	; (8003218 <FreqMenu_DrawSweepMenu+0x2b8>)
 80030c0:	f00d fc16 	bl	80108f0 <ILI9341_Draw_Text>
 80030c4:	e00a      	b.n	80030dc <FreqMenu_DrawSweepMenu+0x17c>
	}
	else
	{
		ILI9341_Draw_Text("SWEEP SPEED:", 5, 120, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80030c6:	2300      	movs	r3, #0
 80030c8:	9301      	str	r3, [sp, #4]
 80030ca:	2302      	movs	r3, #2
 80030cc:	9300      	str	r3, [sp, #0]
 80030ce:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80030d2:	2278      	movs	r2, #120	; 0x78
 80030d4:	2105      	movs	r1, #5
 80030d6:	4850      	ldr	r0, [pc, #320]	; (8003218 <FreqMenu_DrawSweepMenu+0x2b8>)
 80030d8:	f00d fc0a 	bl	80108f0 <ILI9341_Draw_Text>
	}
/*	char arr_text[25] = "";
	snprintf(arr_text, sizeof(arr_text), "%8.3f Hz", calculated_sweep_in_hertz);
	ILI9341_Draw_Text(arr_text, 182, 120, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
*/
	DM_DrawGenericHertzValue(158, 120, calculated_sweep_in_hertz);
 80030dc:	4b4f      	ldr	r3, [pc, #316]	; (800321c <FreqMenu_DrawSweepMenu+0x2bc>)
 80030de:	edd3 7a00 	vldr	s15, [r3]
 80030e2:	eeb0 0a67 	vmov.f32	s0, s15
 80030e6:	2178      	movs	r1, #120	; 0x78
 80030e8:	209e      	movs	r0, #158	; 0x9e
 80030ea:	f7fe f841 	bl	8001170 <DM_DrawGenericHertzValue>


	// draw upper sweep bounds
	if( (theCurrentEncoderSweepFunction == ENCODER_SWEEP_LIMIT_FUNCTION) && (active_sweep_mode == SWEEP_MODE_UP) )
 80030ee:	4b49      	ldr	r3, [pc, #292]	; (8003214 <FreqMenu_DrawSweepMenu+0x2b4>)
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d10f      	bne.n	8003116 <FreqMenu_DrawSweepMenu+0x1b6>
 80030f6:	4b4a      	ldr	r3, [pc, #296]	; (8003220 <FreqMenu_DrawSweepMenu+0x2c0>)
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d10b      	bne.n	8003116 <FreqMenu_DrawSweepMenu+0x1b6>
	{
		ILI9341_Draw_Text("SWEEP UPPER:", 5, 140, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);	// highlighted
 80030fe:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003102:	9301      	str	r3, [sp, #4]
 8003104:	2302      	movs	r3, #2
 8003106:	9300      	str	r3, [sp, #0]
 8003108:	2300      	movs	r3, #0
 800310a:	228c      	movs	r2, #140	; 0x8c
 800310c:	2105      	movs	r1, #5
 800310e:	4845      	ldr	r0, [pc, #276]	; (8003224 <FreqMenu_DrawSweepMenu+0x2c4>)
 8003110:	f00d fbee 	bl	80108f0 <ILI9341_Draw_Text>
 8003114:	e00a      	b.n	800312c <FreqMenu_DrawSweepMenu+0x1cc>
		//ILI9341_Draw_Arrow(ARROW_UP, 280, 120, 10, BLACK);
	}
	else
	{
		ILI9341_Draw_Text("SWEEP UPPER:", 5, 140, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003116:	2300      	movs	r3, #0
 8003118:	9301      	str	r3, [sp, #4]
 800311a:	2302      	movs	r3, #2
 800311c:	9300      	str	r3, [sp, #0]
 800311e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003122:	228c      	movs	r2, #140	; 0x8c
 8003124:	2105      	movs	r1, #5
 8003126:	483f      	ldr	r0, [pc, #252]	; (8003224 <FreqMenu_DrawSweepMenu+0x2c4>)
 8003128:	f00d fbe2 	bl	80108f0 <ILI9341_Draw_Text>
	}
/*	char sweep_lower_text[20] = "";
	snprintf(sweep_lower_text, sizeof(sweep_lower_text), "%9.2f  Hz", SM_ConvertPeriodToHertz(sweep_lower_bounds_shortest_output_arr, OUTPUT_TIMER->PSC) /SM_FSAMP);
	ILI9341_Draw_Text(sweep_lower_text, 158, 140, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
*/
	DM_DrawGenericHertzValue(158, 140, SM_ConvertPeriodToHertz(sweep_lower_bounds_shortest_output_arr, OUTPUT_TIMER->PSC) /SM_FSAMP);
 800312c:	4b3e      	ldr	r3, [pc, #248]	; (8003228 <FreqMenu_DrawSweepMenu+0x2c8>)
 800312e:	edd3 7a00 	vldr	s15, [r3]
 8003132:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003136:	4b3d      	ldr	r3, [pc, #244]	; (800322c <FreqMenu_DrawSweepMenu+0x2cc>)
 8003138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800313a:	b29b      	uxth	r3, r3
 800313c:	4619      	mov	r1, r3
 800313e:	ee17 0a90 	vmov	r0, s15
 8003142:	f003 fedf 	bl	8006f04 <SM_ConvertPeriodToHertz>
 8003146:	eef0 6a40 	vmov.f32	s13, s0
 800314a:	eddf 7a39 	vldr	s15, [pc, #228]	; 8003230 <FreqMenu_DrawSweepMenu+0x2d0>
 800314e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003152:	eeb0 0a47 	vmov.f32	s0, s14
 8003156:	218c      	movs	r1, #140	; 0x8c
 8003158:	209e      	movs	r0, #158	; 0x9e
 800315a:	f7fe f809 	bl	8001170 <DM_DrawGenericHertzValue>

	// draw lower sweep bounds
	if( (theCurrentEncoderSweepFunction == ENCODER_SWEEP_LIMIT_FUNCTION) && (active_sweep_mode == SWEEP_MODE_DOWN) )
 800315e:	4b2d      	ldr	r3, [pc, #180]	; (8003214 <FreqMenu_DrawSweepMenu+0x2b4>)
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	2b01      	cmp	r3, #1
 8003164:	d10f      	bne.n	8003186 <FreqMenu_DrawSweepMenu+0x226>
 8003166:	4b2e      	ldr	r3, [pc, #184]	; (8003220 <FreqMenu_DrawSweepMenu+0x2c0>)
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	2b01      	cmp	r3, #1
 800316c:	d10b      	bne.n	8003186 <FreqMenu_DrawSweepMenu+0x226>
	{
		ILI9341_Draw_Text("SWEEP LOWER:", 5, 160, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR); 	// highlighted
 800316e:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003172:	9301      	str	r3, [sp, #4]
 8003174:	2302      	movs	r3, #2
 8003176:	9300      	str	r3, [sp, #0]
 8003178:	2300      	movs	r3, #0
 800317a:	22a0      	movs	r2, #160	; 0xa0
 800317c:	2105      	movs	r1, #5
 800317e:	482d      	ldr	r0, [pc, #180]	; (8003234 <FreqMenu_DrawSweepMenu+0x2d4>)
 8003180:	f00d fbb6 	bl	80108f0 <ILI9341_Draw_Text>
 8003184:	e00a      	b.n	800319c <FreqMenu_DrawSweepMenu+0x23c>
		//ILI9341_Draw_Arrow(ARROW_DOWN, 280, 130, 10, BLACK);
	}
	else
	{
		ILI9341_Draw_Text("SWEEP LOWER:", 5, 160, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003186:	2300      	movs	r3, #0
 8003188:	9301      	str	r3, [sp, #4]
 800318a:	2302      	movs	r3, #2
 800318c:	9300      	str	r3, [sp, #0]
 800318e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003192:	22a0      	movs	r2, #160	; 0xa0
 8003194:	2105      	movs	r1, #5
 8003196:	4827      	ldr	r0, [pc, #156]	; (8003234 <FreqMenu_DrawSweepMenu+0x2d4>)
 8003198:	f00d fbaa 	bl	80108f0 <ILI9341_Draw_Text>
	}
/*	char sweep_upper_text[20] = "";
	snprintf(sweep_upper_text, sizeof(sweep_upper_text), "%8.2f  Hz", SM_ConvertPeriodToHertz(sweep_upper_bounds_longest_output_arr, OUTPUT_TIMER->PSC) /SM_FSAMP );
	ILI9341_Draw_Text(sweep_upper_text, 170, 160, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
*/
	DM_DrawGenericHertzValue(158, 160, SM_ConvertPeriodToHertz(sweep_upper_bounds_longest_output_arr, OUTPUT_TIMER->PSC) /SM_FSAMP );
 800319c:	4b26      	ldr	r3, [pc, #152]	; (8003238 <FreqMenu_DrawSweepMenu+0x2d8>)
 800319e:	edd3 7a00 	vldr	s15, [r3]
 80031a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031a6:	4b21      	ldr	r3, [pc, #132]	; (800322c <FreqMenu_DrawSweepMenu+0x2cc>)
 80031a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	4619      	mov	r1, r3
 80031ae:	ee17 0a90 	vmov	r0, s15
 80031b2:	f003 fea7 	bl	8006f04 <SM_ConvertPeriodToHertz>
 80031b6:	eef0 6a40 	vmov.f32	s13, s0
 80031ba:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8003230 <FreqMenu_DrawSweepMenu+0x2d0>
 80031be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031c2:	eeb0 0a47 	vmov.f32	s0, s14
 80031c6:	21a0      	movs	r1, #160	; 0xa0
 80031c8:	209e      	movs	r0, #158	; 0x9e
 80031ca:	f7fd ffd1 	bl	8001170 <DM_DrawGenericHertzValue>

	// draw bottom menu button text
	if((SWEEP_TIMER->CR1 & TIM_CR1_CEN) == TIM_CR1_CEN)
 80031ce:	4b0a      	ldr	r3, [pc, #40]	; (80031f8 <FreqMenu_DrawSweepMenu+0x298>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d132      	bne.n	8003240 <FreqMenu_DrawSweepMenu+0x2e0>
		ILI9341_Draw_Text("PAUSE ", 6, 213, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 80031da:	f240 23fd 	movw	r3, #765	; 0x2fd
 80031de:	9301      	str	r3, [sp, #4]
 80031e0:	2302      	movs	r3, #2
 80031e2:	9300      	str	r3, [sp, #0]
 80031e4:	2300      	movs	r3, #0
 80031e6:	22d5      	movs	r2, #213	; 0xd5
 80031e8:	2106      	movs	r1, #6
 80031ea:	4814      	ldr	r0, [pc, #80]	; (800323c <FreqMenu_DrawSweepMenu+0x2dc>)
 80031ec:	f00d fb80 	bl	80108f0 <ILI9341_Draw_Text>
 80031f0:	e031      	b.n	8003256 <FreqMenu_DrawSweepMenu+0x2f6>
 80031f2:	bf00      	nop
 80031f4:	08015a44 	.word	0x08015a44
 80031f8:	40000c00 	.word	0x40000c00
 80031fc:	08015a58 	.word	0x08015a58
 8003200:	08015a6c 	.word	0x08015a6c
 8003204:	08015a80 	.word	0x08015a80
 8003208:	08015a88 	.word	0x08015a88
 800320c:	08015a94 	.word	0x08015a94
 8003210:	08015a98 	.word	0x08015a98
 8003214:	200020d4 	.word	0x200020d4
 8003218:	08015aa0 	.word	0x08015aa0
 800321c:	20002168 	.word	0x20002168
 8003220:	200020d3 	.word	0x200020d3
 8003224:	08015ab0 	.word	0x08015ab0
 8003228:	20000120 	.word	0x20000120
 800322c:	40013400 	.word	0x40013400
 8003230:	42f00000 	.word	0x42f00000
 8003234:	08015ac0 	.word	0x08015ac0
 8003238:	20000124 	.word	0x20000124
 800323c:	08015ad0 	.word	0x08015ad0
	else
		ILI9341_Draw_Text("RESUME", 5, 213, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003240:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003244:	9301      	str	r3, [sp, #4]
 8003246:	2302      	movs	r3, #2
 8003248:	9300      	str	r3, [sp, #0]
 800324a:	2300      	movs	r3, #0
 800324c:	22d5      	movs	r2, #213	; 0xd5
 800324e:	2105      	movs	r1, #5
 8003250:	4824      	ldr	r0, [pc, #144]	; (80032e4 <FreqMenu_DrawSweepMenu+0x384>)
 8003252:	f00d fb4d 	bl	80108f0 <ILI9341_Draw_Text>

	ILI9341_Draw_Text("SET", 	104,	204, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003256:	f241 43a2 	movw	r3, #5282	; 0x14a2
 800325a:	9301      	str	r3, [sp, #4]
 800325c:	2302      	movs	r3, #2
 800325e:	9300      	str	r3, [sp, #0]
 8003260:	2300      	movs	r3, #0
 8003262:	22cc      	movs	r2, #204	; 0xcc
 8003264:	2168      	movs	r1, #104	; 0x68
 8003266:	4820      	ldr	r0, [pc, #128]	; (80032e8 <FreqMenu_DrawSweepMenu+0x388>)
 8003268:	f00d fb42 	bl	80108f0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("MODE",	97, 	222, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 800326c:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003270:	9301      	str	r3, [sp, #4]
 8003272:	2302      	movs	r3, #2
 8003274:	9300      	str	r3, [sp, #0]
 8003276:	2300      	movs	r3, #0
 8003278:	22de      	movs	r2, #222	; 0xde
 800327a:	2161      	movs	r1, #97	; 0x61
 800327c:	481b      	ldr	r0, [pc, #108]	; (80032ec <FreqMenu_DrawSweepMenu+0x38c>)
 800327e:	f00d fb37 	bl	80108f0 <ILI9341_Draw_Text>

	ILI9341_Draw_Text("SET", 	183,	204, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003282:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003286:	9301      	str	r3, [sp, #4]
 8003288:	2302      	movs	r3, #2
 800328a:	9300      	str	r3, [sp, #0]
 800328c:	2300      	movs	r3, #0
 800328e:	22cc      	movs	r2, #204	; 0xcc
 8003290:	21b7      	movs	r1, #183	; 0xb7
 8003292:	4815      	ldr	r0, [pc, #84]	; (80032e8 <FreqMenu_DrawSweepMenu+0x388>)
 8003294:	f00d fb2c 	bl	80108f0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SPEED",	173, 	222, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003298:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800329c:	9301      	str	r3, [sp, #4]
 800329e:	2302      	movs	r3, #2
 80032a0:	9300      	str	r3, [sp, #0]
 80032a2:	2300      	movs	r3, #0
 80032a4:	22de      	movs	r2, #222	; 0xde
 80032a6:	21ad      	movs	r1, #173	; 0xad
 80032a8:	4811      	ldr	r0, [pc, #68]	; (80032f0 <FreqMenu_DrawSweepMenu+0x390>)
 80032aa:	f00d fb21 	bl	80108f0 <ILI9341_Draw_Text>

	ILI9341_Draw_Text("SET", 	263, 	204, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 80032ae:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80032b2:	9301      	str	r3, [sp, #4]
 80032b4:	2302      	movs	r3, #2
 80032b6:	9300      	str	r3, [sp, #0]
 80032b8:	2300      	movs	r3, #0
 80032ba:	22cc      	movs	r2, #204	; 0xcc
 80032bc:	f240 1107 	movw	r1, #263	; 0x107
 80032c0:	4809      	ldr	r0, [pc, #36]	; (80032e8 <FreqMenu_DrawSweepMenu+0x388>)
 80032c2:	f00d fb15 	bl	80108f0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("LIMIT", 	252, 	222, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 80032c6:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80032ca:	9301      	str	r3, [sp, #4]
 80032cc:	2302      	movs	r3, #2
 80032ce:	9300      	str	r3, [sp, #0]
 80032d0:	2300      	movs	r3, #0
 80032d2:	22de      	movs	r2, #222	; 0xde
 80032d4:	21fc      	movs	r1, #252	; 0xfc
 80032d6:	4807      	ldr	r0, [pc, #28]	; (80032f4 <FreqMenu_DrawSweepMenu+0x394>)
 80032d8:	f00d fb0a 	bl	80108f0 <ILI9341_Draw_Text>
}
 80032dc:	bf00      	nop
 80032de:	3730      	adds	r7, #48	; 0x30
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bdb0      	pop	{r4, r5, r7, pc}
 80032e4:	08015ad8 	.word	0x08015ad8
 80032e8:	08015ae0 	.word	0x08015ae0
 80032ec:	08015ae4 	.word	0x08015ae4
 80032f0:	08015aec 	.word	0x08015aec
 80032f4:	08015af4 	.word	0x08015af4

080032f8 <FreqMenu_DrawPrescalerMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawPrescalerMenu()
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FREQ->PSC", 5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 80032fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003302:	9301      	str	r3, [sp, #4]
 8003304:	2302      	movs	r3, #2
 8003306:	9300      	str	r3, [sp, #0]
 8003308:	2300      	movs	r3, #0
 800330a:	220a      	movs	r2, #10
 800330c:	2105      	movs	r1, #5
 800330e:	4804      	ldr	r0, [pc, #16]	; (8003320 <FreqMenu_DrawPrescalerMenu+0x28>)
 8003310:	f00d faee 	bl	80108f0 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003314:	f7fd fda0 	bl	8000e58 <DM_DisplayFormattedOutput>

}
 8003318:	bf00      	nop
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	08015afc 	.word	0x08015afc

08003324 <FuncMenu_DrawMenu>:
			Func_Aux_Menu_State,
 *	@retval None
 *
 */
void FuncMenu_DrawMenu(eSystemState pMenu)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b082      	sub	sp, #8
 8003328:	af00      	add	r7, sp, #0
 800332a:	4603      	mov	r3, r0
 800332c:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 800332e:	79fb      	ldrb	r3, [r7, #7]
 8003330:	2b04      	cmp	r3, #4
 8003332:	d007      	beq.n	8003344 <FuncMenu_DrawMenu+0x20>
 8003334:	2b05      	cmp	r3, #5
 8003336:	d009      	beq.n	800334c <FuncMenu_DrawMenu+0x28>
 8003338:	2b03      	cmp	r3, #3
 800333a:	d000      	beq.n	800333e <FuncMenu_DrawMenu+0x1a>
		case Func_Aux_Menu_State:
			FuncMenu_DrawOutputMenu(AUX_CHANNEL);
			break;

		default:
			break;
 800333c:	e00a      	b.n	8003354 <FuncMenu_DrawMenu+0x30>
			FuncMenu_DrawMainMenu();
 800333e:	f000 f80d 	bl	800335c <FuncMenu_DrawMainMenu>
			break;
 8003342:	e007      	b.n	8003354 <FuncMenu_DrawMenu+0x30>
			FuncMenu_DrawOutputMenu(SIGNAL_CHANNEL);
 8003344:	2000      	movs	r0, #0
 8003346:	f000 f851 	bl	80033ec <FuncMenu_DrawOutputMenu>
			break;
 800334a:	e003      	b.n	8003354 <FuncMenu_DrawMenu+0x30>
			FuncMenu_DrawOutputMenu(AUX_CHANNEL);
 800334c:	2001      	movs	r0, #1
 800334e:	f000 f84d 	bl	80033ec <FuncMenu_DrawOutputMenu>
			break;
 8003352:	bf00      	nop

	}
}
 8003354:	bf00      	nop
 8003356:	3708      	adds	r7, #8
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}

0800335c <FuncMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawMainMenu()
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b082      	sub	sp, #8
 8003360:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FUNC", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003362:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003366:	9301      	str	r3, [sp, #4]
 8003368:	2302      	movs	r3, #2
 800336a:	9300      	str	r3, [sp, #0]
 800336c:	2300      	movs	r3, #0
 800336e:	220a      	movs	r2, #10
 8003370:	210a      	movs	r1, #10
 8003372:	481a      	ldr	r0, [pc, #104]	; (80033dc <FuncMenu_DrawMainMenu+0x80>)
 8003374:	f00d fabc 	bl	80108f0 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003378:	f7fd fd6e 	bl	8000e58 <DM_DisplayFormattedOutput>

 	// coloured menu btn labels
	ILI9341_Draw_Text("SIGNAL", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 800337c:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003380:	9301      	str	r3, [sp, #4]
 8003382:	2302      	movs	r3, #2
 8003384:	9300      	str	r3, [sp, #0]
 8003386:	2300      	movs	r3, #0
 8003388:	22d2      	movs	r2, #210	; 0xd2
 800338a:	2105      	movs	r1, #5
 800338c:	4814      	ldr	r0, [pc, #80]	; (80033e0 <FuncMenu_DrawMainMenu+0x84>)
 800338e:	f00d faaf 	bl	80108f0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("AUX", 	100,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003392:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003396:	9301      	str	r3, [sp, #4]
 8003398:	2302      	movs	r3, #2
 800339a:	9300      	str	r3, [sp, #0]
 800339c:	2300      	movs	r3, #0
 800339e:	22d2      	movs	r2, #210	; 0xd2
 80033a0:	2164      	movs	r1, #100	; 0x64
 80033a2:	4810      	ldr	r0, [pc, #64]	; (80033e4 <FuncMenu_DrawMainMenu+0x88>)
 80033a4:	f00d faa4 	bl	80108f0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80033a8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80033ac:	9301      	str	r3, [sp, #4]
 80033ae:	2302      	movs	r3, #2
 80033b0:	9300      	str	r3, [sp, #0]
 80033b2:	2300      	movs	r3, #0
 80033b4:	22d2      	movs	r2, #210	; 0xd2
 80033b6:	21af      	movs	r1, #175	; 0xaf
 80033b8:	480b      	ldr	r0, [pc, #44]	; (80033e8 <FuncMenu_DrawMainMenu+0x8c>)
 80033ba:	f00d fa99 	bl	80108f0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 80033be:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80033c2:	9301      	str	r3, [sp, #4]
 80033c4:	2302      	movs	r3, #2
 80033c6:	9300      	str	r3, [sp, #0]
 80033c8:	2300      	movs	r3, #0
 80033ca:	22d2      	movs	r2, #210	; 0xd2
 80033cc:	f44f 7182 	mov.w	r1, #260	; 0x104
 80033d0:	4805      	ldr	r0, [pc, #20]	; (80033e8 <FuncMenu_DrawMainMenu+0x8c>)
 80033d2:	f00d fa8d 	bl	80108f0 <ILI9341_Draw_Text>
}
 80033d6:	bf00      	nop
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	08015b0c 	.word	0x08015b0c
 80033e0:	08015b18 	.word	0x08015b18
 80033e4:	08015b20 	.word	0x08015b20
 80033e8:	08015b24 	.word	0x08015b24

080033ec <FuncMenu_DrawOutputMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawOutputMenu(eOutputChannel_t pOutChan)
{
 80033ec:	b590      	push	{r4, r7, lr}
 80033ee:	b089      	sub	sp, #36	; 0x24
 80033f0:	af02      	add	r7, sp, #8
 80033f2:	4603      	mov	r3, r0
 80033f4:	71fb      	strb	r3, [r7, #7]
	if(pOutChan)
 80033f6:	79fb      	ldrb	r3, [r7, #7]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d00b      	beq.n	8003414 <FuncMenu_DrawOutputMenu+0x28>
		ILI9341_Draw_Text("OUT->FUNC->AUX", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 80033fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003400:	9301      	str	r3, [sp, #4]
 8003402:	2302      	movs	r3, #2
 8003404:	9300      	str	r3, [sp, #0]
 8003406:	2300      	movs	r3, #0
 8003408:	220a      	movs	r2, #10
 800340a:	210a      	movs	r1, #10
 800340c:	4896      	ldr	r0, [pc, #600]	; (8003668 <FuncMenu_DrawOutputMenu+0x27c>)
 800340e:	f00d fa6f 	bl	80108f0 <ILI9341_Draw_Text>
 8003412:	e00a      	b.n	800342a <FuncMenu_DrawOutputMenu+0x3e>
	else
		ILI9341_Draw_Text("OUT->FUNC->SIG", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003414:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003418:	9301      	str	r3, [sp, #4]
 800341a:	2302      	movs	r3, #2
 800341c:	9300      	str	r3, [sp, #0]
 800341e:	2300      	movs	r3, #0
 8003420:	220a      	movs	r2, #10
 8003422:	210a      	movs	r1, #10
 8003424:	4891      	ldr	r0, [pc, #580]	; (800366c <FuncMenu_DrawOutputMenu+0x280>)
 8003426:	f00d fa63 	bl	80108f0 <ILI9341_Draw_Text>

	//FunctionProfile_t *func_profileTmp = FuncO_GetSignalFPresetObject();
	FunctionProfile_t *func_profileTmp = SM_GetOutputChannel(pOutChan)->func_profile;
 800342a:	79fb      	ldrb	r3, [r7, #7]
 800342c:	4618      	mov	r0, r3
 800342e:	f003 fa8d 	bl	800694c <SM_GetOutputChannel>
 8003432:	4603      	mov	r3, r0
 8003434:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8003438:	617b      	str	r3, [r7, #20]
	if(func_profileTmp)
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	2b00      	cmp	r3, #0
 800343e:	f000 8424 	beq.w	8003c8a <FuncMenu_DrawOutputMenu+0x89e>
	{
		switch(func_profileTmp->func)
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	2b06      	cmp	r3, #6
 8003448:	f200 841f 	bhi.w	8003c8a <FuncMenu_DrawOutputMenu+0x89e>
 800344c:	a201      	add	r2, pc, #4	; (adr r2, 8003454 <FuncMenu_DrawOutputMenu+0x68>)
 800344e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003452:	bf00      	nop
 8003454:	08003471 	.word	0x08003471
 8003458:	0800356d 	.word	0x0800356d
 800345c:	08003691 	.word	0x08003691
 8003460:	0800378d 	.word	0x0800378d
 8003464:	08003889 	.word	0x08003889
 8003468:	080039c1 	.word	0x080039c1
 800346c:	08003ad3 	.word	0x08003ad3
		{
			case SINE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003470:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003474:	9301      	str	r3, [sp, #4]
 8003476:	2302      	movs	r3, #2
 8003478:	9300      	str	r3, [sp, #0]
 800347a:	2300      	movs	r3, #0
 800347c:	2232      	movs	r2, #50	; 0x32
 800347e:	210a      	movs	r1, #10
 8003480:	487b      	ldr	r0, [pc, #492]	; (8003670 <FuncMenu_DrawOutputMenu+0x284>)
 8003482:	f00d fa35 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003486:	2300      	movs	r3, #0
 8003488:	9301      	str	r3, [sp, #4]
 800348a:	2302      	movs	r3, #2
 800348c:	9300      	str	r3, [sp, #0]
 800348e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003492:	2246      	movs	r2, #70	; 0x46
 8003494:	210a      	movs	r1, #10
 8003496:	4877      	ldr	r0, [pc, #476]	; (8003674 <FuncMenu_DrawOutputMenu+0x288>)
 8003498:	f00d fa2a 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800349c:	2300      	movs	r3, #0
 800349e:	9301      	str	r3, [sp, #4]
 80034a0:	2302      	movs	r3, #2
 80034a2:	9300      	str	r3, [sp, #0]
 80034a4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80034a8:	225a      	movs	r2, #90	; 0x5a
 80034aa:	210a      	movs	r1, #10
 80034ac:	4872      	ldr	r0, [pc, #456]	; (8003678 <FuncMenu_DrawOutputMenu+0x28c>)
 80034ae:	f00d fa1f 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80034b2:	2300      	movs	r3, #0
 80034b4:	9301      	str	r3, [sp, #4]
 80034b6:	2302      	movs	r3, #2
 80034b8:	9300      	str	r3, [sp, #0]
 80034ba:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80034be:	226e      	movs	r2, #110	; 0x6e
 80034c0:	210a      	movs	r1, #10
 80034c2:	486e      	ldr	r0, [pc, #440]	; (800367c <FuncMenu_DrawOutputMenu+0x290>)
 80034c4:	f00d fa14 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80034c8:	2300      	movs	r3, #0
 80034ca:	9301      	str	r3, [sp, #4]
 80034cc:	2302      	movs	r3, #2
 80034ce:	9300      	str	r3, [sp, #0]
 80034d0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80034d4:	2282      	movs	r2, #130	; 0x82
 80034d6:	210a      	movs	r1, #10
 80034d8:	4869      	ldr	r0, [pc, #420]	; (8003680 <FuncMenu_DrawOutputMenu+0x294>)
 80034da:	f00d fa09 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80034de:	2300      	movs	r3, #0
 80034e0:	9301      	str	r3, [sp, #4]
 80034e2:	2302      	movs	r3, #2
 80034e4:	9300      	str	r3, [sp, #0]
 80034e6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80034ea:	2296      	movs	r2, #150	; 0x96
 80034ec:	210a      	movs	r1, #10
 80034ee:	4865      	ldr	r0, [pc, #404]	; (8003684 <FuncMenu_DrawOutputMenu+0x298>)
 80034f0:	f00d f9fe 	bl	80108f0 <ILI9341_Draw_Text>

				if(pOutChan)
 80034f4:	79fb      	ldrb	r3, [r7, #7]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d00a      	beq.n	8003510 <FuncMenu_DrawOutputMenu+0x124>
					ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80034fa:	2300      	movs	r3, #0
 80034fc:	9301      	str	r3, [sp, #4]
 80034fe:	2302      	movs	r3, #2
 8003500:	9300      	str	r3, [sp, #0]
 8003502:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003506:	22aa      	movs	r2, #170	; 0xaa
 8003508:	210a      	movs	r1, #10
 800350a:	485f      	ldr	r0, [pc, #380]	; (8003688 <FuncMenu_DrawOutputMenu+0x29c>)
 800350c:	f00d f9f0 	bl	80108f0 <ILI9341_Draw_Text>

				// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003510:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003514:	9301      	str	r3, [sp, #4]
 8003516:	2302      	movs	r3, #2
 8003518:	9300      	str	r3, [sp, #0]
 800351a:	2300      	movs	r3, #0
 800351c:	22d2      	movs	r2, #210	; 0xd2
 800351e:	2105      	movs	r1, #5
 8003520:	485a      	ldr	r0, [pc, #360]	; (800368c <FuncMenu_DrawOutputMenu+0x2a0>)
 8003522:	f00d f9e5 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003526:	f241 43a2 	movw	r3, #5282	; 0x14a2
 800352a:	9301      	str	r3, [sp, #4]
 800352c:	2302      	movs	r3, #2
 800352e:	9300      	str	r3, [sp, #0]
 8003530:	2300      	movs	r3, #0
 8003532:	22d2      	movs	r2, #210	; 0xd2
 8003534:	2161      	movs	r1, #97	; 0x61
 8003536:	4855      	ldr	r0, [pc, #340]	; (800368c <FuncMenu_DrawOutputMenu+0x2a0>)
 8003538:	f00d f9da 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 800353c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003540:	9301      	str	r3, [sp, #4]
 8003542:	2302      	movs	r3, #2
 8003544:	9300      	str	r3, [sp, #0]
 8003546:	2300      	movs	r3, #0
 8003548:	22d2      	movs	r2, #210	; 0xd2
 800354a:	21af      	movs	r1, #175	; 0xaf
 800354c:	484f      	ldr	r0, [pc, #316]	; (800368c <FuncMenu_DrawOutputMenu+0x2a0>)
 800354e:	f00d f9cf 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003552:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003556:	9301      	str	r3, [sp, #4]
 8003558:	2302      	movs	r3, #2
 800355a:	9300      	str	r3, [sp, #0]
 800355c:	2300      	movs	r3, #0
 800355e:	22d2      	movs	r2, #210	; 0xd2
 8003560:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003564:	4849      	ldr	r0, [pc, #292]	; (800368c <FuncMenu_DrawOutputMenu+0x2a0>)
 8003566:	f00d f9c3 	bl	80108f0 <ILI9341_Draw_Text>
				break;
 800356a:	e38e      	b.n	8003c8a <FuncMenu_DrawOutputMenu+0x89e>
			case SQUARE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800356c:	2300      	movs	r3, #0
 800356e:	9301      	str	r3, [sp, #4]
 8003570:	2302      	movs	r3, #2
 8003572:	9300      	str	r3, [sp, #0]
 8003574:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003578:	2232      	movs	r2, #50	; 0x32
 800357a:	210a      	movs	r1, #10
 800357c:	483c      	ldr	r0, [pc, #240]	; (8003670 <FuncMenu_DrawOutputMenu+0x284>)
 800357e:	f00d f9b7 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003582:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003586:	9301      	str	r3, [sp, #4]
 8003588:	2302      	movs	r3, #2
 800358a:	9300      	str	r3, [sp, #0]
 800358c:	2300      	movs	r3, #0
 800358e:	2246      	movs	r2, #70	; 0x46
 8003590:	210a      	movs	r1, #10
 8003592:	4838      	ldr	r0, [pc, #224]	; (8003674 <FuncMenu_DrawOutputMenu+0x288>)
 8003594:	f00d f9ac 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003598:	2300      	movs	r3, #0
 800359a:	9301      	str	r3, [sp, #4]
 800359c:	2302      	movs	r3, #2
 800359e:	9300      	str	r3, [sp, #0]
 80035a0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80035a4:	225a      	movs	r2, #90	; 0x5a
 80035a6:	210a      	movs	r1, #10
 80035a8:	4833      	ldr	r0, [pc, #204]	; (8003678 <FuncMenu_DrawOutputMenu+0x28c>)
 80035aa:	f00d f9a1 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80035ae:	2300      	movs	r3, #0
 80035b0:	9301      	str	r3, [sp, #4]
 80035b2:	2302      	movs	r3, #2
 80035b4:	9300      	str	r3, [sp, #0]
 80035b6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80035ba:	226e      	movs	r2, #110	; 0x6e
 80035bc:	210a      	movs	r1, #10
 80035be:	482f      	ldr	r0, [pc, #188]	; (800367c <FuncMenu_DrawOutputMenu+0x290>)
 80035c0:	f00d f996 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80035c4:	2300      	movs	r3, #0
 80035c6:	9301      	str	r3, [sp, #4]
 80035c8:	2302      	movs	r3, #2
 80035ca:	9300      	str	r3, [sp, #0]
 80035cc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80035d0:	2282      	movs	r2, #130	; 0x82
 80035d2:	210a      	movs	r1, #10
 80035d4:	482a      	ldr	r0, [pc, #168]	; (8003680 <FuncMenu_DrawOutputMenu+0x294>)
 80035d6:	f00d f98b 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80035da:	2300      	movs	r3, #0
 80035dc:	9301      	str	r3, [sp, #4]
 80035de:	2302      	movs	r3, #2
 80035e0:	9300      	str	r3, [sp, #0]
 80035e2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80035e6:	2296      	movs	r2, #150	; 0x96
 80035e8:	210a      	movs	r1, #10
 80035ea:	4826      	ldr	r0, [pc, #152]	; (8003684 <FuncMenu_DrawOutputMenu+0x298>)
 80035ec:	f00d f980 	bl	80108f0 <ILI9341_Draw_Text>

				if(pOutChan)
 80035f0:	79fb      	ldrb	r3, [r7, #7]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d00a      	beq.n	800360c <FuncMenu_DrawOutputMenu+0x220>
					ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80035f6:	2300      	movs	r3, #0
 80035f8:	9301      	str	r3, [sp, #4]
 80035fa:	2302      	movs	r3, #2
 80035fc:	9300      	str	r3, [sp, #0]
 80035fe:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003602:	22aa      	movs	r2, #170	; 0xaa
 8003604:	210a      	movs	r1, #10
 8003606:	4820      	ldr	r0, [pc, #128]	; (8003688 <FuncMenu_DrawOutputMenu+0x29c>)
 8003608:	f00d f972 	bl	80108f0 <ILI9341_Draw_Text>

				// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 800360c:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003610:	9301      	str	r3, [sp, #4]
 8003612:	2302      	movs	r3, #2
 8003614:	9300      	str	r3, [sp, #0]
 8003616:	2300      	movs	r3, #0
 8003618:	22d2      	movs	r2, #210	; 0xd2
 800361a:	2105      	movs	r1, #5
 800361c:	481b      	ldr	r0, [pc, #108]	; (800368c <FuncMenu_DrawOutputMenu+0x2a0>)
 800361e:	f00d f967 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003622:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003626:	9301      	str	r3, [sp, #4]
 8003628:	2302      	movs	r3, #2
 800362a:	9300      	str	r3, [sp, #0]
 800362c:	2300      	movs	r3, #0
 800362e:	22d2      	movs	r2, #210	; 0xd2
 8003630:	2161      	movs	r1, #97	; 0x61
 8003632:	4816      	ldr	r0, [pc, #88]	; (800368c <FuncMenu_DrawOutputMenu+0x2a0>)
 8003634:	f00d f95c 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003638:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800363c:	9301      	str	r3, [sp, #4]
 800363e:	2302      	movs	r3, #2
 8003640:	9300      	str	r3, [sp, #0]
 8003642:	2300      	movs	r3, #0
 8003644:	22d2      	movs	r2, #210	; 0xd2
 8003646:	21af      	movs	r1, #175	; 0xaf
 8003648:	4810      	ldr	r0, [pc, #64]	; (800368c <FuncMenu_DrawOutputMenu+0x2a0>)
 800364a:	f00d f951 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 800364e:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003652:	9301      	str	r3, [sp, #4]
 8003654:	2302      	movs	r3, #2
 8003656:	9300      	str	r3, [sp, #0]
 8003658:	2300      	movs	r3, #0
 800365a:	22d2      	movs	r2, #210	; 0xd2
 800365c:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003660:	480a      	ldr	r0, [pc, #40]	; (800368c <FuncMenu_DrawOutputMenu+0x2a0>)
 8003662:	f00d f945 	bl	80108f0 <ILI9341_Draw_Text>
				break;
 8003666:	e310      	b.n	8003c8a <FuncMenu_DrawOutputMenu+0x89e>
 8003668:	08015b2c 	.word	0x08015b2c
 800366c:	08015b3c 	.word	0x08015b3c
 8003670:	08015b4c 	.word	0x08015b4c
 8003674:	08015b54 	.word	0x08015b54
 8003678:	08015b60 	.word	0x08015b60
 800367c:	08015b68 	.word	0x08015b68
 8003680:	08015b74 	.word	0x08015b74
 8003684:	08015b80 	.word	0x08015b80
 8003688:	08015b88 	.word	0x08015b88
 800368c:	08015b24 	.word	0x08015b24
			case SAW_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003690:	2300      	movs	r3, #0
 8003692:	9301      	str	r3, [sp, #4]
 8003694:	2302      	movs	r3, #2
 8003696:	9300      	str	r3, [sp, #0]
 8003698:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800369c:	2232      	movs	r2, #50	; 0x32
 800369e:	210a      	movs	r1, #10
 80036a0:	48be      	ldr	r0, [pc, #760]	; (800399c <FuncMenu_DrawOutputMenu+0x5b0>)
 80036a2:	f00d f925 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80036a6:	2300      	movs	r3, #0
 80036a8:	9301      	str	r3, [sp, #4]
 80036aa:	2302      	movs	r3, #2
 80036ac:	9300      	str	r3, [sp, #0]
 80036ae:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80036b2:	2246      	movs	r2, #70	; 0x46
 80036b4:	210a      	movs	r1, #10
 80036b6:	48ba      	ldr	r0, [pc, #744]	; (80039a0 <FuncMenu_DrawOutputMenu+0x5b4>)
 80036b8:	f00d f91a 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80036bc:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80036c0:	9301      	str	r3, [sp, #4]
 80036c2:	2302      	movs	r3, #2
 80036c4:	9300      	str	r3, [sp, #0]
 80036c6:	2300      	movs	r3, #0
 80036c8:	225a      	movs	r2, #90	; 0x5a
 80036ca:	210a      	movs	r1, #10
 80036cc:	48b5      	ldr	r0, [pc, #724]	; (80039a4 <FuncMenu_DrawOutputMenu+0x5b8>)
 80036ce:	f00d f90f 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80036d2:	2300      	movs	r3, #0
 80036d4:	9301      	str	r3, [sp, #4]
 80036d6:	2302      	movs	r3, #2
 80036d8:	9300      	str	r3, [sp, #0]
 80036da:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80036de:	226e      	movs	r2, #110	; 0x6e
 80036e0:	210a      	movs	r1, #10
 80036e2:	48b1      	ldr	r0, [pc, #708]	; (80039a8 <FuncMenu_DrawOutputMenu+0x5bc>)
 80036e4:	f00d f904 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80036e8:	2300      	movs	r3, #0
 80036ea:	9301      	str	r3, [sp, #4]
 80036ec:	2302      	movs	r3, #2
 80036ee:	9300      	str	r3, [sp, #0]
 80036f0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80036f4:	2282      	movs	r2, #130	; 0x82
 80036f6:	210a      	movs	r1, #10
 80036f8:	48ac      	ldr	r0, [pc, #688]	; (80039ac <FuncMenu_DrawOutputMenu+0x5c0>)
 80036fa:	f00d f8f9 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80036fe:	2300      	movs	r3, #0
 8003700:	9301      	str	r3, [sp, #4]
 8003702:	2302      	movs	r3, #2
 8003704:	9300      	str	r3, [sp, #0]
 8003706:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800370a:	2296      	movs	r2, #150	; 0x96
 800370c:	210a      	movs	r1, #10
 800370e:	48a8      	ldr	r0, [pc, #672]	; (80039b0 <FuncMenu_DrawOutputMenu+0x5c4>)
 8003710:	f00d f8ee 	bl	80108f0 <ILI9341_Draw_Text>
				if(pOutChan)
 8003714:	79fb      	ldrb	r3, [r7, #7]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d00a      	beq.n	8003730 <FuncMenu_DrawOutputMenu+0x344>
					ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800371a:	2300      	movs	r3, #0
 800371c:	9301      	str	r3, [sp, #4]
 800371e:	2302      	movs	r3, #2
 8003720:	9300      	str	r3, [sp, #0]
 8003722:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003726:	22aa      	movs	r2, #170	; 0xaa
 8003728:	210a      	movs	r1, #10
 800372a:	48a2      	ldr	r0, [pc, #648]	; (80039b4 <FuncMenu_DrawOutputMenu+0x5c8>)
 800372c:	f00d f8e0 	bl	80108f0 <ILI9341_Draw_Text>
			 	// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003730:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003734:	9301      	str	r3, [sp, #4]
 8003736:	2302      	movs	r3, #2
 8003738:	9300      	str	r3, [sp, #0]
 800373a:	2300      	movs	r3, #0
 800373c:	22d2      	movs	r2, #210	; 0xd2
 800373e:	2105      	movs	r1, #5
 8003740:	489d      	ldr	r0, [pc, #628]	; (80039b8 <FuncMenu_DrawOutputMenu+0x5cc>)
 8003742:	f00d f8d5 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003746:	f241 43a2 	movw	r3, #5282	; 0x14a2
 800374a:	9301      	str	r3, [sp, #4]
 800374c:	2302      	movs	r3, #2
 800374e:	9300      	str	r3, [sp, #0]
 8003750:	2300      	movs	r3, #0
 8003752:	22d2      	movs	r2, #210	; 0xd2
 8003754:	2161      	movs	r1, #97	; 0x61
 8003756:	4898      	ldr	r0, [pc, #608]	; (80039b8 <FuncMenu_DrawOutputMenu+0x5cc>)
 8003758:	f00d f8ca 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 800375c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003760:	9301      	str	r3, [sp, #4]
 8003762:	2302      	movs	r3, #2
 8003764:	9300      	str	r3, [sp, #0]
 8003766:	2300      	movs	r3, #0
 8003768:	22d2      	movs	r2, #210	; 0xd2
 800376a:	21af      	movs	r1, #175	; 0xaf
 800376c:	4892      	ldr	r0, [pc, #584]	; (80039b8 <FuncMenu_DrawOutputMenu+0x5cc>)
 800376e:	f00d f8bf 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003772:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003776:	9301      	str	r3, [sp, #4]
 8003778:	2302      	movs	r3, #2
 800377a:	9300      	str	r3, [sp, #0]
 800377c:	2300      	movs	r3, #0
 800377e:	22d2      	movs	r2, #210	; 0xd2
 8003780:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003784:	488c      	ldr	r0, [pc, #560]	; (80039b8 <FuncMenu_DrawOutputMenu+0x5cc>)
 8003786:	f00d f8b3 	bl	80108f0 <ILI9341_Draw_Text>
				break;
 800378a:	e27e      	b.n	8003c8a <FuncMenu_DrawOutputMenu+0x89e>
			case REV_SAW_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800378c:	2300      	movs	r3, #0
 800378e:	9301      	str	r3, [sp, #4]
 8003790:	2302      	movs	r3, #2
 8003792:	9300      	str	r3, [sp, #0]
 8003794:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003798:	2232      	movs	r2, #50	; 0x32
 800379a:	210a      	movs	r1, #10
 800379c:	487f      	ldr	r0, [pc, #508]	; (800399c <FuncMenu_DrawOutputMenu+0x5b0>)
 800379e:	f00d f8a7 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80037a2:	2300      	movs	r3, #0
 80037a4:	9301      	str	r3, [sp, #4]
 80037a6:	2302      	movs	r3, #2
 80037a8:	9300      	str	r3, [sp, #0]
 80037aa:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80037ae:	2246      	movs	r2, #70	; 0x46
 80037b0:	210a      	movs	r1, #10
 80037b2:	487b      	ldr	r0, [pc, #492]	; (80039a0 <FuncMenu_DrawOutputMenu+0x5b4>)
 80037b4:	f00d f89c 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80037b8:	2300      	movs	r3, #0
 80037ba:	9301      	str	r3, [sp, #4]
 80037bc:	2302      	movs	r3, #2
 80037be:	9300      	str	r3, [sp, #0]
 80037c0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80037c4:	225a      	movs	r2, #90	; 0x5a
 80037c6:	210a      	movs	r1, #10
 80037c8:	4876      	ldr	r0, [pc, #472]	; (80039a4 <FuncMenu_DrawOutputMenu+0x5b8>)
 80037ca:	f00d f891 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80037ce:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80037d2:	9301      	str	r3, [sp, #4]
 80037d4:	2302      	movs	r3, #2
 80037d6:	9300      	str	r3, [sp, #0]
 80037d8:	2300      	movs	r3, #0
 80037da:	226e      	movs	r2, #110	; 0x6e
 80037dc:	210a      	movs	r1, #10
 80037de:	4872      	ldr	r0, [pc, #456]	; (80039a8 <FuncMenu_DrawOutputMenu+0x5bc>)
 80037e0:	f00d f886 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80037e4:	2300      	movs	r3, #0
 80037e6:	9301      	str	r3, [sp, #4]
 80037e8:	2302      	movs	r3, #2
 80037ea:	9300      	str	r3, [sp, #0]
 80037ec:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80037f0:	2282      	movs	r2, #130	; 0x82
 80037f2:	210a      	movs	r1, #10
 80037f4:	486d      	ldr	r0, [pc, #436]	; (80039ac <FuncMenu_DrawOutputMenu+0x5c0>)
 80037f6:	f00d f87b 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80037fa:	2300      	movs	r3, #0
 80037fc:	9301      	str	r3, [sp, #4]
 80037fe:	2302      	movs	r3, #2
 8003800:	9300      	str	r3, [sp, #0]
 8003802:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003806:	2296      	movs	r2, #150	; 0x96
 8003808:	210a      	movs	r1, #10
 800380a:	4869      	ldr	r0, [pc, #420]	; (80039b0 <FuncMenu_DrawOutputMenu+0x5c4>)
 800380c:	f00d f870 	bl	80108f0 <ILI9341_Draw_Text>

				if(pOutChan)
 8003810:	79fb      	ldrb	r3, [r7, #7]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d00a      	beq.n	800382c <FuncMenu_DrawOutputMenu+0x440>
					ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003816:	2300      	movs	r3, #0
 8003818:	9301      	str	r3, [sp, #4]
 800381a:	2302      	movs	r3, #2
 800381c:	9300      	str	r3, [sp, #0]
 800381e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003822:	22aa      	movs	r2, #170	; 0xaa
 8003824:	210a      	movs	r1, #10
 8003826:	4863      	ldr	r0, [pc, #396]	; (80039b4 <FuncMenu_DrawOutputMenu+0x5c8>)
 8003828:	f00d f862 	bl	80108f0 <ILI9341_Draw_Text>

				// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 800382c:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003830:	9301      	str	r3, [sp, #4]
 8003832:	2302      	movs	r3, #2
 8003834:	9300      	str	r3, [sp, #0]
 8003836:	2300      	movs	r3, #0
 8003838:	22d2      	movs	r2, #210	; 0xd2
 800383a:	2105      	movs	r1, #5
 800383c:	485e      	ldr	r0, [pc, #376]	; (80039b8 <FuncMenu_DrawOutputMenu+0x5cc>)
 800383e:	f00d f857 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003842:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003846:	9301      	str	r3, [sp, #4]
 8003848:	2302      	movs	r3, #2
 800384a:	9300      	str	r3, [sp, #0]
 800384c:	2300      	movs	r3, #0
 800384e:	22d2      	movs	r2, #210	; 0xd2
 8003850:	2161      	movs	r1, #97	; 0x61
 8003852:	4859      	ldr	r0, [pc, #356]	; (80039b8 <FuncMenu_DrawOutputMenu+0x5cc>)
 8003854:	f00d f84c 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003858:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800385c:	9301      	str	r3, [sp, #4]
 800385e:	2302      	movs	r3, #2
 8003860:	9300      	str	r3, [sp, #0]
 8003862:	2300      	movs	r3, #0
 8003864:	22d2      	movs	r2, #210	; 0xd2
 8003866:	21af      	movs	r1, #175	; 0xaf
 8003868:	4853      	ldr	r0, [pc, #332]	; (80039b8 <FuncMenu_DrawOutputMenu+0x5cc>)
 800386a:	f00d f841 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 800386e:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003872:	9301      	str	r3, [sp, #4]
 8003874:	2302      	movs	r3, #2
 8003876:	9300      	str	r3, [sp, #0]
 8003878:	2300      	movs	r3, #0
 800387a:	22d2      	movs	r2, #210	; 0xd2
 800387c:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003880:	484d      	ldr	r0, [pc, #308]	; (80039b8 <FuncMenu_DrawOutputMenu+0x5cc>)
 8003882:	f00d f835 	bl	80108f0 <ILI9341_Draw_Text>
				break;
 8003886:	e200      	b.n	8003c8a <FuncMenu_DrawOutputMenu+0x89e>
			case TRIANGLE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003888:	2300      	movs	r3, #0
 800388a:	9301      	str	r3, [sp, #4]
 800388c:	2302      	movs	r3, #2
 800388e:	9300      	str	r3, [sp, #0]
 8003890:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003894:	2232      	movs	r2, #50	; 0x32
 8003896:	210a      	movs	r1, #10
 8003898:	4840      	ldr	r0, [pc, #256]	; (800399c <FuncMenu_DrawOutputMenu+0x5b0>)
 800389a:	f00d f829 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800389e:	2300      	movs	r3, #0
 80038a0:	9301      	str	r3, [sp, #4]
 80038a2:	2302      	movs	r3, #2
 80038a4:	9300      	str	r3, [sp, #0]
 80038a6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80038aa:	2246      	movs	r2, #70	; 0x46
 80038ac:	210a      	movs	r1, #10
 80038ae:	483c      	ldr	r0, [pc, #240]	; (80039a0 <FuncMenu_DrawOutputMenu+0x5b4>)
 80038b0:	f00d f81e 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80038b4:	2300      	movs	r3, #0
 80038b6:	9301      	str	r3, [sp, #4]
 80038b8:	2302      	movs	r3, #2
 80038ba:	9300      	str	r3, [sp, #0]
 80038bc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80038c0:	225a      	movs	r2, #90	; 0x5a
 80038c2:	210a      	movs	r1, #10
 80038c4:	4837      	ldr	r0, [pc, #220]	; (80039a4 <FuncMenu_DrawOutputMenu+0x5b8>)
 80038c6:	f00d f813 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80038ca:	2300      	movs	r3, #0
 80038cc:	9301      	str	r3, [sp, #4]
 80038ce:	2302      	movs	r3, #2
 80038d0:	9300      	str	r3, [sp, #0]
 80038d2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80038d6:	226e      	movs	r2, #110	; 0x6e
 80038d8:	210a      	movs	r1, #10
 80038da:	4833      	ldr	r0, [pc, #204]	; (80039a8 <FuncMenu_DrawOutputMenu+0x5bc>)
 80038dc:	f00d f808 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80038e0:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80038e4:	9301      	str	r3, [sp, #4]
 80038e6:	2302      	movs	r3, #2
 80038e8:	9300      	str	r3, [sp, #0]
 80038ea:	2300      	movs	r3, #0
 80038ec:	2282      	movs	r2, #130	; 0x82
 80038ee:	210a      	movs	r1, #10
 80038f0:	482e      	ldr	r0, [pc, #184]	; (80039ac <FuncMenu_DrawOutputMenu+0x5c0>)
 80038f2:	f00c fffd 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80038f6:	2300      	movs	r3, #0
 80038f8:	9301      	str	r3, [sp, #4]
 80038fa:	2302      	movs	r3, #2
 80038fc:	9300      	str	r3, [sp, #0]
 80038fe:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003902:	2296      	movs	r2, #150	; 0x96
 8003904:	210a      	movs	r1, #10
 8003906:	482a      	ldr	r0, [pc, #168]	; (80039b0 <FuncMenu_DrawOutputMenu+0x5c4>)
 8003908:	f00c fff2 	bl	80108f0 <ILI9341_Draw_Text>

				if(pOutChan)
 800390c:	79fb      	ldrb	r3, [r7, #7]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d00a      	beq.n	8003928 <FuncMenu_DrawOutputMenu+0x53c>
					ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003912:	2300      	movs	r3, #0
 8003914:	9301      	str	r3, [sp, #4]
 8003916:	2302      	movs	r3, #2
 8003918:	9300      	str	r3, [sp, #0]
 800391a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800391e:	22aa      	movs	r2, #170	; 0xaa
 8003920:	210a      	movs	r1, #10
 8003922:	4824      	ldr	r0, [pc, #144]	; (80039b4 <FuncMenu_DrawOutputMenu+0x5c8>)
 8003924:	f00c ffe4 	bl	80108f0 <ILI9341_Draw_Text>

				// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003928:	f240 23fd 	movw	r3, #765	; 0x2fd
 800392c:	9301      	str	r3, [sp, #4]
 800392e:	2302      	movs	r3, #2
 8003930:	9300      	str	r3, [sp, #0]
 8003932:	2300      	movs	r3, #0
 8003934:	22d2      	movs	r2, #210	; 0xd2
 8003936:	2105      	movs	r1, #5
 8003938:	481f      	ldr	r0, [pc, #124]	; (80039b8 <FuncMenu_DrawOutputMenu+0x5cc>)
 800393a:	f00c ffd9 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 800393e:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003942:	9301      	str	r3, [sp, #4]
 8003944:	2302      	movs	r3, #2
 8003946:	9300      	str	r3, [sp, #0]
 8003948:	2300      	movs	r3, #0
 800394a:	22d2      	movs	r2, #210	; 0xd2
 800394c:	2161      	movs	r1, #97	; 0x61
 800394e:	481a      	ldr	r0, [pc, #104]	; (80039b8 <FuncMenu_DrawOutputMenu+0x5cc>)
 8003950:	f00c ffce 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003954:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003958:	9301      	str	r3, [sp, #4]
 800395a:	2302      	movs	r3, #2
 800395c:	9300      	str	r3, [sp, #0]
 800395e:	2300      	movs	r3, #0
 8003960:	22d2      	movs	r2, #210	; 0xd2
 8003962:	21af      	movs	r1, #175	; 0xaf
 8003964:	4814      	ldr	r0, [pc, #80]	; (80039b8 <FuncMenu_DrawOutputMenu+0x5cc>)
 8003966:	f00c ffc3 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 800396a:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800396e:	9301      	str	r3, [sp, #4]
 8003970:	2302      	movs	r3, #2
 8003972:	9300      	str	r3, [sp, #0]
 8003974:	2300      	movs	r3, #0
 8003976:	22d2      	movs	r2, #210	; 0xd2
 8003978:	f44f 7182 	mov.w	r1, #260	; 0x104
 800397c:	480e      	ldr	r0, [pc, #56]	; (80039b8 <FuncMenu_DrawOutputMenu+0x5cc>)
 800397e:	f00c ffb7 	bl	80108f0 <ILI9341_Draw_Text>

				ILI9341_Draw_Text("               ", 	150, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003982:	2300      	movs	r3, #0
 8003984:	9301      	str	r3, [sp, #4]
 8003986:	2302      	movs	r3, #2
 8003988:	9300      	str	r3, [sp, #0]
 800398a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800398e:	2232      	movs	r2, #50	; 0x32
 8003990:	2196      	movs	r1, #150	; 0x96
 8003992:	480a      	ldr	r0, [pc, #40]	; (80039bc <FuncMenu_DrawOutputMenu+0x5d0>)
 8003994:	f00c ffac 	bl	80108f0 <ILI9341_Draw_Text>
				break;
 8003998:	e177      	b.n	8003c8a <FuncMenu_DrawOutputMenu+0x89e>
 800399a:	bf00      	nop
 800399c:	08015b4c 	.word	0x08015b4c
 80039a0:	08015b54 	.word	0x08015b54
 80039a4:	08015b60 	.word	0x08015b60
 80039a8:	08015b68 	.word	0x08015b68
 80039ac:	08015b74 	.word	0x08015b74
 80039b0:	08015b80 	.word	0x08015b80
 80039b4:	08015b88 	.word	0x08015b88
 80039b8:	08015b24 	.word	0x08015b24
 80039bc:	08015b90 	.word	0x08015b90
			case IMPULSE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80039c0:	2300      	movs	r3, #0
 80039c2:	9301      	str	r3, [sp, #4]
 80039c4:	2302      	movs	r3, #2
 80039c6:	9300      	str	r3, [sp, #0]
 80039c8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80039cc:	2232      	movs	r2, #50	; 0x32
 80039ce:	210a      	movs	r1, #10
 80039d0:	48b0      	ldr	r0, [pc, #704]	; (8003c94 <FuncMenu_DrawOutputMenu+0x8a8>)
 80039d2:	f00c ff8d 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80039d6:	2300      	movs	r3, #0
 80039d8:	9301      	str	r3, [sp, #4]
 80039da:	2302      	movs	r3, #2
 80039dc:	9300      	str	r3, [sp, #0]
 80039de:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80039e2:	2246      	movs	r2, #70	; 0x46
 80039e4:	210a      	movs	r1, #10
 80039e6:	48ac      	ldr	r0, [pc, #688]	; (8003c98 <FuncMenu_DrawOutputMenu+0x8ac>)
 80039e8:	f00c ff82 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80039ec:	2300      	movs	r3, #0
 80039ee:	9301      	str	r3, [sp, #4]
 80039f0:	2302      	movs	r3, #2
 80039f2:	9300      	str	r3, [sp, #0]
 80039f4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80039f8:	225a      	movs	r2, #90	; 0x5a
 80039fa:	210a      	movs	r1, #10
 80039fc:	48a7      	ldr	r0, [pc, #668]	; (8003c9c <FuncMenu_DrawOutputMenu+0x8b0>)
 80039fe:	f00c ff77 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003a02:	2300      	movs	r3, #0
 8003a04:	9301      	str	r3, [sp, #4]
 8003a06:	2302      	movs	r3, #2
 8003a08:	9300      	str	r3, [sp, #0]
 8003a0a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003a0e:	226e      	movs	r2, #110	; 0x6e
 8003a10:	210a      	movs	r1, #10
 8003a12:	48a3      	ldr	r0, [pc, #652]	; (8003ca0 <FuncMenu_DrawOutputMenu+0x8b4>)
 8003a14:	f00c ff6c 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003a18:	2300      	movs	r3, #0
 8003a1a:	9301      	str	r3, [sp, #4]
 8003a1c:	2302      	movs	r3, #2
 8003a1e:	9300      	str	r3, [sp, #0]
 8003a20:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003a24:	2282      	movs	r2, #130	; 0x82
 8003a26:	210a      	movs	r1, #10
 8003a28:	489e      	ldr	r0, [pc, #632]	; (8003ca4 <FuncMenu_DrawOutputMenu+0x8b8>)
 8003a2a:	f00c ff61 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003a2e:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003a32:	9301      	str	r3, [sp, #4]
 8003a34:	2302      	movs	r3, #2
 8003a36:	9300      	str	r3, [sp, #0]
 8003a38:	2300      	movs	r3, #0
 8003a3a:	2296      	movs	r2, #150	; 0x96
 8003a3c:	210a      	movs	r1, #10
 8003a3e:	489a      	ldr	r0, [pc, #616]	; (8003ca8 <FuncMenu_DrawOutputMenu+0x8bc>)
 8003a40:	f00c ff56 	bl	80108f0 <ILI9341_Draw_Text>

				if(pOutChan)
 8003a44:	79fb      	ldrb	r3, [r7, #7]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d00a      	beq.n	8003a60 <FuncMenu_DrawOutputMenu+0x674>
					ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	9301      	str	r3, [sp, #4]
 8003a4e:	2302      	movs	r3, #2
 8003a50:	9300      	str	r3, [sp, #0]
 8003a52:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003a56:	22aa      	movs	r2, #170	; 0xaa
 8003a58:	210a      	movs	r1, #10
 8003a5a:	4894      	ldr	r0, [pc, #592]	; (8003cac <FuncMenu_DrawOutputMenu+0x8c0>)
 8003a5c:	f00c ff48 	bl	80108f0 <ILI9341_Draw_Text>

				// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003a60:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003a64:	9301      	str	r3, [sp, #4]
 8003a66:	2302      	movs	r3, #2
 8003a68:	9300      	str	r3, [sp, #0]
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	22d2      	movs	r2, #210	; 0xd2
 8003a6e:	2105      	movs	r1, #5
 8003a70:	488f      	ldr	r0, [pc, #572]	; (8003cb0 <FuncMenu_DrawOutputMenu+0x8c4>)
 8003a72:	f00c ff3d 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003a76:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003a7a:	9301      	str	r3, [sp, #4]
 8003a7c:	2302      	movs	r3, #2
 8003a7e:	9300      	str	r3, [sp, #0]
 8003a80:	2300      	movs	r3, #0
 8003a82:	22d2      	movs	r2, #210	; 0xd2
 8003a84:	2161      	movs	r1, #97	; 0x61
 8003a86:	488a      	ldr	r0, [pc, #552]	; (8003cb0 <FuncMenu_DrawOutputMenu+0x8c4>)
 8003a88:	f00c ff32 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003a8c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003a90:	9301      	str	r3, [sp, #4]
 8003a92:	2302      	movs	r3, #2
 8003a94:	9300      	str	r3, [sp, #0]
 8003a96:	2300      	movs	r3, #0
 8003a98:	22d2      	movs	r2, #210	; 0xd2
 8003a9a:	21af      	movs	r1, #175	; 0xaf
 8003a9c:	4884      	ldr	r0, [pc, #528]	; (8003cb0 <FuncMenu_DrawOutputMenu+0x8c4>)
 8003a9e:	f00c ff27 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003aa2:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003aa6:	9301      	str	r3, [sp, #4]
 8003aa8:	2302      	movs	r3, #2
 8003aaa:	9300      	str	r3, [sp, #0]
 8003aac:	2300      	movs	r3, #0
 8003aae:	22d2      	movs	r2, #210	; 0xd2
 8003ab0:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003ab4:	487e      	ldr	r0, [pc, #504]	; (8003cb0 <FuncMenu_DrawOutputMenu+0x8c4>)
 8003ab6:	f00c ff1b 	bl	80108f0 <ILI9341_Draw_Text>

				ILI9341_Draw_Text("               ", 	150, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003aba:	2300      	movs	r3, #0
 8003abc:	9301      	str	r3, [sp, #4]
 8003abe:	2302      	movs	r3, #2
 8003ac0:	9300      	str	r3, [sp, #0]
 8003ac2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003ac6:	2232      	movs	r2, #50	; 0x32
 8003ac8:	2196      	movs	r1, #150	; 0x96
 8003aca:	487a      	ldr	r0, [pc, #488]	; (8003cb4 <FuncMenu_DrawOutputMenu+0x8c8>)
 8003acc:	f00c ff10 	bl	80108f0 <ILI9341_Draw_Text>
				break;
 8003ad0:	e0db      	b.n	8003c8a <FuncMenu_DrawOutputMenu+0x89e>
			case PWM_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	9301      	str	r3, [sp, #4]
 8003ad6:	2302      	movs	r3, #2
 8003ad8:	9300      	str	r3, [sp, #0]
 8003ada:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003ade:	2232      	movs	r2, #50	; 0x32
 8003ae0:	210a      	movs	r1, #10
 8003ae2:	486c      	ldr	r0, [pc, #432]	; (8003c94 <FuncMenu_DrawOutputMenu+0x8a8>)
 8003ae4:	f00c ff04 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003ae8:	2300      	movs	r3, #0
 8003aea:	9301      	str	r3, [sp, #4]
 8003aec:	2302      	movs	r3, #2
 8003aee:	9300      	str	r3, [sp, #0]
 8003af0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003af4:	2246      	movs	r2, #70	; 0x46
 8003af6:	210a      	movs	r1, #10
 8003af8:	4867      	ldr	r0, [pc, #412]	; (8003c98 <FuncMenu_DrawOutputMenu+0x8ac>)
 8003afa:	f00c fef9 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003afe:	2300      	movs	r3, #0
 8003b00:	9301      	str	r3, [sp, #4]
 8003b02:	2302      	movs	r3, #2
 8003b04:	9300      	str	r3, [sp, #0]
 8003b06:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003b0a:	225a      	movs	r2, #90	; 0x5a
 8003b0c:	210a      	movs	r1, #10
 8003b0e:	4863      	ldr	r0, [pc, #396]	; (8003c9c <FuncMenu_DrawOutputMenu+0x8b0>)
 8003b10:	f00c feee 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003b14:	2300      	movs	r3, #0
 8003b16:	9301      	str	r3, [sp, #4]
 8003b18:	2302      	movs	r3, #2
 8003b1a:	9300      	str	r3, [sp, #0]
 8003b1c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003b20:	226e      	movs	r2, #110	; 0x6e
 8003b22:	210a      	movs	r1, #10
 8003b24:	485e      	ldr	r0, [pc, #376]	; (8003ca0 <FuncMenu_DrawOutputMenu+0x8b4>)
 8003b26:	f00c fee3 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	9301      	str	r3, [sp, #4]
 8003b2e:	2302      	movs	r3, #2
 8003b30:	9300      	str	r3, [sp, #0]
 8003b32:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003b36:	2282      	movs	r2, #130	; 0x82
 8003b38:	210a      	movs	r1, #10
 8003b3a:	485a      	ldr	r0, [pc, #360]	; (8003ca4 <FuncMenu_DrawOutputMenu+0x8b8>)
 8003b3c:	f00c fed8 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003b40:	2300      	movs	r3, #0
 8003b42:	9301      	str	r3, [sp, #4]
 8003b44:	2302      	movs	r3, #2
 8003b46:	9300      	str	r3, [sp, #0]
 8003b48:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003b4c:	2296      	movs	r2, #150	; 0x96
 8003b4e:	210a      	movs	r1, #10
 8003b50:	4855      	ldr	r0, [pc, #340]	; (8003ca8 <FuncMenu_DrawOutputMenu+0x8bc>)
 8003b52:	f00c fecd 	bl	80108f0 <ILI9341_Draw_Text>

				if(pOutChan)
 8003b56:	79fb      	ldrb	r3, [r7, #7]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d00a      	beq.n	8003b72 <FuncMenu_DrawOutputMenu+0x786>
					ILI9341_Draw_Text("- PWM", 		10, 170, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003b5c:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003b60:	9301      	str	r3, [sp, #4]
 8003b62:	2302      	movs	r3, #2
 8003b64:	9300      	str	r3, [sp, #0]
 8003b66:	2300      	movs	r3, #0
 8003b68:	22aa      	movs	r2, #170	; 0xaa
 8003b6a:	210a      	movs	r1, #10
 8003b6c:	484f      	ldr	r0, [pc, #316]	; (8003cac <FuncMenu_DrawOutputMenu+0x8c0>)
 8003b6e:	f00c febf 	bl	80108f0 <ILI9341_Draw_Text>

				// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003b72:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003b76:	9301      	str	r3, [sp, #4]
 8003b78:	2302      	movs	r3, #2
 8003b7a:	9300      	str	r3, [sp, #0]
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	22d2      	movs	r2, #210	; 0xd2
 8003b80:	2105      	movs	r1, #5
 8003b82:	484b      	ldr	r0, [pc, #300]	; (8003cb0 <FuncMenu_DrawOutputMenu+0x8c4>)
 8003b84:	f00c feb4 	bl	80108f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003b88:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003b8c:	9301      	str	r3, [sp, #4]
 8003b8e:	2302      	movs	r3, #2
 8003b90:	9300      	str	r3, [sp, #0]
 8003b92:	2300      	movs	r3, #0
 8003b94:	22d2      	movs	r2, #210	; 0xd2
 8003b96:	2161      	movs	r1, #97	; 0x61
 8003b98:	4845      	ldr	r0, [pc, #276]	; (8003cb0 <FuncMenu_DrawOutputMenu+0x8c4>)
 8003b9a:	f00c fea9 	bl	80108f0 <ILI9341_Draw_Text>

				if(pOutChan)
 8003b9e:	79fb      	ldrb	r3, [r7, #7]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d05a      	beq.n	8003c5a <FuncMenu_DrawOutputMenu+0x86e>
				{
					ILI9341_Draw_Text("DUTY", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003ba4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003ba8:	9301      	str	r3, [sp, #4]
 8003baa:	2302      	movs	r3, #2
 8003bac:	9300      	str	r3, [sp, #0]
 8003bae:	2300      	movs	r3, #0
 8003bb0:	22d2      	movs	r2, #210	; 0xd2
 8003bb2:	21af      	movs	r1, #175	; 0xaf
 8003bb4:	4840      	ldr	r0, [pc, #256]	; (8003cb8 <FuncMenu_DrawOutputMenu+0x8cc>)
 8003bb6:	f00c fe9b 	bl	80108f0 <ILI9341_Draw_Text>
					char duty[10] = "";
 8003bba:	2300      	movs	r3, #0
 8003bbc:	60bb      	str	r3, [r7, #8]
 8003bbe:	f107 030c 	add.w	r3, r7, #12
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	601a      	str	r2, [r3, #0]
 8003bc6:	809a      	strh	r2, [r3, #4]
					snprintf(duty, sizeof(duty), "%0.2f%%", ((float)PWM_AUX_OUT_TIM->CCR1 / (float)PWM_AUX_OUT_TIM->ARR) * 100);
 8003bc8:	4b3c      	ldr	r3, [pc, #240]	; (8003cbc <FuncMenu_DrawOutputMenu+0x8d0>)
 8003bca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bcc:	ee07 3a90 	vmov	s15, r3
 8003bd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bd4:	4b39      	ldr	r3, [pc, #228]	; (8003cbc <FuncMenu_DrawOutputMenu+0x8d0>)
 8003bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd8:	ee07 3a90 	vmov	s15, r3
 8003bdc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003be0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003be4:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8003cc0 <FuncMenu_DrawOutputMenu+0x8d4>
 8003be8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003bec:	ee17 0a90 	vmov	r0, s15
 8003bf0:	f7fc fcd2 	bl	8000598 <__aeabi_f2d>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	460c      	mov	r4, r1
 8003bf8:	f107 0008 	add.w	r0, r7, #8
 8003bfc:	e9cd 3400 	strd	r3, r4, [sp]
 8003c00:	4a30      	ldr	r2, [pc, #192]	; (8003cc4 <FuncMenu_DrawOutputMenu+0x8d8>)
 8003c02:	210a      	movs	r1, #10
 8003c04:	f00e fa30 	bl	8012068 <sniprintf>
					ILI9341_Draw_Text(duty, 	220, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003c08:	f107 0008 	add.w	r0, r7, #8
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	9301      	str	r3, [sp, #4]
 8003c10:	2302      	movs	r3, #2
 8003c12:	9300      	str	r3, [sp, #0]
 8003c14:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003c18:	2232      	movs	r2, #50	; 0x32
 8003c1a:	21dc      	movs	r1, #220	; 0xdc
 8003c1c:	f00c fe68 	bl	80108f0 <ILI9341_Draw_Text>
					if(SM_IsFuncPwmDutyMode())
 8003c20:	f003 f996 	bl	8006f50 <SM_IsFuncPwmDutyMode>
 8003c24:	4603      	mov	r3, r0
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d00b      	beq.n	8003c42 <FuncMenu_DrawOutputMenu+0x856>
					{
						ILI9341_Draw_Text("DUTY:", 	150, 50,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003c2a:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003c2e:	9301      	str	r3, [sp, #4]
 8003c30:	2302      	movs	r3, #2
 8003c32:	9300      	str	r3, [sp, #0]
 8003c34:	2300      	movs	r3, #0
 8003c36:	2232      	movs	r2, #50	; 0x32
 8003c38:	2196      	movs	r1, #150	; 0x96
 8003c3a:	4823      	ldr	r0, [pc, #140]	; (8003cc8 <FuncMenu_DrawOutputMenu+0x8dc>)
 8003c3c:	f00c fe58 	bl	80108f0 <ILI9341_Draw_Text>
 8003c40:	e016      	b.n	8003c70 <FuncMenu_DrawOutputMenu+0x884>

					}
					else
					{
						ILI9341_Draw_Text("DUTY:", 	150, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003c42:	2300      	movs	r3, #0
 8003c44:	9301      	str	r3, [sp, #4]
 8003c46:	2302      	movs	r3, #2
 8003c48:	9300      	str	r3, [sp, #0]
 8003c4a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003c4e:	2232      	movs	r2, #50	; 0x32
 8003c50:	2196      	movs	r1, #150	; 0x96
 8003c52:	481d      	ldr	r0, [pc, #116]	; (8003cc8 <FuncMenu_DrawOutputMenu+0x8dc>)
 8003c54:	f00c fe4c 	bl	80108f0 <ILI9341_Draw_Text>
 8003c58:	e00a      	b.n	8003c70 <FuncMenu_DrawOutputMenu+0x884>
					}
				}
				else
				{
					ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003c5a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003c5e:	9301      	str	r3, [sp, #4]
 8003c60:	2302      	movs	r3, #2
 8003c62:	9300      	str	r3, [sp, #0]
 8003c64:	2300      	movs	r3, #0
 8003c66:	22d2      	movs	r2, #210	; 0xd2
 8003c68:	21af      	movs	r1, #175	; 0xaf
 8003c6a:	4811      	ldr	r0, [pc, #68]	; (8003cb0 <FuncMenu_DrawOutputMenu+0x8c4>)
 8003c6c:	f00c fe40 	bl	80108f0 <ILI9341_Draw_Text>
				}

				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003c70:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003c74:	9301      	str	r3, [sp, #4]
 8003c76:	2302      	movs	r3, #2
 8003c78:	9300      	str	r3, [sp, #0]
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	22d2      	movs	r2, #210	; 0xd2
 8003c7e:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003c82:	480b      	ldr	r0, [pc, #44]	; (8003cb0 <FuncMenu_DrawOutputMenu+0x8c4>)
 8003c84:	f00c fe34 	bl	80108f0 <ILI9341_Draw_Text>

				break;
 8003c88:	bf00      	nop
				//
		}
	}
}
 8003c8a:	bf00      	nop
 8003c8c:	371c      	adds	r7, #28
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd90      	pop	{r4, r7, pc}
 8003c92:	bf00      	nop
 8003c94:	08015b4c 	.word	0x08015b4c
 8003c98:	08015b54 	.word	0x08015b54
 8003c9c:	08015b60 	.word	0x08015b60
 8003ca0:	08015b68 	.word	0x08015b68
 8003ca4:	08015b74 	.word	0x08015b74
 8003ca8:	08015b80 	.word	0x08015b80
 8003cac:	08015b88 	.word	0x08015b88
 8003cb0:	08015b24 	.word	0x08015b24
 8003cb4:	08015b90 	.word	0x08015b90
 8003cb8:	08015ba0 	.word	0x08015ba0
 8003cbc:	40000400 	.word	0x40000400
 8003cc0:	42c80000 	.word	0x42c80000
 8003cc4:	08015ba8 	.word	0x08015ba8
 8003cc8:	08015bb0 	.word	0x08015bb0

08003ccc <GainMenu_DrawMenu>:
			Gain_Aux_Menu_State,
 *	@retval None
 *
 */
void GainMenu_DrawMenu(eSystemState pMenu)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b082      	sub	sp, #8
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8003cd6:	79fb      	ldrb	r3, [r7, #7]
 8003cd8:	2b07      	cmp	r3, #7
 8003cda:	d007      	beq.n	8003cec <GainMenu_DrawMenu+0x20>
 8003cdc:	2b08      	cmp	r3, #8
 8003cde:	d008      	beq.n	8003cf2 <GainMenu_DrawMenu+0x26>
 8003ce0:	2b06      	cmp	r3, #6
 8003ce2:	d000      	beq.n	8003ce6 <GainMenu_DrawMenu+0x1a>
		case Gain_Aux_Menu_State:
			GainMenu_DrawAuxMenu();
			break;

		default:
			break;
 8003ce4:	e008      	b.n	8003cf8 <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawMainMenu();
 8003ce6:	f000 f80b 	bl	8003d00 <GainMenu_DrawMainMenu>
			break;
 8003cea:	e005      	b.n	8003cf8 <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawSignalMenu();
 8003cec:	f000 f868 	bl	8003dc0 <GainMenu_DrawSignalMenu>
			break;
 8003cf0:	e002      	b.n	8003cf8 <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawAuxMenu();
 8003cf2:	f000 f8af 	bl	8003e54 <GainMenu_DrawAuxMenu>
			break;
 8003cf6:	bf00      	nop

	}
}
 8003cf8:	bf00      	nop
 8003cfa:	3708      	adds	r7, #8
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <GainMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawMainMenu()
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("OUT->GAIN", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003d06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003d0a:	9301      	str	r3, [sp, #4]
 8003d0c:	2302      	movs	r3, #2
 8003d0e:	9300      	str	r3, [sp, #0]
 8003d10:	2300      	movs	r3, #0
 8003d12:	220a      	movs	r2, #10
 8003d14:	210a      	movs	r1, #10
 8003d16:	4826      	ldr	r0, [pc, #152]	; (8003db0 <GainMenu_DrawMainMenu+0xb0>)
 8003d18:	f00c fdea 	bl	80108f0 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003d1c:	f7fd f89c 	bl	8000e58 <DM_DisplayFormattedOutput>

	// coloured menu btn labels
	ILI9341_Draw_Text("SIGNAL", 5, 	 210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003d20:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003d24:	9301      	str	r3, [sp, #4]
 8003d26:	2302      	movs	r3, #2
 8003d28:	9300      	str	r3, [sp, #0]
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	22d2      	movs	r2, #210	; 0xd2
 8003d2e:	2105      	movs	r1, #5
 8003d30:	4820      	ldr	r0, [pc, #128]	; (8003db4 <GainMenu_DrawMainMenu+0xb4>)
 8003d32:	f00c fddd 	bl	80108f0 <ILI9341_Draw_Text>

	eOutput_mode aux_output_func = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 8003d36:	2001      	movs	r0, #1
 8003d38:	f002 fe08 	bl	800694c <SM_GetOutputChannel>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	71fb      	strb	r3, [r7, #7]
	if(aux_output_func == PWM_FUNC_MODE)
 8003d46:	79fb      	ldrb	r3, [r7, #7]
 8003d48:	2b06      	cmp	r3, #6
 8003d4a:	d10b      	bne.n	8003d64 <GainMenu_DrawMainMenu+0x64>
	{
		ILI9341_Draw_Text("    ",	100,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003d4c:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003d50:	9301      	str	r3, [sp, #4]
 8003d52:	2302      	movs	r3, #2
 8003d54:	9300      	str	r3, [sp, #0]
 8003d56:	2300      	movs	r3, #0
 8003d58:	22d2      	movs	r2, #210	; 0xd2
 8003d5a:	2164      	movs	r1, #100	; 0x64
 8003d5c:	4816      	ldr	r0, [pc, #88]	; (8003db8 <GainMenu_DrawMainMenu+0xb8>)
 8003d5e:	f00c fdc7 	bl	80108f0 <ILI9341_Draw_Text>
 8003d62:	e00a      	b.n	8003d7a <GainMenu_DrawMainMenu+0x7a>
	}
	else
	{
		ILI9341_Draw_Text("AUX",	100,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003d64:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003d68:	9301      	str	r3, [sp, #4]
 8003d6a:	2302      	movs	r3, #2
 8003d6c:	9300      	str	r3, [sp, #0]
 8003d6e:	2300      	movs	r3, #0
 8003d70:	22d2      	movs	r2, #210	; 0xd2
 8003d72:	2164      	movs	r1, #100	; 0x64
 8003d74:	4811      	ldr	r0, [pc, #68]	; (8003dbc <GainMenu_DrawMainMenu+0xbc>)
 8003d76:	f00c fdbb 	bl	80108f0 <ILI9341_Draw_Text>
	}

	ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003d7a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003d7e:	9301      	str	r3, [sp, #4]
 8003d80:	2302      	movs	r3, #2
 8003d82:	9300      	str	r3, [sp, #0]
 8003d84:	2300      	movs	r3, #0
 8003d86:	22d2      	movs	r2, #210	; 0xd2
 8003d88:	21af      	movs	r1, #175	; 0xaf
 8003d8a:	480b      	ldr	r0, [pc, #44]	; (8003db8 <GainMenu_DrawMainMenu+0xb8>)
 8003d8c:	f00c fdb0 	bl	80108f0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003d90:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003d94:	9301      	str	r3, [sp, #4]
 8003d96:	2302      	movs	r3, #2
 8003d98:	9300      	str	r3, [sp, #0]
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	22d2      	movs	r2, #210	; 0xd2
 8003d9e:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003da2:	4805      	ldr	r0, [pc, #20]	; (8003db8 <GainMenu_DrawMainMenu+0xb8>)
 8003da4:	f00c fda4 	bl	80108f0 <ILI9341_Draw_Text>
}
 8003da8:	bf00      	nop
 8003daa:	3708      	adds	r7, #8
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	08015bb8 	.word	0x08015bb8
 8003db4:	08015bc4 	.word	0x08015bc4
 8003db8:	08015bcc 	.word	0x08015bcc
 8003dbc:	08015bd4 	.word	0x08015bd4

08003dc0 <GainMenu_DrawSignalMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawSignalMenu()
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b082      	sub	sp, #8
 8003dc4:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->GAIN->SIG", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003dc6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003dca:	9301      	str	r3, [sp, #4]
 8003dcc:	2302      	movs	r3, #2
 8003dce:	9300      	str	r3, [sp, #0]
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	220a      	movs	r2, #10
 8003dd4:	210a      	movs	r1, #10
 8003dd6:	481a      	ldr	r0, [pc, #104]	; (8003e40 <GainMenu_DrawSignalMenu+0x80>)
 8003dd8:	f00c fd8a 	bl	80108f0 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003ddc:	f7fd f83c 	bl	8000e58 <DM_DisplayFormattedOutput>

	ILI9341_Draw_Text("1.8V", 15,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003de0:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003de4:	9301      	str	r3, [sp, #4]
 8003de6:	2302      	movs	r3, #2
 8003de8:	9300      	str	r3, [sp, #0]
 8003dea:	2300      	movs	r3, #0
 8003dec:	22d2      	movs	r2, #210	; 0xd2
 8003dee:	210f      	movs	r1, #15
 8003df0:	4814      	ldr	r0, [pc, #80]	; (8003e44 <GainMenu_DrawSignalMenu+0x84>)
 8003df2:	f00c fd7d 	bl	80108f0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("3.3V", 97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003df6:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003dfa:	9301      	str	r3, [sp, #4]
 8003dfc:	2302      	movs	r3, #2
 8003dfe:	9300      	str	r3, [sp, #0]
 8003e00:	2300      	movs	r3, #0
 8003e02:	22d2      	movs	r2, #210	; 0xd2
 8003e04:	2161      	movs	r1, #97	; 0x61
 8003e06:	4810      	ldr	r0, [pc, #64]	; (8003e48 <GainMenu_DrawSignalMenu+0x88>)
 8003e08:	f00c fd72 	bl	80108f0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("5V",  190, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003e0c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003e10:	9301      	str	r3, [sp, #4]
 8003e12:	2302      	movs	r3, #2
 8003e14:	9300      	str	r3, [sp, #0]
 8003e16:	2300      	movs	r3, #0
 8003e18:	22d2      	movs	r2, #210	; 0xd2
 8003e1a:	21be      	movs	r1, #190	; 0xbe
 8003e1c:	480b      	ldr	r0, [pc, #44]	; (8003e4c <GainMenu_DrawSignalMenu+0x8c>)
 8003e1e:	f00c fd67 	bl	80108f0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("9V", 265, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003e22:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003e26:	9301      	str	r3, [sp, #4]
 8003e28:	2302      	movs	r3, #2
 8003e2a:	9300      	str	r3, [sp, #0]
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	22d2      	movs	r2, #210	; 0xd2
 8003e30:	f240 1109 	movw	r1, #265	; 0x109
 8003e34:	4806      	ldr	r0, [pc, #24]	; (8003e50 <GainMenu_DrawSignalMenu+0x90>)
 8003e36:	f00c fd5b 	bl	80108f0 <ILI9341_Draw_Text>
}
 8003e3a:	bf00      	nop
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	08015bd8 	.word	0x08015bd8
 8003e44:	08015be8 	.word	0x08015be8
 8003e48:	08015bf0 	.word	0x08015bf0
 8003e4c:	08015bf8 	.word	0x08015bf8
 8003e50:	08015bfc 	.word	0x08015bfc

08003e54 <GainMenu_DrawAuxMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawAuxMenu()
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b082      	sub	sp, #8
 8003e58:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->GAIN->Aux", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003e5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003e5e:	9301      	str	r3, [sp, #4]
 8003e60:	2302      	movs	r3, #2
 8003e62:	9300      	str	r3, [sp, #0]
 8003e64:	2300      	movs	r3, #0
 8003e66:	220a      	movs	r2, #10
 8003e68:	210a      	movs	r1, #10
 8003e6a:	4804      	ldr	r0, [pc, #16]	; (8003e7c <GainMenu_DrawAuxMenu+0x28>)
 8003e6c:	f00c fd40 	bl	80108f0 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003e70:	f7fc fff2 	bl	8000e58 <DM_DisplayFormattedOutput>
}
 8003e74:	bf00      	nop
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	08015c00 	.word	0x08015c00

08003e80 <ToplevelMenu_DrawMenu>:
			Toplevel_Input_Menu_State,
 *	@retval None
 *
 */
void ToplevelMenu_DrawMenu(eSystemState pMenu)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b082      	sub	sp, #8
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	4603      	mov	r3, r0
 8003e88:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8003e8a:	79fb      	ldrb	r3, [r7, #7]
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d007      	beq.n	8003ea0 <ToplevelMenu_DrawMenu+0x20>
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d008      	beq.n	8003ea6 <ToplevelMenu_DrawMenu+0x26>
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d000      	beq.n	8003e9a <ToplevelMenu_DrawMenu+0x1a>
		case Toplevel_Input_Menu_State:
			ToplevelMenu_DrawInputMenu();
			break;

		default:
			break;
 8003e98:	e008      	b.n	8003eac <ToplevelMenu_DrawMenu+0x2c>
			ToplevelMenu_DrawMainMenu();
 8003e9a:	f000 f80b 	bl	8003eb4 <ToplevelMenu_DrawMainMenu>
			break;
 8003e9e:	e005      	b.n	8003eac <ToplevelMenu_DrawMenu+0x2c>
			ToplevelMenu_DrawOutputMenu();
 8003ea0:	f000 f844 	bl	8003f2c <ToplevelMenu_DrawOutputMenu>
			break;
 8003ea4:	e002      	b.n	8003eac <ToplevelMenu_DrawMenu+0x2c>
			ToplevelMenu_DrawInputMenu();
 8003ea6:	f000 f88b 	bl	8003fc0 <ToplevelMenu_DrawInputMenu>
			break;
 8003eaa:	bf00      	nop

	}
}
 8003eac:	bf00      	nop
 8003eae:	3708      	adds	r7, #8
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}

08003eb4 <ToplevelMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawMainMenu()
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b082      	sub	sp, #8
 8003eb8:	af02      	add	r7, sp, #8
	#endif

	// Main screen
	//ILI9341_Draw_Text("SIGNAL GENERATOR", 	10, 10, WHITE, 2, BLACK);

	DM_DisplayFormattedOutput();
 8003eba:	f7fc ffcd 	bl	8000e58 <DM_DisplayFormattedOutput>

	ILI9341_Draw_Text("OUTPUT", 6, 210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003ebe:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003ec2:	9301      	str	r3, [sp, #4]
 8003ec4:	2302      	movs	r3, #2
 8003ec6:	9300      	str	r3, [sp, #0]
 8003ec8:	2300      	movs	r3, #0
 8003eca:	22d2      	movs	r2, #210	; 0xd2
 8003ecc:	2106      	movs	r1, #6
 8003ece:	4814      	ldr	r0, [pc, #80]	; (8003f20 <ToplevelMenu_DrawMainMenu+0x6c>)
 8003ed0:	f00c fd0e 	bl	80108f0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("INPUT", 93, 210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003ed4:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003ed8:	9301      	str	r3, [sp, #4]
 8003eda:	2302      	movs	r3, #2
 8003edc:	9300      	str	r3, [sp, #0]
 8003ede:	2300      	movs	r3, #0
 8003ee0:	22d2      	movs	r2, #210	; 0xd2
 8003ee2:	215d      	movs	r1, #93	; 0x5d
 8003ee4:	480f      	ldr	r0, [pc, #60]	; (8003f24 <ToplevelMenu_DrawMainMenu+0x70>)
 8003ee6:	f00c fd03 	bl	80108f0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003eea:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003eee:	9301      	str	r3, [sp, #4]
 8003ef0:	2302      	movs	r3, #2
 8003ef2:	9300      	str	r3, [sp, #0]
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	22d2      	movs	r2, #210	; 0xd2
 8003ef8:	21af      	movs	r1, #175	; 0xaf
 8003efa:	480b      	ldr	r0, [pc, #44]	; (8003f28 <ToplevelMenu_DrawMainMenu+0x74>)
 8003efc:	f00c fcf8 	bl	80108f0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003f00:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003f04:	9301      	str	r3, [sp, #4]
 8003f06:	2302      	movs	r3, #2
 8003f08:	9300      	str	r3, [sp, #0]
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	22d2      	movs	r2, #210	; 0xd2
 8003f0e:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003f12:	4805      	ldr	r0, [pc, #20]	; (8003f28 <ToplevelMenu_DrawMainMenu+0x74>)
 8003f14:	f00c fcec 	bl	80108f0 <ILI9341_Draw_Text>


}
 8003f18:	bf00      	nop
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	08015c10 	.word	0x08015c10
 8003f24:	08015c18 	.word	0x08015c18
 8003f28:	08015c20 	.word	0x08015c20

08003f2c <ToplevelMenu_DrawOutputMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawOutputMenu()
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b082      	sub	sp, #8
 8003f30:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003f32:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003f36:	9301      	str	r3, [sp, #4]
 8003f38:	2302      	movs	r3, #2
 8003f3a:	9300      	str	r3, [sp, #0]
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	220a      	movs	r2, #10
 8003f40:	210a      	movs	r1, #10
 8003f42:	481a      	ldr	r0, [pc, #104]	; (8003fac <ToplevelMenu_DrawOutputMenu+0x80>)
 8003f44:	f00c fcd4 	bl	80108f0 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003f48:	f7fc ff86 	bl	8000e58 <DM_DisplayFormattedOutput>

	ILI9341_Draw_Text("FUNC", 15,  210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003f4c:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003f50:	9301      	str	r3, [sp, #4]
 8003f52:	2302      	movs	r3, #2
 8003f54:	9300      	str	r3, [sp, #0]
 8003f56:	2300      	movs	r3, #0
 8003f58:	22d2      	movs	r2, #210	; 0xd2
 8003f5a:	210f      	movs	r1, #15
 8003f5c:	4814      	ldr	r0, [pc, #80]	; (8003fb0 <ToplevelMenu_DrawOutputMenu+0x84>)
 8003f5e:	f00c fcc7 	bl	80108f0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("FREQ", 98,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003f62:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003f66:	9301      	str	r3, [sp, #4]
 8003f68:	2302      	movs	r3, #2
 8003f6a:	9300      	str	r3, [sp, #0]
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	22d2      	movs	r2, #210	; 0xd2
 8003f70:	2162      	movs	r1, #98	; 0x62
 8003f72:	4810      	ldr	r0, [pc, #64]	; (8003fb4 <ToplevelMenu_DrawOutputMenu+0x88>)
 8003f74:	f00c fcbc 	bl	80108f0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("GAIN", 176, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003f78:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003f7c:	9301      	str	r3, [sp, #4]
 8003f7e:	2302      	movs	r3, #2
 8003f80:	9300      	str	r3, [sp, #0]
 8003f82:	2300      	movs	r3, #0
 8003f84:	22d2      	movs	r2, #210	; 0xd2
 8003f86:	21b0      	movs	r1, #176	; 0xb0
 8003f88:	480b      	ldr	r0, [pc, #44]	; (8003fb8 <ToplevelMenu_DrawOutputMenu+0x8c>)
 8003f8a:	f00c fcb1 	bl	80108f0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("OFFSET", 245, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003f8e:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003f92:	9301      	str	r3, [sp, #4]
 8003f94:	2302      	movs	r3, #2
 8003f96:	9300      	str	r3, [sp, #0]
 8003f98:	2300      	movs	r3, #0
 8003f9a:	22d2      	movs	r2, #210	; 0xd2
 8003f9c:	21f5      	movs	r1, #245	; 0xf5
 8003f9e:	4807      	ldr	r0, [pc, #28]	; (8003fbc <ToplevelMenu_DrawOutputMenu+0x90>)
 8003fa0:	f00c fca6 	bl	80108f0 <ILI9341_Draw_Text>
}
 8003fa4:	bf00      	nop
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	08015c28 	.word	0x08015c28
 8003fb0:	08015c30 	.word	0x08015c30
 8003fb4:	08015c38 	.word	0x08015c38
 8003fb8:	08015c40 	.word	0x08015c40
 8003fbc:	08015c48 	.word	0x08015c48

08003fc0 <ToplevelMenu_DrawInputMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawInputMenu()
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b088      	sub	sp, #32
 8003fc4:	af02      	add	r7, sp, #8

	DM_DisplayInputTriggerStatus();
 8003fc6:	f7fc ff67 	bl	8000e98 <DM_DisplayInputTriggerStatus>

	//
	// BREADCRUMB TRAIL
	//
	ILI9341_Draw_Text("IN->", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003fca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003fce:	9301      	str	r3, [sp, #4]
 8003fd0:	2302      	movs	r3, #2
 8003fd2:	9300      	str	r3, [sp, #0]
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	220a      	movs	r2, #10
 8003fd8:	210a      	movs	r1, #10
 8003fda:	48c5      	ldr	r0, [pc, #788]	; (80042f0 <ToplevelMenu_DrawInputMenu+0x330>)
 8003fdc:	f00c fc88 	bl	80108f0 <ILI9341_Draw_Text>

	//
	// TRIGGER SETTINGS DISPLAY
	//
	ILI9341_Draw_Text("TRIGGER:", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	9301      	str	r3, [sp, #4]
 8003fe4:	2302      	movs	r3, #2
 8003fe6:	9300      	str	r3, [sp, #0]
 8003fe8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003fec:	2232      	movs	r2, #50	; 0x32
 8003fee:	210a      	movs	r1, #10
 8003ff0:	48c0      	ldr	r0, [pc, #768]	; (80042f4 <ToplevelMenu_DrawInputMenu+0x334>)
 8003ff2:	f00c fc7d 	bl	80108f0 <ILI9341_Draw_Text>
	if(IT_GetTriggerStatus())
 8003ff6:	f002 fb79 	bl	80066ec <IT_GetTriggerStatus>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d016      	beq.n	800402e <ToplevelMenu_DrawInputMenu+0x6e>
	{
		ILI9341_Draw_Text("ON", 	150, 50,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8004000:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8004004:	9301      	str	r3, [sp, #4]
 8004006:	2302      	movs	r3, #2
 8004008:	9300      	str	r3, [sp, #0]
 800400a:	2300      	movs	r3, #0
 800400c:	2232      	movs	r2, #50	; 0x32
 800400e:	2196      	movs	r1, #150	; 0x96
 8004010:	48b9      	ldr	r0, [pc, #740]	; (80042f8 <ToplevelMenu_DrawInputMenu+0x338>)
 8004012:	f00c fc6d 	bl	80108f0 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("OFF", 	200, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8004016:	2300      	movs	r3, #0
 8004018:	9301      	str	r3, [sp, #4]
 800401a:	2302      	movs	r3, #2
 800401c:	9300      	str	r3, [sp, #0]
 800401e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8004022:	2232      	movs	r2, #50	; 0x32
 8004024:	21c8      	movs	r1, #200	; 0xc8
 8004026:	48b5      	ldr	r0, [pc, #724]	; (80042fc <ToplevelMenu_DrawInputMenu+0x33c>)
 8004028:	f00c fc62 	bl	80108f0 <ILI9341_Draw_Text>
 800402c:	e015      	b.n	800405a <ToplevelMenu_DrawInputMenu+0x9a>
	}
	else
	{
		ILI9341_Draw_Text("ON", 	150, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800402e:	2300      	movs	r3, #0
 8004030:	9301      	str	r3, [sp, #4]
 8004032:	2302      	movs	r3, #2
 8004034:	9300      	str	r3, [sp, #0]
 8004036:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800403a:	2232      	movs	r2, #50	; 0x32
 800403c:	2196      	movs	r1, #150	; 0x96
 800403e:	48ae      	ldr	r0, [pc, #696]	; (80042f8 <ToplevelMenu_DrawInputMenu+0x338>)
 8004040:	f00c fc56 	bl	80108f0 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("OFF", 	200, 50,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8004044:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8004048:	9301      	str	r3, [sp, #4]
 800404a:	2302      	movs	r3, #2
 800404c:	9300      	str	r3, [sp, #0]
 800404e:	2300      	movs	r3, #0
 8004050:	2232      	movs	r2, #50	; 0x32
 8004052:	21c8      	movs	r1, #200	; 0xc8
 8004054:	48a9      	ldr	r0, [pc, #676]	; (80042fc <ToplevelMenu_DrawInputMenu+0x33c>)
 8004056:	f00c fc4b 	bl	80108f0 <ILI9341_Draw_Text>
	}

	//
	// MODE SETTINGS DISPLAY
	//
	ILI9341_Draw_Text("MODE:", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800405a:	2300      	movs	r3, #0
 800405c:	9301      	str	r3, [sp, #4]
 800405e:	2302      	movs	r3, #2
 8004060:	9300      	str	r3, [sp, #0]
 8004062:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8004066:	2246      	movs	r2, #70	; 0x46
 8004068:	210a      	movs	r1, #10
 800406a:	48a5      	ldr	r0, [pc, #660]	; (8004300 <ToplevelMenu_DrawInputMenu+0x340>)
 800406c:	f00c fc40 	bl	80108f0 <ILI9341_Draw_Text>
	if(IT_GetActiveTriggerMode() == INPUT_TIMER_TIM)
 8004070:	f002 fb20 	bl	80066b4 <IT_GetActiveTriggerMode>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d122      	bne.n	80040c0 <ToplevelMenu_DrawInputMenu+0x100>
	{
		ILI9341_Draw_Text("TIM", 	150, 70,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 800407a:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 800407e:	9301      	str	r3, [sp, #4]
 8004080:	2302      	movs	r3, #2
 8004082:	9300      	str	r3, [sp, #0]
 8004084:	2300      	movs	r3, #0
 8004086:	2246      	movs	r2, #70	; 0x46
 8004088:	2196      	movs	r1, #150	; 0x96
 800408a:	489e      	ldr	r0, [pc, #632]	; (8004304 <ToplevelMenu_DrawInputMenu+0x344>)
 800408c:	f00c fc30 	bl	80108f0 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("COMP", 	200, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8004090:	2300      	movs	r3, #0
 8004092:	9301      	str	r3, [sp, #4]
 8004094:	2302      	movs	r3, #2
 8004096:	9300      	str	r3, [sp, #0]
 8004098:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800409c:	2246      	movs	r2, #70	; 0x46
 800409e:	21c8      	movs	r1, #200	; 0xc8
 80040a0:	4899      	ldr	r0, [pc, #612]	; (8004308 <ToplevelMenu_DrawInputMenu+0x348>)
 80040a2:	f00c fc25 	bl	80108f0 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("ADC", 	270, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80040a6:	2300      	movs	r3, #0
 80040a8:	9301      	str	r3, [sp, #4]
 80040aa:	2302      	movs	r3, #2
 80040ac:	9300      	str	r3, [sp, #0]
 80040ae:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80040b2:	2246      	movs	r2, #70	; 0x46
 80040b4:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80040b8:	4894      	ldr	r0, [pc, #592]	; (800430c <ToplevelMenu_DrawInputMenu+0x34c>)
 80040ba:	f00c fc19 	bl	80108f0 <ILI9341_Draw_Text>
 80040be:	e04e      	b.n	800415e <ToplevelMenu_DrawInputMenu+0x19e>


	}
	else if(IT_GetActiveTriggerMode() == INPUT_TIMER_COMP)
 80040c0:	f002 faf8 	bl	80066b4 <IT_GetActiveTriggerMode>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d122      	bne.n	8004110 <ToplevelMenu_DrawInputMenu+0x150>
	{
		ILI9341_Draw_Text("TIM", 	150, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80040ca:	2300      	movs	r3, #0
 80040cc:	9301      	str	r3, [sp, #4]
 80040ce:	2302      	movs	r3, #2
 80040d0:	9300      	str	r3, [sp, #0]
 80040d2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80040d6:	2246      	movs	r2, #70	; 0x46
 80040d8:	2196      	movs	r1, #150	; 0x96
 80040da:	488a      	ldr	r0, [pc, #552]	; (8004304 <ToplevelMenu_DrawInputMenu+0x344>)
 80040dc:	f00c fc08 	bl	80108f0 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("COMP", 	200, 70,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80040e0:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80040e4:	9301      	str	r3, [sp, #4]
 80040e6:	2302      	movs	r3, #2
 80040e8:	9300      	str	r3, [sp, #0]
 80040ea:	2300      	movs	r3, #0
 80040ec:	2246      	movs	r2, #70	; 0x46
 80040ee:	21c8      	movs	r1, #200	; 0xc8
 80040f0:	4885      	ldr	r0, [pc, #532]	; (8004308 <ToplevelMenu_DrawInputMenu+0x348>)
 80040f2:	f00c fbfd 	bl	80108f0 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("ADC", 	270, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80040f6:	2300      	movs	r3, #0
 80040f8:	9301      	str	r3, [sp, #4]
 80040fa:	2302      	movs	r3, #2
 80040fc:	9300      	str	r3, [sp, #0]
 80040fe:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8004102:	2246      	movs	r2, #70	; 0x46
 8004104:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8004108:	4880      	ldr	r0, [pc, #512]	; (800430c <ToplevelMenu_DrawInputMenu+0x34c>)
 800410a:	f00c fbf1 	bl	80108f0 <ILI9341_Draw_Text>
 800410e:	e026      	b.n	800415e <ToplevelMenu_DrawInputMenu+0x19e>


	}
	else if(IT_GetActiveTriggerMode() == INPUT_TIMER_ADC)
 8004110:	f002 fad0 	bl	80066b4 <IT_GetActiveTriggerMode>
 8004114:	4603      	mov	r3, r0
 8004116:	2b02      	cmp	r3, #2
 8004118:	d121      	bne.n	800415e <ToplevelMenu_DrawInputMenu+0x19e>
	{
		ILI9341_Draw_Text("TIM", 	150, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800411a:	2300      	movs	r3, #0
 800411c:	9301      	str	r3, [sp, #4]
 800411e:	2302      	movs	r3, #2
 8004120:	9300      	str	r3, [sp, #0]
 8004122:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8004126:	2246      	movs	r2, #70	; 0x46
 8004128:	2196      	movs	r1, #150	; 0x96
 800412a:	4876      	ldr	r0, [pc, #472]	; (8004304 <ToplevelMenu_DrawInputMenu+0x344>)
 800412c:	f00c fbe0 	bl	80108f0 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("COMP", 	200, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8004130:	2300      	movs	r3, #0
 8004132:	9301      	str	r3, [sp, #4]
 8004134:	2302      	movs	r3, #2
 8004136:	9300      	str	r3, [sp, #0]
 8004138:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800413c:	2246      	movs	r2, #70	; 0x46
 800413e:	21c8      	movs	r1, #200	; 0xc8
 8004140:	4871      	ldr	r0, [pc, #452]	; (8004308 <ToplevelMenu_DrawInputMenu+0x348>)
 8004142:	f00c fbd5 	bl	80108f0 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("ADC", 	270, 70,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8004146:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 800414a:	9301      	str	r3, [sp, #4]
 800414c:	2302      	movs	r3, #2
 800414e:	9300      	str	r3, [sp, #0]
 8004150:	2300      	movs	r3, #0
 8004152:	2246      	movs	r2, #70	; 0x46
 8004154:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8004158:	486c      	ldr	r0, [pc, #432]	; (800430c <ToplevelMenu_DrawInputMenu+0x34c>)
 800415a:	f00c fbc9 	bl	80108f0 <ILI9341_Draw_Text>
	}

	//
	// LFO/COMPVOLT MODE DISPLAY
	//
	if(IT_GetActiveTriggerMode() == INPUT_TIMER_TIM)
 800415e:	f002 faa9 	bl	80066b4 <IT_GetActiveTriggerMode>
 8004162:	4603      	mov	r3, r0
 8004164:	2b00      	cmp	r3, #0
 8004166:	d141      	bne.n	80041ec <ToplevelMenu_DrawInputMenu+0x22c>
	{
		ILI9341_Draw_Text("LF MODE:", 	10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8004168:	2300      	movs	r3, #0
 800416a:	9301      	str	r3, [sp, #4]
 800416c:	2302      	movs	r3, #2
 800416e:	9300      	str	r3, [sp, #0]
 8004170:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8004174:	225a      	movs	r2, #90	; 0x5a
 8004176:	210a      	movs	r1, #10
 8004178:	4865      	ldr	r0, [pc, #404]	; (8004310 <ToplevelMenu_DrawInputMenu+0x350>)
 800417a:	f00c fbb9 	bl	80108f0 <ILI9341_Draw_Text>
		if(INPUT_TIMER->PSC > 128)
 800417e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004184:	2b80      	cmp	r3, #128	; 0x80
 8004186:	d916      	bls.n	80041b6 <ToplevelMenu_DrawInputMenu+0x1f6>
		{
			ILI9341_Draw_Text("ON", 	150, 90,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8004188:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 800418c:	9301      	str	r3, [sp, #4]
 800418e:	2302      	movs	r3, #2
 8004190:	9300      	str	r3, [sp, #0]
 8004192:	2300      	movs	r3, #0
 8004194:	225a      	movs	r2, #90	; 0x5a
 8004196:	2196      	movs	r1, #150	; 0x96
 8004198:	4857      	ldr	r0, [pc, #348]	; (80042f8 <ToplevelMenu_DrawInputMenu+0x338>)
 800419a:	f00c fba9 	bl	80108f0 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("OFF", 	200, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800419e:	2300      	movs	r3, #0
 80041a0:	9301      	str	r3, [sp, #4]
 80041a2:	2302      	movs	r3, #2
 80041a4:	9300      	str	r3, [sp, #0]
 80041a6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80041aa:	225a      	movs	r2, #90	; 0x5a
 80041ac:	21c8      	movs	r1, #200	; 0xc8
 80041ae:	4853      	ldr	r0, [pc, #332]	; (80042fc <ToplevelMenu_DrawInputMenu+0x33c>)
 80041b0:	f00c fb9e 	bl	80108f0 <ILI9341_Draw_Text>
 80041b4:	e015      	b.n	80041e2 <ToplevelMenu_DrawInputMenu+0x222>
		}
		else
		{
			ILI9341_Draw_Text("ON", 	150, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80041b6:	2300      	movs	r3, #0
 80041b8:	9301      	str	r3, [sp, #4]
 80041ba:	2302      	movs	r3, #2
 80041bc:	9300      	str	r3, [sp, #0]
 80041be:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80041c2:	225a      	movs	r2, #90	; 0x5a
 80041c4:	2196      	movs	r1, #150	; 0x96
 80041c6:	484c      	ldr	r0, [pc, #304]	; (80042f8 <ToplevelMenu_DrawInputMenu+0x338>)
 80041c8:	f00c fb92 	bl	80108f0 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("OFF", 	200, 90,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80041cc:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80041d0:	9301      	str	r3, [sp, #4]
 80041d2:	2302      	movs	r3, #2
 80041d4:	9300      	str	r3, [sp, #0]
 80041d6:	2300      	movs	r3, #0
 80041d8:	225a      	movs	r2, #90	; 0x5a
 80041da:	21c8      	movs	r1, #200	; 0xc8
 80041dc:	4847      	ldr	r0, [pc, #284]	; (80042fc <ToplevelMenu_DrawInputMenu+0x33c>)
 80041de:	f00c fb87 	bl	80108f0 <ILI9341_Draw_Text>
		}

		DM_DisplayInputTriggerTimerHertz(200, 17);
 80041e2:	2111      	movs	r1, #17
 80041e4:	20c8      	movs	r0, #200	; 0xc8
 80041e6:	f7fc fedd 	bl	8000fa4 <DM_DisplayInputTriggerTimerHertz>
 80041ea:	e038      	b.n	800425e <ToplevelMenu_DrawInputMenu+0x29e>
	}
	else if(IT_GetActiveTriggerMode() == INPUT_TIMER_COMP)
 80041ec:	f002 fa62 	bl	80066b4 <IT_GetActiveTriggerMode>
 80041f0:	4603      	mov	r3, r0
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d128      	bne.n	8004248 <ToplevelMenu_DrawInputMenu+0x288>
	{
		char comp_text[20] = "";
 80041f6:	2300      	movs	r3, #0
 80041f8:	607b      	str	r3, [r7, #4]
 80041fa:	f107 0308 	add.w	r3, r7, #8
 80041fe:	2200      	movs	r2, #0
 8004200:	601a      	str	r2, [r3, #0]
 8004202:	605a      	str	r2, [r3, #4]
 8004204:	609a      	str	r2, [r3, #8]
 8004206:	60da      	str	r2, [r3, #12]
		snprintf(comp_text, sizeof(comp_text), "%lu V", HAL_COMP_GetOutputLevel(&hcomp1));
 8004208:	4842      	ldr	r0, [pc, #264]	; (8004314 <ToplevelMenu_DrawInputMenu+0x354>)
 800420a:	f006 fecd 	bl	800afa8 <HAL_COMP_GetOutputLevel>
 800420e:	4603      	mov	r3, r0
 8004210:	1d38      	adds	r0, r7, #4
 8004212:	4a41      	ldr	r2, [pc, #260]	; (8004318 <ToplevelMenu_DrawInputMenu+0x358>)
 8004214:	2114      	movs	r1, #20
 8004216:	f00d ff27 	bl	8012068 <sniprintf>
		ILI9341_Draw_Text(comp_text, 150, 90,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 800421a:	1d38      	adds	r0, r7, #4
 800421c:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8004220:	9301      	str	r3, [sp, #4]
 8004222:	2302      	movs	r3, #2
 8004224:	9300      	str	r3, [sp, #0]
 8004226:	2300      	movs	r3, #0
 8004228:	225a      	movs	r2, #90	; 0x5a
 800422a:	2196      	movs	r1, #150	; 0x96
 800422c:	f00c fb60 	bl	80108f0 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("                ", 	200, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8004230:	2300      	movs	r3, #0
 8004232:	9301      	str	r3, [sp, #4]
 8004234:	2302      	movs	r3, #2
 8004236:	9300      	str	r3, [sp, #0]
 8004238:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800423c:	225a      	movs	r2, #90	; 0x5a
 800423e:	21c8      	movs	r1, #200	; 0xc8
 8004240:	4836      	ldr	r0, [pc, #216]	; (800431c <ToplevelMenu_DrawInputMenu+0x35c>)
 8004242:	f00c fb55 	bl	80108f0 <ILI9341_Draw_Text>
 8004246:	e00a      	b.n	800425e <ToplevelMenu_DrawInputMenu+0x29e>
	}
	else
	{
		ILI9341_Draw_Text("                                    ", 	10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8004248:	2300      	movs	r3, #0
 800424a:	9301      	str	r3, [sp, #4]
 800424c:	2302      	movs	r3, #2
 800424e:	9300      	str	r3, [sp, #0]
 8004250:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8004254:	225a      	movs	r2, #90	; 0x5a
 8004256:	210a      	movs	r1, #10
 8004258:	4831      	ldr	r0, [pc, #196]	; (8004320 <ToplevelMenu_DrawInputMenu+0x360>)
 800425a:	f00c fb49 	bl	80108f0 <ILI9341_Draw_Text>
	}

	//
	// MENU BUTTON DISPLAY
	//
	ILI9341_Draw_Text("ON/", 	20, 	204, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 800425e:	f240 23fd 	movw	r3, #765	; 0x2fd
 8004262:	9301      	str	r3, [sp, #4]
 8004264:	2302      	movs	r3, #2
 8004266:	9300      	str	r3, [sp, #0]
 8004268:	2300      	movs	r3, #0
 800426a:	22cc      	movs	r2, #204	; 0xcc
 800426c:	2114      	movs	r1, #20
 800426e:	482d      	ldr	r0, [pc, #180]	; (8004324 <ToplevelMenu_DrawInputMenu+0x364>)
 8004270:	f00c fb3e 	bl	80108f0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("OFF ",	20, 	222, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8004274:	f240 23fd 	movw	r3, #765	; 0x2fd
 8004278:	9301      	str	r3, [sp, #4]
 800427a:	2302      	movs	r3, #2
 800427c:	9300      	str	r3, [sp, #0]
 800427e:	2300      	movs	r3, #0
 8004280:	22de      	movs	r2, #222	; 0xde
 8004282:	2114      	movs	r1, #20
 8004284:	4828      	ldr	r0, [pc, #160]	; (8004328 <ToplevelMenu_DrawInputMenu+0x368>)
 8004286:	f00c fb33 	bl	80108f0 <ILI9341_Draw_Text>

	ILI9341_Draw_Text("SET", 	104,	204, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 800428a:	f241 43a2 	movw	r3, #5282	; 0x14a2
 800428e:	9301      	str	r3, [sp, #4]
 8004290:	2302      	movs	r3, #2
 8004292:	9300      	str	r3, [sp, #0]
 8004294:	2300      	movs	r3, #0
 8004296:	22cc      	movs	r2, #204	; 0xcc
 8004298:	2168      	movs	r1, #104	; 0x68
 800429a:	4824      	ldr	r0, [pc, #144]	; (800432c <ToplevelMenu_DrawInputMenu+0x36c>)
 800429c:	f00c fb28 	bl	80108f0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("MODE",	97, 	222, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 80042a0:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80042a4:	9301      	str	r3, [sp, #4]
 80042a6:	2302      	movs	r3, #2
 80042a8:	9300      	str	r3, [sp, #0]
 80042aa:	2300      	movs	r3, #0
 80042ac:	22de      	movs	r2, #222	; 0xde
 80042ae:	2161      	movs	r1, #97	; 0x61
 80042b0:	481f      	ldr	r0, [pc, #124]	; (8004330 <ToplevelMenu_DrawInputMenu+0x370>)
 80042b2:	f00c fb1d 	bl	80108f0 <ILI9341_Draw_Text>

	if(IT_GetActiveTriggerMode() == INPUT_TIMER_TIM)
 80042b6:	f002 f9fd 	bl	80066b4 <IT_GetActiveTriggerMode>
 80042ba:	4603      	mov	r3, r0
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d13b      	bne.n	8004338 <ToplevelMenu_DrawInputMenu+0x378>
	{
		// draw additional "LFO Mode" menu option
		ILI9341_Draw_Text("LF", 	190,	204, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80042c0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80042c4:	9301      	str	r3, [sp, #4]
 80042c6:	2302      	movs	r3, #2
 80042c8:	9300      	str	r3, [sp, #0]
 80042ca:	2300      	movs	r3, #0
 80042cc:	22cc      	movs	r2, #204	; 0xcc
 80042ce:	21be      	movs	r1, #190	; 0xbe
 80042d0:	4818      	ldr	r0, [pc, #96]	; (8004334 <ToplevelMenu_DrawInputMenu+0x374>)
 80042d2:	f00c fb0d 	bl	80108f0 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("MODE",	175, 	222, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80042d6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80042da:	9301      	str	r3, [sp, #4]
 80042dc:	2302      	movs	r3, #2
 80042de:	9300      	str	r3, [sp, #0]
 80042e0:	2300      	movs	r3, #0
 80042e2:	22de      	movs	r2, #222	; 0xde
 80042e4:	21af      	movs	r1, #175	; 0xaf
 80042e6:	4812      	ldr	r0, [pc, #72]	; (8004330 <ToplevelMenu_DrawInputMenu+0x370>)
 80042e8:	f00c fb02 	bl	80108f0 <ILI9341_Draw_Text>

/*
	ILI9341_Draw_Text("SET", 	263, 	204, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
	ILI9341_Draw_Text("LIMIT", 	252, 	222, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
*/
}
 80042ec:	e03a      	b.n	8004364 <ToplevelMenu_DrawInputMenu+0x3a4>
 80042ee:	bf00      	nop
 80042f0:	08015c50 	.word	0x08015c50
 80042f4:	08015c58 	.word	0x08015c58
 80042f8:	08015c64 	.word	0x08015c64
 80042fc:	08015c68 	.word	0x08015c68
 8004300:	08015c6c 	.word	0x08015c6c
 8004304:	08015c74 	.word	0x08015c74
 8004308:	08015c78 	.word	0x08015c78
 800430c:	08015c80 	.word	0x08015c80
 8004310:	08015c84 	.word	0x08015c84
 8004314:	200028f4 	.word	0x200028f4
 8004318:	08015c90 	.word	0x08015c90
 800431c:	08015c98 	.word	0x08015c98
 8004320:	08015cac 	.word	0x08015cac
 8004324:	08015cd4 	.word	0x08015cd4
 8004328:	08015cd8 	.word	0x08015cd8
 800432c:	08015ce0 	.word	0x08015ce0
 8004330:	08015ce4 	.word	0x08015ce4
 8004334:	08015cec 	.word	0x08015cec
		ILI9341_Draw_Text("   ", 	183,	204, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8004338:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800433c:	9301      	str	r3, [sp, #4]
 800433e:	2302      	movs	r3, #2
 8004340:	9300      	str	r3, [sp, #0]
 8004342:	2300      	movs	r3, #0
 8004344:	22cc      	movs	r2, #204	; 0xcc
 8004346:	21b7      	movs	r1, #183	; 0xb7
 8004348:	4808      	ldr	r0, [pc, #32]	; (800436c <ToplevelMenu_DrawInputMenu+0x3ac>)
 800434a:	f00c fad1 	bl	80108f0 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("    ",	173, 	222, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 800434e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004352:	9301      	str	r3, [sp, #4]
 8004354:	2302      	movs	r3, #2
 8004356:	9300      	str	r3, [sp, #0]
 8004358:	2300      	movs	r3, #0
 800435a:	22de      	movs	r2, #222	; 0xde
 800435c:	21ad      	movs	r1, #173	; 0xad
 800435e:	4804      	ldr	r0, [pc, #16]	; (8004370 <ToplevelMenu_DrawInputMenu+0x3b0>)
 8004360:	f00c fac6 	bl	80108f0 <ILI9341_Draw_Text>
}
 8004364:	bf00      	nop
 8004366:	3718      	adds	r7, #24
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}
 800436c:	08015cf0 	.word	0x08015cf0
 8004370:	08015c20 	.word	0x08015c20

08004374 <BiasMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuEntryHandler()
{
 8004374:	b580      	push	{r7, lr}
 8004376:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("BiasMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004378:	f7fd fa54 	bl	8001824 <DM_RefreshScreen>

	//_setBiasMenuStatus(ENABLE_BIAS_MENU);

	ENCODER_TIMER->ARR = BIAS_MAX;
 800437c:	4b07      	ldr	r3, [pc, #28]	; (800439c <BiasMenuEntryHandler+0x28>)
 800437e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8004382:	62da      	str	r2, [r3, #44]	; 0x2c
	ENCODER_TIMER->CNT = BO_GetDcBiasEncoderValue();
 8004384:	f001 f8f2 	bl	800556c <BO_GetDcBiasEncoderValue>
 8004388:	4603      	mov	r3, r0
 800438a:	461a      	mov	r2, r3
 800438c:	4b03      	ldr	r3, [pc, #12]	; (800439c <BiasMenuEntryHandler+0x28>)
 800438e:	625a      	str	r2, [r3, #36]	; 0x24

	eNewEvent = evIdle;
 8004390:	4b03      	ldr	r3, [pc, #12]	; (80043a0 <BiasMenuEntryHandler+0x2c>)
 8004392:	2200      	movs	r2, #0
 8004394:	701a      	strb	r2, [r3, #0]
	return Bias_Menu_State;
 8004396:	230f      	movs	r3, #15
}
 8004398:	4618      	mov	r0, r3
 800439a:	bd80      	pop	{r7, pc}
 800439c:	40012c00 	.word	0x40012c00
 80043a0:	200020d2 	.word	0x200020d2

080043a4 <BiasMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuInputHandler(eSystemEvent pEvent)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b082      	sub	sp, #8
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	4603      	mov	r3, r0
 80043ac:	71fb      	strb	r3, [r7, #7]
	#ifdef EVENT_MENU_DEBUG
		printf("BiasMenuInputHandler Event captured\n");
	#endif


	switch(pEvent)
 80043ae:	79fb      	ldrb	r3, [r7, #7]
 80043b0:	3b01      	subs	r3, #1
 80043b2:	2b04      	cmp	r3, #4
 80043b4:	d82d      	bhi.n	8004412 <BiasMenuInputHandler+0x6e>
 80043b6:	a201      	add	r2, pc, #4	; (adr r2, 80043bc <BiasMenuInputHandler+0x18>)
 80043b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043bc:	080043e1 	.word	0x080043e1
 80043c0:	080043f3 	.word	0x080043f3
 80043c4:	08004401 	.word	0x08004401
 80043c8:	08004413 	.word	0x08004413
 80043cc:	080043d1 	.word	0x080043d1
	{
		case evEncoderSet:
			BO_MapEncoderPositionToSignalOutput(SM_GetEncoderValue(ENCODER_NORMAL));
 80043d0:	2000      	movs	r0, #0
 80043d2:	f002 fd37 	bl	8006e44 <SM_GetEncoderValue>
 80043d6:	4603      	mov	r3, r0
 80043d8:	4618      	mov	r0, r3
 80043da:	f001 f8d3 	bl	8005584 <BO_MapEncoderPositionToSignalOutput>
			break;
 80043de:	e019      	b.n	8004414 <BiasMenuInputHandler+0x70>
		case evBlueBtn:
			BO_MapEncoderPositionToSignalOutput(BIAS_MAX);
 80043e0:	f44f 7048 	mov.w	r0, #800	; 0x320
 80043e4:	f001 f8ce 	bl	8005584 <BO_MapEncoderPositionToSignalOutput>
			ENCODER_TIMER->CNT = BIAS_MAX;
 80043e8:	4b0e      	ldr	r3, [pc, #56]	; (8004424 <BiasMenuInputHandler+0x80>)
 80043ea:	f44f 7248 	mov.w	r2, #800	; 0x320
 80043ee:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 80043f0:	e010      	b.n	8004414 <BiasMenuInputHandler+0x70>
		case evGreenBtn:
			BO_MapEncoderPositionToSignalOutput(10);
 80043f2:	200a      	movs	r0, #10
 80043f4:	f001 f8c6 	bl	8005584 <BO_MapEncoderPositionToSignalOutput>
			ENCODER_TIMER->CNT = 10;
 80043f8:	4b0a      	ldr	r3, [pc, #40]	; (8004424 <BiasMenuInputHandler+0x80>)
 80043fa:	220a      	movs	r2, #10
 80043fc:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 80043fe:	e009      	b.n	8004414 <BiasMenuInputHandler+0x70>
		case evYellowBtn:
			// jump to zero crossing point
			BO_MapEncoderPositionToSignalOutput(BIAS_CENTER);
 8004400:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8004404:	f001 f8be 	bl	8005584 <BO_MapEncoderPositionToSignalOutput>
			ENCODER_TIMER->CNT = BIAS_CENTER;
 8004408:	4b06      	ldr	r3, [pc, #24]	; (8004424 <BiasMenuInputHandler+0x80>)
 800440a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800440e:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 8004410:	e000      	b.n	8004414 <BiasMenuInputHandler+0x70>

		default:
			break;
 8004412:	bf00      	nop
	}


	eNewEvent = evIdle;
 8004414:	4b04      	ldr	r3, [pc, #16]	; (8004428 <BiasMenuInputHandler+0x84>)
 8004416:	2200      	movs	r2, #0
 8004418:	701a      	strb	r2, [r3, #0]
	return Bias_Menu_State;
 800441a:	230f      	movs	r3, #15
}
 800441c:	4618      	mov	r0, r3
 800441e:	3708      	adds	r7, #8
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}
 8004424:	40012c00 	.word	0x40012c00
 8004428:	200020d2 	.word	0x200020d2

0800442c <BiasMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuExitHandler()
{
 800442c:	b580      	push	{r7, lr}
 800442e:	af00      	add	r7, sp, #0
	#endif

	// disable the menu
	//_setBiasMenuStatus(DISABLE_BIAS_MENU);

	DM_RefreshScreen();
 8004430:	f7fd f9f8 	bl	8001824 <DM_RefreshScreen>

	#ifdef EVENT_MENU_DEBUG
		  printf("returning to Idle State\n");
	#endif

	eNewEvent = evIdle;
 8004434:	4b02      	ldr	r3, [pc, #8]	; (8004440 <BiasMenuExitHandler+0x14>)
 8004436:	2200      	movs	r2, #0
 8004438:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 800443a:	2301      	movs	r3, #1
}
 800443c:	4618      	mov	r0, r3
 800443e:	bd80      	pop	{r7, pc}
 8004440:	200020d2 	.word	0x200020d2

08004444 <EM_ProcessEvent>:
 *	@param None
 *	@retval None
 *
 */
void EM_ProcessEvent()
{
 8004444:	b580      	push	{r7, lr}
 8004446:	af00      	add	r7, sp, #0

	switch(eNextState)
 8004448:	4b2b      	ldr	r3, [pc, #172]	; (80044f8 <EM_ProcessEvent+0xb4>)
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	2b0f      	cmp	r3, #15
 800444e:	d850      	bhi.n	80044f2 <EM_ProcessEvent+0xae>
 8004450:	a201      	add	r2, pc, #4	; (adr r2, 8004458 <EM_ProcessEvent+0x14>)
 8004452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004456:	bf00      	nop
 8004458:	08004499 	.word	0x08004499
 800445c:	0800449f 	.word	0x0800449f
 8004460:	080044a5 	.word	0x080044a5
 8004464:	080044ab 	.word	0x080044ab
 8004468:	080044b1 	.word	0x080044b1
 800446c:	080044b7 	.word	0x080044b7
 8004470:	080044bd 	.word	0x080044bd
 8004474:	080044c3 	.word	0x080044c3
 8004478:	080044c9 	.word	0x080044c9
 800447c:	080044f3 	.word	0x080044f3
 8004480:	080044cf 	.word	0x080044cf
 8004484:	080044d5 	.word	0x080044d5
 8004488:	080044db 	.word	0x080044db
 800448c:	080044e7 	.word	0x080044e7
 8004490:	080044e1 	.word	0x080044e1
 8004494:	080044ed 	.word	0x080044ed
	{

// MAIN MENU
		case Idle_State:

			_ProcessIdleStateEvents();
 8004498:	f000 f830 	bl	80044fc <_ProcessIdleStateEvents>
			break;
 800449c:	e02a      	b.n	80044f4 <EM_ProcessEvent+0xb0>

		case Toplevel_Output_Menu_State:

			_ProcessTopLevelOutputMenuStateEvents();
 800449e:	f000 f849 	bl	8004534 <_ProcessTopLevelOutputMenuStateEvents>
			break;
 80044a2:	e027      	b.n	80044f4 <EM_ProcessEvent+0xb0>

		case Toplevel_Input_Menu_State:

			_ProcessTopLevelInputMenuStateEvents();
 80044a4:	f000 f880 	bl	80045a8 <_ProcessTopLevelInputMenuStateEvents>
			break;
 80044a8:	e024      	b.n	80044f4 <EM_ProcessEvent+0xb0>

// FUNC MENUS

		case Func_Main_Menu_State:

			_ProcessFuncMainMenuStateEvents();
 80044aa:	f000 f8a9 	bl	8004600 <_ProcessFuncMainMenuStateEvents>
			break;
 80044ae:	e021      	b.n	80044f4 <EM_ProcessEvent+0xb0>

		case Func_Signal_Menu_State:

			_ProcessFuncSignalMenuStateEvents();
 80044b0:	f000 f8cc 	bl	800464c <_ProcessFuncSignalMenuStateEvents>
			break;
 80044b4:	e01e      	b.n	80044f4 <EM_ProcessEvent+0xb0>

		case Func_Aux_Menu_State:

			_ProcessFuncAuxMenuStateEvents();
 80044b6:	f000 f8e5 	bl	8004684 <_ProcessFuncAuxMenuStateEvents>
			break;
 80044ba:	e01b      	b.n	80044f4 <EM_ProcessEvent+0xb0>

// GAIN MENUS

		case Gain_Main_Menu_State:

			_ProcessGainMainMenuStateEvents();
 80044bc:	f000 f908 	bl	80046d0 <_ProcessGainMainMenuStateEvents>
			break;
 80044c0:	e018      	b.n	80044f4 <EM_ProcessEvent+0xb0>

		case Gain_Signal_Menu_State:

			_ProcessGainSignalMenuStateEvents();
 80044c2:	f000 f939 	bl	8004738 <_ProcessGainSignalMenuStateEvents>
			break;
 80044c6:	e015      	b.n	80044f4 <EM_ProcessEvent+0xb0>

		case Gain_Aux_Menu_State:

			_ProcessGainAuxMenuStateEvents();
 80044c8:	f000 f980 	bl	80047cc <_ProcessGainAuxMenuStateEvents>
			break;
 80044cc:	e012      	b.n	80044f4 <EM_ProcessEvent+0xb0>

// FREQ MENUS

		case Freq_Main_Menu_State:

			_ProcessFreqMainMenuStateEvents();
 80044ce:	f000 f999 	bl	8004804 <_ProcessFreqMainMenuStateEvents>
			break;
 80044d2:	e00f      	b.n	80044f4 <EM_ProcessEvent+0xb0>

		case Freq_Preset_Menu_State:

			_ProcessFreqPresetMenuStateEvents();
 80044d4:	f000 f9d0 	bl	8004878 <_ProcessFreqPresetMenuStateEvents>
			break;
 80044d8:	e00c      	b.n	80044f4 <EM_ProcessEvent+0xb0>

		case Freq_Adjust_Menu_State:

			_ProcessFreqAdjustMenuState();
 80044da:	f000 f9e9 	bl	80048b0 <_ProcessFreqAdjustMenuState>
			break;
 80044de:	e009      	b.n	80044f4 <EM_ProcessEvent+0xb0>

		case Freq_Prescaler_Menu_State:

			_ProcessFreqPrescalerMenuStateEvents();
 80044e0:	f000 fa02 	bl	80048e8 <_ProcessFreqPrescalerMenuStateEvents>
			break;
 80044e4:	e006      	b.n	80044f4 <EM_ProcessEvent+0xb0>


		case Freq_Sweep_Menu_State:

			_ProcessFreqSweepMenuStateEvents();
 80044e6:	f000 fa1b 	bl	8004920 <_ProcessFreqSweepMenuStateEvents>
			break;
 80044ea:	e003      	b.n	80044f4 <EM_ProcessEvent+0xb0>

// BIAS MENUS

		case Bias_Menu_State:

			_ProcessBiasMainMenuEvents();
 80044ec:	f000 fa62 	bl	80049b4 <_ProcessBiasMainMenuEvents>
			break;
 80044f0:	e000      	b.n	80044f4 <EM_ProcessEvent+0xb0>

		default:
			break;
 80044f2:	bf00      	nop
	}

}
 80044f4:	bf00      	nop
 80044f6:	bd80      	pop	{r7, pc}
 80044f8:	200020d1 	.word	0x200020d1

080044fc <_ProcessIdleStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessIdleStateEvents()
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
	  printf("Idle_State\n");
	#endif

	if(eNewEvent == evBlueBtn)
 8004500:	4b0a      	ldr	r3, [pc, #40]	; (800452c <_ProcessIdleStateEvents+0x30>)
 8004502:	781b      	ldrb	r3, [r3, #0]
 8004504:	2b01      	cmp	r3, #1
 8004506:	d105      	bne.n	8004514 <_ProcessIdleStateEvents+0x18>
	{
		eNextState = ToplevelOutputMenuEntryHandler();
 8004508:	f000 fe64 	bl	80051d4 <ToplevelOutputMenuEntryHandler>
 800450c:	4603      	mov	r3, r0
 800450e:	461a      	mov	r2, r3
 8004510:	4b07      	ldr	r3, [pc, #28]	; (8004530 <_ProcessIdleStateEvents+0x34>)
 8004512:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evGreenBtn)
 8004514:	4b05      	ldr	r3, [pc, #20]	; (800452c <_ProcessIdleStateEvents+0x30>)
 8004516:	781b      	ldrb	r3, [r3, #0]
 8004518:	2b02      	cmp	r3, #2
 800451a:	d105      	bne.n	8004528 <_ProcessIdleStateEvents+0x2c>
	{
		eNextState = ToplevelInputMenuEntryHandler();
 800451c:	f000 fe72 	bl	8005204 <ToplevelInputMenuEntryHandler>
 8004520:	4603      	mov	r3, r0
 8004522:	461a      	mov	r2, r3
 8004524:	4b02      	ldr	r3, [pc, #8]	; (8004530 <_ProcessIdleStateEvents+0x34>)
 8004526:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evRedBtn)
	{
		// no menu action
	}
}
 8004528:	bf00      	nop
 800452a:	bd80      	pop	{r7, pc}
 800452c:	200020d2 	.word	0x200020d2
 8004530:	200020d1 	.word	0x200020d1

08004534 <_ProcessTopLevelOutputMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessTopLevelOutputMenuStateEvents()
{
 8004534:	b580      	push	{r7, lr}
 8004536:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
	  printf("Toplevel_Output_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderPush)
 8004538:	4b19      	ldr	r3, [pc, #100]	; (80045a0 <_ProcessTopLevelOutputMenuStateEvents+0x6c>)
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	2b06      	cmp	r3, #6
 800453e:	d105      	bne.n	800454c <_ProcessTopLevelOutputMenuStateEvents+0x18>
	{
		eNextState = ToplevelOutputMenuExitHandler();
 8004540:	f000 fe54 	bl	80051ec <ToplevelOutputMenuExitHandler>
 8004544:	4603      	mov	r3, r0
 8004546:	461a      	mov	r2, r3
 8004548:	4b16      	ldr	r3, [pc, #88]	; (80045a4 <_ProcessTopLevelOutputMenuStateEvents+0x70>)
 800454a:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evBlueBtn)
 800454c:	4b14      	ldr	r3, [pc, #80]	; (80045a0 <_ProcessTopLevelOutputMenuStateEvents+0x6c>)
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	2b01      	cmp	r3, #1
 8004552:	d105      	bne.n	8004560 <_ProcessTopLevelOutputMenuStateEvents+0x2c>
	{
		//ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
		eNextState = FuncMainMenuEntryHandler();
 8004554:	f000 fc8c 	bl	8004e70 <FuncMainMenuEntryHandler>
 8004558:	4603      	mov	r3, r0
 800455a:	461a      	mov	r2, r3
 800455c:	4b11      	ldr	r3, [pc, #68]	; (80045a4 <_ProcessTopLevelOutputMenuStateEvents+0x70>)
 800455e:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evGreenBtn)
 8004560:	4b0f      	ldr	r3, [pc, #60]	; (80045a0 <_ProcessTopLevelOutputMenuStateEvents+0x6c>)
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	2b02      	cmp	r3, #2
 8004566:	d105      	bne.n	8004574 <_ProcessTopLevelOutputMenuStateEvents+0x40>
	{
		//ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
		eNextState = FreqMainMenuEntryHandler();
 8004568:	f000 fbc0 	bl	8004cec <FreqMainMenuEntryHandler>
 800456c:	4603      	mov	r3, r0
 800456e:	461a      	mov	r2, r3
 8004570:	4b0c      	ldr	r3, [pc, #48]	; (80045a4 <_ProcessTopLevelOutputMenuStateEvents+0x70>)
 8004572:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evYellowBtn)
 8004574:	4b0a      	ldr	r3, [pc, #40]	; (80045a0 <_ProcessTopLevelOutputMenuStateEvents+0x6c>)
 8004576:	781b      	ldrb	r3, [r3, #0]
 8004578:	2b03      	cmp	r3, #3
 800457a:	d105      	bne.n	8004588 <_ProcessTopLevelOutputMenuStateEvents+0x54>
	{
		//ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
		eNextState = GainMainMenuEntryHandler();
 800457c:	f000 fd3c 	bl	8004ff8 <GainMainMenuEntryHandler>
 8004580:	4603      	mov	r3, r0
 8004582:	461a      	mov	r2, r3
 8004584:	4b07      	ldr	r3, [pc, #28]	; (80045a4 <_ProcessTopLevelOutputMenuStateEvents+0x70>)
 8004586:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evRedBtn)
 8004588:	4b05      	ldr	r3, [pc, #20]	; (80045a0 <_ProcessTopLevelOutputMenuStateEvents+0x6c>)
 800458a:	781b      	ldrb	r3, [r3, #0]
 800458c:	2b04      	cmp	r3, #4
 800458e:	d105      	bne.n	800459c <_ProcessTopLevelOutputMenuStateEvents+0x68>
	{
		//ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
		eNextState = BiasMenuEntryHandler();
 8004590:	f7ff fef0 	bl	8004374 <BiasMenuEntryHandler>
 8004594:	4603      	mov	r3, r0
 8004596:	461a      	mov	r2, r3
 8004598:	4b02      	ldr	r3, [pc, #8]	; (80045a4 <_ProcessTopLevelOutputMenuStateEvents+0x70>)
 800459a:	701a      	strb	r2, [r3, #0]
	}
}
 800459c:	bf00      	nop
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	200020d2 	.word	0x200020d2
 80045a4:	200020d1 	.word	0x200020d1

080045a8 <_ProcessTopLevelInputMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessTopLevelInputMenuStateEvents()
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
	  printf("Toplevel_Input_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderPush)
 80045ac:	4b12      	ldr	r3, [pc, #72]	; (80045f8 <_ProcessTopLevelInputMenuStateEvents+0x50>)
 80045ae:	781b      	ldrb	r3, [r3, #0]
 80045b0:	2b06      	cmp	r3, #6
 80045b2:	d105      	bne.n	80045c0 <_ProcessTopLevelInputMenuStateEvents+0x18>
	{
		eNextState = ToplevelInputMenuExitHandler();
 80045b4:	f000 fe54 	bl	8005260 <ToplevelInputMenuExitHandler>
 80045b8:	4603      	mov	r3, r0
 80045ba:	461a      	mov	r2, r3
 80045bc:	4b0f      	ldr	r3, [pc, #60]	; (80045fc <_ProcessTopLevelInputMenuStateEvents+0x54>)
 80045be:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evBlueBtn)
 80045c0:	4b0d      	ldr	r3, [pc, #52]	; (80045f8 <_ProcessTopLevelInputMenuStateEvents+0x50>)
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d108      	bne.n	80045da <_ProcessTopLevelInputMenuStateEvents+0x32>
	{
		eNextState = ToplevelInputMenuInputHandler(eNewEvent);
 80045c8:	4b0b      	ldr	r3, [pc, #44]	; (80045f8 <_ProcessTopLevelInputMenuStateEvents+0x50>)
 80045ca:	781b      	ldrb	r3, [r3, #0]
 80045cc:	4618      	mov	r0, r3
 80045ce:	f000 fe25 	bl	800521c <ToplevelInputMenuInputHandler>
 80045d2:	4603      	mov	r3, r0
 80045d4:	461a      	mov	r2, r3
 80045d6:	4b09      	ldr	r3, [pc, #36]	; (80045fc <_ProcessTopLevelInputMenuStateEvents+0x54>)
 80045d8:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evGreenBtn)
 80045da:	4b07      	ldr	r3, [pc, #28]	; (80045f8 <_ProcessTopLevelInputMenuStateEvents+0x50>)
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	2b02      	cmp	r3, #2
 80045e0:	d108      	bne.n	80045f4 <_ProcessTopLevelInputMenuStateEvents+0x4c>
	{

		eNextState = ToplevelInputMenuInputHandler(eNewEvent);
 80045e2:	4b05      	ldr	r3, [pc, #20]	; (80045f8 <_ProcessTopLevelInputMenuStateEvents+0x50>)
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	4618      	mov	r0, r3
 80045e8:	f000 fe18 	bl	800521c <ToplevelInputMenuInputHandler>
 80045ec:	4603      	mov	r3, r0
 80045ee:	461a      	mov	r2, r3
 80045f0:	4b02      	ldr	r3, [pc, #8]	; (80045fc <_ProcessTopLevelInputMenuStateEvents+0x54>)
 80045f2:	701a      	strb	r2, [r3, #0]
	}
}
 80045f4:	bf00      	nop
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	200020d2 	.word	0x200020d2
 80045fc:	200020d1 	.word	0x200020d1

08004600 <_ProcessFuncMainMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessFuncMainMenuStateEvents()
{
 8004600:	b580      	push	{r7, lr}
 8004602:	af00      	add	r7, sp, #0

	if(eNewEvent == evEncoderSet)
	{
		// No menu action
	}
	if(eNewEvent == evEncoderPush)
 8004604:	4b0f      	ldr	r3, [pc, #60]	; (8004644 <_ProcessFuncMainMenuStateEvents+0x44>)
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	2b06      	cmp	r3, #6
 800460a:	d105      	bne.n	8004618 <_ProcessFuncMainMenuStateEvents+0x18>
	{
		eNextState = FuncMainMenuExitHandler();
 800460c:	f000 fc3c 	bl	8004e88 <FuncMainMenuExitHandler>
 8004610:	4603      	mov	r3, r0
 8004612:	461a      	mov	r2, r3
 8004614:	4b0c      	ldr	r3, [pc, #48]	; (8004648 <_ProcessFuncMainMenuStateEvents+0x48>)
 8004616:	701a      	strb	r2, [r3, #0]

	}
	if(eNewEvent == evBlueBtn)
 8004618:	4b0a      	ldr	r3, [pc, #40]	; (8004644 <_ProcessFuncMainMenuStateEvents+0x44>)
 800461a:	781b      	ldrb	r3, [r3, #0]
 800461c:	2b01      	cmp	r3, #1
 800461e:	d105      	bne.n	800462c <_ProcessFuncMainMenuStateEvents+0x2c>
	{
		eNextState = FuncSignalMenuEntryHandler();
 8004620:	f000 fc3e 	bl	8004ea0 <FuncSignalMenuEntryHandler>
 8004624:	4603      	mov	r3, r0
 8004626:	461a      	mov	r2, r3
 8004628:	4b07      	ldr	r3, [pc, #28]	; (8004648 <_ProcessFuncMainMenuStateEvents+0x48>)
 800462a:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evGreenBtn)
 800462c:	4b05      	ldr	r3, [pc, #20]	; (8004644 <_ProcessFuncMainMenuStateEvents+0x44>)
 800462e:	781b      	ldrb	r3, [r3, #0]
 8004630:	2b02      	cmp	r3, #2
 8004632:	d105      	bne.n	8004640 <_ProcessFuncMainMenuStateEvents+0x40>
	{
		eNextState = FuncAuxMenuEntryHandler();
 8004634:	f000 fc6c 	bl	8004f10 <FuncAuxMenuEntryHandler>
 8004638:	4603      	mov	r3, r0
 800463a:	461a      	mov	r2, r3
 800463c:	4b02      	ldr	r3, [pc, #8]	; (8004648 <_ProcessFuncMainMenuStateEvents+0x48>)
 800463e:	701a      	strb	r2, [r3, #0]
	}
}
 8004640:	bf00      	nop
 8004642:	bd80      	pop	{r7, pc}
 8004644:	200020d2 	.word	0x200020d2
 8004648:	200020d1 	.word	0x200020d1

0800464c <_ProcessFuncSignalMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessFuncSignalMenuStateEvents()
{
 800464c:	b580      	push	{r7, lr}
 800464e:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Func_Signal_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderSet)
 8004650:	4b0a      	ldr	r3, [pc, #40]	; (800467c <_ProcessFuncSignalMenuStateEvents+0x30>)
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	2b05      	cmp	r3, #5
 8004656:	d105      	bne.n	8004664 <_ProcessFuncSignalMenuStateEvents+0x18>
	{
		eNextState = FuncSignalMenuInputHandler();
 8004658:	f000 fc3a 	bl	8004ed0 <FuncSignalMenuInputHandler>
 800465c:	4603      	mov	r3, r0
 800465e:	461a      	mov	r2, r3
 8004660:	4b07      	ldr	r3, [pc, #28]	; (8004680 <_ProcessFuncSignalMenuStateEvents+0x34>)
 8004662:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderPush)
 8004664:	4b05      	ldr	r3, [pc, #20]	; (800467c <_ProcessFuncSignalMenuStateEvents+0x30>)
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	2b06      	cmp	r3, #6
 800466a:	d105      	bne.n	8004678 <_ProcessFuncSignalMenuStateEvents+0x2c>
	{
		eNextState = FuncSignalMenuExitHandler();
 800466c:	f000 fc42 	bl	8004ef4 <FuncSignalMenuExitHandler>
 8004670:	4603      	mov	r3, r0
 8004672:	461a      	mov	r2, r3
 8004674:	4b02      	ldr	r3, [pc, #8]	; (8004680 <_ProcessFuncSignalMenuStateEvents+0x34>)
 8004676:	701a      	strb	r2, [r3, #0]
	}
}
 8004678:	bf00      	nop
 800467a:	bd80      	pop	{r7, pc}
 800467c:	200020d2 	.word	0x200020d2
 8004680:	200020d1 	.word	0x200020d1

08004684 <_ProcessFuncAuxMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessFuncAuxMenuStateEvents()
{
 8004684:	b580      	push	{r7, lr}
 8004686:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Func_Aux_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderSet)
 8004688:	4b0f      	ldr	r3, [pc, #60]	; (80046c8 <_ProcessFuncAuxMenuStateEvents+0x44>)
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	2b05      	cmp	r3, #5
 800468e:	d105      	bne.n	800469c <_ProcessFuncAuxMenuStateEvents+0x18>
	{
		eNextState = FuncAuxMenuInputHandler();
 8004690:	f000 fc56 	bl	8004f40 <FuncAuxMenuInputHandler>
 8004694:	4603      	mov	r3, r0
 8004696:	461a      	mov	r2, r3
 8004698:	4b0c      	ldr	r3, [pc, #48]	; (80046cc <_ProcessFuncAuxMenuStateEvents+0x48>)
 800469a:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderPush)
 800469c:	4b0a      	ldr	r3, [pc, #40]	; (80046c8 <_ProcessFuncAuxMenuStateEvents+0x44>)
 800469e:	781b      	ldrb	r3, [r3, #0]
 80046a0:	2b06      	cmp	r3, #6
 80046a2:	d105      	bne.n	80046b0 <_ProcessFuncAuxMenuStateEvents+0x2c>
	{
		eNextState = FuncAuxMenuExitHandler();
 80046a4:	f000 fc9a 	bl	8004fdc <FuncAuxMenuExitHandler>
 80046a8:	4603      	mov	r3, r0
 80046aa:	461a      	mov	r2, r3
 80046ac:	4b07      	ldr	r3, [pc, #28]	; (80046cc <_ProcessFuncAuxMenuStateEvents+0x48>)
 80046ae:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evYellowBtn)
 80046b0:	4b05      	ldr	r3, [pc, #20]	; (80046c8 <_ProcessFuncAuxMenuStateEvents+0x44>)
 80046b2:	781b      	ldrb	r3, [r3, #0]
 80046b4:	2b03      	cmp	r3, #3
 80046b6:	d105      	bne.n	80046c4 <_ProcessFuncAuxMenuStateEvents+0x40>
	{
		eNextState = FuncAuxToggleDutyMode();
 80046b8:	f000 fc7e 	bl	8004fb8 <FuncAuxToggleDutyMode>
 80046bc:	4603      	mov	r3, r0
 80046be:	461a      	mov	r2, r3
 80046c0:	4b02      	ldr	r3, [pc, #8]	; (80046cc <_ProcessFuncAuxMenuStateEvents+0x48>)
 80046c2:	701a      	strb	r2, [r3, #0]
	}

}
 80046c4:	bf00      	nop
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	200020d2 	.word	0x200020d2
 80046cc:	200020d1 	.word	0x200020d1

080046d0 <_ProcessGainMainMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessGainMainMenuStateEvents()
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b082      	sub	sp, #8
 80046d4:	af00      	add	r7, sp, #0
	#endif
	if(eNewEvent == evEncoderSet)
	{
		// No menu action
	}
	if(eNewEvent == evEncoderPush)
 80046d6:	4b16      	ldr	r3, [pc, #88]	; (8004730 <_ProcessGainMainMenuStateEvents+0x60>)
 80046d8:	781b      	ldrb	r3, [r3, #0]
 80046da:	2b06      	cmp	r3, #6
 80046dc:	d105      	bne.n	80046ea <_ProcessGainMainMenuStateEvents+0x1a>
	{
		eNextState = GainMainMenuExitHandler();
 80046de:	f000 fc97 	bl	8005010 <GainMainMenuExitHandler>
 80046e2:	4603      	mov	r3, r0
 80046e4:	461a      	mov	r2, r3
 80046e6:	4b13      	ldr	r3, [pc, #76]	; (8004734 <_ProcessGainMainMenuStateEvents+0x64>)
 80046e8:	701a      	strb	r2, [r3, #0]
		//ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
	}
	if(eNewEvent == evBlueBtn)
 80046ea:	4b11      	ldr	r3, [pc, #68]	; (8004730 <_ProcessGainMainMenuStateEvents+0x60>)
 80046ec:	781b      	ldrb	r3, [r3, #0]
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d105      	bne.n	80046fe <_ProcessGainMainMenuStateEvents+0x2e>
	{
		eNextState = GainSignalMenuEntryHandler();
 80046f2:	f000 fc99 	bl	8005028 <GainSignalMenuEntryHandler>
 80046f6:	4603      	mov	r3, r0
 80046f8:	461a      	mov	r2, r3
 80046fa:	4b0e      	ldr	r3, [pc, #56]	; (8004734 <_ProcessGainMainMenuStateEvents+0x64>)
 80046fc:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evGreenBtn)
 80046fe:	4b0c      	ldr	r3, [pc, #48]	; (8004730 <_ProcessGainMainMenuStateEvents+0x60>)
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	2b02      	cmp	r3, #2
 8004704:	d110      	bne.n	8004728 <_ProcessGainMainMenuStateEvents+0x58>
	{
		eOutput_mode aux_output_func = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 8004706:	2001      	movs	r0, #1
 8004708:	f002 f920 	bl	800694c <SM_GetOutputChannel>
 800470c:	4603      	mov	r3, r0
 800470e:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	71fb      	strb	r3, [r7, #7]
		if(aux_output_func != PWM_FUNC_MODE)
 8004716:	79fb      	ldrb	r3, [r7, #7]
 8004718:	2b06      	cmp	r3, #6
 800471a:	d005      	beq.n	8004728 <_ProcessGainMainMenuStateEvents+0x58>
			eNextState = GainAuxMenuEntryHandler();
 800471c:	f000 fd10 	bl	8005140 <GainAuxMenuEntryHandler>
 8004720:	4603      	mov	r3, r0
 8004722:	461a      	mov	r2, r3
 8004724:	4b03      	ldr	r3, [pc, #12]	; (8004734 <_ProcessGainMainMenuStateEvents+0x64>)
 8004726:	701a      	strb	r2, [r3, #0]
	}
}
 8004728:	bf00      	nop
 800472a:	3708      	adds	r7, #8
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}
 8004730:	200020d2 	.word	0x200020d2
 8004734:	200020d1 	.word	0x200020d1

08004738 <_ProcessGainSignalMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessGainSignalMenuStateEvents()
{
 8004738:	b580      	push	{r7, lr}
 800473a:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Gain_Signal_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderSet)
 800473c:	4b21      	ldr	r3, [pc, #132]	; (80047c4 <_ProcessGainSignalMenuStateEvents+0x8c>)
 800473e:	781b      	ldrb	r3, [r3, #0]
 8004740:	2b05      	cmp	r3, #5
 8004742:	d106      	bne.n	8004752 <_ProcessGainSignalMenuStateEvents+0x1a>
	{
		eNextState = GainSignalMenuInputHandler(evEncoderSet);
 8004744:	2005      	movs	r0, #5
 8004746:	f000 fc9d 	bl	8005084 <GainSignalMenuInputHandler>
 800474a:	4603      	mov	r3, r0
 800474c:	461a      	mov	r2, r3
 800474e:	4b1e      	ldr	r3, [pc, #120]	; (80047c8 <_ProcessGainSignalMenuStateEvents+0x90>)
 8004750:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderPush)
 8004752:	4b1c      	ldr	r3, [pc, #112]	; (80047c4 <_ProcessGainSignalMenuStateEvents+0x8c>)
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	2b06      	cmp	r3, #6
 8004758:	d105      	bne.n	8004766 <_ProcessGainSignalMenuStateEvents+0x2e>
	{
		eNextState = GainSignalMenuExitHandler();
 800475a:	f000 fce5 	bl	8005128 <GainSignalMenuExitHandler>
 800475e:	4603      	mov	r3, r0
 8004760:	461a      	mov	r2, r3
 8004762:	4b19      	ldr	r3, [pc, #100]	; (80047c8 <_ProcessGainSignalMenuStateEvents+0x90>)
 8004764:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evBlueBtn)
 8004766:	4b17      	ldr	r3, [pc, #92]	; (80047c4 <_ProcessGainSignalMenuStateEvents+0x8c>)
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	2b01      	cmp	r3, #1
 800476c:	d106      	bne.n	800477c <_ProcessGainSignalMenuStateEvents+0x44>
	{
		eNextState = GainSignalMenuInputHandler(evBlueBtn);
 800476e:	2001      	movs	r0, #1
 8004770:	f000 fc88 	bl	8005084 <GainSignalMenuInputHandler>
 8004774:	4603      	mov	r3, r0
 8004776:	461a      	mov	r2, r3
 8004778:	4b13      	ldr	r3, [pc, #76]	; (80047c8 <_ProcessGainSignalMenuStateEvents+0x90>)
 800477a:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evGreenBtn)
 800477c:	4b11      	ldr	r3, [pc, #68]	; (80047c4 <_ProcessGainSignalMenuStateEvents+0x8c>)
 800477e:	781b      	ldrb	r3, [r3, #0]
 8004780:	2b02      	cmp	r3, #2
 8004782:	d106      	bne.n	8004792 <_ProcessGainSignalMenuStateEvents+0x5a>
	{
		eNextState = GainSignalMenuInputHandler(evGreenBtn);
 8004784:	2002      	movs	r0, #2
 8004786:	f000 fc7d 	bl	8005084 <GainSignalMenuInputHandler>
 800478a:	4603      	mov	r3, r0
 800478c:	461a      	mov	r2, r3
 800478e:	4b0e      	ldr	r3, [pc, #56]	; (80047c8 <_ProcessGainSignalMenuStateEvents+0x90>)
 8004790:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evYellowBtn)
 8004792:	4b0c      	ldr	r3, [pc, #48]	; (80047c4 <_ProcessGainSignalMenuStateEvents+0x8c>)
 8004794:	781b      	ldrb	r3, [r3, #0]
 8004796:	2b03      	cmp	r3, #3
 8004798:	d106      	bne.n	80047a8 <_ProcessGainSignalMenuStateEvents+0x70>
	{
		eNextState = GainSignalMenuInputHandler(evYellowBtn);
 800479a:	2003      	movs	r0, #3
 800479c:	f000 fc72 	bl	8005084 <GainSignalMenuInputHandler>
 80047a0:	4603      	mov	r3, r0
 80047a2:	461a      	mov	r2, r3
 80047a4:	4b08      	ldr	r3, [pc, #32]	; (80047c8 <_ProcessGainSignalMenuStateEvents+0x90>)
 80047a6:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evRedBtn)
 80047a8:	4b06      	ldr	r3, [pc, #24]	; (80047c4 <_ProcessGainSignalMenuStateEvents+0x8c>)
 80047aa:	781b      	ldrb	r3, [r3, #0]
 80047ac:	2b04      	cmp	r3, #4
 80047ae:	d106      	bne.n	80047be <_ProcessGainSignalMenuStateEvents+0x86>
	{
		eNextState = GainSignalMenuInputHandler(evRedBtn);
 80047b0:	2004      	movs	r0, #4
 80047b2:	f000 fc67 	bl	8005084 <GainSignalMenuInputHandler>
 80047b6:	4603      	mov	r3, r0
 80047b8:	461a      	mov	r2, r3
 80047ba:	4b03      	ldr	r3, [pc, #12]	; (80047c8 <_ProcessGainSignalMenuStateEvents+0x90>)
 80047bc:	701a      	strb	r2, [r3, #0]
	}

}
 80047be:	bf00      	nop
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	bf00      	nop
 80047c4:	200020d2 	.word	0x200020d2
 80047c8:	200020d1 	.word	0x200020d1

080047cc <_ProcessGainAuxMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessGainAuxMenuStateEvents()
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Gain_Aux_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderSet)
 80047d0:	4b0a      	ldr	r3, [pc, #40]	; (80047fc <_ProcessGainAuxMenuStateEvents+0x30>)
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	2b05      	cmp	r3, #5
 80047d6:	d105      	bne.n	80047e4 <_ProcessGainAuxMenuStateEvents+0x18>
	{
		eNextState = GainAuxMenuInputHandler();
 80047d8:	f000 fcde 	bl	8005198 <GainAuxMenuInputHandler>
 80047dc:	4603      	mov	r3, r0
 80047de:	461a      	mov	r2, r3
 80047e0:	4b07      	ldr	r3, [pc, #28]	; (8004800 <_ProcessGainAuxMenuStateEvents+0x34>)
 80047e2:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderPush)
 80047e4:	4b05      	ldr	r3, [pc, #20]	; (80047fc <_ProcessGainAuxMenuStateEvents+0x30>)
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	2b06      	cmp	r3, #6
 80047ea:	d105      	bne.n	80047f8 <_ProcessGainAuxMenuStateEvents+0x2c>
	{
		eNextState = GainAuxMenuExitHandler();
 80047ec:	f000 fce6 	bl	80051bc <GainAuxMenuExitHandler>
 80047f0:	4603      	mov	r3, r0
 80047f2:	461a      	mov	r2, r3
 80047f4:	4b02      	ldr	r3, [pc, #8]	; (8004800 <_ProcessGainAuxMenuStateEvents+0x34>)
 80047f6:	701a      	strb	r2, [r3, #0]
	}
}
 80047f8:	bf00      	nop
 80047fa:	bd80      	pop	{r7, pc}
 80047fc:	200020d2 	.word	0x200020d2
 8004800:	200020d1 	.word	0x200020d1

08004804 <_ProcessFreqMainMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessFreqMainMenuStateEvents()
{
 8004804:	b580      	push	{r7, lr}
 8004806:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Freq_Main_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderPush)
 8004808:	4b19      	ldr	r3, [pc, #100]	; (8004870 <_ProcessFreqMainMenuStateEvents+0x6c>)
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	2b06      	cmp	r3, #6
 800480e:	d105      	bne.n	800481c <_ProcessFreqMainMenuStateEvents+0x18>
	{
		eNextState = FreqMainMenuExitHandler();
 8004810:	f000 fa78 	bl	8004d04 <FreqMainMenuExitHandler>
 8004814:	4603      	mov	r3, r0
 8004816:	461a      	mov	r2, r3
 8004818:	4b16      	ldr	r3, [pc, #88]	; (8004874 <_ProcessFreqMainMenuStateEvents+0x70>)
 800481a:	701a      	strb	r2, [r3, #0]
		//ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
	}
	if(eNewEvent == evBlueBtn)
 800481c:	4b14      	ldr	r3, [pc, #80]	; (8004870 <_ProcessFreqMainMenuStateEvents+0x6c>)
 800481e:	781b      	ldrb	r3, [r3, #0]
 8004820:	2b01      	cmp	r3, #1
 8004822:	d105      	bne.n	8004830 <_ProcessFreqMainMenuStateEvents+0x2c>
	{
		eNextState = FreqPresetMenuEntryHandler();
 8004824:	f000 fa80 	bl	8004d28 <FreqPresetMenuEntryHandler>
 8004828:	4603      	mov	r3, r0
 800482a:	461a      	mov	r2, r3
 800482c:	4b11      	ldr	r3, [pc, #68]	; (8004874 <_ProcessFreqMainMenuStateEvents+0x70>)
 800482e:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evGreenBtn)
 8004830:	4b0f      	ldr	r3, [pc, #60]	; (8004870 <_ProcessFreqMainMenuStateEvents+0x6c>)
 8004832:	781b      	ldrb	r3, [r3, #0]
 8004834:	2b02      	cmp	r3, #2
 8004836:	d105      	bne.n	8004844 <_ProcessFreqMainMenuStateEvents+0x40>
	{
		eNextState = FreqAdjustMenuEntryHandler();
 8004838:	f000 fabc 	bl	8004db4 <FreqAdjustMenuEntryHandler>
 800483c:	4603      	mov	r3, r0
 800483e:	461a      	mov	r2, r3
 8004840:	4b0c      	ldr	r3, [pc, #48]	; (8004874 <_ProcessFreqMainMenuStateEvents+0x70>)
 8004842:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evYellowBtn)
 8004844:	4b0a      	ldr	r3, [pc, #40]	; (8004870 <_ProcessFreqMainMenuStateEvents+0x6c>)
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	2b03      	cmp	r3, #3
 800484a:	d105      	bne.n	8004858 <_ProcessFreqMainMenuStateEvents+0x54>
	{
		eNextState = FreqSweepMenuEntryHandler();
 800484c:	f000 f90c 	bl	8004a68 <FreqSweepMenuEntryHandler>
 8004850:	4603      	mov	r3, r0
 8004852:	461a      	mov	r2, r3
 8004854:	4b07      	ldr	r3, [pc, #28]	; (8004874 <_ProcessFreqMainMenuStateEvents+0x70>)
 8004856:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evRedBtn)
 8004858:	4b05      	ldr	r3, [pc, #20]	; (8004870 <_ProcessFreqMainMenuStateEvents+0x6c>)
 800485a:	781b      	ldrb	r3, [r3, #0]
 800485c:	2b04      	cmp	r3, #4
 800485e:	d105      	bne.n	800486c <_ProcessFreqMainMenuStateEvents+0x68>
	{
		eNextState = FreqPrescalerMenuEntryHandler();
 8004860:	f000 fad8 	bl	8004e14 <FreqPrescalerMenuEntryHandler>
 8004864:	4603      	mov	r3, r0
 8004866:	461a      	mov	r2, r3
 8004868:	4b02      	ldr	r3, [pc, #8]	; (8004874 <_ProcessFreqMainMenuStateEvents+0x70>)
 800486a:	701a      	strb	r2, [r3, #0]
	}
}
 800486c:	bf00      	nop
 800486e:	bd80      	pop	{r7, pc}
 8004870:	200020d2 	.word	0x200020d2
 8004874:	200020d1 	.word	0x200020d1

08004878 <_ProcessFreqPresetMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessFreqPresetMenuStateEvents()
{
 8004878:	b580      	push	{r7, lr}
 800487a:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Freq_Preset_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderSet)
 800487c:	4b0a      	ldr	r3, [pc, #40]	; (80048a8 <_ProcessFreqPresetMenuStateEvents+0x30>)
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	2b05      	cmp	r3, #5
 8004882:	d105      	bne.n	8004890 <_ProcessFreqPresetMenuStateEvents+0x18>
	{
		eNextState = FreqPresetMenuInputHandler();
 8004884:	f000 fa78 	bl	8004d78 <FreqPresetMenuInputHandler>
 8004888:	4603      	mov	r3, r0
 800488a:	461a      	mov	r2, r3
 800488c:	4b07      	ldr	r3, [pc, #28]	; (80048ac <_ProcessFreqPresetMenuStateEvents+0x34>)
 800488e:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderPush)
 8004890:	4b05      	ldr	r3, [pc, #20]	; (80048a8 <_ProcessFreqPresetMenuStateEvents+0x30>)
 8004892:	781b      	ldrb	r3, [r3, #0]
 8004894:	2b06      	cmp	r3, #6
 8004896:	d105      	bne.n	80048a4 <_ProcessFreqPresetMenuStateEvents+0x2c>
	{
		eNextState = FreqPresetMenuExitHandler();
 8004898:	f000 fa80 	bl	8004d9c <FreqPresetMenuExitHandler>
 800489c:	4603      	mov	r3, r0
 800489e:	461a      	mov	r2, r3
 80048a0:	4b02      	ldr	r3, [pc, #8]	; (80048ac <_ProcessFreqPresetMenuStateEvents+0x34>)
 80048a2:	701a      	strb	r2, [r3, #0]
	}
}
 80048a4:	bf00      	nop
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	200020d2 	.word	0x200020d2
 80048ac:	200020d1 	.word	0x200020d1

080048b0 <_ProcessFreqAdjustMenuState>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessFreqAdjustMenuState()
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Freq_Adjust_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderSet)
 80048b4:	4b0a      	ldr	r3, [pc, #40]	; (80048e0 <_ProcessFreqAdjustMenuState+0x30>)
 80048b6:	781b      	ldrb	r3, [r3, #0]
 80048b8:	2b05      	cmp	r3, #5
 80048ba:	d105      	bne.n	80048c8 <_ProcessFreqAdjustMenuState+0x18>
	{
		eNextState = FreqAdjustMenuInputHandler();
 80048bc:	f000 fa92 	bl	8004de4 <FreqAdjustMenuInputHandler>
 80048c0:	4603      	mov	r3, r0
 80048c2:	461a      	mov	r2, r3
 80048c4:	4b07      	ldr	r3, [pc, #28]	; (80048e4 <_ProcessFreqAdjustMenuState+0x34>)
 80048c6:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderPush)
 80048c8:	4b05      	ldr	r3, [pc, #20]	; (80048e0 <_ProcessFreqAdjustMenuState+0x30>)
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	2b06      	cmp	r3, #6
 80048ce:	d105      	bne.n	80048dc <_ProcessFreqAdjustMenuState+0x2c>
	{
		eNextState = FreqAdjustMenuExitHandler();
 80048d0:	f000 fa94 	bl	8004dfc <FreqAdjustMenuExitHandler>
 80048d4:	4603      	mov	r3, r0
 80048d6:	461a      	mov	r2, r3
 80048d8:	4b02      	ldr	r3, [pc, #8]	; (80048e4 <_ProcessFreqAdjustMenuState+0x34>)
 80048da:	701a      	strb	r2, [r3, #0]
	}
}
 80048dc:	bf00      	nop
 80048de:	bd80      	pop	{r7, pc}
 80048e0:	200020d2 	.word	0x200020d2
 80048e4:	200020d1 	.word	0x200020d1

080048e8 <_ProcessFreqPrescalerMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessFreqPrescalerMenuStateEvents()
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Freq_Prescaler_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderSet)
 80048ec:	4b0a      	ldr	r3, [pc, #40]	; (8004918 <_ProcessFreqPrescalerMenuStateEvents+0x30>)
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	2b05      	cmp	r3, #5
 80048f2:	d105      	bne.n	8004900 <_ProcessFreqPrescalerMenuStateEvents+0x18>
	{
		eNextState = FreqPrescalerMenuInputHandler();
 80048f4:	f000 faa4 	bl	8004e40 <FreqPrescalerMenuInputHandler>
 80048f8:	4603      	mov	r3, r0
 80048fa:	461a      	mov	r2, r3
 80048fc:	4b07      	ldr	r3, [pc, #28]	; (800491c <_ProcessFreqPrescalerMenuStateEvents+0x34>)
 80048fe:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderPush)
 8004900:	4b05      	ldr	r3, [pc, #20]	; (8004918 <_ProcessFreqPrescalerMenuStateEvents+0x30>)
 8004902:	781b      	ldrb	r3, [r3, #0]
 8004904:	2b06      	cmp	r3, #6
 8004906:	d105      	bne.n	8004914 <_ProcessFreqPrescalerMenuStateEvents+0x2c>
	{
		eNextState = FreqPrescalerMenuExitHandler();
 8004908:	f000 faa6 	bl	8004e58 <FreqPrescalerMenuExitHandler>
 800490c:	4603      	mov	r3, r0
 800490e:	461a      	mov	r2, r3
 8004910:	4b02      	ldr	r3, [pc, #8]	; (800491c <_ProcessFreqPrescalerMenuStateEvents+0x34>)
 8004912:	701a      	strb	r2, [r3, #0]
	}
}
 8004914:	bf00      	nop
 8004916:	bd80      	pop	{r7, pc}
 8004918:	200020d2 	.word	0x200020d2
 800491c:	200020d1 	.word	0x200020d1

08004920 <_ProcessFreqSweepMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessFreqSweepMenuStateEvents()
{
 8004920:	b580      	push	{r7, lr}
 8004922:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Freq_Sweep_Menu_State\n");
	#endif

	if(eNewEvent == evBlueBtn)
 8004924:	4b21      	ldr	r3, [pc, #132]	; (80049ac <_ProcessFreqSweepMenuStateEvents+0x8c>)
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	2b01      	cmp	r3, #1
 800492a:	d106      	bne.n	800493a <_ProcessFreqSweepMenuStateEvents+0x1a>
	{
		// enable
		eNextState = FreqSweepMenuInputHandler(evSweepEnableBtn);
 800492c:	2007      	movs	r0, #7
 800492e:	f000 f8ed 	bl	8004b0c <FreqSweepMenuInputHandler>
 8004932:	4603      	mov	r3, r0
 8004934:	461a      	mov	r2, r3
 8004936:	4b1e      	ldr	r3, [pc, #120]	; (80049b0 <_ProcessFreqSweepMenuStateEvents+0x90>)
 8004938:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evGreenBtn)
 800493a:	4b1c      	ldr	r3, [pc, #112]	; (80049ac <_ProcessFreqSweepMenuStateEvents+0x8c>)
 800493c:	781b      	ldrb	r3, [r3, #0]
 800493e:	2b02      	cmp	r3, #2
 8004940:	d106      	bne.n	8004950 <_ProcessFreqSweepMenuStateEvents+0x30>
	{
		// direction
		eNextState = FreqSweepMenuInputHandler(evSweepModeBtn);
 8004942:	2008      	movs	r0, #8
 8004944:	f000 f8e2 	bl	8004b0c <FreqSweepMenuInputHandler>
 8004948:	4603      	mov	r3, r0
 800494a:	461a      	mov	r2, r3
 800494c:	4b18      	ldr	r3, [pc, #96]	; (80049b0 <_ProcessFreqSweepMenuStateEvents+0x90>)
 800494e:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evYellowBtn)
 8004950:	4b16      	ldr	r3, [pc, #88]	; (80049ac <_ProcessFreqSweepMenuStateEvents+0x8c>)
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	2b03      	cmp	r3, #3
 8004956:	d106      	bne.n	8004966 <_ProcessFreqSweepMenuStateEvents+0x46>
	{
		// set sweep speed
		eNextState = FreqSweepMenuInputHandler(evSweepSpeedBtn);
 8004958:	2009      	movs	r0, #9
 800495a:	f000 f8d7 	bl	8004b0c <FreqSweepMenuInputHandler>
 800495e:	4603      	mov	r3, r0
 8004960:	461a      	mov	r2, r3
 8004962:	4b13      	ldr	r3, [pc, #76]	; (80049b0 <_ProcessFreqSweepMenuStateEvents+0x90>)
 8004964:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evRedBtn)
 8004966:	4b11      	ldr	r3, [pc, #68]	; (80049ac <_ProcessFreqSweepMenuStateEvents+0x8c>)
 8004968:	781b      	ldrb	r3, [r3, #0]
 800496a:	2b04      	cmp	r3, #4
 800496c:	d106      	bne.n	800497c <_ProcessFreqSweepMenuStateEvents+0x5c>
	{
		// set lower/upper sweep limit
		eNextState = FreqSweepMenuInputHandler(evSweepLimitBtn);
 800496e:	200a      	movs	r0, #10
 8004970:	f000 f8cc 	bl	8004b0c <FreqSweepMenuInputHandler>
 8004974:	4603      	mov	r3, r0
 8004976:	461a      	mov	r2, r3
 8004978:	4b0d      	ldr	r3, [pc, #52]	; (80049b0 <_ProcessFreqSweepMenuStateEvents+0x90>)
 800497a:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderSet)
 800497c:	4b0b      	ldr	r3, [pc, #44]	; (80049ac <_ProcessFreqSweepMenuStateEvents+0x8c>)
 800497e:	781b      	ldrb	r3, [r3, #0]
 8004980:	2b05      	cmp	r3, #5
 8004982:	d106      	bne.n	8004992 <_ProcessFreqSweepMenuStateEvents+0x72>
	{
		eNextState = FreqSweepMenuInputHandler(evEncoderSweep);
 8004984:	200b      	movs	r0, #11
 8004986:	f000 f8c1 	bl	8004b0c <FreqSweepMenuInputHandler>
 800498a:	4603      	mov	r3, r0
 800498c:	461a      	mov	r2, r3
 800498e:	4b08      	ldr	r3, [pc, #32]	; (80049b0 <_ProcessFreqSweepMenuStateEvents+0x90>)
 8004990:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderPush)
 8004992:	4b06      	ldr	r3, [pc, #24]	; (80049ac <_ProcessFreqSweepMenuStateEvents+0x8c>)
 8004994:	781b      	ldrb	r3, [r3, #0]
 8004996:	2b06      	cmp	r3, #6
 8004998:	d105      	bne.n	80049a6 <_ProcessFreqSweepMenuStateEvents+0x86>
	{
		eNextState = FreqSweepMenuExitHandler();
 800499a:	f000 f98d 	bl	8004cb8 <FreqSweepMenuExitHandler>
 800499e:	4603      	mov	r3, r0
 80049a0:	461a      	mov	r2, r3
 80049a2:	4b03      	ldr	r3, [pc, #12]	; (80049b0 <_ProcessFreqSweepMenuStateEvents+0x90>)
 80049a4:	701a      	strb	r2, [r3, #0]
	}

}
 80049a6:	bf00      	nop
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	bf00      	nop
 80049ac:	200020d2 	.word	0x200020d2
 80049b0:	200020d1 	.word	0x200020d1

080049b4 <_ProcessBiasMainMenuEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessBiasMainMenuEvents()
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Bias_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderSet)
 80049b8:	4b1b      	ldr	r3, [pc, #108]	; (8004a28 <_ProcessBiasMainMenuEvents+0x74>)
 80049ba:	781b      	ldrb	r3, [r3, #0]
 80049bc:	2b05      	cmp	r3, #5
 80049be:	d106      	bne.n	80049ce <_ProcessBiasMainMenuEvents+0x1a>
	{
		eNextState = BiasMenuInputHandler(evEncoderSet);
 80049c0:	2005      	movs	r0, #5
 80049c2:	f7ff fcef 	bl	80043a4 <BiasMenuInputHandler>
 80049c6:	4603      	mov	r3, r0
 80049c8:	461a      	mov	r2, r3
 80049ca:	4b18      	ldr	r3, [pc, #96]	; (8004a2c <_ProcessBiasMainMenuEvents+0x78>)
 80049cc:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderPush)
 80049ce:	4b16      	ldr	r3, [pc, #88]	; (8004a28 <_ProcessBiasMainMenuEvents+0x74>)
 80049d0:	781b      	ldrb	r3, [r3, #0]
 80049d2:	2b06      	cmp	r3, #6
 80049d4:	d105      	bne.n	80049e2 <_ProcessBiasMainMenuEvents+0x2e>
	{
		eNextState = BiasMenuExitHandler();
 80049d6:	f7ff fd29 	bl	800442c <BiasMenuExitHandler>
 80049da:	4603      	mov	r3, r0
 80049dc:	461a      	mov	r2, r3
 80049de:	4b13      	ldr	r3, [pc, #76]	; (8004a2c <_ProcessBiasMainMenuEvents+0x78>)
 80049e0:	701a      	strb	r2, [r3, #0]
		//ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
	}
	if(eNewEvent == evBlueBtn)
 80049e2:	4b11      	ldr	r3, [pc, #68]	; (8004a28 <_ProcessBiasMainMenuEvents+0x74>)
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d106      	bne.n	80049f8 <_ProcessBiasMainMenuEvents+0x44>
	{
		// enable
		eNextState = BiasMenuInputHandler(evBlueBtn);
 80049ea:	2001      	movs	r0, #1
 80049ec:	f7ff fcda 	bl	80043a4 <BiasMenuInputHandler>
 80049f0:	4603      	mov	r3, r0
 80049f2:	461a      	mov	r2, r3
 80049f4:	4b0d      	ldr	r3, [pc, #52]	; (8004a2c <_ProcessBiasMainMenuEvents+0x78>)
 80049f6:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evGreenBtn)
 80049f8:	4b0b      	ldr	r3, [pc, #44]	; (8004a28 <_ProcessBiasMainMenuEvents+0x74>)
 80049fa:	781b      	ldrb	r3, [r3, #0]
 80049fc:	2b02      	cmp	r3, #2
 80049fe:	d106      	bne.n	8004a0e <_ProcessBiasMainMenuEvents+0x5a>
	{
		// direction
		eNextState = BiasMenuInputHandler(evGreenBtn);
 8004a00:	2002      	movs	r0, #2
 8004a02:	f7ff fccf 	bl	80043a4 <BiasMenuInputHandler>
 8004a06:	4603      	mov	r3, r0
 8004a08:	461a      	mov	r2, r3
 8004a0a:	4b08      	ldr	r3, [pc, #32]	; (8004a2c <_ProcessBiasMainMenuEvents+0x78>)
 8004a0c:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evYellowBtn)
 8004a0e:	4b06      	ldr	r3, [pc, #24]	; (8004a28 <_ProcessBiasMainMenuEvents+0x74>)
 8004a10:	781b      	ldrb	r3, [r3, #0]
 8004a12:	2b03      	cmp	r3, #3
 8004a14:	d106      	bne.n	8004a24 <_ProcessBiasMainMenuEvents+0x70>
	{
		// set sweep speed
		eNextState = BiasMenuInputHandler(evYellowBtn);
 8004a16:	2003      	movs	r0, #3
 8004a18:	f7ff fcc4 	bl	80043a4 <BiasMenuInputHandler>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	461a      	mov	r2, r3
 8004a20:	4b02      	ldr	r3, [pc, #8]	; (8004a2c <_ProcessBiasMainMenuEvents+0x78>)
 8004a22:	701a      	strb	r2, [r3, #0]
	}
}
 8004a24:	bf00      	nop
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	200020d2 	.word	0x200020d2
 8004a2c:	200020d1 	.word	0x200020d1

08004a30 <EM_SetNewEvent>:
 *	@param None
 *	@retval None
 *
 */
void EM_SetNewEvent(eSystemEvent pEvent)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b083      	sub	sp, #12
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	4603      	mov	r3, r0
 8004a38:	71fb      	strb	r3, [r7, #7]
	eNewEvent = pEvent;
 8004a3a:	4a04      	ldr	r2, [pc, #16]	; (8004a4c <EM_SetNewEvent+0x1c>)
 8004a3c:	79fb      	ldrb	r3, [r7, #7]
 8004a3e:	7013      	strb	r3, [r2, #0]
}
 8004a40:	bf00      	nop
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr
 8004a4c:	200020d2 	.word	0x200020d2

08004a50 <EM_GetSystemState>:
 *	@param None
 *	@retval None
 *
 */
eSystemState EM_GetSystemState()
{
 8004a50:	b480      	push	{r7}
 8004a52:	af00      	add	r7, sp, #0
	return eNextState;
 8004a54:	4b03      	ldr	r3, [pc, #12]	; (8004a64 <EM_GetSystemState+0x14>)
 8004a56:	781b      	ldrb	r3, [r3, #0]
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop
 8004a64:	200020d1 	.word	0x200020d1

08004a68 <FreqSweepMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqSweepMenuEntryHandler()
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqSweepMenuEntryHandler captured\n");
	#endif

	DM_RefreshScreen();
 8004a6c:	f7fc feda 	bl	8001824 <DM_RefreshScreen>

	if( sweep_upper_bounds_longest_output_arr != OUTPUT_TIMER->ARR)
 8004a70:	4b21      	ldr	r3, [pc, #132]	; (8004af8 <FreqSweepMenuEntryHandler+0x90>)
 8004a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a74:	ee07 3a90 	vmov	s15, r3
 8004a78:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004a7c:	4b1f      	ldr	r3, [pc, #124]	; (8004afc <FreqSweepMenuEntryHandler+0x94>)
 8004a7e:	edd3 7a00 	vldr	s15, [r3]
 8004a82:	eeb4 7a67 	vcmp.f32	s14, s15
 8004a86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a8a:	d008      	beq.n	8004a9e <FreqSweepMenuEntryHandler+0x36>
		sweep_upper_bounds_longest_output_arr  = OUTPUT_TIMER->ARR;
 8004a8c:	4b1a      	ldr	r3, [pc, #104]	; (8004af8 <FreqSweepMenuEntryHandler+0x90>)
 8004a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a90:	ee07 3a90 	vmov	s15, r3
 8004a94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a98:	4b18      	ldr	r3, [pc, #96]	; (8004afc <FreqSweepMenuEntryHandler+0x94>)
 8004a9a:	edc3 7a00 	vstr	s15, [r3]

	if( sweep_upper_bounds_longest_output_arr == MIN_OUTPUT_ARR)
 8004a9e:	4b17      	ldr	r3, [pc, #92]	; (8004afc <FreqSweepMenuEntryHandler+0x94>)
 8004aa0:	edd3 7a00 	vldr	s15, [r3]
 8004aa4:	eeb2 7a0a 	vmov.f32	s14, #42	; 0x41500000  13.0
 8004aa8:	eef4 7a47 	vcmp.f32	s15, s14
 8004aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ab0:	d101      	bne.n	8004ab6 <FreqSweepMenuEntryHandler+0x4e>
	{
		FS_SetSweepModeDown();
 8004ab2:	f000 ffb9 	bl	8005a28 <FS_SetSweepModeDown>
	}

	FS_SetEncoderControlMode(ENCODER_SWEEP_SPEED_FUNCTION);
 8004ab6:	2000      	movs	r0, #0
 8004ab8:	f001 f810 	bl	8005adc <FS_SetEncoderControlMode>
	FS_SetSweepTimerAutoReloadForEncoderControl(ENCODER_SWEEP_SPEED_FUNCTION);
 8004abc:	2000      	movs	r0, #0
 8004abe:	f001 f86b 	bl	8005b98 <FS_SetSweepTimerAutoReloadForEncoderControl>
	calculated_sweep_in_hertz = FS_GetCalculatedSweepFrequencyInHertz();
 8004ac2:	f001 f8a5 	bl	8005c10 <FS_GetCalculatedSweepFrequencyInHertz>
 8004ac6:	eef0 7a40 	vmov.f32	s15, s0
 8004aca:	4b0d      	ldr	r3, [pc, #52]	; (8004b00 <FreqSweepMenuEntryHandler+0x98>)
 8004acc:	edc3 7a00 	vstr	s15, [r3]

	// reset sweep start value
	SWEEP_TIMER->CNT = 0;
 8004ad0:	4b0c      	ldr	r3, [pc, #48]	; (8004b04 <FreqSweepMenuEntryHandler+0x9c>)
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	625a      	str	r2, [r3, #36]	; 0x24

	// set default mode to sweep speed control
	FreqSweepMenuInputHandler(evSweepSpeedBtn);
 8004ad6:	2009      	movs	r0, #9
 8004ad8:	f000 f818 	bl	8004b0c <FreqSweepMenuInputHandler>

	// sweep start speed
	SWEEP_TIMER->ARR = MIN_SWEEP_ARR;
 8004adc:	4b09      	ldr	r3, [pc, #36]	; (8004b04 <FreqSweepMenuEntryHandler+0x9c>)
 8004ade:	f244 12a0 	movw	r2, #16800	; 0x41a0
 8004ae2:	62da      	str	r2, [r3, #44]	; 0x2c
	SWEEP_TIMER->PSC = 0;
 8004ae4:	4b07      	ldr	r3, [pc, #28]	; (8004b04 <FreqSweepMenuEntryHandler+0x9c>)
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	629a      	str	r2, [r3, #40]	; 0x28

	// stay in this state
	eNewEvent = evIdle;
 8004aea:	4b07      	ldr	r3, [pc, #28]	; (8004b08 <FreqSweepMenuEntryHandler+0xa0>)
 8004aec:	2200      	movs	r2, #0
 8004aee:	701a      	strb	r2, [r3, #0]
	return Freq_Sweep_Menu_State;
 8004af0:	230d      	movs	r3, #13
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	bf00      	nop
 8004af8:	40013400 	.word	0x40013400
 8004afc:	20000124 	.word	0x20000124
 8004b00:	20002168 	.word	0x20002168
 8004b04:	40000c00 	.word	0x40000c00
 8004b08:	200020d2 	.word	0x200020d2

08004b0c <FreqSweepMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqSweepMenuInputHandler(eSystemEvent pEvent)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b082      	sub	sp, #8
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	4603      	mov	r3, r0
 8004b14:	71fb      	strb	r3, [r7, #7]
		printf("FreqAdjustMenuInputHandler Event captured\n");
	#endif



	switch(pEvent)
 8004b16:	79fb      	ldrb	r3, [r7, #7]
 8004b18:	3b07      	subs	r3, #7
 8004b1a:	2b04      	cmp	r3, #4
 8004b1c:	f200 80b2 	bhi.w	8004c84 <FreqSweepMenuInputHandler+0x178>
 8004b20:	a201      	add	r2, pc, #4	; (adr r2, 8004b28 <FreqSweepMenuInputHandler+0x1c>)
 8004b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b26:	bf00      	nop
 8004b28:	08004b3d 	.word	0x08004b3d
 8004b2c:	08004b57 	.word	0x08004b57
 8004b30:	08004c75 	.word	0x08004c75
 8004b34:	08004c7d 	.word	0x08004c7d
 8004b38:	08004b91 	.word	0x08004b91
			#ifdef EVENT_MENU_DEBUG
				printf("evSweepEnable captured\n");
			#endif

			// toggle enable/disable
			SWEEP_TIMER->DIER 	^= TIM_DIER_UIE;
 8004b3c:	4b56      	ldr	r3, [pc, #344]	; (8004c98 <FreqSweepMenuInputHandler+0x18c>)
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	4a55      	ldr	r2, [pc, #340]	; (8004c98 <FreqSweepMenuInputHandler+0x18c>)
 8004b42:	f083 0301 	eor.w	r3, r3, #1
 8004b46:	60d3      	str	r3, [r2, #12]
			SWEEP_TIMER->CR1	^= TIM_CR1_CEN;
 8004b48:	4b53      	ldr	r3, [pc, #332]	; (8004c98 <FreqSweepMenuInputHandler+0x18c>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a52      	ldr	r2, [pc, #328]	; (8004c98 <FreqSweepMenuInputHandler+0x18c>)
 8004b4e:	f083 0301 	eor.w	r3, r3, #1
 8004b52:	6013      	str	r3, [r2, #0]
			break;
 8004b54:	e097      	b.n	8004c86 <FreqSweepMenuInputHandler+0x17a>
			#ifdef EVENT_MENU_DEBUG
				printf("evSweepMode captured\n");
			#endif

			// flip between 0:Upcounter and 1:Downcounter
			active_sweep_mode ^= 1U;
 8004b56:	4b51      	ldr	r3, [pc, #324]	; (8004c9c <FreqSweepMenuInputHandler+0x190>)
 8004b58:	781b      	ldrb	r3, [r3, #0]
 8004b5a:	f083 0301 	eor.w	r3, r3, #1
 8004b5e:	b2da      	uxtb	r2, r3
 8004b60:	4b4e      	ldr	r3, [pc, #312]	; (8004c9c <FreqSweepMenuInputHandler+0x190>)
 8004b62:	701a      	strb	r2, [r3, #0]

			switch(active_sweep_mode)
 8004b64:	4b4d      	ldr	r3, [pc, #308]	; (8004c9c <FreqSweepMenuInputHandler+0x190>)
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d004      	beq.n	8004b76 <FreqSweepMenuInputHandler+0x6a>
 8004b6c:	2b02      	cmp	r3, #2
 8004b6e:	d008      	beq.n	8004b82 <FreqSweepMenuInputHandler+0x76>
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d003      	beq.n	8004b7c <FreqSweepMenuInputHandler+0x70>
 8004b74:	e006      	b.n	8004b84 <FreqSweepMenuInputHandler+0x78>
			{
				case SWEEP_MODE_DOWN:
					FS_SetSweepModeDown();
 8004b76:	f000 ff57 	bl	8005a28 <FS_SetSweepModeDown>
					break;
 8004b7a:	e003      	b.n	8004b84 <FreqSweepMenuInputHandler+0x78>

				case SWEEP_MODE_UP:
					FS_SetSweepModeUp();
 8004b7c:	f000 ff84 	bl	8005a88 <FS_SetSweepModeUp>
					break;
 8004b80:	e000      	b.n	8004b84 <FreqSweepMenuInputHandler+0x78>

				case SWEEP_MODE_BIDIR:	// not used
					//SWEEP_TIMER->CR1 |= (TIM_CR1_CMS_0);
					break;
 8004b82:	bf00      	nop
			}
			// switch(active_sweep_mode)
			// TODO
			FS_SetEncoderControlMode(theCurrentEncoderSweepFunction);
 8004b84:	4b46      	ldr	r3, [pc, #280]	; (8004ca0 <FreqSweepMenuInputHandler+0x194>)
 8004b86:	781b      	ldrb	r3, [r3, #0]
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f000 ffa7 	bl	8005adc <FS_SetEncoderControlMode>

			break;
 8004b8e:	e07a      	b.n	8004c86 <FreqSweepMenuInputHandler+0x17a>

			#ifdef EVENT_MENU_DEBUG
				printf("evEncoderSweep captured\n");
			#endif

			switch(theCurrentEncoderSweepFunction)
 8004b90:	4b43      	ldr	r3, [pc, #268]	; (8004ca0 <FreqSweepMenuInputHandler+0x194>)
 8004b92:	781b      	ldrb	r3, [r3, #0]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d002      	beq.n	8004b9e <FreqSweepMenuInputHandler+0x92>
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d00b      	beq.n	8004bb4 <FreqSweepMenuInputHandler+0xa8>
					break;

			}
			// switch(theCurrentEncoderSweepFunction)

			break;
 8004b9c:	e073      	b.n	8004c86 <FreqSweepMenuInputHandler+0x17a>
					FS_SetSweepTimerAutoReloadForEncoderControl(ENCODER_SWEEP_SPEED_FUNCTION);
 8004b9e:	2000      	movs	r0, #0
 8004ba0:	f000 fffa 	bl	8005b98 <FS_SetSweepTimerAutoReloadForEncoderControl>
					calculated_sweep_in_hertz = FS_GetCalculatedSweepFrequencyInHertz();
 8004ba4:	f001 f834 	bl	8005c10 <FS_GetCalculatedSweepFrequencyInHertz>
 8004ba8:	eef0 7a40 	vmov.f32	s15, s0
 8004bac:	4b3d      	ldr	r3, [pc, #244]	; (8004ca4 <FreqSweepMenuInputHandler+0x198>)
 8004bae:	edc3 7a00 	vstr	s15, [r3]
					break;
 8004bb2:	e05e      	b.n	8004c72 <FreqSweepMenuInputHandler+0x166>
					switch(active_sweep_mode)
 8004bb4:	4b39      	ldr	r3, [pc, #228]	; (8004c9c <FreqSweepMenuInputHandler+0x190>)
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d002      	beq.n	8004bc2 <FreqSweepMenuInputHandler+0xb6>
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d02a      	beq.n	8004c16 <FreqSweepMenuInputHandler+0x10a>
							break;
 8004bc0:	e056      	b.n	8004c70 <FreqSweepMenuInputHandler+0x164>
							if(ENCODER_TIMER->CNT < MIN_OUTPUT_ARR)
 8004bc2:	4b39      	ldr	r3, [pc, #228]	; (8004ca8 <FreqSweepMenuInputHandler+0x19c>)
 8004bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc6:	2b0c      	cmp	r3, #12
 8004bc8:	d803      	bhi.n	8004bd2 <FreqSweepMenuInputHandler+0xc6>
								ENCODER_TIMER->CNT = MIN_OUTPUT_ARR;
 8004bca:	4b37      	ldr	r3, [pc, #220]	; (8004ca8 <FreqSweepMenuInputHandler+0x19c>)
 8004bcc:	220d      	movs	r2, #13
 8004bce:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 8004bd0:	e04e      	b.n	8004c70 <FreqSweepMenuInputHandler+0x164>
							else if (ENCODER_TIMER->CNT > sweep_upper_bounds_longest_output_arr)
 8004bd2:	4b35      	ldr	r3, [pc, #212]	; (8004ca8 <FreqSweepMenuInputHandler+0x19c>)
 8004bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd6:	ee07 3a90 	vmov	s15, r3
 8004bda:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004bde:	4b33      	ldr	r3, [pc, #204]	; (8004cac <FreqSweepMenuInputHandler+0x1a0>)
 8004be0:	edd3 7a00 	vldr	s15, [r3]
 8004be4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004be8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bec:	dd09      	ble.n	8004c02 <FreqSweepMenuInputHandler+0xf6>
								ENCODER_TIMER->CNT = sweep_upper_bounds_longest_output_arr;
 8004bee:	4b2f      	ldr	r3, [pc, #188]	; (8004cac <FreqSweepMenuInputHandler+0x1a0>)
 8004bf0:	edd3 7a00 	vldr	s15, [r3]
 8004bf4:	4b2c      	ldr	r3, [pc, #176]	; (8004ca8 <FreqSweepMenuInputHandler+0x19c>)
 8004bf6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bfa:	ee17 2a90 	vmov	r2, s15
 8004bfe:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 8004c00:	e036      	b.n	8004c70 <FreqSweepMenuInputHandler+0x164>
								sweep_lower_bounds_shortest_output_arr = ENCODER_TIMER->CNT;
 8004c02:	4b29      	ldr	r3, [pc, #164]	; (8004ca8 <FreqSweepMenuInputHandler+0x19c>)
 8004c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c06:	ee07 3a90 	vmov	s15, r3
 8004c0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c0e:	4b28      	ldr	r3, [pc, #160]	; (8004cb0 <FreqSweepMenuInputHandler+0x1a4>)
 8004c10:	edc3 7a00 	vstr	s15, [r3]
							break;
 8004c14:	e02c      	b.n	8004c70 <FreqSweepMenuInputHandler+0x164>
							if(ENCODER_TIMER->CNT >= MAX_OUTPUT_ARR)
 8004c16:	4b24      	ldr	r3, [pc, #144]	; (8004ca8 <FreqSweepMenuInputHandler+0x19c>)
 8004c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d904      	bls.n	8004c2c <FreqSweepMenuInputHandler+0x120>
								ENCODER_TIMER->CNT = MAX_OUTPUT_ARR;
 8004c22:	4b21      	ldr	r3, [pc, #132]	; (8004ca8 <FreqSweepMenuInputHandler+0x19c>)
 8004c24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004c28:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 8004c2a:	e020      	b.n	8004c6e <FreqSweepMenuInputHandler+0x162>
							else if (ENCODER_TIMER->CNT < sweep_lower_bounds_shortest_output_arr)
 8004c2c:	4b1e      	ldr	r3, [pc, #120]	; (8004ca8 <FreqSweepMenuInputHandler+0x19c>)
 8004c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c30:	ee07 3a90 	vmov	s15, r3
 8004c34:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004c38:	4b1d      	ldr	r3, [pc, #116]	; (8004cb0 <FreqSweepMenuInputHandler+0x1a4>)
 8004c3a:	edd3 7a00 	vldr	s15, [r3]
 8004c3e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004c42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c46:	d509      	bpl.n	8004c5c <FreqSweepMenuInputHandler+0x150>
								ENCODER_TIMER->CNT = sweep_lower_bounds_shortest_output_arr;
 8004c48:	4b19      	ldr	r3, [pc, #100]	; (8004cb0 <FreqSweepMenuInputHandler+0x1a4>)
 8004c4a:	edd3 7a00 	vldr	s15, [r3]
 8004c4e:	4b16      	ldr	r3, [pc, #88]	; (8004ca8 <FreqSweepMenuInputHandler+0x19c>)
 8004c50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c54:	ee17 2a90 	vmov	r2, s15
 8004c58:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 8004c5a:	e008      	b.n	8004c6e <FreqSweepMenuInputHandler+0x162>
								sweep_upper_bounds_longest_output_arr = ENCODER_TIMER->CNT;
 8004c5c:	4b12      	ldr	r3, [pc, #72]	; (8004ca8 <FreqSweepMenuInputHandler+0x19c>)
 8004c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c60:	ee07 3a90 	vmov	s15, r3
 8004c64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c68:	4b10      	ldr	r3, [pc, #64]	; (8004cac <FreqSweepMenuInputHandler+0x1a0>)
 8004c6a:	edc3 7a00 	vstr	s15, [r3]
							break;
 8004c6e:	bf00      	nop
					break;
 8004c70:	bf00      	nop
			break;
 8004c72:	e008      	b.n	8004c86 <FreqSweepMenuInputHandler+0x17a>

		// set sweep speed button
		case evSweepSpeedBtn:
			FS_SetEncoderControlMode(ENCODER_SWEEP_SPEED_FUNCTION);
 8004c74:	2000      	movs	r0, #0
 8004c76:	f000 ff31 	bl	8005adc <FS_SetEncoderControlMode>

			break;
 8004c7a:	e004      	b.n	8004c86 <FreqSweepMenuInputHandler+0x17a>

		// set sweep limit button
		case evSweepLimitBtn:
			FS_SetEncoderControlMode(ENCODER_SWEEP_LIMIT_FUNCTION);
 8004c7c:	2001      	movs	r0, #1
 8004c7e:	f000 ff2d 	bl	8005adc <FS_SetEncoderControlMode>

			break;
 8004c82:	e000      	b.n	8004c86 <FreqSweepMenuInputHandler+0x17a>

		default:
			break;
 8004c84:	bf00      	nop
	}
	// switch(pEvent)


	// stay in this state
	eNewEvent = evIdle;
 8004c86:	4b0b      	ldr	r3, [pc, #44]	; (8004cb4 <FreqSweepMenuInputHandler+0x1a8>)
 8004c88:	2200      	movs	r2, #0
 8004c8a:	701a      	strb	r2, [r3, #0]
	return Freq_Sweep_Menu_State;
 8004c8c:	230d      	movs	r3, #13
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3708      	adds	r7, #8
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	bf00      	nop
 8004c98:	40000c00 	.word	0x40000c00
 8004c9c:	200020d3 	.word	0x200020d3
 8004ca0:	200020d4 	.word	0x200020d4
 8004ca4:	20002168 	.word	0x20002168
 8004ca8:	40012c00 	.word	0x40012c00
 8004cac:	20000124 	.word	0x20000124
 8004cb0:	20000120 	.word	0x20000120
 8004cb4:	200020d2 	.word	0x200020d2

08004cb8 <FreqSweepMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqSweepMenuExitHandler()
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqSweepMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004cbc:	f7fc fdb2 	bl	8001824 <DM_RefreshScreen>

	// disable sweep timer and interrupts
	SWEEP_TIMER->DIER 	&= ~(TIM_DIER_UIE);
 8004cc0:	4b08      	ldr	r3, [pc, #32]	; (8004ce4 <FreqSweepMenuExitHandler+0x2c>)
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	4a07      	ldr	r2, [pc, #28]	; (8004ce4 <FreqSweepMenuExitHandler+0x2c>)
 8004cc6:	f023 0301 	bic.w	r3, r3, #1
 8004cca:	60d3      	str	r3, [r2, #12]
	SWEEP_TIMER->CR1 	&= ~(TIM_CR1_CEN);
 8004ccc:	4b05      	ldr	r3, [pc, #20]	; (8004ce4 <FreqSweepMenuExitHandler+0x2c>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a04      	ldr	r2, [pc, #16]	; (8004ce4 <FreqSweepMenuExitHandler+0x2c>)
 8004cd2:	f023 0301 	bic.w	r3, r3, #1
 8004cd6:	6013      	str	r3, [r2, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 8004cd8:	4b03      	ldr	r3, [pc, #12]	; (8004ce8 <FreqSweepMenuExitHandler+0x30>)
 8004cda:	2200      	movs	r2, #0
 8004cdc:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8004cde:	230a      	movs	r3, #10
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	bd80      	pop	{r7, pc}
 8004ce4:	40000c00 	.word	0x40000c00
 8004ce8:	200020d2 	.word	0x200020d2

08004cec <FreqMainMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqMainMenuEntryHandler()
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqMainMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004cf0:	f7fc fd98 	bl	8001824 <DM_RefreshScreen>

	// stay in this state
	eNewEvent = evIdle;
 8004cf4:	4b02      	ldr	r3, [pc, #8]	; (8004d00 <FreqMainMenuEntryHandler+0x14>)
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8004cfa:	230a      	movs	r3, #10
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	bd80      	pop	{r7, pc}
 8004d00:	200020d2 	.word	0x200020d2

08004d04 <FreqMainMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqMainMenuExitHandler()
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqMainMenuExitHandler Event captured\n");
	#endif

	ENCODER_TIMER->ARR = 1024;
 8004d08:	4b05      	ldr	r3, [pc, #20]	; (8004d20 <FreqMainMenuExitHandler+0x1c>)
 8004d0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d0e:	62da      	str	r2, [r3, #44]	; 0x2c

	DM_RefreshScreen();
 8004d10:	f7fc fd88 	bl	8001824 <DM_RefreshScreen>

	#ifdef EVENT_MENU_DEBUG
		  printf("returning to Idle State\n");
	#endif

	eNewEvent = evIdle;
 8004d14:	4b03      	ldr	r3, [pc, #12]	; (8004d24 <FreqMainMenuExitHandler+0x20>)
 8004d16:	2200      	movs	r2, #0
 8004d18:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 8004d1a:	2301      	movs	r3, #1
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	bd80      	pop	{r7, pc}
 8004d20:	40012c00 	.word	0x40012c00
 8004d24:	200020d2 	.word	0x200020d2

08004d28 <FreqPresetMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuEntryHandler()
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b082      	sub	sp, #8
 8004d2c:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqPresetMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004d2e:	f7fc fd79 	bl	8001824 <DM_RefreshScreen>
	FreqO_ResetLastEncoderValue();
 8004d32:	f000 fe6d 	bl	8005a10 <FreqO_ResetLastEncoderValue>

	FreqProfile_t *pFreqPresetTmp =  FreqO_GetFPresetObject();
 8004d36:	f000 fe1d 	bl	8005974 <FreqO_GetFPresetObject>
 8004d3a:	6078      	str	r0, [r7, #4]
	if(pFreqPresetTmp)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d008      	beq.n	8004d54 <FreqPresetMenuEntryHandler+0x2c>
	{
		// set rotary encoder limit to full scale and set centre starting position
		ENCODER_TIMER->CNT = 32768;
 8004d42:	4b0a      	ldr	r3, [pc, #40]	; (8004d6c <FreqPresetMenuEntryHandler+0x44>)
 8004d44:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004d48:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = 65535;
 8004d4a:	4b08      	ldr	r3, [pc, #32]	; (8004d6c <FreqPresetMenuEntryHandler+0x44>)
 8004d4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004d50:	62da      	str	r2, [r3, #44]	; 0x2c
 8004d52:	e002      	b.n	8004d5a <FreqPresetMenuEntryHandler+0x32>
	}
	else
	{
		DM_SetErrorDebugMsg("_FreqPresetMenuEntryHandler: pFreqPresetTmp null pointer");
 8004d54:	4806      	ldr	r0, [pc, #24]	; (8004d70 <FreqPresetMenuEntryHandler+0x48>)
 8004d56:	f7fc fdab 	bl	80018b0 <DM_SetErrorDebugMsg>
	}


	// stay in this state
	eNewEvent = evIdle;
 8004d5a:	4b06      	ldr	r3, [pc, #24]	; (8004d74 <FreqPresetMenuEntryHandler+0x4c>)
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	701a      	strb	r2, [r3, #0]
	return Freq_Preset_Menu_State;
 8004d60:	230b      	movs	r3, #11
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3708      	adds	r7, #8
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	bf00      	nop
 8004d6c:	40012c00 	.word	0x40012c00
 8004d70:	08015cf4 	.word	0x08015cf4
 8004d74:	200020d2 	.word	0x200020d2

08004d78 <FreqPresetMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuInputHandler()
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqPresetMenuInputHandler Event captured\n");
	#endif

	FreqO_MapEncoderPositionCoarse(SM_GetEncoderValue(ENCODER_NORMAL));
 8004d7c:	2000      	movs	r0, #0
 8004d7e:	f002 f861 	bl	8006e44 <SM_GetEncoderValue>
 8004d82:	4603      	mov	r3, r0
 8004d84:	4618      	mov	r0, r3
 8004d86:	f000 fcd1 	bl	800572c <FreqO_MapEncoderPositionCoarse>

	// stay in this state
	eNewEvent = evIdle;
 8004d8a:	4b03      	ldr	r3, [pc, #12]	; (8004d98 <FreqPresetMenuInputHandler+0x20>)
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	701a      	strb	r2, [r3, #0]
	return Freq_Preset_Menu_State;
 8004d90:	230b      	movs	r3, #11
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	bf00      	nop
 8004d98:	200020d2 	.word	0x200020d2

08004d9c <FreqPresetMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuExitHandler()
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqPresetMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004da0:	f7fc fd40 	bl	8001824 <DM_RefreshScreen>

	// back to main freq menu
	eNewEvent = evIdle;
 8004da4:	4b02      	ldr	r3, [pc, #8]	; (8004db0 <FreqPresetMenuExitHandler+0x14>)
 8004da6:	2200      	movs	r2, #0
 8004da8:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8004daa:	230a      	movs	r3, #10
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	200020d2 	.word	0x200020d2

08004db4 <FreqAdjustMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuEntryHandler()
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqAdjustMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004db8:	f7fc fd34 	bl	8001824 <DM_RefreshScreen>

	// set rotary encoder limit to full scale and set OUTPUT_TIMER "TOP" starting position
	ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
 8004dbc:	4b06      	ldr	r3, [pc, #24]	; (8004dd8 <FreqAdjustMenuEntryHandler+0x24>)
 8004dbe:	4a07      	ldr	r2, [pc, #28]	; (8004ddc <FreqAdjustMenuEntryHandler+0x28>)
 8004dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc2:	6253      	str	r3, [r2, #36]	; 0x24
	ENCODER_TIMER->ARR = 65535;
 8004dc4:	4b05      	ldr	r3, [pc, #20]	; (8004ddc <FreqAdjustMenuEntryHandler+0x28>)
 8004dc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004dca:	62da      	str	r2, [r3, #44]	; 0x2c

	// stay in this state
	eNewEvent = evIdle;
 8004dcc:	4b04      	ldr	r3, [pc, #16]	; (8004de0 <FreqAdjustMenuEntryHandler+0x2c>)
 8004dce:	2200      	movs	r2, #0
 8004dd0:	701a      	strb	r2, [r3, #0]
	return Freq_Adjust_Menu_State;
 8004dd2:	230c      	movs	r3, #12
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	bd80      	pop	{r7, pc}
 8004dd8:	40013400 	.word	0x40013400
 8004ddc:	40012c00 	.word	0x40012c00
 8004de0:	200020d2 	.word	0x200020d2

08004de4 <FreqAdjustMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuInputHandler()
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqAdjustMenuInputHandler Event captured\n");
	#endif

	FreqO_AdjustFreq();
 8004de8:	f000 fd70 	bl	80058cc <FreqO_AdjustFreq>

	// stay in this state
	eNewEvent = evIdle;
 8004dec:	4b02      	ldr	r3, [pc, #8]	; (8004df8 <FreqAdjustMenuInputHandler+0x14>)
 8004dee:	2200      	movs	r2, #0
 8004df0:	701a      	strb	r2, [r3, #0]
	return Freq_Adjust_Menu_State;
 8004df2:	230c      	movs	r3, #12
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	bd80      	pop	{r7, pc}
 8004df8:	200020d2 	.word	0x200020d2

08004dfc <FreqAdjustMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuExitHandler()
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqAdjustMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004e00:	f7fc fd10 	bl	8001824 <DM_RefreshScreen>

	// back to main freq menu
	eNewEvent = evIdle;
 8004e04:	4b02      	ldr	r3, [pc, #8]	; (8004e10 <FreqAdjustMenuExitHandler+0x14>)
 8004e06:	2200      	movs	r2, #0
 8004e08:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8004e0a:	230a      	movs	r3, #10
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	bd80      	pop	{r7, pc}
 8004e10:	200020d2 	.word	0x200020d2

08004e14 <FreqPrescalerMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPrescalerMenuEntryHandler()
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqPrescalerMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004e18:	f7fc fd04 	bl	8001824 <DM_RefreshScreen>

	// set rotary encoder limit to full scale and midway starting position
	ENCODER_TIMER->CNT = 32768;
 8004e1c:	4b06      	ldr	r3, [pc, #24]	; (8004e38 <FreqPrescalerMenuEntryHandler+0x24>)
 8004e1e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004e22:	625a      	str	r2, [r3, #36]	; 0x24
	ENCODER_TIMER->ARR = 65535;
 8004e24:	4b04      	ldr	r3, [pc, #16]	; (8004e38 <FreqPrescalerMenuEntryHandler+0x24>)
 8004e26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e2a:	62da      	str	r2, [r3, #44]	; 0x2c

	// stay in this state
	eNewEvent = evIdle;
 8004e2c:	4b03      	ldr	r3, [pc, #12]	; (8004e3c <FreqPrescalerMenuEntryHandler+0x28>)
 8004e2e:	2200      	movs	r2, #0
 8004e30:	701a      	strb	r2, [r3, #0]
	return Freq_Prescaler_Menu_State;
 8004e32:	230e      	movs	r3, #14
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	bd80      	pop	{r7, pc}
 8004e38:	40012c00 	.word	0x40012c00
 8004e3c:	200020d2 	.word	0x200020d2

08004e40 <FreqPrescalerMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPrescalerMenuInputHandler()
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqPrescalerMenuInputHandler Event captured\n");
	#endif

	FreqO_AdjustPrescaler();
 8004e44:	f000 fd6e 	bl	8005924 <FreqO_AdjustPrescaler>

	// stay in this state
	eNewEvent = evIdle;
 8004e48:	4b02      	ldr	r3, [pc, #8]	; (8004e54 <FreqPrescalerMenuInputHandler+0x14>)
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	701a      	strb	r2, [r3, #0]
	return Freq_Prescaler_Menu_State;
 8004e4e:	230e      	movs	r3, #14
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	bd80      	pop	{r7, pc}
 8004e54:	200020d2 	.word	0x200020d2

08004e58 <FreqPrescalerMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPrescalerMenuExitHandler()
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqPrescalerMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004e5c:	f7fc fce2 	bl	8001824 <DM_RefreshScreen>

	// back to main freq menu
	eNewEvent = evIdle;
 8004e60:	4b02      	ldr	r3, [pc, #8]	; (8004e6c <FreqPrescalerMenuExitHandler+0x14>)
 8004e62:	2200      	movs	r2, #0
 8004e64:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8004e66:	230a      	movs	r3, #10
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	bd80      	pop	{r7, pc}
 8004e6c:	200020d2 	.word	0x200020d2

08004e70 <FuncMainMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncMainMenuEntryHandler(void)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncMainMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004e74:	f7fc fcd6 	bl	8001824 <DM_RefreshScreen>

	//_setFuncMenuStatus(ENABLE_FUNC_MAIN_MENU);

	eNewEvent = evIdle;
 8004e78:	4b02      	ldr	r3, [pc, #8]	; (8004e84 <FuncMainMenuEntryHandler+0x14>)
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 8004e7e:	2303      	movs	r3, #3
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	bd80      	pop	{r7, pc}
 8004e84:	200020d2 	.word	0x200020d2

08004e88 <FuncMainMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncMainMenuExitHandler()
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncMainMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004e8c:	f7fc fcca 	bl	8001824 <DM_RefreshScreen>

	#ifdef EVENT_MENU_DEBUG
		  printf("returning to Idle State\n");
	#endif

	eNewEvent = evIdle;
 8004e90:	4b02      	ldr	r3, [pc, #8]	; (8004e9c <FuncMainMenuExitHandler+0x14>)
 8004e92:	2200      	movs	r2, #0
 8004e94:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 8004e96:	2301      	movs	r3, #1
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	bd80      	pop	{r7, pc}
 8004e9c:	200020d2 	.word	0x200020d2

08004ea0 <FuncSignalMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuEntryHandler(void)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncSignalMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004ea4:	f7fc fcbe 	bl	8001824 <DM_RefreshScreen>
	FuncO_ResetLastEncoderValue();
 8004ea8:	f000 fee0 	bl	8005c6c <FuncO_ResetLastEncoderValue>

	ENCODER_TIMER->CNT = 32768;
 8004eac:	4b06      	ldr	r3, [pc, #24]	; (8004ec8 <FuncSignalMenuEntryHandler+0x28>)
 8004eae:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004eb2:	625a      	str	r2, [r3, #36]	; 0x24
	ENCODER_TIMER->ARR = 65535;
 8004eb4:	4b04      	ldr	r3, [pc, #16]	; (8004ec8 <FuncSignalMenuEntryHandler+0x28>)
 8004eb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004eba:	62da      	str	r2, [r3, #44]	; 0x2c

	eNewEvent = evIdle;
 8004ebc:	4b03      	ldr	r3, [pc, #12]	; (8004ecc <FuncSignalMenuEntryHandler+0x2c>)
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	701a      	strb	r2, [r3, #0]
	return Func_Signal_Menu_State;
 8004ec2:	2304      	movs	r3, #4
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	40012c00 	.word	0x40012c00
 8004ecc:	200020d2 	.word	0x200020d2

08004ed0 <FuncSignalMenuInputHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuInputHandler(void)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncSignalMenuInputHandler Event captured\n");
	#endif

	FuncO_MapEncoderPositionToSignalOutput(SM_GetEncoderValue(ENCODER_NORMAL));
 8004ed4:	2000      	movs	r0, #0
 8004ed6:	f001 ffb5 	bl	8006e44 <SM_GetEncoderValue>
 8004eda:	4603      	mov	r3, r0
 8004edc:	4618      	mov	r0, r3
 8004ede:	f000 fed1 	bl	8005c84 <FuncO_MapEncoderPositionToSignalOutput>

	eNewEvent = evIdle;
 8004ee2:	4b03      	ldr	r3, [pc, #12]	; (8004ef0 <FuncSignalMenuInputHandler+0x20>)
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	701a      	strb	r2, [r3, #0]
	return Func_Signal_Menu_State;
 8004ee8:	2304      	movs	r3, #4
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	200020d2 	.word	0x200020d2

08004ef4 <FuncSignalMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuExitHandler()
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncSignalMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004ef8:	f7fc fc94 	bl	8001824 <DM_RefreshScreen>
	SM_ResetFuncPwmDutyMode();
 8004efc:	f002 f844 	bl	8006f88 <SM_ResetFuncPwmDutyMode>
	eNewEvent = evIdle;
 8004f00:	4b02      	ldr	r3, [pc, #8]	; (8004f0c <FuncSignalMenuExitHandler+0x18>)
 8004f02:	2200      	movs	r2, #0
 8004f04:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 8004f06:	2303      	movs	r3, #3
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	bd80      	pop	{r7, pc}
 8004f0c:	200020d2 	.word	0x200020d2

08004f10 <FuncAuxMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncAuxMenuEntryHandler(void)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncAuxMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004f14:	f7fc fc86 	bl	8001824 <DM_RefreshScreen>
	FuncO_ResetLastEncoderValue();
 8004f18:	f000 fea8 	bl	8005c6c <FuncO_ResetLastEncoderValue>

	ENCODER_TIMER->CNT = 32768;
 8004f1c:	4b06      	ldr	r3, [pc, #24]	; (8004f38 <FuncAuxMenuEntryHandler+0x28>)
 8004f1e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004f22:	625a      	str	r2, [r3, #36]	; 0x24
	ENCODER_TIMER->ARR = 65535;
 8004f24:	4b04      	ldr	r3, [pc, #16]	; (8004f38 <FuncAuxMenuEntryHandler+0x28>)
 8004f26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004f2a:	62da      	str	r2, [r3, #44]	; 0x2c

	eNewEvent = evIdle;
 8004f2c:	4b03      	ldr	r3, [pc, #12]	; (8004f3c <FuncAuxMenuEntryHandler+0x2c>)
 8004f2e:	2200      	movs	r2, #0
 8004f30:	701a      	strb	r2, [r3, #0]
	return Func_Aux_Menu_State;
 8004f32:	2305      	movs	r3, #5
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	bd80      	pop	{r7, pc}
 8004f38:	40012c00 	.word	0x40012c00
 8004f3c:	200020d2 	.word	0x200020d2

08004f40 <FuncAuxMenuInputHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncAuxMenuInputHandler(void)
{
 8004f40:	b590      	push	{r4, r7, lr}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncAuxMenuInputHandler Event captured\n");
	#endif

	// PWM ADJUST
	if(SM_IsFuncPwmDutyMode())
 8004f46:	f002 f803 	bl	8006f50 <SM_IsFuncPwmDutyMode>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d01a      	beq.n	8004f86 <FuncAuxMenuInputHandler+0x46>
	{
		uint16_t enc_value = SM_GetEncoderValue(ENCODER_NORMAL);
 8004f50:	2000      	movs	r0, #0
 8004f52:	f001 ff77 	bl	8006e44 <SM_GetEncoderValue>
 8004f56:	4603      	mov	r3, r0
 8004f58:	80fb      	strh	r3, [r7, #6]
		PWM_AUX_OUT_TIM->CCR1 = (pow(enc_value, 2));
 8004f5a:	88fb      	ldrh	r3, [r7, #6]
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f7fb faf9 	bl	8000554 <__aeabi_ui2d>
 8004f62:	4603      	mov	r3, r0
 8004f64:	460c      	mov	r4, r1
 8004f66:	ed9f 1b10 	vldr	d1, [pc, #64]	; 8004fa8 <FuncAuxMenuInputHandler+0x68>
 8004f6a:	ec44 3b10 	vmov	d0, r3, r4
 8004f6e:	f00f f98b 	bl	8014288 <pow>
 8004f72:	ec53 2b10 	vmov	r2, r3, d0
 8004f76:	4c0e      	ldr	r4, [pc, #56]	; (8004fb0 <FuncAuxMenuInputHandler+0x70>)
 8004f78:	4610      	mov	r0, r2
 8004f7a:	4619      	mov	r1, r3
 8004f7c:	f7fb fe3c 	bl	8000bf8 <__aeabi_d2uiz>
 8004f80:	4603      	mov	r3, r0
 8004f82:	6363      	str	r3, [r4, #52]	; 0x34
 8004f84:	e006      	b.n	8004f94 <FuncAuxMenuInputHandler+0x54>
	}
	else
	{
		FuncO_MapEncoderPositionToAuxOutput(SM_GetEncoderValue(ENCODER_NORMAL));
 8004f86:	2000      	movs	r0, #0
 8004f88:	f001 ff5c 	bl	8006e44 <SM_GetEncoderValue>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f000 feb2 	bl	8005cf8 <FuncO_MapEncoderPositionToAuxOutput>
	}

	eNewEvent = evIdle;
 8004f94:	4b07      	ldr	r3, [pc, #28]	; (8004fb4 <FuncAuxMenuInputHandler+0x74>)
 8004f96:	2200      	movs	r2, #0
 8004f98:	701a      	strb	r2, [r3, #0]
	return Func_Aux_Menu_State;
 8004f9a:	2305      	movs	r3, #5
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	370c      	adds	r7, #12
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd90      	pop	{r4, r7, pc}
 8004fa4:	f3af 8000 	nop.w
 8004fa8:	00000000 	.word	0x00000000
 8004fac:	40000000 	.word	0x40000000
 8004fb0:	40000400 	.word	0x40000400
 8004fb4:	200020d2 	.word	0x200020d2

08004fb8 <FuncAuxToggleDutyMode>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FuncAuxToggleDutyMode()
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	af00      	add	r7, sp, #0
	SM_ToggleFuncPwmDutyMode();
 8004fbc:	f001 ffd4 	bl	8006f68 <SM_ToggleFuncPwmDutyMode>
	ENCODER_TIMER->ARR = 16384;
 8004fc0:	4b04      	ldr	r3, [pc, #16]	; (8004fd4 <FuncAuxToggleDutyMode+0x1c>)
 8004fc2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004fc6:	62da      	str	r2, [r3, #44]	; 0x2c
	eNewEvent = evIdle;
 8004fc8:	4b03      	ldr	r3, [pc, #12]	; (8004fd8 <FuncAuxToggleDutyMode+0x20>)
 8004fca:	2200      	movs	r2, #0
 8004fcc:	701a      	strb	r2, [r3, #0]
	return Func_Aux_Menu_State;
 8004fce:	2305      	movs	r3, #5
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	bd80      	pop	{r7, pc}
 8004fd4:	40012c00 	.word	0x40012c00
 8004fd8:	200020d2 	.word	0x200020d2

08004fdc <FuncAuxMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncAuxMenuExitHandler()
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncAuxMenuExitHandler Event captured\n");
	#endif

	SM_ResetFuncPwmDutyMode();
 8004fe0:	f001 ffd2 	bl	8006f88 <SM_ResetFuncPwmDutyMode>
	DM_RefreshScreen();
 8004fe4:	f7fc fc1e 	bl	8001824 <DM_RefreshScreen>

	eNewEvent = evIdle;
 8004fe8:	4b02      	ldr	r3, [pc, #8]	; (8004ff4 <FuncAuxMenuExitHandler+0x18>)
 8004fea:	2200      	movs	r2, #0
 8004fec:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 8004fee:	2303      	movs	r3, #3
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	bd80      	pop	{r7, pc}
 8004ff4:	200020d2 	.word	0x200020d2

08004ff8 <GainMainMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainMainMenuEntryHandler()
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainMainMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004ffc:	f7fc fc12 	bl	8001824 <DM_RefreshScreen>

	eNewEvent = evIdle;
 8005000:	4b02      	ldr	r3, [pc, #8]	; (800500c <GainMainMenuEntryHandler+0x14>)
 8005002:	2200      	movs	r2, #0
 8005004:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 8005006:	2306      	movs	r3, #6
}
 8005008:	4618      	mov	r0, r3
 800500a:	bd80      	pop	{r7, pc}
 800500c:	200020d2 	.word	0x200020d2

08005010 <GainMainMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainMainMenuExitHandler()
{
 8005010:	b580      	push	{r7, lr}
 8005012:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainMainMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8005014:	f7fc fc06 	bl	8001824 <DM_RefreshScreen>

	#ifdef EVENT_MENU_DEBUG
		  printf("returning to Idle State\n");
	#endif

	eNewEvent = evIdle;
 8005018:	4b02      	ldr	r3, [pc, #8]	; (8005024 <GainMainMenuExitHandler+0x14>)
 800501a:	2200      	movs	r2, #0
 800501c:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 800501e:	2301      	movs	r3, #1
}
 8005020:	4618      	mov	r0, r3
 8005022:	bd80      	pop	{r7, pc}
 8005024:	200020d2 	.word	0x200020d2

08005028 <GainSignalMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuEntryHandler()
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b082      	sub	sp, #8
 800502c:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainSignalMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 800502e:	f7fc fbf9 	bl	8001824 <DM_RefreshScreen>
	GO_ResetLastEncoderValue();
 8005032:	f001 f857 	bl	80060e4 <GO_ResetLastEncoderValue>
	VPP_ResetLastEncoderValue();
 8005036:	f001 ffb3 	bl	8006fa0 <VPP_ResetLastEncoderValue>

	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile;
 800503a:	2000      	movs	r0, #0
 800503c:	f001 fc86 	bl	800694c <SM_GetOutputChannel>
 8005040:	4603      	mov	r3, r0
 8005042:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8005046:	607b      	str	r3, [r7, #4]

	if(pTmpVppPreset)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d008      	beq.n	8005060 <GainSignalMenuEntryHandler+0x38>
	{
		// set to full range and mid starting position
		ENCODER_TIMER->CNT = 32768;
 800504e:	4b0a      	ldr	r3, [pc, #40]	; (8005078 <GainSignalMenuEntryHandler+0x50>)
 8005050:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005054:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = 65535;
 8005056:	4b08      	ldr	r3, [pc, #32]	; (8005078 <GainSignalMenuEntryHandler+0x50>)
 8005058:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800505c:	62da      	str	r2, [r3, #44]	; 0x2c
 800505e:	e002      	b.n	8005066 <GainSignalMenuEntryHandler+0x3e>
	}
	else
	{
		DM_SetErrorDebugMsg("GainMainMenuEntryHandler: pVppPresetTmp null pointer");
 8005060:	4806      	ldr	r0, [pc, #24]	; (800507c <GainSignalMenuEntryHandler+0x54>)
 8005062:	f7fc fc25 	bl	80018b0 <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 8005066:	4b06      	ldr	r3, [pc, #24]	; (8005080 <GainSignalMenuEntryHandler+0x58>)
 8005068:	2200      	movs	r2, #0
 800506a:	701a      	strb	r2, [r3, #0]
	return Gain_Signal_Menu_State;
 800506c:	2307      	movs	r3, #7
}
 800506e:	4618      	mov	r0, r3
 8005070:	3708      	adds	r7, #8
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
 8005076:	bf00      	nop
 8005078:	40012c00 	.word	0x40012c00
 800507c:	08015d30 	.word	0x08015d30
 8005080:	200020d2 	.word	0x200020d2

08005084 <GainSignalMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuInputHandler(eSystemEvent pEvent)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b084      	sub	sp, #16
 8005088:	af00      	add	r7, sp, #0
 800508a:	4603      	mov	r3, r0
 800508c:	71fb      	strb	r3, [r7, #7]
	#ifdef EVENT_MENU_DEBUG
		printf("GainSignalMenuInputHandler Event captured\n");
	#endif


	FunctionProfile_t *tmpFuncProfile = SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile;
 800508e:	2000      	movs	r0, #0
 8005090:	f001 fc5c 	bl	800694c <SM_GetOutputChannel>
 8005094:	4603      	mov	r3, r0
 8005096:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 800509a:	60fb      	str	r3, [r7, #12]

	switch(pEvent)
 800509c:	79fb      	ldrb	r3, [r7, #7]
 800509e:	3b01      	subs	r3, #1
 80050a0:	2b04      	cmp	r3, #4
 80050a2:	d834      	bhi.n	800510e <GainSignalMenuInputHandler+0x8a>
 80050a4:	a201      	add	r2, pc, #4	; (adr r2, 80050ac <GainSignalMenuInputHandler+0x28>)
 80050a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050aa:	bf00      	nop
 80050ac:	080050ef 	.word	0x080050ef
 80050b0:	080050f7 	.word	0x080050f7
 80050b4:	080050ff 	.word	0x080050ff
 80050b8:	08005107 	.word	0x08005107
 80050bc:	080050c1 	.word	0x080050c1
	{
		case evEncoderSet:

			if(tmpFuncProfile)
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d025      	beq.n	8005112 <GainSignalMenuInputHandler+0x8e>
			{
				if(tmpFuncProfile->func == PWM_FUNC_MODE)
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	781b      	ldrb	r3, [r3, #0]
 80050ca:	2b06      	cmp	r3, #6
 80050cc:	d107      	bne.n	80050de <GainSignalMenuInputHandler+0x5a>
				{
					GO_MapEncoderPositionToSignalOutput(SM_GetEncoderValue(ENCODER_INVERSE));
 80050ce:	2001      	movs	r0, #1
 80050d0:	f001 feb8 	bl	8006e44 <SM_GetEncoderValue>
 80050d4:	4603      	mov	r3, r0
 80050d6:	4618      	mov	r0, r3
 80050d8:	f001 f810 	bl	80060fc <GO_MapEncoderPositionToSignalOutput>
				else
				{
					VPP_MapEncoderPositionToSignalOutput(SM_GetEncoderValue(ENCODER_NORMAL));
				}
			}
			break;
 80050dc:	e019      	b.n	8005112 <GainSignalMenuInputHandler+0x8e>
					VPP_MapEncoderPositionToSignalOutput(SM_GetEncoderValue(ENCODER_NORMAL));
 80050de:	2000      	movs	r0, #0
 80050e0:	f001 feb0 	bl	8006e44 <SM_GetEncoderValue>
 80050e4:	4603      	mov	r3, r0
 80050e6:	4618      	mov	r0, r3
 80050e8:	f002 f8cc 	bl	8007284 <VPP_MapEncoderPositionToSignalOutput>
			break;
 80050ec:	e011      	b.n	8005112 <GainSignalMenuInputHandler+0x8e>

		case evBlueBtn:
			VPP_ApplyProfileToSignal(VPP18);
 80050ee:	2011      	movs	r0, #17
 80050f0:	f001 ff62 	bl	8006fb8 <VPP_ApplyProfileToSignal>
			break;
 80050f4:	e00e      	b.n	8005114 <GainSignalMenuInputHandler+0x90>

		case evGreenBtn:
			VPP_ApplyProfileToSignal(VPP33);
 80050f6:	2020      	movs	r0, #32
 80050f8:	f001 ff5e 	bl	8006fb8 <VPP_ApplyProfileToSignal>
			break;
 80050fc:	e00a      	b.n	8005114 <GainSignalMenuInputHandler+0x90>

		case evYellowBtn:
			VPP_ApplyProfileToSignal(VPP50);
 80050fe:	2031      	movs	r0, #49	; 0x31
 8005100:	f001 ff5a 	bl	8006fb8 <VPP_ApplyProfileToSignal>
			break;
 8005104:	e006      	b.n	8005114 <GainSignalMenuInputHandler+0x90>

		case evRedBtn:
			VPP_ApplyProfileToSignal(VPP90);
 8005106:	2059      	movs	r0, #89	; 0x59
 8005108:	f001 ff56 	bl	8006fb8 <VPP_ApplyProfileToSignal>
			break;
 800510c:	e002      	b.n	8005114 <GainSignalMenuInputHandler+0x90>

		default:
			break;
 800510e:	bf00      	nop
 8005110:	e000      	b.n	8005114 <GainSignalMenuInputHandler+0x90>
			break;
 8005112:	bf00      	nop
	}

	eNewEvent = evIdle;
 8005114:	4b03      	ldr	r3, [pc, #12]	; (8005124 <GainSignalMenuInputHandler+0xa0>)
 8005116:	2200      	movs	r2, #0
 8005118:	701a      	strb	r2, [r3, #0]
	return Gain_Signal_Menu_State;
 800511a:	2307      	movs	r3, #7
}
 800511c:	4618      	mov	r0, r3
 800511e:	3710      	adds	r7, #16
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}
 8005124:	200020d2 	.word	0x200020d2

08005128 <GainSignalMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuExitHandler()
{
 8005128:	b580      	push	{r7, lr}
 800512a:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainSignalMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 800512c:	f7fc fb7a 	bl	8001824 <DM_RefreshScreen>

	eNewEvent = evIdle;
 8005130:	4b02      	ldr	r3, [pc, #8]	; (800513c <GainSignalMenuExitHandler+0x14>)
 8005132:	2200      	movs	r2, #0
 8005134:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 8005136:	2306      	movs	r3, #6
}
 8005138:	4618      	mov	r0, r3
 800513a:	bd80      	pop	{r7, pc}
 800513c:	200020d2 	.word	0x200020d2

08005140 <GainAuxMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainAuxMenuEntryHandler()
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b082      	sub	sp, #8
 8005144:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainAuxMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8005146:	f7fc fb6d 	bl	8001824 <DM_RefreshScreen>
	VPP_ResetLastEncoderValue();
 800514a:	f001 ff29 	bl	8006fa0 <VPP_ResetLastEncoderValue>

	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(AUX_CHANNEL)->amp_profile;
 800514e:	2001      	movs	r0, #1
 8005150:	f001 fbfc 	bl	800694c <SM_GetOutputChannel>
 8005154:	4603      	mov	r3, r0
 8005156:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 800515a:	607b      	str	r3, [r7, #4]

	if(pTmpVppPreset)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d008      	beq.n	8005174 <GainAuxMenuEntryHandler+0x34>
	{
		// set to full range and mid starting position
		ENCODER_TIMER->CNT = 32768;
 8005162:	4b0a      	ldr	r3, [pc, #40]	; (800518c <GainAuxMenuEntryHandler+0x4c>)
 8005164:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005168:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = 65535;
 800516a:	4b08      	ldr	r3, [pc, #32]	; (800518c <GainAuxMenuEntryHandler+0x4c>)
 800516c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005170:	62da      	str	r2, [r3, #44]	; 0x2c
 8005172:	e002      	b.n	800517a <GainAuxMenuEntryHandler+0x3a>
	}
	else
	{
		DM_SetErrorDebugMsg("GainMainMenuEntryHandler: pVppPresetTmp null pointer");
 8005174:	4806      	ldr	r0, [pc, #24]	; (8005190 <GainAuxMenuEntryHandler+0x50>)
 8005176:	f7fc fb9b 	bl	80018b0 <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 800517a:	4b06      	ldr	r3, [pc, #24]	; (8005194 <GainAuxMenuEntryHandler+0x54>)
 800517c:	2200      	movs	r2, #0
 800517e:	701a      	strb	r2, [r3, #0]
	return Gain_Aux_Menu_State;
 8005180:	2308      	movs	r3, #8
}
 8005182:	4618      	mov	r0, r3
 8005184:	3708      	adds	r7, #8
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	40012c00 	.word	0x40012c00
 8005190:	08015d30 	.word	0x08015d30
 8005194:	200020d2 	.word	0x200020d2

08005198 <GainAuxMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainAuxMenuInputHandler()
{
 8005198:	b580      	push	{r7, lr}
 800519a:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainAuxMenuInputHandler Event captured\n");
	#endif

	VPP_MapEncoderPositionToAuxOutput(SM_GetEncoderValue(ENCODER_NORMAL));
 800519c:	2000      	movs	r0, #0
 800519e:	f001 fe51 	bl	8006e44 <SM_GetEncoderValue>
 80051a2:	4603      	mov	r3, r0
 80051a4:	4618      	mov	r0, r3
 80051a6:	f002 f8a7 	bl	80072f8 <VPP_MapEncoderPositionToAuxOutput>

	eNewEvent = evYellowBtn;
 80051aa:	4b03      	ldr	r3, [pc, #12]	; (80051b8 <GainAuxMenuInputHandler+0x20>)
 80051ac:	2203      	movs	r2, #3
 80051ae:	701a      	strb	r2, [r3, #0]
	return Gain_Aux_Menu_State;
 80051b0:	2308      	movs	r3, #8
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	bd80      	pop	{r7, pc}
 80051b6:	bf00      	nop
 80051b8:	200020d2 	.word	0x200020d2

080051bc <GainAuxMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainAuxMenuExitHandler()
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainAuxMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 80051c0:	f7fc fb30 	bl	8001824 <DM_RefreshScreen>

	eNewEvent = evIdle;
 80051c4:	4b02      	ldr	r3, [pc, #8]	; (80051d0 <GainAuxMenuExitHandler+0x14>)
 80051c6:	2200      	movs	r2, #0
 80051c8:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 80051ca:	2306      	movs	r3, #6
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	bd80      	pop	{r7, pc}
 80051d0:	200020d2 	.word	0x200020d2

080051d4 <ToplevelOutputMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelOutputMenuEntryHandler()
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("ToplevelOutputMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 80051d8:	f7fc fb24 	bl	8001824 <DM_RefreshScreen>

	// stay in this state
	eNewEvent = evIdle;
 80051dc:	4b02      	ldr	r3, [pc, #8]	; (80051e8 <ToplevelOutputMenuEntryHandler+0x14>)
 80051de:	2200      	movs	r2, #0
 80051e0:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 80051e2:	2301      	movs	r3, #1
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	bd80      	pop	{r7, pc}
 80051e8:	200020d2 	.word	0x200020d2

080051ec <ToplevelOutputMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelOutputMenuExitHandler()
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("ToplevelOutputMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 80051f0:	f7fc fb18 	bl	8001824 <DM_RefreshScreen>

	// back to main freq menu
	eNewEvent = evIdle;
 80051f4:	4b02      	ldr	r3, [pc, #8]	; (8005200 <ToplevelOutputMenuExitHandler+0x14>)
 80051f6:	2200      	movs	r2, #0
 80051f8:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 80051fa:	2300      	movs	r3, #0
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	bd80      	pop	{r7, pc}
 8005200:	200020d2 	.word	0x200020d2

08005204 <ToplevelInputMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelInputMenuEntryHandler()
{
 8005204:	b580      	push	{r7, lr}
 8005206:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("ToplevelInputMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8005208:	f7fc fb0c 	bl	8001824 <DM_RefreshScreen>

	// stay in this state
	eNewEvent = evIdle;
 800520c:	4b02      	ldr	r3, [pc, #8]	; (8005218 <ToplevelInputMenuEntryHandler+0x14>)
 800520e:	2200      	movs	r2, #0
 8005210:	701a      	strb	r2, [r3, #0]
	return Toplevel_Input_Menu_State;
 8005212:	2302      	movs	r3, #2
}
 8005214:	4618      	mov	r0, r3
 8005216:	bd80      	pop	{r7, pc}
 8005218:	200020d2 	.word	0x200020d2

0800521c <ToplevelInputMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelInputMenuInputHandler(eSystemEvent pEvent)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b082      	sub	sp, #8
 8005220:	af00      	add	r7, sp, #0
 8005222:	4603      	mov	r3, r0
 8005224:	71fb      	strb	r3, [r7, #7]
	#ifdef EVENT_MENU_DEBUG
		printf("ToplevelInputMenuInputHandler Event captured\n");
	#endif


		switch(pEvent)
 8005226:	79fb      	ldrb	r3, [r7, #7]
 8005228:	2b01      	cmp	r3, #1
 800522a:	d002      	beq.n	8005232 <ToplevelInputMenuInputHandler+0x16>
 800522c:	2b02      	cmp	r3, #2
 800522e:	d003      	beq.n	8005238 <ToplevelInputMenuInputHandler+0x1c>
				// re-enable the trigger input for new mode
				ToplevelInputMenuInputHandler(evBlueBtn);
				break;

			default:
				break;
 8005230:	e00b      	b.n	800524a <ToplevelInputMenuInputHandler+0x2e>
				IT_ArbitrateInputTrigger();
 8005232:	f001 f84f 	bl	80062d4 <IT_ArbitrateInputTrigger>
				break;
 8005236:	e008      	b.n	800524a <ToplevelInputMenuInputHandler+0x2e>
				IT_CycleInputTriggerMode();
 8005238:	f001 f902 	bl	8006440 <IT_CycleInputTriggerMode>
				ToplevelInputMenuInputHandler(evBlueBtn);
 800523c:	2001      	movs	r0, #1
 800523e:	f7ff ffed 	bl	800521c <ToplevelInputMenuInputHandler>
				ToplevelInputMenuInputHandler(evBlueBtn);
 8005242:	2001      	movs	r0, #1
 8005244:	f7ff ffea 	bl	800521c <ToplevelInputMenuInputHandler>
				break;
 8005248:	bf00      	nop
		}
	// stay in this menu state
	eNewEvent = evIdle;
 800524a:	4b04      	ldr	r3, [pc, #16]	; (800525c <ToplevelInputMenuInputHandler+0x40>)
 800524c:	2200      	movs	r2, #0
 800524e:	701a      	strb	r2, [r3, #0]
	return Toplevel_Input_Menu_State;
 8005250:	2302      	movs	r3, #2
}
 8005252:	4618      	mov	r0, r3
 8005254:	3708      	adds	r7, #8
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
 800525a:	bf00      	nop
 800525c:	200020d2 	.word	0x200020d2

08005260 <ToplevelInputMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelInputMenuExitHandler()
{
 8005260:	b580      	push	{r7, lr}
 8005262:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("ToplevelInputMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8005264:	f7fc fade 	bl	8001824 <DM_RefreshScreen>

	// back to main freq menu
	eNewEvent = evIdle;
 8005268:	4b02      	ldr	r3, [pc, #8]	; (8005274 <ToplevelInputMenuExitHandler+0x14>)
 800526a:	2200      	movs	r2, #0
 800526c:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 800526e:	2300      	movs	r3, #0
}
 8005270:	4618      	mov	r0, r3
 8005272:	bd80      	pop	{r7, pc}
 8005274:	200020d2 	.word	0x200020d2

08005278 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8005278:	b480      	push	{r7}
 800527a:	b083      	sub	sp, #12
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8005280:	4b07      	ldr	r3, [pc, #28]	; (80052a0 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8005282:	695a      	ldr	r2, [r3, #20]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	4013      	ands	r3, r2
 8005288:	687a      	ldr	r2, [r7, #4]
 800528a:	429a      	cmp	r2, r3
 800528c:	d101      	bne.n	8005292 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 800528e:	2301      	movs	r3, #1
 8005290:	e000      	b.n	8005294 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8005292:	2300      	movs	r3, #0
}
 8005294:	4618      	mov	r0, r3
 8005296:	370c      	adds	r7, #12
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr
 80052a0:	40010400 	.word	0x40010400

080052a4 <IM_Init>:
uint16_t encbtn_last_interrupt_time = 0;
uint16_t encpos_last_interrupt_time = 0;


void IM_Init()
{
 80052a4:	b480      	push	{r7}
 80052a6:	af00      	add	r7, sp, #0
	  // debounce timer
	  DEBOUNCE_TIMER->CR1 |= TIM_CR1_CEN;
 80052a8:	4b05      	ldr	r3, [pc, #20]	; (80052c0 <IM_Init+0x1c>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a04      	ldr	r2, [pc, #16]	; (80052c0 <IM_Init+0x1c>)
 80052ae:	f043 0301 	orr.w	r3, r3, #1
 80052b2:	6013      	str	r3, [r2, #0]



}
 80052b4:	bf00      	nop
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr
 80052be:	bf00      	nop
 80052c0:	40014400 	.word	0x40014400

080052c4 <IM_SWEEP_UPDATE_TIM_IRQHandler>:
 *	@param None
 *	@retval None
 *
 */
void IM_SWEEP_UPDATE_TIM_IRQHandler()
{
 80052c4:	b480      	push	{r7}
 80052c6:	af00      	add	r7, sp, #0
	#ifdef ENABLE_PWM_SWEEP
		eOutput_mode tmpOut = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
	#endif	//ENABLE_PWM_SWEEP

		// upcounter (decreasing freq)
	if((SWEEP_TIMER->CR1 & TIM_CR1_DIR) == TIM_CR1_DIR)
 80052c8:	4b26      	ldr	r3, [pc, #152]	; (8005364 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa0>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f003 0310 	and.w	r3, r3, #16
 80052d0:	2b10      	cmp	r3, #16
 80052d2:	d11c      	bne.n	800530e <IM_SWEEP_UPDATE_TIM_IRQHandler+0x4a>
	{
		// if we reach lower freq limit for sweep, reset to highest freq limit
		if(OUTPUT_TIMER->ARR >= sweep_upper_bounds_longest_output_arr)
 80052d4:	4b24      	ldr	r3, [pc, #144]	; (8005368 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 80052d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d8:	ee07 3a90 	vmov	s15, r3
 80052dc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80052e0:	4b22      	ldr	r3, [pc, #136]	; (800536c <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa8>)
 80052e2:	edd3 7a00 	vldr	s15, [r3]
 80052e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80052ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052ee:	db09      	blt.n	8005304 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x40>
		{
			OUTPUT_TIMER->ARR = sweep_lower_bounds_shortest_output_arr;
 80052f0:	4b1f      	ldr	r3, [pc, #124]	; (8005370 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xac>)
 80052f2:	edd3 7a00 	vldr	s15, [r3]
 80052f6:	4b1c      	ldr	r3, [pc, #112]	; (8005368 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 80052f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052fc:	ee17 2a90 	vmov	r2, s15
 8005300:	62da      	str	r2, [r3, #44]	; 0x2c
			}
		}
	}

	//SWEEP_TIMER->ARR--;
}
 8005302:	e029      	b.n	8005358 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x94>
			OUTPUT_TIMER->ARR++;
 8005304:	4b18      	ldr	r3, [pc, #96]	; (8005368 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8005306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005308:	3201      	adds	r2, #1
 800530a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800530c:	e024      	b.n	8005358 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x94>
		if(OUTPUT_TIMER->ARR == 0x1U)
 800530e:	4b16      	ldr	r3, [pc, #88]	; (8005368 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8005310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005312:	2b01      	cmp	r3, #1
 8005314:	d104      	bne.n	8005320 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x5c>
			OUTPUT_TIMER->ARR = MAX_OUTPUT_ARR;
 8005316:	4b14      	ldr	r3, [pc, #80]	; (8005368 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8005318:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800531c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800531e:	e01b      	b.n	8005358 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x94>
			if(OUTPUT_TIMER->ARR <= sweep_lower_bounds_shortest_output_arr)
 8005320:	4b11      	ldr	r3, [pc, #68]	; (8005368 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8005322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005324:	ee07 3a90 	vmov	s15, r3
 8005328:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800532c:	4b10      	ldr	r3, [pc, #64]	; (8005370 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xac>)
 800532e:	edd3 7a00 	vldr	s15, [r3]
 8005332:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800533a:	d809      	bhi.n	8005350 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x8c>
				OUTPUT_TIMER->ARR = sweep_upper_bounds_longest_output_arr;
 800533c:	4b0b      	ldr	r3, [pc, #44]	; (800536c <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa8>)
 800533e:	edd3 7a00 	vldr	s15, [r3]
 8005342:	4b09      	ldr	r3, [pc, #36]	; (8005368 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8005344:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005348:	ee17 2a90 	vmov	r2, s15
 800534c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800534e:	e003      	b.n	8005358 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x94>
				OUTPUT_TIMER->ARR--;
 8005350:	4b05      	ldr	r3, [pc, #20]	; (8005368 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8005352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005354:	3a01      	subs	r2, #1
 8005356:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005358:	bf00      	nop
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr
 8005362:	bf00      	nop
 8005364:	40000c00 	.word	0x40000c00
 8005368:	40013400 	.word	0x40013400
 800536c:	20000124 	.word	0x20000124
 8005370:	20000120 	.word	0x20000120

08005374 <IM_BTN1_EXTI14_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN1_EXTI14_Handler()
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b082      	sub	sp, #8
 8005378:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 800537a:	4b0f      	ldr	r3, [pc, #60]	; (80053b8 <IM_BTN1_EXTI14_Handler+0x44>)
 800537c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537e:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn1_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 8005380:	88fb      	ldrh	r3, [r7, #6]
 8005382:	4a0e      	ldr	r2, [pc, #56]	; (80053bc <IM_BTN1_EXTI14_Handler+0x48>)
 8005384:	8812      	ldrh	r2, [r2, #0]
 8005386:	1a9b      	subs	r3, r3, r2
 8005388:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800538c:	dd0c      	ble.n	80053a8 <IM_BTN1_EXTI14_Handler+0x34>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14))
 800538e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8005392:	f7ff ff71 	bl	8005278 <LL_EXTI_IsActiveFlag_0_31>
 8005396:	4603      	mov	r3, r0
 8005398:	2b00      	cmp	r3, #0
 800539a:	d005      	beq.n	80053a8 <IM_BTN1_EXTI14_Handler+0x34>
		{

			EM_SetNewEvent(evBlueBtn);
 800539c:	2001      	movs	r0, #1
 800539e:	f7ff fb47 	bl	8004a30 <EM_SetNewEvent>
			printf("'Blue' BTN1_EXTI14_Pin\n");
 80053a2:	4807      	ldr	r0, [pc, #28]	; (80053c0 <IM_BTN1_EXTI14_Handler+0x4c>)
 80053a4:	f00c fe58 	bl	8012058 <puts>
		}
	}
	btn1_last_interrupt_time = interrupt_time;
 80053a8:	4a04      	ldr	r2, [pc, #16]	; (80053bc <IM_BTN1_EXTI14_Handler+0x48>)
 80053aa:	88fb      	ldrh	r3, [r7, #6]
 80053ac:	8013      	strh	r3, [r2, #0]


}
 80053ae:	bf00      	nop
 80053b0:	3708      	adds	r7, #8
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
 80053b6:	bf00      	nop
 80053b8:	40014400 	.word	0x40014400
 80053bc:	200020d6 	.word	0x200020d6
 80053c0:	08015d68 	.word	0x08015d68

080053c4 <IM_BTN2_EXTI15_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN2_EXTI15_Handler()
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b082      	sub	sp, #8
 80053c8:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 80053ca:	4b0f      	ldr	r3, [pc, #60]	; (8005408 <IM_BTN2_EXTI15_Handler+0x44>)
 80053cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ce:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn2_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 80053d0:	88fb      	ldrh	r3, [r7, #6]
 80053d2:	4a0e      	ldr	r2, [pc, #56]	; (800540c <IM_BTN2_EXTI15_Handler+0x48>)
 80053d4:	8812      	ldrh	r2, [r2, #0]
 80053d6:	1a9b      	subs	r3, r3, r2
 80053d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80053dc:	dd0c      	ble.n	80053f8 <IM_BTN2_EXTI15_Handler+0x34>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15))
 80053de:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80053e2:	f7ff ff49 	bl	8005278 <LL_EXTI_IsActiveFlag_0_31>
 80053e6:	4603      	mov	r3, r0
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d005      	beq.n	80053f8 <IM_BTN2_EXTI15_Handler+0x34>
		{
			EM_SetNewEvent(evYellowBtn);
 80053ec:	2003      	movs	r0, #3
 80053ee:	f7ff fb1f 	bl	8004a30 <EM_SetNewEvent>
			printf("'Yellow' BTN2_EXTI15_Pin\n");
 80053f2:	4807      	ldr	r0, [pc, #28]	; (8005410 <IM_BTN2_EXTI15_Handler+0x4c>)
 80053f4:	f00c fe30 	bl	8012058 <puts>
		}
	}
	btn2_last_interrupt_time = interrupt_time;
 80053f8:	4a04      	ldr	r2, [pc, #16]	; (800540c <IM_BTN2_EXTI15_Handler+0x48>)
 80053fa:	88fb      	ldrh	r3, [r7, #6]
 80053fc:	8013      	strh	r3, [r2, #0]


}
 80053fe:	bf00      	nop
 8005400:	3708      	adds	r7, #8
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
 8005406:	bf00      	nop
 8005408:	40014400 	.word	0x40014400
 800540c:	200020d8 	.word	0x200020d8
 8005410:	08015d80 	.word	0x08015d80

08005414 <IM_BTN3_EXTI0_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN3_EXTI0_Handler()
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b082      	sub	sp, #8
 8005418:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 800541a:	4b0e      	ldr	r3, [pc, #56]	; (8005454 <IM_BTN3_EXTI0_Handler+0x40>)
 800541c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800541e:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn3_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 8005420:	88fb      	ldrh	r3, [r7, #6]
 8005422:	4a0d      	ldr	r2, [pc, #52]	; (8005458 <IM_BTN3_EXTI0_Handler+0x44>)
 8005424:	8812      	ldrh	r2, [r2, #0]
 8005426:	1a9b      	subs	r3, r3, r2
 8005428:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800542c:	dd0b      	ble.n	8005446 <IM_BTN3_EXTI0_Handler+0x32>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0))
 800542e:	2001      	movs	r0, #1
 8005430:	f7ff ff22 	bl	8005278 <LL_EXTI_IsActiveFlag_0_31>
 8005434:	4603      	mov	r3, r0
 8005436:	2b00      	cmp	r3, #0
 8005438:	d005      	beq.n	8005446 <IM_BTN3_EXTI0_Handler+0x32>
		{
			EM_SetNewEvent(evRedBtn);
 800543a:	2004      	movs	r0, #4
 800543c:	f7ff faf8 	bl	8004a30 <EM_SetNewEvent>
			printf("'Red' BTN3_EXTI0_Pin\n");
 8005440:	4806      	ldr	r0, [pc, #24]	; (800545c <IM_BTN3_EXTI0_Handler+0x48>)
 8005442:	f00c fe09 	bl	8012058 <puts>
		}
	}
	btn3_last_interrupt_time = interrupt_time;
 8005446:	4a04      	ldr	r2, [pc, #16]	; (8005458 <IM_BTN3_EXTI0_Handler+0x44>)
 8005448:	88fb      	ldrh	r3, [r7, #6]
 800544a:	8013      	strh	r3, [r2, #0]


}
 800544c:	bf00      	nop
 800544e:	3708      	adds	r7, #8
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}
 8005454:	40014400 	.word	0x40014400
 8005458:	200020da 	.word	0x200020da
 800545c:	08015d9c 	.word	0x08015d9c

08005460 <IM_BTN4_EXTI1_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN4_EXTI1_Handler()
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b082      	sub	sp, #8
 8005464:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8005466:	4b0e      	ldr	r3, [pc, #56]	; (80054a0 <IM_BTN4_EXTI1_Handler+0x40>)
 8005468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546a:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn4_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 800546c:	88fb      	ldrh	r3, [r7, #6]
 800546e:	4a0d      	ldr	r2, [pc, #52]	; (80054a4 <IM_BTN4_EXTI1_Handler+0x44>)
 8005470:	8812      	ldrh	r2, [r2, #0]
 8005472:	1a9b      	subs	r3, r3, r2
 8005474:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005478:	dd0b      	ble.n	8005492 <IM_BTN4_EXTI1_Handler+0x32>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1))
 800547a:	2002      	movs	r0, #2
 800547c:	f7ff fefc 	bl	8005278 <LL_EXTI_IsActiveFlag_0_31>
 8005480:	4603      	mov	r3, r0
 8005482:	2b00      	cmp	r3, #0
 8005484:	d005      	beq.n	8005492 <IM_BTN4_EXTI1_Handler+0x32>
		{
			EM_SetNewEvent(evGreenBtn);
 8005486:	2002      	movs	r0, #2
 8005488:	f7ff fad2 	bl	8004a30 <EM_SetNewEvent>
			printf("'Green' BTN4_EXTI1_Pin\n");
 800548c:	4806      	ldr	r0, [pc, #24]	; (80054a8 <IM_BTN4_EXTI1_Handler+0x48>)
 800548e:	f00c fde3 	bl	8012058 <puts>
		}
	}
	btn4_last_interrupt_time = interrupt_time;
 8005492:	4a04      	ldr	r2, [pc, #16]	; (80054a4 <IM_BTN4_EXTI1_Handler+0x44>)
 8005494:	88fb      	ldrh	r3, [r7, #6]
 8005496:	8013      	strh	r3, [r2, #0]


}
 8005498:	bf00      	nop
 800549a:	3708      	adds	r7, #8
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}
 80054a0:	40014400 	.word	0x40014400
 80054a4:	200020dc 	.word	0x200020dc
 80054a8:	08015db4 	.word	0x08015db4

080054ac <IM_ENC_EXTI2_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_ENC_EXTI2_Handler()
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b082      	sub	sp, #8
 80054b0:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 80054b2:	4b0e      	ldr	r3, [pc, #56]	; (80054ec <IM_ENC_EXTI2_Handler+0x40>)
 80054b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b6:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - encbtn_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 80054b8:	88fb      	ldrh	r3, [r7, #6]
 80054ba:	4a0d      	ldr	r2, [pc, #52]	; (80054f0 <IM_ENC_EXTI2_Handler+0x44>)
 80054bc:	8812      	ldrh	r2, [r2, #0]
 80054be:	1a9b      	subs	r3, r3, r2
 80054c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80054c4:	dd0b      	ble.n	80054de <IM_ENC_EXTI2_Handler+0x32>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2))
 80054c6:	2004      	movs	r0, #4
 80054c8:	f7ff fed6 	bl	8005278 <LL_EXTI_IsActiveFlag_0_31>
 80054cc:	4603      	mov	r3, r0
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d005      	beq.n	80054de <IM_ENC_EXTI2_Handler+0x32>
		{
			EM_SetNewEvent(evEncoderPush);
 80054d2:	2006      	movs	r0, #6
 80054d4:	f7ff faac 	bl	8004a30 <EM_SetNewEvent>
			printf("'EncoderPush' ENC_EXTI2_Pin\n");
 80054d8:	4806      	ldr	r0, [pc, #24]	; (80054f4 <IM_ENC_EXTI2_Handler+0x48>)
 80054da:	f00c fdbd 	bl	8012058 <puts>
		}
	}
	encbtn_last_interrupt_time = interrupt_time;
 80054de:	4a04      	ldr	r2, [pc, #16]	; (80054f0 <IM_ENC_EXTI2_Handler+0x44>)
 80054e0:	88fb      	ldrh	r3, [r7, #6]
 80054e2:	8013      	strh	r3, [r2, #0]


}
 80054e4:	bf00      	nop
 80054e6:	3708      	adds	r7, #8
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}
 80054ec:	40014400 	.word	0x40014400
 80054f0:	200020de 	.word	0x200020de
 80054f4:	08015dcc 	.word	0x08015dcc

080054f8 <IM_ENC_DIRF_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_ENC_DIRF_Handler()
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b082      	sub	sp, #8
 80054fc:	af00      	add	r7, sp, #0

	if((TIM1->SR & TIM_SR_DIRF) == TIM_SR_DIRF)
 80054fe:	4b11      	ldr	r3, [pc, #68]	; (8005544 <IM_ENC_DIRF_Handler+0x4c>)
 8005500:	691b      	ldr	r3, [r3, #16]
 8005502:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005506:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800550a:	d117      	bne.n	800553c <IM_ENC_DIRF_Handler+0x44>
	{
		uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 800550c:	4b0e      	ldr	r3, [pc, #56]	; (8005548 <IM_ENC_DIRF_Handler+0x50>)
 800550e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005510:	80fb      	strh	r3, [r7, #6]
		if ((interrupt_time - encpos_last_interrupt_time) > 0)
 8005512:	88fb      	ldrh	r3, [r7, #6]
 8005514:	4a0d      	ldr	r2, [pc, #52]	; (800554c <IM_ENC_DIRF_Handler+0x54>)
 8005516:	8812      	ldrh	r2, [r2, #0]
 8005518:	1a9b      	subs	r3, r3, r2
 800551a:	2b00      	cmp	r3, #0
 800551c:	dd0b      	ble.n	8005536 <IM_ENC_DIRF_Handler+0x3e>
		{
			EM_SetNewEvent(evEncoderSet);
 800551e:	2005      	movs	r0, #5
 8005520:	f7ff fa86 	bl	8004a30 <EM_SetNewEvent>
			printf("Encoder new direction\n");
 8005524:	480a      	ldr	r0, [pc, #40]	; (8005550 <IM_ENC_DIRF_Handler+0x58>)
 8005526:	f00c fd97 	bl	8012058 <puts>
			TIM1->SR &= ~(TIM_SR_DIRF);
 800552a:	4b06      	ldr	r3, [pc, #24]	; (8005544 <IM_ENC_DIRF_Handler+0x4c>)
 800552c:	691b      	ldr	r3, [r3, #16]
 800552e:	4a05      	ldr	r2, [pc, #20]	; (8005544 <IM_ENC_DIRF_Handler+0x4c>)
 8005530:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005534:	6113      	str	r3, [r2, #16]
		}
		encpos_last_interrupt_time = interrupt_time;
 8005536:	4a05      	ldr	r2, [pc, #20]	; (800554c <IM_ENC_DIRF_Handler+0x54>)
 8005538:	88fb      	ldrh	r3, [r7, #6]
 800553a:	8013      	strh	r3, [r2, #0]


	}


}
 800553c:	bf00      	nop
 800553e:	3708      	adds	r7, #8
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}
 8005544:	40012c00 	.word	0x40012c00
 8005548:	40014400 	.word	0x40014400
 800554c:	200020e0 	.word	0x200020e0
 8005550:	08015de8 	.word	0x08015de8

08005554 <BO_GetBiasPolarity>:
 *	@param None
 *	@retval None
 *
 */
eBias_Polarity BO_GetBiasPolarity()
{
 8005554:	b480      	push	{r7}
 8005556:	af00      	add	r7, sp, #0
	return eBiasPolarity;
 8005558:	4b03      	ldr	r3, [pc, #12]	; (8005568 <BO_GetBiasPolarity+0x14>)
 800555a:	781b      	ldrb	r3, [r3, #0]
}
 800555c:	4618      	mov	r0, r3
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr
 8005566:	bf00      	nop
 8005568:	20000001 	.word	0x20000001

0800556c <BO_GetDcBiasEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
uint16_t BO_GetDcBiasEncoderValue()
{
 800556c:	b480      	push	{r7}
 800556e:	af00      	add	r7, sp, #0
	return dc_bias_encoder_value;
 8005570:	4b03      	ldr	r3, [pc, #12]	; (8005580 <BO_GetDcBiasEncoderValue+0x14>)
 8005572:	881b      	ldrh	r3, [r3, #0]
}
 8005574:	4618      	mov	r0, r3
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr
 800557e:	bf00      	nop
 8005580:	20000002 	.word	0x20000002

08005584 <BO_MapEncoderPositionToSignalOutput>:
 *	@param None
 *	@retval None
 *
 */
void BO_MapEncoderPositionToSignalOutput(uint16_t pEncoderValue)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b082      	sub	sp, #8
 8005588:	af00      	add	r7, sp, #0
 800558a:	4603      	mov	r3, r0
 800558c:	80fb      	strh	r3, [r7, #6]
	// pEncoderValue is reversed for correct rotary encoder operation.
	// However, we want to retain the forward direction value to prevent polarity flip!
	dc_bias_encoder_value = SM_GetEncoderValue(ENCODER_NORMAL);
 800558e:	2000      	movs	r0, #0
 8005590:	f001 fc58 	bl	8006e44 <SM_GetEncoderValue>
 8005594:	4603      	mov	r3, r0
 8005596:	461a      	mov	r2, r3
 8005598:	4b1b      	ldr	r3, [pc, #108]	; (8005608 <BO_MapEncoderPositionToSignalOutput+0x84>)
 800559a:	801a      	strh	r2, [r3, #0]

	// apply negative dc bias
	if(pEncoderValue < BIAS_CENTER) {
 800559c:	88fb      	ldrh	r3, [r7, #6]
 800559e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80055a2:	d214      	bcs.n	80055ce <BO_MapEncoderPositionToSignalOutput+0x4a>

		eBiasPolarity = INVERSEBIAS;
 80055a4:	4b19      	ldr	r3, [pc, #100]	; (800560c <BO_MapEncoderPositionToSignalOutput+0x88>)
 80055a6:	2200      	movs	r2, #0
 80055a8:	701a      	strb	r2, [r3, #0]


		HAL_DAC_SetValue(	&hdac1,
							DAC1_CHANNEL_2,
							DAC_ALIGN_12B_R,
							((BIAS_CENTER - pEncoderValue) * BIAS_MAG));
 80055aa:	88fb      	ldrh	r3, [r7, #6]
 80055ac:	f5c3 72c8 	rsb	r2, r3, #400	; 0x190
 80055b0:	4613      	mov	r3, r2
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	4413      	add	r3, r2
 80055b6:	005b      	lsls	r3, r3, #1
		HAL_DAC_SetValue(	&hdac1,
 80055b8:	2200      	movs	r2, #0
 80055ba:	2110      	movs	r1, #16
 80055bc:	4814      	ldr	r0, [pc, #80]	; (8005610 <BO_MapEncoderPositionToSignalOutput+0x8c>)
 80055be:	f005 ffcf 	bl	800b560 <HAL_DAC_SetValue>

		HAL_GPIO_WritePin(	OFFSET_ENABLE_GPIO_Port,
 80055c2:	2201      	movs	r2, #1
 80055c4:	2108      	movs	r1, #8
 80055c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80055ca:	f006 fff1 	bl	800c5b0 <HAL_GPIO_WritePin>
							OFFSET_ENABLE_Pin,
							GPIO_PIN_SET);
	}
	// apply positive dc bias
	if(pEncoderValue >= BIAS_CENTER) {
 80055ce:	88fb      	ldrh	r3, [r7, #6]
 80055d0:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80055d4:	d314      	bcc.n	8005600 <BO_MapEncoderPositionToSignalOutput+0x7c>

		eBiasPolarity = NORMALBIAS;
 80055d6:	4b0d      	ldr	r3, [pc, #52]	; (800560c <BO_MapEncoderPositionToSignalOutput+0x88>)
 80055d8:	2201      	movs	r2, #1
 80055da:	701a      	strb	r2, [r3, #0]
		//TIM1->CNT = pEncoderValue;

		HAL_DAC_SetValue(	&hdac1,
							DAC1_CHANNEL_2,
							DAC_ALIGN_12B_R,
							((pEncoderValue - BIAS_CENTER) * BIAS_MAG));
 80055dc:	88fb      	ldrh	r3, [r7, #6]
 80055de:	f5a3 72c8 	sub.w	r2, r3, #400	; 0x190
 80055e2:	4613      	mov	r3, r2
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	4413      	add	r3, r2
 80055e8:	005b      	lsls	r3, r3, #1
		HAL_DAC_SetValue(	&hdac1,
 80055ea:	2200      	movs	r2, #0
 80055ec:	2110      	movs	r1, #16
 80055ee:	4808      	ldr	r0, [pc, #32]	; (8005610 <BO_MapEncoderPositionToSignalOutput+0x8c>)
 80055f0:	f005 ffb6 	bl	800b560 <HAL_DAC_SetValue>

		HAL_GPIO_WritePin(	OFFSET_ENABLE_GPIO_Port,
 80055f4:	2200      	movs	r2, #0
 80055f6:	2108      	movs	r1, #8
 80055f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80055fc:	f006 ffd8 	bl	800c5b0 <HAL_GPIO_WritePin>
							OFFSET_ENABLE_Pin,
							GPIO_PIN_RESET);
	}
}
 8005600:	bf00      	nop
 8005602:	3708      	adds	r7, #8
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}
 8005608:	20000002 	.word	0x20000002
 800560c:	20000001 	.word	0x20000001
 8005610:	2000292c 	.word	0x2000292c

08005614 <BO_GetOutputBias>:
 *	@param None
 *	@retval None
 *
 */
uint32_t BO_GetOutputBias()
{
 8005614:	b580      	push	{r7, lr}
 8005616:	af00      	add	r7, sp, #0
	return HAL_DAC_GetValue(&hdac1, DAC1_CHANNEL_2);
 8005618:	2110      	movs	r1, #16
 800561a:	4803      	ldr	r0, [pc, #12]	; (8005628 <BO_GetOutputBias+0x14>)
 800561c:	f005 ffe6 	bl	800b5ec <HAL_DAC_GetValue>
 8005620:	4603      	mov	r3, r0
}
 8005622:	4618      	mov	r0, r3
 8005624:	bd80      	pop	{r7, pc}
 8005626:	bf00      	nop
 8005628:	2000292c 	.word	0x2000292c

0800562c <FreqO_InitFreqProfiles>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_InitFreqProfiles()
{
 800562c:	b480      	push	{r7}
 800562e:	b083      	sub	sp, #12
 8005630:	af00      	add	r7, sp, #0
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++)
 8005632:	2300      	movs	r3, #0
 8005634:	607b      	str	r3, [r7, #4]
 8005636:	e06b      	b.n	8005710 <FreqO_InitFreqProfiles+0xe4>
	{
		// prevent divide by zero (prescaler)
		if(theFreqProfiles[i].psc == 0)
 8005638:	493a      	ldr	r1, [pc, #232]	; (8005724 <FreqO_InitFreqProfiles+0xf8>)
 800563a:	687a      	ldr	r2, [r7, #4]
 800563c:	4613      	mov	r3, r2
 800563e:	009b      	lsls	r3, r3, #2
 8005640:	4413      	add	r3, r2
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	440b      	add	r3, r1
 8005646:	3308      	adds	r3, #8
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d129      	bne.n	80056a2 <FreqO_InitFreqProfiles+0x76>
			theFreqProfiles[i].arr = ((SM_MCLK / theFreqProfiles[i].hertz) / SM_FSAMP) * theFreqProfiles[i].error;
 800564e:	4935      	ldr	r1, [pc, #212]	; (8005724 <FreqO_InitFreqProfiles+0xf8>)
 8005650:	687a      	ldr	r2, [r7, #4]
 8005652:	4613      	mov	r3, r2
 8005654:	009b      	lsls	r3, r3, #2
 8005656:	4413      	add	r3, r2
 8005658:	009b      	lsls	r3, r3, #2
 800565a:	440b      	add	r3, r1
 800565c:	3304      	adds	r3, #4
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a31      	ldr	r2, [pc, #196]	; (8005728 <FreqO_InitFreqProfiles+0xfc>)
 8005662:	fbb2 f3f3 	udiv	r3, r2, r3
 8005666:	ee07 3a90 	vmov	s15, r3
 800566a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800566e:	492d      	ldr	r1, [pc, #180]	; (8005724 <FreqO_InitFreqProfiles+0xf8>)
 8005670:	687a      	ldr	r2, [r7, #4]
 8005672:	4613      	mov	r3, r2
 8005674:	009b      	lsls	r3, r3, #2
 8005676:	4413      	add	r3, r2
 8005678:	009b      	lsls	r3, r3, #2
 800567a:	440b      	add	r3, r1
 800567c:	3310      	adds	r3, #16
 800567e:	edd3 7a00 	vldr	s15, [r3]
 8005682:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005686:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800568a:	ee17 0a90 	vmov	r0, s15
 800568e:	4925      	ldr	r1, [pc, #148]	; (8005724 <FreqO_InitFreqProfiles+0xf8>)
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	4613      	mov	r3, r2
 8005694:	009b      	lsls	r3, r3, #2
 8005696:	4413      	add	r3, r2
 8005698:	009b      	lsls	r3, r3, #2
 800569a:	440b      	add	r3, r1
 800569c:	330c      	adds	r3, #12
 800569e:	6018      	str	r0, [r3, #0]
 80056a0:	e033      	b.n	800570a <FreqO_InitFreqProfiles+0xde>
		else
			theFreqProfiles[i].arr = (((SM_MCLK / theFreqProfiles[i].hertz) / theFreqProfiles[i].psc) / SM_FSAMP) * theFreqProfiles[i].error;
 80056a2:	4920      	ldr	r1, [pc, #128]	; (8005724 <FreqO_InitFreqProfiles+0xf8>)
 80056a4:	687a      	ldr	r2, [r7, #4]
 80056a6:	4613      	mov	r3, r2
 80056a8:	009b      	lsls	r3, r3, #2
 80056aa:	4413      	add	r3, r2
 80056ac:	009b      	lsls	r3, r3, #2
 80056ae:	440b      	add	r3, r1
 80056b0:	3304      	adds	r3, #4
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a1c      	ldr	r2, [pc, #112]	; (8005728 <FreqO_InitFreqProfiles+0xfc>)
 80056b6:	fbb2 f1f3 	udiv	r1, r2, r3
 80056ba:	481a      	ldr	r0, [pc, #104]	; (8005724 <FreqO_InitFreqProfiles+0xf8>)
 80056bc:	687a      	ldr	r2, [r7, #4]
 80056be:	4613      	mov	r3, r2
 80056c0:	009b      	lsls	r3, r3, #2
 80056c2:	4413      	add	r3, r2
 80056c4:	009b      	lsls	r3, r3, #2
 80056c6:	4403      	add	r3, r0
 80056c8:	3308      	adds	r3, #8
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80056d0:	ee07 3a90 	vmov	s15, r3
 80056d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80056d8:	4912      	ldr	r1, [pc, #72]	; (8005724 <FreqO_InitFreqProfiles+0xf8>)
 80056da:	687a      	ldr	r2, [r7, #4]
 80056dc:	4613      	mov	r3, r2
 80056de:	009b      	lsls	r3, r3, #2
 80056e0:	4413      	add	r3, r2
 80056e2:	009b      	lsls	r3, r3, #2
 80056e4:	440b      	add	r3, r1
 80056e6:	3310      	adds	r3, #16
 80056e8:	edd3 7a00 	vldr	s15, [r3]
 80056ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056f4:	ee17 0a90 	vmov	r0, s15
 80056f8:	490a      	ldr	r1, [pc, #40]	; (8005724 <FreqO_InitFreqProfiles+0xf8>)
 80056fa:	687a      	ldr	r2, [r7, #4]
 80056fc:	4613      	mov	r3, r2
 80056fe:	009b      	lsls	r3, r3, #2
 8005700:	4413      	add	r3, r2
 8005702:	009b      	lsls	r3, r3, #2
 8005704:	440b      	add	r3, r1
 8005706:	330c      	adds	r3, #12
 8005708:	6018      	str	r0, [r3, #0]
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	3301      	adds	r3, #1
 800570e:	607b      	str	r3, [r7, #4]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2b0d      	cmp	r3, #13
 8005714:	dd90      	ble.n	8005638 <FreqO_InitFreqProfiles+0xc>
	}
}
 8005716:	bf00      	nop
 8005718:	370c      	adds	r7, #12
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr
 8005722:	bf00      	nop
 8005724:	20000004 	.word	0x20000004
 8005728:	00155cc0 	.word	0x00155cc0

0800572c <FreqO_MapEncoderPositionCoarse>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_MapEncoderPositionCoarse(uint16_t pEncValue)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b084      	sub	sp, #16
 8005730:	af00      	add	r7, sp, #0
 8005732:	4603      	mov	r3, r0
 8005734:	80fb      	strh	r3, [r7, #6]

	uint32_t tmpFreqIndex = freq_profile->index;
 8005736:	4b1b      	ldr	r3, [pc, #108]	; (80057a4 <FreqO_MapEncoderPositionCoarse+0x78>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	60fb      	str	r3, [r7, #12]
	if(pEncValue > freq_last_encoder_value)
 800573e:	4b1a      	ldr	r3, [pc, #104]	; (80057a8 <FreqO_MapEncoderPositionCoarse+0x7c>)
 8005740:	881b      	ldrh	r3, [r3, #0]
 8005742:	88fa      	ldrh	r2, [r7, #6]
 8005744:	429a      	cmp	r2, r3
 8005746:	d910      	bls.n	800576a <FreqO_MapEncoderPositionCoarse+0x3e>
	{
		tmpFreqIndex++;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	3301      	adds	r3, #1
 800574c:	60fb      	str	r3, [r7, #12]
		if(tmpFreqIndex > MAX_NUM_FREQ_PRESETS-1) tmpFreqIndex = MAX_NUM_FREQ_PRESETS-1;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2b0d      	cmp	r3, #13
 8005752:	d901      	bls.n	8005758 <FreqO_MapEncoderPositionCoarse+0x2c>
 8005754:	230d      	movs	r3, #13
 8005756:	60fb      	str	r3, [r7, #12]
		FreqO_ApplyProfile( FreqO_GetProfileByIndex(tmpFreqIndex)->hertz );
 8005758:	68f8      	ldr	r0, [r7, #12]
 800575a:	f000 f945 	bl	80059e8 <FreqO_GetProfileByIndex>
 800575e:	4603      	mov	r3, r0
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	4618      	mov	r0, r3
 8005764:	f000 f872 	bl	800584c <FreqO_ApplyProfile>
 8005768:	e014      	b.n	8005794 <FreqO_MapEncoderPositionCoarse+0x68>
	}
	else if (pEncValue < freq_last_encoder_value)
 800576a:	4b0f      	ldr	r3, [pc, #60]	; (80057a8 <FreqO_MapEncoderPositionCoarse+0x7c>)
 800576c:	881b      	ldrh	r3, [r3, #0]
 800576e:	88fa      	ldrh	r2, [r7, #6]
 8005770:	429a      	cmp	r2, r3
 8005772:	d20f      	bcs.n	8005794 <FreqO_MapEncoderPositionCoarse+0x68>
	{
		tmpFreqIndex--;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	3b01      	subs	r3, #1
 8005778:	60fb      	str	r3, [r7, #12]
		if(tmpFreqIndex > MAX_NUM_FREQ_PRESETS-1) tmpFreqIndex = 0;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2b0d      	cmp	r3, #13
 800577e:	d901      	bls.n	8005784 <FreqO_MapEncoderPositionCoarse+0x58>
 8005780:	2300      	movs	r3, #0
 8005782:	60fb      	str	r3, [r7, #12]
		FreqO_ApplyProfile( FreqO_GetProfileByIndex(tmpFreqIndex)->hertz );
 8005784:	68f8      	ldr	r0, [r7, #12]
 8005786:	f000 f92f 	bl	80059e8 <FreqO_GetProfileByIndex>
 800578a:	4603      	mov	r3, r0
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	4618      	mov	r0, r3
 8005790:	f000 f85c 	bl	800584c <FreqO_ApplyProfile>
	}
	freq_last_encoder_value = pEncValue;
 8005794:	4a04      	ldr	r2, [pc, #16]	; (80057a8 <FreqO_MapEncoderPositionCoarse+0x7c>)
 8005796:	88fb      	ldrh	r3, [r7, #6]
 8005798:	8013      	strh	r3, [r2, #0]

}
 800579a:	bf00      	nop
 800579c:	3710      	adds	r7, #16
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
 80057a2:	bf00      	nop
 80057a4:	2000011c 	.word	0x2000011c
 80057a8:	200020e2 	.word	0x200020e2

080057ac <FreqO_MapEncoderPositionFine>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_MapEncoderPositionFine(uint16_t pEncValue)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b083      	sub	sp, #12
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	4603      	mov	r3, r0
 80057b4:	80fb      	strh	r3, [r7, #6]

//	uint32_t tmpFreqIndex = freq_profile->index;
	if(pEncValue > freq_last_encoder_value)
 80057b6:	4b0e      	ldr	r3, [pc, #56]	; (80057f0 <FreqO_MapEncoderPositionFine+0x44>)
 80057b8:	881b      	ldrh	r3, [r3, #0]
 80057ba:	88fa      	ldrh	r2, [r7, #6]
 80057bc:	429a      	cmp	r2, r3
 80057be:	d904      	bls.n	80057ca <FreqO_MapEncoderPositionFine+0x1e>
	{
		OUTPUT_TIMER->ARR++;
 80057c0:	4b0c      	ldr	r3, [pc, #48]	; (80057f4 <FreqO_MapEncoderPositionFine+0x48>)
 80057c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057c4:	3201      	adds	r2, #1
 80057c6:	62da      	str	r2, [r3, #44]	; 0x2c
 80057c8:	e008      	b.n	80057dc <FreqO_MapEncoderPositionFine+0x30>
//		tmpFreqIndex++;
//		if(tmpFreqIndex > MAX_NUM_FREQ_PRESETS-1) tmpFreqIndex = MAX_NUM_FREQ_PRESETS-1;
//		FreqO_ApplyProfile( FreqO_GetProfileByIndex(tmpFreqIndex)->hertz );
	}
	else if (pEncValue < freq_last_encoder_value)
 80057ca:	4b09      	ldr	r3, [pc, #36]	; (80057f0 <FreqO_MapEncoderPositionFine+0x44>)
 80057cc:	881b      	ldrh	r3, [r3, #0]
 80057ce:	88fa      	ldrh	r2, [r7, #6]
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d203      	bcs.n	80057dc <FreqO_MapEncoderPositionFine+0x30>
	{
		OUTPUT_TIMER->ARR--;
 80057d4:	4b07      	ldr	r3, [pc, #28]	; (80057f4 <FreqO_MapEncoderPositionFine+0x48>)
 80057d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057d8:	3a01      	subs	r2, #1
 80057da:	62da      	str	r2, [r3, #44]	; 0x2c
//		tmpFreqIndex--;
//		if(tmpFreqIndex > MAX_NUM_FREQ_PRESETS-1) tmpFreqIndex = 0;
//		FreqO_ApplyProfile( FreqO_GetProfileByIndex(tmpFreqIndex)->hertz );
	}
	freq_last_encoder_value = pEncValue;
 80057dc:	4a04      	ldr	r2, [pc, #16]	; (80057f0 <FreqO_MapEncoderPositionFine+0x44>)
 80057de:	88fb      	ldrh	r3, [r7, #6]
 80057e0:	8013      	strh	r3, [r2, #0]

}
 80057e2:	bf00      	nop
 80057e4:	370c      	adds	r7, #12
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr
 80057ee:	bf00      	nop
 80057f0:	200020e2 	.word	0x200020e2
 80057f4:	40013400 	.word	0x40013400

080057f8 <FreqO_MapEncoderPositionToPrescaler>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_MapEncoderPositionToPrescaler(uint16_t pEncValue)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b083      	sub	sp, #12
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	4603      	mov	r3, r0
 8005800:	80fb      	strh	r3, [r7, #6]

//	uint32_t tmpFreqIndex = freq_profile->index;
	if(pEncValue > freq_last_encoder_value)
 8005802:	4b10      	ldr	r3, [pc, #64]	; (8005844 <FreqO_MapEncoderPositionToPrescaler+0x4c>)
 8005804:	881b      	ldrh	r3, [r3, #0]
 8005806:	88fa      	ldrh	r2, [r7, #6]
 8005808:	429a      	cmp	r2, r3
 800580a:	d904      	bls.n	8005816 <FreqO_MapEncoderPositionToPrescaler+0x1e>
	{
		OUTPUT_TIMER->PSC++;
 800580c:	4b0e      	ldr	r3, [pc, #56]	; (8005848 <FreqO_MapEncoderPositionToPrescaler+0x50>)
 800580e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005810:	3201      	adds	r2, #1
 8005812:	629a      	str	r2, [r3, #40]	; 0x28
 8005814:	e00c      	b.n	8005830 <FreqO_MapEncoderPositionToPrescaler+0x38>

	}
	else if (pEncValue < freq_last_encoder_value)
 8005816:	4b0b      	ldr	r3, [pc, #44]	; (8005844 <FreqO_MapEncoderPositionToPrescaler+0x4c>)
 8005818:	881b      	ldrh	r3, [r3, #0]
 800581a:	88fa      	ldrh	r2, [r7, #6]
 800581c:	429a      	cmp	r2, r3
 800581e:	d207      	bcs.n	8005830 <FreqO_MapEncoderPositionToPrescaler+0x38>
	{
		if(OUTPUT_TIMER->PSC > 0)
 8005820:	4b09      	ldr	r3, [pc, #36]	; (8005848 <FreqO_MapEncoderPositionToPrescaler+0x50>)
 8005822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005824:	2b00      	cmp	r3, #0
 8005826:	d003      	beq.n	8005830 <FreqO_MapEncoderPositionToPrescaler+0x38>
			OUTPUT_TIMER->PSC--;
 8005828:	4b07      	ldr	r3, [pc, #28]	; (8005848 <FreqO_MapEncoderPositionToPrescaler+0x50>)
 800582a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800582c:	3a01      	subs	r2, #1
 800582e:	629a      	str	r2, [r3, #40]	; 0x28
//		tmpFreqIndex--;
//		if(tmpFreqIndex > MAX_NUM_FREQ_PRESETS-1) tmpFreqIndex = 0;
//		FreqO_ApplyProfile( FreqO_GetProfileByIndex(tmpFreqIndex)->hertz );
	}
	freq_last_encoder_value = pEncValue;
 8005830:	4a04      	ldr	r2, [pc, #16]	; (8005844 <FreqO_MapEncoderPositionToPrescaler+0x4c>)
 8005832:	88fb      	ldrh	r3, [r7, #6]
 8005834:	8013      	strh	r3, [r2, #0]

}
 8005836:	bf00      	nop
 8005838:	370c      	adds	r7, #12
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr
 8005842:	bf00      	nop
 8005844:	200020e2 	.word	0x200020e2
 8005848:	40013400 	.word	0x40013400

0800584c <FreqO_ApplyProfile>:
 *	@retval None
 *
 */

void FreqO_ApplyProfile(eFreqSettings_t pPresetEnum)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b084      	sub	sp, #16
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
//	DacTimeReg_t* tmpDT = DT_GetRegisterByEnum(pPresetEnum);
	FreqProfile_t* tmpFreqProfile = FreqO_FindFPresetObject(pPresetEnum);
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f000 f899 	bl	800598c <FreqO_FindFPresetObject>
 800585a:	60f8      	str	r0, [r7, #12]
	if(tmpFreqProfile)
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d024      	beq.n	80058ac <FreqO_ApplyProfile+0x60>
	{

		OUTPUT_TIMER->PSC = tmpFreqProfile->psc;
 8005862:	4a16      	ldr	r2, [pc, #88]	; (80058bc <FreqO_ApplyProfile+0x70>)
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	6293      	str	r3, [r2, #40]	; 0x28
		OUTPUT_TIMER->ARR = tmpFreqProfile->arr;
 800586a:	4a14      	ldr	r2, [pc, #80]	; (80058bc <FreqO_ApplyProfile+0x70>)
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	62d3      	str	r3, [r2, #44]	; 0x2c

		eOutput_mode tmpOut = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 8005872:	2001      	movs	r0, #1
 8005874:	f001 f86a 	bl	800694c <SM_GetOutputChannel>
 8005878:	4603      	mov	r3, r0
 800587a:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 800587e:	781b      	ldrb	r3, [r3, #0]
 8005880:	72fb      	strb	r3, [r7, #11]
		if(tmpOut == PWM_FUNC_MODE)
 8005882:	7afb      	ldrb	r3, [r7, #11]
 8005884:	2b06      	cmp	r3, #6
 8005886:	d10d      	bne.n	80058a4 <FreqO_ApplyProfile+0x58>
		{
			// duty cycle of PWM require slower settings to get the
			// same frequency as normal output functions
			PWM_AUX_OUT_TIM->PSC = 256;
 8005888:	4b0d      	ldr	r3, [pc, #52]	; (80058c0 <FreqO_ApplyProfile+0x74>)
 800588a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800588e:	629a      	str	r2, [r3, #40]	; 0x28
			PWM_AUX_OUT_TIM->ARR = tmpFreqProfile->arr/2;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	68db      	ldr	r3, [r3, #12]
 8005894:	4a0a      	ldr	r2, [pc, #40]	; (80058c0 <FreqO_ApplyProfile+0x74>)
 8005896:	085b      	lsrs	r3, r3, #1
 8005898:	62d3      	str	r3, [r2, #44]	; 0x2c
			PWM_AUX_OUT_TIM->CCR1 = PWM_AUX_OUT_TIM->ARR/2;
 800589a:	4b09      	ldr	r3, [pc, #36]	; (80058c0 <FreqO_ApplyProfile+0x74>)
 800589c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800589e:	4a08      	ldr	r2, [pc, #32]	; (80058c0 <FreqO_ApplyProfile+0x74>)
 80058a0:	085b      	lsrs	r3, r3, #1
 80058a2:	6353      	str	r3, [r2, #52]	; 0x34
		}

		freq_profile = tmpFreqProfile;
 80058a4:	4a07      	ldr	r2, [pc, #28]	; (80058c4 <FreqO_ApplyProfile+0x78>)
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	6013      	str	r3, [r2, #0]
	}
	else
	{
		DM_SetErrorDebugMsg("FreqO_ApplyProfile() null pointer error");
	}
}
 80058aa:	e002      	b.n	80058b2 <FreqO_ApplyProfile+0x66>
		DM_SetErrorDebugMsg("FreqO_ApplyProfile() null pointer error");
 80058ac:	4806      	ldr	r0, [pc, #24]	; (80058c8 <FreqO_ApplyProfile+0x7c>)
 80058ae:	f7fb ffff 	bl	80018b0 <DM_SetErrorDebugMsg>
}
 80058b2:	bf00      	nop
 80058b4:	3710      	adds	r7, #16
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}
 80058ba:	bf00      	nop
 80058bc:	40013400 	.word	0x40013400
 80058c0:	40000400 	.word	0x40000400
 80058c4:	2000011c 	.word	0x2000011c
 80058c8:	08015e00 	.word	0x08015e00

080058cc <FreqO_AdjustFreq>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_AdjustFreq()
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b082      	sub	sp, #8
 80058d0:	af00      	add	r7, sp, #0
	FreqO_MapEncoderPositionFine(SM_GetEncoderValue(ENCODER_NORMAL));
 80058d2:	2000      	movs	r0, #0
 80058d4:	f001 fab6 	bl	8006e44 <SM_GetEncoderValue>
 80058d8:	4603      	mov	r3, r0
 80058da:	4618      	mov	r0, r3
 80058dc:	f7ff ff66 	bl	80057ac <FreqO_MapEncoderPositionFine>


	eOutput_mode tmpOut = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 80058e0:	2001      	movs	r0, #1
 80058e2:	f001 f833 	bl	800694c <SM_GetOutputChannel>
 80058e6:	4603      	mov	r3, r0
 80058e8:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 80058ec:	781b      	ldrb	r3, [r3, #0]
 80058ee:	71fb      	strb	r3, [r7, #7]
	if(tmpOut == PWM_FUNC_MODE)
 80058f0:	79fb      	ldrb	r3, [r7, #7]
 80058f2:	2b06      	cmp	r3, #6
 80058f4:	d110      	bne.n	8005918 <FreqO_AdjustFreq+0x4c>
	{
		// duty cycle of PWM require slower settings to get the
		// same frequency as normal output functions
		PWM_AUX_OUT_TIM->PSC = 256;
 80058f6:	4b0a      	ldr	r3, [pc, #40]	; (8005920 <FreqO_AdjustFreq+0x54>)
 80058f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80058fc:	629a      	str	r2, [r3, #40]	; 0x28
		PWM_AUX_OUT_TIM->ARR = SM_GetEncoderValue(ENCODER_NORMAL)/2;
 80058fe:	2000      	movs	r0, #0
 8005900:	f001 faa0 	bl	8006e44 <SM_GetEncoderValue>
 8005904:	4603      	mov	r3, r0
 8005906:	085b      	lsrs	r3, r3, #1
 8005908:	b29a      	uxth	r2, r3
 800590a:	4b05      	ldr	r3, [pc, #20]	; (8005920 <FreqO_AdjustFreq+0x54>)
 800590c:	62da      	str	r2, [r3, #44]	; 0x2c
		PWM_AUX_OUT_TIM->CCR1 = PWM_AUX_OUT_TIM->ARR/2;
 800590e:	4b04      	ldr	r3, [pc, #16]	; (8005920 <FreqO_AdjustFreq+0x54>)
 8005910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005912:	4a03      	ldr	r2, [pc, #12]	; (8005920 <FreqO_AdjustFreq+0x54>)
 8005914:	085b      	lsrs	r3, r3, #1
 8005916:	6353      	str	r3, [r2, #52]	; 0x34

	}
}
 8005918:	bf00      	nop
 800591a:	3708      	adds	r7, #8
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}
 8005920:	40000400 	.word	0x40000400

08005924 <FreqO_AdjustPrescaler>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_AdjustPrescaler()
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b082      	sub	sp, #8
 8005928:	af00      	add	r7, sp, #0
	FreqO_MapEncoderPositionToPrescaler(SM_GetEncoderValue(ENCODER_NORMAL));
 800592a:	2000      	movs	r0, #0
 800592c:	f001 fa8a 	bl	8006e44 <SM_GetEncoderValue>
 8005930:	4603      	mov	r3, r0
 8005932:	4618      	mov	r0, r3
 8005934:	f7ff ff60 	bl	80057f8 <FreqO_MapEncoderPositionToPrescaler>

	// not sure about this code?!?!
	eOutput_mode tmpOut = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 8005938:	2001      	movs	r0, #1
 800593a:	f001 f807 	bl	800694c <SM_GetOutputChannel>
 800593e:	4603      	mov	r3, r0
 8005940:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8005944:	781b      	ldrb	r3, [r3, #0]
 8005946:	71fb      	strb	r3, [r7, #7]
	if(tmpOut == PWM_FUNC_MODE)
 8005948:	79fb      	ldrb	r3, [r7, #7]
 800594a:	2b06      	cmp	r3, #6
 800594c:	d10c      	bne.n	8005968 <FreqO_AdjustPrescaler+0x44>
	{
		// duty cycle of PWM require slower settings to get the
		// same frequency as normal output functions
		//PWM_AUX_OUT_TIM->PSC = 256;
		PWM_AUX_OUT_TIM->ARR = SM_GetEncoderValue(ENCODER_NORMAL)/2;
 800594e:	2000      	movs	r0, #0
 8005950:	f001 fa78 	bl	8006e44 <SM_GetEncoderValue>
 8005954:	4603      	mov	r3, r0
 8005956:	085b      	lsrs	r3, r3, #1
 8005958:	b29a      	uxth	r2, r3
 800595a:	4b05      	ldr	r3, [pc, #20]	; (8005970 <FreqO_AdjustPrescaler+0x4c>)
 800595c:	62da      	str	r2, [r3, #44]	; 0x2c
		PWM_AUX_OUT_TIM->CCR1 = PWM_AUX_OUT_TIM->ARR/2;
 800595e:	4b04      	ldr	r3, [pc, #16]	; (8005970 <FreqO_AdjustPrescaler+0x4c>)
 8005960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005962:	4a03      	ldr	r2, [pc, #12]	; (8005970 <FreqO_AdjustPrescaler+0x4c>)
 8005964:	085b      	lsrs	r3, r3, #1
 8005966:	6353      	str	r3, [r2, #52]	; 0x34

	}
}
 8005968:	bf00      	nop
 800596a:	3708      	adds	r7, #8
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}
 8005970:	40000400 	.word	0x40000400

08005974 <FreqO_GetFPresetObject>:
 *	@param None
 *	@retval pointer to FreqProfile_t struct
 *
 */
FreqProfile_t * FreqO_GetFPresetObject()
{
 8005974:	b480      	push	{r7}
 8005976:	af00      	add	r7, sp, #0
	return freq_profile;
 8005978:	4b03      	ldr	r3, [pc, #12]	; (8005988 <FreqO_GetFPresetObject+0x14>)
 800597a:	681b      	ldr	r3, [r3, #0]
}
 800597c:	4618      	mov	r0, r3
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr
 8005986:	bf00      	nop
 8005988:	2000011c 	.word	0x2000011c

0800598c <FreqO_FindFPresetObject>:

 *	@retval pointer to FreqProfile_t struct
 *
 */
FreqProfile_t * FreqO_FindFPresetObject(eFreqSettings_t pEnum)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b084      	sub	sp, #16
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++ )
 8005994:	2300      	movs	r3, #0
 8005996:	60fb      	str	r3, [r7, #12]
 8005998:	e016      	b.n	80059c8 <FreqO_FindFPresetObject+0x3c>
	{
		if(theFreqProfiles[i].hertz == pEnum)
 800599a:	4911      	ldr	r1, [pc, #68]	; (80059e0 <FreqO_FindFPresetObject+0x54>)
 800599c:	68fa      	ldr	r2, [r7, #12]
 800599e:	4613      	mov	r3, r2
 80059a0:	009b      	lsls	r3, r3, #2
 80059a2:	4413      	add	r3, r2
 80059a4:	009b      	lsls	r3, r3, #2
 80059a6:	440b      	add	r3, r1
 80059a8:	3304      	adds	r3, #4
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	429a      	cmp	r2, r3
 80059b0:	d107      	bne.n	80059c2 <FreqO_FindFPresetObject+0x36>
		{
			return &theFreqProfiles[i];
 80059b2:	68fa      	ldr	r2, [r7, #12]
 80059b4:	4613      	mov	r3, r2
 80059b6:	009b      	lsls	r3, r3, #2
 80059b8:	4413      	add	r3, r2
 80059ba:	009b      	lsls	r3, r3, #2
 80059bc:	4a08      	ldr	r2, [pc, #32]	; (80059e0 <FreqO_FindFPresetObject+0x54>)
 80059be:	4413      	add	r3, r2
 80059c0:	e009      	b.n	80059d6 <FreqO_FindFPresetObject+0x4a>
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++ )
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	3301      	adds	r3, #1
 80059c6:	60fb      	str	r3, [r7, #12]
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2b0d      	cmp	r3, #13
 80059cc:	dde5      	ble.n	800599a <FreqO_FindFPresetObject+0xe>
		}
	}
	// error!
	DM_SetErrorDebugMsg("FreqO_FindFPresetObject(): no FPreset obj found");
 80059ce:	4805      	ldr	r0, [pc, #20]	; (80059e4 <FreqO_FindFPresetObject+0x58>)
 80059d0:	f7fb ff6e 	bl	80018b0 <DM_SetErrorDebugMsg>
	return 0;
 80059d4:	2300      	movs	r3, #0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3710      	adds	r7, #16
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}
 80059de:	bf00      	nop
 80059e0:	20000004 	.word	0x20000004
 80059e4:	08015e28 	.word	0x08015e28

080059e8 <FreqO_GetProfileByIndex>:
 *	@param pIndex
 *	@retval pointer to FreqProfile_t object
 *
 */
FreqProfile_t* FreqO_GetProfileByIndex(uint32_t pIndex)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b083      	sub	sp, #12
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
	return &theFreqProfiles[pIndex];
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	4613      	mov	r3, r2
 80059f4:	009b      	lsls	r3, r3, #2
 80059f6:	4413      	add	r3, r2
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	4a04      	ldr	r2, [pc, #16]	; (8005a0c <FreqO_GetProfileByIndex+0x24>)
 80059fc:	4413      	add	r3, r2
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	370c      	adds	r7, #12
 8005a02:	46bd      	mov	sp, r7
 8005a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a08:	4770      	bx	lr
 8005a0a:	bf00      	nop
 8005a0c:	20000004 	.word	0x20000004

08005a10 <FreqO_ResetLastEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_ResetLastEncoderValue()
{
 8005a10:	b480      	push	{r7}
 8005a12:	af00      	add	r7, sp, #0
	freq_last_encoder_value = 0;
 8005a14:	4b03      	ldr	r3, [pc, #12]	; (8005a24 <FreqO_ResetLastEncoderValue+0x14>)
 8005a16:	2200      	movs	r2, #0
 8005a18:	801a      	strh	r2, [r3, #0]
}
 8005a1a:	bf00      	nop
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr
 8005a24:	200020e2 	.word	0x200020e2

08005a28 <FS_SetSweepModeDown>:
 *	@param None
 *	@retval None
 *
 */
void FS_SetSweepModeDown()
{
 8005a28:	b480      	push	{r7}
 8005a2a:	af00      	add	r7, sp, #0
	// "Center-aligned" mode sets direction register to readonly,
	// so disable "Center-aligned" mode first
	SWEEP_TIMER->CR1 &= ~((TIM_CR1_CMS_0) | (TIM_CR1_CMS_1));
 8005a2c:	4b10      	ldr	r3, [pc, #64]	; (8005a70 <FS_SetSweepModeDown+0x48>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a0f      	ldr	r2, [pc, #60]	; (8005a70 <FS_SetSweepModeDown+0x48>)
 8005a32:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8005a36:	6013      	str	r3, [r2, #0]

	// 0: Counter used as upcounter
	SWEEP_TIMER->CR1 |= (TIM_CR1_DIR);
 8005a38:	4b0d      	ldr	r3, [pc, #52]	; (8005a70 <FS_SetSweepModeDown+0x48>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a0c      	ldr	r2, [pc, #48]	; (8005a70 <FS_SetSweepModeDown+0x48>)
 8005a3e:	f043 0310 	orr.w	r3, r3, #16
 8005a42:	6013      	str	r3, [r2, #0]

	sweep_lower_bounds_shortest_output_arr  = OUTPUT_TIMER->ARR;
 8005a44:	4b0b      	ldr	r3, [pc, #44]	; (8005a74 <FS_SetSweepModeDown+0x4c>)
 8005a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a48:	ee07 3a90 	vmov	s15, r3
 8005a4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a50:	4b09      	ldr	r3, [pc, #36]	; (8005a78 <FS_SetSweepModeDown+0x50>)
 8005a52:	edc3 7a00 	vstr	s15, [r3]
	sweep_upper_bounds_longest_output_arr  = MAX_OUTPUT_ARR;
 8005a56:	4b09      	ldr	r3, [pc, #36]	; (8005a7c <FS_SetSweepModeDown+0x54>)
 8005a58:	4a09      	ldr	r2, [pc, #36]	; (8005a80 <FS_SetSweepModeDown+0x58>)
 8005a5a:	601a      	str	r2, [r3, #0]
	ENCODER_TIMER->CNT = MAX_OUTPUT_ARR;
 8005a5c:	4b09      	ldr	r3, [pc, #36]	; (8005a84 <FS_SetSweepModeDown+0x5c>)
 8005a5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a62:	625a      	str	r2, [r3, #36]	; 0x24

}
 8005a64:	bf00      	nop
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr
 8005a6e:	bf00      	nop
 8005a70:	40000c00 	.word	0x40000c00
 8005a74:	40013400 	.word	0x40013400
 8005a78:	20000120 	.word	0x20000120
 8005a7c:	20000124 	.word	0x20000124
 8005a80:	477fff00 	.word	0x477fff00
 8005a84:	40012c00 	.word	0x40012c00

08005a88 <FS_SetSweepModeUp>:
 *	@param None
 *	@retval None
 *
 */
void FS_SetSweepModeUp()
{
 8005a88:	b480      	push	{r7}
 8005a8a:	af00      	add	r7, sp, #0

	// "Center-aligned" mode sets direction register to readonly,
	// so disable "Center-aligned" mode first
	SWEEP_TIMER->CR1 &= ~((TIM_CR1_CMS_0) | (TIM_CR1_CMS_1));
 8005a8c:	4b0e      	ldr	r3, [pc, #56]	; (8005ac8 <FS_SetSweepModeUp+0x40>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a0d      	ldr	r2, [pc, #52]	; (8005ac8 <FS_SetSweepModeUp+0x40>)
 8005a92:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8005a96:	6013      	str	r3, [r2, #0]

	// 1: Counter used as downcounter
	SWEEP_TIMER->CR1 &= ~(TIM_CR1_DIR);
 8005a98:	4b0b      	ldr	r3, [pc, #44]	; (8005ac8 <FS_SetSweepModeUp+0x40>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a0a      	ldr	r2, [pc, #40]	; (8005ac8 <FS_SetSweepModeUp+0x40>)
 8005a9e:	f023 0310 	bic.w	r3, r3, #16
 8005aa2:	6013      	str	r3, [r2, #0]

	sweep_upper_bounds_longest_output_arr  = OUTPUT_TIMER->ARR;
 8005aa4:	4b09      	ldr	r3, [pc, #36]	; (8005acc <FS_SetSweepModeUp+0x44>)
 8005aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aa8:	ee07 3a90 	vmov	s15, r3
 8005aac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ab0:	4b07      	ldr	r3, [pc, #28]	; (8005ad0 <FS_SetSweepModeUp+0x48>)
 8005ab2:	edc3 7a00 	vstr	s15, [r3]
	sweep_lower_bounds_shortest_output_arr  = MIN_OUTPUT_ARR;
 8005ab6:	4b07      	ldr	r3, [pc, #28]	; (8005ad4 <FS_SetSweepModeUp+0x4c>)
 8005ab8:	4a07      	ldr	r2, [pc, #28]	; (8005ad8 <FS_SetSweepModeUp+0x50>)
 8005aba:	601a      	str	r2, [r3, #0]


}
 8005abc:	bf00      	nop
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr
 8005ac6:	bf00      	nop
 8005ac8:	40000c00 	.word	0x40000c00
 8005acc:	40013400 	.word	0x40013400
 8005ad0:	20000124 	.word	0x20000124
 8005ad4:	20000120 	.word	0x20000120
 8005ad8:	41500000 	.word	0x41500000

08005adc <FS_SetEncoderControlMode>:
 *	@param None
 *	@retval None
 *
 */
void FS_SetEncoderControlMode(eEncoderSweepFunctions pFunction)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b083      	sub	sp, #12
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	71fb      	strb	r3, [r7, #7]
	if(pFunction)
 8005ae6:	79fb      	ldrb	r3, [r7, #7]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d038      	beq.n	8005b5e <FS_SetEncoderControlMode+0x82>
	{
		//	ENCODER_SWEEP_LIMIT_FUNCTION
		theCurrentEncoderSweepFunction = pFunction;
 8005aec:	4a24      	ldr	r2, [pc, #144]	; (8005b80 <FS_SetEncoderControlMode+0xa4>)
 8005aee:	79fb      	ldrb	r3, [r7, #7]
 8005af0:	7013      	strb	r3, [r2, #0]
		ENCODER_TIMER->CNT = MIN_OUTPUT_ARR;
 8005af2:	4b24      	ldr	r3, [pc, #144]	; (8005b84 <FS_SetEncoderControlMode+0xa8>)
 8005af4:	220d      	movs	r2, #13
 8005af6:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = MAX_OUTPUT_ARR;
 8005af8:	4b22      	ldr	r3, [pc, #136]	; (8005b84 <FS_SetEncoderControlMode+0xa8>)
 8005afa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005afe:	62da      	str	r2, [r3, #44]	; 0x2c

		switch(active_sweep_mode)
 8005b00:	4b21      	ldr	r3, [pc, #132]	; (8005b88 <FS_SetEncoderControlMode+0xac>)
 8005b02:	781b      	ldrb	r3, [r3, #0]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d002      	beq.n	8005b0e <FS_SetEncoderControlMode+0x32>
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d014      	beq.n	8005b36 <FS_SetEncoderControlMode+0x5a>
					// if encoder position is below the lower bounds set it above it
					if(ENCODER_TIMER->CNT < sweep_lower_bounds_shortest_output_arr)
						ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
				break;
			default:
				break;
 8005b0c:	e031      	b.n	8005b72 <FS_SetEncoderControlMode+0x96>
					if(ENCODER_TIMER->CNT > sweep_upper_bounds_longest_output_arr)
 8005b0e:	4b1d      	ldr	r3, [pc, #116]	; (8005b84 <FS_SetEncoderControlMode+0xa8>)
 8005b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b12:	ee07 3a90 	vmov	s15, r3
 8005b16:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005b1a:	4b1c      	ldr	r3, [pc, #112]	; (8005b8c <FS_SetEncoderControlMode+0xb0>)
 8005b1c:	edd3 7a00 	vldr	s15, [r3]
 8005b20:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005b24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b28:	dc00      	bgt.n	8005b2c <FS_SetEncoderControlMode+0x50>
				break;
 8005b2a:	e022      	b.n	8005b72 <FS_SetEncoderControlMode+0x96>
						 ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
 8005b2c:	4b18      	ldr	r3, [pc, #96]	; (8005b90 <FS_SetEncoderControlMode+0xb4>)
 8005b2e:	4a15      	ldr	r2, [pc, #84]	; (8005b84 <FS_SetEncoderControlMode+0xa8>)
 8005b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b32:	6253      	str	r3, [r2, #36]	; 0x24
				break;
 8005b34:	e01d      	b.n	8005b72 <FS_SetEncoderControlMode+0x96>
					if(ENCODER_TIMER->CNT < sweep_lower_bounds_shortest_output_arr)
 8005b36:	4b13      	ldr	r3, [pc, #76]	; (8005b84 <FS_SetEncoderControlMode+0xa8>)
 8005b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b3a:	ee07 3a90 	vmov	s15, r3
 8005b3e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005b42:	4b14      	ldr	r3, [pc, #80]	; (8005b94 <FS_SetEncoderControlMode+0xb8>)
 8005b44:	edd3 7a00 	vldr	s15, [r3]
 8005b48:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005b4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b50:	d400      	bmi.n	8005b54 <FS_SetEncoderControlMode+0x78>
				break;
 8005b52:	e00e      	b.n	8005b72 <FS_SetEncoderControlMode+0x96>
						ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
 8005b54:	4b0e      	ldr	r3, [pc, #56]	; (8005b90 <FS_SetEncoderControlMode+0xb4>)
 8005b56:	4a0b      	ldr	r2, [pc, #44]	; (8005b84 <FS_SetEncoderControlMode+0xa8>)
 8005b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b5a:	6253      	str	r3, [r2, #36]	; 0x24
				break;
 8005b5c:	e009      	b.n	8005b72 <FS_SetEncoderControlMode+0x96>
		// switch(active_sweep_mode)
	}
	else
	{
		// ENCODER_SWEEP_SPEED_FUNCTION
		theCurrentEncoderSweepFunction = pFunction;
 8005b5e:	4a08      	ldr	r2, [pc, #32]	; (8005b80 <FS_SetEncoderControlMode+0xa4>)
 8005b60:	79fb      	ldrb	r3, [r7, #7]
 8005b62:	7013      	strb	r3, [r2, #0]
		// encoder start value
		ENCODER_TIMER->CNT = 1;
 8005b64:	4b07      	ldr	r3, [pc, #28]	; (8005b84 <FS_SetEncoderControlMode+0xa8>)
 8005b66:	2201      	movs	r2, #1
 8005b68:	625a      	str	r2, [r3, #36]	; 0x24
		// encoder limit for default (set speed)
		ENCODER_TIMER->ARR = 1600;
 8005b6a:	4b06      	ldr	r3, [pc, #24]	; (8005b84 <FS_SetEncoderControlMode+0xa8>)
 8005b6c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8005b70:	62da      	str	r2, [r3, #44]	; 0x2c
	}

}
 8005b72:	bf00      	nop
 8005b74:	370c      	adds	r7, #12
 8005b76:	46bd      	mov	sp, r7
 8005b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7c:	4770      	bx	lr
 8005b7e:	bf00      	nop
 8005b80:	200020d4 	.word	0x200020d4
 8005b84:	40012c00 	.word	0x40012c00
 8005b88:	200020d3 	.word	0x200020d3
 8005b8c:	20000124 	.word	0x20000124
 8005b90:	40013400 	.word	0x40013400
 8005b94:	20000120 	.word	0x20000120

08005b98 <FS_SetSweepTimerAutoReloadForEncoderControl>:
 *	@param None
 *	@retval None
 *
 */
void FS_SetSweepTimerAutoReloadForEncoderControl(eEncoderSweepFunctions pFunction)
{
 8005b98:	b590      	push	{r4, r7, lr}
 8005b9a:	b085      	sub	sp, #20
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	71fb      	strb	r3, [r7, #7]
	uint32_t next_sweep_tim_arr;

	if(pFunction)
 8005ba2:	79fb      	ldrb	r3, [r7, #7]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d122      	bne.n	8005bee <FS_SetSweepTimerAutoReloadForEncoderControl+0x56>

	}
	else
	{
		// get logarithmic curve to speed up turns at low end
		next_sweep_tim_arr = MIN_SWEEP_ARR + (pow(ENCODER_TIMER->CNT, 3));
 8005ba8:	4b17      	ldr	r3, [pc, #92]	; (8005c08 <FS_SetSweepTimerAutoReloadForEncoderControl+0x70>)
 8005baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bac:	4618      	mov	r0, r3
 8005bae:	f7fa fcd1 	bl	8000554 <__aeabi_ui2d>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	460c      	mov	r4, r1
 8005bb6:	ed9f 1b10 	vldr	d1, [pc, #64]	; 8005bf8 <FS_SetSweepTimerAutoReloadForEncoderControl+0x60>
 8005bba:	ec44 3b10 	vmov	d0, r3, r4
 8005bbe:	f00e fb63 	bl	8014288 <pow>
 8005bc2:	ec51 0b10 	vmov	r0, r1, d0
 8005bc6:	a30e      	add	r3, pc, #56	; (adr r3, 8005c00 <FS_SetSweepTimerAutoReloadForEncoderControl+0x68>)
 8005bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bcc:	f7fa fb86 	bl	80002dc <__adddf3>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	460c      	mov	r4, r1
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	4621      	mov	r1, r4
 8005bd8:	f7fb f80e 	bl	8000bf8 <__aeabi_d2uiz>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	60fb      	str	r3, [r7, #12]

		if(next_sweep_tim_arr < 0xFFFFFFFF)
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005be6:	d002      	beq.n	8005bee <FS_SetSweepTimerAutoReloadForEncoderControl+0x56>
		{
			SWEEP_TIMER->ARR = next_sweep_tim_arr;
 8005be8:	4a08      	ldr	r2, [pc, #32]	; (8005c0c <FS_SetSweepTimerAutoReloadForEncoderControl+0x74>)
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	62d3      	str	r3, [r2, #44]	; 0x2c

		}
	}
}
 8005bee:	bf00      	nop
 8005bf0:	3714      	adds	r7, #20
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd90      	pop	{r4, r7, pc}
 8005bf6:	bf00      	nop
 8005bf8:	00000000 	.word	0x00000000
 8005bfc:	40080000 	.word	0x40080000
 8005c00:	00000000 	.word	0x00000000
 8005c04:	40d06800 	.word	0x40d06800
 8005c08:	40012c00 	.word	0x40012c00
 8005c0c:	40000c00 	.word	0x40000c00

08005c10 <FS_GetCalculatedSweepFrequencyInHertz>:
 *	@param None
 *	@retval None
 *
 */
float FS_GetCalculatedSweepFrequencyInHertz()
{
 8005c10:	b480      	push	{r7}
 8005c12:	af00      	add	r7, sp, #0
	if(SWEEP_TIMER->PSC == 0)
 8005c14:	4b13      	ldr	r3, [pc, #76]	; (8005c64 <FS_GetCalculatedSweepFrequencyInHertz+0x54>)
 8005c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d10a      	bne.n	8005c32 <FS_GetCalculatedSweepFrequencyInHertz+0x22>
	{
		return (float)SM_MCLK / ((float)1 * (float)SWEEP_TIMER->ARR);
 8005c1c:	4b11      	ldr	r3, [pc, #68]	; (8005c64 <FS_GetCalculatedSweepFrequencyInHertz+0x54>)
 8005c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c20:	ee07 3a90 	vmov	s15, r3
 8005c24:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005c28:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8005c68 <FS_GetCalculatedSweepFrequencyInHertz+0x58>
 8005c2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c30:	e011      	b.n	8005c56 <FS_GetCalculatedSweepFrequencyInHertz+0x46>
	}
	else
	{
		return (float)SM_MCLK / ((float)SWEEP_TIMER->PSC * (float)SWEEP_TIMER->ARR);
 8005c32:	4b0c      	ldr	r3, [pc, #48]	; (8005c64 <FS_GetCalculatedSweepFrequencyInHertz+0x54>)
 8005c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c36:	ee07 3a90 	vmov	s15, r3
 8005c3a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005c3e:	4b09      	ldr	r3, [pc, #36]	; (8005c64 <FS_GetCalculatedSweepFrequencyInHertz+0x54>)
 8005c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c42:	ee07 3a90 	vmov	s15, r3
 8005c46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c4a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005c4e:	eddf 6a06 	vldr	s13, [pc, #24]	; 8005c68 <FS_GetCalculatedSweepFrequencyInHertz+0x58>
 8005c52:	eec6 7a87 	vdiv.f32	s15, s13, s14
	}

}
 8005c56:	eeb0 0a67 	vmov.f32	s0, s15
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr
 8005c62:	bf00      	nop
 8005c64:	40000c00 	.word	0x40000c00
 8005c68:	4d2037a0 	.word	0x4d2037a0

08005c6c <FuncO_ResetLastEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
void FuncO_ResetLastEncoderValue()
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	af00      	add	r7, sp, #0
	func_last_encoder_value = 0;
 8005c70:	4b03      	ldr	r3, [pc, #12]	; (8005c80 <FuncO_ResetLastEncoderValue+0x14>)
 8005c72:	2200      	movs	r2, #0
 8005c74:	801a      	strh	r2, [r3, #0]
}
 8005c76:	bf00      	nop
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr
 8005c80:	2000210e 	.word	0x2000210e

08005c84 <FuncO_MapEncoderPositionToSignalOutput>:
 *	@param pEncoderValue rotary encoder value
 *	@retval None
 *
 */
void FuncO_MapEncoderPositionToSignalOutput(uint16_t pEncoderValue)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b084      	sub	sp, #16
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	80fb      	strh	r3, [r7, #6]
	eOutput_mode tmpFunc = SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile->func;
 8005c8e:	2000      	movs	r0, #0
 8005c90:	f000 fe5c 	bl	800694c <SM_GetOutputChannel>
 8005c94:	4603      	mov	r3, r0
 8005c96:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8005c9a:	781b      	ldrb	r3, [r3, #0]
 8005c9c:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > func_last_encoder_value)
 8005c9e:	4b15      	ldr	r3, [pc, #84]	; (8005cf4 <FuncO_MapEncoderPositionToSignalOutput+0x70>)
 8005ca0:	881b      	ldrh	r3, [r3, #0]
 8005ca2:	88fa      	ldrh	r2, [r7, #6]
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d90c      	bls.n	8005cc2 <FuncO_MapEncoderPositionToSignalOutput+0x3e>
	{
		tmpFunc++;
 8005ca8:	7bfb      	ldrb	r3, [r7, #15]
 8005caa:	3301      	adds	r3, #1
 8005cac:	73fb      	strb	r3, [r7, #15]
		if(tmpFunc > MAX_NUM_FUNC_PRESETS-2) tmpFunc = IMPULSE_FUNC_MODE;
 8005cae:	7bfb      	ldrb	r3, [r7, #15]
 8005cb0:	2b05      	cmp	r3, #5
 8005cb2:	d901      	bls.n	8005cb8 <FuncO_MapEncoderPositionToSignalOutput+0x34>
 8005cb4:	2305      	movs	r3, #5
 8005cb6:	73fb      	strb	r3, [r7, #15]
		FuncO_ApplyProfileToSignal(tmpFunc);
 8005cb8:	7bfb      	ldrb	r3, [r7, #15]
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f000 f856 	bl	8005d6c <FuncO_ApplyProfileToSignal>
 8005cc0:	e010      	b.n	8005ce4 <FuncO_MapEncoderPositionToSignalOutput+0x60>
	}
	else if (pEncoderValue < func_last_encoder_value)
 8005cc2:	4b0c      	ldr	r3, [pc, #48]	; (8005cf4 <FuncO_MapEncoderPositionToSignalOutput+0x70>)
 8005cc4:	881b      	ldrh	r3, [r3, #0]
 8005cc6:	88fa      	ldrh	r2, [r7, #6]
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	d20b      	bcs.n	8005ce4 <FuncO_MapEncoderPositionToSignalOutput+0x60>
	{
		tmpFunc--;
 8005ccc:	7bfb      	ldrb	r3, [r7, #15]
 8005cce:	3b01      	subs	r3, #1
 8005cd0:	73fb      	strb	r3, [r7, #15]
		if(tmpFunc > MAX_NUM_FUNC_PRESETS-1) tmpFunc = SINE_FUNC_MODE;
 8005cd2:	7bfb      	ldrb	r3, [r7, #15]
 8005cd4:	2b06      	cmp	r3, #6
 8005cd6:	d901      	bls.n	8005cdc <FuncO_MapEncoderPositionToSignalOutput+0x58>
 8005cd8:	2300      	movs	r3, #0
 8005cda:	73fb      	strb	r3, [r7, #15]
		FuncO_ApplyProfileToSignal(tmpFunc);
 8005cdc:	7bfb      	ldrb	r3, [r7, #15]
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f000 f844 	bl	8005d6c <FuncO_ApplyProfileToSignal>
	}
	func_last_encoder_value = pEncoderValue;
 8005ce4:	4a03      	ldr	r2, [pc, #12]	; (8005cf4 <FuncO_MapEncoderPositionToSignalOutput+0x70>)
 8005ce6:	88fb      	ldrh	r3, [r7, #6]
 8005ce8:	8013      	strh	r3, [r2, #0]
}
 8005cea:	bf00      	nop
 8005cec:	3710      	adds	r7, #16
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}
 8005cf2:	bf00      	nop
 8005cf4:	2000210e 	.word	0x2000210e

08005cf8 <FuncO_MapEncoderPositionToAuxOutput>:
 *	@param pEncoderValue rotary encoder value
 *	@retval None
 *
 */
void FuncO_MapEncoderPositionToAuxOutput(uint16_t pEncoderValue)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b084      	sub	sp, #16
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	4603      	mov	r3, r0
 8005d00:	80fb      	strh	r3, [r7, #6]
	eOutput_mode tmpFunc = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 8005d02:	2001      	movs	r0, #1
 8005d04:	f000 fe22 	bl	800694c <SM_GetOutputChannel>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8005d0e:	781b      	ldrb	r3, [r3, #0]
 8005d10:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > func_last_encoder_value)
 8005d12:	4b15      	ldr	r3, [pc, #84]	; (8005d68 <FuncO_MapEncoderPositionToAuxOutput+0x70>)
 8005d14:	881b      	ldrh	r3, [r3, #0]
 8005d16:	88fa      	ldrh	r2, [r7, #6]
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d90c      	bls.n	8005d36 <FuncO_MapEncoderPositionToAuxOutput+0x3e>
	{
		tmpFunc++;
 8005d1c:	7bfb      	ldrb	r3, [r7, #15]
 8005d1e:	3301      	adds	r3, #1
 8005d20:	73fb      	strb	r3, [r7, #15]
		if(tmpFunc > MAX_NUM_FUNC_PRESETS-1) tmpFunc = PWM_FUNC_MODE;
 8005d22:	7bfb      	ldrb	r3, [r7, #15]
 8005d24:	2b06      	cmp	r3, #6
 8005d26:	d901      	bls.n	8005d2c <FuncO_MapEncoderPositionToAuxOutput+0x34>
 8005d28:	2306      	movs	r3, #6
 8005d2a:	73fb      	strb	r3, [r7, #15]
		FuncO_ApplyProfileToAux(tmpFunc);
 8005d2c:	7bfb      	ldrb	r3, [r7, #15]
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f000 f880 	bl	8005e34 <FuncO_ApplyProfileToAux>
 8005d34:	e010      	b.n	8005d58 <FuncO_MapEncoderPositionToAuxOutput+0x60>
	}
	else if (pEncoderValue < func_last_encoder_value)
 8005d36:	4b0c      	ldr	r3, [pc, #48]	; (8005d68 <FuncO_MapEncoderPositionToAuxOutput+0x70>)
 8005d38:	881b      	ldrh	r3, [r3, #0]
 8005d3a:	88fa      	ldrh	r2, [r7, #6]
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	d20b      	bcs.n	8005d58 <FuncO_MapEncoderPositionToAuxOutput+0x60>
	{
		tmpFunc--;
 8005d40:	7bfb      	ldrb	r3, [r7, #15]
 8005d42:	3b01      	subs	r3, #1
 8005d44:	73fb      	strb	r3, [r7, #15]
		if(tmpFunc > MAX_NUM_FUNC_PRESETS-1) tmpFunc = SINE_FUNC_MODE;
 8005d46:	7bfb      	ldrb	r3, [r7, #15]
 8005d48:	2b06      	cmp	r3, #6
 8005d4a:	d901      	bls.n	8005d50 <FuncO_MapEncoderPositionToAuxOutput+0x58>
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	73fb      	strb	r3, [r7, #15]
		FuncO_ApplyProfileToAux(tmpFunc);
 8005d50:	7bfb      	ldrb	r3, [r7, #15]
 8005d52:	4618      	mov	r0, r3
 8005d54:	f000 f86e 	bl	8005e34 <FuncO_ApplyProfileToAux>
//		if(tmpFunc == SINE_FUNC_MODE)
//			ENCODER_TIMER->CNT = 20;
	}
	func_last_encoder_value = pEncoderValue;
 8005d58:	4a03      	ldr	r2, [pc, #12]	; (8005d68 <FuncO_MapEncoderPositionToAuxOutput+0x70>)
 8005d5a:	88fb      	ldrh	r3, [r7, #6]
 8005d5c:	8013      	strh	r3, [r2, #0]
}
 8005d5e:	bf00      	nop
 8005d60:	3710      	adds	r7, #16
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}
 8005d66:	bf00      	nop
 8005d68:	2000210e 	.word	0x2000210e

08005d6c <FuncO_ApplyProfileToSignal>:

 *	@retval None
 *
 */
void FuncO_ApplyProfileToSignal(eOutput_mode pPresetEnum)
{
 8005d6c:	b590      	push	{r4, r7, lr}
 8005d6e:	b087      	sub	sp, #28
 8005d70:	af02      	add	r7, sp, #8
 8005d72:	4603      	mov	r3, r0
 8005d74:	71fb      	strb	r3, [r7, #7]

		// set the next function output
		SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile = &theFuncProfiles[pPresetEnum];
 8005d76:	79fc      	ldrb	r4, [r7, #7]
 8005d78:	2000      	movs	r0, #0
 8005d7a:	f000 fde7 	bl	800694c <SM_GetOutputChannel>
 8005d7e:	4601      	mov	r1, r0
 8005d80:	00e3      	lsls	r3, r4, #3
 8005d82:	4a27      	ldr	r2, [pc, #156]	; (8005e20 <FuncO_ApplyProfileToSignal+0xb4>)
 8005d84:	4413      	add	r3, r2
 8005d86:	f8c1 31e8 	str.w	r3, [r1, #488]	; 0x1e8


		// copy the lookup table for the next output function in to SignalChannel object
		printf("SM_GetOutputChannel\n");
 8005d8a:	4826      	ldr	r0, [pc, #152]	; (8005e24 <FuncO_ApplyProfileToSignal+0xb8>)
 8005d8c:	f00c f964 	bl	8012058 <puts>
		SM_GetOutputChannel(SIGNAL_CHANNEL)->ref_lut_data = theFuncProfiles[pPresetEnum].lookup_table_data;
 8005d90:	79fc      	ldrb	r4, [r7, #7]
 8005d92:	2000      	movs	r0, #0
 8005d94:	f000 fdda 	bl	800694c <SM_GetOutputChannel>
 8005d98:	4601      	mov	r1, r0
 8005d9a:	4a21      	ldr	r2, [pc, #132]	; (8005e20 <FuncO_ApplyProfileToSignal+0xb4>)
 8005d9c:	00e3      	lsls	r3, r4, #3
 8005d9e:	4413      	add	r3, r2
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	604b      	str	r3, [r1, #4]

		// set preset for PGA gain and dsp amplitude adjustment
		eAmpSettings_t eTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile->amp_setting;
 8005da4:	2000      	movs	r0, #0
 8005da6:	f000 fdd1 	bl	800694c <SM_GetOutputChannel>
 8005daa:	4603      	mov	r3, r0
 8005dac:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8005db0:	781b      	ldrb	r3, [r3, #0]
 8005db2:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToSignal(eTmpVppPreset);
 8005db4:	7bfb      	ldrb	r3, [r7, #15]
 8005db6:	4618      	mov	r0, r3
 8005db8:	f001 f8fe 	bl	8006fb8 <VPP_ApplyProfileToSignal>

		// pause timer to reAux both outputs
		OUTPUT_TIMER->CR1 &= ~(TIM_CR1_CEN);
 8005dbc:	4b1a      	ldr	r3, [pc, #104]	; (8005e28 <FuncO_ApplyProfileToSignal+0xbc>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a19      	ldr	r2, [pc, #100]	; (8005e28 <FuncO_ApplyProfileToSignal+0xbc>)
 8005dc2:	f023 0301 	bic.w	r3, r3, #1
 8005dc6:	6013      	str	r3, [r2, #0]
		//HAL_TIM_Base_Stop(&htim8);

		// restart the DAC with the new data
		HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8005dc8:	2100      	movs	r1, #0
 8005dca:	4818      	ldr	r0, [pc, #96]	; (8005e2c <FuncO_ApplyProfileToSignal+0xc0>)
 8005dcc:	f005 fb72 	bl	800b4b4 <HAL_DAC_Stop_DMA>
		HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8005dd0:	2000      	movs	r0, #0
 8005dd2:	f000 fdbb 	bl	800694c <SM_GetOutputChannel>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	f103 0208 	add.w	r2, r3, #8
 8005ddc:	2300      	movs	r3, #0
 8005dde:	9300      	str	r3, [sp, #0]
 8005de0:	2378      	movs	r3, #120	; 0x78
 8005de2:	2100      	movs	r1, #0
 8005de4:	4811      	ldr	r0, [pc, #68]	; (8005e2c <FuncO_ApplyProfileToSignal+0xc0>)
 8005de6:	f005 faa3 	bl	800b330 <HAL_DAC_Start_DMA>

		// restart the the other DAC
		HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1);
 8005dea:	2100      	movs	r1, #0
 8005dec:	4810      	ldr	r0, [pc, #64]	; (8005e30 <FuncO_ApplyProfileToSignal+0xc4>)
 8005dee:	f005 fb61 	bl	800b4b4 <HAL_DAC_Stop_DMA>
		HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(AUX_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8005df2:	2001      	movs	r0, #1
 8005df4:	f000 fdaa 	bl	800694c <SM_GetOutputChannel>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	f103 0208 	add.w	r2, r3, #8
 8005dfe:	2300      	movs	r3, #0
 8005e00:	9300      	str	r3, [sp, #0]
 8005e02:	2378      	movs	r3, #120	; 0x78
 8005e04:	2100      	movs	r1, #0
 8005e06:	480a      	ldr	r0, [pc, #40]	; (8005e30 <FuncO_ApplyProfileToSignal+0xc4>)
 8005e08:	f005 fa92 	bl	800b330 <HAL_DAC_Start_DMA>

		// resume timer to reAux both outputs
		//HAL_TIM_Base_Start(&htim8);
		OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
 8005e0c:	4b06      	ldr	r3, [pc, #24]	; (8005e28 <FuncO_ApplyProfileToSignal+0xbc>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a05      	ldr	r2, [pc, #20]	; (8005e28 <FuncO_ApplyProfileToSignal+0xbc>)
 8005e12:	f043 0301 	orr.w	r3, r3, #1
 8005e16:	6013      	str	r3, [r2, #0]



}
 8005e18:	bf00      	nop
 8005e1a:	3714      	adds	r7, #20
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd90      	pop	{r4, r7, pc}
 8005e20:	20000128 	.word	0x20000128
 8005e24:	08015e58 	.word	0x08015e58
 8005e28:	40013400 	.word	0x40013400
 8005e2c:	2000292c 	.word	0x2000292c
 8005e30:	20002918 	.word	0x20002918

08005e34 <FuncO_ApplyProfileToAux>:

 *	@retval None
 *
 */
void FuncO_ApplyProfileToAux(eOutput_mode pPresetEnum)
{
 8005e34:	b590      	push	{r4, r7, lr}
 8005e36:	b087      	sub	sp, #28
 8005e38:	af02      	add	r7, sp, #8
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef res;

	// set the next output function
	SM_GetOutputChannel(AUX_CHANNEL)->func_profile = &theFuncProfiles[pPresetEnum];
 8005e3e:	79fc      	ldrb	r4, [r7, #7]
 8005e40:	2001      	movs	r0, #1
 8005e42:	f000 fd83 	bl	800694c <SM_GetOutputChannel>
 8005e46:	4601      	mov	r1, r0
 8005e48:	00e3      	lsls	r3, r4, #3
 8005e4a:	4a96      	ldr	r2, [pc, #600]	; (80060a4 <FuncO_ApplyProfileToAux+0x270>)
 8005e4c:	4413      	add	r3, r2
 8005e4e:	f8c1 31e8 	str.w	r3, [r1, #488]	; 0x1e8


	if(pPresetEnum == PWM_FUNC_MODE)
 8005e52:	79fb      	ldrb	r3, [r7, #7]
 8005e54:	2b06      	cmp	r3, #6
 8005e56:	d10a      	bne.n	8005e6e <FuncO_ApplyProfileToAux+0x3a>
	{
		printf("FuncO_ApplyProfileToAux PWM_FUNC_MODE\n");
 8005e58:	4893      	ldr	r0, [pc, #588]	; (80060a8 <FuncO_ApplyProfileToAux+0x274>)
 8005e5a:	f00c f8fd 	bl	8012058 <puts>
		// switch output signal from DAC to PWM

		SM_DisableDacToAux();
 8005e5e:	f000 ffdd 	bl	8006e1c <SM_DisableDacToAux>
		SM_EnablePwmToAux();
 8005e62:	f000 fd89 	bl	8006978 <SM_EnablePwmToAux>

		last_output_mode_was_pwm = 1;
 8005e66:	4b91      	ldr	r3, [pc, #580]	; (80060ac <FuncO_ApplyProfileToAux+0x278>)
 8005e68:	2201      	movs	r2, #1
 8005e6a:	701a      	strb	r2, [r3, #0]
		res = HAL_TIM_Base_Start(&htim8);
		printf("Result:%u\n",res);
		//OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
	}

}
 8005e6c:	e115      	b.n	800609a <FuncO_ApplyProfileToAux+0x266>
	else if(last_output_mode_was_pwm)
 8005e6e:	4b8f      	ldr	r3, [pc, #572]	; (80060ac <FuncO_ApplyProfileToAux+0x278>)
 8005e70:	781b      	ldrb	r3, [r3, #0]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	f000 808e 	beq.w	8005f94 <FuncO_ApplyProfileToAux+0x160>
		printf("FuncO_ApplyProfileToAux NOT PWM_FUNC_MODE\n");
 8005e78:	488d      	ldr	r0, [pc, #564]	; (80060b0 <FuncO_ApplyProfileToAux+0x27c>)
 8005e7a:	f00c f8ed 	bl	8012058 <puts>
		SM_DisablePwmToAux();
 8005e7e:	f000 feb7 	bl	8006bf0 <SM_DisablePwmToAux>
		SM_EnableDacToAux();
 8005e82:	f000 fef1 	bl	8006c68 <SM_EnableDacToAux>
		printf("FuncO_ApplyProfileToAux SM_GetOutputChannel\n");
 8005e86:	488b      	ldr	r0, [pc, #556]	; (80060b4 <FuncO_ApplyProfileToAux+0x280>)
 8005e88:	f00c f8e6 	bl	8012058 <puts>
		SM_GetOutputChannel(AUX_CHANNEL)->ref_lut_data = theFuncProfiles[pPresetEnum].lookup_table_data;
 8005e8c:	79fc      	ldrb	r4, [r7, #7]
 8005e8e:	2001      	movs	r0, #1
 8005e90:	f000 fd5c 	bl	800694c <SM_GetOutputChannel>
 8005e94:	4601      	mov	r1, r0
 8005e96:	4a83      	ldr	r2, [pc, #524]	; (80060a4 <FuncO_ApplyProfileToAux+0x270>)
 8005e98:	00e3      	lsls	r3, r4, #3
 8005e9a:	4413      	add	r3, r2
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	604b      	str	r3, [r1, #4]
		printf("FuncO_ApplyProfileToAux SM_GetOutputChannel\n");
 8005ea0:	4884      	ldr	r0, [pc, #528]	; (80060b4 <FuncO_ApplyProfileToAux+0x280>)
 8005ea2:	f00c f8d9 	bl	8012058 <puts>
		eAmpSettings_t eTmpVppPreset = SM_GetOutputChannel(AUX_CHANNEL)->amp_profile->amp_setting;
 8005ea6:	2001      	movs	r0, #1
 8005ea8:	f000 fd50 	bl	800694c <SM_GetOutputChannel>
 8005eac:	4603      	mov	r3, r0
 8005eae:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8005eb2:	781b      	ldrb	r3, [r3, #0]
 8005eb4:	737b      	strb	r3, [r7, #13]
		printf("VPP_ApplyProfileToAux");
 8005eb6:	4880      	ldr	r0, [pc, #512]	; (80060b8 <FuncO_ApplyProfileToAux+0x284>)
 8005eb8:	f00c f85a 	bl	8011f70 <iprintf>
		VPP_ApplyProfileToAux(eTmpVppPreset);
 8005ebc:	7b7b      	ldrb	r3, [r7, #13]
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f001 f8a8 	bl	8007014 <VPP_ApplyProfileToAux>
		printf("FuncO_ApplyProfileToAux HAL_TIM_Base_Stop(&htim2)\n");
 8005ec4:	487d      	ldr	r0, [pc, #500]	; (80060bc <FuncO_ApplyProfileToAux+0x288>)
 8005ec6:	f00c f8c7 	bl	8012058 <puts>
		res = HAL_TIM_Base_Stop(&htim8);
 8005eca:	487d      	ldr	r0, [pc, #500]	; (80060c0 <FuncO_ApplyProfileToAux+0x28c>)
 8005ecc:	f007 fc98 	bl	800d800 <HAL_TIM_Base_Stop>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005ed4:	7bbb      	ldrb	r3, [r7, #14]
 8005ed6:	4619      	mov	r1, r3
 8005ed8:	487a      	ldr	r0, [pc, #488]	; (80060c4 <FuncO_ApplyProfileToAux+0x290>)
 8005eda:	f00c f849 	bl	8011f70 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1)\n");
 8005ede:	487a      	ldr	r0, [pc, #488]	; (80060c8 <FuncO_ApplyProfileToAux+0x294>)
 8005ee0:	f00c f8ba 	bl	8012058 <puts>
		res = HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1);
 8005ee4:	2100      	movs	r1, #0
 8005ee6:	4879      	ldr	r0, [pc, #484]	; (80060cc <FuncO_ApplyProfileToAux+0x298>)
 8005ee8:	f005 fae4 	bl	800b4b4 <HAL_DAC_Stop_DMA>
 8005eec:	4603      	mov	r3, r0
 8005eee:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005ef0:	7bbb      	ldrb	r3, [r7, #14]
 8005ef2:	4619      	mov	r1, r3
 8005ef4:	4873      	ldr	r0, [pc, #460]	; (80060c4 <FuncO_ApplyProfileToAux+0x290>)
 8005ef6:	f00c f83b 	bl	8011f70 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1)\n");
 8005efa:	4875      	ldr	r0, [pc, #468]	; (80060d0 <FuncO_ApplyProfileToAux+0x29c>)
 8005efc:	f00c f8ac 	bl	8012058 <puts>
		res = HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(AUX_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8005f00:	2001      	movs	r0, #1
 8005f02:	f000 fd23 	bl	800694c <SM_GetOutputChannel>
 8005f06:	4603      	mov	r3, r0
 8005f08:	f103 0208 	add.w	r2, r3, #8
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	9300      	str	r3, [sp, #0]
 8005f10:	2378      	movs	r3, #120	; 0x78
 8005f12:	2100      	movs	r1, #0
 8005f14:	486d      	ldr	r0, [pc, #436]	; (80060cc <FuncO_ApplyProfileToAux+0x298>)
 8005f16:	f005 fa0b 	bl	800b330 <HAL_DAC_Start_DMA>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005f1e:	7bbb      	ldrb	r3, [r7, #14]
 8005f20:	4619      	mov	r1, r3
 8005f22:	4868      	ldr	r0, [pc, #416]	; (80060c4 <FuncO_ApplyProfileToAux+0x290>)
 8005f24:	f00c f824 	bl	8011f70 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1)\n");
 8005f28:	486a      	ldr	r0, [pc, #424]	; (80060d4 <FuncO_ApplyProfileToAux+0x2a0>)
 8005f2a:	f00c f895 	bl	8012058 <puts>
		res = HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8005f2e:	2100      	movs	r1, #0
 8005f30:	4869      	ldr	r0, [pc, #420]	; (80060d8 <FuncO_ApplyProfileToAux+0x2a4>)
 8005f32:	f005 fabf 	bl	800b4b4 <HAL_DAC_Stop_DMA>
 8005f36:	4603      	mov	r3, r0
 8005f38:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005f3a:	7bbb      	ldrb	r3, [r7, #14]
 8005f3c:	4619      	mov	r1, r3
 8005f3e:	4861      	ldr	r0, [pc, #388]	; (80060c4 <FuncO_ApplyProfileToAux+0x290>)
 8005f40:	f00c f816 	bl	8011f70 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1)\n");
 8005f44:	4865      	ldr	r0, [pc, #404]	; (80060dc <FuncO_ApplyProfileToAux+0x2a8>)
 8005f46:	f00c f887 	bl	8012058 <puts>
		res = HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8005f4a:	2000      	movs	r0, #0
 8005f4c:	f000 fcfe 	bl	800694c <SM_GetOutputChannel>
 8005f50:	4603      	mov	r3, r0
 8005f52:	f103 0208 	add.w	r2, r3, #8
 8005f56:	2300      	movs	r3, #0
 8005f58:	9300      	str	r3, [sp, #0]
 8005f5a:	2378      	movs	r3, #120	; 0x78
 8005f5c:	2100      	movs	r1, #0
 8005f5e:	485e      	ldr	r0, [pc, #376]	; (80060d8 <FuncO_ApplyProfileToAux+0x2a4>)
 8005f60:	f005 f9e6 	bl	800b330 <HAL_DAC_Start_DMA>
 8005f64:	4603      	mov	r3, r0
 8005f66:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005f68:	7bbb      	ldrb	r3, [r7, #14]
 8005f6a:	4619      	mov	r1, r3
 8005f6c:	4855      	ldr	r0, [pc, #340]	; (80060c4 <FuncO_ApplyProfileToAux+0x290>)
 8005f6e:	f00b ffff 	bl	8011f70 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_TIM_Base_Start(&htim2)\n");
 8005f72:	485b      	ldr	r0, [pc, #364]	; (80060e0 <FuncO_ApplyProfileToAux+0x2ac>)
 8005f74:	f00c f870 	bl	8012058 <puts>
		res = HAL_TIM_Base_Start(&htim8);
 8005f78:	4851      	ldr	r0, [pc, #324]	; (80060c0 <FuncO_ApplyProfileToAux+0x28c>)
 8005f7a:	f007 fc13 	bl	800d7a4 <HAL_TIM_Base_Start>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005f82:	7bbb      	ldrb	r3, [r7, #14]
 8005f84:	4619      	mov	r1, r3
 8005f86:	484f      	ldr	r0, [pc, #316]	; (80060c4 <FuncO_ApplyProfileToAux+0x290>)
 8005f88:	f00b fff2 	bl	8011f70 <iprintf>
		last_output_mode_was_pwm = 0;
 8005f8c:	4b47      	ldr	r3, [pc, #284]	; (80060ac <FuncO_ApplyProfileToAux+0x278>)
 8005f8e:	2200      	movs	r2, #0
 8005f90:	701a      	strb	r2, [r3, #0]
}
 8005f92:	e082      	b.n	800609a <FuncO_ApplyProfileToAux+0x266>
		printf("FuncO_ApplyProfileToAux SM_GetOutputChannel\n");
 8005f94:	4847      	ldr	r0, [pc, #284]	; (80060b4 <FuncO_ApplyProfileToAux+0x280>)
 8005f96:	f00c f85f 	bl	8012058 <puts>
		SM_GetOutputChannel(AUX_CHANNEL)->ref_lut_data = theFuncProfiles[pPresetEnum].lookup_table_data;
 8005f9a:	79fc      	ldrb	r4, [r7, #7]
 8005f9c:	2001      	movs	r0, #1
 8005f9e:	f000 fcd5 	bl	800694c <SM_GetOutputChannel>
 8005fa2:	4601      	mov	r1, r0
 8005fa4:	4a3f      	ldr	r2, [pc, #252]	; (80060a4 <FuncO_ApplyProfileToAux+0x270>)
 8005fa6:	00e3      	lsls	r3, r4, #3
 8005fa8:	4413      	add	r3, r2
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	604b      	str	r3, [r1, #4]
		printf("FuncO_ApplyProfileToAux SM_GetOutputChannel\n");
 8005fae:	4841      	ldr	r0, [pc, #260]	; (80060b4 <FuncO_ApplyProfileToAux+0x280>)
 8005fb0:	f00c f852 	bl	8012058 <puts>
		eAmpSettings_t eTmpVppPreset = SM_GetOutputChannel(AUX_CHANNEL)->amp_profile->amp_setting;
 8005fb4:	2001      	movs	r0, #1
 8005fb6:	f000 fcc9 	bl	800694c <SM_GetOutputChannel>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8005fc0:	781b      	ldrb	r3, [r3, #0]
 8005fc2:	73fb      	strb	r3, [r7, #15]
		printf("VPP_ApplyProfileToAux");
 8005fc4:	483c      	ldr	r0, [pc, #240]	; (80060b8 <FuncO_ApplyProfileToAux+0x284>)
 8005fc6:	f00b ffd3 	bl	8011f70 <iprintf>
		VPP_ApplyProfileToAux(eTmpVppPreset);
 8005fca:	7bfb      	ldrb	r3, [r7, #15]
 8005fcc:	4618      	mov	r0, r3
 8005fce:	f001 f821 	bl	8007014 <VPP_ApplyProfileToAux>
		printf("FuncO_ApplyProfileToAux HAL_TIM_Base_Stop(&htim2)\n");
 8005fd2:	483a      	ldr	r0, [pc, #232]	; (80060bc <FuncO_ApplyProfileToAux+0x288>)
 8005fd4:	f00c f840 	bl	8012058 <puts>
		res = HAL_TIM_Base_Stop(&htim8);
 8005fd8:	4839      	ldr	r0, [pc, #228]	; (80060c0 <FuncO_ApplyProfileToAux+0x28c>)
 8005fda:	f007 fc11 	bl	800d800 <HAL_TIM_Base_Stop>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005fe2:	7bbb      	ldrb	r3, [r7, #14]
 8005fe4:	4619      	mov	r1, r3
 8005fe6:	4837      	ldr	r0, [pc, #220]	; (80060c4 <FuncO_ApplyProfileToAux+0x290>)
 8005fe8:	f00b ffc2 	bl	8011f70 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1)\n");
 8005fec:	4836      	ldr	r0, [pc, #216]	; (80060c8 <FuncO_ApplyProfileToAux+0x294>)
 8005fee:	f00c f833 	bl	8012058 <puts>
		res = HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1);
 8005ff2:	2100      	movs	r1, #0
 8005ff4:	4835      	ldr	r0, [pc, #212]	; (80060cc <FuncO_ApplyProfileToAux+0x298>)
 8005ff6:	f005 fa5d 	bl	800b4b4 <HAL_DAC_Stop_DMA>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005ffe:	7bbb      	ldrb	r3, [r7, #14]
 8006000:	4619      	mov	r1, r3
 8006002:	4830      	ldr	r0, [pc, #192]	; (80060c4 <FuncO_ApplyProfileToAux+0x290>)
 8006004:	f00b ffb4 	bl	8011f70 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1)\n");
 8006008:	4831      	ldr	r0, [pc, #196]	; (80060d0 <FuncO_ApplyProfileToAux+0x29c>)
 800600a:	f00c f825 	bl	8012058 <puts>
		res = HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(AUX_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 800600e:	2001      	movs	r0, #1
 8006010:	f000 fc9c 	bl	800694c <SM_GetOutputChannel>
 8006014:	4603      	mov	r3, r0
 8006016:	f103 0208 	add.w	r2, r3, #8
 800601a:	2300      	movs	r3, #0
 800601c:	9300      	str	r3, [sp, #0]
 800601e:	2378      	movs	r3, #120	; 0x78
 8006020:	2100      	movs	r1, #0
 8006022:	482a      	ldr	r0, [pc, #168]	; (80060cc <FuncO_ApplyProfileToAux+0x298>)
 8006024:	f005 f984 	bl	800b330 <HAL_DAC_Start_DMA>
 8006028:	4603      	mov	r3, r0
 800602a:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 800602c:	7bbb      	ldrb	r3, [r7, #14]
 800602e:	4619      	mov	r1, r3
 8006030:	4824      	ldr	r0, [pc, #144]	; (80060c4 <FuncO_ApplyProfileToAux+0x290>)
 8006032:	f00b ff9d 	bl	8011f70 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1)\n");
 8006036:	4827      	ldr	r0, [pc, #156]	; (80060d4 <FuncO_ApplyProfileToAux+0x2a0>)
 8006038:	f00c f80e 	bl	8012058 <puts>
		res = HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 800603c:	2100      	movs	r1, #0
 800603e:	4826      	ldr	r0, [pc, #152]	; (80060d8 <FuncO_ApplyProfileToAux+0x2a4>)
 8006040:	f005 fa38 	bl	800b4b4 <HAL_DAC_Stop_DMA>
 8006044:	4603      	mov	r3, r0
 8006046:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8006048:	7bbb      	ldrb	r3, [r7, #14]
 800604a:	4619      	mov	r1, r3
 800604c:	481d      	ldr	r0, [pc, #116]	; (80060c4 <FuncO_ApplyProfileToAux+0x290>)
 800604e:	f00b ff8f 	bl	8011f70 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1)\n");
 8006052:	4822      	ldr	r0, [pc, #136]	; (80060dc <FuncO_ApplyProfileToAux+0x2a8>)
 8006054:	f00c f800 	bl	8012058 <puts>
		res = HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8006058:	2000      	movs	r0, #0
 800605a:	f000 fc77 	bl	800694c <SM_GetOutputChannel>
 800605e:	4603      	mov	r3, r0
 8006060:	f103 0208 	add.w	r2, r3, #8
 8006064:	2300      	movs	r3, #0
 8006066:	9300      	str	r3, [sp, #0]
 8006068:	2378      	movs	r3, #120	; 0x78
 800606a:	2100      	movs	r1, #0
 800606c:	481a      	ldr	r0, [pc, #104]	; (80060d8 <FuncO_ApplyProfileToAux+0x2a4>)
 800606e:	f005 f95f 	bl	800b330 <HAL_DAC_Start_DMA>
 8006072:	4603      	mov	r3, r0
 8006074:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8006076:	7bbb      	ldrb	r3, [r7, #14]
 8006078:	4619      	mov	r1, r3
 800607a:	4812      	ldr	r0, [pc, #72]	; (80060c4 <FuncO_ApplyProfileToAux+0x290>)
 800607c:	f00b ff78 	bl	8011f70 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_TIM_Base_Start(&htim2)\n");
 8006080:	4817      	ldr	r0, [pc, #92]	; (80060e0 <FuncO_ApplyProfileToAux+0x2ac>)
 8006082:	f00b ffe9 	bl	8012058 <puts>
		res = HAL_TIM_Base_Start(&htim8);
 8006086:	480e      	ldr	r0, [pc, #56]	; (80060c0 <FuncO_ApplyProfileToAux+0x28c>)
 8006088:	f007 fb8c 	bl	800d7a4 <HAL_TIM_Base_Start>
 800608c:	4603      	mov	r3, r0
 800608e:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8006090:	7bbb      	ldrb	r3, [r7, #14]
 8006092:	4619      	mov	r1, r3
 8006094:	480b      	ldr	r0, [pc, #44]	; (80060c4 <FuncO_ApplyProfileToAux+0x290>)
 8006096:	f00b ff6b 	bl	8011f70 <iprintf>
}
 800609a:	bf00      	nop
 800609c:	3714      	adds	r7, #20
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd90      	pop	{r4, r7, pc}
 80060a2:	bf00      	nop
 80060a4:	20000128 	.word	0x20000128
 80060a8:	08015e6c 	.word	0x08015e6c
 80060ac:	2000210c 	.word	0x2000210c
 80060b0:	08015e94 	.word	0x08015e94
 80060b4:	08015ec0 	.word	0x08015ec0
 80060b8:	08015eec 	.word	0x08015eec
 80060bc:	08015f04 	.word	0x08015f04
 80060c0:	20002a64 	.word	0x20002a64
 80060c4:	08015f38 	.word	0x08015f38
 80060c8:	08015f44 	.word	0x08015f44
 80060cc:	20002918 	.word	0x20002918
 80060d0:	08015f88 	.word	0x08015f88
 80060d4:	08015fcc 	.word	0x08015fcc
 80060d8:	2000292c 	.word	0x2000292c
 80060dc:	08016010 	.word	0x08016010
 80060e0:	08016054 	.word	0x08016054

080060e4 <GO_ResetLastEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
void GO_ResetLastEncoderValue()
{
 80060e4:	b480      	push	{r7}
 80060e6:	af00      	add	r7, sp, #0
	gain_last_encoder_value = 0;
 80060e8:	4b03      	ldr	r3, [pc, #12]	; (80060f8 <GO_ResetLastEncoderValue+0x14>)
 80060ea:	2200      	movs	r2, #0
 80060ec:	801a      	strh	r2, [r3, #0]
}
 80060ee:	bf00      	nop
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr
 80060f8:	20002110 	.word	0x20002110

080060fc <GO_MapEncoderPositionToSignalOutput>:
 *	@param None
 *	@retval None
 *
 */
void GO_MapEncoderPositionToSignalOutput(uint16_t pEncoderValue)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b084      	sub	sp, #16
 8006100:	af00      	add	r7, sp, #0
 8006102:	4603      	mov	r3, r0
 8006104:	80fb      	strh	r3, [r7, #6]
	eGainSettings_t temp_gain = SM_GetOutputChannel(SIGNAL_CHANNEL)->gain_profile->gain;
 8006106:	2000      	movs	r0, #0
 8006108:	f000 fc20 	bl	800694c <SM_GetOutputChannel>
 800610c:	4603      	mov	r3, r0
 800610e:	f8d3 31f0 	ldr.w	r3, [r3, #496]	; 0x1f0
 8006112:	781b      	ldrb	r3, [r3, #0]
 8006114:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > gain_last_encoder_value)
 8006116:	4b15      	ldr	r3, [pc, #84]	; (800616c <GO_MapEncoderPositionToSignalOutput+0x70>)
 8006118:	881b      	ldrh	r3, [r3, #0]
 800611a:	88fa      	ldrh	r2, [r7, #6]
 800611c:	429a      	cmp	r2, r3
 800611e:	d90c      	bls.n	800613a <GO_MapEncoderPositionToSignalOutput+0x3e>
	{
		temp_gain++;
 8006120:	7bfb      	ldrb	r3, [r7, #15]
 8006122:	3301      	adds	r3, #1
 8006124:	73fb      	strb	r3, [r7, #15]
		if(temp_gain > MAX_NUM_GAIN_PRESETS-1) temp_gain = SEVEN_GAIN;
 8006126:	7bfb      	ldrb	r3, [r7, #15]
 8006128:	2b07      	cmp	r3, #7
 800612a:	d901      	bls.n	8006130 <GO_MapEncoderPositionToSignalOutput+0x34>
 800612c:	2307      	movs	r3, #7
 800612e:	73fb      	strb	r3, [r7, #15]
		GO_ApplyPresetToSignal(temp_gain);
 8006130:	7bfb      	ldrb	r3, [r7, #15]
 8006132:	4618      	mov	r0, r3
 8006134:	f000 f81c 	bl	8006170 <GO_ApplyPresetToSignal>
 8006138:	e010      	b.n	800615c <GO_MapEncoderPositionToSignalOutput+0x60>

	}
	else if (pEncoderValue < gain_last_encoder_value)
 800613a:	4b0c      	ldr	r3, [pc, #48]	; (800616c <GO_MapEncoderPositionToSignalOutput+0x70>)
 800613c:	881b      	ldrh	r3, [r3, #0]
 800613e:	88fa      	ldrh	r2, [r7, #6]
 8006140:	429a      	cmp	r2, r3
 8006142:	d20b      	bcs.n	800615c <GO_MapEncoderPositionToSignalOutput+0x60>
	{
		temp_gain--;
 8006144:	7bfb      	ldrb	r3, [r7, #15]
 8006146:	3b01      	subs	r3, #1
 8006148:	73fb      	strb	r3, [r7, #15]
		if(temp_gain > MAX_NUM_GAIN_PRESETS-1) temp_gain = ZERO_GAIN;
 800614a:	7bfb      	ldrb	r3, [r7, #15]
 800614c:	2b07      	cmp	r3, #7
 800614e:	d901      	bls.n	8006154 <GO_MapEncoderPositionToSignalOutput+0x58>
 8006150:	2300      	movs	r3, #0
 8006152:	73fb      	strb	r3, [r7, #15]
		GO_ApplyPresetToSignal(temp_gain);
 8006154:	7bfb      	ldrb	r3, [r7, #15]
 8006156:	4618      	mov	r0, r3
 8006158:	f000 f80a 	bl	8006170 <GO_ApplyPresetToSignal>
	}
	gain_last_encoder_value = pEncoderValue;
 800615c:	4a03      	ldr	r2, [pc, #12]	; (800616c <GO_MapEncoderPositionToSignalOutput+0x70>)
 800615e:	88fb      	ldrh	r3, [r7, #6]
 8006160:	8013      	strh	r3, [r2, #0]

	// artifically offset PWM signal above DC
	//BO_SetPwmSignalOffsetForGain(temp_gain);

}
 8006162:	bf00      	nop
 8006164:	3710      	adds	r7, #16
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}
 800616a:	bf00      	nop
 800616c:	20002110 	.word	0x20002110

08006170 <GO_ApplyPresetToSignal>:
 *	@param None
 *	@retval None
 *
 */
void GO_ApplyPresetToSignal(eGainSettings_t pPresetEnum)
{
 8006170:	b590      	push	{r4, r7, lr}
 8006172:	b083      	sub	sp, #12
 8006174:	af00      	add	r7, sp, #0
 8006176:	4603      	mov	r3, r0
 8006178:	71fb      	strb	r3, [r7, #7]




	SM_GetOutputChannel(SIGNAL_CHANNEL)->gain_profile = &theGainProfiles[pPresetEnum];
 800617a:	79fc      	ldrb	r4, [r7, #7]
 800617c:	2000      	movs	r0, #0
 800617e:	f000 fbe5 	bl	800694c <SM_GetOutputChannel>
 8006182:	4601      	mov	r1, r0
 8006184:	4623      	mov	r3, r4
 8006186:	005b      	lsls	r3, r3, #1
 8006188:	4423      	add	r3, r4
 800618a:	4a4f      	ldr	r2, [pc, #316]	; (80062c8 <GO_ApplyPresetToSignal+0x158>)
 800618c:	4413      	add	r3, r2
 800618e:	f8c1 31f0 	str.w	r3, [r1, #496]	; 0x1f0

	switch(pPresetEnum)
 8006192:	79fb      	ldrb	r3, [r7, #7]
 8006194:	2b07      	cmp	r3, #7
 8006196:	f200 8093 	bhi.w	80062c0 <GO_ApplyPresetToSignal+0x150>
 800619a:	a201      	add	r2, pc, #4	; (adr r2, 80061a0 <GO_ApplyPresetToSignal+0x30>)
 800619c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061a0:	080061c1 	.word	0x080061c1
 80061a4:	080061e1 	.word	0x080061e1
 80061a8:	08006201 	.word	0x08006201
 80061ac:	08006221 	.word	0x08006221
 80061b0:	08006241 	.word	0x08006241
 80061b4:	08006261 	.word	0x08006261
 80061b8:	08006281 	.word	0x08006281
 80061bc:	080062a1 	.word	0x080062a1
	{
		case ZERO_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_RESET);
 80061c0:	2200      	movs	r2, #0
 80061c2:	2101      	movs	r1, #1
 80061c4:	4841      	ldr	r0, [pc, #260]	; (80062cc <GO_ApplyPresetToSignal+0x15c>)
 80061c6:	f006 f9f3 	bl	800c5b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_RESET);
 80061ca:	2200      	movs	r2, #0
 80061cc:	2120      	movs	r1, #32
 80061ce:	4840      	ldr	r0, [pc, #256]	; (80062d0 <GO_ApplyPresetToSignal+0x160>)
 80061d0:	f006 f9ee 	bl	800c5b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_RESET);
 80061d4:	2200      	movs	r2, #0
 80061d6:	2110      	movs	r1, #16
 80061d8:	483d      	ldr	r0, [pc, #244]	; (80062d0 <GO_ApplyPresetToSignal+0x160>)
 80061da:	f006 f9e9 	bl	800c5b0 <HAL_GPIO_WritePin>
			break;
 80061de:	e06f      	b.n	80062c0 <GO_ApplyPresetToSignal+0x150>

		case ONE_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_SET);
 80061e0:	2201      	movs	r2, #1
 80061e2:	2101      	movs	r1, #1
 80061e4:	4839      	ldr	r0, [pc, #228]	; (80062cc <GO_ApplyPresetToSignal+0x15c>)
 80061e6:	f006 f9e3 	bl	800c5b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_RESET);
 80061ea:	2200      	movs	r2, #0
 80061ec:	2120      	movs	r1, #32
 80061ee:	4838      	ldr	r0, [pc, #224]	; (80062d0 <GO_ApplyPresetToSignal+0x160>)
 80061f0:	f006 f9de 	bl	800c5b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_RESET);
 80061f4:	2200      	movs	r2, #0
 80061f6:	2110      	movs	r1, #16
 80061f8:	4835      	ldr	r0, [pc, #212]	; (80062d0 <GO_ApplyPresetToSignal+0x160>)
 80061fa:	f006 f9d9 	bl	800c5b0 <HAL_GPIO_WritePin>
			break;
 80061fe:	e05f      	b.n	80062c0 <GO_ApplyPresetToSignal+0x150>

		case TWO_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_RESET);
 8006200:	2200      	movs	r2, #0
 8006202:	2101      	movs	r1, #1
 8006204:	4831      	ldr	r0, [pc, #196]	; (80062cc <GO_ApplyPresetToSignal+0x15c>)
 8006206:	f006 f9d3 	bl	800c5b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_SET);
 800620a:	2201      	movs	r2, #1
 800620c:	2120      	movs	r1, #32
 800620e:	4830      	ldr	r0, [pc, #192]	; (80062d0 <GO_ApplyPresetToSignal+0x160>)
 8006210:	f006 f9ce 	bl	800c5b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_RESET);
 8006214:	2200      	movs	r2, #0
 8006216:	2110      	movs	r1, #16
 8006218:	482d      	ldr	r0, [pc, #180]	; (80062d0 <GO_ApplyPresetToSignal+0x160>)
 800621a:	f006 f9c9 	bl	800c5b0 <HAL_GPIO_WritePin>
			break;
 800621e:	e04f      	b.n	80062c0 <GO_ApplyPresetToSignal+0x150>

		case THREE_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_SET);
 8006220:	2201      	movs	r2, #1
 8006222:	2101      	movs	r1, #1
 8006224:	4829      	ldr	r0, [pc, #164]	; (80062cc <GO_ApplyPresetToSignal+0x15c>)
 8006226:	f006 f9c3 	bl	800c5b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_SET);
 800622a:	2201      	movs	r2, #1
 800622c:	2120      	movs	r1, #32
 800622e:	4828      	ldr	r0, [pc, #160]	; (80062d0 <GO_ApplyPresetToSignal+0x160>)
 8006230:	f006 f9be 	bl	800c5b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_RESET);
 8006234:	2200      	movs	r2, #0
 8006236:	2110      	movs	r1, #16
 8006238:	4825      	ldr	r0, [pc, #148]	; (80062d0 <GO_ApplyPresetToSignal+0x160>)
 800623a:	f006 f9b9 	bl	800c5b0 <HAL_GPIO_WritePin>
			break;
 800623e:	e03f      	b.n	80062c0 <GO_ApplyPresetToSignal+0x150>

		case FOUR_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_RESET);
 8006240:	2200      	movs	r2, #0
 8006242:	2101      	movs	r1, #1
 8006244:	4821      	ldr	r0, [pc, #132]	; (80062cc <GO_ApplyPresetToSignal+0x15c>)
 8006246:	f006 f9b3 	bl	800c5b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_RESET);
 800624a:	2200      	movs	r2, #0
 800624c:	2120      	movs	r1, #32
 800624e:	4820      	ldr	r0, [pc, #128]	; (80062d0 <GO_ApplyPresetToSignal+0x160>)
 8006250:	f006 f9ae 	bl	800c5b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_SET);
 8006254:	2201      	movs	r2, #1
 8006256:	2110      	movs	r1, #16
 8006258:	481d      	ldr	r0, [pc, #116]	; (80062d0 <GO_ApplyPresetToSignal+0x160>)
 800625a:	f006 f9a9 	bl	800c5b0 <HAL_GPIO_WritePin>
			break;
 800625e:	e02f      	b.n	80062c0 <GO_ApplyPresetToSignal+0x150>

		case FIVE_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_SET);
 8006260:	2201      	movs	r2, #1
 8006262:	2101      	movs	r1, #1
 8006264:	4819      	ldr	r0, [pc, #100]	; (80062cc <GO_ApplyPresetToSignal+0x15c>)
 8006266:	f006 f9a3 	bl	800c5b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_RESET);
 800626a:	2200      	movs	r2, #0
 800626c:	2120      	movs	r1, #32
 800626e:	4818      	ldr	r0, [pc, #96]	; (80062d0 <GO_ApplyPresetToSignal+0x160>)
 8006270:	f006 f99e 	bl	800c5b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_SET);
 8006274:	2201      	movs	r2, #1
 8006276:	2110      	movs	r1, #16
 8006278:	4815      	ldr	r0, [pc, #84]	; (80062d0 <GO_ApplyPresetToSignal+0x160>)
 800627a:	f006 f999 	bl	800c5b0 <HAL_GPIO_WritePin>
			break;
 800627e:	e01f      	b.n	80062c0 <GO_ApplyPresetToSignal+0x150>

		case SIX_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_RESET);
 8006280:	2200      	movs	r2, #0
 8006282:	2101      	movs	r1, #1
 8006284:	4811      	ldr	r0, [pc, #68]	; (80062cc <GO_ApplyPresetToSignal+0x15c>)
 8006286:	f006 f993 	bl	800c5b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_SET);
 800628a:	2201      	movs	r2, #1
 800628c:	2120      	movs	r1, #32
 800628e:	4810      	ldr	r0, [pc, #64]	; (80062d0 <GO_ApplyPresetToSignal+0x160>)
 8006290:	f006 f98e 	bl	800c5b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_SET);
 8006294:	2201      	movs	r2, #1
 8006296:	2110      	movs	r1, #16
 8006298:	480d      	ldr	r0, [pc, #52]	; (80062d0 <GO_ApplyPresetToSignal+0x160>)
 800629a:	f006 f989 	bl	800c5b0 <HAL_GPIO_WritePin>
			break;
 800629e:	e00f      	b.n	80062c0 <GO_ApplyPresetToSignal+0x150>

		case SEVEN_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_SET);
 80062a0:	2201      	movs	r2, #1
 80062a2:	2101      	movs	r1, #1
 80062a4:	4809      	ldr	r0, [pc, #36]	; (80062cc <GO_ApplyPresetToSignal+0x15c>)
 80062a6:	f006 f983 	bl	800c5b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_SET);
 80062aa:	2201      	movs	r2, #1
 80062ac:	2120      	movs	r1, #32
 80062ae:	4808      	ldr	r0, [pc, #32]	; (80062d0 <GO_ApplyPresetToSignal+0x160>)
 80062b0:	f006 f97e 	bl	800c5b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_SET);
 80062b4:	2201      	movs	r2, #1
 80062b6:	2110      	movs	r1, #16
 80062b8:	4805      	ldr	r0, [pc, #20]	; (80062d0 <GO_ApplyPresetToSignal+0x160>)
 80062ba:	f006 f979 	bl	800c5b0 <HAL_GPIO_WritePin>
			break;
 80062be:	bf00      	nop
	}

}
 80062c0:	bf00      	nop
 80062c2:	370c      	adds	r7, #12
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd90      	pop	{r4, r7, pc}
 80062c8:	20000160 	.word	0x20000160
 80062cc:	48000400 	.word	0x48000400
 80062d0:	48000800 	.word	0x48000800

080062d4 <IT_ArbitrateInputTrigger>:
 *	@param None
 *	@retval None
 *
 */
void IT_ArbitrateInputTrigger()
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b082      	sub	sp, #8
 80062d8:	af02      	add	r7, sp, #8
	if(IT_GetTriggerStatus())
 80062da:	f000 fa07 	bl	80066ec <IT_GetTriggerStatus>
 80062de:	4603      	mov	r3, r0
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d020      	beq.n	8006326 <IT_ArbitrateInputTrigger+0x52>
		OUTPUT_TIMER->SMCR &= ~(TIM_SMCR_SMS_2);
		// set status to disabled
*/

		// disable freq count timer
		HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_1);
 80062e4:	2100      	movs	r1, #0
 80062e6:	484e      	ldr	r0, [pc, #312]	; (8006420 <IT_ArbitrateInputTrigger+0x14c>)
 80062e8:	f007 fede 	bl	800e0a8 <HAL_TIM_IC_Stop_DMA>

		// disable the comparator
		HAL_COMP_Stop(&hcomp1);
 80062ec:	484d      	ldr	r0, [pc, #308]	; (8006424 <IT_ArbitrateInputTrigger+0x150>)
 80062ee:	f004 fdb5 	bl	800ae5c <HAL_COMP_Stop>

		// stop the ADC
		HAL_ADC_Stop_DMA(&hadc1);
 80062f2:	484d      	ldr	r0, [pc, #308]	; (8006428 <IT_ArbitrateInputTrigger+0x154>)
 80062f4:	f003 fb58 	bl	80099a8 <HAL_ADC_Stop_DMA>

		GPIOA->AFR[0] &= ~(GPIO_AF1_TIM2);
 80062f8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80062fc:	6a1b      	ldr	r3, [r3, #32]
 80062fe:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8006302:	f023 0301 	bic.w	r3, r3, #1
 8006306:	6213      	str	r3, [r2, #32]
		GPIOA->AFR[0] &= ~(GPIO_AF8_COMP1);
 8006308:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800630c:	6a1b      	ldr	r3, [r3, #32]
 800630e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8006312:	f023 0308 	bic.w	r3, r3, #8
 8006316:	6213      	str	r3, [r2, #32]


		IT_SetTriggerStatus(DISABLE_TRIGGER);
 8006318:	2000      	movs	r0, #0
 800631a:	f000 f9f3 	bl	8006704 <IT_SetTriggerStatus>

		FuncO_ApplyProfileToSignal(eDefaultFuncPreset);
 800631e:	2000      	movs	r0, #0
 8006320:	f7ff fd24 	bl	8005d6c <FuncO_ApplyProfileToSignal>
		}
		// set status to enabled
		IT_SetTriggerStatus(ENABLE_TRIGGER);
	}

}
 8006324:	e079      	b.n	800641a <IT_ArbitrateInputTrigger+0x146>
		switch(IT_GetActiveTriggerMode())
 8006326:	f000 f9c5 	bl	80066b4 <IT_GetActiveTriggerMode>
 800632a:	4603      	mov	r3, r0
 800632c:	2b01      	cmp	r3, #1
 800632e:	d037      	beq.n	80063a0 <IT_ArbitrateInputTrigger+0xcc>
 8006330:	2b02      	cmp	r3, #2
 8006332:	d042      	beq.n	80063ba <IT_ArbitrateInputTrigger+0xe6>
 8006334:	2b00      	cmp	r3, #0
 8006336:	d000      	beq.n	800633a <IT_ArbitrateInputTrigger+0x66>
				break;
 8006338:	e06c      	b.n	8006414 <IT_ArbitrateInputTrigger+0x140>
				HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_SET);		// TS5A3357 Pin6
 800633a:	2201      	movs	r2, #1
 800633c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006340:	483a      	ldr	r0, [pc, #232]	; (800642c <IT_ArbitrateInputTrigger+0x158>)
 8006342:	f006 f935 	bl	800c5b0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET); 	// TS5A3357 Pin5
 8006346:	2200      	movs	r2, #0
 8006348:	f44f 7100 	mov.w	r1, #512	; 0x200
 800634c:	4837      	ldr	r0, [pc, #220]	; (800642c <IT_ArbitrateInputTrigger+0x158>)
 800634e:	f006 f92f 	bl	800c5b0 <HAL_GPIO_WritePin>
				HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_1, freq_count_store, MAX_FREQ_COUNT_STORE);
 8006352:	2308      	movs	r3, #8
 8006354:	4a36      	ldr	r2, [pc, #216]	; (8006430 <IT_ArbitrateInputTrigger+0x15c>)
 8006356:	2100      	movs	r1, #0
 8006358:	4831      	ldr	r0, [pc, #196]	; (8006420 <IT_ArbitrateInputTrigger+0x14c>)
 800635a:	f007 fd17 	bl	800dd8c <HAL_TIM_IC_Start_DMA>
				GPIOA->MODER &= ~(GPIO_MODER_MODE0_0 | GPIO_MODER_MODE0_1);	// reset mode registers
 800635e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8006368:	f023 0303 	bic.w	r3, r3, #3
 800636c:	6013      	str	r3, [r2, #0]
				GPIOA->MODER |= (GPIO_MODER_MODE0_1);	// set port mode to AF
 800636e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8006378:	f043 0302 	orr.w	r3, r3, #2
 800637c:	6013      	str	r3, [r2, #0]
				GPIOA->AFR[0] &= ~((1 << 0x04) | (1 << 0x03) | (1 << 0x02) | (1 << 0x01));	// reset AF registers - See Table 13 "Alternate Functions" in STM32G474 datasheet
 800637e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006382:	6a1b      	ldr	r3, [r3, #32]
 8006384:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8006388:	f023 031e 	bic.w	r3, r3, #30
 800638c:	6213      	str	r3, [r2, #32]
				GPIOA->AFR[0] |= GPIO_AF1_TIM2;		// set AF to TIM2_CH1
 800638e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006392:	6a1b      	ldr	r3, [r3, #32]
 8006394:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8006398:	f043 0301 	orr.w	r3, r3, #1
 800639c:	6213      	str	r3, [r2, #32]
				break;
 800639e:	e039      	b.n	8006414 <IT_ArbitrateInputTrigger+0x140>
				HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin6
 80063a0:	2200      	movs	r2, #0
 80063a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80063a6:	4821      	ldr	r0, [pc, #132]	; (800642c <IT_ArbitrateInputTrigger+0x158>)
 80063a8:	f006 f902 	bl	800c5b0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_SET); 		// TS5A3357 Pin5
 80063ac:	2201      	movs	r2, #1
 80063ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80063b2:	481e      	ldr	r0, [pc, #120]	; (800642c <IT_ArbitrateInputTrigger+0x158>)
 80063b4:	f006 f8fc 	bl	800c5b0 <HAL_GPIO_WritePin>
				break;
 80063b8:	e02c      	b.n	8006414 <IT_ArbitrateInputTrigger+0x140>
				HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_SET);		// TS5A3357 Pin6
 80063ba:	2201      	movs	r2, #1
 80063bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80063c0:	481a      	ldr	r0, [pc, #104]	; (800642c <IT_ArbitrateInputTrigger+0x158>)
 80063c2:	f006 f8f5 	bl	800c5b0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_SET);		// TS5A3357 Pin5
 80063c6:	2201      	movs	r2, #1
 80063c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80063cc:	4817      	ldr	r0, [pc, #92]	; (800642c <IT_ArbitrateInputTrigger+0x158>)
 80063ce:	f006 f8ef 	bl	800c5b0 <HAL_GPIO_WritePin>
				HAL_ADC_Start_DMA(&hadc1, adcsteps_measure_store, MAX_ADCSTEPS_MEASURE_STORE);
 80063d2:	2210      	movs	r2, #16
 80063d4:	4917      	ldr	r1, [pc, #92]	; (8006434 <IT_ArbitrateInputTrigger+0x160>)
 80063d6:	4814      	ldr	r0, [pc, #80]	; (8006428 <IT_ArbitrateInputTrigger+0x154>)
 80063d8:	f003 fa18 	bl	800980c <HAL_ADC_Start_DMA>
				OUTPUT_TIMER->CR1 &= ~(TIM_CR1_CEN);
 80063dc:	4b16      	ldr	r3, [pc, #88]	; (8006438 <IT_ArbitrateInputTrigger+0x164>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a15      	ldr	r2, [pc, #84]	; (8006438 <IT_ArbitrateInputTrigger+0x164>)
 80063e2:	f023 0301 	bic.w	r3, r3, #1
 80063e6:	6013      	str	r3, [r2, #0]
				HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 80063e8:	2100      	movs	r1, #0
 80063ea:	4814      	ldr	r0, [pc, #80]	; (800643c <IT_ArbitrateInputTrigger+0x168>)
 80063ec:	f005 f862 	bl	800b4b4 <HAL_DAC_Stop_DMA>
				HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, adcsteps_measure_store, MAX_ADCSTEPS_MEASURE_STORE, DAC_ALIGN_12B_R);
 80063f0:	2300      	movs	r3, #0
 80063f2:	9300      	str	r3, [sp, #0]
 80063f4:	2310      	movs	r3, #16
 80063f6:	4a0f      	ldr	r2, [pc, #60]	; (8006434 <IT_ArbitrateInputTrigger+0x160>)
 80063f8:	2100      	movs	r1, #0
 80063fa:	4810      	ldr	r0, [pc, #64]	; (800643c <IT_ArbitrateInputTrigger+0x168>)
 80063fc:	f004 ff98 	bl	800b330 <HAL_DAC_Start_DMA>
				OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
 8006400:	4b0d      	ldr	r3, [pc, #52]	; (8006438 <IT_ArbitrateInputTrigger+0x164>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a0c      	ldr	r2, [pc, #48]	; (8006438 <IT_ArbitrateInputTrigger+0x164>)
 8006406:	f043 0301 	orr.w	r3, r3, #1
 800640a:	6013      	str	r3, [r2, #0]
				FuncO_ApplyProfileToSignal(eDefaultFuncPreset);
 800640c:	2000      	movs	r0, #0
 800640e:	f7ff fcad 	bl	8005d6c <FuncO_ApplyProfileToSignal>
				break;
 8006412:	bf00      	nop
		IT_SetTriggerStatus(ENABLE_TRIGGER);
 8006414:	2001      	movs	r0, #1
 8006416:	f000 f975 	bl	8006704 <IT_SetTriggerStatus>
}
 800641a:	bf00      	nop
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}
 8006420:	20002be0 	.word	0x20002be0
 8006424:	200028f4 	.word	0x200028f4
 8006428:	20002828 	.word	0x20002828
 800642c:	48000800 	.word	0x48000800
 8006430:	20002234 	.word	0x20002234
 8006434:	20002114 	.word	0x20002114
 8006438:	40013400 	.word	0x40013400
 800643c:	2000292c 	.word	0x2000292c

08006440 <IT_CycleInputTriggerMode>:
 *	@param None
 *	@retval None
 *
 */
void IT_CycleInputTriggerMode()
{
 8006440:	b580      	push	{r7, lr}
 8006442:	af00      	add	r7, sp, #0
	// change the trigger input mode
	switch(IT_GetActiveTriggerMode())
 8006444:	f000 f936 	bl	80066b4 <IT_GetActiveTriggerMode>
 8006448:	4603      	mov	r3, r0
 800644a:	2b01      	cmp	r3, #1
 800644c:	d008      	beq.n	8006460 <IT_CycleInputTriggerMode+0x20>
 800644e:	2b02      	cmp	r3, #2
 8006450:	d00a      	beq.n	8006468 <IT_CycleInputTriggerMode+0x28>
 8006452:	2b00      	cmp	r3, #0
 8006454:	d000      	beq.n	8006458 <IT_CycleInputTriggerMode+0x18>
		case INPUT_TIMER_ADC:
			IT_SetActiveTriggerMode(INPUT_TIMER_TIM);
			break;

		default:
			break;
 8006456:	e00b      	b.n	8006470 <IT_CycleInputTriggerMode+0x30>
			IT_SetActiveTriggerMode(INPUT_TIMER_COMP);
 8006458:	2001      	movs	r0, #1
 800645a:	f000 f937 	bl	80066cc <IT_SetActiveTriggerMode>
			break;
 800645e:	e007      	b.n	8006470 <IT_CycleInputTriggerMode+0x30>
			IT_SetActiveTriggerMode(INPUT_TIMER_ADC);
 8006460:	2002      	movs	r0, #2
 8006462:	f000 f933 	bl	80066cc <IT_SetActiveTriggerMode>
			break;
 8006466:	e003      	b.n	8006470 <IT_CycleInputTriggerMode+0x30>
			IT_SetActiveTriggerMode(INPUT_TIMER_TIM);
 8006468:	2000      	movs	r0, #0
 800646a:	f000 f92f 	bl	80066cc <IT_SetActiveTriggerMode>
			break;
 800646e:	bf00      	nop
	}
}
 8006470:	bf00      	nop
 8006472:	bd80      	pop	{r7, pc}

08006474 <HAL_COMP_TriggerCallback>:
 *	@param None
 *	@retval None
 *
 */
void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b082      	sub	sp, #8
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
	if(HAL_COMP_GetOutputLevel(&hcomp1))
 800647c:	4808      	ldr	r0, [pc, #32]	; (80064a0 <HAL_COMP_TriggerCallback+0x2c>)
 800647e:	f004 fd93 	bl	800afa8 <HAL_COMP_GetOutputLevel>
 8006482:	4603      	mov	r3, r0
 8006484:	2b00      	cmp	r3, #0
 8006486:	d004      	beq.n	8006492 <HAL_COMP_TriggerCallback+0x1e>
	{
		comp1_output_value[0] = 4095;
 8006488:	4b06      	ldr	r3, [pc, #24]	; (80064a4 <HAL_COMP_TriggerCallback+0x30>)
 800648a:	f640 72ff 	movw	r2, #4095	; 0xfff
 800648e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		comp1_output_value[0] = 0;
	}
}
 8006490:	e002      	b.n	8006498 <HAL_COMP_TriggerCallback+0x24>
		comp1_output_value[0] = 0;
 8006492:	4b04      	ldr	r3, [pc, #16]	; (80064a4 <HAL_COMP_TriggerCallback+0x30>)
 8006494:	2200      	movs	r2, #0
 8006496:	601a      	str	r2, [r3, #0]
}
 8006498:	bf00      	nop
 800649a:	3708      	adds	r7, #8
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}
 80064a0:	200028f4 	.word	0x200028f4
 80064a4:	20002228 	.word	0x20002228

080064a8 <HAL_ADC_ConvCpltCallback>:
 *	@param None
 *	@retval None
 *
 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80064a8:	b590      	push	{r4, r7, lr}
 80064aa:	b085      	sub	sp, #20
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
	// mean average the DMA data set
	avg_adcsteps_measure = 0;
 80064b0:	4b29      	ldr	r3, [pc, #164]	; (8006558 <HAL_ADC_ConvCpltCallback+0xb0>)
 80064b2:	f04f 0200 	mov.w	r2, #0
 80064b6:	601a      	str	r2, [r3, #0]
	for(int x = 0; x < MAX_ADCSTEPS_MEASURE_STORE; x++)
 80064b8:	2300      	movs	r3, #0
 80064ba:	60fb      	str	r3, [r7, #12]
 80064bc:	e012      	b.n	80064e4 <HAL_ADC_ConvCpltCallback+0x3c>
	{
		avg_adcsteps_measure += adcsteps_measure_store[x];
 80064be:	4a27      	ldr	r2, [pc, #156]	; (800655c <HAL_ADC_ConvCpltCallback+0xb4>)
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064c6:	ee07 3a90 	vmov	s15, r3
 80064ca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80064ce:	4b22      	ldr	r3, [pc, #136]	; (8006558 <HAL_ADC_ConvCpltCallback+0xb0>)
 80064d0:	edd3 7a00 	vldr	s15, [r3]
 80064d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80064d8:	4b1f      	ldr	r3, [pc, #124]	; (8006558 <HAL_ADC_ConvCpltCallback+0xb0>)
 80064da:	edc3 7a00 	vstr	s15, [r3]
	for(int x = 0; x < MAX_ADCSTEPS_MEASURE_STORE; x++)
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	3301      	adds	r3, #1
 80064e2:	60fb      	str	r3, [r7, #12]
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2b0f      	cmp	r3, #15
 80064e8:	dde9      	ble.n	80064be <HAL_ADC_ConvCpltCallback+0x16>
	}
	avg_adcsteps_measure = avg_adcsteps_measure / MAX_ADCSTEPS_MEASURE_STORE;
 80064ea:	4b1b      	ldr	r3, [pc, #108]	; (8006558 <HAL_ADC_ConvCpltCallback+0xb0>)
 80064ec:	ed93 7a00 	vldr	s14, [r3]
 80064f0:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 80064f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80064f8:	4b17      	ldr	r3, [pc, #92]	; (8006558 <HAL_ADC_ConvCpltCallback+0xb0>)
 80064fa:	edc3 7a00 	vstr	s15, [r3]

	// convert ADC steps into voltage
	avg_volt_measure = avg_adcsteps_measure * VOLT_ADC_RESOLUTION;
 80064fe:	4b16      	ldr	r3, [pc, #88]	; (8006558 <HAL_ADC_ConvCpltCallback+0xb0>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4618      	mov	r0, r3
 8006504:	f7fa f848 	bl	8000598 <__aeabi_f2d>
 8006508:	a311      	add	r3, pc, #68	; (adr r3, 8006550 <HAL_ADC_ConvCpltCallback+0xa8>)
 800650a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800650e:	f7fa f89b 	bl	8000648 <__aeabi_dmul>
 8006512:	4603      	mov	r3, r0
 8006514:	460c      	mov	r4, r1
 8006516:	4618      	mov	r0, r3
 8006518:	4621      	mov	r1, r4
 800651a:	f7fa fb8d 	bl	8000c38 <__aeabi_d2f>
 800651e:	4602      	mov	r2, r0
 8006520:	4b0f      	ldr	r3, [pc, #60]	; (8006560 <HAL_ADC_ConvCpltCallback+0xb8>)
 8006522:	601a      	str	r2, [r3, #0]

	// find nearest freq in ref table
	uint16_t new_output_period = _GetNearestPeriodToVolts(avg_volt_measure);
 8006524:	4b0e      	ldr	r3, [pc, #56]	; (8006560 <HAL_ADC_ConvCpltCallback+0xb8>)
 8006526:	edd3 7a00 	vldr	s15, [r3]
 800652a:	eeb0 0a67 	vmov.f32	s0, s15
 800652e:	f000 f87f 	bl	8006630 <_GetNearestPeriodToVolts>
 8006532:	4603      	mov	r3, r0
 8006534:	817b      	strh	r3, [r7, #10]
	if(new_output_period > 0)
 8006536:	897b      	ldrh	r3, [r7, #10]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d005      	beq.n	8006548 <HAL_ADC_ConvCpltCallback+0xa0>
	{
		// set the output timer to new period
		OUTPUT_TIMER->ARR = new_output_period;
 800653c:	4a09      	ldr	r2, [pc, #36]	; (8006564 <HAL_ADC_ConvCpltCallback+0xbc>)
 800653e:	897b      	ldrh	r3, [r7, #10]
 8006540:	62d3      	str	r3, [r2, #44]	; 0x2c
		OUTPUT_TIMER->PSC = 1;
 8006542:	4b08      	ldr	r3, [pc, #32]	; (8006564 <HAL_ADC_ConvCpltCallback+0xbc>)
 8006544:	2201      	movs	r2, #1
 8006546:	629a      	str	r2, [r3, #40]	; 0x28
	}

}
 8006548:	bf00      	nop
 800654a:	3714      	adds	r7, #20
 800654c:	46bd      	mov	sp, r7
 800654e:	bd90      	pop	{r4, r7, pc}
 8006550:	51ef8352 	.word	0x51ef8352
 8006554:	3f4a680d 	.word	0x3f4a680d
 8006558:	2000225c 	.word	0x2000225c
 800655c:	20002114 	.word	0x20002114
 8006560:	20002230 	.word	0x20002230
 8006564:	40013400 	.word	0x40013400

08006568 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006568:	b480      	push	{r7}
 800656a:	b085      	sub	sp, #20
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]

	// mean average the DMA data set
	avg_freq_count_period = 0;
 8006570:	4b29      	ldr	r3, [pc, #164]	; (8006618 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8006572:	2200      	movs	r2, #0
 8006574:	601a      	str	r2, [r3, #0]
	for(int x = 0; x < MAX_FREQ_COUNT_STORE; x++)
 8006576:	2300      	movs	r3, #0
 8006578:	60fb      	str	r3, [r7, #12]
 800657a:	e00b      	b.n	8006594 <HAL_TIM_IC_CaptureCallback+0x2c>
	{
		avg_freq_count_period += freq_count_store[x];
 800657c:	4a27      	ldr	r2, [pc, #156]	; (800661c <HAL_TIM_IC_CaptureCallback+0xb4>)
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006584:	4b24      	ldr	r3, [pc, #144]	; (8006618 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4413      	add	r3, r2
 800658a:	4a23      	ldr	r2, [pc, #140]	; (8006618 <HAL_TIM_IC_CaptureCallback+0xb0>)
 800658c:	6013      	str	r3, [r2, #0]
	for(int x = 0; x < MAX_FREQ_COUNT_STORE; x++)
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	3301      	adds	r3, #1
 8006592:	60fb      	str	r3, [r7, #12]
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2b07      	cmp	r3, #7
 8006598:	ddf0      	ble.n	800657c <HAL_TIM_IC_CaptureCallback+0x14>
	}
	avg_freq_count_period /= MAX_FREQ_COUNT_STORE;
 800659a:	4b1f      	ldr	r3, [pc, #124]	; (8006618 <HAL_TIM_IC_CaptureCallback+0xb0>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	08db      	lsrs	r3, r3, #3
 80065a0:	4a1d      	ldr	r2, [pc, #116]	; (8006618 <HAL_TIM_IC_CaptureCallback+0xb0>)
 80065a2:	6013      	str	r3, [r2, #0]

	// convert period to hertz
	avg_freq_count_hertz = (float)SM_MCLK / ((float)INPUT_TIMER->PSC * (float)avg_freq_count_period);
 80065a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80065a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065aa:	ee07 3a90 	vmov	s15, r3
 80065ae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80065b2:	4b19      	ldr	r3, [pc, #100]	; (8006618 <HAL_TIM_IC_CaptureCallback+0xb0>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	ee07 3a90 	vmov	s15, r3
 80065ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80065c2:	eddf 6a17 	vldr	s13, [pc, #92]	; 8006620 <HAL_TIM_IC_CaptureCallback+0xb8>
 80065c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80065ca:	4b16      	ldr	r3, [pc, #88]	; (8006624 <HAL_TIM_IC_CaptureCallback+0xbc>)
 80065cc:	edc3 7a00 	vstr	s15, [r3]

	// sync the output timer (DAC) with the input timer
	OUTPUT_TIMER->ARR = avg_freq_count_period;
 80065d0:	4a15      	ldr	r2, [pc, #84]	; (8006628 <HAL_TIM_IC_CaptureCallback+0xc0>)
 80065d2:	4b11      	ldr	r3, [pc, #68]	; (8006618 <HAL_TIM_IC_CaptureCallback+0xb0>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	62d3      	str	r3, [r2, #44]	; 0x2c

	// auto toggle "LF" mode
	if(avg_freq_count_hertz < 50)
 80065d8:	4b12      	ldr	r3, [pc, #72]	; (8006624 <HAL_TIM_IC_CaptureCallback+0xbc>)
 80065da:	edd3 7a00 	vldr	s15, [r3]
 80065de:	ed9f 7a13 	vldr	s14, [pc, #76]	; 800662c <HAL_TIM_IC_CaptureCallback+0xc4>
 80065e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80065e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065ea:	d508      	bpl.n	80065fe <HAL_TIM_IC_CaptureCallback+0x96>
	{
		INPUT_TIMER->PSC = 8000;
 80065ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80065f0:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80065f4:	629a      	str	r2, [r3, #40]	; 0x28
		OUTPUT_TIMER->PSC = 48;
 80065f6:	4b0c      	ldr	r3, [pc, #48]	; (8006628 <HAL_TIM_IC_CaptureCallback+0xc0>)
 80065f8:	2230      	movs	r2, #48	; 0x30
 80065fa:	629a      	str	r2, [r3, #40]	; 0x28
		OUTPUT_TIMER->PSC = 0;
	}

	//printf("ARR %lu = %4.2fHz\n",avg_freq_count_period, avg_freq_count_hertz);

}
 80065fc:	e006      	b.n	800660c <HAL_TIM_IC_CaptureCallback+0xa4>
		INPUT_TIMER->PSC = 128;
 80065fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006602:	2280      	movs	r2, #128	; 0x80
 8006604:	629a      	str	r2, [r3, #40]	; 0x28
		OUTPUT_TIMER->PSC = 0;
 8006606:	4b08      	ldr	r3, [pc, #32]	; (8006628 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8006608:	2200      	movs	r2, #0
 800660a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800660c:	bf00      	nop
 800660e:	3714      	adds	r7, #20
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr
 8006618:	20002254 	.word	0x20002254
 800661c:	20002234 	.word	0x20002234
 8006620:	4d2037a0 	.word	0x4d2037a0
 8006624:	20002258 	.word	0x20002258
 8006628:	40013400 	.word	0x40013400
 800662c:	42480000 	.word	0x42480000

08006630 <_GetNearestPeriodToVolts>:
	}
	return 0.0f;
}

uint16_t _GetNearestPeriodToVolts(float volts)
{
 8006630:	b480      	push	{r7}
 8006632:	b085      	sub	sp, #20
 8006634:	af00      	add	r7, sp, #0
 8006636:	ed87 0a01 	vstr	s0, [r7, #4]
	float error_margin = 0.05;
 800663a:	4b15      	ldr	r3, [pc, #84]	; (8006690 <_GetNearestPeriodToVolts+0x60>)
 800663c:	60bb      	str	r3, [r7, #8]
	for(int x = 0; x < MAX_VOLTS_PER_OCTAVE_INDEX; x++)
 800663e:	2300      	movs	r3, #0
 8006640:	60fb      	str	r3, [r7, #12]
 8006642:	e01b      	b.n	800667c <_GetNearestPeriodToVolts+0x4c>
	{
		if((volts - theVoltsPerOctaveTable[x].volts) < error_margin)
 8006644:	4a13      	ldr	r2, [pc, #76]	; (8006694 <_GetNearestPeriodToVolts+0x64>)
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	011b      	lsls	r3, r3, #4
 800664a:	4413      	add	r3, r2
 800664c:	3304      	adds	r3, #4
 800664e:	edd3 7a00 	vldr	s15, [r3]
 8006652:	ed97 7a01 	vldr	s14, [r7, #4]
 8006656:	ee77 7a67 	vsub.f32	s15, s14, s15
 800665a:	ed97 7a02 	vldr	s14, [r7, #8]
 800665e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006666:	dd06      	ble.n	8006676 <_GetNearestPeriodToVolts+0x46>
		{
			return theVoltsPerOctaveTable[x].period;
 8006668:	4a0a      	ldr	r2, [pc, #40]	; (8006694 <_GetNearestPeriodToVolts+0x64>)
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	011b      	lsls	r3, r3, #4
 800666e:	4413      	add	r3, r2
 8006670:	330c      	adds	r3, #12
 8006672:	881b      	ldrh	r3, [r3, #0]
 8006674:	e006      	b.n	8006684 <_GetNearestPeriodToVolts+0x54>
	for(int x = 0; x < MAX_VOLTS_PER_OCTAVE_INDEX; x++)
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	3301      	adds	r3, #1
 800667a:	60fb      	str	r3, [r7, #12]
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2b27      	cmp	r3, #39	; 0x27
 8006680:	dde0      	ble.n	8006644 <_GetNearestPeriodToVolts+0x14>
		}

	}
	return 0.0f;
 8006682:	2300      	movs	r3, #0
}
 8006684:	4618      	mov	r0, r3
 8006686:	3714      	adds	r7, #20
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr
 8006690:	3d4ccccd 	.word	0x3d4ccccd
 8006694:	20000178 	.word	0x20000178

08006698 <IT_GetAverageFreqCountHertz>:
 *	@param None
 *	@retval None
 *
 */
float IT_GetAverageFreqCountHertz()
{
 8006698:	b480      	push	{r7}
 800669a:	af00      	add	r7, sp, #0
	return avg_freq_count_hertz;
 800669c:	4b04      	ldr	r3, [pc, #16]	; (80066b0 <IT_GetAverageFreqCountHertz+0x18>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	ee07 3a90 	vmov	s15, r3
}
 80066a4:	eeb0 0a67 	vmov.f32	s0, s15
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr
 80066b0:	20002258 	.word	0x20002258

080066b4 <IT_GetActiveTriggerMode>:
 *	@param None
 *	@retval None
 *
 */
eTriggerInputMode IT_GetActiveTriggerMode()
{
 80066b4:	b480      	push	{r7}
 80066b6:	af00      	add	r7, sp, #0
	return activeInputerTriggerMode;
 80066b8:	4b03      	ldr	r3, [pc, #12]	; (80066c8 <IT_GetActiveTriggerMode+0x14>)
 80066ba:	781b      	ldrb	r3, [r3, #0]
}
 80066bc:	4618      	mov	r0, r3
 80066be:	46bd      	mov	sp, r7
 80066c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c4:	4770      	bx	lr
 80066c6:	bf00      	nop
 80066c8:	20002112 	.word	0x20002112

080066cc <IT_SetActiveTriggerMode>:
 *	@param None
 *	@retval None
 *
 */
void IT_SetActiveTriggerMode(eTriggerInputMode newTriggerMode)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b083      	sub	sp, #12
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	4603      	mov	r3, r0
 80066d4:	71fb      	strb	r3, [r7, #7]
	activeInputerTriggerMode = newTriggerMode;
 80066d6:	4a04      	ldr	r2, [pc, #16]	; (80066e8 <IT_SetActiveTriggerMode+0x1c>)
 80066d8:	79fb      	ldrb	r3, [r7, #7]
 80066da:	7013      	strb	r3, [r2, #0]
}
 80066dc:	bf00      	nop
 80066de:	370c      	adds	r7, #12
 80066e0:	46bd      	mov	sp, r7
 80066e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e6:	4770      	bx	lr
 80066e8:	20002112 	.word	0x20002112

080066ec <IT_GetTriggerStatus>:
 *	@param None
 *	@retval None
 *
 */
eTriggerInput IT_GetTriggerStatus()
{
 80066ec:	b480      	push	{r7}
 80066ee:	af00      	add	r7, sp, #0
	return isTriggerInputEnabled;
 80066f0:	4b03      	ldr	r3, [pc, #12]	; (8006700 <IT_GetTriggerStatus+0x14>)
 80066f2:	781b      	ldrb	r3, [r3, #0]
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	46bd      	mov	sp, r7
 80066f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fc:	4770      	bx	lr
 80066fe:	bf00      	nop
 8006700:	20002113 	.word	0x20002113

08006704 <IT_SetTriggerStatus>:
 *	@param None
 *	@retval None
 *
 */
void IT_SetTriggerStatus(eTriggerInput newTriggerStatus)
{
 8006704:	b480      	push	{r7}
 8006706:	b083      	sub	sp, #12
 8006708:	af00      	add	r7, sp, #0
 800670a:	4603      	mov	r3, r0
 800670c:	71fb      	strb	r3, [r7, #7]
	isTriggerInputEnabled = newTriggerStatus;
 800670e:	4a04      	ldr	r2, [pc, #16]	; (8006720 <IT_SetTriggerStatus+0x1c>)
 8006710:	79fb      	ldrb	r3, [r7, #7]
 8006712:	7013      	strb	r3, [r2, #0]
}
 8006714:	bf00      	nop
 8006716:	370c      	adds	r7, #12
 8006718:	46bd      	mov	sp, r7
 800671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671e:	4770      	bx	lr
 8006720:	20002113 	.word	0x20002113

08006724 <SM_Init>:
void _InitOutputChannels();
void _InitAmpProfiles();
void _InitGainInDecibels();

void SM_Init()
{
 8006724:	b580      	push	{r7, lr}
 8006726:	af00      	add	r7, sp, #0

	FreqO_InitFreqProfiles();
 8006728:	f7fe ff80 	bl	800562c <FreqO_InitFreqProfiles>

	_InitOutputChannels();
 800672c:	f000 f8ae 	bl	800688c <_InitOutputChannels>
	_InitAmpProfiles();
 8006730:	f000 f824 	bl	800677c <_InitAmpProfiles>

	// Start OFFSET DAC and set to positive
	HAL_DAC_Start(&hdac1, DAC1_CHANNEL_2);
 8006734:	2110      	movs	r1, #16
 8006736:	480f      	ldr	r0, [pc, #60]	; (8006774 <SM_Init+0x50>)
 8006738:	f004 fda7 	bl	800b28a <HAL_DAC_Start>
	HAL_GPIO_WritePin(OFFSET_ENABLE_GPIO_Port, OFFSET_ENABLE_Pin, GPIO_PIN_SET);
 800673c:	2201      	movs	r2, #1
 800673e:	2108      	movs	r1, #8
 8006740:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006744:	f005 ff34 	bl	800c5b0 <HAL_GPIO_WritePin>

	// send trigger input out to dac
	//HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, volt_measure_store, MAX_VOLT_MEASURE_STORE, DAC_ALIGN_12B_R);

	// Start DAC trigger timer
	OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
 8006748:	4b0b      	ldr	r3, [pc, #44]	; (8006778 <SM_Init+0x54>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a0a      	ldr	r2, [pc, #40]	; (8006778 <SM_Init+0x54>)
 800674e:	f043 0301 	orr.w	r3, r3, #1
 8006752:	6013      	str	r3, [r2, #0]

	// Set the SIGNAL function and amplitude
	FuncO_ApplyProfileToSignal(eDefaultFuncPreset);
 8006754:	2000      	movs	r0, #0
 8006756:	f7ff fb09 	bl	8005d6c <FuncO_ApplyProfileToSignal>
	VPP_ApplyProfileToSignal(eDefaultVppPreset);
 800675a:	2059      	movs	r0, #89	; 0x59
 800675c:	f000 fc2c 	bl	8006fb8 <VPP_ApplyProfileToSignal>

	// set the AUX function
	FuncO_ApplyProfileToAux(eDefaultFuncPreset);
 8006760:	2000      	movs	r0, #0
 8006762:	f7ff fb67 	bl	8005e34 <FuncO_ApplyProfileToAux>

	// set freq for both SIGNAL and AUX
	FreqO_ApplyProfile(eDefaultFreqPreset);
 8006766:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800676a:	f7ff f86f 	bl	800584c <FreqO_ApplyProfile>

}
 800676e:	bf00      	nop
 8006770:	bd80      	pop	{r7, pc}
 8006772:	bf00      	nop
 8006774:	2000292c 	.word	0x2000292c
 8006778:	40013400 	.word	0x40013400

0800677c <_InitAmpProfiles>:

void _InitAmpProfiles()
{
 800677c:	b590      	push	{r4, r7, lr}
 800677e:	b08b      	sub	sp, #44	; 0x2c
 8006780:	af00      	add	r7, sp, #0

	// =(TARGETVPP/LUTVPP)/GAIN
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 8006782:	2300      	movs	r3, #0
 8006784:	627b      	str	r3, [r7, #36]	; 0x24
 8006786:	e033      	b.n	80067f0 <_InitAmpProfiles+0x74>
	{
		float this_amp_value = theAmpProfiles[i].amp_value;
 8006788:	493c      	ldr	r1, [pc, #240]	; (800687c <_InitAmpProfiles+0x100>)
 800678a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800678c:	4613      	mov	r3, r2
 800678e:	00db      	lsls	r3, r3, #3
 8006790:	1a9b      	subs	r3, r3, r2
 8006792:	009b      	lsls	r3, r3, #2
 8006794:	440b      	add	r3, r1
 8006796:	3304      	adds	r3, #4
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	613b      	str	r3, [r7, #16]
		float this_lut_vpp = LUT_VPP;
 800679c:	4b38      	ldr	r3, [pc, #224]	; (8006880 <_InitAmpProfiles+0x104>)
 800679e:	60fb      	str	r3, [r7, #12]
		float this_gain_preset = (float)theAmpProfiles[i].gain_preset;
 80067a0:	4936      	ldr	r1, [pc, #216]	; (800687c <_InitAmpProfiles+0x100>)
 80067a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067a4:	4613      	mov	r3, r2
 80067a6:	00db      	lsls	r3, r3, #3
 80067a8:	1a9b      	subs	r3, r3, r2
 80067aa:	009b      	lsls	r3, r3, #2
 80067ac:	440b      	add	r3, r1
 80067ae:	3308      	adds	r3, #8
 80067b0:	781b      	ldrb	r3, [r3, #0]
 80067b2:	ee07 3a90 	vmov	s15, r3
 80067b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067ba:	edc7 7a02 	vstr	s15, [r7, #8]
		float new_ngc = ( (this_amp_value / this_lut_vpp) / this_gain_preset);
 80067be:	ed97 7a04 	vldr	s14, [r7, #16]
 80067c2:	edd7 7a03 	vldr	s15, [r7, #12]
 80067c6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80067ca:	ed97 7a02 	vldr	s14, [r7, #8]
 80067ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067d2:	edc7 7a01 	vstr	s15, [r7, #4]
		theAmpProfiles[i].neg_gain_coeff = new_ngc;
 80067d6:	4929      	ldr	r1, [pc, #164]	; (800687c <_InitAmpProfiles+0x100>)
 80067d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067da:	4613      	mov	r3, r2
 80067dc:	00db      	lsls	r3, r3, #3
 80067de:	1a9b      	subs	r3, r3, r2
 80067e0:	009b      	lsls	r3, r3, #2
 80067e2:	440b      	add	r3, r1
 80067e4:	3310      	adds	r3, #16
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 80067ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ec:	3301      	adds	r3, #1
 80067ee:	627b      	str	r3, [r7, #36]	; 0x24
 80067f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f2:	2b61      	cmp	r3, #97	; 0x61
 80067f4:	ddc8      	ble.n	8006788 <_InitAmpProfiles+0xc>
	}

	// =20*LOG10(TARGETVPP/0.001)
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 80067f6:	2300      	movs	r3, #0
 80067f8:	623b      	str	r3, [r7, #32]
 80067fa:	e037      	b.n	800686c <_InitAmpProfiles+0xf0>
	{
		float decibel_mvolt_ref = 0.001;
 80067fc:	4b21      	ldr	r3, [pc, #132]	; (8006884 <_InitAmpProfiles+0x108>)
 80067fe:	61fb      	str	r3, [r7, #28]
		float this_amp_value = theAmpProfiles[i].amp_value;
 8006800:	491e      	ldr	r1, [pc, #120]	; (800687c <_InitAmpProfiles+0x100>)
 8006802:	6a3a      	ldr	r2, [r7, #32]
 8006804:	4613      	mov	r3, r2
 8006806:	00db      	lsls	r3, r3, #3
 8006808:	1a9b      	subs	r3, r3, r2
 800680a:	009b      	lsls	r3, r3, #2
 800680c:	440b      	add	r3, r1
 800680e:	3304      	adds	r3, #4
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	61bb      	str	r3, [r7, #24]
		float new_gain_decibels = 20 * log10( this_amp_value / decibel_mvolt_ref );
 8006814:	ed97 7a06 	vldr	s14, [r7, #24]
 8006818:	edd7 7a07 	vldr	s15, [r7, #28]
 800681c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006820:	ee16 0a90 	vmov	r0, s13
 8006824:	f7f9 feb8 	bl	8000598 <__aeabi_f2d>
 8006828:	4603      	mov	r3, r0
 800682a:	460c      	mov	r4, r1
 800682c:	ec44 3b10 	vmov	d0, r3, r4
 8006830:	f00d fcaa 	bl	8014188 <log10>
 8006834:	ec51 0b10 	vmov	r0, r1, d0
 8006838:	f04f 0200 	mov.w	r2, #0
 800683c:	4b12      	ldr	r3, [pc, #72]	; (8006888 <_InitAmpProfiles+0x10c>)
 800683e:	f7f9 ff03 	bl	8000648 <__aeabi_dmul>
 8006842:	4603      	mov	r3, r0
 8006844:	460c      	mov	r4, r1
 8006846:	4618      	mov	r0, r3
 8006848:	4621      	mov	r1, r4
 800684a:	f7fa f9f5 	bl	8000c38 <__aeabi_d2f>
 800684e:	4603      	mov	r3, r0
 8006850:	617b      	str	r3, [r7, #20]
		theAmpProfiles[i].gain_decibels = new_gain_decibels;
 8006852:	490a      	ldr	r1, [pc, #40]	; (800687c <_InitAmpProfiles+0x100>)
 8006854:	6a3a      	ldr	r2, [r7, #32]
 8006856:	4613      	mov	r3, r2
 8006858:	00db      	lsls	r3, r3, #3
 800685a:	1a9b      	subs	r3, r3, r2
 800685c:	009b      	lsls	r3, r3, #2
 800685e:	440b      	add	r3, r1
 8006860:	330c      	adds	r3, #12
 8006862:	697a      	ldr	r2, [r7, #20]
 8006864:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 8006866:	6a3b      	ldr	r3, [r7, #32]
 8006868:	3301      	adds	r3, #1
 800686a:	623b      	str	r3, [r7, #32]
 800686c:	6a3b      	ldr	r3, [r7, #32]
 800686e:	2b61      	cmp	r3, #97	; 0x61
 8006870:	ddc4      	ble.n	80067fc <_InitAmpProfiles+0x80>

	}
}
 8006872:	bf00      	nop
 8006874:	372c      	adds	r7, #44	; 0x2c
 8006876:	46bd      	mov	sp, r7
 8006878:	bd90      	pop	{r4, r7, pc}
 800687a:	bf00      	nop
 800687c:	200003f8 	.word	0x200003f8
 8006880:	402ccccd 	.word	0x402ccccd
 8006884:	3a83126f 	.word	0x3a83126f
 8006888:	40340000 	.word	0x40340000

0800688c <_InitOutputChannels>:

void _InitOutputChannels()
{
 800688c:	b480      	push	{r7}
 800688e:	b083      	sub	sp, #12
 8006890:	af00      	add	r7, sp, #0
	// initialise the SIGNAL output channel
	SignalChannel.channel = SIGNAL_CHANNEL;
 8006892:	4b28      	ldr	r3, [pc, #160]	; (8006934 <_InitOutputChannels+0xa8>)
 8006894:	2200      	movs	r2, #0
 8006896:	701a      	strb	r2, [r3, #0]
	SignalChannel.ref_lut_data = theFuncProfiles[SINE_FUNC_MODE].lookup_table_data;
 8006898:	4b27      	ldr	r3, [pc, #156]	; (8006938 <_InitOutputChannels+0xac>)
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	4a25      	ldr	r2, [pc, #148]	; (8006934 <_InitOutputChannels+0xa8>)
 800689e:	6053      	str	r3, [r2, #4]
	SignalChannel.func_profile = &theFuncProfiles[eDefaultFuncPreset];
 80068a0:	4b24      	ldr	r3, [pc, #144]	; (8006934 <_InitOutputChannels+0xa8>)
 80068a2:	4a25      	ldr	r2, [pc, #148]	; (8006938 <_InitOutputChannels+0xac>)
 80068a4:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8

	for(int i = 0; i < SINE_DATA_SIZE; i++)
 80068a8:	2300      	movs	r3, #0
 80068aa:	607b      	str	r3, [r7, #4]
 80068ac:	e00b      	b.n	80068c6 <_InitOutputChannels+0x3a>
		SignalChannel.dsp_lut_data[i] = sine_data_table_3600[i];
 80068ae:	4a23      	ldr	r2, [pc, #140]	; (800693c <_InitOutputChannels+0xb0>)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80068b6:	491f      	ldr	r1, [pc, #124]	; (8006934 <_InitOutputChannels+0xa8>)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	3302      	adds	r3, #2
 80068bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	3301      	adds	r3, #1
 80068c4:	607b      	str	r3, [r7, #4]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2b77      	cmp	r3, #119	; 0x77
 80068ca:	ddf0      	ble.n	80068ae <_InitOutputChannels+0x22>

	SignalChannel.amp_profile = &theAmpProfiles[eDefaultVppPreset];
 80068cc:	4b19      	ldr	r3, [pc, #100]	; (8006934 <_InitOutputChannels+0xa8>)
 80068ce:	4a1c      	ldr	r2, [pc, #112]	; (8006940 <_InitOutputChannels+0xb4>)
 80068d0:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
	SignalChannel.gain_profile = &theGainProfiles[eDefaultGainPreset];
 80068d4:	4b17      	ldr	r3, [pc, #92]	; (8006934 <_InitOutputChannels+0xa8>)
 80068d6:	4a1b      	ldr	r2, [pc, #108]	; (8006944 <_InitOutputChannels+0xb8>)
 80068d8:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0

	// initialise the Aux output channel
	AuxChannel.channel = AUX_CHANNEL;
 80068dc:	4b1a      	ldr	r3, [pc, #104]	; (8006948 <_InitOutputChannels+0xbc>)
 80068de:	2201      	movs	r2, #1
 80068e0:	701a      	strb	r2, [r3, #0]
	AuxChannel.ref_lut_data = theFuncProfiles[SINE_FUNC_MODE].lookup_table_data;
 80068e2:	4b15      	ldr	r3, [pc, #84]	; (8006938 <_InitOutputChannels+0xac>)
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	4a18      	ldr	r2, [pc, #96]	; (8006948 <_InitOutputChannels+0xbc>)
 80068e8:	6053      	str	r3, [r2, #4]
	AuxChannel.func_profile = &theFuncProfiles[eDefaultFuncPreset];
 80068ea:	4b17      	ldr	r3, [pc, #92]	; (8006948 <_InitOutputChannels+0xbc>)
 80068ec:	4a12      	ldr	r2, [pc, #72]	; (8006938 <_InitOutputChannels+0xac>)
 80068ee:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8

	for(int i = 0; i < SINE_DATA_SIZE; i++)
 80068f2:	2300      	movs	r3, #0
 80068f4:	603b      	str	r3, [r7, #0]
 80068f6:	e00b      	b.n	8006910 <_InitOutputChannels+0x84>
		AuxChannel.dsp_lut_data[i] = sine_data_table_3600[i];
 80068f8:	4a10      	ldr	r2, [pc, #64]	; (800693c <_InitOutputChannels+0xb0>)
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006900:	4911      	ldr	r1, [pc, #68]	; (8006948 <_InitOutputChannels+0xbc>)
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	3302      	adds	r3, #2
 8006906:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	3301      	adds	r3, #1
 800690e:	603b      	str	r3, [r7, #0]
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	2b77      	cmp	r3, #119	; 0x77
 8006914:	ddf0      	ble.n	80068f8 <_InitOutputChannels+0x6c>

	AuxChannel.amp_profile = &theAmpProfiles[eDefaultVppPreset];
 8006916:	4b0c      	ldr	r3, [pc, #48]	; (8006948 <_InitOutputChannels+0xbc>)
 8006918:	4a09      	ldr	r2, [pc, #36]	; (8006940 <_InitOutputChannels+0xb4>)
 800691a:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
	AuxChannel.gain_profile = &theGainProfiles[eDefaultGainPreset];
 800691e:	4b0a      	ldr	r3, [pc, #40]	; (8006948 <_InitOutputChannels+0xbc>)
 8006920:	4a08      	ldr	r2, [pc, #32]	; (8006944 <_InitOutputChannels+0xb8>)
 8006922:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0


}
 8006926:	bf00      	nop
 8006928:	370c      	adds	r7, #12
 800692a:	46bd      	mov	sp, r7
 800692c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006930:	4770      	bx	lr
 8006932:	bf00      	nop
 8006934:	20002260 	.word	0x20002260
 8006938:	20000128 	.word	0x20000128
 800693c:	20001734 	.word	0x20001734
 8006940:	20000db4 	.word	0x20000db4
 8006944:	20000175 	.word	0x20000175
 8006948:	20002454 	.word	0x20002454

0800694c <SM_GetOutputChannel>:

sOutputChannel_t * SM_GetOutputChannel(eOutputChannel_t pChannel)
{
 800694c:	b480      	push	{r7}
 800694e:	b083      	sub	sp, #12
 8006950:	af00      	add	r7, sp, #0
 8006952:	4603      	mov	r3, r0
 8006954:	71fb      	strb	r3, [r7, #7]

	if(!pChannel)
 8006956:	79fb      	ldrb	r3, [r7, #7]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d101      	bne.n	8006960 <SM_GetOutputChannel+0x14>
		return &SignalChannel;
 800695c:	4b04      	ldr	r3, [pc, #16]	; (8006970 <SM_GetOutputChannel+0x24>)
 800695e:	e000      	b.n	8006962 <SM_GetOutputChannel+0x16>
	else
		return &AuxChannel;
 8006960:	4b04      	ldr	r3, [pc, #16]	; (8006974 <SM_GetOutputChannel+0x28>)
}
 8006962:	4618      	mov	r0, r3
 8006964:	370c      	adds	r7, #12
 8006966:	46bd      	mov	sp, r7
 8006968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696c:	4770      	bx	lr
 800696e:	bf00      	nop
 8006970:	20002260 	.word	0x20002260
 8006974:	20002454 	.word	0x20002454

08006978 <SM_EnablePwmToAux>:
 *	@param None
 *	@retval None
 *
 */
void SM_EnablePwmToAux()
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b096      	sub	sp, #88	; 0x58
 800697c:	af00      	add	r7, sp, #0
	printf("SM_EnablePwmToAux\n");
 800697e:	4889      	ldr	r0, [pc, #548]	; (8006ba4 <SM_EnablePwmToAux+0x22c>)
 8006980:	f00b fb6a 	bl	8012058 <puts>

	HAL_StatusTypeDef res = 0;
 8006984:	2300      	movs	r3, #0
 8006986:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800698a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800698e:	2200      	movs	r2, #0
 8006990:	601a      	str	r2, [r3, #0]
 8006992:	605a      	str	r2, [r3, #4]
 8006994:	609a      	str	r2, [r3, #8]
 8006996:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006998:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800699c:	2200      	movs	r2, #0
 800699e:	601a      	str	r2, [r3, #0]
 80069a0:	605a      	str	r2, [r3, #4]
 80069a2:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 80069a4:	f107 031c 	add.w	r3, r7, #28
 80069a8:	2200      	movs	r2, #0
 80069aa:	601a      	str	r2, [r3, #0]
 80069ac:	605a      	str	r2, [r3, #4]
 80069ae:	609a      	str	r2, [r3, #8]
 80069b0:	60da      	str	r2, [r3, #12]
 80069b2:	611a      	str	r2, [r3, #16]
 80069b4:	615a      	str	r2, [r3, #20]
 80069b6:	619a      	str	r2, [r3, #24]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80069b8:	f107 0308 	add.w	r3, r7, #8
 80069bc:	2200      	movs	r2, #0
 80069be:	601a      	str	r2, [r3, #0]
 80069c0:	605a      	str	r2, [r3, #4]
 80069c2:	609a      	str	r2, [r3, #8]
 80069c4:	60da      	str	r2, [r3, #12]
 80069c6:	611a      	str	r2, [r3, #16]


	htim3.Instance = PWM_AUX_OUT_TIM;
 80069c8:	4b77      	ldr	r3, [pc, #476]	; (8006ba8 <SM_EnablePwmToAux+0x230>)
 80069ca:	4a78      	ldr	r2, [pc, #480]	; (8006bac <SM_EnablePwmToAux+0x234>)
 80069cc:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 80069ce:	4b76      	ldr	r3, [pc, #472]	; (8006ba8 <SM_EnablePwmToAux+0x230>)
 80069d0:	2200      	movs	r2, #0
 80069d2:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80069d4:	4b74      	ldr	r3, [pc, #464]	; (8006ba8 <SM_EnablePwmToAux+0x230>)
 80069d6:	2210      	movs	r2, #16
 80069d8:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 1;
 80069da:	4b73      	ldr	r3, [pc, #460]	; (8006ba8 <SM_EnablePwmToAux+0x230>)
 80069dc:	2201      	movs	r2, #1
 80069de:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80069e0:	4b71      	ldr	r3, [pc, #452]	; (8006ba8 <SM_EnablePwmToAux+0x230>)
 80069e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80069e6:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80069e8:	4b6f      	ldr	r3, [pc, #444]	; (8006ba8 <SM_EnablePwmToAux+0x230>)
 80069ea:	2280      	movs	r2, #128	; 0x80
 80069ec:	619a      	str	r2, [r3, #24]
	if ((res == HAL_TIM_Base_Init(&htim3)) != HAL_OK)
 80069ee:	486e      	ldr	r0, [pc, #440]	; (8006ba8 <SM_EnablePwmToAux+0x230>)
 80069f0:	f006 fe80 	bl	800d6f4 <HAL_TIM_Base_Init>
 80069f4:	4603      	mov	r3, r0
 80069f6:	461a      	mov	r2, r3
 80069f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d107      	bne.n	8006a10 <SM_EnablePwmToAux+0x98>
	{
		printf("SM_EnablePwmToAux HAL_TIM_Base_Init() Result:%u\n",res);
 8006a00:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006a04:	4619      	mov	r1, r3
 8006a06:	486a      	ldr	r0, [pc, #424]	; (8006bb0 <SM_EnablePwmToAux+0x238>)
 8006a08:	f00b fab2 	bl	8011f70 <iprintf>
		Error_Handler();
 8006a0c:	f001 fb9a 	bl	8008144 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006a10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006a14:	647b      	str	r3, [r7, #68]	; 0x44
	if ((res == HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig)) != HAL_OK)
 8006a16:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006a1a:	4619      	mov	r1, r3
 8006a1c:	4862      	ldr	r0, [pc, #392]	; (8006ba8 <SM_EnablePwmToAux+0x230>)
 8006a1e:	f007 ffd9 	bl	800e9d4 <HAL_TIM_ConfigClockSource>
 8006a22:	4603      	mov	r3, r0
 8006a24:	461a      	mov	r2, r3
 8006a26:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d107      	bne.n	8006a3e <SM_EnablePwmToAux+0xc6>
	{
		printf("SM_EnablePwmToAux HAL_TIM_ConfigClockSource() Result:%u\n",res);
 8006a2e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006a32:	4619      	mov	r1, r3
 8006a34:	485f      	ldr	r0, [pc, #380]	; (8006bb4 <SM_EnablePwmToAux+0x23c>)
 8006a36:	f00b fa9b 	bl	8011f70 <iprintf>
		Error_Handler();
 8006a3a:	f001 fb83 	bl	8008144 <Error_Handler>
	}
	if ((res == HAL_TIM_PWM_Init(&htim3)) != HAL_OK)
 8006a3e:	485a      	ldr	r0, [pc, #360]	; (8006ba8 <SM_EnablePwmToAux+0x230>)
 8006a40:	f006 ff6b 	bl	800d91a <HAL_TIM_PWM_Init>
 8006a44:	4603      	mov	r3, r0
 8006a46:	461a      	mov	r2, r3
 8006a48:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d107      	bne.n	8006a60 <SM_EnablePwmToAux+0xe8>
	{
		printf("SM_EnablePwmToAux HAL_TIM_PWM_Init() Result:%u\n",res);
 8006a50:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006a54:	4619      	mov	r1, r3
 8006a56:	4858      	ldr	r0, [pc, #352]	; (8006bb8 <SM_EnablePwmToAux+0x240>)
 8006a58:	f00b fa8a 	bl	8011f70 <iprintf>
		Error_Handler();
 8006a5c:	f001 fb72 	bl	8008144 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8006a60:	2320      	movs	r3, #32
 8006a62:	63bb      	str	r3, [r7, #56]	; 0x38
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006a64:	2300      	movs	r3, #0
 8006a66:	643b      	str	r3, [r7, #64]	; 0x40
	if ((res == HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)) != HAL_OK)
 8006a68:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006a6c:	4619      	mov	r1, r3
 8006a6e:	484e      	ldr	r0, [pc, #312]	; (8006ba8 <SM_EnablePwmToAux+0x230>)
 8006a70:	f009 f87a 	bl	800fb68 <HAL_TIMEx_MasterConfigSynchronization>
 8006a74:	4603      	mov	r3, r0
 8006a76:	461a      	mov	r2, r3
 8006a78:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d107      	bne.n	8006a90 <SM_EnablePwmToAux+0x118>
	{
		printf("SM_EnablePwmToAux HAL_TIMEx_MasterConfigSynchronization() Result:%u\n",res);
 8006a80:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006a84:	4619      	mov	r1, r3
 8006a86:	484d      	ldr	r0, [pc, #308]	; (8006bbc <SM_EnablePwmToAux+0x244>)
 8006a88:	f00b fa72 	bl	8011f70 <iprintf>
		Error_Handler();
 8006a8c:	f001 fb5a 	bl	8008144 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006a90:	2360      	movs	r3, #96	; 0x60
 8006a92:	61fb      	str	r3, [r7, #28]
	sConfigOC.Pulse = 0;
 8006a94:	2300      	movs	r3, #0
 8006a96:	623b      	str	r3, [r7, #32]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
	if ((res == HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)) != HAL_OK)
 8006aa0:	f107 031c 	add.w	r3, r7, #28
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	4619      	mov	r1, r3
 8006aa8:	483f      	ldr	r0, [pc, #252]	; (8006ba8 <SM_EnablePwmToAux+0x230>)
 8006aaa:	f007 fe83 	bl	800e7b4 <HAL_TIM_PWM_ConfigChannel>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	461a      	mov	r2, r3
 8006ab2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d107      	bne.n	8006aca <SM_EnablePwmToAux+0x152>
	{
		printf("SM_EnablePwmToAux HAL_TIM_PWM_ConfigChannel() Result:%u\n",res);
 8006aba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006abe:	4619      	mov	r1, r3
 8006ac0:	483f      	ldr	r0, [pc, #252]	; (8006bc0 <SM_EnablePwmToAux+0x248>)
 8006ac2:	f00b fa55 	bl	8011f70 <iprintf>
		Error_Handler();
 8006ac6:	f001 fb3d 	bl	8008144 <Error_Handler>
	}


	// Timer Post Initialization
	printf("SM_EnablePwmToAux: __HAL_RCC_GPIOA_CLK_ENABLE\n");
 8006aca:	483e      	ldr	r0, [pc, #248]	; (8006bc4 <SM_EnablePwmToAux+0x24c>)
 8006acc:	f00b fac4 	bl	8012058 <puts>
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8006ad0:	4b3d      	ldr	r3, [pc, #244]	; (8006bc8 <SM_EnablePwmToAux+0x250>)
 8006ad2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ad4:	4a3c      	ldr	r2, [pc, #240]	; (8006bc8 <SM_EnablePwmToAux+0x250>)
 8006ad6:	f043 0301 	orr.w	r3, r3, #1
 8006ada:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006adc:	4b3a      	ldr	r3, [pc, #232]	; (8006bc8 <SM_EnablePwmToAux+0x250>)
 8006ade:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ae0:	f003 0301 	and.w	r3, r3, #1
 8006ae4:	607b      	str	r3, [r7, #4]
 8006ae6:	687b      	ldr	r3, [r7, #4]
	/**PWM_AUX_OUT_TIM GPIO Configuration
	PA4     ------> PWM_AUX_OUT_TIM_CH2
	*/
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006ae8:	2340      	movs	r3, #64	; 0x40
 8006aea:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006aec:	2302      	movs	r3, #2
 8006aee:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006af0:	2300      	movs	r3, #0
 8006af2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006af4:	2300      	movs	r3, #0
 8006af6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006af8:	2302      	movs	r3, #2
 8006afa:	61bb      	str	r3, [r7, #24]
	printf("SM_EnablePwmToAux: HAL_GPIO_Init\n");
 8006afc:	4833      	ldr	r0, [pc, #204]	; (8006bcc <SM_EnablePwmToAux+0x254>)
 8006afe:	f00b faab 	bl	8012058 <puts>
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b02:	f107 0308 	add.w	r3, r7, #8
 8006b06:	4619      	mov	r1, r3
 8006b08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006b0c:	f005 faec 	bl	800c0e8 <HAL_GPIO_Init>


	// PWM_AUX_OUT_TIM_MspInit 0

	/* PWM_AUX_OUT_TIM clock enable */
	printf("SM_EnablePwmToAux: __HAL_RCC_PWM_AUX_OUT_TIM_CLK_ENABLE\n");
 8006b10:	482f      	ldr	r0, [pc, #188]	; (8006bd0 <SM_EnablePwmToAux+0x258>)
 8006b12:	f00b faa1 	bl	8012058 <puts>
	__HAL_RCC_TIM3_CLK_ENABLE();
 8006b16:	4b2c      	ldr	r3, [pc, #176]	; (8006bc8 <SM_EnablePwmToAux+0x250>)
 8006b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b1a:	4a2b      	ldr	r2, [pc, #172]	; (8006bc8 <SM_EnablePwmToAux+0x250>)
 8006b1c:	f043 0302 	orr.w	r3, r3, #2
 8006b20:	6593      	str	r3, [r2, #88]	; 0x58
 8006b22:	4b29      	ldr	r3, [pc, #164]	; (8006bc8 <SM_EnablePwmToAux+0x250>)
 8006b24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b26:	f003 0302 	and.w	r3, r3, #2
 8006b2a:	603b      	str	r3, [r7, #0]
 8006b2c:	683b      	ldr	r3, [r7, #0]

	/* PWM_AUX_OUT_TIM interrupt Init */
	printf("SM_EnablePwmToAux: HAL_NVIC_SetPriority\n");
 8006b2e:	4829      	ldr	r0, [pc, #164]	; (8006bd4 <SM_EnablePwmToAux+0x25c>)
 8006b30:	f00b fa92 	bl	8012058 <puts>
	HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8006b34:	2200      	movs	r2, #0
 8006b36:	2100      	movs	r1, #0
 8006b38:	201d      	movs	r0, #29
 8006b3a:	f004 fb42 	bl	800b1c2 <HAL_NVIC_SetPriority>
	printf("SM_EnablePwmToAux: HAL_NVIC_EnableIRQ\n");
 8006b3e:	4826      	ldr	r0, [pc, #152]	; (8006bd8 <SM_EnablePwmToAux+0x260>)
 8006b40:	f00b fa8a 	bl	8012058 <puts>
	HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8006b44:	201d      	movs	r0, #29
 8006b46:	f004 fb56 	bl	800b1f6 <HAL_NVIC_EnableIRQ>
	/* USER CODE BEGIN PWM_AUX_OUT_TIM_MspInit 1 */

	/* USER CODE END PWM_AUX_OUT_TIM_MspInit 1 */
	printf("SM_EnablePwmToAux: HAL_TIM_PWM_Start\n");
 8006b4a:	4824      	ldr	r0, [pc, #144]	; (8006bdc <SM_EnablePwmToAux+0x264>)
 8006b4c:	f00b fa84 	bl	8012058 <puts>
	if ((res == HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1)) != HAL_OK)
 8006b50:	2100      	movs	r1, #0
 8006b52:	4815      	ldr	r0, [pc, #84]	; (8006ba8 <SM_EnablePwmToAux+0x230>)
 8006b54:	f006 ff42 	bl	800d9dc <HAL_TIM_PWM_Start>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	461a      	mov	r2, r3
 8006b5c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d107      	bne.n	8006b74 <SM_EnablePwmToAux+0x1fc>
	{
		printf("SM_EnablePwmToAux HAL_TIM_PWM_Start() Result:%u\n",res);
 8006b64:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006b68:	4619      	mov	r1, r3
 8006b6a:	481d      	ldr	r0, [pc, #116]	; (8006be0 <SM_EnablePwmToAux+0x268>)
 8006b6c:	f00b fa00 	bl	8011f70 <iprintf>
		Error_Handler();
 8006b70:	f001 fae8 	bl	8008144 <Error_Handler>
	}

	printf("SM_EnablePwmToAux: GO_ApplyPresetToSignal\n");
 8006b74:	481b      	ldr	r0, [pc, #108]	; (8006be4 <SM_EnablePwmToAux+0x26c>)
 8006b76:	f00b fa6f 	bl	8012058 <puts>
	GO_ApplyPresetToSignal(eDefaultGainPreset);
 8006b7a:	2007      	movs	r0, #7
 8006b7c:	f7ff faf8 	bl	8006170 <GO_ApplyPresetToSignal>

	// 50% duty cycle
	printf("SM_EnablePwmToAux: PWM_AUX_OUT_TIM->CCR1 = 32768\n");
 8006b80:	4819      	ldr	r0, [pc, #100]	; (8006be8 <SM_EnablePwmToAux+0x270>)
 8006b82:	f00b fa69 	bl	8012058 <puts>
	PWM_AUX_OUT_TIM->CCR1 = 32768;
 8006b86:	4b09      	ldr	r3, [pc, #36]	; (8006bac <SM_EnablePwmToAux+0x234>)
 8006b88:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006b8c:	635a      	str	r2, [r3, #52]	; 0x34
	printf("SM_EnablePwmToAux: PWM_AUX_OUT_TIM->ARR = 65535\n");
 8006b8e:	4817      	ldr	r0, [pc, #92]	; (8006bec <SM_EnablePwmToAux+0x274>)
 8006b90:	f00b fa62 	bl	8012058 <puts>
	PWM_AUX_OUT_TIM->ARR = 65535;
 8006b94:	4b05      	ldr	r3, [pc, #20]	; (8006bac <SM_EnablePwmToAux+0x234>)
 8006b96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006b9a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006b9c:	bf00      	nop
 8006b9e:	3758      	adds	r7, #88	; 0x58
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}
 8006ba4:	08016100 	.word	0x08016100
 8006ba8:	200021d8 	.word	0x200021d8
 8006bac:	40000400 	.word	0x40000400
 8006bb0:	08016114 	.word	0x08016114
 8006bb4:	08016148 	.word	0x08016148
 8006bb8:	08016184 	.word	0x08016184
 8006bbc:	080161b4 	.word	0x080161b4
 8006bc0:	080161fc 	.word	0x080161fc
 8006bc4:	08016238 	.word	0x08016238
 8006bc8:	40021000 	.word	0x40021000
 8006bcc:	08016268 	.word	0x08016268
 8006bd0:	0801628c 	.word	0x0801628c
 8006bd4:	080162c4 	.word	0x080162c4
 8006bd8:	080162ec 	.word	0x080162ec
 8006bdc:	08016314 	.word	0x08016314
 8006be0:	0801633c 	.word	0x0801633c
 8006be4:	08016370 	.word	0x08016370
 8006be8:	0801639c 	.word	0x0801639c
 8006bec:	080163d0 	.word	0x080163d0

08006bf0 <SM_DisablePwmToAux>:
 *	@param None
 *	@retval None
 *
 */
void SM_DisablePwmToAux()
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b082      	sub	sp, #8
 8006bf4:	af00      	add	r7, sp, #0
	printf("SM_DisablePwmToAux");
 8006bf6:	4815      	ldr	r0, [pc, #84]	; (8006c4c <SM_DisablePwmToAux+0x5c>)
 8006bf8:	f00b f9ba 	bl	8011f70 <iprintf>

	HAL_StatusTypeDef res = 0;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	71fb      	strb	r3, [r7, #7]


	/* USER CODE BEGIN PWM_AUX_OUT_TIM_MspDeInit 0 */
	printf("SM_DisablePwmToAux: HAL_TIM_PWM_Stop\n");
 8006c00:	4813      	ldr	r0, [pc, #76]	; (8006c50 <SM_DisablePwmToAux+0x60>)
 8006c02:	f00b fa29 	bl	8012058 <puts>
	if ((res == HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1)) != HAL_OK)
 8006c06:	2100      	movs	r1, #0
 8006c08:	4812      	ldr	r0, [pc, #72]	; (8006c54 <SM_DisablePwmToAux+0x64>)
 8006c0a:	f006 ffc1 	bl	800db90 <HAL_TIM_PWM_Stop>
 8006c0e:	4603      	mov	r3, r0
 8006c10:	461a      	mov	r2, r3
 8006c12:	79fb      	ldrb	r3, [r7, #7]
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d106      	bne.n	8006c26 <SM_DisablePwmToAux+0x36>
	{
		printf("SM_DisablePwmToAux HAL_TIM_PWM_Stop() Result:%u\n",res);
 8006c18:	79fb      	ldrb	r3, [r7, #7]
 8006c1a:	4619      	mov	r1, r3
 8006c1c:	480e      	ldr	r0, [pc, #56]	; (8006c58 <SM_DisablePwmToAux+0x68>)
 8006c1e:	f00b f9a7 	bl	8011f70 <iprintf>
		Error_Handler();
 8006c22:	f001 fa8f 	bl	8008144 <Error_Handler>
	}
	/* USER CODE END PWM_AUX_OUT_TIM_MspDeInit 0 */
	/* Peripheral clock disable */
	printf("SM_DisablePwmToAux __HAL_RCC_PWM_AUX_OUT_TIM_CLK_DISABLE\n");
 8006c26:	480d      	ldr	r0, [pc, #52]	; (8006c5c <SM_DisablePwmToAux+0x6c>)
 8006c28:	f00b fa16 	bl	8012058 <puts>
	__HAL_RCC_TIM3_CLK_DISABLE();
 8006c2c:	4b0c      	ldr	r3, [pc, #48]	; (8006c60 <SM_DisablePwmToAux+0x70>)
 8006c2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c30:	4a0b      	ldr	r2, [pc, #44]	; (8006c60 <SM_DisablePwmToAux+0x70>)
 8006c32:	f023 0302 	bic.w	r3, r3, #2
 8006c36:	6593      	str	r3, [r2, #88]	; 0x58

	/* PWM_AUX_OUT_TIM interrupt Deinit */
	printf("SM_DisablePwmToAux HAL_NVIC_DisableIRQ\n");
 8006c38:	480a      	ldr	r0, [pc, #40]	; (8006c64 <SM_DisablePwmToAux+0x74>)
 8006c3a:	f00b fa0d 	bl	8012058 <puts>
	HAL_NVIC_DisableIRQ(TIM3_IRQn);
 8006c3e:	201d      	movs	r0, #29
 8006c40:	f004 fae7 	bl	800b212 <HAL_NVIC_DisableIRQ>
	/* USER CODE BEGIN PWM_AUX_OUT_TIM_MspDeInit 1 */

	/* USER CODE END PWM_AUX_OUT_TIM_MspDeInit 1 */
}
 8006c44:	bf00      	nop
 8006c46:	3708      	adds	r7, #8
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}
 8006c4c:	08016400 	.word	0x08016400
 8006c50:	08016414 	.word	0x08016414
 8006c54:	200021d8 	.word	0x200021d8
 8006c58:	0801643c 	.word	0x0801643c
 8006c5c:	08016470 	.word	0x08016470
 8006c60:	40021000 	.word	0x40021000
 8006c64:	080164ac 	.word	0x080164ac

08006c68 <SM_EnableDacToAux>:
 *	@param None
 *	@retval None
 *
 */
void SM_EnableDacToAux()
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b0b2      	sub	sp, #200	; 0xc8
 8006c6c:	af00      	add	r7, sp, #0
	printf("SM_EnableDacToAux");
 8006c6e:	4860      	ldr	r0, [pc, #384]	; (8006df0 <SM_EnableDacToAux+0x188>)
 8006c70:	f00b f97e 	bl	8011f70 <iprintf>

	HAL_StatusTypeDef res = 0;
 8006c74:	2300      	movs	r3, #0
 8006c76:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
	DAC_ChannelConfTypeDef sConfig = {0};
 8006c7a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006c7e:	2230      	movs	r2, #48	; 0x30
 8006c80:	2100      	movs	r1, #0
 8006c82:	4618      	mov	r0, r3
 8006c84:	f00a fd10 	bl	80116a8 <memset>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c88:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	601a      	str	r2, [r3, #0]
 8006c90:	605a      	str	r2, [r3, #4]
 8006c92:	609a      	str	r2, [r3, #8]
 8006c94:	60da      	str	r2, [r3, #12]
 8006c96:	611a      	str	r2, [r3, #16]
	DAC_HandleTypeDef hdac2;
	DMA_HandleTypeDef hdma_dac2_ch1;
	/** DAC Initialization
	*/
	hdac2.Instance = DAC2;
 8006c98:	4b56      	ldr	r3, [pc, #344]	; (8006df4 <SM_EnableDacToAux+0x18c>)
 8006c9a:	66fb      	str	r3, [r7, #108]	; 0x6c
	if ((res == HAL_DAC_Init(&hdac2)) != HAL_OK)
 8006c9c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	f004 fad0 	bl	800b246 <HAL_DAC_Init>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	461a      	mov	r2, r3
 8006caa:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d107      	bne.n	8006cc2 <SM_EnableDacToAux+0x5a>
	{
		printf("SM_EnableDacToAux HAL_DAC_Init() Result:%u\n",res);
 8006cb2:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8006cb6:	4619      	mov	r1, r3
 8006cb8:	484f      	ldr	r0, [pc, #316]	; (8006df8 <SM_EnableDacToAux+0x190>)
 8006cba:	f00b f959 	bl	8011f70 <iprintf>
		Error_Handler();
 8006cbe:	f001 fa41 	bl	8008144 <Error_Handler>
	}
	/** DAC channel OUT1 config
	*/
	sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8006cc2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006cc6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	sConfig.DAC_DMADoubleDataMode = DISABLE;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
	sConfig.DAC_SignedFormat = DISABLE;
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
	sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 8006cdc:	2306      	movs	r3, #6
 8006cde:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8006ce8:	2300      	movs	r3, #0
 8006cea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	if ((res == HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1)) != HAL_OK)
 8006cfa:	f107 0194 	add.w	r1, r7, #148	; 0x94
 8006cfe:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006d02:	2200      	movs	r2, #0
 8006d04:	4618      	mov	r0, r3
 8006d06:	f004 fc87 	bl	800b618 <HAL_DAC_ConfigChannel>
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	461a      	mov	r2, r3
 8006d0e:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d107      	bne.n	8006d26 <SM_EnableDacToAux+0xbe>
	{
		printf("SM_EnableDacToAux HAL_DAC_ConfigChannel() Result:%u\n",res);
 8006d16:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8006d1a:	4619      	mov	r1, r3
 8006d1c:	4837      	ldr	r0, [pc, #220]	; (8006dfc <SM_EnableDacToAux+0x194>)
 8006d1e:	f00b f927 	bl	8011f70 <iprintf>
		Error_Handler();
 8006d22:	f001 fa0f 	bl	8008144 <Error_Handler>

	/* USER CODE BEGIN DAC2_MspInit 0 */

	/* USER CODE END DAC2_MspInit 0 */
	/* DAC2 clock enable */
	printf("SM_EnableDacToAux __HAL_RCC_DAC2_CLK_ENABLE()\n");
 8006d26:	4836      	ldr	r0, [pc, #216]	; (8006e00 <SM_EnableDacToAux+0x198>)
 8006d28:	f00b f996 	bl	8012058 <puts>
	__HAL_RCC_DAC2_CLK_ENABLE();
 8006d2c:	4b35      	ldr	r3, [pc, #212]	; (8006e04 <SM_EnableDacToAux+0x19c>)
 8006d2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d30:	4a34      	ldr	r2, [pc, #208]	; (8006e04 <SM_EnableDacToAux+0x19c>)
 8006d32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006d38:	4b32      	ldr	r3, [pc, #200]	; (8006e04 <SM_EnableDacToAux+0x19c>)
 8006d3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d40:	60bb      	str	r3, [r7, #8]
 8006d42:	68bb      	ldr	r3, [r7, #8]

	printf("SM_EnableDacToAux __HAL_RCC_GPIOA_CLK_ENABLE()\n");
 8006d44:	4830      	ldr	r0, [pc, #192]	; (8006e08 <SM_EnableDacToAux+0x1a0>)
 8006d46:	f00b f987 	bl	8012058 <puts>
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8006d4a:	4b2e      	ldr	r3, [pc, #184]	; (8006e04 <SM_EnableDacToAux+0x19c>)
 8006d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d4e:	4a2d      	ldr	r2, [pc, #180]	; (8006e04 <SM_EnableDacToAux+0x19c>)
 8006d50:	f043 0301 	orr.w	r3, r3, #1
 8006d54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006d56:	4b2b      	ldr	r3, [pc, #172]	; (8006e04 <SM_EnableDacToAux+0x19c>)
 8006d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d5a:	f003 0301 	and.w	r3, r3, #1
 8006d5e:	607b      	str	r3, [r7, #4]
 8006d60:	687b      	ldr	r3, [r7, #4]
	/**DAC2 GPIO Configuration
	PA6     ------> DAC2_OUT1
	*/
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006d62:	2340      	movs	r3, #64	; 0x40
 8006d64:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006d68:	2303      	movs	r3, #3
 8006d6a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	printf("SM_EnableDacToAux HAL_GPIO_Init()\n");
 8006d74:	4825      	ldr	r0, [pc, #148]	; (8006e0c <SM_EnableDacToAux+0x1a4>)
 8006d76:	f00b f96f 	bl	8012058 <puts>
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d7a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006d7e:	4619      	mov	r1, r3
 8006d80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006d84:	f005 f9b0 	bl	800c0e8 <HAL_GPIO_Init>

	/* DAC2 DMA Init */
	/* DAC2_CH1 Init */
	hdma_dac2_ch1.Instance = DMA1_Channel3;
 8006d88:	4b21      	ldr	r3, [pc, #132]	; (8006e10 <SM_EnableDacToAux+0x1a8>)
 8006d8a:	60fb      	str	r3, [r7, #12]
	hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 8006d8c:	2329      	movs	r3, #41	; 0x29
 8006d8e:	613b      	str	r3, [r7, #16]
	hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006d90:	2310      	movs	r3, #16
 8006d92:	617b      	str	r3, [r7, #20]
	hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006d94:	2300      	movs	r3, #0
 8006d96:	61bb      	str	r3, [r7, #24]
	hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8006d98:	2380      	movs	r3, #128	; 0x80
 8006d9a:	61fb      	str	r3, [r7, #28]
	hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006d9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006da0:	623b      	str	r3, [r7, #32]
	hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006da2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006da6:	627b      	str	r3, [r7, #36]	; 0x24
	hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 8006da8:	2320      	movs	r3, #32
 8006daa:	62bb      	str	r3, [r7, #40]	; 0x28
	hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8006dac:	2300      	movs	r3, #0
 8006dae:	62fb      	str	r3, [r7, #44]	; 0x2c
	if ((res == HAL_DMA_Init(&hdma_dac2_ch1)) != HAL_OK)
 8006db0:	f107 030c 	add.w	r3, r7, #12
 8006db4:	4618      	mov	r0, r3
 8006db6:	f004 fe65 	bl	800ba84 <HAL_DMA_Init>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	461a      	mov	r2, r3
 8006dbe:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d107      	bne.n	8006dd6 <SM_EnableDacToAux+0x16e>
	{
		printf("SM_EnableDacToAux HAL_DMA_Init() Result:%u\n",res);
 8006dc6:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8006dca:	4619      	mov	r1, r3
 8006dcc:	4811      	ldr	r0, [pc, #68]	; (8006e14 <SM_EnableDacToAux+0x1ac>)
 8006dce:	f00b f8cf 	bl	8011f70 <iprintf>
		Error_Handler();
 8006dd2:	f001 f9b7 	bl	8008144 <Error_Handler>
	}

	printf("SM_EnableDacToAux __HAL_LINKDMA()\n");
 8006dd6:	4810      	ldr	r0, [pc, #64]	; (8006e18 <SM_EnableDacToAux+0x1b0>)
 8006dd8:	f00b f93e 	bl	8012058 <puts>
	__HAL_LINKDMA(&hdac2,DMA_Handle1,hdma_dac2_ch1);
 8006ddc:	f107 030c 	add.w	r3, r7, #12
 8006de0:	677b      	str	r3, [r7, #116]	; 0x74
 8006de2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006de6:	637b      	str	r3, [r7, #52]	; 0x34

    //GO_ApplyPresetToAux(eDefaultGainPreset);
}
 8006de8:	bf00      	nop
 8006dea:	37c8      	adds	r7, #200	; 0xc8
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}
 8006df0:	080164d4 	.word	0x080164d4
 8006df4:	50000c00 	.word	0x50000c00
 8006df8:	080164e8 	.word	0x080164e8
 8006dfc:	08016514 	.word	0x08016514
 8006e00:	0801654c 	.word	0x0801654c
 8006e04:	40021000 	.word	0x40021000
 8006e08:	0801657c 	.word	0x0801657c
 8006e0c:	080165ac 	.word	0x080165ac
 8006e10:	40020030 	.word	0x40020030
 8006e14:	080165d0 	.word	0x080165d0
 8006e18:	080165fc 	.word	0x080165fc

08006e1c <SM_DisableDacToAux>:
 *	@param None
 *	@retval None
 *
 */
void SM_DisableDacToAux()
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	af00      	add	r7, sp, #0


	printf("SM_DisableDacToAux\n");
 8006e20:	4806      	ldr	r0, [pc, #24]	; (8006e3c <SM_DisableDacToAux+0x20>)
 8006e22:	f00b f919 	bl	8012058 <puts>
    //__HAL_RCC_DAC2_CLK_DISABLE();

    /**DAC2 GPIO Configuration
    PA6     ------> DAC2_OUT1
    */
	printf("SM_DisableDacToAux HAL_GPIO_DeInit\n");
 8006e26:	4806      	ldr	r0, [pc, #24]	; (8006e40 <SM_DisableDacToAux+0x24>)
 8006e28:	f00b f916 	bl	8012058 <puts>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_6);
 8006e2c:	2140      	movs	r1, #64	; 0x40
 8006e2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006e32:	f005 fadb 	bl	800c3ec <HAL_GPIO_DeInit>

}
 8006e36:	bf00      	nop
 8006e38:	bd80      	pop	{r7, pc}
 8006e3a:	bf00      	nop
 8006e3c:	08016620 	.word	0x08016620
 8006e40:	08016634 	.word	0x08016634

08006e44 <SM_GetEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
uint16_t SM_GetEncoderValue(eEncoder_Inversion direction)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b083      	sub	sp, #12
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	71fb      	strb	r3, [r7, #7]
	if(direction)
 8006e4e:	79fb      	ldrb	r3, [r7, #7]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d008      	beq.n	8006e66 <SM_GetEncoderValue+0x22>
	{
		return ENCODER_TIMER->ARR - ENCODER_TIMER->CNT;
 8006e54:	4b08      	ldr	r3, [pc, #32]	; (8006e78 <SM_GetEncoderValue+0x34>)
 8006e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e58:	b29a      	uxth	r2, r3
 8006e5a:	4b07      	ldr	r3, [pc, #28]	; (8006e78 <SM_GetEncoderValue+0x34>)
 8006e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e5e:	b29b      	uxth	r3, r3
 8006e60:	1ad3      	subs	r3, r2, r3
 8006e62:	b29b      	uxth	r3, r3
 8006e64:	e002      	b.n	8006e6c <SM_GetEncoderValue+0x28>
	}
	else
	{
		return ENCODER_TIMER->CNT;
 8006e66:	4b04      	ldr	r3, [pc, #16]	; (8006e78 <SM_GetEncoderValue+0x34>)
 8006e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e6a:	b29b      	uxth	r3, r3
	}
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	370c      	adds	r7, #12
 8006e70:	46bd      	mov	sp, r7
 8006e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e76:	4770      	bx	lr
 8006e78:	40012c00 	.word	0x40012c00

08006e7c <SM_GetOutputInHertz>:
 *	@param None
 *	@retval None
 *
 */
float SM_GetOutputInHertz()
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b085      	sub	sp, #20
 8006e80:	af00      	add	r7, sp, #0
	volatile float output_tm_psc;
	volatile float output_tm_arr;

	// safe-guard against divide by zero
	(OUTPUT_TIMER->PSC == 0) ? (output_tm_psc = 1) : (output_tm_psc = OUTPUT_TIMER->PSC);
 8006e82:	4b1d      	ldr	r3, [pc, #116]	; (8006ef8 <SM_GetOutputInHertz+0x7c>)
 8006e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d103      	bne.n	8006e92 <SM_GetOutputInHertz+0x16>
 8006e8a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8006e8e:	60bb      	str	r3, [r7, #8]
 8006e90:	e007      	b.n	8006ea2 <SM_GetOutputInHertz+0x26>
 8006e92:	4b19      	ldr	r3, [pc, #100]	; (8006ef8 <SM_GetOutputInHertz+0x7c>)
 8006e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e96:	ee07 3a90 	vmov	s15, r3
 8006e9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e9e:	edc7 7a02 	vstr	s15, [r7, #8]
	(OUTPUT_TIMER->ARR == 0) ? (output_tm_arr = 1) : (output_tm_arr = OUTPUT_TIMER->ARR);
 8006ea2:	4b15      	ldr	r3, [pc, #84]	; (8006ef8 <SM_GetOutputInHertz+0x7c>)
 8006ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d103      	bne.n	8006eb2 <SM_GetOutputInHertz+0x36>
 8006eaa:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8006eae:	607b      	str	r3, [r7, #4]
 8006eb0:	e007      	b.n	8006ec2 <SM_GetOutputInHertz+0x46>
 8006eb2:	4b11      	ldr	r3, [pc, #68]	; (8006ef8 <SM_GetOutputInHertz+0x7c>)
 8006eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eb6:	ee07 3a90 	vmov	s15, r3
 8006eba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ebe:	edc7 7a01 	vstr	s15, [r7, #4]

	float output_tm_freq = SM_MCLK / (output_tm_psc * output_tm_arr);
 8006ec2:	ed97 7a02 	vldr	s14, [r7, #8]
 8006ec6:	edd7 7a01 	vldr	s15, [r7, #4]
 8006eca:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006ece:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8006efc <SM_GetOutputInHertz+0x80>
 8006ed2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ed6:	edc7 7a03 	vstr	s15, [r7, #12]


	return output_tm_freq / SM_FSAMP;
 8006eda:	edd7 7a03 	vldr	s15, [r7, #12]
 8006ede:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8006f00 <SM_GetOutputInHertz+0x84>
 8006ee2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006ee6:	eef0 7a66 	vmov.f32	s15, s13
}
 8006eea:	eeb0 0a67 	vmov.f32	s0, s15
 8006eee:	3714      	adds	r7, #20
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef6:	4770      	bx	lr
 8006ef8:	40013400 	.word	0x40013400
 8006efc:	4d2037a0 	.word	0x4d2037a0
 8006f00:	42f00000 	.word	0x42f00000

08006f04 <SM_ConvertPeriodToHertz>:


float SM_ConvertPeriodToHertz(uint32_t period, uint16_t psc)
{
 8006f04:	b480      	push	{r7}
 8006f06:	b083      	sub	sp, #12
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
 8006f0c:	460b      	mov	r3, r1
 8006f0e:	807b      	strh	r3, [r7, #2]
	(psc == 0) ? (psc = 1) : psc;
 8006f10:	887b      	ldrh	r3, [r7, #2]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d101      	bne.n	8006f1a <SM_ConvertPeriodToHertz+0x16>
 8006f16:	2301      	movs	r3, #1
 8006f18:	807b      	strh	r3, [r7, #2]

	return (float)SM_MCLK / ( (float)psc * (float)period );
 8006f1a:	887b      	ldrh	r3, [r7, #2]
 8006f1c:	ee07 3a90 	vmov	s15, r3
 8006f20:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	ee07 3a90 	vmov	s15, r3
 8006f2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f32:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8006f4c <SM_ConvertPeriodToHertz+0x48>
 8006f36:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006f3a:	eef0 7a66 	vmov.f32	s15, s13
}
 8006f3e:	eeb0 0a67 	vmov.f32	s0, s15
 8006f42:	370c      	adds	r7, #12
 8006f44:	46bd      	mov	sp, r7
 8006f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4a:	4770      	bx	lr
 8006f4c:	4d2037a0 	.word	0x4d2037a0

08006f50 <SM_IsFuncPwmDutyMode>:
	return (SM_MCLK / hertz) / psc;
}


uint8_t SM_IsFuncPwmDutyMode()
{
 8006f50:	b480      	push	{r7}
 8006f52:	af00      	add	r7, sp, #0
	return duty_adjust_mode;
 8006f54:	4b03      	ldr	r3, [pc, #12]	; (8006f64 <SM_IsFuncPwmDutyMode+0x14>)
 8006f56:	781b      	ldrb	r3, [r3, #0]
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f60:	4770      	bx	lr
 8006f62:	bf00      	nop
 8006f64:	20002154 	.word	0x20002154

08006f68 <SM_ToggleFuncPwmDutyMode>:

void SM_ToggleFuncPwmDutyMode()
{
 8006f68:	b480      	push	{r7}
 8006f6a:	af00      	add	r7, sp, #0
	duty_adjust_mode ^= 1;
 8006f6c:	4b05      	ldr	r3, [pc, #20]	; (8006f84 <SM_ToggleFuncPwmDutyMode+0x1c>)
 8006f6e:	781b      	ldrb	r3, [r3, #0]
 8006f70:	f083 0301 	eor.w	r3, r3, #1
 8006f74:	b2da      	uxtb	r2, r3
 8006f76:	4b03      	ldr	r3, [pc, #12]	; (8006f84 <SM_ToggleFuncPwmDutyMode+0x1c>)
 8006f78:	701a      	strb	r2, [r3, #0]
}
 8006f7a:	bf00      	nop
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f82:	4770      	bx	lr
 8006f84:	20002154 	.word	0x20002154

08006f88 <SM_ResetFuncPwmDutyMode>:

void SM_ResetFuncPwmDutyMode()
{
 8006f88:	b480      	push	{r7}
 8006f8a:	af00      	add	r7, sp, #0
	duty_adjust_mode = 0;
 8006f8c:	4b03      	ldr	r3, [pc, #12]	; (8006f9c <SM_ResetFuncPwmDutyMode+0x14>)
 8006f8e:	2200      	movs	r2, #0
 8006f90:	701a      	strb	r2, [r3, #0]

}
 8006f92:	bf00      	nop
 8006f94:	46bd      	mov	sp, r7
 8006f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9a:	4770      	bx	lr
 8006f9c:	20002154 	.word	0x20002154

08006fa0 <VPP_ResetLastEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
void VPP_ResetLastEncoderValue()
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	af00      	add	r7, sp, #0
	amp_last_encoder_value = 0;
 8006fa4:	4b03      	ldr	r3, [pc, #12]	; (8006fb4 <VPP_ResetLastEncoderValue+0x14>)
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	801a      	strh	r2, [r3, #0]
}
 8006faa:	bf00      	nop
 8006fac:	46bd      	mov	sp, r7
 8006fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb2:	4770      	bx	lr
 8006fb4:	20002156 	.word	0x20002156

08006fb8 <VPP_ApplyProfileToSignal>:
 *	@param None
 *	@retval None
 *
 */
void VPP_ApplyProfileToSignal(eAmpSettings_t pPresetEnum)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b084      	sub	sp, #16
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	71fb      	strb	r3, [r7, #7]
	// retrieve the next preset
	AmplitudeProfile_t* pNextEncPreset = &theAmpProfiles[pPresetEnum];
 8006fc2:	79fa      	ldrb	r2, [r7, #7]
 8006fc4:	4613      	mov	r3, r2
 8006fc6:	00db      	lsls	r3, r3, #3
 8006fc8:	1a9b      	subs	r3, r3, r2
 8006fca:	009b      	lsls	r3, r3, #2
 8006fcc:	4a10      	ldr	r2, [pc, #64]	; (8007010 <VPP_ApplyProfileToSignal+0x58>)
 8006fce:	4413      	add	r3, r2
 8006fd0:	60fb      	str	r3, [r7, #12]

	// Set the new  amp profile to the SignalChannel object
	SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile = pNextEncPreset;
 8006fd2:	2000      	movs	r0, #0
 8006fd4:	f7ff fcba 	bl	800694c <SM_GetOutputChannel>
 8006fd8:	4602      	mov	r2, r0
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f8c2 31ec 	str.w	r3, [r2, #492]	; 0x1ec

    // set the gain preset
	GO_ApplyPresetToSignal(pNextEncPreset->gain_preset);
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	7a1b      	ldrb	r3, [r3, #8]
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	f7ff f8c3 	bl	8006170 <GO_ApplyPresetToSignal>

    // Apply the next amplitude setting to the SignalChannel object
    _ProcessSignalDataTable(pNextEncPreset->neg_gain_coeff, pNextEncPreset->amp_offset , pNextEncPreset->epos);
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	edd3 7a04 	vldr	s15, [r3, #16]
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	ed93 7a05 	vldr	s14, [r3, #20]
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	8b1b      	ldrh	r3, [r3, #24]
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	eef0 0a47 	vmov.f32	s1, s14
 8007000:	eeb0 0a67 	vmov.f32	s0, s15
 8007004:	f000 f830 	bl	8007068 <_ProcessSignalDataTable>


}
 8007008:	bf00      	nop
 800700a:	3710      	adds	r7, #16
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}
 8007010:	200003f8 	.word	0x200003f8

08007014 <VPP_ApplyProfileToAux>:
 *	@param None
 *	@retval None
 *
 */
void VPP_ApplyProfileToAux(eAmpSettings_t pPresetEnum)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b084      	sub	sp, #16
 8007018:	af00      	add	r7, sp, #0
 800701a:	4603      	mov	r3, r0
 800701c:	71fb      	strb	r3, [r7, #7]

	// retrieve the next preset
	AmplitudeProfile_t* pNextEncPreset = &theAmpProfiles[pPresetEnum];
 800701e:	79fa      	ldrb	r2, [r7, #7]
 8007020:	4613      	mov	r3, r2
 8007022:	00db      	lsls	r3, r3, #3
 8007024:	1a9b      	subs	r3, r3, r2
 8007026:	009b      	lsls	r3, r3, #2
 8007028:	4a0e      	ldr	r2, [pc, #56]	; (8007064 <VPP_ApplyProfileToAux+0x50>)
 800702a:	4413      	add	r3, r2
 800702c:	60fb      	str	r3, [r7, #12]

	// Set the new VPP Preset to the AuxChannel object
	SM_GetOutputChannel(AUX_CHANNEL)->amp_profile = pNextEncPreset;
 800702e:	2001      	movs	r0, #1
 8007030:	f7ff fc8c 	bl	800694c <SM_GetOutputChannel>
 8007034:	4602      	mov	r2, r0
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	f8c2 31ec 	str.w	r3, [r2, #492]	; 0x1ec

	 // set the gain preset
	//GO_ApplyPresetToAux(pNextEncPreset->gain_preset);

	// Apply the next amplitude setting to the AuxChannel object
	_ProcessAuxDataTable(pNextEncPreset->neg_gain_coeff, pNextEncPreset->amp_offset , pNextEncPreset->epos);
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	edd3 7a04 	vldr	s15, [r3, #16]
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	ed93 7a05 	vldr	s14, [r3, #20]
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	8b1b      	ldrh	r3, [r3, #24]
 800704c:	4618      	mov	r0, r3
 800704e:	eef0 0a47 	vmov.f32	s1, s14
 8007052:	eeb0 0a67 	vmov.f32	s0, s15
 8007056:	f000 f88d 	bl	8007174 <_ProcessAuxDataTable>



}
 800705a:	bf00      	nop
 800705c:	3710      	adds	r7, #16
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}
 8007062:	bf00      	nop
 8007064:	200003f8 	.word	0x200003f8

08007068 <_ProcessSignalDataTable>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessSignalDataTable(float _neg_gain_coeff, float amp_offset, uint16_t _encoder_value)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b08a      	sub	sp, #40	; 0x28
 800706c:	af00      	add	r7, sp, #0
 800706e:	ed87 0a03 	vstr	s0, [r7, #12]
 8007072:	edc7 0a02 	vstr	s1, [r7, #8]
 8007076:	4603      	mov	r3, r0
 8007078:	80fb      	strh	r3, [r7, #6]
	sOutputChannel_t * pTmpOutputChannel = SM_GetOutputChannel(SIGNAL_CHANNEL);
 800707a:	2000      	movs	r0, #0
 800707c:	f7ff fc66 	bl	800694c <SM_GetOutputChannel>
 8007080:	6178      	str	r0, [r7, #20]
	if(pTmpOutputChannel->func_profile->func != PWM_FUNC_MODE)
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8007088:	781b      	ldrb	r3, [r3, #0]
 800708a:	2b06      	cmp	r3, #6
 800708c:	d06b      	beq.n	8007166 <_ProcessSignalDataTable+0xfe>
	{
		// copy refer lookup datat table from SignalChannel object
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 800708e:	2300      	movs	r3, #0
 8007090:	627b      	str	r3, [r7, #36]	; 0x24
 8007092:	e00c      	b.n	80070ae <_ProcessSignalDataTable+0x46>
		{
			tmpDataTable[i] = pTmpOutputChannel->ref_lut_data[i];
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	685a      	ldr	r2, [r3, #4]
 8007098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800709a:	009b      	lsls	r3, r3, #2
 800709c:	4413      	add	r3, r2
 800709e:	681a      	ldr	r2, [r3, #0]
 80070a0:	4933      	ldr	r1, [pc, #204]	; (8007170 <_ProcessSignalDataTable+0x108>)
 80070a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 80070a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070aa:	3301      	adds	r3, #1
 80070ac:	627b      	str	r3, [r7, #36]	; 0x24
 80070ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b0:	2b77      	cmp	r3, #119	; 0x77
 80070b2:	ddef      	ble.n	8007094 <_ProcessSignalDataTable+0x2c>
		}

		// calculate positive offset coefficient from encoder position
		float pos_offset_coeff = 1;
 80070b4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80070b8:	623b      	str	r3, [r7, #32]
		if(_encoder_value)
 80070ba:	88fb      	ldrh	r3, [r7, #6]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d008      	beq.n	80070d2 <_ProcessSignalDataTable+0x6a>
		{
			pos_offset_coeff = (_encoder_value/4);
 80070c0:	88fb      	ldrh	r3, [r7, #6]
 80070c2:	089b      	lsrs	r3, r3, #2
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	ee07 3a90 	vmov	s15, r3
 80070ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80070ce:	edc7 7a08 	vstr	s15, [r7, #32]
		}

		// adjust amplitude and offset of lookup table copy
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 80070d2:	2300      	movs	r3, #0
 80070d4:	61fb      	str	r3, [r7, #28]
 80070d6:	e02e      	b.n	8007136 <_ProcessSignalDataTable+0xce>
		{
			tmpDataTable[i] = tmpDataTable[i] * (_neg_gain_coeff);
 80070d8:	4a25      	ldr	r2, [pc, #148]	; (8007170 <_ProcessSignalDataTable+0x108>)
 80070da:	69fb      	ldr	r3, [r7, #28]
 80070dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070e0:	ee07 3a90 	vmov	s15, r3
 80070e4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80070e8:	edd7 7a03 	vldr	s15, [r7, #12]
 80070ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070f4:	ee17 1a90 	vmov	r1, s15
 80070f8:	4a1d      	ldr	r2, [pc, #116]	; (8007170 <_ProcessSignalDataTable+0x108>)
 80070fa:	69fb      	ldr	r3, [r7, #28]
 80070fc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			tmpDataTable[i] = tmpDataTable[i] + (AMP_OFFSET * pos_offset_coeff);
 8007100:	4a1b      	ldr	r2, [pc, #108]	; (8007170 <_ProcessSignalDataTable+0x108>)
 8007102:	69fb      	ldr	r3, [r7, #28]
 8007104:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007108:	ee07 3a90 	vmov	s15, r3
 800710c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007110:	edd7 7a08 	vldr	s15, [r7, #32]
 8007114:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8007118:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800711c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007120:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007124:	ee17 1a90 	vmov	r1, s15
 8007128:	4a11      	ldr	r2, [pc, #68]	; (8007170 <_ProcessSignalDataTable+0x108>)
 800712a:	69fb      	ldr	r3, [r7, #28]
 800712c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8007130:	69fb      	ldr	r3, [r7, #28]
 8007132:	3301      	adds	r3, #1
 8007134:	61fb      	str	r3, [r7, #28]
 8007136:	69fb      	ldr	r3, [r7, #28]
 8007138:	2b77      	cmp	r3, #119	; 0x77
 800713a:	ddcd      	ble.n	80070d8 <_ProcessSignalDataTable+0x70>
		}

		// restore lookup table copy to active lookup table in SignalChannel object
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 800713c:	2300      	movs	r3, #0
 800713e:	61bb      	str	r3, [r7, #24]
 8007140:	e00e      	b.n	8007160 <_ProcessSignalDataTable+0xf8>
		{
			SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data[i] = tmpDataTable[i];
 8007142:	2000      	movs	r0, #0
 8007144:	f7ff fc02 	bl	800694c <SM_GetOutputChannel>
 8007148:	4601      	mov	r1, r0
 800714a:	4a09      	ldr	r2, [pc, #36]	; (8007170 <_ProcessSignalDataTable+0x108>)
 800714c:	69bb      	ldr	r3, [r7, #24]
 800714e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007152:	69bb      	ldr	r3, [r7, #24]
 8007154:	3302      	adds	r3, #2
 8007156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 800715a:	69bb      	ldr	r3, [r7, #24]
 800715c:	3301      	adds	r3, #1
 800715e:	61bb      	str	r3, [r7, #24]
 8007160:	69bb      	ldr	r3, [r7, #24]
 8007162:	2b77      	cmp	r3, #119	; 0x77
 8007164:	dded      	ble.n	8007142 <_ProcessSignalDataTable+0xda>
		}
	}

}
 8007166:	bf00      	nop
 8007168:	3728      	adds	r7, #40	; 0x28
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}
 800716e:	bf00      	nop
 8007170:	20002648 	.word	0x20002648

08007174 <_ProcessAuxDataTable>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessAuxDataTable(float _neg_gain_coeff, float amp_offset, uint16_t _encoder_value)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b088      	sub	sp, #32
 8007178:	af00      	add	r7, sp, #0
 800717a:	ed87 0a03 	vstr	s0, [r7, #12]
 800717e:	edc7 0a02 	vstr	s1, [r7, #8]
 8007182:	4603      	mov	r3, r0
 8007184:	80fb      	strh	r3, [r7, #6]
	if(SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func != PWM_FUNC_MODE)
 8007186:	2001      	movs	r0, #1
 8007188:	f7ff fbe0 	bl	800694c <SM_GetOutputChannel>
 800718c:	4603      	mov	r3, r0
 800718e:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8007192:	781b      	ldrb	r3, [r3, #0]
 8007194:	2b06      	cmp	r3, #6
 8007196:	d059      	beq.n	800724c <_ProcessAuxDataTable+0xd8>
	{
		// copy refer lookup datat table from AuxChannel object
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8007198:	2300      	movs	r3, #0
 800719a:	61fb      	str	r3, [r7, #28]
 800719c:	e00f      	b.n	80071be <_ProcessAuxDataTable+0x4a>
		{
			tmpDataTable[i] = SM_GetOutputChannel(AUX_CHANNEL)->ref_lut_data[i];
 800719e:	2001      	movs	r0, #1
 80071a0:	f7ff fbd4 	bl	800694c <SM_GetOutputChannel>
 80071a4:	4603      	mov	r3, r0
 80071a6:	685a      	ldr	r2, [r3, #4]
 80071a8:	69fb      	ldr	r3, [r7, #28]
 80071aa:	009b      	lsls	r3, r3, #2
 80071ac:	4413      	add	r3, r2
 80071ae:	681a      	ldr	r2, [r3, #0]
 80071b0:	4933      	ldr	r1, [pc, #204]	; (8007280 <_ProcessAuxDataTable+0x10c>)
 80071b2:	69fb      	ldr	r3, [r7, #28]
 80071b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 80071b8:	69fb      	ldr	r3, [r7, #28]
 80071ba:	3301      	adds	r3, #1
 80071bc:	61fb      	str	r3, [r7, #28]
 80071be:	69fb      	ldr	r3, [r7, #28]
 80071c0:	2b77      	cmp	r3, #119	; 0x77
 80071c2:	ddec      	ble.n	800719e <_ProcessAuxDataTable+0x2a>
		}

		// calculate positive offset coefficient from encoder position
		float pos_offset_coeff = 1;
 80071c4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80071c8:	61bb      	str	r3, [r7, #24]
		if(_encoder_value)
 80071ca:	88fb      	ldrh	r3, [r7, #6]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d008      	beq.n	80071e2 <_ProcessAuxDataTable+0x6e>
		{
			pos_offset_coeff = (_encoder_value/4);
 80071d0:	88fb      	ldrh	r3, [r7, #6]
 80071d2:	089b      	lsrs	r3, r3, #2
 80071d4:	b29b      	uxth	r3, r3
 80071d6:	ee07 3a90 	vmov	s15, r3
 80071da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80071de:	edc7 7a06 	vstr	s15, [r7, #24]
		}

		// adjust amplitude and offset of lookup table copy
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 80071e2:	2300      	movs	r3, #0
 80071e4:	617b      	str	r3, [r7, #20]
 80071e6:	e02e      	b.n	8007246 <_ProcessAuxDataTable+0xd2>
		{

			tmpDataTable[i] = tmpDataTable[i] * (_neg_gain_coeff);
 80071e8:	4a25      	ldr	r2, [pc, #148]	; (8007280 <_ProcessAuxDataTable+0x10c>)
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071f0:	ee07 3a90 	vmov	s15, r3
 80071f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80071f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80071fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007200:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007204:	ee17 1a90 	vmov	r1, s15
 8007208:	4a1d      	ldr	r2, [pc, #116]	; (8007280 <_ProcessAuxDataTable+0x10c>)
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			tmpDataTable[i] = tmpDataTable[i] + (AMP_OFFSET * pos_offset_coeff);
 8007210:	4a1b      	ldr	r2, [pc, #108]	; (8007280 <_ProcessAuxDataTable+0x10c>)
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007218:	ee07 3a90 	vmov	s15, r3
 800721c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007220:	edd7 7a06 	vldr	s15, [r7, #24]
 8007224:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8007228:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800722c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007230:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007234:	ee17 1a90 	vmov	r1, s15
 8007238:	4a11      	ldr	r2, [pc, #68]	; (8007280 <_ProcessAuxDataTable+0x10c>)
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	3301      	adds	r3, #1
 8007244:	617b      	str	r3, [r7, #20]
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	2b77      	cmp	r3, #119	; 0x77
 800724a:	ddcd      	ble.n	80071e8 <_ProcessAuxDataTable+0x74>
		}
	}


	// restore lookup table copy to active lookup table in SignalChannel object
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 800724c:	2300      	movs	r3, #0
 800724e:	613b      	str	r3, [r7, #16]
 8007250:	e00e      	b.n	8007270 <_ProcessAuxDataTable+0xfc>
	{
		SM_GetOutputChannel(AUX_CHANNEL)->dsp_lut_data[i] = tmpDataTable[i];
 8007252:	2001      	movs	r0, #1
 8007254:	f7ff fb7a 	bl	800694c <SM_GetOutputChannel>
 8007258:	4601      	mov	r1, r0
 800725a:	4a09      	ldr	r2, [pc, #36]	; (8007280 <_ProcessAuxDataTable+0x10c>)
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007262:	693b      	ldr	r3, [r7, #16]
 8007264:	3302      	adds	r3, #2
 8007266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	3301      	adds	r3, #1
 800726e:	613b      	str	r3, [r7, #16]
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	2b77      	cmp	r3, #119	; 0x77
 8007274:	dded      	ble.n	8007252 <_ProcessAuxDataTable+0xde>
	}
}
 8007276:	bf00      	nop
 8007278:	3720      	adds	r7, #32
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}
 800727e:	bf00      	nop
 8007280:	20002648 	.word	0x20002648

08007284 <VPP_MapEncoderPositionToSignalOutput>:
 *
 *	@retval None
 *
 */
void VPP_MapEncoderPositionToSignalOutput(uint16_t pEncoderValue)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b084      	sub	sp, #16
 8007288:	af00      	add	r7, sp, #0
 800728a:	4603      	mov	r3, r0
 800728c:	80fb      	strh	r3, [r7, #6]
	eAmpSettings_t tmpAmp = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile->amp_setting;
 800728e:	2000      	movs	r0, #0
 8007290:	f7ff fb5c 	bl	800694c <SM_GetOutputChannel>
 8007294:	4603      	mov	r3, r0
 8007296:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 800729a:	781b      	ldrb	r3, [r3, #0]
 800729c:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > amp_last_encoder_value)
 800729e:	4b15      	ldr	r3, [pc, #84]	; (80072f4 <VPP_MapEncoderPositionToSignalOutput+0x70>)
 80072a0:	881b      	ldrh	r3, [r3, #0]
 80072a2:	88fa      	ldrh	r2, [r7, #6]
 80072a4:	429a      	cmp	r2, r3
 80072a6:	d90c      	bls.n	80072c2 <VPP_MapEncoderPositionToSignalOutput+0x3e>
	{
		tmpAmp++;
 80072a8:	7bfb      	ldrb	r3, [r7, #15]
 80072aa:	3301      	adds	r3, #1
 80072ac:	73fb      	strb	r3, [r7, #15]
		if(tmpAmp > MAX_VPP_PRESETS-1) tmpAmp = VPP98;
 80072ae:	7bfb      	ldrb	r3, [r7, #15]
 80072b0:	2b61      	cmp	r3, #97	; 0x61
 80072b2:	d901      	bls.n	80072b8 <VPP_MapEncoderPositionToSignalOutput+0x34>
 80072b4:	2361      	movs	r3, #97	; 0x61
 80072b6:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToSignal(tmpAmp);
 80072b8:	7bfb      	ldrb	r3, [r7, #15]
 80072ba:	4618      	mov	r0, r3
 80072bc:	f7ff fe7c 	bl	8006fb8 <VPP_ApplyProfileToSignal>
 80072c0:	e010      	b.n	80072e4 <VPP_MapEncoderPositionToSignalOutput+0x60>
	}
	else if (pEncoderValue < amp_last_encoder_value)
 80072c2:	4b0c      	ldr	r3, [pc, #48]	; (80072f4 <VPP_MapEncoderPositionToSignalOutput+0x70>)
 80072c4:	881b      	ldrh	r3, [r3, #0]
 80072c6:	88fa      	ldrh	r2, [r7, #6]
 80072c8:	429a      	cmp	r2, r3
 80072ca:	d20b      	bcs.n	80072e4 <VPP_MapEncoderPositionToSignalOutput+0x60>
	{
		tmpAmp--;
 80072cc:	7bfb      	ldrb	r3, [r7, #15]
 80072ce:	3b01      	subs	r3, #1
 80072d0:	73fb      	strb	r3, [r7, #15]
		if(tmpAmp > MAX_VPP_PRESETS-1) tmpAmp = VPP01;
 80072d2:	7bfb      	ldrb	r3, [r7, #15]
 80072d4:	2b61      	cmp	r3, #97	; 0x61
 80072d6:	d901      	bls.n	80072dc <VPP_MapEncoderPositionToSignalOutput+0x58>
 80072d8:	2300      	movs	r3, #0
 80072da:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToSignal(tmpAmp);
 80072dc:	7bfb      	ldrb	r3, [r7, #15]
 80072de:	4618      	mov	r0, r3
 80072e0:	f7ff fe6a 	bl	8006fb8 <VPP_ApplyProfileToSignal>
	}
	amp_last_encoder_value = pEncoderValue;
 80072e4:	4a03      	ldr	r2, [pc, #12]	; (80072f4 <VPP_MapEncoderPositionToSignalOutput+0x70>)
 80072e6:	88fb      	ldrh	r3, [r7, #6]
 80072e8:	8013      	strh	r3, [r2, #0]

}
 80072ea:	bf00      	nop
 80072ec:	3710      	adds	r7, #16
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}
 80072f2:	bf00      	nop
 80072f4:	20002156 	.word	0x20002156

080072f8 <VPP_MapEncoderPositionToAuxOutput>:
 *
 *	@retval None
 *
 */
void VPP_MapEncoderPositionToAuxOutput(uint16_t pEncoderValue)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b084      	sub	sp, #16
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	4603      	mov	r3, r0
 8007300:	80fb      	strh	r3, [r7, #6]

	eAmpSettings_t tmpAmp = SM_GetOutputChannel(AUX_CHANNEL)->amp_profile->amp_setting;
 8007302:	2001      	movs	r0, #1
 8007304:	f7ff fb22 	bl	800694c <SM_GetOutputChannel>
 8007308:	4603      	mov	r3, r0
 800730a:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 800730e:	781b      	ldrb	r3, [r3, #0]
 8007310:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > amp_last_encoder_value)
 8007312:	4b15      	ldr	r3, [pc, #84]	; (8007368 <VPP_MapEncoderPositionToAuxOutput+0x70>)
 8007314:	881b      	ldrh	r3, [r3, #0]
 8007316:	88fa      	ldrh	r2, [r7, #6]
 8007318:	429a      	cmp	r2, r3
 800731a:	d90c      	bls.n	8007336 <VPP_MapEncoderPositionToAuxOutput+0x3e>
	{
		tmpAmp++;
 800731c:	7bfb      	ldrb	r3, [r7, #15]
 800731e:	3301      	adds	r3, #1
 8007320:	73fb      	strb	r3, [r7, #15]
		if(tmpAmp > MAX_VPP_PRESETS-1) tmpAmp = VPP98;
 8007322:	7bfb      	ldrb	r3, [r7, #15]
 8007324:	2b61      	cmp	r3, #97	; 0x61
 8007326:	d901      	bls.n	800732c <VPP_MapEncoderPositionToAuxOutput+0x34>
 8007328:	2361      	movs	r3, #97	; 0x61
 800732a:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToAux(tmpAmp);
 800732c:	7bfb      	ldrb	r3, [r7, #15]
 800732e:	4618      	mov	r0, r3
 8007330:	f7ff fe70 	bl	8007014 <VPP_ApplyProfileToAux>
 8007334:	e010      	b.n	8007358 <VPP_MapEncoderPositionToAuxOutput+0x60>
	}
	else if (pEncoderValue < amp_last_encoder_value)
 8007336:	4b0c      	ldr	r3, [pc, #48]	; (8007368 <VPP_MapEncoderPositionToAuxOutput+0x70>)
 8007338:	881b      	ldrh	r3, [r3, #0]
 800733a:	88fa      	ldrh	r2, [r7, #6]
 800733c:	429a      	cmp	r2, r3
 800733e:	d20b      	bcs.n	8007358 <VPP_MapEncoderPositionToAuxOutput+0x60>
	{
		tmpAmp--;
 8007340:	7bfb      	ldrb	r3, [r7, #15]
 8007342:	3b01      	subs	r3, #1
 8007344:	73fb      	strb	r3, [r7, #15]
		if(tmpAmp > MAX_VPP_PRESETS-1) tmpAmp = VPP01;
 8007346:	7bfb      	ldrb	r3, [r7, #15]
 8007348:	2b61      	cmp	r3, #97	; 0x61
 800734a:	d901      	bls.n	8007350 <VPP_MapEncoderPositionToAuxOutput+0x58>
 800734c:	2300      	movs	r3, #0
 800734e:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToAux(tmpAmp);
 8007350:	7bfb      	ldrb	r3, [r7, #15]
 8007352:	4618      	mov	r0, r3
 8007354:	f7ff fe5e 	bl	8007014 <VPP_ApplyProfileToAux>
	}
	amp_last_encoder_value = pEncoderValue;
 8007358:	4a03      	ldr	r2, [pc, #12]	; (8007368 <VPP_MapEncoderPositionToAuxOutput+0x70>)
 800735a:	88fb      	ldrh	r3, [r7, #6]
 800735c:	8013      	strh	r3, [r2, #0]

}
 800735e:	bf00      	nop
 8007360:	3710      	adds	r7, #16
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}
 8007366:	bf00      	nop
 8007368:	20002156 	.word	0x20002156

0800736c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b08c      	sub	sp, #48	; 0x30
 8007370:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 8007372:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007376:	2200      	movs	r2, #0
 8007378:	601a      	str	r2, [r3, #0]
 800737a:	605a      	str	r2, [r3, #4]
 800737c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800737e:	1d3b      	adds	r3, r7, #4
 8007380:	2220      	movs	r2, #32
 8007382:	2100      	movs	r1, #0
 8007384:	4618      	mov	r0, r3
 8007386:	f00a f98f 	bl	80116a8 <memset>

  /** Common config 
  */
  hadc1.Instance = ADC1;
 800738a:	4b32      	ldr	r3, [pc, #200]	; (8007454 <MX_ADC1_Init+0xe8>)
 800738c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007390:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8007392:	4b30      	ldr	r3, [pc, #192]	; (8007454 <MX_ADC1_Init+0xe8>)
 8007394:	2200      	movs	r2, #0
 8007396:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8007398:	4b2e      	ldr	r3, [pc, #184]	; (8007454 <MX_ADC1_Init+0xe8>)
 800739a:	2200      	movs	r2, #0
 800739c:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800739e:	4b2d      	ldr	r3, [pc, #180]	; (8007454 <MX_ADC1_Init+0xe8>)
 80073a0:	2200      	movs	r2, #0
 80073a2:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80073a4:	4b2b      	ldr	r3, [pc, #172]	; (8007454 <MX_ADC1_Init+0xe8>)
 80073a6:	2200      	movs	r2, #0
 80073a8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80073aa:	4b2a      	ldr	r3, [pc, #168]	; (8007454 <MX_ADC1_Init+0xe8>)
 80073ac:	2200      	movs	r2, #0
 80073ae:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80073b0:	4b28      	ldr	r3, [pc, #160]	; (8007454 <MX_ADC1_Init+0xe8>)
 80073b2:	2204      	movs	r2, #4
 80073b4:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80073b6:	4b27      	ldr	r3, [pc, #156]	; (8007454 <MX_ADC1_Init+0xe8>)
 80073b8:	2200      	movs	r2, #0
 80073ba:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80073bc:	4b25      	ldr	r3, [pc, #148]	; (8007454 <MX_ADC1_Init+0xe8>)
 80073be:	2201      	movs	r2, #1
 80073c0:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80073c2:	4b24      	ldr	r3, [pc, #144]	; (8007454 <MX_ADC1_Init+0xe8>)
 80073c4:	2201      	movs	r2, #1
 80073c6:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80073c8:	4b22      	ldr	r3, [pc, #136]	; (8007454 <MX_ADC1_Init+0xe8>)
 80073ca:	2200      	movs	r2, #0
 80073cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80073d0:	4b20      	ldr	r3, [pc, #128]	; (8007454 <MX_ADC1_Init+0xe8>)
 80073d2:	2200      	movs	r2, #0
 80073d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80073d6:	4b1f      	ldr	r3, [pc, #124]	; (8007454 <MX_ADC1_Init+0xe8>)
 80073d8:	2200      	movs	r2, #0
 80073da:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80073dc:	4b1d      	ldr	r3, [pc, #116]	; (8007454 <MX_ADC1_Init+0xe8>)
 80073de:	2201      	movs	r2, #1
 80073e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80073e4:	4b1b      	ldr	r3, [pc, #108]	; (8007454 <MX_ADC1_Init+0xe8>)
 80073e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80073ea:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80073ec:	4b19      	ldr	r3, [pc, #100]	; (8007454 <MX_ADC1_Init+0xe8>)
 80073ee:	2200      	movs	r2, #0
 80073f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80073f4:	4817      	ldr	r0, [pc, #92]	; (8007454 <MX_ADC1_Init+0xe8>)
 80073f6:	f002 f849 	bl	800948c <HAL_ADC_Init>
 80073fa:	4603      	mov	r3, r0
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d001      	beq.n	8007404 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8007400:	f000 fea0 	bl	8008144 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8007404:	2300      	movs	r3, #0
 8007406:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8007408:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800740c:	4619      	mov	r1, r3
 800740e:	4811      	ldr	r0, [pc, #68]	; (8007454 <MX_ADC1_Init+0xe8>)
 8007410:	f003 f910 	bl	800a634 <HAL_ADCEx_MultiModeConfigChannel>
 8007414:	4603      	mov	r3, r0
 8007416:	2b00      	cmp	r3, #0
 8007418:	d001      	beq.n	800741e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800741a:	f000 fe93 	bl	8008144 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800741e:	4b0e      	ldr	r3, [pc, #56]	; (8007458 <MX_ADC1_Init+0xec>)
 8007420:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8007422:	2306      	movs	r3, #6
 8007424:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8007426:	2300      	movs	r3, #0
 8007428:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800742a:	237f      	movs	r3, #127	; 0x7f
 800742c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800742e:	2304      	movs	r3, #4
 8007430:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8007432:	2300      	movs	r3, #0
 8007434:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007436:	1d3b      	adds	r3, r7, #4
 8007438:	4619      	mov	r1, r3
 800743a:	4806      	ldr	r0, [pc, #24]	; (8007454 <MX_ADC1_Init+0xe8>)
 800743c:	f002 fb2a 	bl	8009a94 <HAL_ADC_ConfigChannel>
 8007440:	4603      	mov	r3, r0
 8007442:	2b00      	cmp	r3, #0
 8007444:	d001      	beq.n	800744a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8007446:	f000 fe7d 	bl	8008144 <Error_Handler>
  }

}
 800744a:	bf00      	nop
 800744c:	3730      	adds	r7, #48	; 0x30
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}
 8007452:	bf00      	nop
 8007454:	20002828 	.word	0x20002828
 8007458:	0c900008 	.word	0x0c900008

0800745c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b08a      	sub	sp, #40	; 0x28
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007464:	f107 0314 	add.w	r3, r7, #20
 8007468:	2200      	movs	r2, #0
 800746a:	601a      	str	r2, [r3, #0]
 800746c:	605a      	str	r2, [r3, #4]
 800746e:	609a      	str	r2, [r3, #8]
 8007470:	60da      	str	r2, [r3, #12]
 8007472:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800747c:	d14f      	bne.n	800751e <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800747e:	4b2a      	ldr	r3, [pc, #168]	; (8007528 <HAL_ADC_MspInit+0xcc>)
 8007480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007482:	4a29      	ldr	r2, [pc, #164]	; (8007528 <HAL_ADC_MspInit+0xcc>)
 8007484:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007488:	64d3      	str	r3, [r2, #76]	; 0x4c
 800748a:	4b27      	ldr	r3, [pc, #156]	; (8007528 <HAL_ADC_MspInit+0xcc>)
 800748c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800748e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007492:	613b      	str	r3, [r7, #16]
 8007494:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007496:	4b24      	ldr	r3, [pc, #144]	; (8007528 <HAL_ADC_MspInit+0xcc>)
 8007498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800749a:	4a23      	ldr	r2, [pc, #140]	; (8007528 <HAL_ADC_MspInit+0xcc>)
 800749c:	f043 0301 	orr.w	r3, r3, #1
 80074a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80074a2:	4b21      	ldr	r3, [pc, #132]	; (8007528 <HAL_ADC_MspInit+0xcc>)
 80074a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074a6:	f003 0301 	and.w	r3, r3, #1
 80074aa:	60fb      	str	r3, [r7, #12]
 80074ac:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA2     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80074ae:	2304      	movs	r3, #4
 80074b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80074b2:	2303      	movs	r3, #3
 80074b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074b6:	2300      	movs	r3, #0
 80074b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80074ba:	f107 0314 	add.w	r3, r7, #20
 80074be:	4619      	mov	r1, r3
 80074c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80074c4:	f004 fe10 	bl	800c0e8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80074c8:	4b18      	ldr	r3, [pc, #96]	; (800752c <HAL_ADC_MspInit+0xd0>)
 80074ca:	4a19      	ldr	r2, [pc, #100]	; (8007530 <HAL_ADC_MspInit+0xd4>)
 80074cc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80074ce:	4b17      	ldr	r3, [pc, #92]	; (800752c <HAL_ADC_MspInit+0xd0>)
 80074d0:	2205      	movs	r2, #5
 80074d2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80074d4:	4b15      	ldr	r3, [pc, #84]	; (800752c <HAL_ADC_MspInit+0xd0>)
 80074d6:	2200      	movs	r2, #0
 80074d8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80074da:	4b14      	ldr	r3, [pc, #80]	; (800752c <HAL_ADC_MspInit+0xd0>)
 80074dc:	2200      	movs	r2, #0
 80074de:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80074e0:	4b12      	ldr	r3, [pc, #72]	; (800752c <HAL_ADC_MspInit+0xd0>)
 80074e2:	2280      	movs	r2, #128	; 0x80
 80074e4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80074e6:	4b11      	ldr	r3, [pc, #68]	; (800752c <HAL_ADC_MspInit+0xd0>)
 80074e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80074ec:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80074ee:	4b0f      	ldr	r3, [pc, #60]	; (800752c <HAL_ADC_MspInit+0xd0>)
 80074f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80074f4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80074f6:	4b0d      	ldr	r3, [pc, #52]	; (800752c <HAL_ADC_MspInit+0xd0>)
 80074f8:	2220      	movs	r2, #32
 80074fa:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80074fc:	4b0b      	ldr	r3, [pc, #44]	; (800752c <HAL_ADC_MspInit+0xd0>)
 80074fe:	2200      	movs	r2, #0
 8007500:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8007502:	480a      	ldr	r0, [pc, #40]	; (800752c <HAL_ADC_MspInit+0xd0>)
 8007504:	f004 fabe 	bl	800ba84 <HAL_DMA_Init>
 8007508:	4603      	mov	r3, r0
 800750a:	2b00      	cmp	r3, #0
 800750c:	d001      	beq.n	8007512 <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 800750e:	f000 fe19 	bl	8008144 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	4a05      	ldr	r2, [pc, #20]	; (800752c <HAL_ADC_MspInit+0xd0>)
 8007516:	655a      	str	r2, [r3, #84]	; 0x54
 8007518:	4a04      	ldr	r2, [pc, #16]	; (800752c <HAL_ADC_MspInit+0xd0>)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800751e:	bf00      	nop
 8007520:	3728      	adds	r7, #40	; 0x28
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}
 8007526:	bf00      	nop
 8007528:	40021000 	.word	0x40021000
 800752c:	20002894 	.word	0x20002894
 8007530:	40020008 	.word	0x40020008

08007534 <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	af00      	add	r7, sp, #0

  hcomp1.Instance = COMP1;
 8007538:	4b0f      	ldr	r3, [pc, #60]	; (8007578 <MX_COMP1_Init+0x44>)
 800753a:	4a10      	ldr	r2, [pc, #64]	; (800757c <MX_COMP1_Init+0x48>)
 800753c:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 800753e:	4b0e      	ldr	r3, [pc, #56]	; (8007578 <MX_COMP1_Init+0x44>)
 8007540:	2200      	movs	r2, #0
 8007542:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 8007544:	4b0c      	ldr	r3, [pc, #48]	; (8007578 <MX_COMP1_Init+0x44>)
 8007546:	4a0e      	ldr	r2, [pc, #56]	; (8007580 <MX_COMP1_Init+0x4c>)
 8007548:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800754a:	4b0b      	ldr	r3, [pc, #44]	; (8007578 <MX_COMP1_Init+0x44>)
 800754c:	2200      	movs	r2, #0
 800754e:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_HIGH;
 8007550:	4b09      	ldr	r3, [pc, #36]	; (8007578 <MX_COMP1_Init+0x44>)
 8007552:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8007556:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8007558:	4b07      	ldr	r3, [pc, #28]	; (8007578 <MX_COMP1_Init+0x44>)
 800755a:	2200      	movs	r2, #0
 800755c:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING_FALLING;
 800755e:	4b06      	ldr	r3, [pc, #24]	; (8007578 <MX_COMP1_Init+0x44>)
 8007560:	2231      	movs	r2, #49	; 0x31
 8007562:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8007564:	4804      	ldr	r0, [pc, #16]	; (8007578 <MX_COMP1_Init+0x44>)
 8007566:	f003 fae5 	bl	800ab34 <HAL_COMP_Init>
 800756a:	4603      	mov	r3, r0
 800756c:	2b00      	cmp	r3, #0
 800756e:	d001      	beq.n	8007574 <MX_COMP1_Init+0x40>
  {
    Error_Handler();
 8007570:	f000 fde8 	bl	8008144 <Error_Handler>
  }

}
 8007574:	bf00      	nop
 8007576:	bd80      	pop	{r7, pc}
 8007578:	200028f4 	.word	0x200028f4
 800757c:	40010200 	.word	0x40010200
 8007580:	00800030 	.word	0x00800030

08007584 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b088      	sub	sp, #32
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800758c:	f107 030c 	add.w	r3, r7, #12
 8007590:	2200      	movs	r2, #0
 8007592:	601a      	str	r2, [r3, #0]
 8007594:	605a      	str	r2, [r3, #4]
 8007596:	609a      	str	r2, [r3, #8]
 8007598:	60da      	str	r2, [r3, #12]
 800759a:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4a13      	ldr	r2, [pc, #76]	; (80075f0 <HAL_COMP_MspInit+0x6c>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d120      	bne.n	80075e8 <HAL_COMP_MspInit+0x64>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80075a6:	4b13      	ldr	r3, [pc, #76]	; (80075f4 <HAL_COMP_MspInit+0x70>)
 80075a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075aa:	4a12      	ldr	r2, [pc, #72]	; (80075f4 <HAL_COMP_MspInit+0x70>)
 80075ac:	f043 0301 	orr.w	r3, r3, #1
 80075b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80075b2:	4b10      	ldr	r3, [pc, #64]	; (80075f4 <HAL_COMP_MspInit+0x70>)
 80075b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075b6:	f003 0301 	and.w	r3, r3, #1
 80075ba:	60bb      	str	r3, [r7, #8]
 80075bc:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration    
    PA1     ------> COMP1_INP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80075be:	2302      	movs	r3, #2
 80075c0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80075c2:	2303      	movs	r3, #3
 80075c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075c6:	2300      	movs	r3, #0
 80075c8:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80075ca:	f107 030c 	add.w	r3, r7, #12
 80075ce:	4619      	mov	r1, r3
 80075d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80075d4:	f004 fd88 	bl	800c0e8 <HAL_GPIO_Init>

    /* COMP1 interrupt Init */
    HAL_NVIC_SetPriority(COMP1_2_3_IRQn, 0, 0);
 80075d8:	2200      	movs	r2, #0
 80075da:	2100      	movs	r1, #0
 80075dc:	2040      	movs	r0, #64	; 0x40
 80075de:	f003 fdf0 	bl	800b1c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP1_2_3_IRQn);
 80075e2:	2040      	movs	r0, #64	; 0x40
 80075e4:	f003 fe07 	bl	800b1f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 80075e8:	bf00      	nop
 80075ea:	3720      	adds	r7, #32
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}
 80075f0:	40010200 	.word	0x40010200
 80075f4:	40021000 	.word	0x40021000

080075f8 <MX_DAC1_Init>:
DMA_HandleTypeDef hdma_dac1_ch1;
DMA_HandleTypeDef hdma_dac2_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b08c      	sub	sp, #48	; 0x30
 80075fc:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 80075fe:	463b      	mov	r3, r7
 8007600:	2230      	movs	r2, #48	; 0x30
 8007602:	2100      	movs	r1, #0
 8007604:	4618      	mov	r0, r3
 8007606:	f00a f84f 	bl	80116a8 <memset>

  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 800760a:	4b1e      	ldr	r3, [pc, #120]	; (8007684 <MX_DAC1_Init+0x8c>)
 800760c:	4a1e      	ldr	r2, [pc, #120]	; (8007688 <MX_DAC1_Init+0x90>)
 800760e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8007610:	481c      	ldr	r0, [pc, #112]	; (8007684 <MX_DAC1_Init+0x8c>)
 8007612:	f003 fe18 	bl	800b246 <HAL_DAC_Init>
 8007616:	4603      	mov	r3, r0
 8007618:	2b00      	cmp	r3, #0
 800761a:	d001      	beq.n	8007620 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800761c:	f000 fd92 	bl	8008144 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8007620:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007624:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8007626:	2300      	movs	r3, #0
 8007628:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 800762a:	2300      	movs	r3, #0
 800762c:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800762e:	2300      	movs	r3, #0
 8007630:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 8007632:	2306      	movs	r3, #6
 8007634:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8007636:	2300      	movs	r3, #0
 8007638:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800763a:	2300      	movs	r3, #0
 800763c:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800763e:	2301      	movs	r3, #1
 8007640:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8007642:	2300      	movs	r3, #0
 8007644:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8007646:	463b      	mov	r3, r7
 8007648:	2200      	movs	r2, #0
 800764a:	4619      	mov	r1, r3
 800764c:	480d      	ldr	r0, [pc, #52]	; (8007684 <MX_DAC1_Init+0x8c>)
 800764e:	f003 ffe3 	bl	800b618 <HAL_DAC_ConfigChannel>
 8007652:	4603      	mov	r3, r0
 8007654:	2b00      	cmp	r3, #0
 8007656:	d001      	beq.n	800765c <MX_DAC1_Init+0x64>
  {
    Error_Handler();
 8007658:	f000 fd74 	bl	8008144 <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800765c:	2300      	movs	r3, #0
 800765e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8007660:	2301      	movs	r3, #1
 8007662:	61bb      	str	r3, [r7, #24]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8007664:	463b      	mov	r3, r7
 8007666:	2210      	movs	r2, #16
 8007668:	4619      	mov	r1, r3
 800766a:	4806      	ldr	r0, [pc, #24]	; (8007684 <MX_DAC1_Init+0x8c>)
 800766c:	f003 ffd4 	bl	800b618 <HAL_DAC_ConfigChannel>
 8007670:	4603      	mov	r3, r0
 8007672:	2b00      	cmp	r3, #0
 8007674:	d001      	beq.n	800767a <MX_DAC1_Init+0x82>
  {
    Error_Handler();
 8007676:	f000 fd65 	bl	8008144 <Error_Handler>
  }

}
 800767a:	bf00      	nop
 800767c:	3730      	adds	r7, #48	; 0x30
 800767e:	46bd      	mov	sp, r7
 8007680:	bd80      	pop	{r7, pc}
 8007682:	bf00      	nop
 8007684:	2000292c 	.word	0x2000292c
 8007688:	50000800 	.word	0x50000800

0800768c <MX_DAC2_Init>:
/* DAC2 init function */
void MX_DAC2_Init(void)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b08c      	sub	sp, #48	; 0x30
 8007690:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8007692:	463b      	mov	r3, r7
 8007694:	2230      	movs	r2, #48	; 0x30
 8007696:	2100      	movs	r1, #0
 8007698:	4618      	mov	r0, r3
 800769a:	f00a f805 	bl	80116a8 <memset>

  /** DAC Initialization 
  */
  hdac2.Instance = DAC2;
 800769e:	4b16      	ldr	r3, [pc, #88]	; (80076f8 <MX_DAC2_Init+0x6c>)
 80076a0:	4a16      	ldr	r2, [pc, #88]	; (80076fc <MX_DAC2_Init+0x70>)
 80076a2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 80076a4:	4814      	ldr	r0, [pc, #80]	; (80076f8 <MX_DAC2_Init+0x6c>)
 80076a6:	f003 fdce 	bl	800b246 <HAL_DAC_Init>
 80076aa:	4603      	mov	r3, r0
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d001      	beq.n	80076b4 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 80076b0:	f000 fd48 	bl	8008144 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80076b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80076b8:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80076ba:	2300      	movs	r3, #0
 80076bc:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80076be:	2300      	movs	r3, #0
 80076c0:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80076c2:	2300      	movs	r3, #0
 80076c4:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 80076c6:	2306      	movs	r3, #6
 80076c8:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80076ca:	2300      	movs	r3, #0
 80076cc:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80076ce:	2300      	movs	r3, #0
 80076d0:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80076d2:	2301      	movs	r3, #1
 80076d4:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80076d6:	2300      	movs	r3, #0
 80076d8:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80076da:	463b      	mov	r3, r7
 80076dc:	2200      	movs	r2, #0
 80076de:	4619      	mov	r1, r3
 80076e0:	4805      	ldr	r0, [pc, #20]	; (80076f8 <MX_DAC2_Init+0x6c>)
 80076e2:	f003 ff99 	bl	800b618 <HAL_DAC_ConfigChannel>
 80076e6:	4603      	mov	r3, r0
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d001      	beq.n	80076f0 <MX_DAC2_Init+0x64>
  {
    Error_Handler();
 80076ec:	f000 fd2a 	bl	8008144 <Error_Handler>
  }

}
 80076f0:	bf00      	nop
 80076f2:	3730      	adds	r7, #48	; 0x30
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}
 80076f8:	20002918 	.word	0x20002918
 80076fc:	50000c00 	.word	0x50000c00

08007700 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b08c      	sub	sp, #48	; 0x30
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007708:	f107 031c 	add.w	r3, r7, #28
 800770c:	2200      	movs	r2, #0
 800770e:	601a      	str	r2, [r3, #0]
 8007710:	605a      	str	r2, [r3, #4]
 8007712:	609a      	str	r2, [r3, #8]
 8007714:	60da      	str	r2, [r3, #12]
 8007716:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4a56      	ldr	r2, [pc, #344]	; (8007878 <HAL_DAC_MspInit+0x178>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d150      	bne.n	80077c4 <HAL_DAC_MspInit+0xc4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8007722:	4b56      	ldr	r3, [pc, #344]	; (800787c <HAL_DAC_MspInit+0x17c>)
 8007724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007726:	4a55      	ldr	r2, [pc, #340]	; (800787c <HAL_DAC_MspInit+0x17c>)
 8007728:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800772c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800772e:	4b53      	ldr	r3, [pc, #332]	; (800787c <HAL_DAC_MspInit+0x17c>)
 8007730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007732:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007736:	61bb      	str	r3, [r7, #24]
 8007738:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800773a:	4b50      	ldr	r3, [pc, #320]	; (800787c <HAL_DAC_MspInit+0x17c>)
 800773c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800773e:	4a4f      	ldr	r2, [pc, #316]	; (800787c <HAL_DAC_MspInit+0x17c>)
 8007740:	f043 0301 	orr.w	r3, r3, #1
 8007744:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007746:	4b4d      	ldr	r3, [pc, #308]	; (800787c <HAL_DAC_MspInit+0x17c>)
 8007748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800774a:	f003 0301 	and.w	r3, r3, #1
 800774e:	617b      	str	r3, [r7, #20]
 8007750:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8007752:	2330      	movs	r3, #48	; 0x30
 8007754:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007756:	2303      	movs	r3, #3
 8007758:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800775a:	2300      	movs	r3, #0
 800775c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800775e:	f107 031c 	add.w	r3, r7, #28
 8007762:	4619      	mov	r1, r3
 8007764:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007768:	f004 fcbe 	bl	800c0e8 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel2;
 800776c:	4b44      	ldr	r3, [pc, #272]	; (8007880 <HAL_DAC_MspInit+0x180>)
 800776e:	4a45      	ldr	r2, [pc, #276]	; (8007884 <HAL_DAC_MspInit+0x184>)
 8007770:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 8007772:	4b43      	ldr	r3, [pc, #268]	; (8007880 <HAL_DAC_MspInit+0x180>)
 8007774:	2206      	movs	r2, #6
 8007776:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007778:	4b41      	ldr	r3, [pc, #260]	; (8007880 <HAL_DAC_MspInit+0x180>)
 800777a:	2210      	movs	r2, #16
 800777c:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800777e:	4b40      	ldr	r3, [pc, #256]	; (8007880 <HAL_DAC_MspInit+0x180>)
 8007780:	2200      	movs	r2, #0
 8007782:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8007784:	4b3e      	ldr	r3, [pc, #248]	; (8007880 <HAL_DAC_MspInit+0x180>)
 8007786:	2280      	movs	r2, #128	; 0x80
 8007788:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800778a:	4b3d      	ldr	r3, [pc, #244]	; (8007880 <HAL_DAC_MspInit+0x180>)
 800778c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007790:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8007792:	4b3b      	ldr	r3, [pc, #236]	; (8007880 <HAL_DAC_MspInit+0x180>)
 8007794:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007798:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800779a:	4b39      	ldr	r3, [pc, #228]	; (8007880 <HAL_DAC_MspInit+0x180>)
 800779c:	2220      	movs	r2, #32
 800779e:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80077a0:	4b37      	ldr	r3, [pc, #220]	; (8007880 <HAL_DAC_MspInit+0x180>)
 80077a2:	2200      	movs	r2, #0
 80077a4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80077a6:	4836      	ldr	r0, [pc, #216]	; (8007880 <HAL_DAC_MspInit+0x180>)
 80077a8:	f004 f96c 	bl	800ba84 <HAL_DMA_Init>
 80077ac:	4603      	mov	r3, r0
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d001      	beq.n	80077b6 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 80077b2:	f000 fcc7 	bl	8008144 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	4a31      	ldr	r2, [pc, #196]	; (8007880 <HAL_DAC_MspInit+0x180>)
 80077ba:	609a      	str	r2, [r3, #8]
 80077bc:	4a30      	ldr	r2, [pc, #192]	; (8007880 <HAL_DAC_MspInit+0x180>)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }
}
 80077c2:	e054      	b.n	800786e <HAL_DAC_MspInit+0x16e>
  else if(dacHandle->Instance==DAC2)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4a2f      	ldr	r2, [pc, #188]	; (8007888 <HAL_DAC_MspInit+0x188>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d14f      	bne.n	800786e <HAL_DAC_MspInit+0x16e>
    __HAL_RCC_DAC2_CLK_ENABLE();
 80077ce:	4b2b      	ldr	r3, [pc, #172]	; (800787c <HAL_DAC_MspInit+0x17c>)
 80077d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077d2:	4a2a      	ldr	r2, [pc, #168]	; (800787c <HAL_DAC_MspInit+0x17c>)
 80077d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80077d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80077da:	4b28      	ldr	r3, [pc, #160]	; (800787c <HAL_DAC_MspInit+0x17c>)
 80077dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077e2:	613b      	str	r3, [r7, #16]
 80077e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80077e6:	4b25      	ldr	r3, [pc, #148]	; (800787c <HAL_DAC_MspInit+0x17c>)
 80077e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077ea:	4a24      	ldr	r2, [pc, #144]	; (800787c <HAL_DAC_MspInit+0x17c>)
 80077ec:	f043 0301 	orr.w	r3, r3, #1
 80077f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80077f2:	4b22      	ldr	r3, [pc, #136]	; (800787c <HAL_DAC_MspInit+0x17c>)
 80077f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077f6:	f003 0301 	and.w	r3, r3, #1
 80077fa:	60fb      	str	r3, [r7, #12]
 80077fc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80077fe:	2340      	movs	r3, #64	; 0x40
 8007800:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007802:	2303      	movs	r3, #3
 8007804:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007806:	2300      	movs	r3, #0
 8007808:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800780a:	f107 031c 	add.w	r3, r7, #28
 800780e:	4619      	mov	r1, r3
 8007810:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007814:	f004 fc68 	bl	800c0e8 <HAL_GPIO_Init>
    hdma_dac2_ch1.Instance = DMA1_Channel3;
 8007818:	4b1c      	ldr	r3, [pc, #112]	; (800788c <HAL_DAC_MspInit+0x18c>)
 800781a:	4a1d      	ldr	r2, [pc, #116]	; (8007890 <HAL_DAC_MspInit+0x190>)
 800781c:	601a      	str	r2, [r3, #0]
    hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 800781e:	4b1b      	ldr	r3, [pc, #108]	; (800788c <HAL_DAC_MspInit+0x18c>)
 8007820:	2229      	movs	r2, #41	; 0x29
 8007822:	605a      	str	r2, [r3, #4]
    hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007824:	4b19      	ldr	r3, [pc, #100]	; (800788c <HAL_DAC_MspInit+0x18c>)
 8007826:	2210      	movs	r2, #16
 8007828:	609a      	str	r2, [r3, #8]
    hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800782a:	4b18      	ldr	r3, [pc, #96]	; (800788c <HAL_DAC_MspInit+0x18c>)
 800782c:	2200      	movs	r2, #0
 800782e:	60da      	str	r2, [r3, #12]
    hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8007830:	4b16      	ldr	r3, [pc, #88]	; (800788c <HAL_DAC_MspInit+0x18c>)
 8007832:	2280      	movs	r2, #128	; 0x80
 8007834:	611a      	str	r2, [r3, #16]
    hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007836:	4b15      	ldr	r3, [pc, #84]	; (800788c <HAL_DAC_MspInit+0x18c>)
 8007838:	f44f 7200 	mov.w	r2, #512	; 0x200
 800783c:	615a      	str	r2, [r3, #20]
    hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800783e:	4b13      	ldr	r3, [pc, #76]	; (800788c <HAL_DAC_MspInit+0x18c>)
 8007840:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007844:	619a      	str	r2, [r3, #24]
    hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 8007846:	4b11      	ldr	r3, [pc, #68]	; (800788c <HAL_DAC_MspInit+0x18c>)
 8007848:	2220      	movs	r2, #32
 800784a:	61da      	str	r2, [r3, #28]
    hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800784c:	4b0f      	ldr	r3, [pc, #60]	; (800788c <HAL_DAC_MspInit+0x18c>)
 800784e:	2200      	movs	r2, #0
 8007850:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac2_ch1) != HAL_OK)
 8007852:	480e      	ldr	r0, [pc, #56]	; (800788c <HAL_DAC_MspInit+0x18c>)
 8007854:	f004 f916 	bl	800ba84 <HAL_DMA_Init>
 8007858:	4603      	mov	r3, r0
 800785a:	2b00      	cmp	r3, #0
 800785c:	d001      	beq.n	8007862 <HAL_DAC_MspInit+0x162>
      Error_Handler();
 800785e:	f000 fc71 	bl	8008144 <Error_Handler>
    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac2_ch1);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	4a09      	ldr	r2, [pc, #36]	; (800788c <HAL_DAC_MspInit+0x18c>)
 8007866:	609a      	str	r2, [r3, #8]
 8007868:	4a08      	ldr	r2, [pc, #32]	; (800788c <HAL_DAC_MspInit+0x18c>)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6293      	str	r3, [r2, #40]	; 0x28
}
 800786e:	bf00      	nop
 8007870:	3730      	adds	r7, #48	; 0x30
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}
 8007876:	bf00      	nop
 8007878:	50000800 	.word	0x50000800
 800787c:	40021000 	.word	0x40021000
 8007880:	2000216c 	.word	0x2000216c
 8007884:	4002001c 	.word	0x4002001c
 8007888:	50000c00 	.word	0x50000c00
 800788c:	20002940 	.word	0x20002940
 8007890:	40020030 	.word	0x40020030

08007894 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b082      	sub	sp, #8
 8007898:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800789a:	4b1e      	ldr	r3, [pc, #120]	; (8007914 <MX_DMA_Init+0x80>)
 800789c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800789e:	4a1d      	ldr	r2, [pc, #116]	; (8007914 <MX_DMA_Init+0x80>)
 80078a0:	f043 0304 	orr.w	r3, r3, #4
 80078a4:	6493      	str	r3, [r2, #72]	; 0x48
 80078a6:	4b1b      	ldr	r3, [pc, #108]	; (8007914 <MX_DMA_Init+0x80>)
 80078a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078aa:	f003 0304 	and.w	r3, r3, #4
 80078ae:	607b      	str	r3, [r7, #4]
 80078b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80078b2:	4b18      	ldr	r3, [pc, #96]	; (8007914 <MX_DMA_Init+0x80>)
 80078b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078b6:	4a17      	ldr	r2, [pc, #92]	; (8007914 <MX_DMA_Init+0x80>)
 80078b8:	f043 0301 	orr.w	r3, r3, #1
 80078bc:	6493      	str	r3, [r2, #72]	; 0x48
 80078be:	4b15      	ldr	r3, [pc, #84]	; (8007914 <MX_DMA_Init+0x80>)
 80078c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078c2:	f003 0301 	and.w	r3, r3, #1
 80078c6:	603b      	str	r3, [r7, #0]
 80078c8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 80078ca:	2200      	movs	r2, #0
 80078cc:	2101      	movs	r1, #1
 80078ce:	200b      	movs	r0, #11
 80078d0:	f003 fc77 	bl	800b1c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80078d4:	200b      	movs	r0, #11
 80078d6:	f003 fc8e 	bl	800b1f6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80078da:	2200      	movs	r2, #0
 80078dc:	2100      	movs	r1, #0
 80078de:	200c      	movs	r0, #12
 80078e0:	f003 fc6f 	bl	800b1c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80078e4:	200c      	movs	r0, #12
 80078e6:	f003 fc86 	bl	800b1f6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80078ea:	2200      	movs	r2, #0
 80078ec:	2100      	movs	r1, #0
 80078ee:	200d      	movs	r0, #13
 80078f0:	f003 fc67 	bl	800b1c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80078f4:	200d      	movs	r0, #13
 80078f6:	f003 fc7e 	bl	800b1f6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80078fa:	2200      	movs	r2, #0
 80078fc:	2100      	movs	r1, #0
 80078fe:	200e      	movs	r0, #14
 8007900:	f003 fc5f 	bl	800b1c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8007904:	200e      	movs	r0, #14
 8007906:	f003 fc76 	bl	800b1f6 <HAL_NVIC_EnableIRQ>

}
 800790a:	bf00      	nop
 800790c:	3708      	adds	r7, #8
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}
 8007912:	bf00      	nop
 8007914:	40021000 	.word	0x40021000

08007918 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007918:	b480      	push	{r7}
 800791a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800791c:	4b04      	ldr	r3, [pc, #16]	; (8007930 <__NVIC_GetPriorityGrouping+0x18>)
 800791e:	68db      	ldr	r3, [r3, #12]
 8007920:	0a1b      	lsrs	r3, r3, #8
 8007922:	f003 0307 	and.w	r3, r3, #7
}
 8007926:	4618      	mov	r0, r3
 8007928:	46bd      	mov	sp, r7
 800792a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792e:	4770      	bx	lr
 8007930:	e000ed00 	.word	0xe000ed00

08007934 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007934:	b480      	push	{r7}
 8007936:	b083      	sub	sp, #12
 8007938:	af00      	add	r7, sp, #0
 800793a:	4603      	mov	r3, r0
 800793c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800793e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007942:	2b00      	cmp	r3, #0
 8007944:	db0b      	blt.n	800795e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007946:	79fb      	ldrb	r3, [r7, #7]
 8007948:	f003 021f 	and.w	r2, r3, #31
 800794c:	4907      	ldr	r1, [pc, #28]	; (800796c <__NVIC_EnableIRQ+0x38>)
 800794e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007952:	095b      	lsrs	r3, r3, #5
 8007954:	2001      	movs	r0, #1
 8007956:	fa00 f202 	lsl.w	r2, r0, r2
 800795a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800795e:	bf00      	nop
 8007960:	370c      	adds	r7, #12
 8007962:	46bd      	mov	sp, r7
 8007964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007968:	4770      	bx	lr
 800796a:	bf00      	nop
 800796c:	e000e100 	.word	0xe000e100

08007970 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007970:	b480      	push	{r7}
 8007972:	b083      	sub	sp, #12
 8007974:	af00      	add	r7, sp, #0
 8007976:	4603      	mov	r3, r0
 8007978:	6039      	str	r1, [r7, #0]
 800797a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800797c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007980:	2b00      	cmp	r3, #0
 8007982:	db0a      	blt.n	800799a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	b2da      	uxtb	r2, r3
 8007988:	490c      	ldr	r1, [pc, #48]	; (80079bc <__NVIC_SetPriority+0x4c>)
 800798a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800798e:	0112      	lsls	r2, r2, #4
 8007990:	b2d2      	uxtb	r2, r2
 8007992:	440b      	add	r3, r1
 8007994:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007998:	e00a      	b.n	80079b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	b2da      	uxtb	r2, r3
 800799e:	4908      	ldr	r1, [pc, #32]	; (80079c0 <__NVIC_SetPriority+0x50>)
 80079a0:	79fb      	ldrb	r3, [r7, #7]
 80079a2:	f003 030f 	and.w	r3, r3, #15
 80079a6:	3b04      	subs	r3, #4
 80079a8:	0112      	lsls	r2, r2, #4
 80079aa:	b2d2      	uxtb	r2, r2
 80079ac:	440b      	add	r3, r1
 80079ae:	761a      	strb	r2, [r3, #24]
}
 80079b0:	bf00      	nop
 80079b2:	370c      	adds	r7, #12
 80079b4:	46bd      	mov	sp, r7
 80079b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ba:	4770      	bx	lr
 80079bc:	e000e100 	.word	0xe000e100
 80079c0:	e000ed00 	.word	0xe000ed00

080079c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80079c4:	b480      	push	{r7}
 80079c6:	b089      	sub	sp, #36	; 0x24
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	60f8      	str	r0, [r7, #12]
 80079cc:	60b9      	str	r1, [r7, #8]
 80079ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	f003 0307 	and.w	r3, r3, #7
 80079d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80079d8:	69fb      	ldr	r3, [r7, #28]
 80079da:	f1c3 0307 	rsb	r3, r3, #7
 80079de:	2b04      	cmp	r3, #4
 80079e0:	bf28      	it	cs
 80079e2:	2304      	movcs	r3, #4
 80079e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80079e6:	69fb      	ldr	r3, [r7, #28]
 80079e8:	3304      	adds	r3, #4
 80079ea:	2b06      	cmp	r3, #6
 80079ec:	d902      	bls.n	80079f4 <NVIC_EncodePriority+0x30>
 80079ee:	69fb      	ldr	r3, [r7, #28]
 80079f0:	3b03      	subs	r3, #3
 80079f2:	e000      	b.n	80079f6 <NVIC_EncodePriority+0x32>
 80079f4:	2300      	movs	r3, #0
 80079f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80079f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80079fc:	69bb      	ldr	r3, [r7, #24]
 80079fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007a02:	43da      	mvns	r2, r3
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	401a      	ands	r2, r3
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007a0c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	fa01 f303 	lsl.w	r3, r1, r3
 8007a16:	43d9      	mvns	r1, r3
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007a1c:	4313      	orrs	r3, r2
         );
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3724      	adds	r7, #36	; 0x24
 8007a22:	46bd      	mov	sp, r7
 8007a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a28:	4770      	bx	lr
	...

08007a2c <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b085      	sub	sp, #20
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
 8007a34:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16U), Port << (POSITION_VAL((Line >> 16U)) & 0x1FU) );
 8007a36:	4a14      	ldr	r2, [pc, #80]	; (8007a88 <LL_SYSCFG_SetEXTISource+0x5c>)
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	f003 0303 	and.w	r3, r3, #3
 8007a3e:	3302      	adds	r3, #2
 8007a40:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	0c1b      	lsrs	r3, r3, #16
 8007a48:	43db      	mvns	r3, r3
 8007a4a:	ea02 0103 	and.w	r1, r2, r3
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	0c1b      	lsrs	r3, r3, #16
 8007a52:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	fa93 f3a3 	rbit	r3, r3
 8007a5a:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	fab3 f383 	clz	r3, r3
 8007a62:	b2db      	uxtb	r3, r3
 8007a64:	f003 031f 	and.w	r3, r3, #31
 8007a68:	687a      	ldr	r2, [r7, #4]
 8007a6a:	409a      	lsls	r2, r3
 8007a6c:	4806      	ldr	r0, [pc, #24]	; (8007a88 <LL_SYSCFG_SetEXTISource+0x5c>)
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	f003 0303 	and.w	r3, r3, #3
 8007a74:	430a      	orrs	r2, r1
 8007a76:	3302      	adds	r3, #2
 8007a78:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8007a7c:	bf00      	nop
 8007a7e:	3714      	adds	r7, #20
 8007a80:	46bd      	mov	sp, r7
 8007a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a86:	4770      	bx	lr
 8007a88:	40010000 	.word	0x40010000

08007a8c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b089      	sub	sp, #36	; 0x24
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	60f8      	str	r0, [r7, #12]
 8007a94:	60b9      	str	r1, [r7, #8]
 8007a96:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681a      	ldr	r2, [r3, #0]
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	fa93 f3a3 	rbit	r3, r3
 8007aa6:	613b      	str	r3, [r7, #16]
  return result;
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	fab3 f383 	clz	r3, r3
 8007aae:	b2db      	uxtb	r3, r3
 8007ab0:	005b      	lsls	r3, r3, #1
 8007ab2:	2103      	movs	r1, #3
 8007ab4:	fa01 f303 	lsl.w	r3, r1, r3
 8007ab8:	43db      	mvns	r3, r3
 8007aba:	401a      	ands	r2, r3
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ac0:	69fb      	ldr	r3, [r7, #28]
 8007ac2:	fa93 f3a3 	rbit	r3, r3
 8007ac6:	61bb      	str	r3, [r7, #24]
  return result;
 8007ac8:	69bb      	ldr	r3, [r7, #24]
 8007aca:	fab3 f383 	clz	r3, r3
 8007ace:	b2db      	uxtb	r3, r3
 8007ad0:	005b      	lsls	r3, r3, #1
 8007ad2:	6879      	ldr	r1, [r7, #4]
 8007ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8007ad8:	431a      	orrs	r2, r3
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	601a      	str	r2, [r3, #0]
}
 8007ade:	bf00      	nop
 8007ae0:	3724      	adds	r7, #36	; 0x24
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae8:	4770      	bx	lr

08007aea <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8007aea:	b480      	push	{r7}
 8007aec:	b089      	sub	sp, #36	; 0x24
 8007aee:	af00      	add	r7, sp, #0
 8007af0:	60f8      	str	r0, [r7, #12]
 8007af2:	60b9      	str	r1, [r7, #8]
 8007af4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	68da      	ldr	r2, [r3, #12]
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	fa93 f3a3 	rbit	r3, r3
 8007b04:	613b      	str	r3, [r7, #16]
  return result;
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	fab3 f383 	clz	r3, r3
 8007b0c:	b2db      	uxtb	r3, r3
 8007b0e:	005b      	lsls	r3, r3, #1
 8007b10:	2103      	movs	r1, #3
 8007b12:	fa01 f303 	lsl.w	r3, r1, r3
 8007b16:	43db      	mvns	r3, r3
 8007b18:	401a      	ands	r2, r3
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b1e:	69fb      	ldr	r3, [r7, #28]
 8007b20:	fa93 f3a3 	rbit	r3, r3
 8007b24:	61bb      	str	r3, [r7, #24]
  return result;
 8007b26:	69bb      	ldr	r3, [r7, #24]
 8007b28:	fab3 f383 	clz	r3, r3
 8007b2c:	b2db      	uxtb	r3, r3
 8007b2e:	005b      	lsls	r3, r3, #1
 8007b30:	6879      	ldr	r1, [r7, #4]
 8007b32:	fa01 f303 	lsl.w	r3, r1, r3
 8007b36:	431a      	orrs	r2, r3
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	60da      	str	r2, [r3, #12]
}
 8007b3c:	bf00      	nop
 8007b3e:	3724      	adds	r7, #36	; 0x24
 8007b40:	46bd      	mov	sp, r7
 8007b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b46:	4770      	bx	lr

08007b48 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b083      	sub	sp, #12
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
 8007b50:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	683a      	ldr	r2, [r7, #0]
 8007b56:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007b58:	bf00      	nop
 8007b5a:	370c      	adds	r7, #12
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b62:	4770      	bx	lr

08007b64 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b085      	sub	sp, #20
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8007b6c:	4b08      	ldr	r3, [pc, #32]	; (8007b90 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007b6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007b70:	4907      	ldr	r1, [pc, #28]	; (8007b90 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	4313      	orrs	r3, r2
 8007b76:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8007b78:	4b05      	ldr	r3, [pc, #20]	; (8007b90 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007b7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	4013      	ands	r3, r2
 8007b80:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007b82:	68fb      	ldr	r3, [r7, #12]
}
 8007b84:	bf00      	nop
 8007b86:	3714      	adds	r7, #20
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8e:	4770      	bx	lr
 8007b90:	40021000 	.word	0x40021000

08007b94 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b08a      	sub	sp, #40	; 0x28
 8007b98:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8007b9a:	f107 031c 	add.w	r3, r7, #28
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	601a      	str	r2, [r3, #0]
 8007ba2:	605a      	str	r2, [r3, #4]
 8007ba4:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ba6:	1d3b      	adds	r3, r7, #4
 8007ba8:	2200      	movs	r2, #0
 8007baa:	601a      	str	r2, [r3, #0]
 8007bac:	605a      	str	r2, [r3, #4]
 8007bae:	609a      	str	r2, [r3, #8]
 8007bb0:	60da      	str	r2, [r3, #12]
 8007bb2:	611a      	str	r2, [r3, #16]
 8007bb4:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8007bb6:	2004      	movs	r0, #4
 8007bb8:	f7ff ffd4 	bl	8007b64 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 8007bbc:	2020      	movs	r0, #32
 8007bbe:	f7ff ffd1 	bl	8007b64 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8007bc2:	2001      	movs	r0, #1
 8007bc4:	f7ff ffce 	bl	8007b64 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8007bc8:	2002      	movs	r0, #2
 8007bca:	f7ff ffcb 	bl	8007b64 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMODE_GPIO_Port, TRIGMODE_Pin);
 8007bce:	2108      	movs	r1, #8
 8007bd0:	48d3      	ldr	r0, [pc, #844]	; (8007f20 <MX_GPIO_Init+0x38c>)
 8007bd2:	f7ff ffb9 	bl	8007b48 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(OFFSET_ENABLE_GPIO_Port, OFFSET_ENABLE_Pin);
 8007bd6:	2108      	movs	r1, #8
 8007bd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007bdc:	f7ff ffb4 	bl	8007b48 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin);
 8007be0:	2110      	movs	r1, #16
 8007be2:	48cf      	ldr	r0, [pc, #828]	; (8007f20 <MX_GPIO_Init+0x38c>)
 8007be4:	f7ff ffb0 	bl	8007b48 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin);
 8007be8:	2120      	movs	r1, #32
 8007bea:	48cd      	ldr	r0, [pc, #820]	; (8007f20 <MX_GPIO_Init+0x38c>)
 8007bec:	f7ff ffac 	bl	8007b48 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin);
 8007bf0:	2101      	movs	r1, #1
 8007bf2:	48cc      	ldr	r0, [pc, #816]	; (8007f24 <MX_GPIO_Init+0x390>)
 8007bf4:	f7ff ffa8 	bl	8007b48 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin);
 8007bf8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007bfc:	48c8      	ldr	r0, [pc, #800]	; (8007f20 <MX_GPIO_Init+0x38c>)
 8007bfe:	f7ff ffa3 	bl	8007b48 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin);
 8007c02:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007c06:	48c6      	ldr	r0, [pc, #792]	; (8007f20 <MX_GPIO_Init+0x38c>)
 8007c08:	f7ff ff9e 	bl	8007b48 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DC_GPIO_Port, DC_Pin);
 8007c0c:	2140      	movs	r1, #64	; 0x40
 8007c0e:	48c5      	ldr	r0, [pc, #788]	; (8007f24 <MX_GPIO_Init+0x390>)
 8007c10:	f7ff ff9a 	bl	8007b48 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CS_GPIO_Port, CS_Pin);
 8007c14:	2180      	movs	r1, #128	; 0x80
 8007c16:	48c3      	ldr	r0, [pc, #780]	; (8007f24 <MX_GPIO_Init+0x390>)
 8007c18:	f7ff ff96 	bl	8007b48 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(RST_GPIO_Port, RST_Pin);
 8007c1c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007c20:	48c0      	ldr	r0, [pc, #768]	; (8007f24 <MX_GPIO_Init+0x390>)
 8007c22:	f7ff ff91 	bl	8007b48 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE14);
 8007c26:	49c0      	ldr	r1, [pc, #768]	; (8007f28 <MX_GPIO_Init+0x394>)
 8007c28:	2002      	movs	r0, #2
 8007c2a:	f7ff feff 	bl	8007a2c <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE15);
 8007c2e:	49bf      	ldr	r1, [pc, #764]	; (8007f2c <MX_GPIO_Init+0x398>)
 8007c30:	2002      	movs	r0, #2
 8007c32:	f7ff fefb 	bl	8007a2c <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE0);
 8007c36:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8007c3a:	2005      	movs	r0, #5
 8007c3c:	f7ff fef6 	bl	8007a2c <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE1);
 8007c40:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
 8007c44:	2005      	movs	r0, #5
 8007c46:	f7ff fef1 	bl	8007a2c <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE2);
 8007c4a:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8007c4e:	2002      	movs	r0, #2
 8007c50:	f7ff feec 	bl	8007a2c <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 8007c54:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007c58:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8007c60:	2300      	movs	r3, #0
 8007c62:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8007c66:	2302      	movs	r3, #2
 8007c68:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8007c6c:	f107 031c 	add.w	r3, r7, #28
 8007c70:	4618      	mov	r0, r3
 8007c72:	f008 fa37 	bl	80100e4 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 8007c76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c7a:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8007c82:	2300      	movs	r3, #0
 8007c84:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8007c88:	2302      	movs	r3, #2
 8007c8a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8007c8e:	f107 031c 	add.w	r3, r7, #28
 8007c92:	4618      	mov	r0, r3
 8007c94:	f008 fa26 	bl	80100e4 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 8007c98:	2301      	movs	r3, #1
 8007c9a:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8007ca8:	2302      	movs	r3, #2
 8007caa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8007cae:	f107 031c 	add.w	r3, r7, #28
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f008 fa16 	bl	80100e4 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 8007cb8:	2302      	movs	r3, #2
 8007cba:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8007cc8:	2302      	movs	r3, #2
 8007cca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8007cce:	f107 031c 	add.w	r3, r7, #28
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f008 fa06 	bl	80100e4 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_2;
 8007cd8:	2304      	movs	r3, #4
 8007cda:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8007cdc:	2301      	movs	r3, #1
 8007cde:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8007ce8:	2302      	movs	r3, #2
 8007cea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8007cee:	f107 031c 	add.w	r3, r7, #28
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f008 f9f6 	bl	80100e4 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_PULL_UP);
 8007cf8:	2201      	movs	r2, #1
 8007cfa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007cfe:	4888      	ldr	r0, [pc, #544]	; (8007f20 <MX_GPIO_Init+0x38c>)
 8007d00:	f7ff fef3 	bl	8007aea <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_PULL_UP);
 8007d04:	2201      	movs	r2, #1
 8007d06:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007d0a:	4885      	ldr	r0, [pc, #532]	; (8007f20 <MX_GPIO_Init+0x38c>)
 8007d0c:	f7ff feed 	bl	8007aea <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_PULL_UP);
 8007d10:	2201      	movs	r2, #1
 8007d12:	2101      	movs	r1, #1
 8007d14:	4886      	ldr	r0, [pc, #536]	; (8007f30 <MX_GPIO_Init+0x39c>)
 8007d16:	f7ff fee8 	bl	8007aea <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_PULL_UP);
 8007d1a:	2201      	movs	r2, #1
 8007d1c:	2102      	movs	r1, #2
 8007d1e:	4884      	ldr	r0, [pc, #528]	; (8007f30 <MX_GPIO_Init+0x39c>)
 8007d20:	f7ff fee3 	bl	8007aea <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(ENC_SW_GPIO_Port, ENC_SW_Pin, LL_GPIO_PULL_UP);
 8007d24:	2201      	movs	r2, #1
 8007d26:	2104      	movs	r1, #4
 8007d28:	487d      	ldr	r0, [pc, #500]	; (8007f20 <MX_GPIO_Init+0x38c>)
 8007d2a:	f7ff fede 	bl	8007aea <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_MODE_INPUT);
 8007d2e:	2200      	movs	r2, #0
 8007d30:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007d34:	487a      	ldr	r0, [pc, #488]	; (8007f20 <MX_GPIO_Init+0x38c>)
 8007d36:	f7ff fea9 	bl	8007a8c <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_MODE_INPUT);
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007d40:	4877      	ldr	r0, [pc, #476]	; (8007f20 <MX_GPIO_Init+0x38c>)
 8007d42:	f7ff fea3 	bl	8007a8c <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_MODE_INPUT);
 8007d46:	2200      	movs	r2, #0
 8007d48:	2101      	movs	r1, #1
 8007d4a:	4879      	ldr	r0, [pc, #484]	; (8007f30 <MX_GPIO_Init+0x39c>)
 8007d4c:	f7ff fe9e 	bl	8007a8c <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_MODE_INPUT);
 8007d50:	2200      	movs	r2, #0
 8007d52:	2102      	movs	r1, #2
 8007d54:	4876      	ldr	r0, [pc, #472]	; (8007f30 <MX_GPIO_Init+0x39c>)
 8007d56:	f7ff fe99 	bl	8007a8c <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(ENC_SW_GPIO_Port, ENC_SW_Pin, LL_GPIO_MODE_INPUT);
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	2104      	movs	r1, #4
 8007d5e:	4870      	ldr	r0, [pc, #448]	; (8007f20 <MX_GPIO_Init+0x38c>)
 8007d60:	f7ff fe94 	bl	8007a8c <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = TRIGMODE_Pin;
 8007d64:	2308      	movs	r3, #8
 8007d66:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007d68:	2301      	movs	r3, #1
 8007d6a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007d70:	2300      	movs	r3, #0
 8007d72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8007d74:	2302      	movs	r3, #2
 8007d76:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMODE_GPIO_Port, &GPIO_InitStruct);
 8007d78:	1d3b      	adds	r3, r7, #4
 8007d7a:	4619      	mov	r1, r3
 8007d7c:	4868      	ldr	r0, [pc, #416]	; (8007f20 <MX_GPIO_Init+0x38c>)
 8007d7e:	f008 fba4 	bl	80104ca <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = OFFSET_ENABLE_Pin;
 8007d82:	2308      	movs	r3, #8
 8007d84:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007d86:	2301      	movs	r3, #1
 8007d88:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007d92:	2300      	movs	r3, #0
 8007d94:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(OFFSET_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8007d96:	1d3b      	adds	r3, r7, #4
 8007d98:	4619      	mov	r1, r3
 8007d9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007d9e:	f008 fb94 	bl	80104ca <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CH1_GAIN_C_Pin;
 8007da2:	2310      	movs	r3, #16
 8007da4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007da6:	2301      	movs	r3, #1
 8007da8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007daa:	2300      	movs	r3, #0
 8007dac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007dae:	2300      	movs	r3, #0
 8007db0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007db2:	2300      	movs	r3, #0
 8007db4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CH1_GAIN_C_GPIO_Port, &GPIO_InitStruct);
 8007db6:	1d3b      	adds	r3, r7, #4
 8007db8:	4619      	mov	r1, r3
 8007dba:	4859      	ldr	r0, [pc, #356]	; (8007f20 <MX_GPIO_Init+0x38c>)
 8007dbc:	f008 fb85 	bl	80104ca <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CH1_GAIN_B_Pin;
 8007dc0:	2320      	movs	r3, #32
 8007dc2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007dc8:	2300      	movs	r3, #0
 8007dca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007dcc:	2300      	movs	r3, #0
 8007dce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CH1_GAIN_B_GPIO_Port, &GPIO_InitStruct);
 8007dd4:	1d3b      	adds	r3, r7, #4
 8007dd6:	4619      	mov	r1, r3
 8007dd8:	4851      	ldr	r0, [pc, #324]	; (8007f20 <MX_GPIO_Init+0x38c>)
 8007dda:	f008 fb76 	bl	80104ca <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CH1_GAIN_A_Pin;
 8007dde:	2301      	movs	r3, #1
 8007de0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007de2:	2301      	movs	r3, #1
 8007de4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007de6:	2300      	movs	r3, #0
 8007de8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007dea:	2300      	movs	r3, #0
 8007dec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007dee:	2300      	movs	r3, #0
 8007df0:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CH1_GAIN_A_GPIO_Port, &GPIO_InitStruct);
 8007df2:	1d3b      	adds	r3, r7, #4
 8007df4:	4619      	mov	r1, r3
 8007df6:	484b      	ldr	r0, [pc, #300]	; (8007f24 <MX_GPIO_Init+0x390>)
 8007df8:	f008 fb67 	bl	80104ca <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX1_Pin;
 8007dfc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007e00:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007e02:	2301      	movs	r3, #1
 8007e04:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007e06:	2300      	movs	r3, #0
 8007e08:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX1_GPIO_Port, &GPIO_InitStruct);
 8007e12:	1d3b      	adds	r3, r7, #4
 8007e14:	4619      	mov	r1, r3
 8007e16:	4842      	ldr	r0, [pc, #264]	; (8007f20 <MX_GPIO_Init+0x38c>)
 8007e18:	f008 fb57 	bl	80104ca <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX2_Pin;
 8007e1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e20:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007e22:	2301      	movs	r3, #1
 8007e24:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007e26:	2300      	movs	r3, #0
 8007e28:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX2_GPIO_Port, &GPIO_InitStruct);
 8007e32:	1d3b      	adds	r3, r7, #4
 8007e34:	4619      	mov	r1, r3
 8007e36:	483a      	ldr	r0, [pc, #232]	; (8007f20 <MX_GPIO_Init+0x38c>)
 8007e38:	f008 fb47 	bl	80104ca <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DC_Pin;
 8007e3c:	2340      	movs	r3, #64	; 0x40
 8007e3e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007e40:	2301      	movs	r3, #1
 8007e42:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8007e44:	2303      	movs	r3, #3
 8007e46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007e48:	2300      	movs	r3, #0
 8007e4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DC_GPIO_Port, &GPIO_InitStruct);
 8007e50:	1d3b      	adds	r3, r7, #4
 8007e52:	4619      	mov	r1, r3
 8007e54:	4833      	ldr	r0, [pc, #204]	; (8007f24 <MX_GPIO_Init+0x390>)
 8007e56:	f008 fb38 	bl	80104ca <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CS_Pin;
 8007e5a:	2380      	movs	r3, #128	; 0x80
 8007e5c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007e5e:	2301      	movs	r3, #1
 8007e60:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8007e62:	2303      	movs	r3, #3
 8007e64:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007e66:	2300      	movs	r3, #0
 8007e68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8007e6e:	1d3b      	adds	r3, r7, #4
 8007e70:	4619      	mov	r1, r3
 8007e72:	482c      	ldr	r0, [pc, #176]	; (8007f24 <MX_GPIO_Init+0x390>)
 8007e74:	f008 fb29 	bl	80104ca <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = RST_Pin;
 8007e78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e7c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007e7e:	2301      	movs	r3, #1
 8007e80:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8007e82:	2303      	movs	r3, #3
 8007e84:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007e86:	2300      	movs	r3, #0
 8007e88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8007e8e:	1d3b      	adds	r3, r7, #4
 8007e90:	4619      	mov	r1, r3
 8007e92:	4824      	ldr	r0, [pc, #144]	; (8007f24 <MX_GPIO_Init+0x390>)
 8007e94:	f008 fb19 	bl	80104ca <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8007e98:	f7ff fd3e 	bl	8007918 <__NVIC_GetPriorityGrouping>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	2100      	movs	r1, #0
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f7ff fd8e 	bl	80079c4 <NVIC_EncodePriority>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	4619      	mov	r1, r3
 8007eac:	2006      	movs	r0, #6
 8007eae:	f7ff fd5f 	bl	8007970 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI0_IRQn);
 8007eb2:	2006      	movs	r0, #6
 8007eb4:	f7ff fd3e 	bl	8007934 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8007eb8:	f7ff fd2e 	bl	8007918 <__NVIC_GetPriorityGrouping>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	2100      	movs	r1, #0
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f7ff fd7e 	bl	80079c4 <NVIC_EncodePriority>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	4619      	mov	r1, r3
 8007ecc:	2007      	movs	r0, #7
 8007ece:	f7ff fd4f 	bl	8007970 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI1_IRQn);
 8007ed2:	2007      	movs	r0, #7
 8007ed4:	f7ff fd2e 	bl	8007934 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8007ed8:	f7ff fd1e 	bl	8007918 <__NVIC_GetPriorityGrouping>
 8007edc:	4603      	mov	r3, r0
 8007ede:	2200      	movs	r2, #0
 8007ee0:	2100      	movs	r1, #0
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	f7ff fd6e 	bl	80079c4 <NVIC_EncodePriority>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	4619      	mov	r1, r3
 8007eec:	2008      	movs	r0, #8
 8007eee:	f7ff fd3f 	bl	8007970 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI2_IRQn);
 8007ef2:	2008      	movs	r0, #8
 8007ef4:	f7ff fd1e 	bl	8007934 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8007ef8:	f7ff fd0e 	bl	8007918 <__NVIC_GetPriorityGrouping>
 8007efc:	4603      	mov	r3, r0
 8007efe:	2200      	movs	r2, #0
 8007f00:	2100      	movs	r1, #0
 8007f02:	4618      	mov	r0, r3
 8007f04:	f7ff fd5e 	bl	80079c4 <NVIC_EncodePriority>
 8007f08:	4603      	mov	r3, r0
 8007f0a:	4619      	mov	r1, r3
 8007f0c:	2028      	movs	r0, #40	; 0x28
 8007f0e:	f7ff fd2f 	bl	8007970 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 8007f12:	2028      	movs	r0, #40	; 0x28
 8007f14:	f7ff fd0e 	bl	8007934 <__NVIC_EnableIRQ>

}
 8007f18:	bf00      	nop
 8007f1a:	3728      	adds	r7, #40	; 0x28
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	e009      	b.n	8007f34 <MX_GPIO_Init+0x3a0>
 8007f20:	48000800 	.word	0x48000800
 8007f24:	48000400 	.word	0x48000400
 8007f28:	0f000003 	.word	0x0f000003
 8007f2c:	f0000003 	.word	0xf0000003
 8007f30:	48001400 	.word	0x48001400
 8007f34:	bd80      	pop	{r7, pc}
 8007f36:	bf00      	nop

08007f38 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b083      	sub	sp, #12
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8007f40:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8007f44:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8007f48:	f003 0301 	and.w	r3, r3, #1
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d013      	beq.n	8007f78 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8007f50:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8007f54:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8007f58:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d00b      	beq.n	8007f78 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8007f60:	e000      	b.n	8007f64 <ITM_SendChar+0x2c>
    {
      __NOP();
 8007f62:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8007f64:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d0f9      	beq.n	8007f62 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8007f6e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8007f72:	687a      	ldr	r2, [r7, #4]
 8007f74:	b2d2      	uxtb	r2, r2
 8007f76:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8007f78:	687b      	ldr	r3, [r7, #4]
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	370c      	adds	r7, #12
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f84:	4770      	bx	lr

08007f86 <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// redirect printf to SWV
int _write(int file, char *ptr, int len)
{
 8007f86:	b580      	push	{r7, lr}
 8007f88:	b086      	sub	sp, #24
 8007f8a:	af00      	add	r7, sp, #0
 8007f8c:	60f8      	str	r0, [r7, #12]
 8007f8e:	60b9      	str	r1, [r7, #8]
 8007f90:	607a      	str	r2, [r7, #4]
  int i=0;
 8007f92:	2300      	movs	r3, #0
 8007f94:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 8007f96:	2300      	movs	r3, #0
 8007f98:	617b      	str	r3, [r7, #20]
 8007f9a:	e009      	b.n	8007fb0 <_write+0x2a>
    ITM_SendChar((*ptr++));
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	1c5a      	adds	r2, r3, #1
 8007fa0:	60ba      	str	r2, [r7, #8]
 8007fa2:	781b      	ldrb	r3, [r3, #0]
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	f7ff ffc7 	bl	8007f38 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 8007faa:	697b      	ldr	r3, [r7, #20]
 8007fac:	3301      	adds	r3, #1
 8007fae:	617b      	str	r3, [r7, #20]
 8007fb0:	697a      	ldr	r2, [r7, #20]
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	429a      	cmp	r2, r3
 8007fb6:	dbf1      	blt.n	8007f9c <_write+0x16>
  return len;
 8007fb8:	687b      	ldr	r3, [r7, #4]
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3718      	adds	r7, #24
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}
	...

08007fc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007fc8:	f000 ff73 	bl	8008eb2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007fcc:	f000 f84c 	bl	8008068 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007fd0:	f7ff fde0 	bl	8007b94 <MX_GPIO_Init>
  MX_DMA_Init();
 8007fd4:	f7ff fc5e 	bl	8007894 <MX_DMA_Init>
  MX_DAC1_Init();
 8007fd8:	f7ff fb0e 	bl	80075f8 <MX_DAC1_Init>
  MX_ADC1_Init();
 8007fdc:	f7ff f9c6 	bl	800736c <MX_ADC1_Init>
  MX_COMP1_Init();
 8007fe0:	f7ff faa8 	bl	8007534 <MX_COMP1_Init>
  MX_SPI3_Init();
 8007fe4:	f000 f8ec 	bl	80081c0 <MX_SPI3_Init>
  MX_RNG_Init();
 8007fe8:	f000 f8dc 	bl	80081a4 <MX_RNG_Init>
  MX_TIM1_Init();
 8007fec:	f000 fb50 	bl	8008690 <MX_TIM1_Init>
  MX_TIM8_Init();
 8007ff0:	f000 fcd0 	bl	8008994 <MX_TIM8_Init>
  MX_TIM16_Init();
 8007ff4:	f000 fd88 	bl	8008b08 <MX_TIM16_Init>
  MX_TIM15_Init();
 8007ff8:	f000 fd34 	bl	8008a64 <MX_TIM15_Init>
  MX_TIM5_Init();
 8007ffc:	f000 fc7c 	bl	80088f8 <MX_TIM5_Init>
  MX_TIM3_Init();
 8008000:	f000 fc2c 	bl	800885c <MX_TIM3_Init>
  MX_DAC2_Init();
 8008004:	f7ff fb42 	bl	800768c <MX_DAC2_Init>
  MX_TIM17_Init();
 8008008:	f000 fda6 	bl	8008b58 <MX_TIM17_Init>
  MX_TIM2_Init();
 800800c:	f000 fbb0 	bl	8008770 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  SM_Init();
 8008010:	f7fe fb88 	bl	8006724 <SM_Init>

  HAL_TIM_Base_Start_IT(&htim17);
 8008014:	4810      	ldr	r0, [pc, #64]	; (8008058 <main+0x94>)
 8008016:	f005 fc1b 	bl	800d850 <HAL_TIM_Base_Start_IT>

  // http://www.ti.com/lit/ds/symlink/ts5a3357.pdf
  HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin6
 800801a:	2200      	movs	r2, #0
 800801c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008020:	480e      	ldr	r0, [pc, #56]	; (800805c <main+0x98>)
 8008022:	f004 fac5 	bl	800c5b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin5
 8008026:	2200      	movs	r2, #0
 8008028:	f44f 7100 	mov.w	r1, #512	; 0x200
 800802c:	480b      	ldr	r0, [pc, #44]	; (800805c <main+0x98>)
 800802e:	f004 fabf 	bl	800c5b0 <HAL_GPIO_WritePin>

#ifndef DISABLE_ALL_TIMERS
  // encoder input
  HAL_TIM_Base_Start(&htim1);		// enable encoder timer
 8008032:	480b      	ldr	r0, [pc, #44]	; (8008060 <main+0x9c>)
 8008034:	f005 fbb6 	bl	800d7a4 <HAL_TIM_Base_Start>
  //TIM1->DIER |= TIM_DIER_IDXIE;		// enable index interrupts

#endif	//DISABLE_ALL_TIMERS

  TIM6->PSC = 65535;
 8008038:	4b0a      	ldr	r3, [pc, #40]	; (8008064 <main+0xa0>)
 800803a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800803e:	629a      	str	r2, [r3, #40]	; 0x28
  TIM6->ARR = 65535;
 8008040:	4b08      	ldr	r3, [pc, #32]	; (8008064 <main+0xa0>)
 8008042:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008046:	62da      	str	r2, [r3, #44]	; 0x2c


  // TFT lib enable
  DM_Init();
 8008048:	f7f8 fe92 	bl	8000d70 <DM_Init>
  DM_PostInit();
 800804c:	f7f8 fe9e 	bl	8000d8c <DM_PostInit>

  // Intialise interrupt manager
  IM_Init();
 8008050:	f7fd f928 	bl	80052a4 <IM_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8008054:	e7fe      	b.n	8008054 <main+0x90>
 8008056:	bf00      	nop
 8008058:	20002afc 	.word	0x20002afc
 800805c:	48000800 	.word	0x48000800
 8008060:	20002b94 	.word	0x20002b94
 8008064:	40001000 	.word	0x40001000

08008068 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b0a8      	sub	sp, #160	; 0xa0
 800806c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800806e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8008072:	2238      	movs	r2, #56	; 0x38
 8008074:	2100      	movs	r1, #0
 8008076:	4618      	mov	r0, r3
 8008078:	f009 fb16 	bl	80116a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800807c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8008080:	2200      	movs	r2, #0
 8008082:	601a      	str	r2, [r3, #0]
 8008084:	605a      	str	r2, [r3, #4]
 8008086:	609a      	str	r2, [r3, #8]
 8008088:	60da      	str	r2, [r3, #12]
 800808a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800808c:	463b      	mov	r3, r7
 800808e:	2254      	movs	r2, #84	; 0x54
 8008090:	2100      	movs	r1, #0
 8008092:	4618      	mov	r0, r3
 8008094:	f009 fb08 	bl	80116a8 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8008098:	2000      	movs	r0, #0
 800809a:	f004 faa1 	bl	800c5e0 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 800809e:	2322      	movs	r3, #34	; 0x22
 80080a0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80080a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80080a6:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80080a8:	2340      	movs	r3, #64	; 0x40
 80080aa:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80080ac:	2301      	movs	r3, #1
 80080ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80080b2:	2302      	movs	r3, #2
 80080b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80080b8:	2302      	movs	r3, #2
 80080ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80080be:	2302      	movs	r3, #2
 80080c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 42;
 80080c4:	232a      	movs	r3, #42	; 0x2a
 80080c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80080ca:	2302      	movs	r3, #2
 80080cc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 80080d0:	2304      	movs	r3, #4
 80080d2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80080d6:	2302      	movs	r3, #2
 80080d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80080dc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80080e0:	4618      	mov	r0, r3
 80080e2:	f004 fb21 	bl	800c728 <HAL_RCC_OscConfig>
 80080e6:	4603      	mov	r3, r0
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d001      	beq.n	80080f0 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80080ec:	f000 f82a 	bl	8008144 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80080f0:	230f      	movs	r3, #15
 80080f2:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80080f4:	2303      	movs	r3, #3
 80080f6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80080f8:	2300      	movs	r3, #0
 80080fa:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80080fc:	2300      	movs	r3, #0
 80080fe:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008100:	2300      	movs	r3, #0
 8008102:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 8008104:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8008108:	2108      	movs	r1, #8
 800810a:	4618      	mov	r0, r3
 800810c:	f004 fe24 	bl	800cd58 <HAL_RCC_ClockConfig>
 8008110:	4603      	mov	r3, r0
 8008112:	2b00      	cmp	r3, #0
 8008114:	d001      	beq.n	800811a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8008116:	f000 f815 	bl	8008144 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_ADC12;
 800811a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800811e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8008120:	2300      	movs	r3, #0
 8008122:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8008124:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008128:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800812a:	463b      	mov	r3, r7
 800812c:	4618      	mov	r0, r3
 800812e:	f005 f803 	bl	800d138 <HAL_RCCEx_PeriphCLKConfig>
 8008132:	4603      	mov	r3, r0
 8008134:	2b00      	cmp	r3, #0
 8008136:	d001      	beq.n	800813c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8008138:	f000 f804 	bl	8008144 <Error_Handler>
  }
}
 800813c:	bf00      	nop
 800813e:	37a0      	adds	r7, #160	; 0xa0
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}

08008144 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008144:	b480      	push	{r7}
 8008146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8008148:	bf00      	nop
 800814a:	46bd      	mov	sp, r7
 800814c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008150:	4770      	bx	lr

08008152 <LL_RNG_Enable>:
  * @rmtoll CR           RNGEN         LL_RNG_Enable
  * @param  RNGx RNG Instance
  * @retval None
  */
__STATIC_INLINE void LL_RNG_Enable(RNG_TypeDef *RNGx)
{
 8008152:	b480      	push	{r7}
 8008154:	b083      	sub	sp, #12
 8008156:	af00      	add	r7, sp, #0
 8008158:	6078      	str	r0, [r7, #4]
  SET_BIT(RNGx->CR, RNG_CR_RNGEN);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f043 0204 	orr.w	r2, r3, #4
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	601a      	str	r2, [r3, #0]
}
 8008166:	bf00      	nop
 8008168:	370c      	adds	r7, #12
 800816a:	46bd      	mov	sp, r7
 800816c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008170:	4770      	bx	lr
	...

08008174 <LL_AHB2_GRP1_EnableClock>:
{
 8008174:	b480      	push	{r7}
 8008176:	b085      	sub	sp, #20
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800817c:	4b08      	ldr	r3, [pc, #32]	; (80081a0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800817e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008180:	4907      	ldr	r1, [pc, #28]	; (80081a0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	4313      	orrs	r3, r2
 8008186:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8008188:	4b05      	ldr	r3, [pc, #20]	; (80081a0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800818a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	4013      	ands	r3, r2
 8008190:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008192:	68fb      	ldr	r3, [r7, #12]
}
 8008194:	bf00      	nop
 8008196:	3714      	adds	r7, #20
 8008198:	46bd      	mov	sp, r7
 800819a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819e:	4770      	bx	lr
 80081a0:	40021000 	.word	0x40021000

080081a4 <MX_RNG_Init>:

/* USER CODE END 0 */

/* RNG init function */
void MX_RNG_Init(void)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	af00      	add	r7, sp, #0

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_RNG);
 80081a8:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80081ac:	f7ff ffe2 	bl	8008174 <LL_AHB2_GRP1_EnableClock>

  LL_RNG_Enable(RNG);
 80081b0:	4802      	ldr	r0, [pc, #8]	; (80081bc <MX_RNG_Init+0x18>)
 80081b2:	f7ff ffce 	bl	8008152 <LL_RNG_Enable>

}
 80081b6:	bf00      	nop
 80081b8:	bd80      	pop	{r7, pc}
 80081ba:	bf00      	nop
 80081bc:	50060800 	.word	0x50060800

080081c0 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 80081c4:	4b1b      	ldr	r3, [pc, #108]	; (8008234 <MX_SPI3_Init+0x74>)
 80081c6:	4a1c      	ldr	r2, [pc, #112]	; (8008238 <MX_SPI3_Init+0x78>)
 80081c8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80081ca:	4b1a      	ldr	r3, [pc, #104]	; (8008234 <MX_SPI3_Init+0x74>)
 80081cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80081d0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80081d2:	4b18      	ldr	r3, [pc, #96]	; (8008234 <MX_SPI3_Init+0x74>)
 80081d4:	2200      	movs	r2, #0
 80081d6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80081d8:	4b16      	ldr	r3, [pc, #88]	; (8008234 <MX_SPI3_Init+0x74>)
 80081da:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80081de:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80081e0:	4b14      	ldr	r3, [pc, #80]	; (8008234 <MX_SPI3_Init+0x74>)
 80081e2:	2200      	movs	r2, #0
 80081e4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80081e6:	4b13      	ldr	r3, [pc, #76]	; (8008234 <MX_SPI3_Init+0x74>)
 80081e8:	2200      	movs	r2, #0
 80081ea:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80081ec:	4b11      	ldr	r3, [pc, #68]	; (8008234 <MX_SPI3_Init+0x74>)
 80081ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80081f2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80081f4:	4b0f      	ldr	r3, [pc, #60]	; (8008234 <MX_SPI3_Init+0x74>)
 80081f6:	2210      	movs	r2, #16
 80081f8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80081fa:	4b0e      	ldr	r3, [pc, #56]	; (8008234 <MX_SPI3_Init+0x74>)
 80081fc:	2200      	movs	r2, #0
 80081fe:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8008200:	4b0c      	ldr	r3, [pc, #48]	; (8008234 <MX_SPI3_Init+0x74>)
 8008202:	2200      	movs	r2, #0
 8008204:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008206:	4b0b      	ldr	r3, [pc, #44]	; (8008234 <MX_SPI3_Init+0x74>)
 8008208:	2200      	movs	r2, #0
 800820a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800820c:	4b09      	ldr	r3, [pc, #36]	; (8008234 <MX_SPI3_Init+0x74>)
 800820e:	2207      	movs	r2, #7
 8008210:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8008212:	4b08      	ldr	r3, [pc, #32]	; (8008234 <MX_SPI3_Init+0x74>)
 8008214:	2200      	movs	r2, #0
 8008216:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8008218:	4b06      	ldr	r3, [pc, #24]	; (8008234 <MX_SPI3_Init+0x74>)
 800821a:	2208      	movs	r2, #8
 800821c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800821e:	4805      	ldr	r0, [pc, #20]	; (8008234 <MX_SPI3_Init+0x74>)
 8008220:	f005 f9d6 	bl	800d5d0 <HAL_SPI_Init>
 8008224:	4603      	mov	r3, r0
 8008226:	2b00      	cmp	r3, #0
 8008228:	d001      	beq.n	800822e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800822a:	f7ff ff8b 	bl	8008144 <Error_Handler>
  }

}
 800822e:	bf00      	nop
 8008230:	bd80      	pop	{r7, pc}
 8008232:	bf00      	nop
 8008234:	200029a0 	.word	0x200029a0
 8008238:	40003c00 	.word	0x40003c00

0800823c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b08a      	sub	sp, #40	; 0x28
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008244:	f107 0314 	add.w	r3, r7, #20
 8008248:	2200      	movs	r2, #0
 800824a:	601a      	str	r2, [r3, #0]
 800824c:	605a      	str	r2, [r3, #4]
 800824e:	609a      	str	r2, [r3, #8]
 8008250:	60da      	str	r2, [r3, #12]
 8008252:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	4a17      	ldr	r2, [pc, #92]	; (80082b8 <HAL_SPI_MspInit+0x7c>)
 800825a:	4293      	cmp	r3, r2
 800825c:	d128      	bne.n	80082b0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800825e:	4b17      	ldr	r3, [pc, #92]	; (80082bc <HAL_SPI_MspInit+0x80>)
 8008260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008262:	4a16      	ldr	r2, [pc, #88]	; (80082bc <HAL_SPI_MspInit+0x80>)
 8008264:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008268:	6593      	str	r3, [r2, #88]	; 0x58
 800826a:	4b14      	ldr	r3, [pc, #80]	; (80082bc <HAL_SPI_MspInit+0x80>)
 800826c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800826e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008272:	613b      	str	r3, [r7, #16]
 8008274:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008276:	4b11      	ldr	r3, [pc, #68]	; (80082bc <HAL_SPI_MspInit+0x80>)
 8008278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800827a:	4a10      	ldr	r2, [pc, #64]	; (80082bc <HAL_SPI_MspInit+0x80>)
 800827c:	f043 0304 	orr.w	r3, r3, #4
 8008280:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008282:	4b0e      	ldr	r3, [pc, #56]	; (80082bc <HAL_SPI_MspInit+0x80>)
 8008284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008286:	f003 0304 	and.w	r3, r3, #4
 800828a:	60fb      	str	r3, [r7, #12]
 800828c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800828e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008292:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008294:	2302      	movs	r3, #2
 8008296:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008298:	2300      	movs	r3, #0
 800829a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800829c:	2300      	movs	r3, #0
 800829e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80082a0:	2306      	movs	r3, #6
 80082a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80082a4:	f107 0314 	add.w	r3, r7, #20
 80082a8:	4619      	mov	r1, r3
 80082aa:	4805      	ldr	r0, [pc, #20]	; (80082c0 <HAL_SPI_MspInit+0x84>)
 80082ac:	f003 ff1c 	bl	800c0e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80082b0:	bf00      	nop
 80082b2:	3728      	adds	r7, #40	; 0x28
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}
 80082b8:	40003c00 	.word	0x40003c00
 80082bc:	40021000 	.word	0x40021000
 80082c0:	48000800 	.word	0x48000800

080082c4 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 80082c4:	b480      	push	{r7}
 80082c6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80082c8:	4b05      	ldr	r3, [pc, #20]	; (80082e0 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 80082ca:	689b      	ldr	r3, [r3, #8]
 80082cc:	4a04      	ldr	r2, [pc, #16]	; (80082e0 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 80082ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80082d2:	6093      	str	r3, [r2, #8]
}
 80082d4:	bf00      	nop
 80082d6:	46bd      	mov	sp, r7
 80082d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082dc:	4770      	bx	lr
 80082de:	bf00      	nop
 80082e0:	40007000 	.word	0x40007000

080082e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b082      	sub	sp, #8
 80082e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80082ea:	4b0f      	ldr	r3, [pc, #60]	; (8008328 <HAL_MspInit+0x44>)
 80082ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082ee:	4a0e      	ldr	r2, [pc, #56]	; (8008328 <HAL_MspInit+0x44>)
 80082f0:	f043 0301 	orr.w	r3, r3, #1
 80082f4:	6613      	str	r3, [r2, #96]	; 0x60
 80082f6:	4b0c      	ldr	r3, [pc, #48]	; (8008328 <HAL_MspInit+0x44>)
 80082f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082fa:	f003 0301 	and.w	r3, r3, #1
 80082fe:	607b      	str	r3, [r7, #4]
 8008300:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008302:	4b09      	ldr	r3, [pc, #36]	; (8008328 <HAL_MspInit+0x44>)
 8008304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008306:	4a08      	ldr	r2, [pc, #32]	; (8008328 <HAL_MspInit+0x44>)
 8008308:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800830c:	6593      	str	r3, [r2, #88]	; 0x58
 800830e:	4b06      	ldr	r3, [pc, #24]	; (8008328 <HAL_MspInit+0x44>)
 8008310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008316:	603b      	str	r3, [r7, #0]
 8008318:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 800831a:	f7ff ffd3 	bl	80082c4 <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800831e:	bf00      	nop
 8008320:	3708      	adds	r7, #8
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}
 8008326:	bf00      	nop
 8008328:	40021000 	.word	0x40021000

0800832c <LL_EXTI_IsActiveFlag_0_31>:
{
 800832c:	b480      	push	{r7}
 800832e:	b083      	sub	sp, #12
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8008334:	4b07      	ldr	r3, [pc, #28]	; (8008354 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8008336:	695a      	ldr	r2, [r3, #20]
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	4013      	ands	r3, r2
 800833c:	687a      	ldr	r2, [r7, #4]
 800833e:	429a      	cmp	r2, r3
 8008340:	d101      	bne.n	8008346 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8008342:	2301      	movs	r3, #1
 8008344:	e000      	b.n	8008348 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8008346:	2300      	movs	r3, #0
}
 8008348:	4618      	mov	r0, r3
 800834a:	370c      	adds	r7, #12
 800834c:	46bd      	mov	sp, r7
 800834e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008352:	4770      	bx	lr
 8008354:	40010400 	.word	0x40010400

08008358 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8008358:	b480      	push	{r7}
 800835a:	b083      	sub	sp, #12
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8008360:	4a04      	ldr	r2, [pc, #16]	; (8008374 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6153      	str	r3, [r2, #20]
}
 8008366:	bf00      	nop
 8008368:	370c      	adds	r7, #12
 800836a:	46bd      	mov	sp, r7
 800836c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008370:	4770      	bx	lr
 8008372:	bf00      	nop
 8008374:	40010400 	.word	0x40010400

08008378 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008378:	b480      	push	{r7}
 800837a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800837c:	bf00      	nop
 800837e:	46bd      	mov	sp, r7
 8008380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008384:	4770      	bx	lr
	...

08008388 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	DM_SetErrorDebugMsg("HARD FAULT");
 800838c:	4801      	ldr	r0, [pc, #4]	; (8008394 <HardFault_Handler+0xc>)
 800838e:	f7f9 fa8f 	bl	80018b0 <DM_SetErrorDebugMsg>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008392:	e7fe      	b.n	8008392 <HardFault_Handler+0xa>
 8008394:	08016658 	.word	0x08016658

08008398 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	DM_SetErrorDebugMsg("MEMMANAGE FAULT");
 800839c:	4801      	ldr	r0, [pc, #4]	; (80083a4 <MemManage_Handler+0xc>)
 800839e:	f7f9 fa87 	bl	80018b0 <DM_SetErrorDebugMsg>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80083a2:	e7fe      	b.n	80083a2 <MemManage_Handler+0xa>
 80083a4:	08016664 	.word	0x08016664

080083a8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
	DM_SetErrorDebugMsg("BUS FAULT");
 80083ac:	4801      	ldr	r0, [pc, #4]	; (80083b4 <BusFault_Handler+0xc>)
 80083ae:	f7f9 fa7f 	bl	80018b0 <DM_SetErrorDebugMsg>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80083b2:	e7fe      	b.n	80083b2 <BusFault_Handler+0xa>
 80083b4:	08016674 	.word	0x08016674

080083b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
	DM_SetErrorDebugMsg("USAGE FAULT");
 80083bc:	4801      	ldr	r0, [pc, #4]	; (80083c4 <UsageFault_Handler+0xc>)
 80083be:	f7f9 fa77 	bl	80018b0 <DM_SetErrorDebugMsg>
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80083c2:	e7fe      	b.n	80083c2 <UsageFault_Handler+0xa>
 80083c4:	08016680 	.word	0x08016680

080083c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80083c8:	b480      	push	{r7}
 80083ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80083cc:	bf00      	nop
 80083ce:	46bd      	mov	sp, r7
 80083d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d4:	4770      	bx	lr

080083d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80083d6:	b480      	push	{r7}
 80083d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80083da:	bf00      	nop
 80083dc:	46bd      	mov	sp, r7
 80083de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e2:	4770      	bx	lr

080083e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80083e4:	b480      	push	{r7}
 80083e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80083e8:	bf00      	nop
 80083ea:	46bd      	mov	sp, r7
 80083ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f0:	4770      	bx	lr

080083f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80083f2:	b580      	push	{r7, lr}
 80083f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80083f6:	f000 fdaf 	bl	8008f58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80083fa:	bf00      	nop
 80083fc:	bd80      	pop	{r7, pc}

080083fe <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80083fe:	b580      	push	{r7, lr}
 8008400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

	IM_BTN3_EXTI0_Handler();
 8008402:	f7fd f807 	bl	8005414 <IM_BTN3_EXTI0_Handler>

  /* USER CODE END EXTI0_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 8008406:	2001      	movs	r0, #1
 8008408:	f7ff ff90 	bl	800832c <LL_EXTI_IsActiveFlag_0_31>
 800840c:	4603      	mov	r3, r0
 800840e:	2b00      	cmp	r3, #0
 8008410:	d002      	beq.n	8008418 <EXTI0_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 8008412:	2001      	movs	r0, #1
 8008414:	f7ff ffa0 	bl	8008358 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_0 */
  }
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8008418:	bf00      	nop
 800841a:	bd80      	pop	{r7, pc}

0800841c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

	IM_BTN4_EXTI1_Handler();
 8008420:	f7fd f81e 	bl	8005460 <IM_BTN4_EXTI1_Handler>

  /* USER CODE END EXTI1_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1) != RESET)
 8008424:	2002      	movs	r0, #2
 8008426:	f7ff ff81 	bl	800832c <LL_EXTI_IsActiveFlag_0_31>
 800842a:	4603      	mov	r3, r0
 800842c:	2b00      	cmp	r3, #0
 800842e:	d002      	beq.n	8008436 <EXTI1_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_1);
 8008430:	2002      	movs	r0, #2
 8008432:	f7ff ff91 	bl	8008358 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_1 */
  }
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8008436:	bf00      	nop
 8008438:	bd80      	pop	{r7, pc}

0800843a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800843a:	b580      	push	{r7, lr}
 800843c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

	IM_ENC_EXTI2_Handler();
 800843e:	f7fd f835 	bl	80054ac <IM_ENC_EXTI2_Handler>

  /* USER CODE END EXTI2_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2) != RESET)
 8008442:	2004      	movs	r0, #4
 8008444:	f7ff ff72 	bl	800832c <LL_EXTI_IsActiveFlag_0_31>
 8008448:	4603      	mov	r3, r0
 800844a:	2b00      	cmp	r3, #0
 800844c:	d002      	beq.n	8008454 <EXTI2_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_2);
 800844e:	2004      	movs	r0, #4
 8008450:	f7ff ff82 	bl	8008358 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_2 */
  }
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8008454:	bf00      	nop
 8008456:	bd80      	pop	{r7, pc}

08008458 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800845c:	4802      	ldr	r0, [pc, #8]	; (8008468 <DMA1_Channel1_IRQHandler+0x10>)
 800845e:	f003 fcf4 	bl	800be4a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8008462:	bf00      	nop
 8008464:	bd80      	pop	{r7, pc}
 8008466:	bf00      	nop
 8008468:	20002894 	.word	0x20002894

0800846c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8008470:	4802      	ldr	r0, [pc, #8]	; (800847c <DMA1_Channel2_IRQHandler+0x10>)
 8008472:	f003 fcea 	bl	800be4a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8008476:	bf00      	nop
 8008478:	bd80      	pop	{r7, pc}
 800847a:	bf00      	nop
 800847c:	2000216c 	.word	0x2000216c

08008480 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2_ch1);
 8008484:	4802      	ldr	r0, [pc, #8]	; (8008490 <DMA1_Channel3_IRQHandler+0x10>)
 8008486:	f003 fce0 	bl	800be4a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800848a:	bf00      	nop
 800848c:	bd80      	pop	{r7, pc}
 800848e:	bf00      	nop
 8008490:	20002940 	.word	0x20002940

08008494 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8008498:	4802      	ldr	r0, [pc, #8]	; (80084a4 <DMA1_Channel4_IRQHandler+0x10>)
 800849a:	f003 fcd6 	bl	800be4a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800849e:	bf00      	nop
 80084a0:	bd80      	pop	{r7, pc}
 80084a2:	bf00      	nop
 80084a4:	20002a04 	.word	0x20002a04

080084a8 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

	DM_UpdateDisplay();
 80084ac:	f7f8 fc88 	bl	8000dc0 <DM_UpdateDisplay>


	IM_ENC_DIRF_Handler();
 80084b0:	f7fd f822 	bl	80054f8 <IM_ENC_DIRF_Handler>

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80084b4:	4803      	ldr	r0, [pc, #12]	; (80084c4 <TIM1_BRK_TIM15_IRQHandler+0x1c>)
 80084b6:	f005 ff69 	bl	800e38c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 80084ba:	4803      	ldr	r0, [pc, #12]	; (80084c8 <TIM1_BRK_TIM15_IRQHandler+0x20>)
 80084bc:	f005 ff66 	bl	800e38c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80084c0:	bf00      	nop
 80084c2:	bd80      	pop	{r7, pc}
 80084c4:	20002b94 	.word	0x20002b94
 80084c8:	20002ab0 	.word	0x20002ab0

080084cc <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */
	EM_ProcessEvent();
 80084d0:	f7fb ffb8 	bl	8004444 <EM_ProcessEvent>
  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80084d4:	4803      	ldr	r0, [pc, #12]	; (80084e4 <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 80084d6:	f005 ff59 	bl	800e38c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 80084da:	4803      	ldr	r0, [pc, #12]	; (80084e8 <TIM1_TRG_COM_TIM17_IRQHandler+0x1c>)
 80084dc:	f005 ff56 	bl	800e38c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80084e0:	bf00      	nop
 80084e2:	bd80      	pop	{r7, pc}
 80084e4:	20002b94 	.word	0x20002b94
 80084e8:	20002afc 	.word	0x20002afc

080084ec <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80084f0:	4802      	ldr	r0, [pc, #8]	; (80084fc <TIM3_IRQHandler+0x10>)
 80084f2:	f005 ff4b 	bl	800e38c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80084f6:	bf00      	nop
 80084f8:	bd80      	pop	{r7, pc}
 80084fa:	bf00      	nop
 80084fc:	200021d8 	.word	0x200021d8

08008500 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	IM_BTN1_EXTI14_Handler();
 8008504:	f7fc ff36 	bl	8005374 <IM_BTN1_EXTI14_Handler>
	IM_BTN2_EXTI15_Handler();
 8008508:	f7fc ff5c 	bl	80053c4 <IM_BTN2_EXTI15_Handler>

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14) != RESET)
 800850c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8008510:	f7ff ff0c 	bl	800832c <LL_EXTI_IsActiveFlag_0_31>
 8008514:	4603      	mov	r3, r0
 8008516:	2b00      	cmp	r3, #0
 8008518:	d003      	beq.n	8008522 <EXTI15_10_IRQHandler+0x22>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_14);
 800851a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800851e:	f7ff ff1b 	bl	8008358 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_14 */
    
    /* USER CODE END LL_EXTI_LINE_14 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15) != RESET)
 8008522:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8008526:	f7ff ff01 	bl	800832c <LL_EXTI_IsActiveFlag_0_31>
 800852a:	4603      	mov	r3, r0
 800852c:	2b00      	cmp	r3, #0
 800852e:	d003      	beq.n	8008538 <EXTI15_10_IRQHandler+0x38>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_15);
 8008530:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8008534:	f7ff ff10 	bl	8008358 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_15 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8008538:	bf00      	nop
 800853a:	bd80      	pop	{r7, pc}

0800853c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	IM_SWEEP_UPDATE_TIM_IRQHandler();
 8008540:	f7fc fec0 	bl	80052c4 <IM_SWEEP_UPDATE_TIM_IRQHandler>
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8008544:	4802      	ldr	r0, [pc, #8]	; (8008550 <TIM5_IRQHandler+0x14>)
 8008546:	f005 ff21 	bl	800e38c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800854a:	bf00      	nop
 800854c:	bd80      	pop	{r7, pc}
 800854e:	bf00      	nop
 8008550:	20002b48 	.word	0x20002b48

08008554 <COMP1_2_3_IRQHandler>:

/**
  * @brief This function handles COMP1, COMP2 and COMP3 interrupts through EXTI lines 21, 22 and 29.
  */
void COMP1_2_3_IRQHandler(void)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP1_2_3_IRQn 0 */

  /* USER CODE END COMP1_2_3_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp1);
 8008558:	4802      	ldr	r0, [pc, #8]	; (8008564 <COMP1_2_3_IRQHandler+0x10>)
 800855a:	f002 fcb1 	bl	800aec0 <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP1_2_3_IRQn 1 */

  /* USER CODE END COMP1_2_3_IRQn 1 */
}
 800855e:	bf00      	nop
 8008560:	bd80      	pop	{r7, pc}
 8008562:	bf00      	nop
 8008564:	200028f4 	.word	0x200028f4

08008568 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b086      	sub	sp, #24
 800856c:	af00      	add	r7, sp, #0
 800856e:	60f8      	str	r0, [r7, #12]
 8008570:	60b9      	str	r1, [r7, #8]
 8008572:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008574:	2300      	movs	r3, #0
 8008576:	617b      	str	r3, [r7, #20]
 8008578:	e00a      	b.n	8008590 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800857a:	f3af 8000 	nop.w
 800857e:	4601      	mov	r1, r0
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	1c5a      	adds	r2, r3, #1
 8008584:	60ba      	str	r2, [r7, #8]
 8008586:	b2ca      	uxtb	r2, r1
 8008588:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800858a:	697b      	ldr	r3, [r7, #20]
 800858c:	3301      	adds	r3, #1
 800858e:	617b      	str	r3, [r7, #20]
 8008590:	697a      	ldr	r2, [r7, #20]
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	429a      	cmp	r2, r3
 8008596:	dbf0      	blt.n	800857a <_read+0x12>
	}

return len;
 8008598:	687b      	ldr	r3, [r7, #4]
}
 800859a:	4618      	mov	r0, r3
 800859c:	3718      	adds	r7, #24
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}

080085a2 <_close>:
	}
	return len;
}

int _close(int file)
{
 80085a2:	b480      	push	{r7}
 80085a4:	b083      	sub	sp, #12
 80085a6:	af00      	add	r7, sp, #0
 80085a8:	6078      	str	r0, [r7, #4]
	return -1;
 80085aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	370c      	adds	r7, #12
 80085b2:	46bd      	mov	sp, r7
 80085b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b8:	4770      	bx	lr

080085ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80085ba:	b480      	push	{r7}
 80085bc:	b083      	sub	sp, #12
 80085be:	af00      	add	r7, sp, #0
 80085c0:	6078      	str	r0, [r7, #4]
 80085c2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80085ca:	605a      	str	r2, [r3, #4]
	return 0;
 80085cc:	2300      	movs	r3, #0
}
 80085ce:	4618      	mov	r0, r3
 80085d0:	370c      	adds	r7, #12
 80085d2:	46bd      	mov	sp, r7
 80085d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d8:	4770      	bx	lr

080085da <_isatty>:

int _isatty(int file)
{
 80085da:	b480      	push	{r7}
 80085dc:	b083      	sub	sp, #12
 80085de:	af00      	add	r7, sp, #0
 80085e0:	6078      	str	r0, [r7, #4]
	return 1;
 80085e2:	2301      	movs	r3, #1
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	370c      	adds	r7, #12
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr

080085f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b085      	sub	sp, #20
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	60f8      	str	r0, [r7, #12]
 80085f8:	60b9      	str	r1, [r7, #8]
 80085fa:	607a      	str	r2, [r7, #4]
	return 0;
 80085fc:	2300      	movs	r3, #0
}
 80085fe:	4618      	mov	r0, r3
 8008600:	3714      	adds	r7, #20
 8008602:	46bd      	mov	sp, r7
 8008604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008608:	4770      	bx	lr
	...

0800860c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b084      	sub	sp, #16
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8008614:	4b11      	ldr	r3, [pc, #68]	; (800865c <_sbrk+0x50>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d102      	bne.n	8008622 <_sbrk+0x16>
		heap_end = &end;
 800861c:	4b0f      	ldr	r3, [pc, #60]	; (800865c <_sbrk+0x50>)
 800861e:	4a10      	ldr	r2, [pc, #64]	; (8008660 <_sbrk+0x54>)
 8008620:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8008622:	4b0e      	ldr	r3, [pc, #56]	; (800865c <_sbrk+0x50>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8008628:	4b0c      	ldr	r3, [pc, #48]	; (800865c <_sbrk+0x50>)
 800862a:	681a      	ldr	r2, [r3, #0]
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	4413      	add	r3, r2
 8008630:	466a      	mov	r2, sp
 8008632:	4293      	cmp	r3, r2
 8008634:	d907      	bls.n	8008646 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8008636:	f009 f80d 	bl	8011654 <__errno>
 800863a:	4602      	mov	r2, r0
 800863c:	230c      	movs	r3, #12
 800863e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8008640:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008644:	e006      	b.n	8008654 <_sbrk+0x48>
	}

	heap_end += incr;
 8008646:	4b05      	ldr	r3, [pc, #20]	; (800865c <_sbrk+0x50>)
 8008648:	681a      	ldr	r2, [r3, #0]
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	4413      	add	r3, r2
 800864e:	4a03      	ldr	r2, [pc, #12]	; (800865c <_sbrk+0x50>)
 8008650:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8008652:	68fb      	ldr	r3, [r7, #12]
}
 8008654:	4618      	mov	r0, r3
 8008656:	3710      	adds	r7, #16
 8008658:	46bd      	mov	sp, r7
 800865a:	bd80      	pop	{r7, pc}
 800865c:	20002158 	.word	0x20002158
 8008660:	20002c80 	.word	0x20002c80

08008664 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8008664:	b480      	push	{r7}
 8008666:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8008668:	4b08      	ldr	r3, [pc, #32]	; (800868c <SystemInit+0x28>)
 800866a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800866e:	4a07      	ldr	r2, [pc, #28]	; (800868c <SystemInit+0x28>)
 8008670:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008674:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008678:	4b04      	ldr	r3, [pc, #16]	; (800868c <SystemInit+0x28>)
 800867a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800867e:	609a      	str	r2, [r3, #8]
#endif
}
 8008680:	bf00      	nop
 8008682:	46bd      	mov	sp, r7
 8008684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008688:	4770      	bx	lr
 800868a:	bf00      	nop
 800868c:	e000ed00 	.word	0xe000ed00

08008690 <MX_TIM1_Init>:
TIM_HandleTypeDef htim17;
DMA_HandleTypeDef hdma_tim2_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b09a      	sub	sp, #104	; 0x68
 8008694:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8008696:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800869a:	2224      	movs	r2, #36	; 0x24
 800869c:	2100      	movs	r1, #0
 800869e:	4618      	mov	r0, r3
 80086a0:	f009 f802 	bl	80116a8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80086a4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80086a8:	2200      	movs	r2, #0
 80086aa:	601a      	str	r2, [r3, #0]
 80086ac:	605a      	str	r2, [r3, #4]
 80086ae:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80086b0:	1d3b      	adds	r3, r7, #4
 80086b2:	2234      	movs	r2, #52	; 0x34
 80086b4:	2100      	movs	r1, #0
 80086b6:	4618      	mov	r0, r3
 80086b8:	f008 fff6 	bl	80116a8 <memset>

  htim1.Instance = TIM1;
 80086bc:	4b2a      	ldr	r3, [pc, #168]	; (8008768 <MX_TIM1_Init+0xd8>)
 80086be:	4a2b      	ldr	r2, [pc, #172]	; (800876c <MX_TIM1_Init+0xdc>)
 80086c0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80086c2:	4b29      	ldr	r3, [pc, #164]	; (8008768 <MX_TIM1_Init+0xd8>)
 80086c4:	2200      	movs	r2, #0
 80086c6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 80086c8:	4b27      	ldr	r3, [pc, #156]	; (8008768 <MX_TIM1_Init+0xd8>)
 80086ca:	2260      	movs	r2, #96	; 0x60
 80086cc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024;
 80086ce:	4b26      	ldr	r3, [pc, #152]	; (8008768 <MX_TIM1_Init+0xd8>)
 80086d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80086d4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80086d6:	4b24      	ldr	r3, [pc, #144]	; (8008768 <MX_TIM1_Init+0xd8>)
 80086d8:	2200      	movs	r2, #0
 80086da:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80086dc:	4b22      	ldr	r3, [pc, #136]	; (8008768 <MX_TIM1_Init+0xd8>)
 80086de:	2200      	movs	r2, #0
 80086e0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80086e2:	4b21      	ldr	r3, [pc, #132]	; (8008768 <MX_TIM1_Init+0xd8>)
 80086e4:	2280      	movs	r2, #128	; 0x80
 80086e6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI2;
 80086e8:	2302      	movs	r3, #2
 80086ea:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80086ec:	2300      	movs	r3, #0
 80086ee:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80086f0:	2301      	movs	r3, #1
 80086f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80086f4:	2300      	movs	r3, #0
 80086f6:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 80086f8:	2300      	movs	r3, #0
 80086fa:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80086fc:	2300      	movs	r3, #0
 80086fe:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8008700:	2301      	movs	r3, #1
 8008702:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8008704:	2300      	movs	r3, #0
 8008706:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8008708:	2300      	movs	r3, #0
 800870a:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800870c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008710:	4619      	mov	r1, r3
 8008712:	4815      	ldr	r0, [pc, #84]	; (8008768 <MX_TIM1_Init+0xd8>)
 8008714:	f005 fd94 	bl	800e240 <HAL_TIM_Encoder_Init>
 8008718:	4603      	mov	r3, r0
 800871a:	2b00      	cmp	r3, #0
 800871c:	d001      	beq.n	8008722 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800871e:	f7ff fd11 	bl	8008144 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8008722:	2320      	movs	r3, #32
 8008724:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8008726:	2300      	movs	r3, #0
 8008728:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800872a:	2300      	movs	r3, #0
 800872c:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800872e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008732:	4619      	mov	r1, r3
 8008734:	480c      	ldr	r0, [pc, #48]	; (8008768 <MX_TIM1_Init+0xd8>)
 8008736:	f007 fa17 	bl	800fb68 <HAL_TIMEx_MasterConfigSynchronization>
 800873a:	4603      	mov	r3, r0
 800873c:	2b00      	cmp	r3, #0
 800873e:	d001      	beq.n	8008744 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8008740:	f7ff fd00 	bl	8008144 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8008744:	2300      	movs	r3, #0
 8008746:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8008748:	2300      	movs	r3, #0
 800874a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800874c:	1d3b      	adds	r3, r7, #4
 800874e:	4619      	mov	r1, r3
 8008750:	4805      	ldr	r0, [pc, #20]	; (8008768 <MX_TIM1_Init+0xd8>)
 8008752:	f007 fa9f 	bl	800fc94 <HAL_TIMEx_ConfigBreakDeadTime>
 8008756:	4603      	mov	r3, r0
 8008758:	2b00      	cmp	r3, #0
 800875a:	d001      	beq.n	8008760 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 800875c:	f7ff fcf2 	bl	8008144 <Error_Handler>
  }

}
 8008760:	bf00      	nop
 8008762:	3768      	adds	r7, #104	; 0x68
 8008764:	46bd      	mov	sp, r7
 8008766:	bd80      	pop	{r7, pc}
 8008768:	20002b94 	.word	0x20002b94
 800876c:	40012c00 	.word	0x40012c00

08008770 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b08c      	sub	sp, #48	; 0x30
 8008774:	af00      	add	r7, sp, #0
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8008776:	f107 031c 	add.w	r3, r7, #28
 800877a:	2200      	movs	r2, #0
 800877c:	601a      	str	r2, [r3, #0]
 800877e:	605a      	str	r2, [r3, #4]
 8008780:	609a      	str	r2, [r3, #8]
 8008782:	60da      	str	r2, [r3, #12]
 8008784:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008786:	f107 0310 	add.w	r3, r7, #16
 800878a:	2200      	movs	r2, #0
 800878c:	601a      	str	r2, [r3, #0]
 800878e:	605a      	str	r2, [r3, #4]
 8008790:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8008792:	463b      	mov	r3, r7
 8008794:	2200      	movs	r2, #0
 8008796:	601a      	str	r2, [r3, #0]
 8008798:	605a      	str	r2, [r3, #4]
 800879a:	609a      	str	r2, [r3, #8]
 800879c:	60da      	str	r2, [r3, #12]

  htim2.Instance = TIM2;
 800879e:	4b2e      	ldr	r3, [pc, #184]	; (8008858 <MX_TIM2_Init+0xe8>)
 80087a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80087a4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 128;
 80087a6:	4b2c      	ldr	r3, [pc, #176]	; (8008858 <MX_TIM2_Init+0xe8>)
 80087a8:	2280      	movs	r2, #128	; 0x80
 80087aa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80087ac:	4b2a      	ldr	r3, [pc, #168]	; (8008858 <MX_TIM2_Init+0xe8>)
 80087ae:	2200      	movs	r2, #0
 80087b0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80087b2:	4b29      	ldr	r3, [pc, #164]	; (8008858 <MX_TIM2_Init+0xe8>)
 80087b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80087b8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80087ba:	4b27      	ldr	r3, [pc, #156]	; (8008858 <MX_TIM2_Init+0xe8>)
 80087bc:	2200      	movs	r2, #0
 80087be:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80087c0:	4b25      	ldr	r3, [pc, #148]	; (8008858 <MX_TIM2_Init+0xe8>)
 80087c2:	2280      	movs	r2, #128	; 0x80
 80087c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80087c6:	4824      	ldr	r0, [pc, #144]	; (8008858 <MX_TIM2_Init+0xe8>)
 80087c8:	f004 ff94 	bl	800d6f4 <HAL_TIM_Base_Init>
 80087cc:	4603      	mov	r3, r0
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d001      	beq.n	80087d6 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80087d2:	f7ff fcb7 	bl	8008144 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80087d6:	4820      	ldr	r0, [pc, #128]	; (8008858 <MX_TIM2_Init+0xe8>)
 80087d8:	f005 fa76 	bl	800dcc8 <HAL_TIM_IC_Init>
 80087dc:	4603      	mov	r3, r0
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d001      	beq.n	80087e6 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 80087e2:	f7ff fcaf 	bl	8008144 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80087e6:	2304      	movs	r3, #4
 80087e8:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80087ea:	2350      	movs	r3, #80	; 0x50
 80087ec:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80087ee:	2300      	movs	r3, #0
 80087f0:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 80087f2:	2300      	movs	r3, #0
 80087f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80087f6:	f107 031c 	add.w	r3, r7, #28
 80087fa:	4619      	mov	r1, r3
 80087fc:	4816      	ldr	r0, [pc, #88]	; (8008858 <MX_TIM2_Init+0xe8>)
 80087fe:	f006 f9d9 	bl	800ebb4 <HAL_TIM_SlaveConfigSynchro>
 8008802:	4603      	mov	r3, r0
 8008804:	2b00      	cmp	r3, #0
 8008806:	d001      	beq.n	800880c <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8008808:	f7ff fc9c 	bl	8008144 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800880c:	2320      	movs	r3, #32
 800880e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008810:	2300      	movs	r3, #0
 8008812:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8008814:	f107 0310 	add.w	r3, r7, #16
 8008818:	4619      	mov	r1, r3
 800881a:	480f      	ldr	r0, [pc, #60]	; (8008858 <MX_TIM2_Init+0xe8>)
 800881c:	f007 f9a4 	bl	800fb68 <HAL_TIMEx_MasterConfigSynchronization>
 8008820:	4603      	mov	r3, r0
 8008822:	2b00      	cmp	r3, #0
 8008824:	d001      	beq.n	800882a <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8008826:	f7ff fc8d 	bl	8008144 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800882a:	2300      	movs	r3, #0
 800882c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800882e:	2301      	movs	r3, #1
 8008830:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8008832:	2300      	movs	r3, #0
 8008834:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8008836:	2300      	movs	r3, #0
 8008838:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800883a:	463b      	mov	r3, r7
 800883c:	2200      	movs	r2, #0
 800883e:	4619      	mov	r1, r3
 8008840:	4805      	ldr	r0, [pc, #20]	; (8008858 <MX_TIM2_Init+0xe8>)
 8008842:	f005 ff22 	bl	800e68a <HAL_TIM_IC_ConfigChannel>
 8008846:	4603      	mov	r3, r0
 8008848:	2b00      	cmp	r3, #0
 800884a:	d001      	beq.n	8008850 <MX_TIM2_Init+0xe0>
  {
    Error_Handler();
 800884c:	f7ff fc7a 	bl	8008144 <Error_Handler>
  }

}
 8008850:	bf00      	nop
 8008852:	3730      	adds	r7, #48	; 0x30
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}
 8008858:	20002be0 	.word	0x20002be0

0800885c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b088      	sub	sp, #32
 8008860:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008862:	f107 0310 	add.w	r3, r7, #16
 8008866:	2200      	movs	r2, #0
 8008868:	601a      	str	r2, [r3, #0]
 800886a:	605a      	str	r2, [r3, #4]
 800886c:	609a      	str	r2, [r3, #8]
 800886e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008870:	1d3b      	adds	r3, r7, #4
 8008872:	2200      	movs	r2, #0
 8008874:	601a      	str	r2, [r3, #0]
 8008876:	605a      	str	r2, [r3, #4]
 8008878:	609a      	str	r2, [r3, #8]

  htim3.Instance = TIM3;
 800887a:	4b1d      	ldr	r3, [pc, #116]	; (80088f0 <MX_TIM3_Init+0x94>)
 800887c:	4a1d      	ldr	r2, [pc, #116]	; (80088f4 <MX_TIM3_Init+0x98>)
 800887e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8008880:	4b1b      	ldr	r3, [pc, #108]	; (80088f0 <MX_TIM3_Init+0x94>)
 8008882:	2200      	movs	r2, #0
 8008884:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8008886:	4b1a      	ldr	r3, [pc, #104]	; (80088f0 <MX_TIM3_Init+0x94>)
 8008888:	2210      	movs	r2, #16
 800888a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1;
 800888c:	4b18      	ldr	r3, [pc, #96]	; (80088f0 <MX_TIM3_Init+0x94>)
 800888e:	2201      	movs	r2, #1
 8008890:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8008892:	4b17      	ldr	r3, [pc, #92]	; (80088f0 <MX_TIM3_Init+0x94>)
 8008894:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008898:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800889a:	4b15      	ldr	r3, [pc, #84]	; (80088f0 <MX_TIM3_Init+0x94>)
 800889c:	2280      	movs	r2, #128	; 0x80
 800889e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80088a0:	4813      	ldr	r0, [pc, #76]	; (80088f0 <MX_TIM3_Init+0x94>)
 80088a2:	f004 ff27 	bl	800d6f4 <HAL_TIM_Base_Init>
 80088a6:	4603      	mov	r3, r0
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d001      	beq.n	80088b0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80088ac:	f7ff fc4a 	bl	8008144 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80088b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80088b4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80088b6:	f107 0310 	add.w	r3, r7, #16
 80088ba:	4619      	mov	r1, r3
 80088bc:	480c      	ldr	r0, [pc, #48]	; (80088f0 <MX_TIM3_Init+0x94>)
 80088be:	f006 f889 	bl	800e9d4 <HAL_TIM_ConfigClockSource>
 80088c2:	4603      	mov	r3, r0
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d001      	beq.n	80088cc <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80088c8:	f7ff fc3c 	bl	8008144 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80088cc:	2320      	movs	r3, #32
 80088ce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80088d0:	2300      	movs	r3, #0
 80088d2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80088d4:	1d3b      	adds	r3, r7, #4
 80088d6:	4619      	mov	r1, r3
 80088d8:	4805      	ldr	r0, [pc, #20]	; (80088f0 <MX_TIM3_Init+0x94>)
 80088da:	f007 f945 	bl	800fb68 <HAL_TIMEx_MasterConfigSynchronization>
 80088de:	4603      	mov	r3, r0
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d001      	beq.n	80088e8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80088e4:	f7ff fc2e 	bl	8008144 <Error_Handler>
  }

}
 80088e8:	bf00      	nop
 80088ea:	3720      	adds	r7, #32
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}
 80088f0:	200021d8 	.word	0x200021d8
 80088f4:	40000400 	.word	0x40000400

080088f8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b088      	sub	sp, #32
 80088fc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80088fe:	f107 0310 	add.w	r3, r7, #16
 8008902:	2200      	movs	r2, #0
 8008904:	601a      	str	r2, [r3, #0]
 8008906:	605a      	str	r2, [r3, #4]
 8008908:	609a      	str	r2, [r3, #8]
 800890a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800890c:	1d3b      	adds	r3, r7, #4
 800890e:	2200      	movs	r2, #0
 8008910:	601a      	str	r2, [r3, #0]
 8008912:	605a      	str	r2, [r3, #4]
 8008914:	609a      	str	r2, [r3, #8]

  htim5.Instance = TIM5;
 8008916:	4b1d      	ldr	r3, [pc, #116]	; (800898c <MX_TIM5_Init+0x94>)
 8008918:	4a1d      	ldr	r2, [pc, #116]	; (8008990 <MX_TIM5_Init+0x98>)
 800891a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800891c:	4b1b      	ldr	r3, [pc, #108]	; (800898c <MX_TIM5_Init+0x94>)
 800891e:	2200      	movs	r2, #0
 8008920:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008922:	4b1a      	ldr	r3, [pc, #104]	; (800898c <MX_TIM5_Init+0x94>)
 8008924:	2200      	movs	r2, #0
 8008926:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1024;
 8008928:	4b18      	ldr	r3, [pc, #96]	; (800898c <MX_TIM5_Init+0x94>)
 800892a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800892e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008930:	4b16      	ldr	r3, [pc, #88]	; (800898c <MX_TIM5_Init+0x94>)
 8008932:	2200      	movs	r2, #0
 8008934:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008936:	4b15      	ldr	r3, [pc, #84]	; (800898c <MX_TIM5_Init+0x94>)
 8008938:	2200      	movs	r2, #0
 800893a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800893c:	4813      	ldr	r0, [pc, #76]	; (800898c <MX_TIM5_Init+0x94>)
 800893e:	f004 fed9 	bl	800d6f4 <HAL_TIM_Base_Init>
 8008942:	4603      	mov	r3, r0
 8008944:	2b00      	cmp	r3, #0
 8008946:	d001      	beq.n	800894c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8008948:	f7ff fbfc 	bl	8008144 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800894c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008950:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8008952:	f107 0310 	add.w	r3, r7, #16
 8008956:	4619      	mov	r1, r3
 8008958:	480c      	ldr	r0, [pc, #48]	; (800898c <MX_TIM5_Init+0x94>)
 800895a:	f006 f83b 	bl	800e9d4 <HAL_TIM_ConfigClockSource>
 800895e:	4603      	mov	r3, r0
 8008960:	2b00      	cmp	r3, #0
 8008962:	d001      	beq.n	8008968 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8008964:	f7ff fbee 	bl	8008144 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008968:	2300      	movs	r3, #0
 800896a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800896c:	2300      	movs	r3, #0
 800896e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8008970:	1d3b      	adds	r3, r7, #4
 8008972:	4619      	mov	r1, r3
 8008974:	4805      	ldr	r0, [pc, #20]	; (800898c <MX_TIM5_Init+0x94>)
 8008976:	f007 f8f7 	bl	800fb68 <HAL_TIMEx_MasterConfigSynchronization>
 800897a:	4603      	mov	r3, r0
 800897c:	2b00      	cmp	r3, #0
 800897e:	d001      	beq.n	8008984 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8008980:	f7ff fbe0 	bl	8008144 <Error_Handler>
  }

}
 8008984:	bf00      	nop
 8008986:	3720      	adds	r7, #32
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}
 800898c:	20002b48 	.word	0x20002b48
 8008990:	40000c00 	.word	0x40000c00

08008994 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b094      	sub	sp, #80	; 0x50
 8008998:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800899a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800899e:	2200      	movs	r2, #0
 80089a0:	601a      	str	r2, [r3, #0]
 80089a2:	605a      	str	r2, [r3, #4]
 80089a4:	609a      	str	r2, [r3, #8]
 80089a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80089a8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80089ac:	2200      	movs	r2, #0
 80089ae:	601a      	str	r2, [r3, #0]
 80089b0:	605a      	str	r2, [r3, #4]
 80089b2:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80089b4:	463b      	mov	r3, r7
 80089b6:	2234      	movs	r2, #52	; 0x34
 80089b8:	2100      	movs	r1, #0
 80089ba:	4618      	mov	r0, r3
 80089bc:	f008 fe74 	bl	80116a8 <memset>

  htim8.Instance = TIM8;
 80089c0:	4b26      	ldr	r3, [pc, #152]	; (8008a5c <MX_TIM8_Init+0xc8>)
 80089c2:	4a27      	ldr	r2, [pc, #156]	; (8008a60 <MX_TIM8_Init+0xcc>)
 80089c4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80089c6:	4b25      	ldr	r3, [pc, #148]	; (8008a5c <MX_TIM8_Init+0xc8>)
 80089c8:	2200      	movs	r2, #0
 80089ca:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80089cc:	4b23      	ldr	r3, [pc, #140]	; (8008a5c <MX_TIM8_Init+0xc8>)
 80089ce:	2200      	movs	r2, #0
 80089d0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1;
 80089d2:	4b22      	ldr	r3, [pc, #136]	; (8008a5c <MX_TIM8_Init+0xc8>)
 80089d4:	2201      	movs	r2, #1
 80089d6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80089d8:	4b20      	ldr	r3, [pc, #128]	; (8008a5c <MX_TIM8_Init+0xc8>)
 80089da:	2200      	movs	r2, #0
 80089dc:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80089de:	4b1f      	ldr	r3, [pc, #124]	; (8008a5c <MX_TIM8_Init+0xc8>)
 80089e0:	2200      	movs	r2, #0
 80089e2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80089e4:	4b1d      	ldr	r3, [pc, #116]	; (8008a5c <MX_TIM8_Init+0xc8>)
 80089e6:	2280      	movs	r2, #128	; 0x80
 80089e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80089ea:	481c      	ldr	r0, [pc, #112]	; (8008a5c <MX_TIM8_Init+0xc8>)
 80089ec:	f004 fe82 	bl	800d6f4 <HAL_TIM_Base_Init>
 80089f0:	4603      	mov	r3, r0
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d001      	beq.n	80089fa <MX_TIM8_Init+0x66>
  {
    Error_Handler();
 80089f6:	f7ff fba5 	bl	8008144 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80089fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80089fe:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8008a00:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008a04:	4619      	mov	r1, r3
 8008a06:	4815      	ldr	r0, [pc, #84]	; (8008a5c <MX_TIM8_Init+0xc8>)
 8008a08:	f005 ffe4 	bl	800e9d4 <HAL_TIM_ConfigClockSource>
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d001      	beq.n	8008a16 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8008a12:	f7ff fb97 	bl	8008144 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8008a16:	2320      	movs	r3, #32
 8008a18:	637b      	str	r3, [r7, #52]	; 0x34
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008a1e:	2300      	movs	r3, #0
 8008a20:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8008a22:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008a26:	4619      	mov	r1, r3
 8008a28:	480c      	ldr	r0, [pc, #48]	; (8008a5c <MX_TIM8_Init+0xc8>)
 8008a2a:	f007 f89d 	bl	800fb68 <HAL_TIMEx_MasterConfigSynchronization>
 8008a2e:	4603      	mov	r3, r0
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d001      	beq.n	8008a38 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8008a34:	f7ff fb86 	bl	8008144 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8008a38:	2300      	movs	r3, #0
 8008a3a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8008a40:	463b      	mov	r3, r7
 8008a42:	4619      	mov	r1, r3
 8008a44:	4805      	ldr	r0, [pc, #20]	; (8008a5c <MX_TIM8_Init+0xc8>)
 8008a46:	f007 f925 	bl	800fc94 <HAL_TIMEx_ConfigBreakDeadTime>
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d001      	beq.n	8008a54 <MX_TIM8_Init+0xc0>
  {
    Error_Handler();
 8008a50:	f7ff fb78 	bl	8008144 <Error_Handler>
  }

}
 8008a54:	bf00      	nop
 8008a56:	3750      	adds	r7, #80	; 0x50
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}
 8008a5c:	20002a64 	.word	0x20002a64
 8008a60:	40013400 	.word	0x40013400

08008a64 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b088      	sub	sp, #32
 8008a68:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008a6a:	f107 0310 	add.w	r3, r7, #16
 8008a6e:	2200      	movs	r2, #0
 8008a70:	601a      	str	r2, [r3, #0]
 8008a72:	605a      	str	r2, [r3, #4]
 8008a74:	609a      	str	r2, [r3, #8]
 8008a76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008a78:	1d3b      	adds	r3, r7, #4
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	601a      	str	r2, [r3, #0]
 8008a7e:	605a      	str	r2, [r3, #4]
 8008a80:	609a      	str	r2, [r3, #8]

  htim15.Instance = TIM15;
 8008a82:	4b1f      	ldr	r3, [pc, #124]	; (8008b00 <MX_TIM15_Init+0x9c>)
 8008a84:	4a1f      	ldr	r2, [pc, #124]	; (8008b04 <MX_TIM15_Init+0xa0>)
 8008a86:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 1024;
 8008a88:	4b1d      	ldr	r3, [pc, #116]	; (8008b00 <MX_TIM15_Init+0x9c>)
 8008a8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008a8e:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008a90:	4b1b      	ldr	r3, [pc, #108]	; (8008b00 <MX_TIM15_Init+0x9c>)
 8008a92:	2200      	movs	r2, #0
 8008a94:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1024;
 8008a96:	4b1a      	ldr	r3, [pc, #104]	; (8008b00 <MX_TIM15_Init+0x9c>)
 8008a98:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008a9c:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008a9e:	4b18      	ldr	r3, [pc, #96]	; (8008b00 <MX_TIM15_Init+0x9c>)
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8008aa4:	4b16      	ldr	r3, [pc, #88]	; (8008b00 <MX_TIM15_Init+0x9c>)
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008aaa:	4b15      	ldr	r3, [pc, #84]	; (8008b00 <MX_TIM15_Init+0x9c>)
 8008aac:	2200      	movs	r2, #0
 8008aae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8008ab0:	4813      	ldr	r0, [pc, #76]	; (8008b00 <MX_TIM15_Init+0x9c>)
 8008ab2:	f004 fe1f 	bl	800d6f4 <HAL_TIM_Base_Init>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d001      	beq.n	8008ac0 <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 8008abc:	f7ff fb42 	bl	8008144 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008ac0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008ac4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8008ac6:	f107 0310 	add.w	r3, r7, #16
 8008aca:	4619      	mov	r1, r3
 8008acc:	480c      	ldr	r0, [pc, #48]	; (8008b00 <MX_TIM15_Init+0x9c>)
 8008ace:	f005 ff81 	bl	800e9d4 <HAL_TIM_ConfigClockSource>
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d001      	beq.n	8008adc <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8008ad8:	f7ff fb34 	bl	8008144 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008adc:	2300      	movs	r3, #0
 8008ade:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8008ae4:	1d3b      	adds	r3, r7, #4
 8008ae6:	4619      	mov	r1, r3
 8008ae8:	4805      	ldr	r0, [pc, #20]	; (8008b00 <MX_TIM15_Init+0x9c>)
 8008aea:	f007 f83d 	bl	800fb68 <HAL_TIMEx_MasterConfigSynchronization>
 8008aee:	4603      	mov	r3, r0
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d001      	beq.n	8008af8 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8008af4:	f7ff fb26 	bl	8008144 <Error_Handler>
  }

}
 8008af8:	bf00      	nop
 8008afa:	3720      	adds	r7, #32
 8008afc:	46bd      	mov	sp, r7
 8008afe:	bd80      	pop	{r7, pc}
 8008b00:	20002ab0 	.word	0x20002ab0
 8008b04:	40014000 	.word	0x40014000

08008b08 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 8008b0c:	4b10      	ldr	r3, [pc, #64]	; (8008b50 <MX_TIM16_Init+0x48>)
 8008b0e:	4a11      	ldr	r2, [pc, #68]	; (8008b54 <MX_TIM16_Init+0x4c>)
 8008b10:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 65535;
 8008b12:	4b0f      	ldr	r3, [pc, #60]	; (8008b50 <MX_TIM16_Init+0x48>)
 8008b14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008b18:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008b1a:	4b0d      	ldr	r3, [pc, #52]	; (8008b50 <MX_TIM16_Init+0x48>)
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8008b20:	4b0b      	ldr	r3, [pc, #44]	; (8008b50 <MX_TIM16_Init+0x48>)
 8008b22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008b26:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008b28:	4b09      	ldr	r3, [pc, #36]	; (8008b50 <MX_TIM16_Init+0x48>)
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8008b2e:	4b08      	ldr	r3, [pc, #32]	; (8008b50 <MX_TIM16_Init+0x48>)
 8008b30:	2200      	movs	r2, #0
 8008b32:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008b34:	4b06      	ldr	r3, [pc, #24]	; (8008b50 <MX_TIM16_Init+0x48>)
 8008b36:	2200      	movs	r2, #0
 8008b38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8008b3a:	4805      	ldr	r0, [pc, #20]	; (8008b50 <MX_TIM16_Init+0x48>)
 8008b3c:	f004 fdda 	bl	800d6f4 <HAL_TIM_Base_Init>
 8008b40:	4603      	mov	r3, r0
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d001      	beq.n	8008b4a <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8008b46:	f7ff fafd 	bl	8008144 <Error_Handler>
  }

}
 8008b4a:	bf00      	nop
 8008b4c:	bd80      	pop	{r7, pc}
 8008b4e:	bf00      	nop
 8008b50:	20002c2c 	.word	0x20002c2c
 8008b54:	40014400 	.word	0x40014400

08008b58 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	af00      	add	r7, sp, #0

  htim17.Instance = TIM17;
 8008b5c:	4b10      	ldr	r3, [pc, #64]	; (8008ba0 <MX_TIM17_Init+0x48>)
 8008b5e:	4a11      	ldr	r2, [pc, #68]	; (8008ba4 <MX_TIM17_Init+0x4c>)
 8008b60:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 1024;
 8008b62:	4b0f      	ldr	r3, [pc, #60]	; (8008ba0 <MX_TIM17_Init+0x48>)
 8008b64:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008b68:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008b6a:	4b0d      	ldr	r3, [pc, #52]	; (8008ba0 <MX_TIM17_Init+0x48>)
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1024;
 8008b70:	4b0b      	ldr	r3, [pc, #44]	; (8008ba0 <MX_TIM17_Init+0x48>)
 8008b72:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008b76:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008b78:	4b09      	ldr	r3, [pc, #36]	; (8008ba0 <MX_TIM17_Init+0x48>)
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8008b7e:	4b08      	ldr	r3, [pc, #32]	; (8008ba0 <MX_TIM17_Init+0x48>)
 8008b80:	2200      	movs	r2, #0
 8008b82:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008b84:	4b06      	ldr	r3, [pc, #24]	; (8008ba0 <MX_TIM17_Init+0x48>)
 8008b86:	2200      	movs	r2, #0
 8008b88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8008b8a:	4805      	ldr	r0, [pc, #20]	; (8008ba0 <MX_TIM17_Init+0x48>)
 8008b8c:	f004 fdb2 	bl	800d6f4 <HAL_TIM_Base_Init>
 8008b90:	4603      	mov	r3, r0
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d001      	beq.n	8008b9a <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 8008b96:	f7ff fad5 	bl	8008144 <Error_Handler>
  }

}
 8008b9a:	bf00      	nop
 8008b9c:	bd80      	pop	{r7, pc}
 8008b9e:	bf00      	nop
 8008ba0:	20002afc 	.word	0x20002afc
 8008ba4:	40014800 	.word	0x40014800

08008ba8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b08a      	sub	sp, #40	; 0x28
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008bb0:	f107 0314 	add.w	r3, r7, #20
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	601a      	str	r2, [r3, #0]
 8008bb8:	605a      	str	r2, [r3, #4]
 8008bba:	609a      	str	r2, [r3, #8]
 8008bbc:	60da      	str	r2, [r3, #12]
 8008bbe:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	4a1f      	ldr	r2, [pc, #124]	; (8008c44 <HAL_TIM_Encoder_MspInit+0x9c>)
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	d137      	bne.n	8008c3a <HAL_TIM_Encoder_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8008bca:	4b1f      	ldr	r3, [pc, #124]	; (8008c48 <HAL_TIM_Encoder_MspInit+0xa0>)
 8008bcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008bce:	4a1e      	ldr	r2, [pc, #120]	; (8008c48 <HAL_TIM_Encoder_MspInit+0xa0>)
 8008bd0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008bd4:	6613      	str	r3, [r2, #96]	; 0x60
 8008bd6:	4b1c      	ldr	r3, [pc, #112]	; (8008c48 <HAL_TIM_Encoder_MspInit+0xa0>)
 8008bd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008bda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008bde:	613b      	str	r3, [r7, #16]
 8008be0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008be2:	4b19      	ldr	r3, [pc, #100]	; (8008c48 <HAL_TIM_Encoder_MspInit+0xa0>)
 8008be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008be6:	4a18      	ldr	r2, [pc, #96]	; (8008c48 <HAL_TIM_Encoder_MspInit+0xa0>)
 8008be8:	f043 0304 	orr.w	r3, r3, #4
 8008bec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008bee:	4b16      	ldr	r3, [pc, #88]	; (8008c48 <HAL_TIM_Encoder_MspInit+0xa0>)
 8008bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008bf2:	f003 0304 	and.w	r3, r3, #4
 8008bf6:	60fb      	str	r3, [r7, #12]
 8008bf8:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8008bfa:	2303      	movs	r3, #3
 8008bfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008bfe:	2302      	movs	r3, #2
 8008c00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c02:	2300      	movs	r3, #0
 8008c04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008c06:	2300      	movs	r3, #0
 8008c08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8008c0a:	2302      	movs	r3, #2
 8008c0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008c0e:	f107 0314 	add.w	r3, r7, #20
 8008c12:	4619      	mov	r1, r3
 8008c14:	480d      	ldr	r0, [pc, #52]	; (8008c4c <HAL_TIM_Encoder_MspInit+0xa4>)
 8008c16:	f003 fa67 	bl	800c0e8 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	2100      	movs	r1, #0
 8008c1e:	2018      	movs	r0, #24
 8008c20:	f002 facf 	bl	800b1c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8008c24:	2018      	movs	r0, #24
 8008c26:	f002 fae6 	bl	800b1f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 1, 0);
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	2101      	movs	r1, #1
 8008c2e:	201a      	movs	r0, #26
 8008c30:	f002 fac7 	bl	800b1c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8008c34:	201a      	movs	r0, #26
 8008c36:	f002 fade 	bl	800b1f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8008c3a:	bf00      	nop
 8008c3c:	3728      	adds	r7, #40	; 0x28
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}
 8008c42:	bf00      	nop
 8008c44:	40012c00 	.word	0x40012c00
 8008c48:	40021000 	.word	0x40021000
 8008c4c:	48000800 	.word	0x48000800

08008c50 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b090      	sub	sp, #64	; 0x40
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008c58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	601a      	str	r2, [r3, #0]
 8008c60:	605a      	str	r2, [r3, #4]
 8008c62:	609a      	str	r2, [r3, #8]
 8008c64:	60da      	str	r2, [r3, #12]
 8008c66:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c70:	d154      	bne.n	8008d1c <HAL_TIM_Base_MspInit+0xcc>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8008c72:	4b72      	ldr	r3, [pc, #456]	; (8008e3c <HAL_TIM_Base_MspInit+0x1ec>)
 8008c74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c76:	4a71      	ldr	r2, [pc, #452]	; (8008e3c <HAL_TIM_Base_MspInit+0x1ec>)
 8008c78:	f043 0301 	orr.w	r3, r3, #1
 8008c7c:	6593      	str	r3, [r2, #88]	; 0x58
 8008c7e:	4b6f      	ldr	r3, [pc, #444]	; (8008e3c <HAL_TIM_Base_MspInit+0x1ec>)
 8008c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c82:	f003 0301 	and.w	r3, r3, #1
 8008c86:	62bb      	str	r3, [r7, #40]	; 0x28
 8008c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008c8a:	4b6c      	ldr	r3, [pc, #432]	; (8008e3c <HAL_TIM_Base_MspInit+0x1ec>)
 8008c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c8e:	4a6b      	ldr	r2, [pc, #428]	; (8008e3c <HAL_TIM_Base_MspInit+0x1ec>)
 8008c90:	f043 0301 	orr.w	r3, r3, #1
 8008c94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008c96:	4b69      	ldr	r3, [pc, #420]	; (8008e3c <HAL_TIM_Base_MspInit+0x1ec>)
 8008c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c9a:	f003 0301 	and.w	r3, r3, #1
 8008c9e:	627b      	str	r3, [r7, #36]	; 0x24
 8008ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ca6:	2302      	movs	r3, #2
 8008ca8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008caa:	2300      	movs	r3, #0
 8008cac:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008cae:	2300      	movs	r3, #0
 8008cb0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8008cb2:	2301      	movs	r3, #1
 8008cb4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008cb6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008cba:	4619      	mov	r1, r3
 8008cbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008cc0:	f003 fa12 	bl	800c0e8 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel4;
 8008cc4:	4b5e      	ldr	r3, [pc, #376]	; (8008e40 <HAL_TIM_Base_MspInit+0x1f0>)
 8008cc6:	4a5f      	ldr	r2, [pc, #380]	; (8008e44 <HAL_TIM_Base_MspInit+0x1f4>)
 8008cc8:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_TIM2_CH1;
 8008cca:	4b5d      	ldr	r3, [pc, #372]	; (8008e40 <HAL_TIM_Base_MspInit+0x1f0>)
 8008ccc:	2238      	movs	r2, #56	; 0x38
 8008cce:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008cd0:	4b5b      	ldr	r3, [pc, #364]	; (8008e40 <HAL_TIM_Base_MspInit+0x1f0>)
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8008cd6:	4b5a      	ldr	r3, [pc, #360]	; (8008e40 <HAL_TIM_Base_MspInit+0x1f0>)
 8008cd8:	2200      	movs	r2, #0
 8008cda:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8008cdc:	4b58      	ldr	r3, [pc, #352]	; (8008e40 <HAL_TIM_Base_MspInit+0x1f0>)
 8008cde:	2280      	movs	r2, #128	; 0x80
 8008ce0:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8008ce2:	4b57      	ldr	r3, [pc, #348]	; (8008e40 <HAL_TIM_Base_MspInit+0x1f0>)
 8008ce4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008ce8:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8008cea:	4b55      	ldr	r3, [pc, #340]	; (8008e40 <HAL_TIM_Base_MspInit+0x1f0>)
 8008cec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008cf0:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8008cf2:	4b53      	ldr	r3, [pc, #332]	; (8008e40 <HAL_TIM_Base_MspInit+0x1f0>)
 8008cf4:	2220      	movs	r2, #32
 8008cf6:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8008cf8:	4b51      	ldr	r3, [pc, #324]	; (8008e40 <HAL_TIM_Base_MspInit+0x1f0>)
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8008cfe:	4850      	ldr	r0, [pc, #320]	; (8008e40 <HAL_TIM_Base_MspInit+0x1f0>)
 8008d00:	f002 fec0 	bl	800ba84 <HAL_DMA_Init>
 8008d04:	4603      	mov	r3, r0
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d001      	beq.n	8008d0e <HAL_TIM_Base_MspInit+0xbe>
    {
      Error_Handler();
 8008d0a:	f7ff fa1b 	bl	8008144 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	4a4b      	ldr	r2, [pc, #300]	; (8008e40 <HAL_TIM_Base_MspInit+0x1f0>)
 8008d12:	625a      	str	r2, [r3, #36]	; 0x24
 8008d14:	4a4a      	ldr	r2, [pc, #296]	; (8008e40 <HAL_TIM_Base_MspInit+0x1f0>)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8008d1a:	e08a      	b.n	8008e32 <HAL_TIM_Base_MspInit+0x1e2>
  else if(tim_baseHandle->Instance==TIM3)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	4a49      	ldr	r2, [pc, #292]	; (8008e48 <HAL_TIM_Base_MspInit+0x1f8>)
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d114      	bne.n	8008d50 <HAL_TIM_Base_MspInit+0x100>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8008d26:	4b45      	ldr	r3, [pc, #276]	; (8008e3c <HAL_TIM_Base_MspInit+0x1ec>)
 8008d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d2a:	4a44      	ldr	r2, [pc, #272]	; (8008e3c <HAL_TIM_Base_MspInit+0x1ec>)
 8008d2c:	f043 0302 	orr.w	r3, r3, #2
 8008d30:	6593      	str	r3, [r2, #88]	; 0x58
 8008d32:	4b42      	ldr	r3, [pc, #264]	; (8008e3c <HAL_TIM_Base_MspInit+0x1ec>)
 8008d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d36:	f003 0302 	and.w	r3, r3, #2
 8008d3a:	623b      	str	r3, [r7, #32]
 8008d3c:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8008d3e:	2200      	movs	r2, #0
 8008d40:	2100      	movs	r1, #0
 8008d42:	201d      	movs	r0, #29
 8008d44:	f002 fa3d 	bl	800b1c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8008d48:	201d      	movs	r0, #29
 8008d4a:	f002 fa54 	bl	800b1f6 <HAL_NVIC_EnableIRQ>
}
 8008d4e:	e070      	b.n	8008e32 <HAL_TIM_Base_MspInit+0x1e2>
  else if(tim_baseHandle->Instance==TIM5)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	4a3d      	ldr	r2, [pc, #244]	; (8008e4c <HAL_TIM_Base_MspInit+0x1fc>)
 8008d56:	4293      	cmp	r3, r2
 8008d58:	d114      	bne.n	8008d84 <HAL_TIM_Base_MspInit+0x134>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8008d5a:	4b38      	ldr	r3, [pc, #224]	; (8008e3c <HAL_TIM_Base_MspInit+0x1ec>)
 8008d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d5e:	4a37      	ldr	r2, [pc, #220]	; (8008e3c <HAL_TIM_Base_MspInit+0x1ec>)
 8008d60:	f043 0308 	orr.w	r3, r3, #8
 8008d64:	6593      	str	r3, [r2, #88]	; 0x58
 8008d66:	4b35      	ldr	r3, [pc, #212]	; (8008e3c <HAL_TIM_Base_MspInit+0x1ec>)
 8008d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d6a:	f003 0308 	and.w	r3, r3, #8
 8008d6e:	61fb      	str	r3, [r7, #28]
 8008d70:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM5_IRQn, 2, 0);
 8008d72:	2200      	movs	r2, #0
 8008d74:	2102      	movs	r1, #2
 8008d76:	2032      	movs	r0, #50	; 0x32
 8008d78:	f002 fa23 	bl	800b1c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8008d7c:	2032      	movs	r0, #50	; 0x32
 8008d7e:	f002 fa3a 	bl	800b1f6 <HAL_NVIC_EnableIRQ>
}
 8008d82:	e056      	b.n	8008e32 <HAL_TIM_Base_MspInit+0x1e2>
  else if(tim_baseHandle->Instance==TIM8)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	4a31      	ldr	r2, [pc, #196]	; (8008e50 <HAL_TIM_Base_MspInit+0x200>)
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	d10c      	bne.n	8008da8 <HAL_TIM_Base_MspInit+0x158>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8008d8e:	4b2b      	ldr	r3, [pc, #172]	; (8008e3c <HAL_TIM_Base_MspInit+0x1ec>)
 8008d90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d92:	4a2a      	ldr	r2, [pc, #168]	; (8008e3c <HAL_TIM_Base_MspInit+0x1ec>)
 8008d94:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008d98:	6613      	str	r3, [r2, #96]	; 0x60
 8008d9a:	4b28      	ldr	r3, [pc, #160]	; (8008e3c <HAL_TIM_Base_MspInit+0x1ec>)
 8008d9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008da2:	61bb      	str	r3, [r7, #24]
 8008da4:	69bb      	ldr	r3, [r7, #24]
}
 8008da6:	e044      	b.n	8008e32 <HAL_TIM_Base_MspInit+0x1e2>
  else if(tim_baseHandle->Instance==TIM15)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	4a29      	ldr	r2, [pc, #164]	; (8008e54 <HAL_TIM_Base_MspInit+0x204>)
 8008dae:	4293      	cmp	r3, r2
 8008db0:	d114      	bne.n	8008ddc <HAL_TIM_Base_MspInit+0x18c>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8008db2:	4b22      	ldr	r3, [pc, #136]	; (8008e3c <HAL_TIM_Base_MspInit+0x1ec>)
 8008db4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008db6:	4a21      	ldr	r2, [pc, #132]	; (8008e3c <HAL_TIM_Base_MspInit+0x1ec>)
 8008db8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008dbc:	6613      	str	r3, [r2, #96]	; 0x60
 8008dbe:	4b1f      	ldr	r3, [pc, #124]	; (8008e3c <HAL_TIM_Base_MspInit+0x1ec>)
 8008dc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008dc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008dc6:	617b      	str	r3, [r7, #20]
 8008dc8:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8008dca:	2200      	movs	r2, #0
 8008dcc:	2100      	movs	r1, #0
 8008dce:	2018      	movs	r0, #24
 8008dd0:	f002 f9f7 	bl	800b1c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8008dd4:	2018      	movs	r0, #24
 8008dd6:	f002 fa0e 	bl	800b1f6 <HAL_NVIC_EnableIRQ>
}
 8008dda:	e02a      	b.n	8008e32 <HAL_TIM_Base_MspInit+0x1e2>
  else if(tim_baseHandle->Instance==TIM16)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	4a1d      	ldr	r2, [pc, #116]	; (8008e58 <HAL_TIM_Base_MspInit+0x208>)
 8008de2:	4293      	cmp	r3, r2
 8008de4:	d10c      	bne.n	8008e00 <HAL_TIM_Base_MspInit+0x1b0>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8008de6:	4b15      	ldr	r3, [pc, #84]	; (8008e3c <HAL_TIM_Base_MspInit+0x1ec>)
 8008de8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008dea:	4a14      	ldr	r2, [pc, #80]	; (8008e3c <HAL_TIM_Base_MspInit+0x1ec>)
 8008dec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008df0:	6613      	str	r3, [r2, #96]	; 0x60
 8008df2:	4b12      	ldr	r3, [pc, #72]	; (8008e3c <HAL_TIM_Base_MspInit+0x1ec>)
 8008df4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008dfa:	613b      	str	r3, [r7, #16]
 8008dfc:	693b      	ldr	r3, [r7, #16]
}
 8008dfe:	e018      	b.n	8008e32 <HAL_TIM_Base_MspInit+0x1e2>
  else if(tim_baseHandle->Instance==TIM17)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	4a15      	ldr	r2, [pc, #84]	; (8008e5c <HAL_TIM_Base_MspInit+0x20c>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d113      	bne.n	8008e32 <HAL_TIM_Base_MspInit+0x1e2>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8008e0a:	4b0c      	ldr	r3, [pc, #48]	; (8008e3c <HAL_TIM_Base_MspInit+0x1ec>)
 8008e0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e0e:	4a0b      	ldr	r2, [pc, #44]	; (8008e3c <HAL_TIM_Base_MspInit+0x1ec>)
 8008e10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008e14:	6613      	str	r3, [r2, #96]	; 0x60
 8008e16:	4b09      	ldr	r3, [pc, #36]	; (8008e3c <HAL_TIM_Base_MspInit+0x1ec>)
 8008e18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008e1e:	60fb      	str	r3, [r7, #12]
 8008e20:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 1, 0);
 8008e22:	2200      	movs	r2, #0
 8008e24:	2101      	movs	r1, #1
 8008e26:	201a      	movs	r0, #26
 8008e28:	f002 f9cb 	bl	800b1c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8008e2c:	201a      	movs	r0, #26
 8008e2e:	f002 f9e2 	bl	800b1f6 <HAL_NVIC_EnableIRQ>
}
 8008e32:	bf00      	nop
 8008e34:	3740      	adds	r7, #64	; 0x40
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bd80      	pop	{r7, pc}
 8008e3a:	bf00      	nop
 8008e3c:	40021000 	.word	0x40021000
 8008e40:	20002a04 	.word	0x20002a04
 8008e44:	40020044 	.word	0x40020044
 8008e48:	40000400 	.word	0x40000400
 8008e4c:	40000c00 	.word	0x40000c00
 8008e50:	40013400 	.word	0x40013400
 8008e54:	40014000 	.word	0x40014000
 8008e58:	40014400 	.word	0x40014400
 8008e5c:	40014800 	.word	0x40014800

08008e60 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8008e60:	480d      	ldr	r0, [pc, #52]	; (8008e98 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8008e62:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008e64:	480d      	ldr	r0, [pc, #52]	; (8008e9c <LoopForever+0x6>)
  ldr r1, =_edata
 8008e66:	490e      	ldr	r1, [pc, #56]	; (8008ea0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8008e68:	4a0e      	ldr	r2, [pc, #56]	; (8008ea4 <LoopForever+0xe>)
  movs r3, #0
 8008e6a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8008e6c:	e002      	b.n	8008e74 <LoopCopyDataInit>

08008e6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008e6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008e70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008e72:	3304      	adds	r3, #4

08008e74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008e74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008e76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008e78:	d3f9      	bcc.n	8008e6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008e7a:	4a0b      	ldr	r2, [pc, #44]	; (8008ea8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8008e7c:	4c0b      	ldr	r4, [pc, #44]	; (8008eac <LoopForever+0x16>)
  movs r3, #0
 8008e7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008e80:	e001      	b.n	8008e86 <LoopFillZerobss>

08008e82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008e82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008e84:	3204      	adds	r2, #4

08008e86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008e86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008e88:	d3fb      	bcc.n	8008e82 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8008e8a:	f7ff fbeb 	bl	8008664 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008e8e:	f008 fbe7 	bl	8011660 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8008e92:	f7ff f897 	bl	8007fc4 <main>

08008e96 <LoopForever>:

LoopForever:
    b LoopForever
 8008e96:	e7fe      	b.n	8008e96 <LoopForever>
  ldr   r0, =_estack
 8008e98:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8008e9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008ea0:	20002088 	.word	0x20002088
  ldr r2, =_sidata
 8008ea4:	08016bf0 	.word	0x08016bf0
  ldr r2, =_sbss
 8008ea8:	20002088 	.word	0x20002088
  ldr r4, =_ebss
 8008eac:	20002c80 	.word	0x20002c80

08008eb0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8008eb0:	e7fe      	b.n	8008eb0 <ADC1_2_IRQHandler>

08008eb2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008eb2:	b580      	push	{r7, lr}
 8008eb4:	b082      	sub	sp, #8
 8008eb6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8008eb8:	2300      	movs	r3, #0
 8008eba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008ebc:	2003      	movs	r0, #3
 8008ebe:	f002 f975 	bl	800b1ac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008ec2:	2000      	movs	r0, #0
 8008ec4:	f000 f80e 	bl	8008ee4 <HAL_InitTick>
 8008ec8:	4603      	mov	r3, r0
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d002      	beq.n	8008ed4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8008ece:	2301      	movs	r3, #1
 8008ed0:	71fb      	strb	r3, [r7, #7]
 8008ed2:	e001      	b.n	8008ed8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8008ed4:	f7ff fa06 	bl	80082e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8008ed8:	79fb      	ldrb	r3, [r7, #7]

}
 8008eda:	4618      	mov	r0, r3
 8008edc:	3708      	adds	r7, #8
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}
	...

08008ee4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b084      	sub	sp, #16
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8008eec:	2300      	movs	r3, #0
 8008eee:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8008ef0:	4b16      	ldr	r3, [pc, #88]	; (8008f4c <HAL_InitTick+0x68>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d022      	beq.n	8008f3e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8008ef8:	4b15      	ldr	r3, [pc, #84]	; (8008f50 <HAL_InitTick+0x6c>)
 8008efa:	681a      	ldr	r2, [r3, #0]
 8008efc:	4b13      	ldr	r3, [pc, #76]	; (8008f4c <HAL_InitTick+0x68>)
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008f04:	fbb1 f3f3 	udiv	r3, r1, r3
 8008f08:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	f002 f98e 	bl	800b22e <HAL_SYSTICK_Config>
 8008f12:	4603      	mov	r3, r0
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d10f      	bne.n	8008f38 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2b0f      	cmp	r3, #15
 8008f1c:	d809      	bhi.n	8008f32 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008f1e:	2200      	movs	r2, #0
 8008f20:	6879      	ldr	r1, [r7, #4]
 8008f22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f26:	f002 f94c 	bl	800b1c2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8008f2a:	4a0a      	ldr	r2, [pc, #40]	; (8008f54 <HAL_InitTick+0x70>)
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	6013      	str	r3, [r2, #0]
 8008f30:	e007      	b.n	8008f42 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8008f32:	2301      	movs	r3, #1
 8008f34:	73fb      	strb	r3, [r7, #15]
 8008f36:	e004      	b.n	8008f42 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8008f38:	2301      	movs	r3, #1
 8008f3a:	73fb      	strb	r3, [r7, #15]
 8008f3c:	e001      	b.n	8008f42 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8008f3e:	2301      	movs	r3, #1
 8008f40:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8008f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f44:	4618      	mov	r0, r3
 8008f46:	3710      	adds	r7, #16
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	bd80      	pop	{r7, pc}
 8008f4c:	20000eb8 	.word	0x20000eb8
 8008f50:	20000eb0 	.word	0x20000eb0
 8008f54:	20000eb4 	.word	0x20000eb4

08008f58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008f58:	b480      	push	{r7}
 8008f5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008f5c:	4b05      	ldr	r3, [pc, #20]	; (8008f74 <HAL_IncTick+0x1c>)
 8008f5e:	681a      	ldr	r2, [r3, #0]
 8008f60:	4b05      	ldr	r3, [pc, #20]	; (8008f78 <HAL_IncTick+0x20>)
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	4413      	add	r3, r2
 8008f66:	4a03      	ldr	r2, [pc, #12]	; (8008f74 <HAL_IncTick+0x1c>)
 8008f68:	6013      	str	r3, [r2, #0]
}
 8008f6a:	bf00      	nop
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f72:	4770      	bx	lr
 8008f74:	20002c78 	.word	0x20002c78
 8008f78:	20000eb8 	.word	0x20000eb8

08008f7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008f7c:	b480      	push	{r7}
 8008f7e:	af00      	add	r7, sp, #0
  return uwTick;
 8008f80:	4b03      	ldr	r3, [pc, #12]	; (8008f90 <HAL_GetTick+0x14>)
 8008f82:	681b      	ldr	r3, [r3, #0]
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	46bd      	mov	sp, r7
 8008f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8c:	4770      	bx	lr
 8008f8e:	bf00      	nop
 8008f90:	20002c78 	.word	0x20002c78

08008f94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b084      	sub	sp, #16
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008f9c:	f7ff ffee 	bl	8008f7c <HAL_GetTick>
 8008fa0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008fac:	d004      	beq.n	8008fb8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8008fae:	4b09      	ldr	r3, [pc, #36]	; (8008fd4 <HAL_Delay+0x40>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	68fa      	ldr	r2, [r7, #12]
 8008fb4:	4413      	add	r3, r2
 8008fb6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008fb8:	bf00      	nop
 8008fba:	f7ff ffdf 	bl	8008f7c <HAL_GetTick>
 8008fbe:	4602      	mov	r2, r0
 8008fc0:	68bb      	ldr	r3, [r7, #8]
 8008fc2:	1ad3      	subs	r3, r2, r3
 8008fc4:	68fa      	ldr	r2, [r7, #12]
 8008fc6:	429a      	cmp	r2, r3
 8008fc8:	d8f7      	bhi.n	8008fba <HAL_Delay+0x26>
  {
  }
}
 8008fca:	bf00      	nop
 8008fcc:	3710      	adds	r7, #16
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}
 8008fd2:	bf00      	nop
 8008fd4:	20000eb8 	.word	0x20000eb8

08008fd8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8008fd8:	b480      	push	{r7}
 8008fda:	b083      	sub	sp, #12
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
 8008fe0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	689b      	ldr	r3, [r3, #8]
 8008fe6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	431a      	orrs	r2, r3
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	609a      	str	r2, [r3, #8]
}
 8008ff2:	bf00      	nop
 8008ff4:	370c      	adds	r7, #12
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffc:	4770      	bx	lr

08008ffe <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8008ffe:	b480      	push	{r7}
 8009000:	b083      	sub	sp, #12
 8009002:	af00      	add	r7, sp, #0
 8009004:	6078      	str	r0, [r7, #4]
 8009006:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	689b      	ldr	r3, [r3, #8]
 800900c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	431a      	orrs	r2, r3
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	609a      	str	r2, [r3, #8]
}
 8009018:	bf00      	nop
 800901a:	370c      	adds	r7, #12
 800901c:	46bd      	mov	sp, r7
 800901e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009022:	4770      	bx	lr

08009024 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8009024:	b480      	push	{r7}
 8009026:	b083      	sub	sp, #12
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	689b      	ldr	r3, [r3, #8]
 8009030:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8009034:	4618      	mov	r0, r3
 8009036:	370c      	adds	r7, #12
 8009038:	46bd      	mov	sp, r7
 800903a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903e:	4770      	bx	lr

08009040 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8009040:	b490      	push	{r4, r7}
 8009042:	b084      	sub	sp, #16
 8009044:	af00      	add	r7, sp, #0
 8009046:	60f8      	str	r0, [r7, #12]
 8009048:	60b9      	str	r1, [r7, #8]
 800904a:	607a      	str	r2, [r7, #4]
 800904c:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	3360      	adds	r3, #96	; 0x60
 8009052:	461a      	mov	r2, r3
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	009b      	lsls	r3, r3, #2
 8009058:	4413      	add	r3, r2
 800905a:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800905c:	6822      	ldr	r2, [r4, #0]
 800905e:	4b08      	ldr	r3, [pc, #32]	; (8009080 <LL_ADC_SetOffset+0x40>)
 8009060:	4013      	ands	r3, r2
 8009062:	687a      	ldr	r2, [r7, #4]
 8009064:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8009068:	683a      	ldr	r2, [r7, #0]
 800906a:	430a      	orrs	r2, r1
 800906c:	4313      	orrs	r3, r2
 800906e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009072:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8009074:	bf00      	nop
 8009076:	3710      	adds	r7, #16
 8009078:	46bd      	mov	sp, r7
 800907a:	bc90      	pop	{r4, r7}
 800907c:	4770      	bx	lr
 800907e:	bf00      	nop
 8009080:	03fff000 	.word	0x03fff000

08009084 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8009084:	b490      	push	{r4, r7}
 8009086:	b082      	sub	sp, #8
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
 800908c:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	3360      	adds	r3, #96	; 0x60
 8009092:	461a      	mov	r2, r3
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	009b      	lsls	r3, r3, #2
 8009098:	4413      	add	r3, r2
 800909a:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800909c:	6823      	ldr	r3, [r4, #0]
 800909e:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80090a2:	4618      	mov	r0, r3
 80090a4:	3708      	adds	r7, #8
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bc90      	pop	{r4, r7}
 80090aa:	4770      	bx	lr

080090ac <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80090ac:	b490      	push	{r4, r7}
 80090ae:	b084      	sub	sp, #16
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	60f8      	str	r0, [r7, #12]
 80090b4:	60b9      	str	r1, [r7, #8]
 80090b6:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	3360      	adds	r3, #96	; 0x60
 80090bc:	461a      	mov	r2, r3
 80090be:	68bb      	ldr	r3, [r7, #8]
 80090c0:	009b      	lsls	r3, r3, #2
 80090c2:	4413      	add	r3, r2
 80090c4:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80090c6:	6823      	ldr	r3, [r4, #0]
 80090c8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	4313      	orrs	r3, r2
 80090d0:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80090d2:	bf00      	nop
 80090d4:	3710      	adds	r7, #16
 80090d6:	46bd      	mov	sp, r7
 80090d8:	bc90      	pop	{r4, r7}
 80090da:	4770      	bx	lr

080090dc <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80090dc:	b490      	push	{r4, r7}
 80090de:	b084      	sub	sp, #16
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	60f8      	str	r0, [r7, #12]
 80090e4:	60b9      	str	r1, [r7, #8]
 80090e6:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	3360      	adds	r3, #96	; 0x60
 80090ec:	461a      	mov	r2, r3
 80090ee:	68bb      	ldr	r3, [r7, #8]
 80090f0:	009b      	lsls	r3, r3, #2
 80090f2:	4413      	add	r3, r2
 80090f4:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80090f6:	6823      	ldr	r3, [r4, #0]
 80090f8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	4313      	orrs	r3, r2
 8009100:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8009102:	bf00      	nop
 8009104:	3710      	adds	r7, #16
 8009106:	46bd      	mov	sp, r7
 8009108:	bc90      	pop	{r4, r7}
 800910a:	4770      	bx	lr

0800910c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800910c:	b490      	push	{r4, r7}
 800910e:	b084      	sub	sp, #16
 8009110:	af00      	add	r7, sp, #0
 8009112:	60f8      	str	r0, [r7, #12]
 8009114:	60b9      	str	r1, [r7, #8]
 8009116:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	3360      	adds	r3, #96	; 0x60
 800911c:	461a      	mov	r2, r3
 800911e:	68bb      	ldr	r3, [r7, #8]
 8009120:	009b      	lsls	r3, r3, #2
 8009122:	4413      	add	r3, r2
 8009124:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8009126:	6823      	ldr	r3, [r4, #0]
 8009128:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	4313      	orrs	r3, r2
 8009130:	6023      	str	r3, [r4, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8009132:	bf00      	nop
 8009134:	3710      	adds	r7, #16
 8009136:	46bd      	mov	sp, r7
 8009138:	bc90      	pop	{r4, r7}
 800913a:	4770      	bx	lr

0800913c <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800913c:	b480      	push	{r7}
 800913e:	b083      	sub	sp, #12
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
 8009144:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	695b      	ldr	r3, [r3, #20]
 800914a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	431a      	orrs	r2, r3
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	615a      	str	r2, [r3, #20]
}
 8009156:	bf00      	nop
 8009158:	370c      	adds	r7, #12
 800915a:	46bd      	mov	sp, r7
 800915c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009160:	4770      	bx	lr

08009162 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8009162:	b480      	push	{r7}
 8009164:	b083      	sub	sp, #12
 8009166:	af00      	add	r7, sp, #0
 8009168:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	68db      	ldr	r3, [r3, #12]
 800916e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009172:	2b00      	cmp	r3, #0
 8009174:	d101      	bne.n	800917a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8009176:	2301      	movs	r3, #1
 8009178:	e000      	b.n	800917c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800917a:	2300      	movs	r3, #0
}
 800917c:	4618      	mov	r0, r3
 800917e:	370c      	adds	r7, #12
 8009180:	46bd      	mov	sp, r7
 8009182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009186:	4770      	bx	lr

08009188 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8009188:	b490      	push	{r4, r7}
 800918a:	b084      	sub	sp, #16
 800918c:	af00      	add	r7, sp, #0
 800918e:	60f8      	str	r0, [r7, #12]
 8009190:	60b9      	str	r1, [r7, #8]
 8009192:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	3330      	adds	r3, #48	; 0x30
 8009198:	461a      	mov	r2, r3
 800919a:	68bb      	ldr	r3, [r7, #8]
 800919c:	0a1b      	lsrs	r3, r3, #8
 800919e:	009b      	lsls	r3, r3, #2
 80091a0:	f003 030c 	and.w	r3, r3, #12
 80091a4:	4413      	add	r3, r2
 80091a6:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80091a8:	6822      	ldr	r2, [r4, #0]
 80091aa:	68bb      	ldr	r3, [r7, #8]
 80091ac:	f003 031f 	and.w	r3, r3, #31
 80091b0:	211f      	movs	r1, #31
 80091b2:	fa01 f303 	lsl.w	r3, r1, r3
 80091b6:	43db      	mvns	r3, r3
 80091b8:	401a      	ands	r2, r3
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	0e9b      	lsrs	r3, r3, #26
 80091be:	f003 011f 	and.w	r1, r3, #31
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	f003 031f 	and.w	r3, r3, #31
 80091c8:	fa01 f303 	lsl.w	r3, r1, r3
 80091cc:	4313      	orrs	r3, r2
 80091ce:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80091d0:	bf00      	nop
 80091d2:	3710      	adds	r7, #16
 80091d4:	46bd      	mov	sp, r7
 80091d6:	bc90      	pop	{r4, r7}
 80091d8:	4770      	bx	lr

080091da <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80091da:	b490      	push	{r4, r7}
 80091dc:	b084      	sub	sp, #16
 80091de:	af00      	add	r7, sp, #0
 80091e0:	60f8      	str	r0, [r7, #12]
 80091e2:	60b9      	str	r1, [r7, #8]
 80091e4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	3314      	adds	r3, #20
 80091ea:	461a      	mov	r2, r3
 80091ec:	68bb      	ldr	r3, [r7, #8]
 80091ee:	0e5b      	lsrs	r3, r3, #25
 80091f0:	009b      	lsls	r3, r3, #2
 80091f2:	f003 0304 	and.w	r3, r3, #4
 80091f6:	4413      	add	r3, r2
 80091f8:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80091fa:	6822      	ldr	r2, [r4, #0]
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	0d1b      	lsrs	r3, r3, #20
 8009200:	f003 031f 	and.w	r3, r3, #31
 8009204:	2107      	movs	r1, #7
 8009206:	fa01 f303 	lsl.w	r3, r1, r3
 800920a:	43db      	mvns	r3, r3
 800920c:	401a      	ands	r2, r3
 800920e:	68bb      	ldr	r3, [r7, #8]
 8009210:	0d1b      	lsrs	r3, r3, #20
 8009212:	f003 031f 	and.w	r3, r3, #31
 8009216:	6879      	ldr	r1, [r7, #4]
 8009218:	fa01 f303 	lsl.w	r3, r1, r3
 800921c:	4313      	orrs	r3, r2
 800921e:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8009220:	bf00      	nop
 8009222:	3710      	adds	r7, #16
 8009224:	46bd      	mov	sp, r7
 8009226:	bc90      	pop	{r4, r7}
 8009228:	4770      	bx	lr
	...

0800922c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800922c:	b480      	push	{r7}
 800922e:	b085      	sub	sp, #20
 8009230:	af00      	add	r7, sp, #0
 8009232:	60f8      	str	r0, [r7, #12]
 8009234:	60b9      	str	r1, [r7, #8]
 8009236:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800923e:	68bb      	ldr	r3, [r7, #8]
 8009240:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009244:	43db      	mvns	r3, r3
 8009246:	401a      	ands	r2, r3
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f003 0318 	and.w	r3, r3, #24
 800924e:	4908      	ldr	r1, [pc, #32]	; (8009270 <LL_ADC_SetChannelSingleDiff+0x44>)
 8009250:	40d9      	lsrs	r1, r3
 8009252:	68bb      	ldr	r3, [r7, #8]
 8009254:	400b      	ands	r3, r1
 8009256:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800925a:	431a      	orrs	r2, r3
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8009262:	bf00      	nop
 8009264:	3714      	adds	r7, #20
 8009266:	46bd      	mov	sp, r7
 8009268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926c:	4770      	bx	lr
 800926e:	bf00      	nop
 8009270:	0007ffff 	.word	0x0007ffff

08009274 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8009274:	b480      	push	{r7}
 8009276:	b083      	sub	sp, #12
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	689b      	ldr	r3, [r3, #8]
 8009280:	f003 031f 	and.w	r3, r3, #31
}
 8009284:	4618      	mov	r0, r3
 8009286:	370c      	adds	r7, #12
 8009288:	46bd      	mov	sp, r7
 800928a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928e:	4770      	bx	lr

08009290 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8009290:	b480      	push	{r7}
 8009292:	b083      	sub	sp, #12
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	689b      	ldr	r3, [r3, #8]
 800929c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80092a0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80092a4:	687a      	ldr	r2, [r7, #4]
 80092a6:	6093      	str	r3, [r2, #8]
}
 80092a8:	bf00      	nop
 80092aa:	370c      	adds	r7, #12
 80092ac:	46bd      	mov	sp, r7
 80092ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b2:	4770      	bx	lr

080092b4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80092b4:	b480      	push	{r7}
 80092b6:	b083      	sub	sp, #12
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	689b      	ldr	r3, [r3, #8]
 80092c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80092c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80092c8:	d101      	bne.n	80092ce <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80092ca:	2301      	movs	r3, #1
 80092cc:	e000      	b.n	80092d0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80092ce:	2300      	movs	r3, #0
}
 80092d0:	4618      	mov	r0, r3
 80092d2:	370c      	adds	r7, #12
 80092d4:	46bd      	mov	sp, r7
 80092d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092da:	4770      	bx	lr

080092dc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80092dc:	b480      	push	{r7}
 80092de:	b083      	sub	sp, #12
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	689b      	ldr	r3, [r3, #8]
 80092e8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80092ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80092f0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80092f8:	bf00      	nop
 80092fa:	370c      	adds	r7, #12
 80092fc:	46bd      	mov	sp, r7
 80092fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009302:	4770      	bx	lr

08009304 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8009304:	b480      	push	{r7}
 8009306:	b083      	sub	sp, #12
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	689b      	ldr	r3, [r3, #8]
 8009310:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009314:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009318:	d101      	bne.n	800931e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800931a:	2301      	movs	r3, #1
 800931c:	e000      	b.n	8009320 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800931e:	2300      	movs	r3, #0
}
 8009320:	4618      	mov	r0, r3
 8009322:	370c      	adds	r7, #12
 8009324:	46bd      	mov	sp, r7
 8009326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932a:	4770      	bx	lr

0800932c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800932c:	b480      	push	{r7}
 800932e:	b083      	sub	sp, #12
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	689b      	ldr	r3, [r3, #8]
 8009338:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800933c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8009340:	f043 0201 	orr.w	r2, r3, #1
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8009348:	bf00      	nop
 800934a:	370c      	adds	r7, #12
 800934c:	46bd      	mov	sp, r7
 800934e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009352:	4770      	bx	lr

08009354 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8009354:	b480      	push	{r7}
 8009356:	b083      	sub	sp, #12
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	689b      	ldr	r3, [r3, #8]
 8009360:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009364:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8009368:	f043 0202 	orr.w	r2, r3, #2
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8009370:	bf00      	nop
 8009372:	370c      	adds	r7, #12
 8009374:	46bd      	mov	sp, r7
 8009376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937a:	4770      	bx	lr

0800937c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800937c:	b480      	push	{r7}
 800937e:	b083      	sub	sp, #12
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	689b      	ldr	r3, [r3, #8]
 8009388:	f003 0301 	and.w	r3, r3, #1
 800938c:	2b01      	cmp	r3, #1
 800938e:	d101      	bne.n	8009394 <LL_ADC_IsEnabled+0x18>
 8009390:	2301      	movs	r3, #1
 8009392:	e000      	b.n	8009396 <LL_ADC_IsEnabled+0x1a>
 8009394:	2300      	movs	r3, #0
}
 8009396:	4618      	mov	r0, r3
 8009398:	370c      	adds	r7, #12
 800939a:	46bd      	mov	sp, r7
 800939c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a0:	4770      	bx	lr

080093a2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80093a2:	b480      	push	{r7}
 80093a4:	b083      	sub	sp, #12
 80093a6:	af00      	add	r7, sp, #0
 80093a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	689b      	ldr	r3, [r3, #8]
 80093ae:	f003 0302 	and.w	r3, r3, #2
 80093b2:	2b02      	cmp	r3, #2
 80093b4:	d101      	bne.n	80093ba <LL_ADC_IsDisableOngoing+0x18>
 80093b6:	2301      	movs	r3, #1
 80093b8:	e000      	b.n	80093bc <LL_ADC_IsDisableOngoing+0x1a>
 80093ba:	2300      	movs	r3, #0
}
 80093bc:	4618      	mov	r0, r3
 80093be:	370c      	adds	r7, #12
 80093c0:	46bd      	mov	sp, r7
 80093c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c6:	4770      	bx	lr

080093c8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80093c8:	b480      	push	{r7}
 80093ca:	b083      	sub	sp, #12
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	689b      	ldr	r3, [r3, #8]
 80093d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80093d8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80093dc:	f043 0204 	orr.w	r2, r3, #4
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80093e4:	bf00      	nop
 80093e6:	370c      	adds	r7, #12
 80093e8:	46bd      	mov	sp, r7
 80093ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ee:	4770      	bx	lr

080093f0 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80093f0:	b480      	push	{r7}
 80093f2:	b083      	sub	sp, #12
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	689b      	ldr	r3, [r3, #8]
 80093fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009400:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8009404:	f043 0210 	orr.w	r2, r3, #16
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800940c:	bf00      	nop
 800940e:	370c      	adds	r7, #12
 8009410:	46bd      	mov	sp, r7
 8009412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009416:	4770      	bx	lr

08009418 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8009418:	b480      	push	{r7}
 800941a:	b083      	sub	sp, #12
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	689b      	ldr	r3, [r3, #8]
 8009424:	f003 0304 	and.w	r3, r3, #4
 8009428:	2b04      	cmp	r3, #4
 800942a:	d101      	bne.n	8009430 <LL_ADC_REG_IsConversionOngoing+0x18>
 800942c:	2301      	movs	r3, #1
 800942e:	e000      	b.n	8009432 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8009430:	2300      	movs	r3, #0
}
 8009432:	4618      	mov	r0, r3
 8009434:	370c      	adds	r7, #12
 8009436:	46bd      	mov	sp, r7
 8009438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943c:	4770      	bx	lr

0800943e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800943e:	b480      	push	{r7}
 8009440:	b083      	sub	sp, #12
 8009442:	af00      	add	r7, sp, #0
 8009444:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	689b      	ldr	r3, [r3, #8]
 800944a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800944e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8009452:	f043 0220 	orr.w	r2, r3, #32
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800945a:	bf00      	nop
 800945c:	370c      	adds	r7, #12
 800945e:	46bd      	mov	sp, r7
 8009460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009464:	4770      	bx	lr

08009466 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8009466:	b480      	push	{r7}
 8009468:	b083      	sub	sp, #12
 800946a:	af00      	add	r7, sp, #0
 800946c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	689b      	ldr	r3, [r3, #8]
 8009472:	f003 0308 	and.w	r3, r3, #8
 8009476:	2b08      	cmp	r3, #8
 8009478:	d101      	bne.n	800947e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800947a:	2301      	movs	r3, #1
 800947c:	e000      	b.n	8009480 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800947e:	2300      	movs	r3, #0
}
 8009480:	4618      	mov	r0, r3
 8009482:	370c      	adds	r7, #12
 8009484:	46bd      	mov	sp, r7
 8009486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948a:	4770      	bx	lr

0800948c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800948c:	b590      	push	{r4, r7, lr}
 800948e:	b089      	sub	sp, #36	; 0x24
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009494:	2300      	movs	r3, #0
 8009496:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8009498:	2300      	movs	r3, #0
 800949a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d101      	bne.n	80094a6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80094a2:	2301      	movs	r3, #1
 80094a4:	e1ad      	b.n	8009802 <HAL_ADC_Init+0x376>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	695b      	ldr	r3, [r3, #20]
 80094aa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d109      	bne.n	80094c8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80094b4:	6878      	ldr	r0, [r7, #4]
 80094b6:	f7fd ffd1 	bl	800745c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	2200      	movs	r2, #0
 80094be:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2200      	movs	r2, #0
 80094c4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	4618      	mov	r0, r3
 80094ce:	f7ff fef1 	bl	80092b4 <LL_ADC_IsDeepPowerDownEnabled>
 80094d2:	4603      	mov	r3, r0
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d004      	beq.n	80094e2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	4618      	mov	r0, r3
 80094de:	f7ff fed7 	bl	8009290 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	4618      	mov	r0, r3
 80094e8:	f7ff ff0c 	bl	8009304 <LL_ADC_IsInternalRegulatorEnabled>
 80094ec:	4603      	mov	r3, r0
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d113      	bne.n	800951a <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	4618      	mov	r0, r3
 80094f8:	f7ff fef0 	bl	80092dc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80094fc:	4b9e      	ldr	r3, [pc, #632]	; (8009778 <HAL_ADC_Init+0x2ec>)
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	099b      	lsrs	r3, r3, #6
 8009502:	4a9e      	ldr	r2, [pc, #632]	; (800977c <HAL_ADC_Init+0x2f0>)
 8009504:	fba2 2303 	umull	r2, r3, r2, r3
 8009508:	099b      	lsrs	r3, r3, #6
 800950a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800950c:	e002      	b.n	8009514 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 800950e:	68bb      	ldr	r3, [r7, #8]
 8009510:	3b01      	subs	r3, #1
 8009512:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8009514:	68bb      	ldr	r3, [r7, #8]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d1f9      	bne.n	800950e <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	4618      	mov	r0, r3
 8009520:	f7ff fef0 	bl	8009304 <LL_ADC_IsInternalRegulatorEnabled>
 8009524:	4603      	mov	r3, r0
 8009526:	2b00      	cmp	r3, #0
 8009528:	d10d      	bne.n	8009546 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800952e:	f043 0210 	orr.w	r2, r3, #16
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800953a:	f043 0201 	orr.w	r2, r3, #1
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8009542:	2301      	movs	r3, #1
 8009544:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	4618      	mov	r0, r3
 800954c:	f7ff ff64 	bl	8009418 <LL_ADC_REG_IsConversionOngoing>
 8009550:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009556:	f003 0310 	and.w	r3, r3, #16
 800955a:	2b00      	cmp	r3, #0
 800955c:	f040 8148 	bne.w	80097f0 <HAL_ADC_Init+0x364>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8009560:	697b      	ldr	r3, [r7, #20]
 8009562:	2b00      	cmp	r3, #0
 8009564:	f040 8144 	bne.w	80097f0 <HAL_ADC_Init+0x364>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800956c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8009570:	f043 0202 	orr.w	r2, r3, #2
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	4618      	mov	r0, r3
 800957e:	f7ff fefd 	bl	800937c <LL_ADC_IsEnabled>
 8009582:	4603      	mov	r3, r0
 8009584:	2b00      	cmp	r3, #0
 8009586:	d141      	bne.n	800960c <HAL_ADC_Init+0x180>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009590:	d004      	beq.n	800959c <HAL_ADC_Init+0x110>
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	4a7a      	ldr	r2, [pc, #488]	; (8009780 <HAL_ADC_Init+0x2f4>)
 8009598:	4293      	cmp	r3, r2
 800959a:	d10f      	bne.n	80095bc <HAL_ADC_Init+0x130>
 800959c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80095a0:	f7ff feec 	bl	800937c <LL_ADC_IsEnabled>
 80095a4:	4604      	mov	r4, r0
 80095a6:	4876      	ldr	r0, [pc, #472]	; (8009780 <HAL_ADC_Init+0x2f4>)
 80095a8:	f7ff fee8 	bl	800937c <LL_ADC_IsEnabled>
 80095ac:	4603      	mov	r3, r0
 80095ae:	4323      	orrs	r3, r4
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	bf0c      	ite	eq
 80095b4:	2301      	moveq	r3, #1
 80095b6:	2300      	movne	r3, #0
 80095b8:	b2db      	uxtb	r3, r3
 80095ba:	e012      	b.n	80095e2 <HAL_ADC_Init+0x156>
 80095bc:	4871      	ldr	r0, [pc, #452]	; (8009784 <HAL_ADC_Init+0x2f8>)
 80095be:	f7ff fedd 	bl	800937c <LL_ADC_IsEnabled>
 80095c2:	4604      	mov	r4, r0
 80095c4:	4870      	ldr	r0, [pc, #448]	; (8009788 <HAL_ADC_Init+0x2fc>)
 80095c6:	f7ff fed9 	bl	800937c <LL_ADC_IsEnabled>
 80095ca:	4603      	mov	r3, r0
 80095cc:	431c      	orrs	r4, r3
 80095ce:	486f      	ldr	r0, [pc, #444]	; (800978c <HAL_ADC_Init+0x300>)
 80095d0:	f7ff fed4 	bl	800937c <LL_ADC_IsEnabled>
 80095d4:	4603      	mov	r3, r0
 80095d6:	4323      	orrs	r3, r4
 80095d8:	2b00      	cmp	r3, #0
 80095da:	bf0c      	ite	eq
 80095dc:	2301      	moveq	r3, #1
 80095de:	2300      	movne	r3, #0
 80095e0:	b2db      	uxtb	r3, r3
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d012      	beq.n	800960c <HAL_ADC_Init+0x180>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80095ee:	d004      	beq.n	80095fa <HAL_ADC_Init+0x16e>
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	4a62      	ldr	r2, [pc, #392]	; (8009780 <HAL_ADC_Init+0x2f4>)
 80095f6:	4293      	cmp	r3, r2
 80095f8:	d101      	bne.n	80095fe <HAL_ADC_Init+0x172>
 80095fa:	4a65      	ldr	r2, [pc, #404]	; (8009790 <HAL_ADC_Init+0x304>)
 80095fc:	e000      	b.n	8009600 <HAL_ADC_Init+0x174>
 80095fe:	4a65      	ldr	r2, [pc, #404]	; (8009794 <HAL_ADC_Init+0x308>)
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	685b      	ldr	r3, [r3, #4]
 8009604:	4619      	mov	r1, r3
 8009606:	4610      	mov	r0, r2
 8009608:	f7ff fce6 	bl	8008fd8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	7f5b      	ldrb	r3, [r3, #29]
 8009610:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8009616:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800961c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8009622:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800962a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800962c:	4313      	orrs	r3, r2
 800962e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009636:	2b01      	cmp	r3, #1
 8009638:	d106      	bne.n	8009648 <HAL_ADC_Init+0x1bc>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800963e:	3b01      	subs	r3, #1
 8009640:	045b      	lsls	r3, r3, #17
 8009642:	69ba      	ldr	r2, [r7, #24]
 8009644:	4313      	orrs	r3, r2
 8009646:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800964c:	2b00      	cmp	r3, #0
 800964e:	d009      	beq.n	8009664 <HAL_ADC_Init+0x1d8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009654:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800965c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800965e:	69ba      	ldr	r2, [r7, #24]
 8009660:	4313      	orrs	r3, r2
 8009662:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	68da      	ldr	r2, [r3, #12]
 800966a:	4b4b      	ldr	r3, [pc, #300]	; (8009798 <HAL_ADC_Init+0x30c>)
 800966c:	4013      	ands	r3, r2
 800966e:	687a      	ldr	r2, [r7, #4]
 8009670:	6812      	ldr	r2, [r2, #0]
 8009672:	69b9      	ldr	r1, [r7, #24]
 8009674:	430b      	orrs	r3, r1
 8009676:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	691b      	ldr	r3, [r3, #16]
 800967e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	430a      	orrs	r2, r1
 800968c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	4618      	mov	r0, r3
 8009694:	f7ff fec0 	bl	8009418 <LL_ADC_REG_IsConversionOngoing>
 8009698:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	4618      	mov	r0, r3
 80096a0:	f7ff fee1 	bl	8009466 <LL_ADC_INJ_IsConversionOngoing>
 80096a4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80096a6:	693b      	ldr	r3, [r7, #16]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d17f      	bne.n	80097ac <HAL_ADC_Init+0x320>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d17c      	bne.n	80097ac <HAL_ADC_Init+0x320>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80096b6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80096be:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80096c0:	4313      	orrs	r3, r2
 80096c2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	68db      	ldr	r3, [r3, #12]
 80096ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80096ce:	f023 0302 	bic.w	r3, r3, #2
 80096d2:	687a      	ldr	r2, [r7, #4]
 80096d4:	6812      	ldr	r2, [r2, #0]
 80096d6:	69b9      	ldr	r1, [r7, #24]
 80096d8:	430b      	orrs	r3, r1
 80096da:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	691b      	ldr	r3, [r3, #16]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d017      	beq.n	8009714 <HAL_ADC_Init+0x288>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	691a      	ldr	r2, [r3, #16]
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80096f2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80096fc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8009700:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8009704:	687a      	ldr	r2, [r7, #4]
 8009706:	6911      	ldr	r1, [r2, #16]
 8009708:	687a      	ldr	r2, [r7, #4]
 800970a:	6812      	ldr	r2, [r2, #0]
 800970c:	430b      	orrs	r3, r1
 800970e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8009712:	e013      	b.n	800973c <HAL_ADC_Init+0x2b0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	691a      	ldr	r2, [r3, #16]
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009722:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800972c:	687a      	ldr	r2, [r7, #4]
 800972e:	6812      	ldr	r2, [r2, #0]
 8009730:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8009734:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8009738:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009742:	2b01      	cmp	r3, #1
 8009744:	d12a      	bne.n	800979c <HAL_ADC_Init+0x310>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	691b      	ldr	r3, [r3, #16]
 800974c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009750:	f023 0304 	bic.w	r3, r3, #4
 8009754:	687a      	ldr	r2, [r7, #4]
 8009756:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8009758:	687a      	ldr	r2, [r7, #4]
 800975a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800975c:	4311      	orrs	r1, r2
 800975e:	687a      	ldr	r2, [r7, #4]
 8009760:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8009762:	4311      	orrs	r1, r2
 8009764:	687a      	ldr	r2, [r7, #4]
 8009766:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009768:	430a      	orrs	r2, r1
 800976a:	431a      	orrs	r2, r3
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	f042 0201 	orr.w	r2, r2, #1
 8009774:	611a      	str	r2, [r3, #16]
 8009776:	e019      	b.n	80097ac <HAL_ADC_Init+0x320>
 8009778:	20000eb0 	.word	0x20000eb0
 800977c:	053e2d63 	.word	0x053e2d63
 8009780:	50000100 	.word	0x50000100
 8009784:	50000400 	.word	0x50000400
 8009788:	50000500 	.word	0x50000500
 800978c:	50000600 	.word	0x50000600
 8009790:	50000300 	.word	0x50000300
 8009794:	50000700 	.word	0x50000700
 8009798:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	691a      	ldr	r2, [r3, #16]
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f022 0201 	bic.w	r2, r2, #1
 80097aa:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	695b      	ldr	r3, [r3, #20]
 80097b0:	2b01      	cmp	r3, #1
 80097b2:	d10c      	bne.n	80097ce <HAL_ADC_Init+0x342>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097ba:	f023 010f 	bic.w	r1, r3, #15
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	6a1b      	ldr	r3, [r3, #32]
 80097c2:	1e5a      	subs	r2, r3, #1
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	430a      	orrs	r2, r1
 80097ca:	631a      	str	r2, [r3, #48]	; 0x30
 80097cc:	e007      	b.n	80097de <HAL_ADC_Init+0x352>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	f022 020f 	bic.w	r2, r2, #15
 80097dc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80097e2:	f023 0303 	bic.w	r3, r3, #3
 80097e6:	f043 0201 	orr.w	r2, r3, #1
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	65da      	str	r2, [r3, #92]	; 0x5c
 80097ee:	e007      	b.n	8009800 <HAL_ADC_Init+0x374>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80097f4:	f043 0210 	orr.w	r2, r3, #16
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80097fc:	2301      	movs	r3, #1
 80097fe:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8009800:	7ffb      	ldrb	r3, [r7, #31]
}
 8009802:	4618      	mov	r0, r3
 8009804:	3724      	adds	r7, #36	; 0x24
 8009806:	46bd      	mov	sp, r7
 8009808:	bd90      	pop	{r4, r7, pc}
 800980a:	bf00      	nop

0800980c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b086      	sub	sp, #24
 8009810:	af00      	add	r7, sp, #0
 8009812:	60f8      	str	r0, [r7, #12]
 8009814:	60b9      	str	r1, [r7, #8]
 8009816:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009820:	d004      	beq.n	800982c <HAL_ADC_Start_DMA+0x20>
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	4a58      	ldr	r2, [pc, #352]	; (8009988 <HAL_ADC_Start_DMA+0x17c>)
 8009828:	4293      	cmp	r3, r2
 800982a:	d101      	bne.n	8009830 <HAL_ADC_Start_DMA+0x24>
 800982c:	4b57      	ldr	r3, [pc, #348]	; (800998c <HAL_ADC_Start_DMA+0x180>)
 800982e:	e000      	b.n	8009832 <HAL_ADC_Start_DMA+0x26>
 8009830:	4b57      	ldr	r3, [pc, #348]	; (8009990 <HAL_ADC_Start_DMA+0x184>)
 8009832:	4618      	mov	r0, r3
 8009834:	f7ff fd1e 	bl	8009274 <LL_ADC_GetMultimode>
 8009838:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	4618      	mov	r0, r3
 8009840:	f7ff fdea 	bl	8009418 <LL_ADC_REG_IsConversionOngoing>
 8009844:	4603      	mov	r3, r0
 8009846:	2b00      	cmp	r3, #0
 8009848:	f040 8096 	bne.w	8009978 <HAL_ADC_Start_DMA+0x16c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8009852:	2b01      	cmp	r3, #1
 8009854:	d101      	bne.n	800985a <HAL_ADC_Start_DMA+0x4e>
 8009856:	2302      	movs	r3, #2
 8009858:	e091      	b.n	800997e <HAL_ADC_Start_DMA+0x172>
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	2201      	movs	r2, #1
 800985e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8009862:	693b      	ldr	r3, [r7, #16]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d005      	beq.n	8009874 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8009868:	693b      	ldr	r3, [r7, #16]
 800986a:	2b05      	cmp	r3, #5
 800986c:	d002      	beq.n	8009874 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800986e:	693b      	ldr	r3, [r7, #16]
 8009870:	2b09      	cmp	r3, #9
 8009872:	d17a      	bne.n	800996a <HAL_ADC_Start_DMA+0x15e>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8009874:	68f8      	ldr	r0, [r7, #12]
 8009876:	f000 fd71 	bl	800a35c <ADC_Enable>
 800987a:	4603      	mov	r3, r0
 800987c:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800987e:	7dfb      	ldrb	r3, [r7, #23]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d16d      	bne.n	8009960 <HAL_ADC_Start_DMA+0x154>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009888:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800988c:	f023 0301 	bic.w	r3, r3, #1
 8009890:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	4a3a      	ldr	r2, [pc, #232]	; (8009988 <HAL_ADC_Start_DMA+0x17c>)
 800989e:	4293      	cmp	r3, r2
 80098a0:	d009      	beq.n	80098b6 <HAL_ADC_Start_DMA+0xaa>
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	4a3b      	ldr	r2, [pc, #236]	; (8009994 <HAL_ADC_Start_DMA+0x188>)
 80098a8:	4293      	cmp	r3, r2
 80098aa:	d002      	beq.n	80098b2 <HAL_ADC_Start_DMA+0xa6>
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	e003      	b.n	80098ba <HAL_ADC_Start_DMA+0xae>
 80098b2:	4b39      	ldr	r3, [pc, #228]	; (8009998 <HAL_ADC_Start_DMA+0x18c>)
 80098b4:	e001      	b.n	80098ba <HAL_ADC_Start_DMA+0xae>
 80098b6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80098ba:	68fa      	ldr	r2, [r7, #12]
 80098bc:	6812      	ldr	r2, [r2, #0]
 80098be:	4293      	cmp	r3, r2
 80098c0:	d002      	beq.n	80098c8 <HAL_ADC_Start_DMA+0xbc>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80098c2:	693b      	ldr	r3, [r7, #16]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d105      	bne.n	80098d4 <HAL_ADC_Start_DMA+0xc8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80098cc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80098d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d006      	beq.n	80098ee <HAL_ADC_Start_DMA+0xe2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80098e4:	f023 0206 	bic.w	r2, r3, #6
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	661a      	str	r2, [r3, #96]	; 0x60
 80098ec:	e002      	b.n	80098f4 <HAL_ADC_Start_DMA+0xe8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	2200      	movs	r2, #0
 80098f2:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098f8:	4a28      	ldr	r2, [pc, #160]	; (800999c <HAL_ADC_Start_DMA+0x190>)
 80098fa:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009900:	4a27      	ldr	r2, [pc, #156]	; (80099a0 <HAL_ADC_Start_DMA+0x194>)
 8009902:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009908:	4a26      	ldr	r2, [pc, #152]	; (80099a4 <HAL_ADC_Start_DMA+0x198>)
 800990a:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	221c      	movs	r2, #28
 8009912:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	2200      	movs	r2, #0
 8009918:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	685a      	ldr	r2, [r3, #4]
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	f042 0210 	orr.w	r2, r2, #16
 800992a:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	68da      	ldr	r2, [r3, #12]
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f042 0201 	orr.w	r2, r2, #1
 800993a:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	3340      	adds	r3, #64	; 0x40
 8009946:	4619      	mov	r1, r3
 8009948:	68ba      	ldr	r2, [r7, #8]
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	f002 f942 	bl	800bbd4 <HAL_DMA_Start_IT>
 8009950:	4603      	mov	r3, r0
 8009952:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	4618      	mov	r0, r3
 800995a:	f7ff fd35 	bl	80093c8 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800995e:	e00d      	b.n	800997c <HAL_ADC_Start_DMA+0x170>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	2200      	movs	r2, #0
 8009964:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8009968:	e008      	b.n	800997c <HAL_ADC_Start_DMA+0x170>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800996a:	2301      	movs	r3, #1
 800996c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	2200      	movs	r2, #0
 8009972:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8009976:	e001      	b.n	800997c <HAL_ADC_Start_DMA+0x170>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8009978:	2302      	movs	r3, #2
 800997a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800997c:	7dfb      	ldrb	r3, [r7, #23]
}
 800997e:	4618      	mov	r0, r3
 8009980:	3718      	adds	r7, #24
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}
 8009986:	bf00      	nop
 8009988:	50000100 	.word	0x50000100
 800998c:	50000300 	.word	0x50000300
 8009990:	50000700 	.word	0x50000700
 8009994:	50000500 	.word	0x50000500
 8009998:	50000400 	.word	0x50000400
 800999c:	0800a4c1 	.word	0x0800a4c1
 80099a0:	0800a599 	.word	0x0800a599
 80099a4:	0800a5b5 	.word	0x0800a5b5

080099a8 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b084      	sub	sp, #16
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80099b6:	2b01      	cmp	r3, #1
 80099b8:	d101      	bne.n	80099be <HAL_ADC_Stop_DMA+0x16>
 80099ba:	2302      	movs	r3, #2
 80099bc:	e051      	b.n	8009a62 <HAL_ADC_Stop_DMA+0xba>
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	2201      	movs	r2, #1
 80099c2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80099c6:	2103      	movs	r1, #3
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f000 fc13 	bl	800a1f4 <ADC_ConversionStop>
 80099ce:	4603      	mov	r3, r0
 80099d0:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80099d2:	7bfb      	ldrb	r3, [r7, #15]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d13f      	bne.n	8009a58 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	68da      	ldr	r2, [r3, #12]
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	f022 0201 	bic.w	r2, r2, #1
 80099e6:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099ec:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80099f0:	b2db      	uxtb	r3, r3
 80099f2:	2b02      	cmp	r3, #2
 80099f4:	d10f      	bne.n	8009a16 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099fa:	4618      	mov	r0, r3
 80099fc:	f002 f965 	bl	800bcca <HAL_DMA_Abort>
 8009a00:	4603      	mov	r3, r0
 8009a02:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8009a04:	7bfb      	ldrb	r3, [r7, #15]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d005      	beq.n	8009a16 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a0e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	685a      	ldr	r2, [r3, #4]
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	f022 0210 	bic.w	r2, r2, #16
 8009a24:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8009a26:	7bfb      	ldrb	r3, [r7, #15]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d105      	bne.n	8009a38 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8009a2c:	6878      	ldr	r0, [r7, #4]
 8009a2e:	f000 fcef 	bl	800a410 <ADC_Disable>
 8009a32:	4603      	mov	r3, r0
 8009a34:	73fb      	strb	r3, [r7, #15]
 8009a36:	e002      	b.n	8009a3e <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8009a38:	6878      	ldr	r0, [r7, #4]
 8009a3a:	f000 fce9 	bl	800a410 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8009a3e:	7bfb      	ldrb	r3, [r7, #15]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d109      	bne.n	8009a58 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a48:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8009a4c:	f023 0301 	bic.w	r3, r3, #1
 8009a50:	f043 0201 	orr.w	r2, r3, #1
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8009a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a62:	4618      	mov	r0, r3
 8009a64:	3710      	adds	r7, #16
 8009a66:	46bd      	mov	sp, r7
 8009a68:	bd80      	pop	{r7, pc}

08009a6a <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8009a6a:	b480      	push	{r7}
 8009a6c:	b083      	sub	sp, #12
 8009a6e:	af00      	add	r7, sp, #0
 8009a70:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8009a72:	bf00      	nop
 8009a74:	370c      	adds	r7, #12
 8009a76:	46bd      	mov	sp, r7
 8009a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7c:	4770      	bx	lr

08009a7e <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8009a7e:	b480      	push	{r7}
 8009a80:	b083      	sub	sp, #12
 8009a82:	af00      	add	r7, sp, #0
 8009a84:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8009a86:	bf00      	nop
 8009a88:	370c      	adds	r7, #12
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a90:	4770      	bx	lr
	...

08009a94 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b0a6      	sub	sp, #152	; 0x98
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
 8009a9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8009aae:	2b01      	cmp	r3, #1
 8009ab0:	d101      	bne.n	8009ab6 <HAL_ADC_ConfigChannel+0x22>
 8009ab2:	2302      	movs	r3, #2
 8009ab4:	e38e      	b.n	800a1d4 <HAL_ADC_ConfigChannel+0x740>
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2201      	movs	r2, #1
 8009aba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	f7ff fca8 	bl	8009418 <LL_ADC_REG_IsConversionOngoing>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	f040 836f 	bne.w	800a1ae <HAL_ADC_ConfigChannel+0x71a>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	6818      	ldr	r0, [r3, #0]
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	6859      	ldr	r1, [r3, #4]
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	461a      	mov	r2, r3
 8009ade:	f7ff fb53 	bl	8009188 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	f7ff fc96 	bl	8009418 <LL_ADC_REG_IsConversionOngoing>
 8009aec:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	4618      	mov	r0, r3
 8009af6:	f7ff fcb6 	bl	8009466 <LL_ADC_INJ_IsConversionOngoing>
 8009afa:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8009afe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	f040 817b 	bne.w	8009dfe <HAL_ADC_ConfigChannel+0x36a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8009b08:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	f040 8176 	bne.w	8009dfe <HAL_ADC_ConfigChannel+0x36a>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	689b      	ldr	r3, [r3, #8]
 8009b16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009b1a:	d10f      	bne.n	8009b3c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	6818      	ldr	r0, [r3, #0]
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	2200      	movs	r2, #0
 8009b26:	4619      	mov	r1, r3
 8009b28:	f7ff fb57 	bl	80091da <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8009b34:	4618      	mov	r0, r3
 8009b36:	f7ff fb01 	bl	800913c <LL_ADC_SetSamplingTimeCommonConfig>
 8009b3a:	e00e      	b.n	8009b5a <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	6818      	ldr	r0, [r3, #0]
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	6819      	ldr	r1, [r3, #0]
 8009b44:	683b      	ldr	r3, [r7, #0]
 8009b46:	689b      	ldr	r3, [r3, #8]
 8009b48:	461a      	mov	r2, r3
 8009b4a:	f7ff fb46 	bl	80091da <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	2100      	movs	r1, #0
 8009b54:	4618      	mov	r0, r3
 8009b56:	f7ff faf1 	bl	800913c <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	695a      	ldr	r2, [r3, #20]
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	68db      	ldr	r3, [r3, #12]
 8009b64:	08db      	lsrs	r3, r3, #3
 8009b66:	f003 0303 	and.w	r3, r3, #3
 8009b6a:	005b      	lsls	r3, r3, #1
 8009b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8009b70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	691b      	ldr	r3, [r3, #16]
 8009b78:	2b04      	cmp	r3, #4
 8009b7a:	d022      	beq.n	8009bc2 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	6818      	ldr	r0, [r3, #0]
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	6919      	ldr	r1, [r3, #16]
 8009b84:	683b      	ldr	r3, [r7, #0]
 8009b86:	681a      	ldr	r2, [r3, #0]
 8009b88:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009b8c:	f7ff fa58 	bl	8009040 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	6818      	ldr	r0, [r3, #0]
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	6919      	ldr	r1, [r3, #16]
 8009b98:	683b      	ldr	r3, [r7, #0]
 8009b9a:	699b      	ldr	r3, [r3, #24]
 8009b9c:	461a      	mov	r2, r3
 8009b9e:	f7ff fa9d 	bl	80090dc <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6818      	ldr	r0, [r3, #0]
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	6919      	ldr	r1, [r3, #16]
 8009baa:	683b      	ldr	r3, [r7, #0]
 8009bac:	7f1b      	ldrb	r3, [r3, #28]
 8009bae:	2b01      	cmp	r3, #1
 8009bb0:	d102      	bne.n	8009bb8 <HAL_ADC_ConfigChannel+0x124>
 8009bb2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009bb6:	e000      	b.n	8009bba <HAL_ADC_ConfigChannel+0x126>
 8009bb8:	2300      	movs	r3, #0
 8009bba:	461a      	mov	r2, r3
 8009bbc:	f7ff faa6 	bl	800910c <LL_ADC_SetOffsetSaturation>
 8009bc0:	e11d      	b.n	8009dfe <HAL_ADC_ConfigChannel+0x36a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	2100      	movs	r1, #0
 8009bc8:	4618      	mov	r0, r3
 8009bca:	f7ff fa5b 	bl	8009084 <LL_ADC_GetOffsetChannel>
 8009bce:	4603      	mov	r3, r0
 8009bd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d10a      	bne.n	8009bee <HAL_ADC_ConfigChannel+0x15a>
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	2100      	movs	r1, #0
 8009bde:	4618      	mov	r0, r3
 8009be0:	f7ff fa50 	bl	8009084 <LL_ADC_GetOffsetChannel>
 8009be4:	4603      	mov	r3, r0
 8009be6:	0e9b      	lsrs	r3, r3, #26
 8009be8:	f003 021f 	and.w	r2, r3, #31
 8009bec:	e012      	b.n	8009c14 <HAL_ADC_ConfigChannel+0x180>
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	2100      	movs	r1, #0
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	f7ff fa45 	bl	8009084 <LL_ADC_GetOffsetChannel>
 8009bfa:	4603      	mov	r3, r0
 8009bfc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c00:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009c04:	fa93 f3a3 	rbit	r3, r3
 8009c08:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8009c0a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009c0c:	fab3 f383 	clz	r3, r3
 8009c10:	b2db      	uxtb	r3, r3
 8009c12:	461a      	mov	r2, r3
 8009c14:	683b      	ldr	r3, [r7, #0]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d105      	bne.n	8009c2c <HAL_ADC_ConfigChannel+0x198>
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	0e9b      	lsrs	r3, r3, #26
 8009c26:	f003 031f 	and.w	r3, r3, #31
 8009c2a:	e00a      	b.n	8009c42 <HAL_ADC_ConfigChannel+0x1ae>
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c34:	fa93 f3a3 	rbit	r3, r3
 8009c38:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8009c3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c3c:	fab3 f383 	clz	r3, r3
 8009c40:	b2db      	uxtb	r3, r3
 8009c42:	429a      	cmp	r2, r3
 8009c44:	d106      	bne.n	8009c54 <HAL_ADC_ConfigChannel+0x1c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	2100      	movs	r1, #0
 8009c4e:	4618      	mov	r0, r3
 8009c50:	f7ff fa2c 	bl	80090ac <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	2101      	movs	r1, #1
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	f7ff fa12 	bl	8009084 <LL_ADC_GetOffsetChannel>
 8009c60:	4603      	mov	r3, r0
 8009c62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d10a      	bne.n	8009c80 <HAL_ADC_ConfigChannel+0x1ec>
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	2101      	movs	r1, #1
 8009c70:	4618      	mov	r0, r3
 8009c72:	f7ff fa07 	bl	8009084 <LL_ADC_GetOffsetChannel>
 8009c76:	4603      	mov	r3, r0
 8009c78:	0e9b      	lsrs	r3, r3, #26
 8009c7a:	f003 021f 	and.w	r2, r3, #31
 8009c7e:	e010      	b.n	8009ca2 <HAL_ADC_ConfigChannel+0x20e>
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	2101      	movs	r1, #1
 8009c86:	4618      	mov	r0, r3
 8009c88:	f7ff f9fc 	bl	8009084 <LL_ADC_GetOffsetChannel>
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c90:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009c92:	fa93 f3a3 	rbit	r3, r3
 8009c96:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8009c98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c9a:	fab3 f383 	clz	r3, r3
 8009c9e:	b2db      	uxtb	r3, r3
 8009ca0:	461a      	mov	r2, r3
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d105      	bne.n	8009cba <HAL_ADC_ConfigChannel+0x226>
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	0e9b      	lsrs	r3, r3, #26
 8009cb4:	f003 031f 	and.w	r3, r3, #31
 8009cb8:	e00a      	b.n	8009cd0 <HAL_ADC_ConfigChannel+0x23c>
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009cc0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009cc2:	fa93 f3a3 	rbit	r3, r3
 8009cc6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8009cc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009cca:	fab3 f383 	clz	r3, r3
 8009cce:	b2db      	uxtb	r3, r3
 8009cd0:	429a      	cmp	r2, r3
 8009cd2:	d106      	bne.n	8009ce2 <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	2200      	movs	r2, #0
 8009cda:	2101      	movs	r1, #1
 8009cdc:	4618      	mov	r0, r3
 8009cde:	f7ff f9e5 	bl	80090ac <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	2102      	movs	r1, #2
 8009ce8:	4618      	mov	r0, r3
 8009cea:	f7ff f9cb 	bl	8009084 <LL_ADC_GetOffsetChannel>
 8009cee:	4603      	mov	r3, r0
 8009cf0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d10a      	bne.n	8009d0e <HAL_ADC_ConfigChannel+0x27a>
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	2102      	movs	r1, #2
 8009cfe:	4618      	mov	r0, r3
 8009d00:	f7ff f9c0 	bl	8009084 <LL_ADC_GetOffsetChannel>
 8009d04:	4603      	mov	r3, r0
 8009d06:	0e9b      	lsrs	r3, r3, #26
 8009d08:	f003 021f 	and.w	r2, r3, #31
 8009d0c:	e010      	b.n	8009d30 <HAL_ADC_ConfigChannel+0x29c>
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	2102      	movs	r1, #2
 8009d14:	4618      	mov	r0, r3
 8009d16:	f7ff f9b5 	bl	8009084 <LL_ADC_GetOffsetChannel>
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009d1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009d20:	fa93 f3a3 	rbit	r3, r3
 8009d24:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8009d26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009d28:	fab3 f383 	clz	r3, r3
 8009d2c:	b2db      	uxtb	r3, r3
 8009d2e:	461a      	mov	r2, r3
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d105      	bne.n	8009d48 <HAL_ADC_ConfigChannel+0x2b4>
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	0e9b      	lsrs	r3, r3, #26
 8009d42:	f003 031f 	and.w	r3, r3, #31
 8009d46:	e00a      	b.n	8009d5e <HAL_ADC_ConfigChannel+0x2ca>
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009d4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009d50:	fa93 f3a3 	rbit	r3, r3
 8009d54:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8009d56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d58:	fab3 f383 	clz	r3, r3
 8009d5c:	b2db      	uxtb	r3, r3
 8009d5e:	429a      	cmp	r2, r3
 8009d60:	d106      	bne.n	8009d70 <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	2200      	movs	r2, #0
 8009d68:	2102      	movs	r1, #2
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	f7ff f99e 	bl	80090ac <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	2103      	movs	r1, #3
 8009d76:	4618      	mov	r0, r3
 8009d78:	f7ff f984 	bl	8009084 <LL_ADC_GetOffsetChannel>
 8009d7c:	4603      	mov	r3, r0
 8009d7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d10a      	bne.n	8009d9c <HAL_ADC_ConfigChannel+0x308>
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	2103      	movs	r1, #3
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	f7ff f979 	bl	8009084 <LL_ADC_GetOffsetChannel>
 8009d92:	4603      	mov	r3, r0
 8009d94:	0e9b      	lsrs	r3, r3, #26
 8009d96:	f003 021f 	and.w	r2, r3, #31
 8009d9a:	e010      	b.n	8009dbe <HAL_ADC_ConfigChannel+0x32a>
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	2103      	movs	r1, #3
 8009da2:	4618      	mov	r0, r3
 8009da4:	f7ff f96e 	bl	8009084 <LL_ADC_GetOffsetChannel>
 8009da8:	4603      	mov	r3, r0
 8009daa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009dac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009dae:	fa93 f3a3 	rbit	r3, r3
 8009db2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8009db4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009db6:	fab3 f383 	clz	r3, r3
 8009dba:	b2db      	uxtb	r3, r3
 8009dbc:	461a      	mov	r2, r3
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d105      	bne.n	8009dd6 <HAL_ADC_ConfigChannel+0x342>
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	0e9b      	lsrs	r3, r3, #26
 8009dd0:	f003 031f 	and.w	r3, r3, #31
 8009dd4:	e00a      	b.n	8009dec <HAL_ADC_ConfigChannel+0x358>
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009ddc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009dde:	fa93 f3a3 	rbit	r3, r3
 8009de2:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8009de4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009de6:	fab3 f383 	clz	r3, r3
 8009dea:	b2db      	uxtb	r3, r3
 8009dec:	429a      	cmp	r2, r3
 8009dee:	d106      	bne.n	8009dfe <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	2200      	movs	r2, #0
 8009df6:	2103      	movs	r1, #3
 8009df8:	4618      	mov	r0, r3
 8009dfa:	f7ff f957 	bl	80090ac <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	4618      	mov	r0, r3
 8009e04:	f7ff faba 	bl	800937c <LL_ADC_IsEnabled>
 8009e08:	4603      	mov	r3, r0
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	f040 810c 	bne.w	800a028 <HAL_ADC_ConfigChannel+0x594>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	6818      	ldr	r0, [r3, #0]
 8009e14:	683b      	ldr	r3, [r7, #0]
 8009e16:	6819      	ldr	r1, [r3, #0]
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	68db      	ldr	r3, [r3, #12]
 8009e1c:	461a      	mov	r2, r3
 8009e1e:	f7ff fa05 	bl	800922c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8009e22:	683b      	ldr	r3, [r7, #0]
 8009e24:	68db      	ldr	r3, [r3, #12]
 8009e26:	4aaf      	ldr	r2, [pc, #700]	; (800a0e4 <HAL_ADC_ConfigChannel+0x650>)
 8009e28:	4293      	cmp	r3, r2
 8009e2a:	f040 80fd 	bne.w	800a028 <HAL_ADC_ConfigChannel+0x594>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d10b      	bne.n	8009e56 <HAL_ADC_ConfigChannel+0x3c2>
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	0e9b      	lsrs	r3, r3, #26
 8009e44:	3301      	adds	r3, #1
 8009e46:	f003 031f 	and.w	r3, r3, #31
 8009e4a:	2b09      	cmp	r3, #9
 8009e4c:	bf94      	ite	ls
 8009e4e:	2301      	movls	r3, #1
 8009e50:	2300      	movhi	r3, #0
 8009e52:	b2db      	uxtb	r3, r3
 8009e54:	e012      	b.n	8009e7c <HAL_ADC_ConfigChannel+0x3e8>
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009e5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e5e:	fa93 f3a3 	rbit	r3, r3
 8009e62:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8009e64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e66:	fab3 f383 	clz	r3, r3
 8009e6a:	b2db      	uxtb	r3, r3
 8009e6c:	3301      	adds	r3, #1
 8009e6e:	f003 031f 	and.w	r3, r3, #31
 8009e72:	2b09      	cmp	r3, #9
 8009e74:	bf94      	ite	ls
 8009e76:	2301      	movls	r3, #1
 8009e78:	2300      	movhi	r3, #0
 8009e7a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d064      	beq.n	8009f4a <HAL_ADC_ConfigChannel+0x4b6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8009e80:	683b      	ldr	r3, [r7, #0]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d107      	bne.n	8009e9c <HAL_ADC_ConfigChannel+0x408>
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	0e9b      	lsrs	r3, r3, #26
 8009e92:	3301      	adds	r3, #1
 8009e94:	069b      	lsls	r3, r3, #26
 8009e96:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8009e9a:	e00e      	b.n	8009eba <HAL_ADC_ConfigChannel+0x426>
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ea4:	fa93 f3a3 	rbit	r3, r3
 8009ea8:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8009eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009eac:	fab3 f383 	clz	r3, r3
 8009eb0:	b2db      	uxtb	r3, r3
 8009eb2:	3301      	adds	r3, #1
 8009eb4:	069b      	lsls	r3, r3, #26
 8009eb6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8009eba:	683b      	ldr	r3, [r7, #0]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d109      	bne.n	8009eda <HAL_ADC_ConfigChannel+0x446>
 8009ec6:	683b      	ldr	r3, [r7, #0]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	0e9b      	lsrs	r3, r3, #26
 8009ecc:	3301      	adds	r3, #1
 8009ece:	f003 031f 	and.w	r3, r3, #31
 8009ed2:	2101      	movs	r1, #1
 8009ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8009ed8:	e010      	b.n	8009efc <HAL_ADC_ConfigChannel+0x468>
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ee2:	fa93 f3a3 	rbit	r3, r3
 8009ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8009ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eea:	fab3 f383 	clz	r3, r3
 8009eee:	b2db      	uxtb	r3, r3
 8009ef0:	3301      	adds	r3, #1
 8009ef2:	f003 031f 	and.w	r3, r3, #31
 8009ef6:	2101      	movs	r1, #1
 8009ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8009efc:	ea42 0103 	orr.w	r1, r2, r3
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d10a      	bne.n	8009f22 <HAL_ADC_ConfigChannel+0x48e>
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	0e9b      	lsrs	r3, r3, #26
 8009f12:	3301      	adds	r3, #1
 8009f14:	f003 021f 	and.w	r2, r3, #31
 8009f18:	4613      	mov	r3, r2
 8009f1a:	005b      	lsls	r3, r3, #1
 8009f1c:	4413      	add	r3, r2
 8009f1e:	051b      	lsls	r3, r3, #20
 8009f20:	e011      	b.n	8009f46 <HAL_ADC_ConfigChannel+0x4b2>
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f2a:	fa93 f3a3 	rbit	r3, r3
 8009f2e:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8009f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f32:	fab3 f383 	clz	r3, r3
 8009f36:	b2db      	uxtb	r3, r3
 8009f38:	3301      	adds	r3, #1
 8009f3a:	f003 021f 	and.w	r2, r3, #31
 8009f3e:	4613      	mov	r3, r2
 8009f40:	005b      	lsls	r3, r3, #1
 8009f42:	4413      	add	r3, r2
 8009f44:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009f46:	430b      	orrs	r3, r1
 8009f48:	e069      	b.n	800a01e <HAL_ADC_ConfigChannel+0x58a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d107      	bne.n	8009f66 <HAL_ADC_ConfigChannel+0x4d2>
 8009f56:	683b      	ldr	r3, [r7, #0]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	0e9b      	lsrs	r3, r3, #26
 8009f5c:	3301      	adds	r3, #1
 8009f5e:	069b      	lsls	r3, r3, #26
 8009f60:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8009f64:	e00e      	b.n	8009f84 <HAL_ADC_ConfigChannel+0x4f0>
 8009f66:	683b      	ldr	r3, [r7, #0]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009f6c:	6a3b      	ldr	r3, [r7, #32]
 8009f6e:	fa93 f3a3 	rbit	r3, r3
 8009f72:	61fb      	str	r3, [r7, #28]
  return result;
 8009f74:	69fb      	ldr	r3, [r7, #28]
 8009f76:	fab3 f383 	clz	r3, r3
 8009f7a:	b2db      	uxtb	r3, r3
 8009f7c:	3301      	adds	r3, #1
 8009f7e:	069b      	lsls	r3, r3, #26
 8009f80:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d109      	bne.n	8009fa4 <HAL_ADC_ConfigChannel+0x510>
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	0e9b      	lsrs	r3, r3, #26
 8009f96:	3301      	adds	r3, #1
 8009f98:	f003 031f 	and.w	r3, r3, #31
 8009f9c:	2101      	movs	r1, #1
 8009f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8009fa2:	e010      	b.n	8009fc6 <HAL_ADC_ConfigChannel+0x532>
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009faa:	69bb      	ldr	r3, [r7, #24]
 8009fac:	fa93 f3a3 	rbit	r3, r3
 8009fb0:	617b      	str	r3, [r7, #20]
  return result;
 8009fb2:	697b      	ldr	r3, [r7, #20]
 8009fb4:	fab3 f383 	clz	r3, r3
 8009fb8:	b2db      	uxtb	r3, r3
 8009fba:	3301      	adds	r3, #1
 8009fbc:	f003 031f 	and.w	r3, r3, #31
 8009fc0:	2101      	movs	r1, #1
 8009fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8009fc6:	ea42 0103 	orr.w	r1, r2, r3
 8009fca:	683b      	ldr	r3, [r7, #0]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d10d      	bne.n	8009ff2 <HAL_ADC_ConfigChannel+0x55e>
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	0e9b      	lsrs	r3, r3, #26
 8009fdc:	3301      	adds	r3, #1
 8009fde:	f003 021f 	and.w	r2, r3, #31
 8009fe2:	4613      	mov	r3, r2
 8009fe4:	005b      	lsls	r3, r3, #1
 8009fe6:	4413      	add	r3, r2
 8009fe8:	3b1e      	subs	r3, #30
 8009fea:	051b      	lsls	r3, r3, #20
 8009fec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009ff0:	e014      	b.n	800a01c <HAL_ADC_ConfigChannel+0x588>
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009ff8:	693b      	ldr	r3, [r7, #16]
 8009ffa:	fa93 f3a3 	rbit	r3, r3
 8009ffe:	60fb      	str	r3, [r7, #12]
  return result;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	fab3 f383 	clz	r3, r3
 800a006:	b2db      	uxtb	r3, r3
 800a008:	3301      	adds	r3, #1
 800a00a:	f003 021f 	and.w	r2, r3, #31
 800a00e:	4613      	mov	r3, r2
 800a010:	005b      	lsls	r3, r3, #1
 800a012:	4413      	add	r3, r2
 800a014:	3b1e      	subs	r3, #30
 800a016:	051b      	lsls	r3, r3, #20
 800a018:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800a01c:	430b      	orrs	r3, r1
 800a01e:	683a      	ldr	r2, [r7, #0]
 800a020:	6892      	ldr	r2, [r2, #8]
 800a022:	4619      	mov	r1, r3
 800a024:	f7ff f8d9 	bl	80091da <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	681a      	ldr	r2, [r3, #0]
 800a02c:	4b2e      	ldr	r3, [pc, #184]	; (800a0e8 <HAL_ADC_ConfigChannel+0x654>)
 800a02e:	4013      	ands	r3, r2
 800a030:	2b00      	cmp	r3, #0
 800a032:	f000 80c9 	beq.w	800a1c8 <HAL_ADC_ConfigChannel+0x734>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a03e:	d004      	beq.n	800a04a <HAL_ADC_ConfigChannel+0x5b6>
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	4a29      	ldr	r2, [pc, #164]	; (800a0ec <HAL_ADC_ConfigChannel+0x658>)
 800a046:	4293      	cmp	r3, r2
 800a048:	d101      	bne.n	800a04e <HAL_ADC_ConfigChannel+0x5ba>
 800a04a:	4b29      	ldr	r3, [pc, #164]	; (800a0f0 <HAL_ADC_ConfigChannel+0x65c>)
 800a04c:	e000      	b.n	800a050 <HAL_ADC_ConfigChannel+0x5bc>
 800a04e:	4b29      	ldr	r3, [pc, #164]	; (800a0f4 <HAL_ADC_ConfigChannel+0x660>)
 800a050:	4618      	mov	r0, r3
 800a052:	f7fe ffe7 	bl	8009024 <LL_ADC_GetCommonPathInternalCh>
 800a056:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	4a26      	ldr	r2, [pc, #152]	; (800a0f8 <HAL_ADC_ConfigChannel+0x664>)
 800a060:	4293      	cmp	r3, r2
 800a062:	d004      	beq.n	800a06e <HAL_ADC_ConfigChannel+0x5da>
 800a064:	683b      	ldr	r3, [r7, #0]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	4a24      	ldr	r2, [pc, #144]	; (800a0fc <HAL_ADC_ConfigChannel+0x668>)
 800a06a:	4293      	cmp	r3, r2
 800a06c:	d14e      	bne.n	800a10c <HAL_ADC_ConfigChannel+0x678>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800a06e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a072:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a076:	2b00      	cmp	r3, #0
 800a078:	d148      	bne.n	800a10c <HAL_ADC_ConfigChannel+0x678>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a082:	d005      	beq.n	800a090 <HAL_ADC_ConfigChannel+0x5fc>
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	4a1d      	ldr	r2, [pc, #116]	; (800a100 <HAL_ADC_ConfigChannel+0x66c>)
 800a08a:	4293      	cmp	r3, r2
 800a08c:	f040 8099 	bne.w	800a1c2 <HAL_ADC_ConfigChannel+0x72e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a098:	d004      	beq.n	800a0a4 <HAL_ADC_ConfigChannel+0x610>
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	4a13      	ldr	r2, [pc, #76]	; (800a0ec <HAL_ADC_ConfigChannel+0x658>)
 800a0a0:	4293      	cmp	r3, r2
 800a0a2:	d101      	bne.n	800a0a8 <HAL_ADC_ConfigChannel+0x614>
 800a0a4:	4a12      	ldr	r2, [pc, #72]	; (800a0f0 <HAL_ADC_ConfigChannel+0x65c>)
 800a0a6:	e000      	b.n	800a0aa <HAL_ADC_ConfigChannel+0x616>
 800a0a8:	4a12      	ldr	r2, [pc, #72]	; (800a0f4 <HAL_ADC_ConfigChannel+0x660>)
 800a0aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a0ae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a0b2:	4619      	mov	r1, r3
 800a0b4:	4610      	mov	r0, r2
 800a0b6:	f7fe ffa2 	bl	8008ffe <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800a0ba:	4b12      	ldr	r3, [pc, #72]	; (800a104 <HAL_ADC_ConfigChannel+0x670>)
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	099b      	lsrs	r3, r3, #6
 800a0c0:	4a11      	ldr	r2, [pc, #68]	; (800a108 <HAL_ADC_ConfigChannel+0x674>)
 800a0c2:	fba2 2303 	umull	r2, r3, r2, r3
 800a0c6:	099a      	lsrs	r2, r3, #6
 800a0c8:	4613      	mov	r3, r2
 800a0ca:	005b      	lsls	r3, r3, #1
 800a0cc:	4413      	add	r3, r2
 800a0ce:	009b      	lsls	r3, r3, #2
 800a0d0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800a0d2:	e002      	b.n	800a0da <HAL_ADC_ConfigChannel+0x646>
          {
            wait_loop_index--;
 800a0d4:	68bb      	ldr	r3, [r7, #8]
 800a0d6:	3b01      	subs	r3, #1
 800a0d8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800a0da:	68bb      	ldr	r3, [r7, #8]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d1f9      	bne.n	800a0d4 <HAL_ADC_ConfigChannel+0x640>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800a0e0:	e06f      	b.n	800a1c2 <HAL_ADC_ConfigChannel+0x72e>
 800a0e2:	bf00      	nop
 800a0e4:	407f0000 	.word	0x407f0000
 800a0e8:	80080000 	.word	0x80080000
 800a0ec:	50000100 	.word	0x50000100
 800a0f0:	50000300 	.word	0x50000300
 800a0f4:	50000700 	.word	0x50000700
 800a0f8:	c3210000 	.word	0xc3210000
 800a0fc:	90c00010 	.word	0x90c00010
 800a100:	50000600 	.word	0x50000600
 800a104:	20000eb0 	.word	0x20000eb0
 800a108:	053e2d63 	.word	0x053e2d63
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	4a32      	ldr	r2, [pc, #200]	; (800a1dc <HAL_ADC_ConfigChannel+0x748>)
 800a112:	4293      	cmp	r3, r2
 800a114:	d125      	bne.n	800a162 <HAL_ADC_ConfigChannel+0x6ce>
 800a116:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a11a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d11f      	bne.n	800a162 <HAL_ADC_ConfigChannel+0x6ce>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	4a2e      	ldr	r2, [pc, #184]	; (800a1e0 <HAL_ADC_ConfigChannel+0x74c>)
 800a128:	4293      	cmp	r3, r2
 800a12a:	d104      	bne.n	800a136 <HAL_ADC_ConfigChannel+0x6a2>
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	4a2c      	ldr	r2, [pc, #176]	; (800a1e4 <HAL_ADC_ConfigChannel+0x750>)
 800a132:	4293      	cmp	r3, r2
 800a134:	d047      	beq.n	800a1c6 <HAL_ADC_ConfigChannel+0x732>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a13e:	d004      	beq.n	800a14a <HAL_ADC_ConfigChannel+0x6b6>
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	4a26      	ldr	r2, [pc, #152]	; (800a1e0 <HAL_ADC_ConfigChannel+0x74c>)
 800a146:	4293      	cmp	r3, r2
 800a148:	d101      	bne.n	800a14e <HAL_ADC_ConfigChannel+0x6ba>
 800a14a:	4a27      	ldr	r2, [pc, #156]	; (800a1e8 <HAL_ADC_ConfigChannel+0x754>)
 800a14c:	e000      	b.n	800a150 <HAL_ADC_ConfigChannel+0x6bc>
 800a14e:	4a27      	ldr	r2, [pc, #156]	; (800a1ec <HAL_ADC_ConfigChannel+0x758>)
 800a150:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a154:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a158:	4619      	mov	r1, r3
 800a15a:	4610      	mov	r0, r2
 800a15c:	f7fe ff4f 	bl	8008ffe <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800a160:	e031      	b.n	800a1c6 <HAL_ADC_ConfigChannel+0x732>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800a162:	683b      	ldr	r3, [r7, #0]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	4a22      	ldr	r2, [pc, #136]	; (800a1f0 <HAL_ADC_ConfigChannel+0x75c>)
 800a168:	4293      	cmp	r3, r2
 800a16a:	d12d      	bne.n	800a1c8 <HAL_ADC_ConfigChannel+0x734>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800a16c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a170:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a174:	2b00      	cmp	r3, #0
 800a176:	d127      	bne.n	800a1c8 <HAL_ADC_ConfigChannel+0x734>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	4a18      	ldr	r2, [pc, #96]	; (800a1e0 <HAL_ADC_ConfigChannel+0x74c>)
 800a17e:	4293      	cmp	r3, r2
 800a180:	d022      	beq.n	800a1c8 <HAL_ADC_ConfigChannel+0x734>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a18a:	d004      	beq.n	800a196 <HAL_ADC_ConfigChannel+0x702>
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	4a13      	ldr	r2, [pc, #76]	; (800a1e0 <HAL_ADC_ConfigChannel+0x74c>)
 800a192:	4293      	cmp	r3, r2
 800a194:	d101      	bne.n	800a19a <HAL_ADC_ConfigChannel+0x706>
 800a196:	4a14      	ldr	r2, [pc, #80]	; (800a1e8 <HAL_ADC_ConfigChannel+0x754>)
 800a198:	e000      	b.n	800a19c <HAL_ADC_ConfigChannel+0x708>
 800a19a:	4a14      	ldr	r2, [pc, #80]	; (800a1ec <HAL_ADC_ConfigChannel+0x758>)
 800a19c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a1a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a1a4:	4619      	mov	r1, r3
 800a1a6:	4610      	mov	r0, r2
 800a1a8:	f7fe ff29 	bl	8008ffe <LL_ADC_SetCommonPathInternalCh>
 800a1ac:	e00c      	b.n	800a1c8 <HAL_ADC_ConfigChannel+0x734>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1b2:	f043 0220 	orr.w	r2, r3, #32
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800a1ba:	2301      	movs	r3, #1
 800a1bc:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800a1c0:	e002      	b.n	800a1c8 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800a1c2:	bf00      	nop
 800a1c4:	e000      	b.n	800a1c8 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800a1c6:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800a1d0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	3798      	adds	r7, #152	; 0x98
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	bd80      	pop	{r7, pc}
 800a1dc:	c7520000 	.word	0xc7520000
 800a1e0:	50000100 	.word	0x50000100
 800a1e4:	50000500 	.word	0x50000500
 800a1e8:	50000300 	.word	0x50000300
 800a1ec:	50000700 	.word	0x50000700
 800a1f0:	cb840000 	.word	0xcb840000

0800a1f4 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b088      	sub	sp, #32
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
 800a1fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800a1fe:	2300      	movs	r3, #0
 800a200:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	4618      	mov	r0, r3
 800a20c:	f7ff f904 	bl	8009418 <LL_ADC_REG_IsConversionOngoing>
 800a210:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	4618      	mov	r0, r3
 800a218:	f7ff f925 	bl	8009466 <LL_ADC_INJ_IsConversionOngoing>
 800a21c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800a21e:	693b      	ldr	r3, [r7, #16]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d103      	bne.n	800a22c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	2b00      	cmp	r3, #0
 800a228:	f000 8090 	beq.w	800a34c <ADC_ConversionStop+0x158>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	68db      	ldr	r3, [r3, #12]
 800a232:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a236:	2b00      	cmp	r3, #0
 800a238:	d02a      	beq.n	800a290 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	7f5b      	ldrb	r3, [r3, #29]
 800a23e:	2b01      	cmp	r3, #1
 800a240:	d126      	bne.n	800a290 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	7f1b      	ldrb	r3, [r3, #28]
 800a246:	2b01      	cmp	r3, #1
 800a248:	d122      	bne.n	800a290 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800a24a:	2301      	movs	r3, #1
 800a24c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800a24e:	e014      	b.n	800a27a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800a250:	69fb      	ldr	r3, [r7, #28]
 800a252:	4a41      	ldr	r2, [pc, #260]	; (800a358 <ADC_ConversionStop+0x164>)
 800a254:	4293      	cmp	r3, r2
 800a256:	d90d      	bls.n	800a274 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a25c:	f043 0210 	orr.w	r2, r3, #16
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a268:	f043 0201 	orr.w	r2, r3, #1
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800a270:	2301      	movs	r3, #1
 800a272:	e06c      	b.n	800a34e <ADC_ConversionStop+0x15a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800a274:	69fb      	ldr	r3, [r7, #28]
 800a276:	3301      	adds	r3, #1
 800a278:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a284:	2b40      	cmp	r3, #64	; 0x40
 800a286:	d1e3      	bne.n	800a250 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	2240      	movs	r2, #64	; 0x40
 800a28e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800a290:	69bb      	ldr	r3, [r7, #24]
 800a292:	2b02      	cmp	r3, #2
 800a294:	d014      	beq.n	800a2c0 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	4618      	mov	r0, r3
 800a29c:	f7ff f8bc 	bl	8009418 <LL_ADC_REG_IsConversionOngoing>
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d00c      	beq.n	800a2c0 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	f7ff f879 	bl	80093a2 <LL_ADC_IsDisableOngoing>
 800a2b0:	4603      	mov	r3, r0
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d104      	bne.n	800a2c0 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	f7ff f898 	bl	80093f0 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800a2c0:	69bb      	ldr	r3, [r7, #24]
 800a2c2:	2b01      	cmp	r3, #1
 800a2c4:	d014      	beq.n	800a2f0 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	f7ff f8cb 	bl	8009466 <LL_ADC_INJ_IsConversionOngoing>
 800a2d0:	4603      	mov	r3, r0
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d00c      	beq.n	800a2f0 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	4618      	mov	r0, r3
 800a2dc:	f7ff f861 	bl	80093a2 <LL_ADC_IsDisableOngoing>
 800a2e0:	4603      	mov	r3, r0
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d104      	bne.n	800a2f0 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	f7ff f8a7 	bl	800943e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800a2f0:	69bb      	ldr	r3, [r7, #24]
 800a2f2:	2b02      	cmp	r3, #2
 800a2f4:	d004      	beq.n	800a300 <ADC_ConversionStop+0x10c>
 800a2f6:	2b03      	cmp	r3, #3
 800a2f8:	d105      	bne.n	800a306 <ADC_ConversionStop+0x112>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800a2fa:	230c      	movs	r3, #12
 800a2fc:	617b      	str	r3, [r7, #20]
        break;
 800a2fe:	e005      	b.n	800a30c <ADC_ConversionStop+0x118>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800a300:	2308      	movs	r3, #8
 800a302:	617b      	str	r3, [r7, #20]
        break;
 800a304:	e002      	b.n	800a30c <ADC_ConversionStop+0x118>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800a306:	2304      	movs	r3, #4
 800a308:	617b      	str	r3, [r7, #20]
        break;
 800a30a:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800a30c:	f7fe fe36 	bl	8008f7c <HAL_GetTick>
 800a310:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800a312:	e014      	b.n	800a33e <ADC_ConversionStop+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800a314:	f7fe fe32 	bl	8008f7c <HAL_GetTick>
 800a318:	4602      	mov	r2, r0
 800a31a:	68bb      	ldr	r3, [r7, #8]
 800a31c:	1ad3      	subs	r3, r2, r3
 800a31e:	2b05      	cmp	r3, #5
 800a320:	d90d      	bls.n	800a33e <ADC_ConversionStop+0x14a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a326:	f043 0210 	orr.w	r2, r3, #16
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a332:	f043 0201 	orr.w	r2, r3, #1
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800a33a:	2301      	movs	r3, #1
 800a33c:	e007      	b.n	800a34e <ADC_ConversionStop+0x15a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	689a      	ldr	r2, [r3, #8]
 800a344:	697b      	ldr	r3, [r7, #20]
 800a346:	4013      	ands	r3, r2
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d1e3      	bne.n	800a314 <ADC_ConversionStop+0x120>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800a34c:	2300      	movs	r3, #0
}
 800a34e:	4618      	mov	r0, r3
 800a350:	3720      	adds	r7, #32
 800a352:	46bd      	mov	sp, r7
 800a354:	bd80      	pop	{r7, pc}
 800a356:	bf00      	nop
 800a358:	a33fffff 	.word	0xa33fffff

0800a35c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b084      	sub	sp, #16
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	4618      	mov	r0, r3
 800a36a:	f7ff f807 	bl	800937c <LL_ADC_IsEnabled>
 800a36e:	4603      	mov	r3, r0
 800a370:	2b00      	cmp	r3, #0
 800a372:	d146      	bne.n	800a402 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	689a      	ldr	r2, [r3, #8]
 800a37a:	4b24      	ldr	r3, [pc, #144]	; (800a40c <ADC_Enable+0xb0>)
 800a37c:	4013      	ands	r3, r2
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d00d      	beq.n	800a39e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a386:	f043 0210 	orr.w	r2, r3, #16
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a392:	f043 0201 	orr.w	r2, r3, #1
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800a39a:	2301      	movs	r3, #1
 800a39c:	e032      	b.n	800a404 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	f7fe ffc2 	bl	800932c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800a3a8:	f7fe fde8 	bl	8008f7c <HAL_GetTick>
 800a3ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800a3ae:	e021      	b.n	800a3f4 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	f7fe ffe1 	bl	800937c <LL_ADC_IsEnabled>
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d104      	bne.n	800a3ca <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	f7fe ffb1 	bl	800932c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800a3ca:	f7fe fdd7 	bl	8008f7c <HAL_GetTick>
 800a3ce:	4602      	mov	r2, r0
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	1ad3      	subs	r3, r2, r3
 800a3d4:	2b02      	cmp	r3, #2
 800a3d6:	d90d      	bls.n	800a3f4 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a3dc:	f043 0210 	orr.w	r2, r3, #16
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a3e8:	f043 0201 	orr.w	r2, r3, #1
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800a3f0:	2301      	movs	r3, #1
 800a3f2:	e007      	b.n	800a404 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	f003 0301 	and.w	r3, r3, #1
 800a3fe:	2b01      	cmp	r3, #1
 800a400:	d1d6      	bne.n	800a3b0 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800a402:	2300      	movs	r3, #0
}
 800a404:	4618      	mov	r0, r3
 800a406:	3710      	adds	r7, #16
 800a408:	46bd      	mov	sp, r7
 800a40a:	bd80      	pop	{r7, pc}
 800a40c:	8000003f 	.word	0x8000003f

0800a410 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b084      	sub	sp, #16
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	4618      	mov	r0, r3
 800a41e:	f7fe ffc0 	bl	80093a2 <LL_ADC_IsDisableOngoing>
 800a422:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	4618      	mov	r0, r3
 800a42a:	f7fe ffa7 	bl	800937c <LL_ADC_IsEnabled>
 800a42e:	4603      	mov	r3, r0
 800a430:	2b00      	cmp	r3, #0
 800a432:	d040      	beq.n	800a4b6 <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d13d      	bne.n	800a4b6 <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	689b      	ldr	r3, [r3, #8]
 800a440:	f003 030d 	and.w	r3, r3, #13
 800a444:	2b01      	cmp	r3, #1
 800a446:	d10c      	bne.n	800a462 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	4618      	mov	r0, r3
 800a44e:	f7fe ff81 	bl	8009354 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	2203      	movs	r2, #3
 800a458:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800a45a:	f7fe fd8f 	bl	8008f7c <HAL_GetTick>
 800a45e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800a460:	e022      	b.n	800a4a8 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a466:	f043 0210 	orr.w	r2, r3, #16
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a472:	f043 0201 	orr.w	r2, r3, #1
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 800a47a:	2301      	movs	r3, #1
 800a47c:	e01c      	b.n	800a4b8 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800a47e:	f7fe fd7d 	bl	8008f7c <HAL_GetTick>
 800a482:	4602      	mov	r2, r0
 800a484:	68bb      	ldr	r3, [r7, #8]
 800a486:	1ad3      	subs	r3, r2, r3
 800a488:	2b02      	cmp	r3, #2
 800a48a:	d90d      	bls.n	800a4a8 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a490:	f043 0210 	orr.w	r2, r3, #16
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a49c:	f043 0201 	orr.w	r2, r3, #1
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800a4a4:	2301      	movs	r3, #1
 800a4a6:	e007      	b.n	800a4b8 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	689b      	ldr	r3, [r3, #8]
 800a4ae:	f003 0301 	and.w	r3, r3, #1
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d1e3      	bne.n	800a47e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800a4b6:	2300      	movs	r3, #0
}
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	3710      	adds	r7, #16
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	bd80      	pop	{r7, pc}

0800a4c0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b084      	sub	sp, #16
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4cc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a4d2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d14b      	bne.n	800a572 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a4de:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	f003 0308 	and.w	r3, r3, #8
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d021      	beq.n	800a538 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	f7fe fe32 	bl	8009162 <LL_ADC_REG_IsTriggerSourceSWStart>
 800a4fe:	4603      	mov	r3, r0
 800a500:	2b00      	cmp	r3, #0
 800a502:	d032      	beq.n	800a56a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	68db      	ldr	r3, [r3, #12]
 800a50a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d12b      	bne.n	800a56a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a516:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a522:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a526:	2b00      	cmp	r3, #0
 800a528:	d11f      	bne.n	800a56a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a52e:	f043 0201 	orr.w	r2, r3, #1
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	65da      	str	r2, [r3, #92]	; 0x5c
 800a536:	e018      	b.n	800a56a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	68db      	ldr	r3, [r3, #12]
 800a53e:	f003 0302 	and.w	r3, r3, #2
 800a542:	2b00      	cmp	r3, #0
 800a544:	d111      	bne.n	800a56a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a54a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a556:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d105      	bne.n	800a56a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a562:	f043 0201 	orr.w	r2, r3, #1
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800a56a:	68f8      	ldr	r0, [r7, #12]
 800a56c:	f7fb ff9c 	bl	80064a8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800a570:	e00e      	b.n	800a590 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a576:	f003 0310 	and.w	r3, r3, #16
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d003      	beq.n	800a586 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800a57e:	68f8      	ldr	r0, [r7, #12]
 800a580:	f7ff fa7d 	bl	8009a7e <HAL_ADC_ErrorCallback>
}
 800a584:	e004      	b.n	800a590 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a58a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a58c:	6878      	ldr	r0, [r7, #4]
 800a58e:	4798      	blx	r3
}
 800a590:	bf00      	nop
 800a592:	3710      	adds	r7, #16
 800a594:	46bd      	mov	sp, r7
 800a596:	bd80      	pop	{r7, pc}

0800a598 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	b084      	sub	sp, #16
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5a4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800a5a6:	68f8      	ldr	r0, [r7, #12]
 800a5a8:	f7ff fa5f 	bl	8009a6a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a5ac:	bf00      	nop
 800a5ae:	3710      	adds	r7, #16
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	bd80      	pop	{r7, pc}

0800a5b4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b084      	sub	sp, #16
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5c0:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a5c6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a5d2:	f043 0204 	orr.w	r2, r3, #4
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800a5da:	68f8      	ldr	r0, [r7, #12]
 800a5dc:	f7ff fa4f 	bl	8009a7e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a5e0:	bf00      	nop
 800a5e2:	3710      	adds	r7, #16
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	bd80      	pop	{r7, pc}

0800a5e8 <LL_ADC_IsEnabled>:
{
 800a5e8:	b480      	push	{r7}
 800a5ea:	b083      	sub	sp, #12
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	689b      	ldr	r3, [r3, #8]
 800a5f4:	f003 0301 	and.w	r3, r3, #1
 800a5f8:	2b01      	cmp	r3, #1
 800a5fa:	d101      	bne.n	800a600 <LL_ADC_IsEnabled+0x18>
 800a5fc:	2301      	movs	r3, #1
 800a5fe:	e000      	b.n	800a602 <LL_ADC_IsEnabled+0x1a>
 800a600:	2300      	movs	r3, #0
}
 800a602:	4618      	mov	r0, r3
 800a604:	370c      	adds	r7, #12
 800a606:	46bd      	mov	sp, r7
 800a608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60c:	4770      	bx	lr

0800a60e <LL_ADC_REG_IsConversionOngoing>:
{
 800a60e:	b480      	push	{r7}
 800a610:	b083      	sub	sp, #12
 800a612:	af00      	add	r7, sp, #0
 800a614:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	689b      	ldr	r3, [r3, #8]
 800a61a:	f003 0304 	and.w	r3, r3, #4
 800a61e:	2b04      	cmp	r3, #4
 800a620:	d101      	bne.n	800a626 <LL_ADC_REG_IsConversionOngoing+0x18>
 800a622:	2301      	movs	r3, #1
 800a624:	e000      	b.n	800a628 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800a626:	2300      	movs	r3, #0
}
 800a628:	4618      	mov	r0, r3
 800a62a:	370c      	adds	r7, #12
 800a62c:	46bd      	mov	sp, r7
 800a62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a632:	4770      	bx	lr

0800a634 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800a634:	b590      	push	{r4, r7, lr}
 800a636:	b0a1      	sub	sp, #132	; 0x84
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
 800a63c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a63e:	2300      	movs	r3, #0
 800a640:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800a64a:	2b01      	cmp	r3, #1
 800a64c:	d101      	bne.n	800a652 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800a64e:	2302      	movs	r3, #2
 800a650:	e0e3      	b.n	800a81a <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	2201      	movs	r2, #1
 800a656:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a662:	d102      	bne.n	800a66a <HAL_ADCEx_MultiModeConfigChannel+0x36>
 800a664:	4b6f      	ldr	r3, [pc, #444]	; (800a824 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800a666:	60bb      	str	r3, [r7, #8]
 800a668:	e009      	b.n	800a67e <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	4a6e      	ldr	r2, [pc, #440]	; (800a828 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 800a670:	4293      	cmp	r3, r2
 800a672:	d102      	bne.n	800a67a <HAL_ADCEx_MultiModeConfigChannel+0x46>
 800a674:	4b6d      	ldr	r3, [pc, #436]	; (800a82c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800a676:	60bb      	str	r3, [r7, #8]
 800a678:	e001      	b.n	800a67e <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 800a67a:	2300      	movs	r3, #0
 800a67c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800a67e:	68bb      	ldr	r3, [r7, #8]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d10b      	bne.n	800a69c <HAL_ADCEx_MultiModeConfigChannel+0x68>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a688:	f043 0220 	orr.w	r2, r3, #32
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	2200      	movs	r2, #0
 800a694:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 800a698:	2301      	movs	r3, #1
 800a69a:	e0be      	b.n	800a81a <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800a69c:	68bb      	ldr	r3, [r7, #8]
 800a69e:	4618      	mov	r0, r3
 800a6a0:	f7ff ffb5 	bl	800a60e <LL_ADC_REG_IsConversionOngoing>
 800a6a4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	f7ff ffaf 	bl	800a60e <LL_ADC_REG_IsConversionOngoing>
 800a6b0:	4603      	mov	r3, r0
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	f040 80a0 	bne.w	800a7f8 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800a6b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	f040 809c 	bne.w	800a7f8 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a6c8:	d004      	beq.n	800a6d4 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	4a55      	ldr	r2, [pc, #340]	; (800a824 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800a6d0:	4293      	cmp	r3, r2
 800a6d2:	d101      	bne.n	800a6d8 <HAL_ADCEx_MultiModeConfigChannel+0xa4>
 800a6d4:	4b56      	ldr	r3, [pc, #344]	; (800a830 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800a6d6:	e000      	b.n	800a6da <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 800a6d8:	4b56      	ldr	r3, [pc, #344]	; (800a834 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800a6da:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d04b      	beq.n	800a77c <HAL_ADCEx_MultiModeConfigChannel+0x148>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800a6e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a6e6:	689b      	ldr	r3, [r3, #8]
 800a6e8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	6859      	ldr	r1, [r3, #4]
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a6f6:	035b      	lsls	r3, r3, #13
 800a6f8:	430b      	orrs	r3, r1
 800a6fa:	431a      	orrs	r2, r3
 800a6fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a6fe:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a708:	d004      	beq.n	800a714 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	4a45      	ldr	r2, [pc, #276]	; (800a824 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800a710:	4293      	cmp	r3, r2
 800a712:	d10f      	bne.n	800a734 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 800a714:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800a718:	f7ff ff66 	bl	800a5e8 <LL_ADC_IsEnabled>
 800a71c:	4604      	mov	r4, r0
 800a71e:	4841      	ldr	r0, [pc, #260]	; (800a824 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800a720:	f7ff ff62 	bl	800a5e8 <LL_ADC_IsEnabled>
 800a724:	4603      	mov	r3, r0
 800a726:	4323      	orrs	r3, r4
 800a728:	2b00      	cmp	r3, #0
 800a72a:	bf0c      	ite	eq
 800a72c:	2301      	moveq	r3, #1
 800a72e:	2300      	movne	r3, #0
 800a730:	b2db      	uxtb	r3, r3
 800a732:	e012      	b.n	800a75a <HAL_ADCEx_MultiModeConfigChannel+0x126>
 800a734:	483c      	ldr	r0, [pc, #240]	; (800a828 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 800a736:	f7ff ff57 	bl	800a5e8 <LL_ADC_IsEnabled>
 800a73a:	4604      	mov	r4, r0
 800a73c:	483b      	ldr	r0, [pc, #236]	; (800a82c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800a73e:	f7ff ff53 	bl	800a5e8 <LL_ADC_IsEnabled>
 800a742:	4603      	mov	r3, r0
 800a744:	431c      	orrs	r4, r3
 800a746:	483c      	ldr	r0, [pc, #240]	; (800a838 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800a748:	f7ff ff4e 	bl	800a5e8 <LL_ADC_IsEnabled>
 800a74c:	4603      	mov	r3, r0
 800a74e:	4323      	orrs	r3, r4
 800a750:	2b00      	cmp	r3, #0
 800a752:	bf0c      	ite	eq
 800a754:	2301      	moveq	r3, #1
 800a756:	2300      	movne	r3, #0
 800a758:	b2db      	uxtb	r3, r3
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d056      	beq.n	800a80c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800a75e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a760:	689b      	ldr	r3, [r3, #8]
 800a762:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800a766:	f023 030f 	bic.w	r3, r3, #15
 800a76a:	683a      	ldr	r2, [r7, #0]
 800a76c:	6811      	ldr	r1, [r2, #0]
 800a76e:	683a      	ldr	r2, [r7, #0]
 800a770:	6892      	ldr	r2, [r2, #8]
 800a772:	430a      	orrs	r2, r1
 800a774:	431a      	orrs	r2, r3
 800a776:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a778:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800a77a:	e047      	b.n	800a80c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800a77c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a77e:	689b      	ldr	r3, [r3, #8]
 800a780:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a784:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a786:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a790:	d004      	beq.n	800a79c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	4a23      	ldr	r2, [pc, #140]	; (800a824 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800a798:	4293      	cmp	r3, r2
 800a79a:	d10f      	bne.n	800a7bc <HAL_ADCEx_MultiModeConfigChannel+0x188>
 800a79c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800a7a0:	f7ff ff22 	bl	800a5e8 <LL_ADC_IsEnabled>
 800a7a4:	4604      	mov	r4, r0
 800a7a6:	481f      	ldr	r0, [pc, #124]	; (800a824 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800a7a8:	f7ff ff1e 	bl	800a5e8 <LL_ADC_IsEnabled>
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	4323      	orrs	r3, r4
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	bf0c      	ite	eq
 800a7b4:	2301      	moveq	r3, #1
 800a7b6:	2300      	movne	r3, #0
 800a7b8:	b2db      	uxtb	r3, r3
 800a7ba:	e012      	b.n	800a7e2 <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
 800a7bc:	481a      	ldr	r0, [pc, #104]	; (800a828 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 800a7be:	f7ff ff13 	bl	800a5e8 <LL_ADC_IsEnabled>
 800a7c2:	4604      	mov	r4, r0
 800a7c4:	4819      	ldr	r0, [pc, #100]	; (800a82c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800a7c6:	f7ff ff0f 	bl	800a5e8 <LL_ADC_IsEnabled>
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	431c      	orrs	r4, r3
 800a7ce:	481a      	ldr	r0, [pc, #104]	; (800a838 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800a7d0:	f7ff ff0a 	bl	800a5e8 <LL_ADC_IsEnabled>
 800a7d4:	4603      	mov	r3, r0
 800a7d6:	4323      	orrs	r3, r4
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	bf0c      	ite	eq
 800a7dc:	2301      	moveq	r3, #1
 800a7de:	2300      	movne	r3, #0
 800a7e0:	b2db      	uxtb	r3, r3
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d012      	beq.n	800a80c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800a7e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a7e8:	689b      	ldr	r3, [r3, #8]
 800a7ea:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800a7ee:	f023 030f 	bic.w	r3, r3, #15
 800a7f2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a7f4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800a7f6:	e009      	b.n	800a80c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a7fc:	f043 0220 	orr.w	r2, r3, #32
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800a804:	2301      	movs	r3, #1
 800a806:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800a80a:	e000      	b.n	800a80e <HAL_ADCEx_MultiModeConfigChannel+0x1da>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800a80c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	2200      	movs	r2, #0
 800a812:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800a816:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800a81a:	4618      	mov	r0, r3
 800a81c:	3784      	adds	r7, #132	; 0x84
 800a81e:	46bd      	mov	sp, r7
 800a820:	bd90      	pop	{r4, r7, pc}
 800a822:	bf00      	nop
 800a824:	50000100 	.word	0x50000100
 800a828:	50000400 	.word	0x50000400
 800a82c:	50000500 	.word	0x50000500
 800a830:	50000300 	.word	0x50000300
 800a834:	50000700 	.word	0x50000700
 800a838:	50000600 	.word	0x50000600

0800a83c <LL_EXTI_EnableIT_0_31>:
{
 800a83c:	b480      	push	{r7}
 800a83e:	b083      	sub	sp, #12
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800a844:	4b05      	ldr	r3, [pc, #20]	; (800a85c <LL_EXTI_EnableIT_0_31+0x20>)
 800a846:	681a      	ldr	r2, [r3, #0]
 800a848:	4904      	ldr	r1, [pc, #16]	; (800a85c <LL_EXTI_EnableIT_0_31+0x20>)
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	4313      	orrs	r3, r2
 800a84e:	600b      	str	r3, [r1, #0]
}
 800a850:	bf00      	nop
 800a852:	370c      	adds	r7, #12
 800a854:	46bd      	mov	sp, r7
 800a856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85a:	4770      	bx	lr
 800a85c:	40010400 	.word	0x40010400

0800a860 <LL_EXTI_EnableIT_32_63>:
{
 800a860:	b480      	push	{r7}
 800a862:	b083      	sub	sp, #12
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800a868:	4b05      	ldr	r3, [pc, #20]	; (800a880 <LL_EXTI_EnableIT_32_63+0x20>)
 800a86a:	6a1a      	ldr	r2, [r3, #32]
 800a86c:	4904      	ldr	r1, [pc, #16]	; (800a880 <LL_EXTI_EnableIT_32_63+0x20>)
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	4313      	orrs	r3, r2
 800a872:	620b      	str	r3, [r1, #32]
}
 800a874:	bf00      	nop
 800a876:	370c      	adds	r7, #12
 800a878:	46bd      	mov	sp, r7
 800a87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87e:	4770      	bx	lr
 800a880:	40010400 	.word	0x40010400

0800a884 <LL_EXTI_DisableIT_0_31>:
{
 800a884:	b480      	push	{r7}
 800a886:	b083      	sub	sp, #12
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800a88c:	4b06      	ldr	r3, [pc, #24]	; (800a8a8 <LL_EXTI_DisableIT_0_31+0x24>)
 800a88e:	681a      	ldr	r2, [r3, #0]
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	43db      	mvns	r3, r3
 800a894:	4904      	ldr	r1, [pc, #16]	; (800a8a8 <LL_EXTI_DisableIT_0_31+0x24>)
 800a896:	4013      	ands	r3, r2
 800a898:	600b      	str	r3, [r1, #0]
}
 800a89a:	bf00      	nop
 800a89c:	370c      	adds	r7, #12
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a4:	4770      	bx	lr
 800a8a6:	bf00      	nop
 800a8a8:	40010400 	.word	0x40010400

0800a8ac <LL_EXTI_DisableIT_32_63>:
{
 800a8ac:	b480      	push	{r7}
 800a8ae:	b083      	sub	sp, #12
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 800a8b4:	4b06      	ldr	r3, [pc, #24]	; (800a8d0 <LL_EXTI_DisableIT_32_63+0x24>)
 800a8b6:	6a1a      	ldr	r2, [r3, #32]
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	43db      	mvns	r3, r3
 800a8bc:	4904      	ldr	r1, [pc, #16]	; (800a8d0 <LL_EXTI_DisableIT_32_63+0x24>)
 800a8be:	4013      	ands	r3, r2
 800a8c0:	620b      	str	r3, [r1, #32]
}
 800a8c2:	bf00      	nop
 800a8c4:	370c      	adds	r7, #12
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8cc:	4770      	bx	lr
 800a8ce:	bf00      	nop
 800a8d0:	40010400 	.word	0x40010400

0800a8d4 <LL_EXTI_EnableEvent_0_31>:
{
 800a8d4:	b480      	push	{r7}
 800a8d6:	b083      	sub	sp, #12
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 800a8dc:	4b05      	ldr	r3, [pc, #20]	; (800a8f4 <LL_EXTI_EnableEvent_0_31+0x20>)
 800a8de:	685a      	ldr	r2, [r3, #4]
 800a8e0:	4904      	ldr	r1, [pc, #16]	; (800a8f4 <LL_EXTI_EnableEvent_0_31+0x20>)
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	4313      	orrs	r3, r2
 800a8e6:	604b      	str	r3, [r1, #4]
}
 800a8e8:	bf00      	nop
 800a8ea:	370c      	adds	r7, #12
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f2:	4770      	bx	lr
 800a8f4:	40010400 	.word	0x40010400

0800a8f8 <LL_EXTI_EnableEvent_32_63>:
{
 800a8f8:	b480      	push	{r7}
 800a8fa:	b083      	sub	sp, #12
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 800a900:	4b05      	ldr	r3, [pc, #20]	; (800a918 <LL_EXTI_EnableEvent_32_63+0x20>)
 800a902:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a904:	4904      	ldr	r1, [pc, #16]	; (800a918 <LL_EXTI_EnableEvent_32_63+0x20>)
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	4313      	orrs	r3, r2
 800a90a:	624b      	str	r3, [r1, #36]	; 0x24
}
 800a90c:	bf00      	nop
 800a90e:	370c      	adds	r7, #12
 800a910:	46bd      	mov	sp, r7
 800a912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a916:	4770      	bx	lr
 800a918:	40010400 	.word	0x40010400

0800a91c <LL_EXTI_DisableEvent_0_31>:
{
 800a91c:	b480      	push	{r7}
 800a91e:	b083      	sub	sp, #12
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800a924:	4b06      	ldr	r3, [pc, #24]	; (800a940 <LL_EXTI_DisableEvent_0_31+0x24>)
 800a926:	685a      	ldr	r2, [r3, #4]
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	43db      	mvns	r3, r3
 800a92c:	4904      	ldr	r1, [pc, #16]	; (800a940 <LL_EXTI_DisableEvent_0_31+0x24>)
 800a92e:	4013      	ands	r3, r2
 800a930:	604b      	str	r3, [r1, #4]
}
 800a932:	bf00      	nop
 800a934:	370c      	adds	r7, #12
 800a936:	46bd      	mov	sp, r7
 800a938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93c:	4770      	bx	lr
 800a93e:	bf00      	nop
 800a940:	40010400 	.word	0x40010400

0800a944 <LL_EXTI_DisableEvent_32_63>:
{
 800a944:	b480      	push	{r7}
 800a946:	b083      	sub	sp, #12
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 800a94c:	4b06      	ldr	r3, [pc, #24]	; (800a968 <LL_EXTI_DisableEvent_32_63+0x24>)
 800a94e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	43db      	mvns	r3, r3
 800a954:	4904      	ldr	r1, [pc, #16]	; (800a968 <LL_EXTI_DisableEvent_32_63+0x24>)
 800a956:	4013      	ands	r3, r2
 800a958:	624b      	str	r3, [r1, #36]	; 0x24
}
 800a95a:	bf00      	nop
 800a95c:	370c      	adds	r7, #12
 800a95e:	46bd      	mov	sp, r7
 800a960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a964:	4770      	bx	lr
 800a966:	bf00      	nop
 800a968:	40010400 	.word	0x40010400

0800a96c <LL_EXTI_EnableRisingTrig_0_31>:
{
 800a96c:	b480      	push	{r7}
 800a96e:	b083      	sub	sp, #12
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800a974:	4b05      	ldr	r3, [pc, #20]	; (800a98c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800a976:	689a      	ldr	r2, [r3, #8]
 800a978:	4904      	ldr	r1, [pc, #16]	; (800a98c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	4313      	orrs	r3, r2
 800a97e:	608b      	str	r3, [r1, #8]
}
 800a980:	bf00      	nop
 800a982:	370c      	adds	r7, #12
 800a984:	46bd      	mov	sp, r7
 800a986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98a:	4770      	bx	lr
 800a98c:	40010400 	.word	0x40010400

0800a990 <LL_EXTI_EnableRisingTrig_32_63>:
{
 800a990:	b480      	push	{r7}
 800a992:	b083      	sub	sp, #12
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800a998:	4b05      	ldr	r3, [pc, #20]	; (800a9b0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800a99a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a99c:	4904      	ldr	r1, [pc, #16]	; (800a9b0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	4313      	orrs	r3, r2
 800a9a2:	628b      	str	r3, [r1, #40]	; 0x28
}
 800a9a4:	bf00      	nop
 800a9a6:	370c      	adds	r7, #12
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ae:	4770      	bx	lr
 800a9b0:	40010400 	.word	0x40010400

0800a9b4 <LL_EXTI_DisableRisingTrig_0_31>:
{
 800a9b4:	b480      	push	{r7}
 800a9b6:	b083      	sub	sp, #12
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800a9bc:	4b06      	ldr	r3, [pc, #24]	; (800a9d8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800a9be:	689a      	ldr	r2, [r3, #8]
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	43db      	mvns	r3, r3
 800a9c4:	4904      	ldr	r1, [pc, #16]	; (800a9d8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800a9c6:	4013      	ands	r3, r2
 800a9c8:	608b      	str	r3, [r1, #8]
}
 800a9ca:	bf00      	nop
 800a9cc:	370c      	adds	r7, #12
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d4:	4770      	bx	lr
 800a9d6:	bf00      	nop
 800a9d8:	40010400 	.word	0x40010400

0800a9dc <LL_EXTI_DisableRisingTrig_32_63>:
{
 800a9dc:	b480      	push	{r7}
 800a9de:	b083      	sub	sp, #12
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 800a9e4:	4b06      	ldr	r3, [pc, #24]	; (800aa00 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800a9e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	43db      	mvns	r3, r3
 800a9ec:	4904      	ldr	r1, [pc, #16]	; (800aa00 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800a9ee:	4013      	ands	r3, r2
 800a9f0:	628b      	str	r3, [r1, #40]	; 0x28
}
 800a9f2:	bf00      	nop
 800a9f4:	370c      	adds	r7, #12
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fc:	4770      	bx	lr
 800a9fe:	bf00      	nop
 800aa00:	40010400 	.word	0x40010400

0800aa04 <LL_EXTI_EnableFallingTrig_0_31>:
{
 800aa04:	b480      	push	{r7}
 800aa06:	b083      	sub	sp, #12
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800aa0c:	4b05      	ldr	r3, [pc, #20]	; (800aa24 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800aa0e:	68da      	ldr	r2, [r3, #12]
 800aa10:	4904      	ldr	r1, [pc, #16]	; (800aa24 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	4313      	orrs	r3, r2
 800aa16:	60cb      	str	r3, [r1, #12]
}
 800aa18:	bf00      	nop
 800aa1a:	370c      	adds	r7, #12
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa22:	4770      	bx	lr
 800aa24:	40010400 	.word	0x40010400

0800aa28 <LL_EXTI_EnableFallingTrig_32_63>:
{
 800aa28:	b480      	push	{r7}
 800aa2a:	b083      	sub	sp, #12
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 800aa30:	4b05      	ldr	r3, [pc, #20]	; (800aa48 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800aa32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa34:	4904      	ldr	r1, [pc, #16]	; (800aa48 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	4313      	orrs	r3, r2
 800aa3a:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800aa3c:	bf00      	nop
 800aa3e:	370c      	adds	r7, #12
 800aa40:	46bd      	mov	sp, r7
 800aa42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa46:	4770      	bx	lr
 800aa48:	40010400 	.word	0x40010400

0800aa4c <LL_EXTI_DisableFallingTrig_0_31>:
{
 800aa4c:	b480      	push	{r7}
 800aa4e:	b083      	sub	sp, #12
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800aa54:	4b06      	ldr	r3, [pc, #24]	; (800aa70 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800aa56:	68da      	ldr	r2, [r3, #12]
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	43db      	mvns	r3, r3
 800aa5c:	4904      	ldr	r1, [pc, #16]	; (800aa70 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800aa5e:	4013      	ands	r3, r2
 800aa60:	60cb      	str	r3, [r1, #12]
}
 800aa62:	bf00      	nop
 800aa64:	370c      	adds	r7, #12
 800aa66:	46bd      	mov	sp, r7
 800aa68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6c:	4770      	bx	lr
 800aa6e:	bf00      	nop
 800aa70:	40010400 	.word	0x40010400

0800aa74 <LL_EXTI_DisableFallingTrig_32_63>:
{
 800aa74:	b480      	push	{r7}
 800aa76:	b083      	sub	sp, #12
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 800aa7c:	4b06      	ldr	r3, [pc, #24]	; (800aa98 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800aa7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	43db      	mvns	r3, r3
 800aa84:	4904      	ldr	r1, [pc, #16]	; (800aa98 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800aa86:	4013      	ands	r3, r2
 800aa88:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800aa8a:	bf00      	nop
 800aa8c:	370c      	adds	r7, #12
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa94:	4770      	bx	lr
 800aa96:	bf00      	nop
 800aa98:	40010400 	.word	0x40010400

0800aa9c <LL_EXTI_IsActiveFlag_0_31>:
{
 800aa9c:	b480      	push	{r7}
 800aa9e:	b083      	sub	sp, #12
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 800aaa4:	4b07      	ldr	r3, [pc, #28]	; (800aac4 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 800aaa6:	695a      	ldr	r2, [r3, #20]
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	4013      	ands	r3, r2
 800aaac:	687a      	ldr	r2, [r7, #4]
 800aaae:	429a      	cmp	r2, r3
 800aab0:	d101      	bne.n	800aab6 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 800aab2:	2301      	movs	r3, #1
 800aab4:	e000      	b.n	800aab8 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 800aab6:	2300      	movs	r3, #0
}
 800aab8:	4618      	mov	r0, r3
 800aaba:	370c      	adds	r7, #12
 800aabc:	46bd      	mov	sp, r7
 800aabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac2:	4770      	bx	lr
 800aac4:	40010400 	.word	0x40010400

0800aac8 <LL_EXTI_IsActiveFlag_32_63>:
{
 800aac8:	b480      	push	{r7}
 800aaca:	b083      	sub	sp, #12
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR2, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 800aad0:	4b07      	ldr	r3, [pc, #28]	; (800aaf0 <LL_EXTI_IsActiveFlag_32_63+0x28>)
 800aad2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	4013      	ands	r3, r2
 800aad8:	687a      	ldr	r2, [r7, #4]
 800aada:	429a      	cmp	r2, r3
 800aadc:	d101      	bne.n	800aae2 <LL_EXTI_IsActiveFlag_32_63+0x1a>
 800aade:	2301      	movs	r3, #1
 800aae0:	e000      	b.n	800aae4 <LL_EXTI_IsActiveFlag_32_63+0x1c>
 800aae2:	2300      	movs	r3, #0
}
 800aae4:	4618      	mov	r0, r3
 800aae6:	370c      	adds	r7, #12
 800aae8:	46bd      	mov	sp, r7
 800aaea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaee:	4770      	bx	lr
 800aaf0:	40010400 	.word	0x40010400

0800aaf4 <LL_EXTI_ClearFlag_0_31>:
{
 800aaf4:	b480      	push	{r7}
 800aaf6:	b083      	sub	sp, #12
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 800aafc:	4a04      	ldr	r2, [pc, #16]	; (800ab10 <LL_EXTI_ClearFlag_0_31+0x1c>)
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	6153      	str	r3, [r2, #20]
}
 800ab02:	bf00      	nop
 800ab04:	370c      	adds	r7, #12
 800ab06:	46bd      	mov	sp, r7
 800ab08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0c:	4770      	bx	lr
 800ab0e:	bf00      	nop
 800ab10:	40010400 	.word	0x40010400

0800ab14 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 800ab14:	b480      	push	{r7}
 800ab16:	b083      	sub	sp, #12
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 800ab1c:	4a04      	ldr	r2, [pc, #16]	; (800ab30 <LL_EXTI_ClearFlag_32_63+0x1c>)
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	6353      	str	r3, [r2, #52]	; 0x34
}
 800ab22:	bf00      	nop
 800ab24:	370c      	adds	r7, #12
 800ab26:	46bd      	mov	sp, r7
 800ab28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2c:	4770      	bx	lr
 800ab2e:	bf00      	nop
 800ab30:	40010400 	.word	0x40010400

0800ab34 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 800ab34:	b580      	push	{r7, lr}
 800ab36:	b088      	sub	sp, #32
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800ab40:	2300      	movs	r3, #0
 800ab42:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d102      	bne.n	800ab50 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 800ab4a:	2301      	movs	r3, #1
 800ab4c:	77fb      	strb	r3, [r7, #31]
 800ab4e:	e180      	b.n	800ae52 <HAL_COMP_Init+0x31e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ab5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ab5e:	d102      	bne.n	800ab66 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 800ab60:	2301      	movs	r3, #1
 800ab62:	77fb      	strb	r3, [r7, #31]
 800ab64:	e175      	b.n	800ae52 <HAL_COMP_Init+0x31e>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	7f5b      	ldrb	r3, [r3, #29]
 800ab6a:	b2db      	uxtb	r3, r3
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d108      	bne.n	800ab82 <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	2200      	movs	r2, #0
 800ab74:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	2200      	movs	r2, #0
 800ab7a:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 800ab7c:	6878      	ldr	r0, [r7, #4]
 800ab7e:	f7fc fd01 	bl	8007584 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ab8c:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	685b      	ldr	r3, [r3, #4]
 800ab96:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	695b      	ldr	r3, [r3, #20]
 800ab9c:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	68db      	ldr	r3, [r3, #12]
 800aba2:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (  hcomp->Init.InputMinus
 800aba8:	4313      	orrs	r3, r2
 800abaa:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	681a      	ldr	r2, [r3, #0]
 800abb2:	4b98      	ldr	r3, [pc, #608]	; (800ae14 <HAL_COMP_Init+0x2e0>)
 800abb4:	4013      	ands	r3, r2
 800abb6:	687a      	ldr	r2, [r7, #4]
 800abb8:	6812      	ldr	r2, [r2, #0]
 800abba:	6979      	ldr	r1, [r7, #20]
 800abbc:	430b      	orrs	r3, r1
 800abbe:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d015      	beq.n	800abfa <HAL_COMP_Init+0xc6>
 800abce:	69bb      	ldr	r3, [r7, #24]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d112      	bne.n	800abfa <HAL_COMP_Init+0xc6>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800abd4:	4b90      	ldr	r3, [pc, #576]	; (800ae18 <HAL_COMP_Init+0x2e4>)
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	099b      	lsrs	r3, r3, #6
 800abda:	4a90      	ldr	r2, [pc, #576]	; (800ae1c <HAL_COMP_Init+0x2e8>)
 800abdc:	fba2 2303 	umull	r2, r3, r2, r3
 800abe0:	099a      	lsrs	r2, r3, #6
 800abe2:	4613      	mov	r3, r2
 800abe4:	009b      	lsls	r3, r3, #2
 800abe6:	4413      	add	r3, r2
 800abe8:	009b      	lsls	r3, r3, #2
 800abea:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 800abec:	e002      	b.n	800abf4 <HAL_COMP_Init+0xc0>
      {
        wait_loop_index--;
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	3b01      	subs	r3, #1
 800abf2:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d1f9      	bne.n	800abee <HAL_COMP_Init+0xba>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	4a88      	ldr	r2, [pc, #544]	; (800ae20 <HAL_COMP_Init+0x2ec>)
 800ac00:	4293      	cmp	r3, r2
 800ac02:	d028      	beq.n	800ac56 <HAL_COMP_Init+0x122>
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	4a86      	ldr	r2, [pc, #536]	; (800ae24 <HAL_COMP_Init+0x2f0>)
 800ac0a:	4293      	cmp	r3, r2
 800ac0c:	d020      	beq.n	800ac50 <HAL_COMP_Init+0x11c>
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	4a85      	ldr	r2, [pc, #532]	; (800ae28 <HAL_COMP_Init+0x2f4>)
 800ac14:	4293      	cmp	r3, r2
 800ac16:	d018      	beq.n	800ac4a <HAL_COMP_Init+0x116>
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	4a83      	ldr	r2, [pc, #524]	; (800ae2c <HAL_COMP_Init+0x2f8>)
 800ac1e:	4293      	cmp	r3, r2
 800ac20:	d010      	beq.n	800ac44 <HAL_COMP_Init+0x110>
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	4a82      	ldr	r2, [pc, #520]	; (800ae30 <HAL_COMP_Init+0x2fc>)
 800ac28:	4293      	cmp	r3, r2
 800ac2a:	d008      	beq.n	800ac3e <HAL_COMP_Init+0x10a>
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	4a80      	ldr	r2, [pc, #512]	; (800ae34 <HAL_COMP_Init+0x300>)
 800ac32:	4293      	cmp	r3, r2
 800ac34:	d101      	bne.n	800ac3a <HAL_COMP_Init+0x106>
 800ac36:	2301      	movs	r3, #1
 800ac38:	e00f      	b.n	800ac5a <HAL_COMP_Init+0x126>
 800ac3a:	2302      	movs	r3, #2
 800ac3c:	e00d      	b.n	800ac5a <HAL_COMP_Init+0x126>
 800ac3e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ac42:	e00a      	b.n	800ac5a <HAL_COMP_Init+0x126>
 800ac44:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ac48:	e007      	b.n	800ac5a <HAL_COMP_Init+0x126>
 800ac4a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800ac4e:	e004      	b.n	800ac5a <HAL_COMP_Init+0x126>
 800ac50:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ac54:	e001      	b.n	800ac5a <HAL_COMP_Init+0x126>
 800ac56:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ac5a:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	699b      	ldr	r3, [r3, #24]
 800ac60:	f003 0303 	and.w	r3, r3, #3
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	f000 80b6 	beq.w	800add6 <HAL_COMP_Init+0x2a2>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	699b      	ldr	r3, [r3, #24]
 800ac6e:	f003 0310 	and.w	r3, r3, #16
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d011      	beq.n	800ac9a <HAL_COMP_Init+0x166>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	4a6e      	ldr	r2, [pc, #440]	; (800ae34 <HAL_COMP_Init+0x300>)
 800ac7c:	4293      	cmp	r3, r2
 800ac7e:	d004      	beq.n	800ac8a <HAL_COMP_Init+0x156>
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	4a6c      	ldr	r2, [pc, #432]	; (800ae38 <HAL_COMP_Init+0x304>)
 800ac86:	4293      	cmp	r3, r2
 800ac88:	d103      	bne.n	800ac92 <HAL_COMP_Init+0x15e>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 800ac8a:	6938      	ldr	r0, [r7, #16]
 800ac8c:	f7ff fe80 	bl	800a990 <LL_EXTI_EnableRisingTrig_32_63>
 800ac90:	e014      	b.n	800acbc <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 800ac92:	6938      	ldr	r0, [r7, #16]
 800ac94:	f7ff fe6a 	bl	800a96c <LL_EXTI_EnableRisingTrig_0_31>
 800ac98:	e010      	b.n	800acbc <HAL_COMP_Init+0x188>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	4a65      	ldr	r2, [pc, #404]	; (800ae34 <HAL_COMP_Init+0x300>)
 800aca0:	4293      	cmp	r3, r2
 800aca2:	d004      	beq.n	800acae <HAL_COMP_Init+0x17a>
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	4a63      	ldr	r2, [pc, #396]	; (800ae38 <HAL_COMP_Init+0x304>)
 800acaa:	4293      	cmp	r3, r2
 800acac:	d103      	bne.n	800acb6 <HAL_COMP_Init+0x182>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 800acae:	6938      	ldr	r0, [r7, #16]
 800acb0:	f7ff fe94 	bl	800a9dc <LL_EXTI_DisableRisingTrig_32_63>
 800acb4:	e002      	b.n	800acbc <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 800acb6:	6938      	ldr	r0, [r7, #16]
 800acb8:	f7ff fe7c 	bl	800a9b4 <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	699b      	ldr	r3, [r3, #24]
 800acc0:	f003 0320 	and.w	r3, r3, #32
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d011      	beq.n	800acec <HAL_COMP_Init+0x1b8>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	4a59      	ldr	r2, [pc, #356]	; (800ae34 <HAL_COMP_Init+0x300>)
 800acce:	4293      	cmp	r3, r2
 800acd0:	d004      	beq.n	800acdc <HAL_COMP_Init+0x1a8>
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	4a58      	ldr	r2, [pc, #352]	; (800ae38 <HAL_COMP_Init+0x304>)
 800acd8:	4293      	cmp	r3, r2
 800acda:	d103      	bne.n	800ace4 <HAL_COMP_Init+0x1b0>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 800acdc:	6938      	ldr	r0, [r7, #16]
 800acde:	f7ff fea3 	bl	800aa28 <LL_EXTI_EnableFallingTrig_32_63>
 800ace2:	e014      	b.n	800ad0e <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 800ace4:	6938      	ldr	r0, [r7, #16]
 800ace6:	f7ff fe8d 	bl	800aa04 <LL_EXTI_EnableFallingTrig_0_31>
 800acea:	e010      	b.n	800ad0e <HAL_COMP_Init+0x1da>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	4a50      	ldr	r2, [pc, #320]	; (800ae34 <HAL_COMP_Init+0x300>)
 800acf2:	4293      	cmp	r3, r2
 800acf4:	d004      	beq.n	800ad00 <HAL_COMP_Init+0x1cc>
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	4a4f      	ldr	r2, [pc, #316]	; (800ae38 <HAL_COMP_Init+0x304>)
 800acfc:	4293      	cmp	r3, r2
 800acfe:	d103      	bne.n	800ad08 <HAL_COMP_Init+0x1d4>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 800ad00:	6938      	ldr	r0, [r7, #16]
 800ad02:	f7ff feb7 	bl	800aa74 <LL_EXTI_DisableFallingTrig_32_63>
 800ad06:	e002      	b.n	800ad0e <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 800ad08:	6938      	ldr	r0, [r7, #16]
 800ad0a:	f7ff fe9f 	bl	800aa4c <LL_EXTI_DisableFallingTrig_0_31>
#endif
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	4a48      	ldr	r2, [pc, #288]	; (800ae34 <HAL_COMP_Init+0x300>)
 800ad14:	4293      	cmp	r3, r2
 800ad16:	d004      	beq.n	800ad22 <HAL_COMP_Init+0x1ee>
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	4a46      	ldr	r2, [pc, #280]	; (800ae38 <HAL_COMP_Init+0x304>)
 800ad1e:	4293      	cmp	r3, r2
 800ad20:	d103      	bne.n	800ad2a <HAL_COMP_Init+0x1f6>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 800ad22:	6938      	ldr	r0, [r7, #16]
 800ad24:	f7ff fef6 	bl	800ab14 <LL_EXTI_ClearFlag_32_63>
 800ad28:	e002      	b.n	800ad30 <HAL_COMP_Init+0x1fc>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 800ad2a:	6938      	ldr	r0, [r7, #16]
 800ad2c:	f7ff fee2 	bl	800aaf4 <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	699b      	ldr	r3, [r3, #24]
 800ad34:	f003 0302 	and.w	r3, r3, #2
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d011      	beq.n	800ad60 <HAL_COMP_Init+0x22c>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	4a3c      	ldr	r2, [pc, #240]	; (800ae34 <HAL_COMP_Init+0x300>)
 800ad42:	4293      	cmp	r3, r2
 800ad44:	d004      	beq.n	800ad50 <HAL_COMP_Init+0x21c>
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	4a3b      	ldr	r2, [pc, #236]	; (800ae38 <HAL_COMP_Init+0x304>)
 800ad4c:	4293      	cmp	r3, r2
 800ad4e:	d103      	bne.n	800ad58 <HAL_COMP_Init+0x224>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 800ad50:	6938      	ldr	r0, [r7, #16]
 800ad52:	f7ff fdd1 	bl	800a8f8 <LL_EXTI_EnableEvent_32_63>
 800ad56:	e014      	b.n	800ad82 <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 800ad58:	6938      	ldr	r0, [r7, #16]
 800ad5a:	f7ff fdbb 	bl	800a8d4 <LL_EXTI_EnableEvent_0_31>
 800ad5e:	e010      	b.n	800ad82 <HAL_COMP_Init+0x24e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	4a33      	ldr	r2, [pc, #204]	; (800ae34 <HAL_COMP_Init+0x300>)
 800ad66:	4293      	cmp	r3, r2
 800ad68:	d004      	beq.n	800ad74 <HAL_COMP_Init+0x240>
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	4a32      	ldr	r2, [pc, #200]	; (800ae38 <HAL_COMP_Init+0x304>)
 800ad70:	4293      	cmp	r3, r2
 800ad72:	d103      	bne.n	800ad7c <HAL_COMP_Init+0x248>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 800ad74:	6938      	ldr	r0, [r7, #16]
 800ad76:	f7ff fde5 	bl	800a944 <LL_EXTI_DisableEvent_32_63>
 800ad7a:	e002      	b.n	800ad82 <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 800ad7c:	6938      	ldr	r0, [r7, #16]
 800ad7e:	f7ff fdcd 	bl	800a91c <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	699b      	ldr	r3, [r3, #24]
 800ad86:	f003 0301 	and.w	r3, r3, #1
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d011      	beq.n	800adb2 <HAL_COMP_Init+0x27e>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	4a28      	ldr	r2, [pc, #160]	; (800ae34 <HAL_COMP_Init+0x300>)
 800ad94:	4293      	cmp	r3, r2
 800ad96:	d004      	beq.n	800ada2 <HAL_COMP_Init+0x26e>
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	4a26      	ldr	r2, [pc, #152]	; (800ae38 <HAL_COMP_Init+0x304>)
 800ad9e:	4293      	cmp	r3, r2
 800ada0:	d103      	bne.n	800adaa <HAL_COMP_Init+0x276>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 800ada2:	6938      	ldr	r0, [r7, #16]
 800ada4:	f7ff fd5c 	bl	800a860 <LL_EXTI_EnableIT_32_63>
 800ada8:	e04b      	b.n	800ae42 <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 800adaa:	6938      	ldr	r0, [r7, #16]
 800adac:	f7ff fd46 	bl	800a83c <LL_EXTI_EnableIT_0_31>
 800adb0:	e047      	b.n	800ae42 <HAL_COMP_Init+0x30e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	4a1f      	ldr	r2, [pc, #124]	; (800ae34 <HAL_COMP_Init+0x300>)
 800adb8:	4293      	cmp	r3, r2
 800adba:	d004      	beq.n	800adc6 <HAL_COMP_Init+0x292>
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	4a1d      	ldr	r2, [pc, #116]	; (800ae38 <HAL_COMP_Init+0x304>)
 800adc2:	4293      	cmp	r3, r2
 800adc4:	d103      	bne.n	800adce <HAL_COMP_Init+0x29a>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 800adc6:	6938      	ldr	r0, [r7, #16]
 800adc8:	f7ff fd70 	bl	800a8ac <LL_EXTI_DisableIT_32_63>
 800adcc:	e039      	b.n	800ae42 <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 800adce:	6938      	ldr	r0, [r7, #16]
 800add0:	f7ff fd58 	bl	800a884 <LL_EXTI_DisableIT_0_31>
 800add4:	e035      	b.n	800ae42 <HAL_COMP_Init+0x30e>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	4a16      	ldr	r2, [pc, #88]	; (800ae34 <HAL_COMP_Init+0x300>)
 800addc:	4293      	cmp	r3, r2
 800adde:	d004      	beq.n	800adea <HAL_COMP_Init+0x2b6>
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	4a14      	ldr	r2, [pc, #80]	; (800ae38 <HAL_COMP_Init+0x304>)
 800ade6:	4293      	cmp	r3, r2
 800ade8:	d103      	bne.n	800adf2 <HAL_COMP_Init+0x2be>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 800adea:	6938      	ldr	r0, [r7, #16]
 800adec:	f7ff fdaa 	bl	800a944 <LL_EXTI_DisableEvent_32_63>
 800adf0:	e002      	b.n	800adf8 <HAL_COMP_Init+0x2c4>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 800adf2:	6938      	ldr	r0, [r7, #16]
 800adf4:	f7ff fd92 	bl	800a91c <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif

      /* Disable EXTI interrupt mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	4a0d      	ldr	r2, [pc, #52]	; (800ae34 <HAL_COMP_Init+0x300>)
 800adfe:	4293      	cmp	r3, r2
 800ae00:	d004      	beq.n	800ae0c <HAL_COMP_Init+0x2d8>
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	4a0c      	ldr	r2, [pc, #48]	; (800ae38 <HAL_COMP_Init+0x304>)
 800ae08:	4293      	cmp	r3, r2
 800ae0a:	d117      	bne.n	800ae3c <HAL_COMP_Init+0x308>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 800ae0c:	6938      	ldr	r0, [r7, #16]
 800ae0e:	f7ff fd4d 	bl	800a8ac <LL_EXTI_DisableIT_32_63>
 800ae12:	e016      	b.n	800ae42 <HAL_COMP_Init+0x30e>
 800ae14:	ff007e0f 	.word	0xff007e0f
 800ae18:	20000eb0 	.word	0x20000eb0
 800ae1c:	053e2d63 	.word	0x053e2d63
 800ae20:	40010200 	.word	0x40010200
 800ae24:	40010204 	.word	0x40010204
 800ae28:	40010208 	.word	0x40010208
 800ae2c:	4001020c 	.word	0x4001020c
 800ae30:	40010210 	.word	0x40010210
 800ae34:	40010214 	.word	0x40010214
 800ae38:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 800ae3c:	6938      	ldr	r0, [r7, #16]
 800ae3e:	f7ff fd21 	bl	800a884 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	7f5b      	ldrb	r3, [r3, #29]
 800ae46:	b2db      	uxtb	r3, r3
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d102      	bne.n	800ae52 <HAL_COMP_Init+0x31e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	2201      	movs	r2, #1
 800ae50:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 800ae52:	7ffb      	ldrb	r3, [r7, #31]
}
 800ae54:	4618      	mov	r0, r3
 800ae56:	3720      	adds	r7, #32
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	bd80      	pop	{r7, pc}

0800ae5c <HAL_COMP_Stop>:
  * @brief  Stop the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Stop(COMP_HandleTypeDef *hcomp)
{
 800ae5c:	b480      	push	{r7}
 800ae5e:	b085      	sub	sp, #20
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ae64:	2300      	movs	r3, #0
 800ae66:	73fb      	strb	r3, [r7, #15]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d102      	bne.n	800ae74 <HAL_COMP_Stop+0x18>
  {
    status = HAL_ERROR;
 800ae6e:	2301      	movs	r3, #1
 800ae70:	73fb      	strb	r3, [r7, #15]
 800ae72:	e01d      	b.n	800aeb0 <HAL_COMP_Stop+0x54>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ae7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ae82:	d102      	bne.n	800ae8a <HAL_COMP_Stop+0x2e>
  {
    status = HAL_ERROR;
 800ae84:	2301      	movs	r3, #1
 800ae86:	73fb      	strb	r3, [r7, #15]
 800ae88:	e012      	b.n	800aeb0 <HAL_COMP_Stop+0x54>
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    /* Check compliant states: HAL_COMP_STATE_READY or HAL_COMP_STATE_BUSY    */
    /* (all states except HAL_COMP_STATE_RESET and except locked status.      */
    if(hcomp->State != HAL_COMP_STATE_RESET)
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	7f5b      	ldrb	r3, [r3, #29]
 800ae8e:	b2db      	uxtb	r3, r3
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d00b      	beq.n	800aeac <HAL_COMP_Stop+0x50>
    {
      /* Disable the selected comparator */
      CLEAR_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	681a      	ldr	r2, [r3, #0]
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	f022 0201 	bic.w	r2, r2, #1
 800aea2:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_READY;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	2201      	movs	r2, #1
 800aea8:	775a      	strb	r2, [r3, #29]
 800aeaa:	e001      	b.n	800aeb0 <HAL_COMP_Stop+0x54>
    }
    else
    {
      status = HAL_ERROR;
 800aeac:	2301      	movs	r3, #1
 800aeae:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800aeb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	3714      	adds	r7, #20
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aebc:	4770      	bx	lr
	...

0800aec0 <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ handler.
  * @param  hcomp  COMP handle
  * @retval None
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b084      	sub	sp, #16
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
  /* Get the EXTI line corresponding to the selected COMP instance */
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	4a2f      	ldr	r2, [pc, #188]	; (800af8c <HAL_COMP_IRQHandler+0xcc>)
 800aece:	4293      	cmp	r3, r2
 800aed0:	d028      	beq.n	800af24 <HAL_COMP_IRQHandler+0x64>
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	4a2e      	ldr	r2, [pc, #184]	; (800af90 <HAL_COMP_IRQHandler+0xd0>)
 800aed8:	4293      	cmp	r3, r2
 800aeda:	d020      	beq.n	800af1e <HAL_COMP_IRQHandler+0x5e>
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	4a2c      	ldr	r2, [pc, #176]	; (800af94 <HAL_COMP_IRQHandler+0xd4>)
 800aee2:	4293      	cmp	r3, r2
 800aee4:	d018      	beq.n	800af18 <HAL_COMP_IRQHandler+0x58>
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	4a2b      	ldr	r2, [pc, #172]	; (800af98 <HAL_COMP_IRQHandler+0xd8>)
 800aeec:	4293      	cmp	r3, r2
 800aeee:	d010      	beq.n	800af12 <HAL_COMP_IRQHandler+0x52>
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	4a29      	ldr	r2, [pc, #164]	; (800af9c <HAL_COMP_IRQHandler+0xdc>)
 800aef6:	4293      	cmp	r3, r2
 800aef8:	d008      	beq.n	800af0c <HAL_COMP_IRQHandler+0x4c>
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	4a28      	ldr	r2, [pc, #160]	; (800afa0 <HAL_COMP_IRQHandler+0xe0>)
 800af00:	4293      	cmp	r3, r2
 800af02:	d101      	bne.n	800af08 <HAL_COMP_IRQHandler+0x48>
 800af04:	2301      	movs	r3, #1
 800af06:	e00f      	b.n	800af28 <HAL_COMP_IRQHandler+0x68>
 800af08:	2302      	movs	r3, #2
 800af0a:	e00d      	b.n	800af28 <HAL_COMP_IRQHandler+0x68>
 800af0c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800af10:	e00a      	b.n	800af28 <HAL_COMP_IRQHandler+0x68>
 800af12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800af16:	e007      	b.n	800af28 <HAL_COMP_IRQHandler+0x68>
 800af18:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800af1c:	e004      	b.n	800af28 <HAL_COMP_IRQHandler+0x68>
 800af1e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800af22:	e001      	b.n	800af28 <HAL_COMP_IRQHandler+0x68>
 800af24:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800af28:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_comp_exti_flag_set = 0UL;
 800af2a:	2300      	movs	r3, #0
 800af2c:	60fb      	str	r3, [r7, #12]

  /* Check COMP EXTI flag */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
  if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	4a1b      	ldr	r2, [pc, #108]	; (800afa0 <HAL_COMP_IRQHandler+0xe0>)
 800af34:	4293      	cmp	r3, r2
 800af36:	d004      	beq.n	800af42 <HAL_COMP_IRQHandler+0x82>
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	4a19      	ldr	r2, [pc, #100]	; (800afa4 <HAL_COMP_IRQHandler+0xe4>)
 800af3e:	4293      	cmp	r3, r2
 800af40:	d108      	bne.n	800af54 <HAL_COMP_IRQHandler+0x94>
  {
    if(LL_EXTI_IsActiveFlag_32_63(exti_line) != 0UL)
 800af42:	68b8      	ldr	r0, [r7, #8]
 800af44:	f7ff fdc0 	bl	800aac8 <LL_EXTI_IsActiveFlag_32_63>
 800af48:	4603      	mov	r3, r0
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d00a      	beq.n	800af64 <HAL_COMP_IRQHandler+0xa4>
    {
      tmp_comp_exti_flag_set = 2UL;
 800af4e:	2302      	movs	r3, #2
 800af50:	60fb      	str	r3, [r7, #12]
    if(LL_EXTI_IsActiveFlag_32_63(exti_line) != 0UL)
 800af52:	e007      	b.n	800af64 <HAL_COMP_IRQHandler+0xa4>
    }
  }
  else
  {
    if(LL_EXTI_IsActiveFlag_0_31(exti_line) != 0UL)
 800af54:	68b8      	ldr	r0, [r7, #8]
 800af56:	f7ff fda1 	bl	800aa9c <LL_EXTI_IsActiveFlag_0_31>
 800af5a:	4603      	mov	r3, r0
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d001      	beq.n	800af64 <HAL_COMP_IRQHandler+0xa4>
    {
      tmp_comp_exti_flag_set = 1UL;
 800af60:	2301      	movs	r3, #1
 800af62:	60fb      	str	r3, [r7, #12]
  {
    tmp_comp_exti_flag_set = 1UL;
  }
#endif

  if(tmp_comp_exti_flag_set != 0UL)
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d00c      	beq.n	800af84 <HAL_COMP_IRQHandler+0xc4>
  {
      /* Clear COMP EXTI line pending bit */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if(tmp_comp_exti_flag_set == 2UL)
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	2b02      	cmp	r3, #2
 800af6e:	d103      	bne.n	800af78 <HAL_COMP_IRQHandler+0xb8>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 800af70:	68b8      	ldr	r0, [r7, #8]
 800af72:	f7ff fdcf 	bl	800ab14 <LL_EXTI_ClearFlag_32_63>
 800af76:	e002      	b.n	800af7e <HAL_COMP_IRQHandler+0xbe>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 800af78:	68b8      	ldr	r0, [r7, #8]
 800af7a:	f7ff fdbb 	bl	800aaf4 <LL_EXTI_ClearFlag_0_31>

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 800af7e:	6878      	ldr	r0, [r7, #4]
 800af80:	f7fb fa78 	bl	8006474 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
  }
}
 800af84:	bf00      	nop
 800af86:	3710      	adds	r7, #16
 800af88:	46bd      	mov	sp, r7
 800af8a:	bd80      	pop	{r7, pc}
 800af8c:	40010200 	.word	0x40010200
 800af90:	40010204 	.word	0x40010204
 800af94:	40010208 	.word	0x40010208
 800af98:	4001020c 	.word	0x4001020c
 800af9c:	40010210 	.word	0x40010210
 800afa0:	40010214 	.word	0x40010214
 800afa4:	40010218 	.word	0x40010218

0800afa8 <HAL_COMP_GetOutputLevel>:
  *         @arg COMP_OUTPUT_LEVEL_LOW
  *         @arg COMP_OUTPUT_LEVEL_HIGH
  *
  */
uint32_t HAL_COMP_GetOutputLevel(COMP_HandleTypeDef *hcomp)
{
 800afa8:	b480      	push	{r7}
 800afaa:	b083      	sub	sp, #12
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

  return (uint32_t)(READ_BIT(hcomp->Instance->CSR, COMP_CSR_VALUE)
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	0f9b      	lsrs	r3, r3, #30
 800afb8:	f003 0301 	and.w	r3, r3, #1
                    >> COMP_OUTPUT_LEVEL_BITOFFSET_POS);
}
 800afbc:	4618      	mov	r0, r3
 800afbe:	370c      	adds	r7, #12
 800afc0:	46bd      	mov	sp, r7
 800afc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc6:	4770      	bx	lr

0800afc8 <__NVIC_SetPriorityGrouping>:
{
 800afc8:	b480      	push	{r7}
 800afca:	b085      	sub	sp, #20
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	f003 0307 	and.w	r3, r3, #7
 800afd6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800afd8:	4b0c      	ldr	r3, [pc, #48]	; (800b00c <__NVIC_SetPriorityGrouping+0x44>)
 800afda:	68db      	ldr	r3, [r3, #12]
 800afdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800afde:	68ba      	ldr	r2, [r7, #8]
 800afe0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800afe4:	4013      	ands	r3, r2
 800afe6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800afec:	68bb      	ldr	r3, [r7, #8]
 800afee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800aff0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800aff4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aff8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800affa:	4a04      	ldr	r2, [pc, #16]	; (800b00c <__NVIC_SetPriorityGrouping+0x44>)
 800affc:	68bb      	ldr	r3, [r7, #8]
 800affe:	60d3      	str	r3, [r2, #12]
}
 800b000:	bf00      	nop
 800b002:	3714      	adds	r7, #20
 800b004:	46bd      	mov	sp, r7
 800b006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00a:	4770      	bx	lr
 800b00c:	e000ed00 	.word	0xe000ed00

0800b010 <__NVIC_GetPriorityGrouping>:
{
 800b010:	b480      	push	{r7}
 800b012:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b014:	4b04      	ldr	r3, [pc, #16]	; (800b028 <__NVIC_GetPriorityGrouping+0x18>)
 800b016:	68db      	ldr	r3, [r3, #12]
 800b018:	0a1b      	lsrs	r3, r3, #8
 800b01a:	f003 0307 	and.w	r3, r3, #7
}
 800b01e:	4618      	mov	r0, r3
 800b020:	46bd      	mov	sp, r7
 800b022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b026:	4770      	bx	lr
 800b028:	e000ed00 	.word	0xe000ed00

0800b02c <__NVIC_EnableIRQ>:
{
 800b02c:	b480      	push	{r7}
 800b02e:	b083      	sub	sp, #12
 800b030:	af00      	add	r7, sp, #0
 800b032:	4603      	mov	r3, r0
 800b034:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	db0b      	blt.n	800b056 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b03e:	79fb      	ldrb	r3, [r7, #7]
 800b040:	f003 021f 	and.w	r2, r3, #31
 800b044:	4907      	ldr	r1, [pc, #28]	; (800b064 <__NVIC_EnableIRQ+0x38>)
 800b046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b04a:	095b      	lsrs	r3, r3, #5
 800b04c:	2001      	movs	r0, #1
 800b04e:	fa00 f202 	lsl.w	r2, r0, r2
 800b052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800b056:	bf00      	nop
 800b058:	370c      	adds	r7, #12
 800b05a:	46bd      	mov	sp, r7
 800b05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b060:	4770      	bx	lr
 800b062:	bf00      	nop
 800b064:	e000e100 	.word	0xe000e100

0800b068 <__NVIC_DisableIRQ>:
{
 800b068:	b480      	push	{r7}
 800b06a:	b083      	sub	sp, #12
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	4603      	mov	r3, r0
 800b070:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b076:	2b00      	cmp	r3, #0
 800b078:	db10      	blt.n	800b09c <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b07a:	79fb      	ldrb	r3, [r7, #7]
 800b07c:	f003 021f 	and.w	r2, r3, #31
 800b080:	4909      	ldr	r1, [pc, #36]	; (800b0a8 <__NVIC_DisableIRQ+0x40>)
 800b082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b086:	095b      	lsrs	r3, r3, #5
 800b088:	2001      	movs	r0, #1
 800b08a:	fa00 f202 	lsl.w	r2, r0, r2
 800b08e:	3320      	adds	r3, #32
 800b090:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800b094:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800b098:	f3bf 8f6f 	isb	sy
}
 800b09c:	bf00      	nop
 800b09e:	370c      	adds	r7, #12
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a6:	4770      	bx	lr
 800b0a8:	e000e100 	.word	0xe000e100

0800b0ac <__NVIC_SetPriority>:
{
 800b0ac:	b480      	push	{r7}
 800b0ae:	b083      	sub	sp, #12
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	4603      	mov	r3, r0
 800b0b4:	6039      	str	r1, [r7, #0]
 800b0b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b0b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	db0a      	blt.n	800b0d6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b0c0:	683b      	ldr	r3, [r7, #0]
 800b0c2:	b2da      	uxtb	r2, r3
 800b0c4:	490c      	ldr	r1, [pc, #48]	; (800b0f8 <__NVIC_SetPriority+0x4c>)
 800b0c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b0ca:	0112      	lsls	r2, r2, #4
 800b0cc:	b2d2      	uxtb	r2, r2
 800b0ce:	440b      	add	r3, r1
 800b0d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800b0d4:	e00a      	b.n	800b0ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b0d6:	683b      	ldr	r3, [r7, #0]
 800b0d8:	b2da      	uxtb	r2, r3
 800b0da:	4908      	ldr	r1, [pc, #32]	; (800b0fc <__NVIC_SetPriority+0x50>)
 800b0dc:	79fb      	ldrb	r3, [r7, #7]
 800b0de:	f003 030f 	and.w	r3, r3, #15
 800b0e2:	3b04      	subs	r3, #4
 800b0e4:	0112      	lsls	r2, r2, #4
 800b0e6:	b2d2      	uxtb	r2, r2
 800b0e8:	440b      	add	r3, r1
 800b0ea:	761a      	strb	r2, [r3, #24]
}
 800b0ec:	bf00      	nop
 800b0ee:	370c      	adds	r7, #12
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f6:	4770      	bx	lr
 800b0f8:	e000e100 	.word	0xe000e100
 800b0fc:	e000ed00 	.word	0xe000ed00

0800b100 <NVIC_EncodePriority>:
{
 800b100:	b480      	push	{r7}
 800b102:	b089      	sub	sp, #36	; 0x24
 800b104:	af00      	add	r7, sp, #0
 800b106:	60f8      	str	r0, [r7, #12]
 800b108:	60b9      	str	r1, [r7, #8]
 800b10a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	f003 0307 	and.w	r3, r3, #7
 800b112:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b114:	69fb      	ldr	r3, [r7, #28]
 800b116:	f1c3 0307 	rsb	r3, r3, #7
 800b11a:	2b04      	cmp	r3, #4
 800b11c:	bf28      	it	cs
 800b11e:	2304      	movcs	r3, #4
 800b120:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b122:	69fb      	ldr	r3, [r7, #28]
 800b124:	3304      	adds	r3, #4
 800b126:	2b06      	cmp	r3, #6
 800b128:	d902      	bls.n	800b130 <NVIC_EncodePriority+0x30>
 800b12a:	69fb      	ldr	r3, [r7, #28]
 800b12c:	3b03      	subs	r3, #3
 800b12e:	e000      	b.n	800b132 <NVIC_EncodePriority+0x32>
 800b130:	2300      	movs	r3, #0
 800b132:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b134:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b138:	69bb      	ldr	r3, [r7, #24]
 800b13a:	fa02 f303 	lsl.w	r3, r2, r3
 800b13e:	43da      	mvns	r2, r3
 800b140:	68bb      	ldr	r3, [r7, #8]
 800b142:	401a      	ands	r2, r3
 800b144:	697b      	ldr	r3, [r7, #20]
 800b146:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b148:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800b14c:	697b      	ldr	r3, [r7, #20]
 800b14e:	fa01 f303 	lsl.w	r3, r1, r3
 800b152:	43d9      	mvns	r1, r3
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b158:	4313      	orrs	r3, r2
}
 800b15a:	4618      	mov	r0, r3
 800b15c:	3724      	adds	r7, #36	; 0x24
 800b15e:	46bd      	mov	sp, r7
 800b160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b164:	4770      	bx	lr
	...

0800b168 <SysTick_Config>:
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	b082      	sub	sp, #8
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	3b01      	subs	r3, #1
 800b174:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b178:	d301      	bcc.n	800b17e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800b17a:	2301      	movs	r3, #1
 800b17c:	e00f      	b.n	800b19e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800b17e:	4a0a      	ldr	r2, [pc, #40]	; (800b1a8 <SysTick_Config+0x40>)
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	3b01      	subs	r3, #1
 800b184:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800b186:	210f      	movs	r1, #15
 800b188:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b18c:	f7ff ff8e 	bl	800b0ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800b190:	4b05      	ldr	r3, [pc, #20]	; (800b1a8 <SysTick_Config+0x40>)
 800b192:	2200      	movs	r2, #0
 800b194:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800b196:	4b04      	ldr	r3, [pc, #16]	; (800b1a8 <SysTick_Config+0x40>)
 800b198:	2207      	movs	r2, #7
 800b19a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800b19c:	2300      	movs	r3, #0
}
 800b19e:	4618      	mov	r0, r3
 800b1a0:	3708      	adds	r7, #8
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	bd80      	pop	{r7, pc}
 800b1a6:	bf00      	nop
 800b1a8:	e000e010 	.word	0xe000e010

0800b1ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	b082      	sub	sp, #8
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b1b4:	6878      	ldr	r0, [r7, #4]
 800b1b6:	f7ff ff07 	bl	800afc8 <__NVIC_SetPriorityGrouping>
}
 800b1ba:	bf00      	nop
 800b1bc:	3708      	adds	r7, #8
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	bd80      	pop	{r7, pc}

0800b1c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b1c2:	b580      	push	{r7, lr}
 800b1c4:	b086      	sub	sp, #24
 800b1c6:	af00      	add	r7, sp, #0
 800b1c8:	4603      	mov	r3, r0
 800b1ca:	60b9      	str	r1, [r7, #8]
 800b1cc:	607a      	str	r2, [r7, #4]
 800b1ce:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800b1d0:	f7ff ff1e 	bl	800b010 <__NVIC_GetPriorityGrouping>
 800b1d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b1d6:	687a      	ldr	r2, [r7, #4]
 800b1d8:	68b9      	ldr	r1, [r7, #8]
 800b1da:	6978      	ldr	r0, [r7, #20]
 800b1dc:	f7ff ff90 	bl	800b100 <NVIC_EncodePriority>
 800b1e0:	4602      	mov	r2, r0
 800b1e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b1e6:	4611      	mov	r1, r2
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	f7ff ff5f 	bl	800b0ac <__NVIC_SetPriority>
}
 800b1ee:	bf00      	nop
 800b1f0:	3718      	adds	r7, #24
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	bd80      	pop	{r7, pc}

0800b1f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b1f6:	b580      	push	{r7, lr}
 800b1f8:	b082      	sub	sp, #8
 800b1fa:	af00      	add	r7, sp, #0
 800b1fc:	4603      	mov	r3, r0
 800b1fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b200:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b204:	4618      	mov	r0, r3
 800b206:	f7ff ff11 	bl	800b02c <__NVIC_EnableIRQ>
}
 800b20a:	bf00      	nop
 800b20c:	3708      	adds	r7, #8
 800b20e:	46bd      	mov	sp, r7
 800b210:	bd80      	pop	{r7, pc}

0800b212 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800b212:	b580      	push	{r7, lr}
 800b214:	b082      	sub	sp, #8
 800b216:	af00      	add	r7, sp, #0
 800b218:	4603      	mov	r3, r0
 800b21a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800b21c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b220:	4618      	mov	r0, r3
 800b222:	f7ff ff21 	bl	800b068 <__NVIC_DisableIRQ>
}
 800b226:	bf00      	nop
 800b228:	3708      	adds	r7, #8
 800b22a:	46bd      	mov	sp, r7
 800b22c:	bd80      	pop	{r7, pc}

0800b22e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800b22e:	b580      	push	{r7, lr}
 800b230:	b082      	sub	sp, #8
 800b232:	af00      	add	r7, sp, #0
 800b234:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800b236:	6878      	ldr	r0, [r7, #4]
 800b238:	f7ff ff96 	bl	800b168 <SysTick_Config>
 800b23c:	4603      	mov	r3, r0
}
 800b23e:	4618      	mov	r0, r3
 800b240:	3708      	adds	r7, #8
 800b242:	46bd      	mov	sp, r7
 800b244:	bd80      	pop	{r7, pc}

0800b246 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800b246:	b580      	push	{r7, lr}
 800b248:	b082      	sub	sp, #8
 800b24a:	af00      	add	r7, sp, #0
 800b24c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d101      	bne.n	800b258 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800b254:	2301      	movs	r3, #1
 800b256:	e014      	b.n	800b282 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	791b      	ldrb	r3, [r3, #4]
 800b25c:	b2db      	uxtb	r3, r3
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d105      	bne.n	800b26e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	2200      	movs	r2, #0
 800b266:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800b268:	6878      	ldr	r0, [r7, #4]
 800b26a:	f7fc fa49 	bl	8007700 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	2202      	movs	r2, #2
 800b272:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	2200      	movs	r2, #0
 800b278:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	2201      	movs	r2, #1
 800b27e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800b280:	2300      	movs	r3, #0
}
 800b282:	4618      	mov	r0, r3
 800b284:	3708      	adds	r7, #8
 800b286:	46bd      	mov	sp, r7
 800b288:	bd80      	pop	{r7, pc}

0800b28a <HAL_DAC_Start>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800b28a:	b580      	push	{r7, lr}
 800b28c:	b082      	sub	sp, #8
 800b28e:	af00      	add	r7, sp, #0
 800b290:	6078      	str	r0, [r7, #4]
 800b292:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	795b      	ldrb	r3, [r3, #5]
 800b298:	2b01      	cmp	r3, #1
 800b29a:	d101      	bne.n	800b2a0 <HAL_DAC_Start+0x16>
 800b29c:	2302      	movs	r3, #2
 800b29e:	e043      	b.n	800b328 <HAL_DAC_Start+0x9e>
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	2201      	movs	r2, #1
 800b2a4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	2202      	movs	r2, #2
 800b2aa:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	6819      	ldr	r1, [r3, #0]
 800b2b2:	683b      	ldr	r3, [r7, #0]
 800b2b4:	f003 0310 	and.w	r3, r3, #16
 800b2b8:	2201      	movs	r2, #1
 800b2ba:	409a      	lsls	r2, r3
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	430a      	orrs	r2, r1
 800b2c2:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 800b2c4:	2001      	movs	r0, #1
 800b2c6:	f7fd fe65 	bl	8008f94 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 800b2ca:	683b      	ldr	r3, [r7, #0]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d10f      	bne.n	800b2f0 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800b2da:	2b02      	cmp	r3, #2
 800b2dc:	d11d      	bne.n	800b31a <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	685a      	ldr	r2, [r3, #4]
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	f042 0201 	orr.w	r2, r2, #1
 800b2ec:	605a      	str	r2, [r3, #4]
 800b2ee:	e014      	b.n	800b31a <HAL_DAC_Start+0x90>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800b2fa:	683b      	ldr	r3, [r7, #0]
 800b2fc:	f003 0310 	and.w	r3, r3, #16
 800b300:	2102      	movs	r1, #2
 800b302:	fa01 f303 	lsl.w	r3, r1, r3
 800b306:	429a      	cmp	r2, r3
 800b308:	d107      	bne.n	800b31a <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	685a      	ldr	r2, [r3, #4]
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	f042 0202 	orr.w	r2, r2, #2
 800b318:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	2201      	movs	r2, #1
 800b31e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	2200      	movs	r2, #0
 800b324:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800b326:	2300      	movs	r3, #0
}
 800b328:	4618      	mov	r0, r3
 800b32a:	3708      	adds	r7, #8
 800b32c:	46bd      	mov	sp, r7
 800b32e:	bd80      	pop	{r7, pc}

0800b330 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 800b330:	b580      	push	{r7, lr}
 800b332:	b086      	sub	sp, #24
 800b334:	af00      	add	r7, sp, #0
 800b336:	60f8      	str	r0, [r7, #12]
 800b338:	60b9      	str	r1, [r7, #8]
 800b33a:	607a      	str	r2, [r7, #4]
 800b33c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 800b33e:	2300      	movs	r3, #0
 800b340:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	795b      	ldrb	r3, [r3, #5]
 800b346:	2b01      	cmp	r3, #1
 800b348:	d101      	bne.n	800b34e <HAL_DAC_Start_DMA+0x1e>
 800b34a:	2302      	movs	r3, #2
 800b34c:	e0a1      	b.n	800b492 <HAL_DAC_Start_DMA+0x162>
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	2201      	movs	r2, #1
 800b352:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	2202      	movs	r2, #2
 800b358:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800b35a:	68bb      	ldr	r3, [r7, #8]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d12a      	bne.n	800b3b6 <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	689b      	ldr	r3, [r3, #8]
 800b364:	4a4d      	ldr	r2, [pc, #308]	; (800b49c <HAL_DAC_Start_DMA+0x16c>)
 800b366:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	689b      	ldr	r3, [r3, #8]
 800b36c:	4a4c      	ldr	r2, [pc, #304]	; (800b4a0 <HAL_DAC_Start_DMA+0x170>)
 800b36e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	689b      	ldr	r3, [r3, #8]
 800b374:	4a4b      	ldr	r2, [pc, #300]	; (800b4a4 <HAL_DAC_Start_DMA+0x174>)
 800b376:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	681a      	ldr	r2, [r3, #0]
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b386:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800b388:	6a3b      	ldr	r3, [r7, #32]
 800b38a:	2b04      	cmp	r3, #4
 800b38c:	d009      	beq.n	800b3a2 <HAL_DAC_Start_DMA+0x72>
 800b38e:	2b08      	cmp	r3, #8
 800b390:	d00c      	beq.n	800b3ac <HAL_DAC_Start_DMA+0x7c>
 800b392:	2b00      	cmp	r3, #0
 800b394:	d000      	beq.n	800b398 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 800b396:	e039      	b.n	800b40c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	3308      	adds	r3, #8
 800b39e:	613b      	str	r3, [r7, #16]
        break;
 800b3a0:	e034      	b.n	800b40c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	330c      	adds	r3, #12
 800b3a8:	613b      	str	r3, [r7, #16]
        break;
 800b3aa:	e02f      	b.n	800b40c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	3310      	adds	r3, #16
 800b3b2:	613b      	str	r3, [r7, #16]
        break;
 800b3b4:	e02a      	b.n	800b40c <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	68db      	ldr	r3, [r3, #12]
 800b3ba:	4a3b      	ldr	r2, [pc, #236]	; (800b4a8 <HAL_DAC_Start_DMA+0x178>)
 800b3bc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	68db      	ldr	r3, [r3, #12]
 800b3c2:	4a3a      	ldr	r2, [pc, #232]	; (800b4ac <HAL_DAC_Start_DMA+0x17c>)
 800b3c4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	68db      	ldr	r3, [r3, #12]
 800b3ca:	4a39      	ldr	r2, [pc, #228]	; (800b4b0 <HAL_DAC_Start_DMA+0x180>)
 800b3cc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	681a      	ldr	r2, [r3, #0]
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800b3dc:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800b3de:	6a3b      	ldr	r3, [r7, #32]
 800b3e0:	2b04      	cmp	r3, #4
 800b3e2:	d009      	beq.n	800b3f8 <HAL_DAC_Start_DMA+0xc8>
 800b3e4:	2b08      	cmp	r3, #8
 800b3e6:	d00c      	beq.n	800b402 <HAL_DAC_Start_DMA+0xd2>
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d000      	beq.n	800b3ee <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 800b3ec:	e00e      	b.n	800b40c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	3314      	adds	r3, #20
 800b3f4:	613b      	str	r3, [r7, #16]
        break;
 800b3f6:	e009      	b.n	800b40c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	3318      	adds	r3, #24
 800b3fe:	613b      	str	r3, [r7, #16]
        break;
 800b400:	e004      	b.n	800b40c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	331c      	adds	r3, #28
 800b408:	613b      	str	r3, [r7, #16]
        break;
 800b40a:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 800b40c:	68bb      	ldr	r3, [r7, #8]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d111      	bne.n	800b436 <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	681a      	ldr	r2, [r3, #0]
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b420:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	6898      	ldr	r0, [r3, #8]
 800b426:	6879      	ldr	r1, [r7, #4]
 800b428:	683b      	ldr	r3, [r7, #0]
 800b42a:	693a      	ldr	r2, [r7, #16]
 800b42c:	f000 fbd2 	bl	800bbd4 <HAL_DMA_Start_IT>
 800b430:	4603      	mov	r3, r0
 800b432:	75fb      	strb	r3, [r7, #23]
 800b434:	e010      	b.n	800b458 <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	681a      	ldr	r2, [r3, #0]
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800b444:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	68d8      	ldr	r0, [r3, #12]
 800b44a:	6879      	ldr	r1, [r7, #4]
 800b44c:	683b      	ldr	r3, [r7, #0]
 800b44e:	693a      	ldr	r2, [r7, #16]
 800b450:	f000 fbc0 	bl	800bbd4 <HAL_DMA_Start_IT>
 800b454:	4603      	mov	r3, r0
 800b456:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	2200      	movs	r2, #0
 800b45c:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 800b45e:	7dfb      	ldrb	r3, [r7, #23]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d10f      	bne.n	800b484 <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	6819      	ldr	r1, [r3, #0]
 800b46a:	68bb      	ldr	r3, [r7, #8]
 800b46c:	f003 0310 	and.w	r3, r3, #16
 800b470:	2201      	movs	r2, #1
 800b472:	409a      	lsls	r2, r3
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	430a      	orrs	r2, r1
 800b47a:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 800b47c:	2001      	movs	r0, #1
 800b47e:	f7fd fd89 	bl	8008f94 <HAL_Delay>
 800b482:	e005      	b.n	800b490 <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	691b      	ldr	r3, [r3, #16]
 800b488:	f043 0204 	orr.w	r2, r3, #4
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 800b490:	7dfb      	ldrb	r3, [r7, #23]
}
 800b492:	4618      	mov	r0, r3
 800b494:	3718      	adds	r7, #24
 800b496:	46bd      	mov	sp, r7
 800b498:	bd80      	pop	{r7, pc}
 800b49a:	bf00      	nop
 800b49c:	0800b971 	.word	0x0800b971
 800b4a0:	0800b993 	.word	0x0800b993
 800b4a4:	0800b9af 	.word	0x0800b9af
 800b4a8:	0800ba19 	.word	0x0800ba19
 800b4ac:	0800ba3b 	.word	0x0800ba3b
 800b4b0:	0800ba57 	.word	0x0800ba57

0800b4b4 <HAL_DAC_Stop_DMA>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b084      	sub	sp, #16
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
 800b4bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	6819      	ldr	r1, [r3, #0]
 800b4c4:	683b      	ldr	r3, [r7, #0]
 800b4c6:	f003 0310 	and.w	r3, r3, #16
 800b4ca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b4ce:	fa02 f303 	lsl.w	r3, r2, r3
 800b4d2:	43da      	mvns	r2, r3
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	400a      	ands	r2, r1
 800b4da:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	6819      	ldr	r1, [r3, #0]
 800b4e2:	683b      	ldr	r3, [r7, #0]
 800b4e4:	f003 0310 	and.w	r3, r3, #16
 800b4e8:	2201      	movs	r2, #1
 800b4ea:	fa02 f303 	lsl.w	r3, r2, r3
 800b4ee:	43da      	mvns	r2, r3
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	400a      	ands	r2, r1
 800b4f6:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before enabling peripheral after disabling it */
  HAL_Delay(1);
 800b4f8:	2001      	movs	r0, #1
 800b4fa:	f7fd fd4b 	bl	8008f94 <HAL_Delay>

  /* Disable the DMA channel */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 800b4fe:	683b      	ldr	r3, [r7, #0]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d10f      	bne.n	800b524 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	689b      	ldr	r3, [r3, #8]
 800b508:	4618      	mov	r0, r3
 800b50a:	f000 fbde 	bl	800bcca <HAL_DMA_Abort>
 800b50e:	4603      	mov	r3, r0
 800b510:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	681a      	ldr	r2, [r3, #0]
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b520:	601a      	str	r2, [r3, #0]
 800b522:	e00e      	b.n	800b542 <HAL_DAC_Stop_DMA+0x8e>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle2);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	68db      	ldr	r3, [r3, #12]
 800b528:	4618      	mov	r0, r3
 800b52a:	f000 fbce 	bl	800bcca <HAL_DMA_Abort>
 800b52e:	4603      	mov	r3, r0
 800b530:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	681a      	ldr	r2, [r3, #0]
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800b540:	601a      	str	r2, [r3, #0]
  }

  /* Check if DMA Channel effectively disabled */
  if (status != HAL_OK)
 800b542:	7bfb      	ldrb	r3, [r7, #15]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d003      	beq.n	800b550 <HAL_DAC_Stop_DMA+0x9c>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	2204      	movs	r2, #4
 800b54c:	711a      	strb	r2, [r3, #4]
 800b54e:	e002      	b.n	800b556 <HAL_DAC_Stop_DMA+0xa2>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	2201      	movs	r2, #1
 800b554:	711a      	strb	r2, [r3, #4]
  }

  /* Return function status */
  return status;
 800b556:	7bfb      	ldrb	r3, [r7, #15]
}
 800b558:	4618      	mov	r0, r3
 800b55a:	3710      	adds	r7, #16
 800b55c:	46bd      	mov	sp, r7
 800b55e:	bd80      	pop	{r7, pc}

0800b560 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800b560:	b480      	push	{r7}
 800b562:	b087      	sub	sp, #28
 800b564:	af00      	add	r7, sp, #0
 800b566:	60f8      	str	r0, [r7, #12]
 800b568:	60b9      	str	r1, [r7, #8]
 800b56a:	607a      	str	r2, [r7, #4]
 800b56c:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 800b56e:	2300      	movs	r3, #0
 800b570:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800b57e:	68bb      	ldr	r3, [r7, #8]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d105      	bne.n	800b590 <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800b584:	697a      	ldr	r2, [r7, #20]
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	4413      	add	r3, r2
 800b58a:	3308      	adds	r3, #8
 800b58c:	617b      	str	r3, [r7, #20]
 800b58e:	e004      	b.n	800b59a <HAL_DAC_SetValue+0x3a>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800b590:	697a      	ldr	r2, [r7, #20]
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	4413      	add	r3, r2
 800b596:	3314      	adds	r3, #20
 800b598:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800b59a:	697b      	ldr	r3, [r7, #20]
 800b59c:	461a      	mov	r2, r3
 800b59e:	683b      	ldr	r3, [r7, #0]
 800b5a0:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800b5a2:	2300      	movs	r3, #0
}
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	371c      	adds	r7, #28
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ae:	4770      	bx	lr

0800b5b0 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800b5b0:	b480      	push	{r7}
 800b5b2:	b083      	sub	sp, #12
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800b5b8:	bf00      	nop
 800b5ba:	370c      	adds	r7, #12
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c2:	4770      	bx	lr

0800b5c4 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800b5c4:	b480      	push	{r7}
 800b5c6:	b083      	sub	sp, #12
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800b5cc:	bf00      	nop
 800b5ce:	370c      	adds	r7, #12
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d6:	4770      	bx	lr

0800b5d8 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800b5d8:	b480      	push	{r7}
 800b5da:	b083      	sub	sp, #12
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800b5e0:	bf00      	nop
 800b5e2:	370c      	adds	r7, #12
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ea:	4770      	bx	lr

0800b5ec <HAL_DAC_GetValue>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval The selected DAC channel data output value.
  */
uint32_t HAL_DAC_GetValue(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800b5ec:	b480      	push	{r7}
 800b5ee:	b083      	sub	sp, #12
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
 800b5f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Returns the DAC channel data output register value */
  if (Channel == DAC_CHANNEL_1)
 800b5f6:	683b      	ldr	r3, [r7, #0]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d103      	bne.n	800b604 <HAL_DAC_GetValue+0x18>
  {
    return hdac->Instance->DOR1;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b602:	e002      	b.n	800b60a <HAL_DAC_GetValue+0x1e>
  }
  else
  {
    return hdac->Instance->DOR2;
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  }
}
 800b60a:	4618      	mov	r0, r3
 800b60c:	370c      	adds	r7, #12
 800b60e:	46bd      	mov	sp, r7
 800b610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b614:	4770      	bx	lr
	...

0800b618 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800b618:	b580      	push	{r7, lr}
 800b61a:	b08a      	sub	sp, #40	; 0x28
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	60f8      	str	r0, [r7, #12]
 800b620:	60b9      	str	r1, [r7, #8]
 800b622:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 800b624:	2300      	movs	r3, #0
 800b626:	61fb      	str	r3, [r7, #28]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	795b      	ldrb	r3, [r3, #5]
 800b62c:	2b01      	cmp	r3, #1
 800b62e:	d101      	bne.n	800b634 <HAL_DAC_ConfigChannel+0x1c>
 800b630:	2302      	movs	r3, #2
 800b632:	e194      	b.n	800b95e <HAL_DAC_ConfigChannel+0x346>
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	2201      	movs	r2, #1
 800b638:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	2202      	movs	r2, #2
 800b63e:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800b640:	68bb      	ldr	r3, [r7, #8]
 800b642:	689b      	ldr	r3, [r3, #8]
 800b644:	2b04      	cmp	r3, #4
 800b646:	d174      	bne.n	800b732 <HAL_DAC_ConfigChannel+0x11a>
    /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d137      	bne.n	800b6be <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 800b64e:	f7fd fc95 	bl	8008f7c <HAL_GetTick>
 800b652:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800b654:	e011      	b.n	800b67a <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800b656:	f7fd fc91 	bl	8008f7c <HAL_GetTick>
 800b65a:	4602      	mov	r2, r0
 800b65c:	69fb      	ldr	r3, [r7, #28]
 800b65e:	1ad3      	subs	r3, r2, r3
 800b660:	2b01      	cmp	r3, #1
 800b662:	d90a      	bls.n	800b67a <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	691b      	ldr	r3, [r3, #16]
 800b668:	f043 0208 	orr.w	r2, r3, #8
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	2203      	movs	r2, #3
 800b674:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800b676:	2303      	movs	r3, #3
 800b678:	e171      	b.n	800b95e <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b680:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b684:	2b00      	cmp	r3, #0
 800b686:	d1e6      	bne.n	800b656 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 800b688:	2001      	movs	r0, #1
 800b68a:	f7fd fc83 	bl	8008f94 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	68ba      	ldr	r2, [r7, #8]
 800b694:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b696:	641a      	str	r2, [r3, #64]	; 0x40
 800b698:	e01e      	b.n	800b6d8 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800b69a:	f7fd fc6f 	bl	8008f7c <HAL_GetTick>
 800b69e:	4602      	mov	r2, r0
 800b6a0:	69fb      	ldr	r3, [r7, #28]
 800b6a2:	1ad3      	subs	r3, r2, r3
 800b6a4:	2b01      	cmp	r3, #1
 800b6a6:	d90a      	bls.n	800b6be <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	691b      	ldr	r3, [r3, #16]
 800b6ac:	f043 0208 	orr.w	r2, r3, #8
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	2203      	movs	r2, #3
 800b6b8:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800b6ba:	2303      	movs	r3, #3
 800b6bc:	e14f      	b.n	800b95e <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	dbe8      	blt.n	800b69a <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 800b6c8:	2001      	movs	r0, #1
 800b6ca:	f7fd fc63 	bl	8008f94 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	68ba      	ldr	r2, [r7, #8]
 800b6d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b6d6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	f003 0310 	and.w	r3, r3, #16
 800b6e4:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800b6e8:	fa01 f303 	lsl.w	r3, r1, r3
 800b6ec:	43db      	mvns	r3, r3
 800b6ee:	ea02 0103 	and.w	r1, r2, r3
 800b6f2:	68bb      	ldr	r3, [r7, #8]
 800b6f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	f003 0310 	and.w	r3, r3, #16
 800b6fc:	409a      	lsls	r2, r3
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	430a      	orrs	r2, r1
 800b704:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	f003 0310 	and.w	r3, r3, #16
 800b712:	21ff      	movs	r1, #255	; 0xff
 800b714:	fa01 f303 	lsl.w	r3, r1, r3
 800b718:	43db      	mvns	r3, r3
 800b71a:	ea02 0103 	and.w	r1, r2, r3
 800b71e:	68bb      	ldr	r3, [r7, #8]
 800b720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	f003 0310 	and.w	r3, r3, #16
 800b728:	409a      	lsls	r2, r3
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	430a      	orrs	r2, r1
 800b730:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800b732:	68bb      	ldr	r3, [r7, #8]
 800b734:	69db      	ldr	r3, [r3, #28]
 800b736:	2b01      	cmp	r3, #1
 800b738:	d11d      	bne.n	800b776 <HAL_DAC_ConfigChannel+0x15e>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b740:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	f003 0310 	and.w	r3, r3, #16
 800b748:	221f      	movs	r2, #31
 800b74a:	fa02 f303 	lsl.w	r3, r2, r3
 800b74e:	43db      	mvns	r3, r3
 800b750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b752:	4013      	ands	r3, r2
 800b754:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800b756:	68bb      	ldr	r3, [r7, #8]
 800b758:	6a1b      	ldr	r3, [r3, #32]
 800b75a:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	f003 0310 	and.w	r3, r3, #16
 800b762:	69ba      	ldr	r2, [r7, #24]
 800b764:	fa02 f303 	lsl.w	r3, r2, r3
 800b768:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b76a:	4313      	orrs	r3, r2
 800b76c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b774:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b77c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	f003 0310 	and.w	r3, r3, #16
 800b784:	2207      	movs	r2, #7
 800b786:	fa02 f303 	lsl.w	r3, r2, r3
 800b78a:	43db      	mvns	r3, r3
 800b78c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b78e:	4013      	ands	r3, r2
 800b790:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_EXTERNAL) == DAC_CHIPCONNECT_EXTERNAL)
 800b792:	68bb      	ldr	r3, [r7, #8]
 800b794:	699b      	ldr	r3, [r3, #24]
 800b796:	f003 0301 	and.w	r3, r3, #1
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d002      	beq.n	800b7a4 <HAL_DAC_ConfigChannel+0x18c>
  {
    connectOnChip = 0x00000000UL;
 800b79e:	2300      	movs	r3, #0
 800b7a0:	623b      	str	r3, [r7, #32]
 800b7a2:	e011      	b.n	800b7c8 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_INTERNAL) == DAC_CHIPCONNECT_INTERNAL)
 800b7a4:	68bb      	ldr	r3, [r7, #8]
 800b7a6:	699b      	ldr	r3, [r3, #24]
 800b7a8:	f003 0302 	and.w	r3, r3, #2
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d002      	beq.n	800b7b6 <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800b7b0:	2301      	movs	r3, #1
 800b7b2:	623b      	str	r3, [r7, #32]
 800b7b4:	e008      	b.n	800b7c8 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_BOTH) == DAC_CHIPCONNECT_BOTH */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800b7b6:	68bb      	ldr	r3, [r7, #8]
 800b7b8:	695b      	ldr	r3, [r3, #20]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d102      	bne.n	800b7c4 <HAL_DAC_ConfigChannel+0x1ac>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800b7be:	2301      	movs	r3, #1
 800b7c0:	623b      	str	r3, [r7, #32]
 800b7c2:	e001      	b.n	800b7c8 <HAL_DAC_ConfigChannel+0x1b0>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800b7c8:	68bb      	ldr	r3, [r7, #8]
 800b7ca:	689a      	ldr	r2, [r3, #8]
 800b7cc:	68bb      	ldr	r3, [r7, #8]
 800b7ce:	695b      	ldr	r3, [r3, #20]
 800b7d0:	4313      	orrs	r3, r2
 800b7d2:	6a3a      	ldr	r2, [r7, #32]
 800b7d4:	4313      	orrs	r3, r2
 800b7d6:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	f003 0310 	and.w	r3, r3, #16
 800b7de:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b7e2:	fa02 f303 	lsl.w	r3, r2, r3
 800b7e6:	43db      	mvns	r3, r3
 800b7e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b7ea:	4013      	ands	r3, r2
 800b7ec:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800b7ee:	68bb      	ldr	r3, [r7, #8]
 800b7f0:	791b      	ldrb	r3, [r3, #4]
 800b7f2:	2b01      	cmp	r3, #1
 800b7f4:	d102      	bne.n	800b7fc <HAL_DAC_ConfigChannel+0x1e4>
 800b7f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b7fa:	e000      	b.n	800b7fe <HAL_DAC_ConfigChannel+0x1e6>
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	69ba      	ldr	r2, [r7, #24]
 800b800:	4313      	orrs	r3, r2
 800b802:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	f003 0310 	and.w	r3, r3, #16
 800b80a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b80e:	fa02 f303 	lsl.w	r3, r2, r3
 800b812:	43db      	mvns	r3, r3
 800b814:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b816:	4013      	ands	r3, r2
 800b818:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800b81a:	68bb      	ldr	r3, [r7, #8]
 800b81c:	795b      	ldrb	r3, [r3, #5]
 800b81e:	2b01      	cmp	r3, #1
 800b820:	d102      	bne.n	800b828 <HAL_DAC_ConfigChannel+0x210>
 800b822:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b826:	e000      	b.n	800b82a <HAL_DAC_ConfigChannel+0x212>
 800b828:	2300      	movs	r3, #0
 800b82a:	69ba      	ldr	r2, [r7, #24]
 800b82c:	4313      	orrs	r3, r2
 800b82e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 800b830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b832:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800b836:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 800b838:	68bb      	ldr	r3, [r7, #8]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	2b02      	cmp	r3, #2
 800b83e:	d114      	bne.n	800b86a <HAL_DAC_ConfigChannel+0x252>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 800b840:	f001 fc28 	bl	800d094 <HAL_RCC_GetHCLKFreq>
 800b844:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 800b846:	697b      	ldr	r3, [r7, #20]
 800b848:	4a47      	ldr	r2, [pc, #284]	; (800b968 <HAL_DAC_ConfigChannel+0x350>)
 800b84a:	4293      	cmp	r3, r2
 800b84c:	d904      	bls.n	800b858 <HAL_DAC_ConfigChannel+0x240>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800b84e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b850:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b854:	627b      	str	r3, [r7, #36]	; 0x24
 800b856:	e00d      	b.n	800b874 <HAL_DAC_ConfigChannel+0x25c>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 800b858:	697b      	ldr	r3, [r7, #20]
 800b85a:	4a44      	ldr	r2, [pc, #272]	; (800b96c <HAL_DAC_ConfigChannel+0x354>)
 800b85c:	4293      	cmp	r3, r2
 800b85e:	d909      	bls.n	800b874 <HAL_DAC_ConfigChannel+0x25c>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800b860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b862:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b866:	627b      	str	r3, [r7, #36]	; 0x24
 800b868:	e004      	b.n	800b874 <HAL_DAC_ConfigChannel+0x25c>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800b86a:	68bb      	ldr	r3, [r7, #8]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b870:	4313      	orrs	r3, r2
 800b872:	627b      	str	r3, [r7, #36]	; 0x24
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	f003 0310 	and.w	r3, r3, #16
 800b87a:	69ba      	ldr	r2, [r7, #24]
 800b87c:	fa02 f303 	lsl.w	r3, r2, r3
 800b880:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b882:	4313      	orrs	r3, r2
 800b884:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b88c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	6819      	ldr	r1, [r3, #0]
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	f003 0310 	and.w	r3, r3, #16
 800b89a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b89e:	fa02 f303 	lsl.w	r3, r2, r3
 800b8a2:	43da      	mvns	r2, r3
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	400a      	ands	r2, r1
 800b8aa:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	f003 0310 	and.w	r3, r3, #16
 800b8ba:	f640 72fe 	movw	r2, #4094	; 0xffe
 800b8be:	fa02 f303 	lsl.w	r3, r2, r3
 800b8c2:	43db      	mvns	r3, r3
 800b8c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8c6:	4013      	ands	r3, r2
 800b8c8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800b8ca:	68bb      	ldr	r3, [r7, #8]
 800b8cc:	68db      	ldr	r3, [r3, #12]
 800b8ce:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	f003 0310 	and.w	r3, r3, #16
 800b8d6:	69ba      	ldr	r2, [r7, #24]
 800b8d8:	fa02 f303 	lsl.w	r3, r2, r3
 800b8dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8de:	4313      	orrs	r3, r2
 800b8e0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8e8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	6819      	ldr	r1, [r3, #0]
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	f003 0310 	and.w	r3, r3, #16
 800b8f6:	22c0      	movs	r2, #192	; 0xc0
 800b8f8:	fa02 f303 	lsl.w	r3, r2, r3
 800b8fc:	43da      	mvns	r2, r3
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	400a      	ands	r2, r1
 800b904:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800b906:	68bb      	ldr	r3, [r7, #8]
 800b908:	68db      	ldr	r3, [r3, #12]
 800b90a:	089b      	lsrs	r3, r3, #2
 800b90c:	f003 030f 	and.w	r3, r3, #15
 800b910:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800b912:	68bb      	ldr	r3, [r7, #8]
 800b914:	691b      	ldr	r3, [r3, #16]
 800b916:	089b      	lsrs	r3, r3, #2
 800b918:	021b      	lsls	r3, r3, #8
 800b91a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800b91e:	69ba      	ldr	r2, [r7, #24]
 800b920:	4313      	orrs	r3, r2
 800b922:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	f003 0310 	and.w	r3, r3, #16
 800b930:	f640 710f 	movw	r1, #3855	; 0xf0f
 800b934:	fa01 f303 	lsl.w	r3, r1, r3
 800b938:	43db      	mvns	r3, r3
 800b93a:	ea02 0103 	and.w	r1, r2, r3
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	f003 0310 	and.w	r3, r3, #16
 800b944:	69ba      	ldr	r2, [r7, #24]
 800b946:	409a      	lsls	r2, r3
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	430a      	orrs	r2, r1
 800b94e:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	2201      	movs	r2, #1
 800b954:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	2200      	movs	r2, #0
 800b95a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800b95c:	2300      	movs	r3, #0
}
 800b95e:	4618      	mov	r0, r3
 800b960:	3728      	adds	r7, #40	; 0x28
 800b962:	46bd      	mov	sp, r7
 800b964:	bd80      	pop	{r7, pc}
 800b966:	bf00      	nop
 800b968:	09896800 	.word	0x09896800
 800b96c:	04c4b400 	.word	0x04c4b400

0800b970 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800b970:	b580      	push	{r7, lr}
 800b972:	b084      	sub	sp, #16
 800b974:	af00      	add	r7, sp, #0
 800b976:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b97c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800b97e:	68f8      	ldr	r0, [r7, #12]
 800b980:	f7ff fe16 	bl	800b5b0 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	2201      	movs	r2, #1
 800b988:	711a      	strb	r2, [r3, #4]
}
 800b98a:	bf00      	nop
 800b98c:	3710      	adds	r7, #16
 800b98e:	46bd      	mov	sp, r7
 800b990:	bd80      	pop	{r7, pc}

0800b992 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800b992:	b580      	push	{r7, lr}
 800b994:	b084      	sub	sp, #16
 800b996:	af00      	add	r7, sp, #0
 800b998:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b99e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800b9a0:	68f8      	ldr	r0, [r7, #12]
 800b9a2:	f7ff fe0f 	bl	800b5c4 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800b9a6:	bf00      	nop
 800b9a8:	3710      	adds	r7, #16
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	bd80      	pop	{r7, pc}

0800b9ae <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800b9ae:	b580      	push	{r7, lr}
 800b9b0:	b084      	sub	sp, #16
 800b9b2:	af00      	add	r7, sp, #0
 800b9b4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9ba:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	691b      	ldr	r3, [r3, #16]
 800b9c0:	f043 0204 	orr.w	r2, r3, #4
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800b9c8:	68f8      	ldr	r0, [r7, #12]
 800b9ca:	f7ff fe05 	bl	800b5d8 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	2201      	movs	r2, #1
 800b9d2:	711a      	strb	r2, [r3, #4]
}
 800b9d4:	bf00      	nop
 800b9d6:	3710      	adds	r7, #16
 800b9d8:	46bd      	mov	sp, r7
 800b9da:	bd80      	pop	{r7, pc}

0800b9dc <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800b9dc:	b480      	push	{r7}
 800b9de:	b083      	sub	sp, #12
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800b9e4:	bf00      	nop
 800b9e6:	370c      	adds	r7, #12
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ee:	4770      	bx	lr

0800b9f0 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800b9f0:	b480      	push	{r7}
 800b9f2:	b083      	sub	sp, #12
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800b9f8:	bf00      	nop
 800b9fa:	370c      	adds	r7, #12
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba02:	4770      	bx	lr

0800ba04 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800ba04:	b480      	push	{r7}
 800ba06:	b083      	sub	sp, #12
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800ba0c:	bf00      	nop
 800ba0e:	370c      	adds	r7, #12
 800ba10:	46bd      	mov	sp, r7
 800ba12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba16:	4770      	bx	lr

0800ba18 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	b084      	sub	sp, #16
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba24:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800ba26:	68f8      	ldr	r0, [r7, #12]
 800ba28:	f7ff ffd8 	bl	800b9dc <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	2201      	movs	r2, #1
 800ba30:	711a      	strb	r2, [r3, #4]
}
 800ba32:	bf00      	nop
 800ba34:	3710      	adds	r7, #16
 800ba36:	46bd      	mov	sp, r7
 800ba38:	bd80      	pop	{r7, pc}

0800ba3a <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800ba3a:	b580      	push	{r7, lr}
 800ba3c:	b084      	sub	sp, #16
 800ba3e:	af00      	add	r7, sp, #0
 800ba40:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba46:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800ba48:	68f8      	ldr	r0, [r7, #12]
 800ba4a:	f7ff ffd1 	bl	800b9f0 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800ba4e:	bf00      	nop
 800ba50:	3710      	adds	r7, #16
 800ba52:	46bd      	mov	sp, r7
 800ba54:	bd80      	pop	{r7, pc}

0800ba56 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800ba56:	b580      	push	{r7, lr}
 800ba58:	b084      	sub	sp, #16
 800ba5a:	af00      	add	r7, sp, #0
 800ba5c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba62:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	691b      	ldr	r3, [r3, #16]
 800ba68:	f043 0204 	orr.w	r2, r3, #4
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800ba70:	68f8      	ldr	r0, [r7, #12]
 800ba72:	f7ff ffc7 	bl	800ba04 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	2201      	movs	r2, #1
 800ba7a:	711a      	strb	r2, [r3, #4]
}
 800ba7c:	bf00      	nop
 800ba7e:	3710      	adds	r7, #16
 800ba80:	46bd      	mov	sp, r7
 800ba82:	bd80      	pop	{r7, pc}

0800ba84 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b084      	sub	sp, #16
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d101      	bne.n	800ba96 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800ba92:	2301      	movs	r3, #1
 800ba94:	e08d      	b.n	800bbb2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	461a      	mov	r2, r3
 800ba9c:	4b47      	ldr	r3, [pc, #284]	; (800bbbc <HAL_DMA_Init+0x138>)
 800ba9e:	429a      	cmp	r2, r3
 800baa0:	d80f      	bhi.n	800bac2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	461a      	mov	r2, r3
 800baa8:	4b45      	ldr	r3, [pc, #276]	; (800bbc0 <HAL_DMA_Init+0x13c>)
 800baaa:	4413      	add	r3, r2
 800baac:	4a45      	ldr	r2, [pc, #276]	; (800bbc4 <HAL_DMA_Init+0x140>)
 800baae:	fba2 2303 	umull	r2, r3, r2, r3
 800bab2:	091b      	lsrs	r3, r3, #4
 800bab4:	009a      	lsls	r2, r3, #2
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	4a42      	ldr	r2, [pc, #264]	; (800bbc8 <HAL_DMA_Init+0x144>)
 800babe:	641a      	str	r2, [r3, #64]	; 0x40
 800bac0:	e00e      	b.n	800bae0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	461a      	mov	r2, r3
 800bac8:	4b40      	ldr	r3, [pc, #256]	; (800bbcc <HAL_DMA_Init+0x148>)
 800baca:	4413      	add	r3, r2
 800bacc:	4a3d      	ldr	r2, [pc, #244]	; (800bbc4 <HAL_DMA_Init+0x140>)
 800bace:	fba2 2303 	umull	r2, r3, r2, r3
 800bad2:	091b      	lsrs	r3, r3, #4
 800bad4:	009a      	lsls	r2, r3, #2
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	4a3c      	ldr	r2, [pc, #240]	; (800bbd0 <HAL_DMA_Init+0x14c>)
 800bade:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	2202      	movs	r2, #2
 800bae4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800baf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bafa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800bb04:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	691b      	ldr	r3, [r3, #16]
 800bb0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800bb10:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	699b      	ldr	r3, [r3, #24]
 800bb16:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800bb1c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	6a1b      	ldr	r3, [r3, #32]
 800bb22:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800bb24:	68fa      	ldr	r2, [r7, #12]
 800bb26:	4313      	orrs	r3, r2
 800bb28:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	68fa      	ldr	r2, [r7, #12]
 800bb30:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800bb32:	6878      	ldr	r0, [r7, #4]
 800bb34:	f000 fa76 	bl	800c024 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	689b      	ldr	r3, [r3, #8]
 800bb3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bb40:	d102      	bne.n	800bb48 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	2200      	movs	r2, #0
 800bb46:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	685a      	ldr	r2, [r3, #4]
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bb50:	b2d2      	uxtb	r2, r2
 800bb52:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb58:	687a      	ldr	r2, [r7, #4]
 800bb5a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800bb5c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	685b      	ldr	r3, [r3, #4]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d010      	beq.n	800bb88 <HAL_DMA_Init+0x104>
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	685b      	ldr	r3, [r3, #4]
 800bb6a:	2b04      	cmp	r3, #4
 800bb6c:	d80c      	bhi.n	800bb88 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800bb6e:	6878      	ldr	r0, [r7, #4]
 800bb70:	f000 fa96 	bl	800c0a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb78:	2200      	movs	r2, #0
 800bb7a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb80:	687a      	ldr	r2, [r7, #4]
 800bb82:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800bb84:	605a      	str	r2, [r3, #4]
 800bb86:	e008      	b.n	800bb9a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	2200      	movs	r2, #0
 800bb8c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	2200      	movs	r2, #0
 800bb92:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	2200      	movs	r2, #0
 800bb98:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	2200      	movs	r2, #0
 800bb9e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	2201      	movs	r2, #1
 800bba4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	2200      	movs	r2, #0
 800bbac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800bbb0:	2300      	movs	r3, #0
}
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	3710      	adds	r7, #16
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	bd80      	pop	{r7, pc}
 800bbba:	bf00      	nop
 800bbbc:	40020407 	.word	0x40020407
 800bbc0:	bffdfff8 	.word	0xbffdfff8
 800bbc4:	cccccccd 	.word	0xcccccccd
 800bbc8:	40020000 	.word	0x40020000
 800bbcc:	bffdfbf8 	.word	0xbffdfbf8
 800bbd0:	40020400 	.word	0x40020400

0800bbd4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b086      	sub	sp, #24
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	60f8      	str	r0, [r7, #12]
 800bbdc:	60b9      	str	r1, [r7, #8]
 800bbde:	607a      	str	r2, [r7, #4]
 800bbe0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800bbec:	2b01      	cmp	r3, #1
 800bbee:	d101      	bne.n	800bbf4 <HAL_DMA_Start_IT+0x20>
 800bbf0:	2302      	movs	r3, #2
 800bbf2:	e066      	b.n	800bcc2 <HAL_DMA_Start_IT+0xee>
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	2201      	movs	r2, #1
 800bbf8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800bc02:	b2db      	uxtb	r3, r3
 800bc04:	2b01      	cmp	r3, #1
 800bc06:	d155      	bne.n	800bcb4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	2202      	movs	r2, #2
 800bc0c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	2200      	movs	r2, #0
 800bc14:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	681a      	ldr	r2, [r3, #0]
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	f022 0201 	bic.w	r2, r2, #1
 800bc24:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800bc26:	683b      	ldr	r3, [r7, #0]
 800bc28:	687a      	ldr	r2, [r7, #4]
 800bc2a:	68b9      	ldr	r1, [r7, #8]
 800bc2c:	68f8      	ldr	r0, [r7, #12]
 800bc2e:	f000 f9bb 	bl	800bfa8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d008      	beq.n	800bc4c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	681a      	ldr	r2, [r3, #0]
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	f042 020e 	orr.w	r2, r2, #14
 800bc48:	601a      	str	r2, [r3, #0]
 800bc4a:	e00f      	b.n	800bc6c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	681a      	ldr	r2, [r3, #0]
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	f022 0204 	bic.w	r2, r2, #4
 800bc5a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	681a      	ldr	r2, [r3, #0]
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	f042 020a 	orr.w	r2, r2, #10
 800bc6a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d007      	beq.n	800bc8a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bc7e:	681a      	ldr	r2, [r3, #0]
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bc84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bc88:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d007      	beq.n	800bca2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc96:	681a      	ldr	r2, [r3, #0]
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bca0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	681a      	ldr	r2, [r3, #0]
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	f042 0201 	orr.w	r2, r2, #1
 800bcb0:	601a      	str	r2, [r3, #0]
 800bcb2:	e005      	b.n	800bcc0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	2200      	movs	r2, #0
 800bcb8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800bcbc:	2302      	movs	r3, #2
 800bcbe:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800bcc0:	7dfb      	ldrb	r3, [r7, #23]
}
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	3718      	adds	r7, #24
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	bd80      	pop	{r7, pc}

0800bcca <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800bcca:	b480      	push	{r7}
 800bccc:	b085      	sub	sp, #20
 800bcce:	af00      	add	r7, sp, #0
 800bcd0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800bcdc:	b2db      	uxtb	r3, r3
 800bcde:	2b02      	cmp	r3, #2
 800bce0:	d005      	beq.n	800bcee <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	2204      	movs	r2, #4
 800bce6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800bce8:	2301      	movs	r3, #1
 800bcea:	73fb      	strb	r3, [r7, #15]
 800bcec:	e037      	b.n	800bd5e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	681a      	ldr	r2, [r3, #0]
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	f022 020e 	bic.w	r2, r2, #14
 800bcfc:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bd02:	681a      	ldr	r2, [r3, #0]
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bd08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bd0c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	681a      	ldr	r2, [r3, #0]
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	f022 0201 	bic.w	r2, r2, #1
 800bd1c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd22:	f003 021f 	and.w	r2, r3, #31
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd2a:	2101      	movs	r1, #1
 800bd2c:	fa01 f202 	lsl.w	r2, r1, r2
 800bd30:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd36:	687a      	ldr	r2, [r7, #4]
 800bd38:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800bd3a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d00c      	beq.n	800bd5e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd48:	681a      	ldr	r2, [r3, #0]
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd4e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bd52:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd58:	687a      	ldr	r2, [r7, #4]
 800bd5a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800bd5c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	2201      	movs	r2, #1
 800bd62:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	2200      	movs	r2, #0
 800bd6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800bd6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd70:	4618      	mov	r0, r3
 800bd72:	3714      	adds	r7, #20
 800bd74:	46bd      	mov	sp, r7
 800bd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7a:	4770      	bx	lr

0800bd7c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	b084      	sub	sp, #16
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bd84:	2300      	movs	r3, #0
 800bd86:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800bd8e:	b2db      	uxtb	r3, r3
 800bd90:	2b02      	cmp	r3, #2
 800bd92:	d00d      	beq.n	800bdb0 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	2204      	movs	r2, #4
 800bd98:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	2201      	movs	r2, #1
 800bd9e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	2200      	movs	r2, #0
 800bda6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800bdaa:	2301      	movs	r3, #1
 800bdac:	73fb      	strb	r3, [r7, #15]
 800bdae:	e047      	b.n	800be40 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	681a      	ldr	r2, [r3, #0]
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	f022 020e 	bic.w	r2, r2, #14
 800bdbe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	681a      	ldr	r2, [r3, #0]
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	f022 0201 	bic.w	r2, r2, #1
 800bdce:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bdd4:	681a      	ldr	r2, [r3, #0]
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bdda:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bdde:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bde4:	f003 021f 	and.w	r2, r3, #31
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdec:	2101      	movs	r1, #1
 800bdee:	fa01 f202 	lsl.w	r2, r1, r2
 800bdf2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bdf8:	687a      	ldr	r2, [r7, #4]
 800bdfa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800bdfc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be02:	2b00      	cmp	r3, #0
 800be04:	d00c      	beq.n	800be20 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be0a:	681a      	ldr	r2, [r3, #0]
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800be14:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be1a:	687a      	ldr	r2, [r7, #4]
 800be1c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800be1e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	2201      	movs	r2, #1
 800be24:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	2200      	movs	r2, #0
 800be2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be34:	2b00      	cmp	r3, #0
 800be36:	d003      	beq.n	800be40 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be3c:	6878      	ldr	r0, [r7, #4]
 800be3e:	4798      	blx	r3
    }
  }
  return status;
 800be40:	7bfb      	ldrb	r3, [r7, #15]
}
 800be42:	4618      	mov	r0, r3
 800be44:	3710      	adds	r7, #16
 800be46:	46bd      	mov	sp, r7
 800be48:	bd80      	pop	{r7, pc}

0800be4a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800be4a:	b580      	push	{r7, lr}
 800be4c:	b084      	sub	sp, #16
 800be4e:	af00      	add	r7, sp, #0
 800be50:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be66:	f003 031f 	and.w	r3, r3, #31
 800be6a:	2204      	movs	r2, #4
 800be6c:	409a      	lsls	r2, r3
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	4013      	ands	r3, r2
 800be72:	2b00      	cmp	r3, #0
 800be74:	d026      	beq.n	800bec4 <HAL_DMA_IRQHandler+0x7a>
 800be76:	68bb      	ldr	r3, [r7, #8]
 800be78:	f003 0304 	and.w	r3, r3, #4
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d021      	beq.n	800bec4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	f003 0320 	and.w	r3, r3, #32
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d107      	bne.n	800be9e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	681a      	ldr	r2, [r3, #0]
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	f022 0204 	bic.w	r2, r2, #4
 800be9c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bea2:	f003 021f 	and.w	r2, r3, #31
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800beaa:	2104      	movs	r1, #4
 800beac:	fa01 f202 	lsl.w	r2, r1, r2
 800beb0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d071      	beq.n	800bf9e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bebe:	6878      	ldr	r0, [r7, #4]
 800bec0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800bec2:	e06c      	b.n	800bf9e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bec8:	f003 031f 	and.w	r3, r3, #31
 800becc:	2202      	movs	r2, #2
 800bece:	409a      	lsls	r2, r3
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	4013      	ands	r3, r2
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d02e      	beq.n	800bf36 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800bed8:	68bb      	ldr	r3, [r7, #8]
 800beda:	f003 0302 	and.w	r3, r3, #2
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d029      	beq.n	800bf36 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	f003 0320 	and.w	r3, r3, #32
 800beec:	2b00      	cmp	r3, #0
 800beee:	d10b      	bne.n	800bf08 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	681a      	ldr	r2, [r3, #0]
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	f022 020a 	bic.w	r2, r2, #10
 800befe:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	2201      	movs	r2, #1
 800bf04:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf0c:	f003 021f 	and.w	r2, r3, #31
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf14:	2102      	movs	r1, #2
 800bf16:	fa01 f202 	lsl.w	r2, r1, r2
 800bf1a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	2200      	movs	r2, #0
 800bf20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d038      	beq.n	800bf9e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf30:	6878      	ldr	r0, [r7, #4]
 800bf32:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800bf34:	e033      	b.n	800bf9e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf3a:	f003 031f 	and.w	r3, r3, #31
 800bf3e:	2208      	movs	r2, #8
 800bf40:	409a      	lsls	r2, r3
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	4013      	ands	r3, r2
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d02a      	beq.n	800bfa0 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800bf4a:	68bb      	ldr	r3, [r7, #8]
 800bf4c:	f003 0308 	and.w	r3, r3, #8
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d025      	beq.n	800bfa0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	681a      	ldr	r2, [r3, #0]
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	f022 020e 	bic.w	r2, r2, #14
 800bf62:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf68:	f003 021f 	and.w	r2, r3, #31
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf70:	2101      	movs	r1, #1
 800bf72:	fa01 f202 	lsl.w	r2, r1, r2
 800bf76:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	2201      	movs	r2, #1
 800bf7c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	2201      	movs	r2, #1
 800bf82:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	2200      	movs	r2, #0
 800bf8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d004      	beq.n	800bfa0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf9a:	6878      	ldr	r0, [r7, #4]
 800bf9c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800bf9e:	bf00      	nop
 800bfa0:	bf00      	nop
}
 800bfa2:	3710      	adds	r7, #16
 800bfa4:	46bd      	mov	sp, r7
 800bfa6:	bd80      	pop	{r7, pc}

0800bfa8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800bfa8:	b480      	push	{r7}
 800bfaa:	b085      	sub	sp, #20
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	60f8      	str	r0, [r7, #12]
 800bfb0:	60b9      	str	r1, [r7, #8]
 800bfb2:	607a      	str	r2, [r7, #4]
 800bfb4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bfba:	68fa      	ldr	r2, [r7, #12]
 800bfbc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800bfbe:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d004      	beq.n	800bfd2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bfcc:	68fa      	ldr	r2, [r7, #12]
 800bfce:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800bfd0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bfd6:	f003 021f 	and.w	r2, r3, #31
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfde:	2101      	movs	r1, #1
 800bfe0:	fa01 f202 	lsl.w	r2, r1, r2
 800bfe4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	683a      	ldr	r2, [r7, #0]
 800bfec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	689b      	ldr	r3, [r3, #8]
 800bff2:	2b10      	cmp	r3, #16
 800bff4:	d108      	bne.n	800c008 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	687a      	ldr	r2, [r7, #4]
 800bffc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	68ba      	ldr	r2, [r7, #8]
 800c004:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800c006:	e007      	b.n	800c018 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	68ba      	ldr	r2, [r7, #8]
 800c00e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	687a      	ldr	r2, [r7, #4]
 800c016:	60da      	str	r2, [r3, #12]
}
 800c018:	bf00      	nop
 800c01a:	3714      	adds	r7, #20
 800c01c:	46bd      	mov	sp, r7
 800c01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c022:	4770      	bx	lr

0800c024 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800c024:	b480      	push	{r7}
 800c026:	b087      	sub	sp, #28
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	461a      	mov	r2, r3
 800c032:	4b16      	ldr	r3, [pc, #88]	; (800c08c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800c034:	429a      	cmp	r2, r3
 800c036:	d802      	bhi.n	800c03e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800c038:	4b15      	ldr	r3, [pc, #84]	; (800c090 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800c03a:	617b      	str	r3, [r7, #20]
 800c03c:	e001      	b.n	800c042 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800c03e:	4b15      	ldr	r3, [pc, #84]	; (800c094 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800c040:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800c042:	697b      	ldr	r3, [r7, #20]
 800c044:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	b2db      	uxtb	r3, r3
 800c04c:	3b08      	subs	r3, #8
 800c04e:	4a12      	ldr	r2, [pc, #72]	; (800c098 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800c050:	fba2 2303 	umull	r2, r3, r2, r3
 800c054:	091b      	lsrs	r3, r3, #4
 800c056:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c05c:	089b      	lsrs	r3, r3, #2
 800c05e:	009a      	lsls	r2, r3, #2
 800c060:	693b      	ldr	r3, [r7, #16]
 800c062:	4413      	add	r3, r2
 800c064:	461a      	mov	r2, r3
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	4a0b      	ldr	r2, [pc, #44]	; (800c09c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800c06e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	f003 031f 	and.w	r3, r3, #31
 800c076:	2201      	movs	r2, #1
 800c078:	409a      	lsls	r2, r3
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800c07e:	bf00      	nop
 800c080:	371c      	adds	r7, #28
 800c082:	46bd      	mov	sp, r7
 800c084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c088:	4770      	bx	lr
 800c08a:	bf00      	nop
 800c08c:	40020407 	.word	0x40020407
 800c090:	40020800 	.word	0x40020800
 800c094:	40020820 	.word	0x40020820
 800c098:	cccccccd 	.word	0xcccccccd
 800c09c:	40020880 	.word	0x40020880

0800c0a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800c0a0:	b480      	push	{r7}
 800c0a2:	b085      	sub	sp, #20
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	685b      	ldr	r3, [r3, #4]
 800c0ac:	b2db      	uxtb	r3, r3
 800c0ae:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800c0b0:	68fa      	ldr	r2, [r7, #12]
 800c0b2:	4b0b      	ldr	r3, [pc, #44]	; (800c0e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800c0b4:	4413      	add	r3, r2
 800c0b6:	009b      	lsls	r3, r3, #2
 800c0b8:	461a      	mov	r2, r3
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	4a08      	ldr	r2, [pc, #32]	; (800c0e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800c0c2:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	3b01      	subs	r3, #1
 800c0c8:	f003 031f 	and.w	r3, r3, #31
 800c0cc:	2201      	movs	r2, #1
 800c0ce:	409a      	lsls	r2, r3
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800c0d4:	bf00      	nop
 800c0d6:	3714      	adds	r7, #20
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0de:	4770      	bx	lr
 800c0e0:	1000823f 	.word	0x1000823f
 800c0e4:	40020940 	.word	0x40020940

0800c0e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800c0e8:	b480      	push	{r7}
 800c0ea:	b087      	sub	sp, #28
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
 800c0f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800c0f6:	e15a      	b.n	800c3ae <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800c0f8:	683b      	ldr	r3, [r7, #0]
 800c0fa:	681a      	ldr	r2, [r3, #0]
 800c0fc:	2101      	movs	r1, #1
 800c0fe:	697b      	ldr	r3, [r7, #20]
 800c100:	fa01 f303 	lsl.w	r3, r1, r3
 800c104:	4013      	ands	r3, r2
 800c106:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	f000 814c 	beq.w	800c3a8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800c110:	683b      	ldr	r3, [r7, #0]
 800c112:	685b      	ldr	r3, [r3, #4]
 800c114:	2b01      	cmp	r3, #1
 800c116:	d00b      	beq.n	800c130 <HAL_GPIO_Init+0x48>
 800c118:	683b      	ldr	r3, [r7, #0]
 800c11a:	685b      	ldr	r3, [r3, #4]
 800c11c:	2b02      	cmp	r3, #2
 800c11e:	d007      	beq.n	800c130 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c120:	683b      	ldr	r3, [r7, #0]
 800c122:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800c124:	2b11      	cmp	r3, #17
 800c126:	d003      	beq.n	800c130 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c128:	683b      	ldr	r3, [r7, #0]
 800c12a:	685b      	ldr	r3, [r3, #4]
 800c12c:	2b12      	cmp	r3, #18
 800c12e:	d130      	bne.n	800c192 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	689b      	ldr	r3, [r3, #8]
 800c134:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800c136:	697b      	ldr	r3, [r7, #20]
 800c138:	005b      	lsls	r3, r3, #1
 800c13a:	2203      	movs	r2, #3
 800c13c:	fa02 f303 	lsl.w	r3, r2, r3
 800c140:	43db      	mvns	r3, r3
 800c142:	693a      	ldr	r2, [r7, #16]
 800c144:	4013      	ands	r3, r2
 800c146:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800c148:	683b      	ldr	r3, [r7, #0]
 800c14a:	68da      	ldr	r2, [r3, #12]
 800c14c:	697b      	ldr	r3, [r7, #20]
 800c14e:	005b      	lsls	r3, r3, #1
 800c150:	fa02 f303 	lsl.w	r3, r2, r3
 800c154:	693a      	ldr	r2, [r7, #16]
 800c156:	4313      	orrs	r3, r2
 800c158:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	693a      	ldr	r2, [r7, #16]
 800c15e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	685b      	ldr	r3, [r3, #4]
 800c164:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800c166:	2201      	movs	r2, #1
 800c168:	697b      	ldr	r3, [r7, #20]
 800c16a:	fa02 f303 	lsl.w	r3, r2, r3
 800c16e:	43db      	mvns	r3, r3
 800c170:	693a      	ldr	r2, [r7, #16]
 800c172:	4013      	ands	r3, r2
 800c174:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800c176:	683b      	ldr	r3, [r7, #0]
 800c178:	685b      	ldr	r3, [r3, #4]
 800c17a:	091b      	lsrs	r3, r3, #4
 800c17c:	f003 0201 	and.w	r2, r3, #1
 800c180:	697b      	ldr	r3, [r7, #20]
 800c182:	fa02 f303 	lsl.w	r3, r2, r3
 800c186:	693a      	ldr	r2, [r7, #16]
 800c188:	4313      	orrs	r3, r2
 800c18a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	693a      	ldr	r2, [r7, #16]
 800c190:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	68db      	ldr	r3, [r3, #12]
 800c196:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800c198:	697b      	ldr	r3, [r7, #20]
 800c19a:	005b      	lsls	r3, r3, #1
 800c19c:	2203      	movs	r2, #3
 800c19e:	fa02 f303 	lsl.w	r3, r2, r3
 800c1a2:	43db      	mvns	r3, r3
 800c1a4:	693a      	ldr	r2, [r7, #16]
 800c1a6:	4013      	ands	r3, r2
 800c1a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800c1aa:	683b      	ldr	r3, [r7, #0]
 800c1ac:	689a      	ldr	r2, [r3, #8]
 800c1ae:	697b      	ldr	r3, [r7, #20]
 800c1b0:	005b      	lsls	r3, r3, #1
 800c1b2:	fa02 f303 	lsl.w	r3, r2, r3
 800c1b6:	693a      	ldr	r2, [r7, #16]
 800c1b8:	4313      	orrs	r3, r2
 800c1ba:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	693a      	ldr	r2, [r7, #16]
 800c1c0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c1c2:	683b      	ldr	r3, [r7, #0]
 800c1c4:	685b      	ldr	r3, [r3, #4]
 800c1c6:	2b02      	cmp	r3, #2
 800c1c8:	d003      	beq.n	800c1d2 <HAL_GPIO_Init+0xea>
 800c1ca:	683b      	ldr	r3, [r7, #0]
 800c1cc:	685b      	ldr	r3, [r3, #4]
 800c1ce:	2b12      	cmp	r3, #18
 800c1d0:	d123      	bne.n	800c21a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800c1d2:	697b      	ldr	r3, [r7, #20]
 800c1d4:	08da      	lsrs	r2, r3, #3
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	3208      	adds	r2, #8
 800c1da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800c1e0:	697b      	ldr	r3, [r7, #20]
 800c1e2:	f003 0307 	and.w	r3, r3, #7
 800c1e6:	009b      	lsls	r3, r3, #2
 800c1e8:	220f      	movs	r2, #15
 800c1ea:	fa02 f303 	lsl.w	r3, r2, r3
 800c1ee:	43db      	mvns	r3, r3
 800c1f0:	693a      	ldr	r2, [r7, #16]
 800c1f2:	4013      	ands	r3, r2
 800c1f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800c1f6:	683b      	ldr	r3, [r7, #0]
 800c1f8:	691a      	ldr	r2, [r3, #16]
 800c1fa:	697b      	ldr	r3, [r7, #20]
 800c1fc:	f003 0307 	and.w	r3, r3, #7
 800c200:	009b      	lsls	r3, r3, #2
 800c202:	fa02 f303 	lsl.w	r3, r2, r3
 800c206:	693a      	ldr	r2, [r7, #16]
 800c208:	4313      	orrs	r3, r2
 800c20a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800c20c:	697b      	ldr	r3, [r7, #20]
 800c20e:	08da      	lsrs	r2, r3, #3
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	3208      	adds	r2, #8
 800c214:	6939      	ldr	r1, [r7, #16]
 800c216:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800c220:	697b      	ldr	r3, [r7, #20]
 800c222:	005b      	lsls	r3, r3, #1
 800c224:	2203      	movs	r2, #3
 800c226:	fa02 f303 	lsl.w	r3, r2, r3
 800c22a:	43db      	mvns	r3, r3
 800c22c:	693a      	ldr	r2, [r7, #16]
 800c22e:	4013      	ands	r3, r2
 800c230:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800c232:	683b      	ldr	r3, [r7, #0]
 800c234:	685b      	ldr	r3, [r3, #4]
 800c236:	f003 0203 	and.w	r2, r3, #3
 800c23a:	697b      	ldr	r3, [r7, #20]
 800c23c:	005b      	lsls	r3, r3, #1
 800c23e:	fa02 f303 	lsl.w	r3, r2, r3
 800c242:	693a      	ldr	r2, [r7, #16]
 800c244:	4313      	orrs	r3, r2
 800c246:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	693a      	ldr	r2, [r7, #16]
 800c24c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800c24e:	683b      	ldr	r3, [r7, #0]
 800c250:	685b      	ldr	r3, [r3, #4]
 800c252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c256:	2b00      	cmp	r3, #0
 800c258:	f000 80a6 	beq.w	800c3a8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c25c:	4b5b      	ldr	r3, [pc, #364]	; (800c3cc <HAL_GPIO_Init+0x2e4>)
 800c25e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c260:	4a5a      	ldr	r2, [pc, #360]	; (800c3cc <HAL_GPIO_Init+0x2e4>)
 800c262:	f043 0301 	orr.w	r3, r3, #1
 800c266:	6613      	str	r3, [r2, #96]	; 0x60
 800c268:	4b58      	ldr	r3, [pc, #352]	; (800c3cc <HAL_GPIO_Init+0x2e4>)
 800c26a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c26c:	f003 0301 	and.w	r3, r3, #1
 800c270:	60bb      	str	r3, [r7, #8]
 800c272:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800c274:	4a56      	ldr	r2, [pc, #344]	; (800c3d0 <HAL_GPIO_Init+0x2e8>)
 800c276:	697b      	ldr	r3, [r7, #20]
 800c278:	089b      	lsrs	r3, r3, #2
 800c27a:	3302      	adds	r3, #2
 800c27c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c280:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800c282:	697b      	ldr	r3, [r7, #20]
 800c284:	f003 0303 	and.w	r3, r3, #3
 800c288:	009b      	lsls	r3, r3, #2
 800c28a:	220f      	movs	r2, #15
 800c28c:	fa02 f303 	lsl.w	r3, r2, r3
 800c290:	43db      	mvns	r3, r3
 800c292:	693a      	ldr	r2, [r7, #16]
 800c294:	4013      	ands	r3, r2
 800c296:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800c29e:	d01f      	beq.n	800c2e0 <HAL_GPIO_Init+0x1f8>
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	4a4c      	ldr	r2, [pc, #304]	; (800c3d4 <HAL_GPIO_Init+0x2ec>)
 800c2a4:	4293      	cmp	r3, r2
 800c2a6:	d019      	beq.n	800c2dc <HAL_GPIO_Init+0x1f4>
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	4a4b      	ldr	r2, [pc, #300]	; (800c3d8 <HAL_GPIO_Init+0x2f0>)
 800c2ac:	4293      	cmp	r3, r2
 800c2ae:	d013      	beq.n	800c2d8 <HAL_GPIO_Init+0x1f0>
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	4a4a      	ldr	r2, [pc, #296]	; (800c3dc <HAL_GPIO_Init+0x2f4>)
 800c2b4:	4293      	cmp	r3, r2
 800c2b6:	d00d      	beq.n	800c2d4 <HAL_GPIO_Init+0x1ec>
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	4a49      	ldr	r2, [pc, #292]	; (800c3e0 <HAL_GPIO_Init+0x2f8>)
 800c2bc:	4293      	cmp	r3, r2
 800c2be:	d007      	beq.n	800c2d0 <HAL_GPIO_Init+0x1e8>
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	4a48      	ldr	r2, [pc, #288]	; (800c3e4 <HAL_GPIO_Init+0x2fc>)
 800c2c4:	4293      	cmp	r3, r2
 800c2c6:	d101      	bne.n	800c2cc <HAL_GPIO_Init+0x1e4>
 800c2c8:	2305      	movs	r3, #5
 800c2ca:	e00a      	b.n	800c2e2 <HAL_GPIO_Init+0x1fa>
 800c2cc:	2306      	movs	r3, #6
 800c2ce:	e008      	b.n	800c2e2 <HAL_GPIO_Init+0x1fa>
 800c2d0:	2304      	movs	r3, #4
 800c2d2:	e006      	b.n	800c2e2 <HAL_GPIO_Init+0x1fa>
 800c2d4:	2303      	movs	r3, #3
 800c2d6:	e004      	b.n	800c2e2 <HAL_GPIO_Init+0x1fa>
 800c2d8:	2302      	movs	r3, #2
 800c2da:	e002      	b.n	800c2e2 <HAL_GPIO_Init+0x1fa>
 800c2dc:	2301      	movs	r3, #1
 800c2de:	e000      	b.n	800c2e2 <HAL_GPIO_Init+0x1fa>
 800c2e0:	2300      	movs	r3, #0
 800c2e2:	697a      	ldr	r2, [r7, #20]
 800c2e4:	f002 0203 	and.w	r2, r2, #3
 800c2e8:	0092      	lsls	r2, r2, #2
 800c2ea:	4093      	lsls	r3, r2
 800c2ec:	693a      	ldr	r2, [r7, #16]
 800c2ee:	4313      	orrs	r3, r2
 800c2f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800c2f2:	4937      	ldr	r1, [pc, #220]	; (800c3d0 <HAL_GPIO_Init+0x2e8>)
 800c2f4:	697b      	ldr	r3, [r7, #20]
 800c2f6:	089b      	lsrs	r3, r3, #2
 800c2f8:	3302      	adds	r3, #2
 800c2fa:	693a      	ldr	r2, [r7, #16]
 800c2fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800c300:	4b39      	ldr	r3, [pc, #228]	; (800c3e8 <HAL_GPIO_Init+0x300>)
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	43db      	mvns	r3, r3
 800c30a:	693a      	ldr	r2, [r7, #16]
 800c30c:	4013      	ands	r3, r2
 800c30e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800c310:	683b      	ldr	r3, [r7, #0]
 800c312:	685b      	ldr	r3, [r3, #4]
 800c314:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d003      	beq.n	800c324 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800c31c:	693a      	ldr	r2, [r7, #16]
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	4313      	orrs	r3, r2
 800c322:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800c324:	4a30      	ldr	r2, [pc, #192]	; (800c3e8 <HAL_GPIO_Init+0x300>)
 800c326:	693b      	ldr	r3, [r7, #16]
 800c328:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800c32a:	4b2f      	ldr	r3, [pc, #188]	; (800c3e8 <HAL_GPIO_Init+0x300>)
 800c32c:	685b      	ldr	r3, [r3, #4]
 800c32e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	43db      	mvns	r3, r3
 800c334:	693a      	ldr	r2, [r7, #16]
 800c336:	4013      	ands	r3, r2
 800c338:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800c33a:	683b      	ldr	r3, [r7, #0]
 800c33c:	685b      	ldr	r3, [r3, #4]
 800c33e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c342:	2b00      	cmp	r3, #0
 800c344:	d003      	beq.n	800c34e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800c346:	693a      	ldr	r2, [r7, #16]
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	4313      	orrs	r3, r2
 800c34c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800c34e:	4a26      	ldr	r2, [pc, #152]	; (800c3e8 <HAL_GPIO_Init+0x300>)
 800c350:	693b      	ldr	r3, [r7, #16]
 800c352:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800c354:	4b24      	ldr	r3, [pc, #144]	; (800c3e8 <HAL_GPIO_Init+0x300>)
 800c356:	689b      	ldr	r3, [r3, #8]
 800c358:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	43db      	mvns	r3, r3
 800c35e:	693a      	ldr	r2, [r7, #16]
 800c360:	4013      	ands	r3, r2
 800c362:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800c364:	683b      	ldr	r3, [r7, #0]
 800c366:	685b      	ldr	r3, [r3, #4]
 800c368:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d003      	beq.n	800c378 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800c370:	693a      	ldr	r2, [r7, #16]
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	4313      	orrs	r3, r2
 800c376:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800c378:	4a1b      	ldr	r2, [pc, #108]	; (800c3e8 <HAL_GPIO_Init+0x300>)
 800c37a:	693b      	ldr	r3, [r7, #16]
 800c37c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800c37e:	4b1a      	ldr	r3, [pc, #104]	; (800c3e8 <HAL_GPIO_Init+0x300>)
 800c380:	68db      	ldr	r3, [r3, #12]
 800c382:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	43db      	mvns	r3, r3
 800c388:	693a      	ldr	r2, [r7, #16]
 800c38a:	4013      	ands	r3, r2
 800c38c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800c38e:	683b      	ldr	r3, [r7, #0]
 800c390:	685b      	ldr	r3, [r3, #4]
 800c392:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c396:	2b00      	cmp	r3, #0
 800c398:	d003      	beq.n	800c3a2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800c39a:	693a      	ldr	r2, [r7, #16]
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	4313      	orrs	r3, r2
 800c3a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800c3a2:	4a11      	ldr	r2, [pc, #68]	; (800c3e8 <HAL_GPIO_Init+0x300>)
 800c3a4:	693b      	ldr	r3, [r7, #16]
 800c3a6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800c3a8:	697b      	ldr	r3, [r7, #20]
 800c3aa:	3301      	adds	r3, #1
 800c3ac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800c3ae:	683b      	ldr	r3, [r7, #0]
 800c3b0:	681a      	ldr	r2, [r3, #0]
 800c3b2:	697b      	ldr	r3, [r7, #20]
 800c3b4:	fa22 f303 	lsr.w	r3, r2, r3
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	f47f ae9d 	bne.w	800c0f8 <HAL_GPIO_Init+0x10>
  }
}
 800c3be:	bf00      	nop
 800c3c0:	371c      	adds	r7, #28
 800c3c2:	46bd      	mov	sp, r7
 800c3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c8:	4770      	bx	lr
 800c3ca:	bf00      	nop
 800c3cc:	40021000 	.word	0x40021000
 800c3d0:	40010000 	.word	0x40010000
 800c3d4:	48000400 	.word	0x48000400
 800c3d8:	48000800 	.word	0x48000800
 800c3dc:	48000c00 	.word	0x48000c00
 800c3e0:	48001000 	.word	0x48001000
 800c3e4:	48001400 	.word	0x48001400
 800c3e8:	40010400 	.word	0x40010400

0800c3ec <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800c3ec:	b480      	push	{r7}
 800c3ee:	b087      	sub	sp, #28
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	6078      	str	r0, [r7, #4]
 800c3f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 800c3fa:	e0bd      	b.n	800c578 <HAL_GPIO_DeInit+0x18c>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 800c3fc:	2201      	movs	r2, #1
 800c3fe:	697b      	ldr	r3, [r7, #20]
 800c400:	fa02 f303 	lsl.w	r3, r2, r3
 800c404:	683a      	ldr	r2, [r7, #0]
 800c406:	4013      	ands	r3, r2
 800c408:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800c40a:	693b      	ldr	r3, [r7, #16]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	f000 80b0 	beq.w	800c572 <HAL_GPIO_DeInit+0x186>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 800c412:	4a60      	ldr	r2, [pc, #384]	; (800c594 <HAL_GPIO_DeInit+0x1a8>)
 800c414:	697b      	ldr	r3, [r7, #20]
 800c416:	089b      	lsrs	r3, r3, #2
 800c418:	3302      	adds	r3, #2
 800c41a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c41e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800c420:	697b      	ldr	r3, [r7, #20]
 800c422:	f003 0303 	and.w	r3, r3, #3
 800c426:	009b      	lsls	r3, r3, #2
 800c428:	220f      	movs	r2, #15
 800c42a:	fa02 f303 	lsl.w	r3, r2, r3
 800c42e:	68fa      	ldr	r2, [r7, #12]
 800c430:	4013      	ands	r3, r2
 800c432:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800c43a:	d01f      	beq.n	800c47c <HAL_GPIO_DeInit+0x90>
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	4a56      	ldr	r2, [pc, #344]	; (800c598 <HAL_GPIO_DeInit+0x1ac>)
 800c440:	4293      	cmp	r3, r2
 800c442:	d019      	beq.n	800c478 <HAL_GPIO_DeInit+0x8c>
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	4a55      	ldr	r2, [pc, #340]	; (800c59c <HAL_GPIO_DeInit+0x1b0>)
 800c448:	4293      	cmp	r3, r2
 800c44a:	d013      	beq.n	800c474 <HAL_GPIO_DeInit+0x88>
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	4a54      	ldr	r2, [pc, #336]	; (800c5a0 <HAL_GPIO_DeInit+0x1b4>)
 800c450:	4293      	cmp	r3, r2
 800c452:	d00d      	beq.n	800c470 <HAL_GPIO_DeInit+0x84>
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	4a53      	ldr	r2, [pc, #332]	; (800c5a4 <HAL_GPIO_DeInit+0x1b8>)
 800c458:	4293      	cmp	r3, r2
 800c45a:	d007      	beq.n	800c46c <HAL_GPIO_DeInit+0x80>
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	4a52      	ldr	r2, [pc, #328]	; (800c5a8 <HAL_GPIO_DeInit+0x1bc>)
 800c460:	4293      	cmp	r3, r2
 800c462:	d101      	bne.n	800c468 <HAL_GPIO_DeInit+0x7c>
 800c464:	2305      	movs	r3, #5
 800c466:	e00a      	b.n	800c47e <HAL_GPIO_DeInit+0x92>
 800c468:	2306      	movs	r3, #6
 800c46a:	e008      	b.n	800c47e <HAL_GPIO_DeInit+0x92>
 800c46c:	2304      	movs	r3, #4
 800c46e:	e006      	b.n	800c47e <HAL_GPIO_DeInit+0x92>
 800c470:	2303      	movs	r3, #3
 800c472:	e004      	b.n	800c47e <HAL_GPIO_DeInit+0x92>
 800c474:	2302      	movs	r3, #2
 800c476:	e002      	b.n	800c47e <HAL_GPIO_DeInit+0x92>
 800c478:	2301      	movs	r3, #1
 800c47a:	e000      	b.n	800c47e <HAL_GPIO_DeInit+0x92>
 800c47c:	2300      	movs	r3, #0
 800c47e:	697a      	ldr	r2, [r7, #20]
 800c480:	f002 0203 	and.w	r2, r2, #3
 800c484:	0092      	lsls	r2, r2, #2
 800c486:	4093      	lsls	r3, r2
 800c488:	68fa      	ldr	r2, [r7, #12]
 800c48a:	429a      	cmp	r2, r3
 800c48c:	d132      	bne.n	800c4f4 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800c48e:	4b47      	ldr	r3, [pc, #284]	; (800c5ac <HAL_GPIO_DeInit+0x1c0>)
 800c490:	681a      	ldr	r2, [r3, #0]
 800c492:	693b      	ldr	r3, [r7, #16]
 800c494:	43db      	mvns	r3, r3
 800c496:	4945      	ldr	r1, [pc, #276]	; (800c5ac <HAL_GPIO_DeInit+0x1c0>)
 800c498:	4013      	ands	r3, r2
 800c49a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800c49c:	4b43      	ldr	r3, [pc, #268]	; (800c5ac <HAL_GPIO_DeInit+0x1c0>)
 800c49e:	685a      	ldr	r2, [r3, #4]
 800c4a0:	693b      	ldr	r3, [r7, #16]
 800c4a2:	43db      	mvns	r3, r3
 800c4a4:	4941      	ldr	r1, [pc, #260]	; (800c5ac <HAL_GPIO_DeInit+0x1c0>)
 800c4a6:	4013      	ands	r3, r2
 800c4a8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800c4aa:	4b40      	ldr	r3, [pc, #256]	; (800c5ac <HAL_GPIO_DeInit+0x1c0>)
 800c4ac:	689a      	ldr	r2, [r3, #8]
 800c4ae:	693b      	ldr	r3, [r7, #16]
 800c4b0:	43db      	mvns	r3, r3
 800c4b2:	493e      	ldr	r1, [pc, #248]	; (800c5ac <HAL_GPIO_DeInit+0x1c0>)
 800c4b4:	4013      	ands	r3, r2
 800c4b6:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 800c4b8:	4b3c      	ldr	r3, [pc, #240]	; (800c5ac <HAL_GPIO_DeInit+0x1c0>)
 800c4ba:	68da      	ldr	r2, [r3, #12]
 800c4bc:	693b      	ldr	r3, [r7, #16]
 800c4be:	43db      	mvns	r3, r3
 800c4c0:	493a      	ldr	r1, [pc, #232]	; (800c5ac <HAL_GPIO_DeInit+0x1c0>)
 800c4c2:	4013      	ands	r3, r2
 800c4c4:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800c4c6:	697b      	ldr	r3, [r7, #20]
 800c4c8:	f003 0303 	and.w	r3, r3, #3
 800c4cc:	009b      	lsls	r3, r3, #2
 800c4ce:	220f      	movs	r2, #15
 800c4d0:	fa02 f303 	lsl.w	r3, r2, r3
 800c4d4:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800c4d6:	4a2f      	ldr	r2, [pc, #188]	; (800c594 <HAL_GPIO_DeInit+0x1a8>)
 800c4d8:	697b      	ldr	r3, [r7, #20]
 800c4da:	089b      	lsrs	r3, r3, #2
 800c4dc:	3302      	adds	r3, #2
 800c4de:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	43da      	mvns	r2, r3
 800c4e6:	482b      	ldr	r0, [pc, #172]	; (800c594 <HAL_GPIO_DeInit+0x1a8>)
 800c4e8:	697b      	ldr	r3, [r7, #20]
 800c4ea:	089b      	lsrs	r3, r3, #2
 800c4ec:	400a      	ands	r2, r1
 800c4ee:	3302      	adds	r3, #2
 800c4f0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	681a      	ldr	r2, [r3, #0]
 800c4f8:	697b      	ldr	r3, [r7, #20]
 800c4fa:	005b      	lsls	r3, r3, #1
 800c4fc:	2103      	movs	r1, #3
 800c4fe:	fa01 f303 	lsl.w	r3, r1, r3
 800c502:	431a      	orrs	r2, r3
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 800c508:	697b      	ldr	r3, [r7, #20]
 800c50a:	08da      	lsrs	r2, r3, #3
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	3208      	adds	r2, #8
 800c510:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c514:	697b      	ldr	r3, [r7, #20]
 800c516:	f003 0307 	and.w	r3, r3, #7
 800c51a:	009b      	lsls	r3, r3, #2
 800c51c:	220f      	movs	r2, #15
 800c51e:	fa02 f303 	lsl.w	r3, r2, r3
 800c522:	43db      	mvns	r3, r3
 800c524:	697a      	ldr	r2, [r7, #20]
 800c526:	08d2      	lsrs	r2, r2, #3
 800c528:	4019      	ands	r1, r3
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	3208      	adds	r2, #8
 800c52e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	68da      	ldr	r2, [r3, #12]
 800c536:	697b      	ldr	r3, [r7, #20]
 800c538:	005b      	lsls	r3, r3, #1
 800c53a:	2103      	movs	r1, #3
 800c53c:	fa01 f303 	lsl.w	r3, r1, r3
 800c540:	43db      	mvns	r3, r3
 800c542:	401a      	ands	r2, r3
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	685a      	ldr	r2, [r3, #4]
 800c54c:	2101      	movs	r1, #1
 800c54e:	697b      	ldr	r3, [r7, #20]
 800c550:	fa01 f303 	lsl.w	r3, r1, r3
 800c554:	43db      	mvns	r3, r3
 800c556:	401a      	ands	r2, r3
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	689a      	ldr	r2, [r3, #8]
 800c560:	697b      	ldr	r3, [r7, #20]
 800c562:	005b      	lsls	r3, r3, #1
 800c564:	2103      	movs	r1, #3
 800c566:	fa01 f303 	lsl.w	r3, r1, r3
 800c56a:	43db      	mvns	r3, r3
 800c56c:	401a      	ands	r2, r3
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	609a      	str	r2, [r3, #8]
    }

    position++;
 800c572:	697b      	ldr	r3, [r7, #20]
 800c574:	3301      	adds	r3, #1
 800c576:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 800c578:	683a      	ldr	r2, [r7, #0]
 800c57a:	697b      	ldr	r3, [r7, #20]
 800c57c:	fa22 f303 	lsr.w	r3, r2, r3
 800c580:	2b00      	cmp	r3, #0
 800c582:	f47f af3b 	bne.w	800c3fc <HAL_GPIO_DeInit+0x10>
  }
}
 800c586:	bf00      	nop
 800c588:	371c      	adds	r7, #28
 800c58a:	46bd      	mov	sp, r7
 800c58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c590:	4770      	bx	lr
 800c592:	bf00      	nop
 800c594:	40010000 	.word	0x40010000
 800c598:	48000400 	.word	0x48000400
 800c59c:	48000800 	.word	0x48000800
 800c5a0:	48000c00 	.word	0x48000c00
 800c5a4:	48001000 	.word	0x48001000
 800c5a8:	48001400 	.word	0x48001400
 800c5ac:	40010400 	.word	0x40010400

0800c5b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c5b0:	b480      	push	{r7}
 800c5b2:	b083      	sub	sp, #12
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	6078      	str	r0, [r7, #4]
 800c5b8:	460b      	mov	r3, r1
 800c5ba:	807b      	strh	r3, [r7, #2]
 800c5bc:	4613      	mov	r3, r2
 800c5be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800c5c0:	787b      	ldrb	r3, [r7, #1]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d003      	beq.n	800c5ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800c5c6:	887a      	ldrh	r2, [r7, #2]
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800c5cc:	e002      	b.n	800c5d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800c5ce:	887a      	ldrh	r2, [r7, #2]
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 800c5d4:	bf00      	nop
 800c5d6:	370c      	adds	r7, #12
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5de:	4770      	bx	lr

0800c5e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800c5e0:	b480      	push	{r7}
 800c5e2:	b085      	sub	sp, #20
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d141      	bne.n	800c672 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800c5ee:	4b4b      	ldr	r3, [pc, #300]	; (800c71c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c5f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c5fa:	d131      	bne.n	800c660 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c5fc:	4b47      	ldr	r3, [pc, #284]	; (800c71c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c5fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c602:	4a46      	ldr	r2, [pc, #280]	; (800c71c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c604:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c608:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800c60c:	4b43      	ldr	r3, [pc, #268]	; (800c71c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800c614:	4a41      	ldr	r2, [pc, #260]	; (800c71c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c616:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c61a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800c61c:	4b40      	ldr	r3, [pc, #256]	; (800c720 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	2232      	movs	r2, #50	; 0x32
 800c622:	fb02 f303 	mul.w	r3, r2, r3
 800c626:	4a3f      	ldr	r2, [pc, #252]	; (800c724 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800c628:	fba2 2303 	umull	r2, r3, r2, r3
 800c62c:	0c9b      	lsrs	r3, r3, #18
 800c62e:	3301      	adds	r3, #1
 800c630:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c632:	e002      	b.n	800c63a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	3b01      	subs	r3, #1
 800c638:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c63a:	4b38      	ldr	r3, [pc, #224]	; (800c71c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c63c:	695b      	ldr	r3, [r3, #20]
 800c63e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c642:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c646:	d102      	bne.n	800c64e <HAL_PWREx_ControlVoltageScaling+0x6e>
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d1f2      	bne.n	800c634 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800c64e:	4b33      	ldr	r3, [pc, #204]	; (800c71c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c650:	695b      	ldr	r3, [r3, #20]
 800c652:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c656:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c65a:	d158      	bne.n	800c70e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800c65c:	2303      	movs	r3, #3
 800c65e:	e057      	b.n	800c710 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c660:	4b2e      	ldr	r3, [pc, #184]	; (800c71c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c662:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c666:	4a2d      	ldr	r2, [pc, #180]	; (800c71c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c668:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c66c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800c670:	e04d      	b.n	800c70e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c678:	d141      	bne.n	800c6fe <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800c67a:	4b28      	ldr	r3, [pc, #160]	; (800c71c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c682:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c686:	d131      	bne.n	800c6ec <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c688:	4b24      	ldr	r3, [pc, #144]	; (800c71c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c68a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c68e:	4a23      	ldr	r2, [pc, #140]	; (800c71c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c690:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c694:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800c698:	4b20      	ldr	r3, [pc, #128]	; (800c71c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800c6a0:	4a1e      	ldr	r2, [pc, #120]	; (800c71c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c6a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c6a6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800c6a8:	4b1d      	ldr	r3, [pc, #116]	; (800c720 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	2232      	movs	r2, #50	; 0x32
 800c6ae:	fb02 f303 	mul.w	r3, r2, r3
 800c6b2:	4a1c      	ldr	r2, [pc, #112]	; (800c724 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800c6b4:	fba2 2303 	umull	r2, r3, r2, r3
 800c6b8:	0c9b      	lsrs	r3, r3, #18
 800c6ba:	3301      	adds	r3, #1
 800c6bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c6be:	e002      	b.n	800c6c6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	3b01      	subs	r3, #1
 800c6c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c6c6:	4b15      	ldr	r3, [pc, #84]	; (800c71c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c6c8:	695b      	ldr	r3, [r3, #20]
 800c6ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c6ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c6d2:	d102      	bne.n	800c6da <HAL_PWREx_ControlVoltageScaling+0xfa>
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d1f2      	bne.n	800c6c0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800c6da:	4b10      	ldr	r3, [pc, #64]	; (800c71c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c6dc:	695b      	ldr	r3, [r3, #20]
 800c6de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c6e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c6e6:	d112      	bne.n	800c70e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800c6e8:	2303      	movs	r3, #3
 800c6ea:	e011      	b.n	800c710 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c6ec:	4b0b      	ldr	r3, [pc, #44]	; (800c71c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c6ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c6f2:	4a0a      	ldr	r2, [pc, #40]	; (800c71c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c6f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c6f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800c6fc:	e007      	b.n	800c70e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800c6fe:	4b07      	ldr	r3, [pc, #28]	; (800c71c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800c706:	4a05      	ldr	r2, [pc, #20]	; (800c71c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c708:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c70c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800c70e:	2300      	movs	r3, #0
}
 800c710:	4618      	mov	r0, r3
 800c712:	3714      	adds	r7, #20
 800c714:	46bd      	mov	sp, r7
 800c716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c71a:	4770      	bx	lr
 800c71c:	40007000 	.word	0x40007000
 800c720:	20000eb0 	.word	0x20000eb0
 800c724:	431bde83 	.word	0x431bde83

0800c728 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c728:	b580      	push	{r7, lr}
 800c72a:	b088      	sub	sp, #32
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	2b00      	cmp	r3, #0
 800c734:	d101      	bne.n	800c73a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c736:	2301      	movs	r3, #1
 800c738:	e308      	b.n	800cd4c <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	f003 0301 	and.w	r3, r3, #1
 800c742:	2b00      	cmp	r3, #0
 800c744:	d075      	beq.n	800c832 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c746:	4ba3      	ldr	r3, [pc, #652]	; (800c9d4 <HAL_RCC_OscConfig+0x2ac>)
 800c748:	689b      	ldr	r3, [r3, #8]
 800c74a:	f003 030c 	and.w	r3, r3, #12
 800c74e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c750:	4ba0      	ldr	r3, [pc, #640]	; (800c9d4 <HAL_RCC_OscConfig+0x2ac>)
 800c752:	68db      	ldr	r3, [r3, #12]
 800c754:	f003 0303 	and.w	r3, r3, #3
 800c758:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800c75a:	69bb      	ldr	r3, [r7, #24]
 800c75c:	2b0c      	cmp	r3, #12
 800c75e:	d102      	bne.n	800c766 <HAL_RCC_OscConfig+0x3e>
 800c760:	697b      	ldr	r3, [r7, #20]
 800c762:	2b03      	cmp	r3, #3
 800c764:	d002      	beq.n	800c76c <HAL_RCC_OscConfig+0x44>
 800c766:	69bb      	ldr	r3, [r7, #24]
 800c768:	2b08      	cmp	r3, #8
 800c76a:	d10b      	bne.n	800c784 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c76c:	4b99      	ldr	r3, [pc, #612]	; (800c9d4 <HAL_RCC_OscConfig+0x2ac>)
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c774:	2b00      	cmp	r3, #0
 800c776:	d05b      	beq.n	800c830 <HAL_RCC_OscConfig+0x108>
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	685b      	ldr	r3, [r3, #4]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d157      	bne.n	800c830 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800c780:	2301      	movs	r3, #1
 800c782:	e2e3      	b.n	800cd4c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	685b      	ldr	r3, [r3, #4]
 800c788:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c78c:	d106      	bne.n	800c79c <HAL_RCC_OscConfig+0x74>
 800c78e:	4b91      	ldr	r3, [pc, #580]	; (800c9d4 <HAL_RCC_OscConfig+0x2ac>)
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	4a90      	ldr	r2, [pc, #576]	; (800c9d4 <HAL_RCC_OscConfig+0x2ac>)
 800c794:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c798:	6013      	str	r3, [r2, #0]
 800c79a:	e01d      	b.n	800c7d8 <HAL_RCC_OscConfig+0xb0>
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	685b      	ldr	r3, [r3, #4]
 800c7a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c7a4:	d10c      	bne.n	800c7c0 <HAL_RCC_OscConfig+0x98>
 800c7a6:	4b8b      	ldr	r3, [pc, #556]	; (800c9d4 <HAL_RCC_OscConfig+0x2ac>)
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	4a8a      	ldr	r2, [pc, #552]	; (800c9d4 <HAL_RCC_OscConfig+0x2ac>)
 800c7ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c7b0:	6013      	str	r3, [r2, #0]
 800c7b2:	4b88      	ldr	r3, [pc, #544]	; (800c9d4 <HAL_RCC_OscConfig+0x2ac>)
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	4a87      	ldr	r2, [pc, #540]	; (800c9d4 <HAL_RCC_OscConfig+0x2ac>)
 800c7b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c7bc:	6013      	str	r3, [r2, #0]
 800c7be:	e00b      	b.n	800c7d8 <HAL_RCC_OscConfig+0xb0>
 800c7c0:	4b84      	ldr	r3, [pc, #528]	; (800c9d4 <HAL_RCC_OscConfig+0x2ac>)
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	4a83      	ldr	r2, [pc, #524]	; (800c9d4 <HAL_RCC_OscConfig+0x2ac>)
 800c7c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c7ca:	6013      	str	r3, [r2, #0]
 800c7cc:	4b81      	ldr	r3, [pc, #516]	; (800c9d4 <HAL_RCC_OscConfig+0x2ac>)
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	4a80      	ldr	r2, [pc, #512]	; (800c9d4 <HAL_RCC_OscConfig+0x2ac>)
 800c7d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c7d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	685b      	ldr	r3, [r3, #4]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d013      	beq.n	800c808 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c7e0:	f7fc fbcc 	bl	8008f7c <HAL_GetTick>
 800c7e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c7e6:	e008      	b.n	800c7fa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c7e8:	f7fc fbc8 	bl	8008f7c <HAL_GetTick>
 800c7ec:	4602      	mov	r2, r0
 800c7ee:	693b      	ldr	r3, [r7, #16]
 800c7f0:	1ad3      	subs	r3, r2, r3
 800c7f2:	2b64      	cmp	r3, #100	; 0x64
 800c7f4:	d901      	bls.n	800c7fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800c7f6:	2303      	movs	r3, #3
 800c7f8:	e2a8      	b.n	800cd4c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c7fa:	4b76      	ldr	r3, [pc, #472]	; (800c9d4 <HAL_RCC_OscConfig+0x2ac>)
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c802:	2b00      	cmp	r3, #0
 800c804:	d0f0      	beq.n	800c7e8 <HAL_RCC_OscConfig+0xc0>
 800c806:	e014      	b.n	800c832 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c808:	f7fc fbb8 	bl	8008f7c <HAL_GetTick>
 800c80c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c80e:	e008      	b.n	800c822 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c810:	f7fc fbb4 	bl	8008f7c <HAL_GetTick>
 800c814:	4602      	mov	r2, r0
 800c816:	693b      	ldr	r3, [r7, #16]
 800c818:	1ad3      	subs	r3, r2, r3
 800c81a:	2b64      	cmp	r3, #100	; 0x64
 800c81c:	d901      	bls.n	800c822 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c81e:	2303      	movs	r3, #3
 800c820:	e294      	b.n	800cd4c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c822:	4b6c      	ldr	r3, [pc, #432]	; (800c9d4 <HAL_RCC_OscConfig+0x2ac>)
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d1f0      	bne.n	800c810 <HAL_RCC_OscConfig+0xe8>
 800c82e:	e000      	b.n	800c832 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c830:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	f003 0302 	and.w	r3, r3, #2
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d075      	beq.n	800c92a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c83e:	4b65      	ldr	r3, [pc, #404]	; (800c9d4 <HAL_RCC_OscConfig+0x2ac>)
 800c840:	689b      	ldr	r3, [r3, #8]
 800c842:	f003 030c 	and.w	r3, r3, #12
 800c846:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c848:	4b62      	ldr	r3, [pc, #392]	; (800c9d4 <HAL_RCC_OscConfig+0x2ac>)
 800c84a:	68db      	ldr	r3, [r3, #12]
 800c84c:	f003 0303 	and.w	r3, r3, #3
 800c850:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800c852:	69bb      	ldr	r3, [r7, #24]
 800c854:	2b0c      	cmp	r3, #12
 800c856:	d102      	bne.n	800c85e <HAL_RCC_OscConfig+0x136>
 800c858:	697b      	ldr	r3, [r7, #20]
 800c85a:	2b02      	cmp	r3, #2
 800c85c:	d002      	beq.n	800c864 <HAL_RCC_OscConfig+0x13c>
 800c85e:	69bb      	ldr	r3, [r7, #24]
 800c860:	2b04      	cmp	r3, #4
 800c862:	d11f      	bne.n	800c8a4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c864:	4b5b      	ldr	r3, [pc, #364]	; (800c9d4 <HAL_RCC_OscConfig+0x2ac>)
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d005      	beq.n	800c87c <HAL_RCC_OscConfig+0x154>
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	68db      	ldr	r3, [r3, #12]
 800c874:	2b00      	cmp	r3, #0
 800c876:	d101      	bne.n	800c87c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800c878:	2301      	movs	r3, #1
 800c87a:	e267      	b.n	800cd4c <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c87c:	4b55      	ldr	r3, [pc, #340]	; (800c9d4 <HAL_RCC_OscConfig+0x2ac>)
 800c87e:	685b      	ldr	r3, [r3, #4]
 800c880:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	691b      	ldr	r3, [r3, #16]
 800c888:	061b      	lsls	r3, r3, #24
 800c88a:	4952      	ldr	r1, [pc, #328]	; (800c9d4 <HAL_RCC_OscConfig+0x2ac>)
 800c88c:	4313      	orrs	r3, r2
 800c88e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800c890:	4b51      	ldr	r3, [pc, #324]	; (800c9d8 <HAL_RCC_OscConfig+0x2b0>)
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	4618      	mov	r0, r3
 800c896:	f7fc fb25 	bl	8008ee4 <HAL_InitTick>
 800c89a:	4603      	mov	r3, r0
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d043      	beq.n	800c928 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800c8a0:	2301      	movs	r3, #1
 800c8a2:	e253      	b.n	800cd4c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	68db      	ldr	r3, [r3, #12]
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d023      	beq.n	800c8f4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c8ac:	4b49      	ldr	r3, [pc, #292]	; (800c9d4 <HAL_RCC_OscConfig+0x2ac>)
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	4a48      	ldr	r2, [pc, #288]	; (800c9d4 <HAL_RCC_OscConfig+0x2ac>)
 800c8b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c8b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c8b8:	f7fc fb60 	bl	8008f7c <HAL_GetTick>
 800c8bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c8be:	e008      	b.n	800c8d2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c8c0:	f7fc fb5c 	bl	8008f7c <HAL_GetTick>
 800c8c4:	4602      	mov	r2, r0
 800c8c6:	693b      	ldr	r3, [r7, #16]
 800c8c8:	1ad3      	subs	r3, r2, r3
 800c8ca:	2b02      	cmp	r3, #2
 800c8cc:	d901      	bls.n	800c8d2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800c8ce:	2303      	movs	r3, #3
 800c8d0:	e23c      	b.n	800cd4c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c8d2:	4b40      	ldr	r3, [pc, #256]	; (800c9d4 <HAL_RCC_OscConfig+0x2ac>)
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d0f0      	beq.n	800c8c0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c8de:	4b3d      	ldr	r3, [pc, #244]	; (800c9d4 <HAL_RCC_OscConfig+0x2ac>)
 800c8e0:	685b      	ldr	r3, [r3, #4]
 800c8e2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	691b      	ldr	r3, [r3, #16]
 800c8ea:	061b      	lsls	r3, r3, #24
 800c8ec:	4939      	ldr	r1, [pc, #228]	; (800c9d4 <HAL_RCC_OscConfig+0x2ac>)
 800c8ee:	4313      	orrs	r3, r2
 800c8f0:	604b      	str	r3, [r1, #4]
 800c8f2:	e01a      	b.n	800c92a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c8f4:	4b37      	ldr	r3, [pc, #220]	; (800c9d4 <HAL_RCC_OscConfig+0x2ac>)
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	4a36      	ldr	r2, [pc, #216]	; (800c9d4 <HAL_RCC_OscConfig+0x2ac>)
 800c8fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c8fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c900:	f7fc fb3c 	bl	8008f7c <HAL_GetTick>
 800c904:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c906:	e008      	b.n	800c91a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c908:	f7fc fb38 	bl	8008f7c <HAL_GetTick>
 800c90c:	4602      	mov	r2, r0
 800c90e:	693b      	ldr	r3, [r7, #16]
 800c910:	1ad3      	subs	r3, r2, r3
 800c912:	2b02      	cmp	r3, #2
 800c914:	d901      	bls.n	800c91a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800c916:	2303      	movs	r3, #3
 800c918:	e218      	b.n	800cd4c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c91a:	4b2e      	ldr	r3, [pc, #184]	; (800c9d4 <HAL_RCC_OscConfig+0x2ac>)
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c922:	2b00      	cmp	r3, #0
 800c924:	d1f0      	bne.n	800c908 <HAL_RCC_OscConfig+0x1e0>
 800c926:	e000      	b.n	800c92a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c928:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	f003 0308 	and.w	r3, r3, #8
 800c932:	2b00      	cmp	r3, #0
 800c934:	d03c      	beq.n	800c9b0 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	695b      	ldr	r3, [r3, #20]
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d01c      	beq.n	800c978 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c93e:	4b25      	ldr	r3, [pc, #148]	; (800c9d4 <HAL_RCC_OscConfig+0x2ac>)
 800c940:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c944:	4a23      	ldr	r2, [pc, #140]	; (800c9d4 <HAL_RCC_OscConfig+0x2ac>)
 800c946:	f043 0301 	orr.w	r3, r3, #1
 800c94a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c94e:	f7fc fb15 	bl	8008f7c <HAL_GetTick>
 800c952:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800c954:	e008      	b.n	800c968 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c956:	f7fc fb11 	bl	8008f7c <HAL_GetTick>
 800c95a:	4602      	mov	r2, r0
 800c95c:	693b      	ldr	r3, [r7, #16]
 800c95e:	1ad3      	subs	r3, r2, r3
 800c960:	2b02      	cmp	r3, #2
 800c962:	d901      	bls.n	800c968 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800c964:	2303      	movs	r3, #3
 800c966:	e1f1      	b.n	800cd4c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800c968:	4b1a      	ldr	r3, [pc, #104]	; (800c9d4 <HAL_RCC_OscConfig+0x2ac>)
 800c96a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c96e:	f003 0302 	and.w	r3, r3, #2
 800c972:	2b00      	cmp	r3, #0
 800c974:	d0ef      	beq.n	800c956 <HAL_RCC_OscConfig+0x22e>
 800c976:	e01b      	b.n	800c9b0 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c978:	4b16      	ldr	r3, [pc, #88]	; (800c9d4 <HAL_RCC_OscConfig+0x2ac>)
 800c97a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c97e:	4a15      	ldr	r2, [pc, #84]	; (800c9d4 <HAL_RCC_OscConfig+0x2ac>)
 800c980:	f023 0301 	bic.w	r3, r3, #1
 800c984:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c988:	f7fc faf8 	bl	8008f7c <HAL_GetTick>
 800c98c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800c98e:	e008      	b.n	800c9a2 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c990:	f7fc faf4 	bl	8008f7c <HAL_GetTick>
 800c994:	4602      	mov	r2, r0
 800c996:	693b      	ldr	r3, [r7, #16]
 800c998:	1ad3      	subs	r3, r2, r3
 800c99a:	2b02      	cmp	r3, #2
 800c99c:	d901      	bls.n	800c9a2 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800c99e:	2303      	movs	r3, #3
 800c9a0:	e1d4      	b.n	800cd4c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800c9a2:	4b0c      	ldr	r3, [pc, #48]	; (800c9d4 <HAL_RCC_OscConfig+0x2ac>)
 800c9a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c9a8:	f003 0302 	and.w	r3, r3, #2
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d1ef      	bne.n	800c990 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	f003 0304 	and.w	r3, r3, #4
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	f000 80ab 	beq.w	800cb14 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c9be:	2300      	movs	r3, #0
 800c9c0:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800c9c2:	4b04      	ldr	r3, [pc, #16]	; (800c9d4 <HAL_RCC_OscConfig+0x2ac>)
 800c9c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c9c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d106      	bne.n	800c9dc <HAL_RCC_OscConfig+0x2b4>
 800c9ce:	2301      	movs	r3, #1
 800c9d0:	e005      	b.n	800c9de <HAL_RCC_OscConfig+0x2b6>
 800c9d2:	bf00      	nop
 800c9d4:	40021000 	.word	0x40021000
 800c9d8:	20000eb4 	.word	0x20000eb4
 800c9dc:	2300      	movs	r3, #0
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d00d      	beq.n	800c9fe <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c9e2:	4baf      	ldr	r3, [pc, #700]	; (800cca0 <HAL_RCC_OscConfig+0x578>)
 800c9e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c9e6:	4aae      	ldr	r2, [pc, #696]	; (800cca0 <HAL_RCC_OscConfig+0x578>)
 800c9e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c9ec:	6593      	str	r3, [r2, #88]	; 0x58
 800c9ee:	4bac      	ldr	r3, [pc, #688]	; (800cca0 <HAL_RCC_OscConfig+0x578>)
 800c9f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c9f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c9f6:	60fb      	str	r3, [r7, #12]
 800c9f8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800c9fa:	2301      	movs	r3, #1
 800c9fc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c9fe:	4ba9      	ldr	r3, [pc, #676]	; (800cca4 <HAL_RCC_OscConfig+0x57c>)
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d118      	bne.n	800ca3c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ca0a:	4ba6      	ldr	r3, [pc, #664]	; (800cca4 <HAL_RCC_OscConfig+0x57c>)
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	4aa5      	ldr	r2, [pc, #660]	; (800cca4 <HAL_RCC_OscConfig+0x57c>)
 800ca10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ca14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ca16:	f7fc fab1 	bl	8008f7c <HAL_GetTick>
 800ca1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ca1c:	e008      	b.n	800ca30 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ca1e:	f7fc faad 	bl	8008f7c <HAL_GetTick>
 800ca22:	4602      	mov	r2, r0
 800ca24:	693b      	ldr	r3, [r7, #16]
 800ca26:	1ad3      	subs	r3, r2, r3
 800ca28:	2b02      	cmp	r3, #2
 800ca2a:	d901      	bls.n	800ca30 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800ca2c:	2303      	movs	r3, #3
 800ca2e:	e18d      	b.n	800cd4c <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ca30:	4b9c      	ldr	r3, [pc, #624]	; (800cca4 <HAL_RCC_OscConfig+0x57c>)
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d0f0      	beq.n	800ca1e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	689b      	ldr	r3, [r3, #8]
 800ca40:	2b01      	cmp	r3, #1
 800ca42:	d108      	bne.n	800ca56 <HAL_RCC_OscConfig+0x32e>
 800ca44:	4b96      	ldr	r3, [pc, #600]	; (800cca0 <HAL_RCC_OscConfig+0x578>)
 800ca46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ca4a:	4a95      	ldr	r2, [pc, #596]	; (800cca0 <HAL_RCC_OscConfig+0x578>)
 800ca4c:	f043 0301 	orr.w	r3, r3, #1
 800ca50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800ca54:	e024      	b.n	800caa0 <HAL_RCC_OscConfig+0x378>
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	689b      	ldr	r3, [r3, #8]
 800ca5a:	2b05      	cmp	r3, #5
 800ca5c:	d110      	bne.n	800ca80 <HAL_RCC_OscConfig+0x358>
 800ca5e:	4b90      	ldr	r3, [pc, #576]	; (800cca0 <HAL_RCC_OscConfig+0x578>)
 800ca60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ca64:	4a8e      	ldr	r2, [pc, #568]	; (800cca0 <HAL_RCC_OscConfig+0x578>)
 800ca66:	f043 0304 	orr.w	r3, r3, #4
 800ca6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800ca6e:	4b8c      	ldr	r3, [pc, #560]	; (800cca0 <HAL_RCC_OscConfig+0x578>)
 800ca70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ca74:	4a8a      	ldr	r2, [pc, #552]	; (800cca0 <HAL_RCC_OscConfig+0x578>)
 800ca76:	f043 0301 	orr.w	r3, r3, #1
 800ca7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800ca7e:	e00f      	b.n	800caa0 <HAL_RCC_OscConfig+0x378>
 800ca80:	4b87      	ldr	r3, [pc, #540]	; (800cca0 <HAL_RCC_OscConfig+0x578>)
 800ca82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ca86:	4a86      	ldr	r2, [pc, #536]	; (800cca0 <HAL_RCC_OscConfig+0x578>)
 800ca88:	f023 0301 	bic.w	r3, r3, #1
 800ca8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800ca90:	4b83      	ldr	r3, [pc, #524]	; (800cca0 <HAL_RCC_OscConfig+0x578>)
 800ca92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ca96:	4a82      	ldr	r2, [pc, #520]	; (800cca0 <HAL_RCC_OscConfig+0x578>)
 800ca98:	f023 0304 	bic.w	r3, r3, #4
 800ca9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	689b      	ldr	r3, [r3, #8]
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d016      	beq.n	800cad6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800caa8:	f7fc fa68 	bl	8008f7c <HAL_GetTick>
 800caac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800caae:	e00a      	b.n	800cac6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cab0:	f7fc fa64 	bl	8008f7c <HAL_GetTick>
 800cab4:	4602      	mov	r2, r0
 800cab6:	693b      	ldr	r3, [r7, #16]
 800cab8:	1ad3      	subs	r3, r2, r3
 800caba:	f241 3288 	movw	r2, #5000	; 0x1388
 800cabe:	4293      	cmp	r3, r2
 800cac0:	d901      	bls.n	800cac6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800cac2:	2303      	movs	r3, #3
 800cac4:	e142      	b.n	800cd4c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800cac6:	4b76      	ldr	r3, [pc, #472]	; (800cca0 <HAL_RCC_OscConfig+0x578>)
 800cac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cacc:	f003 0302 	and.w	r3, r3, #2
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d0ed      	beq.n	800cab0 <HAL_RCC_OscConfig+0x388>
 800cad4:	e015      	b.n	800cb02 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cad6:	f7fc fa51 	bl	8008f7c <HAL_GetTick>
 800cada:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800cadc:	e00a      	b.n	800caf4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cade:	f7fc fa4d 	bl	8008f7c <HAL_GetTick>
 800cae2:	4602      	mov	r2, r0
 800cae4:	693b      	ldr	r3, [r7, #16]
 800cae6:	1ad3      	subs	r3, r2, r3
 800cae8:	f241 3288 	movw	r2, #5000	; 0x1388
 800caec:	4293      	cmp	r3, r2
 800caee:	d901      	bls.n	800caf4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800caf0:	2303      	movs	r3, #3
 800caf2:	e12b      	b.n	800cd4c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800caf4:	4b6a      	ldr	r3, [pc, #424]	; (800cca0 <HAL_RCC_OscConfig+0x578>)
 800caf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cafa:	f003 0302 	and.w	r3, r3, #2
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d1ed      	bne.n	800cade <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800cb02:	7ffb      	ldrb	r3, [r7, #31]
 800cb04:	2b01      	cmp	r3, #1
 800cb06:	d105      	bne.n	800cb14 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800cb08:	4b65      	ldr	r3, [pc, #404]	; (800cca0 <HAL_RCC_OscConfig+0x578>)
 800cb0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb0c:	4a64      	ldr	r2, [pc, #400]	; (800cca0 <HAL_RCC_OscConfig+0x578>)
 800cb0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cb12:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	f003 0320 	and.w	r3, r3, #32
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d03c      	beq.n	800cb9a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	699b      	ldr	r3, [r3, #24]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d01c      	beq.n	800cb62 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800cb28:	4b5d      	ldr	r3, [pc, #372]	; (800cca0 <HAL_RCC_OscConfig+0x578>)
 800cb2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800cb2e:	4a5c      	ldr	r2, [pc, #368]	; (800cca0 <HAL_RCC_OscConfig+0x578>)
 800cb30:	f043 0301 	orr.w	r3, r3, #1
 800cb34:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cb38:	f7fc fa20 	bl	8008f7c <HAL_GetTick>
 800cb3c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800cb3e:	e008      	b.n	800cb52 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800cb40:	f7fc fa1c 	bl	8008f7c <HAL_GetTick>
 800cb44:	4602      	mov	r2, r0
 800cb46:	693b      	ldr	r3, [r7, #16]
 800cb48:	1ad3      	subs	r3, r2, r3
 800cb4a:	2b02      	cmp	r3, #2
 800cb4c:	d901      	bls.n	800cb52 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800cb4e:	2303      	movs	r3, #3
 800cb50:	e0fc      	b.n	800cd4c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800cb52:	4b53      	ldr	r3, [pc, #332]	; (800cca0 <HAL_RCC_OscConfig+0x578>)
 800cb54:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800cb58:	f003 0302 	and.w	r3, r3, #2
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d0ef      	beq.n	800cb40 <HAL_RCC_OscConfig+0x418>
 800cb60:	e01b      	b.n	800cb9a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800cb62:	4b4f      	ldr	r3, [pc, #316]	; (800cca0 <HAL_RCC_OscConfig+0x578>)
 800cb64:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800cb68:	4a4d      	ldr	r2, [pc, #308]	; (800cca0 <HAL_RCC_OscConfig+0x578>)
 800cb6a:	f023 0301 	bic.w	r3, r3, #1
 800cb6e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cb72:	f7fc fa03 	bl	8008f7c <HAL_GetTick>
 800cb76:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800cb78:	e008      	b.n	800cb8c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800cb7a:	f7fc f9ff 	bl	8008f7c <HAL_GetTick>
 800cb7e:	4602      	mov	r2, r0
 800cb80:	693b      	ldr	r3, [r7, #16]
 800cb82:	1ad3      	subs	r3, r2, r3
 800cb84:	2b02      	cmp	r3, #2
 800cb86:	d901      	bls.n	800cb8c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800cb88:	2303      	movs	r3, #3
 800cb8a:	e0df      	b.n	800cd4c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800cb8c:	4b44      	ldr	r3, [pc, #272]	; (800cca0 <HAL_RCC_OscConfig+0x578>)
 800cb8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800cb92:	f003 0302 	and.w	r3, r3, #2
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d1ef      	bne.n	800cb7a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	69db      	ldr	r3, [r3, #28]
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	f000 80d3 	beq.w	800cd4a <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800cba4:	4b3e      	ldr	r3, [pc, #248]	; (800cca0 <HAL_RCC_OscConfig+0x578>)
 800cba6:	689b      	ldr	r3, [r3, #8]
 800cba8:	f003 030c 	and.w	r3, r3, #12
 800cbac:	2b0c      	cmp	r3, #12
 800cbae:	f000 808d 	beq.w	800cccc <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	69db      	ldr	r3, [r3, #28]
 800cbb6:	2b02      	cmp	r3, #2
 800cbb8:	d15a      	bne.n	800cc70 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cbba:	4b39      	ldr	r3, [pc, #228]	; (800cca0 <HAL_RCC_OscConfig+0x578>)
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	4a38      	ldr	r2, [pc, #224]	; (800cca0 <HAL_RCC_OscConfig+0x578>)
 800cbc0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800cbc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cbc6:	f7fc f9d9 	bl	8008f7c <HAL_GetTick>
 800cbca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800cbcc:	e008      	b.n	800cbe0 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cbce:	f7fc f9d5 	bl	8008f7c <HAL_GetTick>
 800cbd2:	4602      	mov	r2, r0
 800cbd4:	693b      	ldr	r3, [r7, #16]
 800cbd6:	1ad3      	subs	r3, r2, r3
 800cbd8:	2b02      	cmp	r3, #2
 800cbda:	d901      	bls.n	800cbe0 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 800cbdc:	2303      	movs	r3, #3
 800cbde:	e0b5      	b.n	800cd4c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800cbe0:	4b2f      	ldr	r3, [pc, #188]	; (800cca0 <HAL_RCC_OscConfig+0x578>)
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d1f0      	bne.n	800cbce <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800cbec:	4b2c      	ldr	r3, [pc, #176]	; (800cca0 <HAL_RCC_OscConfig+0x578>)
 800cbee:	68da      	ldr	r2, [r3, #12]
 800cbf0:	4b2d      	ldr	r3, [pc, #180]	; (800cca8 <HAL_RCC_OscConfig+0x580>)
 800cbf2:	4013      	ands	r3, r2
 800cbf4:	687a      	ldr	r2, [r7, #4]
 800cbf6:	6a11      	ldr	r1, [r2, #32]
 800cbf8:	687a      	ldr	r2, [r7, #4]
 800cbfa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800cbfc:	3a01      	subs	r2, #1
 800cbfe:	0112      	lsls	r2, r2, #4
 800cc00:	4311      	orrs	r1, r2
 800cc02:	687a      	ldr	r2, [r7, #4]
 800cc04:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800cc06:	0212      	lsls	r2, r2, #8
 800cc08:	4311      	orrs	r1, r2
 800cc0a:	687a      	ldr	r2, [r7, #4]
 800cc0c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800cc0e:	0852      	lsrs	r2, r2, #1
 800cc10:	3a01      	subs	r2, #1
 800cc12:	0552      	lsls	r2, r2, #21
 800cc14:	4311      	orrs	r1, r2
 800cc16:	687a      	ldr	r2, [r7, #4]
 800cc18:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800cc1a:	0852      	lsrs	r2, r2, #1
 800cc1c:	3a01      	subs	r2, #1
 800cc1e:	0652      	lsls	r2, r2, #25
 800cc20:	4311      	orrs	r1, r2
 800cc22:	687a      	ldr	r2, [r7, #4]
 800cc24:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800cc26:	06d2      	lsls	r2, r2, #27
 800cc28:	430a      	orrs	r2, r1
 800cc2a:	491d      	ldr	r1, [pc, #116]	; (800cca0 <HAL_RCC_OscConfig+0x578>)
 800cc2c:	4313      	orrs	r3, r2
 800cc2e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800cc30:	4b1b      	ldr	r3, [pc, #108]	; (800cca0 <HAL_RCC_OscConfig+0x578>)
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	4a1a      	ldr	r2, [pc, #104]	; (800cca0 <HAL_RCC_OscConfig+0x578>)
 800cc36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cc3a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800cc3c:	4b18      	ldr	r3, [pc, #96]	; (800cca0 <HAL_RCC_OscConfig+0x578>)
 800cc3e:	68db      	ldr	r3, [r3, #12]
 800cc40:	4a17      	ldr	r2, [pc, #92]	; (800cca0 <HAL_RCC_OscConfig+0x578>)
 800cc42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cc46:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cc48:	f7fc f998 	bl	8008f7c <HAL_GetTick>
 800cc4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800cc4e:	e008      	b.n	800cc62 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cc50:	f7fc f994 	bl	8008f7c <HAL_GetTick>
 800cc54:	4602      	mov	r2, r0
 800cc56:	693b      	ldr	r3, [r7, #16]
 800cc58:	1ad3      	subs	r3, r2, r3
 800cc5a:	2b02      	cmp	r3, #2
 800cc5c:	d901      	bls.n	800cc62 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800cc5e:	2303      	movs	r3, #3
 800cc60:	e074      	b.n	800cd4c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800cc62:	4b0f      	ldr	r3, [pc, #60]	; (800cca0 <HAL_RCC_OscConfig+0x578>)
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d0f0      	beq.n	800cc50 <HAL_RCC_OscConfig+0x528>
 800cc6e:	e06c      	b.n	800cd4a <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cc70:	4b0b      	ldr	r3, [pc, #44]	; (800cca0 <HAL_RCC_OscConfig+0x578>)
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	4a0a      	ldr	r2, [pc, #40]	; (800cca0 <HAL_RCC_OscConfig+0x578>)
 800cc76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800cc7a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800cc7c:	4b08      	ldr	r3, [pc, #32]	; (800cca0 <HAL_RCC_OscConfig+0x578>)
 800cc7e:	68db      	ldr	r3, [r3, #12]
 800cc80:	4a07      	ldr	r2, [pc, #28]	; (800cca0 <HAL_RCC_OscConfig+0x578>)
 800cc82:	f023 0303 	bic.w	r3, r3, #3
 800cc86:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800cc88:	4b05      	ldr	r3, [pc, #20]	; (800cca0 <HAL_RCC_OscConfig+0x578>)
 800cc8a:	68db      	ldr	r3, [r3, #12]
 800cc8c:	4a04      	ldr	r2, [pc, #16]	; (800cca0 <HAL_RCC_OscConfig+0x578>)
 800cc8e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800cc92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cc96:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cc98:	f7fc f970 	bl	8008f7c <HAL_GetTick>
 800cc9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800cc9e:	e00e      	b.n	800ccbe <HAL_RCC_OscConfig+0x596>
 800cca0:	40021000 	.word	0x40021000
 800cca4:	40007000 	.word	0x40007000
 800cca8:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ccac:	f7fc f966 	bl	8008f7c <HAL_GetTick>
 800ccb0:	4602      	mov	r2, r0
 800ccb2:	693b      	ldr	r3, [r7, #16]
 800ccb4:	1ad3      	subs	r3, r2, r3
 800ccb6:	2b02      	cmp	r3, #2
 800ccb8:	d901      	bls.n	800ccbe <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800ccba:	2303      	movs	r3, #3
 800ccbc:	e046      	b.n	800cd4c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ccbe:	4b25      	ldr	r3, [pc, #148]	; (800cd54 <HAL_RCC_OscConfig+0x62c>)
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d1f0      	bne.n	800ccac <HAL_RCC_OscConfig+0x584>
 800ccca:	e03e      	b.n	800cd4a <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	69db      	ldr	r3, [r3, #28]
 800ccd0:	2b01      	cmp	r3, #1
 800ccd2:	d101      	bne.n	800ccd8 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 800ccd4:	2301      	movs	r3, #1
 800ccd6:	e039      	b.n	800cd4c <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800ccd8:	4b1e      	ldr	r3, [pc, #120]	; (800cd54 <HAL_RCC_OscConfig+0x62c>)
 800ccda:	68db      	ldr	r3, [r3, #12]
 800ccdc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ccde:	697b      	ldr	r3, [r7, #20]
 800cce0:	f003 0203 	and.w	r2, r3, #3
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	6a1b      	ldr	r3, [r3, #32]
 800cce8:	429a      	cmp	r2, r3
 800ccea:	d12c      	bne.n	800cd46 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800ccec:	697b      	ldr	r3, [r7, #20]
 800ccee:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccf6:	3b01      	subs	r3, #1
 800ccf8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ccfa:	429a      	cmp	r2, r3
 800ccfc:	d123      	bne.n	800cd46 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800ccfe:	697b      	ldr	r3, [r7, #20]
 800cd00:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd08:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800cd0a:	429a      	cmp	r2, r3
 800cd0c:	d11b      	bne.n	800cd46 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800cd0e:	697b      	ldr	r3, [r7, #20]
 800cd10:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd18:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800cd1a:	429a      	cmp	r2, r3
 800cd1c:	d113      	bne.n	800cd46 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800cd1e:	697b      	ldr	r3, [r7, #20]
 800cd20:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd28:	085b      	lsrs	r3, r3, #1
 800cd2a:	3b01      	subs	r3, #1
 800cd2c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800cd2e:	429a      	cmp	r2, r3
 800cd30:	d109      	bne.n	800cd46 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800cd32:	697b      	ldr	r3, [r7, #20]
 800cd34:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd3c:	085b      	lsrs	r3, r3, #1
 800cd3e:	3b01      	subs	r3, #1
 800cd40:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800cd42:	429a      	cmp	r2, r3
 800cd44:	d001      	beq.n	800cd4a <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800cd46:	2301      	movs	r3, #1
 800cd48:	e000      	b.n	800cd4c <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800cd4a:	2300      	movs	r3, #0
}
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	3720      	adds	r7, #32
 800cd50:	46bd      	mov	sp, r7
 800cd52:	bd80      	pop	{r7, pc}
 800cd54:	40021000 	.word	0x40021000

0800cd58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800cd58:	b580      	push	{r7, lr}
 800cd5a:	b086      	sub	sp, #24
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	6078      	str	r0, [r7, #4]
 800cd60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800cd62:	2300      	movs	r3, #0
 800cd64:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d101      	bne.n	800cd70 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800cd6c:	2301      	movs	r3, #1
 800cd6e:	e11e      	b.n	800cfae <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800cd70:	4b91      	ldr	r3, [pc, #580]	; (800cfb8 <HAL_RCC_ClockConfig+0x260>)
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	f003 030f 	and.w	r3, r3, #15
 800cd78:	683a      	ldr	r2, [r7, #0]
 800cd7a:	429a      	cmp	r2, r3
 800cd7c:	d910      	bls.n	800cda0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cd7e:	4b8e      	ldr	r3, [pc, #568]	; (800cfb8 <HAL_RCC_ClockConfig+0x260>)
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	f023 020f 	bic.w	r2, r3, #15
 800cd86:	498c      	ldr	r1, [pc, #560]	; (800cfb8 <HAL_RCC_ClockConfig+0x260>)
 800cd88:	683b      	ldr	r3, [r7, #0]
 800cd8a:	4313      	orrs	r3, r2
 800cd8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cd8e:	4b8a      	ldr	r3, [pc, #552]	; (800cfb8 <HAL_RCC_ClockConfig+0x260>)
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	f003 030f 	and.w	r3, r3, #15
 800cd96:	683a      	ldr	r2, [r7, #0]
 800cd98:	429a      	cmp	r2, r3
 800cd9a:	d001      	beq.n	800cda0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800cd9c:	2301      	movs	r3, #1
 800cd9e:	e106      	b.n	800cfae <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	f003 0301 	and.w	r3, r3, #1
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d073      	beq.n	800ce94 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	685b      	ldr	r3, [r3, #4]
 800cdb0:	2b03      	cmp	r3, #3
 800cdb2:	d129      	bne.n	800ce08 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800cdb4:	4b81      	ldr	r3, [pc, #516]	; (800cfbc <HAL_RCC_ClockConfig+0x264>)
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d101      	bne.n	800cdc4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800cdc0:	2301      	movs	r3, #1
 800cdc2:	e0f4      	b.n	800cfae <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800cdc4:	f000 f972 	bl	800d0ac <RCC_GetSysClockFreqFromPLLSource>
 800cdc8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800cdca:	693b      	ldr	r3, [r7, #16]
 800cdcc:	4a7c      	ldr	r2, [pc, #496]	; (800cfc0 <HAL_RCC_ClockConfig+0x268>)
 800cdce:	4293      	cmp	r3, r2
 800cdd0:	d93f      	bls.n	800ce52 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800cdd2:	4b7a      	ldr	r3, [pc, #488]	; (800cfbc <HAL_RCC_ClockConfig+0x264>)
 800cdd4:	689b      	ldr	r3, [r3, #8]
 800cdd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d009      	beq.n	800cdf2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d033      	beq.n	800ce52 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d12f      	bne.n	800ce52 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800cdf2:	4b72      	ldr	r3, [pc, #456]	; (800cfbc <HAL_RCC_ClockConfig+0x264>)
 800cdf4:	689b      	ldr	r3, [r3, #8]
 800cdf6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cdfa:	4a70      	ldr	r2, [pc, #448]	; (800cfbc <HAL_RCC_ClockConfig+0x264>)
 800cdfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce00:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800ce02:	2380      	movs	r3, #128	; 0x80
 800ce04:	617b      	str	r3, [r7, #20]
 800ce06:	e024      	b.n	800ce52 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	685b      	ldr	r3, [r3, #4]
 800ce0c:	2b02      	cmp	r3, #2
 800ce0e:	d107      	bne.n	800ce20 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800ce10:	4b6a      	ldr	r3, [pc, #424]	; (800cfbc <HAL_RCC_ClockConfig+0x264>)
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d109      	bne.n	800ce30 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800ce1c:	2301      	movs	r3, #1
 800ce1e:	e0c6      	b.n	800cfae <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ce20:	4b66      	ldr	r3, [pc, #408]	; (800cfbc <HAL_RCC_ClockConfig+0x264>)
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d101      	bne.n	800ce30 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800ce2c:	2301      	movs	r3, #1
 800ce2e:	e0be      	b.n	800cfae <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800ce30:	f000 f8ce 	bl	800cfd0 <HAL_RCC_GetSysClockFreq>
 800ce34:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800ce36:	693b      	ldr	r3, [r7, #16]
 800ce38:	4a61      	ldr	r2, [pc, #388]	; (800cfc0 <HAL_RCC_ClockConfig+0x268>)
 800ce3a:	4293      	cmp	r3, r2
 800ce3c:	d909      	bls.n	800ce52 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800ce3e:	4b5f      	ldr	r3, [pc, #380]	; (800cfbc <HAL_RCC_ClockConfig+0x264>)
 800ce40:	689b      	ldr	r3, [r3, #8]
 800ce42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ce46:	4a5d      	ldr	r2, [pc, #372]	; (800cfbc <HAL_RCC_ClockConfig+0x264>)
 800ce48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce4c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800ce4e:	2380      	movs	r3, #128	; 0x80
 800ce50:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800ce52:	4b5a      	ldr	r3, [pc, #360]	; (800cfbc <HAL_RCC_ClockConfig+0x264>)
 800ce54:	689b      	ldr	r3, [r3, #8]
 800ce56:	f023 0203 	bic.w	r2, r3, #3
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	685b      	ldr	r3, [r3, #4]
 800ce5e:	4957      	ldr	r1, [pc, #348]	; (800cfbc <HAL_RCC_ClockConfig+0x264>)
 800ce60:	4313      	orrs	r3, r2
 800ce62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ce64:	f7fc f88a 	bl	8008f7c <HAL_GetTick>
 800ce68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ce6a:	e00a      	b.n	800ce82 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ce6c:	f7fc f886 	bl	8008f7c <HAL_GetTick>
 800ce70:	4602      	mov	r2, r0
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	1ad3      	subs	r3, r2, r3
 800ce76:	f241 3288 	movw	r2, #5000	; 0x1388
 800ce7a:	4293      	cmp	r3, r2
 800ce7c:	d901      	bls.n	800ce82 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800ce7e:	2303      	movs	r3, #3
 800ce80:	e095      	b.n	800cfae <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ce82:	4b4e      	ldr	r3, [pc, #312]	; (800cfbc <HAL_RCC_ClockConfig+0x264>)
 800ce84:	689b      	ldr	r3, [r3, #8]
 800ce86:	f003 020c 	and.w	r2, r3, #12
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	685b      	ldr	r3, [r3, #4]
 800ce8e:	009b      	lsls	r3, r3, #2
 800ce90:	429a      	cmp	r2, r3
 800ce92:	d1eb      	bne.n	800ce6c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	f003 0302 	and.w	r3, r3, #2
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d023      	beq.n	800cee8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	f003 0304 	and.w	r3, r3, #4
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d005      	beq.n	800ceb8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ceac:	4b43      	ldr	r3, [pc, #268]	; (800cfbc <HAL_RCC_ClockConfig+0x264>)
 800ceae:	689b      	ldr	r3, [r3, #8]
 800ceb0:	4a42      	ldr	r2, [pc, #264]	; (800cfbc <HAL_RCC_ClockConfig+0x264>)
 800ceb2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800ceb6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	f003 0308 	and.w	r3, r3, #8
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d007      	beq.n	800ced4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800cec4:	4b3d      	ldr	r3, [pc, #244]	; (800cfbc <HAL_RCC_ClockConfig+0x264>)
 800cec6:	689b      	ldr	r3, [r3, #8]
 800cec8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800cecc:	4a3b      	ldr	r2, [pc, #236]	; (800cfbc <HAL_RCC_ClockConfig+0x264>)
 800cece:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800ced2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ced4:	4b39      	ldr	r3, [pc, #228]	; (800cfbc <HAL_RCC_ClockConfig+0x264>)
 800ced6:	689b      	ldr	r3, [r3, #8]
 800ced8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	689b      	ldr	r3, [r3, #8]
 800cee0:	4936      	ldr	r1, [pc, #216]	; (800cfbc <HAL_RCC_ClockConfig+0x264>)
 800cee2:	4313      	orrs	r3, r2
 800cee4:	608b      	str	r3, [r1, #8]
 800cee6:	e008      	b.n	800cefa <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800cee8:	697b      	ldr	r3, [r7, #20]
 800ceea:	2b80      	cmp	r3, #128	; 0x80
 800ceec:	d105      	bne.n	800cefa <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800ceee:	4b33      	ldr	r3, [pc, #204]	; (800cfbc <HAL_RCC_ClockConfig+0x264>)
 800cef0:	689b      	ldr	r3, [r3, #8]
 800cef2:	4a32      	ldr	r2, [pc, #200]	; (800cfbc <HAL_RCC_ClockConfig+0x264>)
 800cef4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cef8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800cefa:	4b2f      	ldr	r3, [pc, #188]	; (800cfb8 <HAL_RCC_ClockConfig+0x260>)
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	f003 030f 	and.w	r3, r3, #15
 800cf02:	683a      	ldr	r2, [r7, #0]
 800cf04:	429a      	cmp	r2, r3
 800cf06:	d21d      	bcs.n	800cf44 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cf08:	4b2b      	ldr	r3, [pc, #172]	; (800cfb8 <HAL_RCC_ClockConfig+0x260>)
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	f023 020f 	bic.w	r2, r3, #15
 800cf10:	4929      	ldr	r1, [pc, #164]	; (800cfb8 <HAL_RCC_ClockConfig+0x260>)
 800cf12:	683b      	ldr	r3, [r7, #0]
 800cf14:	4313      	orrs	r3, r2
 800cf16:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800cf18:	f7fc f830 	bl	8008f7c <HAL_GetTick>
 800cf1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cf1e:	e00a      	b.n	800cf36 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cf20:	f7fc f82c 	bl	8008f7c <HAL_GetTick>
 800cf24:	4602      	mov	r2, r0
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	1ad3      	subs	r3, r2, r3
 800cf2a:	f241 3288 	movw	r2, #5000	; 0x1388
 800cf2e:	4293      	cmp	r3, r2
 800cf30:	d901      	bls.n	800cf36 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800cf32:	2303      	movs	r3, #3
 800cf34:	e03b      	b.n	800cfae <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cf36:	4b20      	ldr	r3, [pc, #128]	; (800cfb8 <HAL_RCC_ClockConfig+0x260>)
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	f003 030f 	and.w	r3, r3, #15
 800cf3e:	683a      	ldr	r2, [r7, #0]
 800cf40:	429a      	cmp	r2, r3
 800cf42:	d1ed      	bne.n	800cf20 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	f003 0304 	and.w	r3, r3, #4
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d008      	beq.n	800cf62 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800cf50:	4b1a      	ldr	r3, [pc, #104]	; (800cfbc <HAL_RCC_ClockConfig+0x264>)
 800cf52:	689b      	ldr	r3, [r3, #8]
 800cf54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	68db      	ldr	r3, [r3, #12]
 800cf5c:	4917      	ldr	r1, [pc, #92]	; (800cfbc <HAL_RCC_ClockConfig+0x264>)
 800cf5e:	4313      	orrs	r3, r2
 800cf60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	f003 0308 	and.w	r3, r3, #8
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d009      	beq.n	800cf82 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800cf6e:	4b13      	ldr	r3, [pc, #76]	; (800cfbc <HAL_RCC_ClockConfig+0x264>)
 800cf70:	689b      	ldr	r3, [r3, #8]
 800cf72:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	691b      	ldr	r3, [r3, #16]
 800cf7a:	00db      	lsls	r3, r3, #3
 800cf7c:	490f      	ldr	r1, [pc, #60]	; (800cfbc <HAL_RCC_ClockConfig+0x264>)
 800cf7e:	4313      	orrs	r3, r2
 800cf80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800cf82:	f000 f825 	bl	800cfd0 <HAL_RCC_GetSysClockFreq>
 800cf86:	4601      	mov	r1, r0
 800cf88:	4b0c      	ldr	r3, [pc, #48]	; (800cfbc <HAL_RCC_ClockConfig+0x264>)
 800cf8a:	689b      	ldr	r3, [r3, #8]
 800cf8c:	091b      	lsrs	r3, r3, #4
 800cf8e:	f003 030f 	and.w	r3, r3, #15
 800cf92:	4a0c      	ldr	r2, [pc, #48]	; (800cfc4 <HAL_RCC_ClockConfig+0x26c>)
 800cf94:	5cd3      	ldrb	r3, [r2, r3]
 800cf96:	f003 031f 	and.w	r3, r3, #31
 800cf9a:	fa21 f303 	lsr.w	r3, r1, r3
 800cf9e:	4a0a      	ldr	r2, [pc, #40]	; (800cfc8 <HAL_RCC_ClockConfig+0x270>)
 800cfa0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800cfa2:	4b0a      	ldr	r3, [pc, #40]	; (800cfcc <HAL_RCC_ClockConfig+0x274>)
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	4618      	mov	r0, r3
 800cfa8:	f7fb ff9c 	bl	8008ee4 <HAL_InitTick>
 800cfac:	4603      	mov	r3, r0
}
 800cfae:	4618      	mov	r0, r3
 800cfb0:	3718      	adds	r7, #24
 800cfb2:	46bd      	mov	sp, r7
 800cfb4:	bd80      	pop	{r7, pc}
 800cfb6:	bf00      	nop
 800cfb8:	40022000 	.word	0x40022000
 800cfbc:	40021000 	.word	0x40021000
 800cfc0:	04c4b400 	.word	0x04c4b400
 800cfc4:	0801668c 	.word	0x0801668c
 800cfc8:	20000eb0 	.word	0x20000eb0
 800cfcc:	20000eb4 	.word	0x20000eb4

0800cfd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800cfd0:	b480      	push	{r7}
 800cfd2:	b087      	sub	sp, #28
 800cfd4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800cfd6:	4b2c      	ldr	r3, [pc, #176]	; (800d088 <HAL_RCC_GetSysClockFreq+0xb8>)
 800cfd8:	689b      	ldr	r3, [r3, #8]
 800cfda:	f003 030c 	and.w	r3, r3, #12
 800cfde:	2b04      	cmp	r3, #4
 800cfe0:	d102      	bne.n	800cfe8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800cfe2:	4b2a      	ldr	r3, [pc, #168]	; (800d08c <HAL_RCC_GetSysClockFreq+0xbc>)
 800cfe4:	613b      	str	r3, [r7, #16]
 800cfe6:	e047      	b.n	800d078 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800cfe8:	4b27      	ldr	r3, [pc, #156]	; (800d088 <HAL_RCC_GetSysClockFreq+0xb8>)
 800cfea:	689b      	ldr	r3, [r3, #8]
 800cfec:	f003 030c 	and.w	r3, r3, #12
 800cff0:	2b08      	cmp	r3, #8
 800cff2:	d102      	bne.n	800cffa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800cff4:	4b26      	ldr	r3, [pc, #152]	; (800d090 <HAL_RCC_GetSysClockFreq+0xc0>)
 800cff6:	613b      	str	r3, [r7, #16]
 800cff8:	e03e      	b.n	800d078 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800cffa:	4b23      	ldr	r3, [pc, #140]	; (800d088 <HAL_RCC_GetSysClockFreq+0xb8>)
 800cffc:	689b      	ldr	r3, [r3, #8]
 800cffe:	f003 030c 	and.w	r3, r3, #12
 800d002:	2b0c      	cmp	r3, #12
 800d004:	d136      	bne.n	800d074 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800d006:	4b20      	ldr	r3, [pc, #128]	; (800d088 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d008:	68db      	ldr	r3, [r3, #12]
 800d00a:	f003 0303 	and.w	r3, r3, #3
 800d00e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800d010:	4b1d      	ldr	r3, [pc, #116]	; (800d088 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d012:	68db      	ldr	r3, [r3, #12]
 800d014:	091b      	lsrs	r3, r3, #4
 800d016:	f003 030f 	and.w	r3, r3, #15
 800d01a:	3301      	adds	r3, #1
 800d01c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	2b03      	cmp	r3, #3
 800d022:	d10c      	bne.n	800d03e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800d024:	4a1a      	ldr	r2, [pc, #104]	; (800d090 <HAL_RCC_GetSysClockFreq+0xc0>)
 800d026:	68bb      	ldr	r3, [r7, #8]
 800d028:	fbb2 f3f3 	udiv	r3, r2, r3
 800d02c:	4a16      	ldr	r2, [pc, #88]	; (800d088 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d02e:	68d2      	ldr	r2, [r2, #12]
 800d030:	0a12      	lsrs	r2, r2, #8
 800d032:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d036:	fb02 f303 	mul.w	r3, r2, r3
 800d03a:	617b      	str	r3, [r7, #20]
      break;
 800d03c:	e00c      	b.n	800d058 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800d03e:	4a13      	ldr	r2, [pc, #76]	; (800d08c <HAL_RCC_GetSysClockFreq+0xbc>)
 800d040:	68bb      	ldr	r3, [r7, #8]
 800d042:	fbb2 f3f3 	udiv	r3, r2, r3
 800d046:	4a10      	ldr	r2, [pc, #64]	; (800d088 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d048:	68d2      	ldr	r2, [r2, #12]
 800d04a:	0a12      	lsrs	r2, r2, #8
 800d04c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d050:	fb02 f303 	mul.w	r3, r2, r3
 800d054:	617b      	str	r3, [r7, #20]
      break;
 800d056:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800d058:	4b0b      	ldr	r3, [pc, #44]	; (800d088 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d05a:	68db      	ldr	r3, [r3, #12]
 800d05c:	0e5b      	lsrs	r3, r3, #25
 800d05e:	f003 0303 	and.w	r3, r3, #3
 800d062:	3301      	adds	r3, #1
 800d064:	005b      	lsls	r3, r3, #1
 800d066:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800d068:	697a      	ldr	r2, [r7, #20]
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d070:	613b      	str	r3, [r7, #16]
 800d072:	e001      	b.n	800d078 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800d074:	2300      	movs	r3, #0
 800d076:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800d078:	693b      	ldr	r3, [r7, #16]
}
 800d07a:	4618      	mov	r0, r3
 800d07c:	371c      	adds	r7, #28
 800d07e:	46bd      	mov	sp, r7
 800d080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d084:	4770      	bx	lr
 800d086:	bf00      	nop
 800d088:	40021000 	.word	0x40021000
 800d08c:	00f42400 	.word	0x00f42400
 800d090:	007a1200 	.word	0x007a1200

0800d094 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d094:	b480      	push	{r7}
 800d096:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800d098:	4b03      	ldr	r3, [pc, #12]	; (800d0a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800d09a:	681b      	ldr	r3, [r3, #0]
}
 800d09c:	4618      	mov	r0, r3
 800d09e:	46bd      	mov	sp, r7
 800d0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a4:	4770      	bx	lr
 800d0a6:	bf00      	nop
 800d0a8:	20000eb0 	.word	0x20000eb0

0800d0ac <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800d0ac:	b480      	push	{r7}
 800d0ae:	b087      	sub	sp, #28
 800d0b0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800d0b2:	4b1e      	ldr	r3, [pc, #120]	; (800d12c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d0b4:	68db      	ldr	r3, [r3, #12]
 800d0b6:	f003 0303 	and.w	r3, r3, #3
 800d0ba:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800d0bc:	4b1b      	ldr	r3, [pc, #108]	; (800d12c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d0be:	68db      	ldr	r3, [r3, #12]
 800d0c0:	091b      	lsrs	r3, r3, #4
 800d0c2:	f003 030f 	and.w	r3, r3, #15
 800d0c6:	3301      	adds	r3, #1
 800d0c8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800d0ca:	693b      	ldr	r3, [r7, #16]
 800d0cc:	2b03      	cmp	r3, #3
 800d0ce:	d10c      	bne.n	800d0ea <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800d0d0:	4a17      	ldr	r2, [pc, #92]	; (800d130 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	fbb2 f3f3 	udiv	r3, r2, r3
 800d0d8:	4a14      	ldr	r2, [pc, #80]	; (800d12c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d0da:	68d2      	ldr	r2, [r2, #12]
 800d0dc:	0a12      	lsrs	r2, r2, #8
 800d0de:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d0e2:	fb02 f303 	mul.w	r3, r2, r3
 800d0e6:	617b      	str	r3, [r7, #20]
    break;
 800d0e8:	e00c      	b.n	800d104 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800d0ea:	4a12      	ldr	r2, [pc, #72]	; (800d134 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800d0f2:	4a0e      	ldr	r2, [pc, #56]	; (800d12c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d0f4:	68d2      	ldr	r2, [r2, #12]
 800d0f6:	0a12      	lsrs	r2, r2, #8
 800d0f8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d0fc:	fb02 f303 	mul.w	r3, r2, r3
 800d100:	617b      	str	r3, [r7, #20]
    break;
 800d102:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800d104:	4b09      	ldr	r3, [pc, #36]	; (800d12c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d106:	68db      	ldr	r3, [r3, #12]
 800d108:	0e5b      	lsrs	r3, r3, #25
 800d10a:	f003 0303 	and.w	r3, r3, #3
 800d10e:	3301      	adds	r3, #1
 800d110:	005b      	lsls	r3, r3, #1
 800d112:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800d114:	697a      	ldr	r2, [r7, #20]
 800d116:	68bb      	ldr	r3, [r7, #8]
 800d118:	fbb2 f3f3 	udiv	r3, r2, r3
 800d11c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800d11e:	687b      	ldr	r3, [r7, #4]
}
 800d120:	4618      	mov	r0, r3
 800d122:	371c      	adds	r7, #28
 800d124:	46bd      	mov	sp, r7
 800d126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d12a:	4770      	bx	lr
 800d12c:	40021000 	.word	0x40021000
 800d130:	007a1200 	.word	0x007a1200
 800d134:	00f42400 	.word	0x00f42400

0800d138 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800d138:	b580      	push	{r7, lr}
 800d13a:	b086      	sub	sp, #24
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800d140:	2300      	movs	r3, #0
 800d142:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800d144:	2300      	movs	r3, #0
 800d146:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d150:	2b00      	cmp	r3, #0
 800d152:	f000 8098 	beq.w	800d286 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d156:	2300      	movs	r3, #0
 800d158:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d15a:	4b43      	ldr	r3, [pc, #268]	; (800d268 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d15c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d15e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d162:	2b00      	cmp	r3, #0
 800d164:	d10d      	bne.n	800d182 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d166:	4b40      	ldr	r3, [pc, #256]	; (800d268 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d16a:	4a3f      	ldr	r2, [pc, #252]	; (800d268 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d16c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d170:	6593      	str	r3, [r2, #88]	; 0x58
 800d172:	4b3d      	ldr	r3, [pc, #244]	; (800d268 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d17a:	60bb      	str	r3, [r7, #8]
 800d17c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d17e:	2301      	movs	r3, #1
 800d180:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d182:	4b3a      	ldr	r3, [pc, #232]	; (800d26c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	4a39      	ldr	r2, [pc, #228]	; (800d26c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800d188:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d18c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d18e:	f7fb fef5 	bl	8008f7c <HAL_GetTick>
 800d192:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d194:	e009      	b.n	800d1aa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d196:	f7fb fef1 	bl	8008f7c <HAL_GetTick>
 800d19a:	4602      	mov	r2, r0
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	1ad3      	subs	r3, r2, r3
 800d1a0:	2b02      	cmp	r3, #2
 800d1a2:	d902      	bls.n	800d1aa <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800d1a4:	2303      	movs	r3, #3
 800d1a6:	74fb      	strb	r3, [r7, #19]
        break;
 800d1a8:	e005      	b.n	800d1b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d1aa:	4b30      	ldr	r3, [pc, #192]	; (800d26c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d0ef      	beq.n	800d196 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800d1b6:	7cfb      	ldrb	r3, [r7, #19]
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d159      	bne.n	800d270 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800d1bc:	4b2a      	ldr	r3, [pc, #168]	; (800d268 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d1be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d1c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d1c6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800d1c8:	697b      	ldr	r3, [r7, #20]
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d01e      	beq.n	800d20c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d1d2:	697a      	ldr	r2, [r7, #20]
 800d1d4:	429a      	cmp	r2, r3
 800d1d6:	d019      	beq.n	800d20c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800d1d8:	4b23      	ldr	r3, [pc, #140]	; (800d268 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d1da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d1de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d1e2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800d1e4:	4b20      	ldr	r3, [pc, #128]	; (800d268 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d1e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d1ea:	4a1f      	ldr	r2, [pc, #124]	; (800d268 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d1ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d1f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800d1f4:	4b1c      	ldr	r3, [pc, #112]	; (800d268 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d1f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d1fa:	4a1b      	ldr	r2, [pc, #108]	; (800d268 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d1fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d200:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800d204:	4a18      	ldr	r2, [pc, #96]	; (800d268 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d206:	697b      	ldr	r3, [r7, #20]
 800d208:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800d20c:	697b      	ldr	r3, [r7, #20]
 800d20e:	f003 0301 	and.w	r3, r3, #1
 800d212:	2b00      	cmp	r3, #0
 800d214:	d016      	beq.n	800d244 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d216:	f7fb feb1 	bl	8008f7c <HAL_GetTick>
 800d21a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d21c:	e00b      	b.n	800d236 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d21e:	f7fb fead 	bl	8008f7c <HAL_GetTick>
 800d222:	4602      	mov	r2, r0
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	1ad3      	subs	r3, r2, r3
 800d228:	f241 3288 	movw	r2, #5000	; 0x1388
 800d22c:	4293      	cmp	r3, r2
 800d22e:	d902      	bls.n	800d236 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800d230:	2303      	movs	r3, #3
 800d232:	74fb      	strb	r3, [r7, #19]
            break;
 800d234:	e006      	b.n	800d244 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d236:	4b0c      	ldr	r3, [pc, #48]	; (800d268 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d238:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d23c:	f003 0302 	and.w	r3, r3, #2
 800d240:	2b00      	cmp	r3, #0
 800d242:	d0ec      	beq.n	800d21e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800d244:	7cfb      	ldrb	r3, [r7, #19]
 800d246:	2b00      	cmp	r3, #0
 800d248:	d10b      	bne.n	800d262 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d24a:	4b07      	ldr	r3, [pc, #28]	; (800d268 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d24c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d250:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d258:	4903      	ldr	r1, [pc, #12]	; (800d268 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d25a:	4313      	orrs	r3, r2
 800d25c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800d260:	e008      	b.n	800d274 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800d262:	7cfb      	ldrb	r3, [r7, #19]
 800d264:	74bb      	strb	r3, [r7, #18]
 800d266:	e005      	b.n	800d274 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800d268:	40021000 	.word	0x40021000
 800d26c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d270:	7cfb      	ldrb	r3, [r7, #19]
 800d272:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800d274:	7c7b      	ldrb	r3, [r7, #17]
 800d276:	2b01      	cmp	r3, #1
 800d278:	d105      	bne.n	800d286 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d27a:	4baf      	ldr	r3, [pc, #700]	; (800d538 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d27c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d27e:	4aae      	ldr	r2, [pc, #696]	; (800d538 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d280:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d284:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	f003 0301 	and.w	r3, r3, #1
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d00a      	beq.n	800d2a8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800d292:	4ba9      	ldr	r3, [pc, #676]	; (800d538 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d294:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d298:	f023 0203 	bic.w	r2, r3, #3
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	685b      	ldr	r3, [r3, #4]
 800d2a0:	49a5      	ldr	r1, [pc, #660]	; (800d538 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d2a2:	4313      	orrs	r3, r2
 800d2a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	f003 0302 	and.w	r3, r3, #2
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d00a      	beq.n	800d2ca <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800d2b4:	4ba0      	ldr	r3, [pc, #640]	; (800d538 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d2b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d2ba:	f023 020c 	bic.w	r2, r3, #12
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	689b      	ldr	r3, [r3, #8]
 800d2c2:	499d      	ldr	r1, [pc, #628]	; (800d538 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d2c4:	4313      	orrs	r3, r2
 800d2c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	f003 0304 	and.w	r3, r3, #4
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d00a      	beq.n	800d2ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800d2d6:	4b98      	ldr	r3, [pc, #608]	; (800d538 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d2d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d2dc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	68db      	ldr	r3, [r3, #12]
 800d2e4:	4994      	ldr	r1, [pc, #592]	; (800d538 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d2e6:	4313      	orrs	r3, r2
 800d2e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	f003 0308 	and.w	r3, r3, #8
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d00a      	beq.n	800d30e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800d2f8:	4b8f      	ldr	r3, [pc, #572]	; (800d538 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d2fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d2fe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	691b      	ldr	r3, [r3, #16]
 800d306:	498c      	ldr	r1, [pc, #560]	; (800d538 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d308:	4313      	orrs	r3, r2
 800d30a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	f003 0310 	and.w	r3, r3, #16
 800d316:	2b00      	cmp	r3, #0
 800d318:	d00a      	beq.n	800d330 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800d31a:	4b87      	ldr	r3, [pc, #540]	; (800d538 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d31c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d320:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	695b      	ldr	r3, [r3, #20]
 800d328:	4983      	ldr	r1, [pc, #524]	; (800d538 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d32a:	4313      	orrs	r3, r2
 800d32c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	f003 0320 	and.w	r3, r3, #32
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d00a      	beq.n	800d352 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800d33c:	4b7e      	ldr	r3, [pc, #504]	; (800d538 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d33e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d342:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	699b      	ldr	r3, [r3, #24]
 800d34a:	497b      	ldr	r1, [pc, #492]	; (800d538 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d34c:	4313      	orrs	r3, r2
 800d34e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d00a      	beq.n	800d374 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800d35e:	4b76      	ldr	r3, [pc, #472]	; (800d538 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d360:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d364:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	69db      	ldr	r3, [r3, #28]
 800d36c:	4972      	ldr	r1, [pc, #456]	; (800d538 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d36e:	4313      	orrs	r3, r2
 800d370:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d00a      	beq.n	800d396 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800d380:	4b6d      	ldr	r3, [pc, #436]	; (800d538 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d386:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	6a1b      	ldr	r3, [r3, #32]
 800d38e:	496a      	ldr	r1, [pc, #424]	; (800d538 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d390:	4313      	orrs	r3, r2
 800d392:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d00a      	beq.n	800d3b8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800d3a2:	4b65      	ldr	r3, [pc, #404]	; (800d538 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d3a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d3a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3b0:	4961      	ldr	r1, [pc, #388]	; (800d538 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d3b2:	4313      	orrs	r3, r2
 800d3b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d00a      	beq.n	800d3da <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800d3c4:	4b5c      	ldr	r3, [pc, #368]	; (800d538 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d3c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d3ca:	f023 0203 	bic.w	r2, r3, #3
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3d2:	4959      	ldr	r1, [pc, #356]	; (800d538 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d3d4:	4313      	orrs	r3, r2
 800d3d6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d00a      	beq.n	800d3fc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d3e6:	4b54      	ldr	r3, [pc, #336]	; (800d538 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d3e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d3ec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3f4:	4950      	ldr	r1, [pc, #320]	; (800d538 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d3f6:	4313      	orrs	r3, r2
 800d3f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d404:	2b00      	cmp	r3, #0
 800d406:	d015      	beq.n	800d434 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800d408:	4b4b      	ldr	r3, [pc, #300]	; (800d538 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d40a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d40e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d416:	4948      	ldr	r1, [pc, #288]	; (800d538 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d418:	4313      	orrs	r3, r2
 800d41a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d422:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d426:	d105      	bne.n	800d434 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d428:	4b43      	ldr	r3, [pc, #268]	; (800d538 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d42a:	68db      	ldr	r3, [r3, #12]
 800d42c:	4a42      	ldr	r2, [pc, #264]	; (800d538 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d42e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d432:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d015      	beq.n	800d46c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800d440:	4b3d      	ldr	r3, [pc, #244]	; (800d538 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d446:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d44e:	493a      	ldr	r1, [pc, #232]	; (800d538 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d450:	4313      	orrs	r3, r2
 800d452:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d45a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d45e:	d105      	bne.n	800d46c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d460:	4b35      	ldr	r3, [pc, #212]	; (800d538 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d462:	68db      	ldr	r3, [r3, #12]
 800d464:	4a34      	ldr	r2, [pc, #208]	; (800d538 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d466:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d46a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d474:	2b00      	cmp	r3, #0
 800d476:	d015      	beq.n	800d4a4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800d478:	4b2f      	ldr	r3, [pc, #188]	; (800d538 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d47a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d47e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d486:	492c      	ldr	r1, [pc, #176]	; (800d538 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d488:	4313      	orrs	r3, r2
 800d48a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d492:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d496:	d105      	bne.n	800d4a4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d498:	4b27      	ldr	r3, [pc, #156]	; (800d538 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d49a:	68db      	ldr	r3, [r3, #12]
 800d49c:	4a26      	ldr	r2, [pc, #152]	; (800d538 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d49e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d4a2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d015      	beq.n	800d4dc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d4b0:	4b21      	ldr	r3, [pc, #132]	; (800d538 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d4b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d4b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4be:	491e      	ldr	r1, [pc, #120]	; (800d538 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d4c0:	4313      	orrs	r3, r2
 800d4c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d4ce:	d105      	bne.n	800d4dc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d4d0:	4b19      	ldr	r3, [pc, #100]	; (800d538 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d4d2:	68db      	ldr	r3, [r3, #12]
 800d4d4:	4a18      	ldr	r2, [pc, #96]	; (800d538 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d4d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d4da:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d015      	beq.n	800d514 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d4e8:	4b13      	ldr	r3, [pc, #76]	; (800d538 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d4ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d4ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4f6:	4910      	ldr	r1, [pc, #64]	; (800d538 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d4f8:	4313      	orrs	r3, r2
 800d4fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d502:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d506:	d105      	bne.n	800d514 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d508:	4b0b      	ldr	r3, [pc, #44]	; (800d538 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d50a:	68db      	ldr	r3, [r3, #12]
 800d50c:	4a0a      	ldr	r2, [pc, #40]	; (800d538 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d50e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d512:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d018      	beq.n	800d552 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800d520:	4b05      	ldr	r3, [pc, #20]	; (800d538 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d526:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d52e:	4902      	ldr	r1, [pc, #8]	; (800d538 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d530:	4313      	orrs	r3, r2
 800d532:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800d536:	e001      	b.n	800d53c <HAL_RCCEx_PeriphCLKConfig+0x404>
 800d538:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d540:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d544:	d105      	bne.n	800d552 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800d546:	4b21      	ldr	r3, [pc, #132]	; (800d5cc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800d548:	68db      	ldr	r3, [r3, #12]
 800d54a:	4a20      	ldr	r2, [pc, #128]	; (800d5cc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800d54c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d550:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d015      	beq.n	800d58a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800d55e:	4b1b      	ldr	r3, [pc, #108]	; (800d5cc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800d560:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d564:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d56c:	4917      	ldr	r1, [pc, #92]	; (800d5cc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800d56e:	4313      	orrs	r3, r2
 800d570:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d578:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d57c:	d105      	bne.n	800d58a <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800d57e:	4b13      	ldr	r3, [pc, #76]	; (800d5cc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800d580:	68db      	ldr	r3, [r3, #12]
 800d582:	4a12      	ldr	r2, [pc, #72]	; (800d5cc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800d584:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d588:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d592:	2b00      	cmp	r3, #0
 800d594:	d015      	beq.n	800d5c2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800d596:	4b0d      	ldr	r3, [pc, #52]	; (800d5cc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800d598:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d59c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d5a4:	4909      	ldr	r1, [pc, #36]	; (800d5cc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800d5a6:	4313      	orrs	r3, r2
 800d5a8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d5b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d5b4:	d105      	bne.n	800d5c2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d5b6:	4b05      	ldr	r3, [pc, #20]	; (800d5cc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800d5b8:	68db      	ldr	r3, [r3, #12]
 800d5ba:	4a04      	ldr	r2, [pc, #16]	; (800d5cc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800d5bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d5c0:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800d5c2:	7cbb      	ldrb	r3, [r7, #18]
}
 800d5c4:	4618      	mov	r0, r3
 800d5c6:	3718      	adds	r7, #24
 800d5c8:	46bd      	mov	sp, r7
 800d5ca:	bd80      	pop	{r7, pc}
 800d5cc:	40021000 	.word	0x40021000

0800d5d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d5d0:	b580      	push	{r7, lr}
 800d5d2:	b084      	sub	sp, #16
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d101      	bne.n	800d5e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d5de:	2301      	movs	r3, #1
 800d5e0:	e084      	b.n	800d6ec <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	2200      	movs	r2, #0
 800d5e6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d5ee:	b2db      	uxtb	r3, r3
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d106      	bne.n	800d602 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	2200      	movs	r2, #0
 800d5f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d5fc:	6878      	ldr	r0, [r7, #4]
 800d5fe:	f7fa fe1d 	bl	800823c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	2202      	movs	r2, #2
 800d606:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	681a      	ldr	r2, [r3, #0]
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d618:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	68db      	ldr	r3, [r3, #12]
 800d61e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d622:	d902      	bls.n	800d62a <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800d624:	2300      	movs	r3, #0
 800d626:	60fb      	str	r3, [r7, #12]
 800d628:	e002      	b.n	800d630 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800d62a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d62e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	68db      	ldr	r3, [r3, #12]
 800d634:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800d638:	d007      	beq.n	800d64a <HAL_SPI_Init+0x7a>
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	68db      	ldr	r3, [r3, #12]
 800d63e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d642:	d002      	beq.n	800d64a <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	2200      	movs	r2, #0
 800d648:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d10b      	bne.n	800d66a <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	68db      	ldr	r3, [r3, #12]
 800d656:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d65a:	d903      	bls.n	800d664 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	2202      	movs	r2, #2
 800d660:	631a      	str	r2, [r3, #48]	; 0x30
 800d662:	e002      	b.n	800d66a <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	2201      	movs	r2, #1
 800d668:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	685a      	ldr	r2, [r3, #4]
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	689b      	ldr	r3, [r3, #8]
 800d672:	431a      	orrs	r2, r3
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	691b      	ldr	r3, [r3, #16]
 800d678:	431a      	orrs	r2, r3
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	695b      	ldr	r3, [r3, #20]
 800d67e:	431a      	orrs	r2, r3
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	699b      	ldr	r3, [r3, #24]
 800d684:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d688:	431a      	orrs	r2, r3
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	69db      	ldr	r3, [r3, #28]
 800d68e:	431a      	orrs	r2, r3
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	6a1b      	ldr	r3, [r3, #32]
 800d694:	ea42 0103 	orr.w	r1, r2, r3
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	430a      	orrs	r2, r1
 800d6a2:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	699b      	ldr	r3, [r3, #24]
 800d6a8:	0c1b      	lsrs	r3, r3, #16
 800d6aa:	f003 0204 	and.w	r2, r3, #4
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6b2:	431a      	orrs	r2, r3
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6b8:	431a      	orrs	r2, r3
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	68db      	ldr	r3, [r3, #12]
 800d6be:	ea42 0103 	orr.w	r1, r2, r3
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	68fa      	ldr	r2, [r7, #12]
 800d6c8:	430a      	orrs	r2, r1
 800d6ca:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	69da      	ldr	r2, [r3, #28]
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d6da:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	2200      	movs	r2, #0
 800d6e0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	2201      	movs	r2, #1
 800d6e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800d6ea:	2300      	movs	r3, #0
}
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	3710      	adds	r7, #16
 800d6f0:	46bd      	mov	sp, r7
 800d6f2:	bd80      	pop	{r7, pc}

0800d6f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d6f4:	b580      	push	{r7, lr}
 800d6f6:	b082      	sub	sp, #8
 800d6f8:	af00      	add	r7, sp, #0
 800d6fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d101      	bne.n	800d706 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d702:	2301      	movs	r3, #1
 800d704:	e049      	b.n	800d79a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d70c:	b2db      	uxtb	r3, r3
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d106      	bne.n	800d720 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	2200      	movs	r2, #0
 800d716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d71a:	6878      	ldr	r0, [r7, #4]
 800d71c:	f7fb fa98 	bl	8008c50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	2202      	movs	r2, #2
 800d724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	681a      	ldr	r2, [r3, #0]
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	3304      	adds	r3, #4
 800d730:	4619      	mov	r1, r3
 800d732:	4610      	mov	r0, r2
 800d734:	f001 fb9e 	bl	800ee74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	2201      	movs	r2, #1
 800d73c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	2201      	movs	r2, #1
 800d744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	2201      	movs	r2, #1
 800d74c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	2201      	movs	r2, #1
 800d754:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	2201      	movs	r2, #1
 800d75c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	2201      	movs	r2, #1
 800d764:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	2201      	movs	r2, #1
 800d76c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	2201      	movs	r2, #1
 800d774:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	2201      	movs	r2, #1
 800d77c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	2201      	movs	r2, #1
 800d784:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	2201      	movs	r2, #1
 800d78c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	2201      	movs	r2, #1
 800d794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d798:	2300      	movs	r3, #0
}
 800d79a:	4618      	mov	r0, r3
 800d79c:	3708      	adds	r7, #8
 800d79e:	46bd      	mov	sp, r7
 800d7a0:	bd80      	pop	{r7, pc}
	...

0800d7a4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800d7a4:	b480      	push	{r7}
 800d7a6:	b085      	sub	sp, #20
 800d7a8:	af00      	add	r7, sp, #0
 800d7aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d7b2:	b2db      	uxtb	r3, r3
 800d7b4:	2b01      	cmp	r3, #1
 800d7b6:	d001      	beq.n	800d7bc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800d7b8:	2301      	movs	r3, #1
 800d7ba:	e019      	b.n	800d7f0 <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	2202      	movs	r2, #2
 800d7c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	689a      	ldr	r2, [r3, #8]
 800d7ca:	4b0c      	ldr	r3, [pc, #48]	; (800d7fc <HAL_TIM_Base_Start+0x58>)
 800d7cc:	4013      	ands	r3, r2
 800d7ce:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	2b06      	cmp	r3, #6
 800d7d4:	d00b      	beq.n	800d7ee <HAL_TIM_Base_Start+0x4a>
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d7dc:	d007      	beq.n	800d7ee <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	681a      	ldr	r2, [r3, #0]
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	f042 0201 	orr.w	r2, r2, #1
 800d7ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d7ee:	2300      	movs	r3, #0
}
 800d7f0:	4618      	mov	r0, r3
 800d7f2:	3714      	adds	r7, #20
 800d7f4:	46bd      	mov	sp, r7
 800d7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7fa:	4770      	bx	lr
 800d7fc:	00010007 	.word	0x00010007

0800d800 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800d800:	b480      	push	{r7}
 800d802:	b083      	sub	sp, #12
 800d804:	af00      	add	r7, sp, #0
 800d806:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	6a1a      	ldr	r2, [r3, #32]
 800d80e:	f241 1311 	movw	r3, #4369	; 0x1111
 800d812:	4013      	ands	r3, r2
 800d814:	2b00      	cmp	r3, #0
 800d816:	d10f      	bne.n	800d838 <HAL_TIM_Base_Stop+0x38>
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	6a1a      	ldr	r2, [r3, #32]
 800d81e:	f244 4344 	movw	r3, #17476	; 0x4444
 800d822:	4013      	ands	r3, r2
 800d824:	2b00      	cmp	r3, #0
 800d826:	d107      	bne.n	800d838 <HAL_TIM_Base_Stop+0x38>
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	681a      	ldr	r2, [r3, #0]
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	f022 0201 	bic.w	r2, r2, #1
 800d836:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	2201      	movs	r2, #1
 800d83c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800d840:	2300      	movs	r3, #0
}
 800d842:	4618      	mov	r0, r3
 800d844:	370c      	adds	r7, #12
 800d846:	46bd      	mov	sp, r7
 800d848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d84c:	4770      	bx	lr
	...

0800d850 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d850:	b480      	push	{r7}
 800d852:	b085      	sub	sp, #20
 800d854:	af00      	add	r7, sp, #0
 800d856:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d85e:	b2db      	uxtb	r3, r3
 800d860:	2b01      	cmp	r3, #1
 800d862:	d001      	beq.n	800d868 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d864:	2301      	movs	r3, #1
 800d866:	e021      	b.n	800d8ac <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	2202      	movs	r2, #2
 800d86c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	68da      	ldr	r2, [r3, #12]
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	f042 0201 	orr.w	r2, r2, #1
 800d87e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	689a      	ldr	r2, [r3, #8]
 800d886:	4b0c      	ldr	r3, [pc, #48]	; (800d8b8 <HAL_TIM_Base_Start_IT+0x68>)
 800d888:	4013      	ands	r3, r2
 800d88a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	2b06      	cmp	r3, #6
 800d890:	d00b      	beq.n	800d8aa <HAL_TIM_Base_Start_IT+0x5a>
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d898:	d007      	beq.n	800d8aa <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	681a      	ldr	r2, [r3, #0]
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	f042 0201 	orr.w	r2, r2, #1
 800d8a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d8aa:	2300      	movs	r3, #0
}
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	3714      	adds	r7, #20
 800d8b0:	46bd      	mov	sp, r7
 800d8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b6:	4770      	bx	lr
 800d8b8:	00010007 	.word	0x00010007

0800d8bc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800d8bc:	b480      	push	{r7}
 800d8be:	b083      	sub	sp, #12
 800d8c0:	af00      	add	r7, sp, #0
 800d8c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	68da      	ldr	r2, [r3, #12]
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	f022 0201 	bic.w	r2, r2, #1
 800d8d2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	6a1a      	ldr	r2, [r3, #32]
 800d8da:	f241 1311 	movw	r3, #4369	; 0x1111
 800d8de:	4013      	ands	r3, r2
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d10f      	bne.n	800d904 <HAL_TIM_Base_Stop_IT+0x48>
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	6a1a      	ldr	r2, [r3, #32]
 800d8ea:	f244 4344 	movw	r3, #17476	; 0x4444
 800d8ee:	4013      	ands	r3, r2
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d107      	bne.n	800d904 <HAL_TIM_Base_Stop_IT+0x48>
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	681a      	ldr	r2, [r3, #0]
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	f022 0201 	bic.w	r2, r2, #1
 800d902:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	2201      	movs	r2, #1
 800d908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800d90c:	2300      	movs	r3, #0
}
 800d90e:	4618      	mov	r0, r3
 800d910:	370c      	adds	r7, #12
 800d912:	46bd      	mov	sp, r7
 800d914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d918:	4770      	bx	lr

0800d91a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d91a:	b580      	push	{r7, lr}
 800d91c:	b082      	sub	sp, #8
 800d91e:	af00      	add	r7, sp, #0
 800d920:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	2b00      	cmp	r3, #0
 800d926:	d101      	bne.n	800d92c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d928:	2301      	movs	r3, #1
 800d92a:	e049      	b.n	800d9c0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d932:	b2db      	uxtb	r3, r3
 800d934:	2b00      	cmp	r3, #0
 800d936:	d106      	bne.n	800d946 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	2200      	movs	r2, #0
 800d93c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d940:	6878      	ldr	r0, [r7, #4]
 800d942:	f000 f841 	bl	800d9c8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	2202      	movs	r2, #2
 800d94a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	681a      	ldr	r2, [r3, #0]
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	3304      	adds	r3, #4
 800d956:	4619      	mov	r1, r3
 800d958:	4610      	mov	r0, r2
 800d95a:	f001 fa8b 	bl	800ee74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	2201      	movs	r2, #1
 800d962:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	2201      	movs	r2, #1
 800d96a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	2201      	movs	r2, #1
 800d972:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	2201      	movs	r2, #1
 800d97a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	2201      	movs	r2, #1
 800d982:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	2201      	movs	r2, #1
 800d98a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	2201      	movs	r2, #1
 800d992:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	2201      	movs	r2, #1
 800d99a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	2201      	movs	r2, #1
 800d9a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	2201      	movs	r2, #1
 800d9aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	2201      	movs	r2, #1
 800d9b2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	2201      	movs	r2, #1
 800d9ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d9be:	2300      	movs	r3, #0
}
 800d9c0:	4618      	mov	r0, r3
 800d9c2:	3708      	adds	r7, #8
 800d9c4:	46bd      	mov	sp, r7
 800d9c6:	bd80      	pop	{r7, pc}

0800d9c8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800d9c8:	b480      	push	{r7}
 800d9ca:	b083      	sub	sp, #12
 800d9cc:	af00      	add	r7, sp, #0
 800d9ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800d9d0:	bf00      	nop
 800d9d2:	370c      	adds	r7, #12
 800d9d4:	46bd      	mov	sp, r7
 800d9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9da:	4770      	bx	lr

0800d9dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d9dc:	b580      	push	{r7, lr}
 800d9de:	b084      	sub	sp, #16
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	6078      	str	r0, [r7, #4]
 800d9e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d9e6:	683b      	ldr	r3, [r7, #0]
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d109      	bne.n	800da00 <HAL_TIM_PWM_Start+0x24>
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d9f2:	b2db      	uxtb	r3, r3
 800d9f4:	2b01      	cmp	r3, #1
 800d9f6:	bf14      	ite	ne
 800d9f8:	2301      	movne	r3, #1
 800d9fa:	2300      	moveq	r3, #0
 800d9fc:	b2db      	uxtb	r3, r3
 800d9fe:	e03c      	b.n	800da7a <HAL_TIM_PWM_Start+0x9e>
 800da00:	683b      	ldr	r3, [r7, #0]
 800da02:	2b04      	cmp	r3, #4
 800da04:	d109      	bne.n	800da1a <HAL_TIM_PWM_Start+0x3e>
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800da0c:	b2db      	uxtb	r3, r3
 800da0e:	2b01      	cmp	r3, #1
 800da10:	bf14      	ite	ne
 800da12:	2301      	movne	r3, #1
 800da14:	2300      	moveq	r3, #0
 800da16:	b2db      	uxtb	r3, r3
 800da18:	e02f      	b.n	800da7a <HAL_TIM_PWM_Start+0x9e>
 800da1a:	683b      	ldr	r3, [r7, #0]
 800da1c:	2b08      	cmp	r3, #8
 800da1e:	d109      	bne.n	800da34 <HAL_TIM_PWM_Start+0x58>
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800da26:	b2db      	uxtb	r3, r3
 800da28:	2b01      	cmp	r3, #1
 800da2a:	bf14      	ite	ne
 800da2c:	2301      	movne	r3, #1
 800da2e:	2300      	moveq	r3, #0
 800da30:	b2db      	uxtb	r3, r3
 800da32:	e022      	b.n	800da7a <HAL_TIM_PWM_Start+0x9e>
 800da34:	683b      	ldr	r3, [r7, #0]
 800da36:	2b0c      	cmp	r3, #12
 800da38:	d109      	bne.n	800da4e <HAL_TIM_PWM_Start+0x72>
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800da40:	b2db      	uxtb	r3, r3
 800da42:	2b01      	cmp	r3, #1
 800da44:	bf14      	ite	ne
 800da46:	2301      	movne	r3, #1
 800da48:	2300      	moveq	r3, #0
 800da4a:	b2db      	uxtb	r3, r3
 800da4c:	e015      	b.n	800da7a <HAL_TIM_PWM_Start+0x9e>
 800da4e:	683b      	ldr	r3, [r7, #0]
 800da50:	2b10      	cmp	r3, #16
 800da52:	d109      	bne.n	800da68 <HAL_TIM_PWM_Start+0x8c>
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800da5a:	b2db      	uxtb	r3, r3
 800da5c:	2b01      	cmp	r3, #1
 800da5e:	bf14      	ite	ne
 800da60:	2301      	movne	r3, #1
 800da62:	2300      	moveq	r3, #0
 800da64:	b2db      	uxtb	r3, r3
 800da66:	e008      	b.n	800da7a <HAL_TIM_PWM_Start+0x9e>
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800da6e:	b2db      	uxtb	r3, r3
 800da70:	2b01      	cmp	r3, #1
 800da72:	bf14      	ite	ne
 800da74:	2301      	movne	r3, #1
 800da76:	2300      	moveq	r3, #0
 800da78:	b2db      	uxtb	r3, r3
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d001      	beq.n	800da82 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800da7e:	2301      	movs	r3, #1
 800da80:	e073      	b.n	800db6a <HAL_TIM_PWM_Start+0x18e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800da82:	683b      	ldr	r3, [r7, #0]
 800da84:	2b00      	cmp	r3, #0
 800da86:	d104      	bne.n	800da92 <HAL_TIM_PWM_Start+0xb6>
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	2202      	movs	r2, #2
 800da8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800da90:	e023      	b.n	800dada <HAL_TIM_PWM_Start+0xfe>
 800da92:	683b      	ldr	r3, [r7, #0]
 800da94:	2b04      	cmp	r3, #4
 800da96:	d104      	bne.n	800daa2 <HAL_TIM_PWM_Start+0xc6>
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	2202      	movs	r2, #2
 800da9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800daa0:	e01b      	b.n	800dada <HAL_TIM_PWM_Start+0xfe>
 800daa2:	683b      	ldr	r3, [r7, #0]
 800daa4:	2b08      	cmp	r3, #8
 800daa6:	d104      	bne.n	800dab2 <HAL_TIM_PWM_Start+0xd6>
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	2202      	movs	r2, #2
 800daac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800dab0:	e013      	b.n	800dada <HAL_TIM_PWM_Start+0xfe>
 800dab2:	683b      	ldr	r3, [r7, #0]
 800dab4:	2b0c      	cmp	r3, #12
 800dab6:	d104      	bne.n	800dac2 <HAL_TIM_PWM_Start+0xe6>
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	2202      	movs	r2, #2
 800dabc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800dac0:	e00b      	b.n	800dada <HAL_TIM_PWM_Start+0xfe>
 800dac2:	683b      	ldr	r3, [r7, #0]
 800dac4:	2b10      	cmp	r3, #16
 800dac6:	d104      	bne.n	800dad2 <HAL_TIM_PWM_Start+0xf6>
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	2202      	movs	r2, #2
 800dacc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800dad0:	e003      	b.n	800dada <HAL_TIM_PWM_Start+0xfe>
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	2202      	movs	r2, #2
 800dad6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	2201      	movs	r2, #1
 800dae0:	6839      	ldr	r1, [r7, #0]
 800dae2:	4618      	mov	r0, r3
 800dae4:	f002 f81a 	bl	800fb1c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	4a21      	ldr	r2, [pc, #132]	; (800db74 <HAL_TIM_PWM_Start+0x198>)
 800daee:	4293      	cmp	r3, r2
 800daf0:	d018      	beq.n	800db24 <HAL_TIM_PWM_Start+0x148>
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	4a20      	ldr	r2, [pc, #128]	; (800db78 <HAL_TIM_PWM_Start+0x19c>)
 800daf8:	4293      	cmp	r3, r2
 800dafa:	d013      	beq.n	800db24 <HAL_TIM_PWM_Start+0x148>
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	4a1e      	ldr	r2, [pc, #120]	; (800db7c <HAL_TIM_PWM_Start+0x1a0>)
 800db02:	4293      	cmp	r3, r2
 800db04:	d00e      	beq.n	800db24 <HAL_TIM_PWM_Start+0x148>
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	4a1d      	ldr	r2, [pc, #116]	; (800db80 <HAL_TIM_PWM_Start+0x1a4>)
 800db0c:	4293      	cmp	r3, r2
 800db0e:	d009      	beq.n	800db24 <HAL_TIM_PWM_Start+0x148>
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	4a1b      	ldr	r2, [pc, #108]	; (800db84 <HAL_TIM_PWM_Start+0x1a8>)
 800db16:	4293      	cmp	r3, r2
 800db18:	d004      	beq.n	800db24 <HAL_TIM_PWM_Start+0x148>
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	4a1a      	ldr	r2, [pc, #104]	; (800db88 <HAL_TIM_PWM_Start+0x1ac>)
 800db20:	4293      	cmp	r3, r2
 800db22:	d101      	bne.n	800db28 <HAL_TIM_PWM_Start+0x14c>
 800db24:	2301      	movs	r3, #1
 800db26:	e000      	b.n	800db2a <HAL_TIM_PWM_Start+0x14e>
 800db28:	2300      	movs	r3, #0
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d007      	beq.n	800db3e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800db3c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	689a      	ldr	r2, [r3, #8]
 800db44:	4b11      	ldr	r3, [pc, #68]	; (800db8c <HAL_TIM_PWM_Start+0x1b0>)
 800db46:	4013      	ands	r3, r2
 800db48:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	2b06      	cmp	r3, #6
 800db4e:	d00b      	beq.n	800db68 <HAL_TIM_PWM_Start+0x18c>
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800db56:	d007      	beq.n	800db68 <HAL_TIM_PWM_Start+0x18c>
  {
    __HAL_TIM_ENABLE(htim);
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	681a      	ldr	r2, [r3, #0]
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	f042 0201 	orr.w	r2, r2, #1
 800db66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800db68:	2300      	movs	r3, #0
}
 800db6a:	4618      	mov	r0, r3
 800db6c:	3710      	adds	r7, #16
 800db6e:	46bd      	mov	sp, r7
 800db70:	bd80      	pop	{r7, pc}
 800db72:	bf00      	nop
 800db74:	40012c00 	.word	0x40012c00
 800db78:	40013400 	.word	0x40013400
 800db7c:	40014000 	.word	0x40014000
 800db80:	40014400 	.word	0x40014400
 800db84:	40014800 	.word	0x40014800
 800db88:	40015000 	.word	0x40015000
 800db8c:	00010007 	.word	0x00010007

0800db90 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800db90:	b580      	push	{r7, lr}
 800db92:	b082      	sub	sp, #8
 800db94:	af00      	add	r7, sp, #0
 800db96:	6078      	str	r0, [r7, #4]
 800db98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	2200      	movs	r2, #0
 800dba0:	6839      	ldr	r1, [r7, #0]
 800dba2:	4618      	mov	r0, r3
 800dba4:	f001 ffba 	bl	800fb1c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	4a40      	ldr	r2, [pc, #256]	; (800dcb0 <HAL_TIM_PWM_Stop+0x120>)
 800dbae:	4293      	cmp	r3, r2
 800dbb0:	d018      	beq.n	800dbe4 <HAL_TIM_PWM_Stop+0x54>
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	4a3f      	ldr	r2, [pc, #252]	; (800dcb4 <HAL_TIM_PWM_Stop+0x124>)
 800dbb8:	4293      	cmp	r3, r2
 800dbba:	d013      	beq.n	800dbe4 <HAL_TIM_PWM_Stop+0x54>
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	4a3d      	ldr	r2, [pc, #244]	; (800dcb8 <HAL_TIM_PWM_Stop+0x128>)
 800dbc2:	4293      	cmp	r3, r2
 800dbc4:	d00e      	beq.n	800dbe4 <HAL_TIM_PWM_Stop+0x54>
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	4a3c      	ldr	r2, [pc, #240]	; (800dcbc <HAL_TIM_PWM_Stop+0x12c>)
 800dbcc:	4293      	cmp	r3, r2
 800dbce:	d009      	beq.n	800dbe4 <HAL_TIM_PWM_Stop+0x54>
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	4a3a      	ldr	r2, [pc, #232]	; (800dcc0 <HAL_TIM_PWM_Stop+0x130>)
 800dbd6:	4293      	cmp	r3, r2
 800dbd8:	d004      	beq.n	800dbe4 <HAL_TIM_PWM_Stop+0x54>
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	4a39      	ldr	r2, [pc, #228]	; (800dcc4 <HAL_TIM_PWM_Stop+0x134>)
 800dbe0:	4293      	cmp	r3, r2
 800dbe2:	d101      	bne.n	800dbe8 <HAL_TIM_PWM_Stop+0x58>
 800dbe4:	2301      	movs	r3, #1
 800dbe6:	e000      	b.n	800dbea <HAL_TIM_PWM_Stop+0x5a>
 800dbe8:	2300      	movs	r3, #0
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d017      	beq.n	800dc1e <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	6a1a      	ldr	r2, [r3, #32]
 800dbf4:	f241 1311 	movw	r3, #4369	; 0x1111
 800dbf8:	4013      	ands	r3, r2
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d10f      	bne.n	800dc1e <HAL_TIM_PWM_Stop+0x8e>
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	6a1a      	ldr	r2, [r3, #32]
 800dc04:	f244 4344 	movw	r3, #17476	; 0x4444
 800dc08:	4013      	ands	r3, r2
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d107      	bne.n	800dc1e <HAL_TIM_PWM_Stop+0x8e>
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800dc1c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	6a1a      	ldr	r2, [r3, #32]
 800dc24:	f241 1311 	movw	r3, #4369	; 0x1111
 800dc28:	4013      	ands	r3, r2
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d10f      	bne.n	800dc4e <HAL_TIM_PWM_Stop+0xbe>
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	6a1a      	ldr	r2, [r3, #32]
 800dc34:	f244 4344 	movw	r3, #17476	; 0x4444
 800dc38:	4013      	ands	r3, r2
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d107      	bne.n	800dc4e <HAL_TIM_PWM_Stop+0xbe>
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	681a      	ldr	r2, [r3, #0]
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	f022 0201 	bic.w	r2, r2, #1
 800dc4c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800dc4e:	683b      	ldr	r3, [r7, #0]
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d104      	bne.n	800dc5e <HAL_TIM_PWM_Stop+0xce>
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	2201      	movs	r2, #1
 800dc58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800dc5c:	e023      	b.n	800dca6 <HAL_TIM_PWM_Stop+0x116>
 800dc5e:	683b      	ldr	r3, [r7, #0]
 800dc60:	2b04      	cmp	r3, #4
 800dc62:	d104      	bne.n	800dc6e <HAL_TIM_PWM_Stop+0xde>
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	2201      	movs	r2, #1
 800dc68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800dc6c:	e01b      	b.n	800dca6 <HAL_TIM_PWM_Stop+0x116>
 800dc6e:	683b      	ldr	r3, [r7, #0]
 800dc70:	2b08      	cmp	r3, #8
 800dc72:	d104      	bne.n	800dc7e <HAL_TIM_PWM_Stop+0xee>
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	2201      	movs	r2, #1
 800dc78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800dc7c:	e013      	b.n	800dca6 <HAL_TIM_PWM_Stop+0x116>
 800dc7e:	683b      	ldr	r3, [r7, #0]
 800dc80:	2b0c      	cmp	r3, #12
 800dc82:	d104      	bne.n	800dc8e <HAL_TIM_PWM_Stop+0xfe>
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	2201      	movs	r2, #1
 800dc88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800dc8c:	e00b      	b.n	800dca6 <HAL_TIM_PWM_Stop+0x116>
 800dc8e:	683b      	ldr	r3, [r7, #0]
 800dc90:	2b10      	cmp	r3, #16
 800dc92:	d104      	bne.n	800dc9e <HAL_TIM_PWM_Stop+0x10e>
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	2201      	movs	r2, #1
 800dc98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800dc9c:	e003      	b.n	800dca6 <HAL_TIM_PWM_Stop+0x116>
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	2201      	movs	r2, #1
 800dca2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800dca6:	2300      	movs	r3, #0
}
 800dca8:	4618      	mov	r0, r3
 800dcaa:	3708      	adds	r7, #8
 800dcac:	46bd      	mov	sp, r7
 800dcae:	bd80      	pop	{r7, pc}
 800dcb0:	40012c00 	.word	0x40012c00
 800dcb4:	40013400 	.word	0x40013400
 800dcb8:	40014000 	.word	0x40014000
 800dcbc:	40014400 	.word	0x40014400
 800dcc0:	40014800 	.word	0x40014800
 800dcc4:	40015000 	.word	0x40015000

0800dcc8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800dcc8:	b580      	push	{r7, lr}
 800dcca:	b082      	sub	sp, #8
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d101      	bne.n	800dcda <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800dcd6:	2301      	movs	r3, #1
 800dcd8:	e049      	b.n	800dd6e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dce0:	b2db      	uxtb	r3, r3
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d106      	bne.n	800dcf4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	2200      	movs	r2, #0
 800dcea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800dcee:	6878      	ldr	r0, [r7, #4]
 800dcf0:	f000 f841 	bl	800dd76 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	2202      	movs	r2, #2
 800dcf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	681a      	ldr	r2, [r3, #0]
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	3304      	adds	r3, #4
 800dd04:	4619      	mov	r1, r3
 800dd06:	4610      	mov	r0, r2
 800dd08:	f001 f8b4 	bl	800ee74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	2201      	movs	r2, #1
 800dd10:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	2201      	movs	r2, #1
 800dd18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	2201      	movs	r2, #1
 800dd20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	2201      	movs	r2, #1
 800dd28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	2201      	movs	r2, #1
 800dd30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	2201      	movs	r2, #1
 800dd38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	2201      	movs	r2, #1
 800dd40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	2201      	movs	r2, #1
 800dd48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	2201      	movs	r2, #1
 800dd50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	2201      	movs	r2, #1
 800dd58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	2201      	movs	r2, #1
 800dd60:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	2201      	movs	r2, #1
 800dd68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800dd6c:	2300      	movs	r3, #0
}
 800dd6e:	4618      	mov	r0, r3
 800dd70:	3708      	adds	r7, #8
 800dd72:	46bd      	mov	sp, r7
 800dd74:	bd80      	pop	{r7, pc}

0800dd76 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800dd76:	b480      	push	{r7}
 800dd78:	b083      	sub	sp, #12
 800dd7a:	af00      	add	r7, sp, #0
 800dd7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800dd7e:	bf00      	nop
 800dd80:	370c      	adds	r7, #12
 800dd82:	46bd      	mov	sp, r7
 800dd84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd88:	4770      	bx	lr
	...

0800dd8c <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 800dd8c:	b580      	push	{r7, lr}
 800dd8e:	b086      	sub	sp, #24
 800dd90:	af00      	add	r7, sp, #0
 800dd92:	60f8      	str	r0, [r7, #12]
 800dd94:	60b9      	str	r1, [r7, #8]
 800dd96:	607a      	str	r2, [r7, #4]
 800dd98:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800dd9a:	68bb      	ldr	r3, [r7, #8]
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d104      	bne.n	800ddaa <HAL_TIM_IC_Start_DMA+0x1e>
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800dda6:	b2db      	uxtb	r3, r3
 800dda8:	e023      	b.n	800ddf2 <HAL_TIM_IC_Start_DMA+0x66>
 800ddaa:	68bb      	ldr	r3, [r7, #8]
 800ddac:	2b04      	cmp	r3, #4
 800ddae:	d104      	bne.n	800ddba <HAL_TIM_IC_Start_DMA+0x2e>
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ddb6:	b2db      	uxtb	r3, r3
 800ddb8:	e01b      	b.n	800ddf2 <HAL_TIM_IC_Start_DMA+0x66>
 800ddba:	68bb      	ldr	r3, [r7, #8]
 800ddbc:	2b08      	cmp	r3, #8
 800ddbe:	d104      	bne.n	800ddca <HAL_TIM_IC_Start_DMA+0x3e>
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ddc6:	b2db      	uxtb	r3, r3
 800ddc8:	e013      	b.n	800ddf2 <HAL_TIM_IC_Start_DMA+0x66>
 800ddca:	68bb      	ldr	r3, [r7, #8]
 800ddcc:	2b0c      	cmp	r3, #12
 800ddce:	d104      	bne.n	800ddda <HAL_TIM_IC_Start_DMA+0x4e>
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ddd6:	b2db      	uxtb	r3, r3
 800ddd8:	e00b      	b.n	800ddf2 <HAL_TIM_IC_Start_DMA+0x66>
 800ddda:	68bb      	ldr	r3, [r7, #8]
 800dddc:	2b10      	cmp	r3, #16
 800ddde:	d104      	bne.n	800ddea <HAL_TIM_IC_Start_DMA+0x5e>
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800dde6:	b2db      	uxtb	r3, r3
 800dde8:	e003      	b.n	800ddf2 <HAL_TIM_IC_Start_DMA+0x66>
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ddf0:	b2db      	uxtb	r3, r3
 800ddf2:	75fb      	strb	r3, [r7, #23]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800ddf4:	68bb      	ldr	r3, [r7, #8]
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d104      	bne.n	800de04 <HAL_TIM_IC_Start_DMA+0x78>
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800de00:	b2db      	uxtb	r3, r3
 800de02:	e013      	b.n	800de2c <HAL_TIM_IC_Start_DMA+0xa0>
 800de04:	68bb      	ldr	r3, [r7, #8]
 800de06:	2b04      	cmp	r3, #4
 800de08:	d104      	bne.n	800de14 <HAL_TIM_IC_Start_DMA+0x88>
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800de10:	b2db      	uxtb	r3, r3
 800de12:	e00b      	b.n	800de2c <HAL_TIM_IC_Start_DMA+0xa0>
 800de14:	68bb      	ldr	r3, [r7, #8]
 800de16:	2b08      	cmp	r3, #8
 800de18:	d104      	bne.n	800de24 <HAL_TIM_IC_Start_DMA+0x98>
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800de20:	b2db      	uxtb	r3, r3
 800de22:	e003      	b.n	800de2c <HAL_TIM_IC_Start_DMA+0xa0>
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800de2a:	b2db      	uxtb	r3, r3
 800de2c:	75bb      	strb	r3, [r7, #22]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 800de2e:	7dfb      	ldrb	r3, [r7, #23]
 800de30:	2b02      	cmp	r3, #2
 800de32:	d002      	beq.n	800de3a <HAL_TIM_IC_Start_DMA+0xae>
   || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 800de34:	7dbb      	ldrb	r3, [r7, #22]
 800de36:	2b02      	cmp	r3, #2
 800de38:	d101      	bne.n	800de3e <HAL_TIM_IC_Start_DMA+0xb2>
  {
    return HAL_BUSY;
 800de3a:	2302      	movs	r3, #2
 800de3c:	e128      	b.n	800e090 <HAL_TIM_IC_Start_DMA+0x304>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 800de3e:	7dfb      	ldrb	r3, [r7, #23]
 800de40:	2b01      	cmp	r3, #1
 800de42:	d153      	bne.n	800deec <HAL_TIM_IC_Start_DMA+0x160>
        && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 800de44:	7dbb      	ldrb	r3, [r7, #22]
 800de46:	2b01      	cmp	r3, #1
 800de48:	d150      	bne.n	800deec <HAL_TIM_IC_Start_DMA+0x160>
  {
    if ((pData == NULL) && (Length > 0U))
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d104      	bne.n	800de5a <HAL_TIM_IC_Start_DMA+0xce>
 800de50:	887b      	ldrh	r3, [r7, #2]
 800de52:	2b00      	cmp	r3, #0
 800de54:	d001      	beq.n	800de5a <HAL_TIM_IC_Start_DMA+0xce>
    {
      return HAL_ERROR;
 800de56:	2301      	movs	r3, #1
 800de58:	e11a      	b.n	800e090 <HAL_TIM_IC_Start_DMA+0x304>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800de5a:	68bb      	ldr	r3, [r7, #8]
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d104      	bne.n	800de6a <HAL_TIM_IC_Start_DMA+0xde>
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	2202      	movs	r2, #2
 800de64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800de68:	e023      	b.n	800deb2 <HAL_TIM_IC_Start_DMA+0x126>
 800de6a:	68bb      	ldr	r3, [r7, #8]
 800de6c:	2b04      	cmp	r3, #4
 800de6e:	d104      	bne.n	800de7a <HAL_TIM_IC_Start_DMA+0xee>
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	2202      	movs	r2, #2
 800de74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800de78:	e01b      	b.n	800deb2 <HAL_TIM_IC_Start_DMA+0x126>
 800de7a:	68bb      	ldr	r3, [r7, #8]
 800de7c:	2b08      	cmp	r3, #8
 800de7e:	d104      	bne.n	800de8a <HAL_TIM_IC_Start_DMA+0xfe>
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	2202      	movs	r2, #2
 800de84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800de88:	e013      	b.n	800deb2 <HAL_TIM_IC_Start_DMA+0x126>
 800de8a:	68bb      	ldr	r3, [r7, #8]
 800de8c:	2b0c      	cmp	r3, #12
 800de8e:	d104      	bne.n	800de9a <HAL_TIM_IC_Start_DMA+0x10e>
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	2202      	movs	r2, #2
 800de94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800de98:	e00b      	b.n	800deb2 <HAL_TIM_IC_Start_DMA+0x126>
 800de9a:	68bb      	ldr	r3, [r7, #8]
 800de9c:	2b10      	cmp	r3, #16
 800de9e:	d104      	bne.n	800deaa <HAL_TIM_IC_Start_DMA+0x11e>
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	2202      	movs	r2, #2
 800dea4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800dea8:	e003      	b.n	800deb2 <HAL_TIM_IC_Start_DMA+0x126>
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	2202      	movs	r2, #2
 800deae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800deb2:	68bb      	ldr	r3, [r7, #8]
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d104      	bne.n	800dec2 <HAL_TIM_IC_Start_DMA+0x136>
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	2202      	movs	r2, #2
 800debc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    if ((pData == NULL) && (Length > 0U))
 800dec0:	e016      	b.n	800def0 <HAL_TIM_IC_Start_DMA+0x164>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800dec2:	68bb      	ldr	r3, [r7, #8]
 800dec4:	2b04      	cmp	r3, #4
 800dec6:	d104      	bne.n	800ded2 <HAL_TIM_IC_Start_DMA+0x146>
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	2202      	movs	r2, #2
 800decc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ((pData == NULL) && (Length > 0U))
 800ded0:	e00e      	b.n	800def0 <HAL_TIM_IC_Start_DMA+0x164>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ded2:	68bb      	ldr	r3, [r7, #8]
 800ded4:	2b08      	cmp	r3, #8
 800ded6:	d104      	bne.n	800dee2 <HAL_TIM_IC_Start_DMA+0x156>
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	2202      	movs	r2, #2
 800dedc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
    if ((pData == NULL) && (Length > 0U))
 800dee0:	e006      	b.n	800def0 <HAL_TIM_IC_Start_DMA+0x164>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	2202      	movs	r2, #2
 800dee6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    if ((pData == NULL) && (Length > 0U))
 800deea:	e001      	b.n	800def0 <HAL_TIM_IC_Start_DMA+0x164>
    }
  }
  else
  {
    return HAL_ERROR;
 800deec:	2301      	movs	r3, #1
 800deee:	e0cf      	b.n	800e090 <HAL_TIM_IC_Start_DMA+0x304>
  }

  switch (Channel)
 800def0:	68bb      	ldr	r3, [r7, #8]
 800def2:	2b0c      	cmp	r3, #12
 800def4:	f200 80ae 	bhi.w	800e054 <HAL_TIM_IC_Start_DMA+0x2c8>
 800def8:	a201      	add	r2, pc, #4	; (adr r2, 800df00 <HAL_TIM_IC_Start_DMA+0x174>)
 800defa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800defe:	bf00      	nop
 800df00:	0800df35 	.word	0x0800df35
 800df04:	0800e055 	.word	0x0800e055
 800df08:	0800e055 	.word	0x0800e055
 800df0c:	0800e055 	.word	0x0800e055
 800df10:	0800df7d 	.word	0x0800df7d
 800df14:	0800e055 	.word	0x0800e055
 800df18:	0800e055 	.word	0x0800e055
 800df1c:	0800e055 	.word	0x0800e055
 800df20:	0800dfc5 	.word	0x0800dfc5
 800df24:	0800e055 	.word	0x0800e055
 800df28:	0800e055 	.word	0x0800e055
 800df2c:	0800e055 	.word	0x0800e055
 800df30:	0800e00d 	.word	0x0800e00d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df38:	4a57      	ldr	r2, [pc, #348]	; (800e098 <HAL_TIM_IC_Start_DMA+0x30c>)
 800df3a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df40:	4a56      	ldr	r2, [pc, #344]	; (800e09c <HAL_TIM_IC_Start_DMA+0x310>)
 800df42:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df48:	4a55      	ldr	r2, [pc, #340]	; (800e0a0 <HAL_TIM_IC_Start_DMA+0x314>)
 800df4a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length) != HAL_OK)
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	3334      	adds	r3, #52	; 0x34
 800df56:	4619      	mov	r1, r3
 800df58:	687a      	ldr	r2, [r7, #4]
 800df5a:	887b      	ldrh	r3, [r7, #2]
 800df5c:	f7fd fe3a 	bl	800bbd4 <HAL_DMA_Start_IT>
 800df60:	4603      	mov	r3, r0
 800df62:	2b00      	cmp	r3, #0
 800df64:	d001      	beq.n	800df6a <HAL_TIM_IC_Start_DMA+0x1de>
      {
        return HAL_ERROR;
 800df66:	2301      	movs	r3, #1
 800df68:	e092      	b.n	800e090 <HAL_TIM_IC_Start_DMA+0x304>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	68da      	ldr	r2, [r3, #12]
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800df78:	60da      	str	r2, [r3, #12]
      break;
 800df7a:	e06c      	b.n	800e056 <HAL_TIM_IC_Start_DMA+0x2ca>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df80:	4a45      	ldr	r2, [pc, #276]	; (800e098 <HAL_TIM_IC_Start_DMA+0x30c>)
 800df82:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df88:	4a44      	ldr	r2, [pc, #272]	; (800e09c <HAL_TIM_IC_Start_DMA+0x310>)
 800df8a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df90:	4a43      	ldr	r2, [pc, #268]	; (800e0a0 <HAL_TIM_IC_Start_DMA+0x314>)
 800df92:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData, Length) != HAL_OK)
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	3338      	adds	r3, #56	; 0x38
 800df9e:	4619      	mov	r1, r3
 800dfa0:	687a      	ldr	r2, [r7, #4]
 800dfa2:	887b      	ldrh	r3, [r7, #2]
 800dfa4:	f7fd fe16 	bl	800bbd4 <HAL_DMA_Start_IT>
 800dfa8:	4603      	mov	r3, r0
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d001      	beq.n	800dfb2 <HAL_TIM_IC_Start_DMA+0x226>
      {
        return HAL_ERROR;
 800dfae:	2301      	movs	r3, #1
 800dfb0:	e06e      	b.n	800e090 <HAL_TIM_IC_Start_DMA+0x304>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	68da      	ldr	r2, [r3, #12]
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800dfc0:	60da      	str	r2, [r3, #12]
      break;
 800dfc2:	e048      	b.n	800e056 <HAL_TIM_IC_Start_DMA+0x2ca>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfc8:	4a33      	ldr	r2, [pc, #204]	; (800e098 <HAL_TIM_IC_Start_DMA+0x30c>)
 800dfca:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfd0:	4a32      	ldr	r2, [pc, #200]	; (800e09c <HAL_TIM_IC_Start_DMA+0x310>)
 800dfd2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfd8:	4a31      	ldr	r2, [pc, #196]	; (800e0a0 <HAL_TIM_IC_Start_DMA+0x314>)
 800dfda:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData, Length) != HAL_OK)
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	333c      	adds	r3, #60	; 0x3c
 800dfe6:	4619      	mov	r1, r3
 800dfe8:	687a      	ldr	r2, [r7, #4]
 800dfea:	887b      	ldrh	r3, [r7, #2]
 800dfec:	f7fd fdf2 	bl	800bbd4 <HAL_DMA_Start_IT>
 800dff0:	4603      	mov	r3, r0
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d001      	beq.n	800dffa <HAL_TIM_IC_Start_DMA+0x26e>
      {
        return HAL_ERROR;
 800dff6:	2301      	movs	r3, #1
 800dff8:	e04a      	b.n	800e090 <HAL_TIM_IC_Start_DMA+0x304>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	68da      	ldr	r2, [r3, #12]
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e008:	60da      	str	r2, [r3, #12]
      break;
 800e00a:	e024      	b.n	800e056 <HAL_TIM_IC_Start_DMA+0x2ca>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e010:	4a21      	ldr	r2, [pc, #132]	; (800e098 <HAL_TIM_IC_Start_DMA+0x30c>)
 800e012:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e018:	4a20      	ldr	r2, [pc, #128]	; (800e09c <HAL_TIM_IC_Start_DMA+0x310>)
 800e01a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e020:	4a1f      	ldr	r2, [pc, #124]	; (800e0a0 <HAL_TIM_IC_Start_DMA+0x314>)
 800e022:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData, Length) != HAL_OK)
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	3340      	adds	r3, #64	; 0x40
 800e02e:	4619      	mov	r1, r3
 800e030:	687a      	ldr	r2, [r7, #4]
 800e032:	887b      	ldrh	r3, [r7, #2]
 800e034:	f7fd fdce 	bl	800bbd4 <HAL_DMA_Start_IT>
 800e038:	4603      	mov	r3, r0
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d001      	beq.n	800e042 <HAL_TIM_IC_Start_DMA+0x2b6>
      {
        return HAL_ERROR;
 800e03e:	2301      	movs	r3, #1
 800e040:	e026      	b.n	800e090 <HAL_TIM_IC_Start_DMA+0x304>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	68da      	ldr	r2, [r3, #12]
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e050:	60da      	str	r2, [r3, #12]
      break;
 800e052:	e000      	b.n	800e056 <HAL_TIM_IC_Start_DMA+0x2ca>
    }

    default:
      break;
 800e054:	bf00      	nop
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	2201      	movs	r2, #1
 800e05c:	68b9      	ldr	r1, [r7, #8]
 800e05e:	4618      	mov	r0, r3
 800e060:	f001 fd5c 	bl	800fb1c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	689a      	ldr	r2, [r3, #8]
 800e06a:	4b0e      	ldr	r3, [pc, #56]	; (800e0a4 <HAL_TIM_IC_Start_DMA+0x318>)
 800e06c:	4013      	ands	r3, r2
 800e06e:	613b      	str	r3, [r7, #16]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e070:	693b      	ldr	r3, [r7, #16]
 800e072:	2b06      	cmp	r3, #6
 800e074:	d00b      	beq.n	800e08e <HAL_TIM_IC_Start_DMA+0x302>
 800e076:	693b      	ldr	r3, [r7, #16]
 800e078:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e07c:	d007      	beq.n	800e08e <HAL_TIM_IC_Start_DMA+0x302>
  {
    __HAL_TIM_ENABLE(htim);
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	681a      	ldr	r2, [r3, #0]
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	f042 0201 	orr.w	r2, r2, #1
 800e08c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e08e:	2300      	movs	r3, #0
}
 800e090:	4618      	mov	r0, r3
 800e092:	3718      	adds	r7, #24
 800e094:	46bd      	mov	sp, r7
 800e096:	bd80      	pop	{r7, pc}
 800e098:	0800ed43 	.word	0x0800ed43
 800e09c:	0800ee0b 	.word	0x0800ee0b
 800e0a0:	0800ecb1 	.word	0x0800ecb1
 800e0a4:	00010007 	.word	0x00010007

0800e0a8 <HAL_TIM_IC_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e0a8:	b580      	push	{r7, lr}
 800e0aa:	b082      	sub	sp, #8
 800e0ac:	af00      	add	r7, sp, #0
 800e0ae:	6078      	str	r0, [r7, #4]
 800e0b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  switch (Channel)
 800e0b2:	683b      	ldr	r3, [r7, #0]
 800e0b4:	2b0c      	cmp	r3, #12
 800e0b6:	d855      	bhi.n	800e164 <HAL_TIM_IC_Stop_DMA+0xbc>
 800e0b8:	a201      	add	r2, pc, #4	; (adr r2, 800e0c0 <HAL_TIM_IC_Stop_DMA+0x18>)
 800e0ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0be:	bf00      	nop
 800e0c0:	0800e0f5 	.word	0x0800e0f5
 800e0c4:	0800e165 	.word	0x0800e165
 800e0c8:	0800e165 	.word	0x0800e165
 800e0cc:	0800e165 	.word	0x0800e165
 800e0d0:	0800e111 	.word	0x0800e111
 800e0d4:	0800e165 	.word	0x0800e165
 800e0d8:	0800e165 	.word	0x0800e165
 800e0dc:	0800e165 	.word	0x0800e165
 800e0e0:	0800e12d 	.word	0x0800e12d
 800e0e4:	0800e165 	.word	0x0800e165
 800e0e8:	0800e165 	.word	0x0800e165
 800e0ec:	0800e165 	.word	0x0800e165
 800e0f0:	0800e149 	.word	0x0800e149
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	68da      	ldr	r2, [r3, #12]
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800e102:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e108:	4618      	mov	r0, r3
 800e10a:	f7fd fe37 	bl	800bd7c <HAL_DMA_Abort_IT>
      break;
 800e10e:	e02a      	b.n	800e166 <HAL_TIM_IC_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	68da      	ldr	r2, [r3, #12]
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e11e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e124:	4618      	mov	r0, r3
 800e126:	f7fd fe29 	bl	800bd7c <HAL_DMA_Abort_IT>
      break;
 800e12a:	e01c      	b.n	800e166 <HAL_TIM_IC_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	68da      	ldr	r2, [r3, #12]
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e13a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e140:	4618      	mov	r0, r3
 800e142:	f7fd fe1b 	bl	800bd7c <HAL_DMA_Abort_IT>
      break;
 800e146:	e00e      	b.n	800e166 <HAL_TIM_IC_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	68da      	ldr	r2, [r3, #12]
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800e156:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e15c:	4618      	mov	r0, r3
 800e15e:	f7fd fe0d 	bl	800bd7c <HAL_DMA_Abort_IT>
      break;
 800e162:	e000      	b.n	800e166 <HAL_TIM_IC_Stop_DMA+0xbe>
    }

    default:
      break;
 800e164:	bf00      	nop
  }

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	2200      	movs	r2, #0
 800e16c:	6839      	ldr	r1, [r7, #0]
 800e16e:	4618      	mov	r0, r3
 800e170:	f001 fcd4 	bl	800fb1c <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	6a1a      	ldr	r2, [r3, #32]
 800e17a:	f241 1311 	movw	r3, #4369	; 0x1111
 800e17e:	4013      	ands	r3, r2
 800e180:	2b00      	cmp	r3, #0
 800e182:	d10f      	bne.n	800e1a4 <HAL_TIM_IC_Stop_DMA+0xfc>
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	6a1a      	ldr	r2, [r3, #32]
 800e18a:	f244 4344 	movw	r3, #17476	; 0x4444
 800e18e:	4013      	ands	r3, r2
 800e190:	2b00      	cmp	r3, #0
 800e192:	d107      	bne.n	800e1a4 <HAL_TIM_IC_Stop_DMA+0xfc>
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	681a      	ldr	r2, [r3, #0]
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	f022 0201 	bic.w	r2, r2, #1
 800e1a2:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800e1a4:	683b      	ldr	r3, [r7, #0]
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d104      	bne.n	800e1b4 <HAL_TIM_IC_Stop_DMA+0x10c>
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	2201      	movs	r2, #1
 800e1ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e1b2:	e023      	b.n	800e1fc <HAL_TIM_IC_Stop_DMA+0x154>
 800e1b4:	683b      	ldr	r3, [r7, #0]
 800e1b6:	2b04      	cmp	r3, #4
 800e1b8:	d104      	bne.n	800e1c4 <HAL_TIM_IC_Stop_DMA+0x11c>
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	2201      	movs	r2, #1
 800e1be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e1c2:	e01b      	b.n	800e1fc <HAL_TIM_IC_Stop_DMA+0x154>
 800e1c4:	683b      	ldr	r3, [r7, #0]
 800e1c6:	2b08      	cmp	r3, #8
 800e1c8:	d104      	bne.n	800e1d4 <HAL_TIM_IC_Stop_DMA+0x12c>
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	2201      	movs	r2, #1
 800e1ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e1d2:	e013      	b.n	800e1fc <HAL_TIM_IC_Stop_DMA+0x154>
 800e1d4:	683b      	ldr	r3, [r7, #0]
 800e1d6:	2b0c      	cmp	r3, #12
 800e1d8:	d104      	bne.n	800e1e4 <HAL_TIM_IC_Stop_DMA+0x13c>
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	2201      	movs	r2, #1
 800e1de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e1e2:	e00b      	b.n	800e1fc <HAL_TIM_IC_Stop_DMA+0x154>
 800e1e4:	683b      	ldr	r3, [r7, #0]
 800e1e6:	2b10      	cmp	r3, #16
 800e1e8:	d104      	bne.n	800e1f4 <HAL_TIM_IC_Stop_DMA+0x14c>
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	2201      	movs	r2, #1
 800e1ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e1f2:	e003      	b.n	800e1fc <HAL_TIM_IC_Stop_DMA+0x154>
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	2201      	movs	r2, #1
 800e1f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800e1fc:	683b      	ldr	r3, [r7, #0]
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d104      	bne.n	800e20c <HAL_TIM_IC_Stop_DMA+0x164>
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	2201      	movs	r2, #1
 800e206:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e20a:	e013      	b.n	800e234 <HAL_TIM_IC_Stop_DMA+0x18c>
 800e20c:	683b      	ldr	r3, [r7, #0]
 800e20e:	2b04      	cmp	r3, #4
 800e210:	d104      	bne.n	800e21c <HAL_TIM_IC_Stop_DMA+0x174>
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	2201      	movs	r2, #1
 800e216:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e21a:	e00b      	b.n	800e234 <HAL_TIM_IC_Stop_DMA+0x18c>
 800e21c:	683b      	ldr	r3, [r7, #0]
 800e21e:	2b08      	cmp	r3, #8
 800e220:	d104      	bne.n	800e22c <HAL_TIM_IC_Stop_DMA+0x184>
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	2201      	movs	r2, #1
 800e226:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e22a:	e003      	b.n	800e234 <HAL_TIM_IC_Stop_DMA+0x18c>
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	2201      	movs	r2, #1
 800e230:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 800e234:	2300      	movs	r3, #0
}
 800e236:	4618      	mov	r0, r3
 800e238:	3708      	adds	r7, #8
 800e23a:	46bd      	mov	sp, r7
 800e23c:	bd80      	pop	{r7, pc}
 800e23e:	bf00      	nop

0800e240 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800e240:	b580      	push	{r7, lr}
 800e242:	b086      	sub	sp, #24
 800e244:	af00      	add	r7, sp, #0
 800e246:	6078      	str	r0, [r7, #4]
 800e248:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d101      	bne.n	800e254 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800e250:	2301      	movs	r3, #1
 800e252:	e097      	b.n	800e384 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e25a:	b2db      	uxtb	r3, r3
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d106      	bne.n	800e26e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	2200      	movs	r2, #0
 800e264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800e268:	6878      	ldr	r0, [r7, #4]
 800e26a:	f7fa fc9d 	bl	8008ba8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	2202      	movs	r2, #2
 800e272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	689b      	ldr	r3, [r3, #8]
 800e27c:	687a      	ldr	r2, [r7, #4]
 800e27e:	6812      	ldr	r2, [r2, #0]
 800e280:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800e284:	f023 0307 	bic.w	r3, r3, #7
 800e288:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	681a      	ldr	r2, [r3, #0]
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	3304      	adds	r3, #4
 800e292:	4619      	mov	r1, r3
 800e294:	4610      	mov	r0, r2
 800e296:	f000 fded 	bl	800ee74 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	689b      	ldr	r3, [r3, #8]
 800e2a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	699b      	ldr	r3, [r3, #24]
 800e2a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	6a1b      	ldr	r3, [r3, #32]
 800e2b0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800e2b2:	683b      	ldr	r3, [r7, #0]
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	697a      	ldr	r2, [r7, #20]
 800e2b8:	4313      	orrs	r3, r2
 800e2ba:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800e2bc:	693b      	ldr	r3, [r7, #16]
 800e2be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e2c2:	f023 0303 	bic.w	r3, r3, #3
 800e2c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800e2c8:	683b      	ldr	r3, [r7, #0]
 800e2ca:	689a      	ldr	r2, [r3, #8]
 800e2cc:	683b      	ldr	r3, [r7, #0]
 800e2ce:	699b      	ldr	r3, [r3, #24]
 800e2d0:	021b      	lsls	r3, r3, #8
 800e2d2:	4313      	orrs	r3, r2
 800e2d4:	693a      	ldr	r2, [r7, #16]
 800e2d6:	4313      	orrs	r3, r2
 800e2d8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800e2da:	693b      	ldr	r3, [r7, #16]
 800e2dc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800e2e0:	f023 030c 	bic.w	r3, r3, #12
 800e2e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800e2e6:	693b      	ldr	r3, [r7, #16]
 800e2e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e2ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e2f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800e2f2:	683b      	ldr	r3, [r7, #0]
 800e2f4:	68da      	ldr	r2, [r3, #12]
 800e2f6:	683b      	ldr	r3, [r7, #0]
 800e2f8:	69db      	ldr	r3, [r3, #28]
 800e2fa:	021b      	lsls	r3, r3, #8
 800e2fc:	4313      	orrs	r3, r2
 800e2fe:	693a      	ldr	r2, [r7, #16]
 800e300:	4313      	orrs	r3, r2
 800e302:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800e304:	683b      	ldr	r3, [r7, #0]
 800e306:	691b      	ldr	r3, [r3, #16]
 800e308:	011a      	lsls	r2, r3, #4
 800e30a:	683b      	ldr	r3, [r7, #0]
 800e30c:	6a1b      	ldr	r3, [r3, #32]
 800e30e:	031b      	lsls	r3, r3, #12
 800e310:	4313      	orrs	r3, r2
 800e312:	693a      	ldr	r2, [r7, #16]
 800e314:	4313      	orrs	r3, r2
 800e316:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800e31e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800e326:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800e328:	683b      	ldr	r3, [r7, #0]
 800e32a:	685a      	ldr	r2, [r3, #4]
 800e32c:	683b      	ldr	r3, [r7, #0]
 800e32e:	695b      	ldr	r3, [r3, #20]
 800e330:	011b      	lsls	r3, r3, #4
 800e332:	4313      	orrs	r3, r2
 800e334:	68fa      	ldr	r2, [r7, #12]
 800e336:	4313      	orrs	r3, r2
 800e338:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	697a      	ldr	r2, [r7, #20]
 800e340:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	693a      	ldr	r2, [r7, #16]
 800e348:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	68fa      	ldr	r2, [r7, #12]
 800e350:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	2201      	movs	r2, #1
 800e356:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	2201      	movs	r2, #1
 800e35e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	2201      	movs	r2, #1
 800e366:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	2201      	movs	r2, #1
 800e36e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	2201      	movs	r2, #1
 800e376:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	2201      	movs	r2, #1
 800e37e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e382:	2300      	movs	r3, #0
}
 800e384:	4618      	mov	r0, r3
 800e386:	3718      	adds	r7, #24
 800e388:	46bd      	mov	sp, r7
 800e38a:	bd80      	pop	{r7, pc}

0800e38c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e38c:	b580      	push	{r7, lr}
 800e38e:	b082      	sub	sp, #8
 800e390:	af00      	add	r7, sp, #0
 800e392:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	691b      	ldr	r3, [r3, #16]
 800e39a:	f003 0302 	and.w	r3, r3, #2
 800e39e:	2b02      	cmp	r3, #2
 800e3a0:	d122      	bne.n	800e3e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	68db      	ldr	r3, [r3, #12]
 800e3a8:	f003 0302 	and.w	r3, r3, #2
 800e3ac:	2b02      	cmp	r3, #2
 800e3ae:	d11b      	bne.n	800e3e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	f06f 0202 	mvn.w	r2, #2
 800e3b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	2201      	movs	r2, #1
 800e3be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	699b      	ldr	r3, [r3, #24]
 800e3c6:	f003 0303 	and.w	r3, r3, #3
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d003      	beq.n	800e3d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e3ce:	6878      	ldr	r0, [r7, #4]
 800e3d0:	f7f8 f8ca 	bl	8006568 <HAL_TIM_IC_CaptureCallback>
 800e3d4:	e005      	b.n	800e3e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e3d6:	6878      	ldr	r0, [r7, #4]
 800e3d8:	f000 fc38 	bl	800ec4c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e3dc:	6878      	ldr	r0, [r7, #4]
 800e3de:	f000 fc49 	bl	800ec74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	2200      	movs	r2, #0
 800e3e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	691b      	ldr	r3, [r3, #16]
 800e3ee:	f003 0304 	and.w	r3, r3, #4
 800e3f2:	2b04      	cmp	r3, #4
 800e3f4:	d122      	bne.n	800e43c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	68db      	ldr	r3, [r3, #12]
 800e3fc:	f003 0304 	and.w	r3, r3, #4
 800e400:	2b04      	cmp	r3, #4
 800e402:	d11b      	bne.n	800e43c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	f06f 0204 	mvn.w	r2, #4
 800e40c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	2202      	movs	r2, #2
 800e412:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	699b      	ldr	r3, [r3, #24]
 800e41a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d003      	beq.n	800e42a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e422:	6878      	ldr	r0, [r7, #4]
 800e424:	f7f8 f8a0 	bl	8006568 <HAL_TIM_IC_CaptureCallback>
 800e428:	e005      	b.n	800e436 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e42a:	6878      	ldr	r0, [r7, #4]
 800e42c:	f000 fc0e 	bl	800ec4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e430:	6878      	ldr	r0, [r7, #4]
 800e432:	f000 fc1f 	bl	800ec74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	2200      	movs	r2, #0
 800e43a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	691b      	ldr	r3, [r3, #16]
 800e442:	f003 0308 	and.w	r3, r3, #8
 800e446:	2b08      	cmp	r3, #8
 800e448:	d122      	bne.n	800e490 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	68db      	ldr	r3, [r3, #12]
 800e450:	f003 0308 	and.w	r3, r3, #8
 800e454:	2b08      	cmp	r3, #8
 800e456:	d11b      	bne.n	800e490 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	f06f 0208 	mvn.w	r2, #8
 800e460:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	2204      	movs	r2, #4
 800e466:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	69db      	ldr	r3, [r3, #28]
 800e46e:	f003 0303 	and.w	r3, r3, #3
 800e472:	2b00      	cmp	r3, #0
 800e474:	d003      	beq.n	800e47e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e476:	6878      	ldr	r0, [r7, #4]
 800e478:	f7f8 f876 	bl	8006568 <HAL_TIM_IC_CaptureCallback>
 800e47c:	e005      	b.n	800e48a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e47e:	6878      	ldr	r0, [r7, #4]
 800e480:	f000 fbe4 	bl	800ec4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e484:	6878      	ldr	r0, [r7, #4]
 800e486:	f000 fbf5 	bl	800ec74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	2200      	movs	r2, #0
 800e48e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	691b      	ldr	r3, [r3, #16]
 800e496:	f003 0310 	and.w	r3, r3, #16
 800e49a:	2b10      	cmp	r3, #16
 800e49c:	d122      	bne.n	800e4e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	68db      	ldr	r3, [r3, #12]
 800e4a4:	f003 0310 	and.w	r3, r3, #16
 800e4a8:	2b10      	cmp	r3, #16
 800e4aa:	d11b      	bne.n	800e4e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	f06f 0210 	mvn.w	r2, #16
 800e4b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	2208      	movs	r2, #8
 800e4ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	69db      	ldr	r3, [r3, #28]
 800e4c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d003      	beq.n	800e4d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e4ca:	6878      	ldr	r0, [r7, #4]
 800e4cc:	f7f8 f84c 	bl	8006568 <HAL_TIM_IC_CaptureCallback>
 800e4d0:	e005      	b.n	800e4de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e4d2:	6878      	ldr	r0, [r7, #4]
 800e4d4:	f000 fbba 	bl	800ec4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e4d8:	6878      	ldr	r0, [r7, #4]
 800e4da:	f000 fbcb 	bl	800ec74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	2200      	movs	r2, #0
 800e4e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	691b      	ldr	r3, [r3, #16]
 800e4ea:	f003 0301 	and.w	r3, r3, #1
 800e4ee:	2b01      	cmp	r3, #1
 800e4f0:	d10e      	bne.n	800e510 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	68db      	ldr	r3, [r3, #12]
 800e4f8:	f003 0301 	and.w	r3, r3, #1
 800e4fc:	2b01      	cmp	r3, #1
 800e4fe:	d107      	bne.n	800e510 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	f06f 0201 	mvn.w	r2, #1
 800e508:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e50a:	6878      	ldr	r0, [r7, #4]
 800e50c:	f000 fb94 	bl	800ec38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	691b      	ldr	r3, [r3, #16]
 800e516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e51a:	2b80      	cmp	r3, #128	; 0x80
 800e51c:	d10e      	bne.n	800e53c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	68db      	ldr	r3, [r3, #12]
 800e524:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e528:	2b80      	cmp	r3, #128	; 0x80
 800e52a:	d107      	bne.n	800e53c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e534:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e536:	6878      	ldr	r0, [r7, #4]
 800e538:	f001 fc68 	bl	800fe0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	691b      	ldr	r3, [r3, #16]
 800e542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e546:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e54a:	d10e      	bne.n	800e56a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	68db      	ldr	r3, [r3, #12]
 800e552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e556:	2b80      	cmp	r3, #128	; 0x80
 800e558:	d107      	bne.n	800e56a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800e562:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e564:	6878      	ldr	r0, [r7, #4]
 800e566:	f001 fc5b 	bl	800fe20 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	691b      	ldr	r3, [r3, #16]
 800e570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e574:	2b40      	cmp	r3, #64	; 0x40
 800e576:	d10e      	bne.n	800e596 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	68db      	ldr	r3, [r3, #12]
 800e57e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e582:	2b40      	cmp	r3, #64	; 0x40
 800e584:	d107      	bne.n	800e596 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e58e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e590:	6878      	ldr	r0, [r7, #4]
 800e592:	f000 fb79 	bl	800ec88 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	691b      	ldr	r3, [r3, #16]
 800e59c:	f003 0320 	and.w	r3, r3, #32
 800e5a0:	2b20      	cmp	r3, #32
 800e5a2:	d10e      	bne.n	800e5c2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	68db      	ldr	r3, [r3, #12]
 800e5aa:	f003 0320 	and.w	r3, r3, #32
 800e5ae:	2b20      	cmp	r3, #32
 800e5b0:	d107      	bne.n	800e5c2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	f06f 0220 	mvn.w	r2, #32
 800e5ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e5bc:	6878      	ldr	r0, [r7, #4]
 800e5be:	f001 fc1b 	bl	800fdf8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	691b      	ldr	r3, [r3, #16]
 800e5c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e5cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e5d0:	d10f      	bne.n	800e5f2 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	68db      	ldr	r3, [r3, #12]
 800e5d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e5dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e5e0:	d107      	bne.n	800e5f2 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800e5ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800e5ec:	6878      	ldr	r0, [r7, #4]
 800e5ee:	f001 fc21 	bl	800fe34 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	691b      	ldr	r3, [r3, #16]
 800e5f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e5fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e600:	d10f      	bne.n	800e622 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	68db      	ldr	r3, [r3, #12]
 800e608:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e60c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e610:	d107      	bne.n	800e622 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800e61a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800e61c:	6878      	ldr	r0, [r7, #4]
 800e61e:	f001 fc13 	bl	800fe48 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	691b      	ldr	r3, [r3, #16]
 800e628:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e62c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e630:	d10f      	bne.n	800e652 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	68db      	ldr	r3, [r3, #12]
 800e638:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e63c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e640:	d107      	bne.n	800e652 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800e64a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800e64c:	6878      	ldr	r0, [r7, #4]
 800e64e:	f001 fc05 	bl	800fe5c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	691b      	ldr	r3, [r3, #16]
 800e658:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e65c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e660:	d10f      	bne.n	800e682 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	68db      	ldr	r3, [r3, #12]
 800e668:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e66c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e670:	d107      	bne.n	800e682 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800e67a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800e67c:	6878      	ldr	r0, [r7, #4]
 800e67e:	f001 fbf7 	bl	800fe70 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e682:	bf00      	nop
 800e684:	3708      	adds	r7, #8
 800e686:	46bd      	mov	sp, r7
 800e688:	bd80      	pop	{r7, pc}

0800e68a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800e68a:	b580      	push	{r7, lr}
 800e68c:	b084      	sub	sp, #16
 800e68e:	af00      	add	r7, sp, #0
 800e690:	60f8      	str	r0, [r7, #12]
 800e692:	60b9      	str	r1, [r7, #8]
 800e694:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e69c:	2b01      	cmp	r3, #1
 800e69e:	d101      	bne.n	800e6a4 <HAL_TIM_IC_ConfigChannel+0x1a>
 800e6a0:	2302      	movs	r3, #2
 800e6a2:	e082      	b.n	800e7aa <HAL_TIM_IC_ConfigChannel+0x120>
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	2201      	movs	r2, #1
 800e6a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d11b      	bne.n	800e6ea <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	6818      	ldr	r0, [r3, #0]
 800e6b6:	68bb      	ldr	r3, [r7, #8]
 800e6b8:	6819      	ldr	r1, [r3, #0]
 800e6ba:	68bb      	ldr	r3, [r7, #8]
 800e6bc:	685a      	ldr	r2, [r3, #4]
 800e6be:	68bb      	ldr	r3, [r7, #8]
 800e6c0:	68db      	ldr	r3, [r3, #12]
 800e6c2:	f001 f865 	bl	800f790 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	699a      	ldr	r2, [r3, #24]
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	f022 020c 	bic.w	r2, r2, #12
 800e6d4:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	6999      	ldr	r1, [r3, #24]
 800e6dc:	68bb      	ldr	r3, [r7, #8]
 800e6de:	689a      	ldr	r2, [r3, #8]
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	430a      	orrs	r2, r1
 800e6e6:	619a      	str	r2, [r3, #24]
 800e6e8:	e05a      	b.n	800e7a0 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	2b04      	cmp	r3, #4
 800e6ee:	d11c      	bne.n	800e72a <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	6818      	ldr	r0, [r3, #0]
 800e6f4:	68bb      	ldr	r3, [r7, #8]
 800e6f6:	6819      	ldr	r1, [r3, #0]
 800e6f8:	68bb      	ldr	r3, [r7, #8]
 800e6fa:	685a      	ldr	r2, [r3, #4]
 800e6fc:	68bb      	ldr	r3, [r7, #8]
 800e6fe:	68db      	ldr	r3, [r3, #12]
 800e700:	f001 f8e9 	bl	800f8d6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	699a      	ldr	r2, [r3, #24]
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800e712:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	6999      	ldr	r1, [r3, #24]
 800e71a:	68bb      	ldr	r3, [r7, #8]
 800e71c:	689b      	ldr	r3, [r3, #8]
 800e71e:	021a      	lsls	r2, r3, #8
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	430a      	orrs	r2, r1
 800e726:	619a      	str	r2, [r3, #24]
 800e728:	e03a      	b.n	800e7a0 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	2b08      	cmp	r3, #8
 800e72e:	d11b      	bne.n	800e768 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	6818      	ldr	r0, [r3, #0]
 800e734:	68bb      	ldr	r3, [r7, #8]
 800e736:	6819      	ldr	r1, [r3, #0]
 800e738:	68bb      	ldr	r3, [r7, #8]
 800e73a:	685a      	ldr	r2, [r3, #4]
 800e73c:	68bb      	ldr	r3, [r7, #8]
 800e73e:	68db      	ldr	r3, [r3, #12]
 800e740:	f001 f936 	bl	800f9b0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	69da      	ldr	r2, [r3, #28]
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	f022 020c 	bic.w	r2, r2, #12
 800e752:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	69d9      	ldr	r1, [r3, #28]
 800e75a:	68bb      	ldr	r3, [r7, #8]
 800e75c:	689a      	ldr	r2, [r3, #8]
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	430a      	orrs	r2, r1
 800e764:	61da      	str	r2, [r3, #28]
 800e766:	e01b      	b.n	800e7a0 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	6818      	ldr	r0, [r3, #0]
 800e76c:	68bb      	ldr	r3, [r7, #8]
 800e76e:	6819      	ldr	r1, [r3, #0]
 800e770:	68bb      	ldr	r3, [r7, #8]
 800e772:	685a      	ldr	r2, [r3, #4]
 800e774:	68bb      	ldr	r3, [r7, #8]
 800e776:	68db      	ldr	r3, [r3, #12]
 800e778:	f001 f956 	bl	800fa28 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	69da      	ldr	r2, [r3, #28]
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800e78a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	69d9      	ldr	r1, [r3, #28]
 800e792:	68bb      	ldr	r3, [r7, #8]
 800e794:	689b      	ldr	r3, [r3, #8]
 800e796:	021a      	lsls	r2, r3, #8
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	430a      	orrs	r2, r1
 800e79e:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	2200      	movs	r2, #0
 800e7a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e7a8:	2300      	movs	r3, #0
}
 800e7aa:	4618      	mov	r0, r3
 800e7ac:	3710      	adds	r7, #16
 800e7ae:	46bd      	mov	sp, r7
 800e7b0:	bd80      	pop	{r7, pc}
	...

0800e7b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e7b4:	b580      	push	{r7, lr}
 800e7b6:	b084      	sub	sp, #16
 800e7b8:	af00      	add	r7, sp, #0
 800e7ba:	60f8      	str	r0, [r7, #12]
 800e7bc:	60b9      	str	r1, [r7, #8]
 800e7be:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e7c6:	2b01      	cmp	r3, #1
 800e7c8:	d101      	bne.n	800e7ce <HAL_TIM_PWM_ConfigChannel+0x1a>
 800e7ca:	2302      	movs	r3, #2
 800e7cc:	e0fd      	b.n	800e9ca <HAL_TIM_PWM_ConfigChannel+0x216>
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	2201      	movs	r2, #1
 800e7d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	2b14      	cmp	r3, #20
 800e7da:	f200 80f0 	bhi.w	800e9be <HAL_TIM_PWM_ConfigChannel+0x20a>
 800e7de:	a201      	add	r2, pc, #4	; (adr r2, 800e7e4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800e7e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7e4:	0800e839 	.word	0x0800e839
 800e7e8:	0800e9bf 	.word	0x0800e9bf
 800e7ec:	0800e9bf 	.word	0x0800e9bf
 800e7f0:	0800e9bf 	.word	0x0800e9bf
 800e7f4:	0800e879 	.word	0x0800e879
 800e7f8:	0800e9bf 	.word	0x0800e9bf
 800e7fc:	0800e9bf 	.word	0x0800e9bf
 800e800:	0800e9bf 	.word	0x0800e9bf
 800e804:	0800e8bb 	.word	0x0800e8bb
 800e808:	0800e9bf 	.word	0x0800e9bf
 800e80c:	0800e9bf 	.word	0x0800e9bf
 800e810:	0800e9bf 	.word	0x0800e9bf
 800e814:	0800e8fb 	.word	0x0800e8fb
 800e818:	0800e9bf 	.word	0x0800e9bf
 800e81c:	0800e9bf 	.word	0x0800e9bf
 800e820:	0800e9bf 	.word	0x0800e9bf
 800e824:	0800e93d 	.word	0x0800e93d
 800e828:	0800e9bf 	.word	0x0800e9bf
 800e82c:	0800e9bf 	.word	0x0800e9bf
 800e830:	0800e9bf 	.word	0x0800e9bf
 800e834:	0800e97d 	.word	0x0800e97d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	68b9      	ldr	r1, [r7, #8]
 800e83e:	4618      	mov	r0, r3
 800e840:	f000 fbc0 	bl	800efc4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	699a      	ldr	r2, [r3, #24]
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	f042 0208 	orr.w	r2, r2, #8
 800e852:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	699a      	ldr	r2, [r3, #24]
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	f022 0204 	bic.w	r2, r2, #4
 800e862:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	6999      	ldr	r1, [r3, #24]
 800e86a:	68bb      	ldr	r3, [r7, #8]
 800e86c:	691a      	ldr	r2, [r3, #16]
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	430a      	orrs	r2, r1
 800e874:	619a      	str	r2, [r3, #24]
      break;
 800e876:	e0a3      	b.n	800e9c0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	68b9      	ldr	r1, [r7, #8]
 800e87e:	4618      	mov	r0, r3
 800e880:	f000 fc3a 	bl	800f0f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	699a      	ldr	r2, [r3, #24]
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e892:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	699a      	ldr	r2, [r3, #24]
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e8a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	6999      	ldr	r1, [r3, #24]
 800e8aa:	68bb      	ldr	r3, [r7, #8]
 800e8ac:	691b      	ldr	r3, [r3, #16]
 800e8ae:	021a      	lsls	r2, r3, #8
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	430a      	orrs	r2, r1
 800e8b6:	619a      	str	r2, [r3, #24]
      break;
 800e8b8:	e082      	b.n	800e9c0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	68b9      	ldr	r1, [r7, #8]
 800e8c0:	4618      	mov	r0, r3
 800e8c2:	f000 fcad 	bl	800f220 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	69da      	ldr	r2, [r3, #28]
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	f042 0208 	orr.w	r2, r2, #8
 800e8d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	69da      	ldr	r2, [r3, #28]
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	f022 0204 	bic.w	r2, r2, #4
 800e8e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	69d9      	ldr	r1, [r3, #28]
 800e8ec:	68bb      	ldr	r3, [r7, #8]
 800e8ee:	691a      	ldr	r2, [r3, #16]
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	430a      	orrs	r2, r1
 800e8f6:	61da      	str	r2, [r3, #28]
      break;
 800e8f8:	e062      	b.n	800e9c0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	68b9      	ldr	r1, [r7, #8]
 800e900:	4618      	mov	r0, r3
 800e902:	f000 fd1f 	bl	800f344 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	69da      	ldr	r2, [r3, #28]
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e914:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	69da      	ldr	r2, [r3, #28]
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e924:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	69d9      	ldr	r1, [r3, #28]
 800e92c:	68bb      	ldr	r3, [r7, #8]
 800e92e:	691b      	ldr	r3, [r3, #16]
 800e930:	021a      	lsls	r2, r3, #8
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	430a      	orrs	r2, r1
 800e938:	61da      	str	r2, [r3, #28]
      break;
 800e93a:	e041      	b.n	800e9c0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	68b9      	ldr	r1, [r7, #8]
 800e942:	4618      	mov	r0, r3
 800e944:	f000 fd92 	bl	800f46c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	f042 0208 	orr.w	r2, r2, #8
 800e956:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	f022 0204 	bic.w	r2, r2, #4
 800e966:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800e96e:	68bb      	ldr	r3, [r7, #8]
 800e970:	691a      	ldr	r2, [r3, #16]
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	430a      	orrs	r2, r1
 800e978:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800e97a:	e021      	b.n	800e9c0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	68b9      	ldr	r1, [r7, #8]
 800e982:	4618      	mov	r0, r3
 800e984:	f000 fddc 	bl	800f540 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e996:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e9a6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800e9ae:	68bb      	ldr	r3, [r7, #8]
 800e9b0:	691b      	ldr	r3, [r3, #16]
 800e9b2:	021a      	lsls	r2, r3, #8
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	430a      	orrs	r2, r1
 800e9ba:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800e9bc:	e000      	b.n	800e9c0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800e9be:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	2200      	movs	r2, #0
 800e9c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e9c8:	2300      	movs	r3, #0
}
 800e9ca:	4618      	mov	r0, r3
 800e9cc:	3710      	adds	r7, #16
 800e9ce:	46bd      	mov	sp, r7
 800e9d0:	bd80      	pop	{r7, pc}
 800e9d2:	bf00      	nop

0800e9d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e9d4:	b580      	push	{r7, lr}
 800e9d6:	b084      	sub	sp, #16
 800e9d8:	af00      	add	r7, sp, #0
 800e9da:	6078      	str	r0, [r7, #4]
 800e9dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e9e4:	2b01      	cmp	r3, #1
 800e9e6:	d101      	bne.n	800e9ec <HAL_TIM_ConfigClockSource+0x18>
 800e9e8:	2302      	movs	r3, #2
 800e9ea:	e0d2      	b.n	800eb92 <HAL_TIM_ConfigClockSource+0x1be>
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	2201      	movs	r2, #1
 800e9f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	2202      	movs	r2, #2
 800e9f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	689b      	ldr	r3, [r3, #8]
 800ea02:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800ea0a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800ea0e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ea16:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	68fa      	ldr	r2, [r7, #12]
 800ea1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ea20:	683b      	ldr	r3, [r7, #0]
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ea28:	f000 80a9 	beq.w	800eb7e <HAL_TIM_ConfigClockSource+0x1aa>
 800ea2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ea30:	d81a      	bhi.n	800ea68 <HAL_TIM_ConfigClockSource+0x94>
 800ea32:	2b30      	cmp	r3, #48	; 0x30
 800ea34:	f000 809a 	beq.w	800eb6c <HAL_TIM_ConfigClockSource+0x198>
 800ea38:	2b30      	cmp	r3, #48	; 0x30
 800ea3a:	d809      	bhi.n	800ea50 <HAL_TIM_ConfigClockSource+0x7c>
 800ea3c:	2b10      	cmp	r3, #16
 800ea3e:	f000 8095 	beq.w	800eb6c <HAL_TIM_ConfigClockSource+0x198>
 800ea42:	2b20      	cmp	r3, #32
 800ea44:	f000 8092 	beq.w	800eb6c <HAL_TIM_ConfigClockSource+0x198>
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	f000 808f 	beq.w	800eb6c <HAL_TIM_ConfigClockSource+0x198>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800ea4e:	e097      	b.n	800eb80 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800ea50:	2b50      	cmp	r3, #80	; 0x50
 800ea52:	d05b      	beq.n	800eb0c <HAL_TIM_ConfigClockSource+0x138>
 800ea54:	2b50      	cmp	r3, #80	; 0x50
 800ea56:	d802      	bhi.n	800ea5e <HAL_TIM_ConfigClockSource+0x8a>
 800ea58:	2b40      	cmp	r3, #64	; 0x40
 800ea5a:	d077      	beq.n	800eb4c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800ea5c:	e090      	b.n	800eb80 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800ea5e:	2b60      	cmp	r3, #96	; 0x60
 800ea60:	d064      	beq.n	800eb2c <HAL_TIM_ConfigClockSource+0x158>
 800ea62:	2b70      	cmp	r3, #112	; 0x70
 800ea64:	d028      	beq.n	800eab8 <HAL_TIM_ConfigClockSource+0xe4>
      break;
 800ea66:	e08b      	b.n	800eb80 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800ea68:	4a4c      	ldr	r2, [pc, #304]	; (800eb9c <HAL_TIM_ConfigClockSource+0x1c8>)
 800ea6a:	4293      	cmp	r3, r2
 800ea6c:	d07e      	beq.n	800eb6c <HAL_TIM_ConfigClockSource+0x198>
 800ea6e:	4a4b      	ldr	r2, [pc, #300]	; (800eb9c <HAL_TIM_ConfigClockSource+0x1c8>)
 800ea70:	4293      	cmp	r3, r2
 800ea72:	d810      	bhi.n	800ea96 <HAL_TIM_ConfigClockSource+0xc2>
 800ea74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ea78:	d078      	beq.n	800eb6c <HAL_TIM_ConfigClockSource+0x198>
 800ea7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ea7e:	d803      	bhi.n	800ea88 <HAL_TIM_ConfigClockSource+0xb4>
 800ea80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ea84:	d02f      	beq.n	800eae6 <HAL_TIM_ConfigClockSource+0x112>
      break;
 800ea86:	e07b      	b.n	800eb80 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800ea88:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ea8c:	d06e      	beq.n	800eb6c <HAL_TIM_ConfigClockSource+0x198>
 800ea8e:	4a44      	ldr	r2, [pc, #272]	; (800eba0 <HAL_TIM_ConfigClockSource+0x1cc>)
 800ea90:	4293      	cmp	r3, r2
 800ea92:	d06b      	beq.n	800eb6c <HAL_TIM_ConfigClockSource+0x198>
      break;
 800ea94:	e074      	b.n	800eb80 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800ea96:	4a43      	ldr	r2, [pc, #268]	; (800eba4 <HAL_TIM_ConfigClockSource+0x1d0>)
 800ea98:	4293      	cmp	r3, r2
 800ea9a:	d067      	beq.n	800eb6c <HAL_TIM_ConfigClockSource+0x198>
 800ea9c:	4a41      	ldr	r2, [pc, #260]	; (800eba4 <HAL_TIM_ConfigClockSource+0x1d0>)
 800ea9e:	4293      	cmp	r3, r2
 800eaa0:	d803      	bhi.n	800eaaa <HAL_TIM_ConfigClockSource+0xd6>
 800eaa2:	4a41      	ldr	r2, [pc, #260]	; (800eba8 <HAL_TIM_ConfigClockSource+0x1d4>)
 800eaa4:	4293      	cmp	r3, r2
 800eaa6:	d061      	beq.n	800eb6c <HAL_TIM_ConfigClockSource+0x198>
      break;
 800eaa8:	e06a      	b.n	800eb80 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800eaaa:	4a40      	ldr	r2, [pc, #256]	; (800ebac <HAL_TIM_ConfigClockSource+0x1d8>)
 800eaac:	4293      	cmp	r3, r2
 800eaae:	d05d      	beq.n	800eb6c <HAL_TIM_ConfigClockSource+0x198>
 800eab0:	4a3f      	ldr	r2, [pc, #252]	; (800ebb0 <HAL_TIM_ConfigClockSource+0x1dc>)
 800eab2:	4293      	cmp	r3, r2
 800eab4:	d05a      	beq.n	800eb6c <HAL_TIM_ConfigClockSource+0x198>
      break;
 800eab6:	e063      	b.n	800eb80 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	6818      	ldr	r0, [r3, #0]
 800eabc:	683b      	ldr	r3, [r7, #0]
 800eabe:	6899      	ldr	r1, [r3, #8]
 800eac0:	683b      	ldr	r3, [r7, #0]
 800eac2:	685a      	ldr	r2, [r3, #4]
 800eac4:	683b      	ldr	r3, [r7, #0]
 800eac6:	68db      	ldr	r3, [r3, #12]
 800eac8:	f001 f808 	bl	800fadc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	689b      	ldr	r3, [r3, #8]
 800ead2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800eada:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	68fa      	ldr	r2, [r7, #12]
 800eae2:	609a      	str	r2, [r3, #8]
      break;
 800eae4:	e04c      	b.n	800eb80 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	6818      	ldr	r0, [r3, #0]
 800eaea:	683b      	ldr	r3, [r7, #0]
 800eaec:	6899      	ldr	r1, [r3, #8]
 800eaee:	683b      	ldr	r3, [r7, #0]
 800eaf0:	685a      	ldr	r2, [r3, #4]
 800eaf2:	683b      	ldr	r3, [r7, #0]
 800eaf4:	68db      	ldr	r3, [r3, #12]
 800eaf6:	f000 fff1 	bl	800fadc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	689a      	ldr	r2, [r3, #8]
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800eb08:	609a      	str	r2, [r3, #8]
      break;
 800eb0a:	e039      	b.n	800eb80 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	6818      	ldr	r0, [r3, #0]
 800eb10:	683b      	ldr	r3, [r7, #0]
 800eb12:	6859      	ldr	r1, [r3, #4]
 800eb14:	683b      	ldr	r3, [r7, #0]
 800eb16:	68db      	ldr	r3, [r3, #12]
 800eb18:	461a      	mov	r2, r3
 800eb1a:	f000 fead 	bl	800f878 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	2150      	movs	r1, #80	; 0x50
 800eb24:	4618      	mov	r0, r3
 800eb26:	f000 ffbc 	bl	800faa2 <TIM_ITRx_SetConfig>
      break;
 800eb2a:	e029      	b.n	800eb80 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	6818      	ldr	r0, [r3, #0]
 800eb30:	683b      	ldr	r3, [r7, #0]
 800eb32:	6859      	ldr	r1, [r3, #4]
 800eb34:	683b      	ldr	r3, [r7, #0]
 800eb36:	68db      	ldr	r3, [r3, #12]
 800eb38:	461a      	mov	r2, r3
 800eb3a:	f000 ff09 	bl	800f950 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	2160      	movs	r1, #96	; 0x60
 800eb44:	4618      	mov	r0, r3
 800eb46:	f000 ffac 	bl	800faa2 <TIM_ITRx_SetConfig>
      break;
 800eb4a:	e019      	b.n	800eb80 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	6818      	ldr	r0, [r3, #0]
 800eb50:	683b      	ldr	r3, [r7, #0]
 800eb52:	6859      	ldr	r1, [r3, #4]
 800eb54:	683b      	ldr	r3, [r7, #0]
 800eb56:	68db      	ldr	r3, [r3, #12]
 800eb58:	461a      	mov	r2, r3
 800eb5a:	f000 fe8d 	bl	800f878 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	2140      	movs	r1, #64	; 0x40
 800eb64:	4618      	mov	r0, r3
 800eb66:	f000 ff9c 	bl	800faa2 <TIM_ITRx_SetConfig>
      break;
 800eb6a:	e009      	b.n	800eb80 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	681a      	ldr	r2, [r3, #0]
 800eb70:	683b      	ldr	r3, [r7, #0]
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	4619      	mov	r1, r3
 800eb76:	4610      	mov	r0, r2
 800eb78:	f000 ff93 	bl	800faa2 <TIM_ITRx_SetConfig>
      break;
 800eb7c:	e000      	b.n	800eb80 <HAL_TIM_ConfigClockSource+0x1ac>
      break;
 800eb7e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	2201      	movs	r2, #1
 800eb84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	2200      	movs	r2, #0
 800eb8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800eb90:	2300      	movs	r3, #0
}
 800eb92:	4618      	mov	r0, r3
 800eb94:	3710      	adds	r7, #16
 800eb96:	46bd      	mov	sp, r7
 800eb98:	bd80      	pop	{r7, pc}
 800eb9a:	bf00      	nop
 800eb9c:	00100030 	.word	0x00100030
 800eba0:	00100020 	.word	0x00100020
 800eba4:	00100050 	.word	0x00100050
 800eba8:	00100040 	.word	0x00100040
 800ebac:	00100060 	.word	0x00100060
 800ebb0:	00100070 	.word	0x00100070

0800ebb4 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800ebb4:	b580      	push	{r7, lr}
 800ebb6:	b082      	sub	sp, #8
 800ebb8:	af00      	add	r7, sp, #0
 800ebba:	6078      	str	r0, [r7, #4]
 800ebbc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ebc4:	2b01      	cmp	r3, #1
 800ebc6:	d101      	bne.n	800ebcc <HAL_TIM_SlaveConfigSynchro+0x18>
 800ebc8:	2302      	movs	r3, #2
 800ebca:	e031      	b.n	800ec30 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	2201      	movs	r2, #1
 800ebd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	2202      	movs	r2, #2
 800ebd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800ebdc:	6839      	ldr	r1, [r7, #0]
 800ebde:	6878      	ldr	r0, [r7, #4]
 800ebe0:	f000 fd1a 	bl	800f618 <TIM_SlaveTimer_SetConfig>
 800ebe4:	4603      	mov	r3, r0
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d009      	beq.n	800ebfe <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	2201      	movs	r2, #1
 800ebee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	2200      	movs	r2, #0
 800ebf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800ebfa:	2301      	movs	r3, #1
 800ebfc:	e018      	b.n	800ec30 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	68da      	ldr	r2, [r3, #12]
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ec0c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	68da      	ldr	r2, [r3, #12]
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ec1c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	2201      	movs	r2, #1
 800ec22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	2200      	movs	r2, #0
 800ec2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ec2e:	2300      	movs	r3, #0
}
 800ec30:	4618      	mov	r0, r3
 800ec32:	3708      	adds	r7, #8
 800ec34:	46bd      	mov	sp, r7
 800ec36:	bd80      	pop	{r7, pc}

0800ec38 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ec38:	b480      	push	{r7}
 800ec3a:	b083      	sub	sp, #12
 800ec3c:	af00      	add	r7, sp, #0
 800ec3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800ec40:	bf00      	nop
 800ec42:	370c      	adds	r7, #12
 800ec44:	46bd      	mov	sp, r7
 800ec46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec4a:	4770      	bx	lr

0800ec4c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ec4c:	b480      	push	{r7}
 800ec4e:	b083      	sub	sp, #12
 800ec50:	af00      	add	r7, sp, #0
 800ec52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ec54:	bf00      	nop
 800ec56:	370c      	adds	r7, #12
 800ec58:	46bd      	mov	sp, r7
 800ec5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec5e:	4770      	bx	lr

0800ec60 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800ec60:	b480      	push	{r7}
 800ec62:	b083      	sub	sp, #12
 800ec64:	af00      	add	r7, sp, #0
 800ec66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800ec68:	bf00      	nop
 800ec6a:	370c      	adds	r7, #12
 800ec6c:	46bd      	mov	sp, r7
 800ec6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec72:	4770      	bx	lr

0800ec74 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ec74:	b480      	push	{r7}
 800ec76:	b083      	sub	sp, #12
 800ec78:	af00      	add	r7, sp, #0
 800ec7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ec7c:	bf00      	nop
 800ec7e:	370c      	adds	r7, #12
 800ec80:	46bd      	mov	sp, r7
 800ec82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec86:	4770      	bx	lr

0800ec88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ec88:	b480      	push	{r7}
 800ec8a:	b083      	sub	sp, #12
 800ec8c:	af00      	add	r7, sp, #0
 800ec8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ec90:	bf00      	nop
 800ec92:	370c      	adds	r7, #12
 800ec94:	46bd      	mov	sp, r7
 800ec96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec9a:	4770      	bx	lr

0800ec9c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800ec9c:	b480      	push	{r7}
 800ec9e:	b083      	sub	sp, #12
 800eca0:	af00      	add	r7, sp, #0
 800eca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800eca4:	bf00      	nop
 800eca6:	370c      	adds	r7, #12
 800eca8:	46bd      	mov	sp, r7
 800ecaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecae:	4770      	bx	lr

0800ecb0 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800ecb0:	b580      	push	{r7, lr}
 800ecb2:	b084      	sub	sp, #16
 800ecb4:	af00      	add	r7, sp, #0
 800ecb6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecbc:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecc2:	687a      	ldr	r2, [r7, #4]
 800ecc4:	429a      	cmp	r2, r3
 800ecc6:	d107      	bne.n	800ecd8 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	2201      	movs	r2, #1
 800eccc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	2201      	movs	r2, #1
 800ecd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ecd6:	e02a      	b.n	800ed2e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecdc:	687a      	ldr	r2, [r7, #4]
 800ecde:	429a      	cmp	r2, r3
 800ece0:	d107      	bne.n	800ecf2 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	2202      	movs	r2, #2
 800ece6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	2201      	movs	r2, #1
 800ecec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ecf0:	e01d      	b.n	800ed2e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecf6:	687a      	ldr	r2, [r7, #4]
 800ecf8:	429a      	cmp	r2, r3
 800ecfa:	d107      	bne.n	800ed0c <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	2204      	movs	r2, #4
 800ed00:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	2201      	movs	r2, #1
 800ed06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ed0a:	e010      	b.n	800ed2e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed10:	687a      	ldr	r2, [r7, #4]
 800ed12:	429a      	cmp	r2, r3
 800ed14:	d107      	bne.n	800ed26 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	2208      	movs	r2, #8
 800ed1a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	2201      	movs	r2, #1
 800ed20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ed24:	e003      	b.n	800ed2e <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	2201      	movs	r2, #1
 800ed2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800ed2e:	68f8      	ldr	r0, [r7, #12]
 800ed30:	f7ff ffb4 	bl	800ec9c <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	2200      	movs	r2, #0
 800ed38:	771a      	strb	r2, [r3, #28]
}
 800ed3a:	bf00      	nop
 800ed3c:	3710      	adds	r7, #16
 800ed3e:	46bd      	mov	sp, r7
 800ed40:	bd80      	pop	{r7, pc}

0800ed42 <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 800ed42:	b580      	push	{r7, lr}
 800ed44:	b084      	sub	sp, #16
 800ed46:	af00      	add	r7, sp, #0
 800ed48:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed4e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed54:	687a      	ldr	r2, [r7, #4]
 800ed56:	429a      	cmp	r2, r3
 800ed58:	d10f      	bne.n	800ed7a <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ed5a:	68fb      	ldr	r3, [r7, #12]
 800ed5c:	2201      	movs	r2, #1
 800ed5e:	771a      	strb	r2, [r3, #28]
    
    if (hdma->Init.Mode == DMA_NORMAL)
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	69db      	ldr	r3, [r3, #28]
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d146      	bne.n	800edf6 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	2201      	movs	r2, #1
 800ed6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	2201      	movs	r2, #1
 800ed74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ed78:	e03d      	b.n	800edf6 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed7e:	687a      	ldr	r2, [r7, #4]
 800ed80:	429a      	cmp	r2, r3
 800ed82:	d10f      	bne.n	800eda4 <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	2202      	movs	r2, #2
 800ed88:	771a      	strb	r2, [r3, #28]
    
    if (hdma->Init.Mode == DMA_NORMAL)
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	69db      	ldr	r3, [r3, #28]
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d131      	bne.n	800edf6 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	2201      	movs	r2, #1
 800ed96:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	2201      	movs	r2, #1
 800ed9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800eda2:	e028      	b.n	800edf6 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eda8:	687a      	ldr	r2, [r7, #4]
 800edaa:	429a      	cmp	r2, r3
 800edac:	d10f      	bne.n	800edce <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	2204      	movs	r2, #4
 800edb2:	771a      	strb	r2, [r3, #28]
    
    if (hdma->Init.Mode == DMA_NORMAL)
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	69db      	ldr	r3, [r3, #28]
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d11c      	bne.n	800edf6 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	2201      	movs	r2, #1
 800edc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	2201      	movs	r2, #1
 800edc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800edcc:	e013      	b.n	800edf6 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800edd2:	687a      	ldr	r2, [r7, #4]
 800edd4:	429a      	cmp	r2, r3
 800edd6:	d10e      	bne.n	800edf6 <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	2208      	movs	r2, #8
 800eddc:	771a      	strb	r2, [r3, #28]
    
    if (hdma->Init.Mode == DMA_NORMAL)
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	69db      	ldr	r3, [r3, #28]
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d107      	bne.n	800edf6 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	2201      	movs	r2, #1
 800edea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	2201      	movs	r2, #1
 800edf2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 800edf6:	68f8      	ldr	r0, [r7, #12]
 800edf8:	f7f7 fbb6 	bl	8006568 <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	2200      	movs	r2, #0
 800ee00:	771a      	strb	r2, [r3, #28]
}
 800ee02:	bf00      	nop
 800ee04:	3710      	adds	r7, #16
 800ee06:	46bd      	mov	sp, r7
 800ee08:	bd80      	pop	{r7, pc}

0800ee0a <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ee0a:	b580      	push	{r7, lr}
 800ee0c:	b084      	sub	sp, #16
 800ee0e:	af00      	add	r7, sp, #0
 800ee10:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee16:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee1c:	687a      	ldr	r2, [r7, #4]
 800ee1e:	429a      	cmp	r2, r3
 800ee20:	d103      	bne.n	800ee2a <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	2201      	movs	r2, #1
 800ee26:	771a      	strb	r2, [r3, #28]
 800ee28:	e019      	b.n	800ee5e <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee2e:	687a      	ldr	r2, [r7, #4]
 800ee30:	429a      	cmp	r2, r3
 800ee32:	d103      	bne.n	800ee3c <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	2202      	movs	r2, #2
 800ee38:	771a      	strb	r2, [r3, #28]
 800ee3a:	e010      	b.n	800ee5e <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee40:	687a      	ldr	r2, [r7, #4]
 800ee42:	429a      	cmp	r2, r3
 800ee44:	d103      	bne.n	800ee4e <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	2204      	movs	r2, #4
 800ee4a:	771a      	strb	r2, [r3, #28]
 800ee4c:	e007      	b.n	800ee5e <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee52:	687a      	ldr	r2, [r7, #4]
 800ee54:	429a      	cmp	r2, r3
 800ee56:	d102      	bne.n	800ee5e <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	2208      	movs	r2, #8
 800ee5c:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800ee5e:	68f8      	ldr	r0, [r7, #12]
 800ee60:	f7ff fefe 	bl	800ec60 <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	2200      	movs	r2, #0
 800ee68:	771a      	strb	r2, [r3, #28]
}
 800ee6a:	bf00      	nop
 800ee6c:	3710      	adds	r7, #16
 800ee6e:	46bd      	mov	sp, r7
 800ee70:	bd80      	pop	{r7, pc}
	...

0800ee74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ee74:	b480      	push	{r7}
 800ee76:	b085      	sub	sp, #20
 800ee78:	af00      	add	r7, sp, #0
 800ee7a:	6078      	str	r0, [r7, #4]
 800ee7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	4a46      	ldr	r2, [pc, #280]	; (800efa0 <TIM_Base_SetConfig+0x12c>)
 800ee88:	4293      	cmp	r3, r2
 800ee8a:	d017      	beq.n	800eebc <TIM_Base_SetConfig+0x48>
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ee92:	d013      	beq.n	800eebc <TIM_Base_SetConfig+0x48>
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	4a43      	ldr	r2, [pc, #268]	; (800efa4 <TIM_Base_SetConfig+0x130>)
 800ee98:	4293      	cmp	r3, r2
 800ee9a:	d00f      	beq.n	800eebc <TIM_Base_SetConfig+0x48>
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	4a42      	ldr	r2, [pc, #264]	; (800efa8 <TIM_Base_SetConfig+0x134>)
 800eea0:	4293      	cmp	r3, r2
 800eea2:	d00b      	beq.n	800eebc <TIM_Base_SetConfig+0x48>
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	4a41      	ldr	r2, [pc, #260]	; (800efac <TIM_Base_SetConfig+0x138>)
 800eea8:	4293      	cmp	r3, r2
 800eeaa:	d007      	beq.n	800eebc <TIM_Base_SetConfig+0x48>
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	4a40      	ldr	r2, [pc, #256]	; (800efb0 <TIM_Base_SetConfig+0x13c>)
 800eeb0:	4293      	cmp	r3, r2
 800eeb2:	d003      	beq.n	800eebc <TIM_Base_SetConfig+0x48>
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	4a3f      	ldr	r2, [pc, #252]	; (800efb4 <TIM_Base_SetConfig+0x140>)
 800eeb8:	4293      	cmp	r3, r2
 800eeba:	d108      	bne.n	800eece <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eec2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800eec4:	683b      	ldr	r3, [r7, #0]
 800eec6:	685b      	ldr	r3, [r3, #4]
 800eec8:	68fa      	ldr	r2, [r7, #12]
 800eeca:	4313      	orrs	r3, r2
 800eecc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	4a33      	ldr	r2, [pc, #204]	; (800efa0 <TIM_Base_SetConfig+0x12c>)
 800eed2:	4293      	cmp	r3, r2
 800eed4:	d023      	beq.n	800ef1e <TIM_Base_SetConfig+0xaa>
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eedc:	d01f      	beq.n	800ef1e <TIM_Base_SetConfig+0xaa>
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	4a30      	ldr	r2, [pc, #192]	; (800efa4 <TIM_Base_SetConfig+0x130>)
 800eee2:	4293      	cmp	r3, r2
 800eee4:	d01b      	beq.n	800ef1e <TIM_Base_SetConfig+0xaa>
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	4a2f      	ldr	r2, [pc, #188]	; (800efa8 <TIM_Base_SetConfig+0x134>)
 800eeea:	4293      	cmp	r3, r2
 800eeec:	d017      	beq.n	800ef1e <TIM_Base_SetConfig+0xaa>
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	4a2e      	ldr	r2, [pc, #184]	; (800efac <TIM_Base_SetConfig+0x138>)
 800eef2:	4293      	cmp	r3, r2
 800eef4:	d013      	beq.n	800ef1e <TIM_Base_SetConfig+0xaa>
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	4a2d      	ldr	r2, [pc, #180]	; (800efb0 <TIM_Base_SetConfig+0x13c>)
 800eefa:	4293      	cmp	r3, r2
 800eefc:	d00f      	beq.n	800ef1e <TIM_Base_SetConfig+0xaa>
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	4a2d      	ldr	r2, [pc, #180]	; (800efb8 <TIM_Base_SetConfig+0x144>)
 800ef02:	4293      	cmp	r3, r2
 800ef04:	d00b      	beq.n	800ef1e <TIM_Base_SetConfig+0xaa>
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	4a2c      	ldr	r2, [pc, #176]	; (800efbc <TIM_Base_SetConfig+0x148>)
 800ef0a:	4293      	cmp	r3, r2
 800ef0c:	d007      	beq.n	800ef1e <TIM_Base_SetConfig+0xaa>
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	4a2b      	ldr	r2, [pc, #172]	; (800efc0 <TIM_Base_SetConfig+0x14c>)
 800ef12:	4293      	cmp	r3, r2
 800ef14:	d003      	beq.n	800ef1e <TIM_Base_SetConfig+0xaa>
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	4a26      	ldr	r2, [pc, #152]	; (800efb4 <TIM_Base_SetConfig+0x140>)
 800ef1a:	4293      	cmp	r3, r2
 800ef1c:	d108      	bne.n	800ef30 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ef24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ef26:	683b      	ldr	r3, [r7, #0]
 800ef28:	68db      	ldr	r3, [r3, #12]
 800ef2a:	68fa      	ldr	r2, [r7, #12]
 800ef2c:	4313      	orrs	r3, r2
 800ef2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ef36:	683b      	ldr	r3, [r7, #0]
 800ef38:	695b      	ldr	r3, [r3, #20]
 800ef3a:	4313      	orrs	r3, r2
 800ef3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	68fa      	ldr	r2, [r7, #12]
 800ef42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ef44:	683b      	ldr	r3, [r7, #0]
 800ef46:	689a      	ldr	r2, [r3, #8]
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ef4c:	683b      	ldr	r3, [r7, #0]
 800ef4e:	681a      	ldr	r2, [r3, #0]
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	4a12      	ldr	r2, [pc, #72]	; (800efa0 <TIM_Base_SetConfig+0x12c>)
 800ef58:	4293      	cmp	r3, r2
 800ef5a:	d013      	beq.n	800ef84 <TIM_Base_SetConfig+0x110>
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	4a14      	ldr	r2, [pc, #80]	; (800efb0 <TIM_Base_SetConfig+0x13c>)
 800ef60:	4293      	cmp	r3, r2
 800ef62:	d00f      	beq.n	800ef84 <TIM_Base_SetConfig+0x110>
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	4a14      	ldr	r2, [pc, #80]	; (800efb8 <TIM_Base_SetConfig+0x144>)
 800ef68:	4293      	cmp	r3, r2
 800ef6a:	d00b      	beq.n	800ef84 <TIM_Base_SetConfig+0x110>
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	4a13      	ldr	r2, [pc, #76]	; (800efbc <TIM_Base_SetConfig+0x148>)
 800ef70:	4293      	cmp	r3, r2
 800ef72:	d007      	beq.n	800ef84 <TIM_Base_SetConfig+0x110>
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	4a12      	ldr	r2, [pc, #72]	; (800efc0 <TIM_Base_SetConfig+0x14c>)
 800ef78:	4293      	cmp	r3, r2
 800ef7a:	d003      	beq.n	800ef84 <TIM_Base_SetConfig+0x110>
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	4a0d      	ldr	r2, [pc, #52]	; (800efb4 <TIM_Base_SetConfig+0x140>)
 800ef80:	4293      	cmp	r3, r2
 800ef82:	d103      	bne.n	800ef8c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ef84:	683b      	ldr	r3, [r7, #0]
 800ef86:	691a      	ldr	r2, [r3, #16]
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	2201      	movs	r2, #1
 800ef90:	615a      	str	r2, [r3, #20]
}
 800ef92:	bf00      	nop
 800ef94:	3714      	adds	r7, #20
 800ef96:	46bd      	mov	sp, r7
 800ef98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef9c:	4770      	bx	lr
 800ef9e:	bf00      	nop
 800efa0:	40012c00 	.word	0x40012c00
 800efa4:	40000400 	.word	0x40000400
 800efa8:	40000800 	.word	0x40000800
 800efac:	40000c00 	.word	0x40000c00
 800efb0:	40013400 	.word	0x40013400
 800efb4:	40015000 	.word	0x40015000
 800efb8:	40014000 	.word	0x40014000
 800efbc:	40014400 	.word	0x40014400
 800efc0:	40014800 	.word	0x40014800

0800efc4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800efc4:	b480      	push	{r7}
 800efc6:	b087      	sub	sp, #28
 800efc8:	af00      	add	r7, sp, #0
 800efca:	6078      	str	r0, [r7, #4]
 800efcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	6a1b      	ldr	r3, [r3, #32]
 800efd2:	f023 0201 	bic.w	r2, r3, #1
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	6a1b      	ldr	r3, [r3, #32]
 800efde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	685b      	ldr	r3, [r3, #4]
 800efe4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	699b      	ldr	r3, [r3, #24]
 800efea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800eff2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eff6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	f023 0303 	bic.w	r3, r3, #3
 800effe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f000:	683b      	ldr	r3, [r7, #0]
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	68fa      	ldr	r2, [r7, #12]
 800f006:	4313      	orrs	r3, r2
 800f008:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f00a:	697b      	ldr	r3, [r7, #20]
 800f00c:	f023 0302 	bic.w	r3, r3, #2
 800f010:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f012:	683b      	ldr	r3, [r7, #0]
 800f014:	689b      	ldr	r3, [r3, #8]
 800f016:	697a      	ldr	r2, [r7, #20]
 800f018:	4313      	orrs	r3, r2
 800f01a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	4a30      	ldr	r2, [pc, #192]	; (800f0e0 <TIM_OC1_SetConfig+0x11c>)
 800f020:	4293      	cmp	r3, r2
 800f022:	d013      	beq.n	800f04c <TIM_OC1_SetConfig+0x88>
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	4a2f      	ldr	r2, [pc, #188]	; (800f0e4 <TIM_OC1_SetConfig+0x120>)
 800f028:	4293      	cmp	r3, r2
 800f02a:	d00f      	beq.n	800f04c <TIM_OC1_SetConfig+0x88>
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	4a2e      	ldr	r2, [pc, #184]	; (800f0e8 <TIM_OC1_SetConfig+0x124>)
 800f030:	4293      	cmp	r3, r2
 800f032:	d00b      	beq.n	800f04c <TIM_OC1_SetConfig+0x88>
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	4a2d      	ldr	r2, [pc, #180]	; (800f0ec <TIM_OC1_SetConfig+0x128>)
 800f038:	4293      	cmp	r3, r2
 800f03a:	d007      	beq.n	800f04c <TIM_OC1_SetConfig+0x88>
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	4a2c      	ldr	r2, [pc, #176]	; (800f0f0 <TIM_OC1_SetConfig+0x12c>)
 800f040:	4293      	cmp	r3, r2
 800f042:	d003      	beq.n	800f04c <TIM_OC1_SetConfig+0x88>
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	4a2b      	ldr	r2, [pc, #172]	; (800f0f4 <TIM_OC1_SetConfig+0x130>)
 800f048:	4293      	cmp	r3, r2
 800f04a:	d10c      	bne.n	800f066 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f04c:	697b      	ldr	r3, [r7, #20]
 800f04e:	f023 0308 	bic.w	r3, r3, #8
 800f052:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f054:	683b      	ldr	r3, [r7, #0]
 800f056:	68db      	ldr	r3, [r3, #12]
 800f058:	697a      	ldr	r2, [r7, #20]
 800f05a:	4313      	orrs	r3, r2
 800f05c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f05e:	697b      	ldr	r3, [r7, #20]
 800f060:	f023 0304 	bic.w	r3, r3, #4
 800f064:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	4a1d      	ldr	r2, [pc, #116]	; (800f0e0 <TIM_OC1_SetConfig+0x11c>)
 800f06a:	4293      	cmp	r3, r2
 800f06c:	d013      	beq.n	800f096 <TIM_OC1_SetConfig+0xd2>
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	4a1c      	ldr	r2, [pc, #112]	; (800f0e4 <TIM_OC1_SetConfig+0x120>)
 800f072:	4293      	cmp	r3, r2
 800f074:	d00f      	beq.n	800f096 <TIM_OC1_SetConfig+0xd2>
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	4a1b      	ldr	r2, [pc, #108]	; (800f0e8 <TIM_OC1_SetConfig+0x124>)
 800f07a:	4293      	cmp	r3, r2
 800f07c:	d00b      	beq.n	800f096 <TIM_OC1_SetConfig+0xd2>
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	4a1a      	ldr	r2, [pc, #104]	; (800f0ec <TIM_OC1_SetConfig+0x128>)
 800f082:	4293      	cmp	r3, r2
 800f084:	d007      	beq.n	800f096 <TIM_OC1_SetConfig+0xd2>
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	4a19      	ldr	r2, [pc, #100]	; (800f0f0 <TIM_OC1_SetConfig+0x12c>)
 800f08a:	4293      	cmp	r3, r2
 800f08c:	d003      	beq.n	800f096 <TIM_OC1_SetConfig+0xd2>
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	4a18      	ldr	r2, [pc, #96]	; (800f0f4 <TIM_OC1_SetConfig+0x130>)
 800f092:	4293      	cmp	r3, r2
 800f094:	d111      	bne.n	800f0ba <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f096:	693b      	ldr	r3, [r7, #16]
 800f098:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f09c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f09e:	693b      	ldr	r3, [r7, #16]
 800f0a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f0a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f0a6:	683b      	ldr	r3, [r7, #0]
 800f0a8:	695b      	ldr	r3, [r3, #20]
 800f0aa:	693a      	ldr	r2, [r7, #16]
 800f0ac:	4313      	orrs	r3, r2
 800f0ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f0b0:	683b      	ldr	r3, [r7, #0]
 800f0b2:	699b      	ldr	r3, [r3, #24]
 800f0b4:	693a      	ldr	r2, [r7, #16]
 800f0b6:	4313      	orrs	r3, r2
 800f0b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	693a      	ldr	r2, [r7, #16]
 800f0be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	68fa      	ldr	r2, [r7, #12]
 800f0c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f0c6:	683b      	ldr	r3, [r7, #0]
 800f0c8:	685a      	ldr	r2, [r3, #4]
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	697a      	ldr	r2, [r7, #20]
 800f0d2:	621a      	str	r2, [r3, #32]
}
 800f0d4:	bf00      	nop
 800f0d6:	371c      	adds	r7, #28
 800f0d8:	46bd      	mov	sp, r7
 800f0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0de:	4770      	bx	lr
 800f0e0:	40012c00 	.word	0x40012c00
 800f0e4:	40013400 	.word	0x40013400
 800f0e8:	40014000 	.word	0x40014000
 800f0ec:	40014400 	.word	0x40014400
 800f0f0:	40014800 	.word	0x40014800
 800f0f4:	40015000 	.word	0x40015000

0800f0f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f0f8:	b480      	push	{r7}
 800f0fa:	b087      	sub	sp, #28
 800f0fc:	af00      	add	r7, sp, #0
 800f0fe:	6078      	str	r0, [r7, #4]
 800f100:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	6a1b      	ldr	r3, [r3, #32]
 800f106:	f023 0210 	bic.w	r2, r3, #16
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	6a1b      	ldr	r3, [r3, #32]
 800f112:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	685b      	ldr	r3, [r3, #4]
 800f118:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	699b      	ldr	r3, [r3, #24]
 800f11e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800f126:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f12a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f132:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f134:	683b      	ldr	r3, [r7, #0]
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	021b      	lsls	r3, r3, #8
 800f13a:	68fa      	ldr	r2, [r7, #12]
 800f13c:	4313      	orrs	r3, r2
 800f13e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f140:	697b      	ldr	r3, [r7, #20]
 800f142:	f023 0320 	bic.w	r3, r3, #32
 800f146:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f148:	683b      	ldr	r3, [r7, #0]
 800f14a:	689b      	ldr	r3, [r3, #8]
 800f14c:	011b      	lsls	r3, r3, #4
 800f14e:	697a      	ldr	r2, [r7, #20]
 800f150:	4313      	orrs	r3, r2
 800f152:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	4a2c      	ldr	r2, [pc, #176]	; (800f208 <TIM_OC2_SetConfig+0x110>)
 800f158:	4293      	cmp	r3, r2
 800f15a:	d007      	beq.n	800f16c <TIM_OC2_SetConfig+0x74>
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	4a2b      	ldr	r2, [pc, #172]	; (800f20c <TIM_OC2_SetConfig+0x114>)
 800f160:	4293      	cmp	r3, r2
 800f162:	d003      	beq.n	800f16c <TIM_OC2_SetConfig+0x74>
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	4a2a      	ldr	r2, [pc, #168]	; (800f210 <TIM_OC2_SetConfig+0x118>)
 800f168:	4293      	cmp	r3, r2
 800f16a:	d10d      	bne.n	800f188 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f16c:	697b      	ldr	r3, [r7, #20]
 800f16e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f172:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f174:	683b      	ldr	r3, [r7, #0]
 800f176:	68db      	ldr	r3, [r3, #12]
 800f178:	011b      	lsls	r3, r3, #4
 800f17a:	697a      	ldr	r2, [r7, #20]
 800f17c:	4313      	orrs	r3, r2
 800f17e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f180:	697b      	ldr	r3, [r7, #20]
 800f182:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f186:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	4a1f      	ldr	r2, [pc, #124]	; (800f208 <TIM_OC2_SetConfig+0x110>)
 800f18c:	4293      	cmp	r3, r2
 800f18e:	d013      	beq.n	800f1b8 <TIM_OC2_SetConfig+0xc0>
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	4a1e      	ldr	r2, [pc, #120]	; (800f20c <TIM_OC2_SetConfig+0x114>)
 800f194:	4293      	cmp	r3, r2
 800f196:	d00f      	beq.n	800f1b8 <TIM_OC2_SetConfig+0xc0>
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	4a1e      	ldr	r2, [pc, #120]	; (800f214 <TIM_OC2_SetConfig+0x11c>)
 800f19c:	4293      	cmp	r3, r2
 800f19e:	d00b      	beq.n	800f1b8 <TIM_OC2_SetConfig+0xc0>
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	4a1d      	ldr	r2, [pc, #116]	; (800f218 <TIM_OC2_SetConfig+0x120>)
 800f1a4:	4293      	cmp	r3, r2
 800f1a6:	d007      	beq.n	800f1b8 <TIM_OC2_SetConfig+0xc0>
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	4a1c      	ldr	r2, [pc, #112]	; (800f21c <TIM_OC2_SetConfig+0x124>)
 800f1ac:	4293      	cmp	r3, r2
 800f1ae:	d003      	beq.n	800f1b8 <TIM_OC2_SetConfig+0xc0>
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	4a17      	ldr	r2, [pc, #92]	; (800f210 <TIM_OC2_SetConfig+0x118>)
 800f1b4:	4293      	cmp	r3, r2
 800f1b6:	d113      	bne.n	800f1e0 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f1b8:	693b      	ldr	r3, [r7, #16]
 800f1ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f1be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f1c0:	693b      	ldr	r3, [r7, #16]
 800f1c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f1c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f1c8:	683b      	ldr	r3, [r7, #0]
 800f1ca:	695b      	ldr	r3, [r3, #20]
 800f1cc:	009b      	lsls	r3, r3, #2
 800f1ce:	693a      	ldr	r2, [r7, #16]
 800f1d0:	4313      	orrs	r3, r2
 800f1d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f1d4:	683b      	ldr	r3, [r7, #0]
 800f1d6:	699b      	ldr	r3, [r3, #24]
 800f1d8:	009b      	lsls	r3, r3, #2
 800f1da:	693a      	ldr	r2, [r7, #16]
 800f1dc:	4313      	orrs	r3, r2
 800f1de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	693a      	ldr	r2, [r7, #16]
 800f1e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	68fa      	ldr	r2, [r7, #12]
 800f1ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f1ec:	683b      	ldr	r3, [r7, #0]
 800f1ee:	685a      	ldr	r2, [r3, #4]
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	697a      	ldr	r2, [r7, #20]
 800f1f8:	621a      	str	r2, [r3, #32]
}
 800f1fa:	bf00      	nop
 800f1fc:	371c      	adds	r7, #28
 800f1fe:	46bd      	mov	sp, r7
 800f200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f204:	4770      	bx	lr
 800f206:	bf00      	nop
 800f208:	40012c00 	.word	0x40012c00
 800f20c:	40013400 	.word	0x40013400
 800f210:	40015000 	.word	0x40015000
 800f214:	40014000 	.word	0x40014000
 800f218:	40014400 	.word	0x40014400
 800f21c:	40014800 	.word	0x40014800

0800f220 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f220:	b480      	push	{r7}
 800f222:	b087      	sub	sp, #28
 800f224:	af00      	add	r7, sp, #0
 800f226:	6078      	str	r0, [r7, #4]
 800f228:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	6a1b      	ldr	r3, [r3, #32]
 800f22e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	6a1b      	ldr	r3, [r3, #32]
 800f23a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	685b      	ldr	r3, [r3, #4]
 800f240:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	69db      	ldr	r3, [r3, #28]
 800f246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f24e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f252:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	f023 0303 	bic.w	r3, r3, #3
 800f25a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f25c:	683b      	ldr	r3, [r7, #0]
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	68fa      	ldr	r2, [r7, #12]
 800f262:	4313      	orrs	r3, r2
 800f264:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f266:	697b      	ldr	r3, [r7, #20]
 800f268:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f26c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f26e:	683b      	ldr	r3, [r7, #0]
 800f270:	689b      	ldr	r3, [r3, #8]
 800f272:	021b      	lsls	r3, r3, #8
 800f274:	697a      	ldr	r2, [r7, #20]
 800f276:	4313      	orrs	r3, r2
 800f278:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	4a2b      	ldr	r2, [pc, #172]	; (800f32c <TIM_OC3_SetConfig+0x10c>)
 800f27e:	4293      	cmp	r3, r2
 800f280:	d007      	beq.n	800f292 <TIM_OC3_SetConfig+0x72>
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	4a2a      	ldr	r2, [pc, #168]	; (800f330 <TIM_OC3_SetConfig+0x110>)
 800f286:	4293      	cmp	r3, r2
 800f288:	d003      	beq.n	800f292 <TIM_OC3_SetConfig+0x72>
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	4a29      	ldr	r2, [pc, #164]	; (800f334 <TIM_OC3_SetConfig+0x114>)
 800f28e:	4293      	cmp	r3, r2
 800f290:	d10d      	bne.n	800f2ae <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f292:	697b      	ldr	r3, [r7, #20]
 800f294:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f298:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f29a:	683b      	ldr	r3, [r7, #0]
 800f29c:	68db      	ldr	r3, [r3, #12]
 800f29e:	021b      	lsls	r3, r3, #8
 800f2a0:	697a      	ldr	r2, [r7, #20]
 800f2a2:	4313      	orrs	r3, r2
 800f2a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f2a6:	697b      	ldr	r3, [r7, #20]
 800f2a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f2ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	4a1e      	ldr	r2, [pc, #120]	; (800f32c <TIM_OC3_SetConfig+0x10c>)
 800f2b2:	4293      	cmp	r3, r2
 800f2b4:	d013      	beq.n	800f2de <TIM_OC3_SetConfig+0xbe>
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	4a1d      	ldr	r2, [pc, #116]	; (800f330 <TIM_OC3_SetConfig+0x110>)
 800f2ba:	4293      	cmp	r3, r2
 800f2bc:	d00f      	beq.n	800f2de <TIM_OC3_SetConfig+0xbe>
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	4a1d      	ldr	r2, [pc, #116]	; (800f338 <TIM_OC3_SetConfig+0x118>)
 800f2c2:	4293      	cmp	r3, r2
 800f2c4:	d00b      	beq.n	800f2de <TIM_OC3_SetConfig+0xbe>
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	4a1c      	ldr	r2, [pc, #112]	; (800f33c <TIM_OC3_SetConfig+0x11c>)
 800f2ca:	4293      	cmp	r3, r2
 800f2cc:	d007      	beq.n	800f2de <TIM_OC3_SetConfig+0xbe>
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	4a1b      	ldr	r2, [pc, #108]	; (800f340 <TIM_OC3_SetConfig+0x120>)
 800f2d2:	4293      	cmp	r3, r2
 800f2d4:	d003      	beq.n	800f2de <TIM_OC3_SetConfig+0xbe>
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	4a16      	ldr	r2, [pc, #88]	; (800f334 <TIM_OC3_SetConfig+0x114>)
 800f2da:	4293      	cmp	r3, r2
 800f2dc:	d113      	bne.n	800f306 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f2de:	693b      	ldr	r3, [r7, #16]
 800f2e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f2e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f2e6:	693b      	ldr	r3, [r7, #16]
 800f2e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f2ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f2ee:	683b      	ldr	r3, [r7, #0]
 800f2f0:	695b      	ldr	r3, [r3, #20]
 800f2f2:	011b      	lsls	r3, r3, #4
 800f2f4:	693a      	ldr	r2, [r7, #16]
 800f2f6:	4313      	orrs	r3, r2
 800f2f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f2fa:	683b      	ldr	r3, [r7, #0]
 800f2fc:	699b      	ldr	r3, [r3, #24]
 800f2fe:	011b      	lsls	r3, r3, #4
 800f300:	693a      	ldr	r2, [r7, #16]
 800f302:	4313      	orrs	r3, r2
 800f304:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	693a      	ldr	r2, [r7, #16]
 800f30a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	68fa      	ldr	r2, [r7, #12]
 800f310:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f312:	683b      	ldr	r3, [r7, #0]
 800f314:	685a      	ldr	r2, [r3, #4]
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	697a      	ldr	r2, [r7, #20]
 800f31e:	621a      	str	r2, [r3, #32]
}
 800f320:	bf00      	nop
 800f322:	371c      	adds	r7, #28
 800f324:	46bd      	mov	sp, r7
 800f326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f32a:	4770      	bx	lr
 800f32c:	40012c00 	.word	0x40012c00
 800f330:	40013400 	.word	0x40013400
 800f334:	40015000 	.word	0x40015000
 800f338:	40014000 	.word	0x40014000
 800f33c:	40014400 	.word	0x40014400
 800f340:	40014800 	.word	0x40014800

0800f344 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f344:	b480      	push	{r7}
 800f346:	b087      	sub	sp, #28
 800f348:	af00      	add	r7, sp, #0
 800f34a:	6078      	str	r0, [r7, #4]
 800f34c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	6a1b      	ldr	r3, [r3, #32]
 800f352:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	6a1b      	ldr	r3, [r3, #32]
 800f35e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	685b      	ldr	r3, [r3, #4]
 800f364:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	69db      	ldr	r3, [r3, #28]
 800f36a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f36c:	68fb      	ldr	r3, [r7, #12]
 800f36e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800f372:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f376:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f37e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f380:	683b      	ldr	r3, [r7, #0]
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	021b      	lsls	r3, r3, #8
 800f386:	68fa      	ldr	r2, [r7, #12]
 800f388:	4313      	orrs	r3, r2
 800f38a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f38c:	697b      	ldr	r3, [r7, #20]
 800f38e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f392:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f394:	683b      	ldr	r3, [r7, #0]
 800f396:	689b      	ldr	r3, [r3, #8]
 800f398:	031b      	lsls	r3, r3, #12
 800f39a:	697a      	ldr	r2, [r7, #20]
 800f39c:	4313      	orrs	r3, r2
 800f39e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	4a2c      	ldr	r2, [pc, #176]	; (800f454 <TIM_OC4_SetConfig+0x110>)
 800f3a4:	4293      	cmp	r3, r2
 800f3a6:	d007      	beq.n	800f3b8 <TIM_OC4_SetConfig+0x74>
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	4a2b      	ldr	r2, [pc, #172]	; (800f458 <TIM_OC4_SetConfig+0x114>)
 800f3ac:	4293      	cmp	r3, r2
 800f3ae:	d003      	beq.n	800f3b8 <TIM_OC4_SetConfig+0x74>
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	4a2a      	ldr	r2, [pc, #168]	; (800f45c <TIM_OC4_SetConfig+0x118>)
 800f3b4:	4293      	cmp	r3, r2
 800f3b6:	d10d      	bne.n	800f3d4 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800f3b8:	697b      	ldr	r3, [r7, #20]
 800f3ba:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800f3be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800f3c0:	683b      	ldr	r3, [r7, #0]
 800f3c2:	68db      	ldr	r3, [r3, #12]
 800f3c4:	031b      	lsls	r3, r3, #12
 800f3c6:	697a      	ldr	r2, [r7, #20]
 800f3c8:	4313      	orrs	r3, r2
 800f3ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800f3cc:	697b      	ldr	r3, [r7, #20]
 800f3ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f3d2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	4a1f      	ldr	r2, [pc, #124]	; (800f454 <TIM_OC4_SetConfig+0x110>)
 800f3d8:	4293      	cmp	r3, r2
 800f3da:	d013      	beq.n	800f404 <TIM_OC4_SetConfig+0xc0>
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	4a1e      	ldr	r2, [pc, #120]	; (800f458 <TIM_OC4_SetConfig+0x114>)
 800f3e0:	4293      	cmp	r3, r2
 800f3e2:	d00f      	beq.n	800f404 <TIM_OC4_SetConfig+0xc0>
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	4a1e      	ldr	r2, [pc, #120]	; (800f460 <TIM_OC4_SetConfig+0x11c>)
 800f3e8:	4293      	cmp	r3, r2
 800f3ea:	d00b      	beq.n	800f404 <TIM_OC4_SetConfig+0xc0>
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	4a1d      	ldr	r2, [pc, #116]	; (800f464 <TIM_OC4_SetConfig+0x120>)
 800f3f0:	4293      	cmp	r3, r2
 800f3f2:	d007      	beq.n	800f404 <TIM_OC4_SetConfig+0xc0>
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	4a1c      	ldr	r2, [pc, #112]	; (800f468 <TIM_OC4_SetConfig+0x124>)
 800f3f8:	4293      	cmp	r3, r2
 800f3fa:	d003      	beq.n	800f404 <TIM_OC4_SetConfig+0xc0>
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	4a17      	ldr	r2, [pc, #92]	; (800f45c <TIM_OC4_SetConfig+0x118>)
 800f400:	4293      	cmp	r3, r2
 800f402:	d113      	bne.n	800f42c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f404:	693b      	ldr	r3, [r7, #16]
 800f406:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f40a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800f40c:	693b      	ldr	r3, [r7, #16]
 800f40e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800f412:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f414:	683b      	ldr	r3, [r7, #0]
 800f416:	695b      	ldr	r3, [r3, #20]
 800f418:	019b      	lsls	r3, r3, #6
 800f41a:	693a      	ldr	r2, [r7, #16]
 800f41c:	4313      	orrs	r3, r2
 800f41e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800f420:	683b      	ldr	r3, [r7, #0]
 800f422:	699b      	ldr	r3, [r3, #24]
 800f424:	019b      	lsls	r3, r3, #6
 800f426:	693a      	ldr	r2, [r7, #16]
 800f428:	4313      	orrs	r3, r2
 800f42a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	693a      	ldr	r2, [r7, #16]
 800f430:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	68fa      	ldr	r2, [r7, #12]
 800f436:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f438:	683b      	ldr	r3, [r7, #0]
 800f43a:	685a      	ldr	r2, [r3, #4]
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	697a      	ldr	r2, [r7, #20]
 800f444:	621a      	str	r2, [r3, #32]
}
 800f446:	bf00      	nop
 800f448:	371c      	adds	r7, #28
 800f44a:	46bd      	mov	sp, r7
 800f44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f450:	4770      	bx	lr
 800f452:	bf00      	nop
 800f454:	40012c00 	.word	0x40012c00
 800f458:	40013400 	.word	0x40013400
 800f45c:	40015000 	.word	0x40015000
 800f460:	40014000 	.word	0x40014000
 800f464:	40014400 	.word	0x40014400
 800f468:	40014800 	.word	0x40014800

0800f46c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800f46c:	b480      	push	{r7}
 800f46e:	b087      	sub	sp, #28
 800f470:	af00      	add	r7, sp, #0
 800f472:	6078      	str	r0, [r7, #4]
 800f474:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	6a1b      	ldr	r3, [r3, #32]
 800f47a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	6a1b      	ldr	r3, [r3, #32]
 800f486:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	685b      	ldr	r3, [r3, #4]
 800f48c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800f494:	68fb      	ldr	r3, [r7, #12]
 800f496:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f49a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f49e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f4a0:	683b      	ldr	r3, [r7, #0]
 800f4a2:	681b      	ldr	r3, [r3, #0]
 800f4a4:	68fa      	ldr	r2, [r7, #12]
 800f4a6:	4313      	orrs	r3, r2
 800f4a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800f4aa:	693b      	ldr	r3, [r7, #16]
 800f4ac:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800f4b0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800f4b2:	683b      	ldr	r3, [r7, #0]
 800f4b4:	689b      	ldr	r3, [r3, #8]
 800f4b6:	041b      	lsls	r3, r3, #16
 800f4b8:	693a      	ldr	r2, [r7, #16]
 800f4ba:	4313      	orrs	r3, r2
 800f4bc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	4a19      	ldr	r2, [pc, #100]	; (800f528 <TIM_OC5_SetConfig+0xbc>)
 800f4c2:	4293      	cmp	r3, r2
 800f4c4:	d013      	beq.n	800f4ee <TIM_OC5_SetConfig+0x82>
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	4a18      	ldr	r2, [pc, #96]	; (800f52c <TIM_OC5_SetConfig+0xc0>)
 800f4ca:	4293      	cmp	r3, r2
 800f4cc:	d00f      	beq.n	800f4ee <TIM_OC5_SetConfig+0x82>
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	4a17      	ldr	r2, [pc, #92]	; (800f530 <TIM_OC5_SetConfig+0xc4>)
 800f4d2:	4293      	cmp	r3, r2
 800f4d4:	d00b      	beq.n	800f4ee <TIM_OC5_SetConfig+0x82>
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	4a16      	ldr	r2, [pc, #88]	; (800f534 <TIM_OC5_SetConfig+0xc8>)
 800f4da:	4293      	cmp	r3, r2
 800f4dc:	d007      	beq.n	800f4ee <TIM_OC5_SetConfig+0x82>
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	4a15      	ldr	r2, [pc, #84]	; (800f538 <TIM_OC5_SetConfig+0xcc>)
 800f4e2:	4293      	cmp	r3, r2
 800f4e4:	d003      	beq.n	800f4ee <TIM_OC5_SetConfig+0x82>
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	4a14      	ldr	r2, [pc, #80]	; (800f53c <TIM_OC5_SetConfig+0xd0>)
 800f4ea:	4293      	cmp	r3, r2
 800f4ec:	d109      	bne.n	800f502 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800f4ee:	697b      	ldr	r3, [r7, #20]
 800f4f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f4f4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800f4f6:	683b      	ldr	r3, [r7, #0]
 800f4f8:	695b      	ldr	r3, [r3, #20]
 800f4fa:	021b      	lsls	r3, r3, #8
 800f4fc:	697a      	ldr	r2, [r7, #20]
 800f4fe:	4313      	orrs	r3, r2
 800f500:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	697a      	ldr	r2, [r7, #20]
 800f506:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	68fa      	ldr	r2, [r7, #12]
 800f50c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800f50e:	683b      	ldr	r3, [r7, #0]
 800f510:	685a      	ldr	r2, [r3, #4]
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	693a      	ldr	r2, [r7, #16]
 800f51a:	621a      	str	r2, [r3, #32]
}
 800f51c:	bf00      	nop
 800f51e:	371c      	adds	r7, #28
 800f520:	46bd      	mov	sp, r7
 800f522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f526:	4770      	bx	lr
 800f528:	40012c00 	.word	0x40012c00
 800f52c:	40013400 	.word	0x40013400
 800f530:	40014000 	.word	0x40014000
 800f534:	40014400 	.word	0x40014400
 800f538:	40014800 	.word	0x40014800
 800f53c:	40015000 	.word	0x40015000

0800f540 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800f540:	b480      	push	{r7}
 800f542:	b087      	sub	sp, #28
 800f544:	af00      	add	r7, sp, #0
 800f546:	6078      	str	r0, [r7, #4]
 800f548:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	6a1b      	ldr	r3, [r3, #32]
 800f54e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	6a1b      	ldr	r3, [r3, #32]
 800f55a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	685b      	ldr	r3, [r3, #4]
 800f560:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800f56e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f572:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f574:	683b      	ldr	r3, [r7, #0]
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	021b      	lsls	r3, r3, #8
 800f57a:	68fa      	ldr	r2, [r7, #12]
 800f57c:	4313      	orrs	r3, r2
 800f57e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800f580:	693b      	ldr	r3, [r7, #16]
 800f582:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f586:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800f588:	683b      	ldr	r3, [r7, #0]
 800f58a:	689b      	ldr	r3, [r3, #8]
 800f58c:	051b      	lsls	r3, r3, #20
 800f58e:	693a      	ldr	r2, [r7, #16]
 800f590:	4313      	orrs	r3, r2
 800f592:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	4a1a      	ldr	r2, [pc, #104]	; (800f600 <TIM_OC6_SetConfig+0xc0>)
 800f598:	4293      	cmp	r3, r2
 800f59a:	d013      	beq.n	800f5c4 <TIM_OC6_SetConfig+0x84>
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	4a19      	ldr	r2, [pc, #100]	; (800f604 <TIM_OC6_SetConfig+0xc4>)
 800f5a0:	4293      	cmp	r3, r2
 800f5a2:	d00f      	beq.n	800f5c4 <TIM_OC6_SetConfig+0x84>
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	4a18      	ldr	r2, [pc, #96]	; (800f608 <TIM_OC6_SetConfig+0xc8>)
 800f5a8:	4293      	cmp	r3, r2
 800f5aa:	d00b      	beq.n	800f5c4 <TIM_OC6_SetConfig+0x84>
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	4a17      	ldr	r2, [pc, #92]	; (800f60c <TIM_OC6_SetConfig+0xcc>)
 800f5b0:	4293      	cmp	r3, r2
 800f5b2:	d007      	beq.n	800f5c4 <TIM_OC6_SetConfig+0x84>
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	4a16      	ldr	r2, [pc, #88]	; (800f610 <TIM_OC6_SetConfig+0xd0>)
 800f5b8:	4293      	cmp	r3, r2
 800f5ba:	d003      	beq.n	800f5c4 <TIM_OC6_SetConfig+0x84>
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	4a15      	ldr	r2, [pc, #84]	; (800f614 <TIM_OC6_SetConfig+0xd4>)
 800f5c0:	4293      	cmp	r3, r2
 800f5c2:	d109      	bne.n	800f5d8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800f5c4:	697b      	ldr	r3, [r7, #20]
 800f5c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f5ca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800f5cc:	683b      	ldr	r3, [r7, #0]
 800f5ce:	695b      	ldr	r3, [r3, #20]
 800f5d0:	029b      	lsls	r3, r3, #10
 800f5d2:	697a      	ldr	r2, [r7, #20]
 800f5d4:	4313      	orrs	r3, r2
 800f5d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	697a      	ldr	r2, [r7, #20]
 800f5dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	68fa      	ldr	r2, [r7, #12]
 800f5e2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800f5e4:	683b      	ldr	r3, [r7, #0]
 800f5e6:	685a      	ldr	r2, [r3, #4]
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	693a      	ldr	r2, [r7, #16]
 800f5f0:	621a      	str	r2, [r3, #32]
}
 800f5f2:	bf00      	nop
 800f5f4:	371c      	adds	r7, #28
 800f5f6:	46bd      	mov	sp, r7
 800f5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5fc:	4770      	bx	lr
 800f5fe:	bf00      	nop
 800f600:	40012c00 	.word	0x40012c00
 800f604:	40013400 	.word	0x40013400
 800f608:	40014000 	.word	0x40014000
 800f60c:	40014400 	.word	0x40014400
 800f610:	40014800 	.word	0x40014800
 800f614:	40015000 	.word	0x40015000

0800f618 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800f618:	b580      	push	{r7, lr}
 800f61a:	b086      	sub	sp, #24
 800f61c:	af00      	add	r7, sp, #0
 800f61e:	6078      	str	r0, [r7, #4]
 800f620:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	689b      	ldr	r3, [r3, #8]
 800f628:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f62a:	697b      	ldr	r3, [r7, #20]
 800f62c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800f630:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f634:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800f636:	683b      	ldr	r3, [r7, #0]
 800f638:	685b      	ldr	r3, [r3, #4]
 800f63a:	697a      	ldr	r2, [r7, #20]
 800f63c:	4313      	orrs	r3, r2
 800f63e:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800f640:	697b      	ldr	r3, [r7, #20]
 800f642:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f646:	f023 0307 	bic.w	r3, r3, #7
 800f64a:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800f64c:	683b      	ldr	r3, [r7, #0]
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	697a      	ldr	r2, [r7, #20]
 800f652:	4313      	orrs	r3, r2
 800f654:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	681b      	ldr	r3, [r3, #0]
 800f65a:	697a      	ldr	r2, [r7, #20]
 800f65c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800f65e:	683b      	ldr	r3, [r7, #0]
 800f660:	685b      	ldr	r3, [r3, #4]
 800f662:	2b70      	cmp	r3, #112	; 0x70
 800f664:	d034      	beq.n	800f6d0 <TIM_SlaveTimer_SetConfig+0xb8>
 800f666:	2b70      	cmp	r3, #112	; 0x70
 800f668:	d811      	bhi.n	800f68e <TIM_SlaveTimer_SetConfig+0x76>
 800f66a:	2b30      	cmp	r3, #48	; 0x30
 800f66c:	d07d      	beq.n	800f76a <TIM_SlaveTimer_SetConfig+0x152>
 800f66e:	2b30      	cmp	r3, #48	; 0x30
 800f670:	d806      	bhi.n	800f680 <TIM_SlaveTimer_SetConfig+0x68>
 800f672:	2b10      	cmp	r3, #16
 800f674:	d079      	beq.n	800f76a <TIM_SlaveTimer_SetConfig+0x152>
 800f676:	2b20      	cmp	r3, #32
 800f678:	d077      	beq.n	800f76a <TIM_SlaveTimer_SetConfig+0x152>
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d075      	beq.n	800f76a <TIM_SlaveTimer_SetConfig+0x152>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      break;
 800f67e:	e075      	b.n	800f76c <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 800f680:	2b50      	cmp	r3, #80	; 0x50
 800f682:	d05e      	beq.n	800f742 <TIM_SlaveTimer_SetConfig+0x12a>
 800f684:	2b60      	cmp	r3, #96	; 0x60
 800f686:	d066      	beq.n	800f756 <TIM_SlaveTimer_SetConfig+0x13e>
 800f688:	2b40      	cmp	r3, #64	; 0x40
 800f68a:	d02c      	beq.n	800f6e6 <TIM_SlaveTimer_SetConfig+0xce>
      break;
 800f68c:	e06e      	b.n	800f76c <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 800f68e:	4a3a      	ldr	r2, [pc, #232]	; (800f778 <TIM_SlaveTimer_SetConfig+0x160>)
 800f690:	4293      	cmp	r3, r2
 800f692:	d06a      	beq.n	800f76a <TIM_SlaveTimer_SetConfig+0x152>
 800f694:	4a38      	ldr	r2, [pc, #224]	; (800f778 <TIM_SlaveTimer_SetConfig+0x160>)
 800f696:	4293      	cmp	r3, r2
 800f698:	d809      	bhi.n	800f6ae <TIM_SlaveTimer_SetConfig+0x96>
 800f69a:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800f69e:	d064      	beq.n	800f76a <TIM_SlaveTimer_SetConfig+0x152>
 800f6a0:	4a36      	ldr	r2, [pc, #216]	; (800f77c <TIM_SlaveTimer_SetConfig+0x164>)
 800f6a2:	4293      	cmp	r3, r2
 800f6a4:	d061      	beq.n	800f76a <TIM_SlaveTimer_SetConfig+0x152>
 800f6a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f6aa:	d05e      	beq.n	800f76a <TIM_SlaveTimer_SetConfig+0x152>
      break;
 800f6ac:	e05e      	b.n	800f76c <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 800f6ae:	4a34      	ldr	r2, [pc, #208]	; (800f780 <TIM_SlaveTimer_SetConfig+0x168>)
 800f6b0:	4293      	cmp	r3, r2
 800f6b2:	d05a      	beq.n	800f76a <TIM_SlaveTimer_SetConfig+0x152>
 800f6b4:	4a32      	ldr	r2, [pc, #200]	; (800f780 <TIM_SlaveTimer_SetConfig+0x168>)
 800f6b6:	4293      	cmp	r3, r2
 800f6b8:	d803      	bhi.n	800f6c2 <TIM_SlaveTimer_SetConfig+0xaa>
 800f6ba:	4a32      	ldr	r2, [pc, #200]	; (800f784 <TIM_SlaveTimer_SetConfig+0x16c>)
 800f6bc:	4293      	cmp	r3, r2
 800f6be:	d054      	beq.n	800f76a <TIM_SlaveTimer_SetConfig+0x152>
      break;
 800f6c0:	e054      	b.n	800f76c <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 800f6c2:	4a31      	ldr	r2, [pc, #196]	; (800f788 <TIM_SlaveTimer_SetConfig+0x170>)
 800f6c4:	4293      	cmp	r3, r2
 800f6c6:	d050      	beq.n	800f76a <TIM_SlaveTimer_SetConfig+0x152>
 800f6c8:	4a30      	ldr	r2, [pc, #192]	; (800f78c <TIM_SlaveTimer_SetConfig+0x174>)
 800f6ca:	4293      	cmp	r3, r2
 800f6cc:	d04d      	beq.n	800f76a <TIM_SlaveTimer_SetConfig+0x152>
      break;
 800f6ce:	e04d      	b.n	800f76c <TIM_SlaveTimer_SetConfig+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	6818      	ldr	r0, [r3, #0]
 800f6d4:	683b      	ldr	r3, [r7, #0]
 800f6d6:	68d9      	ldr	r1, [r3, #12]
 800f6d8:	683b      	ldr	r3, [r7, #0]
 800f6da:	689a      	ldr	r2, [r3, #8]
 800f6dc:	683b      	ldr	r3, [r7, #0]
 800f6de:	691b      	ldr	r3, [r3, #16]
 800f6e0:	f000 f9fc 	bl	800fadc <TIM_ETR_SetConfig>
      break;
 800f6e4:	e042      	b.n	800f76c <TIM_SlaveTimer_SetConfig+0x154>
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 800f6e6:	683b      	ldr	r3, [r7, #0]
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	2b05      	cmp	r3, #5
 800f6ec:	d004      	beq.n	800f6f8 <TIM_SlaveTimer_SetConfig+0xe0>
 800f6ee:	683b      	ldr	r3, [r7, #0]
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 800f6f6:	d101      	bne.n	800f6fc <TIM_SlaveTimer_SetConfig+0xe4>
        return HAL_ERROR;
 800f6f8:	2301      	movs	r3, #1
 800f6fa:	e038      	b.n	800f76e <TIM_SlaveTimer_SetConfig+0x156>
      tmpccer = htim->Instance->CCER;
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	6a1b      	ldr	r3, [r3, #32]
 800f702:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	6a1a      	ldr	r2, [r3, #32]
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	f022 0201 	bic.w	r2, r2, #1
 800f712:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	699b      	ldr	r3, [r3, #24]
 800f71a:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f722:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800f724:	683b      	ldr	r3, [r7, #0]
 800f726:	691b      	ldr	r3, [r3, #16]
 800f728:	011b      	lsls	r3, r3, #4
 800f72a:	68fa      	ldr	r2, [r7, #12]
 800f72c:	4313      	orrs	r3, r2
 800f72e:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	681b      	ldr	r3, [r3, #0]
 800f734:	68fa      	ldr	r2, [r7, #12]
 800f736:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	681b      	ldr	r3, [r3, #0]
 800f73c:	693a      	ldr	r2, [r7, #16]
 800f73e:	621a      	str	r2, [r3, #32]
      break;
 800f740:	e014      	b.n	800f76c <TIM_SlaveTimer_SetConfig+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	6818      	ldr	r0, [r3, #0]
 800f746:	683b      	ldr	r3, [r7, #0]
 800f748:	6899      	ldr	r1, [r3, #8]
 800f74a:	683b      	ldr	r3, [r7, #0]
 800f74c:	691b      	ldr	r3, [r3, #16]
 800f74e:	461a      	mov	r2, r3
 800f750:	f000 f892 	bl	800f878 <TIM_TI1_ConfigInputStage>
      break;
 800f754:	e00a      	b.n	800f76c <TIM_SlaveTimer_SetConfig+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	6818      	ldr	r0, [r3, #0]
 800f75a:	683b      	ldr	r3, [r7, #0]
 800f75c:	6899      	ldr	r1, [r3, #8]
 800f75e:	683b      	ldr	r3, [r7, #0]
 800f760:	691b      	ldr	r3, [r3, #16]
 800f762:	461a      	mov	r2, r3
 800f764:	f000 f8f4 	bl	800f950 <TIM_TI2_ConfigInputStage>
      break;
 800f768:	e000      	b.n	800f76c <TIM_SlaveTimer_SetConfig+0x154>
      break;
 800f76a:	bf00      	nop
  }
  return HAL_OK;
 800f76c:	2300      	movs	r3, #0
}
 800f76e:	4618      	mov	r0, r3
 800f770:	3718      	adds	r7, #24
 800f772:	46bd      	mov	sp, r7
 800f774:	bd80      	pop	{r7, pc}
 800f776:	bf00      	nop
 800f778:	00100030 	.word	0x00100030
 800f77c:	00100020 	.word	0x00100020
 800f780:	00100050 	.word	0x00100050
 800f784:	00100040 	.word	0x00100040
 800f788:	00100060 	.word	0x00100060
 800f78c:	00100070 	.word	0x00100070

0800f790 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800f790:	b480      	push	{r7}
 800f792:	b087      	sub	sp, #28
 800f794:	af00      	add	r7, sp, #0
 800f796:	60f8      	str	r0, [r7, #12]
 800f798:	60b9      	str	r1, [r7, #8]
 800f79a:	607a      	str	r2, [r7, #4]
 800f79c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	6a1b      	ldr	r3, [r3, #32]
 800f7a2:	f023 0201 	bic.w	r2, r3, #1
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f7aa:	68fb      	ldr	r3, [r7, #12]
 800f7ac:	699b      	ldr	r3, [r3, #24]
 800f7ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	6a1b      	ldr	r3, [r3, #32]
 800f7b4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	4a28      	ldr	r2, [pc, #160]	; (800f85c <TIM_TI1_SetConfig+0xcc>)
 800f7ba:	4293      	cmp	r3, r2
 800f7bc:	d01b      	beq.n	800f7f6 <TIM_TI1_SetConfig+0x66>
 800f7be:	68fb      	ldr	r3, [r7, #12]
 800f7c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f7c4:	d017      	beq.n	800f7f6 <TIM_TI1_SetConfig+0x66>
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	4a25      	ldr	r2, [pc, #148]	; (800f860 <TIM_TI1_SetConfig+0xd0>)
 800f7ca:	4293      	cmp	r3, r2
 800f7cc:	d013      	beq.n	800f7f6 <TIM_TI1_SetConfig+0x66>
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	4a24      	ldr	r2, [pc, #144]	; (800f864 <TIM_TI1_SetConfig+0xd4>)
 800f7d2:	4293      	cmp	r3, r2
 800f7d4:	d00f      	beq.n	800f7f6 <TIM_TI1_SetConfig+0x66>
 800f7d6:	68fb      	ldr	r3, [r7, #12]
 800f7d8:	4a23      	ldr	r2, [pc, #140]	; (800f868 <TIM_TI1_SetConfig+0xd8>)
 800f7da:	4293      	cmp	r3, r2
 800f7dc:	d00b      	beq.n	800f7f6 <TIM_TI1_SetConfig+0x66>
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	4a22      	ldr	r2, [pc, #136]	; (800f86c <TIM_TI1_SetConfig+0xdc>)
 800f7e2:	4293      	cmp	r3, r2
 800f7e4:	d007      	beq.n	800f7f6 <TIM_TI1_SetConfig+0x66>
 800f7e6:	68fb      	ldr	r3, [r7, #12]
 800f7e8:	4a21      	ldr	r2, [pc, #132]	; (800f870 <TIM_TI1_SetConfig+0xe0>)
 800f7ea:	4293      	cmp	r3, r2
 800f7ec:	d003      	beq.n	800f7f6 <TIM_TI1_SetConfig+0x66>
 800f7ee:	68fb      	ldr	r3, [r7, #12]
 800f7f0:	4a20      	ldr	r2, [pc, #128]	; (800f874 <TIM_TI1_SetConfig+0xe4>)
 800f7f2:	4293      	cmp	r3, r2
 800f7f4:	d101      	bne.n	800f7fa <TIM_TI1_SetConfig+0x6a>
 800f7f6:	2301      	movs	r3, #1
 800f7f8:	e000      	b.n	800f7fc <TIM_TI1_SetConfig+0x6c>
 800f7fa:	2300      	movs	r3, #0
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d008      	beq.n	800f812 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800f800:	697b      	ldr	r3, [r7, #20]
 800f802:	f023 0303 	bic.w	r3, r3, #3
 800f806:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800f808:	697a      	ldr	r2, [r7, #20]
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	4313      	orrs	r3, r2
 800f80e:	617b      	str	r3, [r7, #20]
 800f810:	e003      	b.n	800f81a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800f812:	697b      	ldr	r3, [r7, #20]
 800f814:	f043 0301 	orr.w	r3, r3, #1
 800f818:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f81a:	697b      	ldr	r3, [r7, #20]
 800f81c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f820:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800f822:	683b      	ldr	r3, [r7, #0]
 800f824:	011b      	lsls	r3, r3, #4
 800f826:	b2db      	uxtb	r3, r3
 800f828:	697a      	ldr	r2, [r7, #20]
 800f82a:	4313      	orrs	r3, r2
 800f82c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f82e:	693b      	ldr	r3, [r7, #16]
 800f830:	f023 030a 	bic.w	r3, r3, #10
 800f834:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800f836:	68bb      	ldr	r3, [r7, #8]
 800f838:	f003 030a 	and.w	r3, r3, #10
 800f83c:	693a      	ldr	r2, [r7, #16]
 800f83e:	4313      	orrs	r3, r2
 800f840:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	697a      	ldr	r2, [r7, #20]
 800f846:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	693a      	ldr	r2, [r7, #16]
 800f84c:	621a      	str	r2, [r3, #32]
}
 800f84e:	bf00      	nop
 800f850:	371c      	adds	r7, #28
 800f852:	46bd      	mov	sp, r7
 800f854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f858:	4770      	bx	lr
 800f85a:	bf00      	nop
 800f85c:	40012c00 	.word	0x40012c00
 800f860:	40000400 	.word	0x40000400
 800f864:	40000800 	.word	0x40000800
 800f868:	40000c00 	.word	0x40000c00
 800f86c:	40013400 	.word	0x40013400
 800f870:	40014000 	.word	0x40014000
 800f874:	40015000 	.word	0x40015000

0800f878 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f878:	b480      	push	{r7}
 800f87a:	b087      	sub	sp, #28
 800f87c:	af00      	add	r7, sp, #0
 800f87e:	60f8      	str	r0, [r7, #12]
 800f880:	60b9      	str	r1, [r7, #8]
 800f882:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f884:	68fb      	ldr	r3, [r7, #12]
 800f886:	6a1b      	ldr	r3, [r3, #32]
 800f888:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f88a:	68fb      	ldr	r3, [r7, #12]
 800f88c:	6a1b      	ldr	r3, [r3, #32]
 800f88e:	f023 0201 	bic.w	r2, r3, #1
 800f892:	68fb      	ldr	r3, [r7, #12]
 800f894:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	699b      	ldr	r3, [r3, #24]
 800f89a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f89c:	693b      	ldr	r3, [r7, #16]
 800f89e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f8a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	011b      	lsls	r3, r3, #4
 800f8a8:	693a      	ldr	r2, [r7, #16]
 800f8aa:	4313      	orrs	r3, r2
 800f8ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f8ae:	697b      	ldr	r3, [r7, #20]
 800f8b0:	f023 030a 	bic.w	r3, r3, #10
 800f8b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f8b6:	697a      	ldr	r2, [r7, #20]
 800f8b8:	68bb      	ldr	r3, [r7, #8]
 800f8ba:	4313      	orrs	r3, r2
 800f8bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f8be:	68fb      	ldr	r3, [r7, #12]
 800f8c0:	693a      	ldr	r2, [r7, #16]
 800f8c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	697a      	ldr	r2, [r7, #20]
 800f8c8:	621a      	str	r2, [r3, #32]
}
 800f8ca:	bf00      	nop
 800f8cc:	371c      	adds	r7, #28
 800f8ce:	46bd      	mov	sp, r7
 800f8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8d4:	4770      	bx	lr

0800f8d6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800f8d6:	b480      	push	{r7}
 800f8d8:	b087      	sub	sp, #28
 800f8da:	af00      	add	r7, sp, #0
 800f8dc:	60f8      	str	r0, [r7, #12]
 800f8de:	60b9      	str	r1, [r7, #8]
 800f8e0:	607a      	str	r2, [r7, #4]
 800f8e2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f8e4:	68fb      	ldr	r3, [r7, #12]
 800f8e6:	6a1b      	ldr	r3, [r3, #32]
 800f8e8:	f023 0210 	bic.w	r2, r3, #16
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f8f0:	68fb      	ldr	r3, [r7, #12]
 800f8f2:	699b      	ldr	r3, [r3, #24]
 800f8f4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800f8f6:	68fb      	ldr	r3, [r7, #12]
 800f8f8:	6a1b      	ldr	r3, [r3, #32]
 800f8fa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800f8fc:	697b      	ldr	r3, [r7, #20]
 800f8fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f902:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	021b      	lsls	r3, r3, #8
 800f908:	697a      	ldr	r2, [r7, #20]
 800f90a:	4313      	orrs	r3, r2
 800f90c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f90e:	697b      	ldr	r3, [r7, #20]
 800f910:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f914:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800f916:	683b      	ldr	r3, [r7, #0]
 800f918:	031b      	lsls	r3, r3, #12
 800f91a:	b29b      	uxth	r3, r3
 800f91c:	697a      	ldr	r2, [r7, #20]
 800f91e:	4313      	orrs	r3, r2
 800f920:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f922:	693b      	ldr	r3, [r7, #16]
 800f924:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800f928:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800f92a:	68bb      	ldr	r3, [r7, #8]
 800f92c:	011b      	lsls	r3, r3, #4
 800f92e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800f932:	693a      	ldr	r2, [r7, #16]
 800f934:	4313      	orrs	r3, r2
 800f936:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f938:	68fb      	ldr	r3, [r7, #12]
 800f93a:	697a      	ldr	r2, [r7, #20]
 800f93c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f93e:	68fb      	ldr	r3, [r7, #12]
 800f940:	693a      	ldr	r2, [r7, #16]
 800f942:	621a      	str	r2, [r3, #32]
}
 800f944:	bf00      	nop
 800f946:	371c      	adds	r7, #28
 800f948:	46bd      	mov	sp, r7
 800f94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f94e:	4770      	bx	lr

0800f950 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f950:	b480      	push	{r7}
 800f952:	b087      	sub	sp, #28
 800f954:	af00      	add	r7, sp, #0
 800f956:	60f8      	str	r0, [r7, #12]
 800f958:	60b9      	str	r1, [r7, #8]
 800f95a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	6a1b      	ldr	r3, [r3, #32]
 800f960:	f023 0210 	bic.w	r2, r3, #16
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f968:	68fb      	ldr	r3, [r7, #12]
 800f96a:	699b      	ldr	r3, [r3, #24]
 800f96c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800f96e:	68fb      	ldr	r3, [r7, #12]
 800f970:	6a1b      	ldr	r3, [r3, #32]
 800f972:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f974:	697b      	ldr	r3, [r7, #20]
 800f976:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f97a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	031b      	lsls	r3, r3, #12
 800f980:	697a      	ldr	r2, [r7, #20]
 800f982:	4313      	orrs	r3, r2
 800f984:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f986:	693b      	ldr	r3, [r7, #16]
 800f988:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800f98c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f98e:	68bb      	ldr	r3, [r7, #8]
 800f990:	011b      	lsls	r3, r3, #4
 800f992:	693a      	ldr	r2, [r7, #16]
 800f994:	4313      	orrs	r3, r2
 800f996:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f998:	68fb      	ldr	r3, [r7, #12]
 800f99a:	697a      	ldr	r2, [r7, #20]
 800f99c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f99e:	68fb      	ldr	r3, [r7, #12]
 800f9a0:	693a      	ldr	r2, [r7, #16]
 800f9a2:	621a      	str	r2, [r3, #32]
}
 800f9a4:	bf00      	nop
 800f9a6:	371c      	adds	r7, #28
 800f9a8:	46bd      	mov	sp, r7
 800f9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ae:	4770      	bx	lr

0800f9b0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800f9b0:	b480      	push	{r7}
 800f9b2:	b087      	sub	sp, #28
 800f9b4:	af00      	add	r7, sp, #0
 800f9b6:	60f8      	str	r0, [r7, #12]
 800f9b8:	60b9      	str	r1, [r7, #8]
 800f9ba:	607a      	str	r2, [r7, #4]
 800f9bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f9be:	68fb      	ldr	r3, [r7, #12]
 800f9c0:	6a1b      	ldr	r3, [r3, #32]
 800f9c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f9c6:	68fb      	ldr	r3, [r7, #12]
 800f9c8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800f9ca:	68fb      	ldr	r3, [r7, #12]
 800f9cc:	69db      	ldr	r3, [r3, #28]
 800f9ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	6a1b      	ldr	r3, [r3, #32]
 800f9d4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800f9d6:	697b      	ldr	r3, [r7, #20]
 800f9d8:	f023 0303 	bic.w	r3, r3, #3
 800f9dc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800f9de:	697a      	ldr	r2, [r7, #20]
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	4313      	orrs	r3, r2
 800f9e4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800f9e6:	697b      	ldr	r3, [r7, #20]
 800f9e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f9ec:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800f9ee:	683b      	ldr	r3, [r7, #0]
 800f9f0:	011b      	lsls	r3, r3, #4
 800f9f2:	b2db      	uxtb	r3, r3
 800f9f4:	697a      	ldr	r2, [r7, #20]
 800f9f6:	4313      	orrs	r3, r2
 800f9f8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800f9fa:	693b      	ldr	r3, [r7, #16]
 800f9fc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800fa00:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800fa02:	68bb      	ldr	r3, [r7, #8]
 800fa04:	021b      	lsls	r3, r3, #8
 800fa06:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800fa0a:	693a      	ldr	r2, [r7, #16]
 800fa0c:	4313      	orrs	r3, r2
 800fa0e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	697a      	ldr	r2, [r7, #20]
 800fa14:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800fa16:	68fb      	ldr	r3, [r7, #12]
 800fa18:	693a      	ldr	r2, [r7, #16]
 800fa1a:	621a      	str	r2, [r3, #32]
}
 800fa1c:	bf00      	nop
 800fa1e:	371c      	adds	r7, #28
 800fa20:	46bd      	mov	sp, r7
 800fa22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa26:	4770      	bx	lr

0800fa28 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800fa28:	b480      	push	{r7}
 800fa2a:	b087      	sub	sp, #28
 800fa2c:	af00      	add	r7, sp, #0
 800fa2e:	60f8      	str	r0, [r7, #12]
 800fa30:	60b9      	str	r1, [r7, #8]
 800fa32:	607a      	str	r2, [r7, #4]
 800fa34:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800fa36:	68fb      	ldr	r3, [r7, #12]
 800fa38:	6a1b      	ldr	r3, [r3, #32]
 800fa3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800fa42:	68fb      	ldr	r3, [r7, #12]
 800fa44:	69db      	ldr	r3, [r3, #28]
 800fa46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800fa48:	68fb      	ldr	r3, [r7, #12]
 800fa4a:	6a1b      	ldr	r3, [r3, #32]
 800fa4c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800fa4e:	697b      	ldr	r3, [r7, #20]
 800fa50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fa54:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	021b      	lsls	r3, r3, #8
 800fa5a:	697a      	ldr	r2, [r7, #20]
 800fa5c:	4313      	orrs	r3, r2
 800fa5e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800fa60:	697b      	ldr	r3, [r7, #20]
 800fa62:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800fa66:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800fa68:	683b      	ldr	r3, [r7, #0]
 800fa6a:	031b      	lsls	r3, r3, #12
 800fa6c:	b29b      	uxth	r3, r3
 800fa6e:	697a      	ldr	r2, [r7, #20]
 800fa70:	4313      	orrs	r3, r2
 800fa72:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800fa74:	693b      	ldr	r3, [r7, #16]
 800fa76:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800fa7a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800fa7c:	68bb      	ldr	r3, [r7, #8]
 800fa7e:	031b      	lsls	r3, r3, #12
 800fa80:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800fa84:	693a      	ldr	r2, [r7, #16]
 800fa86:	4313      	orrs	r3, r2
 800fa88:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	697a      	ldr	r2, [r7, #20]
 800fa8e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	693a      	ldr	r2, [r7, #16]
 800fa94:	621a      	str	r2, [r3, #32]
}
 800fa96:	bf00      	nop
 800fa98:	371c      	adds	r7, #28
 800fa9a:	46bd      	mov	sp, r7
 800fa9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faa0:	4770      	bx	lr

0800faa2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800faa2:	b480      	push	{r7}
 800faa4:	b085      	sub	sp, #20
 800faa6:	af00      	add	r7, sp, #0
 800faa8:	6078      	str	r0, [r7, #4]
 800faaa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	689b      	ldr	r3, [r3, #8]
 800fab0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800fab2:	68fb      	ldr	r3, [r7, #12]
 800fab4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800fab8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fabc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800fabe:	683a      	ldr	r2, [r7, #0]
 800fac0:	68fb      	ldr	r3, [r7, #12]
 800fac2:	4313      	orrs	r3, r2
 800fac4:	f043 0307 	orr.w	r3, r3, #7
 800fac8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	68fa      	ldr	r2, [r7, #12]
 800face:	609a      	str	r2, [r3, #8]
}
 800fad0:	bf00      	nop
 800fad2:	3714      	adds	r7, #20
 800fad4:	46bd      	mov	sp, r7
 800fad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fada:	4770      	bx	lr

0800fadc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800fadc:	b480      	push	{r7}
 800fade:	b087      	sub	sp, #28
 800fae0:	af00      	add	r7, sp, #0
 800fae2:	60f8      	str	r0, [r7, #12]
 800fae4:	60b9      	str	r1, [r7, #8]
 800fae6:	607a      	str	r2, [r7, #4]
 800fae8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	689b      	ldr	r3, [r3, #8]
 800faee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800faf0:	697b      	ldr	r3, [r7, #20]
 800faf2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800faf6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800faf8:	683b      	ldr	r3, [r7, #0]
 800fafa:	021a      	lsls	r2, r3, #8
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	431a      	orrs	r2, r3
 800fb00:	68bb      	ldr	r3, [r7, #8]
 800fb02:	4313      	orrs	r3, r2
 800fb04:	697a      	ldr	r2, [r7, #20]
 800fb06:	4313      	orrs	r3, r2
 800fb08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fb0a:	68fb      	ldr	r3, [r7, #12]
 800fb0c:	697a      	ldr	r2, [r7, #20]
 800fb0e:	609a      	str	r2, [r3, #8]
}
 800fb10:	bf00      	nop
 800fb12:	371c      	adds	r7, #28
 800fb14:	46bd      	mov	sp, r7
 800fb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb1a:	4770      	bx	lr

0800fb1c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800fb1c:	b480      	push	{r7}
 800fb1e:	b087      	sub	sp, #28
 800fb20:	af00      	add	r7, sp, #0
 800fb22:	60f8      	str	r0, [r7, #12]
 800fb24:	60b9      	str	r1, [r7, #8]
 800fb26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800fb28:	68bb      	ldr	r3, [r7, #8]
 800fb2a:	f003 031f 	and.w	r3, r3, #31
 800fb2e:	2201      	movs	r2, #1
 800fb30:	fa02 f303 	lsl.w	r3, r2, r3
 800fb34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800fb36:	68fb      	ldr	r3, [r7, #12]
 800fb38:	6a1a      	ldr	r2, [r3, #32]
 800fb3a:	697b      	ldr	r3, [r7, #20]
 800fb3c:	43db      	mvns	r3, r3
 800fb3e:	401a      	ands	r2, r3
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800fb44:	68fb      	ldr	r3, [r7, #12]
 800fb46:	6a1a      	ldr	r2, [r3, #32]
 800fb48:	68bb      	ldr	r3, [r7, #8]
 800fb4a:	f003 031f 	and.w	r3, r3, #31
 800fb4e:	6879      	ldr	r1, [r7, #4]
 800fb50:	fa01 f303 	lsl.w	r3, r1, r3
 800fb54:	431a      	orrs	r2, r3
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	621a      	str	r2, [r3, #32]
}
 800fb5a:	bf00      	nop
 800fb5c:	371c      	adds	r7, #28
 800fb5e:	46bd      	mov	sp, r7
 800fb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb64:	4770      	bx	lr
	...

0800fb68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800fb68:	b480      	push	{r7}
 800fb6a:	b085      	sub	sp, #20
 800fb6c:	af00      	add	r7, sp, #0
 800fb6e:	6078      	str	r0, [r7, #4]
 800fb70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fb78:	2b01      	cmp	r3, #1
 800fb7a:	d101      	bne.n	800fb80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fb7c:	2302      	movs	r3, #2
 800fb7e:	e074      	b.n	800fc6a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	2201      	movs	r2, #1
 800fb84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	2202      	movs	r2, #2
 800fb8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	685b      	ldr	r3, [r3, #4]
 800fb96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	681b      	ldr	r3, [r3, #0]
 800fb9c:	689b      	ldr	r3, [r3, #8]
 800fb9e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	4a34      	ldr	r2, [pc, #208]	; (800fc78 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800fba6:	4293      	cmp	r3, r2
 800fba8:	d009      	beq.n	800fbbe <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	4a33      	ldr	r2, [pc, #204]	; (800fc7c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800fbb0:	4293      	cmp	r3, r2
 800fbb2:	d004      	beq.n	800fbbe <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	681b      	ldr	r3, [r3, #0]
 800fbb8:	4a31      	ldr	r2, [pc, #196]	; (800fc80 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800fbba:	4293      	cmp	r3, r2
 800fbbc:	d108      	bne.n	800fbd0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800fbbe:	68fb      	ldr	r3, [r7, #12]
 800fbc0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800fbc4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800fbc6:	683b      	ldr	r3, [r7, #0]
 800fbc8:	685b      	ldr	r3, [r3, #4]
 800fbca:	68fa      	ldr	r2, [r7, #12]
 800fbcc:	4313      	orrs	r3, r2
 800fbce:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800fbd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fbda:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fbdc:	683b      	ldr	r3, [r7, #0]
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	68fa      	ldr	r2, [r7, #12]
 800fbe2:	4313      	orrs	r3, r2
 800fbe4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	681b      	ldr	r3, [r3, #0]
 800fbea:	68fa      	ldr	r2, [r7, #12]
 800fbec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	681b      	ldr	r3, [r3, #0]
 800fbf2:	4a21      	ldr	r2, [pc, #132]	; (800fc78 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800fbf4:	4293      	cmp	r3, r2
 800fbf6:	d022      	beq.n	800fc3e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	681b      	ldr	r3, [r3, #0]
 800fbfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fc00:	d01d      	beq.n	800fc3e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	4a1f      	ldr	r2, [pc, #124]	; (800fc84 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800fc08:	4293      	cmp	r3, r2
 800fc0a:	d018      	beq.n	800fc3e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	4a1d      	ldr	r2, [pc, #116]	; (800fc88 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800fc12:	4293      	cmp	r3, r2
 800fc14:	d013      	beq.n	800fc3e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	681b      	ldr	r3, [r3, #0]
 800fc1a:	4a1c      	ldr	r2, [pc, #112]	; (800fc8c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800fc1c:	4293      	cmp	r3, r2
 800fc1e:	d00e      	beq.n	800fc3e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	4a15      	ldr	r2, [pc, #84]	; (800fc7c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800fc26:	4293      	cmp	r3, r2
 800fc28:	d009      	beq.n	800fc3e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	4a18      	ldr	r2, [pc, #96]	; (800fc90 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800fc30:	4293      	cmp	r3, r2
 800fc32:	d004      	beq.n	800fc3e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	681b      	ldr	r3, [r3, #0]
 800fc38:	4a11      	ldr	r2, [pc, #68]	; (800fc80 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800fc3a:	4293      	cmp	r3, r2
 800fc3c:	d10c      	bne.n	800fc58 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800fc3e:	68bb      	ldr	r3, [r7, #8]
 800fc40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fc44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800fc46:	683b      	ldr	r3, [r7, #0]
 800fc48:	689b      	ldr	r3, [r3, #8]
 800fc4a:	68ba      	ldr	r2, [r7, #8]
 800fc4c:	4313      	orrs	r3, r2
 800fc4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	68ba      	ldr	r2, [r7, #8]
 800fc56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	2201      	movs	r2, #1
 800fc5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	2200      	movs	r2, #0
 800fc64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fc68:	2300      	movs	r3, #0
}
 800fc6a:	4618      	mov	r0, r3
 800fc6c:	3714      	adds	r7, #20
 800fc6e:	46bd      	mov	sp, r7
 800fc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc74:	4770      	bx	lr
 800fc76:	bf00      	nop
 800fc78:	40012c00 	.word	0x40012c00
 800fc7c:	40013400 	.word	0x40013400
 800fc80:	40015000 	.word	0x40015000
 800fc84:	40000400 	.word	0x40000400
 800fc88:	40000800 	.word	0x40000800
 800fc8c:	40000c00 	.word	0x40000c00
 800fc90:	40014000 	.word	0x40014000

0800fc94 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800fc94:	b480      	push	{r7}
 800fc96:	b085      	sub	sp, #20
 800fc98:	af00      	add	r7, sp, #0
 800fc9a:	6078      	str	r0, [r7, #4]
 800fc9c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800fc9e:	2300      	movs	r3, #0
 800fca0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fca8:	2b01      	cmp	r3, #1
 800fcaa:	d101      	bne.n	800fcb0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800fcac:	2302      	movs	r3, #2
 800fcae:	e096      	b.n	800fdde <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	2201      	movs	r2, #1
 800fcb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800fcb8:	68fb      	ldr	r3, [r7, #12]
 800fcba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800fcbe:	683b      	ldr	r3, [r7, #0]
 800fcc0:	68db      	ldr	r3, [r3, #12]
 800fcc2:	4313      	orrs	r3, r2
 800fcc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800fcc6:	68fb      	ldr	r3, [r7, #12]
 800fcc8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800fccc:	683b      	ldr	r3, [r7, #0]
 800fcce:	689b      	ldr	r3, [r3, #8]
 800fcd0:	4313      	orrs	r3, r2
 800fcd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800fcda:	683b      	ldr	r3, [r7, #0]
 800fcdc:	685b      	ldr	r3, [r3, #4]
 800fcde:	4313      	orrs	r3, r2
 800fce0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800fce2:	68fb      	ldr	r3, [r7, #12]
 800fce4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800fce8:	683b      	ldr	r3, [r7, #0]
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	4313      	orrs	r3, r2
 800fcee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800fcf0:	68fb      	ldr	r3, [r7, #12]
 800fcf2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fcf6:	683b      	ldr	r3, [r7, #0]
 800fcf8:	691b      	ldr	r3, [r3, #16]
 800fcfa:	4313      	orrs	r3, r2
 800fcfc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800fd04:	683b      	ldr	r3, [r7, #0]
 800fd06:	695b      	ldr	r3, [r3, #20]
 800fd08:	4313      	orrs	r3, r2
 800fd0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800fd12:	683b      	ldr	r3, [r7, #0]
 800fd14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd16:	4313      	orrs	r3, r2
 800fd18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800fd1a:	68fb      	ldr	r3, [r7, #12]
 800fd1c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800fd20:	683b      	ldr	r3, [r7, #0]
 800fd22:	699b      	ldr	r3, [r3, #24]
 800fd24:	041b      	lsls	r3, r3, #16
 800fd26:	4313      	orrs	r3, r2
 800fd28:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	681b      	ldr	r3, [r3, #0]
 800fd2e:	4a2f      	ldr	r2, [pc, #188]	; (800fdec <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800fd30:	4293      	cmp	r3, r2
 800fd32:	d009      	beq.n	800fd48 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	4a2d      	ldr	r2, [pc, #180]	; (800fdf0 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800fd3a:	4293      	cmp	r3, r2
 800fd3c:	d004      	beq.n	800fd48 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	4a2c      	ldr	r2, [pc, #176]	; (800fdf4 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800fd44:	4293      	cmp	r3, r2
 800fd46:	d106      	bne.n	800fd56 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800fd4e:	683b      	ldr	r3, [r7, #0]
 800fd50:	69db      	ldr	r3, [r3, #28]
 800fd52:	4313      	orrs	r3, r2
 800fd54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	4a24      	ldr	r2, [pc, #144]	; (800fdec <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800fd5c:	4293      	cmp	r3, r2
 800fd5e:	d009      	beq.n	800fd74 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	681b      	ldr	r3, [r3, #0]
 800fd64:	4a22      	ldr	r2, [pc, #136]	; (800fdf0 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800fd66:	4293      	cmp	r3, r2
 800fd68:	d004      	beq.n	800fd74 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	681b      	ldr	r3, [r3, #0]
 800fd6e:	4a21      	ldr	r2, [pc, #132]	; (800fdf4 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800fd70:	4293      	cmp	r3, r2
 800fd72:	d12b      	bne.n	800fdcc <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800fd74:	68fb      	ldr	r3, [r7, #12]
 800fd76:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800fd7a:	683b      	ldr	r3, [r7, #0]
 800fd7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd7e:	051b      	lsls	r3, r3, #20
 800fd80:	4313      	orrs	r3, r2
 800fd82:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800fd84:	68fb      	ldr	r3, [r7, #12]
 800fd86:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800fd8a:	683b      	ldr	r3, [r7, #0]
 800fd8c:	6a1b      	ldr	r3, [r3, #32]
 800fd8e:	4313      	orrs	r3, r2
 800fd90:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800fd92:	68fb      	ldr	r3, [r7, #12]
 800fd94:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800fd98:	683b      	ldr	r3, [r7, #0]
 800fd9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd9c:	4313      	orrs	r3, r2
 800fd9e:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	4a11      	ldr	r2, [pc, #68]	; (800fdec <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800fda6:	4293      	cmp	r3, r2
 800fda8:	d009      	beq.n	800fdbe <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	681b      	ldr	r3, [r3, #0]
 800fdae:	4a10      	ldr	r2, [pc, #64]	; (800fdf0 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800fdb0:	4293      	cmp	r3, r2
 800fdb2:	d004      	beq.n	800fdbe <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	681b      	ldr	r3, [r3, #0]
 800fdb8:	4a0e      	ldr	r2, [pc, #56]	; (800fdf4 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800fdba:	4293      	cmp	r3, r2
 800fdbc:	d106      	bne.n	800fdcc <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800fdc4:	683b      	ldr	r3, [r7, #0]
 800fdc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fdc8:	4313      	orrs	r3, r2
 800fdca:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	681b      	ldr	r3, [r3, #0]
 800fdd0:	68fa      	ldr	r2, [r7, #12]
 800fdd2:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	2200      	movs	r2, #0
 800fdd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fddc:	2300      	movs	r3, #0
}
 800fdde:	4618      	mov	r0, r3
 800fde0:	3714      	adds	r7, #20
 800fde2:	46bd      	mov	sp, r7
 800fde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fde8:	4770      	bx	lr
 800fdea:	bf00      	nop
 800fdec:	40012c00 	.word	0x40012c00
 800fdf0:	40013400 	.word	0x40013400
 800fdf4:	40015000 	.word	0x40015000

0800fdf8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800fdf8:	b480      	push	{r7}
 800fdfa:	b083      	sub	sp, #12
 800fdfc:	af00      	add	r7, sp, #0
 800fdfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800fe00:	bf00      	nop
 800fe02:	370c      	adds	r7, #12
 800fe04:	46bd      	mov	sp, r7
 800fe06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe0a:	4770      	bx	lr

0800fe0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800fe0c:	b480      	push	{r7}
 800fe0e:	b083      	sub	sp, #12
 800fe10:	af00      	add	r7, sp, #0
 800fe12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800fe14:	bf00      	nop
 800fe16:	370c      	adds	r7, #12
 800fe18:	46bd      	mov	sp, r7
 800fe1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe1e:	4770      	bx	lr

0800fe20 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800fe20:	b480      	push	{r7}
 800fe22:	b083      	sub	sp, #12
 800fe24:	af00      	add	r7, sp, #0
 800fe26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800fe28:	bf00      	nop
 800fe2a:	370c      	adds	r7, #12
 800fe2c:	46bd      	mov	sp, r7
 800fe2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe32:	4770      	bx	lr

0800fe34 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800fe34:	b480      	push	{r7}
 800fe36:	b083      	sub	sp, #12
 800fe38:	af00      	add	r7, sp, #0
 800fe3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800fe3c:	bf00      	nop
 800fe3e:	370c      	adds	r7, #12
 800fe40:	46bd      	mov	sp, r7
 800fe42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe46:	4770      	bx	lr

0800fe48 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800fe48:	b480      	push	{r7}
 800fe4a:	b083      	sub	sp, #12
 800fe4c:	af00      	add	r7, sp, #0
 800fe4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800fe50:	bf00      	nop
 800fe52:	370c      	adds	r7, #12
 800fe54:	46bd      	mov	sp, r7
 800fe56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe5a:	4770      	bx	lr

0800fe5c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800fe5c:	b480      	push	{r7}
 800fe5e:	b083      	sub	sp, #12
 800fe60:	af00      	add	r7, sp, #0
 800fe62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800fe64:	bf00      	nop
 800fe66:	370c      	adds	r7, #12
 800fe68:	46bd      	mov	sp, r7
 800fe6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe6e:	4770      	bx	lr

0800fe70 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800fe70:	b480      	push	{r7}
 800fe72:	b083      	sub	sp, #12
 800fe74:	af00      	add	r7, sp, #0
 800fe76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800fe78:	bf00      	nop
 800fe7a:	370c      	adds	r7, #12
 800fe7c:	46bd      	mov	sp, r7
 800fe7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe82:	4770      	bx	lr

0800fe84 <LL_EXTI_EnableIT_0_31>:
{
 800fe84:	b480      	push	{r7}
 800fe86:	b083      	sub	sp, #12
 800fe88:	af00      	add	r7, sp, #0
 800fe8a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800fe8c:	4b05      	ldr	r3, [pc, #20]	; (800fea4 <LL_EXTI_EnableIT_0_31+0x20>)
 800fe8e:	681a      	ldr	r2, [r3, #0]
 800fe90:	4904      	ldr	r1, [pc, #16]	; (800fea4 <LL_EXTI_EnableIT_0_31+0x20>)
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	4313      	orrs	r3, r2
 800fe96:	600b      	str	r3, [r1, #0]
}
 800fe98:	bf00      	nop
 800fe9a:	370c      	adds	r7, #12
 800fe9c:	46bd      	mov	sp, r7
 800fe9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fea2:	4770      	bx	lr
 800fea4:	40010400 	.word	0x40010400

0800fea8 <LL_EXTI_EnableIT_32_63>:
{
 800fea8:	b480      	push	{r7}
 800feaa:	b083      	sub	sp, #12
 800feac:	af00      	add	r7, sp, #0
 800feae:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800feb0:	4b05      	ldr	r3, [pc, #20]	; (800fec8 <LL_EXTI_EnableIT_32_63+0x20>)
 800feb2:	6a1a      	ldr	r2, [r3, #32]
 800feb4:	4904      	ldr	r1, [pc, #16]	; (800fec8 <LL_EXTI_EnableIT_32_63+0x20>)
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	4313      	orrs	r3, r2
 800feba:	620b      	str	r3, [r1, #32]
}
 800febc:	bf00      	nop
 800febe:	370c      	adds	r7, #12
 800fec0:	46bd      	mov	sp, r7
 800fec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fec6:	4770      	bx	lr
 800fec8:	40010400 	.word	0x40010400

0800fecc <LL_EXTI_DisableIT_0_31>:
{
 800fecc:	b480      	push	{r7}
 800fece:	b083      	sub	sp, #12
 800fed0:	af00      	add	r7, sp, #0
 800fed2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800fed4:	4b06      	ldr	r3, [pc, #24]	; (800fef0 <LL_EXTI_DisableIT_0_31+0x24>)
 800fed6:	681a      	ldr	r2, [r3, #0]
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	43db      	mvns	r3, r3
 800fedc:	4904      	ldr	r1, [pc, #16]	; (800fef0 <LL_EXTI_DisableIT_0_31+0x24>)
 800fede:	4013      	ands	r3, r2
 800fee0:	600b      	str	r3, [r1, #0]
}
 800fee2:	bf00      	nop
 800fee4:	370c      	adds	r7, #12
 800fee6:	46bd      	mov	sp, r7
 800fee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feec:	4770      	bx	lr
 800feee:	bf00      	nop
 800fef0:	40010400 	.word	0x40010400

0800fef4 <LL_EXTI_DisableIT_32_63>:
{
 800fef4:	b480      	push	{r7}
 800fef6:	b083      	sub	sp, #12
 800fef8:	af00      	add	r7, sp, #0
 800fefa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 800fefc:	4b06      	ldr	r3, [pc, #24]	; (800ff18 <LL_EXTI_DisableIT_32_63+0x24>)
 800fefe:	6a1a      	ldr	r2, [r3, #32]
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	43db      	mvns	r3, r3
 800ff04:	4904      	ldr	r1, [pc, #16]	; (800ff18 <LL_EXTI_DisableIT_32_63+0x24>)
 800ff06:	4013      	ands	r3, r2
 800ff08:	620b      	str	r3, [r1, #32]
}
 800ff0a:	bf00      	nop
 800ff0c:	370c      	adds	r7, #12
 800ff0e:	46bd      	mov	sp, r7
 800ff10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff14:	4770      	bx	lr
 800ff16:	bf00      	nop
 800ff18:	40010400 	.word	0x40010400

0800ff1c <LL_EXTI_EnableEvent_0_31>:
{
 800ff1c:	b480      	push	{r7}
 800ff1e:	b083      	sub	sp, #12
 800ff20:	af00      	add	r7, sp, #0
 800ff22:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 800ff24:	4b05      	ldr	r3, [pc, #20]	; (800ff3c <LL_EXTI_EnableEvent_0_31+0x20>)
 800ff26:	685a      	ldr	r2, [r3, #4]
 800ff28:	4904      	ldr	r1, [pc, #16]	; (800ff3c <LL_EXTI_EnableEvent_0_31+0x20>)
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	4313      	orrs	r3, r2
 800ff2e:	604b      	str	r3, [r1, #4]
}
 800ff30:	bf00      	nop
 800ff32:	370c      	adds	r7, #12
 800ff34:	46bd      	mov	sp, r7
 800ff36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff3a:	4770      	bx	lr
 800ff3c:	40010400 	.word	0x40010400

0800ff40 <LL_EXTI_EnableEvent_32_63>:
{
 800ff40:	b480      	push	{r7}
 800ff42:	b083      	sub	sp, #12
 800ff44:	af00      	add	r7, sp, #0
 800ff46:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 800ff48:	4b05      	ldr	r3, [pc, #20]	; (800ff60 <LL_EXTI_EnableEvent_32_63+0x20>)
 800ff4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ff4c:	4904      	ldr	r1, [pc, #16]	; (800ff60 <LL_EXTI_EnableEvent_32_63+0x20>)
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	4313      	orrs	r3, r2
 800ff52:	624b      	str	r3, [r1, #36]	; 0x24
}
 800ff54:	bf00      	nop
 800ff56:	370c      	adds	r7, #12
 800ff58:	46bd      	mov	sp, r7
 800ff5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff5e:	4770      	bx	lr
 800ff60:	40010400 	.word	0x40010400

0800ff64 <LL_EXTI_DisableEvent_0_31>:
{
 800ff64:	b480      	push	{r7}
 800ff66:	b083      	sub	sp, #12
 800ff68:	af00      	add	r7, sp, #0
 800ff6a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800ff6c:	4b06      	ldr	r3, [pc, #24]	; (800ff88 <LL_EXTI_DisableEvent_0_31+0x24>)
 800ff6e:	685a      	ldr	r2, [r3, #4]
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	43db      	mvns	r3, r3
 800ff74:	4904      	ldr	r1, [pc, #16]	; (800ff88 <LL_EXTI_DisableEvent_0_31+0x24>)
 800ff76:	4013      	ands	r3, r2
 800ff78:	604b      	str	r3, [r1, #4]
}
 800ff7a:	bf00      	nop
 800ff7c:	370c      	adds	r7, #12
 800ff7e:	46bd      	mov	sp, r7
 800ff80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff84:	4770      	bx	lr
 800ff86:	bf00      	nop
 800ff88:	40010400 	.word	0x40010400

0800ff8c <LL_EXTI_DisableEvent_32_63>:
{
 800ff8c:	b480      	push	{r7}
 800ff8e:	b083      	sub	sp, #12
 800ff90:	af00      	add	r7, sp, #0
 800ff92:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 800ff94:	4b06      	ldr	r3, [pc, #24]	; (800ffb0 <LL_EXTI_DisableEvent_32_63+0x24>)
 800ff96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	43db      	mvns	r3, r3
 800ff9c:	4904      	ldr	r1, [pc, #16]	; (800ffb0 <LL_EXTI_DisableEvent_32_63+0x24>)
 800ff9e:	4013      	ands	r3, r2
 800ffa0:	624b      	str	r3, [r1, #36]	; 0x24
}
 800ffa2:	bf00      	nop
 800ffa4:	370c      	adds	r7, #12
 800ffa6:	46bd      	mov	sp, r7
 800ffa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffac:	4770      	bx	lr
 800ffae:	bf00      	nop
 800ffb0:	40010400 	.word	0x40010400

0800ffb4 <LL_EXTI_EnableRisingTrig_0_31>:
{
 800ffb4:	b480      	push	{r7}
 800ffb6:	b083      	sub	sp, #12
 800ffb8:	af00      	add	r7, sp, #0
 800ffba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800ffbc:	4b05      	ldr	r3, [pc, #20]	; (800ffd4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800ffbe:	689a      	ldr	r2, [r3, #8]
 800ffc0:	4904      	ldr	r1, [pc, #16]	; (800ffd4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	4313      	orrs	r3, r2
 800ffc6:	608b      	str	r3, [r1, #8]
}
 800ffc8:	bf00      	nop
 800ffca:	370c      	adds	r7, #12
 800ffcc:	46bd      	mov	sp, r7
 800ffce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffd2:	4770      	bx	lr
 800ffd4:	40010400 	.word	0x40010400

0800ffd8 <LL_EXTI_EnableRisingTrig_32_63>:
{
 800ffd8:	b480      	push	{r7}
 800ffda:	b083      	sub	sp, #12
 800ffdc:	af00      	add	r7, sp, #0
 800ffde:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800ffe0:	4b05      	ldr	r3, [pc, #20]	; (800fff8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800ffe2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ffe4:	4904      	ldr	r1, [pc, #16]	; (800fff8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	4313      	orrs	r3, r2
 800ffea:	628b      	str	r3, [r1, #40]	; 0x28
}
 800ffec:	bf00      	nop
 800ffee:	370c      	adds	r7, #12
 800fff0:	46bd      	mov	sp, r7
 800fff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fff6:	4770      	bx	lr
 800fff8:	40010400 	.word	0x40010400

0800fffc <LL_EXTI_DisableRisingTrig_0_31>:
{
 800fffc:	b480      	push	{r7}
 800fffe:	b083      	sub	sp, #12
 8010000:	af00      	add	r7, sp, #0
 8010002:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8010004:	4b06      	ldr	r3, [pc, #24]	; (8010020 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8010006:	689a      	ldr	r2, [r3, #8]
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	43db      	mvns	r3, r3
 801000c:	4904      	ldr	r1, [pc, #16]	; (8010020 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 801000e:	4013      	ands	r3, r2
 8010010:	608b      	str	r3, [r1, #8]
}
 8010012:	bf00      	nop
 8010014:	370c      	adds	r7, #12
 8010016:	46bd      	mov	sp, r7
 8010018:	f85d 7b04 	ldr.w	r7, [sp], #4
 801001c:	4770      	bx	lr
 801001e:	bf00      	nop
 8010020:	40010400 	.word	0x40010400

08010024 <LL_EXTI_DisableRisingTrig_32_63>:
{
 8010024:	b480      	push	{r7}
 8010026:	b083      	sub	sp, #12
 8010028:	af00      	add	r7, sp, #0
 801002a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 801002c:	4b06      	ldr	r3, [pc, #24]	; (8010048 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 801002e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	43db      	mvns	r3, r3
 8010034:	4904      	ldr	r1, [pc, #16]	; (8010048 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8010036:	4013      	ands	r3, r2
 8010038:	628b      	str	r3, [r1, #40]	; 0x28
}
 801003a:	bf00      	nop
 801003c:	370c      	adds	r7, #12
 801003e:	46bd      	mov	sp, r7
 8010040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010044:	4770      	bx	lr
 8010046:	bf00      	nop
 8010048:	40010400 	.word	0x40010400

0801004c <LL_EXTI_EnableFallingTrig_0_31>:
{
 801004c:	b480      	push	{r7}
 801004e:	b083      	sub	sp, #12
 8010050:	af00      	add	r7, sp, #0
 8010052:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8010054:	4b05      	ldr	r3, [pc, #20]	; (801006c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8010056:	68da      	ldr	r2, [r3, #12]
 8010058:	4904      	ldr	r1, [pc, #16]	; (801006c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	4313      	orrs	r3, r2
 801005e:	60cb      	str	r3, [r1, #12]
}
 8010060:	bf00      	nop
 8010062:	370c      	adds	r7, #12
 8010064:	46bd      	mov	sp, r7
 8010066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801006a:	4770      	bx	lr
 801006c:	40010400 	.word	0x40010400

08010070 <LL_EXTI_EnableFallingTrig_32_63>:
{
 8010070:	b480      	push	{r7}
 8010072:	b083      	sub	sp, #12
 8010074:	af00      	add	r7, sp, #0
 8010076:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8010078:	4b05      	ldr	r3, [pc, #20]	; (8010090 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 801007a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801007c:	4904      	ldr	r1, [pc, #16]	; (8010090 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	4313      	orrs	r3, r2
 8010082:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8010084:	bf00      	nop
 8010086:	370c      	adds	r7, #12
 8010088:	46bd      	mov	sp, r7
 801008a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801008e:	4770      	bx	lr
 8010090:	40010400 	.word	0x40010400

08010094 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8010094:	b480      	push	{r7}
 8010096:	b083      	sub	sp, #12
 8010098:	af00      	add	r7, sp, #0
 801009a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 801009c:	4b06      	ldr	r3, [pc, #24]	; (80100b8 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 801009e:	68da      	ldr	r2, [r3, #12]
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	43db      	mvns	r3, r3
 80100a4:	4904      	ldr	r1, [pc, #16]	; (80100b8 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80100a6:	4013      	ands	r3, r2
 80100a8:	60cb      	str	r3, [r1, #12]
}
 80100aa:	bf00      	nop
 80100ac:	370c      	adds	r7, #12
 80100ae:	46bd      	mov	sp, r7
 80100b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100b4:	4770      	bx	lr
 80100b6:	bf00      	nop
 80100b8:	40010400 	.word	0x40010400

080100bc <LL_EXTI_DisableFallingTrig_32_63>:
{
 80100bc:	b480      	push	{r7}
 80100be:	b083      	sub	sp, #12
 80100c0:	af00      	add	r7, sp, #0
 80100c2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 80100c4:	4b06      	ldr	r3, [pc, #24]	; (80100e0 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80100c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	43db      	mvns	r3, r3
 80100cc:	4904      	ldr	r1, [pc, #16]	; (80100e0 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80100ce:	4013      	ands	r3, r2
 80100d0:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80100d2:	bf00      	nop
 80100d4:	370c      	adds	r7, #12
 80100d6:	46bd      	mov	sp, r7
 80100d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100dc:	4770      	bx	lr
 80100de:	bf00      	nop
 80100e0:	40010400 	.word	0x40010400

080100e4 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other calue : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 80100e4:	b580      	push	{r7, lr}
 80100e6:	b084      	sub	sp, #16
 80100e8:	af00      	add	r7, sp, #0
 80100ea:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 80100ec:	2300      	movs	r3, #0
 80100ee:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	7a1b      	ldrb	r3, [r3, #8]
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	f000 80c8 	beq.w	801028a <LL_EXTI_Init+0x1a6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d05d      	beq.n	80101be <LL_EXTI_Init+0xda>
    {
      switch (EXTI_InitStruct->Mode)
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	7a5b      	ldrb	r3, [r3, #9]
 8010106:	2b01      	cmp	r3, #1
 8010108:	d00e      	beq.n	8010128 <LL_EXTI_Init+0x44>
 801010a:	2b02      	cmp	r3, #2
 801010c:	d017      	beq.n	801013e <LL_EXTI_Init+0x5a>
 801010e:	2b00      	cmp	r3, #0
 8010110:	d120      	bne.n	8010154 <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	681b      	ldr	r3, [r3, #0]
 8010116:	4618      	mov	r0, r3
 8010118:	f7ff ff24 	bl	800ff64 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	681b      	ldr	r3, [r3, #0]
 8010120:	4618      	mov	r0, r3
 8010122:	f7ff feaf 	bl	800fe84 <LL_EXTI_EnableIT_0_31>
          break;
 8010126:	e018      	b.n	801015a <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	4618      	mov	r0, r3
 801012e:	f7ff fecd 	bl	800fecc <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	4618      	mov	r0, r3
 8010138:	f7ff fef0 	bl	800ff1c <LL_EXTI_EnableEvent_0_31>
          break;
 801013c:	e00d      	b.n	801015a <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	681b      	ldr	r3, [r3, #0]
 8010142:	4618      	mov	r0, r3
 8010144:	f7ff fe9e 	bl	800fe84 <LL_EXTI_EnableIT_0_31>
          /* Directly Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	681b      	ldr	r3, [r3, #0]
 801014c:	4618      	mov	r0, r3
 801014e:	f7ff fee5 	bl	800ff1c <LL_EXTI_EnableEvent_0_31>
          break;
 8010152:	e002      	b.n	801015a <LL_EXTI_Init+0x76>
        default:
          status = 0x01u;
 8010154:	2301      	movs	r3, #1
 8010156:	60fb      	str	r3, [r7, #12]
          break;
 8010158:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	7a9b      	ldrb	r3, [r3, #10]
 801015e:	2b00      	cmp	r3, #0
 8010160:	d02d      	beq.n	80101be <LL_EXTI_Init+0xda>
      {
        switch (EXTI_InitStruct->Trigger)
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	7a9b      	ldrb	r3, [r3, #10]
 8010166:	2b02      	cmp	r3, #2
 8010168:	d00e      	beq.n	8010188 <LL_EXTI_Init+0xa4>
 801016a:	2b03      	cmp	r3, #3
 801016c:	d017      	beq.n	801019e <LL_EXTI_Init+0xba>
 801016e:	2b01      	cmp	r3, #1
 8010170:	d120      	bne.n	80101b4 <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	681b      	ldr	r3, [r3, #0]
 8010176:	4618      	mov	r0, r3
 8010178:	f7ff ff8c 	bl	8010094 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	4618      	mov	r0, r3
 8010182:	f7ff ff17 	bl	800ffb4 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8010186:	e01b      	b.n	80101c0 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	4618      	mov	r0, r3
 801018e:	f7ff ff35 	bl	800fffc <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	681b      	ldr	r3, [r3, #0]
 8010196:	4618      	mov	r0, r3
 8010198:	f7ff ff58 	bl	801004c <LL_EXTI_EnableFallingTrig_0_31>
            break;
 801019c:	e010      	b.n	80101c0 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	681b      	ldr	r3, [r3, #0]
 80101a2:	4618      	mov	r0, r3
 80101a4:	f7ff ff06 	bl	800ffb4 <LL_EXTI_EnableRisingTrig_0_31>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	4618      	mov	r0, r3
 80101ae:	f7ff ff4d 	bl	801004c <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80101b2:	e005      	b.n	80101c0 <LL_EXTI_Init+0xdc>
          default:
            status |= 0x02u;
 80101b4:	68fb      	ldr	r3, [r7, #12]
 80101b6:	f043 0302 	orr.w	r3, r3, #2
 80101ba:	60fb      	str	r3, [r7, #12]
            break;
 80101bc:	e000      	b.n	80101c0 <LL_EXTI_Init+0xdc>
        }
      }
 80101be:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	685b      	ldr	r3, [r3, #4]
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d075      	beq.n	80102b4 <LL_EXTI_Init+0x1d0>
    {
      switch (EXTI_InitStruct->Mode)
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	7a5b      	ldrb	r3, [r3, #9]
 80101cc:	2b01      	cmp	r3, #1
 80101ce:	d00e      	beq.n	80101ee <LL_EXTI_Init+0x10a>
 80101d0:	2b02      	cmp	r3, #2
 80101d2:	d017      	beq.n	8010204 <LL_EXTI_Init+0x120>
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d120      	bne.n	801021a <LL_EXTI_Init+0x136>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	685b      	ldr	r3, [r3, #4]
 80101dc:	4618      	mov	r0, r3
 80101de:	f7ff fed5 	bl	800ff8c <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	685b      	ldr	r3, [r3, #4]
 80101e6:	4618      	mov	r0, r3
 80101e8:	f7ff fe5e 	bl	800fea8 <LL_EXTI_EnableIT_32_63>
          break;
 80101ec:	e01a      	b.n	8010224 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	685b      	ldr	r3, [r3, #4]
 80101f2:	4618      	mov	r0, r3
 80101f4:	f7ff fe7e 	bl	800fef4 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	685b      	ldr	r3, [r3, #4]
 80101fc:	4618      	mov	r0, r3
 80101fe:	f7ff fe9f 	bl	800ff40 <LL_EXTI_EnableEvent_32_63>
          break;
 8010202:	e00f      	b.n	8010224 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	685b      	ldr	r3, [r3, #4]
 8010208:	4618      	mov	r0, r3
 801020a:	f7ff fe4d 	bl	800fea8 <LL_EXTI_EnableIT_32_63>
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	685b      	ldr	r3, [r3, #4]
 8010212:	4618      	mov	r0, r3
 8010214:	f7ff fe94 	bl	800ff40 <LL_EXTI_EnableEvent_32_63>
          break;
 8010218:	e004      	b.n	8010224 <LL_EXTI_Init+0x140>
        default:
          status |= 0x04u;
 801021a:	68fb      	ldr	r3, [r7, #12]
 801021c:	f043 0304 	orr.w	r3, r3, #4
 8010220:	60fb      	str	r3, [r7, #12]
          break;
 8010222:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	7a9b      	ldrb	r3, [r3, #10]
 8010228:	2b00      	cmp	r3, #0
 801022a:	d043      	beq.n	80102b4 <LL_EXTI_Init+0x1d0>
      {
        switch (EXTI_InitStruct->Trigger)
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	7a9b      	ldrb	r3, [r3, #10]
 8010230:	2b02      	cmp	r3, #2
 8010232:	d00e      	beq.n	8010252 <LL_EXTI_Init+0x16e>
 8010234:	2b03      	cmp	r3, #3
 8010236:	d017      	beq.n	8010268 <LL_EXTI_Init+0x184>
 8010238:	2b01      	cmp	r3, #1
 801023a:	d120      	bne.n	801027e <LL_EXTI_Init+0x19a>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	685b      	ldr	r3, [r3, #4]
 8010240:	4618      	mov	r0, r3
 8010242:	f7ff ff3b 	bl	80100bc <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	685b      	ldr	r3, [r3, #4]
 801024a:	4618      	mov	r0, r3
 801024c:	f7ff fec4 	bl	800ffd8 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8010250:	e031      	b.n	80102b6 <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	685b      	ldr	r3, [r3, #4]
 8010256:	4618      	mov	r0, r3
 8010258:	f7ff fee4 	bl	8010024 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	685b      	ldr	r3, [r3, #4]
 8010260:	4618      	mov	r0, r3
 8010262:	f7ff ff05 	bl	8010070 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8010266:	e026      	b.n	80102b6 <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	685b      	ldr	r3, [r3, #4]
 801026c:	4618      	mov	r0, r3
 801026e:	f7ff feb3 	bl	800ffd8 <LL_EXTI_EnableRisingTrig_32_63>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	685b      	ldr	r3, [r3, #4]
 8010276:	4618      	mov	r0, r3
 8010278:	f7ff fefa 	bl	8010070 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 801027c:	e01b      	b.n	80102b6 <LL_EXTI_Init+0x1d2>
          default:
            status |= 0x05u;
 801027e:	68fb      	ldr	r3, [r7, #12]
 8010280:	f043 0305 	orr.w	r3, r3, #5
 8010284:	60fb      	str	r3, [r7, #12]
            break;
 8010286:	bf00      	nop
 8010288:	e015      	b.n	80102b6 <LL_EXTI_Init+0x1d2>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure IT EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	4618      	mov	r0, r3
 8010290:	f7ff fe1c 	bl	800fecc <LL_EXTI_DisableIT_0_31>
    /* De-configure Event EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	681b      	ldr	r3, [r3, #0]
 8010298:	4618      	mov	r0, r3
 801029a:	f7ff fe63 	bl	800ff64 <LL_EXTI_DisableEvent_0_31>
    /* De-configure IT EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	685b      	ldr	r3, [r3, #4]
 80102a2:	4618      	mov	r0, r3
 80102a4:	f7ff fe26 	bl	800fef4 <LL_EXTI_DisableIT_32_63>
    /* De-configure Event EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	685b      	ldr	r3, [r3, #4]
 80102ac:	4618      	mov	r0, r3
 80102ae:	f7ff fe6d 	bl	800ff8c <LL_EXTI_DisableEvent_32_63>
 80102b2:	e000      	b.n	80102b6 <LL_EXTI_Init+0x1d2>
      }
 80102b4:	bf00      	nop
  }

  return status;
 80102b6:	68fb      	ldr	r3, [r7, #12]
}
 80102b8:	4618      	mov	r0, r3
 80102ba:	3710      	adds	r7, #16
 80102bc:	46bd      	mov	sp, r7
 80102be:	bd80      	pop	{r7, pc}

080102c0 <LL_GPIO_SetPinMode>:
{
 80102c0:	b480      	push	{r7}
 80102c2:	b089      	sub	sp, #36	; 0x24
 80102c4:	af00      	add	r7, sp, #0
 80102c6:	60f8      	str	r0, [r7, #12]
 80102c8:	60b9      	str	r1, [r7, #8]
 80102ca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80102cc:	68fb      	ldr	r3, [r7, #12]
 80102ce:	681a      	ldr	r2, [r3, #0]
 80102d0:	68bb      	ldr	r3, [r7, #8]
 80102d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80102d4:	697b      	ldr	r3, [r7, #20]
 80102d6:	fa93 f3a3 	rbit	r3, r3
 80102da:	613b      	str	r3, [r7, #16]
  return result;
 80102dc:	693b      	ldr	r3, [r7, #16]
 80102de:	fab3 f383 	clz	r3, r3
 80102e2:	b2db      	uxtb	r3, r3
 80102e4:	005b      	lsls	r3, r3, #1
 80102e6:	2103      	movs	r1, #3
 80102e8:	fa01 f303 	lsl.w	r3, r1, r3
 80102ec:	43db      	mvns	r3, r3
 80102ee:	401a      	ands	r2, r3
 80102f0:	68bb      	ldr	r3, [r7, #8]
 80102f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80102f4:	69fb      	ldr	r3, [r7, #28]
 80102f6:	fa93 f3a3 	rbit	r3, r3
 80102fa:	61bb      	str	r3, [r7, #24]
  return result;
 80102fc:	69bb      	ldr	r3, [r7, #24]
 80102fe:	fab3 f383 	clz	r3, r3
 8010302:	b2db      	uxtb	r3, r3
 8010304:	005b      	lsls	r3, r3, #1
 8010306:	6879      	ldr	r1, [r7, #4]
 8010308:	fa01 f303 	lsl.w	r3, r1, r3
 801030c:	431a      	orrs	r2, r3
 801030e:	68fb      	ldr	r3, [r7, #12]
 8010310:	601a      	str	r2, [r3, #0]
}
 8010312:	bf00      	nop
 8010314:	3724      	adds	r7, #36	; 0x24
 8010316:	46bd      	mov	sp, r7
 8010318:	f85d 7b04 	ldr.w	r7, [sp], #4
 801031c:	4770      	bx	lr

0801031e <LL_GPIO_SetPinOutputType>:
{
 801031e:	b480      	push	{r7}
 8010320:	b085      	sub	sp, #20
 8010322:	af00      	add	r7, sp, #0
 8010324:	60f8      	str	r0, [r7, #12]
 8010326:	60b9      	str	r1, [r7, #8]
 8010328:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 801032a:	68fb      	ldr	r3, [r7, #12]
 801032c:	685a      	ldr	r2, [r3, #4]
 801032e:	68bb      	ldr	r3, [r7, #8]
 8010330:	43db      	mvns	r3, r3
 8010332:	401a      	ands	r2, r3
 8010334:	68bb      	ldr	r3, [r7, #8]
 8010336:	6879      	ldr	r1, [r7, #4]
 8010338:	fb01 f303 	mul.w	r3, r1, r3
 801033c:	431a      	orrs	r2, r3
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	605a      	str	r2, [r3, #4]
}
 8010342:	bf00      	nop
 8010344:	3714      	adds	r7, #20
 8010346:	46bd      	mov	sp, r7
 8010348:	f85d 7b04 	ldr.w	r7, [sp], #4
 801034c:	4770      	bx	lr

0801034e <LL_GPIO_SetPinSpeed>:
{
 801034e:	b480      	push	{r7}
 8010350:	b089      	sub	sp, #36	; 0x24
 8010352:	af00      	add	r7, sp, #0
 8010354:	60f8      	str	r0, [r7, #12]
 8010356:	60b9      	str	r1, [r7, #8]
 8010358:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 801035a:	68fb      	ldr	r3, [r7, #12]
 801035c:	689a      	ldr	r2, [r3, #8]
 801035e:	68bb      	ldr	r3, [r7, #8]
 8010360:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010362:	697b      	ldr	r3, [r7, #20]
 8010364:	fa93 f3a3 	rbit	r3, r3
 8010368:	613b      	str	r3, [r7, #16]
  return result;
 801036a:	693b      	ldr	r3, [r7, #16]
 801036c:	fab3 f383 	clz	r3, r3
 8010370:	b2db      	uxtb	r3, r3
 8010372:	005b      	lsls	r3, r3, #1
 8010374:	2103      	movs	r1, #3
 8010376:	fa01 f303 	lsl.w	r3, r1, r3
 801037a:	43db      	mvns	r3, r3
 801037c:	401a      	ands	r2, r3
 801037e:	68bb      	ldr	r3, [r7, #8]
 8010380:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010382:	69fb      	ldr	r3, [r7, #28]
 8010384:	fa93 f3a3 	rbit	r3, r3
 8010388:	61bb      	str	r3, [r7, #24]
  return result;
 801038a:	69bb      	ldr	r3, [r7, #24]
 801038c:	fab3 f383 	clz	r3, r3
 8010390:	b2db      	uxtb	r3, r3
 8010392:	005b      	lsls	r3, r3, #1
 8010394:	6879      	ldr	r1, [r7, #4]
 8010396:	fa01 f303 	lsl.w	r3, r1, r3
 801039a:	431a      	orrs	r2, r3
 801039c:	68fb      	ldr	r3, [r7, #12]
 801039e:	609a      	str	r2, [r3, #8]
}
 80103a0:	bf00      	nop
 80103a2:	3724      	adds	r7, #36	; 0x24
 80103a4:	46bd      	mov	sp, r7
 80103a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103aa:	4770      	bx	lr

080103ac <LL_GPIO_SetPinPull>:
{
 80103ac:	b480      	push	{r7}
 80103ae:	b089      	sub	sp, #36	; 0x24
 80103b0:	af00      	add	r7, sp, #0
 80103b2:	60f8      	str	r0, [r7, #12]
 80103b4:	60b9      	str	r1, [r7, #8]
 80103b6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80103b8:	68fb      	ldr	r3, [r7, #12]
 80103ba:	68da      	ldr	r2, [r3, #12]
 80103bc:	68bb      	ldr	r3, [r7, #8]
 80103be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80103c0:	697b      	ldr	r3, [r7, #20]
 80103c2:	fa93 f3a3 	rbit	r3, r3
 80103c6:	613b      	str	r3, [r7, #16]
  return result;
 80103c8:	693b      	ldr	r3, [r7, #16]
 80103ca:	fab3 f383 	clz	r3, r3
 80103ce:	b2db      	uxtb	r3, r3
 80103d0:	005b      	lsls	r3, r3, #1
 80103d2:	2103      	movs	r1, #3
 80103d4:	fa01 f303 	lsl.w	r3, r1, r3
 80103d8:	43db      	mvns	r3, r3
 80103da:	401a      	ands	r2, r3
 80103dc:	68bb      	ldr	r3, [r7, #8]
 80103de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80103e0:	69fb      	ldr	r3, [r7, #28]
 80103e2:	fa93 f3a3 	rbit	r3, r3
 80103e6:	61bb      	str	r3, [r7, #24]
  return result;
 80103e8:	69bb      	ldr	r3, [r7, #24]
 80103ea:	fab3 f383 	clz	r3, r3
 80103ee:	b2db      	uxtb	r3, r3
 80103f0:	005b      	lsls	r3, r3, #1
 80103f2:	6879      	ldr	r1, [r7, #4]
 80103f4:	fa01 f303 	lsl.w	r3, r1, r3
 80103f8:	431a      	orrs	r2, r3
 80103fa:	68fb      	ldr	r3, [r7, #12]
 80103fc:	60da      	str	r2, [r3, #12]
}
 80103fe:	bf00      	nop
 8010400:	3724      	adds	r7, #36	; 0x24
 8010402:	46bd      	mov	sp, r7
 8010404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010408:	4770      	bx	lr

0801040a <LL_GPIO_SetAFPin_0_7>:
{
 801040a:	b480      	push	{r7}
 801040c:	b089      	sub	sp, #36	; 0x24
 801040e:	af00      	add	r7, sp, #0
 8010410:	60f8      	str	r0, [r7, #12]
 8010412:	60b9      	str	r1, [r7, #8]
 8010414:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8010416:	68fb      	ldr	r3, [r7, #12]
 8010418:	6a1a      	ldr	r2, [r3, #32]
 801041a:	68bb      	ldr	r3, [r7, #8]
 801041c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801041e:	697b      	ldr	r3, [r7, #20]
 8010420:	fa93 f3a3 	rbit	r3, r3
 8010424:	613b      	str	r3, [r7, #16]
  return result;
 8010426:	693b      	ldr	r3, [r7, #16]
 8010428:	fab3 f383 	clz	r3, r3
 801042c:	b2db      	uxtb	r3, r3
 801042e:	009b      	lsls	r3, r3, #2
 8010430:	210f      	movs	r1, #15
 8010432:	fa01 f303 	lsl.w	r3, r1, r3
 8010436:	43db      	mvns	r3, r3
 8010438:	401a      	ands	r2, r3
 801043a:	68bb      	ldr	r3, [r7, #8]
 801043c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801043e:	69fb      	ldr	r3, [r7, #28]
 8010440:	fa93 f3a3 	rbit	r3, r3
 8010444:	61bb      	str	r3, [r7, #24]
  return result;
 8010446:	69bb      	ldr	r3, [r7, #24]
 8010448:	fab3 f383 	clz	r3, r3
 801044c:	b2db      	uxtb	r3, r3
 801044e:	009b      	lsls	r3, r3, #2
 8010450:	6879      	ldr	r1, [r7, #4]
 8010452:	fa01 f303 	lsl.w	r3, r1, r3
 8010456:	431a      	orrs	r2, r3
 8010458:	68fb      	ldr	r3, [r7, #12]
 801045a:	621a      	str	r2, [r3, #32]
}
 801045c:	bf00      	nop
 801045e:	3724      	adds	r7, #36	; 0x24
 8010460:	46bd      	mov	sp, r7
 8010462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010466:	4770      	bx	lr

08010468 <LL_GPIO_SetAFPin_8_15>:
{
 8010468:	b480      	push	{r7}
 801046a:	b089      	sub	sp, #36	; 0x24
 801046c:	af00      	add	r7, sp, #0
 801046e:	60f8      	str	r0, [r7, #12]
 8010470:	60b9      	str	r1, [r7, #8]
 8010472:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8010474:	68fb      	ldr	r3, [r7, #12]
 8010476:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010478:	68bb      	ldr	r3, [r7, #8]
 801047a:	0a1b      	lsrs	r3, r3, #8
 801047c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801047e:	697b      	ldr	r3, [r7, #20]
 8010480:	fa93 f3a3 	rbit	r3, r3
 8010484:	613b      	str	r3, [r7, #16]
  return result;
 8010486:	693b      	ldr	r3, [r7, #16]
 8010488:	fab3 f383 	clz	r3, r3
 801048c:	b2db      	uxtb	r3, r3
 801048e:	009b      	lsls	r3, r3, #2
 8010490:	210f      	movs	r1, #15
 8010492:	fa01 f303 	lsl.w	r3, r1, r3
 8010496:	43db      	mvns	r3, r3
 8010498:	401a      	ands	r2, r3
 801049a:	68bb      	ldr	r3, [r7, #8]
 801049c:	0a1b      	lsrs	r3, r3, #8
 801049e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80104a0:	69fb      	ldr	r3, [r7, #28]
 80104a2:	fa93 f3a3 	rbit	r3, r3
 80104a6:	61bb      	str	r3, [r7, #24]
  return result;
 80104a8:	69bb      	ldr	r3, [r7, #24]
 80104aa:	fab3 f383 	clz	r3, r3
 80104ae:	b2db      	uxtb	r3, r3
 80104b0:	009b      	lsls	r3, r3, #2
 80104b2:	6879      	ldr	r1, [r7, #4]
 80104b4:	fa01 f303 	lsl.w	r3, r1, r3
 80104b8:	431a      	orrs	r2, r3
 80104ba:	68fb      	ldr	r3, [r7, #12]
 80104bc:	625a      	str	r2, [r3, #36]	; 0x24
}
 80104be:	bf00      	nop
 80104c0:	3724      	adds	r7, #36	; 0x24
 80104c2:	46bd      	mov	sp, r7
 80104c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104c8:	4770      	bx	lr

080104ca <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80104ca:	b580      	push	{r7, lr}
 80104cc:	b086      	sub	sp, #24
 80104ce:	af00      	add	r7, sp, #0
 80104d0:	6078      	str	r0, [r7, #4]
 80104d2:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80104d4:	683b      	ldr	r3, [r7, #0]
 80104d6:	681b      	ldr	r3, [r3, #0]
 80104d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80104da:	68fb      	ldr	r3, [r7, #12]
 80104dc:	fa93 f3a3 	rbit	r3, r3
 80104e0:	60bb      	str	r3, [r7, #8]
  return result;
 80104e2:	68bb      	ldr	r3, [r7, #8]
 80104e4:	fab3 f383 	clz	r3, r3
 80104e8:	b2db      	uxtb	r3, r3
 80104ea:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80104ec:	e040      	b.n	8010570 <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 80104ee:	683b      	ldr	r3, [r7, #0]
 80104f0:	681a      	ldr	r2, [r3, #0]
 80104f2:	2101      	movs	r1, #1
 80104f4:	697b      	ldr	r3, [r7, #20]
 80104f6:	fa01 f303 	lsl.w	r3, r1, r3
 80104fa:	4013      	ands	r3, r2
 80104fc:	613b      	str	r3, [r7, #16]

    if (currentpin != 0x00u)
 80104fe:	693b      	ldr	r3, [r7, #16]
 8010500:	2b00      	cmp	r3, #0
 8010502:	d032      	beq.n	801056a <LL_GPIO_Init+0xa0>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8010504:	683b      	ldr	r3, [r7, #0]
 8010506:	685b      	ldr	r3, [r3, #4]
 8010508:	461a      	mov	r2, r3
 801050a:	6939      	ldr	r1, [r7, #16]
 801050c:	6878      	ldr	r0, [r7, #4]
 801050e:	f7ff fed7 	bl	80102c0 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8010512:	683b      	ldr	r3, [r7, #0]
 8010514:	685b      	ldr	r3, [r3, #4]
 8010516:	2b01      	cmp	r3, #1
 8010518:	d003      	beq.n	8010522 <LL_GPIO_Init+0x58>
 801051a:	683b      	ldr	r3, [r7, #0]
 801051c:	685b      	ldr	r3, [r3, #4]
 801051e:	2b02      	cmp	r3, #2
 8010520:	d106      	bne.n	8010530 <LL_GPIO_Init+0x66>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8010522:	683b      	ldr	r3, [r7, #0]
 8010524:	689b      	ldr	r3, [r3, #8]
 8010526:	461a      	mov	r2, r3
 8010528:	6939      	ldr	r1, [r7, #16]
 801052a:	6878      	ldr	r0, [r7, #4]
 801052c:	f7ff ff0f 	bl	801034e <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8010530:	683b      	ldr	r3, [r7, #0]
 8010532:	691b      	ldr	r3, [r3, #16]
 8010534:	461a      	mov	r2, r3
 8010536:	6939      	ldr	r1, [r7, #16]
 8010538:	6878      	ldr	r0, [r7, #4]
 801053a:	f7ff ff37 	bl	80103ac <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 801053e:	683b      	ldr	r3, [r7, #0]
 8010540:	685b      	ldr	r3, [r3, #4]
 8010542:	2b02      	cmp	r3, #2
 8010544:	d111      	bne.n	801056a <LL_GPIO_Init+0xa0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8010546:	693b      	ldr	r3, [r7, #16]
 8010548:	2bff      	cmp	r3, #255	; 0xff
 801054a:	d807      	bhi.n	801055c <LL_GPIO_Init+0x92>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 801054c:	683b      	ldr	r3, [r7, #0]
 801054e:	695b      	ldr	r3, [r3, #20]
 8010550:	461a      	mov	r2, r3
 8010552:	6939      	ldr	r1, [r7, #16]
 8010554:	6878      	ldr	r0, [r7, #4]
 8010556:	f7ff ff58 	bl	801040a <LL_GPIO_SetAFPin_0_7>
 801055a:	e006      	b.n	801056a <LL_GPIO_Init+0xa0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 801055c:	683b      	ldr	r3, [r7, #0]
 801055e:	695b      	ldr	r3, [r3, #20]
 8010560:	461a      	mov	r2, r3
 8010562:	6939      	ldr	r1, [r7, #16]
 8010564:	6878      	ldr	r0, [r7, #4]
 8010566:	f7ff ff7f 	bl	8010468 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 801056a:	697b      	ldr	r3, [r7, #20]
 801056c:	3301      	adds	r3, #1
 801056e:	617b      	str	r3, [r7, #20]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8010570:	683b      	ldr	r3, [r7, #0]
 8010572:	681a      	ldr	r2, [r3, #0]
 8010574:	697b      	ldr	r3, [r7, #20]
 8010576:	fa22 f303 	lsr.w	r3, r2, r3
 801057a:	2b00      	cmp	r3, #0
 801057c:	d1b7      	bne.n	80104ee <LL_GPIO_Init+0x24>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 801057e:	683b      	ldr	r3, [r7, #0]
 8010580:	685b      	ldr	r3, [r3, #4]
 8010582:	2b01      	cmp	r3, #1
 8010584:	d003      	beq.n	801058e <LL_GPIO_Init+0xc4>
 8010586:	683b      	ldr	r3, [r7, #0]
 8010588:	685b      	ldr	r3, [r3, #4]
 801058a:	2b02      	cmp	r3, #2
 801058c:	d107      	bne.n	801059e <LL_GPIO_Init+0xd4>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 801058e:	683b      	ldr	r3, [r7, #0]
 8010590:	6819      	ldr	r1, [r3, #0]
 8010592:	683b      	ldr	r3, [r7, #0]
 8010594:	68db      	ldr	r3, [r3, #12]
 8010596:	461a      	mov	r2, r3
 8010598:	6878      	ldr	r0, [r7, #4]
 801059a:	f7ff fec0 	bl	801031e <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 801059e:	2300      	movs	r3, #0
}
 80105a0:	4618      	mov	r0, r3
 80105a2:	3718      	adds	r7, #24
 80105a4:	46bd      	mov	sp, r7
 80105a6:	bd80      	pop	{r7, pc}

080105a8 <ILI9341_Draw_Wave>:

 extern uint16_t BURST_MAX_SIZE;


void ILI9341_Draw_Wave(uint16_t x, uint16_t y, uint8_t weight, uint16_t colour, uint8_t scale, uint32_t* data_table, uint16_t data_table_size)
{
 80105a8:	b590      	push	{r4, r7, lr}
 80105aa:	b085      	sub	sp, #20
 80105ac:	af00      	add	r7, sp, #0
 80105ae:	4604      	mov	r4, r0
 80105b0:	4608      	mov	r0, r1
 80105b2:	4611      	mov	r1, r2
 80105b4:	461a      	mov	r2, r3
 80105b6:	4623      	mov	r3, r4
 80105b8:	80fb      	strh	r3, [r7, #6]
 80105ba:	4603      	mov	r3, r0
 80105bc:	80bb      	strh	r3, [r7, #4]
 80105be:	460b      	mov	r3, r1
 80105c0:	70fb      	strb	r3, [r7, #3]
 80105c2:	4613      	mov	r3, r2
 80105c4:	803b      	strh	r3, [r7, #0]
	for(int w = 0; w < weight; w++ )
 80105c6:	2300      	movs	r3, #0
 80105c8:	60fb      	str	r3, [r7, #12]
 80105ca:	e026      	b.n	801061a <ILI9341_Draw_Wave+0x72>
	{
		for(int i = 0; i < data_table_size; i++)
 80105cc:	2300      	movs	r3, #0
 80105ce:	60bb      	str	r3, [r7, #8]
 80105d0:	e01c      	b.n	801060c <ILI9341_Draw_Wave+0x64>
		{
			ILI9341_Draw_Pixel(	x + i,	(y + data_table[i] / scale) + w, colour);
 80105d2:	68bb      	ldr	r3, [r7, #8]
 80105d4:	b29a      	uxth	r2, r3
 80105d6:	88fb      	ldrh	r3, [r7, #6]
 80105d8:	4413      	add	r3, r2
 80105da:	b298      	uxth	r0, r3
 80105dc:	68bb      	ldr	r3, [r7, #8]
 80105de:	009b      	lsls	r3, r3, #2
 80105e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80105e2:	4413      	add	r3, r2
 80105e4:	681a      	ldr	r2, [r3, #0]
 80105e6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80105ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80105ee:	b29a      	uxth	r2, r3
 80105f0:	88bb      	ldrh	r3, [r7, #4]
 80105f2:	4413      	add	r3, r2
 80105f4:	b29a      	uxth	r2, r3
 80105f6:	68fb      	ldr	r3, [r7, #12]
 80105f8:	b29b      	uxth	r3, r3
 80105fa:	4413      	add	r3, r2
 80105fc:	b29b      	uxth	r3, r3
 80105fe:	883a      	ldrh	r2, [r7, #0]
 8010600:	4619      	mov	r1, r3
 8010602:	f000 fc1f 	bl	8010e44 <ILI9341_Draw_Pixel>
		for(int i = 0; i < data_table_size; i++)
 8010606:	68bb      	ldr	r3, [r7, #8]
 8010608:	3301      	adds	r3, #1
 801060a:	60bb      	str	r3, [r7, #8]
 801060c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801060e:	68ba      	ldr	r2, [r7, #8]
 8010610:	429a      	cmp	r2, r3
 8010612:	dbde      	blt.n	80105d2 <ILI9341_Draw_Wave+0x2a>
	for(int w = 0; w < weight; w++ )
 8010614:	68fb      	ldr	r3, [r7, #12]
 8010616:	3301      	adds	r3, #1
 8010618:	60fb      	str	r3, [r7, #12]
 801061a:	78fb      	ldrb	r3, [r7, #3]
 801061c:	68fa      	ldr	r2, [r7, #12]
 801061e:	429a      	cmp	r2, r3
 8010620:	dbd4      	blt.n	80105cc <ILI9341_Draw_Wave+0x24>

		}
	}

}
 8010622:	bf00      	nop
 8010624:	3714      	adds	r7, #20
 8010626:	46bd      	mov	sp, r7
 8010628:	bd90      	pop	{r4, r7, pc}

0801062a <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>:
 *
 *
 *
 */
void ILI9341_Draw_Bordered_Filled_Rectangle_Coord(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t inner_colour, uint8_t border_weight, uint16_t border_colour)
{
 801062a:	b590      	push	{r4, r7, lr}
 801062c:	b087      	sub	sp, #28
 801062e:	af02      	add	r7, sp, #8
 8010630:	4604      	mov	r4, r0
 8010632:	4608      	mov	r0, r1
 8010634:	4611      	mov	r1, r2
 8010636:	461a      	mov	r2, r3
 8010638:	4623      	mov	r3, r4
 801063a:	80fb      	strh	r3, [r7, #6]
 801063c:	4603      	mov	r3, r0
 801063e:	80bb      	strh	r3, [r7, #4]
 8010640:	460b      	mov	r3, r1
 8010642:	807b      	strh	r3, [r7, #2]
 8010644:	4613      	mov	r3, r2
 8010646:	803b      	strh	r3, [r7, #0]

	// Draw inwards (and shorter) for each level of border weight
	for(uint8_t b = 0; ; b++)
 8010648:	2300      	movs	r3, #0
 801064a:	73fb      	strb	r3, [r7, #15]
	{


		if(b > border_weight)
 801064c:	7bfa      	ldrb	r2, [r7, #15]
 801064e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010652:	429a      	cmp	r2, r3
 8010654:	d939      	bls.n	80106ca <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0xa0>
		{

			// stop before the inner space reaches zero! (hard fault)
			if( ((y + b) == ((y + h) - b)) || ((x + b) == ((x + w) - b)) )
 8010656:	88ba      	ldrh	r2, [r7, #4]
 8010658:	7bfb      	ldrb	r3, [r7, #15]
 801065a:	441a      	add	r2, r3
 801065c:	88b9      	ldrh	r1, [r7, #4]
 801065e:	883b      	ldrh	r3, [r7, #0]
 8010660:	4419      	add	r1, r3
 8010662:	7bfb      	ldrb	r3, [r7, #15]
 8010664:	1acb      	subs	r3, r1, r3
 8010666:	429a      	cmp	r2, r3
 8010668:	f000 8089 	beq.w	801077e <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x154>
 801066c:	88fa      	ldrh	r2, [r7, #6]
 801066e:	7bfb      	ldrb	r3, [r7, #15]
 8010670:	441a      	add	r2, r3
 8010672:	88f9      	ldrh	r1, [r7, #6]
 8010674:	887b      	ldrh	r3, [r7, #2]
 8010676:	4419      	add	r1, r3
 8010678:	7bfb      	ldrb	r3, [r7, #15]
 801067a:	1acb      	subs	r3, r1, r3
 801067c:	429a      	cmp	r2, r3
 801067e:	d07e      	beq.n	801077e <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x154>
				// add final line?
				goto finish;
			}
			else
			{
				ILI9341_Draw_Rectangle(x + b, y + b, (w - (2*b)) + 1, (h - (2*b)) + 1, inner_colour, AREA_CHUNK);
 8010680:	7bfb      	ldrb	r3, [r7, #15]
 8010682:	b29a      	uxth	r2, r3
 8010684:	88fb      	ldrh	r3, [r7, #6]
 8010686:	4413      	add	r3, r2
 8010688:	b298      	uxth	r0, r3
 801068a:	7bfb      	ldrb	r3, [r7, #15]
 801068c:	b29a      	uxth	r2, r3
 801068e:	88bb      	ldrh	r3, [r7, #4]
 8010690:	4413      	add	r3, r2
 8010692:	b299      	uxth	r1, r3
 8010694:	7bfb      	ldrb	r3, [r7, #15]
 8010696:	b29b      	uxth	r3, r3
 8010698:	005b      	lsls	r3, r3, #1
 801069a:	b29b      	uxth	r3, r3
 801069c:	887a      	ldrh	r2, [r7, #2]
 801069e:	1ad3      	subs	r3, r2, r3
 80106a0:	b29b      	uxth	r3, r3
 80106a2:	3301      	adds	r3, #1
 80106a4:	b29c      	uxth	r4, r3
 80106a6:	7bfb      	ldrb	r3, [r7, #15]
 80106a8:	b29b      	uxth	r3, r3
 80106aa:	005b      	lsls	r3, r3, #1
 80106ac:	b29b      	uxth	r3, r3
 80106ae:	883a      	ldrh	r2, [r7, #0]
 80106b0:	1ad3      	subs	r3, r2, r3
 80106b2:	b29b      	uxth	r3, r3
 80106b4:	3301      	adds	r3, #1
 80106b6:	b29a      	uxth	r2, r3
 80106b8:	2304      	movs	r3, #4
 80106ba:	9301      	str	r3, [sp, #4]
 80106bc:	8c3b      	ldrh	r3, [r7, #32]
 80106be:	9300      	str	r3, [sp, #0]
 80106c0:	4613      	mov	r3, r2
 80106c2:	4622      	mov	r2, r4
 80106c4:	f000 fd18 	bl	80110f8 <ILI9341_Draw_Rectangle>
				goto finish;
 80106c8:	e05a      	b.n	8010780 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x156>
			}
		}

		// Horizontal line - Top
		ILI9341_Draw_Horizontal_Line(	x + b,
 80106ca:	7bfb      	ldrb	r3, [r7, #15]
 80106cc:	b29a      	uxth	r2, r3
 80106ce:	88fb      	ldrh	r3, [r7, #6]
 80106d0:	4413      	add	r3, r2
 80106d2:	b298      	uxth	r0, r3
 80106d4:	7bfb      	ldrb	r3, [r7, #15]
 80106d6:	b29a      	uxth	r2, r3
 80106d8:	88bb      	ldrh	r3, [r7, #4]
 80106da:	4413      	add	r3, r2
 80106dc:	b299      	uxth	r1, r3
										y + b,
										(w - b)+1,
 80106de:	7bfb      	ldrb	r3, [r7, #15]
 80106e0:	b29b      	uxth	r3, r3
 80106e2:	887a      	ldrh	r2, [r7, #2]
 80106e4:	1ad3      	subs	r3, r2, r3
 80106e6:	b29b      	uxth	r3, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 80106e8:	3301      	adds	r3, #1
 80106ea:	b29a      	uxth	r2, r3
 80106ec:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80106ee:	f000 fa6b 	bl	8010bc8 <ILI9341_Draw_Horizontal_Line>
										border_colour);
		// Horizontal line - Bottom
		ILI9341_Draw_Horizontal_Line(	x + b,
 80106f2:	7bfb      	ldrb	r3, [r7, #15]
 80106f4:	b29a      	uxth	r2, r3
 80106f6:	88fb      	ldrh	r3, [r7, #6]
 80106f8:	4413      	add	r3, r2
 80106fa:	b298      	uxth	r0, r3
										(y + h) - b,
 80106fc:	88ba      	ldrh	r2, [r7, #4]
 80106fe:	883b      	ldrh	r3, [r7, #0]
 8010700:	4413      	add	r3, r2
 8010702:	b29a      	uxth	r2, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 8010704:	7bfb      	ldrb	r3, [r7, #15]
 8010706:	b29b      	uxth	r3, r3
 8010708:	1ad3      	subs	r3, r2, r3
 801070a:	b299      	uxth	r1, r3
										(w - b)+1,
 801070c:	7bfb      	ldrb	r3, [r7, #15]
 801070e:	b29b      	uxth	r3, r3
 8010710:	887a      	ldrh	r2, [r7, #2]
 8010712:	1ad3      	subs	r3, r2, r3
 8010714:	b29b      	uxth	r3, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 8010716:	3301      	adds	r3, #1
 8010718:	b29a      	uxth	r2, r3
 801071a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801071c:	f000 fa54 	bl	8010bc8 <ILI9341_Draw_Horizontal_Line>
										border_colour);


		// Vertical line - left
		ILI9341_Draw_Vertical_Line(		x + b,
 8010720:	7bfb      	ldrb	r3, [r7, #15]
 8010722:	b29a      	uxth	r2, r3
 8010724:	88fb      	ldrh	r3, [r7, #6]
 8010726:	4413      	add	r3, r2
 8010728:	b298      	uxth	r0, r3
 801072a:	7bfb      	ldrb	r3, [r7, #15]
 801072c:	b29a      	uxth	r2, r3
 801072e:	88bb      	ldrh	r3, [r7, #4]
 8010730:	4413      	add	r3, r2
 8010732:	b299      	uxth	r1, r3
 8010734:	7bfb      	ldrb	r3, [r7, #15]
 8010736:	b29b      	uxth	r3, r3
 8010738:	005b      	lsls	r3, r3, #1
 801073a:	b29b      	uxth	r3, r3
 801073c:	883a      	ldrh	r2, [r7, #0]
 801073e:	1ad3      	subs	r3, r2, r3
 8010740:	b29a      	uxth	r2, r3
 8010742:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010744:	f000 faa4 	bl	8010c90 <ILI9341_Draw_Vertical_Line>
										y + b,
										h - (2*b),
										border_colour);
		// Vertical line - right
		ILI9341_Draw_Vertical_Line(		((x + w)) - (b),
 8010748:	88fa      	ldrh	r2, [r7, #6]
 801074a:	887b      	ldrh	r3, [r7, #2]
 801074c:	4413      	add	r3, r2
 801074e:	b29a      	uxth	r2, r3
 8010750:	7bfb      	ldrb	r3, [r7, #15]
 8010752:	b29b      	uxth	r3, r3
 8010754:	1ad3      	subs	r3, r2, r3
 8010756:	b298      	uxth	r0, r3
 8010758:	7bfb      	ldrb	r3, [r7, #15]
 801075a:	b29a      	uxth	r2, r3
 801075c:	88bb      	ldrh	r3, [r7, #4]
 801075e:	4413      	add	r3, r2
 8010760:	b299      	uxth	r1, r3
 8010762:	7bfb      	ldrb	r3, [r7, #15]
 8010764:	b29b      	uxth	r3, r3
 8010766:	005b      	lsls	r3, r3, #1
 8010768:	b29b      	uxth	r3, r3
 801076a:	883a      	ldrh	r2, [r7, #0]
 801076c:	1ad3      	subs	r3, r2, r3
 801076e:	b29a      	uxth	r2, r3
 8010770:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010772:	f000 fa8d 	bl	8010c90 <ILI9341_Draw_Vertical_Line>
	for(uint8_t b = 0; ; b++)
 8010776:	7bfb      	ldrb	r3, [r7, #15]
 8010778:	3301      	adds	r3, #1
 801077a:	73fb      	strb	r3, [r7, #15]
		if(b > border_weight)
 801077c:	e766      	b.n	801064c <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x22>
										h - (2*b),
										border_colour);

	}

	finish:
 801077e:	bf00      	nop
	// done
	return;
 8010780:	bf00      	nop
}
 8010782:	3714      	adds	r7, #20
 8010784:	46bd      	mov	sp, r7
 8010786:	bd90      	pop	{r4, r7, pc}

08010788 <ILI9341_Draw_Char>:
 *	@retval None
 *
 */

void ILI9341_Draw_Char(char character, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 8010788:	b590      	push	{r4, r7, lr}
 801078a:	b089      	sub	sp, #36	; 0x24
 801078c:	af02      	add	r7, sp, #8
 801078e:	4604      	mov	r4, r0
 8010790:	4608      	mov	r0, r1
 8010792:	4611      	mov	r1, r2
 8010794:	461a      	mov	r2, r3
 8010796:	4623      	mov	r3, r4
 8010798:	71fb      	strb	r3, [r7, #7]
 801079a:	4603      	mov	r3, r0
 801079c:	80bb      	strh	r3, [r7, #4]
 801079e:	460b      	mov	r3, r1
 80107a0:	807b      	strh	r3, [r7, #2]
 80107a2:	4613      	mov	r3, r2
 80107a4:	803b      	strh	r3, [r7, #0]
    uint8_t 	i,j;
		



	function_char = character;
 80107a6:	79fb      	ldrb	r3, [r7, #7]
 80107a8:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ')
 80107aa:	7dfb      	ldrb	r3, [r7, #23]
 80107ac:	2b1f      	cmp	r3, #31
 80107ae:	d802      	bhi.n	80107b6 <ILI9341_Draw_Char+0x2e>
    {
        character = 0;
 80107b0:	2300      	movs	r3, #0
 80107b2:	71fb      	strb	r3, [r7, #7]
 80107b4:	e002      	b.n	80107bc <ILI9341_Draw_Char+0x34>
    }
    else
    {
    	function_char -= 32;
 80107b6:	7dfb      	ldrb	r3, [r7, #23]
 80107b8:	3b20      	subs	r3, #32
 80107ba:	75fb      	strb	r3, [r7, #23]
	}
   	
	char temp[CHAR_WIDTH];

	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 80107bc:	2300      	movs	r3, #0
 80107be:	753b      	strb	r3, [r7, #20]
 80107c0:	e012      	b.n	80107e8 <ILI9341_Draw_Char+0x60>
	{
		temp[k] = font[function_char][k];
 80107c2:	7dfa      	ldrb	r2, [r7, #23]
 80107c4:	7d38      	ldrb	r0, [r7, #20]
 80107c6:	7d39      	ldrb	r1, [r7, #20]
 80107c8:	4c48      	ldr	r4, [pc, #288]	; (80108ec <ILI9341_Draw_Char+0x164>)
 80107ca:	4613      	mov	r3, r2
 80107cc:	005b      	lsls	r3, r3, #1
 80107ce:	4413      	add	r3, r2
 80107d0:	005b      	lsls	r3, r3, #1
 80107d2:	4423      	add	r3, r4
 80107d4:	4403      	add	r3, r0
 80107d6:	781a      	ldrb	r2, [r3, #0]
 80107d8:	f107 0318 	add.w	r3, r7, #24
 80107dc:	440b      	add	r3, r1
 80107de:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 80107e2:	7d3b      	ldrb	r3, [r7, #20]
 80107e4:	3301      	adds	r3, #1
 80107e6:	753b      	strb	r3, [r7, #20]
 80107e8:	7d3b      	ldrb	r3, [r7, #20]
 80107ea:	2b05      	cmp	r3, #5
 80107ec:	d9e9      	bls.n	80107c2 <ILI9341_Draw_Char+0x3a>
	}
		
    // Draw pixels
	//ILI9341_Draw_Rectangle(x, Y, CHAR_WIDTH*size, CHAR_HEIGHT*size, bgcolour);
    for (j=0; j<CHAR_WIDTH; j++)
 80107ee:	2300      	movs	r3, #0
 80107f0:	757b      	strb	r3, [r7, #21]
 80107f2:	e074      	b.n	80108de <ILI9341_Draw_Char+0x156>
    {
        for (i=0; i<CHAR_HEIGHT; i++)
 80107f4:	2300      	movs	r3, #0
 80107f6:	75bb      	strb	r3, [r7, #22]
 80107f8:	e06b      	b.n	80108d2 <ILI9341_Draw_Char+0x14a>
        {
            if (temp[j] & (1<<i))
 80107fa:	7d7b      	ldrb	r3, [r7, #21]
 80107fc:	f107 0218 	add.w	r2, r7, #24
 8010800:	4413      	add	r3, r2
 8010802:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8010806:	461a      	mov	r2, r3
 8010808:	7dbb      	ldrb	r3, [r7, #22]
 801080a:	fa42 f303 	asr.w	r3, r2, r3
 801080e:	f003 0301 	and.w	r3, r3, #1
 8010812:	2b00      	cmp	r3, #0
 8010814:	d02d      	beq.n	8010872 <ILI9341_Draw_Char+0xea>
            {
            	if(size == 1)
 8010816:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010818:	2b01      	cmp	r3, #1
 801081a:	d10e      	bne.n	801083a <ILI9341_Draw_Char+0xb2>
				{
            		ILI9341_Draw_Pixel(x+j, y+i, colour);
 801081c:	7d7b      	ldrb	r3, [r7, #21]
 801081e:	b29a      	uxth	r2, r3
 8010820:	88bb      	ldrh	r3, [r7, #4]
 8010822:	4413      	add	r3, r2
 8010824:	b298      	uxth	r0, r3
 8010826:	7dbb      	ldrb	r3, [r7, #22]
 8010828:	b29a      	uxth	r2, r3
 801082a:	887b      	ldrh	r3, [r7, #2]
 801082c:	4413      	add	r3, r2
 801082e:	b29b      	uxth	r3, r3
 8010830:	883a      	ldrh	r2, [r7, #0]
 8010832:	4619      	mov	r1, r3
 8010834:	f000 fb06 	bl	8010e44 <ILI9341_Draw_Pixel>
 8010838:	e048      	b.n	80108cc <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, colour, TEXT_CHUNK);
 801083a:	7d7b      	ldrb	r3, [r7, #21]
 801083c:	b29b      	uxth	r3, r3
 801083e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8010840:	fb12 f303 	smulbb	r3, r2, r3
 8010844:	b29a      	uxth	r2, r3
 8010846:	88bb      	ldrh	r3, [r7, #4]
 8010848:	4413      	add	r3, r2
 801084a:	b298      	uxth	r0, r3
 801084c:	7dbb      	ldrb	r3, [r7, #22]
 801084e:	b29b      	uxth	r3, r3
 8010850:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8010852:	fb12 f303 	smulbb	r3, r2, r3
 8010856:	b29a      	uxth	r2, r3
 8010858:	887b      	ldrh	r3, [r7, #2]
 801085a:	4413      	add	r3, r2
 801085c:	b299      	uxth	r1, r3
 801085e:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 8010860:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8010862:	2301      	movs	r3, #1
 8010864:	9301      	str	r3, [sp, #4]
 8010866:	883b      	ldrh	r3, [r7, #0]
 8010868:	9300      	str	r3, [sp, #0]
 801086a:	4623      	mov	r3, r4
 801086c:	f000 fc44 	bl	80110f8 <ILI9341_Draw_Rectangle>
 8010870:	e02c      	b.n	80108cc <ILI9341_Draw_Char+0x144>
				}
            }
            else
            {
               	if(size == 1)
 8010872:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010874:	2b01      	cmp	r3, #1
 8010876:	d10e      	bne.n	8010896 <ILI9341_Draw_Char+0x10e>
				{
					ILI9341_Draw_Pixel(x+j, y+i, bgcolour);
 8010878:	7d7b      	ldrb	r3, [r7, #21]
 801087a:	b29a      	uxth	r2, r3
 801087c:	88bb      	ldrh	r3, [r7, #4]
 801087e:	4413      	add	r3, r2
 8010880:	b298      	uxth	r0, r3
 8010882:	7dbb      	ldrb	r3, [r7, #22]
 8010884:	b29a      	uxth	r2, r3
 8010886:	887b      	ldrh	r3, [r7, #2]
 8010888:	4413      	add	r3, r2
 801088a:	b29b      	uxth	r3, r3
 801088c:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 801088e:	4619      	mov	r1, r3
 8010890:	f000 fad8 	bl	8010e44 <ILI9341_Draw_Pixel>
 8010894:	e01a      	b.n	80108cc <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, bgcolour, TEXT_CHUNK);
 8010896:	7d7b      	ldrb	r3, [r7, #21]
 8010898:	b29b      	uxth	r3, r3
 801089a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 801089c:	fb12 f303 	smulbb	r3, r2, r3
 80108a0:	b29a      	uxth	r2, r3
 80108a2:	88bb      	ldrh	r3, [r7, #4]
 80108a4:	4413      	add	r3, r2
 80108a6:	b298      	uxth	r0, r3
 80108a8:	7dbb      	ldrb	r3, [r7, #22]
 80108aa:	b29b      	uxth	r3, r3
 80108ac:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80108ae:	fb12 f303 	smulbb	r3, r2, r3
 80108b2:	b29a      	uxth	r2, r3
 80108b4:	887b      	ldrh	r3, [r7, #2]
 80108b6:	4413      	add	r3, r2
 80108b8:	b299      	uxth	r1, r3
 80108ba:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 80108bc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80108be:	2301      	movs	r3, #1
 80108c0:	9301      	str	r3, [sp, #4]
 80108c2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80108c4:	9300      	str	r3, [sp, #0]
 80108c6:	4623      	mov	r3, r4
 80108c8:	f000 fc16 	bl	80110f8 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++)
 80108cc:	7dbb      	ldrb	r3, [r7, #22]
 80108ce:	3301      	adds	r3, #1
 80108d0:	75bb      	strb	r3, [r7, #22]
 80108d2:	7dbb      	ldrb	r3, [r7, #22]
 80108d4:	2b07      	cmp	r3, #7
 80108d6:	d990      	bls.n	80107fa <ILI9341_Draw_Char+0x72>
    for (j=0; j<CHAR_WIDTH; j++)
 80108d8:	7d7b      	ldrb	r3, [r7, #21]
 80108da:	3301      	adds	r3, #1
 80108dc:	757b      	strb	r3, [r7, #21]
 80108de:	7d7b      	ldrb	r3, [r7, #21]
 80108e0:	2b05      	cmp	r3, #5
 80108e2:	d987      	bls.n	80107f4 <ILI9341_Draw_Char+0x6c>
				}
            }
        }
    }
}
 80108e4:	bf00      	nop
 80108e6:	371c      	adds	r7, #28
 80108e8:	46bd      	mov	sp, r7
 80108ea:	bd90      	pop	{r4, r7, pc}
 80108ec:	0801669c 	.word	0x0801669c

080108f0 <ILI9341_Draw_Text>:
 *	@param None
 *	@retval None
 *
 */
void ILI9341_Draw_Text(const char* Text, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 80108f0:	b590      	push	{r4, r7, lr}
 80108f2:	b087      	sub	sp, #28
 80108f4:	af02      	add	r7, sp, #8
 80108f6:	60f8      	str	r0, [r7, #12]
 80108f8:	4608      	mov	r0, r1
 80108fa:	4611      	mov	r1, r2
 80108fc:	461a      	mov	r2, r3
 80108fe:	4603      	mov	r3, r0
 8010900:	817b      	strh	r3, [r7, #10]
 8010902:	460b      	mov	r3, r1
 8010904:	813b      	strh	r3, [r7, #8]
 8010906:	4613      	mov	r3, r2
 8010908:	80fb      	strh	r3, [r7, #6]
	ILI9341_Draw_Vertical_Line(x-1, y, CHAR_HEIGHT*size, bgcolour);
 801090a:	897b      	ldrh	r3, [r7, #10]
 801090c:	3b01      	subs	r3, #1
 801090e:	b298      	uxth	r0, r3
 8010910:	8c3b      	ldrh	r3, [r7, #32]
 8010912:	00db      	lsls	r3, r3, #3
 8010914:	b29a      	uxth	r2, r3
 8010916:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010918:	8939      	ldrh	r1, [r7, #8]
 801091a:	f000 f9b9 	bl	8010c90 <ILI9341_Draw_Vertical_Line>
    ILI9341_Draw_Vertical_Line(x-2, y, CHAR_HEIGHT*size, bgcolour);
 801091e:	897b      	ldrh	r3, [r7, #10]
 8010920:	3b02      	subs	r3, #2
 8010922:	b298      	uxth	r0, r3
 8010924:	8c3b      	ldrh	r3, [r7, #32]
 8010926:	00db      	lsls	r3, r3, #3
 8010928:	b29a      	uxth	r2, r3
 801092a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801092c:	8939      	ldrh	r1, [r7, #8]
 801092e:	f000 f9af 	bl	8010c90 <ILI9341_Draw_Vertical_Line>

    while (*Text) {
 8010932:	e016      	b.n	8010962 <ILI9341_Draw_Text+0x72>
        ILI9341_Draw_Char(*Text++, x, y, colour, size, bgcolour);
 8010934:	68fb      	ldr	r3, [r7, #12]
 8010936:	1c5a      	adds	r2, r3, #1
 8010938:	60fa      	str	r2, [r7, #12]
 801093a:	7818      	ldrb	r0, [r3, #0]
 801093c:	88fc      	ldrh	r4, [r7, #6]
 801093e:	893a      	ldrh	r2, [r7, #8]
 8010940:	8979      	ldrh	r1, [r7, #10]
 8010942:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010944:	9301      	str	r3, [sp, #4]
 8010946:	8c3b      	ldrh	r3, [r7, #32]
 8010948:	9300      	str	r3, [sp, #0]
 801094a:	4623      	mov	r3, r4
 801094c:	f7ff ff1c 	bl	8010788 <ILI9341_Draw_Char>
        x += CHAR_WIDTH*size;
 8010950:	8c3b      	ldrh	r3, [r7, #32]
 8010952:	461a      	mov	r2, r3
 8010954:	0052      	lsls	r2, r2, #1
 8010956:	4413      	add	r3, r2
 8010958:	005b      	lsls	r3, r3, #1
 801095a:	b29a      	uxth	r2, r3
 801095c:	897b      	ldrh	r3, [r7, #10]
 801095e:	4413      	add	r3, r2
 8010960:	817b      	strh	r3, [r7, #10]
    while (*Text) {
 8010962:	68fb      	ldr	r3, [r7, #12]
 8010964:	781b      	ldrb	r3, [r3, #0]
 8010966:	2b00      	cmp	r3, #0
 8010968:	d1e4      	bne.n	8010934 <ILI9341_Draw_Text+0x44>
    }


}
 801096a:	bf00      	nop
 801096c:	3714      	adds	r7, #20
 801096e:	46bd      	mov	sp, r7
 8010970:	bd90      	pop	{r4, r7, pc}

08010972 <ILI9341_Init>:
 *
 * Initialize LCD display
 *
 */
void ILI9341_Init(void)
{
 8010972:	b580      	push	{r7, lr}
 8010974:	af00      	add	r7, sp, #0

	_LCD_Enable();
 8010976:	f000 fca3 	bl	80112c0 <_LCD_Enable>
	ILI9341_SPI_Init();
 801097a:	f000 f907 	bl	8010b8c <ILI9341_SPI_Init>
	_LCD_Reset();
 801097e:	f000 fcaf 	bl	80112e0 <_LCD_Reset>

	//SOFTWARE RESET
	_LCD_SendCommand(0x01);
 8010982:	2001      	movs	r0, #1
 8010984:	f000 fd7a 	bl	801147c <_LCD_SendCommand>
	HAL_Delay(2000);
 8010988:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 801098c:	f7f8 fb02 	bl	8008f94 <HAL_Delay>

	//POWER CONTROL A
	_LCD_SendCommand(0xCB);
 8010990:	20cb      	movs	r0, #203	; 0xcb
 8010992:	f000 fd73 	bl	801147c <_LCD_SendCommand>
	_LCD_SendData(0x39);
 8010996:	2039      	movs	r0, #57	; 0x39
 8010998:	f000 fda2 	bl	80114e0 <_LCD_SendData>
	_LCD_SendData(0x2C);
 801099c:	202c      	movs	r0, #44	; 0x2c
 801099e:	f000 fd9f 	bl	80114e0 <_LCD_SendData>
	_LCD_SendData(0x00);
 80109a2:	2000      	movs	r0, #0
 80109a4:	f000 fd9c 	bl	80114e0 <_LCD_SendData>
	_LCD_SendData(0x34);
 80109a8:	2034      	movs	r0, #52	; 0x34
 80109aa:	f000 fd99 	bl	80114e0 <_LCD_SendData>
	_LCD_SendData(0x02);
 80109ae:	2002      	movs	r0, #2
 80109b0:	f000 fd96 	bl	80114e0 <_LCD_SendData>

	//POWER CONTROL B
	_LCD_SendCommand(0xCF);
 80109b4:	20cf      	movs	r0, #207	; 0xcf
 80109b6:	f000 fd61 	bl	801147c <_LCD_SendCommand>
	_LCD_SendData(0x00);
 80109ba:	2000      	movs	r0, #0
 80109bc:	f000 fd90 	bl	80114e0 <_LCD_SendData>
	_LCD_SendData(0xC1);
 80109c0:	20c1      	movs	r0, #193	; 0xc1
 80109c2:	f000 fd8d 	bl	80114e0 <_LCD_SendData>
	_LCD_SendData(0x30);
 80109c6:	2030      	movs	r0, #48	; 0x30
 80109c8:	f000 fd8a 	bl	80114e0 <_LCD_SendData>

	//DRIVER TIMING CONTROL A
	_LCD_SendCommand(0xE8);
 80109cc:	20e8      	movs	r0, #232	; 0xe8
 80109ce:	f000 fd55 	bl	801147c <_LCD_SendCommand>
	_LCD_SendData(0x85);
 80109d2:	2085      	movs	r0, #133	; 0x85
 80109d4:	f000 fd84 	bl	80114e0 <_LCD_SendData>
	_LCD_SendData(0x00);
 80109d8:	2000      	movs	r0, #0
 80109da:	f000 fd81 	bl	80114e0 <_LCD_SendData>
	_LCD_SendData(0x78);
 80109de:	2078      	movs	r0, #120	; 0x78
 80109e0:	f000 fd7e 	bl	80114e0 <_LCD_SendData>

	//DRIVER TIMING CONTROL B
	_LCD_SendCommand(0xEA);
 80109e4:	20ea      	movs	r0, #234	; 0xea
 80109e6:	f000 fd49 	bl	801147c <_LCD_SendCommand>
	_LCD_SendData(0x00);
 80109ea:	2000      	movs	r0, #0
 80109ec:	f000 fd78 	bl	80114e0 <_LCD_SendData>
	_LCD_SendData(0x00);
 80109f0:	2000      	movs	r0, #0
 80109f2:	f000 fd75 	bl	80114e0 <_LCD_SendData>

	//POWER ON SEQUENCE CONTROL
	_LCD_SendCommand(0xED);
 80109f6:	20ed      	movs	r0, #237	; 0xed
 80109f8:	f000 fd40 	bl	801147c <_LCD_SendCommand>
	_LCD_SendData(0x64);
 80109fc:	2064      	movs	r0, #100	; 0x64
 80109fe:	f000 fd6f 	bl	80114e0 <_LCD_SendData>
	_LCD_SendData(0x03);
 8010a02:	2003      	movs	r0, #3
 8010a04:	f000 fd6c 	bl	80114e0 <_LCD_SendData>
	_LCD_SendData(0x12);
 8010a08:	2012      	movs	r0, #18
 8010a0a:	f000 fd69 	bl	80114e0 <_LCD_SendData>
	_LCD_SendData(0x81);
 8010a0e:	2081      	movs	r0, #129	; 0x81
 8010a10:	f000 fd66 	bl	80114e0 <_LCD_SendData>

	//PUMP RATIO CONTROL
	_LCD_SendCommand(0xF7);
 8010a14:	20f7      	movs	r0, #247	; 0xf7
 8010a16:	f000 fd31 	bl	801147c <_LCD_SendCommand>
	_LCD_SendData(0x20);
 8010a1a:	2020      	movs	r0, #32
 8010a1c:	f000 fd60 	bl	80114e0 <_LCD_SendData>

	//POWER CONTROL,VRH[5:0]
	_LCD_SendCommand(0xC0);
 8010a20:	20c0      	movs	r0, #192	; 0xc0
 8010a22:	f000 fd2b 	bl	801147c <_LCD_SendCommand>
	_LCD_SendData(0x23);
 8010a26:	2023      	movs	r0, #35	; 0x23
 8010a28:	f000 fd5a 	bl	80114e0 <_LCD_SendData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	_LCD_SendCommand(0xC1);
 8010a2c:	20c1      	movs	r0, #193	; 0xc1
 8010a2e:	f000 fd25 	bl	801147c <_LCD_SendCommand>
	_LCD_SendData(0x10);
 8010a32:	2010      	movs	r0, #16
 8010a34:	f000 fd54 	bl	80114e0 <_LCD_SendData>

	//VCM CONTROL
	_LCD_SendCommand(0xC5);
 8010a38:	20c5      	movs	r0, #197	; 0xc5
 8010a3a:	f000 fd1f 	bl	801147c <_LCD_SendCommand>
	_LCD_SendData(0x3E);
 8010a3e:	203e      	movs	r0, #62	; 0x3e
 8010a40:	f000 fd4e 	bl	80114e0 <_LCD_SendData>
	_LCD_SendData(0x28);
 8010a44:	2028      	movs	r0, #40	; 0x28
 8010a46:	f000 fd4b 	bl	80114e0 <_LCD_SendData>

	//VCM CONTROL 2
	_LCD_SendCommand(0xC7);
 8010a4a:	20c7      	movs	r0, #199	; 0xc7
 8010a4c:	f000 fd16 	bl	801147c <_LCD_SendCommand>
	_LCD_SendData(0x86);
 8010a50:	2086      	movs	r0, #134	; 0x86
 8010a52:	f000 fd45 	bl	80114e0 <_LCD_SendData>

	//MEMORY ACCESS CONTROL
	_LCD_SendCommand(0x36);
 8010a56:	2036      	movs	r0, #54	; 0x36
 8010a58:	f000 fd10 	bl	801147c <_LCD_SendCommand>
	_LCD_SendData(0x48);
 8010a5c:	2048      	movs	r0, #72	; 0x48
 8010a5e:	f000 fd3f 	bl	80114e0 <_LCD_SendData>


	//PIXEL FORMAT
	_LCD_SendCommand(0x3A);
 8010a62:	203a      	movs	r0, #58	; 0x3a
 8010a64:	f000 fd0a 	bl	801147c <_LCD_SendCommand>
	_LCD_SendData(0x55);
 8010a68:	2055      	movs	r0, #85	; 0x55
 8010a6a:	f000 fd39 	bl	80114e0 <_LCD_SendData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	_LCD_SendCommand(0xB1);
 8010a6e:	20b1      	movs	r0, #177	; 0xb1
 8010a70:	f000 fd04 	bl	801147c <_LCD_SendCommand>
	_LCD_SendData(0x00);
 8010a74:	2000      	movs	r0, #0
 8010a76:	f000 fd33 	bl	80114e0 <_LCD_SendData>
	_LCD_SendData(0x18);
 8010a7a:	2018      	movs	r0, #24
 8010a7c:	f000 fd30 	bl	80114e0 <_LCD_SendData>

	//DISPLAY FUNCTION CONTROL
	_LCD_SendCommand(0xB6);
 8010a80:	20b6      	movs	r0, #182	; 0xb6
 8010a82:	f000 fcfb 	bl	801147c <_LCD_SendCommand>
	_LCD_SendData(0x08);
 8010a86:	2008      	movs	r0, #8
 8010a88:	f000 fd2a 	bl	80114e0 <_LCD_SendData>
	_LCD_SendData(0x82);
 8010a8c:	2082      	movs	r0, #130	; 0x82
 8010a8e:	f000 fd27 	bl	80114e0 <_LCD_SendData>
	_LCD_SendData(0x27);
 8010a92:	2027      	movs	r0, #39	; 0x27
 8010a94:	f000 fd24 	bl	80114e0 <_LCD_SendData>


	//3GAMMA FUNCTION DISABLE
	_LCD_SendCommand(0xF2);
 8010a98:	20f2      	movs	r0, #242	; 0xf2
 8010a9a:	f000 fcef 	bl	801147c <_LCD_SendCommand>
	_LCD_SendData(0x00);
 8010a9e:	2000      	movs	r0, #0
 8010aa0:	f000 fd1e 	bl	80114e0 <_LCD_SendData>

	//GAMMA CURVE SELECTED
	_LCD_SendCommand(0x26);
 8010aa4:	2026      	movs	r0, #38	; 0x26
 8010aa6:	f000 fce9 	bl	801147c <_LCD_SendCommand>
	_LCD_SendData(0x01);
 8010aaa:	2001      	movs	r0, #1
 8010aac:	f000 fd18 	bl	80114e0 <_LCD_SendData>

	//POSITIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE0);
 8010ab0:	20e0      	movs	r0, #224	; 0xe0
 8010ab2:	f000 fce3 	bl	801147c <_LCD_SendCommand>
	_LCD_SendData(0x0F);
 8010ab6:	200f      	movs	r0, #15
 8010ab8:	f000 fd12 	bl	80114e0 <_LCD_SendData>
	_LCD_SendData(0x31);
 8010abc:	2031      	movs	r0, #49	; 0x31
 8010abe:	f000 fd0f 	bl	80114e0 <_LCD_SendData>
	_LCD_SendData(0x2B);
 8010ac2:	202b      	movs	r0, #43	; 0x2b
 8010ac4:	f000 fd0c 	bl	80114e0 <_LCD_SendData>
	_LCD_SendData(0x0C);
 8010ac8:	200c      	movs	r0, #12
 8010aca:	f000 fd09 	bl	80114e0 <_LCD_SendData>
	_LCD_SendData(0x0E);
 8010ace:	200e      	movs	r0, #14
 8010ad0:	f000 fd06 	bl	80114e0 <_LCD_SendData>
	_LCD_SendData(0x08);
 8010ad4:	2008      	movs	r0, #8
 8010ad6:	f000 fd03 	bl	80114e0 <_LCD_SendData>
	_LCD_SendData(0x4E);
 8010ada:	204e      	movs	r0, #78	; 0x4e
 8010adc:	f000 fd00 	bl	80114e0 <_LCD_SendData>
	_LCD_SendData(0xF1);
 8010ae0:	20f1      	movs	r0, #241	; 0xf1
 8010ae2:	f000 fcfd 	bl	80114e0 <_LCD_SendData>
	_LCD_SendData(0x37);
 8010ae6:	2037      	movs	r0, #55	; 0x37
 8010ae8:	f000 fcfa 	bl	80114e0 <_LCD_SendData>
	_LCD_SendData(0x07);
 8010aec:	2007      	movs	r0, #7
 8010aee:	f000 fcf7 	bl	80114e0 <_LCD_SendData>
	_LCD_SendData(0x10);
 8010af2:	2010      	movs	r0, #16
 8010af4:	f000 fcf4 	bl	80114e0 <_LCD_SendData>
	_LCD_SendData(0x03);
 8010af8:	2003      	movs	r0, #3
 8010afa:	f000 fcf1 	bl	80114e0 <_LCD_SendData>
	_LCD_SendData(0x0E);
 8010afe:	200e      	movs	r0, #14
 8010b00:	f000 fcee 	bl	80114e0 <_LCD_SendData>
	_LCD_SendData(0x09);
 8010b04:	2009      	movs	r0, #9
 8010b06:	f000 fceb 	bl	80114e0 <_LCD_SendData>
	_LCD_SendData(0x00);
 8010b0a:	2000      	movs	r0, #0
 8010b0c:	f000 fce8 	bl	80114e0 <_LCD_SendData>

	//NEGATIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE1);
 8010b10:	20e1      	movs	r0, #225	; 0xe1
 8010b12:	f000 fcb3 	bl	801147c <_LCD_SendCommand>
	_LCD_SendData(0x00);
 8010b16:	2000      	movs	r0, #0
 8010b18:	f000 fce2 	bl	80114e0 <_LCD_SendData>
	_LCD_SendData(0x0E);
 8010b1c:	200e      	movs	r0, #14
 8010b1e:	f000 fcdf 	bl	80114e0 <_LCD_SendData>
	_LCD_SendData(0x14);
 8010b22:	2014      	movs	r0, #20
 8010b24:	f000 fcdc 	bl	80114e0 <_LCD_SendData>
	_LCD_SendData(0x03);
 8010b28:	2003      	movs	r0, #3
 8010b2a:	f000 fcd9 	bl	80114e0 <_LCD_SendData>
	_LCD_SendData(0x11);
 8010b2e:	2011      	movs	r0, #17
 8010b30:	f000 fcd6 	bl	80114e0 <_LCD_SendData>
	_LCD_SendData(0x07);
 8010b34:	2007      	movs	r0, #7
 8010b36:	f000 fcd3 	bl	80114e0 <_LCD_SendData>
	_LCD_SendData(0x31);
 8010b3a:	2031      	movs	r0, #49	; 0x31
 8010b3c:	f000 fcd0 	bl	80114e0 <_LCD_SendData>
	_LCD_SendData(0xC1);
 8010b40:	20c1      	movs	r0, #193	; 0xc1
 8010b42:	f000 fccd 	bl	80114e0 <_LCD_SendData>
	_LCD_SendData(0x48);
 8010b46:	2048      	movs	r0, #72	; 0x48
 8010b48:	f000 fcca 	bl	80114e0 <_LCD_SendData>
	_LCD_SendData(0x08);
 8010b4c:	2008      	movs	r0, #8
 8010b4e:	f000 fcc7 	bl	80114e0 <_LCD_SendData>
	_LCD_SendData(0x0F);
 8010b52:	200f      	movs	r0, #15
 8010b54:	f000 fcc4 	bl	80114e0 <_LCD_SendData>
	_LCD_SendData(0x0C);
 8010b58:	200c      	movs	r0, #12
 8010b5a:	f000 fcc1 	bl	80114e0 <_LCD_SendData>
	_LCD_SendData(0x31);
 8010b5e:	2031      	movs	r0, #49	; 0x31
 8010b60:	f000 fcbe 	bl	80114e0 <_LCD_SendData>
	_LCD_SendData(0x36);
 8010b64:	2036      	movs	r0, #54	; 0x36
 8010b66:	f000 fcbb 	bl	80114e0 <_LCD_SendData>
	_LCD_SendData(0x0F);
 8010b6a:	200f      	movs	r0, #15
 8010b6c:	f000 fcb8 	bl	80114e0 <_LCD_SendData>

	//EXIT SLEEP
	_LCD_SendCommand(0x11);
 8010b70:	2011      	movs	r0, #17
 8010b72:	f000 fc83 	bl	801147c <_LCD_SendCommand>
	HAL_Delay(240);
 8010b76:	20f0      	movs	r0, #240	; 0xf0
 8010b78:	f7f8 fa0c 	bl	8008f94 <HAL_Delay>

	//TURN ON DISPLAY
	_LCD_SendCommand(0x29);
 8010b7c:	2029      	movs	r0, #41	; 0x29
 8010b7e:	f000 fc7d 	bl	801147c <_LCD_SendCommand>

	//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8010b82:	2000      	movs	r0, #0
 8010b84:	f000 fb4e 	bl	8011224 <ILI9341_Set_Rotation>
}
 8010b88:	bf00      	nop
 8010b8a:	bd80      	pop	{r7, pc}

08010b8c <ILI9341_SPI_Init>:
 *
 * 	Initialise SPI peripheral
 *
 */
void ILI9341_SPI_Init(void)
{
 8010b8c:	b480      	push	{r7}
 8010b8e:	af00      	add	r7, sp, #0

   	// check SPI enabled
	if ((SPI_PERIPH->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8010b90:	4b0b      	ldr	r3, [pc, #44]	; (8010bc0 <ILI9341_SPI_Init+0x34>)
 8010b92:	681b      	ldr	r3, [r3, #0]
 8010b94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010b98:	2b40      	cmp	r3, #64	; 0x40
 8010b9a:	d005      	beq.n	8010ba8 <ILI9341_SPI_Init+0x1c>
	{
		SPI_PERIPH->CR1 |= SPI_CR1_SPE;
 8010b9c:	4b08      	ldr	r3, [pc, #32]	; (8010bc0 <ILI9341_SPI_Init+0x34>)
 8010b9e:	681b      	ldr	r3, [r3, #0]
 8010ba0:	4a07      	ldr	r2, [pc, #28]	; (8010bc0 <ILI9341_SPI_Init+0x34>)
 8010ba2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010ba6:	6013      	str	r3, [r2, #0]
	}

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8010ba8:	4b06      	ldr	r3, [pc, #24]	; (8010bc4 <ILI9341_SPI_Init+0x38>)
 8010baa:	695b      	ldr	r3, [r3, #20]
 8010bac:	4a05      	ldr	r2, [pc, #20]	; (8010bc4 <ILI9341_SPI_Init+0x38>)
 8010bae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010bb2:	6153      	str	r3, [r2, #20]
}
 8010bb4:	bf00      	nop
 8010bb6:	46bd      	mov	sp, r7
 8010bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bbc:	4770      	bx	lr
 8010bbe:	bf00      	nop
 8010bc0:	40003c00 	.word	0x40003c00
 8010bc4:	48000400 	.word	0x48000400

08010bc8 <ILI9341_Draw_Horizontal_Line>:
 *	Draw horizontal line
 *
 */

void ILI9341_Draw_Horizontal_Line(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t colour)
{
 8010bc8:	b590      	push	{r4, r7, lr}
 8010bca:	b087      	sub	sp, #28
 8010bcc:	af02      	add	r7, sp, #8
 8010bce:	4604      	mov	r4, r0
 8010bd0:	4608      	mov	r0, r1
 8010bd2:	4611      	mov	r1, r2
 8010bd4:	461a      	mov	r2, r3
 8010bd6:	4623      	mov	r3, r4
 8010bd8:	80fb      	strh	r3, [r7, #6]
 8010bda:	4603      	mov	r3, r0
 8010bdc:	80bb      	strh	r3, [r7, #4]
 8010bde:	460b      	mov	r3, r1
 8010be0:	807b      	strh	r3, [r7, #2]
 8010be2:	4613      	mov	r3, r2
 8010be4:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 8010be6:	4b28      	ldr	r3, [pc, #160]	; (8010c88 <ILI9341_Draw_Horizontal_Line+0xc0>)
 8010be8:	881b      	ldrh	r3, [r3, #0]
 8010bea:	b29b      	uxth	r3, r3
 8010bec:	88fa      	ldrh	r2, [r7, #6]
 8010bee:	429a      	cmp	r2, r3
 8010bf0:	d246      	bcs.n	8010c80 <ILI9341_Draw_Horizontal_Line+0xb8>
 8010bf2:	4b26      	ldr	r3, [pc, #152]	; (8010c8c <ILI9341_Draw_Horizontal_Line+0xc4>)
 8010bf4:	881b      	ldrh	r3, [r3, #0]
 8010bf6:	b29b      	uxth	r3, r3
 8010bf8:	88ba      	ldrh	r2, [r7, #4]
 8010bfa:	429a      	cmp	r2, r3
 8010bfc:	d240      	bcs.n	8010c80 <ILI9341_Draw_Horizontal_Line+0xb8>
	if(((xpos + width) - 1 ) >= LCD_WIDTH)
 8010bfe:	88fa      	ldrh	r2, [r7, #6]
 8010c00:	887b      	ldrh	r3, [r7, #2]
 8010c02:	4413      	add	r3, r2
 8010c04:	3b01      	subs	r3, #1
 8010c06:	4a20      	ldr	r2, [pc, #128]	; (8010c88 <ILI9341_Draw_Horizontal_Line+0xc0>)
 8010c08:	8812      	ldrh	r2, [r2, #0]
 8010c0a:	b292      	uxth	r2, r2
 8010c0c:	4293      	cmp	r3, r2
 8010c0e:	db05      	blt.n	8010c1c <ILI9341_Draw_Horizontal_Line+0x54>
		{
			width= LCD_WIDTH - xpos;
 8010c10:	4b1d      	ldr	r3, [pc, #116]	; (8010c88 <ILI9341_Draw_Horizontal_Line+0xc0>)
 8010c12:	881b      	ldrh	r3, [r3, #0]
 8010c14:	b29a      	uxth	r2, r3
 8010c16:	88fb      	ldrh	r3, [r7, #6]
 8010c18:	1ad3      	subs	r3, r2, r3
 8010c1a:	807b      	strh	r3, [r7, #2]
		}
	ILI9341_Set_Frame(	xpos,
							ypos,
							(xpos + width) - 1,
 8010c1c:	88fa      	ldrh	r2, [r7, #6]
 8010c1e:	887b      	ldrh	r3, [r7, #2]
 8010c20:	4413      	add	r3, r2
 8010c22:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 8010c24:	3b01      	subs	r3, #1
 8010c26:	b29a      	uxth	r2, r3
 8010c28:	88bb      	ldrh	r3, [r7, #4]
 8010c2a:	88b9      	ldrh	r1, [r7, #4]
 8010c2c:	88f8      	ldrh	r0, [r7, #6]
 8010c2e:	f000 f893 	bl	8010d58 <ILI9341_Set_Frame>
	// to keep _LCD_Write_Frame() happy.

	// Note, truncated pixel will be needed at function end.


	uint8_t truncated = 0;
 8010c32:	2300      	movs	r3, #0
 8010c34:	73fb      	strb	r3, [r7, #15]

	if((width & 1) && (width > 1))		// don't round down to zero!
 8010c36:	887b      	ldrh	r3, [r7, #2]
 8010c38:	f003 0301 	and.w	r3, r3, #1
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	d009      	beq.n	8010c54 <ILI9341_Draw_Horizontal_Line+0x8c>
 8010c40:	887b      	ldrh	r3, [r7, #2]
 8010c42:	2b01      	cmp	r3, #1
 8010c44:	d906      	bls.n	8010c54 <ILI9341_Draw_Horizontal_Line+0x8c>
	{
		truncated = 1;
 8010c46:	2301      	movs	r3, #1
 8010c48:	73fb      	strb	r3, [r7, #15]
		width = ((width >> 1) * 2);
 8010c4a:	887b      	ldrh	r3, [r7, #2]
 8010c4c:	085b      	lsrs	r3, r3, #1
 8010c4e:	b29b      	uxth	r3, r3
 8010c50:	005b      	lsls	r3, r3, #1
 8010c52:	807b      	strh	r3, [r7, #2]
	}
	_LCD_Write_Frame(xpos, ypos, colour, width, LINE_CHUNK);
 8010c54:	887c      	ldrh	r4, [r7, #2]
 8010c56:	883a      	ldrh	r2, [r7, #0]
 8010c58:	88b9      	ldrh	r1, [r7, #4]
 8010c5a:	88f8      	ldrh	r0, [r7, #6]
 8010c5c:	2303      	movs	r3, #3
 8010c5e:	9300      	str	r3, [sp, #0]
 8010c60:	4623      	mov	r3, r4
 8010c62:	f000 fb5b 	bl	801131c <_LCD_Write_Frame>
	//
//TODO
	// add the truncated pixel now
	if(truncated)
 8010c66:	7bfb      	ldrb	r3, [r7, #15]
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d00a      	beq.n	8010c82 <ILI9341_Draw_Horizontal_Line+0xba>
	{
		ILI9341_Draw_Pixel(	(xpos + width),
 8010c6c:	88fa      	ldrh	r2, [r7, #6]
 8010c6e:	887b      	ldrh	r3, [r7, #2]
 8010c70:	4413      	add	r3, r2
 8010c72:	b29b      	uxth	r3, r3
 8010c74:	883a      	ldrh	r2, [r7, #0]
 8010c76:	88b9      	ldrh	r1, [r7, #4]
 8010c78:	4618      	mov	r0, r3
 8010c7a:	f000 f8e3 	bl	8010e44 <ILI9341_Draw_Pixel>
 8010c7e:	e000      	b.n	8010c82 <ILI9341_Draw_Horizontal_Line+0xba>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 8010c80:	bf00      	nop
							(ypos),
							colour);
	}


}
 8010c82:	3714      	adds	r7, #20
 8010c84:	46bd      	mov	sp, r7
 8010c86:	bd90      	pop	{r4, r7, pc}
 8010c88:	20000ebe 	.word	0x20000ebe
 8010c8c:	20000ebc 	.word	0x20000ebc

08010c90 <ILI9341_Draw_Vertical_Line>:
 *
 *  Draw vertical line
 *
 */
void ILI9341_Draw_Vertical_Line(uint16_t xpos, uint16_t ypos, uint16_t height, uint16_t colour)
{
 8010c90:	b590      	push	{r4, r7, lr}
 8010c92:	b087      	sub	sp, #28
 8010c94:	af02      	add	r7, sp, #8
 8010c96:	4604      	mov	r4, r0
 8010c98:	4608      	mov	r0, r1
 8010c9a:	4611      	mov	r1, r2
 8010c9c:	461a      	mov	r2, r3
 8010c9e:	4623      	mov	r3, r4
 8010ca0:	80fb      	strh	r3, [r7, #6]
 8010ca2:	4603      	mov	r3, r0
 8010ca4:	80bb      	strh	r3, [r7, #4]
 8010ca6:	460b      	mov	r3, r1
 8010ca8:	807b      	strh	r3, [r7, #2]
 8010caa:	4613      	mov	r3, r2
 8010cac:	803b      	strh	r3, [r7, #0]
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 8010cae:	4b28      	ldr	r3, [pc, #160]	; (8010d50 <ILI9341_Draw_Vertical_Line+0xc0>)
 8010cb0:	881b      	ldrh	r3, [r3, #0]
 8010cb2:	b29b      	uxth	r3, r3
 8010cb4:	88fa      	ldrh	r2, [r7, #6]
 8010cb6:	429a      	cmp	r2, r3
 8010cb8:	d246      	bcs.n	8010d48 <ILI9341_Draw_Vertical_Line+0xb8>
 8010cba:	4b26      	ldr	r3, [pc, #152]	; (8010d54 <ILI9341_Draw_Vertical_Line+0xc4>)
 8010cbc:	881b      	ldrh	r3, [r3, #0]
 8010cbe:	b29b      	uxth	r3, r3
 8010cc0:	88ba      	ldrh	r2, [r7, #4]
 8010cc2:	429a      	cmp	r2, r3
 8010cc4:	d240      	bcs.n	8010d48 <ILI9341_Draw_Vertical_Line+0xb8>
	if(((ypos + height) - 1) >= LCD_HEIGHT)
 8010cc6:	88ba      	ldrh	r2, [r7, #4]
 8010cc8:	887b      	ldrh	r3, [r7, #2]
 8010cca:	4413      	add	r3, r2
 8010ccc:	3b01      	subs	r3, #1
 8010cce:	4a21      	ldr	r2, [pc, #132]	; (8010d54 <ILI9341_Draw_Vertical_Line+0xc4>)
 8010cd0:	8812      	ldrh	r2, [r2, #0]
 8010cd2:	b292      	uxth	r2, r2
 8010cd4:	4293      	cmp	r3, r2
 8010cd6:	db05      	blt.n	8010ce4 <ILI9341_Draw_Vertical_Line+0x54>
	{
		height= LCD_HEIGHT - ypos;
 8010cd8:	4b1e      	ldr	r3, [pc, #120]	; (8010d54 <ILI9341_Draw_Vertical_Line+0xc4>)
 8010cda:	881b      	ldrh	r3, [r3, #0]
 8010cdc:	b29a      	uxth	r2, r3
 8010cde:	88bb      	ldrh	r3, [r7, #4]
 8010ce0:	1ad3      	subs	r3, r2, r3
 8010ce2:	807b      	strh	r3, [r7, #2]
	}

	ILI9341_Set_Frame(xpos, ypos, xpos, (ypos + height) - 1);
 8010ce4:	88ba      	ldrh	r2, [r7, #4]
 8010ce6:	887b      	ldrh	r3, [r7, #2]
 8010ce8:	4413      	add	r3, r2
 8010cea:	b29b      	uxth	r3, r3
 8010cec:	3b01      	subs	r3, #1
 8010cee:	b29b      	uxth	r3, r3
 8010cf0:	88fa      	ldrh	r2, [r7, #6]
 8010cf2:	88b9      	ldrh	r1, [r7, #4]
 8010cf4:	88f8      	ldrh	r0, [r7, #6]
 8010cf6:	f000 f82f 	bl	8010d58 <ILI9341_Set_Frame>

	uint8_t truncated = 0;
 8010cfa:	2300      	movs	r3, #0
 8010cfc:	73fb      	strb	r3, [r7, #15]

	if((height & 1) && (height > 1))		// don't round down to zero!
 8010cfe:	887b      	ldrh	r3, [r7, #2]
 8010d00:	f003 0301 	and.w	r3, r3, #1
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d009      	beq.n	8010d1c <ILI9341_Draw_Vertical_Line+0x8c>
 8010d08:	887b      	ldrh	r3, [r7, #2]
 8010d0a:	2b01      	cmp	r3, #1
 8010d0c:	d906      	bls.n	8010d1c <ILI9341_Draw_Vertical_Line+0x8c>
	{
		truncated = 1;
 8010d0e:	2301      	movs	r3, #1
 8010d10:	73fb      	strb	r3, [r7, #15]
		height = ((height >> 1) * 2);
 8010d12:	887b      	ldrh	r3, [r7, #2]
 8010d14:	085b      	lsrs	r3, r3, #1
 8010d16:	b29b      	uxth	r3, r3
 8010d18:	005b      	lsls	r3, r3, #1
 8010d1a:	807b      	strh	r3, [r7, #2]
//TODO


	//

	if(truncated)
 8010d1c:	7bfb      	ldrb	r3, [r7, #15]
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	d008      	beq.n	8010d34 <ILI9341_Draw_Vertical_Line+0xa4>
	{
		ILI9341_Draw_Pixel(	(xpos),
 8010d22:	88ba      	ldrh	r2, [r7, #4]
 8010d24:	887b      	ldrh	r3, [r7, #2]
 8010d26:	4413      	add	r3, r2
 8010d28:	b299      	uxth	r1, r3
 8010d2a:	883a      	ldrh	r2, [r7, #0]
 8010d2c:	88fb      	ldrh	r3, [r7, #6]
 8010d2e:	4618      	mov	r0, r3
 8010d30:	f000 f888 	bl	8010e44 <ILI9341_Draw_Pixel>
							(ypos + height),
							colour);
	}

	_LCD_Write_Frame(xpos, ypos, colour, height, LINE_CHUNK);
 8010d34:	887c      	ldrh	r4, [r7, #2]
 8010d36:	883a      	ldrh	r2, [r7, #0]
 8010d38:	88b9      	ldrh	r1, [r7, #4]
 8010d3a:	88f8      	ldrh	r0, [r7, #6]
 8010d3c:	2303      	movs	r3, #3
 8010d3e:	9300      	str	r3, [sp, #0]
 8010d40:	4623      	mov	r3, r4
 8010d42:	f000 faeb 	bl	801131c <_LCD_Write_Frame>
 8010d46:	e000      	b.n	8010d4a <ILI9341_Draw_Vertical_Line+0xba>
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 8010d48:	bf00      	nop
}
 8010d4a:	3714      	adds	r7, #20
 8010d4c:	46bd      	mov	sp, r7
 8010d4e:	bd90      	pop	{r4, r7, pc}
 8010d50:	20000ebe 	.word	0x20000ebe
 8010d54:	20000ebc 	.word	0x20000ebc

08010d58 <ILI9341_Set_Frame>:
 *	bottom right of area (ec, ep):
 *	ec 	- 	"end column"
 *	ep	- 	"end page"
 */
void ILI9341_Set_Frame(uint16_t sc, uint16_t sp, uint16_t ec, uint16_t ep)
{
 8010d58:	b590      	push	{r4, r7, lr}
 8010d5a:	b083      	sub	sp, #12
 8010d5c:	af00      	add	r7, sp, #0
 8010d5e:	4604      	mov	r4, r0
 8010d60:	4608      	mov	r0, r1
 8010d62:	4611      	mov	r1, r2
 8010d64:	461a      	mov	r2, r3
 8010d66:	4623      	mov	r3, r4
 8010d68:	80fb      	strh	r3, [r7, #6]
 8010d6a:	4603      	mov	r3, r0
 8010d6c:	80bb      	strh	r3, [r7, #4]
 8010d6e:	460b      	mov	r3, r1
 8010d70:	807b      	strh	r3, [r7, #2]
 8010d72:	4613      	mov	r3, r2
 8010d74:	803b      	strh	r3, [r7, #0]
	// send "Column Address Set" command
	_LCD_SendCommand(0x2A);
 8010d76:	202a      	movs	r0, #42	; 0x2a
 8010d78:	f000 fb80 	bl	801147c <_LCD_SendCommand>
	_LCD_SendData(sc >> 8);
 8010d7c:	88fb      	ldrh	r3, [r7, #6]
 8010d7e:	0a1b      	lsrs	r3, r3, #8
 8010d80:	b29b      	uxth	r3, r3
 8010d82:	b2db      	uxtb	r3, r3
 8010d84:	4618      	mov	r0, r3
 8010d86:	f000 fbab 	bl	80114e0 <_LCD_SendData>
	_LCD_SendData(sc);
 8010d8a:	88fb      	ldrh	r3, [r7, #6]
 8010d8c:	b2db      	uxtb	r3, r3
 8010d8e:	4618      	mov	r0, r3
 8010d90:	f000 fba6 	bl	80114e0 <_LCD_SendData>
	_LCD_SendData(ec >> 8);
 8010d94:	887b      	ldrh	r3, [r7, #2]
 8010d96:	0a1b      	lsrs	r3, r3, #8
 8010d98:	b29b      	uxth	r3, r3
 8010d9a:	b2db      	uxtb	r3, r3
 8010d9c:	4618      	mov	r0, r3
 8010d9e:	f000 fb9f 	bl	80114e0 <_LCD_SendData>
	_LCD_SendData(ec);
 8010da2:	887b      	ldrh	r3, [r7, #2]
 8010da4:	b2db      	uxtb	r3, r3
 8010da6:	4618      	mov	r0, r3
 8010da8:	f000 fb9a 	bl	80114e0 <_LCD_SendData>

	// send "Page Address Set" command
	_LCD_SendCommand(0x2B);
 8010dac:	202b      	movs	r0, #43	; 0x2b
 8010dae:	f000 fb65 	bl	801147c <_LCD_SendCommand>
	_LCD_SendData(sp >> 8);
 8010db2:	88bb      	ldrh	r3, [r7, #4]
 8010db4:	0a1b      	lsrs	r3, r3, #8
 8010db6:	b29b      	uxth	r3, r3
 8010db8:	b2db      	uxtb	r3, r3
 8010dba:	4618      	mov	r0, r3
 8010dbc:	f000 fb90 	bl	80114e0 <_LCD_SendData>
	_LCD_SendData(sp);
 8010dc0:	88bb      	ldrh	r3, [r7, #4]
 8010dc2:	b2db      	uxtb	r3, r3
 8010dc4:	4618      	mov	r0, r3
 8010dc6:	f000 fb8b 	bl	80114e0 <_LCD_SendData>
	_LCD_SendData(ep >> 8);
 8010dca:	883b      	ldrh	r3, [r7, #0]
 8010dcc:	0a1b      	lsrs	r3, r3, #8
 8010dce:	b29b      	uxth	r3, r3
 8010dd0:	b2db      	uxtb	r3, r3
 8010dd2:	4618      	mov	r0, r3
 8010dd4:	f000 fb84 	bl	80114e0 <_LCD_SendData>
	_LCD_SendData(ep);
 8010dd8:	883b      	ldrh	r3, [r7, #0]
 8010dda:	b2db      	uxtb	r3, r3
 8010ddc:	4618      	mov	r0, r3
 8010dde:	f000 fb7f 	bl	80114e0 <_LCD_SendData>

	_LCD_SendCommand(0x2C);
 8010de2:	202c      	movs	r0, #44	; 0x2c
 8010de4:	f000 fb4a 	bl	801147c <_LCD_SendCommand>
}
 8010de8:	bf00      	nop
 8010dea:	370c      	adds	r7, #12
 8010dec:	46bd      	mov	sp, r7
 8010dee:	bd90      	pop	{r4, r7, pc}

08010df0 <ILI9341_Fill_Screen>:
 *
 * 	Sets address (entire screen) and Sends height*width ammount of colour information to LCD
 *
 */
void ILI9341_Fill_Screen(uint16_t colour)
{
 8010df0:	b580      	push	{r7, lr}
 8010df2:	b084      	sub	sp, #16
 8010df4:	af02      	add	r7, sp, #8
 8010df6:	4603      	mov	r3, r0
 8010df8:	80fb      	strh	r3, [r7, #6]
	ILI9341_Set_Frame(0,0,LCD_WIDTH,LCD_HEIGHT);
 8010dfa:	4b10      	ldr	r3, [pc, #64]	; (8010e3c <ILI9341_Fill_Screen+0x4c>)
 8010dfc:	881b      	ldrh	r3, [r3, #0]
 8010dfe:	b29a      	uxth	r2, r3
 8010e00:	4b0f      	ldr	r3, [pc, #60]	; (8010e40 <ILI9341_Fill_Screen+0x50>)
 8010e02:	881b      	ldrh	r3, [r3, #0]
 8010e04:	b29b      	uxth	r3, r3
 8010e06:	2100      	movs	r1, #0
 8010e08:	2000      	movs	r0, #0
 8010e0a:	f7ff ffa5 	bl	8010d58 <ILI9341_Set_Frame>
	_LCD_Write_Frame(0, 0, colour, LCD_WIDTH*LCD_HEIGHT, AREA_CHUNK);
 8010e0e:	4b0b      	ldr	r3, [pc, #44]	; (8010e3c <ILI9341_Fill_Screen+0x4c>)
 8010e10:	881b      	ldrh	r3, [r3, #0]
 8010e12:	b29b      	uxth	r3, r3
 8010e14:	461a      	mov	r2, r3
 8010e16:	4b0a      	ldr	r3, [pc, #40]	; (8010e40 <ILI9341_Fill_Screen+0x50>)
 8010e18:	881b      	ldrh	r3, [r3, #0]
 8010e1a:	b29b      	uxth	r3, r3
 8010e1c:	fb03 f302 	mul.w	r3, r3, r2
 8010e20:	4619      	mov	r1, r3
 8010e22:	88fa      	ldrh	r2, [r7, #6]
 8010e24:	2304      	movs	r3, #4
 8010e26:	9300      	str	r3, [sp, #0]
 8010e28:	460b      	mov	r3, r1
 8010e2a:	2100      	movs	r1, #0
 8010e2c:	2000      	movs	r0, #0
 8010e2e:	f000 fa75 	bl	801131c <_LCD_Write_Frame>
}
 8010e32:	bf00      	nop
 8010e34:	3708      	adds	r7, #8
 8010e36:	46bd      	mov	sp, r7
 8010e38:	bd80      	pop	{r7, pc}
 8010e3a:	bf00      	nop
 8010e3c:	20000ebe 	.word	0x20000ebe
 8010e40:	20000ebc 	.word	0x20000ebc

08010e44 <ILI9341_Draw_Pixel>:
 * 	Using pixels to draw big simple structures is not recommended as it is really slow
 * 	Try using either rectangles or lines if possible
 *
 */
void ILI9341_Draw_Pixel(uint16_t x,uint16_t y,uint16_t colour)
{
 8010e44:	b580      	push	{r7, lr}
 8010e46:	b08e      	sub	sp, #56	; 0x38
 8010e48:	af00      	add	r7, sp, #0
 8010e4a:	4603      	mov	r3, r0
 8010e4c:	80fb      	strh	r3, [r7, #6]
 8010e4e:	460b      	mov	r3, r1
 8010e50:	80bb      	strh	r3, [r7, #4]
 8010e52:	4613      	mov	r3, r2
 8010e54:	807b      	strh	r3, [r7, #2]
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8010e56:	4b98      	ldr	r3, [pc, #608]	; (80110b8 <ILI9341_Draw_Pixel+0x274>)
 8010e58:	881b      	ldrh	r3, [r3, #0]
 8010e5a:	b29b      	uxth	r3, r3
 8010e5c:	88fa      	ldrh	r2, [r7, #6]
 8010e5e:	429a      	cmp	r2, r3
 8010e60:	f080 8143 	bcs.w	80110ea <ILI9341_Draw_Pixel+0x2a6>
 8010e64:	4b95      	ldr	r3, [pc, #596]	; (80110bc <ILI9341_Draw_Pixel+0x278>)
 8010e66:	881b      	ldrh	r3, [r3, #0]
 8010e68:	b29b      	uxth	r3, r3
 8010e6a:	88ba      	ldrh	r2, [r7, #4]
 8010e6c:	429a      	cmp	r2, r3
 8010e6e:	f080 813c 	bcs.w	80110ea <ILI9341_Draw_Pixel+0x2a6>

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 8010e72:	4b93      	ldr	r3, [pc, #588]	; (80110c0 <ILI9341_Draw_Pixel+0x27c>)
 8010e74:	695b      	ldr	r3, [r3, #20]
 8010e76:	4a92      	ldr	r2, [pc, #584]	; (80110c0 <ILI9341_Draw_Pixel+0x27c>)
 8010e78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010e7c:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8010e7e:	4b90      	ldr	r3, [pc, #576]	; (80110c0 <ILI9341_Draw_Pixel+0x27c>)
 8010e80:	695b      	ldr	r3, [r3, #20]
 8010e82:	4a8f      	ldr	r2, [pc, #572]	; (80110c0 <ILI9341_Draw_Pixel+0x27c>)
 8010e84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010e88:	6153      	str	r3, [r2, #20]
	_SPI_SendByte(0x2A, 0, 10);
 8010e8a:	220a      	movs	r2, #10
 8010e8c:	2100      	movs	r1, #0
 8010e8e:	202a      	movs	r0, #42	; 0x2a
 8010e90:	f000 fb58 	bl	8011544 <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8010e94:	2300      	movs	r3, #0
 8010e96:	637b      	str	r3, [r7, #52]	; 0x34
 8010e98:	e008      	b.n	8010eac <ILI9341_Draw_Pixel+0x68>
 8010e9a:	4b89      	ldr	r3, [pc, #548]	; (80110c0 <ILI9341_Draw_Pixel+0x27c>)
 8010e9c:	695b      	ldr	r3, [r3, #20]
 8010e9e:	4a88      	ldr	r2, [pc, #544]	; (80110c0 <ILI9341_Draw_Pixel+0x27c>)
 8010ea0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010ea4:	6153      	str	r3, [r2, #20]
 8010ea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ea8:	3301      	adds	r3, #1
 8010eaa:	637b      	str	r3, [r7, #52]	; 0x34
 8010eac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010eae:	2b02      	cmp	r3, #2
 8010eb0:	ddf3      	ble.n	8010e9a <ILI9341_Draw_Pixel+0x56>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8010eb2:	4b83      	ldr	r3, [pc, #524]	; (80110c0 <ILI9341_Draw_Pixel+0x27c>)
 8010eb4:	695b      	ldr	r3, [r3, #20]
 8010eb6:	4a82      	ldr	r2, [pc, #520]	; (80110c0 <ILI9341_Draw_Pixel+0x27c>)
 8010eb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010ebc:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8010ebe:	4b80      	ldr	r3, [pc, #512]	; (80110c0 <ILI9341_Draw_Pixel+0x27c>)
 8010ec0:	695b      	ldr	r3, [r3, #20]
 8010ec2:	4a7f      	ldr	r2, [pc, #508]	; (80110c0 <ILI9341_Draw_Pixel+0x27c>)
 8010ec4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010ec8:	6153      	str	r3, [r2, #20]

	//XDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8010eca:	4b7d      	ldr	r3, [pc, #500]	; (80110c0 <ILI9341_Draw_Pixel+0x27c>)
 8010ecc:	695b      	ldr	r3, [r3, #20]
 8010ece:	4a7c      	ldr	r2, [pc, #496]	; (80110c0 <ILI9341_Draw_Pixel+0x27c>)
 8010ed0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010ed4:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer[4] = { x >> 8, x, (x + 1) >> 8, (x + 1) };
 8010ed6:	88fb      	ldrh	r3, [r7, #6]
 8010ed8:	0a1b      	lsrs	r3, r3, #8
 8010eda:	b29b      	uxth	r3, r3
 8010edc:	b2db      	uxtb	r3, r3
 8010ede:	753b      	strb	r3, [r7, #20]
 8010ee0:	88fb      	ldrh	r3, [r7, #6]
 8010ee2:	b2db      	uxtb	r3, r3
 8010ee4:	757b      	strb	r3, [r7, #21]
 8010ee6:	88fb      	ldrh	r3, [r7, #6]
 8010ee8:	3301      	adds	r3, #1
 8010eea:	121b      	asrs	r3, r3, #8
 8010eec:	b2db      	uxtb	r3, r3
 8010eee:	75bb      	strb	r3, [r7, #22]
 8010ef0:	88fb      	ldrh	r3, [r7, #6]
 8010ef2:	b2db      	uxtb	r3, r3
 8010ef4:	3301      	adds	r3, #1
 8010ef6:	b2db      	uxtb	r3, r3
 8010ef8:	75fb      	strb	r3, [r7, #23]
	_SPI_SendByteMultiByte(Temp_Buffer, 4, 0, 10);
 8010efa:	f107 0014 	add.w	r0, r7, #20
 8010efe:	230a      	movs	r3, #10
 8010f00:	2200      	movs	r2, #0
 8010f02:	2104      	movs	r1, #4
 8010f04:	f000 fb50 	bl	80115a8 <_SPI_SendByteMultiByte>
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1 );
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8010f08:	2300      	movs	r3, #0
 8010f0a:	633b      	str	r3, [r7, #48]	; 0x30
 8010f0c:	e008      	b.n	8010f20 <ILI9341_Draw_Pixel+0xdc>
 8010f0e:	4b6c      	ldr	r3, [pc, #432]	; (80110c0 <ILI9341_Draw_Pixel+0x27c>)
 8010f10:	695b      	ldr	r3, [r3, #20]
 8010f12:	4a6b      	ldr	r2, [pc, #428]	; (80110c0 <ILI9341_Draw_Pixel+0x27c>)
 8010f14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010f18:	6153      	str	r3, [r2, #20]
 8010f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f1c:	3301      	adds	r3, #1
 8010f1e:	633b      	str	r3, [r7, #48]	; 0x30
 8010f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f22:	2b02      	cmp	r3, #2
 8010f24:	ddf3      	ble.n	8010f0e <ILI9341_Draw_Pixel+0xca>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8010f26:	4b66      	ldr	r3, [pc, #408]	; (80110c0 <ILI9341_Draw_Pixel+0x27c>)
 8010f28:	695b      	ldr	r3, [r3, #20]
 8010f2a:	4a65      	ldr	r2, [pc, #404]	; (80110c0 <ILI9341_Draw_Pixel+0x27c>)
 8010f2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010f30:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 8010f32:	4b63      	ldr	r3, [pc, #396]	; (80110c0 <ILI9341_Draw_Pixel+0x27c>)
 8010f34:	695b      	ldr	r3, [r3, #20]
 8010f36:	4a62      	ldr	r2, [pc, #392]	; (80110c0 <ILI9341_Draw_Pixel+0x27c>)
 8010f38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010f3c:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8010f3e:	4b60      	ldr	r3, [pc, #384]	; (80110c0 <ILI9341_Draw_Pixel+0x27c>)
 8010f40:	695b      	ldr	r3, [r3, #20]
 8010f42:	4a5f      	ldr	r2, [pc, #380]	; (80110c0 <ILI9341_Draw_Pixel+0x27c>)
 8010f44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010f48:	6153      	str	r3, [r2, #20]
	_SPI_SendByte(0x2B, 0, 10);
 8010f4a:	220a      	movs	r2, #10
 8010f4c:	2100      	movs	r1, #0
 8010f4e:	202b      	movs	r0, #43	; 0x2b
 8010f50:	f000 faf8 	bl	8011544 <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8010f54:	2300      	movs	r3, #0
 8010f56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010f58:	e008      	b.n	8010f6c <ILI9341_Draw_Pixel+0x128>
 8010f5a:	4b59      	ldr	r3, [pc, #356]	; (80110c0 <ILI9341_Draw_Pixel+0x27c>)
 8010f5c:	695b      	ldr	r3, [r3, #20]
 8010f5e:	4a58      	ldr	r2, [pc, #352]	; (80110c0 <ILI9341_Draw_Pixel+0x27c>)
 8010f60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010f64:	6153      	str	r3, [r2, #20]
 8010f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f68:	3301      	adds	r3, #1
 8010f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f6e:	2b02      	cmp	r3, #2
 8010f70:	ddf3      	ble.n	8010f5a <ILI9341_Draw_Pixel+0x116>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8010f72:	4b53      	ldr	r3, [pc, #332]	; (80110c0 <ILI9341_Draw_Pixel+0x27c>)
 8010f74:	695b      	ldr	r3, [r3, #20]
 8010f76:	4a52      	ldr	r2, [pc, #328]	; (80110c0 <ILI9341_Draw_Pixel+0x27c>)
 8010f78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010f7c:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8010f7e:	4b50      	ldr	r3, [pc, #320]	; (80110c0 <ILI9341_Draw_Pixel+0x27c>)
 8010f80:	695b      	ldr	r3, [r3, #20]
 8010f82:	4a4f      	ldr	r2, [pc, #316]	; (80110c0 <ILI9341_Draw_Pixel+0x27c>)
 8010f84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010f88:	6153      	str	r3, [r2, #20]

	//YDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8010f8a:	4b4d      	ldr	r3, [pc, #308]	; (80110c0 <ILI9341_Draw_Pixel+0x27c>)
 8010f8c:	695b      	ldr	r3, [r3, #20]
 8010f8e:	4a4c      	ldr	r2, [pc, #304]	; (80110c0 <ILI9341_Draw_Pixel+0x27c>)
 8010f90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010f94:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer1[4] = { y >> 8, y, (y + 1) >> 8, (y + 1) };
 8010f96:	88bb      	ldrh	r3, [r7, #4]
 8010f98:	0a1b      	lsrs	r3, r3, #8
 8010f9a:	b29b      	uxth	r3, r3
 8010f9c:	b2db      	uxtb	r3, r3
 8010f9e:	743b      	strb	r3, [r7, #16]
 8010fa0:	88bb      	ldrh	r3, [r7, #4]
 8010fa2:	b2db      	uxtb	r3, r3
 8010fa4:	747b      	strb	r3, [r7, #17]
 8010fa6:	88bb      	ldrh	r3, [r7, #4]
 8010fa8:	3301      	adds	r3, #1
 8010faa:	121b      	asrs	r3, r3, #8
 8010fac:	b2db      	uxtb	r3, r3
 8010fae:	74bb      	strb	r3, [r7, #18]
 8010fb0:	88bb      	ldrh	r3, [r7, #4]
 8010fb2:	b2db      	uxtb	r3, r3
 8010fb4:	3301      	adds	r3, #1
 8010fb6:	b2db      	uxtb	r3, r3
 8010fb8:	74fb      	strb	r3, [r7, #19]
	_SPI_SendByteMultiByte(Temp_Buffer1, 4, 0, 10);
 8010fba:	f107 0010 	add.w	r0, r7, #16
 8010fbe:	230a      	movs	r3, #10
 8010fc0:	2200      	movs	r2, #0
 8010fc2:	2104      	movs	r1, #4
 8010fc4:	f000 faf0 	bl	80115a8 <_SPI_SendByteMultiByte>
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1 );
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8010fc8:	2300      	movs	r3, #0
 8010fca:	62bb      	str	r3, [r7, #40]	; 0x28
 8010fcc:	e008      	b.n	8010fe0 <ILI9341_Draw_Pixel+0x19c>
 8010fce:	4b3c      	ldr	r3, [pc, #240]	; (80110c0 <ILI9341_Draw_Pixel+0x27c>)
 8010fd0:	695b      	ldr	r3, [r3, #20]
 8010fd2:	4a3b      	ldr	r2, [pc, #236]	; (80110c0 <ILI9341_Draw_Pixel+0x27c>)
 8010fd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010fd8:	6153      	str	r3, [r2, #20]
 8010fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fdc:	3301      	adds	r3, #1
 8010fde:	62bb      	str	r3, [r7, #40]	; 0x28
 8010fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fe2:	2b02      	cmp	r3, #2
 8010fe4:	ddf3      	ble.n	8010fce <ILI9341_Draw_Pixel+0x18a>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8010fe6:	4b36      	ldr	r3, [pc, #216]	; (80110c0 <ILI9341_Draw_Pixel+0x27c>)
 8010fe8:	695b      	ldr	r3, [r3, #20]
 8010fea:	4a35      	ldr	r2, [pc, #212]	; (80110c0 <ILI9341_Draw_Pixel+0x27c>)
 8010fec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010ff0:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 8010ff2:	4b33      	ldr	r3, [pc, #204]	; (80110c0 <ILI9341_Draw_Pixel+0x27c>)
 8010ff4:	695b      	ldr	r3, [r3, #20]
 8010ff6:	4a32      	ldr	r2, [pc, #200]	; (80110c0 <ILI9341_Draw_Pixel+0x27c>)
 8010ff8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010ffc:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8010ffe:	4b30      	ldr	r3, [pc, #192]	; (80110c0 <ILI9341_Draw_Pixel+0x27c>)
 8011000:	695b      	ldr	r3, [r3, #20]
 8011002:	4a2f      	ldr	r2, [pc, #188]	; (80110c0 <ILI9341_Draw_Pixel+0x27c>)
 8011004:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011008:	6153      	str	r3, [r2, #20]
	_SPI_SendByte(0x2C, 0, 10);
 801100a:	220a      	movs	r2, #10
 801100c:	2100      	movs	r1, #0
 801100e:	202c      	movs	r0, #44	; 0x2c
 8011010:	f000 fa98 	bl	8011544 <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8011014:	2300      	movs	r3, #0
 8011016:	627b      	str	r3, [r7, #36]	; 0x24
 8011018:	e008      	b.n	801102c <ILI9341_Draw_Pixel+0x1e8>
 801101a:	4b29      	ldr	r3, [pc, #164]	; (80110c0 <ILI9341_Draw_Pixel+0x27c>)
 801101c:	695b      	ldr	r3, [r3, #20]
 801101e:	4a28      	ldr	r2, [pc, #160]	; (80110c0 <ILI9341_Draw_Pixel+0x27c>)
 8011020:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011024:	6153      	str	r3, [r2, #20]
 8011026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011028:	3301      	adds	r3, #1
 801102a:	627b      	str	r3, [r7, #36]	; 0x24
 801102c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801102e:	2b02      	cmp	r3, #2
 8011030:	ddf3      	ble.n	801101a <ILI9341_Draw_Pixel+0x1d6>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8011032:	4b23      	ldr	r3, [pc, #140]	; (80110c0 <ILI9341_Draw_Pixel+0x27c>)
 8011034:	695b      	ldr	r3, [r3, #20]
 8011036:	4a22      	ldr	r2, [pc, #136]	; (80110c0 <ILI9341_Draw_Pixel+0x27c>)
 8011038:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801103c:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 801103e:	4b20      	ldr	r3, [pc, #128]	; (80110c0 <ILI9341_Draw_Pixel+0x27c>)
 8011040:	695b      	ldr	r3, [r3, #20]
 8011042:	4a1f      	ldr	r2, [pc, #124]	; (80110c0 <ILI9341_Draw_Pixel+0x27c>)
 8011044:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011048:	6153      	str	r3, [r2, #20]

	//COLOUR
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 801104a:	4b1d      	ldr	r3, [pc, #116]	; (80110c0 <ILI9341_Draw_Pixel+0x27c>)
 801104c:	695b      	ldr	r3, [r3, #20]
 801104e:	4a1c      	ldr	r2, [pc, #112]	; (80110c0 <ILI9341_Draw_Pixel+0x27c>)
 8011050:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011054:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer2[2] = {colour>>8, colour};
 8011056:	887b      	ldrh	r3, [r7, #2]
 8011058:	0a1b      	lsrs	r3, r3, #8
 801105a:	b29b      	uxth	r3, r3
 801105c:	b2db      	uxtb	r3, r3
 801105e:	733b      	strb	r3, [r7, #12]
 8011060:	887b      	ldrh	r3, [r7, #2]
 8011062:	b2db      	uxtb	r3, r3
 8011064:	737b      	strb	r3, [r7, #13]
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1 );
	_SPI_SendByteMultiByte(Temp_Buffer2, 2, 0, 1);
 8011066:	f107 000c 	add.w	r0, r7, #12
 801106a:	2301      	movs	r3, #1
 801106c:	2200      	movs	r2, #0
 801106e:	2102      	movs	r1, #2
 8011070:	f000 fa9a 	bl	80115a8 <_SPI_SendByteMultiByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8011074:	2300      	movs	r3, #0
 8011076:	623b      	str	r3, [r7, #32]
 8011078:	e008      	b.n	801108c <ILI9341_Draw_Pixel+0x248>
 801107a:	4b11      	ldr	r3, [pc, #68]	; (80110c0 <ILI9341_Draw_Pixel+0x27c>)
 801107c:	695b      	ldr	r3, [r3, #20]
 801107e:	4a10      	ldr	r2, [pc, #64]	; (80110c0 <ILI9341_Draw_Pixel+0x27c>)
 8011080:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011084:	6153      	str	r3, [r2, #20]
 8011086:	6a3b      	ldr	r3, [r7, #32]
 8011088:	3301      	adds	r3, #1
 801108a:	623b      	str	r3, [r7, #32]
 801108c:	6a3b      	ldr	r3, [r7, #32]
 801108e:	2b02      	cmp	r3, #2
 8011090:	ddf3      	ble.n	801107a <ILI9341_Draw_Pixel+0x236>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8011092:	2300      	movs	r3, #0
 8011094:	61fb      	str	r3, [r7, #28]
 8011096:	e008      	b.n	80110aa <ILI9341_Draw_Pixel+0x266>
 8011098:	4b09      	ldr	r3, [pc, #36]	; (80110c0 <ILI9341_Draw_Pixel+0x27c>)
 801109a:	695b      	ldr	r3, [r3, #20]
 801109c:	4a08      	ldr	r2, [pc, #32]	; (80110c0 <ILI9341_Draw_Pixel+0x27c>)
 801109e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80110a2:	6153      	str	r3, [r2, #20]
 80110a4:	69fb      	ldr	r3, [r7, #28]
 80110a6:	3301      	adds	r3, #1
 80110a8:	61fb      	str	r3, [r7, #28]
 80110aa:	69fb      	ldr	r3, [r7, #28]
 80110ac:	2b02      	cmp	r3, #2
 80110ae:	ddf3      	ble.n	8011098 <ILI9341_Draw_Pixel+0x254>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80110b0:	2300      	movs	r3, #0
 80110b2:	61bb      	str	r3, [r7, #24]
 80110b4:	e00f      	b.n	80110d6 <ILI9341_Draw_Pixel+0x292>
 80110b6:	bf00      	nop
 80110b8:	20000ebe 	.word	0x20000ebe
 80110bc:	20000ebc 	.word	0x20000ebc
 80110c0:	48000400 	.word	0x48000400
 80110c4:	4b0b      	ldr	r3, [pc, #44]	; (80110f4 <ILI9341_Draw_Pixel+0x2b0>)
 80110c6:	695b      	ldr	r3, [r3, #20]
 80110c8:	4a0a      	ldr	r2, [pc, #40]	; (80110f4 <ILI9341_Draw_Pixel+0x2b0>)
 80110ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80110ce:	6153      	str	r3, [r2, #20]
 80110d0:	69bb      	ldr	r3, [r7, #24]
 80110d2:	3301      	adds	r3, #1
 80110d4:	61bb      	str	r3, [r7, #24]
 80110d6:	69bb      	ldr	r3, [r7, #24]
 80110d8:	2b02      	cmp	r3, #2
 80110da:	ddf3      	ble.n	80110c4 <ILI9341_Draw_Pixel+0x280>


	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 80110dc:	4b05      	ldr	r3, [pc, #20]	; (80110f4 <ILI9341_Draw_Pixel+0x2b0>)
 80110de:	695b      	ldr	r3, [r3, #20]
 80110e0:	4a04      	ldr	r2, [pc, #16]	; (80110f4 <ILI9341_Draw_Pixel+0x2b0>)
 80110e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80110e6:	6153      	str	r3, [r2, #20]
 80110e8:	e000      	b.n	80110ec <ILI9341_Draw_Pixel+0x2a8>
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 80110ea:	bf00      	nop


}
 80110ec:	3738      	adds	r7, #56	; 0x38
 80110ee:	46bd      	mov	sp, r7
 80110f0:	bd80      	pop	{r7, pc}
 80110f2:	bf00      	nop
 80110f4:	48000400 	.word	0x48000400

080110f8 <ILI9341_Draw_Rectangle>:
 *
 *
 */

void ILI9341_Draw_Rectangle(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t height, uint16_t colour, CHUNK_Type chunk_type)
{
 80110f8:	b590      	push	{r4, r7, lr}
 80110fa:	b087      	sub	sp, #28
 80110fc:	af02      	add	r7, sp, #8
 80110fe:	4604      	mov	r4, r0
 8011100:	4608      	mov	r0, r1
 8011102:	4611      	mov	r1, r2
 8011104:	461a      	mov	r2, r3
 8011106:	4623      	mov	r3, r4
 8011108:	80fb      	strh	r3, [r7, #6]
 801110a:	4603      	mov	r3, r0
 801110c:	80bb      	strh	r3, [r7, #4]
 801110e:	460b      	mov	r3, r1
 8011110:	807b      	strh	r3, [r7, #2]
 8011112:	4613      	mov	r3, r2
 8011114:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 8011116:	4b41      	ldr	r3, [pc, #260]	; (801121c <ILI9341_Draw_Rectangle+0x124>)
 8011118:	881b      	ldrh	r3, [r3, #0]
 801111a:	b29b      	uxth	r3, r3
 801111c:	88fa      	ldrh	r2, [r7, #6]
 801111e:	429a      	cmp	r2, r3
 8011120:	d278      	bcs.n	8011214 <ILI9341_Draw_Rectangle+0x11c>
 8011122:	4b3f      	ldr	r3, [pc, #252]	; (8011220 <ILI9341_Draw_Rectangle+0x128>)
 8011124:	881b      	ldrh	r3, [r3, #0]
 8011126:	b29b      	uxth	r3, r3
 8011128:	88ba      	ldrh	r2, [r7, #4]
 801112a:	429a      	cmp	r2, r3
 801112c:	d272      	bcs.n	8011214 <ILI9341_Draw_Rectangle+0x11c>
	if((xpos+width-1)>=LCD_WIDTH)
 801112e:	88fa      	ldrh	r2, [r7, #6]
 8011130:	887b      	ldrh	r3, [r7, #2]
 8011132:	4413      	add	r3, r2
 8011134:	3b01      	subs	r3, #1
 8011136:	4a39      	ldr	r2, [pc, #228]	; (801121c <ILI9341_Draw_Rectangle+0x124>)
 8011138:	8812      	ldrh	r2, [r2, #0]
 801113a:	b292      	uxth	r2, r2
 801113c:	4293      	cmp	r3, r2
 801113e:	db05      	blt.n	801114c <ILI9341_Draw_Rectangle+0x54>
		{
			width=LCD_WIDTH-xpos;
 8011140:	4b36      	ldr	r3, [pc, #216]	; (801121c <ILI9341_Draw_Rectangle+0x124>)
 8011142:	881b      	ldrh	r3, [r3, #0]
 8011144:	b29a      	uxth	r2, r3
 8011146:	88fb      	ldrh	r3, [r7, #6]
 8011148:	1ad3      	subs	r3, r2, r3
 801114a:	807b      	strh	r3, [r7, #2]
		}
	if((ypos+height-1)>=LCD_HEIGHT)
 801114c:	88ba      	ldrh	r2, [r7, #4]
 801114e:	883b      	ldrh	r3, [r7, #0]
 8011150:	4413      	add	r3, r2
 8011152:	3b01      	subs	r3, #1
 8011154:	4a32      	ldr	r2, [pc, #200]	; (8011220 <ILI9341_Draw_Rectangle+0x128>)
 8011156:	8812      	ldrh	r2, [r2, #0]
 8011158:	b292      	uxth	r2, r2
 801115a:	4293      	cmp	r3, r2
 801115c:	db05      	blt.n	801116a <ILI9341_Draw_Rectangle+0x72>
		{
			height=LCD_HEIGHT-ypos;
 801115e:	4b30      	ldr	r3, [pc, #192]	; (8011220 <ILI9341_Draw_Rectangle+0x128>)
 8011160:	881b      	ldrh	r3, [r3, #0]
 8011162:	b29a      	uxth	r2, r3
 8011164:	88bb      	ldrh	r3, [r7, #4]
 8011166:	1ad3      	subs	r3, r2, r3
 8011168:	803b      	strh	r3, [r7, #0]
		}
	ILI9341_Set_Frame(	xpos,
						ypos,
						(xpos + width) - 1,
 801116a:	88fa      	ldrh	r2, [r7, #6]
 801116c:	887b      	ldrh	r3, [r7, #2]
 801116e:	4413      	add	r3, r2
 8011170:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 8011172:	3b01      	subs	r3, #1
 8011174:	b29c      	uxth	r4, r3
						(ypos + height) - 1);
 8011176:	88ba      	ldrh	r2, [r7, #4]
 8011178:	883b      	ldrh	r3, [r7, #0]
 801117a:	4413      	add	r3, r2
 801117c:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 801117e:	3b01      	subs	r3, #1
 8011180:	b29b      	uxth	r3, r3
 8011182:	88b9      	ldrh	r1, [r7, #4]
 8011184:	88f8      	ldrh	r0, [r7, #6]
 8011186:	4622      	mov	r2, r4
 8011188:	f7ff fde6 	bl	8010d58 <ILI9341_Set_Frame>
	// if odd numbered rect area is requested, we round down to nearest even number
	// to keep _LCD_Write_Frame() happy.

	// Note, truncated pixel will be needed at function end.

	uint16_t size = height*width;
 801118c:	883a      	ldrh	r2, [r7, #0]
 801118e:	887b      	ldrh	r3, [r7, #2]
 8011190:	fb12 f303 	smulbb	r3, r2, r3
 8011194:	81fb      	strh	r3, [r7, #14]
	uint8_t truncated = 0;
 8011196:	2300      	movs	r3, #0
 8011198:	737b      	strb	r3, [r7, #13]

	if((size & 1) && (size > 1))		// don't round down to zero!
 801119a:	89fb      	ldrh	r3, [r7, #14]
 801119c:	f003 0301 	and.w	r3, r3, #1
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d009      	beq.n	80111b8 <ILI9341_Draw_Rectangle+0xc0>
 80111a4:	89fb      	ldrh	r3, [r7, #14]
 80111a6:	2b01      	cmp	r3, #1
 80111a8:	d906      	bls.n	80111b8 <ILI9341_Draw_Rectangle+0xc0>
	{
		truncated = 1;
 80111aa:	2301      	movs	r3, #1
 80111ac:	737b      	strb	r3, [r7, #13]
	 	size = ((size >> 1) * 2);
 80111ae:	89fb      	ldrh	r3, [r7, #14]
 80111b0:	085b      	lsrs	r3, r3, #1
 80111b2:	b29b      	uxth	r3, r3
 80111b4:	005b      	lsls	r3, r3, #1
 80111b6:	81fb      	strh	r3, [r7, #14]
	}

	_LCD_Write_Frame(	xpos,
 80111b8:	89fc      	ldrh	r4, [r7, #14]
 80111ba:	8c3a      	ldrh	r2, [r7, #32]
 80111bc:	88b9      	ldrh	r1, [r7, #4]
 80111be:	88f8      	ldrh	r0, [r7, #6]
 80111c0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80111c4:	9300      	str	r3, [sp, #0]
 80111c6:	4623      	mov	r3, r4
 80111c8:	f000 f8a8 	bl	801131c <_LCD_Write_Frame>
						colour,
						size,
						chunk_type);

	// add the truncated pixel now
	if(truncated)
 80111cc:	7b7b      	ldrb	r3, [r7, #13]
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d021      	beq.n	8011216 <ILI9341_Draw_Rectangle+0x11e>
	{
		ILI9341_Draw_Pixel(	(xpos + width) - 2,
 80111d2:	88fa      	ldrh	r2, [r7, #6]
 80111d4:	887b      	ldrh	r3, [r7, #2]
 80111d6:	4413      	add	r3, r2
 80111d8:	b29b      	uxth	r3, r3
 80111da:	3b02      	subs	r3, #2
 80111dc:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 80111de:	88ba      	ldrh	r2, [r7, #4]
 80111e0:	883b      	ldrh	r3, [r7, #0]
 80111e2:	4413      	add	r3, r2
 80111e4:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 2,
 80111e6:	3b01      	subs	r3, #1
 80111e8:	b29b      	uxth	r3, r3
 80111ea:	8c3a      	ldrh	r2, [r7, #32]
 80111ec:	4619      	mov	r1, r3
 80111ee:	f7ff fe29 	bl	8010e44 <ILI9341_Draw_Pixel>
							colour);
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 80111f2:	88fa      	ldrh	r2, [r7, #6]
 80111f4:	887b      	ldrh	r3, [r7, #2]
 80111f6:	4413      	add	r3, r2
 80111f8:	b29b      	uxth	r3, r3
 80111fa:	3b01      	subs	r3, #1
 80111fc:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 80111fe:	88ba      	ldrh	r2, [r7, #4]
 8011200:	883b      	ldrh	r3, [r7, #0]
 8011202:	4413      	add	r3, r2
 8011204:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 8011206:	3b01      	subs	r3, #1
 8011208:	b29b      	uxth	r3, r3
 801120a:	8c3a      	ldrh	r2, [r7, #32]
 801120c:	4619      	mov	r1, r3
 801120e:	f7ff fe19 	bl	8010e44 <ILI9341_Draw_Pixel>
 8011212:	e000      	b.n	8011216 <ILI9341_Draw_Rectangle+0x11e>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 8011214:	bf00      	nop
							colour);
	}
}
 8011216:	3714      	adds	r7, #20
 8011218:	46bd      	mov	sp, r7
 801121a:	bd90      	pop	{r4, r7, pc}
 801121c:	20000ebe 	.word	0x20000ebe
 8011220:	20000ebc 	.word	0x20000ebc

08011224 <ILI9341_Set_Rotation>:
 *
 * 	Set LCD orientation
 *
 */
void ILI9341_Set_Rotation(uint8_t rotation)
{
 8011224:	b580      	push	{r7, lr}
 8011226:	b084      	sub	sp, #16
 8011228:	af00      	add	r7, sp, #0
 801122a:	4603      	mov	r3, r0
 801122c:	71fb      	strb	r3, [r7, #7]

	uint8_t screen_rotation = rotation;
 801122e:	79fb      	ldrb	r3, [r7, #7]
 8011230:	73fb      	strb	r3, [r7, #15]

	_LCD_SendCommand(0x36);
 8011232:	2036      	movs	r0, #54	; 0x36
 8011234:	f000 f922 	bl	801147c <_LCD_SendCommand>
	//HAL_Delay(1);

	switch(screen_rotation)
 8011238:	7bfb      	ldrb	r3, [r7, #15]
 801123a:	2b03      	cmp	r3, #3
 801123c:	d836      	bhi.n	80112ac <ILI9341_Set_Rotation+0x88>
 801123e:	a201      	add	r2, pc, #4	; (adr r2, 8011244 <ILI9341_Set_Rotation+0x20>)
 8011240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011244:	08011255 	.word	0x08011255
 8011248:	0801126b 	.word	0x0801126b
 801124c:	08011281 	.word	0x08011281
 8011250:	08011297 	.word	0x08011297
	{
		case SCREEN_VERTICAL_1:
			_LCD_SendData(0x40|0x08);
 8011254:	2048      	movs	r0, #72	; 0x48
 8011256:	f000 f943 	bl	80114e0 <_LCD_SendData>
			LCD_WIDTH = 240;
 801125a:	4b17      	ldr	r3, [pc, #92]	; (80112b8 <ILI9341_Set_Rotation+0x94>)
 801125c:	22f0      	movs	r2, #240	; 0xf0
 801125e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8011260:	4b16      	ldr	r3, [pc, #88]	; (80112bc <ILI9341_Set_Rotation+0x98>)
 8011262:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8011266:	801a      	strh	r2, [r3, #0]
			break;
 8011268:	e021      	b.n	80112ae <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_1:
			_LCD_SendData(0x20|0x08);
 801126a:	2028      	movs	r0, #40	; 0x28
 801126c:	f000 f938 	bl	80114e0 <_LCD_SendData>
			LCD_WIDTH  = 320;
 8011270:	4b11      	ldr	r3, [pc, #68]	; (80112b8 <ILI9341_Set_Rotation+0x94>)
 8011272:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8011276:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8011278:	4b10      	ldr	r3, [pc, #64]	; (80112bc <ILI9341_Set_Rotation+0x98>)
 801127a:	22f0      	movs	r2, #240	; 0xf0
 801127c:	801a      	strh	r2, [r3, #0]
			break;
 801127e:	e016      	b.n	80112ae <ILI9341_Set_Rotation+0x8a>
		case SCREEN_VERTICAL_2:
			_LCD_SendData(0x80|0x08);
 8011280:	2088      	movs	r0, #136	; 0x88
 8011282:	f000 f92d 	bl	80114e0 <_LCD_SendData>
			LCD_WIDTH  = 240;
 8011286:	4b0c      	ldr	r3, [pc, #48]	; (80112b8 <ILI9341_Set_Rotation+0x94>)
 8011288:	22f0      	movs	r2, #240	; 0xf0
 801128a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 801128c:	4b0b      	ldr	r3, [pc, #44]	; (80112bc <ILI9341_Set_Rotation+0x98>)
 801128e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8011292:	801a      	strh	r2, [r3, #0]
			break;
 8011294:	e00b      	b.n	80112ae <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_2:
			_LCD_SendData(0x40|0x80|0x20|0x08);
 8011296:	20e8      	movs	r0, #232	; 0xe8
 8011298:	f000 f922 	bl	80114e0 <_LCD_SendData>
			LCD_WIDTH  = 320;
 801129c:	4b06      	ldr	r3, [pc, #24]	; (80112b8 <ILI9341_Set_Rotation+0x94>)
 801129e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80112a2:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 80112a4:	4b05      	ldr	r3, [pc, #20]	; (80112bc <ILI9341_Set_Rotation+0x98>)
 80112a6:	22f0      	movs	r2, #240	; 0xf0
 80112a8:	801a      	strh	r2, [r3, #0]
			break;
 80112aa:	e000      	b.n	80112ae <ILI9341_Set_Rotation+0x8a>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 80112ac:	bf00      	nop
	}
}
 80112ae:	bf00      	nop
 80112b0:	3710      	adds	r7, #16
 80112b2:	46bd      	mov	sp, r7
 80112b4:	bd80      	pop	{r7, pc}
 80112b6:	bf00      	nop
 80112b8:	20000ebe 	.word	0x20000ebe
 80112bc:	20000ebc 	.word	0x20000ebc

080112c0 <_LCD_Enable>:
 *
 * Enable LCD display
 *
 */
void _LCD_Enable()
{
 80112c0:	b480      	push	{r7}
 80112c2:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 80112c4:	4b05      	ldr	r3, [pc, #20]	; (80112dc <_LCD_Enable+0x1c>)
 80112c6:	695b      	ldr	r3, [r3, #20]
 80112c8:	4a04      	ldr	r2, [pc, #16]	; (80112dc <_LCD_Enable+0x1c>)
 80112ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80112ce:	6153      	str	r3, [r2, #20]
}
 80112d0:	bf00      	nop
 80112d2:	46bd      	mov	sp, r7
 80112d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112d8:	4770      	bx	lr
 80112da:	bf00      	nop
 80112dc:	48000400 	.word	0x48000400

080112e0 <_LCD_Reset>:
 *
 * 	Reset LCD
 *
 */
void _LCD_Reset()
{
 80112e0:	b580      	push	{r7, lr}
 80112e2:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR &= ~(LCD_RST_PIN);
 80112e4:	4b0c      	ldr	r3, [pc, #48]	; (8011318 <_LCD_Reset+0x38>)
 80112e6:	695b      	ldr	r3, [r3, #20]
 80112e8:	4a0b      	ldr	r2, [pc, #44]	; (8011318 <_LCD_Reset+0x38>)
 80112ea:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80112ee:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 80112f0:	20c8      	movs	r0, #200	; 0xc8
 80112f2:	f7f7 fe4f 	bl	8008f94 <HAL_Delay>
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80112f6:	4b08      	ldr	r3, [pc, #32]	; (8011318 <_LCD_Reset+0x38>)
 80112f8:	695b      	ldr	r3, [r3, #20]
 80112fa:	4a07      	ldr	r2, [pc, #28]	; (8011318 <_LCD_Reset+0x38>)
 80112fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011300:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 8011302:	20c8      	movs	r0, #200	; 0xc8
 8011304:	f7f7 fe46 	bl	8008f94 <HAL_Delay>
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 8011308:	4b03      	ldr	r3, [pc, #12]	; (8011318 <_LCD_Reset+0x38>)
 801130a:	695b      	ldr	r3, [r3, #20]
 801130c:	4a02      	ldr	r2, [pc, #8]	; (8011318 <_LCD_Reset+0x38>)
 801130e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8011312:	6153      	str	r3, [r2, #20]
}
 8011314:	bf00      	nop
 8011316:	bd80      	pop	{r7, pc}
 8011318:	48000400 	.word	0x48000400

0801131c <_LCD_Write_Frame>:
 *
 *	entire data sent to this function is a CHUNK < BURST_MAX_SIZE
 *	each CHUNK is broken down into smaller BLOCKS
 */
void _LCD_Write_Frame(uint16_t chunk_xpos, uint16_t chunk_ypos, uint16_t colour, uint32_t chunk_size, CHUNK_Type chunk_type)
{
 801131c:	b5b0      	push	{r4, r5, r7, lr}
 801131e:	b08e      	sub	sp, #56	; 0x38
 8011320:	af00      	add	r7, sp, #0
 8011322:	607b      	str	r3, [r7, #4]
 8011324:	4603      	mov	r3, r0
 8011326:	81fb      	strh	r3, [r7, #14]
 8011328:	460b      	mov	r3, r1
 801132a:	81bb      	strh	r3, [r7, #12]
 801132c:	4613      	mov	r3, r2
 801132e:	817b      	strh	r3, [r7, #10]
 8011330:	466b      	mov	r3, sp
 8011332:	461d      	mov	r5, r3

	uint32_t buffer_size = 0;
 8011334:	2300      	movs	r3, #0
 8011336:	62fb      	str	r3, [r7, #44]	; 0x2c
	if((chunk_size*2) < BURST_MAX_SIZE)
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	005b      	lsls	r3, r3, #1
 801133c:	4a4d      	ldr	r2, [pc, #308]	; (8011474 <_LCD_Write_Frame+0x158>)
 801133e:	8812      	ldrh	r2, [r2, #0]
 8011340:	4293      	cmp	r3, r2
 8011342:	d202      	bcs.n	801134a <_LCD_Write_Frame+0x2e>
	{
		buffer_size = chunk_size;
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011348:	e002      	b.n	8011350 <_LCD_Write_Frame+0x34>
	}
	else
	{
		buffer_size = BURST_MAX_SIZE;
 801134a:	4b4a      	ldr	r3, [pc, #296]	; (8011474 <_LCD_Write_Frame+0x158>)
 801134c:	881b      	ldrh	r3, [r3, #0]
 801134e:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	unsigned char chifted = 	colour>>8;;
 8011350:	897b      	ldrh	r3, [r7, #10]
 8011352:	0a1b      	lsrs	r3, r3, #8
 8011354:	b29b      	uxth	r3, r3
 8011356:	77fb      	strb	r3, [r7, #31]
	unsigned char burst_buffer[buffer_size];
 8011358:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801135a:	4603      	mov	r3, r0
 801135c:	3b01      	subs	r3, #1
 801135e:	61bb      	str	r3, [r7, #24]
 8011360:	4601      	mov	r1, r0
 8011362:	f04f 0200 	mov.w	r2, #0
 8011366:	f04f 0300 	mov.w	r3, #0
 801136a:	f04f 0400 	mov.w	r4, #0
 801136e:	00d4      	lsls	r4, r2, #3
 8011370:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8011374:	00cb      	lsls	r3, r1, #3
 8011376:	4601      	mov	r1, r0
 8011378:	f04f 0200 	mov.w	r2, #0
 801137c:	f04f 0300 	mov.w	r3, #0
 8011380:	f04f 0400 	mov.w	r4, #0
 8011384:	00d4      	lsls	r4, r2, #3
 8011386:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 801138a:	00cb      	lsls	r3, r1, #3
 801138c:	1dc3      	adds	r3, r0, #7
 801138e:	08db      	lsrs	r3, r3, #3
 8011390:	00db      	lsls	r3, r3, #3
 8011392:	ebad 0d03 	sub.w	sp, sp, r3
 8011396:	466b      	mov	r3, sp
 8011398:	3300      	adds	r3, #0
 801139a:	617b      	str	r3, [r7, #20]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 801139c:	2300      	movs	r3, #0
 801139e:	633b      	str	r3, [r7, #48]	; 0x30
 80113a0:	e00d      	b.n	80113be <_LCD_Write_Frame+0xa2>
	{
			burst_buffer[j] = 	chifted;
 80113a2:	697a      	ldr	r2, [r7, #20]
 80113a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113a6:	4413      	add	r3, r2
 80113a8:	7ffa      	ldrb	r2, [r7, #31]
 80113aa:	701a      	strb	r2, [r3, #0]
			burst_buffer[j+1] = colour;
 80113ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113ae:	3301      	adds	r3, #1
 80113b0:	897a      	ldrh	r2, [r7, #10]
 80113b2:	b2d1      	uxtb	r1, r2
 80113b4:	697a      	ldr	r2, [r7, #20]
 80113b6:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 80113b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113ba:	3302      	adds	r3, #2
 80113bc:	633b      	str	r3, [r7, #48]	; 0x30
 80113be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80113c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113c2:	429a      	cmp	r2, r3
 80113c4:	d3ed      	bcc.n	80113a2 <_LCD_Write_Frame+0x86>
	}
	
	uint32_t Sending_size = chunk_size*2;
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	005b      	lsls	r3, r3, #1
 80113ca:	613b      	str	r3, [r7, #16]

	// make sure we don't divide by size=0
	uint32_t Sending_in_Block = 1;
 80113cc:	2301      	movs	r3, #1
 80113ce:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t Remainder_from_block = 0;
 80113d0:	2300      	movs	r3, #0
 80113d2:	62bb      	str	r3, [r7, #40]	; 0x28
	if(chunk_size > 0)
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	d00d      	beq.n	80113f6 <_LCD_Write_Frame+0xda>
	{
			Sending_in_Block 		= Sending_size/buffer_size;
 80113da:	693a      	ldr	r2, [r7, #16]
 80113dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113de:	fbb2 f3f3 	udiv	r3, r2, r3
 80113e2:	637b      	str	r3, [r7, #52]	; 0x34
			Remainder_from_block 	= Sending_size%buffer_size;
 80113e4:	693b      	ldr	r3, [r7, #16]
 80113e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80113e8:	fbb3 f2f2 	udiv	r2, r3, r2
 80113ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80113ee:	fb01 f202 	mul.w	r2, r1, r2
 80113f2:	1a9b      	subs	r3, r3, r2
 80113f4:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	// send blocks
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 80113f6:	4b20      	ldr	r3, [pc, #128]	; (8011478 <_LCD_Write_Frame+0x15c>)
 80113f8:	695b      	ldr	r3, [r3, #20]
 80113fa:	4a1f      	ldr	r2, [pc, #124]	; (8011478 <_LCD_Write_Frame+0x15c>)
 80113fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011400:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8011402:	4b1d      	ldr	r3, [pc, #116]	; (8011478 <_LCD_Write_Frame+0x15c>)
 8011404:	695b      	ldr	r3, [r3, #20]
 8011406:	4a1c      	ldr	r2, [pc, #112]	; (8011478 <_LCD_Write_Frame+0x15c>)
 8011408:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801140c:	6153      	str	r3, [r2, #20]
//TODO
	if(Sending_in_Block != 0)
 801140e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011410:	2b00      	cmp	r3, #0
 8011412:	d00f      	beq.n	8011434 <_LCD_Write_Frame+0x118>
	{
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8011414:	2300      	movs	r3, #0
 8011416:	627b      	str	r3, [r7, #36]	; 0x24
 8011418:	e008      	b.n	801142c <_LCD_Write_Frame+0x110>
		{
			_SPI_SendByteMultiByte(burst_buffer, buffer_size, 0, 10);
 801141a:	6978      	ldr	r0, [r7, #20]
 801141c:	230a      	movs	r3, #10
 801141e:	2200      	movs	r2, #0
 8011420:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011422:	f000 f8c1 	bl	80115a8 <_SPI_SendByteMultiByte>
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8011426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011428:	3301      	adds	r3, #1
 801142a:	627b      	str	r3, [r7, #36]	; 0x24
 801142c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801142e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011430:	429a      	cmp	r2, r3
 8011432:	d3f2      	bcc.n	801141a <_LCD_Write_Frame+0xfe>
		}
	}

	_SPI_SendByteMultiByte(burst_buffer, Remainder_from_block, 0, 10);
 8011434:	6978      	ldr	r0, [r7, #20]
 8011436:	230a      	movs	r3, #10
 8011438:	2200      	movs	r2, #0
 801143a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801143c:	f000 f8b4 	bl	80115a8 <_SPI_SendByteMultiByte>


	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 8011440:	2300      	movs	r3, #0
 8011442:	623b      	str	r3, [r7, #32]
 8011444:	e008      	b.n	8011458 <_LCD_Write_Frame+0x13c>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8011446:	4b0c      	ldr	r3, [pc, #48]	; (8011478 <_LCD_Write_Frame+0x15c>)
 8011448:	695b      	ldr	r3, [r3, #20]
 801144a:	4a0b      	ldr	r2, [pc, #44]	; (8011478 <_LCD_Write_Frame+0x15c>)
 801144c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011450:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 8011452:	6a3b      	ldr	r3, [r7, #32]
 8011454:	3301      	adds	r3, #1
 8011456:	623b      	str	r3, [r7, #32]
 8011458:	6a3b      	ldr	r3, [r7, #32]
 801145a:	2b02      	cmp	r3, #2
 801145c:	ddf3      	ble.n	8011446 <_LCD_Write_Frame+0x12a>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 801145e:	4b06      	ldr	r3, [pc, #24]	; (8011478 <_LCD_Write_Frame+0x15c>)
 8011460:	695b      	ldr	r3, [r3, #20]
 8011462:	4a05      	ldr	r2, [pc, #20]	; (8011478 <_LCD_Write_Frame+0x15c>)
 8011464:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011468:	6153      	str	r3, [r2, #20]
 801146a:	46ad      	mov	sp, r5

}
 801146c:	bf00      	nop
 801146e:	3738      	adds	r7, #56	; 0x38
 8011470:	46bd      	mov	sp, r7
 8011472:	bdb0      	pop	{r4, r5, r7, pc}
 8011474:	20000ec0 	.word	0x20000ec0
 8011478:	48000400 	.word	0x48000400

0801147c <_LCD_SendCommand>:
 *
 * 	Send command to LCD
 *
 */
void _LCD_SendCommand(uint8_t command)
{
 801147c:	b580      	push	{r7, lr}
 801147e:	b084      	sub	sp, #16
 8011480:	af00      	add	r7, sp, #0
 8011482:	4603      	mov	r3, r0
 8011484:	71fb      	strb	r3, [r7, #7]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8011486:	4b15      	ldr	r3, [pc, #84]	; (80114dc <_LCD_SendCommand+0x60>)
 8011488:	695b      	ldr	r3, [r3, #20]
 801148a:	4a14      	ldr	r2, [pc, #80]	; (80114dc <_LCD_SendCommand+0x60>)
 801148c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011490:	6153      	str	r3, [r2, #20]
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 8011492:	4b12      	ldr	r3, [pc, #72]	; (80114dc <_LCD_SendCommand+0x60>)
 8011494:	695b      	ldr	r3, [r3, #20]
 8011496:	4a11      	ldr	r2, [pc, #68]	; (80114dc <_LCD_SendCommand+0x60>)
 8011498:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801149c:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(command, 0 , 0);
 801149e:	79fb      	ldrb	r3, [r7, #7]
 80114a0:	2200      	movs	r2, #0
 80114a2:	2100      	movs	r1, #0
 80114a4:	4618      	mov	r0, r3
 80114a6:	f000 f84d 	bl	8011544 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 80114aa:	2300      	movs	r3, #0
 80114ac:	60fb      	str	r3, [r7, #12]
 80114ae:	e008      	b.n	80114c2 <_LCD_SendCommand+0x46>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80114b0:	4b0a      	ldr	r3, [pc, #40]	; (80114dc <_LCD_SendCommand+0x60>)
 80114b2:	695b      	ldr	r3, [r3, #20]
 80114b4:	4a09      	ldr	r2, [pc, #36]	; (80114dc <_LCD_SendCommand+0x60>)
 80114b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80114ba:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 80114bc:	68fb      	ldr	r3, [r7, #12]
 80114be:	3301      	adds	r3, #1
 80114c0:	60fb      	str	r3, [r7, #12]
 80114c2:	68fb      	ldr	r3, [r7, #12]
 80114c4:	2b02      	cmp	r3, #2
 80114c6:	ddf3      	ble.n	80114b0 <_LCD_SendCommand+0x34>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 80114c8:	4b04      	ldr	r3, [pc, #16]	; (80114dc <_LCD_SendCommand+0x60>)
 80114ca:	695b      	ldr	r3, [r3, #20]
 80114cc:	4a03      	ldr	r2, [pc, #12]	; (80114dc <_LCD_SendCommand+0x60>)
 80114ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80114d2:	6153      	str	r3, [r2, #20]
}
 80114d4:	bf00      	nop
 80114d6:	3710      	adds	r7, #16
 80114d8:	46bd      	mov	sp, r7
 80114da:	bd80      	pop	{r7, pc}
 80114dc:	48000400 	.word	0x48000400

080114e0 <_LCD_SendData>:
 *
 * 	Send Data to LCD
 *
 */
void _LCD_SendData(uint8_t data)
{
 80114e0:	b580      	push	{r7, lr}
 80114e2:	b084      	sub	sp, #16
 80114e4:	af00      	add	r7, sp, #0
 80114e6:	4603      	mov	r3, r0
 80114e8:	71fb      	strb	r3, [r7, #7]
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 80114ea:	4b15      	ldr	r3, [pc, #84]	; (8011540 <_LCD_SendData+0x60>)
 80114ec:	695b      	ldr	r3, [r3, #20]
 80114ee:	4a14      	ldr	r2, [pc, #80]	; (8011540 <_LCD_SendData+0x60>)
 80114f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80114f4:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80114f6:	4b12      	ldr	r3, [pc, #72]	; (8011540 <_LCD_SendData+0x60>)
 80114f8:	695b      	ldr	r3, [r3, #20]
 80114fa:	4a11      	ldr	r2, [pc, #68]	; (8011540 <_LCD_SendData+0x60>)
 80114fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011500:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(data, 0 , 0);
 8011502:	79fb      	ldrb	r3, [r7, #7]
 8011504:	2200      	movs	r2, #0
 8011506:	2100      	movs	r1, #0
 8011508:	4618      	mov	r0, r3
 801150a:	f000 f81b 	bl	8011544 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 801150e:	2300      	movs	r3, #0
 8011510:	60fb      	str	r3, [r7, #12]
 8011512:	e008      	b.n	8011526 <_LCD_SendData+0x46>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8011514:	4b0a      	ldr	r3, [pc, #40]	; (8011540 <_LCD_SendData+0x60>)
 8011516:	695b      	ldr	r3, [r3, #20]
 8011518:	4a09      	ldr	r2, [pc, #36]	; (8011540 <_LCD_SendData+0x60>)
 801151a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801151e:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 8011520:	68fb      	ldr	r3, [r7, #12]
 8011522:	3301      	adds	r3, #1
 8011524:	60fb      	str	r3, [r7, #12]
 8011526:	68fb      	ldr	r3, [r7, #12]
 8011528:	2b02      	cmp	r3, #2
 801152a:	ddf3      	ble.n	8011514 <_LCD_SendData+0x34>

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 801152c:	4b04      	ldr	r3, [pc, #16]	; (8011540 <_LCD_SendData+0x60>)
 801152e:	695b      	ldr	r3, [r3, #20]
 8011530:	4a03      	ldr	r2, [pc, #12]	; (8011540 <_LCD_SendData+0x60>)
 8011532:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011536:	6153      	str	r3, [r2, #20]
}
 8011538:	bf00      	nop
 801153a:	3710      	adds	r7, #16
 801153c:	46bd      	mov	sp, r7
 801153e:	bd80      	pop	{r7, pc}
 8011540:	48000400 	.word	0x48000400

08011544 <_SPI_SendByte>:
 *
 * 	Send single byte over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByte(unsigned char data_buffer, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 8011544:	b480      	push	{r7}
 8011546:	b085      	sub	sp, #20
 8011548:	af00      	add	r7, sp, #0
 801154a:	4603      	mov	r3, r0
 801154c:	71fb      	strb	r3, [r7, #7]
 801154e:	460b      	mov	r3, r1
 8011550:	71bb      	strb	r3, [r7, #6]
 8011552:	4613      	mov	r3, r2
 8011554:	717b      	strb	r3, [r7, #5]
#endif

#ifdef USE_BARE_SPI

    // pre frame delay
   	for(int d = 0; d < pre_frame_delay ; d++)
 8011556:	2300      	movs	r3, #0
 8011558:	60fb      	str	r3, [r7, #12]
 801155a:	e003      	b.n	8011564 <_SPI_SendByte+0x20>
   		asm("nop");
 801155c:	bf00      	nop
   	for(int d = 0; d < pre_frame_delay ; d++)
 801155e:	68fb      	ldr	r3, [r7, #12]
 8011560:	3301      	adds	r3, #1
 8011562:	60fb      	str	r3, [r7, #12]
 8011564:	79bb      	ldrb	r3, [r7, #6]
 8011566:	68fa      	ldr	r2, [r7, #12]
 8011568:	429a      	cmp	r2, r3
 801156a:	dbf7      	blt.n	801155c <_SPI_SendByte+0x18>

	// check transmit buffer empty
	if((SPI_PERIPH->SR & SPI_SR_TXE) == SPI_SR_TXE)
 801156c:	4b0c      	ldr	r3, [pc, #48]	; (80115a0 <_SPI_SendByte+0x5c>)
 801156e:	689b      	ldr	r3, [r3, #8]
 8011570:	f003 0302 	and.w	r3, r3, #2
 8011574:	2b02      	cmp	r3, #2
 8011576:	d102      	bne.n	801157e <_SPI_SendByte+0x3a>
	{
		*(volatile uint8_t *)&SPI_PERIPH->DR = data_buffer;
 8011578:	4a0a      	ldr	r2, [pc, #40]	; (80115a4 <_SPI_SendByte+0x60>)
 801157a:	79fb      	ldrb	r3, [r7, #7]
 801157c:	7013      	strb	r3, [r2, #0]
	}

    // post frame delay
   	for(int d = 0; d < post_frame_delay ; d++)
 801157e:	2300      	movs	r3, #0
 8011580:	60bb      	str	r3, [r7, #8]
 8011582:	e003      	b.n	801158c <_SPI_SendByte+0x48>
   		asm("nop");
 8011584:	bf00      	nop
   	for(int d = 0; d < post_frame_delay ; d++)
 8011586:	68bb      	ldr	r3, [r7, #8]
 8011588:	3301      	adds	r3, #1
 801158a:	60bb      	str	r3, [r7, #8]
 801158c:	797b      	ldrb	r3, [r7, #5]
 801158e:	68ba      	ldr	r2, [r7, #8]
 8011590:	429a      	cmp	r2, r3
 8011592:	dbf7      	blt.n	8011584 <_SPI_SendByte+0x40>

#endif

}
 8011594:	bf00      	nop
 8011596:	3714      	adds	r7, #20
 8011598:	46bd      	mov	sp, r7
 801159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801159e:	4770      	bx	lr
 80115a0:	40003c00 	.word	0x40003c00
 80115a4:	40003c0c 	.word	0x40003c0c

080115a8 <_SPI_SendByteMultiByte>:
 *
 * 	Send multiple bytes over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByteMultiByte(unsigned char *data_buffer, uint32_t buffer_size, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 80115a8:	b480      	push	{r7}
 80115aa:	b089      	sub	sp, #36	; 0x24
 80115ac:	af00      	add	r7, sp, #0
 80115ae:	60f8      	str	r0, [r7, #12]
 80115b0:	60b9      	str	r1, [r7, #8]
 80115b2:	4611      	mov	r1, r2
 80115b4:	461a      	mov	r2, r3
 80115b6:	460b      	mov	r3, r1
 80115b8:	71fb      	strb	r3, [r7, #7]
 80115ba:	4613      	mov	r3, r2
 80115bc:	71bb      	strb	r3, [r7, #6]
#endif

#ifdef USE_BARE_SPI

    // pre frame delay
   	for(int d = 0; d < pre_frame_delay ; d++)
 80115be:	2300      	movs	r3, #0
 80115c0:	61fb      	str	r3, [r7, #28]
 80115c2:	e003      	b.n	80115cc <_SPI_SendByteMultiByte+0x24>
   		asm("nop");
 80115c4:	bf00      	nop
   	for(int d = 0; d < pre_frame_delay ; d++)
 80115c6:	69fb      	ldr	r3, [r7, #28]
 80115c8:	3301      	adds	r3, #1
 80115ca:	61fb      	str	r3, [r7, #28]
 80115cc:	79fb      	ldrb	r3, [r7, #7]
 80115ce:	69fa      	ldr	r2, [r7, #28]
 80115d0:	429a      	cmp	r2, r3
 80115d2:	dbf7      	blt.n	80115c4 <_SPI_SendByteMultiByte+0x1c>

	uint8_t *p_data_buffer = (uint8_t *)data_buffer;
 80115d4:	68fb      	ldr	r3, [r7, #12]
 80115d6:	61bb      	str	r3, [r7, #24]
	//volatile uint16_t TxXferCount = (uint16_t)buffer_size;

	while (buffer_size > 0U)
 80115d8:	e01d      	b.n	8011616 <_SPI_SendByteMultiByte+0x6e>
	{
		// check transmit buffer empty
		if ((SPI_PERIPH->SR & SPI_SR_TXE) == SPI_SR_TXE)
 80115da:	4b1c      	ldr	r3, [pc, #112]	; (801164c <_SPI_SendByteMultiByte+0xa4>)
 80115dc:	689b      	ldr	r3, [r3, #8]
 80115de:	f003 0302 	and.w	r3, r3, #2
 80115e2:	2b02      	cmp	r3, #2
 80115e4:	d117      	bne.n	8011616 <_SPI_SendByteMultiByte+0x6e>
		{
			if (buffer_size > 1U)
 80115e6:	68bb      	ldr	r3, [r7, #8]
 80115e8:	2b01      	cmp	r3, #1
 80115ea:	d90a      	bls.n	8011602 <_SPI_SendByteMultiByte+0x5a>
			{
				// write on the data register in packing mode
				SPI_PERIPH->DR = *((uint16_t *)p_data_buffer);
 80115ec:	69bb      	ldr	r3, [r7, #24]
 80115ee:	881a      	ldrh	r2, [r3, #0]
 80115f0:	4b16      	ldr	r3, [pc, #88]	; (801164c <_SPI_SendByteMultiByte+0xa4>)
 80115f2:	60da      	str	r2, [r3, #12]
				p_data_buffer += sizeof(uint16_t);
 80115f4:	69bb      	ldr	r3, [r7, #24]
 80115f6:	3302      	adds	r3, #2
 80115f8:	61bb      	str	r3, [r7, #24]
				buffer_size -= 2U;
 80115fa:	68bb      	ldr	r3, [r7, #8]
 80115fc:	3b02      	subs	r3, #2
 80115fe:	60bb      	str	r3, [r7, #8]
 8011600:	e009      	b.n	8011616 <_SPI_SendByteMultiByte+0x6e>
			}
			else
			{
				*((volatile uint8_t *)&SPI_PERIPH->DR) = (*p_data_buffer);
 8011602:	4a13      	ldr	r2, [pc, #76]	; (8011650 <_SPI_SendByteMultiByte+0xa8>)
 8011604:	69bb      	ldr	r3, [r7, #24]
 8011606:	781b      	ldrb	r3, [r3, #0]
 8011608:	7013      	strb	r3, [r2, #0]
				p_data_buffer++;
 801160a:	69bb      	ldr	r3, [r7, #24]
 801160c:	3301      	adds	r3, #1
 801160e:	61bb      	str	r3, [r7, #24]
				buffer_size--;
 8011610:	68bb      	ldr	r3, [r7, #8]
 8011612:	3b01      	subs	r3, #1
 8011614:	60bb      	str	r3, [r7, #8]
	while (buffer_size > 0U)
 8011616:	68bb      	ldr	r3, [r7, #8]
 8011618:	2b00      	cmp	r3, #0
 801161a:	d1de      	bne.n	80115da <_SPI_SendByteMultiByte+0x32>
			}
		}
	}

	// clear SPI overrun flag
	SPI_PERIPH->SR &= ~(SPI_SR_OVR);
 801161c:	4b0b      	ldr	r3, [pc, #44]	; (801164c <_SPI_SendByteMultiByte+0xa4>)
 801161e:	689b      	ldr	r3, [r3, #8]
 8011620:	4a0a      	ldr	r2, [pc, #40]	; (801164c <_SPI_SendByteMultiByte+0xa4>)
 8011622:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011626:	6093      	str	r3, [r2, #8]

    // post frame delay
   	for(int d = 0; d < post_frame_delay ; d++)
 8011628:	2300      	movs	r3, #0
 801162a:	617b      	str	r3, [r7, #20]
 801162c:	e003      	b.n	8011636 <_SPI_SendByteMultiByte+0x8e>
   		asm("nop");
 801162e:	bf00      	nop
   	for(int d = 0; d < post_frame_delay ; d++)
 8011630:	697b      	ldr	r3, [r7, #20]
 8011632:	3301      	adds	r3, #1
 8011634:	617b      	str	r3, [r7, #20]
 8011636:	79bb      	ldrb	r3, [r7, #6]
 8011638:	697a      	ldr	r2, [r7, #20]
 801163a:	429a      	cmp	r2, r3
 801163c:	dbf7      	blt.n	801162e <_SPI_SendByteMultiByte+0x86>

#endif

}
 801163e:	bf00      	nop
 8011640:	3724      	adds	r7, #36	; 0x24
 8011642:	46bd      	mov	sp, r7
 8011644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011648:	4770      	bx	lr
 801164a:	bf00      	nop
 801164c:	40003c00 	.word	0x40003c00
 8011650:	40003c0c 	.word	0x40003c0c

08011654 <__errno>:
 8011654:	4b01      	ldr	r3, [pc, #4]	; (801165c <__errno+0x8>)
 8011656:	6818      	ldr	r0, [r3, #0]
 8011658:	4770      	bx	lr
 801165a:	bf00      	nop
 801165c:	20001eb4 	.word	0x20001eb4

08011660 <__libc_init_array>:
 8011660:	b570      	push	{r4, r5, r6, lr}
 8011662:	4e0d      	ldr	r6, [pc, #52]	; (8011698 <__libc_init_array+0x38>)
 8011664:	4c0d      	ldr	r4, [pc, #52]	; (801169c <__libc_init_array+0x3c>)
 8011666:	1ba4      	subs	r4, r4, r6
 8011668:	10a4      	asrs	r4, r4, #2
 801166a:	2500      	movs	r5, #0
 801166c:	42a5      	cmp	r5, r4
 801166e:	d109      	bne.n	8011684 <__libc_init_array+0x24>
 8011670:	4e0b      	ldr	r6, [pc, #44]	; (80116a0 <__libc_init_array+0x40>)
 8011672:	4c0c      	ldr	r4, [pc, #48]	; (80116a4 <__libc_init_array+0x44>)
 8011674:	f004 f89e 	bl	80157b4 <_init>
 8011678:	1ba4      	subs	r4, r4, r6
 801167a:	10a4      	asrs	r4, r4, #2
 801167c:	2500      	movs	r5, #0
 801167e:	42a5      	cmp	r5, r4
 8011680:	d105      	bne.n	801168e <__libc_init_array+0x2e>
 8011682:	bd70      	pop	{r4, r5, r6, pc}
 8011684:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011688:	4798      	blx	r3
 801168a:	3501      	adds	r5, #1
 801168c:	e7ee      	b.n	801166c <__libc_init_array+0xc>
 801168e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011692:	4798      	blx	r3
 8011694:	3501      	adds	r5, #1
 8011696:	e7f2      	b.n	801167e <__libc_init_array+0x1e>
 8011698:	08016be8 	.word	0x08016be8
 801169c:	08016be8 	.word	0x08016be8
 80116a0:	08016be8 	.word	0x08016be8
 80116a4:	08016bec 	.word	0x08016bec

080116a8 <memset>:
 80116a8:	4402      	add	r2, r0
 80116aa:	4603      	mov	r3, r0
 80116ac:	4293      	cmp	r3, r2
 80116ae:	d100      	bne.n	80116b2 <memset+0xa>
 80116b0:	4770      	bx	lr
 80116b2:	f803 1b01 	strb.w	r1, [r3], #1
 80116b6:	e7f9      	b.n	80116ac <memset+0x4>

080116b8 <__cvt>:
 80116b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80116bc:	ec55 4b10 	vmov	r4, r5, d0
 80116c0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80116c2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80116c6:	2d00      	cmp	r5, #0
 80116c8:	460e      	mov	r6, r1
 80116ca:	4691      	mov	r9, r2
 80116cc:	4619      	mov	r1, r3
 80116ce:	bfb8      	it	lt
 80116d0:	4622      	movlt	r2, r4
 80116d2:	462b      	mov	r3, r5
 80116d4:	f027 0720 	bic.w	r7, r7, #32
 80116d8:	bfbb      	ittet	lt
 80116da:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80116de:	461d      	movlt	r5, r3
 80116e0:	2300      	movge	r3, #0
 80116e2:	232d      	movlt	r3, #45	; 0x2d
 80116e4:	bfb8      	it	lt
 80116e6:	4614      	movlt	r4, r2
 80116e8:	2f46      	cmp	r7, #70	; 0x46
 80116ea:	700b      	strb	r3, [r1, #0]
 80116ec:	d004      	beq.n	80116f8 <__cvt+0x40>
 80116ee:	2f45      	cmp	r7, #69	; 0x45
 80116f0:	d100      	bne.n	80116f4 <__cvt+0x3c>
 80116f2:	3601      	adds	r6, #1
 80116f4:	2102      	movs	r1, #2
 80116f6:	e000      	b.n	80116fa <__cvt+0x42>
 80116f8:	2103      	movs	r1, #3
 80116fa:	ab03      	add	r3, sp, #12
 80116fc:	9301      	str	r3, [sp, #4]
 80116fe:	ab02      	add	r3, sp, #8
 8011700:	9300      	str	r3, [sp, #0]
 8011702:	4632      	mov	r2, r6
 8011704:	4653      	mov	r3, sl
 8011706:	ec45 4b10 	vmov	d0, r4, r5
 801170a:	f000 fe3d 	bl	8012388 <_dtoa_r>
 801170e:	2f47      	cmp	r7, #71	; 0x47
 8011710:	4680      	mov	r8, r0
 8011712:	d102      	bne.n	801171a <__cvt+0x62>
 8011714:	f019 0f01 	tst.w	r9, #1
 8011718:	d026      	beq.n	8011768 <__cvt+0xb0>
 801171a:	2f46      	cmp	r7, #70	; 0x46
 801171c:	eb08 0906 	add.w	r9, r8, r6
 8011720:	d111      	bne.n	8011746 <__cvt+0x8e>
 8011722:	f898 3000 	ldrb.w	r3, [r8]
 8011726:	2b30      	cmp	r3, #48	; 0x30
 8011728:	d10a      	bne.n	8011740 <__cvt+0x88>
 801172a:	2200      	movs	r2, #0
 801172c:	2300      	movs	r3, #0
 801172e:	4620      	mov	r0, r4
 8011730:	4629      	mov	r1, r5
 8011732:	f7ef f9f1 	bl	8000b18 <__aeabi_dcmpeq>
 8011736:	b918      	cbnz	r0, 8011740 <__cvt+0x88>
 8011738:	f1c6 0601 	rsb	r6, r6, #1
 801173c:	f8ca 6000 	str.w	r6, [sl]
 8011740:	f8da 3000 	ldr.w	r3, [sl]
 8011744:	4499      	add	r9, r3
 8011746:	2200      	movs	r2, #0
 8011748:	2300      	movs	r3, #0
 801174a:	4620      	mov	r0, r4
 801174c:	4629      	mov	r1, r5
 801174e:	f7ef f9e3 	bl	8000b18 <__aeabi_dcmpeq>
 8011752:	b938      	cbnz	r0, 8011764 <__cvt+0xac>
 8011754:	2230      	movs	r2, #48	; 0x30
 8011756:	9b03      	ldr	r3, [sp, #12]
 8011758:	454b      	cmp	r3, r9
 801175a:	d205      	bcs.n	8011768 <__cvt+0xb0>
 801175c:	1c59      	adds	r1, r3, #1
 801175e:	9103      	str	r1, [sp, #12]
 8011760:	701a      	strb	r2, [r3, #0]
 8011762:	e7f8      	b.n	8011756 <__cvt+0x9e>
 8011764:	f8cd 900c 	str.w	r9, [sp, #12]
 8011768:	9b03      	ldr	r3, [sp, #12]
 801176a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801176c:	eba3 0308 	sub.w	r3, r3, r8
 8011770:	4640      	mov	r0, r8
 8011772:	6013      	str	r3, [r2, #0]
 8011774:	b004      	add	sp, #16
 8011776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801177a <__exponent>:
 801177a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801177c:	2900      	cmp	r1, #0
 801177e:	4604      	mov	r4, r0
 8011780:	bfba      	itte	lt
 8011782:	4249      	neglt	r1, r1
 8011784:	232d      	movlt	r3, #45	; 0x2d
 8011786:	232b      	movge	r3, #43	; 0x2b
 8011788:	2909      	cmp	r1, #9
 801178a:	f804 2b02 	strb.w	r2, [r4], #2
 801178e:	7043      	strb	r3, [r0, #1]
 8011790:	dd20      	ble.n	80117d4 <__exponent+0x5a>
 8011792:	f10d 0307 	add.w	r3, sp, #7
 8011796:	461f      	mov	r7, r3
 8011798:	260a      	movs	r6, #10
 801179a:	fb91 f5f6 	sdiv	r5, r1, r6
 801179e:	fb06 1115 	mls	r1, r6, r5, r1
 80117a2:	3130      	adds	r1, #48	; 0x30
 80117a4:	2d09      	cmp	r5, #9
 80117a6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80117aa:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 80117ae:	4629      	mov	r1, r5
 80117b0:	dc09      	bgt.n	80117c6 <__exponent+0x4c>
 80117b2:	3130      	adds	r1, #48	; 0x30
 80117b4:	3b02      	subs	r3, #2
 80117b6:	f802 1c01 	strb.w	r1, [r2, #-1]
 80117ba:	42bb      	cmp	r3, r7
 80117bc:	4622      	mov	r2, r4
 80117be:	d304      	bcc.n	80117ca <__exponent+0x50>
 80117c0:	1a10      	subs	r0, r2, r0
 80117c2:	b003      	add	sp, #12
 80117c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80117c6:	4613      	mov	r3, r2
 80117c8:	e7e7      	b.n	801179a <__exponent+0x20>
 80117ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80117ce:	f804 2b01 	strb.w	r2, [r4], #1
 80117d2:	e7f2      	b.n	80117ba <__exponent+0x40>
 80117d4:	2330      	movs	r3, #48	; 0x30
 80117d6:	4419      	add	r1, r3
 80117d8:	7083      	strb	r3, [r0, #2]
 80117da:	1d02      	adds	r2, r0, #4
 80117dc:	70c1      	strb	r1, [r0, #3]
 80117de:	e7ef      	b.n	80117c0 <__exponent+0x46>

080117e0 <_printf_float>:
 80117e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117e4:	b08d      	sub	sp, #52	; 0x34
 80117e6:	460c      	mov	r4, r1
 80117e8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80117ec:	4616      	mov	r6, r2
 80117ee:	461f      	mov	r7, r3
 80117f0:	4605      	mov	r5, r0
 80117f2:	f001 fcfb 	bl	80131ec <_localeconv_r>
 80117f6:	6803      	ldr	r3, [r0, #0]
 80117f8:	9304      	str	r3, [sp, #16]
 80117fa:	4618      	mov	r0, r3
 80117fc:	f7ee fd10 	bl	8000220 <strlen>
 8011800:	2300      	movs	r3, #0
 8011802:	930a      	str	r3, [sp, #40]	; 0x28
 8011804:	f8d8 3000 	ldr.w	r3, [r8]
 8011808:	9005      	str	r0, [sp, #20]
 801180a:	3307      	adds	r3, #7
 801180c:	f023 0307 	bic.w	r3, r3, #7
 8011810:	f103 0208 	add.w	r2, r3, #8
 8011814:	f894 a018 	ldrb.w	sl, [r4, #24]
 8011818:	f8d4 b000 	ldr.w	fp, [r4]
 801181c:	f8c8 2000 	str.w	r2, [r8]
 8011820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011824:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8011828:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801182c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8011830:	9307      	str	r3, [sp, #28]
 8011832:	f8cd 8018 	str.w	r8, [sp, #24]
 8011836:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801183a:	4ba7      	ldr	r3, [pc, #668]	; (8011ad8 <_printf_float+0x2f8>)
 801183c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011840:	f7ef f99c 	bl	8000b7c <__aeabi_dcmpun>
 8011844:	bb70      	cbnz	r0, 80118a4 <_printf_float+0xc4>
 8011846:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801184a:	4ba3      	ldr	r3, [pc, #652]	; (8011ad8 <_printf_float+0x2f8>)
 801184c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011850:	f7ef f976 	bl	8000b40 <__aeabi_dcmple>
 8011854:	bb30      	cbnz	r0, 80118a4 <_printf_float+0xc4>
 8011856:	2200      	movs	r2, #0
 8011858:	2300      	movs	r3, #0
 801185a:	4640      	mov	r0, r8
 801185c:	4649      	mov	r1, r9
 801185e:	f7ef f965 	bl	8000b2c <__aeabi_dcmplt>
 8011862:	b110      	cbz	r0, 801186a <_printf_float+0x8a>
 8011864:	232d      	movs	r3, #45	; 0x2d
 8011866:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801186a:	4a9c      	ldr	r2, [pc, #624]	; (8011adc <_printf_float+0x2fc>)
 801186c:	4b9c      	ldr	r3, [pc, #624]	; (8011ae0 <_printf_float+0x300>)
 801186e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8011872:	bf8c      	ite	hi
 8011874:	4690      	movhi	r8, r2
 8011876:	4698      	movls	r8, r3
 8011878:	2303      	movs	r3, #3
 801187a:	f02b 0204 	bic.w	r2, fp, #4
 801187e:	6123      	str	r3, [r4, #16]
 8011880:	6022      	str	r2, [r4, #0]
 8011882:	f04f 0900 	mov.w	r9, #0
 8011886:	9700      	str	r7, [sp, #0]
 8011888:	4633      	mov	r3, r6
 801188a:	aa0b      	add	r2, sp, #44	; 0x2c
 801188c:	4621      	mov	r1, r4
 801188e:	4628      	mov	r0, r5
 8011890:	f000 f9e6 	bl	8011c60 <_printf_common>
 8011894:	3001      	adds	r0, #1
 8011896:	f040 808d 	bne.w	80119b4 <_printf_float+0x1d4>
 801189a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801189e:	b00d      	add	sp, #52	; 0x34
 80118a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118a4:	4642      	mov	r2, r8
 80118a6:	464b      	mov	r3, r9
 80118a8:	4640      	mov	r0, r8
 80118aa:	4649      	mov	r1, r9
 80118ac:	f7ef f966 	bl	8000b7c <__aeabi_dcmpun>
 80118b0:	b110      	cbz	r0, 80118b8 <_printf_float+0xd8>
 80118b2:	4a8c      	ldr	r2, [pc, #560]	; (8011ae4 <_printf_float+0x304>)
 80118b4:	4b8c      	ldr	r3, [pc, #560]	; (8011ae8 <_printf_float+0x308>)
 80118b6:	e7da      	b.n	801186e <_printf_float+0x8e>
 80118b8:	6861      	ldr	r1, [r4, #4]
 80118ba:	1c4b      	adds	r3, r1, #1
 80118bc:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80118c0:	a80a      	add	r0, sp, #40	; 0x28
 80118c2:	d13e      	bne.n	8011942 <_printf_float+0x162>
 80118c4:	2306      	movs	r3, #6
 80118c6:	6063      	str	r3, [r4, #4]
 80118c8:	2300      	movs	r3, #0
 80118ca:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80118ce:	ab09      	add	r3, sp, #36	; 0x24
 80118d0:	9300      	str	r3, [sp, #0]
 80118d2:	ec49 8b10 	vmov	d0, r8, r9
 80118d6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80118da:	6022      	str	r2, [r4, #0]
 80118dc:	f8cd a004 	str.w	sl, [sp, #4]
 80118e0:	6861      	ldr	r1, [r4, #4]
 80118e2:	4628      	mov	r0, r5
 80118e4:	f7ff fee8 	bl	80116b8 <__cvt>
 80118e8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80118ec:	2b47      	cmp	r3, #71	; 0x47
 80118ee:	4680      	mov	r8, r0
 80118f0:	d109      	bne.n	8011906 <_printf_float+0x126>
 80118f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80118f4:	1cd8      	adds	r0, r3, #3
 80118f6:	db02      	blt.n	80118fe <_printf_float+0x11e>
 80118f8:	6862      	ldr	r2, [r4, #4]
 80118fa:	4293      	cmp	r3, r2
 80118fc:	dd47      	ble.n	801198e <_printf_float+0x1ae>
 80118fe:	f1aa 0a02 	sub.w	sl, sl, #2
 8011902:	fa5f fa8a 	uxtb.w	sl, sl
 8011906:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801190a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801190c:	d824      	bhi.n	8011958 <_printf_float+0x178>
 801190e:	3901      	subs	r1, #1
 8011910:	4652      	mov	r2, sl
 8011912:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8011916:	9109      	str	r1, [sp, #36]	; 0x24
 8011918:	f7ff ff2f 	bl	801177a <__exponent>
 801191c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801191e:	1813      	adds	r3, r2, r0
 8011920:	2a01      	cmp	r2, #1
 8011922:	4681      	mov	r9, r0
 8011924:	6123      	str	r3, [r4, #16]
 8011926:	dc02      	bgt.n	801192e <_printf_float+0x14e>
 8011928:	6822      	ldr	r2, [r4, #0]
 801192a:	07d1      	lsls	r1, r2, #31
 801192c:	d501      	bpl.n	8011932 <_printf_float+0x152>
 801192e:	3301      	adds	r3, #1
 8011930:	6123      	str	r3, [r4, #16]
 8011932:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8011936:	2b00      	cmp	r3, #0
 8011938:	d0a5      	beq.n	8011886 <_printf_float+0xa6>
 801193a:	232d      	movs	r3, #45	; 0x2d
 801193c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011940:	e7a1      	b.n	8011886 <_printf_float+0xa6>
 8011942:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8011946:	f000 8177 	beq.w	8011c38 <_printf_float+0x458>
 801194a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801194e:	d1bb      	bne.n	80118c8 <_printf_float+0xe8>
 8011950:	2900      	cmp	r1, #0
 8011952:	d1b9      	bne.n	80118c8 <_printf_float+0xe8>
 8011954:	2301      	movs	r3, #1
 8011956:	e7b6      	b.n	80118c6 <_printf_float+0xe6>
 8011958:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 801195c:	d119      	bne.n	8011992 <_printf_float+0x1b2>
 801195e:	2900      	cmp	r1, #0
 8011960:	6863      	ldr	r3, [r4, #4]
 8011962:	dd0c      	ble.n	801197e <_printf_float+0x19e>
 8011964:	6121      	str	r1, [r4, #16]
 8011966:	b913      	cbnz	r3, 801196e <_printf_float+0x18e>
 8011968:	6822      	ldr	r2, [r4, #0]
 801196a:	07d2      	lsls	r2, r2, #31
 801196c:	d502      	bpl.n	8011974 <_printf_float+0x194>
 801196e:	3301      	adds	r3, #1
 8011970:	440b      	add	r3, r1
 8011972:	6123      	str	r3, [r4, #16]
 8011974:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011976:	65a3      	str	r3, [r4, #88]	; 0x58
 8011978:	f04f 0900 	mov.w	r9, #0
 801197c:	e7d9      	b.n	8011932 <_printf_float+0x152>
 801197e:	b913      	cbnz	r3, 8011986 <_printf_float+0x1a6>
 8011980:	6822      	ldr	r2, [r4, #0]
 8011982:	07d0      	lsls	r0, r2, #31
 8011984:	d501      	bpl.n	801198a <_printf_float+0x1aa>
 8011986:	3302      	adds	r3, #2
 8011988:	e7f3      	b.n	8011972 <_printf_float+0x192>
 801198a:	2301      	movs	r3, #1
 801198c:	e7f1      	b.n	8011972 <_printf_float+0x192>
 801198e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8011992:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8011996:	4293      	cmp	r3, r2
 8011998:	db05      	blt.n	80119a6 <_printf_float+0x1c6>
 801199a:	6822      	ldr	r2, [r4, #0]
 801199c:	6123      	str	r3, [r4, #16]
 801199e:	07d1      	lsls	r1, r2, #31
 80119a0:	d5e8      	bpl.n	8011974 <_printf_float+0x194>
 80119a2:	3301      	adds	r3, #1
 80119a4:	e7e5      	b.n	8011972 <_printf_float+0x192>
 80119a6:	2b00      	cmp	r3, #0
 80119a8:	bfd4      	ite	le
 80119aa:	f1c3 0302 	rsble	r3, r3, #2
 80119ae:	2301      	movgt	r3, #1
 80119b0:	4413      	add	r3, r2
 80119b2:	e7de      	b.n	8011972 <_printf_float+0x192>
 80119b4:	6823      	ldr	r3, [r4, #0]
 80119b6:	055a      	lsls	r2, r3, #21
 80119b8:	d407      	bmi.n	80119ca <_printf_float+0x1ea>
 80119ba:	6923      	ldr	r3, [r4, #16]
 80119bc:	4642      	mov	r2, r8
 80119be:	4631      	mov	r1, r6
 80119c0:	4628      	mov	r0, r5
 80119c2:	47b8      	blx	r7
 80119c4:	3001      	adds	r0, #1
 80119c6:	d12b      	bne.n	8011a20 <_printf_float+0x240>
 80119c8:	e767      	b.n	801189a <_printf_float+0xba>
 80119ca:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80119ce:	f240 80dc 	bls.w	8011b8a <_printf_float+0x3aa>
 80119d2:	2200      	movs	r2, #0
 80119d4:	2300      	movs	r3, #0
 80119d6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80119da:	f7ef f89d 	bl	8000b18 <__aeabi_dcmpeq>
 80119de:	2800      	cmp	r0, #0
 80119e0:	d033      	beq.n	8011a4a <_printf_float+0x26a>
 80119e2:	2301      	movs	r3, #1
 80119e4:	4a41      	ldr	r2, [pc, #260]	; (8011aec <_printf_float+0x30c>)
 80119e6:	4631      	mov	r1, r6
 80119e8:	4628      	mov	r0, r5
 80119ea:	47b8      	blx	r7
 80119ec:	3001      	adds	r0, #1
 80119ee:	f43f af54 	beq.w	801189a <_printf_float+0xba>
 80119f2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80119f6:	429a      	cmp	r2, r3
 80119f8:	db02      	blt.n	8011a00 <_printf_float+0x220>
 80119fa:	6823      	ldr	r3, [r4, #0]
 80119fc:	07d8      	lsls	r0, r3, #31
 80119fe:	d50f      	bpl.n	8011a20 <_printf_float+0x240>
 8011a00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011a04:	4631      	mov	r1, r6
 8011a06:	4628      	mov	r0, r5
 8011a08:	47b8      	blx	r7
 8011a0a:	3001      	adds	r0, #1
 8011a0c:	f43f af45 	beq.w	801189a <_printf_float+0xba>
 8011a10:	f04f 0800 	mov.w	r8, #0
 8011a14:	f104 091a 	add.w	r9, r4, #26
 8011a18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011a1a:	3b01      	subs	r3, #1
 8011a1c:	4543      	cmp	r3, r8
 8011a1e:	dc09      	bgt.n	8011a34 <_printf_float+0x254>
 8011a20:	6823      	ldr	r3, [r4, #0]
 8011a22:	079b      	lsls	r3, r3, #30
 8011a24:	f100 8103 	bmi.w	8011c2e <_printf_float+0x44e>
 8011a28:	68e0      	ldr	r0, [r4, #12]
 8011a2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011a2c:	4298      	cmp	r0, r3
 8011a2e:	bfb8      	it	lt
 8011a30:	4618      	movlt	r0, r3
 8011a32:	e734      	b.n	801189e <_printf_float+0xbe>
 8011a34:	2301      	movs	r3, #1
 8011a36:	464a      	mov	r2, r9
 8011a38:	4631      	mov	r1, r6
 8011a3a:	4628      	mov	r0, r5
 8011a3c:	47b8      	blx	r7
 8011a3e:	3001      	adds	r0, #1
 8011a40:	f43f af2b 	beq.w	801189a <_printf_float+0xba>
 8011a44:	f108 0801 	add.w	r8, r8, #1
 8011a48:	e7e6      	b.n	8011a18 <_printf_float+0x238>
 8011a4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	dc2b      	bgt.n	8011aa8 <_printf_float+0x2c8>
 8011a50:	2301      	movs	r3, #1
 8011a52:	4a26      	ldr	r2, [pc, #152]	; (8011aec <_printf_float+0x30c>)
 8011a54:	4631      	mov	r1, r6
 8011a56:	4628      	mov	r0, r5
 8011a58:	47b8      	blx	r7
 8011a5a:	3001      	adds	r0, #1
 8011a5c:	f43f af1d 	beq.w	801189a <_printf_float+0xba>
 8011a60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011a62:	b923      	cbnz	r3, 8011a6e <_printf_float+0x28e>
 8011a64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011a66:	b913      	cbnz	r3, 8011a6e <_printf_float+0x28e>
 8011a68:	6823      	ldr	r3, [r4, #0]
 8011a6a:	07d9      	lsls	r1, r3, #31
 8011a6c:	d5d8      	bpl.n	8011a20 <_printf_float+0x240>
 8011a6e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011a72:	4631      	mov	r1, r6
 8011a74:	4628      	mov	r0, r5
 8011a76:	47b8      	blx	r7
 8011a78:	3001      	adds	r0, #1
 8011a7a:	f43f af0e 	beq.w	801189a <_printf_float+0xba>
 8011a7e:	f04f 0900 	mov.w	r9, #0
 8011a82:	f104 0a1a 	add.w	sl, r4, #26
 8011a86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011a88:	425b      	negs	r3, r3
 8011a8a:	454b      	cmp	r3, r9
 8011a8c:	dc01      	bgt.n	8011a92 <_printf_float+0x2b2>
 8011a8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011a90:	e794      	b.n	80119bc <_printf_float+0x1dc>
 8011a92:	2301      	movs	r3, #1
 8011a94:	4652      	mov	r2, sl
 8011a96:	4631      	mov	r1, r6
 8011a98:	4628      	mov	r0, r5
 8011a9a:	47b8      	blx	r7
 8011a9c:	3001      	adds	r0, #1
 8011a9e:	f43f aefc 	beq.w	801189a <_printf_float+0xba>
 8011aa2:	f109 0901 	add.w	r9, r9, #1
 8011aa6:	e7ee      	b.n	8011a86 <_printf_float+0x2a6>
 8011aa8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011aaa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011aac:	429a      	cmp	r2, r3
 8011aae:	bfa8      	it	ge
 8011ab0:	461a      	movge	r2, r3
 8011ab2:	2a00      	cmp	r2, #0
 8011ab4:	4691      	mov	r9, r2
 8011ab6:	dd07      	ble.n	8011ac8 <_printf_float+0x2e8>
 8011ab8:	4613      	mov	r3, r2
 8011aba:	4631      	mov	r1, r6
 8011abc:	4642      	mov	r2, r8
 8011abe:	4628      	mov	r0, r5
 8011ac0:	47b8      	blx	r7
 8011ac2:	3001      	adds	r0, #1
 8011ac4:	f43f aee9 	beq.w	801189a <_printf_float+0xba>
 8011ac8:	f104 031a 	add.w	r3, r4, #26
 8011acc:	f04f 0b00 	mov.w	fp, #0
 8011ad0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011ad4:	9306      	str	r3, [sp, #24]
 8011ad6:	e015      	b.n	8011b04 <_printf_float+0x324>
 8011ad8:	7fefffff 	.word	0x7fefffff
 8011adc:	080168e4 	.word	0x080168e4
 8011ae0:	080168e0 	.word	0x080168e0
 8011ae4:	080168ec 	.word	0x080168ec
 8011ae8:	080168e8 	.word	0x080168e8
 8011aec:	08016b9c 	.word	0x08016b9c
 8011af0:	2301      	movs	r3, #1
 8011af2:	9a06      	ldr	r2, [sp, #24]
 8011af4:	4631      	mov	r1, r6
 8011af6:	4628      	mov	r0, r5
 8011af8:	47b8      	blx	r7
 8011afa:	3001      	adds	r0, #1
 8011afc:	f43f aecd 	beq.w	801189a <_printf_float+0xba>
 8011b00:	f10b 0b01 	add.w	fp, fp, #1
 8011b04:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8011b08:	ebaa 0309 	sub.w	r3, sl, r9
 8011b0c:	455b      	cmp	r3, fp
 8011b0e:	dcef      	bgt.n	8011af0 <_printf_float+0x310>
 8011b10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011b14:	429a      	cmp	r2, r3
 8011b16:	44d0      	add	r8, sl
 8011b18:	db15      	blt.n	8011b46 <_printf_float+0x366>
 8011b1a:	6823      	ldr	r3, [r4, #0]
 8011b1c:	07da      	lsls	r2, r3, #31
 8011b1e:	d412      	bmi.n	8011b46 <_printf_float+0x366>
 8011b20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011b22:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011b24:	eba3 020a 	sub.w	r2, r3, sl
 8011b28:	eba3 0a01 	sub.w	sl, r3, r1
 8011b2c:	4592      	cmp	sl, r2
 8011b2e:	bfa8      	it	ge
 8011b30:	4692      	movge	sl, r2
 8011b32:	f1ba 0f00 	cmp.w	sl, #0
 8011b36:	dc0e      	bgt.n	8011b56 <_printf_float+0x376>
 8011b38:	f04f 0800 	mov.w	r8, #0
 8011b3c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011b40:	f104 091a 	add.w	r9, r4, #26
 8011b44:	e019      	b.n	8011b7a <_printf_float+0x39a>
 8011b46:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011b4a:	4631      	mov	r1, r6
 8011b4c:	4628      	mov	r0, r5
 8011b4e:	47b8      	blx	r7
 8011b50:	3001      	adds	r0, #1
 8011b52:	d1e5      	bne.n	8011b20 <_printf_float+0x340>
 8011b54:	e6a1      	b.n	801189a <_printf_float+0xba>
 8011b56:	4653      	mov	r3, sl
 8011b58:	4642      	mov	r2, r8
 8011b5a:	4631      	mov	r1, r6
 8011b5c:	4628      	mov	r0, r5
 8011b5e:	47b8      	blx	r7
 8011b60:	3001      	adds	r0, #1
 8011b62:	d1e9      	bne.n	8011b38 <_printf_float+0x358>
 8011b64:	e699      	b.n	801189a <_printf_float+0xba>
 8011b66:	2301      	movs	r3, #1
 8011b68:	464a      	mov	r2, r9
 8011b6a:	4631      	mov	r1, r6
 8011b6c:	4628      	mov	r0, r5
 8011b6e:	47b8      	blx	r7
 8011b70:	3001      	adds	r0, #1
 8011b72:	f43f ae92 	beq.w	801189a <_printf_float+0xba>
 8011b76:	f108 0801 	add.w	r8, r8, #1
 8011b7a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011b7e:	1a9b      	subs	r3, r3, r2
 8011b80:	eba3 030a 	sub.w	r3, r3, sl
 8011b84:	4543      	cmp	r3, r8
 8011b86:	dcee      	bgt.n	8011b66 <_printf_float+0x386>
 8011b88:	e74a      	b.n	8011a20 <_printf_float+0x240>
 8011b8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011b8c:	2a01      	cmp	r2, #1
 8011b8e:	dc01      	bgt.n	8011b94 <_printf_float+0x3b4>
 8011b90:	07db      	lsls	r3, r3, #31
 8011b92:	d53a      	bpl.n	8011c0a <_printf_float+0x42a>
 8011b94:	2301      	movs	r3, #1
 8011b96:	4642      	mov	r2, r8
 8011b98:	4631      	mov	r1, r6
 8011b9a:	4628      	mov	r0, r5
 8011b9c:	47b8      	blx	r7
 8011b9e:	3001      	adds	r0, #1
 8011ba0:	f43f ae7b 	beq.w	801189a <_printf_float+0xba>
 8011ba4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011ba8:	4631      	mov	r1, r6
 8011baa:	4628      	mov	r0, r5
 8011bac:	47b8      	blx	r7
 8011bae:	3001      	adds	r0, #1
 8011bb0:	f108 0801 	add.w	r8, r8, #1
 8011bb4:	f43f ae71 	beq.w	801189a <_printf_float+0xba>
 8011bb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011bba:	2200      	movs	r2, #0
 8011bbc:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8011bc0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011bc4:	2300      	movs	r3, #0
 8011bc6:	f7ee ffa7 	bl	8000b18 <__aeabi_dcmpeq>
 8011bca:	b9c8      	cbnz	r0, 8011c00 <_printf_float+0x420>
 8011bcc:	4653      	mov	r3, sl
 8011bce:	4642      	mov	r2, r8
 8011bd0:	4631      	mov	r1, r6
 8011bd2:	4628      	mov	r0, r5
 8011bd4:	47b8      	blx	r7
 8011bd6:	3001      	adds	r0, #1
 8011bd8:	d10e      	bne.n	8011bf8 <_printf_float+0x418>
 8011bda:	e65e      	b.n	801189a <_printf_float+0xba>
 8011bdc:	2301      	movs	r3, #1
 8011bde:	4652      	mov	r2, sl
 8011be0:	4631      	mov	r1, r6
 8011be2:	4628      	mov	r0, r5
 8011be4:	47b8      	blx	r7
 8011be6:	3001      	adds	r0, #1
 8011be8:	f43f ae57 	beq.w	801189a <_printf_float+0xba>
 8011bec:	f108 0801 	add.w	r8, r8, #1
 8011bf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011bf2:	3b01      	subs	r3, #1
 8011bf4:	4543      	cmp	r3, r8
 8011bf6:	dcf1      	bgt.n	8011bdc <_printf_float+0x3fc>
 8011bf8:	464b      	mov	r3, r9
 8011bfa:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011bfe:	e6de      	b.n	80119be <_printf_float+0x1de>
 8011c00:	f04f 0800 	mov.w	r8, #0
 8011c04:	f104 0a1a 	add.w	sl, r4, #26
 8011c08:	e7f2      	b.n	8011bf0 <_printf_float+0x410>
 8011c0a:	2301      	movs	r3, #1
 8011c0c:	e7df      	b.n	8011bce <_printf_float+0x3ee>
 8011c0e:	2301      	movs	r3, #1
 8011c10:	464a      	mov	r2, r9
 8011c12:	4631      	mov	r1, r6
 8011c14:	4628      	mov	r0, r5
 8011c16:	47b8      	blx	r7
 8011c18:	3001      	adds	r0, #1
 8011c1a:	f43f ae3e 	beq.w	801189a <_printf_float+0xba>
 8011c1e:	f108 0801 	add.w	r8, r8, #1
 8011c22:	68e3      	ldr	r3, [r4, #12]
 8011c24:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011c26:	1a9b      	subs	r3, r3, r2
 8011c28:	4543      	cmp	r3, r8
 8011c2a:	dcf0      	bgt.n	8011c0e <_printf_float+0x42e>
 8011c2c:	e6fc      	b.n	8011a28 <_printf_float+0x248>
 8011c2e:	f04f 0800 	mov.w	r8, #0
 8011c32:	f104 0919 	add.w	r9, r4, #25
 8011c36:	e7f4      	b.n	8011c22 <_printf_float+0x442>
 8011c38:	2900      	cmp	r1, #0
 8011c3a:	f43f ae8b 	beq.w	8011954 <_printf_float+0x174>
 8011c3e:	2300      	movs	r3, #0
 8011c40:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8011c44:	ab09      	add	r3, sp, #36	; 0x24
 8011c46:	9300      	str	r3, [sp, #0]
 8011c48:	ec49 8b10 	vmov	d0, r8, r9
 8011c4c:	6022      	str	r2, [r4, #0]
 8011c4e:	f8cd a004 	str.w	sl, [sp, #4]
 8011c52:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8011c56:	4628      	mov	r0, r5
 8011c58:	f7ff fd2e 	bl	80116b8 <__cvt>
 8011c5c:	4680      	mov	r8, r0
 8011c5e:	e648      	b.n	80118f2 <_printf_float+0x112>

08011c60 <_printf_common>:
 8011c60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011c64:	4691      	mov	r9, r2
 8011c66:	461f      	mov	r7, r3
 8011c68:	688a      	ldr	r2, [r1, #8]
 8011c6a:	690b      	ldr	r3, [r1, #16]
 8011c6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011c70:	4293      	cmp	r3, r2
 8011c72:	bfb8      	it	lt
 8011c74:	4613      	movlt	r3, r2
 8011c76:	f8c9 3000 	str.w	r3, [r9]
 8011c7a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011c7e:	4606      	mov	r6, r0
 8011c80:	460c      	mov	r4, r1
 8011c82:	b112      	cbz	r2, 8011c8a <_printf_common+0x2a>
 8011c84:	3301      	adds	r3, #1
 8011c86:	f8c9 3000 	str.w	r3, [r9]
 8011c8a:	6823      	ldr	r3, [r4, #0]
 8011c8c:	0699      	lsls	r1, r3, #26
 8011c8e:	bf42      	ittt	mi
 8011c90:	f8d9 3000 	ldrmi.w	r3, [r9]
 8011c94:	3302      	addmi	r3, #2
 8011c96:	f8c9 3000 	strmi.w	r3, [r9]
 8011c9a:	6825      	ldr	r5, [r4, #0]
 8011c9c:	f015 0506 	ands.w	r5, r5, #6
 8011ca0:	d107      	bne.n	8011cb2 <_printf_common+0x52>
 8011ca2:	f104 0a19 	add.w	sl, r4, #25
 8011ca6:	68e3      	ldr	r3, [r4, #12]
 8011ca8:	f8d9 2000 	ldr.w	r2, [r9]
 8011cac:	1a9b      	subs	r3, r3, r2
 8011cae:	42ab      	cmp	r3, r5
 8011cb0:	dc28      	bgt.n	8011d04 <_printf_common+0xa4>
 8011cb2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8011cb6:	6822      	ldr	r2, [r4, #0]
 8011cb8:	3300      	adds	r3, #0
 8011cba:	bf18      	it	ne
 8011cbc:	2301      	movne	r3, #1
 8011cbe:	0692      	lsls	r2, r2, #26
 8011cc0:	d42d      	bmi.n	8011d1e <_printf_common+0xbe>
 8011cc2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011cc6:	4639      	mov	r1, r7
 8011cc8:	4630      	mov	r0, r6
 8011cca:	47c0      	blx	r8
 8011ccc:	3001      	adds	r0, #1
 8011cce:	d020      	beq.n	8011d12 <_printf_common+0xb2>
 8011cd0:	6823      	ldr	r3, [r4, #0]
 8011cd2:	68e5      	ldr	r5, [r4, #12]
 8011cd4:	f8d9 2000 	ldr.w	r2, [r9]
 8011cd8:	f003 0306 	and.w	r3, r3, #6
 8011cdc:	2b04      	cmp	r3, #4
 8011cde:	bf08      	it	eq
 8011ce0:	1aad      	subeq	r5, r5, r2
 8011ce2:	68a3      	ldr	r3, [r4, #8]
 8011ce4:	6922      	ldr	r2, [r4, #16]
 8011ce6:	bf0c      	ite	eq
 8011ce8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011cec:	2500      	movne	r5, #0
 8011cee:	4293      	cmp	r3, r2
 8011cf0:	bfc4      	itt	gt
 8011cf2:	1a9b      	subgt	r3, r3, r2
 8011cf4:	18ed      	addgt	r5, r5, r3
 8011cf6:	f04f 0900 	mov.w	r9, #0
 8011cfa:	341a      	adds	r4, #26
 8011cfc:	454d      	cmp	r5, r9
 8011cfe:	d11a      	bne.n	8011d36 <_printf_common+0xd6>
 8011d00:	2000      	movs	r0, #0
 8011d02:	e008      	b.n	8011d16 <_printf_common+0xb6>
 8011d04:	2301      	movs	r3, #1
 8011d06:	4652      	mov	r2, sl
 8011d08:	4639      	mov	r1, r7
 8011d0a:	4630      	mov	r0, r6
 8011d0c:	47c0      	blx	r8
 8011d0e:	3001      	adds	r0, #1
 8011d10:	d103      	bne.n	8011d1a <_printf_common+0xba>
 8011d12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011d1a:	3501      	adds	r5, #1
 8011d1c:	e7c3      	b.n	8011ca6 <_printf_common+0x46>
 8011d1e:	18e1      	adds	r1, r4, r3
 8011d20:	1c5a      	adds	r2, r3, #1
 8011d22:	2030      	movs	r0, #48	; 0x30
 8011d24:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011d28:	4422      	add	r2, r4
 8011d2a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011d2e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011d32:	3302      	adds	r3, #2
 8011d34:	e7c5      	b.n	8011cc2 <_printf_common+0x62>
 8011d36:	2301      	movs	r3, #1
 8011d38:	4622      	mov	r2, r4
 8011d3a:	4639      	mov	r1, r7
 8011d3c:	4630      	mov	r0, r6
 8011d3e:	47c0      	blx	r8
 8011d40:	3001      	adds	r0, #1
 8011d42:	d0e6      	beq.n	8011d12 <_printf_common+0xb2>
 8011d44:	f109 0901 	add.w	r9, r9, #1
 8011d48:	e7d8      	b.n	8011cfc <_printf_common+0x9c>
	...

08011d4c <_printf_i>:
 8011d4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011d50:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8011d54:	460c      	mov	r4, r1
 8011d56:	7e09      	ldrb	r1, [r1, #24]
 8011d58:	b085      	sub	sp, #20
 8011d5a:	296e      	cmp	r1, #110	; 0x6e
 8011d5c:	4617      	mov	r7, r2
 8011d5e:	4606      	mov	r6, r0
 8011d60:	4698      	mov	r8, r3
 8011d62:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011d64:	f000 80b3 	beq.w	8011ece <_printf_i+0x182>
 8011d68:	d822      	bhi.n	8011db0 <_printf_i+0x64>
 8011d6a:	2963      	cmp	r1, #99	; 0x63
 8011d6c:	d036      	beq.n	8011ddc <_printf_i+0x90>
 8011d6e:	d80a      	bhi.n	8011d86 <_printf_i+0x3a>
 8011d70:	2900      	cmp	r1, #0
 8011d72:	f000 80b9 	beq.w	8011ee8 <_printf_i+0x19c>
 8011d76:	2958      	cmp	r1, #88	; 0x58
 8011d78:	f000 8083 	beq.w	8011e82 <_printf_i+0x136>
 8011d7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011d80:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8011d84:	e032      	b.n	8011dec <_printf_i+0xa0>
 8011d86:	2964      	cmp	r1, #100	; 0x64
 8011d88:	d001      	beq.n	8011d8e <_printf_i+0x42>
 8011d8a:	2969      	cmp	r1, #105	; 0x69
 8011d8c:	d1f6      	bne.n	8011d7c <_printf_i+0x30>
 8011d8e:	6820      	ldr	r0, [r4, #0]
 8011d90:	6813      	ldr	r3, [r2, #0]
 8011d92:	0605      	lsls	r5, r0, #24
 8011d94:	f103 0104 	add.w	r1, r3, #4
 8011d98:	d52a      	bpl.n	8011df0 <_printf_i+0xa4>
 8011d9a:	681b      	ldr	r3, [r3, #0]
 8011d9c:	6011      	str	r1, [r2, #0]
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	da03      	bge.n	8011daa <_printf_i+0x5e>
 8011da2:	222d      	movs	r2, #45	; 0x2d
 8011da4:	425b      	negs	r3, r3
 8011da6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8011daa:	486f      	ldr	r0, [pc, #444]	; (8011f68 <_printf_i+0x21c>)
 8011dac:	220a      	movs	r2, #10
 8011dae:	e039      	b.n	8011e24 <_printf_i+0xd8>
 8011db0:	2973      	cmp	r1, #115	; 0x73
 8011db2:	f000 809d 	beq.w	8011ef0 <_printf_i+0x1a4>
 8011db6:	d808      	bhi.n	8011dca <_printf_i+0x7e>
 8011db8:	296f      	cmp	r1, #111	; 0x6f
 8011dba:	d020      	beq.n	8011dfe <_printf_i+0xb2>
 8011dbc:	2970      	cmp	r1, #112	; 0x70
 8011dbe:	d1dd      	bne.n	8011d7c <_printf_i+0x30>
 8011dc0:	6823      	ldr	r3, [r4, #0]
 8011dc2:	f043 0320 	orr.w	r3, r3, #32
 8011dc6:	6023      	str	r3, [r4, #0]
 8011dc8:	e003      	b.n	8011dd2 <_printf_i+0x86>
 8011dca:	2975      	cmp	r1, #117	; 0x75
 8011dcc:	d017      	beq.n	8011dfe <_printf_i+0xb2>
 8011dce:	2978      	cmp	r1, #120	; 0x78
 8011dd0:	d1d4      	bne.n	8011d7c <_printf_i+0x30>
 8011dd2:	2378      	movs	r3, #120	; 0x78
 8011dd4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011dd8:	4864      	ldr	r0, [pc, #400]	; (8011f6c <_printf_i+0x220>)
 8011dda:	e055      	b.n	8011e88 <_printf_i+0x13c>
 8011ddc:	6813      	ldr	r3, [r2, #0]
 8011dde:	1d19      	adds	r1, r3, #4
 8011de0:	681b      	ldr	r3, [r3, #0]
 8011de2:	6011      	str	r1, [r2, #0]
 8011de4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011de8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011dec:	2301      	movs	r3, #1
 8011dee:	e08c      	b.n	8011f0a <_printf_i+0x1be>
 8011df0:	681b      	ldr	r3, [r3, #0]
 8011df2:	6011      	str	r1, [r2, #0]
 8011df4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011df8:	bf18      	it	ne
 8011dfa:	b21b      	sxthne	r3, r3
 8011dfc:	e7cf      	b.n	8011d9e <_printf_i+0x52>
 8011dfe:	6813      	ldr	r3, [r2, #0]
 8011e00:	6825      	ldr	r5, [r4, #0]
 8011e02:	1d18      	adds	r0, r3, #4
 8011e04:	6010      	str	r0, [r2, #0]
 8011e06:	0628      	lsls	r0, r5, #24
 8011e08:	d501      	bpl.n	8011e0e <_printf_i+0xc2>
 8011e0a:	681b      	ldr	r3, [r3, #0]
 8011e0c:	e002      	b.n	8011e14 <_printf_i+0xc8>
 8011e0e:	0668      	lsls	r0, r5, #25
 8011e10:	d5fb      	bpl.n	8011e0a <_printf_i+0xbe>
 8011e12:	881b      	ldrh	r3, [r3, #0]
 8011e14:	4854      	ldr	r0, [pc, #336]	; (8011f68 <_printf_i+0x21c>)
 8011e16:	296f      	cmp	r1, #111	; 0x6f
 8011e18:	bf14      	ite	ne
 8011e1a:	220a      	movne	r2, #10
 8011e1c:	2208      	moveq	r2, #8
 8011e1e:	2100      	movs	r1, #0
 8011e20:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011e24:	6865      	ldr	r5, [r4, #4]
 8011e26:	60a5      	str	r5, [r4, #8]
 8011e28:	2d00      	cmp	r5, #0
 8011e2a:	f2c0 8095 	blt.w	8011f58 <_printf_i+0x20c>
 8011e2e:	6821      	ldr	r1, [r4, #0]
 8011e30:	f021 0104 	bic.w	r1, r1, #4
 8011e34:	6021      	str	r1, [r4, #0]
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	d13d      	bne.n	8011eb6 <_printf_i+0x16a>
 8011e3a:	2d00      	cmp	r5, #0
 8011e3c:	f040 808e 	bne.w	8011f5c <_printf_i+0x210>
 8011e40:	4665      	mov	r5, ip
 8011e42:	2a08      	cmp	r2, #8
 8011e44:	d10b      	bne.n	8011e5e <_printf_i+0x112>
 8011e46:	6823      	ldr	r3, [r4, #0]
 8011e48:	07db      	lsls	r3, r3, #31
 8011e4a:	d508      	bpl.n	8011e5e <_printf_i+0x112>
 8011e4c:	6923      	ldr	r3, [r4, #16]
 8011e4e:	6862      	ldr	r2, [r4, #4]
 8011e50:	429a      	cmp	r2, r3
 8011e52:	bfde      	ittt	le
 8011e54:	2330      	movle	r3, #48	; 0x30
 8011e56:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011e5a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8011e5e:	ebac 0305 	sub.w	r3, ip, r5
 8011e62:	6123      	str	r3, [r4, #16]
 8011e64:	f8cd 8000 	str.w	r8, [sp]
 8011e68:	463b      	mov	r3, r7
 8011e6a:	aa03      	add	r2, sp, #12
 8011e6c:	4621      	mov	r1, r4
 8011e6e:	4630      	mov	r0, r6
 8011e70:	f7ff fef6 	bl	8011c60 <_printf_common>
 8011e74:	3001      	adds	r0, #1
 8011e76:	d14d      	bne.n	8011f14 <_printf_i+0x1c8>
 8011e78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011e7c:	b005      	add	sp, #20
 8011e7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011e82:	4839      	ldr	r0, [pc, #228]	; (8011f68 <_printf_i+0x21c>)
 8011e84:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8011e88:	6813      	ldr	r3, [r2, #0]
 8011e8a:	6821      	ldr	r1, [r4, #0]
 8011e8c:	1d1d      	adds	r5, r3, #4
 8011e8e:	681b      	ldr	r3, [r3, #0]
 8011e90:	6015      	str	r5, [r2, #0]
 8011e92:	060a      	lsls	r2, r1, #24
 8011e94:	d50b      	bpl.n	8011eae <_printf_i+0x162>
 8011e96:	07ca      	lsls	r2, r1, #31
 8011e98:	bf44      	itt	mi
 8011e9a:	f041 0120 	orrmi.w	r1, r1, #32
 8011e9e:	6021      	strmi	r1, [r4, #0]
 8011ea0:	b91b      	cbnz	r3, 8011eaa <_printf_i+0x15e>
 8011ea2:	6822      	ldr	r2, [r4, #0]
 8011ea4:	f022 0220 	bic.w	r2, r2, #32
 8011ea8:	6022      	str	r2, [r4, #0]
 8011eaa:	2210      	movs	r2, #16
 8011eac:	e7b7      	b.n	8011e1e <_printf_i+0xd2>
 8011eae:	064d      	lsls	r5, r1, #25
 8011eb0:	bf48      	it	mi
 8011eb2:	b29b      	uxthmi	r3, r3
 8011eb4:	e7ef      	b.n	8011e96 <_printf_i+0x14a>
 8011eb6:	4665      	mov	r5, ip
 8011eb8:	fbb3 f1f2 	udiv	r1, r3, r2
 8011ebc:	fb02 3311 	mls	r3, r2, r1, r3
 8011ec0:	5cc3      	ldrb	r3, [r0, r3]
 8011ec2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8011ec6:	460b      	mov	r3, r1
 8011ec8:	2900      	cmp	r1, #0
 8011eca:	d1f5      	bne.n	8011eb8 <_printf_i+0x16c>
 8011ecc:	e7b9      	b.n	8011e42 <_printf_i+0xf6>
 8011ece:	6813      	ldr	r3, [r2, #0]
 8011ed0:	6825      	ldr	r5, [r4, #0]
 8011ed2:	6961      	ldr	r1, [r4, #20]
 8011ed4:	1d18      	adds	r0, r3, #4
 8011ed6:	6010      	str	r0, [r2, #0]
 8011ed8:	0628      	lsls	r0, r5, #24
 8011eda:	681b      	ldr	r3, [r3, #0]
 8011edc:	d501      	bpl.n	8011ee2 <_printf_i+0x196>
 8011ede:	6019      	str	r1, [r3, #0]
 8011ee0:	e002      	b.n	8011ee8 <_printf_i+0x19c>
 8011ee2:	066a      	lsls	r2, r5, #25
 8011ee4:	d5fb      	bpl.n	8011ede <_printf_i+0x192>
 8011ee6:	8019      	strh	r1, [r3, #0]
 8011ee8:	2300      	movs	r3, #0
 8011eea:	6123      	str	r3, [r4, #16]
 8011eec:	4665      	mov	r5, ip
 8011eee:	e7b9      	b.n	8011e64 <_printf_i+0x118>
 8011ef0:	6813      	ldr	r3, [r2, #0]
 8011ef2:	1d19      	adds	r1, r3, #4
 8011ef4:	6011      	str	r1, [r2, #0]
 8011ef6:	681d      	ldr	r5, [r3, #0]
 8011ef8:	6862      	ldr	r2, [r4, #4]
 8011efa:	2100      	movs	r1, #0
 8011efc:	4628      	mov	r0, r5
 8011efe:	f7ee f997 	bl	8000230 <memchr>
 8011f02:	b108      	cbz	r0, 8011f08 <_printf_i+0x1bc>
 8011f04:	1b40      	subs	r0, r0, r5
 8011f06:	6060      	str	r0, [r4, #4]
 8011f08:	6863      	ldr	r3, [r4, #4]
 8011f0a:	6123      	str	r3, [r4, #16]
 8011f0c:	2300      	movs	r3, #0
 8011f0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011f12:	e7a7      	b.n	8011e64 <_printf_i+0x118>
 8011f14:	6923      	ldr	r3, [r4, #16]
 8011f16:	462a      	mov	r2, r5
 8011f18:	4639      	mov	r1, r7
 8011f1a:	4630      	mov	r0, r6
 8011f1c:	47c0      	blx	r8
 8011f1e:	3001      	adds	r0, #1
 8011f20:	d0aa      	beq.n	8011e78 <_printf_i+0x12c>
 8011f22:	6823      	ldr	r3, [r4, #0]
 8011f24:	079b      	lsls	r3, r3, #30
 8011f26:	d413      	bmi.n	8011f50 <_printf_i+0x204>
 8011f28:	68e0      	ldr	r0, [r4, #12]
 8011f2a:	9b03      	ldr	r3, [sp, #12]
 8011f2c:	4298      	cmp	r0, r3
 8011f2e:	bfb8      	it	lt
 8011f30:	4618      	movlt	r0, r3
 8011f32:	e7a3      	b.n	8011e7c <_printf_i+0x130>
 8011f34:	2301      	movs	r3, #1
 8011f36:	464a      	mov	r2, r9
 8011f38:	4639      	mov	r1, r7
 8011f3a:	4630      	mov	r0, r6
 8011f3c:	47c0      	blx	r8
 8011f3e:	3001      	adds	r0, #1
 8011f40:	d09a      	beq.n	8011e78 <_printf_i+0x12c>
 8011f42:	3501      	adds	r5, #1
 8011f44:	68e3      	ldr	r3, [r4, #12]
 8011f46:	9a03      	ldr	r2, [sp, #12]
 8011f48:	1a9b      	subs	r3, r3, r2
 8011f4a:	42ab      	cmp	r3, r5
 8011f4c:	dcf2      	bgt.n	8011f34 <_printf_i+0x1e8>
 8011f4e:	e7eb      	b.n	8011f28 <_printf_i+0x1dc>
 8011f50:	2500      	movs	r5, #0
 8011f52:	f104 0919 	add.w	r9, r4, #25
 8011f56:	e7f5      	b.n	8011f44 <_printf_i+0x1f8>
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	d1ac      	bne.n	8011eb6 <_printf_i+0x16a>
 8011f5c:	7803      	ldrb	r3, [r0, #0]
 8011f5e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011f62:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011f66:	e76c      	b.n	8011e42 <_printf_i+0xf6>
 8011f68:	080168f0 	.word	0x080168f0
 8011f6c:	08016901 	.word	0x08016901

08011f70 <iprintf>:
 8011f70:	b40f      	push	{r0, r1, r2, r3}
 8011f72:	4b0a      	ldr	r3, [pc, #40]	; (8011f9c <iprintf+0x2c>)
 8011f74:	b513      	push	{r0, r1, r4, lr}
 8011f76:	681c      	ldr	r4, [r3, #0]
 8011f78:	b124      	cbz	r4, 8011f84 <iprintf+0x14>
 8011f7a:	69a3      	ldr	r3, [r4, #24]
 8011f7c:	b913      	cbnz	r3, 8011f84 <iprintf+0x14>
 8011f7e:	4620      	mov	r0, r4
 8011f80:	f001 f8aa 	bl	80130d8 <__sinit>
 8011f84:	ab05      	add	r3, sp, #20
 8011f86:	9a04      	ldr	r2, [sp, #16]
 8011f88:	68a1      	ldr	r1, [r4, #8]
 8011f8a:	9301      	str	r3, [sp, #4]
 8011f8c:	4620      	mov	r0, r4
 8011f8e:	f001 febf 	bl	8013d10 <_vfiprintf_r>
 8011f92:	b002      	add	sp, #8
 8011f94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011f98:	b004      	add	sp, #16
 8011f9a:	4770      	bx	lr
 8011f9c:	20001eb4 	.word	0x20001eb4

08011fa0 <_puts_r>:
 8011fa0:	b570      	push	{r4, r5, r6, lr}
 8011fa2:	460e      	mov	r6, r1
 8011fa4:	4605      	mov	r5, r0
 8011fa6:	b118      	cbz	r0, 8011fb0 <_puts_r+0x10>
 8011fa8:	6983      	ldr	r3, [r0, #24]
 8011faa:	b90b      	cbnz	r3, 8011fb0 <_puts_r+0x10>
 8011fac:	f001 f894 	bl	80130d8 <__sinit>
 8011fb0:	69ab      	ldr	r3, [r5, #24]
 8011fb2:	68ac      	ldr	r4, [r5, #8]
 8011fb4:	b913      	cbnz	r3, 8011fbc <_puts_r+0x1c>
 8011fb6:	4628      	mov	r0, r5
 8011fb8:	f001 f88e 	bl	80130d8 <__sinit>
 8011fbc:	4b23      	ldr	r3, [pc, #140]	; (801204c <_puts_r+0xac>)
 8011fbe:	429c      	cmp	r4, r3
 8011fc0:	d117      	bne.n	8011ff2 <_puts_r+0x52>
 8011fc2:	686c      	ldr	r4, [r5, #4]
 8011fc4:	89a3      	ldrh	r3, [r4, #12]
 8011fc6:	071b      	lsls	r3, r3, #28
 8011fc8:	d51d      	bpl.n	8012006 <_puts_r+0x66>
 8011fca:	6923      	ldr	r3, [r4, #16]
 8011fcc:	b1db      	cbz	r3, 8012006 <_puts_r+0x66>
 8011fce:	3e01      	subs	r6, #1
 8011fd0:	68a3      	ldr	r3, [r4, #8]
 8011fd2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011fd6:	3b01      	subs	r3, #1
 8011fd8:	60a3      	str	r3, [r4, #8]
 8011fda:	b9e9      	cbnz	r1, 8012018 <_puts_r+0x78>
 8011fdc:	2b00      	cmp	r3, #0
 8011fde:	da2e      	bge.n	801203e <_puts_r+0x9e>
 8011fe0:	4622      	mov	r2, r4
 8011fe2:	210a      	movs	r1, #10
 8011fe4:	4628      	mov	r0, r5
 8011fe6:	f000 f883 	bl	80120f0 <__swbuf_r>
 8011fea:	3001      	adds	r0, #1
 8011fec:	d011      	beq.n	8012012 <_puts_r+0x72>
 8011fee:	200a      	movs	r0, #10
 8011ff0:	e011      	b.n	8012016 <_puts_r+0x76>
 8011ff2:	4b17      	ldr	r3, [pc, #92]	; (8012050 <_puts_r+0xb0>)
 8011ff4:	429c      	cmp	r4, r3
 8011ff6:	d101      	bne.n	8011ffc <_puts_r+0x5c>
 8011ff8:	68ac      	ldr	r4, [r5, #8]
 8011ffa:	e7e3      	b.n	8011fc4 <_puts_r+0x24>
 8011ffc:	4b15      	ldr	r3, [pc, #84]	; (8012054 <_puts_r+0xb4>)
 8011ffe:	429c      	cmp	r4, r3
 8012000:	bf08      	it	eq
 8012002:	68ec      	ldreq	r4, [r5, #12]
 8012004:	e7de      	b.n	8011fc4 <_puts_r+0x24>
 8012006:	4621      	mov	r1, r4
 8012008:	4628      	mov	r0, r5
 801200a:	f000 f8c3 	bl	8012194 <__swsetup_r>
 801200e:	2800      	cmp	r0, #0
 8012010:	d0dd      	beq.n	8011fce <_puts_r+0x2e>
 8012012:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012016:	bd70      	pop	{r4, r5, r6, pc}
 8012018:	2b00      	cmp	r3, #0
 801201a:	da04      	bge.n	8012026 <_puts_r+0x86>
 801201c:	69a2      	ldr	r2, [r4, #24]
 801201e:	429a      	cmp	r2, r3
 8012020:	dc06      	bgt.n	8012030 <_puts_r+0x90>
 8012022:	290a      	cmp	r1, #10
 8012024:	d004      	beq.n	8012030 <_puts_r+0x90>
 8012026:	6823      	ldr	r3, [r4, #0]
 8012028:	1c5a      	adds	r2, r3, #1
 801202a:	6022      	str	r2, [r4, #0]
 801202c:	7019      	strb	r1, [r3, #0]
 801202e:	e7cf      	b.n	8011fd0 <_puts_r+0x30>
 8012030:	4622      	mov	r2, r4
 8012032:	4628      	mov	r0, r5
 8012034:	f000 f85c 	bl	80120f0 <__swbuf_r>
 8012038:	3001      	adds	r0, #1
 801203a:	d1c9      	bne.n	8011fd0 <_puts_r+0x30>
 801203c:	e7e9      	b.n	8012012 <_puts_r+0x72>
 801203e:	6823      	ldr	r3, [r4, #0]
 8012040:	200a      	movs	r0, #10
 8012042:	1c5a      	adds	r2, r3, #1
 8012044:	6022      	str	r2, [r4, #0]
 8012046:	7018      	strb	r0, [r3, #0]
 8012048:	e7e5      	b.n	8012016 <_puts_r+0x76>
 801204a:	bf00      	nop
 801204c:	08016940 	.word	0x08016940
 8012050:	08016960 	.word	0x08016960
 8012054:	08016920 	.word	0x08016920

08012058 <puts>:
 8012058:	4b02      	ldr	r3, [pc, #8]	; (8012064 <puts+0xc>)
 801205a:	4601      	mov	r1, r0
 801205c:	6818      	ldr	r0, [r3, #0]
 801205e:	f7ff bf9f 	b.w	8011fa0 <_puts_r>
 8012062:	bf00      	nop
 8012064:	20001eb4 	.word	0x20001eb4

08012068 <sniprintf>:
 8012068:	b40c      	push	{r2, r3}
 801206a:	b530      	push	{r4, r5, lr}
 801206c:	4b17      	ldr	r3, [pc, #92]	; (80120cc <sniprintf+0x64>)
 801206e:	1e0c      	subs	r4, r1, #0
 8012070:	b09d      	sub	sp, #116	; 0x74
 8012072:	681d      	ldr	r5, [r3, #0]
 8012074:	da08      	bge.n	8012088 <sniprintf+0x20>
 8012076:	238b      	movs	r3, #139	; 0x8b
 8012078:	602b      	str	r3, [r5, #0]
 801207a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801207e:	b01d      	add	sp, #116	; 0x74
 8012080:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012084:	b002      	add	sp, #8
 8012086:	4770      	bx	lr
 8012088:	f44f 7302 	mov.w	r3, #520	; 0x208
 801208c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8012090:	bf14      	ite	ne
 8012092:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8012096:	4623      	moveq	r3, r4
 8012098:	9304      	str	r3, [sp, #16]
 801209a:	9307      	str	r3, [sp, #28]
 801209c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80120a0:	9002      	str	r0, [sp, #8]
 80120a2:	9006      	str	r0, [sp, #24]
 80120a4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80120a8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80120aa:	ab21      	add	r3, sp, #132	; 0x84
 80120ac:	a902      	add	r1, sp, #8
 80120ae:	4628      	mov	r0, r5
 80120b0:	9301      	str	r3, [sp, #4]
 80120b2:	f001 fd0b 	bl	8013acc <_svfiprintf_r>
 80120b6:	1c43      	adds	r3, r0, #1
 80120b8:	bfbc      	itt	lt
 80120ba:	238b      	movlt	r3, #139	; 0x8b
 80120bc:	602b      	strlt	r3, [r5, #0]
 80120be:	2c00      	cmp	r4, #0
 80120c0:	d0dd      	beq.n	801207e <sniprintf+0x16>
 80120c2:	9b02      	ldr	r3, [sp, #8]
 80120c4:	2200      	movs	r2, #0
 80120c6:	701a      	strb	r2, [r3, #0]
 80120c8:	e7d9      	b.n	801207e <sniprintf+0x16>
 80120ca:	bf00      	nop
 80120cc:	20001eb4 	.word	0x20001eb4

080120d0 <strcat>:
 80120d0:	b510      	push	{r4, lr}
 80120d2:	4603      	mov	r3, r0
 80120d4:	781a      	ldrb	r2, [r3, #0]
 80120d6:	1c5c      	adds	r4, r3, #1
 80120d8:	b93a      	cbnz	r2, 80120ea <strcat+0x1a>
 80120da:	3b01      	subs	r3, #1
 80120dc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80120e0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80120e4:	2a00      	cmp	r2, #0
 80120e6:	d1f9      	bne.n	80120dc <strcat+0xc>
 80120e8:	bd10      	pop	{r4, pc}
 80120ea:	4623      	mov	r3, r4
 80120ec:	e7f2      	b.n	80120d4 <strcat+0x4>
	...

080120f0 <__swbuf_r>:
 80120f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80120f2:	460e      	mov	r6, r1
 80120f4:	4614      	mov	r4, r2
 80120f6:	4605      	mov	r5, r0
 80120f8:	b118      	cbz	r0, 8012102 <__swbuf_r+0x12>
 80120fa:	6983      	ldr	r3, [r0, #24]
 80120fc:	b90b      	cbnz	r3, 8012102 <__swbuf_r+0x12>
 80120fe:	f000 ffeb 	bl	80130d8 <__sinit>
 8012102:	4b21      	ldr	r3, [pc, #132]	; (8012188 <__swbuf_r+0x98>)
 8012104:	429c      	cmp	r4, r3
 8012106:	d12a      	bne.n	801215e <__swbuf_r+0x6e>
 8012108:	686c      	ldr	r4, [r5, #4]
 801210a:	69a3      	ldr	r3, [r4, #24]
 801210c:	60a3      	str	r3, [r4, #8]
 801210e:	89a3      	ldrh	r3, [r4, #12]
 8012110:	071a      	lsls	r2, r3, #28
 8012112:	d52e      	bpl.n	8012172 <__swbuf_r+0x82>
 8012114:	6923      	ldr	r3, [r4, #16]
 8012116:	b363      	cbz	r3, 8012172 <__swbuf_r+0x82>
 8012118:	6923      	ldr	r3, [r4, #16]
 801211a:	6820      	ldr	r0, [r4, #0]
 801211c:	1ac0      	subs	r0, r0, r3
 801211e:	6963      	ldr	r3, [r4, #20]
 8012120:	b2f6      	uxtb	r6, r6
 8012122:	4283      	cmp	r3, r0
 8012124:	4637      	mov	r7, r6
 8012126:	dc04      	bgt.n	8012132 <__swbuf_r+0x42>
 8012128:	4621      	mov	r1, r4
 801212a:	4628      	mov	r0, r5
 801212c:	f000 ff6a 	bl	8013004 <_fflush_r>
 8012130:	bb28      	cbnz	r0, 801217e <__swbuf_r+0x8e>
 8012132:	68a3      	ldr	r3, [r4, #8]
 8012134:	3b01      	subs	r3, #1
 8012136:	60a3      	str	r3, [r4, #8]
 8012138:	6823      	ldr	r3, [r4, #0]
 801213a:	1c5a      	adds	r2, r3, #1
 801213c:	6022      	str	r2, [r4, #0]
 801213e:	701e      	strb	r6, [r3, #0]
 8012140:	6963      	ldr	r3, [r4, #20]
 8012142:	3001      	adds	r0, #1
 8012144:	4283      	cmp	r3, r0
 8012146:	d004      	beq.n	8012152 <__swbuf_r+0x62>
 8012148:	89a3      	ldrh	r3, [r4, #12]
 801214a:	07db      	lsls	r3, r3, #31
 801214c:	d519      	bpl.n	8012182 <__swbuf_r+0x92>
 801214e:	2e0a      	cmp	r6, #10
 8012150:	d117      	bne.n	8012182 <__swbuf_r+0x92>
 8012152:	4621      	mov	r1, r4
 8012154:	4628      	mov	r0, r5
 8012156:	f000 ff55 	bl	8013004 <_fflush_r>
 801215a:	b190      	cbz	r0, 8012182 <__swbuf_r+0x92>
 801215c:	e00f      	b.n	801217e <__swbuf_r+0x8e>
 801215e:	4b0b      	ldr	r3, [pc, #44]	; (801218c <__swbuf_r+0x9c>)
 8012160:	429c      	cmp	r4, r3
 8012162:	d101      	bne.n	8012168 <__swbuf_r+0x78>
 8012164:	68ac      	ldr	r4, [r5, #8]
 8012166:	e7d0      	b.n	801210a <__swbuf_r+0x1a>
 8012168:	4b09      	ldr	r3, [pc, #36]	; (8012190 <__swbuf_r+0xa0>)
 801216a:	429c      	cmp	r4, r3
 801216c:	bf08      	it	eq
 801216e:	68ec      	ldreq	r4, [r5, #12]
 8012170:	e7cb      	b.n	801210a <__swbuf_r+0x1a>
 8012172:	4621      	mov	r1, r4
 8012174:	4628      	mov	r0, r5
 8012176:	f000 f80d 	bl	8012194 <__swsetup_r>
 801217a:	2800      	cmp	r0, #0
 801217c:	d0cc      	beq.n	8012118 <__swbuf_r+0x28>
 801217e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8012182:	4638      	mov	r0, r7
 8012184:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012186:	bf00      	nop
 8012188:	08016940 	.word	0x08016940
 801218c:	08016960 	.word	0x08016960
 8012190:	08016920 	.word	0x08016920

08012194 <__swsetup_r>:
 8012194:	4b32      	ldr	r3, [pc, #200]	; (8012260 <__swsetup_r+0xcc>)
 8012196:	b570      	push	{r4, r5, r6, lr}
 8012198:	681d      	ldr	r5, [r3, #0]
 801219a:	4606      	mov	r6, r0
 801219c:	460c      	mov	r4, r1
 801219e:	b125      	cbz	r5, 80121aa <__swsetup_r+0x16>
 80121a0:	69ab      	ldr	r3, [r5, #24]
 80121a2:	b913      	cbnz	r3, 80121aa <__swsetup_r+0x16>
 80121a4:	4628      	mov	r0, r5
 80121a6:	f000 ff97 	bl	80130d8 <__sinit>
 80121aa:	4b2e      	ldr	r3, [pc, #184]	; (8012264 <__swsetup_r+0xd0>)
 80121ac:	429c      	cmp	r4, r3
 80121ae:	d10f      	bne.n	80121d0 <__swsetup_r+0x3c>
 80121b0:	686c      	ldr	r4, [r5, #4]
 80121b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80121b6:	b29a      	uxth	r2, r3
 80121b8:	0715      	lsls	r5, r2, #28
 80121ba:	d42c      	bmi.n	8012216 <__swsetup_r+0x82>
 80121bc:	06d0      	lsls	r0, r2, #27
 80121be:	d411      	bmi.n	80121e4 <__swsetup_r+0x50>
 80121c0:	2209      	movs	r2, #9
 80121c2:	6032      	str	r2, [r6, #0]
 80121c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80121c8:	81a3      	strh	r3, [r4, #12]
 80121ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80121ce:	e03e      	b.n	801224e <__swsetup_r+0xba>
 80121d0:	4b25      	ldr	r3, [pc, #148]	; (8012268 <__swsetup_r+0xd4>)
 80121d2:	429c      	cmp	r4, r3
 80121d4:	d101      	bne.n	80121da <__swsetup_r+0x46>
 80121d6:	68ac      	ldr	r4, [r5, #8]
 80121d8:	e7eb      	b.n	80121b2 <__swsetup_r+0x1e>
 80121da:	4b24      	ldr	r3, [pc, #144]	; (801226c <__swsetup_r+0xd8>)
 80121dc:	429c      	cmp	r4, r3
 80121de:	bf08      	it	eq
 80121e0:	68ec      	ldreq	r4, [r5, #12]
 80121e2:	e7e6      	b.n	80121b2 <__swsetup_r+0x1e>
 80121e4:	0751      	lsls	r1, r2, #29
 80121e6:	d512      	bpl.n	801220e <__swsetup_r+0x7a>
 80121e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80121ea:	b141      	cbz	r1, 80121fe <__swsetup_r+0x6a>
 80121ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80121f0:	4299      	cmp	r1, r3
 80121f2:	d002      	beq.n	80121fa <__swsetup_r+0x66>
 80121f4:	4630      	mov	r0, r6
 80121f6:	f001 fb67 	bl	80138c8 <_free_r>
 80121fa:	2300      	movs	r3, #0
 80121fc:	6363      	str	r3, [r4, #52]	; 0x34
 80121fe:	89a3      	ldrh	r3, [r4, #12]
 8012200:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012204:	81a3      	strh	r3, [r4, #12]
 8012206:	2300      	movs	r3, #0
 8012208:	6063      	str	r3, [r4, #4]
 801220a:	6923      	ldr	r3, [r4, #16]
 801220c:	6023      	str	r3, [r4, #0]
 801220e:	89a3      	ldrh	r3, [r4, #12]
 8012210:	f043 0308 	orr.w	r3, r3, #8
 8012214:	81a3      	strh	r3, [r4, #12]
 8012216:	6923      	ldr	r3, [r4, #16]
 8012218:	b94b      	cbnz	r3, 801222e <__swsetup_r+0x9a>
 801221a:	89a3      	ldrh	r3, [r4, #12]
 801221c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012220:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012224:	d003      	beq.n	801222e <__swsetup_r+0x9a>
 8012226:	4621      	mov	r1, r4
 8012228:	4630      	mov	r0, r6
 801222a:	f001 f811 	bl	8013250 <__smakebuf_r>
 801222e:	89a2      	ldrh	r2, [r4, #12]
 8012230:	f012 0301 	ands.w	r3, r2, #1
 8012234:	d00c      	beq.n	8012250 <__swsetup_r+0xbc>
 8012236:	2300      	movs	r3, #0
 8012238:	60a3      	str	r3, [r4, #8]
 801223a:	6963      	ldr	r3, [r4, #20]
 801223c:	425b      	negs	r3, r3
 801223e:	61a3      	str	r3, [r4, #24]
 8012240:	6923      	ldr	r3, [r4, #16]
 8012242:	b953      	cbnz	r3, 801225a <__swsetup_r+0xc6>
 8012244:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012248:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801224c:	d1ba      	bne.n	80121c4 <__swsetup_r+0x30>
 801224e:	bd70      	pop	{r4, r5, r6, pc}
 8012250:	0792      	lsls	r2, r2, #30
 8012252:	bf58      	it	pl
 8012254:	6963      	ldrpl	r3, [r4, #20]
 8012256:	60a3      	str	r3, [r4, #8]
 8012258:	e7f2      	b.n	8012240 <__swsetup_r+0xac>
 801225a:	2000      	movs	r0, #0
 801225c:	e7f7      	b.n	801224e <__swsetup_r+0xba>
 801225e:	bf00      	nop
 8012260:	20001eb4 	.word	0x20001eb4
 8012264:	08016940 	.word	0x08016940
 8012268:	08016960 	.word	0x08016960
 801226c:	08016920 	.word	0x08016920

08012270 <quorem>:
 8012270:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012274:	6903      	ldr	r3, [r0, #16]
 8012276:	690c      	ldr	r4, [r1, #16]
 8012278:	42a3      	cmp	r3, r4
 801227a:	4680      	mov	r8, r0
 801227c:	f2c0 8082 	blt.w	8012384 <quorem+0x114>
 8012280:	3c01      	subs	r4, #1
 8012282:	f101 0714 	add.w	r7, r1, #20
 8012286:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 801228a:	f100 0614 	add.w	r6, r0, #20
 801228e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8012292:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8012296:	eb06 030c 	add.w	r3, r6, ip
 801229a:	3501      	adds	r5, #1
 801229c:	eb07 090c 	add.w	r9, r7, ip
 80122a0:	9301      	str	r3, [sp, #4]
 80122a2:	fbb0 f5f5 	udiv	r5, r0, r5
 80122a6:	b395      	cbz	r5, 801230e <quorem+0x9e>
 80122a8:	f04f 0a00 	mov.w	sl, #0
 80122ac:	4638      	mov	r0, r7
 80122ae:	46b6      	mov	lr, r6
 80122b0:	46d3      	mov	fp, sl
 80122b2:	f850 2b04 	ldr.w	r2, [r0], #4
 80122b6:	b293      	uxth	r3, r2
 80122b8:	fb05 a303 	mla	r3, r5, r3, sl
 80122bc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80122c0:	b29b      	uxth	r3, r3
 80122c2:	ebab 0303 	sub.w	r3, fp, r3
 80122c6:	0c12      	lsrs	r2, r2, #16
 80122c8:	f8de b000 	ldr.w	fp, [lr]
 80122cc:	fb05 a202 	mla	r2, r5, r2, sl
 80122d0:	fa13 f38b 	uxtah	r3, r3, fp
 80122d4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80122d8:	fa1f fb82 	uxth.w	fp, r2
 80122dc:	f8de 2000 	ldr.w	r2, [lr]
 80122e0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80122e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80122e8:	b29b      	uxth	r3, r3
 80122ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80122ee:	4581      	cmp	r9, r0
 80122f0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80122f4:	f84e 3b04 	str.w	r3, [lr], #4
 80122f8:	d2db      	bcs.n	80122b2 <quorem+0x42>
 80122fa:	f856 300c 	ldr.w	r3, [r6, ip]
 80122fe:	b933      	cbnz	r3, 801230e <quorem+0x9e>
 8012300:	9b01      	ldr	r3, [sp, #4]
 8012302:	3b04      	subs	r3, #4
 8012304:	429e      	cmp	r6, r3
 8012306:	461a      	mov	r2, r3
 8012308:	d330      	bcc.n	801236c <quorem+0xfc>
 801230a:	f8c8 4010 	str.w	r4, [r8, #16]
 801230e:	4640      	mov	r0, r8
 8012310:	f001 fa06 	bl	8013720 <__mcmp>
 8012314:	2800      	cmp	r0, #0
 8012316:	db25      	blt.n	8012364 <quorem+0xf4>
 8012318:	3501      	adds	r5, #1
 801231a:	4630      	mov	r0, r6
 801231c:	f04f 0c00 	mov.w	ip, #0
 8012320:	f857 2b04 	ldr.w	r2, [r7], #4
 8012324:	f8d0 e000 	ldr.w	lr, [r0]
 8012328:	b293      	uxth	r3, r2
 801232a:	ebac 0303 	sub.w	r3, ip, r3
 801232e:	0c12      	lsrs	r2, r2, #16
 8012330:	fa13 f38e 	uxtah	r3, r3, lr
 8012334:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8012338:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801233c:	b29b      	uxth	r3, r3
 801233e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012342:	45b9      	cmp	r9, r7
 8012344:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8012348:	f840 3b04 	str.w	r3, [r0], #4
 801234c:	d2e8      	bcs.n	8012320 <quorem+0xb0>
 801234e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8012352:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8012356:	b92a      	cbnz	r2, 8012364 <quorem+0xf4>
 8012358:	3b04      	subs	r3, #4
 801235a:	429e      	cmp	r6, r3
 801235c:	461a      	mov	r2, r3
 801235e:	d30b      	bcc.n	8012378 <quorem+0x108>
 8012360:	f8c8 4010 	str.w	r4, [r8, #16]
 8012364:	4628      	mov	r0, r5
 8012366:	b003      	add	sp, #12
 8012368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801236c:	6812      	ldr	r2, [r2, #0]
 801236e:	3b04      	subs	r3, #4
 8012370:	2a00      	cmp	r2, #0
 8012372:	d1ca      	bne.n	801230a <quorem+0x9a>
 8012374:	3c01      	subs	r4, #1
 8012376:	e7c5      	b.n	8012304 <quorem+0x94>
 8012378:	6812      	ldr	r2, [r2, #0]
 801237a:	3b04      	subs	r3, #4
 801237c:	2a00      	cmp	r2, #0
 801237e:	d1ef      	bne.n	8012360 <quorem+0xf0>
 8012380:	3c01      	subs	r4, #1
 8012382:	e7ea      	b.n	801235a <quorem+0xea>
 8012384:	2000      	movs	r0, #0
 8012386:	e7ee      	b.n	8012366 <quorem+0xf6>

08012388 <_dtoa_r>:
 8012388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801238c:	ec57 6b10 	vmov	r6, r7, d0
 8012390:	b097      	sub	sp, #92	; 0x5c
 8012392:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8012394:	9106      	str	r1, [sp, #24]
 8012396:	4604      	mov	r4, r0
 8012398:	920b      	str	r2, [sp, #44]	; 0x2c
 801239a:	9312      	str	r3, [sp, #72]	; 0x48
 801239c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80123a0:	e9cd 6700 	strd	r6, r7, [sp]
 80123a4:	b93d      	cbnz	r5, 80123b6 <_dtoa_r+0x2e>
 80123a6:	2010      	movs	r0, #16
 80123a8:	f000 ff92 	bl	80132d0 <malloc>
 80123ac:	6260      	str	r0, [r4, #36]	; 0x24
 80123ae:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80123b2:	6005      	str	r5, [r0, #0]
 80123b4:	60c5      	str	r5, [r0, #12]
 80123b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80123b8:	6819      	ldr	r1, [r3, #0]
 80123ba:	b151      	cbz	r1, 80123d2 <_dtoa_r+0x4a>
 80123bc:	685a      	ldr	r2, [r3, #4]
 80123be:	604a      	str	r2, [r1, #4]
 80123c0:	2301      	movs	r3, #1
 80123c2:	4093      	lsls	r3, r2
 80123c4:	608b      	str	r3, [r1, #8]
 80123c6:	4620      	mov	r0, r4
 80123c8:	f000 ffc9 	bl	801335e <_Bfree>
 80123cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80123ce:	2200      	movs	r2, #0
 80123d0:	601a      	str	r2, [r3, #0]
 80123d2:	1e3b      	subs	r3, r7, #0
 80123d4:	bfbb      	ittet	lt
 80123d6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80123da:	9301      	strlt	r3, [sp, #4]
 80123dc:	2300      	movge	r3, #0
 80123de:	2201      	movlt	r2, #1
 80123e0:	bfac      	ite	ge
 80123e2:	f8c8 3000 	strge.w	r3, [r8]
 80123e6:	f8c8 2000 	strlt.w	r2, [r8]
 80123ea:	4baf      	ldr	r3, [pc, #700]	; (80126a8 <_dtoa_r+0x320>)
 80123ec:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80123f0:	ea33 0308 	bics.w	r3, r3, r8
 80123f4:	d114      	bne.n	8012420 <_dtoa_r+0x98>
 80123f6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80123f8:	f242 730f 	movw	r3, #9999	; 0x270f
 80123fc:	6013      	str	r3, [r2, #0]
 80123fe:	9b00      	ldr	r3, [sp, #0]
 8012400:	b923      	cbnz	r3, 801240c <_dtoa_r+0x84>
 8012402:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8012406:	2800      	cmp	r0, #0
 8012408:	f000 8542 	beq.w	8012e90 <_dtoa_r+0xb08>
 801240c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801240e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80126bc <_dtoa_r+0x334>
 8012412:	2b00      	cmp	r3, #0
 8012414:	f000 8544 	beq.w	8012ea0 <_dtoa_r+0xb18>
 8012418:	f10b 0303 	add.w	r3, fp, #3
 801241c:	f000 bd3e 	b.w	8012e9c <_dtoa_r+0xb14>
 8012420:	e9dd 6700 	ldrd	r6, r7, [sp]
 8012424:	2200      	movs	r2, #0
 8012426:	2300      	movs	r3, #0
 8012428:	4630      	mov	r0, r6
 801242a:	4639      	mov	r1, r7
 801242c:	f7ee fb74 	bl	8000b18 <__aeabi_dcmpeq>
 8012430:	4681      	mov	r9, r0
 8012432:	b168      	cbz	r0, 8012450 <_dtoa_r+0xc8>
 8012434:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012436:	2301      	movs	r3, #1
 8012438:	6013      	str	r3, [r2, #0]
 801243a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801243c:	2b00      	cmp	r3, #0
 801243e:	f000 8524 	beq.w	8012e8a <_dtoa_r+0xb02>
 8012442:	4b9a      	ldr	r3, [pc, #616]	; (80126ac <_dtoa_r+0x324>)
 8012444:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012446:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 801244a:	6013      	str	r3, [r2, #0]
 801244c:	f000 bd28 	b.w	8012ea0 <_dtoa_r+0xb18>
 8012450:	aa14      	add	r2, sp, #80	; 0x50
 8012452:	a915      	add	r1, sp, #84	; 0x54
 8012454:	ec47 6b10 	vmov	d0, r6, r7
 8012458:	4620      	mov	r0, r4
 801245a:	f001 f9d8 	bl	801380e <__d2b>
 801245e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8012462:	9004      	str	r0, [sp, #16]
 8012464:	2d00      	cmp	r5, #0
 8012466:	d07c      	beq.n	8012562 <_dtoa_r+0x1da>
 8012468:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801246c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8012470:	46b2      	mov	sl, r6
 8012472:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8012476:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801247a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 801247e:	2200      	movs	r2, #0
 8012480:	4b8b      	ldr	r3, [pc, #556]	; (80126b0 <_dtoa_r+0x328>)
 8012482:	4650      	mov	r0, sl
 8012484:	4659      	mov	r1, fp
 8012486:	f7ed ff27 	bl	80002d8 <__aeabi_dsub>
 801248a:	a381      	add	r3, pc, #516	; (adr r3, 8012690 <_dtoa_r+0x308>)
 801248c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012490:	f7ee f8da 	bl	8000648 <__aeabi_dmul>
 8012494:	a380      	add	r3, pc, #512	; (adr r3, 8012698 <_dtoa_r+0x310>)
 8012496:	e9d3 2300 	ldrd	r2, r3, [r3]
 801249a:	f7ed ff1f 	bl	80002dc <__adddf3>
 801249e:	4606      	mov	r6, r0
 80124a0:	4628      	mov	r0, r5
 80124a2:	460f      	mov	r7, r1
 80124a4:	f7ee f866 	bl	8000574 <__aeabi_i2d>
 80124a8:	a37d      	add	r3, pc, #500	; (adr r3, 80126a0 <_dtoa_r+0x318>)
 80124aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124ae:	f7ee f8cb 	bl	8000648 <__aeabi_dmul>
 80124b2:	4602      	mov	r2, r0
 80124b4:	460b      	mov	r3, r1
 80124b6:	4630      	mov	r0, r6
 80124b8:	4639      	mov	r1, r7
 80124ba:	f7ed ff0f 	bl	80002dc <__adddf3>
 80124be:	4606      	mov	r6, r0
 80124c0:	460f      	mov	r7, r1
 80124c2:	f7ee fb71 	bl	8000ba8 <__aeabi_d2iz>
 80124c6:	2200      	movs	r2, #0
 80124c8:	4682      	mov	sl, r0
 80124ca:	2300      	movs	r3, #0
 80124cc:	4630      	mov	r0, r6
 80124ce:	4639      	mov	r1, r7
 80124d0:	f7ee fb2c 	bl	8000b2c <__aeabi_dcmplt>
 80124d4:	b148      	cbz	r0, 80124ea <_dtoa_r+0x162>
 80124d6:	4650      	mov	r0, sl
 80124d8:	f7ee f84c 	bl	8000574 <__aeabi_i2d>
 80124dc:	4632      	mov	r2, r6
 80124de:	463b      	mov	r3, r7
 80124e0:	f7ee fb1a 	bl	8000b18 <__aeabi_dcmpeq>
 80124e4:	b908      	cbnz	r0, 80124ea <_dtoa_r+0x162>
 80124e6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80124ea:	f1ba 0f16 	cmp.w	sl, #22
 80124ee:	d859      	bhi.n	80125a4 <_dtoa_r+0x21c>
 80124f0:	4970      	ldr	r1, [pc, #448]	; (80126b4 <_dtoa_r+0x32c>)
 80124f2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80124f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80124fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80124fe:	f7ee fb33 	bl	8000b68 <__aeabi_dcmpgt>
 8012502:	2800      	cmp	r0, #0
 8012504:	d050      	beq.n	80125a8 <_dtoa_r+0x220>
 8012506:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801250a:	2300      	movs	r3, #0
 801250c:	930f      	str	r3, [sp, #60]	; 0x3c
 801250e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012510:	1b5d      	subs	r5, r3, r5
 8012512:	f1b5 0801 	subs.w	r8, r5, #1
 8012516:	bf49      	itett	mi
 8012518:	f1c5 0301 	rsbmi	r3, r5, #1
 801251c:	2300      	movpl	r3, #0
 801251e:	9305      	strmi	r3, [sp, #20]
 8012520:	f04f 0800 	movmi.w	r8, #0
 8012524:	bf58      	it	pl
 8012526:	9305      	strpl	r3, [sp, #20]
 8012528:	f1ba 0f00 	cmp.w	sl, #0
 801252c:	db3e      	blt.n	80125ac <_dtoa_r+0x224>
 801252e:	2300      	movs	r3, #0
 8012530:	44d0      	add	r8, sl
 8012532:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8012536:	9307      	str	r3, [sp, #28]
 8012538:	9b06      	ldr	r3, [sp, #24]
 801253a:	2b09      	cmp	r3, #9
 801253c:	f200 8090 	bhi.w	8012660 <_dtoa_r+0x2d8>
 8012540:	2b05      	cmp	r3, #5
 8012542:	bfc4      	itt	gt
 8012544:	3b04      	subgt	r3, #4
 8012546:	9306      	strgt	r3, [sp, #24]
 8012548:	9b06      	ldr	r3, [sp, #24]
 801254a:	f1a3 0302 	sub.w	r3, r3, #2
 801254e:	bfcc      	ite	gt
 8012550:	2500      	movgt	r5, #0
 8012552:	2501      	movle	r5, #1
 8012554:	2b03      	cmp	r3, #3
 8012556:	f200 808f 	bhi.w	8012678 <_dtoa_r+0x2f0>
 801255a:	e8df f003 	tbb	[pc, r3]
 801255e:	7f7d      	.short	0x7f7d
 8012560:	7131      	.short	0x7131
 8012562:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8012566:	441d      	add	r5, r3
 8012568:	f205 4032 	addw	r0, r5, #1074	; 0x432
 801256c:	2820      	cmp	r0, #32
 801256e:	dd13      	ble.n	8012598 <_dtoa_r+0x210>
 8012570:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8012574:	9b00      	ldr	r3, [sp, #0]
 8012576:	fa08 f800 	lsl.w	r8, r8, r0
 801257a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 801257e:	fa23 f000 	lsr.w	r0, r3, r0
 8012582:	ea48 0000 	orr.w	r0, r8, r0
 8012586:	f7ed ffe5 	bl	8000554 <__aeabi_ui2d>
 801258a:	2301      	movs	r3, #1
 801258c:	4682      	mov	sl, r0
 801258e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8012592:	3d01      	subs	r5, #1
 8012594:	9313      	str	r3, [sp, #76]	; 0x4c
 8012596:	e772      	b.n	801247e <_dtoa_r+0xf6>
 8012598:	9b00      	ldr	r3, [sp, #0]
 801259a:	f1c0 0020 	rsb	r0, r0, #32
 801259e:	fa03 f000 	lsl.w	r0, r3, r0
 80125a2:	e7f0      	b.n	8012586 <_dtoa_r+0x1fe>
 80125a4:	2301      	movs	r3, #1
 80125a6:	e7b1      	b.n	801250c <_dtoa_r+0x184>
 80125a8:	900f      	str	r0, [sp, #60]	; 0x3c
 80125aa:	e7b0      	b.n	801250e <_dtoa_r+0x186>
 80125ac:	9b05      	ldr	r3, [sp, #20]
 80125ae:	eba3 030a 	sub.w	r3, r3, sl
 80125b2:	9305      	str	r3, [sp, #20]
 80125b4:	f1ca 0300 	rsb	r3, sl, #0
 80125b8:	9307      	str	r3, [sp, #28]
 80125ba:	2300      	movs	r3, #0
 80125bc:	930e      	str	r3, [sp, #56]	; 0x38
 80125be:	e7bb      	b.n	8012538 <_dtoa_r+0x1b0>
 80125c0:	2301      	movs	r3, #1
 80125c2:	930a      	str	r3, [sp, #40]	; 0x28
 80125c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	dd59      	ble.n	801267e <_dtoa_r+0x2f6>
 80125ca:	9302      	str	r3, [sp, #8]
 80125cc:	4699      	mov	r9, r3
 80125ce:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80125d0:	2200      	movs	r2, #0
 80125d2:	6072      	str	r2, [r6, #4]
 80125d4:	2204      	movs	r2, #4
 80125d6:	f102 0014 	add.w	r0, r2, #20
 80125da:	4298      	cmp	r0, r3
 80125dc:	6871      	ldr	r1, [r6, #4]
 80125de:	d953      	bls.n	8012688 <_dtoa_r+0x300>
 80125e0:	4620      	mov	r0, r4
 80125e2:	f000 fe88 	bl	80132f6 <_Balloc>
 80125e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80125e8:	6030      	str	r0, [r6, #0]
 80125ea:	f1b9 0f0e 	cmp.w	r9, #14
 80125ee:	f8d3 b000 	ldr.w	fp, [r3]
 80125f2:	f200 80e6 	bhi.w	80127c2 <_dtoa_r+0x43a>
 80125f6:	2d00      	cmp	r5, #0
 80125f8:	f000 80e3 	beq.w	80127c2 <_dtoa_r+0x43a>
 80125fc:	ed9d 7b00 	vldr	d7, [sp]
 8012600:	f1ba 0f00 	cmp.w	sl, #0
 8012604:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8012608:	dd74      	ble.n	80126f4 <_dtoa_r+0x36c>
 801260a:	4a2a      	ldr	r2, [pc, #168]	; (80126b4 <_dtoa_r+0x32c>)
 801260c:	f00a 030f 	and.w	r3, sl, #15
 8012610:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012614:	ed93 7b00 	vldr	d7, [r3]
 8012618:	ea4f 162a 	mov.w	r6, sl, asr #4
 801261c:	06f0      	lsls	r0, r6, #27
 801261e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8012622:	d565      	bpl.n	80126f0 <_dtoa_r+0x368>
 8012624:	4b24      	ldr	r3, [pc, #144]	; (80126b8 <_dtoa_r+0x330>)
 8012626:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801262a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801262e:	f7ee f935 	bl	800089c <__aeabi_ddiv>
 8012632:	e9cd 0100 	strd	r0, r1, [sp]
 8012636:	f006 060f 	and.w	r6, r6, #15
 801263a:	2503      	movs	r5, #3
 801263c:	4f1e      	ldr	r7, [pc, #120]	; (80126b8 <_dtoa_r+0x330>)
 801263e:	e04c      	b.n	80126da <_dtoa_r+0x352>
 8012640:	2301      	movs	r3, #1
 8012642:	930a      	str	r3, [sp, #40]	; 0x28
 8012644:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012646:	4453      	add	r3, sl
 8012648:	f103 0901 	add.w	r9, r3, #1
 801264c:	9302      	str	r3, [sp, #8]
 801264e:	464b      	mov	r3, r9
 8012650:	2b01      	cmp	r3, #1
 8012652:	bfb8      	it	lt
 8012654:	2301      	movlt	r3, #1
 8012656:	e7ba      	b.n	80125ce <_dtoa_r+0x246>
 8012658:	2300      	movs	r3, #0
 801265a:	e7b2      	b.n	80125c2 <_dtoa_r+0x23a>
 801265c:	2300      	movs	r3, #0
 801265e:	e7f0      	b.n	8012642 <_dtoa_r+0x2ba>
 8012660:	2501      	movs	r5, #1
 8012662:	2300      	movs	r3, #0
 8012664:	9306      	str	r3, [sp, #24]
 8012666:	950a      	str	r5, [sp, #40]	; 0x28
 8012668:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801266c:	9302      	str	r3, [sp, #8]
 801266e:	4699      	mov	r9, r3
 8012670:	2200      	movs	r2, #0
 8012672:	2312      	movs	r3, #18
 8012674:	920b      	str	r2, [sp, #44]	; 0x2c
 8012676:	e7aa      	b.n	80125ce <_dtoa_r+0x246>
 8012678:	2301      	movs	r3, #1
 801267a:	930a      	str	r3, [sp, #40]	; 0x28
 801267c:	e7f4      	b.n	8012668 <_dtoa_r+0x2e0>
 801267e:	2301      	movs	r3, #1
 8012680:	9302      	str	r3, [sp, #8]
 8012682:	4699      	mov	r9, r3
 8012684:	461a      	mov	r2, r3
 8012686:	e7f5      	b.n	8012674 <_dtoa_r+0x2ec>
 8012688:	3101      	adds	r1, #1
 801268a:	6071      	str	r1, [r6, #4]
 801268c:	0052      	lsls	r2, r2, #1
 801268e:	e7a2      	b.n	80125d6 <_dtoa_r+0x24e>
 8012690:	636f4361 	.word	0x636f4361
 8012694:	3fd287a7 	.word	0x3fd287a7
 8012698:	8b60c8b3 	.word	0x8b60c8b3
 801269c:	3fc68a28 	.word	0x3fc68a28
 80126a0:	509f79fb 	.word	0x509f79fb
 80126a4:	3fd34413 	.word	0x3fd34413
 80126a8:	7ff00000 	.word	0x7ff00000
 80126ac:	08016b9d 	.word	0x08016b9d
 80126b0:	3ff80000 	.word	0x3ff80000
 80126b4:	080169a8 	.word	0x080169a8
 80126b8:	08016980 	.word	0x08016980
 80126bc:	0801691b 	.word	0x0801691b
 80126c0:	07f1      	lsls	r1, r6, #31
 80126c2:	d508      	bpl.n	80126d6 <_dtoa_r+0x34e>
 80126c4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80126c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80126cc:	f7ed ffbc 	bl	8000648 <__aeabi_dmul>
 80126d0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80126d4:	3501      	adds	r5, #1
 80126d6:	1076      	asrs	r6, r6, #1
 80126d8:	3708      	adds	r7, #8
 80126da:	2e00      	cmp	r6, #0
 80126dc:	d1f0      	bne.n	80126c0 <_dtoa_r+0x338>
 80126de:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80126e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80126e6:	f7ee f8d9 	bl	800089c <__aeabi_ddiv>
 80126ea:	e9cd 0100 	strd	r0, r1, [sp]
 80126ee:	e01a      	b.n	8012726 <_dtoa_r+0x39e>
 80126f0:	2502      	movs	r5, #2
 80126f2:	e7a3      	b.n	801263c <_dtoa_r+0x2b4>
 80126f4:	f000 80a0 	beq.w	8012838 <_dtoa_r+0x4b0>
 80126f8:	f1ca 0600 	rsb	r6, sl, #0
 80126fc:	4b9f      	ldr	r3, [pc, #636]	; (801297c <_dtoa_r+0x5f4>)
 80126fe:	4fa0      	ldr	r7, [pc, #640]	; (8012980 <_dtoa_r+0x5f8>)
 8012700:	f006 020f 	and.w	r2, r6, #15
 8012704:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012708:	e9d3 2300 	ldrd	r2, r3, [r3]
 801270c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8012710:	f7ed ff9a 	bl	8000648 <__aeabi_dmul>
 8012714:	e9cd 0100 	strd	r0, r1, [sp]
 8012718:	1136      	asrs	r6, r6, #4
 801271a:	2300      	movs	r3, #0
 801271c:	2502      	movs	r5, #2
 801271e:	2e00      	cmp	r6, #0
 8012720:	d17f      	bne.n	8012822 <_dtoa_r+0x49a>
 8012722:	2b00      	cmp	r3, #0
 8012724:	d1e1      	bne.n	80126ea <_dtoa_r+0x362>
 8012726:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012728:	2b00      	cmp	r3, #0
 801272a:	f000 8087 	beq.w	801283c <_dtoa_r+0x4b4>
 801272e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8012732:	2200      	movs	r2, #0
 8012734:	4b93      	ldr	r3, [pc, #588]	; (8012984 <_dtoa_r+0x5fc>)
 8012736:	4630      	mov	r0, r6
 8012738:	4639      	mov	r1, r7
 801273a:	f7ee f9f7 	bl	8000b2c <__aeabi_dcmplt>
 801273e:	2800      	cmp	r0, #0
 8012740:	d07c      	beq.n	801283c <_dtoa_r+0x4b4>
 8012742:	f1b9 0f00 	cmp.w	r9, #0
 8012746:	d079      	beq.n	801283c <_dtoa_r+0x4b4>
 8012748:	9b02      	ldr	r3, [sp, #8]
 801274a:	2b00      	cmp	r3, #0
 801274c:	dd35      	ble.n	80127ba <_dtoa_r+0x432>
 801274e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8012752:	9308      	str	r3, [sp, #32]
 8012754:	4639      	mov	r1, r7
 8012756:	2200      	movs	r2, #0
 8012758:	4b8b      	ldr	r3, [pc, #556]	; (8012988 <_dtoa_r+0x600>)
 801275a:	4630      	mov	r0, r6
 801275c:	f7ed ff74 	bl	8000648 <__aeabi_dmul>
 8012760:	e9cd 0100 	strd	r0, r1, [sp]
 8012764:	9f02      	ldr	r7, [sp, #8]
 8012766:	3501      	adds	r5, #1
 8012768:	4628      	mov	r0, r5
 801276a:	f7ed ff03 	bl	8000574 <__aeabi_i2d>
 801276e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012772:	f7ed ff69 	bl	8000648 <__aeabi_dmul>
 8012776:	2200      	movs	r2, #0
 8012778:	4b84      	ldr	r3, [pc, #528]	; (801298c <_dtoa_r+0x604>)
 801277a:	f7ed fdaf 	bl	80002dc <__adddf3>
 801277e:	4605      	mov	r5, r0
 8012780:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8012784:	2f00      	cmp	r7, #0
 8012786:	d15d      	bne.n	8012844 <_dtoa_r+0x4bc>
 8012788:	2200      	movs	r2, #0
 801278a:	4b81      	ldr	r3, [pc, #516]	; (8012990 <_dtoa_r+0x608>)
 801278c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012790:	f7ed fda2 	bl	80002d8 <__aeabi_dsub>
 8012794:	462a      	mov	r2, r5
 8012796:	4633      	mov	r3, r6
 8012798:	e9cd 0100 	strd	r0, r1, [sp]
 801279c:	f7ee f9e4 	bl	8000b68 <__aeabi_dcmpgt>
 80127a0:	2800      	cmp	r0, #0
 80127a2:	f040 8288 	bne.w	8012cb6 <_dtoa_r+0x92e>
 80127a6:	462a      	mov	r2, r5
 80127a8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80127ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80127b0:	f7ee f9bc 	bl	8000b2c <__aeabi_dcmplt>
 80127b4:	2800      	cmp	r0, #0
 80127b6:	f040 827c 	bne.w	8012cb2 <_dtoa_r+0x92a>
 80127ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80127be:	e9cd 2300 	strd	r2, r3, [sp]
 80127c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	f2c0 8150 	blt.w	8012a6a <_dtoa_r+0x6e2>
 80127ca:	f1ba 0f0e 	cmp.w	sl, #14
 80127ce:	f300 814c 	bgt.w	8012a6a <_dtoa_r+0x6e2>
 80127d2:	4b6a      	ldr	r3, [pc, #424]	; (801297c <_dtoa_r+0x5f4>)
 80127d4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80127d8:	ed93 7b00 	vldr	d7, [r3]
 80127dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80127de:	2b00      	cmp	r3, #0
 80127e0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80127e4:	f280 80d8 	bge.w	8012998 <_dtoa_r+0x610>
 80127e8:	f1b9 0f00 	cmp.w	r9, #0
 80127ec:	f300 80d4 	bgt.w	8012998 <_dtoa_r+0x610>
 80127f0:	f040 825e 	bne.w	8012cb0 <_dtoa_r+0x928>
 80127f4:	2200      	movs	r2, #0
 80127f6:	4b66      	ldr	r3, [pc, #408]	; (8012990 <_dtoa_r+0x608>)
 80127f8:	ec51 0b17 	vmov	r0, r1, d7
 80127fc:	f7ed ff24 	bl	8000648 <__aeabi_dmul>
 8012800:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012804:	f7ee f9a6 	bl	8000b54 <__aeabi_dcmpge>
 8012808:	464f      	mov	r7, r9
 801280a:	464e      	mov	r6, r9
 801280c:	2800      	cmp	r0, #0
 801280e:	f040 8234 	bne.w	8012c7a <_dtoa_r+0x8f2>
 8012812:	2331      	movs	r3, #49	; 0x31
 8012814:	f10b 0501 	add.w	r5, fp, #1
 8012818:	f88b 3000 	strb.w	r3, [fp]
 801281c:	f10a 0a01 	add.w	sl, sl, #1
 8012820:	e22f      	b.n	8012c82 <_dtoa_r+0x8fa>
 8012822:	07f2      	lsls	r2, r6, #31
 8012824:	d505      	bpl.n	8012832 <_dtoa_r+0x4aa>
 8012826:	e9d7 2300 	ldrd	r2, r3, [r7]
 801282a:	f7ed ff0d 	bl	8000648 <__aeabi_dmul>
 801282e:	3501      	adds	r5, #1
 8012830:	2301      	movs	r3, #1
 8012832:	1076      	asrs	r6, r6, #1
 8012834:	3708      	adds	r7, #8
 8012836:	e772      	b.n	801271e <_dtoa_r+0x396>
 8012838:	2502      	movs	r5, #2
 801283a:	e774      	b.n	8012726 <_dtoa_r+0x39e>
 801283c:	f8cd a020 	str.w	sl, [sp, #32]
 8012840:	464f      	mov	r7, r9
 8012842:	e791      	b.n	8012768 <_dtoa_r+0x3e0>
 8012844:	4b4d      	ldr	r3, [pc, #308]	; (801297c <_dtoa_r+0x5f4>)
 8012846:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801284a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 801284e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012850:	2b00      	cmp	r3, #0
 8012852:	d047      	beq.n	80128e4 <_dtoa_r+0x55c>
 8012854:	4602      	mov	r2, r0
 8012856:	460b      	mov	r3, r1
 8012858:	2000      	movs	r0, #0
 801285a:	494e      	ldr	r1, [pc, #312]	; (8012994 <_dtoa_r+0x60c>)
 801285c:	f7ee f81e 	bl	800089c <__aeabi_ddiv>
 8012860:	462a      	mov	r2, r5
 8012862:	4633      	mov	r3, r6
 8012864:	f7ed fd38 	bl	80002d8 <__aeabi_dsub>
 8012868:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801286c:	465d      	mov	r5, fp
 801286e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012872:	f7ee f999 	bl	8000ba8 <__aeabi_d2iz>
 8012876:	4606      	mov	r6, r0
 8012878:	f7ed fe7c 	bl	8000574 <__aeabi_i2d>
 801287c:	4602      	mov	r2, r0
 801287e:	460b      	mov	r3, r1
 8012880:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012884:	f7ed fd28 	bl	80002d8 <__aeabi_dsub>
 8012888:	3630      	adds	r6, #48	; 0x30
 801288a:	f805 6b01 	strb.w	r6, [r5], #1
 801288e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8012892:	e9cd 0100 	strd	r0, r1, [sp]
 8012896:	f7ee f949 	bl	8000b2c <__aeabi_dcmplt>
 801289a:	2800      	cmp	r0, #0
 801289c:	d163      	bne.n	8012966 <_dtoa_r+0x5de>
 801289e:	e9dd 2300 	ldrd	r2, r3, [sp]
 80128a2:	2000      	movs	r0, #0
 80128a4:	4937      	ldr	r1, [pc, #220]	; (8012984 <_dtoa_r+0x5fc>)
 80128a6:	f7ed fd17 	bl	80002d8 <__aeabi_dsub>
 80128aa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80128ae:	f7ee f93d 	bl	8000b2c <__aeabi_dcmplt>
 80128b2:	2800      	cmp	r0, #0
 80128b4:	f040 80b7 	bne.w	8012a26 <_dtoa_r+0x69e>
 80128b8:	eba5 030b 	sub.w	r3, r5, fp
 80128bc:	429f      	cmp	r7, r3
 80128be:	f77f af7c 	ble.w	80127ba <_dtoa_r+0x432>
 80128c2:	2200      	movs	r2, #0
 80128c4:	4b30      	ldr	r3, [pc, #192]	; (8012988 <_dtoa_r+0x600>)
 80128c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80128ca:	f7ed febd 	bl	8000648 <__aeabi_dmul>
 80128ce:	2200      	movs	r2, #0
 80128d0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80128d4:	4b2c      	ldr	r3, [pc, #176]	; (8012988 <_dtoa_r+0x600>)
 80128d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80128da:	f7ed feb5 	bl	8000648 <__aeabi_dmul>
 80128de:	e9cd 0100 	strd	r0, r1, [sp]
 80128e2:	e7c4      	b.n	801286e <_dtoa_r+0x4e6>
 80128e4:	462a      	mov	r2, r5
 80128e6:	4633      	mov	r3, r6
 80128e8:	f7ed feae 	bl	8000648 <__aeabi_dmul>
 80128ec:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80128f0:	eb0b 0507 	add.w	r5, fp, r7
 80128f4:	465e      	mov	r6, fp
 80128f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80128fa:	f7ee f955 	bl	8000ba8 <__aeabi_d2iz>
 80128fe:	4607      	mov	r7, r0
 8012900:	f7ed fe38 	bl	8000574 <__aeabi_i2d>
 8012904:	3730      	adds	r7, #48	; 0x30
 8012906:	4602      	mov	r2, r0
 8012908:	460b      	mov	r3, r1
 801290a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801290e:	f7ed fce3 	bl	80002d8 <__aeabi_dsub>
 8012912:	f806 7b01 	strb.w	r7, [r6], #1
 8012916:	42ae      	cmp	r6, r5
 8012918:	e9cd 0100 	strd	r0, r1, [sp]
 801291c:	f04f 0200 	mov.w	r2, #0
 8012920:	d126      	bne.n	8012970 <_dtoa_r+0x5e8>
 8012922:	4b1c      	ldr	r3, [pc, #112]	; (8012994 <_dtoa_r+0x60c>)
 8012924:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012928:	f7ed fcd8 	bl	80002dc <__adddf3>
 801292c:	4602      	mov	r2, r0
 801292e:	460b      	mov	r3, r1
 8012930:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012934:	f7ee f918 	bl	8000b68 <__aeabi_dcmpgt>
 8012938:	2800      	cmp	r0, #0
 801293a:	d174      	bne.n	8012a26 <_dtoa_r+0x69e>
 801293c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8012940:	2000      	movs	r0, #0
 8012942:	4914      	ldr	r1, [pc, #80]	; (8012994 <_dtoa_r+0x60c>)
 8012944:	f7ed fcc8 	bl	80002d8 <__aeabi_dsub>
 8012948:	4602      	mov	r2, r0
 801294a:	460b      	mov	r3, r1
 801294c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012950:	f7ee f8ec 	bl	8000b2c <__aeabi_dcmplt>
 8012954:	2800      	cmp	r0, #0
 8012956:	f43f af30 	beq.w	80127ba <_dtoa_r+0x432>
 801295a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801295e:	2b30      	cmp	r3, #48	; 0x30
 8012960:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8012964:	d002      	beq.n	801296c <_dtoa_r+0x5e4>
 8012966:	f8dd a020 	ldr.w	sl, [sp, #32]
 801296a:	e04a      	b.n	8012a02 <_dtoa_r+0x67a>
 801296c:	4615      	mov	r5, r2
 801296e:	e7f4      	b.n	801295a <_dtoa_r+0x5d2>
 8012970:	4b05      	ldr	r3, [pc, #20]	; (8012988 <_dtoa_r+0x600>)
 8012972:	f7ed fe69 	bl	8000648 <__aeabi_dmul>
 8012976:	e9cd 0100 	strd	r0, r1, [sp]
 801297a:	e7bc      	b.n	80128f6 <_dtoa_r+0x56e>
 801297c:	080169a8 	.word	0x080169a8
 8012980:	08016980 	.word	0x08016980
 8012984:	3ff00000 	.word	0x3ff00000
 8012988:	40240000 	.word	0x40240000
 801298c:	401c0000 	.word	0x401c0000
 8012990:	40140000 	.word	0x40140000
 8012994:	3fe00000 	.word	0x3fe00000
 8012998:	e9dd 6700 	ldrd	r6, r7, [sp]
 801299c:	465d      	mov	r5, fp
 801299e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80129a2:	4630      	mov	r0, r6
 80129a4:	4639      	mov	r1, r7
 80129a6:	f7ed ff79 	bl	800089c <__aeabi_ddiv>
 80129aa:	f7ee f8fd 	bl	8000ba8 <__aeabi_d2iz>
 80129ae:	4680      	mov	r8, r0
 80129b0:	f7ed fde0 	bl	8000574 <__aeabi_i2d>
 80129b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80129b8:	f7ed fe46 	bl	8000648 <__aeabi_dmul>
 80129bc:	4602      	mov	r2, r0
 80129be:	460b      	mov	r3, r1
 80129c0:	4630      	mov	r0, r6
 80129c2:	4639      	mov	r1, r7
 80129c4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80129c8:	f7ed fc86 	bl	80002d8 <__aeabi_dsub>
 80129cc:	f805 6b01 	strb.w	r6, [r5], #1
 80129d0:	eba5 060b 	sub.w	r6, r5, fp
 80129d4:	45b1      	cmp	r9, r6
 80129d6:	4602      	mov	r2, r0
 80129d8:	460b      	mov	r3, r1
 80129da:	d139      	bne.n	8012a50 <_dtoa_r+0x6c8>
 80129dc:	f7ed fc7e 	bl	80002dc <__adddf3>
 80129e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80129e4:	4606      	mov	r6, r0
 80129e6:	460f      	mov	r7, r1
 80129e8:	f7ee f8be 	bl	8000b68 <__aeabi_dcmpgt>
 80129ec:	b9c8      	cbnz	r0, 8012a22 <_dtoa_r+0x69a>
 80129ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80129f2:	4630      	mov	r0, r6
 80129f4:	4639      	mov	r1, r7
 80129f6:	f7ee f88f 	bl	8000b18 <__aeabi_dcmpeq>
 80129fa:	b110      	cbz	r0, 8012a02 <_dtoa_r+0x67a>
 80129fc:	f018 0f01 	tst.w	r8, #1
 8012a00:	d10f      	bne.n	8012a22 <_dtoa_r+0x69a>
 8012a02:	9904      	ldr	r1, [sp, #16]
 8012a04:	4620      	mov	r0, r4
 8012a06:	f000 fcaa 	bl	801335e <_Bfree>
 8012a0a:	2300      	movs	r3, #0
 8012a0c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012a0e:	702b      	strb	r3, [r5, #0]
 8012a10:	f10a 0301 	add.w	r3, sl, #1
 8012a14:	6013      	str	r3, [r2, #0]
 8012a16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012a18:	2b00      	cmp	r3, #0
 8012a1a:	f000 8241 	beq.w	8012ea0 <_dtoa_r+0xb18>
 8012a1e:	601d      	str	r5, [r3, #0]
 8012a20:	e23e      	b.n	8012ea0 <_dtoa_r+0xb18>
 8012a22:	f8cd a020 	str.w	sl, [sp, #32]
 8012a26:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8012a2a:	2a39      	cmp	r2, #57	; 0x39
 8012a2c:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8012a30:	d108      	bne.n	8012a44 <_dtoa_r+0x6bc>
 8012a32:	459b      	cmp	fp, r3
 8012a34:	d10a      	bne.n	8012a4c <_dtoa_r+0x6c4>
 8012a36:	9b08      	ldr	r3, [sp, #32]
 8012a38:	3301      	adds	r3, #1
 8012a3a:	9308      	str	r3, [sp, #32]
 8012a3c:	2330      	movs	r3, #48	; 0x30
 8012a3e:	f88b 3000 	strb.w	r3, [fp]
 8012a42:	465b      	mov	r3, fp
 8012a44:	781a      	ldrb	r2, [r3, #0]
 8012a46:	3201      	adds	r2, #1
 8012a48:	701a      	strb	r2, [r3, #0]
 8012a4a:	e78c      	b.n	8012966 <_dtoa_r+0x5de>
 8012a4c:	461d      	mov	r5, r3
 8012a4e:	e7ea      	b.n	8012a26 <_dtoa_r+0x69e>
 8012a50:	2200      	movs	r2, #0
 8012a52:	4b9b      	ldr	r3, [pc, #620]	; (8012cc0 <_dtoa_r+0x938>)
 8012a54:	f7ed fdf8 	bl	8000648 <__aeabi_dmul>
 8012a58:	2200      	movs	r2, #0
 8012a5a:	2300      	movs	r3, #0
 8012a5c:	4606      	mov	r6, r0
 8012a5e:	460f      	mov	r7, r1
 8012a60:	f7ee f85a 	bl	8000b18 <__aeabi_dcmpeq>
 8012a64:	2800      	cmp	r0, #0
 8012a66:	d09a      	beq.n	801299e <_dtoa_r+0x616>
 8012a68:	e7cb      	b.n	8012a02 <_dtoa_r+0x67a>
 8012a6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012a6c:	2a00      	cmp	r2, #0
 8012a6e:	f000 808b 	beq.w	8012b88 <_dtoa_r+0x800>
 8012a72:	9a06      	ldr	r2, [sp, #24]
 8012a74:	2a01      	cmp	r2, #1
 8012a76:	dc6e      	bgt.n	8012b56 <_dtoa_r+0x7ce>
 8012a78:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8012a7a:	2a00      	cmp	r2, #0
 8012a7c:	d067      	beq.n	8012b4e <_dtoa_r+0x7c6>
 8012a7e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8012a82:	9f07      	ldr	r7, [sp, #28]
 8012a84:	9d05      	ldr	r5, [sp, #20]
 8012a86:	9a05      	ldr	r2, [sp, #20]
 8012a88:	2101      	movs	r1, #1
 8012a8a:	441a      	add	r2, r3
 8012a8c:	4620      	mov	r0, r4
 8012a8e:	9205      	str	r2, [sp, #20]
 8012a90:	4498      	add	r8, r3
 8012a92:	f000 fd04 	bl	801349e <__i2b>
 8012a96:	4606      	mov	r6, r0
 8012a98:	2d00      	cmp	r5, #0
 8012a9a:	dd0c      	ble.n	8012ab6 <_dtoa_r+0x72e>
 8012a9c:	f1b8 0f00 	cmp.w	r8, #0
 8012aa0:	dd09      	ble.n	8012ab6 <_dtoa_r+0x72e>
 8012aa2:	4545      	cmp	r5, r8
 8012aa4:	9a05      	ldr	r2, [sp, #20]
 8012aa6:	462b      	mov	r3, r5
 8012aa8:	bfa8      	it	ge
 8012aaa:	4643      	movge	r3, r8
 8012aac:	1ad2      	subs	r2, r2, r3
 8012aae:	9205      	str	r2, [sp, #20]
 8012ab0:	1aed      	subs	r5, r5, r3
 8012ab2:	eba8 0803 	sub.w	r8, r8, r3
 8012ab6:	9b07      	ldr	r3, [sp, #28]
 8012ab8:	b1eb      	cbz	r3, 8012af6 <_dtoa_r+0x76e>
 8012aba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012abc:	2b00      	cmp	r3, #0
 8012abe:	d067      	beq.n	8012b90 <_dtoa_r+0x808>
 8012ac0:	b18f      	cbz	r7, 8012ae6 <_dtoa_r+0x75e>
 8012ac2:	4631      	mov	r1, r6
 8012ac4:	463a      	mov	r2, r7
 8012ac6:	4620      	mov	r0, r4
 8012ac8:	f000 fd88 	bl	80135dc <__pow5mult>
 8012acc:	9a04      	ldr	r2, [sp, #16]
 8012ace:	4601      	mov	r1, r0
 8012ad0:	4606      	mov	r6, r0
 8012ad2:	4620      	mov	r0, r4
 8012ad4:	f000 fcec 	bl	80134b0 <__multiply>
 8012ad8:	9904      	ldr	r1, [sp, #16]
 8012ada:	9008      	str	r0, [sp, #32]
 8012adc:	4620      	mov	r0, r4
 8012ade:	f000 fc3e 	bl	801335e <_Bfree>
 8012ae2:	9b08      	ldr	r3, [sp, #32]
 8012ae4:	9304      	str	r3, [sp, #16]
 8012ae6:	9b07      	ldr	r3, [sp, #28]
 8012ae8:	1bda      	subs	r2, r3, r7
 8012aea:	d004      	beq.n	8012af6 <_dtoa_r+0x76e>
 8012aec:	9904      	ldr	r1, [sp, #16]
 8012aee:	4620      	mov	r0, r4
 8012af0:	f000 fd74 	bl	80135dc <__pow5mult>
 8012af4:	9004      	str	r0, [sp, #16]
 8012af6:	2101      	movs	r1, #1
 8012af8:	4620      	mov	r0, r4
 8012afa:	f000 fcd0 	bl	801349e <__i2b>
 8012afe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012b00:	4607      	mov	r7, r0
 8012b02:	2b00      	cmp	r3, #0
 8012b04:	f000 81d0 	beq.w	8012ea8 <_dtoa_r+0xb20>
 8012b08:	461a      	mov	r2, r3
 8012b0a:	4601      	mov	r1, r0
 8012b0c:	4620      	mov	r0, r4
 8012b0e:	f000 fd65 	bl	80135dc <__pow5mult>
 8012b12:	9b06      	ldr	r3, [sp, #24]
 8012b14:	2b01      	cmp	r3, #1
 8012b16:	4607      	mov	r7, r0
 8012b18:	dc40      	bgt.n	8012b9c <_dtoa_r+0x814>
 8012b1a:	9b00      	ldr	r3, [sp, #0]
 8012b1c:	2b00      	cmp	r3, #0
 8012b1e:	d139      	bne.n	8012b94 <_dtoa_r+0x80c>
 8012b20:	9b01      	ldr	r3, [sp, #4]
 8012b22:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	d136      	bne.n	8012b98 <_dtoa_r+0x810>
 8012b2a:	9b01      	ldr	r3, [sp, #4]
 8012b2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012b30:	0d1b      	lsrs	r3, r3, #20
 8012b32:	051b      	lsls	r3, r3, #20
 8012b34:	b12b      	cbz	r3, 8012b42 <_dtoa_r+0x7ba>
 8012b36:	9b05      	ldr	r3, [sp, #20]
 8012b38:	3301      	adds	r3, #1
 8012b3a:	9305      	str	r3, [sp, #20]
 8012b3c:	f108 0801 	add.w	r8, r8, #1
 8012b40:	2301      	movs	r3, #1
 8012b42:	9307      	str	r3, [sp, #28]
 8012b44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	d12a      	bne.n	8012ba0 <_dtoa_r+0x818>
 8012b4a:	2001      	movs	r0, #1
 8012b4c:	e030      	b.n	8012bb0 <_dtoa_r+0x828>
 8012b4e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012b50:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8012b54:	e795      	b.n	8012a82 <_dtoa_r+0x6fa>
 8012b56:	9b07      	ldr	r3, [sp, #28]
 8012b58:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 8012b5c:	42bb      	cmp	r3, r7
 8012b5e:	bfbf      	itttt	lt
 8012b60:	9b07      	ldrlt	r3, [sp, #28]
 8012b62:	9707      	strlt	r7, [sp, #28]
 8012b64:	1afa      	sublt	r2, r7, r3
 8012b66:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8012b68:	bfbb      	ittet	lt
 8012b6a:	189b      	addlt	r3, r3, r2
 8012b6c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8012b6e:	1bdf      	subge	r7, r3, r7
 8012b70:	2700      	movlt	r7, #0
 8012b72:	f1b9 0f00 	cmp.w	r9, #0
 8012b76:	bfb5      	itete	lt
 8012b78:	9b05      	ldrlt	r3, [sp, #20]
 8012b7a:	9d05      	ldrge	r5, [sp, #20]
 8012b7c:	eba3 0509 	sublt.w	r5, r3, r9
 8012b80:	464b      	movge	r3, r9
 8012b82:	bfb8      	it	lt
 8012b84:	2300      	movlt	r3, #0
 8012b86:	e77e      	b.n	8012a86 <_dtoa_r+0x6fe>
 8012b88:	9f07      	ldr	r7, [sp, #28]
 8012b8a:	9d05      	ldr	r5, [sp, #20]
 8012b8c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8012b8e:	e783      	b.n	8012a98 <_dtoa_r+0x710>
 8012b90:	9a07      	ldr	r2, [sp, #28]
 8012b92:	e7ab      	b.n	8012aec <_dtoa_r+0x764>
 8012b94:	2300      	movs	r3, #0
 8012b96:	e7d4      	b.n	8012b42 <_dtoa_r+0x7ba>
 8012b98:	9b00      	ldr	r3, [sp, #0]
 8012b9a:	e7d2      	b.n	8012b42 <_dtoa_r+0x7ba>
 8012b9c:	2300      	movs	r3, #0
 8012b9e:	9307      	str	r3, [sp, #28]
 8012ba0:	693b      	ldr	r3, [r7, #16]
 8012ba2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8012ba6:	6918      	ldr	r0, [r3, #16]
 8012ba8:	f000 fc2b 	bl	8013402 <__hi0bits>
 8012bac:	f1c0 0020 	rsb	r0, r0, #32
 8012bb0:	4440      	add	r0, r8
 8012bb2:	f010 001f 	ands.w	r0, r0, #31
 8012bb6:	d047      	beq.n	8012c48 <_dtoa_r+0x8c0>
 8012bb8:	f1c0 0320 	rsb	r3, r0, #32
 8012bbc:	2b04      	cmp	r3, #4
 8012bbe:	dd3b      	ble.n	8012c38 <_dtoa_r+0x8b0>
 8012bc0:	9b05      	ldr	r3, [sp, #20]
 8012bc2:	f1c0 001c 	rsb	r0, r0, #28
 8012bc6:	4403      	add	r3, r0
 8012bc8:	9305      	str	r3, [sp, #20]
 8012bca:	4405      	add	r5, r0
 8012bcc:	4480      	add	r8, r0
 8012bce:	9b05      	ldr	r3, [sp, #20]
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	dd05      	ble.n	8012be0 <_dtoa_r+0x858>
 8012bd4:	461a      	mov	r2, r3
 8012bd6:	9904      	ldr	r1, [sp, #16]
 8012bd8:	4620      	mov	r0, r4
 8012bda:	f000 fd4d 	bl	8013678 <__lshift>
 8012bde:	9004      	str	r0, [sp, #16]
 8012be0:	f1b8 0f00 	cmp.w	r8, #0
 8012be4:	dd05      	ble.n	8012bf2 <_dtoa_r+0x86a>
 8012be6:	4639      	mov	r1, r7
 8012be8:	4642      	mov	r2, r8
 8012bea:	4620      	mov	r0, r4
 8012bec:	f000 fd44 	bl	8013678 <__lshift>
 8012bf0:	4607      	mov	r7, r0
 8012bf2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012bf4:	b353      	cbz	r3, 8012c4c <_dtoa_r+0x8c4>
 8012bf6:	4639      	mov	r1, r7
 8012bf8:	9804      	ldr	r0, [sp, #16]
 8012bfa:	f000 fd91 	bl	8013720 <__mcmp>
 8012bfe:	2800      	cmp	r0, #0
 8012c00:	da24      	bge.n	8012c4c <_dtoa_r+0x8c4>
 8012c02:	2300      	movs	r3, #0
 8012c04:	220a      	movs	r2, #10
 8012c06:	9904      	ldr	r1, [sp, #16]
 8012c08:	4620      	mov	r0, r4
 8012c0a:	f000 fbbf 	bl	801338c <__multadd>
 8012c0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012c10:	9004      	str	r0, [sp, #16]
 8012c12:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	f000 814d 	beq.w	8012eb6 <_dtoa_r+0xb2e>
 8012c1c:	2300      	movs	r3, #0
 8012c1e:	4631      	mov	r1, r6
 8012c20:	220a      	movs	r2, #10
 8012c22:	4620      	mov	r0, r4
 8012c24:	f000 fbb2 	bl	801338c <__multadd>
 8012c28:	9b02      	ldr	r3, [sp, #8]
 8012c2a:	2b00      	cmp	r3, #0
 8012c2c:	4606      	mov	r6, r0
 8012c2e:	dc4f      	bgt.n	8012cd0 <_dtoa_r+0x948>
 8012c30:	9b06      	ldr	r3, [sp, #24]
 8012c32:	2b02      	cmp	r3, #2
 8012c34:	dd4c      	ble.n	8012cd0 <_dtoa_r+0x948>
 8012c36:	e011      	b.n	8012c5c <_dtoa_r+0x8d4>
 8012c38:	d0c9      	beq.n	8012bce <_dtoa_r+0x846>
 8012c3a:	9a05      	ldr	r2, [sp, #20]
 8012c3c:	331c      	adds	r3, #28
 8012c3e:	441a      	add	r2, r3
 8012c40:	9205      	str	r2, [sp, #20]
 8012c42:	441d      	add	r5, r3
 8012c44:	4498      	add	r8, r3
 8012c46:	e7c2      	b.n	8012bce <_dtoa_r+0x846>
 8012c48:	4603      	mov	r3, r0
 8012c4a:	e7f6      	b.n	8012c3a <_dtoa_r+0x8b2>
 8012c4c:	f1b9 0f00 	cmp.w	r9, #0
 8012c50:	dc38      	bgt.n	8012cc4 <_dtoa_r+0x93c>
 8012c52:	9b06      	ldr	r3, [sp, #24]
 8012c54:	2b02      	cmp	r3, #2
 8012c56:	dd35      	ble.n	8012cc4 <_dtoa_r+0x93c>
 8012c58:	f8cd 9008 	str.w	r9, [sp, #8]
 8012c5c:	9b02      	ldr	r3, [sp, #8]
 8012c5e:	b963      	cbnz	r3, 8012c7a <_dtoa_r+0x8f2>
 8012c60:	4639      	mov	r1, r7
 8012c62:	2205      	movs	r2, #5
 8012c64:	4620      	mov	r0, r4
 8012c66:	f000 fb91 	bl	801338c <__multadd>
 8012c6a:	4601      	mov	r1, r0
 8012c6c:	4607      	mov	r7, r0
 8012c6e:	9804      	ldr	r0, [sp, #16]
 8012c70:	f000 fd56 	bl	8013720 <__mcmp>
 8012c74:	2800      	cmp	r0, #0
 8012c76:	f73f adcc 	bgt.w	8012812 <_dtoa_r+0x48a>
 8012c7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012c7c:	465d      	mov	r5, fp
 8012c7e:	ea6f 0a03 	mvn.w	sl, r3
 8012c82:	f04f 0900 	mov.w	r9, #0
 8012c86:	4639      	mov	r1, r7
 8012c88:	4620      	mov	r0, r4
 8012c8a:	f000 fb68 	bl	801335e <_Bfree>
 8012c8e:	2e00      	cmp	r6, #0
 8012c90:	f43f aeb7 	beq.w	8012a02 <_dtoa_r+0x67a>
 8012c94:	f1b9 0f00 	cmp.w	r9, #0
 8012c98:	d005      	beq.n	8012ca6 <_dtoa_r+0x91e>
 8012c9a:	45b1      	cmp	r9, r6
 8012c9c:	d003      	beq.n	8012ca6 <_dtoa_r+0x91e>
 8012c9e:	4649      	mov	r1, r9
 8012ca0:	4620      	mov	r0, r4
 8012ca2:	f000 fb5c 	bl	801335e <_Bfree>
 8012ca6:	4631      	mov	r1, r6
 8012ca8:	4620      	mov	r0, r4
 8012caa:	f000 fb58 	bl	801335e <_Bfree>
 8012cae:	e6a8      	b.n	8012a02 <_dtoa_r+0x67a>
 8012cb0:	2700      	movs	r7, #0
 8012cb2:	463e      	mov	r6, r7
 8012cb4:	e7e1      	b.n	8012c7a <_dtoa_r+0x8f2>
 8012cb6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8012cba:	463e      	mov	r6, r7
 8012cbc:	e5a9      	b.n	8012812 <_dtoa_r+0x48a>
 8012cbe:	bf00      	nop
 8012cc0:	40240000 	.word	0x40240000
 8012cc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012cc6:	f8cd 9008 	str.w	r9, [sp, #8]
 8012cca:	2b00      	cmp	r3, #0
 8012ccc:	f000 80fa 	beq.w	8012ec4 <_dtoa_r+0xb3c>
 8012cd0:	2d00      	cmp	r5, #0
 8012cd2:	dd05      	ble.n	8012ce0 <_dtoa_r+0x958>
 8012cd4:	4631      	mov	r1, r6
 8012cd6:	462a      	mov	r2, r5
 8012cd8:	4620      	mov	r0, r4
 8012cda:	f000 fccd 	bl	8013678 <__lshift>
 8012cde:	4606      	mov	r6, r0
 8012ce0:	9b07      	ldr	r3, [sp, #28]
 8012ce2:	2b00      	cmp	r3, #0
 8012ce4:	d04c      	beq.n	8012d80 <_dtoa_r+0x9f8>
 8012ce6:	6871      	ldr	r1, [r6, #4]
 8012ce8:	4620      	mov	r0, r4
 8012cea:	f000 fb04 	bl	80132f6 <_Balloc>
 8012cee:	6932      	ldr	r2, [r6, #16]
 8012cf0:	3202      	adds	r2, #2
 8012cf2:	4605      	mov	r5, r0
 8012cf4:	0092      	lsls	r2, r2, #2
 8012cf6:	f106 010c 	add.w	r1, r6, #12
 8012cfa:	300c      	adds	r0, #12
 8012cfc:	f000 faf0 	bl	80132e0 <memcpy>
 8012d00:	2201      	movs	r2, #1
 8012d02:	4629      	mov	r1, r5
 8012d04:	4620      	mov	r0, r4
 8012d06:	f000 fcb7 	bl	8013678 <__lshift>
 8012d0a:	9b00      	ldr	r3, [sp, #0]
 8012d0c:	f8cd b014 	str.w	fp, [sp, #20]
 8012d10:	f003 0301 	and.w	r3, r3, #1
 8012d14:	46b1      	mov	r9, r6
 8012d16:	9307      	str	r3, [sp, #28]
 8012d18:	4606      	mov	r6, r0
 8012d1a:	4639      	mov	r1, r7
 8012d1c:	9804      	ldr	r0, [sp, #16]
 8012d1e:	f7ff faa7 	bl	8012270 <quorem>
 8012d22:	4649      	mov	r1, r9
 8012d24:	4605      	mov	r5, r0
 8012d26:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8012d2a:	9804      	ldr	r0, [sp, #16]
 8012d2c:	f000 fcf8 	bl	8013720 <__mcmp>
 8012d30:	4632      	mov	r2, r6
 8012d32:	9000      	str	r0, [sp, #0]
 8012d34:	4639      	mov	r1, r7
 8012d36:	4620      	mov	r0, r4
 8012d38:	f000 fd0c 	bl	8013754 <__mdiff>
 8012d3c:	68c3      	ldr	r3, [r0, #12]
 8012d3e:	4602      	mov	r2, r0
 8012d40:	bb03      	cbnz	r3, 8012d84 <_dtoa_r+0x9fc>
 8012d42:	4601      	mov	r1, r0
 8012d44:	9008      	str	r0, [sp, #32]
 8012d46:	9804      	ldr	r0, [sp, #16]
 8012d48:	f000 fcea 	bl	8013720 <__mcmp>
 8012d4c:	9a08      	ldr	r2, [sp, #32]
 8012d4e:	4603      	mov	r3, r0
 8012d50:	4611      	mov	r1, r2
 8012d52:	4620      	mov	r0, r4
 8012d54:	9308      	str	r3, [sp, #32]
 8012d56:	f000 fb02 	bl	801335e <_Bfree>
 8012d5a:	9b08      	ldr	r3, [sp, #32]
 8012d5c:	b9a3      	cbnz	r3, 8012d88 <_dtoa_r+0xa00>
 8012d5e:	9a06      	ldr	r2, [sp, #24]
 8012d60:	b992      	cbnz	r2, 8012d88 <_dtoa_r+0xa00>
 8012d62:	9a07      	ldr	r2, [sp, #28]
 8012d64:	b982      	cbnz	r2, 8012d88 <_dtoa_r+0xa00>
 8012d66:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8012d6a:	d029      	beq.n	8012dc0 <_dtoa_r+0xa38>
 8012d6c:	9b00      	ldr	r3, [sp, #0]
 8012d6e:	2b00      	cmp	r3, #0
 8012d70:	dd01      	ble.n	8012d76 <_dtoa_r+0x9ee>
 8012d72:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8012d76:	9b05      	ldr	r3, [sp, #20]
 8012d78:	1c5d      	adds	r5, r3, #1
 8012d7a:	f883 8000 	strb.w	r8, [r3]
 8012d7e:	e782      	b.n	8012c86 <_dtoa_r+0x8fe>
 8012d80:	4630      	mov	r0, r6
 8012d82:	e7c2      	b.n	8012d0a <_dtoa_r+0x982>
 8012d84:	2301      	movs	r3, #1
 8012d86:	e7e3      	b.n	8012d50 <_dtoa_r+0x9c8>
 8012d88:	9a00      	ldr	r2, [sp, #0]
 8012d8a:	2a00      	cmp	r2, #0
 8012d8c:	db04      	blt.n	8012d98 <_dtoa_r+0xa10>
 8012d8e:	d125      	bne.n	8012ddc <_dtoa_r+0xa54>
 8012d90:	9a06      	ldr	r2, [sp, #24]
 8012d92:	bb1a      	cbnz	r2, 8012ddc <_dtoa_r+0xa54>
 8012d94:	9a07      	ldr	r2, [sp, #28]
 8012d96:	bb0a      	cbnz	r2, 8012ddc <_dtoa_r+0xa54>
 8012d98:	2b00      	cmp	r3, #0
 8012d9a:	ddec      	ble.n	8012d76 <_dtoa_r+0x9ee>
 8012d9c:	2201      	movs	r2, #1
 8012d9e:	9904      	ldr	r1, [sp, #16]
 8012da0:	4620      	mov	r0, r4
 8012da2:	f000 fc69 	bl	8013678 <__lshift>
 8012da6:	4639      	mov	r1, r7
 8012da8:	9004      	str	r0, [sp, #16]
 8012daa:	f000 fcb9 	bl	8013720 <__mcmp>
 8012dae:	2800      	cmp	r0, #0
 8012db0:	dc03      	bgt.n	8012dba <_dtoa_r+0xa32>
 8012db2:	d1e0      	bne.n	8012d76 <_dtoa_r+0x9ee>
 8012db4:	f018 0f01 	tst.w	r8, #1
 8012db8:	d0dd      	beq.n	8012d76 <_dtoa_r+0x9ee>
 8012dba:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8012dbe:	d1d8      	bne.n	8012d72 <_dtoa_r+0x9ea>
 8012dc0:	9b05      	ldr	r3, [sp, #20]
 8012dc2:	9a05      	ldr	r2, [sp, #20]
 8012dc4:	1c5d      	adds	r5, r3, #1
 8012dc6:	2339      	movs	r3, #57	; 0x39
 8012dc8:	7013      	strb	r3, [r2, #0]
 8012dca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012dce:	2b39      	cmp	r3, #57	; 0x39
 8012dd0:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8012dd4:	d04f      	beq.n	8012e76 <_dtoa_r+0xaee>
 8012dd6:	3301      	adds	r3, #1
 8012dd8:	7013      	strb	r3, [r2, #0]
 8012dda:	e754      	b.n	8012c86 <_dtoa_r+0x8fe>
 8012ddc:	9a05      	ldr	r2, [sp, #20]
 8012dde:	2b00      	cmp	r3, #0
 8012de0:	f102 0501 	add.w	r5, r2, #1
 8012de4:	dd06      	ble.n	8012df4 <_dtoa_r+0xa6c>
 8012de6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8012dea:	d0e9      	beq.n	8012dc0 <_dtoa_r+0xa38>
 8012dec:	f108 0801 	add.w	r8, r8, #1
 8012df0:	9b05      	ldr	r3, [sp, #20]
 8012df2:	e7c2      	b.n	8012d7a <_dtoa_r+0x9f2>
 8012df4:	9a02      	ldr	r2, [sp, #8]
 8012df6:	f805 8c01 	strb.w	r8, [r5, #-1]
 8012dfa:	eba5 030b 	sub.w	r3, r5, fp
 8012dfe:	4293      	cmp	r3, r2
 8012e00:	d021      	beq.n	8012e46 <_dtoa_r+0xabe>
 8012e02:	2300      	movs	r3, #0
 8012e04:	220a      	movs	r2, #10
 8012e06:	9904      	ldr	r1, [sp, #16]
 8012e08:	4620      	mov	r0, r4
 8012e0a:	f000 fabf 	bl	801338c <__multadd>
 8012e0e:	45b1      	cmp	r9, r6
 8012e10:	9004      	str	r0, [sp, #16]
 8012e12:	f04f 0300 	mov.w	r3, #0
 8012e16:	f04f 020a 	mov.w	r2, #10
 8012e1a:	4649      	mov	r1, r9
 8012e1c:	4620      	mov	r0, r4
 8012e1e:	d105      	bne.n	8012e2c <_dtoa_r+0xaa4>
 8012e20:	f000 fab4 	bl	801338c <__multadd>
 8012e24:	4681      	mov	r9, r0
 8012e26:	4606      	mov	r6, r0
 8012e28:	9505      	str	r5, [sp, #20]
 8012e2a:	e776      	b.n	8012d1a <_dtoa_r+0x992>
 8012e2c:	f000 faae 	bl	801338c <__multadd>
 8012e30:	4631      	mov	r1, r6
 8012e32:	4681      	mov	r9, r0
 8012e34:	2300      	movs	r3, #0
 8012e36:	220a      	movs	r2, #10
 8012e38:	4620      	mov	r0, r4
 8012e3a:	f000 faa7 	bl	801338c <__multadd>
 8012e3e:	4606      	mov	r6, r0
 8012e40:	e7f2      	b.n	8012e28 <_dtoa_r+0xaa0>
 8012e42:	f04f 0900 	mov.w	r9, #0
 8012e46:	2201      	movs	r2, #1
 8012e48:	9904      	ldr	r1, [sp, #16]
 8012e4a:	4620      	mov	r0, r4
 8012e4c:	f000 fc14 	bl	8013678 <__lshift>
 8012e50:	4639      	mov	r1, r7
 8012e52:	9004      	str	r0, [sp, #16]
 8012e54:	f000 fc64 	bl	8013720 <__mcmp>
 8012e58:	2800      	cmp	r0, #0
 8012e5a:	dcb6      	bgt.n	8012dca <_dtoa_r+0xa42>
 8012e5c:	d102      	bne.n	8012e64 <_dtoa_r+0xadc>
 8012e5e:	f018 0f01 	tst.w	r8, #1
 8012e62:	d1b2      	bne.n	8012dca <_dtoa_r+0xa42>
 8012e64:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012e68:	2b30      	cmp	r3, #48	; 0x30
 8012e6a:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8012e6e:	f47f af0a 	bne.w	8012c86 <_dtoa_r+0x8fe>
 8012e72:	4615      	mov	r5, r2
 8012e74:	e7f6      	b.n	8012e64 <_dtoa_r+0xadc>
 8012e76:	4593      	cmp	fp, r2
 8012e78:	d105      	bne.n	8012e86 <_dtoa_r+0xafe>
 8012e7a:	2331      	movs	r3, #49	; 0x31
 8012e7c:	f10a 0a01 	add.w	sl, sl, #1
 8012e80:	f88b 3000 	strb.w	r3, [fp]
 8012e84:	e6ff      	b.n	8012c86 <_dtoa_r+0x8fe>
 8012e86:	4615      	mov	r5, r2
 8012e88:	e79f      	b.n	8012dca <_dtoa_r+0xa42>
 8012e8a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8012ef0 <_dtoa_r+0xb68>
 8012e8e:	e007      	b.n	8012ea0 <_dtoa_r+0xb18>
 8012e90:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012e92:	f8df b060 	ldr.w	fp, [pc, #96]	; 8012ef4 <_dtoa_r+0xb6c>
 8012e96:	b11b      	cbz	r3, 8012ea0 <_dtoa_r+0xb18>
 8012e98:	f10b 0308 	add.w	r3, fp, #8
 8012e9c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012e9e:	6013      	str	r3, [r2, #0]
 8012ea0:	4658      	mov	r0, fp
 8012ea2:	b017      	add	sp, #92	; 0x5c
 8012ea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ea8:	9b06      	ldr	r3, [sp, #24]
 8012eaa:	2b01      	cmp	r3, #1
 8012eac:	f77f ae35 	ble.w	8012b1a <_dtoa_r+0x792>
 8012eb0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012eb2:	9307      	str	r3, [sp, #28]
 8012eb4:	e649      	b.n	8012b4a <_dtoa_r+0x7c2>
 8012eb6:	9b02      	ldr	r3, [sp, #8]
 8012eb8:	2b00      	cmp	r3, #0
 8012eba:	dc03      	bgt.n	8012ec4 <_dtoa_r+0xb3c>
 8012ebc:	9b06      	ldr	r3, [sp, #24]
 8012ebe:	2b02      	cmp	r3, #2
 8012ec0:	f73f aecc 	bgt.w	8012c5c <_dtoa_r+0x8d4>
 8012ec4:	465d      	mov	r5, fp
 8012ec6:	4639      	mov	r1, r7
 8012ec8:	9804      	ldr	r0, [sp, #16]
 8012eca:	f7ff f9d1 	bl	8012270 <quorem>
 8012ece:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8012ed2:	f805 8b01 	strb.w	r8, [r5], #1
 8012ed6:	9a02      	ldr	r2, [sp, #8]
 8012ed8:	eba5 030b 	sub.w	r3, r5, fp
 8012edc:	429a      	cmp	r2, r3
 8012ede:	ddb0      	ble.n	8012e42 <_dtoa_r+0xaba>
 8012ee0:	2300      	movs	r3, #0
 8012ee2:	220a      	movs	r2, #10
 8012ee4:	9904      	ldr	r1, [sp, #16]
 8012ee6:	4620      	mov	r0, r4
 8012ee8:	f000 fa50 	bl	801338c <__multadd>
 8012eec:	9004      	str	r0, [sp, #16]
 8012eee:	e7ea      	b.n	8012ec6 <_dtoa_r+0xb3e>
 8012ef0:	08016b9c 	.word	0x08016b9c
 8012ef4:	08016912 	.word	0x08016912

08012ef8 <__sflush_r>:
 8012ef8:	898a      	ldrh	r2, [r1, #12]
 8012efa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012efe:	4605      	mov	r5, r0
 8012f00:	0710      	lsls	r0, r2, #28
 8012f02:	460c      	mov	r4, r1
 8012f04:	d458      	bmi.n	8012fb8 <__sflush_r+0xc0>
 8012f06:	684b      	ldr	r3, [r1, #4]
 8012f08:	2b00      	cmp	r3, #0
 8012f0a:	dc05      	bgt.n	8012f18 <__sflush_r+0x20>
 8012f0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012f0e:	2b00      	cmp	r3, #0
 8012f10:	dc02      	bgt.n	8012f18 <__sflush_r+0x20>
 8012f12:	2000      	movs	r0, #0
 8012f14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012f1a:	2e00      	cmp	r6, #0
 8012f1c:	d0f9      	beq.n	8012f12 <__sflush_r+0x1a>
 8012f1e:	2300      	movs	r3, #0
 8012f20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012f24:	682f      	ldr	r7, [r5, #0]
 8012f26:	6a21      	ldr	r1, [r4, #32]
 8012f28:	602b      	str	r3, [r5, #0]
 8012f2a:	d032      	beq.n	8012f92 <__sflush_r+0x9a>
 8012f2c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012f2e:	89a3      	ldrh	r3, [r4, #12]
 8012f30:	075a      	lsls	r2, r3, #29
 8012f32:	d505      	bpl.n	8012f40 <__sflush_r+0x48>
 8012f34:	6863      	ldr	r3, [r4, #4]
 8012f36:	1ac0      	subs	r0, r0, r3
 8012f38:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012f3a:	b10b      	cbz	r3, 8012f40 <__sflush_r+0x48>
 8012f3c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012f3e:	1ac0      	subs	r0, r0, r3
 8012f40:	2300      	movs	r3, #0
 8012f42:	4602      	mov	r2, r0
 8012f44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012f46:	6a21      	ldr	r1, [r4, #32]
 8012f48:	4628      	mov	r0, r5
 8012f4a:	47b0      	blx	r6
 8012f4c:	1c43      	adds	r3, r0, #1
 8012f4e:	89a3      	ldrh	r3, [r4, #12]
 8012f50:	d106      	bne.n	8012f60 <__sflush_r+0x68>
 8012f52:	6829      	ldr	r1, [r5, #0]
 8012f54:	291d      	cmp	r1, #29
 8012f56:	d848      	bhi.n	8012fea <__sflush_r+0xf2>
 8012f58:	4a29      	ldr	r2, [pc, #164]	; (8013000 <__sflush_r+0x108>)
 8012f5a:	40ca      	lsrs	r2, r1
 8012f5c:	07d6      	lsls	r6, r2, #31
 8012f5e:	d544      	bpl.n	8012fea <__sflush_r+0xf2>
 8012f60:	2200      	movs	r2, #0
 8012f62:	6062      	str	r2, [r4, #4]
 8012f64:	04d9      	lsls	r1, r3, #19
 8012f66:	6922      	ldr	r2, [r4, #16]
 8012f68:	6022      	str	r2, [r4, #0]
 8012f6a:	d504      	bpl.n	8012f76 <__sflush_r+0x7e>
 8012f6c:	1c42      	adds	r2, r0, #1
 8012f6e:	d101      	bne.n	8012f74 <__sflush_r+0x7c>
 8012f70:	682b      	ldr	r3, [r5, #0]
 8012f72:	b903      	cbnz	r3, 8012f76 <__sflush_r+0x7e>
 8012f74:	6560      	str	r0, [r4, #84]	; 0x54
 8012f76:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012f78:	602f      	str	r7, [r5, #0]
 8012f7a:	2900      	cmp	r1, #0
 8012f7c:	d0c9      	beq.n	8012f12 <__sflush_r+0x1a>
 8012f7e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012f82:	4299      	cmp	r1, r3
 8012f84:	d002      	beq.n	8012f8c <__sflush_r+0x94>
 8012f86:	4628      	mov	r0, r5
 8012f88:	f000 fc9e 	bl	80138c8 <_free_r>
 8012f8c:	2000      	movs	r0, #0
 8012f8e:	6360      	str	r0, [r4, #52]	; 0x34
 8012f90:	e7c0      	b.n	8012f14 <__sflush_r+0x1c>
 8012f92:	2301      	movs	r3, #1
 8012f94:	4628      	mov	r0, r5
 8012f96:	47b0      	blx	r6
 8012f98:	1c41      	adds	r1, r0, #1
 8012f9a:	d1c8      	bne.n	8012f2e <__sflush_r+0x36>
 8012f9c:	682b      	ldr	r3, [r5, #0]
 8012f9e:	2b00      	cmp	r3, #0
 8012fa0:	d0c5      	beq.n	8012f2e <__sflush_r+0x36>
 8012fa2:	2b1d      	cmp	r3, #29
 8012fa4:	d001      	beq.n	8012faa <__sflush_r+0xb2>
 8012fa6:	2b16      	cmp	r3, #22
 8012fa8:	d101      	bne.n	8012fae <__sflush_r+0xb6>
 8012faa:	602f      	str	r7, [r5, #0]
 8012fac:	e7b1      	b.n	8012f12 <__sflush_r+0x1a>
 8012fae:	89a3      	ldrh	r3, [r4, #12]
 8012fb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012fb4:	81a3      	strh	r3, [r4, #12]
 8012fb6:	e7ad      	b.n	8012f14 <__sflush_r+0x1c>
 8012fb8:	690f      	ldr	r7, [r1, #16]
 8012fba:	2f00      	cmp	r7, #0
 8012fbc:	d0a9      	beq.n	8012f12 <__sflush_r+0x1a>
 8012fbe:	0793      	lsls	r3, r2, #30
 8012fc0:	680e      	ldr	r6, [r1, #0]
 8012fc2:	bf08      	it	eq
 8012fc4:	694b      	ldreq	r3, [r1, #20]
 8012fc6:	600f      	str	r7, [r1, #0]
 8012fc8:	bf18      	it	ne
 8012fca:	2300      	movne	r3, #0
 8012fcc:	eba6 0807 	sub.w	r8, r6, r7
 8012fd0:	608b      	str	r3, [r1, #8]
 8012fd2:	f1b8 0f00 	cmp.w	r8, #0
 8012fd6:	dd9c      	ble.n	8012f12 <__sflush_r+0x1a>
 8012fd8:	4643      	mov	r3, r8
 8012fda:	463a      	mov	r2, r7
 8012fdc:	6a21      	ldr	r1, [r4, #32]
 8012fde:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012fe0:	4628      	mov	r0, r5
 8012fe2:	47b0      	blx	r6
 8012fe4:	2800      	cmp	r0, #0
 8012fe6:	dc06      	bgt.n	8012ff6 <__sflush_r+0xfe>
 8012fe8:	89a3      	ldrh	r3, [r4, #12]
 8012fea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012fee:	81a3      	strh	r3, [r4, #12]
 8012ff0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012ff4:	e78e      	b.n	8012f14 <__sflush_r+0x1c>
 8012ff6:	4407      	add	r7, r0
 8012ff8:	eba8 0800 	sub.w	r8, r8, r0
 8012ffc:	e7e9      	b.n	8012fd2 <__sflush_r+0xda>
 8012ffe:	bf00      	nop
 8013000:	20400001 	.word	0x20400001

08013004 <_fflush_r>:
 8013004:	b538      	push	{r3, r4, r5, lr}
 8013006:	690b      	ldr	r3, [r1, #16]
 8013008:	4605      	mov	r5, r0
 801300a:	460c      	mov	r4, r1
 801300c:	b1db      	cbz	r3, 8013046 <_fflush_r+0x42>
 801300e:	b118      	cbz	r0, 8013018 <_fflush_r+0x14>
 8013010:	6983      	ldr	r3, [r0, #24]
 8013012:	b90b      	cbnz	r3, 8013018 <_fflush_r+0x14>
 8013014:	f000 f860 	bl	80130d8 <__sinit>
 8013018:	4b0c      	ldr	r3, [pc, #48]	; (801304c <_fflush_r+0x48>)
 801301a:	429c      	cmp	r4, r3
 801301c:	d109      	bne.n	8013032 <_fflush_r+0x2e>
 801301e:	686c      	ldr	r4, [r5, #4]
 8013020:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013024:	b17b      	cbz	r3, 8013046 <_fflush_r+0x42>
 8013026:	4621      	mov	r1, r4
 8013028:	4628      	mov	r0, r5
 801302a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801302e:	f7ff bf63 	b.w	8012ef8 <__sflush_r>
 8013032:	4b07      	ldr	r3, [pc, #28]	; (8013050 <_fflush_r+0x4c>)
 8013034:	429c      	cmp	r4, r3
 8013036:	d101      	bne.n	801303c <_fflush_r+0x38>
 8013038:	68ac      	ldr	r4, [r5, #8]
 801303a:	e7f1      	b.n	8013020 <_fflush_r+0x1c>
 801303c:	4b05      	ldr	r3, [pc, #20]	; (8013054 <_fflush_r+0x50>)
 801303e:	429c      	cmp	r4, r3
 8013040:	bf08      	it	eq
 8013042:	68ec      	ldreq	r4, [r5, #12]
 8013044:	e7ec      	b.n	8013020 <_fflush_r+0x1c>
 8013046:	2000      	movs	r0, #0
 8013048:	bd38      	pop	{r3, r4, r5, pc}
 801304a:	bf00      	nop
 801304c:	08016940 	.word	0x08016940
 8013050:	08016960 	.word	0x08016960
 8013054:	08016920 	.word	0x08016920

08013058 <std>:
 8013058:	2300      	movs	r3, #0
 801305a:	b510      	push	{r4, lr}
 801305c:	4604      	mov	r4, r0
 801305e:	e9c0 3300 	strd	r3, r3, [r0]
 8013062:	6083      	str	r3, [r0, #8]
 8013064:	8181      	strh	r1, [r0, #12]
 8013066:	6643      	str	r3, [r0, #100]	; 0x64
 8013068:	81c2      	strh	r2, [r0, #14]
 801306a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801306e:	6183      	str	r3, [r0, #24]
 8013070:	4619      	mov	r1, r3
 8013072:	2208      	movs	r2, #8
 8013074:	305c      	adds	r0, #92	; 0x5c
 8013076:	f7fe fb17 	bl	80116a8 <memset>
 801307a:	4b05      	ldr	r3, [pc, #20]	; (8013090 <std+0x38>)
 801307c:	6263      	str	r3, [r4, #36]	; 0x24
 801307e:	4b05      	ldr	r3, [pc, #20]	; (8013094 <std+0x3c>)
 8013080:	62a3      	str	r3, [r4, #40]	; 0x28
 8013082:	4b05      	ldr	r3, [pc, #20]	; (8013098 <std+0x40>)
 8013084:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013086:	4b05      	ldr	r3, [pc, #20]	; (801309c <std+0x44>)
 8013088:	6224      	str	r4, [r4, #32]
 801308a:	6323      	str	r3, [r4, #48]	; 0x30
 801308c:	bd10      	pop	{r4, pc}
 801308e:	bf00      	nop
 8013090:	08013f5d 	.word	0x08013f5d
 8013094:	08013f7f 	.word	0x08013f7f
 8013098:	08013fb7 	.word	0x08013fb7
 801309c:	08013fdb 	.word	0x08013fdb

080130a0 <_cleanup_r>:
 80130a0:	4901      	ldr	r1, [pc, #4]	; (80130a8 <_cleanup_r+0x8>)
 80130a2:	f000 b885 	b.w	80131b0 <_fwalk_reent>
 80130a6:	bf00      	nop
 80130a8:	08013005 	.word	0x08013005

080130ac <__sfmoreglue>:
 80130ac:	b570      	push	{r4, r5, r6, lr}
 80130ae:	1e4a      	subs	r2, r1, #1
 80130b0:	2568      	movs	r5, #104	; 0x68
 80130b2:	4355      	muls	r5, r2
 80130b4:	460e      	mov	r6, r1
 80130b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80130ba:	f000 fc53 	bl	8013964 <_malloc_r>
 80130be:	4604      	mov	r4, r0
 80130c0:	b140      	cbz	r0, 80130d4 <__sfmoreglue+0x28>
 80130c2:	2100      	movs	r1, #0
 80130c4:	e9c0 1600 	strd	r1, r6, [r0]
 80130c8:	300c      	adds	r0, #12
 80130ca:	60a0      	str	r0, [r4, #8]
 80130cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80130d0:	f7fe faea 	bl	80116a8 <memset>
 80130d4:	4620      	mov	r0, r4
 80130d6:	bd70      	pop	{r4, r5, r6, pc}

080130d8 <__sinit>:
 80130d8:	6983      	ldr	r3, [r0, #24]
 80130da:	b510      	push	{r4, lr}
 80130dc:	4604      	mov	r4, r0
 80130de:	bb33      	cbnz	r3, 801312e <__sinit+0x56>
 80130e0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80130e4:	6503      	str	r3, [r0, #80]	; 0x50
 80130e6:	4b12      	ldr	r3, [pc, #72]	; (8013130 <__sinit+0x58>)
 80130e8:	4a12      	ldr	r2, [pc, #72]	; (8013134 <__sinit+0x5c>)
 80130ea:	681b      	ldr	r3, [r3, #0]
 80130ec:	6282      	str	r2, [r0, #40]	; 0x28
 80130ee:	4298      	cmp	r0, r3
 80130f0:	bf04      	itt	eq
 80130f2:	2301      	moveq	r3, #1
 80130f4:	6183      	streq	r3, [r0, #24]
 80130f6:	f000 f81f 	bl	8013138 <__sfp>
 80130fa:	6060      	str	r0, [r4, #4]
 80130fc:	4620      	mov	r0, r4
 80130fe:	f000 f81b 	bl	8013138 <__sfp>
 8013102:	60a0      	str	r0, [r4, #8]
 8013104:	4620      	mov	r0, r4
 8013106:	f000 f817 	bl	8013138 <__sfp>
 801310a:	2200      	movs	r2, #0
 801310c:	60e0      	str	r0, [r4, #12]
 801310e:	2104      	movs	r1, #4
 8013110:	6860      	ldr	r0, [r4, #4]
 8013112:	f7ff ffa1 	bl	8013058 <std>
 8013116:	2201      	movs	r2, #1
 8013118:	2109      	movs	r1, #9
 801311a:	68a0      	ldr	r0, [r4, #8]
 801311c:	f7ff ff9c 	bl	8013058 <std>
 8013120:	2202      	movs	r2, #2
 8013122:	2112      	movs	r1, #18
 8013124:	68e0      	ldr	r0, [r4, #12]
 8013126:	f7ff ff97 	bl	8013058 <std>
 801312a:	2301      	movs	r3, #1
 801312c:	61a3      	str	r3, [r4, #24]
 801312e:	bd10      	pop	{r4, pc}
 8013130:	080168dc 	.word	0x080168dc
 8013134:	080130a1 	.word	0x080130a1

08013138 <__sfp>:
 8013138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801313a:	4b1b      	ldr	r3, [pc, #108]	; (80131a8 <__sfp+0x70>)
 801313c:	681e      	ldr	r6, [r3, #0]
 801313e:	69b3      	ldr	r3, [r6, #24]
 8013140:	4607      	mov	r7, r0
 8013142:	b913      	cbnz	r3, 801314a <__sfp+0x12>
 8013144:	4630      	mov	r0, r6
 8013146:	f7ff ffc7 	bl	80130d8 <__sinit>
 801314a:	3648      	adds	r6, #72	; 0x48
 801314c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013150:	3b01      	subs	r3, #1
 8013152:	d503      	bpl.n	801315c <__sfp+0x24>
 8013154:	6833      	ldr	r3, [r6, #0]
 8013156:	b133      	cbz	r3, 8013166 <__sfp+0x2e>
 8013158:	6836      	ldr	r6, [r6, #0]
 801315a:	e7f7      	b.n	801314c <__sfp+0x14>
 801315c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013160:	b16d      	cbz	r5, 801317e <__sfp+0x46>
 8013162:	3468      	adds	r4, #104	; 0x68
 8013164:	e7f4      	b.n	8013150 <__sfp+0x18>
 8013166:	2104      	movs	r1, #4
 8013168:	4638      	mov	r0, r7
 801316a:	f7ff ff9f 	bl	80130ac <__sfmoreglue>
 801316e:	6030      	str	r0, [r6, #0]
 8013170:	2800      	cmp	r0, #0
 8013172:	d1f1      	bne.n	8013158 <__sfp+0x20>
 8013174:	230c      	movs	r3, #12
 8013176:	603b      	str	r3, [r7, #0]
 8013178:	4604      	mov	r4, r0
 801317a:	4620      	mov	r0, r4
 801317c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801317e:	4b0b      	ldr	r3, [pc, #44]	; (80131ac <__sfp+0x74>)
 8013180:	6665      	str	r5, [r4, #100]	; 0x64
 8013182:	e9c4 5500 	strd	r5, r5, [r4]
 8013186:	60a5      	str	r5, [r4, #8]
 8013188:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801318c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8013190:	2208      	movs	r2, #8
 8013192:	4629      	mov	r1, r5
 8013194:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013198:	f7fe fa86 	bl	80116a8 <memset>
 801319c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80131a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80131a4:	e7e9      	b.n	801317a <__sfp+0x42>
 80131a6:	bf00      	nop
 80131a8:	080168dc 	.word	0x080168dc
 80131ac:	ffff0001 	.word	0xffff0001

080131b0 <_fwalk_reent>:
 80131b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80131b4:	4680      	mov	r8, r0
 80131b6:	4689      	mov	r9, r1
 80131b8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80131bc:	2600      	movs	r6, #0
 80131be:	b914      	cbnz	r4, 80131c6 <_fwalk_reent+0x16>
 80131c0:	4630      	mov	r0, r6
 80131c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80131c6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80131ca:	3f01      	subs	r7, #1
 80131cc:	d501      	bpl.n	80131d2 <_fwalk_reent+0x22>
 80131ce:	6824      	ldr	r4, [r4, #0]
 80131d0:	e7f5      	b.n	80131be <_fwalk_reent+0xe>
 80131d2:	89ab      	ldrh	r3, [r5, #12]
 80131d4:	2b01      	cmp	r3, #1
 80131d6:	d907      	bls.n	80131e8 <_fwalk_reent+0x38>
 80131d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80131dc:	3301      	adds	r3, #1
 80131de:	d003      	beq.n	80131e8 <_fwalk_reent+0x38>
 80131e0:	4629      	mov	r1, r5
 80131e2:	4640      	mov	r0, r8
 80131e4:	47c8      	blx	r9
 80131e6:	4306      	orrs	r6, r0
 80131e8:	3568      	adds	r5, #104	; 0x68
 80131ea:	e7ee      	b.n	80131ca <_fwalk_reent+0x1a>

080131ec <_localeconv_r>:
 80131ec:	4b04      	ldr	r3, [pc, #16]	; (8013200 <_localeconv_r+0x14>)
 80131ee:	681b      	ldr	r3, [r3, #0]
 80131f0:	6a18      	ldr	r0, [r3, #32]
 80131f2:	4b04      	ldr	r3, [pc, #16]	; (8013204 <_localeconv_r+0x18>)
 80131f4:	2800      	cmp	r0, #0
 80131f6:	bf08      	it	eq
 80131f8:	4618      	moveq	r0, r3
 80131fa:	30f0      	adds	r0, #240	; 0xf0
 80131fc:	4770      	bx	lr
 80131fe:	bf00      	nop
 8013200:	20001eb4 	.word	0x20001eb4
 8013204:	20001f18 	.word	0x20001f18

08013208 <__swhatbuf_r>:
 8013208:	b570      	push	{r4, r5, r6, lr}
 801320a:	460e      	mov	r6, r1
 801320c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013210:	2900      	cmp	r1, #0
 8013212:	b096      	sub	sp, #88	; 0x58
 8013214:	4614      	mov	r4, r2
 8013216:	461d      	mov	r5, r3
 8013218:	da07      	bge.n	801322a <__swhatbuf_r+0x22>
 801321a:	2300      	movs	r3, #0
 801321c:	602b      	str	r3, [r5, #0]
 801321e:	89b3      	ldrh	r3, [r6, #12]
 8013220:	061a      	lsls	r2, r3, #24
 8013222:	d410      	bmi.n	8013246 <__swhatbuf_r+0x3e>
 8013224:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013228:	e00e      	b.n	8013248 <__swhatbuf_r+0x40>
 801322a:	466a      	mov	r2, sp
 801322c:	f000 fefc 	bl	8014028 <_fstat_r>
 8013230:	2800      	cmp	r0, #0
 8013232:	dbf2      	blt.n	801321a <__swhatbuf_r+0x12>
 8013234:	9a01      	ldr	r2, [sp, #4]
 8013236:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801323a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801323e:	425a      	negs	r2, r3
 8013240:	415a      	adcs	r2, r3
 8013242:	602a      	str	r2, [r5, #0]
 8013244:	e7ee      	b.n	8013224 <__swhatbuf_r+0x1c>
 8013246:	2340      	movs	r3, #64	; 0x40
 8013248:	2000      	movs	r0, #0
 801324a:	6023      	str	r3, [r4, #0]
 801324c:	b016      	add	sp, #88	; 0x58
 801324e:	bd70      	pop	{r4, r5, r6, pc}

08013250 <__smakebuf_r>:
 8013250:	898b      	ldrh	r3, [r1, #12]
 8013252:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013254:	079d      	lsls	r5, r3, #30
 8013256:	4606      	mov	r6, r0
 8013258:	460c      	mov	r4, r1
 801325a:	d507      	bpl.n	801326c <__smakebuf_r+0x1c>
 801325c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013260:	6023      	str	r3, [r4, #0]
 8013262:	6123      	str	r3, [r4, #16]
 8013264:	2301      	movs	r3, #1
 8013266:	6163      	str	r3, [r4, #20]
 8013268:	b002      	add	sp, #8
 801326a:	bd70      	pop	{r4, r5, r6, pc}
 801326c:	ab01      	add	r3, sp, #4
 801326e:	466a      	mov	r2, sp
 8013270:	f7ff ffca 	bl	8013208 <__swhatbuf_r>
 8013274:	9900      	ldr	r1, [sp, #0]
 8013276:	4605      	mov	r5, r0
 8013278:	4630      	mov	r0, r6
 801327a:	f000 fb73 	bl	8013964 <_malloc_r>
 801327e:	b948      	cbnz	r0, 8013294 <__smakebuf_r+0x44>
 8013280:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013284:	059a      	lsls	r2, r3, #22
 8013286:	d4ef      	bmi.n	8013268 <__smakebuf_r+0x18>
 8013288:	f023 0303 	bic.w	r3, r3, #3
 801328c:	f043 0302 	orr.w	r3, r3, #2
 8013290:	81a3      	strh	r3, [r4, #12]
 8013292:	e7e3      	b.n	801325c <__smakebuf_r+0xc>
 8013294:	4b0d      	ldr	r3, [pc, #52]	; (80132cc <__smakebuf_r+0x7c>)
 8013296:	62b3      	str	r3, [r6, #40]	; 0x28
 8013298:	89a3      	ldrh	r3, [r4, #12]
 801329a:	6020      	str	r0, [r4, #0]
 801329c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80132a0:	81a3      	strh	r3, [r4, #12]
 80132a2:	9b00      	ldr	r3, [sp, #0]
 80132a4:	6163      	str	r3, [r4, #20]
 80132a6:	9b01      	ldr	r3, [sp, #4]
 80132a8:	6120      	str	r0, [r4, #16]
 80132aa:	b15b      	cbz	r3, 80132c4 <__smakebuf_r+0x74>
 80132ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80132b0:	4630      	mov	r0, r6
 80132b2:	f000 fecb 	bl	801404c <_isatty_r>
 80132b6:	b128      	cbz	r0, 80132c4 <__smakebuf_r+0x74>
 80132b8:	89a3      	ldrh	r3, [r4, #12]
 80132ba:	f023 0303 	bic.w	r3, r3, #3
 80132be:	f043 0301 	orr.w	r3, r3, #1
 80132c2:	81a3      	strh	r3, [r4, #12]
 80132c4:	89a3      	ldrh	r3, [r4, #12]
 80132c6:	431d      	orrs	r5, r3
 80132c8:	81a5      	strh	r5, [r4, #12]
 80132ca:	e7cd      	b.n	8013268 <__smakebuf_r+0x18>
 80132cc:	080130a1 	.word	0x080130a1

080132d0 <malloc>:
 80132d0:	4b02      	ldr	r3, [pc, #8]	; (80132dc <malloc+0xc>)
 80132d2:	4601      	mov	r1, r0
 80132d4:	6818      	ldr	r0, [r3, #0]
 80132d6:	f000 bb45 	b.w	8013964 <_malloc_r>
 80132da:	bf00      	nop
 80132dc:	20001eb4 	.word	0x20001eb4

080132e0 <memcpy>:
 80132e0:	b510      	push	{r4, lr}
 80132e2:	1e43      	subs	r3, r0, #1
 80132e4:	440a      	add	r2, r1
 80132e6:	4291      	cmp	r1, r2
 80132e8:	d100      	bne.n	80132ec <memcpy+0xc>
 80132ea:	bd10      	pop	{r4, pc}
 80132ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80132f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80132f4:	e7f7      	b.n	80132e6 <memcpy+0x6>

080132f6 <_Balloc>:
 80132f6:	b570      	push	{r4, r5, r6, lr}
 80132f8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80132fa:	4604      	mov	r4, r0
 80132fc:	460e      	mov	r6, r1
 80132fe:	b93d      	cbnz	r5, 8013310 <_Balloc+0x1a>
 8013300:	2010      	movs	r0, #16
 8013302:	f7ff ffe5 	bl	80132d0 <malloc>
 8013306:	6260      	str	r0, [r4, #36]	; 0x24
 8013308:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801330c:	6005      	str	r5, [r0, #0]
 801330e:	60c5      	str	r5, [r0, #12]
 8013310:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8013312:	68eb      	ldr	r3, [r5, #12]
 8013314:	b183      	cbz	r3, 8013338 <_Balloc+0x42>
 8013316:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013318:	68db      	ldr	r3, [r3, #12]
 801331a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801331e:	b9b8      	cbnz	r0, 8013350 <_Balloc+0x5a>
 8013320:	2101      	movs	r1, #1
 8013322:	fa01 f506 	lsl.w	r5, r1, r6
 8013326:	1d6a      	adds	r2, r5, #5
 8013328:	0092      	lsls	r2, r2, #2
 801332a:	4620      	mov	r0, r4
 801332c:	f000 fabe 	bl	80138ac <_calloc_r>
 8013330:	b160      	cbz	r0, 801334c <_Balloc+0x56>
 8013332:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8013336:	e00e      	b.n	8013356 <_Balloc+0x60>
 8013338:	2221      	movs	r2, #33	; 0x21
 801333a:	2104      	movs	r1, #4
 801333c:	4620      	mov	r0, r4
 801333e:	f000 fab5 	bl	80138ac <_calloc_r>
 8013342:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013344:	60e8      	str	r0, [r5, #12]
 8013346:	68db      	ldr	r3, [r3, #12]
 8013348:	2b00      	cmp	r3, #0
 801334a:	d1e4      	bne.n	8013316 <_Balloc+0x20>
 801334c:	2000      	movs	r0, #0
 801334e:	bd70      	pop	{r4, r5, r6, pc}
 8013350:	6802      	ldr	r2, [r0, #0]
 8013352:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8013356:	2300      	movs	r3, #0
 8013358:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801335c:	e7f7      	b.n	801334e <_Balloc+0x58>

0801335e <_Bfree>:
 801335e:	b570      	push	{r4, r5, r6, lr}
 8013360:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8013362:	4606      	mov	r6, r0
 8013364:	460d      	mov	r5, r1
 8013366:	b93c      	cbnz	r4, 8013378 <_Bfree+0x1a>
 8013368:	2010      	movs	r0, #16
 801336a:	f7ff ffb1 	bl	80132d0 <malloc>
 801336e:	6270      	str	r0, [r6, #36]	; 0x24
 8013370:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013374:	6004      	str	r4, [r0, #0]
 8013376:	60c4      	str	r4, [r0, #12]
 8013378:	b13d      	cbz	r5, 801338a <_Bfree+0x2c>
 801337a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801337c:	686a      	ldr	r2, [r5, #4]
 801337e:	68db      	ldr	r3, [r3, #12]
 8013380:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013384:	6029      	str	r1, [r5, #0]
 8013386:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 801338a:	bd70      	pop	{r4, r5, r6, pc}

0801338c <__multadd>:
 801338c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013390:	690d      	ldr	r5, [r1, #16]
 8013392:	461f      	mov	r7, r3
 8013394:	4606      	mov	r6, r0
 8013396:	460c      	mov	r4, r1
 8013398:	f101 0c14 	add.w	ip, r1, #20
 801339c:	2300      	movs	r3, #0
 801339e:	f8dc 0000 	ldr.w	r0, [ip]
 80133a2:	b281      	uxth	r1, r0
 80133a4:	fb02 7101 	mla	r1, r2, r1, r7
 80133a8:	0c0f      	lsrs	r7, r1, #16
 80133aa:	0c00      	lsrs	r0, r0, #16
 80133ac:	fb02 7000 	mla	r0, r2, r0, r7
 80133b0:	b289      	uxth	r1, r1
 80133b2:	3301      	adds	r3, #1
 80133b4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80133b8:	429d      	cmp	r5, r3
 80133ba:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80133be:	f84c 1b04 	str.w	r1, [ip], #4
 80133c2:	dcec      	bgt.n	801339e <__multadd+0x12>
 80133c4:	b1d7      	cbz	r7, 80133fc <__multadd+0x70>
 80133c6:	68a3      	ldr	r3, [r4, #8]
 80133c8:	42ab      	cmp	r3, r5
 80133ca:	dc12      	bgt.n	80133f2 <__multadd+0x66>
 80133cc:	6861      	ldr	r1, [r4, #4]
 80133ce:	4630      	mov	r0, r6
 80133d0:	3101      	adds	r1, #1
 80133d2:	f7ff ff90 	bl	80132f6 <_Balloc>
 80133d6:	6922      	ldr	r2, [r4, #16]
 80133d8:	3202      	adds	r2, #2
 80133da:	f104 010c 	add.w	r1, r4, #12
 80133de:	4680      	mov	r8, r0
 80133e0:	0092      	lsls	r2, r2, #2
 80133e2:	300c      	adds	r0, #12
 80133e4:	f7ff ff7c 	bl	80132e0 <memcpy>
 80133e8:	4621      	mov	r1, r4
 80133ea:	4630      	mov	r0, r6
 80133ec:	f7ff ffb7 	bl	801335e <_Bfree>
 80133f0:	4644      	mov	r4, r8
 80133f2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80133f6:	3501      	adds	r5, #1
 80133f8:	615f      	str	r7, [r3, #20]
 80133fa:	6125      	str	r5, [r4, #16]
 80133fc:	4620      	mov	r0, r4
 80133fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013402 <__hi0bits>:
 8013402:	0c02      	lsrs	r2, r0, #16
 8013404:	0412      	lsls	r2, r2, #16
 8013406:	4603      	mov	r3, r0
 8013408:	b9b2      	cbnz	r2, 8013438 <__hi0bits+0x36>
 801340a:	0403      	lsls	r3, r0, #16
 801340c:	2010      	movs	r0, #16
 801340e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8013412:	bf04      	itt	eq
 8013414:	021b      	lsleq	r3, r3, #8
 8013416:	3008      	addeq	r0, #8
 8013418:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801341c:	bf04      	itt	eq
 801341e:	011b      	lsleq	r3, r3, #4
 8013420:	3004      	addeq	r0, #4
 8013422:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8013426:	bf04      	itt	eq
 8013428:	009b      	lsleq	r3, r3, #2
 801342a:	3002      	addeq	r0, #2
 801342c:	2b00      	cmp	r3, #0
 801342e:	db06      	blt.n	801343e <__hi0bits+0x3c>
 8013430:	005b      	lsls	r3, r3, #1
 8013432:	d503      	bpl.n	801343c <__hi0bits+0x3a>
 8013434:	3001      	adds	r0, #1
 8013436:	4770      	bx	lr
 8013438:	2000      	movs	r0, #0
 801343a:	e7e8      	b.n	801340e <__hi0bits+0xc>
 801343c:	2020      	movs	r0, #32
 801343e:	4770      	bx	lr

08013440 <__lo0bits>:
 8013440:	6803      	ldr	r3, [r0, #0]
 8013442:	f013 0207 	ands.w	r2, r3, #7
 8013446:	4601      	mov	r1, r0
 8013448:	d00b      	beq.n	8013462 <__lo0bits+0x22>
 801344a:	07da      	lsls	r2, r3, #31
 801344c:	d423      	bmi.n	8013496 <__lo0bits+0x56>
 801344e:	0798      	lsls	r0, r3, #30
 8013450:	bf49      	itett	mi
 8013452:	085b      	lsrmi	r3, r3, #1
 8013454:	089b      	lsrpl	r3, r3, #2
 8013456:	2001      	movmi	r0, #1
 8013458:	600b      	strmi	r3, [r1, #0]
 801345a:	bf5c      	itt	pl
 801345c:	600b      	strpl	r3, [r1, #0]
 801345e:	2002      	movpl	r0, #2
 8013460:	4770      	bx	lr
 8013462:	b298      	uxth	r0, r3
 8013464:	b9a8      	cbnz	r0, 8013492 <__lo0bits+0x52>
 8013466:	0c1b      	lsrs	r3, r3, #16
 8013468:	2010      	movs	r0, #16
 801346a:	f013 0fff 	tst.w	r3, #255	; 0xff
 801346e:	bf04      	itt	eq
 8013470:	0a1b      	lsreq	r3, r3, #8
 8013472:	3008      	addeq	r0, #8
 8013474:	071a      	lsls	r2, r3, #28
 8013476:	bf04      	itt	eq
 8013478:	091b      	lsreq	r3, r3, #4
 801347a:	3004      	addeq	r0, #4
 801347c:	079a      	lsls	r2, r3, #30
 801347e:	bf04      	itt	eq
 8013480:	089b      	lsreq	r3, r3, #2
 8013482:	3002      	addeq	r0, #2
 8013484:	07da      	lsls	r2, r3, #31
 8013486:	d402      	bmi.n	801348e <__lo0bits+0x4e>
 8013488:	085b      	lsrs	r3, r3, #1
 801348a:	d006      	beq.n	801349a <__lo0bits+0x5a>
 801348c:	3001      	adds	r0, #1
 801348e:	600b      	str	r3, [r1, #0]
 8013490:	4770      	bx	lr
 8013492:	4610      	mov	r0, r2
 8013494:	e7e9      	b.n	801346a <__lo0bits+0x2a>
 8013496:	2000      	movs	r0, #0
 8013498:	4770      	bx	lr
 801349a:	2020      	movs	r0, #32
 801349c:	4770      	bx	lr

0801349e <__i2b>:
 801349e:	b510      	push	{r4, lr}
 80134a0:	460c      	mov	r4, r1
 80134a2:	2101      	movs	r1, #1
 80134a4:	f7ff ff27 	bl	80132f6 <_Balloc>
 80134a8:	2201      	movs	r2, #1
 80134aa:	6144      	str	r4, [r0, #20]
 80134ac:	6102      	str	r2, [r0, #16]
 80134ae:	bd10      	pop	{r4, pc}

080134b0 <__multiply>:
 80134b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134b4:	4614      	mov	r4, r2
 80134b6:	690a      	ldr	r2, [r1, #16]
 80134b8:	6923      	ldr	r3, [r4, #16]
 80134ba:	429a      	cmp	r2, r3
 80134bc:	bfb8      	it	lt
 80134be:	460b      	movlt	r3, r1
 80134c0:	4688      	mov	r8, r1
 80134c2:	bfbc      	itt	lt
 80134c4:	46a0      	movlt	r8, r4
 80134c6:	461c      	movlt	r4, r3
 80134c8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80134cc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80134d0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80134d4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80134d8:	eb07 0609 	add.w	r6, r7, r9
 80134dc:	42b3      	cmp	r3, r6
 80134de:	bfb8      	it	lt
 80134e0:	3101      	addlt	r1, #1
 80134e2:	f7ff ff08 	bl	80132f6 <_Balloc>
 80134e6:	f100 0514 	add.w	r5, r0, #20
 80134ea:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80134ee:	462b      	mov	r3, r5
 80134f0:	2200      	movs	r2, #0
 80134f2:	4573      	cmp	r3, lr
 80134f4:	d316      	bcc.n	8013524 <__multiply+0x74>
 80134f6:	f104 0214 	add.w	r2, r4, #20
 80134fa:	f108 0114 	add.w	r1, r8, #20
 80134fe:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8013502:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8013506:	9300      	str	r3, [sp, #0]
 8013508:	9b00      	ldr	r3, [sp, #0]
 801350a:	9201      	str	r2, [sp, #4]
 801350c:	4293      	cmp	r3, r2
 801350e:	d80c      	bhi.n	801352a <__multiply+0x7a>
 8013510:	2e00      	cmp	r6, #0
 8013512:	dd03      	ble.n	801351c <__multiply+0x6c>
 8013514:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8013518:	2b00      	cmp	r3, #0
 801351a:	d05d      	beq.n	80135d8 <__multiply+0x128>
 801351c:	6106      	str	r6, [r0, #16]
 801351e:	b003      	add	sp, #12
 8013520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013524:	f843 2b04 	str.w	r2, [r3], #4
 8013528:	e7e3      	b.n	80134f2 <__multiply+0x42>
 801352a:	f8b2 b000 	ldrh.w	fp, [r2]
 801352e:	f1bb 0f00 	cmp.w	fp, #0
 8013532:	d023      	beq.n	801357c <__multiply+0xcc>
 8013534:	4689      	mov	r9, r1
 8013536:	46ac      	mov	ip, r5
 8013538:	f04f 0800 	mov.w	r8, #0
 801353c:	f859 4b04 	ldr.w	r4, [r9], #4
 8013540:	f8dc a000 	ldr.w	sl, [ip]
 8013544:	b2a3      	uxth	r3, r4
 8013546:	fa1f fa8a 	uxth.w	sl, sl
 801354a:	fb0b a303 	mla	r3, fp, r3, sl
 801354e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8013552:	f8dc 4000 	ldr.w	r4, [ip]
 8013556:	4443      	add	r3, r8
 8013558:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801355c:	fb0b 840a 	mla	r4, fp, sl, r8
 8013560:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8013564:	46e2      	mov	sl, ip
 8013566:	b29b      	uxth	r3, r3
 8013568:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801356c:	454f      	cmp	r7, r9
 801356e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8013572:	f84a 3b04 	str.w	r3, [sl], #4
 8013576:	d82b      	bhi.n	80135d0 <__multiply+0x120>
 8013578:	f8cc 8004 	str.w	r8, [ip, #4]
 801357c:	9b01      	ldr	r3, [sp, #4]
 801357e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8013582:	3204      	adds	r2, #4
 8013584:	f1ba 0f00 	cmp.w	sl, #0
 8013588:	d020      	beq.n	80135cc <__multiply+0x11c>
 801358a:	682b      	ldr	r3, [r5, #0]
 801358c:	4689      	mov	r9, r1
 801358e:	46a8      	mov	r8, r5
 8013590:	f04f 0b00 	mov.w	fp, #0
 8013594:	f8b9 c000 	ldrh.w	ip, [r9]
 8013598:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801359c:	fb0a 440c 	mla	r4, sl, ip, r4
 80135a0:	445c      	add	r4, fp
 80135a2:	46c4      	mov	ip, r8
 80135a4:	b29b      	uxth	r3, r3
 80135a6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80135aa:	f84c 3b04 	str.w	r3, [ip], #4
 80135ae:	f859 3b04 	ldr.w	r3, [r9], #4
 80135b2:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80135b6:	0c1b      	lsrs	r3, r3, #16
 80135b8:	fb0a b303 	mla	r3, sl, r3, fp
 80135bc:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80135c0:	454f      	cmp	r7, r9
 80135c2:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80135c6:	d805      	bhi.n	80135d4 <__multiply+0x124>
 80135c8:	f8c8 3004 	str.w	r3, [r8, #4]
 80135cc:	3504      	adds	r5, #4
 80135ce:	e79b      	b.n	8013508 <__multiply+0x58>
 80135d0:	46d4      	mov	ip, sl
 80135d2:	e7b3      	b.n	801353c <__multiply+0x8c>
 80135d4:	46e0      	mov	r8, ip
 80135d6:	e7dd      	b.n	8013594 <__multiply+0xe4>
 80135d8:	3e01      	subs	r6, #1
 80135da:	e799      	b.n	8013510 <__multiply+0x60>

080135dc <__pow5mult>:
 80135dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80135e0:	4615      	mov	r5, r2
 80135e2:	f012 0203 	ands.w	r2, r2, #3
 80135e6:	4606      	mov	r6, r0
 80135e8:	460f      	mov	r7, r1
 80135ea:	d007      	beq.n	80135fc <__pow5mult+0x20>
 80135ec:	3a01      	subs	r2, #1
 80135ee:	4c21      	ldr	r4, [pc, #132]	; (8013674 <__pow5mult+0x98>)
 80135f0:	2300      	movs	r3, #0
 80135f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80135f6:	f7ff fec9 	bl	801338c <__multadd>
 80135fa:	4607      	mov	r7, r0
 80135fc:	10ad      	asrs	r5, r5, #2
 80135fe:	d035      	beq.n	801366c <__pow5mult+0x90>
 8013600:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8013602:	b93c      	cbnz	r4, 8013614 <__pow5mult+0x38>
 8013604:	2010      	movs	r0, #16
 8013606:	f7ff fe63 	bl	80132d0 <malloc>
 801360a:	6270      	str	r0, [r6, #36]	; 0x24
 801360c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013610:	6004      	str	r4, [r0, #0]
 8013612:	60c4      	str	r4, [r0, #12]
 8013614:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8013618:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801361c:	b94c      	cbnz	r4, 8013632 <__pow5mult+0x56>
 801361e:	f240 2171 	movw	r1, #625	; 0x271
 8013622:	4630      	mov	r0, r6
 8013624:	f7ff ff3b 	bl	801349e <__i2b>
 8013628:	2300      	movs	r3, #0
 801362a:	f8c8 0008 	str.w	r0, [r8, #8]
 801362e:	4604      	mov	r4, r0
 8013630:	6003      	str	r3, [r0, #0]
 8013632:	f04f 0800 	mov.w	r8, #0
 8013636:	07eb      	lsls	r3, r5, #31
 8013638:	d50a      	bpl.n	8013650 <__pow5mult+0x74>
 801363a:	4639      	mov	r1, r7
 801363c:	4622      	mov	r2, r4
 801363e:	4630      	mov	r0, r6
 8013640:	f7ff ff36 	bl	80134b0 <__multiply>
 8013644:	4639      	mov	r1, r7
 8013646:	4681      	mov	r9, r0
 8013648:	4630      	mov	r0, r6
 801364a:	f7ff fe88 	bl	801335e <_Bfree>
 801364e:	464f      	mov	r7, r9
 8013650:	106d      	asrs	r5, r5, #1
 8013652:	d00b      	beq.n	801366c <__pow5mult+0x90>
 8013654:	6820      	ldr	r0, [r4, #0]
 8013656:	b938      	cbnz	r0, 8013668 <__pow5mult+0x8c>
 8013658:	4622      	mov	r2, r4
 801365a:	4621      	mov	r1, r4
 801365c:	4630      	mov	r0, r6
 801365e:	f7ff ff27 	bl	80134b0 <__multiply>
 8013662:	6020      	str	r0, [r4, #0]
 8013664:	f8c0 8000 	str.w	r8, [r0]
 8013668:	4604      	mov	r4, r0
 801366a:	e7e4      	b.n	8013636 <__pow5mult+0x5a>
 801366c:	4638      	mov	r0, r7
 801366e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013672:	bf00      	nop
 8013674:	08016a70 	.word	0x08016a70

08013678 <__lshift>:
 8013678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801367c:	460c      	mov	r4, r1
 801367e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013682:	6923      	ldr	r3, [r4, #16]
 8013684:	6849      	ldr	r1, [r1, #4]
 8013686:	eb0a 0903 	add.w	r9, sl, r3
 801368a:	68a3      	ldr	r3, [r4, #8]
 801368c:	4607      	mov	r7, r0
 801368e:	4616      	mov	r6, r2
 8013690:	f109 0501 	add.w	r5, r9, #1
 8013694:	42ab      	cmp	r3, r5
 8013696:	db32      	blt.n	80136fe <__lshift+0x86>
 8013698:	4638      	mov	r0, r7
 801369a:	f7ff fe2c 	bl	80132f6 <_Balloc>
 801369e:	2300      	movs	r3, #0
 80136a0:	4680      	mov	r8, r0
 80136a2:	f100 0114 	add.w	r1, r0, #20
 80136a6:	461a      	mov	r2, r3
 80136a8:	4553      	cmp	r3, sl
 80136aa:	db2b      	blt.n	8013704 <__lshift+0x8c>
 80136ac:	6920      	ldr	r0, [r4, #16]
 80136ae:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80136b2:	f104 0314 	add.w	r3, r4, #20
 80136b6:	f016 021f 	ands.w	r2, r6, #31
 80136ba:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80136be:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80136c2:	d025      	beq.n	8013710 <__lshift+0x98>
 80136c4:	f1c2 0e20 	rsb	lr, r2, #32
 80136c8:	2000      	movs	r0, #0
 80136ca:	681e      	ldr	r6, [r3, #0]
 80136cc:	468a      	mov	sl, r1
 80136ce:	4096      	lsls	r6, r2
 80136d0:	4330      	orrs	r0, r6
 80136d2:	f84a 0b04 	str.w	r0, [sl], #4
 80136d6:	f853 0b04 	ldr.w	r0, [r3], #4
 80136da:	459c      	cmp	ip, r3
 80136dc:	fa20 f00e 	lsr.w	r0, r0, lr
 80136e0:	d814      	bhi.n	801370c <__lshift+0x94>
 80136e2:	6048      	str	r0, [r1, #4]
 80136e4:	b108      	cbz	r0, 80136ea <__lshift+0x72>
 80136e6:	f109 0502 	add.w	r5, r9, #2
 80136ea:	3d01      	subs	r5, #1
 80136ec:	4638      	mov	r0, r7
 80136ee:	f8c8 5010 	str.w	r5, [r8, #16]
 80136f2:	4621      	mov	r1, r4
 80136f4:	f7ff fe33 	bl	801335e <_Bfree>
 80136f8:	4640      	mov	r0, r8
 80136fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80136fe:	3101      	adds	r1, #1
 8013700:	005b      	lsls	r3, r3, #1
 8013702:	e7c7      	b.n	8013694 <__lshift+0x1c>
 8013704:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8013708:	3301      	adds	r3, #1
 801370a:	e7cd      	b.n	80136a8 <__lshift+0x30>
 801370c:	4651      	mov	r1, sl
 801370e:	e7dc      	b.n	80136ca <__lshift+0x52>
 8013710:	3904      	subs	r1, #4
 8013712:	f853 2b04 	ldr.w	r2, [r3], #4
 8013716:	f841 2f04 	str.w	r2, [r1, #4]!
 801371a:	459c      	cmp	ip, r3
 801371c:	d8f9      	bhi.n	8013712 <__lshift+0x9a>
 801371e:	e7e4      	b.n	80136ea <__lshift+0x72>

08013720 <__mcmp>:
 8013720:	6903      	ldr	r3, [r0, #16]
 8013722:	690a      	ldr	r2, [r1, #16]
 8013724:	1a9b      	subs	r3, r3, r2
 8013726:	b530      	push	{r4, r5, lr}
 8013728:	d10c      	bne.n	8013744 <__mcmp+0x24>
 801372a:	0092      	lsls	r2, r2, #2
 801372c:	3014      	adds	r0, #20
 801372e:	3114      	adds	r1, #20
 8013730:	1884      	adds	r4, r0, r2
 8013732:	4411      	add	r1, r2
 8013734:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8013738:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801373c:	4295      	cmp	r5, r2
 801373e:	d003      	beq.n	8013748 <__mcmp+0x28>
 8013740:	d305      	bcc.n	801374e <__mcmp+0x2e>
 8013742:	2301      	movs	r3, #1
 8013744:	4618      	mov	r0, r3
 8013746:	bd30      	pop	{r4, r5, pc}
 8013748:	42a0      	cmp	r0, r4
 801374a:	d3f3      	bcc.n	8013734 <__mcmp+0x14>
 801374c:	e7fa      	b.n	8013744 <__mcmp+0x24>
 801374e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013752:	e7f7      	b.n	8013744 <__mcmp+0x24>

08013754 <__mdiff>:
 8013754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013758:	460d      	mov	r5, r1
 801375a:	4607      	mov	r7, r0
 801375c:	4611      	mov	r1, r2
 801375e:	4628      	mov	r0, r5
 8013760:	4614      	mov	r4, r2
 8013762:	f7ff ffdd 	bl	8013720 <__mcmp>
 8013766:	1e06      	subs	r6, r0, #0
 8013768:	d108      	bne.n	801377c <__mdiff+0x28>
 801376a:	4631      	mov	r1, r6
 801376c:	4638      	mov	r0, r7
 801376e:	f7ff fdc2 	bl	80132f6 <_Balloc>
 8013772:	2301      	movs	r3, #1
 8013774:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8013778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801377c:	bfa4      	itt	ge
 801377e:	4623      	movge	r3, r4
 8013780:	462c      	movge	r4, r5
 8013782:	4638      	mov	r0, r7
 8013784:	6861      	ldr	r1, [r4, #4]
 8013786:	bfa6      	itte	ge
 8013788:	461d      	movge	r5, r3
 801378a:	2600      	movge	r6, #0
 801378c:	2601      	movlt	r6, #1
 801378e:	f7ff fdb2 	bl	80132f6 <_Balloc>
 8013792:	692b      	ldr	r3, [r5, #16]
 8013794:	60c6      	str	r6, [r0, #12]
 8013796:	6926      	ldr	r6, [r4, #16]
 8013798:	f105 0914 	add.w	r9, r5, #20
 801379c:	f104 0214 	add.w	r2, r4, #20
 80137a0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80137a4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80137a8:	f100 0514 	add.w	r5, r0, #20
 80137ac:	f04f 0e00 	mov.w	lr, #0
 80137b0:	f852 ab04 	ldr.w	sl, [r2], #4
 80137b4:	f859 4b04 	ldr.w	r4, [r9], #4
 80137b8:	fa1e f18a 	uxtah	r1, lr, sl
 80137bc:	b2a3      	uxth	r3, r4
 80137be:	1ac9      	subs	r1, r1, r3
 80137c0:	0c23      	lsrs	r3, r4, #16
 80137c2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80137c6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80137ca:	b289      	uxth	r1, r1
 80137cc:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80137d0:	45c8      	cmp	r8, r9
 80137d2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80137d6:	4694      	mov	ip, r2
 80137d8:	f845 3b04 	str.w	r3, [r5], #4
 80137dc:	d8e8      	bhi.n	80137b0 <__mdiff+0x5c>
 80137de:	45bc      	cmp	ip, r7
 80137e0:	d304      	bcc.n	80137ec <__mdiff+0x98>
 80137e2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80137e6:	b183      	cbz	r3, 801380a <__mdiff+0xb6>
 80137e8:	6106      	str	r6, [r0, #16]
 80137ea:	e7c5      	b.n	8013778 <__mdiff+0x24>
 80137ec:	f85c 1b04 	ldr.w	r1, [ip], #4
 80137f0:	fa1e f381 	uxtah	r3, lr, r1
 80137f4:	141a      	asrs	r2, r3, #16
 80137f6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80137fa:	b29b      	uxth	r3, r3
 80137fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013800:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8013804:	f845 3b04 	str.w	r3, [r5], #4
 8013808:	e7e9      	b.n	80137de <__mdiff+0x8a>
 801380a:	3e01      	subs	r6, #1
 801380c:	e7e9      	b.n	80137e2 <__mdiff+0x8e>

0801380e <__d2b>:
 801380e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013812:	460e      	mov	r6, r1
 8013814:	2101      	movs	r1, #1
 8013816:	ec59 8b10 	vmov	r8, r9, d0
 801381a:	4615      	mov	r5, r2
 801381c:	f7ff fd6b 	bl	80132f6 <_Balloc>
 8013820:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8013824:	4607      	mov	r7, r0
 8013826:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801382a:	bb34      	cbnz	r4, 801387a <__d2b+0x6c>
 801382c:	9301      	str	r3, [sp, #4]
 801382e:	f1b8 0300 	subs.w	r3, r8, #0
 8013832:	d027      	beq.n	8013884 <__d2b+0x76>
 8013834:	a802      	add	r0, sp, #8
 8013836:	f840 3d08 	str.w	r3, [r0, #-8]!
 801383a:	f7ff fe01 	bl	8013440 <__lo0bits>
 801383e:	9900      	ldr	r1, [sp, #0]
 8013840:	b1f0      	cbz	r0, 8013880 <__d2b+0x72>
 8013842:	9a01      	ldr	r2, [sp, #4]
 8013844:	f1c0 0320 	rsb	r3, r0, #32
 8013848:	fa02 f303 	lsl.w	r3, r2, r3
 801384c:	430b      	orrs	r3, r1
 801384e:	40c2      	lsrs	r2, r0
 8013850:	617b      	str	r3, [r7, #20]
 8013852:	9201      	str	r2, [sp, #4]
 8013854:	9b01      	ldr	r3, [sp, #4]
 8013856:	61bb      	str	r3, [r7, #24]
 8013858:	2b00      	cmp	r3, #0
 801385a:	bf14      	ite	ne
 801385c:	2102      	movne	r1, #2
 801385e:	2101      	moveq	r1, #1
 8013860:	6139      	str	r1, [r7, #16]
 8013862:	b1c4      	cbz	r4, 8013896 <__d2b+0x88>
 8013864:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8013868:	4404      	add	r4, r0
 801386a:	6034      	str	r4, [r6, #0]
 801386c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013870:	6028      	str	r0, [r5, #0]
 8013872:	4638      	mov	r0, r7
 8013874:	b003      	add	sp, #12
 8013876:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801387a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801387e:	e7d5      	b.n	801382c <__d2b+0x1e>
 8013880:	6179      	str	r1, [r7, #20]
 8013882:	e7e7      	b.n	8013854 <__d2b+0x46>
 8013884:	a801      	add	r0, sp, #4
 8013886:	f7ff fddb 	bl	8013440 <__lo0bits>
 801388a:	9b01      	ldr	r3, [sp, #4]
 801388c:	617b      	str	r3, [r7, #20]
 801388e:	2101      	movs	r1, #1
 8013890:	6139      	str	r1, [r7, #16]
 8013892:	3020      	adds	r0, #32
 8013894:	e7e5      	b.n	8013862 <__d2b+0x54>
 8013896:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 801389a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801389e:	6030      	str	r0, [r6, #0]
 80138a0:	6918      	ldr	r0, [r3, #16]
 80138a2:	f7ff fdae 	bl	8013402 <__hi0bits>
 80138a6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80138aa:	e7e1      	b.n	8013870 <__d2b+0x62>

080138ac <_calloc_r>:
 80138ac:	b538      	push	{r3, r4, r5, lr}
 80138ae:	fb02 f401 	mul.w	r4, r2, r1
 80138b2:	4621      	mov	r1, r4
 80138b4:	f000 f856 	bl	8013964 <_malloc_r>
 80138b8:	4605      	mov	r5, r0
 80138ba:	b118      	cbz	r0, 80138c4 <_calloc_r+0x18>
 80138bc:	4622      	mov	r2, r4
 80138be:	2100      	movs	r1, #0
 80138c0:	f7fd fef2 	bl	80116a8 <memset>
 80138c4:	4628      	mov	r0, r5
 80138c6:	bd38      	pop	{r3, r4, r5, pc}

080138c8 <_free_r>:
 80138c8:	b538      	push	{r3, r4, r5, lr}
 80138ca:	4605      	mov	r5, r0
 80138cc:	2900      	cmp	r1, #0
 80138ce:	d045      	beq.n	801395c <_free_r+0x94>
 80138d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80138d4:	1f0c      	subs	r4, r1, #4
 80138d6:	2b00      	cmp	r3, #0
 80138d8:	bfb8      	it	lt
 80138da:	18e4      	addlt	r4, r4, r3
 80138dc:	f000 fc03 	bl	80140e6 <__malloc_lock>
 80138e0:	4a1f      	ldr	r2, [pc, #124]	; (8013960 <_free_r+0x98>)
 80138e2:	6813      	ldr	r3, [r2, #0]
 80138e4:	4610      	mov	r0, r2
 80138e6:	b933      	cbnz	r3, 80138f6 <_free_r+0x2e>
 80138e8:	6063      	str	r3, [r4, #4]
 80138ea:	6014      	str	r4, [r2, #0]
 80138ec:	4628      	mov	r0, r5
 80138ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80138f2:	f000 bbf9 	b.w	80140e8 <__malloc_unlock>
 80138f6:	42a3      	cmp	r3, r4
 80138f8:	d90c      	bls.n	8013914 <_free_r+0x4c>
 80138fa:	6821      	ldr	r1, [r4, #0]
 80138fc:	1862      	adds	r2, r4, r1
 80138fe:	4293      	cmp	r3, r2
 8013900:	bf04      	itt	eq
 8013902:	681a      	ldreq	r2, [r3, #0]
 8013904:	685b      	ldreq	r3, [r3, #4]
 8013906:	6063      	str	r3, [r4, #4]
 8013908:	bf04      	itt	eq
 801390a:	1852      	addeq	r2, r2, r1
 801390c:	6022      	streq	r2, [r4, #0]
 801390e:	6004      	str	r4, [r0, #0]
 8013910:	e7ec      	b.n	80138ec <_free_r+0x24>
 8013912:	4613      	mov	r3, r2
 8013914:	685a      	ldr	r2, [r3, #4]
 8013916:	b10a      	cbz	r2, 801391c <_free_r+0x54>
 8013918:	42a2      	cmp	r2, r4
 801391a:	d9fa      	bls.n	8013912 <_free_r+0x4a>
 801391c:	6819      	ldr	r1, [r3, #0]
 801391e:	1858      	adds	r0, r3, r1
 8013920:	42a0      	cmp	r0, r4
 8013922:	d10b      	bne.n	801393c <_free_r+0x74>
 8013924:	6820      	ldr	r0, [r4, #0]
 8013926:	4401      	add	r1, r0
 8013928:	1858      	adds	r0, r3, r1
 801392a:	4282      	cmp	r2, r0
 801392c:	6019      	str	r1, [r3, #0]
 801392e:	d1dd      	bne.n	80138ec <_free_r+0x24>
 8013930:	6810      	ldr	r0, [r2, #0]
 8013932:	6852      	ldr	r2, [r2, #4]
 8013934:	605a      	str	r2, [r3, #4]
 8013936:	4401      	add	r1, r0
 8013938:	6019      	str	r1, [r3, #0]
 801393a:	e7d7      	b.n	80138ec <_free_r+0x24>
 801393c:	d902      	bls.n	8013944 <_free_r+0x7c>
 801393e:	230c      	movs	r3, #12
 8013940:	602b      	str	r3, [r5, #0]
 8013942:	e7d3      	b.n	80138ec <_free_r+0x24>
 8013944:	6820      	ldr	r0, [r4, #0]
 8013946:	1821      	adds	r1, r4, r0
 8013948:	428a      	cmp	r2, r1
 801394a:	bf04      	itt	eq
 801394c:	6811      	ldreq	r1, [r2, #0]
 801394e:	6852      	ldreq	r2, [r2, #4]
 8013950:	6062      	str	r2, [r4, #4]
 8013952:	bf04      	itt	eq
 8013954:	1809      	addeq	r1, r1, r0
 8013956:	6021      	streq	r1, [r4, #0]
 8013958:	605c      	str	r4, [r3, #4]
 801395a:	e7c7      	b.n	80138ec <_free_r+0x24>
 801395c:	bd38      	pop	{r3, r4, r5, pc}
 801395e:	bf00      	nop
 8013960:	2000215c 	.word	0x2000215c

08013964 <_malloc_r>:
 8013964:	b570      	push	{r4, r5, r6, lr}
 8013966:	1ccd      	adds	r5, r1, #3
 8013968:	f025 0503 	bic.w	r5, r5, #3
 801396c:	3508      	adds	r5, #8
 801396e:	2d0c      	cmp	r5, #12
 8013970:	bf38      	it	cc
 8013972:	250c      	movcc	r5, #12
 8013974:	2d00      	cmp	r5, #0
 8013976:	4606      	mov	r6, r0
 8013978:	db01      	blt.n	801397e <_malloc_r+0x1a>
 801397a:	42a9      	cmp	r1, r5
 801397c:	d903      	bls.n	8013986 <_malloc_r+0x22>
 801397e:	230c      	movs	r3, #12
 8013980:	6033      	str	r3, [r6, #0]
 8013982:	2000      	movs	r0, #0
 8013984:	bd70      	pop	{r4, r5, r6, pc}
 8013986:	f000 fbae 	bl	80140e6 <__malloc_lock>
 801398a:	4a21      	ldr	r2, [pc, #132]	; (8013a10 <_malloc_r+0xac>)
 801398c:	6814      	ldr	r4, [r2, #0]
 801398e:	4621      	mov	r1, r4
 8013990:	b991      	cbnz	r1, 80139b8 <_malloc_r+0x54>
 8013992:	4c20      	ldr	r4, [pc, #128]	; (8013a14 <_malloc_r+0xb0>)
 8013994:	6823      	ldr	r3, [r4, #0]
 8013996:	b91b      	cbnz	r3, 80139a0 <_malloc_r+0x3c>
 8013998:	4630      	mov	r0, r6
 801399a:	f000 facf 	bl	8013f3c <_sbrk_r>
 801399e:	6020      	str	r0, [r4, #0]
 80139a0:	4629      	mov	r1, r5
 80139a2:	4630      	mov	r0, r6
 80139a4:	f000 faca 	bl	8013f3c <_sbrk_r>
 80139a8:	1c43      	adds	r3, r0, #1
 80139aa:	d124      	bne.n	80139f6 <_malloc_r+0x92>
 80139ac:	230c      	movs	r3, #12
 80139ae:	6033      	str	r3, [r6, #0]
 80139b0:	4630      	mov	r0, r6
 80139b2:	f000 fb99 	bl	80140e8 <__malloc_unlock>
 80139b6:	e7e4      	b.n	8013982 <_malloc_r+0x1e>
 80139b8:	680b      	ldr	r3, [r1, #0]
 80139ba:	1b5b      	subs	r3, r3, r5
 80139bc:	d418      	bmi.n	80139f0 <_malloc_r+0x8c>
 80139be:	2b0b      	cmp	r3, #11
 80139c0:	d90f      	bls.n	80139e2 <_malloc_r+0x7e>
 80139c2:	600b      	str	r3, [r1, #0]
 80139c4:	50cd      	str	r5, [r1, r3]
 80139c6:	18cc      	adds	r4, r1, r3
 80139c8:	4630      	mov	r0, r6
 80139ca:	f000 fb8d 	bl	80140e8 <__malloc_unlock>
 80139ce:	f104 000b 	add.w	r0, r4, #11
 80139d2:	1d23      	adds	r3, r4, #4
 80139d4:	f020 0007 	bic.w	r0, r0, #7
 80139d8:	1ac3      	subs	r3, r0, r3
 80139da:	d0d3      	beq.n	8013984 <_malloc_r+0x20>
 80139dc:	425a      	negs	r2, r3
 80139de:	50e2      	str	r2, [r4, r3]
 80139e0:	e7d0      	b.n	8013984 <_malloc_r+0x20>
 80139e2:	428c      	cmp	r4, r1
 80139e4:	684b      	ldr	r3, [r1, #4]
 80139e6:	bf16      	itet	ne
 80139e8:	6063      	strne	r3, [r4, #4]
 80139ea:	6013      	streq	r3, [r2, #0]
 80139ec:	460c      	movne	r4, r1
 80139ee:	e7eb      	b.n	80139c8 <_malloc_r+0x64>
 80139f0:	460c      	mov	r4, r1
 80139f2:	6849      	ldr	r1, [r1, #4]
 80139f4:	e7cc      	b.n	8013990 <_malloc_r+0x2c>
 80139f6:	1cc4      	adds	r4, r0, #3
 80139f8:	f024 0403 	bic.w	r4, r4, #3
 80139fc:	42a0      	cmp	r0, r4
 80139fe:	d005      	beq.n	8013a0c <_malloc_r+0xa8>
 8013a00:	1a21      	subs	r1, r4, r0
 8013a02:	4630      	mov	r0, r6
 8013a04:	f000 fa9a 	bl	8013f3c <_sbrk_r>
 8013a08:	3001      	adds	r0, #1
 8013a0a:	d0cf      	beq.n	80139ac <_malloc_r+0x48>
 8013a0c:	6025      	str	r5, [r4, #0]
 8013a0e:	e7db      	b.n	80139c8 <_malloc_r+0x64>
 8013a10:	2000215c 	.word	0x2000215c
 8013a14:	20002160 	.word	0x20002160

08013a18 <__ssputs_r>:
 8013a18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013a1c:	688e      	ldr	r6, [r1, #8]
 8013a1e:	429e      	cmp	r6, r3
 8013a20:	4682      	mov	sl, r0
 8013a22:	460c      	mov	r4, r1
 8013a24:	4690      	mov	r8, r2
 8013a26:	4699      	mov	r9, r3
 8013a28:	d837      	bhi.n	8013a9a <__ssputs_r+0x82>
 8013a2a:	898a      	ldrh	r2, [r1, #12]
 8013a2c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013a30:	d031      	beq.n	8013a96 <__ssputs_r+0x7e>
 8013a32:	6825      	ldr	r5, [r4, #0]
 8013a34:	6909      	ldr	r1, [r1, #16]
 8013a36:	1a6f      	subs	r7, r5, r1
 8013a38:	6965      	ldr	r5, [r4, #20]
 8013a3a:	2302      	movs	r3, #2
 8013a3c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013a40:	fb95 f5f3 	sdiv	r5, r5, r3
 8013a44:	f109 0301 	add.w	r3, r9, #1
 8013a48:	443b      	add	r3, r7
 8013a4a:	429d      	cmp	r5, r3
 8013a4c:	bf38      	it	cc
 8013a4e:	461d      	movcc	r5, r3
 8013a50:	0553      	lsls	r3, r2, #21
 8013a52:	d530      	bpl.n	8013ab6 <__ssputs_r+0x9e>
 8013a54:	4629      	mov	r1, r5
 8013a56:	f7ff ff85 	bl	8013964 <_malloc_r>
 8013a5a:	4606      	mov	r6, r0
 8013a5c:	b950      	cbnz	r0, 8013a74 <__ssputs_r+0x5c>
 8013a5e:	230c      	movs	r3, #12
 8013a60:	f8ca 3000 	str.w	r3, [sl]
 8013a64:	89a3      	ldrh	r3, [r4, #12]
 8013a66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013a6a:	81a3      	strh	r3, [r4, #12]
 8013a6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013a70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013a74:	463a      	mov	r2, r7
 8013a76:	6921      	ldr	r1, [r4, #16]
 8013a78:	f7ff fc32 	bl	80132e0 <memcpy>
 8013a7c:	89a3      	ldrh	r3, [r4, #12]
 8013a7e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013a82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013a86:	81a3      	strh	r3, [r4, #12]
 8013a88:	6126      	str	r6, [r4, #16]
 8013a8a:	6165      	str	r5, [r4, #20]
 8013a8c:	443e      	add	r6, r7
 8013a8e:	1bed      	subs	r5, r5, r7
 8013a90:	6026      	str	r6, [r4, #0]
 8013a92:	60a5      	str	r5, [r4, #8]
 8013a94:	464e      	mov	r6, r9
 8013a96:	454e      	cmp	r6, r9
 8013a98:	d900      	bls.n	8013a9c <__ssputs_r+0x84>
 8013a9a:	464e      	mov	r6, r9
 8013a9c:	4632      	mov	r2, r6
 8013a9e:	4641      	mov	r1, r8
 8013aa0:	6820      	ldr	r0, [r4, #0]
 8013aa2:	f000 fb07 	bl	80140b4 <memmove>
 8013aa6:	68a3      	ldr	r3, [r4, #8]
 8013aa8:	1b9b      	subs	r3, r3, r6
 8013aaa:	60a3      	str	r3, [r4, #8]
 8013aac:	6823      	ldr	r3, [r4, #0]
 8013aae:	441e      	add	r6, r3
 8013ab0:	6026      	str	r6, [r4, #0]
 8013ab2:	2000      	movs	r0, #0
 8013ab4:	e7dc      	b.n	8013a70 <__ssputs_r+0x58>
 8013ab6:	462a      	mov	r2, r5
 8013ab8:	f000 fb17 	bl	80140ea <_realloc_r>
 8013abc:	4606      	mov	r6, r0
 8013abe:	2800      	cmp	r0, #0
 8013ac0:	d1e2      	bne.n	8013a88 <__ssputs_r+0x70>
 8013ac2:	6921      	ldr	r1, [r4, #16]
 8013ac4:	4650      	mov	r0, sl
 8013ac6:	f7ff feff 	bl	80138c8 <_free_r>
 8013aca:	e7c8      	b.n	8013a5e <__ssputs_r+0x46>

08013acc <_svfiprintf_r>:
 8013acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ad0:	461d      	mov	r5, r3
 8013ad2:	898b      	ldrh	r3, [r1, #12]
 8013ad4:	061f      	lsls	r7, r3, #24
 8013ad6:	b09d      	sub	sp, #116	; 0x74
 8013ad8:	4680      	mov	r8, r0
 8013ada:	460c      	mov	r4, r1
 8013adc:	4616      	mov	r6, r2
 8013ade:	d50f      	bpl.n	8013b00 <_svfiprintf_r+0x34>
 8013ae0:	690b      	ldr	r3, [r1, #16]
 8013ae2:	b96b      	cbnz	r3, 8013b00 <_svfiprintf_r+0x34>
 8013ae4:	2140      	movs	r1, #64	; 0x40
 8013ae6:	f7ff ff3d 	bl	8013964 <_malloc_r>
 8013aea:	6020      	str	r0, [r4, #0]
 8013aec:	6120      	str	r0, [r4, #16]
 8013aee:	b928      	cbnz	r0, 8013afc <_svfiprintf_r+0x30>
 8013af0:	230c      	movs	r3, #12
 8013af2:	f8c8 3000 	str.w	r3, [r8]
 8013af6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013afa:	e0c8      	b.n	8013c8e <_svfiprintf_r+0x1c2>
 8013afc:	2340      	movs	r3, #64	; 0x40
 8013afe:	6163      	str	r3, [r4, #20]
 8013b00:	2300      	movs	r3, #0
 8013b02:	9309      	str	r3, [sp, #36]	; 0x24
 8013b04:	2320      	movs	r3, #32
 8013b06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013b0a:	2330      	movs	r3, #48	; 0x30
 8013b0c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013b10:	9503      	str	r5, [sp, #12]
 8013b12:	f04f 0b01 	mov.w	fp, #1
 8013b16:	4637      	mov	r7, r6
 8013b18:	463d      	mov	r5, r7
 8013b1a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8013b1e:	b10b      	cbz	r3, 8013b24 <_svfiprintf_r+0x58>
 8013b20:	2b25      	cmp	r3, #37	; 0x25
 8013b22:	d13e      	bne.n	8013ba2 <_svfiprintf_r+0xd6>
 8013b24:	ebb7 0a06 	subs.w	sl, r7, r6
 8013b28:	d00b      	beq.n	8013b42 <_svfiprintf_r+0x76>
 8013b2a:	4653      	mov	r3, sl
 8013b2c:	4632      	mov	r2, r6
 8013b2e:	4621      	mov	r1, r4
 8013b30:	4640      	mov	r0, r8
 8013b32:	f7ff ff71 	bl	8013a18 <__ssputs_r>
 8013b36:	3001      	adds	r0, #1
 8013b38:	f000 80a4 	beq.w	8013c84 <_svfiprintf_r+0x1b8>
 8013b3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013b3e:	4453      	add	r3, sl
 8013b40:	9309      	str	r3, [sp, #36]	; 0x24
 8013b42:	783b      	ldrb	r3, [r7, #0]
 8013b44:	2b00      	cmp	r3, #0
 8013b46:	f000 809d 	beq.w	8013c84 <_svfiprintf_r+0x1b8>
 8013b4a:	2300      	movs	r3, #0
 8013b4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013b50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013b54:	9304      	str	r3, [sp, #16]
 8013b56:	9307      	str	r3, [sp, #28]
 8013b58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013b5c:	931a      	str	r3, [sp, #104]	; 0x68
 8013b5e:	462f      	mov	r7, r5
 8013b60:	2205      	movs	r2, #5
 8013b62:	f817 1b01 	ldrb.w	r1, [r7], #1
 8013b66:	4850      	ldr	r0, [pc, #320]	; (8013ca8 <_svfiprintf_r+0x1dc>)
 8013b68:	f7ec fb62 	bl	8000230 <memchr>
 8013b6c:	9b04      	ldr	r3, [sp, #16]
 8013b6e:	b9d0      	cbnz	r0, 8013ba6 <_svfiprintf_r+0xda>
 8013b70:	06d9      	lsls	r1, r3, #27
 8013b72:	bf44      	itt	mi
 8013b74:	2220      	movmi	r2, #32
 8013b76:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8013b7a:	071a      	lsls	r2, r3, #28
 8013b7c:	bf44      	itt	mi
 8013b7e:	222b      	movmi	r2, #43	; 0x2b
 8013b80:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8013b84:	782a      	ldrb	r2, [r5, #0]
 8013b86:	2a2a      	cmp	r2, #42	; 0x2a
 8013b88:	d015      	beq.n	8013bb6 <_svfiprintf_r+0xea>
 8013b8a:	9a07      	ldr	r2, [sp, #28]
 8013b8c:	462f      	mov	r7, r5
 8013b8e:	2000      	movs	r0, #0
 8013b90:	250a      	movs	r5, #10
 8013b92:	4639      	mov	r1, r7
 8013b94:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013b98:	3b30      	subs	r3, #48	; 0x30
 8013b9a:	2b09      	cmp	r3, #9
 8013b9c:	d94d      	bls.n	8013c3a <_svfiprintf_r+0x16e>
 8013b9e:	b1b8      	cbz	r0, 8013bd0 <_svfiprintf_r+0x104>
 8013ba0:	e00f      	b.n	8013bc2 <_svfiprintf_r+0xf6>
 8013ba2:	462f      	mov	r7, r5
 8013ba4:	e7b8      	b.n	8013b18 <_svfiprintf_r+0x4c>
 8013ba6:	4a40      	ldr	r2, [pc, #256]	; (8013ca8 <_svfiprintf_r+0x1dc>)
 8013ba8:	1a80      	subs	r0, r0, r2
 8013baa:	fa0b f000 	lsl.w	r0, fp, r0
 8013bae:	4318      	orrs	r0, r3
 8013bb0:	9004      	str	r0, [sp, #16]
 8013bb2:	463d      	mov	r5, r7
 8013bb4:	e7d3      	b.n	8013b5e <_svfiprintf_r+0x92>
 8013bb6:	9a03      	ldr	r2, [sp, #12]
 8013bb8:	1d11      	adds	r1, r2, #4
 8013bba:	6812      	ldr	r2, [r2, #0]
 8013bbc:	9103      	str	r1, [sp, #12]
 8013bbe:	2a00      	cmp	r2, #0
 8013bc0:	db01      	blt.n	8013bc6 <_svfiprintf_r+0xfa>
 8013bc2:	9207      	str	r2, [sp, #28]
 8013bc4:	e004      	b.n	8013bd0 <_svfiprintf_r+0x104>
 8013bc6:	4252      	negs	r2, r2
 8013bc8:	f043 0302 	orr.w	r3, r3, #2
 8013bcc:	9207      	str	r2, [sp, #28]
 8013bce:	9304      	str	r3, [sp, #16]
 8013bd0:	783b      	ldrb	r3, [r7, #0]
 8013bd2:	2b2e      	cmp	r3, #46	; 0x2e
 8013bd4:	d10c      	bne.n	8013bf0 <_svfiprintf_r+0x124>
 8013bd6:	787b      	ldrb	r3, [r7, #1]
 8013bd8:	2b2a      	cmp	r3, #42	; 0x2a
 8013bda:	d133      	bne.n	8013c44 <_svfiprintf_r+0x178>
 8013bdc:	9b03      	ldr	r3, [sp, #12]
 8013bde:	1d1a      	adds	r2, r3, #4
 8013be0:	681b      	ldr	r3, [r3, #0]
 8013be2:	9203      	str	r2, [sp, #12]
 8013be4:	2b00      	cmp	r3, #0
 8013be6:	bfb8      	it	lt
 8013be8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8013bec:	3702      	adds	r7, #2
 8013bee:	9305      	str	r3, [sp, #20]
 8013bf0:	4d2e      	ldr	r5, [pc, #184]	; (8013cac <_svfiprintf_r+0x1e0>)
 8013bf2:	7839      	ldrb	r1, [r7, #0]
 8013bf4:	2203      	movs	r2, #3
 8013bf6:	4628      	mov	r0, r5
 8013bf8:	f7ec fb1a 	bl	8000230 <memchr>
 8013bfc:	b138      	cbz	r0, 8013c0e <_svfiprintf_r+0x142>
 8013bfe:	2340      	movs	r3, #64	; 0x40
 8013c00:	1b40      	subs	r0, r0, r5
 8013c02:	fa03 f000 	lsl.w	r0, r3, r0
 8013c06:	9b04      	ldr	r3, [sp, #16]
 8013c08:	4303      	orrs	r3, r0
 8013c0a:	3701      	adds	r7, #1
 8013c0c:	9304      	str	r3, [sp, #16]
 8013c0e:	7839      	ldrb	r1, [r7, #0]
 8013c10:	4827      	ldr	r0, [pc, #156]	; (8013cb0 <_svfiprintf_r+0x1e4>)
 8013c12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013c16:	2206      	movs	r2, #6
 8013c18:	1c7e      	adds	r6, r7, #1
 8013c1a:	f7ec fb09 	bl	8000230 <memchr>
 8013c1e:	2800      	cmp	r0, #0
 8013c20:	d038      	beq.n	8013c94 <_svfiprintf_r+0x1c8>
 8013c22:	4b24      	ldr	r3, [pc, #144]	; (8013cb4 <_svfiprintf_r+0x1e8>)
 8013c24:	bb13      	cbnz	r3, 8013c6c <_svfiprintf_r+0x1a0>
 8013c26:	9b03      	ldr	r3, [sp, #12]
 8013c28:	3307      	adds	r3, #7
 8013c2a:	f023 0307 	bic.w	r3, r3, #7
 8013c2e:	3308      	adds	r3, #8
 8013c30:	9303      	str	r3, [sp, #12]
 8013c32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013c34:	444b      	add	r3, r9
 8013c36:	9309      	str	r3, [sp, #36]	; 0x24
 8013c38:	e76d      	b.n	8013b16 <_svfiprintf_r+0x4a>
 8013c3a:	fb05 3202 	mla	r2, r5, r2, r3
 8013c3e:	2001      	movs	r0, #1
 8013c40:	460f      	mov	r7, r1
 8013c42:	e7a6      	b.n	8013b92 <_svfiprintf_r+0xc6>
 8013c44:	2300      	movs	r3, #0
 8013c46:	3701      	adds	r7, #1
 8013c48:	9305      	str	r3, [sp, #20]
 8013c4a:	4619      	mov	r1, r3
 8013c4c:	250a      	movs	r5, #10
 8013c4e:	4638      	mov	r0, r7
 8013c50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013c54:	3a30      	subs	r2, #48	; 0x30
 8013c56:	2a09      	cmp	r2, #9
 8013c58:	d903      	bls.n	8013c62 <_svfiprintf_r+0x196>
 8013c5a:	2b00      	cmp	r3, #0
 8013c5c:	d0c8      	beq.n	8013bf0 <_svfiprintf_r+0x124>
 8013c5e:	9105      	str	r1, [sp, #20]
 8013c60:	e7c6      	b.n	8013bf0 <_svfiprintf_r+0x124>
 8013c62:	fb05 2101 	mla	r1, r5, r1, r2
 8013c66:	2301      	movs	r3, #1
 8013c68:	4607      	mov	r7, r0
 8013c6a:	e7f0      	b.n	8013c4e <_svfiprintf_r+0x182>
 8013c6c:	ab03      	add	r3, sp, #12
 8013c6e:	9300      	str	r3, [sp, #0]
 8013c70:	4622      	mov	r2, r4
 8013c72:	4b11      	ldr	r3, [pc, #68]	; (8013cb8 <_svfiprintf_r+0x1ec>)
 8013c74:	a904      	add	r1, sp, #16
 8013c76:	4640      	mov	r0, r8
 8013c78:	f7fd fdb2 	bl	80117e0 <_printf_float>
 8013c7c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8013c80:	4681      	mov	r9, r0
 8013c82:	d1d6      	bne.n	8013c32 <_svfiprintf_r+0x166>
 8013c84:	89a3      	ldrh	r3, [r4, #12]
 8013c86:	065b      	lsls	r3, r3, #25
 8013c88:	f53f af35 	bmi.w	8013af6 <_svfiprintf_r+0x2a>
 8013c8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013c8e:	b01d      	add	sp, #116	; 0x74
 8013c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c94:	ab03      	add	r3, sp, #12
 8013c96:	9300      	str	r3, [sp, #0]
 8013c98:	4622      	mov	r2, r4
 8013c9a:	4b07      	ldr	r3, [pc, #28]	; (8013cb8 <_svfiprintf_r+0x1ec>)
 8013c9c:	a904      	add	r1, sp, #16
 8013c9e:	4640      	mov	r0, r8
 8013ca0:	f7fe f854 	bl	8011d4c <_printf_i>
 8013ca4:	e7ea      	b.n	8013c7c <_svfiprintf_r+0x1b0>
 8013ca6:	bf00      	nop
 8013ca8:	08016a7c 	.word	0x08016a7c
 8013cac:	08016a82 	.word	0x08016a82
 8013cb0:	08016a86 	.word	0x08016a86
 8013cb4:	080117e1 	.word	0x080117e1
 8013cb8:	08013a19 	.word	0x08013a19

08013cbc <__sfputc_r>:
 8013cbc:	6893      	ldr	r3, [r2, #8]
 8013cbe:	3b01      	subs	r3, #1
 8013cc0:	2b00      	cmp	r3, #0
 8013cc2:	b410      	push	{r4}
 8013cc4:	6093      	str	r3, [r2, #8]
 8013cc6:	da08      	bge.n	8013cda <__sfputc_r+0x1e>
 8013cc8:	6994      	ldr	r4, [r2, #24]
 8013cca:	42a3      	cmp	r3, r4
 8013ccc:	db01      	blt.n	8013cd2 <__sfputc_r+0x16>
 8013cce:	290a      	cmp	r1, #10
 8013cd0:	d103      	bne.n	8013cda <__sfputc_r+0x1e>
 8013cd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013cd6:	f7fe ba0b 	b.w	80120f0 <__swbuf_r>
 8013cda:	6813      	ldr	r3, [r2, #0]
 8013cdc:	1c58      	adds	r0, r3, #1
 8013cde:	6010      	str	r0, [r2, #0]
 8013ce0:	7019      	strb	r1, [r3, #0]
 8013ce2:	4608      	mov	r0, r1
 8013ce4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013ce8:	4770      	bx	lr

08013cea <__sfputs_r>:
 8013cea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013cec:	4606      	mov	r6, r0
 8013cee:	460f      	mov	r7, r1
 8013cf0:	4614      	mov	r4, r2
 8013cf2:	18d5      	adds	r5, r2, r3
 8013cf4:	42ac      	cmp	r4, r5
 8013cf6:	d101      	bne.n	8013cfc <__sfputs_r+0x12>
 8013cf8:	2000      	movs	r0, #0
 8013cfa:	e007      	b.n	8013d0c <__sfputs_r+0x22>
 8013cfc:	463a      	mov	r2, r7
 8013cfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013d02:	4630      	mov	r0, r6
 8013d04:	f7ff ffda 	bl	8013cbc <__sfputc_r>
 8013d08:	1c43      	adds	r3, r0, #1
 8013d0a:	d1f3      	bne.n	8013cf4 <__sfputs_r+0xa>
 8013d0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013d10 <_vfiprintf_r>:
 8013d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d14:	460c      	mov	r4, r1
 8013d16:	b09d      	sub	sp, #116	; 0x74
 8013d18:	4617      	mov	r7, r2
 8013d1a:	461d      	mov	r5, r3
 8013d1c:	4606      	mov	r6, r0
 8013d1e:	b118      	cbz	r0, 8013d28 <_vfiprintf_r+0x18>
 8013d20:	6983      	ldr	r3, [r0, #24]
 8013d22:	b90b      	cbnz	r3, 8013d28 <_vfiprintf_r+0x18>
 8013d24:	f7ff f9d8 	bl	80130d8 <__sinit>
 8013d28:	4b7c      	ldr	r3, [pc, #496]	; (8013f1c <_vfiprintf_r+0x20c>)
 8013d2a:	429c      	cmp	r4, r3
 8013d2c:	d158      	bne.n	8013de0 <_vfiprintf_r+0xd0>
 8013d2e:	6874      	ldr	r4, [r6, #4]
 8013d30:	89a3      	ldrh	r3, [r4, #12]
 8013d32:	0718      	lsls	r0, r3, #28
 8013d34:	d55e      	bpl.n	8013df4 <_vfiprintf_r+0xe4>
 8013d36:	6923      	ldr	r3, [r4, #16]
 8013d38:	2b00      	cmp	r3, #0
 8013d3a:	d05b      	beq.n	8013df4 <_vfiprintf_r+0xe4>
 8013d3c:	2300      	movs	r3, #0
 8013d3e:	9309      	str	r3, [sp, #36]	; 0x24
 8013d40:	2320      	movs	r3, #32
 8013d42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013d46:	2330      	movs	r3, #48	; 0x30
 8013d48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013d4c:	9503      	str	r5, [sp, #12]
 8013d4e:	f04f 0b01 	mov.w	fp, #1
 8013d52:	46b8      	mov	r8, r7
 8013d54:	4645      	mov	r5, r8
 8013d56:	f815 3b01 	ldrb.w	r3, [r5], #1
 8013d5a:	b10b      	cbz	r3, 8013d60 <_vfiprintf_r+0x50>
 8013d5c:	2b25      	cmp	r3, #37	; 0x25
 8013d5e:	d154      	bne.n	8013e0a <_vfiprintf_r+0xfa>
 8013d60:	ebb8 0a07 	subs.w	sl, r8, r7
 8013d64:	d00b      	beq.n	8013d7e <_vfiprintf_r+0x6e>
 8013d66:	4653      	mov	r3, sl
 8013d68:	463a      	mov	r2, r7
 8013d6a:	4621      	mov	r1, r4
 8013d6c:	4630      	mov	r0, r6
 8013d6e:	f7ff ffbc 	bl	8013cea <__sfputs_r>
 8013d72:	3001      	adds	r0, #1
 8013d74:	f000 80c2 	beq.w	8013efc <_vfiprintf_r+0x1ec>
 8013d78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013d7a:	4453      	add	r3, sl
 8013d7c:	9309      	str	r3, [sp, #36]	; 0x24
 8013d7e:	f898 3000 	ldrb.w	r3, [r8]
 8013d82:	2b00      	cmp	r3, #0
 8013d84:	f000 80ba 	beq.w	8013efc <_vfiprintf_r+0x1ec>
 8013d88:	2300      	movs	r3, #0
 8013d8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013d8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013d92:	9304      	str	r3, [sp, #16]
 8013d94:	9307      	str	r3, [sp, #28]
 8013d96:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013d9a:	931a      	str	r3, [sp, #104]	; 0x68
 8013d9c:	46a8      	mov	r8, r5
 8013d9e:	2205      	movs	r2, #5
 8013da0:	f818 1b01 	ldrb.w	r1, [r8], #1
 8013da4:	485e      	ldr	r0, [pc, #376]	; (8013f20 <_vfiprintf_r+0x210>)
 8013da6:	f7ec fa43 	bl	8000230 <memchr>
 8013daa:	9b04      	ldr	r3, [sp, #16]
 8013dac:	bb78      	cbnz	r0, 8013e0e <_vfiprintf_r+0xfe>
 8013dae:	06d9      	lsls	r1, r3, #27
 8013db0:	bf44      	itt	mi
 8013db2:	2220      	movmi	r2, #32
 8013db4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8013db8:	071a      	lsls	r2, r3, #28
 8013dba:	bf44      	itt	mi
 8013dbc:	222b      	movmi	r2, #43	; 0x2b
 8013dbe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8013dc2:	782a      	ldrb	r2, [r5, #0]
 8013dc4:	2a2a      	cmp	r2, #42	; 0x2a
 8013dc6:	d02a      	beq.n	8013e1e <_vfiprintf_r+0x10e>
 8013dc8:	9a07      	ldr	r2, [sp, #28]
 8013dca:	46a8      	mov	r8, r5
 8013dcc:	2000      	movs	r0, #0
 8013dce:	250a      	movs	r5, #10
 8013dd0:	4641      	mov	r1, r8
 8013dd2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013dd6:	3b30      	subs	r3, #48	; 0x30
 8013dd8:	2b09      	cmp	r3, #9
 8013dda:	d969      	bls.n	8013eb0 <_vfiprintf_r+0x1a0>
 8013ddc:	b360      	cbz	r0, 8013e38 <_vfiprintf_r+0x128>
 8013dde:	e024      	b.n	8013e2a <_vfiprintf_r+0x11a>
 8013de0:	4b50      	ldr	r3, [pc, #320]	; (8013f24 <_vfiprintf_r+0x214>)
 8013de2:	429c      	cmp	r4, r3
 8013de4:	d101      	bne.n	8013dea <_vfiprintf_r+0xda>
 8013de6:	68b4      	ldr	r4, [r6, #8]
 8013de8:	e7a2      	b.n	8013d30 <_vfiprintf_r+0x20>
 8013dea:	4b4f      	ldr	r3, [pc, #316]	; (8013f28 <_vfiprintf_r+0x218>)
 8013dec:	429c      	cmp	r4, r3
 8013dee:	bf08      	it	eq
 8013df0:	68f4      	ldreq	r4, [r6, #12]
 8013df2:	e79d      	b.n	8013d30 <_vfiprintf_r+0x20>
 8013df4:	4621      	mov	r1, r4
 8013df6:	4630      	mov	r0, r6
 8013df8:	f7fe f9cc 	bl	8012194 <__swsetup_r>
 8013dfc:	2800      	cmp	r0, #0
 8013dfe:	d09d      	beq.n	8013d3c <_vfiprintf_r+0x2c>
 8013e00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013e04:	b01d      	add	sp, #116	; 0x74
 8013e06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e0a:	46a8      	mov	r8, r5
 8013e0c:	e7a2      	b.n	8013d54 <_vfiprintf_r+0x44>
 8013e0e:	4a44      	ldr	r2, [pc, #272]	; (8013f20 <_vfiprintf_r+0x210>)
 8013e10:	1a80      	subs	r0, r0, r2
 8013e12:	fa0b f000 	lsl.w	r0, fp, r0
 8013e16:	4318      	orrs	r0, r3
 8013e18:	9004      	str	r0, [sp, #16]
 8013e1a:	4645      	mov	r5, r8
 8013e1c:	e7be      	b.n	8013d9c <_vfiprintf_r+0x8c>
 8013e1e:	9a03      	ldr	r2, [sp, #12]
 8013e20:	1d11      	adds	r1, r2, #4
 8013e22:	6812      	ldr	r2, [r2, #0]
 8013e24:	9103      	str	r1, [sp, #12]
 8013e26:	2a00      	cmp	r2, #0
 8013e28:	db01      	blt.n	8013e2e <_vfiprintf_r+0x11e>
 8013e2a:	9207      	str	r2, [sp, #28]
 8013e2c:	e004      	b.n	8013e38 <_vfiprintf_r+0x128>
 8013e2e:	4252      	negs	r2, r2
 8013e30:	f043 0302 	orr.w	r3, r3, #2
 8013e34:	9207      	str	r2, [sp, #28]
 8013e36:	9304      	str	r3, [sp, #16]
 8013e38:	f898 3000 	ldrb.w	r3, [r8]
 8013e3c:	2b2e      	cmp	r3, #46	; 0x2e
 8013e3e:	d10e      	bne.n	8013e5e <_vfiprintf_r+0x14e>
 8013e40:	f898 3001 	ldrb.w	r3, [r8, #1]
 8013e44:	2b2a      	cmp	r3, #42	; 0x2a
 8013e46:	d138      	bne.n	8013eba <_vfiprintf_r+0x1aa>
 8013e48:	9b03      	ldr	r3, [sp, #12]
 8013e4a:	1d1a      	adds	r2, r3, #4
 8013e4c:	681b      	ldr	r3, [r3, #0]
 8013e4e:	9203      	str	r2, [sp, #12]
 8013e50:	2b00      	cmp	r3, #0
 8013e52:	bfb8      	it	lt
 8013e54:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8013e58:	f108 0802 	add.w	r8, r8, #2
 8013e5c:	9305      	str	r3, [sp, #20]
 8013e5e:	4d33      	ldr	r5, [pc, #204]	; (8013f2c <_vfiprintf_r+0x21c>)
 8013e60:	f898 1000 	ldrb.w	r1, [r8]
 8013e64:	2203      	movs	r2, #3
 8013e66:	4628      	mov	r0, r5
 8013e68:	f7ec f9e2 	bl	8000230 <memchr>
 8013e6c:	b140      	cbz	r0, 8013e80 <_vfiprintf_r+0x170>
 8013e6e:	2340      	movs	r3, #64	; 0x40
 8013e70:	1b40      	subs	r0, r0, r5
 8013e72:	fa03 f000 	lsl.w	r0, r3, r0
 8013e76:	9b04      	ldr	r3, [sp, #16]
 8013e78:	4303      	orrs	r3, r0
 8013e7a:	f108 0801 	add.w	r8, r8, #1
 8013e7e:	9304      	str	r3, [sp, #16]
 8013e80:	f898 1000 	ldrb.w	r1, [r8]
 8013e84:	482a      	ldr	r0, [pc, #168]	; (8013f30 <_vfiprintf_r+0x220>)
 8013e86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013e8a:	2206      	movs	r2, #6
 8013e8c:	f108 0701 	add.w	r7, r8, #1
 8013e90:	f7ec f9ce 	bl	8000230 <memchr>
 8013e94:	2800      	cmp	r0, #0
 8013e96:	d037      	beq.n	8013f08 <_vfiprintf_r+0x1f8>
 8013e98:	4b26      	ldr	r3, [pc, #152]	; (8013f34 <_vfiprintf_r+0x224>)
 8013e9a:	bb1b      	cbnz	r3, 8013ee4 <_vfiprintf_r+0x1d4>
 8013e9c:	9b03      	ldr	r3, [sp, #12]
 8013e9e:	3307      	adds	r3, #7
 8013ea0:	f023 0307 	bic.w	r3, r3, #7
 8013ea4:	3308      	adds	r3, #8
 8013ea6:	9303      	str	r3, [sp, #12]
 8013ea8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013eaa:	444b      	add	r3, r9
 8013eac:	9309      	str	r3, [sp, #36]	; 0x24
 8013eae:	e750      	b.n	8013d52 <_vfiprintf_r+0x42>
 8013eb0:	fb05 3202 	mla	r2, r5, r2, r3
 8013eb4:	2001      	movs	r0, #1
 8013eb6:	4688      	mov	r8, r1
 8013eb8:	e78a      	b.n	8013dd0 <_vfiprintf_r+0xc0>
 8013eba:	2300      	movs	r3, #0
 8013ebc:	f108 0801 	add.w	r8, r8, #1
 8013ec0:	9305      	str	r3, [sp, #20]
 8013ec2:	4619      	mov	r1, r3
 8013ec4:	250a      	movs	r5, #10
 8013ec6:	4640      	mov	r0, r8
 8013ec8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013ecc:	3a30      	subs	r2, #48	; 0x30
 8013ece:	2a09      	cmp	r2, #9
 8013ed0:	d903      	bls.n	8013eda <_vfiprintf_r+0x1ca>
 8013ed2:	2b00      	cmp	r3, #0
 8013ed4:	d0c3      	beq.n	8013e5e <_vfiprintf_r+0x14e>
 8013ed6:	9105      	str	r1, [sp, #20]
 8013ed8:	e7c1      	b.n	8013e5e <_vfiprintf_r+0x14e>
 8013eda:	fb05 2101 	mla	r1, r5, r1, r2
 8013ede:	2301      	movs	r3, #1
 8013ee0:	4680      	mov	r8, r0
 8013ee2:	e7f0      	b.n	8013ec6 <_vfiprintf_r+0x1b6>
 8013ee4:	ab03      	add	r3, sp, #12
 8013ee6:	9300      	str	r3, [sp, #0]
 8013ee8:	4622      	mov	r2, r4
 8013eea:	4b13      	ldr	r3, [pc, #76]	; (8013f38 <_vfiprintf_r+0x228>)
 8013eec:	a904      	add	r1, sp, #16
 8013eee:	4630      	mov	r0, r6
 8013ef0:	f7fd fc76 	bl	80117e0 <_printf_float>
 8013ef4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8013ef8:	4681      	mov	r9, r0
 8013efa:	d1d5      	bne.n	8013ea8 <_vfiprintf_r+0x198>
 8013efc:	89a3      	ldrh	r3, [r4, #12]
 8013efe:	065b      	lsls	r3, r3, #25
 8013f00:	f53f af7e 	bmi.w	8013e00 <_vfiprintf_r+0xf0>
 8013f04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013f06:	e77d      	b.n	8013e04 <_vfiprintf_r+0xf4>
 8013f08:	ab03      	add	r3, sp, #12
 8013f0a:	9300      	str	r3, [sp, #0]
 8013f0c:	4622      	mov	r2, r4
 8013f0e:	4b0a      	ldr	r3, [pc, #40]	; (8013f38 <_vfiprintf_r+0x228>)
 8013f10:	a904      	add	r1, sp, #16
 8013f12:	4630      	mov	r0, r6
 8013f14:	f7fd ff1a 	bl	8011d4c <_printf_i>
 8013f18:	e7ec      	b.n	8013ef4 <_vfiprintf_r+0x1e4>
 8013f1a:	bf00      	nop
 8013f1c:	08016940 	.word	0x08016940
 8013f20:	08016a7c 	.word	0x08016a7c
 8013f24:	08016960 	.word	0x08016960
 8013f28:	08016920 	.word	0x08016920
 8013f2c:	08016a82 	.word	0x08016a82
 8013f30:	08016a86 	.word	0x08016a86
 8013f34:	080117e1 	.word	0x080117e1
 8013f38:	08013ceb 	.word	0x08013ceb

08013f3c <_sbrk_r>:
 8013f3c:	b538      	push	{r3, r4, r5, lr}
 8013f3e:	4c06      	ldr	r4, [pc, #24]	; (8013f58 <_sbrk_r+0x1c>)
 8013f40:	2300      	movs	r3, #0
 8013f42:	4605      	mov	r5, r0
 8013f44:	4608      	mov	r0, r1
 8013f46:	6023      	str	r3, [r4, #0]
 8013f48:	f7f4 fb60 	bl	800860c <_sbrk>
 8013f4c:	1c43      	adds	r3, r0, #1
 8013f4e:	d102      	bne.n	8013f56 <_sbrk_r+0x1a>
 8013f50:	6823      	ldr	r3, [r4, #0]
 8013f52:	b103      	cbz	r3, 8013f56 <_sbrk_r+0x1a>
 8013f54:	602b      	str	r3, [r5, #0]
 8013f56:	bd38      	pop	{r3, r4, r5, pc}
 8013f58:	20002c7c 	.word	0x20002c7c

08013f5c <__sread>:
 8013f5c:	b510      	push	{r4, lr}
 8013f5e:	460c      	mov	r4, r1
 8013f60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013f64:	f000 f8e8 	bl	8014138 <_read_r>
 8013f68:	2800      	cmp	r0, #0
 8013f6a:	bfab      	itete	ge
 8013f6c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013f6e:	89a3      	ldrhlt	r3, [r4, #12]
 8013f70:	181b      	addge	r3, r3, r0
 8013f72:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013f76:	bfac      	ite	ge
 8013f78:	6563      	strge	r3, [r4, #84]	; 0x54
 8013f7a:	81a3      	strhlt	r3, [r4, #12]
 8013f7c:	bd10      	pop	{r4, pc}

08013f7e <__swrite>:
 8013f7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f82:	461f      	mov	r7, r3
 8013f84:	898b      	ldrh	r3, [r1, #12]
 8013f86:	05db      	lsls	r3, r3, #23
 8013f88:	4605      	mov	r5, r0
 8013f8a:	460c      	mov	r4, r1
 8013f8c:	4616      	mov	r6, r2
 8013f8e:	d505      	bpl.n	8013f9c <__swrite+0x1e>
 8013f90:	2302      	movs	r3, #2
 8013f92:	2200      	movs	r2, #0
 8013f94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013f98:	f000 f868 	bl	801406c <_lseek_r>
 8013f9c:	89a3      	ldrh	r3, [r4, #12]
 8013f9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013fa2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013fa6:	81a3      	strh	r3, [r4, #12]
 8013fa8:	4632      	mov	r2, r6
 8013faa:	463b      	mov	r3, r7
 8013fac:	4628      	mov	r0, r5
 8013fae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013fb2:	f000 b817 	b.w	8013fe4 <_write_r>

08013fb6 <__sseek>:
 8013fb6:	b510      	push	{r4, lr}
 8013fb8:	460c      	mov	r4, r1
 8013fba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013fbe:	f000 f855 	bl	801406c <_lseek_r>
 8013fc2:	1c43      	adds	r3, r0, #1
 8013fc4:	89a3      	ldrh	r3, [r4, #12]
 8013fc6:	bf15      	itete	ne
 8013fc8:	6560      	strne	r0, [r4, #84]	; 0x54
 8013fca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013fce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013fd2:	81a3      	strheq	r3, [r4, #12]
 8013fd4:	bf18      	it	ne
 8013fd6:	81a3      	strhne	r3, [r4, #12]
 8013fd8:	bd10      	pop	{r4, pc}

08013fda <__sclose>:
 8013fda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013fde:	f000 b813 	b.w	8014008 <_close_r>
	...

08013fe4 <_write_r>:
 8013fe4:	b538      	push	{r3, r4, r5, lr}
 8013fe6:	4c07      	ldr	r4, [pc, #28]	; (8014004 <_write_r+0x20>)
 8013fe8:	4605      	mov	r5, r0
 8013fea:	4608      	mov	r0, r1
 8013fec:	4611      	mov	r1, r2
 8013fee:	2200      	movs	r2, #0
 8013ff0:	6022      	str	r2, [r4, #0]
 8013ff2:	461a      	mov	r2, r3
 8013ff4:	f7f3 ffc7 	bl	8007f86 <_write>
 8013ff8:	1c43      	adds	r3, r0, #1
 8013ffa:	d102      	bne.n	8014002 <_write_r+0x1e>
 8013ffc:	6823      	ldr	r3, [r4, #0]
 8013ffe:	b103      	cbz	r3, 8014002 <_write_r+0x1e>
 8014000:	602b      	str	r3, [r5, #0]
 8014002:	bd38      	pop	{r3, r4, r5, pc}
 8014004:	20002c7c 	.word	0x20002c7c

08014008 <_close_r>:
 8014008:	b538      	push	{r3, r4, r5, lr}
 801400a:	4c06      	ldr	r4, [pc, #24]	; (8014024 <_close_r+0x1c>)
 801400c:	2300      	movs	r3, #0
 801400e:	4605      	mov	r5, r0
 8014010:	4608      	mov	r0, r1
 8014012:	6023      	str	r3, [r4, #0]
 8014014:	f7f4 fac5 	bl	80085a2 <_close>
 8014018:	1c43      	adds	r3, r0, #1
 801401a:	d102      	bne.n	8014022 <_close_r+0x1a>
 801401c:	6823      	ldr	r3, [r4, #0]
 801401e:	b103      	cbz	r3, 8014022 <_close_r+0x1a>
 8014020:	602b      	str	r3, [r5, #0]
 8014022:	bd38      	pop	{r3, r4, r5, pc}
 8014024:	20002c7c 	.word	0x20002c7c

08014028 <_fstat_r>:
 8014028:	b538      	push	{r3, r4, r5, lr}
 801402a:	4c07      	ldr	r4, [pc, #28]	; (8014048 <_fstat_r+0x20>)
 801402c:	2300      	movs	r3, #0
 801402e:	4605      	mov	r5, r0
 8014030:	4608      	mov	r0, r1
 8014032:	4611      	mov	r1, r2
 8014034:	6023      	str	r3, [r4, #0]
 8014036:	f7f4 fac0 	bl	80085ba <_fstat>
 801403a:	1c43      	adds	r3, r0, #1
 801403c:	d102      	bne.n	8014044 <_fstat_r+0x1c>
 801403e:	6823      	ldr	r3, [r4, #0]
 8014040:	b103      	cbz	r3, 8014044 <_fstat_r+0x1c>
 8014042:	602b      	str	r3, [r5, #0]
 8014044:	bd38      	pop	{r3, r4, r5, pc}
 8014046:	bf00      	nop
 8014048:	20002c7c 	.word	0x20002c7c

0801404c <_isatty_r>:
 801404c:	b538      	push	{r3, r4, r5, lr}
 801404e:	4c06      	ldr	r4, [pc, #24]	; (8014068 <_isatty_r+0x1c>)
 8014050:	2300      	movs	r3, #0
 8014052:	4605      	mov	r5, r0
 8014054:	4608      	mov	r0, r1
 8014056:	6023      	str	r3, [r4, #0]
 8014058:	f7f4 fabf 	bl	80085da <_isatty>
 801405c:	1c43      	adds	r3, r0, #1
 801405e:	d102      	bne.n	8014066 <_isatty_r+0x1a>
 8014060:	6823      	ldr	r3, [r4, #0]
 8014062:	b103      	cbz	r3, 8014066 <_isatty_r+0x1a>
 8014064:	602b      	str	r3, [r5, #0]
 8014066:	bd38      	pop	{r3, r4, r5, pc}
 8014068:	20002c7c 	.word	0x20002c7c

0801406c <_lseek_r>:
 801406c:	b538      	push	{r3, r4, r5, lr}
 801406e:	4c07      	ldr	r4, [pc, #28]	; (801408c <_lseek_r+0x20>)
 8014070:	4605      	mov	r5, r0
 8014072:	4608      	mov	r0, r1
 8014074:	4611      	mov	r1, r2
 8014076:	2200      	movs	r2, #0
 8014078:	6022      	str	r2, [r4, #0]
 801407a:	461a      	mov	r2, r3
 801407c:	f7f4 fab8 	bl	80085f0 <_lseek>
 8014080:	1c43      	adds	r3, r0, #1
 8014082:	d102      	bne.n	801408a <_lseek_r+0x1e>
 8014084:	6823      	ldr	r3, [r4, #0]
 8014086:	b103      	cbz	r3, 801408a <_lseek_r+0x1e>
 8014088:	602b      	str	r3, [r5, #0]
 801408a:	bd38      	pop	{r3, r4, r5, pc}
 801408c:	20002c7c 	.word	0x20002c7c

08014090 <__ascii_mbtowc>:
 8014090:	b082      	sub	sp, #8
 8014092:	b901      	cbnz	r1, 8014096 <__ascii_mbtowc+0x6>
 8014094:	a901      	add	r1, sp, #4
 8014096:	b142      	cbz	r2, 80140aa <__ascii_mbtowc+0x1a>
 8014098:	b14b      	cbz	r3, 80140ae <__ascii_mbtowc+0x1e>
 801409a:	7813      	ldrb	r3, [r2, #0]
 801409c:	600b      	str	r3, [r1, #0]
 801409e:	7812      	ldrb	r2, [r2, #0]
 80140a0:	1c10      	adds	r0, r2, #0
 80140a2:	bf18      	it	ne
 80140a4:	2001      	movne	r0, #1
 80140a6:	b002      	add	sp, #8
 80140a8:	4770      	bx	lr
 80140aa:	4610      	mov	r0, r2
 80140ac:	e7fb      	b.n	80140a6 <__ascii_mbtowc+0x16>
 80140ae:	f06f 0001 	mvn.w	r0, #1
 80140b2:	e7f8      	b.n	80140a6 <__ascii_mbtowc+0x16>

080140b4 <memmove>:
 80140b4:	4288      	cmp	r0, r1
 80140b6:	b510      	push	{r4, lr}
 80140b8:	eb01 0302 	add.w	r3, r1, r2
 80140bc:	d807      	bhi.n	80140ce <memmove+0x1a>
 80140be:	1e42      	subs	r2, r0, #1
 80140c0:	4299      	cmp	r1, r3
 80140c2:	d00a      	beq.n	80140da <memmove+0x26>
 80140c4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80140c8:	f802 4f01 	strb.w	r4, [r2, #1]!
 80140cc:	e7f8      	b.n	80140c0 <memmove+0xc>
 80140ce:	4283      	cmp	r3, r0
 80140d0:	d9f5      	bls.n	80140be <memmove+0xa>
 80140d2:	1881      	adds	r1, r0, r2
 80140d4:	1ad2      	subs	r2, r2, r3
 80140d6:	42d3      	cmn	r3, r2
 80140d8:	d100      	bne.n	80140dc <memmove+0x28>
 80140da:	bd10      	pop	{r4, pc}
 80140dc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80140e0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80140e4:	e7f7      	b.n	80140d6 <memmove+0x22>

080140e6 <__malloc_lock>:
 80140e6:	4770      	bx	lr

080140e8 <__malloc_unlock>:
 80140e8:	4770      	bx	lr

080140ea <_realloc_r>:
 80140ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80140ec:	4607      	mov	r7, r0
 80140ee:	4614      	mov	r4, r2
 80140f0:	460e      	mov	r6, r1
 80140f2:	b921      	cbnz	r1, 80140fe <_realloc_r+0x14>
 80140f4:	4611      	mov	r1, r2
 80140f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80140fa:	f7ff bc33 	b.w	8013964 <_malloc_r>
 80140fe:	b922      	cbnz	r2, 801410a <_realloc_r+0x20>
 8014100:	f7ff fbe2 	bl	80138c8 <_free_r>
 8014104:	4625      	mov	r5, r4
 8014106:	4628      	mov	r0, r5
 8014108:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801410a:	f000 f834 	bl	8014176 <_malloc_usable_size_r>
 801410e:	42a0      	cmp	r0, r4
 8014110:	d20f      	bcs.n	8014132 <_realloc_r+0x48>
 8014112:	4621      	mov	r1, r4
 8014114:	4638      	mov	r0, r7
 8014116:	f7ff fc25 	bl	8013964 <_malloc_r>
 801411a:	4605      	mov	r5, r0
 801411c:	2800      	cmp	r0, #0
 801411e:	d0f2      	beq.n	8014106 <_realloc_r+0x1c>
 8014120:	4631      	mov	r1, r6
 8014122:	4622      	mov	r2, r4
 8014124:	f7ff f8dc 	bl	80132e0 <memcpy>
 8014128:	4631      	mov	r1, r6
 801412a:	4638      	mov	r0, r7
 801412c:	f7ff fbcc 	bl	80138c8 <_free_r>
 8014130:	e7e9      	b.n	8014106 <_realloc_r+0x1c>
 8014132:	4635      	mov	r5, r6
 8014134:	e7e7      	b.n	8014106 <_realloc_r+0x1c>
	...

08014138 <_read_r>:
 8014138:	b538      	push	{r3, r4, r5, lr}
 801413a:	4c07      	ldr	r4, [pc, #28]	; (8014158 <_read_r+0x20>)
 801413c:	4605      	mov	r5, r0
 801413e:	4608      	mov	r0, r1
 8014140:	4611      	mov	r1, r2
 8014142:	2200      	movs	r2, #0
 8014144:	6022      	str	r2, [r4, #0]
 8014146:	461a      	mov	r2, r3
 8014148:	f7f4 fa0e 	bl	8008568 <_read>
 801414c:	1c43      	adds	r3, r0, #1
 801414e:	d102      	bne.n	8014156 <_read_r+0x1e>
 8014150:	6823      	ldr	r3, [r4, #0]
 8014152:	b103      	cbz	r3, 8014156 <_read_r+0x1e>
 8014154:	602b      	str	r3, [r5, #0]
 8014156:	bd38      	pop	{r3, r4, r5, pc}
 8014158:	20002c7c 	.word	0x20002c7c

0801415c <__ascii_wctomb>:
 801415c:	b149      	cbz	r1, 8014172 <__ascii_wctomb+0x16>
 801415e:	2aff      	cmp	r2, #255	; 0xff
 8014160:	bf85      	ittet	hi
 8014162:	238a      	movhi	r3, #138	; 0x8a
 8014164:	6003      	strhi	r3, [r0, #0]
 8014166:	700a      	strbls	r2, [r1, #0]
 8014168:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801416c:	bf98      	it	ls
 801416e:	2001      	movls	r0, #1
 8014170:	4770      	bx	lr
 8014172:	4608      	mov	r0, r1
 8014174:	4770      	bx	lr

08014176 <_malloc_usable_size_r>:
 8014176:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801417a:	1f18      	subs	r0, r3, #4
 801417c:	2b00      	cmp	r3, #0
 801417e:	bfbc      	itt	lt
 8014180:	580b      	ldrlt	r3, [r1, r0]
 8014182:	18c0      	addlt	r0, r0, r3
 8014184:	4770      	bx	lr
	...

08014188 <log10>:
 8014188:	b5f0      	push	{r4, r5, r6, r7, lr}
 801418a:	ed2d 8b02 	vpush	{d8}
 801418e:	b08b      	sub	sp, #44	; 0x2c
 8014190:	ec55 4b10 	vmov	r4, r5, d0
 8014194:	f000 f9e8 	bl	8014568 <__ieee754_log10>
 8014198:	4b36      	ldr	r3, [pc, #216]	; (8014274 <log10+0xec>)
 801419a:	eeb0 8a40 	vmov.f32	s16, s0
 801419e:	eef0 8a60 	vmov.f32	s17, s1
 80141a2:	f993 6000 	ldrsb.w	r6, [r3]
 80141a6:	1c73      	adds	r3, r6, #1
 80141a8:	d05c      	beq.n	8014264 <log10+0xdc>
 80141aa:	4622      	mov	r2, r4
 80141ac:	462b      	mov	r3, r5
 80141ae:	4620      	mov	r0, r4
 80141b0:	4629      	mov	r1, r5
 80141b2:	f7ec fce3 	bl	8000b7c <__aeabi_dcmpun>
 80141b6:	4607      	mov	r7, r0
 80141b8:	2800      	cmp	r0, #0
 80141ba:	d153      	bne.n	8014264 <log10+0xdc>
 80141bc:	2200      	movs	r2, #0
 80141be:	2300      	movs	r3, #0
 80141c0:	4620      	mov	r0, r4
 80141c2:	4629      	mov	r1, r5
 80141c4:	f7ec fcbc 	bl	8000b40 <__aeabi_dcmple>
 80141c8:	2800      	cmp	r0, #0
 80141ca:	d04b      	beq.n	8014264 <log10+0xdc>
 80141cc:	4b2a      	ldr	r3, [pc, #168]	; (8014278 <log10+0xf0>)
 80141ce:	9301      	str	r3, [sp, #4]
 80141d0:	9708      	str	r7, [sp, #32]
 80141d2:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80141d6:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80141da:	b9a6      	cbnz	r6, 8014206 <log10+0x7e>
 80141dc:	4b27      	ldr	r3, [pc, #156]	; (801427c <log10+0xf4>)
 80141de:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80141e2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80141e6:	4620      	mov	r0, r4
 80141e8:	2200      	movs	r2, #0
 80141ea:	2300      	movs	r3, #0
 80141ec:	4629      	mov	r1, r5
 80141ee:	f7ec fc93 	bl	8000b18 <__aeabi_dcmpeq>
 80141f2:	bb40      	cbnz	r0, 8014246 <log10+0xbe>
 80141f4:	2301      	movs	r3, #1
 80141f6:	2e02      	cmp	r6, #2
 80141f8:	9300      	str	r3, [sp, #0]
 80141fa:	d119      	bne.n	8014230 <log10+0xa8>
 80141fc:	f7fd fa2a 	bl	8011654 <__errno>
 8014200:	2321      	movs	r3, #33	; 0x21
 8014202:	6003      	str	r3, [r0, #0]
 8014204:	e019      	b.n	801423a <log10+0xb2>
 8014206:	4b1e      	ldr	r3, [pc, #120]	; (8014280 <log10+0xf8>)
 8014208:	2200      	movs	r2, #0
 801420a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801420e:	4620      	mov	r0, r4
 8014210:	2200      	movs	r2, #0
 8014212:	2300      	movs	r3, #0
 8014214:	4629      	mov	r1, r5
 8014216:	f7ec fc7f 	bl	8000b18 <__aeabi_dcmpeq>
 801421a:	2800      	cmp	r0, #0
 801421c:	d0ea      	beq.n	80141f4 <log10+0x6c>
 801421e:	2302      	movs	r3, #2
 8014220:	429e      	cmp	r6, r3
 8014222:	9300      	str	r3, [sp, #0]
 8014224:	d111      	bne.n	801424a <log10+0xc2>
 8014226:	f7fd fa15 	bl	8011654 <__errno>
 801422a:	2322      	movs	r3, #34	; 0x22
 801422c:	6003      	str	r3, [r0, #0]
 801422e:	e011      	b.n	8014254 <log10+0xcc>
 8014230:	4668      	mov	r0, sp
 8014232:	f000 fff4 	bl	801521e <matherr>
 8014236:	2800      	cmp	r0, #0
 8014238:	d0e0      	beq.n	80141fc <log10+0x74>
 801423a:	4812      	ldr	r0, [pc, #72]	; (8014284 <log10+0xfc>)
 801423c:	f000 fff4 	bl	8015228 <nan>
 8014240:	ed8d 0b06 	vstr	d0, [sp, #24]
 8014244:	e006      	b.n	8014254 <log10+0xcc>
 8014246:	2302      	movs	r3, #2
 8014248:	9300      	str	r3, [sp, #0]
 801424a:	4668      	mov	r0, sp
 801424c:	f000 ffe7 	bl	801521e <matherr>
 8014250:	2800      	cmp	r0, #0
 8014252:	d0e8      	beq.n	8014226 <log10+0x9e>
 8014254:	9b08      	ldr	r3, [sp, #32]
 8014256:	b11b      	cbz	r3, 8014260 <log10+0xd8>
 8014258:	f7fd f9fc 	bl	8011654 <__errno>
 801425c:	9b08      	ldr	r3, [sp, #32]
 801425e:	6003      	str	r3, [r0, #0]
 8014260:	ed9d 8b06 	vldr	d8, [sp, #24]
 8014264:	eeb0 0a48 	vmov.f32	s0, s16
 8014268:	eef0 0a68 	vmov.f32	s1, s17
 801426c:	b00b      	add	sp, #44	; 0x2c
 801426e:	ecbd 8b02 	vpop	{d8}
 8014272:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014274:	20002084 	.word	0x20002084
 8014278:	08016b98 	.word	0x08016b98
 801427c:	c7efffff 	.word	0xc7efffff
 8014280:	fff00000 	.word	0xfff00000
 8014284:	08016a81 	.word	0x08016a81

08014288 <pow>:
 8014288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801428c:	ed2d 8b04 	vpush	{d8-d9}
 8014290:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8014564 <pow+0x2dc>
 8014294:	b08d      	sub	sp, #52	; 0x34
 8014296:	ec57 6b10 	vmov	r6, r7, d0
 801429a:	ec55 4b11 	vmov	r4, r5, d1
 801429e:	f000 f9ef 	bl	8014680 <__ieee754_pow>
 80142a2:	f999 3000 	ldrsb.w	r3, [r9]
 80142a6:	9300      	str	r3, [sp, #0]
 80142a8:	3301      	adds	r3, #1
 80142aa:	eeb0 8a40 	vmov.f32	s16, s0
 80142ae:	eef0 8a60 	vmov.f32	s17, s1
 80142b2:	46c8      	mov	r8, r9
 80142b4:	d05f      	beq.n	8014376 <pow+0xee>
 80142b6:	4622      	mov	r2, r4
 80142b8:	462b      	mov	r3, r5
 80142ba:	4620      	mov	r0, r4
 80142bc:	4629      	mov	r1, r5
 80142be:	f7ec fc5d 	bl	8000b7c <__aeabi_dcmpun>
 80142c2:	4683      	mov	fp, r0
 80142c4:	2800      	cmp	r0, #0
 80142c6:	d156      	bne.n	8014376 <pow+0xee>
 80142c8:	4632      	mov	r2, r6
 80142ca:	463b      	mov	r3, r7
 80142cc:	4630      	mov	r0, r6
 80142ce:	4639      	mov	r1, r7
 80142d0:	f7ec fc54 	bl	8000b7c <__aeabi_dcmpun>
 80142d4:	9001      	str	r0, [sp, #4]
 80142d6:	b1e8      	cbz	r0, 8014314 <pow+0x8c>
 80142d8:	2200      	movs	r2, #0
 80142da:	2300      	movs	r3, #0
 80142dc:	4620      	mov	r0, r4
 80142de:	4629      	mov	r1, r5
 80142e0:	f7ec fc1a 	bl	8000b18 <__aeabi_dcmpeq>
 80142e4:	2800      	cmp	r0, #0
 80142e6:	d046      	beq.n	8014376 <pow+0xee>
 80142e8:	2301      	movs	r3, #1
 80142ea:	9302      	str	r3, [sp, #8]
 80142ec:	4b96      	ldr	r3, [pc, #600]	; (8014548 <pow+0x2c0>)
 80142ee:	9303      	str	r3, [sp, #12]
 80142f0:	4b96      	ldr	r3, [pc, #600]	; (801454c <pow+0x2c4>)
 80142f2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80142f6:	2200      	movs	r2, #0
 80142f8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80142fc:	9b00      	ldr	r3, [sp, #0]
 80142fe:	2b02      	cmp	r3, #2
 8014300:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8014304:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8014308:	d033      	beq.n	8014372 <pow+0xea>
 801430a:	a802      	add	r0, sp, #8
 801430c:	f000 ff87 	bl	801521e <matherr>
 8014310:	bb48      	cbnz	r0, 8014366 <pow+0xde>
 8014312:	e05d      	b.n	80143d0 <pow+0x148>
 8014314:	f04f 0a00 	mov.w	sl, #0
 8014318:	f04f 0b00 	mov.w	fp, #0
 801431c:	4652      	mov	r2, sl
 801431e:	465b      	mov	r3, fp
 8014320:	4630      	mov	r0, r6
 8014322:	4639      	mov	r1, r7
 8014324:	f7ec fbf8 	bl	8000b18 <__aeabi_dcmpeq>
 8014328:	ec4b ab19 	vmov	d9, sl, fp
 801432c:	2800      	cmp	r0, #0
 801432e:	d054      	beq.n	80143da <pow+0x152>
 8014330:	4652      	mov	r2, sl
 8014332:	465b      	mov	r3, fp
 8014334:	4620      	mov	r0, r4
 8014336:	4629      	mov	r1, r5
 8014338:	f7ec fbee 	bl	8000b18 <__aeabi_dcmpeq>
 801433c:	4680      	mov	r8, r0
 801433e:	b318      	cbz	r0, 8014388 <pow+0x100>
 8014340:	2301      	movs	r3, #1
 8014342:	9302      	str	r3, [sp, #8]
 8014344:	4b80      	ldr	r3, [pc, #512]	; (8014548 <pow+0x2c0>)
 8014346:	9303      	str	r3, [sp, #12]
 8014348:	9b01      	ldr	r3, [sp, #4]
 801434a:	930a      	str	r3, [sp, #40]	; 0x28
 801434c:	9b00      	ldr	r3, [sp, #0]
 801434e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8014352:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8014356:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801435a:	2b00      	cmp	r3, #0
 801435c:	d0d5      	beq.n	801430a <pow+0x82>
 801435e:	4b7b      	ldr	r3, [pc, #492]	; (801454c <pow+0x2c4>)
 8014360:	2200      	movs	r2, #0
 8014362:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014366:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014368:	b11b      	cbz	r3, 8014372 <pow+0xea>
 801436a:	f7fd f973 	bl	8011654 <__errno>
 801436e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014370:	6003      	str	r3, [r0, #0]
 8014372:	ed9d 8b08 	vldr	d8, [sp, #32]
 8014376:	eeb0 0a48 	vmov.f32	s0, s16
 801437a:	eef0 0a68 	vmov.f32	s1, s17
 801437e:	b00d      	add	sp, #52	; 0x34
 8014380:	ecbd 8b04 	vpop	{d8-d9}
 8014384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014388:	ec45 4b10 	vmov	d0, r4, r5
 801438c:	f000 ff3f 	bl	801520e <finite>
 8014390:	2800      	cmp	r0, #0
 8014392:	d0f0      	beq.n	8014376 <pow+0xee>
 8014394:	4652      	mov	r2, sl
 8014396:	465b      	mov	r3, fp
 8014398:	4620      	mov	r0, r4
 801439a:	4629      	mov	r1, r5
 801439c:	f7ec fbc6 	bl	8000b2c <__aeabi_dcmplt>
 80143a0:	2800      	cmp	r0, #0
 80143a2:	d0e8      	beq.n	8014376 <pow+0xee>
 80143a4:	2301      	movs	r3, #1
 80143a6:	9302      	str	r3, [sp, #8]
 80143a8:	4b67      	ldr	r3, [pc, #412]	; (8014548 <pow+0x2c0>)
 80143aa:	9303      	str	r3, [sp, #12]
 80143ac:	f999 3000 	ldrsb.w	r3, [r9]
 80143b0:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80143b4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80143b8:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80143bc:	b913      	cbnz	r3, 80143c4 <pow+0x13c>
 80143be:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80143c2:	e7a2      	b.n	801430a <pow+0x82>
 80143c4:	4962      	ldr	r1, [pc, #392]	; (8014550 <pow+0x2c8>)
 80143c6:	2000      	movs	r0, #0
 80143c8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80143cc:	2b02      	cmp	r3, #2
 80143ce:	d19c      	bne.n	801430a <pow+0x82>
 80143d0:	f7fd f940 	bl	8011654 <__errno>
 80143d4:	2321      	movs	r3, #33	; 0x21
 80143d6:	6003      	str	r3, [r0, #0]
 80143d8:	e7c5      	b.n	8014366 <pow+0xde>
 80143da:	eeb0 0a48 	vmov.f32	s0, s16
 80143de:	eef0 0a68 	vmov.f32	s1, s17
 80143e2:	f000 ff14 	bl	801520e <finite>
 80143e6:	9000      	str	r0, [sp, #0]
 80143e8:	2800      	cmp	r0, #0
 80143ea:	f040 8081 	bne.w	80144f0 <pow+0x268>
 80143ee:	ec47 6b10 	vmov	d0, r6, r7
 80143f2:	f000 ff0c 	bl	801520e <finite>
 80143f6:	2800      	cmp	r0, #0
 80143f8:	d07a      	beq.n	80144f0 <pow+0x268>
 80143fa:	ec45 4b10 	vmov	d0, r4, r5
 80143fe:	f000 ff06 	bl	801520e <finite>
 8014402:	2800      	cmp	r0, #0
 8014404:	d074      	beq.n	80144f0 <pow+0x268>
 8014406:	ec53 2b18 	vmov	r2, r3, d8
 801440a:	ee18 0a10 	vmov	r0, s16
 801440e:	4619      	mov	r1, r3
 8014410:	f7ec fbb4 	bl	8000b7c <__aeabi_dcmpun>
 8014414:	f999 9000 	ldrsb.w	r9, [r9]
 8014418:	4b4b      	ldr	r3, [pc, #300]	; (8014548 <pow+0x2c0>)
 801441a:	b1b0      	cbz	r0, 801444a <pow+0x1c2>
 801441c:	2201      	movs	r2, #1
 801441e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8014422:	9b00      	ldr	r3, [sp, #0]
 8014424:	930a      	str	r3, [sp, #40]	; 0x28
 8014426:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801442a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801442e:	f1b9 0f00 	cmp.w	r9, #0
 8014432:	d0c4      	beq.n	80143be <pow+0x136>
 8014434:	4652      	mov	r2, sl
 8014436:	465b      	mov	r3, fp
 8014438:	4650      	mov	r0, sl
 801443a:	4659      	mov	r1, fp
 801443c:	f7ec fa2e 	bl	800089c <__aeabi_ddiv>
 8014440:	f1b9 0f02 	cmp.w	r9, #2
 8014444:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8014448:	e7c1      	b.n	80143ce <pow+0x146>
 801444a:	2203      	movs	r2, #3
 801444c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8014450:	900a      	str	r0, [sp, #40]	; 0x28
 8014452:	4629      	mov	r1, r5
 8014454:	4620      	mov	r0, r4
 8014456:	2200      	movs	r2, #0
 8014458:	4b3e      	ldr	r3, [pc, #248]	; (8014554 <pow+0x2cc>)
 801445a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801445e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8014462:	f7ec f8f1 	bl	8000648 <__aeabi_dmul>
 8014466:	4604      	mov	r4, r0
 8014468:	460d      	mov	r5, r1
 801446a:	f1b9 0f00 	cmp.w	r9, #0
 801446e:	d124      	bne.n	80144ba <pow+0x232>
 8014470:	4b39      	ldr	r3, [pc, #228]	; (8014558 <pow+0x2d0>)
 8014472:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8014476:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801447a:	4630      	mov	r0, r6
 801447c:	4652      	mov	r2, sl
 801447e:	465b      	mov	r3, fp
 8014480:	4639      	mov	r1, r7
 8014482:	f7ec fb53 	bl	8000b2c <__aeabi_dcmplt>
 8014486:	2800      	cmp	r0, #0
 8014488:	d056      	beq.n	8014538 <pow+0x2b0>
 801448a:	ec45 4b10 	vmov	d0, r4, r5
 801448e:	f000 fed3 	bl	8015238 <rint>
 8014492:	4622      	mov	r2, r4
 8014494:	462b      	mov	r3, r5
 8014496:	ec51 0b10 	vmov	r0, r1, d0
 801449a:	f7ec fb3d 	bl	8000b18 <__aeabi_dcmpeq>
 801449e:	b920      	cbnz	r0, 80144aa <pow+0x222>
 80144a0:	4b2e      	ldr	r3, [pc, #184]	; (801455c <pow+0x2d4>)
 80144a2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80144a6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80144aa:	f998 3000 	ldrsb.w	r3, [r8]
 80144ae:	2b02      	cmp	r3, #2
 80144b0:	d142      	bne.n	8014538 <pow+0x2b0>
 80144b2:	f7fd f8cf 	bl	8011654 <__errno>
 80144b6:	2322      	movs	r3, #34	; 0x22
 80144b8:	e78d      	b.n	80143d6 <pow+0x14e>
 80144ba:	4b29      	ldr	r3, [pc, #164]	; (8014560 <pow+0x2d8>)
 80144bc:	2200      	movs	r2, #0
 80144be:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80144c2:	4630      	mov	r0, r6
 80144c4:	4652      	mov	r2, sl
 80144c6:	465b      	mov	r3, fp
 80144c8:	4639      	mov	r1, r7
 80144ca:	f7ec fb2f 	bl	8000b2c <__aeabi_dcmplt>
 80144ce:	2800      	cmp	r0, #0
 80144d0:	d0eb      	beq.n	80144aa <pow+0x222>
 80144d2:	ec45 4b10 	vmov	d0, r4, r5
 80144d6:	f000 feaf 	bl	8015238 <rint>
 80144da:	4622      	mov	r2, r4
 80144dc:	462b      	mov	r3, r5
 80144de:	ec51 0b10 	vmov	r0, r1, d0
 80144e2:	f7ec fb19 	bl	8000b18 <__aeabi_dcmpeq>
 80144e6:	2800      	cmp	r0, #0
 80144e8:	d1df      	bne.n	80144aa <pow+0x222>
 80144ea:	2200      	movs	r2, #0
 80144ec:	4b18      	ldr	r3, [pc, #96]	; (8014550 <pow+0x2c8>)
 80144ee:	e7da      	b.n	80144a6 <pow+0x21e>
 80144f0:	2200      	movs	r2, #0
 80144f2:	2300      	movs	r3, #0
 80144f4:	ec51 0b18 	vmov	r0, r1, d8
 80144f8:	f7ec fb0e 	bl	8000b18 <__aeabi_dcmpeq>
 80144fc:	2800      	cmp	r0, #0
 80144fe:	f43f af3a 	beq.w	8014376 <pow+0xee>
 8014502:	ec47 6b10 	vmov	d0, r6, r7
 8014506:	f000 fe82 	bl	801520e <finite>
 801450a:	2800      	cmp	r0, #0
 801450c:	f43f af33 	beq.w	8014376 <pow+0xee>
 8014510:	ec45 4b10 	vmov	d0, r4, r5
 8014514:	f000 fe7b 	bl	801520e <finite>
 8014518:	2800      	cmp	r0, #0
 801451a:	f43f af2c 	beq.w	8014376 <pow+0xee>
 801451e:	2304      	movs	r3, #4
 8014520:	9302      	str	r3, [sp, #8]
 8014522:	4b09      	ldr	r3, [pc, #36]	; (8014548 <pow+0x2c0>)
 8014524:	9303      	str	r3, [sp, #12]
 8014526:	2300      	movs	r3, #0
 8014528:	930a      	str	r3, [sp, #40]	; 0x28
 801452a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801452e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8014532:	ed8d 9b08 	vstr	d9, [sp, #32]
 8014536:	e7b8      	b.n	80144aa <pow+0x222>
 8014538:	a802      	add	r0, sp, #8
 801453a:	f000 fe70 	bl	801521e <matherr>
 801453e:	2800      	cmp	r0, #0
 8014540:	f47f af11 	bne.w	8014366 <pow+0xde>
 8014544:	e7b5      	b.n	80144b2 <pow+0x22a>
 8014546:	bf00      	nop
 8014548:	08016b9e 	.word	0x08016b9e
 801454c:	3ff00000 	.word	0x3ff00000
 8014550:	fff00000 	.word	0xfff00000
 8014554:	3fe00000 	.word	0x3fe00000
 8014558:	47efffff 	.word	0x47efffff
 801455c:	c7efffff 	.word	0xc7efffff
 8014560:	7ff00000 	.word	0x7ff00000
 8014564:	20002084 	.word	0x20002084

08014568 <__ieee754_log10>:
 8014568:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801456c:	ec55 4b10 	vmov	r4, r5, d0
 8014570:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 8014574:	462b      	mov	r3, r5
 8014576:	da2f      	bge.n	80145d8 <__ieee754_log10+0x70>
 8014578:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 801457c:	4322      	orrs	r2, r4
 801457e:	d10a      	bne.n	8014596 <__ieee754_log10+0x2e>
 8014580:	493b      	ldr	r1, [pc, #236]	; (8014670 <__ieee754_log10+0x108>)
 8014582:	2200      	movs	r2, #0
 8014584:	2300      	movs	r3, #0
 8014586:	2000      	movs	r0, #0
 8014588:	f7ec f988 	bl	800089c <__aeabi_ddiv>
 801458c:	ec41 0b10 	vmov	d0, r0, r1
 8014590:	b003      	add	sp, #12
 8014592:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014596:	2d00      	cmp	r5, #0
 8014598:	da08      	bge.n	80145ac <__ieee754_log10+0x44>
 801459a:	ee10 2a10 	vmov	r2, s0
 801459e:	4620      	mov	r0, r4
 80145a0:	4629      	mov	r1, r5
 80145a2:	f7eb fe99 	bl	80002d8 <__aeabi_dsub>
 80145a6:	2200      	movs	r2, #0
 80145a8:	2300      	movs	r3, #0
 80145aa:	e7ed      	b.n	8014588 <__ieee754_log10+0x20>
 80145ac:	2200      	movs	r2, #0
 80145ae:	4b31      	ldr	r3, [pc, #196]	; (8014674 <__ieee754_log10+0x10c>)
 80145b0:	4629      	mov	r1, r5
 80145b2:	ee10 0a10 	vmov	r0, s0
 80145b6:	f7ec f847 	bl	8000648 <__aeabi_dmul>
 80145ba:	f06f 0235 	mvn.w	r2, #53	; 0x35
 80145be:	4604      	mov	r4, r0
 80145c0:	460d      	mov	r5, r1
 80145c2:	460b      	mov	r3, r1
 80145c4:	492c      	ldr	r1, [pc, #176]	; (8014678 <__ieee754_log10+0x110>)
 80145c6:	428b      	cmp	r3, r1
 80145c8:	dd08      	ble.n	80145dc <__ieee754_log10+0x74>
 80145ca:	4622      	mov	r2, r4
 80145cc:	462b      	mov	r3, r5
 80145ce:	4620      	mov	r0, r4
 80145d0:	4629      	mov	r1, r5
 80145d2:	f7eb fe83 	bl	80002dc <__adddf3>
 80145d6:	e7d9      	b.n	801458c <__ieee754_log10+0x24>
 80145d8:	2200      	movs	r2, #0
 80145da:	e7f3      	b.n	80145c4 <__ieee754_log10+0x5c>
 80145dc:	1518      	asrs	r0, r3, #20
 80145de:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 80145e2:	4410      	add	r0, r2
 80145e4:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 80145e8:	4448      	add	r0, r9
 80145ea:	f3c3 0813 	ubfx	r8, r3, #0, #20
 80145ee:	f7eb ffc1 	bl	8000574 <__aeabi_i2d>
 80145f2:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 80145f6:	3303      	adds	r3, #3
 80145f8:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 80145fc:	ec45 4b10 	vmov	d0, r4, r5
 8014600:	4606      	mov	r6, r0
 8014602:	460f      	mov	r7, r1
 8014604:	f000 ff14 	bl	8015430 <__ieee754_log>
 8014608:	a313      	add	r3, pc, #76	; (adr r3, 8014658 <__ieee754_log10+0xf0>)
 801460a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801460e:	4630      	mov	r0, r6
 8014610:	4639      	mov	r1, r7
 8014612:	ed8d 0b00 	vstr	d0, [sp]
 8014616:	f7ec f817 	bl	8000648 <__aeabi_dmul>
 801461a:	ed9d 0b00 	vldr	d0, [sp]
 801461e:	4604      	mov	r4, r0
 8014620:	460d      	mov	r5, r1
 8014622:	a30f      	add	r3, pc, #60	; (adr r3, 8014660 <__ieee754_log10+0xf8>)
 8014624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014628:	ec51 0b10 	vmov	r0, r1, d0
 801462c:	f7ec f80c 	bl	8000648 <__aeabi_dmul>
 8014630:	4602      	mov	r2, r0
 8014632:	460b      	mov	r3, r1
 8014634:	4620      	mov	r0, r4
 8014636:	4629      	mov	r1, r5
 8014638:	f7eb fe50 	bl	80002dc <__adddf3>
 801463c:	a30a      	add	r3, pc, #40	; (adr r3, 8014668 <__ieee754_log10+0x100>)
 801463e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014642:	4604      	mov	r4, r0
 8014644:	460d      	mov	r5, r1
 8014646:	4630      	mov	r0, r6
 8014648:	4639      	mov	r1, r7
 801464a:	f7eb fffd 	bl	8000648 <__aeabi_dmul>
 801464e:	4602      	mov	r2, r0
 8014650:	460b      	mov	r3, r1
 8014652:	4620      	mov	r0, r4
 8014654:	4629      	mov	r1, r5
 8014656:	e7bc      	b.n	80145d2 <__ieee754_log10+0x6a>
 8014658:	11f12b36 	.word	0x11f12b36
 801465c:	3d59fef3 	.word	0x3d59fef3
 8014660:	1526e50e 	.word	0x1526e50e
 8014664:	3fdbcb7b 	.word	0x3fdbcb7b
 8014668:	509f6000 	.word	0x509f6000
 801466c:	3fd34413 	.word	0x3fd34413
 8014670:	c3500000 	.word	0xc3500000
 8014674:	43500000 	.word	0x43500000
 8014678:	7fefffff 	.word	0x7fefffff
 801467c:	00000000 	.word	0x00000000

08014680 <__ieee754_pow>:
 8014680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014684:	b091      	sub	sp, #68	; 0x44
 8014686:	ed8d 1b00 	vstr	d1, [sp]
 801468a:	e9dd 2900 	ldrd	r2, r9, [sp]
 801468e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8014692:	ea58 0302 	orrs.w	r3, r8, r2
 8014696:	ec57 6b10 	vmov	r6, r7, d0
 801469a:	f000 84be 	beq.w	801501a <__ieee754_pow+0x99a>
 801469e:	4b7a      	ldr	r3, [pc, #488]	; (8014888 <__ieee754_pow+0x208>)
 80146a0:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80146a4:	429c      	cmp	r4, r3
 80146a6:	463d      	mov	r5, r7
 80146a8:	ee10 aa10 	vmov	sl, s0
 80146ac:	dc09      	bgt.n	80146c2 <__ieee754_pow+0x42>
 80146ae:	d103      	bne.n	80146b8 <__ieee754_pow+0x38>
 80146b0:	b93e      	cbnz	r6, 80146c2 <__ieee754_pow+0x42>
 80146b2:	45a0      	cmp	r8, r4
 80146b4:	dc0d      	bgt.n	80146d2 <__ieee754_pow+0x52>
 80146b6:	e001      	b.n	80146bc <__ieee754_pow+0x3c>
 80146b8:	4598      	cmp	r8, r3
 80146ba:	dc02      	bgt.n	80146c2 <__ieee754_pow+0x42>
 80146bc:	4598      	cmp	r8, r3
 80146be:	d10e      	bne.n	80146de <__ieee754_pow+0x5e>
 80146c0:	b16a      	cbz	r2, 80146de <__ieee754_pow+0x5e>
 80146c2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80146c6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80146ca:	ea54 030a 	orrs.w	r3, r4, sl
 80146ce:	f000 84a4 	beq.w	801501a <__ieee754_pow+0x99a>
 80146d2:	486e      	ldr	r0, [pc, #440]	; (801488c <__ieee754_pow+0x20c>)
 80146d4:	b011      	add	sp, #68	; 0x44
 80146d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80146da:	f000 bda5 	b.w	8015228 <nan>
 80146de:	2d00      	cmp	r5, #0
 80146e0:	da53      	bge.n	801478a <__ieee754_pow+0x10a>
 80146e2:	4b6b      	ldr	r3, [pc, #428]	; (8014890 <__ieee754_pow+0x210>)
 80146e4:	4598      	cmp	r8, r3
 80146e6:	dc4d      	bgt.n	8014784 <__ieee754_pow+0x104>
 80146e8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80146ec:	4598      	cmp	r8, r3
 80146ee:	dd4c      	ble.n	801478a <__ieee754_pow+0x10a>
 80146f0:	ea4f 5328 	mov.w	r3, r8, asr #20
 80146f4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80146f8:	2b14      	cmp	r3, #20
 80146fa:	dd26      	ble.n	801474a <__ieee754_pow+0xca>
 80146fc:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8014700:	fa22 f103 	lsr.w	r1, r2, r3
 8014704:	fa01 f303 	lsl.w	r3, r1, r3
 8014708:	4293      	cmp	r3, r2
 801470a:	d13e      	bne.n	801478a <__ieee754_pow+0x10a>
 801470c:	f001 0101 	and.w	r1, r1, #1
 8014710:	f1c1 0b02 	rsb	fp, r1, #2
 8014714:	2a00      	cmp	r2, #0
 8014716:	d15b      	bne.n	80147d0 <__ieee754_pow+0x150>
 8014718:	4b5b      	ldr	r3, [pc, #364]	; (8014888 <__ieee754_pow+0x208>)
 801471a:	4598      	cmp	r8, r3
 801471c:	d124      	bne.n	8014768 <__ieee754_pow+0xe8>
 801471e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8014722:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8014726:	ea53 030a 	orrs.w	r3, r3, sl
 801472a:	f000 8476 	beq.w	801501a <__ieee754_pow+0x99a>
 801472e:	4b59      	ldr	r3, [pc, #356]	; (8014894 <__ieee754_pow+0x214>)
 8014730:	429c      	cmp	r4, r3
 8014732:	dd2d      	ble.n	8014790 <__ieee754_pow+0x110>
 8014734:	f1b9 0f00 	cmp.w	r9, #0
 8014738:	f280 8473 	bge.w	8015022 <__ieee754_pow+0x9a2>
 801473c:	2000      	movs	r0, #0
 801473e:	2100      	movs	r1, #0
 8014740:	ec41 0b10 	vmov	d0, r0, r1
 8014744:	b011      	add	sp, #68	; 0x44
 8014746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801474a:	2a00      	cmp	r2, #0
 801474c:	d13e      	bne.n	80147cc <__ieee754_pow+0x14c>
 801474e:	f1c3 0314 	rsb	r3, r3, #20
 8014752:	fa48 f103 	asr.w	r1, r8, r3
 8014756:	fa01 f303 	lsl.w	r3, r1, r3
 801475a:	4543      	cmp	r3, r8
 801475c:	f040 8469 	bne.w	8015032 <__ieee754_pow+0x9b2>
 8014760:	f001 0101 	and.w	r1, r1, #1
 8014764:	f1c1 0b02 	rsb	fp, r1, #2
 8014768:	4b4b      	ldr	r3, [pc, #300]	; (8014898 <__ieee754_pow+0x218>)
 801476a:	4598      	cmp	r8, r3
 801476c:	d118      	bne.n	80147a0 <__ieee754_pow+0x120>
 801476e:	f1b9 0f00 	cmp.w	r9, #0
 8014772:	f280 845a 	bge.w	801502a <__ieee754_pow+0x9aa>
 8014776:	4948      	ldr	r1, [pc, #288]	; (8014898 <__ieee754_pow+0x218>)
 8014778:	4632      	mov	r2, r6
 801477a:	463b      	mov	r3, r7
 801477c:	2000      	movs	r0, #0
 801477e:	f7ec f88d 	bl	800089c <__aeabi_ddiv>
 8014782:	e7dd      	b.n	8014740 <__ieee754_pow+0xc0>
 8014784:	f04f 0b02 	mov.w	fp, #2
 8014788:	e7c4      	b.n	8014714 <__ieee754_pow+0x94>
 801478a:	f04f 0b00 	mov.w	fp, #0
 801478e:	e7c1      	b.n	8014714 <__ieee754_pow+0x94>
 8014790:	f1b9 0f00 	cmp.w	r9, #0
 8014794:	dad2      	bge.n	801473c <__ieee754_pow+0xbc>
 8014796:	e9dd 0300 	ldrd	r0, r3, [sp]
 801479a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801479e:	e7cf      	b.n	8014740 <__ieee754_pow+0xc0>
 80147a0:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80147a4:	d106      	bne.n	80147b4 <__ieee754_pow+0x134>
 80147a6:	4632      	mov	r2, r6
 80147a8:	463b      	mov	r3, r7
 80147aa:	4610      	mov	r0, r2
 80147ac:	4619      	mov	r1, r3
 80147ae:	f7eb ff4b 	bl	8000648 <__aeabi_dmul>
 80147b2:	e7c5      	b.n	8014740 <__ieee754_pow+0xc0>
 80147b4:	4b39      	ldr	r3, [pc, #228]	; (801489c <__ieee754_pow+0x21c>)
 80147b6:	4599      	cmp	r9, r3
 80147b8:	d10a      	bne.n	80147d0 <__ieee754_pow+0x150>
 80147ba:	2d00      	cmp	r5, #0
 80147bc:	db08      	blt.n	80147d0 <__ieee754_pow+0x150>
 80147be:	ec47 6b10 	vmov	d0, r6, r7
 80147c2:	b011      	add	sp, #68	; 0x44
 80147c4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80147c8:	f000 bc68 	b.w	801509c <__ieee754_sqrt>
 80147cc:	f04f 0b00 	mov.w	fp, #0
 80147d0:	ec47 6b10 	vmov	d0, r6, r7
 80147d4:	f000 fd12 	bl	80151fc <fabs>
 80147d8:	ec51 0b10 	vmov	r0, r1, d0
 80147dc:	f1ba 0f00 	cmp.w	sl, #0
 80147e0:	d127      	bne.n	8014832 <__ieee754_pow+0x1b2>
 80147e2:	b124      	cbz	r4, 80147ee <__ieee754_pow+0x16e>
 80147e4:	4b2c      	ldr	r3, [pc, #176]	; (8014898 <__ieee754_pow+0x218>)
 80147e6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80147ea:	429a      	cmp	r2, r3
 80147ec:	d121      	bne.n	8014832 <__ieee754_pow+0x1b2>
 80147ee:	f1b9 0f00 	cmp.w	r9, #0
 80147f2:	da05      	bge.n	8014800 <__ieee754_pow+0x180>
 80147f4:	4602      	mov	r2, r0
 80147f6:	460b      	mov	r3, r1
 80147f8:	2000      	movs	r0, #0
 80147fa:	4927      	ldr	r1, [pc, #156]	; (8014898 <__ieee754_pow+0x218>)
 80147fc:	f7ec f84e 	bl	800089c <__aeabi_ddiv>
 8014800:	2d00      	cmp	r5, #0
 8014802:	da9d      	bge.n	8014740 <__ieee754_pow+0xc0>
 8014804:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8014808:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801480c:	ea54 030b 	orrs.w	r3, r4, fp
 8014810:	d108      	bne.n	8014824 <__ieee754_pow+0x1a4>
 8014812:	4602      	mov	r2, r0
 8014814:	460b      	mov	r3, r1
 8014816:	4610      	mov	r0, r2
 8014818:	4619      	mov	r1, r3
 801481a:	f7eb fd5d 	bl	80002d8 <__aeabi_dsub>
 801481e:	4602      	mov	r2, r0
 8014820:	460b      	mov	r3, r1
 8014822:	e7ac      	b.n	801477e <__ieee754_pow+0xfe>
 8014824:	f1bb 0f01 	cmp.w	fp, #1
 8014828:	d18a      	bne.n	8014740 <__ieee754_pow+0xc0>
 801482a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801482e:	4619      	mov	r1, r3
 8014830:	e786      	b.n	8014740 <__ieee754_pow+0xc0>
 8014832:	0fed      	lsrs	r5, r5, #31
 8014834:	1e6b      	subs	r3, r5, #1
 8014836:	930d      	str	r3, [sp, #52]	; 0x34
 8014838:	ea5b 0303 	orrs.w	r3, fp, r3
 801483c:	d102      	bne.n	8014844 <__ieee754_pow+0x1c4>
 801483e:	4632      	mov	r2, r6
 8014840:	463b      	mov	r3, r7
 8014842:	e7e8      	b.n	8014816 <__ieee754_pow+0x196>
 8014844:	4b16      	ldr	r3, [pc, #88]	; (80148a0 <__ieee754_pow+0x220>)
 8014846:	4598      	cmp	r8, r3
 8014848:	f340 80fe 	ble.w	8014a48 <__ieee754_pow+0x3c8>
 801484c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8014850:	4598      	cmp	r8, r3
 8014852:	dd0a      	ble.n	801486a <__ieee754_pow+0x1ea>
 8014854:	4b0f      	ldr	r3, [pc, #60]	; (8014894 <__ieee754_pow+0x214>)
 8014856:	429c      	cmp	r4, r3
 8014858:	dc0d      	bgt.n	8014876 <__ieee754_pow+0x1f6>
 801485a:	f1b9 0f00 	cmp.w	r9, #0
 801485e:	f6bf af6d 	bge.w	801473c <__ieee754_pow+0xbc>
 8014862:	a307      	add	r3, pc, #28	; (adr r3, 8014880 <__ieee754_pow+0x200>)
 8014864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014868:	e79f      	b.n	80147aa <__ieee754_pow+0x12a>
 801486a:	4b0e      	ldr	r3, [pc, #56]	; (80148a4 <__ieee754_pow+0x224>)
 801486c:	429c      	cmp	r4, r3
 801486e:	ddf4      	ble.n	801485a <__ieee754_pow+0x1da>
 8014870:	4b09      	ldr	r3, [pc, #36]	; (8014898 <__ieee754_pow+0x218>)
 8014872:	429c      	cmp	r4, r3
 8014874:	dd18      	ble.n	80148a8 <__ieee754_pow+0x228>
 8014876:	f1b9 0f00 	cmp.w	r9, #0
 801487a:	dcf2      	bgt.n	8014862 <__ieee754_pow+0x1e2>
 801487c:	e75e      	b.n	801473c <__ieee754_pow+0xbc>
 801487e:	bf00      	nop
 8014880:	8800759c 	.word	0x8800759c
 8014884:	7e37e43c 	.word	0x7e37e43c
 8014888:	7ff00000 	.word	0x7ff00000
 801488c:	08016a81 	.word	0x08016a81
 8014890:	433fffff 	.word	0x433fffff
 8014894:	3fefffff 	.word	0x3fefffff
 8014898:	3ff00000 	.word	0x3ff00000
 801489c:	3fe00000 	.word	0x3fe00000
 80148a0:	41e00000 	.word	0x41e00000
 80148a4:	3feffffe 	.word	0x3feffffe
 80148a8:	2200      	movs	r2, #0
 80148aa:	4b63      	ldr	r3, [pc, #396]	; (8014a38 <__ieee754_pow+0x3b8>)
 80148ac:	f7eb fd14 	bl	80002d8 <__aeabi_dsub>
 80148b0:	a355      	add	r3, pc, #340	; (adr r3, 8014a08 <__ieee754_pow+0x388>)
 80148b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148b6:	4604      	mov	r4, r0
 80148b8:	460d      	mov	r5, r1
 80148ba:	f7eb fec5 	bl	8000648 <__aeabi_dmul>
 80148be:	a354      	add	r3, pc, #336	; (adr r3, 8014a10 <__ieee754_pow+0x390>)
 80148c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148c4:	4606      	mov	r6, r0
 80148c6:	460f      	mov	r7, r1
 80148c8:	4620      	mov	r0, r4
 80148ca:	4629      	mov	r1, r5
 80148cc:	f7eb febc 	bl	8000648 <__aeabi_dmul>
 80148d0:	2200      	movs	r2, #0
 80148d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80148d6:	4b59      	ldr	r3, [pc, #356]	; (8014a3c <__ieee754_pow+0x3bc>)
 80148d8:	4620      	mov	r0, r4
 80148da:	4629      	mov	r1, r5
 80148dc:	f7eb feb4 	bl	8000648 <__aeabi_dmul>
 80148e0:	4602      	mov	r2, r0
 80148e2:	460b      	mov	r3, r1
 80148e4:	a14c      	add	r1, pc, #304	; (adr r1, 8014a18 <__ieee754_pow+0x398>)
 80148e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80148ea:	f7eb fcf5 	bl	80002d8 <__aeabi_dsub>
 80148ee:	4622      	mov	r2, r4
 80148f0:	462b      	mov	r3, r5
 80148f2:	f7eb fea9 	bl	8000648 <__aeabi_dmul>
 80148f6:	4602      	mov	r2, r0
 80148f8:	460b      	mov	r3, r1
 80148fa:	2000      	movs	r0, #0
 80148fc:	4950      	ldr	r1, [pc, #320]	; (8014a40 <__ieee754_pow+0x3c0>)
 80148fe:	f7eb fceb 	bl	80002d8 <__aeabi_dsub>
 8014902:	4622      	mov	r2, r4
 8014904:	462b      	mov	r3, r5
 8014906:	4680      	mov	r8, r0
 8014908:	4689      	mov	r9, r1
 801490a:	4620      	mov	r0, r4
 801490c:	4629      	mov	r1, r5
 801490e:	f7eb fe9b 	bl	8000648 <__aeabi_dmul>
 8014912:	4602      	mov	r2, r0
 8014914:	460b      	mov	r3, r1
 8014916:	4640      	mov	r0, r8
 8014918:	4649      	mov	r1, r9
 801491a:	f7eb fe95 	bl	8000648 <__aeabi_dmul>
 801491e:	a340      	add	r3, pc, #256	; (adr r3, 8014a20 <__ieee754_pow+0x3a0>)
 8014920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014924:	f7eb fe90 	bl	8000648 <__aeabi_dmul>
 8014928:	4602      	mov	r2, r0
 801492a:	460b      	mov	r3, r1
 801492c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014930:	f7eb fcd2 	bl	80002d8 <__aeabi_dsub>
 8014934:	4602      	mov	r2, r0
 8014936:	460b      	mov	r3, r1
 8014938:	4604      	mov	r4, r0
 801493a:	460d      	mov	r5, r1
 801493c:	4630      	mov	r0, r6
 801493e:	4639      	mov	r1, r7
 8014940:	f7eb fccc 	bl	80002dc <__adddf3>
 8014944:	2000      	movs	r0, #0
 8014946:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801494a:	4632      	mov	r2, r6
 801494c:	463b      	mov	r3, r7
 801494e:	f7eb fcc3 	bl	80002d8 <__aeabi_dsub>
 8014952:	4602      	mov	r2, r0
 8014954:	460b      	mov	r3, r1
 8014956:	4620      	mov	r0, r4
 8014958:	4629      	mov	r1, r5
 801495a:	f7eb fcbd 	bl	80002d8 <__aeabi_dsub>
 801495e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014960:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8014964:	4313      	orrs	r3, r2
 8014966:	4606      	mov	r6, r0
 8014968:	460f      	mov	r7, r1
 801496a:	f040 81eb 	bne.w	8014d44 <__ieee754_pow+0x6c4>
 801496e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8014a28 <__ieee754_pow+0x3a8>
 8014972:	e9dd 4500 	ldrd	r4, r5, [sp]
 8014976:	2400      	movs	r4, #0
 8014978:	4622      	mov	r2, r4
 801497a:	462b      	mov	r3, r5
 801497c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014980:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014984:	f7eb fca8 	bl	80002d8 <__aeabi_dsub>
 8014988:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801498c:	f7eb fe5c 	bl	8000648 <__aeabi_dmul>
 8014990:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014994:	4680      	mov	r8, r0
 8014996:	4689      	mov	r9, r1
 8014998:	4630      	mov	r0, r6
 801499a:	4639      	mov	r1, r7
 801499c:	f7eb fe54 	bl	8000648 <__aeabi_dmul>
 80149a0:	4602      	mov	r2, r0
 80149a2:	460b      	mov	r3, r1
 80149a4:	4640      	mov	r0, r8
 80149a6:	4649      	mov	r1, r9
 80149a8:	f7eb fc98 	bl	80002dc <__adddf3>
 80149ac:	4622      	mov	r2, r4
 80149ae:	462b      	mov	r3, r5
 80149b0:	4680      	mov	r8, r0
 80149b2:	4689      	mov	r9, r1
 80149b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80149b8:	f7eb fe46 	bl	8000648 <__aeabi_dmul>
 80149bc:	460b      	mov	r3, r1
 80149be:	4604      	mov	r4, r0
 80149c0:	460d      	mov	r5, r1
 80149c2:	4602      	mov	r2, r0
 80149c4:	4649      	mov	r1, r9
 80149c6:	4640      	mov	r0, r8
 80149c8:	e9cd 4500 	strd	r4, r5, [sp]
 80149cc:	f7eb fc86 	bl	80002dc <__adddf3>
 80149d0:	4b1c      	ldr	r3, [pc, #112]	; (8014a44 <__ieee754_pow+0x3c4>)
 80149d2:	4299      	cmp	r1, r3
 80149d4:	4606      	mov	r6, r0
 80149d6:	460f      	mov	r7, r1
 80149d8:	468b      	mov	fp, r1
 80149da:	f340 82f7 	ble.w	8014fcc <__ieee754_pow+0x94c>
 80149de:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80149e2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80149e6:	4303      	orrs	r3, r0
 80149e8:	f000 81ea 	beq.w	8014dc0 <__ieee754_pow+0x740>
 80149ec:	a310      	add	r3, pc, #64	; (adr r3, 8014a30 <__ieee754_pow+0x3b0>)
 80149ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80149f6:	f7eb fe27 	bl	8000648 <__aeabi_dmul>
 80149fa:	a30d      	add	r3, pc, #52	; (adr r3, 8014a30 <__ieee754_pow+0x3b0>)
 80149fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a00:	e6d5      	b.n	80147ae <__ieee754_pow+0x12e>
 8014a02:	bf00      	nop
 8014a04:	f3af 8000 	nop.w
 8014a08:	60000000 	.word	0x60000000
 8014a0c:	3ff71547 	.word	0x3ff71547
 8014a10:	f85ddf44 	.word	0xf85ddf44
 8014a14:	3e54ae0b 	.word	0x3e54ae0b
 8014a18:	55555555 	.word	0x55555555
 8014a1c:	3fd55555 	.word	0x3fd55555
 8014a20:	652b82fe 	.word	0x652b82fe
 8014a24:	3ff71547 	.word	0x3ff71547
 8014a28:	00000000 	.word	0x00000000
 8014a2c:	bff00000 	.word	0xbff00000
 8014a30:	8800759c 	.word	0x8800759c
 8014a34:	7e37e43c 	.word	0x7e37e43c
 8014a38:	3ff00000 	.word	0x3ff00000
 8014a3c:	3fd00000 	.word	0x3fd00000
 8014a40:	3fe00000 	.word	0x3fe00000
 8014a44:	408fffff 	.word	0x408fffff
 8014a48:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8014a4c:	f04f 0200 	mov.w	r2, #0
 8014a50:	da05      	bge.n	8014a5e <__ieee754_pow+0x3de>
 8014a52:	4bd3      	ldr	r3, [pc, #844]	; (8014da0 <__ieee754_pow+0x720>)
 8014a54:	f7eb fdf8 	bl	8000648 <__aeabi_dmul>
 8014a58:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8014a5c:	460c      	mov	r4, r1
 8014a5e:	1523      	asrs	r3, r4, #20
 8014a60:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8014a64:	4413      	add	r3, r2
 8014a66:	9309      	str	r3, [sp, #36]	; 0x24
 8014a68:	4bce      	ldr	r3, [pc, #824]	; (8014da4 <__ieee754_pow+0x724>)
 8014a6a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8014a6e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8014a72:	429c      	cmp	r4, r3
 8014a74:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8014a78:	dd08      	ble.n	8014a8c <__ieee754_pow+0x40c>
 8014a7a:	4bcb      	ldr	r3, [pc, #812]	; (8014da8 <__ieee754_pow+0x728>)
 8014a7c:	429c      	cmp	r4, r3
 8014a7e:	f340 815e 	ble.w	8014d3e <__ieee754_pow+0x6be>
 8014a82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014a84:	3301      	adds	r3, #1
 8014a86:	9309      	str	r3, [sp, #36]	; 0x24
 8014a88:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8014a8c:	f04f 0a00 	mov.w	sl, #0
 8014a90:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8014a94:	930c      	str	r3, [sp, #48]	; 0x30
 8014a96:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014a98:	4bc4      	ldr	r3, [pc, #784]	; (8014dac <__ieee754_pow+0x72c>)
 8014a9a:	4413      	add	r3, r2
 8014a9c:	ed93 7b00 	vldr	d7, [r3]
 8014aa0:	4629      	mov	r1, r5
 8014aa2:	ec53 2b17 	vmov	r2, r3, d7
 8014aa6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8014aaa:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8014aae:	f7eb fc13 	bl	80002d8 <__aeabi_dsub>
 8014ab2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8014ab6:	4606      	mov	r6, r0
 8014ab8:	460f      	mov	r7, r1
 8014aba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014abe:	f7eb fc0d 	bl	80002dc <__adddf3>
 8014ac2:	4602      	mov	r2, r0
 8014ac4:	460b      	mov	r3, r1
 8014ac6:	2000      	movs	r0, #0
 8014ac8:	49b9      	ldr	r1, [pc, #740]	; (8014db0 <__ieee754_pow+0x730>)
 8014aca:	f7eb fee7 	bl	800089c <__aeabi_ddiv>
 8014ace:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8014ad2:	4602      	mov	r2, r0
 8014ad4:	460b      	mov	r3, r1
 8014ad6:	4630      	mov	r0, r6
 8014ad8:	4639      	mov	r1, r7
 8014ada:	f7eb fdb5 	bl	8000648 <__aeabi_dmul>
 8014ade:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014ae2:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8014ae6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8014aea:	2300      	movs	r3, #0
 8014aec:	9302      	str	r3, [sp, #8]
 8014aee:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8014af2:	106d      	asrs	r5, r5, #1
 8014af4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8014af8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8014afc:	2200      	movs	r2, #0
 8014afe:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8014b02:	4640      	mov	r0, r8
 8014b04:	4649      	mov	r1, r9
 8014b06:	4614      	mov	r4, r2
 8014b08:	461d      	mov	r5, r3
 8014b0a:	f7eb fd9d 	bl	8000648 <__aeabi_dmul>
 8014b0e:	4602      	mov	r2, r0
 8014b10:	460b      	mov	r3, r1
 8014b12:	4630      	mov	r0, r6
 8014b14:	4639      	mov	r1, r7
 8014b16:	f7eb fbdf 	bl	80002d8 <__aeabi_dsub>
 8014b1a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014b1e:	4606      	mov	r6, r0
 8014b20:	460f      	mov	r7, r1
 8014b22:	4620      	mov	r0, r4
 8014b24:	4629      	mov	r1, r5
 8014b26:	f7eb fbd7 	bl	80002d8 <__aeabi_dsub>
 8014b2a:	4602      	mov	r2, r0
 8014b2c:	460b      	mov	r3, r1
 8014b2e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014b32:	f7eb fbd1 	bl	80002d8 <__aeabi_dsub>
 8014b36:	4642      	mov	r2, r8
 8014b38:	464b      	mov	r3, r9
 8014b3a:	f7eb fd85 	bl	8000648 <__aeabi_dmul>
 8014b3e:	4602      	mov	r2, r0
 8014b40:	460b      	mov	r3, r1
 8014b42:	4630      	mov	r0, r6
 8014b44:	4639      	mov	r1, r7
 8014b46:	f7eb fbc7 	bl	80002d8 <__aeabi_dsub>
 8014b4a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8014b4e:	f7eb fd7b 	bl	8000648 <__aeabi_dmul>
 8014b52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014b56:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8014b5a:	4610      	mov	r0, r2
 8014b5c:	4619      	mov	r1, r3
 8014b5e:	f7eb fd73 	bl	8000648 <__aeabi_dmul>
 8014b62:	a37b      	add	r3, pc, #492	; (adr r3, 8014d50 <__ieee754_pow+0x6d0>)
 8014b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b68:	4604      	mov	r4, r0
 8014b6a:	460d      	mov	r5, r1
 8014b6c:	f7eb fd6c 	bl	8000648 <__aeabi_dmul>
 8014b70:	a379      	add	r3, pc, #484	; (adr r3, 8014d58 <__ieee754_pow+0x6d8>)
 8014b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b76:	f7eb fbb1 	bl	80002dc <__adddf3>
 8014b7a:	4622      	mov	r2, r4
 8014b7c:	462b      	mov	r3, r5
 8014b7e:	f7eb fd63 	bl	8000648 <__aeabi_dmul>
 8014b82:	a377      	add	r3, pc, #476	; (adr r3, 8014d60 <__ieee754_pow+0x6e0>)
 8014b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b88:	f7eb fba8 	bl	80002dc <__adddf3>
 8014b8c:	4622      	mov	r2, r4
 8014b8e:	462b      	mov	r3, r5
 8014b90:	f7eb fd5a 	bl	8000648 <__aeabi_dmul>
 8014b94:	a374      	add	r3, pc, #464	; (adr r3, 8014d68 <__ieee754_pow+0x6e8>)
 8014b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b9a:	f7eb fb9f 	bl	80002dc <__adddf3>
 8014b9e:	4622      	mov	r2, r4
 8014ba0:	462b      	mov	r3, r5
 8014ba2:	f7eb fd51 	bl	8000648 <__aeabi_dmul>
 8014ba6:	a372      	add	r3, pc, #456	; (adr r3, 8014d70 <__ieee754_pow+0x6f0>)
 8014ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014bac:	f7eb fb96 	bl	80002dc <__adddf3>
 8014bb0:	4622      	mov	r2, r4
 8014bb2:	462b      	mov	r3, r5
 8014bb4:	f7eb fd48 	bl	8000648 <__aeabi_dmul>
 8014bb8:	a36f      	add	r3, pc, #444	; (adr r3, 8014d78 <__ieee754_pow+0x6f8>)
 8014bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014bbe:	f7eb fb8d 	bl	80002dc <__adddf3>
 8014bc2:	4622      	mov	r2, r4
 8014bc4:	4606      	mov	r6, r0
 8014bc6:	460f      	mov	r7, r1
 8014bc8:	462b      	mov	r3, r5
 8014bca:	4620      	mov	r0, r4
 8014bcc:	4629      	mov	r1, r5
 8014bce:	f7eb fd3b 	bl	8000648 <__aeabi_dmul>
 8014bd2:	4602      	mov	r2, r0
 8014bd4:	460b      	mov	r3, r1
 8014bd6:	4630      	mov	r0, r6
 8014bd8:	4639      	mov	r1, r7
 8014bda:	f7eb fd35 	bl	8000648 <__aeabi_dmul>
 8014bde:	4642      	mov	r2, r8
 8014be0:	4604      	mov	r4, r0
 8014be2:	460d      	mov	r5, r1
 8014be4:	464b      	mov	r3, r9
 8014be6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014bea:	f7eb fb77 	bl	80002dc <__adddf3>
 8014bee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014bf2:	f7eb fd29 	bl	8000648 <__aeabi_dmul>
 8014bf6:	4622      	mov	r2, r4
 8014bf8:	462b      	mov	r3, r5
 8014bfa:	f7eb fb6f 	bl	80002dc <__adddf3>
 8014bfe:	4642      	mov	r2, r8
 8014c00:	4606      	mov	r6, r0
 8014c02:	460f      	mov	r7, r1
 8014c04:	464b      	mov	r3, r9
 8014c06:	4640      	mov	r0, r8
 8014c08:	4649      	mov	r1, r9
 8014c0a:	f7eb fd1d 	bl	8000648 <__aeabi_dmul>
 8014c0e:	2200      	movs	r2, #0
 8014c10:	4b68      	ldr	r3, [pc, #416]	; (8014db4 <__ieee754_pow+0x734>)
 8014c12:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8014c16:	f7eb fb61 	bl	80002dc <__adddf3>
 8014c1a:	4632      	mov	r2, r6
 8014c1c:	463b      	mov	r3, r7
 8014c1e:	f7eb fb5d 	bl	80002dc <__adddf3>
 8014c22:	9802      	ldr	r0, [sp, #8]
 8014c24:	460d      	mov	r5, r1
 8014c26:	4604      	mov	r4, r0
 8014c28:	4602      	mov	r2, r0
 8014c2a:	460b      	mov	r3, r1
 8014c2c:	4640      	mov	r0, r8
 8014c2e:	4649      	mov	r1, r9
 8014c30:	f7eb fd0a 	bl	8000648 <__aeabi_dmul>
 8014c34:	2200      	movs	r2, #0
 8014c36:	4680      	mov	r8, r0
 8014c38:	4689      	mov	r9, r1
 8014c3a:	4b5e      	ldr	r3, [pc, #376]	; (8014db4 <__ieee754_pow+0x734>)
 8014c3c:	4620      	mov	r0, r4
 8014c3e:	4629      	mov	r1, r5
 8014c40:	f7eb fb4a 	bl	80002d8 <__aeabi_dsub>
 8014c44:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8014c48:	f7eb fb46 	bl	80002d8 <__aeabi_dsub>
 8014c4c:	4602      	mov	r2, r0
 8014c4e:	460b      	mov	r3, r1
 8014c50:	4630      	mov	r0, r6
 8014c52:	4639      	mov	r1, r7
 8014c54:	f7eb fb40 	bl	80002d8 <__aeabi_dsub>
 8014c58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014c5c:	f7eb fcf4 	bl	8000648 <__aeabi_dmul>
 8014c60:	4622      	mov	r2, r4
 8014c62:	4606      	mov	r6, r0
 8014c64:	460f      	mov	r7, r1
 8014c66:	462b      	mov	r3, r5
 8014c68:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014c6c:	f7eb fcec 	bl	8000648 <__aeabi_dmul>
 8014c70:	4602      	mov	r2, r0
 8014c72:	460b      	mov	r3, r1
 8014c74:	4630      	mov	r0, r6
 8014c76:	4639      	mov	r1, r7
 8014c78:	f7eb fb30 	bl	80002dc <__adddf3>
 8014c7c:	4606      	mov	r6, r0
 8014c7e:	460f      	mov	r7, r1
 8014c80:	4602      	mov	r2, r0
 8014c82:	460b      	mov	r3, r1
 8014c84:	4640      	mov	r0, r8
 8014c86:	4649      	mov	r1, r9
 8014c88:	f7eb fb28 	bl	80002dc <__adddf3>
 8014c8c:	9802      	ldr	r0, [sp, #8]
 8014c8e:	a33c      	add	r3, pc, #240	; (adr r3, 8014d80 <__ieee754_pow+0x700>)
 8014c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c94:	4604      	mov	r4, r0
 8014c96:	460d      	mov	r5, r1
 8014c98:	f7eb fcd6 	bl	8000648 <__aeabi_dmul>
 8014c9c:	4642      	mov	r2, r8
 8014c9e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8014ca2:	464b      	mov	r3, r9
 8014ca4:	4620      	mov	r0, r4
 8014ca6:	4629      	mov	r1, r5
 8014ca8:	f7eb fb16 	bl	80002d8 <__aeabi_dsub>
 8014cac:	4602      	mov	r2, r0
 8014cae:	460b      	mov	r3, r1
 8014cb0:	4630      	mov	r0, r6
 8014cb2:	4639      	mov	r1, r7
 8014cb4:	f7eb fb10 	bl	80002d8 <__aeabi_dsub>
 8014cb8:	a333      	add	r3, pc, #204	; (adr r3, 8014d88 <__ieee754_pow+0x708>)
 8014cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cbe:	f7eb fcc3 	bl	8000648 <__aeabi_dmul>
 8014cc2:	a333      	add	r3, pc, #204	; (adr r3, 8014d90 <__ieee754_pow+0x710>)
 8014cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cc8:	4606      	mov	r6, r0
 8014cca:	460f      	mov	r7, r1
 8014ccc:	4620      	mov	r0, r4
 8014cce:	4629      	mov	r1, r5
 8014cd0:	f7eb fcba 	bl	8000648 <__aeabi_dmul>
 8014cd4:	4602      	mov	r2, r0
 8014cd6:	460b      	mov	r3, r1
 8014cd8:	4630      	mov	r0, r6
 8014cda:	4639      	mov	r1, r7
 8014cdc:	f7eb fafe 	bl	80002dc <__adddf3>
 8014ce0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014ce2:	4b35      	ldr	r3, [pc, #212]	; (8014db8 <__ieee754_pow+0x738>)
 8014ce4:	4413      	add	r3, r2
 8014ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cea:	f7eb faf7 	bl	80002dc <__adddf3>
 8014cee:	4604      	mov	r4, r0
 8014cf0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014cf2:	460d      	mov	r5, r1
 8014cf4:	f7eb fc3e 	bl	8000574 <__aeabi_i2d>
 8014cf8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014cfa:	4b30      	ldr	r3, [pc, #192]	; (8014dbc <__ieee754_pow+0x73c>)
 8014cfc:	4413      	add	r3, r2
 8014cfe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014d02:	4606      	mov	r6, r0
 8014d04:	460f      	mov	r7, r1
 8014d06:	4622      	mov	r2, r4
 8014d08:	462b      	mov	r3, r5
 8014d0a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014d0e:	f7eb fae5 	bl	80002dc <__adddf3>
 8014d12:	4642      	mov	r2, r8
 8014d14:	464b      	mov	r3, r9
 8014d16:	f7eb fae1 	bl	80002dc <__adddf3>
 8014d1a:	4632      	mov	r2, r6
 8014d1c:	463b      	mov	r3, r7
 8014d1e:	f7eb fadd 	bl	80002dc <__adddf3>
 8014d22:	9802      	ldr	r0, [sp, #8]
 8014d24:	4632      	mov	r2, r6
 8014d26:	463b      	mov	r3, r7
 8014d28:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014d2c:	f7eb fad4 	bl	80002d8 <__aeabi_dsub>
 8014d30:	4642      	mov	r2, r8
 8014d32:	464b      	mov	r3, r9
 8014d34:	f7eb fad0 	bl	80002d8 <__aeabi_dsub>
 8014d38:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014d3c:	e607      	b.n	801494e <__ieee754_pow+0x2ce>
 8014d3e:	f04f 0a01 	mov.w	sl, #1
 8014d42:	e6a5      	b.n	8014a90 <__ieee754_pow+0x410>
 8014d44:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8014d98 <__ieee754_pow+0x718>
 8014d48:	e613      	b.n	8014972 <__ieee754_pow+0x2f2>
 8014d4a:	bf00      	nop
 8014d4c:	f3af 8000 	nop.w
 8014d50:	4a454eef 	.word	0x4a454eef
 8014d54:	3fca7e28 	.word	0x3fca7e28
 8014d58:	93c9db65 	.word	0x93c9db65
 8014d5c:	3fcd864a 	.word	0x3fcd864a
 8014d60:	a91d4101 	.word	0xa91d4101
 8014d64:	3fd17460 	.word	0x3fd17460
 8014d68:	518f264d 	.word	0x518f264d
 8014d6c:	3fd55555 	.word	0x3fd55555
 8014d70:	db6fabff 	.word	0xdb6fabff
 8014d74:	3fdb6db6 	.word	0x3fdb6db6
 8014d78:	33333303 	.word	0x33333303
 8014d7c:	3fe33333 	.word	0x3fe33333
 8014d80:	e0000000 	.word	0xe0000000
 8014d84:	3feec709 	.word	0x3feec709
 8014d88:	dc3a03fd 	.word	0xdc3a03fd
 8014d8c:	3feec709 	.word	0x3feec709
 8014d90:	145b01f5 	.word	0x145b01f5
 8014d94:	be3e2fe0 	.word	0xbe3e2fe0
 8014d98:	00000000 	.word	0x00000000
 8014d9c:	3ff00000 	.word	0x3ff00000
 8014da0:	43400000 	.word	0x43400000
 8014da4:	0003988e 	.word	0x0003988e
 8014da8:	000bb679 	.word	0x000bb679
 8014dac:	08016ba8 	.word	0x08016ba8
 8014db0:	3ff00000 	.word	0x3ff00000
 8014db4:	40080000 	.word	0x40080000
 8014db8:	08016bc8 	.word	0x08016bc8
 8014dbc:	08016bb8 	.word	0x08016bb8
 8014dc0:	a3b4      	add	r3, pc, #720	; (adr r3, 8015094 <__ieee754_pow+0xa14>)
 8014dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014dc6:	4640      	mov	r0, r8
 8014dc8:	4649      	mov	r1, r9
 8014dca:	f7eb fa87 	bl	80002dc <__adddf3>
 8014dce:	4622      	mov	r2, r4
 8014dd0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014dd4:	462b      	mov	r3, r5
 8014dd6:	4630      	mov	r0, r6
 8014dd8:	4639      	mov	r1, r7
 8014dda:	f7eb fa7d 	bl	80002d8 <__aeabi_dsub>
 8014dde:	4602      	mov	r2, r0
 8014de0:	460b      	mov	r3, r1
 8014de2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014de6:	f7eb febf 	bl	8000b68 <__aeabi_dcmpgt>
 8014dea:	2800      	cmp	r0, #0
 8014dec:	f47f adfe 	bne.w	80149ec <__ieee754_pow+0x36c>
 8014df0:	4aa3      	ldr	r2, [pc, #652]	; (8015080 <__ieee754_pow+0xa00>)
 8014df2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8014df6:	4293      	cmp	r3, r2
 8014df8:	f340 810a 	ble.w	8015010 <__ieee754_pow+0x990>
 8014dfc:	151b      	asrs	r3, r3, #20
 8014dfe:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8014e02:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8014e06:	fa4a f303 	asr.w	r3, sl, r3
 8014e0a:	445b      	add	r3, fp
 8014e0c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8014e10:	4e9c      	ldr	r6, [pc, #624]	; (8015084 <__ieee754_pow+0xa04>)
 8014e12:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8014e16:	4116      	asrs	r6, r2
 8014e18:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8014e1c:	2000      	movs	r0, #0
 8014e1e:	ea23 0106 	bic.w	r1, r3, r6
 8014e22:	f1c2 0214 	rsb	r2, r2, #20
 8014e26:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8014e2a:	fa4a fa02 	asr.w	sl, sl, r2
 8014e2e:	f1bb 0f00 	cmp.w	fp, #0
 8014e32:	4602      	mov	r2, r0
 8014e34:	460b      	mov	r3, r1
 8014e36:	4620      	mov	r0, r4
 8014e38:	4629      	mov	r1, r5
 8014e3a:	bfb8      	it	lt
 8014e3c:	f1ca 0a00 	rsblt	sl, sl, #0
 8014e40:	f7eb fa4a 	bl	80002d8 <__aeabi_dsub>
 8014e44:	e9cd 0100 	strd	r0, r1, [sp]
 8014e48:	4642      	mov	r2, r8
 8014e4a:	464b      	mov	r3, r9
 8014e4c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014e50:	f7eb fa44 	bl	80002dc <__adddf3>
 8014e54:	2000      	movs	r0, #0
 8014e56:	a378      	add	r3, pc, #480	; (adr r3, 8015038 <__ieee754_pow+0x9b8>)
 8014e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e5c:	4604      	mov	r4, r0
 8014e5e:	460d      	mov	r5, r1
 8014e60:	f7eb fbf2 	bl	8000648 <__aeabi_dmul>
 8014e64:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014e68:	4606      	mov	r6, r0
 8014e6a:	460f      	mov	r7, r1
 8014e6c:	4620      	mov	r0, r4
 8014e6e:	4629      	mov	r1, r5
 8014e70:	f7eb fa32 	bl	80002d8 <__aeabi_dsub>
 8014e74:	4602      	mov	r2, r0
 8014e76:	460b      	mov	r3, r1
 8014e78:	4640      	mov	r0, r8
 8014e7a:	4649      	mov	r1, r9
 8014e7c:	f7eb fa2c 	bl	80002d8 <__aeabi_dsub>
 8014e80:	a36f      	add	r3, pc, #444	; (adr r3, 8015040 <__ieee754_pow+0x9c0>)
 8014e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e86:	f7eb fbdf 	bl	8000648 <__aeabi_dmul>
 8014e8a:	a36f      	add	r3, pc, #444	; (adr r3, 8015048 <__ieee754_pow+0x9c8>)
 8014e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e90:	4680      	mov	r8, r0
 8014e92:	4689      	mov	r9, r1
 8014e94:	4620      	mov	r0, r4
 8014e96:	4629      	mov	r1, r5
 8014e98:	f7eb fbd6 	bl	8000648 <__aeabi_dmul>
 8014e9c:	4602      	mov	r2, r0
 8014e9e:	460b      	mov	r3, r1
 8014ea0:	4640      	mov	r0, r8
 8014ea2:	4649      	mov	r1, r9
 8014ea4:	f7eb fa1a 	bl	80002dc <__adddf3>
 8014ea8:	4604      	mov	r4, r0
 8014eaa:	460d      	mov	r5, r1
 8014eac:	4602      	mov	r2, r0
 8014eae:	460b      	mov	r3, r1
 8014eb0:	4630      	mov	r0, r6
 8014eb2:	4639      	mov	r1, r7
 8014eb4:	f7eb fa12 	bl	80002dc <__adddf3>
 8014eb8:	4632      	mov	r2, r6
 8014eba:	463b      	mov	r3, r7
 8014ebc:	4680      	mov	r8, r0
 8014ebe:	4689      	mov	r9, r1
 8014ec0:	f7eb fa0a 	bl	80002d8 <__aeabi_dsub>
 8014ec4:	4602      	mov	r2, r0
 8014ec6:	460b      	mov	r3, r1
 8014ec8:	4620      	mov	r0, r4
 8014eca:	4629      	mov	r1, r5
 8014ecc:	f7eb fa04 	bl	80002d8 <__aeabi_dsub>
 8014ed0:	4642      	mov	r2, r8
 8014ed2:	4606      	mov	r6, r0
 8014ed4:	460f      	mov	r7, r1
 8014ed6:	464b      	mov	r3, r9
 8014ed8:	4640      	mov	r0, r8
 8014eda:	4649      	mov	r1, r9
 8014edc:	f7eb fbb4 	bl	8000648 <__aeabi_dmul>
 8014ee0:	a35b      	add	r3, pc, #364	; (adr r3, 8015050 <__ieee754_pow+0x9d0>)
 8014ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ee6:	4604      	mov	r4, r0
 8014ee8:	460d      	mov	r5, r1
 8014eea:	f7eb fbad 	bl	8000648 <__aeabi_dmul>
 8014eee:	a35a      	add	r3, pc, #360	; (adr r3, 8015058 <__ieee754_pow+0x9d8>)
 8014ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ef4:	f7eb f9f0 	bl	80002d8 <__aeabi_dsub>
 8014ef8:	4622      	mov	r2, r4
 8014efa:	462b      	mov	r3, r5
 8014efc:	f7eb fba4 	bl	8000648 <__aeabi_dmul>
 8014f00:	a357      	add	r3, pc, #348	; (adr r3, 8015060 <__ieee754_pow+0x9e0>)
 8014f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f06:	f7eb f9e9 	bl	80002dc <__adddf3>
 8014f0a:	4622      	mov	r2, r4
 8014f0c:	462b      	mov	r3, r5
 8014f0e:	f7eb fb9b 	bl	8000648 <__aeabi_dmul>
 8014f12:	a355      	add	r3, pc, #340	; (adr r3, 8015068 <__ieee754_pow+0x9e8>)
 8014f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f18:	f7eb f9de 	bl	80002d8 <__aeabi_dsub>
 8014f1c:	4622      	mov	r2, r4
 8014f1e:	462b      	mov	r3, r5
 8014f20:	f7eb fb92 	bl	8000648 <__aeabi_dmul>
 8014f24:	a352      	add	r3, pc, #328	; (adr r3, 8015070 <__ieee754_pow+0x9f0>)
 8014f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f2a:	f7eb f9d7 	bl	80002dc <__adddf3>
 8014f2e:	4622      	mov	r2, r4
 8014f30:	462b      	mov	r3, r5
 8014f32:	f7eb fb89 	bl	8000648 <__aeabi_dmul>
 8014f36:	4602      	mov	r2, r0
 8014f38:	460b      	mov	r3, r1
 8014f3a:	4640      	mov	r0, r8
 8014f3c:	4649      	mov	r1, r9
 8014f3e:	f7eb f9cb 	bl	80002d8 <__aeabi_dsub>
 8014f42:	4604      	mov	r4, r0
 8014f44:	460d      	mov	r5, r1
 8014f46:	4602      	mov	r2, r0
 8014f48:	460b      	mov	r3, r1
 8014f4a:	4640      	mov	r0, r8
 8014f4c:	4649      	mov	r1, r9
 8014f4e:	f7eb fb7b 	bl	8000648 <__aeabi_dmul>
 8014f52:	2200      	movs	r2, #0
 8014f54:	e9cd 0100 	strd	r0, r1, [sp]
 8014f58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014f5c:	4620      	mov	r0, r4
 8014f5e:	4629      	mov	r1, r5
 8014f60:	f7eb f9ba 	bl	80002d8 <__aeabi_dsub>
 8014f64:	4602      	mov	r2, r0
 8014f66:	460b      	mov	r3, r1
 8014f68:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014f6c:	f7eb fc96 	bl	800089c <__aeabi_ddiv>
 8014f70:	4632      	mov	r2, r6
 8014f72:	4604      	mov	r4, r0
 8014f74:	460d      	mov	r5, r1
 8014f76:	463b      	mov	r3, r7
 8014f78:	4640      	mov	r0, r8
 8014f7a:	4649      	mov	r1, r9
 8014f7c:	f7eb fb64 	bl	8000648 <__aeabi_dmul>
 8014f80:	4632      	mov	r2, r6
 8014f82:	463b      	mov	r3, r7
 8014f84:	f7eb f9aa 	bl	80002dc <__adddf3>
 8014f88:	4602      	mov	r2, r0
 8014f8a:	460b      	mov	r3, r1
 8014f8c:	4620      	mov	r0, r4
 8014f8e:	4629      	mov	r1, r5
 8014f90:	f7eb f9a2 	bl	80002d8 <__aeabi_dsub>
 8014f94:	4642      	mov	r2, r8
 8014f96:	464b      	mov	r3, r9
 8014f98:	f7eb f99e 	bl	80002d8 <__aeabi_dsub>
 8014f9c:	4602      	mov	r2, r0
 8014f9e:	460b      	mov	r3, r1
 8014fa0:	2000      	movs	r0, #0
 8014fa2:	4939      	ldr	r1, [pc, #228]	; (8015088 <__ieee754_pow+0xa08>)
 8014fa4:	f7eb f998 	bl	80002d8 <__aeabi_dsub>
 8014fa8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8014fac:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8014fb0:	4602      	mov	r2, r0
 8014fb2:	460b      	mov	r3, r1
 8014fb4:	da2f      	bge.n	8015016 <__ieee754_pow+0x996>
 8014fb6:	4650      	mov	r0, sl
 8014fb8:	ec43 2b10 	vmov	d0, r2, r3
 8014fbc:	f000 f9c0 	bl	8015340 <scalbn>
 8014fc0:	ec51 0b10 	vmov	r0, r1, d0
 8014fc4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014fc8:	f7ff bbf1 	b.w	80147ae <__ieee754_pow+0x12e>
 8014fcc:	4b2f      	ldr	r3, [pc, #188]	; (801508c <__ieee754_pow+0xa0c>)
 8014fce:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8014fd2:	429e      	cmp	r6, r3
 8014fd4:	f77f af0c 	ble.w	8014df0 <__ieee754_pow+0x770>
 8014fd8:	4b2d      	ldr	r3, [pc, #180]	; (8015090 <__ieee754_pow+0xa10>)
 8014fda:	440b      	add	r3, r1
 8014fdc:	4303      	orrs	r3, r0
 8014fde:	d00b      	beq.n	8014ff8 <__ieee754_pow+0x978>
 8014fe0:	a325      	add	r3, pc, #148	; (adr r3, 8015078 <__ieee754_pow+0x9f8>)
 8014fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014fe6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014fea:	f7eb fb2d 	bl	8000648 <__aeabi_dmul>
 8014fee:	a322      	add	r3, pc, #136	; (adr r3, 8015078 <__ieee754_pow+0x9f8>)
 8014ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ff4:	f7ff bbdb 	b.w	80147ae <__ieee754_pow+0x12e>
 8014ff8:	4622      	mov	r2, r4
 8014ffa:	462b      	mov	r3, r5
 8014ffc:	f7eb f96c 	bl	80002d8 <__aeabi_dsub>
 8015000:	4642      	mov	r2, r8
 8015002:	464b      	mov	r3, r9
 8015004:	f7eb fda6 	bl	8000b54 <__aeabi_dcmpge>
 8015008:	2800      	cmp	r0, #0
 801500a:	f43f aef1 	beq.w	8014df0 <__ieee754_pow+0x770>
 801500e:	e7e7      	b.n	8014fe0 <__ieee754_pow+0x960>
 8015010:	f04f 0a00 	mov.w	sl, #0
 8015014:	e718      	b.n	8014e48 <__ieee754_pow+0x7c8>
 8015016:	4621      	mov	r1, r4
 8015018:	e7d4      	b.n	8014fc4 <__ieee754_pow+0x944>
 801501a:	2000      	movs	r0, #0
 801501c:	491a      	ldr	r1, [pc, #104]	; (8015088 <__ieee754_pow+0xa08>)
 801501e:	f7ff bb8f 	b.w	8014740 <__ieee754_pow+0xc0>
 8015022:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015026:	f7ff bb8b 	b.w	8014740 <__ieee754_pow+0xc0>
 801502a:	4630      	mov	r0, r6
 801502c:	4639      	mov	r1, r7
 801502e:	f7ff bb87 	b.w	8014740 <__ieee754_pow+0xc0>
 8015032:	4693      	mov	fp, r2
 8015034:	f7ff bb98 	b.w	8014768 <__ieee754_pow+0xe8>
 8015038:	00000000 	.word	0x00000000
 801503c:	3fe62e43 	.word	0x3fe62e43
 8015040:	fefa39ef 	.word	0xfefa39ef
 8015044:	3fe62e42 	.word	0x3fe62e42
 8015048:	0ca86c39 	.word	0x0ca86c39
 801504c:	be205c61 	.word	0xbe205c61
 8015050:	72bea4d0 	.word	0x72bea4d0
 8015054:	3e663769 	.word	0x3e663769
 8015058:	c5d26bf1 	.word	0xc5d26bf1
 801505c:	3ebbbd41 	.word	0x3ebbbd41
 8015060:	af25de2c 	.word	0xaf25de2c
 8015064:	3f11566a 	.word	0x3f11566a
 8015068:	16bebd93 	.word	0x16bebd93
 801506c:	3f66c16c 	.word	0x3f66c16c
 8015070:	5555553e 	.word	0x5555553e
 8015074:	3fc55555 	.word	0x3fc55555
 8015078:	c2f8f359 	.word	0xc2f8f359
 801507c:	01a56e1f 	.word	0x01a56e1f
 8015080:	3fe00000 	.word	0x3fe00000
 8015084:	000fffff 	.word	0x000fffff
 8015088:	3ff00000 	.word	0x3ff00000
 801508c:	4090cbff 	.word	0x4090cbff
 8015090:	3f6f3400 	.word	0x3f6f3400
 8015094:	652b82fe 	.word	0x652b82fe
 8015098:	3c971547 	.word	0x3c971547

0801509c <__ieee754_sqrt>:
 801509c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80150a0:	4955      	ldr	r1, [pc, #340]	; (80151f8 <__ieee754_sqrt+0x15c>)
 80150a2:	ec55 4b10 	vmov	r4, r5, d0
 80150a6:	43a9      	bics	r1, r5
 80150a8:	462b      	mov	r3, r5
 80150aa:	462a      	mov	r2, r5
 80150ac:	d112      	bne.n	80150d4 <__ieee754_sqrt+0x38>
 80150ae:	ee10 2a10 	vmov	r2, s0
 80150b2:	ee10 0a10 	vmov	r0, s0
 80150b6:	4629      	mov	r1, r5
 80150b8:	f7eb fac6 	bl	8000648 <__aeabi_dmul>
 80150bc:	4602      	mov	r2, r0
 80150be:	460b      	mov	r3, r1
 80150c0:	4620      	mov	r0, r4
 80150c2:	4629      	mov	r1, r5
 80150c4:	f7eb f90a 	bl	80002dc <__adddf3>
 80150c8:	4604      	mov	r4, r0
 80150ca:	460d      	mov	r5, r1
 80150cc:	ec45 4b10 	vmov	d0, r4, r5
 80150d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80150d4:	2d00      	cmp	r5, #0
 80150d6:	ee10 0a10 	vmov	r0, s0
 80150da:	4621      	mov	r1, r4
 80150dc:	dc0f      	bgt.n	80150fe <__ieee754_sqrt+0x62>
 80150de:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80150e2:	4330      	orrs	r0, r6
 80150e4:	d0f2      	beq.n	80150cc <__ieee754_sqrt+0x30>
 80150e6:	b155      	cbz	r5, 80150fe <__ieee754_sqrt+0x62>
 80150e8:	ee10 2a10 	vmov	r2, s0
 80150ec:	4620      	mov	r0, r4
 80150ee:	4629      	mov	r1, r5
 80150f0:	f7eb f8f2 	bl	80002d8 <__aeabi_dsub>
 80150f4:	4602      	mov	r2, r0
 80150f6:	460b      	mov	r3, r1
 80150f8:	f7eb fbd0 	bl	800089c <__aeabi_ddiv>
 80150fc:	e7e4      	b.n	80150c8 <__ieee754_sqrt+0x2c>
 80150fe:	151b      	asrs	r3, r3, #20
 8015100:	d073      	beq.n	80151ea <__ieee754_sqrt+0x14e>
 8015102:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8015106:	07dd      	lsls	r5, r3, #31
 8015108:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801510c:	bf48      	it	mi
 801510e:	0fc8      	lsrmi	r0, r1, #31
 8015110:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8015114:	bf44      	itt	mi
 8015116:	0049      	lslmi	r1, r1, #1
 8015118:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 801511c:	2500      	movs	r5, #0
 801511e:	1058      	asrs	r0, r3, #1
 8015120:	0fcb      	lsrs	r3, r1, #31
 8015122:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8015126:	0049      	lsls	r1, r1, #1
 8015128:	2316      	movs	r3, #22
 801512a:	462c      	mov	r4, r5
 801512c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8015130:	19a7      	adds	r7, r4, r6
 8015132:	4297      	cmp	r7, r2
 8015134:	bfde      	ittt	le
 8015136:	19bc      	addle	r4, r7, r6
 8015138:	1bd2      	suble	r2, r2, r7
 801513a:	19ad      	addle	r5, r5, r6
 801513c:	0fcf      	lsrs	r7, r1, #31
 801513e:	3b01      	subs	r3, #1
 8015140:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8015144:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8015148:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801514c:	d1f0      	bne.n	8015130 <__ieee754_sqrt+0x94>
 801514e:	f04f 0c20 	mov.w	ip, #32
 8015152:	469e      	mov	lr, r3
 8015154:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8015158:	42a2      	cmp	r2, r4
 801515a:	eb06 070e 	add.w	r7, r6, lr
 801515e:	dc02      	bgt.n	8015166 <__ieee754_sqrt+0xca>
 8015160:	d112      	bne.n	8015188 <__ieee754_sqrt+0xec>
 8015162:	428f      	cmp	r7, r1
 8015164:	d810      	bhi.n	8015188 <__ieee754_sqrt+0xec>
 8015166:	2f00      	cmp	r7, #0
 8015168:	eb07 0e06 	add.w	lr, r7, r6
 801516c:	da42      	bge.n	80151f4 <__ieee754_sqrt+0x158>
 801516e:	f1be 0f00 	cmp.w	lr, #0
 8015172:	db3f      	blt.n	80151f4 <__ieee754_sqrt+0x158>
 8015174:	f104 0801 	add.w	r8, r4, #1
 8015178:	1b12      	subs	r2, r2, r4
 801517a:	428f      	cmp	r7, r1
 801517c:	bf88      	it	hi
 801517e:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8015182:	1bc9      	subs	r1, r1, r7
 8015184:	4433      	add	r3, r6
 8015186:	4644      	mov	r4, r8
 8015188:	0052      	lsls	r2, r2, #1
 801518a:	f1bc 0c01 	subs.w	ip, ip, #1
 801518e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8015192:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8015196:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801519a:	d1dd      	bne.n	8015158 <__ieee754_sqrt+0xbc>
 801519c:	430a      	orrs	r2, r1
 801519e:	d006      	beq.n	80151ae <__ieee754_sqrt+0x112>
 80151a0:	1c5c      	adds	r4, r3, #1
 80151a2:	bf13      	iteet	ne
 80151a4:	3301      	addne	r3, #1
 80151a6:	3501      	addeq	r5, #1
 80151a8:	4663      	moveq	r3, ip
 80151aa:	f023 0301 	bicne.w	r3, r3, #1
 80151ae:	106a      	asrs	r2, r5, #1
 80151b0:	085b      	lsrs	r3, r3, #1
 80151b2:	07e9      	lsls	r1, r5, #31
 80151b4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80151b8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80151bc:	bf48      	it	mi
 80151be:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80151c2:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 80151c6:	461c      	mov	r4, r3
 80151c8:	e780      	b.n	80150cc <__ieee754_sqrt+0x30>
 80151ca:	0aca      	lsrs	r2, r1, #11
 80151cc:	3815      	subs	r0, #21
 80151ce:	0549      	lsls	r1, r1, #21
 80151d0:	2a00      	cmp	r2, #0
 80151d2:	d0fa      	beq.n	80151ca <__ieee754_sqrt+0x12e>
 80151d4:	02d6      	lsls	r6, r2, #11
 80151d6:	d50a      	bpl.n	80151ee <__ieee754_sqrt+0x152>
 80151d8:	f1c3 0420 	rsb	r4, r3, #32
 80151dc:	fa21 f404 	lsr.w	r4, r1, r4
 80151e0:	1e5d      	subs	r5, r3, #1
 80151e2:	4099      	lsls	r1, r3
 80151e4:	4322      	orrs	r2, r4
 80151e6:	1b43      	subs	r3, r0, r5
 80151e8:	e78b      	b.n	8015102 <__ieee754_sqrt+0x66>
 80151ea:	4618      	mov	r0, r3
 80151ec:	e7f0      	b.n	80151d0 <__ieee754_sqrt+0x134>
 80151ee:	0052      	lsls	r2, r2, #1
 80151f0:	3301      	adds	r3, #1
 80151f2:	e7ef      	b.n	80151d4 <__ieee754_sqrt+0x138>
 80151f4:	46a0      	mov	r8, r4
 80151f6:	e7bf      	b.n	8015178 <__ieee754_sqrt+0xdc>
 80151f8:	7ff00000 	.word	0x7ff00000

080151fc <fabs>:
 80151fc:	ec51 0b10 	vmov	r0, r1, d0
 8015200:	ee10 2a10 	vmov	r2, s0
 8015204:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8015208:	ec43 2b10 	vmov	d0, r2, r3
 801520c:	4770      	bx	lr

0801520e <finite>:
 801520e:	ee10 3a90 	vmov	r3, s1
 8015212:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8015216:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801521a:	0fc0      	lsrs	r0, r0, #31
 801521c:	4770      	bx	lr

0801521e <matherr>:
 801521e:	2000      	movs	r0, #0
 8015220:	4770      	bx	lr
 8015222:	0000      	movs	r0, r0
 8015224:	0000      	movs	r0, r0
	...

08015228 <nan>:
 8015228:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8015230 <nan+0x8>
 801522c:	4770      	bx	lr
 801522e:	bf00      	nop
 8015230:	00000000 	.word	0x00000000
 8015234:	7ff80000 	.word	0x7ff80000

08015238 <rint>:
 8015238:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801523a:	ec51 0b10 	vmov	r0, r1, d0
 801523e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8015242:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8015246:	2e13      	cmp	r6, #19
 8015248:	460b      	mov	r3, r1
 801524a:	ee10 4a10 	vmov	r4, s0
 801524e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8015252:	dc56      	bgt.n	8015302 <rint+0xca>
 8015254:	2e00      	cmp	r6, #0
 8015256:	da2b      	bge.n	80152b0 <rint+0x78>
 8015258:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 801525c:	4302      	orrs	r2, r0
 801525e:	d023      	beq.n	80152a8 <rint+0x70>
 8015260:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8015264:	4302      	orrs	r2, r0
 8015266:	4254      	negs	r4, r2
 8015268:	4314      	orrs	r4, r2
 801526a:	0c4b      	lsrs	r3, r1, #17
 801526c:	0b24      	lsrs	r4, r4, #12
 801526e:	045b      	lsls	r3, r3, #17
 8015270:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8015274:	ea44 0103 	orr.w	r1, r4, r3
 8015278:	460b      	mov	r3, r1
 801527a:	492f      	ldr	r1, [pc, #188]	; (8015338 <rint+0x100>)
 801527c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8015280:	e9d1 6700 	ldrd	r6, r7, [r1]
 8015284:	4602      	mov	r2, r0
 8015286:	4639      	mov	r1, r7
 8015288:	4630      	mov	r0, r6
 801528a:	f7eb f827 	bl	80002dc <__adddf3>
 801528e:	e9cd 0100 	strd	r0, r1, [sp]
 8015292:	463b      	mov	r3, r7
 8015294:	4632      	mov	r2, r6
 8015296:	e9dd 0100 	ldrd	r0, r1, [sp]
 801529a:	f7eb f81d 	bl	80002d8 <__aeabi_dsub>
 801529e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80152a2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80152a6:	4639      	mov	r1, r7
 80152a8:	ec41 0b10 	vmov	d0, r0, r1
 80152ac:	b003      	add	sp, #12
 80152ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80152b0:	4a22      	ldr	r2, [pc, #136]	; (801533c <rint+0x104>)
 80152b2:	4132      	asrs	r2, r6
 80152b4:	ea01 0702 	and.w	r7, r1, r2
 80152b8:	4307      	orrs	r7, r0
 80152ba:	d0f5      	beq.n	80152a8 <rint+0x70>
 80152bc:	0852      	lsrs	r2, r2, #1
 80152be:	4011      	ands	r1, r2
 80152c0:	430c      	orrs	r4, r1
 80152c2:	d00b      	beq.n	80152dc <rint+0xa4>
 80152c4:	ea23 0202 	bic.w	r2, r3, r2
 80152c8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80152cc:	2e13      	cmp	r6, #19
 80152ce:	fa43 f306 	asr.w	r3, r3, r6
 80152d2:	bf0c      	ite	eq
 80152d4:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 80152d8:	2400      	movne	r4, #0
 80152da:	4313      	orrs	r3, r2
 80152dc:	4916      	ldr	r1, [pc, #88]	; (8015338 <rint+0x100>)
 80152de:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80152e2:	4622      	mov	r2, r4
 80152e4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80152e8:	4620      	mov	r0, r4
 80152ea:	4629      	mov	r1, r5
 80152ec:	f7ea fff6 	bl	80002dc <__adddf3>
 80152f0:	e9cd 0100 	strd	r0, r1, [sp]
 80152f4:	4622      	mov	r2, r4
 80152f6:	462b      	mov	r3, r5
 80152f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80152fc:	f7ea ffec 	bl	80002d8 <__aeabi_dsub>
 8015300:	e7d2      	b.n	80152a8 <rint+0x70>
 8015302:	2e33      	cmp	r6, #51	; 0x33
 8015304:	dd07      	ble.n	8015316 <rint+0xde>
 8015306:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801530a:	d1cd      	bne.n	80152a8 <rint+0x70>
 801530c:	ee10 2a10 	vmov	r2, s0
 8015310:	f7ea ffe4 	bl	80002dc <__adddf3>
 8015314:	e7c8      	b.n	80152a8 <rint+0x70>
 8015316:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 801531a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801531e:	40f2      	lsrs	r2, r6
 8015320:	4210      	tst	r0, r2
 8015322:	d0c1      	beq.n	80152a8 <rint+0x70>
 8015324:	0852      	lsrs	r2, r2, #1
 8015326:	4210      	tst	r0, r2
 8015328:	bf1f      	itttt	ne
 801532a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 801532e:	ea20 0202 	bicne.w	r2, r0, r2
 8015332:	4134      	asrne	r4, r6
 8015334:	4314      	orrne	r4, r2
 8015336:	e7d1      	b.n	80152dc <rint+0xa4>
 8015338:	08016bd8 	.word	0x08016bd8
 801533c:	000fffff 	.word	0x000fffff

08015340 <scalbn>:
 8015340:	b570      	push	{r4, r5, r6, lr}
 8015342:	ec55 4b10 	vmov	r4, r5, d0
 8015346:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801534a:	4606      	mov	r6, r0
 801534c:	462b      	mov	r3, r5
 801534e:	b9aa      	cbnz	r2, 801537c <scalbn+0x3c>
 8015350:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8015354:	4323      	orrs	r3, r4
 8015356:	d03b      	beq.n	80153d0 <scalbn+0x90>
 8015358:	4b31      	ldr	r3, [pc, #196]	; (8015420 <scalbn+0xe0>)
 801535a:	4629      	mov	r1, r5
 801535c:	2200      	movs	r2, #0
 801535e:	ee10 0a10 	vmov	r0, s0
 8015362:	f7eb f971 	bl	8000648 <__aeabi_dmul>
 8015366:	4b2f      	ldr	r3, [pc, #188]	; (8015424 <scalbn+0xe4>)
 8015368:	429e      	cmp	r6, r3
 801536a:	4604      	mov	r4, r0
 801536c:	460d      	mov	r5, r1
 801536e:	da12      	bge.n	8015396 <scalbn+0x56>
 8015370:	a327      	add	r3, pc, #156	; (adr r3, 8015410 <scalbn+0xd0>)
 8015372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015376:	f7eb f967 	bl	8000648 <__aeabi_dmul>
 801537a:	e009      	b.n	8015390 <scalbn+0x50>
 801537c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8015380:	428a      	cmp	r2, r1
 8015382:	d10c      	bne.n	801539e <scalbn+0x5e>
 8015384:	ee10 2a10 	vmov	r2, s0
 8015388:	4620      	mov	r0, r4
 801538a:	4629      	mov	r1, r5
 801538c:	f7ea ffa6 	bl	80002dc <__adddf3>
 8015390:	4604      	mov	r4, r0
 8015392:	460d      	mov	r5, r1
 8015394:	e01c      	b.n	80153d0 <scalbn+0x90>
 8015396:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801539a:	460b      	mov	r3, r1
 801539c:	3a36      	subs	r2, #54	; 0x36
 801539e:	4432      	add	r2, r6
 80153a0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80153a4:	428a      	cmp	r2, r1
 80153a6:	dd0b      	ble.n	80153c0 <scalbn+0x80>
 80153a8:	ec45 4b11 	vmov	d1, r4, r5
 80153ac:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8015418 <scalbn+0xd8>
 80153b0:	f000 f9f0 	bl	8015794 <copysign>
 80153b4:	a318      	add	r3, pc, #96	; (adr r3, 8015418 <scalbn+0xd8>)
 80153b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153ba:	ec51 0b10 	vmov	r0, r1, d0
 80153be:	e7da      	b.n	8015376 <scalbn+0x36>
 80153c0:	2a00      	cmp	r2, #0
 80153c2:	dd08      	ble.n	80153d6 <scalbn+0x96>
 80153c4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80153c8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80153cc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80153d0:	ec45 4b10 	vmov	d0, r4, r5
 80153d4:	bd70      	pop	{r4, r5, r6, pc}
 80153d6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80153da:	da0d      	bge.n	80153f8 <scalbn+0xb8>
 80153dc:	f24c 3350 	movw	r3, #50000	; 0xc350
 80153e0:	429e      	cmp	r6, r3
 80153e2:	ec45 4b11 	vmov	d1, r4, r5
 80153e6:	dce1      	bgt.n	80153ac <scalbn+0x6c>
 80153e8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8015410 <scalbn+0xd0>
 80153ec:	f000 f9d2 	bl	8015794 <copysign>
 80153f0:	a307      	add	r3, pc, #28	; (adr r3, 8015410 <scalbn+0xd0>)
 80153f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153f6:	e7e0      	b.n	80153ba <scalbn+0x7a>
 80153f8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80153fc:	3236      	adds	r2, #54	; 0x36
 80153fe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8015402:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8015406:	4620      	mov	r0, r4
 8015408:	4629      	mov	r1, r5
 801540a:	2200      	movs	r2, #0
 801540c:	4b06      	ldr	r3, [pc, #24]	; (8015428 <scalbn+0xe8>)
 801540e:	e7b2      	b.n	8015376 <scalbn+0x36>
 8015410:	c2f8f359 	.word	0xc2f8f359
 8015414:	01a56e1f 	.word	0x01a56e1f
 8015418:	8800759c 	.word	0x8800759c
 801541c:	7e37e43c 	.word	0x7e37e43c
 8015420:	43500000 	.word	0x43500000
 8015424:	ffff3cb0 	.word	0xffff3cb0
 8015428:	3c900000 	.word	0x3c900000
 801542c:	00000000 	.word	0x00000000

08015430 <__ieee754_log>:
 8015430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015434:	ec51 0b10 	vmov	r0, r1, d0
 8015438:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 801543c:	b087      	sub	sp, #28
 801543e:	460d      	mov	r5, r1
 8015440:	da27      	bge.n	8015492 <__ieee754_log+0x62>
 8015442:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8015446:	4303      	orrs	r3, r0
 8015448:	ee10 2a10 	vmov	r2, s0
 801544c:	d10a      	bne.n	8015464 <__ieee754_log+0x34>
 801544e:	49cc      	ldr	r1, [pc, #816]	; (8015780 <__ieee754_log+0x350>)
 8015450:	2200      	movs	r2, #0
 8015452:	2300      	movs	r3, #0
 8015454:	2000      	movs	r0, #0
 8015456:	f7eb fa21 	bl	800089c <__aeabi_ddiv>
 801545a:	ec41 0b10 	vmov	d0, r0, r1
 801545e:	b007      	add	sp, #28
 8015460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015464:	2900      	cmp	r1, #0
 8015466:	da05      	bge.n	8015474 <__ieee754_log+0x44>
 8015468:	460b      	mov	r3, r1
 801546a:	f7ea ff35 	bl	80002d8 <__aeabi_dsub>
 801546e:	2200      	movs	r2, #0
 8015470:	2300      	movs	r3, #0
 8015472:	e7f0      	b.n	8015456 <__ieee754_log+0x26>
 8015474:	4bc3      	ldr	r3, [pc, #780]	; (8015784 <__ieee754_log+0x354>)
 8015476:	2200      	movs	r2, #0
 8015478:	f7eb f8e6 	bl	8000648 <__aeabi_dmul>
 801547c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8015480:	460d      	mov	r5, r1
 8015482:	4ac1      	ldr	r2, [pc, #772]	; (8015788 <__ieee754_log+0x358>)
 8015484:	4295      	cmp	r5, r2
 8015486:	dd06      	ble.n	8015496 <__ieee754_log+0x66>
 8015488:	4602      	mov	r2, r0
 801548a:	460b      	mov	r3, r1
 801548c:	f7ea ff26 	bl	80002dc <__adddf3>
 8015490:	e7e3      	b.n	801545a <__ieee754_log+0x2a>
 8015492:	2300      	movs	r3, #0
 8015494:	e7f5      	b.n	8015482 <__ieee754_log+0x52>
 8015496:	152c      	asrs	r4, r5, #20
 8015498:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 801549c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80154a0:	441c      	add	r4, r3
 80154a2:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 80154a6:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 80154aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80154ae:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 80154b2:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 80154b6:	ea42 0105 	orr.w	r1, r2, r5
 80154ba:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 80154be:	2200      	movs	r2, #0
 80154c0:	4bb2      	ldr	r3, [pc, #712]	; (801578c <__ieee754_log+0x35c>)
 80154c2:	f7ea ff09 	bl	80002d8 <__aeabi_dsub>
 80154c6:	1cab      	adds	r3, r5, #2
 80154c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80154cc:	2b02      	cmp	r3, #2
 80154ce:	4682      	mov	sl, r0
 80154d0:	468b      	mov	fp, r1
 80154d2:	f04f 0200 	mov.w	r2, #0
 80154d6:	dc53      	bgt.n	8015580 <__ieee754_log+0x150>
 80154d8:	2300      	movs	r3, #0
 80154da:	f7eb fb1d 	bl	8000b18 <__aeabi_dcmpeq>
 80154de:	b1d0      	cbz	r0, 8015516 <__ieee754_log+0xe6>
 80154e0:	2c00      	cmp	r4, #0
 80154e2:	f000 8120 	beq.w	8015726 <__ieee754_log+0x2f6>
 80154e6:	4620      	mov	r0, r4
 80154e8:	f7eb f844 	bl	8000574 <__aeabi_i2d>
 80154ec:	a390      	add	r3, pc, #576	; (adr r3, 8015730 <__ieee754_log+0x300>)
 80154ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154f2:	4606      	mov	r6, r0
 80154f4:	460f      	mov	r7, r1
 80154f6:	f7eb f8a7 	bl	8000648 <__aeabi_dmul>
 80154fa:	a38f      	add	r3, pc, #572	; (adr r3, 8015738 <__ieee754_log+0x308>)
 80154fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015500:	4604      	mov	r4, r0
 8015502:	460d      	mov	r5, r1
 8015504:	4630      	mov	r0, r6
 8015506:	4639      	mov	r1, r7
 8015508:	f7eb f89e 	bl	8000648 <__aeabi_dmul>
 801550c:	4602      	mov	r2, r0
 801550e:	460b      	mov	r3, r1
 8015510:	4620      	mov	r0, r4
 8015512:	4629      	mov	r1, r5
 8015514:	e7ba      	b.n	801548c <__ieee754_log+0x5c>
 8015516:	a38a      	add	r3, pc, #552	; (adr r3, 8015740 <__ieee754_log+0x310>)
 8015518:	e9d3 2300 	ldrd	r2, r3, [r3]
 801551c:	4650      	mov	r0, sl
 801551e:	4659      	mov	r1, fp
 8015520:	f7eb f892 	bl	8000648 <__aeabi_dmul>
 8015524:	4602      	mov	r2, r0
 8015526:	460b      	mov	r3, r1
 8015528:	2000      	movs	r0, #0
 801552a:	4999      	ldr	r1, [pc, #612]	; (8015790 <__ieee754_log+0x360>)
 801552c:	f7ea fed4 	bl	80002d8 <__aeabi_dsub>
 8015530:	4652      	mov	r2, sl
 8015532:	4606      	mov	r6, r0
 8015534:	460f      	mov	r7, r1
 8015536:	465b      	mov	r3, fp
 8015538:	4650      	mov	r0, sl
 801553a:	4659      	mov	r1, fp
 801553c:	f7eb f884 	bl	8000648 <__aeabi_dmul>
 8015540:	4602      	mov	r2, r0
 8015542:	460b      	mov	r3, r1
 8015544:	4630      	mov	r0, r6
 8015546:	4639      	mov	r1, r7
 8015548:	f7eb f87e 	bl	8000648 <__aeabi_dmul>
 801554c:	4606      	mov	r6, r0
 801554e:	460f      	mov	r7, r1
 8015550:	b914      	cbnz	r4, 8015558 <__ieee754_log+0x128>
 8015552:	4632      	mov	r2, r6
 8015554:	463b      	mov	r3, r7
 8015556:	e0a0      	b.n	801569a <__ieee754_log+0x26a>
 8015558:	4620      	mov	r0, r4
 801555a:	f7eb f80b 	bl	8000574 <__aeabi_i2d>
 801555e:	a374      	add	r3, pc, #464	; (adr r3, 8015730 <__ieee754_log+0x300>)
 8015560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015564:	4680      	mov	r8, r0
 8015566:	4689      	mov	r9, r1
 8015568:	f7eb f86e 	bl	8000648 <__aeabi_dmul>
 801556c:	a372      	add	r3, pc, #456	; (adr r3, 8015738 <__ieee754_log+0x308>)
 801556e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015572:	4604      	mov	r4, r0
 8015574:	460d      	mov	r5, r1
 8015576:	4640      	mov	r0, r8
 8015578:	4649      	mov	r1, r9
 801557a:	f7eb f865 	bl	8000648 <__aeabi_dmul>
 801557e:	e0a5      	b.n	80156cc <__ieee754_log+0x29c>
 8015580:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8015584:	f7ea feaa 	bl	80002dc <__adddf3>
 8015588:	4602      	mov	r2, r0
 801558a:	460b      	mov	r3, r1
 801558c:	4650      	mov	r0, sl
 801558e:	4659      	mov	r1, fp
 8015590:	f7eb f984 	bl	800089c <__aeabi_ddiv>
 8015594:	e9cd 0100 	strd	r0, r1, [sp]
 8015598:	4620      	mov	r0, r4
 801559a:	f7ea ffeb 	bl	8000574 <__aeabi_i2d>
 801559e:	e9dd 2300 	ldrd	r2, r3, [sp]
 80155a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80155a6:	4610      	mov	r0, r2
 80155a8:	4619      	mov	r1, r3
 80155aa:	f7eb f84d 	bl	8000648 <__aeabi_dmul>
 80155ae:	4602      	mov	r2, r0
 80155b0:	460b      	mov	r3, r1
 80155b2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80155b6:	f7eb f847 	bl	8000648 <__aeabi_dmul>
 80155ba:	a363      	add	r3, pc, #396	; (adr r3, 8015748 <__ieee754_log+0x318>)
 80155bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155c0:	4680      	mov	r8, r0
 80155c2:	4689      	mov	r9, r1
 80155c4:	f7eb f840 	bl	8000648 <__aeabi_dmul>
 80155c8:	a361      	add	r3, pc, #388	; (adr r3, 8015750 <__ieee754_log+0x320>)
 80155ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155ce:	f7ea fe85 	bl	80002dc <__adddf3>
 80155d2:	4642      	mov	r2, r8
 80155d4:	464b      	mov	r3, r9
 80155d6:	f7eb f837 	bl	8000648 <__aeabi_dmul>
 80155da:	a35f      	add	r3, pc, #380	; (adr r3, 8015758 <__ieee754_log+0x328>)
 80155dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155e0:	f7ea fe7c 	bl	80002dc <__adddf3>
 80155e4:	4642      	mov	r2, r8
 80155e6:	464b      	mov	r3, r9
 80155e8:	f7eb f82e 	bl	8000648 <__aeabi_dmul>
 80155ec:	a35c      	add	r3, pc, #368	; (adr r3, 8015760 <__ieee754_log+0x330>)
 80155ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155f2:	f7ea fe73 	bl	80002dc <__adddf3>
 80155f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80155fa:	f7eb f825 	bl	8000648 <__aeabi_dmul>
 80155fe:	a35a      	add	r3, pc, #360	; (adr r3, 8015768 <__ieee754_log+0x338>)
 8015600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015604:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015608:	4640      	mov	r0, r8
 801560a:	4649      	mov	r1, r9
 801560c:	f7eb f81c 	bl	8000648 <__aeabi_dmul>
 8015610:	a357      	add	r3, pc, #348	; (adr r3, 8015770 <__ieee754_log+0x340>)
 8015612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015616:	f7ea fe61 	bl	80002dc <__adddf3>
 801561a:	4642      	mov	r2, r8
 801561c:	464b      	mov	r3, r9
 801561e:	f7eb f813 	bl	8000648 <__aeabi_dmul>
 8015622:	a355      	add	r3, pc, #340	; (adr r3, 8015778 <__ieee754_log+0x348>)
 8015624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015628:	f7ea fe58 	bl	80002dc <__adddf3>
 801562c:	4642      	mov	r2, r8
 801562e:	464b      	mov	r3, r9
 8015630:	f7eb f80a 	bl	8000648 <__aeabi_dmul>
 8015634:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 8015638:	4602      	mov	r2, r0
 801563a:	460b      	mov	r3, r1
 801563c:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8015640:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015644:	f7ea fe4a 	bl	80002dc <__adddf3>
 8015648:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 801564c:	3551      	adds	r5, #81	; 0x51
 801564e:	4335      	orrs	r5, r6
 8015650:	2d00      	cmp	r5, #0
 8015652:	4680      	mov	r8, r0
 8015654:	4689      	mov	r9, r1
 8015656:	dd48      	ble.n	80156ea <__ieee754_log+0x2ba>
 8015658:	2200      	movs	r2, #0
 801565a:	4b4d      	ldr	r3, [pc, #308]	; (8015790 <__ieee754_log+0x360>)
 801565c:	4650      	mov	r0, sl
 801565e:	4659      	mov	r1, fp
 8015660:	f7ea fff2 	bl	8000648 <__aeabi_dmul>
 8015664:	4652      	mov	r2, sl
 8015666:	465b      	mov	r3, fp
 8015668:	f7ea ffee 	bl	8000648 <__aeabi_dmul>
 801566c:	4602      	mov	r2, r0
 801566e:	460b      	mov	r3, r1
 8015670:	4606      	mov	r6, r0
 8015672:	460f      	mov	r7, r1
 8015674:	4640      	mov	r0, r8
 8015676:	4649      	mov	r1, r9
 8015678:	f7ea fe30 	bl	80002dc <__adddf3>
 801567c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015680:	f7ea ffe2 	bl	8000648 <__aeabi_dmul>
 8015684:	4680      	mov	r8, r0
 8015686:	4689      	mov	r9, r1
 8015688:	b964      	cbnz	r4, 80156a4 <__ieee754_log+0x274>
 801568a:	4602      	mov	r2, r0
 801568c:	460b      	mov	r3, r1
 801568e:	4630      	mov	r0, r6
 8015690:	4639      	mov	r1, r7
 8015692:	f7ea fe21 	bl	80002d8 <__aeabi_dsub>
 8015696:	4602      	mov	r2, r0
 8015698:	460b      	mov	r3, r1
 801569a:	4650      	mov	r0, sl
 801569c:	4659      	mov	r1, fp
 801569e:	f7ea fe1b 	bl	80002d8 <__aeabi_dsub>
 80156a2:	e6da      	b.n	801545a <__ieee754_log+0x2a>
 80156a4:	a322      	add	r3, pc, #136	; (adr r3, 8015730 <__ieee754_log+0x300>)
 80156a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80156ae:	f7ea ffcb 	bl	8000648 <__aeabi_dmul>
 80156b2:	a321      	add	r3, pc, #132	; (adr r3, 8015738 <__ieee754_log+0x308>)
 80156b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156b8:	4604      	mov	r4, r0
 80156ba:	460d      	mov	r5, r1
 80156bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80156c0:	f7ea ffc2 	bl	8000648 <__aeabi_dmul>
 80156c4:	4642      	mov	r2, r8
 80156c6:	464b      	mov	r3, r9
 80156c8:	f7ea fe08 	bl	80002dc <__adddf3>
 80156cc:	4602      	mov	r2, r0
 80156ce:	460b      	mov	r3, r1
 80156d0:	4630      	mov	r0, r6
 80156d2:	4639      	mov	r1, r7
 80156d4:	f7ea fe00 	bl	80002d8 <__aeabi_dsub>
 80156d8:	4652      	mov	r2, sl
 80156da:	465b      	mov	r3, fp
 80156dc:	f7ea fdfc 	bl	80002d8 <__aeabi_dsub>
 80156e0:	4602      	mov	r2, r0
 80156e2:	460b      	mov	r3, r1
 80156e4:	4620      	mov	r0, r4
 80156e6:	4629      	mov	r1, r5
 80156e8:	e7d9      	b.n	801569e <__ieee754_log+0x26e>
 80156ea:	4602      	mov	r2, r0
 80156ec:	460b      	mov	r3, r1
 80156ee:	4650      	mov	r0, sl
 80156f0:	4659      	mov	r1, fp
 80156f2:	f7ea fdf1 	bl	80002d8 <__aeabi_dsub>
 80156f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80156fa:	f7ea ffa5 	bl	8000648 <__aeabi_dmul>
 80156fe:	4606      	mov	r6, r0
 8015700:	460f      	mov	r7, r1
 8015702:	2c00      	cmp	r4, #0
 8015704:	f43f af25 	beq.w	8015552 <__ieee754_log+0x122>
 8015708:	a309      	add	r3, pc, #36	; (adr r3, 8015730 <__ieee754_log+0x300>)
 801570a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801570e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015712:	f7ea ff99 	bl	8000648 <__aeabi_dmul>
 8015716:	a308      	add	r3, pc, #32	; (adr r3, 8015738 <__ieee754_log+0x308>)
 8015718:	e9d3 2300 	ldrd	r2, r3, [r3]
 801571c:	4604      	mov	r4, r0
 801571e:	460d      	mov	r5, r1
 8015720:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015724:	e729      	b.n	801557a <__ieee754_log+0x14a>
 8015726:	2000      	movs	r0, #0
 8015728:	2100      	movs	r1, #0
 801572a:	e696      	b.n	801545a <__ieee754_log+0x2a>
 801572c:	f3af 8000 	nop.w
 8015730:	fee00000 	.word	0xfee00000
 8015734:	3fe62e42 	.word	0x3fe62e42
 8015738:	35793c76 	.word	0x35793c76
 801573c:	3dea39ef 	.word	0x3dea39ef
 8015740:	55555555 	.word	0x55555555
 8015744:	3fd55555 	.word	0x3fd55555
 8015748:	df3e5244 	.word	0xdf3e5244
 801574c:	3fc2f112 	.word	0x3fc2f112
 8015750:	96cb03de 	.word	0x96cb03de
 8015754:	3fc74664 	.word	0x3fc74664
 8015758:	94229359 	.word	0x94229359
 801575c:	3fd24924 	.word	0x3fd24924
 8015760:	55555593 	.word	0x55555593
 8015764:	3fe55555 	.word	0x3fe55555
 8015768:	d078c69f 	.word	0xd078c69f
 801576c:	3fc39a09 	.word	0x3fc39a09
 8015770:	1d8e78af 	.word	0x1d8e78af
 8015774:	3fcc71c5 	.word	0x3fcc71c5
 8015778:	9997fa04 	.word	0x9997fa04
 801577c:	3fd99999 	.word	0x3fd99999
 8015780:	c3500000 	.word	0xc3500000
 8015784:	43500000 	.word	0x43500000
 8015788:	7fefffff 	.word	0x7fefffff
 801578c:	3ff00000 	.word	0x3ff00000
 8015790:	3fe00000 	.word	0x3fe00000

08015794 <copysign>:
 8015794:	ec51 0b10 	vmov	r0, r1, d0
 8015798:	ee11 0a90 	vmov	r0, s3
 801579c:	ee10 2a10 	vmov	r2, s0
 80157a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80157a4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80157a8:	ea41 0300 	orr.w	r3, r1, r0
 80157ac:	ec43 2b10 	vmov	d0, r2, r3
 80157b0:	4770      	bx	lr
	...

080157b4 <_init>:
 80157b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80157b6:	bf00      	nop
 80157b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80157ba:	bc08      	pop	{r3}
 80157bc:	469e      	mov	lr, r3
 80157be:	4770      	bx	lr

080157c0 <_fini>:
 80157c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80157c2:	bf00      	nop
 80157c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80157c6:	bc08      	pop	{r3}
 80157c8:	469e      	mov	lr, r3
 80157ca:	4770      	bx	lr
